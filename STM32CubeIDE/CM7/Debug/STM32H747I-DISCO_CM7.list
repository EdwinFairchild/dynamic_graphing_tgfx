
STM32H747I-DISCO_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0002895c  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00004bf4  08028c00  08028c00  00029c00  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 FontFlashSection 000098f6  0802d7f4  0802d7f4  0002e7f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 FontSearchFlashSection 00000040  080370ec  080370ec  000380ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 ExtFlashSection 010040a0  90000000  90000000  0003a000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 TextFlashSection 0000009a  910040a0  910040a0  0103e0a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .ARM.extab    00000000  0803712c  0803712c  0103e13a  2**0
                  CONTENTS
  8 .ARM          00000008  0803712c  0803712c  0003812c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .preinit_array 00000000  08037134  08037134  0103e13a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 10 .init_array   0000001c  08037134  08037134  00038134  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .fini_array   00000008  08037150  08037150  00038150  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .data         0000013c  24000000  08037158  00039000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 13 TouchGFX_ScratchbufferA 00000100  24000140  08037294  00039140  2**5
                  CONTENTS, ALLOC, LOAD, DATA
 14 TouchGFX_ScratchbufferB 00000100  24000240  08037394  00039240  2**5
                  CONTENTS, ALLOC, LOAD, DATA
 15 .bss          00029800  24000340  08037494  00039340  2**2
                  ALLOC
 16 ._user_heap_stack 00002000  24029b40  08037494  00039b40  2**0
                  ALLOC
 17 .ARM.attributes 0000002e  00000000  00000000  0103e13a  2**0
                  CONTENTS, READONLY
 18 BufferSection 00232800  d0000000  d0000000  0103f000  2**2
                  ALLOC
 19 .debug_info   0011e6ab  00000000  00000000  0103e168  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_abbrev 0001c8da  00000000  00000000  0115c813  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_aranges 00004838  00000000  00000000  011790f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_rnglists 000048d9  00000000  00000000  0117d928  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_macro  00054ba8  00000000  00000000  01182201  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_line   0007689f  00000000  00000000  011d6da9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 25 .debug_str    001ebf79  00000000  00000000  0124d648  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 26 .comment      000000c2  00000000  00000000  014395c1  2**0
                  CONTENTS, READONLY
 27 .debug_frame  0000b4b4  00000000  00000000  01439684  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 28 .debug_loclists 00023edd  00000000  00000000  01444b38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 29 .debug_line_str 0000006c  00000000  00000000  01468a15  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000340 	.word	0x24000340
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08028be4 	.word	0x08028be4

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000344 	.word	0x24000344
 80002dc:	08028be4 	.word	0x08028be4

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_drsub>:
 8000380:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000384:	e002      	b.n	800038c <__adddf3>
 8000386:	bf00      	nop

08000388 <__aeabi_dsub>:
 8000388:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800038c <__adddf3>:
 800038c:	b530      	push	{r4, r5, lr}
 800038e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000392:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000396:	ea94 0f05 	teq	r4, r5
 800039a:	bf08      	it	eq
 800039c:	ea90 0f02 	teqeq	r0, r2
 80003a0:	bf1f      	itttt	ne
 80003a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003b2:	f000 80e2 	beq.w	800057a <__adddf3+0x1ee>
 80003b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003be:	bfb8      	it	lt
 80003c0:	426d      	neglt	r5, r5
 80003c2:	dd0c      	ble.n	80003de <__adddf3+0x52>
 80003c4:	442c      	add	r4, r5
 80003c6:	ea80 0202 	eor.w	r2, r0, r2
 80003ca:	ea81 0303 	eor.w	r3, r1, r3
 80003ce:	ea82 0000 	eor.w	r0, r2, r0
 80003d2:	ea83 0101 	eor.w	r1, r3, r1
 80003d6:	ea80 0202 	eor.w	r2, r0, r2
 80003da:	ea81 0303 	eor.w	r3, r1, r3
 80003de:	2d36      	cmp	r5, #54	@ 0x36
 80003e0:	bf88      	it	hi
 80003e2:	bd30      	pophi	{r4, r5, pc}
 80003e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80003e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80003ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80003f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80003f4:	d002      	beq.n	80003fc <__adddf3+0x70>
 80003f6:	4240      	negs	r0, r0
 80003f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80003fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000400:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000404:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000408:	d002      	beq.n	8000410 <__adddf3+0x84>
 800040a:	4252      	negs	r2, r2
 800040c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000410:	ea94 0f05 	teq	r4, r5
 8000414:	f000 80a7 	beq.w	8000566 <__adddf3+0x1da>
 8000418:	f1a4 0401 	sub.w	r4, r4, #1
 800041c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000420:	db0d      	blt.n	800043e <__adddf3+0xb2>
 8000422:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000426:	fa22 f205 	lsr.w	r2, r2, r5
 800042a:	1880      	adds	r0, r0, r2
 800042c:	f141 0100 	adc.w	r1, r1, #0
 8000430:	fa03 f20e 	lsl.w	r2, r3, lr
 8000434:	1880      	adds	r0, r0, r2
 8000436:	fa43 f305 	asr.w	r3, r3, r5
 800043a:	4159      	adcs	r1, r3
 800043c:	e00e      	b.n	800045c <__adddf3+0xd0>
 800043e:	f1a5 0520 	sub.w	r5, r5, #32
 8000442:	f10e 0e20 	add.w	lr, lr, #32
 8000446:	2a01      	cmp	r2, #1
 8000448:	fa03 fc0e 	lsl.w	ip, r3, lr
 800044c:	bf28      	it	cs
 800044e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000452:	fa43 f305 	asr.w	r3, r3, r5
 8000456:	18c0      	adds	r0, r0, r3
 8000458:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800045c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000460:	d507      	bpl.n	8000472 <__adddf3+0xe6>
 8000462:	f04f 0e00 	mov.w	lr, #0
 8000466:	f1dc 0c00 	rsbs	ip, ip, #0
 800046a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800046e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000472:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000476:	d31b      	bcc.n	80004b0 <__adddf3+0x124>
 8000478:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800047c:	d30c      	bcc.n	8000498 <__adddf3+0x10c>
 800047e:	0849      	lsrs	r1, r1, #1
 8000480:	ea5f 0030 	movs.w	r0, r0, rrx
 8000484:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000488:	f104 0401 	add.w	r4, r4, #1
 800048c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000490:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000494:	f080 809a 	bcs.w	80005cc <__adddf3+0x240>
 8000498:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800049c:	bf08      	it	eq
 800049e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004a2:	f150 0000 	adcs.w	r0, r0, #0
 80004a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004aa:	ea41 0105 	orr.w	r1, r1, r5
 80004ae:	bd30      	pop	{r4, r5, pc}
 80004b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004b4:	4140      	adcs	r0, r0
 80004b6:	eb41 0101 	adc.w	r1, r1, r1
 80004ba:	3c01      	subs	r4, #1
 80004bc:	bf28      	it	cs
 80004be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80004c2:	d2e9      	bcs.n	8000498 <__adddf3+0x10c>
 80004c4:	f091 0f00 	teq	r1, #0
 80004c8:	bf04      	itt	eq
 80004ca:	4601      	moveq	r1, r0
 80004cc:	2000      	moveq	r0, #0
 80004ce:	fab1 f381 	clz	r3, r1
 80004d2:	bf08      	it	eq
 80004d4:	3320      	addeq	r3, #32
 80004d6:	f1a3 030b 	sub.w	r3, r3, #11
 80004da:	f1b3 0220 	subs.w	r2, r3, #32
 80004de:	da0c      	bge.n	80004fa <__adddf3+0x16e>
 80004e0:	320c      	adds	r2, #12
 80004e2:	dd08      	ble.n	80004f6 <__adddf3+0x16a>
 80004e4:	f102 0c14 	add.w	ip, r2, #20
 80004e8:	f1c2 020c 	rsb	r2, r2, #12
 80004ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80004f0:	fa21 f102 	lsr.w	r1, r1, r2
 80004f4:	e00c      	b.n	8000510 <__adddf3+0x184>
 80004f6:	f102 0214 	add.w	r2, r2, #20
 80004fa:	bfd8      	it	le
 80004fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000500:	fa01 f102 	lsl.w	r1, r1, r2
 8000504:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000508:	bfdc      	itt	le
 800050a:	ea41 010c 	orrle.w	r1, r1, ip
 800050e:	4090      	lslle	r0, r2
 8000510:	1ae4      	subs	r4, r4, r3
 8000512:	bfa2      	ittt	ge
 8000514:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000518:	4329      	orrge	r1, r5
 800051a:	bd30      	popge	{r4, r5, pc}
 800051c:	ea6f 0404 	mvn.w	r4, r4
 8000520:	3c1f      	subs	r4, #31
 8000522:	da1c      	bge.n	800055e <__adddf3+0x1d2>
 8000524:	340c      	adds	r4, #12
 8000526:	dc0e      	bgt.n	8000546 <__adddf3+0x1ba>
 8000528:	f104 0414 	add.w	r4, r4, #20
 800052c:	f1c4 0220 	rsb	r2, r4, #32
 8000530:	fa20 f004 	lsr.w	r0, r0, r4
 8000534:	fa01 f302 	lsl.w	r3, r1, r2
 8000538:	ea40 0003 	orr.w	r0, r0, r3
 800053c:	fa21 f304 	lsr.w	r3, r1, r4
 8000540:	ea45 0103 	orr.w	r1, r5, r3
 8000544:	bd30      	pop	{r4, r5, pc}
 8000546:	f1c4 040c 	rsb	r4, r4, #12
 800054a:	f1c4 0220 	rsb	r2, r4, #32
 800054e:	fa20 f002 	lsr.w	r0, r0, r2
 8000552:	fa01 f304 	lsl.w	r3, r1, r4
 8000556:	ea40 0003 	orr.w	r0, r0, r3
 800055a:	4629      	mov	r1, r5
 800055c:	bd30      	pop	{r4, r5, pc}
 800055e:	fa21 f004 	lsr.w	r0, r1, r4
 8000562:	4629      	mov	r1, r5
 8000564:	bd30      	pop	{r4, r5, pc}
 8000566:	f094 0f00 	teq	r4, #0
 800056a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800056e:	bf06      	itte	eq
 8000570:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000574:	3401      	addeq	r4, #1
 8000576:	3d01      	subne	r5, #1
 8000578:	e74e      	b.n	8000418 <__adddf3+0x8c>
 800057a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800057e:	bf18      	it	ne
 8000580:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000584:	d029      	beq.n	80005da <__adddf3+0x24e>
 8000586:	ea94 0f05 	teq	r4, r5
 800058a:	bf08      	it	eq
 800058c:	ea90 0f02 	teqeq	r0, r2
 8000590:	d005      	beq.n	800059e <__adddf3+0x212>
 8000592:	ea54 0c00 	orrs.w	ip, r4, r0
 8000596:	bf04      	itt	eq
 8000598:	4619      	moveq	r1, r3
 800059a:	4610      	moveq	r0, r2
 800059c:	bd30      	pop	{r4, r5, pc}
 800059e:	ea91 0f03 	teq	r1, r3
 80005a2:	bf1e      	ittt	ne
 80005a4:	2100      	movne	r1, #0
 80005a6:	2000      	movne	r0, #0
 80005a8:	bd30      	popne	{r4, r5, pc}
 80005aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005ae:	d105      	bne.n	80005bc <__adddf3+0x230>
 80005b0:	0040      	lsls	r0, r0, #1
 80005b2:	4149      	adcs	r1, r1
 80005b4:	bf28      	it	cs
 80005b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80005ba:	bd30      	pop	{r4, r5, pc}
 80005bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80005c0:	bf3c      	itt	cc
 80005c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80005c6:	bd30      	popcc	{r4, r5, pc}
 80005c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80005d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80005d4:	f04f 0000 	mov.w	r0, #0
 80005d8:	bd30      	pop	{r4, r5, pc}
 80005da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005de:	bf1a      	itte	ne
 80005e0:	4619      	movne	r1, r3
 80005e2:	4610      	movne	r0, r2
 80005e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80005e8:	bf1c      	itt	ne
 80005ea:	460b      	movne	r3, r1
 80005ec:	4602      	movne	r2, r0
 80005ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80005f2:	bf06      	itte	eq
 80005f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80005f8:	ea91 0f03 	teqeq	r1, r3
 80005fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000600:	bd30      	pop	{r4, r5, pc}
 8000602:	bf00      	nop

08000604 <__aeabi_ui2d>:
 8000604:	f090 0f00 	teq	r0, #0
 8000608:	bf04      	itt	eq
 800060a:	2100      	moveq	r1, #0
 800060c:	4770      	bxeq	lr
 800060e:	b530      	push	{r4, r5, lr}
 8000610:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000614:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000618:	f04f 0500 	mov.w	r5, #0
 800061c:	f04f 0100 	mov.w	r1, #0
 8000620:	e750      	b.n	80004c4 <__adddf3+0x138>
 8000622:	bf00      	nop

08000624 <__aeabi_i2d>:
 8000624:	f090 0f00 	teq	r0, #0
 8000628:	bf04      	itt	eq
 800062a:	2100      	moveq	r1, #0
 800062c:	4770      	bxeq	lr
 800062e:	b530      	push	{r4, r5, lr}
 8000630:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000634:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000638:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800063c:	bf48      	it	mi
 800063e:	4240      	negmi	r0, r0
 8000640:	f04f 0100 	mov.w	r1, #0
 8000644:	e73e      	b.n	80004c4 <__adddf3+0x138>
 8000646:	bf00      	nop

08000648 <__aeabi_f2d>:
 8000648:	0042      	lsls	r2, r0, #1
 800064a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800064e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000652:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000656:	bf1f      	itttt	ne
 8000658:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800065c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000660:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000664:	4770      	bxne	lr
 8000666:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800066a:	bf08      	it	eq
 800066c:	4770      	bxeq	lr
 800066e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000672:	bf04      	itt	eq
 8000674:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000678:	4770      	bxeq	lr
 800067a:	b530      	push	{r4, r5, lr}
 800067c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000680:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000684:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000688:	e71c      	b.n	80004c4 <__adddf3+0x138>
 800068a:	bf00      	nop

0800068c <__aeabi_ul2d>:
 800068c:	ea50 0201 	orrs.w	r2, r0, r1
 8000690:	bf08      	it	eq
 8000692:	4770      	bxeq	lr
 8000694:	b530      	push	{r4, r5, lr}
 8000696:	f04f 0500 	mov.w	r5, #0
 800069a:	e00a      	b.n	80006b2 <__aeabi_l2d+0x16>

0800069c <__aeabi_l2d>:
 800069c:	ea50 0201 	orrs.w	r2, r0, r1
 80006a0:	bf08      	it	eq
 80006a2:	4770      	bxeq	lr
 80006a4:	b530      	push	{r4, r5, lr}
 80006a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80006aa:	d502      	bpl.n	80006b2 <__aeabi_l2d+0x16>
 80006ac:	4240      	negs	r0, r0
 80006ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006be:	f43f aed8 	beq.w	8000472 <__adddf3+0xe6>
 80006c2:	f04f 0203 	mov.w	r2, #3
 80006c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006ca:	bf18      	it	ne
 80006cc:	3203      	addne	r2, #3
 80006ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006d2:	bf18      	it	ne
 80006d4:	3203      	addne	r2, #3
 80006d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006da:	f1c2 0320 	rsb	r3, r2, #32
 80006de:	fa00 fc03 	lsl.w	ip, r0, r3
 80006e2:	fa20 f002 	lsr.w	r0, r0, r2
 80006e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80006ea:	ea40 000e 	orr.w	r0, r0, lr
 80006ee:	fa21 f102 	lsr.w	r1, r1, r2
 80006f2:	4414      	add	r4, r2
 80006f4:	e6bd      	b.n	8000472 <__adddf3+0xe6>
 80006f6:	bf00      	nop

080006f8 <vApplicationIdleHook>:
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
vTaskSetApplicationTaskTag(NULL, IdleTaskHook);
 80006f8:	4901      	ldr	r1, [pc, #4]	@ (8000700 <vApplicationIdleHook+0x8>)
 80006fa:	2000      	movs	r0, #0
 80006fc:	f00e b838 	b.w	800e770 <vTaskSetApplicationTaskTag>
 8000700:	08002011 	.word	0x08002011

08000704 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000704:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000706:	b09d      	sub	sp, #116	@ 0x74
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000708:	224c      	movs	r2, #76	@ 0x4c
 800070a:	2100      	movs	r1, #0
 800070c:	a809      	add	r0, sp, #36	@ 0x24
 800070e:	f027 fcd3 	bl	80280b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000712:	2220      	movs	r2, #32
 8000714:	2100      	movs	r1, #0
 8000716:	a801      	add	r0, sp, #4
 8000718:	f027 fcce 	bl	80280b8 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 800071c:	2004      	movs	r0, #4
 800071e:	f00a f9cb 	bl	800aab8 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000722:	2300      	movs	r3, #0
 8000724:	9300      	str	r3, [sp, #0]
 8000726:	4b26      	ldr	r3, [pc, #152]	@ (80007c0 <SystemClock_Config+0xbc>)
 8000728:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800072a:	f022 0201 	bic.w	r2, r2, #1
 800072e:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000730:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000732:	f003 0301 	and.w	r3, r3, #1
 8000736:	9300      	str	r3, [sp, #0]
 8000738:	4b22      	ldr	r3, [pc, #136]	@ (80007c4 <SystemClock_Config+0xc0>)
 800073a:	699a      	ldr	r2, [r3, #24]
 800073c:	f442 4240 	orr.w	r2, r2, #49152	@ 0xc000
 8000740:	619a      	str	r2, [r3, #24]
 8000742:	699a      	ldr	r2, [r3, #24]
 8000744:	f402 4240 	and.w	r2, r2, #49152	@ 0xc000
 8000748:	9200      	str	r2, [sp, #0]
 800074a:	9a00      	ldr	r2, [sp, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800074c:	699a      	ldr	r2, [r3, #24]
 800074e:	0491      	lsls	r1, r2, #18
 8000750:	d5fc      	bpl.n	800074c <SystemClock_Config+0x48>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000752:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000756:	2703      	movs	r7, #3
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000758:	2540      	movs	r5, #64	@ 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLM = 5;
  RCC_OscInitStruct.PLL.PLLN = 160;
 800075a:	2205      	movs	r2, #5
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800075c:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PLLP = 2;
  RCC_OscInitStruct.PLL.PLLQ = 2;
  RCC_OscInitStruct.PLL.PLLR = 2;
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800075e:	2608      	movs	r6, #8
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000760:	a809      	add	r0, sp, #36	@ 0x24
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000762:	9418      	str	r4, [sp, #96]	@ 0x60
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000764:	e9cd 7309 	strd	r7, r3, [sp, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000768:	2301      	movs	r3, #1
 800076a:	e9cd 350c 	strd	r3, r5, [sp, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLN = 160;
 800076e:	23a0      	movs	r3, #160	@ 0xa0
 8000770:	e9cd 2314 	strd	r2, r3, [sp, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000774:	2300      	movs	r3, #0
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000776:	e9cd 4412 	strd	r4, r4, [sp, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800077a:	e9cd 4416 	strd	r4, r4, [sp, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800077e:	e9cd 6319 	strd	r6, r3, [sp, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000782:	931b      	str	r3, [sp, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000784:	f00a fc96 	bl	800b0b4 <HAL_RCC_OscConfig>
 8000788:	b108      	cbz	r0, 800078e <SystemClock_Config+0x8a>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800078a:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800078c:	e7fe      	b.n	800078c <SystemClock_Config+0x88>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800078e:	233f      	movs	r3, #63	@ 0x3f
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000790:	4621      	mov	r1, r4
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000792:	e9cd 3701 	strd	r3, r7, [sp, #4]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000796:	f44f 6380 	mov.w	r3, #1024	@ 0x400
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800079a:	e9cd 0603 	strd	r0, r6, [sp, #12]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800079e:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80007a0:	e9cd 5505 	strd	r5, r5, [sp, #20]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80007a4:	e9cd 3507 	strd	r3, r5, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80007a8:	f00b f820 	bl	800b7ec <HAL_RCC_ClockConfig>
 80007ac:	4601      	mov	r1, r0
 80007ae:	b108      	cbz	r0, 80007b4 <SystemClock_Config+0xb0>
 80007b0:	b672      	cpsid	i
  while (1)
 80007b2:	e7fe      	b.n	80007b2 <SystemClock_Config+0xae>
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI, RCC_MCODIV_1);
 80007b4:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80007b8:	f00a ff28 	bl	800b60c <HAL_RCC_MCOConfig>
}
 80007bc:	b01d      	add	sp, #116	@ 0x74
 80007be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80007c0:	58000400 	.word	0x58000400
 80007c4:	58024800 	.word	0x58024800

080007c8 <main>:
{
 80007c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80007cc:	b0ba      	sub	sp, #232	@ 0xe8
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 80007ce:	2210      	movs	r2, #16
 80007d0:	2100      	movs	r1, #0
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80007d2:	2401      	movs	r4, #1
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 80007d4:	a82d      	add	r0, sp, #180	@ 0xb4
  MPU_InitStruct.Number = MPU_REGION_NUMBER4;
 80007d6:	2504      	movs	r5, #4
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 80007d8:	f027 fc6e 	bl	80280b8 <memset>
  HAL_MPU_Disable();
 80007dc:	f007 fb3c 	bl	8007e58 <HAL_MPU_Disable>
  MPU_InitStruct.Size = MPU_REGION_SIZE_256MB;
 80007e0:	f04f 4110 	mov.w	r1, #2415919104	@ 0x90000000
 80007e4:	4bbe      	ldr	r3, [pc, #760]	@ (8000ae0 <main+0x318>)
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80007e6:	a82d      	add	r0, sp, #180	@ 0xb4
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80007e8:	f8ad 40b4 	strh.w	r4, [sp, #180]	@ 0xb4
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 80007ec:	9430      	str	r4, [sp, #192]	@ 0xc0
  MPU_InitStruct.Size = MPU_REGION_SIZE_256MB;
 80007ee:	e9cd 132e 	strd	r1, r3, [sp, #184]	@ 0xb8
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80007f2:	f007 fb4f 	bl	8007e94 <HAL_MPU_ConfigRegion>
  MPU_InitStruct.Size = MPU_REGION_SIZE_128MB;
 80007f6:	231a      	movs	r3, #26
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80007f8:	a82d      	add	r0, sp, #180	@ 0xb4
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 80007fa:	f88d 40b5 	strb.w	r4, [sp, #181]	@ 0xb5
  MPU_InitStruct.Size = MPU_REGION_SIZE_128MB;
 80007fe:	f88d 30bc 	strb.w	r3, [sp, #188]	@ 0xbc
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000802:	f007 fb47 	bl	8007e94 <HAL_MPU_ConfigRegion>
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
 8000806:	2302      	movs	r3, #2
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000808:	a82d      	add	r0, sp, #180	@ 0xb4
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 800080a:	f88d 40c2 	strb.w	r4, [sp, #194]	@ 0xc2
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
 800080e:	f88d 30b5 	strb.w	r3, [sp, #181]	@ 0xb5
  MPU_InitStruct.BaseAddress = 0xD0000000;
 8000812:	f04f 4350 	mov.w	r3, #3489660928	@ 0xd0000000
 8000816:	932e      	str	r3, [sp, #184]	@ 0xb8
  MPU_InitStruct.Size = MPU_REGION_SIZE_32MB;
 8000818:	2318      	movs	r3, #24
 800081a:	f88d 30bc 	strb.w	r3, [sp, #188]	@ 0xbc
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800081e:	f007 fb39 	bl	8007e94 <HAL_MPU_ConfigRegion>
  MPU_InitStruct.Number = MPU_REGION_NUMBER3;
 8000822:	2303      	movs	r3, #3
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000824:	a82d      	add	r0, sp, #180	@ 0xb4
  MPU_InitStruct.Number = MPU_REGION_NUMBER3;
 8000826:	f88d 30b5 	strb.w	r3, [sp, #181]	@ 0xb5
  MPU_InitStruct.BaseAddress = 0x24000000;
 800082a:	f04f 5310 	mov.w	r3, #603979776	@ 0x24000000
 800082e:	932e      	str	r3, [sp, #184]	@ 0xb8
  MPU_InitStruct.Size = MPU_REGION_SIZE_512KB;
 8000830:	2312      	movs	r3, #18
 8000832:	f88d 30bc 	strb.w	r3, [sp, #188]	@ 0xbc
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8000836:	2300      	movs	r3, #0
 8000838:	f88d 30c0 	strb.w	r3, [sp, #192]	@ 0xc0
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800083c:	f007 fb2a 	bl	8007e94 <HAL_MPU_ConfigRegion>
  MPU_InitStruct.BaseAddress = 0x10000000;
 8000840:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000844:	a82d      	add	r0, sp, #180	@ 0xb4
  MPU_InitStruct.Number = MPU_REGION_NUMBER4;
 8000846:	f88d 50b5 	strb.w	r5, [sp, #181]	@ 0xb5
  MPU_InitStruct.BaseAddress = 0x10000000;
 800084a:	932e      	str	r3, [sp, #184]	@ 0xb8
  MPU_InitStruct.Size = MPU_REGION_SIZE_256KB;
 800084c:	2311      	movs	r3, #17
 800084e:	f88d 30bc 	strb.w	r3, [sp, #188]	@ 0xbc
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000852:	f007 fb1f 	bl	8007e94 <HAL_MPU_ConfigRegion>
  MPU_InitStruct.Number = MPU_REGION_NUMBER5;
 8000856:	2305      	movs	r3, #5
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000858:	a82d      	add	r0, sp, #180	@ 0xb4
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 800085a:	f88d 40c0 	strb.w	r4, [sp, #192]	@ 0xc0
  MPU_InitStruct.Number = MPU_REGION_NUMBER5;
 800085e:	f88d 30b5 	strb.w	r3, [sp, #181]	@ 0xb5
  MPU_InitStruct.BaseAddress = 0x10040000;
 8000862:	4ba0      	ldr	r3, [pc, #640]	@ (8000ae4 <main+0x31c>)
 8000864:	932e      	str	r3, [sp, #184]	@ 0xb8
  MPU_InitStruct.Size = MPU_REGION_SIZE_32KB;
 8000866:	230e      	movs	r3, #14
 8000868:	f88d 30bc 	strb.w	r3, [sp, #188]	@ 0xbc
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800086c:	f007 fb12 	bl	8007e94 <HAL_MPU_ConfigRegion>
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000870:	4628      	mov	r0, r5
 8000872:	f007 faff 	bl	8007e74 <HAL_MPU_Enable>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000876:	4b9c      	ldr	r3, [pc, #624]	@ (8000ae8 <main+0x320>)
 8000878:	695a      	ldr	r2, [r3, #20]
 800087a:	f412 3200 	ands.w	r2, r2, #131072	@ 0x20000
 800087e:	d111      	bne.n	80008a4 <main+0xdc>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000880:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000884:	f3bf 8f6f 	isb	sy

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000888:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800088c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000890:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000894:	695a      	ldr	r2, [r3, #20]
 8000896:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800089a:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800089c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80008a0:	f3bf 8f6f 	isb	sy
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 80008a4:	4a90      	ldr	r2, [pc, #576]	@ (8000ae8 <main+0x320>)
 80008a6:	6953      	ldr	r3, [r2, #20]
 80008a8:	f413 3380 	ands.w	r3, r3, #65536	@ 0x10000
 80008ac:	d123      	bne.n	80008f6 <main+0x12e>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 80008ae:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80008b2:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 80008b6:	f8d2 3080 	ldr.w	r3, [r2, #128]	@ 0x80
                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80008ba:	f643 74e0 	movw	r4, #16352	@ 0x3fe0
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80008be:	f3c3 00c9 	ubfx	r0, r3, #3, #10
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80008c2:	f3c3 334e 	ubfx	r3, r3, #13, #15
 80008c6:	015b      	lsls	r3, r3, #5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80008c8:	ea03 0604 	and.w	r6, r3, r4
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80008cc:	4601      	mov	r1, r0
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80008ce:	ea46 7581 	orr.w	r5, r6, r1, lsl #30
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 80008d2:	3901      	subs	r1, #1
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80008d4:	f8c2 5260 	str.w	r5, [r2, #608]	@ 0x260
      } while (ways-- != 0U);
 80008d8:	d2f9      	bcs.n	80008ce <main+0x106>
    } while(sets-- != 0U);
 80008da:	3b20      	subs	r3, #32
 80008dc:	f113 0f20 	cmn.w	r3, #32
 80008e0:	d1f2      	bne.n	80008c8 <main+0x100>
 80008e2:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 80008e6:	6953      	ldr	r3, [r2, #20]
 80008e8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80008ec:	6153      	str	r3, [r2, #20]
 80008ee:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80008f2:	f3bf 8f6f 	isb	sy
  timeout = 0xFFFF;
 80008f6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 80008fa:	4d7c      	ldr	r5, [pc, #496]	@ (8000aec <main+0x324>)
 80008fc:	682c      	ldr	r4, [r5, #0]
 80008fe:	f414 4400 	ands.w	r4, r4, #32768	@ 0x8000
 8000902:	f000 82e3 	beq.w	8000ecc <main+0x704>
 8000906:	3b01      	subs	r3, #1
 8000908:	d2f8      	bcs.n	80008fc <main+0x134>
  __ASM volatile ("cpsid i" : : : "memory");
 800090a:	b672      	cpsid	i
  while (1)
 800090c:	e7fe      	b.n	800090c <main+0x144>
 800090e:	b672      	cpsid	i
 8000910:	e7fe      	b.n	8000910 <main+0x148>
  hqspi.Instance = QUADSPI;
 8000912:	4877      	ldr	r0, [pc, #476]	@ (8000af0 <main+0x328>)
 8000914:	4a77      	ldr	r2, [pc, #476]	@ (8000af4 <main+0x32c>)
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8000916:	6183      	str	r3, [r0, #24]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_ENABLE;
 8000918:	6204      	str	r4, [r0, #32]
  hqspi.Init.ClockPrescaler = 3;
 800091a:	e9c0 2600 	strd	r2, r6, [r0]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 800091e:	e9c0 5302 	strd	r5, r3, [r0, #8]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8000922:	e9c0 5304 	strd	r5, r3, [r0, #16]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8000926:	f00a f9e5 	bl	800acf4 <HAL_QSPI_Init>
 800092a:	b108      	cbz	r0, 8000930 <main+0x168>
 800092c:	b672      	cpsid	i
  while (1)
 800092e:	e7fe      	b.n	800092e <main+0x166>
  init.InterfaceMode=MT25TL01G_QPI_MODE;
 8000930:	f240 1303 	movw	r3, #259	@ 0x103
  if (BSP_QSPI_Init(0,&init) != BSP_ERROR_NONE)
 8000934:	a92d      	add	r1, sp, #180	@ 0xb4
  init.DualFlashMode= MT25TL01G_DUALFLASH_ENABLE;
 8000936:	f88d 40b6 	strb.w	r4, [sp, #182]	@ 0xb6
  init.InterfaceMode=MT25TL01G_QPI_MODE;
 800093a:	f8ad 30b4 	strh.w	r3, [sp, #180]	@ 0xb4
  if (BSP_QSPI_Init(0,&init) != BSP_ERROR_NONE)
 800093e:	f006 fd6b 	bl	8007418 <BSP_QSPI_Init>
 8000942:	b108      	cbz	r0, 8000948 <main+0x180>
 8000944:	b672      	cpsid	i
  while (1)
 8000946:	e7fe      	b.n	8000946 <main+0x17e>
  if (BSP_QSPI_EnableMemoryMappedMode(0) != BSP_ERROR_NONE)
 8000948:	f006 fd12 	bl	8007370 <BSP_QSPI_EnableMemoryMappedMode>
 800094c:	4603      	mov	r3, r0
 800094e:	b108      	cbz	r0, 8000954 <main+0x18c>
 8000950:	b672      	cpsid	i
  while (1)
 8000952:	e7fe      	b.n	8000952 <main+0x18a>
  hdma2d.Instance = DMA2D;
 8000954:	4868      	ldr	r0, [pc, #416]	@ (8000af8 <main+0x330>)
  hdma2d.Init.Mode = DMA2D_R2M;
 8000956:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 800095a:	f8df c1a8 	ldr.w	ip, [pc, #424]	@ 8000b04 <main+0x33c>
  hdma2d.Init.OutputOffset = 0;
 800095e:	e9c0 5302 	strd	r5, r3, [r0, #8]
  hdma2d.Init.Mode = DMA2D_R2M;
 8000962:	e9c0 c200 	strd	ip, r2, [r0]
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8000966:	f007 fb22 	bl	8007fae <HAL_DMA2D_Init>
 800096a:	4604      	mov	r4, r0
 800096c:	b108      	cbz	r0, 8000972 <main+0x1aa>
 800096e:	b672      	cpsid	i
  while (1)
 8000970:	e7fe      	b.n	8000970 <main+0x1a8>
  HAL_GPIO_WritePin(GPIOG , GPIO_PIN_3 , GPIO_PIN_RESET);
 8000972:	4602      	mov	r2, r0
 8000974:	4639      	mov	r1, r7
 8000976:	4861      	ldr	r0, [pc, #388]	@ (8000afc <main+0x334>)
 8000978:	f008 f9fc 	bl	8008d74 <HAL_GPIO_WritePin>
  HAL_Delay(20);/* wait 20 ms */
 800097c:	2014      	movs	r0, #20
 800097e:	f007 f9ef 	bl	8007d60 <HAL_Delay>
  HAL_GPIO_WritePin(GPIOG , GPIO_PIN_3, GPIO_PIN_SET);/* Deactivate XRES */
 8000982:	4639      	mov	r1, r7
 8000984:	462a      	mov	r2, r5
 8000986:	485d      	ldr	r0, [pc, #372]	@ (8000afc <main+0x334>)
 8000988:	f008 f9f4 	bl	8008d74 <HAL_GPIO_WritePin>
  HAL_Delay(10);/* Wait for 10ms after releasing XRES before sending commands */
 800098c:	200a      	movs	r0, #10
 800098e:	f007 f9e7 	bl	8007d60 <HAL_Delay>
  DSI_HOST_TimeoutTypeDef HostTimeouts = {0};
 8000992:	2224      	movs	r2, #36	@ 0x24
 8000994:	4621      	mov	r1, r4
 8000996:	a817      	add	r0, sp, #92	@ 0x5c
 8000998:	f027 fb8e 	bl	80280b8 <memset>
  DSI_PHY_TimerTypeDef PhyTimings = {0};
 800099c:	2218      	movs	r2, #24
 800099e:	4621      	mov	r1, r4
 80009a0:	a811      	add	r0, sp, #68	@ 0x44
 80009a2:	f027 fb89 	bl	80280b8 <memset>
  DSI_LPCmdTypeDef LPCmd = {0};
 80009a6:	2234      	movs	r2, #52	@ 0x34
 80009a8:	4621      	mov	r1, r4
 80009aa:	a82d      	add	r0, sp, #180	@ 0xb4
 80009ac:	f027 fb84 	bl	80280b8 <memset>
  DSI_CmdCfgTypeDef CmdCfg = {0};
 80009b0:	4621      	mov	r1, r4
 80009b2:	222c      	movs	r2, #44	@ 0x2c
 80009b4:	a820      	add	r0, sp, #128	@ 0x80
 80009b6:	f027 fb7f 	bl	80280b8 <memset>
  hdsi.Instance = DSI;
 80009ba:	4f51      	ldr	r7, [pc, #324]	@ (8000b00 <main+0x338>)
 80009bc:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
  if (HAL_DSI_Init(&hdsi, &PLLInit) != HAL_OK)
 80009c0:	a90e      	add	r1, sp, #56	@ 0x38
 80009c2:	4638      	mov	r0, r7
  PLLInit.PLLODF = DSI_PLL_OUT_DIV2;
 80009c4:	9510      	str	r5, [sp, #64]	@ 0x40
  hdsi.Init.AutomaticClockLaneControl = DSI_AUTO_CLK_LANE_CTRL_DISABLE;
 80009c6:	e9c7 3400 	strd	r3, r4, [r7]
  PLLInit.PLLNDIV = 119;
 80009ca:	2377      	movs	r3, #119	@ 0x77
  hdsi.Init.NumberOfLanes = DSI_TWO_DATA_LANES;
 80009cc:	e9c7 8502 	strd	r8, r5, [r7, #8]
  PLLInit.PLLIDF = DSI_PLL_IN_DIV3;
 80009d0:	e9cd 360e 	strd	r3, r6, [sp, #56]	@ 0x38
  if (HAL_DSI_Init(&hdsi, &PLLInit) != HAL_OK)
 80009d4:	f007 fc38 	bl	8008248 <HAL_DSI_Init>
 80009d8:	b108      	cbz	r0, 80009de <main+0x216>
 80009da:	b672      	cpsid	i
  while (1)
 80009dc:	e7fe      	b.n	80009dc <main+0x214>
  HostTimeouts.HighSpeedTransmissionTimeout = 0;
 80009de:	e9cd 5017 	strd	r5, r0, [sp, #92]	@ 0x5c
  HostTimeouts.HighSpeedReadTimeout = 0;
 80009e2:	e9cd 0019 	strd	r0, r0, [sp, #100]	@ 0x64
  HostTimeouts.HighSpeedWriteTimeout = 0;
 80009e6:	e9cd 001b 	strd	r0, r0, [sp, #108]	@ 0x6c
  HostTimeouts.LowPowerWriteTimeout = 0;
 80009ea:	e9cd 001d 	strd	r0, r0, [sp, #116]	@ 0x74
  HostTimeouts.BTATimeout = 0;
 80009ee:	901f      	str	r0, [sp, #124]	@ 0x7c
  if (HAL_DSI_ConfigHostTimeouts(&hdsi, &HostTimeouts) != HAL_OK)
 80009f0:	a917      	add	r1, sp, #92	@ 0x5c
 80009f2:	4638      	mov	r0, r7
 80009f4:	f007 fe94 	bl	8008720 <HAL_DSI_ConfigHostTimeouts>
 80009f8:	b108      	cbz	r0, 80009fe <main+0x236>
 80009fa:	b672      	cpsid	i
  while (1)
 80009fc:	e7fe      	b.n	80009fc <main+0x234>
  PhyTimings.ClockLaneLP2HSTime = 33;
 80009fe:	2321      	movs	r3, #33	@ 0x21
 8000a00:	251c      	movs	r5, #28
  PhyTimings.DataLaneLP2HSTime = 25;
 8000a02:	260f      	movs	r6, #15
  if (HAL_DSI_ConfigPhyTimer(&hdsi, &PhyTimings) != HAL_OK)
 8000a04:	a911      	add	r1, sp, #68	@ 0x44
  PhyTimings.ClockLaneLP2HSTime = 33;
 8000a06:	e9cd 5311 	strd	r5, r3, [sp, #68]	@ 0x44
  PhyTimings.DataLaneLP2HSTime = 25;
 8000a0a:	2319      	movs	r3, #25
  PhyTimings.StopWaitTime = 0;
 8000a0c:	e9cd 0015 	strd	r0, r0, [sp, #84]	@ 0x54
  if (HAL_DSI_ConfigPhyTimer(&hdsi, &PhyTimings) != HAL_OK)
 8000a10:	4638      	mov	r0, r7
  PhyTimings.DataLaneLP2HSTime = 25;
 8000a12:	e9cd 6313 	strd	r6, r3, [sp, #76]	@ 0x4c
  if (HAL_DSI_ConfigPhyTimer(&hdsi, &PhyTimings) != HAL_OK)
 8000a16:	f007 fe46 	bl	80086a6 <HAL_DSI_ConfigPhyTimer>
 8000a1a:	b108      	cbz	r0, 8000a20 <main+0x258>
 8000a1c:	b672      	cpsid	i
  while (1)
 8000a1e:	e7fe      	b.n	8000a1e <main+0x256>
  if (HAL_DSI_ConfigFlowControl(&hdsi, DSI_FLOW_CONTROL_BTA) != HAL_OK)
 8000a20:	2104      	movs	r1, #4
 8000a22:	4837      	ldr	r0, [pc, #220]	@ (8000b00 <main+0x338>)
 8000a24:	f007 fe2e 	bl	8008684 <HAL_DSI_ConfigFlowControl>
 8000a28:	b108      	cbz	r0, 8000a2e <main+0x266>
 8000a2a:	b672      	cpsid	i
  while (1)
 8000a2c:	e7fe      	b.n	8000a2c <main+0x264>
  if (HAL_DSI_SetLowPowerRXFilter(&hdsi, 10000) != HAL_OK)
 8000a2e:	f242 7110 	movw	r1, #10000	@ 0x2710
 8000a32:	4833      	ldr	r0, [pc, #204]	@ (8000b00 <main+0x338>)
 8000a34:	f007 fffd 	bl	8008a32 <HAL_DSI_SetLowPowerRXFilter>
 8000a38:	4601      	mov	r1, r0
 8000a3a:	b108      	cbz	r0, 8000a40 <main+0x278>
 8000a3c:	b672      	cpsid	i
  while (1)
 8000a3e:	e7fe      	b.n	8000a3e <main+0x276>
  if (HAL_DSI_ConfigErrorMonitor(&hdsi, HAL_DSI_ERROR_NONE) != HAL_OK)
 8000a40:	482f      	ldr	r0, [pc, #188]	@ (8000b00 <main+0x338>)
 8000a42:	f007 fb9e 	bl	8008182 <HAL_DSI_ConfigErrorMonitor>
 8000a46:	b108      	cbz	r0, 8000a4c <main+0x284>
 8000a48:	b672      	cpsid	i
  while (1)
 8000a4a:	e7fe      	b.n	8000a4a <main+0x282>
  LPCmd.LPGenShortWriteOneP = DSI_LP_GSW1P_ENABLE;
 8000a4c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000a50:	f44f 7980 	mov.w	r9, #256	@ 0x100
  LPCmd.LPGenShortReadNoP = DSI_LP_GSR0P_ENABLE;
 8000a54:	f44f 6a80 	mov.w	sl, #1024	@ 0x400
  LPCmd.LPGenShortReadTwoP = DSI_LP_GSR2P_ENABLE;
 8000a58:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
  LPCmd.LPDcsShortWriteNoP = DSI_LP_DSW0P_ENABLE;
 8000a5c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
  LPCmd.LPDcsShortReadNoP = DSI_LP_DSR0P_ENABLE;
 8000a60:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
  LPCmd.LPMaxReadPacket = DSI_LP_MRDP_ENABLE;
 8000a64:	f44f 2400 	mov.w	r4, #524288	@ 0x80000
  LPCmd.AcknowledgeRequest = DSI_ACKNOWLEDGE_ENABLE;
 8000a68:	f04f 0802 	mov.w	r8, #2
  LPCmd.LPGenShortWriteOneP = DSI_LP_GSW1P_ENABLE;
 8000a6c:	e9cd 932d 	strd	r9, r3, [sp, #180]	@ 0xb4
  LPCmd.LPGenShortReadNoP = DSI_LP_GSR0P_ENABLE;
 8000a70:	f44f 6300 	mov.w	r3, #2048	@ 0x800
  LPCmd.AcknowledgeRequest = DSI_ACKNOWLEDGE_ENABLE;
 8000a74:	f8cd 80e4 	str.w	r8, [sp, #228]	@ 0xe4
  LPCmd.LPGenShortReadNoP = DSI_LP_GSR0P_ENABLE;
 8000a78:	e9cd a32f 	strd	sl, r3, [sp, #188]	@ 0xbc
  LPCmd.LPGenShortReadTwoP = DSI_LP_GSR2P_ENABLE;
 8000a7c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000a80:	e9cd 2331 	strd	r2, r3, [sp, #196]	@ 0xc4
  LPCmd.LPDcsShortWriteNoP = DSI_LP_DSW0P_ENABLE;
 8000a84:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000a88:	e9cd 1333 	strd	r1, r3, [sp, #204]	@ 0xcc
  LPCmd.LPDcsShortReadNoP = DSI_LP_DSR0P_ENABLE;
 8000a8c:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
  if (HAL_DSI_ConfigCommand(&hdsi, &LPCmd) != HAL_OK)
 8000a90:	a92d      	add	r1, sp, #180	@ 0xb4
  LPCmd.LPDcsShortReadNoP = DSI_LP_DSR0P_ENABLE;
 8000a92:	e9cd 0335 	strd	r0, r3, [sp, #212]	@ 0xd4
  LPCmd.LPMaxReadPacket = DSI_LP_MRDP_ENABLE;
 8000a96:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
  if (HAL_DSI_ConfigCommand(&hdsi, &LPCmd) != HAL_OK)
 8000a9a:	4819      	ldr	r0, [pc, #100]	@ (8000b00 <main+0x338>)
  LPCmd.LPMaxReadPacket = DSI_LP_MRDP_ENABLE;
 8000a9c:	e9cd 4337 	strd	r4, r3, [sp, #220]	@ 0xdc
  if (HAL_DSI_ConfigCommand(&hdsi, &LPCmd) != HAL_OK)
 8000aa0:	f007 fdbc 	bl	800861c <HAL_DSI_ConfigCommand>
 8000aa4:	b108      	cbz	r0, 8000aaa <main+0x2e2>
 8000aa6:	b672      	cpsid	i
  while (1)
 8000aa8:	e7fe      	b.n	8000aa8 <main+0x2e0>
  CmdCfg.CommandSize = 400;
 8000aaa:	2305      	movs	r3, #5
 8000aac:	f44f 77c8 	mov.w	r7, #400	@ 0x190
  CmdCfg.TEAcknowledgeRequest = DSI_TE_ACKNOWLEDGE_ENABLE;
 8000ab0:	2601      	movs	r6, #1
  CmdCfg.VirtualChannelID = 0;
 8000ab2:	9020      	str	r0, [sp, #128]	@ 0x80
  CmdCfg.DEPolarity = DSI_DATA_ENABLE_ACTIVE_HIGH;
 8000ab4:	9027      	str	r0, [sp, #156]	@ 0x9c
  CmdCfg.TEAcknowledgeRequest = DSI_TE_ACKNOWLEDGE_ENABLE;
 8000ab6:	962a      	str	r6, [sp, #168]	@ 0xa8
  CmdCfg.CommandSize = 400;
 8000ab8:	e9cd 3721 	strd	r3, r7, [sp, #132]	@ 0x84
  CmdCfg.TearingEffectSource = DSI_TE_EXTERNAL;
 8000abc:	2310      	movs	r3, #16
  CmdCfg.TearingEffectPolarity = DSI_TE_RISING_EDGE;
 8000abe:	e9cd 3023 	strd	r3, r0, [sp, #140]	@ 0x8c
  CmdCfg.VSyncPol = DSI_VSYNC_RISING;
 8000ac2:	2380      	movs	r3, #128	@ 0x80
  CmdCfg.VSPolarity = DSI_VSYNC_ACTIVE_HIGH;
 8000ac4:	e9cd 0025 	strd	r0, r0, [sp, #148]	@ 0x94
  if (HAL_DSI_ConfigAdaptedCommandMode(&hdsi, &CmdCfg) != HAL_OK)
 8000ac8:	eb0d 0103 	add.w	r1, sp, r3
  CmdCfg.AutomaticRefresh = DSI_AR_DISABLE;
 8000acc:	e9cd 3028 	strd	r3, r0, [sp, #160]	@ 0xa0
  if (HAL_DSI_ConfigAdaptedCommandMode(&hdsi, &CmdCfg) != HAL_OK)
 8000ad0:	480b      	ldr	r0, [pc, #44]	@ (8000b00 <main+0x338>)
 8000ad2:	f007 fd31 	bl	8008538 <HAL_DSI_ConfigAdaptedCommandMode>
 8000ad6:	4601      	mov	r1, r0
 8000ad8:	b1b0      	cbz	r0, 8000b08 <main+0x340>
 8000ada:	b672      	cpsid	i
  while (1)
 8000adc:	e7fe      	b.n	8000adc <main+0x314>
 8000ade:	bf00      	nop
 8000ae0:	0300001b 	.word	0x0300001b
 8000ae4:	10040000 	.word	0x10040000
 8000ae8:	e000ed00 	.word	0xe000ed00
 8000aec:	58024400 	.word	0x58024400
 8000af0:	240003c8 	.word	0x240003c8
 8000af4:	52005000 	.word	0x52005000
 8000af8:	24000608 	.word	0x24000608
 8000afc:	58021800 	.word	0x58021800
 8000b00:	240005ec 	.word	0x240005ec
 8000b04:	52001000 	.word	0x52001000
  if (HAL_DSI_SetGenericVCID(&hdsi, 0) != HAL_OK)
 8000b08:	485b      	ldr	r0, [pc, #364]	@ (8000c78 <main+0x4b0>)
 8000b0a:	f007 fd04 	bl	8008516 <HAL_DSI_SetGenericVCID>
 8000b0e:	4604      	mov	r4, r0
 8000b10:	b108      	cbz	r0, 8000b16 <main+0x34e>
 8000b12:	b672      	cpsid	i
  while (1)
 8000b14:	e7fe      	b.n	8000b14 <main+0x34c>
  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8000b16:	2234      	movs	r2, #52	@ 0x34
 8000b18:	4601      	mov	r1, r0
 8000b1a:	a820      	add	r0, sp, #128	@ 0x80
  hltdc.Instance = LTDC;
 8000b1c:	4d57      	ldr	r5, [pc, #348]	@ (8000c7c <main+0x4b4>)
  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8000b1e:	f027 facb 	bl	80280b8 <memset>
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AH;
 8000b22:	f8df c198 	ldr.w	ip, [pc, #408]	@ 8000cbc <main+0x4f4>
 8000b26:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
  hltdc.Init.AccumulatedActiveH = 482;
 8000b2a:	f44f 7ec9 	mov.w	lr, #402	@ 0x192
  hltdc.Init.AccumulatedVBP = 2;
 8000b2e:	f8c5 8020 	str.w	r8, [r5, #32]
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000b32:	4628      	mov	r0, r5
  hltdc.Init.Backcolor.Blue = 0;
 8000b34:	86ac      	strh	r4, [r5, #52]	@ 0x34
  hltdc.Init.Backcolor.Red = 0;
 8000b36:	f885 4036 	strb.w	r4, [r5, #54]	@ 0x36
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AH;
 8000b3a:	e9c5 c300 	strd	ip, r3, [r5]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AH;
 8000b3e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000b42:	e9c5 3402 	strd	r3, r4, [r5, #8]
  hltdc.Init.AccumulatedActiveH = 482;
 8000b46:	f44f 73f1 	mov.w	r3, #482	@ 0x1e2
  hltdc.Init.AccumulatedHBP = 2;
 8000b4a:	e9c5 4806 	strd	r4, r8, [r5, #24]
  hltdc.Init.AccumulatedActiveH = 482;
 8000b4e:	e9c5 e309 	strd	lr, r3, [r5, #36]	@ 0x24
  hltdc.Init.TotalHeigh = 483;
 8000b52:	f240 1893 	movw	r8, #403	@ 0x193
 8000b56:	f240 13e3 	movw	r3, #483	@ 0x1e3
  hltdc.Init.HorizontalSync = 0;
 8000b5a:	e9c5 4404 	strd	r4, r4, [r5, #16]
  hltdc.Init.TotalHeigh = 483;
 8000b5e:	e9c5 830b 	strd	r8, r3, [r5, #44]	@ 0x2c
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000b62:	f009 fc79 	bl	800a458 <HAL_LTDC_Init>
 8000b66:	4602      	mov	r2, r0
 8000b68:	b108      	cbz	r0, 8000b6e <main+0x3a6>
 8000b6a:	b672      	cpsid	i
  while (1)
 8000b6c:	e7fe      	b.n	8000b6c <main+0x3a4>
  pLayerCfg.Alpha = 255;
 8000b6e:	21ff      	movs	r1, #255	@ 0xff
  pLayerCfg.WindowY0 = 0;
 8000b70:	9022      	str	r0, [sp, #136]	@ 0x88
  pLayerCfg.WindowY1 = 480;
 8000b72:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
  pLayerCfg.Backcolor.Blue = 0;
 8000b76:	f8ad 20b0 	strh.w	r2, [sp, #176]	@ 0xb0
  pLayerCfg.Backcolor.Red = 0;
 8000b7a:	f88d 20b2 	strb.w	r2, [sp, #178]	@ 0xb2
  pLayerCfg.ImageHeight = 480;
 8000b7e:	932b      	str	r3, [sp, #172]	@ 0xac
  pLayerCfg.Alpha0 = 0;
 8000b80:	e9cd 1025 	strd	r1, r0, [sp, #148]	@ 0x94
  pLayerCfg.WindowX1 = 400;
 8000b84:	e9cd 0720 	strd	r0, r7, [sp, #128]	@ 0x80
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8000b88:	2107      	movs	r1, #7
 8000b8a:	f44f 60c0 	mov.w	r0, #1536	@ 0x600
 8000b8e:	e9cd 0127 	strd	r0, r1, [sp, #156]	@ 0x9c
  pLayerCfg.FBStartAdress = 0xD0000000;
 8000b92:	f04f 4150 	mov.w	r1, #3489660928	@ 0xd0000000
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000b96:	4628      	mov	r0, r5
  pLayerCfg.ImageWidth = 400;
 8000b98:	e9cd 1729 	strd	r1, r7, [sp, #164]	@ 0xa4
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000b9c:	a920      	add	r1, sp, #128	@ 0x80
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB888;
 8000b9e:	e9cd 3623 	strd	r3, r6, [sp, #140]	@ 0x8c
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000ba2:	f009 fd25 	bl	800a5f0 <HAL_LTDC_ConfigLayer>
 8000ba6:	4604      	mov	r4, r0
 8000ba8:	b108      	cbz	r0, 8000bae <main+0x3e6>
 8000baa:	b672      	cpsid	i
  while (1)
 8000bac:	e7fe      	b.n	8000bac <main+0x3e4>
  __HAL_LTDC_DISABLE(&hltdc);
 8000bae:	682a      	ldr	r2, [r5, #0]
  HAL_DSI_Start(&hdsi);
 8000bb0:	4831      	ldr	r0, [pc, #196]	@ (8000c78 <main+0x4b0>)
  __HAL_LTDC_DISABLE(&hltdc);
 8000bb2:	6993      	ldr	r3, [r2, #24]
 8000bb4:	f023 0301 	bic.w	r3, r3, #1
 8000bb8:	6193      	str	r3, [r2, #24]
  HAL_DSI_Start(&hdsi);
 8000bba:	f007 fe17 	bl	80087ec <HAL_DSI_Start>
  IOCtx.Address     = 0;
 8000bbe:	4930      	ldr	r1, [pc, #192]	@ (8000c80 <main+0x4b8>)
  IOCtx.GetTick     = BSP_GetTick;
 8000bc0:	4b30      	ldr	r3, [pc, #192]	@ (8000c84 <main+0x4bc>)
  OTM8009A_RegisterBusIO(&OTM8009AObj, &IOCtx);
 8000bc2:	4831      	ldr	r0, [pc, #196]	@ (8000c88 <main+0x4c0>)
  IOCtx.GetTick     = BSP_GetTick;
 8000bc4:	60cb      	str	r3, [r1, #12]
  IOCtx.WriteReg    = DSI_IO_Write;
 8000bc6:	4b31      	ldr	r3, [pc, #196]	@ (8000c8c <main+0x4c4>)
  IOCtx.Address     = 0;
 8000bc8:	800c      	strh	r4, [r1, #0]
  IOCtx.WriteReg    = DSI_IO_Write;
 8000bca:	604b      	str	r3, [r1, #4]
  IOCtx.ReadReg     = DSI_IO_Read;
 8000bcc:	4b30      	ldr	r3, [pc, #192]	@ (8000c90 <main+0x4c8>)
 8000bce:	608b      	str	r3, [r1, #8]
  OTM8009A_RegisterBusIO(&OTM8009AObj, &IOCtx);
 8000bd0:	f006 f9c6 	bl	8006f60 <OTM8009A_RegisterBusIO>
  OTM8009A_Init(&OTM8009AObj ,OTM8009A_FORMAT_RGB888, OTM8009A_ORIENTATION_LANDSCAPE);
 8000bd4:	4632      	mov	r2, r6
 8000bd6:	4621      	mov	r1, r4
 8000bd8:	482b      	ldr	r0, [pc, #172]	@ (8000c88 <main+0x4c0>)
 8000bda:	f005 fe31 	bl	8006840 <OTM8009A_Init>
  HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P1, OTM8009A_CMD_DISPOFF, 0x00);
 8000bde:	2328      	movs	r3, #40	@ 0x28
 8000be0:	2215      	movs	r2, #21
 8000be2:	4621      	mov	r1, r4
 8000be4:	4824      	ldr	r0, [pc, #144]	@ (8000c78 <main+0x4b0>)
 8000be6:	9400      	str	r4, [sp, #0]
 8000be8:	f007 fe33 	bl	8008852 <HAL_DSI_ShortWrite>
  HAL_DSI_ConfigCommand(&hdsi, &LPCmd);
 8000bec:	a92d      	add	r1, sp, #180	@ 0xb4
 8000bee:	4822      	ldr	r0, [pc, #136]	@ (8000c78 <main+0x4b0>)
  LPCmd.LPDcsLongWrite = DSI_LP_DLW_DISABLE;
 8000bf0:	9437      	str	r4, [sp, #220]	@ 0xdc
  LPCmd.LPGenShortWriteOneP = DSI_LP_GSW1P_DISABLE;
 8000bf2:	e9cd 442d 	strd	r4, r4, [sp, #180]	@ 0xb4
  LPCmd.LPGenShortReadNoP = DSI_LP_GSR0P_DISABLE;
 8000bf6:	e9cd 442f 	strd	r4, r4, [sp, #188]	@ 0xbc
  LPCmd.LPGenShortReadTwoP = DSI_LP_GSR2P_DISABLE;
 8000bfa:	e9cd 4431 	strd	r4, r4, [sp, #196]	@ 0xc4
  LPCmd.LPDcsShortWriteNoP = DSI_LP_DSW0P_DISABLE;
 8000bfe:	e9cd 4433 	strd	r4, r4, [sp, #204]	@ 0xcc
  LPCmd.LPDcsShortReadNoP = DSI_LP_DSR0P_DISABLE;
 8000c02:	e9cd 4435 	strd	r4, r4, [sp, #212]	@ 0xd4
  HAL_DSI_ConfigCommand(&hdsi, &LPCmd);
 8000c06:	f007 fd09 	bl	800861c <HAL_DSI_ConfigCommand>
  HAL_LTDC_SetPitch(&hltdc, 800, 0);
 8000c0a:	4622      	mov	r2, r4
 8000c0c:	f44f 7148 	mov.w	r1, #800	@ 0x320
 8000c10:	4628      	mov	r0, r5
 8000c12:	f009 fd1b 	bl	800a64c <HAL_LTDC_SetPitch>
  __HAL_LTDC_ENABLE(&hltdc);
 8000c16:	682a      	ldr	r2, [r5, #0]
  hcrc.Instance = CRC;
 8000c18:	481e      	ldr	r0, [pc, #120]	@ (8000c94 <main+0x4cc>)
  __HAL_LTDC_ENABLE(&hltdc);
 8000c1a:	6993      	ldr	r3, [r2, #24]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8000c1c:	8084      	strh	r4, [r0, #4]
  __HAL_LTDC_ENABLE(&hltdc);
 8000c1e:	f043 0301 	orr.w	r3, r3, #1
 8000c22:	6193      	str	r3, [r2, #24]
  hcrc.Instance = CRC;
 8000c24:	4b1c      	ldr	r3, [pc, #112]	@ (8000c98 <main+0x4d0>)
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8000c26:	6206      	str	r6, [r0, #32]
  hcrc.Instance = CRC;
 8000c28:	6003      	str	r3, [r0, #0]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000c2a:	e9c0 4405 	strd	r4, r4, [r0, #20]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000c2e:	f007 f95d 	bl	8007eec <HAL_CRC_Init>
 8000c32:	b108      	cbz	r0, 8000c38 <main+0x470>
 8000c34:	b672      	cpsid	i
  while (1)
 8000c36:	e7fe      	b.n	8000c36 <main+0x46e>
  hjpeg.Instance = JPEG;
 8000c38:	4818      	ldr	r0, [pc, #96]	@ (8000c9c <main+0x4d4>)
 8000c3a:	4b19      	ldr	r3, [pc, #100]	@ (8000ca0 <main+0x4d8>)
 8000c3c:	6003      	str	r3, [r0, #0]
  if (HAL_JPEG_Init(&hjpeg) != HAL_OK)
 8000c3e:	f008 fdf3 	bl	8009828 <HAL_JPEG_Init>
 8000c42:	b108      	cbz	r0, 8000c48 <main+0x480>
 8000c44:	b672      	cpsid	i
  while (1)
 8000c46:	e7fe      	b.n	8000c46 <main+0x47e>
  MX_TouchGFX_Init();
 8000c48:	f000 fd8e 	bl	8001768 <MX_TouchGFX_Init>
  MX_TouchGFX_PreOSInit();
 8000c4c:	f000 fd8b 	bl	8001766 <MX_TouchGFX_PreOSInit>
  osKernelInitialize();
 8000c50:	f00c f830 	bl	800ccb4 <osKernelInitialize>
  TouchGFXTaskHandle = osThreadNew(TouchGFX_Task, NULL, &TouchGFXTask_attributes);
 8000c54:	4a13      	ldr	r2, [pc, #76]	@ (8000ca4 <main+0x4dc>)
 8000c56:	2100      	movs	r1, #0
 8000c58:	4813      	ldr	r0, [pc, #76]	@ (8000ca8 <main+0x4e0>)
 8000c5a:	f00c f857 	bl	800cd0c <osThreadNew>
 8000c5e:	4b13      	ldr	r3, [pc, #76]	@ (8000cac <main+0x4e4>)
  videoTaskHandle = osThreadNew(videoTaskFunc, NULL, &videoTask_attributes);
 8000c60:	4a13      	ldr	r2, [pc, #76]	@ (8000cb0 <main+0x4e8>)
 8000c62:	2100      	movs	r1, #0
  TouchGFXTaskHandle = osThreadNew(TouchGFX_Task, NULL, &TouchGFXTask_attributes);
 8000c64:	6018      	str	r0, [r3, #0]
  videoTaskHandle = osThreadNew(videoTaskFunc, NULL, &videoTask_attributes);
 8000c66:	4813      	ldr	r0, [pc, #76]	@ (8000cb4 <main+0x4ec>)
 8000c68:	f00c f850 	bl	800cd0c <osThreadNew>
 8000c6c:	4b12      	ldr	r3, [pc, #72]	@ (8000cb8 <main+0x4f0>)
 8000c6e:	6018      	str	r0, [r3, #0]
  osKernelStart();
 8000c70:	f00c f832 	bl	800ccd8 <osKernelStart>
  while (1)
 8000c74:	e7fe      	b.n	8000c74 <main+0x4ac>
 8000c76:	bf00      	nop
 8000c78:	240005ec 	.word	0x240005ec
 8000c7c:	24000414 	.word	0x24000414
 8000c80:	2400035c 	.word	0x2400035c
 8000c84:	08007341 	.word	0x08007341
 8000c88:	2400036c 	.word	0x2400036c
 8000c8c:	08001d11 	.word	0x08001d11
 8000c90:	08001d49 	.word	0x08001d49
 8000c94:	24000670 	.word	0x24000670
 8000c98:	58024c00 	.word	0x58024c00
 8000c9c:	24000594 	.word	0x24000594
 8000ca0:	52003000 	.word	0x52003000
 8000ca4:	08028c7c 	.word	0x08028c7c
 8000ca8:	08001777 	.word	0x08001777
 8000cac:	24000390 	.word	0x24000390
 8000cb0:	08028c58 	.word	0x08028c58
 8000cb4:	080038b5 	.word	0x080038b5
 8000cb8:	2400038c 	.word	0x2400038c
 8000cbc:	50001000 	.word	0x50001000
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cc0:	2214      	movs	r2, #20
 8000cc2:	2100      	movs	r1, #0
 8000cc4:	a82d      	add	r0, sp, #180	@ 0xb4
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cc6:	2501      	movs	r5, #1
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cc8:	f027 f9f6 	bl	80280b8 <memset>
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000ccc:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
  HAL_GPIO_WritePin(GPIOJ, LCD_BL_Pin|FRAME_RATE_Pin|RENDER_TIME_Pin|VSYNC_FREQ_Pin, GPIO_PIN_RESET);
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	f241 3108 	movw	r1, #4872	@ 0x1308
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000cd6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
  HAL_GPIO_WritePin(GPIOJ, LCD_BL_Pin|FRAME_RATE_Pin|RENDER_TIME_Pin|VSYNC_FREQ_Pin, GPIO_PIN_RESET);
 8000cda:	488d      	ldr	r0, [pc, #564]	@ (8000f10 <main+0x748>)
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cdc:	f04f 0900 	mov.w	r9, #0
 8000ce0:	2603      	movs	r6, #3
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000ce2:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ce6:	f44f 7880 	mov.w	r8, #256	@ 0x100
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000cea:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cee:	f04f 0a02 	mov.w	sl, #2
  GPIO_InitStruct.Pin = LCD_RESET_Pin;
 8000cf2:	2708      	movs	r7, #8
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000cf4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000cf8:	9304      	str	r3, [sp, #16]
 8000cfa:	9b04      	ldr	r3, [sp, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cfc:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8000d00:	f043 0302 	orr.w	r3, r3, #2
 8000d04:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
 8000d08:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8000d0c:	f003 0302 	and.w	r3, r3, #2
 8000d10:	9305      	str	r3, [sp, #20]
 8000d12:	9b05      	ldr	r3, [sp, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000d14:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8000d18:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000d1c:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
 8000d20:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8000d24:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000d28:	9306      	str	r3, [sp, #24]
 8000d2a:	9b06      	ldr	r3, [sp, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000d2c:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8000d30:	f043 0310 	orr.w	r3, r3, #16
 8000d34:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
 8000d38:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8000d3c:	f003 0310 	and.w	r3, r3, #16
 8000d40:	9307      	str	r3, [sp, #28]
 8000d42:	9b07      	ldr	r3, [sp, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d44:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8000d48:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000d4c:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
 8000d50:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8000d54:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000d58:	9308      	str	r3, [sp, #32]
 8000d5a:	9b08      	ldr	r3, [sp, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d5c:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8000d60:	f043 0304 	orr.w	r3, r3, #4
 8000d64:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
 8000d68:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8000d6c:	f003 0304 	and.w	r3, r3, #4
 8000d70:	9309      	str	r3, [sp, #36]	@ 0x24
 8000d72:	9b09      	ldr	r3, [sp, #36]	@ 0x24
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000d74:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8000d78:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000d7c:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
 8000d80:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8000d84:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000d88:	930a      	str	r3, [sp, #40]	@ 0x28
 8000d8a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d8c:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8000d90:	f043 0308 	orr.w	r3, r3, #8
 8000d94:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
 8000d98:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8000d9c:	f003 0308 	and.w	r3, r3, #8
 8000da0:	930b      	str	r3, [sp, #44]	@ 0x2c
 8000da2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000da4:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8000da8:	f043 0301 	orr.w	r3, r3, #1
 8000dac:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
 8000db0:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8000db4:	f003 0301 	and.w	r3, r3, #1
 8000db8:	930c      	str	r3, [sp, #48]	@ 0x30
 8000dba:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000dbc:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8000dc0:	f043 0320 	orr.w	r3, r3, #32
 8000dc4:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
 8000dc8:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8000dcc:	f003 0320 	and.w	r3, r3, #32
 8000dd0:	930d      	str	r3, [sp, #52]	@ 0x34
 8000dd2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
  HAL_GPIO_WritePin(GPIOJ, LCD_BL_Pin|FRAME_RATE_Pin|RENDER_TIME_Pin|VSYNC_FREQ_Pin, GPIO_PIN_RESET);
 8000dd4:	f007 ffce 	bl	8008d74 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_RESET_GPIO_Port, LCD_RESET_Pin, GPIO_PIN_RESET);
 8000dd8:	2200      	movs	r2, #0
 8000dda:	2108      	movs	r1, #8
 8000ddc:	484d      	ldr	r0, [pc, #308]	@ (8000f14 <main+0x74c>)
 8000dde:	f007 ffc9 	bl	8008d74 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, GPIO_PIN_RESET);
 8000de2:	2200      	movs	r2, #0
 8000de4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000de8:	484b      	ldr	r0, [pc, #300]	@ (8000f18 <main+0x750>)
 8000dea:	f007 ffc3 	bl	8008d74 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dee:	f241 3308 	movw	r3, #4872	@ 0x1308
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8000df2:	a92d      	add	r1, sp, #180	@ 0xb4
 8000df4:	4846      	ldr	r0, [pc, #280]	@ (8000f10 <main+0x748>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000df6:	e9cd 352d 	strd	r3, r5, [sp, #180]	@ 0xb4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dfa:	e9cd 962f 	strd	r9, r6, [sp, #188]	@ 0xbc
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8000dfe:	f007 fe2f 	bl	8008a60 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e02:	a92d      	add	r1, sp, #180	@ 0xb4
 8000e04:	4845      	ldr	r0, [pc, #276]	@ (8000f1c <main+0x754>)
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8000e06:	f8cd 90c4 	str.w	r9, [sp, #196]	@ 0xc4
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e0a:	e9cd 8a2d 	strd	r8, sl, [sp, #180]	@ 0xb4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e0e:	e9cd 992f 	strd	r9, r9, [sp, #188]	@ 0xbc
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e12:	f007 fe25 	bl	8008a60 <HAL_GPIO_Init>
  HAL_GPIO_Init(LCD_RESET_GPIO_Port, &GPIO_InitStruct);
 8000e16:	a92d      	add	r1, sp, #180	@ 0xb4
 8000e18:	483e      	ldr	r0, [pc, #248]	@ (8000f14 <main+0x74c>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e1a:	e9cd 752d 	strd	r7, r5, [sp, #180]	@ 0xb4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e1e:	e9cd 562f 	strd	r5, r6, [sp, #188]	@ 0xbc
  HAL_GPIO_Init(LCD_RESET_GPIO_Port, &GPIO_InitStruct);
 8000e22:	f007 fe1d 	bl	8008a60 <HAL_GPIO_Init>
  HAL_GPIO_Init(MCU_ACTIVE_GPIO_Port, &GPIO_InitStruct);
 8000e26:	a92d      	add	r1, sp, #180	@ 0xb4
 8000e28:	483b      	ldr	r0, [pc, #236]	@ (8000f18 <main+0x750>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e2a:	e9cd 852d 	strd	r8, r5, [sp, #180]	@ 0xb4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e2e:	e9cd 962f 	strd	r9, r6, [sp, #188]	@ 0xbc
  HAL_GPIO_Init(MCU_ACTIVE_GPIO_Port, &GPIO_InitStruct);
 8000e32:	f007 fe15 	bl	8008a60 <HAL_GPIO_Init>
  __HAL_RCC_MDMA_CLK_ENABLE();
 8000e36:	f8d4 30d4 	ldr.w	r3, [r4, #212]	@ 0xd4
  HAL_NVIC_SetPriority(MDMA_IRQn, 5, 0);
 8000e3a:	464a      	mov	r2, r9
 8000e3c:	2105      	movs	r1, #5
  __HAL_RCC_MDMA_CLK_ENABLE();
 8000e3e:	432b      	orrs	r3, r5
  HAL_NVIC_SetPriority(MDMA_IRQn, 5, 0);
 8000e40:	207a      	movs	r0, #122	@ 0x7a
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_32;
 8000e42:	f04f 0804 	mov.w	r8, #4
  __HAL_RCC_MDMA_CLK_ENABLE();
 8000e46:	f8c4 30d4 	str.w	r3, [r4, #212]	@ 0xd4
 8000e4a:	f8d4 30d4 	ldr.w	r3, [r4, #212]	@ 0xd4
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8000e4e:	2440      	movs	r4, #64	@ 0x40
  __HAL_RCC_MDMA_CLK_ENABLE();
 8000e50:	402b      	ands	r3, r5
 8000e52:	9303      	str	r3, [sp, #12]
 8000e54:	9b03      	ldr	r3, [sp, #12]
  HAL_NVIC_SetPriority(MDMA_IRQn, 5, 0);
 8000e56:	f006 ffad 	bl	8007db4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(MDMA_IRQn);
 8000e5a:	207a      	movs	r0, #122	@ 0x7a
 8000e5c:	f006 ffdc 	bl	8007e18 <HAL_NVIC_EnableIRQ>
  FMC_Bank1_R->BTCR[0] &= ~FMC_BCRx_MBKEN;
 8000e60:	4a2f      	ldr	r2, [pc, #188]	@ (8000f20 <main+0x758>)
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8000e62:	4830      	ldr	r0, [pc, #192]	@ (8000f24 <main+0x75c>)
  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8000e64:	a92d      	add	r1, sp, #180	@ 0xb4
  FMC_Bank1_R->BTCR[0] &= ~FMC_BCRx_MBKEN;
 8000e66:	6813      	ldr	r3, [r2, #0]
 8000e68:	f023 0301 	bic.w	r3, r3, #1
 8000e6c:	6013      	str	r3, [r2, #0]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 8000e6e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8000e72:	4b2d      	ldr	r3, [pc, #180]	@ (8000f28 <main+0x760>)
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8000e74:	f8c0 901c 	str.w	r9, [r0, #28]
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8000e78:	f8c0 9028 	str.w	r9, [r0, #40]	@ 0x28
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_9;
 8000e7c:	6085      	str	r5, [r0, #8]
  SdramTiming.LoadToActiveDelay = 2;
 8000e7e:	f8cd a0b4 	str.w	sl, [sp, #180]	@ 0xb4
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 8000e82:	e9c0 3500 	strd	r3, r5, [r0]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_32;
 8000e86:	2320      	movs	r3, #32
 8000e88:	e9c0 8303 	strd	r8, r3, [r0, #12]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8000e8c:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8000e90:	e9c0 4305 	strd	r4, r3, [r0, #20]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 8000e94:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000e98:	e9c0 2308 	strd	r2, r3, [r0, #32]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8000e9c:	2307      	movs	r3, #7
  SdramTiming.RCDDelay = 2;
 8000e9e:	e9cd aa32 	strd	sl, sl, [sp, #200]	@ 0xc8
  SdramTiming.SelfRefreshTime = 4;
 8000ea2:	e9cd 382e 	strd	r3, r8, [sp, #184]	@ 0xb8
  SdramTiming.WriteRecoveryTime = 3;
 8000ea6:	e9cd 3630 	strd	r3, r6, [sp, #192]	@ 0xc0
  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8000eaa:	f00b fc33 	bl	800c714 <HAL_SDRAM_Init>
 8000eae:	4681      	mov	r9, r0
 8000eb0:	2800      	cmp	r0, #0
 8000eb2:	f47f ad2c 	bne.w	800090e <main+0x146>
  BSP_SDRAM_DeInit(0);
 8000eb6:	f006 fc69 	bl	800778c <BSP_SDRAM_DeInit>
  if(BSP_SDRAM_Init(0) != BSP_ERROR_NONE)
 8000eba:	4648      	mov	r0, r9
 8000ebc:	f006 fcb4 	bl	8007828 <BSP_SDRAM_Init>
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	2800      	cmp	r0, #0
 8000ec4:	f43f ad25 	beq.w	8000912 <main+0x14a>
 8000ec8:	b672      	cpsid	i
  while (1)
 8000eca:	e7fe      	b.n	8000eca <main+0x702>
  HAL_Init();
 8000ecc:	f006 ff08 	bl	8007ce0 <HAL_Init>
  SystemClock_Config();
 8000ed0:	f7ff fc18 	bl	8000704 <SystemClock_Config>
__HAL_RCC_HSEM_CLK_ENABLE();
 8000ed4:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
HAL_HSEM_FastTake(HSEM_ID_0);
 8000ed8:	4620      	mov	r0, r4
__HAL_RCC_HSEM_CLK_ENABLE();
 8000eda:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000ede:	f8c5 30e0 	str.w	r3, [r5, #224]	@ 0xe0
 8000ee2:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
 8000ee6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000eea:	9302      	str	r3, [sp, #8]
 8000eec:	9b02      	ldr	r3, [sp, #8]
HAL_HSEM_FastTake(HSEM_ID_0);
 8000eee:	f007 ff4f 	bl	8008d90 <HAL_HSEM_FastTake>
HAL_HSEM_Release(HSEM_ID_0,0);
 8000ef2:	4621      	mov	r1, r4
 8000ef4:	4620      	mov	r0, r4
 8000ef6:	f007 ff59 	bl	8008dac <HAL_HSEM_Release>
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000efa:	4c0c      	ldr	r4, [pc, #48]	@ (8000f2c <main+0x764>)
timeout = 0xFFFF;
 8000efc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000f00:	6822      	ldr	r2, [r4, #0]
 8000f02:	0412      	lsls	r2, r2, #16
 8000f04:	f53f aedc 	bmi.w	8000cc0 <main+0x4f8>
 8000f08:	3b01      	subs	r3, #1
 8000f0a:	d2f9      	bcs.n	8000f00 <main+0x738>
 8000f0c:	b672      	cpsid	i
  while (1)
 8000f0e:	e7fe      	b.n	8000f0e <main+0x746>
 8000f10:	58022400 	.word	0x58022400
 8000f14:	58021800 	.word	0x58021800
 8000f18:	58021400 	.word	0x58021400
 8000f1c:	58020000 	.word	0x58020000
 8000f20:	52004000 	.word	0x52004000
 8000f24:	24000394 	.word	0x24000394
 8000f28:	52004140 	.word	0x52004140
 8000f2c:	58024400 	.word	0x58024400

08000f30 <HAL_TIM_PeriodElapsedCallback>:
  if (htim->Instance == TIM6) {
 8000f30:	6802      	ldr	r2, [r0, #0]
 8000f32:	4b03      	ldr	r3, [pc, #12]	@ (8000f40 <HAL_TIM_PeriodElapsedCallback+0x10>)
 8000f34:	429a      	cmp	r2, r3
 8000f36:	d101      	bne.n	8000f3c <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
 8000f38:	f006 bf00 	b.w	8007d3c <HAL_IncTick>
}
 8000f3c:	4770      	bx	lr
 8000f3e:	bf00      	nop
 8000f40:	40001000 	.word	0x40001000

08000f44 <Error_Handler>:
 8000f44:	b672      	cpsid	i
  while (1)
 8000f46:	e7fe      	b.n	8000f46 <Error_Handler+0x2>

08000f48 <HAL_MspInit>:

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f48:	4b0a      	ldr	r3, [pc, #40]	@ (8000f74 <HAL_MspInit+0x2c>)
{
 8000f4a:	b082      	sub	sp, #8

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000f4c:	210f      	movs	r1, #15
 8000f4e:	f06f 0001 	mvn.w	r0, #1
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f52:	f8d3 20f4 	ldr.w	r2, [r3, #244]	@ 0xf4
 8000f56:	f042 0202 	orr.w	r2, r2, #2
 8000f5a:	f8c3 20f4 	str.w	r2, [r3, #244]	@ 0xf4
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000f5e:	2200      	movs	r2, #0
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f60:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000f64:	f003 0302 	and.w	r3, r3, #2
 8000f68:	9301      	str	r3, [sp, #4]
 8000f6a:	9b01      	ldr	r3, [sp, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f6c:	b002      	add	sp, #8
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000f6e:	f006 bf21 	b.w	8007db4 <HAL_NVIC_SetPriority>
 8000f72:	bf00      	nop
 8000f74:	58024400 	.word	0x58024400

08000f78 <HAL_CRC_MspInit>:
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
  if(hcrc->Instance==CRC)
 8000f78:	6802      	ldr	r2, [r0, #0]
{
 8000f7a:	b082      	sub	sp, #8
  if(hcrc->Instance==CRC)
 8000f7c:	4b09      	ldr	r3, [pc, #36]	@ (8000fa4 <HAL_CRC_MspInit+0x2c>)
 8000f7e:	429a      	cmp	r2, r3
 8000f80:	d10d      	bne.n	8000f9e <HAL_CRC_MspInit+0x26>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000f82:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
 8000f86:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8000f8a:	f442 2200 	orr.w	r2, r2, #524288	@ 0x80000
 8000f8e:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8000f92:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f96:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8000f9a:	9301      	str	r3, [sp, #4]
 8000f9c:	9b01      	ldr	r3, [sp, #4]

  /* USER CODE END CRC_MspInit 1 */

  }

}
 8000f9e:	b002      	add	sp, #8
 8000fa0:	4770      	bx	lr
 8000fa2:	bf00      	nop
 8000fa4:	58024c00 	.word	0x58024c00

08000fa8 <HAL_DMA2D_MspInit>:
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
  if(hdma2d->Instance==DMA2D)
 8000fa8:	4b0f      	ldr	r3, [pc, #60]	@ (8000fe8 <HAL_DMA2D_MspInit+0x40>)
{
 8000faa:	b507      	push	{r0, r1, r2, lr}
  if(hdma2d->Instance==DMA2D)
 8000fac:	6802      	ldr	r2, [r0, #0]
 8000fae:	429a      	cmp	r2, r3
 8000fb0:	d117      	bne.n	8000fe2 <HAL_DMA2D_MspInit+0x3a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8000fb2:	4b0e      	ldr	r3, [pc, #56]	@ (8000fec <HAL_DMA2D_MspInit+0x44>)
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 7, 0);
 8000fb4:	2107      	movs	r1, #7
 8000fb6:	205a      	movs	r0, #90	@ 0x5a
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8000fb8:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 8000fbc:	f042 0210 	orr.w	r2, r2, #16
 8000fc0:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
    HAL_NVIC_SetPriority(DMA2D_IRQn, 7, 0);
 8000fc4:	2200      	movs	r2, #0
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8000fc6:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000fca:	f003 0310 	and.w	r3, r3, #16
 8000fce:	9301      	str	r3, [sp, #4]
 8000fd0:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(DMA2D_IRQn, 7, 0);
 8000fd2:	f006 feef 	bl	8007db4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8000fd6:	205a      	movs	r0, #90	@ 0x5a

  /* USER CODE END DMA2D_MspInit 1 */

  }

}
 8000fd8:	b003      	add	sp, #12
 8000fda:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8000fde:	f006 bf1b 	b.w	8007e18 <HAL_NVIC_EnableIRQ>
}
 8000fe2:	b003      	add	sp, #12
 8000fe4:	f85d fb04 	ldr.w	pc, [sp], #4
 8000fe8:	52001000 	.word	0x52001000
 8000fec:	58024400 	.word	0x58024400

08000ff0 <HAL_DSI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdsi: DSI handle pointer
* @retval None
*/
void HAL_DSI_MspInit(DSI_HandleTypeDef* hdsi)
{
 8000ff0:	b510      	push	{r4, lr}
 8000ff2:	b0ba      	sub	sp, #232	@ 0xe8
 8000ff4:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ff6:	2214      	movs	r2, #20
 8000ff8:	2100      	movs	r1, #0
 8000ffa:	a803      	add	r0, sp, #12
 8000ffc:	f027 f85c 	bl	80280b8 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001000:	22c8      	movs	r2, #200	@ 0xc8
 8001002:	2100      	movs	r1, #0
 8001004:	a808      	add	r0, sp, #32
 8001006:	f027 f857 	bl	80280b8 <memset>
  if(hdsi->Instance==DSI)
 800100a:	6823      	ldr	r3, [r4, #0]
 800100c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001010:	d138      	bne.n	8001084 <HAL_DSI_MspInit+0x94>

  /* USER CODE END DSI_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_DSI;
 8001012:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001016:	2300      	movs	r3, #0
    PeriphClkInitStruct.DsiClockSelection = RCC_DSICLKSOURCE_PHY;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001018:	a808      	add	r0, sp, #32
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_DSI;
 800101a:	e9cd 2308 	strd	r2, r3, [sp, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800101e:	f00a fe6b 	bl	800bcf8 <HAL_RCCEx_PeriphCLKConfig>
 8001022:	b108      	cbz	r0, 8001028 <HAL_DSI_MspInit+0x38>
    {
      Error_Handler();
 8001024:	f7ff ff8e 	bl	8000f44 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_DSI_CLK_ENABLE();
 8001028:	4b17      	ldr	r3, [pc, #92]	@ (8001088 <HAL_DSI_MspInit+0x98>)
    DSI_D0N     ------> DSIHOST_D0N
    PJ2     ------> DSIHOST_TE
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800102a:	2400      	movs	r4, #0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF13_DSI;
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 800102c:	a903      	add	r1, sp, #12
 800102e:	4817      	ldr	r0, [pc, #92]	@ (800108c <HAL_DSI_MspInit+0x9c>)
    __HAL_RCC_DSI_CLK_ENABLE();
 8001030:	f8d3 20e4 	ldr.w	r2, [r3, #228]	@ 0xe4
 8001034:	f042 0210 	orr.w	r2, r2, #16
 8001038:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4
 800103c:	f8d3 20e4 	ldr.w	r2, [r3, #228]	@ 0xe4
 8001040:	f002 0210 	and.w	r2, r2, #16
 8001044:	9201      	str	r2, [sp, #4]
 8001046:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8001048:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800104c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001050:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001054:	2204      	movs	r2, #4
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8001056:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800105a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800105e:	9302      	str	r3, [sp, #8]
 8001060:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001062:	2302      	movs	r3, #2
 8001064:	e9cd 2303 	strd	r2, r3, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF13_DSI;
 8001068:	230d      	movs	r3, #13
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800106a:	e9cd 4405 	strd	r4, r4, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF13_DSI;
 800106e:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8001070:	f007 fcf6 	bl	8008a60 <HAL_GPIO_Init>

    /* DSI interrupt Init */
    HAL_NVIC_SetPriority(DSI_IRQn, 7, 0);
 8001074:	207b      	movs	r0, #123	@ 0x7b
 8001076:	4622      	mov	r2, r4
 8001078:	2107      	movs	r1, #7
 800107a:	f006 fe9b 	bl	8007db4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DSI_IRQn);
 800107e:	207b      	movs	r0, #123	@ 0x7b
 8001080:	f006 feca 	bl	8007e18 <HAL_NVIC_EnableIRQ>

  /* USER CODE END DSI_MspInit 1 */

  }

}
 8001084:	b03a      	add	sp, #232	@ 0xe8
 8001086:	bd10      	pop	{r4, pc}
 8001088:	58024400 	.word	0x58024400
 800108c:	58022400 	.word	0x58022400

08001090 <HAL_JPEG_MspInit>:
* This function configures the hardware resources used in this example
* @param hjpeg: JPEG handle pointer
* @retval None
*/
void HAL_JPEG_MspInit(JPEG_HandleTypeDef* hjpeg)
{
 8001090:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if(hjpeg->Instance==JPEG)
 8001092:	4b3c      	ldr	r3, [pc, #240]	@ (8001184 <HAL_JPEG_MspInit+0xf4>)
{
 8001094:	4605      	mov	r5, r0
  if(hjpeg->Instance==JPEG)
 8001096:	6802      	ldr	r2, [r0, #0]
 8001098:	429a      	cmp	r2, r3
 800109a:	d170      	bne.n	800117e <HAL_JPEG_MspInit+0xee>
  {
  /* USER CODE BEGIN JPEG_MspInit 0 */

  /* USER CODE END JPEG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_JPEG_CLK_ENABLE();
 800109c:	4b3a      	ldr	r3, [pc, #232]	@ (8001188 <HAL_JPEG_MspInit+0xf8>)
    hmdma_jpeg_infifo_th.Instance = MDMA_Channel7;
    hmdma_jpeg_infifo_th.Init.Request = MDMA_REQUEST_JPEG_INFIFO_TH;
    hmdma_jpeg_infifo_th.Init.TransferTriggerMode = MDMA_BUFFER_TRANSFER;
    hmdma_jpeg_infifo_th.Init.Priority = MDMA_PRIORITY_HIGH;
    hmdma_jpeg_infifo_th.Init.Endianness = MDMA_LITTLE_ENDIANNESS_PRESERVE;
    hmdma_jpeg_infifo_th.Init.SourceInc = MDMA_SRC_INC_BYTE;
 800109e:	2102      	movs	r1, #2
    hmdma_jpeg_infifo_th.Instance = MDMA_Channel7;
 80010a0:	4c3a      	ldr	r4, [pc, #232]	@ (800118c <HAL_JPEG_MspInit+0xfc>)
    hmdma_jpeg_infifo_th.Init.DestinationInc = MDMA_DEST_INC_DISABLE;
    hmdma_jpeg_infifo_th.Init.SourceDataSize = MDMA_SRC_DATASIZE_BYTE;
    hmdma_jpeg_infifo_th.Init.DestDataSize = MDMA_DEST_DATASIZE_WORD;
    hmdma_jpeg_infifo_th.Init.DataAlignment = MDMA_DATAALIGN_PACKENABLE;
    hmdma_jpeg_infifo_th.Init.BufferTransferLength = 32;
 80010a2:	f04f 7e00 	mov.w	lr, #33554432	@ 0x2000000
    __HAL_RCC_JPEG_CLK_ENABLE();
 80010a6:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
    hmdma_jpeg_infifo_th.Init.Request = MDMA_REQUEST_JPEG_INFIFO_TH;
 80010aa:	f8df c0ec 	ldr.w	ip, [pc, #236]	@ 8001198 <HAL_JPEG_MspInit+0x108>
    hmdma_jpeg_infifo_th.Init.SourceBurst = MDMA_SOURCE_BURST_32BEATS;
    hmdma_jpeg_infifo_th.Init.DestBurst = MDMA_DEST_BURST_16BEATS;
    hmdma_jpeg_infifo_th.Init.SourceBlockAddressOffset = 0;
    hmdma_jpeg_infifo_th.Init.DestBlockAddressOffset = 0;
    if (HAL_MDMA_Init(&hmdma_jpeg_infifo_th) != HAL_OK)
 80010ae:	4620      	mov	r0, r4
    __HAL_RCC_JPEG_CLK_ENABLE();
 80010b0:	f042 0220 	orr.w	r2, r2, #32
 80010b4:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
    hmdma_jpeg_infifo_th.Init.Priority = MDMA_PRIORITY_HIGH;
 80010b8:	2280      	movs	r2, #128	@ 0x80
    __HAL_RCC_JPEG_CLK_ENABLE();
 80010ba:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80010be:	f003 0320 	and.w	r3, r3, #32
 80010c2:	9301      	str	r3, [sp, #4]
 80010c4:	9b01      	ldr	r3, [sp, #4]
    hmdma_jpeg_infifo_th.Init.Request = MDMA_REQUEST_JPEG_INFIFO_TH;
 80010c6:	2311      	movs	r3, #17
 80010c8:	e9c4 c300 	strd	ip, r3, [r4]
    hmdma_jpeg_infifo_th.Init.Priority = MDMA_PRIORITY_HIGH;
 80010cc:	2300      	movs	r3, #0
 80010ce:	e9c4 3202 	strd	r3, r2, [r4, #8]
    hmdma_jpeg_infifo_th.Init.DestDataSize = MDMA_DEST_DATASIZE_WORD;
 80010d2:	e9c4 3207 	strd	r3, r2, [r4, #28]
    hmdma_jpeg_infifo_th.Init.BufferTransferLength = 32;
 80010d6:	2220      	movs	r2, #32
    hmdma_jpeg_infifo_th.Init.Endianness = MDMA_LITTLE_ENDIANNESS_PRESERVE;
 80010d8:	6123      	str	r3, [r4, #16]
    hmdma_jpeg_infifo_th.Init.DestinationInc = MDMA_DEST_INC_DISABLE;
 80010da:	e9c4 1305 	strd	r1, r3, [r4, #20]
    hmdma_jpeg_infifo_th.Init.BufferTransferLength = 32;
 80010de:	e9c4 e209 	strd	lr, r2, [r4, #36]	@ 0x24
    hmdma_jpeg_infifo_th.Init.DestBurst = MDMA_DEST_BURST_16BEATS;
 80010e2:	f44f 41a0 	mov.w	r1, #20480	@ 0x5000
 80010e6:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
    hmdma_jpeg_infifo_th.Init.DestBlockAddressOffset = 0;
 80010ea:	e9c4 330d 	strd	r3, r3, [r4, #52]	@ 0x34
    hmdma_jpeg_infifo_th.Init.DestBurst = MDMA_DEST_BURST_16BEATS;
 80010ee:	e9c4 120b 	strd	r1, r2, [r4, #44]	@ 0x2c
    if (HAL_MDMA_Init(&hmdma_jpeg_infifo_th) != HAL_OK)
 80010f2:	f009 fb16 	bl	800a722 <HAL_MDMA_Init>
 80010f6:	b108      	cbz	r0, 80010fc <HAL_JPEG_MspInit+0x6c>
    {
      Error_Handler();
 80010f8:	f7ff ff24 	bl	8000f44 <Error_Handler>
    }

    if (HAL_MDMA_ConfigPostRequestMask(&hmdma_jpeg_infifo_th, 0, 0) != HAL_OK)
 80010fc:	2200      	movs	r2, #0
 80010fe:	4823      	ldr	r0, [pc, #140]	@ (800118c <HAL_JPEG_MspInit+0xfc>)
 8001100:	4611      	mov	r1, r2
 8001102:	f009 fb9c 	bl	800a83e <HAL_MDMA_ConfigPostRequestMask>
 8001106:	b108      	cbz	r0, 800110c <HAL_JPEG_MspInit+0x7c>
    {
      Error_Handler();
 8001108:	f7ff ff1c 	bl	8000f44 <Error_Handler>
    }

    __HAL_LINKDMA(hjpeg,hdmain,hmdma_jpeg_infifo_th);
 800110c:	632c      	str	r4, [r5, #48]	@ 0x30

    /* JPEG_OUTFIFO_TH Init */
    hmdma_jpeg_outfifo_th.Instance = MDMA_Channel6;
    hmdma_jpeg_outfifo_th.Init.Request = MDMA_REQUEST_JPEG_OUTFIFO_TH;
 800110e:	2313      	movs	r3, #19
 8001110:	4a1f      	ldr	r2, [pc, #124]	@ (8001190 <HAL_JPEG_MspInit+0x100>)
    hmdma_jpeg_outfifo_th.Init.TransferTriggerMode = MDMA_BUFFER_TRANSFER;
    hmdma_jpeg_outfifo_th.Init.Priority = MDMA_PRIORITY_VERY_HIGH;
    hmdma_jpeg_outfifo_th.Init.Endianness = MDMA_LITTLE_ENDIANNESS_PRESERVE;
    hmdma_jpeg_outfifo_th.Init.SourceInc = MDMA_SRC_INC_DISABLE;
    hmdma_jpeg_outfifo_th.Init.DestinationInc = MDMA_DEST_INC_BYTE;
    hmdma_jpeg_outfifo_th.Init.SourceDataSize = MDMA_SRC_DATASIZE_WORD;
 8001112:	2108      	movs	r1, #8
    __HAL_LINKDMA(hjpeg,hdmain,hmdma_jpeg_infifo_th);
 8001114:	6425      	str	r5, [r4, #64]	@ 0x40
    hmdma_jpeg_outfifo_th.Init.DestDataSize = MDMA_DEST_DATASIZE_BYTE;
    hmdma_jpeg_outfifo_th.Init.DataAlignment = MDMA_DATAALIGN_PACKENABLE;
    hmdma_jpeg_outfifo_th.Init.BufferTransferLength = 32;
    hmdma_jpeg_outfifo_th.Init.SourceBurst = MDMA_SOURCE_BURST_32BEATS;
    hmdma_jpeg_outfifo_th.Init.DestBurst = MDMA_DEST_BURST_32BEATS;
 8001116:	f44f 40a0 	mov.w	r0, #20480	@ 0x5000
    hmdma_jpeg_outfifo_th.Instance = MDMA_Channel6;
 800111a:	4c1e      	ldr	r4, [pc, #120]	@ (8001194 <HAL_JPEG_MspInit+0x104>)
    hmdma_jpeg_outfifo_th.Init.Request = MDMA_REQUEST_JPEG_OUTFIFO_TH;
 800111c:	e9c4 2300 	strd	r2, r3, [r4]
    hmdma_jpeg_outfifo_th.Init.Priority = MDMA_PRIORITY_VERY_HIGH;
 8001120:	2300      	movs	r3, #0
 8001122:	22c0      	movs	r2, #192	@ 0xc0
 8001124:	e9c4 3202 	strd	r3, r2, [r4, #8]
    hmdma_jpeg_outfifo_th.Init.SourceDataSize = MDMA_SRC_DATASIZE_WORD;
 8001128:	2220      	movs	r2, #32
    hmdma_jpeg_outfifo_th.Init.DestDataSize = MDMA_DEST_DATASIZE_BYTE;
 800112a:	6223      	str	r3, [r4, #32]
    hmdma_jpeg_outfifo_th.Init.SourceDataSize = MDMA_SRC_DATASIZE_WORD;
 800112c:	e9c4 1206 	strd	r1, r2, [r4, #24]
    hmdma_jpeg_outfifo_th.Init.DataAlignment = MDMA_DATAALIGN_PACKENABLE;
 8001130:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
    hmdma_jpeg_outfifo_th.Init.BufferTransferLength = 32;
 8001134:	e9c4 1209 	strd	r1, r2, [r4, #36]	@ 0x24
    hmdma_jpeg_outfifo_th.Init.DestBurst = MDMA_DEST_BURST_32BEATS;
 8001138:	f44f 3220 	mov.w	r2, #163840	@ 0x28000
 800113c:	e9c4 020b 	strd	r0, r2, [r4, #44]	@ 0x2c
    hmdma_jpeg_outfifo_th.Init.SourceBlockAddressOffset = 0;
    hmdma_jpeg_outfifo_th.Init.DestBlockAddressOffset = 0;
    if (HAL_MDMA_Init(&hmdma_jpeg_outfifo_th) != HAL_OK)
 8001140:	4620      	mov	r0, r4
    hmdma_jpeg_outfifo_th.Init.SourceInc = MDMA_SRC_INC_DISABLE;
 8001142:	e9c4 3304 	strd	r3, r3, [r4, #16]
    hmdma_jpeg_outfifo_th.Init.DestBlockAddressOffset = 0;
 8001146:	e9c4 330d 	strd	r3, r3, [r4, #52]	@ 0x34
    if (HAL_MDMA_Init(&hmdma_jpeg_outfifo_th) != HAL_OK)
 800114a:	f009 faea 	bl	800a722 <HAL_MDMA_Init>
 800114e:	b108      	cbz	r0, 8001154 <HAL_JPEG_MspInit+0xc4>
    {
      Error_Handler();
 8001150:	f7ff fef8 	bl	8000f44 <Error_Handler>
    }

    if (HAL_MDMA_ConfigPostRequestMask(&hmdma_jpeg_outfifo_th, 0, 0) != HAL_OK)
 8001154:	2200      	movs	r2, #0
 8001156:	480f      	ldr	r0, [pc, #60]	@ (8001194 <HAL_JPEG_MspInit+0x104>)
 8001158:	4611      	mov	r1, r2
 800115a:	f009 fb70 	bl	800a83e <HAL_MDMA_ConfigPostRequestMask>
 800115e:	b108      	cbz	r0, 8001164 <HAL_JPEG_MspInit+0xd4>
    {
      Error_Handler();
 8001160:	f7ff fef0 	bl	8000f44 <Error_Handler>
    }

    __HAL_LINKDMA(hjpeg,hdmaout,hmdma_jpeg_outfifo_th);
 8001164:	636c      	str	r4, [r5, #52]	@ 0x34

    /* JPEG interrupt Init */
    HAL_NVIC_SetPriority(JPEG_IRQn, 5, 0);
 8001166:	2200      	movs	r2, #0
 8001168:	2105      	movs	r1, #5
 800116a:	2079      	movs	r0, #121	@ 0x79
    __HAL_LINKDMA(hjpeg,hdmaout,hmdma_jpeg_outfifo_th);
 800116c:	6425      	str	r5, [r4, #64]	@ 0x40
    HAL_NVIC_SetPriority(JPEG_IRQn, 5, 0);
 800116e:	f006 fe21 	bl	8007db4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(JPEG_IRQn);
 8001172:	2079      	movs	r0, #121	@ 0x79

  /* USER CODE END JPEG_MspInit 1 */

  }

}
 8001174:	b003      	add	sp, #12
 8001176:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    HAL_NVIC_EnableIRQ(JPEG_IRQn);
 800117a:	f006 be4d 	b.w	8007e18 <HAL_NVIC_EnableIRQ>
}
 800117e:	b003      	add	sp, #12
 8001180:	bd30      	pop	{r4, r5, pc}
 8001182:	bf00      	nop
 8001184:	52003000 	.word	0x52003000
 8001188:	58024400 	.word	0x58024400
 800118c:	24000528 	.word	0x24000528
 8001190:	520001c0 	.word	0x520001c0
 8001194:	240004bc 	.word	0x240004bc
 8001198:	52000200 	.word	0x52000200

0800119c <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 800119c:	b510      	push	{r4, lr}
 800119e:	b0b4      	sub	sp, #208	@ 0xd0
 80011a0:	4604      	mov	r4, r0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80011a2:	22c8      	movs	r2, #200	@ 0xc8
 80011a4:	2100      	movs	r1, #0
 80011a6:	a802      	add	r0, sp, #8
 80011a8:	f026 ff86 	bl	80280b8 <memset>
  if(hltdc->Instance==LTDC)
 80011ac:	6822      	ldr	r2, [r4, #0]
 80011ae:	4b18      	ldr	r3, [pc, #96]	@ (8001210 <HAL_LTDC_MspInit+0x74>)
 80011b0:	429a      	cmp	r2, r3
 80011b2:	d12b      	bne.n	800120c <HAL_LTDC_MspInit+0x70>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80011b4:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 80011b8:	2300      	movs	r3, #0
    PeriphClkInitStruct.PLL3.PLL3M = 5;
    PeriphClkInitStruct.PLL3.PLL3N = 161;
    PeriphClkInitStruct.PLL3.PLL3P = 2;
    PeriphClkInitStruct.PLL3.PLL3Q = 2;
    PeriphClkInitStruct.PLL3.PLL3R = 21;
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_2;
 80011ba:	2115      	movs	r1, #21
    PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
    PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80011bc:	a802      	add	r0, sp, #8
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80011be:	e9cd 2302 	strd	r2, r3, [sp, #8]
    PeriphClkInitStruct.PLL3.PLL3N = 161;
 80011c2:	23a1      	movs	r3, #161	@ 0xa1
 80011c4:	2205      	movs	r2, #5
 80011c6:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 80011ca:	2302      	movs	r3, #2
    PeriphClkInitStruct.PLL3.PLL3Q = 2;
 80011cc:	e9cd 330e 	strd	r3, r3, [sp, #56]	@ 0x38
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_2;
 80011d0:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80011d4:	e9cd 1310 	strd	r1, r3, [sp, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80011d8:	f00a fd8e 	bl	800bcf8 <HAL_RCCEx_PeriphCLKConfig>
 80011dc:	b108      	cbz	r0, 80011e2 <HAL_LTDC_MspInit+0x46>
    {
      Error_Handler();
 80011de:	f7ff feb1 	bl	8000f44 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 80011e2:	4b0c      	ldr	r3, [pc, #48]	@ (8001214 <HAL_LTDC_MspInit+0x78>)
    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 7, 0);
 80011e4:	2058      	movs	r0, #88	@ 0x58
 80011e6:	2107      	movs	r1, #7
    __HAL_RCC_LTDC_CLK_ENABLE();
 80011e8:	f8d3 20e4 	ldr.w	r2, [r3, #228]	@ 0xe4
 80011ec:	f042 0208 	orr.w	r2, r2, #8
 80011f0:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4
    HAL_NVIC_SetPriority(LTDC_IRQn, 7, 0);
 80011f4:	2200      	movs	r2, #0
    __HAL_RCC_LTDC_CLK_ENABLE();
 80011f6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80011fa:	f003 0308 	and.w	r3, r3, #8
 80011fe:	9301      	str	r3, [sp, #4]
 8001200:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(LTDC_IRQn, 7, 0);
 8001202:	f006 fdd7 	bl	8007db4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8001206:	2058      	movs	r0, #88	@ 0x58
 8001208:	f006 fe06 	bl	8007e18 <HAL_NVIC_EnableIRQ>

  /* USER CODE END LTDC_MspInit 1 */

  }

}
 800120c:	b034      	add	sp, #208	@ 0xd0
 800120e:	bd10      	pop	{r4, pc}
 8001210:	50001000 	.word	0x50001000
 8001214:	58024400 	.word	0x58024400

08001218 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8001218:	b5f0      	push	{r4, r5, r6, r7, lr}
 800121a:	b0bf      	sub	sp, #252	@ 0xfc
 800121c:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800121e:	2214      	movs	r2, #20
 8001220:	2100      	movs	r1, #0
 8001222:	a807      	add	r0, sp, #28
 8001224:	f026 ff48 	bl	80280b8 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001228:	22c8      	movs	r2, #200	@ 0xc8
 800122a:	2100      	movs	r1, #0
 800122c:	a80c      	add	r0, sp, #48	@ 0x30
 800122e:	f026 ff43 	bl	80280b8 <memset>
  if(hqspi->Instance==QUADSPI)
 8001232:	6822      	ldr	r2, [r4, #0]
 8001234:	4b53      	ldr	r3, [pc, #332]	@ (8001384 <HAL_QSPI_MspInit+0x16c>)
 8001236:	429a      	cmp	r2, r3
 8001238:	f040 80a1 	bne.w	800137e <HAL_QSPI_MspInit+0x166>

  /* USER CODE END QUADSPI_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_QSPI;
 800123c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001240:	2300      	movs	r3, #0
    PeriphClkInitStruct.QspiClockSelection = RCC_QSPICLKSOURCE_D1HCLK;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001242:	a80c      	add	r0, sp, #48	@ 0x30
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_QSPI;
 8001244:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001248:	f00a fd56 	bl	800bcf8 <HAL_RCCEx_PeriphCLKConfig>
 800124c:	b108      	cbz	r0, 8001252 <HAL_QSPI_MspInit+0x3a>
    {
      Error_Handler();
 800124e:	f7ff fe79 	bl	8000f44 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8001252:	4b4d      	ldr	r3, [pc, #308]	@ (8001388 <HAL_QSPI_MspInit+0x170>)
    PH3     ------> QUADSPI_BK2_IO1
    PB2     ------> QUADSPI_CLK
    PD11     ------> QUADSPI_BK1_IO0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_14;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001254:	2502      	movs	r5, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001256:	2400      	movs	r4, #0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001258:	2609      	movs	r6, #9
    __HAL_RCC_QSPI_CLK_ENABLE();
 800125a:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800125e:	a907      	add	r1, sp, #28
 8001260:	484a      	ldr	r0, [pc, #296]	@ (800138c <HAL_QSPI_MspInit+0x174>)

    GPIO_InitStruct.Pin = GPIO_PIN_6;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001262:	270a      	movs	r7, #10
    __HAL_RCC_QSPI_CLK_ENABLE();
 8001264:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001268:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
 800126c:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 8001270:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 8001274:	9201      	str	r2, [sp, #4]
 8001276:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001278:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800127c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001280:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8001284:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8001288:	f002 0240 	and.w	r2, r2, #64	@ 0x40
 800128c:	9202      	str	r2, [sp, #8]
 800128e:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001290:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8001294:	f042 0220 	orr.w	r2, r2, #32
 8001298:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 800129c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80012a0:	f002 0220 	and.w	r2, r2, #32
 80012a4:	9203      	str	r2, [sp, #12]
 80012a6:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 80012a8:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80012ac:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80012b0:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 80012b4:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80012b8:	f002 0280 	and.w	r2, r2, #128	@ 0x80
 80012bc:	9204      	str	r2, [sp, #16]
 80012be:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012c0:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80012c4:	f042 0202 	orr.w	r2, r2, #2
 80012c8:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 80012cc:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80012d0:	f002 0202 	and.w	r2, r2, #2
 80012d4:	9205      	str	r2, [sp, #20]
 80012d6:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80012d8:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80012dc:	f042 0208 	orr.w	r2, r2, #8
 80012e0:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 80012e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012e8:	f003 0308 	and.w	r3, r3, #8
 80012ec:	9306      	str	r3, [sp, #24]
 80012ee:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012f0:	f44f 4384 	mov.w	r3, #16896	@ 0x4200
 80012f4:	e9cd 3507 	strd	r3, r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012f8:	e9cd 4409 	strd	r4, r4, [sp, #36]	@ 0x24
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80012fc:	960b      	str	r6, [sp, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80012fe:	f007 fbaf 	bl	8008a60 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001302:	2340      	movs	r3, #64	@ 0x40
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001304:	a907      	add	r1, sp, #28
 8001306:	4821      	ldr	r0, [pc, #132]	@ (800138c <HAL_QSPI_MspInit+0x174>)
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001308:	970b      	str	r7, [sp, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800130a:	e9cd 3507 	strd	r3, r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800130e:	e9cd 4409 	strd	r4, r4, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001312:	f007 fba5 	bl	8008a60 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001316:	23c0      	movs	r3, #192	@ 0xc0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001318:	a907      	add	r1, sp, #28
 800131a:	481d      	ldr	r0, [pc, #116]	@ (8001390 <HAL_QSPI_MspInit+0x178>)
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800131c:	960b      	str	r6, [sp, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800131e:	e9cd 3507 	strd	r3, r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001322:	e9cd 4409 	strd	r4, r4, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001326:	f007 fb9b 	bl	8008a60 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800132a:	f44f 7300 	mov.w	r3, #512	@ 0x200
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800132e:	a907      	add	r1, sp, #28
 8001330:	4817      	ldr	r0, [pc, #92]	@ (8001390 <HAL_QSPI_MspInit+0x178>)
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001332:	970b      	str	r7, [sp, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001334:	e9cd 3507 	strd	r3, r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001338:	e9cd 4409 	strd	r4, r4, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800133c:	f007 fb90 	bl	8008a60 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001340:	230c      	movs	r3, #12
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001342:	a907      	add	r1, sp, #28
 8001344:	4813      	ldr	r0, [pc, #76]	@ (8001394 <HAL_QSPI_MspInit+0x17c>)
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001346:	960b      	str	r6, [sp, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001348:	e9cd 3507 	strd	r3, r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800134c:	e9cd 4409 	strd	r4, r4, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001350:	f007 fb86 	bl	8008a60 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001354:	2304      	movs	r3, #4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001356:	a907      	add	r1, sp, #28
 8001358:	480f      	ldr	r0, [pc, #60]	@ (8001398 <HAL_QSPI_MspInit+0x180>)
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800135a:	960b      	str	r6, [sp, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800135c:	e9cd 3507 	strd	r3, r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001360:	e9cd 4409 	strd	r4, r4, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001364:	f007 fb7c 	bl	8008a60 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001368:	f44f 6300 	mov.w	r3, #2048	@ 0x800
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800136c:	a907      	add	r1, sp, #28
 800136e:	480b      	ldr	r0, [pc, #44]	@ (800139c <HAL_QSPI_MspInit+0x184>)
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001370:	960b      	str	r6, [sp, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001372:	e9cd 3507 	strd	r3, r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001376:	e9cd 4409 	strd	r4, r4, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800137a:	f007 fb71 	bl	8008a60 <HAL_GPIO_Init>

  /* USER CODE END QUADSPI_MspInit 1 */

  }

}
 800137e:	b03f      	add	sp, #252	@ 0xfc
 8001380:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001382:	bf00      	nop
 8001384:	52005000 	.word	0x52005000
 8001388:	58024400 	.word	0x58024400
 800138c:	58021800 	.word	0x58021800
 8001390:	58021400 	.word	0x58021400
 8001394:	58021c00 	.word	0x58021c00
 8001398:	58020400 	.word	0x58020400
 800139c:	58020c00 	.word	0x58020c00

080013a0 <HAL_SDRAM_MspInit>:
  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 80013a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80013a2:	b0b9      	sub	sp, #228	@ 0xe4
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 80013a4:	2100      	movs	r1, #0
 80013a6:	2214      	movs	r2, #20
 80013a8:	a801      	add	r0, sp, #4
 80013aa:	f026 fe85 	bl	80280b8 <memset>
  if (FMC_Initialized) {
 80013ae:	4b3f      	ldr	r3, [pc, #252]	@ (80014ac <HAL_SDRAM_MspInit+0x10c>)
 80013b0:	6819      	ldr	r1, [r3, #0]
 80013b2:	2900      	cmp	r1, #0
 80013b4:	d177      	bne.n	80014a6 <HAL_SDRAM_MspInit+0x106>
  FMC_Initialized = 1;
 80013b6:	2201      	movs	r2, #1
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80013b8:	a808      	add	r0, sp, #32
  FMC_Initialized = 1;
 80013ba:	601a      	str	r2, [r3, #0]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80013bc:	22c0      	movs	r2, #192	@ 0xc0
 80013be:	f026 fe7b 	bl	80280b8 <memset>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FMC;
 80013c2:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80013c6:	2300      	movs	r3, #0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80013c8:	a806      	add	r0, sp, #24
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FMC;
 80013ca:	e9cd 2306 	strd	r2, r3, [sp, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80013ce:	f00a fc93 	bl	800bcf8 <HAL_RCCEx_PeriphCLKConfig>
 80013d2:	b108      	cbz	r0, 80013d8 <HAL_SDRAM_MspInit+0x38>
      Error_Handler();
 80013d4:	f7ff fdb6 	bl	8000f44 <Error_Handler>
  __HAL_RCC_FMC_CLK_ENABLE();
 80013d8:	4b35      	ldr	r3, [pc, #212]	@ (80014b0 <HAL_SDRAM_MspInit+0x110>)
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013da:	2702      	movs	r7, #2
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013dc:	2600      	movs	r6, #0
 80013de:	2503      	movs	r5, #3
  __HAL_RCC_FMC_CLK_ENABLE();
 80013e0:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80013e4:	240c      	movs	r4, #12
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80013e6:	a901      	add	r1, sp, #4
 80013e8:	4832      	ldr	r0, [pc, #200]	@ (80014b4 <HAL_SDRAM_MspInit+0x114>)
  __HAL_RCC_FMC_CLK_ENABLE();
 80013ea:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80013ee:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
 80013f2:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80013f6:	9405      	str	r4, [sp, #20]
  __HAL_RCC_FMC_CLK_ENABLE();
 80013f8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80013fc:	9300      	str	r3, [sp, #0]
 80013fe:	9b00      	ldr	r3, [sp, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001400:	f240 63ff 	movw	r3, #1791	@ 0x6ff
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001404:	e9cd 6503 	strd	r6, r5, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001408:	e9cd 3701 	strd	r3, r7, [sp, #4]
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800140c:	f007 fb28 	bl	8008a60 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8001410:	2360      	movs	r3, #96	@ 0x60
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001412:	a901      	add	r1, sp, #4
 8001414:	4828      	ldr	r0, [pc, #160]	@ (80014b8 <HAL_SDRAM_MspInit+0x118>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001416:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001418:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800141c:	e9cd 6503 	strd	r6, r5, [sp, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001420:	f007 fb1e 	bl	8008a60 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_10|GPIO_PIN_9
 8001424:	f64f 7383 	movw	r3, #65411	@ 0xff83
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001428:	a901      	add	r1, sp, #4
 800142a:	4824      	ldr	r0, [pc, #144]	@ (80014bc <HAL_SDRAM_MspInit+0x11c>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800142c:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800142e:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001432:	e9cd 6503 	strd	r6, r5, [sp, #12]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001436:	f007 fb13 	bl	8008a60 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_14|GPIO_PIN_13|GPIO_PIN_10
 800143a:	f44f 437f 	mov.w	r3, #65280	@ 0xff00
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800143e:	a901      	add	r1, sp, #4
 8001440:	481f      	ldr	r0, [pc, #124]	@ (80014c0 <HAL_SDRAM_MspInit+0x120>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001442:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001444:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001448:	e9cd 6503 	strd	r6, r5, [sp, #12]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800144c:	f007 fb08 	bl	8008a60 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_5|GPIO_PIN_4
 8001450:	f248 1333 	movw	r3, #33075	@ 0x8133
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001454:	a901      	add	r1, sp, #4
 8001456:	481b      	ldr	r0, [pc, #108]	@ (80014c4 <HAL_SDRAM_MspInit+0x124>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001458:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800145a:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800145e:	e9cd 6503 	strd	r6, r5, [sp, #12]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001462:	f007 fafd 	bl	8008a60 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15|GPIO_PIN_14
 8001466:	f24c 7303 	movw	r3, #50947	@ 0xc703
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800146a:	a901      	add	r1, sp, #4
 800146c:	4816      	ldr	r0, [pc, #88]	@ (80014c8 <HAL_SDRAM_MspInit+0x128>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800146e:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001470:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001474:	e9cd 6503 	strd	r6, r5, [sp, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001478:	f007 faf2 	bl	8008a60 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_3
 800147c:	f64f 033f 	movw	r3, #63551	@ 0xf83f
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001480:	a901      	add	r1, sp, #4
 8001482:	4812      	ldr	r0, [pc, #72]	@ (80014cc <HAL_SDRAM_MspInit+0x12c>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001484:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001486:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800148a:	e9cd 6503 	strd	r6, r5, [sp, #12]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800148e:	f007 fae7 	bl	8008a60 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001492:	2301      	movs	r3, #1
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001494:	a901      	add	r1, sp, #4
 8001496:	480e      	ldr	r0, [pc, #56]	@ (80014d0 <HAL_SDRAM_MspInit+0x130>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001498:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800149a:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800149e:	e9cd 6503 	strd	r6, r5, [sp, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014a2:	f007 fadd 	bl	8008a60 <HAL_GPIO_Init>
  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 80014a6:	b039      	add	sp, #228	@ 0xe4
 80014a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80014aa:	bf00      	nop
 80014ac:	24000698 	.word	0x24000698
 80014b0:	58024400 	.word	0x58024400
 80014b4:	58022000 	.word	0x58022000
 80014b8:	58020400 	.word	0x58020400
 80014bc:	58021000 	.word	0x58021000
 80014c0:	58021c00 	.word	0x58021c00
 80014c4:	58021800 	.word	0x58021800
 80014c8:	58020c00 	.word	0x58020c00
 80014cc:	58021400 	.word	0x58021400
 80014d0:	58020800 	.word	0x58020800

080014d4 <HAL_SDRAM_MspDeInit>:

static void HAL_FMC_MspDeInit(void){
  /* USER CODE BEGIN FMC_MspDeInit 0 */

  /* USER CODE END FMC_MspDeInit 0 */
  if (FMC_DeInitialized) {
 80014d4:	4b1a      	ldr	r3, [pc, #104]	@ (8001540 <HAL_SDRAM_MspDeInit+0x6c>)
 80014d6:	681a      	ldr	r2, [r3, #0]
  /* USER CODE BEGIN FMC_MspDeInit 1 */

  /* USER CODE END FMC_MspDeInit 1 */
}

void HAL_SDRAM_MspDeInit(SDRAM_HandleTypeDef* hsdram){
 80014d8:	b510      	push	{r4, lr}
  if (FMC_DeInitialized) {
 80014da:	bb82      	cbnz	r2, 800153e <HAL_SDRAM_MspDeInit+0x6a>
  __HAL_RCC_FMC_CLK_DISABLE();
 80014dc:	4a19      	ldr	r2, [pc, #100]	@ (8001544 <HAL_SDRAM_MspDeInit+0x70>)
  FMC_DeInitialized = 1;
 80014de:	2401      	movs	r4, #1
  HAL_GPIO_DeInit(GPIOI, GPIO_PIN_6|GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_1
 80014e0:	f240 61ff 	movw	r1, #1791	@ 0x6ff
 80014e4:	4818      	ldr	r0, [pc, #96]	@ (8001548 <HAL_SDRAM_MspDeInit+0x74>)
  FMC_DeInitialized = 1;
 80014e6:	601c      	str	r4, [r3, #0]
  __HAL_RCC_FMC_CLK_DISABLE();
 80014e8:	f8d2 30d4 	ldr.w	r3, [r2, #212]	@ 0xd4
 80014ec:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80014f0:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
  HAL_GPIO_DeInit(GPIOI, GPIO_PIN_6|GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_1
 80014f4:	f007 fb9c 	bl	8008c30 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(GPIOB, GPIO_PIN_5|GPIO_PIN_6);
 80014f8:	2160      	movs	r1, #96	@ 0x60
 80014fa:	4814      	ldr	r0, [pc, #80]	@ (800154c <HAL_SDRAM_MspDeInit+0x78>)
 80014fc:	f007 fb98 	bl	8008c30 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(GPIOE, GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_10|GPIO_PIN_9
 8001500:	f64f 7183 	movw	r1, #65411	@ 0xff83
 8001504:	4812      	ldr	r0, [pc, #72]	@ (8001550 <HAL_SDRAM_MspDeInit+0x7c>)
 8001506:	f007 fb93 	bl	8008c30 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(GPIOH, GPIO_PIN_15|GPIO_PIN_14|GPIO_PIN_13|GPIO_PIN_10
 800150a:	f44f 417f 	mov.w	r1, #65280	@ 0xff00
 800150e:	4811      	ldr	r0, [pc, #68]	@ (8001554 <HAL_SDRAM_MspDeInit+0x80>)
 8001510:	f007 fb8e 	bl	8008c30 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(GPIOG, GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_5|GPIO_PIN_4
 8001514:	f248 1133 	movw	r1, #33075	@ 0x8133
 8001518:	480f      	ldr	r0, [pc, #60]	@ (8001558 <HAL_SDRAM_MspDeInit+0x84>)
 800151a:	f007 fb89 	bl	8008c30 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(GPIOD, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15|GPIO_PIN_14
 800151e:	f24c 7103 	movw	r1, #50947	@ 0xc703
 8001522:	480e      	ldr	r0, [pc, #56]	@ (800155c <HAL_SDRAM_MspDeInit+0x88>)
 8001524:	f007 fb84 	bl	8008c30 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(GPIOF, GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_3
 8001528:	f64f 013f 	movw	r1, #63551	@ 0xf83f
 800152c:	480c      	ldr	r0, [pc, #48]	@ (8001560 <HAL_SDRAM_MspDeInit+0x8c>)
 800152e:	f007 fb7f 	bl	8008c30 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(GPIOC, GPIO_PIN_0);
 8001532:	4621      	mov	r1, r4
 8001534:	480b      	ldr	r0, [pc, #44]	@ (8001564 <HAL_SDRAM_MspDeInit+0x90>)
  /* USER CODE END SDRAM_MspDeInit 0 */
  HAL_FMC_MspDeInit();
  /* USER CODE BEGIN SDRAM_MspDeInit 1 */

  /* USER CODE END SDRAM_MspDeInit 1 */
}
 8001536:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  HAL_GPIO_DeInit(GPIOC, GPIO_PIN_0);
 800153a:	f007 bb79 	b.w	8008c30 <HAL_GPIO_DeInit>
}
 800153e:	bd10      	pop	{r4, pc}
 8001540:	24000694 	.word	0x24000694
 8001544:	58024400 	.word	0x58024400
 8001548:	58022000 	.word	0x58022000
 800154c:	58020400 	.word	0x58020400
 8001550:	58021000 	.word	0x58021000
 8001554:	58021c00 	.word	0x58021c00
 8001558:	58021800 	.word	0x58021800
 800155c:	58020c00 	.word	0x58020c00
 8001560:	58021400 	.word	0x58021400
 8001564:	58020800 	.word	0x58020800

08001568 <HAL_InitTick>:
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001568:	280f      	cmp	r0, #15
{
 800156a:	b510      	push	{r4, lr}
 800156c:	4604      	mov	r4, r0
 800156e:	b08a      	sub	sp, #40	@ 0x28
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001570:	d902      	bls.n	8001578 <HAL_InitTick+0x10>
     HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
     uwTickPrio = TickPriority;
    }
  else
  {
    return HAL_ERROR;
 8001572:	2001      	movs	r0, #1
    return HAL_TIM_Base_Start_IT(&htim6);
  }

  /* Return function status */
  return HAL_ERROR;
}
 8001574:	b00a      	add	sp, #40	@ 0x28
 8001576:	bd10      	pop	{r4, pc}
     HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8001578:	4601      	mov	r1, r0
 800157a:	2200      	movs	r2, #0
 800157c:	2036      	movs	r0, #54	@ 0x36
 800157e:	f006 fc19 	bl	8007db4 <HAL_NVIC_SetPriority>
     HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001582:	2036      	movs	r0, #54	@ 0x36
 8001584:	f006 fc48 	bl	8007e18 <HAL_NVIC_EnableIRQ>
     uwTickPrio = TickPriority;
 8001588:	4b18      	ldr	r3, [pc, #96]	@ (80015ec <HAL_InitTick+0x84>)
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800158a:	4669      	mov	r1, sp
 800158c:	a802      	add	r0, sp, #8
     uwTickPrio = TickPriority;
 800158e:	601c      	str	r4, [r3, #0]
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001590:	4b17      	ldr	r3, [pc, #92]	@ (80015f0 <HAL_InitTick+0x88>)
 8001592:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
 8001596:	f042 0210 	orr.w	r2, r2, #16
 800159a:	f8c3 20e8 	str.w	r2, [r3, #232]	@ 0xe8
 800159e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80015a2:	f003 0310 	and.w	r3, r3, #16
 80015a6:	9301      	str	r3, [sp, #4]
 80015a8:	9b01      	ldr	r3, [sp, #4]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80015aa:	f00a fa8b 	bl	800bac4 <HAL_RCC_GetClockConfig>
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80015ae:	9b07      	ldr	r3, [sp, #28]
 80015b0:	b9c3      	cbnz	r3, 80015e4 <HAL_InitTick+0x7c>
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80015b2:	f00a fa63 	bl	800ba7c <HAL_RCC_GetPCLK1Freq>
  htim6.Instance = TIM6;
 80015b6:	4c0f      	ldr	r4, [pc, #60]	@ (80015f4 <HAL_InitTick+0x8c>)
 80015b8:	4b0f      	ldr	r3, [pc, #60]	@ (80015f8 <HAL_InitTick+0x90>)
 80015ba:	6023      	str	r3, [r4, #0]
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80015bc:	f240 33e7 	movw	r3, #999	@ 0x3e7
 80015c0:	60e3      	str	r3, [r4, #12]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80015c2:	4b0e      	ldr	r3, [pc, #56]	@ (80015fc <HAL_InitTick+0x94>)
 80015c4:	fbb0 f0f3 	udiv	r0, r0, r3
 80015c8:	3801      	subs	r0, #1
  htim6.Init.ClockDivision = 0;
 80015ca:	2300      	movs	r3, #0
  htim6.Init.Prescaler = uwPrescalerValue;
 80015cc:	6060      	str	r0, [r4, #4]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80015ce:	4620      	mov	r0, r4
  htim6.Init.ClockDivision = 0;
 80015d0:	6123      	str	r3, [r4, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015d2:	60a3      	str	r3, [r4, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80015d4:	f00b fa94 	bl	800cb00 <HAL_TIM_Base_Init>
 80015d8:	2800      	cmp	r0, #0
 80015da:	d1ca      	bne.n	8001572 <HAL_InitTick+0xa>
    return HAL_TIM_Base_Start_IT(&htim6);
 80015dc:	4620      	mov	r0, r4
 80015de:	f00b f941 	bl	800c864 <HAL_TIM_Base_Start_IT>
 80015e2:	e7c7      	b.n	8001574 <HAL_InitTick+0xc>
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80015e4:	f00a fa4a 	bl	800ba7c <HAL_RCC_GetPCLK1Freq>
 80015e8:	0040      	lsls	r0, r0, #1
 80015ea:	e7e4      	b.n	80015b6 <HAL_InitTick+0x4e>
 80015ec:	24000074 	.word	0x24000074
 80015f0:	58024400 	.word	0x58024400
 80015f4:	2400069c 	.word	0x2400069c
 80015f8:	40001000 	.word	0x40001000
 80015fc:	000f4240 	.word	0x000f4240

08001600 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001600:	e7fe      	b.n	8001600 <NMI_Handler>

08001602 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001602:	e7fe      	b.n	8001602 <HardFault_Handler>

08001604 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001604:	e7fe      	b.n	8001604 <MemManage_Handler>

08001606 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001606:	e7fe      	b.n	8001606 <BusFault_Handler>

08001608 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001608:	e7fe      	b.n	8001608 <UsageFault_Handler>

0800160a <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800160a:	4770      	bx	lr

0800160c <TIM6_DAC_IRQHandler>:
void TIM6_DAC_IRQHandler(void)
{
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800160c:	4801      	ldr	r0, [pc, #4]	@ (8001614 <TIM6_DAC_IRQHandler+0x8>)
 800160e:	f00b b96b 	b.w	800c8e8 <HAL_TIM_IRQHandler>
 8001612:	bf00      	nop
 8001614:	2400069c 	.word	0x2400069c

08001618 <LTDC_IRQHandler>:
void LTDC_IRQHandler(void)
{
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8001618:	4801      	ldr	r0, [pc, #4]	@ (8001620 <LTDC_IRQHandler+0x8>)
 800161a:	f008 bf8c 	b.w	800a536 <HAL_LTDC_IRQHandler>
 800161e:	bf00      	nop
 8001620:	24000414 	.word	0x24000414

08001624 <DMA2D_IRQHandler>:
void DMA2D_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8001624:	4801      	ldr	r0, [pc, #4]	@ (800162c <DMA2D_IRQHandler+0x8>)
 8001626:	f006 bd01 	b.w	800802c <HAL_DMA2D_IRQHandler>
 800162a:	bf00      	nop
 800162c:	24000608 	.word	0x24000608

08001630 <JPEG_IRQHandler>:
void JPEG_IRQHandler(void)
{
  /* USER CODE BEGIN JPEG_IRQn 0 */

  /* USER CODE END JPEG_IRQn 0 */
  HAL_JPEG_IRQHandler(&hjpeg);
 8001630:	4801      	ldr	r0, [pc, #4]	@ (8001638 <JPEG_IRQHandler+0x8>)
 8001632:	f008 be31 	b.w	800a298 <HAL_JPEG_IRQHandler>
 8001636:	bf00      	nop
 8001638:	24000594 	.word	0x24000594

0800163c <MDMA_IRQHandler>:
void MDMA_IRQHandler(void)
{
  /* USER CODE BEGIN MDMA_IRQn 0 */

  /* USER CODE END MDMA_IRQn 0 */
  HAL_MDMA_IRQHandler(&hmdma_jpeg_outfifo_th);
 800163c:	4804      	ldr	r0, [pc, #16]	@ (8001650 <MDMA_IRQHandler+0x14>)
{
 800163e:	b508      	push	{r3, lr}
  HAL_MDMA_IRQHandler(&hmdma_jpeg_outfifo_th);
 8001640:	f009 f982 	bl	800a948 <HAL_MDMA_IRQHandler>
  HAL_MDMA_IRQHandler(&hmdma_jpeg_infifo_th);
 8001644:	4803      	ldr	r0, [pc, #12]	@ (8001654 <MDMA_IRQHandler+0x18>)
  /* USER CODE BEGIN MDMA_IRQn 1 */

  /* USER CODE END MDMA_IRQn 1 */
}
 8001646:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_MDMA_IRQHandler(&hmdma_jpeg_infifo_th);
 800164a:	f009 b97d 	b.w	800a948 <HAL_MDMA_IRQHandler>
 800164e:	bf00      	nop
 8001650:	240004bc 	.word	0x240004bc
 8001654:	24000528 	.word	0x24000528

08001658 <DSI_IRQHandler>:
void DSI_IRQHandler(void)
{
  /* USER CODE BEGIN DSI_IRQn 0 */

  /* USER CODE END DSI_IRQn 0 */
  HAL_DSI_IRQHandler(&hdsi);
 8001658:	4801      	ldr	r0, [pc, #4]	@ (8001660 <DSI_IRQHandler+0x8>)
 800165a:	f006 beea 	b.w	8008432 <HAL_DSI_IRQHandler>
 800165e:	bf00      	nop
 8001660:	240005ec 	.word	0x240005ec

08001664 <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 8001664:	2001      	movs	r0, #1
 8001666:	4770      	bx	lr

08001668 <_kill>:

int _kill(int pid, int sig)
{
 8001668:	b508      	push	{r3, lr}
	errno = EINVAL;
 800166a:	f026 fdd9 	bl	8028220 <__errno>
 800166e:	2316      	movs	r3, #22
 8001670:	6003      	str	r3, [r0, #0]
	return -1;
}
 8001672:	f04f 30ff 	mov.w	r0, #4294967295
 8001676:	bd08      	pop	{r3, pc}

08001678 <_exit>:

void _exit (int status)
{
 8001678:	b508      	push	{r3, lr}
	errno = EINVAL;
 800167a:	f026 fdd1 	bl	8028220 <__errno>
 800167e:	2316      	movs	r3, #22
 8001680:	6003      	str	r3, [r0, #0]
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
 8001682:	e7fe      	b.n	8001682 <_exit+0xa>

08001684 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001684:	b570      	push	{r4, r5, r6, lr}
 8001686:	460d      	mov	r5, r1
 8001688:	4614      	mov	r4, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800168a:	460e      	mov	r6, r1
 800168c:	1b73      	subs	r3, r6, r5
 800168e:	429c      	cmp	r4, r3
 8001690:	dc01      	bgt.n	8001696 <_read+0x12>
	{
		*ptr++ = __io_getchar();
	}

return len;
}
 8001692:	4620      	mov	r0, r4
 8001694:	bd70      	pop	{r4, r5, r6, pc}
		*ptr++ = __io_getchar();
 8001696:	f3af 8000 	nop.w
 800169a:	f806 0b01 	strb.w	r0, [r6], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800169e:	e7f5      	b.n	800168c <_read+0x8>

080016a0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80016a0:	b570      	push	{r4, r5, r6, lr}
 80016a2:	460d      	mov	r5, r1
 80016a4:	4614      	mov	r4, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016a6:	460e      	mov	r6, r1
 80016a8:	1b73      	subs	r3, r6, r5
 80016aa:	429c      	cmp	r4, r3
 80016ac:	dc01      	bgt.n	80016b2 <_write+0x12>
	{
		__io_putchar(*ptr++);
	}
	return len;
}
 80016ae:	4620      	mov	r0, r4
 80016b0:	bd70      	pop	{r4, r5, r6, pc}
		__io_putchar(*ptr++);
 80016b2:	f816 0b01 	ldrb.w	r0, [r6], #1
 80016b6:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016ba:	e7f5      	b.n	80016a8 <_write+0x8>

080016bc <_close>:

int _close(int file)
{
	return -1;
}
 80016bc:	f04f 30ff 	mov.w	r0, #4294967295
 80016c0:	4770      	bx	lr

080016c2 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 80016c2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
	return 0;
}
 80016c6:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
 80016c8:	604b      	str	r3, [r1, #4]
}
 80016ca:	4770      	bx	lr

080016cc <_isatty>:

int _isatty(int file)
{
	return 1;
}
 80016cc:	2001      	movs	r0, #1
 80016ce:	4770      	bx	lr

080016d0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 80016d0:	2000      	movs	r0, #0
 80016d2:	4770      	bx	lr

080016d4 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80016d4:	4a0b      	ldr	r2, [pc, #44]	@ (8001704 <_sbrk+0x30>)
{
 80016d6:	4603      	mov	r3, r0
  if (NULL == __sbrk_heap_end)
 80016d8:	6811      	ldr	r1, [r2, #0]
{
 80016da:	b510      	push	{r4, lr}
  if (NULL == __sbrk_heap_end)
 80016dc:	b909      	cbnz	r1, 80016e2 <_sbrk+0xe>
  {
    __sbrk_heap_end = &_end;
 80016de:	490a      	ldr	r1, [pc, #40]	@ (8001708 <_sbrk+0x34>)
 80016e0:	6011      	str	r1, [r2, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80016e2:	6810      	ldr	r0, [r2, #0]
 80016e4:	4909      	ldr	r1, [pc, #36]	@ (800170c <_sbrk+0x38>)
 80016e6:	4c0a      	ldr	r4, [pc, #40]	@ (8001710 <_sbrk+0x3c>)
 80016e8:	4403      	add	r3, r0
 80016ea:	1b09      	subs	r1, r1, r4
 80016ec:	428b      	cmp	r3, r1
 80016ee:	d906      	bls.n	80016fe <_sbrk+0x2a>
  {
    errno = ENOMEM;
 80016f0:	f026 fd96 	bl	8028220 <__errno>
 80016f4:	230c      	movs	r3, #12
 80016f6:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 80016f8:	f04f 30ff 	mov.w	r0, #4294967295

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 80016fc:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 80016fe:	6013      	str	r3, [r2, #0]
  return (void *)prev_heap_end;
 8001700:	e7fc      	b.n	80016fc <_sbrk+0x28>
 8001702:	bf00      	nop
 8001704:	240006e8 	.word	0x240006e8
 8001708:	24029b40 	.word	0x24029b40
 800170c:	24080000 	.word	0x24080000
 8001710:	00001000 	.word	0x00001000

08001714 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001714:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800174c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001718:	f006 fa72 	bl	8007c00 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800171c:	480c      	ldr	r0, [pc, #48]	@ (8001750 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800171e:	490d      	ldr	r1, [pc, #52]	@ (8001754 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001720:	4a0d      	ldr	r2, [pc, #52]	@ (8001758 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001722:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001724:	e002      	b.n	800172c <LoopCopyDataInit>

08001726 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001726:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001728:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800172a:	3304      	adds	r3, #4

0800172c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800172c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800172e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001730:	d3f9      	bcc.n	8001726 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001732:	4a0a      	ldr	r2, [pc, #40]	@ (800175c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001734:	4c0a      	ldr	r4, [pc, #40]	@ (8001760 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001736:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001738:	e001      	b.n	800173e <LoopFillZerobss>

0800173a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800173a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800173c:	3204      	adds	r2, #4

0800173e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800173e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001740:	d3fb      	bcc.n	800173a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001742:	f026 fd73 	bl	802822c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001746:	f7ff f83f 	bl	80007c8 <main>
  bx  lr
 800174a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800174c:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001750:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001754:	2400013c 	.word	0x2400013c
  ldr r2, =_sidata
 8001758:	08037158 	.word	0x08037158
  ldr r2, =_sbss
 800175c:	24000340 	.word	0x24000340
  ldr r4, =_ebss
 8001760:	24029b40 	.word	0x24029b40

08001764 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001764:	e7fe      	b.n	8001764 <ADC3_IRQHandler>

08001766 <MX_TouchGFX_PreOSInit>:
/**
 * PreOS Initialization function
 */
void MX_TouchGFX_PreOSInit(void)
{
}
 8001766:	4770      	bx	lr

08001768 <MX_TouchGFX_Init>:

/**
 * Initialize TouchGFX application
 */
void MX_TouchGFX_Init(void)
{
 8001768:	b508      	push	{r3, lr}
    // Calling forward to touchgfx_init in C++ domain
    touchgfx_components_init();
 800176a:	f001 fd19 	bl	80031a0 <touchgfx_components_init>
    touchgfx_init();
}
 800176e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    touchgfx_init();
 8001772:	f001 bc9b 	b.w	80030ac <touchgfx_init>

08001776 <TouchGFX_Task>:
 * TouchGFX application thread
 */
void TouchGFX_Task(void* argument)
{
    // Calling forward to touchgfx_taskEntry in C++ domain
    touchgfx_taskEntry();
 8001776:	f001 bd15 	b.w	80031a4 <touchgfx_taskEntry>

0800177a <_ZN8touchgfx18MCUInstrumentation13getCCConsumedEv>:
     *
     * @return clock cycles.
     */
    virtual uint32_t getCCConsumed()
    {
        return cc_consumed;
 800177a:	6840      	ldr	r0, [r0, #4]
    }
 800177c:	4770      	bx	lr

0800177e <_ZN8touchgfx18MCUInstrumentation13setCCConsumedEm>:
     *
     * @param  val number of clock cycles.
     */
    virtual void setCCConsumed(uint32_t val)
    {
        cc_consumed = val;
 800177e:	6041      	str	r1, [r0, #4]
    }
 8001780:	4770      	bx	lr

08001782 <_ZN8touchgfx22STM32H7Instrumentation12getElapsedUSEjjj>:
    HAL_TIM_Base_Start(&tim);
}

unsigned int STM32H7Instrumentation::getElapsedUS(unsigned int start, unsigned int now, unsigned int clockfrequency)
{
    return ((now - start) + (clockfrequency / 2)) / clockfrequency;
 8001782:	1a52      	subs	r2, r2, r1
 8001784:	eb02 0253 	add.w	r2, r2, r3, lsr #1
}
 8001788:	fbb2 f0f3 	udiv	r0, r2, r3
 800178c:	4770      	bx	lr
	...

08001790 <_ZN8touchgfx22STM32H7Instrumentation12getCPUCyclesEv>:

unsigned int STM32H7Instrumentation::getCPUCycles()
{
    return __HAL_TIM_GET_COUNTER(&tim) * m_sysclkRatio;
 8001790:	4b02      	ldr	r3, [pc, #8]	@ (800179c <_ZN8touchgfx22STM32H7Instrumentation12getCPUCyclesEv+0xc>)
 8001792:	68c0      	ldr	r0, [r0, #12]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
}
 8001798:	4358      	muls	r0, r3
 800179a:	4770      	bx	lr
 800179c:	240006ec 	.word	0x240006ec

080017a0 <_ZN8touchgfx22STM32H7InstrumentationD1Ev>:
#include <platform/core/MCUInstrumentation.hpp>
#include <stdint.h>

namespace touchgfx
{
class STM32H7Instrumentation: public MCUInstrumentation
 80017a0:	4770      	bx	lr
	...

080017a4 <_ZN8touchgfx22STM32H7Instrumentation4initEv>:
{
 80017a4:	b537      	push	{r0, r1, r2, r4, r5, lr}
    __HAL_RCC_TIM2_CLK_ENABLE();
 80017a6:	4a1e      	ldr	r2, [pc, #120]	@ (8001820 <_ZN8touchgfx22STM32H7Instrumentation4initEv+0x7c>)
    tim.Instance = TIM2;
 80017a8:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
{
 80017ac:	4605      	mov	r5, r0
    tim.Init.Period = 0xFFFFFFFF;
 80017ae:	f04f 30ff 	mov.w	r0, #4294967295
    __HAL_RCC_TIM2_CLK_ENABLE();
 80017b2:	f8d2 30e8 	ldr.w	r3, [r2, #232]	@ 0xe8
 80017b6:	f043 0301 	orr.w	r3, r3, #1
 80017ba:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80017be:	f8d2 30e8 	ldr.w	r3, [r2, #232]	@ 0xe8
 80017c2:	f003 0301 	and.w	r3, r3, #1
 80017c6:	9301      	str	r3, [sp, #4]
 80017c8:	9b01      	ldr	r3, [sp, #4]
    tim.Instance = TIM2;
 80017ca:	4b16      	ldr	r3, [pc, #88]	@ (8001824 <_ZN8touchgfx22STM32H7Instrumentation4initEv+0x80>)
 80017cc:	6019      	str	r1, [r3, #0]
    tim.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017ce:	2100      	movs	r1, #0
    tim.Init.Period = 0xFFFFFFFF;
 80017d0:	60d8      	str	r0, [r3, #12]
    tim.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017d2:	6119      	str	r1, [r3, #16]
    tim.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017d4:	6099      	str	r1, [r3, #8]
    tim.Init.Prescaler = 0;
 80017d6:	6059      	str	r1, [r3, #4]
    tim.Init.RepetitionCounter = 1;
 80017d8:	2101      	movs	r1, #1
 80017da:	6159      	str	r1, [r3, #20]
    uwD2Prescaler = D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> POSITION_VAL(RCC_D2CFGR_D2PPRE1_0)];
 80017dc:	69d3      	ldr	r3, [r2, #28]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017de:	2210      	movs	r2, #16
 80017e0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80017e4:	fa92 f2a2 	rbit	r2, r2
   */
  if (value == 0U)
  {
    return 32U;
  }
  return __builtin_clz(value);
 80017e8:	fab2 f282 	clz	r2, r2
 80017ec:	40d3      	lsrs	r3, r2
    if (!uwD2Prescaler)
 80017ee:	4a0e      	ldr	r2, [pc, #56]	@ (8001828 <_ZN8touchgfx22STM32H7Instrumentation4initEv+0x84>)
 80017f0:	5cd3      	ldrb	r3, [r2, r3]
 80017f2:	b983      	cbnz	r3, 8001816 <_ZN8touchgfx22STM32H7Instrumentation4initEv+0x72>
        uwTimclock = HAL_RCC_GetHCLKFreq();
 80017f4:	f00a f920 	bl	800ba38 <HAL_RCC_GetHCLKFreq>
 80017f8:	4604      	mov	r4, r0
    m_sysclkRatio = HAL_RCC_GetSysClockFreq() / uwTimclock;
 80017fa:	f009 ff55 	bl	800b6a8 <HAL_RCC_GetSysClockFreq>
 80017fe:	fbb0 f0f4 	udiv	r0, r0, r4
 8001802:	60e8      	str	r0, [r5, #12]
    HAL_TIM_Base_Init(&tim);
 8001804:	4807      	ldr	r0, [pc, #28]	@ (8001824 <_ZN8touchgfx22STM32H7Instrumentation4initEv+0x80>)
 8001806:	f00b f97b 	bl	800cb00 <HAL_TIM_Base_Init>
    HAL_TIM_Base_Start(&tim);
 800180a:	4806      	ldr	r0, [pc, #24]	@ (8001824 <_ZN8touchgfx22STM32H7Instrumentation4initEv+0x80>)
}
 800180c:	b003      	add	sp, #12
 800180e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    HAL_TIM_Base_Start(&tim);
 8001812:	f00a bfed 	b.w	800c7f0 <HAL_TIM_Base_Start>
        uwTimclock = 2 * HAL_RCC_GetPCLK1Freq();
 8001816:	f00a f931 	bl	800ba7c <HAL_RCC_GetPCLK1Freq>
 800181a:	0044      	lsls	r4, r0, #1
 800181c:	e7ed      	b.n	80017fa <_ZN8touchgfx22STM32H7Instrumentation4initEv+0x56>
 800181e:	bf00      	nop
 8001820:	58024400 	.word	0x58024400
 8001824:	240006ec 	.word	0x240006ec
 8001828:	0802c004 	.word	0x0802c004

0800182c <_ZN8touchgfx22STM32H7InstrumentationD0Ev>:
 800182c:	b510      	push	{r4, lr}
 800182e:	4604      	mov	r4, r0
 8001830:	2110      	movs	r1, #16
 8001832:	f025 fe2c 	bl	802748e <_ZdlPvj>
 8001836:	4620      	mov	r0, r4
 8001838:	bd10      	pop	{r4, pc}

0800183a <_ZN8touchgfx22STM32H7Instrumentation12setMCUActiveEb>:

void STM32H7Instrumentation::setMCUActive(bool active)
{
 800183a:	b538      	push	{r3, r4, r5, lr}
    if (active) //idle task sched out
    {
        uint32_t current_cc = cc_in;
        cc_consumed += getCPUCycles() - current_cc;
 800183c:	6803      	ldr	r3, [r0, #0]
{
 800183e:	4604      	mov	r4, r0
        cc_consumed += getCPUCycles() - current_cc;
 8001840:	691b      	ldr	r3, [r3, #16]
    if (active) //idle task sched out
 8001842:	b131      	cbz	r1, 8001852 <_ZN8touchgfx22STM32H7Instrumentation12setMCUActiveEb+0x18>
        uint32_t current_cc = cc_in;
 8001844:	6885      	ldr	r5, [r0, #8]
        cc_consumed += getCPUCycles() - current_cc;
 8001846:	4798      	blx	r3
 8001848:	6863      	ldr	r3, [r4, #4]
 800184a:	1b5b      	subs	r3, r3, r5
 800184c:	4403      	add	r3, r0
 800184e:	6063      	str	r3, [r4, #4]
    }
    else //idle task sched in
    {
        cc_in = getCPUCycles();
    }
}
 8001850:	bd38      	pop	{r3, r4, r5, pc}
        cc_in = getCPUCycles();
 8001852:	4798      	blx	r3
 8001854:	60a0      	str	r0, [r4, #8]
}
 8001856:	e7fb      	b.n	8001850 <_ZN8touchgfx22STM32H7Instrumentation12setMCUActiveEb+0x16>

08001858 <_ZN20STM32TouchControllerD1Ev>:
 * @brief This class specializes TouchController Interface.
 *
 * @sa touchgfx::TouchController
 */

class STM32TouchController : public touchgfx::TouchController
 8001858:	4770      	bx	lr
	...

0800185c <_ZN20STM32TouchController11sampleTouchERlS0_>:

    assert(bsp_ts_initialized);
}

bool STM32TouchController::sampleTouch(int32_t& x, int32_t& y)
{
 800185c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     *
     * This function is called by the TouchGFX framework.
     * By default sampleTouch is called every tick, this can be adjusted by HAL::setTouchSampleRate(int8_t);
     *
     */
    if (bsp_ts_initialized)
 800185e:	4b0a      	ldr	r3, [pc, #40]	@ (8001888 <_ZN20STM32TouchController11sampleTouchERlS0_+0x2c>)
{
 8001860:	460f      	mov	r7, r1
 8001862:	4616      	mov	r6, r2
    if (bsp_ts_initialized)
 8001864:	781d      	ldrb	r5, [r3, #0]
 8001866:	b915      	cbnz	r5, 800186e <_ZN20STM32TouchController11sampleTouchERlS0_+0x12>
            x = TS_State.TouchX;
            y = TS_State.TouchY;
            return true;
        }
    }
    return false;
 8001868:	2500      	movs	r5, #0
}
 800186a:	4628      	mov	r0, r5
 800186c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        BSP_TS_GetState(0, &TS_State);
 800186e:	4c07      	ldr	r4, [pc, #28]	@ (800188c <_ZN20STM32TouchController11sampleTouchERlS0_+0x30>)
 8001870:	2000      	movs	r0, #0
 8001872:	4621      	mov	r1, r4
 8001874:	f006 f968 	bl	8007b48 <BSP_TS_GetState>
        if (TS_State.TouchDetected)
 8001878:	6823      	ldr	r3, [r4, #0]
 800187a:	2b00      	cmp	r3, #0
 800187c:	d0f4      	beq.n	8001868 <_ZN20STM32TouchController11sampleTouchERlS0_+0xc>
            x = TS_State.TouchX;
 800187e:	6863      	ldr	r3, [r4, #4]
 8001880:	603b      	str	r3, [r7, #0]
            y = TS_State.TouchY;
 8001882:	68a3      	ldr	r3, [r4, #8]
 8001884:	6033      	str	r3, [r6, #0]
            return true;
 8001886:	e7f0      	b.n	800186a <_ZN20STM32TouchController11sampleTouchERlS0_+0xe>
 8001888:	24000748 	.word	0x24000748
 800188c:	24000738 	.word	0x24000738

08001890 <_ZN20STM32TouchControllerD0Ev>:
 8001890:	b510      	push	{r4, lr}
 8001892:	4604      	mov	r4, r0
 8001894:	2104      	movs	r1, #4
 8001896:	f025 fdfa 	bl	802748e <_ZdlPvj>
 800189a:	4620      	mov	r0, r4
 800189c:	bd10      	pop	{r4, pc}
	...

080018a0 <_ZN20STM32TouchController4initEv>:
{
 80018a0:	b508      	push	{r3, lr}
    hTS->Width = 800;
 80018a2:	4b0e      	ldr	r3, [pc, #56]	@ (80018dc <_ZN20STM32TouchController4initEv+0x3c>)
    hTS->Height = 480;
 80018a4:	f44f 7248 	mov.w	r2, #800	@ 0x320
    hTS->Accuracy = 0;
 80018a8:	2000      	movs	r0, #0
    hTS->Width = 800;
 80018aa:	6819      	ldr	r1, [r3, #0]
    hTS->Height = 480;
 80018ac:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 80018b0:	e9c1 2300 	strd	r2, r3, [r1]
    hTS->Accuracy = 0;
 80018b4:	230c      	movs	r3, #12
 80018b6:	e9c1 3002 	strd	r3, r0, [r1, #8]
    if (BSP_TS_Init(0, hTS) == BSP_ERROR_NONE)
 80018ba:	f006 f8b5 	bl	8007a28 <BSP_TS_Init>
 80018be:	4b08      	ldr	r3, [pc, #32]	@ (80018e0 <_ZN20STM32TouchController4initEv+0x40>)
 80018c0:	b910      	cbnz	r0, 80018c8 <_ZN20STM32TouchController4initEv+0x28>
        bsp_ts_initialized = true;
 80018c2:	2201      	movs	r2, #1
 80018c4:	701a      	strb	r2, [r3, #0]
}
 80018c6:	bd08      	pop	{r3, pc}
    assert(bsp_ts_initialized);
 80018c8:	781b      	ldrb	r3, [r3, #0]
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d1fb      	bne.n	80018c6 <_ZN20STM32TouchController4initEv+0x26>
 80018ce:	4b05      	ldr	r3, [pc, #20]	@ (80018e4 <_ZN20STM32TouchController4initEv+0x44>)
 80018d0:	212e      	movs	r1, #46	@ 0x2e
 80018d2:	4a05      	ldr	r2, [pc, #20]	@ (80018e8 <_ZN20STM32TouchController4initEv+0x48>)
 80018d4:	4805      	ldr	r0, [pc, #20]	@ (80018ec <_ZN20STM32TouchController4initEv+0x4c>)
 80018d6:	f026 f953 	bl	8027b80 <__assert_func>
 80018da:	bf00      	nop
 80018dc:	24000744 	.word	0x24000744
 80018e0:	24000748 	.word	0x24000748
 80018e4:	08028cc8 	.word	0x08028cc8
 80018e8:	08028cdb 	.word	0x08028cdb
 80018ec:	08028d05 	.word	0x08028d05

080018f0 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>:
/*
 * Sets a pin high.
 */
void GPIO::set(GPIO_ID id)
{
    switch (id)
 80018f0:	2803      	cmp	r0, #3
 80018f2:	d825      	bhi.n	8001940 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x50>
 80018f4:	e8df f000 	tbb	[pc, r0]
 80018f8:	1b130b02 	.word	0x1b130b02
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, M_GPIO_PIN_SET(id));
 80018fc:	4b11      	ldr	r3, [pc, #68]	@ (8001944 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x54>)
 80018fe:	2108      	movs	r1, #8
 8001900:	681a      	ldr	r2, [r3, #0]
 8001902:	fab2 f282 	clz	r2, r2
 8001906:	0952      	lsrs	r2, r2, #5
#endif
        break;
    case GPIO::RENDER_TIME:
#if defined(RENDER_TIME_GPIO_Port) && defined(RENDER_TIME_Pin)
        HAL_GPIO_WritePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin, M_GPIO_PIN_SET(id));
 8001908:	480f      	ldr	r0, [pc, #60]	@ (8001948 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x58>)
        HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, M_GPIO_PIN_SET(id));
#endif
        break;
    case GPIO::MCU_ACTIVE:
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_SET(id));
 800190a:	f007 ba33 	b.w	8008d74 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin, M_GPIO_PIN_SET(id));
 800190e:	4b0d      	ldr	r3, [pc, #52]	@ (8001944 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x54>)
 8001910:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001914:	685a      	ldr	r2, [r3, #4]
 8001916:	fab2 f282 	clz	r2, r2
 800191a:	0952      	lsrs	r2, r2, #5
 800191c:	e7f4      	b.n	8001908 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x18>
        HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, M_GPIO_PIN_SET(id));
 800191e:	4b09      	ldr	r3, [pc, #36]	@ (8001944 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x54>)
 8001920:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001924:	689a      	ldr	r2, [r3, #8]
 8001926:	fab2 f282 	clz	r2, r2
 800192a:	0952      	lsrs	r2, r2, #5
 800192c:	e7ec      	b.n	8001908 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x18>
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_SET(id));
 800192e:	4b05      	ldr	r3, [pc, #20]	@ (8001944 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x54>)
 8001930:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001934:	4805      	ldr	r0, [pc, #20]	@ (800194c <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x5c>)
 8001936:	68da      	ldr	r2, [r3, #12]
 8001938:	fab2 f282 	clz	r2, r2
 800193c:	0952      	lsrs	r2, r2, #5
 800193e:	e7e4      	b.n	800190a <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x1a>
#endif
        break;
    }
}
 8001940:	4770      	bx	lr
 8001942:	bf00      	nop
 8001944:	2400074c 	.word	0x2400074c
 8001948:	58022400 	.word	0x58022400
 800194c:	58021400 	.word	0x58021400

08001950 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>:
/*
 * Sets a pin low.
 */
void GPIO::clear(GPIO_ID id)
{
    switch (id)
 8001950:	2803      	cmp	r0, #3
 8001952:	d825      	bhi.n	80019a0 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x50>
 8001954:	e8df f000 	tbb	[pc, r0]
 8001958:	1b130b02 	.word	0x1b130b02
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, M_GPIO_PIN_RESET(id));
 800195c:	4b11      	ldr	r3, [pc, #68]	@ (80019a4 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x54>)
 800195e:	2108      	movs	r1, #8
 8001960:	681a      	ldr	r2, [r3, #0]
 8001962:	3a00      	subs	r2, #0
 8001964:	bf18      	it	ne
 8001966:	2201      	movne	r2, #1
#endif
        break;
    case GPIO::RENDER_TIME:
#if defined(RENDER_TIME_GPIO_Port) && defined(RENDER_TIME_Pin)
        HAL_GPIO_WritePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin, M_GPIO_PIN_RESET(id));
 8001968:	480f      	ldr	r0, [pc, #60]	@ (80019a8 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x58>)
        HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, M_GPIO_PIN_RESET(id));
#endif
        break;
    case GPIO::MCU_ACTIVE:
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_RESET(id));
 800196a:	f007 ba03 	b.w	8008d74 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin, M_GPIO_PIN_RESET(id));
 800196e:	4b0d      	ldr	r3, [pc, #52]	@ (80019a4 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x54>)
 8001970:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001974:	685a      	ldr	r2, [r3, #4]
 8001976:	3a00      	subs	r2, #0
 8001978:	bf18      	it	ne
 800197a:	2201      	movne	r2, #1
 800197c:	e7f4      	b.n	8001968 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x18>
        HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, M_GPIO_PIN_RESET(id));
 800197e:	4b09      	ldr	r3, [pc, #36]	@ (80019a4 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x54>)
 8001980:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001984:	689a      	ldr	r2, [r3, #8]
 8001986:	3a00      	subs	r2, #0
 8001988:	bf18      	it	ne
 800198a:	2201      	movne	r2, #1
 800198c:	e7ec      	b.n	8001968 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x18>
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_RESET(id));
 800198e:	4b05      	ldr	r3, [pc, #20]	@ (80019a4 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x54>)
 8001990:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001994:	4805      	ldr	r0, [pc, #20]	@ (80019ac <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x5c>)
 8001996:	68da      	ldr	r2, [r3, #12]
 8001998:	3a00      	subs	r2, #0
 800199a:	bf18      	it	ne
 800199c:	2201      	movne	r2, #1
 800199e:	e7e4      	b.n	800196a <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x1a>
#endif
        break;
    }
}
 80019a0:	4770      	bx	lr
 80019a2:	bf00      	nop
 80019a4:	2400074c 	.word	0x2400074c
 80019a8:	58022400 	.word	0x58022400
 80019ac:	58021400 	.word	0x58021400

080019b0 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>:
/*
 * Toggles a pin.
 */
void GPIO::toggle(GPIO_ID id)
{
    switch (id)
 80019b0:	2803      	cmp	r0, #3
 80019b2:	d811      	bhi.n	80019d8 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x28>
 80019b4:	e8df f000 	tbb	[pc, r0]
 80019b8:	0c090602 	.word	0x0c090602
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_TogglePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin);
 80019bc:	2108      	movs	r1, #8
#endif
        break;
    case GPIO::RENDER_TIME:
#if defined(RENDER_TIME_GPIO_Port) && defined(RENDER_TIME_Pin)
        HAL_GPIO_TogglePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin);
 80019be:	4807      	ldr	r0, [pc, #28]	@ (80019dc <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x2c>)
        HAL_GPIO_TogglePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin);
#endif
        break;
    case GPIO::MCU_ACTIVE:
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_TogglePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
 80019c0:	f007 b9dd 	b.w	8008d7e <HAL_GPIO_TogglePin>
        HAL_GPIO_TogglePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin);
 80019c4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80019c8:	e7f9      	b.n	80019be <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0xe>
        HAL_GPIO_TogglePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin);
 80019ca:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80019ce:	e7f6      	b.n	80019be <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0xe>
        HAL_GPIO_TogglePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
 80019d0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80019d4:	4802      	ldr	r0, [pc, #8]	@ (80019e0 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x30>)
 80019d6:	e7f3      	b.n	80019c0 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x10>
#endif
        break;
    }
}
 80019d8:	4770      	bx	lr
 80019da:	bf00      	nop
 80019dc:	58022400 	.word	0x58022400
 80019e0:	58021400 	.word	0x58021400

080019e4 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE>:

/*
 * Gets the state of a pin.
 */
bool GPIO::get(GPIO_ID id)
{
 80019e4:	b508      	push	{r3, lr}
    GPIO_PinState bitstatus = GPIO_PIN_RESET;
    switch (id)
 80019e6:	2803      	cmp	r0, #3
 80019e8:	d815      	bhi.n	8001a16 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x32>
 80019ea:	e8df f000 	tbb	[pc, r0]
 80019ee:	0a02      	.short	0x0a02
 80019f0:	100d      	.short	0x100d
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        bitstatus = HAL_GPIO_ReadPin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin);
 80019f2:	2108      	movs	r1, #8
        bitstatus = HAL_GPIO_ReadPin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin);
#endif
        break;
    case GPIO::FRAME_RATE:
#if defined(FRAME_RATE_GPIO_Port) && defined(FRAME_RATE_Pin)
        bitstatus = HAL_GPIO_ReadPin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin);
 80019f4:	4809      	ldr	r0, [pc, #36]	@ (8001a1c <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x38>)
#endif
        break;
    case GPIO::MCU_ACTIVE:
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        bitstatus = HAL_GPIO_ReadPin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
 80019f6:	f007 f9b7 	bl	8008d68 <HAL_GPIO_ReadPin>
#endif
        break;
    }
    return (bitstatus == GPIO_PIN_SET);
}
 80019fa:	1e43      	subs	r3, r0, #1
 80019fc:	4258      	negs	r0, r3
 80019fe:	4158      	adcs	r0, r3
 8001a00:	bd08      	pop	{r3, pc}
        bitstatus = HAL_GPIO_ReadPin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin);
 8001a02:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001a06:	e7f5      	b.n	80019f4 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x10>
        bitstatus = HAL_GPIO_ReadPin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin);
 8001a08:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001a0c:	e7f2      	b.n	80019f4 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x10>
        bitstatus = HAL_GPIO_ReadPin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
 8001a0e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001a12:	4803      	ldr	r0, [pc, #12]	@ (8001a20 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x3c>)
 8001a14:	e7ef      	b.n	80019f6 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x12>
    switch (id)
 8001a16:	2000      	movs	r0, #0
 8001a18:	e7ef      	b.n	80019fa <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x16>
 8001a1a:	bf00      	nop
 8001a1c:	58022400 	.word	0x58022400
 8001a20:	58021400 	.word	0x58021400

08001a24 <_ZN8touchgfx4GPIO4initEv>:
{
 8001a24:	b570      	push	{r4, r5, r6, lr}
 8001a26:	4d08      	ldr	r5, [pc, #32]	@ (8001a48 <_ZN8touchgfx4GPIO4initEv+0x24>)
    for (int id = 0; id <= 4; id++)
 8001a28:	2400      	movs	r4, #0
                GPIO_InvertedLevels[id] = 1;
 8001a2a:	2601      	movs	r6, #1
        if (GPIO::get(static_cast<GPIO_ID>(id)))
 8001a2c:	b2e0      	uxtb	r0, r4
 8001a2e:	f7ff ffd9 	bl	80019e4 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE>
 8001a32:	b118      	cbz	r0, 8001a3c <_ZN8touchgfx4GPIO4initEv+0x18>
            if (GPIO_InvertedLevels[id] != 1)
 8001a34:	682b      	ldr	r3, [r5, #0]
 8001a36:	2b01      	cmp	r3, #1
                GPIO_InvertedLevels[id] = 1;
 8001a38:	bf18      	it	ne
 8001a3a:	602e      	strne	r6, [r5, #0]
    for (int id = 0; id <= 4; id++)
 8001a3c:	3401      	adds	r4, #1
 8001a3e:	3504      	adds	r5, #4
 8001a40:	2c05      	cmp	r4, #5
 8001a42:	d1f3      	bne.n	8001a2c <_ZN8touchgfx4GPIO4initEv+0x8>
}
 8001a44:	bd70      	pop	{r4, r5, r6, pc}
 8001a46:	bf00      	nop
 8001a48:	2400074c 	.word	0x2400074c

08001a4c <_ZN8touchgfx3HAL21setDisplayOrientationENS_18DisplayOrientationE>:
     * @note A screen transition must occur before this takes effect!
     */
    virtual void setDisplayOrientation(DisplayOrientation orientation)
    {
        requestedOrientation = orientation;
        displayOrientationChangeRequested = true;
 8001a4c:	2301      	movs	r3, #1
        requestedOrientation = orientation;
 8001a4e:	f880 1078 	strb.w	r1, [r0, #120]	@ 0x78
        displayOrientationChangeRequested = true;
 8001a52:	f880 3079 	strb.w	r3, [r0, #121]	@ 0x79
    }
 8001a56:	4770      	bx	lr

08001a58 <_ZN8touchgfx3HAL9sampleKeyERh>:
     */
    virtual bool sampleKey(uint8_t& key)
    {
        (void)key; // Unused variable
        return false;
    }
 8001a58:	2000      	movs	r0, #0
 8001a5a:	4770      	bx	lr

08001a5c <_ZN8touchgfx3HAL19setAnimationStorageEPv>:
     *
     * @see setFrameBufferStartAddresses
     */
    virtual void setAnimationStorage(void* animationStorage)
    {
        frameBuffer2 = reinterpret_cast<uint16_t*>(animationStorage);
 8001a5c:	6441      	str	r1, [r0, #68]	@ 0x44
        USE_ANIMATION_STORAGE = animationStorage != 0;
 8001a5e:	3900      	subs	r1, #0
 8001a60:	4b02      	ldr	r3, [pc, #8]	@ (8001a6c <_ZN8touchgfx3HAL19setAnimationStorageEPv+0x10>)
 8001a62:	bf18      	it	ne
 8001a64:	2101      	movne	r1, #1
 8001a66:	7019      	strb	r1, [r3, #0]
    }
 8001a68:	4770      	bx	lr
 8001a6a:	bf00      	nop
 8001a6c:	24028e1f 	.word	0x24028e1f

08001a70 <_ZNK8touchgfx3HAL18getFlashDataReaderEv>:
     * @return the FlashDataReader.
     */
    virtual FlashDataReader* getFlashDataReader() const
    {
        return 0;
    }
 8001a70:	2000      	movs	r0, #0
 8001a72:	4770      	bx	lr

08001a74 <_ZN8touchgfx3HAL9taskDelayEt>:
     *
     * @see registerTaskDelayFunction
     */
    virtual void taskDelay(uint16_t ms)
    {
        if (taskDelayFunc)
 8001a74:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 8001a76:	b10b      	cbz	r3, 8001a7c <_ZN8touchgfx3HAL9taskDelayEt+0x8>
        {
            taskDelayFunc(ms);
 8001a78:	4608      	mov	r0, r1
 8001a7a:	4718      	bx	r3
        }
    }
 8001a7c:	4770      	bx	lr

08001a7e <_ZN8touchgfx3HAL17getTFTCurrentLineEv>:
     *         implemented".
     */
    virtual uint16_t getTFTCurrentLine()
    {
        return 0xFFFFu;
    }
 8001a7e:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8001a82:	4770      	bx	lr

08001a84 <_ZN8touchgfx3HAL10getDMATypeEv>:
     *
     * @return a DMAType value of the concrete DMA implementation.
     */
    virtual DMAType getDMAType()
    {
        return dma.getDMAType();
 8001a84:	6840      	ldr	r0, [r0, #4]
 8001a86:	6803      	ldr	r3, [r0, #0]
 8001a88:	699b      	ldr	r3, [r3, #24]
 8001a8a:	4718      	bx	r3

08001a8c <_ZNK11TouchGFXHAL17getTFTFrameBufferEv>:
    // and implemented needed functionality here.

    /* USER CODE BEGIN getTFTFrameBuffer */
    return currFbBase;
    /* USER CODE END getTFTFrameBuffer */
}
 8001a8c:	4b01      	ldr	r3, [pc, #4]	@ (8001a94 <_ZNK11TouchGFXHAL17getTFTFrameBufferEv+0x8>)
 8001a8e:	6818      	ldr	r0, [r3, #0]
 8001a90:	4770      	bx	lr
 8001a92:	bf00      	nop
 8001a94:	24000770 	.word	0x24000770

08001a98 <_ZN11TouchGFXHALD1Ev>:
 *
 * @brief HAL implementation for TouchGFX.
 *
 * @sa HAL
 */
class TouchGFXHAL : public TouchGFXGeneratedHAL
 8001a98:	4770      	bx	lr

08001a9a <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE>:
    // and implemented needed functionality here.
    // Please note, HAL::flushFrameBuffer(const touchgfx::Rect& rect) must
    // be called to notify the touchgfx framework that flush has been performed.

    /* USER CODE BEGIN flushFrameBuffer step 1 */
    TouchGFXGeneratedHAL::flushFrameBuffer(rect);
 8001a9a:	f001 bc80 	b.w	800339e <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>

08001a9e <_ZN11TouchGFXHAL19configureInterruptsEv>:
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    /* USER CODE BEGIN configureInterrupts */
    TouchGFXGeneratedHAL::configureInterrupts();
 8001a9e:	f001 bc0f 	b.w	80032c0 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>

08001aa2 <_ZN11TouchGFXHAL16enableInterruptsEv>:
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    /* USER CODE BEGIN enableInterrupts */
    TouchGFXGeneratedHAL::enableInterrupts();
 8001aa2:	f001 bde1 	b.w	8003668 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>

08001aa6 <_ZN11TouchGFXHAL17disableInterruptsEv>:
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    /* USER CODE BEGIN disableInterrupts */
    TouchGFXGeneratedHAL::disableInterrupts();
 8001aa6:	f001 bdd3 	b.w	8003650 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>
	...

08001aac <_ZN11TouchGFXHAL8endFrameEv>:
    refreshRequested = false;
    return HAL::beginFrame();
}

void TouchGFXHAL::endFrame()
{
 8001aac:	b510      	push	{r4, lr}
 8001aae:	4604      	mov	r4, r0
    TouchGFXGeneratedHAL::endFrame();
 8001ab0:	f001 fd96 	bl	80035e0 <_ZN20TouchGFXGeneratedHAL8endFrameEv>
    if (frameBufferUpdatedThisFrame)
 8001ab4:	f894 304b 	ldrb.w	r3, [r4, #75]	@ 0x4b
 8001ab8:	b113      	cbz	r3, 8001ac0 <_ZN11TouchGFXHAL8endFrameEv+0x14>
    {
        refreshRequested = true;
 8001aba:	4b02      	ldr	r3, [pc, #8]	@ (8001ac4 <_ZN11TouchGFXHAL8endFrameEv+0x18>)
 8001abc:	2201      	movs	r2, #1
 8001abe:	701a      	strb	r2, [r3, #0]
    }
}
 8001ac0:	bd10      	pop	{r4, pc}
 8001ac2:	bf00      	nop
 8001ac4:	2400000c 	.word	0x2400000c

08001ac8 <_ZN11TouchGFXHAL17setTFTFrameBufferEPt>:
    TouchGFXGeneratedHAL::setTFTFrameBuffer(address);
 8001ac8:	f001 bc02 	b.w	80032d0 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>

08001acc <_ZN8touchgfx3HAL15backPorchExitedEv>:
    virtual void backPorchExited()
 8001acc:	b510      	push	{r4, lr}
 8001ace:	4604      	mov	r4, r0
        swapFrameBuffers();
 8001ad0:	f010 f842 	bl	8011b58 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
        tick();
 8001ad4:	6823      	ldr	r3, [r4, #0]
 8001ad6:	4620      	mov	r0, r4
 8001ad8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
    }
 8001adc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        tick();
 8001ae0:	4718      	bx	r3

08001ae2 <_ZN20TouchGFXGeneratedHAL17unlockFrameBufferEv>:
     * @brief Unlocks the framebuffer.
     *
     * This specialization is marks DMA2D as un-reserved by the framwork.
     * @see HAL::unlockFrameBuffer
     */
    virtual void unlockFrameBuffer()
 8001ae2:	b510      	push	{r4, lr}
 8001ae4:	4604      	mov	r4, r0
    {
        HAL::unlockFrameBuffer();
 8001ae6:	f00f fbcd 	bl	8011284 <_ZN8touchgfx3HAL17unlockFrameBufferEv>
        dma.start();
 8001aea:	6860      	ldr	r0, [r4, #4]
 8001aec:	6803      	ldr	r3, [r0, #0]
    }
 8001aee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        dma.start();
 8001af2:	691b      	ldr	r3, [r3, #16]
 8001af4:	4718      	bx	r3

08001af6 <_ZN11TouchGFXHAL16flushFrameBufferEv>:
        HAL::flushFrameBuffer();
 8001af6:	f00f ba9a 	b.w	801102e <_ZN8touchgfx3HAL16flushFrameBufferEv>

08001afa <_ZN11TouchGFXHALD0Ev>:
 8001afa:	b510      	push	{r4, lr}
 8001afc:	4604      	mov	r4, r0
 8001afe:	217c      	movs	r1, #124	@ 0x7c
 8001b00:	f025 fcc5 	bl	802748e <_ZdlPvj>
 8001b04:	4620      	mov	r0, r4
 8001b06:	bd10      	pop	{r4, pc}

08001b08 <_ZN11TouchGFXHAL10beginFrameEv>:
    refreshRequested = false;
 8001b08:	4b02      	ldr	r3, [pc, #8]	@ (8001b14 <_ZN11TouchGFXHAL10beginFrameEv+0xc>)
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	701a      	strb	r2, [r3, #0]
    return HAL::beginFrame();
 8001b0e:	f00f bacb 	b.w	80110a8 <_ZN8touchgfx3HAL10beginFrameEv>
 8001b12:	bf00      	nop
 8001b14:	2400000c 	.word	0x2400000c

08001b18 <_ZN11TouchGFXHAL10initializeEv>:
{
 8001b18:	b538      	push	{r3, r4, r5, lr}
 8001b1a:	4604      	mov	r4, r0
    mcuInstr.init();
 8001b1c:	4d06      	ldr	r5, [pc, #24]	@ (8001b38 <_ZN11TouchGFXHAL10initializeEv+0x20>)
    TouchGFXGeneratedHAL::initialize();
 8001b1e:	f001 fbff 	bl	8003320 <_ZN20TouchGFXGeneratedHAL10initializeEv>
        lockDMAToPorch = enableLock;
 8001b22:	2300      	movs	r3, #0
    mcuInstr.init();
 8001b24:	4628      	mov	r0, r5
 8001b26:	f884 304a 	strb.w	r3, [r4, #74]	@ 0x4a
 8001b2a:	f7ff fe3b 	bl	80017a4 <_ZN8touchgfx22STM32H7Instrumentation4initEv>
        updateMCULoad = enabled;
 8001b2e:	2301      	movs	r3, #1
        mcuInstrumentation = mcuInstr;
 8001b30:	6125      	str	r5, [r4, #16]
        updateMCULoad = enabled;
 8001b32:	f884 3070 	strb.w	r3, [r4, #112]	@ 0x70
}
 8001b36:	bd38      	pop	{r3, r4, r5, pc}
 8001b38:	24000760 	.word	0x24000760

08001b3c <_ZN11TouchGFXHAL9taskEntryEv>:
    enableLCDControllerInterrupt();
 8001b3c:	6803      	ldr	r3, [r0, #0]
{
 8001b3e:	4604      	mov	r4, r0
 8001b40:	b507      	push	{r0, r1, r2, lr}
    enableLCDControllerInterrupt();
 8001b42:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001b46:	4798      	blx	r3
    enableInterrupts();
 8001b48:	6823      	ldr	r3, [r4, #0]
 8001b4a:	4620      	mov	r0, r4
 8001b4c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8001b4e:	4798      	blx	r3
    OSWrappers::waitForVSync();
 8001b50:	f000 ff5c 	bl	8002a0c <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
    backPorchExited();
 8001b54:	6823      	ldr	r3, [r4, #0]
 8001b56:	4620      	mov	r0, r4
 8001b58:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b5a:	4798      	blx	r3
    HAL_DSI_ShortWrite(&hdsi, LCD_OTM8009A_ID, DSI_DCS_SHORT_PKT_WRITE_P1, OTM8009A_CMD_DISPON, 0x00);
 8001b5c:	2100      	movs	r1, #0
 8001b5e:	2329      	movs	r3, #41	@ 0x29
 8001b60:	2215      	movs	r2, #21
 8001b62:	4805      	ldr	r0, [pc, #20]	@ (8001b78 <_ZN11TouchGFXHAL9taskEntryEv+0x3c>)
 8001b64:	9100      	str	r1, [sp, #0]
 8001b66:	f006 fe74 	bl	8008852 <HAL_DSI_ShortWrite>
        OSWrappers::waitForVSync();
 8001b6a:	f000 ff4f 	bl	8002a0c <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
        backPorchExited();
 8001b6e:	6823      	ldr	r3, [r4, #0]
 8001b70:	4620      	mov	r0, r4
 8001b72:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b74:	4798      	blx	r3
    for (;;)
 8001b76:	e7f8      	b.n	8001b6a <_ZN11TouchGFXHAL9taskEntryEv+0x2e>
 8001b78:	240005ec 	.word	0x240005ec

08001b7c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv>:
    virtual void noTouch();

    /** Perform the actual display orientation change. */
    virtual void performDisplayOrientationChange()
    {
        if (requestedOrientation != nativeDisplayOrientation)
 8001b7c:	f890 1034 	ldrb.w	r1, [r0, #52]	@ 0x34
        {
            if (DISPLAY_ROTATION == rotate0)
 8001b80:	4b0d      	ldr	r3, [pc, #52]	@ (8001bb8 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x3c>)
    virtual void performDisplayOrientationChange()
 8001b82:	b510      	push	{r4, lr}
        if (requestedOrientation != nativeDisplayOrientation)
 8001b84:	f890 4078 	ldrb.w	r4, [r0, #120]	@ 0x78
            if (DISPLAY_ROTATION == rotate0)
 8001b88:	781a      	ldrb	r2, [r3, #0]
        if (requestedOrientation != nativeDisplayOrientation)
 8001b8a:	428c      	cmp	r4, r1
 8001b8c:	d009      	beq.n	8001ba2 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x26>
            if (DISPLAY_ROTATION == rotate0)
 8001b8e:	b93a      	cbnz	r2, 8001ba0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x24>
            {
                const uint16_t tmp = DISPLAY_HEIGHT;
 8001b90:	490a      	ldr	r1, [pc, #40]	@ (8001bbc <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x40>)
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8001b92:	4a0b      	ldr	r2, [pc, #44]	@ (8001bc0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x44>)
                const uint16_t tmp = DISPLAY_HEIGHT;
 8001b94:	8808      	ldrh	r0, [r1, #0]
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8001b96:	8814      	ldrh	r4, [r2, #0]
                DISPLAY_WIDTH = tmp;
 8001b98:	8010      	strh	r0, [r2, #0]
                DISPLAY_ROTATION = rotate90;
 8001b9a:	2201      	movs	r2, #1
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8001b9c:	800c      	strh	r4, [r1, #0]
        else if (DISPLAY_ROTATION != rotate0)
        {
            const uint16_t tmp = DISPLAY_HEIGHT;
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
            DISPLAY_WIDTH = tmp;
            DISPLAY_ROTATION = rotate0;
 8001b9e:	701a      	strb	r2, [r3, #0]
        }
    }
 8001ba0:	bd10      	pop	{r4, pc}
        else if (DISPLAY_ROTATION != rotate0)
 8001ba2:	2a00      	cmp	r2, #0
 8001ba4:	d0fc      	beq.n	8001ba0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x24>
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8001ba6:	4a06      	ldr	r2, [pc, #24]	@ (8001bc0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x44>)
            const uint16_t tmp = DISPLAY_HEIGHT;
 8001ba8:	4904      	ldr	r1, [pc, #16]	@ (8001bbc <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x40>)
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8001baa:	8814      	ldrh	r4, [r2, #0]
            const uint16_t tmp = DISPLAY_HEIGHT;
 8001bac:	8808      	ldrh	r0, [r1, #0]
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8001bae:	800c      	strh	r4, [r1, #0]
            DISPLAY_WIDTH = tmp;
 8001bb0:	8010      	strh	r0, [r2, #0]
            DISPLAY_ROTATION = rotate0;
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	e7f3      	b.n	8001b9e <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x22>
 8001bb6:	bf00      	nop
 8001bb8:	24028e18 	.word	0x24028e18
 8001bbc:	24028e16 	.word	0x24028e16
 8001bc0:	24028e14 	.word	0x24028e14

08001bc4 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt>:
    virtual void setFrameBufferSize(uint16_t width, uint16_t height)
 8001bc4:	b508      	push	{r3, lr}
        assert(width >= DISPLAY_WIDTH && height >= DISPLAY_HEIGHT && "Framebuffer cannot be smaller than display");
 8001bc6:	4b09      	ldr	r3, [pc, #36]	@ (8001bec <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x28>)
 8001bc8:	881b      	ldrh	r3, [r3, #0]
 8001bca:	428b      	cmp	r3, r1
 8001bcc:	d803      	bhi.n	8001bd6 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x12>
 8001bce:	4b08      	ldr	r3, [pc, #32]	@ (8001bf0 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x2c>)
 8001bd0:	881b      	ldrh	r3, [r3, #0]
 8001bd2:	4293      	cmp	r3, r2
 8001bd4:	d905      	bls.n	8001be2 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x1e>
 8001bd6:	4b07      	ldr	r3, [pc, #28]	@ (8001bf4 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x30>)
 8001bd8:	219e      	movs	r1, #158	@ 0x9e
 8001bda:	4a07      	ldr	r2, [pc, #28]	@ (8001bf8 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x34>)
 8001bdc:	4807      	ldr	r0, [pc, #28]	@ (8001bfc <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x38>)
 8001bde:	f025 ffcf 	bl	8027b80 <__assert_func>
        FRAME_BUFFER_WIDTH = width;
 8001be2:	4b07      	ldr	r3, [pc, #28]	@ (8001c00 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x3c>)
 8001be4:	8019      	strh	r1, [r3, #0]
        FRAME_BUFFER_HEIGHT = height;
 8001be6:	4b07      	ldr	r3, [pc, #28]	@ (8001c04 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x40>)
 8001be8:	801a      	strh	r2, [r3, #0]
    }
 8001bea:	bd08      	pop	{r3, pc}
 8001bec:	24028e14 	.word	0x24028e14
 8001bf0:	24028e16 	.word	0x24028e16
 8001bf4:	08028d6c 	.word	0x08028d6c
 8001bf8:	08028dcf 	.word	0x08028dcf
 8001bfc:	08028e12 	.word	0x08028e12
 8001c00:	24028e1a 	.word	0x24028e1a
 8001c04:	24028e1c 	.word	0x24028e1c

08001c08 <_ZN8touchgfx3HAL11getBlitCapsEv>:
    virtual BlitOperations getBlitCaps()
 8001c08:	4603      	mov	r3, r0
        if (useDMAAcceleration)
 8001c0a:	f890 007a 	ldrb.w	r0, [r0, #122]	@ 0x7a
 8001c0e:	b118      	cbz	r0, 8001c18 <_ZN8touchgfx3HAL11getBlitCapsEv+0x10>
 8001c10:	6858      	ldr	r0, [r3, #4]
            return dma.getBlitCaps();
 8001c12:	6803      	ldr	r3, [r0, #0]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	4718      	bx	r3
    }
 8001c18:	4770      	bx	lr
	...

08001c1c <_ZN11TouchGFXHAL28setFrameBufferStartAddressesEPvS0_S0_>:
{
 8001c1c:	b570      	push	{r4, r5, r6, lr}
 8001c1e:	460d      	mov	r5, r1
 8001c20:	4619      	mov	r1, r3
    currFbBase = (uint16_t*)frameBuffer;
 8001c22:	4b0b      	ldr	r3, [pc, #44]	@ (8001c50 <_ZN11TouchGFXHAL28setFrameBufferStartAddressesEPvS0_S0_+0x34>)
 8001c24:	601d      	str	r5, [r3, #0]
        assert(frameBuffer != 0 && "A framebuffer address must be set");
 8001c26:	b935      	cbnz	r5, 8001c36 <_ZN11TouchGFXHAL28setFrameBufferStartAddressesEPvS0_S0_+0x1a>
 8001c28:	4b0a      	ldr	r3, [pc, #40]	@ (8001c54 <_ZN11TouchGFXHAL28setFrameBufferStartAddressesEPvS0_S0_+0x38>)
 8001c2a:	f240 21d2 	movw	r1, #722	@ 0x2d2
 8001c2e:	4a0a      	ldr	r2, [pc, #40]	@ (8001c58 <_ZN11TouchGFXHAL28setFrameBufferStartAddressesEPvS0_S0_+0x3c>)
 8001c30:	480a      	ldr	r0, [pc, #40]	@ (8001c5c <_ZN11TouchGFXHAL28setFrameBufferStartAddressesEPvS0_S0_+0x40>)
 8001c32:	f025 ffa5 	bl	8027b80 <__assert_func>
        frameBuffer1 = reinterpret_cast<uint16_t*>(doubleBuffer);
 8001c36:	e9c0 520f 	strd	r5, r2, [r0, #60]	@ 0x3c
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
 8001c3a:	3a00      	subs	r2, #0
 8001c3c:	4b08      	ldr	r3, [pc, #32]	@ (8001c60 <_ZN11TouchGFXHAL28setFrameBufferStartAddressesEPvS0_S0_+0x44>)
 8001c3e:	bf18      	it	ne
 8001c40:	2201      	movne	r2, #1
 8001c42:	701a      	strb	r2, [r3, #0]
        setAnimationStorage(animationStorage);
 8001c44:	6803      	ldr	r3, [r0, #0]
}
 8001c46:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8001c4a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001c4e:	4718      	bx	r3
 8001c50:	24000770 	.word	0x24000770
 8001c54:	08028e65 	.word	0x08028e65
 8001c58:	08028e9d 	.word	0x08028e9d
 8001c5c:	08028e12 	.word	0x08028e12
 8001c60:	24028e1e 	.word	0x24028e1e

08001c64 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>:
          lcdRef(display),
 8001c64:	e9c0 1201 	strd	r1, r2, [r0, #4]
          touchController(touchCtrl),
 8001c68:	60c3      	str	r3, [r0, #12]
          refreshStrategy(REFRESH_STRATEGY_DEFAULT),
 8001c6a:	f44f 7280 	mov.w	r2, #256	@ 0x100
          mcuInstrumentation(0),
 8001c6e:	2300      	movs	r3, #0
          auxiliaryLCD(0),
 8001c70:	e9c0 2312 	strd	r2, r3, [r0, #72]	@ 0x48
          touchSampleRate(1),
 8001c74:	4a1d      	ldr	r2, [pc, #116]	@ (8001cec <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x88>)
              startY(0),
              downX(0),
              downY(0),
              tickCount(0),
              velocityX(0),
              velocityY(0),
 8001c76:	8503      	strh	r3, [r0, #40]	@ 0x28
              inProgress(false)
 8001c78:	f880 302a 	strb.w	r3, [r0, #42]	@ 0x2a
    };

public:
    /** Default constructor. Does nothing. */
    Gestures()
        : drag(), listener(0), dragThresholdValue(0)
 8001c7c:	62c3      	str	r3, [r0, #44]	@ 0x2c
 8001c7e:	8603      	strh	r3, [r0, #48]	@ 0x30
          useAuxiliaryLCD(false),
 8001c80:	f880 3058 	strb.w	r3, [r0, #88]	@ 0x58
          lastY(0),
 8001c84:	6643      	str	r3, [r0, #100]	@ 0x64
          updateMCULoad(0),
 8001c86:	f880 3070 	strb.w	r3, [r0, #112]	@ 0x70
          cc_begin(0),
 8001c8a:	6743      	str	r3, [r0, #116]	@ 0x74
TouchGFXHAL::TouchGFXHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height)
 8001c8c:	b570      	push	{r4, r5, r6, lr}
          vSyncCompensationEnabled(false),
 8001c8e:	e9c0 231a 	strd	r2, r3, [r0, #104]	@ 0x68
                           height)
 8001c92:	f8bd 5010 	ldrh.w	r5, [sp, #16]
          requestedOrientation(ORIENTATION_LANDSCAPE),
 8001c96:	4a16      	ldr	r2, [pc, #88]	@ (8001cf0 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x8c>)
TouchGFXHAL::TouchGFXHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height)
 8001c98:	f8bd 6014 	ldrh.w	r6, [sp, #20]
                           height)
 8001c9c:	3520      	adds	r5, #32
          buttonController(0),
 8001c9e:	e9c0 3304 	strd	r3, r3, [r0, #16]
            : startX(0),
 8001ca2:	e9c0 3306 	strd	r3, r3, [r0, #24]
              tickCount(0),
 8001ca6:	e9c0 3308 	strd	r3, r3, [r0, #32]
          frameBuffer0(0),
 8001caa:	e9c0 330e 	strd	r3, r3, [r0, #56]	@ 0x38
          frameBuffer2(0),
 8001cae:	e9c0 3310 	strd	r3, r3, [r0, #64]	@ 0x40
class Rect
{
public:
    /** Default constructor. Resulting in an empty Rect with coordinates 0,0. */
    Rect()
        : x(0), y(0), width(0), height(0)
 8001cb2:	e9c0 3314 	strd	r3, r3, [r0, #80]	@ 0x50
          lastX(0),
 8001cb6:	e9c0 3317 	strd	r3, r3, [r0, #92]	@ 0x5c
          requestedOrientation(ORIENTATION_LANDSCAPE),
 8001cba:	6782      	str	r2, [r0, #120]	@ 0x78
 8001cbc:	b2ad      	uxth	r5, r5
        instance = this;
 8001cbe:	4a0d      	ldr	r2, [pc, #52]	@ (8001cf4 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x90>)
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 8001cc0:	42b5      	cmp	r5, r6
        instance = this;
 8001cc2:	6010      	str	r0, [r2, #0]
        FRAME_BUFFER_WIDTH = DISPLAY_WIDTH = width;
 8001cc4:	4a0c      	ldr	r2, [pc, #48]	@ (8001cf8 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x94>)
 8001cc6:	8015      	strh	r5, [r2, #0]
 8001cc8:	4a0c      	ldr	r2, [pc, #48]	@ (8001cfc <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x98>)
 8001cca:	8015      	strh	r5, [r2, #0]
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 8001ccc:	bf28      	it	cs
 8001cce:	2500      	movcs	r5, #0
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT = height;
 8001cd0:	4a0b      	ldr	r2, [pc, #44]	@ (8001d00 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x9c>)
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 8001cd2:	bf38      	it	cc
 8001cd4:	2501      	movcc	r5, #1
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT = height;
 8001cd6:	8016      	strh	r6, [r2, #0]
 8001cd8:	4a0a      	ldr	r2, [pc, #40]	@ (8001d04 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0xa0>)
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 8001cda:	f880 5034 	strb.w	r5, [r0, #52]	@ 0x34
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT = height;
 8001cde:	8016      	strh	r6, [r2, #0]
        DISPLAY_ROTATION = rotate0;
 8001ce0:	4a09      	ldr	r2, [pc, #36]	@ (8001d08 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0xa4>)
 8001ce2:	7013      	strb	r3, [r2, #0]
 8001ce4:	4b09      	ldr	r3, [pc, #36]	@ (8001d0c <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0xa8>)
 8001ce6:	6003      	str	r3, [r0, #0]
}
 8001ce8:	bd70      	pop	{r4, r5, r6, pc}
 8001cea:	bf00      	nop
 8001cec:	01000001 	.word	0x01000001
 8001cf0:	01010000 	.word	0x01010000
 8001cf4:	24028e20 	.word	0x24028e20
 8001cf8:	24028e14 	.word	0x24028e14
 8001cfc:	24028e1a 	.word	0x24028e1a
 8001d00:	24028e16 	.word	0x24028e16
 8001d04:	24028e1c 	.word	0x24028e1c
 8001d08:	24028e18 	.word	0x24028e18
 8001d0c:	08028ef4 	.word	0x08028ef4

08001d10 <DSI_IO_Write>:
      */
    int32_t DSI_IO_Write(uint16_t ChannelNbr, uint16_t Reg, uint8_t* pData, uint16_t Size)
    {
        int32_t ret = BSP_ERROR_NONE;

        if (Size <= 1U)
 8001d10:	2b01      	cmp	r3, #1
    {
 8001d12:	b513      	push	{r0, r1, r4, lr}
        if (Size <= 1U)
 8001d14:	d80e      	bhi.n	8001d34 <DSI_IO_Write+0x24>
        {
            if (HAL_DSI_ShortWrite(&hdsi, ChannelNbr, DSI_DCS_SHORT_PKT_WRITE_P1, Reg, (uint32_t)pData[Size]) != HAL_OK)
 8001d16:	5cd3      	ldrb	r3, [r2, r3]
 8001d18:	2215      	movs	r2, #21
 8001d1a:	9300      	str	r3, [sp, #0]
 8001d1c:	460b      	mov	r3, r1
 8001d1e:	4601      	mov	r1, r0
 8001d20:	4808      	ldr	r0, [pc, #32]	@ (8001d44 <DSI_IO_Write+0x34>)
 8001d22:	f006 fd96 	bl	8008852 <HAL_DSI_ShortWrite>
 8001d26:	b118      	cbz	r0, 8001d30 <DSI_IO_Write+0x20>
            {
                ret = BSP_ERROR_BUS_FAILURE;
 8001d28:	f06f 0007 	mvn.w	r0, #7
                ret = BSP_ERROR_BUS_FAILURE;
            }
        }

        return ret;
    }
 8001d2c:	b002      	add	sp, #8
 8001d2e:	bd10      	pop	{r4, pc}
        int32_t ret = BSP_ERROR_NONE;
 8001d30:	2000      	movs	r0, #0
 8001d32:	e7fb      	b.n	8001d2c <DSI_IO_Write+0x1c>
            if (HAL_DSI_LongWrite(&hdsi, ChannelNbr, DSI_DCS_LONG_PKT_WRITE, Size, (uint32_t)Reg, pData) != HAL_OK)
 8001d34:	e9cd 1200 	strd	r1, r2, [sp]
 8001d38:	4601      	mov	r1, r0
 8001d3a:	2239      	movs	r2, #57	@ 0x39
 8001d3c:	4801      	ldr	r0, [pc, #4]	@ (8001d44 <DSI_IO_Write+0x34>)
 8001d3e:	f006 fd99 	bl	8008874 <HAL_DSI_LongWrite>
 8001d42:	e7f0      	b.n	8001d26 <DSI_IO_Write+0x16>
 8001d44:	240005ec 	.word	0x240005ec

08001d48 <DSI_IO_Read>:
      * @param  pData pointer to a buffer to store the payload of a read back operation.
      * @param  Size  Data size to be read (in byte).
      * @retval BSP status
      */
    int32_t DSI_IO_Read(uint16_t ChannelNbr, uint16_t Reg, uint8_t* pData, uint16_t Size)
    {
 8001d48:	b51f      	push	{r0, r1, r2, r3, r4, lr}
        int32_t ret = BSP_ERROR_NONE;

        if (HAL_DSI_Read(&hdsi, ChannelNbr, pData, Size, DSI_DCS_SHORT_PKT_READ, Reg, pData) != HAL_OK)
 8001d4a:	e9cd 1201 	strd	r1, r2, [sp, #4]
 8001d4e:	2106      	movs	r1, #6
 8001d50:	9100      	str	r1, [sp, #0]
 8001d52:	4601      	mov	r1, r0
 8001d54:	4805      	ldr	r0, [pc, #20]	@ (8001d6c <DSI_IO_Read+0x24>)
 8001d56:	f006 fded 	bl	8008934 <HAL_DSI_Read>
        int32_t ret = BSP_ERROR_NONE;
 8001d5a:	2800      	cmp	r0, #0
        {
            ret = BSP_ERROR_BUS_FAILURE;
        }

        return ret;
    }
 8001d5c:	bf14      	ite	ne
 8001d5e:	f06f 0007 	mvnne.w	r0, #7
 8001d62:	2000      	moveq	r0, #0
 8001d64:	b005      	add	sp, #20
 8001d66:	f85d fb04 	ldr.w	pc, [sp], #4
 8001d6a:	bf00      	nop
 8001d6c:	240005ec 	.word	0x240005ec

08001d70 <LCD_ReqTear>:

    /**
     * Request TE at scanline.
     */
    void LCD_ReqTear(void)
    {
 8001d70:	b51f      	push	{r0, r1, r2, r3, r4, lr}
        uint8_t ScanLineParams[2];
        uint16_t scanline = 500;

        ScanLineParams[0] = scanline >> 8;
 8001d72:	f24f 4301 	movw	r3, #62465	@ 0xf401
        ScanLineParams[1] = scanline & 0x00FF;

        HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 2, 0x44, ScanLineParams);
 8001d76:	4c0b      	ldr	r4, [pc, #44]	@ (8001da4 <LCD_ReqTear+0x34>)
 8001d78:	2239      	movs	r2, #57	@ 0x39
 8001d7a:	2100      	movs	r1, #0
        ScanLineParams[0] = scanline >> 8;
 8001d7c:	f8ad 300c 	strh.w	r3, [sp, #12]
        HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 2, 0x44, ScanLineParams);
 8001d80:	ab03      	add	r3, sp, #12
 8001d82:	4620      	mov	r0, r4
 8001d84:	9301      	str	r3, [sp, #4]
 8001d86:	2344      	movs	r3, #68	@ 0x44
 8001d88:	9300      	str	r3, [sp, #0]
 8001d8a:	2302      	movs	r3, #2
 8001d8c:	f006 fd72 	bl	8008874 <HAL_DSI_LongWrite>
        HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P1, OTM8009A_CMD_TEEON, 0x00);
 8001d90:	2100      	movs	r1, #0
 8001d92:	2335      	movs	r3, #53	@ 0x35
 8001d94:	2215      	movs	r2, #21
 8001d96:	4620      	mov	r0, r4
 8001d98:	9100      	str	r1, [sp, #0]
 8001d9a:	f006 fd5a 	bl	8008852 <HAL_DSI_ShortWrite>
    }
 8001d9e:	b004      	add	sp, #16
 8001da0:	bd10      	pop	{r4, pc}
 8001da2:	bf00      	nop
 8001da4:	240005ec 	.word	0x240005ec

08001da8 <_ZN11TouchGFXHAL28enableLCDControllerInterruptEv>:
{
 8001da8:	b508      	push	{r3, lr}
    LCD_ReqTear();
 8001daa:	f7ff ffe1 	bl	8001d70 <LCD_ReqTear>
    __HAL_DSI_CLEAR_FLAG(&hdsi, DSI_IT_ER);
 8001dae:	4b0c      	ldr	r3, [pc, #48]	@ (8001de0 <_ZN11TouchGFXHAL28enableLCDControllerInterruptEv+0x38>)
 8001db0:	2202      	movs	r2, #2
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f8c3 2410 	str.w	r2, [r3, #1040]	@ 0x410
    __HAL_DSI_CLEAR_FLAG(&hdsi, DSI_IT_TE);
 8001db8:	2201      	movs	r2, #1
 8001dba:	f8c3 2410 	str.w	r2, [r3, #1040]	@ 0x410
    __HAL_DSI_ENABLE_IT(&hdsi, DSI_IT_TE);
 8001dbe:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 8001dc2:	f042 0201 	orr.w	r2, r2, #1
 8001dc6:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408
    __HAL_DSI_ENABLE_IT(&hdsi, DSI_IT_ER);
 8001dca:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 8001dce:	f042 0202 	orr.w	r2, r2, #2
 8001dd2:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408
    LTDC->IER = 3; /* Enable line and FIFO underrun interrupts */
 8001dd6:	2203      	movs	r2, #3
 8001dd8:	4b02      	ldr	r3, [pc, #8]	@ (8001de4 <_ZN11TouchGFXHAL28enableLCDControllerInterruptEv+0x3c>)
 8001dda:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8001ddc:	bd08      	pop	{r3, pc}
 8001dde:	bf00      	nop
 8001de0:	240005ec 	.word	0x240005ec
 8001de4:	50001000 	.word	0x50001000

08001de8 <LCD_ReqEnable>:
    void LCD_ReqEnable(void)
    {
        static bool firstRefreshRequested = false;

        // Enable DSI interface once the very first framebuffer is ready for display
        if (!firstRefreshRequested)
 8001de8:	4b07      	ldr	r3, [pc, #28]	@ (8001e08 <LCD_ReqEnable+0x20>)
    {
 8001dea:	b507      	push	{r0, r1, r2, lr}
        if (!firstRefreshRequested)
 8001dec:	7819      	ldrb	r1, [r3, #0]
 8001dee:	b939      	cbnz	r1, 8001e00 <LCD_ReqEnable+0x18>
        {
            firstRefreshRequested = true;
 8001df0:	2201      	movs	r2, #1

            /* Send Display on DCS Command to display */
            HAL_DSI_ShortWrite(&(hdsi),
 8001df2:	4806      	ldr	r0, [pc, #24]	@ (8001e0c <LCD_ReqEnable+0x24>)
            firstRefreshRequested = true;
 8001df4:	701a      	strb	r2, [r3, #0]
            HAL_DSI_ShortWrite(&(hdsi),
 8001df6:	2329      	movs	r3, #41	@ 0x29
 8001df8:	2215      	movs	r2, #21
 8001dfa:	9100      	str	r1, [sp, #0]
 8001dfc:	f006 fd29 	bl	8008852 <HAL_DSI_ShortWrite>
                               0,
                               DSI_DCS_SHORT_PKT_WRITE_P1,
                               OTM8009A_CMD_DISPON,
                               0x00);
        }
    }
 8001e00:	b003      	add	sp, #12
 8001e02:	f85d fb04 	ldr.w	pc, [sp], #4
 8001e06:	bf00      	nop
 8001e08:	2400075c 	.word	0x2400075c
 8001e0c:	240005ec 	.word	0x240005ec

08001e10 <LCD_SetUpdateRegionLeft>:
        HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 4, OTM8009A_CMD_CASET, pCols[idx]);
    }

    void LCD_SetUpdateRegionLeft()
    {
        HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 4, OTM8009A_CMD_CASET, pColLeft);
 8001e10:	4b06      	ldr	r3, [pc, #24]	@ (8001e2c <LCD_SetUpdateRegionLeft+0x1c>)
    {
 8001e12:	b507      	push	{r0, r1, r2, lr}
        HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 4, OTM8009A_CMD_CASET, pColLeft);
 8001e14:	9301      	str	r3, [sp, #4]
 8001e16:	232a      	movs	r3, #42	@ 0x2a
 8001e18:	2239      	movs	r2, #57	@ 0x39
 8001e1a:	2100      	movs	r1, #0
 8001e1c:	9300      	str	r3, [sp, #0]
 8001e1e:	2304      	movs	r3, #4
 8001e20:	4803      	ldr	r0, [pc, #12]	@ (8001e30 <LCD_SetUpdateRegionLeft+0x20>)
 8001e22:	f006 fd27 	bl	8008874 <HAL_DSI_LongWrite>
    }
 8001e26:	b003      	add	sp, #12
 8001e28:	f85d fb04 	ldr.w	pc, [sp], #4
 8001e2c:	24000008 	.word	0x24000008
 8001e30:	240005ec 	.word	0x240005ec

08001e34 <LCD_SetUpdateRegionRight>:

    void LCD_SetUpdateRegionRight()
    {
        HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 4, OTM8009A_CMD_CASET, pColRight);
 8001e34:	4b06      	ldr	r3, [pc, #24]	@ (8001e50 <LCD_SetUpdateRegionRight+0x1c>)
    {
 8001e36:	b507      	push	{r0, r1, r2, lr}
        HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 4, OTM8009A_CMD_CASET, pColRight);
 8001e38:	9301      	str	r3, [sp, #4]
 8001e3a:	232a      	movs	r3, #42	@ 0x2a
 8001e3c:	2239      	movs	r2, #57	@ 0x39
 8001e3e:	2100      	movs	r1, #0
 8001e40:	9300      	str	r3, [sp, #0]
 8001e42:	2304      	movs	r3, #4
 8001e44:	4803      	ldr	r0, [pc, #12]	@ (8001e54 <LCD_SetUpdateRegionRight+0x20>)
 8001e46:	f006 fd15 	bl	8008874 <HAL_DSI_LongWrite>
    }
 8001e4a:	b003      	add	sp, #12
 8001e4c:	f85d fb04 	ldr.w	pc, [sp], #4
 8001e50:	24000004 	.word	0x24000004
 8001e54:	240005ec 	.word	0x240005ec

08001e58 <HAL_DSI_TearingEffectCallback>:
                           0, DSI_DCS_SHORT_PKT_WRITE_P1,
                           OTM8009A_CMD_WRDISBV, (uint16_t)(value * 255) / 100);
    }

    void HAL_DSI_TearingEffectCallback(DSI_HandleTypeDef* hdsi)
    {
 8001e58:	b538      	push	{r3, r4, r5, lr}
        return instance;
 8001e5a:	4d14      	ldr	r5, [pc, #80]	@ (8001eac <HAL_DSI_TearingEffectCallback+0x54>)
 8001e5c:	4604      	mov	r4, r0
        GPIO::set(GPIO::VSYNC_FREQ);
 8001e5e:	2000      	movs	r0, #0
 8001e60:	f7ff fd46 	bl	80018f0 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 8001e64:	682a      	ldr	r2, [r5, #0]
        vSyncCnt++;
 8001e66:	f892 306a 	ldrb.w	r3, [r2, #106]	@ 0x6a
 8001e6a:	3301      	adds	r3, #1
 8001e6c:	f882 306a 	strb.w	r3, [r2, #106]	@ 0x6a

        HAL::getInstance()->vSync();
        OSWrappers::signalVSync();
 8001e70:	f000 fdc0 	bl	80029f4 <_ZN8touchgfx10OSWrappers11signalVSyncEv>

        // In single buffering, only require that the system waits for display update to be finished if we
        // actually intend to update the display in this frame.
        HAL::getInstance()->lockDMAToFrontPorch(refreshRequested);
 8001e74:	4b0e      	ldr	r3, [pc, #56]	@ (8001eb0 <HAL_DSI_TearingEffectCallback+0x58>)
        lockDMAToPorch = enableLock;
 8001e76:	682a      	ldr	r2, [r5, #0]
 8001e78:	7819      	ldrb	r1, [r3, #0]

        if (refreshRequested && !displayRefreshing)
 8001e7a:	781b      	ldrb	r3, [r3, #0]
 8001e7c:	f882 104a 	strb.w	r1, [r2, #74]	@ 0x4a
 8001e80:	b173      	cbz	r3, 8001ea0 <HAL_DSI_TearingEffectCallback+0x48>
 8001e82:	4d0c      	ldr	r5, [pc, #48]	@ (8001eb4 <HAL_DSI_TearingEffectCallback+0x5c>)
 8001e84:	782b      	ldrb	r3, [r5, #0]
 8001e86:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8001e8a:	b94b      	cbnz	r3, 8001ea0 <HAL_DSI_TearingEffectCallback+0x48>
        {

            // Update region 0 = first area of display (First quarter for 16bpp, first half for 24bpp)
            updateRegion = 0;
 8001e8c:	4b0a      	ldr	r3, [pc, #40]	@ (8001eb8 <HAL_DSI_TearingEffectCallback+0x60>)
 8001e8e:	601a      	str	r2, [r3, #0]
            LCD_SetUpdateRegionLeft();
 8001e90:	f7ff ffbe 	bl	8001e10 <LCD_SetUpdateRegionLeft>

            // Transfer a quarter screen of pixel data.
            HAL_DSI_Refresh(hdsi);
 8001e94:	4620      	mov	r0, r4
 8001e96:	f006 fccc 	bl	8008832 <HAL_DSI_Refresh>
            displayRefreshing = true;
 8001e9a:	2301      	movs	r3, #1
 8001e9c:	702b      	strb	r3, [r5, #0]
        }
        else
        {
            GPIO::clear(GPIO::VSYNC_FREQ);
        }
    }
 8001e9e:	bd38      	pop	{r3, r4, r5, pc}
            GPIO::clear(GPIO::VSYNC_FREQ);
 8001ea0:	2000      	movs	r0, #0
    }
 8001ea2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
            GPIO::clear(GPIO::VSYNC_FREQ);
 8001ea6:	f7ff bd53 	b.w	8001950 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 8001eaa:	bf00      	nop
 8001eac:	24028e20 	.word	0x24028e20
 8001eb0:	2400000c 	.word	0x2400000c
 8001eb4:	24000778 	.word	0x24000778
 8001eb8:	24000774 	.word	0x24000774

08001ebc <HAL_DSI_EndOfRefreshCallback>:

    void HAL_DSI_EndOfRefreshCallback(DSI_HandleTypeDef* hdsi)
    {
 8001ebc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
        if (displayRefreshing)
 8001ec0:	4e48      	ldr	r6, [pc, #288]	@ (8001fe4 <HAL_DSI_EndOfRefreshCallback+0x128>)
    {
 8001ec2:	b085      	sub	sp, #20
 8001ec4:	4604      	mov	r4, r0
        if (displayRefreshing)
 8001ec6:	7833      	ldrb	r3, [r6, #0]
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	f000 8088 	beq.w	8001fde <HAL_DSI_EndOfRefreshCallback+0x122>
        {
            if (updateRegion == 0)
 8001ece:	f8df 9138 	ldr.w	r9, [pc, #312]	@ 8002008 <HAL_DSI_EndOfRefreshCallback+0x14c>
 8001ed2:	f8df 8138 	ldr.w	r8, [pc, #312]	@ 800200c <HAL_DSI_EndOfRefreshCallback+0x150>
 8001ed6:	f8d9 5000 	ldr.w	r5, [r9]
 8001eda:	4f43      	ldr	r7, [pc, #268]	@ (8001fe8 <HAL_DSI_EndOfRefreshCallback+0x12c>)
 8001edc:	2d00      	cmp	r5, #0
 8001ede:	d13e      	bne.n	8001f5e <HAL_DSI_EndOfRefreshCallback+0xa2>
            {
                HAL_Delay(1);
 8001ee0:	2001      	movs	r0, #1
                // If we transferred the left half, also transfer right half.
                __HAL_DSI_WRAPPER_DISABLE(hdsi);
                LTDC_LAYER(&hltdc, 0)->CFBAR = ((uint32_t)currFbBase) + 400 * 3;
                uint16_t ADJUSTED_WIDTH = 432; //64-byte aligned width
                uint16_t REAL_WIDTH = 400; //we only actually have this amount of pixels on display
                LTDC->AWCR = ((ADJUSTED_WIDTH + 2) << 16) | 0x1E2;
 8001ee2:	4e42      	ldr	r6, [pc, #264]	@ (8001fec <HAL_DSI_EndOfRefreshCallback+0x130>)
                HAL_Delay(1);
 8001ee4:	f005 ff3c 	bl	8007d60 <HAL_Delay>
                __HAL_DSI_WRAPPER_DISABLE(hdsi);
 8001ee8:	6823      	ldr	r3, [r4, #0]
 8001eea:	9500      	str	r5, [sp, #0]
 8001eec:	f8d3 2404 	ldr.w	r2, [r3, #1028]	@ 0x404
                LTDC_LAYER(&hltdc, 0)->CFBAR = ((uint32_t)currFbBase) + 400 * 3;
 8001ef0:	6838      	ldr	r0, [r7, #0]
                __HAL_DSI_WRAPPER_DISABLE(hdsi);
 8001ef2:	f022 0208 	bic.w	r2, r2, #8
                LTDC_LAYER(&hltdc, 0)->CFBAR = ((uint32_t)currFbBase) + 400 * 3;
 8001ef6:	f500 6096 	add.w	r0, r0, #1200	@ 0x4b0
                __HAL_DSI_WRAPPER_DISABLE(hdsi);
 8001efa:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404
 8001efe:	f8d3 2404 	ldr.w	r2, [r3, #1028]	@ 0x404
 8001f02:	f002 0208 	and.w	r2, r2, #8
 8001f06:	9200      	str	r2, [sp, #0]
 8001f08:	9a00      	ldr	r2, [sp, #0]
                LTDC_LAYER(&hltdc, 0)->CFBAR = ((uint32_t)currFbBase) + 400 * 3;
 8001f0a:	f8d8 2000 	ldr.w	r2, [r8]
 8001f0e:	f8c2 00ac 	str.w	r0, [r2, #172]	@ 0xac
                LTDC->AWCR = ((ADJUSTED_WIDTH + 2) << 16) | 0x1E2;
 8001f12:	4837      	ldr	r0, [pc, #220]	@ (8001ff0 <HAL_DSI_EndOfRefreshCallback+0x134>)
 8001f14:	6106      	str	r6, [r0, #16]
                LTDC->TWCR = ((REAL_WIDTH + 2 + 1 - 1) << 16) | 0x1E3;
 8001f16:	4e37      	ldr	r6, [pc, #220]	@ (8001ff4 <HAL_DSI_EndOfRefreshCallback+0x138>)
 8001f18:	6146      	str	r6, [r0, #20]
                LTDC_LAYER(&hltdc, 0)->WHPCR = ((REAL_WIDTH + 2) << 16) | 3;
 8001f1a:	4837      	ldr	r0, [pc, #220]	@ (8001ff8 <HAL_DSI_EndOfRefreshCallback+0x13c>)
 8001f1c:	f8c2 0088 	str.w	r0, [r2, #136]	@ 0x88
                LTDC_LAYER(&hltdc, 0)->CFBLR = ((832 * 3) << 16) | ((REAL_WIDTH) * 3 + 3);
 8001f20:	4836      	ldr	r0, [pc, #216]	@ (8001ffc <HAL_DSI_EndOfRefreshCallback+0x140>)
 8001f22:	f8c2 00b0 	str.w	r0, [r2, #176]	@ 0xb0
                __HAL_LTDC_RELOAD_IMMEDIATE_CONFIG(&hltdc);
 8001f26:	6a51      	ldr	r1, [r2, #36]	@ 0x24
 8001f28:	f041 0101 	orr.w	r1, r1, #1
 8001f2c:	6251      	str	r1, [r2, #36]	@ 0x24
                __HAL_DSI_WRAPPER_ENABLE(hdsi);
 8001f2e:	9501      	str	r5, [sp, #4]
 8001f30:	f8d3 2404 	ldr.w	r2, [r3, #1028]	@ 0x404
 8001f34:	f042 0208 	orr.w	r2, r2, #8
 8001f38:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404
 8001f3c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 8001f40:	f003 0308 	and.w	r3, r3, #8
 8001f44:	9301      	str	r3, [sp, #4]
 8001f46:	9b01      	ldr	r3, [sp, #4]

                LCD_SetUpdateRegionRight(); //Set display column to 448-799
 8001f48:	f7ff ff74 	bl	8001e34 <LCD_SetUpdateRegionRight>
                updateRegion = 1;
 8001f4c:	2301      	movs	r3, #1

                HAL_DSI_Refresh(hdsi);
 8001f4e:	4620      	mov	r0, r4
                updateRegion = 1;
 8001f50:	f8c9 3000 	str.w	r3, [r9]
                    // Signal to the framework that display update has finished.
                    HAL::getInstance()->frontPorchEntered();
                }
            }
        }
    }
 8001f54:	b005      	add	sp, #20
 8001f56:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
                HAL_DSI_Refresh(hdsi);
 8001f5a:	f006 bc6a 	b.w	8008832 <HAL_DSI_Refresh>
                __HAL_DSI_WRAPPER_DISABLE(hdsi);
 8001f5e:	6803      	ldr	r3, [r0, #0]
 8001f60:	2500      	movs	r5, #0
                LTDC_LAYER(&hltdc, 0)->CFBAR = (uint32_t)currFbBase;
 8001f62:	6838      	ldr	r0, [r7, #0]
                __HAL_DSI_WRAPPER_DISABLE(hdsi);
 8001f64:	9502      	str	r5, [sp, #8]
 8001f66:	f8d3 2404 	ldr.w	r2, [r3, #1028]	@ 0x404
                LTDC->AWCR = ((WIDTH + 2) << 16) | 0x1E2;
 8001f6a:	4c25      	ldr	r4, [pc, #148]	@ (8002000 <HAL_DSI_EndOfRefreshCallback+0x144>)
                __HAL_DSI_WRAPPER_DISABLE(hdsi);
 8001f6c:	f022 0208 	bic.w	r2, r2, #8
 8001f70:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404
 8001f74:	f8d3 2404 	ldr.w	r2, [r3, #1028]	@ 0x404
 8001f78:	f002 0208 	and.w	r2, r2, #8
 8001f7c:	9202      	str	r2, [sp, #8]
 8001f7e:	9a02      	ldr	r2, [sp, #8]
                LTDC_LAYER(&hltdc, 0)->CFBAR = (uint32_t)currFbBase;
 8001f80:	f8d8 2000 	ldr.w	r2, [r8]
 8001f84:	f8c2 00ac 	str.w	r0, [r2, #172]	@ 0xac
                LTDC->AWCR = ((WIDTH + 2) << 16) | 0x1E2;
 8001f88:	4819      	ldr	r0, [pc, #100]	@ (8001ff0 <HAL_DSI_EndOfRefreshCallback+0x134>)
 8001f8a:	6104      	str	r4, [r0, #16]
                LTDC->TWCR = ((WIDTH + 2 + 1) << 16) | 0x1E3;
 8001f8c:	f104 1401 	add.w	r4, r4, #65537	@ 0x10001
 8001f90:	6144      	str	r4, [r0, #20]
                LTDC_LAYER(&hltdc, 0)->WHPCR = ((WIDTH + 2) << 16) | 3;
 8001f92:	4819      	ldr	r0, [pc, #100]	@ (8001ff8 <HAL_DSI_EndOfRefreshCallback+0x13c>)
 8001f94:	f8c2 0088 	str.w	r0, [r2, #136]	@ 0x88
                LTDC_LAYER(&hltdc, 0)->CFBLR = (((832 * 3) << 16) | ((WIDTH * 3) + 3));
 8001f98:	4818      	ldr	r0, [pc, #96]	@ (8001ffc <HAL_DSI_EndOfRefreshCallback+0x140>)
 8001f9a:	f8c2 00b0 	str.w	r0, [r2, #176]	@ 0xb0
                GPIO::clear(GPIO::VSYNC_FREQ);
 8001f9e:	4628      	mov	r0, r5
                __HAL_LTDC_RELOAD_IMMEDIATE_CONFIG(&hltdc);
 8001fa0:	6a51      	ldr	r1, [r2, #36]	@ 0x24
 8001fa2:	f041 0101 	orr.w	r1, r1, #1
 8001fa6:	6251      	str	r1, [r2, #36]	@ 0x24
                __HAL_DSI_WRAPPER_ENABLE(hdsi);
 8001fa8:	9503      	str	r5, [sp, #12]
 8001faa:	f8d3 2404 	ldr.w	r2, [r3, #1028]	@ 0x404
 8001fae:	f042 0208 	orr.w	r2, r2, #8
 8001fb2:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404
 8001fb6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 8001fba:	f003 0308 	and.w	r3, r3, #8
 8001fbe:	9303      	str	r3, [sp, #12]
 8001fc0:	9b03      	ldr	r3, [sp, #12]
                GPIO::clear(GPIO::VSYNC_FREQ);
 8001fc2:	f7ff fcc5 	bl	8001950 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
                LCD_ReqEnable();
 8001fc6:	f7ff ff0f 	bl	8001de8 <LCD_ReqEnable>
        return instance;
 8001fca:	4b0e      	ldr	r3, [pc, #56]	@ (8002004 <HAL_DSI_EndOfRefreshCallback+0x148>)
                displayRefreshing = false;
 8001fcc:	7035      	strb	r5, [r6, #0]
 8001fce:	6818      	ldr	r0, [r3, #0]
                if (HAL::getInstance())
 8001fd0:	b128      	cbz	r0, 8001fde <HAL_DSI_EndOfRefreshCallback+0x122>
        allowDMATransfers();
 8001fd2:	6803      	ldr	r3, [r0, #0]
 8001fd4:	6a1b      	ldr	r3, [r3, #32]
    }
 8001fd6:	b005      	add	sp, #20
 8001fd8:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001fdc:	4718      	bx	r3
 8001fde:	b005      	add	sp, #20
 8001fe0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001fe4:	24000778 	.word	0x24000778
 8001fe8:	24000770 	.word	0x24000770
 8001fec:	01b201e2 	.word	0x01b201e2
 8001ff0:	50001000 	.word	0x50001000
 8001ff4:	019201e3 	.word	0x019201e3
 8001ff8:	01920003 	.word	0x01920003
 8001ffc:	09c004b3 	.word	0x09c004b3
 8002000:	019201e2 	.word	0x019201e2
 8002004:	24028e20 	.word	0x24028e20
 8002008:	24000774 	.word	0x24000774
 800200c:	24000414 	.word	0x24000414

08002010 <IdleTaskHook>:

    portBASE_TYPE IdleTaskHook(void* p)
    {
 8002010:	4601      	mov	r1, r0
 8002012:	b508      	push	{r3, lr}
        return instance;
 8002014:	4b03      	ldr	r3, [pc, #12]	@ (8002024 <IdleTaskHook+0x14>)
 8002016:	6818      	ldr	r0, [r3, #0]
        if ((int)p) //idle task sched out
 8002018:	b101      	cbz	r1, 800201c <IdleTaskHook+0xc>
        {
            touchgfx::HAL::getInstance()->setMCUActive(true);
 800201a:	2101      	movs	r1, #1
        }
        else //idle task sched in
        {
            touchgfx::HAL::getInstance()->setMCUActive(false);
 800201c:	f00f fdb6 	bl	8011b8c <_ZN8touchgfx3HAL12setMCUActiveEb>
        }
        return pdTRUE;
    }
 8002020:	2001      	movs	r0, #1
 8002022:	bd08      	pop	{r3, pc}
 8002024:	24028e20 	.word	0x24028e20

08002028 <_GLOBAL__sub_I_displayRefreshing>:
        : cc_consumed(0),
 8002028:	4b03      	ldr	r3, [pc, #12]	@ (8002038 <_GLOBAL__sub_I_displayRefreshing+0x10>)
 800202a:	2200      	movs	r2, #0
 800202c:	605a      	str	r2, [r3, #4]
          cc_in(0)
 800202e:	609a      	str	r2, [r3, #8]
 8002030:	4a02      	ldr	r2, [pc, #8]	@ (800203c <_GLOBAL__sub_I_displayRefreshing+0x14>)
 8002032:	601a      	str	r2, [r3, #0]

}
 8002034:	4770      	bx	lr
 8002036:	bf00      	nop
 8002038:	24000760 	.word	0x24000760
 800203c:	08028ca8 	.word	0x08028ca8

08002040 <_ZNK20HardwareMJPEGDecoder21getCurrentFrameNumberEv>:
    virtual bool decodeThumbnail(uint32_t frameno, uint8_t* buffer, uint16_t width, uint16_t height);
    virtual void gotoFrame(uint32_t frameno);
    virtual uint32_t getCurrentFrameNumber() const
    {
        return frameNumber;
    }
 8002040:	6940      	ldr	r0, [r0, #20]
 8002042:	4770      	bx	lr

08002044 <_ZN20HardwareMJPEGDecoder12getLastErrorEv>:
    }

    virtual AVIErrors getLastError()
    {
        return lastError;
    }
 8002044:	f890 0040 	ldrb.w	r0, [r0, #64]	@ 0x40
 8002048:	4770      	bx	lr

0800204a <_ZN20HardwareMJPEGDecoder8hasVideoEv>:
    readVideoHeader();
}

bool HardwareMJPEGDecoder::hasVideo()
{
    return (reader != 0) || (movieData != 0);
 800204a:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800204c:	b923      	cbnz	r3, 8002058 <_ZN20HardwareMJPEGDecoder8hasVideoEv+0xe>
 800204e:	6ac0      	ldr	r0, [r0, #44]	@ 0x2c
 8002050:	3800      	subs	r0, #0
 8002052:	bf18      	it	ne
 8002054:	2001      	movne	r0, #1
 8002056:	4770      	bx	lr
 8002058:	2001      	movs	r0, #1
}
 800205a:	4770      	bx	lr

0800205c <_ZN20HardwareMJPEGDecoder17getNumberOfFramesEv>:
}

uint32_t HardwareMJPEGDecoder::getNumberOfFrames()
{
    return videoInfo.number_of_frames;
}
 800205c:	6880      	ldr	r0, [r0, #8]
 800205e:	4770      	bx	lr

08002060 <_ZN20HardwareMJPEGDecoder14setRepeatVideoEb>:

void HardwareMJPEGDecoder::setRepeatVideo(bool repeat)
{

}
 8002060:	4770      	bx	lr

08002062 <_ZN20HardwareMJPEGDecoder12getVideoInfoEPN8touchgfx16VideoInformationE>:

void HardwareMJPEGDecoder::getVideoInfo(touchgfx::VideoInformation* data)
{
    *data = videoInfo;
 8002062:	3004      	adds	r0, #4
{
 8002064:	b510      	push	{r4, lr}
 8002066:	460c      	mov	r4, r1
    *data = videoInfo;
 8002068:	c80f      	ldmia	r0, {r0, r1, r2, r3}
 800206a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 800206e:	bd10      	pop	{r4, pc}

08002070 <_ZN20HardwareMJPEGDecoderD1Ev>:
class HardwareMJPEGDecoder : public MJPEGDecoder
 8002070:	4770      	bx	lr
	...

08002074 <_ZN20HardwareMJPEGDecoder15decodeThumbnailEmPhtt>:
{
 8002074:	b508      	push	{r3, lr}
    assert(0);
 8002076:	4a03      	ldr	r2, [pc, #12]	@ (8002084 <_ZN20HardwareMJPEGDecoder15decodeThumbnailEmPhtt+0x10>)
 8002078:	f44f 71e2 	mov.w	r1, #452	@ 0x1c4
 800207c:	4b02      	ldr	r3, [pc, #8]	@ (8002088 <_ZN20HardwareMJPEGDecoder15decodeThumbnailEmPhtt+0x14>)
 800207e:	4803      	ldr	r0, [pc, #12]	@ (800208c <_ZN20HardwareMJPEGDecoder15decodeThumbnailEmPhtt+0x18>)
 8002080:	f025 fd7e 	bl	8027b80 <__assert_func>
 8002084:	08028fc4 	.word	0x08028fc4
 8002088:	0802b567 	.word	0x0802b567
 800208c:	0802901f 	.word	0x0802901f

08002090 <_ZN20HardwareMJPEGDecoderD0Ev>:
 8002090:	b510      	push	{r4, lr}
 8002092:	4604      	mov	r4, r0
 8002094:	2148      	movs	r1, #72	@ 0x48
 8002096:	f025 f9fa 	bl	802748e <_ZdlPvj>
 800209a:	4620      	mov	r0, r4
 800209c:	bd10      	pop	{r4, pc}
	...

080020a0 <_ZN20HardwareMJPEGDecoderC1Ev>:
    : frameNumber(0), currentMovieOffset(0), indexOffset(0), firstFrameOffset(0), lastFrameEnd(0), movieLength(0), movieData(0),
 80020a0:	2200      	movs	r2, #0
      reader(0), aviBuffer(0), aviBufferLength(0), aviBufferStartOffset(0), lastError(AVI_NO_ERROR)
 80020a2:	4b0e      	ldr	r3, [pc, #56]	@ (80020dc <_ZN20HardwareMJPEGDecoderC1Ev+0x3c>)
HardwareMJPEGDecoder::HardwareMJPEGDecoder()
 80020a4:	b510      	push	{r4, lr}
    semDecodingDone = SEM_CREATE();
 80020a6:	4611      	mov	r1, r2
HardwareMJPEGDecoder::HardwareMJPEGDecoder()
 80020a8:	4604      	mov	r4, r0
      reader(0), aviBuffer(0), aviBufferLength(0), aviBufferStartOffset(0), lastError(AVI_NO_ERROR)
 80020aa:	6003      	str	r3, [r0, #0]
 80020ac:	63c2      	str	r2, [r0, #60]	@ 0x3c
 80020ae:	f880 2040 	strb.w	r2, [r0, #64]	@ 0x40
    : frameNumber(0), currentMovieOffset(0), indexOffset(0), firstFrameOffset(0), lastFrameEnd(0), movieLength(0), movieData(0),
 80020b2:	e9c0 2205 	strd	r2, r2, [r0, #20]
 80020b6:	e9c0 2207 	strd	r2, r2, [r0, #28]
 80020ba:	e9c0 2209 	strd	r2, r2, [r0, #36]	@ 0x24
      reader(0), aviBuffer(0), aviBufferLength(0), aviBufferStartOffset(0), lastError(AVI_NO_ERROR)
 80020be:	e9c0 220b 	strd	r2, r2, [r0, #44]	@ 0x2c
 80020c2:	e9c0 220d 	strd	r2, r2, [r0, #52]	@ 0x34
    videoInfo.frame_width = 0;
 80020c6:	e9c0 2203 	strd	r2, r2, [r0, #12]
    videoInfo.number_of_frames = 0;
 80020ca:	e9c0 2201 	strd	r2, r2, [r0, #4]
    semDecodingDone = SEM_CREATE();
 80020ce:	2001      	movs	r0, #1
 80020d0:	f00a feda 	bl	800ce88 <osSemaphoreNew>
 80020d4:	4b02      	ldr	r3, [pc, #8]	@ (80020e0 <_ZN20HardwareMJPEGDecoderC1Ev+0x40>)
 80020d6:	6018      	str	r0, [r3, #0]
}
 80020d8:	4620      	mov	r0, r4
 80020da:	bd10      	pop	{r4, pc}
 80020dc:	08029250 	.word	0x08029250
 80020e0:	24000798 	.word	0x24000798

080020e4 <_ZN20HardwareMJPEGDecoder7compareEmPKcm>:
{
 80020e4:	b410      	push	{r4}
 80020e6:	460c      	mov	r4, r1
 80020e8:	4611      	mov	r1, r2
 80020ea:	461a      	mov	r2, r3
    if (reader != 0)
 80020ec:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 80020ee:	b13b      	cbz	r3, 8002100 <_ZN20HardwareMJPEGDecoder7compareEmPKcm+0x1c>
        src = reinterpret_cast<const char*>(aviBuffer + (offset - aviBufferStartOffset));
 80020f0:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 80020f2:	6b40      	ldr	r0, [r0, #52]	@ 0x34
 80020f4:	1ae4      	subs	r4, r4, r3
        src = (const char*)movieData + offset;
 80020f6:	4420      	add	r0, r4
}
 80020f8:	f85d 4b04 	ldr.w	r4, [sp], #4
    return strncmp(src, str, num);
 80020fc:	f025 bfe4 	b.w	80280c8 <strncmp>
        src = (const char*)movieData + offset;
 8002100:	6ac0      	ldr	r0, [r0, #44]	@ 0x2c
 8002102:	e7f8      	b.n	80020f6 <_ZN20HardwareMJPEGDecoder7compareEmPKcm+0x12>

08002104 <_ZN20HardwareMJPEGDecoder6getU32Em>:
    if (reader != 0)
 8002104:	6b03      	ldr	r3, [r0, #48]	@ 0x30
{
 8002106:	b510      	push	{r4, lr}
    if (reader != 0)
 8002108:	b173      	cbz	r3, 8002128 <_ZN20HardwareMJPEGDecoder6getU32Em+0x24>
        const uint32_t index = offset - aviBufferStartOffset;
 800210a:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
        return aviBuffer[index + 0] | (aviBuffer[index + 1] << 8) | (aviBuffer[index + 2] << 16) | (aviBuffer[index + 3] << 24);
 800210c:	6b42      	ldr	r2, [r0, #52]	@ 0x34
        const uint32_t index = offset - aviBufferStartOffset;
 800210e:	1ac9      	subs	r1, r1, r3
        return aviBuffer[index + 0] | (aviBuffer[index + 1] << 8) | (aviBuffer[index + 2] << 16) | (aviBuffer[index + 3] << 24);
 8002110:	1853      	adds	r3, r2, r1
 8002112:	5c52      	ldrb	r2, [r2, r1]
 8002114:	7898      	ldrb	r0, [r3, #2]
 8002116:	785c      	ldrb	r4, [r3, #1]
 8002118:	0400      	lsls	r0, r0, #16
 800211a:	ea40 2004 	orr.w	r0, r0, r4, lsl #8
        val |= d[2] << 16;
 800211e:	4310      	orrs	r0, r2
        val |= d[3] << 24;
 8002120:	78db      	ldrb	r3, [r3, #3]
 8002122:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
}
 8002126:	bd10      	pop	{r4, pc}
        volatile const uint8_t* const d = movieData + offset;
 8002128:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
 800212a:	1853      	adds	r3, r2, r1
        val |= d[0];
 800212c:	5c52      	ldrb	r2, [r2, r1]
        val |= d[1] << 8;
 800212e:	7859      	ldrb	r1, [r3, #1]
        val |= d[2] << 16;
 8002130:	7898      	ldrb	r0, [r3, #2]
 8002132:	0400      	lsls	r0, r0, #16
 8002134:	ea40 2001 	orr.w	r0, r0, r1, lsl #8
 8002138:	e7f1      	b.n	800211e <_ZN20HardwareMJPEGDecoder6getU32Em+0x1a>

0800213a <_ZN20HardwareMJPEGDecoder6getU16Em>:
    if (reader != 0)
 800213a:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800213c:	b143      	cbz	r3, 8002150 <_ZN20HardwareMJPEGDecoder6getU16Em+0x16>
        const uint32_t index = offset - aviBufferStartOffset;
 800213e:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 8002140:	1ac9      	subs	r1, r1, r3
        return aviBuffer[index + 0] | (aviBuffer[index + 1] << 8);
 8002142:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8002144:	185a      	adds	r2, r3, r1
 8002146:	5c58      	ldrb	r0, [r3, r1]
 8002148:	7852      	ldrb	r2, [r2, #1]
 800214a:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
 800214e:	4770      	bx	lr
        volatile const uint8_t* const d = movieData + offset;
 8002150:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8002152:	185a      	adds	r2, r3, r1
        val |= d[0];
 8002154:	5c58      	ldrb	r0, [r3, r1]
        val |= d[1] << 8;
 8002156:	7853      	ldrb	r3, [r2, #1]
 8002158:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
}
 800215c:	4770      	bx	lr
	...

08002160 <_ZN20HardwareMJPEGDecoder8readDataEmm>:
{
 8002160:	b570      	push	{r4, r5, r6, lr}
 8002162:	4604      	mov	r4, r0
    if (reader != 0)
 8002164:	6b00      	ldr	r0, [r0, #48]	@ 0x30
{
 8002166:	460d      	mov	r5, r1
 8002168:	4616      	mov	r6, r2
    if (reader != 0)
 800216a:	b1d8      	cbz	r0, 80021a4 <_ZN20HardwareMJPEGDecoder8readDataEmm+0x44>
        if (length > aviBufferLength)
 800216c:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800216e:	4293      	cmp	r3, r2
 8002170:	d208      	bcs.n	8002184 <_ZN20HardwareMJPEGDecoder8readDataEmm+0x24>
            lastError = AVI_ERROR_FILE_BUFFER_TO_SMALL;
 8002172:	2309      	movs	r3, #9
            assert(!"Buffer to small");
 8002174:	4a0d      	ldr	r2, [pc, #52]	@ (80021ac <_ZN20HardwareMJPEGDecoder8readDataEmm+0x4c>)
 8002176:	219e      	movs	r1, #158	@ 0x9e
 8002178:	480d      	ldr	r0, [pc, #52]	@ (80021b0 <_ZN20HardwareMJPEGDecoder8readDataEmm+0x50>)
            lastError = AVI_ERROR_FILE_BUFFER_TO_SMALL;
 800217a:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
            assert(!"Buffer to small");
 800217e:	4b0d      	ldr	r3, [pc, #52]	@ (80021b4 <_ZN20HardwareMJPEGDecoder8readDataEmm+0x54>)
 8002180:	f025 fcfe 	bl	8027b80 <__assert_func>
        reader->seek(offset);
 8002184:	6803      	ldr	r3, [r0, #0]
 8002186:	68db      	ldr	r3, [r3, #12]
 8002188:	4798      	blx	r3
        if (!reader->readData(aviBuffer, length))
 800218a:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 800218c:	4632      	mov	r2, r6
 800218e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8002190:	6803      	ldr	r3, [r0, #0]
 8002192:	691b      	ldr	r3, [r3, #16]
 8002194:	4798      	blx	r3
 8002196:	b910      	cbnz	r0, 800219e <_ZN20HardwareMJPEGDecoder8readDataEmm+0x3e>
            lastError = AVI_ERROR_EOF_REACHED;
 8002198:	230d      	movs	r3, #13
 800219a:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
        return aviBuffer;
 800219e:	6b60      	ldr	r0, [r4, #52]	@ 0x34
        aviBufferStartOffset = offset;
 80021a0:	63e5      	str	r5, [r4, #60]	@ 0x3c
}
 80021a2:	bd70      	pop	{r4, r5, r6, pc}
    return movieData + offset;
 80021a4:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 80021a6:	4408      	add	r0, r1
 80021a8:	e7fb      	b.n	80021a2 <_ZN20HardwareMJPEGDecoder8readDataEmm+0x42>
 80021aa:	bf00      	nop
 80021ac:	0802908a 	.word	0x0802908a
 80021b0:	0802901f 	.word	0x0802901f
 80021b4:	08029077 	.word	0x08029077

080021b8 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv>:
{
 80021b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    assert((frameNumber > 0) && "HardwareMJPEGDecoder decoding without frame data!");
 80021bc:	6943      	ldr	r3, [r0, #20]
{
 80021be:	4604      	mov	r4, r0
    assert((frameNumber > 0) && "HardwareMJPEGDecoder decoding without frame data!");
 80021c0:	b92b      	cbnz	r3, 80021ce <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x16>
 80021c2:	4b22      	ldr	r3, [pc, #136]	@ (800224c <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x94>)
 80021c4:	21e4      	movs	r1, #228	@ 0xe4
 80021c6:	4a22      	ldr	r2, [pc, #136]	@ (8002250 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x98>)
 80021c8:	4822      	ldr	r0, [pc, #136]	@ (8002254 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x9c>)
 80021ca:	f025 fcd9 	bl	8027b80 <__assert_func>
    readData(currentMovieOffset, 8);
 80021ce:	2208      	movs	r2, #8
 80021d0:	6981      	ldr	r1, [r0, #24]
 80021d2:	f7ff ffc5 	bl	8002160 <_ZN20HardwareMJPEGDecoder8readDataEmm>
    uint32_t chunkSize = getU32(currentMovieOffset + 4);
 80021d6:	69a1      	ldr	r1, [r4, #24]
        if (streamNo == STREAM0 && chunkType == TYPEDC)
 80021d8:	f243 0630 	movw	r6, #12336	@ 0x3030
 80021dc:	f246 3764 	movw	r7, #25444	@ 0x6364
    uint32_t chunkSize = getU32(currentMovieOffset + 4);
 80021e0:	3104      	adds	r1, #4
 80021e2:	4620      	mov	r0, r4
 80021e4:	f7ff ff8e 	bl	8002104 <_ZN20HardwareMJPEGDecoder6getU32Em>
    while (currentMovieOffset + 8 + chunkSize < movieLength)
 80021e8:	69a3      	ldr	r3, [r4, #24]
 80021ea:	4418      	add	r0, r3
 80021ec:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80021ee:	f100 0208 	add.w	r2, r0, #8
 80021f2:	429a      	cmp	r2, r3
 80021f4:	d306      	bcc.n	8002204 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x4c>
    frameNumber = 1;
 80021f6:	2301      	movs	r3, #1
    return false;
 80021f8:	2000      	movs	r0, #0
    frameNumber = 1;
 80021fa:	6163      	str	r3, [r4, #20]
    currentMovieOffset = firstFrameOffset; /* start over */
 80021fc:	6a23      	ldr	r3, [r4, #32]
 80021fe:	61a3      	str	r3, [r4, #24]
}
 8002200:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        frameNumber++;
 8002204:	6963      	ldr	r3, [r4, #20]
        currentMovieOffset = (currentMovieOffset + 1) & 0xFFFFFFFE; /* pad to next word */
 8002206:	f100 0109 	add.w	r1, r0, #9
        readData(currentMovieOffset, 8);
 800220a:	2208      	movs	r2, #8
 800220c:	4620      	mov	r0, r4
        frameNumber++;
 800220e:	3301      	adds	r3, #1
        currentMovieOffset = (currentMovieOffset + 1) & 0xFFFFFFFE; /* pad to next word */
 8002210:	f021 0101 	bic.w	r1, r1, #1
        frameNumber++;
 8002214:	6163      	str	r3, [r4, #20]
        currentMovieOffset = (currentMovieOffset + 1) & 0xFFFFFFFE; /* pad to next word */
 8002216:	61a1      	str	r1, [r4, #24]
        readData(currentMovieOffset, 8);
 8002218:	f7ff ffa2 	bl	8002160 <_ZN20HardwareMJPEGDecoder8readDataEmm>
        uint32_t streamNo  = getU16(currentMovieOffset);
 800221c:	f8d4 9018 	ldr.w	r9, [r4, #24]
 8002220:	4620      	mov	r0, r4
 8002222:	4649      	mov	r1, r9
 8002224:	f7ff ff89 	bl	800213a <_ZN20HardwareMJPEGDecoder6getU16Em>
        uint32_t chunkType = getU16(currentMovieOffset + 2);
 8002228:	f109 0102 	add.w	r1, r9, #2
        uint32_t streamNo  = getU16(currentMovieOffset);
 800222c:	4680      	mov	r8, r0
        uint32_t chunkType = getU16(currentMovieOffset + 2);
 800222e:	4620      	mov	r0, r4
 8002230:	f7ff ff83 	bl	800213a <_ZN20HardwareMJPEGDecoder6getU16Em>
        chunkSize = getU32(currentMovieOffset + 4);
 8002234:	f109 0104 	add.w	r1, r9, #4
        uint32_t chunkType = getU16(currentMovieOffset + 2);
 8002238:	4605      	mov	r5, r0
        chunkSize = getU32(currentMovieOffset + 4);
 800223a:	4620      	mov	r0, r4
 800223c:	f7ff ff62 	bl	8002104 <_ZN20HardwareMJPEGDecoder6getU32Em>
        if (streamNo == STREAM0 && chunkType == TYPEDC)
 8002240:	45b0      	cmp	r8, r6
 8002242:	d1d1      	bne.n	80021e8 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x30>
 8002244:	42bd      	cmp	r5, r7
 8002246:	d1cf      	bne.n	80021e8 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x30>
            return true;
 8002248:	2001      	movs	r0, #1
 800224a:	e7d9      	b.n	8002200 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x48>
 800224c:	080290cc 	.word	0x080290cc
 8002250:	08029115 	.word	0x08029115
 8002254:	0802901f 	.word	0x0802901f

08002258 <_ZN20HardwareMJPEGDecoder9gotoFrameEm>:
    if (frameNumber == 0)
 8002258:	2901      	cmp	r1, #1
    if (frameNumber > getNumberOfFrames())
 800225a:	6803      	ldr	r3, [r0, #0]
 800225c:	bf38      	it	cc
 800225e:	2101      	movcc	r1, #1
 8002260:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
{
 8002262:	b570      	push	{r4, r5, r6, lr}
 8002264:	460d      	mov	r5, r1
 8002266:	4604      	mov	r4, r0
    if (frameNumber > getNumberOfFrames())
 8002268:	4798      	blx	r3
 800226a:	42a8      	cmp	r0, r5
 800226c:	d204      	bcs.n	8002278 <_ZN20HardwareMJPEGDecoder9gotoFrameEm+0x20>
        frameNumber = getNumberOfFrames();
 800226e:	6823      	ldr	r3, [r4, #0]
 8002270:	4620      	mov	r0, r4
 8002272:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002274:	4798      	blx	r3
 8002276:	4605      	mov	r5, r0
    uint32_t offset = indexOffset + 8 + (frameNumber - 1) * 16;
 8002278:	1e6b      	subs	r3, r5, #1
 800227a:	69e6      	ldr	r6, [r4, #28]
    readData(offset, 16);
 800227c:	2210      	movs	r2, #16
 800227e:	4620      	mov	r0, r4
    uint32_t offset = indexOffset + 8 + (frameNumber - 1) * 16;
 8002280:	eb06 1603 	add.w	r6, r6, r3, lsl #4
    readData(offset, 16);
 8002284:	f106 0108 	add.w	r1, r6, #8
 8002288:	f7ff ff6a 	bl	8002160 <_ZN20HardwareMJPEGDecoder8readDataEmm>
    currentMovieOffset = getU32(offset + 8) + firstFrameOffset - 4;
 800228c:	f106 0110 	add.w	r1, r6, #16
 8002290:	4620      	mov	r0, r4
 8002292:	f7ff ff37 	bl	8002104 <_ZN20HardwareMJPEGDecoder6getU32Em>
 8002296:	6a23      	ldr	r3, [r4, #32]
 8002298:	3b04      	subs	r3, #4
 800229a:	4403      	add	r3, r0
    this->frameNumber = frameNumber;
 800229c:	e9c4 5305 	strd	r5, r3, [r4, #20]
}
 80022a0:	bd70      	pop	{r4, r5, r6, pc}
	...

080022a4 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv>:
    currentMovieOffset = 0;
 80022a4:	2100      	movs	r1, #0
    readData(0, 72);
 80022a6:	2248      	movs	r2, #72	@ 0x48
{
 80022a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80022ac:	4604      	mov	r4, r0
    currentMovieOffset = 0;
 80022ae:	6181      	str	r1, [r0, #24]
    lastError = AVI_NO_ERROR;
 80022b0:	f880 1040 	strb.w	r1, [r0, #64]	@ 0x40
    readData(0, 72);
 80022b4:	f7ff ff54 	bl	8002160 <_ZN20HardwareMJPEGDecoder8readDataEmm>
    if (compare(currentMovieOffset, "RIFF", 4))
 80022b8:	69a6      	ldr	r6, [r4, #24]
 80022ba:	2304      	movs	r3, #4
 80022bc:	4a63      	ldr	r2, [pc, #396]	@ (800244c <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1a8>)
 80022be:	4631      	mov	r1, r6
 80022c0:	4620      	mov	r0, r4
 80022c2:	f7ff ff0f 	bl	80020e4 <_ZN20HardwareMJPEGDecoder7compareEmPKcm>
 80022c6:	b148      	cbz	r0, 80022dc <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x38>
        lastError = AVI_ERROR_NOT_RIFF;
 80022c8:	2303      	movs	r3, #3
        assert(!"RIFF header not found");
 80022ca:	4a61      	ldr	r2, [pc, #388]	@ (8002450 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1ac>)
 80022cc:	f44f 7196 	mov.w	r1, #300	@ 0x12c
        lastError = AVI_ERROR_NOT_RIFF;
 80022d0:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
        assert(!"RIFF header not found");
 80022d4:	4b5f      	ldr	r3, [pc, #380]	@ (8002454 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1b0>)
        assert(!"AVI header not found");
 80022d6:	4860      	ldr	r0, [pc, #384]	@ (8002458 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1b4>)
 80022d8:	f025 fc52 	bl	8027b80 <__assert_func>
    currentMovieOffset += 8;
 80022dc:	f106 0108 	add.w	r1, r6, #8
    if (compare(currentMovieOffset, "AVI ", 4))
 80022e0:	2304      	movs	r3, #4
 80022e2:	4a5e      	ldr	r2, [pc, #376]	@ (800245c <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1b8>)
 80022e4:	4620      	mov	r0, r4
    currentMovieOffset += 8;
 80022e6:	61a1      	str	r1, [r4, #24]
    if (compare(currentMovieOffset, "AVI ", 4))
 80022e8:	f7ff fefc 	bl	80020e4 <_ZN20HardwareMJPEGDecoder7compareEmPKcm>
 80022ec:	b138      	cbz	r0, 80022fe <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x5a>
        lastError = AVI_ERROR_AVI_HEADER_NOT_FOUND;
 80022ee:	2304      	movs	r3, #4
        assert(!"AVI header not found");
 80022f0:	4a57      	ldr	r2, [pc, #348]	@ (8002450 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1ac>)
 80022f2:	f44f 719a 	mov.w	r1, #308	@ 0x134
        lastError = AVI_ERROR_AVI_HEADER_NOT_FOUND;
 80022f6:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
        assert(!"AVI header not found");
 80022fa:	4b59      	ldr	r3, [pc, #356]	@ (8002460 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1bc>)
 80022fc:	e7eb      	b.n	80022d6 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x32>
    currentMovieOffset += 4;
 80022fe:	f106 010c 	add.w	r1, r6, #12
    if (compare(currentMovieOffset, "LIST", 4))
 8002302:	2304      	movs	r3, #4
 8002304:	4a57      	ldr	r2, [pc, #348]	@ (8002464 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1c0>)
 8002306:	4620      	mov	r0, r4
    currentMovieOffset += 4;
 8002308:	61a1      	str	r1, [r4, #24]
    if (compare(currentMovieOffset, "LIST", 4))
 800230a:	f7ff feeb 	bl	80020e4 <_ZN20HardwareMJPEGDecoder7compareEmPKcm>
 800230e:	4607      	mov	r7, r0
 8002310:	b138      	cbz	r0, 8002322 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x7e>
        lastError = AVI_ERROR_AVI_LIST_NOT_FOUND;
 8002312:	2305      	movs	r3, #5
        assert(!"AVI LIST not found");
 8002314:	4a4e      	ldr	r2, [pc, #312]	@ (8002450 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1ac>)
 8002316:	f240 113b 	movw	r1, #315	@ 0x13b
        lastError = AVI_ERROR_AVI_LIST_NOT_FOUND;
 800231a:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
        assert(!"AVI LIST not found");
 800231e:	4b52      	ldr	r3, [pc, #328]	@ (8002468 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1c4>)
 8002320:	e7d9      	b.n	80022d6 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x32>
    const uint32_t aviListSize = getU32(currentMovieOffset + 4);
 8002322:	f106 0110 	add.w	r1, r6, #16
 8002326:	4620      	mov	r0, r4
 8002328:	f7ff feec 	bl	8002104 <_ZN20HardwareMJPEGDecoder6getU32Em>
    assert(aviListSize);
 800232c:	4605      	mov	r5, r0
 800232e:	b920      	cbnz	r0, 800233a <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x96>
 8002330:	4b4e      	ldr	r3, [pc, #312]	@ (800246c <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1c8>)
 8002332:	f240 1141 	movw	r1, #321	@ 0x141
 8002336:	4a46      	ldr	r2, [pc, #280]	@ (8002450 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1ac>)
 8002338:	e7cd      	b.n	80022d6 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x32>
    uint32_t offset =  currentMovieOffset + 8;
 800233a:	f106 0814 	add.w	r8, r6, #20
    if (compare(offset, "hdrl", 4))
 800233e:	2304      	movs	r3, #4
 8002340:	4a4b      	ldr	r2, [pc, #300]	@ (8002470 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1cc>)
 8002342:	4620      	mov	r0, r4
 8002344:	4641      	mov	r1, r8
 8002346:	f7ff fecd 	bl	80020e4 <_ZN20HardwareMJPEGDecoder7compareEmPKcm>
 800234a:	2800      	cmp	r0, #0
 800234c:	d049      	beq.n	80023e2 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x13e>
        lastError = AVI_ERROR_AVI_HDRL_NOT_FOUND;
 800234e:	2306      	movs	r3, #6
 8002350:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
    if (compare(offset, "avih", 4))
 8002354:	2304      	movs	r3, #4
 8002356:	4a47      	ldr	r2, [pc, #284]	@ (8002474 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1d0>)
 8002358:	f106 0118 	add.w	r1, r6, #24
 800235c:	4620      	mov	r0, r4
 800235e:	f7ff fec1 	bl	80020e4 <_ZN20HardwareMJPEGDecoder7compareEmPKcm>
 8002362:	2800      	cmp	r0, #0
 8002364:	d03f      	beq.n	80023e6 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x142>
        lastError = AVI_ERROR_AVI_AVIH_NOT_FOUND;
 8002366:	2307      	movs	r3, #7
 8002368:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
    uint32_t listOffset = aviListOffset + aviListSize + 8;
 800236c:	4445      	add	r5, r8
    while (compare(listOffset + 8, "movi", 4) && (lastError == AVI_NO_ERROR) && listOffset < movieLength)
 800236e:	4f42      	ldr	r7, [pc, #264]	@ (8002478 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1d4>)
    readData(listOffset, 12);
 8002370:	220c      	movs	r2, #12
 8002372:	4620      	mov	r0, r4
 8002374:	4629      	mov	r1, r5
 8002376:	f7ff fef3 	bl	8002160 <_ZN20HardwareMJPEGDecoder8readDataEmm>
    while (compare(listOffset + 8, "movi", 4) && (lastError == AVI_NO_ERROR) && listOffset < movieLength)
 800237a:	f105 0608 	add.w	r6, r5, #8
 800237e:	2304      	movs	r3, #4
 8002380:	463a      	mov	r2, r7
 8002382:	4620      	mov	r0, r4
 8002384:	4631      	mov	r1, r6
 8002386:	f7ff fead 	bl	80020e4 <_ZN20HardwareMJPEGDecoder7compareEmPKcm>
 800238a:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 800238e:	2800      	cmp	r0, #0
 8002390:	d048      	beq.n	8002424 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x180>
 8002392:	2b00      	cmp	r3, #0
 8002394:	d148      	bne.n	8002428 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x184>
 8002396:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8002398:	42ab      	cmp	r3, r5
 800239a:	d849      	bhi.n	8002430 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x18c>
    currentMovieOffset = listOffset + 8 + 4; /* skip LIST and 'movi' */
 800239c:	f105 030c 	add.w	r3, r5, #12
    lastFrameEnd = listOffset + 8 + getU32(listOffset + 4);
 80023a0:	3504      	adds	r5, #4
 80023a2:	4620      	mov	r0, r4
    currentMovieOffset = listOffset + 8 + 4; /* skip LIST and 'movi' */
 80023a4:	61a3      	str	r3, [r4, #24]
    lastFrameEnd = listOffset + 8 + getU32(listOffset + 4);
 80023a6:	4629      	mov	r1, r5
 80023a8:	f7ff feac 	bl	8002104 <_ZN20HardwareMJPEGDecoder6getU32Em>
 80023ac:	4430      	add	r0, r6
    const uint32_t listSize = getU32(listOffset + 4) + 8;
 80023ae:	4629      	mov	r1, r5
    lastFrameEnd = listOffset + 8 + getU32(listOffset + 4);
 80023b0:	6260      	str	r0, [r4, #36]	@ 0x24
    const uint32_t listSize = getU32(listOffset + 4) + 8;
 80023b2:	4620      	mov	r0, r4
 80023b4:	f7ff fea6 	bl	8002104 <_ZN20HardwareMJPEGDecoder6getU32Em>
    listOffset += listSize;
 80023b8:	4406      	add	r6, r0
    readData(listOffset, 4);
 80023ba:	2204      	movs	r2, #4
 80023bc:	4620      	mov	r0, r4
 80023be:	4631      	mov	r1, r6
 80023c0:	f7ff fece 	bl	8002160 <_ZN20HardwareMJPEGDecoder8readDataEmm>
    if (!compare(listOffset, "idx1", 4))
 80023c4:	2304      	movs	r3, #4
 80023c6:	4a2d      	ldr	r2, [pc, #180]	@ (800247c <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1d8>)
 80023c8:	4631      	mov	r1, r6
 80023ca:	4620      	mov	r0, r4
 80023cc:	f7ff fe8a 	bl	80020e4 <_ZN20HardwareMJPEGDecoder7compareEmPKcm>
 80023d0:	2800      	cmp	r0, #0
 80023d2:	d138      	bne.n	8002446 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1a2>
    frameNumber = 1; /* next frame number is 1 */
 80023d4:	2301      	movs	r3, #1
        indexOffset = listOffset;
 80023d6:	61e6      	str	r6, [r4, #28]
    frameNumber = 1; /* next frame number is 1 */
 80023d8:	6163      	str	r3, [r4, #20]
    firstFrameOffset = currentMovieOffset;
 80023da:	69a3      	ldr	r3, [r4, #24]
 80023dc:	6223      	str	r3, [r4, #32]
}
 80023de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    bool foundFrame = true;
 80023e2:	2701      	movs	r7, #1
 80023e4:	e7b6      	b.n	8002354 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0xb0>
    if (foundFrame)
 80023e6:	2f00      	cmp	r7, #0
 80023e8:	d0c0      	beq.n	800236c <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0xc8>
        videoInfo.ms_between_frames = getU32(offset) / 1000;
 80023ea:	f106 0120 	add.w	r1, r6, #32
 80023ee:	4620      	mov	r0, r4
 80023f0:	f7ff fe88 	bl	8002104 <_ZN20HardwareMJPEGDecoder6getU32Em>
 80023f4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
        videoInfo.number_of_frames = getU32(offset + 16);
 80023f8:	f106 0130 	add.w	r1, r6, #48	@ 0x30
        videoInfo.ms_between_frames = getU32(offset) / 1000;
 80023fc:	fbb0 f0f3 	udiv	r0, r0, r3
 8002400:	6060      	str	r0, [r4, #4]
        videoInfo.number_of_frames = getU32(offset + 16);
 8002402:	4620      	mov	r0, r4
 8002404:	f7ff fe7e 	bl	8002104 <_ZN20HardwareMJPEGDecoder6getU32Em>
        videoInfo.frame_width = getU32(offset + 32);
 8002408:	f106 0140 	add.w	r1, r6, #64	@ 0x40
        videoInfo.number_of_frames = getU32(offset + 16);
 800240c:	60a0      	str	r0, [r4, #8]
        videoInfo.frame_width = getU32(offset + 32);
 800240e:	4620      	mov	r0, r4
 8002410:	f7ff fe78 	bl	8002104 <_ZN20HardwareMJPEGDecoder6getU32Em>
        videoInfo.frame_height = getU32(offset + 36);
 8002414:	f106 0144 	add.w	r1, r6, #68	@ 0x44
        videoInfo.frame_width = getU32(offset + 32);
 8002418:	60e0      	str	r0, [r4, #12]
        videoInfo.frame_height = getU32(offset + 36);
 800241a:	4620      	mov	r0, r4
 800241c:	f7ff fe72 	bl	8002104 <_ZN20HardwareMJPEGDecoder6getU32Em>
 8002420:	6120      	str	r0, [r4, #16]
 8002422:	e7a3      	b.n	800236c <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0xc8>
    if (lastError != AVI_NO_ERROR)
 8002424:	2b00      	cmp	r3, #0
 8002426:	d0b9      	beq.n	800239c <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0xf8>
        lastError = AVI_ERROR_MOVI_NOT_FOUND;
 8002428:	230a      	movs	r3, #10
        lastError = AVI_ERROR_IDX1_NOT_FOUND;
 800242a:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
        return;
 800242e:	e7d6      	b.n	80023de <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x13a>
        const uint32_t listSize = getU32(listOffset + 4) + 8;
 8002430:	1d29      	adds	r1, r5, #4
 8002432:	4620      	mov	r0, r4
 8002434:	f7ff fe66 	bl	8002104 <_ZN20HardwareMJPEGDecoder6getU32Em>
        listOffset += listSize;
 8002438:	1985      	adds	r5, r0, r6
        readData(listOffset, 12);
 800243a:	220c      	movs	r2, #12
 800243c:	4620      	mov	r0, r4
 800243e:	4629      	mov	r1, r5
 8002440:	f7ff fe8e 	bl	8002160 <_ZN20HardwareMJPEGDecoder8readDataEmm>
 8002444:	e799      	b.n	800237a <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0xd6>
        lastError = AVI_ERROR_IDX1_NOT_FOUND;
 8002446:	230b      	movs	r3, #11
 8002448:	e7ef      	b.n	800242a <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x186>
 800244a:	bf00      	nop
 800244c:	08029148 	.word	0x08029148
 8002450:	08029166 	.word	0x08029166
 8002454:	0802914d 	.word	0x0802914d
 8002458:	0802901f 	.word	0x0802901f
 800245c:	08029193 	.word	0x08029193
 8002460:	08029198 	.word	0x08029198
 8002464:	080291b0 	.word	0x080291b0
 8002468:	080291b5 	.word	0x080291b5
 800246c:	080291cb 	.word	0x080291cb
 8002470:	080291d7 	.word	0x080291d7
 8002474:	080291dc 	.word	0x080291dc
 8002478:	080291e1 	.word	0x080291e1
 800247c:	080291e6 	.word	0x080291e6

08002480 <_ZN20HardwareMJPEGDecoder12setVideoDataEPKhm>:
    movieLength = length;
 8002480:	e9c0 210a 	strd	r2, r1, [r0, #40]	@ 0x28
    reader = 0; /* not using reader */
 8002484:	2200      	movs	r2, #0
 8002486:	6302      	str	r2, [r0, #48]	@ 0x30
    readVideoHeader();
 8002488:	f7ff bf0c 	b.w	80022a4 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv>

0800248c <_ZN20HardwareMJPEGDecoder12setVideoDataERN8touchgfx15VideoDataReaderE>:
{
 800248c:	b510      	push	{r4, lr}
    movieData = 0;
 800248e:	2300      	movs	r3, #0
{
 8002490:	4604      	mov	r4, r0
 8002492:	4608      	mov	r0, r1
    movieData = 0;
 8002494:	62e3      	str	r3, [r4, #44]	@ 0x2c
    movieLength = reader.getDataLength();
 8002496:	680b      	ldr	r3, [r1, #0]
    this->reader = &reader;
 8002498:	6321      	str	r1, [r4, #48]	@ 0x30
    movieLength = reader.getDataLength();
 800249a:	689b      	ldr	r3, [r3, #8]
 800249c:	4798      	blx	r3
 800249e:	62a0      	str	r0, [r4, #40]	@ 0x28
    readVideoHeader();
 80024a0:	4620      	mov	r0, r4
}
 80024a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    readVideoHeader();
 80024a6:	f7ff befd 	b.w	80022a4 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv>
	...

080024ac <JPEG_Decode_DMA>:
     * @param  JPEGImageSize_Bytes    : jpg image size in bytes.
     * @param  DestAddress : ARGB8888 destination Frame Buffer Address.
     * @retval None
     */
    uint32_t JPEG_Decode_DMA(JPEG_HandleTypeDef* hjpeg, uint8_t* input, uint32_t chunkSizeIn /* length */, uint8_t* output)
    {
 80024ac:	b537      	push	{r0, r1, r2, r4, r5, lr}
        FrameBufferAddress = output;
 80024ae:	4c14      	ldr	r4, [pc, #80]	@ (8002500 <JPEG_Decode_DMA+0x54>)
        JPEG_output_is_paused = 0;
        JPEG_OUT_Read_BufferIndex = 0;
        JPEG_OUT_Write_BufferIndex = 0;
 80024b0:	4d14      	ldr	r5, [pc, #80]	@ (8002504 <JPEG_Decode_DMA+0x58>)
        FrameBufferAddress = output;
 80024b2:	6023      	str	r3, [r4, #0]
        JPEG_output_is_paused = 0;
 80024b4:	2400      	movs	r4, #0
 80024b6:	4b14      	ldr	r3, [pc, #80]	@ (8002508 <JPEG_Decode_DMA+0x5c>)
 80024b8:	601c      	str	r4, [r3, #0]
        JPEG_OUT_Read_BufferIndex = 0;
 80024ba:	4b14      	ldr	r3, [pc, #80]	@ (800250c <JPEG_Decode_DMA+0x60>)
 80024bc:	601c      	str	r4, [r3, #0]
        JPEG_InputImageIndex = 0;
 80024be:	4b14      	ldr	r3, [pc, #80]	@ (8002510 <JPEG_Decode_DMA+0x64>)
        JPEG_OUT_Write_BufferIndex = 0;
 80024c0:	602c      	str	r4, [r5, #0]
        JPEG_InputImageIndex = 0;
 80024c2:	601c      	str	r4, [r3, #0]
        JPEG_InputImageAddress = (uint32_t)input;
 80024c4:	4b13      	ldr	r3, [pc, #76]	@ (8002514 <JPEG_Decode_DMA+0x68>)
 80024c6:	6019      	str	r1, [r3, #0]
        JPEG_InputImageSize_Bytes = chunkSizeIn;
 80024c8:	4b13      	ldr	r3, [pc, #76]	@ (8002518 <JPEG_Decode_DMA+0x6c>)
 80024ca:	601a      	str	r2, [r3, #0]
        MCU_BlockIndex = 0;
 80024cc:	4b13      	ldr	r3, [pc, #76]	@ (800251c <JPEG_Decode_DMA+0x70>)
 80024ce:	601c      	str	r4, [r3, #0]

        /* Init buffers */
        for (uint32_t i = 0; i < NB_OUTPUT_DATA_BUFFERS; ++i)
        {
            Jpeg_OUT_BufferTab[i].State = JPEG_BUFFER_EMPTY;
 80024d0:	4b13      	ldr	r3, [pc, #76]	@ (8002520 <JPEG_Decode_DMA+0x74>)
            Jpeg_OUT_BufferTab[i].DataBufferSize = 0;
            Jpeg_OUT_BufferTab[i].MCU_index = 0;
        }

        /* Do not return from this function until done with decoding all chunks. */
        HAL_JPEG_Decode_DMA(hjpeg, input, CHUNK_SIZE_IN, Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBuffer, MCU_CHROMA_420_SIZE_BYTES * JPEG_ConvertorParams.MCU_pr_line);
 80024d2:	682a      	ldr	r2, [r5, #0]
 80024d4:	f44f 75c0 	mov.w	r5, #384	@ 0x180
            Jpeg_OUT_BufferTab[i].State = JPEG_BUFFER_EMPTY;
 80024d8:	701c      	strb	r4, [r3, #0]
 80024da:	741c      	strb	r4, [r3, #16]
            Jpeg_OUT_BufferTab[i].MCU_index = 0;
 80024dc:	e9c3 4402 	strd	r4, r4, [r3, #8]
 80024e0:	e9c3 4406 	strd	r4, r4, [r3, #24]
        HAL_JPEG_Decode_DMA(hjpeg, input, CHUNK_SIZE_IN, Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBuffer, MCU_CHROMA_420_SIZE_BYTES * JPEG_ConvertorParams.MCU_pr_line);
 80024e4:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 80024e8:	4a0e      	ldr	r2, [pc, #56]	@ (8002524 <JPEG_Decode_DMA+0x78>)
 80024ea:	68d2      	ldr	r2, [r2, #12]
 80024ec:	436a      	muls	r2, r5
 80024ee:	9200      	str	r2, [sp, #0]
 80024f0:	f44f 4250 	mov.w	r2, #53248	@ 0xd000
 80024f4:	685b      	ldr	r3, [r3, #4]
 80024f6:	f007 fb45 	bl	8009b84 <HAL_JPEG_Decode_DMA>

        return 0;
    }
 80024fa:	4620      	mov	r0, r4
 80024fc:	b003      	add	sp, #12
 80024fe:	bd30      	pop	{r4, r5, pc}
 8002500:	24009dc4 	.word	0x24009dc4
 8002504:	24009da0 	.word	0x24009da0
 8002508:	24009db0 	.word	0x24009db0
 800250c:	24000794 	.word	0x24000794
 8002510:	24009dc0 	.word	0x24009dc0
 8002514:	24009db8 	.word	0x24009db8
 8002518:	24009dbc 	.word	0x24009dbc
 800251c:	2400079c 	.word	0x2400079c
 8002520:	24000010 	.word	0x24000010
 8002524:	2400077c 	.word	0x2400077c

08002528 <HAL_JPEG_InfoReadyCallback>:
     */
    void HAL_JPEG_InfoReadyCallback(JPEG_HandleTypeDef* hjpeg, JPEG_ConfTypeDef* pInfo)
    {
        uint32_t hMCU, vMCU;

        if (pInfo->ChromaSubsampling == JPEG_420_SUBSAMPLING)
 8002528:	684b      	ldr	r3, [r1, #4]
 800252a:	2b01      	cmp	r3, #1
 800252c:	d115      	bne.n	800255a <HAL_JPEG_InfoReadyCallback+0x32>
        {
            if ((pInfo->ImageWidth % 16) != 0)
 800252e:	68cb      	ldr	r3, [r1, #12]
 8002530:	071a      	lsls	r2, r3, #28
            {
                pInfo->ImageWidth += (16 - (pInfo->ImageWidth % 16));
 8002532:	bf1e      	ittt	ne
 8002534:	f023 030f 	bicne.w	r3, r3, #15
 8002538:	3310      	addne	r3, #16
 800253a:	60cb      	strne	r3, [r1, #12]
            }

            if ((pInfo->ImageHeight % 16) != 0)
 800253c:	688b      	ldr	r3, [r1, #8]
 800253e:	0718      	lsls	r0, r3, #28
            {
                pInfo->ImageHeight += (16 - (pInfo->ImageHeight % 16));
 8002540:	bf1e      	ittt	ne
 8002542:	f023 030f 	bicne.w	r3, r3, #15
 8002546:	3310      	addne	r3, #16
 8002548:	608b      	strne	r3, [r1, #8]
            }

            hMCU = (pInfo->ImageWidth / MCU_WIDTH_PIXELS);
 800254a:	68cb      	ldr	r3, [r1, #12]
            vMCU = (pInfo->ImageHeight / MCU_HEIGHT_PIXELS);
 800254c:	688a      	ldr	r2, [r1, #8]
            hMCU = (pInfo->ImageWidth / MCU_WIDTH_PIXELS);
 800254e:	091b      	lsrs	r3, r3, #4
            vMCU = (pInfo->ImageHeight / MCU_HEIGHT_PIXELS);
 8002550:	0912      	lsrs	r2, r2, #4
            MCU_TotalNb = (hMCU * vMCU);
 8002552:	4353      	muls	r3, r2
 8002554:	4a0e      	ldr	r2, [pc, #56]	@ (8002590 <HAL_JPEG_InfoReadyCallback+0x68>)
 8002556:	6013      	str	r3, [r2, #0]
 8002558:	4770      	bx	lr
        }
        else
        {
            if (pInfo->ChromaSubsampling == JPEG_422_SUBSAMPLING)
 800255a:	2b02      	cmp	r3, #2
 800255c:	d10e      	bne.n	800257c <HAL_JPEG_InfoReadyCallback+0x54>
            {
                if ((pInfo->ImageWidth % 16) != 0)
 800255e:	68cb      	ldr	r3, [r1, #12]
 8002560:	071a      	lsls	r2, r3, #28
 8002562:	d003      	beq.n	800256c <HAL_JPEG_InfoReadyCallback+0x44>
                {
                    pInfo->ImageWidth += (16 - (pInfo->ImageWidth % 16));
 8002564:	f023 030f 	bic.w	r3, r3, #15
 8002568:	3310      	adds	r3, #16

            if (pInfo->ChromaSubsampling == JPEG_444_SUBSAMPLING)
            {
                if ((pInfo->ImageWidth % 8) != 0)
                {
                    pInfo->ImageWidth += (8 - (pInfo->ImageWidth % 8));
 800256a:	60cb      	str	r3, [r1, #12]
                }

                if ((pInfo->ImageHeight % 8) != 0)
 800256c:	688b      	ldr	r3, [r1, #8]
 800256e:	075a      	lsls	r2, r3, #29
                {
                    pInfo->ImageHeight += (8 - (pInfo->ImageHeight % 8));
 8002570:	bf1e      	ittt	ne
 8002572:	f023 0307 	bicne.w	r3, r3, #7
 8002576:	3308      	addne	r3, #8
 8002578:	608b      	strne	r3, [r1, #8]
                }
            }
        }
    }
 800257a:	4770      	bx	lr
            if (pInfo->ChromaSubsampling == JPEG_444_SUBSAMPLING)
 800257c:	2b00      	cmp	r3, #0
 800257e:	d1fc      	bne.n	800257a <HAL_JPEG_InfoReadyCallback+0x52>
                if ((pInfo->ImageWidth % 8) != 0)
 8002580:	68cb      	ldr	r3, [r1, #12]
 8002582:	0758      	lsls	r0, r3, #29
 8002584:	d0f2      	beq.n	800256c <HAL_JPEG_InfoReadyCallback+0x44>
                    pInfo->ImageWidth += (8 - (pInfo->ImageWidth % 8));
 8002586:	f023 0307 	bic.w	r3, r3, #7
 800258a:	3308      	adds	r3, #8
 800258c:	e7ed      	b.n	800256a <HAL_JPEG_InfoReadyCallback+0x42>
 800258e:	bf00      	nop
 8002590:	24009da8 	.word	0x24009da8

08002594 <HAL_JPEG_GetDataCallback>:
     * @retval None
     */
    void HAL_JPEG_GetDataCallback(JPEG_HandleTypeDef* hjpeg, uint32_t NbDecodedData)
    {
        /* Input buffer has been consumed by the peripheral and to ask for a new data chunk if the operation (encoding/decoding) has not been complete yet. */
        JPEG_InputImageIndex += NbDecodedData;
 8002594:	4a0b      	ldr	r2, [pc, #44]	@ (80025c4 <HAL_JPEG_GetDataCallback+0x30>)
 8002596:	6813      	ldr	r3, [r2, #0]
 8002598:	440b      	add	r3, r1
    {
 800259a:	b430      	push	{r4, r5}
        JPEG_InputImageIndex += NbDecodedData;
 800259c:	6013      	str	r3, [r2, #0]
        if (JPEG_InputImageIndex < JPEG_InputImageSize_Bytes)
 800259e:	4a0a      	ldr	r2, [pc, #40]	@ (80025c8 <HAL_JPEG_GetDataCallback+0x34>)
 80025a0:	6812      	ldr	r2, [r2, #0]
 80025a2:	4293      	cmp	r3, r2
 80025a4:	d20c      	bcs.n	80025c0 <HAL_JPEG_GetDataCallback+0x2c>
        {
            JPEG_InputImageAddress = JPEG_InputImageAddress + NbDecodedData;
 80025a6:	4c09      	ldr	r4, [pc, #36]	@ (80025cc <HAL_JPEG_GetDataCallback+0x38>)
            uint32_t inDataLength = JPEG_InputImageSize_Bytes - JPEG_InputImageIndex;
 80025a8:	1ad2      	subs	r2, r2, r3
            JPEG_InputImageAddress = JPEG_InputImageAddress + NbDecodedData;
 80025aa:	6825      	ldr	r5, [r4, #0]
            HAL_JPEG_ConfigInputBuffer(hjpeg, (uint8_t*)JPEG_InputImageAddress, inDataLength >= CHUNK_SIZE_IN ? CHUNK_SIZE_IN : inDataLength);
 80025ac:	f5b2 4f50 	cmp.w	r2, #53248	@ 0xd000
            JPEG_InputImageAddress = JPEG_InputImageAddress + NbDecodedData;
 80025b0:	4429      	add	r1, r5
            HAL_JPEG_ConfigInputBuffer(hjpeg, (uint8_t*)JPEG_InputImageAddress, inDataLength >= CHUNK_SIZE_IN ? CHUNK_SIZE_IN : inDataLength);
 80025b2:	bf28      	it	cs
 80025b4:	f44f 4250 	movcs.w	r2, #53248	@ 0xd000
            JPEG_InputImageAddress = JPEG_InputImageAddress + NbDecodedData;
 80025b8:	6021      	str	r1, [r4, #0]
        }
    }
 80025ba:	bc30      	pop	{r4, r5}
            HAL_JPEG_ConfigInputBuffer(hjpeg, (uint8_t*)JPEG_InputImageAddress, inDataLength >= CHUNK_SIZE_IN ? CHUNK_SIZE_IN : inDataLength);
 80025bc:	f007 bb44 	b.w	8009c48 <HAL_JPEG_ConfigInputBuffer>
    }
 80025c0:	bc30      	pop	{r4, r5}
 80025c2:	4770      	bx	lr
 80025c4:	24009dc0 	.word	0x24009dc0
 80025c8:	24009dbc 	.word	0x24009dbc
 80025cc:	24009db8 	.word	0x24009db8

080025d0 <HAL_JPEG_DataReadyCallback>:
     * @param pDataOut: pointer to the output data buffer
     * @param OutDataLength: length of output buffer in bytes
     * @retval None
     */
    void HAL_JPEG_DataReadyCallback(JPEG_HandleTypeDef* hjpeg, uint8_t* pDataOut, uint32_t OutDataLength)
    {
 80025d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].State = JPEG_BUFFER_FULL;
 80025d2:	4c20      	ldr	r4, [pc, #128]	@ (8002654 <HAL_JPEG_DataReadyCallback+0x84>)
 80025d4:	2101      	movs	r1, #1
 80025d6:	4d20      	ldr	r5, [pc, #128]	@ (8002658 <HAL_JPEG_DataReadyCallback+0x88>)
    {
 80025d8:	4606      	mov	r6, r0
        Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].State = JPEG_BUFFER_FULL;
 80025da:	6823      	ldr	r3, [r4, #0]
        Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBufferSize = OutDataLength;
        const uint32_t MCU = MCU_BlockIndex;
        Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].MCU_index = MCU;

        MCU_BlockIndex += JPEG_ConvertorParams.MCU_pr_line;
 80025dc:	4f1f      	ldr	r7, [pc, #124]	@ (800265c <HAL_JPEG_DataReadyCallback+0x8c>)
        Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].State = JPEG_BUFFER_FULL;
 80025de:	011b      	lsls	r3, r3, #4
 80025e0:	54e9      	strb	r1, [r5, r3]
        Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBufferSize = OutDataLength;
 80025e2:	6823      	ldr	r3, [r4, #0]
 80025e4:	eb05 1303 	add.w	r3, r5, r3, lsl #4
 80025e8:	609a      	str	r2, [r3, #8]
        const uint32_t MCU = MCU_BlockIndex;
 80025ea:	4b1d      	ldr	r3, [pc, #116]	@ (8002660 <HAL_JPEG_DataReadyCallback+0x90>)
 80025ec:	6819      	ldr	r1, [r3, #0]
        Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].MCU_index = MCU;
 80025ee:	6822      	ldr	r2, [r4, #0]
 80025f0:	eb05 1202 	add.w	r2, r5, r2, lsl #4
 80025f4:	60d1      	str	r1, [r2, #12]
        MCU_BlockIndex += JPEG_ConvertorParams.MCU_pr_line;
 80025f6:	681a      	ldr	r2, [r3, #0]
 80025f8:	68f9      	ldr	r1, [r7, #12]
 80025fa:	440a      	add	r2, r1
 80025fc:	601a      	str	r2, [r3, #0]

        JPEG_OUT_Write_BufferIndex++;
 80025fe:	6823      	ldr	r3, [r4, #0]
 8002600:	3301      	adds	r3, #1
 8002602:	6023      	str	r3, [r4, #0]
        if (JPEG_OUT_Write_BufferIndex >= NB_OUTPUT_DATA_BUFFERS)
 8002604:	6823      	ldr	r3, [r4, #0]
 8002606:	2b01      	cmp	r3, #1
 8002608:	d901      	bls.n	800260e <HAL_JPEG_DataReadyCallback+0x3e>
        {
            JPEG_OUT_Write_BufferIndex = 0;
 800260a:	2300      	movs	r3, #0
 800260c:	6023      	str	r3, [r4, #0]
        }

        /* if the other buffer is full, then ui thread might be converting it */
        if (Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].State != JPEG_BUFFER_EMPTY)
 800260e:	6823      	ldr	r3, [r4, #0]
 8002610:	011b      	lsls	r3, r3, #4
 8002612:	5ceb      	ldrb	r3, [r5, r3]
 8002614:	b133      	cbz	r3, 8002624 <HAL_JPEG_DataReadyCallback+0x54>
        {
            HAL_JPEG_Pause(hjpeg, JPEG_PAUSE_RESUME_OUTPUT);
 8002616:	2102      	movs	r1, #2
 8002618:	4630      	mov	r0, r6
 800261a:	f007 fae7 	bl	8009bec <HAL_JPEG_Pause>
            JPEG_output_is_paused = 1;
 800261e:	4b11      	ldr	r3, [pc, #68]	@ (8002664 <HAL_JPEG_DataReadyCallback+0x94>)
 8002620:	2201      	movs	r2, #1
 8002622:	601a      	str	r2, [r3, #0]
        }
        HAL_JPEG_ConfigOutputBuffer(hjpeg, Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBuffer, MCU_CHROMA_420_SIZE_BYTES * JPEG_ConvertorParams.MCU_pr_line);
 8002624:	6822      	ldr	r2, [r4, #0]
 8002626:	4630      	mov	r0, r6
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	eb05 1502 	add.w	r5, r5, r2, lsl #4
 800262e:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8002632:	6869      	ldr	r1, [r5, #4]
 8002634:	435a      	muls	r2, r3
 8002636:	f007 fb0a 	bl	8009c4e <HAL_JPEG_ConfigOutputBuffer>

        /* Signal Hardware Decoding to wake up */
        if (!DMA2D_reference->isDMARunning() && !DMA2D_reference->getReserved())
 800263a:	4b0b      	ldr	r3, [pc, #44]	@ (8002668 <HAL_JPEG_DataReadyCallback+0x98>)
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	7a1a      	ldrb	r2, [r3, #8]
 8002640:	b93a      	cbnz	r2, 8002652 <HAL_JPEG_DataReadyCallback+0x82>
     *
     * @return true if DMA is reserved by rendering, false if not.
     */
    bool getReserved() const
    {
        return isReserved;
 8002642:	7a9b      	ldrb	r3, [r3, #10]
 8002644:	b92b      	cbnz	r3, 8002652 <HAL_JPEG_DataReadyCallback+0x82>
        {
            SEM_POST(semDecodingDone);
 8002646:	4b09      	ldr	r3, [pc, #36]	@ (800266c <HAL_JPEG_DataReadyCallback+0x9c>)
 8002648:	6818      	ldr	r0, [r3, #0]
        }
    }
 800264a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
            SEM_POST(semDecodingDone);
 800264e:	f00a bc91 	b.w	800cf74 <osSemaphoreRelease>
    }
 8002652:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002654:	24009da0 	.word	0x24009da0
 8002658:	24000010 	.word	0x24000010
 800265c:	2400077c 	.word	0x2400077c
 8002660:	2400079c 	.word	0x2400079c
 8002664:	24009db0 	.word	0x24009db0
 8002668:	24009da4 	.word	0x24009da4
 800266c:	24000798 	.word	0x24000798

08002670 <HAL_JPEG_ErrorCallback>:
  __ASM volatile ("cpsid i" : : : "memory");
 8002670:	b672      	cpsid	i
     * @retval None
     */
    void HAL_JPEG_ErrorCallback(JPEG_HandleTypeDef* hjpeg)
    {
        __disable_irq();
        while (1)
 8002672:	e7fe      	b.n	8002672 <HAL_JPEG_ErrorCallback+0x2>

08002674 <HAL_JPEG_DecodeCpltCallback>:
     * @param hjpeg: JPEG handle pointer
     * @retval None
     */
    void HAL_JPEG_DecodeCpltCallback(JPEG_HandleTypeDef* hjpeg)
    {
        Jpeg_HWDecodingEnd = 1;
 8002674:	4b01      	ldr	r3, [pc, #4]	@ (800267c <HAL_JPEG_DecodeCpltCallback+0x8>)
 8002676:	2201      	movs	r2, #1
 8002678:	601a      	str	r2, [r3, #0]
    }
 800267a:	4770      	bx	lr
 800267c:	24009db4 	.word	0x24009db4

08002680 <JPEG_OutputHandler>:
 * @brief  JPEG Ouput Data BackGround Postprocessing .
 * @param hjpeg: JPEG handle pointer
 * @retval 1 : if JPEG processing has finished, 0 : if JPEG processing still ongoing
 */
uint32_t JPEG_OutputHandler(JPEG_HandleTypeDef* hjpeg)
{
 8002680:	b538      	push	{r3, r4, r5, lr}
    /* Decode frame complete */
    if (Jpeg_HWDecodingEnd && DMA2D_CopyBufferEnd)
 8002682:	4d16      	ldr	r5, [pc, #88]	@ (80026dc <JPEG_OutputHandler+0x5c>)
{
 8002684:	4604      	mov	r4, r0
    if (Jpeg_HWDecodingEnd && DMA2D_CopyBufferEnd)
 8002686:	682b      	ldr	r3, [r5, #0]
 8002688:	b113      	cbz	r3, 8002690 <JPEG_OutputHandler+0x10>
 800268a:	4b15      	ldr	r3, [pc, #84]	@ (80026e0 <JPEG_OutputHandler+0x60>)
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	bb1b      	cbnz	r3, 80026d8 <JPEG_OutputHandler+0x58>
    {
        return 1;
    }

    /* Try to start DMA2D video transfer if next buffer if full */
    if (!DMA2D_reference->isDMARunning() && (Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex].State == JPEG_BUFFER_FULL) && (DMA2D_CopyBufferEnd == 0))
 8002690:	4b14      	ldr	r3, [pc, #80]	@ (80026e4 <JPEG_OutputHandler+0x64>)
 8002692:	6818      	ldr	r0, [r3, #0]
 8002694:	7a03      	ldrb	r3, [r0, #8]
 8002696:	b963      	cbnz	r3, 80026b2 <JPEG_OutputHandler+0x32>
 8002698:	4b13      	ldr	r3, [pc, #76]	@ (80026e8 <JPEG_OutputHandler+0x68>)
 800269a:	4a14      	ldr	r2, [pc, #80]	@ (80026ec <JPEG_OutputHandler+0x6c>)
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	011b      	lsls	r3, r3, #4
 80026a0:	5cd3      	ldrb	r3, [r2, r3]
 80026a2:	2b01      	cmp	r3, #1
 80026a4:	d105      	bne.n	80026b2 <JPEG_OutputHandler+0x32>
 80026a6:	4b0e      	ldr	r3, [pc, #56]	@ (80026e0 <JPEG_OutputHandler+0x60>)
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	b913      	cbnz	r3, 80026b2 <JPEG_OutputHandler+0x32>
    {
        DMA2D_reference->start();
 80026ac:	6803      	ldr	r3, [r0, #0]
 80026ae:	691b      	ldr	r3, [r3, #16]
 80026b0:	4798      	blx	r3
    }

    /* Start JPEG IP if paused and next buffer is empty */
    if ((JPEG_output_is_paused == 1) && (Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].State == JPEG_BUFFER_EMPTY) && (Jpeg_HWDecodingEnd == 0))
 80026b2:	4a0f      	ldr	r2, [pc, #60]	@ (80026f0 <JPEG_OutputHandler+0x70>)
 80026b4:	6813      	ldr	r3, [r2, #0]
 80026b6:	2b01      	cmp	r3, #1
 80026b8:	d10c      	bne.n	80026d4 <JPEG_OutputHandler+0x54>
 80026ba:	4b0e      	ldr	r3, [pc, #56]	@ (80026f4 <JPEG_OutputHandler+0x74>)
 80026bc:	490b      	ldr	r1, [pc, #44]	@ (80026ec <JPEG_OutputHandler+0x6c>)
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	011b      	lsls	r3, r3, #4
 80026c2:	5ccb      	ldrb	r3, [r1, r3]
 80026c4:	b933      	cbnz	r3, 80026d4 <JPEG_OutputHandler+0x54>
 80026c6:	682b      	ldr	r3, [r5, #0]
 80026c8:	b923      	cbnz	r3, 80026d4 <JPEG_OutputHandler+0x54>
    {
        JPEG_output_is_paused = 0;
        HAL_JPEG_Resume(hjpeg, JPEG_PAUSE_RESUME_OUTPUT);
 80026ca:	2102      	movs	r1, #2
 80026cc:	4620      	mov	r0, r4
        JPEG_output_is_paused = 0;
 80026ce:	6013      	str	r3, [r2, #0]
        HAL_JPEG_Resume(hjpeg, JPEG_PAUSE_RESUME_OUTPUT);
 80026d0:	f007 fceb 	bl	800a0aa <HAL_JPEG_Resume>
        return 1;
 80026d4:	2002      	movs	r0, #2
    }

    return 2;
}
 80026d6:	bd38      	pop	{r3, r4, r5, pc}
        return 1;
 80026d8:	2001      	movs	r0, #1
 80026da:	e7fc      	b.n	80026d6 <JPEG_OutputHandler+0x56>
 80026dc:	24009db4 	.word	0x24009db4
 80026e0:	24000790 	.word	0x24000790
 80026e4:	24009da4 	.word	0x24009da4
 80026e8:	24000794 	.word	0x24000794
 80026ec:	24000010 	.word	0x24000010
 80026f0:	24009db0 	.word	0x24009db0
 80026f4:	24009da0 	.word	0x24009da0

080026f8 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm>:
{
 80026f8:	b570      	push	{r4, r5, r6, lr}
 80026fa:	4605      	mov	r5, r0
    if (length == 0)
 80026fc:	2a00      	cmp	r2, #0
 80026fe:	d035      	beq.n	800276c <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x74>
    if (outputBuffer) /* only decode if buffers are assigned. */
 8002700:	2b00      	cmp	r3, #0
 8002702:	d033      	beq.n	800276c <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x74>
        JPEG_ConvertorParams.bytes_pr_pixel = 3;
 8002704:	481a      	ldr	r0, [pc, #104]	@ (8002770 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x78>)
 8002706:	2403      	movs	r4, #3
 8002708:	6104      	str	r4, [r0, #16]
        JPEG_ConvertorParams.WidthExtend = videoInfo.frame_width;
 800270a:	68ec      	ldr	r4, [r5, #12]
        if ((JPEG_ConvertorParams.WidthExtend % 16) != 0)
 800270c:	0726      	lsls	r6, r4, #28
        JPEG_ConvertorParams.ScaledWidth = 800 * JPEG_ConvertorParams.bytes_pr_pixel;
 800270e:	f44f 6616 	mov.w	r6, #2400	@ 0x960
            JPEG_ConvertorParams.WidthExtend += 16 - (JPEG_ConvertorParams.WidthExtend % 16);
 8002712:	bf18      	it	ne
 8002714:	f024 040f 	bicne.w	r4, r4, #15
        JPEG_ConvertorParams.ScaledWidth = 800 * JPEG_ConvertorParams.bytes_pr_pixel;
 8002718:	6046      	str	r6, [r0, #4]
            JPEG_ConvertorParams.WidthExtend += 16 - (JPEG_ConvertorParams.WidthExtend % 16);
 800271a:	bf18      	it	ne
 800271c:	3410      	addne	r4, #16
        JPEG_ConvertorParams.WidthExtend = videoInfo.frame_width;
 800271e:	6004      	str	r4, [r0, #0]
        JPEG_ConvertorParams.MCU_pr_line = JPEG_ConvertorParams.WidthExtend / MCU_WIDTH_PIXELS;
 8002720:	0924      	lsrs	r4, r4, #4
 8002722:	60c4      	str	r4, [r0, #12]
        JPEG_ConvertorParams.LastLineHeight = (videoInfo.frame_height % MCU_HEIGHT_PIXELS) == 0 ? 0 : MCU_HEIGHT_PIXELS - (videoInfo.frame_height % MCU_HEIGHT_PIXELS);
 8002724:	692c      	ldr	r4, [r5, #16]
 8002726:	f014 040f 	ands.w	r4, r4, #15
 800272a:	bf18      	it	ne
 800272c:	f1c4 0410 	rsbne	r4, r4, #16
 8002730:	6084      	str	r4, [r0, #8]
        JPEG_Decode_DMA(&hjpeg, const_cast<uint8_t*>(mjpgdata), length, outputBuffer);
 8002732:	4810      	ldr	r0, [pc, #64]	@ (8002774 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x7c>)
 8002734:	f7ff feba 	bl	80024ac <JPEG_Decode_DMA>
            JpegProcessing_End = JPEG_OutputHandler(&hjpeg);
 8002738:	4c0f      	ldr	r4, [pc, #60]	@ (8002778 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x80>)
        DMA2D_reference = dma;
 800273a:	6c6a      	ldr	r2, [r5, #68]	@ 0x44
 800273c:	4b0f      	ldr	r3, [pc, #60]	@ (800277c <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x84>)
            JpegProcessing_End = JPEG_OutputHandler(&hjpeg);
 800273e:	4d0d      	ldr	r5, [pc, #52]	@ (8002774 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x7c>)
        DMA2D_reference = dma;
 8002740:	601a      	str	r2, [r3, #0]
            JpegProcessing_End = JPEG_OutputHandler(&hjpeg);
 8002742:	4628      	mov	r0, r5
 8002744:	f7ff ff9c 	bl	8002680 <JPEG_OutputHandler>
 8002748:	6020      	str	r0, [r4, #0]
            if (JpegProcessing_End == 2)
 800274a:	6823      	ldr	r3, [r4, #0]
 800274c:	2b02      	cmp	r3, #2
 800274e:	d105      	bne.n	800275c <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x64>
                SEM_WAIT(semDecodingDone);
 8002750:	4b0b      	ldr	r3, [pc, #44]	@ (8002780 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x88>)
 8002752:	f04f 31ff 	mov.w	r1, #4294967295
 8002756:	6818      	ldr	r0, [r3, #0]
 8002758:	f00a fbe0 	bl	800cf1c <osSemaphoreAcquire>
        } while (JpegProcessing_End != 1);
 800275c:	6823      	ldr	r3, [r4, #0]
 800275e:	2b01      	cmp	r3, #1
 8002760:	d1ef      	bne.n	8002742 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x4a>
        Jpeg_HWDecodingEnd = 0;
 8002762:	2300      	movs	r3, #0
 8002764:	4a07      	ldr	r2, [pc, #28]	@ (8002784 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x8c>)
 8002766:	6013      	str	r3, [r2, #0]
        DMA2D_CopyBufferEnd = 0;
 8002768:	4a07      	ldr	r2, [pc, #28]	@ (8002788 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x90>)
 800276a:	6013      	str	r3, [r2, #0]
}
 800276c:	bd70      	pop	{r4, r5, r6, pc}
 800276e:	bf00      	nop
 8002770:	2400077c 	.word	0x2400077c
 8002774:	24000594 	.word	0x24000594
 8002778:	24009dac 	.word	0x24009dac
 800277c:	24009da4 	.word	0x24009da4
 8002780:	24000798 	.word	0x24000798
 8002784:	24009db4 	.word	0x24009db4
 8002788:	24000790 	.word	0x24000790

0800278c <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm>:
{
 800278c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002790:	4699      	mov	r9, r3
    assert((frameNumber > 0) && "HardwareMJPEGDecoder decoding without frame data!");
 8002792:	6943      	ldr	r3, [r0, #20]
{
 8002794:	b085      	sub	sp, #20
 8002796:	4604      	mov	r4, r0
 8002798:	460f      	mov	r7, r1
 800279a:	4690      	mov	r8, r2
    assert((frameNumber > 0) && "HardwareMJPEGDecoder decoding without frame data!");
 800279c:	b92b      	cbnz	r3, 80027aa <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x1e>
 800279e:	4b29      	ldr	r3, [pc, #164]	@ (8002844 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0xb8>)
 80027a0:	21b0      	movs	r1, #176	@ 0xb0
 80027a2:	4a29      	ldr	r2, [pc, #164]	@ (8002848 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0xbc>)
 80027a4:	4829      	ldr	r0, [pc, #164]	@ (800284c <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0xc0>)
 80027a6:	f025 f9eb 	bl	8027b80 <__assert_func>
    readData(currentMovieOffset, 8);
 80027aa:	2208      	movs	r2, #8
 80027ac:	6981      	ldr	r1, [r0, #24]
 80027ae:	f7ff fcd7 	bl	8002160 <_ZN20HardwareMJPEGDecoder8readDataEmm>
    uint32_t streamNo  = getU16(currentMovieOffset);
 80027b2:	69a6      	ldr	r6, [r4, #24]
 80027b4:	4620      	mov	r0, r4
 80027b6:	4631      	mov	r1, r6
 80027b8:	f7ff fcbf 	bl	800213a <_ZN20HardwareMJPEGDecoder6getU16Em>
    uint32_t chunkType = getU16(currentMovieOffset + 2);
 80027bc:	1cb1      	adds	r1, r6, #2
    uint32_t streamNo  = getU16(currentMovieOffset);
 80027be:	4683      	mov	fp, r0
    uint32_t chunkType = getU16(currentMovieOffset + 2);
 80027c0:	4620      	mov	r0, r4
 80027c2:	f7ff fcba 	bl	800213a <_ZN20HardwareMJPEGDecoder6getU16Em>
    uint32_t chunkSize = getU32(currentMovieOffset + 4);
 80027c6:	1d31      	adds	r1, r6, #4
    uint32_t chunkType = getU16(currentMovieOffset + 2);
 80027c8:	4682      	mov	sl, r0
    uint32_t chunkSize = getU32(currentMovieOffset + 4);
 80027ca:	4620      	mov	r0, r4
 80027cc:	f7ff fc9a 	bl	8002104 <_ZN20HardwareMJPEGDecoder6getU32Em>
 80027d0:	f106 0108 	add.w	r1, r6, #8
    if (currentMovieOffset + 8 + chunkSize < movieLength)
 80027d4:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
    uint32_t chunkSize = getU32(currentMovieOffset + 4);
 80027d6:	4605      	mov	r5, r0
    if (currentMovieOffset + 8 + chunkSize < movieLength)
 80027d8:	1842      	adds	r2, r0, r1
 80027da:	429a      	cmp	r2, r3
 80027dc:	d226      	bcs.n	800282c <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0xa0>
        if (streamNo == STREAM0 && chunkType == TYPEDC && chunkSize > 0)
 80027de:	f243 0330 	movw	r3, #12336	@ 0x3030
 80027e2:	459b      	cmp	fp, r3
 80027e4:	d117      	bne.n	8002816 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x8a>
 80027e6:	f246 3364 	movw	r3, #25444	@ 0x6364
 80027ea:	459a      	cmp	sl, r3
 80027ec:	d113      	bne.n	8002816 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x8a>
 80027ee:	b190      	cbz	r0, 8002816 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x8a>
            const uint8_t* chunk = readData(currentMovieOffset, chunkSize);
 80027f0:	4602      	mov	r2, r0
            currentMovieOffset += 8;
 80027f2:	61a1      	str	r1, [r4, #24]
            const uint8_t* chunk = readData(currentMovieOffset, chunkSize);
 80027f4:	4620      	mov	r0, r4
 80027f6:	f7ff fcb3 	bl	8002160 <_ZN20HardwareMJPEGDecoder8readDataEmm>
            decodeMJPEGFrame(chunk, chunkSize, buffer, buffer_width, buffer_height, buffer_stride);
 80027fa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
            const uint8_t* chunk = readData(currentMovieOffset, chunkSize);
 80027fc:	4601      	mov	r1, r0
            decodeMJPEGFrame(chunk, chunkSize, buffer, buffer_width, buffer_height, buffer_stride);
 80027fe:	462a      	mov	r2, r5
 8002800:	4620      	mov	r0, r4
 8002802:	f8cd 8000 	str.w	r8, [sp]
 8002806:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800280a:	463b      	mov	r3, r7
 800280c:	f7ff ff74 	bl	80026f8 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm>
            frameNumber++;
 8002810:	6963      	ldr	r3, [r4, #20]
 8002812:	3301      	adds	r3, #1
 8002814:	6163      	str	r3, [r4, #20]
        currentMovieOffset += chunkSize;
 8002816:	69a3      	ldr	r3, [r4, #24]
 8002818:	442b      	add	r3, r5
        if (chunkSize == 0) /* Empty frame - Skip */
 800281a:	b905      	cbnz	r5, 800281e <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x92>
            currentMovieOffset += 8;
 800281c:	3308      	adds	r3, #8
        currentMovieOffset = (currentMovieOffset + 1) & 0xFFFFFFFE; /* pad to next word */
 800281e:	3301      	adds	r3, #1
        if (currentMovieOffset == lastFrameEnd)
 8002820:	6a62      	ldr	r2, [r4, #36]	@ 0x24
        currentMovieOffset = (currentMovieOffset + 1) & 0xFFFFFFFE; /* pad to next word */
 8002822:	f023 0301 	bic.w	r3, r3, #1
        if (currentMovieOffset == lastFrameEnd)
 8002826:	4293      	cmp	r3, r2
        currentMovieOffset = (currentMovieOffset + 1) & 0xFFFFFFFE; /* pad to next word */
 8002828:	61a3      	str	r3, [r4, #24]
        if (currentMovieOffset == lastFrameEnd)
 800282a:	d109      	bne.n	8002840 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0xb4>
        frameNumber = 1;
 800282c:	2301      	movs	r3, #1
            isCurrentFrameLast = true;
 800282e:	2001      	movs	r0, #1
        frameNumber = 1;
 8002830:	6163      	str	r3, [r4, #20]
        currentMovieOffset = firstFrameOffset; /* start over */
 8002832:	6a23      	ldr	r3, [r4, #32]
 8002834:	61a3      	str	r3, [r4, #24]
}
 8002836:	f080 0001 	eor.w	r0, r0, #1
 800283a:	b005      	add	sp, #20
 800283c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        isCurrentFrameLast = false;
 8002840:	2000      	movs	r0, #0
 8002842:	e7f8      	b.n	8002836 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0xaa>
 8002844:	080290cc 	.word	0x080290cc
 8002848:	080291eb 	.word	0x080291eb
 800284c:	0802901f 	.word	0x0802901f

08002850 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm>:
{
 8002850:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002852:	4604      	mov	r4, r0
    readData(currentMovieOffset, 8);
 8002854:	6981      	ldr	r1, [r0, #24]
{
 8002856:	4616      	mov	r6, r2
    readData(currentMovieOffset, 8);
 8002858:	2208      	movs	r2, #8
 800285a:	f7ff fc81 	bl	8002160 <_ZN20HardwareMJPEGDecoder8readDataEmm>
    const uint32_t length = getU32(currentMovieOffset + 4);
 800285e:	69a7      	ldr	r7, [r4, #24]
 8002860:	4620      	mov	r0, r4
 8002862:	1d39      	adds	r1, r7, #4
 8002864:	f7ff fc4e 	bl	8002104 <_ZN20HardwareMJPEGDecoder6getU32Em>
    const uint8_t* mjpgdata = readData(currentMovieOffset + 8, length);
 8002868:	f107 0108 	add.w	r1, r7, #8
 800286c:	4602      	mov	r2, r0
    const uint32_t length = getU32(currentMovieOffset + 4);
 800286e:	4605      	mov	r5, r0
    const uint8_t* mjpgdata = readData(currentMovieOffset + 8, length);
 8002870:	4620      	mov	r0, r4
 8002872:	f7ff fc75 	bl	8002160 <_ZN20HardwareMJPEGDecoder8readDataEmm>
 8002876:	4601      	mov	r1, r0
    if (frameBuffer) /* only decode if buffers are assigned. */
 8002878:	b16e      	cbz	r6, 8002896 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x46>
        JPEG_Decode_DMA(&hjpeg, const_cast<uint8_t*>(mjpgdata), length, frameBuffer);
 800287a:	462a      	mov	r2, r5
            JpegProcessing_End = JPEG_OutputHandler(&hjpeg);
 800287c:	4c07      	ldr	r4, [pc, #28]	@ (800289c <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x4c>)
 800287e:	4d08      	ldr	r5, [pc, #32]	@ (80028a0 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x50>)
        JPEG_Decode_DMA(&hjpeg, const_cast<uint8_t*>(mjpgdata), length, frameBuffer);
 8002880:	4633      	mov	r3, r6
 8002882:	4807      	ldr	r0, [pc, #28]	@ (80028a0 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x50>)
 8002884:	f7ff fe12 	bl	80024ac <JPEG_Decode_DMA>
            JpegProcessing_End = JPEG_OutputHandler(&hjpeg);
 8002888:	4628      	mov	r0, r5
 800288a:	f7ff fef9 	bl	8002680 <JPEG_OutputHandler>
 800288e:	6020      	str	r0, [r4, #0]
        } while (JpegProcessing_End == 0);
 8002890:	6823      	ldr	r3, [r4, #0]
 8002892:	2b00      	cmp	r3, #0
 8002894:	d0f8      	beq.n	8002888 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x38>
}
 8002896:	2001      	movs	r0, #1
 8002898:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800289a:	bf00      	nop
 800289c:	24009dac 	.word	0x24009dac
 80028a0:	24000594 	.word	0x24000594

080028a4 <DMA2D_CopyBuffer>:
 */
void DMA2D_CopyBuffer(JPEG_Data_BufferTypeDef& job)
{
    uint32_t xRef, yRef, refline;

    yRef = ((job.MCU_index * MCU_WIDTH_PIXELS) / JPEG_ConvertorParams.WidthExtend) * MCU_WIDTH_PIXELS;
 80028a4:	4a1b      	ldr	r2, [pc, #108]	@ (8002914 <DMA2D_CopyBuffer+0x70>)
 80028a6:	f8d0 c00c 	ldr.w	ip, [r0, #12]
{
 80028aa:	b5f0      	push	{r4, r5, r6, r7, lr}
    yRef = ((job.MCU_index * MCU_WIDTH_PIXELS) / JPEG_ConvertorParams.WidthExtend) * MCU_WIDTH_PIXELS;
 80028ac:	ea4f 130c 	mov.w	r3, ip, lsl #4
 80028b0:	6814      	ldr	r4, [r2, #0]
    xRef = ((job.MCU_index * MCU_WIDTH_PIXELS) % JPEG_ConvertorParams.WidthExtend);

    refline = (JPEG_ConvertorParams.ScaledWidth) * yRef + (JPEG_ConvertorParams.bytes_pr_pixel * xRef);
 80028b2:	6855      	ldr	r5, [r2, #4]

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB888);
 80028b4:	4e18      	ldr	r6, [pc, #96]	@ (8002918 <DMA2D_CopyBuffer+0x74>)

    /* Configure DMA2D data size */
    if (job.MCU_index >= (MCU_TotalNb - JPEG_ConvertorParams.MCU_pr_line))  /*  Last line of frame */
 80028b6:	4f19      	ldr	r7, [pc, #100]	@ (800291c <DMA2D_CopyBuffer+0x78>)
    yRef = ((job.MCU_index * MCU_WIDTH_PIXELS) / JPEG_ConvertorParams.WidthExtend) * MCU_WIDTH_PIXELS;
 80028b8:	fbb3 f1f4 	udiv	r1, r3, r4
    xRef = ((job.MCU_index * MCU_WIDTH_PIXELS) % JPEG_ConvertorParams.WidthExtend);
 80028bc:	fb04 3311 	mls	r3, r4, r1, r3
    refline = (JPEG_ConvertorParams.ScaledWidth) * yRef + (JPEG_ConvertorParams.bytes_pr_pixel * xRef);
 80028c0:	434d      	muls	r5, r1
 80028c2:	6911      	ldr	r1, [r2, #16]
 80028c4:	fb01 f403 	mul.w	r4, r1, r3
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB888);
 80028c8:	2301      	movs	r3, #1
    refline = (JPEG_ConvertorParams.ScaledWidth) * yRef + (JPEG_ConvertorParams.bytes_pr_pixel * xRef);
 80028ca:	012d      	lsls	r5, r5, #4
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB888);
 80028cc:	6373      	str	r3, [r6, #52]	@ 0x34
    if (job.MCU_index >= (MCU_TotalNb - JPEG_ConvertorParams.MCU_pr_line))  /*  Last line of frame */
 80028ce:	683f      	ldr	r7, [r7, #0]
 80028d0:	68d3      	ldr	r3, [r2, #12]
 80028d2:	1aff      	subs	r7, r7, r3
    {
        WRITE_REG(DMA2D->NLR, (MCU_HEIGHT_PIXELS - JPEG_ConvertorParams.LastLineHeight | ((MCU_WIDTH_PIXELS * JPEG_ConvertorParams.MCU_pr_line) << DMA2D_NLR_PL_Pos)));
 80028d4:	0519      	lsls	r1, r3, #20
    if (job.MCU_index >= (MCU_TotalNb - JPEG_ConvertorParams.MCU_pr_line))  /*  Last line of frame */
 80028d6:	45bc      	cmp	ip, r7
 80028d8:	d317      	bcc.n	800290a <DMA2D_CopyBuffer+0x66>
        WRITE_REG(DMA2D->NLR, (MCU_HEIGHT_PIXELS - JPEG_ConvertorParams.LastLineHeight | ((MCU_WIDTH_PIXELS * JPEG_ConvertorParams.MCU_pr_line) << DMA2D_NLR_PL_Pos)));
 80028da:	6892      	ldr	r2, [r2, #8]
 80028dc:	f1c2 0210 	rsb	r2, r2, #16
 80028e0:	430a      	orrs	r2, r1
 80028e2:	6472      	str	r2, [r6, #68]	@ 0x44
    {
        WRITE_REG(DMA2D->NLR, (MCU_HEIGHT_PIXELS | ((MCU_WIDTH_PIXELS * JPEG_ConvertorParams.MCU_pr_line) << DMA2D_NLR_PL_Pos)));
    }

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, (reinterpret_cast<uint32_t>(FrameBufferAddress) + refline));
 80028e4:	4a0e      	ldr	r2, [pc, #56]	@ (8002920 <DMA2D_CopyBuffer+0x7c>)

    /* DMA2D OOR register configuration */
    WRITE_REG(DMA2D->OOR, 800 - (MCU_WIDTH_PIXELS * JPEG_ConvertorParams.MCU_pr_line));
 80028e6:	f1c3 0332 	rsb	r3, r3, #50	@ 0x32
    WRITE_REG(DMA2D->OMAR, (reinterpret_cast<uint32_t>(FrameBufferAddress) + refline));
 80028ea:	6811      	ldr	r1, [r2, #0]
    WRITE_REG(DMA2D->OOR, 800 - (MCU_WIDTH_PIXELS * JPEG_ConvertorParams.MCU_pr_line));
 80028ec:	011b      	lsls	r3, r3, #4
    WRITE_REG(DMA2D->OMAR, (reinterpret_cast<uint32_t>(FrameBufferAddress) + refline));
 80028ee:	4a0a      	ldr	r2, [pc, #40]	@ (8002918 <DMA2D_CopyBuffer+0x74>)
 80028f0:	4421      	add	r1, r4
 80028f2:	4429      	add	r1, r5
 80028f4:	63d1      	str	r1, [r2, #60]	@ 0x3c
    WRITE_REG(DMA2D->OOR, 800 - (MCU_WIDTH_PIXELS * JPEG_ConvertorParams.MCU_pr_line));
 80028f6:	6413      	str	r3, [r2, #64]	@ 0x40

    /* DMA2D FGOR register configuration */
    WRITE_REG(DMA2D->FGOR, 0);
 80028f8:	2300      	movs	r3, #0
 80028fa:	6113      	str	r3, [r2, #16]

    /* DMA2D FGPFCCR register configuration */
    WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_YCBCR | (DMA2D_CSS_420 << DMA2D_FGPFCCR_CSS_Pos) | (DMA2D_REPLACE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (0xFFU << DMA2D_FGPFCCR_ALPHA_Pos));
 80028fc:	4b09      	ldr	r3, [pc, #36]	@ (8002924 <DMA2D_CopyBuffer+0x80>)
 80028fe:	61d3      	str	r3, [r2, #28]

    /* Configure DMA2D source address */
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(job.DataBuffer));
 8002900:	6843      	ldr	r3, [r0, #4]
 8002902:	60d3      	str	r3, [r2, #12]

    /* Configure DMA2D contol register */
    WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START | DMA2D_IT_CE | DMA2D_IT_TE);
 8002904:	4b08      	ldr	r3, [pc, #32]	@ (8002928 <DMA2D_CopyBuffer+0x84>)
 8002906:	6013      	str	r3, [r2, #0]
}
 8002908:	bdf0      	pop	{r4, r5, r6, r7, pc}
        WRITE_REG(DMA2D->NLR, (MCU_HEIGHT_PIXELS | ((MCU_WIDTH_PIXELS * JPEG_ConvertorParams.MCU_pr_line) << DMA2D_NLR_PL_Pos)));
 800290a:	f041 0110 	orr.w	r1, r1, #16
 800290e:	6471      	str	r1, [r6, #68]	@ 0x44
 8002910:	e7e8      	b.n	80028e4 <DMA2D_CopyBuffer+0x40>
 8002912:	bf00      	nop
 8002914:	2400077c 	.word	0x2400077c
 8002918:	52001000 	.word	0x52001000
 800291c:	24009da8 	.word	0x24009da8
 8002920:	24009dc4 	.word	0x24009dc4
 8002924:	ff09000b 	.word	0xff09000b
 8002928:	00012301 	.word	0x00012301

0800292c <DMA2D_ExternalJobCompleted>:
void DMA2D_ExternalJobCompleted(JPEG_Data_BufferTypeDef& job)
{
    job.State = JPEG_BUFFER_EMPTY;
    job.DataBufferSize = 0;

    JPEG_OUT_Read_BufferIndex++;
 800292c:	4b0c      	ldr	r3, [pc, #48]	@ (8002960 <DMA2D_ExternalJobCompleted+0x34>)
    job.State = JPEG_BUFFER_EMPTY;
 800292e:	2200      	movs	r2, #0
 8002930:	7002      	strb	r2, [r0, #0]
    JPEG_OUT_Read_BufferIndex++;
 8002932:	6819      	ldr	r1, [r3, #0]
    job.DataBufferSize = 0;
 8002934:	6082      	str	r2, [r0, #8]
    JPEG_OUT_Read_BufferIndex++;
 8002936:	3101      	adds	r1, #1
 8002938:	6019      	str	r1, [r3, #0]
    if (JPEG_OUT_Read_BufferIndex >= NB_OUTPUT_DATA_BUFFERS)
 800293a:	6819      	ldr	r1, [r3, #0]
 800293c:	2901      	cmp	r1, #1
 800293e:	d900      	bls.n	8002942 <DMA2D_ExternalJobCompleted+0x16>
    {
        JPEG_OUT_Read_BufferIndex = 0;
 8002940:	601a      	str	r2, [r3, #0]
    }

    /* Check if last line */
    if (job.MCU_index >= (MCU_TotalNb - JPEG_ConvertorParams.MCU_pr_line))
 8002942:	4b08      	ldr	r3, [pc, #32]	@ (8002964 <DMA2D_ExternalJobCompleted+0x38>)
 8002944:	4a08      	ldr	r2, [pc, #32]	@ (8002968 <DMA2D_ExternalJobCompleted+0x3c>)
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	68d2      	ldr	r2, [r2, #12]
 800294a:	1a9b      	subs	r3, r3, r2
 800294c:	68c2      	ldr	r2, [r0, #12]
 800294e:	429a      	cmp	r2, r3
 8002950:	d302      	bcc.n	8002958 <DMA2D_ExternalJobCompleted+0x2c>
    {
        DMA2D_CopyBufferEnd = 1;
 8002952:	4b06      	ldr	r3, [pc, #24]	@ (800296c <DMA2D_ExternalJobCompleted+0x40>)
 8002954:	2201      	movs	r2, #1
 8002956:	601a      	str	r2, [r3, #0]
    }

    /* Signal decoder thread to wake up and continue decoding */
    SEM_POST(semDecodingDone);
 8002958:	4b05      	ldr	r3, [pc, #20]	@ (8002970 <DMA2D_ExternalJobCompleted+0x44>)
 800295a:	6818      	ldr	r0, [r3, #0]
 800295c:	f00a bb0a 	b.w	800cf74 <osSemaphoreRelease>
 8002960:	24000794 	.word	0x24000794
 8002964:	24009da8 	.word	0x24009da8
 8002968:	2400077c 	.word	0x2400077c
 800296c:	24000790 	.word	0x24000790
 8002970:	24000798 	.word	0x24000798

08002974 <_ZN8touchgfx10OSWrappers10initializeEv>:
 * Initialize frame buffer semaphore and queue/mutex for VSYNC signal.
 */
void OSWrappers::initialize()
{
    // Create a queue of length 1
    frame_buffer_sem = osSemaphoreNew(1, 1, NULL); // Binary semaphore
 8002974:	2101      	movs	r1, #1
 8002976:	2200      	movs	r2, #0
{
 8002978:	b508      	push	{r3, lr}
    frame_buffer_sem = osSemaphoreNew(1, 1, NULL); // Binary semaphore
 800297a:	4608      	mov	r0, r1
 800297c:	f00a fa84 	bl	800ce88 <osSemaphoreNew>
 8002980:	4b0a      	ldr	r3, [pc, #40]	@ (80029ac <_ZN8touchgfx10OSWrappers10initializeEv+0x38>)
 8002982:	6018      	str	r0, [r3, #0]
    assert((frame_buffer_sem != NULL) && "Creation of framebuffer semaphore failed");
 8002984:	b928      	cbnz	r0, 8002992 <_ZN8touchgfx10OSWrappers10initializeEv+0x1e>
 8002986:	4b0a      	ldr	r3, [pc, #40]	@ (80029b0 <_ZN8touchgfx10OSWrappers10initializeEv+0x3c>)
 8002988:	2128      	movs	r1, #40	@ 0x28
 800298a:	4a0a      	ldr	r2, [pc, #40]	@ (80029b4 <_ZN8touchgfx10OSWrappers10initializeEv+0x40>)

    // Create a queue of length 1
    vsync_queue = osMessageQueueNew(1, 4, NULL);
    assert((vsync_queue != NULL) && "Creation of vsync message queue failed");
 800298c:	480a      	ldr	r0, [pc, #40]	@ (80029b8 <_ZN8touchgfx10OSWrappers10initializeEv+0x44>)
 800298e:	f025 f8f7 	bl	8027b80 <__assert_func>
    vsync_queue = osMessageQueueNew(1, 4, NULL);
 8002992:	2200      	movs	r2, #0
 8002994:	2104      	movs	r1, #4
 8002996:	2001      	movs	r0, #1
 8002998:	f00a fb15 	bl	800cfc6 <osMessageQueueNew>
 800299c:	4b07      	ldr	r3, [pc, #28]	@ (80029bc <_ZN8touchgfx10OSWrappers10initializeEv+0x48>)
 800299e:	6018      	str	r0, [r3, #0]
    assert((vsync_queue != NULL) && "Creation of vsync message queue failed");
 80029a0:	b918      	cbnz	r0, 80029aa <_ZN8touchgfx10OSWrappers10initializeEv+0x36>
 80029a2:	4b07      	ldr	r3, [pc, #28]	@ (80029c0 <_ZN8touchgfx10OSWrappers10initializeEv+0x4c>)
 80029a4:	212c      	movs	r1, #44	@ 0x2c
 80029a6:	4a03      	ldr	r2, [pc, #12]	@ (80029b4 <_ZN8touchgfx10OSWrappers10initializeEv+0x40>)
 80029a8:	e7f0      	b.n	800298c <_ZN8touchgfx10OSWrappers10initializeEv+0x18>
}
 80029aa:	bd08      	pop	{r3, pc}
 80029ac:	24009dcc 	.word	0x24009dcc
 80029b0:	0802928c 	.word	0x0802928c
 80029b4:	080292d5 	.word	0x080292d5
 80029b8:	08029304 	.word	0x08029304
 80029bc:	24009dc8 	.word	0x24009dc8
 80029c0:	08029352 	.word	0x08029352

080029c4 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>:
/*
 * Take the frame buffer semaphore. Blocks until semaphore is available.
 */
void OSWrappers::takeFrameBufferSemaphore()
{
    osSemaphoreAcquire(frame_buffer_sem, osWaitForever);
 80029c4:	4b02      	ldr	r3, [pc, #8]	@ (80029d0 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0xc>)
 80029c6:	f04f 31ff 	mov.w	r1, #4294967295
 80029ca:	6818      	ldr	r0, [r3, #0]
 80029cc:	f00a baa6 	b.w	800cf1c <osSemaphoreAcquire>
 80029d0:	24009dcc 	.word	0x24009dcc

080029d4 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>:
/*
 * Release the frame buffer semaphore.
 */
void OSWrappers::giveFrameBufferSemaphore()
{
    osSemaphoreRelease(frame_buffer_sem);
 80029d4:	4b01      	ldr	r3, [pc, #4]	@ (80029dc <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0x8>)
 80029d6:	6818      	ldr	r0, [r3, #0]
 80029d8:	f00a bacc 	b.w	800cf74 <osSemaphoreRelease>
 80029dc:	24009dcc 	.word	0x24009dcc

080029e0 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>:
 * Note must return immediately! This function does not care who has the taken the semaphore,
 * it only serves to make sure that the semaphore is taken by someone.
 */
void OSWrappers::tryTakeFrameBufferSemaphore()
{
    osSemaphoreAcquire(frame_buffer_sem, 0);
 80029e0:	4b02      	ldr	r3, [pc, #8]	@ (80029ec <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv+0xc>)
 80029e2:	2100      	movs	r1, #0
 80029e4:	6818      	ldr	r0, [r3, #0]
 80029e6:	f00a ba99 	b.w	800cf1c <osSemaphoreAcquire>
 80029ea:	bf00      	nop
 80029ec:	24009dcc 	.word	0x24009dcc

080029f0 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>:
 * from ISR.
 *
 * Release the frame buffer semaphore in a way that is safe in interrupt context.
 * Called from ISR.
 */
void OSWrappers::giveFrameBufferSemaphoreFromISR()
 80029f0:	f7ff bff0 	b.w	80029d4 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

080029f4 <_ZN8touchgfx10OSWrappers11signalVSyncEv>:
 * Note This function is called from an ISR, and should (depending on OS) trigger a
 * scheduling.
 */
void OSWrappers::signalVSync()
{
    osMessageQueuePut(vsync_queue, &dummy, 0, 0);
 80029f4:	2300      	movs	r3, #0
 80029f6:	4803      	ldr	r0, [pc, #12]	@ (8002a04 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x10>)
 80029f8:	4903      	ldr	r1, [pc, #12]	@ (8002a08 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x14>)
 80029fa:	461a      	mov	r2, r3
 80029fc:	6800      	ldr	r0, [r0, #0]
 80029fe:	f00a bb1d 	b.w	800d03c <osMessageQueuePut>
 8002a02:	bf00      	nop
 8002a04:	24009dc8 	.word	0x24009dc8
 8002a08:	24000030 	.word	0x24000030

08002a0c <_ZN8touchgfx10OSWrappers12waitForVSyncEv>:
 *
 * Note This function must first clear the mutex/queue and then wait for the next one to
 * occur.
 */
void OSWrappers::waitForVSync()
{
 8002a0c:	b513      	push	{r0, r1, r4, lr}
    uint32_t dummyGet;
    // First make sure the queue is empty, by trying to remove an element with 0 timeout.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, 0);
 8002a0e:	2300      	movs	r3, #0
 8002a10:	4c07      	ldr	r4, [pc, #28]	@ (8002a30 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x24>)
 8002a12:	a901      	add	r1, sp, #4
 8002a14:	461a      	mov	r2, r3
 8002a16:	6820      	ldr	r0, [r4, #0]
 8002a18:	f00a fb41 	bl	800d09e <osMessageQueueGet>

    // Then, wait for next VSYNC to occur.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, osWaitForever);
 8002a1c:	f04f 33ff 	mov.w	r3, #4294967295
 8002a20:	2200      	movs	r2, #0
 8002a22:	a901      	add	r1, sp, #4
 8002a24:	6820      	ldr	r0, [r4, #0]
 8002a26:	f00a fb3a 	bl	800d09e <osMessageQueueGet>
}
 8002a2a:	b002      	add	sp, #8
 8002a2c:	bd10      	pop	{r4, pc}
 8002a2e:	bf00      	nop
 8002a30:	24009dc8 	.word	0x24009dc8

08002a34 <_ZN8touchgfx13DMA_Interface5flushEv>:
        waitForFrameBufferSemaphore();
 8002a34:	6803      	ldr	r3, [r0, #0]
 8002a36:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a38:	4718      	bx	r3

08002a3a <_ZN8STM32DMA10getDMATypeEv>:
     * @return a DMAType value of the concrete DMA_Interface implementation.
     */
    virtual touchgfx::DMAType getDMAType(void)
    {
        return touchgfx::DMA_TYPE_CHROMART;
    }
 8002a3a:	2001      	movs	r0, #1
 8002a3c:	4770      	bx	lr

08002a3e <DMA2D_XferErrorCallback>:
    }

    static void DMA2D_XferErrorCallback(DMA2D_HandleTypeDef* handle)
    {
        (void)handle; // Unused argument
        while (1)
 8002a3e:	e7fe      	b.n	8002a3e <DMA2D_XferErrorCallback>

08002a40 <_ZN8STM32DMA11getBlitCapsEv>:
                                       | BLIT_OP_COPY_WITH_ALPHA
                                       | BLIT_OP_COPY_ARGB8888
                                       | BLIT_OP_COPY_ARGB8888_WITH_ALPHA
                                       | BLIT_OP_COPY_A4
                                       | BLIT_OP_COPY_A8);
}
 8002a40:	f240 30ef 	movw	r0, #1007	@ 0x3ef
 8002a44:	4770      	bx	lr
	...

08002a48 <_ZN8STM32DMA5startEv>:
                execute();
            }
        }
    }

    virtual void start()
 8002a48:	b510      	push	{r4, lr}
 8002a4a:	4604      	mov	r4, r0
    {
        MUTEX_LOCK(mutexIsRunning);
 8002a4c:	f04f 31ff 	mov.w	r1, #4294967295
 8002a50:	f8d0 0da4 	ldr.w	r0, [r0, #3492]	@ 0xda4
 8002a54:	f00a f9d6 	bl	800ce04 <osMutexAcquire>
        if (!queue.isEmpty() && isAllowed && !isRunning)
 8002a58:	6860      	ldr	r0, [r4, #4]
 8002a5a:	6803      	ldr	r3, [r0, #0]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	4798      	blx	r3
 8002a60:	b978      	cbnz	r0, 8002a82 <_ZN8STM32DMA5startEv+0x3a>
 8002a62:	7a63      	ldrb	r3, [r4, #9]
 8002a64:	b16b      	cbz	r3, 8002a82 <_ZN8STM32DMA5startEv+0x3a>
 8002a66:	7a23      	ldrb	r3, [r4, #8]
 8002a68:	b95b      	cbnz	r3, 8002a82 <_ZN8STM32DMA5startEv+0x3a>
        {
            started_by_external_job = false;
 8002a6a:	f884 3da0 	strb.w	r3, [r4, #3488]	@ 0xda0
            execute();
 8002a6e:	4620      	mov	r0, r4
 8002a70:	6823      	ldr	r3, [r4, #0]
 8002a72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a74:	4798      	blx	r3
        else if ((Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex].State == JPEG_BUFFER_FULL) && !isRunning && !isReserved)
        {
            started_by_external_job = true;
            externalJobExecute();
        }
        MUTEX_UNLOCK(mutexIsRunning);
 8002a76:	f8d4 0da4 	ldr.w	r0, [r4, #3492]	@ 0xda4
    }
 8002a7a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        MUTEX_UNLOCK(mutexIsRunning);
 8002a7e:	f00a b9e4 	b.w	800ce4a <osMutexRelease>
        else if ((Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex].State == JPEG_BUFFER_FULL) && !isRunning && !isReserved)
 8002a82:	490b      	ldr	r1, [pc, #44]	@ (8002ab0 <_ZN8STM32DMA5startEv+0x68>)
 8002a84:	4a0b      	ldr	r2, [pc, #44]	@ (8002ab4 <_ZN8STM32DMA5startEv+0x6c>)
 8002a86:	680b      	ldr	r3, [r1, #0]
 8002a88:	011b      	lsls	r3, r3, #4
 8002a8a:	5cd3      	ldrb	r3, [r2, r3]
 8002a8c:	2b01      	cmp	r3, #1
 8002a8e:	d1f2      	bne.n	8002a76 <_ZN8STM32DMA5startEv+0x2e>
 8002a90:	7a20      	ldrb	r0, [r4, #8]
 8002a92:	2800      	cmp	r0, #0
 8002a94:	d1ef      	bne.n	8002a76 <_ZN8STM32DMA5startEv+0x2e>
 8002a96:	7aa0      	ldrb	r0, [r4, #10]
 8002a98:	2800      	cmp	r0, #0
 8002a9a:	d1ec      	bne.n	8002a76 <_ZN8STM32DMA5startEv+0x2e>
     * @param None
     */
    void externalJobExecute()
    {
        isRunning = true;
        DMA2D_CopyBuffer(Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex]);
 8002a9c:	6808      	ldr	r0, [r1, #0]
            started_by_external_job = true;
 8002a9e:	f884 3da0 	strb.w	r3, [r4, #3488]	@ 0xda0
        DMA2D_CopyBuffer(Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex]);
 8002aa2:	eb02 1000 	add.w	r0, r2, r0, lsl #4
        isRunning = true;
 8002aa6:	7223      	strb	r3, [r4, #8]
        DMA2D_CopyBuffer(Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex]);
 8002aa8:	f7ff fefc 	bl	80028a4 <DMA2D_CopyBuffer>
    }
 8002aac:	e7e3      	b.n	8002a76 <_ZN8STM32DMA5startEv+0x2e>
 8002aae:	bf00      	nop
 8002ab0:	24000794 	.word	0x24000794
 8002ab4:	24000010 	.word	0x24000010

08002ab8 <_ZN8STM32DMAD1Ev>:
STM32DMA::~STM32DMA()
 8002ab8:	4b05      	ldr	r3, [pc, #20]	@ (8002ad0 <_ZN8STM32DMAD1Ev+0x18>)
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002aba:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8002abe:	6003      	str	r3, [r0, #0]
 8002ac0:	4b04      	ldr	r3, [pc, #16]	@ (8002ad4 <_ZN8STM32DMAD1Ev+0x1c>)
 8002ac2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  __ASM volatile ("dsb 0xF":::"memory");
 8002ac6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8002aca:	f3bf 8f6f 	isb	sy
}
 8002ace:	4770      	bx	lr
 8002ad0:	080294f0 	.word	0x080294f0
 8002ad4:	e000e100 	.word	0xe000e100

08002ad8 <_ZN8STM32DMAD0Ev>:
STM32DMA::~STM32DMA()
 8002ad8:	b510      	push	{r4, lr}
 8002ada:	4604      	mov	r4, r0
}
 8002adc:	f640 51a8 	movw	r1, #3496	@ 0xda8
 8002ae0:	f7ff ffea 	bl	8002ab8 <_ZN8STM32DMAD1Ev>
 8002ae4:	4620      	mov	r0, r4
 8002ae6:	f024 fcd2 	bl	802748e <_ZdlPvj>
 8002aea:	4620      	mov	r0, r4
 8002aec:	bd10      	pop	{r4, pc}
	...

08002af0 <_ZN8STM32DMA10initializeEv>:
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8002af0:	4b10      	ldr	r3, [pc, #64]	@ (8002b34 <_ZN8STM32DMA10initializeEv+0x44>)
{
 8002af2:	b082      	sub	sp, #8
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8002af4:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 8002af8:	f042 0210 	orr.w	r2, r2, #16
 8002afc:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
 8002b00:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 8002b04:	f002 0210 	and.w	r2, r2, #16
 8002b08:	9201      	str	r2, [sp, #4]
 8002b0a:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_DMA2D_FORCE_RESET();
 8002b0c:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 8002b0e:	f042 0210 	orr.w	r2, r2, #16
 8002b12:	67da      	str	r2, [r3, #124]	@ 0x7c
    __HAL_RCC_DMA2D_RELEASE_RESET();
 8002b14:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 8002b16:	f022 0210 	bic.w	r2, r2, #16
 8002b1a:	67da      	str	r2, [r3, #124]	@ 0x7c
    hdma2d.XferCpltCallback = DMA2D_XferCpltCallback;
 8002b1c:	4b06      	ldr	r3, [pc, #24]	@ (8002b38 <_ZN8STM32DMA10initializeEv+0x48>)
 8002b1e:	4a07      	ldr	r2, [pc, #28]	@ (8002b3c <_ZN8STM32DMA10initializeEv+0x4c>)
 8002b20:	621a      	str	r2, [r3, #32]
    hdma2d.XferErrorCallback = DMA2D_XferErrorCallback;
 8002b22:	4a07      	ldr	r2, [pc, #28]	@ (8002b40 <_ZN8STM32DMA10initializeEv+0x50>)
 8002b24:	625a      	str	r2, [r3, #36]	@ 0x24
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b26:	4b07      	ldr	r3, [pc, #28]	@ (8002b44 <_ZN8STM32DMA10initializeEv+0x54>)
 8002b28:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8002b2c:	609a      	str	r2, [r3, #8]
}
 8002b2e:	b002      	add	sp, #8
 8002b30:	4770      	bx	lr
 8002b32:	bf00      	nop
 8002b34:	58024400 	.word	0x58024400
 8002b38:	24000608 	.word	0x24000608
 8002b3c:	08002d8d 	.word	0x08002d8d
 8002b40:	08002a3f 	.word	0x08002a3f
 8002b44:	e000e100 	.word	0xe000e100

08002b48 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0>:
inline uint32_t STM32DMA::getChromARTOutputFormat(Bitmap::BitmapFormat format)
 8002b48:	b508      	push	{r3, lr}
    switch (format)
 8002b4a:	280a      	cmp	r0, #10
 8002b4c:	d809      	bhi.n	8002b62 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x1a>
 8002b4e:	e8df f000 	tbb	[pc, r0]
 8002b52:	1006      	.short	0x1006
 8002b54:	0808080e 	.word	0x0808080e
 8002b58:	10101008 	.word	0x10101008
 8002b5c:	10          	.byte	0x10
 8002b5d:	00          	.byte	0x00
        dma2dColorMode = DMA2D_OUTPUT_RGB565;
 8002b5e:	2002      	movs	r0, #2
}
 8002b60:	bd08      	pop	{r3, pc}
        assert(0 && "Unsupported Format!");
 8002b62:	4b05      	ldr	r3, [pc, #20]	@ (8002b78 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x30>)
 8002b64:	2191      	movs	r1, #145	@ 0x91
 8002b66:	4a05      	ldr	r2, [pc, #20]	@ (8002b7c <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x34>)
 8002b68:	4805      	ldr	r0, [pc, #20]	@ (8002b80 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x38>)
 8002b6a:	f025 f809 	bl	8027b80 <__assert_func>
        dma2dColorMode = DMA2D_OUTPUT_ARGB8888;
 8002b6e:	2000      	movs	r0, #0
 8002b70:	e7f6      	b.n	8002b60 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x18>
    switch (format)
 8002b72:	2001      	movs	r0, #1
    return dma2dColorMode;
 8002b74:	e7f4      	b.n	8002b60 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x18>
 8002b76:	bf00      	nop
 8002b78:	08029394 	.word	0x08029394
 8002b7c:	080293af 	.word	0x080293af
 8002b80:	080293fa 	.word	0x080293fa

08002b84 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE>:
 * void STM32DMA::setupDataFill(const BlitOp& blitOp) handles blit operation of
 * BLIT_OP_FILL
 * BLIT_OP_FILL_WITH_ALPHA
 */
void STM32DMA::setupDataFill(const BlitOp& blitOp)
{
 8002b84:	b538      	push	{r3, r4, r5, lr}
 8002b86:	460c      	mov	r4, r1
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8002b88:	7f88      	ldrb	r0, [r1, #30]
 8002b8a:	f7ff ffdd 	bl	8002b48 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0>

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 8002b8e:	4b12      	ldr	r3, [pc, #72]	@ (8002bd8 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x54>)

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8002b90:	8aa5      	ldrh	r5, [r4, #20]
 8002b92:	8ae2      	ldrh	r2, [r4, #22]
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 8002b94:	6358      	str	r0, [r3, #52]	@ 0x34
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8002b96:	ea42 4205 	orr.w	r2, r2, r5, lsl #16

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8002b9a:	6921      	ldr	r1, [r4, #16]
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8002b9c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* DMA2D OOR register configuration */
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 8002b9e:	8b62      	ldrh	r2, [r4, #26]
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8002ba0:	63d9      	str	r1, [r3, #60]	@ 0x3c
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 8002ba2:	1b52      	subs	r2, r2, r5
 8002ba4:	641a      	str	r2, [r3, #64]	@ 0x40

    if (blitOp.operation == BLIT_OP_FILL_WITH_ALPHA)
 8002ba6:	6825      	ldr	r5, [r4, #0]
 8002ba8:	2d08      	cmp	r5, #8
 8002baa:	d10e      	bne.n	8002bca <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x46>
    {
        /* DMA2D BGOR register configuration */
        WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 8002bac:	619a      	str	r2, [r3, #24]

        /* DMA2D FGOR register configuration */
        WRITE_REG(DMA2D->FGOR, blitOp.dstLoopStride - blitOp.nSteps);
 8002bae:	611a      	str	r2, [r3, #16]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8002bb0:	6258      	str	r0, [r3, #36]	@ 0x24

        /* Write DMA2D FGPFCCR register */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_REPLACE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | ((blitOp.alpha << 24) & DMA2D_FGPFCCR_ALPHA));
 8002bb2:	4a0a      	ldr	r2, [pc, #40]	@ (8002bdc <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x58>)
 8002bb4:	7f20      	ldrb	r0, [r4, #28]
 8002bb6:	ea42 6200 	orr.w	r2, r2, r0, lsl #24
 8002bba:	61da      	str	r2, [r3, #28]
        return color;
 8002bbc:	68e2      	ldr	r2, [r4, #12]

        /* DMA2D FGCOLR register configuration */
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 8002bbe:	621a      	str	r2, [r3, #32]

        /* Configure DMA2D source address */
        WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_M2M_BLEND | DMA2D_IT_CE | DMA2D_IT_TE));
 8002bc0:	4a07      	ldr	r2, [pc, #28]	@ (8002be0 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x5c>)
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8002bc2:	6159      	str	r1, [r3, #20]
        WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8002bc4:	60d9      	str	r1, [r3, #12]

        /* Set color */
        WRITE_REG(DMA2D->OCOLR, blitOp.color);

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M | DMA2D_IT_CE | DMA2D_IT_TE));
 8002bc6:	601a      	str	r2, [r3, #0]
    }
}
 8002bc8:	bd38      	pop	{r3, r4, r5, pc}
        WRITE_REG(DMA2D->FGOR, 0);
 8002bca:	2200      	movs	r2, #0
        WRITE_REG(DMA2D->FGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_FGPFCCR_AM_Pos));
 8002bcc:	61d8      	str	r0, [r3, #28]
        WRITE_REG(DMA2D->FGOR, 0);
 8002bce:	611a      	str	r2, [r3, #16]
 8002bd0:	68e2      	ldr	r2, [r4, #12]
        WRITE_REG(DMA2D->OCOLR, blitOp.color);
 8002bd2:	639a      	str	r2, [r3, #56]	@ 0x38
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M | DMA2D_IT_CE | DMA2D_IT_TE));
 8002bd4:	4a03      	ldr	r2, [pc, #12]	@ (8002be4 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x60>)
 8002bd6:	e7f6      	b.n	8002bc6 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x42>
 8002bd8:	52001000 	.word	0x52001000
 8002bdc:	00010009 	.word	0x00010009
 8002be0:	00022301 	.word	0x00022301
 8002be4:	00032301 	.word	0x00032301

08002be8 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0>:
inline uint32_t STM32DMA::getChromARTInputFormat(Bitmap::BitmapFormat format)
 8002be8:	b508      	push	{r3, lr}
    switch (format)
 8002bea:	280b      	cmp	r0, #11
 8002bec:	d80b      	bhi.n	8002c06 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x1e>
 8002bee:	e8df f000 	tbb	[pc, r0]
 8002bf2:	1206      	.short	0x1206
 8002bf4:	0a0a0a10 	.word	0x0a0a0a10
 8002bf8:	0808080a 	.word	0x0808080a
 8002bfc:	0808      	.short	0x0808
        dma2dColorMode = DMA2D_INPUT_RGB565;
 8002bfe:	2002      	movs	r0, #2
}
 8002c00:	bd08      	pop	{r3, pc}
        dma2dColorMode = DMA2D_INPUT_L8;
 8002c02:	2005      	movs	r0, #5
        break;
 8002c04:	e7fc      	b.n	8002c00 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x18>
        assert(0 && "Unsupported Format!");
 8002c06:	4b05      	ldr	r3, [pc, #20]	@ (8002c1c <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x34>)
 8002c08:	2170      	movs	r1, #112	@ 0x70
 8002c0a:	4a05      	ldr	r2, [pc, #20]	@ (8002c20 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x38>)
 8002c0c:	4805      	ldr	r0, [pc, #20]	@ (8002c24 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x3c>)
 8002c0e:	f024 ffb7 	bl	8027b80 <__assert_func>
        dma2dColorMode = DMA2D_INPUT_ARGB8888;
 8002c12:	2000      	movs	r0, #0
 8002c14:	e7f4      	b.n	8002c00 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x18>
    switch (format)
 8002c16:	2001      	movs	r0, #1
    return dma2dColorMode;
 8002c18:	e7f2      	b.n	8002c00 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x18>
 8002c1a:	bf00      	nop
 8002c1c:	08029394 	.word	0x08029394
 8002c20:	08029446 	.word	0x08029446
 8002c24:	080293fa 	.word	0x080293fa

08002c28 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE>:
{
 8002c28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
 8002c2c:	7f4f      	ldrb	r7, [r1, #29]
{
 8002c2e:	4689      	mov	r9, r1
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
 8002c30:	4638      	mov	r0, r7
 8002c32:	f7ff ffd9 	bl	8002be8 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0>
    uint32_t dma2dBackgroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8002c36:	f899 501e 	ldrb.w	r5, [r9, #30]
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
 8002c3a:	4680      	mov	r8, r0
    uint32_t dma2dBackgroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8002c3c:	4628      	mov	r0, r5
 8002c3e:	f7ff ffd3 	bl	8002be8 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0>
 8002c42:	4606      	mov	r6, r0
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8002c44:	4628      	mov	r0, r5
 8002c46:	f7ff ff7f 	bl	8002b48 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0>
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 8002c4a:	f8b9 1014 	ldrh.w	r1, [r9, #20]
 8002c4e:	f8b9 401a 	ldrh.w	r4, [r9, #26]
    WRITE_REG(DMA2D->FGOR, blitOp.srcLoopStride - blitOp.nSteps);
 8002c52:	f8b9 2018 	ldrh.w	r2, [r9, #24]
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 8002c56:	4b45      	ldr	r3, [pc, #276]	@ (8002d6c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x144>)
 8002c58:	1a64      	subs	r4, r4, r1
    WRITE_REG(DMA2D->FGOR, blitOp.srcLoopStride - blitOp.nSteps);
 8002c5a:	1a52      	subs	r2, r2, r1
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 8002c5c:	641c      	str	r4, [r3, #64]	@ 0x40
    WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 8002c5e:	619c      	str	r4, [r3, #24]
    WRITE_REG(DMA2D->FGOR, blitOp.srcLoopStride - blitOp.nSteps);
 8002c60:	611a      	str	r2, [r3, #16]
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8002c62:	f8b9 2016 	ldrh.w	r2, [r9, #22]
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 8002c66:	6358      	str	r0, [r3, #52]	@ 0x34
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8002c68:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8002c6c:	f8d9 1010 	ldr.w	r1, [r9, #16]
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8002c70:	645a      	str	r2, [r3, #68]	@ 0x44
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pSrc));
 8002c72:	f8d9 2004 	ldr.w	r2, [r9, #4]
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8002c76:	63d9      	str	r1, [r3, #60]	@ 0x3c
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pSrc));
 8002c78:	60da      	str	r2, [r3, #12]
    switch (blitOp.operation)
 8002c7a:	f8d9 4000 	ldr.w	r4, [r9]
 8002c7e:	f899 201c 	ldrb.w	r2, [r9, #28]
 8002c82:	2c80      	cmp	r4, #128	@ 0x80
 8002c84:	d022      	beq.n	8002ccc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xa4>
 8002c86:	d80f      	bhi.n	8002ca8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x80>
 8002c88:	2c20      	cmp	r4, #32
 8002c8a:	d066      	beq.n	8002d5a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x132>
 8002c8c:	2c40      	cmp	r4, #64	@ 0x40
 8002c8e:	d064      	beq.n	8002d5a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x132>
 8002c90:	2c04      	cmp	r4, #4
 8002c92:	d05c      	beq.n	8002d4e <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x126>
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8002c94:	ea48 6002 	orr.w	r0, r8, r2, lsl #24
 8002c98:	4b34      	ldr	r3, [pc, #208]	@ (8002d6c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x144>)
        if (blitOp.srcFormat != blitOp.dstFormat)
 8002c9a:	42af      	cmp	r7, r5
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8002c9c:	f440 3000 	orr.w	r0, r0, #131072	@ 0x20000
 8002ca0:	61d8      	str	r0, [r3, #28]
        if (blitOp.srcFormat != blitOp.dstFormat)
 8002ca2:	d060      	beq.n	8002d66 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x13e>
            WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START | DMA2D_IT_CE | DMA2D_IT_TE);
 8002ca4:	4a32      	ldr	r2, [pc, #200]	@ (8002d70 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x148>)
 8002ca6:	e03f      	b.n	8002d28 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x100>
    switch (blitOp.operation)
 8002ca8:	f5b4 7f80 	cmp.w	r4, #256	@ 0x100
 8002cac:	d004      	beq.n	8002cb8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x90>
 8002cae:	f5b4 7f00 	cmp.w	r4, #512	@ 0x200
 8002cb2:	d1ef      	bne.n	8002c94 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x6c>
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8002cb4:	482f      	ldr	r0, [pc, #188]	@ (8002d74 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x14c>)
 8002cb6:	e000      	b.n	8002cba <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x92>
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A4 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8002cb8:	482f      	ldr	r0, [pc, #188]	@ (8002d78 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x150>)
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8002cba:	ea40 6202 	orr.w	r2, r0, r2, lsl #24
 8002cbe:	61da      	str	r2, [r3, #28]
 8002cc0:	f8d9 200c 	ldr.w	r2, [r9, #12]
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 8002cc4:	621a      	str	r2, [r3, #32]
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8002cc6:	625e      	str	r6, [r3, #36]	@ 0x24
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8002cc8:	6159      	str	r1, [r3, #20]
 8002cca:	e02c      	b.n	8002d26 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xfe>
            WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8002ccc:	ea48 6002 	orr.w	r0, r8, r2, lsl #24
            const clutData_t* const palette = reinterpret_cast<const clutData_t*>(blitOp.pClut);
 8002cd0:	f8d9 4008 	ldr.w	r4, [r9, #8]
            WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8002cd4:	f440 3000 	orr.w	r0, r0, #131072	@ 0x20000
 8002cd8:	61d8      	str	r0, [r3, #28]
            WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8002cda:	625e      	str	r6, [r3, #36]	@ 0x24
            WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8002cdc:	6159      	str	r1, [r3, #20]
            WRITE_REG(DMA2D->FGCMAR, reinterpret_cast<uint32_t>(&palette->data));
 8002cde:	1d21      	adds	r1, r4, #4
 8002ce0:	62d9      	str	r1, [r3, #44]	@ 0x2c
            switch ((Bitmap::ClutFormat)palette->format)
 8002ce2:	7821      	ldrb	r1, [r4, #0]
 8002ce4:	b141      	cbz	r1, 8002cf8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xd0>
 8002ce6:	2901      	cmp	r1, #1
 8002ce8:	d021      	beq.n	8002d2e <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x106>
                assert(0 && "Unsupported format");
 8002cea:	4b24      	ldr	r3, [pc, #144]	@ (8002d7c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x154>)
 8002cec:	f240 110b 	movw	r1, #267	@ 0x10b
 8002cf0:	4a23      	ldr	r2, [pc, #140]	@ (8002d80 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x158>)
 8002cf2:	4824      	ldr	r0, [pc, #144]	@ (8002d84 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x15c>)
 8002cf4:	f024 ff44 	bl	8027b80 <__assert_func>
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_ARGB8888 << DMA2D_FGPFCCR_CCM_Pos)));
 8002cf8:	69da      	ldr	r2, [r3, #28]
 8002cfa:	8861      	ldrh	r1, [r4, #2]
 8002cfc:	f422 427f 	bic.w	r2, r2, #65280	@ 0xff00
 8002d00:	3901      	subs	r1, #1
 8002d02:	f022 0210 	bic.w	r2, r2, #16
 8002d06:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002d0a:	61da      	str	r2, [r3, #28]
            bool blend = true;
 8002d0c:	2201      	movs	r2, #1
            SET_BIT(DMA2D->FGPFCCR, DMA2D_FGPFCCR_START);
 8002d0e:	4b17      	ldr	r3, [pc, #92]	@ (8002d6c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x144>)
 8002d10:	69d9      	ldr	r1, [r3, #28]
 8002d12:	f041 0120 	orr.w	r1, r1, #32
 8002d16:	61d9      	str	r1, [r3, #28]
            while ((READ_REG(DMA2D->FGPFCCR) & DMA2D_FGPFCCR_START) != 0U)
 8002d18:	69d9      	ldr	r1, [r3, #28]
 8002d1a:	0689      	lsls	r1, r1, #26
 8002d1c:	d4fc      	bmi.n	8002d18 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xf0>
            DMA2D->IFCR = (DMA2D_FLAG_CTC);
 8002d1e:	2110      	movs	r1, #16
 8002d20:	6099      	str	r1, [r3, #8]
            if (blend)
 8002d22:	2a00      	cmp	r2, #0
 8002d24:	d0be      	beq.n	8002ca4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x7c>
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START | DMA2D_IT_CE | DMA2D_IT_TE);
 8002d26:	4a18      	ldr	r2, [pc, #96]	@ (8002d88 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x160>)
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START | DMA2D_IT_CE | DMA2D_IT_TE);
 8002d28:	601a      	str	r2, [r3, #0]
}
 8002d2a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
 8002d2e:	69d9      	ldr	r1, [r3, #28]
                if (blitOp.alpha == 255)
 8002d30:	3aff      	subs	r2, #255	@ 0xff
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
 8002d32:	8860      	ldrh	r0, [r4, #2]
 8002d34:	f421 417f 	bic.w	r1, r1, #65280	@ 0xff00
                if (blitOp.alpha == 255)
 8002d38:	bf18      	it	ne
 8002d3a:	2201      	movne	r2, #1
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
 8002d3c:	3801      	subs	r0, #1
 8002d3e:	f021 0110 	bic.w	r1, r1, #16
 8002d42:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
 8002d46:	f041 0110 	orr.w	r1, r1, #16
 8002d4a:	61d9      	str	r1, [r3, #28]
                break;
 8002d4c:	e7df      	b.n	8002d0e <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xe6>
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8002d4e:	ea48 6202 	orr.w	r2, r8, r2, lsl #24
 8002d52:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8002d56:	61da      	str	r2, [r3, #28]
 8002d58:	e7b5      	b.n	8002cc6 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x9e>
 8002d5a:	ea48 6202 	orr.w	r2, r8, r2, lsl #24
 8002d5e:	4b03      	ldr	r3, [pc, #12]	@ (8002d6c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x144>)
 8002d60:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8002d64:	e7f7      	b.n	8002d56 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x12e>
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START | DMA2D_IT_CE | DMA2D_IT_TE);
 8002d66:	f242 3201 	movw	r2, #8961	@ 0x2301
 8002d6a:	e7dd      	b.n	8002d28 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x100>
 8002d6c:	52001000 	.word	0x52001000
 8002d70:	00012301 	.word	0x00012301
 8002d74:	00020009 	.word	0x00020009
 8002d78:	0002000a 	.word	0x0002000a
 8002d7c:	08029490 	.word	0x08029490
 8002d80:	080294aa 	.word	0x080294aa
 8002d84:	080293fa 	.word	0x080293fa
 8002d88:	00022301 	.word	0x00022301

08002d8c <DMA2D_XferCpltCallback>:
 8002d8c:	4b02      	ldr	r3, [pc, #8]	@ (8002d98 <DMA2D_XferCpltCallback+0xc>)
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	6858      	ldr	r0, [r3, #4]
        dma.signalDMAInterrupt();
 8002d92:	6803      	ldr	r3, [r0, #0]
 8002d94:	695b      	ldr	r3, [r3, #20]
 8002d96:	4718      	bx	r3
 8002d98:	24028e20 	.word	0x24028e20

08002d9c <_ZN8STM32DMA18signalDMAInterruptEv>:
        if (!started_by_external_job)
 8002d9c:	f890 3da0 	ldrb.w	r3, [r0, #3488]	@ 0xda0
    virtual void signalDMAInterrupt()
 8002da0:	b510      	push	{r4, lr}
 8002da2:	4604      	mov	r4, r0
        if (!started_by_external_job)
 8002da4:	b9d3      	cbnz	r3, 8002ddc <_ZN8STM32DMA18signalDMAInterruptEv+0x40>
            executeCompleted();
 8002da6:	6803      	ldr	r3, [r0, #0]
 8002da8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002daa:	4798      	blx	r3
            if (Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex].State == JPEG_BUFFER_FULL && !DMA2D_CopyBufferEnd && !isRunning && !isReserved)
 8002dac:	4919      	ldr	r1, [pc, #100]	@ (8002e14 <_ZN8STM32DMA18signalDMAInterruptEv+0x78>)
 8002dae:	4a1a      	ldr	r2, [pc, #104]	@ (8002e18 <_ZN8STM32DMA18signalDMAInterruptEv+0x7c>)
 8002db0:	680b      	ldr	r3, [r1, #0]
 8002db2:	011b      	lsls	r3, r3, #4
 8002db4:	5cd3      	ldrb	r3, [r2, r3]
 8002db6:	2b01      	cmp	r3, #1
 8002db8:	d12a      	bne.n	8002e10 <_ZN8STM32DMA18signalDMAInterruptEv+0x74>
 8002dba:	4818      	ldr	r0, [pc, #96]	@ (8002e1c <_ZN8STM32DMA18signalDMAInterruptEv+0x80>)
 8002dbc:	6800      	ldr	r0, [r0, #0]
 8002dbe:	bb38      	cbnz	r0, 8002e10 <_ZN8STM32DMA18signalDMAInterruptEv+0x74>
 8002dc0:	7a20      	ldrb	r0, [r4, #8]
 8002dc2:	bb28      	cbnz	r0, 8002e10 <_ZN8STM32DMA18signalDMAInterruptEv+0x74>
 8002dc4:	7aa0      	ldrb	r0, [r4, #10]
 8002dc6:	bb18      	cbnz	r0, 8002e10 <_ZN8STM32DMA18signalDMAInterruptEv+0x74>
        DMA2D_CopyBuffer(Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex]);
 8002dc8:	6808      	ldr	r0, [r1, #0]
                started_by_external_job = true;
 8002dca:	f884 3da0 	strb.w	r3, [r4, #3488]	@ 0xda0
        isRunning = true;
 8002dce:	7223      	strb	r3, [r4, #8]
        DMA2D_CopyBuffer(Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex]);
 8002dd0:	eb02 1000 	add.w	r0, r2, r0, lsl #4
    }
 8002dd4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        DMA2D_CopyBuffer(Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex]);
 8002dd8:	f7ff bd64 	b.w	80028a4 <DMA2D_CopyBuffer>
        if (isRunning)
 8002ddc:	7a03      	ldrb	r3, [r0, #8]
 8002dde:	b143      	cbz	r3, 8002df2 <_ZN8STM32DMA18signalDMAInterruptEv+0x56>
            isRunning = false;
 8002de0:	2300      	movs	r3, #0
 8002de2:	7203      	strb	r3, [r0, #8]
            DMA2D_ExternalJobCompleted(Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex]);
 8002de4:	4b0b      	ldr	r3, [pc, #44]	@ (8002e14 <_ZN8STM32DMA18signalDMAInterruptEv+0x78>)
 8002de6:	6818      	ldr	r0, [r3, #0]
 8002de8:	4b0b      	ldr	r3, [pc, #44]	@ (8002e18 <_ZN8STM32DMA18signalDMAInterruptEv+0x7c>)
 8002dea:	eb03 1000 	add.w	r0, r3, r0, lsl #4
 8002dee:	f7ff fd9d 	bl	800292c <DMA2D_ExternalJobCompleted>
            if (!queue.isEmpty() && isAllowed)
 8002df2:	6860      	ldr	r0, [r4, #4]
 8002df4:	6803      	ldr	r3, [r0, #0]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	4798      	blx	r3
 8002dfa:	b948      	cbnz	r0, 8002e10 <_ZN8STM32DMA18signalDMAInterruptEv+0x74>
 8002dfc:	7a63      	ldrb	r3, [r4, #9]
 8002dfe:	b13b      	cbz	r3, 8002e10 <_ZN8STM32DMA18signalDMAInterruptEv+0x74>
                execute();
 8002e00:	6823      	ldr	r3, [r4, #0]
                started_by_external_job = false;
 8002e02:	f884 0da0 	strb.w	r0, [r4, #3488]	@ 0xda0
                execute();
 8002e06:	4620      	mov	r0, r4
 8002e08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
    }
 8002e0a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
                execute();
 8002e0e:	4718      	bx	r3
    }
 8002e10:	bd10      	pop	{r4, pc}
 8002e12:	bf00      	nop
 8002e14:	24000794 	.word	0x24000794
 8002e18:	24000010 	.word	0x24000010
 8002e1c:	24000790 	.word	0x24000790

08002e20 <_ZN8STM32DMAC1Ev>:
STM32DMA::STM32DMA()
 8002e20:	b570      	push	{r4, r5, r6, lr}
 8002e22:	4604      	mov	r4, r0
    : DMA_Interface(dma_queue), dma_queue(queue_storage, sizeof(queue_storage) / sizeof(queue_storage[0])), started_by_external_job(false), mutexIsRunning(0)
 8002e24:	4b0e      	ldr	r3, [pc, #56]	@ (8002e60 <_ZN8STM32DMAC1Ev+0x40>)
 8002e26:	300c      	adds	r0, #12
     * Constructs a DMA Interface object.
     *
     * @param [in] dmaQueue Reference to the queue of DMA operations.
     */
    DMA_Interface(DMA_Queue& dmaQueue)
        : queue(dmaQueue), isRunning(false), isAllowed(false)
 8002e28:	2600      	movs	r6, #0
 8002e2a:	4625      	mov	r5, r4
 8002e2c:	2260      	movs	r2, #96	@ 0x60
 8002e2e:	6060      	str	r0, [r4, #4]
 8002e30:	7226      	strb	r6, [r4, #8]
 8002e32:	7266      	strb	r6, [r4, #9]
 8002e34:	f845 3b20 	str.w	r3, [r5], #32
 8002e38:	4629      	mov	r1, r5
 8002e3a:	f00e ffeb 	bl	8011e14 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>
 8002e3e:	f504 635a 	add.w	r3, r4, #3488	@ 0xda0
        : color(0)
 8002e42:	60ee      	str	r6, [r5, #12]
 8002e44:	3524      	adds	r5, #36	@ 0x24
 8002e46:	429d      	cmp	r5, r3
 8002e48:	d1fb      	bne.n	8002e42 <_ZN8STM32DMAC1Ev+0x22>
 8002e4a:	f884 6da0 	strb.w	r6, [r4, #3488]	@ 0xda0
    mutexIsRunning = MUTEX_CREATE();
 8002e4e:	2000      	movs	r0, #0
    : DMA_Interface(dma_queue), dma_queue(queue_storage, sizeof(queue_storage) / sizeof(queue_storage[0])), started_by_external_job(false), mutexIsRunning(0)
 8002e50:	f8c4 6da4 	str.w	r6, [r4, #3492]	@ 0xda4
    mutexIsRunning = MUTEX_CREATE();
 8002e54:	f009 ffa1 	bl	800cd9a <osMutexNew>
 8002e58:	f8c4 0da4 	str.w	r0, [r4, #3492]	@ 0xda4
}
 8002e5c:	4620      	mov	r0, r4
 8002e5e:	bd70      	pop	{r4, r5, r6, pc}
 8002e60:	080294f0 	.word	0x080294f0

08002e64 <_ZN8touchgfx5paint8tearDownEv>:
 * @brief Waits until previous DMA drawing operation has finished
 */
void tearDown()
{
    /* Wait for DMA2D to finish last run */
    while ((READ_REG(DMA2D->CR) & DMA2D_CR_START) != 0U);
 8002e64:	4b03      	ldr	r3, [pc, #12]	@ (8002e74 <_ZN8touchgfx5paint8tearDownEv+0x10>)
 8002e66:	681a      	ldr	r2, [r3, #0]
 8002e68:	07d2      	lsls	r2, r2, #31
 8002e6a:	d4fc      	bmi.n	8002e66 <_ZN8touchgfx5paint8tearDownEv+0x2>

    /* Clear transfer flags */
    WRITE_REG(DMA2D->IFCR, DMA2D_FLAG_TC | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8002e6c:	2223      	movs	r2, #35	@ 0x23
 8002e6e:	609a      	str	r2, [r3, #8]
}
 8002e70:	4770      	bx	lr
 8002e72:	bf00      	nop
 8002e74:	52001000 	.word	0x52001000

08002e78 <_ZN8touchgfx5paint9flushLineEPmi>:
void flushLine(uint32_t* addr, int sizebytes)
{
    // This funciton is used when decompressing RGB images to flush
    // the currently decoded pixels in the cache to allow the DMA2D
    // to blend the pixels correcly.
    if (SCB->CCR & SCB_CCR_DC_Msk)
 8002e78:	4a0b      	ldr	r2, [pc, #44]	@ (8002ea8 <_ZN8touchgfx5paint9flushLineEPmi+0x30>)
 8002e7a:	6953      	ldr	r3, [r2, #20]
 8002e7c:	03db      	lsls	r3, r3, #15
 8002e7e:	d511      	bpl.n	8002ea4 <_ZN8touchgfx5paint9flushLineEPmi+0x2c>
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_FORCEINLINE void SCB_CleanDCache_by_Addr (uint32_t *addr, int32_t dsize)
{
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    if ( dsize > 0 ) { 
 8002e80:	2900      	cmp	r1, #0
 8002e82:	dd0f      	ble.n	8002ea4 <_ZN8touchgfx5paint9flushLineEPmi+0x2c>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8002e84:	f000 031f 	and.w	r3, r0, #31
 8002e88:	4419      	add	r1, r3
  __ASM volatile ("dsb 0xF":::"memory");
 8002e8a:	f3bf 8f4f 	dsb	sy

      do {
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
        op_addr += __SCB_DCACHE_LINE_SIZE;
        op_size -= __SCB_DCACHE_LINE_SIZE;
      } while ( op_size > 0 );
 8002e8e:	4401      	add	r1, r0
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8002e90:	f8c2 0268 	str.w	r0, [r2, #616]	@ 0x268
        op_addr += __SCB_DCACHE_LINE_SIZE;
 8002e94:	3020      	adds	r0, #32
      } while ( op_size > 0 );
 8002e96:	1a0b      	subs	r3, r1, r0
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	dcf9      	bgt.n	8002e90 <_ZN8touchgfx5paint9flushLineEPmi+0x18>
 8002e9c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8002ea0:	f3bf 8f6f 	isb	sy
    {
        SCB_CleanDCache_by_Addr(addr, sizebytes);
    }
}
 8002ea4:	4770      	bx	lr
 8002ea6:	bf00      	nop
 8002ea8:	e000ed00 	.word	0xe000ed00

08002eac <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh>:
 *
 * @brief Renders Canvas Widget chunks using DMA.
 * This functions will not generate an interrupt, and will not affect the DMA queue.
 */
void lineFromColor(uint8_t* const ptr, const unsigned count, const uint32_t color, const uint8_t alpha)
{
 8002eac:	b530      	push	{r4, r5, lr}
    /* Wait for DMA2D to finish last run */
    while ((READ_REG(DMA2D->CR) & DMA2D_CR_START) != 0U);
 8002eae:	4c10      	ldr	r4, [pc, #64]	@ (8002ef0 <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh+0x44>)
 8002eb0:	6825      	ldr	r5, [r4, #0]
 8002eb2:	07ed      	lsls	r5, r5, #31
 8002eb4:	d4fc      	bmi.n	8002eb0 <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh+0x4>

    /* Clear transfer flags */
    WRITE_REG(DMA2D->IFCR, DMA2D_FLAG_TC | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8002eb6:	2523      	movs	r5, #35	@ 0x23

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB888);

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (1 | (count << DMA2D_NLR_PL_Pos)));
 8002eb8:	0409      	lsls	r1, r1, #16

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(ptr));

    if (alpha < 0xFF)
 8002eba:	2bff      	cmp	r3, #255	@ 0xff
    WRITE_REG(DMA2D->IFCR, DMA2D_FLAG_TC | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8002ebc:	60a5      	str	r5, [r4, #8]
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB888);
 8002ebe:	f04f 0501 	mov.w	r5, #1
    WRITE_REG(DMA2D->NLR, (1 | (count << DMA2D_NLR_PL_Pos)));
 8002ec2:	ea41 0105 	orr.w	r1, r1, r5
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB888);
 8002ec6:	6365      	str	r5, [r4, #52]	@ 0x34
    WRITE_REG(DMA2D->NLR, (1 | (count << DMA2D_NLR_PL_Pos)));
 8002ec8:	6461      	str	r1, [r4, #68]	@ 0x44
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(ptr));
 8002eca:	63e0      	str	r0, [r4, #60]	@ 0x3c
    if (alpha < 0xFF)
 8002ecc:	d00c      	beq.n	8002ee8 <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh+0x3c>
    {
        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, DMA2D_OUTPUT_RGB888 | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));

        /* Write DMA2D FGPFCCR register */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_REPLACE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (alpha << DMA2D_FGPFCCR_ALPHA_Pos));
 8002ece:	4909      	ldr	r1, [pc, #36]	@ (8002ef4 <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh+0x48>)

        /* DMA2D FGCOLR register configuration */
        WRITE_REG(DMA2D->FGCOLR, color & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | DMA2D_FGCOLR_RED));
 8002ed0:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
        WRITE_REG(DMA2D->BGPFCCR, DMA2D_OUTPUT_RGB888 | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8002ed4:	6265      	str	r5, [r4, #36]	@ 0x24
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_REPLACE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (alpha << DMA2D_FGPFCCR_ALPHA_Pos));
 8002ed6:	ea41 6303 	orr.w	r3, r1, r3, lsl #24
 8002eda:	61e3      	str	r3, [r4, #28]

        /* Configure DMA2D source address */
        WRITE_REG(DMA2D->FGMAR, (uint32_t)ptr);

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_CR_START | DMA2D_M2M_BLEND));
 8002edc:	4b06      	ldr	r3, [pc, #24]	@ (8002ef8 <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh+0x4c>)
        WRITE_REG(DMA2D->FGCOLR, color & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | DMA2D_FGCOLR_RED));
 8002ede:	6222      	str	r2, [r4, #32]
        WRITE_REG(DMA2D->BGMAR, (uint32_t)ptr);
 8002ee0:	6160      	str	r0, [r4, #20]
        WRITE_REG(DMA2D->FGMAR, (uint32_t)ptr);
 8002ee2:	60e0      	str	r0, [r4, #12]

        /* Set Output Color */
        WRITE_REG(DMA2D->OCOLR, color);

        /* Start DMA2D */
        WRITE_REG(DMA2D->CR, (DMA2D_CR_START | DMA2D_R2M));
 8002ee4:	6023      	str	r3, [r4, #0]
    }
}
 8002ee6:	bd30      	pop	{r4, r5, pc}
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_OUTPUT_RGB888 | (DMA2D_NO_MODIF_ALPHA << DMA2D_FGPFCCR_AM_Pos));
 8002ee8:	61e5      	str	r5, [r4, #28]
        WRITE_REG(DMA2D->CR, (DMA2D_CR_START | DMA2D_R2M));
 8002eea:	4b04      	ldr	r3, [pc, #16]	@ (8002efc <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh+0x50>)
        WRITE_REG(DMA2D->OCOLR, color);
 8002eec:	63a2      	str	r2, [r4, #56]	@ 0x38
        WRITE_REG(DMA2D->CR, (DMA2D_CR_START | DMA2D_R2M));
 8002eee:	e7f9      	b.n	8002ee4 <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh+0x38>
 8002ef0:	52001000 	.word	0x52001000
 8002ef4:	00010009 	.word	0x00010009
 8002ef8:	00020001 	.word	0x00020001
 8002efc:	00030001 	.word	0x00030001

08002f00 <_ZN8touchgfx5paint6rgb88814lineFromRGB888EPhPKhjh>:

void lineFromRGB888(uint8_t* const ptr, const uint8_t* const data, const unsigned count, const uint8_t alpha)
{
 8002f00:	b530      	push	{r4, r5, lr}
    /* Wait for DMA2D to finish last run */
    while ((READ_REG(DMA2D->CR) & DMA2D_CR_START) != 0U);
 8002f02:	4c0e      	ldr	r4, [pc, #56]	@ (8002f3c <_ZN8touchgfx5paint6rgb88814lineFromRGB888EPhPKhjh+0x3c>)
 8002f04:	6825      	ldr	r5, [r4, #0]
 8002f06:	07ed      	lsls	r5, r5, #31
 8002f08:	d4fc      	bmi.n	8002f04 <_ZN8touchgfx5paint6rgb88814lineFromRGB888EPhPKhjh+0x4>

    /* Clear transfer flags */
    WRITE_REG(DMA2D->IFCR, DMA2D_FLAG_TC | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8002f0a:	2523      	movs	r5, #35	@ 0x23

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB888);

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (1 | (count << DMA2D_NLR_PL_Pos)));
 8002f0c:	0412      	lsls	r2, r2, #16
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(ptr));

    /* Configure DMA2D source address */
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(data));

    if (alpha < 0xFF)
 8002f0e:	2bff      	cmp	r3, #255	@ 0xff
    WRITE_REG(DMA2D->IFCR, DMA2D_FLAG_TC | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8002f10:	60a5      	str	r5, [r4, #8]
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB888);
 8002f12:	f04f 0501 	mov.w	r5, #1
    WRITE_REG(DMA2D->NLR, (1 | (count << DMA2D_NLR_PL_Pos)));
 8002f16:	ea42 0205 	orr.w	r2, r2, r5
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB888);
 8002f1a:	6365      	str	r5, [r4, #52]	@ 0x34
    WRITE_REG(DMA2D->NLR, (1 | (count << DMA2D_NLR_PL_Pos)));
 8002f1c:	6462      	str	r2, [r4, #68]	@ 0x44
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(ptr));
 8002f1e:	63e0      	str	r0, [r4, #60]	@ 0x3c
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(data));
 8002f20:	60e1      	str	r1, [r4, #12]
    if (alpha < 0xFF)
 8002f22:	d007      	beq.n	8002f34 <_ZN8touchgfx5paint6rgb88814lineFromRGB888EPhPKhjh+0x34>
    {
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_RGB888 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (alpha << DMA2D_FGPFCCR_ALPHA_Pos));
 8002f24:	4a06      	ldr	r2, [pc, #24]	@ (8002f40 <_ZN8touchgfx5paint6rgb88814lineFromRGB888EPhPKhjh+0x40>)
 8002f26:	ea42 6303 	orr.w	r3, r2, r3, lsl #24
 8002f2a:	61e3      	str	r3, [r4, #28]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, DMA2D_INPUT_RGB888 | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8002f2c:	6265      	str	r5, [r4, #36]	@ 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(ptr));
 8002f2e:	6160      	str	r0, [r4, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_CR_START);
 8002f30:	6022      	str	r2, [r4, #0]
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_RGB888 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (alpha << DMA2D_FGPFCCR_ALPHA_Pos));

        /* Start DMA2D : M2M Mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_CR_START);
    }
}
 8002f32:	bd30      	pop	{r4, r5, pc}
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_RGB888 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (alpha << DMA2D_FGPFCCR_ALPHA_Pos));
 8002f34:	4b03      	ldr	r3, [pc, #12]	@ (8002f44 <_ZN8touchgfx5paint6rgb88814lineFromRGB888EPhPKhjh+0x44>)
 8002f36:	61e3      	str	r3, [r4, #28]
        WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_CR_START);
 8002f38:	6025      	str	r5, [r4, #0]
}
 8002f3a:	e7fa      	b.n	8002f32 <_ZN8touchgfx5paint6rgb88814lineFromRGB888EPhPKhjh+0x32>
 8002f3c:	52001000 	.word	0x52001000
 8002f40:	00020001 	.word	0x00020001
 8002f44:	ff020001 	.word	0xff020001

08002f48 <_ZN8touchgfx5paint6rgb88816lineFromARGB8888EPhPKmjh>:

void lineFromARGB8888(uint8_t* const ptr, const uint32_t* const data, const unsigned count, const uint8_t alpha)
{
 8002f48:	b530      	push	{r4, r5, lr}
    /* Wait for DMA2D to finish last run */
    while ((READ_REG(DMA2D->CR) & DMA2D_CR_START) != 0U);
 8002f4a:	4c0b      	ldr	r4, [pc, #44]	@ (8002f78 <_ZN8touchgfx5paint6rgb88816lineFromARGB8888EPhPKmjh+0x30>)
 8002f4c:	6825      	ldr	r5, [r4, #0]
 8002f4e:	07ed      	lsls	r5, r5, #31
 8002f50:	d4fc      	bmi.n	8002f4c <_ZN8touchgfx5paint6rgb88816lineFromARGB8888EPhPKmjh+0x4>
    /* Clear transfer flags */
    WRITE_REG(DMA2D->IFCR, DMA2D_FLAG_TC | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8002f52:	2523      	movs	r5, #35	@ 0x23

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB888);

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (1 | (count << DMA2D_NLR_PL_Pos)));
 8002f54:	0412      	lsls	r2, r2, #16

    /* Configure DMA2D source address */
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(data));

    /* Set DMA2D color mode and alpha mode */
    WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_ARGB8888 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (alpha << DMA2D_FGPFCCR_ALPHA_Pos));
 8002f56:	061b      	lsls	r3, r3, #24
    WRITE_REG(DMA2D->IFCR, DMA2D_FLAG_TC | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8002f58:	60a5      	str	r5, [r4, #8]
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB888);
 8002f5a:	2501      	movs	r5, #1
    WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_ARGB8888 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (alpha << DMA2D_FGPFCCR_ALPHA_Pos));
 8002f5c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
    WRITE_REG(DMA2D->NLR, (1 | (count << DMA2D_NLR_PL_Pos)));
 8002f60:	432a      	orrs	r2, r5
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB888);
 8002f62:	6365      	str	r5, [r4, #52]	@ 0x34
    WRITE_REG(DMA2D->NLR, (1 | (count << DMA2D_NLR_PL_Pos)));
 8002f64:	6462      	str	r2, [r4, #68]	@ 0x44
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(ptr));
 8002f66:	63e0      	str	r0, [r4, #60]	@ 0x3c
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(data));
 8002f68:	60e1      	str	r1, [r4, #12]
    WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_ARGB8888 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (alpha << DMA2D_FGPFCCR_ALPHA_Pos));
 8002f6a:	61e3      	str	r3, [r4, #28]

    /* Configure DMA2D Stream source2 address */
    WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(ptr));

    /* Set DMA2D mode */
    WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_CR_START);
 8002f6c:	4b03      	ldr	r3, [pc, #12]	@ (8002f7c <_ZN8touchgfx5paint6rgb88816lineFromARGB8888EPhPKmjh+0x34>)
    WRITE_REG(DMA2D->BGPFCCR, DMA2D_INPUT_RGB888 | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8002f6e:	6265      	str	r5, [r4, #36]	@ 0x24
    WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(ptr));
 8002f70:	6160      	str	r0, [r4, #20]
    WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_CR_START);
 8002f72:	6023      	str	r3, [r4, #0]
}
 8002f74:	bd30      	pop	{r4, r5, pc}
 8002f76:	bf00      	nop
 8002f78:	52001000 	.word	0x52001000
 8002f7c:	00020001 	.word	0x00020001

08002f80 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_14WipeTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EE8capacityEv>:
    };

    virtual uint16_t capacity() const
    {
        return NUMBER_OF_ELEMENTS;
    }
 8002f80:	2001      	movs	r0, #1
 8002f82:	4770      	bx	lr

08002f84 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_14WipeTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EE12element_sizeEv>:

    virtual uint32_t element_size()
    {
        return sizeof(stBlocks[0]);
    }
 8002f84:	2038      	movs	r0, #56	@ 0x38
 8002f86:	4770      	bx	lr

08002f88 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_14WipeTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EE7elementEt>:

protected:
    virtual void* element(uint16_t index)
    {
        return &stBlocks[index];
 8002f88:	2338      	movs	r3, #56	@ 0x38
 8002f8a:	fb03 0001 	mla	r0, r3, r1, r0
    }
 8002f8e:	3008      	adds	r0, #8
 8002f90:	4770      	bx	lr

08002f92 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_14WipeTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EE7elementEt>:

    virtual const void* element(uint16_t index) const
    {
        return &stBlocks[index];
 8002f92:	2338      	movs	r3, #56	@ 0x38
 8002f94:	fb03 0001 	mla	r0, r3, r1, r0
    }
 8002f98:	3008      	adds	r0, #8
 8002f9a:	4770      	bx	lr

08002f9c <_ZNK8touchgfx9PartitionINS_4meta8TypeListI19graphing_ScreenViewNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    }
 8002f9c:	2001      	movs	r0, #1
 8002f9e:	4770      	bx	lr

08002fa0 <_ZN8touchgfx9PartitionINS_4meta8TypeListI19graphing_ScreenViewNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    }
 8002fa0:	f643 5084 	movw	r0, #15748	@ 0x3d84
 8002fa4:	4770      	bx	lr

08002fa6 <_ZN8touchgfx9PartitionINS_4meta8TypeListI19graphing_ScreenViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 8002fa6:	f643 5384 	movw	r3, #15748	@ 0x3d84
 8002faa:	fb03 0001 	mla	r0, r3, r1, r0
    }
 8002fae:	3008      	adds	r0, #8
 8002fb0:	4770      	bx	lr

08002fb2 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI19graphing_ScreenViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 8002fb2:	f643 5384 	movw	r3, #15748	@ 0x3d84
 8002fb6:	fb03 0001 	mla	r0, r3, r1, r0
    }
 8002fba:	3008      	adds	r0, #8
 8002fbc:	4770      	bx	lr

08002fbe <_ZNK8touchgfx9PartitionINS_4meta8TypeListI24graphing_ScreenPresenterNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    }
 8002fbe:	2001      	movs	r0, #1
 8002fc0:	4770      	bx	lr

08002fc2 <_ZN8touchgfx9PartitionINS_4meta8TypeListI24graphing_ScreenPresenterNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    }
 8002fc2:	2010      	movs	r0, #16
 8002fc4:	4770      	bx	lr

08002fc6 <_ZN8touchgfx9PartitionINS_4meta8TypeListI24graphing_ScreenPresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 8002fc6:	eb00 1001 	add.w	r0, r0, r1, lsl #4
    }
 8002fca:	3008      	adds	r0, #8
 8002fcc:	4770      	bx	lr

08002fce <_ZNK8touchgfx9PartitionINS_4meta8TypeListI24graphing_ScreenPresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 8002fce:	eb00 1001 	add.w	r0, r0, r1, lsl #4
    }
 8002fd2:	3008      	adds	r0, #8
 8002fd4:	4770      	bx	lr

08002fd6 <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>:
     */
    typedef touchgfx::meta::select_type_maxsize< GeneratedTransitionTypes >::type MaxGeneratedTransitionType;

    virtual void gotoStartScreen(FrontendApplication& app)
    {
        app.gotoScreen1ScreenNoTransition();
 8002fd6:	4608      	mov	r0, r1
 8002fd8:	f000 bf92 	b.w	8003f00 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>

08002fdc <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_14WipeTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EED1Ev>:
class Partition : public AbstractPartition
 8002fdc:	4b03      	ldr	r3, [pc, #12]	@ (8002fec <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_14WipeTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EED1Ev+0x10>)
 8002fde:	b510      	push	{r4, lr}
 8002fe0:	4604      	mov	r4, r0
 8002fe2:	6003      	str	r3, [r0, #0]
 8002fe4:	f00c f833 	bl	800f04e <_ZN8touchgfx17AbstractPartitionD1Ev>
 8002fe8:	4620      	mov	r0, r4
 8002fea:	bd10      	pop	{r4, pc}
 8002fec:	080295a8 	.word	0x080295a8

08002ff0 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_14WipeTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EED0Ev>:
 8002ff0:	b510      	push	{r4, lr}
 8002ff2:	4604      	mov	r4, r0
 8002ff4:	f7ff fff2 	bl	8002fdc <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_14WipeTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EED1Ev>
 8002ff8:	2140      	movs	r1, #64	@ 0x40
 8002ffa:	4620      	mov	r0, r4
 8002ffc:	f024 fa47 	bl	802748e <_ZdlPvj>
 8003000:	4620      	mov	r0, r4
 8003002:	bd10      	pop	{r4, pc}

08003004 <_ZN8touchgfx9PartitionINS_4meta8TypeListI19graphing_ScreenViewNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 8003004:	4b03      	ldr	r3, [pc, #12]	@ (8003014 <_ZN8touchgfx9PartitionINS_4meta8TypeListI19graphing_ScreenViewNS2_INS1_3NilES4_EEEELt1EED1Ev+0x10>)
 8003006:	b510      	push	{r4, lr}
 8003008:	4604      	mov	r4, r0
 800300a:	6003      	str	r3, [r0, #0]
 800300c:	f00c f81f 	bl	800f04e <_ZN8touchgfx17AbstractPartitionD1Ev>
 8003010:	4620      	mov	r0, r4
 8003012:	bd10      	pop	{r4, pc}
 8003014:	08029574 	.word	0x08029574

08003018 <_ZN8touchgfx9PartitionINS_4meta8TypeListI19graphing_ScreenViewNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 8003018:	b510      	push	{r4, lr}
 800301a:	4604      	mov	r4, r0
 800301c:	f7ff fff2 	bl	8003004 <_ZN8touchgfx9PartitionINS_4meta8TypeListI19graphing_ScreenViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8003020:	f643 518c 	movw	r1, #15756	@ 0x3d8c
 8003024:	4620      	mov	r0, r4
 8003026:	f024 fa32 	bl	802748e <_ZdlPvj>
 800302a:	4620      	mov	r0, r4
 800302c:	bd10      	pop	{r4, pc}
	...

08003030 <_ZN8touchgfx9PartitionINS_4meta8TypeListI24graphing_ScreenPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 8003030:	4b03      	ldr	r3, [pc, #12]	@ (8003040 <_ZN8touchgfx9PartitionINS_4meta8TypeListI24graphing_ScreenPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev+0x10>)
 8003032:	b510      	push	{r4, lr}
 8003034:	4604      	mov	r4, r0
 8003036:	6003      	str	r3, [r0, #0]
 8003038:	f00c f809 	bl	800f04e <_ZN8touchgfx17AbstractPartitionD1Ev>
 800303c:	4620      	mov	r0, r4
 800303e:	bd10      	pop	{r4, pc}
 8003040:	08029540 	.word	0x08029540

08003044 <_ZN8touchgfx9PartitionINS_4meta8TypeListI24graphing_ScreenPresenterNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 8003044:	b510      	push	{r4, lr}
 8003046:	4604      	mov	r4, r0
 8003048:	f7ff fff2 	bl	8003030 <_ZN8touchgfx9PartitionINS_4meta8TypeListI24graphing_ScreenPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 800304c:	2118      	movs	r1, #24
 800304e:	4620      	mov	r0, r4
 8003050:	f024 fa1d 	bl	802748e <_ZdlPvj>
 8003054:	4620      	mov	r0, r4
 8003056:	bd10      	pop	{r4, pc}

08003058 <_ZN12FrontendHeapD1Ev>:
#ifndef FRONTENDHEAP_HPP
#define FRONTENDHEAP_HPP

#include <gui_generated/common/FrontendHeapBase.hpp>

class FrontendHeap : public FrontendHeapBase
 8003058:	4b09      	ldr	r3, [pc, #36]	@ (8003080 <_ZN12FrontendHeapD1Ev+0x28>)
 800305a:	b510      	push	{r4, lr}
 800305c:	4604      	mov	r4, r0
 800305e:	6003      	str	r3, [r0, #0]
 8003060:	f500 5076 	add.w	r0, r0, #15744	@ 0x3d80
 8003064:	3038      	adds	r0, #56	@ 0x38
 8003066:	f7ff ffb9 	bl	8002fdc <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_14WipeTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EED1Ev>
 800306a:	f104 002c 	add.w	r0, r4, #44	@ 0x2c
 800306e:	f7ff ffc9 	bl	8003004 <_ZN8touchgfx9PartitionINS_4meta8TypeListI19graphing_ScreenViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8003072:	f104 0014 	add.w	r0, r4, #20
 8003076:	f7ff ffdb 	bl	8003030 <_ZN8touchgfx9PartitionINS_4meta8TypeListI24graphing_ScreenPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 800307a:	4620      	mov	r0, r4
 800307c:	bd10      	pop	{r4, pc}
 800307e:	bf00      	nop
 8003080:	080295dc 	.word	0x080295dc

08003084 <__tcf_0>:
                            > > CombinedTransitionTypes;
    typedef touchgfx::meta::select_type_maxsize< CombinedTransitionTypes >::type MaxTransitionType;

    static FrontendHeap& getInstance()
    {
        static FrontendHeap instance;
 8003084:	b508      	push	{r3, lr}
 8003086:	4802      	ldr	r0, [pc, #8]	@ (8003090 <__tcf_0+0xc>)
 8003088:	f7ff ffe6 	bl	8003058 <_ZN12FrontendHeapD1Ev>
 800308c:	bd08      	pop	{r3, pc}
 800308e:	bf00      	nop
 8003090:	2400ac88 	.word	0x2400ac88

08003094 <_ZN12FrontendHeapD0Ev>:
class FrontendHeap : public FrontendHeapBase
 8003094:	b510      	push	{r4, lr}
 8003096:	4604      	mov	r4, r0
 8003098:	f7ff ffde 	bl	8003058 <_ZN12FrontendHeapD1Ev>
 800309c:	f643 7158 	movw	r1, #16216	@ 0x3f58
 80030a0:	4620      	mov	r0, r4
 80030a2:	f024 f9f4 	bl	802748e <_ZdlPvj>
 80030a6:	4620      	mov	r0, r4
 80030a8:	bd10      	pop	{r4, pc}
	...

080030ac <touchgfx_init>:
static ApplicationFontProvider fontProvider;
static Texts texts;
static TouchGFXHAL hal(dma, display, tc, 800, 480);

void touchgfx_init()
{
 80030ac:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    Bitmap::registerBitmapDatabase(BitmapDatabase::getInstance(), BitmapDatabase::getInstanceSize());
 80030b0:	f000 fc58 	bl	8003964 <_ZN14BitmapDatabase11getInstanceEv>
 80030b4:	2400      	movs	r4, #0
 80030b6:	4605      	mov	r5, r0
 80030b8:	f000 fc58 	bl	800396c <_ZN14BitmapDatabase15getInstanceSizeEv>
 80030bc:	4623      	mov	r3, r4
 80030be:	4601      	mov	r1, r0
 80030c0:	4622      	mov	r2, r4
 80030c2:	4628      	mov	r0, r5
 80030c4:	9400      	str	r4, [sp, #0]
 80030c6:	f018 fce9 	bl	801ba9c <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>
     *
     * @param  t The array of texts.
     */
    static void registerTexts(const Texts* t)
    {
        texts = t;
 80030ca:	4b27      	ldr	r3, [pc, #156]	@ (8003168 <touchgfx_init+0xbc>)
 80030cc:	4a27      	ldr	r2, [pc, #156]	@ (800316c <touchgfx_init+0xc0>)
    TypedText::registerTexts(&texts);
    Texts::setLanguage(0);
 80030ce:	4620      	mov	r0, r4
        static FrontendHeap instance;
 80030d0:	4d27      	ldr	r5, [pc, #156]	@ (8003170 <touchgfx_init+0xc4>)
 80030d2:	601a      	str	r2, [r3, #0]
 80030d4:	f001 fa22 	bl	800451c <_ZN8touchgfx5Texts11setLanguageEt>
     *
     * @param renderer  The renderer to be used by LCD when dealing with vector fonts.
     */
    void setVectorFontRenderer(VectorFontRenderer* renderer)
    {
        vectorFontRenderer = renderer;
 80030d8:	4b26      	ldr	r3, [pc, #152]	@ (8003174 <touchgfx_init+0xc8>)
 80030da:	4a27      	ldr	r2, [pc, #156]	@ (8003178 <touchgfx_init+0xcc>)

    display.setVectorFontRenderer(&vectorFontRenderer);

    FontManager::setFontProvider(&fontProvider);
 80030dc:	4827      	ldr	r0, [pc, #156]	@ (800317c <touchgfx_init+0xd0>)
 80030de:	609a      	str	r2, [r3, #8]
 80030e0:	f018 fb88 	bl	801b7f4 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>
 80030e4:	682b      	ldr	r3, [r5, #0]
 80030e6:	f3bf 8f5b 	dmb	ish
 80030ea:	07db      	lsls	r3, r3, #31
 80030ec:	d436      	bmi.n	800315c <touchgfx_init+0xb0>
 80030ee:	4628      	mov	r0, r5
 80030f0:	f024 f9cf 	bl	8027492 <__cxa_guard_acquire>
 80030f4:	b390      	cbz	r0, 800315c <touchgfx_init+0xb0>
     */
    MVPHeap(AbstractPartition& pres,
            AbstractPartition& scr,
            AbstractPartition& tra,
            MVPApplication& app)
        : presenterStorage(pres),
 80030f6:	4c22      	ldr	r4, [pc, #136]	@ (8003180 <touchgfx_init+0xd4>)
          screenStorage(scr),
          transitionStorage(tra),
 80030f8:	4f22      	ldr	r7, [pc, #136]	@ (8003184 <touchgfx_init+0xd8>)
    Model model;
    FrontendApplication app;

private:
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
                     app(model, *this)
 80030fa:	4b23      	ldr	r3, [pc, #140]	@ (8003188 <touchgfx_init+0xdc>)
        : presenterStorage(pres),
 80030fc:	f104 0014 	add.w	r0, r4, #20
          frontendApplication(app)
 8003100:	f107 0644 	add.w	r6, r7, #68	@ 0x44
          screenStorage(scr),
 8003104:	f104 082c 	add.w	r8, r4, #44	@ 0x2c
 8003108:	6023      	str	r3, [r4, #0]
        : presenterStorage(pres),
 800310a:	6060      	str	r0, [r4, #4]
          screenStorage(scr),
 800310c:	f8c4 8008 	str.w	r8, [r4, #8]
          transitionStorage(tra),
 8003110:	60e7      	str	r7, [r4, #12]
          frontendApplication(app)
 8003112:	6126      	str	r6, [r4, #16]
 8003114:	f00b ff9c 	bl	800f050 <_ZN8touchgfx17AbstractPartitionC1Ev>
 8003118:	4b1c      	ldr	r3, [pc, #112]	@ (800318c <touchgfx_init+0xe0>)
 800311a:	4640      	mov	r0, r8
 800311c:	6163      	str	r3, [r4, #20]
 800311e:	f00b ff97 	bl	800f050 <_ZN8touchgfx17AbstractPartitionC1Ev>
 8003122:	4b1b      	ldr	r3, [pc, #108]	@ (8003190 <touchgfx_init+0xe4>)
 8003124:	4638      	mov	r0, r7
 8003126:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8003128:	f00b ff92 	bl	800f050 <_ZN8touchgfx17AbstractPartitionC1Ev>
 800312c:	f504 5340 	add.w	r3, r4, #12288	@ 0x3000
 8003130:	4a18      	ldr	r2, [pc, #96]	@ (8003194 <touchgfx_init+0xe8>)
 8003132:	f603 50f8 	addw	r0, r3, #3576	@ 0xdf8
 8003136:	f8c3 2db8 	str.w	r2, [r3, #3512]	@ 0xdb8
 800313a:	f002 fd1b 	bl	8005b74 <_ZN5ModelC1Ev>
 800313e:	4622      	mov	r2, r4
 8003140:	f107 0140 	add.w	r1, r7, #64	@ 0x40
 8003144:	4630      	mov	r0, r6
 8003146:	f002 fd0b 	bl	8005b60 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>
 800314a:	4630      	mov	r0, r6
 800314c:	f000 fed8 	bl	8003f00 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>
        static FrontendHeap instance;
 8003150:	4811      	ldr	r0, [pc, #68]	@ (8003198 <touchgfx_init+0xec>)
 8003152:	f024 fd33 	bl	8027bbc <atexit>
 8003156:	4628      	mov	r0, r5
 8003158:	f024 f9a7 	bl	80274aa <__cxa_guard_release>
    (void)heap;

    /*
     * Initialize TouchGFX
     */
    hal.initialize();
 800315c:	480f      	ldr	r0, [pc, #60]	@ (800319c <touchgfx_init+0xf0>)
}
 800315e:	b002      	add	sp, #8
 8003160:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    hal.initialize();
 8003164:	f7fe bcd8 	b.w	8001b18 <_ZN11TouchGFXHAL10initializeEv>
 8003168:	24028e84 	.word	0x24028e84
 800316c:	24009e4c 	.word	0x24009e4c
 8003170:	2400ac84 	.word	0x2400ac84
 8003174:	24009e6c 	.word	0x24009e6c
 8003178:	24009e50 	.word	0x24009e50
 800317c:	24000034 	.word	0x24000034
 8003180:	2400ac88 	.word	0x2400ac88
 8003184:	2400ea40 	.word	0x2400ea40
 8003188:	080295dc 	.word	0x080295dc
 800318c:	08029540 	.word	0x08029540
 8003190:	08029574 	.word	0x08029574
 8003194:	080295a8 	.word	0x080295a8
 8003198:	08003085 	.word	0x08003085
 800319c:	24009dd0 	.word	0x24009dd0

080031a0 <touchgfx_components_init>:

void touchgfx_components_init()
{
}
 80031a0:	4770      	bx	lr
	...

080031a4 <touchgfx_taskEntry>:
     * Main event loop. Will wait for VSYNC signal, and then process next frame. Call
     * this function from your GUI task.
     *
     * Note This function never returns
     */
    hal.taskEntry();
 80031a4:	4801      	ldr	r0, [pc, #4]	@ (80031ac <touchgfx_taskEntry+0x8>)
 80031a6:	f7fe bcc9 	b.w	8001b3c <_ZN11TouchGFXHAL9taskEntryEv>
 80031aa:	bf00      	nop
 80031ac:	24009dd0 	.word	0x24009dd0

080031b0 <_GLOBAL__sub_I_touchgfx_init>:
}
 80031b0:	b573      	push	{r0, r1, r4, r5, r6, lr}
static STM32DMA dma;
 80031b2:	4c0e      	ldr	r4, [pc, #56]	@ (80031ec <_GLOBAL__sub_I_touchgfx_init+0x3c>)
{
public:

    STM32TouchController() {}
 80031b4:	4b0e      	ldr	r3, [pc, #56]	@ (80031f0 <_GLOBAL__sub_I_touchgfx_init+0x40>)
 80031b6:	4e0f      	ldr	r6, [pc, #60]	@ (80031f4 <_GLOBAL__sub_I_touchgfx_init+0x44>)
 80031b8:	4620      	mov	r0, r4
static LCD24bpp display;
 80031ba:	4d0f      	ldr	r5, [pc, #60]	@ (80031f8 <_GLOBAL__sub_I_touchgfx_init+0x48>)
 80031bc:	6033      	str	r3, [r6, #0]
static STM32DMA dma;
 80031be:	f7ff fe2f 	bl	8002e20 <_ZN8STM32DMAC1Ev>
static LCD24bpp display;
 80031c2:	4628      	mov	r0, r5
 80031c4:	f01c fb0c 	bl	801f7e0 <_ZN8touchgfx8LCD24bppC1Ev>
static VectorFontRendererImpl vectorFontRenderer;
 80031c8:	480c      	ldr	r0, [pc, #48]	@ (80031fc <_GLOBAL__sub_I_touchgfx_init+0x4c>)
 80031ca:	f015 ffdb 	bl	8019184 <_ZN8touchgfx22VectorFontRendererImplC1Ev>
static TouchGFXHAL hal(dma, display, tc, 800, 480);
 80031ce:	f44f 7348 	mov.w	r3, #800	@ 0x320
 80031d2:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 80031d6:	4621      	mov	r1, r4
 80031d8:	4809      	ldr	r0, [pc, #36]	@ (8003200 <_GLOBAL__sub_I_touchgfx_init+0x50>)
 80031da:	e9cd 3200 	strd	r3, r2, [sp]
 80031de:	4633      	mov	r3, r6
 80031e0:	462a      	mov	r2, r5
 80031e2:	f7fe fd3f 	bl	8001c64 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>
}
 80031e6:	b002      	add	sp, #8
 80031e8:	bd70      	pop	{r4, r5, r6, pc}
 80031ea:	bf00      	nop
 80031ec:	24009ed8 	.word	0x24009ed8
 80031f0:	08028d5c 	.word	0x08028d5c
 80031f4:	2400ac80 	.word	0x2400ac80
 80031f8:	24009e6c 	.word	0x24009e6c
 80031fc:	24009e50 	.word	0x24009e50
 8003200:	24009dd0 	.word	0x24009dd0

08003204 <_GLOBAL__sub_D_touchgfx_init>:
static STM32DMA dma;
 8003204:	4801      	ldr	r0, [pc, #4]	@ (800320c <_GLOBAL__sub_D_touchgfx_init+0x8>)
 8003206:	f7ff bc57 	b.w	8002ab8 <_ZN8STM32DMAD1Ev>
 800320a:	bf00      	nop
 800320c:	24009ed8 	.word	0x24009ed8

08003210 <_ZN8touchgfx8Drawable13getFirstChildEv>:
     * @see Container::getFirstChild
     */
    virtual Drawable* getFirstChild()
    {
        return 0;
    }
 8003210:	2000      	movs	r0, #0
 8003212:	4770      	bx	lr

08003214 <_ZN8touchgfx8Drawable4setXEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setX(int16_t x)
    {
        rect.x = x;
 8003214:	8081      	strh	r1, [r0, #4]
    }
 8003216:	4770      	bx	lr

08003218 <_ZN8touchgfx8Drawable4setYEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setY(int16_t y)
    {
        rect.y = y;
 8003218:	80c1      	strh	r1, [r0, #6]
    }
 800321a:	4770      	bx	lr

0800321c <_ZN8touchgfx8Drawable8setWidthEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setWidth(int16_t width)
    {
        rect.width = width;
 800321c:	8101      	strh	r1, [r0, #8]
    }
 800321e:	4770      	bx	lr

08003220 <_ZN8touchgfx8Drawable9setHeightEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setHeight(int16_t height)
    {
        rect.height = height;
 8003220:	8141      	strh	r1, [r0, #10]
    }
 8003222:	4770      	bx	lr

08003224 <_ZN8touchgfx8Drawable20childGeometryChangedEv>:
     * one or more of its children has changed. Currently only used in ScrollableContainer
     * to redraw scrollbars when the size of the scrolling contents changes.
     */
    virtual void childGeometryChanged()
    {
    }
 8003224:	4770      	bx	lr

08003226 <_ZN8touchgfx8Drawable16handleClickEventERKNS_10ClickEventE>:
     * @param  event The ClickEvent received from the HAL.
     */
    virtual void handleClickEvent(const ClickEvent& event)
    {
        (void)event; // Unused variable
    }
 8003226:	4770      	bx	lr

08003228 <_ZN8touchgfx8Drawable18handleGestureEventERKNS_12GestureEventE>:
     * @param  event The GestureEvent received from the HAL.
     */
    virtual void handleGestureEvent(const GestureEvent& event)
    {
        (void)event; // Unused variable
    }
 8003228:	4770      	bx	lr

0800322a <_ZN8touchgfx8Drawable15handleDragEventERKNS_9DragEventE>:
     * @param  event The DragEvent received from the HAL.
     */
    virtual void handleDragEvent(const DragEvent& event)
    {
        (void)event; // Unused variable
    }
 800322a:	4770      	bx	lr

0800322c <_ZN8touchgfx8Drawable15handleTickEventEv>:
     *
     * @see Application::registerTimerWidget
     */
    virtual void handleTickEvent()
    {
    }
 800322c:	4770      	bx	lr

0800322e <_ZN8touchgfx8Drawable6moveToEss>:
     *
     * @see moveRelative, setXY
     *
     * @note Will redraw the appropriate areas of the screen.
     */
    virtual void moveTo(int16_t x, int16_t y)
 800322e:	b410      	push	{r4}
    {
        moveRelative(x - rect.x, y - rect.y);
 8003230:	88c4      	ldrh	r4, [r0, #6]
 8003232:	6803      	ldr	r3, [r0, #0]
 8003234:	1b12      	subs	r2, r2, r4
 8003236:	8884      	ldrh	r4, [r0, #4]
 8003238:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800323a:	1b09      	subs	r1, r1, r4
 800323c:	b212      	sxth	r2, r2
    }
 800323e:	f85d 4b04 	ldr.w	r4, [sp], #4
        moveRelative(x - rect.x, y - rect.y);
 8003242:	b209      	sxth	r1, r1
 8003244:	4718      	bx	r3

08003246 <_ZN8touchgfx8Drawable14setupDrawChainERKNS_4RectEPPS0_>:
     * @note For TouchGFX internal use only.
     */
    void resetDrawChainCache()
    {
        // Resetting the cached indicators
        cachedVisibleRect.x = UNCACHED_INDICATOR;
 8003246:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800324a:	8183      	strh	r3, [r0, #12]
        cachedAbsX = UNCACHED_INDICATOR;
 800324c:	f04f 33ff 	mov.w	r3, #4294967295
 8003250:	6203      	str	r3, [r0, #32]
     */
    virtual void setupDrawChain(const Rect& invalidatedArea, Drawable** nextPreviousElement)
    {
        (void)invalidatedArea; // Unused variable
        resetDrawChainCache();
        nextDrawChainElement = *nextPreviousElement;
 8003252:	6813      	ldr	r3, [r2, #0]
 8003254:	61c3      	str	r3, [r0, #28]
        *nextPreviousElement = this;
 8003256:	6010      	str	r0, [r2, #0]
    }
 8003258:	4770      	bx	lr

0800325a <_ZNK8touchgfx15AbstractPainter18getRenderingMethodEv>:
     * @return HARDWARE if painter uses hardware based drawing, SOFTWARE otherwise.
     */
    virtual HAL::RenderingMethod getRenderingMethod() const
    {
        return HAL::SOFTWARE;
    }
 800325a:	2000      	movs	r0, #0
 800325c:	4770      	bx	lr

0800325e <_ZNK8touchgfx15AbstractPainter5setupERKNS_4RectE>:
     *
     * @see AbstractPainter::paint, AbstractPainter::tearDown
     */
    virtual bool setup(const Rect& widgetRect) const
    {
        widgetWidth = widgetRect.width;
 800325e:	888b      	ldrh	r3, [r1, #4]
 8003260:	8083      	strh	r3, [r0, #4]
        return true;
    }
 8003262:	2001      	movs	r0, #1
 8003264:	4770      	bx	lr

08003266 <_ZNK8touchgfx15AbstractPainter8tearDownEv>:
     * @see AbstractPainter::paint, AbstractPainter::setup
     */
    virtual void tearDown() const
    {
        return;
    }
 8003266:	4770      	bx	lr

08003268 <_ZN8touchgfx12CanvasWidget8setAlphaEh>:
    }

    /** @copydoc Image::setAlpha */
    virtual void setAlpha(uint8_t newAlpha)
    {
        alpha = newAlpha;
 8003268:	f880 1026 	strb.w	r1, [r0, #38]	@ 0x26
    }
 800326c:	4770      	bx	lr

0800326e <_ZNK8touchgfx12CanvasWidget8getAlphaEv>:

    /** @copydoc Image::getAlpha() */
    virtual uint8_t getAlpha() const
    {
        return alpha;
    }
 800326e:	f890 0026 	ldrb.w	r0, [r0, #38]	@ 0x26
 8003272:	4770      	bx	lr

08003274 <_ZNK8touchgfx12CanvasWidget14getMinimalRectEv>:
     * @param  rectY      The y coordinate.
     * @param  rectWidth  The width.
     * @param  rectHeight The height.
     */
    Rect(int16_t rectX, int16_t rectY, int16_t rectWidth, int16_t rectHeight)
        : x(rectX), y(rectY), width(rectWidth), height(rectHeight)
 8003274:	2200      	movs	r2, #0
     * overwritten in subclasses and return the minimal rectangle containing the shape. See
     * classes such as Circle for example implementations.
     *
     * @return The minimal rectangle containing the shape drawn.
     */
    virtual Rect getMinimalRect() const
 8003276:	b510      	push	{r4, lr}
        return rect.width;
 8003278:	f9b1 4008 	ldrsh.w	r4, [r1, #8]
        return rect.height;
 800327c:	f9b1 100a 	ldrsh.w	r1, [r1, #10]
 8003280:	8002      	strh	r2, [r0, #0]
 8003282:	8042      	strh	r2, [r0, #2]
 8003284:	8084      	strh	r4, [r0, #4]
 8003286:	80c1      	strh	r1, [r0, #6]
    {
        return Rect(0, 0, getWidth(), getHeight());
    }
 8003288:	bd10      	pop	{r4, pc}

0800328a <_ZNK8touchgfx12CanvasWidget12getSolidRectEv>:
        : x(0), y(0), width(0), height(0)
 800328a:	2200      	movs	r2, #0
 800328c:	8002      	strh	r2, [r0, #0]
 800328e:	8042      	strh	r2, [r0, #2]
 8003290:	8082      	strh	r2, [r0, #4]
 8003292:	80c2      	strh	r2, [r0, #6]
     *       lines will not be drawn and may cause strange display artifacts.
     */
    virtual Rect getSolidRect() const
    {
        return Rect();
    }
 8003294:	4770      	bx	lr

08003296 <_ZN8touchgfx17CWRVectorRenderer7setModeENS_14VectorRenderer8DrawModeE>:
     *
     * @param mode The filling mode.
     */
    virtual void setMode(DrawMode mode)
    {
        drawMode = mode;
 8003296:	7701      	strb	r1, [r0, #28]
    }
 8003298:	4770      	bx	lr

0800329a <_ZN8touchgfx17CWRVectorRenderer19setStrokeMiterLimitEf>:

    virtual void setStrokeMiterLimit(float miterLimit)
    {
        strokeMiterLimit = miterLimit;
 800329a:	ed80 0a08 	vstr	s0, [r0, #32]
    }
 800329e:	4770      	bx	lr

080032a0 <_ZN8touchgfx17CWRVectorRenderer17setStrokeLineJoinENS_16VGStrokeLineJoinE>:

    virtual void setStrokeLineJoin(VGStrokeLineJoin lineJoin)
    {
        strokeLineJoin = lineJoin;
 80032a0:	f880 1024 	strb.w	r1, [r0, #36]	@ 0x24
    }
 80032a4:	4770      	bx	lr

080032a6 <_ZN8touchgfx17CWRVectorRenderer16setStrokeLineCapENS_15VGStrokeLineCapE>:

    virtual void setStrokeLineCap(VGStrokeLineCap lineCap)
    {
        strokeLineCap = lineCap;
 80032a6:	f880 1025 	strb.w	r1, [r0, #37]	@ 0x25
    }
 80032aa:	4770      	bx	lr

080032ac <_ZNK8touchgfx17CWRVectorRenderer17CanvasWidgetProxy16drawCanvasWidgetERKNS_4RectE>:
    class CanvasWidgetProxy : public CanvasWidget
    {
        virtual bool drawCanvasWidget(const Rect& invalidatedArea) const
        {
            return true;
        }
 80032ac:	2001      	movs	r0, #1
 80032ae:	4770      	bx	lr

080032b0 <_ZN8touchgfx23CWRVectorRendererRGB88816getLinearPainterEv>:
class CWRVectorRendererRGB888 : public CWRVectorRenderer
{
    virtual AbstractPainterLinearGradient& getLinearPainter()
    {
        return linearPainter;
    }
 80032b0:	3098      	adds	r0, #152	@ 0x98
 80032b2:	4770      	bx	lr

080032b4 <_ZN8touchgfx23CWRVectorRendererRGB88820getColorPainterColorEv>:

    virtual AbstractPainterColor& getColorPainterColor()
    {
        return colorPainter;
    }
 80032b4:	308c      	adds	r0, #140	@ 0x8c
 80032b6:	4770      	bx	lr

080032b8 <_ZN8touchgfx23CWRVectorRendererRGB88815getColorPainterEv>:

    virtual AbstractPainter& getColorPainter()
    {
        return colorPainter;
    }
 80032b8:	3084      	adds	r0, #132	@ 0x84
 80032ba:	4770      	bx	lr

080032bc <__tcf_1>:

namespace touchgfx
{
VectorRenderer* VectorRenderer::getInstance()
{
    static CWRVectorRendererRGB888 renderer;
 80032bc:	4770      	bx	lr
	...

080032c0 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>:
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80032c0:	4b02      	ldr	r3, [pc, #8]	@ (80032cc <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv+0xc>)
 80032c2:	2290      	movs	r2, #144	@ 0x90
 80032c4:	f883 235a 	strb.w	r2, [r3, #858]	@ 0x35a
}

void TouchGFXGeneratedHAL::configureInterrupts()
{
    NVIC_SetPriority(DMA2D_IRQn, 9);
}
 80032c8:	4770      	bx	lr
 80032ca:	bf00      	nop
 80032cc:	e000e100 	.word	0xe000e100

080032d0 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>:
}

void TouchGFXGeneratedHAL::setTFTFrameBuffer(uint16_t* adr)
{
    //setTFTFrameBuffer() not used for selected display interface
}
 80032d0:	4770      	bx	lr

080032d2 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12setRGBBufferEPhj>:

    virtual void setRGBBuffer(uint8_t* buffer, size_t sizeOfBuffer)
    {
        // Running in UI thread / main

        bufferRGB = buffer;
 80032d2:	6301      	str	r1, [r0, #48]	@ 0x30
        topBufferRGB = bufferRGB;
        sizeBufferRGB = sizeOfBuffer;
 80032d4:	e9c0 210d 	strd	r2, r1, [r0, #52]	@ 0x34
    }
 80032d8:	4770      	bx	lr

080032da <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EED1Ev>:
class DedicatedBufferController : public touchgfx::VideoController
 80032da:	4770      	bx	lr

080032dc <_ZN8touchgfx23CWRVectorRendererRGB888D1Ev>:
class CWRVectorRendererRGB888 : public CWRVectorRenderer
 80032dc:	4770      	bx	lr

080032de <_ZN8touchgfx17CWRVectorRenderer17CanvasWidgetProxyD1Ev>:
    class CanvasWidgetProxy : public CanvasWidget
 80032de:	4770      	bx	lr

080032e0 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12setVideoDataEmRNS0_15VideoDataReaderE>:
        mjpegDecoders[handle]->setVideoData(reader);
 80032e0:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 80032e4:	4611      	mov	r1, r2
 80032e6:	6840      	ldr	r0, [r0, #4]
 80032e8:	6803      	ldr	r3, [r0, #0]
 80032ea:	68db      	ldr	r3, [r3, #12]
 80032ec:	4718      	bx	r3

080032ee <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE29setVideoFrameRateCompensationEb>:
        return stream.isPlaying;
    }

    virtual void setVideoFrameRateCompensation(bool allow)
    {
        allowSkipFrames = allow;
 80032ee:	f880 103c 	strb.w	r1, [r0, #60]	@ 0x3c
    }
 80032f2:	4770      	bx	lr

080032f4 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EED0Ev>:
class DedicatedBufferController : public touchgfx::VideoController
 80032f4:	b510      	push	{r4, lr}
 80032f6:	4604      	mov	r4, r0
 80032f8:	2148      	movs	r1, #72	@ 0x48
 80032fa:	f024 f8c8 	bl	802748e <_ZdlPvj>
 80032fe:	4620      	mov	r0, r4
 8003300:	bd10      	pop	{r4, pc}

08003302 <_ZN8touchgfx17CWRVectorRenderer17CanvasWidgetProxyD0Ev>:
 8003302:	b510      	push	{r4, lr}
 8003304:	4604      	mov	r4, r0
 8003306:	212c      	movs	r1, #44	@ 0x2c
 8003308:	f024 f8c1 	bl	802748e <_ZdlPvj>
 800330c:	4620      	mov	r0, r4
 800330e:	bd10      	pop	{r4, pc}

08003310 <_ZN8touchgfx23CWRVectorRendererRGB888D0Ev>:
class CWRVectorRendererRGB888 : public CWRVectorRenderer
 8003310:	b510      	push	{r4, lr}
 8003312:	4604      	mov	r4, r0
 8003314:	21bc      	movs	r1, #188	@ 0xbc
 8003316:	f024 f8ba 	bl	802748e <_ZdlPvj>
 800331a:	4620      	mov	r0, r4
 800331c:	bd10      	pop	{r4, pc}
	...

08003320 <_ZN20TouchGFXGeneratedHAL10initializeEv>:
{
 8003320:	b538      	push	{r3, r4, r5, lr}
 8003322:	4604      	mov	r4, r0
    HAL::initialize();
 8003324:	f00d fed9 	bl	80110da <_ZN8touchgfx3HAL10initializeEv>
    registerEventListener(*(Application::getInstance()));
 8003328:	6823      	ldr	r3, [r4, #0]
 800332a:	6e5d      	ldr	r5, [r3, #100]	@ 0x64
 800332c:	f014 fd8a 	bl	8017e44 <_ZN8touchgfx11Application11getInstanceEv>
 8003330:	4601      	mov	r1, r0
 8003332:	4620      	mov	r0, r4
 8003334:	47a8      	blx	r5
    setFrameBufferStartAddresses((void*)frameBuf, (void*)0, (void*)0);
 8003336:	6823      	ldr	r3, [r4, #0]
 8003338:	4908      	ldr	r1, [pc, #32]	@ (800335c <_ZN20TouchGFXGeneratedHAL10initializeEv+0x3c>)
 800333a:	4620      	mov	r0, r4
 800333c:	f8d3 5088 	ldr.w	r5, [r3, #136]	@ 0x88
 8003340:	2300      	movs	r3, #0
 8003342:	461a      	mov	r2, r3
 8003344:	47a8      	blx	r5
    void addDMA(touchgfx::DMA_Interface& dma)
    {
        this->dma = &dma;
 8003346:	6863      	ldr	r3, [r4, #4]
 8003348:	4a05      	ldr	r2, [pc, #20]	@ (8003360 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x40>)
 800334a:	6453      	str	r3, [r2, #68]	@ 0x44
        mjpegDecoders[index] = &decoder;
 800334c:	4b05      	ldr	r3, [pc, #20]	@ (8003364 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x44>)
 800334e:	605a      	str	r2, [r3, #4]
        bufferRGB = buffer;
 8003350:	4a05      	ldr	r2, [pc, #20]	@ (8003368 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x48>)
 8003352:	631a      	str	r2, [r3, #48]	@ 0x30
        topBufferRGB = bufferRGB;
 8003354:	639a      	str	r2, [r3, #56]	@ 0x38
        sizeBufferRGB = sizeOfBuffer;
 8003356:	4a05      	ldr	r2, [pc, #20]	@ (800336c <_ZN20TouchGFXGeneratedHAL10initializeEv+0x4c>)
 8003358:	635a      	str	r2, [r3, #52]	@ 0x34
}
 800335a:	bd38      	pop	{r3, r4, r5, pc}
 800335c:	d0119400 	.word	0xd0119400
 8003360:	2400ece8 	.word	0x2400ece8
 8003364:	2400eca0 	.word	0x2400eca0
 8003368:	d0000000 	.word	0xd0000000
 800336c:	00119400 	.word	0x00119400

08003370 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE21unregisterVideoWidgetEm>:
    virtual void unregisterVideoWidget(const Handle handle)
 8003370:	b538      	push	{r3, r4, r5, lr}
 8003372:	4604      	mov	r4, r0
 8003374:	460d      	mov	r5, r1
        MUTEX_LOCK(mutexBuffers);
 8003376:	6c40      	ldr	r0, [r0, #68]	@ 0x44
 8003378:	f04f 31ff 	mov.w	r1, #4294967295
 800337c:	f009 fd42 	bl	800ce04 <osMutexAcquire>
        MUTEX_UNLOCK(mutexBuffers);
 8003380:	6c60      	ldr	r0, [r4, #68]	@ 0x44
 8003382:	f009 fd62 	bl	800ce4a <osMutexRelease>
        streams[handle].isActive = false;
 8003386:	2324      	movs	r3, #36	@ 0x24
 8003388:	fb03 4505 	mla	r5, r3, r5, r4
 800338c:	2300      	movs	r3, #0
 800338e:	f885 3028 	strb.w	r3, [r5, #40]	@ 0x28
        if (oneIsActive == false)
 8003392:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 8003396:	b90b      	cbnz	r3, 800339c <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE21unregisterVideoWidgetEm+0x2c>
            topBufferRGB = bufferRGB;
 8003398:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800339a:	63a3      	str	r3, [r4, #56]	@ 0x38
    }
 800339c:	bd38      	pop	{r3, r4, r5, pc}

0800339e <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>:

void TouchGFXGeneratedHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
    HAL::flushFrameBuffer(rect);
 800339e:	f00d be4c 	b.w	801103a <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>

080033a2 <_ZN20TouchGFXGeneratedHAL9blockCopyEPvPKvm>:
}

bool TouchGFXGeneratedHAL::blockCopy(void* RESTRICT dest, const void* RESTRICT src, uint32_t numBytes)
{
    return HAL::blockCopy(dest, src, numBytes);
 80033a2:	f00d bfae 	b.w	8011302 <_ZN8touchgfx3HAL9blockCopyEPvPKvm>

080033a6 <_ZNK8touchgfx8Drawable17invalidateContentEv>:
        if (visible)
 80033a6:	f890 2025 	ldrb.w	r2, [r0, #37]	@ 0x25
 80033aa:	b112      	cbz	r2, 80033b2 <_ZNK8touchgfx8Drawable17invalidateContentEv+0xc>
            invalidate();
 80033ac:	6803      	ldr	r3, [r0, #0]
 80033ae:	695b      	ldr	r3, [r3, #20]
 80033b0:	4718      	bx	r3
    }
 80033b2:	4770      	bx	lr

080033b4 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv>:
    // Because DMA2D access main memory directly, the DCache must be invalidated
    // becuase it could hold a wrong image of the framebuffer. That's done
    // using the function SCB_CleanInvalidateDCache(). Remember to enable
    // "CPU Cache" in the "System Core" settings for "Cortex M7" in CubeMX
    // in order for this function call to work.
    if (SCB->CCR & SCB_CCR_DC_Msk)
 80033b4:	4a12      	ldr	r2, [pc, #72]	@ (8003400 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x4c>)
 80033b6:	6953      	ldr	r3, [r2, #20]
 80033b8:	03db      	lsls	r3, r3, #15
{
 80033ba:	b570      	push	{r4, r5, r6, lr}
    if (SCB->CCR & SCB_CCR_DC_Msk)
 80033bc:	d51e      	bpl.n	80033fc <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x48>
    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 80033be:	2300      	movs	r3, #0
 80033c0:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80033c4:	f3bf 8f4f 	dsb	sy
    ccsidr = SCB->CCSIDR;
 80033c8:	f8d2 3080 	ldr.w	r3, [r2, #128]	@ 0x80
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 80033cc:	f643 74e0 	movw	r4, #16352	@ 0x3fe0
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80033d0:	f3c3 00c9 	ubfx	r0, r3, #3, #10
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80033d4:	f3c3 334e 	ubfx	r3, r3, #13, #15
 80033d8:	015b      	lsls	r3, r3, #5
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 80033da:	ea03 0604 	and.w	r6, r3, r4
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80033de:	4601      	mov	r1, r0
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 80033e0:	ea46 7581 	orr.w	r5, r6, r1, lsl #30
      } while (ways-- != 0U);
 80033e4:	3901      	subs	r1, #1
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 80033e6:	f8c2 5274 	str.w	r5, [r2, #628]	@ 0x274
      } while (ways-- != 0U);
 80033ea:	d2f9      	bcs.n	80033e0 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x2c>
    } while(sets-- != 0U);
 80033ec:	3b20      	subs	r3, #32
 80033ee:	f113 0f20 	cmn.w	r3, #32
 80033f2:	d1f2      	bne.n	80033da <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x26>
 80033f4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80033f8:	f3bf 8f6f 	isb	sy
    {
        SCB_CleanInvalidateDCache();
    }
}
 80033fc:	bd70      	pop	{r4, r5, r6, pc}
 80033fe:	bf00      	nop
 8003400:	e000ed00 	.word	0xe000ed00

08003404 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12getIsPlayingEm>:
    virtual bool getIsPlaying(const Handle handle)
 8003404:	b508      	push	{r3, lr}
        assert(handle < no_streams);
 8003406:	b131      	cbz	r1, 8003416 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12getIsPlayingEm+0x12>
 8003408:	4b04      	ldr	r3, [pc, #16]	@ (800341c <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12getIsPlayingEm+0x18>)
 800340a:	f44f 71b8 	mov.w	r1, #368	@ 0x170
 800340e:	4a04      	ldr	r2, [pc, #16]	@ (8003420 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12getIsPlayingEm+0x1c>)
 8003410:	4804      	ldr	r0, [pc, #16]	@ (8003424 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12getIsPlayingEm+0x20>)
 8003412:	f024 fbb5 	bl	8027b80 <__assert_func>
    }
 8003416:	f890 0029 	ldrb.w	r0, [r0, #41]	@ 0x29
 800341a:	bd08      	pop	{r3, pc}
 800341c:	080295e8 	.word	0x080295e8
 8003420:	080295fc 	.word	0x080295fc
 8003424:	08029786 	.word	0x08029786

08003428 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE19getVideoInformationEmPNS0_16VideoInformationE>:
    virtual void getVideoInformation(const Handle handle, touchgfx::VideoInformation* data)
 8003428:	b510      	push	{r4, lr}
        assert(handle < no_streams);
 800342a:	b131      	cbz	r1, 800343a <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE19getVideoInformationEmPNS0_16VideoInformationE+0x12>
 800342c:	4b06      	ldr	r3, [pc, #24]	@ (8003448 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE19getVideoInformationEmPNS0_16VideoInformationE+0x20>)
 800342e:	f44f 71b5 	mov.w	r1, #362	@ 0x16a
 8003432:	4a06      	ldr	r2, [pc, #24]	@ (800344c <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE19getVideoInformationEmPNS0_16VideoInformationE+0x24>)
 8003434:	4806      	ldr	r0, [pc, #24]	@ (8003450 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE19getVideoInformationEmPNS0_16VideoInformationE+0x28>)
 8003436:	f024 fba3 	bl	8027b80 <__assert_func>
        mjpegDecoders[handle]->getVideoInfo(data);
 800343a:	6840      	ldr	r0, [r0, #4]
 800343c:	4611      	mov	r1, r2
 800343e:	6803      	ldr	r3, [r0, #0]
    }
 8003440:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        mjpegDecoders[handle]->getVideoInfo(data);
 8003444:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003446:	4718      	bx	r3
 8003448:	080295e8 	.word	0x080295e8
 800344c:	080297d0 	.word	0x080297d0
 8003450:	08029786 	.word	0x08029786

08003454 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE21getCurrentFrameNumberEm>:
    virtual uint32_t getCurrentFrameNumber(const Handle handle)
 8003454:	b508      	push	{r3, lr}
        assert(handle < no_streams);
 8003456:	b129      	cbz	r1, 8003464 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE21getCurrentFrameNumberEm+0x10>
 8003458:	4b03      	ldr	r3, [pc, #12]	@ (8003468 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE21getCurrentFrameNumberEm+0x14>)
 800345a:	2179      	movs	r1, #121	@ 0x79
 800345c:	4a03      	ldr	r2, [pc, #12]	@ (800346c <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE21getCurrentFrameNumberEm+0x18>)
 800345e:	4804      	ldr	r0, [pc, #16]	@ (8003470 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE21getCurrentFrameNumberEm+0x1c>)
 8003460:	f024 fb8e 	bl	8027b80 <__assert_func>
    }
 8003464:	68c0      	ldr	r0, [r0, #12]
 8003466:	bd08      	pop	{r3, pc}
 8003468:	080295e8 	.word	0x080295e8
 800346c:	0802997e 	.word	0x0802997e
 8003470:	08029786 	.word	0x08029786

08003474 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm>:
    virtual void setCommand(const Handle handle, Command cmd, uint32_t param)
 8003474:	b510      	push	{r4, lr}
 8003476:	4604      	mov	r4, r0
        assert(handle < no_streams);
 8003478:	b129      	cbz	r1, 8003486 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm+0x12>
 800347a:	4b19      	ldr	r3, [pc, #100]	@ (80034e0 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm+0x6c>)
 800347c:	21a2      	movs	r1, #162	@ 0xa2
 800347e:	4a19      	ldr	r2, [pc, #100]	@ (80034e4 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm+0x70>)
 8003480:	4819      	ldr	r0, [pc, #100]	@ (80034e8 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm+0x74>)
 8003482:	f024 fb7d 	bl	8027b80 <__assert_func>
        switch (cmd)
 8003486:	2a05      	cmp	r2, #5
 8003488:	d815      	bhi.n	80034b6 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm+0x42>
 800348a:	e8df f002 	tbb	[pc, r2]
 800348e:	1103      	.short	0x1103
 8003490:	221c1715 	.word	0x221c1715
            if (mjpegDecoders[handle]->hasVideo())
 8003494:	6840      	ldr	r0, [r0, #4]
 8003496:	6803      	ldr	r3, [r0, #0]
 8003498:	691b      	ldr	r3, [r3, #16]
 800349a:	4798      	blx	r3
 800349c:	b158      	cbz	r0, 80034b6 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm+0x42>
                stream.isPlaying = true;
 800349e:	2301      	movs	r3, #1
 80034a0:	f884 3029 	strb.w	r3, [r4, #41]	@ 0x29
                stream.hasMoreFrames = true; // Assume more frames, lowered on end
 80034a4:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
            stream.frameCount = 0;
 80034a8:	2300      	movs	r3, #0
            stream.tickCount = 0;
 80034aa:	e9c4 3304 	strd	r3, r3, [r4, #16]
            break;
 80034ae:	e002      	b.n	80034b6 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm+0x42>
            stream.isPlaying = false;
 80034b0:	2300      	movs	r3, #0
 80034b2:	f880 3029 	strb.w	r3, [r0, #41]	@ 0x29
    }
 80034b6:	bd10      	pop	{r4, pc}
            stream.seek_to_frame = param;
 80034b8:	6203      	str	r3, [r0, #32]
 80034ba:	e7f5      	b.n	80034a8 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm+0x34>
            stream.seek_to_frame = param;
 80034bc:	6203      	str	r3, [r0, #32]
            stream.isShowingOneFrame = true;
 80034be:	2301      	movs	r3, #1
 80034c0:	f880 302a 	strb.w	r3, [r0, #42]	@ 0x2a
 80034c4:	e7f0      	b.n	80034a8 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm+0x34>
            stream.isPlaying = false;
 80034c6:	2300      	movs	r3, #0
 80034c8:	f880 3029 	strb.w	r3, [r0, #41]	@ 0x29
            stream.seek_to_frame = 1;
 80034cc:	2301      	movs	r3, #1
 80034ce:	6203      	str	r3, [r0, #32]
            break;
 80034d0:	e7f1      	b.n	80034b6 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm+0x42>
            stream.repeat = (param > 0);
 80034d2:	3b00      	subs	r3, #0
 80034d4:	bf18      	it	ne
 80034d6:	2301      	movne	r3, #1
 80034d8:	f880 302d 	strb.w	r3, [r0, #45]	@ 0x2d
    }
 80034dc:	e7eb      	b.n	80034b6 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm+0x42>
 80034de:	bf00      	nop
 80034e0:	080295e8 	.word	0x080295e8
 80034e4:	08029b33 	.word	0x08029b33
 80034e8:	08029786 	.word	0x08029786

080034ec <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12setVideoDataEmPKhm>:
    virtual void setVideoData(const Handle handle, const uint8_t* movie, const uint32_t length)
 80034ec:	b510      	push	{r4, lr}
 80034ee:	460c      	mov	r4, r1
 80034f0:	4611      	mov	r1, r2
 80034f2:	461a      	mov	r2, r3
        assert(handle < no_streams);
 80034f4:	b12c      	cbz	r4, 8003502 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12setVideoDataEmPKhm+0x16>
 80034f6:	4b06      	ldr	r3, [pc, #24]	@ (8003510 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12setVideoDataEmPKhm+0x24>)
 80034f8:	2190      	movs	r1, #144	@ 0x90
 80034fa:	4a06      	ldr	r2, [pc, #24]	@ (8003514 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12setVideoDataEmPKhm+0x28>)
 80034fc:	4806      	ldr	r0, [pc, #24]	@ (8003518 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12setVideoDataEmPKhm+0x2c>)
 80034fe:	f024 fb3f 	bl	8027b80 <__assert_func>
        stream.frameNumber = 0;
 8003502:	60c4      	str	r4, [r0, #12]
        mjpegDecoders[handle]->setVideoData(movie, length);
 8003504:	6840      	ldr	r0, [r0, #4]
 8003506:	6803      	ldr	r3, [r0, #0]
    }
 8003508:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        mjpegDecoders[handle]->setVideoData(movie, length);
 800350c:	689b      	ldr	r3, [r3, #8]
 800350e:	4718      	bx	r3
 8003510:	080295e8 	.word	0x080295e8
 8003514:	08029d07 	.word	0x08029d07
 8003518:	08029786 	.word	0x08029786

0800351c <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12setFrameRateEmmm>:
    virtual void setFrameRate(const Handle handle, uint32_t ui_frames, uint32_t video_frames)
 800351c:	b508      	push	{r3, lr}
        assert(handle < no_streams);
 800351e:	b129      	cbz	r1, 800352c <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12setFrameRateEmmm+0x10>
 8003520:	4b05      	ldr	r3, [pc, #20]	@ (8003538 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12setFrameRateEmmm+0x1c>)
 8003522:	2182      	movs	r1, #130	@ 0x82
 8003524:	4a05      	ldr	r2, [pc, #20]	@ (800353c <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12setFrameRateEmmm+0x20>)
 8003526:	4806      	ldr	r0, [pc, #24]	@ (8003540 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12setFrameRateEmmm+0x24>)
 8003528:	f024 fb2a 	bl	8027b80 <__assert_func>
        stream.tickCount = 0;
 800352c:	e9c0 1104 	strd	r1, r1, [r0, #16]
        stream.frame_rate_video = video_frames;
 8003530:	e9c0 3206 	strd	r3, r2, [r0, #24]
    }
 8003534:	bd08      	pop	{r3, pc}
 8003536:	bf00      	nop
 8003538:	080295e8 	.word	0x080295e8
 800353c:	08029ee2 	.word	0x08029ee2
 8003540:	08029786 	.word	0x08029786

08003544 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE4drawEmRKNS0_4RectERKNS0_11VideoWidgetE>:
        if (firstDrawThisFrame)
 8003544:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
    virtual void draw(const Handle handle, const touchgfx::Rect& invalidatedArea, const touchgfx::VideoWidget& widget)
 8003548:	b510      	push	{r4, lr}
 800354a:	4604      	mov	r4, r0
        if (firstDrawThisFrame)
 800354c:	b153      	cbz	r3, 8003564 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE4drawEmRKNS0_4RectERKNS0_11VideoWidgetE+0x20>
            MUTEX_LOCK(mutexBuffers);
 800354e:	f04f 31ff 	mov.w	r1, #4294967295
 8003552:	6c40      	ldr	r0, [r0, #68]	@ 0x44
 8003554:	f009 fc56 	bl	800ce04 <osMutexAcquire>
            firstDrawThisFrame = false;
 8003558:	2300      	movs	r3, #0
 800355a:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
            uiHasMutex = true;
 800355e:	2301      	movs	r3, #1
 8003560:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
    }
 8003564:	bd10      	pop	{r4, pc}

08003566 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE>:
     *
     * @param [out] last Result, the address of the actual instance of the Widget.
     */
    virtual void getLastChild(int16_t /*x*/, int16_t /*y*/, Drawable** last)
    {
        if (isVisible() && isTouchable())
 8003566:	f890 2025 	ldrb.w	r2, [r0, #37]	@ 0x25
 800356a:	b11a      	cbz	r2, 8003574 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0xe>
 800356c:	f890 2024 	ldrb.w	r2, [r0, #36]	@ 0x24
 8003570:	b102      	cbz	r2, 8003574 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0xe>
        {
            *last = this;
 8003572:	6018      	str	r0, [r3, #0]
        }
    }
 8003574:	4770      	bx	lr
	...

08003578 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE11updateFrameEmRNS0_11VideoWidgetE>:
    virtual bool updateFrame(const Handle handle, touchgfx::VideoWidget& widget)
 8003578:	b510      	push	{r4, lr}
 800357a:	4604      	mov	r4, r0
 800357c:	4610      	mov	r0, r2
        assert(handle < no_streams);
 800357e:	b129      	cbz	r1, 800358c <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE11updateFrameEmRNS0_11VideoWidgetE+0x14>
 8003580:	4b13      	ldr	r3, [pc, #76]	@ (80035d0 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE11updateFrameEmRNS0_11VideoWidgetE+0x58>)
 8003582:	21d0      	movs	r1, #208	@ 0xd0
 8003584:	4a13      	ldr	r2, [pc, #76]	@ (80035d4 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE11updateFrameEmRNS0_11VideoWidgetE+0x5c>)
 8003586:	4814      	ldr	r0, [pc, #80]	@ (80035d8 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE11updateFrameEmRNS0_11VideoWidgetE+0x60>)
 8003588:	f024 fafa 	bl	8027b80 <__assert_func>
        if (stream.isPlaying)
 800358c:	f894 3029 	ldrb.w	r3, [r4, #41]	@ 0x29
 8003590:	b133      	cbz	r3, 80035a0 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE11updateFrameEmRNS0_11VideoWidgetE+0x28>
        return vSyncForFrame;
 8003592:	4b12      	ldr	r3, [pc, #72]	@ (80035dc <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE11updateFrameEmRNS0_11VideoWidgetE+0x64>)
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f893 206b 	ldrb.w	r2, [r3, #107]	@ 0x6b
            stream.tickCount += HAL::getInstance()->getLCDRefreshCount();
 800359a:	6963      	ldr	r3, [r4, #20]
 800359c:	4413      	add	r3, r2
 800359e:	6163      	str	r3, [r4, #20]
        if (stream.doInvalidateOnNextTick)
 80035a0:	f894 302b 	ldrb.w	r3, [r4, #43]	@ 0x2b
 80035a4:	b90b      	cbnz	r3, 80035aa <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE11updateFrameEmRNS0_11VideoWidgetE+0x32>
        return true;
 80035a6:	2001      	movs	r0, #1
    }
 80035a8:	bd10      	pop	{r4, pc}
     *
     * @param [in] videoBuffer Video buffer.
     */
    void setVideoBuffer(uint8_t* const videoBuffer)
    {
        buffer = videoBuffer;
 80035aa:	68a3      	ldr	r3, [r4, #8]
 80035ac:	6303      	str	r3, [r0, #48]	@ 0x30
            widget.invalidate();
 80035ae:	6803      	ldr	r3, [r0, #0]
 80035b0:	695b      	ldr	r3, [r3, #20]
 80035b2:	4798      	blx	r3
            stream.doInvalidateOnNextTick = false;
 80035b4:	2300      	movs	r3, #0
            if (!stream.hasMoreFrames && !stream.repeat)
 80035b6:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
            stream.doInvalidateOnNextTick = false;
 80035ba:	f884 302b 	strb.w	r3, [r4, #43]	@ 0x2b
            if (!stream.hasMoreFrames && !stream.repeat)
 80035be:	2800      	cmp	r0, #0
 80035c0:	d1f1      	bne.n	80035a6 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE11updateFrameEmRNS0_11VideoWidgetE+0x2e>
 80035c2:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d1ee      	bne.n	80035a8 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE11updateFrameEmRNS0_11VideoWidgetE+0x30>
                stream.isPlaying = false;
 80035ca:	f884 0029 	strb.w	r0, [r4, #41]	@ 0x29
 80035ce:	e7eb      	b.n	80035a8 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE11updateFrameEmRNS0_11VideoWidgetE+0x30>
 80035d0:	080295e8 	.word	0x080295e8
 80035d4:	0802a09e 	.word	0x0802a09e
 80035d8:	08029786 	.word	0x08029786
 80035dc:	24028e20 	.word	0x24028e20

080035e0 <_ZN20TouchGFXGeneratedHAL8endFrameEv>:
{
 80035e0:	b570      	push	{r4, r5, r6, lr}
            if (stream.isPlaying || stream.isShowingOneFrame)
 80035e2:	4c1a      	ldr	r4, [pc, #104]	@ (800364c <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x6c>)
 80035e4:	4605      	mov	r5, r0
    HAL::endFrame();
 80035e6:	f00d fd6b 	bl	80110c0 <_ZN8touchgfx3HAL8endFrameEv>
 80035ea:	f894 3029 	ldrb.w	r3, [r4, #41]	@ 0x29
 80035ee:	b913      	cbnz	r3, 80035f6 <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x16>
 80035f0:	f894 302a 	ldrb.w	r3, [r4, #42]	@ 0x2a
 80035f4:	b1ab      	cbz	r3, 8003622 <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x42>
    bool decodeForNextTick(Stream& stream)
    {
        // Running in UI thread

        // Compare tickCount/frameCount to frame_rate_ticks/frame_rate_video
        if ((stream.tickCount * stream.frame_rate_video) >= (stream.frame_rate_ticks * stream.frameCount))
 80035f6:	69e1      	ldr	r1, [r4, #28]
 80035f8:	e9d4 3205 	ldrd	r3, r2, [r4, #20]
 80035fc:	4353      	muls	r3, r2
 80035fe:	6922      	ldr	r2, [r4, #16]
 8003600:	434a      	muls	r2, r1
 8003602:	4293      	cmp	r3, r2
 8003604:	d30d      	bcc.n	8003622 <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x42>
        {
            if (allowSkipFrames)
 8003606:	f894 003c 	ldrb.w	r0, [r4, #60]	@ 0x3c
 800360a:	b138      	cbz	r0, 800361c <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x3c>
            {
                stream.skip_frames = (stream.tickCount * stream.frame_rate_video - stream.frame_rate_ticks * stream.frameCount) / stream.frame_rate_ticks;
 800360c:	1a9b      	subs	r3, r3, r2
 800360e:	fbb3 f2f1 	udiv	r2, r3, r1
                if (stream.skip_frames > 0)
 8003612:	4299      	cmp	r1, r3
                {
                    stream.skip_frames--;
 8003614:	bf98      	it	ls
 8003616:	f102 32ff 	addls.w	r2, r2, #4294967295
 800361a:	6262      	str	r2, [r4, #36]	@ 0x24
                    stream.doDecode = true;
 800361c:	2301      	movs	r3, #1
 800361e:	f884 302e 	strb.w	r3, [r4, #46]	@ 0x2e
        firstDrawThisFrame = true;
 8003622:	2301      	movs	r3, #1
        SEM_POST(semDecode);
 8003624:	6c20      	ldr	r0, [r4, #64]	@ 0x40
        firstDrawThisFrame = true;
 8003626:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
        SEM_POST(semDecode);
 800362a:	f009 fca3 	bl	800cf74 <osSemaphoreRelease>
        if (uiHasMutex)
 800362e:	f894 303e 	ldrb.w	r3, [r4, #62]	@ 0x3e
 8003632:	b12b      	cbz	r3, 8003640 <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x60>
            MUTEX_UNLOCK(mutexBuffers);
 8003634:	6c60      	ldr	r0, [r4, #68]	@ 0x44
 8003636:	f009 fc08 	bl	800ce4a <osMutexRelease>
            uiHasMutex = false;
 800363a:	2300      	movs	r3, #0
 800363c:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
    dma.start();
 8003640:	6868      	ldr	r0, [r5, #4]
 8003642:	6803      	ldr	r3, [r0, #0]
}
 8003644:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    dma.start();
 8003648:	691b      	ldr	r3, [r3, #16]
 800364a:	4718      	bx	r3
 800364c:	2400eca0 	.word	0x2400eca0

08003650 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>:
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003650:	4b04      	ldr	r3, [pc, #16]	@ (8003664 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv+0x14>)
 8003652:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8003656:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  __ASM volatile ("dsb 0xF":::"memory");
 800365a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800365e:	f3bf 8f6f 	isb	sy
}
 8003662:	4770      	bx	lr
 8003664:	e000e100 	.word	0xe000e100

08003668 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>:
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003668:	4b02      	ldr	r3, [pc, #8]	@ (8003674 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv+0xc>)
 800366a:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 800366e:	609a      	str	r2, [r3, #8]
}
 8003670:	4770      	bx	lr
 8003672:	bf00      	nop
 8003674:	e000e100 	.word	0xe000e100

08003678 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE19registerVideoWidgetERNS0_11VideoWidgetE>:
    virtual Handle registerVideoWidget(touchgfx::VideoWidget& widget)
 8003678:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800367a:	4603      	mov	r3, r0
    {
        // Running in UI thread

        for (uint32_t i = 0; i < no_streams; i++)
        {
            if (streams[i].isActive == false)
 800367c:	f890 0028 	ldrb.w	r0, [r0, #40]	@ 0x28
 8003680:	b9d8      	cbnz	r0, 80036ba <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE19registerVideoWidgetERNS0_11VideoWidgetE+0x42>
            {
                // Reset stream parameters
                streams[i] = Stream();
 8003682:	f44f 7280 	mov.w	r2, #256	@ 0x100
        if (topBufferRGB + sizeOfOneDecodeBuffer > (bufferRGB + sizeBufferRGB))
 8003686:	6b9e      	ldr	r6, [r3, #56]	@ 0x38
        streams[handle].isActive = true;
 8003688:	2501      	movs	r5, #1
                streams[i] = Stream();
 800368a:	60d8      	str	r0, [r3, #12]
 800368c:	859a      	strh	r2, [r3, #44]	@ 0x2c
        if (topBufferRGB + sizeOfOneDecodeBuffer > (bufferRGB + sizeBufferRGB))
 800368e:	f506 128c 	add.w	r2, r6, #1146880	@ 0x118000
                streams[i] = Stream();
 8003692:	6118      	str	r0, [r3, #16]
        if (topBufferRGB + sizeOfOneDecodeBuffer > (bufferRGB + sizeBufferRGB))
 8003694:	f502 52a0 	add.w	r2, r2, #5120	@ 0x1400
                streams[i] = Stream();
 8003698:	6158      	str	r0, [r3, #20]
 800369a:	6198      	str	r0, [r3, #24]
 800369c:	61d8      	str	r0, [r3, #28]
 800369e:	6218      	str	r0, [r3, #32]
 80036a0:	6258      	str	r0, [r3, #36]	@ 0x24
        streams[handle].isActive = true;
 80036a2:	629d      	str	r5, [r3, #40]	@ 0x28
                streams[i] = Stream();
 80036a4:	f883 002e 	strb.w	r0, [r3, #46]	@ 0x2e
        if (topBufferRGB + sizeOfOneDecodeBuffer > (bufferRGB + sizeBufferRGB))
 80036a8:	e9d3 470c 	ldrd	r4, r7, [r3, #48]	@ 0x30
 80036ac:	443c      	add	r4, r7
 80036ae:	42a2      	cmp	r2, r4
 80036b0:	d90a      	bls.n	80036c8 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE19registerVideoWidgetERNS0_11VideoWidgetE+0x50>
            assert(0 && "registerVideoWidget: Unable to allocate RGB buffer!");
 80036b2:	4b0b      	ldr	r3, [pc, #44]	@ (80036e0 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE19registerVideoWidgetERNS0_11VideoWidgetE+0x68>)
 80036b4:	2152      	movs	r1, #82	@ 0x52
 80036b6:	4a0b      	ldr	r2, [pc, #44]	@ (80036e4 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE19registerVideoWidgetERNS0_11VideoWidgetE+0x6c>)
 80036b8:	e003      	b.n	80036c2 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE19registerVideoWidgetERNS0_11VideoWidgetE+0x4a>

                return static_cast<VideoController::Handle>(i);
            }
        }

        assert(0 && "Unable to find free video stream handle!");
 80036ba:	4b0b      	ldr	r3, [pc, #44]	@ (80036e8 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE19registerVideoWidgetERNS0_11VideoWidgetE+0x70>)
 80036bc:	f240 11c5 	movw	r1, #453	@ 0x1c5
 80036c0:	4a0a      	ldr	r2, [pc, #40]	@ (80036ec <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE19registerVideoWidgetERNS0_11VideoWidgetE+0x74>)
            assert(0 && "registerVideoWidget: Unable to allocate RGB buffer!");
 80036c2:	480b      	ldr	r0, [pc, #44]	@ (80036f0 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE19registerVideoWidgetERNS0_11VideoWidgetE+0x78>)
 80036c4:	f024 fa5c 	bl	8027b80 <__assert_func>
        decodeBuffers[handle] = (uint32_t*)topBufferRGB;
 80036c8:	609e      	str	r6, [r3, #8]
        topBufferRGB += sizeOfOneDecodeBuffer;
 80036ca:	639a      	str	r2, [r3, #56]	@ 0x38
     * @param height Height of the videoBuffer in pixels
     */
    void setVideoBufferFormat(Bitmap::BitmapFormat bufferFormat, int16_t width, int16_t height)
    {
        format = bufferFormat;
        bufferWidth = width;
 80036cc:	f44f 7348 	mov.w	r3, #800	@ 0x320
        format = bufferFormat;
 80036d0:	f881 5034 	strb.w	r5, [r1, #52]	@ 0x34
        bufferWidth = width;
 80036d4:	86cb      	strh	r3, [r1, #54]	@ 0x36
        bufferHeight = height;
 80036d6:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
        buffer = videoBuffer;
 80036da:	6308      	str	r0, [r1, #48]	@ 0x30
        bufferHeight = height;
 80036dc:	870b      	strh	r3, [r1, #56]	@ 0x38
    }
 80036de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80036e0:	0802a3f6 	.word	0x0802a3f6
 80036e4:	0802a431 	.word	0x0802a431
 80036e8:	0802a23f 	.word	0x0802a23f
 80036ec:	0802a26f 	.word	0x0802a26f
 80036f0:	08029786 	.word	0x08029786

080036f4 <_ZN8touchgfx21AbstractPainterRGB888C1Ev>:
        : widgetWidth(0)
 80036f4:	2300      	movs	r3, #0
 * @see AbstractPainter
 */
class AbstractPainterRGB888 : public AbstractPainter
{
public:
    AbstractPainterRGB888()
 80036f6:	b570      	push	{r4, r5, r6, lr}
        if (instance->useAuxiliaryLCD && instance->auxiliaryLCD)
 80036f8:	4e12      	ldr	r6, [pc, #72]	@ (8003744 <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0x50>)
 80036fa:	4604      	mov	r4, r0
 80036fc:	8083      	strh	r3, [r0, #4]
        : AbstractPainter()
 80036fe:	4b12      	ldr	r3, [pc, #72]	@ (8003748 <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0x54>)
 8003700:	6003      	str	r3, [r0, #0]
 8003702:	6833      	ldr	r3, [r6, #0]
 8003704:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 8003708:	b10a      	cbz	r2, 800370e <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0x1a>
 800370a:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 800370c:	b900      	cbnz	r0, 8003710 <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0x1c>
        return instance->lcdRef;
 800370e:	6898      	ldr	r0, [r3, #8]
     *
     * @return True if the format matches the framebuffer format, false otherwise.
     */
    FORCE_INLINE_FUNCTION static bool compatibleFramebuffer(Bitmap::BitmapFormat format)
    {
        bool compat = HAL::lcd().framebufferFormat() == format;
 8003710:	6803      	ldr	r3, [r0, #0]
 8003712:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003714:	4798      	blx	r3
 8003716:	1e43      	subs	r3, r0, #1
 8003718:	425d      	negs	r5, r3
 800371a:	415d      	adcs	r5, r3
        return auxiliaryLCD;
 800371c:	6833      	ldr	r3, [r6, #0]
 800371e:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
        if (HAL::getInstance()->getAuxiliaryLCD())
 8003720:	b130      	cbz	r0, 8003730 <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0x3c>
        {
            compat |= HAL::getInstance()->getAuxiliaryLCD()->framebufferFormat() == format;
 8003722:	6803      	ldr	r3, [r0, #0]
 8003724:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003726:	4798      	blx	r3
 8003728:	2801      	cmp	r0, #1
 800372a:	bf08      	it	eq
 800372c:	f045 0501 	orreq.w	r5, r5, #1
    {
        assert(compatibleFramebuffer(Bitmap::RGB888) && "The chosen painter only works with RGB888 displays");
 8003730:	b92d      	cbnz	r5, 800373e <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0x4a>
 8003732:	4b06      	ldr	r3, [pc, #24]	@ (800374c <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0x58>)
 8003734:	2127      	movs	r1, #39	@ 0x27
 8003736:	4a06      	ldr	r2, [pc, #24]	@ (8003750 <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0x5c>)
 8003738:	4806      	ldr	r0, [pc, #24]	@ (8003754 <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0x60>)
 800373a:	f024 fa21 	bl	8027b80 <__assert_func>
    }
 800373e:	4620      	mov	r0, r4
 8003740:	bd70      	pop	{r4, r5, r6, pc}
 8003742:	bf00      	nop
 8003744:	24028e20 	.word	0x24028e20
 8003748:	0802a6e4 	.word	0x0802a6e4
 800374c:	0802a5d4 	.word	0x0802a5d4
 8003750:	0802a632 	.word	0x0802a632
 8003754:	0802a66b 	.word	0x0802a66b

08003758 <_ZN8touchgfx14VectorRenderer11getInstanceEv>:
{
 8003758:	b570      	push	{r4, r5, r6, lr}
    static CWRVectorRendererRGB888 renderer;
 800375a:	4e24      	ldr	r6, [pc, #144]	@ (80037ec <_ZN8touchgfx14VectorRenderer11getInstanceEv+0x94>)
 800375c:	6835      	ldr	r5, [r6, #0]
 800375e:	f3bf 8f5b 	dmb	ish
 8003762:	f015 0501 	ands.w	r5, r5, #1
 8003766:	d13f      	bne.n	80037e8 <_ZN8touchgfx14VectorRenderer11getInstanceEv+0x90>
 8003768:	4630      	mov	r0, r6
 800376a:	f023 fe92 	bl	8027492 <__cxa_guard_acquire>
 800376e:	2800      	cmp	r0, #0
 8003770:	d03a      	beq.n	80037e8 <_ZN8touchgfx14VectorRenderer11getInstanceEv+0x90>
class CWRVectorRenderer : public VectorRenderer
 8003772:	4c1f      	ldr	r4, [pc, #124]	@ (80037f0 <_ZN8touchgfx14VectorRenderer11getInstanceEv+0x98>)
 8003774:	4b1f      	ldr	r3, [pc, #124]	@ (80037f4 <_ZN8touchgfx14VectorRenderer11getInstanceEv+0x9c>)
 8003776:	f104 0034 	add.w	r0, r4, #52	@ 0x34
 800377a:	6125      	str	r5, [r4, #16]
 800377c:	84e5      	strh	r5, [r4, #38]	@ 0x26
 800377e:	62a5      	str	r5, [r4, #40]	@ 0x28
 8003780:	85a5      	strh	r5, [r4, #44]	@ 0x2c
 8003782:	e9c4 3500 	strd	r3, r5, [r4]
 8003786:	e9c4 5502 	strd	r5, r5, [r4, #8]
 800378a:	f015 ff5a 	bl	8019642 <_ZN8touchgfx9Matrix3x3C1Ev>
    class CanvasWidgetProxy : public CanvasWidget
 800378e:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8003792:	f010 fce3 	bl	801415c <_ZN8touchgfx12CanvasWidgetC1Ev>
 8003796:	4b18      	ldr	r3, [pc, #96]	@ (80037f8 <_ZN8touchgfx14VectorRenderer11getInstanceEv+0xa0>)
class CWRVectorRendererRGB888 : public CWRVectorRenderer
 8003798:	4620      	mov	r0, r4
    class CanvasWidgetProxy : public CanvasWidget
 800379a:	65a3      	str	r3, [r4, #88]	@ 0x58
class CWRVectorRendererRGB888 : public CWRVectorRenderer
 800379c:	4b17      	ldr	r3, [pc, #92]	@ (80037fc <_ZN8touchgfx14VectorRenderer11getInstanceEv+0xa4>)
 800379e:	f840 3b84 	str.w	r3, [r0], #132
     * Initializes a new instance of the PainterRGB888 class.
     *
     * @param  color (Optional) the color, default is black.
     */
    PainterRGB888(colortype color = 0)
        : AbstractPainterRGB888(), AbstractPainterColor(color)
 80037a2:	f7ff ffa7 	bl	80036f4 <_ZN8touchgfx21AbstractPainterRGB888C1Ev>
 80037a6:	4b16      	ldr	r3, [pc, #88]	@ (8003800 <_ZN8touchgfx14VectorRenderer11getInstanceEv+0xa8>)
 80037a8:	4816      	ldr	r0, [pc, #88]	@ (8003804 <_ZN8touchgfx14VectorRenderer11getInstanceEv+0xac>)
 80037aa:	f8c4 3084 	str.w	r3, [r4, #132]	@ 0x84
 80037ae:	3324      	adds	r3, #36	@ 0x24
     *
     * @param  color The color.
     */
    virtual void setColor(colortype color)
    {
        painterColor = color;
 80037b0:	f8c4 5090 	str.w	r5, [r4, #144]	@ 0x90
 80037b4:	f8c4 308c 	str.w	r3, [r4, #140]	@ 0x8c
class AbstractPainterLinearGradient : public AbstractPainter
{
public:
    /** Constructor. */
    AbstractPainterLinearGradient()
        : AbstractPainter(),
 80037b8:	2364      	movs	r3, #100	@ 0x64
 80037ba:	f8c4 509c 	str.w	r5, [r4, #156]	@ 0x9c
 80037be:	f8c4 50a8 	str.w	r5, [r4, #168]	@ 0xa8
          coord0(0), coord1(100), texture(0), isSolid(false), isVertical(false), isHorizontal(false), clSlope(0.0f), clOffset(0.0f), horizontalDistance(0.0f), deltaColor(0.0f)
 80037c2:	e9c4 3528 	strd	r3, r5, [r4, #160]	@ 0xa0
 80037c6:	2300      	movs	r3, #0
 80037c8:	f8c4 30ac 	str.w	r3, [r4, #172]	@ 0xac
 80037cc:	f8c4 30b0 	str.w	r3, [r4, #176]	@ 0xb0
 80037d0:	f8c4 30b4 	str.w	r3, [r4, #180]	@ 0xb4
 80037d4:	f8c4 30b8 	str.w	r3, [r4, #184]	@ 0xb8
 * An abstract class for creating painter classes for drawing canvas widgets. All canvas widgets
 * need a painter to fill the shape drawn with a CanvasWidgetRenderer. The painter must provide
 * the color of a pixel on a given coordinate, which will the be blended into the framebuffer
 * depending on the position of the canvas widget and the transparency of the given pixel.
 */
class PainterRGB888LinearGradient : public AbstractPainterLinearGradient
 80037d8:	4b0b      	ldr	r3, [pc, #44]	@ (8003808 <_ZN8touchgfx14VectorRenderer11getInstanceEv+0xb0>)
 80037da:	f8c4 3098 	str.w	r3, [r4, #152]	@ 0x98
 80037de:	f024 f9ed 	bl	8027bbc <atexit>
 80037e2:	4630      	mov	r0, r6
 80037e4:	f023 fe61 	bl	80274aa <__cxa_guard_release>
}
 80037e8:	4801      	ldr	r0, [pc, #4]	@ (80037f0 <_ZN8touchgfx14VectorRenderer11getInstanceEv+0x98>)
 80037ea:	bd70      	pop	{r4, r5, r6, pc}
 80037ec:	2400ebe0 	.word	0x2400ebe0
 80037f0:	2400ebe4 	.word	0x2400ebe4
 80037f4:	0802ca98 	.word	0x0802ca98
 80037f8:	0802a704 	.word	0x0802a704
 80037fc:	0802a77c 	.word	0x0802a77c
 8003800:	0802cae4 	.word	0x0802cae4
 8003804:	080032bd 	.word	0x080032bd
 8003808:	0802cb1c 	.word	0x0802cb1c

0800380c <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE16decoderTaskEntryEv>:
    void decoderTaskEntry()
 800380c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8003810:	4604      	mov	r4, r0
                    stream.doInvalidateOnNextTick = true;
 8003812:	2601      	movs	r6, #1
                    stream.hasMoreFrames = decoder->decodeNextFrame((uint8_t*)decodeBuffers[i], width, height, stride);
 8003814:	f44f 6716 	mov.w	r7, #2400	@ 0x960
            SEM_WAIT(semDecode);
 8003818:	f04f 31ff 	mov.w	r1, #4294967295
 800381c:	6c20      	ldr	r0, [r4, #64]	@ 0x40
 800381e:	f009 fb7d 	bl	800cf1c <osSemaphoreAcquire>
            MUTEX_LOCK(mutexBuffers);
 8003822:	f04f 31ff 	mov.w	r1, #4294967295
 8003826:	6c60      	ldr	r0, [r4, #68]	@ 0x44
 8003828:	f009 faec 	bl	800ce04 <osMutexAcquire>
                if (stream.doDecode)
 800382c:	f894 302e 	ldrb.w	r3, [r4, #46]	@ 0x2e
 8003830:	b343      	cbz	r3, 8003884 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE16decoderTaskEntryEv+0x78>
                    MJPEGDecoder* const decoder = mjpegDecoders[i];
 8003832:	6865      	ldr	r5, [r4, #4]
                    if (stream.seek_to_frame > 0)
 8003834:	f8d4 8020 	ldr.w	r8, [r4, #32]
                        decoder->gotoFrame(stream.seek_to_frame);
 8003838:	682b      	ldr	r3, [r5, #0]
                    stream.doInvalidateOnNextTick = true;
 800383a:	f884 602b 	strb.w	r6, [r4, #43]	@ 0x2b
                    if (stream.seek_to_frame > 0)
 800383e:	f1b8 0f00 	cmp.w	r8, #0
 8003842:	d023      	beq.n	800388c <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE16decoderTaskEntryEv+0x80>
                        decoder->gotoFrame(stream.seek_to_frame);
 8003844:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003846:	4641      	mov	r1, r8
 8003848:	4628      	mov	r0, r5
 800384a:	4798      	blx	r3
                        stream.seek_to_frame = 0;
 800384c:	2300      	movs	r3, #0
 800384e:	6223      	str	r3, [r4, #32]
                    stream.hasMoreFrames = decoder->decodeNextFrame((uint8_t*)decodeBuffers[i], width, height, stride);
 8003850:	682b      	ldr	r3, [r5, #0]
 8003852:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8003856:	9700      	str	r7, [sp, #0]
 8003858:	4628      	mov	r0, r5
 800385a:	f8d3 8014 	ldr.w	r8, [r3, #20]
 800385e:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 8003862:	68a1      	ldr	r1, [r4, #8]
 8003864:	47c0      	blx	r8
                    stream.frameCount++;
 8003866:	6923      	ldr	r3, [r4, #16]
                    stream.hasMoreFrames = decoder->decodeNextFrame((uint8_t*)decodeBuffers[i], width, height, stride);
 8003868:	f884 002c 	strb.w	r0, [r4, #44]	@ 0x2c
                    stream.frameCount++;
 800386c:	3301      	adds	r3, #1
 800386e:	6123      	str	r3, [r4, #16]
                    if (stream.hasMoreFrames)
 8003870:	b1f0      	cbz	r0, 80038b0 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE16decoderTaskEntryEv+0xa4>
                        stream.frameNumber = decoder->getCurrentFrameNumber() - 1; // Points to frame after this
 8003872:	682b      	ldr	r3, [r5, #0]
 8003874:	4628      	mov	r0, r5
 8003876:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003878:	4798      	blx	r3
 800387a:	3801      	subs	r0, #1
                    stream.doDecode = false;
 800387c:	2300      	movs	r3, #0
                        stream.frameNumber = decoder->getCurrentFrameNumber() - 1; // Points to frame after this
 800387e:	60e0      	str	r0, [r4, #12]
                    stream.doDecode = false;
 8003880:	f884 302e 	strb.w	r3, [r4, #46]	@ 0x2e
            MUTEX_UNLOCK(mutexBuffers);
 8003884:	6c60      	ldr	r0, [r4, #68]	@ 0x44
 8003886:	f009 fae0 	bl	800ce4a <osMutexRelease>
        while (1)
 800388a:	e7c5      	b.n	8003818 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE16decoderTaskEntryEv+0xc>
                        if (stream.skip_frames > 0)
 800388c:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800388e:	2a00      	cmp	r2, #0
 8003890:	d0de      	beq.n	8003850 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE16decoderTaskEntryEv+0x44>
                            decoder->gotoFrame(decoder->getCurrentFrameNumber() + stream.skip_frames);
 8003892:	4628      	mov	r0, r5
 8003894:	e9d3 9309 	ldrd	r9, r3, [r3, #36]	@ 0x24
 8003898:	4798      	blx	r3
 800389a:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 800389c:	4401      	add	r1, r0
 800389e:	4628      	mov	r0, r5
 80038a0:	47c8      	blx	r9
                            stream.frameCount += stream.skip_frames;
 80038a2:	6923      	ldr	r3, [r4, #16]
 80038a4:	6a62      	ldr	r2, [r4, #36]	@ 0x24
                            stream.skip_frames = 0;
 80038a6:	f8c4 8024 	str.w	r8, [r4, #36]	@ 0x24
                            stream.frameCount += stream.skip_frames;
 80038aa:	4413      	add	r3, r2
 80038ac:	6123      	str	r3, [r4, #16]
 80038ae:	e7cf      	b.n	8003850 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE16decoderTaskEntryEv+0x44>
 80038b0:	2001      	movs	r0, #1
 80038b2:	e7e3      	b.n	800387c <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE16decoderTaskEntryEv+0x70>

080038b4 <videoTaskFunc>:
    }
}

extern "C" void videoTaskFunc(void* argument)
{
    videoController.decoderTaskEntry();
 80038b4:	4801      	ldr	r0, [pc, #4]	@ (80038bc <videoTaskFunc+0x8>)
{
 80038b6:	b508      	push	{r3, lr}
    videoController.decoderTaskEntry();
 80038b8:	f7ff ffa8 	bl	800380c <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE16decoderTaskEntryEv>
 80038bc:	2400eca0 	.word	0x2400eca0

080038c0 <_GLOBAL__sub_I_mjpegdecoder1>:
}
 80038c0:	b538      	push	{r3, r4, r5, lr}
HardwareMJPEGDecoder mjpegdecoder1;
 80038c2:	4814      	ldr	r0, [pc, #80]	@ (8003914 <_GLOBAL__sub_I_mjpegdecoder1+0x54>)
        : VideoController(), bufferRGB(0), sizeBufferRGB(0), topBufferRGB(0),
 80038c4:	2500      	movs	r5, #0
 80038c6:	f7fe fbeb 	bl	80020a0 <_ZN20HardwareMJPEGDecoderC1Ev>
          allowSkipFrames(false), firstDrawThisFrame(true), uiHasMutex(false), semDecode(0), mutexBuffers(0)
 80038ca:	4c13      	ldr	r4, [pc, #76]	@ (8003918 <_GLOBAL__sub_I_mjpegdecoder1+0x58>)
 80038cc:	4b13      	ldr	r3, [pc, #76]	@ (800391c <_GLOBAL__sub_I_mjpegdecoder1+0x5c>)
        semDecode = SEM_CREATE(); // Binary semaphore
 80038ce:	462a      	mov	r2, r5
 80038d0:	4629      	mov	r1, r5
 80038d2:	2001      	movs	r0, #1
          allowSkipFrames(false), firstDrawThisFrame(true), uiHasMutex(false), semDecode(0), mutexBuffers(0)
 80038d4:	6023      	str	r3, [r4, #0]
 80038d6:	f44f 7380 	mov.w	r3, #256	@ 0x100
        : VideoController(), bufferRGB(0), sizeBufferRGB(0), topBufferRGB(0),
 80038da:	63a5      	str	r5, [r4, #56]	@ 0x38
          allowSkipFrames(false), firstDrawThisFrame(true), uiHasMutex(false), semDecode(0), mutexBuffers(0)
 80038dc:	87a3      	strh	r3, [r4, #60]	@ 0x3c
        Stream() : frameNumber(0), frameCount(0), tickCount(0), frame_rate_video(0), frame_rate_ticks(0),
 80038de:	85a3      	strh	r3, [r4, #44]	@ 0x2c
          allowSkipFrames(false), firstDrawThisFrame(true), uiHasMutex(false), semDecode(0), mutexBuffers(0)
 80038e0:	f884 503e 	strb.w	r5, [r4, #62]	@ 0x3e
            doInvalidateOnNextTick(false), hasMoreFrames(false), repeat(true), doDecode(false) {}
 80038e4:	f884 502e 	strb.w	r5, [r4, #46]	@ 0x2e
        : VideoController(), bufferRGB(0), sizeBufferRGB(0), topBufferRGB(0),
 80038e8:	e9c4 550c 	strd	r5, r5, [r4, #48]	@ 0x30
          allowSkipFrames(false), firstDrawThisFrame(true), uiHasMutex(false), semDecode(0), mutexBuffers(0)
 80038ec:	e9c4 5510 	strd	r5, r5, [r4, #64]	@ 0x40
        memset(decodeBuffers, 0, sizeof(decodeBuffers));
 80038f0:	e9c4 5501 	strd	r5, r5, [r4, #4]
        Stream() : frameNumber(0), frameCount(0), tickCount(0), frame_rate_video(0), frame_rate_ticks(0),
 80038f4:	e9c4 5503 	strd	r5, r5, [r4, #12]
 80038f8:	e9c4 5505 	strd	r5, r5, [r4, #20]
            seek_to_frame(0), skip_frames(0),
 80038fc:	e9c4 5507 	strd	r5, r5, [r4, #28]
        Stream() : frameNumber(0), frameCount(0), tickCount(0), frame_rate_video(0), frame_rate_ticks(0),
 8003900:	e9c4 5509 	strd	r5, r5, [r4, #36]	@ 0x24
        semDecode = SEM_CREATE(); // Binary semaphore
 8003904:	f009 fac0 	bl	800ce88 <osSemaphoreNew>
 8003908:	6420      	str	r0, [r4, #64]	@ 0x40
        mutexBuffers = MUTEX_CREATE();
 800390a:	4628      	mov	r0, r5
 800390c:	f009 fa45 	bl	800cd9a <osMutexNew>
 8003910:	6460      	str	r0, [r4, #68]	@ 0x44
}
 8003912:	bd38      	pop	{r3, r4, r5, pc}
 8003914:	2400ece8 	.word	0x2400ece8
 8003918:	2400eca0 	.word	0x2400eca0
 800391c:	0802a7c8 	.word	0x0802a7c8

08003920 <_ZN23ApplicationFontProviderD1Ev>:
    static const touchgfx::FontId SMALL = 2;   // verdana_10_4bpp
    static const touchgfx::FontId MPH = 3;     // verdana_132_4bpp
    static const uint16_t NUMBER_OF_FONTS = 4;
};

class ApplicationFontProvider : public touchgfx::FontProvider
 8003920:	4770      	bx	lr

08003922 <_ZN23ApplicationFontProviderD0Ev>:
 8003922:	b510      	push	{r4, lr}
 8003924:	4604      	mov	r4, r0
 8003926:	2104      	movs	r1, #4
 8003928:	f023 fdb1 	bl	802748e <_ZdlPvj>
 800392c:	4620      	mov	r0, r4
 800392e:	bd10      	pop	{r4, pc}

08003930 <_ZN23ApplicationFontProvider7getFontEt>:
#include <fonts/ApplicationFontProvider.hpp>
#include <fonts/GeneratedFont.hpp>
#include <texts/TypedTextDatabase.hpp>

touchgfx::Font* ApplicationFontProvider::getFont(touchgfx::FontId typography)
{
 8003930:	b508      	push	{r3, lr}
    switch (typography)
 8003932:	2903      	cmp	r1, #3
 8003934:	d813      	bhi.n	800395e <_ZN23ApplicationFontProvider7getFontEt+0x2e>
 8003936:	e8df f001 	tbb	[pc, r1]
 800393a:	0602      	.short	0x0602
 800393c:	0e0a      	.short	0x0e0a
    {
    case Typography::DEFAULT:
        // verdana_20_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[0]);
 800393e:	f000 fe39 	bl	80045b4 <_ZN17TypedTextDatabase8getFontsEv>
 8003942:	6800      	ldr	r0, [r0, #0]
        // verdana_132_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[3]);
    default:
        return 0;
    }
}
 8003944:	bd08      	pop	{r3, pc}
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[1]);
 8003946:	f000 fe35 	bl	80045b4 <_ZN17TypedTextDatabase8getFontsEv>
 800394a:	6840      	ldr	r0, [r0, #4]
 800394c:	e7fa      	b.n	8003944 <_ZN23ApplicationFontProvider7getFontEt+0x14>
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[2]);
 800394e:	f000 fe31 	bl	80045b4 <_ZN17TypedTextDatabase8getFontsEv>
 8003952:	6880      	ldr	r0, [r0, #8]
 8003954:	e7f6      	b.n	8003944 <_ZN23ApplicationFontProvider7getFontEt+0x14>
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[3]);
 8003956:	f000 fe2d 	bl	80045b4 <_ZN17TypedTextDatabase8getFontsEv>
 800395a:	68c0      	ldr	r0, [r0, #12]
 800395c:	e7f2      	b.n	8003944 <_ZN23ApplicationFontProvider7getFontEt+0x14>
    switch (typography)
 800395e:	2000      	movs	r0, #0
 8003960:	e7f0      	b.n	8003944 <_ZN23ApplicationFontProvider7getFontEt+0x14>
	...

08003964 <_ZN14BitmapDatabase11getInstanceEv>:
namespace BitmapDatabase
{
const touchgfx::Bitmap::BitmapData* getInstance()
{
    return bitmap_database;
}
 8003964:	4800      	ldr	r0, [pc, #0]	@ (8003968 <_ZN14BitmapDatabase11getInstanceEv+0x4>)
 8003966:	4770      	bx	lr
 8003968:	0802a818 	.word	0x0802a818

0800396c <_ZN14BitmapDatabase15getInstanceSizeEv>:

uint16_t getInstanceSize()
{
    return (uint16_t)(sizeof(bitmap_database) / sizeof(touchgfx::Bitmap::BitmapData));
}
 800396c:	2055      	movs	r0, #85	@ 0x55
 800396e:	4770      	bx	lr

08003970 <_ZNK8touchgfx4Font8getGlyphEt>:
     *
     * @return A pointer to the glyph node or null if the glyph was not found.
     *
     * @see TextProvider::getNextLigature
     */
    virtual const GlyphNode* getGlyph(Unicode::UnicodeChar unicode) const
 8003970:	b513      	push	{r0, r1, r4, lr}
 8003972:	2400      	movs	r4, #0
    {
        if (unicode == 0)
 8003974:	b151      	cbz	r1, 800398c <_ZNK8touchgfx4Font8getGlyphEt+0x1c>
        {
            return 0;
        }
        const uint8_t* dummyPixelDataPointer = 0;
        uint8_t bitsPerPixelDummy = 0;
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
 8003976:	6803      	ldr	r3, [r0, #0]
 8003978:	aa01      	add	r2, sp, #4
        const uint8_t* dummyPixelDataPointer = 0;
 800397a:	9401      	str	r4, [sp, #4]
        uint8_t bitsPerPixelDummy = 0;
 800397c:	f88d 4003 	strb.w	r4, [sp, #3]
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
 8003980:	689c      	ldr	r4, [r3, #8]
 8003982:	f10d 0303 	add.w	r3, sp, #3
 8003986:	47a0      	blx	r4
        return glyph;
    }
 8003988:	b002      	add	sp, #8
 800398a:	bd10      	pop	{r4, pc}
            return 0;
 800398c:	4608      	mov	r0, r1
 800398e:	e7fb      	b.n	8003988 <_ZNK8touchgfx4Font8getGlyphEt+0x18>

08003990 <_ZNK8touchgfx4Font15getFallbackCharEv>:
     * @return The default character for the typography in case no glyph is available.
     */
    virtual Unicode::UnicodeChar getFallbackChar() const
    {
        return fallbackCharacter;
    }
 8003990:	89c0      	ldrh	r0, [r0, #14]
 8003992:	4770      	bx	lr

08003994 <_ZNK8touchgfx4Font15getEllipsisCharEv>:
     * @see TextArea::setWideTextAction
     */
    virtual Unicode::UnicodeChar getEllipsisChar() const
    {
        return ellipsisCharacter;
    }
 8003994:	8a00      	ldrh	r0, [r0, #16]
 8003996:	4770      	bx	lr

08003998 <_ZNK8touchgfx4Font11getBaselineEv>:
     *       getHeight for this.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getBaseline() const
    {
        return baselineHeight;
    }
 8003998:	88c0      	ldrh	r0, [r0, #6]
 800399a:	4770      	bx	lr

0800399c <_ZNK8touchgfx4Font9getHeightEv>:
     * @return The font height.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getHeight() const
    {
        return fontHeight;
    }
 800399c:	8880      	ldrh	r0, [r0, #4]
 800399e:	4770      	bx	lr

080039a0 <_ZNK8touchgfx4Font15getBitsPerPixelEv>:
     *
     * @return The number of bits used per pixel in this font.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getBitsPerPixel() const
    {
        return bPerPixel;
 80039a0:	7a80      	ldrb	r0, [r0, #10]
    }
 80039a2:	f000 007f 	and.w	r0, r0, #127	@ 0x7f
 80039a6:	4770      	bx	lr

080039a8 <_ZNK8touchgfx4Font15getByteAlignRowEv>:
     *
     * @return True if each glyph row is stored byte aligned, false otherwise.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getByteAlignRow() const
    {
        return bAlignRow;
 80039a8:	7a80      	ldrb	r0, [r0, #10]
    }
 80039aa:	09c0      	lsrs	r0, r0, #7
 80039ac:	4770      	bx	lr

080039ae <_ZNK8touchgfx4Font17isVectorBasedFontEv>:
     * @return True if this Font is vector based.
     */
    virtual bool isVectorBasedFont() const
    {
        return false;
    }
 80039ae:	2000      	movs	r0, #0
 80039b0:	4770      	bx	lr
	...

080039b4 <_ZNK8touchgfx4Font14getScaleFactorEv>:
     * @return The scale factor
     */
    virtual float getScaleFactor() const
    {
        return 0;
    }
 80039b4:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 80039bc <_ZNK8touchgfx4Font14getScaleFactorEv+0x8>
 80039b8:	4770      	bx	lr
 80039ba:	bf00      	nop
 80039bc:	00000000 	.word	0x00000000

080039c0 <_ZN8touchgfx9TypedTextD1Ev>:
    }
 80039c0:	4770      	bx	lr

080039c2 <_ZN8touchgfx9TypedTextD0Ev>:
    virtual ~TypedText()
 80039c2:	b510      	push	{r4, lr}
 80039c4:	4604      	mov	r4, r0
    }
 80039c6:	2108      	movs	r1, #8
 80039c8:	f023 fd61 	bl	802748e <_ZdlPvj>
 80039cc:	4620      	mov	r0, r4
 80039ce:	bd10      	pop	{r4, pc}

080039d0 <_ZN8touchgfx11Application19changeToStartScreenEv>:
     *       this is explicitly done in your
     *       FrontendApplication::changeToStartScreen().
     */
    virtual void changeToStartScreen()
    {
    }
 80039d0:	4770      	bx	lr

080039d2 <_ZN8touchgfx11Application15appSwitchScreenEh>:
     * @param screenId An id that maps to the desired screen.
     */
    virtual void appSwitchScreen(uint8_t screenId)
    {
        (void)screenId; // Unused variable
    }
 80039d2:	4770      	bx	lr

080039d4 <_ZN8touchgfx11Application13requestRedrawERNS_4RectE>:
     *
     * @param [in,out] rect The Rect that must be redrawn.
     */
    virtual void requestRedraw(Rect& rect)
    {
        redraw = rect;
 80039d4:	f500 7398 	add.w	r3, r0, #304	@ 0x130
 80039d8:	6808      	ldr	r0, [r1, #0]
 80039da:	6849      	ldr	r1, [r1, #4]
 80039dc:	c303      	stmia	r3!, {r0, r1}
    }
 80039de:	4770      	bx	lr

080039e0 <_ZN8touchgfx10Transition8tearDownEv>:
     * Tears down the Animation. Called before the destructor is called, when the
     * application changes the transition.
     */
    virtual void tearDown()
    {
    }
 80039e0:	4770      	bx	lr

080039e2 <_ZN8touchgfx10Transition4initEv>:
     * Initializes the transition. Called after the constructor is called, when the
     * application changes the transition.
     */
    virtual void init()
    {
    }
 80039e2:	4770      	bx	lr

080039e4 <_ZN8touchgfx10Transition18setScreenContainerERNS_9ContainerE>:
     *
     * @param [in] cont The Container the transition should have access to.
     */
    virtual void setScreenContainer(Container& cont)
    {
        screenContainer = &cont;
 80039e4:	6041      	str	r1, [r0, #4]
    }
 80039e6:	4770      	bx	lr

080039e8 <_ZNK8touchgfx10Transition13FullSolidRect12getSolidRectEv>:
        : x(rectX), y(rectY), width(rectWidth), height(rectHeight)
 80039e8:	2200      	movs	r2, #0
     * A Widget that reports solid and but does not draw anything.
     */
    class FullSolidRect : public Widget
    {
    public:
        virtual Rect getSolidRect() const
 80039ea:	b510      	push	{r4, lr}
        {
            return Rect(0, 0, rect.width, rect.height);
 80039ec:	f9b1 4008 	ldrsh.w	r4, [r1, #8]
 80039f0:	f9b1 100a 	ldrsh.w	r1, [r1, #10]
 80039f4:	8002      	strh	r2, [r0, #0]
 80039f6:	8042      	strh	r2, [r0, #2]
 80039f8:	8084      	strh	r4, [r0, #4]
 80039fa:	80c1      	strh	r1, [r0, #6]
        }
 80039fc:	bd10      	pop	{r4, pc}

080039fe <_ZNK8touchgfx10Transition13FullSolidRect4drawERKNS_4RectE>:

        virtual void draw(const Rect& area) const
        {
        }
 80039fe:	4770      	bx	lr

08003a00 <_ZN23FrontendApplicationBaseD1Ev>:

class FrontendApplicationBase : public touchgfx::MVPApplication
{
public:
    FrontendApplicationBase(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplicationBase() { }
 8003a00:	4770      	bx	lr
	...

08003a04 <_ZN23FrontendApplicationBase19changeToStartScreenEv>:
 *
 * @note The member function to call must return void. The function can have zero, one, two or
 *       three arguments of any type.
 */
template <class dest_type>
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8003a04:	4b06      	ldr	r3, [pc, #24]	@ (8003a20 <_ZN23FrontendApplicationBase19changeToStartScreenEv+0x1c>)
 8003a06:	f8c0 0148 	str.w	r0, [r0, #328]	@ 0x148
 8003a0a:	f8c0 314c 	str.w	r3, [r0, #332]	@ 0x14c
 8003a0e:	2300      	movs	r3, #0
 8003a10:	f8c0 3150 	str.w	r3, [r0, #336]	@ 0x150
// Screen1

void FrontendApplicationBase::gotoScreen1ScreenNoTransition()
{
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplicationBase::gotoScreen1ScreenNoTransitionImpl);
    pendingScreenTransitionCallback = &transitionCallback;
 8003a14:	f500 73a2 	add.w	r3, r0, #324	@ 0x144
 8003a18:	f8c0 3140 	str.w	r3, [r0, #320]	@ 0x140

    virtual void changeToStartScreen()
    {
        gotoScreen1ScreenNoTransition();
    }
 8003a1c:	4770      	bx	lr
 8003a1e:	bf00      	nop
 8003a20:	08003b99 	.word	0x08003b99

08003a24 <_ZN8touchgfx12NoTransition15handleTickEventEv>:
{
public:
    /** Indicates that the transition is done after the first tick. */
    virtual void handleTickEvent()
    {
        done = true;
 8003a24:	2301      	movs	r3, #1
 8003a26:	7203      	strb	r3, [r0, #8]
    }
 8003a28:	4770      	bx	lr

08003a2a <_ZN8touchgfx10Transition13FullSolidRectD1Ev>:
    class FullSolidRect : public Widget
 8003a2a:	4770      	bx	lr

08003a2c <_ZN8touchgfx14WipeTransitionILNS_9DirectionE2EED1Ev>:
 * the given direction.  This transition only draws the pixels in the
 * framebuffer once, and never moves any pixels. It is therefore very
 * useful on MCUs with limited performance.
 */
template <Direction templateDirection>
class WipeTransition : public Transition
 8003a2c:	4770      	bx	lr

08003a2e <_ZN8touchgfx12NoTransitionD1Ev>:
class NoTransition : public Transition
 8003a2e:	4770      	bx	lr

08003a30 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>:
 8003a30:	4770      	bx	lr

08003a32 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE2EE8tearDownEv>:
            // Synchronize framebuffers
            Application::getInstance()->copyInvalidatedAreasFromTFTToClientBuffer();
        }
    }

    virtual void tearDown()
 8003a32:	4601      	mov	r1, r0
    {
        screenContainer->remove(solid);
 8003a34:	6840      	ldr	r0, [r0, #4]
 8003a36:	6803      	ldr	r3, [r0, #0]
 8003a38:	3110      	adds	r1, #16
 8003a3a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003a3c:	4718      	bx	r3

08003a3e <_ZN8touchgfx14WipeTransitionILNS_9DirectionE2EE4initEv>:
    }

    virtual void init()
 8003a3e:	4601      	mov	r1, r0
    {
        Transition::init();
        // Add the solid (and not-drawing-anything) widget on top to cover the other widgets
        screenContainer->add(solid);
 8003a40:	6840      	ldr	r0, [r0, #4]
 8003a42:	6803      	ldr	r3, [r0, #0]
 8003a44:	3110      	adds	r1, #16
 8003a46:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a48:	4718      	bx	r3

08003a4a <_ZN8touchgfx14WipeTransitionILNS_9DirectionE2EE10invalidateEv>:
     * Wipe transition does not require an invalidation. Invalidation
     * is handled by the class. Do no invalidation initially.
     */
    virtual void invalidate()
    {
    }
 8003a4a:	4770      	bx	lr

08003a4c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv>:

    /**
     * Calls the member function. Do not call execute unless isValid() returns true (ie. a
     * pointer to the object and the function has been set).
     */
    virtual void execute()
 8003a4c:	b410      	push	{r4}
    {
        (pobject->*pmemfun)();
 8003a4e:	6841      	ldr	r1, [r0, #4]
    virtual void execute()
 8003a50:	4603      	mov	r3, r0
        (pobject->*pmemfun)();
 8003a52:	68c2      	ldr	r2, [r0, #12]
 8003a54:	689b      	ldr	r3, [r3, #8]
 8003a56:	1054      	asrs	r4, r2, #1
 8003a58:	eb01 0062 	add.w	r0, r1, r2, asr #1
 8003a5c:	07d2      	lsls	r2, r2, #31
 8003a5e:	bf48      	it	mi
 8003a60:	590a      	ldrmi	r2, [r1, r4]
    }
 8003a62:	f85d 4b04 	ldr.w	r4, [sp], #4
        (pobject->*pmemfun)();
 8003a66:	bf48      	it	mi
 8003a68:	58d3      	ldrmi	r3, [r2, r3]
 8003a6a:	4718      	bx	r3

08003a6c <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv>:
    /**
     * Function to check whether the Callback has been initialized with values.
     *
     * @return true If the callback is valid (i.e. safe to call execute).
     */
    virtual bool isValid() const
 8003a6c:	4603      	mov	r3, r0
    {
        return (pobject != 0) && (pmemfun != 0);
 8003a6e:	6840      	ldr	r0, [r0, #4]
 8003a70:	b130      	cbz	r0, 8003a80 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x14>
 8003a72:	689a      	ldr	r2, [r3, #8]
 8003a74:	b91a      	cbnz	r2, 8003a7e <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x12>
 8003a76:	68d8      	ldr	r0, [r3, #12]
 8003a78:	f000 0001 	and.w	r0, r0, #1
 8003a7c:	4770      	bx	lr
 8003a7e:	2001      	movs	r0, #1
    }
 8003a80:	4770      	bx	lr

08003a82 <_ZN8touchgfx12NoTransitionD0Ev>:
 8003a82:	b510      	push	{r4, lr}
 8003a84:	4604      	mov	r4, r0
 8003a86:	210c      	movs	r1, #12
 8003a88:	f023 fd01 	bl	802748e <_ZdlPvj>
 8003a8c:	4620      	mov	r0, r4
 8003a8e:	bd10      	pop	{r4, pc}

08003a90 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED0Ev>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8003a90:	b510      	push	{r4, lr}
 8003a92:	4604      	mov	r4, r0
 8003a94:	2110      	movs	r1, #16
 8003a96:	f023 fcfa 	bl	802748e <_ZdlPvj>
 8003a9a:	4620      	mov	r0, r4
 8003a9c:	bd10      	pop	{r4, pc}

08003a9e <_ZN23FrontendApplicationBaseD0Ev>:
    virtual ~FrontendApplicationBase() { }
 8003a9e:	b510      	push	{r4, lr}
 8003aa0:	4604      	mov	r4, r0
 8003aa2:	f44f 71ae 	mov.w	r1, #348	@ 0x15c
 8003aa6:	f023 fcf2 	bl	802748e <_ZdlPvj>
 8003aaa:	4620      	mov	r0, r4
 8003aac:	bd10      	pop	{r4, pc}

08003aae <_ZN8touchgfx14WipeTransitionILNS_9DirectionE2EED0Ev>:
class WipeTransition : public Transition
 8003aae:	b510      	push	{r4, lr}
 8003ab0:	4604      	mov	r4, r0
 8003ab2:	2138      	movs	r1, #56	@ 0x38
 8003ab4:	f023 fceb 	bl	802748e <_ZdlPvj>
 8003ab8:	4620      	mov	r0, r4
 8003aba:	bd10      	pop	{r4, pc}

08003abc <_ZN8touchgfx10Transition13FullSolidRectD0Ev>:
 8003abc:	b510      	push	{r4, lr}
 8003abe:	4604      	mov	r4, r0
 8003ac0:	2128      	movs	r1, #40	@ 0x28
 8003ac2:	f023 fce4 	bl	802748e <_ZdlPvj>
 8003ac6:	4620      	mov	r0, r4
 8003ac8:	bd10      	pop	{r4, pc}

08003aca <_ZN8touchgfx10Transition10invalidateEv>:
    virtual void invalidate()
 8003aca:	b510      	push	{r4, lr}
        Application::getInstance()->invalidate();
 8003acc:	f014 f9ba 	bl	8017e44 <_ZN8touchgfx11Application11getInstanceEv>
 8003ad0:	6803      	ldr	r3, [r0, #0]
    }
 8003ad2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        Application::getInstance()->invalidate();
 8003ad6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ad8:	4718      	bx	r3
	...

08003adc <_ZN8touchgfx14WipeTransitionILNS_9DirectionE2EE15handleTickEventEv>:
    virtual void handleTickEvent()
 8003adc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003ade:	4604      	mov	r4, r0
        animationCounter++;
 8003ae0:	7a80      	ldrb	r0, [r0, #10]
 8003ae2:	3001      	adds	r0, #1
        if (animationCounter > animationSteps)
 8003ae4:	7a63      	ldrb	r3, [r4, #9]
        animationCounter++;
 8003ae6:	b2c0      	uxtb	r0, r0
        if (animationCounter > animationSteps)
 8003ae8:	4298      	cmp	r0, r3
        animationCounter++;
 8003aea:	72a0      	strb	r0, [r4, #10]
        if (animationCounter > animationSteps)
 8003aec:	d905      	bls.n	8003afa <_ZN8touchgfx14WipeTransitionILNS_9DirectionE2EE15handleTickEventEv+0x1e>
            done = true;
 8003aee:	2301      	movs	r3, #1
 8003af0:	7223      	strb	r3, [r4, #8]
            animationCounter = 0;
 8003af2:	2300      	movs	r3, #0
 8003af4:	72a3      	strb	r3, [r4, #10]
    }
 8003af6:	b003      	add	sp, #12
 8003af8:	bd30      	pop	{r4, r5, pc}
        calculatedValue = EasingEquations::cubicEaseOut(animationCounter, 0, targetValue, animationSteps);
 8003afa:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003afe:	2100      	movs	r1, #0
 8003b00:	f016 fb36 	bl	801a170 <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst>
        if ((calculatedValue % 2) != 0)
 8003b04:	07c3      	lsls	r3, r0, #31
 8003b06:	d506      	bpl.n	8003b16 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE2EE15handleTickEventEv+0x3a>
            calculatedValue += (calculatedValue > 0 ? 1 : -1);
 8003b08:	2800      	cmp	r0, #0
 8003b0a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003b0e:	bfc8      	it	gt
 8003b10:	2301      	movgt	r3, #1
 8003b12:	4418      	add	r0, r3
 8003b14:	b200      	sxth	r0, r0
                solid.setWidth(HAL::DISPLAY_WIDTH - calculatedValue);
 8003b16:	4b14      	ldr	r3, [pc, #80]	@ (8003b68 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE2EE15handleTickEventEv+0x8c>)
                const uint16_t prevSolidWidth = solid.getWidth();
 8003b18:	8b25      	ldrh	r5, [r4, #24]
                solid.setWidth(HAL::DISPLAY_WIDTH - calculatedValue);
 8003b1a:	8819      	ldrh	r1, [r3, #0]
 8003b1c:	b283      	uxth	r3, r0
            calculatedValue += (calculatedValue > 0 ? 1 : -1);
 8003b1e:	81e0      	strh	r0, [r4, #14]
                Rect r(solid.getWidth(), 0, delta, HAL::DISPLAY_HEIGHT);
 8003b20:	4812      	ldr	r0, [pc, #72]	@ (8003b6c <_ZN8touchgfx14WipeTransitionILNS_9DirectionE2EE15handleTickEventEv+0x90>)
                solid.setWidth(HAL::DISPLAY_WIDTH - calculatedValue);
 8003b22:	1aca      	subs	r2, r1, r3
                const uint16_t delta = prevSolidWidth - solid.getWidth();
 8003b24:	442b      	add	r3, r5
                Rect r(solid.getWidth(), 0, delta, HAL::DISPLAY_HEIGHT);
 8003b26:	f9b0 0000 	ldrsh.w	r0, [r0]
                solid.setWidth(HAL::DISPLAY_WIDTH - calculatedValue);
 8003b2a:	b212      	sxth	r2, r2
                const uint16_t delta = prevSolidWidth - solid.getWidth();
 8003b2c:	1a5b      	subs	r3, r3, r1
                screenContainer->invalidateRect(r);
 8003b2e:	4669      	mov	r1, sp
 8003b30:	f8ad 0006 	strh.w	r0, [sp, #6]
 8003b34:	6860      	ldr	r0, [r4, #4]
        rect.width = width;
 8003b36:	8322      	strh	r2, [r4, #24]
 8003b38:	f8ad 2000 	strh.w	r2, [sp]
 8003b3c:	2200      	movs	r2, #0
 8003b3e:	f8ad 3004 	strh.w	r3, [sp, #4]
 8003b42:	6803      	ldr	r3, [r0, #0]
 8003b44:	f8ad 2002 	strh.w	r2, [sp, #2]
 8003b48:	691b      	ldr	r3, [r3, #16]
 8003b4a:	4798      	blx	r3
        if (animationCounter == 1 && HAL::USE_DOUBLE_BUFFERING)
 8003b4c:	7aa3      	ldrb	r3, [r4, #10]
 8003b4e:	2b01      	cmp	r3, #1
 8003b50:	d1d1      	bne.n	8003af6 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE2EE15handleTickEventEv+0x1a>
 8003b52:	4b07      	ldr	r3, [pc, #28]	@ (8003b70 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE2EE15handleTickEventEv+0x94>)
 8003b54:	781b      	ldrb	r3, [r3, #0]
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d0cd      	beq.n	8003af6 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE2EE15handleTickEventEv+0x1a>
            Application::getInstance()->copyInvalidatedAreasFromTFTToClientBuffer();
 8003b5a:	f014 f973 	bl	8017e44 <_ZN8touchgfx11Application11getInstanceEv>
    }
 8003b5e:	b003      	add	sp, #12
 8003b60:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
            Application::getInstance()->copyInvalidatedAreasFromTFTToClientBuffer();
 8003b64:	f014 b974 	b.w	8017e50 <_ZN8touchgfx11Application41copyInvalidatedAreasFromTFTToClientBufferEv>
 8003b68:	24028e14 	.word	0x24028e14
 8003b6c:	24028e16 	.word	0x24028e16
 8003b70:	24028e1e 	.word	0x24028e1e

08003b74 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv>:
    /**
     * Handles the pending screen transition.
     *
     * Delegates the work to evaluatePendingScreenTransition()
     */
    virtual void handlePendingScreenTransition()
 8003b74:	b510      	push	{r4, lr}
 8003b76:	4604      	mov	r4, r0
     * Evaluates the pending Callback instances. If a callback is valid, it is executed and
     * a Screen transition is executed.
     */
    void evaluatePendingScreenTransition()
    {
        if (pendingScreenTransitionCallback && pendingScreenTransitionCallback->isValid())
 8003b78:	f8d0 0140 	ldr.w	r0, [r0, #320]	@ 0x140
 8003b7c:	b158      	cbz	r0, 8003b96 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x22>
 8003b7e:	6803      	ldr	r3, [r0, #0]
 8003b80:	68db      	ldr	r3, [r3, #12]
 8003b82:	4798      	blx	r3
 8003b84:	b138      	cbz	r0, 8003b96 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x22>
        {
            pendingScreenTransitionCallback->execute();
 8003b86:	f8d4 0140 	ldr.w	r0, [r4, #320]	@ 0x140
 8003b8a:	6803      	ldr	r3, [r0, #0]
 8003b8c:	689b      	ldr	r3, [r3, #8]
 8003b8e:	4798      	blx	r3
            pendingScreenTransitionCallback = 0;
 8003b90:	2300      	movs	r3, #0
 8003b92:	f8c4 3140 	str.w	r3, [r4, #320]	@ 0x140
    }
 8003b96:	bd10      	pop	{r4, pc}

08003b98 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv>:
}

void FrontendApplicationBase::gotoScreen1ScreenNoTransitionImpl()
{
 8003b98:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    touchgfx::makeTransition<Screen1View, Screen1Presenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 8003b9c:	e9d0 6a55 	ldrd	r6, sl, [r0, #340]	@ 0x154
{
 8003ba0:	4607      	mov	r7, r0
 *         value as the old presenter due to memory reuse.
 */
template <class ScreenType, class PresenterType, class TransType, class ModelType>
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
{
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 8003ba2:	68b0      	ldr	r0, [r6, #8]
 8003ba4:	6803      	ldr	r3, [r0, #0]
 8003ba6:	6a1b      	ldr	r3, [r3, #32]
 8003ba8:	4798      	blx	r3
 8003baa:	28ef      	cmp	r0, #239	@ 0xef
 8003bac:	d805      	bhi.n	8003bba <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x22>
 8003bae:	4b44      	ldr	r3, [pc, #272]	@ (8003cc0 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x128>)
 8003bb0:	21a3      	movs	r1, #163	@ 0xa3
 8003bb2:	4a44      	ldr	r2, [pc, #272]	@ (8003cc4 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x12c>)
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 8003bb4:	4844      	ldr	r0, [pc, #272]	@ (8003cc8 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x130>)
 8003bb6:	f023 ffe3 	bl	8027b80 <__assert_func>
 8003bba:	6870      	ldr	r0, [r6, #4]
 8003bbc:	6803      	ldr	r3, [r0, #0]
 8003bbe:	6a1b      	ldr	r3, [r3, #32]
 8003bc0:	4798      	blx	r3
 8003bc2:	280f      	cmp	r0, #15
 8003bc4:	d803      	bhi.n	8003bce <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x36>
 8003bc6:	4b41      	ldr	r3, [pc, #260]	@ (8003ccc <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x134>)
 8003bc8:	21a4      	movs	r1, #164	@ 0xa4
 8003bca:	4a3e      	ldr	r2, [pc, #248]	@ (8003cc4 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x12c>)
 8003bcc:	e7f2      	b.n	8003bb4 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x1c>
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 8003bce:	68f0      	ldr	r0, [r6, #12]
 8003bd0:	6803      	ldr	r3, [r0, #0]
 8003bd2:	6a1b      	ldr	r3, [r3, #32]
 8003bd4:	4798      	blx	r3
 8003bd6:	280b      	cmp	r0, #11
 8003bd8:	d803      	bhi.n	8003be2 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x4a>
 8003bda:	4b3d      	ldr	r3, [pc, #244]	@ (8003cd0 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x138>)
 8003bdc:	21a5      	movs	r1, #165	@ 0xa5
 8003bde:	4a39      	ldr	r2, [pc, #228]	@ (8003cc4 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x12c>)
 8003be0:	e7e8      	b.n	8003bb4 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x1c>
    if (*currentTrans)
 8003be2:	f8df 90f4 	ldr.w	r9, [pc, #244]	@ 8003cd8 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x140>
    Application::getInstance()->clearAllTimerWidgets();
 8003be6:	f014 f92d 	bl	8017e44 <_ZN8touchgfx11Application11getInstanceEv>

    /** Clears all currently registered timer widgets. */

    void clearAllTimerWidgets()
    {
        timerWidgets.clear();
 8003bea:	3004      	adds	r0, #4
 8003bec:	f014 f990 	bl	8017f10 <_ZN8touchgfx11Application12TimerWidgets5clearEv>
    if (*currentTrans)
 8003bf0:	f8d9 0000 	ldr.w	r0, [r9]
 8003bf4:	b110      	cbz	r0, 8003bfc <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x64>
        (*currentTrans)->tearDown();
 8003bf6:	6803      	ldr	r3, [r0, #0]
 8003bf8:	68db      	ldr	r3, [r3, #12]
 8003bfa:	4798      	blx	r3
    if (*currentTrans)
 8003bfc:	f8d9 0000 	ldr.w	r0, [r9]
 8003c00:	b110      	cbz	r0, 8003c08 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x70>
        (*currentTrans)->~Transition();
 8003c02:	6803      	ldr	r3, [r0, #0]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	4798      	blx	r3
    if (*currentScreen)
 8003c08:	f8df 80d0 	ldr.w	r8, [pc, #208]	@ 8003cdc <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x144>
 8003c0c:	f8d8 0000 	ldr.w	r0, [r8]
 8003c10:	b110      	cbz	r0, 8003c18 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x80>
        (*currentScreen)->tearDownScreen();
 8003c12:	6803      	ldr	r3, [r0, #0]
 8003c14:	695b      	ldr	r3, [r3, #20]
 8003c16:	4798      	blx	r3
    if (*currentPresenter)
 8003c18:	f8d7 013c 	ldr.w	r0, [r7, #316]	@ 0x13c
 8003c1c:	b110      	cbz	r0, 8003c24 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x8c>
        (*currentPresenter)->deactivate();
 8003c1e:	6803      	ldr	r3, [r0, #0]
 8003c20:	685b      	ldr	r3, [r3, #4]
 8003c22:	4798      	blx	r3
    if (*currentScreen)
 8003c24:	f8d8 0000 	ldr.w	r0, [r8]
 8003c28:	b110      	cbz	r0, 8003c30 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x98>
        (*currentScreen)->~Screen();
 8003c2a:	6803      	ldr	r3, [r0, #0]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	4798      	blx	r3
    if (*currentPresenter)
 8003c30:	f8d7 013c 	ldr.w	r0, [r7, #316]	@ 0x13c
 8003c34:	b110      	cbz	r0, 8003c3c <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0xa4>
        (*currentPresenter)->~Presenter();
 8003c36:	6803      	ldr	r3, [r0, #0]
 8003c38:	689b      	ldr	r3, [r3, #8]
 8003c3a:	4798      	blx	r3

    prepareTransition(currentScreen, currentPresenter, currentTrans);

    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 8003c3c:	68f0      	ldr	r0, [r6, #12]
     * @return A typed reference to the object at the specified index.
     */
    template <typename T>
    T& at(const uint16_t index)
    {
        return *static_cast<T*>(element(index));
 8003c3e:	2100      	movs	r1, #0
        : screenContainer(0), done(false)
 8003c40:	f04f 0b00 	mov.w	fp, #0
 8003c44:	6803      	ldr	r3, [r0, #0]
 8003c46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c48:	4798      	blx	r3
 8003c4a:	4b22      	ldr	r3, [pc, #136]	@ (8003cd4 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x13c>)
 8003c4c:	4604      	mov	r4, r0
 8003c4e:	f8c0 b004 	str.w	fp, [r0, #4]
 8003c52:	f880 b008 	strb.w	fp, [r0, #8]
 8003c56:	4659      	mov	r1, fp
 8003c58:	6003      	str	r3, [r0, #0]
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 8003c5a:	68b0      	ldr	r0, [r6, #8]
 8003c5c:	6803      	ldr	r3, [r0, #0]
 8003c5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c60:	4798      	blx	r3
 8003c62:	4605      	mov	r5, r0
 8003c64:	f001 ffb8 	bl	8005bd8 <_ZN11Screen1ViewC1Ev>
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 8003c68:	6870      	ldr	r0, [r6, #4]
 8003c6a:	4659      	mov	r1, fp
 8003c6c:	6803      	ldr	r3, [r0, #0]
 8003c6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c70:	4798      	blx	r3
 8003c72:	4606      	mov	r6, r0
 8003c74:	4629      	mov	r1, r5
 8003c76:	f001 ff8f 	bl	8005b98 <_ZN16Screen1PresenterC1ER11Screen1View>
    *currentTrans = newTransition;
    *currentPresenter = newPresenter;
    *currentScreen = newScreen;
    model->bind(newPresenter);
 8003c7a:	1d33      	adds	r3, r6, #4
    *currentPresenter = newPresenter;
 8003c7c:	f8c7 613c 	str.w	r6, [r7, #316]	@ 0x13c
    newScreen->setupScreen();
 8003c80:	4628      	mov	r0, r5
    *currentTrans = newTransition;
 8003c82:	f8c9 4000 	str.w	r4, [r9]
    *currentScreen = newScreen;
 8003c86:	f8c8 5000 	str.w	r5, [r8]
public:
    Model();

    void bind(ModelListener* listener)
    {
        modelListener = listener;
 8003c8a:	f8ca 3000 	str.w	r3, [sl]
    newScreen->setupScreen();
 8003c8e:	682b      	ldr	r3, [r5, #0]
    
    virtual ~ModelListener() {}

    void bind(Model* m)
    {
        model = m;
 8003c90:	f8c6 a008 	str.w	sl, [r6, #8]
 8003c94:	68db      	ldr	r3, [r3, #12]
     *
     * @param [in] newPresenter The specific Presenter to be associated with the View.
     */
    void bind(T& newPresenter)
    {
        presenter = &newPresenter;
 8003c96:	63ee      	str	r6, [r5, #60]	@ 0x3c
 8003c98:	4798      	blx	r3
    newPresenter->activate();
 8003c9a:	6833      	ldr	r3, [r6, #0]
 8003c9c:	4630      	mov	r0, r6
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 8003ca2:	4621      	mov	r1, r4
 8003ca4:	4628      	mov	r0, r5
 8003ca6:	f016 fa1f 	bl	801a0e8 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 8003caa:	6823      	ldr	r3, [r4, #0]
 8003cac:	4620      	mov	r0, r4
 8003cae:	691b      	ldr	r3, [r3, #16]
 8003cb0:	4798      	blx	r3
    newTransition->invalidate();
 8003cb2:	6823      	ldr	r3, [r4, #0]
 8003cb4:	4620      	mov	r0, r4
 8003cb6:	695b      	ldr	r3, [r3, #20]
}
 8003cb8:	b001      	add	sp, #4
 8003cba:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003cbe:	4718      	bx	r3
 8003cc0:	0802aecc 	.word	0x0802aecc
 8003cc4:	0802af5a 	.word	0x0802af5a
 8003cc8:	0802b02c 	.word	0x0802b02c
 8003ccc:	0802b081 	.word	0x0802b081
 8003cd0:	0802b124 	.word	0x0802b124
 8003cd4:	0802b398 	.word	0x0802b398
 8003cd8:	24028e68 	.word	0x24028e68
 8003cdc:	24028e64 	.word	0x24028e64

08003ce0 <_ZN23FrontendApplicationBase47gotographing_ScreenScreenWipeTransitionEastImplEv>:
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplicationBase::gotographing_ScreenScreenWipeTransitionEastImpl);
    pendingScreenTransitionCallback = &transitionCallback;
}

void FrontendApplicationBase::gotographing_ScreenScreenWipeTransitionEastImpl()
{
 8003ce0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    touchgfx::makeTransition<graphing_ScreenView, graphing_ScreenPresenter, touchgfx::WipeTransition<EAST>, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 8003ce4:	e9d0 ba55 	ldrd	fp, sl, [r0, #340]	@ 0x154
{
 8003ce8:	4607      	mov	r7, r0
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 8003cea:	f8db 0008 	ldr.w	r0, [fp, #8]
 8003cee:	6803      	ldr	r3, [r0, #0]
 8003cf0:	6a1b      	ldr	r3, [r3, #32]
 8003cf2:	4798      	blx	r3
 8003cf4:	f643 5383 	movw	r3, #15747	@ 0x3d83
 8003cf8:	4298      	cmp	r0, r3
 8003cfa:	d805      	bhi.n	8003d08 <_ZN23FrontendApplicationBase47gotographing_ScreenScreenWipeTransitionEastImplEv+0x28>
 8003cfc:	4b55      	ldr	r3, [pc, #340]	@ (8003e54 <_ZN23FrontendApplicationBase47gotographing_ScreenScreenWipeTransitionEastImplEv+0x174>)
 8003cfe:	21a3      	movs	r1, #163	@ 0xa3
 8003d00:	4a55      	ldr	r2, [pc, #340]	@ (8003e58 <_ZN23FrontendApplicationBase47gotographing_ScreenScreenWipeTransitionEastImplEv+0x178>)
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 8003d02:	4856      	ldr	r0, [pc, #344]	@ (8003e5c <_ZN23FrontendApplicationBase47gotographing_ScreenScreenWipeTransitionEastImplEv+0x17c>)
 8003d04:	f023 ff3c 	bl	8027b80 <__assert_func>
 8003d08:	f8db 0004 	ldr.w	r0, [fp, #4]
 8003d0c:	6803      	ldr	r3, [r0, #0]
 8003d0e:	6a1b      	ldr	r3, [r3, #32]
 8003d10:	4798      	blx	r3
 8003d12:	280f      	cmp	r0, #15
 8003d14:	d803      	bhi.n	8003d1e <_ZN23FrontendApplicationBase47gotographing_ScreenScreenWipeTransitionEastImplEv+0x3e>
 8003d16:	4b52      	ldr	r3, [pc, #328]	@ (8003e60 <_ZN23FrontendApplicationBase47gotographing_ScreenScreenWipeTransitionEastImplEv+0x180>)
 8003d18:	21a4      	movs	r1, #164	@ 0xa4
 8003d1a:	4a4f      	ldr	r2, [pc, #316]	@ (8003e58 <_ZN23FrontendApplicationBase47gotographing_ScreenScreenWipeTransitionEastImplEv+0x178>)
 8003d1c:	e7f1      	b.n	8003d02 <_ZN23FrontendApplicationBase47gotographing_ScreenScreenWipeTransitionEastImplEv+0x22>
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 8003d1e:	f8db 000c 	ldr.w	r0, [fp, #12]
 8003d22:	6803      	ldr	r3, [r0, #0]
 8003d24:	6a1b      	ldr	r3, [r3, #32]
 8003d26:	4798      	blx	r3
 8003d28:	2837      	cmp	r0, #55	@ 0x37
 8003d2a:	d803      	bhi.n	8003d34 <_ZN23FrontendApplicationBase47gotographing_ScreenScreenWipeTransitionEastImplEv+0x54>
 8003d2c:	4b4d      	ldr	r3, [pc, #308]	@ (8003e64 <_ZN23FrontendApplicationBase47gotographing_ScreenScreenWipeTransitionEastImplEv+0x184>)
 8003d2e:	21a5      	movs	r1, #165	@ 0xa5
 8003d30:	4a49      	ldr	r2, [pc, #292]	@ (8003e58 <_ZN23FrontendApplicationBase47gotographing_ScreenScreenWipeTransitionEastImplEv+0x178>)
 8003d32:	e7e6      	b.n	8003d02 <_ZN23FrontendApplicationBase47gotographing_ScreenScreenWipeTransitionEastImplEv+0x22>
    if (*currentTrans)
 8003d34:	f8df 9140 	ldr.w	r9, [pc, #320]	@ 8003e78 <_ZN23FrontendApplicationBase47gotographing_ScreenScreenWipeTransitionEastImplEv+0x198>
    Application::getInstance()->clearAllTimerWidgets();
 8003d38:	f014 f884 	bl	8017e44 <_ZN8touchgfx11Application11getInstanceEv>
 8003d3c:	3004      	adds	r0, #4
 8003d3e:	f014 f8e7 	bl	8017f10 <_ZN8touchgfx11Application12TimerWidgets5clearEv>
    if (*currentTrans)
 8003d42:	f8d9 0000 	ldr.w	r0, [r9]
 8003d46:	b110      	cbz	r0, 8003d4e <_ZN23FrontendApplicationBase47gotographing_ScreenScreenWipeTransitionEastImplEv+0x6e>
        (*currentTrans)->tearDown();
 8003d48:	6803      	ldr	r3, [r0, #0]
 8003d4a:	68db      	ldr	r3, [r3, #12]
 8003d4c:	4798      	blx	r3
    if (*currentTrans)
 8003d4e:	f8d9 0000 	ldr.w	r0, [r9]
 8003d52:	b110      	cbz	r0, 8003d5a <_ZN23FrontendApplicationBase47gotographing_ScreenScreenWipeTransitionEastImplEv+0x7a>
        (*currentTrans)->~Transition();
 8003d54:	6803      	ldr	r3, [r0, #0]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	4798      	blx	r3
    if (*currentScreen)
 8003d5a:	f8df 8120 	ldr.w	r8, [pc, #288]	@ 8003e7c <_ZN23FrontendApplicationBase47gotographing_ScreenScreenWipeTransitionEastImplEv+0x19c>
 8003d5e:	f8d8 0000 	ldr.w	r0, [r8]
 8003d62:	b110      	cbz	r0, 8003d6a <_ZN23FrontendApplicationBase47gotographing_ScreenScreenWipeTransitionEastImplEv+0x8a>
        (*currentScreen)->tearDownScreen();
 8003d64:	6803      	ldr	r3, [r0, #0]
 8003d66:	695b      	ldr	r3, [r3, #20]
 8003d68:	4798      	blx	r3
    if (*currentPresenter)
 8003d6a:	f8d7 013c 	ldr.w	r0, [r7, #316]	@ 0x13c
 8003d6e:	b110      	cbz	r0, 8003d76 <_ZN23FrontendApplicationBase47gotographing_ScreenScreenWipeTransitionEastImplEv+0x96>
        (*currentPresenter)->deactivate();
 8003d70:	6803      	ldr	r3, [r0, #0]
 8003d72:	685b      	ldr	r3, [r3, #4]
 8003d74:	4798      	blx	r3
    if (*currentScreen)
 8003d76:	f8d8 0000 	ldr.w	r0, [r8]
 8003d7a:	b110      	cbz	r0, 8003d82 <_ZN23FrontendApplicationBase47gotographing_ScreenScreenWipeTransitionEastImplEv+0xa2>
        (*currentScreen)->~Screen();
 8003d7c:	6803      	ldr	r3, [r0, #0]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	4798      	blx	r3
    if (*currentPresenter)
 8003d82:	f8d7 013c 	ldr.w	r0, [r7, #316]	@ 0x13c
 8003d86:	b110      	cbz	r0, 8003d8e <_ZN23FrontendApplicationBase47gotographing_ScreenScreenWipeTransitionEastImplEv+0xae>
        (*currentPresenter)->~Presenter();
 8003d88:	6803      	ldr	r3, [r0, #0]
 8003d8a:	689b      	ldr	r3, [r3, #8]
 8003d8c:	4798      	blx	r3
    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 8003d8e:	f8db 000c 	ldr.w	r0, [fp, #12]
 8003d92:	2100      	movs	r1, #0
 8003d94:	2500      	movs	r5, #0
 8003d96:	6803      	ldr	r3, [r0, #0]
 8003d98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d9a:	4798      	blx	r3
          solid()
 8003d9c:	4b32      	ldr	r3, [pc, #200]	@ (8003e68 <_ZN23FrontendApplicationBase47gotographing_ScreenScreenWipeTransitionEastImplEv+0x188>)
 8003d9e:	4604      	mov	r4, r0
 8003da0:	6045      	str	r5, [r0, #4]
 8003da2:	6003      	str	r3, [r0, #0]
 8003da4:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
          animationCounter(0),
 8003da8:	7285      	strb	r5, [r0, #10]
          solid()
 8003daa:	3010      	adds	r0, #16
 8003dac:	f820 3c08 	strh.w	r3, [r0, #-8]
 8003db0:	f44f 7380 	mov.w	r3, #256	@ 0x100
          calculatedValue(0),
 8003db4:	81e5      	strh	r5, [r4, #14]
          solid()
 8003db6:	6363      	str	r3, [r4, #52]	@ 0x34
    class FullSolidRect : public Widget
 8003db8:	4b2c      	ldr	r3, [pc, #176]	@ (8003e6c <_ZN23FrontendApplicationBase47gotographing_ScreenScreenWipeTransitionEastImplEv+0x18c>)
        setWidth(width);
 8003dba:	9001      	str	r0, [sp, #4]
 8003dbc:	6123      	str	r3, [r4, #16]
            targetValue = HAL::DISPLAY_WIDTH;
 8003dbe:	4b2c      	ldr	r3, [pc, #176]	@ (8003e70 <_ZN23FrontendApplicationBase47gotographing_ScreenScreenWipeTransitionEastImplEv+0x190>)
 8003dc0:	f9b3 1000 	ldrsh.w	r1, [r3]
        solid.setPosition(0, 0, HAL::DISPLAY_WIDTH, HAL::DISPLAY_HEIGHT);
 8003dc4:	4b2b      	ldr	r3, [pc, #172]	@ (8003e74 <_ZN23FrontendApplicationBase47gotographing_ScreenScreenWipeTransitionEastImplEv+0x194>)
            targetValue = HAL::DISPLAY_WIDTH;
 8003dc6:	81a1      	strh	r1, [r4, #12]
        solid.setPosition(0, 0, HAL::DISPLAY_WIDTH, HAL::DISPLAY_HEIGHT);
 8003dc8:	f9b3 6000 	ldrsh.w	r6, [r3]
          solid()
 8003dcc:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8003dd0:	e9c4 5507 	strd	r5, r5, [r4, #28]
 8003dd4:	e9c4 5509 	strd	r5, r5, [r4, #36]	@ 0x24
 8003dd8:	e9c4 550b 	strd	r5, r5, [r4, #44]	@ 0x2c
 8003ddc:	f7ff fa1e 	bl	800321c <_ZN8touchgfx8Drawable8setWidthEs>
        setHeight(height);
 8003de0:	4631      	mov	r1, r6
 8003de2:	9801      	ldr	r0, [sp, #4]
 8003de4:	f7ff fa1c 	bl	8003220 <_ZN8touchgfx8Drawable9setHeightEs>
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 8003de8:	f8db 0008 	ldr.w	r0, [fp, #8]
 8003dec:	4629      	mov	r1, r5
 8003dee:	6803      	ldr	r3, [r0, #0]
 8003df0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003df2:	4798      	blx	r3
 8003df4:	4606      	mov	r6, r0
 8003df6:	f001 ff53 	bl	8005ca0 <_ZN19graphing_ScreenViewC1Ev>
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 8003dfa:	f8db 0004 	ldr.w	r0, [fp, #4]
 8003dfe:	4629      	mov	r1, r5
 8003e00:	6803      	ldr	r3, [r0, #0]
 8003e02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e04:	4798      	blx	r3
 8003e06:	4605      	mov	r5, r0
 8003e08:	4631      	mov	r1, r6
 8003e0a:	f001 feff 	bl	8005c0c <_ZN24graphing_ScreenPresenterC1ER19graphing_ScreenView>
    model->bind(newPresenter);
 8003e0e:	1d2b      	adds	r3, r5, #4
    *currentPresenter = newPresenter;
 8003e10:	f8c7 513c 	str.w	r5, [r7, #316]	@ 0x13c
    newScreen->setupScreen();
 8003e14:	4630      	mov	r0, r6
    *currentTrans = newTransition;
 8003e16:	f8c9 4000 	str.w	r4, [r9]
    *currentScreen = newScreen;
 8003e1a:	f8c8 6000 	str.w	r6, [r8]
 8003e1e:	f8ca 3000 	str.w	r3, [sl]
    newScreen->setupScreen();
 8003e22:	6833      	ldr	r3, [r6, #0]
 8003e24:	f8c5 a008 	str.w	sl, [r5, #8]
 8003e28:	68db      	ldr	r3, [r3, #12]
 8003e2a:	63f5      	str	r5, [r6, #60]	@ 0x3c
 8003e2c:	4798      	blx	r3
    newPresenter->activate();
 8003e2e:	682b      	ldr	r3, [r5, #0]
 8003e30:	4628      	mov	r0, r5
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 8003e36:	4621      	mov	r1, r4
 8003e38:	4630      	mov	r0, r6
 8003e3a:	f016 f955 	bl	801a0e8 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 8003e3e:	6823      	ldr	r3, [r4, #0]
 8003e40:	4620      	mov	r0, r4
 8003e42:	691b      	ldr	r3, [r3, #16]
 8003e44:	4798      	blx	r3
    newTransition->invalidate();
 8003e46:	6823      	ldr	r3, [r4, #0]
 8003e48:	4620      	mov	r0, r4
 8003e4a:	695b      	ldr	r3, [r3, #20]
}
 8003e4c:	b003      	add	sp, #12
 8003e4e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e52:	4718      	bx	r3
 8003e54:	0802aecc 	.word	0x0802aecc
 8003e58:	0802b1c7 	.word	0x0802b1c7
 8003e5c:	0802b02c 	.word	0x0802b02c
 8003e60:	0802b081 	.word	0x0802b081
 8003e64:	0802b124 	.word	0x0802b124
 8003e68:	0802b3bc 	.word	0x0802b3bc
 8003e6c:	0802b2c4 	.word	0x0802b2c4
 8003e70:	24028e14 	.word	0x24028e14
 8003e74:	24028e16 	.word	0x24028e16
 8003e78:	24028e68 	.word	0x24028e68
 8003e7c:	24028e64 	.word	0x24028e64

08003e80 <_ZN8touchgfx3HAL3lcdEv>:
        if (instance->useAuxiliaryLCD && instance->auxiliaryLCD)
 8003e80:	4b04      	ldr	r3, [pc, #16]	@ (8003e94 <_ZN8touchgfx3HAL3lcdEv+0x14>)
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 8003e88:	b10a      	cbz	r2, 8003e8e <_ZN8touchgfx3HAL3lcdEv+0xe>
 8003e8a:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8003e8c:	b900      	cbnz	r0, 8003e90 <_ZN8touchgfx3HAL3lcdEv+0x10>
        return instance->lcdRef;
 8003e8e:	6898      	ldr	r0, [r3, #8]
    }
 8003e90:	4770      	bx	lr
 8003e92:	bf00      	nop
 8003e94:	24028e20 	.word	0x24028e20

08003e98 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>:
FrontendApplicationBase::FrontendApplicationBase(Model& m, FrontendHeap& heap)
 8003e98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e9a:	4617      	mov	r7, r2
 8003e9c:	4604      	mov	r4, r0
 8003e9e:	460e      	mov	r6, r1
          pendingScreenTransitionCallback(0)
 8003ea0:	f014 f908 	bl	80180b4 <_ZN8touchgfx11ApplicationC1Ev>
        instance = this;
 8003ea4:	4b12      	ldr	r3, [pc, #72]	@ (8003ef0 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x58>)
        : currentPresenter(0),
 8003ea6:	2500      	movs	r5, #0
        instance = this;
 8003ea8:	601c      	str	r4, [r3, #0]
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_LANDSCAPE);
 8003eaa:	4629      	mov	r1, r5
      model(m)
 8003eac:	4b11      	ldr	r3, [pc, #68]	@ (8003ef4 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x5c>)
 8003eae:	6023      	str	r3, [r4, #0]
        : pobject(0), pmemfun(0)
 8003eb0:	4b11      	ldr	r3, [pc, #68]	@ (8003ef8 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x60>)
 8003eb2:	e9c4 3551 	strd	r3, r5, [r4, #324]	@ 0x144
        return instance;
 8003eb6:	4b11      	ldr	r3, [pc, #68]	@ (8003efc <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x64>)
 8003eb8:	6818      	ldr	r0, [r3, #0]
 8003eba:	e9c4 5553 	strd	r5, r5, [r4, #332]	@ 0x14c
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_LANDSCAPE);
 8003ebe:	6803      	ldr	r3, [r0, #0]
          pendingScreenTransitionCallback(0)
 8003ec0:	e9c4 554f 	strd	r5, r5, [r4, #316]	@ 0x13c
 8003ec4:	689b      	ldr	r3, [r3, #8]
      model(m)
 8003ec6:	e9c4 7655 	strd	r7, r6, [r4, #340]	@ 0x154
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_LANDSCAPE);
 8003eca:	4798      	blx	r3
    touchgfx::Texts::setLanguage(GB);
 8003ecc:	4628      	mov	r0, r5
 8003ece:	f000 fb25 	bl	800451c <_ZN8touchgfx5Texts11setLanguageEt>
    reinterpret_cast<touchgfx::LCD24bpp&>(touchgfx::HAL::lcd()).enableTextureMapperAll();
 8003ed2:	f7ff ffd5 	bl	8003e80 <_ZN8touchgfx3HAL3lcdEv>
 8003ed6:	f01c fd84 	bl	80209e2 <_ZN8touchgfx8LCD24bpp22enableTextureMapperAllEv>
    reinterpret_cast<touchgfx::LCD24bpp&>(touchgfx::HAL::lcd()).enableDecompressorL8_All();
 8003eda:	f7ff ffd1 	bl	8003e80 <_ZN8touchgfx3HAL3lcdEv>
 8003ede:	f01c fdf7 	bl	8020ad0 <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_AllEv>
    reinterpret_cast<touchgfx::LCD24bpp&>(touchgfx::HAL::lcd()).enableDecompressorRGB();
 8003ee2:	f7ff ffcd 	bl	8003e80 <_ZN8touchgfx3HAL3lcdEv>
 8003ee6:	f01c fdff 	bl	8020ae8 <_ZN8touchgfx8LCD24bpp21enableDecompressorRGBEv>
}
 8003eea:	4620      	mov	r0, r4
 8003eec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003eee:	bf00      	nop
 8003ef0:	24028e74 	.word	0x24028e74
 8003ef4:	0802b344 	.word	0x0802b344
 8003ef8:	0802b32c 	.word	0x0802b32c
 8003efc:	24028e20 	.word	0x24028e20

08003f00 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8003f00:	4b06      	ldr	r3, [pc, #24]	@ (8003f1c <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv+0x1c>)
 8003f02:	f8c0 0148 	str.w	r0, [r0, #328]	@ 0x148
 8003f06:	f8c0 314c 	str.w	r3, [r0, #332]	@ 0x14c
 8003f0a:	2300      	movs	r3, #0
 8003f0c:	f8c0 3150 	str.w	r3, [r0, #336]	@ 0x150
    pendingScreenTransitionCallback = &transitionCallback;
 8003f10:	f500 73a2 	add.w	r3, r0, #324	@ 0x144
 8003f14:	f8c0 3140 	str.w	r3, [r0, #320]	@ 0x140
}
 8003f18:	4770      	bx	lr
 8003f1a:	bf00      	nop
 8003f1c:	08003b99 	.word	0x08003b99

08003f20 <_ZN23FrontendApplicationBase43gotographing_ScreenScreenWipeTransitionEastEv>:
 8003f20:	4b06      	ldr	r3, [pc, #24]	@ (8003f3c <_ZN23FrontendApplicationBase43gotographing_ScreenScreenWipeTransitionEastEv+0x1c>)
 8003f22:	f8c0 0148 	str.w	r0, [r0, #328]	@ 0x148
 8003f26:	f8c0 314c 	str.w	r3, [r0, #332]	@ 0x14c
 8003f2a:	2300      	movs	r3, #0
 8003f2c:	f8c0 3150 	str.w	r3, [r0, #336]	@ 0x150
    pendingScreenTransitionCallback = &transitionCallback;
 8003f30:	f500 73a2 	add.w	r3, r0, #324	@ 0x144
 8003f34:	f8c0 3140 	str.w	r3, [r0, #320]	@ 0x140
}
 8003f38:	4770      	bx	lr
 8003f3a:	bf00      	nop
 8003f3c:	08003ce1 	.word	0x08003ce1

08003f40 <_ZNK8touchgfx13GeneratedFont12getGSUBTableEv>:
    virtual int8_t getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const;

    virtual const uint16_t* getGSUBTable() const
    {
        return gsubTable;
    }
 8003f40:	6a40      	ldr	r0, [r0, #36]	@ 0x24
 8003f42:	4770      	bx	lr

08003f44 <_ZNK8touchgfx13GeneratedFont23getContextualFormsTableEv>:

    virtual const FontContextualFormsTable* getContextualFormsTable() const
    {
        return arabicTable;
    }
 8003f44:	6a80      	ldr	r0, [r0, #40]	@ 0x28
 8003f46:	4770      	bx	lr

08003f48 <_ZN8touchgfx13GeneratedFontD1Ev>:
class GeneratedFont : public ConstFont
 8003f48:	4770      	bx	lr

08003f4a <_ZNK8touchgfx13GeneratedFont12getPixelDataEPKNS_9GlyphNodeE>:
}

const uint8_t* GeneratedFont::getPixelData(const GlyphNode* glyph) const
{
    const uint8_t* const* table = (const uint8_t* const*)glyphData;
    return &(table[glyph->unicode / 2048][glyph->dataOffset]);
 8003f4a:	888b      	ldrh	r3, [r1, #4]
 8003f4c:	69c0      	ldr	r0, [r0, #28]
 8003f4e:	0adb      	lsrs	r3, r3, #11
 8003f50:	680a      	ldr	r2, [r1, #0]
 8003f52:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
}
 8003f56:	4410      	add	r0, r2
 8003f58:	4770      	bx	lr

08003f5a <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE>:

int8_t GeneratedFont::getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
{
 8003f5a:	b510      	push	{r4, lr}
 8003f5c:	4604      	mov	r4, r0
    if (!glyph || glyph->kerningTableSize == 0)
 8003f5e:	b1ba      	cbz	r2, 8003f90 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x36>
 8003f60:	7b10      	ldrb	r0, [r2, #12]
 8003f62:	b168      	cbz	r0, 8003f80 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x26>
        return ((flags & GLYPH_DATA_KERNINGTABLEPOS_BIT8_10) << 8) | _kerningTablePos;
 8003f64:	7b53      	ldrb	r3, [r2, #13]
 8003f66:	7ad2      	ldrb	r2, [r2, #11]
 8003f68:	021b      	lsls	r3, r3, #8
 8003f6a:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
    {
        return 0;
    }

    const KerningNode* kerndata = kerningData + glyph->kerningTablePos();
 8003f6e:	431a      	orrs	r2, r3
 8003f70:	6a23      	ldr	r3, [r4, #32]
 8003f72:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
    {
        if (prevChar == kerndata->unicodePrevChar)
 8003f76:	881a      	ldrh	r2, [r3, #0]
 8003f78:	428a      	cmp	r2, r1
 8003f7a:	d102      	bne.n	8003f82 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x28>
        {
            return kerndata->distance;
 8003f7c:	f993 0002 	ldrsb.w	r0, [r3, #2]
        {
            break;
        }
    }
    return 0;
}
 8003f80:	bd10      	pop	{r4, pc}
        if (prevChar < kerndata->unicodePrevChar)
 8003f82:	d805      	bhi.n	8003f90 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x36>
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 8003f84:	3801      	subs	r0, #1
 8003f86:	3304      	adds	r3, #4
 8003f88:	b280      	uxth	r0, r0
 8003f8a:	2800      	cmp	r0, #0
 8003f8c:	d1f3      	bne.n	8003f76 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x1c>
 8003f8e:	e7f7      	b.n	8003f80 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x26>
        return 0;
 8003f90:	2000      	movs	r0, #0
 8003f92:	e7f5      	b.n	8003f80 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x26>

08003f94 <_ZN8touchgfx13GeneratedFontD0Ev>:
 8003f94:	b510      	push	{r4, lr}
 8003f96:	4604      	mov	r4, r0
 8003f98:	212c      	movs	r1, #44	@ 0x2c
 8003f9a:	f023 fa78 	bl	802748e <_ZdlPvj>
 8003f9e:	4620      	mov	r0, r4
 8003fa0:	bd10      	pop	{r4, pc}
	...

08003fa4 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>:
GeneratedFont::GeneratedFont(const GlyphNode* glyphs, uint16_t numGlyphs, uint16_t height, uint16_t baseline, uint8_t pixAboveTop, uint8_t pixBelowBottom, uint8_t bitsPerPixel, uint8_t byteAlignRow, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData, const FontContextualFormsTable* formsTable)
 8003fa4:	b530      	push	{r4, r5, lr}
 8003fa6:	b08b      	sub	sp, #44	@ 0x2c
 8003fa8:	4604      	mov	r4, r0
      arabicTable(formsTable)
 8003faa:	f8bd 5060 	ldrh.w	r5, [sp, #96]	@ 0x60
 8003fae:	9508      	str	r5, [sp, #32]
 8003fb0:	f8bd 505c 	ldrh.w	r5, [sp, #92]	@ 0x5c
 8003fb4:	9507      	str	r5, [sp, #28]
 8003fb6:	f89d 5050 	ldrb.w	r5, [sp, #80]	@ 0x50
 8003fba:	9506      	str	r5, [sp, #24]
 8003fbc:	f89d 504c 	ldrb.w	r5, [sp, #76]	@ 0x4c
 8003fc0:	9505      	str	r5, [sp, #20]
 8003fc2:	f89d 5048 	ldrb.w	r5, [sp, #72]	@ 0x48
 8003fc6:	9504      	str	r5, [sp, #16]
 8003fc8:	f89d 5044 	ldrb.w	r5, [sp, #68]	@ 0x44
 8003fcc:	9503      	str	r5, [sp, #12]
 8003fce:	f89d 5040 	ldrb.w	r5, [sp, #64]	@ 0x40
 8003fd2:	9502      	str	r5, [sp, #8]
 8003fd4:	f89d 503c 	ldrb.w	r5, [sp, #60]	@ 0x3c
 8003fd8:	9501      	str	r5, [sp, #4]
 8003fda:	f8bd 5038 	ldrh.w	r5, [sp, #56]	@ 0x38
 8003fde:	9500      	str	r5, [sp, #0]
 8003fe0:	f015 fbec 	bl	80197bc <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt>
 8003fe4:	4b06      	ldr	r3, [pc, #24]	@ (8004000 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE+0x5c>)
}
 8003fe6:	4620      	mov	r0, r4
      arabicTable(formsTable)
 8003fe8:	6023      	str	r3, [r4, #0]
      glyphData(glyphDataInternalFlash),
 8003fea:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8003fec:	61e3      	str	r3, [r4, #28]
      kerningData(kerningList),
 8003fee:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8003ff0:	6223      	str	r3, [r4, #32]
      gsubTable(gsubData),
 8003ff2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8003ff4:	6263      	str	r3, [r4, #36]	@ 0x24
      arabicTable(formsTable)
 8003ff6:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 8003ff8:	62a3      	str	r3, [r4, #40]	@ 0x28
}
 8003ffa:	b00b      	add	sp, #44	@ 0x2c
 8003ffc:	bd30      	pop	{r4, r5, pc}
 8003ffe:	bf00      	nop
 8004000:	0802b3e0 	.word	0x0802b3e0

08004004 <_ZN8touchgfx6Screen11setupScreenEv>:
     *
     * @see Application::switchScreen
     */
    virtual void setupScreen()
    {
    }
 8004004:	4770      	bx	lr

08004006 <_ZN8touchgfx6Screen15afterTransitionEv>:
     *
     * @see Application::handleTickEvent
     */
    virtual void afterTransition()
    {
    }
 8004006:	4770      	bx	lr

08004008 <_ZN8touchgfx6Screen14tearDownScreenEv>:
     *
     * @see Application::switchScreen
     */
    virtual void tearDownScreen()
    {
    }
 8004008:	4770      	bx	lr

0800400a <_ZN8touchgfx6Screen15handleTickEventEv>:
     * Called by the Application on the current screen with a frequency of
     * Application::TICK_INTERVAL_MS.
     */
    virtual void handleTickEvent()
    {
    }
 800400a:	4770      	bx	lr

0800400c <_ZN8touchgfx6Screen14handleKeyEventEh>:
     * @param  key The key to handle.
     */
    virtual void handleKeyEvent(uint8_t key)
    {
        (void)key; // Unused variable
    }
 800400c:	4770      	bx	lr

0800400e <_ZN15Screen1ViewBaseD1Ev>:
}

Screen1ViewBase::~Screen1ViewBase()
{

}
 800400e:	4770      	bx	lr

08004010 <_ZN15Screen1ViewBase11setupScreenEv>:

void Screen1ViewBase::setupScreen()
{

}
 8004010:	4770      	bx	lr

08004012 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvED1Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 8004012:	4770      	bx	lr

08004014 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7executeES4_>:
    virtual void execute(T1 t1)
 8004014:	b430      	push	{r4, r5}
        (pobject->*pmemfun)(t1);
 8004016:	6844      	ldr	r4, [r0, #4]
    virtual void execute(T1 t1)
 8004018:	4603      	mov	r3, r0
        (pobject->*pmemfun)(t1);
 800401a:	68c2      	ldr	r2, [r0, #12]
 800401c:	689b      	ldr	r3, [r3, #8]
 800401e:	1055      	asrs	r5, r2, #1
 8004020:	eb04 0062 	add.w	r0, r4, r2, asr #1
 8004024:	07d2      	lsls	r2, r2, #31
 8004026:	bf48      	it	mi
 8004028:	5962      	ldrmi	r2, [r4, r5]
    }
 800402a:	bc30      	pop	{r4, r5}
        (pobject->*pmemfun)(t1);
 800402c:	bf48      	it	mi
 800402e:	58d3      	ldrmi	r3, [r2, r3]
 8004030:	4718      	bx	r3

08004032 <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7isValidEv>:
    virtual bool isValid() const
 8004032:	4603      	mov	r3, r0
        return (pobject != 0) && (pmemfun != 0);
 8004034:	6840      	ldr	r0, [r0, #4]
 8004036:	b130      	cbz	r0, 8004046 <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x14>
 8004038:	689a      	ldr	r2, [r3, #8]
 800403a:	b91a      	cbnz	r2, 8004044 <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x12>
 800403c:	68d8      	ldr	r0, [r3, #12]
 800403e:	f000 0001 	and.w	r0, r0, #1
 8004042:	4770      	bx	lr
 8004044:	2001      	movs	r0, #1
    }
 8004046:	4770      	bx	lr

08004048 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvED0Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 8004048:	b510      	push	{r4, lr}
 800404a:	4604      	mov	r4, r0
 800404c:	2110      	movs	r1, #16
 800404e:	f023 fa1e 	bl	802748e <_ZdlPvj>
 8004052:	4620      	mov	r0, r4
 8004054:	bd10      	pop	{r4, pc}

08004056 <_ZN15Screen1ViewBaseD0Ev>:
Screen1ViewBase::~Screen1ViewBase()
 8004056:	b510      	push	{r4, lr}
 8004058:	4604      	mov	r4, r0
}
 800405a:	21f0      	movs	r1, #240	@ 0xf0
 800405c:	f023 fa17 	bl	802748e <_ZdlPvj>
 8004060:	4620      	mov	r0, r4
 8004062:	bd10      	pop	{r4, pc}

08004064 <_ZN15Screen1ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE>:

void Screen1ViewBase::buttonCallbackHandler(const touchgfx::AbstractButton& src)
{
    if (&src == &buttonWithLabel1)
 8004064:	3098      	adds	r0, #152	@ 0x98
 8004066:	4288      	cmp	r0, r1
{
 8004068:	b508      	push	{r3, lr}
    if (&src == &buttonWithLabel1)
 800406a:	d105      	bne.n	8004078 <_ZN15Screen1ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x14>
    virtual ~Screen1ViewBase();
    virtual void setupScreen();

protected:
    FrontendApplication& application() {
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
 800406c:	f013 feea 	bl	8017e44 <_ZN8touchgfx11Application11getInstanceEv>
        //Interaction1
        //When buttonWithLabel1 clicked change screen to graphing_Screen
        //Go to graphing_Screen with screen transition towards East
        application().gotographing_ScreenScreenWipeTransitionEast();
    }
}
 8004070:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        application().gotographing_ScreenScreenWipeTransitionEast();
 8004074:	f7ff bf54 	b.w	8003f20 <_ZN23FrontendApplicationBase43gotographing_ScreenScreenWipeTransitionEastEv>
}
 8004078:	bd08      	pop	{r3, pc}

0800407a <_ZN8touchgfx8Drawable5setXYEss>:
        setX(x);
 800407a:	6803      	ldr	r3, [r0, #0]
    void setXY(int16_t x, int16_t y)
 800407c:	b570      	push	{r4, r5, r6, lr}
 800407e:	4604      	mov	r4, r0
        setX(x);
 8004080:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
    void setXY(int16_t x, int16_t y)
 8004082:	4615      	mov	r5, r2
        setX(x);
 8004084:	4798      	blx	r3
        setY(y);
 8004086:	6823      	ldr	r3, [r4, #0]
 8004088:	4620      	mov	r0, r4
 800408a:	4629      	mov	r1, r5
 800408c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    }
 800408e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        setY(y);
 8004092:	4718      	bx	r3

08004094 <_ZN8touchgfx8Drawable11setPositionEssss>:
    void setPosition(int16_t x, int16_t y, int16_t width, int16_t height)
 8004094:	b570      	push	{r4, r5, r6, lr}
 8004096:	4604      	mov	r4, r0
 8004098:	461d      	mov	r5, r3
 800409a:	f9bd 6010 	ldrsh.w	r6, [sp, #16]
        setXY(x, y);
 800409e:	f7ff ffec 	bl	800407a <_ZN8touchgfx8Drawable5setXYEss>
        setWidth(width);
 80040a2:	6823      	ldr	r3, [r4, #0]
 80040a4:	4629      	mov	r1, r5
 80040a6:	4620      	mov	r0, r4
 80040a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040aa:	4798      	blx	r3
        setHeight(height);
 80040ac:	6823      	ldr	r3, [r4, #0]
 80040ae:	4631      	mov	r1, r6
 80040b0:	4620      	mov	r0, r4
 80040b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    }
 80040b4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        setHeight(height);
 80040b8:	4718      	bx	r3
	...

080040bc <_ZN8touchgfx3BoxC1Ev>:
class Box : public Widget
{
public:
    /** Construct a new Box with a default alpha value of 255 (solid) */
    Box()
        : Widget(), alpha(255), color(0)
 80040bc:	4a09      	ldr	r2, [pc, #36]	@ (80040e4 <_ZN8touchgfx3BoxC1Ev+0x28>)
          touchable(false),
 80040be:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80040c2:	6002      	str	r2, [r0, #0]
        : x(0), y(0), width(0), height(0)
 80040c4:	2200      	movs	r2, #0
 80040c6:	8481      	strh	r1, [r0, #36]	@ 0x24
 80040c8:	21ff      	movs	r1, #255	@ 0xff
        : color(col)
 80040ca:	6282      	str	r2, [r0, #40]	@ 0x28
 80040cc:	f880 1026 	strb.w	r1, [r0, #38]	@ 0x26
        : x(0), y(0), width(0), height(0)
 80040d0:	e9c0 2201 	strd	r2, r2, [r0, #4]
 80040d4:	e9c0 2203 	strd	r2, r2, [r0, #12]
          nextSibling(0),
 80040d8:	e9c0 2205 	strd	r2, r2, [r0, #20]
          cachedAbsX(0),
 80040dc:	e9c0 2207 	strd	r2, r2, [r0, #28]
    {
    }
 80040e0:	4770      	bx	lr
 80040e2:	bf00      	nop
 80040e4:	0802ce30 	.word	0x0802ce30

080040e8 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv>:
     * change you may need to reposition the label text by calling this function to keep the
     * text horizontally centered.
     *
     * @note The user code must call invalidate() in order to update the button on the display.
     */
    void updateTextPosition()
 80040e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        return typedTextId < numberOfTypedTexts;
 80040ea:	4b19      	ldr	r3, [pc, #100]	@ (8004150 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x68>)
 80040ec:	4606      	mov	r6, r0
 80040ee:	8f01      	ldrh	r1, [r0, #56]	@ 0x38
    {
        if (typedText.hasValidId())
 80040f0:	881b      	ldrh	r3, [r3, #0]
 80040f2:	428b      	cmp	r3, r1
 80040f4:	d92a      	bls.n	800414c <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x64>
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 80040f6:	4b17      	ldr	r3, [pc, #92]	@ (8004154 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x6c>)
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	b92b      	cbnz	r3, 8004108 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x20>
 80040fc:	4b16      	ldr	r3, [pc, #88]	@ (8004158 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x70>)
 80040fe:	216c      	movs	r1, #108	@ 0x6c
 8004100:	4a16      	ldr	r2, [pc, #88]	@ (800415c <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x74>)
 8004102:	4817      	ldr	r0, [pc, #92]	@ (8004160 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x78>)
 8004104:	f023 fd3c 	bl	8027b80 <__assert_func>
        return fonts[typedTexts[typedTextId].fontIdx];
 8004108:	f813 2011 	ldrb.w	r2, [r3, r1, lsl #1]
 800410c:	4b15      	ldr	r3, [pc, #84]	@ (8004164 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x7c>)
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
        return texts->getText(typedTextId);
 8004114:	4b14      	ldr	r3, [pc, #80]	@ (8004168 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x80>)
 8004116:	6818      	ldr	r0, [r3, #0]
 8004118:	f000 fa3c 	bl	8004594 <_ZNK8touchgfx5Texts7getTextEt>
        {
            const Font* f = typedText.getFont();
            const Unicode::UnicodeChar* s = typedText.getText();
            textHeightIncludingSpacing = f->getHeight() * f->getNumberOfLines(s) + f->getSpacingAbove(s);
 800411c:	682b      	ldr	r3, [r5, #0]
 800411e:	4607      	mov	r7, r0
 8004120:	4628      	mov	r0, r5
 8004122:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004124:	4798      	blx	r3
 8004126:	682b      	ldr	r3, [r5, #0]
 8004128:	4604      	mov	r4, r0
 800412a:	4639      	mov	r1, r7
 800412c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800412e:	4628      	mov	r0, r5
 8004130:	4798      	blx	r3
 8004132:	fb14 f400 	smulbb	r4, r4, r0
 8004136:	682b      	ldr	r3, [r5, #0]
 8004138:	4639      	mov	r1, r7
 800413a:	b2a4      	uxth	r4, r4
 800413c:	4628      	mov	r0, r5
 800413e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004140:	4798      	blx	r3
 8004142:	1823      	adds	r3, r4, r0
 8004144:	b21b      	sxth	r3, r3
 8004146:	f8a6 3046 	strh.w	r3, [r6, #70]	@ 0x46
        }
        else
        {
            textHeightIncludingSpacing = 0;
        }
    }
 800414a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800414c:	2300      	movs	r3, #0
 800414e:	e7fa      	b.n	8004146 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x5e>
 8004150:	24028e7c 	.word	0x24028e7c
 8004154:	24028e78 	.word	0x24028e78
 8004158:	0802b440 	.word	0x0802b440
 800415c:	0802b482 	.word	0x0802b482
 8004160:	0802b4bd 	.word	0x0802b4bd
 8004164:	24028e80 	.word	0x24028e80
 8004168:	24028e84 	.word	0x24028e84

0800416c <_ZN15Screen1ViewBaseC1Ev>:
Screen1ViewBase::Screen1ViewBase() :
 800416c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004170:	4604      	mov	r4, r0
 8004172:	b085      	sub	sp, #20
        : presenter(0)
 8004174:	2500      	movs	r5, #0
 8004176:	f015 fe0b 	bl	8019d90 <_ZN8touchgfx6ScreenC1Ev>
    buttonCallback(this, &Screen1ViewBase::buttonCallbackHandler)
 800417a:	4627      	mov	r7, r4
 800417c:	4b2f      	ldr	r3, [pc, #188]	@ (800423c <_ZN15Screen1ViewBaseC1Ev+0xd0>)
 800417e:	f104 096c 	add.w	r9, r4, #108	@ 0x6c
 8004182:	f104 0698 	add.w	r6, r4, #152	@ 0x98
 8004186:	63e5      	str	r5, [r4, #60]	@ 0x3c
    __background.setPosition(0, 0, 800, 480);
 8004188:	f44f 7bf0 	mov.w	fp, #480	@ 0x1e0
    buttonCallback(this, &Screen1ViewBase::buttonCallbackHandler)
 800418c:	f847 3b40 	str.w	r3, [r7], #64
 8004190:	4638      	mov	r0, r7
 8004192:	f7ff ff93 	bl	80040bc <_ZN8touchgfx3BoxC1Ev>
 8004196:	4648      	mov	r0, r9
 8004198:	f7ff ff90 	bl	80040bc <_ZN8touchgfx3BoxC1Ev>
 800419c:	4630      	mov	r0, r6
 800419e:	f011 fa87 	bl	80156b0 <_ZN8touchgfx15ButtonWithLabelC1Ev>
        : pobject(pObject), pmemfun(pmemfun_1)
 80041a2:	4b27      	ldr	r3, [pc, #156]	@ (8004240 <_ZN15Screen1ViewBaseC1Ev+0xd4>)
     * @note Must not be called with a Drawable that was already added to the screen. If in doubt,
     *       call remove() first.
     */
    void add(Drawable& d)
    {
        container.add(d);
 80041a4:	f104 0804 	add.w	r8, r4, #4
     *
     * @see getColor, Color::getColorFromRGB
     */
    void setColor(colortype newColor)
    {
        color = newColor;
 80041a8:	f04f 4a7f 	mov.w	sl, #4278190080	@ 0xff000000
    __background.setPosition(0, 0, 800, 480);
 80041ac:	462a      	mov	r2, r5
 80041ae:	4629      	mov	r1, r5
 80041b0:	4638      	mov	r0, r7
 80041b2:	e9c4 3438 	strd	r3, r4, [r4, #224]	@ 0xe0
 80041b6:	4b23      	ldr	r3, [pc, #140]	@ (8004244 <_ZN15Screen1ViewBaseC1Ev+0xd8>)
 80041b8:	e9c4 353a 	strd	r3, r5, [r4, #232]	@ 0xe8
 80041bc:	f44f 7348 	mov.w	r3, #800	@ 0x320
 80041c0:	f8cd b000 	str.w	fp, [sp]
 80041c4:	f7ff ff66 	bl	8004094 <_ZN8touchgfx8Drawable11setPositionEssss>
 80041c8:	4639      	mov	r1, r7
 80041ca:	4640      	mov	r0, r8
 80041cc:	f8c4 a068 	str.w	sl, [r4, #104]	@ 0x68
 80041d0:	f00b fd11 	bl	800fbf6 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    box1.setPosition(0, 0, 800, 480);
 80041d4:	f44f 7348 	mov.w	r3, #800	@ 0x320
 80041d8:	462a      	mov	r2, r5
 80041da:	4629      	mov	r1, r5
 80041dc:	4648      	mov	r0, r9
 80041de:	f8cd b000 	str.w	fp, [sp]
 80041e2:	f7ff ff57 	bl	8004094 <_ZN8touchgfx8Drawable11setPositionEssss>
 80041e6:	4649      	mov	r1, r9
 80041e8:	4640      	mov	r0, r8
 80041ea:	f8c4 a094 	str.w	sl, [r4, #148]	@ 0x94
 80041ee:	f00b fd02 	bl	800fbf6 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    buttonWithLabel1.setXY(215, 190);
 80041f2:	4630      	mov	r0, r6
 80041f4:	22be      	movs	r2, #190	@ 0xbe
 80041f6:	21d7      	movs	r1, #215	@ 0xd7
 80041f8:	f7ff ff3f 	bl	800407a <_ZN8touchgfx8Drawable5setXYEss>
    buttonWithLabel1.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_REGULAR_HEIGHT_50_LARGE_ROUND_INACTIVE_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_REGULAR_HEIGHT_50_LARGE_ROUND_INACTIVE_ID));
 80041fc:	aa03      	add	r2, sp, #12
 80041fe:	a902      	add	r1, sp, #8
 8004200:	4630      	mov	r0, r6
     * array.
     *
     * @param  id (Optional) The unique bitmap identifier.
     */
    Bitmap(const BitmapId id = BITMAP_INVALID)
        : bitmapId(id)
 8004202:	f8ad 5008 	strh.w	r5, [sp, #8]
 8004206:	f8ad 500c 	strh.w	r5, [sp, #12]
 800420a:	f010 ffe8 	bl	80151de <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
class TypedText
 800420e:	230e      	movs	r3, #14
        updateTextPosition();
 8004210:	4630      	mov	r0, r6
 8004212:	f8a4 30d0 	strh.w	r3, [r4, #208]	@ 0xd0
 8004216:	f7ff ff67 	bl	80040e8 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv>
        color = col;
 800421a:	f04f 33ff 	mov.w	r3, #4294967295
 800421e:	4640      	mov	r0, r8
 8004220:	4631      	mov	r1, r6
        colorPressed = col;
 8004222:	e9c4 3335 	strd	r3, r3, [r4, #212]	@ 0xd4
    buttonWithLabel1.setAction(buttonCallback);
 8004226:	f104 03e0 	add.w	r3, r4, #224	@ 0xe0
     *
     * @see GenericCallback, handleClickEvent, ClickEvent
     */
    void setAction(GenericCallback<const AbstractButton&>& callback)
    {
        action = &callback;
 800422a:	f8c4 30c0 	str.w	r3, [r4, #192]	@ 0xc0
 800422e:	f00b fce2 	bl	800fbf6 <_ZN8touchgfx9Container3addERNS_8DrawableE>
}
 8004232:	4620      	mov	r0, r4
 8004234:	b005      	add	sp, #20
 8004236:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800423a:	bf00      	nop
 800423c:	0802b534 	.word	0x0802b534
 8004240:	0802b51c 	.word	0x0802b51c
 8004244:	08004065 	.word	0x08004065

08004248 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_10_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_10_4bpp();

touchgfx::GeneratedFont& getFont_verdana_10_4bpp()
{
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 10, 0, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 8004248:	4770      	bx	lr
	...

0800424c <_Z23getFont_verdana_10_4bppv>:
{
 800424c:	b530      	push	{r4, r5, lr}
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 10, 0, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 800424e:	4d16      	ldr	r5, [pc, #88]	@ (80042a8 <_Z23getFont_verdana_10_4bppv+0x5c>)
{
 8004250:	b08f      	sub	sp, #60	@ 0x3c
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 10, 0, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 8004252:	682c      	ldr	r4, [r5, #0]
 8004254:	f3bf 8f5b 	dmb	ish
 8004258:	f014 0401 	ands.w	r4, r4, #1
 800425c:	d120      	bne.n	80042a0 <_Z23getFont_verdana_10_4bppv+0x54>
 800425e:	4628      	mov	r0, r5
 8004260:	f023 f917 	bl	8027492 <__cxa_guard_acquire>
 8004264:	b1e0      	cbz	r0, 80042a0 <_Z23getFont_verdana_10_4bppv+0x54>
 8004266:	233f      	movs	r3, #63	@ 0x3f
 8004268:	2201      	movs	r2, #1
 800426a:	4910      	ldr	r1, [pc, #64]	@ (80042ac <_Z23getFont_verdana_10_4bppv+0x60>)
 800426c:	9309      	str	r3, [sp, #36]	@ 0x24
 800426e:	4b10      	ldr	r3, [pc, #64]	@ (80042b0 <_Z23getFont_verdana_10_4bppv+0x64>)
 8004270:	4810      	ldr	r0, [pc, #64]	@ (80042b4 <_Z23getFont_verdana_10_4bppv+0x68>)
 8004272:	9308      	str	r3, [sp, #32]
 8004274:	4b10      	ldr	r3, [pc, #64]	@ (80042b8 <_Z23getFont_verdana_10_4bppv+0x6c>)
 8004276:	940a      	str	r4, [sp, #40]	@ 0x28
 8004278:	9405      	str	r4, [sp, #20]
 800427a:	e9cd 4306 	strd	r4, r3, [sp, #24]
 800427e:	2304      	movs	r3, #4
 8004280:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8004284:	230a      	movs	r3, #10
 8004286:	e9cd 440b 	strd	r4, r4, [sp, #44]	@ 0x2c
 800428a:	9300      	str	r3, [sp, #0]
 800428c:	e9cd 4401 	strd	r4, r4, [sp, #4]
 8004290:	f7ff fe88 	bl	8003fa4 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 8004294:	4809      	ldr	r0, [pc, #36]	@ (80042bc <_Z23getFont_verdana_10_4bppv+0x70>)
 8004296:	f023 fc91 	bl	8027bbc <atexit>
 800429a:	4628      	mov	r0, r5
 800429c:	f023 f905 	bl	80274aa <__cxa_guard_release>
    return verdana_10_4bpp;
}
 80042a0:	4804      	ldr	r0, [pc, #16]	@ (80042b4 <_Z23getFont_verdana_10_4bppv+0x68>)
 80042a2:	b00f      	add	sp, #60	@ 0x3c
 80042a4:	bd30      	pop	{r4, r5, pc}
 80042a6:	bf00      	nop
 80042a8:	2400ed30 	.word	0x2400ed30
 80042ac:	08036ea8 	.word	0x08036ea8
 80042b0:	080370ec 	.word	0x080370ec
 80042b4:	2400ed34 	.word	0x2400ed34
 80042b8:	0803711c 	.word	0x0803711c
 80042bc:	08004249 	.word	0x08004249

080042c0 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_132_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_132_4bpp();

touchgfx::GeneratedFont& getFont_verdana_132_4bpp()
{
    static touchgfx::GeneratedFont verdana_132_4bpp(glyphs_verdana_132_4bpp, 11, 134, 132, 0, 0, 4, 1, 0, 0, unicodes_verdana_132_4bpp, kerning_verdana_132_4bpp, 63, 0, 0, 0);
 80042c0:	4770      	bx	lr
	...

080042c4 <_Z24getFont_verdana_132_4bppv>:
{
 80042c4:	b530      	push	{r4, r5, lr}
    static touchgfx::GeneratedFont verdana_132_4bpp(glyphs_verdana_132_4bpp, 11, 134, 132, 0, 0, 4, 1, 0, 0, unicodes_verdana_132_4bpp, kerning_verdana_132_4bpp, 63, 0, 0, 0);
 80042c6:	4d17      	ldr	r5, [pc, #92]	@ (8004324 <_Z24getFont_verdana_132_4bppv+0x60>)
{
 80042c8:	b08f      	sub	sp, #60	@ 0x3c
    static touchgfx::GeneratedFont verdana_132_4bpp(glyphs_verdana_132_4bpp, 11, 134, 132, 0, 0, 4, 1, 0, 0, unicodes_verdana_132_4bpp, kerning_verdana_132_4bpp, 63, 0, 0, 0);
 80042ca:	682c      	ldr	r4, [r5, #0]
 80042cc:	f3bf 8f5b 	dmb	ish
 80042d0:	f014 0401 	ands.w	r4, r4, #1
 80042d4:	d122      	bne.n	800431c <_Z24getFont_verdana_132_4bppv+0x58>
 80042d6:	4628      	mov	r0, r5
 80042d8:	f023 f8db 	bl	8027492 <__cxa_guard_acquire>
 80042dc:	b1f0      	cbz	r0, 800431c <_Z24getFont_verdana_132_4bppv+0x58>
 80042de:	233f      	movs	r3, #63	@ 0x3f
 80042e0:	2201      	movs	r2, #1
 80042e2:	4911      	ldr	r1, [pc, #68]	@ (8004328 <_Z24getFont_verdana_132_4bppv+0x64>)
 80042e4:	9309      	str	r3, [sp, #36]	@ 0x24
 80042e6:	4b11      	ldr	r3, [pc, #68]	@ (800432c <_Z24getFont_verdana_132_4bppv+0x68>)
 80042e8:	4811      	ldr	r0, [pc, #68]	@ (8004330 <_Z24getFont_verdana_132_4bppv+0x6c>)
 80042ea:	9308      	str	r3, [sp, #32]
 80042ec:	4b11      	ldr	r3, [pc, #68]	@ (8004334 <_Z24getFont_verdana_132_4bppv+0x70>)
 80042ee:	940a      	str	r4, [sp, #40]	@ 0x28
 80042f0:	9405      	str	r4, [sp, #20]
 80042f2:	e9cd 4306 	strd	r4, r3, [sp, #24]
 80042f6:	2304      	movs	r3, #4
 80042f8:	e9cd 3203 	strd	r3, r2, [sp, #12]
 80042fc:	2384      	movs	r3, #132	@ 0x84
 80042fe:	220b      	movs	r2, #11
 8004300:	9300      	str	r3, [sp, #0]
 8004302:	2386      	movs	r3, #134	@ 0x86
 8004304:	e9cd 440b 	strd	r4, r4, [sp, #44]	@ 0x2c
 8004308:	e9cd 4401 	strd	r4, r4, [sp, #4]
 800430c:	f7ff fe4a 	bl	8003fa4 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 8004310:	4809      	ldr	r0, [pc, #36]	@ (8004338 <_Z24getFont_verdana_132_4bppv+0x74>)
 8004312:	f023 fc53 	bl	8027bbc <atexit>
 8004316:	4628      	mov	r0, r5
 8004318:	f023 f8c7 	bl	80274aa <__cxa_guard_release>
    return verdana_132_4bpp;
}
 800431c:	4804      	ldr	r0, [pc, #16]	@ (8004330 <_Z24getFont_verdana_132_4bppv+0x6c>)
 800431e:	b00f      	add	sp, #60	@ 0x3c
 8004320:	bd30      	pop	{r4, r5, pc}
 8004322:	bf00      	nop
 8004324:	2400ed60 	.word	0x2400ed60
 8004328:	08036eb8 	.word	0x08036eb8
 800432c:	080370f0 	.word	0x080370f0
 8004330:	2400ed64 	.word	0x2400ed64
 8004334:	08037120 	.word	0x08037120
 8004338:	080042c1 	.word	0x080042c1

0800433c <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_20_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_20_4bpp();

touchgfx::GeneratedFont& getFont_verdana_20_4bpp()
{
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 26, 20, 20, 0, 0, 4, 1, 0, 1, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 800433c:	4770      	bx	lr
	...

08004340 <_Z23getFont_verdana_20_4bppv>:
{
 8004340:	b530      	push	{r4, r5, lr}
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 26, 20, 20, 0, 0, 4, 1, 0, 1, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 8004342:	4d16      	ldr	r5, [pc, #88]	@ (800439c <_Z23getFont_verdana_20_4bppv+0x5c>)
{
 8004344:	b08f      	sub	sp, #60	@ 0x3c
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 26, 20, 20, 0, 0, 4, 1, 0, 1, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 8004346:	682c      	ldr	r4, [r5, #0]
 8004348:	f3bf 8f5b 	dmb	ish
 800434c:	f014 0401 	ands.w	r4, r4, #1
 8004350:	d121      	bne.n	8004396 <_Z23getFont_verdana_20_4bppv+0x56>
 8004352:	4628      	mov	r0, r5
 8004354:	f023 f89d 	bl	8027492 <__cxa_guard_acquire>
 8004358:	b1e8      	cbz	r0, 8004396 <_Z23getFont_verdana_20_4bppv+0x56>
 800435a:	233f      	movs	r3, #63	@ 0x3f
 800435c:	221a      	movs	r2, #26
 800435e:	4910      	ldr	r1, [pc, #64]	@ (80043a0 <_Z23getFont_verdana_20_4bppv+0x60>)
 8004360:	9309      	str	r3, [sp, #36]	@ 0x24
 8004362:	4b10      	ldr	r3, [pc, #64]	@ (80043a4 <_Z23getFont_verdana_20_4bppv+0x64>)
 8004364:	4810      	ldr	r0, [pc, #64]	@ (80043a8 <_Z23getFont_verdana_20_4bppv+0x68>)
 8004366:	9308      	str	r3, [sp, #32]
 8004368:	4b10      	ldr	r3, [pc, #64]	@ (80043ac <_Z23getFont_verdana_20_4bppv+0x6c>)
 800436a:	940a      	str	r4, [sp, #40]	@ 0x28
 800436c:	9307      	str	r3, [sp, #28]
 800436e:	2301      	movs	r3, #1
 8004370:	9401      	str	r4, [sp, #4]
 8004372:	9304      	str	r3, [sp, #16]
 8004374:	e9cd 4305 	strd	r4, r3, [sp, #20]
 8004378:	2304      	movs	r3, #4
 800437a:	e9cd 4302 	strd	r4, r3, [sp, #8]
 800437e:	2314      	movs	r3, #20
 8004380:	e9cd 440b 	strd	r4, r4, [sp, #44]	@ 0x2c
 8004384:	9300      	str	r3, [sp, #0]
 8004386:	f7ff fe0d 	bl	8003fa4 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 800438a:	4809      	ldr	r0, [pc, #36]	@ (80043b0 <_Z23getFont_verdana_20_4bppv+0x70>)
 800438c:	f023 fc16 	bl	8027bbc <atexit>
 8004390:	4628      	mov	r0, r5
 8004392:	f023 f88a 	bl	80274aa <__cxa_guard_release>
    return verdana_20_4bpp;
}
 8004396:	4804      	ldr	r0, [pc, #16]	@ (80043a8 <_Z23getFont_verdana_20_4bppv+0x68>)
 8004398:	b00f      	add	sp, #60	@ 0x3c
 800439a:	bd30      	pop	{r4, r5, pc}
 800439c:	2400ed90 	.word	0x2400ed90
 80043a0:	08036f54 	.word	0x08036f54
 80043a4:	080370f4 	.word	0x080370f4
 80043a8:	2400ed94 	.word	0x2400ed94
 80043ac:	08037124 	.word	0x08037124
 80043b0:	0800433d 	.word	0x0800433d

080043b4 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_41_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_41_4bpp();

touchgfx::GeneratedFont& getFont_verdana_41_4bpp()
{
    static touchgfx::GeneratedFont verdana_41_4bpp(glyphs_verdana_41_4bpp, 3, 42, 41, 0, 0, 4, 1, 0, 0, unicodes_verdana_41_4bpp, kerning_verdana_41_4bpp, 63, 0, 0, 0);
 80043b4:	4770      	bx	lr
	...

080043b8 <_Z23getFont_verdana_41_4bppv>:
{
 80043b8:	b530      	push	{r4, r5, lr}
    static touchgfx::GeneratedFont verdana_41_4bpp(glyphs_verdana_41_4bpp, 3, 42, 41, 0, 0, 4, 1, 0, 0, unicodes_verdana_41_4bpp, kerning_verdana_41_4bpp, 63, 0, 0, 0);
 80043ba:	4d17      	ldr	r5, [pc, #92]	@ (8004418 <_Z23getFont_verdana_41_4bppv+0x60>)
{
 80043bc:	b08f      	sub	sp, #60	@ 0x3c
    static touchgfx::GeneratedFont verdana_41_4bpp(glyphs_verdana_41_4bpp, 3, 42, 41, 0, 0, 4, 1, 0, 0, unicodes_verdana_41_4bpp, kerning_verdana_41_4bpp, 63, 0, 0, 0);
 80043be:	682c      	ldr	r4, [r5, #0]
 80043c0:	f3bf 8f5b 	dmb	ish
 80043c4:	f014 0401 	ands.w	r4, r4, #1
 80043c8:	d122      	bne.n	8004410 <_Z23getFont_verdana_41_4bppv+0x58>
 80043ca:	4628      	mov	r0, r5
 80043cc:	f023 f861 	bl	8027492 <__cxa_guard_acquire>
 80043d0:	b1f0      	cbz	r0, 8004410 <_Z23getFont_verdana_41_4bppv+0x58>
 80043d2:	233f      	movs	r3, #63	@ 0x3f
 80043d4:	2201      	movs	r2, #1
 80043d6:	4911      	ldr	r1, [pc, #68]	@ (800441c <_Z23getFont_verdana_41_4bppv+0x64>)
 80043d8:	9309      	str	r3, [sp, #36]	@ 0x24
 80043da:	4b11      	ldr	r3, [pc, #68]	@ (8004420 <_Z23getFont_verdana_41_4bppv+0x68>)
 80043dc:	4811      	ldr	r0, [pc, #68]	@ (8004424 <_Z23getFont_verdana_41_4bppv+0x6c>)
 80043de:	9308      	str	r3, [sp, #32]
 80043e0:	4b11      	ldr	r3, [pc, #68]	@ (8004428 <_Z23getFont_verdana_41_4bppv+0x70>)
 80043e2:	940a      	str	r4, [sp, #40]	@ 0x28
 80043e4:	9405      	str	r4, [sp, #20]
 80043e6:	e9cd 4306 	strd	r4, r3, [sp, #24]
 80043ea:	2304      	movs	r3, #4
 80043ec:	e9cd 3203 	strd	r3, r2, [sp, #12]
 80043f0:	2329      	movs	r3, #41	@ 0x29
 80043f2:	2203      	movs	r2, #3
 80043f4:	9300      	str	r3, [sp, #0]
 80043f6:	232a      	movs	r3, #42	@ 0x2a
 80043f8:	e9cd 440b 	strd	r4, r4, [sp, #44]	@ 0x2c
 80043fc:	e9cd 4401 	strd	r4, r4, [sp, #4]
 8004400:	f7ff fdd0 	bl	8003fa4 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 8004404:	4809      	ldr	r0, [pc, #36]	@ (800442c <_Z23getFont_verdana_41_4bppv+0x74>)
 8004406:	f023 fbd9 	bl	8027bbc <atexit>
 800440a:	4628      	mov	r0, r5
 800440c:	f023 f84d 	bl	80274aa <__cxa_guard_release>
    return verdana_41_4bpp;
}
 8004410:	4804      	ldr	r0, [pc, #16]	@ (8004424 <_Z23getFont_verdana_41_4bppv+0x6c>)
 8004412:	b00f      	add	sp, #60	@ 0x3c
 8004414:	bd30      	pop	{r4, r5, pc}
 8004416:	bf00      	nop
 8004418:	2400edc0 	.word	0x2400edc0
 800441c:	080370c0 	.word	0x080370c0
 8004420:	08037118 	.word	0x08037118
 8004424:	2400edc4 	.word	0x2400edc4
 8004428:	08037128 	.word	0x08037128
 800442c:	080043b5 	.word	0x080043b5

08004430 <_ZNK8touchgfx4Font12getGSUBTableEv>:
    }
 8004430:	2000      	movs	r0, #0
 8004432:	4770      	bx	lr

08004434 <_ZNK8touchgfx4Font23getContextualFormsTableEv>:
    }
 8004434:	2000      	movs	r0, #0
 8004436:	4770      	bx	lr

08004438 <_ZNK8touchgfx4Font14getStringWidthEPKtz>:
#include <touchgfx/hal/HAL.hpp>
#include <touchgfx/lcd/LCD.hpp>
#include <texts/TypedTextDatabase.hpp>

uint16_t touchgfx::Font::getStringWidth(const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 8004438:	b40e      	push	{r1, r2, r3}
 800443a:	b503      	push	{r0, r1, lr}
 800443c:	ab03      	add	r3, sp, #12
    va_list pArg;
    va_start(pArg, text);
    uint16_t width = getStringWidthLTR(TEXT_DIRECTION_LTR, text, pArg);
 800443e:	2100      	movs	r1, #0
{
 8004440:	f853 2b04 	ldr.w	r2, [r3], #4
    va_start(pArg, text);
 8004444:	9301      	str	r3, [sp, #4]
    uint16_t width = getStringWidthLTR(TEXT_DIRECTION_LTR, text, pArg);
 8004446:	f014 fcbd 	bl	8018dc4 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
    va_end(pArg);
    return width;
}
 800444a:	b002      	add	sp, #8
 800444c:	f85d eb04 	ldr.w	lr, [sp], #4
 8004450:	b003      	add	sp, #12
 8004452:	4770      	bx	lr

08004454 <_ZNK8touchgfx4Font14getStringWidthEhPKtz>:

uint16_t touchgfx::Font::getStringWidth(touchgfx::TextDirection textDirection, const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 8004454:	b40c      	push	{r2, r3}
 8004456:	b507      	push	{r0, r1, r2, lr}
 8004458:	ab04      	add	r3, sp, #16
 800445a:	f853 2b04 	ldr.w	r2, [r3], #4
    va_list pArg;
    va_start(pArg, text);
 800445e:	9301      	str	r3, [sp, #4]
    uint16_t width = getStringWidthLTR(textDirection, text, pArg);
 8004460:	f014 fcb0 	bl	8018dc4 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
    va_end(pArg);
    return width;
}
 8004464:	b003      	add	sp, #12
 8004466:	f85d eb04 	ldr.w	lr, [sp], #4
 800446a:	b002      	add	sp, #8
 800446c:	4770      	bx	lr
	...

08004470 <_ZN8touchgfx12TextProvider15getNextLigatureEh>:

touchgfx::Unicode::UnicodeChar touchgfx::TextProvider::getNextLigature(TextDirection direction)
{
    if (fontGsubTable && nextCharacters.peekChar())
 8004470:	6c43      	ldr	r3, [r0, #68]	@ 0x44
{
 8004472:	b510      	push	{r4, lr}
 8004474:	4604      	mov	r4, r0
    if (fontGsubTable && nextCharacters.peekChar())
 8004476:	b373      	cbz	r3, 80044d6 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x66>
            return used == size;
        }

        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar()
        {
            assert(used > 0);
 8004478:	8f03      	ldrh	r3, [r0, #56]	@ 0x38
 800447a:	b92b      	cbnz	r3, 8004488 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x18>
 800447c:	4b18      	ldr	r3, [pc, #96]	@ (80044e0 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x70>)
 800447e:	21c5      	movs	r1, #197	@ 0xc5
 8004480:	4a18      	ldr	r2, [pc, #96]	@ (80044e4 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x74>)
            return buffer[pos];
        }

        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar(uint16_t offset)
        {
            assert(offset < used);
 8004482:	4819      	ldr	r0, [pc, #100]	@ (80044e8 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x78>)
 8004484:	f023 fb7c 	bl	8027b80 <__assert_func>
            return buffer[pos];
 8004488:	8ec3      	ldrh	r3, [r0, #54]	@ 0x36
 800448a:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 800448e:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 8004490:	b30b      	cbz	r3, 80044d6 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x66>
    {
        substituteGlyphs();
 8004492:	f016 fbf9 	bl	801ac88 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>
            assert(offset < used);
 8004496:	8f23      	ldrh	r3, [r4, #56]	@ 0x38
 8004498:	2b01      	cmp	r3, #1
 800449a:	d803      	bhi.n	80044a4 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x34>
 800449c:	4b13      	ldr	r3, [pc, #76]	@ (80044ec <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x7c>)
 800449e:	21cb      	movs	r1, #203	@ 0xcb
 80044a0:	4a13      	ldr	r2, [pc, #76]	@ (80044f0 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x80>)
 80044a2:	e7ee      	b.n	8004482 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x12>
            const uint16_t index = pos + offset;
 80044a4:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
        if (nextCharacters.peekChar(1) == 0x093F) // Hindi I-matra
 80044a6:	f640 103f 	movw	r0, #2367	@ 0x93f
 80044aa:	1c53      	adds	r3, r2, #1
 80044ac:	b29b      	uxth	r3, r3
            return buffer[index < size ? index : index - size];
 80044ae:	2b09      	cmp	r3, #9
 80044b0:	4619      	mov	r1, r3
 80044b2:	bf88      	it	hi
 80044b4:	f1a3 010a 	subhi.w	r1, r3, #10
 80044b8:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 80044bc:	8c49      	ldrh	r1, [r1, #34]	@ 0x22
 80044be:	4281      	cmp	r1, r0
 80044c0:	d109      	bne.n	80044d6 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x66>
        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar()
 80044c2:	2b0a      	cmp	r3, #10
 80044c4:	eb04 0242 	add.w	r2, r4, r2, lsl #1
 80044c8:	bf28      	it	cs
 80044ca:	2300      	movcs	r3, #0
            return buffer[pos];
 80044cc:	8c50      	ldrh	r0, [r2, #34]	@ 0x22

        FORCE_INLINE_FUNCTION void replaceAt1(Unicode::UnicodeChar newChar)
        {
            assert(used > 1);
            const uint16_t index = pos + 1;
            buffer[index < size ? index : 0] = newChar;
 80044ce:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 80044d2:	8458      	strh	r0, [r3, #34]	@ 0x22
            buffer[pos] = newChar;
 80044d4:	8451      	strh	r1, [r2, #34]	@ 0x22
        {
            nextCharacters.replaceAt1(nextCharacters.peekChar());
            nextCharacters.replaceAt0(0x093F);
        }
    }
    return getNextChar();
 80044d6:	4620      	mov	r0, r4
}
 80044d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return getNextChar();
 80044dc:	f016 bad6 	b.w	801aa8c <_ZN8touchgfx12TextProvider11getNextCharEv>
 80044e0:	0802b560 	.word	0x0802b560
 80044e4:	0802b569 	.word	0x0802b569
 80044e8:	0802b614 	.word	0x0802b614
 80044ec:	0802b66c 	.word	0x0802b66c
 80044f0:	0802b67a 	.word	0x0802b67a

080044f4 <_ZN8touchgfx12TextProvider18initializeInternalEv>:

void touchgfx::TextProvider::initializeInternal()
{
    fillInputBuffer();
 80044f4:	f016 ba93 	b.w	801aa1e <_ZN8touchgfx12TextProvider15fillInputBufferEv>

080044f8 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>:
}

void touchgfx::LCD::drawString(touchgfx::Rect widgetArea, const touchgfx::Rect& invalidatedArea, const touchgfx::LCD::StringVisuals& stringVisuals, const touchgfx::Unicode::UnicodeChar* format, ...)
{
 80044f8:	b510      	push	{r4, lr}
 80044fa:	b086      	sub	sp, #24
 80044fc:	ac02      	add	r4, sp, #8
 80044fe:	e884 0006 	stmia.w	r4, {r1, r2}
 8004502:	461a      	mov	r2, r3
    va_list pArg;
    va_start(pArg, format);
 8004504:	ab0a      	add	r3, sp, #40	@ 0x28
    drawStringLTR(widgetArea, invalidatedArea, stringVisuals, format, pArg);
 8004506:	4621      	mov	r1, r4
    va_start(pArg, format);
 8004508:	9305      	str	r3, [sp, #20]
    drawStringLTR(widgetArea, invalidatedArea, stringVisuals, format, pArg);
 800450a:	9301      	str	r3, [sp, #4]
 800450c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800450e:	9300      	str	r3, [sp, #0]
 8004510:	9b08      	ldr	r3, [sp, #32]
 8004512:	f013 f819 	bl	8017548 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>
    va_end(pArg);
}
 8004516:	b006      	add	sp, #24
 8004518:	bd10      	pop	{r4, pc}
	...

0800451c <_ZN8touchgfx5Texts11setLanguageEt>:
touchgfx::LanguageId touchgfx::Texts::currentLanguage = static_cast<touchgfx::LanguageId>(0);
static const touchgfx::Unicode::UnicodeChar* currentLanguagePtr = 0;
static const uint32_t* currentLanguageIndices = 0;

void touchgfx::Texts::setLanguage(touchgfx::LanguageId id)
{
 800451c:	b538      	push	{r3, r4, r5, lr}
    const touchgfx::TypedText::TypedTextData* currentLanguageTypedText = 0;
    if (id < 1)
 800451e:	bb18      	cbnz	r0, 8004568 <_ZN8touchgfx5Texts11setLanguageEt+0x4c>
    {
        if (languagesArray[id] != 0)
 8004520:	4b12      	ldr	r3, [pc, #72]	@ (800456c <_ZN8touchgfx5Texts11setLanguageEt+0x50>)
 8004522:	4813      	ldr	r0, [pc, #76]	@ (8004570 <_ZN8touchgfx5Texts11setLanguageEt+0x54>)
 8004524:	681c      	ldr	r4, [r3, #0]
 8004526:	4913      	ldr	r1, [pc, #76]	@ (8004574 <_ZN8touchgfx5Texts11setLanguageEt+0x58>)
 8004528:	b1b4      	cbz	r4, 8004558 <_ZN8touchgfx5Texts11setLanguageEt+0x3c>
        {
            // Dynamic translation is added
            const TranslationHeader* translation = languagesArray[id];
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
 800452a:	6822      	ldr	r2, [r4, #0]
 800452c:	4422      	add	r2, r4
 800452e:	6002      	str	r2, [r0, #0]
            currentLanguageIndices = (const uint32_t*)(((const uint8_t*)translation) + translation->offset_to_indices);
 8004530:	6862      	ldr	r2, [r4, #4]
 8004532:	4422      	add	r2, r4
 8004534:	600a      	str	r2, [r1, #0]
            currentLanguageTypedText = (const touchgfx::TypedText::TypedTextData*)(((const uint8_t*)translation) + translation->offset_to_typedtext);
 8004536:	68a2      	ldr	r2, [r4, #8]
 8004538:	4414      	add	r4, r2
        }
    }

    if (currentLanguageTypedText)
    {
        currentLanguage = id;
 800453a:	4b0f      	ldr	r3, [pc, #60]	@ (8004578 <_ZN8touchgfx5Texts11setLanguageEt+0x5c>)
 800453c:	2200      	movs	r2, #0
 800453e:	801a      	strh	r2, [r3, #0]
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
                                                       TypedTextDatabase::getFonts(), TypedTextDatabase::getInstanceSize());
 8004540:	f000 f838 	bl	80045b4 <_ZN17TypedTextDatabase8getFontsEv>
 8004544:	4605      	mov	r5, r0
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
 8004546:	f000 f833 	bl	80045b0 <_ZN17TypedTextDatabase15getInstanceSizeEv>
        typedTexts = data;
 800454a:	4b0c      	ldr	r3, [pc, #48]	@ (800457c <_ZN8touchgfx5Texts11setLanguageEt+0x60>)
 800454c:	601c      	str	r4, [r3, #0]
        fonts = f;
 800454e:	4b0c      	ldr	r3, [pc, #48]	@ (8004580 <_ZN8touchgfx5Texts11setLanguageEt+0x64>)
 8004550:	601d      	str	r5, [r3, #0]
        numberOfTypedTexts = n;
 8004552:	4b0c      	ldr	r3, [pc, #48]	@ (8004584 <_ZN8touchgfx5Texts11setLanguageEt+0x68>)
 8004554:	8018      	strh	r0, [r3, #0]
    }
}
 8004556:	e007      	b.n	8004568 <_ZN8touchgfx5Texts11setLanguageEt+0x4c>
            currentLanguagePtr = texts_all_languages;
 8004558:	4b0b      	ldr	r3, [pc, #44]	@ (8004588 <_ZN8touchgfx5Texts11setLanguageEt+0x6c>)
 800455a:	6003      	str	r3, [r0, #0]
            currentLanguageIndices = staticLanguageIndices[id];
 800455c:	4b0b      	ldr	r3, [pc, #44]	@ (800458c <_ZN8touchgfx5Texts11setLanguageEt+0x70>)
 800455e:	600b      	str	r3, [r1, #0]
            currentLanguageTypedText = typedTextDatabaseArray[id];
 8004560:	4b0b      	ldr	r3, [pc, #44]	@ (8004590 <_ZN8touchgfx5Texts11setLanguageEt+0x74>)
 8004562:	681c      	ldr	r4, [r3, #0]
    if (currentLanguageTypedText)
 8004564:	2c00      	cmp	r4, #0
 8004566:	d1e8      	bne.n	800453a <_ZN8touchgfx5Texts11setLanguageEt+0x1e>
}
 8004568:	bd38      	pop	{r3, r4, r5, pc}
 800456a:	bf00      	nop
 800456c:	2400edfc 	.word	0x2400edfc
 8004570:	2400edf4 	.word	0x2400edf4
 8004574:	2400edf0 	.word	0x2400edf0
 8004578:	2400edf8 	.word	0x2400edf8
 800457c:	24028e78 	.word	0x24028e78
 8004580:	24028e80 	.word	0x24028e80
 8004584:	24028e7c 	.word	0x24028e7c
 8004588:	910040dc 	.word	0x910040dc
 800458c:	910040a0 	.word	0x910040a0
 8004590:	91004118 	.word	0x91004118

08004594 <_ZNK8touchgfx5Texts7getTextEt>:
    languagesArray[id] = (const TranslationHeader*)translation;
}

const touchgfx::Unicode::UnicodeChar* touchgfx::Texts::getText(TypedTextId id) const
{
    return &currentLanguagePtr[currentLanguageIndices[id]];
 8004594:	4b04      	ldr	r3, [pc, #16]	@ (80045a8 <_ZNK8touchgfx5Texts7getTextEt+0x14>)
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 800459c:	4b03      	ldr	r3, [pc, #12]	@ (80045ac <_ZNK8touchgfx5Texts7getTextEt+0x18>)
 800459e:	681b      	ldr	r3, [r3, #0]
}
 80045a0:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 80045a4:	4770      	bx	lr
 80045a6:	bf00      	nop
 80045a8:	2400edf0 	.word	0x2400edf0
 80045ac:	2400edf4 	.word	0x2400edf4

080045b0 <_ZN17TypedTextDatabase15getInstanceSizeEv>:
}

uint16_t getInstanceSize()
{
    return sizeof(typedText_database_DEFAULT) / sizeof(touchgfx::TypedText::TypedTextData);
}
 80045b0:	200f      	movs	r0, #15
 80045b2:	4770      	bx	lr

080045b4 <_ZN17TypedTextDatabase8getFontsEv>:

const touchgfx::Font** getFonts()
{
    return touchgfx_fonts;
}
 80045b4:	4800      	ldr	r0, [pc, #0]	@ (80045b8 <_ZN17TypedTextDatabase8getFontsEv+0x4>)
 80045b6:	4770      	bx	lr
 80045b8:	2400ee00 	.word	0x2400ee00

080045bc <_GLOBAL__sub_I_touchgfx_fonts>:
    case 3:
        touchgfx_fonts[3] = &(getFont_verdana_132_4bpp());
        break;
    }
}
} // namespace TypedTextDatabase
 80045bc:	b510      	push	{r4, lr}
};
 80045be:	4c07      	ldr	r4, [pc, #28]	@ (80045dc <_GLOBAL__sub_I_touchgfx_fonts+0x20>)
    &(getFont_verdana_20_4bpp()),
 80045c0:	f7ff febe 	bl	8004340 <_Z23getFont_verdana_20_4bppv>
};
 80045c4:	6020      	str	r0, [r4, #0]
    &(getFont_verdana_41_4bpp()),
 80045c6:	f7ff fef7 	bl	80043b8 <_Z23getFont_verdana_41_4bppv>
};
 80045ca:	6060      	str	r0, [r4, #4]
    &(getFont_verdana_10_4bpp()),
 80045cc:	f7ff fe3e 	bl	800424c <_Z23getFont_verdana_10_4bppv>
};
 80045d0:	60a0      	str	r0, [r4, #8]
    &(getFont_verdana_132_4bpp())
 80045d2:	f7ff fe77 	bl	80042c4 <_Z24getFont_verdana_132_4bppv>
};
 80045d6:	60e0      	str	r0, [r4, #12]
} // namespace TypedTextDatabase
 80045d8:	bd10      	pop	{r4, pc}
 80045da:	bf00      	nop
 80045dc:	2400ee00 	.word	0x2400ee00

080045e0 <_ZN8touchgfx22VectorFontRendererImpl20getVectorFontBuffersERPfRiRPhS3_>:
/* DO NOT EDIT THIS FILE */
/* This file is autogenerated by the text-database code generator */
#include <touchgfx/VectorFontRendererImpl.hpp>

void touchgfx::VectorFontRendererImpl::getVectorFontBuffers(float*& pointArray, int& pointArraySize, uint8_t*& commandArray, int& commandArraySize)
{
 80045e0:	b510      	push	{r4, lr}
    pointArray = 0;
 80045e2:	2400      	movs	r4, #0
 80045e4:	6004      	str	r4, [r0, #0]
    pointArraySize = 0;
 80045e6:	600c      	str	r4, [r1, #0]
    commandArray = 0;
 80045e8:	6014      	str	r4, [r2, #0]
    commandArraySize = 0;
 80045ea:	601c      	str	r4, [r3, #0]
}
 80045ec:	bd10      	pop	{r4, pc}

080045ee <_ZN8touchgfx9Container13getFirstChildEv>:
     * @see getNextSibling
     */
    virtual Drawable* getFirstChild()
    {
        return firstChild;
    }
 80045ee:	6a80      	ldr	r0, [r0, #40]	@ 0x28
 80045f0:	4770      	bx	lr

080045f2 <_ZN8touchgfx8TextArea8setWidthEs>:
    TextArea()
        : Widget(), typedText(TYPED_TEXT_INVALID), color(0), linespace(0), alpha(255), indentation(0), rotation(TEXT_ROTATE_0), wideTextAction(WIDE_TEXT_NONE), boundingArea()
    {
    }

    virtual void setWidth(int16_t width)
 80045f2:	b530      	push	{r4, r5, lr}
 80045f4:	b085      	sub	sp, #20
    {
        Widget::setWidth(width);
        boundingArea = calculateBoundingArea();
 80045f6:	6803      	ldr	r3, [r0, #0]
    virtual void setWidth(int16_t width)
 80045f8:	4604      	mov	r4, r0
        rect.width = width;
 80045fa:	8101      	strh	r1, [r0, #8]
        boundingArea = calculateBoundingArea();
 80045fc:	466d      	mov	r5, sp
 80045fe:	4601      	mov	r1, r0
 8004600:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004604:	343c      	adds	r4, #60	@ 0x3c
 8004606:	4628      	mov	r0, r5
 8004608:	4798      	blx	r3
 800460a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800460e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    }
 8004612:	b005      	add	sp, #20
 8004614:	bd30      	pop	{r4, r5, pc}

08004616 <_ZN8touchgfx8TextArea9setHeightEs>:

    virtual void setHeight(int16_t height)
 8004616:	b530      	push	{r4, r5, lr}
 8004618:	b085      	sub	sp, #20
    {
        Widget::setHeight(height);
        boundingArea = calculateBoundingArea();
 800461a:	6803      	ldr	r3, [r0, #0]
    virtual void setHeight(int16_t height)
 800461c:	4604      	mov	r4, r0
        rect.height = height;
 800461e:	8141      	strh	r1, [r0, #10]
        boundingArea = calculateBoundingArea();
 8004620:	466d      	mov	r5, sp
 8004622:	4601      	mov	r1, r0
 8004624:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004628:	343c      	adds	r4, #60	@ 0x3c
 800462a:	4628      	mov	r0, r5
 800462c:	4798      	blx	r3
 800462e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8004632:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    }
 8004636:	b005      	add	sp, #20
 8004638:	bd30      	pop	{r4, r5, pc}

0800463a <_ZNK8touchgfx8TextArea12getSolidRectEv>:
 800463a:	2200      	movs	r2, #0
 800463c:	8002      	strh	r2, [r0, #0]
 800463e:	8042      	strh	r2, [r0, #2]
 8004640:	8082      	strh	r2, [r0, #4]
 8004642:	80c2      	strh	r2, [r0, #6]

    virtual Rect getSolidRect() const
    {
        return Rect();
    }
 8004644:	4770      	bx	lr

08004646 <_ZN8touchgfx8TextArea8setAlphaEh>:
    /**
     * @copydoc Image::setAlpha
     */
    virtual void setAlpha(uint8_t newAlpha)
    {
        alpha = newAlpha;
 8004646:	f880 1036 	strb.w	r1, [r0, #54]	@ 0x36
    }
 800464a:	4770      	bx	lr

0800464c <_ZN8touchgfx8TextArea13setXBaselineYEss>:
     *
     * @note setTypedText() must be called prior to setting the baseline.
     */
    virtual void setXBaselineY(int16_t x, int16_t baselineY)
    {
        setX(x);
 800464c:	6803      	ldr	r3, [r0, #0]
    virtual void setXBaselineY(int16_t x, int16_t baselineY)
 800464e:	b570      	push	{r4, r5, r6, lr}
 8004650:	4604      	mov	r4, r0
        setX(x);
 8004652:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
    virtual void setXBaselineY(int16_t x, int16_t baselineY)
 8004654:	4615      	mov	r5, r2
        setX(x);
 8004656:	4798      	blx	r3
        setBaselineY(baselineY);
 8004658:	6823      	ldr	r3, [r4, #0]
 800465a:	4620      	mov	r0, r4
 800465c:	4629      	mov	r1, r5
 800465e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
    }
 8004660:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        setBaselineY(baselineY);
 8004664:	4718      	bx	r3

08004666 <_ZNK8touchgfx8TextArea12getWildcard2Ev>:
     * @see TextAreaWithOneWildcard, TextAreaWithTwoWildcards
     */
    virtual const Unicode::UnicodeChar* getWildcard2() const
    {
        return 0;
    }
 8004666:	2000      	movs	r0, #0
 8004668:	4770      	bx	lr

0800466a <_ZNK8touchgfx23TextAreaWithOneWildcard12getWildcard1Ev>:
    }

    virtual const Unicode::UnicodeChar* getWildcard1() const
    {
        return wc1;
    }
 800466a:	6c80      	ldr	r0, [r0, #72]	@ 0x48
 800466c:	4770      	bx	lr

0800466e <_ZNK8touchgfx5Gauge9getCenterERiS1_>:
     *
     * @see setCenter
     */
    virtual void getCenter(int& x, int& y) const
    {
        x = gaugeCenterX;
 800466e:	f9b0 3150 	ldrsh.w	r3, [r0, #336]	@ 0x150
 8004672:	600b      	str	r3, [r1, #0]
        y = gaugeCenterY;
 8004674:	f9b0 3152 	ldrsh.w	r3, [r0, #338]	@ 0x152
 8004678:	6013      	str	r3, [r2, #0]
    }
 800467a:	4770      	bx	lr

0800467c <_ZN8touchgfx21AbstractPainterBitmapD1Ev>:
    }

    /** Destructor */
    virtual ~AbstractPainterBitmap()
    {
    }
 800467c:	4770      	bx	lr

0800467e <_ZN8touchgfx21AbstractPainterBitmap8setTiledEb>:
     *
     * @see setOffset
     */
    virtual void setTiled(bool tiled)
    {
        isTiled = tiled;
 800467e:	7601      	strb	r1, [r0, #24]
    }
 8004680:	4770      	bx	lr

08004682 <_ZN8touchgfx21AbstractPainterBitmap9setOffsetEss>:
     *
     * @see setTiled
     */
    virtual void setOffset(int16_t x, int16_t y)
    {
        xOffset = x;
 8004682:	8281      	strh	r1, [r0, #20]
        yOffset = y;
 8004684:	82c2      	strh	r2, [r0, #22]
    }
 8004686:	4770      	bx	lr

08004688 <_ZN23graphing_ScreenViewBase23backGroundAnimationDoneEv>:
     * Virtual Action Handlers
     */
    virtual void backGroundAnimationDone()
    {
        // Override and implement this function in graphing_Screen
    }
 8004688:	4770      	bx	lr

0800468a <_ZN23graphing_ScreenViewBase18sliderValueChangedEi>:
    virtual void sliderValueChanged(int value)
    {
        // Override and implement this function in graphing_Screen
    }
 800468a:	4770      	bx	lr

0800468c <_ZN23graphing_ScreenViewBase32interaction3EndedCallbackHandlerERKN8touchgfx12FadeAnimatorINS0_5ImageEEE>:
void graphing_ScreenViewBase::interaction3EndedCallbackHandler(const touchgfx::FadeAnimator<touchgfx::Image>& comp)
{
    //Interaction5
    //When Interaction3 completed call virtual function
    //Call backGroundAnimationDone
    backGroundAnimationDone();
 800468c:	6803      	ldr	r3, [r0, #0]
 800468e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004690:	4718      	bx	r3

08004692 <_ZN8touchgfx8CallbackI23graphing_ScreenViewBaseRKNS_6SliderEivED1Ev>:
struct Callback<dest_type, T1, T2, void> : public GenericCallback<T1, T2>
 8004692:	4770      	bx	lr

08004694 <_ZN8touchgfx8CallbackI23graphing_ScreenViewBaseRKNS_12FadeAnimatorINS_5ImageEEEvvED1Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 8004694:	4770      	bx	lr

08004696 <_ZN8touchgfx8CallbackI23graphing_ScreenViewBaseRKNS_12FadeAnimatorINS_5GaugeEEEvvED1Ev>:
 8004696:	4770      	bx	lr

08004698 <_ZN8touchgfx8CallbackI23graphing_ScreenViewBaseRKNS_13AnimatedImageEvvED1Ev>:
 8004698:	4770      	bx	lr

0800469a <_ZN8touchgfx12FadeAnimatorINS_5GaugeEED1Ev>:
 * 'uint8_t getAlpha()' method.
 *
 * @tparam T specifies the type to extend with the FadeAnimator behavior.
 */
template <class T>
class FadeAnimator : public T
 800469a:	4770      	bx	lr

0800469c <_ZN8touchgfx12FadeAnimatorINS_12MoveAnimatorINS_5ImageEEEED1Ev>:
 800469c:	4770      	bx	lr

0800469e <_ZN8touchgfx12FadeAnimatorINS_5ImageEED1Ev>:
 800469e:	4770      	bx	lr

080046a0 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>:
class TextAreaWithOneWildcard : public TextAreaWithWildcardBase
 80046a0:	4770      	bx	lr

080046a2 <_ZN8touchgfx8CallbackI23graphing_ScreenViewBaseRKNS_6SliderEivE7executeES4_i>:
    virtual void execute(T1 t1, T2 t2)
 80046a2:	b470      	push	{r4, r5, r6}
        (pobject->*pmemfun)(t1, t2);
 80046a4:	6845      	ldr	r5, [r0, #4]
    virtual void execute(T1 t1, T2 t2)
 80046a6:	4603      	mov	r3, r0
        (pobject->*pmemfun)(t1, t2);
 80046a8:	68c4      	ldr	r4, [r0, #12]
 80046aa:	689b      	ldr	r3, [r3, #8]
 80046ac:	1066      	asrs	r6, r4, #1
 80046ae:	eb05 0064 	add.w	r0, r5, r4, asr #1
 80046b2:	07e4      	lsls	r4, r4, #31
 80046b4:	bf44      	itt	mi
 80046b6:	59ac      	ldrmi	r4, [r5, r6]
 80046b8:	58e3      	ldrmi	r3, [r4, r3]
    }
 80046ba:	bc70      	pop	{r4, r5, r6}
        (pobject->*pmemfun)(t1, t2);
 80046bc:	4718      	bx	r3

080046be <_ZNK8touchgfx8CallbackI23graphing_ScreenViewBaseRKNS_6SliderEivE7isValidEv>:
    virtual bool isValid() const
 80046be:	4603      	mov	r3, r0
        return (pobject != 0) && (pmemfun != 0);
 80046c0:	6840      	ldr	r0, [r0, #4]
 80046c2:	b130      	cbz	r0, 80046d2 <_ZNK8touchgfx8CallbackI23graphing_ScreenViewBaseRKNS_6SliderEivE7isValidEv+0x14>
 80046c4:	689a      	ldr	r2, [r3, #8]
 80046c6:	b91a      	cbnz	r2, 80046d0 <_ZNK8touchgfx8CallbackI23graphing_ScreenViewBaseRKNS_6SliderEivE7isValidEv+0x12>
 80046c8:	68d8      	ldr	r0, [r3, #12]
 80046ca:	f000 0001 	and.w	r0, r0, #1
 80046ce:	4770      	bx	lr
 80046d0:	2001      	movs	r0, #1
    }
 80046d2:	4770      	bx	lr

080046d4 <_ZN8touchgfx8CallbackI23graphing_ScreenViewBaseRKNS_12FadeAnimatorINS_5ImageEEEvvE7executeES6_>:
    virtual void execute(T1 t1)
 80046d4:	b430      	push	{r4, r5}
        (pobject->*pmemfun)(t1);
 80046d6:	6844      	ldr	r4, [r0, #4]
    virtual void execute(T1 t1)
 80046d8:	4603      	mov	r3, r0
        (pobject->*pmemfun)(t1);
 80046da:	68c2      	ldr	r2, [r0, #12]
 80046dc:	689b      	ldr	r3, [r3, #8]
 80046de:	1055      	asrs	r5, r2, #1
 80046e0:	eb04 0062 	add.w	r0, r4, r2, asr #1
 80046e4:	07d2      	lsls	r2, r2, #31
 80046e6:	bf48      	it	mi
 80046e8:	5962      	ldrmi	r2, [r4, r5]
    }
 80046ea:	bc30      	pop	{r4, r5}
        (pobject->*pmemfun)(t1);
 80046ec:	bf48      	it	mi
 80046ee:	58d3      	ldrmi	r3, [r2, r3]
 80046f0:	4718      	bx	r3

080046f2 <_ZNK8touchgfx8CallbackI23graphing_ScreenViewBaseRKNS_12FadeAnimatorINS_5ImageEEEvvE7isValidEv>:
    virtual bool isValid() const
 80046f2:	4603      	mov	r3, r0
        return (pobject != 0) && (pmemfun != 0);
 80046f4:	6840      	ldr	r0, [r0, #4]
 80046f6:	b130      	cbz	r0, 8004706 <_ZNK8touchgfx8CallbackI23graphing_ScreenViewBaseRKNS_12FadeAnimatorINS_5ImageEEEvvE7isValidEv+0x14>
 80046f8:	689a      	ldr	r2, [r3, #8]
 80046fa:	b91a      	cbnz	r2, 8004704 <_ZNK8touchgfx8CallbackI23graphing_ScreenViewBaseRKNS_12FadeAnimatorINS_5ImageEEEvvE7isValidEv+0x12>
 80046fc:	68d8      	ldr	r0, [r3, #12]
 80046fe:	f000 0001 	and.w	r0, r0, #1
 8004702:	4770      	bx	lr
 8004704:	2001      	movs	r0, #1
    }
 8004706:	4770      	bx	lr

08004708 <_ZN8touchgfx8CallbackI23graphing_ScreenViewBaseRKNS_12FadeAnimatorINS_5GaugeEEEvvE7executeES6_>:
    virtual void execute(T1 t1)
 8004708:	b430      	push	{r4, r5}
        (pobject->*pmemfun)(t1);
 800470a:	6844      	ldr	r4, [r0, #4]
    virtual void execute(T1 t1)
 800470c:	4603      	mov	r3, r0
        (pobject->*pmemfun)(t1);
 800470e:	68c2      	ldr	r2, [r0, #12]
 8004710:	689b      	ldr	r3, [r3, #8]
 8004712:	1055      	asrs	r5, r2, #1
 8004714:	eb04 0062 	add.w	r0, r4, r2, asr #1
 8004718:	07d2      	lsls	r2, r2, #31
 800471a:	bf48      	it	mi
 800471c:	5962      	ldrmi	r2, [r4, r5]
    }
 800471e:	bc30      	pop	{r4, r5}
        (pobject->*pmemfun)(t1);
 8004720:	bf48      	it	mi
 8004722:	58d3      	ldrmi	r3, [r2, r3]
 8004724:	4718      	bx	r3

08004726 <_ZNK8touchgfx8CallbackI23graphing_ScreenViewBaseRKNS_12FadeAnimatorINS_5GaugeEEEvvE7isValidEv>:
    virtual bool isValid() const
 8004726:	4603      	mov	r3, r0
        return (pobject != 0) && (pmemfun != 0);
 8004728:	6840      	ldr	r0, [r0, #4]
 800472a:	b130      	cbz	r0, 800473a <_ZNK8touchgfx8CallbackI23graphing_ScreenViewBaseRKNS_12FadeAnimatorINS_5GaugeEEEvvE7isValidEv+0x14>
 800472c:	689a      	ldr	r2, [r3, #8]
 800472e:	b91a      	cbnz	r2, 8004738 <_ZNK8touchgfx8CallbackI23graphing_ScreenViewBaseRKNS_12FadeAnimatorINS_5GaugeEEEvvE7isValidEv+0x12>
 8004730:	68d8      	ldr	r0, [r3, #12]
 8004732:	f000 0001 	and.w	r0, r0, #1
 8004736:	4770      	bx	lr
 8004738:	2001      	movs	r0, #1
    }
 800473a:	4770      	bx	lr

0800473c <_ZN8touchgfx8CallbackI23graphing_ScreenViewBaseRKNS_13AnimatedImageEvvE7executeES4_>:
    virtual void execute(T1 t1)
 800473c:	b430      	push	{r4, r5}
        (pobject->*pmemfun)(t1);
 800473e:	6844      	ldr	r4, [r0, #4]
    virtual void execute(T1 t1)
 8004740:	4603      	mov	r3, r0
        (pobject->*pmemfun)(t1);
 8004742:	68c2      	ldr	r2, [r0, #12]
 8004744:	689b      	ldr	r3, [r3, #8]
 8004746:	1055      	asrs	r5, r2, #1
 8004748:	eb04 0062 	add.w	r0, r4, r2, asr #1
 800474c:	07d2      	lsls	r2, r2, #31
 800474e:	bf48      	it	mi
 8004750:	5962      	ldrmi	r2, [r4, r5]
    }
 8004752:	bc30      	pop	{r4, r5}
        (pobject->*pmemfun)(t1);
 8004754:	bf48      	it	mi
 8004756:	58d3      	ldrmi	r3, [r2, r3]
 8004758:	4718      	bx	r3

0800475a <_ZNK8touchgfx8CallbackI23graphing_ScreenViewBaseRKNS_13AnimatedImageEvvE7isValidEv>:
    virtual bool isValid() const
 800475a:	4603      	mov	r3, r0
        return (pobject != 0) && (pmemfun != 0);
 800475c:	6840      	ldr	r0, [r0, #4]
 800475e:	b130      	cbz	r0, 800476e <_ZNK8touchgfx8CallbackI23graphing_ScreenViewBaseRKNS_13AnimatedImageEvvE7isValidEv+0x14>
 8004760:	689a      	ldr	r2, [r3, #8]
 8004762:	b91a      	cbnz	r2, 800476c <_ZNK8touchgfx8CallbackI23graphing_ScreenViewBaseRKNS_13AnimatedImageEvvE7isValidEv+0x12>
 8004764:	68d8      	ldr	r0, [r3, #12]
 8004766:	f000 0001 	and.w	r0, r0, #1
 800476a:	4770      	bx	lr
 800476c:	2001      	movs	r0, #1
    }
 800476e:	4770      	bx	lr

08004770 <_ZN8touchgfx12FadeAnimatorINS_5GaugeEE21setFadeAnimationDelayEt>:
     *
     * @see getFadeAnimationDelay
     */
    virtual void setFadeAnimationDelay(uint16_t delay)
    {
        fadeAnimationDelay = delay;
 8004770:	f8a0 11a4 	strh.w	r1, [r0, #420]	@ 0x1a4
    }
 8004774:	4770      	bx	lr

08004776 <_ZNK8touchgfx12FadeAnimatorINS_5GaugeEE21getFadeAnimationDelayEv>:
     * @see setFadeAnimationDelay
     */
    virtual uint16_t getFadeAnimationDelay() const
    {
        return fadeAnimationDelay;
    }
 8004776:	f8b0 01a4 	ldrh.w	r0, [r0, #420]	@ 0x1a4
 800477a:	4770      	bx	lr

0800477c <_ZN8touchgfx12MoveAnimatorINS_5ImageEE21setMoveAnimationDelayEt>:
     *
     * @see getMoveAnimationDelay
     */
    virtual void setMoveAnimationDelay(uint16_t delay)
    {
        moveAnimationDelay = delay;
 800477c:	8581      	strh	r1, [r0, #44]	@ 0x2c
    }
 800477e:	4770      	bx	lr

08004780 <_ZNK8touchgfx12MoveAnimatorINS_5ImageEE21getMoveAnimationDelayEv>:
     * @see setMoveAnimationDelay
     */
    virtual uint16_t getMoveAnimationDelay() const
    {
        return moveAnimationDelay;
    }
 8004780:	8d80      	ldrh	r0, [r0, #44]	@ 0x2c
 8004782:	4770      	bx	lr

08004784 <_ZN8touchgfx12FadeAnimatorINS_12MoveAnimatorINS_5ImageEEEE21setFadeAnimationDelayEt>:
        fadeAnimationDelay = delay;
 8004784:	f8a0 1048 	strh.w	r1, [r0, #72]	@ 0x48
    }
 8004788:	4770      	bx	lr

0800478a <_ZNK8touchgfx12FadeAnimatorINS_12MoveAnimatorINS_5ImageEEEE21getFadeAnimationDelayEv>:
    }
 800478a:	f8b0 0048 	ldrh.w	r0, [r0, #72]	@ 0x48
 800478e:	4770      	bx	lr

08004790 <_ZN8touchgfx12FadeAnimatorINS_5ImageEE21setFadeAnimationDelayEt>:
        fadeAnimationDelay = delay;
 8004790:	8581      	strh	r1, [r0, #44]	@ 0x2c
    }
 8004792:	4770      	bx	lr

08004794 <_ZNK8touchgfx12FadeAnimatorINS_5ImageEE21getFadeAnimationDelayEv>:
    }
 8004794:	8d80      	ldrh	r0, [r0, #44]	@ 0x2c
 8004796:	4770      	bx	lr

08004798 <_ZN8touchgfx21AbstractPainterBitmapD0Ev>:
    virtual ~AbstractPainterBitmap()
 8004798:	b510      	push	{r4, lr}
 800479a:	4604      	mov	r4, r0
    }
 800479c:	2120      	movs	r1, #32
 800479e:	f022 fe76 	bl	802748e <_ZdlPvj>
 80047a2:	4620      	mov	r0, r4
 80047a4:	bd10      	pop	{r4, pc}

080047a6 <_ZN8touchgfx12FadeAnimatorINS_5ImageEED0Ev>:
class FadeAnimator : public T
 80047a6:	b510      	push	{r4, lr}
 80047a8:	4604      	mov	r4, r0
 80047aa:	213c      	movs	r1, #60	@ 0x3c
 80047ac:	f022 fe6f 	bl	802748e <_ZdlPvj>
 80047b0:	4620      	mov	r0, r4
 80047b2:	bd10      	pop	{r4, pc}

080047b4 <_ZN8touchgfx12FadeAnimatorINS_12MoveAnimatorINS_5ImageEEEED0Ev>:
 80047b4:	b510      	push	{r4, lr}
 80047b6:	4604      	mov	r4, r0
 80047b8:	2158      	movs	r1, #88	@ 0x58
 80047ba:	f022 fe68 	bl	802748e <_ZdlPvj>
 80047be:	4620      	mov	r0, r4
 80047c0:	bd10      	pop	{r4, pc}

080047c2 <_ZN8touchgfx23TextAreaWithOneWildcardD0Ev>:
 80047c2:	b510      	push	{r4, lr}
 80047c4:	4604      	mov	r4, r0
 80047c6:	214c      	movs	r1, #76	@ 0x4c
 80047c8:	f022 fe61 	bl	802748e <_ZdlPvj>
 80047cc:	4620      	mov	r0, r4
 80047ce:	bd10      	pop	{r4, pc}

080047d0 <_ZN8touchgfx12FadeAnimatorINS_5GaugeEED0Ev>:
 80047d0:	b510      	push	{r4, lr}
 80047d2:	4604      	mov	r4, r0
 80047d4:	f44f 71da 	mov.w	r1, #436	@ 0x1b4
 80047d8:	f022 fe59 	bl	802748e <_ZdlPvj>
 80047dc:	4620      	mov	r0, r4
 80047de:	bd10      	pop	{r4, pc}

080047e0 <_ZN8touchgfx8CallbackI23graphing_ScreenViewBaseRKNS_13AnimatedImageEvvED0Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 80047e0:	b510      	push	{r4, lr}
 80047e2:	4604      	mov	r4, r0
 80047e4:	2110      	movs	r1, #16
 80047e6:	f022 fe52 	bl	802748e <_ZdlPvj>
 80047ea:	4620      	mov	r0, r4
 80047ec:	bd10      	pop	{r4, pc}

080047ee <_ZN8touchgfx8CallbackI23graphing_ScreenViewBaseRKNS_12FadeAnimatorINS_5GaugeEEEvvED0Ev>:
 80047ee:	b510      	push	{r4, lr}
 80047f0:	4604      	mov	r4, r0
 80047f2:	2110      	movs	r1, #16
 80047f4:	f022 fe4b 	bl	802748e <_ZdlPvj>
 80047f8:	4620      	mov	r0, r4
 80047fa:	bd10      	pop	{r4, pc}

080047fc <_ZN8touchgfx8CallbackI23graphing_ScreenViewBaseRKNS_12FadeAnimatorINS_5ImageEEEvvED0Ev>:
 80047fc:	b510      	push	{r4, lr}
 80047fe:	4604      	mov	r4, r0
 8004800:	2110      	movs	r1, #16
 8004802:	f022 fe44 	bl	802748e <_ZdlPvj>
 8004806:	4620      	mov	r0, r4
 8004808:	bd10      	pop	{r4, pc}

0800480a <_ZN8touchgfx8CallbackI23graphing_ScreenViewBaseRKNS_6SliderEivED0Ev>:
struct Callback<dest_type, T1, T2, void> : public GenericCallback<T1, T2>
 800480a:	b510      	push	{r4, lr}
 800480c:	4604      	mov	r4, r0
 800480e:	2110      	movs	r1, #16
 8004810:	f022 fe3d 	bl	802748e <_ZdlPvj>
 8004814:	4620      	mov	r0, r4
 8004816:	bd10      	pop	{r4, pc}

08004818 <_ZN8touchgfx21AbstractPainterBitmap9setBitmapERKNS_6BitmapE>:
    virtual void setBitmap(const Bitmap& bmp)
 8004818:	b570      	push	{r4, r5, r6, lr}
        bitmap = bmp;
 800481a:	880b      	ldrh	r3, [r1, #0]
 800481c:	4605      	mov	r5, r0
    virtual void setBitmap(const Bitmap& bmp)
 800481e:	4604      	mov	r4, r0
        bitmap = bmp;
 8004820:	f825 3f04 	strh.w	r3, [r5, #4]!
        bitmapFormat = bitmap.getFormat();
 8004824:	4628      	mov	r0, r5
 8004826:	f017 fac3 	bl	801bdb0 <_ZNK8touchgfx6Bitmap9getFormatEv>
 800482a:	71a0      	strb	r0, [r4, #6]
     *
     * @return a Rect describing the dimensions of this Bitmap.
     */
    Rect getRect() const
    {
        return Rect(0, 0, getWidth(), getHeight());
 800482c:	4628      	mov	r0, r5
 800482e:	f017 f949 	bl	801bac4 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8004832:	4606      	mov	r6, r0
 8004834:	4628      	mov	r0, r5
 8004836:	f017 f979 	bl	801bb2c <_ZNK8touchgfx6Bitmap9getHeightEv>
        bitmapRect = bitmap.getRect();
 800483a:	2300      	movs	r3, #0
 800483c:	81e0      	strh	r0, [r4, #14]
        DisplayTransformation::transformDisplayToFrameBuffer(bitmapRect);
 800483e:	f104 0008 	add.w	r0, r4, #8
        bitmapRect = bitmap.getRect();
 8004842:	60a3      	str	r3, [r4, #8]
 8004844:	81a6      	strh	r6, [r4, #12]
        DisplayTransformation::transformDisplayToFrameBuffer(bitmapRect);
 8004846:	f013 f949 	bl	8017adc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
        bitmapData = bitmap.getData();
 800484a:	4628      	mov	r0, r5
 800484c:	f017 fa2c 	bl	801bca8 <_ZNK8touchgfx6Bitmap7getDataEv>
 8004850:	6120      	str	r0, [r4, #16]
    }
 8004852:	bd70      	pop	{r4, r5, r6, pc}

08004854 <_ZN23graphing_ScreenViewBase11setupScreenEv>:
    right_container1.initialize();
 8004854:	f600 10d8 	addw	r0, r0, #2520	@ 0x9d8
 8004858:	f001 bbc4 	b.w	8005fe4 <_ZN15right_container10initializeEv>

0800485c <_ZNK8touchgfx5Image17invalidateContentEv>:
        return alpha;
    }

    virtual Rect getSolidRect() const;

    virtual void invalidateContent() const
 800485c:	b508      	push	{r3, lr}
    {
        if (alpha > 0)
 800485e:	f890 3028 	ldrb.w	r3, [r0, #40]	@ 0x28
 8004862:	b10b      	cbz	r3, 8004868 <_ZNK8touchgfx5Image17invalidateContentEv+0xc>
        {
            Widget::invalidateContent();
 8004864:	f7fe fd9f 	bl	80033a6 <_ZNK8touchgfx8Drawable17invalidateContentEv>
        }
    }
 8004868:	bd08      	pop	{r3, pc}

0800486a <_ZNK8touchgfx24TextAreaWithWildcardBase17invalidateContentEv>:
    virtual void invalidateContent() const
 800486a:	b508      	push	{r3, lr}
        Widget::invalidateContent();
 800486c:	f7fe fd9b 	bl	80033a6 <_ZNK8touchgfx8Drawable17invalidateContentEv>
    }
 8004870:	bd08      	pop	{r3, pc}

08004872 <_ZN23graphing_ScreenViewBase33sliderValueChangedCallbackHandlerERKN8touchgfx6SliderEi>:
{
 8004872:	b410      	push	{r4}
    if (&src == &slider1)
 8004874:	f200 7434 	addw	r4, r0, #1844	@ 0x734
 8004878:	428c      	cmp	r4, r1
 800487a:	d105      	bne.n	8004888 <_ZN23graphing_ScreenViewBase33sliderValueChangedCallbackHandlerERKN8touchgfx6SliderEi+0x16>
        sliderValueChanged(value);
 800487c:	6803      	ldr	r3, [r0, #0]
 800487e:	4611      	mov	r1, r2
}
 8004880:	f85d 4b04 	ldr.w	r4, [sp], #4
        sliderValueChanged(value);
 8004884:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004886:	4718      	bx	r3
}
 8004888:	f85d 4b04 	ldr.w	r4, [sp], #4
 800488c:	4770      	bx	lr
	...

08004890 <_ZN8touchgfx8TextArea12setBaselineYEs>:
        setY(baselineY - getTypedText().getFont()->getBaseline());
 8004890:	6803      	ldr	r3, [r0, #0]
    virtual void setBaselineY(int16_t baselineY)
 8004892:	b570      	push	{r4, r5, r6, lr}
        setY(baselineY - getTypedText().getFont()->getBaseline());
 8004894:	6b5e      	ldr	r6, [r3, #52]	@ 0x34
    virtual void setBaselineY(int16_t baselineY)
 8004896:	4604      	mov	r4, r0
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 8004898:	4b11      	ldr	r3, [pc, #68]	@ (80048e0 <_ZN8touchgfx8TextArea12setBaselineYEs+0x50>)
        setY(baselineY - getTypedText().getFont()->getBaseline());
 800489a:	b28d      	uxth	r5, r1
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	b92b      	cbnz	r3, 80048ac <_ZN8touchgfx8TextArea12setBaselineYEs+0x1c>
 80048a0:	4b10      	ldr	r3, [pc, #64]	@ (80048e4 <_ZN8touchgfx8TextArea12setBaselineYEs+0x54>)
 80048a2:	216c      	movs	r1, #108	@ 0x6c
 80048a4:	4a10      	ldr	r2, [pc, #64]	@ (80048e8 <_ZN8touchgfx8TextArea12setBaselineYEs+0x58>)
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
 80048a6:	4811      	ldr	r0, [pc, #68]	@ (80048ec <_ZN8touchgfx8TextArea12setBaselineYEs+0x5c>)
 80048a8:	f023 f96a 	bl	8027b80 <__assert_func>
        return typedTextId < numberOfTypedTexts;
 80048ac:	4910      	ldr	r1, [pc, #64]	@ (80048f0 <_ZN8touchgfx8TextArea12setBaselineYEs+0x60>)
 80048ae:	8d82      	ldrh	r2, [r0, #44]	@ 0x2c
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
 80048b0:	8809      	ldrh	r1, [r1, #0]
 80048b2:	4291      	cmp	r1, r2
 80048b4:	d803      	bhi.n	80048be <_ZN8touchgfx8TextArea12setBaselineYEs+0x2e>
 80048b6:	4b0f      	ldr	r3, [pc, #60]	@ (80048f4 <_ZN8touchgfx8TextArea12setBaselineYEs+0x64>)
 80048b8:	216d      	movs	r1, #109	@ 0x6d
 80048ba:	4a0b      	ldr	r2, [pc, #44]	@ (80048e8 <_ZN8touchgfx8TextArea12setBaselineYEs+0x58>)
 80048bc:	e7f3      	b.n	80048a6 <_ZN8touchgfx8TextArea12setBaselineYEs+0x16>
        return fonts[typedTexts[typedTextId].fontIdx];
 80048be:	f813 2012 	ldrb.w	r2, [r3, r2, lsl #1]
 80048c2:	4b0d      	ldr	r3, [pc, #52]	@ (80048f8 <_ZN8touchgfx8TextArea12setBaselineYEs+0x68>)
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80048ca:	6803      	ldr	r3, [r0, #0]
 80048cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048ce:	4798      	blx	r3
 80048d0:	1a29      	subs	r1, r5, r0
 80048d2:	4633      	mov	r3, r6
 80048d4:	4620      	mov	r0, r4
 80048d6:	b209      	sxth	r1, r1
    }
 80048d8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        setY(baselineY - getTypedText().getFont()->getBaseline());
 80048dc:	4718      	bx	r3
 80048de:	bf00      	nop
 80048e0:	24028e78 	.word	0x24028e78
 80048e4:	0802b440 	.word	0x0802b440
 80048e8:	0802b482 	.word	0x0802b482
 80048ec:	0802b4bd 	.word	0x0802b4bd
 80048f0:	24028e7c 	.word	0x24028e7c
 80048f4:	0802b74c 	.word	0x0802b74c
 80048f8:	24028e80 	.word	0x24028e80

080048fc <_ZNK8touchgfx5Gauge17invalidateContentEv>:
     */
    virtual void setAlpha(uint8_t newAlpha);

    virtual void invalidateContent() const
    {
        if (getAlpha() > 0)
 80048fc:	6803      	ldr	r3, [r0, #0]
    virtual void invalidateContent() const
 80048fe:	b510      	push	{r4, lr}
        if (getAlpha() > 0)
 8004900:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
    virtual void invalidateContent() const
 8004904:	4604      	mov	r4, r0
        if (getAlpha() > 0)
 8004906:	4798      	blx	r3
 8004908:	b140      	cbz	r0, 800491c <_ZNK8touchgfx5Gauge17invalidateContentEv+0x20>

    virtual void handleTickEvent();

    virtual void invalidateContent() const
    {
        if (getAlpha() > 0)
 800490a:	6823      	ldr	r3, [r4, #0]
 800490c:	4620      	mov	r0, r4
 800490e:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8004912:	4798      	blx	r3
 8004914:	b110      	cbz	r0, 800491c <_ZNK8touchgfx5Gauge17invalidateContentEv+0x20>
        {
            Container::invalidateContent();
 8004916:	4620      	mov	r0, r4
 8004918:	f7fe fd45 	bl	80033a6 <_ZNK8touchgfx8Drawable17invalidateContentEv>
        {
            AbstractProgressIndicator::invalidateContent();
        }
    }
 800491c:	bd10      	pop	{r4, pc}

0800491e <_ZNK8touchgfx24TextAreaWithWildcardBase21calculateBoundingAreaEv>:

        /**
         * Initializes a new instance of the BoundingArea class which is invalid by default.
         */
        BoundingArea()
            : rect(Rect(0, 0, -1, -1)), // Negative width and height means invalid rectangle
 800491e:	2200      	movs	r2, #0
 8004920:	f04f 31ff 	mov.w	r1, #4294967295
              text(0)
 8004924:	6082      	str	r2, [r0, #8]
            : rect(Rect(0, 0, -1, -1)), // Negative width and height means invalid rectangle
 8004926:	e9c0 2100 	strd	r2, r1, [r0]
    }
 800492a:	4770      	bx	lr

0800492c <_ZN8touchgfx9ContainerC1Ev>:
          touchable(false),
 800492c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8004930:	2200      	movs	r2, #0
 8004932:	8481      	strh	r1, [r0, #36]	@ 0x24
          firstChild(0)
 8004934:	4905      	ldr	r1, [pc, #20]	@ (800494c <_ZN8touchgfx9ContainerC1Ev+0x20>)
 8004936:	6282      	str	r2, [r0, #40]	@ 0x28
 8004938:	6001      	str	r1, [r0, #0]
 800493a:	e9c0 2201 	strd	r2, r2, [r0, #4]
 800493e:	e9c0 2203 	strd	r2, r2, [r0, #12]
          nextSibling(0),
 8004942:	e9c0 2205 	strd	r2, r2, [r0, #20]
          cachedAbsX(0),
 8004946:	e9c0 2207 	strd	r2, r2, [r0, #28]
    }
 800494a:	4770      	bx	lr
 800494c:	0802c70c 	.word	0x0802c70c

08004950 <_ZN8touchgfx6WidgetC1Ev>:
 8004950:	2200      	movs	r2, #0
 8004952:	e9c0 2201 	strd	r2, r2, [r0, #4]
 8004956:	e9c0 2203 	strd	r2, r2, [r0, #12]
          nextSibling(0),
 800495a:	e9c0 2205 	strd	r2, r2, [r0, #20]
          cachedAbsX(0),
 800495e:	e9c0 2207 	strd	r2, r2, [r0, #28]
          touchable(false),
 8004962:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004966:	8482      	strh	r2, [r0, #36]	@ 0x24
class Widget : public Drawable
 8004968:	4a01      	ldr	r2, [pc, #4]	@ (8004970 <_ZN8touchgfx6WidgetC1Ev+0x20>)
 800496a:	6002      	str	r2, [r0, #0]
 800496c:	4770      	bx	lr
 800496e:	bf00      	nop
 8004970:	0802b7e0 	.word	0x0802b7e0

08004974 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>:
    Image(const Bitmap& bmp = Bitmap())
 8004974:	b538      	push	{r3, r4, r5, lr}
 8004976:	4604      	mov	r4, r0
 8004978:	460d      	mov	r5, r1
        : Widget(), bitmap(bmp), alpha(255)
 800497a:	2226      	movs	r2, #38	@ 0x26
 800497c:	2100      	movs	r1, #0
 800497e:	f023 fb9b 	bl	80280b8 <memset>
 8004982:	4620      	mov	r0, r4
 8004984:	f7ff ffe4 	bl	8004950 <_ZN8touchgfx6WidgetC1Ev>
 8004988:	4b06      	ldr	r3, [pc, #24]	@ (80049a4 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE+0x30>)
        Image::setBitmap(bmp);
 800498a:	4620      	mov	r0, r4
 800498c:	4629      	mov	r1, r5
        : Widget(), bitmap(bmp), alpha(255)
 800498e:	6023      	str	r3, [r4, #0]
 8004990:	882b      	ldrh	r3, [r5, #0]
 8004992:	84e3      	strh	r3, [r4, #38]	@ 0x26
 8004994:	23ff      	movs	r3, #255	@ 0xff
 8004996:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
        Image::setBitmap(bmp);
 800499a:	f010 fd52 	bl	8015442 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
    }
 800499e:	4620      	mov	r0, r4
 80049a0:	bd38      	pop	{r3, r4, r5, pc}
 80049a2:	bf00      	nop
 80049a4:	0802d004 	.word	0x0802d004

080049a8 <_ZN8touchgfx8TextAreaC1Ev>:
    TextArea()
 80049a8:	b510      	push	{r4, lr}
 80049aa:	4604      	mov	r4, r0
        : Widget(), typedText(TYPED_TEXT_INVALID), color(0), linespace(0), alpha(255), indentation(0), rotation(TEXT_ROTATE_0), wideTextAction(WIDE_TEXT_NONE), boundingArea()
 80049ac:	2226      	movs	r2, #38	@ 0x26
 80049ae:	2100      	movs	r1, #0
 80049b0:	f023 fb82 	bl	80280b8 <memset>
 80049b4:	4620      	mov	r0, r4
 80049b6:	f7ff ffcb 	bl	8004950 <_ZN8touchgfx6WidgetC1Ev>
 80049ba:	4b0a      	ldr	r3, [pc, #40]	@ (80049e4 <_ZN8touchgfx8TextAreaC1Ev+0x3c>)
 80049bc:	f44f 027f 	mov.w	r2, #16711680	@ 0xff0000
    }
 80049c0:	4620      	mov	r0, r4
        : Widget(), typedText(TYPED_TEXT_INVALID), color(0), linespace(0), alpha(255), indentation(0), rotation(TEXT_ROTATE_0), wideTextAction(WIDE_TEXT_NONE), boundingArea()
 80049c2:	6023      	str	r3, [r4, #0]
        : typedTextId(id)
 80049c4:	4b08      	ldr	r3, [pc, #32]	@ (80049e8 <_ZN8touchgfx8TextAreaC1Ev+0x40>)
 80049c6:	62a3      	str	r3, [r4, #40]	@ 0x28
 80049c8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80049cc:	85a3      	strh	r3, [r4, #44]	@ 0x2c
 80049ce:	2300      	movs	r3, #0
 80049d0:	e9c4 320c 	strd	r3, r2, [r4, #48]	@ 0x30
        : x(rectX), y(rectY), width(rectWidth), height(rectHeight)
 80049d4:	f04f 32ff 	mov.w	r2, #4294967295
 80049d8:	8723      	strh	r3, [r4, #56]	@ 0x38
 80049da:	63e3      	str	r3, [r4, #60]	@ 0x3c
              text(0)
 80049dc:	e9c4 2310 	strd	r2, r3, [r4, #64]	@ 0x40
    }
 80049e0:	bd10      	pop	{r4, pc}
 80049e2:	bf00      	nop
 80049e4:	0802cda0 	.word	0x0802cda0
 80049e8:	0802aec4 	.word	0x0802aec4

080049ec <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>:
    TextAreaWithOneWildcard()
 80049ec:	b510      	push	{r4, lr}
 80049ee:	4604      	mov	r4, r0
        : TextArea()
 80049f0:	f7ff ffda 	bl	80049a8 <_ZN8touchgfx8TextAreaC1Ev>
        : TextAreaWithWildcardBase(), wc1(0)
 80049f4:	4b02      	ldr	r3, [pc, #8]	@ (8004a00 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev+0x14>)
    }
 80049f6:	4620      	mov	r0, r4
        : TextAreaWithWildcardBase(), wc1(0)
 80049f8:	6023      	str	r3, [r4, #0]
 80049fa:	2300      	movs	r3, #0
 80049fc:	64a3      	str	r3, [r4, #72]	@ 0x48
    }
 80049fe:	bd10      	pop	{r4, pc}
 8004a00:	0802b848 	.word	0x0802b848

08004a04 <_ZN8touchgfx12FadeAnimatorINS_5GaugeEE21nextFadeAnimationStepEv>:

protected:
    /** Execute next step in fade animation and stop the timer if necessary. */
    void nextFadeAnimationStep()
    {
        if (fadeAnimationRunning)
 8004a04:	f890 31a0 	ldrb.w	r3, [r0, #416]	@ 0x1a0
    void nextFadeAnimationStep()
 8004a08:	b570      	push	{r4, r5, r6, lr}
 8004a0a:	4604      	mov	r4, r0
        if (fadeAnimationRunning)
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d052      	beq.n	8004ab6 <_ZN8touchgfx12FadeAnimatorINS_5GaugeEE21nextFadeAnimationStepEv+0xb2>
        {
            fadeAnimationCounter++;
 8004a10:	f8b0 01a2 	ldrh.w	r0, [r0, #418]	@ 0x1a2
            if (fadeAnimationCounter >= fadeAnimationDelay)
 8004a14:	f8b4 31a4 	ldrh.w	r3, [r4, #420]	@ 0x1a4
            fadeAnimationCounter++;
 8004a18:	3001      	adds	r0, #1
 8004a1a:	b280      	uxth	r0, r0
            if (fadeAnimationCounter >= fadeAnimationDelay)
 8004a1c:	4298      	cmp	r0, r3
            fadeAnimationCounter++;
 8004a1e:	f8a4 01a2 	strh.w	r0, [r4, #418]	@ 0x1a2
            if (fadeAnimationCounter >= fadeAnimationDelay)
 8004a22:	d348      	bcc.n	8004ab6 <_ZN8touchgfx12FadeAnimatorINS_5GaugeEE21nextFadeAnimationStepEv+0xb2>
            {
                // Adjust the used animationCounter for the startup delay
                uint32_t actualAnimationCounter = fadeAnimationCounter - fadeAnimationDelay;

                int16_t newAlpha = fadeAnimationStartAlpha + (int16_t)fadeAnimationAlphaEquation(actualAnimationCounter, 0, fadeAnimationEndAlpha - fadeAnimationStartAlpha, fadeAnimationDuration);
 8004a24:	f8b4 51a8 	ldrh.w	r5, [r4, #424]	@ 0x1a8
 8004a28:	1ac0      	subs	r0, r0, r3
 8004a2a:	f8b4 21aa 	ldrh.w	r2, [r4, #426]	@ 0x1aa
 8004a2e:	2100      	movs	r1, #0
 8004a30:	f8d4 61ac 	ldr.w	r6, [r4, #428]	@ 0x1ac
 8004a34:	b280      	uxth	r0, r0
 8004a36:	1b52      	subs	r2, r2, r5
 8004a38:	f8b4 31a6 	ldrh.w	r3, [r4, #422]	@ 0x1a6
 8004a3c:	b212      	sxth	r2, r2
 8004a3e:	47b0      	blx	r6
 8004a40:	4405      	add	r5, r0

                if (T::getAlpha() != newAlpha)
 8004a42:	4620      	mov	r0, r4
                int16_t newAlpha = fadeAnimationStartAlpha + (int16_t)fadeAnimationAlphaEquation(actualAnimationCounter, 0, fadeAnimationEndAlpha - fadeAnimationStartAlpha, fadeAnimationDuration);
 8004a44:	b2ae      	uxth	r6, r5
 8004a46:	b22d      	sxth	r5, r5
                if (T::getAlpha() != newAlpha)
 8004a48:	f00a fd89 	bl	800f55e <_ZNK8touchgfx25AbstractProgressIndicator8getAlphaEv>
 8004a4c:	42a8      	cmp	r0, r5
 8004a4e:	d007      	beq.n	8004a60 <_ZN8touchgfx12FadeAnimatorINS_5GaugeEE21nextFadeAnimationStepEv+0x5c>
                {
                    if (newAlpha == 0)
 8004a50:	bb4d      	cbnz	r5, 8004aa6 <_ZN8touchgfx12FadeAnimatorINS_5GaugeEE21nextFadeAnimationStepEv+0xa2>
                    {
                        // InvalidateContent before it becomes invisible
                        T::invalidateContent();
 8004a52:	4620      	mov	r0, r4
 8004a54:	f7ff ff52 	bl	80048fc <_ZNK8touchgfx5Gauge17invalidateContentEv>
                        T::setAlpha((uint8_t)newAlpha);
 8004a58:	4629      	mov	r1, r5
 8004a5a:	4620      	mov	r0, r4
 8004a5c:	f010 fa32 	bl	8014ec4 <_ZN8touchgfx5Gauge8setAlphaEh>
                        T::setAlpha((uint8_t)newAlpha);
                        T::invalidateContent();
                    }
                }

                if (fadeAnimationCounter >= (uint32_t)(fadeAnimationDelay + fadeAnimationDuration))
 8004a60:	f8b4 31a4 	ldrh.w	r3, [r4, #420]	@ 0x1a4
 8004a64:	f8b4 11a6 	ldrh.w	r1, [r4, #422]	@ 0x1a6
 8004a68:	f8b4 21a2 	ldrh.w	r2, [r4, #418]	@ 0x1a2
 8004a6c:	440b      	add	r3, r1
 8004a6e:	429a      	cmp	r2, r3
 8004a70:	d321      	bcc.n	8004ab6 <_ZN8touchgfx12FadeAnimatorINS_5GaugeEE21nextFadeAnimationStepEv+0xb2>
                {
                    // End of animation
                    fadeAnimationRunning = false;
 8004a72:	2300      	movs	r3, #0
 8004a74:	f884 31a0 	strb.w	r3, [r4, #416]	@ 0x1a0
                    fadeAnimationDuration = 0;
 8004a78:	f8a4 31a6 	strh.w	r3, [r4, #422]	@ 0x1a6
                    Application::getInstance()->unregisterTimerWidget(this);
 8004a7c:	f013 f9e2 	bl	8017e44 <_ZN8touchgfx11Application11getInstanceEv>
     * @note If widget has been registered multiple times, an equal number of calls to unregister
     *       are required to stop widget from receiving tick events.
     */
    void unregisterTimerWidget(const Drawable* w)
    {
        timerWidgets.remove(w);
 8004a80:	4621      	mov	r1, r4
 8004a82:	3004      	adds	r0, #4
 8004a84:	f013 fa2b 	bl	8017ede <_ZN8touchgfx11Application12TimerWidgets6removeEPKNS_8DrawableE>

                    if (fadeAnimationEndedCallback && fadeAnimationEndedCallback->isValid())
 8004a88:	f8d4 01b0 	ldr.w	r0, [r4, #432]	@ 0x1b0
 8004a8c:	b198      	cbz	r0, 8004ab6 <_ZN8touchgfx12FadeAnimatorINS_5GaugeEE21nextFadeAnimationStepEv+0xb2>
 8004a8e:	6803      	ldr	r3, [r0, #0]
 8004a90:	68db      	ldr	r3, [r3, #12]
 8004a92:	4798      	blx	r3
 8004a94:	b178      	cbz	r0, 8004ab6 <_ZN8touchgfx12FadeAnimatorINS_5GaugeEE21nextFadeAnimationStepEv+0xb2>
                    {
                        fadeAnimationEndedCallback->execute(*this);
 8004a96:	f8d4 01b0 	ldr.w	r0, [r4, #432]	@ 0x1b0
 8004a9a:	4621      	mov	r1, r4
 8004a9c:	6803      	ldr	r3, [r0, #0]
                    }
                }
            }
        }
    }
 8004a9e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
                        fadeAnimationEndedCallback->execute(*this);
 8004aa2:	689b      	ldr	r3, [r3, #8]
 8004aa4:	4718      	bx	r3
                        T::setAlpha((uint8_t)newAlpha);
 8004aa6:	4620      	mov	r0, r4
 8004aa8:	b2f1      	uxtb	r1, r6
 8004aaa:	f010 fa0b 	bl	8014ec4 <_ZN8touchgfx5Gauge8setAlphaEh>
                        T::invalidateContent();
 8004aae:	4620      	mov	r0, r4
 8004ab0:	f7ff ff24 	bl	80048fc <_ZNK8touchgfx5Gauge17invalidateContentEv>
 8004ab4:	e7d4      	b.n	8004a60 <_ZN8touchgfx12FadeAnimatorINS_5GaugeEE21nextFadeAnimationStepEv+0x5c>
    }
 8004ab6:	bd70      	pop	{r4, r5, r6, pc}

08004ab8 <_ZN8touchgfx12FadeAnimatorINS_5GaugeEE15handleTickEventEv>:
    virtual void handleTickEvent()
 8004ab8:	b510      	push	{r4, lr}
 8004aba:	4604      	mov	r4, r0
        T::handleTickEvent();
 8004abc:	f00a fdde 	bl	800f67c <_ZN8touchgfx25AbstractProgressIndicator15handleTickEventEv>
        nextFadeAnimationStep();
 8004ac0:	4620      	mov	r0, r4
 8004ac2:	f7ff ff9f 	bl	8004a04 <_ZN8touchgfx12FadeAnimatorINS_5GaugeEE21nextFadeAnimationStepEv>
    }
 8004ac6:	bd10      	pop	{r4, pc}

08004ac8 <_ZN23graphing_ScreenViewBase29animationEndedCallbackHandlerERKN8touchgfx13AnimatedImageE>:
{
 8004ac8:	b538      	push	{r3, r4, r5, lr}
    if (&src == &car)
 8004aca:	f500 7314 	add.w	r3, r0, #592	@ 0x250
{
 8004ace:	4604      	mov	r4, r0
    if (&src == &car)
 8004ad0:	428b      	cmp	r3, r1
 8004ad2:	d12c      	bne.n	8004b2e <_ZN23graphing_ScreenViewBase29animationEndedCallbackHandlerERKN8touchgfx13AnimatedImageE+0x66>
        fadeAnimationEndedCallback = 0;
 8004ad4:	2300      	movs	r3, #0
        gauge1.startFadeAnimation(255, 30, touchgfx::EasingEquations::linearEaseIn);
 8004ad6:	f500 7574 	add.w	r5, r0, #976	@ 0x3d0
 8004ada:	f8c0 3580 	str.w	r3, [r0, #1408]	@ 0x580
        if (!fadeAnimationRunning)
 8004ade:	f890 3570 	ldrb.w	r3, [r0, #1392]	@ 0x570
 8004ae2:	b92b      	cbnz	r3, 8004af0 <_ZN23graphing_ScreenViewBase29animationEndedCallbackHandlerERKN8touchgfx13AnimatedImageE+0x28>
            Application::getInstance()->registerTimerWidget(this);
 8004ae4:	f013 f9ae 	bl	8017e44 <_ZN8touchgfx11Application11getInstanceEv>
        timerWidgets.add(w);
 8004ae8:	4629      	mov	r1, r5
 8004aea:	3004      	adds	r0, #4
 8004aec:	f013 faa0 	bl	8018030 <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE>
        fadeAnimationCounter = 0;
 8004af0:	2300      	movs	r3, #0
        fadeAnimationStartAlpha = T::getAlpha();
 8004af2:	4628      	mov	r0, r5
        fadeAnimationCounter = 0;
 8004af4:	f8a4 3572 	strh.w	r3, [r4, #1394]	@ 0x572
        fadeAnimationStartAlpha = T::getAlpha();
 8004af8:	f00a fd31 	bl	800f55e <_ZNK8touchgfx25AbstractProgressIndicator8getAlphaEv>
        fadeAnimationEndAlpha = endAlpha;
 8004afc:	23ff      	movs	r3, #255	@ 0xff
        fadeAnimationStartAlpha = T::getAlpha();
 8004afe:	f8a4 0578 	strh.w	r0, [r4, #1400]	@ 0x578
        fadeAnimationEndAlpha = endAlpha;
 8004b02:	f8a4 357a 	strh.w	r3, [r4, #1402]	@ 0x57a
        fadeAnimationDuration = duration;
 8004b06:	231e      	movs	r3, #30
 8004b08:	f8a4 3576 	strh.w	r3, [r4, #1398]	@ 0x576
        fadeAnimationAlphaEquation = alphaProgressionEquation;
 8004b0c:	4b08      	ldr	r3, [pc, #32]	@ (8004b30 <_ZN23graphing_ScreenViewBase29animationEndedCallbackHandlerERKN8touchgfx13AnimatedImageE+0x68>)
 8004b0e:	f8c4 357c 	str.w	r3, [r4, #1404]	@ 0x57c
        fadeAnimationRunning = true;
 8004b12:	2301      	movs	r3, #1
 8004b14:	f884 3570 	strb.w	r3, [r4, #1392]	@ 0x570
        if (fadeAnimationDelay == 0 && fadeAnimationDuration == 0)
 8004b18:	f8d4 3574 	ldr.w	r3, [r4, #1396]	@ 0x574
 8004b1c:	b913      	cbnz	r3, 8004b24 <_ZN23graphing_ScreenViewBase29animationEndedCallbackHandlerERKN8touchgfx13AnimatedImageE+0x5c>
            nextFadeAnimationStep(); // Set end alpha and shut down
 8004b1e:	4628      	mov	r0, r5
 8004b20:	f7ff ff70 	bl	8004a04 <_ZN8touchgfx12FadeAnimatorINS_5GaugeEE21nextFadeAnimationStepEv>
        gauge1.setFadeAnimationEndedAction(interaction2EndedCallback);
 8004b24:	f504 5374 	add.w	r3, r4, #15616	@ 0x3d00
 8004b28:	333c      	adds	r3, #60	@ 0x3c
        fadeAnimationEndedCallback = &callback;
 8004b2a:	f8c4 3580 	str.w	r3, [r4, #1408]	@ 0x580
}
 8004b2e:	bd38      	pop	{r3, r4, r5, pc}
 8004b30:	0801a231 	.word	0x0801a231

08004b34 <_ZN8touchgfx12FadeAnimatorINS_5ImageEE21nextFadeAnimationStepEv>:
        if (fadeAnimationRunning)
 8004b34:	f890 3029 	ldrb.w	r3, [r0, #41]	@ 0x29
    void nextFadeAnimationStep()
 8004b38:	b570      	push	{r4, r5, r6, lr}
 8004b3a:	4604      	mov	r4, r0
        if (fadeAnimationRunning)
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d040      	beq.n	8004bc2 <_ZN8touchgfx12FadeAnimatorINS_5ImageEE21nextFadeAnimationStepEv+0x8e>
            fadeAnimationCounter++;
 8004b40:	8d40      	ldrh	r0, [r0, #42]	@ 0x2a
            if (fadeAnimationCounter >= fadeAnimationDelay)
 8004b42:	8da3      	ldrh	r3, [r4, #44]	@ 0x2c
            fadeAnimationCounter++;
 8004b44:	3001      	adds	r0, #1
 8004b46:	b280      	uxth	r0, r0
            if (fadeAnimationCounter >= fadeAnimationDelay)
 8004b48:	4298      	cmp	r0, r3
            fadeAnimationCounter++;
 8004b4a:	8560      	strh	r0, [r4, #42]	@ 0x2a
            if (fadeAnimationCounter >= fadeAnimationDelay)
 8004b4c:	d339      	bcc.n	8004bc2 <_ZN8touchgfx12FadeAnimatorINS_5ImageEE21nextFadeAnimationStepEv+0x8e>
                int16_t newAlpha = fadeAnimationStartAlpha + (int16_t)fadeAnimationAlphaEquation(actualAnimationCounter, 0, fadeAnimationEndAlpha - fadeAnimationStartAlpha, fadeAnimationDuration);
 8004b4e:	8e25      	ldrh	r5, [r4, #48]	@ 0x30
 8004b50:	1ac0      	subs	r0, r0, r3
 8004b52:	8e62      	ldrh	r2, [r4, #50]	@ 0x32
 8004b54:	2100      	movs	r1, #0
 8004b56:	8de3      	ldrh	r3, [r4, #46]	@ 0x2e
 8004b58:	b280      	uxth	r0, r0
 8004b5a:	1b52      	subs	r2, r2, r5
 8004b5c:	6b66      	ldr	r6, [r4, #52]	@ 0x34
 8004b5e:	b212      	sxth	r2, r2
 8004b60:	47b0      	blx	r6
 8004b62:	4405      	add	r5, r0
                if (T::getAlpha() != newAlpha)
 8004b64:	f894 2028 	ldrb.w	r2, [r4, #40]	@ 0x28
                int16_t newAlpha = fadeAnimationStartAlpha + (int16_t)fadeAnimationAlphaEquation(actualAnimationCounter, 0, fadeAnimationEndAlpha - fadeAnimationStartAlpha, fadeAnimationDuration);
 8004b68:	b2ab      	uxth	r3, r5
 8004b6a:	b22d      	sxth	r5, r5
                if (T::getAlpha() != newAlpha)
 8004b6c:	42aa      	cmp	r2, r5
 8004b6e:	d005      	beq.n	8004b7c <_ZN8touchgfx12FadeAnimatorINS_5ImageEE21nextFadeAnimationStepEv+0x48>
                    if (newAlpha == 0)
 8004b70:	bb0d      	cbnz	r5, 8004bb6 <_ZN8touchgfx12FadeAnimatorINS_5ImageEE21nextFadeAnimationStepEv+0x82>
                        T::invalidateContent();
 8004b72:	4620      	mov	r0, r4
 8004b74:	f7ff fe72 	bl	800485c <_ZNK8touchgfx5Image17invalidateContentEv>
        alpha = newAlpha;
 8004b78:	f884 5028 	strb.w	r5, [r4, #40]	@ 0x28
                if (fadeAnimationCounter >= (uint32_t)(fadeAnimationDelay + fadeAnimationDuration))
 8004b7c:	8da3      	ldrh	r3, [r4, #44]	@ 0x2c
 8004b7e:	8de1      	ldrh	r1, [r4, #46]	@ 0x2e
 8004b80:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 8004b82:	440b      	add	r3, r1
 8004b84:	429a      	cmp	r2, r3
 8004b86:	d31c      	bcc.n	8004bc2 <_ZN8touchgfx12FadeAnimatorINS_5ImageEE21nextFadeAnimationStepEv+0x8e>
                    fadeAnimationRunning = false;
 8004b88:	2300      	movs	r3, #0
 8004b8a:	f884 3029 	strb.w	r3, [r4, #41]	@ 0x29
                    fadeAnimationDuration = 0;
 8004b8e:	85e3      	strh	r3, [r4, #46]	@ 0x2e
                    Application::getInstance()->unregisterTimerWidget(this);
 8004b90:	f013 f958 	bl	8017e44 <_ZN8touchgfx11Application11getInstanceEv>
        timerWidgets.remove(w);
 8004b94:	4621      	mov	r1, r4
 8004b96:	3004      	adds	r0, #4
 8004b98:	f013 f9a1 	bl	8017ede <_ZN8touchgfx11Application12TimerWidgets6removeEPKNS_8DrawableE>
                    if (fadeAnimationEndedCallback && fadeAnimationEndedCallback->isValid())
 8004b9c:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8004b9e:	b180      	cbz	r0, 8004bc2 <_ZN8touchgfx12FadeAnimatorINS_5ImageEE21nextFadeAnimationStepEv+0x8e>
 8004ba0:	6803      	ldr	r3, [r0, #0]
 8004ba2:	68db      	ldr	r3, [r3, #12]
 8004ba4:	4798      	blx	r3
 8004ba6:	b160      	cbz	r0, 8004bc2 <_ZN8touchgfx12FadeAnimatorINS_5ImageEE21nextFadeAnimationStepEv+0x8e>
                        fadeAnimationEndedCallback->execute(*this);
 8004ba8:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8004baa:	4621      	mov	r1, r4
 8004bac:	6803      	ldr	r3, [r0, #0]
    }
 8004bae:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
                        fadeAnimationEndedCallback->execute(*this);
 8004bb2:	689b      	ldr	r3, [r3, #8]
 8004bb4:	4718      	bx	r3
                        T::invalidateContent();
 8004bb6:	4620      	mov	r0, r4
                        T::setAlpha((uint8_t)newAlpha);
 8004bb8:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
                        T::invalidateContent();
 8004bbc:	f7ff fe4e 	bl	800485c <_ZNK8touchgfx5Image17invalidateContentEv>
 8004bc0:	e7dc      	b.n	8004b7c <_ZN8touchgfx12FadeAnimatorINS_5ImageEE21nextFadeAnimationStepEv+0x48>
    }
 8004bc2:	bd70      	pop	{r4, r5, r6, pc}

08004bc4 <_ZN8touchgfx12FadeAnimatorINS_5ImageEE15handleTickEventEv>:
    virtual void handleTickEvent()
 8004bc4:	b508      	push	{r3, lr}
        nextFadeAnimationStep();
 8004bc6:	f7ff ffb5 	bl	8004b34 <_ZN8touchgfx12FadeAnimatorINS_5ImageEE21nextFadeAnimationStepEv>
    }
 8004bca:	bd08      	pop	{r3, pc}

08004bcc <_ZN23graphing_ScreenViewBase32interaction2EndedCallbackHandlerERKN8touchgfx12FadeAnimatorINS0_5GaugeEEE>:
{
 8004bcc:	b538      	push	{r3, r4, r5, lr}
        fadeAnimationEndedCallback = 0;
 8004bce:	2300      	movs	r3, #0
 8004bd0:	4604      	mov	r4, r0
    background.startFadeAnimation(255, 15, touchgfx::EasingEquations::linearEaseIn);
 8004bd2:	f100 05f0 	add.w	r5, r0, #240	@ 0xf0
 8004bd6:	f8c0 3128 	str.w	r3, [r0, #296]	@ 0x128
        if (!fadeAnimationRunning)
 8004bda:	f890 3119 	ldrb.w	r3, [r0, #281]	@ 0x119
 8004bde:	b92b      	cbnz	r3, 8004bec <_ZN23graphing_ScreenViewBase32interaction2EndedCallbackHandlerERKN8touchgfx12FadeAnimatorINS0_5GaugeEEE+0x20>
            Application::getInstance()->registerTimerWidget(this);
 8004be0:	f013 f930 	bl	8017e44 <_ZN8touchgfx11Application11getInstanceEv>
        timerWidgets.add(w);
 8004be4:	4629      	mov	r1, r5
 8004be6:	3004      	adds	r0, #4
 8004be8:	f013 fa22 	bl	8018030 <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE>
        fadeAnimationCounter = 0;
 8004bec:	2300      	movs	r3, #0
 8004bee:	f8a4 311a 	strh.w	r3, [r4, #282]	@ 0x11a
        fadeAnimationStartAlpha = T::getAlpha();
 8004bf2:	f894 3118 	ldrb.w	r3, [r4, #280]	@ 0x118
 8004bf6:	f8a4 3120 	strh.w	r3, [r4, #288]	@ 0x120
        fadeAnimationEndAlpha = endAlpha;
 8004bfa:	23ff      	movs	r3, #255	@ 0xff
 8004bfc:	f8a4 3122 	strh.w	r3, [r4, #290]	@ 0x122
        fadeAnimationDuration = duration;
 8004c00:	230f      	movs	r3, #15
 8004c02:	f8a4 311e 	strh.w	r3, [r4, #286]	@ 0x11e
        fadeAnimationAlphaEquation = alphaProgressionEquation;
 8004c06:	4b09      	ldr	r3, [pc, #36]	@ (8004c2c <_ZN23graphing_ScreenViewBase32interaction2EndedCallbackHandlerERKN8touchgfx12FadeAnimatorINS0_5GaugeEEE+0x60>)
 8004c08:	f8c4 3124 	str.w	r3, [r4, #292]	@ 0x124
        fadeAnimationRunning = true;
 8004c0c:	2301      	movs	r3, #1
 8004c0e:	f884 3119 	strb.w	r3, [r4, #281]	@ 0x119
        if (fadeAnimationDelay == 0 && fadeAnimationDuration == 0)
 8004c12:	f8d4 311c 	ldr.w	r3, [r4, #284]	@ 0x11c
 8004c16:	b913      	cbnz	r3, 8004c1e <_ZN23graphing_ScreenViewBase32interaction2EndedCallbackHandlerERKN8touchgfx12FadeAnimatorINS0_5GaugeEEE+0x52>
            nextFadeAnimationStep(); // Set end alpha and shut down
 8004c18:	4628      	mov	r0, r5
 8004c1a:	f7ff ff8b 	bl	8004b34 <_ZN8touchgfx12FadeAnimatorINS_5ImageEE21nextFadeAnimationStepEv>
    background.setFadeAnimationEndedAction(interaction3EndedCallback);
 8004c1e:	f504 5375 	add.w	r3, r4, #15680	@ 0x3d40
 8004c22:	330c      	adds	r3, #12
        fadeAnimationEndedCallback = &callback;
 8004c24:	f8c4 3128 	str.w	r3, [r4, #296]	@ 0x128
}
 8004c28:	bd38      	pop	{r3, r4, r5, pc}
 8004c2a:	bf00      	nop
 8004c2c:	0801a231 	.word	0x0801a231

08004c30 <_ZN8touchgfx12MoveAnimatorINS_5ImageEE21nextMoveAnimationStepEv>:

protected:
    /** Execute next step in move animation and stop the timer if the animation has finished. */
    void nextMoveAnimationStep()
    {
        if (moveAnimationRunning)
 8004c30:	f890 3029 	ldrb.w	r3, [r0, #41]	@ 0x29
    void nextMoveAnimationStep()
 8004c34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004c38:	4604      	mov	r4, r0
        if (moveAnimationRunning)
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d041      	beq.n	8004cc2 <_ZN8touchgfx12MoveAnimatorINS_5ImageEE21nextMoveAnimationStepEv+0x92>
        {
            moveAnimationCounter++;
 8004c3e:	8d43      	ldrh	r3, [r0, #42]	@ 0x2a
            if (moveAnimationCounter >= moveAnimationDelay)
 8004c40:	8d82      	ldrh	r2, [r0, #44]	@ 0x2c
            moveAnimationCounter++;
 8004c42:	3301      	adds	r3, #1
 8004c44:	b29b      	uxth	r3, r3
            if (moveAnimationCounter >= moveAnimationDelay)
 8004c46:	4293      	cmp	r3, r2
            moveAnimationCounter++;
 8004c48:	8543      	strh	r3, [r0, #42]	@ 0x2a
            if (moveAnimationCounter >= moveAnimationDelay)
 8004c4a:	d33a      	bcc.n	8004cc2 <_ZN8touchgfx12MoveAnimatorINS_5ImageEE21nextMoveAnimationStepEv+0x92>
            {
                // Adjust the used animationCounter for the startup delay
                uint32_t actualAnimationCounter = moveAnimationCounter - moveAnimationDelay;

                int16_t deltaX = moveAnimationXEquation(actualAnimationCounter, 0, moveAnimationEndX - moveAnimationStartX, moveAnimationDuration);
 8004c4c:	1a9b      	subs	r3, r3, r2
 8004c4e:	8e82      	ldrh	r2, [r0, #52]	@ 0x34
 8004c50:	6b86      	ldr	r6, [r0, #56]	@ 0x38
 8004c52:	2100      	movs	r1, #0
 8004c54:	b29d      	uxth	r5, r3
 8004c56:	8e03      	ldrh	r3, [r0, #48]	@ 0x30
 8004c58:	1ad2      	subs	r2, r2, r3
 8004c5a:	8dc3      	ldrh	r3, [r0, #46]	@ 0x2e
 8004c5c:	4628      	mov	r0, r5
 8004c5e:	b212      	sxth	r2, r2
 8004c60:	47b0      	blx	r6
                int16_t deltaY = moveAnimationYEquation(actualAnimationCounter, 0, moveAnimationEndY - moveAnimationStartY, moveAnimationDuration);
 8004c62:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 8004c64:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
                int16_t deltaX = moveAnimationXEquation(actualAnimationCounter, 0, moveAnimationEndX - moveAnimationStartX, moveAnimationDuration);
 8004c66:	4606      	mov	r6, r0
                int16_t deltaY = moveAnimationYEquation(actualAnimationCounter, 0, moveAnimationEndY - moveAnimationStartY, moveAnimationDuration);
 8004c68:	2100      	movs	r1, #0
 8004c6a:	6be7      	ldr	r7, [r4, #60]	@ 0x3c
 8004c6c:	1ad2      	subs	r2, r2, r3
 8004c6e:	4628      	mov	r0, r5
 8004c70:	8de3      	ldrh	r3, [r4, #46]	@ 0x2e
 8004c72:	b212      	sxth	r2, r2
 8004c74:	47b8      	blx	r7

                T::moveTo(moveAnimationStartX + deltaX, moveAnimationStartY + deltaY);
 8004c76:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 8004c78:	18c2      	adds	r2, r0, r3
 8004c7a:	8e23      	ldrh	r3, [r4, #48]	@ 0x30
 8004c7c:	4620      	mov	r0, r4
 8004c7e:	18f1      	adds	r1, r6, r3
 8004c80:	b212      	sxth	r2, r2
 8004c82:	b209      	sxth	r1, r1
 8004c84:	f7fe fad3 	bl	800322e <_ZN8touchgfx8Drawable6moveToEss>

                if (moveAnimationCounter >= (uint32_t)(moveAnimationDelay + moveAnimationDuration))
 8004c88:	8da3      	ldrh	r3, [r4, #44]	@ 0x2c
 8004c8a:	8de1      	ldrh	r1, [r4, #46]	@ 0x2e
 8004c8c:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 8004c8e:	440b      	add	r3, r1
 8004c90:	429a      	cmp	r2, r3
 8004c92:	d316      	bcc.n	8004cc2 <_ZN8touchgfx12MoveAnimatorINS_5ImageEE21nextMoveAnimationStepEv+0x92>
                {
                    // End of animation
                    moveAnimationRunning = false;
 8004c94:	2300      	movs	r3, #0
 8004c96:	f884 3029 	strb.w	r3, [r4, #41]	@ 0x29
                    moveAnimationCounter = 0;
 8004c9a:	8563      	strh	r3, [r4, #42]	@ 0x2a
                    Application::getInstance()->unregisterTimerWidget(this);
 8004c9c:	f013 f8d2 	bl	8017e44 <_ZN8touchgfx11Application11getInstanceEv>
        timerWidgets.remove(w);
 8004ca0:	4621      	mov	r1, r4
 8004ca2:	3004      	adds	r0, #4
 8004ca4:	f013 f91b 	bl	8017ede <_ZN8touchgfx11Application12TimerWidgets6removeEPKNS_8DrawableE>

                    if (moveAnimationEndedCallback && moveAnimationEndedCallback->isValid())
 8004ca8:	6c20      	ldr	r0, [r4, #64]	@ 0x40
 8004caa:	b150      	cbz	r0, 8004cc2 <_ZN8touchgfx12MoveAnimatorINS_5ImageEE21nextMoveAnimationStepEv+0x92>
 8004cac:	6803      	ldr	r3, [r0, #0]
 8004cae:	68db      	ldr	r3, [r3, #12]
 8004cb0:	4798      	blx	r3
 8004cb2:	b130      	cbz	r0, 8004cc2 <_ZN8touchgfx12MoveAnimatorINS_5ImageEE21nextMoveAnimationStepEv+0x92>
                    {
                        moveAnimationEndedCallback->execute(*this);
 8004cb4:	6c20      	ldr	r0, [r4, #64]	@ 0x40
 8004cb6:	4621      	mov	r1, r4
 8004cb8:	6803      	ldr	r3, [r0, #0]
                    }
                }
            }
        }
    }
 8004cba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
                        moveAnimationEndedCallback->execute(*this);
 8004cbe:	689b      	ldr	r3, [r3, #8]
 8004cc0:	4718      	bx	r3
    }
 8004cc2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08004cc6 <_ZN8touchgfx12FadeAnimatorINS_12MoveAnimatorINS_5ImageEEEE15handleTickEventEv>:
    virtual void handleTickEvent()
 8004cc6:	b570      	push	{r4, r5, r6, lr}
 8004cc8:	4604      	mov	r4, r0
        nextMoveAnimationStep();
 8004cca:	f7ff ffb1 	bl	8004c30 <_ZN8touchgfx12MoveAnimatorINS_5ImageEE21nextMoveAnimationStepEv>
        if (fadeAnimationRunning)
 8004cce:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d04a      	beq.n	8004d6c <_ZN8touchgfx12FadeAnimatorINS_12MoveAnimatorINS_5ImageEEEE15handleTickEventEv+0xa6>
            fadeAnimationCounter++;
 8004cd6:	f8b4 0046 	ldrh.w	r0, [r4, #70]	@ 0x46
            if (fadeAnimationCounter >= fadeAnimationDelay)
 8004cda:	f8b4 3048 	ldrh.w	r3, [r4, #72]	@ 0x48
            fadeAnimationCounter++;
 8004cde:	3001      	adds	r0, #1
 8004ce0:	b280      	uxth	r0, r0
            if (fadeAnimationCounter >= fadeAnimationDelay)
 8004ce2:	4298      	cmp	r0, r3
            fadeAnimationCounter++;
 8004ce4:	f8a4 0046 	strh.w	r0, [r4, #70]	@ 0x46
            if (fadeAnimationCounter >= fadeAnimationDelay)
 8004ce8:	d340      	bcc.n	8004d6c <_ZN8touchgfx12FadeAnimatorINS_12MoveAnimatorINS_5ImageEEEE15handleTickEventEv+0xa6>
                int16_t newAlpha = fadeAnimationStartAlpha + (int16_t)fadeAnimationAlphaEquation(actualAnimationCounter, 0, fadeAnimationEndAlpha - fadeAnimationStartAlpha, fadeAnimationDuration);
 8004cea:	f8b4 504c 	ldrh.w	r5, [r4, #76]	@ 0x4c
 8004cee:	1ac0      	subs	r0, r0, r3
 8004cf0:	f8b4 204e 	ldrh.w	r2, [r4, #78]	@ 0x4e
 8004cf4:	2100      	movs	r1, #0
 8004cf6:	f8b4 304a 	ldrh.w	r3, [r4, #74]	@ 0x4a
 8004cfa:	b280      	uxth	r0, r0
 8004cfc:	1b52      	subs	r2, r2, r5
 8004cfe:	6d26      	ldr	r6, [r4, #80]	@ 0x50
 8004d00:	b212      	sxth	r2, r2
 8004d02:	47b0      	blx	r6
 8004d04:	4405      	add	r5, r0
                if (T::getAlpha() != newAlpha)
 8004d06:	f894 2028 	ldrb.w	r2, [r4, #40]	@ 0x28
                int16_t newAlpha = fadeAnimationStartAlpha + (int16_t)fadeAnimationAlphaEquation(actualAnimationCounter, 0, fadeAnimationEndAlpha - fadeAnimationStartAlpha, fadeAnimationDuration);
 8004d0a:	b2ab      	uxth	r3, r5
 8004d0c:	b22d      	sxth	r5, r5
                if (T::getAlpha() != newAlpha)
 8004d0e:	42aa      	cmp	r2, r5
 8004d10:	d005      	beq.n	8004d1e <_ZN8touchgfx12FadeAnimatorINS_12MoveAnimatorINS_5ImageEEEE15handleTickEventEv+0x58>
                    if (newAlpha == 0)
 8004d12:	bb2d      	cbnz	r5, 8004d60 <_ZN8touchgfx12FadeAnimatorINS_12MoveAnimatorINS_5ImageEEEE15handleTickEventEv+0x9a>
                        T::invalidateContent();
 8004d14:	4620      	mov	r0, r4
 8004d16:	f7ff fda1 	bl	800485c <_ZNK8touchgfx5Image17invalidateContentEv>
 8004d1a:	f884 5028 	strb.w	r5, [r4, #40]	@ 0x28
                if (fadeAnimationCounter >= (uint32_t)(fadeAnimationDelay + fadeAnimationDuration))
 8004d1e:	f8b4 3048 	ldrh.w	r3, [r4, #72]	@ 0x48
 8004d22:	f8b4 104a 	ldrh.w	r1, [r4, #74]	@ 0x4a
 8004d26:	f8b4 2046 	ldrh.w	r2, [r4, #70]	@ 0x46
 8004d2a:	440b      	add	r3, r1
 8004d2c:	429a      	cmp	r2, r3
 8004d2e:	d31d      	bcc.n	8004d6c <_ZN8touchgfx12FadeAnimatorINS_12MoveAnimatorINS_5ImageEEEE15handleTickEventEv+0xa6>
                    fadeAnimationRunning = false;
 8004d30:	2300      	movs	r3, #0
 8004d32:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
                    fadeAnimationDuration = 0;
 8004d36:	f8a4 304a 	strh.w	r3, [r4, #74]	@ 0x4a
                    Application::getInstance()->unregisterTimerWidget(this);
 8004d3a:	f013 f883 	bl	8017e44 <_ZN8touchgfx11Application11getInstanceEv>
 8004d3e:	4621      	mov	r1, r4
 8004d40:	3004      	adds	r0, #4
 8004d42:	f013 f8cc 	bl	8017ede <_ZN8touchgfx11Application12TimerWidgets6removeEPKNS_8DrawableE>
                    if (fadeAnimationEndedCallback && fadeAnimationEndedCallback->isValid())
 8004d46:	6d60      	ldr	r0, [r4, #84]	@ 0x54
 8004d48:	b180      	cbz	r0, 8004d6c <_ZN8touchgfx12FadeAnimatorINS_12MoveAnimatorINS_5ImageEEEE15handleTickEventEv+0xa6>
 8004d4a:	6803      	ldr	r3, [r0, #0]
 8004d4c:	68db      	ldr	r3, [r3, #12]
 8004d4e:	4798      	blx	r3
 8004d50:	b160      	cbz	r0, 8004d6c <_ZN8touchgfx12FadeAnimatorINS_12MoveAnimatorINS_5ImageEEEE15handleTickEventEv+0xa6>
                        fadeAnimationEndedCallback->execute(*this);
 8004d52:	6d60      	ldr	r0, [r4, #84]	@ 0x54
 8004d54:	4621      	mov	r1, r4
 8004d56:	6803      	ldr	r3, [r0, #0]
    }
 8004d58:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
                        fadeAnimationEndedCallback->execute(*this);
 8004d5c:	689b      	ldr	r3, [r3, #8]
 8004d5e:	4718      	bx	r3
                        T::invalidateContent();
 8004d60:	4620      	mov	r0, r4
                        T::setAlpha((uint8_t)newAlpha);
 8004d62:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
                        T::invalidateContent();
 8004d66:	f7ff fd79 	bl	800485c <_ZNK8touchgfx5Image17invalidateContentEv>
 8004d6a:	e7d8      	b.n	8004d1e <_ZN8touchgfx12FadeAnimatorINS_12MoveAnimatorINS_5ImageEEEE15handleTickEventEv+0x58>
    }
 8004d6c:	bd70      	pop	{r4, r5, r6, pc}
	...

08004d70 <_ZN23graphing_ScreenViewBaseC1Ev>:
graphing_ScreenViewBase::graphing_ScreenViewBase() :
 8004d70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d74:	4604      	mov	r4, r0
 8004d76:	b0a1      	sub	sp, #132	@ 0x84
 8004d78:	2500      	movs	r5, #0
 8004d7a:	f015 f809 	bl	8019d90 <_ZN8touchgfx6ScreenC1Ev>
    sliderValueChangedCallback(this, &graphing_ScreenViewBase::sliderValueChangedCallbackHandler)
 8004d7e:	46a0      	mov	r8, r4
 8004d80:	4bdd      	ldr	r3, [pc, #884]	@ (80050f8 <_ZN23graphing_ScreenViewBaseC1Ev+0x388>)
 8004d82:	63e5      	str	r5, [r4, #60]	@ 0x3c
        : bitmapId(id)
 8004d84:	f64f 79ff 	movw	r9, #65535	@ 0xffff
 8004d88:	f848 3b40 	str.w	r3, [r8], #64
 8004d8c:	4640      	mov	r0, r8
 8004d8e:	f7ff f995 	bl	80040bc <_ZN8touchgfx3BoxC1Ev>
 8004d92:	f104 036c 	add.w	r3, r4, #108	@ 0x6c
 8004d96:	f504 7a09 	add.w	sl, r4, #548	@ 0x224
 8004d9a:	f504 7714 	add.w	r7, r4, #592	@ 0x250
 8004d9e:	4618      	mov	r0, r3
 8004da0:	9313      	str	r3, [sp, #76]	@ 0x4c
 8004da2:	f7ff fdc3 	bl	800492c <_ZN8touchgfx9ContainerC1Ev>
 8004da6:	f104 0398 	add.w	r3, r4, #152	@ 0x98
 8004daa:	f504 7674 	add.w	r6, r4, #976	@ 0x3d0
 8004dae:	f104 0b04 	add.w	fp, r4, #4
 8004db2:	4618      	mov	r0, r3
 8004db4:	9314      	str	r3, [sp, #80]	@ 0x50
 8004db6:	f7ff f981 	bl	80040bc <_ZN8touchgfx3BoxC1Ev>
 8004dba:	f104 03c4 	add.w	r3, r4, #196	@ 0xc4
 8004dbe:	4618      	mov	r0, r3
 8004dc0:	9315      	str	r3, [sp, #84]	@ 0x54
 8004dc2:	f7ff f97b 	bl	80040bc <_ZN8touchgfx3BoxC1Ev>
 8004dc6:	f104 03f0 	add.w	r3, r4, #240	@ 0xf0
          fadeAnimationEndedCallback(0)
 8004dca:	a91e      	add	r1, sp, #120	@ 0x78
 8004dcc:	f8ad 9078 	strh.w	r9, [sp, #120]	@ 0x78
 8004dd0:	4618      	mov	r0, r3
 8004dd2:	930e      	str	r3, [sp, #56]	@ 0x38
 8004dd4:	f7ff fdce 	bl	8004974 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 8004dd8:	4bc8      	ldr	r3, [pc, #800]	@ (80050fc <_ZN23graphing_ScreenViewBaseC1Ev+0x38c>)
          fadeAnimationRunning(false),
 8004dda:	f884 5119 	strb.w	r5, [r4, #281]	@ 0x119
          fadeAnimationEndedCallback(0)
 8004dde:	f8c4 30f0 	str.w	r3, [r4, #240]	@ 0xf0
 8004de2:	f504 7396 	add.w	r3, r4, #300	@ 0x12c
          fadeAnimationCounter(0),
 8004de6:	f8a4 511a 	strh.w	r5, [r4, #282]	@ 0x11a
 8004dea:	4618      	mov	r0, r3
          fadeAnimationDelay(0),
 8004dec:	f8a4 511c 	strh.w	r5, [r4, #284]	@ 0x11c
          fadeAnimationEndedCallback(0)
 8004df0:	f8c4 5128 	str.w	r5, [r4, #296]	@ 0x128
 8004df4:	9303      	str	r3, [sp, #12]
 8004df6:	f00b fd41 	bl	801087c <_ZN8touchgfx14SwipeContainerC1Ev>
 8004dfa:	4650      	mov	r0, sl
 8004dfc:	f7ff fd96 	bl	800492c <_ZN8touchgfx9ContainerC1Ev>
          endId(BITMAP_INVALID),
          updateTicksInterval(updateInterval),
          ticksSinceUpdate(0),
          reverse(false),
          loopAnimation(false),
          running(false)
 8004e00:	a91e      	add	r1, sp, #120	@ 0x78
 8004e02:	4638      	mov	r0, r7
 8004e04:	f8ad 9078 	strh.w	r9, [sp, #120]	@ 0x78
 8004e08:	f7ff fdb4 	bl	8004974 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 8004e0c:	4bbc      	ldr	r3, [pc, #752]	@ (8005100 <_ZN23graphing_ScreenViewBaseC1Ev+0x390>)
          updateTicksInterval(updateInterval),
 8004e0e:	f04f 32ff 	mov.w	r2, #4294967295
          moveAnimationEndedCallback(0)
 8004e12:	a91e      	add	r1, sp, #120	@ 0x78
          running(false)
 8004e14:	f8c4 3250 	str.w	r3, [r4, #592]	@ 0x250
          updateTicksInterval(updateInterval),
 8004e18:	2301      	movs	r3, #1
        : animationDoneAction(0),
 8004e1a:	f8c4 527c 	str.w	r5, [r4, #636]	@ 0x27c
          running(false)
 8004e1e:	f884 5288 	strb.w	r5, [r4, #648]	@ 0x288
          updateTicksInterval(updateInterval),
 8004e22:	e9c4 23a0 	strd	r2, r3, [r4, #640]	@ 0x280
 8004e26:	f504 7323 	add.w	r3, r4, #652	@ 0x28c
 8004e2a:	930f      	str	r3, [sp, #60]	@ 0x3c
 8004e2c:	f04f 33ff 	mov.w	r3, #4294967295
 8004e30:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 8004e32:	f8ad 3078 	strh.w	r3, [sp, #120]	@ 0x78
 8004e36:	f7ff fd9d 	bl	8004974 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 8004e3a:	4bb2      	ldr	r3, [pc, #712]	@ (8005104 <_ZN23graphing_ScreenViewBaseC1Ev+0x394>)
 8004e3c:	a91e      	add	r1, sp, #120	@ 0x78
          moveAnimationRunning(false),
 8004e3e:	f884 52b5 	strb.w	r5, [r4, #693]	@ 0x2b5
 8004e42:	f8c4 328c 	str.w	r3, [r4, #652]	@ 0x28c
 8004e46:	f504 7339 	add.w	r3, r4, #740	@ 0x2e4
          moveAnimationCounter(0),
 8004e4a:	f8a4 52b6 	strh.w	r5, [r4, #694]	@ 0x2b6
 8004e4e:	4618      	mov	r0, r3
          fadeAnimationRunning(false),
 8004e50:	f884 52d0 	strb.w	r5, [r4, #720]	@ 0x2d0
          fadeAnimationCounter(0),
 8004e54:	f8a4 52d2 	strh.w	r5, [r4, #722]	@ 0x2d2
          fadeAnimationDelay(0),
 8004e58:	f8a4 52d4 	strh.w	r5, [r4, #724]	@ 0x2d4
          fadeAnimationEndedCallback(0)
 8004e5c:	f8c4 52e0 	str.w	r5, [r4, #736]	@ 0x2e0
 8004e60:	9310      	str	r3, [sp, #64]	@ 0x40
 8004e62:	f8ad 9078 	strh.w	r9, [sp, #120]	@ 0x78
          moveAnimationStartX(0),
 8004e66:	e9c4 55ae 	strd	r5, r5, [r4, #696]	@ 0x2b8
          moveAnimationXEquation(),
 8004e6a:	e9c4 55b0 	strd	r5, r5, [r4, #704]	@ 0x2c0
          moveAnimationEndedCallback(0)
 8004e6e:	e9c4 55b2 	strd	r5, r5, [r4, #712]	@ 0x2c8
 8004e72:	f7ff fd7f 	bl	8004974 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 8004e76:	f504 7344 	add.w	r3, r4, #784	@ 0x310
 8004e7a:	a91e      	add	r1, sp, #120	@ 0x78
 8004e7c:	f8ad 9078 	strh.w	r9, [sp, #120]	@ 0x78
 8004e80:	4618      	mov	r0, r3
 8004e82:	9311      	str	r3, [sp, #68]	@ 0x44
 8004e84:	f7ff fd76 	bl	8004974 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 8004e88:	f504 734f 	add.w	r3, r4, #828	@ 0x33c
 8004e8c:	4618      	mov	r0, r3
 8004e8e:	9308      	str	r3, [sp, #32]
 8004e90:	f7ff fd8a 	bl	80049a8 <_ZN8touchgfx8TextAreaC1Ev>
 8004e94:	f504 7361 	add.w	r3, r4, #900	@ 0x384
 8004e98:	4618      	mov	r0, r3
 8004e9a:	9309      	str	r3, [sp, #36]	@ 0x24
 8004e9c:	f7ff fda6 	bl	80049ec <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8004ea0:	4630      	mov	r0, r6
 8004ea2:	f010 f821 	bl	8014ee8 <_ZN8touchgfx5GaugeC1Ev>
 8004ea6:	4b98      	ldr	r3, [pc, #608]	@ (8005108 <_ZN23graphing_ScreenViewBaseC1Ev+0x398>)
          fadeAnimationRunning(false),
 8004ea8:	f884 5570 	strb.w	r5, [r4, #1392]	@ 0x570
          fadeAnimationEndedCallback(0)
 8004eac:	f8c4 33d0 	str.w	r3, [r4, #976]	@ 0x3d0
 8004eb0:	f204 5384 	addw	r3, r4, #1412	@ 0x584
          fadeAnimationCounter(0),
 8004eb4:	f8a4 5572 	strh.w	r5, [r4, #1394]	@ 0x572
     * Constructor.
     *
     * @param  bmp (Optional) The bitmap to use in the painter.
     */
    PainterRGB888Bitmap(const Bitmap& bmp = Bitmap(BITMAP_INVALID))
        : AbstractPainterRGB888(), AbstractPainterBitmap(bmp)
 8004eb8:	4618      	mov	r0, r3
          fadeAnimationDelay(0),
 8004eba:	f8a4 5574 	strh.w	r5, [r4, #1396]	@ 0x574
          fadeAnimationEndedCallback(0)
 8004ebe:	f8c4 5580 	str.w	r5, [r4, #1408]	@ 0x580
 8004ec2:	9316      	str	r3, [sp, #88]	@ 0x58
 8004ec4:	f8ad 9078 	strh.w	r9, [sp, #120]	@ 0x78
 8004ec8:	f7fe fc14 	bl	80036f4 <_ZN8touchgfx21AbstractPainterRGB888C1Ev>
        : bitmap(bmp), bitmapFormat(), bitmapRect(), bitmapData(0), xOffset(0), yOffset(0), isTiled(false)
 8004ecc:	4b8f      	ldr	r3, [pc, #572]	@ (800510c <_ZN23graphing_ScreenViewBaseC1Ev+0x39c>)
        setBitmap(bmp);
 8004ece:	a91e      	add	r1, sp, #120	@ 0x78
 8004ed0:	f204 508c 	addw	r0, r4, #1420	@ 0x58c
        : bitmap(bmp), bitmapFormat(), bitmapRect(), bitmapData(0), xOffset(0), yOffset(0), isTiled(false)
 8004ed4:	f884 5592 	strb.w	r5, [r4, #1426]	@ 0x592
 8004ed8:	f8c4 358c 	str.w	r3, [r4, #1420]	@ 0x58c
 8004edc:	f8bd 3078 	ldrh.w	r3, [sp, #120]	@ 0x78
        : x(0), y(0), width(0), height(0)
 8004ee0:	f8c4 5594 	str.w	r5, [r4, #1428]	@ 0x594
 8004ee4:	f8a4 3590 	strh.w	r3, [r4, #1424]	@ 0x590
 8004ee8:	f8c4 5598 	str.w	r5, [r4, #1432]	@ 0x598
 8004eec:	f8c4 559c 	str.w	r5, [r4, #1436]	@ 0x59c
 8004ef0:	f8c4 55a0 	str.w	r5, [r4, #1440]	@ 0x5a0
 8004ef4:	f884 55a4 	strb.w	r5, [r4, #1444]	@ 0x5a4
        setBitmap(bmp);
 8004ef8:	f7ff fc8e 	bl	8004818 <_ZN8touchgfx21AbstractPainterBitmap9setBitmapERKNS_6BitmapE>
 8004efc:	4b84      	ldr	r3, [pc, #528]	@ (8005110 <_ZN23graphing_ScreenViewBaseC1Ev+0x3a0>)
 8004efe:	f8c4 3584 	str.w	r3, [r4, #1412]	@ 0x584
 8004f02:	3324      	adds	r3, #36	@ 0x24
 8004f04:	f8c4 358c 	str.w	r3, [r4, #1420]	@ 0x58c
 8004f08:	f204 53ac 	addw	r3, r4, #1452	@ 0x5ac
 8004f0c:	4618      	mov	r0, r3
 8004f0e:	9305      	str	r3, [sp, #20]
 8004f10:	f7ff fd0c 	bl	800492c <_ZN8touchgfx9ContainerC1Ev>
 8004f14:	f504 63bb 	add.w	r3, r4, #1496	@ 0x5d8
 8004f18:	a91e      	add	r1, sp, #120	@ 0x78
 8004f1a:	f8ad 9078 	strh.w	r9, [sp, #120]	@ 0x78
 8004f1e:	4618      	mov	r0, r3
 8004f20:	9312      	str	r3, [sp, #72]	@ 0x48
 8004f22:	f7ff fd27 	bl	8004974 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 8004f26:	f204 6304 	addw	r3, r4, #1540	@ 0x604
    __background.setPosition(0, 0, 800, 480);
 8004f2a:	f44f 79f0 	mov.w	r9, #480	@ 0x1e0
    sliderValueChangedCallback(this, &graphing_ScreenViewBase::sliderValueChangedCallbackHandler)
 8004f2e:	4618      	mov	r0, r3
 8004f30:	930a      	str	r3, [sp, #40]	@ 0x28
 8004f32:	f7ff fd5b 	bl	80049ec <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8004f36:	f504 63ca 	add.w	r3, r4, #1616	@ 0x650
 8004f3a:	4618      	mov	r0, r3
 8004f3c:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004f3e:	f7ff fd55 	bl	80049ec <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8004f42:	f204 639c 	addw	r3, r4, #1692	@ 0x69c
 8004f46:	4618      	mov	r0, r3
 8004f48:	930c      	str	r3, [sp, #48]	@ 0x30
 8004f4a:	f7ff fd4f 	bl	80049ec <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8004f4e:	f504 63dd 	add.w	r3, r4, #1768	@ 0x6e8
 8004f52:	4618      	mov	r0, r3
 8004f54:	930d      	str	r3, [sp, #52]	@ 0x34
 8004f56:	f7ff fd49 	bl	80049ec <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8004f5a:	f204 7334 	addw	r3, r4, #1844	@ 0x734
 8004f5e:	4618      	mov	r0, r3
 8004f60:	9306      	str	r3, [sp, #24]
 8004f62:	f00b fadd 	bl	8010520 <_ZN8touchgfx6SliderC1Ev>
 8004f66:	f604 0328 	addw	r3, r4, #2088	@ 0x828
 8004f6a:	4618      	mov	r0, r3
 8004f6c:	9307      	str	r3, [sp, #28]
 8004f6e:	f00a fd7d 	bl	800fa6c <_ZN8touchgfx12DigitalClockC1Ev>
 8004f72:	f504 630c 	add.w	r3, r4, #2240	@ 0x8c0
 8004f76:	4618      	mov	r0, r3
 8004f78:	9304      	str	r3, [sp, #16]
 8004f7a:	f00a fa29 	bl	800f3d0 <_ZN8touchgfx13ImageProgressC1Ev>
 8004f7e:	f604 13d8 	addw	r3, r4, #2520	@ 0x9d8
 8004f82:	4618      	mov	r0, r3
 8004f84:	9317      	str	r3, [sp, #92]	@ 0x5c
 8004f86:	f001 f823 	bl	8005fd0 <_ZN15right_containerC1Ev>
        : pobject(pObject), pmemfun(pmemfun_1)
 8004f8a:	f504 5340 	add.w	r3, r4, #12288	@ 0x3000
 8004f8e:	4a61      	ldr	r2, [pc, #388]	@ (8005114 <_ZN23graphing_ScreenViewBaseC1Ev+0x3a4>)
    touchgfx::CanvasWidgetRenderer::setupBuffer(canvasBuffer, CANVAS_BUFFER_SIZE);
 8004f90:	f642 61e0 	movw	r1, #12000	@ 0x2ee0
 8004f94:	f604 604c 	addw	r0, r4, #3660	@ 0xe4c
 8004f98:	f8c3 4d30 	str.w	r4, [r3, #3376]	@ 0xd30
 8004f9c:	f8c3 2d2c 	str.w	r2, [r3, #3372]	@ 0xd2c
 8004fa0:	4a5d      	ldr	r2, [pc, #372]	@ (8005118 <_ZN23graphing_ScreenViewBaseC1Ev+0x3a8>)
 8004fa2:	f8c3 5d38 	str.w	r5, [r3, #3384]	@ 0xd38
 8004fa6:	f8c3 2d34 	str.w	r2, [r3, #3380]	@ 0xd34
 8004faa:	4a5c      	ldr	r2, [pc, #368]	@ (800511c <_ZN23graphing_ScreenViewBaseC1Ev+0x3ac>)
 8004fac:	f8c3 4d40 	str.w	r4, [r3, #3392]	@ 0xd40
 8004fb0:	f8c3 2d3c 	str.w	r2, [r3, #3388]	@ 0xd3c
 8004fb4:	4a5a      	ldr	r2, [pc, #360]	@ (8005120 <_ZN23graphing_ScreenViewBaseC1Ev+0x3b0>)
 8004fb6:	f8c3 5d48 	str.w	r5, [r3, #3400]	@ 0xd48
 8004fba:	f8c3 2d44 	str.w	r2, [r3, #3396]	@ 0xd44
 8004fbe:	4a59      	ldr	r2, [pc, #356]	@ (8005124 <_ZN23graphing_ScreenViewBaseC1Ev+0x3b4>)
 8004fc0:	f8c3 4d50 	str.w	r4, [r3, #3408]	@ 0xd50
 8004fc4:	f8c3 2d4c 	str.w	r2, [r3, #3404]	@ 0xd4c
 8004fc8:	4a57      	ldr	r2, [pc, #348]	@ (8005128 <_ZN23graphing_ScreenViewBaseC1Ev+0x3b8>)
 8004fca:	f8c3 5d58 	str.w	r5, [r3, #3416]	@ 0xd58
 8004fce:	f8c3 2d54 	str.w	r2, [r3, #3412]	@ 0xd54
        : pobject(pObject), pmemfun(pmemfun_2)
 8004fd2:	4a56      	ldr	r2, [pc, #344]	@ (800512c <_ZN23graphing_ScreenViewBaseC1Ev+0x3bc>)
 8004fd4:	f8c3 4d60 	str.w	r4, [r3, #3424]	@ 0xd60
 8004fd8:	f8c3 2d5c 	str.w	r2, [r3, #3420]	@ 0xd5c
 8004fdc:	4a54      	ldr	r2, [pc, #336]	@ (8005130 <_ZN23graphing_ScreenViewBaseC1Ev+0x3c0>)
 8004fde:	f8c3 5d68 	str.w	r5, [r3, #3432]	@ 0xd68
 8004fe2:	f8c3 2d64 	str.w	r2, [r3, #3428]	@ 0xd64
 8004fe6:	f011 fa0f 	bl	8016408 <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj>
    __background.setPosition(0, 0, 800, 480);
 8004fea:	462a      	mov	r2, r5
 8004fec:	4640      	mov	r0, r8
 8004fee:	f44f 7348 	mov.w	r3, #800	@ 0x320
 8004ff2:	4629      	mov	r1, r5
 8004ff4:	f8cd 9000 	str.w	r9, [sp]
 8004ff8:	f7ff f84c 	bl	8004094 <_ZN8touchgfx8Drawable11setPositionEssss>
 8004ffc:	f04f 437f 	mov.w	r3, #4278190080	@ 0xff000000
 8005000:	4641      	mov	r1, r8
 8005002:	4658      	mov	r0, fp
 8005004:	66a3      	str	r3, [r4, #104]	@ 0x68
 8005006:	f00a fdf6 	bl	800fbf6 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    container1.setPosition(0, 0, 800, 480);
 800500a:	f44f 7348 	mov.w	r3, #800	@ 0x320
 800500e:	462a      	mov	r2, r5
 8005010:	4629      	mov	r1, r5
 8005012:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 8005014:	f8cd 9000 	str.w	r9, [sp]
 8005018:	f7ff f83c 	bl	8004094 <_ZN8touchgfx8Drawable11setPositionEssss>
 800501c:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800501e:	4658      	mov	r0, fp
        color = newColor;
 8005020:	f8df 8118 	ldr.w	r8, [pc, #280]	@ 800513c <_ZN23graphing_ScreenViewBaseC1Ev+0x3cc>
 8005024:	f00a fde7 	bl	800fbf6 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    box1.setPosition(0, 0, 800, 480);
 8005028:	462a      	mov	r2, r5
 800502a:	f44f 7348 	mov.w	r3, #800	@ 0x320
 800502e:	4629      	mov	r1, r5
 8005030:	9814      	ldr	r0, [sp, #80]	@ 0x50
 8005032:	f8cd 9000 	str.w	r9, [sp]
 8005036:	f7ff f82d 	bl	8004094 <_ZN8touchgfx8Drawable11setPositionEssss>
 800503a:	4b3e      	ldr	r3, [pc, #248]	@ (8005134 <_ZN23graphing_ScreenViewBaseC1Ev+0x3c4>)
 800503c:	9914      	ldr	r1, [sp, #80]	@ 0x50
 800503e:	4658      	mov	r0, fp
 8005040:	f8c4 30c0 	str.w	r3, [r4, #192]	@ 0xc0
 8005044:	f00a fdd7 	bl	800fbf6 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    box2.setPosition(0, 0, 800, 480);
 8005048:	462a      	mov	r2, r5
 800504a:	f44f 7348 	mov.w	r3, #800	@ 0x320
 800504e:	4629      	mov	r1, r5
 8005050:	9815      	ldr	r0, [sp, #84]	@ 0x54
 8005052:	f8cd 9000 	str.w	r9, [sp]
 8005056:	f04f 0903 	mov.w	r9, #3
 800505a:	f7ff f81b 	bl	8004094 <_ZN8touchgfx8Drawable11setPositionEssss>
 800505e:	f04f 437f 	mov.w	r3, #4278190080	@ 0xff000000
 8005062:	9915      	ldr	r1, [sp, #84]	@ 0x54
 8005064:	4658      	mov	r0, fp
 8005066:	f8c4 30ec 	str.w	r3, [r4, #236]	@ 0xec
 800506a:	f00a fdc4 	bl	800fbf6 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    background.setXY(-2, 0);
 800506e:	462a      	mov	r2, r5
 8005070:	f06f 0101 	mvn.w	r1, #1
 8005074:	980e      	ldr	r0, [sp, #56]	@ 0x38
 8005076:	f7ff f800 	bl	800407a <_ZN8touchgfx8Drawable5setXYEss>
    background.setBitmap(touchgfx::Bitmap(BITMAP_BACKGROUND_ID));
 800507a:	a91e      	add	r1, sp, #120	@ 0x78
 800507c:	980e      	ldr	r0, [sp, #56]	@ 0x38
 800507e:	f8ad 9078 	strh.w	r9, [sp, #120]	@ 0x78
 8005082:	f010 f9de 	bl	8015442 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 8005086:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8005088:	4658      	mov	r0, fp
 800508a:	f00a fdb4 	bl	800fbf6 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    swipeContainer1.setXY(216, 1);
 800508e:	2201      	movs	r2, #1
 8005090:	21d8      	movs	r1, #216	@ 0xd8
 8005092:	9803      	ldr	r0, [sp, #12]
 8005094:	f7fe fff1 	bl	800407a <_ZN8touchgfx8Drawable5setXYEss>
 8005098:	2346      	movs	r3, #70	@ 0x46
    swipeContainer1.setPageIndicatorBitmaps(touchgfx::Bitmap(BITMAP_SWIPE_CONTAINER_PAGER_ID), touchgfx::Bitmap(BITMAP_SWIPE_CONTAINER_PAGER_ID));
 800509a:	aa1e      	add	r2, sp, #120	@ 0x78
 800509c:	a91d      	add	r1, sp, #116	@ 0x74
 800509e:	9803      	ldr	r0, [sp, #12]
 80050a0:	f8ad 3074 	strh.w	r3, [sp, #116]	@ 0x74
 80050a4:	f8ad 3078 	strh.w	r3, [sp, #120]	@ 0x78
 80050a8:	f00b fc8a 	bl	80109c0 <_ZN8touchgfx14SwipeContainer23setPageIndicatorBitmapsERKNS_6BitmapES3_>
    swipeContainer1.setPageIndicatorXY(0, 0);
 80050ac:	462a      	mov	r2, r5
 80050ae:	4629      	mov	r1, r5
 80050b0:	9803      	ldr	r0, [sp, #12]
 80050b2:	f00b fb2f 	bl	8010714 <_ZN8touchgfx14SwipeContainer18setPageIndicatorXYEss>
    swipeContainer1.setSwipeCutoff(50);
 80050b6:	2132      	movs	r1, #50	@ 0x32
 80050b8:	9803      	ldr	r0, [sp, #12]
 80050ba:	f00b fabf 	bl	801063c <_ZN8touchgfx14SwipeContainer14setSwipeCutoffEt>
    swipeContainer1.setEndSwipeElasticWidth(50);
 80050be:	2132      	movs	r1, #50	@ 0x32
 80050c0:	9803      	ldr	r0, [sp, #12]
 80050c2:	f00b fb25 	bl	8010710 <_ZN8touchgfx14SwipeContainer23setEndSwipeElasticWidthEt>
        rect.width = width;
 80050c6:	4b1c      	ldr	r3, [pc, #112]	@ (8005138 <_ZN23graphing_ScreenViewBaseC1Ev+0x3c8>)
    car.setXY(59, 319);
 80050c8:	4638      	mov	r0, r7
 80050ca:	f240 123f 	movw	r2, #319	@ 0x13f
 80050ce:	f8c4 322c 	str.w	r3, [r4, #556]	@ 0x22c
 80050d2:	213b      	movs	r1, #59	@ 0x3b
 80050d4:	f7fe ffd1 	bl	800407a <_ZN8touchgfx8Drawable5setXYEss>
    car.setBitmaps(BITMAP_CAR_00_ID, BITMAP_CAR_55_ID);
 80050d8:	223d      	movs	r2, #61	@ 0x3d
 80050da:	4638      	mov	r0, r7
 80050dc:	2106      	movs	r1, #6
 80050de:	f00f f91f 	bl	8014320 <_ZN8touchgfx13AnimatedImage10setBitmapsEtt>
    car.setUpdateTicksInterval(2);
 80050e2:	4638      	mov	r0, r7
 80050e4:	2102      	movs	r1, #2
 80050e6:	f00f f92e 	bl	8014346 <_ZN8touchgfx13AnimatedImage22setUpdateTicksIntervalEh>
    car.startAnimation(false, true, false);
 80050ea:	2201      	movs	r2, #1
 80050ec:	4638      	mov	r0, r7
 80050ee:	462b      	mov	r3, r5
 80050f0:	4629      	mov	r1, r5
 80050f2:	f00f f877 	bl	80141e4 <_ZN8touchgfx13AnimatedImage14startAnimationEbbb>
 80050f6:	e023      	b.n	8005140 <_ZN23graphing_ScreenViewBaseC1Ev+0x3d0>
 80050f8:	0802bb34 	.word	0x0802bb34
 80050fc:	0802b8f4 	.word	0x0802b8f4
 8005100:	0802cd24 	.word	0x0802cd24
 8005104:	0802b968 	.word	0x0802b968
 8005108:	0802b9e4 	.word	0x0802b9e4
 800510c:	0802b8d8 	.word	0x0802b8d8
 8005110:	0802cb3c 	.word	0x0802cb3c
 8005114:	0802bad4 	.word	0x0802bad4
 8005118:	08004ac9 	.word	0x08004ac9
 800511c:	0802baec 	.word	0x0802baec
 8005120:	08004bcd 	.word	0x08004bcd
 8005124:	0802bb04 	.word	0x0802bb04
 8005128:	0800468d 	.word	0x0800468d
 800512c:	0802bb1c 	.word	0x0802bb1c
 8005130:	08004873 	.word	0x08004873
 8005134:	ff36353b 	.word	0xff36353b
 8005138:	01e1016c 	.word	0x01e1016c
 800513c:	ff666666 	.word	0xff666666
    car.setDoneAction(animationEndedCallback);
 8005140:	f504 5374 	add.w	r3, r4, #15616	@ 0x3d00
    car_container.add(car);
 8005144:	4639      	mov	r1, r7
 8005146:	4650      	mov	r0, sl
    car.setDoneAction(animationEndedCallback);
 8005148:	332c      	adds	r3, #44	@ 0x2c
        boundingArea = calculateBoundingArea();
 800514a:	af18      	add	r7, sp, #96	@ 0x60
     * @param  callback The callback is executed when done. The callback is given the
     *                  animated image.
     */
    void setDoneAction(GenericCallback<const AnimatedImage&>& callback)
    {
        animationDoneAction = &callback;
 800514c:	f8c4 327c 	str.w	r3, [r4, #636]	@ 0x27c
    car_container.add(car);
 8005150:	f00a fd51 	bl	800fbf6 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    circle.setXY(52, 310);
 8005154:	f44f 729b 	mov.w	r2, #310	@ 0x136
 8005158:	2134      	movs	r1, #52	@ 0x34
 800515a:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 800515c:	f7fe ff8d 	bl	800407a <_ZN8touchgfx8Drawable5setXYEss>
 8005160:	233e      	movs	r3, #62	@ 0x3e
    circle.setBitmap(touchgfx::Bitmap(BITMAP_CIRCLE_ID));
 8005162:	a91e      	add	r1, sp, #120	@ 0x78
 8005164:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 8005166:	f8ad 3078 	strh.w	r3, [sp, #120]	@ 0x78
 800516a:	f010 f96a 	bl	8015442 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
    car_container.add(circle);
 800516e:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8005170:	4650      	mov	r0, sl
 8005172:	f00a fd40 	bl	800fbf6 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    Image4.setXY(245, 174);
 8005176:	22ae      	movs	r2, #174	@ 0xae
 8005178:	21f5      	movs	r1, #245	@ 0xf5
 800517a:	9810      	ldr	r0, [sp, #64]	@ 0x40
 800517c:	f7fe ff7d 	bl	800407a <_ZN8touchgfx8Drawable5setXYEss>
 8005180:	2351      	movs	r3, #81	@ 0x51
    Image4.setBitmap(touchgfx::Bitmap(BITMAP_VECTOR_19_ID));
 8005182:	a91e      	add	r1, sp, #120	@ 0x78
 8005184:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8005186:	f8ad 3078 	strh.w	r3, [sp, #120]	@ 0x78
 800518a:	f010 f95a 	bl	8015442 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
    car_container.add(Image4);
 800518e:	9910      	ldr	r1, [sp, #64]	@ 0x40
 8005190:	4650      	mov	r0, sl
 8005192:	f00a fd30 	bl	800fbf6 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    image5.setXY(-26, 151);
 8005196:	2297      	movs	r2, #151	@ 0x97
 8005198:	f06f 0119 	mvn.w	r1, #25
 800519c:	9811      	ldr	r0, [sp, #68]	@ 0x44
 800519e:	f7fe ff6c 	bl	800407a <_ZN8touchgfx8Drawable5setXYEss>
 80051a2:	2352      	movs	r3, #82	@ 0x52
    image5.setBitmap(touchgfx::Bitmap(BITMAP_VECTOR_20_ID));
 80051a4:	a91e      	add	r1, sp, #120	@ 0x78
 80051a6:	9811      	ldr	r0, [sp, #68]	@ 0x44
 80051a8:	f8ad 3078 	strh.w	r3, [sp, #120]	@ 0x78
 80051ac:	f010 f949 	bl	8015442 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
    car_container.add(image5);
 80051b0:	9911      	ldr	r1, [sp, #68]	@ 0x44
 80051b2:	4650      	mov	r0, sl
 80051b4:	f00a fd1f 	bl	800fbf6 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    mph_lable.setPosition(109, 199, 151, 28);
 80051b8:	231c      	movs	r3, #28
 80051ba:	22c7      	movs	r2, #199	@ 0xc7
 80051bc:	216d      	movs	r1, #109	@ 0x6d
 80051be:	9808      	ldr	r0, [sp, #32]
 80051c0:	9300      	str	r3, [sp, #0]
 80051c2:	2397      	movs	r3, #151	@ 0x97
 80051c4:	f7fe ff66 	bl	8004094 <_ZN8touchgfx8Drawable11setPositionEssss>
 80051c8:	9908      	ldr	r1, [sp, #32]
 80051ca:	4638      	mov	r0, r7
        color = newColor;
 80051cc:	f8c4 836c 	str.w	r8, [r4, #876]	@ 0x36c
        linespace = space;
 80051d0:	f8a4 5370 	strh.w	r5, [r4, #880]	@ 0x370
        boundingArea = calculateBoundingArea();
 80051d4:	f00f f9a0 	bl	8014518 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>
 80051d8:	f504 735e 	add.w	r3, r4, #888	@ 0x378
 80051dc:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 80051e0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80051e4:	4b1d      	ldr	r3, [pc, #116]	@ (800525c <_ZN23graphing_ScreenViewBaseC1Ev+0x4ec>)
    mph_lable.setTypedText(touchgfx::TypedText(T___SINGLEUSE_Z0UY));
 80051e6:	a91e      	add	r1, sp, #120	@ 0x78
 80051e8:	9808      	ldr	r0, [sp, #32]
 80051ea:	931e      	str	r3, [sp, #120]	@ 0x78
 80051ec:	f8ad 907c 	strh.w	r9, [sp, #124]	@ 0x7c
 80051f0:	f00f fc2c 	bl	8014a4c <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
    car_container.add(mph_lable);
 80051f4:	9908      	ldr	r1, [sp, #32]
 80051f6:	4650      	mov	r0, sl
 80051f8:	f00a fcfd 	bl	800fbf6 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    mph.setPosition(59, 59, 250, 148);
 80051fc:	223b      	movs	r2, #59	@ 0x3b
 80051fe:	2394      	movs	r3, #148	@ 0x94
 8005200:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005202:	4611      	mov	r1, r2
 8005204:	9300      	str	r3, [sp, #0]
 8005206:	23fa      	movs	r3, #250	@ 0xfa
 8005208:	f7fe ff44 	bl	8004094 <_ZN8touchgfx8Drawable11setPositionEssss>
 800520c:	f8d4 3384 	ldr.w	r3, [r4, #900]	@ 0x384
 8005210:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8005212:	4638      	mov	r0, r7
 8005214:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
        color = newColor;
 8005218:	f8c4 83b4 	str.w	r8, [r4, #948]	@ 0x3b4
        linespace = space;
 800521c:	f8a4 53b8 	strh.w	r5, [r4, #952]	@ 0x3b8
        boundingArea = calculateBoundingArea();
 8005220:	4798      	blx	r3
 8005222:	f504 7370 	add.w	r3, r4, #960	@ 0x3c0
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 8005226:	f8df 804c 	ldr.w	r8, [pc, #76]	@ 8005274 <_ZN23graphing_ScreenViewBaseC1Ev+0x504>
 800522a:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 800522e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    Unicode::snprintf(mphBuffer, MPH_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_49UH).getText());
 8005232:	f504 6362 	add.w	r3, r4, #3616	@ 0xe20
 8005236:	9308      	str	r3, [sp, #32]
 8005238:	f8d8 3000 	ldr.w	r3, [r8]
 800523c:	b92b      	cbnz	r3, 800524a <_ZN23graphing_ScreenViewBaseC1Ev+0x4da>
 800523e:	4b08      	ldr	r3, [pc, #32]	@ (8005260 <_ZN23graphing_ScreenViewBaseC1Ev+0x4f0>)
 8005240:	2160      	movs	r1, #96	@ 0x60
 8005242:	4a08      	ldr	r2, [pc, #32]	@ (8005264 <_ZN23graphing_ScreenViewBaseC1Ev+0x4f4>)
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
 8005244:	4808      	ldr	r0, [pc, #32]	@ (8005268 <_ZN23graphing_ScreenViewBaseC1Ev+0x4f8>)
 8005246:	f022 fc9b 	bl	8027b80 <__assert_func>
        return typedTextId < numberOfTypedTexts;
 800524a:	4f08      	ldr	r7, [pc, #32]	@ (800526c <_ZN23graphing_ScreenViewBaseC1Ev+0x4fc>)
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
 800524c:	883b      	ldrh	r3, [r7, #0]
 800524e:	2b04      	cmp	r3, #4
 8005250:	d812      	bhi.n	8005278 <_ZN23graphing_ScreenViewBaseC1Ev+0x508>
 8005252:	4b07      	ldr	r3, [pc, #28]	@ (8005270 <_ZN23graphing_ScreenViewBaseC1Ev+0x500>)
 8005254:	2161      	movs	r1, #97	@ 0x61
 8005256:	4a03      	ldr	r2, [pc, #12]	@ (8005264 <_ZN23graphing_ScreenViewBaseC1Ev+0x4f4>)
 8005258:	e7f4      	b.n	8005244 <_ZN23graphing_ScreenViewBaseC1Ev+0x4d4>
 800525a:	bf00      	nop
 800525c:	0802aec4 	.word	0x0802aec4
 8005260:	0802b440 	.word	0x0802b440
 8005264:	0802b78a 	.word	0x0802b78a
 8005268:	0802b4bd 	.word	0x0802b4bd
 800526c:	24028e7c 	.word	0x24028e7c
 8005270:	0802b74c 	.word	0x0802b74c
 8005274:	24028e78 	.word	0x24028e78
        return texts->getText(typedTextId);
 8005278:	4bd1      	ldr	r3, [pc, #836]	@ (80055c0 <_ZN23graphing_ScreenViewBaseC1Ev+0x850>)
 800527a:	2104      	movs	r1, #4
 800527c:	6818      	ldr	r0, [r3, #0]
 800527e:	f7ff f989 	bl	8004594 <_ZNK8touchgfx5Texts7getTextEt>
 8005282:	4ad0      	ldr	r2, [pc, #832]	@ (80055c4 <_ZN23graphing_ScreenViewBaseC1Ev+0x854>)
 8005284:	4603      	mov	r3, r0
 8005286:	210a      	movs	r1, #10
 8005288:	9808      	ldr	r0, [sp, #32]
 800528a:	f016 faa5 	bl	801b7d8 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
        wc1 = value;
 800528e:	9a08      	ldr	r2, [sp, #32]
        : typedTextId(id)
 8005290:	2305      	movs	r3, #5
    mph.setTypedText(touchgfx::TypedText(T___SINGLEUSE_UE0S));
 8005292:	a91e      	add	r1, sp, #120	@ 0x78
 8005294:	f8c4 23cc 	str.w	r2, [r4, #972]	@ 0x3cc
 8005298:	4acb      	ldr	r2, [pc, #812]	@ (80055c8 <_ZN23graphing_ScreenViewBaseC1Ev+0x858>)
 800529a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800529c:	921e      	str	r2, [sp, #120]	@ 0x78
 800529e:	f8ad 307c 	strh.w	r3, [sp, #124]	@ 0x7c
 80052a2:	f00f fbd3 	bl	8014a4c <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
    car_container.add(mph);
 80052a6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80052a8:	4650      	mov	r0, sl
 80052aa:	f00a fca4 	bl	800fbf6 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 80052ae:	2341      	movs	r3, #65	@ 0x41
    gauge1.setBackground(touchgfx::Bitmap(BITMAP_GAUGE_ID));
 80052b0:	4630      	mov	r0, r6
 80052b2:	a91e      	add	r1, sp, #120	@ 0x78
 80052b4:	f8ad 3078 	strh.w	r3, [sp, #120]	@ 0x78
 80052b8:	f00a fa62 	bl	800f780 <_ZN8touchgfx25AbstractProgressIndicator13setBackgroundERKNS_6BitmapE>
    gauge1.setBackgroundOffset(0, -45);
 80052bc:	4630      	mov	r0, r6
 80052be:	f06f 022c 	mvn.w	r2, #44	@ 0x2c
 80052c2:	4629      	mov	r1, r5
 80052c4:	f00f fe48 	bl	8014f58 <_ZN8touchgfx5Gauge19setBackgroundOffsetEss>
    gauge1.setPosition(615, -202, 336, 336);
 80052c8:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80052cc:	4630      	mov	r0, r6
 80052ce:	f06f 02c9 	mvn.w	r2, #201	@ 0xc9
 80052d2:	9300      	str	r3, [sp, #0]
 80052d4:	f240 2167 	movw	r1, #615	@ 0x267
 80052d8:	f7fe fedc 	bl	8004094 <_ZN8touchgfx8Drawable11setPositionEssss>
    gauge1.setCenter(168, 168);
 80052dc:	22a8      	movs	r2, #168	@ 0xa8
 80052de:	4630      	mov	r0, r6
 80052e0:	4611      	mov	r1, r2
 80052e2:	f00f fee0 	bl	80150a6 <_ZN8touchgfx5Gauge9setCenterEii>
    gauge1.setStartEndAngle(-117, 121);
 80052e6:	4630      	mov	r0, r6
 80052e8:	2279      	movs	r2, #121	@ 0x79
 80052ea:	f06f 0174 	mvn.w	r1, #116	@ 0x74
 80052ee:	f00f ff5f 	bl	80151b0 <_ZN8touchgfx5Gauge16setStartEndAngleEii>
    gauge1.setRange(10, 100);
 80052f2:	462b      	mov	r3, r5
 80052f4:	2264      	movs	r2, #100	@ 0x64
 80052f6:	4630      	mov	r0, r6
 80052f8:	210a      	movs	r1, #10
 80052fa:	9500      	str	r5, [sp, #0]
 80052fc:	f00a f8ec 	bl	800f4d8 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEiitt>
    gauge1.setValue(92);
 8005300:	4630      	mov	r0, r6
 8005302:	215c      	movs	r1, #92	@ 0x5c
 8005304:	f00f fefe 	bl	8015104 <_ZN8touchgfx5Gauge8setValueEi>
    gauge1.setNeedle(BITMAP_NEEDLE_3_ID, 39.1f, 103.6f);
 8005308:	2227      	movs	r2, #39	@ 0x27
 800530a:	2367      	movs	r3, #103	@ 0x67
 800530c:	4630      	mov	r0, r6
 800530e:	2144      	movs	r1, #68	@ 0x44
 8005310:	f00f feb4 	bl	801507c <_ZN8touchgfx5Gauge9setNeedleEtss>
    gauge1.setMovingNeedleRenderingAlgorithm(touchgfx::TextureMapper::BILINEAR_INTERPOLATION);
 8005314:	4630      	mov	r0, r6
 8005316:	2101      	movs	r1, #1
 8005318:	f00f fe4b 	bl	8014fb2 <_ZN8touchgfx5Gauge33setMovingNeedleRenderingAlgorithmENS_13TextureMapper18RenderingAlgorithmE>
    gauge1.setSteadyNeedleRenderingAlgorithm(touchgfx::TextureMapper::BILINEAR_INTERPOLATION);
 800531c:	4630      	mov	r0, r6
 800531e:	2101      	movs	r1, #1
 8005320:	f00f fe4a 	bl	8014fb8 <_ZN8touchgfx5Gauge33setSteadyNeedleRenderingAlgorithmENS_13TextureMapper18RenderingAlgorithmE>
    gauge1.setArcVisible();
 8005324:	4630      	mov	r0, r6
 8005326:	2101      	movs	r1, #1
 8005328:	f00f fe49 	bl	8014fbe <_ZN8touchgfx5Gauge13setArcVisibleEb>
 800532c:	2347      	movs	r3, #71	@ 0x47
    gauge1Painter.setBitmap(touchgfx::Bitmap(BITMAP_SWOOP_ID));
 800532e:	a91e      	add	r1, sp, #120	@ 0x78
 8005330:	9816      	ldr	r0, [sp, #88]	@ 0x58
 8005332:	f8ad 3078 	strh.w	r3, [sp, #120]	@ 0x78
 8005336:	f00e f928 	bl	801358a <_ZN8touchgfx19PainterRGB888Bitmap9setBitmapERKNS_6BitmapE>
    gauge1.getArc().setPainter(gauge1Painter);
 800533a:	4630      	mov	r0, r6
 800533c:	f00f fe42 	bl	8014fc4 <_ZN8touchgfx5Gauge6getArcEv>
        canvasPainter = &painter;
 8005340:	9916      	ldr	r1, [sp, #88]	@ 0x58
 8005342:	6281      	str	r1, [r0, #40]	@ 0x28
    gauge1.getArc().setRadius(137);
 8005344:	4630      	mov	r0, r6
 8005346:	f00f fe3d 	bl	8014fc4 <_ZN8touchgfx5Gauge6getArcEv>
     * @note The area containing the Circle is not invalidated.
     */
    template <typename T>
    void setRadius(const T r)
    {
        this->circleRadius = CWRUtil::toQ5(r);
 800534a:	f44f 5389 	mov.w	r3, #4384	@ 0x1120
 800534e:	6343      	str	r3, [r0, #52]	@ 0x34
    gauge1.getArc().setLineWidth(136);
 8005350:	4630      	mov	r0, r6
 8005352:	f00f fe37 	bl	8014fc4 <_ZN8touchgfx5Gauge6getArcEv>
     *       before updating the width to ensure that the old circle is completely erased.
     */
    template <typename T>
    void setLineWidth(const T width)
    {
        this->circleLineWidth = CWRUtil::toQ5(width);
 8005356:	f44f 5388 	mov.w	r3, #4352	@ 0x1100
 800535a:	6403      	str	r3, [r0, #64]	@ 0x40
    gauge1.getArc().setCapPrecision(180);
 800535c:	4630      	mov	r0, r6
 800535e:	f00f fe31 	bl	8014fc4 <_ZN8touchgfx5Gauge6getArcEv>
 8005362:	21b4      	movs	r1, #180	@ 0xb4
 8005364:	f00e f9a4 	bl	80136b0 <_ZN8touchgfx6Circle15setCapPrecisionEi>
    gauge1.setArcPosition(33, 33, 270, 198);
 8005368:	2221      	movs	r2, #33	@ 0x21
 800536a:	23c6      	movs	r3, #198	@ 0xc6
 800536c:	4630      	mov	r0, r6
 800536e:	4611      	mov	r1, r2
 8005370:	9300      	str	r3, [sp, #0]
 8005372:	f44f 7387 	mov.w	r3, #270	@ 0x10e
 8005376:	f00f fdf4 	bl	8014f62 <_ZN8touchgfx5Gauge14setArcPositionEssss>
    car_container.add(gauge1);
 800537a:	4631      	mov	r1, r6
 800537c:	4650      	mov	r0, sl
    Unicode::snprintf(pres_flBuffer, PRES_FL_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_P78H).getText());
 800537e:	f604 6634 	addw	r6, r4, #3636	@ 0xe34
    car_container.add(gauge1);
 8005382:	f00a fc38 	bl	800fbf6 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    swipeContainer1.add(car_container);
 8005386:	4651      	mov	r1, sl
 8005388:	9803      	ldr	r0, [sp, #12]
 800538a:	f00b fb90 	bl	8010aae <_ZN8touchgfx14SwipeContainer3addERNS_8DrawableE>
 800538e:	498f      	ldr	r1, [pc, #572]	@ (80055cc <_ZN23graphing_ScreenViewBaseC1Ev+0x85c>)
    tire_pre.setXY(4, 146);
 8005390:	2292      	movs	r2, #146	@ 0x92
 8005392:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8005394:	f8c4 15b4 	str.w	r1, [r4, #1460]	@ 0x5b4
 8005398:	2104      	movs	r1, #4
 800539a:	f7fe fe6e 	bl	800407a <_ZN8touchgfx8Drawable5setXYEss>
 800539e:	234d      	movs	r3, #77	@ 0x4d
    tire_pre.setBitmap(touchgfx::Bitmap(BITMAP_TIRE_PRESSURE_1_ID));
 80053a0:	a91e      	add	r1, sp, #120	@ 0x78
 80053a2:	9812      	ldr	r0, [sp, #72]	@ 0x48
 80053a4:	f8ad 3078 	strh.w	r3, [sp, #120]	@ 0x78
 80053a8:	f010 f84b 	bl	8015442 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
    tire_pres_pg.add(tire_pre);
 80053ac:	9912      	ldr	r1, [sp, #72]	@ 0x48
 80053ae:	9805      	ldr	r0, [sp, #20]
 80053b0:	f00a fc21 	bl	800fbf6 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    pres_fl.setXY(97, 275);
 80053b4:	2161      	movs	r1, #97	@ 0x61
 80053b6:	f240 1213 	movw	r2, #275	@ 0x113
 80053ba:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80053bc:	f7fe fe5d 	bl	800407a <_ZN8touchgfx8Drawable5setXYEss>
        color = newColor;
 80053c0:	4b83      	ldr	r3, [pc, #524]	@ (80055d0 <_ZN23graphing_ScreenViewBaseC1Ev+0x860>)
        boundingArea = calculateBoundingArea();
 80053c2:	f04f 31ff 	mov.w	r1, #4294967295
        linespace = space;
 80053c6:	f8a4 5638 	strh.w	r5, [r4, #1592]	@ 0x638
        color = newColor;
 80053ca:	f8c4 3634 	str.w	r3, [r4, #1588]	@ 0x634
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 80053ce:	f8d8 3000 	ldr.w	r3, [r8]
        boundingArea = calculateBoundingArea();
 80053d2:	f8c4 5640 	str.w	r5, [r4, #1600]	@ 0x640
 80053d6:	f8c4 1644 	str.w	r1, [r4, #1604]	@ 0x644
 80053da:	f8c4 5648 	str.w	r5, [r4, #1608]	@ 0x648
 80053de:	2b00      	cmp	r3, #0
 80053e0:	f43f af2d 	beq.w	800523e <_ZN23graphing_ScreenViewBaseC1Ev+0x4ce>
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
 80053e4:	883b      	ldrh	r3, [r7, #0]
 80053e6:	2b09      	cmp	r3, #9
 80053e8:	f67f af33 	bls.w	8005252 <_ZN23graphing_ScreenViewBaseC1Ev+0x4e2>
        return texts->getText(typedTextId);
 80053ec:	4b74      	ldr	r3, [pc, #464]	@ (80055c0 <_ZN23graphing_ScreenViewBaseC1Ev+0x850>)
 80053ee:	2109      	movs	r1, #9
    Unicode::snprintf(pres_frBuffer, PRES_FR_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_ONR6).getText());
 80053f0:	f604 6a3a 	addw	sl, r4, #3642	@ 0xe3a
 80053f4:	6818      	ldr	r0, [r3, #0]
 80053f6:	f7ff f8cd 	bl	8004594 <_ZNK8touchgfx5Texts7getTextEt>
    Unicode::snprintf(pres_flBuffer, PRES_FL_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_P78H).getText());
 80053fa:	4a72      	ldr	r2, [pc, #456]	@ (80055c4 <_ZN23graphing_ScreenViewBaseC1Ev+0x854>)
 80053fc:	4603      	mov	r3, r0
 80053fe:	4649      	mov	r1, r9
 8005400:	4630      	mov	r0, r6
 8005402:	f016 f9e9 	bl	801b7d8 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    pres_fl.resizeToCurrentText();
 8005406:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8005408:	f8c4 664c 	str.w	r6, [r4, #1612]	@ 0x64c
 800540c:	f00f fafe 	bl	8014a0c <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
        : typedTextId(id)
 8005410:	230d      	movs	r3, #13
 8005412:	4a6d      	ldr	r2, [pc, #436]	@ (80055c8 <_ZN23graphing_ScreenViewBaseC1Ev+0x858>)
    pres_fl.setTypedText(touchgfx::TypedText(T___SINGLEUSE_ED0G));
 8005414:	a91e      	add	r1, sp, #120	@ 0x78
 8005416:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8005418:	f8ad 307c 	strh.w	r3, [sp, #124]	@ 0x7c
 800541c:	921e      	str	r2, [sp, #120]	@ 0x78
 800541e:	f00f fb15 	bl	8014a4c <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
    tire_pres_pg.add(pres_fl);
 8005422:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8005424:	9805      	ldr	r0, [sp, #20]
 8005426:	f00a fbe6 	bl	800fbf6 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    pres_fr.setXY(245, 275);
 800542a:	21f5      	movs	r1, #245	@ 0xf5
 800542c:	f240 1213 	movw	r2, #275	@ 0x113
 8005430:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8005432:	f7fe fe22 	bl	800407a <_ZN8touchgfx8Drawable5setXYEss>
        color = newColor;
 8005436:	4e67      	ldr	r6, [pc, #412]	@ (80055d4 <_ZN23graphing_ScreenViewBaseC1Ev+0x864>)
        boundingArea = calculateBoundingArea();
 8005438:	f04f 31ff 	mov.w	r1, #4294967295
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 800543c:	f8d8 3000 	ldr.w	r3, [r8]
        color = newColor;
 8005440:	f8c4 6680 	str.w	r6, [r4, #1664]	@ 0x680
        linespace = space;
 8005444:	f8a4 5684 	strh.w	r5, [r4, #1668]	@ 0x684
        boundingArea = calculateBoundingArea();
 8005448:	f8c4 568c 	str.w	r5, [r4, #1676]	@ 0x68c
 800544c:	f8c4 1690 	str.w	r1, [r4, #1680]	@ 0x690
 8005450:	f8c4 5694 	str.w	r5, [r4, #1684]	@ 0x694
 8005454:	2b00      	cmp	r3, #0
 8005456:	f43f aef2 	beq.w	800523e <_ZN23graphing_ScreenViewBaseC1Ev+0x4ce>
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
 800545a:	883b      	ldrh	r3, [r7, #0]
 800545c:	2b08      	cmp	r3, #8
 800545e:	f67f aef8 	bls.w	8005252 <_ZN23graphing_ScreenViewBaseC1Ev+0x4e2>
        return texts->getText(typedTextId);
 8005462:	4b57      	ldr	r3, [pc, #348]	@ (80055c0 <_ZN23graphing_ScreenViewBaseC1Ev+0x850>)
 8005464:	2108      	movs	r1, #8
 8005466:	6818      	ldr	r0, [r3, #0]
 8005468:	f7ff f894 	bl	8004594 <_ZNK8touchgfx5Texts7getTextEt>
    Unicode::snprintf(pres_frBuffer, PRES_FR_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_ONR6).getText());
 800546c:	4a55      	ldr	r2, [pc, #340]	@ (80055c4 <_ZN23graphing_ScreenViewBaseC1Ev+0x854>)
 800546e:	4603      	mov	r3, r0
 8005470:	4649      	mov	r1, r9
 8005472:	4650      	mov	r0, sl
 8005474:	f016 f9b0 	bl	801b7d8 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    pres_fr.resizeToCurrentText();
 8005478:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800547a:	f8c4 a698 	str.w	sl, [r4, #1688]	@ 0x698
    Unicode::snprintf(pres_rrBuffer, PRES_RR_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_DATJ).getText());
 800547e:	f504 6a64 	add.w	sl, r4, #3648	@ 0xe40
    pres_fr.resizeToCurrentText();
 8005482:	f00f fac3 	bl	8014a0c <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
        : typedTextId(id)
 8005486:	230c      	movs	r3, #12
 8005488:	4a4f      	ldr	r2, [pc, #316]	@ (80055c8 <_ZN23graphing_ScreenViewBaseC1Ev+0x858>)
    pres_fr.setTypedText(touchgfx::TypedText(T___SINGLEUSE_4JZO));
 800548a:	a91e      	add	r1, sp, #120	@ 0x78
 800548c:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800548e:	f8ad 307c 	strh.w	r3, [sp, #124]	@ 0x7c
 8005492:	921e      	str	r2, [sp, #120]	@ 0x78
 8005494:	f00f fada 	bl	8014a4c <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
    tire_pres_pg.add(pres_fr);
 8005498:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800549a:	9805      	ldr	r0, [sp, #20]
 800549c:	f00a fbab 	bl	800fbf6 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    pres_rr.setXY(246, 383);
 80054a0:	21f6      	movs	r1, #246	@ 0xf6
 80054a2:	f240 127f 	movw	r2, #383	@ 0x17f
 80054a6:	980c      	ldr	r0, [sp, #48]	@ 0x30
 80054a8:	f7fe fde7 	bl	800407a <_ZN8touchgfx8Drawable5setXYEss>
 80054ac:	f04f 31ff 	mov.w	r1, #4294967295
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 80054b0:	f8d8 3000 	ldr.w	r3, [r8]
        color = newColor;
 80054b4:	f8c4 66cc 	str.w	r6, [r4, #1740]	@ 0x6cc
        linespace = space;
 80054b8:	f8a4 56d0 	strh.w	r5, [r4, #1744]	@ 0x6d0
        boundingArea = calculateBoundingArea();
 80054bc:	f8c4 56d8 	str.w	r5, [r4, #1752]	@ 0x6d8
 80054c0:	f8c4 16dc 	str.w	r1, [r4, #1756]	@ 0x6dc
 80054c4:	f8c4 56e0 	str.w	r5, [r4, #1760]	@ 0x6e0
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	f43f aeb8 	beq.w	800523e <_ZN23graphing_ScreenViewBaseC1Ev+0x4ce>
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
 80054ce:	883b      	ldrh	r3, [r7, #0]
 80054d0:	2b06      	cmp	r3, #6
 80054d2:	f67f aebe 	bls.w	8005252 <_ZN23graphing_ScreenViewBaseC1Ev+0x4e2>
        return texts->getText(typedTextId);
 80054d6:	4b3a      	ldr	r3, [pc, #232]	@ (80055c0 <_ZN23graphing_ScreenViewBaseC1Ev+0x850>)
 80054d8:	2106      	movs	r1, #6
 80054da:	6818      	ldr	r0, [r3, #0]
 80054dc:	f7ff f85a 	bl	8004594 <_ZNK8touchgfx5Texts7getTextEt>
    Unicode::snprintf(pres_rrBuffer, PRES_RR_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_DATJ).getText());
 80054e0:	4a38      	ldr	r2, [pc, #224]	@ (80055c4 <_ZN23graphing_ScreenViewBaseC1Ev+0x854>)
 80054e2:	4603      	mov	r3, r0
 80054e4:	4649      	mov	r1, r9
 80054e6:	4650      	mov	r0, sl
 80054e8:	f016 f976 	bl	801b7d8 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    pres_rr.resizeToCurrentText();
 80054ec:	980c      	ldr	r0, [sp, #48]	@ 0x30
 80054ee:	f8c4 a6e4 	str.w	sl, [r4, #1764]	@ 0x6e4
 80054f2:	f00f fa8b 	bl	8014a0c <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
        : typedTextId(id)
 80054f6:	230b      	movs	r3, #11
 80054f8:	4a33      	ldr	r2, [pc, #204]	@ (80055c8 <_ZN23graphing_ScreenViewBaseC1Ev+0x858>)
    pres_rr.setTypedText(touchgfx::TypedText(T___SINGLEUSE_BWD6));
 80054fa:	a91e      	add	r1, sp, #120	@ 0x78
 80054fc:	980c      	ldr	r0, [sp, #48]	@ 0x30
 80054fe:	f8ad 307c 	strh.w	r3, [sp, #124]	@ 0x7c
 8005502:	921e      	str	r2, [sp, #120]	@ 0x78
 8005504:	f00f faa2 	bl	8014a4c <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
    tire_pres_pg.add(pres_rr);
 8005508:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800550a:	9805      	ldr	r0, [sp, #20]
 800550c:	f00a fb73 	bl	800fbf6 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    pres_rl.setXY(96, 383);
 8005510:	f240 127f 	movw	r2, #383	@ 0x17f
 8005514:	2160      	movs	r1, #96	@ 0x60
 8005516:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8005518:	f7fe fdaf 	bl	800407a <_ZN8touchgfx8Drawable5setXYEss>
 800551c:	f04f 33ff 	mov.w	r3, #4294967295
        linespace = space;
 8005520:	f8a4 571c 	strh.w	r5, [r4, #1820]	@ 0x71c
        boundingArea = calculateBoundingArea();
 8005524:	f8c4 3728 	str.w	r3, [r4, #1832]	@ 0x728
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 8005528:	f8d8 3000 	ldr.w	r3, [r8]
 800552c:	f8c4 5724 	str.w	r5, [r4, #1828]	@ 0x724
 8005530:	f8c4 572c 	str.w	r5, [r4, #1836]	@ 0x72c
    Unicode::snprintf(pres_rlBuffer, PRES_RL_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_JSZ2).getText());
 8005534:	f604 6546 	addw	r5, r4, #3654	@ 0xe46
        color = newColor;
 8005538:	f8c4 6718 	str.w	r6, [r4, #1816]	@ 0x718
 800553c:	2b00      	cmp	r3, #0
 800553e:	f43f ae7e 	beq.w	800523e <_ZN23graphing_ScreenViewBaseC1Ev+0x4ce>
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
 8005542:	883b      	ldrh	r3, [r7, #0]
 8005544:	2b07      	cmp	r3, #7
 8005546:	f67f ae84 	bls.w	8005252 <_ZN23graphing_ScreenViewBaseC1Ev+0x4e2>
        return texts->getText(typedTextId);
 800554a:	4b1d      	ldr	r3, [pc, #116]	@ (80055c0 <_ZN23graphing_ScreenViewBaseC1Ev+0x850>)
 800554c:	2107      	movs	r1, #7
        : typedTextId(id)
 800554e:	f04f 080a 	mov.w	r8, #10
 8005552:	f8df 9074 	ldr.w	r9, [pc, #116]	@ 80055c8 <_ZN23graphing_ScreenViewBaseC1Ev+0x858>
        return texts->getText(typedTextId);
 8005556:	6818      	ldr	r0, [r3, #0]
 8005558:	2602      	movs	r6, #2
 800555a:	f7ff f81b 	bl	8004594 <_ZNK8touchgfx5Texts7getTextEt>
 800555e:	4a19      	ldr	r2, [pc, #100]	@ (80055c4 <_ZN23graphing_ScreenViewBaseC1Ev+0x854>)
 8005560:	4603      	mov	r3, r0
 8005562:	2103      	movs	r1, #3
 8005564:	4628      	mov	r0, r5
 8005566:	2701      	movs	r7, #1
 8005568:	f016 f936 	bl	801b7d8 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    pres_rl.resizeToCurrentText();
 800556c:	980d      	ldr	r0, [sp, #52]	@ 0x34
 800556e:	f8c4 5730 	str.w	r5, [r4, #1840]	@ 0x730
    slider1.setupHorizontalSlider(16, 11, 0, 0, 200);
 8005572:	f04f 0ac8 	mov.w	sl, #200	@ 0xc8
    pres_rl.resizeToCurrentText();
 8005576:	f00f fa49 	bl	8014a0c <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
    pres_rl.setTypedText(touchgfx::TypedText(T___SINGLEUSE_9P52));
 800557a:	a91e      	add	r1, sp, #120	@ 0x78
 800557c:	980d      	ldr	r0, [sp, #52]	@ 0x34
    slider1.setupHorizontalSlider(16, 11, 0, 0, 200);
 800557e:	2500      	movs	r5, #0
        : typedTextId(id)
 8005580:	f8cd 9078 	str.w	r9, [sp, #120]	@ 0x78
 8005584:	f8ad 807c 	strh.w	r8, [sp, #124]	@ 0x7c
    pres_rl.setTypedText(touchgfx::TypedText(T___SINGLEUSE_9P52));
 8005588:	f00f fa60 	bl	8014a4c <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
    tire_pres_pg.add(pres_rl);
 800558c:	990d      	ldr	r1, [sp, #52]	@ 0x34
 800558e:	9805      	ldr	r0, [sp, #20]
 8005590:	f00a fb31 	bl	800fbf6 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    swipeContainer1.add(tire_pres_pg);
 8005594:	9905      	ldr	r1, [sp, #20]
 8005596:	9803      	ldr	r0, [sp, #12]
 8005598:	f00b fa89 	bl	8010aae <_ZN8touchgfx14SwipeContainer3addERNS_8DrawableE>
    swipeContainer1.setSelectedPage(0);
 800559c:	9803      	ldr	r0, [sp, #12]
 800559e:	2100      	movs	r1, #0
 80055a0:	f00b fa76 	bl	8010a90 <_ZN8touchgfx14SwipeContainer15setSelectedPageEh>
 80055a4:	9903      	ldr	r1, [sp, #12]
 80055a6:	4658      	mov	r0, fp
 80055a8:	f00a fb25 	bl	800fbf6 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    slider1.setXY(8, 414);
 80055ac:	9806      	ldr	r0, [sp, #24]
 80055ae:	f44f 72cf 	mov.w	r2, #414	@ 0x19e
 80055b2:	2108      	movs	r1, #8
 80055b4:	f7fe fd61 	bl	800407a <_ZN8touchgfx8Drawable5setXYEss>
    slider1.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_SLIDER_HORIZONTAL_THICK_TRACK_SMALL_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_SLIDER_HORIZONTAL_THICK_TRACK_SMALL_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_SLIDER_HORIZONTAL_THICK_ROUND_LIGHT_ID));
 80055b8:	ab1e      	add	r3, sp, #120	@ 0x78
 80055ba:	aa1d      	add	r2, sp, #116	@ 0x74
 80055bc:	e00c      	b.n	80055d8 <_ZN23graphing_ScreenViewBaseC1Ev+0x868>
 80055be:	bf00      	nop
 80055c0:	24028e84 	.word	0x24028e84
 80055c4:	0802b7d5 	.word	0x0802b7d5
 80055c8:	0802aec4 	.word	0x0802aec4
 80055cc:	01e1016c 	.word	0x01e1016c
 80055d0:	ffff0000 	.word	0xffff0000
 80055d4:	ff424cff 	.word	0xff424cff
 80055d8:	a91c      	add	r1, sp, #112	@ 0x70
 80055da:	9806      	ldr	r0, [sp, #24]
 80055dc:	f8ad 6070 	strh.w	r6, [sp, #112]	@ 0x70
 80055e0:	f8ad 6074 	strh.w	r6, [sp, #116]	@ 0x74
 80055e4:	f8ad 7078 	strh.w	r7, [sp, #120]	@ 0x78
 80055e8:	f00a fff4 	bl	80105d4 <_ZN8touchgfx6Slider10setBitmapsERKNS_6BitmapES3_S3_>
    slider1.setupHorizontalSlider(16, 11, 0, 0, 200);
 80055ec:	462b      	mov	r3, r5
 80055ee:	9806      	ldr	r0, [sp, #24]
 80055f0:	220b      	movs	r2, #11
 80055f2:	2110      	movs	r1, #16
 80055f4:	e9cd 5a00 	strd	r5, sl, [sp]
 80055f8:	f00a ff0d 	bl	8010416 <_ZN8touchgfx6Slider21setupHorizontalSliderEsssss>
    slider1.setValueRange(0, 200);
 80055fc:	4652      	mov	r2, sl
 80055fe:	4629      	mov	r1, r5
 8005600:	9806      	ldr	r0, [sp, #24]
 8005602:	f00a fdc6 	bl	8010192 <_ZN8touchgfx6Slider13setValueRangeEss>
    slider1.setValue(0);
 8005606:	4629      	mov	r1, r5
 8005608:	9806      	ldr	r0, [sp, #24]
 800560a:	f00a fd8a 	bl	8010122 <_ZN8touchgfx6Slider8setValueEs>
    slider1.setNewValueCallback(sliderValueChangedCallback);
 800560e:	f504 5375 	add.w	r3, r4, #15680	@ 0x3d40
 8005612:	9906      	ldr	r1, [sp, #24]
 8005614:	4658      	mov	r0, fp
 8005616:	331c      	adds	r3, #28
     *
     * @see GenericCallback
     */
    void setNewValueCallback(GenericCallback<const Slider&, int>& callback)
    {
        newValueCallback = &callback;
 8005618:	f8c4 3824 	str.w	r3, [r4, #2084]	@ 0x824
 800561c:	f00a faeb 	bl	800fbf6 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    digitalClock1.setPosition(277, 10, 250, 30);
 8005620:	231e      	movs	r3, #30
 8005622:	4642      	mov	r2, r8
 8005624:	9807      	ldr	r0, [sp, #28]
 8005626:	9300      	str	r3, [sp, #0]
 8005628:	f240 1115 	movw	r1, #277	@ 0x115
 800562c:	23fa      	movs	r3, #250	@ 0xfa
 800562e:	f7fe fd31 	bl	8004094 <_ZN8touchgfx8Drawable11setPositionEssss>
    digitalClock1.setColor(touchgfx::Color::getColorFromRGB(102, 102, 102));
 8005632:	9807      	ldr	r0, [sp, #28]
 8005634:	492c      	ldr	r1, [pc, #176]	@ (80056e8 <_ZN23graphing_ScreenViewBaseC1Ev+0x978>)
 8005636:	f00a f957 	bl	800f8e8 <_ZN8touchgfx12DigitalClock8setColorENS_9colortypeE>
    digitalClock1.setTypedText(touchgfx::TypedText(T___SINGLEUSE_9ZRH));
 800563a:	a91e      	add	r1, sp, #120	@ 0x78
 800563c:	9807      	ldr	r0, [sp, #28]
 800563e:	f8cd 9078 	str.w	r9, [sp, #120]	@ 0x78
 8005642:	f8ad 607c 	strh.w	r6, [sp, #124]	@ 0x7c
 8005646:	f00a f962 	bl	800f90e <_ZN8touchgfx12DigitalClock12setTypedTextENS_9TypedTextE>
    digitalClock1.displayLeadingZeroForHourIndicator(true);
 800564a:	4639      	mov	r1, r7
 800564c:	9807      	ldr	r0, [sp, #28]
 800564e:	f00a fa5b 	bl	800fb08 <_ZN8touchgfx12DigitalClock34displayLeadingZeroForHourIndicatorEb>
    digitalClock1.setTime12Hour(10, 10, 0, true);
 8005652:	462b      	mov	r3, r5
 8005654:	4642      	mov	r2, r8
 8005656:	4641      	mov	r1, r8
 8005658:	9807      	ldr	r0, [sp, #28]
     *
     * @see DisplayMode, getDisplayMode
     */
    virtual void setDisplayMode(DisplayMode dm)
    {
        displayMode = dm;
 800565a:	f884 6857 	strb.w	r6, [r4, #2135]	@ 0x857
 800565e:	9700      	str	r7, [sp, #0]
 8005660:	f00a fa6f 	bl	800fb42 <_ZN8touchgfx13AbstractClock13setTime12HourEhhhb>
 8005664:	9907      	ldr	r1, [sp, #28]
 8005666:	4658      	mov	r0, fp
 8005668:	f00a fac5 	bl	800fbf6 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    battery_level.setXY(619, 13);
 800566c:	9804      	ldr	r0, [sp, #16]
 800566e:	220d      	movs	r2, #13
 8005670:	f240 216b 	movw	r1, #619	@ 0x26b
 8005674:	f7fe fd01 	bl	800407a <_ZN8touchgfx8Drawable5setXYEss>
    battery_level.setProgressIndicatorPosition(0, 0, 163, 388);
 8005678:	f44f 73c2 	mov.w	r3, #388	@ 0x184
 800567c:	462a      	mov	r2, r5
 800567e:	4629      	mov	r1, r5
 8005680:	9804      	ldr	r0, [sp, #16]
 8005682:	9300      	str	r3, [sp, #0]
 8005684:	23a3      	movs	r3, #163	@ 0xa3
 8005686:	f009 fd51 	bl	800f12c <_ZN8touchgfx13ImageProgress28setProgressIndicatorPositionEssss>
    battery_level.setRange(0, 100);
 800568a:	2264      	movs	r2, #100	@ 0x64
 800568c:	462b      	mov	r3, r5
 800568e:	4629      	mov	r1, r5
 8005690:	9804      	ldr	r0, [sp, #16]
 8005692:	9500      	str	r5, [sp, #0]
 8005694:	f009 ff20 	bl	800f4d8 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEiitt>
    battery_level.setDirection(touchgfx::AbstractDirectionProgress::UP);
 8005698:	9804      	ldr	r0, [sp, #16]
 800569a:	2103      	movs	r1, #3
 800569c:	f009 fcff 	bl	800f09e <_ZN8touchgfx25AbstractDirectionProgress12setDirectionENS0_13DirectionTypeE>
 80056a0:	2304      	movs	r3, #4
    battery_level.setBackground(touchgfx::Bitmap(BITMAP_BATTERY_BG_ID));
 80056a2:	a91e      	add	r1, sp, #120	@ 0x78
 80056a4:	9804      	ldr	r0, [sp, #16]
 80056a6:	f8ad 3078 	strh.w	r3, [sp, #120]	@ 0x78
 80056aa:	f00a f869 	bl	800f780 <_ZN8touchgfx25AbstractProgressIndicator13setBackgroundERKNS_6BitmapE>
    battery_level.setBitmap(BITMAP_BATTERY_FILL_ID);
 80056ae:	9804      	ldr	r0, [sp, #16]
 80056b0:	2105      	movs	r1, #5
 80056b2:	f009 fd28 	bl	800f106 <_ZN8touchgfx13ImageProgress9setBitmapEt>
    battery_level.setValue(60);
 80056b6:	9804      	ldr	r0, [sp, #16]
 80056b8:	213c      	movs	r1, #60	@ 0x3c
 80056ba:	f009 fd4f 	bl	800f15c <_ZN8touchgfx13ImageProgress8setValueEi>
    battery_level.setAnchorAtZero(true);
 80056be:	4639      	mov	r1, r7
 80056c0:	9804      	ldr	r0, [sp, #16]
 80056c2:	f009 fd01 	bl	800f0c8 <_ZN8touchgfx13ImageProgress15setAnchorAtZeroEb>
 80056c6:	9904      	ldr	r1, [sp, #16]
 80056c8:	4658      	mov	r0, fp
 80056ca:	f00a fa94 	bl	800fbf6 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    right_container1.setXY(2, 1);
 80056ce:	463a      	mov	r2, r7
 80056d0:	4631      	mov	r1, r6
 80056d2:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 80056d4:	f7fe fcd1 	bl	800407a <_ZN8touchgfx8Drawable5setXYEss>
 80056d8:	4658      	mov	r0, fp
 80056da:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 80056dc:	f00a fa8b 	bl	800fbf6 <_ZN8touchgfx9Container3addERNS_8DrawableE>
}
 80056e0:	4620      	mov	r0, r4
 80056e2:	b021      	add	sp, #132	@ 0x84
 80056e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80056e8:	ff666666 	.word	0xff666666

080056ec <_ZN23graphing_ScreenViewBaseD1Ev>:
graphing_ScreenViewBase::~graphing_ScreenViewBase()
 80056ec:	4b09      	ldr	r3, [pc, #36]	@ (8005714 <_ZN23graphing_ScreenViewBaseD1Ev+0x28>)
 80056ee:	b510      	push	{r4, lr}
 80056f0:	6003      	str	r3, [r0, #0]
 80056f2:	4604      	mov	r4, r0
    touchgfx::CanvasWidgetRenderer::resetBuffer();
 80056f4:	f010 fe92 	bl	801641c <_ZN8touchgfx20CanvasWidgetRenderer11resetBufferEv>

class right_container : public right_containerBase
{
public:
    right_container();
    virtual ~right_container() {}
 80056f8:	4b07      	ldr	r3, [pc, #28]	@ (8005718 <_ZN23graphing_ScreenViewBaseD1Ev+0x2c>)
 80056fa:	f604 10d8 	addw	r0, r4, #2520	@ 0x9d8
 80056fe:	f8c4 39d8 	str.w	r3, [r4, #2520]	@ 0x9d8
 8005702:	f000 fa01 	bl	8005b08 <_ZN19right_containerBaseD1Ev>
}
 8005706:	f504 7096 	add.w	r0, r4, #300	@ 0x12c
 800570a:	f00a ffa1 	bl	8010650 <_ZN8touchgfx14SwipeContainerD1Ev>
 800570e:	4620      	mov	r0, r4
 8005710:	bd10      	pop	{r4, pc}
 8005712:	bf00      	nop
 8005714:	0802bb34 	.word	0x0802bb34
 8005718:	0802be1c 	.word	0x0802be1c

0800571c <_ZN23graphing_ScreenViewBaseD0Ev>:
graphing_ScreenViewBase::~graphing_ScreenViewBase()
 800571c:	b510      	push	{r4, lr}
 800571e:	4604      	mov	r4, r0
}
 8005720:	f7ff ffe4 	bl	80056ec <_ZN23graphing_ScreenViewBaseD1Ev>
 8005724:	f643 516c 	movw	r1, #15724	@ 0x3d6c
 8005728:	4620      	mov	r0, r4
 800572a:	f021 feb0 	bl	802748e <_ZdlPvj>
 800572e:	4620      	mov	r0, r4
 8005730:	bd10      	pop	{r4, pc}

08005732 <_ZN19right_containerBase10initializeEv>:
}

void right_containerBase::initialize()
{

}
 8005732:	4770      	bx	lr

08005734 <_ZN8touchgfx12FadeAnimatorINS_13ImageProgressEED1Ev>:
class FadeAnimator : public T
 8005734:	4770      	bx	lr

08005736 <_ZN8touchgfx12FadeAnimatorINS_13ImageProgressEE21setFadeAnimationDelayEt>:
        fadeAnimationDelay = delay;
 8005736:	f8a0 1118 	strh.w	r1, [r0, #280]	@ 0x118
    }
 800573a:	4770      	bx	lr

0800573c <_ZNK8touchgfx12FadeAnimatorINS_13ImageProgressEE21getFadeAnimationDelayEv>:
    }
 800573c:	f8b0 0118 	ldrh.w	r0, [r0, #280]	@ 0x118
 8005740:	4770      	bx	lr

08005742 <_ZN8touchgfx12FadeAnimatorINS_13ImageProgressEED0Ev>:
class FadeAnimator : public T
 8005742:	b510      	push	{r4, lr}
 8005744:	4604      	mov	r4, r0
 8005746:	f44f 7194 	mov.w	r1, #296	@ 0x128
 800574a:	f021 fea0 	bl	802748e <_ZdlPvj>
 800574e:	4620      	mov	r0, r4
 8005750:	bd10      	pop	{r4, pc}

08005752 <_ZNK8touchgfx25AbstractProgressIndicator17invalidateContentEv>:
        if (getAlpha() > 0)
 8005752:	6803      	ldr	r3, [r0, #0]
    virtual void invalidateContent() const
 8005754:	b510      	push	{r4, lr}
        if (getAlpha() > 0)
 8005756:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
    virtual void invalidateContent() const
 800575a:	4604      	mov	r4, r0
        if (getAlpha() > 0)
 800575c:	4798      	blx	r3
 800575e:	b110      	cbz	r0, 8005766 <_ZNK8touchgfx25AbstractProgressIndicator17invalidateContentEv+0x14>
            Container::invalidateContent();
 8005760:	4620      	mov	r0, r4
 8005762:	f7fd fe20 	bl	80033a6 <_ZNK8touchgfx8Drawable17invalidateContentEv>
        }
    }
 8005766:	bd10      	pop	{r4, pc}

08005768 <_ZN8touchgfx12FadeAnimatorINS_13ImageProgressEE21nextFadeAnimationStepEv>:
        if (fadeAnimationRunning)
 8005768:	f890 3115 	ldrb.w	r3, [r0, #277]	@ 0x115
    void nextFadeAnimationStep()
 800576c:	b570      	push	{r4, r5, r6, lr}
 800576e:	4604      	mov	r4, r0
        if (fadeAnimationRunning)
 8005770:	2b00      	cmp	r3, #0
 8005772:	d052      	beq.n	800581a <_ZN8touchgfx12FadeAnimatorINS_13ImageProgressEE21nextFadeAnimationStepEv+0xb2>
            fadeAnimationCounter++;
 8005774:	f8b0 0116 	ldrh.w	r0, [r0, #278]	@ 0x116
            if (fadeAnimationCounter >= fadeAnimationDelay)
 8005778:	f8b4 3118 	ldrh.w	r3, [r4, #280]	@ 0x118
            fadeAnimationCounter++;
 800577c:	3001      	adds	r0, #1
 800577e:	b280      	uxth	r0, r0
            if (fadeAnimationCounter >= fadeAnimationDelay)
 8005780:	4298      	cmp	r0, r3
            fadeAnimationCounter++;
 8005782:	f8a4 0116 	strh.w	r0, [r4, #278]	@ 0x116
            if (fadeAnimationCounter >= fadeAnimationDelay)
 8005786:	d348      	bcc.n	800581a <_ZN8touchgfx12FadeAnimatorINS_13ImageProgressEE21nextFadeAnimationStepEv+0xb2>
                int16_t newAlpha = fadeAnimationStartAlpha + (int16_t)fadeAnimationAlphaEquation(actualAnimationCounter, 0, fadeAnimationEndAlpha - fadeAnimationStartAlpha, fadeAnimationDuration);
 8005788:	f8b4 511c 	ldrh.w	r5, [r4, #284]	@ 0x11c
 800578c:	1ac0      	subs	r0, r0, r3
 800578e:	f8b4 211e 	ldrh.w	r2, [r4, #286]	@ 0x11e
 8005792:	2100      	movs	r1, #0
 8005794:	f8d4 6120 	ldr.w	r6, [r4, #288]	@ 0x120
 8005798:	b280      	uxth	r0, r0
 800579a:	1b52      	subs	r2, r2, r5
 800579c:	f8b4 311a 	ldrh.w	r3, [r4, #282]	@ 0x11a
 80057a0:	b212      	sxth	r2, r2
 80057a2:	47b0      	blx	r6
 80057a4:	4405      	add	r5, r0
                if (T::getAlpha() != newAlpha)
 80057a6:	4620      	mov	r0, r4
                int16_t newAlpha = fadeAnimationStartAlpha + (int16_t)fadeAnimationAlphaEquation(actualAnimationCounter, 0, fadeAnimationEndAlpha - fadeAnimationStartAlpha, fadeAnimationDuration);
 80057a8:	b2ae      	uxth	r6, r5
 80057aa:	b22d      	sxth	r5, r5
                if (T::getAlpha() != newAlpha)
 80057ac:	f009 fed7 	bl	800f55e <_ZNK8touchgfx25AbstractProgressIndicator8getAlphaEv>
 80057b0:	42a8      	cmp	r0, r5
 80057b2:	d007      	beq.n	80057c4 <_ZN8touchgfx12FadeAnimatorINS_13ImageProgressEE21nextFadeAnimationStepEv+0x5c>
                    if (newAlpha == 0)
 80057b4:	bb4d      	cbnz	r5, 800580a <_ZN8touchgfx12FadeAnimatorINS_13ImageProgressEE21nextFadeAnimationStepEv+0xa2>
                        T::invalidateContent();
 80057b6:	4620      	mov	r0, r4
 80057b8:	f7ff ffcb 	bl	8005752 <_ZNK8touchgfx25AbstractProgressIndicator17invalidateContentEv>
                        T::setAlpha((uint8_t)newAlpha);
 80057bc:	4629      	mov	r1, r5
 80057be:	4620      	mov	r0, r4
 80057c0:	f009 fcac 	bl	800f11c <_ZN8touchgfx13ImageProgress8setAlphaEh>
                if (fadeAnimationCounter >= (uint32_t)(fadeAnimationDelay + fadeAnimationDuration))
 80057c4:	f8b4 3118 	ldrh.w	r3, [r4, #280]	@ 0x118
 80057c8:	f8b4 111a 	ldrh.w	r1, [r4, #282]	@ 0x11a
 80057cc:	f8b4 2116 	ldrh.w	r2, [r4, #278]	@ 0x116
 80057d0:	440b      	add	r3, r1
 80057d2:	429a      	cmp	r2, r3
 80057d4:	d321      	bcc.n	800581a <_ZN8touchgfx12FadeAnimatorINS_13ImageProgressEE21nextFadeAnimationStepEv+0xb2>
                    fadeAnimationRunning = false;
 80057d6:	2300      	movs	r3, #0
 80057d8:	f884 3115 	strb.w	r3, [r4, #277]	@ 0x115
                    fadeAnimationDuration = 0;
 80057dc:	f8a4 311a 	strh.w	r3, [r4, #282]	@ 0x11a
                    Application::getInstance()->unregisterTimerWidget(this);
 80057e0:	f012 fb30 	bl	8017e44 <_ZN8touchgfx11Application11getInstanceEv>
 80057e4:	4621      	mov	r1, r4
 80057e6:	3004      	adds	r0, #4
 80057e8:	f012 fb79 	bl	8017ede <_ZN8touchgfx11Application12TimerWidgets6removeEPKNS_8DrawableE>
                    if (fadeAnimationEndedCallback && fadeAnimationEndedCallback->isValid())
 80057ec:	f8d4 0124 	ldr.w	r0, [r4, #292]	@ 0x124
 80057f0:	b198      	cbz	r0, 800581a <_ZN8touchgfx12FadeAnimatorINS_13ImageProgressEE21nextFadeAnimationStepEv+0xb2>
 80057f2:	6803      	ldr	r3, [r0, #0]
 80057f4:	68db      	ldr	r3, [r3, #12]
 80057f6:	4798      	blx	r3
 80057f8:	b178      	cbz	r0, 800581a <_ZN8touchgfx12FadeAnimatorINS_13ImageProgressEE21nextFadeAnimationStepEv+0xb2>
                        fadeAnimationEndedCallback->execute(*this);
 80057fa:	f8d4 0124 	ldr.w	r0, [r4, #292]	@ 0x124
 80057fe:	4621      	mov	r1, r4
 8005800:	6803      	ldr	r3, [r0, #0]
    }
 8005802:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
                        fadeAnimationEndedCallback->execute(*this);
 8005806:	689b      	ldr	r3, [r3, #8]
 8005808:	4718      	bx	r3
                        T::setAlpha((uint8_t)newAlpha);
 800580a:	4620      	mov	r0, r4
 800580c:	b2f1      	uxtb	r1, r6
 800580e:	f009 fc85 	bl	800f11c <_ZN8touchgfx13ImageProgress8setAlphaEh>
                        T::invalidateContent();
 8005812:	4620      	mov	r0, r4
 8005814:	f7ff ff9d 	bl	8005752 <_ZNK8touchgfx25AbstractProgressIndicator17invalidateContentEv>
 8005818:	e7d4      	b.n	80057c4 <_ZN8touchgfx12FadeAnimatorINS_13ImageProgressEE21nextFadeAnimationStepEv+0x5c>
    }
 800581a:	bd70      	pop	{r4, r5, r6, pc}

0800581c <_ZN8touchgfx12FadeAnimatorINS_13ImageProgressEE15handleTickEventEv>:
    virtual void handleTickEvent()
 800581c:	b510      	push	{r4, lr}
 800581e:	4604      	mov	r4, r0
        T::handleTickEvent();
 8005820:	f009 ff2c 	bl	800f67c <_ZN8touchgfx25AbstractProgressIndicator15handleTickEventEv>
        nextFadeAnimationStep();
 8005824:	4620      	mov	r0, r4
 8005826:	f7ff ff9f 	bl	8005768 <_ZN8touchgfx12FadeAnimatorINS_13ImageProgressEE21nextFadeAnimationStepEv>
    }
 800582a:	bd10      	pop	{r4, pc}

0800582c <_ZN19right_containerBaseC1Ev>:
right_containerBase::right_containerBase()
 800582c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005830:	4604      	mov	r4, r0
 8005832:	b08d      	sub	sp, #52	@ 0x34
 8005834:	f7ff f87a 	bl	800492c <_ZN8touchgfx9ContainerC1Ev>
 8005838:	4ba5      	ldr	r3, [pc, #660]	@ (8005ad0 <_ZN19right_containerBaseC1Ev+0x2a4>)
 800583a:	4626      	mov	r6, r4
 800583c:	f504 7a92 	add.w	sl, r4, #292	@ 0x124
 8005840:	f504 78a8 	add.w	r8, r4, #336	@ 0x150
          fadeAnimationRunning(false),
 8005844:	2500      	movs	r5, #0
 8005846:	f846 3b2c 	str.w	r3, [r6], #44
 800584a:	4630      	mov	r0, r6
 800584c:	f00b f816 	bl	801087c <_ZN8touchgfx14SwipeContainerC1Ev>
 8005850:	4650      	mov	r0, sl
 8005852:	f7ff f86b 	bl	800492c <_ZN8touchgfx9ContainerC1Ev>
          fadeAnimationEndedCallback(0)
 8005856:	4640      	mov	r0, r8
 8005858:	f009 fdba 	bl	800f3d0 <_ZN8touchgfx13ImageProgressC1Ev>
 800585c:	4b9d      	ldr	r3, [pc, #628]	@ (8005ad4 <_ZN19right_containerBaseC1Ev+0x2a8>)
 800585e:	f504 7731 	add.w	r7, r4, #708	@ 0x2c4
          fadeAnimationRunning(false),
 8005862:	f884 5265 	strb.w	r5, [r4, #613]	@ 0x265
          fadeAnimationEndedCallback(0)
 8005866:	f8c4 3150 	str.w	r3, [r4, #336]	@ 0x150
          touchable(false),
 800586a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800586e:	4638      	mov	r0, r7
          fadeAnimationCounter(0),
 8005870:	f8a4 5266 	strh.w	r5, [r4, #614]	@ 0x266
 8005874:	f8a4 329c 	strh.w	r3, [r4, #668]	@ 0x29c
 8005878:	f504 6981 	add.w	r9, r4, #1032	@ 0x408
 800587c:	4b96      	ldr	r3, [pc, #600]	@ (8005ad8 <_ZN19right_containerBaseC1Ev+0x2ac>)
 800587e:	f504 7b1e 	add.w	fp, r4, #632	@ 0x278
          fadeAnimationDelay(0),
 8005882:	f8a4 5268 	strh.w	r5, [r4, #616]	@ 0x268
 8005886:	f8c4 32a0 	str.w	r3, [r4, #672]	@ 0x2a0
 800588a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
          fadeAnimationEndedCallback(0)
 800588e:	f8c4 5274 	str.w	r5, [r4, #628]	@ 0x274
 8005892:	f8a4 32a4 	strh.w	r3, [r4, #676]	@ 0x2a4
        : Widget(), typedText(TYPED_TEXT_INVALID), color(0), linespace(0), alpha(255), indentation(0), rotation(TEXT_ROTATE_0), wideTextAction(WIDE_TEXT_NONE), boundingArea()
 8005896:	f44f 037f 	mov.w	r3, #16711680	@ 0xff0000
        : color(col)
 800589a:	f8c4 52a8 	str.w	r5, [r4, #680]	@ 0x2a8
 800589e:	f8c4 32ac 	str.w	r3, [r4, #684]	@ 0x2ac
        : TextAreaWithWildcardBase(), wc1(0)
 80058a2:	4b8e      	ldr	r3, [pc, #568]	@ (8005adc <_ZN19right_containerBaseC1Ev+0x2b0>)
 80058a4:	f8a4 52b0 	strh.w	r5, [r4, #688]	@ 0x2b0
 80058a8:	f8c4 3278 	str.w	r3, [r4, #632]	@ 0x278
        : x(rectX), y(rectY), width(rectWidth), height(rectHeight)
 80058ac:	f04f 33ff 	mov.w	r3, #4294967295
 80058b0:	f8c4 52b4 	str.w	r5, [r4, #692]	@ 0x2b4
 80058b4:	f8c4 52c0 	str.w	r5, [r4, #704]	@ 0x2c0
              text(0)
 80058b8:	e9c4 35ae 	strd	r3, r5, [r4, #696]	@ 0x2b8
        : x(0), y(0), width(0), height(0)
 80058bc:	e9c4 559f 	strd	r5, r5, [r4, #636]	@ 0x27c
 80058c0:	e9c4 55a1 	strd	r5, r5, [r4, #644]	@ 0x284
          nextSibling(0),
 80058c4:	e9c4 55a3 	strd	r5, r5, [r4, #652]	@ 0x28c
          cachedAbsX(0),
 80058c8:	e9c4 55a5 	strd	r5, r5, [r4, #660]	@ 0x294
 80058cc:	f009 fd80 	bl	800f3d0 <_ZN8touchgfx13ImageProgressC1Ev>
 80058d0:	f504 7377 	add.w	r3, r4, #988	@ 0x3dc
 80058d4:	4618      	mov	r0, r3
 80058d6:	9303      	str	r3, [sp, #12]
 80058d8:	f7ff f828 	bl	800492c <_ZN8touchgfx9ContainerC1Ev>
 80058dc:	4648      	mov	r0, r9
 80058de:	f7ff f825 	bl	800492c <_ZN8touchgfx9ContainerC1Ev>
        rect.width = width;
 80058e2:	4b7f      	ldr	r3, [pc, #508]	@ (8005ae0 <_ZN19right_containerBaseC1Ev+0x2b4>)
    page1.setXY(0, 0);
 80058e4:	462a      	mov	r2, r5
 80058e6:	4629      	mov	r1, r5
 80058e8:	4630      	mov	r0, r6
 80058ea:	60a3      	str	r3, [r4, #8]
 80058ec:	f7fe fbc5 	bl	800407a <_ZN8touchgfx8Drawable5setXYEss>
 80058f0:	2346      	movs	r3, #70	@ 0x46
    page1.setPageIndicatorBitmaps(touchgfx::Bitmap(BITMAP_SWIPE_CONTAINER_PAGER_ID), touchgfx::Bitmap(BITMAP_SWIPE_CONTAINER_PAGER_ID));
 80058f2:	aa0a      	add	r2, sp, #40	@ 0x28
 80058f4:	a909      	add	r1, sp, #36	@ 0x24
 80058f6:	4630      	mov	r0, r6
 80058f8:	f8ad 3024 	strh.w	r3, [sp, #36]	@ 0x24
 80058fc:	f8ad 3028 	strh.w	r3, [sp, #40]	@ 0x28
 8005900:	f00b f85e 	bl	80109c0 <_ZN8touchgfx14SwipeContainer23setPageIndicatorBitmapsERKNS_6BitmapES3_>
    page1.setPageIndicatorXY(0, 0);
 8005904:	462a      	mov	r2, r5
 8005906:	4629      	mov	r1, r5
 8005908:	4630      	mov	r0, r6
 800590a:	f00a ff03 	bl	8010714 <_ZN8touchgfx14SwipeContainer18setPageIndicatorXYEss>
    page1.setSwipeCutoff(50);
 800590e:	2132      	movs	r1, #50	@ 0x32
 8005910:	4630      	mov	r0, r6
 8005912:	f00a fe93 	bl	801063c <_ZN8touchgfx14SwipeContainer14setSwipeCutoffEt>
    page1.setEndSwipeElasticWidth(50);
 8005916:	2132      	movs	r1, #50	@ 0x32
 8005918:	4630      	mov	r0, r6
 800591a:	f00a fef9 	bl	8010710 <_ZN8touchgfx14SwipeContainer23setEndSwipeElasticWidthEt>
 800591e:	4b70      	ldr	r3, [pc, #448]	@ (8005ae0 <_ZN19right_containerBaseC1Ev+0x2b4>)
    temp_progress.setXY(4, -20);
 8005920:	4640      	mov	r0, r8
 8005922:	f06f 0213 	mvn.w	r2, #19
 8005926:	2104      	movs	r1, #4
 8005928:	f8c4 312c 	str.w	r3, [r4, #300]	@ 0x12c
 800592c:	f7fe fba5 	bl	800407a <_ZN8touchgfx8Drawable5setXYEss>
    temp_progress.setProgressIndicatorPosition(0, 0, 163, 388);
 8005930:	f44f 73c2 	mov.w	r3, #388	@ 0x184
 8005934:	4640      	mov	r0, r8
 8005936:	462a      	mov	r2, r5
 8005938:	4629      	mov	r1, r5
 800593a:	9300      	str	r3, [sp, #0]
 800593c:	23a3      	movs	r3, #163	@ 0xa3
 800593e:	f009 fbf5 	bl	800f12c <_ZN8touchgfx13ImageProgress28setProgressIndicatorPositionEssss>
    temp_progress.setRange(0, 100);
 8005942:	2264      	movs	r2, #100	@ 0x64
 8005944:	462b      	mov	r3, r5
 8005946:	4640      	mov	r0, r8
 8005948:	4629      	mov	r1, r5
 800594a:	9500      	str	r5, [sp, #0]
 800594c:	f009 fdc4 	bl	800f4d8 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEiitt>
    temp_progress.setDirection(touchgfx::AbstractDirectionProgress::UP);
 8005950:	4640      	mov	r0, r8
 8005952:	2103      	movs	r1, #3
 8005954:	f009 fba3 	bl	800f09e <_ZN8touchgfx25AbstractDirectionProgress12setDirectionENS0_13DirectionTypeE>
 8005958:	2348      	movs	r3, #72	@ 0x48
    temp_progress.setBackground(touchgfx::Bitmap(BITMAP_TEMP_BG_ID));
 800595a:	4640      	mov	r0, r8
 800595c:	a90a      	add	r1, sp, #40	@ 0x28
 800595e:	f8ad 3028 	strh.w	r3, [sp, #40]	@ 0x28
 8005962:	f009 ff0d 	bl	800f780 <_ZN8touchgfx25AbstractProgressIndicator13setBackgroundERKNS_6BitmapE>
    temp_progress.setBitmap(BITMAP_TEMP_COLOR_ID);
 8005966:	4640      	mov	r0, r8
 8005968:	214a      	movs	r1, #74	@ 0x4a
 800596a:	f009 fbcc 	bl	800f106 <_ZN8touchgfx13ImageProgress9setBitmapEt>
    temp_progress.setValue(63);
 800596e:	4640      	mov	r0, r8
 8005970:	213f      	movs	r1, #63	@ 0x3f
 8005972:	f009 fbf3 	bl	800f15c <_ZN8touchgfx13ImageProgress8setValueEi>
    temp_progress.setAnchorAtZero(true);
 8005976:	4640      	mov	r0, r8
 8005978:	2101      	movs	r1, #1
 800597a:	f009 fba5 	bl	800f0c8 <_ZN8touchgfx13ImageProgress15setAnchorAtZeroEb>
    right_temp_page.add(temp_progress);
 800597e:	4641      	mov	r1, r8
 8005980:	4650      	mov	r0, sl
        boundingArea = calculateBoundingArea();
 8005982:	f10d 0810 	add.w	r8, sp, #16
 8005986:	f00a f936 	bl	800fbf6 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    temp_text_area.setXY(-84, 0);
 800598a:	462a      	mov	r2, r5
 800598c:	f06f 0153 	mvn.w	r1, #83	@ 0x53
 8005990:	4658      	mov	r0, fp
 8005992:	f7fe fb72 	bl	800407a <_ZN8touchgfx8Drawable5setXYEss>
        color = newColor;
 8005996:	4b53      	ldr	r3, [pc, #332]	@ (8005ae4 <_ZN19right_containerBaseC1Ev+0x2b8>)
        boundingArea = calculateBoundingArea();
 8005998:	4640      	mov	r0, r8
 800599a:	4659      	mov	r1, fp
        color = newColor;
 800599c:	f8c4 32a8 	str.w	r3, [r4, #680]	@ 0x2a8
        boundingArea = calculateBoundingArea();
 80059a0:	f8d4 3278 	ldr.w	r3, [r4, #632]	@ 0x278
        linespace = space;
 80059a4:	f8a4 52ac 	strh.w	r5, [r4, #684]	@ 0x2ac
        boundingArea = calculateBoundingArea();
 80059a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80059ac:	4798      	blx	r3
 80059ae:	f504 732d 	add.w	r3, r4, #692	@ 0x2b4
 80059b2:	e898 0007 	ldmia.w	r8, {r0, r1, r2}
 80059b6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 80059ba:	4b4b      	ldr	r3, [pc, #300]	@ (8005ae8 <_ZN19right_containerBaseC1Ev+0x2bc>)
    Unicode::snprintf(temp_text_areaBuffer, TEMP_TEXT_AREA_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_QW5T).getText());
 80059bc:	f204 4834 	addw	r8, r4, #1076	@ 0x434
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	b92b      	cbnz	r3, 80059d0 <_ZN19right_containerBaseC1Ev+0x1a4>
 80059c4:	4b49      	ldr	r3, [pc, #292]	@ (8005aec <_ZN19right_containerBaseC1Ev+0x2c0>)
 80059c6:	2160      	movs	r1, #96	@ 0x60
 80059c8:	4a49      	ldr	r2, [pc, #292]	@ (8005af0 <_ZN19right_containerBaseC1Ev+0x2c4>)
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
 80059ca:	484a      	ldr	r0, [pc, #296]	@ (8005af4 <_ZN19right_containerBaseC1Ev+0x2c8>)
 80059cc:	f022 f8d8 	bl	8027b80 <__assert_func>
        return typedTextId < numberOfTypedTexts;
 80059d0:	4b49      	ldr	r3, [pc, #292]	@ (8005af8 <_ZN19right_containerBaseC1Ev+0x2cc>)
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
 80059d2:	881b      	ldrh	r3, [r3, #0]
 80059d4:	b91b      	cbnz	r3, 80059de <_ZN19right_containerBaseC1Ev+0x1b2>
 80059d6:	4b49      	ldr	r3, [pc, #292]	@ (8005afc <_ZN19right_containerBaseC1Ev+0x2d0>)
 80059d8:	2161      	movs	r1, #97	@ 0x61
 80059da:	4a45      	ldr	r2, [pc, #276]	@ (8005af0 <_ZN19right_containerBaseC1Ev+0x2c4>)
 80059dc:	e7f5      	b.n	80059ca <_ZN19right_containerBaseC1Ev+0x19e>
        return texts->getText(typedTextId);
 80059de:	4b48      	ldr	r3, [pc, #288]	@ (8005b00 <_ZN19right_containerBaseC1Ev+0x2d4>)
 80059e0:	4629      	mov	r1, r5
 80059e2:	6818      	ldr	r0, [r3, #0]
 80059e4:	f7fe fdd6 	bl	8004594 <_ZNK8touchgfx5Texts7getTextEt>
 80059e8:	4a46      	ldr	r2, [pc, #280]	@ (8005b04 <_ZN19right_containerBaseC1Ev+0x2d8>)
 80059ea:	4603      	mov	r3, r0
 80059ec:	210a      	movs	r1, #10
 80059ee:	4640      	mov	r0, r8
 80059f0:	f015 fef2 	bl	801b7d8 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    temp_text_area.resizeToCurrentText();
 80059f4:	4658      	mov	r0, fp
        wc1 = value;
 80059f6:	f8c4 82c0 	str.w	r8, [r4, #704]	@ 0x2c0
        : typedTextId(id)
 80059fa:	f04f 0801 	mov.w	r8, #1
 80059fe:	f00f f805 	bl	8014a0c <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
 8005a02:	4b35      	ldr	r3, [pc, #212]	@ (8005ad8 <_ZN19right_containerBaseC1Ev+0x2ac>)
    temp_text_area.setTypedText(touchgfx::TypedText(T___SINGLEUSE_3MX6));
 8005a04:	a90a      	add	r1, sp, #40	@ 0x28
 8005a06:	4658      	mov	r0, fp
 8005a08:	930a      	str	r3, [sp, #40]	@ 0x28
 8005a0a:	f8ad 802c 	strh.w	r8, [sp, #44]	@ 0x2c
 8005a0e:	f00f f81d 	bl	8014a4c <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
    right_temp_page.add(temp_text_area);
 8005a12:	4659      	mov	r1, fp
 8005a14:	4650      	mov	r0, sl
 8005a16:	f00a f8ee 	bl	800fbf6 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    gauge_left_progress.setXY(73, 49);
 8005a1a:	4638      	mov	r0, r7
 8005a1c:	2231      	movs	r2, #49	@ 0x31
 8005a1e:	2149      	movs	r1, #73	@ 0x49
 8005a20:	f7fe fb2b 	bl	800407a <_ZN8touchgfx8Drawable5setXYEss>
    gauge_left_progress.setProgressIndicatorPosition(0, 0, 200, 280);
 8005a24:	f44f 738c 	mov.w	r3, #280	@ 0x118
 8005a28:	462a      	mov	r2, r5
 8005a2a:	4629      	mov	r1, r5
 8005a2c:	4638      	mov	r0, r7
 8005a2e:	9300      	str	r3, [sp, #0]
 8005a30:	23c8      	movs	r3, #200	@ 0xc8
 8005a32:	f009 fb7b 	bl	800f12c <_ZN8touchgfx13ImageProgress28setProgressIndicatorPositionEssss>
    gauge_left_progress.setRange(0, 200);
 8005a36:	22c8      	movs	r2, #200	@ 0xc8
 8005a38:	462b      	mov	r3, r5
 8005a3a:	4629      	mov	r1, r5
 8005a3c:	4638      	mov	r0, r7
 8005a3e:	9500      	str	r5, [sp, #0]
 8005a40:	f009 fd4a 	bl	800f4d8 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEiitt>
    gauge_left_progress.setDirection(touchgfx::AbstractDirectionProgress::UP);
 8005a44:	4638      	mov	r0, r7
 8005a46:	2103      	movs	r1, #3
 8005a48:	f009 fb29 	bl	800f09e <_ZN8touchgfx25AbstractDirectionProgress12setDirectionENS0_13DirectionTypeE>
 8005a4c:	2342      	movs	r3, #66	@ 0x42
    gauge_left_progress.setBackground(touchgfx::Bitmap(BITMAP_LEFT_GAUGE_BG_ID));
 8005a4e:	a90a      	add	r1, sp, #40	@ 0x28
 8005a50:	4638      	mov	r0, r7
 8005a52:	f8ad 3028 	strh.w	r3, [sp, #40]	@ 0x28
 8005a56:	f009 fe93 	bl	800f780 <_ZN8touchgfx25AbstractProgressIndicator13setBackgroundERKNS_6BitmapE>
    gauge_left_progress.setBitmap(BITMAP_LEFT_GAUGE_FILL_ID);
 8005a5a:	4638      	mov	r0, r7
 8005a5c:	2143      	movs	r1, #67	@ 0x43
 8005a5e:	f009 fb52 	bl	800f106 <_ZN8touchgfx13ImageProgress9setBitmapEt>
    gauge_left_progress.setValue(100);
 8005a62:	4638      	mov	r0, r7
 8005a64:	2164      	movs	r1, #100	@ 0x64
 8005a66:	f009 fb79 	bl	800f15c <_ZN8touchgfx13ImageProgress8setValueEi>
    gauge_left_progress.setAnchorAtZero(true);
 8005a6a:	4641      	mov	r1, r8
 8005a6c:	4638      	mov	r0, r7
 8005a6e:	f009 fb2b 	bl	800f0c8 <_ZN8touchgfx13ImageProgress15setAnchorAtZeroEb>
    right_temp_page.add(gauge_left_progress);
 8005a72:	4639      	mov	r1, r7
 8005a74:	4650      	mov	r0, sl
 8005a76:	f00a f8be 	bl	800fbf6 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    page1.add(right_temp_page);
 8005a7a:	4651      	mov	r1, sl
 8005a7c:	4630      	mov	r0, r6
 8005a7e:	f00b f816 	bl	8010aae <_ZN8touchgfx14SwipeContainer3addERNS_8DrawableE>
 8005a82:	4b17      	ldr	r3, [pc, #92]	@ (8005ae0 <_ZN19right_containerBaseC1Ev+0x2b4>)
    page1.add(left_gauge_page);
 8005a84:	9903      	ldr	r1, [sp, #12]
 8005a86:	4630      	mov	r0, r6
 8005a88:	f8c4 33e4 	str.w	r3, [r4, #996]	@ 0x3e4
 8005a8c:	f00b f80f 	bl	8010aae <_ZN8touchgfx14SwipeContainer3addERNS_8DrawableE>
    page1.setSelectedPage(0);
 8005a90:	4629      	mov	r1, r5
 8005a92:	4630      	mov	r0, r6
 8005a94:	f00a fffc 	bl	8010a90 <_ZN8touchgfx14SwipeContainer15setSelectedPageEh>
    add(page1);
 8005a98:	4631      	mov	r1, r6
 8005a9a:	4620      	mov	r0, r4
 8005a9c:	f00a f8ab 	bl	800fbf6 <_ZN8touchgfx9Container3addERNS_8DrawableE>
        setXY(x, y);
 8005aa0:	462a      	mov	r2, r5
 8005aa2:	4629      	mov	r1, r5
 8005aa4:	4648      	mov	r0, r9
 8005aa6:	f7fe fae8 	bl	800407a <_ZN8touchgfx8Drawable5setXYEss>
        setWidth(width);
 8005aaa:	4648      	mov	r0, r9
 8005aac:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8005ab0:	f7fd fbb4 	bl	800321c <_ZN8touchgfx8Drawable8setWidthEs>
        setHeight(height);
 8005ab4:	4648      	mov	r0, r9
 8005ab6:	f44f 71c6 	mov.w	r1, #396	@ 0x18c
 8005aba:	f7fd fbb1 	bl	8003220 <_ZN8touchgfx8Drawable9setHeightEs>
    add(gauge_left);
 8005abe:	4620      	mov	r0, r4
 8005ac0:	4649      	mov	r1, r9
 8005ac2:	f00a f898 	bl	800fbf6 <_ZN8touchgfx9Container3addERNS_8DrawableE>
}
 8005ac6:	4620      	mov	r0, r4
 8005ac8:	b00d      	add	sp, #52	@ 0x34
 8005aca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ace:	bf00      	nop
 8005ad0:	0802bc64 	.word	0x0802bc64
 8005ad4:	0802bb70 	.word	0x0802bb70
 8005ad8:	0802aec4 	.word	0x0802aec4
 8005adc:	0802b848 	.word	0x0802b848
 8005ae0:	018c0100 	.word	0x018c0100
 8005ae4:	ff6b6b6b 	.word	0xff6b6b6b
 8005ae8:	24028e78 	.word	0x24028e78
 8005aec:	0802b440 	.word	0x0802b440
 8005af0:	0802b78a 	.word	0x0802b78a
 8005af4:	0802b4bd 	.word	0x0802b4bd
 8005af8:	24028e7c 	.word	0x24028e7c
 8005afc:	0802b74c 	.word	0x0802b74c
 8005b00:	24028e84 	.word	0x24028e84
 8005b04:	0802b7d5 	.word	0x0802b7d5

08005b08 <_ZN19right_containerBaseD1Ev>:
right_containerBase::~right_containerBase()
 8005b08:	4b04      	ldr	r3, [pc, #16]	@ (8005b1c <_ZN19right_containerBaseD1Ev+0x14>)
 8005b0a:	b510      	push	{r4, lr}
 8005b0c:	4604      	mov	r4, r0
 8005b0e:	f840 3b2c 	str.w	r3, [r0], #44
}
 8005b12:	f00a fd9d 	bl	8010650 <_ZN8touchgfx14SwipeContainerD1Ev>
 8005b16:	4620      	mov	r0, r4
 8005b18:	bd10      	pop	{r4, pc}
 8005b1a:	bf00      	nop
 8005b1c:	0802bc64 	.word	0x0802bc64

08005b20 <_ZN19right_containerBaseD0Ev>:
right_containerBase::~right_containerBase()
 8005b20:	b510      	push	{r4, lr}
 8005b22:	4604      	mov	r4, r0
}
 8005b24:	f7ff fff0 	bl	8005b08 <_ZN19right_containerBaseD1Ev>
 8005b28:	f44f 6189 	mov.w	r1, #1096	@ 0x448
 8005b2c:	4620      	mov	r0, r4
 8005b2e:	f021 fcae 	bl	802748e <_ZdlPvj>
 8005b32:	4620      	mov	r0, r4
 8005b34:	bd10      	pop	{r4, pc}

08005b36 <_ZN19FrontendApplicationD1Ev>:

class FrontendApplication : public FrontendApplicationBase
{
public:
    FrontendApplication(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplication() { }
 8005b36:	4770      	bx	lr

08005b38 <_ZN19FrontendApplicationD0Ev>:
 8005b38:	b510      	push	{r4, lr}
 8005b3a:	4604      	mov	r4, r0
 8005b3c:	f44f 71ae 	mov.w	r1, #348	@ 0x15c
 8005b40:	f021 fca5 	bl	802748e <_ZdlPvj>
 8005b44:	4620      	mov	r0, r4
 8005b46:	bd10      	pop	{r4, pc}

08005b48 <_ZN19FrontendApplication15handleTickEventEv>:

    virtual void handleTickEvent()
 8005b48:	b510      	push	{r4, lr}
 8005b4a:	4604      	mov	r4, r0
    {
        model.tick();
 8005b4c:	f8d0 0158 	ldr.w	r0, [r0, #344]	@ 0x158
 8005b50:	f000 f813 	bl	8005b7a <_ZN5Model4tickEv>
        FrontendApplicationBase::handleTickEvent();
 8005b54:	4620      	mov	r0, r4
    }
 8005b56:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        FrontendApplicationBase::handleTickEvent();
 8005b5a:	f012 ba37 	b.w	8017fcc <_ZN8touchgfx11Application15handleTickEventEv>
	...

08005b60 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>:
#include <gui/common/FrontendApplication.hpp>

FrontendApplication::FrontendApplication(Model& m, FrontendHeap& heap)
 8005b60:	b510      	push	{r4, lr}
 8005b62:	4604      	mov	r4, r0
    : FrontendApplicationBase(m, heap)
 8005b64:	f7fe f998 	bl	8003e98 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>
 8005b68:	4b01      	ldr	r3, [pc, #4]	@ (8005b70 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap+0x10>)
{

}
 8005b6a:	4620      	mov	r0, r4
    : FrontendApplicationBase(m, heap)
 8005b6c:	6023      	str	r3, [r4, #0]
}
 8005b6e:	bd10      	pop	{r4, pc}
 8005b70:	0802bcf8 	.word	0x0802bcf8

08005b74 <_ZN5ModelC1Ev>:
#include <gui/model/Model.hpp>
#include <gui/model/ModelListener.hpp>

Model::Model() : modelListener(0)
 8005b74:	2200      	movs	r2, #0
 8005b76:	6002      	str	r2, [r0, #0]
{

}
 8005b78:	4770      	bx	lr

08005b7a <_ZN5Model4tickEv>:

void Model::tick()
{

}
 8005b7a:	4770      	bx	lr

08005b7c <_ZN16Screen1PresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~Screen1Presenter() {}
 8005b7c:	4770      	bx	lr

08005b7e <_ZThn4_N16Screen1PresenterD1Ev>:
 8005b7e:	3804      	subs	r0, #4
 8005b80:	4770      	bx	lr

08005b82 <_ZN16Screen1Presenter10deactivateEv>:
}

void Screen1Presenter::activate()
{

}
 8005b82:	4770      	bx	lr

08005b84 <_ZN16Screen1PresenterD0Ev>:
 8005b84:	b510      	push	{r4, lr}
 8005b86:	4604      	mov	r4, r0
 8005b88:	2110      	movs	r1, #16
 8005b8a:	f021 fc80 	bl	802748e <_ZdlPvj>
 8005b8e:	4620      	mov	r0, r4
 8005b90:	bd10      	pop	{r4, pc}

08005b92 <_ZThn4_N16Screen1PresenterD0Ev>:
 8005b92:	f1a0 0004 	sub.w	r0, r0, #4
 8005b96:	e7f5      	b.n	8005b84 <_ZN16Screen1PresenterD0Ev>

08005b98 <_ZN16Screen1PresenterC1ER11Screen1View>:
    ModelListener() : model(0) {}
 8005b98:	2200      	movs	r2, #0
    : view(v)
 8005b9a:	60c1      	str	r1, [r0, #12]
 8005b9c:	6082      	str	r2, [r0, #8]
 8005b9e:	4a02      	ldr	r2, [pc, #8]	@ (8005ba8 <_ZN16Screen1PresenterC1ER11Screen1View+0x10>)
 8005ba0:	6002      	str	r2, [r0, #0]
 8005ba2:	3218      	adds	r2, #24
 8005ba4:	6042      	str	r2, [r0, #4]
}
 8005ba6:	4770      	bx	lr
 8005ba8:	0802bd4c 	.word	0x0802bd4c

08005bac <_ZN11Screen1View14tearDownScreenEv>:
}

void Screen1View::tearDownScreen()
{
    Screen1ViewBase::tearDownScreen();
}
 8005bac:	4770      	bx	lr
	...

08005bb0 <_ZN11Screen1ViewD1Ev>:

class Screen1View : public Screen1ViewBase
{
public:
    Screen1View();
    virtual ~Screen1View() {}
 8005bb0:	4b03      	ldr	r3, [pc, #12]	@ (8005bc0 <_ZN11Screen1ViewD1Ev+0x10>)
 8005bb2:	b510      	push	{r4, lr}
 8005bb4:	4604      	mov	r4, r0
 8005bb6:	6003      	str	r3, [r0, #0]
 8005bb8:	f7fe fa29 	bl	800400e <_ZN15Screen1ViewBaseD1Ev>
 8005bbc:	4620      	mov	r0, r4
 8005bbe:	bd10      	pop	{r4, pc}
 8005bc0:	0802bd74 	.word	0x0802bd74

08005bc4 <_ZN11Screen1ViewD0Ev>:
 8005bc4:	b510      	push	{r4, lr}
 8005bc6:	4604      	mov	r4, r0
 8005bc8:	f7ff fff2 	bl	8005bb0 <_ZN11Screen1ViewD1Ev>
 8005bcc:	21f0      	movs	r1, #240	@ 0xf0
 8005bce:	4620      	mov	r0, r4
 8005bd0:	f021 fc5d 	bl	802748e <_ZdlPvj>
 8005bd4:	4620      	mov	r0, r4
 8005bd6:	bd10      	pop	{r4, pc}

08005bd8 <_ZN11Screen1ViewC1Ev>:
Screen1View::Screen1View()
 8005bd8:	b510      	push	{r4, lr}
 8005bda:	4604      	mov	r4, r0
 8005bdc:	f7fe fac6 	bl	800416c <_ZN15Screen1ViewBaseC1Ev>
 8005be0:	4b01      	ldr	r3, [pc, #4]	@ (8005be8 <_ZN11Screen1ViewC1Ev+0x10>)
}
 8005be2:	4620      	mov	r0, r4
Screen1View::Screen1View()
 8005be4:	6023      	str	r3, [r4, #0]
}
 8005be6:	bd10      	pop	{r4, pc}
 8005be8:	0802bd74 	.word	0x0802bd74

08005bec <_ZN11Screen1View11setupScreenEv>:
    Screen1ViewBase::setupScreen();
 8005bec:	f7fe ba10 	b.w	8004010 <_ZN15Screen1ViewBase11setupScreenEv>

08005bf0 <_ZN24graphing_ScreenPresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~graphing_ScreenPresenter() {}
 8005bf0:	4770      	bx	lr

08005bf2 <_ZThn4_N24graphing_ScreenPresenterD1Ev>:
 8005bf2:	3804      	subs	r0, #4
 8005bf4:	4770      	bx	lr

08005bf6 <_ZN24graphing_ScreenPresenter10deactivateEv>:
}

void graphing_ScreenPresenter::activate()
{

}
 8005bf6:	4770      	bx	lr

08005bf8 <_ZN24graphing_ScreenPresenterD0Ev>:
 8005bf8:	b510      	push	{r4, lr}
 8005bfa:	4604      	mov	r4, r0
 8005bfc:	2110      	movs	r1, #16
 8005bfe:	f021 fc46 	bl	802748e <_ZdlPvj>
 8005c02:	4620      	mov	r0, r4
 8005c04:	bd10      	pop	{r4, pc}

08005c06 <_ZThn4_N24graphing_ScreenPresenterD0Ev>:
 8005c06:	f1a0 0004 	sub.w	r0, r0, #4
 8005c0a:	e7f5      	b.n	8005bf8 <_ZN24graphing_ScreenPresenterD0Ev>

08005c0c <_ZN24graphing_ScreenPresenterC1ER19graphing_ScreenView>:
 8005c0c:	2200      	movs	r2, #0
    : view(v)
 8005c0e:	60c1      	str	r1, [r0, #12]
 8005c10:	6082      	str	r2, [r0, #8]
 8005c12:	4a02      	ldr	r2, [pc, #8]	@ (8005c1c <_ZN24graphing_ScreenPresenterC1ER19graphing_ScreenView+0x10>)
 8005c14:	6002      	str	r2, [r0, #0]
 8005c16:	3218      	adds	r2, #24
 8005c18:	6042      	str	r2, [r0, #4]
}
 8005c1a:	4770      	bx	lr
 8005c1c:	0802bda8 	.word	0x0802bda8

08005c20 <_ZN19graphing_ScreenView14tearDownScreenEv>:
}
//------------------------------------------------------------------------------------------------
void graphing_ScreenView::tearDownScreen()
{
    graphing_ScreenViewBase::tearDownScreen();
}
 8005c20:	4770      	bx	lr

08005c22 <_ZN19graphing_ScreenView9map_floatEfffff>:
//------------------------------------------------------------------------------------------------
float graphing_ScreenView::map_float(float x, float in_min, float in_max, float out_min, float out_max) {
    return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8005c22:	ee70 7a60 	vsub.f32	s15, s0, s1
 8005c26:	ee32 2a61 	vsub.f32	s4, s4, s3
 8005c2a:	ee31 1a60 	vsub.f32	s2, s2, s1
 8005c2e:	ee67 7a82 	vmul.f32	s15, s15, s4
 8005c32:	ee87 0a81 	vdiv.f32	s0, s15, s2
}
 8005c36:	ee30 0a21 	vadd.f32	s0, s0, s3
 8005c3a:	4770      	bx	lr

08005c3c <_ZN19graphing_ScreenView15handleTickEventEv>:
 
}
//------------------------------------------------------------------------------------------------
void graphing_ScreenView::handleTickEvent()
{
	tickCounter++;
 8005c3c:	f500 5340 	add.w	r3, r0, #12288	@ 0x3000
 8005c40:	f8d3 2d6c 	ldr.w	r2, [r3, #3436]	@ 0xd6c
 8005c44:	3201      	adds	r2, #1
{
 8005c46:	b510      	push	{r4, lr}
	tickCounter++;
 8005c48:	f8c3 2d6c 	str.w	r2, [r3, #3436]	@ 0xd6c
{
 8005c4c:	4604      	mov	r4, r0
    if(currentIntro != INTRO_NONE){
 8005c4e:	f893 3d80 	ldrb.w	r3, [r3, #3456]	@ 0xd80
 8005c52:	2b03      	cmp	r3, #3
 8005c54:	d002      	beq.n	8005c5c <_ZN19graphing_ScreenView15handleTickEventEv+0x20>
        runIntros();
 8005c56:	6803      	ldr	r3, [r0, #0]
 8005c58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c5a:	4798      	blx	r3
    }
    updateClock();
 8005c5c:	6823      	ldr	r3, [r4, #0]
 8005c5e:	4620      	mov	r0, r4
 8005c60:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
}
 8005c62:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    updateClock();
 8005c66:	4718      	bx	r3

08005c68 <_ZN19graphing_ScreenView23backGroundAnimationDoneEv>:
}
//------------------------------------------------------------------------------------------------
void graphing_ScreenView::backGroundAnimationDone()
{
    // run the intro animation
    currentIntro = INTRO_ELEMENTS;
 8005c68:	f500 5040 	add.w	r0, r0, #12288	@ 0x3000
 8005c6c:	2300      	movs	r3, #0
 8005c6e:	f880 3d80 	strb.w	r3, [r0, #3456]	@ 0xd80
}
 8005c72:	4770      	bx	lr

08005c74 <_ZN19graphing_ScreenViewD1Ev>:
    int digitalHours;
    int digitalMinutes;
    int digitalSeconds;
    IntroType currentIntro = INTRO_NONE;
    graphing_ScreenView();
    virtual ~graphing_ScreenView() {}
 8005c74:	4b03      	ldr	r3, [pc, #12]	@ (8005c84 <_ZN19graphing_ScreenViewD1Ev+0x10>)
 8005c76:	b510      	push	{r4, lr}
 8005c78:	4604      	mov	r4, r0
 8005c7a:	6003      	str	r3, [r0, #0]
 8005c7c:	f7ff fd36 	bl	80056ec <_ZN23graphing_ScreenViewBaseD1Ev>
 8005c80:	4620      	mov	r0, r4
 8005c82:	bd10      	pop	{r4, pc}
 8005c84:	0802bdd4 	.word	0x0802bdd4

08005c88 <_ZN19graphing_ScreenViewD0Ev>:
 8005c88:	b510      	push	{r4, lr}
 8005c8a:	4604      	mov	r4, r0
 8005c8c:	f7ff fff2 	bl	8005c74 <_ZN19graphing_ScreenViewD1Ev>
 8005c90:	f643 5184 	movw	r1, #15748	@ 0x3d84
 8005c94:	4620      	mov	r0, r4
 8005c96:	f021 fbfa 	bl	802748e <_ZdlPvj>
 8005c9a:	4620      	mov	r0, r4
 8005c9c:	bd10      	pop	{r4, pc}
	...

08005ca0 <_ZN19graphing_ScreenViewC1Ev>:
graphing_ScreenView::graphing_ScreenView()
 8005ca0:	b510      	push	{r4, lr}
 8005ca2:	4604      	mov	r4, r0
 8005ca4:	f7ff f864 	bl	8004d70 <_ZN23graphing_ScreenViewBaseC1Ev>
 8005ca8:	4b05      	ldr	r3, [pc, #20]	@ (8005cc0 <_ZN19graphing_ScreenViewC1Ev+0x20>)
 8005caa:	2200      	movs	r2, #0
}
 8005cac:	4620      	mov	r0, r4
graphing_ScreenView::graphing_ScreenView()
 8005cae:	6023      	str	r3, [r4, #0]
 8005cb0:	f504 5340 	add.w	r3, r4, #12288	@ 0x3000
 8005cb4:	f883 2d70 	strb.w	r2, [r3, #3440]	@ 0xd70
 8005cb8:	2203      	movs	r2, #3
 8005cba:	f883 2d80 	strb.w	r2, [r3, #3456]	@ 0xd80
}
 8005cbe:	bd10      	pop	{r4, pc}
 8005cc0:	0802bdd4 	.word	0x0802bdd4

08005cc4 <_ZN19graphing_ScreenView11setupScreenEv>:
{
 8005cc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005cc8:	4604      	mov	r4, r0
    graphing_ScreenViewBase::setupScreen();
 8005cca:	f7fe fdc3 	bl	8004854 <_ZN23graphing_ScreenViewBase11setupScreenEv>
    currentIntro = INTRO_NONE;
 8005cce:	2303      	movs	r3, #3
    gauge1.setValue(map_float(0,0.0,200.0,16.0,92.0)); 
 8005cd0:	eddf 0a29 	vldr	s1, [pc, #164]	@ 8005d78 <_ZN19graphing_ScreenView11setupScreenEv+0xb4>
    currentIntro = INTRO_NONE;
 8005cd4:	f504 5540 	add.w	r5, r4, #12288	@ 0x3000
    gauge1.setValue(map_float(0,0.0,200.0,16.0,92.0)); 
 8005cd8:	eef3 1a00 	vmov.f32	s3, #48	@ 0x41800000  16.0
 8005cdc:	eeb0 0a60 	vmov.f32	s0, s1
 8005ce0:	ed9f 2a26 	vldr	s4, [pc, #152]	@ 8005d7c <_ZN19graphing_ScreenView11setupScreenEv+0xb8>
    currentIntro = INTRO_NONE;
 8005ce4:	f885 3d80 	strb.w	r3, [r5, #3456]	@ 0xd80
    gauge1.setValue(map_float(0,0.0,200.0,16.0,92.0)); 
 8005ce8:	4620      	mov	r0, r4
 8005cea:	6823      	ldr	r3, [r4, #0]
 8005cec:	f504 7674 	add.w	r6, r4, #976	@ 0x3d0
 8005cf0:	ed9f 1a23 	vldr	s2, [pc, #140]	@ 8005d80 <_ZN19graphing_ScreenView11setupScreenEv+0xbc>
    right_container1.setAlpha(0);
 8005cf4:	f604 17d8 	addw	r7, r4, #2520	@ 0x9d8
    gauge1.setValue(map_float(0,0.0,200.0,16.0,92.0)); 
 8005cf8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    battery_level.setAlpha(0);
 8005cfa:	f504 680c 	add.w	r8, r4, #2240	@ 0x8c0
    gauge1.setValue(map_float(0,0.0,200.0,16.0,92.0)); 
 8005cfe:	4798      	blx	r3
 8005d00:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8005d04:	4630      	mov	r0, r6
 8005d06:	ee17 1a90 	vmov	r1, s15
 8005d0a:	f00f f9fb 	bl	8015104 <_ZN8touchgfx5Gauge8setValueEi>
    gauge1.setAlpha(0);
 8005d0e:	2100      	movs	r1, #0
 8005d10:	4630      	mov	r0, r6
 8005d12:	f00f f8d7 	bl	8014ec4 <_ZN8touchgfx5Gauge8setAlphaEh>
    right_container1.setAlpha(0);
 8005d16:	2100      	movs	r1, #0
 8005d18:	4638      	mov	r0, r7
 8005d1a:	f000 f97b 	bl	8006014 <_ZN15right_container8setAlphaEh>
    battery_level.setAlpha(0);
 8005d1e:	2100      	movs	r1, #0
 8005d20:	4640      	mov	r0, r8
 8005d22:	f009 f9fb 	bl	800f11c <_ZN8touchgfx13ImageProgress8setAlphaEh>
 8005d26:	2300      	movs	r3, #0
    gauge1.invalidate();
 8005d28:	4630      	mov	r0, r6
 8005d2a:	f884 32b4 	strb.w	r3, [r4, #692]	@ 0x2b4
 8005d2e:	f884 3118 	strb.w	r3, [r4, #280]	@ 0x118
 8005d32:	f013 f972 	bl	801901a <_ZNK8touchgfx8Drawable10invalidateEv>
    circle.invalidate();
 8005d36:	f504 7023 	add.w	r0, r4, #652	@ 0x28c
 8005d3a:	f013 f96e 	bl	801901a <_ZNK8touchgfx8Drawable10invalidateEv>
    background.invalidate();
 8005d3e:	f104 00f0 	add.w	r0, r4, #240	@ 0xf0
 8005d42:	f013 f96a 	bl	801901a <_ZNK8touchgfx8Drawable10invalidateEv>
    digitalHours = digitalClock1.getCurrentHour();
 8005d46:	f604 0428 	addw	r4, r4, #2088	@ 0x828
    battery_level.invalidate();
 8005d4a:	4640      	mov	r0, r8
 8005d4c:	f013 f965 	bl	801901a <_ZNK8touchgfx8Drawable10invalidateEv>
    right_container1.invalidate();
 8005d50:	4638      	mov	r0, r7
 8005d52:	f013 f962 	bl	801901a <_ZNK8touchgfx8Drawable10invalidateEv>
    digitalHours = digitalClock1.getCurrentHour();
 8005d56:	4620      	mov	r0, r4
 8005d58:	f009 ff24 	bl	800fba4 <_ZNK8touchgfx13AbstractClock14getCurrentHourEv>
 8005d5c:	f8c5 0d74 	str.w	r0, [r5, #3444]	@ 0xd74
    digitalMinutes = digitalClock1.getCurrentMinute();
 8005d60:	4620      	mov	r0, r4
 8005d62:	f009 ff38 	bl	800fbd6 <_ZNK8touchgfx13AbstractClock16getCurrentMinuteEv>
 8005d66:	f8c5 0d78 	str.w	r0, [r5, #3448]	@ 0xd78
    digitalSeconds = digitalClock1.getCurrentSecond();
 8005d6a:	4620      	mov	r0, r4
 8005d6c:	f009 ff36 	bl	800fbdc <_ZNK8touchgfx13AbstractClock16getCurrentSecondEv>
 8005d70:	f8c5 0d7c 	str.w	r0, [r5, #3452]	@ 0xd7c
}
 8005d74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005d78:	00000000 	.word	0x00000000
 8005d7c:	42b80000 	.word	0x42b80000
 8005d80:	43480000 	.word	0x43480000

08005d84 <_ZN19graphing_ScreenView9runIntrosEv>:

void graphing_ScreenView::runIntros()
{
 8005d84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    static int incr = 0;
    // run the intro animation
    switch (currentIntro)
 8005d86:	f500 5640 	add.w	r6, r0, #12288	@ 0x3000
{
 8005d8a:	4604      	mov	r4, r0
    switch (currentIntro)
 8005d8c:	f896 3d80 	ldrb.w	r3, [r6, #3456]	@ 0xd80
 8005d90:	2b01      	cmp	r3, #1
 8005d92:	d028      	beq.n	8005de6 <_ZN19graphing_ScreenView9runIntrosEv+0x62>
 8005d94:	2b02      	cmp	r3, #2
 8005d96:	d048      	beq.n	8005e2a <_ZN19graphing_ScreenView9runIntrosEv+0xa6>
 8005d98:	b9fb      	cbnz	r3, 8005dda <_ZN19graphing_ScreenView9runIntrosEv+0x56>
    {

    case INTRO_ELEMENTS:
        if(incr <=255)
 8005d9a:	4d39      	ldr	r5, [pc, #228]	@ (8005e80 <_ZN19graphing_ScreenView9runIntrosEv+0xfc>)
 8005d9c:	6829      	ldr	r1, [r5, #0]
 8005d9e:	29ff      	cmp	r1, #255	@ 0xff
 8005da0:	dc1c      	bgt.n	8005ddc <_ZN19graphing_ScreenView9runIntrosEv+0x58>
        {
            right_container1.setAlpha(incr);
 8005da2:	f600 17d8 	addw	r7, r0, #2520	@ 0x9d8
            battery_level.setAlpha(incr);
 8005da6:	f504 660c 	add.w	r6, r4, #2240	@ 0x8c0
            right_container1.setAlpha(incr);
 8005daa:	b2c9      	uxtb	r1, r1
 8005dac:	4638      	mov	r0, r7
 8005dae:	f000 f931 	bl	8006014 <_ZN15right_container8setAlphaEh>
            battery_level.setAlpha(incr);
 8005db2:	7829      	ldrb	r1, [r5, #0]
 8005db4:	4630      	mov	r0, r6
 8005db6:	f009 f9b1 	bl	800f11c <_ZN8touchgfx13ImageProgress8setAlphaEh>
            circle.setAlpha(incr);
 8005dba:	682b      	ldr	r3, [r5, #0]
            right_container1.invalidate();
 8005dbc:	4638      	mov	r0, r7
            circle.setAlpha(incr);
 8005dbe:	f884 32b4 	strb.w	r3, [r4, #692]	@ 0x2b4
            right_container1.invalidate();
 8005dc2:	f013 f92a 	bl	801901a <_ZNK8touchgfx8Drawable10invalidateEv>
            battery_level.invalidate();
 8005dc6:	4630      	mov	r0, r6
 8005dc8:	f013 f927 	bl	801901a <_ZNK8touchgfx8Drawable10invalidateEv>
            circle.invalidate();
 8005dcc:	f504 7023 	add.w	r0, r4, #652	@ 0x28c
 8005dd0:	f013 f923 	bl	801901a <_ZNK8touchgfx8Drawable10invalidateEv>
            incr+=5;
 8005dd4:	682b      	ldr	r3, [r5, #0]
 8005dd6:	3305      	adds	r3, #5
    case INTRO_GAUGE_DOWN:
        if((incr > 0))
        {
            //gauge1.setValue(gaugeVal);
            gauge1.setValue(map_float((float)incr,0.0,200.0,16.0,92.0));
            incr-=10;
 8005dd8:	602b      	str	r3, [r5, #0]
        break;
    
    default:
        break;
    }
 8005dda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            incr = 0;
 8005ddc:	602b      	str	r3, [r5, #0]
            currentIntro = INTRO_GAUGE_UP;
 8005dde:	2301      	movs	r3, #1
            currentIntro = INTRO_NONE;
 8005de0:	f886 3d80 	strb.w	r3, [r6, #3456]	@ 0xd80
 8005de4:	e7f9      	b.n	8005dda <_ZN19graphing_ScreenView9runIntrosEv+0x56>
        if((incr < 210))
 8005de6:	4d26      	ldr	r5, [pc, #152]	@ (8005e80 <_ZN19graphing_ScreenView9runIntrosEv+0xfc>)
 8005de8:	682b      	ldr	r3, [r5, #0]
 8005dea:	2bd1      	cmp	r3, #209	@ 0xd1
 8005dec:	dc19      	bgt.n	8005e22 <_ZN19graphing_ScreenView9runIntrosEv+0x9e>
            gauge1.setValue(map_float((float)incr,0.0,200.0,16.0,92.0));
 8005dee:	ee07 3a90 	vmov	s15, r3
 8005df2:	6802      	ldr	r2, [r0, #0]
 8005df4:	eef3 1a00 	vmov.f32	s3, #48	@ 0x41800000  16.0
 8005df8:	ed9f 2a22 	vldr	s4, [pc, #136]	@ 8005e84 <_ZN19graphing_ScreenView9runIntrosEv+0x100>
 8005dfc:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 8005e00:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8005e02:	ed9f 1a21 	vldr	s2, [pc, #132]	@ 8005e88 <_ZN19graphing_ScreenView9runIntrosEv+0x104>
 8005e06:	eddf 0a21 	vldr	s1, [pc, #132]	@ 8005e8c <_ZN19graphing_ScreenView9runIntrosEv+0x108>
 8005e0a:	4790      	blx	r2
 8005e0c:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8005e10:	f504 7074 	add.w	r0, r4, #976	@ 0x3d0
 8005e14:	ee17 1a90 	vmov	r1, s15
 8005e18:	f00f f974 	bl	8015104 <_ZN8touchgfx5Gauge8setValueEi>
            incr+=10;
 8005e1c:	682b      	ldr	r3, [r5, #0]
 8005e1e:	330a      	adds	r3, #10
 8005e20:	e7da      	b.n	8005dd8 <_ZN19graphing_ScreenView9runIntrosEv+0x54>
            incr = 200;
 8005e22:	23c8      	movs	r3, #200	@ 0xc8
 8005e24:	602b      	str	r3, [r5, #0]
            currentIntro = INTRO_GAUGE_DOWN;
 8005e26:	2302      	movs	r3, #2
 8005e28:	e7da      	b.n	8005de0 <_ZN19graphing_ScreenView9runIntrosEv+0x5c>
        if((incr > 0))
 8005e2a:	4d15      	ldr	r5, [pc, #84]	@ (8005e80 <_ZN19graphing_ScreenView9runIntrosEv+0xfc>)
            gauge1.setValue(map_float((float)incr,0.0,200.0,16.0,92.0));
 8005e2c:	eef3 1a00 	vmov.f32	s3, #48	@ 0x41800000  16.0
            gauge1.setValue(map_float((float)incr,0.0,200.0,16.0,92.0));
 8005e30:	6803      	ldr	r3, [r0, #0]
 8005e32:	f500 7774 	add.w	r7, r0, #976	@ 0x3d0
        if((incr > 0))
 8005e36:	682a      	ldr	r2, [r5, #0]
            gauge1.setValue(map_float((float)incr,0.0,200.0,16.0,92.0));
 8005e38:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
        if((incr > 0))
 8005e3a:	2a00      	cmp	r2, #0
            gauge1.setValue(map_float((float)incr,0.0,200.0,16.0,92.0));
 8005e3c:	ed9f 2a11 	vldr	s4, [pc, #68]	@ 8005e84 <_ZN19graphing_ScreenView9runIntrosEv+0x100>
 8005e40:	ed9f 1a11 	vldr	s2, [pc, #68]	@ 8005e88 <_ZN19graphing_ScreenView9runIntrosEv+0x104>
 8005e44:	eddf 0a11 	vldr	s1, [pc, #68]	@ 8005e8c <_ZN19graphing_ScreenView9runIntrosEv+0x108>
        if((incr > 0))
 8005e48:	dd0e      	ble.n	8005e68 <_ZN19graphing_ScreenView9runIntrosEv+0xe4>
            gauge1.setValue(map_float((float)incr,0.0,200.0,16.0,92.0));
 8005e4a:	ee07 2a90 	vmov	s15, r2
 8005e4e:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 8005e52:	4798      	blx	r3
 8005e54:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8005e58:	4638      	mov	r0, r7
 8005e5a:	ee17 1a90 	vmov	r1, s15
 8005e5e:	f00f f951 	bl	8015104 <_ZN8touchgfx5Gauge8setValueEi>
            incr-=10;
 8005e62:	682b      	ldr	r3, [r5, #0]
 8005e64:	3b0a      	subs	r3, #10
 8005e66:	e7b7      	b.n	8005dd8 <_ZN19graphing_ScreenView9runIntrosEv+0x54>
            gauge1.setValue(map_float(0.0,0.0,200.0,16.0,92.0));
 8005e68:	eeb0 0a60 	vmov.f32	s0, s1
 8005e6c:	4798      	blx	r3
 8005e6e:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8005e72:	4638      	mov	r0, r7
 8005e74:	ee17 1a90 	vmov	r1, s15
 8005e78:	f00f f944 	bl	8015104 <_ZN8touchgfx5Gauge8setValueEi>
            currentIntro = INTRO_NONE;
 8005e7c:	2303      	movs	r3, #3
 8005e7e:	e7af      	b.n	8005de0 <_ZN19graphing_ScreenView9runIntrosEv+0x5c>
 8005e80:	2400ee10 	.word	0x2400ee10
 8005e84:	42b80000 	.word	0x42b80000
 8005e88:	43480000 	.word	0x43480000
 8005e8c:	00000000 	.word	0x00000000

08005e90 <_ZN19graphing_ScreenView18sliderValueChangedEi>:
{
 8005e90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    uint16_t speed = value;
 8005e94:	b28e      	uxth	r6, r1
{
 8005e96:	4604      	mov	r4, r0
    Unicode::snprintf(mphBuffer, 10, "%d", (int)speed);
 8005e98:	4a21      	ldr	r2, [pc, #132]	@ (8005f20 <_ZN19graphing_ScreenView18sliderValueChangedEi+0x90>)
 8005e9a:	210a      	movs	r1, #10
 8005e9c:	4633      	mov	r3, r6
 8005e9e:	f500 6062 	add.w	r0, r0, #3616	@ 0xe20
 8005ea2:	f015 fc99 	bl	801b7d8 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    gauge1.setValue(map_float(speed,0.0,210.0,16.0,92.0)); 
 8005ea6:	ee07 6a90 	vmov	s15, r6
 8005eaa:	6823      	ldr	r3, [r4, #0]
 8005eac:	eef3 1a00 	vmov.f32	s3, #48	@ 0x41800000  16.0
 8005eb0:	ed9f 2a1c 	vldr	s4, [pc, #112]	@ 8005f24 <_ZN19graphing_ScreenView18sliderValueChangedEi+0x94>
 8005eb4:	eeb8 0a67 	vcvt.f32.u32	s0, s15
 8005eb8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005eba:	4620      	mov	r0, r4
 8005ebc:	ed9f 1a1a 	vldr	s2, [pc, #104]	@ 8005f28 <_ZN19graphing_ScreenView18sliderValueChangedEi+0x98>
 8005ec0:	f504 7774 	add.w	r7, r4, #976	@ 0x3d0
 8005ec4:	eddf 0a19 	vldr	s1, [pc, #100]	@ 8005f2c <_ZN19graphing_ScreenView18sliderValueChangedEi+0x9c>
    right_container1.setTempProgressValue(speed);
 8005ec8:	f604 18d8 	addw	r8, r4, #2520	@ 0x9d8
    gauge1.setValue(map_float(speed,0.0,210.0,16.0,92.0)); 
 8005ecc:	4798      	blx	r3
 8005ece:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8005ed2:	4638      	mov	r0, r7
 8005ed4:	ee17 1a90 	vmov	r1, s15
 8005ed8:	f00f f914 	bl	8015104 <_ZN8touchgfx5Gauge8setValueEi>
    battery_level.setValue(speed);
 8005edc:	4631      	mov	r1, r6
 8005ede:	f504 600c 	add.w	r0, r4, #2240	@ 0x8c0
 8005ee2:	f009 f93b 	bl	800f15c <_ZN8touchgfx13ImageProgress8setValueEi>
    right_container1.setTempProgressValue(speed);
 8005ee6:	4631      	mov	r1, r6
 8005ee8:	4640      	mov	r0, r8
 8005eea:	f000 f87d 	bl	8005fe8 <_ZN15right_container20setTempProgressValueEi>
    right_container1.setLeftGaugeValue(speed);
 8005eee:	4631      	mov	r1, r6
 8005ef0:	4640      	mov	r0, r8
 8005ef2:	f000 f884 	bl	8005ffe <_ZN15right_container17setLeftGaugeValueEi>
    if(speed < 80){
 8005ef6:	2e4f      	cmp	r6, #79	@ 0x4f
 8005ef8:	d90f      	bls.n	8005f1a <_ZN19graphing_ScreenView18sliderValueChangedEi+0x8a>
    else if(speed < 145){
 8005efa:	4b0d      	ldr	r3, [pc, #52]	@ (8005f30 <_ZN19graphing_ScreenView18sliderValueChangedEi+0xa0>)
 8005efc:	4a0d      	ldr	r2, [pc, #52]	@ (8005f34 <_ZN19graphing_ScreenView18sliderValueChangedEi+0xa4>)
 8005efe:	2e90      	cmp	r6, #144	@ 0x90
 8005f00:	bf88      	it	hi
 8005f02:	4613      	movhi	r3, r2
    mph.invalidate();
 8005f04:	f504 7061 	add.w	r0, r4, #900	@ 0x384
        color = newColor;
 8005f08:	f8c4 33b4 	str.w	r3, [r4, #948]	@ 0x3b4
 8005f0c:	f013 f885 	bl	801901a <_ZNK8touchgfx8Drawable10invalidateEv>
    gauge1.invalidate();
 8005f10:	4638      	mov	r0, r7
}
 8005f12:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    gauge1.invalidate();
 8005f16:	f013 b880 	b.w	801901a <_ZNK8touchgfx8Drawable10invalidateEv>
 8005f1a:	4b07      	ldr	r3, [pc, #28]	@ (8005f38 <_ZN19graphing_ScreenView18sliderValueChangedEi+0xa8>)
 8005f1c:	e7f2      	b.n	8005f04 <_ZN19graphing_ScreenView18sliderValueChangedEi+0x74>
 8005f1e:	bf00      	nop
 8005f20:	0802bdc8 	.word	0x0802bdc8
 8005f24:	42b80000 	.word	0x42b80000
 8005f28:	43520000 	.word	0x43520000
 8005f2c:	00000000 	.word	0x00000000
 8005f30:	ff007e00 	.word	0xff007e00
 8005f34:	ffc80000 	.word	0xffc80000
 8005f38:	ff666666 	.word	0xff666666

08005f3c <_ZN19graphing_ScreenView11updateClockEv>:
    if (tickCounter % 60 == 0)
 8005f3c:	f500 5140 	add.w	r1, r0, #12288	@ 0x3000
{
 8005f40:	223c      	movs	r2, #60	@ 0x3c
 8005f42:	f8d1 3d6c 	ldr.w	r3, [r1, #3436]	@ 0xd6c
 8005f46:	b430      	push	{r4, r5}
 8005f48:	fbb3 f4f2 	udiv	r4, r3, r2
 8005f4c:	fb02 3314 	mls	r3, r2, r4, r3
    if (tickCounter % 60 == 0)
 8005f50:	bb2b      	cbnz	r3, 8005f9e <_ZN19graphing_ScreenView11updateClockEv+0x62>
        if (++digitalSeconds >= 60){
 8005f52:	f8d1 5d7c 	ldr.w	r5, [r1, #3452]	@ 0xd7c
            if (++digitalMinutes >= 60)
 8005f56:	f8d1 4d78 	ldr.w	r4, [r1, #3448]	@ 0xd78
        if (++digitalSeconds >= 60){
 8005f5a:	3501      	adds	r5, #1
                if (++digitalHours >= 24)
 8005f5c:	f8d1 2d74 	ldr.w	r2, [r1, #3444]	@ 0xd74
        if (++digitalSeconds >= 60){
 8005f60:	2d3b      	cmp	r5, #59	@ 0x3b
 8005f62:	f8c1 5d7c 	str.w	r5, [r1, #3452]	@ 0xd7c
 8005f66:	dd06      	ble.n	8005f76 <_ZN19graphing_ScreenView11updateClockEv+0x3a>
            if (++digitalMinutes >= 60)
 8005f68:	3401      	adds	r4, #1
            digitalSeconds = 0;
 8005f6a:	f8c1 3d7c 	str.w	r3, [r1, #3452]	@ 0xd7c
            if (++digitalMinutes >= 60)
 8005f6e:	2c3b      	cmp	r4, #59	@ 0x3b
 8005f70:	dc0c      	bgt.n	8005f8c <_ZN19graphing_ScreenView11updateClockEv+0x50>
 8005f72:	f8c1 4d78 	str.w	r4, [r1, #3448]	@ 0xd78
        digitalClock1.setTime24Hour(digitalHours, digitalMinutes, digitalSeconds);
 8005f76:	f891 3d7c 	ldrb.w	r3, [r1, #3452]	@ 0xd7c
 8005f7a:	f600 0028 	addw	r0, r0, #2088	@ 0x828
 8005f7e:	f891 2d78 	ldrb.w	r2, [r1, #3448]	@ 0xd78
 8005f82:	f891 1d74 	ldrb.w	r1, [r1, #3444]	@ 0xd74
}
 8005f86:	bc30      	pop	{r4, r5}
        digitalClock1.setTime24Hour(digitalHours, digitalMinutes, digitalSeconds);
 8005f88:	f009 bdc1 	b.w	800fb0e <_ZN8touchgfx13AbstractClock13setTime24HourEhhh>
                if (++digitalHours >= 24)
 8005f8c:	3201      	adds	r2, #1
                digitalMinutes = 0;
 8005f8e:	f8c1 3d78 	str.w	r3, [r1, #3448]	@ 0xd78
                if (++digitalHours >= 24)
 8005f92:	2a17      	cmp	r2, #23
 8005f94:	bfd8      	it	le
 8005f96:	4613      	movle	r3, r2
 8005f98:	f8c1 3d74 	str.w	r3, [r1, #3444]	@ 0xd74
 8005f9c:	e7eb      	b.n	8005f76 <_ZN19graphing_ScreenView11updateClockEv+0x3a>
}
 8005f9e:	bc30      	pop	{r4, r5}
 8005fa0:	4770      	bx	lr
	...

08005fa4 <_ZN15right_containerD1Ev>:
 8005fa4:	4b03      	ldr	r3, [pc, #12]	@ (8005fb4 <_ZN15right_containerD1Ev+0x10>)
 8005fa6:	b510      	push	{r4, lr}
 8005fa8:	4604      	mov	r4, r0
 8005faa:	6003      	str	r3, [r0, #0]
 8005fac:	f7ff fdac 	bl	8005b08 <_ZN19right_containerBaseD1Ev>
 8005fb0:	4620      	mov	r0, r4
 8005fb2:	bd10      	pop	{r4, pc}
 8005fb4:	0802be1c 	.word	0x0802be1c

08005fb8 <_ZN15right_containerD0Ev>:
 8005fb8:	b510      	push	{r4, lr}
 8005fba:	4604      	mov	r4, r0
 8005fbc:	f7ff fff2 	bl	8005fa4 <_ZN15right_containerD1Ev>
 8005fc0:	f44f 6189 	mov.w	r1, #1096	@ 0x448
 8005fc4:	4620      	mov	r0, r4
 8005fc6:	f021 fa62 	bl	802748e <_ZdlPvj>
 8005fca:	4620      	mov	r0, r4
 8005fcc:	bd10      	pop	{r4, pc}
	...

08005fd0 <_ZN15right_containerC1Ev>:
#include <gui/containers/right_container.hpp>

right_container::right_container()
 8005fd0:	b510      	push	{r4, lr}
 8005fd2:	4604      	mov	r4, r0
 8005fd4:	f7ff fc2a 	bl	800582c <_ZN19right_containerBaseC1Ev>
 8005fd8:	4b01      	ldr	r3, [pc, #4]	@ (8005fe0 <_ZN15right_containerC1Ev+0x10>)
{

}
 8005fda:	4620      	mov	r0, r4
right_container::right_container()
 8005fdc:	6023      	str	r3, [r4, #0]
}
 8005fde:	bd10      	pop	{r4, pc}
 8005fe0:	0802be1c 	.word	0x0802be1c

08005fe4 <_ZN15right_container10initializeEv>:

void right_container::initialize()
{
    right_containerBase::initialize();
 8005fe4:	f7ff bba5 	b.w	8005732 <_ZN19right_containerBase10initializeEv>

08005fe8 <_ZN15right_container20setTempProgressValueEi>:
}

void right_container::setTempProgressValue(int value) {
 8005fe8:	b510      	push	{r4, lr}
        temp_progress.setValue(value);
 8005fea:	f500 74a8 	add.w	r4, r0, #336	@ 0x150
 8005fee:	4620      	mov	r0, r4
 8005ff0:	f009 f8b4 	bl	800f15c <_ZN8touchgfx13ImageProgress8setValueEi>
        temp_progress.invalidate();
 8005ff4:	4620      	mov	r0, r4
    }
 8005ff6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        temp_progress.invalidate();
 8005ffa:	f013 b80e 	b.w	801901a <_ZNK8touchgfx8Drawable10invalidateEv>

08005ffe <_ZN15right_container17setLeftGaugeValueEi>:

void right_container::setLeftGaugeValue(int value) {
 8005ffe:	b510      	push	{r4, lr}
    gauge_left_progress.setValue(value);
 8006000:	f500 7431 	add.w	r4, r0, #708	@ 0x2c4
 8006004:	4620      	mov	r0, r4
 8006006:	f009 f8a9 	bl	800f15c <_ZN8touchgfx13ImageProgress8setValueEi>
    gauge_left_progress.invalidate();
 800600a:	4620      	mov	r0, r4
}
 800600c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    gauge_left_progress.invalidate();
 8006010:	f013 b803 	b.w	801901a <_ZNK8touchgfx8Drawable10invalidateEv>

08006014 <_ZN15right_container8setAlphaEh>:

void right_container::setAlpha(uint8_t alpha) {
 8006014:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006016:	4604      	mov	r4, r0
    temp_progress.setAlpha(alpha);
 8006018:	f500 77a8 	add.w	r7, r0, #336	@ 0x150
void right_container::setAlpha(uint8_t alpha) {
 800601c:	460d      	mov	r5, r1
    temp_text_area.setAlpha(alpha);
    gauge_left_progress.setAlpha(alpha);
 800601e:	f504 7631 	add.w	r6, r4, #708	@ 0x2c4
    temp_progress.setAlpha(alpha);
 8006022:	4638      	mov	r0, r7
 8006024:	f009 f87a 	bl	800f11c <_ZN8touchgfx13ImageProgress8setAlphaEh>
    gauge_left_progress.setAlpha(alpha);
 8006028:	4629      	mov	r1, r5
 800602a:	4630      	mov	r0, r6
        alpha = newAlpha;
 800602c:	f884 52ae 	strb.w	r5, [r4, #686]	@ 0x2ae
 8006030:	f009 f874 	bl	800f11c <_ZN8touchgfx13ImageProgress8setAlphaEh>
    temp_progress.invalidate();
 8006034:	4638      	mov	r0, r7
 8006036:	f012 fff0 	bl	801901a <_ZNK8touchgfx8Drawable10invalidateEv>
    temp_text_area.invalidate();
 800603a:	f504 701e 	add.w	r0, r4, #632	@ 0x278
 800603e:	f012 ffec 	bl	801901a <_ZNK8touchgfx8Drawable10invalidateEv>
    gauge_left_progress.invalidate();
 8006042:	4630      	mov	r0, r6
}
 8006044:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    gauge_left_progress.invalidate();
 8006048:	f012 bfe7 	b.w	801901a <_ZNK8touchgfx8Drawable10invalidateEv>

0800604c <FT6X06_GetCapabilities>:
{
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  /* Store component's capabilities */
  Capabilities->MultiTouch = 1;
 800604c:	2301      	movs	r3, #1
  Capabilities->Gesture    = 0;  /* Gesture feature is currently not activated on FW chipset */
  Capabilities->MaxTouch   = FT6X06_MAX_NB_TOUCH;
  Capabilities->MaxXl      = FT6X06_MAX_X_LENGTH;
  Capabilities->MaxYl      = FT6X06_MAX_Y_LENGTH;
 800604e:	f44f 7248 	mov.w	r2, #800	@ 0x320
  
  return FT6X06_OK;
}
 8006052:	2000      	movs	r0, #0
  Capabilities->MultiTouch = 1;
 8006054:	800b      	strh	r3, [r1, #0]
  Capabilities->MaxTouch   = FT6X06_MAX_NB_TOUCH;
 8006056:	2302      	movs	r3, #2
 8006058:	708b      	strb	r3, [r1, #2]
  Capabilities->MaxYl      = FT6X06_MAX_Y_LENGTH;
 800605a:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 800605e:	e9c1 2301 	strd	r2, r3, [r1, #4]
}
 8006062:	4770      	bx	lr

08006064 <FT6X06_DeInit>:
  * @param  pObj Component object pointer
  * @retval Component status
  */
int32_t FT6X06_DeInit(FT6X06_Object_t *pObj)
{
  if(pObj->IsInitialized == 1U)
 8006064:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
 8006068:	2b01      	cmp	r3, #1
  {
    pObj->IsInitialized = 0;
 800606a:	bf04      	itt	eq
 800606c:	2300      	moveq	r3, #0
 800606e:	f880 3024 	strbeq.w	r3, [r0, #36]	@ 0x24
  }
  
  return FT6X06_OK;
}
 8006072:	2000      	movs	r0, #0
 8006074:	4770      	bx	lr

08006076 <FT6X06_ITStatus>:
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  /* Always return FT6X06_OK as feature not supported by FT6X06 */
  return FT6X06_OK;
}
 8006076:	2000      	movs	r0, #0
 8006078:	4770      	bx	lr

0800607a <ReadRegWrap>:
  * @param  pData The target register value to be read
  * @param  Length buffer size to be read
  * @retval Component status.
  */
static int32_t ReadRegWrap(void *handle, uint8_t Reg, uint8_t* pData, uint16_t Length)
{
 800607a:	b410      	push	{r4}
  FT6X06_Object_t *pObj = (FT6X06_Object_t *)handle;

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 800607c:	6904      	ldr	r4, [r0, #16]
 800607e:	8900      	ldrh	r0, [r0, #8]
 8006080:	46a4      	mov	ip, r4
}
 8006082:	f85d 4b04 	ldr.w	r4, [sp], #4
  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8006086:	4760      	bx	ip

08006088 <WriteRegWrap>:
  * @param  pData The target register value to be written
  * @param  Length buffer size to be written
  * @retval Component status.
  */
static int32_t WriteRegWrap(void *handle, uint8_t Reg, uint8_t* pData, uint16_t Length)
{
 8006088:	b410      	push	{r4}
  FT6X06_Object_t *pObj = (FT6X06_Object_t *)handle;

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 800608a:	68c4      	ldr	r4, [r0, #12]
 800608c:	8900      	ldrh	r0, [r0, #8]
 800608e:	46a4      	mov	ip, r4
}
 8006090:	f85d 4b04 	ldr.w	r4, [sp], #4
  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8006094:	4760      	bx	ip

08006096 <FT6X06_GestureConfig>:
{
 8006096:	b570      	push	{r4, r5, r6, lr}
  ret = ft6x06_radian_value(&pObj->Ctx, (uint8_t)GestureInit->Radian);
 8006098:	f100 0518 	add.w	r5, r0, #24
{
 800609c:	460e      	mov	r6, r1
  ret = ft6x06_radian_value(&pObj->Ctx, (uint8_t)GestureInit->Radian);
 800609e:	7809      	ldrb	r1, [r1, #0]
 80060a0:	4628      	mov	r0, r5
 80060a2:	f000 f911 	bl	80062c8 <ft6x06_radian_value>
 80060a6:	4604      	mov	r4, r0
  ret += ft6x06_offset_left_right(&pObj->Ctx, (uint8_t)GestureInit->OffsetLeftRight);
 80060a8:	7931      	ldrb	r1, [r6, #4]
 80060aa:	4628      	mov	r0, r5
 80060ac:	f000 f918 	bl	80062e0 <ft6x06_offset_left_right>
 80060b0:	4404      	add	r4, r0
  ret += ft6x06_offset_up_down(&pObj->Ctx, (uint8_t)GestureInit->OffsetUpDown);
 80060b2:	7a31      	ldrb	r1, [r6, #8]
 80060b4:	4628      	mov	r0, r5
 80060b6:	f000 f91f 	bl	80062f8 <ft6x06_offset_up_down>
 80060ba:	4404      	add	r4, r0
  ret += ft6x06_disatnce_left_right(&pObj->Ctx, (uint8_t)GestureInit->DistanceLeftRight);
 80060bc:	7b31      	ldrb	r1, [r6, #12]
 80060be:	4628      	mov	r0, r5
 80060c0:	f000 f926 	bl	8006310 <ft6x06_disatnce_left_right>
 80060c4:	4404      	add	r4, r0
  ret += ft6x06_distance_up_down(&pObj->Ctx, (uint8_t)GestureInit->DistanceUpDown);
 80060c6:	7c31      	ldrb	r1, [r6, #16]
 80060c8:	4628      	mov	r0, r5
 80060ca:	f000 f92d 	bl	8006328 <ft6x06_distance_up_down>
 80060ce:	4404      	add	r4, r0
  ret += ft6x06_distance_zoom(&pObj->Ctx, (uint8_t)GestureInit->DistanceZoom);
 80060d0:	7d31      	ldrb	r1, [r6, #20]
 80060d2:	4628      	mov	r0, r5
 80060d4:	f000 f934 	bl	8006340 <ft6x06_distance_zoom>
  if(ret != FT6X06_OK)
 80060d8:	42c4      	cmn	r4, r0
}
 80060da:	bf14      	ite	ne
 80060dc:	f04f 30ff 	movne.w	r0, #4294967295
 80060e0:	2000      	moveq	r0, #0
 80060e2:	bd70      	pop	{r4, r5, r6, pc}

080060e4 <FT6X06_ReadID>:
{
 80060e4:	b513      	push	{r0, r1, r4, lr}
 80060e6:	460c      	mov	r4, r1
  ret = ft6x06_chip_id(&pObj->Ctx, &ft6x06_id);
 80060e8:	3018      	adds	r0, #24
 80060ea:	f10d 0107 	add.w	r1, sp, #7
 80060ee:	f000 f93f 	bl	8006370 <ft6x06_chip_id>
  *Id = (uint32_t) ft6x06_id;
 80060f2:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80060f6:	6023      	str	r3, [r4, #0]
}
 80060f8:	b002      	add	sp, #8
 80060fa:	bd10      	pop	{r4, pc}

080060fc <FT6X06_GetState>:
{
 80060fc:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if(ft6x06_td_status(&pObj->Ctx, &nb_touch) != FT6X06_OK)
 80060fe:	f100 0518 	add.w	r5, r0, #24
{
 8006102:	460c      	mov	r4, r1
  if(ft6x06_td_status(&pObj->Ctx, &nb_touch) != FT6X06_OK)
 8006104:	a901      	add	r1, sp, #4
 8006106:	4628      	mov	r0, r5
 8006108:	f000 f8d1 	bl	80062ae <ft6x06_td_status>
 800610c:	bb08      	cbnz	r0, 8006152 <FT6X06_GetState+0x56>
    if(nb_touch > FT6X06_MAX_NB_TOUCH)
 800610e:	f89d 3004 	ldrb.w	r3, [sp, #4]
      ret = (int32_t)nb_touch;
 8006112:	2b02      	cmp	r3, #2
 8006114:	bf98      	it	ls
 8006116:	4618      	movls	r0, r3
  if(ft6x06_read_reg(&pObj->Ctx, FT6X06_P1_XH_REG, data, (uint16_t)sizeof(data)) != FT6X06_OK)
 8006118:	2304      	movs	r3, #4
  State->TouchDetected = (uint32_t)FT6X06_DetectTouch(pObj);
 800611a:	6020      	str	r0, [r4, #0]
  if(ft6x06_read_reg(&pObj->Ctx, FT6X06_P1_XH_REG, data, (uint16_t)sizeof(data)) != FT6X06_OK)
 800611c:	2103      	movs	r1, #3
 800611e:	4628      	mov	r0, r5
 8006120:	eb0d 0203 	add.w	r2, sp, r3
 8006124:	f000 f8b0 	bl	8006288 <ft6x06_read_reg>
 8006128:	b9b0      	cbnz	r0, 8006158 <FT6X06_GetState+0x5c>
    State->TouchX = (((uint32_t)data[0] & FT6X06_P1_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[1] & FT6X06_P1_XL_TP_BIT_MASK);
 800612a:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800612e:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8006132:	021b      	lsls	r3, r3, #8
 8006134:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8006138:	4313      	orrs	r3, r2
    State->TouchY = (((uint32_t)data[2] & FT6X06_P1_YH_TP_BIT_MASK) << 8) | ((uint32_t)data[3] & FT6X06_P1_YL_TP_BIT_MASK);
 800613a:	f89d 2007 	ldrb.w	r2, [sp, #7]
    State->TouchX = (((uint32_t)data[0] & FT6X06_P1_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[1] & FT6X06_P1_XL_TP_BIT_MASK);
 800613e:	6063      	str	r3, [r4, #4]
    State->TouchY = (((uint32_t)data[2] & FT6X06_P1_YH_TP_BIT_MASK) << 8) | ((uint32_t)data[3] & FT6X06_P1_YL_TP_BIT_MASK);
 8006140:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8006144:	021b      	lsls	r3, r3, #8
 8006146:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 800614a:	4313      	orrs	r3, r2
 800614c:	60a3      	str	r3, [r4, #8]
}
 800614e:	b003      	add	sp, #12
 8006150:	bd30      	pop	{r4, r5, pc}
    ret = FT6X06_ERROR;
 8006152:	f04f 30ff 	mov.w	r0, #4294967295
 8006156:	e7df      	b.n	8006118 <FT6X06_GetState+0x1c>
    ret = FT6X06_ERROR;
 8006158:	f04f 30ff 	mov.w	r0, #4294967295
  return ret;
 800615c:	e7f7      	b.n	800614e <FT6X06_GetState+0x52>

0800615e <FT6X06_GetGesture>:
  return ft6x06_gest_id(&pObj->Ctx, GestureId);
 800615e:	3018      	adds	r0, #24
 8006160:	f000 b8a0 	b.w	80062a4 <ft6x06_gest_id>

08006164 <FT6X06_EnableIT>:
  return ft6x06_g_mode(&pObj->Ctx, FT6X06_G_MODE_INTERRUPT_TRIGGER);
 8006164:	2101      	movs	r1, #1
 8006166:	3018      	adds	r0, #24
 8006168:	f000 b8f6 	b.w	8006358 <ft6x06_g_mode>

0800616c <FT6X06_DisableIT>:
  return ft6x06_g_mode(&pObj->Ctx, FT6X06_G_MODE_INTERRUPT_POLLING);
 800616c:	2100      	movs	r1, #0
 800616e:	3018      	adds	r0, #24
 8006170:	f000 b8f2 	b.w	8006358 <ft6x06_g_mode>

08006174 <FT6X06_Init>:
{
 8006174:	b510      	push	{r4, lr}
  if(pObj->IsInitialized == 0U)
 8006176:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
{
 800617a:	4604      	mov	r4, r0
  if(pObj->IsInitialized == 0U)
 800617c:	b96b      	cbnz	r3, 800619a <FT6X06_Init+0x26>
    pObj->IO.Init();
 800617e:	6803      	ldr	r3, [r0, #0]
 8006180:	4798      	blx	r3
    ret += FT6X06_DisableIT(pObj);
 8006182:	4620      	mov	r0, r4
 8006184:	f7ff fff2 	bl	800616c <FT6X06_DisableIT>
  if(ret != FT6X06_OK)
 8006188:	3800      	subs	r0, #0
    pObj->IsInitialized = 1;
 800618a:	f04f 0301 	mov.w	r3, #1
  if(ret != FT6X06_OK)
 800618e:	bf18      	it	ne
 8006190:	2001      	movne	r0, #1
    pObj->IsInitialized = 1;
 8006192:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
  if(ret != FT6X06_OK)
 8006196:	4240      	negs	r0, r0
}
 8006198:	bd10      	pop	{r4, pc}
    ret += FT6X06_DisableIT(pObj);
 800619a:	2000      	movs	r0, #0
  return ret;
 800619c:	e7fc      	b.n	8006198 <FT6X06_Init+0x24>

0800619e <FT6X06_ClearIT>:
int32_t FT6X06_ClearIT(FT6X06_Object_t *pObj)
 800619e:	2000      	movs	r0, #0
 80061a0:	4770      	bx	lr

080061a2 <FT6X06_GetMultiTouchState>:
{
 80061a2:	b530      	push	{r4, r5, lr}
  if(ft6x06_td_status(&pObj->Ctx, &nb_touch) != FT6X06_OK)
 80061a4:	f100 0518 	add.w	r5, r0, #24
{
 80061a8:	b085      	sub	sp, #20
 80061aa:	460c      	mov	r4, r1
  if(ft6x06_td_status(&pObj->Ctx, &nb_touch) != FT6X06_OK)
 80061ac:	4628      	mov	r0, r5
 80061ae:	a901      	add	r1, sp, #4
 80061b0:	f000 f87d 	bl	80062ae <ft6x06_td_status>
 80061b4:	2800      	cmp	r0, #0
 80061b6:	d145      	bne.n	8006244 <FT6X06_GetMultiTouchState+0xa2>
    if(nb_touch > FT6X06_MAX_NB_TOUCH)
 80061b8:	f89d 3004 	ldrb.w	r3, [sp, #4]
      ret = (int32_t)nb_touch;
 80061bc:	2b02      	cmp	r3, #2
 80061be:	bf98      	it	ls
 80061c0:	4618      	movls	r0, r3
  State->TouchDetected = (uint32_t)FT6X06_DetectTouch(pObj);
 80061c2:	6020      	str	r0, [r4, #0]
  if(ft6x06_read_reg(&pObj->Ctx, FT6X06_P1_XH_REG, data, (uint16_t)sizeof(data)) != FT6X06_OK)
 80061c4:	230c      	movs	r3, #12
 80061c6:	aa01      	add	r2, sp, #4
 80061c8:	2103      	movs	r1, #3
 80061ca:	4628      	mov	r0, r5
 80061cc:	f000 f85c 	bl	8006288 <ft6x06_read_reg>
 80061d0:	2800      	cmp	r0, #0
 80061d2:	d13a      	bne.n	800624a <FT6X06_GetMultiTouchState+0xa8>
    State->TouchX[0] = (((uint32_t)data[0] & FT6X06_P1_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[1] & FT6X06_P1_XL_TP_BIT_MASK);
 80061d4:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80061d8:	f89d 1005 	ldrb.w	r1, [sp, #5]
 80061dc:	0213      	lsls	r3, r2, #8
    State->TouchEvent[0] = (((uint32_t)data[0] & FT6X06_P1_XH_EF_BIT_MASK) >> FT6X06_P1_XH_EF_BIT_POSITION);
 80061de:	0992      	lsrs	r2, r2, #6
    State->TouchX[0] = (((uint32_t)data[0] & FT6X06_P1_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[1] & FT6X06_P1_XL_TP_BIT_MASK);
 80061e0:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
    State->TouchEvent[0] = (((uint32_t)data[0] & FT6X06_P1_XH_EF_BIT_MASK) >> FT6X06_P1_XH_EF_BIT_POSITION);
 80061e4:	61e2      	str	r2, [r4, #28]
    State->TouchX[0] = (((uint32_t)data[0] & FT6X06_P1_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[1] & FT6X06_P1_XL_TP_BIT_MASK);
 80061e6:	430b      	orrs	r3, r1
    State->TouchY[0] = (((uint32_t)data[2] & FT6X06_P1_YH_TP_BIT_MASK) << 8) | ((uint32_t)data[3] & FT6X06_P1_YL_TP_BIT_MASK);
 80061e8:	f89d 1007 	ldrb.w	r1, [sp, #7]
    State->TouchX[1] = (((uint32_t)data[6] & FT6X06_P2_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[7] & FT6X06_P2_XL_TP_BIT_MASK);
 80061ec:	f89d 200a 	ldrb.w	r2, [sp, #10]
    State->TouchX[0] = (((uint32_t)data[0] & FT6X06_P1_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[1] & FT6X06_P1_XL_TP_BIT_MASK);
 80061f0:	6063      	str	r3, [r4, #4]
    State->TouchY[0] = (((uint32_t)data[2] & FT6X06_P1_YH_TP_BIT_MASK) << 8) | ((uint32_t)data[3] & FT6X06_P1_YL_TP_BIT_MASK);
 80061f2:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80061f6:	021b      	lsls	r3, r3, #8
 80061f8:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80061fc:	430b      	orrs	r3, r1
    State->TouchX[1] = (((uint32_t)data[6] & FT6X06_P2_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[7] & FT6X06_P2_XL_TP_BIT_MASK);
 80061fe:	f89d 100b 	ldrb.w	r1, [sp, #11]
    State->TouchY[0] = (((uint32_t)data[2] & FT6X06_P1_YH_TP_BIT_MASK) << 8) | ((uint32_t)data[3] & FT6X06_P1_YL_TP_BIT_MASK);
 8006202:	60e3      	str	r3, [r4, #12]
    State->TouchWeight[0] = ((uint32_t)data[4] & FT6X06_P1_WEIGHT_BIT_MASK);
 8006204:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8006208:	6163      	str	r3, [r4, #20]
    State->TouchArea[0] = ((uint32_t)data[5] & FT6X06_P1_MISC_BIT_MASK) >> FT6X06_P1_MISC_BIT_POSITION;
 800620a:	f89d 3009 	ldrb.w	r3, [sp, #9]
 800620e:	091b      	lsrs	r3, r3, #4
 8006210:	6263      	str	r3, [r4, #36]	@ 0x24
    State->TouchX[1] = (((uint32_t)data[6] & FT6X06_P2_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[7] & FT6X06_P2_XL_TP_BIT_MASK);
 8006212:	0213      	lsls	r3, r2, #8
    State->TouchEvent[1] = (((uint32_t)data[6] & FT6X06_P2_XH_EF_BIT_MASK) >> FT6X06_P2_XH_EF_BIT_POSITION);
 8006214:	0992      	lsrs	r2, r2, #6
    State->TouchX[1] = (((uint32_t)data[6] & FT6X06_P2_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[7] & FT6X06_P2_XL_TP_BIT_MASK);
 8006216:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
    State->TouchEvent[1] = (((uint32_t)data[6] & FT6X06_P2_XH_EF_BIT_MASK) >> FT6X06_P2_XH_EF_BIT_POSITION);
 800621a:	6222      	str	r2, [r4, #32]
    State->TouchX[1] = (((uint32_t)data[6] & FT6X06_P2_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[7] & FT6X06_P2_XL_TP_BIT_MASK);
 800621c:	430b      	orrs	r3, r1
    State->TouchY[1] = (((uint32_t)data[8] & FT6X06_P2_YH_TP_BIT_MASK) << 8) | ((uint32_t)data[9] & FT6X06_P2_YL_TP_BIT_MASK);
 800621e:	f89d 100d 	ldrb.w	r1, [sp, #13]
    State->TouchX[1] = (((uint32_t)data[6] & FT6X06_P2_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[7] & FT6X06_P2_XL_TP_BIT_MASK);
 8006222:	60a3      	str	r3, [r4, #8]
    State->TouchY[1] = (((uint32_t)data[8] & FT6X06_P2_YH_TP_BIT_MASK) << 8) | ((uint32_t)data[9] & FT6X06_P2_YL_TP_BIT_MASK);
 8006224:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8006228:	021b      	lsls	r3, r3, #8
 800622a:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 800622e:	430b      	orrs	r3, r1
 8006230:	6123      	str	r3, [r4, #16]
    State->TouchWeight[1] = ((uint32_t)data[10] & FT6X06_P2_WEIGHT_BIT_MASK);
 8006232:	f89d 300e 	ldrb.w	r3, [sp, #14]
 8006236:	61a3      	str	r3, [r4, #24]
    State->TouchArea[1] = ((uint32_t)data[11] & FT6X06_P2_MISC_BIT_MASK) >> FT6X06_P2_MISC_BIT_POSITION;
 8006238:	f89d 300f 	ldrb.w	r3, [sp, #15]
 800623c:	091b      	lsrs	r3, r3, #4
 800623e:	62a3      	str	r3, [r4, #40]	@ 0x28
}
 8006240:	b005      	add	sp, #20
 8006242:	bd30      	pop	{r4, r5, pc}
    ret = FT6X06_ERROR;
 8006244:	f04f 30ff 	mov.w	r0, #4294967295
 8006248:	e7bb      	b.n	80061c2 <FT6X06_GetMultiTouchState+0x20>
    ret = FT6X06_ERROR;
 800624a:	f04f 30ff 	mov.w	r0, #4294967295
  return ret;  
 800624e:	e7f7      	b.n	8006240 <FT6X06_GetMultiTouchState+0x9e>

08006250 <FT6X06_RegisterBusIO>:
  if (pObj == NULL)
 8006250:	b190      	cbz	r0, 8006278 <FT6X06_RegisterBusIO+0x28>
    pObj->IO.DeInit    = pIO->DeInit;
 8006252:	684a      	ldr	r2, [r1, #4]
    pObj->IO.Init      = pIO->Init;
 8006254:	680b      	ldr	r3, [r1, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8006256:	6042      	str	r2, [r0, #4]
    pObj->IO.Address   = pIO->Address;
 8006258:	890a      	ldrh	r2, [r1, #8]
    pObj->IO.Init      = pIO->Init;
 800625a:	6003      	str	r3, [r0, #0]
    pObj->IO.Address   = pIO->Address;
 800625c:	8102      	strh	r2, [r0, #8]
    pObj->IO.WriteReg  = pIO->WriteReg;
 800625e:	68ca      	ldr	r2, [r1, #12]
 8006260:	60c2      	str	r2, [r0, #12]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8006262:	690a      	ldr	r2, [r1, #16]
 8006264:	6102      	str	r2, [r0, #16]
    pObj->IO.GetTick   = pIO->GetTick;
 8006266:	694a      	ldr	r2, [r1, #20]
    pObj->Ctx.handle   = pObj;
 8006268:	6200      	str	r0, [r0, #32]
    pObj->IO.GetTick   = pIO->GetTick;
 800626a:	6142      	str	r2, [r0, #20]
    pObj->Ctx.ReadReg  = ReadRegWrap;
 800626c:	4a04      	ldr	r2, [pc, #16]	@ (8006280 <FT6X06_RegisterBusIO+0x30>)
 800626e:	61c2      	str	r2, [r0, #28]
    pObj->Ctx.WriteReg = WriteRegWrap;
 8006270:	4a04      	ldr	r2, [pc, #16]	@ (8006284 <FT6X06_RegisterBusIO+0x34>)
 8006272:	6182      	str	r2, [r0, #24]
    if(pObj->IO.Init != NULL)
 8006274:	b103      	cbz	r3, 8006278 <FT6X06_RegisterBusIO+0x28>
      ret = pObj->IO.Init();
 8006276:	4718      	bx	r3
}
 8006278:	f04f 30ff 	mov.w	r0, #4294967295
 800627c:	4770      	bx	lr
 800627e:	bf00      	nop
 8006280:	0800607b 	.word	0x0800607b
 8006284:	08006089 	.word	0x08006089

08006288 <ft6x06_read_reg>:
*                 I2C or SPI reading functions
* Input         : Register Address, length of buffer
* Output        : pdata Read
*******************************************************************************/
int32_t ft6x06_read_reg(ft6x06_ctx_t *ctx, uint8_t reg, uint8_t* pdata, uint16_t length)
{
 8006288:	b410      	push	{r4}
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
 800628a:	e9d0 4001 	ldrd	r4, r0, [r0, #4]
 800628e:	46a4      	mov	ip, r4
}
 8006290:	f85d 4b04 	ldr.w	r4, [sp], #4
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
 8006294:	4760      	bx	ip

08006296 <ft6x06_write_reg>:
*                 I2C or SPI writing function
* Input         : Register Address, pdata to be written, length of buffer
* Output        : None
*******************************************************************************/
int32_t ft6x06_write_reg(ft6x06_ctx_t *ctx, uint8_t reg, uint8_t *pdata, uint16_t length)
{
 8006296:	b410      	push	{r4}
  return ctx->WriteReg(ctx->handle, reg, pdata, length);
 8006298:	6804      	ldr	r4, [r0, #0]
 800629a:	6880      	ldr	r0, [r0, #8]
 800629c:	46a4      	mov	ip, r4
}
 800629e:	f85d 4b04 	ldr.w	r4, [sp], #4
  return ctx->WriteReg(ctx->handle, reg, pdata, length);
 80062a2:	4760      	bx	ip

080062a4 <ft6x06_gest_id>:
* Output         : Status of GEST_ID register
* Return         : Status [FT6X06_ERROR, FT6X06_OK]
*******************************************************************************/
int32_t  ft6x06_gest_id(ft6x06_ctx_t *ctx, uint8_t *value)
{
  return ft6x06_read_reg(ctx, FT6X06_GEST_ID_REG, (uint8_t *)value, 1);
 80062a4:	2301      	movs	r3, #1
{
 80062a6:	460a      	mov	r2, r1
  return ft6x06_read_reg(ctx, FT6X06_GEST_ID_REG, (uint8_t *)value, 1);
 80062a8:	4619      	mov	r1, r3
 80062aa:	f7ff bfed 	b.w	8006288 <ft6x06_read_reg>

080062ae <ft6x06_td_status>:
* Input          : Pointer to uint8_t
* Output         : Status of TD_STATUS register
* Return         : Status [FT6X06_ERROR, FT6X06_OK]
*******************************************************************************/
int32_t  ft6x06_td_status(ft6x06_ctx_t *ctx, uint8_t *value)
{
 80062ae:	b510      	push	{r4, lr}
  int32_t ret;
  
  ret = ft6x06_read_reg(ctx, FT6X06_TD_STAT_REG, (uint8_t *)value, 1);
 80062b0:	460a      	mov	r2, r1
{
 80062b2:	460c      	mov	r4, r1
  ret = ft6x06_read_reg(ctx, FT6X06_TD_STAT_REG, (uint8_t *)value, 1);
 80062b4:	2301      	movs	r3, #1
 80062b6:	2102      	movs	r1, #2
 80062b8:	f7ff ffe6 	bl	8006288 <ft6x06_read_reg>
  
  if(ret == 0)
 80062bc:	b918      	cbnz	r0, 80062c6 <ft6x06_td_status+0x18>
  {
    *value &= FT6X06_TD_STATUS_BIT_MASK; 
 80062be:	7823      	ldrb	r3, [r4, #0]
 80062c0:	f003 030f 	and.w	r3, r3, #15
 80062c4:	7023      	strb	r3, [r4, #0]
    *value = *value >> FT6X06_TD_STATUS_BIT_POSITION; 
  }
  
  return ret;
}
 80062c6:	bd10      	pop	{r4, pc}

080062c8 <ft6x06_radian_value>:
* Input          : uint8_t
* Output         : None
* Return         : Status [FT6X06_ERROR, FT6X06_OK]
*******************************************************************************/
int32_t  ft6x06_radian_value(ft6x06_ctx_t *ctx, uint8_t value)
{
 80062c8:	b507      	push	{r0, r1, r2, lr}
  return ft6x06_write_reg(ctx, FT6X06_RADIAN_VALUE_REG, &value, 1);
 80062ca:	2301      	movs	r3, #1
{
 80062cc:	f88d 1007 	strb.w	r1, [sp, #7]
  return ft6x06_write_reg(ctx, FT6X06_RADIAN_VALUE_REG, &value, 1);
 80062d0:	f10d 0207 	add.w	r2, sp, #7
 80062d4:	2191      	movs	r1, #145	@ 0x91
 80062d6:	f7ff ffde 	bl	8006296 <ft6x06_write_reg>
}
 80062da:	b003      	add	sp, #12
 80062dc:	f85d fb04 	ldr.w	pc, [sp], #4

080062e0 <ft6x06_offset_left_right>:
* Input          : uint8_t
* Output         : None
* Return         : Status [FT6X06_ERROR, FT6X06_OK]
*******************************************************************************/
int32_t  ft6x06_offset_left_right(ft6x06_ctx_t *ctx, uint8_t value)
{
 80062e0:	b507      	push	{r0, r1, r2, lr}
  return ft6x06_write_reg(ctx, FT6X06_OFFSET_LR_REG, &value, 1);
 80062e2:	2301      	movs	r3, #1
{
 80062e4:	f88d 1007 	strb.w	r1, [sp, #7]
  return ft6x06_write_reg(ctx, FT6X06_OFFSET_LR_REG, &value, 1);
 80062e8:	f10d 0207 	add.w	r2, sp, #7
 80062ec:	2192      	movs	r1, #146	@ 0x92
 80062ee:	f7ff ffd2 	bl	8006296 <ft6x06_write_reg>
}
 80062f2:	b003      	add	sp, #12
 80062f4:	f85d fb04 	ldr.w	pc, [sp], #4

080062f8 <ft6x06_offset_up_down>:
* Input          : uint8_t
* Output         : None
* Return         : Status [FT6X06_ERROR, FT6X06_OK]
*******************************************************************************/
int32_t  ft6x06_offset_up_down(ft6x06_ctx_t *ctx, uint8_t value)
{
 80062f8:	b507      	push	{r0, r1, r2, lr}
  return ft6x06_write_reg(ctx, FT6X06_OFFSET_UD_REG, &value, 1);
 80062fa:	2301      	movs	r3, #1
{
 80062fc:	f88d 1007 	strb.w	r1, [sp, #7]
  return ft6x06_write_reg(ctx, FT6X06_OFFSET_UD_REG, &value, 1);
 8006300:	f10d 0207 	add.w	r2, sp, #7
 8006304:	2193      	movs	r1, #147	@ 0x93
 8006306:	f7ff ffc6 	bl	8006296 <ft6x06_write_reg>
}
 800630a:	b003      	add	sp, #12
 800630c:	f85d fb04 	ldr.w	pc, [sp], #4

08006310 <ft6x06_disatnce_left_right>:
* Input          : uint8_t
* Output         : None
* Return         : Status [FT6X06_ERROR, FT6X06_OK]
*******************************************************************************/
int32_t  ft6x06_disatnce_left_right(ft6x06_ctx_t *ctx, uint8_t value)
{
 8006310:	b507      	push	{r0, r1, r2, lr}
  return ft6x06_write_reg(ctx, FT6X06_DISTANCE_LR_REG, &value, 1);
 8006312:	2301      	movs	r3, #1
{
 8006314:	f88d 1007 	strb.w	r1, [sp, #7]
  return ft6x06_write_reg(ctx, FT6X06_DISTANCE_LR_REG, &value, 1);
 8006318:	f10d 0207 	add.w	r2, sp, #7
 800631c:	2194      	movs	r1, #148	@ 0x94
 800631e:	f7ff ffba 	bl	8006296 <ft6x06_write_reg>
}
 8006322:	b003      	add	sp, #12
 8006324:	f85d fb04 	ldr.w	pc, [sp], #4

08006328 <ft6x06_distance_up_down>:
* Input          : uint8_t
* Output         : None
* Return         : Status [FT6X06_ERROR, FT6X06_OK]
*******************************************************************************/
int32_t  ft6x06_distance_up_down(ft6x06_ctx_t *ctx, uint8_t value)
{
 8006328:	b507      	push	{r0, r1, r2, lr}
  return ft6x06_write_reg(ctx, FT6X06_DISTANCE_UD_REG, &value, 1);
 800632a:	2301      	movs	r3, #1
{
 800632c:	f88d 1007 	strb.w	r1, [sp, #7]
  return ft6x06_write_reg(ctx, FT6X06_DISTANCE_UD_REG, &value, 1);
 8006330:	f10d 0207 	add.w	r2, sp, #7
 8006334:	2195      	movs	r1, #149	@ 0x95
 8006336:	f7ff ffae 	bl	8006296 <ft6x06_write_reg>
}
 800633a:	b003      	add	sp, #12
 800633c:	f85d fb04 	ldr.w	pc, [sp], #4

08006340 <ft6x06_distance_zoom>:
* Input          : uint8_t
* Output         : None
* Return         : Status [FT6X06_ERROR, FT6X06_OK]
*******************************************************************************/
int32_t  ft6x06_distance_zoom(ft6x06_ctx_t *ctx, uint8_t value)
{
 8006340:	b507      	push	{r0, r1, r2, lr}
  return ft6x06_write_reg(ctx, FT6X06_DISTANCE_ZOOM_REG, &value, 1);
 8006342:	2301      	movs	r3, #1
{
 8006344:	f88d 1007 	strb.w	r1, [sp, #7]
  return ft6x06_write_reg(ctx, FT6X06_DISTANCE_ZOOM_REG, &value, 1);
 8006348:	f10d 0207 	add.w	r2, sp, #7
 800634c:	2196      	movs	r1, #150	@ 0x96
 800634e:	f7ff ffa2 	bl	8006296 <ft6x06_write_reg>
}
 8006352:	b003      	add	sp, #12
 8006354:	f85d fb04 	ldr.w	pc, [sp], #4

08006358 <ft6x06_g_mode>:
* Input          : uint8_t
* Output         : None
* Return         : Status [FT6X06_ERROR, FT6X06_OK]
*******************************************************************************/
int32_t  ft6x06_g_mode(ft6x06_ctx_t *ctx, uint8_t value)
{
 8006358:	b507      	push	{r0, r1, r2, lr}
  return ft6x06_write_reg(ctx, FT6X06_GMODE_REG, &value, 1);
 800635a:	2301      	movs	r3, #1
{
 800635c:	f88d 1007 	strb.w	r1, [sp, #7]
  return ft6x06_write_reg(ctx, FT6X06_GMODE_REG, &value, 1);
 8006360:	f10d 0207 	add.w	r2, sp, #7
 8006364:	21a4      	movs	r1, #164	@ 0xa4
 8006366:	f7ff ff96 	bl	8006296 <ft6x06_write_reg>
}
 800636a:	b003      	add	sp, #12
 800636c:	f85d fb04 	ldr.w	pc, [sp], #4

08006370 <ft6x06_chip_id>:
* Input          : Pointer to uint8_t
* Output         : Status of FT6X06_CHIP_ID register
* Return         : Status [FT6X06_ERROR, FT6X06_OK]
*******************************************************************************/
int32_t  ft6x06_chip_id(ft6x06_ctx_t *ctx, uint8_t *value)
{
 8006370:	460a      	mov	r2, r1
  int32_t ret;
  
  ret = ft6x06_read_reg(ctx, FT6X06_CHIP_ID_REG, (uint8_t *)value, 1);
 8006372:	2301      	movs	r3, #1
 8006374:	21a8      	movs	r1, #168	@ 0xa8
 8006376:	f7ff bf87 	b.w	8006288 <ft6x06_read_reg>
	...

0800637c <IS42S32800J_ClockEnable>:
  * @param  Ctx Component object pointer
  * @param  Interface Could be FMC_SDRAM_CMD_TARGET_BANK1 or FMC_SDRAM_CMD_TARGET_BANK2
  * @retval error status
  */
int32_t IS42S32800J_ClockEnable(SDRAM_HandleTypeDef *Ctx, uint32_t Interface) 
{
 800637c:	b508      	push	{r3, lr}
  Command.CommandMode            = IS42S32800J_CLK_ENABLE_CMD;
 800637e:	2201      	movs	r2, #1
 8006380:	4b07      	ldr	r3, [pc, #28]	@ (80063a0 <IS42S32800J_ClockEnable+0x24>)
  Command.CommandTarget          = Interface;
 8006382:	e9c3 2100 	strd	r2, r1, [r3]
  Command.AutoRefreshNumber      = 1;
 8006386:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8006388:	2200      	movs	r2, #0

  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800J_TIMEOUT) != HAL_OK)
 800638a:	4619      	mov	r1, r3
  Command.ModeRegisterDefinition = 0;
 800638c:	60da      	str	r2, [r3, #12]
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800J_TIMEOUT) != HAL_OK)
 800638e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8006392:	f006 f9f5 	bl	800c780 <HAL_SDRAM_SendCommand>
 8006396:	3800      	subs	r0, #0
 8006398:	bf18      	it	ne
 800639a:	2001      	movne	r0, #1
  }
  else
  {
    return IS42S32800J_OK;
  }
}
 800639c:	4240      	negs	r0, r0
 800639e:	bd08      	pop	{r3, pc}
 80063a0:	2400ee14 	.word	0x2400ee14

080063a4 <IS42S32800J_Precharge>:
  * @param  Ctx Component object pointer
  * @param  Interface Could be FMC_SDRAM_CMD_TARGET_BANK1 or FMC_SDRAM_CMD_TARGET_BANK2
  * @retval error status
  */
int32_t IS42S32800J_Precharge(SDRAM_HandleTypeDef *Ctx, uint32_t Interface) 
{
 80063a4:	b508      	push	{r3, lr}
  Command.CommandMode            = IS42S32800J_PALL_CMD;
 80063a6:	2202      	movs	r2, #2
 80063a8:	4b08      	ldr	r3, [pc, #32]	@ (80063cc <IS42S32800J_Precharge+0x28>)
  Command.CommandTarget          = Interface;
 80063aa:	e9c3 2100 	strd	r2, r1, [r3]
  Command.AutoRefreshNumber      = 1;
  Command.ModeRegisterDefinition = 0;
 80063ae:	2101      	movs	r1, #1
 80063b0:	2200      	movs	r2, #0
 80063b2:	e9c3 1202 	strd	r1, r2, [r3, #8]

  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800J_TIMEOUT) != HAL_OK)
 80063b6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80063ba:	4619      	mov	r1, r3
 80063bc:	f006 f9e0 	bl	800c780 <HAL_SDRAM_SendCommand>
 80063c0:	3800      	subs	r0, #0
 80063c2:	bf18      	it	ne
 80063c4:	2001      	movne	r0, #1
  }
  else
  {
    return IS42S32800J_OK;
  }
}
 80063c6:	4240      	negs	r0, r0
 80063c8:	bd08      	pop	{r3, pc}
 80063ca:	bf00      	nop
 80063cc:	2400ee14 	.word	0x2400ee14

080063d0 <IS42S32800J_ModeRegConfig>:
  * @param  Ctx Component object pointer
  * @param  pRegMode : Pointer to Register Mode structure
  * @retval error status
  */
int32_t IS42S32800J_ModeRegConfig(SDRAM_HandleTypeDef *Ctx, IS42S32800J_Context_t *pRegMode) 
{
 80063d0:	460a      	mov	r2, r1
  uint32_t tmpmrd;

  /* Program the external memory mode register */
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
 80063d2:	e9d1 3103 	ldrd	r3, r1, [r1, #12]
{
 80063d6:	b510      	push	{r4, lr}
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
 80063d8:	430b      	orrs	r3, r1
                     pRegMode->BurstType     |\
 80063da:	6951      	ldr	r1, [r2, #20]
                     pRegMode->CASLatency    |\
                     pRegMode->OperationMode |\
                     pRegMode->WriteBurstMode;
  
  Command.CommandMode            = IS42S32800J_LOAD_MODE_CMD;
 80063dc:	2404      	movs	r4, #4
                     pRegMode->BurstType     |\
 80063de:	430b      	orrs	r3, r1
                     pRegMode->CASLatency    |\
 80063e0:	6991      	ldr	r1, [r2, #24]
 80063e2:	430b      	orrs	r3, r1
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
 80063e4:	69d1      	ldr	r1, [r2, #28]
  Command.CommandTarget          = pRegMode->TargetBank;
 80063e6:	6812      	ldr	r2, [r2, #0]
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
 80063e8:	430b      	orrs	r3, r1
  Command.CommandMode            = IS42S32800J_LOAD_MODE_CMD;
 80063ea:	4907      	ldr	r1, [pc, #28]	@ (8006408 <IS42S32800J_ModeRegConfig+0x38>)
  Command.CommandTarget          = pRegMode->TargetBank;
 80063ec:	604a      	str	r2, [r1, #4]
  Command.AutoRefreshNumber      = 1;
 80063ee:	2201      	movs	r2, #1
  Command.CommandMode            = IS42S32800J_LOAD_MODE_CMD;
 80063f0:	600c      	str	r4, [r1, #0]
  Command.ModeRegisterDefinition = tmpmrd;
 80063f2:	e9c1 2302 	strd	r2, r3, [r1, #8]
  
  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800J_TIMEOUT) != HAL_OK)
 80063f6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80063fa:	f006 f9c1 	bl	800c780 <HAL_SDRAM_SendCommand>
 80063fe:	3800      	subs	r0, #0
 8006400:	bf18      	it	ne
 8006402:	2001      	movne	r0, #1
  }
  else
  {
    return IS42S32800J_OK;
  }
}
 8006404:	4240      	negs	r0, r0
 8006406:	bd10      	pop	{r4, pc}
 8006408:	2400ee14 	.word	0x2400ee14

0800640c <IS42S32800J_RefreshMode>:
  * @param  RefreshMode Could be IS42S32800J_CMD_AUTOREFRESH_MODE or
  *                      IS42S32800J_CMD_SELFREFRESH_MODE
  * @retval error status
  */
int32_t IS42S32800J_RefreshMode(SDRAM_HandleTypeDef *Ctx, uint32_t Interface, uint32_t RefreshMode) 
{
 800640c:	b508      	push	{r3, lr}
  Command.CommandMode            = RefreshMode;
 800640e:	4b08      	ldr	r3, [pc, #32]	@ (8006430 <IS42S32800J_RefreshMode+0x24>)
  Command.CommandTarget          = Interface;
 8006410:	e9c3 2100 	strd	r2, r1, [r3]
  Command.AutoRefreshNumber      = 8;
  Command.ModeRegisterDefinition = 0;
 8006414:	2108      	movs	r1, #8
 8006416:	2200      	movs	r2, #0
 8006418:	e9c3 1202 	strd	r1, r2, [r3, #8]

  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800J_TIMEOUT) != HAL_OK)
 800641c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8006420:	4619      	mov	r1, r3
 8006422:	f006 f9ad 	bl	800c780 <HAL_SDRAM_SendCommand>
 8006426:	3800      	subs	r0, #0
 8006428:	bf18      	it	ne
 800642a:	2001      	movne	r0, #1
  }
  else
  {
    return IS42S32800J_OK;
  }
}
 800642c:	4240      	negs	r0, r0
 800642e:	bd08      	pop	{r3, pc}
 8006430:	2400ee14 	.word	0x2400ee14

08006434 <IS42S32800J_RefreshRate>:
  * @param  Ctx Component object pointer
  * @param  RefreshCount The refresh rate to be programmed
  * @retval error status
  */
int32_t IS42S32800J_RefreshRate(SDRAM_HandleTypeDef *Ctx, uint32_t RefreshCount) 
{
 8006434:	b508      	push	{r3, lr}
  /* Set the device refresh rate */
  if(HAL_SDRAM_ProgramRefreshRate(Ctx, RefreshCount) != HAL_OK)
 8006436:	f006 f9c2 	bl	800c7be <HAL_SDRAM_ProgramRefreshRate>
 800643a:	3800      	subs	r0, #0
 800643c:	bf18      	it	ne
 800643e:	2001      	movne	r0, #1
  }
  else
  {
    return IS42S32800J_OK;
  }
}
 8006440:	4240      	negs	r0, r0
 8006442:	bd08      	pop	{r3, pc}

08006444 <IS42S32800J_Init>:
{
 8006444:	b570      	push	{r4, r5, r6, lr}
 8006446:	460c      	mov	r4, r1
  if(IS42S32800J_ClockEnable(Ctx, pRegMode->TargetBank) == IS42S32800J_OK)
 8006448:	6809      	ldr	r1, [r1, #0]
{
 800644a:	4605      	mov	r5, r0
  if(IS42S32800J_ClockEnable(Ctx, pRegMode->TargetBank) == IS42S32800J_OK)
 800644c:	f7ff ff96 	bl	800637c <IS42S32800J_ClockEnable>
 8006450:	b110      	cbz	r0, 8006458 <IS42S32800J_Init+0x14>
  int32_t ret = IS42S32800J_ERROR;
 8006452:	f04f 30ff 	mov.w	r0, #4294967295
}
 8006456:	bd70      	pop	{r4, r5, r6, pc}
  * @retval IS42S32800J_OK
  */
static int32_t IS42S32800J_Delay(uint32_t Delay)
{  
  uint32_t tickstart;
  tickstart = HAL_GetTick();
 8006458:	f001 fc7c 	bl	8007d54 <HAL_GetTick>
 800645c:	4606      	mov	r6, r0
  while((HAL_GetTick() - tickstart) < Delay)
 800645e:	f001 fc79 	bl	8007d54 <HAL_GetTick>
 8006462:	4286      	cmp	r6, r0
 8006464:	d0fb      	beq.n	800645e <IS42S32800J_Init+0x1a>
    if(IS42S32800J_Precharge(Ctx, pRegMode->TargetBank) == IS42S32800J_OK)
 8006466:	6821      	ldr	r1, [r4, #0]
 8006468:	4628      	mov	r0, r5
 800646a:	f7ff ff9b 	bl	80063a4 <IS42S32800J_Precharge>
 800646e:	2800      	cmp	r0, #0
 8006470:	d1ef      	bne.n	8006452 <IS42S32800J_Init+0xe>
      if(IS42S32800J_RefreshMode(Ctx, pRegMode->TargetBank, pRegMode->RefreshMode) == IS42S32800J_OK)
 8006472:	4628      	mov	r0, r5
 8006474:	e9d4 1200 	ldrd	r1, r2, [r4]
 8006478:	f7ff ffc8 	bl	800640c <IS42S32800J_RefreshMode>
 800647c:	2800      	cmp	r0, #0
 800647e:	d1e8      	bne.n	8006452 <IS42S32800J_Init+0xe>
        if(IS42S32800J_ModeRegConfig(Ctx, pRegMode) == IS42S32800J_OK)
 8006480:	4621      	mov	r1, r4
 8006482:	4628      	mov	r0, r5
 8006484:	f7ff ffa4 	bl	80063d0 <IS42S32800J_ModeRegConfig>
 8006488:	2800      	cmp	r0, #0
 800648a:	d1e2      	bne.n	8006452 <IS42S32800J_Init+0xe>
          if(IS42S32800J_RefreshRate(Ctx, pRegMode->RefreshRate) == IS42S32800J_OK)
 800648c:	68a1      	ldr	r1, [r4, #8]
 800648e:	4628      	mov	r0, r5
 8006490:	f7ff ffd0 	bl	8006434 <IS42S32800J_RefreshRate>
 8006494:	3800      	subs	r0, #0
 8006496:	bf18      	it	ne
 8006498:	2001      	movne	r0, #1
 800649a:	4240      	negs	r0, r0
  return ret;
 800649c:	e7db      	b.n	8006456 <IS42S32800J_Init+0x12>

0800649e <MT25TL01G_GetFlashInfo>:
  * @retval QSPI memory status
  */
int32_t MT25TL01G_GetFlashInfo(MT25TL01G_Info_t *pInfo)
{
  pInfo->FlashSize          = MT25TL01G_FLASH_SIZE;
  pInfo->EraseSectorSize    = (2 * MT25TL01G_SUBSECTOR_SIZE);
 800649e:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80064a2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
  pInfo->ProgPageSize       = MT25TL01G_PAGE_SIZE;
  pInfo->EraseSectorsNumber = (MT25TL01G_FLASH_SIZE/pInfo->EraseSectorSize);
 80064a6:	f44f 7180 	mov.w	r1, #256	@ 0x100
  pInfo->EraseSectorSize    = (2 * MT25TL01G_SUBSECTOR_SIZE);
 80064aa:	e9c0 2300 	strd	r2, r3, [r0]
  pInfo->EraseSectorsNumber = (MT25TL01G_FLASH_SIZE/pInfo->EraseSectorSize);
 80064ae:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80064b2:	e9c0 3102 	strd	r3, r1, [r0, #8]
  pInfo->ProgPagesNumber    = (MT25TL01G_FLASH_SIZE/pInfo->ProgPageSize);
 80064b6:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80064ba:	6103      	str	r3, [r0, #16]
  return MT25TL01G_OK;
}
 80064bc:	2000      	movs	r0, #0
 80064be:	4770      	bx	lr

080064c0 <MT25TL01G_AutoPollingMemReady>:
  * @param  Ctx Component object pointer
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */
int32_t MT25TL01G_AutoPollingMemReady(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode)
{
 80064c0:	b500      	push	{lr}

  QSPI_CommandTypeDef     s_command;
  QSPI_AutoPollingTypeDef s_config;

  /* Configure automatic polling mode to wait for memory ready */
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 80064c2:	f44f 7340 	mov.w	r3, #768	@ 0x300
{
 80064c6:	b095      	sub	sp, #84	@ 0x54
  s_command.Instruction       = MT25TL01G_READ_STATUS_REG_CMD;
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
  s_command.DataMode          = QSPI_DATA_4_LINES;
 80064c8:	f04f 7240 	mov.w	r2, #50331648	@ 0x3000000
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 80064cc:	930c      	str	r3, [sp, #48]	@ 0x30
  s_command.Instruction       = MT25TL01G_READ_STATUS_REG_CMD;
 80064ce:	2305      	movs	r3, #5
  s_command.DataMode          = QSPI_DATA_4_LINES;
 80064d0:	920f      	str	r2, [sp, #60]	@ 0x3c
  s_command.DummyCycles       = 2;
 80064d2:	2202      	movs	r2, #2
  s_command.Instruction       = MT25TL01G_READ_STATUS_REG_CMD;
 80064d4:	9306      	str	r3, [sp, #24]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 80064d6:	2300      	movs	r3, #0
  s_command.DummyCycles       = 2;
 80064d8:	920b      	str	r2, [sp, #44]	@ 0x2c
  s_config.Interval        = 0x10;
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
  s_config.Mask            = MT25TL01G_SR_WIP | (MT25TL01G_SR_WIP <<8);
  s_config.StatusBytesSize = 2;

  if (HAL_QSPI_AutoPolling(Ctx, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80064da:	a906      	add	r1, sp, #24
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 80064dc:	9313      	str	r3, [sp, #76]	@ 0x4c
  s_config.Match           = 0;
 80064de:	9300      	str	r3, [sp, #0]
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
 80064e0:	9304      	str	r3, [sp, #16]
  s_config.StatusBytesSize = 2;
 80064e2:	9203      	str	r2, [sp, #12]
  if (HAL_QSPI_AutoPolling(Ctx, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80064e4:	466a      	mov	r2, sp
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80064e6:	e9cd 330d 	strd	r3, r3, [sp, #52]	@ 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 80064ea:	e9cd 3311 	strd	r3, r3, [sp, #68]	@ 0x44
  s_config.Interval        = 0x10;
 80064ee:	2310      	movs	r3, #16
 80064f0:	9302      	str	r3, [sp, #8]
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 80064f2:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80064f6:	9305      	str	r3, [sp, #20]
  s_config.Mask            = MT25TL01G_SR_WIP | (MT25TL01G_SR_WIP <<8);
 80064f8:	f240 1301 	movw	r3, #257	@ 0x101
 80064fc:	9301      	str	r3, [sp, #4]
  if (HAL_QSPI_AutoPolling(Ctx, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80064fe:	f241 3388 	movw	r3, #5000	@ 0x1388
 8006502:	f004 fd44 	bl	800af8e <HAL_QSPI_AutoPolling>
  {
    return MT25TL01G_ERROR_AUTOPOLLING;
  }

  return MT25TL01G_OK;
 8006506:	2800      	cmp	r0, #0

}
 8006508:	bf14      	ite	ne
 800650a:	f06f 0004 	mvnne.w	r0, #4
 800650e:	2000      	moveq	r0, #0
 8006510:	b015      	add	sp, #84	@ 0x54
 8006512:	f85d fb04 	ldr.w	pc, [sp], #4

08006516 <MT25TL01G_WriteEnable>:
{
  QSPI_CommandTypeDef     s_command;
  QSPI_AutoPollingTypeDef s_config;

  /* Enable write operations */
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8006516:	2903      	cmp	r1, #3
  s_command.DummyCycles       = 0;
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;

  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8006518:	f241 3288 	movw	r2, #5000	@ 0x1388
{
 800651c:	b530      	push	{r4, r5, lr}
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 800651e:	bf08      	it	eq
 8006520:	f44f 7340 	moveq.w	r3, #768	@ 0x300
{
 8006524:	b095      	sub	sp, #84	@ 0x54
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8006526:	bf18      	it	ne
 8006528:	f44f 7380 	movne.w	r3, #256	@ 0x100
{
 800652c:	460c      	mov	r4, r1
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800652e:	a906      	add	r1, sp, #24
{
 8006530:	4605      	mov	r5, r0
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8006532:	930c      	str	r3, [sp, #48]	@ 0x30
  s_command.Instruction       = MT25TL01G_WRITE_ENABLE_CMD;
 8006534:	2306      	movs	r3, #6
 8006536:	9306      	str	r3, [sp, #24]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8006538:	2300      	movs	r3, #0
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800653a:	e9cd 330d 	strd	r3, r3, [sp, #52]	@ 0x34
  s_command.DataMode          = QSPI_DATA_NONE;
 800653e:	930f      	str	r3, [sp, #60]	@ 0x3c
  s_command.DummyCycles       = 0;
 8006540:	930b      	str	r3, [sp, #44]	@ 0x2c
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8006542:	9313      	str	r3, [sp, #76]	@ 0x4c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8006544:	e9cd 3311 	strd	r3, r3, [sp, #68]	@ 0x44
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8006548:	f004 fc20 	bl	800ad8c <HAL_QSPI_Command>
 800654c:	bb20      	cbnz	r0, 8006598 <MT25TL01G_WriteEnable+0x82>
  {
    return MT25TL01G_ERROR_COMMAND;
  }

  /* Configure automatic polling mode to wait for write enabling */
  s_config.Match           = MT25TL01G_SR_WREN | (MT25TL01G_SR_WREN << 8);
 800654e:	f240 2302 	movw	r3, #514	@ 0x202
  s_config.Mask            = MT25TL01G_SR_WREN | (MT25TL01G_SR_WREN << 8);
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
  s_config.StatusBytesSize = 2;
  s_config.Interval        = 0x10;
 8006552:	2202      	movs	r2, #2
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;

  s_command.Instruction    = MT25TL01G_READ_STATUS_REG_CMD;
  s_command.DataMode       = (Mode == MT25TL01G_QPI_MODE) ? QSPI_DATA_4_LINES : QSPI_DATA_1_LINE;
 8006554:	2c03      	cmp	r4, #3
  s_command.Instruction    = MT25TL01G_READ_STATUS_REG_CMD;
 8006556:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
 800655a:	9004      	str	r0, [sp, #16]


  if (HAL_QSPI_AutoPolling(Ctx, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800655c:	4628      	mov	r0, r5
  s_config.Mask            = MT25TL01G_SR_WREN | (MT25TL01G_SR_WREN << 8);
 800655e:	e9cd 3300 	strd	r3, r3, [sp]
  s_config.Interval        = 0x10;
 8006562:	f04f 0310 	mov.w	r3, #16
 8006566:	e9cd 3202 	strd	r3, r2, [sp, #8]
  s_command.Instruction    = MT25TL01G_READ_STATUS_REG_CMD;
 800656a:	f04f 0305 	mov.w	r3, #5
  if (HAL_QSPI_AutoPolling(Ctx, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800656e:	466a      	mov	r2, sp
  s_command.Instruction    = MT25TL01G_READ_STATUS_REG_CMD;
 8006570:	e9cd 1305 	strd	r1, r3, [sp, #20]
  s_command.DataMode       = (Mode == MT25TL01G_QPI_MODE) ? QSPI_DATA_4_LINES : QSPI_DATA_1_LINE;
 8006574:	bf14      	ite	ne
 8006576:	f04f 7380 	movne.w	r3, #16777216	@ 0x1000000
 800657a:	f04f 7340 	moveq.w	r3, #50331648	@ 0x3000000
  if (HAL_QSPI_AutoPolling(Ctx, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800657e:	a906      	add	r1, sp, #24
  s_command.DataMode       = (Mode == MT25TL01G_QPI_MODE) ? QSPI_DATA_4_LINES : QSPI_DATA_1_LINE;
 8006580:	930f      	str	r3, [sp, #60]	@ 0x3c
  if (HAL_QSPI_AutoPolling(Ctx, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8006582:	f241 3388 	movw	r3, #5000	@ 0x1388
 8006586:	f004 fd02 	bl	800af8e <HAL_QSPI_AutoPolling>
  {
    return MT25TL01G_ERROR_AUTOPOLLING;
  }

  return MT25TL01G_OK;
 800658a:	2800      	cmp	r0, #0
 800658c:	bf14      	ite	ne
 800658e:	f06f 0004 	mvnne.w	r0, #4
 8006592:	2000      	moveq	r0, #0
}
 8006594:	b015      	add	sp, #84	@ 0x54
 8006596:	bd30      	pop	{r4, r5, pc}
    return MT25TL01G_ERROR_COMMAND;
 8006598:	f06f 0001 	mvn.w	r0, #1
 800659c:	e7fa      	b.n	8006594 <MT25TL01G_WriteEnable+0x7e>

0800659e <MT25TL01G_Enter4BytesAddressMode>:
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 800659e:	2903      	cmp	r1, #3
{
 80065a0:	b530      	push	{r4, r5, lr}
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 80065a2:	bf08      	it	eq
 80065a4:	f44f 7340 	moveq.w	r3, #768	@ 0x300
{
 80065a8:	b08f      	sub	sp, #60	@ 0x3c
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 80065aa:	bf18      	it	ne
 80065ac:	f44f 7380 	movne.w	r3, #256	@ 0x100
{
 80065b0:	4604      	mov	r4, r0
 80065b2:	460d      	mov	r5, r1
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 80065b4:	9306      	str	r3, [sp, #24]
  s_command.Instruction       = MT25TL01G_ENTER_4_BYTE_ADDR_MODE_CMD;
 80065b6:	23b7      	movs	r3, #183	@ 0xb7
 80065b8:	9300      	str	r3, [sp, #0]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 80065ba:	2300      	movs	r3, #0
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80065bc:	e9cd 3307 	strd	r3, r3, [sp, #28]
  s_command.DataMode          = QSPI_DATA_NONE;
 80065c0:	9309      	str	r3, [sp, #36]	@ 0x24
  s_command.DummyCycles       = 0;
 80065c2:	9305      	str	r3, [sp, #20]
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 80065c4:	930d      	str	r3, [sp, #52]	@ 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 80065c6:	e9cd 330b 	strd	r3, r3, [sp, #44]	@ 0x2c
  if( MT25TL01G_WriteEnable(Ctx,Mode)!=MT25TL01G_OK)
 80065ca:	f7ff ffa4 	bl	8006516 <MT25TL01G_WriteEnable>
 80065ce:	b118      	cbz	r0, 80065d8 <MT25TL01G_Enter4BytesAddressMode+0x3a>
    return MT25TL01G_ERROR_COMMAND;
 80065d0:	f06f 0001 	mvn.w	r0, #1
}
 80065d4:	b00f      	add	sp, #60	@ 0x3c
 80065d6:	bd30      	pop	{r4, r5, pc}
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80065d8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80065dc:	4669      	mov	r1, sp
 80065de:	4620      	mov	r0, r4
 80065e0:	f004 fbd4 	bl	800ad8c <HAL_QSPI_Command>
 80065e4:	2800      	cmp	r0, #0
 80065e6:	d1f3      	bne.n	80065d0 <MT25TL01G_Enter4BytesAddressMode+0x32>
  else if(MT25TL01G_AutoPollingMemReady(Ctx,Mode)!=MT25TL01G_OK)
 80065e8:	4629      	mov	r1, r5
 80065ea:	4620      	mov	r0, r4
 80065ec:	f7ff ff68 	bl	80064c0 <MT25TL01G_AutoPollingMemReady>
 80065f0:	2800      	cmp	r0, #0
 80065f2:	d0ef      	beq.n	80065d4 <MT25TL01G_Enter4BytesAddressMode+0x36>
 80065f4:	e7ec      	b.n	80065d0 <MT25TL01G_Enter4BytesAddressMode+0x32>

080065f6 <MT25TL01G_EnterQPIMode>:
  * @param  Ctx Component object pointer
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */
int32_t MT25TL01G_EnterQPIMode(QSPI_HandleTypeDef *Ctx)
{
 80065f6:	b500      	push	{lr}
  QSPI_CommandTypeDef s_command;

  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 80065f8:	f44f 7380 	mov.w	r3, #256	@ 0x100
{
 80065fc:	b08f      	sub	sp, #60	@ 0x3c
  s_command.DummyCycles       = 0;
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;

  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80065fe:	f241 3288 	movw	r2, #5000	@ 0x1388
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8006602:	9306      	str	r3, [sp, #24]
  s_command.Instruction       = MT25TL01G_ENTER_QUAD_CMD;
 8006604:	2335      	movs	r3, #53	@ 0x35
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8006606:	4669      	mov	r1, sp
  s_command.Instruction       = MT25TL01G_ENTER_QUAD_CMD;
 8006608:	9300      	str	r3, [sp, #0]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 800660a:	2300      	movs	r3, #0
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800660c:	e9cd 3307 	strd	r3, r3, [sp, #28]
  s_command.DataMode          = QSPI_DATA_NONE;
 8006610:	9309      	str	r3, [sp, #36]	@ 0x24
  s_command.DummyCycles       = 0;
 8006612:	9305      	str	r3, [sp, #20]
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8006614:	930d      	str	r3, [sp, #52]	@ 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8006616:	e9cd 330b 	strd	r3, r3, [sp, #44]	@ 0x2c
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800661a:	f004 fbb7 	bl	800ad8c <HAL_QSPI_Command>
  {
    return MT25TL01G_ERROR_COMMAND;
  }

  return MT25TL01G_OK;
 800661e:	2800      	cmp	r0, #0
}
 8006620:	bf14      	ite	ne
 8006622:	f06f 0001 	mvnne.w	r0, #1
 8006626:	2000      	moveq	r0, #0
 8006628:	b00f      	add	sp, #60	@ 0x3c
 800662a:	f85d fb04 	ldr.w	pc, [sp], #4

0800662e <MT25TL01G_ExitQPIMode>:
  * @param  Ctx Component object pointer
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */
int32_t MT25TL01G_ExitQPIMode(QSPI_HandleTypeDef *Ctx)
{
 800662e:	b500      	push	{lr}
  QSPI_CommandTypeDef s_command;

  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8006630:	f44f 7380 	mov.w	r3, #256	@ 0x100
{
 8006634:	b08f      	sub	sp, #60	@ 0x3c
  s_command.DummyCycles       = 0;
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;

  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8006636:	f241 3288 	movw	r2, #5000	@ 0x1388
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 800663a:	9306      	str	r3, [sp, #24]
  s_command.Instruction       = MT25TL01G_EXIT_QUAD_CMD;
 800663c:	23f5      	movs	r3, #245	@ 0xf5
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800663e:	4669      	mov	r1, sp
  s_command.Instruction       = MT25TL01G_EXIT_QUAD_CMD;
 8006640:	9300      	str	r3, [sp, #0]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8006642:	2300      	movs	r3, #0
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8006644:	e9cd 3307 	strd	r3, r3, [sp, #28]
  s_command.DataMode          = QSPI_DATA_NONE;
 8006648:	9309      	str	r3, [sp, #36]	@ 0x24
  s_command.DummyCycles       = 0;
 800664a:	9305      	str	r3, [sp, #20]
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800664c:	930d      	str	r3, [sp, #52]	@ 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 800664e:	e9cd 330b 	strd	r3, r3, [sp, #44]	@ 0x2c
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8006652:	f004 fb9b 	bl	800ad8c <HAL_QSPI_Command>
  {
    return MT25TL01G_ERROR_COMMAND;
  }

  return MT25TL01G_OK;
 8006656:	2800      	cmp	r0, #0
}
 8006658:	bf14      	ite	ne
 800665a:	f06f 0001 	mvnne.w	r0, #1
 800665e:	2000      	moveq	r0, #0
 8006660:	b00f      	add	sp, #60	@ 0x3c
 8006662:	f85d fb04 	ldr.w	pc, [sp], #4

08006666 <MT25TL01G_EnableMemoryMappedModeDTR>:
  * @param  Ctx Component object pointer
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */
int32_t MT25TL01G_EnableMemoryMappedModeDTR(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode)
{
 8006666:	b500      	push	{lr}
 8006668:	b091      	sub	sp, #68	@ 0x44
  QSPI_CommandTypeDef      s_command;
  QSPI_MemoryMappedTypeDef s_mem_mapped_cfg;
  switch(Mode)
 800666a:	2903      	cmp	r1, #3
 800666c:	d80e      	bhi.n	800668c <MT25TL01G_EnableMemoryMappedModeDTR+0x26>
 800666e:	e8df f001 	tbb	[pc, r1]
 8006672:	2902      	.short	0x2902
 8006674:	3f34      	.short	0x3f34
  {
  case MT25TL01G_SPI_MODE:                /* 1-1-1 commands, Power on H/W default setting */
    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8006676:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800667a:	9308      	str	r3, [sp, #32]
    s_command.Instruction       = MT25TL01G_FAST_READ_4_BYTE_DTR_CMD;
 800667c:	230e      	movs	r3, #14
 800667e:	9302      	str	r3, [sp, #8]
    s_command.AddressMode       = QSPI_ADDRESS_1_LINE;
 8006680:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006684:	9309      	str	r3, [sp, #36]	@ 0x24
    s_command.DataMode          = QSPI_DATA_1_LINE;
 8006686:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
    break;
  case MT25TL01G_QPI_MODE:                 /* 4-4-4 commands */
    s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_DTR_CMD;
    s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
    s_command.DataMode          = QSPI_DATA_4_LINES;
 800668a:	930b      	str	r3, [sp, #44]	@ 0x2c
    break;
  }
  /* Configure the command for the read instruction */
  s_command.AddressSize       = QSPI_ADDRESS_32_BITS;
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
  s_command.DummyCycles       = MT25TL01G_DUMMY_CYCLES_READ_QUAD_DTR;
 800668c:	2208      	movs	r2, #8
  s_command.AddressSize       = QSPI_ADDRESS_32_BITS;
 800668e:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
  s_command.DdrMode           = QSPI_DDR_MODE_ENABLE;
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_HALF_CLK_DELAY;
 8006692:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000

  /* Configure the memory mapped mode */
  s_mem_mapped_cfg.TimeOutActivation = QSPI_TIMEOUT_COUNTER_DISABLE;
  s_mem_mapped_cfg.TimeOutPeriod     = 0;

  if (HAL_QSPI_MemoryMapped(Ctx, &s_command, &s_mem_mapped_cfg) != HAL_OK)
 8006696:	a902      	add	r1, sp, #8
  s_command.DummyCycles       = MT25TL01G_DUMMY_CYCLES_READ_QUAD_DTR;
 8006698:	9207      	str	r2, [sp, #28]
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_HALF_CLK_DELAY;
 800669a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
  s_command.AddressSize       = QSPI_ADDRESS_32_BITS;
 800669e:	9305      	str	r3, [sp, #20]
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80066a0:	2300      	movs	r3, #0
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_HALF_CLK_DELAY;
 80066a2:	e9cd c20d 	strd	ip, r2, [sp, #52]	@ 0x34
  if (HAL_QSPI_MemoryMapped(Ctx, &s_command, &s_mem_mapped_cfg) != HAL_OK)
 80066a6:	466a      	mov	r2, sp
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80066a8:	930a      	str	r3, [sp, #40]	@ 0x28
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 80066aa:	930f      	str	r3, [sp, #60]	@ 0x3c
  s_mem_mapped_cfg.TimeOutPeriod     = 0;
 80066ac:	e9cd 3300 	strd	r3, r3, [sp]
  if (HAL_QSPI_MemoryMapped(Ctx, &s_command, &s_mem_mapped_cfg) != HAL_OK)
 80066b0:	f004 fcbe 	bl	800b030 <HAL_QSPI_MemoryMapped>
  {
    return MT25TL01G_ERROR_MEMORYMAPPED;
  }

  return MT25TL01G_OK;
 80066b4:	2800      	cmp	r0, #0
}
 80066b6:	bf14      	ite	ne
 80066b8:	f06f 0005 	mvnne.w	r0, #5
 80066bc:	2000      	moveq	r0, #0
 80066be:	b011      	add	sp, #68	@ 0x44
 80066c0:	f85d fb04 	ldr.w	pc, [sp], #4
    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 80066c4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80066c8:	9308      	str	r3, [sp, #32]
    s_command.Instruction       = MT25TL01G_DUAL_OUT_FAST_READ_DTR_CMD;
 80066ca:	233d      	movs	r3, #61	@ 0x3d
 80066cc:	9302      	str	r3, [sp, #8]
    s_command.AddressMode       = QSPI_ADDRESS_1_LINE;
 80066ce:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80066d2:	9309      	str	r3, [sp, #36]	@ 0x24
    s_command.DataMode          = QSPI_DATA_2_LINES;
 80066d4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80066d8:	e7d7      	b.n	800668a <MT25TL01G_EnableMemoryMappedModeDTR+0x24>
    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 80066da:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80066de:	9308      	str	r3, [sp, #32]
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_4_BYTE_DTR_CMD;
 80066e0:	23ee      	movs	r3, #238	@ 0xee
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_DTR_CMD;
 80066e2:	9302      	str	r3, [sp, #8]
    s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
 80066e4:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80066e8:	9309      	str	r3, [sp, #36]	@ 0x24
    s_command.DataMode          = QSPI_DATA_4_LINES;
 80066ea:	f04f 7340 	mov.w	r3, #50331648	@ 0x3000000
 80066ee:	e7cc      	b.n	800668a <MT25TL01G_EnableMemoryMappedModeDTR+0x24>
    s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 80066f0:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80066f4:	9308      	str	r3, [sp, #32]
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_DTR_CMD;
 80066f6:	23ed      	movs	r3, #237	@ 0xed
 80066f8:	e7f3      	b.n	80066e2 <MT25TL01G_EnableMemoryMappedModeDTR+0x7c>

080066fa <MT25TL01G_EnableMemoryMappedModeSTR>:
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */

int32_t MT25TL01G_EnableMemoryMappedModeSTR(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode)
{
 80066fa:	b500      	push	{lr}
 80066fc:	b091      	sub	sp, #68	@ 0x44
  QSPI_CommandTypeDef      s_command;
  QSPI_MemoryMappedTypeDef s_mem_mapped_cfg;
  switch(Mode)
 80066fe:	2903      	cmp	r1, #3
 8006700:	d80e      	bhi.n	8006720 <MT25TL01G_EnableMemoryMappedModeSTR+0x26>
 8006702:	e8df f001 	tbb	[pc, r1]
 8006706:	2502      	.short	0x2502
 8006708:	3b30      	.short	0x3b30
  {
  case MT25TL01G_SPI_MODE:           /* 1-1-1 read commands */
    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 800670a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800670e:	9308      	str	r3, [sp, #32]
    s_command.Instruction       = MT25TL01G_FAST_READ_4_BYTE_ADDR_CMD;
 8006710:	230c      	movs	r3, #12
 8006712:	9302      	str	r3, [sp, #8]
    s_command.AddressMode       = QSPI_ADDRESS_1_LINE;
 8006714:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006718:	9309      	str	r3, [sp, #36]	@ 0x24
    s_command.DataMode          = QSPI_DATA_1_LINE;
 800671a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000

  case MT25TL01G_QPI_MODE:                 /* 4-4-4 commands */
    s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_CMD;
    s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
    s_command.DataMode          = QSPI_DATA_4_LINES;
 800671e:	930b      	str	r3, [sp, #44]	@ 0x2c

    break;

  }
  /* Configure the command for the read instruction */
  s_command.DummyCycles       = MT25TL01G_DUMMY_CYCLES_READ;
 8006720:	2308      	movs	r3, #8

  /* Configure the memory mapped mode */
  s_mem_mapped_cfg.TimeOutActivation = QSPI_TIMEOUT_COUNTER_DISABLE;
  s_mem_mapped_cfg.TimeOutPeriod     = 0;

  if (HAL_QSPI_MemoryMapped(Ctx, &s_command, &s_mem_mapped_cfg) != HAL_OK)
 8006722:	466a      	mov	r2, sp
 8006724:	a902      	add	r1, sp, #8
  s_command.DummyCycles       = MT25TL01G_DUMMY_CYCLES_READ;
 8006726:	9307      	str	r3, [sp, #28]
  s_command.AddressSize       = QSPI_ADDRESS_32_BITS;
 8006728:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 800672c:	9305      	str	r3, [sp, #20]
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800672e:	2300      	movs	r3, #0
 8006730:	930a      	str	r3, [sp, #40]	@ 0x28
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8006732:	930f      	str	r3, [sp, #60]	@ 0x3c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8006734:	e9cd 330d 	strd	r3, r3, [sp, #52]	@ 0x34
  s_mem_mapped_cfg.TimeOutPeriod     = 0;
 8006738:	e9cd 3300 	strd	r3, r3, [sp]
  if (HAL_QSPI_MemoryMapped(Ctx, &s_command, &s_mem_mapped_cfg) != HAL_OK)
 800673c:	f004 fc78 	bl	800b030 <HAL_QSPI_MemoryMapped>
  {
    return MT25TL01G_ERROR_MEMORYMAPPED;
  }

  return MT25TL01G_OK;
 8006740:	2800      	cmp	r0, #0
}
 8006742:	bf14      	ite	ne
 8006744:	f06f 0005 	mvnne.w	r0, #5
 8006748:	2000      	moveq	r0, #0
 800674a:	b011      	add	sp, #68	@ 0x44
 800674c:	f85d fb04 	ldr.w	pc, [sp], #4
    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8006750:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8006754:	9308      	str	r3, [sp, #32]
    s_command.Instruction       = MT25TL01G_DUAL_INOUT_FAST_READ_4_BYTE_ADDR_CMD;
 8006756:	23bc      	movs	r3, #188	@ 0xbc
 8006758:	9302      	str	r3, [sp, #8]
    s_command.AddressMode       = QSPI_ADDRESS_2_LINES;
 800675a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800675e:	9309      	str	r3, [sp, #36]	@ 0x24
    s_command.DataMode          = QSPI_DATA_2_LINES;
 8006760:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006764:	e7db      	b.n	800671e <MT25TL01G_EnableMemoryMappedModeSTR+0x24>
    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8006766:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800676a:	9308      	str	r3, [sp, #32]
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_4_BYTE_ADDR_CMD;
 800676c:	23ec      	movs	r3, #236	@ 0xec
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_CMD;
 800676e:	9302      	str	r3, [sp, #8]
    s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
 8006770:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8006774:	9309      	str	r3, [sp, #36]	@ 0x24
    s_command.DataMode          = QSPI_DATA_4_LINES;
 8006776:	f04f 7340 	mov.w	r3, #50331648	@ 0x3000000
 800677a:	e7d0      	b.n	800671e <MT25TL01G_EnableMemoryMappedModeSTR+0x24>
    s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 800677c:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8006780:	9308      	str	r3, [sp, #32]
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_CMD;
 8006782:	23eb      	movs	r3, #235	@ 0xeb
 8006784:	e7f3      	b.n	800676e <MT25TL01G_EnableMemoryMappedModeSTR+0x74>

08006786 <MT25TL01G_ResetEnable>:
int32_t MT25TL01G_ResetEnable(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode)
{
  QSPI_CommandTypeDef s_command;

  /* Initialize the reset enable command */
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8006786:	2903      	cmp	r1, #3
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;

  /* Send the command */
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8006788:	f241 3288 	movw	r2, #5000	@ 0x1388
{
 800678c:	b500      	push	{lr}
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 800678e:	bf18      	it	ne
 8006790:	f44f 7380 	movne.w	r3, #256	@ 0x100
{
 8006794:	b08f      	sub	sp, #60	@ 0x3c
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8006796:	bf08      	it	eq
 8006798:	f44f 7340 	moveq.w	r3, #768	@ 0x300
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800679c:	4669      	mov	r1, sp
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 800679e:	9306      	str	r3, [sp, #24]
  s_command.Instruction       = MT25TL01G_RESET_ENABLE_CMD;
 80067a0:	2366      	movs	r3, #102	@ 0x66
 80067a2:	9300      	str	r3, [sp, #0]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 80067a4:	2300      	movs	r3, #0
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80067a6:	e9cd 3307 	strd	r3, r3, [sp, #28]
  s_command.DataMode          = QSPI_DATA_NONE;
 80067aa:	9309      	str	r3, [sp, #36]	@ 0x24
  s_command.DummyCycles       = 0;
 80067ac:	9305      	str	r3, [sp, #20]
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 80067ae:	930d      	str	r3, [sp, #52]	@ 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 80067b0:	e9cd 330b 	strd	r3, r3, [sp, #44]	@ 0x2c
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80067b4:	f004 faea 	bl	800ad8c <HAL_QSPI_Command>
  {
    return MT25TL01G_ERROR_COMMAND;
  }

  return MT25TL01G_OK;
 80067b8:	2800      	cmp	r0, #0
}
 80067ba:	bf14      	ite	ne
 80067bc:	f06f 0001 	mvnne.w	r0, #1
 80067c0:	2000      	moveq	r0, #0
 80067c2:	b00f      	add	sp, #60	@ 0x3c
 80067c4:	f85d fb04 	ldr.w	pc, [sp], #4

080067c8 <MT25TL01G_ResetMemory>:
int32_t MT25TL01G_ResetMemory(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode)
{
  QSPI_CommandTypeDef s_command;

  /* Initialize the reset enable command */
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 80067c8:	2903      	cmp	r1, #3
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;

  /* Send the command */
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80067ca:	f241 3288 	movw	r2, #5000	@ 0x1388
{
 80067ce:	b500      	push	{lr}
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 80067d0:	bf18      	it	ne
 80067d2:	f44f 7380 	movne.w	r3, #256	@ 0x100
{
 80067d6:	b08f      	sub	sp, #60	@ 0x3c
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 80067d8:	bf08      	it	eq
 80067da:	f44f 7340 	moveq.w	r3, #768	@ 0x300
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80067de:	4669      	mov	r1, sp
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 80067e0:	9306      	str	r3, [sp, #24]
  s_command.Instruction       = MT25TL01G_RESET_MEMORY_CMD ;
 80067e2:	2399      	movs	r3, #153	@ 0x99
 80067e4:	9300      	str	r3, [sp, #0]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 80067e6:	2300      	movs	r3, #0
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80067e8:	e9cd 3307 	strd	r3, r3, [sp, #28]
  s_command.DataMode          = QSPI_DATA_NONE;
 80067ec:	9309      	str	r3, [sp, #36]	@ 0x24
  s_command.DummyCycles       = 0;
 80067ee:	9305      	str	r3, [sp, #20]
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 80067f0:	930d      	str	r3, [sp, #52]	@ 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 80067f2:	e9cd 330b 	strd	r3, r3, [sp, #44]	@ 0x2c
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80067f6:	f004 fac9 	bl	800ad8c <HAL_QSPI_Command>
  {
    return MT25TL01G_ERROR_COMMAND;
  }

  return MT25TL01G_OK;
 80067fa:	2800      	cmp	r0, #0
}
 80067fc:	bf14      	ite	ne
 80067fe:	f06f 0001 	mvnne.w	r0, #1
 8006802:	2000      	moveq	r0, #0
 8006804:	b00f      	add	sp, #60	@ 0x3c
 8006806:	f85d fb04 	ldr.w	pc, [sp], #4

0800680a <OTM8009A_ReadRegWrap>:
  * @param  pData  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval error status
  */
static int32_t OTM8009A_ReadRegWrap(void *Handle, uint16_t Reg, uint8_t* pData, uint16_t Length)
{
 800680a:	b410      	push	{r4}
  OTM8009A_Object_t *pObj = (OTM8009A_Object_t *)Handle;

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 800680c:	6884      	ldr	r4, [r0, #8]
 800680e:	8800      	ldrh	r0, [r0, #0]
 8006810:	46a4      	mov	ip, r4
}
 8006812:	f85d 4b04 	ldr.w	r4, [sp], #4
  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8006816:	4760      	bx	ip

08006818 <OTM8009A_WriteRegWrap>:
  * @param  pData  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval error status
  */
static int32_t OTM8009A_WriteRegWrap(void *Handle, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8006818:	b410      	push	{r4}
  OTM8009A_Object_t *pObj = (OTM8009A_Object_t *)Handle;

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 800681a:	6844      	ldr	r4, [r0, #4]
 800681c:	8800      	ldrh	r0, [r0, #0]
 800681e:	46a4      	mov	ip, r4
}
 8006820:	f85d 4b04 	ldr.w	r4, [sp], #4
  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8006824:	4760      	bx	ip

08006826 <OTM8009A_IO_Delay.isra.0>:

/**
  * @brief  OTM8009A delay
  * @param  Delay  Delay in ms
  */
static int32_t OTM8009A_IO_Delay(OTM8009A_Object_t *pObj, uint32_t Delay)
 8006826:	b570      	push	{r4, r5, r6, lr}
{
  uint32_t tickstart;
  tickstart = pObj->IO.GetTick();
 8006828:	68c3      	ldr	r3, [r0, #12]
static int32_t OTM8009A_IO_Delay(OTM8009A_Object_t *pObj, uint32_t Delay)
 800682a:	4604      	mov	r4, r0
 800682c:	460d      	mov	r5, r1
  tickstart = pObj->IO.GetTick();
 800682e:	4798      	blx	r3
 8006830:	4606      	mov	r6, r0
  while((pObj->IO.GetTick() - tickstart) < Delay)
 8006832:	68e3      	ldr	r3, [r4, #12]
 8006834:	4798      	blx	r3
 8006836:	1b83      	subs	r3, r0, r6
 8006838:	42ab      	cmp	r3, r5
 800683a:	d3fa      	bcc.n	8006832 <OTM8009A_IO_Delay.isra.0+0xc>
  {
  }
  return OTM8009A_OK;
}
 800683c:	bd70      	pop	{r4, r5, r6, pc}
	...

08006840 <OTM8009A_Init>:
{
 8006840:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  ret = otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8006844:	2300      	movs	r3, #0
 8006846:	f100 0510 	add.w	r5, r0, #16
{
 800684a:	4607      	mov	r7, r0
 800684c:	460e      	mov	r6, r1
 800684e:	4690      	mov	r8, r2
  ret = otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8006850:	4619      	mov	r1, r3
 8006852:	4ade      	ldr	r2, [pc, #888]	@ (8006bcc <OTM8009A_Init+0x38c>)
 8006854:	4628      	mov	r0, r5
 8006856:	f000 fb99 	bl	8006f8c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data1, 3);
 800685a:	2303      	movs	r3, #3
  ret = otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 800685c:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data1, 3);
 800685e:	4adc      	ldr	r2, [pc, #880]	@ (8006bd0 <OTM8009A_Init+0x390>)
 8006860:	21ff      	movs	r1, #255	@ 0xff
 8006862:	4628      	mov	r0, r5
 8006864:	f000 fb92 	bl	8006f8c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8006868:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data1, 3);
 800686a:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 800686c:	4ad9      	ldr	r2, [pc, #868]	@ (8006bd4 <OTM8009A_Init+0x394>)
 800686e:	4619      	mov	r1, r3
 8006870:	4628      	mov	r0, r5
 8006872:	f000 fb8b 	bl	8006f8c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data2, 2);
 8006876:	2302      	movs	r3, #2
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8006878:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data2, 2);
 800687a:	4ad7      	ldr	r2, [pc, #860]	@ (8006bd8 <OTM8009A_Init+0x398>)
 800687c:	21ff      	movs	r1, #255	@ 0xff
 800687e:	4628      	mov	r0, r5
 8006880:	f000 fb84 	bl	8006f8c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8006884:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data2, 2);
 8006886:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8006888:	4ad2      	ldr	r2, [pc, #840]	@ (8006bd4 <OTM8009A_Init+0x394>)
 800688a:	4619      	mov	r1, r3
 800688c:	4628      	mov	r0, r5
 800688e:	f000 fb7d 	bl	8006f8c <otm8009a_write_reg>
 8006892:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[3], 0);
 8006894:	2300      	movs	r3, #0
 8006896:	4ad1      	ldr	r2, [pc, #836]	@ (8006bdc <OTM8009A_Init+0x39c>)
 8006898:	21c4      	movs	r1, #196	@ 0xc4
 800689a:	4628      	mov	r0, r5
 800689c:	f000 fb76 	bl	8006f8c <otm8009a_write_reg>
  (void)OTM8009A_IO_Delay(pObj, 10);
 80068a0:	210a      	movs	r1, #10
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[3], 0);
 80068a2:	4404      	add	r4, r0
  (void)OTM8009A_IO_Delay(pObj, 10);
 80068a4:	4638      	mov	r0, r7
 80068a6:	f7ff ffbe 	bl	8006826 <OTM8009A_IO_Delay.isra.0>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[4], 0);
 80068aa:	2300      	movs	r3, #0
 80068ac:	4acc      	ldr	r2, [pc, #816]	@ (8006be0 <OTM8009A_Init+0x3a0>)
 80068ae:	4628      	mov	r0, r5
 80068b0:	4619      	mov	r1, r3
 80068b2:	f000 fb6b 	bl	8006f8c <otm8009a_write_reg>
 80068b6:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[5], 0);
 80068b8:	2300      	movs	r3, #0
 80068ba:	4aca      	ldr	r2, [pc, #808]	@ (8006be4 <OTM8009A_Init+0x3a4>)
 80068bc:	21c4      	movs	r1, #196	@ 0xc4
 80068be:	4628      	mov	r0, r5
 80068c0:	f000 fb64 	bl	8006f8c <otm8009a_write_reg>
  (void)OTM8009A_IO_Delay(pObj, 10);
 80068c4:	210a      	movs	r1, #10
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[5], 0);
 80068c6:	4404      	add	r4, r0
  (void)OTM8009A_IO_Delay(pObj, 10);
 80068c8:	4638      	mov	r0, r7
 80068ca:	f7ff ffac 	bl	8006826 <OTM8009A_IO_Delay.isra.0>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[6], 0);
 80068ce:	2300      	movs	r3, #0
 80068d0:	4ac5      	ldr	r2, [pc, #788]	@ (8006be8 <OTM8009A_Init+0x3a8>)
 80068d2:	4628      	mov	r0, r5
 80068d4:	4619      	mov	r1, r3
 80068d6:	f000 fb59 	bl	8006f8c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[7], 0);
 80068da:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[6], 0);
 80068dc:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[7], 0);
 80068de:	4ac3      	ldr	r2, [pc, #780]	@ (8006bec <OTM8009A_Init+0x3ac>)
 80068e0:	21c5      	movs	r1, #197	@ 0xc5
 80068e2:	4628      	mov	r0, r5
 80068e4:	f000 fb52 	bl	8006f8c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[8], 0);
 80068e8:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[7], 0);
 80068ea:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[8], 0);
 80068ec:	4ac0      	ldr	r2, [pc, #768]	@ (8006bf0 <OTM8009A_Init+0x3b0>)
 80068ee:	4619      	mov	r1, r3
 80068f0:	4628      	mov	r0, r5
 80068f2:	f000 fb4b 	bl	8006f8c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[9], 0);
 80068f6:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[8], 0);
 80068f8:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[9], 0);
 80068fa:	4abe      	ldr	r2, [pc, #760]	@ (8006bf4 <OTM8009A_Init+0x3b4>)
 80068fc:	21c5      	movs	r1, #197	@ 0xc5
 80068fe:	4628      	mov	r0, r5
 8006900:	f000 fb44 	bl	8006f8c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[10], 0);
 8006904:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[9], 0);
 8006906:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[10], 0);
 8006908:	4abb      	ldr	r2, [pc, #748]	@ (8006bf8 <OTM8009A_Init+0x3b8>)
 800690a:	4619      	mov	r1, r3
 800690c:	4628      	mov	r0, r5
 800690e:	f000 fb3d 	bl	8006f8c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC0, &short_reg_data[11], 0);
 8006912:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[10], 0);
 8006914:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC0, &short_reg_data[11], 0);
 8006916:	4ab9      	ldr	r2, [pc, #740]	@ (8006bfc <OTM8009A_Init+0x3bc>)
 8006918:	21c0      	movs	r1, #192	@ 0xc0
 800691a:	4628      	mov	r0, r5
 800691c:	f000 fb36 	bl	8006f8c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8006920:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC0, &short_reg_data[11], 0);
 8006922:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8006924:	4aa9      	ldr	r2, [pc, #676]	@ (8006bcc <OTM8009A_Init+0x38c>)
 8006926:	4619      	mov	r1, r3
 8006928:	4628      	mov	r0, r5
 800692a:	f000 fb2f 	bl	8006f8c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xD9, &short_reg_data[12], 0);
 800692e:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8006930:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xD9, &short_reg_data[12], 0);
 8006932:	4ab3      	ldr	r2, [pc, #716]	@ (8006c00 <OTM8009A_Init+0x3c0>)
 8006934:	21d9      	movs	r1, #217	@ 0xd9
 8006936:	4628      	mov	r0, r5
 8006938:	f000 fb28 	bl	8006f8c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 800693c:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xD9, &short_reg_data[12], 0);
 800693e:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 8006940:	4ab0      	ldr	r2, [pc, #704]	@ (8006c04 <OTM8009A_Init+0x3c4>)
 8006942:	4619      	mov	r1, r3
 8006944:	4628      	mov	r0, r5
 8006946:	f000 fb21 	bl	8006f8c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[16], 0);
 800694a:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 800694c:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[16], 0);
 800694e:	4aae      	ldr	r2, [pc, #696]	@ (8006c08 <OTM8009A_Init+0x3c8>)
 8006950:	21c1      	movs	r1, #193	@ 0xc1
 8006952:	4628      	mov	r0, r5
 8006954:	f000 fb1a 	bl	8006f8c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[17], 0);
 8006958:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[16], 0);
 800695a:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[17], 0);
 800695c:	4aab      	ldr	r2, [pc, #684]	@ (8006c0c <OTM8009A_Init+0x3cc>)
 800695e:	4619      	mov	r1, r3
 8006960:	4628      	mov	r0, r5
 8006962:	f000 fb13 	bl	8006f8c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[18], 0);
 8006966:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[17], 0);
 8006968:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[18], 0);
 800696a:	4aa9      	ldr	r2, [pc, #676]	@ (8006c10 <OTM8009A_Init+0x3d0>)
 800696c:	21c5      	movs	r1, #197	@ 0xc5
 800696e:	4628      	mov	r0, r5
 8006970:	f000 fb0c 	bl	8006f8c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[19], 0);
 8006974:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[18], 0);
 8006976:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[19], 0);
 8006978:	4aa6      	ldr	r2, [pc, #664]	@ (8006c14 <OTM8009A_Init+0x3d4>)
 800697a:	4619      	mov	r1, r3
 800697c:	4628      	mov	r0, r5
 800697e:	f000 fb05 	bl	8006f8c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[9], 0);
 8006982:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[19], 0);
 8006984:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[9], 0);
 8006986:	4a9b      	ldr	r2, [pc, #620]	@ (8006bf4 <OTM8009A_Init+0x3b4>)
 8006988:	21c5      	movs	r1, #197	@ 0xc5
 800698a:	4628      	mov	r0, r5
 800698c:	f000 fafe 	bl	8006f8c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8006990:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[9], 0);
 8006992:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8006994:	4a8d      	ldr	r2, [pc, #564]	@ (8006bcc <OTM8009A_Init+0x38c>)
 8006996:	4619      	mov	r1, r3
 8006998:	4628      	mov	r0, r5
 800699a:	f000 faf7 	bl	8006f8c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xD8, lcd_reg_data5, 2);
 800699e:	2302      	movs	r3, #2
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 80069a0:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xD8, lcd_reg_data5, 2);
 80069a2:	4a9d      	ldr	r2, [pc, #628]	@ (8006c18 <OTM8009A_Init+0x3d8>)
 80069a4:	21d8      	movs	r1, #216	@ 0xd8
 80069a6:	4628      	mov	r0, r5
 80069a8:	f000 faf0 	bl	8006f8c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[20], 0);
 80069ac:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xD8, lcd_reg_data5, 2);
 80069ae:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[20], 0);
 80069b0:	4a9a      	ldr	r2, [pc, #616]	@ (8006c1c <OTM8009A_Init+0x3dc>)
 80069b2:	4619      	mov	r1, r3
 80069b4:	4628      	mov	r0, r5
 80069b6:	f000 fae9 	bl	8006f8c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[21], 0);
 80069ba:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[20], 0);
 80069bc:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[21], 0);
 80069be:	4a98      	ldr	r2, [pc, #608]	@ (8006c20 <OTM8009A_Init+0x3e0>)
 80069c0:	21c5      	movs	r1, #197	@ 0xc5
 80069c2:	4628      	mov	r0, r5
 80069c4:	f000 fae2 	bl	8006f8c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[22], 0);
 80069c8:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[21], 0);
 80069ca:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[22], 0);
 80069cc:	4a95      	ldr	r2, [pc, #596]	@ (8006c24 <OTM8009A_Init+0x3e4>)
 80069ce:	4619      	mov	r1, r3
 80069d0:	4628      	mov	r0, r5
 80069d2:	f000 fadb 	bl	8006f8c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC0, &short_reg_data[23], 0);
 80069d6:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[22], 0);
 80069d8:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC0, &short_reg_data[23], 0);
 80069da:	4a93      	ldr	r2, [pc, #588]	@ (8006c28 <OTM8009A_Init+0x3e8>)
 80069dc:	21c0      	movs	r1, #192	@ 0xc0
 80069de:	4628      	mov	r0, r5
 80069e0:	f000 fad4 	bl	8006f8c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[24], 0);
 80069e4:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC0, &short_reg_data[23], 0);
 80069e6:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[24], 0);
 80069e8:	4a90      	ldr	r2, [pc, #576]	@ (8006c2c <OTM8009A_Init+0x3ec>)
 80069ea:	4619      	mov	r1, r3
 80069ec:	4628      	mov	r0, r5
 80069ee:	f000 facd 	bl	8006f8c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[25], 0);
 80069f2:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[24], 0);
 80069f4:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[25], 0);
 80069f6:	4a8e      	ldr	r2, [pc, #568]	@ (8006c30 <OTM8009A_Init+0x3f0>)
 80069f8:	21c5      	movs	r1, #197	@ 0xc5
 80069fa:	4628      	mov	r0, r5
 80069fc:	f000 fac6 	bl	8006f8c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 8006a00:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[25], 0);
 8006a02:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 8006a04:	4a8b      	ldr	r2, [pc, #556]	@ (8006c34 <OTM8009A_Init+0x3f4>)
 8006a06:	4619      	mov	r1, r3
 8006a08:	4628      	mov	r0, r5
 8006a0a:	f000 fabf 	bl	8006f8c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[26], 0);
 8006a0e:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 8006a10:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[26], 0);
 8006a12:	4a89      	ldr	r2, [pc, #548]	@ (8006c38 <OTM8009A_Init+0x3f8>)
 8006a14:	21c4      	movs	r1, #196	@ 0xc4
 8006a16:	4628      	mov	r0, r5
 8006a18:	f000 fab8 	bl	8006f8c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 8006a1c:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[26], 0);
 8006a1e:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 8006a20:	4a78      	ldr	r2, [pc, #480]	@ (8006c04 <OTM8009A_Init+0x3c4>)
 8006a22:	4619      	mov	r1, r3
 8006a24:	4628      	mov	r0, r5
 8006a26:	f000 fab1 	bl	8006f8c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[27], 0);
 8006a2a:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 8006a2c:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[27], 0);
 8006a2e:	4a83      	ldr	r2, [pc, #524]	@ (8006c3c <OTM8009A_Init+0x3fc>)
 8006a30:	21c1      	movs	r1, #193	@ 0xc1
 8006a32:	4628      	mov	r0, r5
 8006a34:	f000 faaa 	bl	8006f8c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[28], 0);
 8006a38:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[27], 0);
 8006a3a:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[28], 0);
 8006a3c:	4a80      	ldr	r2, [pc, #512]	@ (8006c40 <OTM8009A_Init+0x400>)
 8006a3e:	4619      	mov	r1, r3
 8006a40:	4628      	mov	r0, r5
 8006a42:	f000 faa3 	bl	8006f8c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xB3, lcd_reg_data6, 2);
 8006a46:	2302      	movs	r3, #2
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[28], 0);
 8006a48:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xB3, lcd_reg_data6, 2);
 8006a4a:	4a7e      	ldr	r2, [pc, #504]	@ (8006c44 <OTM8009A_Init+0x404>)
 8006a4c:	21b3      	movs	r1, #179	@ 0xb3
 8006a4e:	4628      	mov	r0, r5
 8006a50:	f000 fa9c 	bl	8006f8c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8006a54:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xB3, lcd_reg_data6, 2);
 8006a56:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8006a58:	4a5e      	ldr	r2, [pc, #376]	@ (8006bd4 <OTM8009A_Init+0x394>)
 8006a5a:	4619      	mov	r1, r3
 8006a5c:	4628      	mov	r0, r5
 8006a5e:	f000 fa95 	bl	8006f8c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data7, 6);
 8006a62:	2306      	movs	r3, #6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8006a64:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data7, 6);
 8006a66:	4a78      	ldr	r2, [pc, #480]	@ (8006c48 <OTM8009A_Init+0x408>)
 8006a68:	21ce      	movs	r1, #206	@ 0xce
 8006a6a:	4628      	mov	r0, r5
 8006a6c:	f000 fa8e 	bl	8006f8c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 8006a70:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data7, 6);
 8006a72:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 8006a74:	4a75      	ldr	r2, [pc, #468]	@ (8006c4c <OTM8009A_Init+0x40c>)
 8006a76:	4619      	mov	r1, r3
 8006a78:	4628      	mov	r0, r5
 8006a7a:	f000 fa87 	bl	8006f8c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data8, 14);
 8006a7e:	230e      	movs	r3, #14
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 8006a80:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data8, 14);
 8006a82:	4a73      	ldr	r2, [pc, #460]	@ (8006c50 <OTM8009A_Init+0x410>)
 8006a84:	21ce      	movs	r1, #206	@ 0xce
 8006a86:	4628      	mov	r0, r5
 8006a88:	f000 fa80 	bl	8006f8c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 8006a8c:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data8, 14);
 8006a8e:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 8006a90:	4a70      	ldr	r2, [pc, #448]	@ (8006c54 <OTM8009A_Init+0x414>)
 8006a92:	4619      	mov	r1, r3
 8006a94:	4628      	mov	r0, r5
 8006a96:	f000 fa79 	bl	8006f8c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data9, 14);
 8006a9a:	230e      	movs	r3, #14
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 8006a9c:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data9, 14);
 8006a9e:	4a6e      	ldr	r2, [pc, #440]	@ (8006c58 <OTM8009A_Init+0x418>)
 8006aa0:	21ce      	movs	r1, #206	@ 0xce
 8006aa2:	4628      	mov	r0, r5
 8006aa4:	f000 fa72 	bl	8006f8c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 8006aa8:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data9, 14);
 8006aaa:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 8006aac:	4a6b      	ldr	r2, [pc, #428]	@ (8006c5c <OTM8009A_Init+0x41c>)
 8006aae:	4619      	mov	r1, r3
 8006ab0:	4628      	mov	r0, r5
 8006ab2:	f000 fa6b 	bl	8006f8c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCF, lcd_reg_data10, 10);
 8006ab6:	230a      	movs	r3, #10
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 8006ab8:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCF, lcd_reg_data10, 10);
 8006aba:	4a69      	ldr	r2, [pc, #420]	@ (8006c60 <OTM8009A_Init+0x420>)
 8006abc:	21cf      	movs	r1, #207	@ 0xcf
 8006abe:	4628      	mov	r0, r5
 8006ac0:	f000 fa64 	bl	8006f8c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 8006ac4:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCF, lcd_reg_data10, 10);
 8006ac6:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 8006ac8:	4a66      	ldr	r2, [pc, #408]	@ (8006c64 <OTM8009A_Init+0x424>)
 8006aca:	4619      	mov	r1, r3
 8006acc:	4628      	mov	r0, r5
 8006ace:	f000 fa5d 	bl	8006f8c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCF, &short_reg_data[45], 0);
 8006ad2:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 8006ad4:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCF, &short_reg_data[45], 0);
 8006ad6:	4a64      	ldr	r2, [pc, #400]	@ (8006c68 <OTM8009A_Init+0x428>)
 8006ad8:	21cf      	movs	r1, #207	@ 0xcf
 8006ada:	4628      	mov	r0, r5
 8006adc:	f000 fa56 	bl	8006f8c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8006ae0:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCF, &short_reg_data[45], 0);
 8006ae2:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8006ae4:	4a3b      	ldr	r2, [pc, #236]	@ (8006bd4 <OTM8009A_Init+0x394>)
 8006ae6:	4619      	mov	r1, r3
 8006ae8:	4628      	mov	r0, r5
 8006aea:	f000 fa4f 	bl	8006f8c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data11, 10);
 8006aee:	230a      	movs	r3, #10
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8006af0:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data11, 10);
 8006af2:	4a5e      	ldr	r2, [pc, #376]	@ (8006c6c <OTM8009A_Init+0x42c>)
 8006af4:	21cb      	movs	r1, #203	@ 0xcb
 8006af6:	4628      	mov	r0, r5
 8006af8:	f000 fa48 	bl	8006f8c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 8006afc:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data11, 10);
 8006afe:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 8006b00:	4a5b      	ldr	r2, [pc, #364]	@ (8006c70 <OTM8009A_Init+0x430>)
 8006b02:	4619      	mov	r1, r3
 8006b04:	4628      	mov	r0, r5
 8006b06:	f000 fa41 	bl	8006f8c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data12, 15);
 8006b0a:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 8006b0c:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data12, 15);
 8006b0e:	4a59      	ldr	r2, [pc, #356]	@ (8006c74 <OTM8009A_Init+0x434>)
 8006b10:	21cb      	movs	r1, #203	@ 0xcb
 8006b12:	4628      	mov	r0, r5
 8006b14:	f000 fa3a 	bl	8006f8c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 8006b18:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data12, 15);
 8006b1a:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 8006b1c:	4a4b      	ldr	r2, [pc, #300]	@ (8006c4c <OTM8009A_Init+0x40c>)
 8006b1e:	4619      	mov	r1, r3
 8006b20:	4628      	mov	r0, r5
 8006b22:	f000 fa33 	bl	8006f8c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data13, 15);
 8006b26:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 8006b28:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data13, 15);
 8006b2a:	4a53      	ldr	r2, [pc, #332]	@ (8006c78 <OTM8009A_Init+0x438>)
 8006b2c:	21cb      	movs	r1, #203	@ 0xcb
 8006b2e:	4628      	mov	r0, r5
 8006b30:	f000 fa2c 	bl	8006f8c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 8006b34:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data13, 15);
 8006b36:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 8006b38:	4a46      	ldr	r2, [pc, #280]	@ (8006c54 <OTM8009A_Init+0x414>)
 8006b3a:	4619      	mov	r1, r3
 8006b3c:	4628      	mov	r0, r5
 8006b3e:	f000 fa25 	bl	8006f8c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data14, 10);
 8006b42:	230a      	movs	r3, #10
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 8006b44:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data14, 10);
 8006b46:	4a4d      	ldr	r2, [pc, #308]	@ (8006c7c <OTM8009A_Init+0x43c>)
 8006b48:	21cb      	movs	r1, #203	@ 0xcb
 8006b4a:	4628      	mov	r0, r5
 8006b4c:	f000 fa1e 	bl	8006f8c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 8006b50:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data14, 10);
 8006b52:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 8006b54:	4a41      	ldr	r2, [pc, #260]	@ (8006c5c <OTM8009A_Init+0x41c>)
 8006b56:	4619      	mov	r1, r3
 8006b58:	4628      	mov	r0, r5
 8006b5a:	f000 fa17 	bl	8006f8c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data15, 15);
 8006b5e:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 8006b60:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data15, 15);
 8006b62:	4a47      	ldr	r2, [pc, #284]	@ (8006c80 <OTM8009A_Init+0x440>)
 8006b64:	21cb      	movs	r1, #203	@ 0xcb
 8006b66:	4628      	mov	r0, r5
 8006b68:	f000 fa10 	bl	8006f8c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 8006b6c:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data15, 15);
 8006b6e:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 8006b70:	4a3c      	ldr	r2, [pc, #240]	@ (8006c64 <OTM8009A_Init+0x424>)
 8006b72:	4619      	mov	r1, r3
 8006b74:	4628      	mov	r0, r5
 8006b76:	f000 fa09 	bl	8006f8c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data16, 15);
 8006b7a:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 8006b7c:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data16, 15);
 8006b7e:	4a41      	ldr	r2, [pc, #260]	@ (8006c84 <OTM8009A_Init+0x444>)
 8006b80:	21cb      	movs	r1, #203	@ 0xcb
 8006b82:	4628      	mov	r0, r5
 8006b84:	f000 fa02 	bl	8006f8c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[34], 0);
 8006b88:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data16, 15);
 8006b8a:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[34], 0);
 8006b8c:	4a3e      	ldr	r2, [pc, #248]	@ (8006c88 <OTM8009A_Init+0x448>)
 8006b8e:	4619      	mov	r1, r3
 8006b90:	4628      	mov	r0, r5
 8006b92:	f000 f9fb 	bl	8006f8c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data17, 10);
 8006b96:	230a      	movs	r3, #10
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[34], 0);
 8006b98:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data17, 10);
 8006b9a:	4a3c      	ldr	r2, [pc, #240]	@ (8006c8c <OTM8009A_Init+0x44c>)
 8006b9c:	21cb      	movs	r1, #203	@ 0xcb
 8006b9e:	4628      	mov	r0, r5
 8006ba0:	f000 f9f4 	bl	8006f8c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[35], 0);
 8006ba4:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data17, 10);
 8006ba6:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[35], 0);
 8006ba8:	4a39      	ldr	r2, [pc, #228]	@ (8006c90 <OTM8009A_Init+0x450>)
 8006baa:	4619      	mov	r1, r3
 8006bac:	4628      	mov	r0, r5
 8006bae:	f000 f9ed 	bl	8006f8c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data18, 10);
 8006bb2:	230a      	movs	r3, #10
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[35], 0);
 8006bb4:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data18, 10);
 8006bb6:	4a37      	ldr	r2, [pc, #220]	@ (8006c94 <OTM8009A_Init+0x454>)
 8006bb8:	21cb      	movs	r1, #203	@ 0xcb
 8006bba:	4628      	mov	r0, r5
 8006bbc:	f000 f9e6 	bl	8006f8c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8006bc0:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data18, 10);
 8006bc2:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8006bc4:	4a03      	ldr	r2, [pc, #12]	@ (8006bd4 <OTM8009A_Init+0x394>)
 8006bc6:	4619      	mov	r1, r3
 8006bc8:	4628      	mov	r0, r5
 8006bca:	e065      	b.n	8006c98 <OTM8009A_Init+0x458>
 8006bcc:	0802bfc1 	.word	0x0802bfc1
 8006bd0:	0802bfbd 	.word	0x0802bfbd
 8006bd4:	0802bfc2 	.word	0x0802bfc2
 8006bd8:	0802bfbb 	.word	0x0802bfbb
 8006bdc:	0802bfc3 	.word	0x0802bfc3
 8006be0:	0802bfc4 	.word	0x0802bfc4
 8006be4:	0802bfc5 	.word	0x0802bfc5
 8006be8:	0802bfc6 	.word	0x0802bfc6
 8006bec:	0802bfc7 	.word	0x0802bfc7
 8006bf0:	0802bfc8 	.word	0x0802bfc8
 8006bf4:	0802bfc9 	.word	0x0802bfc9
 8006bf8:	0802bfca 	.word	0x0802bfca
 8006bfc:	0802bfcb 	.word	0x0802bfcb
 8006c00:	0802bfcc 	.word	0x0802bfcc
 8006c04:	0802bfcf 	.word	0x0802bfcf
 8006c08:	0802bfd0 	.word	0x0802bfd0
 8006c0c:	0802bfd1 	.word	0x0802bfd1
 8006c10:	0802bfd2 	.word	0x0802bfd2
 8006c14:	0802bfd3 	.word	0x0802bfd3
 8006c18:	0802bfb9 	.word	0x0802bfb9
 8006c1c:	0802bfd4 	.word	0x0802bfd4
 8006c20:	0802bfd5 	.word	0x0802bfd5
 8006c24:	0802bfd6 	.word	0x0802bfd6
 8006c28:	0802bfd7 	.word	0x0802bfd7
 8006c2c:	0802bfd8 	.word	0x0802bfd8
 8006c30:	0802bfd9 	.word	0x0802bfd9
 8006c34:	0802bfcd 	.word	0x0802bfcd
 8006c38:	0802bfda 	.word	0x0802bfda
 8006c3c:	0802bfdb 	.word	0x0802bfdb
 8006c40:	0802bfdc 	.word	0x0802bfdc
 8006c44:	0802bfb7 	.word	0x0802bfb7
 8006c48:	0802bfb1 	.word	0x0802bfb1
 8006c4c:	0802bfdd 	.word	0x0802bfdd
 8006c50:	0802bfa3 	.word	0x0802bfa3
 8006c54:	0802bfde 	.word	0x0802bfde
 8006c58:	0802bf95 	.word	0x0802bf95
 8006c5c:	0802bfdf 	.word	0x0802bfdf
 8006c60:	0802bf8b 	.word	0x0802bf8b
 8006c64:	0802bfe0 	.word	0x0802bfe0
 8006c68:	0802bfed 	.word	0x0802bfed
 8006c6c:	0802bf81 	.word	0x0802bf81
 8006c70:	0802bfe1 	.word	0x0802bfe1
 8006c74:	0802bf72 	.word	0x0802bf72
 8006c78:	0802bf63 	.word	0x0802bf63
 8006c7c:	0802bf59 	.word	0x0802bf59
 8006c80:	0802bf4a 	.word	0x0802bf4a
 8006c84:	0802bf3b 	.word	0x0802bf3b
 8006c88:	0802bfe2 	.word	0x0802bfe2
 8006c8c:	0802bf31 	.word	0x0802bf31
 8006c90:	0802bfe3 	.word	0x0802bfe3
 8006c94:	0802bf27 	.word	0x0802bf27
 8006c98:	f000 f978 	bl	8006f8c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data19, 10);
 8006c9c:	230a      	movs	r3, #10
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8006c9e:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data19, 10);
 8006ca0:	4a8e      	ldr	r2, [pc, #568]	@ (8006edc <OTM8009A_Init+0x69c>)
 8006ca2:	21cc      	movs	r1, #204	@ 0xcc
 8006ca4:	4628      	mov	r0, r5
 8006ca6:	f000 f971 	bl	8006f8c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 8006caa:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data19, 10);
 8006cac:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 8006cae:	4a8c      	ldr	r2, [pc, #560]	@ (8006ee0 <OTM8009A_Init+0x6a0>)
 8006cb0:	4619      	mov	r1, r3
 8006cb2:	4628      	mov	r0, r5
 8006cb4:	f000 f96a 	bl	8006f8c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data20, 15);
 8006cb8:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 8006cba:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data20, 15);
 8006cbc:	4a89      	ldr	r2, [pc, #548]	@ (8006ee4 <OTM8009A_Init+0x6a4>)
 8006cbe:	21cc      	movs	r1, #204	@ 0xcc
 8006cc0:	4628      	mov	r0, r5
 8006cc2:	f000 f963 	bl	8006f8c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 8006cc6:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data20, 15);
 8006cc8:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 8006cca:	4a87      	ldr	r2, [pc, #540]	@ (8006ee8 <OTM8009A_Init+0x6a8>)
 8006ccc:	4619      	mov	r1, r3
 8006cce:	4628      	mov	r0, r5
 8006cd0:	f000 f95c 	bl	8006f8c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data21, 15);
 8006cd4:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 8006cd6:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data21, 15);
 8006cd8:	4a84      	ldr	r2, [pc, #528]	@ (8006eec <OTM8009A_Init+0x6ac>)
 8006cda:	21cc      	movs	r1, #204	@ 0xcc
 8006cdc:	4628      	mov	r0, r5
 8006cde:	f000 f955 	bl	8006f8c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 8006ce2:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data21, 15);
 8006ce4:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 8006ce6:	4a82      	ldr	r2, [pc, #520]	@ (8006ef0 <OTM8009A_Init+0x6b0>)
 8006ce8:	4619      	mov	r1, r3
 8006cea:	4628      	mov	r0, r5
 8006cec:	f000 f94e 	bl	8006f8c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data22, 10);
 8006cf0:	230a      	movs	r3, #10
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 8006cf2:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data22, 10);
 8006cf4:	4a7f      	ldr	r2, [pc, #508]	@ (8006ef4 <OTM8009A_Init+0x6b4>)
 8006cf6:	21cc      	movs	r1, #204	@ 0xcc
 8006cf8:	4628      	mov	r0, r5
 8006cfa:	f000 f947 	bl	8006f8c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 8006cfe:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data22, 10);
 8006d00:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 8006d02:	4a7d      	ldr	r2, [pc, #500]	@ (8006ef8 <OTM8009A_Init+0x6b8>)
 8006d04:	4619      	mov	r1, r3
 8006d06:	4628      	mov	r0, r5
 8006d08:	f000 f940 	bl	8006f8c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data23, 15);
 8006d0c:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 8006d0e:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data23, 15);
 8006d10:	4a7a      	ldr	r2, [pc, #488]	@ (8006efc <OTM8009A_Init+0x6bc>)
 8006d12:	21cc      	movs	r1, #204	@ 0xcc
 8006d14:	4628      	mov	r0, r5
 8006d16:	f000 f939 	bl	8006f8c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 8006d1a:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data23, 15);
 8006d1c:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 8006d1e:	4a78      	ldr	r2, [pc, #480]	@ (8006f00 <OTM8009A_Init+0x6c0>)
 8006d20:	4619      	mov	r1, r3
 8006d22:	4628      	mov	r0, r5
 8006d24:	f000 f932 	bl	8006f8c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data24, 15);
 8006d28:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 8006d2a:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data24, 15);
 8006d2c:	4a75      	ldr	r2, [pc, #468]	@ (8006f04 <OTM8009A_Init+0x6c4>)
 8006d2e:	21cc      	movs	r1, #204	@ 0xcc
 8006d30:	4628      	mov	r0, r5
 8006d32:	f000 f92b 	bl	8006f8c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 8006d36:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data24, 15);
 8006d38:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 8006d3a:	4a73      	ldr	r2, [pc, #460]	@ (8006f08 <OTM8009A_Init+0x6c8>)
 8006d3c:	4619      	mov	r1, r3
 8006d3e:	4628      	mov	r0, r5
 8006d40:	f000 f924 	bl	8006f8c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[46], 0);
 8006d44:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 8006d46:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[46], 0);
 8006d48:	4a70      	ldr	r2, [pc, #448]	@ (8006f0c <OTM8009A_Init+0x6cc>)
 8006d4a:	21c5      	movs	r1, #197	@ 0xc5
 8006d4c:	4628      	mov	r0, r5
 8006d4e:	f000 f91d 	bl	8006f8c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[47], 0);
 8006d52:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[46], 0);
 8006d54:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[47], 0);
 8006d56:	4a6e      	ldr	r2, [pc, #440]	@ (8006f10 <OTM8009A_Init+0x6d0>)
 8006d58:	4619      	mov	r1, r3
 8006d5a:	4628      	mov	r0, r5
 8006d5c:	f000 f916 	bl	8006f8c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xF5, &short_reg_data[48], 0);
 8006d60:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[47], 0);
 8006d62:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xF5, &short_reg_data[48], 0);
 8006d64:	4a6b      	ldr	r2, [pc, #428]	@ (8006f14 <OTM8009A_Init+0x6d4>)
 8006d66:	21f5      	movs	r1, #245	@ 0xf5
 8006d68:	4628      	mov	r0, r5
 8006d6a:	f000 f90f 	bl	8006f8c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[49], 0);
 8006d6e:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xF5, &short_reg_data[48], 0);
 8006d70:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[49], 0);
 8006d72:	4a69      	ldr	r2, [pc, #420]	@ (8006f18 <OTM8009A_Init+0x6d8>)
 8006d74:	4619      	mov	r1, r3
 8006d76:	4628      	mov	r0, r5
 8006d78:	f000 f908 	bl	8006f8c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC6, &short_reg_data[50], 0);
 8006d7c:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[49], 0);
 8006d7e:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC6, &short_reg_data[50], 0);
 8006d80:	4a66      	ldr	r2, [pc, #408]	@ (8006f1c <OTM8009A_Init+0x6dc>)
 8006d82:	21c6      	movs	r1, #198	@ 0xc6
 8006d84:	4628      	mov	r0, r5
 8006d86:	f000 f901 	bl	8006f8c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8006d8a:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC6, &short_reg_data[50], 0);
 8006d8c:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8006d8e:	4a64      	ldr	r2, [pc, #400]	@ (8006f20 <OTM8009A_Init+0x6e0>)
 8006d90:	4619      	mov	r1, r3
 8006d92:	4628      	mov	r0, r5
 8006d94:	f000 f8fa 	bl	8006f8c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data25, 3);
 8006d98:	2303      	movs	r3, #3
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8006d9a:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data25, 3);
 8006d9c:	4a61      	ldr	r2, [pc, #388]	@ (8006f24 <OTM8009A_Init+0x6e4>)
 8006d9e:	21ff      	movs	r1, #255	@ 0xff
 8006da0:	4628      	mov	r0, r5
 8006da2:	f000 f8f3 	bl	8006f8c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8006da6:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data25, 3);
 8006da8:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8006daa:	4a5d      	ldr	r2, [pc, #372]	@ (8006f20 <OTM8009A_Init+0x6e0>)
 8006dac:	4619      	mov	r1, r3
 8006dae:	4628      	mov	r0, r5
 8006db0:	f000 f8ec 	bl	8006f8c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8006db4:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8006db6:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8006db8:	4a59      	ldr	r2, [pc, #356]	@ (8006f20 <OTM8009A_Init+0x6e0>)
 8006dba:	4619      	mov	r1, r3
 8006dbc:	4628      	mov	r0, r5
 8006dbe:	f000 f8e5 	bl	8006f8c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xE1, lcd_reg_data3, 16);
 8006dc2:	2310      	movs	r3, #16
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8006dc4:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xE1, lcd_reg_data3, 16);
 8006dc6:	4a58      	ldr	r2, [pc, #352]	@ (8006f28 <OTM8009A_Init+0x6e8>)
 8006dc8:	21e1      	movs	r1, #225	@ 0xe1
 8006dca:	4628      	mov	r0, r5
 8006dcc:	f000 f8de 	bl	8006f8c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8006dd0:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xE1, lcd_reg_data3, 16);
 8006dd2:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8006dd4:	4a52      	ldr	r2, [pc, #328]	@ (8006f20 <OTM8009A_Init+0x6e0>)
 8006dd6:	4619      	mov	r1, r3
 8006dd8:	4628      	mov	r0, r5
 8006dda:	f000 f8d7 	bl	8006f8c <otm8009a_write_reg>
 8006dde:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xE2, lcd_reg_data4, 16);
 8006de0:	2310      	movs	r3, #16
 8006de2:	4a52      	ldr	r2, [pc, #328]	@ (8006f2c <OTM8009A_Init+0x6ec>)
 8006de4:	21e2      	movs	r1, #226	@ 0xe2
 8006de6:	4628      	mov	r0, r5
 8006de8:	f000 f8d0 	bl	8006f8c <otm8009a_write_reg>
 8006dec:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_SLPOUT, &short_reg_data[36], 0);
 8006dee:	2300      	movs	r3, #0
 8006df0:	4a4f      	ldr	r2, [pc, #316]	@ (8006f30 <OTM8009A_Init+0x6f0>)
 8006df2:	2111      	movs	r1, #17
 8006df4:	4628      	mov	r0, r5
 8006df6:	f000 f8c9 	bl	8006f8c <otm8009a_write_reg>
  (void)OTM8009A_IO_Delay(pObj, 120);
 8006dfa:	2178      	movs	r1, #120	@ 0x78
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_SLPOUT, &short_reg_data[36], 0);
 8006dfc:	4404      	add	r4, r0
  (void)OTM8009A_IO_Delay(pObj, 120);
 8006dfe:	4638      	mov	r0, r7
 8006e00:	f7ff fd11 	bl	8006826 <OTM8009A_IO_Delay.isra.0>
  switch(ColorCoding)
 8006e04:	4f4b      	ldr	r7, [pc, #300]	@ (8006f34 <OTM8009A_Init+0x6f4>)
 8006e06:	2e00      	cmp	r6, #0
 8006e08:	d061      	beq.n	8006ece <OTM8009A_Init+0x68e>
 8006e0a:	2e02      	cmp	r6, #2
 8006e0c:	d107      	bne.n	8006e1e <OTM8009A_Init+0x5de>
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_COLMOD, &short_reg_data[37], 0);
 8006e0e:	2300      	movs	r3, #0
 8006e10:	4a49      	ldr	r2, [pc, #292]	@ (8006f38 <OTM8009A_Init+0x6f8>)
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_COLMOD, &short_reg_data[38], 0);
 8006e12:	213a      	movs	r1, #58	@ 0x3a
 8006e14:	4628      	mov	r0, r5
 8006e16:	f000 f8b9 	bl	8006f8c <otm8009a_write_reg>
 8006e1a:	4404      	add	r4, r0
    OTM8009ACtx.ColorCode = OTM8009A_FORMAT_RGB888;
 8006e1c:	607e      	str	r6, [r7, #4]
  if(Orientation == OTM8009A_ORIENTATION_LANDSCAPE)
 8006e1e:	f1b8 0f01 	cmp.w	r8, #1
 8006e22:	d157      	bne.n	8006ed4 <OTM8009A_Init+0x694>
	uint8_t tmp = OTM8009A_MADCTR_MODE_LANDSCAPE;
 8006e24:	2360      	movs	r3, #96	@ 0x60
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_MADCTR, &tmp, 0);
 8006e26:	f10d 0207 	add.w	r2, sp, #7
 8006e2a:	2136      	movs	r1, #54	@ 0x36
 8006e2c:	4628      	mov	r0, r5
	uint8_t tmp = OTM8009A_MADCTR_MODE_LANDSCAPE;
 8006e2e:	f88d 3007 	strb.w	r3, [sp, #7]
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_MADCTR, &tmp, 0);
 8006e32:	2300      	movs	r3, #0
 8006e34:	f000 f8aa 	bl	8006f8c <otm8009a_write_reg>
 8006e38:	1826      	adds	r6, r4, r0
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_CASET, LcdRegData27, 4);
 8006e3a:	2304      	movs	r3, #4
 8006e3c:	4a3f      	ldr	r2, [pc, #252]	@ (8006f3c <OTM8009A_Init+0x6fc>)
 8006e3e:	212a      	movs	r1, #42	@ 0x2a
 8006e40:	4628      	mov	r0, r5
 8006e42:	f000 f8a3 	bl	8006f8c <otm8009a_write_reg>
 8006e46:	4406      	add	r6, r0
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_PASET, LcdRegData28, 4);
 8006e48:	2304      	movs	r3, #4
 8006e4a:	4a3d      	ldr	r2, [pc, #244]	@ (8006f40 <OTM8009A_Init+0x700>)
 8006e4c:	212b      	movs	r1, #43	@ 0x2b
 8006e4e:	4628      	mov	r0, r5
 8006e50:	f000 f89c 	bl	8006f8c <otm8009a_write_reg>
 8006e54:	1834      	adds	r4, r6, r0
    OTM8009ACtx.Orientation = OTM8009A_ORIENTATION_LANDSCAPE;
 8006e56:	f8c7 8000 	str.w	r8, [r7]
  OTM8009ACtx.Brightness = ((uint32_t)short_reg_data[39] / 0xFFU) * 100U;
 8006e5a:	2600      	movs	r6, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRDISBV, &short_reg_data[39], 0);
 8006e5c:	2300      	movs	r3, #0
 8006e5e:	4a39      	ldr	r2, [pc, #228]	@ (8006f44 <OTM8009A_Init+0x704>)
 8006e60:	2151      	movs	r1, #81	@ 0x51
 8006e62:	4628      	mov	r0, r5
 8006e64:	f000 f892 	bl	8006f8c <otm8009a_write_reg>
 8006e68:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRCTRLD, &short_reg_data[40], 0);
 8006e6a:	4633      	mov	r3, r6
 8006e6c:	4a36      	ldr	r2, [pc, #216]	@ (8006f48 <OTM8009A_Init+0x708>)
 8006e6e:	2153      	movs	r1, #83	@ 0x53
 8006e70:	4628      	mov	r0, r5
  OTM8009ACtx.Brightness = ((uint32_t)short_reg_data[39] / 0xFFU) * 100U;
 8006e72:	60be      	str	r6, [r7, #8]
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRCTRLD, &short_reg_data[40], 0);
 8006e74:	f000 f88a 	bl	8006f8c <otm8009a_write_reg>
 8006e78:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRCABC, &short_reg_data[41], 0);
 8006e7a:	4633      	mov	r3, r6
 8006e7c:	4a33      	ldr	r2, [pc, #204]	@ (8006f4c <OTM8009A_Init+0x70c>)
 8006e7e:	2155      	movs	r1, #85	@ 0x55
 8006e80:	4628      	mov	r0, r5
 8006e82:	f000 f883 	bl	8006f8c <otm8009a_write_reg>
 8006e86:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRCABCMB, &short_reg_data[42], 0);
 8006e88:	4633      	mov	r3, r6
 8006e8a:	4a31      	ldr	r2, [pc, #196]	@ (8006f50 <OTM8009A_Init+0x710>)
 8006e8c:	215e      	movs	r1, #94	@ 0x5e
 8006e8e:	4628      	mov	r0, r5
 8006e90:	f000 f87c 	bl	8006f8c <otm8009a_write_reg>
 8006e94:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_DISPON, &short_reg_data[43], 0);
 8006e96:	4633      	mov	r3, r6
 8006e98:	4a2e      	ldr	r2, [pc, #184]	@ (8006f54 <OTM8009A_Init+0x714>)
 8006e9a:	2129      	movs	r1, #41	@ 0x29
 8006e9c:	4628      	mov	r0, r5
 8006e9e:	f000 f875 	bl	8006f8c <otm8009a_write_reg>
 8006ea2:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8006ea4:	4633      	mov	r3, r6
 8006ea6:	4631      	mov	r1, r6
 8006ea8:	4a1d      	ldr	r2, [pc, #116]	@ (8006f20 <OTM8009A_Init+0x6e0>)
 8006eaa:	4628      	mov	r0, r5
 8006eac:	f000 f86e 	bl	8006f8c <otm8009a_write_reg>
 8006eb0:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_RAMWR, &short_reg_data[44], 0);
 8006eb2:	4633      	mov	r3, r6
 8006eb4:	4a28      	ldr	r2, [pc, #160]	@ (8006f58 <OTM8009A_Init+0x718>)
 8006eb6:	212c      	movs	r1, #44	@ 0x2c
 8006eb8:	4628      	mov	r0, r5
 8006eba:	f000 f867 	bl	8006f8c <otm8009a_write_reg>
  if(ret != OTM8009A_OK)
 8006ebe:	42c4      	cmn	r4, r0
}
 8006ec0:	bf14      	ite	ne
 8006ec2:	f04f 30ff 	movne.w	r0, #4294967295
 8006ec6:	4630      	moveq	r0, r6
 8006ec8:	b002      	add	sp, #8
 8006eca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_COLMOD, &short_reg_data[38], 0);
 8006ece:	4633      	mov	r3, r6
 8006ed0:	4a22      	ldr	r2, [pc, #136]	@ (8006f5c <OTM8009A_Init+0x71c>)
 8006ed2:	e79e      	b.n	8006e12 <OTM8009A_Init+0x5d2>
    OTM8009ACtx.Orientation = OTM8009A_ORIENTATION_PORTRAIT;
 8006ed4:	2300      	movs	r3, #0
 8006ed6:	603b      	str	r3, [r7, #0]
 8006ed8:	e7bf      	b.n	8006e5a <OTM8009A_Init+0x61a>
 8006eda:	bf00      	nop
 8006edc:	0802bf1d 	.word	0x0802bf1d
 8006ee0:	0802bfe1 	.word	0x0802bfe1
 8006ee4:	0802bf0e 	.word	0x0802bf0e
 8006ee8:	0802bfdd 	.word	0x0802bfdd
 8006eec:	0802beff 	.word	0x0802beff
 8006ef0:	0802bfde 	.word	0x0802bfde
 8006ef4:	0802bef5 	.word	0x0802bef5
 8006ef8:	0802bfdf 	.word	0x0802bfdf
 8006efc:	0802bee6 	.word	0x0802bee6
 8006f00:	0802bfe0 	.word	0x0802bfe0
 8006f04:	0802bed7 	.word	0x0802bed7
 8006f08:	0802bfcd 	.word	0x0802bfcd
 8006f0c:	0802bfee 	.word	0x0802bfee
 8006f10:	0802bfef 	.word	0x0802bfef
 8006f14:	0802bff0 	.word	0x0802bff0
 8006f18:	0802bff1 	.word	0x0802bff1
 8006f1c:	0802bff2 	.word	0x0802bff2
 8006f20:	0802bfc1 	.word	0x0802bfc1
 8006f24:	0802bed4 	.word	0x0802bed4
 8006f28:	0802bec4 	.word	0x0802bec4
 8006f2c:	0802beb4 	.word	0x0802beb4
 8006f30:	0802bfe4 	.word	0x0802bfe4
 8006f34:	2400ee24 	.word	0x2400ee24
 8006f38:	0802bfe5 	.word	0x0802bfe5
 8006f3c:	0802bff7 	.word	0x0802bff7
 8006f40:	0802bff3 	.word	0x0802bff3
 8006f44:	0802bfe7 	.word	0x0802bfe7
 8006f48:	0802bfe8 	.word	0x0802bfe8
 8006f4c:	0802bfe9 	.word	0x0802bfe9
 8006f50:	0802bfea 	.word	0x0802bfea
 8006f54:	0802bfeb 	.word	0x0802bfeb
 8006f58:	0802bfec 	.word	0x0802bfec
 8006f5c:	0802bfe6 	.word	0x0802bfe6

08006f60 <OTM8009A_RegisterBusIO>:
  if(pObj == NULL)
 8006f60:	b160      	cbz	r0, 8006f7c <OTM8009A_RegisterBusIO+0x1c>
    pObj->IO.WriteReg  = pIO->WriteReg;
 8006f62:	684b      	ldr	r3, [r1, #4]
 8006f64:	6043      	str	r3, [r0, #4]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8006f66:	688b      	ldr	r3, [r1, #8]
 8006f68:	6083      	str	r3, [r0, #8]
    pObj->IO.GetTick   = pIO->GetTick;
 8006f6a:	68cb      	ldr	r3, [r1, #12]
    pObj->Ctx.handle   = pObj;
 8006f6c:	6180      	str	r0, [r0, #24]
    pObj->IO.GetTick   = pIO->GetTick;
 8006f6e:	60c3      	str	r3, [r0, #12]
    pObj->Ctx.ReadReg  = OTM8009A_ReadRegWrap;
 8006f70:	4b04      	ldr	r3, [pc, #16]	@ (8006f84 <OTM8009A_RegisterBusIO+0x24>)
 8006f72:	6143      	str	r3, [r0, #20]
    pObj->Ctx.WriteReg = OTM8009A_WriteRegWrap;
 8006f74:	4b04      	ldr	r3, [pc, #16]	@ (8006f88 <OTM8009A_RegisterBusIO+0x28>)
 8006f76:	6103      	str	r3, [r0, #16]
  int32_t ret = OTM8009A_OK;
 8006f78:	2000      	movs	r0, #0
 8006f7a:	4770      	bx	lr
    ret = OTM8009A_ERROR;
 8006f7c:	f04f 30ff 	mov.w	r0, #4294967295
}
 8006f80:	4770      	bx	lr
 8006f82:	bf00      	nop
 8006f84:	0800680b 	.word	0x0800680b
 8006f88:	08006819 	.word	0x08006819

08006f8c <otm8009a_write_reg>:
*                 I2C or SPI writing function
* Input         : Register Address, Data to be written, length of buffer
* Output        : None
*******************************************************************************/
int32_t otm8009a_write_reg(otm8009a_ctx_t *ctx, uint16_t reg, const uint8_t *pdata, uint16_t length)
{
 8006f8c:	b410      	push	{r4}
  return ctx->WriteReg(ctx->handle, reg, (uint8_t *)pdata, length);
 8006f8e:	6804      	ldr	r4, [r0, #0]
 8006f90:	6880      	ldr	r0, [r0, #8]
 8006f92:	46a4      	mov	ip, r4
}
 8006f94:	f85d 4b04 	ldr.w	r4, [sp], #4
  return ctx->WriteReg(ctx->handle, reg, (uint8_t *)pdata, length);
 8006f98:	4760      	bx	ip
	...

08006f9c <BSP_I2C4_DeInit>:
  */
int32_t BSP_I2C4_DeInit(void)
{
  int32_t ret  = BSP_ERROR_NONE;

  I2c4InitCounter--;
 8006f9c:	4a10      	ldr	r2, [pc, #64]	@ (8006fe0 <BSP_I2C4_DeInit+0x44>)
{
 8006f9e:	b508      	push	{r3, lr}
  I2c4InitCounter--;
 8006fa0:	6813      	ldr	r3, [r2, #0]
 8006fa2:	3b01      	subs	r3, #1
 8006fa4:	6013      	str	r3, [r2, #0]
  if (I2c4InitCounter == 0U)
 8006fa6:	b10b      	cbz	r3, 8006fac <BSP_I2C4_DeInit+0x10>
  int32_t ret  = BSP_ERROR_NONE;
 8006fa8:	2000      	movs	r0, #0
      ret = BSP_ERROR_BUS_FAILURE;
    }
  }

  return ret;
}
 8006faa:	bd08      	pop	{r3, pc}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phi2c);

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = BUS_I2C4_SCL_PIN;
  HAL_GPIO_DeInit(BUS_I2C4_SCL_GPIO_PORT, gpio_init_structure.Pin );
 8006fac:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8006fb0:	480c      	ldr	r0, [pc, #48]	@ (8006fe4 <BSP_I2C4_DeInit+0x48>)
 8006fb2:	f001 fe3d 	bl	8008c30 <HAL_GPIO_DeInit>
  gpio_init_structure.Pin = BUS_I2C4_SDA_PIN;
  HAL_GPIO_DeInit(BUS_I2C4_SDA_GPIO_PORT, gpio_init_structure.Pin);
 8006fb6:	480b      	ldr	r0, [pc, #44]	@ (8006fe4 <BSP_I2C4_DeInit+0x48>)
 8006fb8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8006fbc:	f001 fe38 	bl	8008c30 <HAL_GPIO_DeInit>

  /* Disable I2C clock */
  BUS_I2C4_CLK_DISABLE();
 8006fc0:	4a09      	ldr	r2, [pc, #36]	@ (8006fe8 <BSP_I2C4_DeInit+0x4c>)
    if (HAL_I2C_DeInit(&hbus_i2c4) != HAL_OK)
 8006fc2:	480a      	ldr	r0, [pc, #40]	@ (8006fec <BSP_I2C4_DeInit+0x50>)
  BUS_I2C4_CLK_DISABLE();
 8006fc4:	f8d2 30f4 	ldr.w	r3, [r2, #244]	@ 0xf4
 8006fc8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006fcc:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
    if (HAL_I2C_DeInit(&hbus_i2c4) != HAL_OK)
 8006fd0:	f002 f87e 	bl	80090d0 <HAL_I2C_DeInit>
 8006fd4:	2800      	cmp	r0, #0
 8006fd6:	d0e7      	beq.n	8006fa8 <BSP_I2C4_DeInit+0xc>
      ret = BSP_ERROR_BUS_FAILURE;
 8006fd8:	f06f 0007 	mvn.w	r0, #7
  return ret;
 8006fdc:	e7e5      	b.n	8006faa <BSP_I2C4_DeInit+0xe>
 8006fde:	bf00      	nop
 8006fe0:	2400f888 	.word	0x2400f888
 8006fe4:	58020c00 	.word	0x58020c00
 8006fe8:	58024400 	.word	0x58024400
 8006fec:	2400ee30 	.word	0x2400ee30

08006ff0 <MX_I2C4_Init>:
  hI2c->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8006ff0:	2300      	movs	r3, #0
 8006ff2:	2201      	movs	r2, #1
{
 8006ff4:	b510      	push	{r4, lr}
  hI2c->Init.Timing           = timing;
 8006ff6:	6041      	str	r1, [r0, #4]
{
 8006ff8:	4604      	mov	r4, r0
  hI2c->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8006ffa:	6203      	str	r3, [r0, #32]
  hI2c->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8006ffc:	e9c0 3202 	strd	r3, r2, [r0, #8]
  hI2c->Init.OwnAddress2      = 0;
 8007000:	e9c0 3304 	strd	r3, r3, [r0, #16]
  hI2c->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8007004:	e9c0 3306 	strd	r3, r3, [r0, #24]
  if (HAL_I2C_Init(hI2c) != HAL_OK)
 8007008:	f002 f80c 	bl	8009024 <HAL_I2C_Init>
 800700c:	4601      	mov	r1, r0
 800700e:	b108      	cbz	r0, 8007014 <MX_I2C4_Init+0x24>
    status = HAL_ERROR;
 8007010:	2001      	movs	r0, #1
}
 8007012:	bd10      	pop	{r4, pc}
    if (HAL_I2CEx_ConfigAnalogFilter(hI2c, analog_filter) != HAL_OK)
 8007014:	4620      	mov	r0, r4
 8007016:	f002 fa32 	bl	800947e <HAL_I2CEx_ConfigAnalogFilter>
 800701a:	4601      	mov	r1, r0
 800701c:	2800      	cmp	r0, #0
 800701e:	d1f7      	bne.n	8007010 <MX_I2C4_Init+0x20>
      if (HAL_I2CEx_ConfigDigitalFilter(hI2c, I2C_DIGITAL_FILTER_COEF) != HAL_OK)
 8007020:	4620      	mov	r0, r4
 8007022:	f002 fa52 	bl	80094ca <HAL_I2CEx_ConfigDigitalFilter>
 8007026:	3800      	subs	r0, #0
 8007028:	bf18      	it	ne
 800702a:	2001      	movne	r0, #1
 800702c:	e7f1      	b.n	8007012 <MX_I2C4_Init+0x22>
	...

08007030 <BSP_I2C4_Init>:
  hbus_i2c4.Instance = BUS_I2C4;
 8007030:	4ba1      	ldr	r3, [pc, #644]	@ (80072b8 <BSP_I2C4_Init+0x288>)
 8007032:	48a2      	ldr	r0, [pc, #648]	@ (80072bc <BSP_I2C4_Init+0x28c>)
{
 8007034:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  hbus_i2c4.Instance = BUS_I2C4;
 8007038:	6003      	str	r3, [r0, #0]
{
 800703a:	b093      	sub	sp, #76	@ 0x4c
  if (I2c4InitCounter == 0U)
 800703c:	4ba0      	ldr	r3, [pc, #640]	@ (80072c0 <BSP_I2C4_Init+0x290>)
 800703e:	681c      	ldr	r4, [r3, #0]
 8007040:	b11c      	cbz	r4, 800704a <BSP_I2C4_Init+0x1a>
  int32_t ret = BSP_ERROR_NONE;
 8007042:	2000      	movs	r0, #0
}
 8007044:	b013      	add	sp, #76	@ 0x4c
 8007046:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    I2c4InitCounter++;
 800704a:	2201      	movs	r2, #1
 800704c:	601a      	str	r2, [r3, #0]
    if (HAL_I2C_GetState(&hbus_i2c4) == HAL_I2C_STATE_RESET)
 800704e:	f002 fa11 	bl	8009474 <HAL_I2C_GetState>
 8007052:	2800      	cmp	r0, #0
 8007054:	d1f5      	bne.n	8007042 <BSP_I2C4_Init+0x12>
  BUS_I2C4_SCL_GPIO_CLK_ENABLE();
 8007056:	4d9b      	ldr	r5, [pc, #620]	@ (80072c4 <BSP_I2C4_Init+0x294>)
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
 8007058:	f04f 0812 	mov.w	r8, #18
  gpio_init_structure.Alternate = BUS_I2C4_SCL_AF;
 800705c:	2702      	movs	r7, #2
 800705e:	2604      	movs	r6, #4
  BUS_I2C4_SCL_GPIO_CLK_ENABLE();
 8007060:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
  HAL_GPIO_Init(BUS_I2C4_SCL_GPIO_PORT, &gpio_init_structure);
 8007064:	a90d      	add	r1, sp, #52	@ 0x34
 8007066:	4898      	ldr	r0, [pc, #608]	@ (80072c8 <BSP_I2C4_Init+0x298>)
  BUS_I2C4_SCL_GPIO_CLK_ENABLE();
 8007068:	f043 0308 	orr.w	r3, r3, #8
 800706c:	f8c5 30e0 	str.w	r3, [r5, #224]	@ 0xe0
 8007070:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
 8007074:	f003 0308 	and.w	r3, r3, #8
 8007078:	930a      	str	r3, [sp, #40]	@ 0x28
 800707a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
  BUS_I2C4_SDA_GPIO_CLK_ENABLE();
 800707c:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
 8007080:	f043 0308 	orr.w	r3, r3, #8
 8007084:	f8c5 30e0 	str.w	r3, [r5, #224]	@ 0xe0
 8007088:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
  gpio_init_structure.Pull      = GPIO_NOPULL;
 800708c:	940f      	str	r4, [sp, #60]	@ 0x3c
  BUS_I2C4_SDA_GPIO_CLK_ENABLE();
 800708e:	f003 0308 	and.w	r3, r3, #8
 8007092:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007094:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
 8007096:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
  gpio_init_structure.Alternate = BUS_I2C4_SCL_AF;
 800709a:	e9cd 7610 	strd	r7, r6, [sp, #64]	@ 0x40
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
 800709e:	e9cd 380d 	strd	r3, r8, [sp, #52]	@ 0x34
  HAL_GPIO_Init(BUS_I2C4_SCL_GPIO_PORT, &gpio_init_structure);
 80070a2:	f001 fcdd 	bl	8008a60 <HAL_GPIO_Init>
  gpio_init_structure.Pin       = BUS_I2C4_SDA_PIN;
 80070a6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
  HAL_GPIO_Init(BUS_I2C4_SDA_GPIO_PORT, &gpio_init_structure);
 80070aa:	a90d      	add	r1, sp, #52	@ 0x34
 80070ac:	4886      	ldr	r0, [pc, #536]	@ (80072c8 <BSP_I2C4_Init+0x298>)
  gpio_init_structure.Alternate = BUS_I2C4_SDA_AF;
 80070ae:	9611      	str	r6, [sp, #68]	@ 0x44
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
 80070b0:	e9cd 380d 	strd	r3, r8, [sp, #52]	@ 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 80070b4:	e9cd 470f 	strd	r4, r7, [sp, #60]	@ 0x3c
  HAL_GPIO_Init(BUS_I2C4_SDA_GPIO_PORT, &gpio_init_structure);
 80070b8:	f001 fcd2 	bl	8008a60 <HAL_GPIO_Init>
  BUS_I2C4_CLK_ENABLE();
 80070bc:	f8d5 30f4 	ldr.w	r3, [r5, #244]	@ 0xf4
 80070c0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80070c4:	f8c5 30f4 	str.w	r3, [r5, #244]	@ 0xf4
 80070c8:	f8d5 30f4 	ldr.w	r3, [r5, #244]	@ 0xf4
 80070cc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80070d0:	930c      	str	r3, [sp, #48]	@ 0x30
 80070d2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
  BUS_I2C4_FORCE_RESET();
 80070d4:	f8d5 309c 	ldr.w	r3, [r5, #156]	@ 0x9c
 80070d8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80070dc:	f8c5 309c 	str.w	r3, [r5, #156]	@ 0x9c
  BUS_I2C4_RELEASE_RESET();
 80070e0:	f8d5 309c 	ldr.w	r3, [r5, #156]	@ 0x9c
 80070e4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80070e8:	f8c5 309c 	str.w	r3, [r5, #156]	@ 0x9c
        if (MX_I2C4_Init(&hbus_i2c4, I2C_GetTiming(HAL_RCC_GetPCLK2Freq(), BUS_I2C4_FREQUENCY)) != HAL_OK)
 80070ec:	f004 fcd8 	bl	800baa0 <HAL_RCC_GetPCLK2Freq>
  if((clock_src_freq != 0U) && (i2c_freq != 0U))
 80070f0:	2800      	cmp	r0, #0
 80070f2:	d06f      	beq.n	80071d4 <BSP_I2C4_Init+0x1a4>
  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 80070f4:	4b75      	ldr	r3, [pc, #468]	@ (80072cc <BSP_I2C4_Init+0x29c>)
  if (tsdadel_max <= 0)
 80070f6:	4622      	mov	r2, r4
 80070f8:	46a2      	mov	sl, r4
  uint32_t prev_presc = I2C_PRESC_MAX;
 80070fa:	f04f 0910 	mov.w	r9, #16
  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 80070fe:	eb03 0350 	add.w	r3, r3, r0, lsr #1
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 8007102:	f8df b1d0 	ldr.w	fp, [pc, #464]	@ 80072d4 <BSP_I2C4_Init+0x2a4>
  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 8007106:	fbb3 f0f0 	udiv	r0, r3, r0
    (int32_t)tafdel_min - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 3) * (int32_t)ti2cclk);
 800710a:	eb00 0540 	add.w	r5, r0, r0, lsl #1
    (int32_t)tafdel_max - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 4) * (int32_t)ti2cclk);
 800710e:	fa00 f607 	lsl.w	r6, r0, r7
  if (tsdadel_max <= 0)
 8007112:	4601      	mov	r1, r0
  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 8007114:	f1c5 0332 	rsb	r3, r5, #50	@ 0x32
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 8007118:	f5c6 76c3 	rsb	r6, r6, #390	@ 0x186
  if (tsdadel_min <= 0)
 800711c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  if (tsdadel_max <= 0)
 8007120:	ea26 76e6 	bic.w	r6, r6, r6, asr #31
  if (tsdadel_min <= 0)
 8007124:	9300      	str	r3, [sp, #0]
  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
 8007126:	4b6a      	ldr	r3, [pc, #424]	@ (80072d0 <BSP_I2C4_Init+0x2a0>)
 8007128:	681b      	ldr	r3, [r3, #0]
{
 800712a:	4688      	mov	r8, r1
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
 800712c:	f04f 0c00 	mov.w	ip, #0
      if (tscldel >= (uint32_t)tscldel_min)
 8007130:	f5b8 7faf 	cmp.w	r8, #350	@ 0x15e
 8007134:	f8cd c004 	str.w	ip, [sp, #4]
      uint32_t tscldel = (scldel + 1U) * (presc + 1U) * ti2cclk;
 8007138:	f10c 0c01 	add.w	ip, ip, #1
      if (tscldel >= (uint32_t)tscldel_min)
 800713c:	d35d      	bcc.n	80071fa <BSP_I2C4_Init+0x1ca>
 800713e:	2700      	movs	r7, #0
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
 8007140:	46be      	mov	lr, r7
          if ((tsdadel >= (uint32_t)tsdadel_min) && (tsdadel <= (uint32_t)tsdadel_max))
 8007142:	9d00      	ldr	r5, [sp, #0]
 8007144:	42bd      	cmp	r5, r7
 8007146:	d852      	bhi.n	80071ee <BSP_I2C4_Init+0x1be>
 8007148:	42be      	cmp	r6, r7
 800714a:	d350      	bcc.n	80071ee <BSP_I2C4_Init+0x1be>
            if(presc != prev_presc)
 800714c:	4591      	cmp	r9, r2
 800714e:	d04e      	beq.n	80071ee <BSP_I2C4_Init+0x1be>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 8007150:	2514      	movs	r5, #20
 8007152:	fb05 fa03 	mul.w	sl, r5, r3
              I2c_valid_timing_nbr ++;
 8007156:	3301      	adds	r3, #1
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
 8007158:	9d01      	ldr	r5, [sp, #4]
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 800715a:	eb0b 090a 	add.w	r9, fp, sl
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 800715e:	2b7f      	cmp	r3, #127	@ 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 8007160:	f84b 200a 	str.w	r2, [fp, sl]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 8007164:	e9c9 5e01 	strd	r5, lr, [r9, #4]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 8007168:	d93e      	bls.n	80071e8 <BSP_I2C4_Init+0x1b8>
 800716a:	4a59      	ldr	r2, [pc, #356]	@ (80072d0 <BSP_I2C4_Init+0x2a0>)
 800716c:	6013      	str	r3, [r2, #0]
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 800716e:	4b58      	ldr	r3, [pc, #352]	@ (80072d0 <BSP_I2C4_Init+0x2a0>)
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
 8007170:	f640 15c4 	movw	r5, #2500	@ 0x9c4
 8007174:	f04f 32ff 	mov.w	r2, #4294967295
 8007178:	4956      	ldr	r1, [pc, #344]	@ (80072d4 <BSP_I2C4_Init+0x2a4>)
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 800717a:	681b      	ldr	r3, [r3, #0]
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
 800717c:	2700      	movs	r7, #0
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 800717e:	9305      	str	r3, [sp, #20]
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
 8007180:	0043      	lsls	r3, r0, #1
 8007182:	f5c3 6b80 	rsb	fp, r3, #1024	@ 0x400
 8007186:	e9cd 2501 	strd	r2, r5, [sp, #4]
 800718a:	f10b 0b01 	add.w	fp, fp, #1
 800718e:	f103 0532 	add.w	r5, r3, #50	@ 0x32
 8007192:	f6a3 0334 	subw	r3, r3, #2100	@ 0x834
 8007196:	9508      	str	r5, [sp, #32]
 8007198:	9309      	str	r3, [sp, #36]	@ 0x24
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 800719a:	9b05      	ldr	r3, [sp, #20]
 800719c:	429f      	cmp	r7, r3
 800719e:	d138      	bne.n	8007212 <BSP_I2C4_Init+0x1e2>
        if (idx < I2C_VALID_TIMING_NBR)
 80071a0:	9b01      	ldr	r3, [sp, #4]
 80071a2:	2b7f      	cmp	r3, #127	@ 0x7f
 80071a4:	d816      	bhi.n	80071d4 <BSP_I2C4_Init+0x1a4>
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 80071a6:	2114      	movs	r1, #20
 80071a8:	9a01      	ldr	r2, [sp, #4]
 80071aa:	4b4a      	ldr	r3, [pc, #296]	@ (80072d4 <BSP_I2C4_Init+0x2a4>)
 80071ac:	434a      	muls	r2, r1
 80071ae:	1899      	adds	r1, r3, r2
 80071b0:	589b      	ldr	r3, [r3, r2]
                ((I2c_valid_timing[idx].scll & 0xFFU) << 0);
 80071b2:	7c0c      	ldrb	r4, [r1, #16]
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 80071b4:	ea44 7403 	orr.w	r4, r4, r3, lsl #28
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) |\
 80071b8:	684b      	ldr	r3, [r1, #4]
 80071ba:	051b      	lsls	r3, r3, #20
 80071bc:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 80071c0:	431c      	orrs	r4, r3
                ((I2c_valid_timing[idx].tsdadel & 0x0FU) << 16) |\
 80071c2:	688b      	ldr	r3, [r1, #8]
 80071c4:	041b      	lsls	r3, r3, #16
 80071c6:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 80071ca:	431c      	orrs	r4, r3
                ((I2c_valid_timing[idx].sclh & 0xFFU) << 8) |\
 80071cc:	68cb      	ldr	r3, [r1, #12]
 80071ce:	021b      	lsls	r3, r3, #8
 80071d0:	b29b      	uxth	r3, r3
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 80071d2:	431c      	orrs	r4, r3
        if (MX_I2C4_Init(&hbus_i2c4, I2C_GetTiming(HAL_RCC_GetPCLK2Freq(), BUS_I2C4_FREQUENCY)) != HAL_OK)
 80071d4:	4621      	mov	r1, r4
 80071d6:	4839      	ldr	r0, [pc, #228]	@ (80072bc <BSP_I2C4_Init+0x28c>)
 80071d8:	f7ff ff0a 	bl	8006ff0 <MX_I2C4_Init>
 80071dc:	2800      	cmp	r0, #0
 80071de:	f43f af30 	beq.w	8007042 <BSP_I2C4_Init+0x12>
          ret = BSP_ERROR_BUS_FAILURE;
 80071e2:	f06f 0007 	mvn.w	r0, #7
  return ret;
 80071e6:	e72d      	b.n	8007044 <BSP_I2C4_Init+0x14>
 80071e8:	4691      	mov	r9, r2
 80071ea:	f04f 0a01 	mov.w	sl, #1
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
 80071ee:	f10e 0e01 	add.w	lr, lr, #1
 80071f2:	440f      	add	r7, r1
 80071f4:	f1be 0f10 	cmp.w	lr, #16
 80071f8:	d1a3      	bne.n	8007142 <BSP_I2C4_Init+0x112>
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
 80071fa:	f1bc 0f10 	cmp.w	ip, #16
 80071fe:	4488      	add	r8, r1
 8007200:	d196      	bne.n	8007130 <BSP_I2C4_Init+0x100>
  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
 8007202:	3201      	adds	r2, #1
 8007204:	4401      	add	r1, r0
 8007206:	2a10      	cmp	r2, #16
 8007208:	d18f      	bne.n	800712a <BSP_I2C4_Init+0xfa>
 800720a:	f1ba 0f00 	cmp.w	sl, #0
 800720e:	d1ac      	bne.n	800716a <BSP_I2C4_Init+0x13a>
 8007210:	e7ad      	b.n	800716e <BSP_I2C4_Init+0x13e>
    uint32_t tpresc = (I2c_valid_timing[count].presc + 1U) * ti2cclk;
 8007212:	680b      	ldr	r3, [r1, #0]
    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 8007214:	f04f 0c00 	mov.w	ip, #0
 8007218:	9d08      	ldr	r5, [sp, #32]
    uint32_t tpresc = (I2c_valid_timing[count].presc + 1U) * ti2cclk;
 800721a:	fb03 0300 	mla	r3, r3, r0, r0
    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 800721e:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 8007220:	441d      	add	r5, r3
 8007222:	441e      	add	r6, r3
 8007224:	9503      	str	r5, [sp, #12]
 8007226:	ebab 0503 	sub.w	r5, fp, r3
 800722a:	9607      	str	r6, [sp, #28]
 800722c:	006d      	lsls	r5, r5, #1
 800722e:	9500      	str	r5, [sp, #0]
    uint32_t tpresc = (I2c_valid_timing[count].presc + 1U) * ti2cclk;
 8007230:	9d03      	ldr	r5, [sp, #12]
      if ((tscl_l > I2C_Charac[I2C_speed].lscl_min) && (ti2cclk < ((tscl_l - tafdel_min - dnf_delay) / 4U)))
 8007232:	f240 5214 	movw	r2, #1300	@ 0x514
 8007236:	f8cd c010 	str.w	ip, [sp, #16]
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
 800723a:	f10c 0c01 	add.w	ip, ip, #1
      if ((tscl_l > I2C_Charac[I2C_speed].lscl_min) && (ti2cclk < ((tscl_l - tafdel_min - dnf_delay) / 4U)))
 800723e:	4295      	cmp	r5, r2
 8007240:	d92f      	bls.n	80072a2 <BSP_I2C4_Init+0x272>
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
 8007242:	f1a5 0632 	sub.w	r6, r5, #50	@ 0x32
      if ((tscl_l > I2C_Charac[I2C_speed].lscl_min) && (ti2cclk < ((tscl_l - tafdel_min - dnf_delay) / 4U)))
 8007246:	ebb0 0f96 	cmp.w	r0, r6, lsr #2
 800724a:	d22a      	bcs.n	80072a2 <BSP_I2C4_Init+0x272>
 800724c:	9e07      	ldr	r6, [sp, #28]
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
 800724e:	f04f 0e00 	mov.w	lr, #0
      if ((tscl_l > I2C_Charac[I2C_speed].lscl_min) && (ti2cclk < ((tscl_l - tafdel_min - dnf_delay) / 4U)))
 8007252:	f8dd 9000 	ldr.w	r9, [sp]
 8007256:	442e      	add	r6, r5
 8007258:	f8dd 800c 	ldr.w	r8, [sp, #12]
          if ((tscl >= clk_min) && (tscl <= clk_max) && (tscl_h >= I2C_Charac[I2C_speed].hscl_min) && (ti2cclk < tscl_h))
 800725c:	f206 1aa1 	addw	sl, r6, #417	@ 0x1a1
 8007260:	f240 4212 	movw	r2, #1042	@ 0x412
 8007264:	f8cd e018 	str.w	lr, [sp, #24]
          uint32_t tscl_h = tafdel_min + dnf_delay + (2U * ti2cclk) + ((sclh + 1U) * tpresc);
 8007268:	f10e 0e01 	add.w	lr, lr, #1
          if ((tscl >= clk_min) && (tscl <= clk_max) && (tscl_h >= I2C_Charac[I2C_speed].hscl_min) && (ti2cclk < tscl_h))
 800726c:	4592      	cmp	sl, r2
 800726e:	d811      	bhi.n	8007294 <BSP_I2C4_Init+0x264>
 8007270:	f5b8 7f16 	cmp.w	r8, #600	@ 0x258
 8007274:	d30e      	bcc.n	8007294 <BSP_I2C4_Init+0x264>
 8007276:	4580      	cmp	r8, r0
 8007278:	d90c      	bls.n	8007294 <BSP_I2C4_Init+0x264>
              error = -error;
 800727a:	ea36 0a26 	bics.w	sl, r6, r6, asr #32
 800727e:	bf28      	it	cs
 8007280:	46ca      	movcs	sl, r9
            if ((uint32_t)error < prev_error)
 8007282:	9a02      	ldr	r2, [sp, #8]
 8007284:	4592      	cmp	sl, r2
 8007286:	d205      	bcs.n	8007294 <BSP_I2C4_Init+0x264>
              I2c_valid_timing[count].scll = scll;
 8007288:	9a04      	ldr	r2, [sp, #16]
 800728a:	610a      	str	r2, [r1, #16]
              I2c_valid_timing[count].sclh = sclh;
 800728c:	9a06      	ldr	r2, [sp, #24]
 800728e:	e9cd 7a01 	strd	r7, sl, [sp, #4]
 8007292:	60ca      	str	r2, [r1, #12]
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
 8007294:	f5be 7f80 	cmp.w	lr, #256	@ 0x100
 8007298:	4498      	add	r8, r3
 800729a:	441e      	add	r6, r3
 800729c:	eba9 0903 	sub.w	r9, r9, r3
 80072a0:	d1dc      	bne.n	800725c <BSP_I2C4_Init+0x22c>
    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 80072a2:	9a00      	ldr	r2, [sp, #0]
 80072a4:	f5bc 7f80 	cmp.w	ip, #256	@ 0x100
 80072a8:	441d      	add	r5, r3
 80072aa:	eba2 0203 	sub.w	r2, r2, r3
 80072ae:	9200      	str	r2, [sp, #0]
 80072b0:	d1bf      	bne.n	8007232 <BSP_I2C4_Init+0x202>
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 80072b2:	3701      	adds	r7, #1
 80072b4:	3114      	adds	r1, #20
 80072b6:	e770      	b.n	800719a <BSP_I2C4_Init+0x16a>
 80072b8:	58001c00 	.word	0x58001c00
 80072bc:	2400ee30 	.word	0x2400ee30
 80072c0:	2400f888 	.word	0x2400f888
 80072c4:	58024400 	.word	0x58024400
 80072c8:	58020c00 	.word	0x58020c00
 80072cc:	3b9aca00 	.word	0x3b9aca00
 80072d0:	2400ee84 	.word	0x2400ee84
 80072d4:	2400ee88 	.word	0x2400ee88

080072d8 <BSP_I2C4_WriteReg>:
{
 80072d8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C4_WriteReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
  if(HAL_I2C_Mem_Write(&hbus_i2c4, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
 80072da:	f44f 747a 	mov.w	r4, #1000	@ 0x3e8
 80072de:	9200      	str	r2, [sp, #0]
 80072e0:	460a      	mov	r2, r1
 80072e2:	4601      	mov	r1, r0
 80072e4:	4808      	ldr	r0, [pc, #32]	@ (8007308 <BSP_I2C4_WriteReg+0x30>)
 80072e6:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80072ea:	2301      	movs	r3, #1
 80072ec:	f001 ff0a 	bl	8009104 <HAL_I2C_Mem_Write>
 80072f0:	b140      	cbz	r0, 8007304 <BSP_I2C4_WriteReg+0x2c>
    if( HAL_I2C_GetError(&hbus_i2c4) == HAL_I2C_ERROR_AF)
 80072f2:	4805      	ldr	r0, [pc, #20]	@ (8007308 <BSP_I2C4_WriteReg+0x30>)
 80072f4:	f002 f8c1 	bl	800947a <HAL_I2C_GetError>
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 80072f8:	2804      	cmp	r0, #4
 80072fa:	bf14      	ite	ne
 80072fc:	f06f 0003 	mvnne.w	r0, #3
 8007300:	f06f 0065 	mvneq.w	r0, #101	@ 0x65
}
 8007304:	b004      	add	sp, #16
 8007306:	bd10      	pop	{r4, pc}
 8007308:	2400ee30 	.word	0x2400ee30

0800730c <BSP_I2C4_ReadReg>:
{
 800730c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C4_ReadReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
  if (HAL_I2C_Mem_Read(&hbus_i2c4, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
 800730e:	f44f 747a 	mov.w	r4, #1000	@ 0x3e8
 8007312:	9200      	str	r2, [sp, #0]
 8007314:	460a      	mov	r2, r1
 8007316:	4601      	mov	r1, r0
 8007318:	4808      	ldr	r0, [pc, #32]	@ (800733c <BSP_I2C4_ReadReg+0x30>)
 800731a:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800731e:	2301      	movs	r3, #1
 8007320:	f001 ffca 	bl	80092b8 <HAL_I2C_Mem_Read>
 8007324:	b140      	cbz	r0, 8007338 <BSP_I2C4_ReadReg+0x2c>
    if( HAL_I2C_GetError(&hbus_i2c4) == HAL_I2C_ERROR_AF)
 8007326:	4805      	ldr	r0, [pc, #20]	@ (800733c <BSP_I2C4_ReadReg+0x30>)
 8007328:	f002 f8a7 	bl	800947a <HAL_I2C_GetError>
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 800732c:	2804      	cmp	r0, #4
 800732e:	bf14      	ite	ne
 8007330:	f06f 0003 	mvnne.w	r0, #3
 8007334:	f06f 0065 	mvneq.w	r0, #101	@ 0x65
}
 8007338:	b004      	add	sp, #16
 800733a:	bd10      	pop	{r4, pc}
 800733c:	2400ee30 	.word	0x2400ee30

08007340 <BSP_GetTick>:
  return (int32_t)HAL_GetTick();
 8007340:	f000 bd08 	b.w	8007d54 <HAL_GetTick>

08007344 <MX_QSPI_Init>:
  */
__weak HAL_StatusTypeDef MX_QSPI_Init(QSPI_HandleTypeDef *hQspi, MX_QSPI_Init_t *Config)
{
  /* QSPI initialization */
  /* QSPI freq = SYSCLK /(1 + ClockPrescaler) Mhz */
  hQspi->Instance                = QUADSPI;
 8007344:	4a09      	ldr	r2, [pc, #36]	@ (800736c <MX_QSPI_Init+0x28>)
  hQspi->Init.ClockPrescaler     = Config->ClockPrescaler;
  hQspi->Init.FifoThreshold      = 1;
  hQspi->Init.SampleShifting     = Config->SampleShifting;
  hQspi->Init.FlashSize          = Config->FlashSize;
  hQspi->Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_4_CYCLE; /* Min 50ns for nonRead */
  hQspi->Init.ClockMode          = QSPI_CLOCK_MODE_0;
 8007346:	f44f 7c40 	mov.w	ip, #768	@ 0x300
  hQspi->Instance                = QUADSPI;
 800734a:	6002      	str	r2, [r0, #0]
  hQspi->Init.ClockPrescaler     = Config->ClockPrescaler;
 800734c:	684a      	ldr	r2, [r1, #4]
 800734e:	6042      	str	r2, [r0, #4]
  hQspi->Init.FifoThreshold      = 1;
 8007350:	2201      	movs	r2, #1
 8007352:	6082      	str	r2, [r0, #8]
  hQspi->Init.SampleShifting     = Config->SampleShifting;
 8007354:	688a      	ldr	r2, [r1, #8]
 8007356:	60c2      	str	r2, [r0, #12]
  hQspi->Init.FlashSize          = Config->FlashSize;
 8007358:	680a      	ldr	r2, [r1, #0]
 800735a:	6102      	str	r2, [r0, #16]
  hQspi->Init.ClockMode          = QSPI_CLOCK_MODE_0;
 800735c:	2200      	movs	r2, #0
 800735e:	e9c0 c205 	strd	ip, r2, [r0, #20]
  hQspi->Init.FlashID            = QSPI_FLASH_ID_1;
 8007362:	61c2      	str	r2, [r0, #28]
  hQspi->Init.DualFlash          = Config->DualFlashMode;
 8007364:	68ca      	ldr	r2, [r1, #12]
 8007366:	6202      	str	r2, [r0, #32]

  return HAL_QSPI_Init(hQspi);
 8007368:	f003 bcc4 	b.w	800acf4 <HAL_QSPI_Init>
 800736c:	52005000 	.word	0x52005000

08007370 <BSP_QSPI_EnableMemoryMappedMode>:
  *         Only 1 Instance can running MMP mode. And it will lock system at this mode.
  * @param  Instance  QSPI instance
  * @retval BSP status
  */
int32_t BSP_QSPI_EnableMemoryMappedMode(uint32_t Instance)
{
 8007370:	b510      	push	{r4, lr}
  int32_t ret = BSP_ERROR_NONE;

  /* Check if the instance is supported */
  if(Instance >= QSPI_INSTANCES_NUMBER)
 8007372:	b988      	cbnz	r0, 8007398 <BSP_QSPI_EnableMemoryMappedMode+0x28>
  }
  else
  {
    if(QSPI_Ctx[Instance].TransferRate == BSP_QSPI_STR_TRANSFER)
    {
      if(MT25TL01G_EnableMemoryMappedModeSTR(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 8007374:	4c0a      	ldr	r4, [pc, #40]	@ (80073a0 <BSP_QSPI_EnableMemoryMappedMode+0x30>)
 8007376:	480b      	ldr	r0, [pc, #44]	@ (80073a4 <BSP_QSPI_EnableMemoryMappedMode+0x34>)
    if(QSPI_Ctx[Instance].TransferRate == BSP_QSPI_STR_TRANSFER)
 8007378:	78a3      	ldrb	r3, [r4, #2]
      if(MT25TL01G_EnableMemoryMappedModeSTR(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 800737a:	7861      	ldrb	r1, [r4, #1]
    if(QSPI_Ctx[Instance].TransferRate == BSP_QSPI_STR_TRANSFER)
 800737c:	b94b      	cbnz	r3, 8007392 <BSP_QSPI_EnableMemoryMappedMode+0x22>
      if(MT25TL01G_EnableMemoryMappedModeSTR(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 800737e:	f7ff f9bc 	bl	80066fa <MT25TL01G_EnableMemoryMappedModeSTR>
 8007382:	b110      	cbz	r0, 800738a <BSP_QSPI_EnableMemoryMappedMode+0x1a>
    }
    else
    {
      if(MT25TL01G_EnableMemoryMappedModeDTR(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8007384:	f06f 0004 	mvn.w	r0, #4
    }
  }

  /* Return BSP status */
  return ret;
}
 8007388:	bd10      	pop	{r4, pc}
        QSPI_Ctx[Instance].IsInitialized = QSPI_ACCESS_MMP;
 800738a:	2302      	movs	r3, #2
  int32_t ret = BSP_ERROR_NONE;
 800738c:	2000      	movs	r0, #0
        QSPI_Ctx[Instance].IsInitialized = QSPI_ACCESS_MMP;
 800738e:	7023      	strb	r3, [r4, #0]
 8007390:	e7fa      	b.n	8007388 <BSP_QSPI_EnableMemoryMappedMode+0x18>
      if(MT25TL01G_EnableMemoryMappedModeDTR(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 8007392:	f7ff f968 	bl	8006666 <MT25TL01G_EnableMemoryMappedModeDTR>
 8007396:	e7f4      	b.n	8007382 <BSP_QSPI_EnableMemoryMappedMode+0x12>
    ret = BSP_ERROR_WRONG_PARAM;
 8007398:	f06f 0001 	mvn.w	r0, #1
  return ret;
 800739c:	e7f4      	b.n	8007388 <BSP_QSPI_EnableMemoryMappedMode+0x18>
 800739e:	bf00      	nop
 80073a0:	2400f88c 	.word	0x2400f88c
 80073a4:	240003c8 	.word	0x240003c8

080073a8 <BSP_QSPI_ConfigFlash>:
  * @param  Mode      QSPI mode
  * @param  Rate      QSPI transfer rate
  * @retval BSP status
  */
int32_t BSP_QSPI_ConfigFlash(uint32_t Instance, BSP_QSPI_Interface_t Mode, BSP_QSPI_Transfer_t Rate)
{
 80073a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073aa:	460c      	mov	r4, r1
 80073ac:	4617      	mov	r7, r2
  int32_t ret = BSP_ERROR_NONE;

  /* Check if the instance is supported */
  if(Instance >= QSPI_INSTANCES_NUMBER)
 80073ae:	bb30      	cbnz	r0, 80073fe <BSP_QSPI_ConfigFlash+0x56>
    ret = BSP_ERROR_WRONG_PARAM;
  }
  else
  {
    /* Check if MMP mode locked ************************************************/
    if(QSPI_Ctx[Instance].IsInitialized == QSPI_ACCESS_MMP)
 80073b0:	4d17      	ldr	r5, [pc, #92]	@ (8007410 <BSP_QSPI_ConfigFlash+0x68>)
 80073b2:	782b      	ldrb	r3, [r5, #0]
 80073b4:	2b02      	cmp	r3, #2
 80073b6:	d025      	beq.n	8007404 <BSP_QSPI_ConfigFlash+0x5c>
      ret = BSP_ERROR_QSPI_MMP_LOCK_FAILURE;
    }
    else
    {
      /* Setup MCU transfer rate setting ***************************************************/
      hqspi.Init.SampleShifting = (Rate == BSP_QSPI_STR_TRANSFER) ? QSPI_SAMPLE_SHIFTING_HALFCYCLE : QSPI_SAMPLE_SHIFTING_NONE;
 80073b8:	fab2 f382 	clz	r3, r2
 80073bc:	4e15      	ldr	r6, [pc, #84]	@ (8007414 <BSP_QSPI_ConfigFlash+0x6c>)
 80073be:	095b      	lsrs	r3, r3, #5

      if(HAL_QSPI_Init(&hqspi)!= HAL_OK)
 80073c0:	4630      	mov	r0, r6
      hqspi.Init.SampleShifting = (Rate == BSP_QSPI_STR_TRANSFER) ? QSPI_SAMPLE_SHIFTING_HALFCYCLE : QSPI_SAMPLE_SHIFTING_NONE;
 80073c2:	011b      	lsls	r3, r3, #4
 80073c4:	60f3      	str	r3, [r6, #12]
      if(HAL_QSPI_Init(&hqspi)!= HAL_OK)
 80073c6:	f003 fc95 	bl	800acf4 <HAL_QSPI_Init>
 80073ca:	b9f0      	cbnz	r0, 800740a <BSP_QSPI_ConfigFlash+0x62>
        ret = BSP_ERROR_PERIPH_FAILURE;
      }
      else
      {
        /* Setup Flash interface ***************************************************/
        switch(QSPI_Ctx[Instance].InterfaceMode)
 80073cc:	786b      	ldrb	r3, [r5, #1]
 80073ce:	2b03      	cmp	r3, #3
 80073d0:	d10f      	bne.n	80073f2 <BSP_QSPI_ConfigFlash+0x4a>
        {
        case MT25TL01G_QPI_MODE :               /* 4-4-4 commands */
          if(Mode != MT25TL01G_QPI_MODE)
 80073d2:	2c03      	cmp	r4, #3
 80073d4:	d105      	bne.n	80073e2 <BSP_QSPI_ConfigFlash+0x3a>

        /* Update QSPI context if all operations are well done */
        if(ret == BSP_ERROR_NONE)
        {
          /* Update current status parameter *****************************************/
          QSPI_Ctx[Instance].IsInitialized = QSPI_ACCESS_INDIRECT;
 80073d6:	2301      	movs	r3, #1
          QSPI_Ctx[Instance].InterfaceMode = Mode;
          QSPI_Ctx[Instance].TransferRate  = Rate;
 80073d8:	2000      	movs	r0, #0
          QSPI_Ctx[Instance].InterfaceMode = Mode;
 80073da:	706c      	strb	r4, [r5, #1]
          QSPI_Ctx[Instance].IsInitialized = QSPI_ACCESS_INDIRECT;
 80073dc:	702b      	strb	r3, [r5, #0]
          QSPI_Ctx[Instance].TransferRate  = Rate;
 80073de:	70af      	strb	r7, [r5, #2]
    }
  }

  /* Return BSP status */
  return ret;
}
 80073e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            if(MT25TL01G_ExitQPIMode(&hqspi) != MT25TL01G_OK)
 80073e2:	4630      	mov	r0, r6
 80073e4:	f7ff f923 	bl	800662e <MT25TL01G_ExitQPIMode>
 80073e8:	2800      	cmp	r0, #0
 80073ea:	d0f4      	beq.n	80073d6 <BSP_QSPI_ConfigFlash+0x2e>
              ret = BSP_ERROR_COMPONENT_FAILURE;
 80073ec:	f06f 0004 	mvn.w	r0, #4
 80073f0:	e7f6      	b.n	80073e0 <BSP_QSPI_ConfigFlash+0x38>
          if(Mode == MT25TL01G_QPI_MODE)
 80073f2:	2c03      	cmp	r4, #3
 80073f4:	d1ef      	bne.n	80073d6 <BSP_QSPI_ConfigFlash+0x2e>
            if(MT25TL01G_EnterQPIMode(&hqspi) != MT25TL01G_OK)
 80073f6:	4630      	mov	r0, r6
 80073f8:	f7ff f8fd 	bl	80065f6 <MT25TL01G_EnterQPIMode>
 80073fc:	e7f4      	b.n	80073e8 <BSP_QSPI_ConfigFlash+0x40>
    ret = BSP_ERROR_WRONG_PARAM;
 80073fe:	f06f 0001 	mvn.w	r0, #1
 8007402:	e7ed      	b.n	80073e0 <BSP_QSPI_ConfigFlash+0x38>
      ret = BSP_ERROR_QSPI_MMP_LOCK_FAILURE;
 8007404:	f06f 0019 	mvn.w	r0, #25
 8007408:	e7ea      	b.n	80073e0 <BSP_QSPI_ConfigFlash+0x38>
        ret = BSP_ERROR_PERIPH_FAILURE;
 800740a:	f06f 0003 	mvn.w	r0, #3
  return ret;
 800740e:	e7e7      	b.n	80073e0 <BSP_QSPI_ConfigFlash+0x38>
 8007410:	2400f88c 	.word	0x2400f88c
 8007414:	240003c8 	.word	0x240003c8

08007418 <BSP_QSPI_Init>:
{
 8007418:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800741c:	460c      	mov	r4, r1
 800741e:	b0a4      	sub	sp, #144	@ 0x90
  if(Instance >= QSPI_INSTANCES_NUMBER)
 8007420:	2800      	cmp	r0, #0
 8007422:	f040 81ac 	bne.w	800777e <BSP_QSPI_Init+0x366>
    if(QSPI_Ctx[Instance].IsInitialized == QSPI_ACCESS_NONE)
 8007426:	4d03      	ldr	r5, [pc, #12]	@ (8007434 <BSP_QSPI_Init+0x1c>)
 8007428:	782f      	ldrb	r7, [r5, #0]
 800742a:	b12f      	cbz	r7, 8007438 <BSP_QSPI_Init+0x20>
  int32_t ret = BSP_ERROR_NONE;
 800742c:	2000      	movs	r0, #0
}
 800742e:	b024      	add	sp, #144	@ 0x90
 8007430:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007434:	2400f88c 	.word	0x2400f88c
{
  GPIO_InitTypeDef gpio_init_structure;

  /*##-1- Enable peripherals and GPIO Clocks #################################*/
  /* Enable the QuadSPI memory interface clock */
  QSPI_CLK_ENABLE();
 8007438:	4bc3      	ldr	r3, [pc, #780]	@ (8007748 <BSP_QSPI_Init+0x330>)
  QSPI_BK2_D3_GPIO_CLK_ENABLE();

  /*##-2- Configure peripheral GPIO ##########################################*/
  /* QSPI CLK GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_CLK_PIN;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 800743a:	f04f 0904 	mov.w	r9, #4
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
  gpio_init_structure.Pull      = GPIO_NOPULL;
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 800743e:	2609      	movs	r6, #9
  HAL_GPIO_Init(QSPI_CLK_GPIO_PORT, &gpio_init_structure);
 8007440:	a916      	add	r1, sp, #88	@ 0x58
  QSPI_CLK_ENABLE();
 8007442:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4

  /* QSPI CS GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_BK1_CS_PIN;
 8007446:	f04f 0840 	mov.w	r8, #64	@ 0x40
  HAL_GPIO_Init(QSPI_CLK_GPIO_PORT, &gpio_init_structure);
 800744a:	48c0      	ldr	r0, [pc, #768]	@ (800774c <BSP_QSPI_Init+0x334>)
  gpio_init_structure.Pull      = GPIO_PULLUP;
  gpio_init_structure.Alternate = GPIO_AF10_QUADSPI;
 800744c:	f04f 0a0a 	mov.w	sl, #10
  QSPI_CLK_ENABLE();
 8007450:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007454:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
 8007458:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 800745c:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 8007460:	9201      	str	r2, [sp, #4]
 8007462:	9a01      	ldr	r2, [sp, #4]
  QSPI_FORCE_RESET();
 8007464:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 8007466:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800746a:	67da      	str	r2, [r3, #124]	@ 0x7c
  QSPI_RELEASE_RESET();
 800746c:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 800746e:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8007472:	67da      	str	r2, [r3, #124]	@ 0x7c
  QSPI_CLK_GPIO_CLK_ENABLE();
 8007474:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8007478:	f042 0202 	orr.w	r2, r2, #2
 800747c:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8007480:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8007484:	f002 0202 	and.w	r2, r2, #2
 8007488:	9202      	str	r2, [sp, #8]
 800748a:	9a02      	ldr	r2, [sp, #8]
  QSPI_BK1_CS_GPIO_CLK_ENABLE();
 800748c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8007490:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007494:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8007498:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800749c:	f002 0240 	and.w	r2, r2, #64	@ 0x40
 80074a0:	9203      	str	r2, [sp, #12]
 80074a2:	9a03      	ldr	r2, [sp, #12]
  QSPI_BK1_D0_GPIO_CLK_ENABLE();
 80074a4:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80074a8:	f042 0208 	orr.w	r2, r2, #8
 80074ac:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 80074b0:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80074b4:	f002 0208 	and.w	r2, r2, #8
 80074b8:	9204      	str	r2, [sp, #16]
 80074ba:	9a04      	ldr	r2, [sp, #16]
  QSPI_BK1_D1_GPIO_CLK_ENABLE();
 80074bc:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80074c0:	f042 0220 	orr.w	r2, r2, #32
 80074c4:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 80074c8:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80074cc:	f002 0220 	and.w	r2, r2, #32
 80074d0:	9205      	str	r2, [sp, #20]
 80074d2:	9a05      	ldr	r2, [sp, #20]
  QSPI_BK1_D2_GPIO_CLK_ENABLE();
 80074d4:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80074d8:	f042 0220 	orr.w	r2, r2, #32
 80074dc:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 80074e0:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80074e4:	f002 0220 	and.w	r2, r2, #32
 80074e8:	9206      	str	r2, [sp, #24]
 80074ea:	9a06      	ldr	r2, [sp, #24]
  QSPI_BK1_D3_GPIO_CLK_ENABLE();
 80074ec:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80074f0:	f042 0220 	orr.w	r2, r2, #32
 80074f4:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 80074f8:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80074fc:	f002 0220 	and.w	r2, r2, #32
 8007500:	9207      	str	r2, [sp, #28]
 8007502:	9a07      	ldr	r2, [sp, #28]
  QSPI_BK2_CS_GPIO_CLK_ENABLE();
 8007504:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8007508:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800750c:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8007510:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8007514:	f002 0240 	and.w	r2, r2, #64	@ 0x40
 8007518:	9208      	str	r2, [sp, #32]
 800751a:	9a08      	ldr	r2, [sp, #32]
  QSPI_BK2_D0_GPIO_CLK_ENABLE();
 800751c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8007520:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8007524:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8007528:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800752c:	f002 0280 	and.w	r2, r2, #128	@ 0x80
 8007530:	9209      	str	r2, [sp, #36]	@ 0x24
 8007532:	9a09      	ldr	r2, [sp, #36]	@ 0x24
  QSPI_BK2_D1_GPIO_CLK_ENABLE();
 8007534:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8007538:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800753c:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8007540:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8007544:	f002 0280 	and.w	r2, r2, #128	@ 0x80
 8007548:	920a      	str	r2, [sp, #40]	@ 0x28
 800754a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
  QSPI_BK2_D2_GPIO_CLK_ENABLE();
 800754c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8007550:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007554:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8007558:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800755c:	f002 0240 	and.w	r2, r2, #64	@ 0x40
 8007560:	920b      	str	r2, [sp, #44]	@ 0x2c
 8007562:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
  QSPI_BK2_D3_GPIO_CLK_ENABLE();
 8007564:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8007568:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800756c:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8007570:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007574:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007578:	930c      	str	r3, [sp, #48]	@ 0x30
 800757a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 800757c:	2302      	movs	r3, #2
 800757e:	e9cd 9316 	strd	r9, r3, [sp, #88]	@ 0x58
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 8007582:	2303      	movs	r3, #3
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 8007584:	961a      	str	r6, [sp, #104]	@ 0x68
  gpio_init_structure.Pull      = GPIO_NOPULL;
 8007586:	e9cd 7318 	strd	r7, r3, [sp, #96]	@ 0x60
  HAL_GPIO_Init(QSPI_CLK_GPIO_PORT, &gpio_init_structure);
 800758a:	f001 fa69 	bl	8008a60 <HAL_GPIO_Init>
  gpio_init_structure.Pull      = GPIO_PULLUP;
 800758e:	2301      	movs	r3, #1
  HAL_GPIO_Init(QSPI_BK1_CS_GPIO_PORT, &gpio_init_structure);
 8007590:	a916      	add	r1, sp, #88	@ 0x58
 8007592:	486f      	ldr	r0, [pc, #444]	@ (8007750 <BSP_QSPI_Init+0x338>)
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8007594:	9318      	str	r3, [sp, #96]	@ 0x60
  gpio_init_structure.Pin       = QSPI_BK1_CS_PIN;
 8007596:	f8cd 8058 	str.w	r8, [sp, #88]	@ 0x58
  gpio_init_structure.Alternate = GPIO_AF10_QUADSPI;
 800759a:	f8cd a068 	str.w	sl, [sp, #104]	@ 0x68
  HAL_GPIO_Init(QSPI_BK1_CS_GPIO_PORT, &gpio_init_structure);
 800759e:	f001 fa5f 	bl	8008a60 <HAL_GPIO_Init>

  /* QSPI D0 GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_BK1_D0_PIN;
 80075a2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
  gpio_init_structure.Pull      = GPIO_NOPULL;
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
  HAL_GPIO_Init(QSPI_BK1_D0_GPIO_PORT, &gpio_init_structure);
 80075a6:	a916      	add	r1, sp, #88	@ 0x58
 80075a8:	486a      	ldr	r0, [pc, #424]	@ (8007754 <BSP_QSPI_Init+0x33c>)
  gpio_init_structure.Pin       = QSPI_BK1_D0_PIN;
 80075aa:	9316      	str	r3, [sp, #88]	@ 0x58
  gpio_init_structure.Pull      = GPIO_NOPULL;
 80075ac:	9718      	str	r7, [sp, #96]	@ 0x60
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 80075ae:	961a      	str	r6, [sp, #104]	@ 0x68
  HAL_GPIO_Init(QSPI_BK1_D0_GPIO_PORT, &gpio_init_structure);
 80075b0:	f001 fa56 	bl	8008a60 <HAL_GPIO_Init>

  gpio_init_structure.Pin       = QSPI_BK2_D0_PIN;
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
  HAL_GPIO_Init(QSPI_BK2_D0_GPIO_PORT, &gpio_init_structure);
 80075b4:	a916      	add	r1, sp, #88	@ 0x58
  gpio_init_structure.Pin       = QSPI_BK2_D0_PIN;
 80075b6:	f8cd 9058 	str.w	r9, [sp, #88]	@ 0x58
  HAL_GPIO_Init(QSPI_BK2_D0_GPIO_PORT, &gpio_init_structure);
 80075ba:	4867      	ldr	r0, [pc, #412]	@ (8007758 <BSP_QSPI_Init+0x340>)

  /* QSPI D1 GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_BK1_D1_PIN;
 80075bc:	f44f 7900 	mov.w	r9, #512	@ 0x200
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 80075c0:	961a      	str	r6, [sp, #104]	@ 0x68
  HAL_GPIO_Init(QSPI_BK2_D0_GPIO_PORT, &gpio_init_structure);
 80075c2:	f001 fa4d 	bl	8008a60 <HAL_GPIO_Init>
  gpio_init_structure.Alternate = GPIO_AF10_QUADSPI;
  HAL_GPIO_Init(QSPI_BK1_D1_GPIO_PORT, &gpio_init_structure);
 80075c6:	a916      	add	r1, sp, #88	@ 0x58
 80075c8:	4864      	ldr	r0, [pc, #400]	@ (800775c <BSP_QSPI_Init+0x344>)
  gpio_init_structure.Pin       = QSPI_BK1_D1_PIN;
 80075ca:	f8cd 9058 	str.w	r9, [sp, #88]	@ 0x58
  gpio_init_structure.Alternate = GPIO_AF10_QUADSPI;
 80075ce:	f8cd a068 	str.w	sl, [sp, #104]	@ 0x68
  HAL_GPIO_Init(QSPI_BK1_D1_GPIO_PORT, &gpio_init_structure);
 80075d2:	f001 fa45 	bl	8008a60 <HAL_GPIO_Init>

  gpio_init_structure.Pin       = QSPI_BK2_D1_PIN;
 80075d6:	2308      	movs	r3, #8
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
  HAL_GPIO_Init(QSPI_BK2_D1_GPIO_PORT, &gpio_init_structure);
 80075d8:	a916      	add	r1, sp, #88	@ 0x58
 80075da:	485f      	ldr	r0, [pc, #380]	@ (8007758 <BSP_QSPI_Init+0x340>)
  gpio_init_structure.Pin       = QSPI_BK2_D1_PIN;
 80075dc:	9316      	str	r3, [sp, #88]	@ 0x58
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 80075de:	961a      	str	r6, [sp, #104]	@ 0x68
  HAL_GPIO_Init(QSPI_BK2_D1_GPIO_PORT, &gpio_init_structure);
 80075e0:	f001 fa3e 	bl	8008a60 <HAL_GPIO_Init>

  /* QSPI D2 GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_BK1_D2_PIN;
 80075e4:	2380      	movs	r3, #128	@ 0x80
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
  HAL_GPIO_Init(QSPI_BK1_D2_GPIO_PORT, &gpio_init_structure);
 80075e6:	a916      	add	r1, sp, #88	@ 0x58
 80075e8:	485c      	ldr	r0, [pc, #368]	@ (800775c <BSP_QSPI_Init+0x344>)
  gpio_init_structure.Pin       = QSPI_BK1_D2_PIN;
 80075ea:	9316      	str	r3, [sp, #88]	@ 0x58
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 80075ec:	961a      	str	r6, [sp, #104]	@ 0x68
  HAL_GPIO_Init(QSPI_BK1_D2_GPIO_PORT, &gpio_init_structure);
 80075ee:	f001 fa37 	bl	8008a60 <HAL_GPIO_Init>

  gpio_init_structure.Pin       = QSPI_BK2_D2_PIN;
  HAL_GPIO_Init(QSPI_BK2_D2_GPIO_PORT, &gpio_init_structure);
 80075f2:	a916      	add	r1, sp, #88	@ 0x58
 80075f4:	4856      	ldr	r0, [pc, #344]	@ (8007750 <BSP_QSPI_Init+0x338>)
  gpio_init_structure.Pin       = QSPI_BK2_D2_PIN;
 80075f6:	f8cd 9058 	str.w	r9, [sp, #88]	@ 0x58
  HAL_GPIO_Init(QSPI_BK2_D2_GPIO_PORT, &gpio_init_structure);
 80075fa:	f001 fa31 	bl	8008a60 <HAL_GPIO_Init>

  /* QSPI D3 GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_BK1_D3_PIN;
  HAL_GPIO_Init(QSPI_BK1_D3_GPIO_PORT, &gpio_init_structure);
 80075fe:	a916      	add	r1, sp, #88	@ 0x58
 8007600:	4856      	ldr	r0, [pc, #344]	@ (800775c <BSP_QSPI_Init+0x344>)
  gpio_init_structure.Pin       = QSPI_BK1_D3_PIN;
 8007602:	f8cd 8058 	str.w	r8, [sp, #88]	@ 0x58
  HAL_GPIO_Init(QSPI_BK1_D3_GPIO_PORT, &gpio_init_structure);
 8007606:	f001 fa2b 	bl	8008a60 <HAL_GPIO_Init>

  gpio_init_structure.Pin       = QSPI_BK2_D3_PIN;
 800760a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
  HAL_GPIO_Init(QSPI_BK2_D3_GPIO_PORT, &gpio_init_structure);
 800760e:	a916      	add	r1, sp, #88	@ 0x58
 8007610:	484f      	ldr	r0, [pc, #316]	@ (8007750 <BSP_QSPI_Init+0x338>)
  gpio_init_structure.Pin       = QSPI_BK2_D3_PIN;
 8007612:	9316      	str	r3, [sp, #88]	@ 0x58
  HAL_GPIO_Init(QSPI_BK2_D3_GPIO_PORT, &gpio_init_structure);
 8007614:	f001 fa24 	bl	8008a60 <HAL_GPIO_Init>

  /*##-3- Configure the NVIC for QSPI #########################################*/
  /* NVIC configuration for QSPI interrupt */
  HAL_NVIC_SetPriority(QUADSPI_IRQn, 0x0F, 0);
 8007618:	463a      	mov	r2, r7
 800761a:	210f      	movs	r1, #15
 800761c:	205c      	movs	r0, #92	@ 0x5c
 800761e:	f000 fbc9 	bl	8007db4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(QUADSPI_IRQn);
 8007622:	205c      	movs	r0, #92	@ 0x5c
 8007624:	f000 fbf8 	bl	8007e18 <HAL_NVIC_EnableIRQ>
        (void)MT25TL01G_GetFlashInfo(&pInfo);
 8007628:	a811      	add	r0, sp, #68	@ 0x44
 800762a:	f7fe ff38 	bl	800649e <MT25TL01G_GetFlashInfo>
        qspi_init.ClockPrescaler = PrescalerTab[Init->TransferRate];
 800762e:	7863      	ldrb	r3, [r4, #1]
 8007630:	4a4b      	ldr	r2, [pc, #300]	@ (8007760 <BSP_QSPI_Init+0x348>)
        qspi_init.DualFlashMode  = QSPI_DUALFLASH_ENABLE;
 8007632:	f8cd 8040 	str.w	r8, [sp, #64]	@ 0x40
        qspi_init.ClockPrescaler = PrescalerTab[Init->TransferRate];
 8007636:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800763a:	920e      	str	r2, [sp, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800763c:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800763e:	fa92 f2a2 	rbit	r2, r2
        qspi_init.SampleShifting = (Init->TransferRate == BSP_QSPI_STR_TRANSFER) ? QSPI_SAMPLE_SHIFTING_HALFCYCLE : QSPI_SAMPLE_SHIFTING_NONE;
 8007642:	fab3 f383 	clz	r3, r3
  return __builtin_clz(value);
 8007646:	fab2 f282 	clz	r2, r2
        if(MX_QSPI_Init(&hqspi, &qspi_init) != HAL_OK)
 800764a:	a90d      	add	r1, sp, #52	@ 0x34
 800764c:	4845      	ldr	r0, [pc, #276]	@ (8007764 <BSP_QSPI_Init+0x34c>)
        qspi_init.SampleShifting = (Init->TransferRate == BSP_QSPI_STR_TRANSFER) ? QSPI_SAMPLE_SHIFTING_HALFCYCLE : QSPI_SAMPLE_SHIFTING_NONE;
 800764e:	095b      	lsrs	r3, r3, #5
        qspi_init.FlashSize      = (uint32_t)POSITION_VAL((uint32_t)pInfo.FlashSize) - 1U;
 8007650:	3a01      	subs	r2, #1
        qspi_init.SampleShifting = (Init->TransferRate == BSP_QSPI_STR_TRANSFER) ? QSPI_SAMPLE_SHIFTING_HALFCYCLE : QSPI_SAMPLE_SHIFTING_NONE;
 8007652:	011b      	lsls	r3, r3, #4
        qspi_init.FlashSize      = (uint32_t)POSITION_VAL((uint32_t)pInfo.FlashSize) - 1U;
 8007654:	920d      	str	r2, [sp, #52]	@ 0x34
        qspi_init.SampleShifting = (Init->TransferRate == BSP_QSPI_STR_TRANSFER) ? QSPI_SAMPLE_SHIFTING_HALFCYCLE : QSPI_SAMPLE_SHIFTING_NONE;
 8007656:	930f      	str	r3, [sp, #60]	@ 0x3c
        if(MX_QSPI_Init(&hqspi, &qspi_init) != HAL_OK)
 8007658:	f7ff fe74 	bl	8007344 <MX_QSPI_Init>
 800765c:	2800      	cmp	r0, #0
 800765e:	f040 8091 	bne.w	8007784 <BSP_QSPI_Init+0x36c>
static int32_t QSPI_ResetMemory(uint32_t Instance)
{
  int32_t ret = BSP_ERROR_NONE;

  /* Send RESET ENABLE command in QPI mode (QUAD I/Os, 4-4-4) */
  if(MT25TL01G_ResetEnable(&hqspi, MT25TL01G_QPI_MODE) != MT25TL01G_OK)
 8007662:	2103      	movs	r1, #3
 8007664:	483f      	ldr	r0, [pc, #252]	@ (8007764 <BSP_QSPI_Init+0x34c>)
 8007666:	f7ff f88e 	bl	8006786 <MT25TL01G_ResetEnable>
 800766a:	2800      	cmp	r0, #0
 800766c:	f040 8084 	bne.w	8007778 <BSP_QSPI_Init+0x360>
  {
    ret =BSP_ERROR_COMPONENT_FAILURE;
  }/* Send RESET memory command in QPI mode (QUAD I/Os, 4-4-4) */
  else if(MT25TL01G_ResetMemory(&hqspi, MT25TL01G_QPI_MODE) != MT25TL01G_OK)
 8007670:	2103      	movs	r1, #3
 8007672:	483c      	ldr	r0, [pc, #240]	@ (8007764 <BSP_QSPI_Init+0x34c>)
 8007674:	f7ff f8a8 	bl	80067c8 <MT25TL01G_ResetMemory>
 8007678:	2800      	cmp	r0, #0
 800767a:	d17d      	bne.n	8007778 <BSP_QSPI_Init+0x360>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
  }/* Wait Flash ready */
  else if(MT25TL01G_AutoPollingMemReady(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 800767c:	7869      	ldrb	r1, [r5, #1]
 800767e:	4839      	ldr	r0, [pc, #228]	@ (8007764 <BSP_QSPI_Init+0x34c>)
 8007680:	f7fe ff1e 	bl	80064c0 <MT25TL01G_AutoPollingMemReady>
 8007684:	4601      	mov	r1, r0
 8007686:	2800      	cmp	r0, #0
 8007688:	d176      	bne.n	8007778 <BSP_QSPI_Init+0x360>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
  }/* Send RESET ENABLE command in SPI mode (1-1-1) */
  else if(MT25TL01G_ResetEnable(&hqspi, BSP_QSPI_SPI_MODE) != MT25TL01G_OK)
 800768a:	4836      	ldr	r0, [pc, #216]	@ (8007764 <BSP_QSPI_Init+0x34c>)
 800768c:	f7ff f87b 	bl	8006786 <MT25TL01G_ResetEnable>
 8007690:	4601      	mov	r1, r0
 8007692:	2800      	cmp	r0, #0
 8007694:	d170      	bne.n	8007778 <BSP_QSPI_Init+0x360>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
  }/* Send RESET memory command in SPI mode (1-1-1) */
  else if(MT25TL01G_ResetMemory(&hqspi, BSP_QSPI_SPI_MODE) != MT25TL01G_OK)
 8007696:	4833      	ldr	r0, [pc, #204]	@ (8007764 <BSP_QSPI_Init+0x34c>)
 8007698:	f7ff f896 	bl	80067c8 <MT25TL01G_ResetMemory>
 800769c:	4601      	mov	r1, r0
 800769e:	2800      	cmp	r0, #0
 80076a0:	d16a      	bne.n	8007778 <BSP_QSPI_Init+0x360>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
  }
  else
  {
    QSPI_Ctx[Instance].IsInitialized = QSPI_ACCESS_INDIRECT;  /* After reset S/W setting to indirect access   */
 80076a2:	2301      	movs	r3, #1
    QSPI_Ctx[Instance].InterfaceMode = BSP_QSPI_SPI_MODE;     /* After reset H/W back to SPI mode by default  */
    QSPI_Ctx[Instance].TransferRate  = BSP_QSPI_STR_TRANSFER; /* After reset S/W setting to STR mode          */
 80076a4:	70a8      	strb	r0, [r5, #2]
        else if(MT25TL01G_AutoPollingMemReady(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 80076a6:	482f      	ldr	r0, [pc, #188]	@ (8007764 <BSP_QSPI_Init+0x34c>)
    QSPI_Ctx[Instance].IsInitialized = QSPI_ACCESS_INDIRECT;  /* After reset S/W setting to indirect access   */
 80076a8:	802b      	strh	r3, [r5, #0]
        else if(MT25TL01G_AutoPollingMemReady(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 80076aa:	f7fe ff09 	bl	80064c0 <MT25TL01G_AutoPollingMemReady>
 80076ae:	2800      	cmp	r0, #0
 80076b0:	d162      	bne.n	8007778 <BSP_QSPI_Init+0x360>
        else if(MT25TL01G_Enter4BytesAddressMode(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 80076b2:	7869      	ldrb	r1, [r5, #1]
 80076b4:	482b      	ldr	r0, [pc, #172]	@ (8007764 <BSP_QSPI_Init+0x34c>)
 80076b6:	f7fe ff72 	bl	800659e <MT25TL01G_Enter4BytesAddressMode>
 80076ba:	2800      	cmp	r0, #0
 80076bc:	d15c      	bne.n	8007778 <BSP_QSPI_Init+0x360>
    int32_t ret= BSP_ERROR_NONE;
    QSPI_CommandTypeDef s_command;
  uint16_t reg=0;

  /* Initialize the read volatile configuration register command */
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 80076be:	f44f 7340 	mov.w	r3, #768	@ 0x300
  uint16_t reg=0;
 80076c2:	f8ad 0002 	strh.w	r0, [sp, #2]
  s_command.Instruction       = MT25TL01G_READ_VOL_CFG_REG_CMD;
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
  s_command.DataMode          = QSPI_DATA_4_LINES;
  s_command.DummyCycles       = 0;
 80076c6:	901b      	str	r0, [sp, #108]	@ 0x6c
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;

  /* Configure the command */
  if (HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80076c8:	f241 3288 	movw	r2, #5000	@ 0x1388
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 80076cc:	931c      	str	r3, [sp, #112]	@ 0x70
  s_command.Instruction       = MT25TL01G_READ_VOL_CFG_REG_CMD;
 80076ce:	2385      	movs	r3, #133	@ 0x85
  if (HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80076d0:	a916      	add	r1, sp, #88	@ 0x58
  s_command.Instruction       = MT25TL01G_READ_VOL_CFG_REG_CMD;
 80076d2:	9316      	str	r3, [sp, #88]	@ 0x58
  s_command.DataMode          = QSPI_DATA_4_LINES;
 80076d4:	f04f 7340 	mov.w	r3, #50331648	@ 0x3000000
 80076d8:	931f      	str	r3, [sp, #124]	@ 0x7c
  s_command.NbData            = 2;
 80076da:	2302      	movs	r3, #2
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80076dc:	e9cd 001d 	strd	r0, r0, [sp, #116]	@ 0x74
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 80076e0:	e9cd 3020 	strd	r3, r0, [sp, #128]	@ 0x80
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 80076e4:	e9cd 0022 	strd	r0, r0, [sp, #136]	@ 0x88
  if (HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80076e8:	481e      	ldr	r0, [pc, #120]	@ (8007764 <BSP_QSPI_Init+0x34c>)
 80076ea:	f003 fb4f 	bl	800ad8c <HAL_QSPI_Command>
 80076ee:	2800      	cmp	r0, #0
 80076f0:	d142      	bne.n	8007778 <BSP_QSPI_Init+0x360>
  {
    return BSP_ERROR_COMPONENT_FAILURE;
  }

  /* Reception of the data */
  if (HAL_QSPI_Receive(&hqspi, (uint8_t *)(&reg), HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80076f2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80076f6:	f10d 0102 	add.w	r1, sp, #2
 80076fa:	481a      	ldr	r0, [pc, #104]	@ (8007764 <BSP_QSPI_Init+0x34c>)
 80076fc:	f003 fbe7 	bl	800aece <HAL_QSPI_Receive>
 8007700:	2800      	cmp	r0, #0
 8007702:	d139      	bne.n	8007778 <BSP_QSPI_Init+0x360>
  {
    return BSP_ERROR_COMPONENT_FAILURE;
  }

  /* Enable write operations */
  if (MT25TL01G_WriteEnable(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 8007704:	7869      	ldrb	r1, [r5, #1]
 8007706:	4817      	ldr	r0, [pc, #92]	@ (8007764 <BSP_QSPI_Init+0x34c>)
 8007708:	f7fe ff05 	bl	8006516 <MT25TL01G_WriteEnable>
 800770c:	bba0      	cbnz	r0, 8007778 <BSP_QSPI_Init+0x360>
  {
    return BSP_ERROR_COMPONENT_FAILURE;
  }

  /* Update volatile configuration register (with new dummy cycles) */
  s_command.Instruction = MT25TL01G_WRITE_VOL_CFG_REG_CMD;
 800770e:	2381      	movs	r3, #129	@ 0x81
  MODIFY_REG(reg, 0xF0F0, ((MT25TL01G_DUMMY_CYCLES_READ_QUAD << 4) |
                               (MT25TL01G_DUMMY_CYCLES_READ_QUAD << 12)));

  /* Configure the write volatile configuration register command */
  if (HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8007710:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007714:	a916      	add	r1, sp, #88	@ 0x58
 8007716:	4813      	ldr	r0, [pc, #76]	@ (8007764 <BSP_QSPI_Init+0x34c>)
  s_command.Instruction = MT25TL01G_WRITE_VOL_CFG_REG_CMD;
 8007718:	9316      	str	r3, [sp, #88]	@ 0x58
  MODIFY_REG(reg, 0xF0F0, ((MT25TL01G_DUMMY_CYCLES_READ_QUAD << 4) |
 800771a:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 800771e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007722:	051b      	lsls	r3, r3, #20
 8007724:	0d1b      	lsrs	r3, r3, #20
 8007726:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800772a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800772e:	f8ad 3002 	strh.w	r3, [sp, #2]
  if (HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8007732:	f003 fb2b 	bl	800ad8c <HAL_QSPI_Command>
 8007736:	b9f8      	cbnz	r0, 8007778 <BSP_QSPI_Init+0x360>
  {
    return BSP_ERROR_COMPONENT_FAILURE;
  }

  /* Transmission of the data */
  if (HAL_QSPI_Transmit(&hqspi, (uint8_t *)(&reg), HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8007738:	f241 3288 	movw	r2, #5000	@ 0x1388
 800773c:	f10d 0102 	add.w	r1, sp, #2
 8007740:	4808      	ldr	r0, [pc, #32]	@ (8007764 <BSP_QSPI_Init+0x34c>)
 8007742:	f003 fb68 	bl	800ae16 <HAL_QSPI_Transmit>
 8007746:	e00f      	b.n	8007768 <BSP_QSPI_Init+0x350>
 8007748:	58024400 	.word	0x58024400
 800774c:	58020400 	.word	0x58020400
 8007750:	58021800 	.word	0x58021800
 8007754:	58020c00 	.word	0x58020c00
 8007758:	58021c00 	.word	0x58021c00
 800775c:	58021400 	.word	0x58021400
 8007760:	0802bffc 	.word	0x0802bffc
 8007764:	240003c8 	.word	0x240003c8
 8007768:	b930      	cbnz	r0, 8007778 <BSP_QSPI_Init+0x360>
          if(BSP_QSPI_ConfigFlash(Instance, Init->InterfaceMode, Init->TransferRate) != BSP_ERROR_NONE)
 800776a:	7862      	ldrb	r2, [r4, #1]
 800776c:	7821      	ldrb	r1, [r4, #0]
 800776e:	f7ff fe1b 	bl	80073a8 <BSP_QSPI_ConfigFlash>
 8007772:	2800      	cmp	r0, #0
 8007774:	f43f ae5a 	beq.w	800742c <BSP_QSPI_Init+0x14>
            ret = BSP_ERROR_COMPONENT_FAILURE;
 8007778:	f06f 0004 	mvn.w	r0, #4
 800777c:	e657      	b.n	800742e <BSP_QSPI_Init+0x16>
    ret = BSP_ERROR_WRONG_PARAM;
 800777e:	f06f 0001 	mvn.w	r0, #1
 8007782:	e654      	b.n	800742e <BSP_QSPI_Init+0x16>
          ret = BSP_ERROR_PERIPH_FAILURE;
 8007784:	f06f 0003 	mvn.w	r0, #3
  return ret;
 8007788:	e651      	b.n	800742e <BSP_QSPI_Init+0x16>
 800778a:	bf00      	nop

0800778c <BSP_SDRAM_DeInit>:
  * @brief  DeInitializes the SDRAM device.
  * @param Instance  SDRAM Instance
  * @retval BSP status
  */
int32_t BSP_SDRAM_DeInit(uint32_t Instance)
{
 800778c:	b510      	push	{r4, lr}
  int32_t ret = BSP_ERROR_NONE;

  if(Instance >=SDRAM_INSTANCES_NBR)
 800778e:	4604      	mov	r4, r0
 8007790:	b970      	cbnz	r0, 80077b0 <BSP_SDRAM_DeInit+0x24>
    ret =  BSP_ERROR_WRONG_PARAM;
  }
  else
  {
    /* SDRAM device de-initialization */
    hsdram[Instance].Instance = FMC_SDRAM_DEVICE;
 8007792:	4b09      	ldr	r3, [pc, #36]	@ (80077b8 <BSP_SDRAM_DeInit+0x2c>)
 8007794:	4809      	ldr	r0, [pc, #36]	@ (80077bc <BSP_SDRAM_DeInit+0x30>)
 8007796:	6003      	str	r3, [r0, #0]

    (void)HAL_SDRAM_DeInit(&hsdram[Instance]);
 8007798:	f004 ffe4 	bl	800c764 <HAL_SDRAM_DeInit>
  static MDMA_HandleTypeDef mdma_handle;

  /* Prevent unused argument(s) compilation warning */
  UNUSED(hsdram);
  /* Disable NVIC configuration for MDMA interrupt */
  HAL_NVIC_DisableIRQ(SDRAM_MDMAx_IRQn);
 800779c:	207a      	movs	r0, #122	@ 0x7a
 800779e:	f000 fb49 	bl	8007e34 <HAL_NVIC_DisableIRQ>

  /* Deinitialize the stream for new transfer */
  mdma_handle.Instance = SDRAM_MDMAx_CHANNEL;
 80077a2:	4807      	ldr	r0, [pc, #28]	@ (80077c0 <BSP_SDRAM_DeInit+0x34>)
 80077a4:	4b07      	ldr	r3, [pc, #28]	@ (80077c4 <BSP_SDRAM_DeInit+0x38>)
 80077a6:	6003      	str	r3, [r0, #0]
  (void)HAL_MDMA_DeInit(&mdma_handle);
 80077a8:	f003 f82a 	bl	800a800 <HAL_MDMA_DeInit>
    ret = BSP_ERROR_NONE;
 80077ac:	4620      	mov	r0, r4
}
 80077ae:	bd10      	pop	{r4, pc}
    ret =  BSP_ERROR_WRONG_PARAM;
 80077b0:	f06f 0001 	mvn.w	r0, #1
  return ret;
 80077b4:	e7fb      	b.n	80077ae <BSP_SDRAM_DeInit+0x22>
 80077b6:	bf00      	nop
 80077b8:	52004140 	.word	0x52004140
 80077bc:	2400f990 	.word	0x2400f990
 80077c0:	2400f898 	.word	0x2400f898
 80077c4:	52000040 	.word	0x52000040

080077c8 <MX_SDRAM_Init>:
  hSdram->Init.SDBank             = FMC_SDRAM_BANK2;
 80077c8:	2201      	movs	r2, #1
 80077ca:	4915      	ldr	r1, [pc, #84]	@ (8007820 <MX_SDRAM_Init+0x58>)
  hsdram->Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 80077cc:	4b15      	ldr	r3, [pc, #84]	@ (8007824 <MX_SDRAM_Init+0x5c>)
{
 80077ce:	b510      	push	{r4, lr}
  hSdram->Init.SDBank             = FMC_SDRAM_BANK2;
 80077d0:	e9c0 1200 	strd	r1, r2, [r0]
  hSdram->Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_9;
 80077d4:	6082      	str	r2, [r0, #8]
  hSdram->Init.MemoryDataWidth    = FMC_SDRAM_MEM_BUS_WIDTH_32;
 80077d6:	2104      	movs	r1, #4
 80077d8:	2220      	movs	r2, #32
  hSdram->Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_3;
 80077da:	2440      	movs	r4, #64	@ 0x40
{
 80077dc:	b088      	sub	sp, #32
  hSdram->Init.MemoryDataWidth    = FMC_SDRAM_MEM_BUS_WIDTH_32;
 80077de:	e9c0 1203 	strd	r1, r2, [r0, #12]
  hSdram->Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_3;
 80077e2:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 80077e6:	e9c0 4205 	strd	r4, r2, [r0, #20]
  hSdram->Init.SDClockPeriod      = FMC_SDRAM_CLOCK_PERIOD_2;
 80077ea:	2200      	movs	r2, #0
 80077ec:	f44f 6400 	mov.w	r4, #2048	@ 0x800
 80077f0:	e9c0 2407 	strd	r2, r4, [r0, #28]
  hSdram->Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 80077f4:	f44f 5480 	mov.w	r4, #4096	@ 0x1000
 80077f8:	6244      	str	r4, [r0, #36]	@ 0x24
  hsdram->Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 80077fa:	629a      	str	r2, [r3, #40]	@ 0x28
  sdram_timing.ExitSelfRefreshDelay = 7;
 80077fc:	2207      	movs	r2, #7
 80077fe:	2302      	movs	r3, #2
  sdram_timing.RowCycleDelay        = 7;
 8007800:	e9cd 1203 	strd	r1, r2, [sp, #12]
  if(HAL_SDRAM_Init(hSdram, &sdram_timing) != HAL_OK)
 8007804:	4469      	add	r1, sp
  sdram_timing.RCDDelay             = 2;
 8007806:	9307      	str	r3, [sp, #28]
  sdram_timing.ExitSelfRefreshDelay = 7;
 8007808:	e9cd 3201 	strd	r3, r2, [sp, #4]
  sdram_timing.RPDelay              = 2;
 800780c:	e9cd 3305 	strd	r3, r3, [sp, #20]
  if(HAL_SDRAM_Init(hSdram, &sdram_timing) != HAL_OK)
 8007810:	f004 ff80 	bl	800c714 <HAL_SDRAM_Init>
}
 8007814:	3800      	subs	r0, #0
 8007816:	bf18      	it	ne
 8007818:	2001      	movne	r0, #1
 800781a:	b008      	add	sp, #32
 800781c:	bd10      	pop	{r4, pc}
 800781e:	bf00      	nop
 8007820:	52004140 	.word	0x52004140
 8007824:	2400f990 	.word	0x2400f990

08007828 <BSP_SDRAM_Init>:
{
 8007828:	b5f0      	push	{r4, r5, r6, r7, lr}
  if(Instance >=SDRAM_INSTANCES_NBR)
 800782a:	4605      	mov	r5, r0
{
 800782c:	b08f      	sub	sp, #60	@ 0x3c
  if(Instance >=SDRAM_INSTANCES_NBR)
 800782e:	2800      	cmp	r0, #0
 8007830:	f040 80dd 	bne.w	80079ee <BSP_SDRAM_Init+0x1c6>
  __HAL_RCC_FMC_CLK_ENABLE();
 8007834:	4b71      	ldr	r3, [pc, #452]	@ (80079fc <BSP_SDRAM_Init+0x1d4>)
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 8007836:	2703      	movs	r7, #3
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8007838:	a909      	add	r1, sp, #36	@ 0x24
 800783a:	4871      	ldr	r0, [pc, #452]	@ (8007a00 <BSP_SDRAM_Init+0x1d8>)
  __HAL_RCC_FMC_CLK_ENABLE();
 800783c:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
  mdma_handle.Init.Request                  = MDMA_REQUEST_SW;
 8007840:	4c70      	ldr	r4, [pc, #448]	@ (8007a04 <BSP_SDRAM_Init+0x1dc>)
  __HAL_RCC_FMC_CLK_ENABLE();
 8007842:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
  __HAL_LINKDMA(hsdram, hmdma, mdma_handle);
 8007846:	4e70      	ldr	r6, [pc, #448]	@ (8007a08 <BSP_SDRAM_Init+0x1e0>)
  __HAL_RCC_FMC_CLK_ENABLE();
 8007848:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
 800784c:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 8007850:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8007854:	9201      	str	r2, [sp, #4]
 8007856:	9a01      	ldr	r2, [sp, #4]
  SDRAM_MDMAx_CLK_ENABLE();
 8007858:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 800785c:	f042 0201 	orr.w	r2, r2, #1
 8007860:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
 8007864:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 8007868:	f002 0201 	and.w	r2, r2, #1
 800786c:	9202      	str	r2, [sp, #8]
 800786e:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8007870:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8007874:	f042 0208 	orr.w	r2, r2, #8
 8007878:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 800787c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8007880:	f002 0208 	and.w	r2, r2, #8
 8007884:	9203      	str	r2, [sp, #12]
 8007886:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8007888:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800788c:	f042 0210 	orr.w	r2, r2, #16
 8007890:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8007894:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8007898:	f002 0210 	and.w	r2, r2, #16
 800789c:	9204      	str	r2, [sp, #16]
 800789e:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80078a0:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80078a4:	f042 0220 	orr.w	r2, r2, #32
 80078a8:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 80078ac:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80078b0:	f002 0220 	and.w	r2, r2, #32
 80078b4:	9205      	str	r2, [sp, #20]
 80078b6:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80078b8:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80078bc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80078c0:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 80078c4:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80078c8:	f002 0240 	and.w	r2, r2, #64	@ 0x40
 80078cc:	9206      	str	r2, [sp, #24]
 80078ce:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80078d0:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80078d4:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80078d8:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 80078dc:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80078e0:	f002 0280 	and.w	r2, r2, #128	@ 0x80
 80078e4:	9207      	str	r2, [sp, #28]
 80078e6:	9a07      	ldr	r2, [sp, #28]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80078e8:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80078ec:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80078f0:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
  gpio_init_structure.Pull      = GPIO_PULLUP;
 80078f4:	2202      	movs	r2, #2
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80078f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80078fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80078fe:	9308      	str	r3, [sp, #32]
 8007900:	9b08      	ldr	r3, [sp, #32]
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8007902:	2301      	movs	r3, #1
 8007904:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 8007908:	230c      	movs	r3, #12
 800790a:	e9cd 730c 	strd	r7, r3, [sp, #48]	@ 0x30
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8| GPIO_PIN_9 | GPIO_PIN_10 |\
 800790e:	f24c 7303 	movw	r3, #50947	@ 0xc703
 8007912:	9309      	str	r3, [sp, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8007914:	f001 f8a4 	bl	8008a60 <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 8007918:	f64f 7383 	movw	r3, #65411	@ 0xff83
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 800791c:	a909      	add	r1, sp, #36	@ 0x24
 800791e:	483b      	ldr	r0, [pc, #236]	@ (8007a0c <BSP_SDRAM_Init+0x1e4>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 8007920:	9309      	str	r3, [sp, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8007922:	f001 f89d 	bl	8008a60 <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 8007926:	f64f 033f 	movw	r3, #63551	@ 0xf83f
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 800792a:	a909      	add	r1, sp, #36	@ 0x24
 800792c:	4838      	ldr	r0, [pc, #224]	@ (8007a10 <BSP_SDRAM_Init+0x1e8>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 800792e:	9309      	str	r3, [sp, #36]	@ 0x24
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 8007930:	f001 f896 	bl	8008a60 <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 /*| GPIO_PIN_3 */|\
 8007934:	f248 1337 	movw	r3, #33079	@ 0x8137
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8007938:	a909      	add	r1, sp, #36	@ 0x24
 800793a:	4836      	ldr	r0, [pc, #216]	@ (8007a14 <BSP_SDRAM_Init+0x1ec>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 /*| GPIO_PIN_3 */|\
 800793c:	9309      	str	r3, [sp, #36]	@ 0x24
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 800793e:	f001 f88f 	bl	8008a60 <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9 |\
 8007942:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
  HAL_GPIO_Init(GPIOH, &gpio_init_structure);
 8007946:	a909      	add	r1, sp, #36	@ 0x24
 8007948:	4833      	ldr	r0, [pc, #204]	@ (8007a18 <BSP_SDRAM_Init+0x1f0>)
  gpio_init_structure.Pin   = GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9 |\
 800794a:	9309      	str	r3, [sp, #36]	@ 0x24
  HAL_GPIO_Init(GPIOH, &gpio_init_structure);
 800794c:	f001 f888 	bl	8008a60 <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 |\
 8007950:	f240 63ff 	movw	r3, #1791	@ 0x6ff
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 8007954:	a909      	add	r1, sp, #36	@ 0x24
 8007956:	4831      	ldr	r0, [pc, #196]	@ (8007a1c <BSP_SDRAM_Init+0x1f4>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 |\
 8007958:	9309      	str	r3, [sp, #36]	@ 0x24
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 800795a:	f001 f881 	bl	8008a60 <HAL_GPIO_Init>
  mdma_handle.Init.TransferTriggerMode      = MDMA_BLOCK_TRANSFER;
 800795e:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8007962:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
  mdma_handle.Init.DestinationInc           = MDMA_DEST_INC_WORD;
 8007966:	f240 2002 	movw	r0, #514	@ 0x202
 800796a:	f640 0208 	movw	r2, #2056	@ 0x808
  __HAL_LINKDMA(hsdram, hmdma, mdma_handle);
 800796e:	6334      	str	r4, [r6, #48]	@ 0x30
 8007970:	6426      	str	r6, [r4, #64]	@ 0x40
  mdma_handle.Init.TransferTriggerMode      = MDMA_BLOCK_TRANSFER;
 8007972:	e9c4 1301 	strd	r1, r3, [r4, #4]
  mdma_handle.Init.DestinationInc           = MDMA_DEST_INC_WORD;
 8007976:	e9c4 0205 	strd	r0, r2, [r4, #20]
  mdma_handle.Init.Priority                 = MDMA_PRIORITY_HIGH;
 800797a:	2380      	movs	r3, #128	@ 0x80
  mdma_handle.Init.SourceDataSize           = MDMA_SRC_DATASIZE_WORD;
 800797c:	2220      	movs	r2, #32
  (void)HAL_MDMA_DeInit(&mdma_handle);
 800797e:	4620      	mov	r0, r4
  mdma_handle.Init.BufferTransferLength     = 128;
 8007980:	62a3      	str	r3, [r4, #40]	@ 0x28
  mdma_handle.Init.DestDataSize             = MDMA_DEST_DATASIZE_WORD;
 8007982:	e9c4 2307 	strd	r2, r3, [r4, #28]
  mdma_handle.Init.Endianness               = MDMA_LITTLE_ENDIANNESS_PRESERVE;
 8007986:	e9c4 3503 	strd	r3, r5, [r4, #12]
  mdma_handle.Init.DataAlignment            = MDMA_DATAALIGN_PACKENABLE;
 800798a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
  mdma_handle.Instance                      = SDRAM_MDMAx_CHANNEL;
 800798e:	4b24      	ldr	r3, [pc, #144]	@ (8007a20 <BSP_SDRAM_Init+0x1f8>)
  mdma_handle.Init.DataAlignment            = MDMA_DATAALIGN_PACKENABLE;
 8007990:	6262      	str	r2, [r4, #36]	@ 0x24
  mdma_handle.Instance                      = SDRAM_MDMAx_CHANNEL;
 8007992:	6023      	str	r3, [r4, #0]
  mdma_handle.Init.DestBurst                = MDMA_DEST_BURST_SINGLE;
 8007994:	e9c4 550b 	strd	r5, r5, [r4, #44]	@ 0x2c
  mdma_handle.Init.DestBlockAddressOffset   = 0;
 8007998:	e9c4 550d 	strd	r5, r5, [r4, #52]	@ 0x34
  (void)HAL_MDMA_DeInit(&mdma_handle);
 800799c:	f002 ff30 	bl	800a800 <HAL_MDMA_DeInit>
  (void)HAL_MDMA_Init(&mdma_handle);
 80079a0:	4620      	mov	r0, r4
 80079a2:	f002 febe 	bl	800a722 <HAL_MDMA_Init>
  HAL_NVIC_SetPriority(SDRAM_MDMAx_IRQn, BSP_SDRAM_IT_PRIORITY, 0);
 80079a6:	462a      	mov	r2, r5
 80079a8:	210f      	movs	r1, #15
 80079aa:	207a      	movs	r0, #122	@ 0x7a
 80079ac:	f000 fa02 	bl	8007db4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_MDMAx_IRQn);
 80079b0:	207a      	movs	r0, #122	@ 0x7a
 80079b2:	f000 fa31 	bl	8007e18 <HAL_NVIC_EnableIRQ>
    if(MX_SDRAM_Init(&hsdram[0]) != HAL_OK)
 80079b6:	4630      	mov	r0, r6
 80079b8:	f7ff ff06 	bl	80077c8 <MX_SDRAM_Init>
 80079bc:	b9d0      	cbnz	r0, 80079f4 <BSP_SDRAM_Init+0x1cc>
      pRegMode.TargetBank      = FMC_SDRAM_CMD_TARGET_BANK2;
 80079be:	4919      	ldr	r1, [pc, #100]	@ (8007a24 <BSP_SDRAM_Init+0x1fc>)
 80079c0:	2308      	movs	r3, #8
      pRegMode.RefreshMode     = IS42S32800J_AUTOREFRESH_MODE_CMD;
 80079c2:	e9c1 3700 	strd	r3, r7, [r1]
      pRegMode.RefreshRate     = REFRESH_COUNT;
 80079c6:	f240 6303 	movw	r3, #1539	@ 0x603
      pRegMode.BurstType       = IS42S32800J_BURST_TYPE_SEQUENTIAL;
 80079ca:	6108      	str	r0, [r1, #16]
      pRegMode.BurstLength     = IS42S32800J_BURST_LENGTH_1;
 80079cc:	e9c1 3002 	strd	r3, r0, [r1, #8]
      pRegMode.CASLatency      = IS42S32800J_CAS_LATENCY_3;
 80079d0:	2330      	movs	r3, #48	@ 0x30
      pRegMode.OperationMode   = IS42S32800J_OPERATING_MODE_STANDARD;
 80079d2:	e9c1 3005 	strd	r3, r0, [r1, #20]
      pRegMode.WriteBurstMode  = IS42S32800J_WRITEBURST_MODE_SINGLE;
 80079d6:	f44f 7300 	mov.w	r3, #512	@ 0x200
      if(IS42S32800J_Init(&hsdram[0], &pRegMode) != IS42S32800J_OK)
 80079da:	4630      	mov	r0, r6
      pRegMode.WriteBurstMode  = IS42S32800J_WRITEBURST_MODE_SINGLE;
 80079dc:	61cb      	str	r3, [r1, #28]
      if(IS42S32800J_Init(&hsdram[0], &pRegMode) != IS42S32800J_OK)
 80079de:	f7fe fd31 	bl	8006444 <IS42S32800J_Init>
        ret =  BSP_ERROR_COMPONENT_FAILURE;
 80079e2:	2800      	cmp	r0, #0
 80079e4:	bf18      	it	ne
 80079e6:	f06f 0004 	mvnne.w	r0, #4
}
 80079ea:	b00f      	add	sp, #60	@ 0x3c
 80079ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ret =  BSP_ERROR_WRONG_PARAM;
 80079ee:	f06f 0001 	mvn.w	r0, #1
 80079f2:	e7fa      	b.n	80079ea <BSP_SDRAM_Init+0x1c2>
      ret = BSP_ERROR_NO_INIT;
 80079f4:	f04f 30ff 	mov.w	r0, #4294967295
  return ret;
 80079f8:	e7f7      	b.n	80079ea <BSP_SDRAM_Init+0x1c2>
 80079fa:	bf00      	nop
 80079fc:	58024400 	.word	0x58024400
 8007a00:	58020c00 	.word	0x58020c00
 8007a04:	2400f904 	.word	0x2400f904
 8007a08:	2400f990 	.word	0x2400f990
 8007a0c:	58021000 	.word	0x58021000
 8007a10:	58021400 	.word	0x58021400
 8007a14:	58021800 	.word	0x58021800
 8007a18:	58021c00 	.word	0x58021c00
 8007a1c:	58022000 	.word	0x58022000
 8007a20:	52000040 	.word	0x52000040
 8007a24:	2400f970 	.word	0x2400f970

08007a28 <BSP_TS_Init>:
  * @param  Instance TS instance. Could be only 0.
  * @param  TS_Init  TS Init structure
  * @retval BSP status
  */
int32_t BSP_TS_Init(uint32_t Instance, TS_Init_t *TS_Init)
{
 8007a28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007a2c:	460c      	mov	r4, r1
 8007a2e:	b08c      	sub	sp, #48	@ 0x30
  int32_t ret = BSP_ERROR_NONE;

  if((Instance >=TS_INSTANCES_NBR) || (TS_Init->Width == 0U) ||( TS_Init->Width > TS_MAX_WIDTH) ||\
 8007a30:	4606      	mov	r6, r0
 8007a32:	2800      	cmp	r0, #0
 8007a34:	d15c      	bne.n	8007af0 <BSP_TS_Init+0xc8>
 8007a36:	680b      	ldr	r3, [r1, #0]
 8007a38:	1e5a      	subs	r2, r3, #1
 8007a3a:	f5b2 7f48 	cmp.w	r2, #800	@ 0x320
 8007a3e:	d257      	bcs.n	8007af0 <BSP_TS_Init+0xc8>
                         (TS_Init->Height == 0U) ||( TS_Init->Height > TS_MAX_HEIGHT) ||\
 8007a40:	684a      	ldr	r2, [r1, #4]
  if((Instance >=TS_INSTANCES_NBR) || (TS_Init->Width == 0U) ||( TS_Init->Width > TS_MAX_WIDTH) ||\
 8007a42:	1e51      	subs	r1, r2, #1
 8007a44:	f5b1 7ff0 	cmp.w	r1, #480	@ 0x1e0
 8007a48:	d252      	bcs.n	8007af0 <BSP_TS_Init+0xc8>
                         (TS_Init->Accuracy > TS_MIN((TS_Init->Width), (TS_Init->Height))))
 8007a4a:	4293      	cmp	r3, r2
 8007a4c:	bf28      	it	cs
 8007a4e:	4613      	movcs	r3, r2
                         (TS_Init->Height == 0U) ||( TS_Init->Height > TS_MAX_HEIGHT) ||\
 8007a50:	68e2      	ldr	r2, [r4, #12]
 8007a52:	429a      	cmp	r2, r3
 8007a54:	d84c      	bhi.n	8007af0 <BSP_TS_Init+0xc8>
  int32_t ret;
  FT6X06_IO_t              IOCtx;
  static FT6X06_Object_t   FT6X06Obj;
  FT6X06_Capabilities_t    Cap;
  uint32_t id, i;
  uint32_t const i2c_address[] = {TS_I2C_ADDRESS, TS_I2C_ADDRESS_A02};
 8007a56:	2370      	movs	r3, #112	@ 0x70
 8007a58:	2254      	movs	r2, #84	@ 0x54
 8007a5a:	f10d 0904 	add.w	r9, sp, #4

  for(i = 0; i < 2UL; i++)
  {
    IOCtx.Address     = (uint16_t)i2c_address[i];

    if(FT6X06_RegisterBusIO (&FT6X06Obj, &IOCtx) != FT6X06_OK)
 8007a5e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8007b34 <BSP_TS_Init+0x10c>
  uint32_t const i2c_address[] = {TS_I2C_ADDRESS, TS_I2C_ADDRESS_A02};
 8007a62:	e9cd 2301 	strd	r2, r3, [sp, #4]
  IOCtx.Init        = BSP_I2C4_Init;
 8007a66:	4b2e      	ldr	r3, [pc, #184]	@ (8007b20 <BSP_TS_Init+0xf8>)
 8007a68:	9306      	str	r3, [sp, #24]
  IOCtx.DeInit      = BSP_I2C4_DeInit;
 8007a6a:	4b2e      	ldr	r3, [pc, #184]	@ (8007b24 <BSP_TS_Init+0xfc>)
 8007a6c:	9307      	str	r3, [sp, #28]
  IOCtx.ReadReg     = BSP_I2C4_ReadReg;
 8007a6e:	4b2e      	ldr	r3, [pc, #184]	@ (8007b28 <BSP_TS_Init+0x100>)
 8007a70:	930a      	str	r3, [sp, #40]	@ 0x28
  IOCtx.WriteReg    = BSP_I2C4_WriteReg;
 8007a72:	4b2e      	ldr	r3, [pc, #184]	@ (8007b2c <BSP_TS_Init+0x104>)
 8007a74:	9309      	str	r3, [sp, #36]	@ 0x24
  IOCtx.GetTick     = BSP_GetTick;
 8007a76:	4b2e      	ldr	r3, [pc, #184]	@ (8007b30 <BSP_TS_Init+0x108>)
 8007a78:	930b      	str	r3, [sp, #44]	@ 0x2c
    IOCtx.Address     = (uint16_t)i2c_address[i];
 8007a7a:	f859 3b04 	ldr.w	r3, [r9], #4
    if(FT6X06_RegisterBusIO (&FT6X06Obj, &IOCtx) != FT6X06_OK)
 8007a7e:	a906      	add	r1, sp, #24
 8007a80:	482c      	ldr	r0, [pc, #176]	@ (8007b34 <BSP_TS_Init+0x10c>)
    IOCtx.Address     = (uint16_t)i2c_address[i];
 8007a82:	f8ad 3020 	strh.w	r3, [sp, #32]
    if(FT6X06_RegisterBusIO (&FT6X06Obj, &IOCtx) != FT6X06_OK)
 8007a86:	f7fe fbe3 	bl	8006250 <FT6X06_RegisterBusIO>
 8007a8a:	b9c0      	cbnz	r0, 8007abe <BSP_TS_Init+0x96>
    {
      ret = BSP_ERROR_BUS_FAILURE;
    }
    else if(FT6X06_ReadID(&FT6X06Obj, &id) != FT6X06_OK)
 8007a8c:	4669      	mov	r1, sp
 8007a8e:	4829      	ldr	r0, [pc, #164]	@ (8007b34 <BSP_TS_Init+0x10c>)
 8007a90:	f7fe fb28 	bl	80060e4 <FT6X06_ReadID>
 8007a94:	b998      	cbnz	r0, 8007abe <BSP_TS_Init+0x96>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
    }
    else if(id != FT6X06_ID)
 8007a96:	9b00      	ldr	r3, [sp, #0]
 8007a98:	2b11      	cmp	r3, #17
 8007a9a:	d110      	bne.n	8007abe <BSP_TS_Init+0x96>
      ret = BSP_ERROR_UNKNOWN_COMPONENT;
    }
    else
    {

      (void)FT6X06_GetCapabilities(&FT6X06Obj, &Cap);
 8007a9c:	a903      	add	r1, sp, #12
 8007a9e:	4825      	ldr	r0, [pc, #148]	@ (8007b34 <BSP_TS_Init+0x10c>)
 8007aa0:	f7fe fad4 	bl	800604c <FT6X06_GetCapabilities>
      Ts_CompObj[Instance] = &FT6X06Obj;
 8007aa4:	4f24      	ldr	r7, [pc, #144]	@ (8007b38 <BSP_TS_Init+0x110>)
      Ts_Drv = (TS_Drv_t *) &FT6X06_TS_Driver;
 8007aa6:	4b25      	ldr	r3, [pc, #148]	@ (8007b3c <BSP_TS_Init+0x114>)
 8007aa8:	f8df 8098 	ldr.w	r8, [pc, #152]	@ 8007b44 <BSP_TS_Init+0x11c>

      if(Ts_Drv->Init(Ts_CompObj[Instance]) != FT6X06_OK)
 8007aac:	4821      	ldr	r0, [pc, #132]	@ (8007b34 <BSP_TS_Init+0x10c>)
      Ts_Drv = (TS_Drv_t *) &FT6X06_TS_Driver;
 8007aae:	f8c8 3000 	str.w	r3, [r8]
      Ts_CompObj[Instance] = &FT6X06Obj;
 8007ab2:	f8c7 a000 	str.w	sl, [r7]
      if(Ts_Drv->Init(Ts_CompObj[Instance]) != FT6X06_OK)
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	4798      	blx	r3
 8007aba:	4605      	mov	r5, r0
 8007abc:	b1d8      	cbz	r0, 8007af6 <BSP_TS_Init+0xce>
  for(i = 0; i < 2UL; i++)
 8007abe:	b116      	cbz	r6, 8007ac6 <BSP_TS_Init+0x9e>
      ret = BSP_ERROR_NO_INIT;
 8007ac0:	f04f 35ff 	mov.w	r5, #4294967295
 8007ac4:	e010      	b.n	8007ae8 <BSP_TS_Init+0xc0>
  for(i = 0; i < 2UL; i++)
 8007ac6:	2601      	movs	r6, #1
 8007ac8:	e7d7      	b.n	8007a7a <BSP_TS_Init+0x52>
        Ts_Ctx[Instance].MaxX = Capabilities.MaxXl;
 8007aca:	9b07      	ldr	r3, [sp, #28]
          Ts_Ctx[Instance].PreviousX[i] = TS_Init->Width + TS_Init->Accuracy + 1U;
 8007acc:	6822      	ldr	r2, [r4, #0]
        Ts_Ctx[Instance].MaxX = Capabilities.MaxXl;
 8007ace:	6133      	str	r3, [r6, #16]
        Ts_Ctx[Instance].MaxY = Capabilities.MaxYl;
 8007ad0:	9b08      	ldr	r3, [sp, #32]
          Ts_Ctx[Instance].PreviousY[i] = TS_Init->Height + TS_Init->Accuracy + 1U;
 8007ad2:	6861      	ldr	r1, [r4, #4]
        Ts_Ctx[Instance].MaxY = Capabilities.MaxYl;
 8007ad4:	6173      	str	r3, [r6, #20]
          Ts_Ctx[Instance].PreviousX[i] = TS_Init->Width + TS_Init->Accuracy + 1U;
 8007ad6:	68e3      	ldr	r3, [r4, #12]
 8007ad8:	441a      	add	r2, r3
          Ts_Ctx[Instance].PreviousY[i] = TS_Init->Height + TS_Init->Accuracy + 1U;
 8007ada:	440b      	add	r3, r1
          Ts_Ctx[Instance].PreviousX[i] = TS_Init->Width + TS_Init->Accuracy + 1U;
 8007adc:	3201      	adds	r2, #1
          Ts_Ctx[Instance].PreviousY[i] = TS_Init->Height + TS_Init->Accuracy + 1U;
 8007ade:	3301      	adds	r3, #1
          Ts_Ctx[Instance].PreviousX[i] = TS_Init->Width + TS_Init->Accuracy + 1U;
 8007ae0:	61b2      	str	r2, [r6, #24]
          Ts_Ctx[Instance].PreviousY[i] = TS_Init->Height + TS_Init->Accuracy + 1U;
 8007ae2:	6273      	str	r3, [r6, #36]	@ 0x24
          Ts_Ctx[Instance].PreviousX[i] = TS_Init->Width + TS_Init->Accuracy + 1U;
 8007ae4:	e9c6 2307 	strd	r2, r3, [r6, #28]
}
 8007ae8:	4628      	mov	r0, r5
 8007aea:	b00c      	add	sp, #48	@ 0x30
 8007aec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    ret = BSP_ERROR_WRONG_PARAM;
 8007af0:	f06f 0501 	mvn.w	r5, #1
  return ret;
 8007af4:	e7f8      	b.n	8007ae8 <BSP_TS_Init+0xc0>
      Ts_Ctx[Instance].Width             = TS_Init->Width;
 8007af6:	6823      	ldr	r3, [r4, #0]
      if (Ts_Drv->GetCapabilities(Ts_CompObj[Instance], &Capabilities) < 0)
 8007af8:	a906      	add	r1, sp, #24
      Ts_Ctx[Instance].Width             = TS_Init->Width;
 8007afa:	4e11      	ldr	r6, [pc, #68]	@ (8007b40 <BSP_TS_Init+0x118>)
      if (Ts_Drv->GetCapabilities(Ts_CompObj[Instance], &Capabilities) < 0)
 8007afc:	6838      	ldr	r0, [r7, #0]
      Ts_Ctx[Instance].Width             = TS_Init->Width;
 8007afe:	6033      	str	r3, [r6, #0]
      Ts_Ctx[Instance].Height            = TS_Init->Height;
 8007b00:	6863      	ldr	r3, [r4, #4]
 8007b02:	6073      	str	r3, [r6, #4]
      Ts_Ctx[Instance].Orientation       = TS_Init->Orientation;
 8007b04:	68a3      	ldr	r3, [r4, #8]
 8007b06:	60b3      	str	r3, [r6, #8]
      Ts_Ctx[Instance].Accuracy          = TS_Init->Accuracy;
 8007b08:	68e3      	ldr	r3, [r4, #12]
 8007b0a:	60f3      	str	r3, [r6, #12]
      if (Ts_Drv->GetCapabilities(Ts_CompObj[Instance], &Capabilities) < 0)
 8007b0c:	f8d8 3000 	ldr.w	r3, [r8]
 8007b10:	69db      	ldr	r3, [r3, #28]
 8007b12:	4798      	blx	r3
 8007b14:	2800      	cmp	r0, #0
 8007b16:	dad8      	bge.n	8007aca <BSP_TS_Init+0xa2>
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8007b18:	f06f 0504 	mvn.w	r5, #4
 8007b1c:	e7e4      	b.n	8007ae8 <BSP_TS_Init+0xc0>
 8007b1e:	bf00      	nop
 8007b20:	08007031 	.word	0x08007031
 8007b24:	08006f9d 	.word	0x08006f9d
 8007b28:	0800730d 	.word	0x0800730d
 8007b2c:	080072d9 	.word	0x080072d9
 8007b30:	08007341 	.word	0x08007341
 8007b34:	2400f9c4 	.word	0x2400f9c4
 8007b38:	2400f9ec 	.word	0x2400f9ec
 8007b3c:	24000038 	.word	0x24000038
 8007b40:	2400f9f0 	.word	0x2400f9f0
 8007b44:	2400fa18 	.word	0x2400fa18

08007b48 <BSP_TS_GetState>:
{
 8007b48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007b4a:	460c      	mov	r4, r1
 8007b4c:	b085      	sub	sp, #20
  if(Instance >= TS_INSTANCES_NBR)
 8007b4e:	2800      	cmp	r0, #0
 8007b50:	d14d      	bne.n	8007bee <BSP_TS_GetState+0xa6>
    if(Ts_Drv->GetState(Ts_CompObj[Instance], &state) < 0)
 8007b52:	4b28      	ldr	r3, [pc, #160]	@ (8007bf4 <BSP_TS_GetState+0xac>)
 8007b54:	a901      	add	r1, sp, #4
 8007b56:	4a28      	ldr	r2, [pc, #160]	@ (8007bf8 <BSP_TS_GetState+0xb0>)
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	6810      	ldr	r0, [r2, #0]
 8007b5c:	691b      	ldr	r3, [r3, #16]
 8007b5e:	4798      	blx	r3
 8007b60:	2800      	cmp	r0, #0
 8007b62:	db41      	blt.n	8007be8 <BSP_TS_GetState+0xa0>
      x_diff = (TS_State->TouchX > Ts_Ctx[Instance].PreviousX[0])?
 8007b64:	4925      	ldr	r1, [pc, #148]	@ (8007bfc <BSP_TS_GetState+0xb4>)
    else if(state.TouchDetected != 0U)
 8007b66:	9e01      	ldr	r6, [sp, #4]
      x_diff = (TS_State->TouchX > Ts_Ctx[Instance].PreviousX[0])?
 8007b68:	698d      	ldr	r5, [r1, #24]
      y_diff = (TS_State->TouchY > Ts_Ctx[Instance].PreviousY[0])?
 8007b6a:	6a08      	ldr	r0, [r1, #32]
    else if(state.TouchDetected != 0U)
 8007b6c:	2e00      	cmp	r6, #0
 8007b6e:	d037      	beq.n	8007be0 <BSP_TS_GetState+0x98>
      if((Ts_Ctx[Instance].Orientation & TS_SWAP_XY) == TS_SWAP_XY)
 8007b70:	688f      	ldr	r7, [r1, #8]
        x_oriented = Ts_Ctx[Instance].MaxX - x_oriented - 1UL;
 8007b72:	f8d1 e010 	ldr.w	lr, [r1, #16]
      if((Ts_Ctx[Instance].Orientation & TS_SWAP_XY) == TS_SWAP_XY)
 8007b76:	f017 0f08 	tst.w	r7, #8
      y_oriented = state.TouchY;
 8007b7a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
      if((Ts_Ctx[Instance].Orientation & TS_SWAP_XY) == TS_SWAP_XY)
 8007b7e:	bf1e      	ittt	ne
 8007b80:	4694      	movne	ip, r2
        x_oriented = state.TouchY;
 8007b82:	461a      	movne	r2, r3
        y_oriented = state.TouchX;
 8007b84:	4663      	movne	r3, ip
      if((Ts_Ctx[Instance].Orientation & TS_SWAP_X) == TS_SWAP_X)
 8007b86:	f017 0f02 	tst.w	r7, #2
        x_oriented = Ts_Ctx[Instance].MaxX - x_oriented - 1UL;
 8007b8a:	bf1c      	itt	ne
 8007b8c:	f10e 3cff 	addne.w	ip, lr, #4294967295
 8007b90:	ebac 0202 	subne.w	r2, ip, r2
        y_oriented = Ts_Ctx[Instance].MaxY - y_oriented - 1UL;
 8007b94:	f8d1 c014 	ldr.w	ip, [r1, #20]
      if((Ts_Ctx[Instance].Orientation & TS_SWAP_Y) == TS_SWAP_Y)
 8007b98:	077f      	lsls	r7, r7, #29
        y_oriented = Ts_Ctx[Instance].MaxY - y_oriented - 1UL;
 8007b9a:	bf44      	itt	mi
 8007b9c:	f10c 37ff 	addmi.w	r7, ip, #4294967295
 8007ba0:	1afb      	submi	r3, r7, r3
      TS_State->TouchX = (x_oriented * Ts_Ctx[Instance].Width) / Ts_Ctx[Instance].MaxX;
 8007ba2:	680f      	ldr	r7, [r1, #0]
 8007ba4:	437a      	muls	r2, r7
      TS_State->TouchY = (y_oriented * Ts_Ctx[Instance].Height) / Ts_Ctx[Instance].MaxY;
 8007ba6:	684f      	ldr	r7, [r1, #4]
      TS_State->TouchDetected = state.TouchDetected;
 8007ba8:	6026      	str	r6, [r4, #0]
      TS_State->TouchY = (y_oriented * Ts_Ctx[Instance].Height) / Ts_Ctx[Instance].MaxY;
 8007baa:	437b      	muls	r3, r7
      if ((x_diff > Ts_Ctx[Instance].Accuracy) || (y_diff > Ts_Ctx[Instance].Accuracy))
 8007bac:	68cf      	ldr	r7, [r1, #12]
      TS_State->TouchX = (x_oriented * Ts_Ctx[Instance].Width) / Ts_Ctx[Instance].MaxX;
 8007bae:	fbb2 f2fe 	udiv	r2, r2, lr
      TS_State->TouchY = (y_oriented * Ts_Ctx[Instance].Height) / Ts_Ctx[Instance].MaxY;
 8007bb2:	fbb3 f3fc 	udiv	r3, r3, ip
               (TS_State->TouchX - Ts_Ctx[Instance].PreviousX[0]):
 8007bb6:	42aa      	cmp	r2, r5
      TS_State->TouchX = (x_oriented * Ts_Ctx[Instance].Width) / Ts_Ctx[Instance].MaxX;
 8007bb8:	6062      	str	r2, [r4, #4]
      TS_State->TouchY = (y_oriented * Ts_Ctx[Instance].Height) / Ts_Ctx[Instance].MaxY;
 8007bba:	60a3      	str	r3, [r4, #8]
               (TS_State->TouchX - Ts_Ctx[Instance].PreviousX[0]):
 8007bbc:	bf8c      	ite	hi
 8007bbe:	eba2 0c05 	subhi.w	ip, r2, r5
 8007bc2:	eba5 0c02 	subls.w	ip, r5, r2
               (TS_State->TouchY - Ts_Ctx[Instance].PreviousY[0]):
 8007bc6:	4283      	cmp	r3, r0
 8007bc8:	bf8c      	ite	hi
 8007bca:	1a1e      	subhi	r6, r3, r0
 8007bcc:	1ac6      	subls	r6, r0, r3
      if ((x_diff > Ts_Ctx[Instance].Accuracy) || (y_diff > Ts_Ctx[Instance].Accuracy))
 8007bce:	4567      	cmp	r7, ip
 8007bd0:	d301      	bcc.n	8007bd6 <BSP_TS_GetState+0x8e>
 8007bd2:	42b7      	cmp	r7, r6
 8007bd4:	d205      	bcs.n	8007be2 <BSP_TS_GetState+0x9a>
        Ts_Ctx[Instance].PreviousX[0] = TS_State->TouchX;
 8007bd6:	618a      	str	r2, [r1, #24]
        Ts_Ctx[Instance].PreviousY[0] = TS_State->TouchY;
 8007bd8:	620b      	str	r3, [r1, #32]
  int32_t ret = BSP_ERROR_NONE;
 8007bda:	2000      	movs	r0, #0
}
 8007bdc:	b005      	add	sp, #20
 8007bde:	bdf0      	pop	{r4, r5, r6, r7, pc}
      TS_State->TouchDetected = 0U;
 8007be0:	6026      	str	r6, [r4, #0]
      TS_State->TouchY = Ts_Ctx[Instance].PreviousY[0];
 8007be2:	e9c4 5001 	strd	r5, r0, [r4, #4]
 8007be6:	e7f8      	b.n	8007bda <BSP_TS_GetState+0x92>
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8007be8:	f06f 0004 	mvn.w	r0, #4
 8007bec:	e7f6      	b.n	8007bdc <BSP_TS_GetState+0x94>
    ret = BSP_ERROR_WRONG_PARAM;
 8007bee:	f06f 0001 	mvn.w	r0, #1
  return ret;
 8007bf2:	e7f3      	b.n	8007bdc <BSP_TS_GetState+0x94>
 8007bf4:	2400fa18 	.word	0x2400fa18
 8007bf8:	2400f9ec 	.word	0x2400f9ec
 8007bfc:	2400f9f0 	.word	0x2400f9f0

08007c00 <SystemInit>:
  */
void SystemInit (void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8007c00:	4b2d      	ldr	r3, [pc, #180]	@ (8007cb8 <SystemInit+0xb8>)
 8007c02:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8007c06:	f442 0270 	orr.w	r2, r2, #15728640	@ 0xf00000
 8007c0a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8007c0e:	691a      	ldr	r2, [r3, #16]
 8007c10:	f042 0210 	orr.w	r2, r2, #16
 8007c14:	611a      	str	r2, [r3, #16]

#ifdef CORE_CM7
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8007c16:	4a29      	ldr	r2, [pc, #164]	@ (8007cbc <SystemInit+0xbc>)
 8007c18:	6813      	ldr	r3, [r2, #0]
 8007c1a:	f003 030f 	and.w	r3, r3, #15
 8007c1e:	2b06      	cmp	r3, #6
 8007c20:	d805      	bhi.n	8007c2e <SystemInit+0x2e>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8007c22:	6813      	ldr	r3, [r2, #0]
 8007c24:	f023 030f 	bic.w	r3, r3, #15
 8007c28:	f043 0307 	orr.w	r3, r3, #7
 8007c2c:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8007c2e:	4b24      	ldr	r3, [pc, #144]	@ (8007cc0 <SystemInit+0xc0>)
 8007c30:	681a      	ldr	r2, [r3, #0]
 8007c32:	f042 0201 	orr.w	r2, r2, #1
 8007c36:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8007c38:	2200      	movs	r2, #0
 8007c3a:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, RC48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8007c3c:	4a21      	ldr	r2, [pc, #132]	@ (8007cc4 <SystemInit+0xc4>)
 8007c3e:	6819      	ldr	r1, [r3, #0]
 8007c40:	400a      	ands	r2, r1

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8007c42:	491e      	ldr	r1, [pc, #120]	@ (8007cbc <SystemInit+0xbc>)
  RCC->CR &= 0xEAF6ED7FU;
 8007c44:	601a      	str	r2, [r3, #0]
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8007c46:	680a      	ldr	r2, [r1, #0]
 8007c48:	0712      	lsls	r2, r2, #28
 8007c4a:	d505      	bpl.n	8007c58 <SystemInit+0x58>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8007c4c:	680a      	ldr	r2, [r1, #0]
 8007c4e:	f022 020f 	bic.w	r2, r2, #15
 8007c52:	f042 0207 	orr.w	r2, r2, #7
 8007c56:	600a      	str	r2, [r1, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8007c58:	2200      	movs	r2, #0

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8007c5a:	491b      	ldr	r1, [pc, #108]	@ (8007cc8 <SystemInit+0xc8>)
  RCC->D1CFGR = 0x00000000;
 8007c5c:	619a      	str	r2, [r3, #24]
  RCC->D2CFGR = 0x00000000;
 8007c5e:	61da      	str	r2, [r3, #28]
  RCC->D3CFGR = 0x00000000;
 8007c60:	621a      	str	r2, [r3, #32]
  RCC->PLLCKSELR = 0x02020200;
 8007c62:	6299      	str	r1, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8007c64:	4919      	ldr	r1, [pc, #100]	@ (8007ccc <SystemInit+0xcc>)
 8007c66:	62d9      	str	r1, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8007c68:	4919      	ldr	r1, [pc, #100]	@ (8007cd0 <SystemInit+0xd0>)
 8007c6a:	6319      	str	r1, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8007c6c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8007c6e:	6399      	str	r1, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8007c70:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8007c72:	6419      	str	r1, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8007c74:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8007c76:	6819      	ldr	r1, [r3, #0]
 8007c78:	f421 2180 	bic.w	r1, r1, #262144	@ 0x40000
 8007c7c:	6019      	str	r1, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8007c7e:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 8007c80:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007c84:	f8d2 30e4 	ldr.w	r3, [r2, #228]	@ 0xe4
 8007c88:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8007c8c:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4


  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8007c90:	4b10      	ldr	r3, [pc, #64]	@ (8007cd4 <SystemInit+0xd4>)
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	0c1b      	lsrs	r3, r3, #16
 8007c96:	041b      	lsls	r3, r3, #16
 8007c98:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007c9c:	d203      	bcs.n	8007ca6 <SystemInit+0xa6>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8007c9e:	4b0e      	ldr	r3, [pc, #56]	@ (8007cd8 <SystemInit+0xd8>)
 8007ca0:	2201      	movs	r2, #1
 8007ca2:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8007ca6:	4b0d      	ldr	r3, [pc, #52]	@ (8007cdc <SystemInit+0xdc>)
 8007ca8:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8007cac:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 8007cae:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8007cb2:	4b01      	ldr	r3, [pc, #4]	@ (8007cb8 <SystemInit+0xb8>)
 8007cb4:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 8007cb6:	4770      	bx	lr
 8007cb8:	e000ed00 	.word	0xe000ed00
 8007cbc:	52002000 	.word	0x52002000
 8007cc0:	58024400 	.word	0x58024400
 8007cc4:	eaf6ed7f 	.word	0xeaf6ed7f
 8007cc8:	02020200 	.word	0x02020200
 8007ccc:	01ff0000 	.word	0x01ff0000
 8007cd0:	01010280 	.word	0x01010280
 8007cd4:	5c001000 	.word	0x5c001000
 8007cd8:	51008000 	.word	0x51008000
 8007cdc:	52004000 	.word	0x52004000

08007ce0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8007ce0:	b510      	push	{r4, lr}
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8007ce2:	2003      	movs	r0, #3
 8007ce4:	f000 f854 	bl	8007d90 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8007ce8:	f003 fcde 	bl	800b6a8 <HAL_RCC_GetSysClockFreq>
 8007cec:	490f      	ldr	r1, [pc, #60]	@ (8007d2c <HAL_Init+0x4c>)
 8007cee:	4a10      	ldr	r2, [pc, #64]	@ (8007d30 <HAL_Init+0x50>)
 8007cf0:	698b      	ldr	r3, [r1, #24]
 8007cf2:	f3c3 2303 	ubfx	r3, r3, #8, #4
 8007cf6:	5cd3      	ldrb	r3, [r2, r3]
 8007cf8:	f003 031f 	and.w	r3, r3, #31
 8007cfc:	40d8      	lsrs	r0, r3
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007cfe:	698b      	ldr	r3, [r1, #24]
 8007d00:	f003 030f 	and.w	r3, r3, #15
 8007d04:	5cd3      	ldrb	r3, [r2, r3]
 8007d06:	4a0b      	ldr	r2, [pc, #44]	@ (8007d34 <HAL_Init+0x54>)
 8007d08:	f003 031f 	and.w	r3, r3, #31
 8007d0c:	fa20 f303 	lsr.w	r3, r0, r3
 8007d10:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8007d12:	4b09      	ldr	r3, [pc, #36]	@ (8007d38 <HAL_Init+0x58>)
 8007d14:	6018      	str	r0, [r3, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8007d16:	2000      	movs	r0, #0
 8007d18:	f7f9 fc26 	bl	8001568 <HAL_InitTick>
 8007d1c:	4604      	mov	r4, r0
 8007d1e:	b918      	cbnz	r0, 8007d28 <HAL_Init+0x48>
  {
    return HAL_ERROR;
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8007d20:	f7f9 f912 	bl	8000f48 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 8007d24:	4620      	mov	r0, r4
 8007d26:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8007d28:	2401      	movs	r4, #1
 8007d2a:	e7fb      	b.n	8007d24 <HAL_Init+0x44>
 8007d2c:	58024400 	.word	0x58024400
 8007d30:	0802c004 	.word	0x0802c004
 8007d34:	24000068 	.word	0x24000068
 8007d38:	2400006c 	.word	0x2400006c

08007d3c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8007d3c:	4a03      	ldr	r2, [pc, #12]	@ (8007d4c <HAL_IncTick+0x10>)
 8007d3e:	4b04      	ldr	r3, [pc, #16]	@ (8007d50 <HAL_IncTick+0x14>)
 8007d40:	6811      	ldr	r1, [r2, #0]
 8007d42:	781b      	ldrb	r3, [r3, #0]
 8007d44:	440b      	add	r3, r1
 8007d46:	6013      	str	r3, [r2, #0]
}
 8007d48:	4770      	bx	lr
 8007d4a:	bf00      	nop
 8007d4c:	2400fa1c 	.word	0x2400fa1c
 8007d50:	24000070 	.word	0x24000070

08007d54 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8007d54:	4b01      	ldr	r3, [pc, #4]	@ (8007d5c <HAL_GetTick+0x8>)
 8007d56:	6818      	ldr	r0, [r3, #0]
}
 8007d58:	4770      	bx	lr
 8007d5a:	bf00      	nop
 8007d5c:	2400fa1c 	.word	0x2400fa1c

08007d60 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8007d60:	b538      	push	{r3, r4, r5, lr}
 8007d62:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8007d64:	f7ff fff6 	bl	8007d54 <HAL_GetTick>
 8007d68:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8007d6a:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8007d6c:	bf1e      	ittt	ne
 8007d6e:	4b04      	ldrne	r3, [pc, #16]	@ (8007d80 <HAL_Delay+0x20>)
 8007d70:	781b      	ldrbne	r3, [r3, #0]
 8007d72:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8007d74:	f7ff ffee 	bl	8007d54 <HAL_GetTick>
 8007d78:	1b43      	subs	r3, r0, r5
 8007d7a:	42a3      	cmp	r3, r4
 8007d7c:	d3fa      	bcc.n	8007d74 <HAL_Delay+0x14>
  {
  }
}
 8007d7e:	bd38      	pop	{r3, r4, r5, pc}
 8007d80:	24000070 	.word	0x24000070

08007d84 <HAL_GetREVID>:
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
   return((DBGMCU->IDCODE) >> 16);
 8007d84:	4b01      	ldr	r3, [pc, #4]	@ (8007d8c <HAL_GetREVID+0x8>)
 8007d86:	6818      	ldr	r0, [r3, #0]
}
 8007d88:	0c00      	lsrs	r0, r0, #16
 8007d8a:	4770      	bx	lr
 8007d8c:	5c001000 	.word	0x5c001000

08007d90 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007d90:	4907      	ldr	r1, [pc, #28]	@ (8007db0 <HAL_NVIC_SetPriorityGrouping+0x20>)
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8007d92:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007d94:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8007d96:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8007d9a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8007d9e:	0412      	lsls	r2, r2, #16
 8007da0:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007da2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8007da4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8007da8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 8007dac:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8007dae:	4770      	bx	lr
 8007db0:	e000ed00 	.word	0xe000ed00

08007db4 <HAL_NVIC_SetPriority>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007db4:	4b16      	ldr	r3, [pc, #88]	@ (8007e10 <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007db6:	b530      	push	{r4, r5, lr}
 8007db8:	68dc      	ldr	r4, [r3, #12]
 8007dba:	f3c4 2402 	ubfx	r4, r4, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007dbe:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007dc2:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007dc4:	2b04      	cmp	r3, #4
 8007dc6:	bf28      	it	cs
 8007dc8:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007dca:	2d06      	cmp	r5, #6
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007dcc:	f04f 35ff 	mov.w	r5, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007dd0:	bf8c      	ite	hi
 8007dd2:	3c03      	subhi	r4, #3
 8007dd4:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007dd6:	fa05 f303 	lsl.w	r3, r5, r3
  if ((int32_t)(IRQn) >= 0)
 8007dda:	2800      	cmp	r0, #0
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007ddc:	fa05 f504 	lsl.w	r5, r5, r4
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007de0:	ea21 0303 	bic.w	r3, r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007de4:	ea22 0205 	bic.w	r2, r2, r5
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007de8:	fa03 f304 	lsl.w	r3, r3, r4
 8007dec:	ea43 0302 	orr.w	r3, r3, r2
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007df0:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8007df4:	b2db      	uxtb	r3, r3
  if ((int32_t)(IRQn) >= 0)
 8007df6:	db06      	blt.n	8007e06 <HAL_NVIC_SetPriority+0x52>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007df8:	f100 4060 	add.w	r0, r0, #3758096384	@ 0xe0000000
 8007dfc:	f500 4061 	add.w	r0, r0, #57600	@ 0xe100
 8007e00:	f880 3300 	strb.w	r3, [r0, #768]	@ 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8007e04:	bd30      	pop	{r4, r5, pc}
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007e06:	f000 000f 	and.w	r0, r0, #15
 8007e0a:	4a02      	ldr	r2, [pc, #8]	@ (8007e14 <HAL_NVIC_SetPriority+0x60>)
 8007e0c:	5413      	strb	r3, [r2, r0]
 8007e0e:	e7f9      	b.n	8007e04 <HAL_NVIC_SetPriority+0x50>
 8007e10:	e000ed00 	.word	0xe000ed00
 8007e14:	e000ed14 	.word	0xe000ed14

08007e18 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8007e18:	2800      	cmp	r0, #0
 8007e1a:	db07      	blt.n	8007e2c <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007e1c:	2301      	movs	r3, #1
 8007e1e:	0941      	lsrs	r1, r0, #5
 8007e20:	f000 001f 	and.w	r0, r0, #31
 8007e24:	4a02      	ldr	r2, [pc, #8]	@ (8007e30 <HAL_NVIC_EnableIRQ+0x18>)
 8007e26:	4083      	lsls	r3, r0
 8007e28:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8007e2c:	4770      	bx	lr
 8007e2e:	bf00      	nop
 8007e30:	e000e100 	.word	0xe000e100

08007e34 <HAL_NVIC_DisableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8007e34:	2800      	cmp	r0, #0
 8007e36:	db0c      	blt.n	8007e52 <HAL_NVIC_DisableIRQ+0x1e>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007e38:	0943      	lsrs	r3, r0, #5
 8007e3a:	2201      	movs	r2, #1
 8007e3c:	f000 001f 	and.w	r0, r0, #31
 8007e40:	4904      	ldr	r1, [pc, #16]	@ (8007e54 <HAL_NVIC_DisableIRQ+0x20>)
 8007e42:	3320      	adds	r3, #32
 8007e44:	4082      	lsls	r2, r0
 8007e46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8007e4a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8007e4e:	f3bf 8f6f 	isb	sy
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 8007e52:	4770      	bx	lr
 8007e54:	e000e100 	.word	0xe000e100

08007e58 <HAL_MPU_Disable>:
  __ASM volatile ("dmb 0xF":::"memory");
 8007e58:	f3bf 8f5f 	dmb	sy
{
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8007e5c:	4b04      	ldr	r3, [pc, #16]	@ (8007e70 <HAL_MPU_Disable+0x18>)
 8007e5e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007e60:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8007e64:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8007e66:	2200      	movs	r2, #0
 8007e68:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
}
 8007e6c:	4770      	bx	lr
 8007e6e:	bf00      	nop
 8007e70:	e000ed00 	.word	0xe000ed00

08007e74 <HAL_MPU_Enable>:
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8007e74:	4b06      	ldr	r3, [pc, #24]	@ (8007e90 <HAL_MPU_Enable+0x1c>)
 8007e76:	f040 0001 	orr.w	r0, r0, #1
 8007e7a:	f8c3 0094 	str.w	r0, [r3, #148]	@ 0x94

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8007e7e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007e80:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8007e84:	625a      	str	r2, [r3, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8007e86:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8007e8a:	f3bf 8f6f 	isb	sy

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8007e8e:	4770      	bx	lr
 8007e90:	e000ed00 	.word	0xe000ed00

08007e94 <HAL_MPU_ConfigRegion>:
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8007e94:	7843      	ldrb	r3, [r0, #1]
 8007e96:	4a14      	ldr	r2, [pc, #80]	@ (8007ee8 <HAL_MPU_ConfigRegion+0x54>)
 8007e98:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8007e9c:	f8d2 30a0 	ldr.w	r3, [r2, #160]	@ 0xa0
 8007ea0:	f023 0301 	bic.w	r3, r3, #1
 8007ea4:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8007ea8:	6843      	ldr	r3, [r0, #4]
 8007eaa:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8007eae:	7ac3      	ldrb	r3, [r0, #11]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8007eb0:	7b01      	ldrb	r1, [r0, #12]
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8007eb2:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8007eb4:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8007eb8:	7801      	ldrb	r1, [r0, #0]
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8007eba:	430b      	orrs	r3, r1
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8007ebc:	7a81      	ldrb	r1, [r0, #10]
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8007ebe:	ea43 43c1 	orr.w	r3, r3, r1, lsl #19
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8007ec2:	7b41      	ldrb	r1, [r0, #13]
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8007ec4:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8007ec8:	7b81      	ldrb	r1, [r0, #14]
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8007eca:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8007ece:	7bc1      	ldrb	r1, [r0, #15]
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8007ed0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8007ed4:	7a41      	ldrb	r1, [r0, #9]
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8007ed6:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8007eda:	7a01      	ldrb	r1, [r0, #8]
 8007edc:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8007ee0:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0
}
 8007ee4:	4770      	bx	lr
 8007ee6:	bf00      	nop
 8007ee8:	e000ed00 	.word	0xe000ed00

08007eec <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8007eec:	b510      	push	{r4, lr}
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8007eee:	4604      	mov	r4, r0
 8007ef0:	b908      	cbnz	r0, 8007ef6 <HAL_CRC_Init+0xa>
  {
    return HAL_ERROR;
 8007ef2:	2001      	movs	r0, #1
  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;

  /* Return function status */
  return HAL_OK;
}
 8007ef4:	bd10      	pop	{r4, pc}
  if (hcrc->State == HAL_CRC_STATE_RESET)
 8007ef6:	7f43      	ldrb	r3, [r0, #29]
 8007ef8:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8007efc:	b913      	cbnz	r3, 8007f04 <HAL_CRC_Init+0x18>
    hcrc->Lock = HAL_UNLOCKED;
 8007efe:	7702      	strb	r2, [r0, #28]
    HAL_CRC_MspInit(hcrc);
 8007f00:	f7f9 f83a 	bl	8000f78 <HAL_CRC_MspInit>
  hcrc->State = HAL_CRC_STATE_BUSY;
 8007f04:	2302      	movs	r3, #2
 8007f06:	7763      	strb	r3, [r4, #29]
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8007f08:	7923      	ldrb	r3, [r4, #4]
 8007f0a:	b9e3      	cbnz	r3, 8007f46 <HAL_CRC_Init+0x5a>
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8007f0c:	6823      	ldr	r3, [r4, #0]
 8007f0e:	4a13      	ldr	r2, [pc, #76]	@ (8007f5c <HAL_CRC_Init+0x70>)
 8007f10:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8007f12:	689a      	ldr	r2, [r3, #8]
 8007f14:	f022 0218 	bic.w	r2, r2, #24
 8007f18:	609a      	str	r2, [r3, #8]
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8007f1a:	7962      	ldrb	r2, [r4, #5]
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8007f1c:	6823      	ldr	r3, [r4, #0]
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8007f1e:	b9d2      	cbnz	r2, 8007f56 <HAL_CRC_Init+0x6a>
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8007f20:	f04f 32ff 	mov.w	r2, #4294967295
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8007f24:	611a      	str	r2, [r3, #16]
  return HAL_OK;
 8007f26:	2000      	movs	r0, #0
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8007f28:	689a      	ldr	r2, [r3, #8]
 8007f2a:	6961      	ldr	r1, [r4, #20]
 8007f2c:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8007f30:	430a      	orrs	r2, r1
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8007f32:	69a1      	ldr	r1, [r4, #24]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8007f34:	609a      	str	r2, [r3, #8]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8007f36:	689a      	ldr	r2, [r3, #8]
 8007f38:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8007f3c:	430a      	orrs	r2, r1
 8007f3e:	609a      	str	r2, [r3, #8]
  hcrc->State = HAL_CRC_STATE_READY;
 8007f40:	2301      	movs	r3, #1
 8007f42:	7763      	strb	r3, [r4, #29]
  return HAL_OK;
 8007f44:	e7d6      	b.n	8007ef4 <HAL_CRC_Init+0x8>
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8007f46:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
 8007f4a:	4620      	mov	r0, r4
 8007f4c:	f000 f808 	bl	8007f60 <HAL_CRCEx_Polynomial_Set>
 8007f50:	2800      	cmp	r0, #0
 8007f52:	d0e2      	beq.n	8007f1a <HAL_CRC_Init+0x2e>
 8007f54:	e7cd      	b.n	8007ef2 <HAL_CRC_Init+0x6>
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8007f56:	6922      	ldr	r2, [r4, #16]
 8007f58:	e7e4      	b.n	8007f24 <HAL_CRC_Init+0x38>
 8007f5a:	bf00      	nop
 8007f5c:	04c11db7 	.word	0x04c11db7

08007f60 <HAL_CRCEx_Polynomial_Set>:

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 8007f60:	07cb      	lsls	r3, r1, #31
{
 8007f62:	b510      	push	{r4, lr}
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 8007f64:	d50d      	bpl.n	8007f82 <HAL_CRCEx_Polynomial_Set+0x22>
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8007f66:	231f      	movs	r3, #31
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8007f68:	3b01      	subs	r3, #1
 8007f6a:	d31d      	bcc.n	8007fa8 <HAL_CRCEx_Polynomial_Set+0x48>
 8007f6c:	fa21 f403 	lsr.w	r4, r1, r3
 8007f70:	07e4      	lsls	r4, r4, #31
 8007f72:	d5f9      	bpl.n	8007f68 <HAL_CRCEx_Polynomial_Set+0x8>
    {
    }

    switch (PolyLength)
 8007f74:	2a10      	cmp	r2, #16
 8007f76:	d013      	beq.n	8007fa0 <HAL_CRCEx_Polynomial_Set+0x40>
 8007f78:	2a10      	cmp	r2, #16
 8007f7a:	d804      	bhi.n	8007f86 <HAL_CRCEx_Polynomial_Set+0x26>
 8007f7c:	b13a      	cbz	r2, 8007f8e <HAL_CRCEx_Polynomial_Set+0x2e>
 8007f7e:	2a08      	cmp	r2, #8
 8007f80:	d010      	beq.n	8007fa4 <HAL_CRCEx_Polynomial_Set+0x44>
 8007f82:	2001      	movs	r0, #1

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
  }
  /* Return function status */
  return status;
 8007f84:	e00b      	b.n	8007f9e <HAL_CRCEx_Polynomial_Set+0x3e>
    switch (PolyLength)
 8007f86:	2a18      	cmp	r2, #24
 8007f88:	d1fb      	bne.n	8007f82 <HAL_CRCEx_Polynomial_Set+0x22>
        if (msb >= HAL_CRC_LENGTH_7B)
 8007f8a:	2b06      	cmp	r3, #6
        if (msb >= HAL_CRC_LENGTH_16B)
 8007f8c:	d8f9      	bhi.n	8007f82 <HAL_CRCEx_Polynomial_Set+0x22>
    WRITE_REG(hcrc->Instance->POL, Pol);
 8007f8e:	6800      	ldr	r0, [r0, #0]
 8007f90:	6141      	str	r1, [r0, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8007f92:	6883      	ldr	r3, [r0, #8]
 8007f94:	f023 0318 	bic.w	r3, r3, #24
 8007f98:	4313      	orrs	r3, r2
 8007f9a:	6083      	str	r3, [r0, #8]
 8007f9c:	2000      	movs	r0, #0
}
 8007f9e:	bd10      	pop	{r4, pc}
        if (msb >= HAL_CRC_LENGTH_8B)
 8007fa0:	2b07      	cmp	r3, #7
 8007fa2:	e7f3      	b.n	8007f8c <HAL_CRCEx_Polynomial_Set+0x2c>
        if (msb >= HAL_CRC_LENGTH_16B)
 8007fa4:	2b0f      	cmp	r3, #15
 8007fa6:	e7f1      	b.n	8007f8c <HAL_CRCEx_Polynomial_Set+0x2c>
    switch (PolyLength)
 8007fa8:	2a10      	cmp	r2, #16
 8007faa:	d1e5      	bne.n	8007f78 <HAL_CRCEx_Polynomial_Set+0x18>
 8007fac:	e7e9      	b.n	8007f82 <HAL_CRCEx_Polynomial_Set+0x22>

08007fae <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8007fae:	b510      	push	{r4, lr}
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8007fb0:	4604      	mov	r4, r0
 8007fb2:	2800      	cmp	r0, #0
 8007fb4:	d036      	beq.n	8008024 <HAL_DMA2D_Init+0x76>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8007fb6:	f890 3061 	ldrb.w	r3, [r0, #97]	@ 0x61
 8007fba:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8007fbe:	b91b      	cbnz	r3, 8007fc8 <HAL_DMA2D_Init+0x1a>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8007fc0:	f880 2060 	strb.w	r2, [r0, #96]	@ 0x60
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8007fc4:	f7f8 fff0 	bl	8000fa8 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8007fc8:	2302      	movs	r3, #2

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 8007fca:	69e0      	ldr	r0, [r4, #28]
 8007fcc:	6862      	ldr	r2, [r4, #4]
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8007fce:	f884 3061 	strb.w	r3, [r4, #97]	@ 0x61
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 8007fd2:	6823      	ldr	r3, [r4, #0]
 8007fd4:	4302      	orrs	r2, r0

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 8007fd6:	69a0      	ldr	r0, [r4, #24]
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 8007fd8:	6819      	ldr	r1, [r3, #0]
 8007fda:	f421 21e0 	bic.w	r1, r1, #458752	@ 0x70000
 8007fde:	f021 0140 	bic.w	r1, r1, #64	@ 0x40
 8007fe2:	430a      	orrs	r2, r1
 8007fe4:	601a      	str	r2, [r3, #0]
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 8007fe6:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8007fe8:	68a2      	ldr	r2, [r4, #8]
 8007fea:	f421 7183 	bic.w	r1, r1, #262	@ 0x106
 8007fee:	4302      	orrs	r2, r0
 8007ff0:	f021 0101 	bic.w	r1, r1, #1
 8007ff4:	430a      	orrs	r2, r1
             hdma2d->Init.ColorMode | hdma2d->Init.BytesSwap);

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8007ff6:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 8007ff8:	635a      	str	r2, [r3, #52]	@ 0x34
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8007ffa:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007ffc:	0c12      	lsrs	r2, r2, #16
 8007ffe:	0412      	lsls	r2, r2, #16
 8008000:	430a      	orrs	r2, r1
 8008002:	641a      	str	r2, [r3, #64]	@ 0x40
  /* DMA2D OPFCCR AI and RBS fields setting (Output Alpha Inversion)*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 8008004:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8008006:	e9d4 0204 	ldrd	r0, r2, [r4, #16]
 800800a:	f421 1140 	bic.w	r1, r1, #3145728	@ 0x300000
 800800e:	0552      	lsls	r2, r2, #21
 8008010:	ea42 5200 	orr.w	r2, r2, r0, lsl #20
             ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | \
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8008014:	2000      	movs	r0, #0
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 8008016:	430a      	orrs	r2, r1
 8008018:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 800801a:	2301      	movs	r3, #1
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 800801c:	6660      	str	r0, [r4, #100]	@ 0x64
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 800801e:	f884 3061 	strb.w	r3, [r4, #97]	@ 0x61

  return HAL_OK;
}
 8008022:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8008024:	2001      	movs	r0, #1
 8008026:	e7fc      	b.n	8008022 <HAL_DMA2D_Init+0x74>

08008028 <HAL_DMA2D_LineEventCallback>:
  * @brief  Transfer watermark callback.
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
 8008028:	4770      	bx	lr

0800802a <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @brief  CLUT Transfer Complete callback.
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
 800802a:	4770      	bx	lr

0800802c <HAL_DMA2D_IRQHandler>:
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 800802c:	6803      	ldr	r3, [r0, #0]
{
 800802e:	b570      	push	{r4, r5, r6, lr}
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8008030:	685e      	ldr	r6, [r3, #4]
{
 8008032:	4604      	mov	r4, r0
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8008034:	681d      	ldr	r5, [r3, #0]
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8008036:	07f2      	lsls	r2, r6, #31
 8008038:	d514      	bpl.n	8008064 <HAL_DMA2D_IRQHandler+0x38>
    if ((crflags & DMA2D_IT_TE) != 0U)
 800803a:	05e9      	lsls	r1, r5, #23
 800803c:	d512      	bpl.n	8008064 <HAL_DMA2D_IRQHandler+0x38>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 800803e:	681a      	ldr	r2, [r3, #0]
 8008040:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8008044:	601a      	str	r2, [r3, #0]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8008046:	6e42      	ldr	r2, [r0, #100]	@ 0x64
 8008048:	f042 0201 	orr.w	r2, r2, #1
 800804c:	6642      	str	r2, [r0, #100]	@ 0x64
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 800804e:	2201      	movs	r2, #1
 8008050:	609a      	str	r2, [r3, #8]
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8008052:	2304      	movs	r3, #4
 8008054:	f880 3061 	strb.w	r3, [r0, #97]	@ 0x61
      __HAL_UNLOCK(hdma2d);
 8008058:	2300      	movs	r3, #0
 800805a:	f880 3060 	strb.w	r3, [r0, #96]	@ 0x60
      if (hdma2d->XferErrorCallback != NULL)
 800805e:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8008060:	b103      	cbz	r3, 8008064 <HAL_DMA2D_IRQHandler+0x38>
        hdma2d->XferErrorCallback(hdma2d);
 8008062:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8008064:	06b2      	lsls	r2, r6, #26
 8008066:	d516      	bpl.n	8008096 <HAL_DMA2D_IRQHandler+0x6a>
    if ((crflags & DMA2D_IT_CE) != 0U)
 8008068:	04ab      	lsls	r3, r5, #18
 800806a:	d514      	bpl.n	8008096 <HAL_DMA2D_IRQHandler+0x6a>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 800806c:	6823      	ldr	r3, [r4, #0]
 800806e:	681a      	ldr	r2, [r3, #0]
 8008070:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8008074:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8008076:	2220      	movs	r2, #32
 8008078:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800807a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800807c:	f043 0302 	orr.w	r3, r3, #2
 8008080:	6663      	str	r3, [r4, #100]	@ 0x64
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8008082:	2304      	movs	r3, #4
 8008084:	f884 3061 	strb.w	r3, [r4, #97]	@ 0x61
      __HAL_UNLOCK(hdma2d);
 8008088:	2300      	movs	r3, #0
 800808a:	f884 3060 	strb.w	r3, [r4, #96]	@ 0x60
      if (hdma2d->XferErrorCallback != NULL)
 800808e:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8008090:	b10b      	cbz	r3, 8008096 <HAL_DMA2D_IRQHandler+0x6a>
        hdma2d->XferErrorCallback(hdma2d);
 8008092:	4620      	mov	r0, r4
 8008094:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8008096:	0730      	lsls	r0, r6, #28
 8008098:	d516      	bpl.n	80080c8 <HAL_DMA2D_IRQHandler+0x9c>
    if ((crflags & DMA2D_IT_CAE) != 0U)
 800809a:	0529      	lsls	r1, r5, #20
 800809c:	d514      	bpl.n	80080c8 <HAL_DMA2D_IRQHandler+0x9c>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 800809e:	6823      	ldr	r3, [r4, #0]
 80080a0:	681a      	ldr	r2, [r3, #0]
 80080a2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80080a6:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 80080a8:	2208      	movs	r2, #8
 80080aa:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 80080ac:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80080ae:	f043 0304 	orr.w	r3, r3, #4
 80080b2:	6663      	str	r3, [r4, #100]	@ 0x64
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80080b4:	2304      	movs	r3, #4
 80080b6:	f884 3061 	strb.w	r3, [r4, #97]	@ 0x61
      __HAL_UNLOCK(hdma2d);
 80080ba:	2300      	movs	r3, #0
 80080bc:	f884 3060 	strb.w	r3, [r4, #96]	@ 0x60
      if (hdma2d->XferErrorCallback != NULL)
 80080c0:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80080c2:	b10b      	cbz	r3, 80080c8 <HAL_DMA2D_IRQHandler+0x9c>
        hdma2d->XferErrorCallback(hdma2d);
 80080c4:	4620      	mov	r0, r4
 80080c6:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 80080c8:	0772      	lsls	r2, r6, #29
 80080ca:	d50b      	bpl.n	80080e4 <HAL_DMA2D_IRQHandler+0xb8>
    if ((crflags & DMA2D_IT_TW) != 0U)
 80080cc:	056b      	lsls	r3, r5, #21
 80080ce:	d509      	bpl.n	80080e4 <HAL_DMA2D_IRQHandler+0xb8>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 80080d0:	6823      	ldr	r3, [r4, #0]
      HAL_DMA2D_LineEventCallback(hdma2d);
 80080d2:	4620      	mov	r0, r4
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 80080d4:	681a      	ldr	r2, [r3, #0]
 80080d6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80080da:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 80080dc:	2204      	movs	r2, #4
 80080de:	609a      	str	r2, [r3, #8]
      HAL_DMA2D_LineEventCallback(hdma2d);
 80080e0:	f7ff ffa2 	bl	8008028 <HAL_DMA2D_LineEventCallback>
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 80080e4:	07b0      	lsls	r0, r6, #30
 80080e6:	d514      	bpl.n	8008112 <HAL_DMA2D_IRQHandler+0xe6>
    if ((crflags & DMA2D_IT_TC) != 0U)
 80080e8:	05a9      	lsls	r1, r5, #22
 80080ea:	d512      	bpl.n	8008112 <HAL_DMA2D_IRQHandler+0xe6>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 80080ec:	6823      	ldr	r3, [r4, #0]
 80080ee:	681a      	ldr	r2, [r3, #0]
 80080f0:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80080f4:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 80080f6:	2202      	movs	r2, #2
 80080f8:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 80080fa:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80080fc:	6663      	str	r3, [r4, #100]	@ 0x64
      hdma2d->State = HAL_DMA2D_STATE_READY;
 80080fe:	2301      	movs	r3, #1
 8008100:	f884 3061 	strb.w	r3, [r4, #97]	@ 0x61
      __HAL_UNLOCK(hdma2d);
 8008104:	2300      	movs	r3, #0
 8008106:	f884 3060 	strb.w	r3, [r4, #96]	@ 0x60
      if (hdma2d->XferCpltCallback != NULL)
 800810a:	6a23      	ldr	r3, [r4, #32]
 800810c:	b10b      	cbz	r3, 8008112 <HAL_DMA2D_IRQHandler+0xe6>
        hdma2d->XferCpltCallback(hdma2d);
 800810e:	4620      	mov	r0, r4
 8008110:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8008112:	06f2      	lsls	r2, r6, #27
 8008114:	d513      	bpl.n	800813e <HAL_DMA2D_IRQHandler+0x112>
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8008116:	04eb      	lsls	r3, r5, #19
 8008118:	d511      	bpl.n	800813e <HAL_DMA2D_IRQHandler+0x112>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 800811a:	6823      	ldr	r3, [r4, #0]
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 800811c:	4620      	mov	r0, r4
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 800811e:	681a      	ldr	r2, [r3, #0]
 8008120:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8008124:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8008126:	2210      	movs	r2, #16
 8008128:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 800812a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800812c:	6663      	str	r3, [r4, #100]	@ 0x64
      hdma2d->State = HAL_DMA2D_STATE_READY;
 800812e:	2301      	movs	r3, #1
 8008130:	f884 3061 	strb.w	r3, [r4, #97]	@ 0x61
      __HAL_UNLOCK(hdma2d);
 8008134:	2300      	movs	r3, #0
 8008136:	f884 3060 	strb.w	r3, [r4, #96]	@ 0x60
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 800813a:	f7ff ff76 	bl	800802a <HAL_DMA2D_CLUTLoadingCpltCallback>
}
 800813e:	bd70      	pop	{r4, r5, r6, pc}

08008140 <DSI_ShortWrite.constprop.0>:
  *                 This parameter can be any value of @arg DSI_DCS_Command or a
  *                 generic command code.
  * @param  Param2  DSC parameter or second generic parameter.
  * @retval HAL status
  */
static HAL_StatusTypeDef DSI_ShortWrite(DSI_HandleTypeDef *hdsi,
 8008140:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008144:	4607      	mov	r7, r0
 8008146:	460d      	mov	r5, r1
 8008148:	4614      	mov	r4, r2
 800814a:	461e      	mov	r6, r3
                                        uint32_t Param2)
{
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 800814c:	f7ff fe02 	bl	8007d54 <HAL_GetTick>
 8008150:	4680      	mov	r8, r0

  /* Wait for Command FIFO Empty */
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 8008152:	683b      	ldr	r3, [r7, #0]
 8008154:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
 8008156:	07d2      	lsls	r2, r2, #31
 8008158:	d50a      	bpl.n	8008170 <DSI_ShortWrite.constprop.0+0x30>
    }
  }

  /* Configure the packet to send a short DCS command with 0 or 1 parameter */
  /* Update the DSI packet header with new information */
  hdsi->Instance->GHCR = (Mode | (ChannelID << 6U) | (Param1 << 8U) | (Param2 << 16U));
 800815a:	ea44 2406 	orr.w	r4, r4, r6, lsl #8
 800815e:	9a06      	ldr	r2, [sp, #24]

  return HAL_OK;
 8008160:	2000      	movs	r0, #0
  hdsi->Instance->GHCR = (Mode | (ChannelID << 6U) | (Param1 << 8U) | (Param2 << 16U));
 8008162:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8008166:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
 800816a:	66dc      	str	r4, [r3, #108]	@ 0x6c
}
 800816c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8008170:	f7ff fdf0 	bl	8007d54 <HAL_GetTick>
 8008174:	eba0 0008 	sub.w	r0, r0, r8
 8008178:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 800817c:	d9e9      	bls.n	8008152 <DSI_ShortWrite.constprop.0+0x12>
      return HAL_TIMEOUT;
 800817e:	2003      	movs	r0, #3
 8008180:	e7f4      	b.n	800816c <DSI_ShortWrite.constprop.0+0x2c>

08008182 <HAL_DSI_ConfigErrorMonitor>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigErrorMonitor(DSI_HandleTypeDef *hdsi, uint32_t ActiveErrors)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 8008182:	7c03      	ldrb	r3, [r0, #16]
{
 8008184:	4602      	mov	r2, r0
  __HAL_LOCK(hdsi);
 8008186:	2b01      	cmp	r3, #1
 8008188:	d05b      	beq.n	8008242 <HAL_DSI_ConfigErrorMonitor+0xc0>

  hdsi->Instance->IER[0U] = 0U;
 800818a:	6803      	ldr	r3, [r0, #0]
 800818c:	2000      	movs	r0, #0
 800818e:	f8c3 00c4 	str.w	r0, [r3, #196]	@ 0xc4
  hdsi->Instance->IER[1U] = 0U;
 8008192:	f8c3 00c8 	str.w	r0, [r3, #200]	@ 0xc8

  /* Store active errors to the handle */
  hdsi->ErrorMsk = ActiveErrors;

  if ((ActiveErrors & HAL_DSI_ERROR_ACK) != 0U)
 8008196:	07c8      	lsls	r0, r1, #31
  hdsi->ErrorMsk = ActiveErrors;
 8008198:	6191      	str	r1, [r2, #24]
  if ((ActiveErrors & HAL_DSI_ERROR_ACK) != 0U)
 800819a:	d507      	bpl.n	80081ac <HAL_DSI_ConfigErrorMonitor+0x2a>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[0U] |= DSI_ERROR_ACK_MASK;
 800819c:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 80081a0:	ea6f 4010 	mvn.w	r0, r0, lsr #16
 80081a4:	ea6f 4000 	mvn.w	r0, r0, lsl #16
 80081a8:	f8c3 00c4 	str.w	r0, [r3, #196]	@ 0xc4
  }

  if ((ActiveErrors & HAL_DSI_ERROR_PHY) != 0U)
 80081ac:	0788      	lsls	r0, r1, #30
 80081ae:	d505      	bpl.n	80081bc <HAL_DSI_ConfigErrorMonitor+0x3a>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[0U] |= DSI_ERROR_PHY_MASK;
 80081b0:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 80081b4:	f440 10f8 	orr.w	r0, r0, #2031616	@ 0x1f0000
 80081b8:	f8c3 00c4 	str.w	r0, [r3, #196]	@ 0xc4
  }

  if ((ActiveErrors & HAL_DSI_ERROR_TX) != 0U)
 80081bc:	0748      	lsls	r0, r1, #29
 80081be:	d505      	bpl.n	80081cc <HAL_DSI_ConfigErrorMonitor+0x4a>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_TX_MASK;
 80081c0:	f8d3 00c8 	ldr.w	r0, [r3, #200]	@ 0xc8
 80081c4:	f040 0001 	orr.w	r0, r0, #1
 80081c8:	f8c3 00c8 	str.w	r0, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_RX) != 0U)
 80081cc:	0708      	lsls	r0, r1, #28
 80081ce:	d505      	bpl.n	80081dc <HAL_DSI_ConfigErrorMonitor+0x5a>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_RX_MASK;
 80081d0:	f8d3 00c8 	ldr.w	r0, [r3, #200]	@ 0xc8
 80081d4:	f040 0002 	orr.w	r0, r0, #2
 80081d8:	f8c3 00c8 	str.w	r0, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_ECC) != 0U)
 80081dc:	06c8      	lsls	r0, r1, #27
 80081de:	d505      	bpl.n	80081ec <HAL_DSI_ConfigErrorMonitor+0x6a>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_ECC_MASK;
 80081e0:	f8d3 00c8 	ldr.w	r0, [r3, #200]	@ 0xc8
 80081e4:	f040 000c 	orr.w	r0, r0, #12
 80081e8:	f8c3 00c8 	str.w	r0, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_CRC) != 0U)
 80081ec:	0688      	lsls	r0, r1, #26
 80081ee:	d505      	bpl.n	80081fc <HAL_DSI_ConfigErrorMonitor+0x7a>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_CRC_MASK;
 80081f0:	f8d3 00c8 	ldr.w	r0, [r3, #200]	@ 0xc8
 80081f4:	f040 0010 	orr.w	r0, r0, #16
 80081f8:	f8c3 00c8 	str.w	r0, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_PSE) != 0U)
 80081fc:	0648      	lsls	r0, r1, #25
 80081fe:	d505      	bpl.n	800820c <HAL_DSI_ConfigErrorMonitor+0x8a>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_PSE_MASK;
 8008200:	f8d3 00c8 	ldr.w	r0, [r3, #200]	@ 0xc8
 8008204:	f040 0020 	orr.w	r0, r0, #32
 8008208:	f8c3 00c8 	str.w	r0, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_EOT) != 0U)
 800820c:	0608      	lsls	r0, r1, #24
 800820e:	d505      	bpl.n	800821c <HAL_DSI_ConfigErrorMonitor+0x9a>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_EOT_MASK;
 8008210:	f8d3 00c8 	ldr.w	r0, [r3, #200]	@ 0xc8
 8008214:	f040 0040 	orr.w	r0, r0, #64	@ 0x40
 8008218:	f8c3 00c8 	str.w	r0, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_OVF) != 0U)
 800821c:	05c8      	lsls	r0, r1, #23
 800821e:	d505      	bpl.n	800822c <HAL_DSI_ConfigErrorMonitor+0xaa>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_OVF_MASK;
 8008220:	f8d3 00c8 	ldr.w	r0, [r3, #200]	@ 0xc8
 8008224:	f040 0080 	orr.w	r0, r0, #128	@ 0x80
 8008228:	f8c3 00c8 	str.w	r0, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_GEN) != 0U)
 800822c:	0589      	lsls	r1, r1, #22
 800822e:	d505      	bpl.n	800823c <HAL_DSI_ConfigErrorMonitor+0xba>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_GEN_MASK;
 8008230:	f8d3 10c8 	ldr.w	r1, [r3, #200]	@ 0xc8
 8008234:	f441 51f8 	orr.w	r1, r1, #7936	@ 0x1f00
 8008238:	f8c3 10c8 	str.w	r1, [r3, #200]	@ 0xc8
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdsi);
 800823c:	2000      	movs	r0, #0
 800823e:	7410      	strb	r0, [r2, #16]

  return HAL_OK;
 8008240:	4770      	bx	lr
  __HAL_LOCK(hdsi);
 8008242:	2002      	movs	r0, #2
}
 8008244:	4770      	bx	lr
	...

08008248 <HAL_DSI_Init>:
{
 8008248:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800824a:	460d      	mov	r5, r1
  if (hdsi == NULL)
 800824c:	4604      	mov	r4, r0
 800824e:	2800      	cmp	r0, #0
 8008250:	f000 80ea 	beq.w	8008428 <HAL_DSI_Init+0x1e0>
  if (hdsi->State == HAL_DSI_STATE_RESET)
 8008254:	7c43      	ldrb	r3, [r0, #17]
 8008256:	b90b      	cbnz	r3, 800825c <HAL_DSI_Init+0x14>
    HAL_DSI_MspInit(hdsi);
 8008258:	f7f8 feca 	bl	8000ff0 <HAL_DSI_MspInit>
  hdsi->State = HAL_DSI_STATE_BUSY;
 800825c:	2303      	movs	r3, #3
 800825e:	7463      	strb	r3, [r4, #17]
  __HAL_DSI_REG_ENABLE(hdsi);
 8008260:	2300      	movs	r3, #0
 8008262:	9300      	str	r3, [sp, #0]
 8008264:	6823      	ldr	r3, [r4, #0]
 8008266:	f8d3 2430 	ldr.w	r2, [r3, #1072]	@ 0x430
 800826a:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 800826e:	f8c3 2430 	str.w	r2, [r3, #1072]	@ 0x430
 8008272:	f8d3 3430 	ldr.w	r3, [r3, #1072]	@ 0x430
 8008276:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800827a:	9300      	str	r3, [sp, #0]
 800827c:	9b00      	ldr	r3, [sp, #0]
  tickstart = HAL_GetTick();
 800827e:	f7ff fd69 	bl	8007d54 <HAL_GetTick>
 8008282:	4606      	mov	r6, r0
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_RRS) == 0U)
 8008284:	6822      	ldr	r2, [r4, #0]
 8008286:	f8d2 340c 	ldr.w	r3, [r2, #1036]	@ 0x40c
 800828a:	04d9      	lsls	r1, r3, #19
 800828c:	d56e      	bpl.n	800836c <HAL_DSI_Init+0x124>
  hdsi->Instance->WRPCR &= ~(DSI_WRPCR_PLL_NDIV | DSI_WRPCR_PLL_IDF | DSI_WRPCR_PLL_ODF);
 800828e:	f8d2 3430 	ldr.w	r3, [r2, #1072]	@ 0x430
 8008292:	f423 335e 	bic.w	r3, r3, #227328	@ 0x37800
 8008296:	f423 73fe 	bic.w	r3, r3, #508	@ 0x1fc
 800829a:	f8c2 3430 	str.w	r3, [r2, #1072]	@ 0x430
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 800829e:	f8d2 1430 	ldr.w	r1, [r2, #1072]	@ 0x430
                            ((PLLInit->PLLIDF) << DSI_WRPCR_PLL_IDF_Pos) | \
 80082a2:	e9d5 0300 	ldrd	r0, r3, [r5]
 80082a6:	02db      	lsls	r3, r3, #11
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 80082a8:	ea43 0380 	orr.w	r3, r3, r0, lsl #2
                            ((PLLInit->PLLODF) << DSI_WRPCR_PLL_ODF_Pos));
 80082ac:	68a8      	ldr	r0, [r5, #8]
                            ((PLLInit->PLLIDF) << DSI_WRPCR_PLL_IDF_Pos) | \
 80082ae:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
  HAL_Delay(1);
 80082b2:	2001      	movs	r0, #1
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 80082b4:	430b      	orrs	r3, r1
 80082b6:	f8c2 3430 	str.w	r3, [r2, #1072]	@ 0x430
  __HAL_DSI_PLL_ENABLE(hdsi);
 80082ba:	2300      	movs	r3, #0
 80082bc:	9301      	str	r3, [sp, #4]
 80082be:	f8d2 3430 	ldr.w	r3, [r2, #1072]	@ 0x430
 80082c2:	f043 0301 	orr.w	r3, r3, #1
 80082c6:	f8c2 3430 	str.w	r3, [r2, #1072]	@ 0x430
 80082ca:	f8d2 3430 	ldr.w	r3, [r2, #1072]	@ 0x430
 80082ce:	f003 0301 	and.w	r3, r3, #1
 80082d2:	9301      	str	r3, [sp, #4]
 80082d4:	9b01      	ldr	r3, [sp, #4]
  HAL_Delay(1);
 80082d6:	f7ff fd43 	bl	8007d60 <HAL_Delay>
  tickstart = HAL_GetTick();
 80082da:	f7ff fd3b 	bl	8007d54 <HAL_GetTick>
 80082de:	4606      	mov	r6, r0
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 80082e0:	6823      	ldr	r3, [r4, #0]
 80082e2:	f8d3 240c 	ldr.w	r2, [r3, #1036]	@ 0x40c
 80082e6:	05d2      	lsls	r2, r2, #23
 80082e8:	d548      	bpl.n	800837c <HAL_DSI_Init+0x134>
  __HAL_DSI_ENABLE(hdsi);
 80082ea:	2200      	movs	r2, #0
  hdsi->Instance->CCR |= hdsi->Init.TXEscapeCkdiv;
 80082ec:	68a1      	ldr	r1, [r4, #8]
  __HAL_DSI_ENABLE(hdsi);
 80082ee:	9202      	str	r2, [sp, #8]
 80082f0:	685a      	ldr	r2, [r3, #4]
 80082f2:	f042 0201 	orr.w	r2, r2, #1
 80082f6:	605a      	str	r2, [r3, #4]
 80082f8:	685a      	ldr	r2, [r3, #4]
 80082fa:	f002 0201 	and.w	r2, r2, #1
 80082fe:	9202      	str	r2, [sp, #8]
 8008300:	9a02      	ldr	r2, [sp, #8]
  hdsi->Instance->CCR &= ~DSI_CCR_TXECKDIV;
 8008302:	689a      	ldr	r2, [r3, #8]
 8008304:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8008308:	609a      	str	r2, [r3, #8]
  hdsi->Instance->CCR |= hdsi->Init.TXEscapeCkdiv;
 800830a:	689a      	ldr	r2, [r3, #8]
 800830c:	430a      	orrs	r2, r1
  hdsi->Instance->PCONFR |= hdsi->Init.NumberOfLanes;
 800830e:	68e1      	ldr	r1, [r4, #12]
  hdsi->Instance->CCR |= hdsi->Init.TXEscapeCkdiv;
 8008310:	609a      	str	r2, [r3, #8]
  hdsi->Instance->PCTLR |= DSI_PCTLR_DEN;
 8008312:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 8008316:	f042 0202 	orr.w	r2, r2, #2
 800831a:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  hdsi->Instance->PCTLR |= DSI_PCTLR_CKE;
 800831e:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 8008322:	f042 0204 	orr.w	r2, r2, #4
 8008326:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_NL;
 800832a:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 800832e:	f022 0203 	bic.w	r2, r2, #3
 8008332:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  hdsi->Instance->PCONFR |= hdsi->Init.NumberOfLanes;
 8008336:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 800833a:	430a      	orrs	r2, r1
 800833c:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  tickstart = HAL_GetTick();
 8008340:	f7ff fd08 	bl	8007d54 <HAL_GetTick>
  if ((hdsi->Instance->PCONFR & DSI_PCONFR_NL) == DSI_ONE_DATA_LANE)
 8008344:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 8008346:	4606      	mov	r6, r0
  if ((hdsi->Instance->PCONFR & DSI_PCONFR_NL) == DSI_ONE_DATA_LANE)
 8008348:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800834c:	079b      	lsls	r3, r3, #30
 800834e:	d025      	beq.n	800839c <HAL_DSI_Init+0x154>
    while ((hdsi->Instance->PSR & (DSI_PSR_PSS0 | DSI_PSR_PSS1 | DSI_PSR_PSSC)) != (DSI_PSR_PSS0 | \
 8008350:	6823      	ldr	r3, [r4, #0]
 8008352:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8008356:	f003 0394 	and.w	r3, r3, #148	@ 0x94
 800835a:	2b94      	cmp	r3, #148	@ 0x94
 800835c:	d025      	beq.n	80083aa <HAL_DSI_Init+0x162>
      if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 800835e:	f7ff fcf9 	bl	8007d54 <HAL_GetTick>
 8008362:	1b80      	subs	r0, r0, r6
 8008364:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 8008368:	d9f2      	bls.n	8008350 <HAL_DSI_Init+0x108>
 800836a:	e014      	b.n	8008396 <HAL_DSI_Init+0x14e>
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 800836c:	f7ff fcf2 	bl	8007d54 <HAL_GetTick>
 8008370:	1b80      	subs	r0, r0, r6
 8008372:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 8008376:	d985      	bls.n	8008284 <HAL_DSI_Init+0x3c>
      return HAL_TIMEOUT;
 8008378:	2003      	movs	r0, #3
 800837a:	e053      	b.n	8008424 <HAL_DSI_Init+0x1dc>
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 800837c:	f7ff fcea 	bl	8007d54 <HAL_GetTick>
 8008380:	1b80      	subs	r0, r0, r6
 8008382:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 8008386:	d9ab      	bls.n	80082e0 <HAL_DSI_Init+0x98>
 8008388:	e7f6      	b.n	8008378 <HAL_DSI_Init+0x130>
      if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 800838a:	f7ff fce3 	bl	8007d54 <HAL_GetTick>
 800838e:	1b80      	subs	r0, r0, r6
 8008390:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 8008394:	d902      	bls.n	800839c <HAL_DSI_Init+0x154>
        __HAL_UNLOCK(hdsi);
 8008396:	2300      	movs	r3, #0
 8008398:	7423      	strb	r3, [r4, #16]
        return HAL_TIMEOUT;
 800839a:	e7ed      	b.n	8008378 <HAL_DSI_Init+0x130>
    while ((hdsi->Instance->PSR & (DSI_PSR_PSS0 | DSI_PSR_PSSC)) != (DSI_PSR_PSS0 | DSI_PSR_PSSC))
 800839c:	6823      	ldr	r3, [r4, #0]
 800839e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80083a2:	f003 0314 	and.w	r3, r3, #20
 80083a6:	2b14      	cmp	r3, #20
 80083a8:	d1ef      	bne.n	800838a <HAL_DSI_Init+0x142>
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 80083aa:	686b      	ldr	r3, [r5, #4]
 80083ac:	f246 11a8 	movw	r1, #25000	@ 0x61a8
 80083b0:	4a1e      	ldr	r2, [pc, #120]	@ (800842c <HAL_DSI_Init+0x1e4>)
  hdsi->Instance->IER[0U] = 0U;
 80083b2:	2000      	movs	r0, #0
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 80083b4:	2b01      	cmp	r3, #1
 80083b6:	bf38      	it	cc
 80083b8:	2301      	movcc	r3, #1
 80083ba:	435a      	muls	r2, r3
 80083bc:	68ab      	ldr	r3, [r5, #8]
 80083be:	f003 0303 	and.w	r3, r3, #3
 80083c2:	409a      	lsls	r2, r3
 80083c4:	682b      	ldr	r3, [r5, #0]
 80083c6:	434b      	muls	r3, r1
 80083c8:	fbb2 f2f3 	udiv	r2, r2, r3
  hdsi->Instance->WPCR[0U] &= ~DSI_WPCR0_UIX4;
 80083cc:	6823      	ldr	r3, [r4, #0]
 80083ce:	f8d3 1418 	ldr.w	r1, [r3, #1048]	@ 0x418
 80083d2:	f021 013f 	bic.w	r1, r1, #63	@ 0x3f
 80083d6:	f8c3 1418 	str.w	r1, [r3, #1048]	@ 0x418
  hdsi->Instance->WPCR[0U] |= unitIntervalx4;
 80083da:	f8d3 1418 	ldr.w	r1, [r3, #1048]	@ 0x418
 80083de:	430a      	orrs	r2, r1
  hdsi->Instance->CLCR |= (DSI_CLCR_DPCC | hdsi->Init.AutomaticClockLaneControl);
 80083e0:	6861      	ldr	r1, [r4, #4]
  hdsi->Instance->WPCR[0U] |= unitIntervalx4;
 80083e2:	f8c3 2418 	str.w	r2, [r3, #1048]	@ 0x418
  hdsi->Instance->IER[0U] = 0U;
 80083e6:	f8c3 00c4 	str.w	r0, [r3, #196]	@ 0xc4
  hdsi->Instance->IER[1U] = 0U;
 80083ea:	f8c3 00c8 	str.w	r0, [r3, #200]	@ 0xc8
  __HAL_DSI_DISABLE(hdsi);
 80083ee:	9003      	str	r0, [sp, #12]
 80083f0:	685a      	ldr	r2, [r3, #4]
  hdsi->ErrorMsk = 0U;
 80083f2:	61a0      	str	r0, [r4, #24]
  __HAL_DSI_DISABLE(hdsi);
 80083f4:	f022 0201 	bic.w	r2, r2, #1
 80083f8:	605a      	str	r2, [r3, #4]
 80083fa:	685a      	ldr	r2, [r3, #4]
 80083fc:	f002 0201 	and.w	r2, r2, #1
 8008400:	9203      	str	r2, [sp, #12]
 8008402:	9a03      	ldr	r2, [sp, #12]
  hdsi->Instance->CLCR &= ~(DSI_CLCR_DPCC | DSI_CLCR_ACR);
 8008404:	f8d3 2094 	ldr.w	r2, [r3, #148]	@ 0x94
 8008408:	f022 0203 	bic.w	r2, r2, #3
 800840c:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  hdsi->Instance->CLCR |= (DSI_CLCR_DPCC | hdsi->Init.AutomaticClockLaneControl);
 8008410:	f8d3 2094 	ldr.w	r2, [r3, #148]	@ 0x94
 8008414:	430a      	orrs	r2, r1
 8008416:	f042 0201 	orr.w	r2, r2, #1
 800841a:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  hdsi->State = HAL_DSI_STATE_READY;
 800841e:	2301      	movs	r3, #1
  hdsi->ErrorCode = HAL_DSI_ERROR_NONE;
 8008420:	6160      	str	r0, [r4, #20]
  hdsi->State = HAL_DSI_STATE_READY;
 8008422:	7463      	strb	r3, [r4, #17]
}
 8008424:	b004      	add	sp, #16
 8008426:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8008428:	2001      	movs	r0, #1
 800842a:	e7fb      	b.n	8008424 <HAL_DSI_Init+0x1dc>
 800842c:	003d0900 	.word	0x003d0900

08008430 <HAL_DSI_ErrorCallback>:
  * @brief  Operation Error DSI callback.
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval None
  */
__weak void HAL_DSI_ErrorCallback(DSI_HandleTypeDef *hdsi)
 8008430:	4770      	bx	lr

08008432 <HAL_DSI_IRQHandler>:
  if (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_TE) != 0U)
 8008432:	6803      	ldr	r3, [r0, #0]
 8008434:	f8d3 240c 	ldr.w	r2, [r3, #1036]	@ 0x40c
 8008438:	07d1      	lsls	r1, r2, #31
{
 800843a:	b510      	push	{r4, lr}
 800843c:	4604      	mov	r4, r0
  if (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_TE) != 0U)
 800843e:	d508      	bpl.n	8008452 <HAL_DSI_IRQHandler+0x20>
    if (__HAL_DSI_GET_IT_SOURCE(hdsi, DSI_IT_TE) != 0U)
 8008440:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 8008444:	07d2      	lsls	r2, r2, #31
 8008446:	d504      	bpl.n	8008452 <HAL_DSI_IRQHandler+0x20>
      __HAL_DSI_CLEAR_FLAG(hdsi, DSI_FLAG_TE);
 8008448:	2201      	movs	r2, #1
 800844a:	f8c3 2410 	str.w	r2, [r3, #1040]	@ 0x410
      HAL_DSI_TearingEffectCallback(hdsi);
 800844e:	f7f9 fd03 	bl	8001e58 <HAL_DSI_TearingEffectCallback>
  if (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_ER) != 0U)
 8008452:	6823      	ldr	r3, [r4, #0]
 8008454:	f8d3 240c 	ldr.w	r2, [r3, #1036]	@ 0x40c
 8008458:	0791      	lsls	r1, r2, #30
 800845a:	d509      	bpl.n	8008470 <HAL_DSI_IRQHandler+0x3e>
    if (__HAL_DSI_GET_IT_SOURCE(hdsi, DSI_IT_ER) != 0U)
 800845c:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 8008460:	0792      	lsls	r2, r2, #30
 8008462:	d505      	bpl.n	8008470 <HAL_DSI_IRQHandler+0x3e>
      __HAL_DSI_CLEAR_FLAG(hdsi, DSI_FLAG_ER);
 8008464:	2202      	movs	r2, #2
      HAL_DSI_EndOfRefreshCallback(hdsi);
 8008466:	4620      	mov	r0, r4
      __HAL_DSI_CLEAR_FLAG(hdsi, DSI_FLAG_ER);
 8008468:	f8c3 2410 	str.w	r2, [r3, #1040]	@ 0x410
      HAL_DSI_EndOfRefreshCallback(hdsi);
 800846c:	f7f9 fd26 	bl	8001ebc <HAL_DSI_EndOfRefreshCallback>
  if (hdsi->ErrorMsk != 0U)
 8008470:	69a3      	ldr	r3, [r4, #24]
 8008472:	2b00      	cmp	r3, #0
 8008474:	d04e      	beq.n	8008514 <HAL_DSI_IRQHandler+0xe2>
    ErrorStatus0 = hdsi->Instance->ISR[0U];
 8008476:	6821      	ldr	r1, [r4, #0]
 8008478:	f8d1 20bc 	ldr.w	r2, [r1, #188]	@ 0xbc
    ErrorStatus0 &= hdsi->Instance->IER[0U];
 800847c:	f8d1 30c4 	ldr.w	r3, [r1, #196]	@ 0xc4
 8008480:	401a      	ands	r2, r3
    ErrorStatus1 = hdsi->Instance->ISR[1U];
 8008482:	f8d1 30c0 	ldr.w	r3, [r1, #192]	@ 0xc0
    ErrorStatus1 &= hdsi->Instance->IER[1U];
 8008486:	f8d1 10c8 	ldr.w	r1, [r1, #200]	@ 0xc8
 800848a:	400b      	ands	r3, r1
    if ((ErrorStatus0 & DSI_ERROR_ACK_MASK) != 0U)
 800848c:	b291      	uxth	r1, r2
 800848e:	b119      	cbz	r1, 8008498 <HAL_DSI_IRQHandler+0x66>
      hdsi->ErrorCode |= HAL_DSI_ERROR_ACK;
 8008490:	6961      	ldr	r1, [r4, #20]
 8008492:	f041 0101 	orr.w	r1, r1, #1
 8008496:	6161      	str	r1, [r4, #20]
    if ((ErrorStatus0 & DSI_ERROR_PHY_MASK) != 0U)
 8008498:	f412 1ff8 	tst.w	r2, #2031616	@ 0x1f0000
 800849c:	d003      	beq.n	80084a6 <HAL_DSI_IRQHandler+0x74>
      hdsi->ErrorCode |= HAL_DSI_ERROR_PHY;
 800849e:	6962      	ldr	r2, [r4, #20]
 80084a0:	f042 0202 	orr.w	r2, r2, #2
 80084a4:	6162      	str	r2, [r4, #20]
    if ((ErrorStatus1 & DSI_ERROR_TX_MASK) != 0U)
 80084a6:	07d8      	lsls	r0, r3, #31
 80084a8:	d503      	bpl.n	80084b2 <HAL_DSI_IRQHandler+0x80>
      hdsi->ErrorCode |= HAL_DSI_ERROR_TX;
 80084aa:	6962      	ldr	r2, [r4, #20]
 80084ac:	f042 0204 	orr.w	r2, r2, #4
 80084b0:	6162      	str	r2, [r4, #20]
    if ((ErrorStatus1 & DSI_ERROR_RX_MASK) != 0U)
 80084b2:	0799      	lsls	r1, r3, #30
 80084b4:	d503      	bpl.n	80084be <HAL_DSI_IRQHandler+0x8c>
      hdsi->ErrorCode |= HAL_DSI_ERROR_RX;
 80084b6:	6962      	ldr	r2, [r4, #20]
 80084b8:	f042 0208 	orr.w	r2, r2, #8
 80084bc:	6162      	str	r2, [r4, #20]
    if ((ErrorStatus1 & DSI_ERROR_ECC_MASK) != 0U)
 80084be:	f013 0f0c 	tst.w	r3, #12
 80084c2:	d003      	beq.n	80084cc <HAL_DSI_IRQHandler+0x9a>
      hdsi->ErrorCode |= HAL_DSI_ERROR_ECC;
 80084c4:	6962      	ldr	r2, [r4, #20]
 80084c6:	f042 0210 	orr.w	r2, r2, #16
 80084ca:	6162      	str	r2, [r4, #20]
    if ((ErrorStatus1 & DSI_ERROR_CRC_MASK) != 0U)
 80084cc:	06da      	lsls	r2, r3, #27
 80084ce:	d503      	bpl.n	80084d8 <HAL_DSI_IRQHandler+0xa6>
      hdsi->ErrorCode |= HAL_DSI_ERROR_CRC;
 80084d0:	6962      	ldr	r2, [r4, #20]
 80084d2:	f042 0220 	orr.w	r2, r2, #32
 80084d6:	6162      	str	r2, [r4, #20]
    if ((ErrorStatus1 & DSI_ERROR_PSE_MASK) != 0U)
 80084d8:	0698      	lsls	r0, r3, #26
 80084da:	d503      	bpl.n	80084e4 <HAL_DSI_IRQHandler+0xb2>
      hdsi->ErrorCode |= HAL_DSI_ERROR_PSE;
 80084dc:	6962      	ldr	r2, [r4, #20]
 80084de:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80084e2:	6162      	str	r2, [r4, #20]
    if ((ErrorStatus1 & DSI_ERROR_EOT_MASK) != 0U)
 80084e4:	0659      	lsls	r1, r3, #25
 80084e6:	d503      	bpl.n	80084f0 <HAL_DSI_IRQHandler+0xbe>
      hdsi->ErrorCode |= HAL_DSI_ERROR_EOT;
 80084e8:	6962      	ldr	r2, [r4, #20]
 80084ea:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80084ee:	6162      	str	r2, [r4, #20]
    if ((ErrorStatus1 & DSI_ERROR_OVF_MASK) != 0U)
 80084f0:	061a      	lsls	r2, r3, #24
 80084f2:	d503      	bpl.n	80084fc <HAL_DSI_IRQHandler+0xca>
      hdsi->ErrorCode |= HAL_DSI_ERROR_OVF;
 80084f4:	6962      	ldr	r2, [r4, #20]
 80084f6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80084fa:	6162      	str	r2, [r4, #20]
    if ((ErrorStatus1 & DSI_ERROR_GEN_MASK) != 0U)
 80084fc:	f413 5ff8 	tst.w	r3, #7936	@ 0x1f00
 8008500:	d003      	beq.n	800850a <HAL_DSI_IRQHandler+0xd8>
      hdsi->ErrorCode |= HAL_DSI_ERROR_GEN;
 8008502:	6963      	ldr	r3, [r4, #20]
 8008504:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8008508:	6163      	str	r3, [r4, #20]
    if (hdsi->ErrorCode != HAL_DSI_ERROR_NONE)
 800850a:	6963      	ldr	r3, [r4, #20]
 800850c:	b113      	cbz	r3, 8008514 <HAL_DSI_IRQHandler+0xe2>
      HAL_DSI_ErrorCallback(hdsi);
 800850e:	4620      	mov	r0, r4
 8008510:	f7ff ff8e 	bl	8008430 <HAL_DSI_ErrorCallback>
}
 8008514:	bd10      	pop	{r4, pc}

08008516 <HAL_DSI_SetGenericVCID>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_SetGenericVCID(DSI_HandleTypeDef *hdsi, uint32_t VirtualChannelID)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 8008516:	7c02      	ldrb	r2, [r0, #16]
{
 8008518:	4603      	mov	r3, r0
  __HAL_LOCK(hdsi);
 800851a:	2a01      	cmp	r2, #1
 800851c:	d00a      	beq.n	8008534 <HAL_DSI_SetGenericVCID+0x1e>

  /* Update the GVCID register */
  hdsi->Instance->GVCIDR &= ~DSI_GVCIDR_VCID;
 800851e:	6802      	ldr	r2, [r0, #0]
 8008520:	6b10      	ldr	r0, [r2, #48]	@ 0x30
 8008522:	f020 0003 	bic.w	r0, r0, #3
 8008526:	6310      	str	r0, [r2, #48]	@ 0x30
  hdsi->Instance->GVCIDR |= VirtualChannelID;
 8008528:	6b10      	ldr	r0, [r2, #48]	@ 0x30
 800852a:	4301      	orrs	r1, r0

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800852c:	2000      	movs	r0, #0
  hdsi->Instance->GVCIDR |= VirtualChannelID;
 800852e:	6311      	str	r1, [r2, #48]	@ 0x30
  __HAL_UNLOCK(hdsi);
 8008530:	7418      	strb	r0, [r3, #16]

  return HAL_OK;
 8008532:	4770      	bx	lr
  __HAL_LOCK(hdsi);
 8008534:	2002      	movs	r0, #2
}
 8008536:	4770      	bx	lr

08008538 <HAL_DSI_ConfigAdaptedCommandMode>:
  * @param  CmdCfg  pointer to a DSI_CmdCfgTypeDef structure that contains
  *                 the DSI command mode configuration parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigAdaptedCommandMode(DSI_HandleTypeDef *hdsi, DSI_CmdCfgTypeDef *CmdCfg)
{
 8008538:	b530      	push	{r4, r5, lr}
  /* Process locked */
  __HAL_LOCK(hdsi);
 800853a:	7c03      	ldrb	r3, [r0, #16]
{
 800853c:	4604      	mov	r4, r0
  __HAL_LOCK(hdsi);
 800853e:	2b01      	cmp	r3, #1
 8008540:	d069      	beq.n	8008616 <HAL_DSI_ConfigAdaptedCommandMode+0xde>
  assert_param(IS_DSI_DE_POLARITY(CmdCfg->DEPolarity));
  assert_param(IS_DSI_VSYNC_POLARITY(CmdCfg->VSPolarity));
  assert_param(IS_DSI_HSYNC_POLARITY(CmdCfg->HSPolarity));

  /* Select command mode by setting CMDM and DSIM bits */
  hdsi->Instance->MCR |= DSI_MCR_CMDM;
 8008542:	6803      	ldr	r3, [r0, #0]
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_DSIM;
  hdsi->Instance->WCFGR |= DSI_WCFGR_DSIM;

  /* Select the virtual channel for the LTDC interface traffic */
  hdsi->Instance->LVCIDR &= ~DSI_LVCIDR_VCID;
  hdsi->Instance->LVCIDR |= CmdCfg->VirtualChannelID;
 8008544:	6808      	ldr	r0, [r1, #0]
  hdsi->Instance->MCR |= DSI_MCR_CMDM;
 8008546:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008548:	f042 0201 	orr.w	r2, r2, #1
 800854c:	635a      	str	r2, [r3, #52]	@ 0x34
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_DSIM;
 800854e:	f8d3 2400 	ldr.w	r2, [r3, #1024]	@ 0x400
 8008552:	f022 0201 	bic.w	r2, r2, #1
 8008556:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
  hdsi->Instance->WCFGR |= DSI_WCFGR_DSIM;
 800855a:	f8d3 2400 	ldr.w	r2, [r3, #1024]	@ 0x400
 800855e:	f042 0201 	orr.w	r2, r2, #1
 8008562:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
  hdsi->Instance->LVCIDR &= ~DSI_LVCIDR_VCID;
 8008566:	68da      	ldr	r2, [r3, #12]
 8008568:	f022 0203 	bic.w	r2, r2, #3
 800856c:	60da      	str	r2, [r3, #12]
  hdsi->Instance->LVCIDR |= CmdCfg->VirtualChannelID;
 800856e:	68da      	ldr	r2, [r3, #12]
 8008570:	4302      	orrs	r2, r0
 8008572:	60da      	str	r2, [r3, #12]

  /* Configure the polarity of control signals */
  hdsi->Instance->LPCR &= ~(DSI_LPCR_DEP | DSI_LPCR_VSP | DSI_LPCR_HSP);
 8008574:	695a      	ldr	r2, [r3, #20]
 8008576:	f022 0207 	bic.w	r2, r2, #7
 800857a:	615a      	str	r2, [r3, #20]
  hdsi->Instance->LPCR |= (CmdCfg->DEPolarity | CmdCfg->VSPolarity | CmdCfg->HSPolarity);
 800857c:	6958      	ldr	r0, [r3, #20]
 800857e:	e9d1 5206 	ldrd	r5, r2, [r1, #24]
 8008582:	432a      	orrs	r2, r5
 8008584:	694d      	ldr	r5, [r1, #20]
 8008586:	432a      	orrs	r2, r5
 8008588:	4302      	orrs	r2, r0

  /* Select the color coding for the host */
  hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_COLC;
  hdsi->Instance->LCOLCR |= CmdCfg->ColorCoding;
 800858a:	6848      	ldr	r0, [r1, #4]
  hdsi->Instance->LPCR |= (CmdCfg->DEPolarity | CmdCfg->VSPolarity | CmdCfg->HSPolarity);
 800858c:	615a      	str	r2, [r3, #20]
  hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_COLC;
 800858e:	691a      	ldr	r2, [r3, #16]
 8008590:	f022 020f 	bic.w	r2, r2, #15
 8008594:	611a      	str	r2, [r3, #16]
  hdsi->Instance->LCOLCR |= CmdCfg->ColorCoding;
 8008596:	691a      	ldr	r2, [r3, #16]
 8008598:	4302      	orrs	r2, r0
 800859a:	611a      	str	r2, [r3, #16]

  /* Select the color coding for the wrapper */
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_COLMUX;
 800859c:	f8d3 2400 	ldr.w	r2, [r3, #1024]	@ 0x400
 80085a0:	f022 020e 	bic.w	r2, r2, #14
 80085a4:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
  hdsi->Instance->WCFGR |= ((CmdCfg->ColorCoding) << 1U);
 80085a8:	f8d3 2400 	ldr.w	r2, [r3, #1024]	@ 0x400
 80085ac:	ea42 0240 	orr.w	r2, r2, r0, lsl #1

  /* Configure the maximum allowed size for write memory command */
  hdsi->Instance->LCCR &= ~DSI_LCCR_CMDSIZE;
  hdsi->Instance->LCCR |= CmdCfg->CommandSize;
 80085b0:	6888      	ldr	r0, [r1, #8]
  hdsi->Instance->WCFGR |= ((CmdCfg->ColorCoding) << 1U);
 80085b2:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
  hdsi->Instance->LCCR &= ~DSI_LCCR_CMDSIZE;
 80085b6:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80085b8:	0c12      	lsrs	r2, r2, #16
 80085ba:	0412      	lsls	r2, r2, #16
 80085bc:	665a      	str	r2, [r3, #100]	@ 0x64
  hdsi->Instance->LCCR |= CmdCfg->CommandSize;
 80085be:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80085c0:	4302      	orrs	r2, r0
 80085c2:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Configure the tearing effect source and polarity and select the refresh mode */
  hdsi->Instance->WCFGR &= ~(DSI_WCFGR_TESRC | DSI_WCFGR_TEPOL | DSI_WCFGR_AR | DSI_WCFGR_VSPOL);
 80085c4:	f8d3 2400 	ldr.w	r2, [r3, #1024]	@ 0x400
 80085c8:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 80085cc:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
  hdsi->Instance->WCFGR |= (CmdCfg->TearingEffectSource | CmdCfg->TearingEffectPolarity | CmdCfg->AutomaticRefresh |
 80085d0:	f8d3 0400 	ldr.w	r0, [r3, #1024]	@ 0x400
 80085d4:	e9d1 2503 	ldrd	r2, r5, [r1, #12]
 80085d8:	432a      	orrs	r2, r5
 80085da:	6a4d      	ldr	r5, [r1, #36]	@ 0x24
 80085dc:	432a      	orrs	r2, r5
 80085de:	6a0d      	ldr	r5, [r1, #32]
                            CmdCfg->VSyncPol);

  /* Configure the tearing effect acknowledge request */
  hdsi->Instance->CMCR &= ~DSI_CMCR_TEARE;
  hdsi->Instance->CMCR |= CmdCfg->TEAcknowledgeRequest;
 80085e0:	6a89      	ldr	r1, [r1, #40]	@ 0x28
  hdsi->Instance->WCFGR |= (CmdCfg->TearingEffectSource | CmdCfg->TearingEffectPolarity | CmdCfg->AutomaticRefresh |
 80085e2:	432a      	orrs	r2, r5
 80085e4:	4302      	orrs	r2, r0

  /* Enable the End of Refresh interrupt */
  __HAL_DSI_ENABLE_IT(hdsi, DSI_IT_ER);

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80085e6:	2000      	movs	r0, #0
  hdsi->Instance->WCFGR |= (CmdCfg->TearingEffectSource | CmdCfg->TearingEffectPolarity | CmdCfg->AutomaticRefresh |
 80085e8:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
  hdsi->Instance->CMCR &= ~DSI_CMCR_TEARE;
 80085ec:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 80085ee:	f022 0201 	bic.w	r2, r2, #1
 80085f2:	669a      	str	r2, [r3, #104]	@ 0x68
  hdsi->Instance->CMCR |= CmdCfg->TEAcknowledgeRequest;
 80085f4:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 80085f6:	430a      	orrs	r2, r1
 80085f8:	669a      	str	r2, [r3, #104]	@ 0x68
  __HAL_DSI_ENABLE_IT(hdsi, DSI_IT_TE);
 80085fa:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 80085fe:	f042 0201 	orr.w	r2, r2, #1
 8008602:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408
  __HAL_DSI_ENABLE_IT(hdsi, DSI_IT_ER);
 8008606:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 800860a:	f042 0202 	orr.w	r2, r2, #2
 800860e:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408
  __HAL_UNLOCK(hdsi);
 8008612:	7420      	strb	r0, [r4, #16]

  return HAL_OK;
}
 8008614:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(hdsi);
 8008616:	2002      	movs	r0, #2
 8008618:	e7fc      	b.n	8008614 <HAL_DSI_ConfigAdaptedCommandMode+0xdc>
	...

0800861c <HAL_DSI_ConfigCommand>:
  * @param  LPCmd  pointer to a DSI_LPCmdTypeDef structure that contains
  *                the DSI command transmission mode configuration parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigCommand(DSI_HandleTypeDef *hdsi, DSI_LPCmdTypeDef *LPCmd)
{
 800861c:	b530      	push	{r4, r5, lr}
  /* Process locked */
  __HAL_LOCK(hdsi);
 800861e:	7c03      	ldrb	r3, [r0, #16]
{
 8008620:	4602      	mov	r2, r0
  __HAL_LOCK(hdsi);
 8008622:	2b01      	cmp	r3, #1
 8008624:	d029      	beq.n	800867a <HAL_DSI_ConfigCommand+0x5e>
  assert_param(IS_DSI_LP_DLW(LPCmd->LPDcsLongWrite));
  assert_param(IS_DSI_LP_MRDP(LPCmd->LPMaxReadPacket));
  assert_param(IS_DSI_ACK_REQUEST(LPCmd->AcknowledgeRequest));

  /* Select High-speed or Low-power for command transmission */
  hdsi->Instance->CMCR &= ~(DSI_CMCR_GSW0TX | \
 8008626:	6800      	ldr	r0, [r0, #0]
 8008628:	4b15      	ldr	r3, [pc, #84]	@ (8008680 <HAL_DSI_ConfigCommand+0x64>)
 800862a:	6e84      	ldr	r4, [r0, #104]	@ 0x68
 800862c:	4023      	ands	r3, r4
 800862e:	6683      	str	r3, [r0, #104]	@ 0x68
                            DSI_CMCR_DSW0TX | \
                            DSI_CMCR_DSW1TX | \
                            DSI_CMCR_DSR0TX | \
                            DSI_CMCR_DLWTX  | \
                            DSI_CMCR_MRDPS);
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  | \
 8008630:	6e84      	ldr	r4, [r0, #104]	@ 0x68
 8008632:	e9d1 3500 	ldrd	r3, r5, [r1]
 8008636:	432b      	orrs	r3, r5
                           LPCmd->LPGenShortWriteOneP | \
 8008638:	688d      	ldr	r5, [r1, #8]
 800863a:	432b      	orrs	r3, r5
                           LPCmd->LPGenShortWriteTwoP | \
 800863c:	68cd      	ldr	r5, [r1, #12]
 800863e:	432b      	orrs	r3, r5
                           LPCmd->LPGenShortReadNoP   | \
 8008640:	690d      	ldr	r5, [r1, #16]
 8008642:	432b      	orrs	r3, r5
                           LPCmd->LPGenShortReadOneP  | \
 8008644:	694d      	ldr	r5, [r1, #20]
 8008646:	432b      	orrs	r3, r5
                           LPCmd->LPGenShortReadTwoP  | \
 8008648:	698d      	ldr	r5, [r1, #24]
 800864a:	432b      	orrs	r3, r5
                           LPCmd->LPGenLongWrite      | \
 800864c:	69cd      	ldr	r5, [r1, #28]
 800864e:	432b      	orrs	r3, r5
                           LPCmd->LPDcsShortWriteNoP  | \
 8008650:	6a0d      	ldr	r5, [r1, #32]
 8008652:	432b      	orrs	r3, r5
                           LPCmd->LPDcsShortWriteOneP | \
 8008654:	6a4d      	ldr	r5, [r1, #36]	@ 0x24
 8008656:	432b      	orrs	r3, r5
                           LPCmd->LPDcsShortReadNoP   | \
 8008658:	6a8d      	ldr	r5, [r1, #40]	@ 0x28
 800865a:	432b      	orrs	r3, r5
                           LPCmd->LPDcsLongWrite      | \
 800865c:	6acd      	ldr	r5, [r1, #44]	@ 0x2c
                           LPCmd->LPMaxReadPacket);

  /* Configure the acknowledge request after each packet transmission */
  hdsi->Instance->CMCR &= ~DSI_CMCR_ARE;
  hdsi->Instance->CMCR |= LPCmd->AcknowledgeRequest;
 800865e:	6b09      	ldr	r1, [r1, #48]	@ 0x30
                           LPCmd->LPDcsLongWrite      | \
 8008660:	432b      	orrs	r3, r5
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  | \
 8008662:	4323      	orrs	r3, r4
 8008664:	6683      	str	r3, [r0, #104]	@ 0x68
  hdsi->Instance->CMCR &= ~DSI_CMCR_ARE;
 8008666:	6e83      	ldr	r3, [r0, #104]	@ 0x68
 8008668:	f023 0302 	bic.w	r3, r3, #2
 800866c:	6683      	str	r3, [r0, #104]	@ 0x68
  hdsi->Instance->CMCR |= LPCmd->AcknowledgeRequest;
 800866e:	6e83      	ldr	r3, [r0, #104]	@ 0x68
 8008670:	430b      	orrs	r3, r1
 8008672:	6683      	str	r3, [r0, #104]	@ 0x68

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8008674:	2000      	movs	r0, #0
 8008676:	7410      	strb	r0, [r2, #16]

  return HAL_OK;
}
 8008678:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(hdsi);
 800867a:	2002      	movs	r0, #2
 800867c:	e7fc      	b.n	8008678 <HAL_DSI_ConfigCommand+0x5c>
 800867e:	bf00      	nop
 8008680:	fef080ff 	.word	0xfef080ff

08008684 <HAL_DSI_ConfigFlowControl>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigFlowControl(DSI_HandleTypeDef *hdsi, uint32_t FlowControl)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 8008684:	7c02      	ldrb	r2, [r0, #16]
{
 8008686:	4603      	mov	r3, r0
  __HAL_LOCK(hdsi);
 8008688:	2a01      	cmp	r2, #1
 800868a:	d00a      	beq.n	80086a2 <HAL_DSI_ConfigFlowControl+0x1e>

  /* Check the parameters */
  assert_param(IS_DSI_FLOW_CONTROL(FlowControl));

  /* Set the DSI Host Protocol Configuration Register */
  hdsi->Instance->PCR &= ~DSI_FLOW_CONTROL_ALL;
 800868c:	6802      	ldr	r2, [r0, #0]
 800868e:	6ad0      	ldr	r0, [r2, #44]	@ 0x2c
 8008690:	f020 001f 	bic.w	r0, r0, #31
 8008694:	62d0      	str	r0, [r2, #44]	@ 0x2c
  hdsi->Instance->PCR |= FlowControl;
 8008696:	6ad0      	ldr	r0, [r2, #44]	@ 0x2c
 8008698:	4301      	orrs	r1, r0

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800869a:	2000      	movs	r0, #0
  hdsi->Instance->PCR |= FlowControl;
 800869c:	62d1      	str	r1, [r2, #44]	@ 0x2c
  __HAL_UNLOCK(hdsi);
 800869e:	7418      	strb	r0, [r3, #16]

  return HAL_OK;
 80086a0:	4770      	bx	lr
  __HAL_LOCK(hdsi);
 80086a2:	2002      	movs	r0, #2
}
 80086a4:	4770      	bx	lr

080086a6 <HAL_DSI_ConfigPhyTimer>:
  * @param  PhyTimers  DSI_PHY_TimerTypeDef structure that contains
  *                    the DSI PHY timing parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigPhyTimer(DSI_HandleTypeDef *hdsi, DSI_PHY_TimerTypeDef *PhyTimers)
{
 80086a6:	b530      	push	{r4, r5, lr}
  uint32_t maxTime;
  /* Process locked */
  __HAL_LOCK(hdsi);
 80086a8:	7c03      	ldrb	r3, [r0, #16]
{
 80086aa:	4604      	mov	r4, r0
  __HAL_LOCK(hdsi);
 80086ac:	2b01      	cmp	r3, #1
 80086ae:	d034      	beq.n	800871a <HAL_DSI_ConfigPhyTimer+0x74>

  maxTime = (PhyTimers->ClockLaneLP2HSTime > PhyTimers->ClockLaneHS2LPTime) ? PhyTimers->ClockLaneLP2HSTime :
 80086b0:	e9d1 0300 	ldrd	r0, r3, [r1]
 80086b4:	4298      	cmp	r0, r3
 80086b6:	bf38      	it	cc
 80086b8:	4618      	movcc	r0, r3
     Register (DSI_CLTCR).
     But the DSI Host is not calculating LP2HS_TIME + HS2LP_TIME but 2 x HS2LP_TIME.

     Workaround : Configure HS2LP_TIME and LP2HS_TIME with the same value being the max of HS2LP_TIME or LP2HS_TIME.
    */
  hdsi->Instance->CLTCR &= ~(DSI_CLTCR_LP2HS_TIME | DSI_CLTCR_HS2LP_TIME);
 80086ba:	6823      	ldr	r3, [r4, #0]
 80086bc:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 80086c0:	f002 22fc 	and.w	r2, r2, #4227922944	@ 0xfc00fc00
 80086c4:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  hdsi->Instance->CLTCR |= (maxTime | ((maxTime) << 16U));
 80086c8:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 80086cc:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80086d0:	4302      	orrs	r2, r0
 80086d2:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98

  /* Data lane timer configuration */
  hdsi->Instance->DLTCR &= ~(DSI_DLTCR_MRD_TIME | DSI_DLTCR_LP2HS_TIME | DSI_DLTCR_HS2LP_TIME);
 80086d6:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 80086da:	f402 4200 	and.w	r2, r2, #32768	@ 0x8000
 80086de:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 80086e2:	f8d3 009c 	ldr.w	r0, [r3, #156]	@ 0x9c
                              PhyTimers->DataLaneHS2LPTime) << 24U));
 80086e6:	e9d1 2502 	ldrd	r2, r5, [r1, #8]
 80086ea:	0612      	lsls	r2, r2, #24
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 80086ec:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
 80086f0:	690d      	ldr	r5, [r1, #16]

  /* Configure the wait period to request HS transmission after a stop state */
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_SW_TIME;
  hdsi->Instance->PCONFR |= ((PhyTimers->StopWaitTime) << 8U);
 80086f2:	6949      	ldr	r1, [r1, #20]
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 80086f4:	432a      	orrs	r2, r5
 80086f6:	4302      	orrs	r2, r0

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80086f8:	2000      	movs	r0, #0
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 80086fa:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_SW_TIME;
 80086fe:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 8008702:	f422 427f 	bic.w	r2, r2, #65280	@ 0xff00
 8008706:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  hdsi->Instance->PCONFR |= ((PhyTimers->StopWaitTime) << 8U);
 800870a:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 800870e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8008712:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  __HAL_UNLOCK(hdsi);
 8008716:	7420      	strb	r0, [r4, #16]

  return HAL_OK;
}
 8008718:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(hdsi);
 800871a:	2002      	movs	r0, #2
 800871c:	e7fc      	b.n	8008718 <HAL_DSI_ConfigPhyTimer+0x72>
	...

08008720 <HAL_DSI_ConfigHostTimeouts>:
  * @param  HostTimeouts  DSI_HOST_TimeoutTypeDef structure that contains
  *                       the DSI host timeout parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigHostTimeouts(DSI_HandleTypeDef *hdsi, DSI_HOST_TimeoutTypeDef *HostTimeouts)
{
 8008720:	b530      	push	{r4, r5, lr}
  /* Process locked */
  __HAL_LOCK(hdsi);
 8008722:	7c03      	ldrb	r3, [r0, #16]
{
 8008724:	4604      	mov	r4, r0
  __HAL_LOCK(hdsi);
 8008726:	2b01      	cmp	r3, #1
 8008728:	d05b      	beq.n	80087e2 <HAL_DSI_ConfigHostTimeouts+0xc2>

  /* Set the timeout clock division factor */
  hdsi->Instance->CCR &= ~DSI_CCR_TOCKDIV;
 800872a:	6803      	ldr	r3, [r0, #0]
  hdsi->Instance->CCR |= ((HostTimeouts->TimeoutCkdiv) << 8U);
 800872c:	6808      	ldr	r0, [r1, #0]
  hdsi->Instance->CCR &= ~DSI_CCR_TOCKDIV;
 800872e:	689a      	ldr	r2, [r3, #8]
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_HSTX_TOCNT;
  hdsi->Instance->TCCR[0U] |= ((HostTimeouts->HighSpeedTransmissionTimeout) << 16U);

  /* Low-power reception timeout */
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_LPRX_TOCNT;
  hdsi->Instance->TCCR[0U] |= HostTimeouts->LowPowerReceptionTimeout;
 8008730:	688d      	ldr	r5, [r1, #8]
  hdsi->Instance->CCR &= ~DSI_CCR_TOCKDIV;
 8008732:	f422 427f 	bic.w	r2, r2, #65280	@ 0xff00
 8008736:	609a      	str	r2, [r3, #8]
  hdsi->Instance->CCR |= ((HostTimeouts->TimeoutCkdiv) << 8U);
 8008738:	689a      	ldr	r2, [r3, #8]
 800873a:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
  hdsi->Instance->TCCR[0U] |= ((HostTimeouts->HighSpeedTransmissionTimeout) << 16U);
 800873e:	6848      	ldr	r0, [r1, #4]
  hdsi->Instance->CCR |= ((HostTimeouts->TimeoutCkdiv) << 8U);
 8008740:	609a      	str	r2, [r3, #8]
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_HSTX_TOCNT;
 8008742:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
 8008744:	b292      	uxth	r2, r2
 8008746:	679a      	str	r2, [r3, #120]	@ 0x78
  hdsi->Instance->TCCR[0U] |= ((HostTimeouts->HighSpeedTransmissionTimeout) << 16U);
 8008748:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
 800874a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800874e:	679a      	str	r2, [r3, #120]	@ 0x78
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_LPRX_TOCNT;
 8008750:	4a25      	ldr	r2, [pc, #148]	@ (80087e8 <HAL_DSI_ConfigHostTimeouts+0xc8>)
 8008752:	6f98      	ldr	r0, [r3, #120]	@ 0x78
 8008754:	4010      	ands	r0, r2
 8008756:	6798      	str	r0, [r3, #120]	@ 0x78
  hdsi->Instance->TCCR[0U] |= HostTimeouts->LowPowerReceptionTimeout;
 8008758:	6f98      	ldr	r0, [r3, #120]	@ 0x78
 800875a:	4328      	orrs	r0, r5

  /* High-speed read timeout */
  hdsi->Instance->TCCR[1U] &= ~DSI_TCCR1_HSRD_TOCNT;
  hdsi->Instance->TCCR[1U] |= HostTimeouts->HighSpeedReadTimeout;
 800875c:	68cd      	ldr	r5, [r1, #12]
  hdsi->Instance->TCCR[0U] |= HostTimeouts->LowPowerReceptionTimeout;
 800875e:	6798      	str	r0, [r3, #120]	@ 0x78
  hdsi->Instance->TCCR[1U] &= ~DSI_TCCR1_HSRD_TOCNT;
 8008760:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 8008762:	4010      	ands	r0, r2
 8008764:	67d8      	str	r0, [r3, #124]	@ 0x7c
  hdsi->Instance->TCCR[1U] |= HostTimeouts->HighSpeedReadTimeout;
 8008766:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 8008768:	4328      	orrs	r0, r5

  /* Low-power read timeout */
  hdsi->Instance->TCCR[2U] &= ~DSI_TCCR2_LPRD_TOCNT;
  hdsi->Instance->TCCR[2U] |= HostTimeouts->LowPowerReadTimeout;
 800876a:	690d      	ldr	r5, [r1, #16]
  hdsi->Instance->TCCR[1U] |= HostTimeouts->HighSpeedReadTimeout;
 800876c:	67d8      	str	r0, [r3, #124]	@ 0x7c
  hdsi->Instance->TCCR[2U] &= ~DSI_TCCR2_LPRD_TOCNT;
 800876e:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 8008772:	4010      	ands	r0, r2
 8008774:	f8c3 0080 	str.w	r0, [r3, #128]	@ 0x80
  hdsi->Instance->TCCR[2U] |= HostTimeouts->LowPowerReadTimeout;
 8008778:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 800877c:	4328      	orrs	r0, r5

  /* High-speed write timeout */
  hdsi->Instance->TCCR[3U] &= ~DSI_TCCR3_HSWR_TOCNT;
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWriteTimeout;
 800877e:	694d      	ldr	r5, [r1, #20]
  hdsi->Instance->TCCR[2U] |= HostTimeouts->LowPowerReadTimeout;
 8008780:	f8c3 0080 	str.w	r0, [r3, #128]	@ 0x80
  hdsi->Instance->TCCR[3U] &= ~DSI_TCCR3_HSWR_TOCNT;
 8008784:	f8d3 0084 	ldr.w	r0, [r3, #132]	@ 0x84
 8008788:	4010      	ands	r0, r2
 800878a:	f8c3 0084 	str.w	r0, [r3, #132]	@ 0x84
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWriteTimeout;
 800878e:	f8d3 0084 	ldr.w	r0, [r3, #132]	@ 0x84
 8008792:	4328      	orrs	r0, r5
 8008794:	f8c3 0084 	str.w	r0, [r3, #132]	@ 0x84

  /* High-speed write presp mode */
  hdsi->Instance->TCCR[3U] &= ~DSI_TCCR3_PM;
 8008798:	f8d3 0084 	ldr.w	r0, [r3, #132]	@ 0x84
 800879c:	f020 7080 	bic.w	r0, r0, #16777216	@ 0x1000000
 80087a0:	f8c3 0084 	str.w	r0, [r3, #132]	@ 0x84
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWritePrespMode;
 80087a4:	f8d3 0084 	ldr.w	r0, [r3, #132]	@ 0x84
 80087a8:	698d      	ldr	r5, [r1, #24]
 80087aa:	4328      	orrs	r0, r5

  /* Low-speed write timeout */
  hdsi->Instance->TCCR[4U] &= ~DSI_TCCR4_LPWR_TOCNT;
  hdsi->Instance->TCCR[4U] |= HostTimeouts->LowPowerWriteTimeout;
 80087ac:	69cd      	ldr	r5, [r1, #28]

  /* BTA timeout */
  hdsi->Instance->TCCR[5U] &= ~DSI_TCCR5_BTA_TOCNT;
  hdsi->Instance->TCCR[5U] |= HostTimeouts->BTATimeout;
 80087ae:	6a09      	ldr	r1, [r1, #32]
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWritePrespMode;
 80087b0:	f8c3 0084 	str.w	r0, [r3, #132]	@ 0x84
  hdsi->Instance->TCCR[4U] &= ~DSI_TCCR4_LPWR_TOCNT;
 80087b4:	f8d3 0088 	ldr.w	r0, [r3, #136]	@ 0x88
 80087b8:	4010      	ands	r0, r2
 80087ba:	f8c3 0088 	str.w	r0, [r3, #136]	@ 0x88
  hdsi->Instance->TCCR[4U] |= HostTimeouts->LowPowerWriteTimeout;
 80087be:	f8d3 0088 	ldr.w	r0, [r3, #136]	@ 0x88
 80087c2:	4328      	orrs	r0, r5
 80087c4:	f8c3 0088 	str.w	r0, [r3, #136]	@ 0x88
  hdsi->Instance->TCCR[5U] &= ~DSI_TCCR5_BTA_TOCNT;
 80087c8:	f8d3 008c 	ldr.w	r0, [r3, #140]	@ 0x8c
 80087cc:	4002      	ands	r2, r0

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80087ce:	2000      	movs	r0, #0
  hdsi->Instance->TCCR[5U] &= ~DSI_TCCR5_BTA_TOCNT;
 80087d0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  hdsi->Instance->TCCR[5U] |= HostTimeouts->BTATimeout;
 80087d4:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 80087d8:	430a      	orrs	r2, r1
 80087da:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  __HAL_UNLOCK(hdsi);
 80087de:	7420      	strb	r0, [r4, #16]

  return HAL_OK;
}
 80087e0:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(hdsi);
 80087e2:	2002      	movs	r0, #2
 80087e4:	e7fc      	b.n	80087e0 <HAL_DSI_ConfigHostTimeouts+0xc0>
 80087e6:	bf00      	nop
 80087e8:	ffff0000 	.word	0xffff0000

080087ec <HAL_DSI_Start>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Start(DSI_HandleTypeDef *hdsi)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 80087ec:	7c03      	ldrb	r3, [r0, #16]
{
 80087ee:	b082      	sub	sp, #8
  __HAL_LOCK(hdsi);
 80087f0:	2b01      	cmp	r3, #1
 80087f2:	d01c      	beq.n	800882e <HAL_DSI_Start+0x42>

  /* Enable the DSI host */
  __HAL_DSI_ENABLE(hdsi);
 80087f4:	6802      	ldr	r2, [r0, #0]
 80087f6:	2300      	movs	r3, #0
 80087f8:	9300      	str	r3, [sp, #0]
 80087fa:	6851      	ldr	r1, [r2, #4]
 80087fc:	f041 0101 	orr.w	r1, r1, #1
 8008800:	6051      	str	r1, [r2, #4]
 8008802:	6851      	ldr	r1, [r2, #4]
 8008804:	f001 0101 	and.w	r1, r1, #1
 8008808:	9100      	str	r1, [sp, #0]
 800880a:	9900      	ldr	r1, [sp, #0]

  /* Enable the DSI wrapper */
  __HAL_DSI_WRAPPER_ENABLE(hdsi);
 800880c:	9301      	str	r3, [sp, #4]
 800880e:	f8d2 1404 	ldr.w	r1, [r2, #1028]	@ 0x404
 8008812:	f041 0108 	orr.w	r1, r1, #8
 8008816:	f8c2 1404 	str.w	r1, [r2, #1028]	@ 0x404
 800881a:	f8d2 2404 	ldr.w	r2, [r2, #1028]	@ 0x404

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800881e:	7403      	strb	r3, [r0, #16]

  return HAL_OK;
 8008820:	4618      	mov	r0, r3
  __HAL_DSI_WRAPPER_ENABLE(hdsi);
 8008822:	f002 0208 	and.w	r2, r2, #8
 8008826:	9201      	str	r2, [sp, #4]
 8008828:	9a01      	ldr	r2, [sp, #4]
}
 800882a:	b002      	add	sp, #8
 800882c:	4770      	bx	lr
  __HAL_LOCK(hdsi);
 800882e:	2002      	movs	r0, #2
 8008830:	e7fb      	b.n	800882a <HAL_DSI_Start+0x3e>

08008832 <HAL_DSI_Refresh>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Refresh(DSI_HandleTypeDef *hdsi)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 8008832:	7c02      	ldrb	r2, [r0, #16]
{
 8008834:	4603      	mov	r3, r0
  __HAL_LOCK(hdsi);
 8008836:	2a01      	cmp	r2, #1
 8008838:	d009      	beq.n	800884e <HAL_DSI_Refresh+0x1c>

  /* Update the display */
  hdsi->Instance->WCR |= DSI_WCR_LTDCEN;
 800883a:	6801      	ldr	r1, [r0, #0]

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800883c:	2000      	movs	r0, #0
  hdsi->Instance->WCR |= DSI_WCR_LTDCEN;
 800883e:	f8d1 2404 	ldr.w	r2, [r1, #1028]	@ 0x404
 8008842:	f042 0204 	orr.w	r2, r2, #4
 8008846:	f8c1 2404 	str.w	r2, [r1, #1028]	@ 0x404
  __HAL_UNLOCK(hdsi);
 800884a:	7418      	strb	r0, [r3, #16]

  return HAL_OK;
 800884c:	4770      	bx	lr
  __HAL_LOCK(hdsi);
 800884e:	2002      	movs	r0, #2
}
 8008850:	4770      	bx	lr

08008852 <HAL_DSI_ShortWrite>:
HAL_StatusTypeDef HAL_DSI_ShortWrite(DSI_HandleTypeDef *hdsi,
                                     uint32_t ChannelID,
                                     uint32_t Mode,
                                     uint32_t Param1,
                                     uint32_t Param2)
{
 8008852:	b537      	push	{r0, r1, r2, r4, r5, lr}
  HAL_StatusTypeDef status;
  /* Check the parameters */
  assert_param(IS_DSI_SHORT_WRITE_PACKET_TYPE(Mode));

  /* Process locked */
  __HAL_LOCK(hdsi);
 8008854:	7c05      	ldrb	r5, [r0, #16]
{
 8008856:	4604      	mov	r4, r0
  __HAL_LOCK(hdsi);
 8008858:	2d01      	cmp	r5, #1
 800885a:	d009      	beq.n	8008870 <HAL_DSI_ShortWrite+0x1e>
 800885c:	2501      	movs	r5, #1
 800885e:	7405      	strb	r5, [r0, #16]

  status = DSI_ShortWrite(hdsi, ChannelID, Mode, Param1, Param2);
 8008860:	9d06      	ldr	r5, [sp, #24]
 8008862:	9500      	str	r5, [sp, #0]
 8008864:	f7ff fc6c 	bl	8008140 <DSI_ShortWrite.constprop.0>

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8008868:	2300      	movs	r3, #0
 800886a:	7423      	strb	r3, [r4, #16]

  return status;
}
 800886c:	b003      	add	sp, #12
 800886e:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(hdsi);
 8008870:	2002      	movs	r0, #2
 8008872:	e7fb      	b.n	800886c <HAL_DSI_ShortWrite+0x1a>

08008874 <HAL_DSI_LongWrite>:
                                    uint32_t ChannelID,
                                    uint32_t Mode,
                                    uint32_t NbParams,
                                    uint32_t Param1,
                                    const uint8_t *ParametersTable)
{
 8008874:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008878:	461c      	mov	r4, r3
  uint32_t tickstart;
  uint32_t fifoword;
  const uint8_t *pparams = ParametersTable;

  /* Process locked */
  __HAL_LOCK(hdsi);
 800887a:	7c03      	ldrb	r3, [r0, #16]
{
 800887c:	4606      	mov	r6, r0
 800887e:	460f      	mov	r7, r1
  __HAL_LOCK(hdsi);
 8008880:	2b01      	cmp	r3, #1
{
 8008882:	4615      	mov	r5, r2
 8008884:	e9dd 980a 	ldrd	r9, r8, [sp, #40]	@ 0x28
  __HAL_LOCK(hdsi);
 8008888:	d052      	beq.n	8008930 <HAL_DSI_LongWrite+0xbc>
 800888a:	2301      	movs	r3, #1
 800888c:	7403      	strb	r3, [r0, #16]

  /* Check the parameters */
  assert_param(IS_DSI_LONG_WRITE_PACKET_TYPE(Mode));

  /* Get tick */
  tickstart = HAL_GetTick();
 800888e:	f7ff fa61 	bl	8007d54 <HAL_GetTick>
 8008892:	4683      	mov	fp, r0

  /* Wait for Command FIFO Empty */
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 8008894:	6832      	ldr	r2, [r6, #0]
 8008896:	6f53      	ldr	r3, [r2, #116]	@ 0x74
 8008898:	f013 0a01 	ands.w	sl, r3, #1
 800889c:	d019      	beq.n	80088d2 <HAL_DSI_LongWrite+0x5e>
    }
  }

  /* Set the DCS code on payload byte 1, and the other parameters on the write FIFO command*/
  fifoword = Param1;
  nbBytes = (NbParams < 3U) ? NbParams : 3U;
 800889e:	2c03      	cmp	r4, #3
 80088a0:	4620      	mov	r0, r4

  for (count = 0U; count < nbBytes; count++)
 80088a2:	f04f 0300 	mov.w	r3, #0
  nbBytes = (NbParams < 3U) ? NbParams : 3U;
 80088a6:	bf28      	it	cs
 80088a8:	2003      	movcs	r0, #3
  for (count = 0U; count < nbBytes; count++)
 80088aa:	4283      	cmp	r3, r0
 80088ac:	d11d      	bne.n	80088ea <HAL_DSI_LongWrite+0x76>
  {
    fifoword |= (((uint32_t)(*(pparams + count))) << (8U + (8U * count)));
  }
  hdsi->Instance->GPDR = fifoword;

  uicounter = NbParams - nbBytes;
 80088ae:	1ae0      	subs	r0, r4, r3
  pparams += nbBytes;
 80088b0:	4443      	add	r3, r8
  hdsi->Instance->GPDR = fifoword;
 80088b2:	f8c2 9070 	str.w	r9, [r2, #112]	@ 0x70
  /* Set the Next parameters on the write FIFO command*/
  while (uicounter != 0U)
 80088b6:	bb10      	cbnz	r0, 80088fe <HAL_DSI_LongWrite+0x8a>

  /* Configure the packet to send a long DCS command */
  DSI_ConfigPacketHeader(hdsi->Instance,
                         ChannelID,
                         Mode,
                         ((NbParams + 1U) & 0x00FFU),
 80088b8:	3401      	adds	r4, #1
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 80088ba:	ea45 1587 	orr.w	r5, r5, r7, lsl #6
 80088be:	0223      	lsls	r3, r4, #8
 80088c0:	0224      	lsls	r4, r4, #8
 80088c2:	b29b      	uxth	r3, r3
 80088c4:	f404 047f 	and.w	r4, r4, #16711680	@ 0xff0000
 80088c8:	431d      	orrs	r5, r3
 80088ca:	4325      	orrs	r5, r4
 80088cc:	66d5      	str	r5, [r2, #108]	@ 0x6c
                         (((NbParams + 1U) & 0xFF00U) >> 8U));

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80088ce:	7430      	strb	r0, [r6, #16]

  return HAL_OK;
 80088d0:	e009      	b.n	80088e6 <HAL_DSI_LongWrite+0x72>
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 80088d2:	f7ff fa3f 	bl	8007d54 <HAL_GetTick>
 80088d6:	eba0 000b 	sub.w	r0, r0, fp
 80088da:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 80088de:	d9d9      	bls.n	8008894 <HAL_DSI_LongWrite+0x20>
      return HAL_TIMEOUT;
 80088e0:	2003      	movs	r0, #3
      __HAL_UNLOCK(hdsi);
 80088e2:	f886 a010 	strb.w	sl, [r6, #16]
}
 80088e6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    fifoword |= (((uint32_t)(*(pparams + count))) << (8U + (8U * count)));
 80088ea:	f818 1003 	ldrb.w	r1, [r8, r3]
 80088ee:	3301      	adds	r3, #1
 80088f0:	ea4f 0cc3 	mov.w	ip, r3, lsl #3
 80088f4:	fa01 f10c 	lsl.w	r1, r1, ip
 80088f8:	ea49 0901 	orr.w	r9, r9, r1
  for (count = 0U; count < nbBytes; count++)
 80088fc:	e7d5      	b.n	80088aa <HAL_DSI_LongWrite+0x36>
    nbBytes = (uicounter < 4U) ? uicounter : 4U;
 80088fe:	2804      	cmp	r0, #4
    fifoword = 0U;
 8008900:	f04f 0c00 	mov.w	ip, #0
    nbBytes = (uicounter < 4U) ? uicounter : 4U;
 8008904:	4686      	mov	lr, r0
    for (count = 0U; count < nbBytes; count++)
 8008906:	4661      	mov	r1, ip
    nbBytes = (uicounter < 4U) ? uicounter : 4U;
 8008908:	bf28      	it	cs
 800890a:	f04f 0e04 	movcs.w	lr, #4
      fifoword |= (((uint32_t)(*(pparams + count))) << (8U * count));
 800890e:	f813 8001 	ldrb.w	r8, [r3, r1]
 8008912:	ea4f 09c1 	mov.w	r9, r1, lsl #3
    for (count = 0U; count < nbBytes; count++)
 8008916:	3101      	adds	r1, #1
      fifoword |= (((uint32_t)(*(pparams + count))) << (8U * count));
 8008918:	fa08 f809 	lsl.w	r8, r8, r9
    for (count = 0U; count < nbBytes; count++)
 800891c:	458e      	cmp	lr, r1
      fifoword |= (((uint32_t)(*(pparams + count))) << (8U * count));
 800891e:	ea4c 0c08 	orr.w	ip, ip, r8
    for (count = 0U; count < nbBytes; count++)
 8008922:	d1f4      	bne.n	800890e <HAL_DSI_LongWrite+0x9a>
    uicounter -= nbBytes;
 8008924:	eba0 000e 	sub.w	r0, r0, lr
    pparams += nbBytes;
 8008928:	4473      	add	r3, lr
    hdsi->Instance->GPDR = fifoword;
 800892a:	f8c2 c070 	str.w	ip, [r2, #112]	@ 0x70
    pparams += nbBytes;
 800892e:	e7c2      	b.n	80088b6 <HAL_DSI_LongWrite+0x42>
  __HAL_LOCK(hdsi);
 8008930:	2002      	movs	r0, #2
 8008932:	e7d8      	b.n	80088e6 <HAL_DSI_LongWrite+0x72>

08008934 <HAL_DSI_Read>:
                               uint8_t *Array,
                               uint32_t Size,
                               uint32_t Mode,
                               uint32_t DCSCmd,
                               uint8_t *ParametersTable)
{
 8008934:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008938:	461e      	mov	r6, r3
  uint32_t fifoword;
  uint32_t nbbytes;
  uint32_t count;

  /* Process locked */
  __HAL_LOCK(hdsi);
 800893a:	7c03      	ldrb	r3, [r0, #16]
{
 800893c:	4605      	mov	r5, r0
 800893e:	460c      	mov	r4, r1
  __HAL_LOCK(hdsi);
 8008940:	2b01      	cmp	r3, #1
{
 8008942:	4617      	mov	r7, r2
 8008944:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 8008948:	f8dd 8030 	ldr.w	r8, [sp, #48]	@ 0x30
  __HAL_LOCK(hdsi);
 800894c:	d06f      	beq.n	8008a2e <HAL_DSI_Read+0xfa>
 800894e:	2301      	movs	r3, #1

  /* Check the parameters */
  assert_param(IS_DSI_READ_PACKET_TYPE(Mode));

  if (datasize > 2U)
 8008950:	2e02      	cmp	r6, #2
  __HAL_LOCK(hdsi);
 8008952:	7403      	strb	r3, [r0, #16]
  if (datasize > 2U)
 8008954:	d90d      	bls.n	8008972 <HAL_DSI_Read+0x3e>
  {
    /* set max return packet size */
    if (DSI_ShortWrite(hdsi, ChannelNbr, DSI_MAX_RETURN_PKT_SIZE, ((datasize) & 0xFFU),
 8008956:	f3c6 2307 	ubfx	r3, r6, #8, #8
 800895a:	2237      	movs	r2, #55	@ 0x37
 800895c:	9300      	str	r3, [sp, #0]
 800895e:	b2f3      	uxtb	r3, r6
 8008960:	f7ff fbee 	bl	8008140 <DSI_ShortWrite.constprop.0>
 8008964:	b128      	cbz	r0, 8008972 <HAL_DSI_Read+0x3e>
                       (((datasize) >> 8U) & 0xFFU)) != HAL_OK)
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hdsi);
 8008966:	2300      	movs	r3, #0

      return HAL_ERROR;
 8008968:	2001      	movs	r0, #1
      __HAL_UNLOCK(hdsi);
 800896a:	742b      	strb	r3, [r5, #16]

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);

  return HAL_OK;
}
 800896c:	b003      	add	sp, #12
 800896e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  if (Mode == DSI_DCS_SHORT_PKT_READ)
 8008972:	f1b9 0f06 	cmp.w	r9, #6
 8008976:	d10f      	bne.n	8008998 <HAL_DSI_Read+0x64>
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 8008978:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, DCSCmd, 0U);
 800897a:	682a      	ldr	r2, [r5, #0]
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 800897c:	021b      	lsls	r3, r3, #8
 800897e:	ea43 1384 	orr.w	r3, r3, r4, lsl #6
 8008982:	f043 0306 	orr.w	r3, r3, #6
 8008986:	66d3      	str	r3, [r2, #108]	@ 0x6c
  tickstart = HAL_GetTick();
 8008988:	f7ff f9e4 	bl	8007d54 <HAL_GetTick>
 800898c:	4604      	mov	r4, r0
  while (((int32_t)(datasize)) > 0)
 800898e:	2e00      	cmp	r6, #0
 8008990:	dc27      	bgt.n	80089e2 <HAL_DSI_Read+0xae>
  __HAL_UNLOCK(hdsi);
 8008992:	2000      	movs	r0, #0
 8008994:	7428      	strb	r0, [r5, #16]
  return HAL_OK;
 8008996:	e7e9      	b.n	800896c <HAL_DSI_Read+0x38>
  else if (Mode == DSI_GEN_SHORT_PKT_READ_P0)
 8008998:	f1b9 0f04 	cmp.w	r9, #4
 800899c:	d105      	bne.n	80089aa <HAL_DSI_Read+0x76>
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 800899e:	01a4      	lsls	r4, r4, #6
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, 0U, 0U);
 80089a0:	682b      	ldr	r3, [r5, #0]
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 80089a2:	f044 0404 	orr.w	r4, r4, #4
 80089a6:	66dc      	str	r4, [r3, #108]	@ 0x6c
}
 80089a8:	e7ee      	b.n	8008988 <HAL_DSI_Read+0x54>
  else if (Mode == DSI_GEN_SHORT_PKT_READ_P1)
 80089aa:	f1b9 0f14 	cmp.w	r9, #20
 80089ae:	d108      	bne.n	80089c2 <HAL_DSI_Read+0x8e>
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, ParametersTable[0U], 0U);
 80089b0:	f898 2000 	ldrb.w	r2, [r8]
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 80089b4:	01a4      	lsls	r4, r4, #6
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, ParametersTable[0U], 0U);
 80089b6:	682b      	ldr	r3, [r5, #0]
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 80089b8:	ea44 2402 	orr.w	r4, r4, r2, lsl #8
 80089bc:	f044 0414 	orr.w	r4, r4, #20
 80089c0:	e7f1      	b.n	80089a6 <HAL_DSI_Read+0x72>
  else if (Mode == DSI_GEN_SHORT_PKT_READ_P2)
 80089c2:	f1b9 0f24 	cmp.w	r9, #36	@ 0x24
 80089c6:	d1ce      	bne.n	8008966 <HAL_DSI_Read+0x32>
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, ParametersTable[0U], ParametersTable[1U]);
 80089c8:	f898 2001 	ldrb.w	r2, [r8, #1]
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 80089cc:	01a4      	lsls	r4, r4, #6
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, ParametersTable[0U], ParametersTable[1U]);
 80089ce:	682b      	ldr	r3, [r5, #0]
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 80089d0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, ParametersTable[0U], ParametersTable[1U]);
 80089d4:	f898 2000 	ldrb.w	r2, [r8]
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 80089d8:	ea44 2402 	orr.w	r4, r4, r2, lsl #8
 80089dc:	f044 0424 	orr.w	r4, r4, #36	@ 0x24
 80089e0:	e7e1      	b.n	80089a6 <HAL_DSI_Read+0x72>
    if ((hdsi->Instance->GPSR & DSI_GPSR_PRDFE) == 0U)
 80089e2:	682a      	ldr	r2, [r5, #0]
 80089e4:	6f53      	ldr	r3, [r2, #116]	@ 0x74
 80089e6:	f013 0310 	ands.w	r3, r3, #16
 80089ea:	d10d      	bne.n	8008a08 <HAL_DSI_Read+0xd4>
      nbbytes = (datasize < 4U) ? datasize : 4U;
 80089ec:	2e04      	cmp	r6, #4
      fifoword = hdsi->Instance->GPDR;
 80089ee:	6f10      	ldr	r0, [r2, #112]	@ 0x70
      nbbytes = (datasize < 4U) ? datasize : 4U;
 80089f0:	4632      	mov	r2, r6
 80089f2:	bf28      	it	cs
 80089f4:	2204      	movcs	r2, #4
        *pdata = (uint8_t)(fifoword >> (8U * count));
 80089f6:	00d9      	lsls	r1, r3, #3
 80089f8:	fa20 f101 	lsr.w	r1, r0, r1
 80089fc:	54f9      	strb	r1, [r7, r3]
      for (count = 0U; count < nbbytes; count++)
 80089fe:	3301      	adds	r3, #1
 8008a00:	429a      	cmp	r2, r3
 8008a02:	d1f8      	bne.n	80089f6 <HAL_DSI_Read+0xc2>
        pdata++;
 8008a04:	4417      	add	r7, r2
        datasize--;
 8008a06:	1ab6      	subs	r6, r6, r2
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8008a08:	f7ff f9a4 	bl	8007d54 <HAL_GetTick>
 8008a0c:	1b00      	subs	r0, r0, r4
 8008a0e:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 8008a12:	d903      	bls.n	8008a1c <HAL_DSI_Read+0xe8>
      __HAL_UNLOCK(hdsi);
 8008a14:	2300      	movs	r3, #0
      return HAL_TIMEOUT;
 8008a16:	2003      	movs	r0, #3
      __HAL_UNLOCK(hdsi);
 8008a18:	742b      	strb	r3, [r5, #16]
      return HAL_TIMEOUT;
 8008a1a:	e7a7      	b.n	800896c <HAL_DSI_Read+0x38>
    if ((hdsi->Instance->GPSR & DSI_GPSR_RCB) == 0U)
 8008a1c:	682b      	ldr	r3, [r5, #0]
 8008a1e:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
 8008a20:	0652      	lsls	r2, r2, #25
 8008a22:	d4b4      	bmi.n	800898e <HAL_DSI_Read+0x5a>
      if ((hdsi->Instance->ISR[1U] & DSI_ISR1_PSE) == DSI_ISR1_PSE)
 8008a24:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8008a28:	069b      	lsls	r3, r3, #26
 8008a2a:	d49c      	bmi.n	8008966 <HAL_DSI_Read+0x32>
 8008a2c:	e7af      	b.n	800898e <HAL_DSI_Read+0x5a>
  __HAL_LOCK(hdsi);
 8008a2e:	2002      	movs	r0, #2
 8008a30:	e79c      	b.n	800896c <HAL_DSI_Read+0x38>

08008a32 <HAL_DSI_SetLowPowerRXFilter>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_SetLowPowerRXFilter(DSI_HandleTypeDef *hdsi, uint32_t Frequency)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 8008a32:	7c02      	ldrb	r2, [r0, #16]
{
 8008a34:	4603      	mov	r3, r0
  __HAL_LOCK(hdsi);
 8008a36:	2a01      	cmp	r2, #1
 8008a38:	d00f      	beq.n	8008a5a <HAL_DSI_SetLowPowerRXFilter+0x28>

  /* Low-Power RX low-pass Filtering Tuning */
  hdsi->Instance->WPCR[1U] &= ~DSI_WPCR1_LPRXFT;
 8008a3a:	6802      	ldr	r2, [r0, #0]
 8008a3c:	f8d2 041c 	ldr.w	r0, [r2, #1052]	@ 0x41c
 8008a40:	f020 60c0 	bic.w	r0, r0, #100663296	@ 0x6000000
 8008a44:	f8c2 041c 	str.w	r0, [r2, #1052]	@ 0x41c
  hdsi->Instance->WPCR[1U] |= Frequency << 25U;
 8008a48:	f8d2 041c 	ldr.w	r0, [r2, #1052]	@ 0x41c
 8008a4c:	ea40 6141 	orr.w	r1, r0, r1, lsl #25

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8008a50:	2000      	movs	r0, #0
  hdsi->Instance->WPCR[1U] |= Frequency << 25U;
 8008a52:	f8c2 141c 	str.w	r1, [r2, #1052]	@ 0x41c
  __HAL_UNLOCK(hdsi);
 8008a56:	7418      	strb	r0, [r3, #16]

  return HAL_OK;
 8008a58:	4770      	bx	lr
  __HAL_LOCK(hdsi);
 8008a5a:	2002      	movs	r0, #2
}
 8008a5c:	4770      	bx	lr
	...

08008a60 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008a60:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00U;
 8008a64:	2300      	movs	r3, #0
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008a66:	f8df 91c4 	ldr.w	r9, [pc, #452]	@ 8008c2c <HAL_GPIO_Init+0x1cc>
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8008a6a:	f04f 44b0 	mov.w	r4, #1476395008	@ 0x58000000
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8008a6e:	680a      	ldr	r2, [r1, #0]
 8008a70:	fa32 f503 	lsrs.w	r5, r2, r3
 8008a74:	d102      	bne.n	8008a7c <HAL_GPIO_Init+0x1c>
      }
    }

    position++;
  }
}
 8008a76:	b003      	add	sp, #12
 8008a78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8008a7c:	2501      	movs	r5, #1
 8008a7e:	fa05 f803 	lsl.w	r8, r5, r3
    if (iocurrent != 0x00U)
 8008a82:	ea18 0202 	ands.w	r2, r8, r2
 8008a86:	f000 80bb 	beq.w	8008c00 <HAL_GPIO_Init+0x1a0>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8008a8a:	684e      	ldr	r6, [r1, #4]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8008a8c:	2703      	movs	r7, #3
 8008a8e:	ea4f 0e43 	mov.w	lr, r3, lsl #1
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8008a92:	f006 0503 	and.w	r5, r6, #3
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8008a96:	fa07 fc0e 	lsl.w	ip, r7, lr
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8008a9a:	1e6f      	subs	r7, r5, #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8008a9c:	ea6f 0c0c 	mvn.w	ip, ip
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8008aa0:	2f01      	cmp	r7, #1
 8008aa2:	d834      	bhi.n	8008b0e <HAL_GPIO_Init+0xae>
        temp = GPIOx->OSPEEDR;
 8008aa4:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8008aa6:	ea07 0a0c 	and.w	sl, r7, ip
        temp |= (GPIO_Init->Speed << (position * 2U));
 8008aaa:	68cf      	ldr	r7, [r1, #12]
 8008aac:	fa07 f70e 	lsl.w	r7, r7, lr
 8008ab0:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->OSPEEDR = temp;
 8008ab4:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8008ab6:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8008ab8:	ea27 0808 	bic.w	r8, r7, r8
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8008abc:	f3c6 1700 	ubfx	r7, r6, #4, #1
 8008ac0:	409f      	lsls	r7, r3
 8008ac2:	ea47 0708 	orr.w	r7, r7, r8
        GPIOx->OTYPER = temp;
 8008ac6:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 8008ac8:	68c7      	ldr	r7, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008aca:	2d02      	cmp	r5, #2
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8008acc:	ea07 080c 	and.w	r8, r7, ip
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8008ad0:	688f      	ldr	r7, [r1, #8]
 8008ad2:	fa07 f70e 	lsl.w	r7, r7, lr
 8008ad6:	ea47 0708 	orr.w	r7, r7, r8
      GPIOx->PUPDR = temp;
 8008ada:	60c7      	str	r7, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008adc:	d119      	bne.n	8008b12 <HAL_GPIO_Init+0xb2>
        temp = GPIOx->AFR[position >> 3U];
 8008ade:	ea4f 08d3 	mov.w	r8, r3, lsr #3
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8008ae2:	f003 0a07 	and.w	sl, r3, #7
 8008ae6:	f04f 0b0f 	mov.w	fp, #15
 8008aea:	eb00 0888 	add.w	r8, r0, r8, lsl #2
 8008aee:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
        temp = GPIOx->AFR[position >> 3U];
 8008af2:	f8d8 7020 	ldr.w	r7, [r8, #32]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8008af6:	fa0b fb0a 	lsl.w	fp, fp, sl
 8008afa:	ea27 0b0b 	bic.w	fp, r7, fp
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8008afe:	690f      	ldr	r7, [r1, #16]
 8008b00:	fa07 f70a 	lsl.w	r7, r7, sl
 8008b04:	ea47 070b 	orr.w	r7, r7, fp
        GPIOx->AFR[position >> 3U] = temp;
 8008b08:	f8c8 7020 	str.w	r7, [r8, #32]
 8008b0c:	e001      	b.n	8008b12 <HAL_GPIO_Init+0xb2>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8008b0e:	2d03      	cmp	r5, #3
 8008b10:	d1da      	bne.n	8008ac8 <HAL_GPIO_Init+0x68>
      temp = GPIOx->MODER;
 8008b12:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8008b14:	fa05 f50e 	lsl.w	r5, r5, lr
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8008b18:	f416 3f40 	tst.w	r6, #196608	@ 0x30000
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8008b1c:	ea07 070c 	and.w	r7, r7, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8008b20:	ea45 0507 	orr.w	r5, r5, r7
      GPIOx->MODER = temp;
 8008b24:	6005      	str	r5, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8008b26:	d06b      	beq.n	8008c00 <HAL_GPIO_Init+0x1a0>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008b28:	f8d9 50f4 	ldr.w	r5, [r9, #244]	@ 0xf4
 8008b2c:	f023 0703 	bic.w	r7, r3, #3
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8008b30:	f003 0c03 	and.w	ip, r3, #3
 8008b34:	f04f 0e0f 	mov.w	lr, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008b38:	f045 0502 	orr.w	r5, r5, #2
 8008b3c:	f107 47b0 	add.w	r7, r7, #1476395008	@ 0x58000000
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8008b40:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008b44:	f8c9 50f4 	str.w	r5, [r9, #244]	@ 0xf4
 8008b48:	f507 6780 	add.w	r7, r7, #1024	@ 0x400
 8008b4c:	f8d9 50f4 	ldr.w	r5, [r9, #244]	@ 0xf4
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8008b50:	fa0e fe0c 	lsl.w	lr, lr, ip
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008b54:	f005 0502 	and.w	r5, r5, #2
 8008b58:	9501      	str	r5, [sp, #4]
 8008b5a:	9d01      	ldr	r5, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8008b5c:	68bd      	ldr	r5, [r7, #8]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8008b5e:	ea25 0e0e 	bic.w	lr, r5, lr
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8008b62:	4d31      	ldr	r5, [pc, #196]	@ (8008c28 <HAL_GPIO_Init+0x1c8>)
 8008b64:	42a8      	cmp	r0, r5
 8008b66:	d04d      	beq.n	8008c04 <HAL_GPIO_Init+0x1a4>
 8008b68:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8008b6c:	42a8      	cmp	r0, r5
 8008b6e:	d04b      	beq.n	8008c08 <HAL_GPIO_Init+0x1a8>
 8008b70:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8008b74:	42a8      	cmp	r0, r5
 8008b76:	d049      	beq.n	8008c0c <HAL_GPIO_Init+0x1ac>
 8008b78:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8008b7c:	42a8      	cmp	r0, r5
 8008b7e:	d047      	beq.n	8008c10 <HAL_GPIO_Init+0x1b0>
 8008b80:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8008b84:	42a8      	cmp	r0, r5
 8008b86:	d045      	beq.n	8008c14 <HAL_GPIO_Init+0x1b4>
 8008b88:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8008b8c:	42a8      	cmp	r0, r5
 8008b8e:	d043      	beq.n	8008c18 <HAL_GPIO_Init+0x1b8>
 8008b90:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8008b94:	42a8      	cmp	r0, r5
 8008b96:	d041      	beq.n	8008c1c <HAL_GPIO_Init+0x1bc>
 8008b98:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8008b9c:	42a8      	cmp	r0, r5
 8008b9e:	d03f      	beq.n	8008c20 <HAL_GPIO_Init+0x1c0>
 8008ba0:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8008ba4:	42a8      	cmp	r0, r5
 8008ba6:	d03d      	beq.n	8008c24 <HAL_GPIO_Init+0x1c4>
 8008ba8:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8008bac:	42a8      	cmp	r0, r5
 8008bae:	bf14      	ite	ne
 8008bb0:	250a      	movne	r5, #10
 8008bb2:	2509      	moveq	r5, #9
 8008bb4:	fa05 f50c 	lsl.w	r5, r5, ip
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8008bb8:	f416 1f80 	tst.w	r6, #1048576	@ 0x100000
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8008bbc:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 8008bc0:	60bd      	str	r5, [r7, #8]
        temp &= ~(iocurrent);
 8008bc2:	ea6f 0702 	mvn.w	r7, r2
        temp = EXTI->RTSR1;
 8008bc6:	6825      	ldr	r5, [r4, #0]
        temp &= ~(iocurrent);
 8008bc8:	bf0c      	ite	eq
 8008bca:	403d      	andeq	r5, r7
          temp |= iocurrent;
 8008bcc:	4315      	orrne	r5, r2
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8008bce:	f416 1f00 	tst.w	r6, #2097152	@ 0x200000
        EXTI->RTSR1 = temp;
 8008bd2:	6025      	str	r5, [r4, #0]
        temp = EXTI->FTSR1;
 8008bd4:	6865      	ldr	r5, [r4, #4]
        temp &= ~(iocurrent);
 8008bd6:	bf0c      	ite	eq
 8008bd8:	403d      	andeq	r5, r7
          temp |= iocurrent;
 8008bda:	4315      	orrne	r5, r2
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8008bdc:	f416 3f00 	tst.w	r6, #131072	@ 0x20000
        EXTI->FTSR1 = temp;
 8008be0:	6065      	str	r5, [r4, #4]
        temp = EXTI_CurrentCPU->EMR1;
 8008be2:	f8d4 5084 	ldr.w	r5, [r4, #132]	@ 0x84
        temp &= ~(iocurrent);
 8008be6:	bf0c      	ite	eq
 8008be8:	403d      	andeq	r5, r7
          temp |= iocurrent;
 8008bea:	4315      	orrne	r5, r2
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8008bec:	03f6      	lsls	r6, r6, #15
        EXTI_CurrentCPU->EMR1 = temp;
 8008bee:	f8c4 5084 	str.w	r5, [r4, #132]	@ 0x84
        temp = EXTI_CurrentCPU->IMR1;
 8008bf2:	f8d4 5080 	ldr.w	r5, [r4, #128]	@ 0x80
        temp &= ~(iocurrent);
 8008bf6:	bf54      	ite	pl
 8008bf8:	403d      	andpl	r5, r7
          temp |= iocurrent;
 8008bfa:	4315      	orrmi	r5, r2
        EXTI_CurrentCPU->IMR1 = temp;
 8008bfc:	f8c4 5080 	str.w	r5, [r4, #128]	@ 0x80
    position++;
 8008c00:	3301      	adds	r3, #1
 8008c02:	e734      	b.n	8008a6e <HAL_GPIO_Init+0xe>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8008c04:	2500      	movs	r5, #0
 8008c06:	e7d5      	b.n	8008bb4 <HAL_GPIO_Init+0x154>
 8008c08:	2501      	movs	r5, #1
 8008c0a:	e7d3      	b.n	8008bb4 <HAL_GPIO_Init+0x154>
 8008c0c:	2502      	movs	r5, #2
 8008c0e:	e7d1      	b.n	8008bb4 <HAL_GPIO_Init+0x154>
 8008c10:	2503      	movs	r5, #3
 8008c12:	e7cf      	b.n	8008bb4 <HAL_GPIO_Init+0x154>
 8008c14:	2504      	movs	r5, #4
 8008c16:	e7cd      	b.n	8008bb4 <HAL_GPIO_Init+0x154>
 8008c18:	2505      	movs	r5, #5
 8008c1a:	e7cb      	b.n	8008bb4 <HAL_GPIO_Init+0x154>
 8008c1c:	2506      	movs	r5, #6
 8008c1e:	e7c9      	b.n	8008bb4 <HAL_GPIO_Init+0x154>
 8008c20:	2507      	movs	r5, #7
 8008c22:	e7c7      	b.n	8008bb4 <HAL_GPIO_Init+0x154>
 8008c24:	2508      	movs	r5, #8
 8008c26:	e7c5      	b.n	8008bb4 <HAL_GPIO_Init+0x154>
 8008c28:	58020000 	.word	0x58020000
 8008c2c:	58024400 	.word	0x58024400

08008c30 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8008c30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00U;
 8008c34:	2200      	movs	r2, #0

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00U)
  {
    /* Get current io position */
    iocurrent = GPIO_Pin & (1UL << position) ;
 8008c36:	f04f 0a01 	mov.w	sl, #1
    if (iocurrent != 0x00U)
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      tmp = SYSCFG->EXTICR[position >> 2U];
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 8008c3a:	f04f 080f 	mov.w	r8, #15
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8008c3e:	f04f 0b03 	mov.w	fp, #3
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
 8008c42:	f04f 44b0 	mov.w	r4, #1476395008	@ 0x58000000
  while ((GPIO_Pin >> position) != 0x00U)
 8008c46:	fa31 f302 	lsrs.w	r3, r1, r2
 8008c4a:	d101      	bne.n	8008c50 <HAL_GPIO_DeInit+0x20>
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
    }

    position++;
  }
}
 8008c4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = GPIO_Pin & (1UL << position) ;
 8008c50:	fa0a fc02 	lsl.w	ip, sl, r2
    if (iocurrent != 0x00U)
 8008c54:	ea1c 0601 	ands.w	r6, ip, r1
 8008c58:	d070      	beq.n	8008d3c <HAL_GPIO_DeInit+0x10c>
      tmp = SYSCFG->EXTICR[position >> 2U];
 8008c5a:	f022 0503 	bic.w	r5, r2, #3
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 8008c5e:	f002 0703 	and.w	r7, r2, #3
 8008c62:	f105 45b0 	add.w	r5, r5, #1476395008	@ 0x58000000
 8008c66:	00bf      	lsls	r7, r7, #2
      tmp = SYSCFG->EXTICR[position >> 2U];
 8008c68:	f8d5 3408 	ldr.w	r3, [r5, #1032]	@ 0x408
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 8008c6c:	fa08 f907 	lsl.w	r9, r8, r7
 8008c70:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8008c74:	ea09 0e03 	and.w	lr, r9, r3
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8008c78:	4b3a      	ldr	r3, [pc, #232]	@ (8008d64 <HAL_GPIO_DeInit+0x134>)
 8008c7a:	4298      	cmp	r0, r3
 8008c7c:	d060      	beq.n	8008d40 <HAL_GPIO_DeInit+0x110>
 8008c7e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008c82:	4298      	cmp	r0, r3
 8008c84:	d05e      	beq.n	8008d44 <HAL_GPIO_DeInit+0x114>
 8008c86:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008c8a:	4298      	cmp	r0, r3
 8008c8c:	d05c      	beq.n	8008d48 <HAL_GPIO_DeInit+0x118>
 8008c8e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008c92:	4298      	cmp	r0, r3
 8008c94:	d05a      	beq.n	8008d4c <HAL_GPIO_DeInit+0x11c>
 8008c96:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008c9a:	4298      	cmp	r0, r3
 8008c9c:	d058      	beq.n	8008d50 <HAL_GPIO_DeInit+0x120>
 8008c9e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008ca2:	4298      	cmp	r0, r3
 8008ca4:	d056      	beq.n	8008d54 <HAL_GPIO_DeInit+0x124>
 8008ca6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008caa:	4298      	cmp	r0, r3
 8008cac:	d054      	beq.n	8008d58 <HAL_GPIO_DeInit+0x128>
 8008cae:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008cb2:	4298      	cmp	r0, r3
 8008cb4:	d052      	beq.n	8008d5c <HAL_GPIO_DeInit+0x12c>
 8008cb6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008cba:	4298      	cmp	r0, r3
 8008cbc:	d050      	beq.n	8008d60 <HAL_GPIO_DeInit+0x130>
 8008cbe:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008cc2:	4298      	cmp	r0, r3
 8008cc4:	bf0c      	ite	eq
 8008cc6:	2309      	moveq	r3, #9
 8008cc8:	230a      	movne	r3, #10
 8008cca:	40bb      	lsls	r3, r7
 8008ccc:	4573      	cmp	r3, lr
 8008cce:	d117      	bne.n	8008d00 <HAL_GPIO_DeInit+0xd0>
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
 8008cd0:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 8008cd4:	ea23 0306 	bic.w	r3, r3, r6
 8008cd8:	f8c4 3080 	str.w	r3, [r4, #128]	@ 0x80
        EXTI_CurrentCPU->EMR1 &= ~(iocurrent);
 8008cdc:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 8008ce0:	ea23 0306 	bic.w	r3, r3, r6
 8008ce4:	f8c4 3084 	str.w	r3, [r4, #132]	@ 0x84
        EXTI->FTSR1 &= ~(iocurrent);
 8008ce8:	6863      	ldr	r3, [r4, #4]
 8008cea:	ea23 0306 	bic.w	r3, r3, r6
 8008cee:	6063      	str	r3, [r4, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 8008cf0:	6823      	ldr	r3, [r4, #0]
 8008cf2:	ea23 0306 	bic.w	r3, r3, r6
 8008cf6:	6023      	str	r3, [r4, #0]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8008cf8:	68ab      	ldr	r3, [r5, #8]
 8008cfa:	ea23 0309 	bic.w	r3, r3, r9
 8008cfe:	60ab      	str	r3, [r5, #8]
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8008d00:	0053      	lsls	r3, r2, #1
 8008d02:	6805      	ldr	r5, [r0, #0]
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 8008d04:	08d6      	lsrs	r6, r2, #3
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8008d06:	fa0b f303 	lsl.w	r3, fp, r3
 8008d0a:	eb00 0686 	add.w	r6, r0, r6, lsl #2
 8008d0e:	431d      	orrs	r5, r3
 8008d10:	6005      	str	r5, [r0, #0]
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 8008d12:	f002 0507 	and.w	r5, r2, #7
 8008d16:	6a37      	ldr	r7, [r6, #32]
 8008d18:	00ad      	lsls	r5, r5, #2
 8008d1a:	fa08 f505 	lsl.w	r5, r8, r5
 8008d1e:	ea27 0705 	bic.w	r7, r7, r5
 8008d22:	6237      	str	r7, [r6, #32]
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8008d24:	68c5      	ldr	r5, [r0, #12]
 8008d26:	ea25 0503 	bic.w	r5, r5, r3
 8008d2a:	60c5      	str	r5, [r0, #12]
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8008d2c:	6845      	ldr	r5, [r0, #4]
 8008d2e:	ea25 050c 	bic.w	r5, r5, ip
 8008d32:	6045      	str	r5, [r0, #4]
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8008d34:	6885      	ldr	r5, [r0, #8]
 8008d36:	ea25 0303 	bic.w	r3, r5, r3
 8008d3a:	6083      	str	r3, [r0, #8]
    position++;
 8008d3c:	3201      	adds	r2, #1
 8008d3e:	e782      	b.n	8008c46 <HAL_GPIO_DeInit+0x16>
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8008d40:	2300      	movs	r3, #0
 8008d42:	e7c2      	b.n	8008cca <HAL_GPIO_DeInit+0x9a>
 8008d44:	2301      	movs	r3, #1
 8008d46:	e7c0      	b.n	8008cca <HAL_GPIO_DeInit+0x9a>
 8008d48:	2302      	movs	r3, #2
 8008d4a:	e7be      	b.n	8008cca <HAL_GPIO_DeInit+0x9a>
 8008d4c:	2303      	movs	r3, #3
 8008d4e:	e7bc      	b.n	8008cca <HAL_GPIO_DeInit+0x9a>
 8008d50:	2304      	movs	r3, #4
 8008d52:	e7ba      	b.n	8008cca <HAL_GPIO_DeInit+0x9a>
 8008d54:	2305      	movs	r3, #5
 8008d56:	e7b8      	b.n	8008cca <HAL_GPIO_DeInit+0x9a>
 8008d58:	2306      	movs	r3, #6
 8008d5a:	e7b6      	b.n	8008cca <HAL_GPIO_DeInit+0x9a>
 8008d5c:	2307      	movs	r3, #7
 8008d5e:	e7b4      	b.n	8008cca <HAL_GPIO_DeInit+0x9a>
 8008d60:	2308      	movs	r3, #8
 8008d62:	e7b2      	b.n	8008cca <HAL_GPIO_DeInit+0x9a>
 8008d64:	58020000 	.word	0x58020000

08008d68 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8008d68:	6903      	ldr	r3, [r0, #16]
 8008d6a:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8008d6c:	bf14      	ite	ne
 8008d6e:	2001      	movne	r0, #1
 8008d70:	2000      	moveq	r0, #0
 8008d72:	4770      	bx	lr

08008d74 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8008d74:	b10a      	cbz	r2, 8008d7a <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8008d76:	6181      	str	r1, [r0, #24]
  }
}
 8008d78:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8008d7a:	0409      	lsls	r1, r1, #16
 8008d7c:	e7fb      	b.n	8008d76 <HAL_GPIO_WritePin+0x2>

08008d7e <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8008d7e:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8008d80:	ea01 0203 	and.w	r2, r1, r3
 8008d84:	ea21 0103 	bic.w	r1, r1, r3
 8008d88:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008d8c:	6181      	str	r1, [r0, #24]
}
 8008d8e:	4770      	bx	lr

08008d90 <HAL_HSEM_FastTake>:
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8008d90:	4b04      	ldr	r3, [pc, #16]	@ (8008da4 <HAL_HSEM_FastTake+0x14>)
 8008d92:	3020      	adds	r0, #32
 8008d94:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
}
 8008d98:	4b03      	ldr	r3, [pc, #12]	@ (8008da8 <HAL_HSEM_FastTake+0x18>)
 8008d9a:	1ac0      	subs	r0, r0, r3
 8008d9c:	bf18      	it	ne
 8008d9e:	2001      	movne	r0, #1
 8008da0:	4770      	bx	lr
 8008da2:	bf00      	nop
 8008da4:	58026400 	.word	0x58026400
 8008da8:	80000300 	.word	0x80000300

08008dac <HAL_HSEM_Release>:

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8008dac:	f441 7140 	orr.w	r1, r1, #768	@ 0x300
 8008db0:	4b01      	ldr	r3, [pc, #4]	@ (8008db8 <HAL_HSEM_Release+0xc>)
 8008db2:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
#endif

}
 8008db6:	4770      	bx	lr
 8008db8:	58026400 	.word	0x58026400

08008dbc <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8008dbc:	6803      	ldr	r3, [r0, #0]
 8008dbe:	699a      	ldr	r2, [r3, #24]
 8008dc0:	0791      	lsls	r1, r2, #30
 8008dc2:	d501      	bpl.n	8008dc8 <I2C_Flush_TXDR+0xc>
  {
    hi2c->Instance->TXDR = 0x00U;
 8008dc4:	2200      	movs	r2, #0
 8008dc6:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008dc8:	699a      	ldr	r2, [r3, #24]
 8008dca:	07d2      	lsls	r2, r2, #31
 8008dcc:	d403      	bmi.n	8008dd6 <I2C_Flush_TXDR+0x1a>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8008dce:	699a      	ldr	r2, [r3, #24]
 8008dd0:	f042 0201 	orr.w	r2, r2, #1
 8008dd4:	619a      	str	r2, [r3, #24]
  }
}
 8008dd6:	4770      	bx	lr

08008dd8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8008dd8:	b530      	push	{r4, r5, lr}
 8008dda:	9d03      	ldr	r5, [sp, #12]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8008ddc:	f3c1 0109 	ubfx	r1, r1, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8008de0:	6804      	ldr	r4, [r0, #0]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8008de2:	432b      	orrs	r3, r5
  MODIFY_REG(hi2c->Instance->CR2, \
 8008de4:	6860      	ldr	r0, [r4, #4]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8008de6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  MODIFY_REG(hi2c->Instance->CR2, \
 8008dea:	4a05      	ldr	r2, [pc, #20]	@ (8008e00 <I2C_TransferConfig+0x28>)
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8008dec:	430b      	orrs	r3, r1
  MODIFY_REG(hi2c->Instance->CR2, \
 8008dee:	ea42 5255 	orr.w	r2, r2, r5, lsr #21
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8008df2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
  MODIFY_REG(hi2c->Instance->CR2, \
 8008df6:	ea20 0002 	bic.w	r0, r0, r2
 8008dfa:	4303      	orrs	r3, r0
 8008dfc:	6063      	str	r3, [r4, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8008dfe:	bd30      	pop	{r4, r5, pc}
 8008e00:	03ff63ff 	.word	0x03ff63ff

08008e04 <I2C_IsErrorOccurred>:
  uint32_t itflag   = hi2c->Instance->ISR;
 8008e04:	6803      	ldr	r3, [r0, #0]
{
 8008e06:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t itflag   = hi2c->Instance->ISR;
 8008e0a:	699c      	ldr	r4, [r3, #24]
{
 8008e0c:	4605      	mov	r5, r0
 8008e0e:	460f      	mov	r7, r1
 8008e10:	4616      	mov	r6, r2
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8008e12:	f014 0410 	ands.w	r4, r4, #16
 8008e16:	d06f      	beq.n	8008ef8 <I2C_IsErrorOccurred+0xf4>
  uint32_t error_code = 0;
 8008e18:	2400      	movs	r4, #0
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008e1a:	2210      	movs	r2, #16
  HAL_StatusTypeDef status = HAL_OK;
 8008e1c:	46a0      	mov	r8, r4
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008e1e:	61da      	str	r2, [r3, #28]
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8008e20:	682b      	ldr	r3, [r5, #0]
 8008e22:	699a      	ldr	r2, [r3, #24]
 8008e24:	0690      	lsls	r0, r2, #26
 8008e26:	d461      	bmi.n	8008eec <I2C_IsErrorOccurred+0xe8>
 8008e28:	f1b8 0f00 	cmp.w	r8, #0
 8008e2c:	d035      	beq.n	8008e9a <I2C_IsErrorOccurred+0x96>
    error_code |= HAL_I2C_ERROR_AF;
 8008e2e:	f044 0404 	orr.w	r4, r4, #4
    status = HAL_ERROR;
 8008e32:	2001      	movs	r0, #1
  itflag = hi2c->Instance->ISR;
 8008e34:	682e      	ldr	r6, [r5, #0]
 8008e36:	69b3      	ldr	r3, [r6, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8008e38:	05d9      	lsls	r1, r3, #23
 8008e3a:	d505      	bpl.n	8008e48 <I2C_IsErrorOccurred+0x44>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8008e3c:	f44f 7280 	mov.w	r2, #256	@ 0x100
    error_code |= HAL_I2C_ERROR_BERR;
 8008e40:	f044 0401 	orr.w	r4, r4, #1
    status = HAL_ERROR;
 8008e44:	2001      	movs	r0, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8008e46:	61f2      	str	r2, [r6, #28]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8008e48:	055a      	lsls	r2, r3, #21
 8008e4a:	d505      	bpl.n	8008e58 <I2C_IsErrorOccurred+0x54>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8008e4c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
    error_code |= HAL_I2C_ERROR_OVR;
 8008e50:	f044 0408 	orr.w	r4, r4, #8
    status = HAL_ERROR;
 8008e54:	2001      	movs	r0, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8008e56:	61f2      	str	r2, [r6, #28]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8008e58:	059b      	lsls	r3, r3, #22
 8008e5a:	d54f      	bpl.n	8008efc <I2C_IsErrorOccurred+0xf8>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8008e5c:	f44f 7300 	mov.w	r3, #512	@ 0x200
    error_code |= HAL_I2C_ERROR_ARLO;
 8008e60:	f044 0402 	orr.w	r4, r4, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8008e64:	61f3      	str	r3, [r6, #28]
    I2C_Flush_TXDR(hi2c);
 8008e66:	4628      	mov	r0, r5
 8008e68:	f7ff ffa8 	bl	8008dbc <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 8008e6c:	6873      	ldr	r3, [r6, #4]
    __HAL_UNLOCK(hi2c);
 8008e6e:	2001      	movs	r0, #1
    I2C_RESET_CR2(hi2c);
 8008e70:	f023 73ff 	bic.w	r3, r3, #33423360	@ 0x1fe0000
 8008e74:	f423 338b 	bic.w	r3, r3, #71168	@ 0x11600
 8008e78:	f423 73ff 	bic.w	r3, r3, #510	@ 0x1fe
 8008e7c:	f023 0301 	bic.w	r3, r3, #1
 8008e80:	6073      	str	r3, [r6, #4]
    hi2c->ErrorCode |= error_code;
 8008e82:	6c6b      	ldr	r3, [r5, #68]	@ 0x44
 8008e84:	4323      	orrs	r3, r4
 8008e86:	646b      	str	r3, [r5, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8008e88:	2320      	movs	r3, #32
 8008e8a:	f885 3041 	strb.w	r3, [r5, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008e8e:	2300      	movs	r3, #0
 8008e90:	f885 3042 	strb.w	r3, [r5, #66]	@ 0x42
    __HAL_UNLOCK(hi2c);
 8008e94:	f885 3040 	strb.w	r3, [r5, #64]	@ 0x40
 8008e98:	e032      	b.n	8008f00 <I2C_IsErrorOccurred+0xfc>
      if (Timeout != HAL_MAX_DELAY)
 8008e9a:	1c7a      	adds	r2, r7, #1
 8008e9c:	d0c1      	beq.n	8008e22 <I2C_IsErrorOccurred+0x1e>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8008e9e:	f7fe ff59 	bl	8007d54 <HAL_GetTick>
 8008ea2:	1b80      	subs	r0, r0, r6
 8008ea4:	42b8      	cmp	r0, r7
 8008ea6:	d801      	bhi.n	8008eac <I2C_IsErrorOccurred+0xa8>
 8008ea8:	2f00      	cmp	r7, #0
 8008eaa:	d1b9      	bne.n	8008e20 <I2C_IsErrorOccurred+0x1c>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8008eac:	682b      	ldr	r3, [r5, #0]
 8008eae:	6859      	ldr	r1, [r3, #4]
          tmp2 = hi2c->Mode;
 8008eb0:	f895 2042 	ldrb.w	r2, [r5, #66]	@ 0x42
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8008eb4:	6998      	ldr	r0, [r3, #24]
          tmp2 = hi2c->Mode;
 8008eb6:	b2d2      	uxtb	r2, r2
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8008eb8:	0400      	lsls	r0, r0, #16
 8008eba:	d50a      	bpl.n	8008ed2 <I2C_IsErrorOccurred+0xce>
 8008ebc:	0449      	lsls	r1, r1, #17
 8008ebe:	d408      	bmi.n	8008ed2 <I2C_IsErrorOccurred+0xce>
              (tmp1 != I2C_CR2_STOP) && \
 8008ec0:	2a20      	cmp	r2, #32
 8008ec2:	d006      	beq.n	8008ed2 <I2C_IsErrorOccurred+0xce>
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8008ec4:	685a      	ldr	r2, [r3, #4]
 8008ec6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008eca:	605a      	str	r2, [r3, #4]
            tickstart = HAL_GetTick();
 8008ecc:	f7fe ff42 	bl	8007d54 <HAL_GetTick>
 8008ed0:	4606      	mov	r6, r0
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008ed2:	682b      	ldr	r3, [r5, #0]
 8008ed4:	699b      	ldr	r3, [r3, #24]
 8008ed6:	069b      	lsls	r3, r3, #26
 8008ed8:	d4a2      	bmi.n	8008e20 <I2C_IsErrorOccurred+0x1c>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8008eda:	f7fe ff3b 	bl	8007d54 <HAL_GetTick>
 8008ede:	1b80      	subs	r0, r0, r6
 8008ee0:	2819      	cmp	r0, #25
 8008ee2:	d9f6      	bls.n	8008ed2 <I2C_IsErrorOccurred+0xce>
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8008ee4:	2420      	movs	r4, #32
              status = HAL_ERROR;
 8008ee6:	f04f 0801 	mov.w	r8, #1
 8008eea:	e799      	b.n	8008e20 <I2C_IsErrorOccurred+0x1c>
    if (status == HAL_OK)
 8008eec:	f1b8 0f00 	cmp.w	r8, #0
 8008ef0:	d19d      	bne.n	8008e2e <I2C_IsErrorOccurred+0x2a>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008ef2:	2220      	movs	r2, #32
 8008ef4:	61da      	str	r2, [r3, #28]
 8008ef6:	e79a      	b.n	8008e2e <I2C_IsErrorOccurred+0x2a>
  HAL_StatusTypeDef status = HAL_OK;
 8008ef8:	4620      	mov	r0, r4
 8008efa:	e79b      	b.n	8008e34 <I2C_IsErrorOccurred+0x30>
  if (status != HAL_OK)
 8008efc:	2800      	cmp	r0, #0
 8008efe:	d1b2      	bne.n	8008e66 <I2C_IsErrorOccurred+0x62>
}
 8008f00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08008f04 <I2C_WaitOnTXISFlagUntilTimeout>:
{
 8008f04:	b570      	push	{r4, r5, r6, lr}
 8008f06:	4604      	mov	r4, r0
 8008f08:	460d      	mov	r5, r1
 8008f0a:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8008f0c:	6823      	ldr	r3, [r4, #0]
 8008f0e:	699b      	ldr	r3, [r3, #24]
 8008f10:	079b      	lsls	r3, r3, #30
 8008f12:	d501      	bpl.n	8008f18 <I2C_WaitOnTXISFlagUntilTimeout+0x14>
  return HAL_OK;
 8008f14:	2000      	movs	r0, #0
 8008f16:	e01f      	b.n	8008f58 <I2C_WaitOnTXISFlagUntilTimeout+0x54>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8008f18:	4632      	mov	r2, r6
 8008f1a:	4629      	mov	r1, r5
 8008f1c:	4620      	mov	r0, r4
 8008f1e:	f7ff ff71 	bl	8008e04 <I2C_IsErrorOccurred>
 8008f22:	b9c0      	cbnz	r0, 8008f56 <I2C_WaitOnTXISFlagUntilTimeout+0x52>
    if (Timeout != HAL_MAX_DELAY)
 8008f24:	1c6a      	adds	r2, r5, #1
 8008f26:	d0f1      	beq.n	8008f0c <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008f28:	f7fe ff14 	bl	8007d54 <HAL_GetTick>
 8008f2c:	1b80      	subs	r0, r0, r6
 8008f2e:	42a8      	cmp	r0, r5
 8008f30:	d801      	bhi.n	8008f36 <I2C_WaitOnTXISFlagUntilTimeout+0x32>
 8008f32:	2d00      	cmp	r5, #0
 8008f34:	d1ea      	bne.n	8008f0c <I2C_WaitOnTXISFlagUntilTimeout+0x8>
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8008f36:	6823      	ldr	r3, [r4, #0]
 8008f38:	699b      	ldr	r3, [r3, #24]
 8008f3a:	f013 0302 	ands.w	r3, r3, #2
 8008f3e:	d1e5      	bne.n	8008f0c <I2C_WaitOnTXISFlagUntilTimeout+0x8>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008f40:	6c62      	ldr	r2, [r4, #68]	@ 0x44
          __HAL_UNLOCK(hi2c);
 8008f42:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008f46:	f042 0220 	orr.w	r2, r2, #32
 8008f4a:	6462      	str	r2, [r4, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8008f4c:	2220      	movs	r2, #32
 8008f4e:	f884 2041 	strb.w	r2, [r4, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8008f52:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
      return HAL_ERROR;
 8008f56:	2001      	movs	r0, #1
}
 8008f58:	bd70      	pop	{r4, r5, r6, pc}

08008f5a <I2C_WaitOnFlagUntilTimeout>:
{
 8008f5a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008f5e:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8008f62:	4604      	mov	r4, r0
 8008f64:	460f      	mov	r7, r1
 8008f66:	4616      	mov	r6, r2
 8008f68:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008f6a:	6823      	ldr	r3, [r4, #0]
 8008f6c:	699b      	ldr	r3, [r3, #24]
 8008f6e:	ea37 0303 	bics.w	r3, r7, r3
 8008f72:	bf0c      	ite	eq
 8008f74:	2301      	moveq	r3, #1
 8008f76:	2300      	movne	r3, #0
 8008f78:	42b3      	cmp	r3, r6
 8008f7a:	d001      	beq.n	8008f80 <I2C_WaitOnFlagUntilTimeout+0x26>
  return HAL_OK;
 8008f7c:	2000      	movs	r0, #0
 8008f7e:	e025      	b.n	8008fcc <I2C_WaitOnFlagUntilTimeout+0x72>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8008f80:	4642      	mov	r2, r8
 8008f82:	4629      	mov	r1, r5
 8008f84:	4620      	mov	r0, r4
 8008f86:	f7ff ff3d 	bl	8008e04 <I2C_IsErrorOccurred>
 8008f8a:	b9f0      	cbnz	r0, 8008fca <I2C_WaitOnFlagUntilTimeout+0x70>
    if (Timeout != HAL_MAX_DELAY)
 8008f8c:	1c6b      	adds	r3, r5, #1
 8008f8e:	d0ec      	beq.n	8008f6a <I2C_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008f90:	f7fe fee0 	bl	8007d54 <HAL_GetTick>
 8008f94:	eba0 0008 	sub.w	r0, r0, r8
 8008f98:	42a8      	cmp	r0, r5
 8008f9a:	d801      	bhi.n	8008fa0 <I2C_WaitOnFlagUntilTimeout+0x46>
 8008f9c:	2d00      	cmp	r5, #0
 8008f9e:	d1e4      	bne.n	8008f6a <I2C_WaitOnFlagUntilTimeout+0x10>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8008fa0:	6823      	ldr	r3, [r4, #0]
 8008fa2:	699b      	ldr	r3, [r3, #24]
 8008fa4:	ea37 0303 	bics.w	r3, r7, r3
 8008fa8:	bf0c      	ite	eq
 8008faa:	2301      	moveq	r3, #1
 8008fac:	2300      	movne	r3, #0
 8008fae:	42b3      	cmp	r3, r6
 8008fb0:	d1db      	bne.n	8008f6a <I2C_WaitOnFlagUntilTimeout+0x10>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008fb2:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8008fb4:	f043 0320 	orr.w	r3, r3, #32
 8008fb8:	6463      	str	r3, [r4, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8008fba:	2320      	movs	r3, #32
 8008fbc:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8008fc0:	2300      	movs	r3, #0
 8008fc2:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
          __HAL_UNLOCK(hi2c);
 8008fc6:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
      return HAL_ERROR;
 8008fca:	2001      	movs	r0, #1
}
 8008fcc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08008fd0 <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 8008fd0:	b570      	push	{r4, r5, r6, lr}
 8008fd2:	4604      	mov	r4, r0
 8008fd4:	460d      	mov	r5, r1
 8008fd6:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008fd8:	6823      	ldr	r3, [r4, #0]
 8008fda:	699b      	ldr	r3, [r3, #24]
 8008fdc:	069b      	lsls	r3, r3, #26
 8008fde:	d501      	bpl.n	8008fe4 <I2C_WaitOnSTOPFlagUntilTimeout+0x14>
  return HAL_OK;
 8008fe0:	2000      	movs	r0, #0
 8008fe2:	e01d      	b.n	8009020 <I2C_WaitOnSTOPFlagUntilTimeout+0x50>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8008fe4:	4632      	mov	r2, r6
 8008fe6:	4629      	mov	r1, r5
 8008fe8:	4620      	mov	r0, r4
 8008fea:	f7ff ff0b 	bl	8008e04 <I2C_IsErrorOccurred>
 8008fee:	b9b0      	cbnz	r0, 800901e <I2C_WaitOnSTOPFlagUntilTimeout+0x4e>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008ff0:	f7fe feb0 	bl	8007d54 <HAL_GetTick>
 8008ff4:	1b80      	subs	r0, r0, r6
 8008ff6:	42a8      	cmp	r0, r5
 8008ff8:	d801      	bhi.n	8008ffe <I2C_WaitOnSTOPFlagUntilTimeout+0x2e>
 8008ffa:	2d00      	cmp	r5, #0
 8008ffc:	d1ec      	bne.n	8008fd8 <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8008ffe:	6823      	ldr	r3, [r4, #0]
 8009000:	699b      	ldr	r3, [r3, #24]
 8009002:	f013 0320 	ands.w	r3, r3, #32
 8009006:	d1e7      	bne.n	8008fd8 <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009008:	6c62      	ldr	r2, [r4, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 800900a:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800900e:	f042 0220 	orr.w	r2, r2, #32
 8009012:	6462      	str	r2, [r4, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8009014:	2220      	movs	r2, #32
 8009016:	f884 2041 	strb.w	r2, [r4, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800901a:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
      return HAL_ERROR;
 800901e:	2001      	movs	r0, #1
}
 8009020:	bd70      	pop	{r4, r5, r6, pc}

08009022 <HAL_I2C_MspInit>:
}
 8009022:	4770      	bx	lr

08009024 <HAL_I2C_Init>:
{
 8009024:	b510      	push	{r4, lr}
  if (hi2c == NULL)
 8009026:	4604      	mov	r4, r0
 8009028:	2800      	cmp	r0, #0
 800902a:	d04e      	beq.n	80090ca <HAL_I2C_Init+0xa6>
  if (hi2c->State == HAL_I2C_STATE_RESET)
 800902c:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 8009030:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8009034:	b91b      	cbnz	r3, 800903e <HAL_I2C_Init+0x1a>
    hi2c->Lock = HAL_UNLOCKED;
 8009036:	f880 2040 	strb.w	r2, [r0, #64]	@ 0x40
    HAL_I2C_MspInit(hi2c);
 800903a:	f7ff fff2 	bl	8009022 <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 800903e:	2324      	movs	r3, #36	@ 0x24
 8009040:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  __HAL_I2C_DISABLE(hi2c);
 8009044:	6823      	ldr	r3, [r4, #0]
 8009046:	681a      	ldr	r2, [r3, #0]
 8009048:	f022 0201 	bic.w	r2, r2, #1
 800904c:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800904e:	6862      	ldr	r2, [r4, #4]
 8009050:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8009054:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8009056:	689a      	ldr	r2, [r3, #8]
 8009058:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800905c:	609a      	str	r2, [r3, #8]
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800905e:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8009062:	2901      	cmp	r1, #1
 8009064:	d106      	bne.n	8009074 <HAL_I2C_Init+0x50>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8009066:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800906a:	609a      	str	r2, [r3, #8]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800906c:	685a      	ldr	r2, [r3, #4]
 800906e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8009072:	e007      	b.n	8009084 <HAL_I2C_Init+0x60>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8009074:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8009078:	2902      	cmp	r1, #2
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800907a:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800907c:	d1f6      	bne.n	800906c <HAL_I2C_Init+0x48>
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800907e:	685a      	ldr	r2, [r3, #4]
 8009080:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8009084:	605a      	str	r2, [r3, #4]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009086:	2000      	movs	r0, #0
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8009088:	685a      	ldr	r2, [r3, #4]
 800908a:	f042 7200 	orr.w	r2, r2, #33554432	@ 0x2000000
 800908e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8009092:	605a      	str	r2, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8009094:	68da      	ldr	r2, [r3, #12]
 8009096:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800909a:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800909c:	e9d4 2104 	ldrd	r2, r1, [r4, #16]
 80090a0:	430a      	orrs	r2, r1
                          (hi2c->Init.OwnAddress2Masks << 8));
 80090a2:	69a1      	ldr	r1, [r4, #24]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80090a4:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80090a8:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80090aa:	e9d4 2107 	ldrd	r2, r1, [r4, #28]
 80090ae:	430a      	orrs	r2, r1
 80090b0:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 80090b2:	681a      	ldr	r2, [r3, #0]
 80090b4:	f042 0201 	orr.w	r2, r2, #1
 80090b8:	601a      	str	r2, [r3, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 80090ba:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80090bc:	6460      	str	r0, [r4, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80090be:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80090c2:	6320      	str	r0, [r4, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80090c4:	f884 0042 	strb.w	r0, [r4, #66]	@ 0x42
}
 80090c8:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80090ca:	2001      	movs	r0, #1
 80090cc:	e7fc      	b.n	80090c8 <HAL_I2C_Init+0xa4>

080090ce <HAL_I2C_MspDeInit>:
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
 80090ce:	4770      	bx	lr

080090d0 <HAL_I2C_DeInit>:
{
 80090d0:	b510      	push	{r4, lr}
  if (hi2c == NULL)
 80090d2:	4604      	mov	r4, r0
 80090d4:	b198      	cbz	r0, 80090fe <HAL_I2C_DeInit+0x2e>
  __HAL_I2C_DISABLE(hi2c);
 80090d6:	6802      	ldr	r2, [r0, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 80090d8:	2324      	movs	r3, #36	@ 0x24
 80090da:	f880 3041 	strb.w	r3, [r0, #65]	@ 0x41
  __HAL_I2C_DISABLE(hi2c);
 80090de:	6813      	ldr	r3, [r2, #0]
 80090e0:	f023 0301 	bic.w	r3, r3, #1
 80090e4:	6013      	str	r3, [r2, #0]
  HAL_I2C_MspDeInit(hi2c);
 80090e6:	f7ff fff2 	bl	80090ce <HAL_I2C_MspDeInit>
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80090ea:	2000      	movs	r0, #0
 80090ec:	6460      	str	r0, [r4, #68]	@ 0x44
  __HAL_UNLOCK(hi2c);
 80090ee:	f884 0040 	strb.w	r0, [r4, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_RESET;
 80090f2:	f884 0041 	strb.w	r0, [r4, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80090f6:	6320      	str	r0, [r4, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80090f8:	f884 0042 	strb.w	r0, [r4, #66]	@ 0x42
}
 80090fc:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80090fe:	2001      	movs	r0, #1
 8009100:	e7fc      	b.n	80090fc <HAL_I2C_DeInit+0x2c>
	...

08009104 <HAL_I2C_Mem_Write>:
{
 8009104:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009108:	4699      	mov	r9, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 800910a:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
{
 800910e:	4604      	mov	r4, r0
 8009110:	460f      	mov	r7, r1
  if (hi2c->State == HAL_I2C_STATE_READY)
 8009112:	2b20      	cmp	r3, #32
{
 8009114:	4616      	mov	r6, r2
 8009116:	f8bd a034 	ldrh.w	sl, [sp, #52]	@ 0x34
 800911a:	f8dd 8038 	ldr.w	r8, [sp, #56]	@ 0x38
  if (hi2c->State == HAL_I2C_STATE_READY)
 800911e:	f040 80c6 	bne.w	80092ae <HAL_I2C_Mem_Write+0x1aa>
    if ((pData == NULL) || (Size == 0U))
 8009122:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009124:	b113      	cbz	r3, 800912c <HAL_I2C_Mem_Write+0x28>
 8009126:	f1ba 0f00 	cmp.w	sl, #0
 800912a:	d106      	bne.n	800913a <HAL_I2C_Mem_Write+0x36>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800912c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009130:	6463      	str	r3, [r4, #68]	@ 0x44
      return  HAL_ERROR;
 8009132:	2001      	movs	r0, #1
}
 8009134:	b003      	add	sp, #12
 8009136:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 800913a:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 800913e:	2b01      	cmp	r3, #1
 8009140:	f000 80b5 	beq.w	80092ae <HAL_I2C_Mem_Write+0x1aa>
 8009144:	f04f 0b01 	mov.w	fp, #1
 8009148:	f880 b040 	strb.w	fp, [r0, #64]	@ 0x40
    tickstart = HAL_GetTick();
 800914c:	f7fe fe02 	bl	8007d54 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8009150:	2319      	movs	r3, #25
    tickstart = HAL_GetTick();
 8009152:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8009154:	9000      	str	r0, [sp, #0]
 8009156:	465a      	mov	r2, fp
 8009158:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800915c:	4620      	mov	r0, r4
 800915e:	f7ff fefc 	bl	8008f5a <I2C_WaitOnFlagUntilTimeout>
 8009162:	2800      	cmp	r0, #0
 8009164:	d1e5      	bne.n	8009132 <HAL_I2C_Mem_Write+0x2e>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8009166:	2321      	movs	r3, #33	@ 0x21
    hi2c->XferISR   = NULL;
 8009168:	6360      	str	r0, [r4, #52]	@ 0x34
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800916a:	fa5f f289 	uxtb.w	r2, r9
 800916e:	4639      	mov	r1, r7
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8009170:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8009174:	2340      	movs	r3, #64	@ 0x40
 8009176:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
    hi2c->pBuffPtr  = pData;
 800917a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800917c:	6460      	str	r0, [r4, #68]	@ 0x44
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800917e:	4620      	mov	r0, r4
    hi2c->pBuffPtr  = pData;
 8009180:	6263      	str	r3, [r4, #36]	@ 0x24
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8009182:	4b4c      	ldr	r3, [pc, #304]	@ (80092b4 <HAL_I2C_Mem_Write+0x1b0>)
    hi2c->XferCount = Size;
 8009184:	f8a4 a02a 	strh.w	sl, [r4, #42]	@ 0x2a
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8009188:	9300      	str	r3, [sp, #0]
 800918a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800918e:	f7ff fe23 	bl	8008dd8 <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009192:	462a      	mov	r2, r5
 8009194:	4641      	mov	r1, r8
 8009196:	4620      	mov	r0, r4
 8009198:	f7ff feb4 	bl	8008f04 <I2C_WaitOnTXISFlagUntilTimeout>
 800919c:	bb18      	cbnz	r0, 80091e6 <HAL_I2C_Mem_Write+0xe2>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800919e:	f1b9 0f01 	cmp.w	r9, #1
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80091a2:	6823      	ldr	r3, [r4, #0]
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80091a4:	d115      	bne.n	80091d2 <HAL_I2C_Mem_Write+0xce>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80091a6:	b2f6      	uxtb	r6, r6
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80091a8:	2200      	movs	r2, #0
 80091aa:	2180      	movs	r1, #128	@ 0x80
 80091ac:	4620      	mov	r0, r4
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80091ae:	629e      	str	r6, [r3, #40]	@ 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80091b0:	4643      	mov	r3, r8
 80091b2:	9500      	str	r5, [sp, #0]
 80091b4:	f7ff fed1 	bl	8008f5a <I2C_WaitOnFlagUntilTimeout>
 80091b8:	b9a8      	cbnz	r0, 80091e6 <HAL_I2C_Mem_Write+0xe2>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80091ba:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 80091bc:	b29b      	uxth	r3, r3
 80091be:	2bff      	cmp	r3, #255	@ 0xff
 80091c0:	d815      	bhi.n	80091ee <HAL_I2C_Mem_Write+0xea>
      hi2c->XferSize = hi2c->XferCount;
 80091c2:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80091c4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
      hi2c->XferSize = hi2c->XferCount;
 80091c8:	b292      	uxth	r2, r2
 80091ca:	8522      	strh	r2, [r4, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80091cc:	b2d2      	uxtb	r2, r2
 80091ce:	9000      	str	r0, [sp, #0]
 80091d0:	e012      	b.n	80091f8 <HAL_I2C_Mem_Write+0xf4>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80091d2:	0a32      	lsrs	r2, r6, #8
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80091d4:	4641      	mov	r1, r8
 80091d6:	4620      	mov	r0, r4
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80091d8:	629a      	str	r2, [r3, #40]	@ 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80091da:	462a      	mov	r2, r5
 80091dc:	f7ff fe92 	bl	8008f04 <I2C_WaitOnTXISFlagUntilTimeout>
 80091e0:	b908      	cbnz	r0, 80091e6 <HAL_I2C_Mem_Write+0xe2>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80091e2:	6823      	ldr	r3, [r4, #0]
 80091e4:	e7df      	b.n	80091a6 <HAL_I2C_Mem_Write+0xa2>
      __HAL_UNLOCK(hi2c);
 80091e6:	2300      	movs	r3, #0
 80091e8:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
      return HAL_ERROR;
 80091ec:	e7a1      	b.n	8009132 <HAL_I2C_Mem_Write+0x2e>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80091ee:	22ff      	movs	r2, #255	@ 0xff
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80091f0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80091f4:	8522      	strh	r2, [r4, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80091f6:	9000      	str	r0, [sp, #0]
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80091f8:	4639      	mov	r1, r7
 80091fa:	4620      	mov	r0, r4
 80091fc:	f7ff fdec 	bl	8008dd8 <I2C_TransferConfig>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009200:	462a      	mov	r2, r5
 8009202:	4641      	mov	r1, r8
 8009204:	4620      	mov	r0, r4
 8009206:	f7ff fe7d 	bl	8008f04 <I2C_WaitOnTXISFlagUntilTimeout>
 800920a:	2800      	cmp	r0, #0
 800920c:	d191      	bne.n	8009132 <HAL_I2C_Mem_Write+0x2e>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800920e:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8009210:	6822      	ldr	r2, [r4, #0]
 8009212:	f813 1b01 	ldrb.w	r1, [r3], #1
 8009216:	6291      	str	r1, [r2, #40]	@ 0x28
      hi2c->pBuffPtr++;
 8009218:	6263      	str	r3, [r4, #36]	@ 0x24
      hi2c->XferCount--;
 800921a:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 800921c:	8d22      	ldrh	r2, [r4, #40]	@ 0x28
      hi2c->XferCount--;
 800921e:	3b01      	subs	r3, #1
      hi2c->XferSize--;
 8009220:	3a01      	subs	r2, #1
      hi2c->XferCount--;
 8009222:	b29b      	uxth	r3, r3
      hi2c->XferSize--;
 8009224:	b292      	uxth	r2, r2
      hi2c->XferCount--;
 8009226:	8563      	strh	r3, [r4, #42]	@ 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8009228:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 800922a:	8522      	strh	r2, [r4, #40]	@ 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800922c:	b29b      	uxth	r3, r3
 800922e:	b1b3      	cbz	r3, 800925e <HAL_I2C_Mem_Write+0x15a>
 8009230:	b9aa      	cbnz	r2, 800925e <HAL_I2C_Mem_Write+0x15a>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8009232:	4643      	mov	r3, r8
 8009234:	2180      	movs	r1, #128	@ 0x80
 8009236:	4620      	mov	r0, r4
 8009238:	9500      	str	r5, [sp, #0]
 800923a:	f7ff fe8e 	bl	8008f5a <I2C_WaitOnFlagUntilTimeout>
 800923e:	2800      	cmp	r0, #0
 8009240:	f47f af77 	bne.w	8009132 <HAL_I2C_Mem_Write+0x2e>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009244:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8009246:	b29b      	uxth	r3, r3
 8009248:	2bff      	cmp	r3, #255	@ 0xff
 800924a:	d928      	bls.n	800929e <HAL_I2C_Mem_Write+0x19a>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800924c:	22ff      	movs	r2, #255	@ 0xff
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800924e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8009252:	8522      	strh	r2, [r4, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8009254:	9000      	str	r0, [sp, #0]
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8009256:	4639      	mov	r1, r7
 8009258:	4620      	mov	r0, r4
 800925a:	f7ff fdbd 	bl	8008dd8 <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
 800925e:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8009260:	b29b      	uxth	r3, r3
 8009262:	2b00      	cmp	r3, #0
 8009264:	d1cc      	bne.n	8009200 <HAL_I2C_Mem_Write+0xfc>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009266:	462a      	mov	r2, r5
 8009268:	4641      	mov	r1, r8
 800926a:	4620      	mov	r0, r4
 800926c:	f7ff feb0 	bl	8008fd0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8009270:	2800      	cmp	r0, #0
 8009272:	f47f af5e 	bne.w	8009132 <HAL_I2C_Mem_Write+0x2e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009276:	6823      	ldr	r3, [r4, #0]
 8009278:	2120      	movs	r1, #32
 800927a:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 800927c:	685a      	ldr	r2, [r3, #4]
 800927e:	f022 72ff 	bic.w	r2, r2, #33423360	@ 0x1fe0000
 8009282:	f422 328b 	bic.w	r2, r2, #71168	@ 0x11600
 8009286:	f422 72ff 	bic.w	r2, r2, #510	@ 0x1fe
 800928a:	f022 0201 	bic.w	r2, r2, #1
 800928e:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8009290:	f884 1041 	strb.w	r1, [r4, #65]	@ 0x41
    __HAL_UNLOCK(hi2c);
 8009294:	f884 0040 	strb.w	r0, [r4, #64]	@ 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8009298:	f884 0042 	strb.w	r0, [r4, #66]	@ 0x42
    return HAL_OK;
 800929c:	e74a      	b.n	8009134 <HAL_I2C_Mem_Write+0x30>
          hi2c->XferSize = hi2c->XferCount;
 800929e:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80092a0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
          hi2c->XferSize = hi2c->XferCount;
 80092a4:	b292      	uxth	r2, r2
 80092a6:	8522      	strh	r2, [r4, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80092a8:	b2d2      	uxtb	r2, r2
 80092aa:	9000      	str	r0, [sp, #0]
 80092ac:	e7d3      	b.n	8009256 <HAL_I2C_Mem_Write+0x152>
    __HAL_LOCK(hi2c);
 80092ae:	2002      	movs	r0, #2
 80092b0:	e740      	b.n	8009134 <HAL_I2C_Mem_Write+0x30>
 80092b2:	bf00      	nop
 80092b4:	80002000 	.word	0x80002000

080092b8 <HAL_I2C_Mem_Read>:
{
 80092b8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80092bc:	4699      	mov	r9, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 80092be:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
{
 80092c2:	4604      	mov	r4, r0
 80092c4:	460f      	mov	r7, r1
  if (hi2c->State == HAL_I2C_STATE_READY)
 80092c6:	2b20      	cmp	r3, #32
{
 80092c8:	4616      	mov	r6, r2
 80092ca:	f8bd a034 	ldrh.w	sl, [sp, #52]	@ 0x34
 80092ce:	f8dd 8038 	ldr.w	r8, [sp, #56]	@ 0x38
  if (hi2c->State == HAL_I2C_STATE_READY)
 80092d2:	f040 80c9 	bne.w	8009468 <HAL_I2C_Mem_Read+0x1b0>
    if ((pData == NULL) || (Size == 0U))
 80092d6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80092d8:	b113      	cbz	r3, 80092e0 <HAL_I2C_Mem_Read+0x28>
 80092da:	f1ba 0f00 	cmp.w	sl, #0
 80092de:	d106      	bne.n	80092ee <HAL_I2C_Mem_Read+0x36>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80092e0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80092e4:	6463      	str	r3, [r4, #68]	@ 0x44
      return  HAL_ERROR;
 80092e6:	2001      	movs	r0, #1
}
 80092e8:	b003      	add	sp, #12
 80092ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 80092ee:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 80092f2:	2b01      	cmp	r3, #1
 80092f4:	f000 80b8 	beq.w	8009468 <HAL_I2C_Mem_Read+0x1b0>
 80092f8:	f04f 0b01 	mov.w	fp, #1
 80092fc:	f880 b040 	strb.w	fp, [r0, #64]	@ 0x40
    tickstart = HAL_GetTick();
 8009300:	f7fe fd28 	bl	8007d54 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8009304:	2319      	movs	r3, #25
 8009306:	9000      	str	r0, [sp, #0]
    tickstart = HAL_GetTick();
 8009308:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800930a:	465a      	mov	r2, fp
 800930c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8009310:	4620      	mov	r0, r4
 8009312:	f7ff fe22 	bl	8008f5a <I2C_WaitOnFlagUntilTimeout>
 8009316:	4603      	mov	r3, r0
 8009318:	2800      	cmp	r0, #0
 800931a:	d1e4      	bne.n	80092e6 <HAL_I2C_Mem_Read+0x2e>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800931c:	2222      	movs	r2, #34	@ 0x22
    hi2c->XferISR   = NULL;
 800931e:	6360      	str	r0, [r4, #52]	@ 0x34
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8009320:	4639      	mov	r1, r7
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8009322:	f884 2041 	strb.w	r2, [r4, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8009326:	2240      	movs	r2, #64	@ 0x40
 8009328:	f884 2042 	strb.w	r2, [r4, #66]	@ 0x42
    hi2c->pBuffPtr  = pData;
 800932c:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800932e:	6460      	str	r0, [r4, #68]	@ 0x44
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8009330:	4620      	mov	r0, r4
    hi2c->pBuffPtr  = pData;
 8009332:	6262      	str	r2, [r4, #36]	@ 0x24
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8009334:	4a4d      	ldr	r2, [pc, #308]	@ (800946c <HAL_I2C_Mem_Read+0x1b4>)
    hi2c->XferCount = Size;
 8009336:	f8a4 a02a 	strh.w	sl, [r4, #42]	@ 0x2a
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800933a:	9200      	str	r2, [sp, #0]
 800933c:	fa5f f289 	uxtb.w	r2, r9
 8009340:	f7ff fd4a 	bl	8008dd8 <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009344:	462a      	mov	r2, r5
 8009346:	4641      	mov	r1, r8
 8009348:	4620      	mov	r0, r4
 800934a:	f7ff fddb 	bl	8008f04 <I2C_WaitOnTXISFlagUntilTimeout>
 800934e:	bb20      	cbnz	r0, 800939a <HAL_I2C_Mem_Read+0xe2>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8009350:	f1b9 0f01 	cmp.w	r9, #1
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8009354:	6823      	ldr	r3, [r4, #0]
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8009356:	d116      	bne.n	8009386 <HAL_I2C_Mem_Read+0xce>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8009358:	b2f6      	uxtb	r6, r6
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800935a:	2200      	movs	r2, #0
 800935c:	2140      	movs	r1, #64	@ 0x40
 800935e:	4620      	mov	r0, r4
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8009360:	629e      	str	r6, [r3, #40]	@ 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8009362:	4643      	mov	r3, r8
 8009364:	9500      	str	r5, [sp, #0]
 8009366:	f7ff fdf8 	bl	8008f5a <I2C_WaitOnFlagUntilTimeout>
 800936a:	b9b0      	cbnz	r0, 800939a <HAL_I2C_Mem_Read+0xe2>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800936c:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 800936e:	b29b      	uxth	r3, r3
 8009370:	2bff      	cmp	r3, #255	@ 0xff
 8009372:	4b3f      	ldr	r3, [pc, #252]	@ (8009470 <HAL_I2C_Mem_Read+0x1b8>)
 8009374:	d815      	bhi.n	80093a2 <HAL_I2C_Mem_Read+0xea>
      hi2c->XferSize = hi2c->XferCount;
 8009376:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 8009378:	b292      	uxth	r2, r2
 800937a:	8522      	strh	r2, [r4, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800937c:	b2d2      	uxtb	r2, r2
 800937e:	9300      	str	r3, [sp, #0]
 8009380:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8009384:	e012      	b.n	80093ac <HAL_I2C_Mem_Read+0xf4>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8009386:	0a32      	lsrs	r2, r6, #8
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009388:	4641      	mov	r1, r8
 800938a:	4620      	mov	r0, r4
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800938c:	629a      	str	r2, [r3, #40]	@ 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800938e:	462a      	mov	r2, r5
 8009390:	f7ff fdb8 	bl	8008f04 <I2C_WaitOnTXISFlagUntilTimeout>
 8009394:	b908      	cbnz	r0, 800939a <HAL_I2C_Mem_Read+0xe2>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8009396:	6823      	ldr	r3, [r4, #0]
 8009398:	e7de      	b.n	8009358 <HAL_I2C_Mem_Read+0xa0>
      __HAL_UNLOCK(hi2c);
 800939a:	2300      	movs	r3, #0
 800939c:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
      return HAL_ERROR;
 80093a0:	e7a1      	b.n	80092e6 <HAL_I2C_Mem_Read+0x2e>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80093a2:	22ff      	movs	r2, #255	@ 0xff
 80093a4:	8522      	strh	r2, [r4, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80093a6:	9300      	str	r3, [sp, #0]
 80093a8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80093ac:	4639      	mov	r1, r7
 80093ae:	4620      	mov	r0, r4
 80093b0:	f7ff fd12 	bl	8008dd8 <I2C_TransferConfig>
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80093b4:	4643      	mov	r3, r8
 80093b6:	2200      	movs	r2, #0
 80093b8:	2104      	movs	r1, #4
 80093ba:	4620      	mov	r0, r4
 80093bc:	9500      	str	r5, [sp, #0]
 80093be:	f7ff fdcc 	bl	8008f5a <I2C_WaitOnFlagUntilTimeout>
 80093c2:	2800      	cmp	r0, #0
 80093c4:	d18f      	bne.n	80092e6 <HAL_I2C_Mem_Read+0x2e>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80093c6:	6823      	ldr	r3, [r4, #0]
 80093c8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80093ca:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80093cc:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 80093ce:	6a63      	ldr	r3, [r4, #36]	@ 0x24
      hi2c->XferSize--;
 80093d0:	8d22      	ldrh	r2, [r4, #40]	@ 0x28
      hi2c->pBuffPtr++;
 80093d2:	3301      	adds	r3, #1
      hi2c->XferSize--;
 80093d4:	3a01      	subs	r2, #1
      hi2c->pBuffPtr++;
 80093d6:	6263      	str	r3, [r4, #36]	@ 0x24
      hi2c->XferCount--;
 80093d8:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 80093da:	b292      	uxth	r2, r2
      hi2c->XferCount--;
 80093dc:	3b01      	subs	r3, #1
      hi2c->XferSize--;
 80093de:	8522      	strh	r2, [r4, #40]	@ 0x28
      hi2c->XferCount--;
 80093e0:	b29b      	uxth	r3, r3
 80093e2:	8563      	strh	r3, [r4, #42]	@ 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80093e4:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 80093e6:	b29b      	uxth	r3, r3
 80093e8:	b1b3      	cbz	r3, 8009418 <HAL_I2C_Mem_Read+0x160>
 80093ea:	b9aa      	cbnz	r2, 8009418 <HAL_I2C_Mem_Read+0x160>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80093ec:	4643      	mov	r3, r8
 80093ee:	2180      	movs	r1, #128	@ 0x80
 80093f0:	4620      	mov	r0, r4
 80093f2:	9500      	str	r5, [sp, #0]
 80093f4:	f7ff fdb1 	bl	8008f5a <I2C_WaitOnFlagUntilTimeout>
 80093f8:	2800      	cmp	r0, #0
 80093fa:	f47f af74 	bne.w	80092e6 <HAL_I2C_Mem_Read+0x2e>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80093fe:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8009400:	b29b      	uxth	r3, r3
 8009402:	2bff      	cmp	r3, #255	@ 0xff
 8009404:	d928      	bls.n	8009458 <HAL_I2C_Mem_Read+0x1a0>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8009406:	22ff      	movs	r2, #255	@ 0xff
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8009408:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800940c:	8522      	strh	r2, [r4, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800940e:	9000      	str	r0, [sp, #0]
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8009410:	4639      	mov	r1, r7
 8009412:	4620      	mov	r0, r4
 8009414:	f7ff fce0 	bl	8008dd8 <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
 8009418:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 800941a:	b29b      	uxth	r3, r3
 800941c:	2b00      	cmp	r3, #0
 800941e:	d1c9      	bne.n	80093b4 <HAL_I2C_Mem_Read+0xfc>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009420:	462a      	mov	r2, r5
 8009422:	4641      	mov	r1, r8
 8009424:	4620      	mov	r0, r4
 8009426:	f7ff fdd3 	bl	8008fd0 <I2C_WaitOnSTOPFlagUntilTimeout>
 800942a:	2800      	cmp	r0, #0
 800942c:	f47f af5b 	bne.w	80092e6 <HAL_I2C_Mem_Read+0x2e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009430:	6823      	ldr	r3, [r4, #0]
 8009432:	2120      	movs	r1, #32
 8009434:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8009436:	685a      	ldr	r2, [r3, #4]
 8009438:	f022 72ff 	bic.w	r2, r2, #33423360	@ 0x1fe0000
 800943c:	f422 328b 	bic.w	r2, r2, #71168	@ 0x11600
 8009440:	f422 72ff 	bic.w	r2, r2, #510	@ 0x1fe
 8009444:	f022 0201 	bic.w	r2, r2, #1
 8009448:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800944a:	f884 1041 	strb.w	r1, [r4, #65]	@ 0x41
    __HAL_UNLOCK(hi2c);
 800944e:	f884 0040 	strb.w	r0, [r4, #64]	@ 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8009452:	f884 0042 	strb.w	r0, [r4, #66]	@ 0x42
    return HAL_OK;
 8009456:	e747      	b.n	80092e8 <HAL_I2C_Mem_Read+0x30>
          hi2c->XferSize = hi2c->XferCount;
 8009458:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800945a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
          hi2c->XferSize = hi2c->XferCount;
 800945e:	b292      	uxth	r2, r2
 8009460:	8522      	strh	r2, [r4, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8009462:	b2d2      	uxtb	r2, r2
 8009464:	9000      	str	r0, [sp, #0]
 8009466:	e7d3      	b.n	8009410 <HAL_I2C_Mem_Read+0x158>
    __HAL_LOCK(hi2c);
 8009468:	2002      	movs	r0, #2
 800946a:	e73d      	b.n	80092e8 <HAL_I2C_Mem_Read+0x30>
 800946c:	80002000 	.word	0x80002000
 8009470:	80002400 	.word	0x80002400

08009474 <HAL_I2C_GetState>:
  return hi2c->State;
 8009474:	f890 0041 	ldrb.w	r0, [r0, #65]	@ 0x41
}
 8009478:	4770      	bx	lr

0800947a <HAL_I2C_GetError>:
  return hi2c->ErrorCode;
 800947a:	6c40      	ldr	r0, [r0, #68]	@ 0x44
}
 800947c:	4770      	bx	lr

0800947e <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800947e:	b510      	push	{r4, lr}
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009480:	f890 2041 	ldrb.w	r2, [r0, #65]	@ 0x41
{
 8009484:	4603      	mov	r3, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8009486:	2a20      	cmp	r2, #32
 8009488:	b2d4      	uxtb	r4, r2
 800948a:	d11c      	bne.n	80094c6 <HAL_I2CEx_ConfigAnalogFilter+0x48>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800948c:	f890 2040 	ldrb.w	r2, [r0, #64]	@ 0x40
 8009490:	2a01      	cmp	r2, #1
 8009492:	d018      	beq.n	80094c6 <HAL_I2CEx_ConfigAnalogFilter+0x48>

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009494:	2224      	movs	r2, #36	@ 0x24
 8009496:	f880 2041 	strb.w	r2, [r0, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800949a:	6802      	ldr	r2, [r0, #0]
 800949c:	6810      	ldr	r0, [r2, #0]
 800949e:	f020 0001 	bic.w	r0, r0, #1
 80094a2:	6010      	str	r0, [r2, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80094a4:	6810      	ldr	r0, [r2, #0]
 80094a6:	f420 5080 	bic.w	r0, r0, #4096	@ 0x1000
 80094aa:	6010      	str	r0, [r2, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80094ac:	6810      	ldr	r0, [r2, #0]
 80094ae:	4301      	orrs	r1, r0
    __HAL_I2C_ENABLE(hi2c);

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80094b0:	2000      	movs	r0, #0
    hi2c->Instance->CR1 |= AnalogFilter;
 80094b2:	6011      	str	r1, [r2, #0]
    __HAL_I2C_ENABLE(hi2c);
 80094b4:	6811      	ldr	r1, [r2, #0]
 80094b6:	f041 0101 	orr.w	r1, r1, #1
 80094ba:	6011      	str	r1, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 80094bc:	f883 4041 	strb.w	r4, [r3, #65]	@ 0x41
    __HAL_UNLOCK(hi2c);
 80094c0:	f883 0040 	strb.w	r0, [r3, #64]	@ 0x40
  }
  else
  {
    return HAL_BUSY;
  }
}
 80094c4:	bd10      	pop	{r4, pc}
    __HAL_LOCK(hi2c);
 80094c6:	2002      	movs	r0, #2
 80094c8:	e7fc      	b.n	80094c4 <HAL_I2CEx_ConfigAnalogFilter+0x46>

080094ca <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80094ca:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80094cc:	f890 2041 	ldrb.w	r2, [r0, #65]	@ 0x41
{
 80094d0:	4603      	mov	r3, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 80094d2:	2a20      	cmp	r2, #32
 80094d4:	b2d4      	uxtb	r4, r2
 80094d6:	d11b      	bne.n	8009510 <HAL_I2CEx_ConfigDigitalFilter+0x46>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80094d8:	f890 2040 	ldrb.w	r2, [r0, #64]	@ 0x40
 80094dc:	2a01      	cmp	r2, #1
 80094de:	d017      	beq.n	8009510 <HAL_I2CEx_ConfigDigitalFilter+0x46>

    hi2c->State = HAL_I2C_STATE_BUSY;
 80094e0:	2224      	movs	r2, #36	@ 0x24
 80094e2:	f880 2041 	strb.w	r2, [r0, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80094e6:	6802      	ldr	r2, [r0, #0]
 80094e8:	6810      	ldr	r0, [r2, #0]
 80094ea:	f020 0001 	bic.w	r0, r0, #1
 80094ee:	6010      	str	r0, [r2, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80094f0:	6810      	ldr	r0, [r2, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80094f2:	f420 6070 	bic.w	r0, r0, #3840	@ 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80094f6:	ea40 2101 	orr.w	r1, r0, r1, lsl #8
    __HAL_I2C_ENABLE(hi2c);

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80094fa:	2000      	movs	r0, #0
    hi2c->Instance->CR1 = tmpreg;
 80094fc:	6011      	str	r1, [r2, #0]
    __HAL_I2C_ENABLE(hi2c);
 80094fe:	6811      	ldr	r1, [r2, #0]
 8009500:	f041 0101 	orr.w	r1, r1, #1
 8009504:	6011      	str	r1, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8009506:	f883 4041 	strb.w	r4, [r3, #65]	@ 0x41
    __HAL_UNLOCK(hi2c);
 800950a:	f883 0040 	strb.w	r0, [r3, #64]	@ 0x40
  }
  else
  {
    return HAL_BUSY;
  }
}
 800950e:	bd10      	pop	{r4, pc}
    __HAL_LOCK(hi2c);
 8009510:	2002      	movs	r0, #2
 8009512:	e7fc      	b.n	800950e <HAL_I2CEx_ConfigDigitalFilter+0x44>

08009514 <JPEG_Bits_To_SizeCodes>:
  * @param  Huffcode pointer to codes table
  * @param  LastK pointer to last Coeff (table dimension)
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_Bits_To_SizeCodes(uint8_t *Bits, uint8_t *Huffsize, uint32_t *Huffcode, uint32_t *LastK)
{
 8009514:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Figure C.1: Generation of table of Huffman code sizes */
  p = 0;
  for (l = 0; l < 16UL; l++)
  {
    i = (uint32_t)Bits[l];
 8009516:	2401      	movs	r4, #1
 8009518:	7807      	ldrb	r7, [r0, #0]
  p = 0;
 800951a:	2500      	movs	r5, #0
 800951c:	194e      	adds	r6, r1, r5
 800951e:	443d      	add	r5, r7
 8009520:	194f      	adds	r7, r1, r5
    if ((p + i) > 256UL)
    {
      /* check for table overflow */
      return HAL_ERROR;
    }
    while (i != 0UL)
 8009522:	42be      	cmp	r6, r7
 8009524:	d112      	bne.n	800954c <JPEG_Bits_To_SizeCodes+0x38>
  for (l = 0; l < 16UL; l++)
 8009526:	2c10      	cmp	r4, #16
 8009528:	d108      	bne.n	800953c <JPEG_Bits_To_SizeCodes+0x28>
      Huffsize[p] = (uint8_t) l + 1U;
      p++;
      i--;
    }
  }
  Huffsize[p] = 0;
 800952a:	2400      	movs	r4, #0
    /* code must fit in "size" bits (si), no code is allowed to be all ones*/
    if(si > 31UL)
    {
      return HAL_ERROR;
    }
    if (((uint32_t) code) >= (((uint32_t) 1) << si))
 800952c:	2601      	movs	r6, #1
  Huffsize[p] = 0;
 800952e:	554c      	strb	r4, [r1, r5]
  *LastK = p;
 8009530:	601d      	str	r5, [r3, #0]
  p = 0;
 8009532:	4623      	mov	r3, r4
  si = Huffsize[0];
 8009534:	780d      	ldrb	r5, [r1, #0]
  while (Huffsize[p] != 0U)
 8009536:	5cc8      	ldrb	r0, [r1, r3]
 8009538:	b9d8      	cbnz	r0, 8009572 <JPEG_Bits_To_SizeCodes+0x5e>
    code <<= 1;
    si++;
  }
  /* Return function status */
  return HAL_OK;
}
 800953a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    i = (uint32_t)Bits[l];
 800953c:	5d07      	ldrb	r7, [r0, r4]
    if ((p + i) > 256UL)
 800953e:	3401      	adds	r4, #1
 8009540:	19ee      	adds	r6, r5, r7
 8009542:	f5b6 7f80 	cmp.w	r6, #256	@ 0x100
 8009546:	d9e9      	bls.n	800951c <JPEG_Bits_To_SizeCodes+0x8>
      return HAL_ERROR;
 8009548:	2001      	movs	r0, #1
 800954a:	e7f6      	b.n	800953a <JPEG_Bits_To_SizeCodes+0x26>
      Huffsize[p] = (uint8_t) l + 1U;
 800954c:	f806 4b01 	strb.w	r4, [r6], #1
      i--;
 8009550:	e7e7      	b.n	8009522 <JPEG_Bits_To_SizeCodes+0xe>
      Huffcode[p] = code;
 8009552:	f842 4023 	str.w	r4, [r2, r3, lsl #2]
      p++;
 8009556:	3301      	adds	r3, #1
    while (((uint32_t) Huffsize[p]) == si)
 8009558:	5cc8      	ldrb	r0, [r1, r3]
 800955a:	19dc      	adds	r4, r3, r7
 800955c:	42a8      	cmp	r0, r5
 800955e:	d0f8      	beq.n	8009552 <JPEG_Bits_To_SizeCodes+0x3e>
    if(si > 31UL)
 8009560:	2d1f      	cmp	r5, #31
 8009562:	d8f1      	bhi.n	8009548 <JPEG_Bits_To_SizeCodes+0x34>
    if (((uint32_t) code) >= (((uint32_t) 1) << si))
 8009564:	fa06 f005 	lsl.w	r0, r6, r5
 8009568:	42a0      	cmp	r0, r4
 800956a:	d9ed      	bls.n	8009548 <JPEG_Bits_To_SizeCodes+0x34>
    code <<= 1;
 800956c:	0064      	lsls	r4, r4, #1
    si++;
 800956e:	3501      	adds	r5, #1
 8009570:	e7e1      	b.n	8009536 <JPEG_Bits_To_SizeCodes+0x22>
 8009572:	1ae7      	subs	r7, r4, r3
 8009574:	e7f0      	b.n	8009558 <JPEG_Bits_To_SizeCodes+0x44>

08009576 <JPEG_DCHuff_BitsVals_To_SizeCodes>:
  * @param  DC_SizeCodesTable pointer to DC huffman Sizes/Codes table
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_DCHuff_BitsVals_To_SizeCodes(JPEG_DCHuffTableTypeDef *DC_BitsValsTable,
                                                           JPEG_DC_HuffCodeTableTypeDef *DC_SizeCodesTable)
{
 8009576:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009578:	f2ad 5d14 	subw	sp, sp, #1300	@ 0x514
 800957c:	460d      	mov	r5, r1
 800957e:	4604      	mov	r4, r0
  uint32_t k;
  uint32_t l;
  uint32_t lastK;
  uint8_t huffsize[257];
  uint32_t huffcode[257];
  error = JPEG_Bits_To_SizeCodes(DC_BitsValsTable->Bits, huffsize, huffcode, &lastK);
 8009580:	ab01      	add	r3, sp, #4
 8009582:	aa43      	add	r2, sp, #268	@ 0x10c
 8009584:	a902      	add	r1, sp, #8
 8009586:	f7ff ffc5 	bl	8009514 <JPEG_Bits_To_SizeCodes>
  if (error != HAL_OK)
 800958a:	b938      	cbnz	r0, 800959c <JPEG_DCHuff_BitsVals_To_SizeCodes+0x26>
 800958c:	9e01      	ldr	r6, [sp, #4]
 800958e:	460b      	mov	r3, r1
 8009590:	f104 010f 	add.w	r1, r4, #15
 8009594:	360f      	adds	r6, #15
 8009596:	4434      	add	r4, r6
    return  error;
  }
  /* Figure C.3: ordering procedure for encoding procedure code tables */
  k = 0;

  while (k < lastK)
 8009598:	42a1      	cmp	r1, r4
 800959a:	d102      	bne.n	80095a2 <JPEG_DCHuff_BitsVals_To_SizeCodes+0x2c>
    }
  }

  /* Return function status */
  return HAL_OK;
}
 800959c:	f20d 5d14 	addw	sp, sp, #1300	@ 0x514
 80095a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    l = DC_BitsValsTable->HuffVal[k];
 80095a2:	f811 6f01 	ldrb.w	r6, [r1, #1]!
    if (l >= JPEG_DC_HUFF_TABLE_SIZE)
 80095a6:	2e0b      	cmp	r6, #11
 80095a8:	d80a      	bhi.n	80095c0 <JPEG_DCHuff_BitsVals_To_SizeCodes+0x4a>
      DC_SizeCodesTable->HuffmanCode[l] = huffcode[k];
 80095aa:	eb05 0786 	add.w	r7, r5, r6, lsl #2
 80095ae:	f852 cb04 	ldr.w	ip, [r2], #4
 80095b2:	f8c7 c00c 	str.w	ip, [r7, #12]
      DC_SizeCodesTable->CodeLength[l] = huffsize[k] - 1U;
 80095b6:	f813 7b01 	ldrb.w	r7, [r3], #1
 80095ba:	3f01      	subs	r7, #1
 80095bc:	55af      	strb	r7, [r5, r6]
      k++;
 80095be:	e7eb      	b.n	8009598 <JPEG_DCHuff_BitsVals_To_SizeCodes+0x22>
      return HAL_ERROR; /* Huffman Table overflow error*/
 80095c0:	2001      	movs	r0, #1
 80095c2:	e7eb      	b.n	800959c <JPEG_DCHuff_BitsVals_To_SizeCodes+0x26>

080095c4 <JPEG_Set_HuffDC_Mem>:
  * @param  DCTableAddress Encoder DC huffman table address it could be HUFFENC_DC0 or HUFFENC_DC1.
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_Set_HuffDC_Mem(JPEG_HandleTypeDef *hjpeg, JPEG_DCHuffTableTypeDef *HuffTableDC,
                                             const __IO uint32_t *DCTableAddress)
{
 80095c4:	4603      	mov	r3, r0
 80095c6:	4608      	mov	r0, r1
 80095c8:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t i;
  uint32_t lsb;
  uint32_t msb;
  __IO uint32_t *address, *addressDef;

  if (DCTableAddress == (hjpeg->Instance->HUFFENC_DC0))
 80095ca:	681c      	ldr	r4, [r3, #0]
{
 80095cc:	b091      	sub	sp, #68	@ 0x44
  if (DCTableAddress == (hjpeg->Instance->HUFFENC_DC0))
 80095ce:	f504 63f8 	add.w	r3, r4, #1984	@ 0x7c0
 80095d2:	429a      	cmp	r2, r3
 80095d4:	d125      	bne.n	8009622 <JPEG_Set_HuffDC_Mem+0x5e>
  {
    address = (hjpeg->Instance->HUFFENC_DC0 + (JPEG_DC_HUFF_TABLE_SIZE / 2UL));
 80095d6:	f504 64fb 	add.w	r4, r4, #2008	@ 0x7d8
    return HAL_ERROR;
  }

  if (HuffTableDC != NULL)
  {
    error = JPEG_DCHuff_BitsVals_To_SizeCodes(HuffTableDC, &dcSizeCodesTable);
 80095da:	a901      	add	r1, sp, #4
 80095dc:	f7ff ffcb 	bl	8009576 <JPEG_DCHuff_BitsVals_To_SizeCodes>
    if (error != HAL_OK)
 80095e0:	b9e8      	cbnz	r0, 800961e <JPEG_Set_HuffDC_Mem+0x5a>
    {
      return  error;
    }
    addressDef = address;
    *addressDef = 0x0FFF0FFF;
 80095e2:	aa01      	add	r2, sp, #4
 80095e4:	f06f 23f0 	mvn.w	r3, #4026593280	@ 0xf000f000
 80095e8:	f1a4 0618 	sub.w	r6, r4, #24
    addressDef++;
    *addressDef = 0x0FFF0FFF;
 80095ec:	4615      	mov	r5, r2
    *addressDef = 0x0FFF0FFF;
 80095ee:	6023      	str	r3, [r4, #0]
    *addressDef = 0x0FFF0FFF;
 80095f0:	6063      	str	r3, [r4, #4]
    i = JPEG_DC_HUFF_TABLE_SIZE;
    while (i > 1UL)
    {
      i--;
      address --;
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 80095f2:	7ad1      	ldrb	r1, [r2, #11]
    while (i > 1UL)
 80095f4:	3d08      	subs	r5, #8
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 80095f6:	f895 3040 	ldrb.w	r3, [r5, #64]	@ 0x40
    while (i > 1UL)
 80095fa:	3a02      	subs	r2, #2
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 80095fc:	0209      	lsls	r1, r1, #8
                                                                                   0xFFUL);
      i--;
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 80095fe:	f895 703c 	ldrb.w	r7, [r5, #60]	@ 0x3c
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 8009602:	f401 6170 	and.w	r1, r1, #3840	@ 0xf00
 8009606:	4319      	orrs	r1, r3
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 8009608:	7b13      	ldrb	r3, [r2, #12]
 800960a:	021b      	lsls	r3, r3, #8
 800960c:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8009610:	433b      	orrs	r3, r7
                                                                                   0xFFUL);

      *address = lsb | (msb << 16);
 8009612:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8009616:	f844 3d04 	str.w	r3, [r4, #-4]!
    while (i > 1UL)
 800961a:	42b4      	cmp	r4, r6
 800961c:	d1e9      	bne.n	80095f2 <JPEG_Set_HuffDC_Mem+0x2e>
    }
  }

  /* Return function status */
  return HAL_OK;
}
 800961e:	b011      	add	sp, #68	@ 0x44
 8009620:	bdf0      	pop	{r4, r5, r6, r7, pc}
  else if (DCTableAddress == (hjpeg->Instance->HUFFENC_DC1))
 8009622:	f504 63fc 	add.w	r3, r4, #2016	@ 0x7e0
 8009626:	429a      	cmp	r2, r3
 8009628:	d102      	bne.n	8009630 <JPEG_Set_HuffDC_Mem+0x6c>
    address = (hjpeg->Instance->HUFFENC_DC1 + (JPEG_DC_HUFF_TABLE_SIZE / 2UL));
 800962a:	f504 64ff 	add.w	r4, r4, #2040	@ 0x7f8
  if (HuffTableDC != NULL)
 800962e:	e7d4      	b.n	80095da <JPEG_Set_HuffDC_Mem+0x16>
    return HAL_ERROR;
 8009630:	2001      	movs	r0, #1
 8009632:	e7f4      	b.n	800961e <JPEG_Set_HuffDC_Mem+0x5a>

08009634 <JPEG_Set_HuffAC_Mem>:
  * @param  ACTableAddress Encoder AC huffman table address it could be HUFFENC_AC0 or HUFFENC_AC1.
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_Set_HuffAC_Mem(JPEG_HandleTypeDef *hjpeg, JPEG_ACHuffTableTypeDef *HuffTableAC,
                                             const __IO uint32_t *ACTableAddress)
{
 8009634:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  HAL_StatusTypeDef error;
  JPEG_AC_HuffCodeTableTypeDef acSizeCodesTable;
  uint32_t i, lsb, msb;
  __IO uint32_t *address, *addressDef;

  if (ACTableAddress == (hjpeg->Instance->HUFFENC_AC0))
 8009638:	6804      	ldr	r4, [r0, #0]
{
 800963a:	f6ad 0d38 	subw	sp, sp, #2104	@ 0x838
 800963e:	460e      	mov	r6, r1
  if (ACTableAddress == (hjpeg->Instance->HUFFENC_AC0))
 8009640:	f504 63a0 	add.w	r3, r4, #1280	@ 0x500
 8009644:	429a      	cmp	r2, r3
 8009646:	d149      	bne.n	80096dc <JPEG_Set_HuffAC_Mem+0xa8>
  {
    address = (hjpeg->Instance->HUFFENC_AC0 + (JPEG_AC_HUFF_TABLE_SIZE / 2UL));
 8009648:	f204 6444 	addw	r4, r4, #1604	@ 0x644
  error = JPEG_Bits_To_SizeCodes(AC_BitsValsTable->Bits, huffsize, huffcode, &lastK);
 800964c:	466b      	mov	r3, sp
 800964e:	f20d 4234 	addw	r2, sp, #1076	@ 0x434
 8009652:	a901      	add	r1, sp, #4
 8009654:	4630      	mov	r0, r6
 8009656:	f7ff ff5d 	bl	8009514 <JPEG_Bits_To_SizeCodes>
  if (error != HAL_OK)
 800965a:	2800      	cmp	r0, #0
 800965c:	d13a      	bne.n	80096d4 <JPEG_Set_HuffAC_Mem+0xa0>
 800965e:	9b00      	ldr	r3, [sp, #0]
 8009660:	460d      	mov	r5, r1
 8009662:	f106 0c0f 	add.w	ip, r6, #15
 8009666:	4617      	mov	r7, r2
 8009668:	330f      	adds	r3, #15
      l = (msb * 10UL) + lsb - 1UL;
 800966a:	f04f 0e0a 	mov.w	lr, #10
 800966e:	18f1      	adds	r1, r6, r3
      AC_SizeCodesTable->HuffmanCode[l] = huffcode[k];
 8009670:	ae42      	add	r6, sp, #264	@ 0x108
  while (k < lastK)
 8009672:	4561      	cmp	r1, ip
 8009674:	d139      	bne.n	80096ea <JPEG_Set_HuffAC_Mem+0xb6>
    /* Locations 162:175 of each AC table contain information used internally by the core */

    addressDef = address;
    for (i = 0; i < 3UL; i++)
    {
      *addressDef = 0x0FFF0FFF;
 8009676:	f06f 23f0 	mvn.w	r3, #4026593280	@ 0xf000f000
 800967a:	a942      	add	r1, sp, #264	@ 0x108
 800967c:	f5a4 76a2 	sub.w	r6, r4, #324	@ 0x144
 8009680:	6023      	str	r3, [r4, #0]
    addressDef++;
    *addressDef = 0x0FD30FD2;
    addressDef++;
    *addressDef = 0x0FD50FD4;
    addressDef++;
    *addressDef = 0x0FD70FD6;
 8009682:	460d      	mov	r5, r1
      *addressDef = 0x0FFF0FFF;
 8009684:	6063      	str	r3, [r4, #4]
 8009686:	60a3      	str	r3, [r4, #8]
    *addressDef = 0x0FD10FD0;
 8009688:	f103 33d1 	add.w	r3, r3, #3520188881	@ 0xd1d1d1d1
 800968c:	f103 232e 	add.w	r3, r3, #771763712	@ 0x2e002e00
 8009690:	60e3      	str	r3, [r4, #12]
    *addressDef = 0x0FD30FD2;
 8009692:	f103 1302 	add.w	r3, r3, #131074	@ 0x20002
 8009696:	6123      	str	r3, [r4, #16]
    *addressDef = 0x0FD50FD4;
 8009698:	f103 1302 	add.w	r3, r3, #131074	@ 0x20002
 800969c:	6163      	str	r3, [r4, #20]
    *addressDef = 0x0FD70FD6;
 800969e:	f103 1302 	add.w	r3, r3, #131074	@ 0x20002
 80096a2:	61a3      	str	r3, [r4, #24]
    i = JPEG_AC_HUFF_TABLE_SIZE;
    while (i > 1UL)
    {
      i--;
      address--;
      msb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 80096a4:	f891 20a1 	ldrb.w	r2, [r1, #161]	@ 0xa1
    while (i > 1UL)
 80096a8:	3d08      	subs	r5, #8
      msb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 80096aa:	f895 3330 	ldrb.w	r3, [r5, #816]	@ 0x330
    while (i > 1UL)
 80096ae:	3902      	subs	r1, #2
      msb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 80096b0:	0212      	lsls	r2, r2, #8
                                                                                   0xFFUL);
      i--;
      lsb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 80096b2:	f895 732c 	ldrb.w	r7, [r5, #812]	@ 0x32c
      msb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 80096b6:	f402 6270 	and.w	r2, r2, #3840	@ 0xf00
 80096ba:	431a      	orrs	r2, r3
      lsb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 80096bc:	f891 30a2 	ldrb.w	r3, [r1, #162]	@ 0xa2
 80096c0:	021b      	lsls	r3, r3, #8
 80096c2:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80096c6:	433b      	orrs	r3, r7
                                                                                   0xFFUL);

      *address = lsb | (msb << 16);
 80096c8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80096cc:	f844 3d04 	str.w	r3, [r4, #-4]!
    while (i > 1UL)
 80096d0:	42b4      	cmp	r4, r6
 80096d2:	d1e7      	bne.n	80096a4 <JPEG_Set_HuffAC_Mem+0x70>
    }
  }

  /* Return function status */
  return HAL_OK;
}
 80096d4:	f60d 0d38 	addw	sp, sp, #2104	@ 0x838
 80096d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  else if (ACTableAddress == (hjpeg->Instance->HUFFENC_AC1))
 80096dc:	f504 63cc 	add.w	r3, r4, #1632	@ 0x660
 80096e0:	429a      	cmp	r2, r3
 80096e2:	d10f      	bne.n	8009704 <JPEG_Set_HuffAC_Mem+0xd0>
    address = (hjpeg->Instance->HUFFENC_AC1 + (JPEG_AC_HUFF_TABLE_SIZE / 2UL));
 80096e4:	f204 74a4 	addw	r4, r4, #1956	@ 0x7a4
  if (HuffTableAC != NULL)
 80096e8:	e7b0      	b.n	800964c <JPEG_Set_HuffAC_Mem+0x18>
    l = AC_BitsValsTable->HuffVal[k];
 80096ea:	f81c 3f01 	ldrb.w	r3, [ip, #1]!
    if (l == 0UL)
 80096ee:	b15b      	cbz	r3, 8009708 <JPEG_Set_HuffAC_Mem+0xd4>
    else if (l == 0xF0UL) /* l = 0xF0 ZRL code*/
 80096f0:	2bf0      	cmp	r3, #240	@ 0xf0
 80096f2:	d015      	beq.n	8009720 <JPEG_Set_HuffAC_Mem+0xec>
      msb = (l & 0xF0UL) >> 4;
 80096f4:	091a      	lsrs	r2, r3, #4
      lsb = (l & 0x0FUL);
 80096f6:	f003 030f 	and.w	r3, r3, #15
      l = (msb * 10UL) + lsb - 1UL;
 80096fa:	3b01      	subs	r3, #1
 80096fc:	fb0e 3302 	mla	r3, lr, r2, r3
    if (l >= JPEG_AC_HUFF_TABLE_SIZE)
 8009700:	2ba1      	cmp	r3, #161	@ 0xa1
 8009702:	d902      	bls.n	800970a <JPEG_Set_HuffAC_Mem+0xd6>
    return HAL_ERROR;
 8009704:	2001      	movs	r0, #1
 8009706:	e7e5      	b.n	80096d4 <JPEG_Set_HuffAC_Mem+0xa0>
      l = 160; /*l = 0x00 EOB code*/
 8009708:	23a0      	movs	r3, #160	@ 0xa0
      AC_SizeCodesTable->HuffmanCode[l] = huffcode[k];
 800970a:	eb06 0283 	add.w	r2, r6, r3, lsl #2
 800970e:	f857 8b04 	ldr.w	r8, [r7], #4
 8009712:	f8c2 80a4 	str.w	r8, [r2, #164]	@ 0xa4
      AC_SizeCodesTable->CodeLength[l] = huffsize[k] - 1U;
 8009716:	f815 2b01 	ldrb.w	r2, [r5], #1
 800971a:	3a01      	subs	r2, #1
 800971c:	54f2      	strb	r2, [r6, r3]
      k++;
 800971e:	e7a8      	b.n	8009672 <JPEG_Set_HuffAC_Mem+0x3e>
      l = 161;
 8009720:	23a1      	movs	r3, #161	@ 0xa1
 8009722:	e7f2      	b.n	800970a <JPEG_Set_HuffAC_Mem+0xd6>

08009724 <JPEG_Init_Process>:
  * @retval None
  */
static void JPEG_Init_Process(JPEG_HandleTypeDef *hjpeg)
{
  /*Reset pause*/
  hjpeg->Context &= (~(JPEG_CONTEXT_PAUSE_INPUT | JPEG_CONTEXT_PAUSE_OUTPUT));
 8009724:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 8009726:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800972a:	6543      	str	r3, [r0, #84]	@ 0x54

  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800972c:	6d42      	ldr	r2, [r0, #84]	@ 0x54
  {
    /*Set JPEG Codec to Decoding mode */
    hjpeg->Instance->CONFR1 |= JPEG_CONFR1_DE;
 800972e:	6803      	ldr	r3, [r0, #0]
  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 8009730:	f002 0203 	and.w	r2, r2, #3
 8009734:	2a02      	cmp	r2, #2
    hjpeg->Instance->CONFR1 |= JPEG_CONFR1_DE;
 8009736:	685a      	ldr	r2, [r3, #4]
 8009738:	bf0c      	ite	eq
 800973a:	f042 0208 	orreq.w	r2, r2, #8
  }
  else /* JPEG_CONTEXT_ENCODE */
  {
    /*Set JPEG Codec to Encoding mode */
    hjpeg->Instance->CONFR1 &= ~JPEG_CONFR1_DE;
 800973e:	f022 0208 	bicne.w	r2, r2, #8
 8009742:	605a      	str	r2, [r3, #4]
  }

  /*Stop JPEG processing */
  hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 8009744:	681a      	ldr	r2, [r3, #0]
 8009746:	f022 0201 	bic.w	r2, r2, #1
 800974a:	601a      	str	r2, [r3, #0]

  /* Disable All Interrupts */
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 800974c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800974e:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 8009752:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Flush input and output FIFOs*/
  hjpeg->Instance->CR |= JPEG_CR_IFF;
 8009754:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009756:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800975a:	631a      	str	r2, [r3, #48]	@ 0x30
  hjpeg->Instance->CR |= JPEG_CR_OFF;
 800975c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800975e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8009762:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Clear all flags */
  __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 8009764:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009766:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 800976a:	639a      	str	r2, [r3, #56]	@ 0x38

  /*Start Encoding/Decoding*/
  hjpeg->Instance->CONFR0 |=  JPEG_CONFR0_START;
 800976c:	681a      	ldr	r2, [r3, #0]
 800976e:	f042 0201 	orr.w	r2, r2, #1
 8009772:	601a      	str	r2, [r3, #0]

  if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 8009774:	6d42      	ldr	r2, [r0, #84]	@ 0x54
 8009776:	f002 020c 	and.w	r2, r2, #12
 800977a:	2a08      	cmp	r2, #8
 800977c:	d104      	bne.n	8009788 <JPEG_Init_Process+0x64>
  {
    /*Enable IN/OUT, end of Conversation, and end of header parsing interruptions*/
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_IFT | JPEG_IT_IFNF | JPEG_IT_OFT | JPEG_IT_OFNE | JPEG_IT_EOC | JPEG_IT_HPD);
 800977e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009780:	f042 026e 	orr.w	r2, r2, #110	@ 0x6e
  }
  else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
  {
    /*Enable End Of Conversation, and End Of Header parsing interruptions*/
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_EOC | JPEG_IT_HPD);
 8009784:	631a      	str	r2, [r3, #48]	@ 0x30
  }
  else
  {
    /* Nothing to do */
  }
}
 8009786:	4770      	bx	lr
  else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
 8009788:	6d42      	ldr	r2, [r0, #84]	@ 0x54
 800978a:	f002 020c 	and.w	r2, r2, #12
 800978e:	2a0c      	cmp	r2, #12
 8009790:	d1f9      	bne.n	8009786 <JPEG_Init_Process+0x62>
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_EOC | JPEG_IT_HPD);
 8009792:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009794:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 8009798:	e7f4      	b.n	8009784 <JPEG_Init_Process+0x60>
	...

0800979c <JPEG_DMA_StartProcess>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval JPEG_PROCESS_DONE if process ends else JPEG_PROCESS_ONGOING
  */
static HAL_StatusTypeDef JPEG_DMA_StartProcess(JPEG_HandleTypeDef *hjpeg)
{
 800979c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  /*if the MDMA In is triggred with JPEG In FIFO Threshold flag
      then MDMA In buffer size is 32 bytes
    else (MDMA In is triggred with JPEG In FIFO not full flag)
      then MDMA In buffer size is 4 bytes
    */
  inXfrSize = hjpeg->hdmain->Init.BufferTransferLength;
 800979e:	6b06      	ldr	r6, [r0, #48]	@ 0x30
{
 80097a0:	4604      	mov	r4, r0
    else (MDMA Out is triggred with JPEG Out FIFO not empty flag)
      then MDMA buffer size is 4 bytes
    */
  outXfrSize = hjpeg->hdmaout->Init.BufferTransferLength;

  if ((hjpeg->InDataLength < inXfrSize) || (hjpeg->OutDataLength < outXfrSize))
 80097a2:	6a82      	ldr	r2, [r0, #40]	@ 0x28
  inXfrSize = hjpeg->hdmain->Init.BufferTransferLength;
 80097a4:	6ab5      	ldr	r5, [r6, #40]	@ 0x28
  if ((hjpeg->InDataLength < inXfrSize) || (hjpeg->OutDataLength < outXfrSize))
 80097a6:	42aa      	cmp	r2, r5
 80097a8:	d313      	bcc.n	80097d2 <JPEG_DMA_StartProcess+0x36>
  outXfrSize = hjpeg->hdmaout->Init.BufferTransferLength;
 80097aa:	6b40      	ldr	r0, [r0, #52]	@ 0x34
  if ((hjpeg->InDataLength < inXfrSize) || (hjpeg->OutDataLength < outXfrSize))
 80097ac:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
  outXfrSize = hjpeg->hdmaout->Init.BufferTransferLength;
 80097ae:	6a81      	ldr	r1, [r0, #40]	@ 0x28
  if ((hjpeg->InDataLength < inXfrSize) || (hjpeg->OutDataLength < outXfrSize))
 80097b0:	428b      	cmp	r3, r1
 80097b2:	d30e      	bcc.n	80097d2 <JPEG_DMA_StartProcess+0x36>
  {
    return HAL_ERROR;
  }
  /* Set the JPEG MDMA In transfer complete callback */
  hjpeg->hdmain->XferCpltCallback = JPEG_MDMAInCpltCallback;
 80097b4:	4f18      	ldr	r7, [pc, #96]	@ (8009818 <JPEG_DMA_StartProcess+0x7c>)
 80097b6:	6477      	str	r7, [r6, #68]	@ 0x44
  /* Set the MDMA In error callback */
  hjpeg->hdmain->XferErrorCallback = JPEG_MDMAErrorCallback;
 80097b8:	4f18      	ldr	r7, [pc, #96]	@ (800981c <JPEG_DMA_StartProcess+0x80>)
 80097ba:	6577      	str	r7, [r6, #84]	@ 0x54

  /* Set the JPEG MDMA Out transfer complete callback */
  hjpeg->hdmaout->XferCpltCallback = JPEG_MDMAOutCpltCallback;
 80097bc:	4e18      	ldr	r6, [pc, #96]	@ (8009820 <JPEG_DMA_StartProcess+0x84>)
  /* Set the MDMA In error callback */
  hjpeg->hdmaout->XferErrorCallback = JPEG_MDMAErrorCallback;
 80097be:	6547      	str	r7, [r0, #84]	@ 0x54
  hjpeg->hdmaout->XferCpltCallback = JPEG_MDMAOutCpltCallback;
 80097c0:	6446      	str	r6, [r0, #68]	@ 0x44
  /* Set the MDMA Out Abort callback */
  hjpeg->hdmaout->XferAbortCallback = JPEG_MDMAOutAbortCallback;
 80097c2:	4e18      	ldr	r6, [pc, #96]	@ (8009824 <JPEG_DMA_StartProcess+0x88>)
 80097c4:	6586      	str	r6, [r0, #88]	@ 0x58

  if ((inXfrSize == 0UL) || (outXfrSize == 0UL))
 80097c6:	b105      	cbz	r5, 80097ca <JPEG_DMA_StartProcess+0x2e>
 80097c8:	b931      	cbnz	r1, 80097d8 <JPEG_DMA_StartProcess+0x3c>
  {
    hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 80097ca:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 80097cc:	f043 0304 	orr.w	r3, r3, #4
 80097d0:	6523      	str	r3, [r4, #80]	@ 0x50
    return HAL_ERROR;
 80097d2:	2001      	movs	r0, #1
    hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
    return HAL_ERROR;
  }

  return HAL_OK;
}
 80097d4:	b003      	add	sp, #12
 80097d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
  hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % inXfrSize);
 80097d8:	fbb2 f6f5 	udiv	r6, r2, r5
 80097dc:	fb05 2516 	mls	r5, r5, r6, r2
 80097e0:	1b52      	subs	r2, r2, r5
  if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
 80097e2:	2501      	movs	r5, #1
  hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % inXfrSize);
 80097e4:	62a2      	str	r2, [r4, #40]	@ 0x28
  hjpeg->OutDataLength = hjpeg->OutDataLength - (hjpeg->OutDataLength % outXfrSize);
 80097e6:	fbb3 f2f1 	udiv	r2, r3, r1
 80097ea:	fb01 3212 	mls	r2, r1, r2, r3
  if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
 80097ee:	6821      	ldr	r1, [r4, #0]
  hjpeg->OutDataLength = hjpeg->OutDataLength - (hjpeg->OutDataLength % outXfrSize);
 80097f0:	1a9b      	subs	r3, r3, r2
  if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
 80097f2:	3144      	adds	r1, #68	@ 0x44
  hjpeg->OutDataLength = hjpeg->OutDataLength - (hjpeg->OutDataLength % outXfrSize);
 80097f4:	62e3      	str	r3, [r4, #44]	@ 0x2c
  if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
 80097f6:	9500      	str	r5, [sp, #0]
 80097f8:	69e2      	ldr	r2, [r4, #28]
 80097fa:	f001 f848 	bl	800a88e <HAL_MDMA_Start_IT>
 80097fe:	2800      	cmp	r0, #0
 8009800:	d1e3      	bne.n	80097ca <JPEG_DMA_StartProcess+0x2e>
  if (HAL_MDMA_Start_IT(hjpeg->hdmain, (uint32_t)hjpeg->pJpegInBuffPtr, (uint32_t)&hjpeg->Instance->DIR,
 8009802:	6822      	ldr	r2, [r4, #0]
 8009804:	9500      	str	r5, [sp, #0]
 8009806:	3240      	adds	r2, #64	@ 0x40
 8009808:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800980a:	69a1      	ldr	r1, [r4, #24]
 800980c:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 800980e:	f001 f83e 	bl	800a88e <HAL_MDMA_Start_IT>
 8009812:	2800      	cmp	r0, #0
 8009814:	d0de      	beq.n	80097d4 <JPEG_DMA_StartProcess+0x38>
 8009816:	e7d8      	b.n	80097ca <JPEG_DMA_StartProcess+0x2e>
 8009818:	08009d5f 	.word	0x08009d5f
 800981c:	08009c57 	.word	0x08009c57
 8009820:	0800a21d 	.word	0x0800a21d
 8009824:	0800a20f 	.word	0x0800a20f

08009828 <HAL_JPEG_Init>:
{
 8009828:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (hjpeg == NULL)
 800982a:	4605      	mov	r5, r0
 800982c:	2800      	cmp	r0, #0
 800982e:	f000 80f2 	beq.w	8009a16 <HAL_JPEG_Init+0x1ee>
  if (hjpeg->State == HAL_JPEG_STATE_RESET)
 8009832:	f890 304d 	ldrb.w	r3, [r0, #77]	@ 0x4d
 8009836:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 800983a:	b91b      	cbnz	r3, 8009844 <HAL_JPEG_Init+0x1c>
    hjpeg->Lock = HAL_UNLOCKED;
 800983c:	f880 204c 	strb.w	r2, [r0, #76]	@ 0x4c
    HAL_JPEG_MspInit(hjpeg);
 8009840:	f7f7 fc26 	bl	8001090 <HAL_JPEG_MspInit>
  __HAL_JPEG_ENABLE(hjpeg);
 8009844:	682c      	ldr	r4, [r5, #0]
  hjpeg->State = HAL_JPEG_STATE_BUSY;
 8009846:	2302      	movs	r3, #2
 8009848:	4a86      	ldr	r2, [pc, #536]	@ (8009a64 <HAL_JPEG_Init+0x23c>)
 800984a:	f885 304d 	strb.w	r3, [r5, #77]	@ 0x4d
  address = (hjpeg->Instance->DHTMEM + 3);
 800984e:	f504 715b 	add.w	r1, r4, #876	@ 0x36c
  __HAL_JPEG_ENABLE(hjpeg);
 8009852:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8009854:	f504 7057 	add.w	r0, r4, #860	@ 0x35c
 8009858:	f043 0301 	orr.w	r3, r3, #1
 800985c:	6323      	str	r3, [r4, #48]	@ 0x30
  hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 800985e:	6823      	ldr	r3, [r4, #0]
 8009860:	f023 0301 	bic.w	r3, r3, #1
 8009864:	6023      	str	r3, [r4, #0]
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 8009866:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8009868:	f023 037e 	bic.w	r3, r3, #126	@ 0x7e
 800986c:	6323      	str	r3, [r4, #48]	@ 0x30
  hjpeg->Instance->CR |= JPEG_CR_IFF;
 800986e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8009870:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8009874:	6323      	str	r3, [r4, #48]	@ 0x30
  hjpeg->Instance->CR |= JPEG_CR_OFF;
 8009876:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8009878:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800987c:	6323      	str	r3, [r4, #48]	@ 0x30
  __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 800987e:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8009880:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8009884:	63a3      	str	r3, [r4, #56]	@ 0x38
  hjpeg->QuantTable0 = (uint8_t *)((uint32_t)JPEG_LUM_QuantTable);
 8009886:	4b78      	ldr	r3, [pc, #480]	@ (8009a68 <HAL_JPEG_Init+0x240>)
 8009888:	63eb      	str	r3, [r5, #60]	@ 0x3c
  hjpeg->QuantTable1 = (uint8_t *)((uint32_t)JPEG_CHROM_QuantTable);
 800988a:	4b78      	ldr	r3, [pc, #480]	@ (8009a6c <HAL_JPEG_Init+0x244>)
 800988c:	642b      	str	r3, [r5, #64]	@ 0x40
  hjpeg->QuantTable2 = NULL;
 800988e:	2300      	movs	r3, #0
  hjpeg->QuantTable3 = NULL;
 8009890:	e9c5 3311 	strd	r3, r3, [r5, #68]	@ 0x44
               (((uint32_t)HuffTableDC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 8009894:	7b93      	ldrb	r3, [r2, #14]
  while (index > 3UL)
 8009896:	3a04      	subs	r2, #4
    *address = (((uint32_t)HuffTableDC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 8009898:	7cd6      	ldrb	r6, [r2, #19]
               (((uint32_t)HuffTableDC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 800989a:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableDC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 800989c:	ea43 6306 	orr.w	r3, r3, r6, lsl #24
               ((uint32_t)HuffTableDC0->Bits[index - 4UL] & 0xFFUL);
 80098a0:	7c16      	ldrb	r6, [r2, #16]
               (((uint32_t)HuffTableDC0->Bits[index - 3UL] & 0xFFUL) << 8) |
 80098a2:	4333      	orrs	r3, r6
 80098a4:	7c56      	ldrb	r6, [r2, #17]
 80098a6:	ea43 2306 	orr.w	r3, r3, r6, lsl #8
    *address = (((uint32_t)HuffTableDC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 80098aa:	f841 3904 	str.w	r3, [r1], #-4
  while (index > 3UL)
 80098ae:	4281      	cmp	r1, r0
 80098b0:	d1f0      	bne.n	8009894 <HAL_JPEG_Init+0x6c>
    *address = (((uint32_t)HuffTableDC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 80098b2:	4b6f      	ldr	r3, [pc, #444]	@ (8009a70 <HAL_JPEG_Init+0x248>)
  address = (hjpeg->Instance->DHTMEM + 10UL);
 80098b4:	f504 7162 	add.w	r1, r4, #904	@ 0x388
 80098b8:	4a6e      	ldr	r2, [pc, #440]	@ (8009a74 <HAL_JPEG_Init+0x24c>)
 80098ba:	f504 775e 	add.w	r7, r4, #888	@ 0x378
    *address = (((uint32_t)HuffTableDC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 80098be:	f8c4 3378 	str.w	r3, [r4, #888]	@ 0x378
 80098c2:	f1a3 3304 	sub.w	r3, r3, #67372036	@ 0x4040404
  address = (hjpeg->Instance->DHTMEM + 10UL);
 80098c6:	4610      	mov	r0, r2
 80098c8:	460e      	mov	r6, r1
    *address = (((uint32_t)HuffTableDC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 80098ca:	f8c4 3374 	str.w	r3, [r4, #884]	@ 0x374
 80098ce:	f1a3 3304 	sub.w	r3, r3, #67372036	@ 0x4040404
 80098d2:	f8c4 3370 	str.w	r3, [r4, #880]	@ 0x370
               (((uint32_t)HuffTableAC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 80098d6:	7b83      	ldrb	r3, [r0, #14]
  while (index > 3UL)
 80098d8:	3804      	subs	r0, #4
    *address = (((uint32_t)HuffTableAC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 80098da:	f890 c013 	ldrb.w	ip, [r0, #19]
               (((uint32_t)HuffTableAC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 80098de:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableAC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 80098e0:	ea43 630c 	orr.w	r3, r3, ip, lsl #24
               ((uint32_t)HuffTableAC0->Bits[index - 4UL] & 0xFFUL);
 80098e4:	f890 c010 	ldrb.w	ip, [r0, #16]
               (((uint32_t)HuffTableAC0->Bits[index - 3UL] & 0xFFUL) << 8) |
 80098e8:	ea43 030c 	orr.w	r3, r3, ip
 80098ec:	f890 c011 	ldrb.w	ip, [r0, #17]
 80098f0:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
    *address = (((uint32_t)HuffTableAC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 80098f4:	f846 3904 	str.w	r3, [r6], #-4
  while (index > 3UL)
 80098f8:	42be      	cmp	r6, r7
 80098fa:	d1ec      	bne.n	80098d6 <HAL_JPEG_Init+0xae>
  value = *address & 0xFFFF0000U;
 80098fc:	f8d4 342c 	ldr.w	r3, [r4, #1068]	@ 0x42c
  address--; /* address = hjpeg->Instance->DHTMEM + 50*/
 8009900:	f504 6085 	add.w	r0, r4, #1064	@ 0x428
  value = *address & 0xFFFF0000U;
 8009904:	0c1b      	lsrs	r3, r3, #16
 8009906:	041b      	lsls	r3, r3, #16
  value = value | (((uint32_t)HuffTableAC0->HuffVal[161] & 0xFFUL) << 8) | ((uint32_t)HuffTableAC0->HuffVal[160] & 0xFFUL);
 8009908:	f443 437a 	orr.w	r3, r3, #64000	@ 0xfa00
 800990c:	f043 03f9 	orr.w	r3, r3, #249	@ 0xf9
  *address = value;
 8009910:	f8c4 342c 	str.w	r3, [r4, #1068]	@ 0x42c
               (((uint32_t)HuffTableAC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
 8009914:	f892 30ae 	ldrb.w	r3, [r2, #174]	@ 0xae
  while (index > 3UL)
 8009918:	3a04      	subs	r2, #4
    *address = (((uint32_t)HuffTableAC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 800991a:	f892 60b3 	ldrb.w	r6, [r2, #179]	@ 0xb3
               (((uint32_t)HuffTableAC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
 800991e:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableAC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 8009920:	ea43 6306 	orr.w	r3, r3, r6, lsl #24
               ((uint32_t)HuffTableAC0->HuffVal[index - 4UL] & 0xFFUL);
 8009924:	f892 60b0 	ldrb.w	r6, [r2, #176]	@ 0xb0
               (((uint32_t)HuffTableAC0->HuffVal[index - 3UL] & 0xFFUL) << 8) |
 8009928:	4333      	orrs	r3, r6
 800992a:	f892 60b1 	ldrb.w	r6, [r2, #177]	@ 0xb1
 800992e:	ea43 2306 	orr.w	r3, r3, r6, lsl #8
    *address = (((uint32_t)HuffTableAC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 8009932:	f840 3904 	str.w	r3, [r0], #-4
  while (index > 3UL)
 8009936:	4281      	cmp	r1, r0
 8009938:	d1ec      	bne.n	8009914 <HAL_JPEG_Init+0xec>
  value = *address & 0x0000FFFFU;
 800993a:	f8d4 342c 	ldr.w	r3, [r4, #1068]	@ 0x42c
  address = (hjpeg->Instance->DHTMEM + 102);
 800993e:	f504 619f 	add.w	r1, r4, #1272	@ 0x4f8
  value = *address & 0xFFFF0000U;
 8009942:	4a4d      	ldr	r2, [pc, #308]	@ (8009a78 <HAL_JPEG_Init+0x250>)
 8009944:	f504 608b 	add.w	r0, r4, #1112	@ 0x458
  value = *address & 0x0000FFFFU;
 8009948:	b29b      	uxth	r3, r3
  value = value | (((uint32_t)HuffTableDC1->Bits[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableDC1->Bits[0] & 0xFFUL) << 16);
 800994a:	f043 7340 	orr.w	r3, r3, #50331648	@ 0x3000000
  *address = value;
 800994e:	f8c4 342c 	str.w	r3, [r4, #1068]	@ 0x42c
  value = *address & 0xFFFF0000U;
 8009952:	f8d4 343c 	ldr.w	r3, [r4, #1084]	@ 0x43c
 8009956:	4013      	ands	r3, r2
  *address = value;
 8009958:	f8c4 343c 	str.w	r3, [r4, #1084]	@ 0x43c
    *address = (((uint32_t)HuffTableDC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 800995c:	2301      	movs	r3, #1
 800995e:	f8c4 3438 	str.w	r3, [r4, #1080]	@ 0x438
 8009962:	f04f 3301 	mov.w	r3, #16843009	@ 0x1010101
 8009966:	f8c4 3434 	str.w	r3, [r4, #1076]	@ 0x434
 800996a:	f8c4 3430 	str.w	r3, [r4, #1072]	@ 0x430
  value = *address & 0x0000FFFFUL;
 800996e:	f8d4 343c 	ldr.w	r3, [r4, #1084]	@ 0x43c
 8009972:	b29b      	uxth	r3, r3
  value = value | (((uint32_t)HuffTableDC1->HuffVal[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableDC1->HuffVal[0] & 0xFFUL) <<
 8009974:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
  *address = value;
 8009978:	f8c4 343c 	str.w	r3, [r4, #1084]	@ 0x43c
  value = *address & 0xFFFF0000UL;
 800997c:	f8d4 3448 	ldr.w	r3, [r4, #1096]	@ 0x448
 8009980:	4013      	ands	r3, r2
  value = value | (((uint32_t)HuffTableDC1->HuffVal[11] & 0xFFUL) << 8) | ((uint32_t)HuffTableDC1->HuffVal[10] & 0xFFUL);
 8009982:	f443 6330 	orr.w	r3, r3, #2816	@ 0xb00
 8009986:	f043 030a 	orr.w	r3, r3, #10
  *address = value;
 800998a:	f8c4 3448 	str.w	r3, [r4, #1096]	@ 0x448
    *address = (((uint32_t)HuffTableDC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 800998e:	4b3b      	ldr	r3, [pc, #236]	@ (8009a7c <HAL_JPEG_Init+0x254>)
 8009990:	f8c4 3444 	str.w	r3, [r4, #1092]	@ 0x444
 8009994:	f1a3 3304 	sub.w	r3, r3, #67372036	@ 0x4040404
 8009998:	f8c4 3440 	str.w	r3, [r4, #1088]	@ 0x440
  value = *address & 0x0000FFFFU;
 800999c:	f8d4 3448 	ldr.w	r3, [r4, #1096]	@ 0x448
 80099a0:	b29b      	uxth	r3, r3
  value = value | (((uint32_t)HuffTableAC1->Bits[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableAC1->Bits[0] & 0xFFUL) << 16);
 80099a2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
  *address = value;
 80099a6:	f8c4 3448 	str.w	r3, [r4, #1096]	@ 0x448
  value = *address & 0xFFFF0000U;
 80099aa:	f8d4 3458 	ldr.w	r3, [r4, #1112]	@ 0x458
 80099ae:	4013      	ands	r3, r2
  value = value | (((uint32_t)HuffTableAC1->Bits[15] & 0xFFUL) << 8) | ((uint32_t)HuffTableAC1->Bits[14] & 0xFFUL);
 80099b0:	4a33      	ldr	r2, [pc, #204]	@ (8009a80 <HAL_JPEG_Init+0x258>)
 80099b2:	f443 43ee 	orr.w	r3, r3, #30464	@ 0x7700
 80099b6:	f043 0302 	orr.w	r3, r3, #2
  *address = value;
 80099ba:	f8c4 3458 	str.w	r3, [r4, #1112]	@ 0x458
    *address = (((uint32_t)HuffTableAC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 80099be:	4b31      	ldr	r3, [pc, #196]	@ (8009a84 <HAL_JPEG_Init+0x25c>)
 80099c0:	f8c4 3454 	str.w	r3, [r4, #1108]	@ 0x454
 80099c4:	4b30      	ldr	r3, [pc, #192]	@ (8009a88 <HAL_JPEG_Init+0x260>)
 80099c6:	f8c4 3450 	str.w	r3, [r4, #1104]	@ 0x450
 80099ca:	4b30      	ldr	r3, [pc, #192]	@ (8009a8c <HAL_JPEG_Init+0x264>)
 80099cc:	f8c4 344c 	str.w	r3, [r4, #1100]	@ 0x44c
  value = *address & 0x0000FFFFUL;
 80099d0:	f8d4 3458 	ldr.w	r3, [r4, #1112]	@ 0x458
 80099d4:	b29b      	uxth	r3, r3
  value = value | (((uint32_t)HuffTableAC1->HuffVal[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableAC1->HuffVal[0] & 0xFFUL) <<
 80099d6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
  *address = value;
 80099da:	f8c4 3458 	str.w	r3, [r4, #1112]	@ 0x458
               (((uint32_t)HuffTableAC1->HuffVal[index] & 0xFFUL) << 16) |
 80099de:	f892 30b0 	ldrb.w	r3, [r2, #176]	@ 0xb0
  while (index > 3UL)
 80099e2:	3a04      	subs	r2, #4
    *address = (((uint32_t)HuffTableAC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 80099e4:	f892 60b5 	ldrb.w	r6, [r2, #181]	@ 0xb5
               (((uint32_t)HuffTableAC1->HuffVal[index] & 0xFFUL) << 16) |
 80099e8:	041b      	lsls	r3, r3, #16
               (((uint32_t)HuffTableAC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
 80099ea:	ea43 6306 	orr.w	r3, r3, r6, lsl #24
               ((uint32_t)HuffTableAC1->HuffVal[index - 2UL] & 0xFFUL);
 80099ee:	f892 60b2 	ldrb.w	r6, [r2, #178]	@ 0xb2
               (((uint32_t)HuffTableAC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
 80099f2:	4333      	orrs	r3, r6
 80099f4:	f892 60b3 	ldrb.w	r6, [r2, #179]	@ 0xb3
 80099f8:	ea43 2306 	orr.w	r3, r3, r6, lsl #8
    *address = (((uint32_t)HuffTableAC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 80099fc:	f841 3904 	str.w	r3, [r1], #-4
  while (index > 3UL)
 8009a00:	4281      	cmp	r1, r0
 8009a02:	d1ec      	bne.n	80099de <HAL_JPEG_Init+0x1b6>
  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACLUM_HuffTable,
 8009a04:	f504 62a0 	add.w	r2, r4, #1280	@ 0x500
 8009a08:	491a      	ldr	r1, [pc, #104]	@ (8009a74 <HAL_JPEG_Init+0x24c>)
 8009a0a:	4628      	mov	r0, r5
 8009a0c:	f7ff fe12 	bl	8009634 <JPEG_Set_HuffAC_Mem>
  if (error != HAL_OK)
 8009a10:	b118      	cbz	r0, 8009a1a <HAL_JPEG_Init+0x1f2>
    hjpeg->ErrorCode = HAL_JPEG_ERROR_HUFF_TABLE;
 8009a12:	2301      	movs	r3, #1
 8009a14:	652b      	str	r3, [r5, #80]	@ 0x50
    return HAL_ERROR;
 8009a16:	2001      	movs	r0, #1
}
 8009a18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACCHROM_HuffTable,
 8009a1a:	f504 62cc 	add.w	r2, r4, #1632	@ 0x660
 8009a1e:	4918      	ldr	r1, [pc, #96]	@ (8009a80 <HAL_JPEG_Init+0x258>)
 8009a20:	4628      	mov	r0, r5
 8009a22:	f7ff fe07 	bl	8009634 <JPEG_Set_HuffAC_Mem>
  if (error != HAL_OK)
 8009a26:	2800      	cmp	r0, #0
 8009a28:	d1f3      	bne.n	8009a12 <HAL_JPEG_Init+0x1ea>
  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCLUM_HuffTable,
 8009a2a:	f504 62f8 	add.w	r2, r4, #1984	@ 0x7c0
 8009a2e:	490d      	ldr	r1, [pc, #52]	@ (8009a64 <HAL_JPEG_Init+0x23c>)
 8009a30:	4628      	mov	r0, r5
 8009a32:	f7ff fdc7 	bl	80095c4 <JPEG_Set_HuffDC_Mem>
  if (error != HAL_OK)
 8009a36:	2800      	cmp	r0, #0
 8009a38:	d1eb      	bne.n	8009a12 <HAL_JPEG_Init+0x1ea>
  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCCHROM_HuffTable,
 8009a3a:	f504 62fc 	add.w	r2, r4, #2016	@ 0x7e0
 8009a3e:	4914      	ldr	r1, [pc, #80]	@ (8009a90 <HAL_JPEG_Init+0x268>)
 8009a40:	4628      	mov	r0, r5
 8009a42:	f7ff fdbf 	bl	80095c4 <JPEG_Set_HuffDC_Mem>
  if (JPEG_Set_HuffEnc_Mem(hjpeg) != HAL_OK)
 8009a46:	2800      	cmp	r0, #0
 8009a48:	d1e3      	bne.n	8009a12 <HAL_JPEG_Init+0x1ea>
  hjpeg->Instance->CONFR1 |= JPEG_CONFR1_HDR;
 8009a4a:	6863      	ldr	r3, [r4, #4]
 8009a4c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009a50:	6063      	str	r3, [r4, #4]
  hjpeg->State = HAL_JPEG_STATE_READY;
 8009a52:	2301      	movs	r3, #1
  hjpeg->JpegInCount = 0;
 8009a54:	6228      	str	r0, [r5, #32]
  hjpeg->JpegOutCount = 0;
 8009a56:	6268      	str	r0, [r5, #36]	@ 0x24
  hjpeg->State = HAL_JPEG_STATE_READY;
 8009a58:	f885 304d 	strb.w	r3, [r5, #77]	@ 0x4d
  hjpeg->ErrorCode = HAL_JPEG_ERROR_NONE;
 8009a5c:	6528      	str	r0, [r5, #80]	@ 0x50
  hjpeg->Context = 0;
 8009a5e:	6568      	str	r0, [r5, #84]	@ 0x54
  return HAL_OK;
 8009a60:	e7da      	b.n	8009a18 <HAL_JPEG_Init+0x1f0>
 8009a62:	bf00      	nop
 8009a64:	0802c254 	.word	0x0802c254
 8009a68:	0802c054 	.word	0x0802c054
 8009a6c:	0802c014 	.word	0x0802c014
 8009a70:	0b0a0908 	.word	0x0b0a0908
 8009a74:	0802c186 	.word	0x0802c186
 8009a78:	ffff0000 	.word	0xffff0000
 8009a7c:	09080706 	.word	0x09080706
 8009a80:	0802c0d4 	.word	0x0802c0d4
 8009a84:	01000404 	.word	0x01000404
 8009a88:	05070403 	.word	0x05070403
 8009a8c:	04040201 	.word	0x04040201
 8009a90:	0802c238 	.word	0x0802c238

08009a94 <HAL_JPEG_GetInfo>:
{
 8009a94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if ((hjpeg == NULL) || (pInfo == NULL))
 8009a98:	2800      	cmp	r0, #0
 8009a9a:	d06f      	beq.n	8009b7c <HAL_JPEG_GetInfo+0xe8>
 8009a9c:	2900      	cmp	r1, #0
 8009a9e:	d06d      	beq.n	8009b7c <HAL_JPEG_GetInfo+0xe8>
  if ((hjpeg->Instance->CONFR1 & JPEG_CONFR1_NF) == JPEG_CONFR1_NF_1)
 8009aa0:	6804      	ldr	r4, [r0, #0]
 8009aa2:	6863      	ldr	r3, [r4, #4]
 8009aa4:	f003 0303 	and.w	r3, r3, #3
 8009aa8:	2b02      	cmp	r3, #2
 8009aaa:	d047      	beq.n	8009b3c <HAL_JPEG_GetInfo+0xa8>
  else if ((hjpeg->Instance->CONFR1 & JPEG_CONFR1_NF) == 0UL)
 8009aac:	6863      	ldr	r3, [r4, #4]
 8009aae:	f013 0303 	ands.w	r3, r3, #3
 8009ab2:	d005      	beq.n	8009ac0 <HAL_JPEG_GetInfo+0x2c>
  else if ((hjpeg->Instance->CONFR1 & JPEG_CONFR1_NF) == JPEG_CONFR1_NF)
 8009ab4:	6863      	ldr	r3, [r4, #4]
 8009ab6:	f003 0303 	and.w	r3, r3, #3
 8009aba:	2b03      	cmp	r3, #3
 8009abc:	d15e      	bne.n	8009b7c <HAL_JPEG_GetInfo+0xe8>
 8009abe:	2330      	movs	r3, #48	@ 0x30
  pInfo->ImageHeight = (hjpeg->Instance->CONFR1 & 0xFFFF0000UL) >> 16;
 8009ac0:	6862      	ldr	r2, [r4, #4]
    pInfo->ColorSpace = JPEG_YCBCR_COLORSPACE;
 8009ac2:	600b      	str	r3, [r1, #0]
  if ((pInfo->ColorSpace == JPEG_YCBCR_COLORSPACE) || (pInfo->ColorSpace == JPEG_CMYK_COLORSPACE))
 8009ac4:	f023 0320 	bic.w	r3, r3, #32
  pInfo->ImageHeight = (hjpeg->Instance->CONFR1 & 0xFFFF0000UL) >> 16;
 8009ac8:	0c12      	lsrs	r2, r2, #16
  if ((pInfo->ColorSpace == JPEG_YCBCR_COLORSPACE) || (pInfo->ColorSpace == JPEG_CMYK_COLORSPACE))
 8009aca:	2b10      	cmp	r3, #16
  pInfo->ImageHeight = (hjpeg->Instance->CONFR1 & 0xFFFF0000UL) >> 16;
 8009acc:	608a      	str	r2, [r1, #8]
  pInfo->ImageWidth  = (hjpeg->Instance->CONFR3 & 0xFFFF0000UL) >> 16;
 8009ace:	68e2      	ldr	r2, [r4, #12]
 8009ad0:	ea4f 4212 	mov.w	r2, r2, lsr #16
 8009ad4:	60ca      	str	r2, [r1, #12]
  if ((pInfo->ColorSpace == JPEG_YCBCR_COLORSPACE) || (pInfo->ColorSpace == JPEG_CMYK_COLORSPACE))
 8009ad6:	d13c      	bne.n	8009b52 <HAL_JPEG_GetInfo+0xbe>
    yblockNb  = (hjpeg->Instance->CONFR4 & JPEG_CONFR4_NB) >> 4;
 8009ad8:	6925      	ldr	r5, [r4, #16]
    cBblockNb = (hjpeg->Instance->CONFR5 & JPEG_CONFR5_NB) >> 4;
 8009ada:	6963      	ldr	r3, [r4, #20]
    yblockNb  = (hjpeg->Instance->CONFR4 & JPEG_CONFR4_NB) >> 4;
 8009adc:	f3c5 1503 	ubfx	r5, r5, #4, #4
    cRblockNb = (hjpeg->Instance->CONFR6 & JPEG_CONFR6_NB) >> 4;
 8009ae0:	69a2      	ldr	r2, [r4, #24]
    cBblockNb = (hjpeg->Instance->CONFR5 & JPEG_CONFR5_NB) >> 4;
 8009ae2:	091b      	lsrs	r3, r3, #4
    if ((yblockNb == 1UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 8009ae4:	2d01      	cmp	r5, #1
    cRblockNb = (hjpeg->Instance->CONFR6 & JPEG_CONFR6_NB) >> 4;
 8009ae6:	ea4f 1212 	mov.w	r2, r2, lsr #4
    if ((yblockNb == 1UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 8009aea:	d129      	bne.n	8009b40 <HAL_JPEG_GetInfo+0xac>
 8009aec:	4313      	orrs	r3, r2
 8009aee:	f013 0f0f 	tst.w	r3, #15
 8009af2:	bf0c      	ite	eq
 8009af4:	2301      	moveq	r3, #1
 8009af6:	2300      	movne	r3, #0
 8009af8:	005b      	lsls	r3, r3, #1
      pInfo->ChromaSubsampling = JPEG_422_SUBSAMPLING; /*16x8 block*/
 8009afa:	604b      	str	r3, [r1, #4]
  *         the configuration information for JPEG module
  * @retval JPEG image quality from 1 to 100.
  */
static uint32_t JPEG_GetQuality(JPEG_HandleTypeDef *hjpeg)
{
  uint32_t quality = 0;
 8009afc:	2300      	movs	r3, #0
 8009afe:	3450      	adds	r4, #80	@ 0x50
 8009b00:	f8df c07c 	ldr.w	ip, [pc, #124]	@ 8009b80 <HAL_JPEG_GetInfo+0xec>
  uint32_t quantRow, quantVal, scale, i, j;
  __IO uint32_t *tableAddress = hjpeg->Instance->QMEM0;

  i = 0;
 8009b04:	461d      	mov	r5, r3
        quality += 100UL;
      }
      else
      {
        /* Note that the quantization coefficients must be specified in the table in zigzag order */
        scale = (quantVal * 100UL) / ((uint32_t) hjpeg->QuantTable0[JPEG_ZIGZAG_ORDER[i + j]]);
 8009b06:	f04f 0e64 	mov.w	lr, #100	@ 0x64
        {
          quality += (200UL - scale) / 2UL;
        }
        else
        {
          quality += 5000UL / scale;
 8009b0a:	f241 3888 	movw	r8, #5000	@ 0x1388
    quantRow = *tableAddress;
 8009b0e:	f854 9005 	ldr.w	r9, [r4, r5]
    for (j = 0; j < 4UL; j++)
 8009b12:	eb05 070c 	add.w	r7, r5, ip
    quantRow = *tableAddress;
 8009b16:	2600      	movs	r6, #0
      quantVal = (quantRow >> (8UL * j)) & 0xFFUL;
 8009b18:	fa29 f206 	lsr.w	r2, r9, r6
 8009b1c:	b2d2      	uxtb	r2, r2
      if (quantVal == 1UL)
 8009b1e:	2a01      	cmp	r2, #1
 8009b20:	d119      	bne.n	8009b56 <HAL_JPEG_GetInfo+0xc2>
        quality += 100UL;
 8009b22:	3364      	adds	r3, #100	@ 0x64
    for (j = 0; j < 4UL; j++)
 8009b24:	3608      	adds	r6, #8
 8009b26:	3701      	adds	r7, #1
 8009b28:	2e20      	cmp	r6, #32
 8009b2a:	d1f5      	bne.n	8009b18 <HAL_JPEG_GetInfo+0x84>
        }
      }
    }

    i += 4UL;
 8009b2c:	3504      	adds	r5, #4
  while (i < (JPEG_QUANT_TABLE_SIZE - 3UL))
 8009b2e:	2d40      	cmp	r5, #64	@ 0x40
 8009b30:	d1ed      	bne.n	8009b0e <HAL_JPEG_GetInfo+0x7a>
    tableAddress ++;
  }

  return (quality / 64UL);
 8009b32:	099b      	lsrs	r3, r3, #6
  return HAL_OK;
 8009b34:	2000      	movs	r0, #0
  pInfo->ImageQuality = JPEG_GetQuality(hjpeg);
 8009b36:	610b      	str	r3, [r1, #16]
}
 8009b38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b3c:	2310      	movs	r3, #16
 8009b3e:	e7bf      	b.n	8009ac0 <HAL_JPEG_GetInfo+0x2c>
    else if ((yblockNb == 0UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 8009b40:	2d03      	cmp	r5, #3
 8009b42:	d106      	bne.n	8009b52 <HAL_JPEG_GetInfo+0xbe>
    else if ((yblockNb == 3UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 8009b44:	4313      	orrs	r3, r2
 8009b46:	f013 0f0f 	tst.w	r3, #15
 8009b4a:	bf0c      	ite	eq
 8009b4c:	2301      	moveq	r3, #1
 8009b4e:	2300      	movne	r3, #0
 8009b50:	e7d3      	b.n	8009afa <HAL_JPEG_GetInfo+0x66>
 8009b52:	2300      	movs	r3, #0
 8009b54:	e7d1      	b.n	8009afa <HAL_JPEG_GetInfo+0x66>
        scale = (quantVal * 100UL) / ((uint32_t) hjpeg->QuantTable0[JPEG_ZIGZAG_ORDER[i + j]]);
 8009b56:	fb0e fb02 	mul.w	fp, lr, r2
 8009b5a:	f897 a000 	ldrb.w	sl, [r7]
 8009b5e:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8009b60:	f812 a00a 	ldrb.w	sl, [r2, sl]
 8009b64:	fbbb f2fa 	udiv	r2, fp, sl
        if (scale <= 100UL)
 8009b68:	2a64      	cmp	r2, #100	@ 0x64
          quality += 5000UL / scale;
 8009b6a:	bf8b      	itete	hi
 8009b6c:	fbb8 f2f2 	udivhi	r2, r8, r2
          quality += (200UL - scale) / 2UL;
 8009b70:	f1c2 02c8 	rsbls	r2, r2, #200	@ 0xc8
          quality += 5000UL / scale;
 8009b74:	189b      	addhi	r3, r3, r2
          quality += (200UL - scale) / 2UL;
 8009b76:	eb03 0352 	addls.w	r3, r3, r2, lsr #1
          quality += 5000UL / scale;
 8009b7a:	e7d3      	b.n	8009b24 <HAL_JPEG_GetInfo+0x90>
    return HAL_ERROR;
 8009b7c:	2001      	movs	r0, #1
 8009b7e:	e7db      	b.n	8009b38 <HAL_JPEG_GetInfo+0xa4>
 8009b80:	0802c094 	.word	0x0802c094

08009b84 <HAL_JPEG_Decode_DMA>:
{
 8009b84:	b538      	push	{r3, r4, r5, lr}
  if ((hjpeg == NULL) || (pDataIn == NULL) || (pDataOutMCU == NULL))
 8009b86:	4604      	mov	r4, r0
 8009b88:	b348      	cbz	r0, 8009bde <HAL_JPEG_Decode_DMA+0x5a>
 8009b8a:	b341      	cbz	r1, 8009bde <HAL_JPEG_Decode_DMA+0x5a>
 8009b8c:	b33b      	cbz	r3, 8009bde <HAL_JPEG_Decode_DMA+0x5a>
  __HAL_LOCK(hjpeg);
 8009b8e:	f890 504c 	ldrb.w	r5, [r0, #76]	@ 0x4c
 8009b92:	2d01      	cmp	r5, #1
 8009b94:	d028      	beq.n	8009be8 <HAL_JPEG_Decode_DMA+0x64>
 8009b96:	2501      	movs	r5, #1
 8009b98:	f880 504c 	strb.w	r5, [r0, #76]	@ 0x4c
  if (hjpeg->State == HAL_JPEG_STATE_READY)
 8009b9c:	f890 504d 	ldrb.w	r5, [r0, #77]	@ 0x4d
 8009ba0:	2d01      	cmp	r5, #1
 8009ba2:	d11e      	bne.n	8009be2 <HAL_JPEG_Decode_DMA+0x5e>
    hjpeg->State = HAL_JPEG_STATE_BUSY_DECODING;
 8009ba4:	2504      	movs	r5, #4
    hjpeg->InDataLength = InDataLength;
 8009ba6:	6282      	str	r2, [r0, #40]	@ 0x28
    hjpeg->State = HAL_JPEG_STATE_BUSY_DECODING;
 8009ba8:	f880 504d 	strb.w	r5, [r0, #77]	@ 0x4d
    hjpeg->Context &= ~(JPEG_CONTEXT_OPERATION_MASK | JPEG_CONTEXT_METHOD_MASK);
 8009bac:	6d45      	ldr	r5, [r0, #84]	@ 0x54
 8009bae:	f025 050f 	bic.w	r5, r5, #15
 8009bb2:	6545      	str	r5, [r0, #84]	@ 0x54
    hjpeg->Context |= (JPEG_CONTEXT_DECODE | JPEG_CONTEXT_DMA);
 8009bb4:	6d45      	ldr	r5, [r0, #84]	@ 0x54
 8009bb6:	f045 050e 	orr.w	r5, r5, #14
    hjpeg->pJpegOutBuffPtr = pDataOutMCU;
 8009bba:	e9c0 1306 	strd	r1, r3, [r0, #24]
    hjpeg->Context |= (JPEG_CONTEXT_DECODE | JPEG_CONTEXT_DMA);
 8009bbe:	6545      	str	r5, [r0, #84]	@ 0x54
    hjpeg->JpegInCount = 0;
 8009bc0:	2500      	movs	r5, #0
    hjpeg->OutDataLength = OutDataLength;
 8009bc2:	9b04      	ldr	r3, [sp, #16]
    hjpeg->JpegInCount = 0;
 8009bc4:	6205      	str	r5, [r0, #32]
    hjpeg->OutDataLength = OutDataLength;
 8009bc6:	62c3      	str	r3, [r0, #44]	@ 0x2c
    hjpeg->JpegOutCount = 0;
 8009bc8:	6245      	str	r5, [r0, #36]	@ 0x24
    JPEG_Init_Process(hjpeg);
 8009bca:	f7ff fdab 	bl	8009724 <JPEG_Init_Process>
    if (JPEG_DMA_StartProcess(hjpeg) != HAL_OK)
 8009bce:	f7ff fde5 	bl	800979c <JPEG_DMA_StartProcess>
 8009bd2:	b128      	cbz	r0, 8009be0 <HAL_JPEG_Decode_DMA+0x5c>
      hjpeg->State = HAL_JPEG_STATE_ERROR;
 8009bd4:	2306      	movs	r3, #6
      __HAL_UNLOCK(hjpeg);
 8009bd6:	f884 504c 	strb.w	r5, [r4, #76]	@ 0x4c
      hjpeg->State = HAL_JPEG_STATE_ERROR;
 8009bda:	f884 304d 	strb.w	r3, [r4, #77]	@ 0x4d
    return HAL_ERROR;
 8009bde:	2001      	movs	r0, #1
}
 8009be0:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_UNLOCK(hjpeg);
 8009be2:	2300      	movs	r3, #0
 8009be4:	f880 304c 	strb.w	r3, [r0, #76]	@ 0x4c
  __HAL_LOCK(hjpeg);
 8009be8:	2002      	movs	r0, #2
 8009bea:	e7f9      	b.n	8009be0 <HAL_JPEG_Decode_DMA+0x5c>

08009bec <HAL_JPEG_Pause>:
  if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
 8009bec:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 8009bee:	f003 030c 	and.w	r3, r3, #12
 8009bf2:	2b0c      	cmp	r3, #12
 8009bf4:	d10d      	bne.n	8009c12 <HAL_JPEG_Pause+0x26>
    if ((XferSelection & JPEG_PAUSE_RESUME_INPUT) == JPEG_PAUSE_RESUME_INPUT)
 8009bf6:	07cb      	lsls	r3, r1, #31
 8009bf8:	d503      	bpl.n	8009c02 <HAL_JPEG_Pause+0x16>
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_INPUT;
 8009bfa:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 8009bfc:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8009c00:	6543      	str	r3, [r0, #84]	@ 0x54
    if ((XferSelection & JPEG_PAUSE_RESUME_OUTPUT) == JPEG_PAUSE_RESUME_OUTPUT)
 8009c02:	0789      	lsls	r1, r1, #30
 8009c04:	d503      	bpl.n	8009c0e <HAL_JPEG_Pause+0x22>
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_OUTPUT;
 8009c06:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 8009c08:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8009c0c:	6543      	str	r3, [r0, #84]	@ 0x54
}
 8009c0e:	2000      	movs	r0, #0
 8009c10:	4770      	bx	lr
  else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 8009c12:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 8009c14:	f003 030c 	and.w	r3, r3, #12
 8009c18:	2b08      	cmp	r3, #8
 8009c1a:	d1f8      	bne.n	8009c0e <HAL_JPEG_Pause+0x22>
    if ((XferSelection & JPEG_PAUSE_RESUME_INPUT) == JPEG_PAUSE_RESUME_INPUT)
 8009c1c:	f011 0301 	ands.w	r3, r1, #1
 8009c20:	d004      	beq.n	8009c2c <HAL_JPEG_Pause+0x40>
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_INPUT;
 8009c22:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 8009c24:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8009c28:	6543      	str	r3, [r0, #84]	@ 0x54
      mask |= (JPEG_IT_IFT | JPEG_IT_IFNF);
 8009c2a:	2306      	movs	r3, #6
    if ((XferSelection & JPEG_PAUSE_RESUME_OUTPUT) == JPEG_PAUSE_RESUME_OUTPUT)
 8009c2c:	078a      	lsls	r2, r1, #30
 8009c2e:	d505      	bpl.n	8009c3c <HAL_JPEG_Pause+0x50>
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_OUTPUT;
 8009c30:	6d42      	ldr	r2, [r0, #84]	@ 0x54
      mask |= (JPEG_IT_OFT | JPEG_IT_OFNE | JPEG_IT_EOC);
 8009c32:	f043 0328 	orr.w	r3, r3, #40	@ 0x28
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_OUTPUT;
 8009c36:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8009c3a:	6542      	str	r2, [r0, #84]	@ 0x54
    __HAL_JPEG_DISABLE_IT(hjpeg, mask);
 8009c3c:	6801      	ldr	r1, [r0, #0]
 8009c3e:	6b0a      	ldr	r2, [r1, #48]	@ 0x30
 8009c40:	ea22 0303 	bic.w	r3, r2, r3
 8009c44:	630b      	str	r3, [r1, #48]	@ 0x30
 8009c46:	e7e2      	b.n	8009c0e <HAL_JPEG_Pause+0x22>

08009c48 <HAL_JPEG_ConfigInputBuffer>:
  hjpeg->pJpegInBuffPtr =  pNewInputBuffer;
 8009c48:	6181      	str	r1, [r0, #24]
  hjpeg->InDataLength = InDataLength;
 8009c4a:	6282      	str	r2, [r0, #40]	@ 0x28
}
 8009c4c:	4770      	bx	lr

08009c4e <HAL_JPEG_ConfigOutputBuffer>:
  hjpeg->pJpegOutBuffPtr = pNewOutputBuffer;
 8009c4e:	61c1      	str	r1, [r0, #28]
  hjpeg->OutDataLength = OutDataLength;
 8009c50:	62c2      	str	r2, [r0, #44]	@ 0x2c
}
 8009c52:	4770      	bx	lr

08009c54 <HAL_JPEG_EncodeCpltCallback>:
__weak void HAL_JPEG_EncodeCpltCallback(JPEG_HandleTypeDef *hjpeg)
 8009c54:	4770      	bx	lr

08009c56 <JPEG_MDMAErrorCallback>:
  JPEG_HandleTypeDef *hjpeg = (JPEG_HandleTypeDef *)((MDMA_HandleTypeDef *)hmdma)->Parent;
 8009c56:	6c00      	ldr	r0, [r0, #64]	@ 0x40
{
 8009c58:	b508      	push	{r3, lr}
  hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 8009c5a:	6803      	ldr	r3, [r0, #0]
 8009c5c:	681a      	ldr	r2, [r3, #0]
 8009c5e:	f022 0201 	bic.w	r2, r2, #1
 8009c62:	601a      	str	r2, [r3, #0]
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 8009c64:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009c66:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 8009c6a:	631a      	str	r2, [r3, #48]	@ 0x30
  hjpeg->State = HAL_JPEG_STATE_READY;
 8009c6c:	2301      	movs	r3, #1
 8009c6e:	f880 304d 	strb.w	r3, [r0, #77]	@ 0x4d
  hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 8009c72:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 8009c74:	f043 0304 	orr.w	r3, r3, #4
 8009c78:	6503      	str	r3, [r0, #80]	@ 0x50
  HAL_JPEG_ErrorCallback(hjpeg);
 8009c7a:	f7f8 fcf9 	bl	8002670 <HAL_JPEG_ErrorCallback>
}
 8009c7e:	bd08      	pop	{r3, pc}

08009c80 <JPEG_ReadInputData>:
  if ((hjpeg->InDataLength == 0UL) || (nbRequestWords == 0UL))
 8009c80:	6a82      	ldr	r2, [r0, #40]	@ 0x28
{
 8009c82:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c84:	4604      	mov	r4, r0
 8009c86:	460d      	mov	r5, r1
  if ((hjpeg->InDataLength == 0UL) || (nbRequestWords == 0UL))
 8009c88:	b922      	cbnz	r2, 8009c94 <JPEG_ReadInputData+0x14>
    (void) HAL_JPEG_Pause(hjpeg, JPEG_PAUSE_RESUME_INPUT);
 8009c8a:	2101      	movs	r1, #1
 8009c8c:	f7ff ffae 	bl	8009bec <HAL_JPEG_Pause>
  uint32_t nb_bytes = 0;
 8009c90:	2200      	movs	r2, #0
 8009c92:	e004      	b.n	8009c9e <JPEG_ReadInputData+0x1e>
  else if (hjpeg->InDataLength > hjpeg->JpegInCount)
 8009c94:	6a03      	ldr	r3, [r0, #32]
 8009c96:	429a      	cmp	r2, r3
    nb_bytes = hjpeg->InDataLength - hjpeg->JpegInCount;
 8009c98:	6a03      	ldr	r3, [r0, #32]
  else if (hjpeg->InDataLength > hjpeg->JpegInCount)
 8009c9a:	d924      	bls.n	8009ce6 <JPEG_ReadInputData+0x66>
    nb_bytes = hjpeg->InDataLength - hjpeg->JpegInCount;
 8009c9c:	1ad2      	subs	r2, r2, r3
  if (((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL) && (nb_bytes > 0UL))
 8009c9e:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8009ca0:	f413 5380 	ands.w	r3, r3, #4096	@ 0x1000
 8009ca4:	d11e      	bne.n	8009ce4 <JPEG_ReadInputData+0x64>
 8009ca6:	b1ea      	cbz	r2, 8009ce4 <JPEG_ReadInputData+0x64>
    if (nb_words >= nbRequestWords)
 8009ca8:	ebb5 0f92 	cmp.w	r5, r2, lsr #2
 8009cac:	69a1      	ldr	r1, [r4, #24]
    nb_words = nb_bytes / 4UL;
 8009cae:	ea4f 0692 	mov.w	r6, r2, lsr #2
    if (nb_words >= nbRequestWords)
 8009cb2:	d827      	bhi.n	8009d04 <JPEG_ReadInputData+0x84>
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 8009cb4:	6827      	ldr	r7, [r4, #0]
        input_count = hjpeg->JpegInCount;
 8009cb6:	6a26      	ldr	r6, [r4, #32]
      for (index = 0; index < nbRequestWords; index++)
 8009cb8:	3301      	adds	r3, #1
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 8009cba:	1988      	adds	r0, r1, r6
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 8009cbc:	5d8e      	ldrb	r6, [r1, r6]
      for (index = 0; index < nbRequestWords; index++)
 8009cbe:	429d      	cmp	r5, r3
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 8009cc0:	7882      	ldrb	r2, [r0, #2]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 8009cc2:	f890 c001 	ldrb.w	ip, [r0, #1]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 8009cc6:	ea4f 4202 	mov.w	r2, r2, lsl #16
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
 8009cca:	78c0      	ldrb	r0, [r0, #3]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 8009ccc:	ea42 220c 	orr.w	r2, r2, ip, lsl #8
 8009cd0:	ea42 0206 	orr.w	r2, r2, r6
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 8009cd4:	ea42 6200 	orr.w	r2, r2, r0, lsl #24
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 8009cd8:	643a      	str	r2, [r7, #64]	@ 0x40
        hjpeg->JpegInCount += 4UL;
 8009cda:	6a22      	ldr	r2, [r4, #32]
 8009cdc:	f102 0204 	add.w	r2, r2, #4
 8009ce0:	6222      	str	r2, [r4, #32]
      for (index = 0; index < nbRequestWords; index++)
 8009ce2:	d1e8      	bne.n	8009cb6 <JPEG_ReadInputData+0x36>
}
 8009ce4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if (hjpeg->InDataLength == hjpeg->JpegInCount)
 8009ce6:	429a      	cmp	r2, r3
 8009ce8:	d1d2      	bne.n	8009c90 <JPEG_ReadInputData+0x10>
    HAL_JPEG_GetDataCallback(hjpeg, hjpeg->JpegInCount);
 8009cea:	6a01      	ldr	r1, [r0, #32]
 8009cec:	f7f8 fc52 	bl	8002594 <HAL_JPEG_GetDataCallback>
    if (hjpeg->InDataLength > 4UL)
 8009cf0:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8009cf2:	2b04      	cmp	r3, #4
      hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % 4UL);
 8009cf4:	bf84      	itt	hi
 8009cf6:	f023 0303 	bichi.w	r3, r3, #3
 8009cfa:	62a3      	strhi	r3, [r4, #40]	@ 0x28
    hjpeg->JpegInCount = 0;
 8009cfc:	2300      	movs	r3, #0
    nb_bytes = hjpeg->InDataLength;
 8009cfe:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
    hjpeg->JpegInCount = 0;
 8009d00:	6223      	str	r3, [r4, #32]
    nb_bytes = hjpeg->InDataLength;
 8009d02:	e7cc      	b.n	8009c9e <JPEG_ReadInputData+0x1e>
      if (nb_words > 0UL)
 8009d04:	2a03      	cmp	r2, #3
 8009d06:	d918      	bls.n	8009d3a <JPEG_ReadInputData+0xba>
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 8009d08:	6827      	ldr	r7, [r4, #0]
          input_count = hjpeg->JpegInCount;
 8009d0a:	6a25      	ldr	r5, [r4, #32]
        for (index = 0; index < nb_words; index++)
 8009d0c:	3301      	adds	r3, #1
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 8009d0e:	1948      	adds	r0, r1, r5
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 8009d10:	5d4d      	ldrb	r5, [r1, r5]
        for (index = 0; index < nb_words; index++)
 8009d12:	429e      	cmp	r6, r3
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 8009d14:	7882      	ldrb	r2, [r0, #2]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 8009d16:	f890 c001 	ldrb.w	ip, [r0, #1]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 8009d1a:	ea4f 4202 	mov.w	r2, r2, lsl #16
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
 8009d1e:	78c0      	ldrb	r0, [r0, #3]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 8009d20:	ea42 220c 	orr.w	r2, r2, ip, lsl #8
 8009d24:	ea42 0205 	orr.w	r2, r2, r5
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 8009d28:	ea42 6200 	orr.w	r2, r2, r0, lsl #24
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 8009d2c:	643a      	str	r2, [r7, #64]	@ 0x40
          hjpeg->JpegInCount += 4UL;
 8009d2e:	6a22      	ldr	r2, [r4, #32]
 8009d30:	f102 0204 	add.w	r2, r2, #4
 8009d34:	6222      	str	r2, [r4, #32]
        for (index = 0; index < nb_words; index++)
 8009d36:	d1e8      	bne.n	8009d0a <JPEG_ReadInputData+0x8a>
 8009d38:	e7d4      	b.n	8009ce4 <JPEG_ReadInputData+0x64>
        for (index = 0; index < nb_bytes; index++)
 8009d3a:	4618      	mov	r0, r3
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
 8009d3c:	6a25      	ldr	r5, [r4, #32]
 8009d3e:	00c6      	lsls	r6, r0, #3
        for (index = 0; index < nb_bytes; index++)
 8009d40:	3001      	adds	r0, #1
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
 8009d42:	5d4d      	ldrb	r5, [r1, r5]
        for (index = 0; index < nb_bytes; index++)
 8009d44:	4282      	cmp	r2, r0
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
 8009d46:	fa05 f506 	lsl.w	r5, r5, r6
 8009d4a:	ea43 0305 	orr.w	r3, r3, r5
          hjpeg->JpegInCount++;
 8009d4e:	6a25      	ldr	r5, [r4, #32]
 8009d50:	f105 0501 	add.w	r5, r5, #1
 8009d54:	6225      	str	r5, [r4, #32]
        for (index = 0; index < nb_bytes; index++)
 8009d56:	d1f1      	bne.n	8009d3c <JPEG_ReadInputData+0xbc>
        hjpeg->Instance->DIR = dataword;
 8009d58:	6822      	ldr	r2, [r4, #0]
 8009d5a:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8009d5c:	e7c2      	b.n	8009ce4 <JPEG_ReadInputData+0x64>

08009d5e <JPEG_MDMAInCpltCallback>:
{
 8009d5e:	b537      	push	{r0, r1, r2, r4, r5, lr}
  JPEG_HandleTypeDef *hjpeg = (JPEG_HandleTypeDef *)((MDMA_HandleTypeDef *)hmdma)->Parent;
 8009d60:	6c04      	ldr	r4, [r0, #64]	@ 0x40
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 8009d62:	6822      	ldr	r2, [r4, #0]
 8009d64:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 8009d66:	f023 037e 	bic.w	r3, r3, #126	@ 0x7e
 8009d6a:	6313      	str	r3, [r2, #48]	@ 0x30
  if ((hjpeg->Context & (JPEG_CONTEXT_METHOD_MASK | JPEG_CONTEXT_ENDING_DMA)) == JPEG_CONTEXT_DMA)
 8009d6c:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8009d6e:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8009d72:	f023 0373 	bic.w	r3, r3, #115	@ 0x73
 8009d76:	041b      	lsls	r3, r3, #16
 8009d78:	0c1b      	lsrs	r3, r3, #16
 8009d7a:	2b0c      	cmp	r3, #12
 8009d7c:	d11a      	bne.n	8009db4 <JPEG_MDMAInCpltCallback+0x56>
    inXfrSize = hjpeg->hdmain->Init.BufferTransferLength;
 8009d7e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8009d80:	6a9d      	ldr	r5, [r3, #40]	@ 0x28
    hjpeg->JpegInCount = hjpeg->InDataLength - (hmdma->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
 8009d82:	6803      	ldr	r3, [r0, #0]
    HAL_JPEG_GetDataCallback(hjpeg, hjpeg->JpegInCount);
 8009d84:	4620      	mov	r0, r4
    hjpeg->JpegInCount = hjpeg->InDataLength - (hmdma->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
 8009d86:	695a      	ldr	r2, [r3, #20]
 8009d88:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8009d8a:	f3c2 0210 	ubfx	r2, r2, #0, #17
 8009d8e:	1a9b      	subs	r3, r3, r2
 8009d90:	6223      	str	r3, [r4, #32]
    HAL_JPEG_GetDataCallback(hjpeg, hjpeg->JpegInCount);
 8009d92:	6a21      	ldr	r1, [r4, #32]
 8009d94:	f7f8 fbfe 	bl	8002594 <HAL_JPEG_GetDataCallback>
    if (hjpeg->InDataLength >= inXfrSize)
 8009d98:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8009d9a:	42ab      	cmp	r3, r5
 8009d9c:	d327      	bcc.n	8009dee <JPEG_MDMAInCpltCallback+0x90>
      if (inXfrSize == 0UL)
 8009d9e:	b95d      	cbnz	r5, 8009db8 <JPEG_MDMAInCpltCallback+0x5a>
        hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 8009da0:	6d23      	ldr	r3, [r4, #80]	@ 0x50
        HAL_JPEG_ErrorCallback(hjpeg);
 8009da2:	4620      	mov	r0, r4
        hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 8009da4:	f043 0304 	orr.w	r3, r3, #4
 8009da8:	6523      	str	r3, [r4, #80]	@ 0x50
        hjpeg->State = HAL_JPEG_STATE_ERROR;
 8009daa:	2306      	movs	r3, #6
 8009dac:	f884 304d 	strb.w	r3, [r4, #77]	@ 0x4d
        HAL_JPEG_ErrorCallback(hjpeg);
 8009db0:	f7f8 fc5e 	bl	8002670 <HAL_JPEG_ErrorCallback>
}
 8009db4:	b003      	add	sp, #12
 8009db6:	bd30      	pop	{r4, r5, pc}
      hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % inXfrSize);
 8009db8:	fbb3 f2f5 	udiv	r2, r3, r5
 8009dbc:	fb05 3212 	mls	r2, r5, r2, r3
 8009dc0:	1a9b      	subs	r3, r3, r2
        hjpeg->InDataLength = ((hjpeg->InDataLength / 4UL) + 1UL) * 4UL;
 8009dc2:	62a3      	str	r3, [r4, #40]	@ 0x28
    if (((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL) && (hjpeg->InDataLength > 0UL))
 8009dc4:	6d63      	ldr	r3, [r4, #84]	@ 0x54
      if (HAL_MDMA_Start_IT(hjpeg->hdmain, (uint32_t)hjpeg->pJpegInBuffPtr, (uint32_t)&hjpeg->Instance->DIR,
 8009dc6:	6822      	ldr	r2, [r4, #0]
    if (((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL) && (hjpeg->InDataLength > 0UL))
 8009dc8:	04db      	lsls	r3, r3, #19
 8009dca:	d40a      	bmi.n	8009de2 <JPEG_MDMAInCpltCallback+0x84>
 8009dcc:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8009dce:	b143      	cbz	r3, 8009de2 <JPEG_MDMAInCpltCallback+0x84>
      if (HAL_MDMA_Start_IT(hjpeg->hdmain, (uint32_t)hjpeg->pJpegInBuffPtr, (uint32_t)&hjpeg->Instance->DIR,
 8009dd0:	2101      	movs	r1, #1
 8009dd2:	3240      	adds	r2, #64	@ 0x40
 8009dd4:	9100      	str	r1, [sp, #0]
 8009dd6:	69a1      	ldr	r1, [r4, #24]
 8009dd8:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8009dda:	f000 fd58 	bl	800a88e <HAL_MDMA_Start_IT>
 8009dde:	2800      	cmp	r0, #0
 8009de0:	d1de      	bne.n	8009da0 <JPEG_MDMAInCpltCallback+0x42>
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_EOC | JPEG_IT_HPD);
 8009de2:	6822      	ldr	r2, [r4, #0]
 8009de4:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 8009de6:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8009dea:	6313      	str	r3, [r2, #48]	@ 0x30
 8009dec:	e7e2      	b.n	8009db4 <JPEG_MDMAInCpltCallback+0x56>
    else if (hjpeg->InDataLength > 0UL)
 8009dee:	2b00      	cmp	r3, #0
 8009df0:	d0e8      	beq.n	8009dc4 <JPEG_MDMAInCpltCallback+0x66>
      if ((hjpeg->InDataLength % 4UL) != 0UL)
 8009df2:	079a      	lsls	r2, r3, #30
 8009df4:	d0e6      	beq.n	8009dc4 <JPEG_MDMAInCpltCallback+0x66>
        hjpeg->InDataLength = ((hjpeg->InDataLength / 4UL) + 1UL) * 4UL;
 8009df6:	f023 0303 	bic.w	r3, r3, #3
 8009dfa:	3304      	adds	r3, #4
 8009dfc:	e7e1      	b.n	8009dc2 <JPEG_MDMAInCpltCallback+0x64>

08009dfe <JPEG_StoreOutputData>:
  if (hjpeg->OutDataLength >= (hjpeg->JpegOutCount + (nbOutputWords * 4UL)))
 8009dfe:	6a42      	ldr	r2, [r0, #36]	@ 0x24
{
 8009e00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (hjpeg->OutDataLength >= (hjpeg->JpegOutCount + (nbOutputWords * 4UL)))
 8009e02:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8009e06:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
{
 8009e08:	4604      	mov	r4, r0
  if (hjpeg->OutDataLength >= (hjpeg->JpegOutCount + (nbOutputWords * 4UL)))
 8009e0a:	4293      	cmp	r3, r2
 8009e0c:	d32a      	bcc.n	8009e64 <JPEG_StoreOutputData+0x66>
    for (index = 0; index < nbOutputWords; index++)
 8009e0e:	2200      	movs	r2, #0
      dataword = hjpeg->Instance->DOR;
 8009e10:	6823      	ldr	r3, [r4, #0]
    for (index = 0; index < nbOutputWords; index++)
 8009e12:	3201      	adds	r2, #1
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
 8009e14:	69e5      	ldr	r5, [r4, #28]
      dataword = hjpeg->Instance->DOR;
 8009e16:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
    for (index = 0; index < nbOutputWords; index++)
 8009e18:	4291      	cmp	r1, r2
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
 8009e1a:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 8009e1c:	542b      	strb	r3, [r5, r0]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataword & 0x0000FF00UL) >> 8);
 8009e1e:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 8009e20:	69e0      	ldr	r0, [r4, #28]
 8009e22:	4428      	add	r0, r5
 8009e24:	ea4f 2513 	mov.w	r5, r3, lsr #8
 8009e28:	7045      	strb	r5, [r0, #1]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
 8009e2a:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 8009e2c:	69e0      	ldr	r0, [r4, #28]
 8009e2e:	4428      	add	r0, r5
 8009e30:	ea4f 4513 	mov.w	r5, r3, lsr #16
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
 8009e34:	ea4f 6313 	mov.w	r3, r3, lsr #24
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
 8009e38:	7085      	strb	r5, [r0, #2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
 8009e3a:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 8009e3c:	69e0      	ldr	r0, [r4, #28]
 8009e3e:	4428      	add	r0, r5
 8009e40:	70c3      	strb	r3, [r0, #3]
      hjpeg->JpegOutCount += 4UL;
 8009e42:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8009e44:	f103 0304 	add.w	r3, r3, #4
 8009e48:	6263      	str	r3, [r4, #36]	@ 0x24
    for (index = 0; index < nbOutputWords; index++)
 8009e4a:	d1e1      	bne.n	8009e10 <JPEG_StoreOutputData+0x12>
    if (hjpeg->OutDataLength == hjpeg->JpegOutCount)
 8009e4c:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8009e4e:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8009e50:	429a      	cmp	r2, r3
 8009e52:	d106      	bne.n	8009e62 <JPEG_StoreOutputData+0x64>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8009e54:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8009e56:	69e1      	ldr	r1, [r4, #28]
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8009e58:	4620      	mov	r0, r4
 8009e5a:	f7f8 fbb9 	bl	80025d0 <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
 8009e5e:	2300      	movs	r3, #0
 8009e60:	6263      	str	r3, [r4, #36]	@ 0x24
}
 8009e62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if (hjpeg->OutDataLength > hjpeg->JpegOutCount)
 8009e64:	6a42      	ldr	r2, [r0, #36]	@ 0x24
 8009e66:	4293      	cmp	r3, r2
 8009e68:	d9fb      	bls.n	8009e62 <JPEG_StoreOutputData+0x64>
    nb_words = (hjpeg->OutDataLength - hjpeg->JpegOutCount) / 4UL;
 8009e6a:	6a42      	ldr	r2, [r0, #36]	@ 0x24
    for (index = 0; index < nb_words; index++)
 8009e6c:	2000      	movs	r0, #0
    nb_words = (hjpeg->OutDataLength - hjpeg->JpegOutCount) / 4UL;
 8009e6e:	1a9b      	subs	r3, r3, r2
 8009e70:	089a      	lsrs	r2, r3, #2
    for (index = 0; index < nb_words; index++)
 8009e72:	4290      	cmp	r0, r2
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
 8009e74:	69e1      	ldr	r1, [r4, #28]
    for (index = 0; index < nb_words; index++)
 8009e76:	d105      	bne.n	8009e84 <JPEG_StoreOutputData+0x86>
    if (hjpeg->OutDataLength == hjpeg->JpegOutCount)
 8009e78:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8009e7a:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8009e7c:	429f      	cmp	r7, r3
 8009e7e:	d119      	bne.n	8009eb4 <JPEG_StoreOutputData+0xb6>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8009e80:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8009e82:	e7e9      	b.n	8009e58 <JPEG_StoreOutputData+0x5a>
      dataword = hjpeg->Instance->DOR;
 8009e84:	6823      	ldr	r3, [r4, #0]
    for (index = 0; index < nb_words; index++)
 8009e86:	3001      	adds	r0, #1
      dataword = hjpeg->Instance->DOR;
 8009e88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
 8009e8a:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 8009e8c:	554b      	strb	r3, [r1, r5]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataword & 0x0000FF00UL) >> 8);
 8009e8e:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 8009e90:	69e1      	ldr	r1, [r4, #28]
 8009e92:	4429      	add	r1, r5
 8009e94:	0a1d      	lsrs	r5, r3, #8
 8009e96:	704d      	strb	r5, [r1, #1]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
 8009e98:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 8009e9a:	69e1      	ldr	r1, [r4, #28]
 8009e9c:	4429      	add	r1, r5
 8009e9e:	0c1d      	lsrs	r5, r3, #16
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
 8009ea0:	0e1b      	lsrs	r3, r3, #24
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
 8009ea2:	708d      	strb	r5, [r1, #2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
 8009ea4:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 8009ea6:	69e1      	ldr	r1, [r4, #28]
 8009ea8:	4429      	add	r1, r5
 8009eaa:	70cb      	strb	r3, [r1, #3]
      hjpeg->JpegOutCount += 4UL;
 8009eac:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8009eae:	3304      	adds	r3, #4
 8009eb0:	6263      	str	r3, [r4, #36]	@ 0x24
    for (index = 0; index < nb_words; index++)
 8009eb2:	e7de      	b.n	8009e72 <JPEG_StoreOutputData+0x74>
      nb_bytes = hjpeg->OutDataLength - hjpeg->JpegOutCount;
 8009eb4:	6a65      	ldr	r5, [r4, #36]	@ 0x24
      for (index = 0; index < nb_bytes; index++)
 8009eb6:	2200      	movs	r2, #0
      dataword = hjpeg->Instance->DOR;
 8009eb8:	6823      	ldr	r3, [r4, #0]
      nb_bytes = hjpeg->OutDataLength - hjpeg->JpegOutCount;
 8009eba:	1b78      	subs	r0, r7, r5
      dataword = hjpeg->Instance->DOR;
 8009ebc:	6c5e      	ldr	r6, [r3, #68]	@ 0x44
      for (index = 0; index < nb_bytes; index++)
 8009ebe:	4282      	cmp	r2, r0
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * (index & 0x3UL))) & 0xFFUL);
 8009ec0:	69e1      	ldr	r1, [r4, #28]
      for (index = 0; index < nb_bytes; index++)
 8009ec2:	d114      	bne.n	8009eee <JPEG_StoreOutputData+0xf0>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8009ec4:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8009ec6:	4620      	mov	r0, r4
 8009ec8:	f7f8 fb82 	bl	80025d0 <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
 8009ecc:	2300      	movs	r3, #0
 8009ece:	6263      	str	r3, [r4, #36]	@ 0x24
      nb_bytes = 4UL - nb_bytes;
 8009ed0:	1d2b      	adds	r3, r5, #4
 8009ed2:	1bdb      	subs	r3, r3, r7
      for (index = nb_bytes; index < 4UL; index++)
 8009ed4:	2b03      	cmp	r3, #3
 8009ed6:	d8c4      	bhi.n	8009e62 <JPEG_StoreOutputData+0x64>
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * index)) & 0xFFUL);
 8009ed8:	00da      	lsls	r2, r3, #3
 8009eda:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8009edc:	69e0      	ldr	r0, [r4, #28]
      for (index = nb_bytes; index < 4UL; index++)
 8009ede:	3301      	adds	r3, #1
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * index)) & 0xFFUL);
 8009ee0:	fa26 f202 	lsr.w	r2, r6, r2
 8009ee4:	5442      	strb	r2, [r0, r1]
        hjpeg->JpegOutCount++;
 8009ee6:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8009ee8:	3201      	adds	r2, #1
 8009eea:	6262      	str	r2, [r4, #36]	@ 0x24
      for (index = nb_bytes; index < 4UL; index++)
 8009eec:	e7f2      	b.n	8009ed4 <JPEG_StoreOutputData+0xd6>
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * (index & 0x3UL))) & 0xFFUL);
 8009eee:	f002 0303 	and.w	r3, r2, #3
 8009ef2:	f8d4 c024 	ldr.w	ip, [r4, #36]	@ 0x24
      for (index = 0; index < nb_bytes; index++)
 8009ef6:	3201      	adds	r2, #1
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * (index & 0x3UL))) & 0xFFUL);
 8009ef8:	00db      	lsls	r3, r3, #3
 8009efa:	fa26 f303 	lsr.w	r3, r6, r3
 8009efe:	f801 300c 	strb.w	r3, [r1, ip]
        hjpeg->JpegOutCount++;
 8009f02:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8009f04:	3301      	adds	r3, #1
 8009f06:	6263      	str	r3, [r4, #36]	@ 0x24
      for (index = 0; index < nb_bytes; index++)
 8009f08:	e7d9      	b.n	8009ebe <JPEG_StoreOutputData+0xc0>

08009f0a <JPEG_Process>:
  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 8009f0a:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 8009f0c:	f003 0303 	and.w	r3, r3, #3
 8009f10:	2b02      	cmp	r3, #2
{
 8009f12:	b510      	push	{r4, lr}
 8009f14:	4604      	mov	r4, r0
  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 8009f16:	d114      	bne.n	8009f42 <JPEG_Process+0x38>
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_HPDF) != 0UL)
 8009f18:	6803      	ldr	r3, [r0, #0]
 8009f1a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009f1c:	065b      	lsls	r3, r3, #25
 8009f1e:	d510      	bpl.n	8009f42 <JPEG_Process+0x38>
      (void) HAL_JPEG_GetInfo(hjpeg, &hjpeg->Conf);
 8009f20:	1d01      	adds	r1, r0, #4
 8009f22:	f7ff fdb7 	bl	8009a94 <HAL_JPEG_GetInfo>
      hjpeg->Conf.ImageQuality = 0;
 8009f26:	2300      	movs	r3, #0
      HAL_JPEG_InfoReadyCallback(hjpeg, &hjpeg->Conf);
 8009f28:	4620      	mov	r0, r4
      hjpeg->Conf.ImageQuality = 0;
 8009f2a:	6163      	str	r3, [r4, #20]
      HAL_JPEG_InfoReadyCallback(hjpeg, &hjpeg->Conf);
 8009f2c:	f7f8 fafc 	bl	8002528 <HAL_JPEG_InfoReadyCallback>
      __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_IT_HPD);
 8009f30:	6823      	ldr	r3, [r4, #0]
 8009f32:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009f34:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009f38:	631a      	str	r2, [r3, #48]	@ 0x30
      __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_HPDF);
 8009f3a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009f3c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009f40:	639a      	str	r2, [r3, #56]	@ 0x38
  if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL)
 8009f42:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8009f44:	04d9      	lsls	r1, r3, #19
 8009f46:	d407      	bmi.n	8009f58 <JPEG_Process+0x4e>
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_IFTF) != 0UL)
 8009f48:	6823      	ldr	r3, [r4, #0]
 8009f4a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009f4c:	0792      	lsls	r2, r2, #30
 8009f4e:	d544      	bpl.n	8009fda <JPEG_Process+0xd0>
      JPEG_ReadInputData(hjpeg, JPEG_FIFO_TH_SIZE);
 8009f50:	2108      	movs	r1, #8
      JPEG_ReadInputData(hjpeg, 1);
 8009f52:	4620      	mov	r0, r4
 8009f54:	f7ff fe94 	bl	8009c80 <JPEG_ReadInputData>
  if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 8009f58:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8009f5a:	0499      	lsls	r1, r3, #18
 8009f5c:	d407      	bmi.n	8009f6e <JPEG_Process+0x64>
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFTF) != 0UL)
 8009f5e:	6823      	ldr	r3, [r4, #0]
 8009f60:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009f62:	0712      	lsls	r2, r2, #28
 8009f64:	d53e      	bpl.n	8009fe4 <JPEG_Process+0xda>
      JPEG_StoreOutputData(hjpeg, JPEG_FIFO_TH_SIZE);
 8009f66:	2108      	movs	r1, #8
      JPEG_StoreOutputData(hjpeg, 1);
 8009f68:	4620      	mov	r0, r4
 8009f6a:	f7ff ff48 	bl	8009dfe <JPEG_StoreOutputData>
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF | JPEG_FLAG_OFTF | JPEG_FLAG_OFNEF) == JPEG_FLAG_EOCF)
 8009f6e:	6823      	ldr	r3, [r4, #0]
 8009f70:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009f72:	f002 0238 	and.w	r2, r2, #56	@ 0x38
 8009f76:	2a20      	cmp	r2, #32
 8009f78:	d13c      	bne.n	8009ff4 <JPEG_Process+0xea>
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 8009f7a:	681a      	ldr	r2, [r3, #0]
 8009f7c:	f022 0201 	bic.w	r2, r2, #1
 8009f80:	601a      	str	r2, [r3, #0]
    if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 8009f82:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8009f84:	f002 020c 	and.w	r2, r2, #12
 8009f88:	2a08      	cmp	r2, #8
 8009f8a:	d103      	bne.n	8009f94 <JPEG_Process+0x8a>
      __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 8009f8c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009f8e:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 8009f92:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 8009f94:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009f96:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 8009f9a:	639a      	str	r2, [r3, #56]	@ 0x38
    if (hjpeg->JpegOutCount > 0UL)
 8009f9c:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8009f9e:	b133      	cbz	r3, 8009fae <JPEG_Process+0xa4>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8009fa0:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8009fa2:	4620      	mov	r0, r4
 8009fa4:	69e1      	ldr	r1, [r4, #28]
 8009fa6:	f7f8 fb13 	bl	80025d0 <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
 8009faa:	2300      	movs	r3, #0
 8009fac:	6263      	str	r3, [r4, #36]	@ 0x24
    tmpContext = hjpeg->Context;
 8009fae:	6d63      	ldr	r3, [r4, #84]	@ 0x54
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 8009fb0:	4620      	mov	r0, r4
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 8009fb2:	6d62      	ldr	r2, [r4, #84]	@ 0x54
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 8009fb4:	f003 0303 	and.w	r3, r3, #3
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 8009fb8:	f402 4282 	and.w	r2, r2, #16640	@ 0x4100
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 8009fbc:	2b02      	cmp	r3, #2
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 8009fbe:	6562      	str	r2, [r4, #84]	@ 0x54
    __HAL_UNLOCK(hjpeg);
 8009fc0:	f04f 0200 	mov.w	r2, #0
 8009fc4:	f884 204c 	strb.w	r2, [r4, #76]	@ 0x4c
    hjpeg->State = HAL_JPEG_STATE_READY;
 8009fc8:	f04f 0201 	mov.w	r2, #1
 8009fcc:	f884 204d 	strb.w	r2, [r4, #77]	@ 0x4d
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 8009fd0:	d10d      	bne.n	8009fee <JPEG_Process+0xe4>
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 8009fd2:	f7f8 fb4f 	bl	8002674 <HAL_JPEG_DecodeCpltCallback>
    return JPEG_PROCESS_DONE;
 8009fd6:	2001      	movs	r0, #1
}
 8009fd8:	bd10      	pop	{r4, pc}
    else if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_IFNFF) != 0UL)
 8009fda:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009fdc:	0758      	lsls	r0, r3, #29
 8009fde:	d5bb      	bpl.n	8009f58 <JPEG_Process+0x4e>
      JPEG_ReadInputData(hjpeg, 1);
 8009fe0:	2101      	movs	r1, #1
 8009fe2:	e7b6      	b.n	8009f52 <JPEG_Process+0x48>
    else if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) != 0UL)
 8009fe4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009fe6:	06db      	lsls	r3, r3, #27
 8009fe8:	d5c1      	bpl.n	8009f6e <JPEG_Process+0x64>
      JPEG_StoreOutputData(hjpeg, 1);
 8009fea:	2101      	movs	r1, #1
 8009fec:	e7bc      	b.n	8009f68 <JPEG_Process+0x5e>
      HAL_JPEG_EncodeCpltCallback(hjpeg);
 8009fee:	f7ff fe31 	bl	8009c54 <HAL_JPEG_EncodeCpltCallback>
 8009ff2:	e7f0      	b.n	8009fd6 <JPEG_Process+0xcc>
  return JPEG_PROCESS_ONGOING;
 8009ff4:	2000      	movs	r0, #0
 8009ff6:	e7ef      	b.n	8009fd8 <JPEG_Process+0xce>

08009ff8 <JPEG_DMA_PollResidualData>:
{
 8009ff8:	b570      	push	{r4, r5, r6, lr}
 8009ffa:	4604      	mov	r4, r0
 8009ffc:	2610      	movs	r6, #16
    if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 8009ffe:	6d65      	ldr	r5, [r4, #84]	@ 0x54
      if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) != 0UL)
 800a000:	6823      	ldr	r3, [r4, #0]
    if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 800a002:	f415 5500 	ands.w	r5, r5, #8192	@ 0x2000
 800a006:	d122      	bne.n	800a04e <JPEG_DMA_PollResidualData+0x56>
      if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) != 0UL)
 800a008:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a00a:	06d0      	lsls	r0, r2, #27
 800a00c:	d51f      	bpl.n	800a04e <JPEG_DMA_PollResidualData+0x56>
        dataOut = hjpeg->Instance->DOR;
 800a00e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataOut & 0x000000FFUL);
 800a010:	69e1      	ldr	r1, [r4, #28]
 800a012:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800a014:	548b      	strb	r3, [r1, r2]
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataOut & 0x0000FF00UL) >> 8);
 800a016:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 800a018:	69e2      	ldr	r2, [r4, #28]
 800a01a:	440a      	add	r2, r1
 800a01c:	0a19      	lsrs	r1, r3, #8
 800a01e:	7051      	strb	r1, [r2, #1]
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataOut & 0x00FF0000UL) >> 16);
 800a020:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 800a022:	69e2      	ldr	r2, [r4, #28]
 800a024:	440a      	add	r2, r1
 800a026:	0c19      	lsrs	r1, r3, #16
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataOut & 0xFF000000UL) >> 24);
 800a028:	0e1b      	lsrs	r3, r3, #24
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataOut & 0x00FF0000UL) >> 16);
 800a02a:	7091      	strb	r1, [r2, #2]
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataOut & 0xFF000000UL) >> 24);
 800a02c:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 800a02e:	69e2      	ldr	r2, [r4, #28]
 800a030:	440a      	add	r2, r1
 800a032:	70d3      	strb	r3, [r2, #3]
        hjpeg->JpegOutCount += 4UL;
 800a034:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800a036:	3304      	adds	r3, #4
 800a038:	6263      	str	r3, [r4, #36]	@ 0x24
        if (hjpeg->JpegOutCount == hjpeg->OutDataLength)
 800a03a:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800a03c:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800a03e:	429a      	cmp	r2, r3
 800a040:	d105      	bne.n	800a04e <JPEG_DMA_PollResidualData+0x56>
          HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800a042:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800a044:	4620      	mov	r0, r4
 800a046:	69e1      	ldr	r1, [r4, #28]
 800a048:	f7f8 fac2 	bl	80025d0 <HAL_JPEG_DataReadyCallback>
          hjpeg->JpegOutCount = 0;
 800a04c:	6265      	str	r5, [r4, #36]	@ 0x24
  for (count = JPEG_FIFO_SIZE; count > 0UL; count--)
 800a04e:	3e01      	subs	r6, #1
 800a050:	d1d5      	bne.n	8009ffe <JPEG_DMA_PollResidualData+0x6>
  if ((__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) == 0UL) || ((tmpContext & JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL))
 800a052:	6823      	ldr	r3, [r4, #0]
  tmpContext = hjpeg->Context;
 800a054:	6d62      	ldr	r2, [r4, #84]	@ 0x54
  if ((__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) == 0UL) || ((tmpContext & JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL))
 800a056:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800a058:	06c9      	lsls	r1, r1, #27
 800a05a:	d501      	bpl.n	800a060 <JPEG_DMA_PollResidualData+0x68>
 800a05c:	0492      	lsls	r2, r2, #18
 800a05e:	d420      	bmi.n	800a0a2 <JPEG_DMA_PollResidualData+0xaa>
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 800a060:	681a      	ldr	r2, [r3, #0]
 800a062:	f022 0201 	bic.w	r2, r2, #1
 800a066:	601a      	str	r2, [r3, #0]
    if (hjpeg->JpegOutCount > 0UL)
 800a068:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800a06a:	b133      	cbz	r3, 800a07a <JPEG_DMA_PollResidualData+0x82>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800a06c:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800a06e:	4620      	mov	r0, r4
 800a070:	69e1      	ldr	r1, [r4, #28]
 800a072:	f7f8 faad 	bl	80025d0 <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
 800a076:	2300      	movs	r3, #0
 800a078:	6263      	str	r3, [r4, #36]	@ 0x24
    tmpContext = hjpeg->Context;
 800a07a:	6d63      	ldr	r3, [r4, #84]	@ 0x54
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 800a07c:	4620      	mov	r0, r4
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 800a07e:	6d62      	ldr	r2, [r4, #84]	@ 0x54
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800a080:	f003 0303 	and.w	r3, r3, #3
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 800a084:	f402 4282 	and.w	r2, r2, #16640	@ 0x4100
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800a088:	2b02      	cmp	r3, #2
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 800a08a:	6562      	str	r2, [r4, #84]	@ 0x54
    __HAL_UNLOCK(hjpeg);
 800a08c:	f04f 0200 	mov.w	r2, #0
 800a090:	f884 204c 	strb.w	r2, [r4, #76]	@ 0x4c
    hjpeg->State = HAL_JPEG_STATE_READY;
 800a094:	f04f 0201 	mov.w	r2, #1
 800a098:	f884 204d 	strb.w	r2, [r4, #77]	@ 0x4d
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800a09c:	d102      	bne.n	800a0a4 <JPEG_DMA_PollResidualData+0xac>
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 800a09e:	f7f8 fae9 	bl	8002674 <HAL_JPEG_DecodeCpltCallback>
}
 800a0a2:	bd70      	pop	{r4, r5, r6, pc}
      HAL_JPEG_EncodeCpltCallback(hjpeg);
 800a0a4:	f7ff fdd6 	bl	8009c54 <HAL_JPEG_EncodeCpltCallback>
}
 800a0a8:	e7fb      	b.n	800a0a2 <JPEG_DMA_PollResidualData+0xaa>

0800a0aa <HAL_JPEG_Resume>:
  if ((hjpeg->Context & (JPEG_CONTEXT_PAUSE_INPUT | JPEG_CONTEXT_PAUSE_OUTPUT)) == 0UL)
 800a0aa:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 800a0ac:	f413 5f40 	tst.w	r3, #12288	@ 0x3000
{
 800a0b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a0b2:	4604      	mov	r4, r0
 800a0b4:	460d      	mov	r5, r1
  if ((hjpeg->Context & (JPEG_CONTEXT_PAUSE_INPUT | JPEG_CONTEXT_PAUSE_OUTPUT)) == 0UL)
 800a0b6:	d014      	beq.n	800a0e2 <HAL_JPEG_Resume+0x38>
  if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
 800a0b8:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 800a0ba:	f003 030c 	and.w	r3, r3, #12
 800a0be:	2b0c      	cmp	r3, #12
 800a0c0:	d146      	bne.n	800a150 <HAL_JPEG_Resume+0xa6>
    if ((XferSelection & JPEG_PAUSE_RESUME_INPUT) == JPEG_PAUSE_RESUME_INPUT)
 800a0c2:	07cb      	lsls	r3, r1, #31
 800a0c4:	d520      	bpl.n	800a108 <HAL_JPEG_Resume+0x5e>
      hjpeg->Context &= (~JPEG_CONTEXT_PAUSE_INPUT);
 800a0c6:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 800a0c8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a0cc:	6543      	str	r3, [r0, #84]	@ 0x54
      xfrSize = hjpeg->hdmain->Init.BufferTransferLength;
 800a0ce:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 800a0d0:	6a81      	ldr	r1, [r0, #40]	@ 0x28
      if (xfrSize == 0UL)
 800a0d2:	b941      	cbnz	r1, 800a0e6 <HAL_JPEG_Resume+0x3c>
          hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 800a0d4:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 800a0d6:	f043 0304 	orr.w	r3, r3, #4
 800a0da:	6523      	str	r3, [r4, #80]	@ 0x50
          hjpeg->State = HAL_JPEG_STATE_ERROR;
 800a0dc:	2306      	movs	r3, #6
 800a0de:	f884 304d 	strb.w	r3, [r4, #77]	@ 0x4d
    return HAL_ERROR;
 800a0e2:	2001      	movs	r0, #1
 800a0e4:	e01d      	b.n	800a122 <HAL_JPEG_Resume+0x78>
      hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % xfrSize);
 800a0e6:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800a0e8:	fbb3 f2f1 	udiv	r2, r3, r1
 800a0ec:	fb01 3212 	mls	r2, r1, r2, r3
 800a0f0:	1a9b      	subs	r3, r3, r2
 800a0f2:	62a3      	str	r3, [r4, #40]	@ 0x28
      if (hjpeg->InDataLength > 0UL)
 800a0f4:	b143      	cbz	r3, 800a108 <HAL_JPEG_Resume+0x5e>
        if (HAL_MDMA_Start_IT(hjpeg->hdmain, (uint32_t)hjpeg->pJpegInBuffPtr, (uint32_t)&hjpeg->Instance->DIR,
 800a0f6:	6822      	ldr	r2, [r4, #0]
 800a0f8:	2101      	movs	r1, #1
 800a0fa:	3240      	adds	r2, #64	@ 0x40
 800a0fc:	9100      	str	r1, [sp, #0]
 800a0fe:	69a1      	ldr	r1, [r4, #24]
 800a100:	f000 fbc5 	bl	800a88e <HAL_MDMA_Start_IT>
 800a104:	2800      	cmp	r0, #0
 800a106:	d1e5      	bne.n	800a0d4 <HAL_JPEG_Resume+0x2a>
    if ((XferSelection & JPEG_PAUSE_RESUME_OUTPUT) == JPEG_PAUSE_RESUME_OUTPUT)
 800a108:	07a8      	lsls	r0, r5, #30
 800a10a:	d509      	bpl.n	800a120 <HAL_JPEG_Resume+0x76>
      hjpeg->Context &= (~JPEG_CONTEXT_PAUSE_OUTPUT);
 800a10c:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800a10e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800a112:	6563      	str	r3, [r4, #84]	@ 0x54
      if ((hjpeg->Context & JPEG_CONTEXT_ENDING_DMA) != 0UL)
 800a114:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800a116:	0419      	lsls	r1, r3, #16
 800a118:	d505      	bpl.n	800a126 <HAL_JPEG_Resume+0x7c>
        JPEG_DMA_PollResidualData(hjpeg);
 800a11a:	4620      	mov	r0, r4
 800a11c:	f7ff ff6c 	bl	8009ff8 <JPEG_DMA_PollResidualData>
  return HAL_OK;
 800a120:	2000      	movs	r0, #0
}
 800a122:	b003      	add	sp, #12
 800a124:	bd30      	pop	{r4, r5, pc}
        xfrSize = hjpeg->hdmaout->Init.BufferTransferLength;
 800a126:	6b60      	ldr	r0, [r4, #52]	@ 0x34
 800a128:	6a81      	ldr	r1, [r0, #40]	@ 0x28
        if (xfrSize == 0UL)
 800a12a:	2900      	cmp	r1, #0
 800a12c:	d0d2      	beq.n	800a0d4 <HAL_JPEG_Resume+0x2a>
        hjpeg->OutDataLength = hjpeg->OutDataLength - (hjpeg->OutDataLength % xfrSize);
 800a12e:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800a130:	fbb3 f2f1 	udiv	r2, r3, r1
 800a134:	fb01 3212 	mls	r2, r1, r2, r3
        if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
 800a138:	6821      	ldr	r1, [r4, #0]
        hjpeg->OutDataLength = hjpeg->OutDataLength - (hjpeg->OutDataLength % xfrSize);
 800a13a:	1a9b      	subs	r3, r3, r2
        if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
 800a13c:	2201      	movs	r2, #1
 800a13e:	3144      	adds	r1, #68	@ 0x44
        hjpeg->OutDataLength = hjpeg->OutDataLength - (hjpeg->OutDataLength % xfrSize);
 800a140:	62e3      	str	r3, [r4, #44]	@ 0x2c
        if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
 800a142:	9200      	str	r2, [sp, #0]
 800a144:	69e2      	ldr	r2, [r4, #28]
 800a146:	f000 fba2 	bl	800a88e <HAL_MDMA_Start_IT>
 800a14a:	2800      	cmp	r0, #0
 800a14c:	d0e8      	beq.n	800a120 <HAL_JPEG_Resume+0x76>
 800a14e:	e7c1      	b.n	800a0d4 <HAL_JPEG_Resume+0x2a>
  else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 800a150:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 800a152:	f003 030c 	and.w	r3, r3, #12
 800a156:	2b08      	cmp	r3, #8
 800a158:	d1e2      	bne.n	800a120 <HAL_JPEG_Resume+0x76>
    if ((XferSelection & JPEG_PAUSE_RESUME_INPUT) == JPEG_PAUSE_RESUME_INPUT)
 800a15a:	f011 0301 	ands.w	r3, r1, #1
 800a15e:	d004      	beq.n	800a16a <HAL_JPEG_Resume+0xc0>
      hjpeg->Context &= (~JPEG_CONTEXT_PAUSE_INPUT);
 800a160:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 800a162:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a166:	6543      	str	r3, [r0, #84]	@ 0x54
      mask |= (JPEG_IT_IFT | JPEG_IT_IFNF);
 800a168:	2306      	movs	r3, #6
    if ((XferSelection & JPEG_PAUSE_RESUME_OUTPUT) == JPEG_PAUSE_RESUME_OUTPUT)
 800a16a:	07aa      	lsls	r2, r5, #30
 800a16c:	d505      	bpl.n	800a17a <HAL_JPEG_Resume+0xd0>
      hjpeg->Context &= (~JPEG_CONTEXT_PAUSE_OUTPUT);
 800a16e:	6d62      	ldr	r2, [r4, #84]	@ 0x54
      mask |= (JPEG_IT_OFT | JPEG_IT_OFNE | JPEG_IT_EOC);
 800a170:	f043 0328 	orr.w	r3, r3, #40	@ 0x28
      hjpeg->Context &= (~JPEG_CONTEXT_PAUSE_OUTPUT);
 800a174:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800a178:	6562      	str	r2, [r4, #84]	@ 0x54
    __HAL_JPEG_ENABLE_IT(hjpeg, mask);
 800a17a:	6821      	ldr	r1, [r4, #0]
 800a17c:	6b0a      	ldr	r2, [r1, #48]	@ 0x30
 800a17e:	4313      	orrs	r3, r2
 800a180:	630b      	str	r3, [r1, #48]	@ 0x30
 800a182:	e7cd      	b.n	800a120 <HAL_JPEG_Resume+0x76>

0800a184 <JPEG_DMA_EndProcess>:
{
 800a184:	b538      	push	{r3, r4, r5, lr}
  hjpeg->JpegOutCount = hjpeg->OutDataLength - (hjpeg->hdmaout->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
 800a186:	6b43      	ldr	r3, [r0, #52]	@ 0x34
{
 800a188:	4604      	mov	r4, r0
  hjpeg->JpegOutCount = hjpeg->OutDataLength - (hjpeg->hdmaout->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
 800a18a:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
 800a18c:	681b      	ldr	r3, [r3, #0]
 800a18e:	695b      	ldr	r3, [r3, #20]
 800a190:	f3c3 0310 	ubfx	r3, r3, #0, #17
 800a194:	1ad3      	subs	r3, r2, r3
 800a196:	6243      	str	r3, [r0, #36]	@ 0x24
  if (hjpeg->JpegOutCount == hjpeg->OutDataLength)
 800a198:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 800a19a:	429a      	cmp	r2, r3
 800a19c:	d105      	bne.n	800a1aa <JPEG_DMA_EndProcess+0x26>
    HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800a19e:	6a42      	ldr	r2, [r0, #36]	@ 0x24
 800a1a0:	69c1      	ldr	r1, [r0, #28]
 800a1a2:	f7f8 fa15 	bl	80025d0 <HAL_JPEG_DataReadyCallback>
    hjpeg->JpegOutCount = 0;
 800a1a6:	2300      	movs	r3, #0
 800a1a8:	6263      	str	r3, [r4, #36]	@ 0x24
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) == 0UL)
 800a1aa:	6823      	ldr	r3, [r4, #0]
 800a1ac:	6b5d      	ldr	r5, [r3, #52]	@ 0x34
 800a1ae:	f015 0510 	ands.w	r5, r5, #16
 800a1b2:	d124      	bne.n	800a1fe <JPEG_DMA_EndProcess+0x7a>
    if (hjpeg->JpegOutCount > 0UL)
 800a1b4:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800a1b6:	b12b      	cbz	r3, 800a1c4 <JPEG_DMA_EndProcess+0x40>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800a1b8:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800a1ba:	4620      	mov	r0, r4
 800a1bc:	69e1      	ldr	r1, [r4, #28]
 800a1be:	f7f8 fa07 	bl	80025d0 <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
 800a1c2:	6265      	str	r5, [r4, #36]	@ 0x24
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 800a1c4:	6822      	ldr	r2, [r4, #0]
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 800a1c6:	4620      	mov	r0, r4
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 800a1c8:	6813      	ldr	r3, [r2, #0]
 800a1ca:	f023 0301 	bic.w	r3, r3, #1
 800a1ce:	6013      	str	r3, [r2, #0]
    tmpContext = hjpeg->Context;
 800a1d0:	6d63      	ldr	r3, [r4, #84]	@ 0x54
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 800a1d2:	6d62      	ldr	r2, [r4, #84]	@ 0x54
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800a1d4:	f003 0303 	and.w	r3, r3, #3
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 800a1d8:	f402 4282 	and.w	r2, r2, #16640	@ 0x4100
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800a1dc:	2b02      	cmp	r3, #2
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 800a1de:	6562      	str	r2, [r4, #84]	@ 0x54
    __HAL_UNLOCK(hjpeg);
 800a1e0:	f04f 0200 	mov.w	r2, #0
 800a1e4:	f884 204c 	strb.w	r2, [r4, #76]	@ 0x4c
    hjpeg->State = HAL_JPEG_STATE_READY;
 800a1e8:	f04f 0201 	mov.w	r2, #1
 800a1ec:	f884 204d 	strb.w	r2, [r4, #77]	@ 0x4d
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800a1f0:	d102      	bne.n	800a1f8 <JPEG_DMA_EndProcess+0x74>
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 800a1f2:	f7f8 fa3f 	bl	8002674 <HAL_JPEG_DecodeCpltCallback>
}
 800a1f6:	bd38      	pop	{r3, r4, r5, pc}
      HAL_JPEG_EncodeCpltCallback(hjpeg);
 800a1f8:	f7ff fd2c 	bl	8009c54 <HAL_JPEG_EncodeCpltCallback>
 800a1fc:	e7fb      	b.n	800a1f6 <JPEG_DMA_EndProcess+0x72>
  else if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 800a1fe:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800a200:	049b      	lsls	r3, r3, #18
 800a202:	d4f8      	bmi.n	800a1f6 <JPEG_DMA_EndProcess+0x72>
    JPEG_DMA_PollResidualData(hjpeg);
 800a204:	4620      	mov	r0, r4
}
 800a206:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    JPEG_DMA_PollResidualData(hjpeg);
 800a20a:	f7ff bef5 	b.w	8009ff8 <JPEG_DMA_PollResidualData>

0800a20e <JPEG_MDMAOutAbortCallback>:
  JPEG_HandleTypeDef *hjpeg = (JPEG_HandleTypeDef *)((MDMA_HandleTypeDef *)hmdma)->Parent;
 800a20e:	6c00      	ldr	r0, [r0, #64]	@ 0x40
  if ((hjpeg->Context & JPEG_CONTEXT_ENDING_DMA) != 0UL)
 800a210:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 800a212:	041b      	lsls	r3, r3, #16
 800a214:	d501      	bpl.n	800a21a <JPEG_MDMAOutAbortCallback+0xc>
    JPEG_DMA_EndProcess(hjpeg);
 800a216:	f7ff bfb5 	b.w	800a184 <JPEG_DMA_EndProcess>
}
 800a21a:	4770      	bx	lr

0800a21c <JPEG_MDMAOutCpltCallback>:
{
 800a21c:	b513      	push	{r0, r1, r4, lr}
  JPEG_HandleTypeDef *hjpeg = (JPEG_HandleTypeDef *)((MDMA_HandleTypeDef *)hmdma)->Parent;
 800a21e:	6c04      	ldr	r4, [r0, #64]	@ 0x40
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 800a220:	6823      	ldr	r3, [r4, #0]
 800a222:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a224:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 800a228:	631a      	str	r2, [r3, #48]	@ 0x30
  if ((hjpeg->Context & (JPEG_CONTEXT_METHOD_MASK | JPEG_CONTEXT_ENDING_DMA)) ==
 800a22a:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800a22c:	f422 42ff 	bic.w	r2, r2, #32640	@ 0x7f80
 800a230:	f022 0273 	bic.w	r2, r2, #115	@ 0x73
 800a234:	0412      	lsls	r2, r2, #16
 800a236:	0c12      	lsrs	r2, r2, #16
 800a238:	2a0c      	cmp	r2, #12
 800a23a:	d125      	bne.n	800a288 <JPEG_MDMAOutCpltCallback+0x6c>
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF) == 0UL)
 800a23c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a23e:	069a      	lsls	r2, r3, #26
 800a240:	d424      	bmi.n	800a28c <JPEG_MDMAOutCpltCallback+0x70>
      hjpeg->JpegOutCount = hjpeg->OutDataLength - (hmdma->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
 800a242:	6803      	ldr	r3, [r0, #0]
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800a244:	4620      	mov	r0, r4
 800a246:	69e1      	ldr	r1, [r4, #28]
      hjpeg->JpegOutCount = hjpeg->OutDataLength - (hmdma->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
 800a248:	695a      	ldr	r2, [r3, #20]
 800a24a:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800a24c:	f3c2 0210 	ubfx	r2, r2, #0, #17
 800a250:	1a9b      	subs	r3, r3, r2
 800a252:	6263      	str	r3, [r4, #36]	@ 0x24
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800a254:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800a256:	f7f8 f9bb 	bl	80025d0 <HAL_JPEG_DataReadyCallback>
      if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 800a25a:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800a25c:	049b      	lsls	r3, r3, #18
 800a25e:	d415      	bmi.n	800a28c <JPEG_MDMAOutCpltCallback+0x70>
        if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
 800a260:	6821      	ldr	r1, [r4, #0]
 800a262:	2301      	movs	r3, #1
 800a264:	3144      	adds	r1, #68	@ 0x44
 800a266:	9300      	str	r3, [sp, #0]
 800a268:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800a26a:	69e2      	ldr	r2, [r4, #28]
 800a26c:	6b60      	ldr	r0, [r4, #52]	@ 0x34
 800a26e:	f000 fb0e 	bl	800a88e <HAL_MDMA_Start_IT>
 800a272:	b158      	cbz	r0, 800a28c <JPEG_MDMAOutCpltCallback+0x70>
          hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 800a274:	6d23      	ldr	r3, [r4, #80]	@ 0x50
          HAL_JPEG_ErrorCallback(hjpeg);
 800a276:	4620      	mov	r0, r4
          hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 800a278:	f043 0304 	orr.w	r3, r3, #4
 800a27c:	6523      	str	r3, [r4, #80]	@ 0x50
          hjpeg->State = HAL_JPEG_STATE_ERROR;
 800a27e:	2306      	movs	r3, #6
 800a280:	f884 304d 	strb.w	r3, [r4, #77]	@ 0x4d
          HAL_JPEG_ErrorCallback(hjpeg);
 800a284:	f7f8 f9f4 	bl	8002670 <HAL_JPEG_ErrorCallback>
}
 800a288:	b002      	add	sp, #8
 800a28a:	bd10      	pop	{r4, pc}
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_EOC | JPEG_IT_HPD);
 800a28c:	6822      	ldr	r2, [r4, #0]
 800a28e:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 800a290:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800a294:	6313      	str	r3, [r2, #48]	@ 0x30
 800a296:	e7f7      	b.n	800a288 <JPEG_MDMAOutCpltCallback+0x6c>

0800a298 <HAL_JPEG_IRQHandler>:
{
 800a298:	b510      	push	{r4, lr}
  switch (hjpeg->State)
 800a29a:	f890 304d 	ldrb.w	r3, [r0, #77]	@ 0x4d
{
 800a29e:	4604      	mov	r4, r0
  switch (hjpeg->State)
 800a2a0:	3b03      	subs	r3, #3
 800a2a2:	2b01      	cmp	r3, #1
 800a2a4:	d850      	bhi.n	800a348 <HAL_JPEG_IRQHandler+0xb0>
      if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 800a2a6:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 800a2a8:	f003 030c 	and.w	r3, r3, #12
 800a2ac:	2b08      	cmp	r3, #8
 800a2ae:	d103      	bne.n	800a2b8 <HAL_JPEG_IRQHandler+0x20>
}
 800a2b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        (void) JPEG_Process(hjpeg);
 800a2b4:	f7ff be29 	b.w	8009f0a <JPEG_Process>
      else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
 800a2b8:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 800a2ba:	f003 030c 	and.w	r3, r3, #12
 800a2be:	2b0c      	cmp	r3, #12
 800a2c0:	d142      	bne.n	800a348 <HAL_JPEG_IRQHandler+0xb0>
  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800a2c2:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 800a2c4:	f003 0303 	and.w	r3, r3, #3
 800a2c8:	2b02      	cmp	r3, #2
 800a2ca:	d114      	bne.n	800a2f6 <HAL_JPEG_IRQHandler+0x5e>
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_HPDF) != 0UL)
 800a2cc:	6803      	ldr	r3, [r0, #0]
 800a2ce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a2d0:	0659      	lsls	r1, r3, #25
 800a2d2:	d510      	bpl.n	800a2f6 <HAL_JPEG_IRQHandler+0x5e>
      (void) HAL_JPEG_GetInfo(hjpeg, &hjpeg->Conf);
 800a2d4:	1d01      	adds	r1, r0, #4
 800a2d6:	f7ff fbdd 	bl	8009a94 <HAL_JPEG_GetInfo>
      hjpeg->Conf.ImageQuality = 0;
 800a2da:	2300      	movs	r3, #0
      HAL_JPEG_InfoReadyCallback(hjpeg, &hjpeg->Conf);
 800a2dc:	4620      	mov	r0, r4
      hjpeg->Conf.ImageQuality = 0;
 800a2de:	6163      	str	r3, [r4, #20]
      HAL_JPEG_InfoReadyCallback(hjpeg, &hjpeg->Conf);
 800a2e0:	f7f8 f922 	bl	8002528 <HAL_JPEG_InfoReadyCallback>
      __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_IT_HPD);
 800a2e4:	6823      	ldr	r3, [r4, #0]
 800a2e6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a2e8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800a2ec:	631a      	str	r2, [r3, #48]	@ 0x30
      __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_HPDF);
 800a2ee:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a2f0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a2f4:	639a      	str	r2, [r3, #56]	@ 0x38
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF) != 0UL)
 800a2f6:	6823      	ldr	r3, [r4, #0]
 800a2f8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a2fa:	0692      	lsls	r2, r2, #26
 800a2fc:	d524      	bpl.n	800a348 <HAL_JPEG_IRQHandler+0xb0>
    hjpeg->Context |= JPEG_CONTEXT_ENDING_DMA;
 800a2fe:	6d62      	ldr	r2, [r4, #84]	@ 0x54
    if (hjpeg->hdmain->State == HAL_MDMA_STATE_BUSY)
 800a300:	6b20      	ldr	r0, [r4, #48]	@ 0x30
    hjpeg->Context |= JPEG_CONTEXT_ENDING_DMA;
 800a302:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800a306:	6562      	str	r2, [r4, #84]	@ 0x54
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 800a308:	681a      	ldr	r2, [r3, #0]
 800a30a:	f022 0201 	bic.w	r2, r2, #1
 800a30e:	601a      	str	r2, [r3, #0]
    __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 800a310:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a312:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 800a316:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 800a318:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a31a:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 800a31e:	639a      	str	r2, [r3, #56]	@ 0x38
    if (hjpeg->hdmain->State == HAL_MDMA_STATE_BUSY)
 800a320:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 800a324:	2b02      	cmp	r3, #2
 800a326:	d101      	bne.n	800a32c <HAL_JPEG_IRQHandler+0x94>
      (void) HAL_MDMA_Abort_IT(hjpeg->hdmain);
 800a328:	f000 fafa 	bl	800a920 <HAL_MDMA_Abort_IT>
    if (hjpeg->hdmaout->State == HAL_MDMA_STATE_BUSY)
 800a32c:	6b60      	ldr	r0, [r4, #52]	@ 0x34
 800a32e:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 800a332:	2b02      	cmp	r3, #2
 800a334:	d103      	bne.n	800a33e <HAL_JPEG_IRQHandler+0xa6>
}
 800a336:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      (void) HAL_MDMA_Abort_IT(hjpeg->hdmaout);
 800a33a:	f000 baf1 	b.w	800a920 <HAL_MDMA_Abort_IT>
      JPEG_DMA_EndProcess(hjpeg);
 800a33e:	4620      	mov	r0, r4
}
 800a340:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      JPEG_DMA_EndProcess(hjpeg);
 800a344:	f7ff bf1e 	b.w	800a184 <JPEG_DMA_EndProcess>
}
 800a348:	bd10      	pop	{r4, pc}

0800a34a <LTDC_SetConfig>:
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800a34a:	01d2      	lsls	r2, r2, #7
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800a34c:	6800      	ldr	r0, [r0, #0]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800a34e:	f8d1 c000 	ldr.w	ip, [r1]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800a352:	3284      	adds	r2, #132	@ 0x84
 800a354:	1883      	adds	r3, r0, r2
{
 800a356:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800a35a:	68c6      	ldr	r6, [r0, #12]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800a35c:	f10c 0701 	add.w	r7, ip, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800a360:	685d      	ldr	r5, [r3, #4]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
  tmp2 = (pLayerCfg->Alpha0 << 24U);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 800a362:	f04f 0e00 	mov.w	lr, #0
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800a366:	684c      	ldr	r4, [r1, #4]
 800a368:	f3c6 460b 	ubfx	r6, r6, #16, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800a36c:	f405 4570 	and.w	r5, r5, #61440	@ 0xf000
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 800a370:	f8d1 9018 	ldr.w	r9, [r1, #24]
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800a374:	4426      	add	r6, r4
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800a376:	605d      	str	r5, [r3, #4]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800a378:	68c5      	ldr	r5, [r0, #12]
 800a37a:	f3c5 450b 	ubfx	r5, r5, #16, #12
 800a37e:	443d      	add	r5, r7
 800a380:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800a384:	605d      	str	r5, [r3, #4]
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 800a386:	68c6      	ldr	r6, [r0, #12]
 800a388:	68cd      	ldr	r5, [r1, #12]
 800a38a:	f3c6 060a 	ubfx	r6, r6, #0, #11
 800a38e:	442e      	add	r6, r5
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 800a390:	689d      	ldr	r5, [r3, #8]
 800a392:	f405 4570 	and.w	r5, r5, #61440	@ 0xf000
 800a396:	609d      	str	r5, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 800a398:	688d      	ldr	r5, [r1, #8]
 800a39a:	68c7      	ldr	r7, [r0, #12]
 800a39c:	3501      	adds	r5, #1
 800a39e:	f3c7 070a 	ubfx	r7, r7, #0, #11
 800a3a2:	443d      	add	r5, r7
 800a3a4:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 800a3a8:	690e      	ldr	r6, [r1, #16]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 800a3aa:	609d      	str	r5, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 800a3ac:	691d      	ldr	r5, [r3, #16]
 800a3ae:	f025 0507 	bic.w	r5, r5, #7
 800a3b2:	611d      	str	r5, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 800a3b4:	611e      	str	r6, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 800a3b6:	699d      	ldr	r5, [r3, #24]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 800a3b8:	f891 7032 	ldrb.w	r7, [r1, #50]	@ 0x32
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 800a3bc:	f891 8031 	ldrb.w	r8, [r1, #49]	@ 0x31
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 800a3c0:	f8c3 e018 	str.w	lr, [r3, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 800a3c4:	f891 5030 	ldrb.w	r5, [r1, #48]	@ 0x30
 800a3c8:	ea45 6509 	orr.w	r5, r5, r9, lsl #24
 800a3cc:	ea45 2508 	orr.w	r5, r5, r8, lsl #8
 800a3d0:	ea45 4507 	orr.w	r5, r5, r7, lsl #16
 800a3d4:	619d      	str	r5, [r3, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 800a3d6:	695d      	ldr	r5, [r3, #20]
 800a3d8:	f025 05ff 	bic.w	r5, r5, #255	@ 0xff
 800a3dc:	615d      	str	r5, [r3, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 800a3de:	694d      	ldr	r5, [r1, #20]
 800a3e0:	615d      	str	r5, [r3, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800a3e2:	69dd      	ldr	r5, [r3, #28]
 800a3e4:	f425 65e0 	bic.w	r5, r5, #1792	@ 0x700
 800a3e8:	f025 0507 	bic.w	r5, r5, #7
 800a3ec:	61dd      	str	r5, [r3, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 800a3ee:	e9d1 5707 	ldrd	r5, r7, [r1, #28]
 800a3f2:	433d      	orrs	r5, r7
 800a3f4:	61dd      	str	r5, [r3, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 800a3f6:	6a9d      	ldr	r5, [r3, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 800a3f8:	6a4d      	ldr	r5, [r1, #36]	@ 0x24
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 800a3fa:	f8c3 e028 	str.w	lr, [r3, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 800a3fe:	629d      	str	r5, [r3, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800a400:	b31e      	cbz	r6, 800a44a <LTDC_SetConfig+0x100>
  {
    tmp = 4U;
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 800a402:	2e01      	cmp	r6, #1
 800a404:	d023      	beq.n	800a44e <LTDC_SetConfig+0x104>
  {
    tmp = 3U;
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800a406:	1eb5      	subs	r5, r6, #2
 800a408:	2d02      	cmp	r5, #2
 800a40a:	d922      	bls.n	800a452 <LTDC_SetConfig+0x108>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
  {
    tmp = 2U;
 800a40c:	2e07      	cmp	r6, #7
 800a40e:	bf14      	ite	ne
 800a410:	2501      	movne	r5, #1
 800a412:	2502      	moveq	r5, #2
  {
    tmp = 1U;
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800a414:	6ade      	ldr	r6, [r3, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) |
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 800a416:	eba4 040c 	sub.w	r4, r4, ip
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800a41a:	f006 26e0 	and.w	r6, r6, #3758153728	@ 0xe000e000
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 800a41e:	436c      	muls	r4, r5
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800a420:	62de      	str	r6, [r3, #44]	@ 0x2c
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 800a422:	3407      	adds	r4, #7
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) |
 800a424:	6a8e      	ldr	r6, [r1, #40]	@ 0x28
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 800a426:	6ac9      	ldr	r1, [r1, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) |
 800a428:	436e      	muls	r6, r5
 800a42a:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
 800a42e:	62dc      	str	r4, [r3, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 800a430:	6b1c      	ldr	r4, [r3, #48]	@ 0x30
 800a432:	f424 64ff 	bic.w	r4, r4, #2040	@ 0x7f8
 800a436:	f024 0407 	bic.w	r4, r4, #7
 800a43a:	631c      	str	r4, [r3, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 800a43c:	6319      	str	r1, [r3, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800a43e:	5883      	ldr	r3, [r0, r2]
 800a440:	f043 0301 	orr.w	r3, r3, #1
 800a444:	5083      	str	r3, [r0, r2]
}
 800a446:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    tmp = 4U;
 800a44a:	2504      	movs	r5, #4
 800a44c:	e7e2      	b.n	800a414 <LTDC_SetConfig+0xca>
    tmp = 3U;
 800a44e:	2503      	movs	r5, #3
 800a450:	e7e0      	b.n	800a414 <LTDC_SetConfig+0xca>
    tmp = 2U;
 800a452:	2502      	movs	r5, #2
 800a454:	e7de      	b.n	800a414 <LTDC_SetConfig+0xca>
	...

0800a458 <HAL_LTDC_Init>:
{
 800a458:	b538      	push	{r3, r4, r5, lr}
  if (hltdc == NULL)
 800a45a:	4604      	mov	r4, r0
 800a45c:	2800      	cmp	r0, #0
 800a45e:	d063      	beq.n	800a528 <HAL_LTDC_Init+0xd0>
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 800a460:	f890 30a1 	ldrb.w	r3, [r0, #161]	@ 0xa1
 800a464:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 800a468:	b91b      	cbnz	r3, 800a472 <HAL_LTDC_Init+0x1a>
    hltdc->Lock = HAL_UNLOCKED;
 800a46a:	f880 20a0 	strb.w	r2, [r0, #160]	@ 0xa0
    HAL_LTDC_MspInit(hltdc);
 800a46e:	f7f6 fe95 	bl	800119c <HAL_LTDC_MspInit>
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800a472:	2302      	movs	r3, #2
 800a474:	f884 30a1 	strb.w	r3, [r4, #161]	@ 0xa1
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 800a478:	6823      	ldr	r3, [r4, #0]
 800a47a:	699a      	ldr	r2, [r3, #24]
 800a47c:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 800a480:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800a482:	6999      	ldr	r1, [r3, #24]
 800a484:	e9d4 2001 	ldrd	r2, r0, [r4, #4]
 800a488:	4302      	orrs	r2, r0
 800a48a:	68e0      	ldr	r0, [r4, #12]
 800a48c:	4302      	orrs	r2, r0
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800a48e:	6920      	ldr	r0, [r4, #16]
 800a490:	4302      	orrs	r2, r0
  tmp = (hltdc->Init.HorizontalSync << 16U);
 800a492:	6960      	ldr	r0, [r4, #20]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800a494:	430a      	orrs	r2, r1
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 800a496:	4925      	ldr	r1, [pc, #148]	@ (800a52c <HAL_LTDC_Init+0xd4>)
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800a498:	619a      	str	r2, [r3, #24]
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 800a49a:	689a      	ldr	r2, [r3, #8]
 800a49c:	400a      	ands	r2, r1
 800a49e:	609a      	str	r2, [r3, #8]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 800a4a0:	689a      	ldr	r2, [r3, #8]
 800a4a2:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800a4a6:	69a0      	ldr	r0, [r4, #24]
 800a4a8:	4302      	orrs	r2, r0
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 800a4aa:	69e0      	ldr	r0, [r4, #28]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 800a4ac:	609a      	str	r2, [r3, #8]
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 800a4ae:	68da      	ldr	r2, [r3, #12]
 800a4b0:	400a      	ands	r2, r1
 800a4b2:	60da      	str	r2, [r3, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 800a4b4:	68da      	ldr	r2, [r3, #12]
 800a4b6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800a4ba:	6a20      	ldr	r0, [r4, #32]
 800a4bc:	4302      	orrs	r2, r0
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 800a4be:	6a60      	ldr	r0, [r4, #36]	@ 0x24
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 800a4c0:	60da      	str	r2, [r3, #12]
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 800a4c2:	691a      	ldr	r2, [r3, #16]
 800a4c4:	400a      	ands	r2, r1
 800a4c6:	611a      	str	r2, [r3, #16]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 800a4c8:	691a      	ldr	r2, [r3, #16]
 800a4ca:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800a4ce:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 800a4d0:	4302      	orrs	r2, r0
 800a4d2:	611a      	str	r2, [r3, #16]
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 800a4d4:	695a      	ldr	r2, [r3, #20]
 800a4d6:	400a      	ands	r2, r1
  tmp = (hltdc->Init.TotalWidth << 16U);
 800a4d8:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 800a4da:	615a      	str	r2, [r3, #20]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 800a4dc:	695a      	ldr	r2, [r3, #20]
 800a4de:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800a4e2:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800a4e4:	430a      	orrs	r2, r1
 800a4e6:	615a      	str	r2, [r3, #20]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 800a4e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 800a4ea:	f894 0035 	ldrb.w	r0, [r4, #53]	@ 0x35
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 800a4ee:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 800a4f2:	f894 1036 	ldrb.w	r1, [r4, #54]	@ 0x36
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 800a4f6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 800a4f8:	6add      	ldr	r5, [r3, #44]	@ 0x2c
 800a4fa:	f894 2034 	ldrb.w	r2, [r4, #52]	@ 0x34
 800a4fe:	432a      	orrs	r2, r5
 800a500:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 800a504:	2000      	movs	r0, #0
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 800a506:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800a50a:	62da      	str	r2, [r3, #44]	@ 0x2c
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 800a50c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a50e:	f042 0206 	orr.w	r2, r2, #6
 800a512:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_LTDC_ENABLE(hltdc);
 800a514:	699a      	ldr	r2, [r3, #24]
 800a516:	f042 0201 	orr.w	r2, r2, #1
 800a51a:	619a      	str	r2, [r3, #24]
  hltdc->State = HAL_LTDC_STATE_READY;
 800a51c:	2301      	movs	r3, #1
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 800a51e:	f8c4 00a4 	str.w	r0, [r4, #164]	@ 0xa4
  hltdc->State = HAL_LTDC_STATE_READY;
 800a522:	f884 30a1 	strb.w	r3, [r4, #161]	@ 0xa1
}
 800a526:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800a528:	2001      	movs	r0, #1
 800a52a:	e7fc      	b.n	800a526 <HAL_LTDC_Init+0xce>
 800a52c:	f000f800 	.word	0xf000f800

0800a530 <HAL_LTDC_ErrorCallback>:
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
 800a530:	4770      	bx	lr

0800a532 <HAL_LTDC_LineEventCallback>:
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
 800a532:	4770      	bx	lr

0800a534 <HAL_LTDC_ReloadEventCallback>:
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
 800a534:	4770      	bx	lr

0800a536 <HAL_LTDC_IRQHandler>:
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 800a536:	6803      	ldr	r3, [r0, #0]
{
 800a538:	b570      	push	{r4, r5, r6, lr}
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 800a53a:	6b9e      	ldr	r6, [r3, #56]	@ 0x38
{
 800a53c:	4604      	mov	r4, r0
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 800a53e:	6b5d      	ldr	r5, [r3, #52]	@ 0x34
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 800a540:	0772      	lsls	r2, r6, #29
 800a542:	d514      	bpl.n	800a56e <HAL_LTDC_IRQHandler+0x38>
 800a544:	0769      	lsls	r1, r5, #29
 800a546:	d512      	bpl.n	800a56e <HAL_LTDC_IRQHandler+0x38>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 800a548:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a54a:	f022 0204 	bic.w	r2, r2, #4
 800a54e:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 800a550:	2204      	movs	r2, #4
 800a552:	63da      	str	r2, [r3, #60]	@ 0x3c
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 800a554:	f8d0 30a4 	ldr.w	r3, [r0, #164]	@ 0xa4
 800a558:	f043 0301 	orr.w	r3, r3, #1
 800a55c:	f8c0 30a4 	str.w	r3, [r0, #164]	@ 0xa4
    __HAL_UNLOCK(hltdc);
 800a560:	2300      	movs	r3, #0
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800a562:	f880 20a1 	strb.w	r2, [r0, #161]	@ 0xa1
    __HAL_UNLOCK(hltdc);
 800a566:	f880 30a0 	strb.w	r3, [r0, #160]	@ 0xa0
    HAL_LTDC_ErrorCallback(hltdc);
 800a56a:	f7ff ffe1 	bl	800a530 <HAL_LTDC_ErrorCallback>
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 800a56e:	07b2      	lsls	r2, r6, #30
 800a570:	d516      	bpl.n	800a5a0 <HAL_LTDC_IRQHandler+0x6a>
 800a572:	07ab      	lsls	r3, r5, #30
 800a574:	d514      	bpl.n	800a5a0 <HAL_LTDC_IRQHandler+0x6a>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 800a576:	6823      	ldr	r3, [r4, #0]
    HAL_LTDC_ErrorCallback(hltdc);
 800a578:	4620      	mov	r0, r4
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 800a57a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a57c:	f022 0202 	bic.w	r2, r2, #2
 800a580:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 800a582:	2202      	movs	r2, #2
 800a584:	63da      	str	r2, [r3, #60]	@ 0x3c
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 800a586:	f8d4 30a4 	ldr.w	r3, [r4, #164]	@ 0xa4
 800a58a:	4313      	orrs	r3, r2
 800a58c:	f8c4 30a4 	str.w	r3, [r4, #164]	@ 0xa4
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800a590:	2304      	movs	r3, #4
 800a592:	f884 30a1 	strb.w	r3, [r4, #161]	@ 0xa1
    __HAL_UNLOCK(hltdc);
 800a596:	2300      	movs	r3, #0
 800a598:	f884 30a0 	strb.w	r3, [r4, #160]	@ 0xa0
    HAL_LTDC_ErrorCallback(hltdc);
 800a59c:	f7ff ffc8 	bl	800a530 <HAL_LTDC_ErrorCallback>
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 800a5a0:	07f0      	lsls	r0, r6, #31
 800a5a2:	d510      	bpl.n	800a5c6 <HAL_LTDC_IRQHandler+0x90>
 800a5a4:	07e9      	lsls	r1, r5, #31
 800a5a6:	d50e      	bpl.n	800a5c6 <HAL_LTDC_IRQHandler+0x90>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 800a5a8:	6823      	ldr	r3, [r4, #0]
    HAL_LTDC_LineEventCallback(hltdc);
 800a5aa:	4620      	mov	r0, r4
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 800a5ac:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a5ae:	f022 0201 	bic.w	r2, r2, #1
 800a5b2:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 800a5b4:	2201      	movs	r2, #1
 800a5b6:	63da      	str	r2, [r3, #60]	@ 0x3c
    __HAL_UNLOCK(hltdc);
 800a5b8:	2300      	movs	r3, #0
    hltdc->State = HAL_LTDC_STATE_READY;
 800a5ba:	f884 20a1 	strb.w	r2, [r4, #161]	@ 0xa1
    __HAL_UNLOCK(hltdc);
 800a5be:	f884 30a0 	strb.w	r3, [r4, #160]	@ 0xa0
    HAL_LTDC_LineEventCallback(hltdc);
 800a5c2:	f7ff ffb6 	bl	800a532 <HAL_LTDC_LineEventCallback>
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 800a5c6:	0732      	lsls	r2, r6, #28
 800a5c8:	d511      	bpl.n	800a5ee <HAL_LTDC_IRQHandler+0xb8>
 800a5ca:	072b      	lsls	r3, r5, #28
 800a5cc:	d50f      	bpl.n	800a5ee <HAL_LTDC_IRQHandler+0xb8>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 800a5ce:	6823      	ldr	r3, [r4, #0]
    HAL_LTDC_ReloadEventCallback(hltdc);
 800a5d0:	4620      	mov	r0, r4
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 800a5d2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a5d4:	f022 0208 	bic.w	r2, r2, #8
 800a5d8:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 800a5da:	2208      	movs	r2, #8
 800a5dc:	63da      	str	r2, [r3, #60]	@ 0x3c
    hltdc->State = HAL_LTDC_STATE_READY;
 800a5de:	2301      	movs	r3, #1
 800a5e0:	f884 30a1 	strb.w	r3, [r4, #161]	@ 0xa1
    __HAL_UNLOCK(hltdc);
 800a5e4:	2300      	movs	r3, #0
 800a5e6:	f884 30a0 	strb.w	r3, [r4, #160]	@ 0xa0
    HAL_LTDC_ReloadEventCallback(hltdc);
 800a5ea:	f7ff ffa3 	bl	800a534 <HAL_LTDC_ReloadEventCallback>
}
 800a5ee:	bd70      	pop	{r4, r5, r6, pc}

0800a5f0 <HAL_LTDC_ConfigLayer>:
{
 800a5f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(hltdc);
 800a5f4:	f890 30a0 	ldrb.w	r3, [r0, #160]	@ 0xa0
{
 800a5f8:	4606      	mov	r6, r0
 800a5fa:	460f      	mov	r7, r1
 800a5fc:	4694      	mov	ip, r2
  __HAL_LOCK(hltdc);
 800a5fe:	2b01      	cmp	r3, #1
 800a600:	f04f 0002 	mov.w	r0, #2
 800a604:	d01f      	beq.n	800a646 <HAL_LTDC_ConfigLayer+0x56>
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800a606:	2434      	movs	r4, #52	@ 0x34
  __HAL_LOCK(hltdc);
 800a608:	f04f 0801 	mov.w	r8, #1
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800a60c:	460d      	mov	r5, r1
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800a60e:	f886 00a1 	strb.w	r0, [r6, #161]	@ 0xa1
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800a612:	fb04 6402 	mla	r4, r4, r2, r6
  __HAL_LOCK(hltdc);
 800a616:	f886 80a0 	strb.w	r8, [r6, #160]	@ 0xa0
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800a61a:	3438      	adds	r4, #56	@ 0x38
 800a61c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a61e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a620:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a622:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a624:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a626:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a628:	682b      	ldr	r3, [r5, #0]
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 800a62a:	4630      	mov	r0, r6
 800a62c:	4662      	mov	r2, ip
 800a62e:	4639      	mov	r1, r7
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800a630:	6023      	str	r3, [r4, #0]
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 800a632:	f7ff fe8a 	bl	800a34a <LTDC_SetConfig>
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800a636:	6833      	ldr	r3, [r6, #0]
  __HAL_UNLOCK(hltdc);
 800a638:	2000      	movs	r0, #0
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800a63a:	f8c3 8024 	str.w	r8, [r3, #36]	@ 0x24
  hltdc->State  = HAL_LTDC_STATE_READY;
 800a63e:	f886 80a1 	strb.w	r8, [r6, #161]	@ 0xa1
  __HAL_UNLOCK(hltdc);
 800a642:	f886 00a0 	strb.w	r0, [r6, #160]	@ 0xa0
}
 800a646:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

0800a64c <HAL_LTDC_SetPitch>:
{
 800a64c:	b530      	push	{r4, r5, lr}
  __HAL_LOCK(hltdc);
 800a64e:	f890 30a0 	ldrb.w	r3, [r0, #160]	@ 0xa0
 800a652:	2b01      	cmp	r3, #1
 800a654:	f04f 0302 	mov.w	r3, #2
 800a658:	d02c      	beq.n	800a6b4 <HAL_LTDC_SetPitch+0x68>
  pixelFormat = hltdc->LayerCfg[LayerIdx].PixelFormat;
 800a65a:	2434      	movs	r4, #52	@ 0x34
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800a65c:	f880 30a1 	strb.w	r3, [r0, #161]	@ 0xa1
  pixelFormat = hltdc->LayerCfg[LayerIdx].PixelFormat;
 800a660:	fb04 0402 	mla	r4, r4, r2, r0
 800a664:	6ca4      	ldr	r4, [r4, #72]	@ 0x48
  if (pixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800a666:	b33c      	cbz	r4, 800a6b8 <HAL_LTDC_SetPitch+0x6c>
  else if (pixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 800a668:	2c01      	cmp	r4, #1
 800a66a:	d027      	beq.n	800a6bc <HAL_LTDC_SetPitch+0x70>
  else if ((pixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800a66c:	1ea5      	subs	r5, r4, #2
 800a66e:	429d      	cmp	r5, r3
 800a670:	d902      	bls.n	800a678 <HAL_LTDC_SetPitch+0x2c>
    tmp = 2U;
 800a672:	2c07      	cmp	r4, #7
 800a674:	bf18      	it	ne
 800a676:	2301      	movne	r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR &= ~LTDC_LxCFBLR_CFBP;
 800a678:	01d2      	lsls	r2, r2, #7
 800a67a:	6804      	ldr	r4, [r0, #0]
  pitchUpdate = ((LinePitchInPixels * tmp) << 16U);
 800a67c:	434b      	muls	r3, r1
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR &= ~LTDC_LxCFBLR_CFBP;
 800a67e:	3284      	adds	r2, #132	@ 0x84
 800a680:	4422      	add	r2, r4
 800a682:	6ad4      	ldr	r4, [r2, #44]	@ 0x2c
 800a684:	f024 54ff 	bic.w	r4, r4, #534773760	@ 0x1fe00000
 800a688:	f424 14f8 	bic.w	r4, r4, #2031616	@ 0x1f0000
 800a68c:	62d4      	str	r4, [r2, #44]	@ 0x2c
  LTDC->SRCR |= LTDC_SRCR_IMR;
 800a68e:	4c0c      	ldr	r4, [pc, #48]	@ (800a6c0 <HAL_LTDC_SetPitch+0x74>)
 800a690:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 800a692:	f045 0501 	orr.w	r5, r5, #1
 800a696:	6265      	str	r5, [r4, #36]	@ 0x24
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR |= pitchUpdate;
 800a698:	6ad5      	ldr	r5, [r2, #44]	@ 0x2c
 800a69a:	ea45 4303 	orr.w	r3, r5, r3, lsl #16
 800a69e:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC->SRCR |= LTDC_SRCR_IMR;
 800a6a0:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800a6a2:	f043 0301 	orr.w	r3, r3, #1
 800a6a6:	6263      	str	r3, [r4, #36]	@ 0x24
  hltdc->State = HAL_LTDC_STATE_READY;
 800a6a8:	2301      	movs	r3, #1
 800a6aa:	f880 30a1 	strb.w	r3, [r0, #161]	@ 0xa1
  __HAL_UNLOCK(hltdc);
 800a6ae:	2300      	movs	r3, #0
 800a6b0:	f880 30a0 	strb.w	r3, [r0, #160]	@ 0xa0
}
 800a6b4:	4618      	mov	r0, r3
 800a6b6:	bd30      	pop	{r4, r5, pc}
    tmp = 4U;
 800a6b8:	2304      	movs	r3, #4
 800a6ba:	e7dd      	b.n	800a678 <HAL_LTDC_SetPitch+0x2c>
    tmp = 3U;
 800a6bc:	2303      	movs	r3, #3
 800a6be:	e7db      	b.n	800a678 <HAL_LTDC_SetPitch+0x2c>
 800a6c0:	50001000 	.word	0x50001000

0800a6c4 <MDMA_SetConfig>:
  * @param  BlockDataLength : The length of a block transfer in bytes
  * @param  BlockCount: The number of blocks to be transferred
  * @retval HAL status
  */
static void MDMA_SetConfig(MDMA_HandleTypeDef *hmdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t BlockDataLength, uint32_t BlockCount)
{
 800a6c4:	b530      	push	{r4, r5, lr}
  uint32_t addressMask;

  /* Configure the MDMA Channel data length */
  MODIFY_REG(hmdma->Instance->CBNDTR ,MDMA_CBNDTR_BNDT, (BlockDataLength & MDMA_CBNDTR_BNDT));
 800a6c6:	6804      	ldr	r4, [r0, #0]
 800a6c8:	f3c3 0310 	ubfx	r3, r3, #0, #17

  /* Configure MDMA Channel Source address */
  hmdma->Instance->CSAR = SrcAddress;

  addressMask = SrcAddress & 0xFF000000U;
  if((addressMask == 0x20000000U) || (addressMask == 0x00000000U))
 800a6cc:	f011 4f5f 	tst.w	r1, #3741319168	@ 0xdf000000
  MODIFY_REG(hmdma->Instance->CBNDTR ,MDMA_CBNDTR_BNDT, (BlockDataLength & MDMA_CBNDTR_BNDT));
 800a6d0:	6965      	ldr	r5, [r4, #20]
 800a6d2:	ea4f 4555 	mov.w	r5, r5, lsr #17
 800a6d6:	ea4f 4545 	mov.w	r5, r5, lsl #17
 800a6da:	ea45 0503 	orr.w	r5, r5, r3
 800a6de:	6165      	str	r5, [r4, #20]
  MODIFY_REG(hmdma->Instance->CBNDTR , MDMA_CBNDTR_BRC , ((BlockCount - 1U) << MDMA_CBNDTR_BRC_Pos) & MDMA_CBNDTR_BRC);
 800a6e0:	9d03      	ldr	r5, [sp, #12]
 800a6e2:	6963      	ldr	r3, [r4, #20]
 800a6e4:	f105 35ff 	add.w	r5, r5, #4294967295
 800a6e8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a6ec:	ea43 5305 	orr.w	r3, r3, r5, lsl #20
 800a6f0:	6163      	str	r3, [r4, #20]
  __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_CISR_BRTIF | MDMA_CISR_BTIF | MDMA_CISR_TCIF);
 800a6f2:	f04f 031f 	mov.w	r3, #31
 800a6f6:	6063      	str	r3, [r4, #4]
  hmdma->Instance->CDAR = DstAddress;
 800a6f8:	61e2      	str	r2, [r4, #28]
  hmdma->Instance->CSAR = SrcAddress;
 800a6fa:	61a1      	str	r1, [r4, #24]
  {
    /*The AHBSbus is used as source (read operation) on channel x */
    hmdma->Instance->CTBR |= MDMA_CTBR_SBUS;
 800a6fc:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800a6fe:	bf0c      	ite	eq
 800a700:	f443 3380 	orreq.w	r3, r3, #65536	@ 0x10000
  }
  else
  {
    /*The AXI bus is used as source (read operation) on channel x */
    hmdma->Instance->CTBR &= (~MDMA_CTBR_SBUS);
 800a704:	f423 3380 	bicne.w	r3, r3, #65536	@ 0x10000
  }

  addressMask = DstAddress & 0xFF000000U;
  if((addressMask == 0x20000000U) || (addressMask == 0x00000000U))
 800a708:	f012 4f5f 	tst.w	r2, #3741319168	@ 0xdf000000
    hmdma->Instance->CTBR &= (~MDMA_CTBR_SBUS);
 800a70c:	62a3      	str	r3, [r4, #40]	@ 0x28
  {
    /*The AHB bus is used as destination (write operation) on channel x */
    hmdma->Instance->CTBR |= MDMA_CTBR_DBUS;
 800a70e:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800a710:	bf0c      	ite	eq
 800a712:	f443 3300 	orreq.w	r3, r3, #131072	@ 0x20000
  }
  else
  {
    /*The AXI bus is used as destination (write operation) on channel x */
    hmdma->Instance->CTBR &= (~MDMA_CTBR_DBUS);
 800a716:	f423 3300 	bicne.w	r3, r3, #131072	@ 0x20000
 800a71a:	62a3      	str	r3, [r4, #40]	@ 0x28
  }

  /* Set the linked list register to the first node of the list */
  hmdma->Instance->CLAR = (uint32_t)hmdma->FirstLinkedListNodeAddress;
 800a71c:	6dc3      	ldr	r3, [r0, #92]	@ 0x5c
 800a71e:	6263      	str	r3, [r4, #36]	@ 0x24
}
 800a720:	bd30      	pop	{r4, r5, pc}

0800a722 <HAL_MDMA_Init>:
{
 800a722:	b538      	push	{r3, r4, r5, lr}
 800a724:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800a726:	f7fd fb15 	bl	8007d54 <HAL_GetTick>
 800a72a:	4605      	mov	r5, r0
  if(hmdma == NULL)
 800a72c:	2c00      	cmp	r4, #0
 800a72e:	d061      	beq.n	800a7f4 <HAL_MDMA_Init+0xd2>
  __HAL_UNLOCK(hmdma);
 800a730:	2300      	movs	r3, #0
  __HAL_MDMA_DISABLE(hmdma);
 800a732:	6822      	ldr	r2, [r4, #0]
  __HAL_UNLOCK(hmdma);
 800a734:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
  hmdma->State = HAL_MDMA_STATE_BUSY;
 800a738:	2302      	movs	r3, #2
 800a73a:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  __HAL_MDMA_DISABLE(hmdma);
 800a73e:	68d3      	ldr	r3, [r2, #12]
 800a740:	f023 0301 	bic.w	r3, r3, #1
 800a744:	60d3      	str	r3, [r2, #12]
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 800a746:	6823      	ldr	r3, [r4, #0]
 800a748:	68da      	ldr	r2, [r3, #12]
 800a74a:	07d2      	lsls	r2, r2, #31
 800a74c:	d448      	bmi.n	800a7e0 <HAL_MDMA_Init+0xbe>
static void MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
  uint32_t blockoffset;

  /* Prepare the MDMA Channel configuration */
  hmdma->Instance->CCR = hmdma->Init.Priority  | hmdma->Init.Endianness;
 800a74e:	e9d4 2103 	ldrd	r2, r1, [r4, #12]
 800a752:	430a      	orrs	r2, r1
 800a754:	60da      	str	r2, [r3, #12]
  /* Write new CTCR Register value */
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
                           hmdma->Init.DestBurst                                   | \
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
 800a756:	e9d4 2105 	ldrd	r2, r1, [r4, #20]
 800a75a:	430a      	orrs	r2, r1
 800a75c:	69e1      	ldr	r1, [r4, #28]
 800a75e:	430a      	orrs	r2, r1
 800a760:	6a21      	ldr	r1, [r4, #32]
 800a762:	430a      	orrs	r2, r1
 800a764:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 800a766:	430a      	orrs	r2, r1
 800a768:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800a76a:	430a      	orrs	r2, r1
 800a76c:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800a76e:	430a      	orrs	r2, r1
 800a770:	68a1      	ldr	r1, [r4, #8]
 800a772:	430a      	orrs	r2, r1
 800a774:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 800a776:	3901      	subs	r1, #1
 800a778:	ea42 4281 	orr.w	r2, r2, r1, lsl #18
                           hmdma->Init.TransferTriggerMode;

  /* If SW request set the CTCR register to SW Request Mode */
  if(hmdma->Init.Request == MDMA_REQUEST_SW)
 800a77c:	6861      	ldr	r1, [r4, #4]
 800a77e:	f1b1 4f80 	cmp.w	r1, #1073741824	@ 0x40000000
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 800a782:	611a      	str	r2, [r3, #16]
  if(hmdma->Init.Request == MDMA_REQUEST_SW)
 800a784:	d103      	bne.n	800a78e <HAL_MDMA_Init+0x6c>
    -If the request is done by SW : BWM could be set to 1 or 0.
    -If the request is done by a peripheral :
    If mask address not set (0) => BWM must be set to 0
    If mask address set (different than 0) => BWM could be set to 1 or 0
    */
    hmdma->Instance->CTCR |= (MDMA_CTCR_SWRM | MDMA_CTCR_BWM);
 800a786:	691a      	ldr	r2, [r3, #16]
 800a788:	f042 4240 	orr.w	r2, r2, #3221225472	@ 0xc0000000
 800a78c:	611a      	str	r2, [r3, #16]
  }

  /* Reset CBNDTR Register */
  hmdma->Instance->CBNDTR = 0;
 800a78e:	2200      	movs	r2, #0
 800a790:	615a      	str	r2, [r3, #20]

  /* if block source address offset is negative set the Block Repeat Source address Update Mode to decrement */
  if(hmdma->Init.SourceBlockAddressOffset < 0)
 800a792:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 800a794:	2a00      	cmp	r2, #0
 800a796:	da04      	bge.n	800a7a2 <HAL_MDMA_Init+0x80>
  {
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRSUM;
 800a798:	6958      	ldr	r0, [r3, #20]
    /* Write new CBRUR Register value : source repeat block offset */
    blockoffset = (uint32_t)(- hmdma->Init.SourceBlockAddressOffset);
 800a79a:	4252      	negs	r2, r2
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRSUM;
 800a79c:	f440 2080 	orr.w	r0, r0, #262144	@ 0x40000
 800a7a0:	6158      	str	r0, [r3, #20]
    hmdma->Instance->CBRUR = (blockoffset & 0x0000FFFFU);
  }
  else
  {
    /* Write new CBRUR Register value : source repeat block offset */
    hmdma->Instance->CBRUR = (((uint32_t)hmdma->Init.SourceBlockAddressOffset) & 0x0000FFFFU);
 800a7a2:	b292      	uxth	r2, r2
 800a7a4:	621a      	str	r2, [r3, #32]
  }

  /* If block destination address offset is negative set the Block Repeat destination address Update Mode to decrement */
  if(hmdma->Init.DestBlockAddressOffset < 0)
 800a7a6:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800a7a8:	2a00      	cmp	r2, #0
 800a7aa:	da25      	bge.n	800a7f8 <HAL_MDMA_Init+0xd6>
  {
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRDUM;
 800a7ac:	6958      	ldr	r0, [r3, #20]
    /* Write new CBRUR Register value : destination repeat block offset */
    blockoffset = (uint32_t)(- hmdma->Init.DestBlockAddressOffset);
 800a7ae:	4252      	negs	r2, r2
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRDUM;
 800a7b0:	f440 2000 	orr.w	r0, r0, #524288	@ 0x80000
 800a7b4:	6158      	str	r0, [r3, #20]
    hmdma->Instance->CBRUR |= ((blockoffset & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 800a7b6:	6a18      	ldr	r0, [r3, #32]
  }
  else
  {
    /*write new CBRUR Register value : destination repeat block offset */
    hmdma->Instance->CBRUR |= ((((uint32_t)hmdma->Init.DestBlockAddressOffset) & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 800a7b8:	ea40 4202 	orr.w	r2, r0, r2, lsl #16
  }

  /* if HW request set the HW request and the requet CleraMask and ClearData MaskData, */
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
 800a7bc:	f1b1 4f80 	cmp.w	r1, #1073741824	@ 0x40000000
    hmdma->Instance->CBRUR |= ((((uint32_t)hmdma->Init.DestBlockAddressOffset) & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 800a7c0:	621a      	str	r2, [r3, #32]
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
 800a7c2:	f04f 0200 	mov.w	r2, #0
 800a7c6:	d019      	beq.n	800a7fc <HAL_MDMA_Init+0xda>
  {
    /* Set the HW request in CTRB register  */
    hmdma->Instance->CTBR = hmdma->Init.Request & MDMA_CTBR_TSEL;
 800a7c8:	b2c9      	uxtb	r1, r1
 800a7ca:	6299      	str	r1, [r3, #40]	@ 0x28
  {
    hmdma->Instance->CTBR = 0;
  }

  /* Write Link Address Register */
  hmdma->Instance->CLAR =  0;
 800a7cc:	625a      	str	r2, [r3, #36]	@ 0x24
  hmdma->State = HAL_MDMA_STATE_READY;
 800a7ce:	2301      	movs	r3, #1
  hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 800a7d0:	66a2      	str	r2, [r4, #104]	@ 0x68
  return HAL_OK;
 800a7d2:	2000      	movs	r0, #0
  hmdma->LinkedListNodeCounter  = 0;
 800a7d4:	6662      	str	r2, [r4, #100]	@ 0x64
  hmdma->State = HAL_MDMA_STATE_READY;
 800a7d6:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  hmdma->LastLinkedListNodeAddress   = 0;
 800a7da:	e9c4 2217 	strd	r2, r2, [r4, #92]	@ 0x5c
  return HAL_OK;
 800a7de:	e00a      	b.n	800a7f6 <HAL_MDMA_Init+0xd4>
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_MDMA_ABORT)
 800a7e0:	f7fd fab8 	bl	8007d54 <HAL_GetTick>
 800a7e4:	1b40      	subs	r0, r0, r5
 800a7e6:	2805      	cmp	r0, #5
 800a7e8:	d9ad      	bls.n	800a746 <HAL_MDMA_Init+0x24>
      hmdma->ErrorCode = HAL_MDMA_ERROR_TIMEOUT;
 800a7ea:	2340      	movs	r3, #64	@ 0x40
 800a7ec:	66a3      	str	r3, [r4, #104]	@ 0x68
      hmdma->State = HAL_MDMA_STATE_ERROR;
 800a7ee:	2303      	movs	r3, #3
 800a7f0:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
    return HAL_ERROR;
 800a7f4:	2001      	movs	r0, #1
}
 800a7f6:	bd38      	pop	{r3, r4, r5, pc}
    hmdma->Instance->CBRUR |= ((((uint32_t)hmdma->Init.DestBlockAddressOffset) & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 800a7f8:	6a18      	ldr	r0, [r3, #32]
 800a7fa:	e7dd      	b.n	800a7b8 <HAL_MDMA_Init+0x96>
    hmdma->Instance->CTBR = 0;
 800a7fc:	629a      	str	r2, [r3, #40]	@ 0x28
 800a7fe:	e7e5      	b.n	800a7cc <HAL_MDMA_Init+0xaa>

0800a800 <HAL_MDMA_DeInit>:
  if(hmdma == NULL)
 800a800:	b1d8      	cbz	r0, 800a83a <HAL_MDMA_DeInit+0x3a>
  __HAL_MDMA_DISABLE(hmdma);
 800a802:	6802      	ldr	r2, [r0, #0]
  __HAL_MDMA_CLEAR_FLAG(hmdma,(MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_FLAG_BRT | MDMA_FLAG_BT | MDMA_FLAG_BFTC));
 800a804:	211f      	movs	r1, #31
  __HAL_MDMA_DISABLE(hmdma);
 800a806:	68d3      	ldr	r3, [r2, #12]
 800a808:	f023 0301 	bic.w	r3, r3, #1
 800a80c:	60d3      	str	r3, [r2, #12]
  hmdma->Instance->CCR  = 0;
 800a80e:	2300      	movs	r3, #0
 800a810:	60d3      	str	r3, [r2, #12]
  hmdma->Instance->CTCR = 0;
 800a812:	6113      	str	r3, [r2, #16]
  hmdma->Instance->CBNDTR = 0;
 800a814:	6153      	str	r3, [r2, #20]
  hmdma->Instance->CSAR = 0;
 800a816:	6193      	str	r3, [r2, #24]
  hmdma->Instance->CDAR = 0;
 800a818:	61d3      	str	r3, [r2, #28]
  hmdma->Instance->CBRUR = 0;
 800a81a:	6213      	str	r3, [r2, #32]
  hmdma->Instance->CLAR = 0;
 800a81c:	6253      	str	r3, [r2, #36]	@ 0x24
  hmdma->Instance->CTBR = 0;
 800a81e:	6293      	str	r3, [r2, #40]	@ 0x28
  hmdma->Instance->CMAR = 0;
 800a820:	6313      	str	r3, [r2, #48]	@ 0x30
  hmdma->Instance->CMDR = 0;
 800a822:	6353      	str	r3, [r2, #52]	@ 0x34
  __HAL_MDMA_CLEAR_FLAG(hmdma,(MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_FLAG_BRT | MDMA_FLAG_BT | MDMA_FLAG_BFTC));
 800a824:	6051      	str	r1, [r2, #4]
  hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 800a826:	6683      	str	r3, [r0, #104]	@ 0x68
  hmdma->LinkedListNodeCounter  = 0;
 800a828:	6643      	str	r3, [r0, #100]	@ 0x64
  hmdma->State = HAL_MDMA_STATE_RESET;
 800a82a:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
  __HAL_UNLOCK(hmdma);
 800a82e:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
  hmdma->LastLinkedListNodeAddress   = 0;
 800a832:	e9c0 3317 	strd	r3, r3, [r0, #92]	@ 0x5c
  return HAL_OK;
 800a836:	4618      	mov	r0, r3
 800a838:	4770      	bx	lr
    return HAL_ERROR;
 800a83a:	2001      	movs	r0, #1
}
 800a83c:	4770      	bx	lr

0800a83e <HAL_MDMA_ConfigPostRequestMask>:
  if(hmdma == NULL)
 800a83e:	4603      	mov	r3, r0
{
 800a840:	b530      	push	{r4, r5, lr}
  if(hmdma == NULL)
 800a842:	b300      	cbz	r0, 800a886 <HAL_MDMA_ConfigPostRequestMask+0x48>
  __HAL_LOCK(hmdma);
 800a844:	f890 003c 	ldrb.w	r0, [r0, #60]	@ 0x3c
 800a848:	2801      	cmp	r0, #1
 800a84a:	d01e      	beq.n	800a88a <HAL_MDMA_ConfigPostRequestMask+0x4c>
 800a84c:	2401      	movs	r4, #1
  if(HAL_MDMA_STATE_READY == hmdma->State)
 800a84e:	f893 503d 	ldrb.w	r5, [r3, #61]	@ 0x3d
 800a852:	42a5      	cmp	r5, r4
 800a854:	b2e8      	uxtb	r0, r5
  __HAL_LOCK(hmdma);
 800a856:	f883 403c 	strb.w	r4, [r3, #60]	@ 0x3c
  if(HAL_MDMA_STATE_READY == hmdma->State)
 800a85a:	d112      	bne.n	800a882 <HAL_MDMA_ConfigPostRequestMask+0x44>
    if((hmdma->Instance->CTCR & MDMA_CTCR_SWRM) == 0U)
 800a85c:	681c      	ldr	r4, [r3, #0]
 800a85e:	6925      	ldr	r5, [r4, #16]
 800a860:	006d      	lsls	r5, r5, #1
 800a862:	d407      	bmi.n	800a874 <HAL_MDMA_ConfigPostRequestMask+0x36>
      hmdma->Instance->CMAR = MaskAddress;
 800a864:	6321      	str	r1, [r4, #48]	@ 0x30
      hmdma->Instance->CMDR = MaskData;
 800a866:	6362      	str	r2, [r4, #52]	@ 0x34
        hmdma->Instance->CTCR &=  ~MDMA_CTCR_BWM;
 800a868:	6922      	ldr	r2, [r4, #16]
      if(MaskAddress == 0U)
 800a86a:	b939      	cbnz	r1, 800a87c <HAL_MDMA_ConfigPostRequestMask+0x3e>
        hmdma->Instance->CTCR &=  ~MDMA_CTCR_BWM;
 800a86c:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
  HAL_StatusTypeDef  status = HAL_OK;
 800a870:	2000      	movs	r0, #0
        hmdma->Instance->CTCR &=  ~MDMA_CTCR_BWM;
 800a872:	6122      	str	r2, [r4, #16]
  __HAL_UNLOCK(hmdma);
 800a874:	2200      	movs	r2, #0
 800a876:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 800a87a:	bd30      	pop	{r4, r5, pc}
        hmdma->Instance->CTCR |=  MDMA_CTCR_BWM;
 800a87c:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800a880:	e7f6      	b.n	800a870 <HAL_MDMA_ConfigPostRequestMask+0x32>
      status =  HAL_ERROR;
 800a882:	4620      	mov	r0, r4
 800a884:	e7f6      	b.n	800a874 <HAL_MDMA_ConfigPostRequestMask+0x36>
    return HAL_ERROR;
 800a886:	2001      	movs	r0, #1
 800a888:	e7f7      	b.n	800a87a <HAL_MDMA_ConfigPostRequestMask+0x3c>
  __HAL_LOCK(hmdma);
 800a88a:	2002      	movs	r0, #2
 800a88c:	e7f5      	b.n	800a87a <HAL_MDMA_ConfigPostRequestMask+0x3c>

0800a88e <HAL_MDMA_Start_IT>:
{
 800a88e:	b573      	push	{r0, r1, r4, r5, r6, lr}
  if(hmdma == NULL)
 800a890:	4604      	mov	r4, r0
 800a892:	2800      	cmp	r0, #0
 800a894:	d042      	beq.n	800a91c <HAL_MDMA_Start_IT+0x8e>
  __HAL_LOCK(hmdma);
 800a896:	f890 503c 	ldrb.w	r5, [r0, #60]	@ 0x3c
 800a89a:	2d01      	cmp	r5, #1
 800a89c:	d03c      	beq.n	800a918 <HAL_MDMA_Start_IT+0x8a>
 800a89e:	2501      	movs	r5, #1
 800a8a0:	f880 503c 	strb.w	r5, [r0, #60]	@ 0x3c
  if(HAL_MDMA_STATE_READY == hmdma->State)
 800a8a4:	f890 503d 	ldrb.w	r5, [r0, #61]	@ 0x3d
 800a8a8:	2d01      	cmp	r5, #1
 800a8aa:	f04f 0500 	mov.w	r5, #0
 800a8ae:	d131      	bne.n	800a914 <HAL_MDMA_Start_IT+0x86>
    hmdma->State = HAL_MDMA_STATE_BUSY;
 800a8b0:	2602      	movs	r6, #2
 800a8b2:	f880 603d 	strb.w	r6, [r0, #61]	@ 0x3d
    hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 800a8b6:	6685      	str	r5, [r0, #104]	@ 0x68
    __HAL_MDMA_DISABLE(hmdma);
 800a8b8:	6805      	ldr	r5, [r0, #0]
 800a8ba:	68ee      	ldr	r6, [r5, #12]
 800a8bc:	f026 0601 	bic.w	r6, r6, #1
 800a8c0:	60ee      	str	r6, [r5, #12]
    MDMA_SetConfig(hmdma, SrcAddress, DstAddress, BlockDataLength, BlockCount);
 800a8c2:	9e06      	ldr	r6, [sp, #24]
 800a8c4:	9600      	str	r6, [sp, #0]
 800a8c6:	f7ff fefd 	bl	800a6c4 <MDMA_SetConfig>
    __HAL_MDMA_ENABLE_IT(hmdma, (MDMA_IT_TE | MDMA_IT_CTC));
 800a8ca:	68eb      	ldr	r3, [r5, #12]
 800a8cc:	f043 0306 	orr.w	r3, r3, #6
 800a8d0:	60eb      	str	r3, [r5, #12]
    if(hmdma->XferBlockCpltCallback != NULL)
 800a8d2:	6cc3      	ldr	r3, [r0, #76]	@ 0x4c
 800a8d4:	b11b      	cbz	r3, 800a8de <HAL_MDMA_Start_IT+0x50>
      __HAL_MDMA_ENABLE_IT(hmdma, MDMA_IT_BT);
 800a8d6:	68eb      	ldr	r3, [r5, #12]
 800a8d8:	f043 0310 	orr.w	r3, r3, #16
 800a8dc:	60eb      	str	r3, [r5, #12]
    if(hmdma->XferRepeatBlockCpltCallback != NULL)
 800a8de:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 800a8e0:	b11b      	cbz	r3, 800a8ea <HAL_MDMA_Start_IT+0x5c>
      __HAL_MDMA_ENABLE_IT(hmdma, MDMA_IT_BRT);
 800a8e2:	68eb      	ldr	r3, [r5, #12]
 800a8e4:	f043 0308 	orr.w	r3, r3, #8
 800a8e8:	60eb      	str	r3, [r5, #12]
    if(hmdma->XferBufferCpltCallback != NULL)
 800a8ea:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 800a8ec:	b11b      	cbz	r3, 800a8f6 <HAL_MDMA_Start_IT+0x68>
      __HAL_MDMA_ENABLE_IT(hmdma, MDMA_IT_BFTC);
 800a8ee:	68eb      	ldr	r3, [r5, #12]
 800a8f0:	f043 0320 	orr.w	r3, r3, #32
 800a8f4:	60eb      	str	r3, [r5, #12]
    __HAL_MDMA_ENABLE(hmdma);
 800a8f6:	68eb      	ldr	r3, [r5, #12]
 800a8f8:	f043 0301 	orr.w	r3, r3, #1
 800a8fc:	60eb      	str	r3, [r5, #12]
    if(hmdma->Init.Request == MDMA_REQUEST_SW)
 800a8fe:	6863      	ldr	r3, [r4, #4]
 800a900:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a904:	d103      	bne.n	800a90e <HAL_MDMA_Start_IT+0x80>
      hmdma->Instance->CCR |=  MDMA_CCR_SWRQ;
 800a906:	68eb      	ldr	r3, [r5, #12]
 800a908:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a90c:	60eb      	str	r3, [r5, #12]
  return HAL_OK;
 800a90e:	2000      	movs	r0, #0
}
 800a910:	b002      	add	sp, #8
 800a912:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_UNLOCK(hmdma);
 800a914:	f880 503c 	strb.w	r5, [r0, #60]	@ 0x3c
  __HAL_LOCK(hmdma);
 800a918:	2002      	movs	r0, #2
 800a91a:	e7f9      	b.n	800a910 <HAL_MDMA_Start_IT+0x82>
    return HAL_ERROR;
 800a91c:	2001      	movs	r0, #1
 800a91e:	e7f7      	b.n	800a910 <HAL_MDMA_Start_IT+0x82>

0800a920 <HAL_MDMA_Abort_IT>:
  if(hmdma == NULL)
 800a920:	b128      	cbz	r0, 800a92e <HAL_MDMA_Abort_IT+0xe>
  if(HAL_MDMA_STATE_BUSY != hmdma->State)
 800a922:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 800a926:	2b02      	cmp	r3, #2
 800a928:	d003      	beq.n	800a932 <HAL_MDMA_Abort_IT+0x12>
    hmdma->ErrorCode = HAL_MDMA_ERROR_NO_XFER;
 800a92a:	2380      	movs	r3, #128	@ 0x80
 800a92c:	6683      	str	r3, [r0, #104]	@ 0x68
    return HAL_ERROR;
 800a92e:	2001      	movs	r0, #1
 800a930:	4770      	bx	lr
    __HAL_MDMA_DISABLE(hmdma);
 800a932:	6802      	ldr	r2, [r0, #0]
    hmdma->State = HAL_MDMA_STATE_ABORT;
 800a934:	2304      	movs	r3, #4
 800a936:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
  return HAL_OK;
 800a93a:	2000      	movs	r0, #0
    __HAL_MDMA_DISABLE(hmdma);
 800a93c:	68d3      	ldr	r3, [r2, #12]
 800a93e:	f023 0301 	bic.w	r3, r3, #1
 800a942:	60d3      	str	r3, [r2, #12]
}
 800a944:	4770      	bx	lr
	...

0800a948 <HAL_MDMA_IRQHandler>:
  __IO uint32_t count = 0;
 800a948:	2300      	movs	r3, #0
{
 800a94a:	b537      	push	{r0, r1, r2, r4, r5, lr}
  __IO uint32_t count = 0;
 800a94c:	9301      	str	r3, [sp, #4]
  if((MDMA->GISR0 & generalIntFlag) == 0U)
 800a94e:	f04f 42a4 	mov.w	r2, #1375731712	@ 0x52000000
  uint32_t timeout = SystemCoreClock / 9600U;
 800a952:	4b58      	ldr	r3, [pc, #352]	@ (800aab4 <HAL_MDMA_IRQHandler+0x16c>)
{
 800a954:	4604      	mov	r4, r0
  generalIntFlag =  1UL << ((((uint32_t)hmdma->Instance - (uint32_t)(MDMA_Channel0))/HAL_MDMA_CHANNEL_SIZE) & 0x1FU);
 800a956:	2101      	movs	r1, #1
  uint32_t timeout = SystemCoreClock / 9600U;
 800a958:	681d      	ldr	r5, [r3, #0]
  generalIntFlag =  1UL << ((((uint32_t)hmdma->Instance - (uint32_t)(MDMA_Channel0))/HAL_MDMA_CHANNEL_SIZE) & 0x1FU);
 800a95a:	6803      	ldr	r3, [r0, #0]
  if((MDMA->GISR0 & generalIntFlag) == 0U)
 800a95c:	6810      	ldr	r0, [r2, #0]
  generalIntFlag =  1UL << ((((uint32_t)hmdma->Instance - (uint32_t)(MDMA_Channel0))/HAL_MDMA_CHANNEL_SIZE) & 0x1FU);
 800a95e:	f103 422e 	add.w	r2, r3, #2919235584	@ 0xae000000
 800a962:	3a40      	subs	r2, #64	@ 0x40
 800a964:	f3c2 1284 	ubfx	r2, r2, #6, #5
 800a968:	fa01 f202 	lsl.w	r2, r1, r2
  if((MDMA->GISR0 & generalIntFlag) == 0U)
 800a96c:	4202      	tst	r2, r0
 800a96e:	f000 809e 	beq.w	800aaae <HAL_MDMA_IRQHandler+0x166>
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_TE) != 0U))
 800a972:	681a      	ldr	r2, [r3, #0]
 800a974:	07d1      	lsls	r1, r2, #31
 800a976:	d529      	bpl.n	800a9cc <HAL_MDMA_IRQHandler+0x84>
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_TE) != 0U)
 800a978:	68da      	ldr	r2, [r3, #12]
 800a97a:	0792      	lsls	r2, r2, #30
 800a97c:	d526      	bpl.n	800a9cc <HAL_MDMA_IRQHandler+0x84>
      __HAL_MDMA_DISABLE_IT(hmdma, MDMA_IT_TE);
 800a97e:	68da      	ldr	r2, [r3, #12]
 800a980:	f022 0202 	bic.w	r2, r2, #2
 800a984:	60da      	str	r2, [r3, #12]
      errorFlag = hmdma->Instance->CESR;
 800a986:	689a      	ldr	r2, [r3, #8]
        hmdma->ErrorCode |= HAL_MDMA_ERROR_READ_XFER;
 800a988:	6ea1      	ldr	r1, [r4, #104]	@ 0x68
      if((errorFlag & MDMA_CESR_TED) == 0U)
 800a98a:	0610      	lsls	r0, r2, #24
        hmdma->ErrorCode |= HAL_MDMA_ERROR_READ_XFER;
 800a98c:	bf54      	ite	pl
 800a98e:	f041 0101 	orrpl.w	r1, r1, #1
        hmdma->ErrorCode |= HAL_MDMA_ERROR_WRITE_XFER;
 800a992:	f041 0102 	orrmi.w	r1, r1, #2
 800a996:	66a1      	str	r1, [r4, #104]	@ 0x68
      if((errorFlag & MDMA_CESR_TEMD) != 0U)
 800a998:	0591      	lsls	r1, r2, #22
 800a99a:	d503      	bpl.n	800a9a4 <HAL_MDMA_IRQHandler+0x5c>
        hmdma->ErrorCode |= HAL_MDMA_ERROR_MASK_DATA;
 800a99c:	6ea1      	ldr	r1, [r4, #104]	@ 0x68
 800a99e:	f041 0104 	orr.w	r1, r1, #4
 800a9a2:	66a1      	str	r1, [r4, #104]	@ 0x68
      if((errorFlag & MDMA_CESR_TELD) != 0U)
 800a9a4:	05d0      	lsls	r0, r2, #23
 800a9a6:	d503      	bpl.n	800a9b0 <HAL_MDMA_IRQHandler+0x68>
        hmdma->ErrorCode |= HAL_MDMA_ERROR_LINKED_LIST;
 800a9a8:	6ea1      	ldr	r1, [r4, #104]	@ 0x68
 800a9aa:	f041 0108 	orr.w	r1, r1, #8
 800a9ae:	66a1      	str	r1, [r4, #104]	@ 0x68
      if((errorFlag & MDMA_CESR_ASE) != 0U)
 800a9b0:	0551      	lsls	r1, r2, #21
 800a9b2:	d503      	bpl.n	800a9bc <HAL_MDMA_IRQHandler+0x74>
        hmdma->ErrorCode |= HAL_MDMA_ERROR_ALIGNMENT;
 800a9b4:	6ea1      	ldr	r1, [r4, #104]	@ 0x68
 800a9b6:	f041 0110 	orr.w	r1, r1, #16
 800a9ba:	66a1      	str	r1, [r4, #104]	@ 0x68
      if((errorFlag & MDMA_CESR_BSE) != 0U)
 800a9bc:	0512      	lsls	r2, r2, #20
 800a9be:	d503      	bpl.n	800a9c8 <HAL_MDMA_IRQHandler+0x80>
        hmdma->ErrorCode |= HAL_MDMA_ERROR_BLOCK_SIZE;
 800a9c0:	6ea2      	ldr	r2, [r4, #104]	@ 0x68
 800a9c2:	f042 0220 	orr.w	r2, r2, #32
 800a9c6:	66a2      	str	r2, [r4, #104]	@ 0x68
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_TE);
 800a9c8:	2201      	movs	r2, #1
 800a9ca:	605a      	str	r2, [r3, #4]
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BFTC) != 0U))
 800a9cc:	681a      	ldr	r2, [r3, #0]
 800a9ce:	06d0      	lsls	r0, r2, #27
 800a9d0:	d508      	bpl.n	800a9e4 <HAL_MDMA_IRQHandler+0x9c>
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BFTC) != 0U)
 800a9d2:	68da      	ldr	r2, [r3, #12]
 800a9d4:	0691      	lsls	r1, r2, #26
 800a9d6:	d505      	bpl.n	800a9e4 <HAL_MDMA_IRQHandler+0x9c>
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BFTC);
 800a9d8:	2210      	movs	r2, #16
 800a9da:	605a      	str	r2, [r3, #4]
      if(hmdma->XferBufferCpltCallback != NULL)
 800a9dc:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 800a9de:	b10b      	cbz	r3, 800a9e4 <HAL_MDMA_IRQHandler+0x9c>
        hmdma->XferBufferCpltCallback(hmdma);
 800a9e0:	4620      	mov	r0, r4
 800a9e2:	4798      	blx	r3
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BT) != 0U))
 800a9e4:	6823      	ldr	r3, [r4, #0]
 800a9e6:	681a      	ldr	r2, [r3, #0]
 800a9e8:	0712      	lsls	r2, r2, #28
 800a9ea:	d508      	bpl.n	800a9fe <HAL_MDMA_IRQHandler+0xb6>
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BT) != 0U)
 800a9ec:	68da      	ldr	r2, [r3, #12]
 800a9ee:	06d0      	lsls	r0, r2, #27
 800a9f0:	d505      	bpl.n	800a9fe <HAL_MDMA_IRQHandler+0xb6>
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BT);
 800a9f2:	2208      	movs	r2, #8
 800a9f4:	605a      	str	r2, [r3, #4]
      if(hmdma->XferBlockCpltCallback != NULL)
 800a9f6:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 800a9f8:	b10b      	cbz	r3, 800a9fe <HAL_MDMA_IRQHandler+0xb6>
        hmdma->XferBlockCpltCallback(hmdma);
 800a9fa:	4620      	mov	r0, r4
 800a9fc:	4798      	blx	r3
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BRT) != 0U))
 800a9fe:	6823      	ldr	r3, [r4, #0]
 800aa00:	681a      	ldr	r2, [r3, #0]
 800aa02:	0751      	lsls	r1, r2, #29
 800aa04:	d508      	bpl.n	800aa18 <HAL_MDMA_IRQHandler+0xd0>
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BRT) != 0U)
 800aa06:	68da      	ldr	r2, [r3, #12]
 800aa08:	0712      	lsls	r2, r2, #28
 800aa0a:	d505      	bpl.n	800aa18 <HAL_MDMA_IRQHandler+0xd0>
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BRT);
 800aa0c:	2204      	movs	r2, #4
 800aa0e:	605a      	str	r2, [r3, #4]
      if(hmdma->XferRepeatBlockCpltCallback != NULL)
 800aa10:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 800aa12:	b10b      	cbz	r3, 800aa18 <HAL_MDMA_IRQHandler+0xd0>
        hmdma->XferRepeatBlockCpltCallback(hmdma);
 800aa14:	4620      	mov	r0, r4
 800aa16:	4798      	blx	r3
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_CTC) != 0U))
 800aa18:	6823      	ldr	r3, [r4, #0]
 800aa1a:	681a      	ldr	r2, [r3, #0]
 800aa1c:	0790      	lsls	r0, r2, #30
 800aa1e:	d524      	bpl.n	800aa6a <HAL_MDMA_IRQHandler+0x122>
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_CTC) != 0U)
 800aa20:	68da      	ldr	r2, [r3, #12]
 800aa22:	0751      	lsls	r1, r2, #29
 800aa24:	d521      	bpl.n	800aa6a <HAL_MDMA_IRQHandler+0x122>
      __HAL_MDMA_DISABLE_IT(hmdma, (MDMA_IT_TE | MDMA_IT_CTC | MDMA_IT_BT | MDMA_IT_BRT | MDMA_IT_BFTC));
 800aa26:	68da      	ldr	r2, [r3, #12]
 800aa28:	f022 023e 	bic.w	r2, r2, #62	@ 0x3e
 800aa2c:	60da      	str	r2, [r3, #12]
      if(HAL_MDMA_STATE_ABORT == hmdma->State)
 800aa2e:	f894 203d 	ldrb.w	r2, [r4, #61]	@ 0x3d
 800aa32:	2a04      	cmp	r2, #4
 800aa34:	f04f 0200 	mov.w	r2, #0
 800aa38:	d10c      	bne.n	800aa54 <HAL_MDMA_IRQHandler+0x10c>
        hmdma->State = HAL_MDMA_STATE_READY;
 800aa3a:	2301      	movs	r3, #1
        __HAL_UNLOCK(hmdma);
 800aa3c:	f884 203c 	strb.w	r2, [r4, #60]	@ 0x3c
        hmdma->State = HAL_MDMA_STATE_READY;
 800aa40:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
        if(hmdma->XferAbortCallback != NULL)
 800aa44:	6da3      	ldr	r3, [r4, #88]	@ 0x58
    if (hmdma->XferErrorCallback != NULL)
 800aa46:	2b00      	cmp	r3, #0
 800aa48:	d031      	beq.n	800aaae <HAL_MDMA_IRQHandler+0x166>
      hmdma->XferErrorCallback(hmdma);
 800aa4a:	4620      	mov	r0, r4
}
 800aa4c:	b003      	add	sp, #12
 800aa4e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
      hmdma->XferErrorCallback(hmdma);
 800aa52:	4718      	bx	r3
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_CTC);
 800aa54:	2102      	movs	r1, #2
 800aa56:	6059      	str	r1, [r3, #4]
      hmdma->State = HAL_MDMA_STATE_READY;
 800aa58:	2301      	movs	r3, #1
      __HAL_UNLOCK(hmdma);
 800aa5a:	f884 203c 	strb.w	r2, [r4, #60]	@ 0x3c
      hmdma->State = HAL_MDMA_STATE_READY;
 800aa5e:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
      if(hmdma->XferCpltCallback != NULL)
 800aa62:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 800aa64:	b10b      	cbz	r3, 800aa6a <HAL_MDMA_IRQHandler+0x122>
        hmdma->XferCpltCallback(hmdma);
 800aa66:	4620      	mov	r0, r4
 800aa68:	4798      	blx	r3
  if(hmdma->ErrorCode != HAL_MDMA_ERROR_NONE)
 800aa6a:	6ea3      	ldr	r3, [r4, #104]	@ 0x68
 800aa6c:	b1fb      	cbz	r3, 800aaae <HAL_MDMA_IRQHandler+0x166>
  uint32_t timeout = SystemCoreClock / 9600U;
 800aa6e:	f44f 5316 	mov.w	r3, #9600	@ 0x2580
 800aa72:	fbb5 f5f3 	udiv	r5, r5, r3
    hmdma->State = HAL_MDMA_STATE_ABORT;
 800aa76:	2304      	movs	r3, #4
 800aa78:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
    __HAL_MDMA_DISABLE(hmdma);
 800aa7c:	6823      	ldr	r3, [r4, #0]
 800aa7e:	68da      	ldr	r2, [r3, #12]
 800aa80:	f022 0201 	bic.w	r2, r2, #1
 800aa84:	60da      	str	r2, [r3, #12]
      if (++count > timeout)
 800aa86:	9a01      	ldr	r2, [sp, #4]
 800aa88:	3201      	adds	r2, #1
 800aa8a:	42aa      	cmp	r2, r5
 800aa8c:	9201      	str	r2, [sp, #4]
 800aa8e:	d802      	bhi.n	800aa96 <HAL_MDMA_IRQHandler+0x14e>
    while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U);
 800aa90:	68da      	ldr	r2, [r3, #12]
 800aa92:	07d2      	lsls	r2, r2, #31
 800aa94:	d4f7      	bmi.n	800aa86 <HAL_MDMA_IRQHandler+0x13e>
    __HAL_UNLOCK(hmdma);
 800aa96:	2200      	movs	r2, #0
 800aa98:	f884 203c 	strb.w	r2, [r4, #60]	@ 0x3c
    if((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 800aa9c:	68db      	ldr	r3, [r3, #12]
 800aa9e:	07db      	lsls	r3, r3, #31
      hmdma->State = HAL_MDMA_STATE_ERROR;
 800aaa0:	bf4c      	ite	mi
 800aaa2:	2303      	movmi	r3, #3
      hmdma->State = HAL_MDMA_STATE_READY;
 800aaa4:	2301      	movpl	r3, #1
 800aaa6:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
    if (hmdma->XferErrorCallback != NULL)
 800aaaa:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800aaac:	e7cb      	b.n	800aa46 <HAL_MDMA_IRQHandler+0xfe>
}
 800aaae:	b003      	add	sp, #12
 800aab0:	bd30      	pop	{r4, r5, pc}
 800aab2:	bf00      	nop
 800aab4:	2400006c 	.word	0x2400006c

0800aab8 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800aab8:	b570      	push	{r4, r5, r6, lr}

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 800aaba:	4d1c      	ldr	r5, [pc, #112]	@ (800ab2c <HAL_PWREx_ConfigSupply+0x74>)
{
 800aabc:	4604      	mov	r4, r0
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 800aabe:	68eb      	ldr	r3, [r5, #12]
 800aac0:	f003 0307 	and.w	r3, r3, #7
 800aac4:	2b06      	cmp	r3, #6
 800aac6:	d006      	beq.n	800aad6 <HAL_PWREx_ConfigSupply+0x1e>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800aac8:	68e8      	ldr	r0, [r5, #12]
 800aaca:	f000 003f 	and.w	r0, r0, #63	@ 0x3f
 800aace:	1b00      	subs	r0, r0, r4
 800aad0:	bf18      	it	ne
 800aad2:	2001      	movne	r0, #1
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
}
 800aad4:	bd70      	pop	{r4, r5, r6, pc}
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800aad6:	68eb      	ldr	r3, [r5, #12]
 800aad8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800aadc:	4303      	orrs	r3, r0
 800aade:	60eb      	str	r3, [r5, #12]
  tickstart = HAL_GetTick ();
 800aae0:	f7fd f938 	bl	8007d54 <HAL_GetTick>
 800aae4:	4606      	mov	r6, r0
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800aae6:	686b      	ldr	r3, [r5, #4]
 800aae8:	049a      	lsls	r2, r3, #18
 800aaea:	d508      	bpl.n	800aafe <HAL_PWREx_ConfigSupply+0x46>
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 800aaec:	f1a4 031d 	sub.w	r3, r4, #29
 800aaf0:	2b01      	cmp	r3, #1
 800aaf2:	d90c      	bls.n	800ab0e <HAL_PWREx_ConfigSupply+0x56>
 800aaf4:	3c2d      	subs	r4, #45	@ 0x2d
 800aaf6:	2c01      	cmp	r4, #1
 800aaf8:	d909      	bls.n	800ab0e <HAL_PWREx_ConfigSupply+0x56>
      return HAL_OK;
 800aafa:	2000      	movs	r0, #0
 800aafc:	e7ea      	b.n	800aad4 <HAL_PWREx_ConfigSupply+0x1c>
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800aafe:	f7fd f929 	bl	8007d54 <HAL_GetTick>
 800ab02:	1b80      	subs	r0, r0, r6
 800ab04:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 800ab08:	d9ed      	bls.n	800aae6 <HAL_PWREx_ConfigSupply+0x2e>
      return HAL_ERROR;
 800ab0a:	2001      	movs	r0, #1
 800ab0c:	e7e2      	b.n	800aad4 <HAL_PWREx_ConfigSupply+0x1c>
    tickstart = HAL_GetTick ();
 800ab0e:	f7fd f921 	bl	8007d54 <HAL_GetTick>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800ab12:	4d06      	ldr	r5, [pc, #24]	@ (800ab2c <HAL_PWREx_ConfigSupply+0x74>)
    tickstart = HAL_GetTick ();
 800ab14:	4604      	mov	r4, r0
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800ab16:	68eb      	ldr	r3, [r5, #12]
 800ab18:	03db      	lsls	r3, r3, #15
 800ab1a:	d4ee      	bmi.n	800aafa <HAL_PWREx_ConfigSupply+0x42>
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800ab1c:	f7fd f91a 	bl	8007d54 <HAL_GetTick>
 800ab20:	1b00      	subs	r0, r0, r4
 800ab22:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 800ab26:	d9f6      	bls.n	800ab16 <HAL_PWREx_ConfigSupply+0x5e>
 800ab28:	e7ef      	b.n	800ab0a <HAL_PWREx_ConfigSupply+0x52>
 800ab2a:	bf00      	nop
 800ab2c:	58024800 	.word	0x58024800

0800ab30 <QSPI_Config>:
  *            @arg QSPI_FUNCTIONAL_MODE_AUTO_POLLING: Automatic polling mode
  *            @arg QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED: Memory-mapped mode
  * @retval None
  */
static void QSPI_Config(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t FunctionalMode)
{
 800ab30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  assert_param(IS_QSPI_FUNCTIONAL_MODE(FunctionalMode));

  if ((cmd->DataMode != QSPI_DATA_NONE) && (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED))
 800ab34:	6a4e      	ldr	r6, [r1, #36]	@ 0x24
 800ab36:	b136      	cbz	r6, 800ab46 <QSPI_Config+0x16>
 800ab38:	f1b2 6f40 	cmp.w	r2, #201326592	@ 0xc000000
 800ab3c:	d003      	beq.n	800ab46 <QSPI_Config+0x16>
  {
    /* Configure QSPI: DLR register with the number of data to read or write */
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
 800ab3e:	6a8b      	ldr	r3, [r1, #40]	@ 0x28
 800ab40:	6804      	ldr	r4, [r0, #0]
 800ab42:	3b01      	subs	r3, #1
 800ab44:	6123      	str	r3, [r4, #16]
  }

  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
 800ab46:	f8d1 a018 	ldr.w	sl, [r1, #24]
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
    {
      /* Configure QSPI: ABR register with alternate bytes value */
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);

      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800ab4a:	e9d1 7e07 	ldrd	r7, lr, [r1, #28]
  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
 800ab4e:	f1ba 0f00 	cmp.w	sl, #0
 800ab52:	d04c      	beq.n	800abee <QSPI_Config+0xbe>
      {
        /*---- Command with instruction, address and alternate bytes ----*/
        /* Configure QSPI: CCR register with all communications parameters */
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800ab54:	694c      	ldr	r4, [r1, #20]
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
 800ab56:	6805      	ldr	r5, [r0, #0]
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800ab58:	ea4f 4c84 	mov.w	ip, r4, lsl #18
 800ab5c:	ea4a 0406 	orr.w	r4, sl, r6
 800ab60:	680b      	ldr	r3, [r1, #0]
 800ab62:	f8d1 8034 	ldr.w	r8, [r1, #52]	@ 0x34
 800ab66:	ea44 0a02 	orr.w	sl, r4, r2
 800ab6a:	e9d1 090b 	ldrd	r0, r9, [r1, #44]	@ 0x2c
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 800ab6e:	f1be 0f00 	cmp.w	lr, #0
 800ab72:	d024      	beq.n	800abbe <QSPI_Config+0x8e>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 800ab74:	688e      	ldr	r6, [r1, #8]
 800ab76:	ea4a 040e 	orr.w	r4, sl, lr
 800ab7a:	61ee      	str	r6, [r5, #28]
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800ab7c:	690e      	ldr	r6, [r1, #16]
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800ab7e:	b19f      	cbz	r7, 800aba8 <QSPI_Config+0x78>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800ab80:	433b      	orrs	r3, r7
 800ab82:	4303      	orrs	r3, r0
 800ab84:	68c8      	ldr	r0, [r1, #12]
 800ab86:	ea43 0309 	orr.w	r3, r3, r9
 800ab8a:	ea43 0308 	orr.w	r3, r3, r8
 800ab8e:	4333      	orrs	r3, r6
 800ab90:	4303      	orrs	r3, r0
 800ab92:	ea43 030c 	orr.w	r3, r3, ip
 800ab96:	4323      	orrs	r3, r4
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
                                         cmd->DataMode | (cmd->DummyCycles << QUADSPI_CCR_DCYC_Pos) |
                                         cmd->AlternateByteMode | cmd->AddressSize | cmd->AddressMode |
                                         cmd->InstructionMode | cmd->Instruction | FunctionalMode));

        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800ab98:	f1b2 6f40 	cmp.w	r2, #201326592	@ 0xc000000
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800ab9c:	616b      	str	r3, [r5, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800ab9e:	d001      	beq.n	800aba4 <QSPI_Config+0x74>
        {
          /* Configure QSPI: AR register with address value */
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800aba0:	684b      	ldr	r3, [r1, #4]
 800aba2:	61ab      	str	r3, [r5, #24]
                                           cmd->InstructionMode | FunctionalMode));
        }
      }
    }
  }
}
 800aba4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800aba8:	4303      	orrs	r3, r0
 800abaa:	ea43 0309 	orr.w	r3, r3, r9
 800abae:	ea43 0308 	orr.w	r3, r3, r8
 800abb2:	4333      	orrs	r3, r6
 800abb4:	ea43 030c 	orr.w	r3, r3, ip
 800abb8:	4323      	orrs	r3, r4
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800abba:	616b      	str	r3, [r5, #20]
 800abbc:	e7f2      	b.n	800aba4 <QSPI_Config+0x74>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800abbe:	b167      	cbz	r7, 800abda <QSPI_Config+0xaa>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800abc0:	433b      	orrs	r3, r7
 800abc2:	4303      	orrs	r3, r0
 800abc4:	68c8      	ldr	r0, [r1, #12]
 800abc6:	ea43 0309 	orr.w	r3, r3, r9
 800abca:	ea43 0308 	orr.w	r3, r3, r8
 800abce:	4303      	orrs	r3, r0
 800abd0:	ea43 030c 	orr.w	r3, r3, ip
 800abd4:	ea43 030a 	orr.w	r3, r3, sl
 800abd8:	e7de      	b.n	800ab98 <QSPI_Config+0x68>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800abda:	4303      	orrs	r3, r0
 800abdc:	ea43 0309 	orr.w	r3, r3, r9
 800abe0:	ea43 0408 	orr.w	r4, r3, r8
 800abe4:	ea44 030c 	orr.w	r3, r4, ip
 800abe8:	ea43 030a 	orr.w	r3, r3, sl
 800abec:	e7e5      	b.n	800abba <QSPI_Config+0x8a>
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 800abee:	f1be 0f00 	cmp.w	lr, #0
 800abf2:	d02c      	beq.n	800ac4e <QSPI_Config+0x11e>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 800abf4:	ea46 050e 	orr.w	r5, r6, lr
 800abf8:	688b      	ldr	r3, [r1, #8]
 800abfa:	6804      	ldr	r4, [r0, #0]
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800abfc:	694e      	ldr	r6, [r1, #20]
 800abfe:	4315      	orrs	r5, r2
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 800ac00:	61e3      	str	r3, [r4, #28]
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800ac02:	f8d1 c034 	ldr.w	ip, [r1, #52]	@ 0x34
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800ac06:	04b6      	lsls	r6, r6, #18
 800ac08:	690b      	ldr	r3, [r1, #16]
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800ac0a:	e9d1 8e0b 	ldrd	r8, lr, [r1, #44]	@ 0x2c
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800ac0e:	b1a7      	cbz	r7, 800ac3a <QSPI_Config+0x10a>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800ac10:	433b      	orrs	r3, r7
 800ac12:	68c8      	ldr	r0, [r1, #12]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800ac14:	f1b2 6f40 	cmp.w	r2, #201326592	@ 0xc000000
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800ac18:	ea43 0308 	orr.w	r3, r3, r8
 800ac1c:	ea43 030e 	orr.w	r3, r3, lr
 800ac20:	ea43 030c 	orr.w	r3, r3, ip
 800ac24:	ea43 0300 	orr.w	r3, r3, r0
 800ac28:	ea43 0306 	orr.w	r3, r3, r6
 800ac2c:	ea43 0305 	orr.w	r3, r3, r5
 800ac30:	6163      	str	r3, [r4, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800ac32:	d0b7      	beq.n	800aba4 <QSPI_Config+0x74>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800ac34:	684b      	ldr	r3, [r1, #4]
 800ac36:	61a3      	str	r3, [r4, #24]
 800ac38:	e7b4      	b.n	800aba4 <QSPI_Config+0x74>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800ac3a:	ea43 0308 	orr.w	r3, r3, r8
 800ac3e:	ea43 030e 	orr.w	r3, r3, lr
 800ac42:	ea43 030c 	orr.w	r3, r3, ip
 800ac46:	4333      	orrs	r3, r6
 800ac48:	432b      	orrs	r3, r5
 800ac4a:	6163      	str	r3, [r4, #20]
 800ac4c:	e7aa      	b.n	800aba4 <QSPI_Config+0x74>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800ac4e:	b1d7      	cbz	r7, 800ac86 <QSPI_Config+0x156>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800ac50:	ea46 0307 	orr.w	r3, r6, r7
 800ac54:	6acc      	ldr	r4, [r1, #44]	@ 0x2c
 800ac56:	6800      	ldr	r0, [r0, #0]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800ac58:	f1b2 6f40 	cmp.w	r2, #201326592	@ 0xc000000
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800ac5c:	ea43 0302 	orr.w	r3, r3, r2
 800ac60:	ea43 0304 	orr.w	r3, r3, r4
 800ac64:	6b0c      	ldr	r4, [r1, #48]	@ 0x30
 800ac66:	ea43 0304 	orr.w	r3, r3, r4
 800ac6a:	6b4c      	ldr	r4, [r1, #52]	@ 0x34
 800ac6c:	ea43 0304 	orr.w	r3, r3, r4
 800ac70:	68cc      	ldr	r4, [r1, #12]
 800ac72:	ea43 0304 	orr.w	r3, r3, r4
 800ac76:	694c      	ldr	r4, [r1, #20]
 800ac78:	ea43 4384 	orr.w	r3, r3, r4, lsl #18
 800ac7c:	6143      	str	r3, [r0, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800ac7e:	d091      	beq.n	800aba4 <QSPI_Config+0x74>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800ac80:	684b      	ldr	r3, [r1, #4]
 800ac82:	6183      	str	r3, [r0, #24]
 800ac84:	e78e      	b.n	800aba4 <QSPI_Config+0x74>
        if (cmd->DataMode != QSPI_DATA_NONE)
 800ac86:	2e00      	cmp	r6, #0
 800ac88:	d08c      	beq.n	800aba4 <QSPI_Config+0x74>
          WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800ac8a:	6acb      	ldr	r3, [r1, #44]	@ 0x2c
 800ac8c:	6800      	ldr	r0, [r0, #0]
 800ac8e:	4333      	orrs	r3, r6
 800ac90:	4313      	orrs	r3, r2
 800ac92:	6b0a      	ldr	r2, [r1, #48]	@ 0x30
 800ac94:	4313      	orrs	r3, r2
 800ac96:	6b4a      	ldr	r2, [r1, #52]	@ 0x34
 800ac98:	4313      	orrs	r3, r2
 800ac9a:	694a      	ldr	r2, [r1, #20]
 800ac9c:	ea43 4382 	orr.w	r3, r3, r2, lsl #18
 800aca0:	6143      	str	r3, [r0, #20]
}
 800aca2:	e77f      	b.n	800aba4 <QSPI_Config+0x74>

0800aca4 <QSPI_WaitFlagStateUntilTimeout>:
{
 800aca4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aca8:	f8dd 8018 	ldr.w	r8, [sp, #24]
 800acac:	4604      	mov	r4, r0
 800acae:	460e      	mov	r6, r1
 800acb0:	4615      	mov	r5, r2
 800acb2:	461f      	mov	r7, r3
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800acb4:	6822      	ldr	r2, [r4, #0]
 800acb6:	6893      	ldr	r3, [r2, #8]
 800acb8:	4233      	tst	r3, r6
 800acba:	bf14      	ite	ne
 800acbc:	2301      	movne	r3, #1
 800acbe:	2300      	moveq	r3, #0
 800acc0:	42ab      	cmp	r3, r5
 800acc2:	d101      	bne.n	800acc8 <QSPI_WaitFlagStateUntilTimeout+0x24>
  return HAL_OK;
 800acc4:	2000      	movs	r0, #0
 800acc6:	e012      	b.n	800acee <QSPI_WaitFlagStateUntilTimeout+0x4a>
    if (Timeout != HAL_MAX_DELAY)
 800acc8:	f1b8 3fff 	cmp.w	r8, #4294967295
 800accc:	d0f3      	beq.n	800acb6 <QSPI_WaitFlagStateUntilTimeout+0x12>
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800acce:	f7fd f841 	bl	8007d54 <HAL_GetTick>
 800acd2:	1bc0      	subs	r0, r0, r7
 800acd4:	4540      	cmp	r0, r8
 800acd6:	d802      	bhi.n	800acde <QSPI_WaitFlagStateUntilTimeout+0x3a>
 800acd8:	f1b8 0f00 	cmp.w	r8, #0
 800acdc:	d1ea      	bne.n	800acb4 <QSPI_WaitFlagStateUntilTimeout+0x10>
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 800acde:	2304      	movs	r3, #4
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 800ace0:	2001      	movs	r0, #1
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 800ace2:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 800ace6:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 800ace8:	f043 0301 	orr.w	r3, r3, #1
 800acec:	6463      	str	r3, [r4, #68]	@ 0x44
}
 800acee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

0800acf4 <HAL_QSPI_Init>:
{
 800acf4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800acf6:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800acf8:	f7fd f82c 	bl	8007d54 <HAL_GetTick>
 800acfc:	4605      	mov	r5, r0
  if(hqspi == NULL)
 800acfe:	2c00      	cmp	r4, #0
 800ad00:	d03f      	beq.n	800ad82 <HAL_QSPI_Init+0x8e>
  if(hqspi->State == HAL_QSPI_STATE_RESET)
 800ad02:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 800ad06:	b92b      	cbnz	r3, 800ad14 <HAL_QSPI_Init+0x20>
    HAL_QSPI_MspInit(hqspi);
 800ad08:	4620      	mov	r0, r4
 800ad0a:	f7f6 fa85 	bl	8001218 <HAL_QSPI_MspInit>
  hqspi->Timeout = Timeout;
 800ad0e:	f241 3388 	movw	r3, #5000	@ 0x1388
 800ad12:	64a3      	str	r3, [r4, #72]	@ 0x48
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 800ad14:	6821      	ldr	r1, [r4, #0]
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800ad16:	4620      	mov	r0, r4
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 800ad18:	68a3      	ldr	r3, [r4, #8]
 800ad1a:	680a      	ldr	r2, [r1, #0]
 800ad1c:	3b01      	subs	r3, #1
 800ad1e:	f422 52f8 	bic.w	r2, r2, #7936	@ 0x1f00
 800ad22:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800ad26:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 800ad28:	600a      	str	r2, [r1, #0]
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800ad2a:	2200      	movs	r2, #0
 800ad2c:	9300      	str	r3, [sp, #0]
 800ad2e:	2120      	movs	r1, #32
 800ad30:	462b      	mov	r3, r5
 800ad32:	f7ff ffb7 	bl	800aca4 <QSPI_WaitFlagStateUntilTimeout>
  if(status == HAL_OK)
 800ad36:	bb10      	cbnz	r0, 800ad7e <HAL_QSPI_Init+0x8a>
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 800ad38:	6822      	ldr	r2, [r4, #0]
 800ad3a:	69e5      	ldr	r5, [r4, #28]
 800ad3c:	68e3      	ldr	r3, [r4, #12]
 800ad3e:	6811      	ldr	r1, [r2, #0]
 800ad40:	432b      	orrs	r3, r5
 800ad42:	6a25      	ldr	r5, [r4, #32]
 800ad44:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 800ad48:	432b      	orrs	r3, r5
 800ad4a:	6865      	ldr	r5, [r4, #4]
 800ad4c:	f021 01d0 	bic.w	r1, r1, #208	@ 0xd0
 800ad50:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
 800ad54:	430b      	orrs	r3, r1
 800ad56:	6013      	str	r3, [r2, #0]
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 800ad58:	6855      	ldr	r5, [r2, #4]
 800ad5a:	e9d4 3105 	ldrd	r3, r1, [r4, #20]
 800ad5e:	430b      	orrs	r3, r1
 800ad60:	6921      	ldr	r1, [r4, #16]
 800ad62:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800ad66:	4908      	ldr	r1, [pc, #32]	@ (800ad88 <HAL_QSPI_Init+0x94>)
 800ad68:	4029      	ands	r1, r5
 800ad6a:	430b      	orrs	r3, r1
 800ad6c:	6053      	str	r3, [r2, #4]
    __HAL_QSPI_ENABLE(hqspi);
 800ad6e:	6813      	ldr	r3, [r2, #0]
 800ad70:	f043 0301 	orr.w	r3, r3, #1
 800ad74:	6013      	str	r3, [r2, #0]
    hqspi->State = HAL_QSPI_STATE_READY;
 800ad76:	2301      	movs	r3, #1
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800ad78:	6460      	str	r0, [r4, #68]	@ 0x44
    hqspi->State = HAL_QSPI_STATE_READY;
 800ad7a:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
}
 800ad7e:	b003      	add	sp, #12
 800ad80:	bd30      	pop	{r4, r5, pc}
    return HAL_ERROR;
 800ad82:	2001      	movs	r0, #1
 800ad84:	e7fb      	b.n	800ad7e <HAL_QSPI_Init+0x8a>
 800ad86:	bf00      	nop
 800ad88:	ffe0f8fe 	.word	0xffe0f8fe

0800ad8c <HAL_QSPI_Command>:
{
 800ad8c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 800ad90:	4604      	mov	r4, r0
 800ad92:	468a      	mov	sl, r1
 800ad94:	4690      	mov	r8, r2
  uint32_t tickstart = HAL_GetTick();
 800ad96:	f7fc ffdd 	bl	8007d54 <HAL_GetTick>
  __HAL_LOCK(hqspi);
 800ad9a:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
  uint32_t tickstart = HAL_GetTick();
 800ad9e:	4607      	mov	r7, r0
  __HAL_LOCK(hqspi);
 800ada0:	2b01      	cmp	r3, #1
 800ada2:	d036      	beq.n	800ae12 <HAL_QSPI_Command+0x86>
 800ada4:	2301      	movs	r3, #1
 800ada6:	2602      	movs	r6, #2
 800ada8:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 800adac:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 800adb0:	2b01      	cmp	r3, #1
 800adb2:	fa5f f983 	uxtb.w	r9, r3
 800adb6:	d128      	bne.n	800ae0a <HAL_QSPI_Command+0x7e>
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800adb8:	2200      	movs	r2, #0
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 800adba:	4603      	mov	r3, r0
 800adbc:	2120      	movs	r1, #32
 800adbe:	4620      	mov	r0, r4
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800adc0:	6462      	str	r2, [r4, #68]	@ 0x44
    hqspi->State = HAL_QSPI_STATE_BUSY;
 800adc2:	f884 6041 	strb.w	r6, [r4, #65]	@ 0x41
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 800adc6:	f8cd 8000 	str.w	r8, [sp]
 800adca:	f7ff ff6b 	bl	800aca4 <QSPI_WaitFlagStateUntilTimeout>
    if (status == HAL_OK)
 800adce:	4605      	mov	r5, r0
 800add0:	b9a0      	cbnz	r0, 800adfc <HAL_QSPI_Command+0x70>
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 800add2:	4602      	mov	r2, r0
 800add4:	4651      	mov	r1, sl
 800add6:	4620      	mov	r0, r4
 800add8:	f7ff feaa 	bl	800ab30 <QSPI_Config>
      if (cmd->DataMode == QSPI_DATA_NONE)
 800addc:	f8da 3024 	ldr.w	r3, [sl, #36]	@ 0x24
 800ade0:	b953      	cbnz	r3, 800adf8 <HAL_QSPI_Command+0x6c>
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 800ade2:	463b      	mov	r3, r7
 800ade4:	464a      	mov	r2, r9
 800ade6:	4631      	mov	r1, r6
 800ade8:	4620      	mov	r0, r4
 800adea:	f8cd 8000 	str.w	r8, [sp]
 800adee:	f7ff ff59 	bl	800aca4 <QSPI_WaitFlagStateUntilTimeout>
        if (status == HAL_OK)
 800adf2:	b960      	cbnz	r0, 800ae0e <HAL_QSPI_Command+0x82>
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800adf4:	6823      	ldr	r3, [r4, #0]
 800adf6:	60de      	str	r6, [r3, #12]
        hqspi->State = HAL_QSPI_STATE_READY;
 800adf8:	f884 9041 	strb.w	r9, [r4, #65]	@ 0x41
  __HAL_UNLOCK(hqspi);
 800adfc:	2300      	movs	r3, #0
 800adfe:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
}
 800ae02:	4628      	mov	r0, r5
 800ae04:	b002      	add	sp, #8
 800ae06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    status = HAL_BUSY;
 800ae0a:	4635      	mov	r5, r6
 800ae0c:	e7f6      	b.n	800adfc <HAL_QSPI_Command+0x70>
 800ae0e:	4605      	mov	r5, r0
 800ae10:	e7f4      	b.n	800adfc <HAL_QSPI_Command+0x70>
  __HAL_LOCK(hqspi);
 800ae12:	2502      	movs	r5, #2
 800ae14:	e7f5      	b.n	800ae02 <HAL_QSPI_Command+0x76>

0800ae16 <HAL_QSPI_Transmit>:
{
 800ae16:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800ae1a:	4604      	mov	r4, r0
 800ae1c:	4688      	mov	r8, r1
 800ae1e:	4617      	mov	r7, r2
  uint32_t tickstart = HAL_GetTick();
 800ae20:	f7fc ff98 	bl	8007d54 <HAL_GetTick>
  __HAL_LOCK(hqspi);
 800ae24:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
  uint32_t tickstart = HAL_GetTick();
 800ae28:	4606      	mov	r6, r0
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 800ae2a:	6825      	ldr	r5, [r4, #0]
  __HAL_LOCK(hqspi);
 800ae2c:	2b01      	cmp	r3, #1
 800ae2e:	d04c      	beq.n	800aeca <HAL_QSPI_Transmit+0xb4>
 800ae30:	2301      	movs	r3, #1
 800ae32:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 800ae36:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 800ae3a:	2b01      	cmp	r3, #1
 800ae3c:	b2d8      	uxtb	r0, r3
 800ae3e:	d142      	bne.n	800aec6 <HAL_QSPI_Transmit+0xb0>
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800ae40:	2300      	movs	r3, #0
 800ae42:	6463      	str	r3, [r4, #68]	@ 0x44
    if(pData != NULL )
 800ae44:	f1b8 0f00 	cmp.w	r8, #0
 800ae48:	d038      	beq.n	800aebc <HAL_QSPI_Transmit+0xa6>
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_TX;
 800ae4a:	2312      	movs	r3, #18
 800ae4c:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
      hqspi->TxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 800ae50:	692b      	ldr	r3, [r5, #16]
 800ae52:	3301      	adds	r3, #1
 800ae54:	62e3      	str	r3, [r4, #44]	@ 0x2c
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 800ae56:	692b      	ldr	r3, [r5, #16]
      hqspi->pTxBuffPtr = pData;
 800ae58:	f8c4 8024 	str.w	r8, [r4, #36]	@ 0x24
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 800ae5c:	3301      	adds	r3, #1
 800ae5e:	62a3      	str	r3, [r4, #40]	@ 0x28
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 800ae60:	696b      	ldr	r3, [r5, #20]
 800ae62:	f023 6340 	bic.w	r3, r3, #201326592	@ 0xc000000
 800ae66:	616b      	str	r3, [r5, #20]
      while(hqspi->TxXferCount > 0U)
 800ae68:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800ae6a:	b99b      	cbnz	r3, 800ae94 <HAL_QSPI_Transmit+0x7e>
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 800ae6c:	4633      	mov	r3, r6
 800ae6e:	2201      	movs	r2, #1
 800ae70:	2102      	movs	r1, #2
 800ae72:	4620      	mov	r0, r4
 800ae74:	9700      	str	r7, [sp, #0]
 800ae76:	f7ff ff15 	bl	800aca4 <QSPI_WaitFlagStateUntilTimeout>
        if (status == HAL_OK)
 800ae7a:	b910      	cbnz	r0, 800ae82 <HAL_QSPI_Transmit+0x6c>
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800ae7c:	6823      	ldr	r3, [r4, #0]
 800ae7e:	2202      	movs	r2, #2
 800ae80:	60da      	str	r2, [r3, #12]
      hqspi->State = HAL_QSPI_STATE_READY;
 800ae82:	2301      	movs	r3, #1
 800ae84:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  __HAL_UNLOCK(hqspi);
 800ae88:	2300      	movs	r3, #0
 800ae8a:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
}
 800ae8e:	b002      	add	sp, #8
 800ae90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_FT, SET, tickstart, Timeout);
 800ae94:	4633      	mov	r3, r6
 800ae96:	2201      	movs	r2, #1
 800ae98:	2104      	movs	r1, #4
 800ae9a:	4620      	mov	r0, r4
 800ae9c:	9700      	str	r7, [sp, #0]
 800ae9e:	f7ff ff01 	bl	800aca4 <QSPI_WaitFlagStateUntilTimeout>
        if (status != HAL_OK)
 800aea2:	2800      	cmp	r0, #0
 800aea4:	d1ed      	bne.n	800ae82 <HAL_QSPI_Transmit+0x6c>
        *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 800aea6:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800aea8:	781b      	ldrb	r3, [r3, #0]
 800aeaa:	f885 3020 	strb.w	r3, [r5, #32]
        hqspi->pTxBuffPtr++;
 800aeae:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800aeb0:	3301      	adds	r3, #1
 800aeb2:	6263      	str	r3, [r4, #36]	@ 0x24
        hqspi->TxXferCount--;
 800aeb4:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800aeb6:	3b01      	subs	r3, #1
 800aeb8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800aeba:	e7d5      	b.n	800ae68 <HAL_QSPI_Transmit+0x52>
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 800aebc:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 800aebe:	f043 0308 	orr.w	r3, r3, #8
 800aec2:	6463      	str	r3, [r4, #68]	@ 0x44
      status = HAL_ERROR;
 800aec4:	e7e0      	b.n	800ae88 <HAL_QSPI_Transmit+0x72>
    status = HAL_BUSY;
 800aec6:	2002      	movs	r0, #2
 800aec8:	e7de      	b.n	800ae88 <HAL_QSPI_Transmit+0x72>
  __HAL_LOCK(hqspi);
 800aeca:	2002      	movs	r0, #2
 800aecc:	e7df      	b.n	800ae8e <HAL_QSPI_Transmit+0x78>

0800aece <HAL_QSPI_Receive>:
{
 800aece:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800aed2:	4604      	mov	r4, r0
 800aed4:	4617      	mov	r7, r2
 800aed6:	4688      	mov	r8, r1
  uint32_t tickstart = HAL_GetTick();
 800aed8:	f7fc ff3c 	bl	8007d54 <HAL_GetTick>
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
 800aedc:	6825      	ldr	r5, [r4, #0]
  uint32_t tickstart = HAL_GetTick();
 800aede:	4606      	mov	r6, r0
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
 800aee0:	69aa      	ldr	r2, [r5, #24]
  __HAL_LOCK(hqspi);
 800aee2:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 800aee6:	2b01      	cmp	r3, #1
 800aee8:	d04f      	beq.n	800af8a <HAL_QSPI_Receive+0xbc>
 800aeea:	2301      	movs	r3, #1
 800aeec:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 800aef0:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 800aef4:	2b01      	cmp	r3, #1
 800aef6:	b2d8      	uxtb	r0, r3
 800aef8:	d145      	bne.n	800af86 <HAL_QSPI_Receive+0xb8>
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800aefa:	2300      	movs	r3, #0
 800aefc:	6463      	str	r3, [r4, #68]	@ 0x44
    if(pData != NULL )
 800aefe:	f1b8 0f00 	cmp.w	r8, #0
 800af02:	d03b      	beq.n	800af7c <HAL_QSPI_Receive+0xae>
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_RX;
 800af04:	2322      	movs	r3, #34	@ 0x22
 800af06:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
      hqspi->RxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 800af0a:	692b      	ldr	r3, [r5, #16]
 800af0c:	3301      	adds	r3, #1
 800af0e:	63a3      	str	r3, [r4, #56]	@ 0x38
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 800af10:	692b      	ldr	r3, [r5, #16]
      hqspi->pRxBuffPtr = pData;
 800af12:	f8c4 8030 	str.w	r8, [r4, #48]	@ 0x30
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 800af16:	3301      	adds	r3, #1
 800af18:	6363      	str	r3, [r4, #52]	@ 0x34
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 800af1a:	6969      	ldr	r1, [r5, #20]
 800af1c:	f021 6140 	bic.w	r1, r1, #201326592	@ 0xc000000
 800af20:	f041 6180 	orr.w	r1, r1, #67108864	@ 0x4000000
 800af24:	6169      	str	r1, [r5, #20]
      WRITE_REG(hqspi->Instance->AR, addr_reg);
 800af26:	61aa      	str	r2, [r5, #24]
      while(hqspi->RxXferCount > 0U)
 800af28:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800af2a:	b99b      	cbnz	r3, 800af54 <HAL_QSPI_Receive+0x86>
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 800af2c:	4633      	mov	r3, r6
 800af2e:	2201      	movs	r2, #1
 800af30:	2102      	movs	r1, #2
 800af32:	4620      	mov	r0, r4
 800af34:	9700      	str	r7, [sp, #0]
 800af36:	f7ff feb5 	bl	800aca4 <QSPI_WaitFlagStateUntilTimeout>
        if  (status == HAL_OK)
 800af3a:	b910      	cbnz	r0, 800af42 <HAL_QSPI_Receive+0x74>
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800af3c:	6823      	ldr	r3, [r4, #0]
 800af3e:	2202      	movs	r2, #2
 800af40:	60da      	str	r2, [r3, #12]
      hqspi->State = HAL_QSPI_STATE_READY;
 800af42:	2301      	movs	r3, #1
 800af44:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  __HAL_UNLOCK(hqspi);
 800af48:	2300      	movs	r3, #0
 800af4a:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
}
 800af4e:	b002      	add	sp, #8
 800af50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, (QSPI_FLAG_FT | QSPI_FLAG_TC), SET, tickstart, Timeout);
 800af54:	4633      	mov	r3, r6
 800af56:	2201      	movs	r2, #1
 800af58:	2106      	movs	r1, #6
 800af5a:	4620      	mov	r0, r4
 800af5c:	9700      	str	r7, [sp, #0]
 800af5e:	f7ff fea1 	bl	800aca4 <QSPI_WaitFlagStateUntilTimeout>
        if  (status != HAL_OK)
 800af62:	2800      	cmp	r0, #0
 800af64:	d1ed      	bne.n	800af42 <HAL_QSPI_Receive+0x74>
        *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 800af66:	f895 2020 	ldrb.w	r2, [r5, #32]
 800af6a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800af6c:	701a      	strb	r2, [r3, #0]
        hqspi->pRxBuffPtr++;
 800af6e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800af70:	3301      	adds	r3, #1
 800af72:	6323      	str	r3, [r4, #48]	@ 0x30
        hqspi->RxXferCount--;
 800af74:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800af76:	3b01      	subs	r3, #1
 800af78:	63a3      	str	r3, [r4, #56]	@ 0x38
 800af7a:	e7d5      	b.n	800af28 <HAL_QSPI_Receive+0x5a>
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 800af7c:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 800af7e:	f043 0308 	orr.w	r3, r3, #8
 800af82:	6463      	str	r3, [r4, #68]	@ 0x44
      status = HAL_ERROR;
 800af84:	e7e0      	b.n	800af48 <HAL_QSPI_Receive+0x7a>
    status = HAL_BUSY;
 800af86:	2002      	movs	r0, #2
 800af88:	e7de      	b.n	800af48 <HAL_QSPI_Receive+0x7a>
  __HAL_LOCK(hqspi);
 800af8a:	2002      	movs	r0, #2
 800af8c:	e7df      	b.n	800af4e <HAL_QSPI_Receive+0x80>

0800af8e <HAL_QSPI_AutoPolling>:
{
 800af8e:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800af92:	4604      	mov	r4, r0
 800af94:	461f      	mov	r7, r3
 800af96:	4689      	mov	r9, r1
 800af98:	4615      	mov	r5, r2
  uint32_t tickstart = HAL_GetTick();
 800af9a:	f7fc fedb 	bl	8007d54 <HAL_GetTick>
  __HAL_LOCK(hqspi);
 800af9e:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
  uint32_t tickstart = HAL_GetTick();
 800afa2:	4606      	mov	r6, r0
  __HAL_LOCK(hqspi);
 800afa4:	2b01      	cmp	r3, #1
 800afa6:	d041      	beq.n	800b02c <HAL_QSPI_AutoPolling+0x9e>
 800afa8:	2301      	movs	r3, #1
 800afaa:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 800afae:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 800afb2:	2b01      	cmp	r3, #1
 800afb4:	fa5f f883 	uxtb.w	r8, r3
 800afb8:	d136      	bne.n	800b028 <HAL_QSPI_AutoPolling+0x9a>
    hqspi->State = HAL_QSPI_STATE_BUSY_AUTO_POLLING;
 800afba:	2342      	movs	r3, #66	@ 0x42
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800afbc:	2200      	movs	r2, #0
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 800afbe:	2120      	movs	r1, #32
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800afc0:	6462      	str	r2, [r4, #68]	@ 0x44
    hqspi->State = HAL_QSPI_STATE_BUSY_AUTO_POLLING;
 800afc2:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 800afc6:	4603      	mov	r3, r0
 800afc8:	9700      	str	r7, [sp, #0]
 800afca:	4620      	mov	r0, r4
 800afcc:	f7ff fe6a 	bl	800aca4 <QSPI_WaitFlagStateUntilTimeout>
    if (status == HAL_OK)
 800afd0:	bb20      	cbnz	r0, 800b01c <HAL_QSPI_AutoPolling+0x8e>
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 800afd2:	6822      	ldr	r2, [r4, #0]
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 800afd4:	4620      	mov	r0, r4
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 800afd6:	682b      	ldr	r3, [r5, #0]
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 800afd8:	6929      	ldr	r1, [r5, #16]
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 800afda:	6293      	str	r3, [r2, #40]	@ 0x28
      WRITE_REG(hqspi->Instance->PSMKR, cfg->Mask);
 800afdc:	686b      	ldr	r3, [r5, #4]
 800afde:	6253      	str	r3, [r2, #36]	@ 0x24
      WRITE_REG(hqspi->Instance->PIR, cfg->Interval);
 800afe0:	68ab      	ldr	r3, [r5, #8]
 800afe2:	62d3      	str	r3, [r2, #44]	@ 0x2c
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 800afe4:	6813      	ldr	r3, [r2, #0]
 800afe6:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 800afea:	430b      	orrs	r3, r1
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 800afec:	4649      	mov	r1, r9
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 800afee:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800aff2:	6013      	str	r3, [r2, #0]
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 800aff4:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
      cmd->NbData = cfg->StatusBytesSize;
 800aff8:	68eb      	ldr	r3, [r5, #12]
 800affa:	f8c9 3028 	str.w	r3, [r9, #40]	@ 0x28
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 800affe:	f7ff fd97 	bl	800ab30 <QSPI_Config>
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_SM, SET, tickstart, Timeout);
 800b002:	4633      	mov	r3, r6
 800b004:	4642      	mov	r2, r8
 800b006:	2108      	movs	r1, #8
 800b008:	4620      	mov	r0, r4
 800b00a:	9700      	str	r7, [sp, #0]
 800b00c:	f7ff fe4a 	bl	800aca4 <QSPI_WaitFlagStateUntilTimeout>
      if (status == HAL_OK)
 800b010:	b920      	cbnz	r0, 800b01c <HAL_QSPI_AutoPolling+0x8e>
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_SM);
 800b012:	6823      	ldr	r3, [r4, #0]
 800b014:	2208      	movs	r2, #8
 800b016:	60da      	str	r2, [r3, #12]
        hqspi->State = HAL_QSPI_STATE_READY;
 800b018:	f884 8041 	strb.w	r8, [r4, #65]	@ 0x41
  __HAL_UNLOCK(hqspi);
 800b01c:	2300      	movs	r3, #0
 800b01e:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
}
 800b022:	b003      	add	sp, #12
 800b024:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    status = HAL_BUSY;
 800b028:	2002      	movs	r0, #2
 800b02a:	e7f7      	b.n	800b01c <HAL_QSPI_AutoPolling+0x8e>
  __HAL_LOCK(hqspi);
 800b02c:	2002      	movs	r0, #2
 800b02e:	e7f8      	b.n	800b022 <HAL_QSPI_AutoPolling+0x94>

0800b030 <HAL_QSPI_MemoryMapped>:
{
 800b030:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b032:	4604      	mov	r4, r0
 800b034:	4616      	mov	r6, r2
 800b036:	460f      	mov	r7, r1
  uint32_t tickstart = HAL_GetTick();
 800b038:	f7fc fe8c 	bl	8007d54 <HAL_GetTick>
  __HAL_LOCK(hqspi);
 800b03c:	f894 2040 	ldrb.w	r2, [r4, #64]	@ 0x40
  uint32_t tickstart = HAL_GetTick();
 800b040:	4603      	mov	r3, r0
  __HAL_LOCK(hqspi);
 800b042:	2a01      	cmp	r2, #1
 800b044:	d033      	beq.n	800b0ae <HAL_QSPI_MemoryMapped+0x7e>
 800b046:	2201      	movs	r2, #1
 800b048:	f884 2040 	strb.w	r2, [r4, #64]	@ 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 800b04c:	f894 2041 	ldrb.w	r2, [r4, #65]	@ 0x41
 800b050:	2a01      	cmp	r2, #1
 800b052:	d12a      	bne.n	800b0aa <HAL_QSPI_MemoryMapped+0x7a>
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800b054:	2200      	movs	r2, #0
    hqspi->State = HAL_QSPI_STATE_BUSY_MEM_MAPPED;
 800b056:	2182      	movs	r1, #130	@ 0x82
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800b058:	4620      	mov	r0, r4
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800b05a:	6462      	str	r2, [r4, #68]	@ 0x44
    hqspi->State = HAL_QSPI_STATE_BUSY_MEM_MAPPED;
 800b05c:	f884 1041 	strb.w	r1, [r4, #65]	@ 0x41
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800b060:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800b062:	9100      	str	r1, [sp, #0]
 800b064:	2120      	movs	r1, #32
 800b066:	f7ff fe1d 	bl	800aca4 <QSPI_WaitFlagStateUntilTimeout>
    if (status == HAL_OK)
 800b06a:	4605      	mov	r5, r0
 800b06c:	b9b8      	cbnz	r0, 800b09e <HAL_QSPI_MemoryMapped+0x6e>
    MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_TCEN, cfg->TimeOutActivation);
 800b06e:	6823      	ldr	r3, [r4, #0]
 800b070:	6872      	ldr	r2, [r6, #4]
 800b072:	6818      	ldr	r0, [r3, #0]
    if (cfg->TimeOutActivation == QSPI_TIMEOUT_COUNTER_ENABLE)
 800b074:	2a08      	cmp	r2, #8
    MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_TCEN, cfg->TimeOutActivation);
 800b076:	f020 0008 	bic.w	r0, r0, #8
 800b07a:	ea40 0002 	orr.w	r0, r0, r2
 800b07e:	6018      	str	r0, [r3, #0]
    if (cfg->TimeOutActivation == QSPI_TIMEOUT_COUNTER_ENABLE)
 800b080:	d107      	bne.n	800b092 <HAL_QSPI_MemoryMapped+0x62>
        WRITE_REG(hqspi->Instance->LPTR, cfg->TimeOutPeriod);
 800b082:	6832      	ldr	r2, [r6, #0]
 800b084:	631a      	str	r2, [r3, #48]	@ 0x30
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TO);
 800b086:	2210      	movs	r2, #16
 800b088:	60da      	str	r2, [r3, #12]
        __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TO);
 800b08a:	681a      	ldr	r2, [r3, #0]
 800b08c:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 800b090:	601a      	str	r2, [r3, #0]
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED);
 800b092:	f04f 6240 	mov.w	r2, #201326592	@ 0xc000000
 800b096:	4639      	mov	r1, r7
 800b098:	4620      	mov	r0, r4
 800b09a:	f7ff fd49 	bl	800ab30 <QSPI_Config>
  __HAL_UNLOCK(hqspi);
 800b09e:	2300      	movs	r3, #0
 800b0a0:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
}
 800b0a4:	4628      	mov	r0, r5
 800b0a6:	b003      	add	sp, #12
 800b0a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    status = HAL_BUSY;
 800b0aa:	2502      	movs	r5, #2
 800b0ac:	e7f7      	b.n	800b09e <HAL_QSPI_MemoryMapped+0x6e>
  __HAL_LOCK(hqspi);
 800b0ae:	2502      	movs	r5, #2
 800b0b0:	e7f8      	b.n	800b0a4 <HAL_QSPI_MemoryMapped+0x74>
	...

0800b0b4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800b0b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800b0b6:	4604      	mov	r4, r0
 800b0b8:	2800      	cmp	r0, #0
 800b0ba:	d074      	beq.n	800b1a6 <HAL_RCC_OscConfig+0xf2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800b0bc:	6803      	ldr	r3, [r0, #0]
 800b0be:	07d8      	lsls	r0, r3, #31
 800b0c0:	d45e      	bmi.n	800b180 <HAL_RCC_OscConfig+0xcc>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800b0c2:	6823      	ldr	r3, [r4, #0]
 800b0c4:	0799      	lsls	r1, r3, #30
 800b0c6:	f100 80ad 	bmi.w	800b224 <HAL_RCC_OscConfig+0x170>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800b0ca:	6823      	ldr	r3, [r4, #0]
 800b0cc:	06da      	lsls	r2, r3, #27
 800b0ce:	d527      	bpl.n	800b120 <HAL_RCC_OscConfig+0x6c>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800b0d0:	4a9c      	ldr	r2, [pc, #624]	@ (800b344 <HAL_RCC_OscConfig+0x290>)
 800b0d2:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800b0d4:	6a91      	ldr	r1, [r2, #40]	@ 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800b0d6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800b0da:	2b08      	cmp	r3, #8
 800b0dc:	d007      	beq.n	800b0ee <HAL_RCC_OscConfig+0x3a>
 800b0de:	2b18      	cmp	r3, #24
 800b0e0:	f040 8103 	bne.w	800b2ea <HAL_RCC_OscConfig+0x236>
 800b0e4:	f001 0303 	and.w	r3, r1, #3
 800b0e8:	2b01      	cmp	r3, #1
 800b0ea:	f040 80fe 	bne.w	800b2ea <HAL_RCC_OscConfig+0x236>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800b0ee:	6813      	ldr	r3, [r2, #0]
 800b0f0:	05db      	lsls	r3, r3, #23
 800b0f2:	d502      	bpl.n	800b0fa <HAL_RCC_OscConfig+0x46>
 800b0f4:	69e3      	ldr	r3, [r4, #28]
 800b0f6:	2b80      	cmp	r3, #128	@ 0x80
 800b0f8:	d155      	bne.n	800b1a6 <HAL_RCC_OscConfig+0xf2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800b0fa:	f7fc fe43 	bl	8007d84 <HAL_GetREVID>
 800b0fe:	f241 0303 	movw	r3, #4099	@ 0x1003
 800b102:	6a21      	ldr	r1, [r4, #32]
 800b104:	4298      	cmp	r0, r3
 800b106:	4b8f      	ldr	r3, [pc, #572]	@ (800b344 <HAL_RCC_OscConfig+0x290>)
 800b108:	f200 80e8 	bhi.w	800b2dc <HAL_RCC_OscConfig+0x228>
 800b10c:	685a      	ldr	r2, [r3, #4]
 800b10e:	2920      	cmp	r1, #32
 800b110:	f022 42f8 	bic.w	r2, r2, #2080374784	@ 0x7c000000
 800b114:	bf0c      	ite	eq
 800b116:	f042 4280 	orreq.w	r2, r2, #1073741824	@ 0x40000000
 800b11a:	ea42 6281 	orrne.w	r2, r2, r1, lsl #26
 800b11e:	605a      	str	r2, [r3, #4]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800b120:	6823      	ldr	r3, [r4, #0]
 800b122:	0719      	lsls	r1, r3, #28
 800b124:	f100 8123 	bmi.w	800b36e <HAL_RCC_OscConfig+0x2ba>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800b128:	6823      	ldr	r3, [r4, #0]
 800b12a:	069a      	lsls	r2, r3, #26
 800b12c:	f100 8144 	bmi.w	800b3b8 <HAL_RCC_OscConfig+0x304>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800b130:	6823      	ldr	r3, [r4, #0]
 800b132:	075d      	lsls	r5, r3, #29
 800b134:	d51e      	bpl.n	800b174 <HAL_RCC_OscConfig+0xc0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800b136:	4d84      	ldr	r5, [pc, #528]	@ (800b348 <HAL_RCC_OscConfig+0x294>)
 800b138:	682b      	ldr	r3, [r5, #0]
 800b13a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b13e:	602b      	str	r3, [r5, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800b140:	f7fc fe08 	bl	8007d54 <HAL_GetTick>
 800b144:	4606      	mov	r6, r0

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800b146:	682b      	ldr	r3, [r5, #0]
 800b148:	05da      	lsls	r2, r3, #23
 800b14a:	f140 815a 	bpl.w	800b402 <HAL_RCC_OscConfig+0x34e>
        return HAL_TIMEOUT;
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800b14e:	68a3      	ldr	r3, [r4, #8]
 800b150:	4d7c      	ldr	r5, [pc, #496]	@ (800b344 <HAL_RCC_OscConfig+0x290>)
 800b152:	2b01      	cmp	r3, #1
 800b154:	f040 815c 	bne.w	800b410 <HAL_RCC_OscConfig+0x35c>
 800b158:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 800b15a:	f043 0301 	orr.w	r3, r3, #1
 800b15e:	672b      	str	r3, [r5, #112]	@ 0x70
      tickstart = HAL_GetTick();

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b160:	f241 3788 	movw	r7, #5000	@ 0x1388
      tickstart = HAL_GetTick();
 800b164:	f7fc fdf6 	bl	8007d54 <HAL_GetTick>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800b168:	4e76      	ldr	r6, [pc, #472]	@ (800b344 <HAL_RCC_OscConfig+0x290>)
      tickstart = HAL_GetTick();
 800b16a:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800b16c:	6f33      	ldr	r3, [r6, #112]	@ 0x70
 800b16e:	079b      	lsls	r3, r3, #30
 800b170:	f140 8174 	bpl.w	800b45c <HAL_RCC_OscConfig+0x3a8>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800b174:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 800b176:	2900      	cmp	r1, #0
 800b178:	f040 8177 	bne.w	800b46a <HAL_RCC_OscConfig+0x3b6>
          __HAL_RCC_PLLFRACN_ENABLE();
        }
      }
    }
  }
  return HAL_OK;
 800b17c:	2000      	movs	r0, #0
 800b17e:	e02b      	b.n	800b1d8 <HAL_RCC_OscConfig+0x124>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800b180:	4a70      	ldr	r2, [pc, #448]	@ (800b344 <HAL_RCC_OscConfig+0x290>)
 800b182:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800b184:	6a91      	ldr	r1, [r2, #40]	@ 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800b186:	f003 0338 	and.w	r3, r3, #56	@ 0x38
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800b18a:	2b10      	cmp	r3, #16
 800b18c:	d005      	beq.n	800b19a <HAL_RCC_OscConfig+0xe6>
 800b18e:	2b18      	cmp	r3, #24
 800b190:	d10b      	bne.n	800b1aa <HAL_RCC_OscConfig+0xf6>
 800b192:	f001 0303 	and.w	r3, r1, #3
 800b196:	2b02      	cmp	r3, #2
 800b198:	d107      	bne.n	800b1aa <HAL_RCC_OscConfig+0xf6>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b19a:	6813      	ldr	r3, [r2, #0]
 800b19c:	039a      	lsls	r2, r3, #14
 800b19e:	d590      	bpl.n	800b0c2 <HAL_RCC_OscConfig+0xe>
 800b1a0:	6863      	ldr	r3, [r4, #4]
 800b1a2:	2b00      	cmp	r3, #0
 800b1a4:	d18d      	bne.n	800b0c2 <HAL_RCC_OscConfig+0xe>
    return HAL_ERROR;
 800b1a6:	2001      	movs	r0, #1
 800b1a8:	e016      	b.n	800b1d8 <HAL_RCC_OscConfig+0x124>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800b1aa:	6863      	ldr	r3, [r4, #4]
 800b1ac:	4d65      	ldr	r5, [pc, #404]	@ (800b344 <HAL_RCC_OscConfig+0x290>)
 800b1ae:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b1b2:	d112      	bne.n	800b1da <HAL_RCC_OscConfig+0x126>
 800b1b4:	682b      	ldr	r3, [r5, #0]
 800b1b6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800b1ba:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800b1bc:	f7fc fdca 	bl	8007d54 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800b1c0:	4e60      	ldr	r6, [pc, #384]	@ (800b344 <HAL_RCC_OscConfig+0x290>)
        tickstart = HAL_GetTick();
 800b1c2:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800b1c4:	6833      	ldr	r3, [r6, #0]
 800b1c6:	039b      	lsls	r3, r3, #14
 800b1c8:	f53f af7b 	bmi.w	800b0c2 <HAL_RCC_OscConfig+0xe>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800b1cc:	f7fc fdc2 	bl	8007d54 <HAL_GetTick>
 800b1d0:	1b40      	subs	r0, r0, r5
 800b1d2:	2864      	cmp	r0, #100	@ 0x64
 800b1d4:	d9f6      	bls.n	800b1c4 <HAL_RCC_OscConfig+0x110>
            return HAL_TIMEOUT;
 800b1d6:	2003      	movs	r0, #3
}
 800b1d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800b1da:	b9a3      	cbnz	r3, 800b206 <HAL_RCC_OscConfig+0x152>
 800b1dc:	682b      	ldr	r3, [r5, #0]
 800b1de:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800b1e2:	602b      	str	r3, [r5, #0]
 800b1e4:	682b      	ldr	r3, [r5, #0]
 800b1e6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800b1ea:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800b1ec:	f7fc fdb2 	bl	8007d54 <HAL_GetTick>
 800b1f0:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800b1f2:	682b      	ldr	r3, [r5, #0]
 800b1f4:	039f      	lsls	r7, r3, #14
 800b1f6:	f57f af64 	bpl.w	800b0c2 <HAL_RCC_OscConfig+0xe>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800b1fa:	f7fc fdab 	bl	8007d54 <HAL_GetTick>
 800b1fe:	1b80      	subs	r0, r0, r6
 800b200:	2864      	cmp	r0, #100	@ 0x64
 800b202:	d9f6      	bls.n	800b1f2 <HAL_RCC_OscConfig+0x13e>
 800b204:	e7e7      	b.n	800b1d6 <HAL_RCC_OscConfig+0x122>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800b206:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800b20a:	682b      	ldr	r3, [r5, #0]
 800b20c:	d103      	bne.n	800b216 <HAL_RCC_OscConfig+0x162>
 800b20e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800b212:	602b      	str	r3, [r5, #0]
 800b214:	e7ce      	b.n	800b1b4 <HAL_RCC_OscConfig+0x100>
 800b216:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800b21a:	602b      	str	r3, [r5, #0]
 800b21c:	682b      	ldr	r3, [r5, #0]
 800b21e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800b222:	e7ca      	b.n	800b1ba <HAL_RCC_OscConfig+0x106>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800b224:	4947      	ldr	r1, [pc, #284]	@ (800b344 <HAL_RCC_OscConfig+0x290>)
 800b226:	68e2      	ldr	r2, [r4, #12]
 800b228:	690b      	ldr	r3, [r1, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800b22a:	6a88      	ldr	r0, [r1, #40]	@ 0x28
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800b22c:	f013 0338 	ands.w	r3, r3, #56	@ 0x38
 800b230:	d003      	beq.n	800b23a <HAL_RCC_OscConfig+0x186>
 800b232:	2b18      	cmp	r3, #24
 800b234:	d12a      	bne.n	800b28c <HAL_RCC_OscConfig+0x1d8>
 800b236:	0780      	lsls	r0, r0, #30
 800b238:	d128      	bne.n	800b28c <HAL_RCC_OscConfig+0x1d8>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800b23a:	680b      	ldr	r3, [r1, #0]
 800b23c:	075b      	lsls	r3, r3, #29
 800b23e:	d501      	bpl.n	800b244 <HAL_RCC_OscConfig+0x190>
 800b240:	2a00      	cmp	r2, #0
 800b242:	d0b0      	beq.n	800b1a6 <HAL_RCC_OscConfig+0xf2>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800b244:	4d3f      	ldr	r5, [pc, #252]	@ (800b344 <HAL_RCC_OscConfig+0x290>)
 800b246:	682b      	ldr	r3, [r5, #0]
 800b248:	f023 0319 	bic.w	r3, r3, #25
 800b24c:	4313      	orrs	r3, r2
 800b24e:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800b250:	f7fc fd80 	bl	8007d54 <HAL_GetTick>
 800b254:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800b256:	682b      	ldr	r3, [r5, #0]
 800b258:	075f      	lsls	r7, r3, #29
 800b25a:	d511      	bpl.n	800b280 <HAL_RCC_OscConfig+0x1cc>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b25c:	f7fc fd92 	bl	8007d84 <HAL_GetREVID>
 800b260:	f241 0303 	movw	r3, #4099	@ 0x1003
 800b264:	6922      	ldr	r2, [r4, #16]
 800b266:	4298      	cmp	r0, r3
 800b268:	686b      	ldr	r3, [r5, #4]
 800b26a:	d822      	bhi.n	800b2b2 <HAL_RCC_OscConfig+0x1fe>
 800b26c:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 800b270:	2a40      	cmp	r2, #64	@ 0x40
 800b272:	bf0c      	ite	eq
 800b274:	f443 3300 	orreq.w	r3, r3, #131072	@ 0x20000
 800b278:	ea43 3302 	orrne.w	r3, r3, r2, lsl #12
 800b27c:	606b      	str	r3, [r5, #4]
 800b27e:	e724      	b.n	800b0ca <HAL_RCC_OscConfig+0x16>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b280:	f7fc fd68 	bl	8007d54 <HAL_GetTick>
 800b284:	1b80      	subs	r0, r0, r6
 800b286:	2802      	cmp	r0, #2
 800b288:	d9e5      	bls.n	800b256 <HAL_RCC_OscConfig+0x1a2>
 800b28a:	e7a4      	b.n	800b1d6 <HAL_RCC_OscConfig+0x122>
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800b28c:	4d2d      	ldr	r5, [pc, #180]	@ (800b344 <HAL_RCC_OscConfig+0x290>)
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800b28e:	682b      	ldr	r3, [r5, #0]
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800b290:	b1a2      	cbz	r2, 800b2bc <HAL_RCC_OscConfig+0x208>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800b292:	f023 0319 	bic.w	r3, r3, #25
 800b296:	4313      	orrs	r3, r2
 800b298:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800b29a:	f7fc fd5b 	bl	8007d54 <HAL_GetTick>
 800b29e:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800b2a0:	682b      	ldr	r3, [r5, #0]
 800b2a2:	0758      	lsls	r0, r3, #29
 800b2a4:	d4da      	bmi.n	800b25c <HAL_RCC_OscConfig+0x1a8>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b2a6:	f7fc fd55 	bl	8007d54 <HAL_GetTick>
 800b2aa:	1b80      	subs	r0, r0, r6
 800b2ac:	2802      	cmp	r0, #2
 800b2ae:	d9f7      	bls.n	800b2a0 <HAL_RCC_OscConfig+0x1ec>
 800b2b0:	e791      	b.n	800b1d6 <HAL_RCC_OscConfig+0x122>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b2b2:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 800b2b6:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800b2ba:	e7df      	b.n	800b27c <HAL_RCC_OscConfig+0x1c8>
        __HAL_RCC_HSI_DISABLE();
 800b2bc:	f023 0301 	bic.w	r3, r3, #1
 800b2c0:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800b2c2:	f7fc fd47 	bl	8007d54 <HAL_GetTick>
 800b2c6:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800b2c8:	682b      	ldr	r3, [r5, #0]
 800b2ca:	0759      	lsls	r1, r3, #29
 800b2cc:	f57f aefd 	bpl.w	800b0ca <HAL_RCC_OscConfig+0x16>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b2d0:	f7fc fd40 	bl	8007d54 <HAL_GetTick>
 800b2d4:	1b80      	subs	r0, r0, r6
 800b2d6:	2802      	cmp	r0, #2
 800b2d8:	d9f6      	bls.n	800b2c8 <HAL_RCC_OscConfig+0x214>
 800b2da:	e77c      	b.n	800b1d6 <HAL_RCC_OscConfig+0x122>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800b2dc:	68da      	ldr	r2, [r3, #12]
 800b2de:	f022 527c 	bic.w	r2, r2, #1056964608	@ 0x3f000000
 800b2e2:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800b2e6:	60da      	str	r2, [r3, #12]
 800b2e8:	e71a      	b.n	800b120 <HAL_RCC_OscConfig+0x6c>
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800b2ea:	69e3      	ldr	r3, [r4, #28]
 800b2ec:	4d15      	ldr	r5, [pc, #84]	@ (800b344 <HAL_RCC_OscConfig+0x290>)
 800b2ee:	b36b      	cbz	r3, 800b34c <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_CSI_ENABLE();
 800b2f0:	682b      	ldr	r3, [r5, #0]
 800b2f2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b2f6:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800b2f8:	f7fc fd2c 	bl	8007d54 <HAL_GetTick>
 800b2fc:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800b2fe:	682b      	ldr	r3, [r5, #0]
 800b300:	05df      	lsls	r7, r3, #23
 800b302:	d511      	bpl.n	800b328 <HAL_RCC_OscConfig+0x274>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800b304:	f7fc fd3e 	bl	8007d84 <HAL_GetREVID>
 800b308:	f241 0303 	movw	r3, #4099	@ 0x1003
 800b30c:	6a22      	ldr	r2, [r4, #32]
 800b30e:	4298      	cmp	r0, r3
 800b310:	d810      	bhi.n	800b334 <HAL_RCC_OscConfig+0x280>
 800b312:	686b      	ldr	r3, [r5, #4]
 800b314:	2a20      	cmp	r2, #32
 800b316:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 800b31a:	bf0c      	ite	eq
 800b31c:	f043 4380 	orreq.w	r3, r3, #1073741824	@ 0x40000000
 800b320:	ea43 6382 	orrne.w	r3, r3, r2, lsl #26
 800b324:	606b      	str	r3, [r5, #4]
 800b326:	e6fb      	b.n	800b120 <HAL_RCC_OscConfig+0x6c>
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800b328:	f7fc fd14 	bl	8007d54 <HAL_GetTick>
 800b32c:	1b80      	subs	r0, r0, r6
 800b32e:	2802      	cmp	r0, #2
 800b330:	d9e5      	bls.n	800b2fe <HAL_RCC_OscConfig+0x24a>
 800b332:	e750      	b.n	800b1d6 <HAL_RCC_OscConfig+0x122>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800b334:	68eb      	ldr	r3, [r5, #12]
 800b336:	f023 537c 	bic.w	r3, r3, #1056964608	@ 0x3f000000
 800b33a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800b33e:	60eb      	str	r3, [r5, #12]
 800b340:	e6ee      	b.n	800b120 <HAL_RCC_OscConfig+0x6c>
 800b342:	bf00      	nop
 800b344:	58024400 	.word	0x58024400
 800b348:	58024800 	.word	0x58024800
        __HAL_RCC_CSI_DISABLE();
 800b34c:	682b      	ldr	r3, [r5, #0]
 800b34e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b352:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800b354:	f7fc fcfe 	bl	8007d54 <HAL_GetTick>
 800b358:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800b35a:	682b      	ldr	r3, [r5, #0]
 800b35c:	05d8      	lsls	r0, r3, #23
 800b35e:	f57f aedf 	bpl.w	800b120 <HAL_RCC_OscConfig+0x6c>
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800b362:	f7fc fcf7 	bl	8007d54 <HAL_GetTick>
 800b366:	1b80      	subs	r0, r0, r6
 800b368:	2802      	cmp	r0, #2
 800b36a:	d9f6      	bls.n	800b35a <HAL_RCC_OscConfig+0x2a6>
 800b36c:	e733      	b.n	800b1d6 <HAL_RCC_OscConfig+0x122>
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800b36e:	6963      	ldr	r3, [r4, #20]
 800b370:	4da5      	ldr	r5, [pc, #660]	@ (800b608 <HAL_RCC_OscConfig+0x554>)
 800b372:	b183      	cbz	r3, 800b396 <HAL_RCC_OscConfig+0x2e2>
      __HAL_RCC_LSI_ENABLE();
 800b374:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 800b376:	f043 0301 	orr.w	r3, r3, #1
 800b37a:	676b      	str	r3, [r5, #116]	@ 0x74
      tickstart = HAL_GetTick();
 800b37c:	f7fc fcea 	bl	8007d54 <HAL_GetTick>
 800b380:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800b382:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 800b384:	079b      	lsls	r3, r3, #30
 800b386:	f53f aecf 	bmi.w	800b128 <HAL_RCC_OscConfig+0x74>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800b38a:	f7fc fce3 	bl	8007d54 <HAL_GetTick>
 800b38e:	1b80      	subs	r0, r0, r6
 800b390:	2802      	cmp	r0, #2
 800b392:	d9f6      	bls.n	800b382 <HAL_RCC_OscConfig+0x2ce>
 800b394:	e71f      	b.n	800b1d6 <HAL_RCC_OscConfig+0x122>
      __HAL_RCC_LSI_DISABLE();
 800b396:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 800b398:	f023 0301 	bic.w	r3, r3, #1
 800b39c:	676b      	str	r3, [r5, #116]	@ 0x74
      tickstart = HAL_GetTick();
 800b39e:	f7fc fcd9 	bl	8007d54 <HAL_GetTick>
 800b3a2:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800b3a4:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 800b3a6:	079f      	lsls	r7, r3, #30
 800b3a8:	f57f aebe 	bpl.w	800b128 <HAL_RCC_OscConfig+0x74>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800b3ac:	f7fc fcd2 	bl	8007d54 <HAL_GetTick>
 800b3b0:	1b80      	subs	r0, r0, r6
 800b3b2:	2802      	cmp	r0, #2
 800b3b4:	d9f6      	bls.n	800b3a4 <HAL_RCC_OscConfig+0x2f0>
 800b3b6:	e70e      	b.n	800b1d6 <HAL_RCC_OscConfig+0x122>
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800b3b8:	69a3      	ldr	r3, [r4, #24]
 800b3ba:	4d93      	ldr	r5, [pc, #588]	@ (800b608 <HAL_RCC_OscConfig+0x554>)
 800b3bc:	b183      	cbz	r3, 800b3e0 <HAL_RCC_OscConfig+0x32c>
      __HAL_RCC_HSI48_ENABLE();
 800b3be:	682b      	ldr	r3, [r5, #0]
 800b3c0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800b3c4:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 800b3c6:	f7fc fcc5 	bl	8007d54 <HAL_GetTick>
 800b3ca:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800b3cc:	682b      	ldr	r3, [r5, #0]
 800b3ce:	0498      	lsls	r0, r3, #18
 800b3d0:	f53f aeae 	bmi.w	800b130 <HAL_RCC_OscConfig+0x7c>
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800b3d4:	f7fc fcbe 	bl	8007d54 <HAL_GetTick>
 800b3d8:	1b80      	subs	r0, r0, r6
 800b3da:	2802      	cmp	r0, #2
 800b3dc:	d9f6      	bls.n	800b3cc <HAL_RCC_OscConfig+0x318>
 800b3de:	e6fa      	b.n	800b1d6 <HAL_RCC_OscConfig+0x122>
      __HAL_RCC_HSI48_DISABLE();
 800b3e0:	682b      	ldr	r3, [r5, #0]
 800b3e2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800b3e6:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 800b3e8:	f7fc fcb4 	bl	8007d54 <HAL_GetTick>
 800b3ec:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800b3ee:	682b      	ldr	r3, [r5, #0]
 800b3f0:	0499      	lsls	r1, r3, #18
 800b3f2:	f57f ae9d 	bpl.w	800b130 <HAL_RCC_OscConfig+0x7c>
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800b3f6:	f7fc fcad 	bl	8007d54 <HAL_GetTick>
 800b3fa:	1b80      	subs	r0, r0, r6
 800b3fc:	2802      	cmp	r0, #2
 800b3fe:	d9f6      	bls.n	800b3ee <HAL_RCC_OscConfig+0x33a>
 800b400:	e6e9      	b.n	800b1d6 <HAL_RCC_OscConfig+0x122>
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b402:	f7fc fca7 	bl	8007d54 <HAL_GetTick>
 800b406:	1b80      	subs	r0, r0, r6
 800b408:	2864      	cmp	r0, #100	@ 0x64
 800b40a:	f67f ae9c 	bls.w	800b146 <HAL_RCC_OscConfig+0x92>
 800b40e:	e6e2      	b.n	800b1d6 <HAL_RCC_OscConfig+0x122>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800b410:	b9b3      	cbnz	r3, 800b440 <HAL_RCC_OscConfig+0x38c>
 800b412:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b414:	f241 3788 	movw	r7, #5000	@ 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800b418:	f023 0301 	bic.w	r3, r3, #1
 800b41c:	672b      	str	r3, [r5, #112]	@ 0x70
 800b41e:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 800b420:	f023 0304 	bic.w	r3, r3, #4
 800b424:	672b      	str	r3, [r5, #112]	@ 0x70
      tickstart = HAL_GetTick();
 800b426:	f7fc fc95 	bl	8007d54 <HAL_GetTick>
 800b42a:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800b42c:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 800b42e:	0798      	lsls	r0, r3, #30
 800b430:	f57f aea0 	bpl.w	800b174 <HAL_RCC_OscConfig+0xc0>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b434:	f7fc fc8e 	bl	8007d54 <HAL_GetTick>
 800b438:	1b80      	subs	r0, r0, r6
 800b43a:	42b8      	cmp	r0, r7
 800b43c:	d9f6      	bls.n	800b42c <HAL_RCC_OscConfig+0x378>
 800b43e:	e6ca      	b.n	800b1d6 <HAL_RCC_OscConfig+0x122>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800b440:	2b05      	cmp	r3, #5
 800b442:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 800b444:	d103      	bne.n	800b44e <HAL_RCC_OscConfig+0x39a>
 800b446:	f043 0304 	orr.w	r3, r3, #4
 800b44a:	672b      	str	r3, [r5, #112]	@ 0x70
 800b44c:	e684      	b.n	800b158 <HAL_RCC_OscConfig+0xa4>
 800b44e:	f023 0301 	bic.w	r3, r3, #1
 800b452:	672b      	str	r3, [r5, #112]	@ 0x70
 800b454:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 800b456:	f023 0304 	bic.w	r3, r3, #4
 800b45a:	e680      	b.n	800b15e <HAL_RCC_OscConfig+0xaa>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b45c:	f7fc fc7a 	bl	8007d54 <HAL_GetTick>
 800b460:	1b40      	subs	r0, r0, r5
 800b462:	42b8      	cmp	r0, r7
 800b464:	f67f ae82 	bls.w	800b16c <HAL_RCC_OscConfig+0xb8>
 800b468:	e6b5      	b.n	800b1d6 <HAL_RCC_OscConfig+0x122>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800b46a:	4d67      	ldr	r5, [pc, #412]	@ (800b608 <HAL_RCC_OscConfig+0x554>)
 800b46c:	692b      	ldr	r3, [r5, #16]
 800b46e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800b472:	2b18      	cmp	r3, #24
 800b474:	d07a      	beq.n	800b56c <HAL_RCC_OscConfig+0x4b8>
        __HAL_RCC_PLL_DISABLE();
 800b476:	682b      	ldr	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800b478:	2902      	cmp	r1, #2
        __HAL_RCC_PLL_DISABLE();
 800b47a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800b47e:	602b      	str	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800b480:	d167      	bne.n	800b552 <HAL_RCC_OscConfig+0x49e>
        tickstart = HAL_GetTick();
 800b482:	f7fc fc67 	bl	8007d54 <HAL_GetTick>
 800b486:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800b488:	682b      	ldr	r3, [r5, #0]
 800b48a:	0199      	lsls	r1, r3, #6
 800b48c:	d45b      	bmi.n	800b546 <HAL_RCC_OscConfig+0x492>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800b48e:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 800b490:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 800b492:	f423 737c 	bic.w	r3, r3, #1008	@ 0x3f0
 800b496:	f023 0303 	bic.w	r3, r3, #3
 800b49a:	4313      	orrs	r3, r2
 800b49c:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800b49e:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 800b4a2:	62ab      	str	r3, [r5, #40]	@ 0x28
 800b4a4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800b4a6:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800b4a8:	3b01      	subs	r3, #1
 800b4aa:	3a01      	subs	r2, #1
 800b4ac:	025b      	lsls	r3, r3, #9
 800b4ae:	0412      	lsls	r2, r2, #16
 800b4b0:	b29b      	uxth	r3, r3
 800b4b2:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 800b4b6:	4313      	orrs	r3, r2
 800b4b8:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 800b4ba:	3a01      	subs	r2, #1
 800b4bc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b4c0:	4313      	orrs	r3, r2
 800b4c2:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 800b4c4:	3a01      	subs	r2, #1
 800b4c6:	0612      	lsls	r2, r2, #24
 800b4c8:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 800b4cc:	4313      	orrs	r3, r2
 800b4ce:	632b      	str	r3, [r5, #48]	@ 0x30
        __HAL_RCC_PLLFRACN_DISABLE();
 800b4d0:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 800b4d2:	f023 0301 	bic.w	r3, r3, #1
 800b4d6:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800b4d8:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 800b4da:	6ca2      	ldr	r2, [r4, #72]	@ 0x48
 800b4dc:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800b4e0:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800b4e4:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800b4e8:	636b      	str	r3, [r5, #52]	@ 0x34
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800b4ea:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 800b4ec:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 800b4ee:	f023 030c 	bic.w	r3, r3, #12
 800b4f2:	4313      	orrs	r3, r2
 800b4f4:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800b4f6:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 800b4f8:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 800b4fa:	f023 0302 	bic.w	r3, r3, #2
 800b4fe:	4313      	orrs	r3, r2
 800b500:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800b502:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 800b504:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800b508:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b50a:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 800b50c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b510:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800b512:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 800b514:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800b518:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLLFRACN_ENABLE();
 800b51a:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 800b51c:	f043 0301 	orr.w	r3, r3, #1
 800b520:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLL_ENABLE();
 800b522:	682b      	ldr	r3, [r5, #0]
 800b524:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800b528:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800b52a:	f7fc fc13 	bl	8007d54 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800b52e:	4d36      	ldr	r5, [pc, #216]	@ (800b608 <HAL_RCC_OscConfig+0x554>)
        tickstart = HAL_GetTick();
 800b530:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800b532:	682b      	ldr	r3, [r5, #0]
 800b534:	019a      	lsls	r2, r3, #6
 800b536:	f53f ae21 	bmi.w	800b17c <HAL_RCC_OscConfig+0xc8>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b53a:	f7fc fc0b 	bl	8007d54 <HAL_GetTick>
 800b53e:	1b00      	subs	r0, r0, r4
 800b540:	2802      	cmp	r0, #2
 800b542:	d9f6      	bls.n	800b532 <HAL_RCC_OscConfig+0x47e>
 800b544:	e647      	b.n	800b1d6 <HAL_RCC_OscConfig+0x122>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b546:	f7fc fc05 	bl	8007d54 <HAL_GetTick>
 800b54a:	1b80      	subs	r0, r0, r6
 800b54c:	2802      	cmp	r0, #2
 800b54e:	d99b      	bls.n	800b488 <HAL_RCC_OscConfig+0x3d4>
 800b550:	e641      	b.n	800b1d6 <HAL_RCC_OscConfig+0x122>
        tickstart = HAL_GetTick();
 800b552:	f7fc fbff 	bl	8007d54 <HAL_GetTick>
 800b556:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800b558:	682b      	ldr	r3, [r5, #0]
 800b55a:	019b      	lsls	r3, r3, #6
 800b55c:	f57f ae0e 	bpl.w	800b17c <HAL_RCC_OscConfig+0xc8>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b560:	f7fc fbf8 	bl	8007d54 <HAL_GetTick>
 800b564:	1b00      	subs	r0, r0, r4
 800b566:	2802      	cmp	r0, #2
 800b568:	d9f6      	bls.n	800b558 <HAL_RCC_OscConfig+0x4a4>
 800b56a:	e634      	b.n	800b1d6 <HAL_RCC_OscConfig+0x122>
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800b56c:	2901      	cmp	r1, #1
      temp1_pllckcfg = RCC->PLLCKSELR;
 800b56e:	6aaa      	ldr	r2, [r5, #40]	@ 0x28
      temp2_pllckcfg = RCC->PLL1DIVR;
 800b570:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800b572:	f43f ae18 	beq.w	800b1a6 <HAL_RCC_OscConfig+0xf2>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b576:	f002 0103 	and.w	r1, r2, #3
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800b57a:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 800b57c:	4281      	cmp	r1, r0
 800b57e:	f47f ae12 	bne.w	800b1a6 <HAL_RCC_OscConfig+0xf2>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800b582:	f3c2 1205 	ubfx	r2, r2, #4, #6
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b586:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800b588:	428a      	cmp	r2, r1
 800b58a:	f47f ae0c 	bne.w	800b1a6 <HAL_RCC_OscConfig+0xf2>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800b58e:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 800b590:	f3c3 0108 	ubfx	r1, r3, #0, #9
 800b594:	3a01      	subs	r2, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800b596:	4291      	cmp	r1, r2
 800b598:	f47f ae05 	bne.w	800b1a6 <HAL_RCC_OscConfig+0xf2>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800b59c:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 800b59e:	f3c3 2146 	ubfx	r1, r3, #9, #7
 800b5a2:	3a01      	subs	r2, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800b5a4:	4291      	cmp	r1, r2
 800b5a6:	f47f adfe 	bne.w	800b1a6 <HAL_RCC_OscConfig+0xf2>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800b5aa:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800b5ac:	f3c3 4106 	ubfx	r1, r3, #16, #7
 800b5b0:	3a01      	subs	r2, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800b5b2:	4291      	cmp	r1, r2
 800b5b4:	f47f adf7 	bne.w	800b1a6 <HAL_RCC_OscConfig+0xf2>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800b5b8:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 800b5ba:	f3c3 6306 	ubfx	r3, r3, #24, #7
 800b5be:	3a01      	subs	r2, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800b5c0:	4293      	cmp	r3, r2
 800b5c2:	f47f adf0 	bne.w	800b1a6 <HAL_RCC_OscConfig+0xf2>
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800b5c6:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800b5c8:	6ca2      	ldr	r2, [r4, #72]	@ 0x48
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800b5ca:	f3c3 03cc 	ubfx	r3, r3, #3, #13
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800b5ce:	429a      	cmp	r2, r3
 800b5d0:	f43f add4 	beq.w	800b17c <HAL_RCC_OscConfig+0xc8>
          __HAL_RCC_PLLFRACN_DISABLE();
 800b5d4:	4d0c      	ldr	r5, [pc, #48]	@ (800b608 <HAL_RCC_OscConfig+0x554>)
 800b5d6:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 800b5d8:	f023 0301 	bic.w	r3, r3, #1
 800b5dc:	62eb      	str	r3, [r5, #44]	@ 0x2c
          tickstart = HAL_GetTick();
 800b5de:	f7fc fbb9 	bl	8007d54 <HAL_GetTick>
 800b5e2:	4606      	mov	r6, r0
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800b5e4:	f7fc fbb6 	bl	8007d54 <HAL_GetTick>
 800b5e8:	42b0      	cmp	r0, r6
 800b5ea:	d0fb      	beq.n	800b5e4 <HAL_RCC_OscConfig+0x530>
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800b5ec:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 800b5ee:	6ca2      	ldr	r2, [r4, #72]	@ 0x48
 800b5f0:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800b5f4:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800b5f8:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800b5fc:	636b      	str	r3, [r5, #52]	@ 0x34
          __HAL_RCC_PLLFRACN_ENABLE();
 800b5fe:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 800b600:	f043 0301 	orr.w	r3, r3, #1
 800b604:	62eb      	str	r3, [r5, #44]	@ 0x2c
 800b606:	e5b9      	b.n	800b17c <HAL_RCC_OscConfig+0xc8>
 800b608:	58024400 	.word	0x58024400

0800b60c <HAL_RCC_MCOConfig>:
  *          This parameter can be one of the following values:
  *            @arg RCC_MCODIV_1 up to RCC_MCODIV_15  : divider applied to MCOx clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 800b60c:	b570      	push	{r4, r5, r6, lr}
 800b60e:	4c23      	ldr	r4, [pc, #140]	@ (800b69c <HAL_RCC_MCOConfig+0x90>)
 800b610:	b088      	sub	sp, #32
 800b612:	460e      	mov	r6, r1
 800b614:	4615      	mov	r5, r2
  if (RCC_MCOx == RCC_MCO1)
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    MCO1_CLK_ENABLE();
 800b616:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
  if (RCC_MCOx == RCC_MCO1)
 800b61a:	b9f8      	cbnz	r0, 800b65c <HAL_RCC_MCOConfig+0x50>
    MCO1_CLK_ENABLE();
 800b61c:	f043 0301 	orr.w	r3, r3, #1

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b620:	f44f 7c80 	mov.w	ip, #256	@ 0x100
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 800b624:	a903      	add	r1, sp, #12
    MCO1_CLK_ENABLE();
 800b626:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
 800b62a:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800b62e:	9007      	str	r0, [sp, #28]
    MCO1_CLK_ENABLE();
 800b630:	f003 0301 	and.w	r3, r3, #1
 800b634:	9301      	str	r3, [sp, #4]
 800b636:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b638:	2302      	movs	r3, #2
 800b63a:	e9cd c303 	strd	ip, r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b63e:	2303      	movs	r3, #3
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b640:	e9cd 0305 	strd	r0, r3, [sp, #20]
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 800b644:	4816      	ldr	r0, [pc, #88]	@ (800b6a0 <HAL_RCC_MCOConfig+0x94>)
 800b646:	f7fd fa0b 	bl	8008a60 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[3:0] bits then Select MCO1 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 800b64a:	6923      	ldr	r3, [r4, #16]
 800b64c:	f023 73fe 	bic.w	r3, r3, #33292288	@ 0x1fc0000
 800b650:	ea43 0106 	orr.w	r1, r3, r6
 800b654:	4329      	orrs	r1, r5
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);

    /* Mask MCO2 and MCO2PRE[3:0] bits then Select MCO2 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
 800b656:	6121      	str	r1, [r4, #16]
  }
}
 800b658:	b008      	add	sp, #32
 800b65a:	bd70      	pop	{r4, r5, r6, pc}
    MCO2_CLK_ENABLE();
 800b65c:	f043 0304 	orr.w	r3, r3, #4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b660:	f44f 7200 	mov.w	r2, #512	@ 0x200
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b664:	2103      	movs	r1, #3
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 800b666:	480f      	ldr	r0, [pc, #60]	@ (800b6a4 <HAL_RCC_MCOConfig+0x98>)
    MCO2_CLK_ENABLE();
 800b668:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
 800b66c:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 800b670:	f003 0304 	and.w	r3, r3, #4
 800b674:	9302      	str	r3, [sp, #8]
 800b676:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b678:	2302      	movs	r3, #2
 800b67a:	e9cd 2303 	strd	r2, r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b67e:	2300      	movs	r3, #0
 800b680:	e9cd 3105 	strd	r3, r1, [sp, #20]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 800b684:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800b686:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 800b688:	f7fd f9ea 	bl	8008a60 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
 800b68c:	6923      	ldr	r3, [r4, #16]
 800b68e:	f023 437e 	bic.w	r3, r3, #4261412864	@ 0xfe000000
 800b692:	ea43 0106 	orr.w	r1, r3, r6
 800b696:	ea41 11c5 	orr.w	r1, r1, r5, lsl #7
 800b69a:	e7dc      	b.n	800b656 <HAL_RCC_MCOConfig+0x4a>
 800b69c:	58024400 	.word	0x58024400
 800b6a0:	58020000 	.word	0x58020000
 800b6a4:	58020800 	.word	0x58020800

0800b6a8 <HAL_RCC_GetSysClockFreq>:
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800b6a8:	4b49      	ldr	r3, [pc, #292]	@ (800b7d0 <HAL_RCC_GetSysClockFreq+0x128>)
 800b6aa:	691a      	ldr	r2, [r3, #16]
 800b6ac:	f002 0238 	and.w	r2, r2, #56	@ 0x38
 800b6b0:	2a10      	cmp	r2, #16
{
 800b6b2:	b530      	push	{r4, r5, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800b6b4:	f000 8088 	beq.w	800b7c8 <HAL_RCC_GetSysClockFreq+0x120>
 800b6b8:	2a18      	cmp	r2, #24
 800b6ba:	d00c      	beq.n	800b6d6 <HAL_RCC_GetSysClockFreq+0x2e>
 800b6bc:	2a00      	cmp	r2, #0
 800b6be:	f040 8085 	bne.w	800b7cc <HAL_RCC_GetSysClockFreq+0x124>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b6c2:	681a      	ldr	r2, [r3, #0]
 800b6c4:	4843      	ldr	r0, [pc, #268]	@ (800b7d4 <HAL_RCC_GetSysClockFreq+0x12c>)
 800b6c6:	f012 0f20 	tst.w	r2, #32
 800b6ca:	d003      	beq.n	800b6d4 <HAL_RCC_GetSysClockFreq+0x2c>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b6cc:	681b      	ldr	r3, [r3, #0]
 800b6ce:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800b6d2:	40d8      	lsrs	r0, r3
      sysclockfreq = CSI_VALUE;
      break;
  }

  return sysclockfreq;
}
 800b6d4:	bd30      	pop	{r4, r5, pc}
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b6d6:	6a99      	ldr	r1, [r3, #40]	@ 0x28
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800b6d8:	6a9d      	ldr	r5, [r3, #40]	@ 0x28
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800b6da:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
      if (pllm != 0U)
 800b6dc:	f415 7f7c 	tst.w	r5, #1008	@ 0x3f0
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800b6e0:	f3c5 1005 	ubfx	r0, r5, #4, #6
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800b6e4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
      if (pllm != 0U)
 800b6e6:	d0f5      	beq.n	800b6d4 <HAL_RCC_GetSysClockFreq+0x2c>
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800b6e8:	f3c2 02cc 	ubfx	r2, r2, #3, #13
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800b6ec:	f004 0401 	and.w	r4, r4, #1
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b6f0:	f001 0103 	and.w	r1, r1, #3
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b6f4:	ee07 0a90 	vmov	s15, r0
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800b6f8:	4362      	muls	r2, r4
 800b6fa:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 800b6fe:	2901      	cmp	r1, #1
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b700:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800b704:	ee06 2a90 	vmov	s13, r2
 800b708:	eefa 6ae9 	vcvt.f32.s32	s13, s13, #13
 800b70c:	d04e      	beq.n	800b7ac <HAL_RCC_GetSysClockFreq+0x104>
 800b70e:	2902      	cmp	r1, #2
 800b710:	d03e      	beq.n	800b790 <HAL_RCC_GetSysClockFreq+0xe8>
 800b712:	2900      	cmp	r1, #0
 800b714:	d14a      	bne.n	800b7ac <HAL_RCC_GetSysClockFreq+0x104>
            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b716:	681a      	ldr	r2, [r3, #0]
 800b718:	0692      	lsls	r2, r2, #26
 800b71a:	d527      	bpl.n	800b76c <HAL_RCC_GetSysClockFreq+0xc4>
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b71c:	6819      	ldr	r1, [r3, #0]
 800b71e:	4a2d      	ldr	r2, [pc, #180]	@ (800b7d4 <HAL_RCC_GetSysClockFreq+0x12c>)
 800b720:	f3c1 01c1 	ubfx	r1, r1, #3, #2
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b724:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b726:	40ca      	lsrs	r2, r1
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b728:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b72c:	ee07 2a90 	vmov	s15, r2
 800b730:	eef8 5ae7 	vcvt.f32.s32	s11, s15
 800b734:	eec5 7a87 	vdiv.f32	s15, s11, s14
 800b738:	ee07 3a10 	vmov	s14, r3
 800b73c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800b740:	ee37 7a26 	vadd.f32	s14, s14, s13
 800b744:	ee37 7a06 	vadd.f32	s14, s14, s12
 800b748:	ee67 7a87 	vmul.f32	s15, s15, s14
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800b74c:	4b20      	ldr	r3, [pc, #128]	@ (800b7d0 <HAL_RCC_GetSysClockFreq+0x128>)
 800b74e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b750:	f3c3 2346 	ubfx	r3, r3, #9, #7
 800b754:	3301      	adds	r3, #1
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800b756:	ee07 3a10 	vmov	s14, r3
 800b75a:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 800b75e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800b762:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 800b766:	ee17 0a90 	vmov	r0, s15
 800b76a:	e7b3      	b.n	800b6d4 <HAL_RCC_GetSysClockFreq+0x2c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b76c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b76e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b772:	ee07 3a90 	vmov	s15, r3
 800b776:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b77a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b77e:	ee77 7a86 	vadd.f32	s15, s15, s12
 800b782:	ed9f 6a15 	vldr	s12, [pc, #84]	@ 800b7d8 <HAL_RCC_GetSysClockFreq+0x130>
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b786:	eec6 6a07 	vdiv.f32	s13, s12, s14
 800b78a:	ee67 7aa6 	vmul.f32	s15, s15, s13
            break;
 800b78e:	e7dd      	b.n	800b74c <HAL_RCC_GetSysClockFreq+0xa4>
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b790:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b792:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b796:	ee07 3a90 	vmov	s15, r3
 800b79a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b79e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b7a2:	ee77 7a86 	vadd.f32	s15, s15, s12
 800b7a6:	ed9f 6a0d 	vldr	s12, [pc, #52]	@ 800b7dc <HAL_RCC_GetSysClockFreq+0x134>
 800b7aa:	e7ec      	b.n	800b786 <HAL_RCC_GetSysClockFreq+0xde>
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b7ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b7ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b7b2:	ee07 3a90 	vmov	s15, r3
 800b7b6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b7ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b7be:	ee77 7a86 	vadd.f32	s15, s15, s12
 800b7c2:	ed9f 6a07 	vldr	s12, [pc, #28]	@ 800b7e0 <HAL_RCC_GetSysClockFreq+0x138>
 800b7c6:	e7de      	b.n	800b786 <HAL_RCC_GetSysClockFreq+0xde>
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800b7c8:	4806      	ldr	r0, [pc, #24]	@ (800b7e4 <HAL_RCC_GetSysClockFreq+0x13c>)
 800b7ca:	e783      	b.n	800b6d4 <HAL_RCC_GetSysClockFreq+0x2c>
      sysclockfreq = CSI_VALUE;
 800b7cc:	4806      	ldr	r0, [pc, #24]	@ (800b7e8 <HAL_RCC_GetSysClockFreq+0x140>)
 800b7ce:	e781      	b.n	800b6d4 <HAL_RCC_GetSysClockFreq+0x2c>
 800b7d0:	58024400 	.word	0x58024400
 800b7d4:	03d09000 	.word	0x03d09000
 800b7d8:	4c742400 	.word	0x4c742400
 800b7dc:	4bbebc20 	.word	0x4bbebc20
 800b7e0:	4a742400 	.word	0x4a742400
 800b7e4:	017d7840 	.word	0x017d7840
 800b7e8:	003d0900 	.word	0x003d0900

0800b7ec <HAL_RCC_ClockConfig>:
{
 800b7ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b7f0:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 800b7f2:	4604      	mov	r4, r0
 800b7f4:	b910      	cbnz	r0, 800b7fc <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 800b7f6:	2001      	movs	r0, #1
}
 800b7f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800b7fc:	4a88      	ldr	r2, [pc, #544]	@ (800ba20 <HAL_RCC_ClockConfig+0x234>)
 800b7fe:	6813      	ldr	r3, [r2, #0]
 800b800:	f003 030f 	and.w	r3, r3, #15
 800b804:	428b      	cmp	r3, r1
 800b806:	f0c0 8093 	bcc.w	800b930 <HAL_RCC_ClockConfig+0x144>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800b80a:	6823      	ldr	r3, [r4, #0]
 800b80c:	075f      	lsls	r7, r3, #29
 800b80e:	f100 809b 	bmi.w	800b948 <HAL_RCC_ClockConfig+0x15c>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b812:	071e      	lsls	r6, r3, #28
 800b814:	d50b      	bpl.n	800b82e <HAL_RCC_ClockConfig+0x42>
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800b816:	4983      	ldr	r1, [pc, #524]	@ (800ba24 <HAL_RCC_ClockConfig+0x238>)
 800b818:	6960      	ldr	r0, [r4, #20]
 800b81a:	69ca      	ldr	r2, [r1, #28]
 800b81c:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 800b820:	4290      	cmp	r0, r2
 800b822:	d904      	bls.n	800b82e <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800b824:	69ca      	ldr	r2, [r1, #28]
 800b826:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 800b82a:	4302      	orrs	r2, r0
 800b82c:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b82e:	06d8      	lsls	r0, r3, #27
 800b830:	d50b      	bpl.n	800b84a <HAL_RCC_ClockConfig+0x5e>
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800b832:	497c      	ldr	r1, [pc, #496]	@ (800ba24 <HAL_RCC_ClockConfig+0x238>)
 800b834:	69a0      	ldr	r0, [r4, #24]
 800b836:	69ca      	ldr	r2, [r1, #28]
 800b838:	f402 62e0 	and.w	r2, r2, #1792	@ 0x700
 800b83c:	4290      	cmp	r0, r2
 800b83e:	d904      	bls.n	800b84a <HAL_RCC_ClockConfig+0x5e>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800b840:	69ca      	ldr	r2, [r1, #28]
 800b842:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800b846:	4302      	orrs	r2, r0
 800b848:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800b84a:	0699      	lsls	r1, r3, #26
 800b84c:	d50b      	bpl.n	800b866 <HAL_RCC_ClockConfig+0x7a>
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800b84e:	4975      	ldr	r1, [pc, #468]	@ (800ba24 <HAL_RCC_ClockConfig+0x238>)
 800b850:	69e0      	ldr	r0, [r4, #28]
 800b852:	6a0a      	ldr	r2, [r1, #32]
 800b854:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 800b858:	4290      	cmp	r0, r2
 800b85a:	d904      	bls.n	800b866 <HAL_RCC_ClockConfig+0x7a>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800b85c:	6a0a      	ldr	r2, [r1, #32]
 800b85e:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 800b862:	4302      	orrs	r2, r0
 800b864:	620a      	str	r2, [r1, #32]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b866:	079a      	lsls	r2, r3, #30
 800b868:	d50b      	bpl.n	800b882 <HAL_RCC_ClockConfig+0x96>
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800b86a:	496e      	ldr	r1, [pc, #440]	@ (800ba24 <HAL_RCC_ClockConfig+0x238>)
 800b86c:	68e0      	ldr	r0, [r4, #12]
 800b86e:	698a      	ldr	r2, [r1, #24]
 800b870:	f002 020f 	and.w	r2, r2, #15
 800b874:	4290      	cmp	r0, r2
 800b876:	d904      	bls.n	800b882 <HAL_RCC_ClockConfig+0x96>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800b878:	698a      	ldr	r2, [r1, #24]
 800b87a:	f022 020f 	bic.w	r2, r2, #15
 800b87e:	4302      	orrs	r2, r0
 800b880:	618a      	str	r2, [r1, #24]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800b882:	07df      	lsls	r7, r3, #31
 800b884:	d46e      	bmi.n	800b964 <HAL_RCC_ClockConfig+0x178>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b886:	6823      	ldr	r3, [r4, #0]
 800b888:	079e      	lsls	r6, r3, #30
 800b88a:	f100 80a1 	bmi.w	800b9d0 <HAL_RCC_ClockConfig+0x1e4>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800b88e:	4964      	ldr	r1, [pc, #400]	@ (800ba20 <HAL_RCC_ClockConfig+0x234>)
 800b890:	680a      	ldr	r2, [r1, #0]
 800b892:	f002 020f 	and.w	r2, r2, #15
 800b896:	42aa      	cmp	r2, r5
 800b898:	f200 80a8 	bhi.w	800b9ec <HAL_RCC_ClockConfig+0x200>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800b89c:	0758      	lsls	r0, r3, #29
 800b89e:	f100 80b1 	bmi.w	800ba04 <HAL_RCC_ClockConfig+0x218>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b8a2:	0719      	lsls	r1, r3, #28
 800b8a4:	d50b      	bpl.n	800b8be <HAL_RCC_ClockConfig+0xd2>
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800b8a6:	495f      	ldr	r1, [pc, #380]	@ (800ba24 <HAL_RCC_ClockConfig+0x238>)
 800b8a8:	6960      	ldr	r0, [r4, #20]
 800b8aa:	69ca      	ldr	r2, [r1, #28]
 800b8ac:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 800b8b0:	4290      	cmp	r0, r2
 800b8b2:	d204      	bcs.n	800b8be <HAL_RCC_ClockConfig+0xd2>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800b8b4:	69ca      	ldr	r2, [r1, #28]
 800b8b6:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 800b8ba:	4302      	orrs	r2, r0
 800b8bc:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b8be:	06da      	lsls	r2, r3, #27
 800b8c0:	d50b      	bpl.n	800b8da <HAL_RCC_ClockConfig+0xee>
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800b8c2:	4958      	ldr	r1, [pc, #352]	@ (800ba24 <HAL_RCC_ClockConfig+0x238>)
 800b8c4:	69a0      	ldr	r0, [r4, #24]
 800b8c6:	69ca      	ldr	r2, [r1, #28]
 800b8c8:	f402 62e0 	and.w	r2, r2, #1792	@ 0x700
 800b8cc:	4290      	cmp	r0, r2
 800b8ce:	d204      	bcs.n	800b8da <HAL_RCC_ClockConfig+0xee>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800b8d0:	69ca      	ldr	r2, [r1, #28]
 800b8d2:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800b8d6:	4302      	orrs	r2, r0
 800b8d8:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800b8da:	069b      	lsls	r3, r3, #26
 800b8dc:	d50b      	bpl.n	800b8f6 <HAL_RCC_ClockConfig+0x10a>
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800b8de:	4a51      	ldr	r2, [pc, #324]	@ (800ba24 <HAL_RCC_ClockConfig+0x238>)
 800b8e0:	69e1      	ldr	r1, [r4, #28]
 800b8e2:	6a13      	ldr	r3, [r2, #32]
 800b8e4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800b8e8:	4299      	cmp	r1, r3
 800b8ea:	d204      	bcs.n	800b8f6 <HAL_RCC_ClockConfig+0x10a>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800b8ec:	6a13      	ldr	r3, [r2, #32]
 800b8ee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b8f2:	430b      	orrs	r3, r1
 800b8f4:	6213      	str	r3, [r2, #32]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800b8f6:	f7ff fed7 	bl	800b6a8 <HAL_RCC_GetSysClockFreq>
 800b8fa:	494a      	ldr	r1, [pc, #296]	@ (800ba24 <HAL_RCC_ClockConfig+0x238>)
 800b8fc:	4a4a      	ldr	r2, [pc, #296]	@ (800ba28 <HAL_RCC_ClockConfig+0x23c>)
 800b8fe:	698b      	ldr	r3, [r1, #24]
 800b900:	f3c3 2303 	ubfx	r3, r3, #8, #4
 800b904:	5cd3      	ldrb	r3, [r2, r3]
 800b906:	f003 031f 	and.w	r3, r3, #31
 800b90a:	40d8      	lsrs	r0, r3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800b90c:	698b      	ldr	r3, [r1, #24]
 800b90e:	f003 030f 	and.w	r3, r3, #15
 800b912:	5cd3      	ldrb	r3, [r2, r3]
 800b914:	4a45      	ldr	r2, [pc, #276]	@ (800ba2c <HAL_RCC_ClockConfig+0x240>)
 800b916:	f003 031f 	and.w	r3, r3, #31
 800b91a:	fa20 f303 	lsr.w	r3, r0, r3
 800b91e:	6013      	str	r3, [r2, #0]
  SystemCoreClock = common_system_clock;
 800b920:	4b43      	ldr	r3, [pc, #268]	@ (800ba30 <HAL_RCC_ClockConfig+0x244>)
 800b922:	6018      	str	r0, [r3, #0]
  halstatus = HAL_InitTick(uwTickPrio);
 800b924:	4b43      	ldr	r3, [pc, #268]	@ (800ba34 <HAL_RCC_ClockConfig+0x248>)
}
 800b926:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  halstatus = HAL_InitTick(uwTickPrio);
 800b92a:	6818      	ldr	r0, [r3, #0]
 800b92c:	f7f5 be1c 	b.w	8001568 <HAL_InitTick>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b930:	6813      	ldr	r3, [r2, #0]
 800b932:	f023 030f 	bic.w	r3, r3, #15
 800b936:	430b      	orrs	r3, r1
 800b938:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b93a:	6813      	ldr	r3, [r2, #0]
 800b93c:	f003 030f 	and.w	r3, r3, #15
 800b940:	428b      	cmp	r3, r1
 800b942:	f47f af58 	bne.w	800b7f6 <HAL_RCC_ClockConfig+0xa>
 800b946:	e760      	b.n	800b80a <HAL_RCC_ClockConfig+0x1e>
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800b948:	4936      	ldr	r1, [pc, #216]	@ (800ba24 <HAL_RCC_ClockConfig+0x238>)
 800b94a:	6920      	ldr	r0, [r4, #16]
 800b94c:	698a      	ldr	r2, [r1, #24]
 800b94e:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 800b952:	4290      	cmp	r0, r2
 800b954:	f67f af5d 	bls.w	800b812 <HAL_RCC_ClockConfig+0x26>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800b958:	698a      	ldr	r2, [r1, #24]
 800b95a:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 800b95e:	4302      	orrs	r2, r0
 800b960:	618a      	str	r2, [r1, #24]
 800b962:	e756      	b.n	800b812 <HAL_RCC_ClockConfig+0x26>
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800b964:	4b2f      	ldr	r3, [pc, #188]	@ (800ba24 <HAL_RCC_ClockConfig+0x238>)
 800b966:	68a1      	ldr	r1, [r4, #8]
 800b968:	699a      	ldr	r2, [r3, #24]
 800b96a:	f422 6270 	bic.w	r2, r2, #3840	@ 0xf00
 800b96e:	430a      	orrs	r2, r1
 800b970:	619a      	str	r2, [r3, #24]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800b972:	6861      	ldr	r1, [r4, #4]
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800b974:	681a      	ldr	r2, [r3, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800b976:	2902      	cmp	r1, #2
 800b978:	d11d      	bne.n	800b9b6 <HAL_RCC_ClockConfig+0x1ca>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800b97a:	f412 3f00 	tst.w	r2, #131072	@ 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800b97e:	f43f af3a 	beq.w	800b7f6 <HAL_RCC_ClockConfig+0xa>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800b982:	691a      	ldr	r2, [r3, #16]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b984:	f241 3888 	movw	r8, #5000	@ 0x1388
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b988:	4f26      	ldr	r7, [pc, #152]	@ (800ba24 <HAL_RCC_ClockConfig+0x238>)
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800b98a:	f022 0207 	bic.w	r2, r2, #7
 800b98e:	430a      	orrs	r2, r1
 800b990:	611a      	str	r2, [r3, #16]
    tickstart = HAL_GetTick();
 800b992:	f7fc f9df 	bl	8007d54 <HAL_GetTick>
 800b996:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b998:	693b      	ldr	r3, [r7, #16]
 800b99a:	6862      	ldr	r2, [r4, #4]
 800b99c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800b9a0:	ebb3 0fc2 	cmp.w	r3, r2, lsl #3
 800b9a4:	f43f af6f 	beq.w	800b886 <HAL_RCC_ClockConfig+0x9a>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b9a8:	f7fc f9d4 	bl	8007d54 <HAL_GetTick>
 800b9ac:	1b80      	subs	r0, r0, r6
 800b9ae:	4540      	cmp	r0, r8
 800b9b0:	d9f2      	bls.n	800b998 <HAL_RCC_ClockConfig+0x1ac>
        return HAL_TIMEOUT;
 800b9b2:	2003      	movs	r0, #3
 800b9b4:	e720      	b.n	800b7f8 <HAL_RCC_ClockConfig+0xc>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800b9b6:	2903      	cmp	r1, #3
 800b9b8:	d102      	bne.n	800b9c0 <HAL_RCC_ClockConfig+0x1d4>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800b9ba:	f012 7f00 	tst.w	r2, #33554432	@ 0x2000000
 800b9be:	e7de      	b.n	800b97e <HAL_RCC_ClockConfig+0x192>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800b9c0:	2901      	cmp	r1, #1
 800b9c2:	d102      	bne.n	800b9ca <HAL_RCC_ClockConfig+0x1de>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800b9c4:	f412 7f80 	tst.w	r2, #256	@ 0x100
 800b9c8:	e7d9      	b.n	800b97e <HAL_RCC_ClockConfig+0x192>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800b9ca:	f012 0f04 	tst.w	r2, #4
 800b9ce:	e7d6      	b.n	800b97e <HAL_RCC_ClockConfig+0x192>
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800b9d0:	4914      	ldr	r1, [pc, #80]	@ (800ba24 <HAL_RCC_ClockConfig+0x238>)
 800b9d2:	68e0      	ldr	r0, [r4, #12]
 800b9d4:	698a      	ldr	r2, [r1, #24]
 800b9d6:	f002 020f 	and.w	r2, r2, #15
 800b9da:	4290      	cmp	r0, r2
 800b9dc:	f4bf af57 	bcs.w	800b88e <HAL_RCC_ClockConfig+0xa2>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800b9e0:	698a      	ldr	r2, [r1, #24]
 800b9e2:	f022 020f 	bic.w	r2, r2, #15
 800b9e6:	4302      	orrs	r2, r0
 800b9e8:	618a      	str	r2, [r1, #24]
 800b9ea:	e750      	b.n	800b88e <HAL_RCC_ClockConfig+0xa2>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b9ec:	680a      	ldr	r2, [r1, #0]
 800b9ee:	f022 020f 	bic.w	r2, r2, #15
 800b9f2:	432a      	orrs	r2, r5
 800b9f4:	600a      	str	r2, [r1, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b9f6:	680a      	ldr	r2, [r1, #0]
 800b9f8:	f002 020f 	and.w	r2, r2, #15
 800b9fc:	42aa      	cmp	r2, r5
 800b9fe:	f47f aefa 	bne.w	800b7f6 <HAL_RCC_ClockConfig+0xa>
 800ba02:	e74b      	b.n	800b89c <HAL_RCC_ClockConfig+0xb0>
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800ba04:	4907      	ldr	r1, [pc, #28]	@ (800ba24 <HAL_RCC_ClockConfig+0x238>)
 800ba06:	6920      	ldr	r0, [r4, #16]
 800ba08:	698a      	ldr	r2, [r1, #24]
 800ba0a:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 800ba0e:	4290      	cmp	r0, r2
 800ba10:	f4bf af47 	bcs.w	800b8a2 <HAL_RCC_ClockConfig+0xb6>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800ba14:	698a      	ldr	r2, [r1, #24]
 800ba16:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 800ba1a:	4302      	orrs	r2, r0
 800ba1c:	618a      	str	r2, [r1, #24]
 800ba1e:	e740      	b.n	800b8a2 <HAL_RCC_ClockConfig+0xb6>
 800ba20:	52002000 	.word	0x52002000
 800ba24:	58024400 	.word	0x58024400
 800ba28:	0802c004 	.word	0x0802c004
 800ba2c:	24000068 	.word	0x24000068
 800ba30:	2400006c 	.word	0x2400006c
 800ba34:	24000074 	.word	0x24000074

0800ba38 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800ba38:	b508      	push	{r3, lr}
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800ba3a:	f7ff fe35 	bl	800b6a8 <HAL_RCC_GetSysClockFreq>
 800ba3e:	4a0b      	ldr	r2, [pc, #44]	@ (800ba6c <HAL_RCC_GetHCLKFreq+0x34>)
 800ba40:	490b      	ldr	r1, [pc, #44]	@ (800ba70 <HAL_RCC_GetHCLKFreq+0x38>)
 800ba42:	6993      	ldr	r3, [r2, #24]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800ba44:	6992      	ldr	r2, [r2, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800ba46:	f3c3 2303 	ubfx	r3, r3, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800ba4a:	f002 020f 	and.w	r2, r2, #15
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800ba4e:	5ccb      	ldrb	r3, [r1, r3]
 800ba50:	f003 031f 	and.w	r3, r3, #31
 800ba54:	fa20 f303 	lsr.w	r3, r0, r3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800ba58:	5c88      	ldrb	r0, [r1, r2]
 800ba5a:	4a06      	ldr	r2, [pc, #24]	@ (800ba74 <HAL_RCC_GetHCLKFreq+0x3c>)
 800ba5c:	f000 001f 	and.w	r0, r0, #31
 800ba60:	fa23 f000 	lsr.w	r0, r3, r0
 800ba64:	6010      	str	r0, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800ba66:	4a04      	ldr	r2, [pc, #16]	@ (800ba78 <HAL_RCC_GetHCLKFreq+0x40>)
 800ba68:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
}
 800ba6a:	bd08      	pop	{r3, pc}
 800ba6c:	58024400 	.word	0x58024400
 800ba70:	0802c004 	.word	0x0802c004
 800ba74:	24000068 	.word	0x24000068
 800ba78:	2400006c 	.word	0x2400006c

0800ba7c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800ba7c:	b508      	push	{r3, lr}
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800ba7e:	f7ff ffdb 	bl	800ba38 <HAL_RCC_GetHCLKFreq>
 800ba82:	4b05      	ldr	r3, [pc, #20]	@ (800ba98 <HAL_RCC_GetPCLK1Freq+0x1c>)
 800ba84:	4a05      	ldr	r2, [pc, #20]	@ (800ba9c <HAL_RCC_GetPCLK1Freq+0x20>)
 800ba86:	69db      	ldr	r3, [r3, #28]
 800ba88:	f3c3 1302 	ubfx	r3, r3, #4, #3
 800ba8c:	5cd3      	ldrb	r3, [r2, r3]
 800ba8e:	f003 031f 	and.w	r3, r3, #31
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800ba92:	40d8      	lsrs	r0, r3
 800ba94:	bd08      	pop	{r3, pc}
 800ba96:	bf00      	nop
 800ba98:	58024400 	.word	0x58024400
 800ba9c:	0802c004 	.word	0x0802c004

0800baa0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800baa0:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800baa2:	f7ff ffc9 	bl	800ba38 <HAL_RCC_GetHCLKFreq>
 800baa6:	4b05      	ldr	r3, [pc, #20]	@ (800babc <HAL_RCC_GetPCLK2Freq+0x1c>)
 800baa8:	4a05      	ldr	r2, [pc, #20]	@ (800bac0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800baaa:	69db      	ldr	r3, [r3, #28]
 800baac:	f3c3 2302 	ubfx	r3, r3, #8, #3
 800bab0:	5cd3      	ldrb	r3, [r2, r3]
 800bab2:	f003 031f 	and.w	r3, r3, #31
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800bab6:	40d8      	lsrs	r0, r3
 800bab8:	bd08      	pop	{r3, pc}
 800baba:	bf00      	nop
 800babc:	58024400 	.word	0x58024400
 800bac0:	0802c004 	.word	0x0802c004

0800bac4 <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 800bac4:	233f      	movs	r3, #63	@ 0x3f
 800bac6:	6003      	str	r3, [r0, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800bac8:	4b11      	ldr	r3, [pc, #68]	@ (800bb10 <HAL_RCC_GetClockConfig+0x4c>)
 800baca:	691a      	ldr	r2, [r3, #16]
 800bacc:	f002 0207 	and.w	r2, r2, #7
 800bad0:	6042      	str	r2, [r0, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 800bad2:	699a      	ldr	r2, [r3, #24]
 800bad4:	f402 6270 	and.w	r2, r2, #3840	@ 0xf00
 800bad8:	6082      	str	r2, [r0, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 800bada:	699a      	ldr	r2, [r3, #24]
 800badc:	f002 020f 	and.w	r2, r2, #15
 800bae0:	60c2      	str	r2, [r0, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 800bae2:	699a      	ldr	r2, [r3, #24]
 800bae4:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 800bae8:	6102      	str	r2, [r0, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 800baea:	69da      	ldr	r2, [r3, #28]
 800baec:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 800baf0:	6142      	str	r2, [r0, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 800baf2:	69da      	ldr	r2, [r3, #28]
 800baf4:	f402 62e0 	and.w	r2, r2, #1792	@ 0x700
 800baf8:	6182      	str	r2, [r0, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 800bafa:	6a1b      	ldr	r3, [r3, #32]
 800bafc:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800bb00:	61c3      	str	r3, [r0, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800bb02:	4b04      	ldr	r3, [pc, #16]	@ (800bb14 <HAL_RCC_GetClockConfig+0x50>)
 800bb04:	681b      	ldr	r3, [r3, #0]
 800bb06:	f003 030f 	and.w	r3, r3, #15
 800bb0a:	600b      	str	r3, [r1, #0]
}
 800bb0c:	4770      	bx	lr
 800bb0e:	bf00      	nop
 800bb10:	58024400 	.word	0x58024400
 800bb14:	52002000 	.word	0x52002000

0800bb18 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800bb18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800bb1a:	4c3a      	ldr	r4, [pc, #232]	@ (800bc04 <RCCEx_PLL2_Config+0xec>)
{
 800bb1c:	4606      	mov	r6, r0
 800bb1e:	460d      	mov	r5, r1
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800bb20:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800bb22:	f003 0303 	and.w	r3, r3, #3
 800bb26:	2b03      	cmp	r3, #3
 800bb28:	d069      	beq.n	800bbfe <RCCEx_PLL2_Config+0xe6>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800bb2a:	6823      	ldr	r3, [r4, #0]
 800bb2c:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800bb30:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800bb32:	f7fc f90f 	bl	8007d54 <HAL_GetTick>
 800bb36:	4607      	mov	r7, r0

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800bb38:	6823      	ldr	r3, [r4, #0]
 800bb3a:	011a      	lsls	r2, r3, #4
 800bb3c:	d44b      	bmi.n	800bbd6 <RCCEx_PLL2_Config+0xbe>
        return HAL_TIMEOUT;
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800bb3e:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800bb40:	6832      	ldr	r2, [r6, #0]
 800bb42:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 800bb46:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 800bb4a:	62a3      	str	r3, [r4, #40]	@ 0x28
 800bb4c:	68b3      	ldr	r3, [r6, #8]
 800bb4e:	68f2      	ldr	r2, [r6, #12]
 800bb50:	3b01      	subs	r3, #1
 800bb52:	3a01      	subs	r2, #1
 800bb54:	025b      	lsls	r3, r3, #9
 800bb56:	0412      	lsls	r2, r2, #16
 800bb58:	b29b      	uxth	r3, r3
 800bb5a:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 800bb5e:	4313      	orrs	r3, r2
 800bb60:	6872      	ldr	r2, [r6, #4]
 800bb62:	3a01      	subs	r2, #1
 800bb64:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800bb68:	4313      	orrs	r3, r2
 800bb6a:	6932      	ldr	r2, [r6, #16]
 800bb6c:	3a01      	subs	r2, #1
 800bb6e:	0612      	lsls	r2, r2, #24
 800bb70:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 800bb74:	4313      	orrs	r3, r2
 800bb76:	63a3      	str	r3, [r4, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800bb78:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800bb7a:	6972      	ldr	r2, [r6, #20]
 800bb7c:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800bb80:	4313      	orrs	r3, r2
 800bb82:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800bb84:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800bb86:	69b2      	ldr	r2, [r6, #24]
 800bb88:	f023 0320 	bic.w	r3, r3, #32
 800bb8c:	4313      	orrs	r3, r2
 800bb8e:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800bb90:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800bb92:	f023 0310 	bic.w	r3, r3, #16
 800bb96:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800bb98:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800bb9a:	69f2      	ldr	r2, [r6, #28]
 800bb9c:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800bba0:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800bba4:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800bba8:	63e3      	str	r3, [r4, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800bbaa:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800bbac:	f043 0310 	orr.w	r3, r3, #16
 800bbb0:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800bbb2:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
    if (Divider == DIVIDER_P_UPDATE)
 800bbb4:	b9b5      	cbnz	r5, 800bbe4 <RCCEx_PLL2_Config+0xcc>
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800bbb6:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800bbba:	62e3      	str	r3, [r4, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800bbbc:	4c11      	ldr	r4, [pc, #68]	@ (800bc04 <RCCEx_PLL2_Config+0xec>)
 800bbbe:	6823      	ldr	r3, [r4, #0]
 800bbc0:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800bbc4:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800bbc6:	f7fc f8c5 	bl	8007d54 <HAL_GetTick>
 800bbca:	4605      	mov	r5, r0

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800bbcc:	6823      	ldr	r3, [r4, #0]
 800bbce:	011b      	lsls	r3, r3, #4
 800bbd0:	d50f      	bpl.n	800bbf2 <RCCEx_PLL2_Config+0xda>
    }

  }


  return status;
 800bbd2:	2000      	movs	r0, #0
 800bbd4:	e005      	b.n	800bbe2 <RCCEx_PLL2_Config+0xca>
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800bbd6:	f7fc f8bd 	bl	8007d54 <HAL_GetTick>
 800bbda:	1bc0      	subs	r0, r0, r7
 800bbdc:	2802      	cmp	r0, #2
 800bbde:	d9ab      	bls.n	800bb38 <RCCEx_PLL2_Config+0x20>
        return HAL_TIMEOUT;
 800bbe0:	2003      	movs	r0, #3
}
 800bbe2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    else if (Divider == DIVIDER_Q_UPDATE)
 800bbe4:	2d01      	cmp	r5, #1
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800bbe6:	bf0c      	ite	eq
 800bbe8:	f443 1380 	orreq.w	r3, r3, #1048576	@ 0x100000
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800bbec:	f443 1300 	orrne.w	r3, r3, #2097152	@ 0x200000
 800bbf0:	e7e3      	b.n	800bbba <RCCEx_PLL2_Config+0xa2>
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800bbf2:	f7fc f8af 	bl	8007d54 <HAL_GetTick>
 800bbf6:	1b40      	subs	r0, r0, r5
 800bbf8:	2802      	cmp	r0, #2
 800bbfa:	d9e7      	bls.n	800bbcc <RCCEx_PLL2_Config+0xb4>
 800bbfc:	e7f0      	b.n	800bbe0 <RCCEx_PLL2_Config+0xc8>
    return HAL_ERROR;
 800bbfe:	2001      	movs	r0, #1
 800bc00:	e7ef      	b.n	800bbe2 <RCCEx_PLL2_Config+0xca>
 800bc02:	bf00      	nop
 800bc04:	58024400 	.word	0x58024400

0800bc08 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800bc08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800bc0a:	4c3a      	ldr	r4, [pc, #232]	@ (800bcf4 <RCCEx_PLL3_Config+0xec>)
{
 800bc0c:	4606      	mov	r6, r0
 800bc0e:	460d      	mov	r5, r1
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800bc10:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800bc12:	f003 0303 	and.w	r3, r3, #3
 800bc16:	2b03      	cmp	r3, #3
 800bc18:	d069      	beq.n	800bcee <RCCEx_PLL3_Config+0xe6>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800bc1a:	6823      	ldr	r3, [r4, #0]
 800bc1c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800bc20:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800bc22:	f7fc f897 	bl	8007d54 <HAL_GetTick>
 800bc26:	4607      	mov	r7, r0
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800bc28:	6823      	ldr	r3, [r4, #0]
 800bc2a:	009a      	lsls	r2, r3, #2
 800bc2c:	d44b      	bmi.n	800bcc6 <RCCEx_PLL3_Config+0xbe>
        return HAL_TIMEOUT;
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800bc2e:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800bc30:	6832      	ldr	r2, [r6, #0]
 800bc32:	f023 737c 	bic.w	r3, r3, #66060288	@ 0x3f00000
 800bc36:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 800bc3a:	62a3      	str	r3, [r4, #40]	@ 0x28
 800bc3c:	68b3      	ldr	r3, [r6, #8]
 800bc3e:	68f2      	ldr	r2, [r6, #12]
 800bc40:	3b01      	subs	r3, #1
 800bc42:	3a01      	subs	r2, #1
 800bc44:	025b      	lsls	r3, r3, #9
 800bc46:	0412      	lsls	r2, r2, #16
 800bc48:	b29b      	uxth	r3, r3
 800bc4a:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 800bc4e:	4313      	orrs	r3, r2
 800bc50:	6872      	ldr	r2, [r6, #4]
 800bc52:	3a01      	subs	r2, #1
 800bc54:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800bc58:	4313      	orrs	r3, r2
 800bc5a:	6932      	ldr	r2, [r6, #16]
 800bc5c:	3a01      	subs	r2, #1
 800bc5e:	0612      	lsls	r2, r2, #24
 800bc60:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 800bc64:	4313      	orrs	r3, r2
 800bc66:	6423      	str	r3, [r4, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800bc68:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800bc6a:	6972      	ldr	r2, [r6, #20]
 800bc6c:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 800bc70:	4313      	orrs	r3, r2
 800bc72:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800bc74:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800bc76:	69b2      	ldr	r2, [r6, #24]
 800bc78:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800bc7c:	4313      	orrs	r3, r2
 800bc7e:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800bc80:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800bc82:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800bc86:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800bc88:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 800bc8a:	69f2      	ldr	r2, [r6, #28]
 800bc8c:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800bc90:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800bc94:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800bc98:	6463      	str	r3, [r4, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800bc9a:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800bc9c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800bca0:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800bca2:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
    if (Divider == DIVIDER_P_UPDATE)
 800bca4:	b9b5      	cbnz	r5, 800bcd4 <RCCEx_PLL3_Config+0xcc>
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800bca6:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800bcaa:	62e3      	str	r3, [r4, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800bcac:	4c11      	ldr	r4, [pc, #68]	@ (800bcf4 <RCCEx_PLL3_Config+0xec>)
 800bcae:	6823      	ldr	r3, [r4, #0]
 800bcb0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800bcb4:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800bcb6:	f7fc f84d 	bl	8007d54 <HAL_GetTick>
 800bcba:	4605      	mov	r5, r0

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800bcbc:	6823      	ldr	r3, [r4, #0]
 800bcbe:	009b      	lsls	r3, r3, #2
 800bcc0:	d50f      	bpl.n	800bce2 <RCCEx_PLL3_Config+0xda>
    }

  }


  return status;
 800bcc2:	2000      	movs	r0, #0
 800bcc4:	e005      	b.n	800bcd2 <RCCEx_PLL3_Config+0xca>
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800bcc6:	f7fc f845 	bl	8007d54 <HAL_GetTick>
 800bcca:	1bc0      	subs	r0, r0, r7
 800bccc:	2802      	cmp	r0, #2
 800bcce:	d9ab      	bls.n	800bc28 <RCCEx_PLL3_Config+0x20>
        return HAL_TIMEOUT;
 800bcd0:	2003      	movs	r0, #3
}
 800bcd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    else if (Divider == DIVIDER_Q_UPDATE)
 800bcd4:	2d01      	cmp	r5, #1
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800bcd6:	bf0c      	ite	eq
 800bcd8:	f443 0300 	orreq.w	r3, r3, #8388608	@ 0x800000
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800bcdc:	f043 7380 	orrne.w	r3, r3, #16777216	@ 0x1000000
 800bce0:	e7e3      	b.n	800bcaa <RCCEx_PLL3_Config+0xa2>
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800bce2:	f7fc f837 	bl	8007d54 <HAL_GetTick>
 800bce6:	1b40      	subs	r0, r0, r5
 800bce8:	2802      	cmp	r0, #2
 800bcea:	d9e7      	bls.n	800bcbc <RCCEx_PLL3_Config+0xb4>
 800bcec:	e7f0      	b.n	800bcd0 <RCCEx_PLL3_Config+0xc8>
    return HAL_ERROR;
 800bcee:	2001      	movs	r0, #1
 800bcf0:	e7ef      	b.n	800bcd2 <RCCEx_PLL3_Config+0xca>
 800bcf2:	bf00      	nop
 800bcf4:	58024400 	.word	0x58024400

0800bcf8 <HAL_RCCEx_PeriphCLKConfig>:
{
 800bcf8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800bcfc:	6803      	ldr	r3, [r0, #0]
{
 800bcfe:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800bd00:	011c      	lsls	r4, r3, #4
 800bd02:	d51e      	bpl.n	800bd42 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    switch (PeriphClkInit->SpdifrxClockSelection)
 800bd04:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
 800bd06:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800bd0a:	d02a      	beq.n	800bd62 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 800bd0c:	d80f      	bhi.n	800bd2e <HAL_RCCEx_PeriphCLKConfig+0x36>
 800bd0e:	b1d3      	cbz	r3, 800bd46 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 800bd10:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800bd14:	d01d      	beq.n	800bd52 <HAL_RCCEx_PeriphCLKConfig+0x5a>
 800bd16:	2601      	movs	r6, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800bd18:	682b      	ldr	r3, [r5, #0]
 800bd1a:	05d8      	lsls	r0, r3, #23
 800bd1c:	d54f      	bpl.n	800bdbe <HAL_RCCEx_PeriphCLKConfig+0xc6>
    switch (PeriphClkInit->Sai1ClockSelection)
 800bd1e:	6deb      	ldr	r3, [r5, #92]	@ 0x5c
 800bd20:	2b04      	cmp	r3, #4
 800bd22:	d84b      	bhi.n	800bdbc <HAL_RCCEx_PeriphCLKConfig+0xc4>
 800bd24:	e8df f003 	tbb	[pc, r3]
 800bd28:	27443d22 	.word	0x27443d22
 800bd2c:	27          	.byte	0x27
 800bd2d:	00          	.byte	0x00
    switch (PeriphClkInit->SpdifrxClockSelection)
 800bd2e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800bd32:	d1f0      	bne.n	800bd16 <HAL_RCCEx_PeriphCLKConfig+0x1e>
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800bd34:	4a86      	ldr	r2, [pc, #536]	@ (800bf50 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800bd36:	6ee9      	ldr	r1, [r5, #108]	@ 0x6c
 800bd38:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 800bd3a:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800bd3e:	430b      	orrs	r3, r1
 800bd40:	6513      	str	r3, [r2, #80]	@ 0x50
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800bd42:	2600      	movs	r6, #0
 800bd44:	e7e8      	b.n	800bd18 <HAL_RCCEx_PeriphCLKConfig+0x20>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bd46:	4a82      	ldr	r2, [pc, #520]	@ (800bf50 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800bd48:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800bd4a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800bd4e:	62d3      	str	r3, [r2, #44]	@ 0x2c
    if (ret == HAL_OK)
 800bd50:	e7f0      	b.n	800bd34 <HAL_RCCEx_PeriphCLKConfig+0x3c>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800bd52:	2102      	movs	r1, #2
 800bd54:	3008      	adds	r0, #8
 800bd56:	f7ff fedf 	bl	800bb18 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800bd5a:	4606      	mov	r6, r0
    if (ret == HAL_OK)
 800bd5c:	2800      	cmp	r0, #0
 800bd5e:	d1db      	bne.n	800bd18 <HAL_RCCEx_PeriphCLKConfig+0x20>
 800bd60:	e7e8      	b.n	800bd34 <HAL_RCCEx_PeriphCLKConfig+0x3c>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800bd62:	2102      	movs	r1, #2
 800bd64:	3028      	adds	r0, #40	@ 0x28
 800bd66:	f7ff ff4f 	bl	800bc08 <RCCEx_PLL3_Config>
 800bd6a:	e7f6      	b.n	800bd5a <HAL_RCCEx_PeriphCLKConfig+0x62>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bd6c:	4a78      	ldr	r2, [pc, #480]	@ (800bf50 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800bd6e:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800bd70:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800bd74:	62d3      	str	r3, [r2, #44]	@ 0x2c
    switch (PeriphClkInit->SpdifrxClockSelection)
 800bd76:	4634      	mov	r4, r6
    if (ret == HAL_OK)
 800bd78:	bb1c      	cbnz	r4, 800bdc2 <HAL_RCCEx_PeriphCLKConfig+0xca>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800bd7a:	4a75      	ldr	r2, [pc, #468]	@ (800bf50 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800bd7c:	6de9      	ldr	r1, [r5, #92]	@ 0x5c
 800bd7e:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 800bd80:	f023 0307 	bic.w	r3, r3, #7
 800bd84:	430b      	orrs	r3, r1
 800bd86:	6513      	str	r3, [r2, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800bd88:	682b      	ldr	r3, [r5, #0]
 800bd8a:	0599      	lsls	r1, r3, #22
 800bd8c:	d528      	bpl.n	800bde0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
    switch (PeriphClkInit->Sai23ClockSelection)
 800bd8e:	6e2b      	ldr	r3, [r5, #96]	@ 0x60
 800bd90:	2b80      	cmp	r3, #128	@ 0x80
 800bd92:	d043      	beq.n	800be1c <HAL_RCCEx_PeriphCLKConfig+0x124>
 800bd94:	d817      	bhi.n	800bdc6 <HAL_RCCEx_PeriphCLKConfig+0xce>
 800bd96:	b3a3      	cbz	r3, 800be02 <HAL_RCCEx_PeriphCLKConfig+0x10a>
 800bd98:	2b40      	cmp	r3, #64	@ 0x40
 800bd9a:	d038      	beq.n	800be0e <HAL_RCCEx_PeriphCLKConfig+0x116>
 800bd9c:	2601      	movs	r6, #1
 800bd9e:	4634      	mov	r4, r6
 800bda0:	e01e      	b.n	800bde0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800bda2:	2100      	movs	r1, #0
 800bda4:	f105 0008 	add.w	r0, r5, #8
 800bda8:	f7ff feb6 	bl	800bb18 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800bdac:	4604      	mov	r4, r0
        break;
 800bdae:	e7e3      	b.n	800bd78 <HAL_RCCEx_PeriphCLKConfig+0x80>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800bdb0:	2100      	movs	r1, #0
 800bdb2:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800bdb6:	f7ff ff27 	bl	800bc08 <RCCEx_PLL3_Config>
 800bdba:	e7f7      	b.n	800bdac <HAL_RCCEx_PeriphCLKConfig+0xb4>
    switch (PeriphClkInit->Sai1ClockSelection)
 800bdbc:	2601      	movs	r6, #1
 800bdbe:	4634      	mov	r4, r6
 800bdc0:	e7e2      	b.n	800bd88 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800bdc2:	4626      	mov	r6, r4
 800bdc4:	e7e0      	b.n	800bd88 <HAL_RCCEx_PeriphCLKConfig+0x90>
    switch (PeriphClkInit->Sai23ClockSelection)
 800bdc6:	2bc0      	cmp	r3, #192	@ 0xc0
 800bdc8:	d002      	beq.n	800bdd0 <HAL_RCCEx_PeriphCLKConfig+0xd8>
 800bdca:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800bdce:	d1e5      	bne.n	800bd9c <HAL_RCCEx_PeriphCLKConfig+0xa4>
    if (ret == HAL_OK)
 800bdd0:	bb54      	cbnz	r4, 800be28 <HAL_RCCEx_PeriphCLKConfig+0x130>
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800bdd2:	4a5f      	ldr	r2, [pc, #380]	@ (800bf50 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800bdd4:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 800bdd6:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 800bdd8:	f423 73e0 	bic.w	r3, r3, #448	@ 0x1c0
 800bddc:	430b      	orrs	r3, r1
 800bdde:	6513      	str	r3, [r2, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800bde0:	682b      	ldr	r3, [r5, #0]
 800bde2:	055a      	lsls	r2, r3, #21
 800bde4:	d531      	bpl.n	800be4a <HAL_RCCEx_PeriphCLKConfig+0x152>
    switch (PeriphClkInit->Sai4AClockSelection)
 800bde6:	f8d5 30ac 	ldr.w	r3, [r5, #172]	@ 0xac
 800bdea:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800bdee:	d049      	beq.n	800be84 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800bdf0:	d81c      	bhi.n	800be2c <HAL_RCCEx_PeriphCLKConfig+0x134>
 800bdf2:	2b00      	cmp	r3, #0
 800bdf4:	d039      	beq.n	800be6a <HAL_RCCEx_PeriphCLKConfig+0x172>
 800bdf6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800bdfa:	d03c      	beq.n	800be76 <HAL_RCCEx_PeriphCLKConfig+0x17e>
 800bdfc:	2601      	movs	r6, #1
 800bdfe:	4634      	mov	r4, r6
 800be00:	e023      	b.n	800be4a <HAL_RCCEx_PeriphCLKConfig+0x152>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800be02:	4a53      	ldr	r2, [pc, #332]	@ (800bf50 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800be04:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800be06:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800be0a:	62d3      	str	r3, [r2, #44]	@ 0x2c
        break;
 800be0c:	e7e0      	b.n	800bdd0 <HAL_RCCEx_PeriphCLKConfig+0xd8>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800be0e:	2100      	movs	r1, #0
 800be10:	f105 0008 	add.w	r0, r5, #8
 800be14:	f7ff fe80 	bl	800bb18 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800be18:	4604      	mov	r4, r0
        break;
 800be1a:	e7d9      	b.n	800bdd0 <HAL_RCCEx_PeriphCLKConfig+0xd8>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800be1c:	2100      	movs	r1, #0
 800be1e:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800be22:	f7ff fef1 	bl	800bc08 <RCCEx_PLL3_Config>
 800be26:	e7f7      	b.n	800be18 <HAL_RCCEx_PeriphCLKConfig+0x120>
 800be28:	4626      	mov	r6, r4
 800be2a:	e7d9      	b.n	800bde0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
    switch (PeriphClkInit->Sai4AClockSelection)
 800be2c:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800be30:	d002      	beq.n	800be38 <HAL_RCCEx_PeriphCLKConfig+0x140>
 800be32:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800be36:	d1e1      	bne.n	800bdfc <HAL_RCCEx_PeriphCLKConfig+0x104>
    if (ret == HAL_OK)
 800be38:	bb54      	cbnz	r4, 800be90 <HAL_RCCEx_PeriphCLKConfig+0x198>
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800be3a:	4a45      	ldr	r2, [pc, #276]	@ (800bf50 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800be3c:	f8d5 10ac 	ldr.w	r1, [r5, #172]	@ 0xac
 800be40:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 800be42:	f423 0360 	bic.w	r3, r3, #14680064	@ 0xe00000
 800be46:	430b      	orrs	r3, r1
 800be48:	6593      	str	r3, [r2, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800be4a:	682b      	ldr	r3, [r5, #0]
 800be4c:	051b      	lsls	r3, r3, #20
 800be4e:	d530      	bpl.n	800beb2 <HAL_RCCEx_PeriphCLKConfig+0x1ba>
    switch (PeriphClkInit->Sai4BClockSelection)
 800be50:	f8d5 30b0 	ldr.w	r3, [r5, #176]	@ 0xb0
 800be54:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800be58:	d045      	beq.n	800bee6 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800be5a:	d81b      	bhi.n	800be94 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 800be5c:	b3b3      	cbz	r3, 800becc <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 800be5e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800be62:	d039      	beq.n	800bed8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>
 800be64:	2601      	movs	r6, #1
 800be66:	4634      	mov	r4, r6
 800be68:	e023      	b.n	800beb2 <HAL_RCCEx_PeriphCLKConfig+0x1ba>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800be6a:	4a39      	ldr	r2, [pc, #228]	@ (800bf50 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800be6c:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800be6e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800be72:	62d3      	str	r3, [r2, #44]	@ 0x2c
        break;
 800be74:	e7e0      	b.n	800be38 <HAL_RCCEx_PeriphCLKConfig+0x140>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800be76:	2100      	movs	r1, #0
 800be78:	f105 0008 	add.w	r0, r5, #8
 800be7c:	f7ff fe4c 	bl	800bb18 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800be80:	4604      	mov	r4, r0
        break;
 800be82:	e7d9      	b.n	800be38 <HAL_RCCEx_PeriphCLKConfig+0x140>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800be84:	2100      	movs	r1, #0
 800be86:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800be8a:	f7ff febd 	bl	800bc08 <RCCEx_PLL3_Config>
 800be8e:	e7f7      	b.n	800be80 <HAL_RCCEx_PeriphCLKConfig+0x188>
 800be90:	4626      	mov	r6, r4
 800be92:	e7da      	b.n	800be4a <HAL_RCCEx_PeriphCLKConfig+0x152>
    switch (PeriphClkInit->Sai4BClockSelection)
 800be94:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800be98:	d002      	beq.n	800bea0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800be9a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800be9e:	d1e1      	bne.n	800be64 <HAL_RCCEx_PeriphCLKConfig+0x16c>
    if (ret == HAL_OK)
 800bea0:	bb3c      	cbnz	r4, 800bef2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800bea2:	4a2b      	ldr	r2, [pc, #172]	@ (800bf50 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800bea4:	f8d5 10b0 	ldr.w	r1, [r5, #176]	@ 0xb0
 800bea8:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 800beaa:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800beae:	430b      	orrs	r3, r1
 800beb0:	6593      	str	r3, [r2, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800beb2:	682b      	ldr	r3, [r5, #0]
 800beb4:	019f      	lsls	r7, r3, #6
 800beb6:	d528      	bpl.n	800bf0a <HAL_RCCEx_PeriphCLKConfig+0x212>
    switch (PeriphClkInit->QspiClockSelection)
 800beb8:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 800beba:	2b20      	cmp	r3, #32
 800bebc:	d03e      	beq.n	800bf3c <HAL_RCCEx_PeriphCLKConfig+0x244>
 800bebe:	d81a      	bhi.n	800bef6 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 800bec0:	b1db      	cbz	r3, 800befa <HAL_RCCEx_PeriphCLKConfig+0x202>
 800bec2:	2b10      	cmp	r3, #16
 800bec4:	d034      	beq.n	800bf30 <HAL_RCCEx_PeriphCLKConfig+0x238>
 800bec6:	2601      	movs	r6, #1
 800bec8:	4634      	mov	r4, r6
 800beca:	e01e      	b.n	800bf0a <HAL_RCCEx_PeriphCLKConfig+0x212>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800becc:	4a20      	ldr	r2, [pc, #128]	@ (800bf50 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800bece:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800bed0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800bed4:	62d3      	str	r3, [r2, #44]	@ 0x2c
        break;
 800bed6:	e7e3      	b.n	800bea0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800bed8:	2100      	movs	r1, #0
 800beda:	f105 0008 	add.w	r0, r5, #8
 800bede:	f7ff fe1b 	bl	800bb18 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800bee2:	4604      	mov	r4, r0
        break;
 800bee4:	e7dc      	b.n	800bea0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800bee6:	2100      	movs	r1, #0
 800bee8:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800beec:	f7ff fe8c 	bl	800bc08 <RCCEx_PLL3_Config>
 800bef0:	e7f7      	b.n	800bee2 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 800bef2:	4626      	mov	r6, r4
 800bef4:	e7dd      	b.n	800beb2 <HAL_RCCEx_PeriphCLKConfig+0x1ba>
    switch (PeriphClkInit->QspiClockSelection)
 800bef6:	2b30      	cmp	r3, #48	@ 0x30
 800bef8:	d1e5      	bne.n	800bec6 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
    if (ret == HAL_OK)
 800befa:	bb34      	cbnz	r4, 800bf4a <HAL_RCCEx_PeriphCLKConfig+0x252>
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800befc:	4a14      	ldr	r2, [pc, #80]	@ (800bf50 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800befe:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 800bf00:	6cd3      	ldr	r3, [r2, #76]	@ 0x4c
 800bf02:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 800bf06:	430b      	orrs	r3, r1
 800bf08:	64d3      	str	r3, [r2, #76]	@ 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800bf0a:	682b      	ldr	r3, [r5, #0]
 800bf0c:	04d8      	lsls	r0, r3, #19
 800bf0e:	d530      	bpl.n	800bf72 <HAL_RCCEx_PeriphCLKConfig+0x27a>
    switch (PeriphClkInit->Spi123ClockSelection)
 800bf10:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800bf12:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800bf16:	f000 8097 	beq.w	800c048 <HAL_RCCEx_PeriphCLKConfig+0x350>
 800bf1a:	d81b      	bhi.n	800bf54 <HAL_RCCEx_PeriphCLKConfig+0x25c>
 800bf1c:	2b00      	cmp	r3, #0
 800bf1e:	f000 8086 	beq.w	800c02e <HAL_RCCEx_PeriphCLKConfig+0x336>
 800bf22:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800bf26:	f000 8088 	beq.w	800c03a <HAL_RCCEx_PeriphCLKConfig+0x342>
 800bf2a:	2601      	movs	r6, #1
 800bf2c:	4634      	mov	r4, r6
 800bf2e:	e020      	b.n	800bf72 <HAL_RCCEx_PeriphCLKConfig+0x27a>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bf30:	4a07      	ldr	r2, [pc, #28]	@ (800bf50 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800bf32:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800bf34:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800bf38:	62d3      	str	r3, [r2, #44]	@ 0x2c
        break;
 800bf3a:	e7de      	b.n	800befa <HAL_RCCEx_PeriphCLKConfig+0x202>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800bf3c:	2102      	movs	r1, #2
 800bf3e:	f105 0008 	add.w	r0, r5, #8
 800bf42:	f7ff fde9 	bl	800bb18 <RCCEx_PLL2_Config>
 800bf46:	4604      	mov	r4, r0
        break;
 800bf48:	e7d7      	b.n	800befa <HAL_RCCEx_PeriphCLKConfig+0x202>
 800bf4a:	4626      	mov	r6, r4
 800bf4c:	e7dd      	b.n	800bf0a <HAL_RCCEx_PeriphCLKConfig+0x212>
 800bf4e:	bf00      	nop
 800bf50:	58024400 	.word	0x58024400
    switch (PeriphClkInit->Spi123ClockSelection)
 800bf54:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800bf58:	d002      	beq.n	800bf60 <HAL_RCCEx_PeriphCLKConfig+0x268>
 800bf5a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800bf5e:	d1e4      	bne.n	800bf2a <HAL_RCCEx_PeriphCLKConfig+0x232>
    if (ret == HAL_OK)
 800bf60:	2c00      	cmp	r4, #0
 800bf62:	d177      	bne.n	800c054 <HAL_RCCEx_PeriphCLKConfig+0x35c>
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800bf64:	4a9e      	ldr	r2, [pc, #632]	@ (800c1e0 <HAL_RCCEx_PeriphCLKConfig+0x4e8>)
 800bf66:	6e69      	ldr	r1, [r5, #100]	@ 0x64
 800bf68:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 800bf6a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800bf6e:	430b      	orrs	r3, r1
 800bf70:	6513      	str	r3, [r2, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800bf72:	682b      	ldr	r3, [r5, #0]
 800bf74:	0499      	lsls	r1, r3, #18
 800bf76:	d50c      	bpl.n	800bf92 <HAL_RCCEx_PeriphCLKConfig+0x29a>
    switch (PeriphClkInit->Spi45ClockSelection)
 800bf78:	6eab      	ldr	r3, [r5, #104]	@ 0x68
 800bf7a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800bf7e:	f000 8083 	beq.w	800c088 <HAL_RCCEx_PeriphCLKConfig+0x390>
 800bf82:	d869      	bhi.n	800c058 <HAL_RCCEx_PeriphCLKConfig+0x360>
 800bf84:	2b00      	cmp	r3, #0
 800bf86:	d06f      	beq.n	800c068 <HAL_RCCEx_PeriphCLKConfig+0x370>
 800bf88:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800bf8c:	d075      	beq.n	800c07a <HAL_RCCEx_PeriphCLKConfig+0x382>
 800bf8e:	2601      	movs	r6, #1
 800bf90:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800bf92:	682b      	ldr	r3, [r5, #0]
 800bf94:	045a      	lsls	r2, r3, #17
 800bf96:	d50e      	bpl.n	800bfb6 <HAL_RCCEx_PeriphCLKConfig+0x2be>
    switch (PeriphClkInit->Spi6ClockSelection)
 800bf98:	f8d5 30b4 	ldr.w	r3, [r5, #180]	@ 0xb4
 800bf9c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800bfa0:	f000 8093 	beq.w	800c0ca <HAL_RCCEx_PeriphCLKConfig+0x3d2>
 800bfa4:	d878      	bhi.n	800c098 <HAL_RCCEx_PeriphCLKConfig+0x3a0>
 800bfa6:	2b00      	cmp	r3, #0
 800bfa8:	d07e      	beq.n	800c0a8 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
 800bfaa:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800bfae:	f000 8085 	beq.w	800c0bc <HAL_RCCEx_PeriphCLKConfig+0x3c4>
 800bfb2:	2601      	movs	r6, #1
 800bfb4:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 800bfb6:	682b      	ldr	r3, [r5, #0]
 800bfb8:	015b      	lsls	r3, r3, #5
 800bfba:	d515      	bpl.n	800bfe8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    switch (PeriphClkInit->DsiClockSelection)
 800bfbc:	6d2b      	ldr	r3, [r5, #80]	@ 0x50
 800bfbe:	b14b      	cbz	r3, 800bfd4 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
 800bfc0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800bfc4:	f040 8089 	bne.w	800c0da <HAL_RCCEx_PeriphCLKConfig+0x3e2>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800bfc8:	2101      	movs	r1, #1
 800bfca:	f105 0008 	add.w	r0, r5, #8
 800bfce:	f7ff fda3 	bl	800bb18 <RCCEx_PLL2_Config>
 800bfd2:	4604      	mov	r4, r0
    if (ret == HAL_OK)
 800bfd4:	2c00      	cmp	r4, #0
 800bfd6:	f040 8083 	bne.w	800c0e0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
      __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 800bfda:	4a81      	ldr	r2, [pc, #516]	@ (800c1e0 <HAL_RCCEx_PeriphCLKConfig+0x4e8>)
 800bfdc:	6d29      	ldr	r1, [r5, #80]	@ 0x50
 800bfde:	6cd3      	ldr	r3, [r2, #76]	@ 0x4c
 800bfe0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800bfe4:	430b      	orrs	r3, r1
 800bfe6:	64d3      	str	r3, [r2, #76]	@ 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800bfe8:	682b      	ldr	r3, [r5, #0]
 800bfea:	041f      	lsls	r7, r3, #16
 800bfec:	d511      	bpl.n	800c012 <HAL_RCCEx_PeriphCLKConfig+0x31a>
    switch (PeriphClkInit->FdcanClockSelection)
 800bfee:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 800bff0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800bff4:	d076      	beq.n	800c0e4 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 800bff6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800bffa:	d079      	beq.n	800c0f0 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800bffc:	2b00      	cmp	r3, #0
 800bffe:	d17e      	bne.n	800c0fe <HAL_RCCEx_PeriphCLKConfig+0x406>
    if (ret == HAL_OK)
 800c000:	2c00      	cmp	r4, #0
 800c002:	d17f      	bne.n	800c104 <HAL_RCCEx_PeriphCLKConfig+0x40c>
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800c004:	4a76      	ldr	r2, [pc, #472]	@ (800c1e0 <HAL_RCCEx_PeriphCLKConfig+0x4e8>)
 800c006:	6f69      	ldr	r1, [r5, #116]	@ 0x74
 800c008:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 800c00a:	f023 5340 	bic.w	r3, r3, #805306368	@ 0x30000000
 800c00e:	430b      	orrs	r3, r1
 800c010:	6513      	str	r3, [r2, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800c012:	682b      	ldr	r3, [r5, #0]
 800c014:	01d8      	lsls	r0, r3, #7
 800c016:	f140 8085 	bpl.w	800c124 <HAL_RCCEx_PeriphCLKConfig+0x42c>
    switch (PeriphClkInit->FmcClockSelection)
 800c01a:	6cab      	ldr	r3, [r5, #72]	@ 0x48
 800c01c:	2b03      	cmp	r3, #3
 800c01e:	f200 80e5 	bhi.w	800c1ec <HAL_RCCEx_PeriphCLKConfig+0x4f4>
 800c022:	e8df f013 	tbh	[pc, r3, lsl #1]
 800c026:	0076      	.short	0x0076
 800c028:	00d50071 	.word	0x00d50071
 800c02c:	0076      	.short	0x0076
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c02e:	4a6c      	ldr	r2, [pc, #432]	@ (800c1e0 <HAL_RCCEx_PeriphCLKConfig+0x4e8>)
 800c030:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800c032:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800c036:	62d3      	str	r3, [r2, #44]	@ 0x2c
        break;
 800c038:	e792      	b.n	800bf60 <HAL_RCCEx_PeriphCLKConfig+0x268>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c03a:	2100      	movs	r1, #0
 800c03c:	f105 0008 	add.w	r0, r5, #8
 800c040:	f7ff fd6a 	bl	800bb18 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800c044:	4604      	mov	r4, r0
        break;
 800c046:	e78b      	b.n	800bf60 <HAL_RCCEx_PeriphCLKConfig+0x268>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800c048:	2100      	movs	r1, #0
 800c04a:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800c04e:	f7ff fddb 	bl	800bc08 <RCCEx_PLL3_Config>
 800c052:	e7f7      	b.n	800c044 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 800c054:	4626      	mov	r6, r4
 800c056:	e78c      	b.n	800bf72 <HAL_RCCEx_PeriphCLKConfig+0x27a>
    switch (PeriphClkInit->Spi45ClockSelection)
 800c058:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800c05c:	f5b2 2f80 	cmp.w	r2, #262144	@ 0x40000
 800c060:	d002      	beq.n	800c068 <HAL_RCCEx_PeriphCLKConfig+0x370>
 800c062:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800c066:	d192      	bne.n	800bf8e <HAL_RCCEx_PeriphCLKConfig+0x296>
    if (ret == HAL_OK)
 800c068:	b9a4      	cbnz	r4, 800c094 <HAL_RCCEx_PeriphCLKConfig+0x39c>
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800c06a:	4a5d      	ldr	r2, [pc, #372]	@ (800c1e0 <HAL_RCCEx_PeriphCLKConfig+0x4e8>)
 800c06c:	6ea9      	ldr	r1, [r5, #104]	@ 0x68
 800c06e:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 800c070:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 800c074:	430b      	orrs	r3, r1
 800c076:	6513      	str	r3, [r2, #80]	@ 0x50
 800c078:	e78b      	b.n	800bf92 <HAL_RCCEx_PeriphCLKConfig+0x29a>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800c07a:	2101      	movs	r1, #1
 800c07c:	f105 0008 	add.w	r0, r5, #8
 800c080:	f7ff fd4a 	bl	800bb18 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800c084:	4604      	mov	r4, r0
        break;
 800c086:	e7ef      	b.n	800c068 <HAL_RCCEx_PeriphCLKConfig+0x370>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800c088:	2101      	movs	r1, #1
 800c08a:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800c08e:	f7ff fdbb 	bl	800bc08 <RCCEx_PLL3_Config>
 800c092:	e7f7      	b.n	800c084 <HAL_RCCEx_PeriphCLKConfig+0x38c>
 800c094:	4626      	mov	r6, r4
 800c096:	e77c      	b.n	800bf92 <HAL_RCCEx_PeriphCLKConfig+0x29a>
    switch (PeriphClkInit->Spi6ClockSelection)
 800c098:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800c09c:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 800c0a0:	d002      	beq.n	800c0a8 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
 800c0a2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800c0a6:	d184      	bne.n	800bfb2 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
    if (ret == HAL_OK)
 800c0a8:	b9ac      	cbnz	r4, 800c0d6 <HAL_RCCEx_PeriphCLKConfig+0x3de>
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800c0aa:	4a4d      	ldr	r2, [pc, #308]	@ (800c1e0 <HAL_RCCEx_PeriphCLKConfig+0x4e8>)
 800c0ac:	f8d5 10b4 	ldr.w	r1, [r5, #180]	@ 0xb4
 800c0b0:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 800c0b2:	f023 43e0 	bic.w	r3, r3, #1879048192	@ 0x70000000
 800c0b6:	430b      	orrs	r3, r1
 800c0b8:	6593      	str	r3, [r2, #88]	@ 0x58
 800c0ba:	e77c      	b.n	800bfb6 <HAL_RCCEx_PeriphCLKConfig+0x2be>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800c0bc:	2101      	movs	r1, #1
 800c0be:	f105 0008 	add.w	r0, r5, #8
 800c0c2:	f7ff fd29 	bl	800bb18 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800c0c6:	4604      	mov	r4, r0
        break;
 800c0c8:	e7ee      	b.n	800c0a8 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800c0ca:	2101      	movs	r1, #1
 800c0cc:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800c0d0:	f7ff fd9a 	bl	800bc08 <RCCEx_PLL3_Config>
 800c0d4:	e7f7      	b.n	800c0c6 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 800c0d6:	4626      	mov	r6, r4
 800c0d8:	e76d      	b.n	800bfb6 <HAL_RCCEx_PeriphCLKConfig+0x2be>
    switch (PeriphClkInit->DsiClockSelection)
 800c0da:	2601      	movs	r6, #1
 800c0dc:	4634      	mov	r4, r6
 800c0de:	e783      	b.n	800bfe8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
 800c0e0:	4626      	mov	r6, r4
 800c0e2:	e781      	b.n	800bfe8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c0e4:	4a3e      	ldr	r2, [pc, #248]	@ (800c1e0 <HAL_RCCEx_PeriphCLKConfig+0x4e8>)
 800c0e6:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800c0e8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800c0ec:	62d3      	str	r3, [r2, #44]	@ 0x2c
        break;
 800c0ee:	e787      	b.n	800c000 <HAL_RCCEx_PeriphCLKConfig+0x308>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800c0f0:	2101      	movs	r1, #1
 800c0f2:	f105 0008 	add.w	r0, r5, #8
 800c0f6:	f7ff fd0f 	bl	800bb18 <RCCEx_PLL2_Config>
 800c0fa:	4604      	mov	r4, r0
        break;
 800c0fc:	e780      	b.n	800c000 <HAL_RCCEx_PeriphCLKConfig+0x308>
    switch (PeriphClkInit->FdcanClockSelection)
 800c0fe:	2601      	movs	r6, #1
 800c100:	4634      	mov	r4, r6
 800c102:	e786      	b.n	800c012 <HAL_RCCEx_PeriphCLKConfig+0x31a>
 800c104:	4626      	mov	r6, r4
 800c106:	e784      	b.n	800c012 <HAL_RCCEx_PeriphCLKConfig+0x31a>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c108:	4a35      	ldr	r2, [pc, #212]	@ (800c1e0 <HAL_RCCEx_PeriphCLKConfig+0x4e8>)
 800c10a:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800c10c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800c110:	62d3      	str	r3, [r2, #44]	@ 0x2c
    if (ret == HAL_OK)
 800c112:	2c00      	cmp	r4, #0
 800c114:	d16d      	bne.n	800c1f2 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800c116:	4a32      	ldr	r2, [pc, #200]	@ (800c1e0 <HAL_RCCEx_PeriphCLKConfig+0x4e8>)
 800c118:	6ca9      	ldr	r1, [r5, #72]	@ 0x48
 800c11a:	6cd3      	ldr	r3, [r2, #76]	@ 0x4c
 800c11c:	f023 0303 	bic.w	r3, r3, #3
 800c120:	430b      	orrs	r3, r1
 800c122:	64d3      	str	r3, [r2, #76]	@ 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800c124:	682b      	ldr	r3, [r5, #0]
 800c126:	0259      	lsls	r1, r3, #9
 800c128:	d539      	bpl.n	800c19e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800c12a:	4f2e      	ldr	r7, [pc, #184]	@ (800c1e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800c12c:	683b      	ldr	r3, [r7, #0]
 800c12e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800c132:	603b      	str	r3, [r7, #0]
    tickstart = HAL_GetTick();
 800c134:	f7fb fe0e 	bl	8007d54 <HAL_GetTick>
 800c138:	4680      	mov	r8, r0
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800c13a:	683b      	ldr	r3, [r7, #0]
 800c13c:	05da      	lsls	r2, r3, #23
 800c13e:	d55a      	bpl.n	800c1f6 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    if (ret == HAL_OK)
 800c140:	2c00      	cmp	r4, #0
 800c142:	d176      	bne.n	800c232 <HAL_RCCEx_PeriphCLKConfig+0x53a>
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800c144:	4b26      	ldr	r3, [pc, #152]	@ (800c1e0 <HAL_RCCEx_PeriphCLKConfig+0x4e8>)
 800c146:	f8d5 00b8 	ldr.w	r0, [r5, #184]	@ 0xb8
 800c14a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800c14c:	4042      	eors	r2, r0
 800c14e:	f412 7f40 	tst.w	r2, #768	@ 0x300
 800c152:	d00b      	beq.n	800c16c <HAL_RCCEx_PeriphCLKConfig+0x474>
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800c154:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_FORCE();
 800c156:	6f19      	ldr	r1, [r3, #112]	@ 0x70
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800c158:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
        __HAL_RCC_BACKUPRESET_FORCE();
 800c15c:	f441 3180 	orr.w	r1, r1, #65536	@ 0x10000
 800c160:	6719      	str	r1, [r3, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800c162:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800c164:	f421 3180 	bic.w	r1, r1, #65536	@ 0x10000
 800c168:	6719      	str	r1, [r3, #112]	@ 0x70
        RCC->BDCR = tmpreg;
 800c16a:	671a      	str	r2, [r3, #112]	@ 0x70
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800c16c:	f5b0 7f80 	cmp.w	r0, #256	@ 0x100
 800c170:	d04a      	beq.n	800c208 <HAL_RCCEx_PeriphCLKConfig+0x510>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800c172:	f8d5 30b8 	ldr.w	r3, [r5, #184]	@ 0xb8
 800c176:	491a      	ldr	r1, [pc, #104]	@ (800c1e0 <HAL_RCCEx_PeriphCLKConfig+0x4e8>)
 800c178:	f403 7240 	and.w	r2, r3, #768	@ 0x300
 800c17c:	f5b2 7f40 	cmp.w	r2, #768	@ 0x300
 800c180:	d153      	bne.n	800c22a <HAL_RCCEx_PeriphCLKConfig+0x532>
 800c182:	6908      	ldr	r0, [r1, #16]
 800c184:	4a18      	ldr	r2, [pc, #96]	@ (800c1e8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>)
 800c186:	f420 507c 	bic.w	r0, r0, #16128	@ 0x3f00
 800c18a:	ea02 1213 	and.w	r2, r2, r3, lsr #4
 800c18e:	4302      	orrs	r2, r0
 800c190:	610a      	str	r2, [r1, #16]
 800c192:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c196:	4a12      	ldr	r2, [pc, #72]	@ (800c1e0 <HAL_RCCEx_PeriphCLKConfig+0x4e8>)
 800c198:	6f11      	ldr	r1, [r2, #112]	@ 0x70
 800c19a:	430b      	orrs	r3, r1
 800c19c:	6713      	str	r3, [r2, #112]	@ 0x70
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800c19e:	682b      	ldr	r3, [r5, #0]
 800c1a0:	07d8      	lsls	r0, r3, #31
 800c1a2:	d50a      	bpl.n	800c1ba <HAL_RCCEx_PeriphCLKConfig+0x4c2>
    switch (PeriphClkInit->Usart16ClockSelection)
 800c1a4:	f8d5 3080 	ldr.w	r3, [r5, #128]	@ 0x80
 800c1a8:	2b10      	cmp	r3, #16
 800c1aa:	d05b      	beq.n	800c264 <HAL_RCCEx_PeriphCLKConfig+0x56c>
 800c1ac:	d843      	bhi.n	800c236 <HAL_RCCEx_PeriphCLKConfig+0x53e>
 800c1ae:	2b00      	cmp	r3, #0
 800c1b0:	d047      	beq.n	800c242 <HAL_RCCEx_PeriphCLKConfig+0x54a>
 800c1b2:	2b08      	cmp	r3, #8
 800c1b4:	d04f      	beq.n	800c256 <HAL_RCCEx_PeriphCLKConfig+0x55e>
 800c1b6:	2601      	movs	r6, #1
 800c1b8:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800c1ba:	682b      	ldr	r3, [r5, #0]
 800c1bc:	0799      	lsls	r1, r3, #30
 800c1be:	d567      	bpl.n	800c290 <HAL_RCCEx_PeriphCLKConfig+0x598>
    switch (PeriphClkInit->Usart234578ClockSelection)
 800c1c0:	6feb      	ldr	r3, [r5, #124]	@ 0x7c
 800c1c2:	2b05      	cmp	r3, #5
 800c1c4:	d87a      	bhi.n	800c2bc <HAL_RCCEx_PeriphCLKConfig+0x5c4>
 800c1c6:	e8df f003 	tbb	[pc, r3]
 800c1ca:	555b      	.short	0x555b
 800c1cc:	5b5b5b73 	.word	0x5b5b5b73
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800c1d0:	2102      	movs	r1, #2
 800c1d2:	f105 0008 	add.w	r0, r5, #8
 800c1d6:	f7ff fc9f 	bl	800bb18 <RCCEx_PLL2_Config>
 800c1da:	4604      	mov	r4, r0
        break;
 800c1dc:	e799      	b.n	800c112 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800c1de:	bf00      	nop
 800c1e0:	58024400 	.word	0x58024400
 800c1e4:	58024800 	.word	0x58024800
 800c1e8:	00ffffcf 	.word	0x00ffffcf
    switch (PeriphClkInit->FmcClockSelection)
 800c1ec:	2601      	movs	r6, #1
 800c1ee:	4634      	mov	r4, r6
 800c1f0:	e798      	b.n	800c124 <HAL_RCCEx_PeriphCLKConfig+0x42c>
 800c1f2:	4626      	mov	r6, r4
 800c1f4:	e796      	b.n	800c124 <HAL_RCCEx_PeriphCLKConfig+0x42c>
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800c1f6:	f7fb fdad 	bl	8007d54 <HAL_GetTick>
 800c1fa:	eba0 0008 	sub.w	r0, r0, r8
 800c1fe:	2864      	cmp	r0, #100	@ 0x64
 800c200:	d99b      	bls.n	800c13a <HAL_RCCEx_PeriphCLKConfig+0x442>
        ret = HAL_TIMEOUT;
 800c202:	2603      	movs	r6, #3
 800c204:	4634      	mov	r4, r6
 800c206:	e7ca      	b.n	800c19e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
        tickstart = HAL_GetTick();
 800c208:	f7fb fda4 	bl	8007d54 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800c20c:	f8df 80b8 	ldr.w	r8, [pc, #184]	@ 800c2c8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
        tickstart = HAL_GetTick();
 800c210:	4607      	mov	r7, r0
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c212:	f241 3988 	movw	r9, #5000	@ 0x1388
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800c216:	f8d8 3070 	ldr.w	r3, [r8, #112]	@ 0x70
 800c21a:	079b      	lsls	r3, r3, #30
 800c21c:	d4a9      	bmi.n	800c172 <HAL_RCCEx_PeriphCLKConfig+0x47a>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c21e:	f7fb fd99 	bl	8007d54 <HAL_GetTick>
 800c222:	1bc0      	subs	r0, r0, r7
 800c224:	4548      	cmp	r0, r9
 800c226:	d9f6      	bls.n	800c216 <HAL_RCCEx_PeriphCLKConfig+0x51e>
 800c228:	e7eb      	b.n	800c202 <HAL_RCCEx_PeriphCLKConfig+0x50a>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800c22a:	690a      	ldr	r2, [r1, #16]
 800c22c:	f422 527c 	bic.w	r2, r2, #16128	@ 0x3f00
 800c230:	e7ae      	b.n	800c190 <HAL_RCCEx_PeriphCLKConfig+0x498>
 800c232:	4626      	mov	r6, r4
 800c234:	e7b3      	b.n	800c19e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    switch (PeriphClkInit->Usart16ClockSelection)
 800c236:	f023 0208 	bic.w	r2, r3, #8
 800c23a:	2a20      	cmp	r2, #32
 800c23c:	d001      	beq.n	800c242 <HAL_RCCEx_PeriphCLKConfig+0x54a>
 800c23e:	2b18      	cmp	r3, #24
 800c240:	d1b9      	bne.n	800c1b6 <HAL_RCCEx_PeriphCLKConfig+0x4be>
    if (ret == HAL_OK)
 800c242:	b9ac      	cbnz	r4, 800c270 <HAL_RCCEx_PeriphCLKConfig+0x578>
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800c244:	4a20      	ldr	r2, [pc, #128]	@ (800c2c8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800c246:	f8d5 1080 	ldr.w	r1, [r5, #128]	@ 0x80
 800c24a:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 800c24c:	f023 0338 	bic.w	r3, r3, #56	@ 0x38
 800c250:	430b      	orrs	r3, r1
 800c252:	6553      	str	r3, [r2, #84]	@ 0x54
 800c254:	e7b1      	b.n	800c1ba <HAL_RCCEx_PeriphCLKConfig+0x4c2>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800c256:	2101      	movs	r1, #1
 800c258:	f105 0008 	add.w	r0, r5, #8
 800c25c:	f7ff fc5c 	bl	800bb18 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800c260:	4604      	mov	r4, r0
        break;
 800c262:	e7ee      	b.n	800c242 <HAL_RCCEx_PeriphCLKConfig+0x54a>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800c264:	2101      	movs	r1, #1
 800c266:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800c26a:	f7ff fccd 	bl	800bc08 <RCCEx_PLL3_Config>
 800c26e:	e7f7      	b.n	800c260 <HAL_RCCEx_PeriphCLKConfig+0x568>
 800c270:	4626      	mov	r6, r4
 800c272:	e7a2      	b.n	800c1ba <HAL_RCCEx_PeriphCLKConfig+0x4c2>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800c274:	2101      	movs	r1, #1
 800c276:	f105 0008 	add.w	r0, r5, #8
 800c27a:	f7ff fc4d 	bl	800bb18 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800c27e:	4604      	mov	r4, r0
    if (ret == HAL_OK)
 800c280:	b9fc      	cbnz	r4, 800c2c2 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800c282:	4a11      	ldr	r2, [pc, #68]	@ (800c2c8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800c284:	6fe9      	ldr	r1, [r5, #124]	@ 0x7c
 800c286:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 800c288:	f023 0307 	bic.w	r3, r3, #7
 800c28c:	430b      	orrs	r3, r1
 800c28e:	6553      	str	r3, [r2, #84]	@ 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800c290:	682b      	ldr	r3, [r5, #0]
 800c292:	075a      	lsls	r2, r3, #29
 800c294:	d52b      	bpl.n	800c2ee <HAL_RCCEx_PeriphCLKConfig+0x5f6>
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800c296:	f8d5 3098 	ldr.w	r3, [r5, #152]	@ 0x98
 800c29a:	2b05      	cmp	r3, #5
 800c29c:	f200 816e 	bhi.w	800c57c <HAL_RCCEx_PeriphCLKConfig+0x884>
 800c2a0:	e8df f013 	tbh	[pc, r3, lsl #1]
 800c2a4:	0014001a 	.word	0x0014001a
 800c2a8:	001a0166 	.word	0x001a0166
 800c2ac:	001a001a 	.word	0x001a001a
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800c2b0:	2101      	movs	r1, #1
 800c2b2:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800c2b6:	f7ff fca7 	bl	800bc08 <RCCEx_PLL3_Config>
 800c2ba:	e7e0      	b.n	800c27e <HAL_RCCEx_PeriphCLKConfig+0x586>
    switch (PeriphClkInit->Usart234578ClockSelection)
 800c2bc:	2601      	movs	r6, #1
 800c2be:	4634      	mov	r4, r6
 800c2c0:	e7e6      	b.n	800c290 <HAL_RCCEx_PeriphCLKConfig+0x598>
 800c2c2:	4626      	mov	r6, r4
 800c2c4:	e7e4      	b.n	800c290 <HAL_RCCEx_PeriphCLKConfig+0x598>
 800c2c6:	bf00      	nop
 800c2c8:	58024400 	.word	0x58024400
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800c2cc:	2101      	movs	r1, #1
 800c2ce:	f105 0008 	add.w	r0, r5, #8
 800c2d2:	f7ff fc21 	bl	800bb18 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800c2d6:	4604      	mov	r4, r0
    if (ret == HAL_OK)
 800c2d8:	2c00      	cmp	r4, #0
 800c2da:	f040 8152 	bne.w	800c582 <HAL_RCCEx_PeriphCLKConfig+0x88a>
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800c2de:	4aaa      	ldr	r2, [pc, #680]	@ (800c588 <HAL_RCCEx_PeriphCLKConfig+0x890>)
 800c2e0:	f8d5 1098 	ldr.w	r1, [r5, #152]	@ 0x98
 800c2e4:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 800c2e6:	f023 0307 	bic.w	r3, r3, #7
 800c2ea:	430b      	orrs	r3, r1
 800c2ec:	6593      	str	r3, [r2, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800c2ee:	682b      	ldr	r3, [r5, #0]
 800c2f0:	069b      	lsls	r3, r3, #26
 800c2f2:	d510      	bpl.n	800c316 <HAL_RCCEx_PeriphCLKConfig+0x61e>
    switch (PeriphClkInit->Lptim1ClockSelection)
 800c2f4:	f8d5 3094 	ldr.w	r3, [r5, #148]	@ 0x94
 800c2f8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800c2fc:	f000 8160 	beq.w	800c5c0 <HAL_RCCEx_PeriphCLKConfig+0x8c8>
 800c300:	f200 8144 	bhi.w	800c58c <HAL_RCCEx_PeriphCLKConfig+0x894>
 800c304:	2b00      	cmp	r3, #0
 800c306:	f000 814a 	beq.w	800c59e <HAL_RCCEx_PeriphCLKConfig+0x8a6>
 800c30a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c30e:	f000 8150 	beq.w	800c5b2 <HAL_RCCEx_PeriphCLKConfig+0x8ba>
 800c312:	2601      	movs	r6, #1
 800c314:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800c316:	682b      	ldr	r3, [r5, #0]
 800c318:	065f      	lsls	r7, r3, #25
 800c31a:	d510      	bpl.n	800c33e <HAL_RCCEx_PeriphCLKConfig+0x646>
    switch (PeriphClkInit->Lptim2ClockSelection)
 800c31c:	f8d5 30a0 	ldr.w	r3, [r5, #160]	@ 0xa0
 800c320:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800c324:	f000 816e 	beq.w	800c604 <HAL_RCCEx_PeriphCLKConfig+0x90c>
 800c328:	f200 8152 	bhi.w	800c5d0 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
 800c32c:	2b00      	cmp	r3, #0
 800c32e:	f000 8158 	beq.w	800c5e2 <HAL_RCCEx_PeriphCLKConfig+0x8ea>
 800c332:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c336:	f000 815e 	beq.w	800c5f6 <HAL_RCCEx_PeriphCLKConfig+0x8fe>
 800c33a:	2601      	movs	r6, #1
 800c33c:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800c33e:	682b      	ldr	r3, [r5, #0]
 800c340:	0618      	lsls	r0, r3, #24
 800c342:	d510      	bpl.n	800c366 <HAL_RCCEx_PeriphCLKConfig+0x66e>
    switch (PeriphClkInit->Lptim345ClockSelection)
 800c344:	f8d5 30a4 	ldr.w	r3, [r5, #164]	@ 0xa4
 800c348:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800c34c:	f000 817c 	beq.w	800c648 <HAL_RCCEx_PeriphCLKConfig+0x950>
 800c350:	f200 8160 	bhi.w	800c614 <HAL_RCCEx_PeriphCLKConfig+0x91c>
 800c354:	2b00      	cmp	r3, #0
 800c356:	f000 8166 	beq.w	800c626 <HAL_RCCEx_PeriphCLKConfig+0x92e>
 800c35a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c35e:	f000 816c 	beq.w	800c63a <HAL_RCCEx_PeriphCLKConfig+0x942>
 800c362:	2601      	movs	r6, #1
 800c364:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800c366:	682b      	ldr	r3, [r5, #0]
 800c368:	0719      	lsls	r1, r3, #28
 800c36a:	d514      	bpl.n	800c396 <HAL_RCCEx_PeriphCLKConfig+0x69e>
    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800c36c:	f8d5 3088 	ldr.w	r3, [r5, #136]	@ 0x88
 800c370:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c374:	d107      	bne.n	800c386 <HAL_RCCEx_PeriphCLKConfig+0x68e>
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800c376:	2102      	movs	r1, #2
 800c378:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800c37c:	f7ff fc44 	bl	800bc08 <RCCEx_PLL3_Config>
        status = HAL_ERROR;
 800c380:	2800      	cmp	r0, #0
 800c382:	bf18      	it	ne
 800c384:	2601      	movne	r6, #1
    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800c386:	4a80      	ldr	r2, [pc, #512]	@ (800c588 <HAL_RCCEx_PeriphCLKConfig+0x890>)
 800c388:	f8d5 1088 	ldr.w	r1, [r5, #136]	@ 0x88
 800c38c:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 800c38e:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800c392:	430b      	orrs	r3, r1
 800c394:	6553      	str	r3, [r2, #84]	@ 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800c396:	682b      	ldr	r3, [r5, #0]
 800c398:	06da      	lsls	r2, r3, #27
 800c39a:	d514      	bpl.n	800c3c6 <HAL_RCCEx_PeriphCLKConfig+0x6ce>
    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800c39c:	f8d5 309c 	ldr.w	r3, [r5, #156]	@ 0x9c
 800c3a0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c3a4:	d107      	bne.n	800c3b6 <HAL_RCCEx_PeriphCLKConfig+0x6be>
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800c3a6:	2102      	movs	r1, #2
 800c3a8:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800c3ac:	f7ff fc2c 	bl	800bc08 <RCCEx_PLL3_Config>
        status = HAL_ERROR;
 800c3b0:	2800      	cmp	r0, #0
 800c3b2:	bf18      	it	ne
 800c3b4:	2601      	movne	r6, #1
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800c3b6:	4a74      	ldr	r2, [pc, #464]	@ (800c588 <HAL_RCCEx_PeriphCLKConfig+0x890>)
 800c3b8:	f8d5 109c 	ldr.w	r1, [r5, #156]	@ 0x9c
 800c3bc:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 800c3be:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800c3c2:	430b      	orrs	r3, r1
 800c3c4:	6593      	str	r3, [r2, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800c3c6:	682b      	ldr	r3, [r5, #0]
 800c3c8:	031b      	lsls	r3, r3, #12
 800c3ca:	d51b      	bpl.n	800c404 <HAL_RCCEx_PeriphCLKConfig+0x70c>
    switch (PeriphClkInit->AdcClockSelection)
 800c3cc:	f8d5 10a8 	ldr.w	r1, [r5, #168]	@ 0xa8
 800c3d0:	f5b1 3f80 	cmp.w	r1, #65536	@ 0x10000
 800c3d4:	f000 8140 	beq.w	800c658 <HAL_RCCEx_PeriphCLKConfig+0x960>
 800c3d8:	f5b1 3f00 	cmp.w	r1, #131072	@ 0x20000
 800c3dc:	d007      	beq.n	800c3ee <HAL_RCCEx_PeriphCLKConfig+0x6f6>
 800c3de:	2900      	cmp	r1, #0
 800c3e0:	f040 8140 	bne.w	800c664 <HAL_RCCEx_PeriphCLKConfig+0x96c>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c3e4:	f105 0008 	add.w	r0, r5, #8
 800c3e8:	f7ff fb96 	bl	800bb18 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c3ec:	4604      	mov	r4, r0
    if (ret == HAL_OK)
 800c3ee:	2c00      	cmp	r4, #0
 800c3f0:	f040 813b 	bne.w	800c66a <HAL_RCCEx_PeriphCLKConfig+0x972>
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800c3f4:	4a64      	ldr	r2, [pc, #400]	@ (800c588 <HAL_RCCEx_PeriphCLKConfig+0x890>)
 800c3f6:	f8d5 10a8 	ldr.w	r1, [r5, #168]	@ 0xa8
 800c3fa:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 800c3fc:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 800c400:	430b      	orrs	r3, r1
 800c402:	6593      	str	r3, [r2, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800c404:	682b      	ldr	r3, [r5, #0]
 800c406:	035f      	lsls	r7, r3, #13
 800c408:	d50f      	bpl.n	800c42a <HAL_RCCEx_PeriphCLKConfig+0x732>
    switch (PeriphClkInit->UsbClockSelection)
 800c40a:	f8d5 308c 	ldr.w	r3, [r5, #140]	@ 0x8c
 800c40e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800c412:	f000 813b 	beq.w	800c68c <HAL_RCCEx_PeriphCLKConfig+0x994>
 800c416:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800c41a:	f000 812d 	beq.w	800c678 <HAL_RCCEx_PeriphCLKConfig+0x980>
 800c41e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800c422:	f000 8124 	beq.w	800c66e <HAL_RCCEx_PeriphCLKConfig+0x976>
 800c426:	2601      	movs	r6, #1
 800c428:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800c42a:	682b      	ldr	r3, [r5, #0]
 800c42c:	03d8      	lsls	r0, r3, #15
 800c42e:	d509      	bpl.n	800c444 <HAL_RCCEx_PeriphCLKConfig+0x74c>
    switch (PeriphClkInit->SdmmcClockSelection)
 800c430:	6d6b      	ldr	r3, [r5, #84]	@ 0x54
 800c432:	2b00      	cmp	r3, #0
 800c434:	f000 8133 	beq.w	800c69e <HAL_RCCEx_PeriphCLKConfig+0x9a6>
 800c438:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c43c:	f000 813d 	beq.w	800c6ba <HAL_RCCEx_PeriphCLKConfig+0x9c2>
 800c440:	2601      	movs	r6, #1
 800c442:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800c444:	682b      	ldr	r3, [r5, #0]
 800c446:	0099      	lsls	r1, r3, #2
 800c448:	d507      	bpl.n	800c45a <HAL_RCCEx_PeriphCLKConfig+0x762>
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800c44a:	2102      	movs	r1, #2
 800c44c:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800c450:	f7ff fbda 	bl	800bc08 <RCCEx_PLL3_Config>
      status = HAL_ERROR;
 800c454:	2800      	cmp	r0, #0
 800c456:	bf18      	it	ne
 800c458:	2601      	movne	r6, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800c45a:	e9d5 3100 	ldrd	r3, r1, [r5]
 800c45e:	039a      	lsls	r2, r3, #14
 800c460:	f140 8143 	bpl.w	800c6ea <HAL_RCCEx_PeriphCLKConfig+0x9f2>
    switch (PeriphClkInit->RngClockSelection)
 800c464:	f8d5 0084 	ldr.w	r0, [r5, #132]	@ 0x84
 800c468:	f5b0 7f80 	cmp.w	r0, #256	@ 0x100
 800c46c:	f000 813f 	beq.w	800c6ee <HAL_RCCEx_PeriphCLKConfig+0x9f6>
 800c470:	f200 812c 	bhi.w	800c6cc <HAL_RCCEx_PeriphCLKConfig+0x9d4>
 800c474:	2800      	cmp	r0, #0
 800c476:	f000 812f 	beq.w	800c6d8 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
 800c47a:	2401      	movs	r4, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800c47c:	02df      	lsls	r7, r3, #11
 800c47e:	d506      	bpl.n	800c48e <HAL_RCCEx_PeriphCLKConfig+0x796>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800c480:	4841      	ldr	r0, [pc, #260]	@ (800c588 <HAL_RCCEx_PeriphCLKConfig+0x890>)
 800c482:	6fae      	ldr	r6, [r5, #120]	@ 0x78
 800c484:	6d02      	ldr	r2, [r0, #80]	@ 0x50
 800c486:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800c48a:	4332      	orrs	r2, r6
 800c48c:	6502      	str	r2, [r0, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800c48e:	00de      	lsls	r6, r3, #3
 800c490:	d507      	bpl.n	800c4a2 <HAL_RCCEx_PeriphCLKConfig+0x7aa>
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800c492:	483d      	ldr	r0, [pc, #244]	@ (800c588 <HAL_RCCEx_PeriphCLKConfig+0x890>)
 800c494:	f8d5 60bc 	ldr.w	r6, [r5, #188]	@ 0xbc
 800c498:	6902      	ldr	r2, [r0, #16]
 800c49a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800c49e:	4332      	orrs	r2, r6
 800c4a0:	6102      	str	r2, [r0, #16]
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800c4a2:	0298      	lsls	r0, r3, #10
 800c4a4:	d506      	bpl.n	800c4b4 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800c4a6:	4838      	ldr	r0, [pc, #224]	@ (800c588 <HAL_RCCEx_PeriphCLKConfig+0x890>)
 800c4a8:	6f2e      	ldr	r6, [r5, #112]	@ 0x70
 800c4aa:	6d02      	ldr	r2, [r0, #80]	@ 0x50
 800c4ac:	f022 7280 	bic.w	r2, r2, #16777216	@ 0x1000000
 800c4b0:	4332      	orrs	r2, r6
 800c4b2:	6502      	str	r2, [r0, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800c4b4:	005a      	lsls	r2, r3, #1
 800c4b6:	d509      	bpl.n	800c4cc <HAL_RCCEx_PeriphCLKConfig+0x7d4>
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800c4b8:	4a33      	ldr	r2, [pc, #204]	@ (800c588 <HAL_RCCEx_PeriphCLKConfig+0x890>)
 800c4ba:	6910      	ldr	r0, [r2, #16]
 800c4bc:	f420 4000 	bic.w	r0, r0, #32768	@ 0x8000
 800c4c0:	6110      	str	r0, [r2, #16]
 800c4c2:	6910      	ldr	r0, [r2, #16]
 800c4c4:	f8d5 60c0 	ldr.w	r6, [r5, #192]	@ 0xc0
 800c4c8:	4330      	orrs	r0, r6
 800c4ca:	6110      	str	r0, [r2, #16]
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800c4cc:	2b00      	cmp	r3, #0
 800c4ce:	da06      	bge.n	800c4de <HAL_RCCEx_PeriphCLKConfig+0x7e6>
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800c4d0:	482d      	ldr	r0, [pc, #180]	@ (800c588 <HAL_RCCEx_PeriphCLKConfig+0x890>)
 800c4d2:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 800c4d4:	6cc2      	ldr	r2, [r0, #76]	@ 0x4c
 800c4d6:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800c4da:	4332      	orrs	r2, r6
 800c4dc:	64c2      	str	r2, [r0, #76]	@ 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800c4de:	021f      	lsls	r7, r3, #8
 800c4e0:	d507      	bpl.n	800c4f2 <HAL_RCCEx_PeriphCLKConfig+0x7fa>
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800c4e2:	4a29      	ldr	r2, [pc, #164]	@ (800c588 <HAL_RCCEx_PeriphCLKConfig+0x890>)
 800c4e4:	f8d5 0090 	ldr.w	r0, [r5, #144]	@ 0x90
 800c4e8:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 800c4ea:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 800c4ee:	4303      	orrs	r3, r0
 800c4f0:	6553      	str	r3, [r2, #84]	@ 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800c4f2:	07ce      	lsls	r6, r1, #31
 800c4f4:	d506      	bpl.n	800c504 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c4f6:	2100      	movs	r1, #0
 800c4f8:	f105 0008 	add.w	r0, r5, #8
 800c4fc:	f7ff fb0c 	bl	800bb18 <RCCEx_PLL2_Config>
    if (ret == HAL_OK)
 800c500:	4607      	mov	r7, r0
 800c502:	b900      	cbnz	r0, 800c506 <HAL_RCCEx_PeriphCLKConfig+0x80e>
    switch (PeriphClkInit->RngClockSelection)
 800c504:	4627      	mov	r7, r4
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800c506:	686b      	ldr	r3, [r5, #4]
 800c508:	079c      	lsls	r4, r3, #30
 800c50a:	d506      	bpl.n	800c51a <HAL_RCCEx_PeriphCLKConfig+0x822>
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800c50c:	2101      	movs	r1, #1
 800c50e:	f105 0008 	add.w	r0, r5, #8
 800c512:	f7ff fb01 	bl	800bb18 <RCCEx_PLL2_Config>
    if (ret == HAL_OK)
 800c516:	4606      	mov	r6, r0
 800c518:	b900      	cbnz	r0, 800c51c <HAL_RCCEx_PeriphCLKConfig+0x824>
    switch (PeriphClkInit->RngClockSelection)
 800c51a:	463e      	mov	r6, r7
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800c51c:	686b      	ldr	r3, [r5, #4]
 800c51e:	0758      	lsls	r0, r3, #29
 800c520:	d506      	bpl.n	800c530 <HAL_RCCEx_PeriphCLKConfig+0x838>
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800c522:	2102      	movs	r1, #2
 800c524:	f105 0008 	add.w	r0, r5, #8
 800c528:	f7ff faf6 	bl	800bb18 <RCCEx_PLL2_Config>
    if (ret == HAL_OK)
 800c52c:	4604      	mov	r4, r0
 800c52e:	b900      	cbnz	r0, 800c532 <HAL_RCCEx_PeriphCLKConfig+0x83a>
    switch (PeriphClkInit->RngClockSelection)
 800c530:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800c532:	686b      	ldr	r3, [r5, #4]
 800c534:	0719      	lsls	r1, r3, #28
 800c536:	d506      	bpl.n	800c546 <HAL_RCCEx_PeriphCLKConfig+0x84e>
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800c538:	2100      	movs	r1, #0
 800c53a:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800c53e:	f7ff fb63 	bl	800bc08 <RCCEx_PLL3_Config>
    if (ret == HAL_OK)
 800c542:	4606      	mov	r6, r0
 800c544:	b900      	cbnz	r0, 800c548 <HAL_RCCEx_PeriphCLKConfig+0x850>
    switch (PeriphClkInit->RngClockSelection)
 800c546:	4626      	mov	r6, r4
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800c548:	686b      	ldr	r3, [r5, #4]
 800c54a:	06da      	lsls	r2, r3, #27
 800c54c:	d506      	bpl.n	800c55c <HAL_RCCEx_PeriphCLKConfig+0x864>
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800c54e:	2101      	movs	r1, #1
 800c550:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800c554:	f7ff fb58 	bl	800bc08 <RCCEx_PLL3_Config>
    if (ret == HAL_OK)
 800c558:	4604      	mov	r4, r0
 800c55a:	b900      	cbnz	r0, 800c55e <HAL_RCCEx_PeriphCLKConfig+0x866>
    switch (PeriphClkInit->RngClockSelection)
 800c55c:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800c55e:	686b      	ldr	r3, [r5, #4]
 800c560:	069b      	lsls	r3, r3, #26
 800c562:	f100 80ca 	bmi.w	800c6fa <HAL_RCCEx_PeriphCLKConfig+0xa02>
  if (status == HAL_OK)
 800c566:	1e20      	subs	r0, r4, #0
 800c568:	bf18      	it	ne
 800c56a:	2001      	movne	r0, #1
}
 800c56c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800c570:	2101      	movs	r1, #1
 800c572:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800c576:	f7ff fb47 	bl	800bc08 <RCCEx_PLL3_Config>
 800c57a:	e6ac      	b.n	800c2d6 <HAL_RCCEx_PeriphCLKConfig+0x5de>
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800c57c:	2601      	movs	r6, #1
 800c57e:	4634      	mov	r4, r6
 800c580:	e6b5      	b.n	800c2ee <HAL_RCCEx_PeriphCLKConfig+0x5f6>
 800c582:	4626      	mov	r6, r4
 800c584:	e6b3      	b.n	800c2ee <HAL_RCCEx_PeriphCLKConfig+0x5f6>
 800c586:	bf00      	nop
 800c588:	58024400 	.word	0x58024400
    switch (PeriphClkInit->Lptim1ClockSelection)
 800c58c:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800c590:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 800c594:	d003      	beq.n	800c59e <HAL_RCCEx_PeriphCLKConfig+0x8a6>
 800c596:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800c59a:	f47f aeba 	bne.w	800c312 <HAL_RCCEx_PeriphCLKConfig+0x61a>
    if (ret == HAL_OK)
 800c59e:	b9ac      	cbnz	r4, 800c5cc <HAL_RCCEx_PeriphCLKConfig+0x8d4>
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800c5a0:	4a5b      	ldr	r2, [pc, #364]	@ (800c710 <HAL_RCCEx_PeriphCLKConfig+0xa18>)
 800c5a2:	f8d5 1094 	ldr.w	r1, [r5, #148]	@ 0x94
 800c5a6:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 800c5a8:	f023 43e0 	bic.w	r3, r3, #1879048192	@ 0x70000000
 800c5ac:	430b      	orrs	r3, r1
 800c5ae:	6553      	str	r3, [r2, #84]	@ 0x54
 800c5b0:	e6b1      	b.n	800c316 <HAL_RCCEx_PeriphCLKConfig+0x61e>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c5b2:	2100      	movs	r1, #0
 800c5b4:	f105 0008 	add.w	r0, r5, #8
 800c5b8:	f7ff faae 	bl	800bb18 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c5bc:	4604      	mov	r4, r0
        break;
 800c5be:	e7ee      	b.n	800c59e <HAL_RCCEx_PeriphCLKConfig+0x8a6>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c5c0:	2102      	movs	r1, #2
 800c5c2:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800c5c6:	f7ff fb1f 	bl	800bc08 <RCCEx_PLL3_Config>
 800c5ca:	e7f7      	b.n	800c5bc <HAL_RCCEx_PeriphCLKConfig+0x8c4>
 800c5cc:	4626      	mov	r6, r4
 800c5ce:	e6a2      	b.n	800c316 <HAL_RCCEx_PeriphCLKConfig+0x61e>
    switch (PeriphClkInit->Lptim2ClockSelection)
 800c5d0:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800c5d4:	f5b2 5f80 	cmp.w	r2, #4096	@ 0x1000
 800c5d8:	d003      	beq.n	800c5e2 <HAL_RCCEx_PeriphCLKConfig+0x8ea>
 800c5da:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800c5de:	f47f aeac 	bne.w	800c33a <HAL_RCCEx_PeriphCLKConfig+0x642>
    if (ret == HAL_OK)
 800c5e2:	b9ac      	cbnz	r4, 800c610 <HAL_RCCEx_PeriphCLKConfig+0x918>
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800c5e4:	4a4a      	ldr	r2, [pc, #296]	@ (800c710 <HAL_RCCEx_PeriphCLKConfig+0xa18>)
 800c5e6:	f8d5 10a0 	ldr.w	r1, [r5, #160]	@ 0xa0
 800c5ea:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 800c5ec:	f423 53e0 	bic.w	r3, r3, #7168	@ 0x1c00
 800c5f0:	430b      	orrs	r3, r1
 800c5f2:	6593      	str	r3, [r2, #88]	@ 0x58
 800c5f4:	e6a3      	b.n	800c33e <HAL_RCCEx_PeriphCLKConfig+0x646>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c5f6:	2100      	movs	r1, #0
 800c5f8:	f105 0008 	add.w	r0, r5, #8
 800c5fc:	f7ff fa8c 	bl	800bb18 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c600:	4604      	mov	r4, r0
        break;
 800c602:	e7ee      	b.n	800c5e2 <HAL_RCCEx_PeriphCLKConfig+0x8ea>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c604:	2102      	movs	r1, #2
 800c606:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800c60a:	f7ff fafd 	bl	800bc08 <RCCEx_PLL3_Config>
 800c60e:	e7f7      	b.n	800c600 <HAL_RCCEx_PeriphCLKConfig+0x908>
 800c610:	4626      	mov	r6, r4
 800c612:	e694      	b.n	800c33e <HAL_RCCEx_PeriphCLKConfig+0x646>
    switch (PeriphClkInit->Lptim345ClockSelection)
 800c614:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800c618:	f5b2 4f00 	cmp.w	r2, #32768	@ 0x8000
 800c61c:	d003      	beq.n	800c626 <HAL_RCCEx_PeriphCLKConfig+0x92e>
 800c61e:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800c622:	f47f ae9e 	bne.w	800c362 <HAL_RCCEx_PeriphCLKConfig+0x66a>
    if (ret == HAL_OK)
 800c626:	b9ac      	cbnz	r4, 800c654 <HAL_RCCEx_PeriphCLKConfig+0x95c>
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800c628:	4a39      	ldr	r2, [pc, #228]	@ (800c710 <HAL_RCCEx_PeriphCLKConfig+0xa18>)
 800c62a:	f8d5 10a4 	ldr.w	r1, [r5, #164]	@ 0xa4
 800c62e:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 800c630:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 800c634:	430b      	orrs	r3, r1
 800c636:	6593      	str	r3, [r2, #88]	@ 0x58
 800c638:	e695      	b.n	800c366 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c63a:	2100      	movs	r1, #0
 800c63c:	f105 0008 	add.w	r0, r5, #8
 800c640:	f7ff fa6a 	bl	800bb18 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c644:	4604      	mov	r4, r0
        break;
 800c646:	e7ee      	b.n	800c626 <HAL_RCCEx_PeriphCLKConfig+0x92e>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c648:	2102      	movs	r1, #2
 800c64a:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800c64e:	f7ff fadb 	bl	800bc08 <RCCEx_PLL3_Config>
 800c652:	e7f7      	b.n	800c644 <HAL_RCCEx_PeriphCLKConfig+0x94c>
 800c654:	4626      	mov	r6, r4
 800c656:	e686      	b.n	800c366 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c658:	2102      	movs	r1, #2
 800c65a:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800c65e:	f7ff fad3 	bl	800bc08 <RCCEx_PLL3_Config>
 800c662:	e6c3      	b.n	800c3ec <HAL_RCCEx_PeriphCLKConfig+0x6f4>
    switch (PeriphClkInit->AdcClockSelection)
 800c664:	2601      	movs	r6, #1
 800c666:	4634      	mov	r4, r6
 800c668:	e6cc      	b.n	800c404 <HAL_RCCEx_PeriphCLKConfig+0x70c>
 800c66a:	4626      	mov	r6, r4
 800c66c:	e6ca      	b.n	800c404 <HAL_RCCEx_PeriphCLKConfig+0x70c>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c66e:	4a28      	ldr	r2, [pc, #160]	@ (800c710 <HAL_RCCEx_PeriphCLKConfig+0xa18>)
 800c670:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800c672:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800c676:	62d3      	str	r3, [r2, #44]	@ 0x2c
    if (ret == HAL_OK)
 800c678:	b97c      	cbnz	r4, 800c69a <HAL_RCCEx_PeriphCLKConfig+0x9a2>
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800c67a:	4a25      	ldr	r2, [pc, #148]	@ (800c710 <HAL_RCCEx_PeriphCLKConfig+0xa18>)
 800c67c:	f8d5 108c 	ldr.w	r1, [r5, #140]	@ 0x8c
 800c680:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 800c682:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800c686:	430b      	orrs	r3, r1
 800c688:	6553      	str	r3, [r2, #84]	@ 0x54
 800c68a:	e6ce      	b.n	800c42a <HAL_RCCEx_PeriphCLKConfig+0x732>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800c68c:	2101      	movs	r1, #1
 800c68e:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800c692:	f7ff fab9 	bl	800bc08 <RCCEx_PLL3_Config>
 800c696:	4604      	mov	r4, r0
        break;
 800c698:	e7ee      	b.n	800c678 <HAL_RCCEx_PeriphCLKConfig+0x980>
 800c69a:	4626      	mov	r6, r4
 800c69c:	e6c5      	b.n	800c42a <HAL_RCCEx_PeriphCLKConfig+0x732>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c69e:	4a1c      	ldr	r2, [pc, #112]	@ (800c710 <HAL_RCCEx_PeriphCLKConfig+0xa18>)
 800c6a0:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800c6a2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800c6a6:	62d3      	str	r3, [r2, #44]	@ 0x2c
    if (ret == HAL_OK)
 800c6a8:	b974      	cbnz	r4, 800c6c8 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800c6aa:	4a19      	ldr	r2, [pc, #100]	@ (800c710 <HAL_RCCEx_PeriphCLKConfig+0xa18>)
 800c6ac:	6d69      	ldr	r1, [r5, #84]	@ 0x54
 800c6ae:	6cd3      	ldr	r3, [r2, #76]	@ 0x4c
 800c6b0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800c6b4:	430b      	orrs	r3, r1
 800c6b6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800c6b8:	e6c4      	b.n	800c444 <HAL_RCCEx_PeriphCLKConfig+0x74c>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800c6ba:	2102      	movs	r1, #2
 800c6bc:	f105 0008 	add.w	r0, r5, #8
 800c6c0:	f7ff fa2a 	bl	800bb18 <RCCEx_PLL2_Config>
 800c6c4:	4604      	mov	r4, r0
        break;
 800c6c6:	e7ef      	b.n	800c6a8 <HAL_RCCEx_PeriphCLKConfig+0x9b0>
 800c6c8:	4626      	mov	r6, r4
 800c6ca:	e6bb      	b.n	800c444 <HAL_RCCEx_PeriphCLKConfig+0x74c>
    switch (PeriphClkInit->RngClockSelection)
 800c6cc:	f420 7280 	bic.w	r2, r0, #256	@ 0x100
 800c6d0:	f5b2 7f00 	cmp.w	r2, #512	@ 0x200
 800c6d4:	f47f aed1 	bne.w	800c47a <HAL_RCCEx_PeriphCLKConfig+0x782>
    if (ret == HAL_OK)
 800c6d8:	2c00      	cmp	r4, #0
 800c6da:	f47f aecf 	bne.w	800c47c <HAL_RCCEx_PeriphCLKConfig+0x784>
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800c6de:	4c0c      	ldr	r4, [pc, #48]	@ (800c710 <HAL_RCCEx_PeriphCLKConfig+0xa18>)
 800c6e0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800c6e2:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 800c6e6:	4302      	orrs	r2, r0
 800c6e8:	6562      	str	r2, [r4, #84]	@ 0x54
      status = HAL_ERROR;
 800c6ea:	4634      	mov	r4, r6
 800c6ec:	e6c6      	b.n	800c47c <HAL_RCCEx_PeriphCLKConfig+0x784>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c6ee:	4f08      	ldr	r7, [pc, #32]	@ (800c710 <HAL_RCCEx_PeriphCLKConfig+0xa18>)
 800c6f0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c6f2:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800c6f6:	62fa      	str	r2, [r7, #44]	@ 0x2c
        break;
 800c6f8:	e7ee      	b.n	800c6d8 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c6fa:	2102      	movs	r1, #2
 800c6fc:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800c700:	f7ff fa82 	bl	800bc08 <RCCEx_PLL3_Config>
    if (ret == HAL_OK)
 800c704:	2800      	cmp	r0, #0
 800c706:	f43f af2e 	beq.w	800c566 <HAL_RCCEx_PeriphCLKConfig+0x86e>
  return HAL_ERROR;
 800c70a:	2001      	movs	r0, #1
 800c70c:	e72e      	b.n	800c56c <HAL_RCCEx_PeriphCLKConfig+0x874>
 800c70e:	bf00      	nop
 800c710:	58024400 	.word	0x58024400

0800c714 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 800c714:	b538      	push	{r3, r4, r5, lr}
 800c716:	460d      	mov	r5, r1
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 800c718:	4604      	mov	r4, r0
 800c71a:	b1f0      	cbz	r0, 800c75a <HAL_SDRAM_Init+0x46>
  {
    return HAL_ERROR;
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 800c71c:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
 800c720:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 800c724:	b91b      	cbnz	r3, 800c72e <HAL_SDRAM_Init+0x1a>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 800c726:	f880 202d 	strb.w	r2, [r0, #45]	@ 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 800c72a:	f7f4 fe39 	bl	80013a0 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800c72e:	2302      	movs	r3, #2

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800c730:	1d21      	adds	r1, r4, #4
 800c732:	6820      	ldr	r0, [r4, #0]
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800c734:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800c738:	f000 fa15 	bl	800cb66 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 800c73c:	6862      	ldr	r2, [r4, #4]
 800c73e:	4629      	mov	r1, r5
 800c740:	6820      	ldr	r0, [r4, #0]
 800c742:	f000 fa48 	bl	800cbd6 <FMC_SDRAM_Timing_Init>

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
 800c746:	4a06      	ldr	r2, [pc, #24]	@ (800c760 <HAL_SDRAM_Init+0x4c>)
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;

  return HAL_OK;
 800c748:	2000      	movs	r0, #0
  __FMC_ENABLE();
 800c74a:	6813      	ldr	r3, [r2, #0]
 800c74c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800c750:	6013      	str	r3, [r2, #0]
  hsdram->State = HAL_SDRAM_STATE_READY;
 800c752:	2301      	movs	r3, #1
 800c754:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
}
 800c758:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800c75a:	2001      	movs	r0, #1
 800c75c:	e7fc      	b.n	800c758 <HAL_SDRAM_Init+0x44>
 800c75e:	bf00      	nop
 800c760:	52004000 	.word	0x52004000

0800c764 <HAL_SDRAM_DeInit>:
  * @param  hsdram pointer to a SDRAM_HandleTypeDef structure that contains
  *                the configuration information for SDRAM module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_DeInit(SDRAM_HandleTypeDef *hsdram)
{
 800c764:	b510      	push	{r4, lr}
 800c766:	4604      	mov	r4, r0

  /* DeInit the low level hardware */
  hsdram->MspDeInitCallback(hsdram);
#else
  /* Initialize the low level hardware (MSP) */
  HAL_SDRAM_MspDeInit(hsdram);
 800c768:	f7f4 feb4 	bl	80014d4 <HAL_SDRAM_MspDeInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */

  /* Configure the SDRAM registers with their reset values */
  (void)FMC_SDRAM_DeInit(hsdram->Instance, hsdram->Init.SDBank);
 800c76c:	e9d4 0100 	ldrd	r0, r1, [r4]
 800c770:	f000 fa67 	bl	800cc42 <FMC_SDRAM_DeInit>

  /* Reset the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_RESET;
 800c774:	2000      	movs	r0, #0
 800c776:	f884 002c 	strb.w	r0, [r4, #44]	@ 0x2c

  /* Release Lock */
  __HAL_UNLOCK(hsdram);
 800c77a:	f884 002d 	strb.w	r0, [r4, #45]	@ 0x2d

  return HAL_OK;
}
 800c77e:	bd10      	pop	{r4, pc}

0800c780 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 800c780:	b570      	push	{r4, r5, r6, lr}
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 800c782:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
{
 800c786:	4605      	mov	r5, r0
 800c788:	460e      	mov	r6, r1

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 800c78a:	2b02      	cmp	r3, #2
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 800c78c:	b2d8      	uxtb	r0, r3
  if (state == HAL_SDRAM_STATE_BUSY)
 800c78e:	d010      	beq.n	800c7b2 <HAL_SDRAM_SendCommand+0x32>
  {
    return HAL_BUSY;
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 800c790:	f000 04fb 	and.w	r4, r0, #251	@ 0xfb
 800c794:	2c01      	cmp	r4, #1
 800c796:	d110      	bne.n	800c7ba <HAL_SDRAM_SendCommand+0x3a>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800c798:	2302      	movs	r3, #2

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 800c79a:	6828      	ldr	r0, [r5, #0]
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800c79c:	f885 302c 	strb.w	r3, [r5, #44]	@ 0x2c
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 800c7a0:	f000 fa5e 	bl	800cc60 <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800c7a4:	6833      	ldr	r3, [r6, #0]
 800c7a6:	2b02      	cmp	r3, #2
 800c7a8:	d104      	bne.n	800c7b4 <HAL_SDRAM_SendCommand+0x34>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 800c7aa:	2305      	movs	r3, #5
 800c7ac:	f885 302c 	strb.w	r3, [r5, #44]	@ 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 800c7b0:	2000      	movs	r0, #0
}
 800c7b2:	bd70      	pop	{r4, r5, r6, pc}
      hsdram->State = HAL_SDRAM_STATE_READY;
 800c7b4:	f885 402c 	strb.w	r4, [r5, #44]	@ 0x2c
 800c7b8:	e7fa      	b.n	800c7b0 <HAL_SDRAM_SendCommand+0x30>
    return HAL_ERROR;
 800c7ba:	2001      	movs	r0, #1
 800c7bc:	e7f9      	b.n	800c7b2 <HAL_SDRAM_SendCommand+0x32>

0800c7be <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 800c7be:	b538      	push	{r3, r4, r5, lr}
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 800c7c0:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
{
 800c7c4:	4604      	mov	r4, r0
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 800c7c6:	2b02      	cmp	r3, #2
 800c7c8:	b2d8      	uxtb	r0, r3
 800c7ca:	d00d      	beq.n	800c7e8 <HAL_SDRAM_ProgramRefreshRate+0x2a>
  {
    return HAL_BUSY;
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 800c7cc:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 800c7d0:	2b01      	cmp	r3, #1
 800c7d2:	b2dd      	uxtb	r5, r3
 800c7d4:	d109      	bne.n	800c7ea <HAL_SDRAM_ProgramRefreshRate+0x2c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800c7d6:	2302      	movs	r3, #2

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 800c7d8:	6820      	ldr	r0, [r4, #0]
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800c7da:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 800c7de:	f000 fa51 	bl	800cc84 <FMC_SDRAM_ProgramRefreshRate>
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 800c7e2:	2000      	movs	r0, #0
    hsdram->State = HAL_SDRAM_STATE_READY;
 800c7e4:	f884 502c 	strb.w	r5, [r4, #44]	@ 0x2c
}
 800c7e8:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800c7ea:	2001      	movs	r0, #1
 800c7ec:	e7fc      	b.n	800c7e8 <HAL_SDRAM_ProgramRefreshRate+0x2a>

0800c7ee <HAL_TIM_Base_MspInit>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800c7ee:	4770      	bx	lr

0800c7f0 <HAL_TIM_Base_Start>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800c7f0:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 800c7f4:	2b01      	cmp	r3, #1
 800c7f6:	d12f      	bne.n	800c858 <HAL_TIM_Base_Start+0x68>
  {
    return HAL_ERROR;
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c7f8:	2302      	movs	r3, #2

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c7fa:	4a18      	ldr	r2, [pc, #96]	@ (800c85c <HAL_TIM_Base_Start+0x6c>)
  htim->State = HAL_TIM_STATE_BUSY;
 800c7fc:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c800:	6803      	ldr	r3, [r0, #0]
 800c802:	4293      	cmp	r3, r2
 800c804:	d01a      	beq.n	800c83c <HAL_TIM_Base_Start+0x4c>
 800c806:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c80a:	d017      	beq.n	800c83c <HAL_TIM_Base_Start+0x4c>
 800c80c:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 800c810:	4293      	cmp	r3, r2
 800c812:	d013      	beq.n	800c83c <HAL_TIM_Base_Start+0x4c>
 800c814:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800c818:	4293      	cmp	r3, r2
 800c81a:	d00f      	beq.n	800c83c <HAL_TIM_Base_Start+0x4c>
 800c81c:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800c820:	4293      	cmp	r3, r2
 800c822:	d00b      	beq.n	800c83c <HAL_TIM_Base_Start+0x4c>
 800c824:	f502 4278 	add.w	r2, r2, #63488	@ 0xf800
 800c828:	4293      	cmp	r3, r2
 800c82a:	d007      	beq.n	800c83c <HAL_TIM_Base_Start+0x4c>
 800c82c:	f5a2 426c 	sub.w	r2, r2, #60416	@ 0xec00
 800c830:	4293      	cmp	r3, r2
 800c832:	d003      	beq.n	800c83c <HAL_TIM_Base_Start+0x4c>
 800c834:	f502 3294 	add.w	r2, r2, #75776	@ 0x12800
 800c838:	4293      	cmp	r3, r2
 800c83a:	d107      	bne.n	800c84c <HAL_TIM_Base_Start+0x5c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c83c:	6899      	ldr	r1, [r3, #8]
 800c83e:	4a08      	ldr	r2, [pc, #32]	@ (800c860 <HAL_TIM_Base_Start+0x70>)
 800c840:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c842:	2a06      	cmp	r2, #6
 800c844:	d006      	beq.n	800c854 <HAL_TIM_Base_Start+0x64>
 800c846:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 800c84a:	d003      	beq.n	800c854 <HAL_TIM_Base_Start+0x64>
    {
      __HAL_TIM_ENABLE(htim);
 800c84c:	681a      	ldr	r2, [r3, #0]
 800c84e:	f042 0201 	orr.w	r2, r2, #1
 800c852:	601a      	str	r2, [r3, #0]
  {
    __HAL_TIM_ENABLE(htim);
  }

  /* Return function status */
  return HAL_OK;
 800c854:	2000      	movs	r0, #0
 800c856:	4770      	bx	lr
    return HAL_ERROR;
 800c858:	2001      	movs	r0, #1
}
 800c85a:	4770      	bx	lr
 800c85c:	40010000 	.word	0x40010000
 800c860:	00010007 	.word	0x00010007

0800c864 <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800c864:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 800c868:	2b01      	cmp	r3, #1
 800c86a:	d133      	bne.n	800c8d4 <HAL_TIM_Base_Start_IT+0x70>
  {
    return HAL_ERROR;
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c86c:	2302      	movs	r3, #2
 800c86e:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800c872:	6803      	ldr	r3, [r0, #0]
 800c874:	68da      	ldr	r2, [r3, #12]
 800c876:	f042 0201 	orr.w	r2, r2, #1
 800c87a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c87c:	4a16      	ldr	r2, [pc, #88]	@ (800c8d8 <HAL_TIM_Base_Start_IT+0x74>)
 800c87e:	4293      	cmp	r3, r2
 800c880:	d01a      	beq.n	800c8b8 <HAL_TIM_Base_Start_IT+0x54>
 800c882:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c886:	d017      	beq.n	800c8b8 <HAL_TIM_Base_Start_IT+0x54>
 800c888:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 800c88c:	4293      	cmp	r3, r2
 800c88e:	d013      	beq.n	800c8b8 <HAL_TIM_Base_Start_IT+0x54>
 800c890:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800c894:	4293      	cmp	r3, r2
 800c896:	d00f      	beq.n	800c8b8 <HAL_TIM_Base_Start_IT+0x54>
 800c898:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800c89c:	4293      	cmp	r3, r2
 800c89e:	d00b      	beq.n	800c8b8 <HAL_TIM_Base_Start_IT+0x54>
 800c8a0:	f502 4278 	add.w	r2, r2, #63488	@ 0xf800
 800c8a4:	4293      	cmp	r3, r2
 800c8a6:	d007      	beq.n	800c8b8 <HAL_TIM_Base_Start_IT+0x54>
 800c8a8:	f5a2 426c 	sub.w	r2, r2, #60416	@ 0xec00
 800c8ac:	4293      	cmp	r3, r2
 800c8ae:	d003      	beq.n	800c8b8 <HAL_TIM_Base_Start_IT+0x54>
 800c8b0:	f502 3294 	add.w	r2, r2, #75776	@ 0x12800
 800c8b4:	4293      	cmp	r3, r2
 800c8b6:	d107      	bne.n	800c8c8 <HAL_TIM_Base_Start_IT+0x64>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c8b8:	6899      	ldr	r1, [r3, #8]
 800c8ba:	4a08      	ldr	r2, [pc, #32]	@ (800c8dc <HAL_TIM_Base_Start_IT+0x78>)
 800c8bc:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c8be:	2a06      	cmp	r2, #6
 800c8c0:	d006      	beq.n	800c8d0 <HAL_TIM_Base_Start_IT+0x6c>
 800c8c2:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 800c8c6:	d003      	beq.n	800c8d0 <HAL_TIM_Base_Start_IT+0x6c>
    {
      __HAL_TIM_ENABLE(htim);
 800c8c8:	681a      	ldr	r2, [r3, #0]
 800c8ca:	f042 0201 	orr.w	r2, r2, #1
 800c8ce:	601a      	str	r2, [r3, #0]
  {
    __HAL_TIM_ENABLE(htim);
  }

  /* Return function status */
  return HAL_OK;
 800c8d0:	2000      	movs	r0, #0
 800c8d2:	4770      	bx	lr
    return HAL_ERROR;
 800c8d4:	2001      	movs	r0, #1
}
 800c8d6:	4770      	bx	lr
 800c8d8:	40010000 	.word	0x40010000
 800c8dc:	00010007 	.word	0x00010007

0800c8e0 <HAL_TIM_OC_DelayElapsedCallback>:
/**
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
 800c8e0:	4770      	bx	lr

0800c8e2 <HAL_TIM_IC_CaptureCallback>:
/**
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
 800c8e2:	4770      	bx	lr

0800c8e4 <HAL_TIM_PWM_PulseFinishedCallback>:
/**
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
 800c8e4:	4770      	bx	lr

0800c8e6 <HAL_TIM_TriggerCallback>:
/**
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
 800c8e6:	4770      	bx	lr

0800c8e8 <HAL_TIM_IRQHandler>:
  uint32_t itsource = htim->Instance->DIER;
 800c8e8:	6803      	ldr	r3, [r0, #0]
{
 800c8ea:	b570      	push	{r4, r5, r6, lr}
  uint32_t itsource = htim->Instance->DIER;
 800c8ec:	68dd      	ldr	r5, [r3, #12]
{
 800c8ee:	4604      	mov	r4, r0
  uint32_t itflag   = htim->Instance->SR;
 800c8f0:	691e      	ldr	r6, [r3, #16]
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800c8f2:	07b2      	lsls	r2, r6, #30
 800c8f4:	d50d      	bpl.n	800c912 <HAL_TIM_IRQHandler+0x2a>
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800c8f6:	07a9      	lsls	r1, r5, #30
 800c8f8:	d50b      	bpl.n	800c912 <HAL_TIM_IRQHandler+0x2a>
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800c8fa:	f06f 0202 	mvn.w	r2, #2
 800c8fe:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800c900:	2201      	movs	r2, #1
 800c902:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800c904:	699b      	ldr	r3, [r3, #24]
 800c906:	079a      	lsls	r2, r3, #30
 800c908:	d075      	beq.n	800c9f6 <HAL_TIM_IRQHandler+0x10e>
          HAL_TIM_IC_CaptureCallback(htim);
 800c90a:	f7ff ffea 	bl	800c8e2 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c90e:	2300      	movs	r3, #0
 800c910:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800c912:	0773      	lsls	r3, r6, #29
 800c914:	d510      	bpl.n	800c938 <HAL_TIM_IRQHandler+0x50>
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800c916:	0768      	lsls	r0, r5, #29
 800c918:	d50e      	bpl.n	800c938 <HAL_TIM_IRQHandler+0x50>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800c91a:	6823      	ldr	r3, [r4, #0]
 800c91c:	f06f 0204 	mvn.w	r2, #4
        HAL_TIM_IC_CaptureCallback(htim);
 800c920:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800c922:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800c924:	2202      	movs	r2, #2
 800c926:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800c928:	699b      	ldr	r3, [r3, #24]
 800c92a:	f413 7f40 	tst.w	r3, #768	@ 0x300
 800c92e:	d068      	beq.n	800ca02 <HAL_TIM_IRQHandler+0x11a>
        HAL_TIM_IC_CaptureCallback(htim);
 800c930:	f7ff ffd7 	bl	800c8e2 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c934:	2300      	movs	r3, #0
 800c936:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800c938:	0731      	lsls	r1, r6, #28
 800c93a:	d50f      	bpl.n	800c95c <HAL_TIM_IRQHandler+0x74>
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800c93c:	072a      	lsls	r2, r5, #28
 800c93e:	d50d      	bpl.n	800c95c <HAL_TIM_IRQHandler+0x74>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800c940:	6823      	ldr	r3, [r4, #0]
 800c942:	f06f 0208 	mvn.w	r2, #8
        HAL_TIM_IC_CaptureCallback(htim);
 800c946:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800c948:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800c94a:	2204      	movs	r2, #4
 800c94c:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800c94e:	69db      	ldr	r3, [r3, #28]
 800c950:	079b      	lsls	r3, r3, #30
 800c952:	d05c      	beq.n	800ca0e <HAL_TIM_IRQHandler+0x126>
        HAL_TIM_IC_CaptureCallback(htim);
 800c954:	f7ff ffc5 	bl	800c8e2 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c958:	2300      	movs	r3, #0
 800c95a:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800c95c:	06f1      	lsls	r1, r6, #27
 800c95e:	d510      	bpl.n	800c982 <HAL_TIM_IRQHandler+0x9a>
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800c960:	06ea      	lsls	r2, r5, #27
 800c962:	d50e      	bpl.n	800c982 <HAL_TIM_IRQHandler+0x9a>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800c964:	6823      	ldr	r3, [r4, #0]
 800c966:	f06f 0210 	mvn.w	r2, #16
        HAL_TIM_IC_CaptureCallback(htim);
 800c96a:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800c96c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800c96e:	2208      	movs	r2, #8
 800c970:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800c972:	69db      	ldr	r3, [r3, #28]
 800c974:	f413 7f40 	tst.w	r3, #768	@ 0x300
 800c978:	d04f      	beq.n	800ca1a <HAL_TIM_IRQHandler+0x132>
        HAL_TIM_IC_CaptureCallback(htim);
 800c97a:	f7ff ffb2 	bl	800c8e2 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c97e:	2300      	movs	r3, #0
 800c980:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800c982:	07f3      	lsls	r3, r6, #31
 800c984:	d508      	bpl.n	800c998 <HAL_TIM_IRQHandler+0xb0>
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800c986:	07e8      	lsls	r0, r5, #31
 800c988:	d506      	bpl.n	800c998 <HAL_TIM_IRQHandler+0xb0>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800c98a:	6823      	ldr	r3, [r4, #0]
 800c98c:	f06f 0201 	mvn.w	r2, #1
      HAL_TIM_PeriodElapsedCallback(htim);
 800c990:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800c992:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 800c994:	f7f4 facc 	bl	8000f30 <HAL_TIM_PeriodElapsedCallback>
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800c998:	f416 5f02 	tst.w	r6, #8320	@ 0x2080
 800c99c:	d008      	beq.n	800c9b0 <HAL_TIM_IRQHandler+0xc8>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800c99e:	0629      	lsls	r1, r5, #24
 800c9a0:	d506      	bpl.n	800c9b0 <HAL_TIM_IRQHandler+0xc8>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800c9a2:	6823      	ldr	r3, [r4, #0]
 800c9a4:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
      HAL_TIMEx_BreakCallback(htim);
 800c9a8:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800c9aa:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 800c9ac:	f000 f8d9 	bl	800cb62 <HAL_TIMEx_BreakCallback>
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800c9b0:	05f2      	lsls	r2, r6, #23
 800c9b2:	d508      	bpl.n	800c9c6 <HAL_TIM_IRQHandler+0xde>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800c9b4:	062b      	lsls	r3, r5, #24
 800c9b6:	d506      	bpl.n	800c9c6 <HAL_TIM_IRQHandler+0xde>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800c9b8:	6823      	ldr	r3, [r4, #0]
 800c9ba:	f46f 7280 	mvn.w	r2, #256	@ 0x100
      HAL_TIMEx_Break2Callback(htim);
 800c9be:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800c9c0:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 800c9c2:	f000 f8cf 	bl	800cb64 <HAL_TIMEx_Break2Callback>
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800c9c6:	0670      	lsls	r0, r6, #25
 800c9c8:	d508      	bpl.n	800c9dc <HAL_TIM_IRQHandler+0xf4>
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800c9ca:	0669      	lsls	r1, r5, #25
 800c9cc:	d506      	bpl.n	800c9dc <HAL_TIM_IRQHandler+0xf4>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800c9ce:	6823      	ldr	r3, [r4, #0]
 800c9d0:	f06f 0240 	mvn.w	r2, #64	@ 0x40
      HAL_TIM_TriggerCallback(htim);
 800c9d4:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800c9d6:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 800c9d8:	f7ff ff85 	bl	800c8e6 <HAL_TIM_TriggerCallback>
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800c9dc:	06b2      	lsls	r2, r6, #26
 800c9de:	d522      	bpl.n	800ca26 <HAL_TIM_IRQHandler+0x13e>
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800c9e0:	06ab      	lsls	r3, r5, #26
 800c9e2:	d520      	bpl.n	800ca26 <HAL_TIM_IRQHandler+0x13e>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800c9e4:	6823      	ldr	r3, [r4, #0]
 800c9e6:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 800c9ea:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800c9ec:	611a      	str	r2, [r3, #16]
}
 800c9ee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      HAL_TIMEx_CommutCallback(htim);
 800c9f2:	f000 b8b5 	b.w	800cb60 <HAL_TIMEx_CommutCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800c9f6:	f7ff ff73 	bl	800c8e0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c9fa:	4620      	mov	r0, r4
 800c9fc:	f7ff ff72 	bl	800c8e4 <HAL_TIM_PWM_PulseFinishedCallback>
 800ca00:	e785      	b.n	800c90e <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ca02:	f7ff ff6d 	bl	800c8e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ca06:	4620      	mov	r0, r4
 800ca08:	f7ff ff6c 	bl	800c8e4 <HAL_TIM_PWM_PulseFinishedCallback>
 800ca0c:	e792      	b.n	800c934 <HAL_TIM_IRQHandler+0x4c>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ca0e:	f7ff ff67 	bl	800c8e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ca12:	4620      	mov	r0, r4
 800ca14:	f7ff ff66 	bl	800c8e4 <HAL_TIM_PWM_PulseFinishedCallback>
 800ca18:	e79e      	b.n	800c958 <HAL_TIM_IRQHandler+0x70>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ca1a:	f7ff ff61 	bl	800c8e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ca1e:	4620      	mov	r0, r4
 800ca20:	f7ff ff60 	bl	800c8e4 <HAL_TIM_PWM_PulseFinishedCallback>
 800ca24:	e7ab      	b.n	800c97e <HAL_TIM_IRQHandler+0x96>
}
 800ca26:	bd70      	pop	{r4, r5, r6, pc}

0800ca28 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800ca28:	4a33      	ldr	r2, [pc, #204]	@ (800caf8 <TIM_Base_SetConfig+0xd0>)
  tmpcr1 = TIMx->CR1;
 800ca2a:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800ca2c:	4290      	cmp	r0, r2
 800ca2e:	d012      	beq.n	800ca56 <TIM_Base_SetConfig+0x2e>
 800ca30:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 800ca34:	d00f      	beq.n	800ca56 <TIM_Base_SetConfig+0x2e>
 800ca36:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 800ca3a:	4290      	cmp	r0, r2
 800ca3c:	d00b      	beq.n	800ca56 <TIM_Base_SetConfig+0x2e>
 800ca3e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800ca42:	4290      	cmp	r0, r2
 800ca44:	d007      	beq.n	800ca56 <TIM_Base_SetConfig+0x2e>
 800ca46:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800ca4a:	4290      	cmp	r0, r2
 800ca4c:	d003      	beq.n	800ca56 <TIM_Base_SetConfig+0x2e>
 800ca4e:	f502 4278 	add.w	r2, r2, #63488	@ 0xf800
 800ca52:	4290      	cmp	r0, r2
 800ca54:	d119      	bne.n	800ca8a <TIM_Base_SetConfig+0x62>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 800ca56:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800ca58:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 800ca5c:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800ca5e:	4a26      	ldr	r2, [pc, #152]	@ (800caf8 <TIM_Base_SetConfig+0xd0>)
 800ca60:	4290      	cmp	r0, r2
 800ca62:	d01d      	beq.n	800caa0 <TIM_Base_SetConfig+0x78>
 800ca64:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 800ca68:	d01a      	beq.n	800caa0 <TIM_Base_SetConfig+0x78>
 800ca6a:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 800ca6e:	4290      	cmp	r0, r2
 800ca70:	d016      	beq.n	800caa0 <TIM_Base_SetConfig+0x78>
 800ca72:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800ca76:	4290      	cmp	r0, r2
 800ca78:	d012      	beq.n	800caa0 <TIM_Base_SetConfig+0x78>
 800ca7a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800ca7e:	4290      	cmp	r0, r2
 800ca80:	d00e      	beq.n	800caa0 <TIM_Base_SetConfig+0x78>
 800ca82:	f502 4278 	add.w	r2, r2, #63488	@ 0xf800
 800ca86:	4290      	cmp	r0, r2
 800ca88:	d00a      	beq.n	800caa0 <TIM_Base_SetConfig+0x78>
 800ca8a:	4a1c      	ldr	r2, [pc, #112]	@ (800cafc <TIM_Base_SetConfig+0xd4>)
 800ca8c:	4290      	cmp	r0, r2
 800ca8e:	d007      	beq.n	800caa0 <TIM_Base_SetConfig+0x78>
 800ca90:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800ca94:	4290      	cmp	r0, r2
 800ca96:	d003      	beq.n	800caa0 <TIM_Base_SetConfig+0x78>
 800ca98:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800ca9c:	4290      	cmp	r0, r2
 800ca9e:	d103      	bne.n	800caa8 <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800caa0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800caa4:	68ca      	ldr	r2, [r1, #12]
 800caa6:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800caa8:	694a      	ldr	r2, [r1, #20]
 800caaa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800caae:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 800cab0:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800cab2:	688b      	ldr	r3, [r1, #8]
 800cab4:	62c3      	str	r3, [r0, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800cab6:	680b      	ldr	r3, [r1, #0]
 800cab8:	6283      	str	r3, [r0, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800caba:	4b0f      	ldr	r3, [pc, #60]	@ (800caf8 <TIM_Base_SetConfig+0xd0>)
 800cabc:	4298      	cmp	r0, r3
 800cabe:	d00f      	beq.n	800cae0 <TIM_Base_SetConfig+0xb8>
 800cac0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800cac4:	4298      	cmp	r0, r3
 800cac6:	d00b      	beq.n	800cae0 <TIM_Base_SetConfig+0xb8>
 800cac8:	f503 5370 	add.w	r3, r3, #15360	@ 0x3c00
 800cacc:	4298      	cmp	r0, r3
 800cace:	d007      	beq.n	800cae0 <TIM_Base_SetConfig+0xb8>
 800cad0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800cad4:	4298      	cmp	r0, r3
 800cad6:	d003      	beq.n	800cae0 <TIM_Base_SetConfig+0xb8>
 800cad8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800cadc:	4298      	cmp	r0, r3
 800cade:	d101      	bne.n	800cae4 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800cae0:	690b      	ldr	r3, [r1, #16]
 800cae2:	6303      	str	r3, [r0, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800cae4:	2301      	movs	r3, #1
 800cae6:	6143      	str	r3, [r0, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800cae8:	6903      	ldr	r3, [r0, #16]
 800caea:	07db      	lsls	r3, r3, #31
 800caec:	d503      	bpl.n	800caf6 <TIM_Base_SetConfig+0xce>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800caee:	6903      	ldr	r3, [r0, #16]
 800caf0:	f023 0301 	bic.w	r3, r3, #1
 800caf4:	6103      	str	r3, [r0, #16]
  }
}
 800caf6:	4770      	bx	lr
 800caf8:	40010000 	.word	0x40010000
 800cafc:	40014000 	.word	0x40014000

0800cb00 <HAL_TIM_Base_Init>:
{
 800cb00:	b510      	push	{r4, lr}
  if (htim == NULL)
 800cb02:	4604      	mov	r4, r0
 800cb04:	b350      	cbz	r0, 800cb5c <HAL_TIM_Base_Init+0x5c>
  if (htim->State == HAL_TIM_STATE_RESET)
 800cb06:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 800cb0a:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 800cb0e:	b91b      	cbnz	r3, 800cb18 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 800cb10:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    HAL_TIM_Base_MspInit(htim);
 800cb14:	f7ff fe6b 	bl	800c7ee <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 800cb18:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800cb1a:	6820      	ldr	r0, [r4, #0]
 800cb1c:	1d21      	adds	r1, r4, #4
  htim->State = HAL_TIM_STATE_BUSY;
 800cb1e:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800cb22:	f7ff ff81 	bl	800ca28 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800cb26:	2301      	movs	r3, #1
  return HAL_OK;
 800cb28:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800cb2a:	f884 3048 	strb.w	r3, [r4, #72]	@ 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800cb2e:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 800cb32:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 800cb36:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 800cb3a:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
 800cb3e:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800cb42:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800cb46:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 800cb4a:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 800cb4e:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
 800cb52:	f884 3047 	strb.w	r3, [r4, #71]	@ 0x47
  htim->State = HAL_TIM_STATE_READY;
 800cb56:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
}
 800cb5a:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800cb5c:	2001      	movs	r0, #1
 800cb5e:	e7fc      	b.n	800cb5a <HAL_TIM_Base_Init+0x5a>

0800cb60 <HAL_TIMEx_CommutCallback>:
/**
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
 800cb60:	4770      	bx	lr

0800cb62 <HAL_TIMEx_BreakCallback>:
/**
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
 800cb62:	4770      	bx	lr

0800cb64 <HAL_TIMEx_Break2Callback>:
/**
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
 800cb64:	4770      	bx	lr

0800cb66 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800cb66:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800cb6a:	e9d1 2c01 	ldrd	r2, ip, [r1, #4]
 800cb6e:	e9d1 3807 	ldrd	r3, r8, [r1, #28]
 800cb72:	f8d1 e024 	ldr.w	lr, [r1, #36]	@ 0x24
 800cb76:	ea43 0308 	orr.w	r3, r3, r8
 800cb7a:	e9d1 7603 	ldrd	r7, r6, [r1, #12]
 800cb7e:	e9d1 5405 	ldrd	r5, r4, [r1, #20]
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800cb82:	6809      	ldr	r1, [r1, #0]
 800cb84:	b991      	cbnz	r1, 800cbac <FMC_SDRAM_Init+0x46>
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800cb86:	ea43 030e 	orr.w	r3, r3, lr
 800cb8a:	6801      	ldr	r1, [r0, #0]
 800cb8c:	4313      	orrs	r3, r2
 800cb8e:	f421 41ff 	bic.w	r1, r1, #32640	@ 0x7f80
 800cb92:	ea43 030c 	orr.w	r3, r3, ip
 800cb96:	f021 017f 	bic.w	r1, r1, #127	@ 0x7f
 800cb9a:	433b      	orrs	r3, r7
 800cb9c:	4333      	orrs	r3, r6
 800cb9e:	432b      	orrs	r3, r5
 800cba0:	4323      	orrs	r3, r4
 800cba2:	430b      	orrs	r3, r1
 800cba4:	6003      	str	r3, [r0, #0]
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
}
 800cba6:	2000      	movs	r0, #0
 800cba8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800cbac:	6801      	ldr	r1, [r0, #0]
 800cbae:	ea43 030e 	orr.w	r3, r3, lr
 800cbb2:	f421 41f8 	bic.w	r1, r1, #31744	@ 0x7c00
 800cbb6:	430b      	orrs	r3, r1
 800cbb8:	6003      	str	r3, [r0, #0]
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 800cbba:	ea42 030c 	orr.w	r3, r2, ip
 800cbbe:	6841      	ldr	r1, [r0, #4]
 800cbc0:	433b      	orrs	r3, r7
 800cbc2:	f421 42ff 	bic.w	r2, r1, #32640	@ 0x7f80
 800cbc6:	4333      	orrs	r3, r6
 800cbc8:	f022 027f 	bic.w	r2, r2, #127	@ 0x7f
 800cbcc:	432b      	orrs	r3, r5
 800cbce:	4323      	orrs	r3, r4
 800cbd0:	4313      	orrs	r3, r2
 800cbd2:	6043      	str	r3, [r0, #4]
 800cbd4:	e7e7      	b.n	800cba6 <FMC_SDRAM_Init+0x40>

0800cbd6 <FMC_SDRAM_Timing_Init>:
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800cbd6:	68cb      	ldr	r3, [r1, #12]
 800cbd8:	f103 3cff 	add.w	ip, r3, #4294967295
 800cbdc:	694b      	ldr	r3, [r1, #20]
{
 800cbde:	b5f0      	push	{r4, r5, r6, r7, lr}
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800cbe0:	3b01      	subs	r3, #1
 800cbe2:	680f      	ldr	r7, [r1, #0]
 800cbe4:	684c      	ldr	r4, [r1, #4]
 800cbe6:	688e      	ldr	r6, [r1, #8]
 800cbe8:	051b      	lsls	r3, r3, #20
 800cbea:	690d      	ldr	r5, [r1, #16]
 800cbec:	3c01      	subs	r4, #1
 800cbee:	6989      	ldr	r1, [r1, #24]
 800cbf0:	3e01      	subs	r6, #1
 800cbf2:	3d01      	subs	r5, #1
 800cbf4:	3f01      	subs	r7, #1
 800cbf6:	3901      	subs	r1, #1
 800cbf8:	0124      	lsls	r4, r4, #4
 800cbfa:	0236      	lsls	r6, r6, #8
 800cbfc:	042d      	lsls	r5, r5, #16
 800cbfe:	0609      	lsls	r1, r1, #24
 800cc00:	ea43 330c 	orr.w	r3, r3, ip, lsl #12
  if (Bank == FMC_SDRAM_BANK1)
 800cc04:	b95a      	cbnz	r2, 800cc1e <FMC_SDRAM_Timing_Init+0x48>
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800cc06:	433b      	orrs	r3, r7
 800cc08:	6882      	ldr	r2, [r0, #8]
 800cc0a:	4323      	orrs	r3, r4
 800cc0c:	f002 4270 	and.w	r2, r2, #4026531840	@ 0xf0000000
 800cc10:	4333      	orrs	r3, r6
 800cc12:	432b      	orrs	r3, r5
 800cc14:	430b      	orrs	r3, r1
 800cc16:	4313      	orrs	r3, r2
 800cc18:	6083      	str	r3, [r0, #8]
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTRx_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }

  return HAL_OK;
}
 800cc1a:	2000      	movs	r0, #0
 800cc1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800cc1e:	6882      	ldr	r2, [r0, #8]
 800cc20:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800cc24:	f422 4270 	bic.w	r2, r2, #61440	@ 0xf000
 800cc28:	431a      	orrs	r2, r3
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800cc2a:	ea44 0306 	orr.w	r3, r4, r6
 800cc2e:	433b      	orrs	r3, r7
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800cc30:	6082      	str	r2, [r0, #8]
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800cc32:	68c2      	ldr	r2, [r0, #12]
 800cc34:	432b      	orrs	r3, r5
 800cc36:	f002 4270 	and.w	r2, r2, #4026531840	@ 0xf0000000
 800cc3a:	430b      	orrs	r3, r1
 800cc3c:	4313      	orrs	r3, r2
 800cc3e:	60c3      	str	r3, [r0, #12]
 800cc40:	e7eb      	b.n	800cc1a <FMC_SDRAM_Timing_Init+0x44>

0800cc42 <FMC_SDRAM_DeInit>:
  * @brief  DeInitializes the FMC_SDRAM peripheral
  * @param  Device Pointer to SDRAM device instance
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_DeInit(FMC_SDRAM_TypeDef *Device, uint32_t Bank)
{
 800cc42:	4603      	mov	r3, r0
 800cc44:	eb00 0281 	add.w	r2, r0, r1, lsl #2
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* De-initialize the SDRAM device */
  Device->SDCR[Bank] = 0x000002D0U;
 800cc48:	f44f 7034 	mov.w	r0, #720	@ 0x2d0
 800cc4c:	f843 0021 	str.w	r0, [r3, r1, lsl #2]
  Device->SDTR[Bank] = 0x0FFFFFFFU;
  Device->SDCMR      = 0x00000000U;
 800cc50:	2000      	movs	r0, #0
  Device->SDTR[Bank] = 0x0FFFFFFFU;
 800cc52:	f06f 4170 	mvn.w	r1, #4026531840	@ 0xf0000000
 800cc56:	6091      	str	r1, [r2, #8]
  Device->SDCMR      = 0x00000000U;
 800cc58:	6118      	str	r0, [r3, #16]
  Device->SDRTR      = 0x00000000U;
 800cc5a:	6158      	str	r0, [r3, #20]
  Device->SDSR       = 0x00000000U;
 800cc5c:	6198      	str	r0, [r3, #24]

  return HAL_OK;
}
 800cc5e:	4770      	bx	lr

0800cc60 <FMC_SDRAM_SendCommand>:
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 800cc60:	6902      	ldr	r2, [r0, #16]
{
 800cc62:	b510      	push	{r4, lr}
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 800cc64:	e9d1 3400 	ldrd	r3, r4, [r1]
 800cc68:	0d92      	lsrs	r2, r2, #22
 800cc6a:	4323      	orrs	r3, r4
 800cc6c:	68cc      	ldr	r4, [r1, #12]
 800cc6e:	0592      	lsls	r2, r2, #22
 800cc70:	ea43 2344 	orr.w	r3, r3, r4, lsl #9
 800cc74:	4313      	orrs	r3, r2
 800cc76:	688a      	ldr	r2, [r1, #8]
 800cc78:	3a01      	subs	r2, #1
 800cc7a:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
 800cc7e:	6103      	str	r3, [r0, #16]
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
}
 800cc80:	2000      	movs	r0, #0
 800cc82:	bd10      	pop	{r4, pc}

0800cc84 <FMC_SDRAM_ProgramRefreshRate>:
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 800cc84:	6943      	ldr	r3, [r0, #20]
 800cc86:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 800cc8a:	f023 033e 	bic.w	r3, r3, #62	@ 0x3e
 800cc8e:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
 800cc92:	6143      	str	r3, [r0, #20]

  return HAL_OK;
}
 800cc94:	2000      	movs	r0, #0
 800cc96:	4770      	bx	lr

0800cc98 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800cc98:	b508      	push	{r3, lr}
  /* Clear overflow flag */
  SysTick->CTRL;
 800cc9a:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800cc9e:	691b      	ldr	r3, [r3, #16]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800cca0:	f001 fee2 	bl	800ea68 <xTaskGetSchedulerState>
 800cca4:	2801      	cmp	r0, #1
 800cca6:	d003      	beq.n	800ccb0 <SysTick_Handler+0x18>
    /* Call tick handler */
    xPortSysTickHandler();
  }
}
 800cca8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    xPortSysTickHandler();
 800ccac:	f000 bc4a 	b.w	800d544 <xPortSysTickHandler>
}
 800ccb0:	bd08      	pop	{r3, pc}
	...

0800ccb4 <osKernelInitialize>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ccb4:	f3ef 8305 	mrs	r3, IPSR
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
  osStatus_t stat;

  if (IS_IRQ()) {
 800ccb8:	b92b      	cbnz	r3, 800ccc6 <osKernelInitialize+0x12>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelInactive) {
 800ccba:	4b06      	ldr	r3, [pc, #24]	@ (800ccd4 <osKernelInitialize+0x20>)
 800ccbc:	6818      	ldr	r0, [r3, #0]
 800ccbe:	b928      	cbnz	r0, 800cccc <osKernelInitialize+0x18>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800ccc0:	2201      	movs	r2, #1
 800ccc2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800ccc4:	4770      	bx	lr
    stat = osErrorISR;
 800ccc6:	f06f 0005 	mvn.w	r0, #5
 800ccca:	4770      	bx	lr
    } else {
      stat = osError;
 800cccc:	f04f 30ff 	mov.w	r0, #4294967295
    }
  }

  return (stat);
}
 800ccd0:	4770      	bx	lr
 800ccd2:	bf00      	nop
 800ccd4:	240100e0 	.word	0x240100e0

0800ccd8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800ccd8:	b510      	push	{r4, lr}
 800ccda:	f3ef 8405 	mrs	r4, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
 800ccde:	b95c      	cbnz	r4, 800ccf8 <osKernelStart+0x20>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelReady) {
 800cce0:	4b08      	ldr	r3, [pc, #32]	@ (800cd04 <osKernelStart+0x2c>)
 800cce2:	681a      	ldr	r2, [r3, #0]
 800cce4:	2a01      	cmp	r2, #1
 800cce6:	d10a      	bne.n	800ccfe <osKernelStart+0x26>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800cce8:	4a07      	ldr	r2, [pc, #28]	@ (800cd08 <osKernelStart+0x30>)
 800ccea:	77d4      	strb	r4, [r2, #31]
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800ccec:	2202      	movs	r2, #2
 800ccee:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800ccf0:	f001 fd5a 	bl	800e7a8 <vTaskStartScheduler>
      stat = osOK;
 800ccf4:	4620      	mov	r0, r4
      stat = osError;
    }
  }

  return (stat);
}
 800ccf6:	bd10      	pop	{r4, pc}
    stat = osErrorISR;
 800ccf8:	f06f 0005 	mvn.w	r0, #5
 800ccfc:	e7fb      	b.n	800ccf6 <osKernelStart+0x1e>
      stat = osError;
 800ccfe:	f04f 30ff 	mov.w	r0, #4294967295
  return (stat);
 800cd02:	e7f8      	b.n	800ccf6 <osKernelStart+0x1e>
 800cd04:	240100e0 	.word	0x240100e0
 800cd08:	e000ed00 	.word	0xe000ed00

0800cd0c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800cd0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cd0e:	4614      	mov	r4, r2
 800cd10:	b087      	sub	sp, #28
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800cd12:	2200      	movs	r2, #0
osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800cd14:	460b      	mov	r3, r1
  hTask = NULL;
 800cd16:	9205      	str	r2, [sp, #20]
 800cd18:	f3ef 8205 	mrs	r2, IPSR

  if (!IS_IRQ() && (func != NULL)) {
 800cd1c:	b9ca      	cbnz	r2, 800cd52 <osThreadNew+0x46>
 800cd1e:	b1c0      	cbz	r0, 800cd52 <osThreadNew+0x46>
    prio  = (UBaseType_t)osPriorityNormal;

    name = NULL;
    mem  = -1;

    if (attr != NULL) {
 800cd20:	b36c      	cbz	r4, 800cd7e <osThreadNew+0x72>
      if (attr->name != NULL) {
        name = attr->name;
      }
      if (attr->priority != osPriorityNone) {
 800cd22:	69a5      	ldr	r5, [r4, #24]
 800cd24:	2d00      	cmp	r5, #0
 800cd26:	bf08      	it	eq
 800cd28:	2518      	moveq	r5, #24
        prio = (UBaseType_t)attr->priority;
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800cd2a:	1e69      	subs	r1, r5, #1
 800cd2c:	46ac      	mov	ip, r5
 800cd2e:	2937      	cmp	r1, #55	@ 0x37
 800cd30:	d82a      	bhi.n	800cd88 <osThreadNew+0x7c>
 800cd32:	6861      	ldr	r1, [r4, #4]
 800cd34:	07c9      	lsls	r1, r1, #31
 800cd36:	d427      	bmi.n	800cd88 <osThreadNew+0x7c>
        return (NULL);
      }

      if (attr->stack_size > 0U) {
 800cd38:	6966      	ldr	r6, [r4, #20]
 800cd3a:	b16e      	cbz	r6, 800cd58 <osThreadNew+0x4c>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800cd3c:	08b2      	lsrs	r2, r6, #2
      if (attr->name != NULL) {
 800cd3e:	6821      	ldr	r1, [r4, #0]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800cd40:	e9d4 7e02 	ldrd	r7, lr, [r4, #8]
 800cd44:	b157      	cbz	r7, 800cd5c <osThreadNew+0x50>
 800cd46:	f1be 0f5f 	cmp.w	lr, #95	@ 0x5f
 800cd4a:	d902      	bls.n	800cd52 <osThreadNew+0x46>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800cd4c:	6924      	ldr	r4, [r4, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800cd4e:	b104      	cbz	r4, 800cd52 <osThreadNew+0x46>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800cd50:	b9e6      	cbnz	r6, 800cd8c <osThreadNew+0x80>
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800cd52:	9805      	ldr	r0, [sp, #20]
}
 800cd54:	b007      	add	sp, #28
 800cd56:	bdf0      	pop	{r4, r5, r6, r7, pc}
    stack = configMINIMAL_STACK_SIZE;
 800cd58:	2280      	movs	r2, #128	@ 0x80
 800cd5a:	e7f0      	b.n	800cd3e <osThreadNew+0x32>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800cd5c:	f1be 0f00 	cmp.w	lr, #0
 800cd60:	d1f7      	bne.n	800cd52 <osThreadNew+0x46>
      if (mem == 0) {
 800cd62:	6924      	ldr	r4, [r4, #16]
 800cd64:	2c00      	cmp	r4, #0
 800cd66:	d1f4      	bne.n	800cd52 <osThreadNew+0x46>
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800cd68:	ac05      	add	r4, sp, #20
 800cd6a:	b292      	uxth	r2, r2
 800cd6c:	e9cd c400 	strd	ip, r4, [sp]
 800cd70:	f001 fbb7 	bl	800e4e2 <xTaskCreate>
 800cd74:	2801      	cmp	r0, #1
            hTask = NULL;
 800cd76:	bf1c      	itt	ne
 800cd78:	2300      	movne	r3, #0
 800cd7a:	9305      	strne	r3, [sp, #20]
 800cd7c:	e7e9      	b.n	800cd52 <osThreadNew+0x46>
    name = NULL;
 800cd7e:	4621      	mov	r1, r4
    prio  = (UBaseType_t)osPriorityNormal;
 800cd80:	f04f 0c18 	mov.w	ip, #24
    stack = configMINIMAL_STACK_SIZE;
 800cd84:	2280      	movs	r2, #128	@ 0x80
 800cd86:	e7ef      	b.n	800cd68 <osThreadNew+0x5c>
        return (NULL);
 800cd88:	4610      	mov	r0, r2
 800cd8a:	e7e3      	b.n	800cd54 <osThreadNew+0x48>
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800cd8c:	e9cd 4701 	strd	r4, r7, [sp, #4]
 800cd90:	9500      	str	r5, [sp, #0]
 800cd92:	f001 fb6e 	bl	800e472 <xTaskCreateStatic>
 800cd96:	9005      	str	r0, [sp, #20]
 800cd98:	e7db      	b.n	800cd52 <osThreadNew+0x46>

0800cd9a <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 800cd9a:	b570      	push	{r4, r5, r6, lr}
 800cd9c:	4605      	mov	r5, r0
 800cd9e:	f3ef 8605 	mrs	r6, IPSR
  const char *name;
  #endif

  hMutex = NULL;

  if (!IS_IRQ()) {
 800cda2:	b116      	cbz	r6, 800cdaa <osMutexNew+0x10>
  hMutex = NULL;
 800cda4:	2400      	movs	r4, #0
      }
    }
  }

  return ((osMutexId_t)hMutex);
}
 800cda6:	4620      	mov	r0, r4
 800cda8:	bd70      	pop	{r4, r5, r6, pc}
    if (attr != NULL) {
 800cdaa:	b110      	cbz	r0, 800cdb2 <osMutexNew+0x18>
      type = attr->attr_bits;
 800cdac:	6846      	ldr	r6, [r0, #4]
    if ((type & osMutexRobust) != osMutexRobust) {
 800cdae:	0733      	lsls	r3, r6, #28
 800cdb0:	d4f8      	bmi.n	800cda4 <osMutexNew+0xa>
    if ((type & osMutexRecursive) == osMutexRecursive) {
 800cdb2:	f006 0601 	and.w	r6, r6, #1
      if (attr != NULL) {
 800cdb6:	b17d      	cbz	r5, 800cdd8 <osMutexNew+0x3e>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800cdb8:	e9d5 1302 	ldrd	r1, r3, [r5, #8]
 800cdbc:	b151      	cbz	r1, 800cdd4 <osMutexNew+0x3a>
 800cdbe:	2b4f      	cmp	r3, #79	@ 0x4f
 800cdc0:	d9f0      	bls.n	800cda4 <osMutexNew+0xa>
          if (rmtx != 0U) {
 800cdc2:	b1de      	cbz	r6, 800cdfc <osMutexNew+0x62>
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800cdc4:	2004      	movs	r0, #4
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800cdc6:	f000 fec6 	bl	800db56 <xQueueCreateMutexStatic>
 800cdca:	4604      	mov	r4, r0
      if (hMutex != NULL) {
 800cdcc:	2800      	cmp	r0, #0
 800cdce:	d0e9      	beq.n	800cda4 <osMutexNew+0xa>
          name = attr->name;
 800cdd0:	682d      	ldr	r5, [r5, #0]
 800cdd2:	e00a      	b.n	800cdea <osMutexNew+0x50>
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800cdd4:	2b00      	cmp	r3, #0
 800cdd6:	d1e5      	bne.n	800cda4 <osMutexNew+0xa>
            if (rmtx != 0U) {
 800cdd8:	b196      	cbz	r6, 800ce00 <osMutexNew+0x66>
              hMutex = xSemaphoreCreateRecursiveMutex ();
 800cdda:	2004      	movs	r0, #4
              hMutex = xSemaphoreCreateMutex ();
 800cddc:	f000 feef 	bl	800dbbe <xQueueCreateMutex>
 800cde0:	4604      	mov	r4, r0
      if (hMutex != NULL) {
 800cde2:	2800      	cmp	r0, #0
 800cde4:	d0de      	beq.n	800cda4 <osMutexNew+0xa>
        if (attr != NULL) {
 800cde6:	2d00      	cmp	r5, #0
 800cde8:	d1f2      	bne.n	800cdd0 <osMutexNew+0x36>
        vQueueAddToRegistry (hMutex, name);
 800cdea:	4629      	mov	r1, r5
 800cdec:	4620      	mov	r0, r4
 800cdee:	f001 f97b 	bl	800e0e8 <vQueueAddToRegistry>
      if ((hMutex != NULL) && (rmtx != 0U)) {
 800cdf2:	2e00      	cmp	r6, #0
 800cdf4:	d0d7      	beq.n	800cda6 <osMutexNew+0xc>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 800cdf6:	f044 0401 	orr.w	r4, r4, #1
  return ((osMutexId_t)hMutex);
 800cdfa:	e7d4      	b.n	800cda6 <osMutexNew+0xc>
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800cdfc:	2001      	movs	r0, #1
 800cdfe:	e7e2      	b.n	800cdc6 <osMutexNew+0x2c>
              hMutex = xSemaphoreCreateMutex ();
 800ce00:	2001      	movs	r0, #1
 800ce02:	e7eb      	b.n	800cddc <osMutexNew+0x42>

0800ce04 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 800ce04:	b538      	push	{r3, r4, r5, lr}
 800ce06:	4603      	mov	r3, r0
 800ce08:	460c      	mov	r4, r1
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800ce0a:	f020 0001 	bic.w	r0, r0, #1

  rmtx = (uint32_t)mutex_id & 1U;
 800ce0e:	f003 0201 	and.w	r2, r3, #1
 800ce12:	f3ef 8505 	mrs	r5, IPSR

  stat = osOK;

  if (IS_IRQ()) {
 800ce16:	b995      	cbnz	r5, 800ce3e <osMutexAcquire+0x3a>
    stat = osErrorISR;
  }
  else if (hMutex == NULL) {
 800ce18:	2b01      	cmp	r3, #1
 800ce1a:	d913      	bls.n	800ce44 <osMutexAcquire+0x40>
    stat = osErrorParameter;
  }
  else {
    if (rmtx != 0U) {
 800ce1c:	b162      	cbz	r2, 800ce38 <osMutexAcquire+0x34>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 800ce1e:	f001 f8f4 	bl	800e00a <xQueueTakeMutexRecursive>
 800ce22:	2801      	cmp	r0, #1
 800ce24:	d101      	bne.n	800ce2a <osMutexAcquire+0x26>
  stat = osOK;
 800ce26:	2000      	movs	r0, #0
      }
    }
  }

  return (stat);
}
 800ce28:	bd38      	pop	{r3, r4, r5, pc}
          stat = osErrorResource;
 800ce2a:	2c00      	cmp	r4, #0
 800ce2c:	bf14      	ite	ne
 800ce2e:	f06f 0001 	mvnne.w	r0, #1
 800ce32:	f06f 0002 	mvneq.w	r0, #2
 800ce36:	e7f7      	b.n	800ce28 <osMutexAcquire+0x24>
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 800ce38:	f001 f82a 	bl	800de90 <xQueueSemaphoreTake>
 800ce3c:	e7f1      	b.n	800ce22 <osMutexAcquire+0x1e>
    stat = osErrorISR;
 800ce3e:	f06f 0005 	mvn.w	r0, #5
 800ce42:	e7f1      	b.n	800ce28 <osMutexAcquire+0x24>
    stat = osErrorParameter;
 800ce44:	f06f 0003 	mvn.w	r0, #3
 800ce48:	e7ee      	b.n	800ce28 <osMutexAcquire+0x24>

0800ce4a <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 800ce4a:	4602      	mov	r2, r0
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800ce4c:	f020 0001 	bic.w	r0, r0, #1
osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 800ce50:	b508      	push	{r3, lr}

  rmtx = (uint32_t)mutex_id & 1U;
 800ce52:	f002 0301 	and.w	r3, r2, #1
 800ce56:	f3ef 8105 	mrs	r1, IPSR

  stat = osOK;

  if (IS_IRQ()) {
 800ce5a:	b979      	cbnz	r1, 800ce7c <osMutexRelease+0x32>
    stat = osErrorISR;
  }
  else if (hMutex == NULL) {
 800ce5c:	2a01      	cmp	r2, #1
 800ce5e:	d910      	bls.n	800ce82 <osMutexRelease+0x38>
    stat = osErrorParameter;
  }
  else {
    if (rmtx != 0U) {
 800ce60:	b13b      	cbz	r3, 800ce72 <osMutexRelease+0x28>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 800ce62:	f000 fe8d 	bl	800db80 <xQueueGiveMutexRecursive>
 800ce66:	2801      	cmp	r0, #1
  stat = osOK;
 800ce68:	bf0c      	ite	eq
 800ce6a:	2000      	moveq	r0, #0
        stat = osErrorResource;
 800ce6c:	f06f 0002 	mvnne.w	r0, #2
      }
    }
  }

  return (stat);
}
 800ce70:	bd08      	pop	{r3, pc}
      if (xSemaphoreGive (hMutex) != pdPASS) {
 800ce72:	461a      	mov	r2, r3
 800ce74:	4619      	mov	r1, r3
 800ce76:	f000 fdbc 	bl	800d9f2 <xQueueGenericSend>
 800ce7a:	e7f4      	b.n	800ce66 <osMutexRelease+0x1c>
    stat = osErrorISR;
 800ce7c:	f06f 0005 	mvn.w	r0, #5
 800ce80:	e7f6      	b.n	800ce70 <osMutexRelease+0x26>
    stat = osErrorParameter;
 800ce82:	f06f 0003 	mvn.w	r0, #3
  return (stat);
 800ce86:	e7f3      	b.n	800ce70 <osMutexRelease+0x26>

0800ce88 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800ce88:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ce8a:	4604      	mov	r4, r0
 800ce8c:	460e      	mov	r6, r1
 800ce8e:	4615      	mov	r5, r2
 800ce90:	f3ef 8205 	mrs	r2, IPSR
  const char *name;
  #endif

  hSemaphore = NULL;

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800ce94:	b942      	cbnz	r2, 800cea8 <osSemaphoreNew+0x20>
 800ce96:	b138      	cbz	r0, 800cea8 <osSemaphoreNew+0x20>
 800ce98:	4288      	cmp	r0, r1
 800ce9a:	d305      	bcc.n	800cea8 <osSemaphoreNew+0x20>
    mem = -1;

    if (attr != NULL) {
 800ce9c:	b155      	cbz	r5, 800ceb4 <osSemaphoreNew+0x2c>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800ce9e:	e9d5 3702 	ldrd	r3, r7, [r5, #8]
 800cea2:	b12b      	cbz	r3, 800ceb0 <osSemaphoreNew+0x28>
 800cea4:	2f4f      	cmp	r7, #79	@ 0x4f
 800cea6:	d822      	bhi.n	800ceee <osSemaphoreNew+0x66>
  hSemaphore = NULL;
 800cea8:	2400      	movs	r4, #0
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
}
 800ceaa:	4620      	mov	r0, r4
 800ceac:	b003      	add	sp, #12
 800ceae:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800ceb0:	2f00      	cmp	r7, #0
 800ceb2:	d1f9      	bne.n	800cea8 <osSemaphoreNew+0x20>
      if (max_count == 1U) {
 800ceb4:	2c01      	cmp	r4, #1
 800ceb6:	d00c      	beq.n	800ced2 <osSemaphoreNew+0x4a>
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800ceb8:	4620      	mov	r0, r4
 800ceba:	4631      	mov	r1, r6
 800cebc:	f000 fd7b 	bl	800d9b6 <xQueueCreateCountingSemaphore>
      if (hSemaphore != NULL) {
 800cec0:	4604      	mov	r4, r0
 800cec2:	2800      	cmp	r0, #0
 800cec4:	d0f0      	beq.n	800cea8 <osSemaphoreNew+0x20>
        if (attr != NULL) {
 800cec6:	b985      	cbnz	r5, 800ceea <osSemaphoreNew+0x62>
        vQueueAddToRegistry (hSemaphore, name);
 800cec8:	4629      	mov	r1, r5
 800ceca:	4620      	mov	r0, r4
 800cecc:	f001 f90c 	bl	800e0e8 <vQueueAddToRegistry>
  return ((osSemaphoreId_t)hSemaphore);
 800ced0:	e7eb      	b.n	800ceaa <osSemaphoreNew+0x22>
            hSemaphore = xSemaphoreCreateBinary();
 800ced2:	2203      	movs	r2, #3
 800ced4:	2100      	movs	r1, #0
 800ced6:	2001      	movs	r0, #1
 800ced8:	f000 fd24 	bl	800d924 <xQueueGenericCreate>
 800cedc:	e00e      	b.n	800cefc <osSemaphoreNew+0x74>
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800cede:	461a      	mov	r2, r3
 800cee0:	f000 fd47 	bl	800d972 <xQueueCreateCountingSemaphoreStatic>
      if (hSemaphore != NULL) {
 800cee4:	4604      	mov	r4, r0
 800cee6:	2800      	cmp	r0, #0
 800cee8:	d0de      	beq.n	800cea8 <osSemaphoreNew+0x20>
          name = attr->name;
 800ceea:	682d      	ldr	r5, [r5, #0]
 800ceec:	e7ec      	b.n	800cec8 <osSemaphoreNew+0x40>
      if (max_count == 1U) {
 800ceee:	2801      	cmp	r0, #1
 800cef0:	d1f5      	bne.n	800cede <osSemaphoreNew+0x56>
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800cef2:	2103      	movs	r1, #3
 800cef4:	9100      	str	r1, [sp, #0]
 800cef6:	4611      	mov	r1, r2
 800cef8:	f000 fcc6 	bl	800d888 <xQueueGenericCreateStatic>
            hSemaphore = xSemaphoreCreateBinary();
 800cefc:	4604      	mov	r4, r0
        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800cefe:	2800      	cmp	r0, #0
 800cf00:	d0d2      	beq.n	800cea8 <osSemaphoreNew+0x20>
 800cf02:	2e00      	cmp	r6, #0
 800cf04:	d0df      	beq.n	800cec6 <osSemaphoreNew+0x3e>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800cf06:	2300      	movs	r3, #0
 800cf08:	461a      	mov	r2, r3
 800cf0a:	4619      	mov	r1, r3
 800cf0c:	f000 fd71 	bl	800d9f2 <xQueueGenericSend>
 800cf10:	2801      	cmp	r0, #1
 800cf12:	d0d8      	beq.n	800cec6 <osSemaphoreNew+0x3e>
            vSemaphoreDelete (hSemaphore);
 800cf14:	4620      	mov	r0, r4
 800cf16:	f001 f911 	bl	800e13c <vQueueDelete>
      if (hSemaphore != NULL) {
 800cf1a:	e7c5      	b.n	800cea8 <osSemaphoreNew+0x20>

0800cf1c <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800cf1c:	b513      	push	{r0, r1, r4, lr}
 800cf1e:	460c      	mov	r4, r1
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;

  if (hSemaphore == NULL) {
 800cf20:	b328      	cbz	r0, 800cf6e <osSemaphoreAcquire+0x52>
 800cf22:	f3ef 8305 	mrs	r3, IPSR
    stat = osErrorParameter;
  }
  else if (IS_IRQ()) {
 800cf26:	b1cb      	cbz	r3, 800cf5c <osSemaphoreAcquire+0x40>
    if (timeout != 0U) {
 800cf28:	bb09      	cbnz	r1, 800cf6e <osSemaphoreAcquire+0x52>
      stat = osErrorParameter;
    }
    else {
      yield = pdFALSE;

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800cf2a:	aa01      	add	r2, sp, #4
      yield = pdFALSE;
 800cf2c:	9101      	str	r1, [sp, #4]
      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800cf2e:	f001 f88d 	bl	800e04c <xQueueReceiveFromISR>
 800cf32:	2801      	cmp	r0, #1
 800cf34:	d003      	beq.n	800cf3e <osSemaphoreAcquire+0x22>
        stat = osErrorResource;
 800cf36:	f06f 0002 	mvn.w	r0, #2
      }
    }
  }

  return (stat);
}
 800cf3a:	b002      	add	sp, #8
 800cf3c:	bd10      	pop	{r4, pc}
        portYIELD_FROM_ISR (yield);
 800cf3e:	9b01      	ldr	r3, [sp, #4]
 800cf40:	b90b      	cbnz	r3, 800cf46 <osSemaphoreAcquire+0x2a>
  stat = osOK;
 800cf42:	2000      	movs	r0, #0
 800cf44:	e7f9      	b.n	800cf3a <osSemaphoreAcquire+0x1e>
        portYIELD_FROM_ISR (yield);
 800cf46:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800cf4a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cf4e:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800cf52:	f3bf 8f4f 	dsb	sy
 800cf56:	f3bf 8f6f 	isb	sy
 800cf5a:	e7f2      	b.n	800cf42 <osSemaphoreAcquire+0x26>
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800cf5c:	f000 ff98 	bl	800de90 <xQueueSemaphoreTake>
 800cf60:	2801      	cmp	r0, #1
 800cf62:	d0ee      	beq.n	800cf42 <osSemaphoreAcquire+0x26>
      if (timeout != 0U) {
 800cf64:	2c00      	cmp	r4, #0
 800cf66:	d0e6      	beq.n	800cf36 <osSemaphoreAcquire+0x1a>
        stat = osErrorTimeout;
 800cf68:	f06f 0001 	mvn.w	r0, #1
 800cf6c:	e7e5      	b.n	800cf3a <osSemaphoreAcquire+0x1e>
    stat = osErrorParameter;
 800cf6e:	f06f 0003 	mvn.w	r0, #3
  return (stat);
 800cf72:	e7e2      	b.n	800cf3a <osSemaphoreAcquire+0x1e>

0800cf74 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800cf74:	b507      	push	{r0, r1, r2, lr}
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;

  if (hSemaphore == NULL) {
 800cf76:	b318      	cbz	r0, 800cfc0 <osSemaphoreRelease+0x4c>
 800cf78:	f3ef 8305 	mrs	r3, IPSR
    stat = osErrorParameter;
  }
  else if (IS_IRQ()) {
 800cf7c:	b1cb      	cbz	r3, 800cfb2 <osSemaphoreRelease+0x3e>
    yield = pdFALSE;
 800cf7e:	2300      	movs	r3, #0

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800cf80:	a901      	add	r1, sp, #4
    yield = pdFALSE;
 800cf82:	9301      	str	r3, [sp, #4]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800cf84:	f000 fe95 	bl	800dcb2 <xQueueGiveFromISR>
 800cf88:	2801      	cmp	r0, #1
 800cf8a:	d004      	beq.n	800cf96 <osSemaphoreRelease+0x22>
      portYIELD_FROM_ISR (yield);
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
      stat = osErrorResource;
 800cf8c:	f06f 0002 	mvn.w	r0, #2
    }
  }

  return (stat);
}
 800cf90:	b003      	add	sp, #12
 800cf92:	f85d fb04 	ldr.w	pc, [sp], #4
      portYIELD_FROM_ISR (yield);
 800cf96:	9b01      	ldr	r3, [sp, #4]
 800cf98:	b14b      	cbz	r3, 800cfae <osSemaphoreRelease+0x3a>
 800cf9a:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800cf9e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cfa2:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800cfa6:	f3bf 8f4f 	dsb	sy
 800cfaa:	f3bf 8f6f 	isb	sy
  stat = osOK;
 800cfae:	2000      	movs	r0, #0
 800cfb0:	e7ee      	b.n	800cf90 <osSemaphoreRelease+0x1c>
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800cfb2:	461a      	mov	r2, r3
 800cfb4:	4619      	mov	r1, r3
 800cfb6:	f000 fd1c 	bl	800d9f2 <xQueueGenericSend>
 800cfba:	2801      	cmp	r0, #1
 800cfbc:	d0f7      	beq.n	800cfae <osSemaphoreRelease+0x3a>
 800cfbe:	e7e5      	b.n	800cf8c <osSemaphoreRelease+0x18>
    stat = osErrorParameter;
 800cfc0:	f06f 0003 	mvn.w	r0, #3
  return (stat);
 800cfc4:	e7e4      	b.n	800cf90 <osSemaphoreRelease+0x1c>

0800cfc6 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800cfc6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cfc8:	4605      	mov	r5, r0
 800cfca:	460e      	mov	r6, r1
 800cfcc:	4614      	mov	r4, r2
 800cfce:	f3ef 8705 	mrs	r7, IPSR
  const char *name;
  #endif

  hQueue = NULL;

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800cfd2:	b11f      	cbz	r7, 800cfdc <osMessageQueueNew+0x16>
  hQueue = NULL;
 800cfd4:	2500      	movs	r5, #0
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
}
 800cfd6:	4628      	mov	r0, r5
 800cfd8:	b003      	add	sp, #12
 800cfda:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800cfdc:	2800      	cmp	r0, #0
 800cfde:	d0f9      	beq.n	800cfd4 <osMessageQueueNew+0xe>
 800cfe0:	2900      	cmp	r1, #0
 800cfe2:	d0f7      	beq.n	800cfd4 <osMessageQueueNew+0xe>
    if (attr != NULL) {
 800cfe4:	b1da      	cbz	r2, 800d01e <osMessageQueueNew+0x58>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800cfe6:	e9d2 3202 	ldrd	r3, r2, [r2, #8]
 800cfea:	b183      	cbz	r3, 800d00e <osMessageQueueNew+0x48>
 800cfec:	2a4f      	cmp	r2, #79	@ 0x4f
 800cfee:	d9f1      	bls.n	800cfd4 <osMessageQueueNew+0xe>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800cff0:	6922      	ldr	r2, [r4, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800cff2:	2a00      	cmp	r2, #0
 800cff4:	d0ee      	beq.n	800cfd4 <osMessageQueueNew+0xe>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800cff6:	434d      	muls	r5, r1
 800cff8:	6966      	ldr	r6, [r4, #20]
 800cffa:	42ae      	cmp	r6, r5
 800cffc:	d3ea      	bcc.n	800cfd4 <osMessageQueueNew+0xe>
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800cffe:	9700      	str	r7, [sp, #0]
 800d000:	f000 fc42 	bl	800d888 <xQueueGenericCreateStatic>
    if (hQueue != NULL) {
 800d004:	4605      	mov	r5, r0
 800d006:	2800      	cmp	r0, #0
 800d008:	d0e4      	beq.n	800cfd4 <osMessageQueueNew+0xe>
        name = attr->name;
 800d00a:	6824      	ldr	r4, [r4, #0]
 800d00c:	e011      	b.n	800d032 <osMessageQueueNew+0x6c>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800d00e:	2a00      	cmp	r2, #0
 800d010:	d1e0      	bne.n	800cfd4 <osMessageQueueNew+0xe>
 800d012:	6923      	ldr	r3, [r4, #16]
 800d014:	2b00      	cmp	r3, #0
 800d016:	d1dd      	bne.n	800cfd4 <osMessageQueueNew+0xe>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800d018:	6963      	ldr	r3, [r4, #20]
 800d01a:	2b00      	cmp	r3, #0
 800d01c:	d1da      	bne.n	800cfd4 <osMessageQueueNew+0xe>
          hQueue = xQueueCreate (msg_count, msg_size);
 800d01e:	4628      	mov	r0, r5
 800d020:	2200      	movs	r2, #0
 800d022:	4631      	mov	r1, r6
 800d024:	f000 fc7e 	bl	800d924 <xQueueGenericCreate>
    if (hQueue != NULL) {
 800d028:	4605      	mov	r5, r0
 800d02a:	2800      	cmp	r0, #0
 800d02c:	d0d2      	beq.n	800cfd4 <osMessageQueueNew+0xe>
      if (attr != NULL) {
 800d02e:	2c00      	cmp	r4, #0
 800d030:	d1eb      	bne.n	800d00a <osMessageQueueNew+0x44>
      vQueueAddToRegistry (hQueue, name);
 800d032:	4621      	mov	r1, r4
 800d034:	4628      	mov	r0, r5
 800d036:	f001 f857 	bl	800e0e8 <vQueueAddToRegistry>
  return ((osMessageQueueId_t)hQueue);
 800d03a:	e7cc      	b.n	800cfd6 <osMessageQueueNew+0x10>

0800d03c <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800d03c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d03e:	461c      	mov	r4, r3
 800d040:	f3ef 8605 	mrs	r6, IPSR

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;

  if (IS_IRQ()) {
 800d044:	b1de      	cbz	r6, 800d07e <osMessageQueuePut+0x42>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800d046:	b338      	cbz	r0, 800d098 <osMessageQueuePut+0x5c>
 800d048:	b331      	cbz	r1, 800d098 <osMessageQueuePut+0x5c>
 800d04a:	bb2b      	cbnz	r3, 800d098 <osMessageQueuePut+0x5c>
      stat = osErrorParameter;
    }
    else {
      yield = pdFALSE;

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800d04c:	aa01      	add	r2, sp, #4
      yield = pdFALSE;
 800d04e:	9301      	str	r3, [sp, #4]
      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800d050:	f000 fdd2 	bl	800dbf8 <xQueueGenericSendFromISR>
 800d054:	2801      	cmp	r0, #1
 800d056:	d003      	beq.n	800d060 <osMessageQueuePut+0x24>
        stat = osErrorResource;
 800d058:	f06f 0002 	mvn.w	r0, #2
      }
    }
  }

  return (stat);
}
 800d05c:	b002      	add	sp, #8
 800d05e:	bd70      	pop	{r4, r5, r6, pc}
        portYIELD_FROM_ISR (yield);
 800d060:	9b01      	ldr	r3, [sp, #4]
 800d062:	b90b      	cbnz	r3, 800d068 <osMessageQueuePut+0x2c>
  stat = osOK;
 800d064:	2000      	movs	r0, #0
 800d066:	e7f9      	b.n	800d05c <osMessageQueuePut+0x20>
        portYIELD_FROM_ISR (yield);
 800d068:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800d06c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d070:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800d074:	f3bf 8f4f 	dsb	sy
 800d078:	f3bf 8f6f 	isb	sy
 800d07c:	e7f2      	b.n	800d064 <osMessageQueuePut+0x28>
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800d07e:	b158      	cbz	r0, 800d098 <osMessageQueuePut+0x5c>
 800d080:	b151      	cbz	r1, 800d098 <osMessageQueuePut+0x5c>
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800d082:	4633      	mov	r3, r6
 800d084:	4622      	mov	r2, r4
 800d086:	f000 fcb4 	bl	800d9f2 <xQueueGenericSend>
 800d08a:	2801      	cmp	r0, #1
 800d08c:	d0ea      	beq.n	800d064 <osMessageQueuePut+0x28>
        if (timeout != 0U) {
 800d08e:	2c00      	cmp	r4, #0
 800d090:	d0e2      	beq.n	800d058 <osMessageQueuePut+0x1c>
          stat = osErrorTimeout;
 800d092:	f06f 0001 	mvn.w	r0, #1
 800d096:	e7e1      	b.n	800d05c <osMessageQueuePut+0x20>
      stat = osErrorParameter;
 800d098:	f06f 0003 	mvn.w	r0, #3
  return (stat);
 800d09c:	e7de      	b.n	800d05c <osMessageQueuePut+0x20>

0800d09e <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800d09e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d0a0:	461c      	mov	r4, r3
 800d0a2:	f3ef 8305 	mrs	r3, IPSR

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;

  if (IS_IRQ()) {
 800d0a6:	b1db      	cbz	r3, 800d0e0 <osMessageQueueGet+0x42>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800d0a8:	b330      	cbz	r0, 800d0f8 <osMessageQueueGet+0x5a>
 800d0aa:	b329      	cbz	r1, 800d0f8 <osMessageQueueGet+0x5a>
 800d0ac:	bb24      	cbnz	r4, 800d0f8 <osMessageQueueGet+0x5a>
      stat = osErrorParameter;
    }
    else {
      yield = pdFALSE;

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800d0ae:	aa01      	add	r2, sp, #4
      yield = pdFALSE;
 800d0b0:	9401      	str	r4, [sp, #4]
      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800d0b2:	f000 ffcb 	bl	800e04c <xQueueReceiveFromISR>
 800d0b6:	2801      	cmp	r0, #1
 800d0b8:	d003      	beq.n	800d0c2 <osMessageQueueGet+0x24>
        stat = osErrorResource;
 800d0ba:	f06f 0002 	mvn.w	r0, #2
      }
    }
  }

  return (stat);
}
 800d0be:	b003      	add	sp, #12
 800d0c0:	bd30      	pop	{r4, r5, pc}
        portYIELD_FROM_ISR (yield);
 800d0c2:	9b01      	ldr	r3, [sp, #4]
 800d0c4:	b90b      	cbnz	r3, 800d0ca <osMessageQueueGet+0x2c>
  stat = osOK;
 800d0c6:	2000      	movs	r0, #0
 800d0c8:	e7f9      	b.n	800d0be <osMessageQueueGet+0x20>
        portYIELD_FROM_ISR (yield);
 800d0ca:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800d0ce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d0d2:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800d0d6:	f3bf 8f4f 	dsb	sy
 800d0da:	f3bf 8f6f 	isb	sy
 800d0de:	e7f2      	b.n	800d0c6 <osMessageQueueGet+0x28>
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800d0e0:	b150      	cbz	r0, 800d0f8 <osMessageQueueGet+0x5a>
 800d0e2:	b149      	cbz	r1, 800d0f8 <osMessageQueueGet+0x5a>
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800d0e4:	4622      	mov	r2, r4
 800d0e6:	f000 fe35 	bl	800dd54 <xQueueReceive>
 800d0ea:	2801      	cmp	r0, #1
 800d0ec:	d0eb      	beq.n	800d0c6 <osMessageQueueGet+0x28>
        if (timeout != 0U) {
 800d0ee:	2c00      	cmp	r4, #0
 800d0f0:	d0e3      	beq.n	800d0ba <osMessageQueueGet+0x1c>
          stat = osErrorTimeout;
 800d0f2:	f06f 0001 	mvn.w	r0, #1
 800d0f6:	e7e2      	b.n	800d0be <osMessageQueueGet+0x20>
      stat = osErrorParameter;
 800d0f8:	f06f 0003 	mvn.w	r0, #3
  return (stat);
 800d0fc:	e7df      	b.n	800d0be <osMessageQueueGet+0x20>
	...

0800d100 <vApplicationGetIdleTaskMemory>:
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800d100:	4b03      	ldr	r3, [pc, #12]	@ (800d110 <vApplicationGetIdleTaskMemory+0x10>)
 800d102:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800d104:	4b03      	ldr	r3, [pc, #12]	@ (800d114 <vApplicationGetIdleTaskMemory+0x14>)
 800d106:	600b      	str	r3, [r1, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800d108:	2380      	movs	r3, #128	@ 0x80
 800d10a:	6013      	str	r3, [r2, #0]
}
 800d10c:	4770      	bx	lr
 800d10e:	bf00      	nop
 800d110:	24010080 	.word	0x24010080
 800d114:	2400fe80 	.word	0x2400fe80

0800d118 <vApplicationGetTimerTaskMemory>:
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800d118:	4b03      	ldr	r3, [pc, #12]	@ (800d128 <vApplicationGetTimerTaskMemory+0x10>)
 800d11a:	6003      	str	r3, [r0, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800d11c:	4b03      	ldr	r3, [pc, #12]	@ (800d12c <vApplicationGetTimerTaskMemory+0x14>)
 800d11e:	600b      	str	r3, [r1, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800d120:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800d124:	6013      	str	r3, [r2, #0]
}
 800d126:	4770      	bx	lr
 800d128:	2400fe20 	.word	0x2400fe20
 800d12c:	2400fa20 	.word	0x2400fa20

0800d130 <prvInsertBlockIntoFreeList>:
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800d130:	4b10      	ldr	r3, [pc, #64]	@ (800d174 <prvInsertBlockIntoFreeList+0x44>)
{
 800d132:	b510      	push	{r4, lr}
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800d134:	461a      	mov	r2, r3
 800d136:	681b      	ldr	r3, [r3, #0]
 800d138:	4283      	cmp	r3, r0
 800d13a:	d3fb      	bcc.n	800d134 <prvInsertBlockIntoFreeList+0x4>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800d13c:	6854      	ldr	r4, [r2, #4]
 800d13e:	1911      	adds	r1, r2, r4
 800d140:	4288      	cmp	r0, r1
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800d142:	bf01      	itttt	eq
 800d144:	6841      	ldreq	r1, [r0, #4]
 800d146:	4610      	moveq	r0, r2
 800d148:	1909      	addeq	r1, r1, r4
 800d14a:	6051      	streq	r1, [r2, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800d14c:	6844      	ldr	r4, [r0, #4]
 800d14e:	1901      	adds	r1, r0, r4
 800d150:	428b      	cmp	r3, r1
 800d152:	d10c      	bne.n	800d16e <prvInsertBlockIntoFreeList+0x3e>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800d154:	4908      	ldr	r1, [pc, #32]	@ (800d178 <prvInsertBlockIntoFreeList+0x48>)
 800d156:	6809      	ldr	r1, [r1, #0]
 800d158:	428b      	cmp	r3, r1
 800d15a:	d003      	beq.n	800d164 <prvInsertBlockIntoFreeList+0x34>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800d15c:	6859      	ldr	r1, [r3, #4]
 800d15e:	4421      	add	r1, r4
 800d160:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800d162:	6819      	ldr	r1, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800d164:	4290      	cmp	r0, r2
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800d166:	6001      	str	r1, [r0, #0]
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800d168:	bf18      	it	ne
 800d16a:	6010      	strne	r0, [r2, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d16c:	bd10      	pop	{r4, pc}
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800d16e:	4619      	mov	r1, r3
 800d170:	e7f8      	b.n	800d164 <prvInsertBlockIntoFreeList+0x34>
 800d172:	bf00      	nop
 800d174:	240100fc 	.word	0x240100fc
 800d178:	240100f8 	.word	0x240100f8

0800d17c <pvPortMalloc>:
{
 800d17c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d180:	4604      	mov	r4, r0
	vTaskSuspendAll();
 800d182:	f001 f9dd 	bl	800e540 <vTaskSuspendAll>
		if( pxEnd == NULL )
 800d186:	4940      	ldr	r1, [pc, #256]	@ (800d288 <pvPortMalloc+0x10c>)
 800d188:	4d40      	ldr	r5, [pc, #256]	@ (800d28c <pvPortMalloc+0x110>)
 800d18a:	680b      	ldr	r3, [r1, #0]
 800d18c:	b9f3      	cbnz	r3, 800d1cc <pvPortMalloc+0x50>
	uxAddress = ( size_t ) ucHeap;
 800d18e:	4a40      	ldr	r2, [pc, #256]	@ (800d290 <pvPortMalloc+0x114>)
	xStart.xBlockSize = ( size_t ) 0;
 800d190:	2000      	movs	r0, #0
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800d192:	0756      	lsls	r6, r2, #29
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800d194:	4e3f      	ldr	r6, [pc, #252]	@ (800d294 <pvPortMalloc+0x118>)
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800d196:	bf1b      	ittet	ne
 800d198:	3207      	addne	r2, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800d19a:	4b3f      	ldrne	r3, [pc, #252]	@ (800d298 <pvPortMalloc+0x11c>)
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800d19c:	4b3f      	ldreq	r3, [pc, #252]	@ (800d29c <pvPortMalloc+0x120>)
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d19e:	f022 0207 	bicne.w	r2, r2, #7
	xStart.xBlockSize = ( size_t ) 0;
 800d1a2:	6070      	str	r0, [r6, #4]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800d1a4:	bf18      	it	ne
 800d1a6:	1a9b      	subne	r3, r3, r2
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800d1a8:	6032      	str	r2, [r6, #0]
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800d1aa:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
 800d1ac:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d1ae:	f023 0307 	bic.w	r3, r3, #7
	pxEnd->pxNextFreeBlock = NULL;
 800d1b2:	e9c3 0000 	strd	r0, r0, [r3]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800d1b6:	1a98      	subs	r0, r3, r2
	pxEnd = ( void * ) uxAddress;
 800d1b8:	600b      	str	r3, [r1, #0]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800d1ba:	e9c2 3000 	strd	r3, r0, [r2]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d1be:	4b38      	ldr	r3, [pc, #224]	@ (800d2a0 <pvPortMalloc+0x124>)
 800d1c0:	6018      	str	r0, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d1c2:	4b38      	ldr	r3, [pc, #224]	@ (800d2a4 <pvPortMalloc+0x128>)
 800d1c4:	6018      	str	r0, [r3, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800d1c6:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800d1ca:	602b      	str	r3, [r5, #0]
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800d1cc:	682e      	ldr	r6, [r5, #0]
 800d1ce:	4226      	tst	r6, r4
 800d1d0:	d155      	bne.n	800d27e <pvPortMalloc+0x102>
			if( xWantedSize > 0 )
 800d1d2:	2c00      	cmp	r4, #0
 800d1d4:	d046      	beq.n	800d264 <pvPortMalloc+0xe8>
				xWantedSize += xHeapStructSize;
 800d1d6:	f104 0308 	add.w	r3, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800d1da:	0760      	lsls	r0, r4, #29
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800d1dc:	bf1c      	itt	ne
 800d1de:	f023 0307 	bicne.w	r3, r3, #7
 800d1e2:	3308      	addne	r3, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800d1e4:	2b00      	cmp	r3, #0
 800d1e6:	d04a      	beq.n	800d27e <pvPortMalloc+0x102>
 800d1e8:	4f2e      	ldr	r7, [pc, #184]	@ (800d2a4 <pvPortMalloc+0x128>)
 800d1ea:	683c      	ldr	r4, [r7, #0]
 800d1ec:	429c      	cmp	r4, r3
 800d1ee:	d346      	bcc.n	800d27e <pvPortMalloc+0x102>
				pxBlock = xStart.pxNextFreeBlock;
 800d1f0:	4a28      	ldr	r2, [pc, #160]	@ (800d294 <pvPortMalloc+0x118>)
 800d1f2:	6815      	ldr	r5, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d1f4:	6868      	ldr	r0, [r5, #4]
 800d1f6:	4298      	cmp	r0, r3
 800d1f8:	d204      	bcs.n	800d204 <pvPortMalloc+0x88>
 800d1fa:	f8d5 c000 	ldr.w	ip, [r5]
 800d1fe:	f1bc 0f00 	cmp.w	ip, #0
 800d202:	d115      	bne.n	800d230 <pvPortMalloc+0xb4>
				if( pxBlock != pxEnd )
 800d204:	6809      	ldr	r1, [r1, #0]
 800d206:	42a9      	cmp	r1, r5
 800d208:	d039      	beq.n	800d27e <pvPortMalloc+0x102>
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800d20a:	6829      	ldr	r1, [r5, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800d20c:	f8d2 8000 	ldr.w	r8, [r2]
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800d210:	6011      	str	r1, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800d212:	1ac2      	subs	r2, r0, r3
 800d214:	2a10      	cmp	r2, #16
 800d216:	d912      	bls.n	800d23e <pvPortMalloc+0xc2>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800d218:	18e8      	adds	r0, r5, r3
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d21a:	0741      	lsls	r1, r0, #29
 800d21c:	d00b      	beq.n	800d236 <pvPortMalloc+0xba>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800d21e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d222:	f383 8811 	msr	BASEPRI, r3
 800d226:	f3bf 8f6f 	isb	sy
 800d22a:	f3bf 8f4f 	dsb	sy
 800d22e:	e7fe      	b.n	800d22e <pvPortMalloc+0xb2>
 800d230:	462a      	mov	r2, r5
 800d232:	4665      	mov	r5, ip
 800d234:	e7de      	b.n	800d1f4 <pvPortMalloc+0x78>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800d236:	6042      	str	r2, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 800d238:	606b      	str	r3, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800d23a:	f7ff ff79 	bl	800d130 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800d23e:	686a      	ldr	r2, [r5, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800d240:	2300      	movs	r3, #0
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800d242:	4917      	ldr	r1, [pc, #92]	@ (800d2a0 <pvPortMalloc+0x124>)
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800d244:	1aa4      	subs	r4, r4, r2
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800d246:	4316      	orrs	r6, r2
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800d248:	6808      	ldr	r0, [r1, #0]
					xNumberOfSuccessfulAllocations++;
 800d24a:	4a17      	ldr	r2, [pc, #92]	@ (800d2a8 <pvPortMalloc+0x12c>)
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800d24c:	4284      	cmp	r4, r0
					pxBlock->pxNextFreeBlock = NULL;
 800d24e:	602b      	str	r3, [r5, #0]
					xNumberOfSuccessfulAllocations++;
 800d250:	6813      	ldr	r3, [r2, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800d252:	603c      	str	r4, [r7, #0]
					xNumberOfSuccessfulAllocations++;
 800d254:	f103 0301 	add.w	r3, r3, #1
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800d258:	bf38      	it	cc
 800d25a:	600c      	strcc	r4, [r1, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800d25c:	f108 0408 	add.w	r4, r8, #8
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800d260:	606e      	str	r6, [r5, #4]
					xNumberOfSuccessfulAllocations++;
 800d262:	6013      	str	r3, [r2, #0]
	( void ) xTaskResumeAll();
 800d264:	f001 fa10 	bl	800e688 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800d268:	0763      	lsls	r3, r4, #29
 800d26a:	d00a      	beq.n	800d282 <pvPortMalloc+0x106>
 800d26c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d270:	f383 8811 	msr	BASEPRI, r3
 800d274:	f3bf 8f6f 	isb	sy
 800d278:	f3bf 8f4f 	dsb	sy
 800d27c:	e7fe      	b.n	800d27c <pvPortMalloc+0x100>
void *pvReturn = NULL;
 800d27e:	2400      	movs	r4, #0
 800d280:	e7f0      	b.n	800d264 <pvPortMalloc+0xe8>
}
 800d282:	4620      	mov	r0, r4
 800d284:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d288:	240100f8 	.word	0x240100f8
 800d28c:	240100e4 	.word	0x240100e4
 800d290:	24010104 	.word	0x24010104
 800d294:	240100fc 	.word	0x240100fc
 800d298:	240287a4 	.word	0x240287a4
 800d29c:	000186a0 	.word	0x000186a0
 800d2a0:	240100f0 	.word	0x240100f0
 800d2a4:	240100f4 	.word	0x240100f4
 800d2a8:	240100ec 	.word	0x240100ec

0800d2ac <vPortFree>:
{
 800d2ac:	b510      	push	{r4, lr}
	if( pv != NULL )
 800d2ae:	4604      	mov	r4, r0
 800d2b0:	b390      	cbz	r0, 800d318 <vPortFree+0x6c>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800d2b2:	4a1a      	ldr	r2, [pc, #104]	@ (800d31c <vPortFree+0x70>)
 800d2b4:	f850 3c04 	ldr.w	r3, [r0, #-4]
 800d2b8:	6812      	ldr	r2, [r2, #0]
 800d2ba:	4213      	tst	r3, r2
 800d2bc:	d108      	bne.n	800d2d0 <vPortFree+0x24>
 800d2be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d2c2:	f383 8811 	msr	BASEPRI, r3
 800d2c6:	f3bf 8f6f 	isb	sy
 800d2ca:	f3bf 8f4f 	dsb	sy
 800d2ce:	e7fe      	b.n	800d2ce <vPortFree+0x22>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800d2d0:	f850 1c08 	ldr.w	r1, [r0, #-8]
 800d2d4:	b141      	cbz	r1, 800d2e8 <vPortFree+0x3c>
 800d2d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d2da:	f383 8811 	msr	BASEPRI, r3
 800d2de:	f3bf 8f6f 	isb	sy
 800d2e2:	f3bf 8f4f 	dsb	sy
 800d2e6:	e7fe      	b.n	800d2e6 <vPortFree+0x3a>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800d2e8:	ea23 0302 	bic.w	r3, r3, r2
 800d2ec:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 800d2f0:	f001 f926 	bl	800e540 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 800d2f4:	4a0a      	ldr	r2, [pc, #40]	@ (800d320 <vPortFree+0x74>)
 800d2f6:	f854 3c04 	ldr.w	r3, [r4, #-4]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800d2fa:	f1a4 0008 	sub.w	r0, r4, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 800d2fe:	6811      	ldr	r1, [r2, #0]
 800d300:	440b      	add	r3, r1
 800d302:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800d304:	f7ff ff14 	bl	800d130 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800d308:	4a06      	ldr	r2, [pc, #24]	@ (800d324 <vPortFree+0x78>)
 800d30a:	6813      	ldr	r3, [r2, #0]
 800d30c:	3301      	adds	r3, #1
}
 800d30e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
					xNumberOfSuccessfulFrees++;
 800d312:	6013      	str	r3, [r2, #0]
				( void ) xTaskResumeAll();
 800d314:	f001 b9b8 	b.w	800e688 <xTaskResumeAll>
}
 800d318:	bd10      	pop	{r4, pc}
 800d31a:	bf00      	nop
 800d31c:	240100e4 	.word	0x240100e4
 800d320:	240100f4 	.word	0x240100f4
 800d324:	240100e8 	.word	0x240100e8

0800d328 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d328:	f100 0308 	add.w	r3, r0, #8

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800d32c:	f04f 32ff 	mov.w	r2, #4294967295
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d330:	6043      	str	r3, [r0, #4]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d332:	6103      	str	r3, [r0, #16]
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d334:	e9c0 2302 	strd	r2, r3, [r0, #8]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800d338:	2300      	movs	r3, #0
 800d33a:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800d33c:	4770      	bx	lr

0800d33e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800d33e:	2300      	movs	r3, #0
 800d340:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800d342:	4770      	bx	lr

0800d344 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 800d344:	6843      	ldr	r3, [r0, #4]

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800d346:	689a      	ldr	r2, [r3, #8]
	pxNewListItem->pxNext = pxIndex;
 800d348:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800d34a:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800d34c:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800d34e:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 800d350:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pxContainer = pxList;
 800d352:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 800d354:	3301      	adds	r3, #1
 800d356:	6003      	str	r3, [r0, #0]
}
 800d358:	4770      	bx	lr

0800d35a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800d35a:	b530      	push	{r4, r5, lr}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800d35c:	680c      	ldr	r4, [r1, #0]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800d35e:	1c63      	adds	r3, r4, #1
 800d360:	d10a      	bne.n	800d378 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800d362:	6903      	ldr	r3, [r0, #16]
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800d364:	685a      	ldr	r2, [r3, #4]
 800d366:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800d368:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800d36a:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 800d36c:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 800d36e:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pxContainer = pxList;
 800d370:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 800d372:	3301      	adds	r3, #1
 800d374:	6003      	str	r3, [r0, #0]
}
 800d376:	bd30      	pop	{r4, r5, pc}
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800d378:	f100 0208 	add.w	r2, r0, #8
 800d37c:	4613      	mov	r3, r2
 800d37e:	6852      	ldr	r2, [r2, #4]
 800d380:	6815      	ldr	r5, [r2, #0]
 800d382:	42a5      	cmp	r5, r4
 800d384:	d9fa      	bls.n	800d37c <vListInsert+0x22>
 800d386:	e7ed      	b.n	800d364 <vListInsert+0xa>

0800d388 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800d388:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800d38a:	e9d0 1201 	ldrd	r1, r2, [r0, #4]
 800d38e:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800d390:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800d392:	6859      	ldr	r1, [r3, #4]
 800d394:	4281      	cmp	r1, r0
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800d396:	bf08      	it	eq
 800d398:	605a      	streq	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800d39a:	2200      	movs	r2, #0
 800d39c:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 800d39e:	681a      	ldr	r2, [r3, #0]
 800d3a0:	3a01      	subs	r2, #1
 800d3a2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800d3a4:	6818      	ldr	r0, [r3, #0]
}
 800d3a6:	4770      	bx	lr

0800d3a8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800d3a8:	4808      	ldr	r0, [pc, #32]	@ (800d3cc <prvPortStartFirstTask+0x24>)
 800d3aa:	6800      	ldr	r0, [r0, #0]
 800d3ac:	6800      	ldr	r0, [r0, #0]
 800d3ae:	f380 8808 	msr	MSP, r0
 800d3b2:	f04f 0000 	mov.w	r0, #0
 800d3b6:	f380 8814 	msr	CONTROL, r0
 800d3ba:	b662      	cpsie	i
 800d3bc:	b661      	cpsie	f
 800d3be:	f3bf 8f4f 	dsb	sy
 800d3c2:	f3bf 8f6f 	isb	sy
 800d3c6:	df00      	svc	0
 800d3c8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800d3ca:	0000      	.short	0x0000
 800d3cc:	e000ed08 	.word	0xe000ed08

0800d3d0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800d3d0:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800d3e0 <vPortEnableVFP+0x10>
 800d3d4:	6801      	ldr	r1, [r0, #0]
 800d3d6:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800d3da:	6001      	str	r1, [r0, #0]
 800d3dc:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800d3de:	0000      	.short	0x0000
 800d3e0:	e000ed88 	.word	0xe000ed88

0800d3e4 <prvTaskExitError>:
volatile uint32_t ulDummy = 0;
 800d3e4:	2300      	movs	r3, #0
{
 800d3e6:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 800d3e8:	9301      	str	r3, [sp, #4]
	configASSERT( uxCriticalNesting == ~0UL );
 800d3ea:	4b0d      	ldr	r3, [pc, #52]	@ (800d420 <prvTaskExitError+0x3c>)
 800d3ec:	681b      	ldr	r3, [r3, #0]
 800d3ee:	3301      	adds	r3, #1
 800d3f0:	d008      	beq.n	800d404 <prvTaskExitError+0x20>
 800d3f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d3f6:	f383 8811 	msr	BASEPRI, r3
 800d3fa:	f3bf 8f6f 	isb	sy
 800d3fe:	f3bf 8f4f 	dsb	sy
 800d402:	e7fe      	b.n	800d402 <prvTaskExitError+0x1e>
 800d404:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d408:	f383 8811 	msr	BASEPRI, r3
 800d40c:	f3bf 8f6f 	isb	sy
 800d410:	f3bf 8f4f 	dsb	sy
	while( ulDummy == 0 )
 800d414:	9b01      	ldr	r3, [sp, #4]
 800d416:	2b00      	cmp	r3, #0
 800d418:	d0fc      	beq.n	800d414 <prvTaskExitError+0x30>
}
 800d41a:	b002      	add	sp, #8
 800d41c:	4770      	bx	lr
 800d41e:	bf00      	nop
 800d420:	24000078 	.word	0x24000078

0800d424 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800d424:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800d428:	f021 0101 	bic.w	r1, r1, #1
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800d42c:	f840 2c20 	str.w	r2, [r0, #-32]
}
 800d430:	3844      	subs	r0, #68	@ 0x44
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800d432:	6403      	str	r3, [r0, #64]	@ 0x40
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800d434:	4b03      	ldr	r3, [pc, #12]	@ (800d444 <pxPortInitialiseStack+0x20>)
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800d436:	63c1      	str	r1, [r0, #60]	@ 0x3c
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800d438:	6383      	str	r3, [r0, #56]	@ 0x38
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800d43a:	f06f 0302 	mvn.w	r3, #2
 800d43e:	6203      	str	r3, [r0, #32]
}
 800d440:	4770      	bx	lr
 800d442:	bf00      	nop
 800d444:	0800d3e5 	.word	0x0800d3e5
	...

0800d450 <SVC_Handler>:
	__asm volatile (
 800d450:	4b07      	ldr	r3, [pc, #28]	@ (800d470 <pxCurrentTCBConst2>)
 800d452:	6819      	ldr	r1, [r3, #0]
 800d454:	6808      	ldr	r0, [r1, #0]
 800d456:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d45a:	f380 8809 	msr	PSP, r0
 800d45e:	f3bf 8f6f 	isb	sy
 800d462:	f04f 0000 	mov.w	r0, #0
 800d466:	f380 8811 	msr	BASEPRI, r0
 800d46a:	4770      	bx	lr
 800d46c:	f3af 8000 	nop.w

0800d470 <pxCurrentTCBConst2>:
 800d470:	24028ce4 	.word	0x24028ce4

0800d474 <vPortEnterCritical>:
 800d474:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d478:	f383 8811 	msr	BASEPRI, r3
 800d47c:	f3bf 8f6f 	isb	sy
 800d480:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 800d484:	4a0a      	ldr	r2, [pc, #40]	@ (800d4b0 <vPortEnterCritical+0x3c>)
 800d486:	6813      	ldr	r3, [r2, #0]
 800d488:	3301      	adds	r3, #1
	if( uxCriticalNesting == 1 )
 800d48a:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 800d48c:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 800d48e:	d10e      	bne.n	800d4ae <vPortEnterCritical+0x3a>
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800d490:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800d494:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	@ 0xd04
 800d498:	b2db      	uxtb	r3, r3
 800d49a:	b143      	cbz	r3, 800d4ae <vPortEnterCritical+0x3a>
 800d49c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d4a0:	f383 8811 	msr	BASEPRI, r3
 800d4a4:	f3bf 8f6f 	isb	sy
 800d4a8:	f3bf 8f4f 	dsb	sy
 800d4ac:	e7fe      	b.n	800d4ac <vPortEnterCritical+0x38>
}
 800d4ae:	4770      	bx	lr
 800d4b0:	24000078 	.word	0x24000078

0800d4b4 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 800d4b4:	4a08      	ldr	r2, [pc, #32]	@ (800d4d8 <vPortExitCritical+0x24>)
 800d4b6:	6813      	ldr	r3, [r2, #0]
 800d4b8:	b943      	cbnz	r3, 800d4cc <vPortExitCritical+0x18>
 800d4ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d4be:	f383 8811 	msr	BASEPRI, r3
 800d4c2:	f3bf 8f6f 	isb	sy
 800d4c6:	f3bf 8f4f 	dsb	sy
 800d4ca:	e7fe      	b.n	800d4ca <vPortExitCritical+0x16>
	uxCriticalNesting--;
 800d4cc:	3b01      	subs	r3, #1
 800d4ce:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800d4d0:	b90b      	cbnz	r3, 800d4d6 <vPortExitCritical+0x22>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800d4d2:	f383 8811 	msr	BASEPRI, r3
}
 800d4d6:	4770      	bx	lr
 800d4d8:	24000078 	.word	0x24000078
 800d4dc:	00000000 	.word	0x00000000

0800d4e0 <PendSV_Handler>:
	__asm volatile
 800d4e0:	f3ef 8009 	mrs	r0, PSP
 800d4e4:	f3bf 8f6f 	isb	sy
 800d4e8:	4b15      	ldr	r3, [pc, #84]	@ (800d540 <pxCurrentTCBConst>)
 800d4ea:	681a      	ldr	r2, [r3, #0]
 800d4ec:	f01e 0f10 	tst.w	lr, #16
 800d4f0:	bf08      	it	eq
 800d4f2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800d4f6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d4fa:	6010      	str	r0, [r2, #0]
 800d4fc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800d500:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800d504:	f380 8811 	msr	BASEPRI, r0
 800d508:	f3bf 8f4f 	dsb	sy
 800d50c:	f3bf 8f6f 	isb	sy
 800d510:	f001 f998 	bl	800e844 <vTaskSwitchContext>
 800d514:	f04f 0000 	mov.w	r0, #0
 800d518:	f380 8811 	msr	BASEPRI, r0
 800d51c:	bc09      	pop	{r0, r3}
 800d51e:	6819      	ldr	r1, [r3, #0]
 800d520:	6808      	ldr	r0, [r1, #0]
 800d522:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d526:	f01e 0f10 	tst.w	lr, #16
 800d52a:	bf08      	it	eq
 800d52c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800d530:	f380 8809 	msr	PSP, r0
 800d534:	f3bf 8f6f 	isb	sy
 800d538:	4770      	bx	lr
 800d53a:	bf00      	nop
 800d53c:	f3af 8000 	nop.w

0800d540 <pxCurrentTCBConst>:
 800d540:	24028ce4 	.word	0x24028ce4

0800d544 <xPortSysTickHandler>:
{
 800d544:	b508      	push	{r3, lr}
	__asm volatile
 800d546:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d54a:	f383 8811 	msr	BASEPRI, r3
 800d54e:	f3bf 8f6f 	isb	sy
 800d552:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 800d556:	f001 f801 	bl	800e55c <xTaskIncrementTick>
 800d55a:	b128      	cbz	r0, 800d568 <xPortSysTickHandler+0x24>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800d55c:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800d560:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d564:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
	__asm volatile
 800d568:	2300      	movs	r3, #0
 800d56a:	f383 8811 	msr	BASEPRI, r3
}
 800d56e:	bd08      	pop	{r3, pc}

0800d570 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800d570:	f04f 22e0 	mov.w	r2, #3758153728	@ 0xe000e000
 800d574:	2300      	movs	r3, #0
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800d576:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800d57a:	6113      	str	r3, [r2, #16]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800d57c:	6193      	str	r3, [r2, #24]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800d57e:	4b04      	ldr	r3, [pc, #16]	@ (800d590 <vPortSetupTimerInterrupt+0x20>)
 800d580:	681b      	ldr	r3, [r3, #0]
 800d582:	fbb3 f3f1 	udiv	r3, r3, r1
 800d586:	3b01      	subs	r3, #1
 800d588:	6153      	str	r3, [r2, #20]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800d58a:	2307      	movs	r3, #7
 800d58c:	6113      	str	r3, [r2, #16]
}
 800d58e:	4770      	bx	lr
 800d590:	2400006c 	.word	0x2400006c

0800d594 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800d594:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
{
 800d598:	b537      	push	{r0, r1, r2, r4, r5, lr}
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800d59a:	f8d3 1d00 	ldr.w	r1, [r3, #3328]	@ 0xd00
 800d59e:	4a38      	ldr	r2, [pc, #224]	@ (800d680 <xPortStartScheduler+0xec>)
 800d5a0:	4291      	cmp	r1, r2
 800d5a2:	d108      	bne.n	800d5b6 <xPortStartScheduler+0x22>
	__asm volatile
 800d5a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d5a8:	f383 8811 	msr	BASEPRI, r3
 800d5ac:	f3bf 8f6f 	isb	sy
 800d5b0:	f3bf 8f4f 	dsb	sy
 800d5b4:	e7fe      	b.n	800d5b4 <xPortStartScheduler+0x20>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800d5b6:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	@ 0xd00
 800d5ba:	4b32      	ldr	r3, [pc, #200]	@ (800d684 <xPortStartScheduler+0xf0>)
 800d5bc:	429a      	cmp	r2, r3
 800d5be:	d108      	bne.n	800d5d2 <xPortStartScheduler+0x3e>
 800d5c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d5c4:	f383 8811 	msr	BASEPRI, r3
 800d5c8:	f3bf 8f6f 	isb	sy
 800d5cc:	f3bf 8f4f 	dsb	sy
 800d5d0:	e7fe      	b.n	800d5d0 <xPortStartScheduler+0x3c>
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800d5d2:	4b2d      	ldr	r3, [pc, #180]	@ (800d688 <xPortStartScheduler+0xf4>)
 800d5d4:	781a      	ldrb	r2, [r3, #0]
 800d5d6:	b2d2      	uxtb	r2, r2
 800d5d8:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800d5da:	22ff      	movs	r2, #255	@ 0xff
 800d5dc:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800d5de:	781b      	ldrb	r3, [r3, #0]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800d5e0:	4a2a      	ldr	r2, [pc, #168]	@ (800d68c <xPortStartScheduler+0xf8>)
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800d5e2:	b2db      	uxtb	r3, r3
 800d5e4:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800d5e8:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800d5ec:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800d5f0:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800d5f2:	2307      	movs	r3, #7
 800d5f4:	4a26      	ldr	r2, [pc, #152]	@ (800d690 <xPortStartScheduler+0xfc>)
 800d5f6:	6013      	str	r3, [r2, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d5f8:	f89d 1003 	ldrb.w	r1, [sp, #3]
			ulMaxPRIGROUPValue--;
 800d5fc:	6813      	ldr	r3, [r2, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d5fe:	0609      	lsls	r1, r1, #24
 800d600:	d40a      	bmi.n	800d618 <xPortStartScheduler+0x84>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800d602:	2b03      	cmp	r3, #3
 800d604:	d011      	beq.n	800d62a <xPortStartScheduler+0x96>
 800d606:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d60a:	f383 8811 	msr	BASEPRI, r3
 800d60e:	f3bf 8f6f 	isb	sy
 800d612:	f3bf 8f4f 	dsb	sy
 800d616:	e7fe      	b.n	800d616 <xPortStartScheduler+0x82>
			ulMaxPRIGROUPValue--;
 800d618:	3b01      	subs	r3, #1
 800d61a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800d61c:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800d620:	005b      	lsls	r3, r3, #1
 800d622:	b2db      	uxtb	r3, r3
 800d624:	f88d 3003 	strb.w	r3, [sp, #3]
 800d628:	e7e6      	b.n	800d5f8 <xPortStartScheduler+0x64>
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800d62a:	f44f 7340 	mov.w	r3, #768	@ 0x300
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800d62e:	f04f 24e0 	mov.w	r4, #3758153728	@ 0xe000e000
	uxCriticalNesting = 0;
 800d632:	2500      	movs	r5, #0
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800d634:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800d636:	9b01      	ldr	r3, [sp, #4]
 800d638:	4a13      	ldr	r2, [pc, #76]	@ (800d688 <xPortStartScheduler+0xf4>)
 800d63a:	b2db      	uxtb	r3, r3
 800d63c:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800d63e:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	@ 0xd20
 800d642:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800d646:	f8c4 3d20 	str.w	r3, [r4, #3360]	@ 0xd20
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800d64a:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	@ 0xd20
 800d64e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800d652:	f8c4 3d20 	str.w	r3, [r4, #3360]	@ 0xd20
	vPortSetupTimerInterrupt();
 800d656:	f7ff ff8b 	bl	800d570 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 800d65a:	4b0e      	ldr	r3, [pc, #56]	@ (800d694 <xPortStartScheduler+0x100>)
 800d65c:	601d      	str	r5, [r3, #0]
	vPortEnableVFP();
 800d65e:	f7ff feb7 	bl	800d3d0 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800d662:	f8d4 3f34 	ldr.w	r3, [r4, #3892]	@ 0xf34
 800d666:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800d66a:	f8c4 3f34 	str.w	r3, [r4, #3892]	@ 0xf34
	prvPortStartFirstTask();
 800d66e:	f7ff fe9b 	bl	800d3a8 <prvPortStartFirstTask>
	vTaskSwitchContext();
 800d672:	f001 f8e7 	bl	800e844 <vTaskSwitchContext>
}
 800d676:	4628      	mov	r0, r5
	prvTaskExitError();
 800d678:	f7ff feb4 	bl	800d3e4 <prvTaskExitError>
}
 800d67c:	b003      	add	sp, #12
 800d67e:	bd30      	pop	{r4, r5, pc}
 800d680:	410fc271 	.word	0x410fc271
 800d684:	410fc270 	.word	0x410fc270
 800d688:	e000e400 	.word	0xe000e400
 800d68c:	240287a8 	.word	0x240287a8
 800d690:	240287a4 	.word	0x240287a4
 800d694:	24000078 	.word	0x24000078

0800d698 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800d698:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800d69c:	2b0f      	cmp	r3, #15
 800d69e:	d90e      	bls.n	800d6be <vPortValidateInterruptPriority+0x26>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800d6a0:	4a11      	ldr	r2, [pc, #68]	@ (800d6e8 <vPortValidateInterruptPriority+0x50>)
 800d6a2:	5c9b      	ldrb	r3, [r3, r2]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800d6a4:	4a11      	ldr	r2, [pc, #68]	@ (800d6ec <vPortValidateInterruptPriority+0x54>)
 800d6a6:	7812      	ldrb	r2, [r2, #0]
 800d6a8:	429a      	cmp	r2, r3
 800d6aa:	d908      	bls.n	800d6be <vPortValidateInterruptPriority+0x26>
 800d6ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d6b0:	f383 8811 	msr	BASEPRI, r3
 800d6b4:	f3bf 8f6f 	isb	sy
 800d6b8:	f3bf 8f4f 	dsb	sy
 800d6bc:	e7fe      	b.n	800d6bc <vPortValidateInterruptPriority+0x24>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800d6be:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800d6c2:	4a0b      	ldr	r2, [pc, #44]	@ (800d6f0 <vPortValidateInterruptPriority+0x58>)
 800d6c4:	f8d3 3d0c 	ldr.w	r3, [r3, #3340]	@ 0xd0c
 800d6c8:	6812      	ldr	r2, [r2, #0]
 800d6ca:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800d6ce:	4293      	cmp	r3, r2
 800d6d0:	d908      	bls.n	800d6e4 <vPortValidateInterruptPriority+0x4c>
 800d6d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d6d6:	f383 8811 	msr	BASEPRI, r3
 800d6da:	f3bf 8f6f 	isb	sy
 800d6de:	f3bf 8f4f 	dsb	sy
 800d6e2:	e7fe      	b.n	800d6e2 <vPortValidateInterruptPriority+0x4a>
	}
 800d6e4:	4770      	bx	lr
 800d6e6:	bf00      	nop
 800d6e8:	e000e3f0 	.word	0xe000e3f0
 800d6ec:	240287a8 	.word	0x240287a8
 800d6f0:	240287a4 	.word	0x240287a4

0800d6f4 <prvIsQueueEmpty>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800d6f4:	b510      	push	{r4, lr}
 800d6f6:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d6f8:	f7ff febc 	bl	800d474 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800d6fc:	6ba4      	ldr	r4, [r4, #56]	@ 0x38
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 800d6fe:	f7ff fed9 	bl	800d4b4 <vPortExitCritical>

	return xReturn;
}
 800d702:	fab4 f084 	clz	r0, r4
 800d706:	0940      	lsrs	r0, r0, #5
 800d708:	bd10      	pop	{r4, pc}

0800d70a <prvCopyDataToQueue>:
{
 800d70a:	b570      	push	{r4, r5, r6, lr}
 800d70c:	4616      	mov	r6, r2
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800d70e:	6c02      	ldr	r2, [r0, #64]	@ 0x40
{
 800d710:	4604      	mov	r4, r0
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d712:	6b85      	ldr	r5, [r0, #56]	@ 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800d714:	b942      	cbnz	r2, 800d728 <prvCopyDataToQueue+0x1e>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d716:	6806      	ldr	r6, [r0, #0]
 800d718:	b99e      	cbnz	r6, 800d742 <prvCopyDataToQueue+0x38>
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800d71a:	6880      	ldr	r0, [r0, #8]
 800d71c:	f001 f9f2 	bl	800eb04 <xTaskPriorityDisinherit>
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800d720:	60a6      	str	r6, [r4, #8]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800d722:	3501      	adds	r5, #1
 800d724:	63a5      	str	r5, [r4, #56]	@ 0x38
}
 800d726:	bd70      	pop	{r4, r5, r6, pc}
	else if( xPosition == queueSEND_TO_BACK )
 800d728:	b96e      	cbnz	r6, 800d746 <prvCopyDataToQueue+0x3c>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800d72a:	6840      	ldr	r0, [r0, #4]
 800d72c:	f01a fda5 	bl	802827a <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d730:	6863      	ldr	r3, [r4, #4]
 800d732:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 800d734:	4413      	add	r3, r2
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d736:	68a2      	ldr	r2, [r4, #8]
 800d738:	4293      	cmp	r3, r2
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d73a:	6063      	str	r3, [r4, #4]
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800d73c:	bf24      	itt	cs
 800d73e:	6823      	ldrcs	r3, [r4, #0]
 800d740:	6063      	strcs	r3, [r4, #4]
BaseType_t xReturn = pdFALSE;
 800d742:	2000      	movs	r0, #0
 800d744:	e7ed      	b.n	800d722 <prvCopyDataToQueue+0x18>
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800d746:	68c0      	ldr	r0, [r0, #12]
 800d748:	f01a fd97 	bl	802827a <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800d74c:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 800d74e:	68e3      	ldr	r3, [r4, #12]
 800d750:	4251      	negs	r1, r2
 800d752:	1a9b      	subs	r3, r3, r2
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d754:	6822      	ldr	r2, [r4, #0]
 800d756:	4293      	cmp	r3, r2
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800d758:	60e3      	str	r3, [r4, #12]
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800d75a:	bf3e      	ittt	cc
 800d75c:	68a3      	ldrcc	r3, [r4, #8]
 800d75e:	185b      	addcc	r3, r3, r1
 800d760:	60e3      	strcc	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 800d762:	2e02      	cmp	r6, #2
 800d764:	d1ed      	bne.n	800d742 <prvCopyDataToQueue+0x38>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d766:	b10d      	cbz	r5, 800d76c <prvCopyDataToQueue+0x62>
				--uxMessagesWaiting;
 800d768:	3d01      	subs	r5, #1
 800d76a:	e7ea      	b.n	800d742 <prvCopyDataToQueue+0x38>
BaseType_t xReturn = pdFALSE;
 800d76c:	4628      	mov	r0, r5
 800d76e:	e7d8      	b.n	800d722 <prvCopyDataToQueue+0x18>

0800d770 <prvCopyDataFromQueue>:
{
 800d770:	4603      	mov	r3, r0
 800d772:	4608      	mov	r0, r1
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800d774:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
{
 800d776:	b410      	push	{r4}
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800d778:	b162      	cbz	r2, 800d794 <prvCopyDataFromQueue+0x24>
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d77a:	68dc      	ldr	r4, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800d77c:	6899      	ldr	r1, [r3, #8]
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d77e:	4414      	add	r4, r2
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800d780:	428c      	cmp	r4, r1
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d782:	60dc      	str	r4, [r3, #12]
}
 800d784:	f85d 4b04 	ldr.w	r4, [sp], #4
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800d788:	bf24      	itt	cs
 800d78a:	6819      	ldrcs	r1, [r3, #0]
 800d78c:	60d9      	strcs	r1, [r3, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800d78e:	68d9      	ldr	r1, [r3, #12]
 800d790:	f01a bd73 	b.w	802827a <memcpy>
}
 800d794:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d798:	4770      	bx	lr

0800d79a <prvUnlockQueue>:
{
 800d79a:	b570      	push	{r4, r5, r6, lr}
 800d79c:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 800d79e:	f7ff fe69 	bl	800d474 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 800d7a2:	f894 5045 	ldrb.w	r5, [r4, #69]	@ 0x45
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d7a6:	f104 0624 	add.w	r6, r4, #36	@ 0x24
		int8_t cTxLock = pxQueue->cTxLock;
 800d7aa:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d7ac:	2d00      	cmp	r5, #0
 800d7ae:	dc14      	bgt.n	800d7da <prvUnlockQueue+0x40>
		pxQueue->cTxLock = queueUNLOCKED;
 800d7b0:	23ff      	movs	r3, #255	@ 0xff
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d7b2:	f104 0610 	add.w	r6, r4, #16
		pxQueue->cTxLock = queueUNLOCKED;
 800d7b6:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
	taskEXIT_CRITICAL();
 800d7ba:	f7ff fe7b 	bl	800d4b4 <vPortExitCritical>
	taskENTER_CRITICAL();
 800d7be:	f7ff fe59 	bl	800d474 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 800d7c2:	f894 5044 	ldrb.w	r5, [r4, #68]	@ 0x44
 800d7c6:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d7c8:	2d00      	cmp	r5, #0
 800d7ca:	dc12      	bgt.n	800d7f2 <prvUnlockQueue+0x58>
		pxQueue->cRxLock = queueUNLOCKED;
 800d7cc:	23ff      	movs	r3, #255	@ 0xff
 800d7ce:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
}
 800d7d2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	taskEXIT_CRITICAL();
 800d7d6:	f7ff be6d 	b.w	800d4b4 <vPortExitCritical>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d7da:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800d7dc:	2b00      	cmp	r3, #0
 800d7de:	d0e7      	beq.n	800d7b0 <prvUnlockQueue+0x16>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d7e0:	4630      	mov	r0, r6
 800d7e2:	f001 f8ab 	bl	800e93c <xTaskRemoveFromEventList>
 800d7e6:	b108      	cbz	r0, 800d7ec <prvUnlockQueue+0x52>
						vTaskMissedYield();
 800d7e8:	f001 f932 	bl	800ea50 <vTaskMissedYield>
			--cTxLock;
 800d7ec:	3d01      	subs	r5, #1
 800d7ee:	b26d      	sxtb	r5, r5
 800d7f0:	e7dc      	b.n	800d7ac <prvUnlockQueue+0x12>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d7f2:	6923      	ldr	r3, [r4, #16]
 800d7f4:	2b00      	cmp	r3, #0
 800d7f6:	d0e9      	beq.n	800d7cc <prvUnlockQueue+0x32>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d7f8:	4630      	mov	r0, r6
 800d7fa:	f001 f89f 	bl	800e93c <xTaskRemoveFromEventList>
 800d7fe:	b108      	cbz	r0, 800d804 <prvUnlockQueue+0x6a>
					vTaskMissedYield();
 800d800:	f001 f926 	bl	800ea50 <vTaskMissedYield>
				--cRxLock;
 800d804:	3d01      	subs	r5, #1
 800d806:	b26d      	sxtb	r5, r5
 800d808:	e7de      	b.n	800d7c8 <prvUnlockQueue+0x2e>

0800d80a <xQueueGenericReset>:
{
 800d80a:	b538      	push	{r3, r4, r5, lr}
 800d80c:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 800d80e:	4604      	mov	r4, r0
 800d810:	b940      	cbnz	r0, 800d824 <xQueueGenericReset+0x1a>
 800d812:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d816:	f383 8811 	msr	BASEPRI, r3
 800d81a:	f3bf 8f6f 	isb	sy
 800d81e:	f3bf 8f4f 	dsb	sy
 800d822:	e7fe      	b.n	800d822 <xQueueGenericReset+0x18>
	taskENTER_CRITICAL();
 800d824:	f7ff fe26 	bl	800d474 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d828:	6822      	ldr	r2, [r4, #0]
 800d82a:	e9d4 310f 	ldrd	r3, r1, [r4, #60]	@ 0x3c
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800d82e:	6062      	str	r2, [r4, #4]
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d830:	434b      	muls	r3, r1
 800d832:	18d0      	adds	r0, r2, r3
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d834:	1a5b      	subs	r3, r3, r1
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d836:	60a0      	str	r0, [r4, #8]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d838:	441a      	add	r2, r3
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800d83a:	2000      	movs	r0, #0
		pxQueue->cRxLock = queueUNLOCKED;
 800d83c:	23ff      	movs	r3, #255	@ 0xff
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d83e:	60e2      	str	r2, [r4, #12]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800d840:	63a0      	str	r0, [r4, #56]	@ 0x38
		pxQueue->cRxLock = queueUNLOCKED;
 800d842:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800d846:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
		if( xNewQueue == pdFALSE )
 800d84a:	b9a5      	cbnz	r5, 800d876 <xQueueGenericReset+0x6c>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d84c:	6923      	ldr	r3, [r4, #16]
 800d84e:	b173      	cbz	r3, 800d86e <xQueueGenericReset+0x64>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d850:	f104 0010 	add.w	r0, r4, #16
 800d854:	f001 f872 	bl	800e93c <xTaskRemoveFromEventList>
 800d858:	b148      	cbz	r0, 800d86e <xQueueGenericReset+0x64>
					queueYIELD_IF_USING_PREEMPTION();
 800d85a:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800d85e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d862:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800d866:	f3bf 8f4f 	dsb	sy
 800d86a:	f3bf 8f6f 	isb	sy
	taskEXIT_CRITICAL();
 800d86e:	f7ff fe21 	bl	800d4b4 <vPortExitCritical>
}
 800d872:	2001      	movs	r0, #1
 800d874:	bd38      	pop	{r3, r4, r5, pc}
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800d876:	f104 0010 	add.w	r0, r4, #16
 800d87a:	f7ff fd55 	bl	800d328 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800d87e:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 800d882:	f7ff fd51 	bl	800d328 <vListInitialise>
 800d886:	e7f2      	b.n	800d86e <xQueueGenericReset+0x64>

0800d888 <xQueueGenericCreateStatic>:
	{
 800d888:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d88a:	460d      	mov	r5, r1
 800d88c:	461c      	mov	r4, r3
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800d88e:	b940      	cbnz	r0, 800d8a2 <xQueueGenericCreateStatic+0x1a>
 800d890:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d894:	f383 8811 	msr	BASEPRI, r3
 800d898:	f3bf 8f6f 	isb	sy
 800d89c:	f3bf 8f4f 	dsb	sy
 800d8a0:	e7fe      	b.n	800d8a0 <xQueueGenericCreateStatic+0x18>
		configASSERT( pxStaticQueue != NULL );
 800d8a2:	b943      	cbnz	r3, 800d8b6 <xQueueGenericCreateStatic+0x2e>
 800d8a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d8a8:	f383 8811 	msr	BASEPRI, r3
 800d8ac:	f3bf 8f6f 	isb	sy
 800d8b0:	f3bf 8f4f 	dsb	sy
 800d8b4:	e7fe      	b.n	800d8b4 <xQueueGenericCreateStatic+0x2c>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800d8b6:	b14a      	cbz	r2, 800d8cc <xQueueGenericCreateStatic+0x44>
 800d8b8:	b991      	cbnz	r1, 800d8e0 <xQueueGenericCreateStatic+0x58>
 800d8ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d8be:	f383 8811 	msr	BASEPRI, r3
 800d8c2:	f3bf 8f6f 	isb	sy
 800d8c6:	f3bf 8f4f 	dsb	sy
 800d8ca:	e7fe      	b.n	800d8ca <xQueueGenericCreateStatic+0x42>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800d8cc:	b141      	cbz	r1, 800d8e0 <xQueueGenericCreateStatic+0x58>
 800d8ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d8d2:	f383 8811 	msr	BASEPRI, r3
 800d8d6:	f3bf 8f6f 	isb	sy
 800d8da:	f3bf 8f4f 	dsb	sy
 800d8de:	e7fe      	b.n	800d8de <xQueueGenericCreateStatic+0x56>
			volatile size_t xSize = sizeof( StaticQueue_t );
 800d8e0:	2350      	movs	r3, #80	@ 0x50
 800d8e2:	9301      	str	r3, [sp, #4]
			configASSERT( xSize == sizeof( Queue_t ) );
 800d8e4:	9b01      	ldr	r3, [sp, #4]
 800d8e6:	2b50      	cmp	r3, #80	@ 0x50
 800d8e8:	d008      	beq.n	800d8fc <xQueueGenericCreateStatic+0x74>
 800d8ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d8ee:	f383 8811 	msr	BASEPRI, r3
 800d8f2:	f3bf 8f6f 	isb	sy
 800d8f6:	f3bf 8f4f 	dsb	sy
 800d8fa:	e7fe      	b.n	800d8fa <xQueueGenericCreateStatic+0x72>
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800d8fc:	2101      	movs	r1, #1
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800d8fe:	2d00      	cmp	r5, #0
 800d900:	bf08      	it	eq
 800d902:	4622      	moveq	r2, r4
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800d904:	9b01      	ldr	r3, [sp, #4]
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800d906:	f884 1046 	strb.w	r1, [r4, #70]	@ 0x46
	if( uxItemSize == ( UBaseType_t ) 0 )
 800d90a:	6022      	str	r2, [r4, #0]
	pxNewQueue->uxItemSize = uxItemSize;
 800d90c:	e9c4 050f 	strd	r0, r5, [r4, #60]	@ 0x3c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800d910:	4620      	mov	r0, r4
 800d912:	f7ff ff7a 	bl	800d80a <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 800d916:	f89d 3018 	ldrb.w	r3, [sp, #24]
	}
 800d91a:	4620      	mov	r0, r4
		pxNewQueue->ucQueueType = ucQueueType;
 800d91c:	f884 304c 	strb.w	r3, [r4, #76]	@ 0x4c
	}
 800d920:	b003      	add	sp, #12
 800d922:	bd30      	pop	{r4, r5, pc}

0800d924 <xQueueGenericCreate>:
	{
 800d924:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d926:	460d      	mov	r5, r1
 800d928:	4617      	mov	r7, r2
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800d92a:	4606      	mov	r6, r0
 800d92c:	b940      	cbnz	r0, 800d940 <xQueueGenericCreate+0x1c>
 800d92e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d932:	f383 8811 	msr	BASEPRI, r3
 800d936:	f3bf 8f6f 	isb	sy
 800d93a:	f3bf 8f4f 	dsb	sy
 800d93e:	e7fe      	b.n	800d93e <xQueueGenericCreate+0x1a>
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d940:	4348      	muls	r0, r1
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800d942:	3050      	adds	r0, #80	@ 0x50
 800d944:	f7ff fc1a 	bl	800d17c <pvPortMalloc>
		if( pxNewQueue != NULL )
 800d948:	4604      	mov	r4, r0
 800d94a:	b170      	cbz	r0, 800d96a <xQueueGenericCreate+0x46>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800d94c:	2300      	movs	r3, #0
 800d94e:	f880 3046 	strb.w	r3, [r0, #70]	@ 0x46
	if( uxItemSize == ( UBaseType_t ) 0 )
 800d952:	b165      	cbz	r5, 800d96e <xQueueGenericCreate+0x4a>
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d954:	f100 0350 	add.w	r3, r0, #80	@ 0x50
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800d958:	2101      	movs	r1, #1
 800d95a:	4620      	mov	r0, r4
 800d95c:	6023      	str	r3, [r4, #0]
	pxNewQueue->uxItemSize = uxItemSize;
 800d95e:	e9c4 650f 	strd	r6, r5, [r4, #60]	@ 0x3c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800d962:	f7ff ff52 	bl	800d80a <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 800d966:	f884 704c 	strb.w	r7, [r4, #76]	@ 0x4c
	}
 800d96a:	4620      	mov	r0, r4
 800d96c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800d96e:	4603      	mov	r3, r0
 800d970:	e7f2      	b.n	800d958 <xQueueGenericCreate+0x34>

0800d972 <xQueueCreateCountingSemaphoreStatic>:
	{
 800d972:	b513      	push	{r0, r1, r4, lr}
 800d974:	4613      	mov	r3, r2
 800d976:	460c      	mov	r4, r1
		configASSERT( uxMaxCount != 0 );
 800d978:	b940      	cbnz	r0, 800d98c <xQueueCreateCountingSemaphoreStatic+0x1a>
 800d97a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d97e:	f383 8811 	msr	BASEPRI, r3
 800d982:	f3bf 8f6f 	isb	sy
 800d986:	f3bf 8f4f 	dsb	sy
 800d98a:	e7fe      	b.n	800d98a <xQueueCreateCountingSemaphoreStatic+0x18>
		configASSERT( uxInitialCount <= uxMaxCount );
 800d98c:	4288      	cmp	r0, r1
 800d98e:	d208      	bcs.n	800d9a2 <xQueueCreateCountingSemaphoreStatic+0x30>
 800d990:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d994:	f383 8811 	msr	BASEPRI, r3
 800d998:	f3bf 8f6f 	isb	sy
 800d99c:	f3bf 8f4f 	dsb	sy
 800d9a0:	e7fe      	b.n	800d9a0 <xQueueCreateCountingSemaphoreStatic+0x2e>
		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800d9a2:	2202      	movs	r2, #2
 800d9a4:	9200      	str	r2, [sp, #0]
 800d9a6:	2200      	movs	r2, #0
 800d9a8:	4611      	mov	r1, r2
 800d9aa:	f7ff ff6d 	bl	800d888 <xQueueGenericCreateStatic>
		if( xHandle != NULL )
 800d9ae:	b100      	cbz	r0, 800d9b2 <xQueueCreateCountingSemaphoreStatic+0x40>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800d9b0:	6384      	str	r4, [r0, #56]	@ 0x38
	}
 800d9b2:	b002      	add	sp, #8
 800d9b4:	bd10      	pop	{r4, pc}

0800d9b6 <xQueueCreateCountingSemaphore>:
	{
 800d9b6:	b510      	push	{r4, lr}
 800d9b8:	460c      	mov	r4, r1
		configASSERT( uxMaxCount != 0 );
 800d9ba:	b940      	cbnz	r0, 800d9ce <xQueueCreateCountingSemaphore+0x18>
 800d9bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d9c0:	f383 8811 	msr	BASEPRI, r3
 800d9c4:	f3bf 8f6f 	isb	sy
 800d9c8:	f3bf 8f4f 	dsb	sy
 800d9cc:	e7fe      	b.n	800d9cc <xQueueCreateCountingSemaphore+0x16>
		configASSERT( uxInitialCount <= uxMaxCount );
 800d9ce:	4288      	cmp	r0, r1
 800d9d0:	d208      	bcs.n	800d9e4 <xQueueCreateCountingSemaphore+0x2e>
 800d9d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d9d6:	f383 8811 	msr	BASEPRI, r3
 800d9da:	f3bf 8f6f 	isb	sy
 800d9de:	f3bf 8f4f 	dsb	sy
 800d9e2:	e7fe      	b.n	800d9e2 <xQueueCreateCountingSemaphore+0x2c>
		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800d9e4:	2202      	movs	r2, #2
 800d9e6:	2100      	movs	r1, #0
 800d9e8:	f7ff ff9c 	bl	800d924 <xQueueGenericCreate>
		if( xHandle != NULL )
 800d9ec:	b100      	cbz	r0, 800d9f0 <xQueueCreateCountingSemaphore+0x3a>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800d9ee:	6384      	str	r4, [r0, #56]	@ 0x38
	}
 800d9f0:	bd10      	pop	{r4, pc}

0800d9f2 <xQueueGenericSend>:
{
 800d9f2:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 800d9f6:	460f      	mov	r7, r1
 800d9f8:	461e      	mov	r6, r3
	configASSERT( pxQueue );
 800d9fa:	4604      	mov	r4, r0
{
 800d9fc:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
 800d9fe:	b940      	cbnz	r0, 800da12 <xQueueGenericSend+0x20>
 800da00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800da04:	f383 8811 	msr	BASEPRI, r3
 800da08:	f3bf 8f6f 	isb	sy
 800da0c:	f3bf 8f4f 	dsb	sy
 800da10:	e7fe      	b.n	800da10 <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800da12:	b951      	cbnz	r1, 800da2a <xQueueGenericSend+0x38>
 800da14:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 800da16:	b143      	cbz	r3, 800da2a <xQueueGenericSend+0x38>
 800da18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800da1c:	f383 8811 	msr	BASEPRI, r3
 800da20:	f3bf 8f6f 	isb	sy
 800da24:	f3bf 8f4f 	dsb	sy
 800da28:	e7fe      	b.n	800da28 <xQueueGenericSend+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800da2a:	2e02      	cmp	r6, #2
 800da2c:	d10b      	bne.n	800da46 <xQueueGenericSend+0x54>
 800da2e:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800da30:	2b01      	cmp	r3, #1
 800da32:	d008      	beq.n	800da46 <xQueueGenericSend+0x54>
 800da34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800da38:	f383 8811 	msr	BASEPRI, r3
 800da3c:	f3bf 8f6f 	isb	sy
 800da40:	f3bf 8f4f 	dsb	sy
 800da44:	e7fe      	b.n	800da44 <xQueueGenericSend+0x52>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800da46:	f001 f80f 	bl	800ea68 <xTaskGetSchedulerState>
 800da4a:	4605      	mov	r5, r0
 800da4c:	b330      	cbz	r0, 800da9c <xQueueGenericSend+0xaa>
 800da4e:	2500      	movs	r5, #0
		prvLockQueue( pxQueue );
 800da50:	f04f 0800 	mov.w	r8, #0
		taskENTER_CRITICAL();
 800da54:	f7ff fd0e 	bl	800d474 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800da58:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800da5a:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800da5c:	429a      	cmp	r2, r3
 800da5e:	d301      	bcc.n	800da64 <xQueueGenericSend+0x72>
 800da60:	2e02      	cmp	r6, #2
 800da62:	d127      	bne.n	800dab4 <xQueueGenericSend+0xc2>
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800da64:	4632      	mov	r2, r6
 800da66:	4639      	mov	r1, r7
 800da68:	4620      	mov	r0, r4
 800da6a:	f7ff fe4e 	bl	800d70a <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800da6e:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800da70:	b11b      	cbz	r3, 800da7a <xQueueGenericSend+0x88>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800da72:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 800da76:	f000 ff61 	bl	800e93c <xTaskRemoveFromEventList>
					else if( xYieldRequired != pdFALSE )
 800da7a:	b148      	cbz	r0, 800da90 <xQueueGenericSend+0x9e>
						queueYIELD_IF_USING_PREEMPTION();
 800da7c:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800da80:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800da84:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800da88:	f3bf 8f4f 	dsb	sy
 800da8c:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 800da90:	f7ff fd10 	bl	800d4b4 <vPortExitCritical>
				return pdPASS;
 800da94:	2001      	movs	r0, #1
}
 800da96:	b004      	add	sp, #16
 800da98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800da9c:	9b01      	ldr	r3, [sp, #4]
 800da9e:	2b00      	cmp	r3, #0
 800daa0:	d0d6      	beq.n	800da50 <xQueueGenericSend+0x5e>
 800daa2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800daa6:	f383 8811 	msr	BASEPRI, r3
 800daaa:	f3bf 8f6f 	isb	sy
 800daae:	f3bf 8f4f 	dsb	sy
 800dab2:	e7fe      	b.n	800dab2 <xQueueGenericSend+0xc0>
				if( xTicksToWait == ( TickType_t ) 0 )
 800dab4:	9b01      	ldr	r3, [sp, #4]
 800dab6:	b91b      	cbnz	r3, 800dac0 <xQueueGenericSend+0xce>
					taskEXIT_CRITICAL();
 800dab8:	f7ff fcfc 	bl	800d4b4 <vPortExitCritical>
					return errQUEUE_FULL;
 800dabc:	2000      	movs	r0, #0
 800dabe:	e7ea      	b.n	800da96 <xQueueGenericSend+0xa4>
				else if( xEntryTimeSet == pdFALSE )
 800dac0:	b915      	cbnz	r5, 800dac8 <xQueueGenericSend+0xd6>
					vTaskInternalSetTimeOutState( &xTimeOut );
 800dac2:	a802      	add	r0, sp, #8
 800dac4:	f000 ff7c 	bl	800e9c0 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 800dac8:	f7ff fcf4 	bl	800d4b4 <vPortExitCritical>
		vTaskSuspendAll();
 800dacc:	f000 fd38 	bl	800e540 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800dad0:	f7ff fcd0 	bl	800d474 <vPortEnterCritical>
 800dad4:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800dad8:	2bff      	cmp	r3, #255	@ 0xff
 800dada:	d101      	bne.n	800dae0 <xQueueGenericSend+0xee>
 800dadc:	f884 8044 	strb.w	r8, [r4, #68]	@ 0x44
 800dae0:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 800dae4:	2bff      	cmp	r3, #255	@ 0xff
 800dae6:	d101      	bne.n	800daec <xQueueGenericSend+0xfa>
 800dae8:	f884 8045 	strb.w	r8, [r4, #69]	@ 0x45
 800daec:	f7ff fce2 	bl	800d4b4 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800daf0:	a901      	add	r1, sp, #4
 800daf2:	a802      	add	r0, sp, #8
 800daf4:	f000 ff70 	bl	800e9d8 <xTaskCheckForTimeOut>
 800daf8:	bb38      	cbnz	r0, 800db4a <xQueueGenericSend+0x158>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800dafa:	f7ff fcbb 	bl	800d474 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800dafe:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800db00:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800db02:	429a      	cmp	r2, r3
 800db04:	d10e      	bne.n	800db24 <xQueueGenericSend+0x132>
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 800db06:	f7ff fcd5 	bl	800d4b4 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800db0a:	9901      	ldr	r1, [sp, #4]
 800db0c:	f104 0010 	add.w	r0, r4, #16
 800db10:	f000 fedc 	bl	800e8cc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800db14:	4620      	mov	r0, r4
 800db16:	f7ff fe40 	bl	800d79a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800db1a:	f000 fdb5 	bl	800e688 <xTaskResumeAll>
 800db1e:	b148      	cbz	r0, 800db34 <xQueueGenericSend+0x142>
 800db20:	2501      	movs	r5, #1
 800db22:	e797      	b.n	800da54 <xQueueGenericSend+0x62>
	taskEXIT_CRITICAL();
 800db24:	f7ff fcc6 	bl	800d4b4 <vPortExitCritical>
				prvUnlockQueue( pxQueue );
 800db28:	4620      	mov	r0, r4
 800db2a:	f7ff fe36 	bl	800d79a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800db2e:	f000 fdab 	bl	800e688 <xTaskResumeAll>
 800db32:	e7f5      	b.n	800db20 <xQueueGenericSend+0x12e>
					portYIELD_WITHIN_API();
 800db34:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800db38:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800db3c:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800db40:	f3bf 8f4f 	dsb	sy
 800db44:	f3bf 8f6f 	isb	sy
 800db48:	e7ea      	b.n	800db20 <xQueueGenericSend+0x12e>
			prvUnlockQueue( pxQueue );
 800db4a:	4620      	mov	r0, r4
 800db4c:	f7ff fe25 	bl	800d79a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800db50:	f000 fd9a 	bl	800e688 <xTaskResumeAll>
			return errQUEUE_FULL;
 800db54:	e7b2      	b.n	800dabc <xQueueGenericSend+0xca>

0800db56 <xQueueCreateMutexStatic>:
		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800db56:	2200      	movs	r2, #0
	{
 800db58:	460b      	mov	r3, r1
 800db5a:	b513      	push	{r0, r1, r4, lr}
		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800db5c:	4611      	mov	r1, r2
 800db5e:	9000      	str	r0, [sp, #0]
 800db60:	2001      	movs	r0, #1
 800db62:	f7ff fe91 	bl	800d888 <xQueueGenericCreateStatic>
		if( pxNewQueue != NULL )
 800db66:	4604      	mov	r4, r0
 800db68:	b138      	cbz	r0, 800db7a <xQueueCreateMutexStatic+0x24>
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800db6a:	2300      	movs	r3, #0
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800db6c:	461a      	mov	r2, r3
 800db6e:	4619      	mov	r1, r3
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800db70:	6083      	str	r3, [r0, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800db72:	6003      	str	r3, [r0, #0]
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800db74:	60c3      	str	r3, [r0, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800db76:	f7ff ff3c 	bl	800d9f2 <xQueueGenericSend>
	}
 800db7a:	4620      	mov	r0, r4
 800db7c:	b002      	add	sp, #8
 800db7e:	bd10      	pop	{r4, pc}

0800db80 <xQueueGiveMutexRecursive>:
	{
 800db80:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxMutex );
 800db82:	4604      	mov	r4, r0
 800db84:	b940      	cbnz	r0, 800db98 <xQueueGiveMutexRecursive+0x18>
 800db86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800db8a:	f383 8811 	msr	BASEPRI, r3
 800db8e:	f3bf 8f6f 	isb	sy
 800db92:	f3bf 8f4f 	dsb	sy
 800db96:	e7fe      	b.n	800db96 <xQueueGiveMutexRecursive+0x16>
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800db98:	6885      	ldr	r5, [r0, #8]
 800db9a:	f000 ff5f 	bl	800ea5c <xTaskGetCurrentTaskHandle>
 800db9e:	4285      	cmp	r5, r0
 800dba0:	d10b      	bne.n	800dbba <xQueueGiveMutexRecursive+0x3a>
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 800dba2:	68e3      	ldr	r3, [r4, #12]
 800dba4:	3b01      	subs	r3, #1
 800dba6:	60e3      	str	r3, [r4, #12]
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 800dba8:	b10b      	cbz	r3, 800dbae <xQueueGiveMutexRecursive+0x2e>
			xReturn = pdPASS;
 800dbaa:	2001      	movs	r0, #1
	}
 800dbac:	bd38      	pop	{r3, r4, r5, pc}
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 800dbae:	461a      	mov	r2, r3
 800dbb0:	4619      	mov	r1, r3
 800dbb2:	4620      	mov	r0, r4
 800dbb4:	f7ff ff1d 	bl	800d9f2 <xQueueGenericSend>
 800dbb8:	e7f7      	b.n	800dbaa <xQueueGiveMutexRecursive+0x2a>
			xReturn = pdFAIL;
 800dbba:	2000      	movs	r0, #0
		return xReturn;
 800dbbc:	e7f6      	b.n	800dbac <xQueueGiveMutexRecursive+0x2c>

0800dbbe <xQueueCreateMutex>:
	{
 800dbbe:	b570      	push	{r4, r5, r6, lr}
 800dbc0:	4606      	mov	r6, r0
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800dbc2:	2050      	movs	r0, #80	@ 0x50
 800dbc4:	f7ff fada 	bl	800d17c <pvPortMalloc>
 800dbc8:	4604      	mov	r4, r0
		if( pxNewQueue != NULL )
 800dbca:	b198      	cbz	r0, 800dbf4 <xQueueCreateMutex+0x36>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800dbcc:	2500      	movs	r5, #0
	pxNewQueue->uxLength = uxQueueLength;
 800dbce:	2101      	movs	r1, #1
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800dbd0:	6000      	str	r0, [r0, #0]
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800dbd2:	f880 5046 	strb.w	r5, [r0, #70]	@ 0x46
	pxNewQueue->uxItemSize = uxItemSize;
 800dbd6:	e9c0 150f 	strd	r1, r5, [r0, #60]	@ 0x3c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800dbda:	f7ff fe16 	bl	800d80a <xQueueGenericReset>
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800dbde:	462b      	mov	r3, r5
 800dbe0:	462a      	mov	r2, r5
 800dbe2:	4629      	mov	r1, r5
 800dbe4:	4620      	mov	r0, r4
		pxNewQueue->ucQueueType = ucQueueType;
 800dbe6:	f884 604c 	strb.w	r6, [r4, #76]	@ 0x4c
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800dbea:	60a5      	str	r5, [r4, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800dbec:	6025      	str	r5, [r4, #0]
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800dbee:	60e5      	str	r5, [r4, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800dbf0:	f7ff feff 	bl	800d9f2 <xQueueGenericSend>
	}
 800dbf4:	4620      	mov	r0, r4
 800dbf6:	bd70      	pop	{r4, r5, r6, pc}

0800dbf8 <xQueueGenericSendFromISR>:
{
 800dbf8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dbfc:	4689      	mov	r9, r1
 800dbfe:	4617      	mov	r7, r2
 800dc00:	461e      	mov	r6, r3
	configASSERT( pxQueue );
 800dc02:	4604      	mov	r4, r0
 800dc04:	b940      	cbnz	r0, 800dc18 <xQueueGenericSendFromISR+0x20>
 800dc06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dc0a:	f383 8811 	msr	BASEPRI, r3
 800dc0e:	f3bf 8f6f 	isb	sy
 800dc12:	f3bf 8f4f 	dsb	sy
 800dc16:	e7fe      	b.n	800dc16 <xQueueGenericSendFromISR+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800dc18:	b951      	cbnz	r1, 800dc30 <xQueueGenericSendFromISR+0x38>
 800dc1a:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 800dc1c:	b143      	cbz	r3, 800dc30 <xQueueGenericSendFromISR+0x38>
 800dc1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dc22:	f383 8811 	msr	BASEPRI, r3
 800dc26:	f3bf 8f6f 	isb	sy
 800dc2a:	f3bf 8f4f 	dsb	sy
 800dc2e:	e7fe      	b.n	800dc2e <xQueueGenericSendFromISR+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800dc30:	2e02      	cmp	r6, #2
 800dc32:	d10b      	bne.n	800dc4c <xQueueGenericSendFromISR+0x54>
 800dc34:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800dc36:	2b01      	cmp	r3, #1
 800dc38:	d008      	beq.n	800dc4c <xQueueGenericSendFromISR+0x54>
 800dc3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dc3e:	f383 8811 	msr	BASEPRI, r3
 800dc42:	f3bf 8f6f 	isb	sy
 800dc46:	f3bf 8f4f 	dsb	sy
 800dc4a:	e7fe      	b.n	800dc4a <xQueueGenericSendFromISR+0x52>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800dc4c:	f7ff fd24 	bl	800d698 <vPortValidateInterruptPriority>
	__asm volatile
 800dc50:	f3ef 8811 	mrs	r8, BASEPRI
 800dc54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dc58:	f383 8811 	msr	BASEPRI, r3
 800dc5c:	f3bf 8f6f 	isb	sy
 800dc60:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800dc64:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800dc66:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800dc68:	429a      	cmp	r2, r3
 800dc6a:	d301      	bcc.n	800dc70 <xQueueGenericSendFromISR+0x78>
 800dc6c:	2e02      	cmp	r6, #2
 800dc6e:	d11e      	bne.n	800dcae <xQueueGenericSendFromISR+0xb6>
			const int8_t cTxLock = pxQueue->cTxLock;
 800dc70:	f894 5045 	ldrb.w	r5, [r4, #69]	@ 0x45
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800dc74:	4632      	mov	r2, r6
 800dc76:	4649      	mov	r1, r9
 800dc78:	4620      	mov	r0, r4
			const int8_t cTxLock = pxQueue->cTxLock;
 800dc7a:	b26d      	sxtb	r5, r5
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800dc7c:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800dc7e:	f7ff fd44 	bl	800d70a <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 800dc82:	1c6b      	adds	r3, r5, #1
 800dc84:	d10e      	bne.n	800dca4 <xQueueGenericSendFromISR+0xac>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800dc86:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800dc88:	b13b      	cbz	r3, 800dc9a <xQueueGenericSendFromISR+0xa2>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800dc8a:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 800dc8e:	f000 fe55 	bl	800e93c <xTaskRemoveFromEventList>
 800dc92:	b110      	cbz	r0, 800dc9a <xQueueGenericSendFromISR+0xa2>
							if( pxHigherPriorityTaskWoken != NULL )
 800dc94:	b10f      	cbz	r7, 800dc9a <xQueueGenericSendFromISR+0xa2>
								*pxHigherPriorityTaskWoken = pdTRUE;
 800dc96:	2301      	movs	r3, #1
 800dc98:	603b      	str	r3, [r7, #0]
			xReturn = pdPASS;
 800dc9a:	2001      	movs	r0, #1
	__asm volatile
 800dc9c:	f388 8811 	msr	BASEPRI, r8
}
 800dca0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800dca4:	3501      	adds	r5, #1
 800dca6:	b26d      	sxtb	r5, r5
 800dca8:	f884 5045 	strb.w	r5, [r4, #69]	@ 0x45
 800dcac:	e7f5      	b.n	800dc9a <xQueueGenericSendFromISR+0xa2>
			xReturn = errQUEUE_FULL;
 800dcae:	2000      	movs	r0, #0
 800dcb0:	e7f4      	b.n	800dc9c <xQueueGenericSendFromISR+0xa4>

0800dcb2 <xQueueGiveFromISR>:
{
 800dcb2:	b570      	push	{r4, r5, r6, lr}
 800dcb4:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 800dcb6:	4604      	mov	r4, r0
 800dcb8:	b940      	cbnz	r0, 800dccc <xQueueGiveFromISR+0x1a>
	__asm volatile
 800dcba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dcbe:	f383 8811 	msr	BASEPRI, r3
 800dcc2:	f3bf 8f6f 	isb	sy
 800dcc6:	f3bf 8f4f 	dsb	sy
 800dcca:	e7fe      	b.n	800dcca <xQueueGiveFromISR+0x18>
	configASSERT( pxQueue->uxItemSize == 0 );
 800dccc:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 800dcce:	b143      	cbz	r3, 800dce2 <xQueueGiveFromISR+0x30>
 800dcd0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dcd4:	f383 8811 	msr	BASEPRI, r3
 800dcd8:	f3bf 8f6f 	isb	sy
 800dcdc:	f3bf 8f4f 	dsb	sy
 800dce0:	e7fe      	b.n	800dce0 <xQueueGiveFromISR+0x2e>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800dce2:	6803      	ldr	r3, [r0, #0]
 800dce4:	b953      	cbnz	r3, 800dcfc <xQueueGiveFromISR+0x4a>
 800dce6:	6883      	ldr	r3, [r0, #8]
 800dce8:	b143      	cbz	r3, 800dcfc <xQueueGiveFromISR+0x4a>
 800dcea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dcee:	f383 8811 	msr	BASEPRI, r3
 800dcf2:	f3bf 8f6f 	isb	sy
 800dcf6:	f3bf 8f4f 	dsb	sy
 800dcfa:	e7fe      	b.n	800dcfa <xQueueGiveFromISR+0x48>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800dcfc:	f7ff fccc 	bl	800d698 <vPortValidateInterruptPriority>
	__asm volatile
 800dd00:	f3ef 8611 	mrs	r6, BASEPRI
 800dd04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dd08:	f383 8811 	msr	BASEPRI, r3
 800dd0c:	f3bf 8f6f 	isb	sy
 800dd10:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800dd14:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
		if( uxMessagesWaiting < pxQueue->uxLength )
 800dd16:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800dd18:	4293      	cmp	r3, r2
 800dd1a:	d919      	bls.n	800dd50 <xQueueGiveFromISR+0x9e>
			const int8_t cTxLock = pxQueue->cTxLock;
 800dd1c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800dd20:	3201      	adds	r2, #1
			if( cTxLock == queueUNLOCKED )
 800dd22:	29ff      	cmp	r1, #255	@ 0xff
			const int8_t cTxLock = pxQueue->cTxLock;
 800dd24:	b24b      	sxtb	r3, r1
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800dd26:	63a2      	str	r2, [r4, #56]	@ 0x38
			if( cTxLock == queueUNLOCKED )
 800dd28:	d10d      	bne.n	800dd46 <xQueueGiveFromISR+0x94>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800dd2a:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800dd2c:	b13b      	cbz	r3, 800dd3e <xQueueGiveFromISR+0x8c>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800dd2e:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 800dd32:	f000 fe03 	bl	800e93c <xTaskRemoveFromEventList>
 800dd36:	b110      	cbz	r0, 800dd3e <xQueueGiveFromISR+0x8c>
							if( pxHigherPriorityTaskWoken != NULL )
 800dd38:	b10d      	cbz	r5, 800dd3e <xQueueGiveFromISR+0x8c>
								*pxHigherPriorityTaskWoken = pdTRUE;
 800dd3a:	2301      	movs	r3, #1
 800dd3c:	602b      	str	r3, [r5, #0]
			xReturn = pdPASS;
 800dd3e:	2001      	movs	r0, #1
	__asm volatile
 800dd40:	f386 8811 	msr	BASEPRI, r6
}
 800dd44:	bd70      	pop	{r4, r5, r6, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800dd46:	3301      	adds	r3, #1
 800dd48:	b25b      	sxtb	r3, r3
 800dd4a:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 800dd4e:	e7f6      	b.n	800dd3e <xQueueGiveFromISR+0x8c>
			xReturn = errQUEUE_FULL;
 800dd50:	2000      	movs	r0, #0
 800dd52:	e7f5      	b.n	800dd40 <xQueueGiveFromISR+0x8e>

0800dd54 <xQueueReceive>:
{
 800dd54:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 800dd58:	460e      	mov	r6, r1
	configASSERT( ( pxQueue ) );
 800dd5a:	4604      	mov	r4, r0
{
 800dd5c:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 800dd5e:	b940      	cbnz	r0, 800dd72 <xQueueReceive+0x1e>
	__asm volatile
 800dd60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dd64:	f383 8811 	msr	BASEPRI, r3
 800dd68:	f3bf 8f6f 	isb	sy
 800dd6c:	f3bf 8f4f 	dsb	sy
 800dd70:	e7fe      	b.n	800dd70 <xQueueReceive+0x1c>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800dd72:	b951      	cbnz	r1, 800dd8a <xQueueReceive+0x36>
 800dd74:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 800dd76:	b143      	cbz	r3, 800dd8a <xQueueReceive+0x36>
 800dd78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dd7c:	f383 8811 	msr	BASEPRI, r3
 800dd80:	f3bf 8f6f 	isb	sy
 800dd84:	f3bf 8f4f 	dsb	sy
 800dd88:	e7fe      	b.n	800dd88 <xQueueReceive+0x34>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800dd8a:	f000 fe6d 	bl	800ea68 <xTaskGetSchedulerState>
 800dd8e:	4605      	mov	r5, r0
 800dd90:	b318      	cbz	r0, 800ddda <xQueueReceive+0x86>
 800dd92:	2500      	movs	r5, #0
		prvLockQueue( pxQueue );
 800dd94:	f04f 0800 	mov.w	r8, #0
		taskENTER_CRITICAL();
 800dd98:	f7ff fb6c 	bl	800d474 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800dd9c:	6ba7      	ldr	r7, [r4, #56]	@ 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800dd9e:	b347      	cbz	r7, 800ddf2 <xQueueReceive+0x9e>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800dda0:	3f01      	subs	r7, #1
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800dda2:	4631      	mov	r1, r6
 800dda4:	4620      	mov	r0, r4
 800dda6:	f7ff fce3 	bl	800d770 <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800ddaa:	63a7      	str	r7, [r4, #56]	@ 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ddac:	6923      	ldr	r3, [r4, #16]
 800ddae:	b173      	cbz	r3, 800ddce <xQueueReceive+0x7a>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ddb0:	f104 0010 	add.w	r0, r4, #16
 800ddb4:	f000 fdc2 	bl	800e93c <xTaskRemoveFromEventList>
 800ddb8:	b148      	cbz	r0, 800ddce <xQueueReceive+0x7a>
						queueYIELD_IF_USING_PREEMPTION();
 800ddba:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800ddbe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ddc2:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800ddc6:	f3bf 8f4f 	dsb	sy
 800ddca:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 800ddce:	f7ff fb71 	bl	800d4b4 <vPortExitCritical>
				return pdPASS;
 800ddd2:	2001      	movs	r0, #1
}
 800ddd4:	b004      	add	sp, #16
 800ddd6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ddda:	9b01      	ldr	r3, [sp, #4]
 800dddc:	2b00      	cmp	r3, #0
 800ddde:	d0d9      	beq.n	800dd94 <xQueueReceive+0x40>
 800dde0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dde4:	f383 8811 	msr	BASEPRI, r3
 800dde8:	f3bf 8f6f 	isb	sy
 800ddec:	f3bf 8f4f 	dsb	sy
 800ddf0:	e7fe      	b.n	800ddf0 <xQueueReceive+0x9c>
				if( xTicksToWait == ( TickType_t ) 0 )
 800ddf2:	9b01      	ldr	r3, [sp, #4]
 800ddf4:	b91b      	cbnz	r3, 800ddfe <xQueueReceive+0xaa>
					taskEXIT_CRITICAL();
 800ddf6:	f7ff fb5d 	bl	800d4b4 <vPortExitCritical>
					return errQUEUE_EMPTY;
 800ddfa:	2000      	movs	r0, #0
 800ddfc:	e7ea      	b.n	800ddd4 <xQueueReceive+0x80>
				else if( xEntryTimeSet == pdFALSE )
 800ddfe:	b915      	cbnz	r5, 800de06 <xQueueReceive+0xb2>
					vTaskInternalSetTimeOutState( &xTimeOut );
 800de00:	a802      	add	r0, sp, #8
 800de02:	f000 fddd 	bl	800e9c0 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 800de06:	f7ff fb55 	bl	800d4b4 <vPortExitCritical>
		vTaskSuspendAll();
 800de0a:	f000 fb99 	bl	800e540 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800de0e:	f7ff fb31 	bl	800d474 <vPortEnterCritical>
 800de12:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800de16:	2bff      	cmp	r3, #255	@ 0xff
 800de18:	d101      	bne.n	800de1e <xQueueReceive+0xca>
 800de1a:	f884 8044 	strb.w	r8, [r4, #68]	@ 0x44
 800de1e:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 800de22:	2bff      	cmp	r3, #255	@ 0xff
 800de24:	d101      	bne.n	800de2a <xQueueReceive+0xd6>
 800de26:	f884 8045 	strb.w	r8, [r4, #69]	@ 0x45
 800de2a:	f7ff fb43 	bl	800d4b4 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800de2e:	a901      	add	r1, sp, #4
 800de30:	a802      	add	r0, sp, #8
 800de32:	f000 fdd1 	bl	800e9d8 <xTaskCheckForTimeOut>
 800de36:	bb00      	cbnz	r0, 800de7a <xQueueReceive+0x126>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800de38:	4620      	mov	r0, r4
 800de3a:	f7ff fc5b 	bl	800d6f4 <prvIsQueueEmpty>
 800de3e:	b1b0      	cbz	r0, 800de6e <xQueueReceive+0x11a>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800de40:	9901      	ldr	r1, [sp, #4]
 800de42:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 800de46:	f000 fd41 	bl	800e8cc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800de4a:	4620      	mov	r0, r4
 800de4c:	f7ff fca5 	bl	800d79a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800de50:	f000 fc1a 	bl	800e688 <xTaskResumeAll>
 800de54:	b948      	cbnz	r0, 800de6a <xQueueReceive+0x116>
					portYIELD_WITHIN_API();
 800de56:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800de5a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800de5e:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800de62:	f3bf 8f4f 	dsb	sy
 800de66:	f3bf 8f6f 	isb	sy
 800de6a:	2501      	movs	r5, #1
 800de6c:	e794      	b.n	800dd98 <xQueueReceive+0x44>
				prvUnlockQueue( pxQueue );
 800de6e:	4620      	mov	r0, r4
 800de70:	f7ff fc93 	bl	800d79a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800de74:	f000 fc08 	bl	800e688 <xTaskResumeAll>
 800de78:	e7f7      	b.n	800de6a <xQueueReceive+0x116>
			prvUnlockQueue( pxQueue );
 800de7a:	4620      	mov	r0, r4
 800de7c:	f7ff fc8d 	bl	800d79a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800de80:	f000 fc02 	bl	800e688 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800de84:	4620      	mov	r0, r4
 800de86:	f7ff fc35 	bl	800d6f4 <prvIsQueueEmpty>
 800de8a:	2800      	cmp	r0, #0
 800de8c:	d0ed      	beq.n	800de6a <xQueueReceive+0x116>
 800de8e:	e7b4      	b.n	800ddfa <xQueueReceive+0xa6>

0800de90 <xQueueSemaphoreTake>:
{
 800de90:	b5f0      	push	{r4, r5, r6, r7, lr}
 800de92:	b085      	sub	sp, #20
	configASSERT( ( pxQueue ) );
 800de94:	4604      	mov	r4, r0
{
 800de96:	9101      	str	r1, [sp, #4]
	configASSERT( ( pxQueue ) );
 800de98:	b940      	cbnz	r0, 800deac <xQueueSemaphoreTake+0x1c>
 800de9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800de9e:	f383 8811 	msr	BASEPRI, r3
 800dea2:	f3bf 8f6f 	isb	sy
 800dea6:	f3bf 8f4f 	dsb	sy
 800deaa:	e7fe      	b.n	800deaa <xQueueSemaphoreTake+0x1a>
	configASSERT( pxQueue->uxItemSize == 0 );
 800deac:	6c05      	ldr	r5, [r0, #64]	@ 0x40
 800deae:	b145      	cbz	r5, 800dec2 <xQueueSemaphoreTake+0x32>
 800deb0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800deb4:	f383 8811 	msr	BASEPRI, r3
 800deb8:	f3bf 8f6f 	isb	sy
 800debc:	f3bf 8f4f 	dsb	sy
 800dec0:	e7fe      	b.n	800dec0 <xQueueSemaphoreTake+0x30>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800dec2:	f000 fdd1 	bl	800ea68 <xTaskGetSchedulerState>
 800dec6:	4606      	mov	r6, r0
 800dec8:	b320      	cbz	r0, 800df14 <xQueueSemaphoreTake+0x84>
 800deca:	462e      	mov	r6, r5
		prvLockQueue( pxQueue );
 800decc:	2700      	movs	r7, #0
		taskENTER_CRITICAL();
 800dece:	f7ff fad1 	bl	800d474 <vPortEnterCritical>
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800ded2:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800ded4:	b353      	cbz	r3, 800df2c <xQueueSemaphoreTake+0x9c>
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800ded6:	3b01      	subs	r3, #1
 800ded8:	63a3      	str	r3, [r4, #56]	@ 0x38
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800deda:	6823      	ldr	r3, [r4, #0]
 800dedc:	b913      	cbnz	r3, 800dee4 <xQueueSemaphoreTake+0x54>
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800dede:	f000 fea1 	bl	800ec24 <pvTaskIncrementMutexHeldCount>
 800dee2:	60a0      	str	r0, [r4, #8]
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800dee4:	6923      	ldr	r3, [r4, #16]
 800dee6:	b173      	cbz	r3, 800df06 <xQueueSemaphoreTake+0x76>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800dee8:	f104 0010 	add.w	r0, r4, #16
 800deec:	f000 fd26 	bl	800e93c <xTaskRemoveFromEventList>
 800def0:	b148      	cbz	r0, 800df06 <xQueueSemaphoreTake+0x76>
						queueYIELD_IF_USING_PREEMPTION();
 800def2:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800def6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800defa:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800defe:	f3bf 8f4f 	dsb	sy
 800df02:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 800df06:	f7ff fad5 	bl	800d4b4 <vPortExitCritical>
				return pdPASS;
 800df0a:	2001      	movs	r0, #1
}
 800df0c:	b005      	add	sp, #20
 800df0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800df10:	4635      	mov	r5, r6
 800df12:	e7db      	b.n	800decc <xQueueSemaphoreTake+0x3c>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800df14:	9b01      	ldr	r3, [sp, #4]
 800df16:	2b00      	cmp	r3, #0
 800df18:	d0fa      	beq.n	800df10 <xQueueSemaphoreTake+0x80>
 800df1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800df1e:	f383 8811 	msr	BASEPRI, r3
 800df22:	f3bf 8f6f 	isb	sy
 800df26:	f3bf 8f4f 	dsb	sy
 800df2a:	e7fe      	b.n	800df2a <xQueueSemaphoreTake+0x9a>
				if( xTicksToWait == ( TickType_t ) 0 )
 800df2c:	9b01      	ldr	r3, [sp, #4]
 800df2e:	b953      	cbnz	r3, 800df46 <xQueueSemaphoreTake+0xb6>
						configASSERT( xInheritanceOccurred == pdFALSE );
 800df30:	2d00      	cmp	r5, #0
 800df32:	d066      	beq.n	800e002 <xQueueSemaphoreTake+0x172>
 800df34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800df38:	f383 8811 	msr	BASEPRI, r3
 800df3c:	f3bf 8f6f 	isb	sy
 800df40:	f3bf 8f4f 	dsb	sy
 800df44:	e7fe      	b.n	800df44 <xQueueSemaphoreTake+0xb4>
				else if( xEntryTimeSet == pdFALSE )
 800df46:	b916      	cbnz	r6, 800df4e <xQueueSemaphoreTake+0xbe>
					vTaskInternalSetTimeOutState( &xTimeOut );
 800df48:	a802      	add	r0, sp, #8
 800df4a:	f000 fd39 	bl	800e9c0 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 800df4e:	f7ff fab1 	bl	800d4b4 <vPortExitCritical>
		vTaskSuspendAll();
 800df52:	f000 faf5 	bl	800e540 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800df56:	f7ff fa8d 	bl	800d474 <vPortEnterCritical>
 800df5a:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800df5e:	2bff      	cmp	r3, #255	@ 0xff
 800df60:	d101      	bne.n	800df66 <xQueueSemaphoreTake+0xd6>
 800df62:	f884 7044 	strb.w	r7, [r4, #68]	@ 0x44
 800df66:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 800df6a:	2bff      	cmp	r3, #255	@ 0xff
 800df6c:	d101      	bne.n	800df72 <xQueueSemaphoreTake+0xe2>
 800df6e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800df72:	f7ff fa9f 	bl	800d4b4 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800df76:	a901      	add	r1, sp, #4
 800df78:	a802      	add	r0, sp, #8
 800df7a:	f000 fd2d 	bl	800e9d8 <xTaskCheckForTimeOut>
 800df7e:	bb50      	cbnz	r0, 800dfd6 <xQueueSemaphoreTake+0x146>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800df80:	4620      	mov	r0, r4
 800df82:	f7ff fbb7 	bl	800d6f4 <prvIsQueueEmpty>
 800df86:	b300      	cbz	r0, 800dfca <xQueueSemaphoreTake+0x13a>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800df88:	6823      	ldr	r3, [r4, #0]
 800df8a:	b93b      	cbnz	r3, 800df9c <xQueueSemaphoreTake+0x10c>
						taskENTER_CRITICAL();
 800df8c:	f7ff fa72 	bl	800d474 <vPortEnterCritical>
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800df90:	68a0      	ldr	r0, [r4, #8]
 800df92:	f000 fd79 	bl	800ea88 <xTaskPriorityInherit>
 800df96:	4605      	mov	r5, r0
						taskEXIT_CRITICAL();
 800df98:	f7ff fa8c 	bl	800d4b4 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800df9c:	9901      	ldr	r1, [sp, #4]
 800df9e:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 800dfa2:	f000 fc93 	bl	800e8cc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800dfa6:	4620      	mov	r0, r4
 800dfa8:	f7ff fbf7 	bl	800d79a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800dfac:	f000 fb6c 	bl	800e688 <xTaskResumeAll>
 800dfb0:	b948      	cbnz	r0, 800dfc6 <xQueueSemaphoreTake+0x136>
					portYIELD_WITHIN_API();
 800dfb2:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800dfb6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800dfba:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800dfbe:	f3bf 8f4f 	dsb	sy
 800dfc2:	f3bf 8f6f 	isb	sy
 800dfc6:	2601      	movs	r6, #1
 800dfc8:	e781      	b.n	800dece <xQueueSemaphoreTake+0x3e>
				prvUnlockQueue( pxQueue );
 800dfca:	4620      	mov	r0, r4
 800dfcc:	f7ff fbe5 	bl	800d79a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800dfd0:	f000 fb5a 	bl	800e688 <xTaskResumeAll>
 800dfd4:	e7f7      	b.n	800dfc6 <xQueueSemaphoreTake+0x136>
			prvUnlockQueue( pxQueue );
 800dfd6:	4620      	mov	r0, r4
 800dfd8:	f7ff fbdf 	bl	800d79a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800dfdc:	f000 fb54 	bl	800e688 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800dfe0:	4620      	mov	r0, r4
 800dfe2:	f7ff fb87 	bl	800d6f4 <prvIsQueueEmpty>
 800dfe6:	2800      	cmp	r0, #0
 800dfe8:	d0ed      	beq.n	800dfc6 <xQueueSemaphoreTake+0x136>
					if( xInheritanceOccurred != pdFALSE )
 800dfea:	b165      	cbz	r5, 800e006 <xQueueSemaphoreTake+0x176>
						taskENTER_CRITICAL();
 800dfec:	f7ff fa42 	bl	800d474 <vPortEnterCritical>
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800dff0:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 800dff2:	b119      	cbz	r1, 800dffc <xQueueSemaphoreTake+0x16c>
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800dff4:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800dff6:	6819      	ldr	r1, [r3, #0]
 800dff8:	f1c1 0138 	rsb	r1, r1, #56	@ 0x38
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800dffc:	68a0      	ldr	r0, [r4, #8]
 800dffe:	f000 fdc3 	bl	800eb88 <vTaskPriorityDisinheritAfterTimeout>
						taskEXIT_CRITICAL();
 800e002:	f7ff fa57 	bl	800d4b4 <vPortExitCritical>
					return errQUEUE_EMPTY;
 800e006:	2000      	movs	r0, #0
 800e008:	e780      	b.n	800df0c <xQueueSemaphoreTake+0x7c>

0800e00a <xQueueTakeMutexRecursive>:
	{
 800e00a:	b570      	push	{r4, r5, r6, lr}
 800e00c:	460d      	mov	r5, r1
		configASSERT( pxMutex );
 800e00e:	4604      	mov	r4, r0
 800e010:	b940      	cbnz	r0, 800e024 <xQueueTakeMutexRecursive+0x1a>
 800e012:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e016:	f383 8811 	msr	BASEPRI, r3
 800e01a:	f3bf 8f6f 	isb	sy
 800e01e:	f3bf 8f4f 	dsb	sy
 800e022:	e7fe      	b.n	800e022 <xQueueTakeMutexRecursive+0x18>
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800e024:	6886      	ldr	r6, [r0, #8]
 800e026:	f000 fd19 	bl	800ea5c <xTaskGetCurrentTaskHandle>
 800e02a:	4286      	cmp	r6, r0
 800e02c:	d104      	bne.n	800e038 <xQueueTakeMutexRecursive+0x2e>
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800e02e:	68e3      	ldr	r3, [r4, #12]
			xReturn = pdPASS;
 800e030:	2001      	movs	r0, #1
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800e032:	3301      	adds	r3, #1
 800e034:	60e3      	str	r3, [r4, #12]
	}
 800e036:	bd70      	pop	{r4, r5, r6, pc}
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 800e038:	4629      	mov	r1, r5
 800e03a:	4620      	mov	r0, r4
 800e03c:	f7ff ff28 	bl	800de90 <xQueueSemaphoreTake>
			if( xReturn != pdFAIL )
 800e040:	2800      	cmp	r0, #0
 800e042:	d0f8      	beq.n	800e036 <xQueueTakeMutexRecursive+0x2c>
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800e044:	68e3      	ldr	r3, [r4, #12]
 800e046:	3301      	adds	r3, #1
 800e048:	60e3      	str	r3, [r4, #12]
 800e04a:	e7f4      	b.n	800e036 <xQueueTakeMutexRecursive+0x2c>

0800e04c <xQueueReceiveFromISR>:
{
 800e04c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e050:	4689      	mov	r9, r1
 800e052:	4690      	mov	r8, r2
	configASSERT( pxQueue );
 800e054:	4604      	mov	r4, r0
 800e056:	b940      	cbnz	r0, 800e06a <xQueueReceiveFromISR+0x1e>
 800e058:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e05c:	f383 8811 	msr	BASEPRI, r3
 800e060:	f3bf 8f6f 	isb	sy
 800e064:	f3bf 8f4f 	dsb	sy
 800e068:	e7fe      	b.n	800e068 <xQueueReceiveFromISR+0x1c>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e06a:	b951      	cbnz	r1, 800e082 <xQueueReceiveFromISR+0x36>
 800e06c:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 800e06e:	b143      	cbz	r3, 800e082 <xQueueReceiveFromISR+0x36>
 800e070:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e074:	f383 8811 	msr	BASEPRI, r3
 800e078:	f3bf 8f6f 	isb	sy
 800e07c:	f3bf 8f4f 	dsb	sy
 800e080:	e7fe      	b.n	800e080 <xQueueReceiveFromISR+0x34>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800e082:	f7ff fb09 	bl	800d698 <vPortValidateInterruptPriority>
	__asm volatile
 800e086:	f3ef 8711 	mrs	r7, BASEPRI
 800e08a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e08e:	f383 8811 	msr	BASEPRI, r3
 800e092:	f3bf 8f6f 	isb	sy
 800e096:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e09a:	6ba5      	ldr	r5, [r4, #56]	@ 0x38
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800e09c:	b30d      	cbz	r5, 800e0e2 <xQueueReceiveFromISR+0x96>
			const int8_t cRxLock = pxQueue->cRxLock;
 800e09e:	f894 6044 	ldrb.w	r6, [r4, #68]	@ 0x44
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800e0a2:	4649      	mov	r1, r9
 800e0a4:	4620      	mov	r0, r4
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800e0a6:	3d01      	subs	r5, #1
			const int8_t cRxLock = pxQueue->cRxLock;
 800e0a8:	b276      	sxtb	r6, r6
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800e0aa:	f7ff fb61 	bl	800d770 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800e0ae:	63a5      	str	r5, [r4, #56]	@ 0x38
			if( cRxLock == queueUNLOCKED )
 800e0b0:	1c73      	adds	r3, r6, #1
 800e0b2:	d111      	bne.n	800e0d8 <xQueueReceiveFromISR+0x8c>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e0b4:	6923      	ldr	r3, [r4, #16]
 800e0b6:	b153      	cbz	r3, 800e0ce <xQueueReceiveFromISR+0x82>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e0b8:	f104 0010 	add.w	r0, r4, #16
 800e0bc:	f000 fc3e 	bl	800e93c <xTaskRemoveFromEventList>
 800e0c0:	b128      	cbz	r0, 800e0ce <xQueueReceiveFromISR+0x82>
						if( pxHigherPriorityTaskWoken != NULL )
 800e0c2:	f1b8 0f00 	cmp.w	r8, #0
 800e0c6:	d002      	beq.n	800e0ce <xQueueReceiveFromISR+0x82>
							*pxHigherPriorityTaskWoken = pdTRUE;
 800e0c8:	2301      	movs	r3, #1
 800e0ca:	f8c8 3000 	str.w	r3, [r8]
			xReturn = pdPASS;
 800e0ce:	2001      	movs	r0, #1
	__asm volatile
 800e0d0:	f387 8811 	msr	BASEPRI, r7
}
 800e0d4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800e0d8:	3601      	adds	r6, #1
 800e0da:	b276      	sxtb	r6, r6
 800e0dc:	f884 6044 	strb.w	r6, [r4, #68]	@ 0x44
 800e0e0:	e7f5      	b.n	800e0ce <xQueueReceiveFromISR+0x82>
			xReturn = pdFAIL;
 800e0e2:	4628      	mov	r0, r5
 800e0e4:	e7f4      	b.n	800e0d0 <xQueueReceiveFromISR+0x84>
	...

0800e0e8 <vQueueAddToRegistry>:
	{
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800e0e8:	2300      	movs	r3, #0
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800e0ea:	4a07      	ldr	r2, [pc, #28]	@ (800e108 <vQueueAddToRegistry+0x20>)
	{
 800e0ec:	b530      	push	{r4, r5, lr}
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800e0ee:	f852 5033 	ldr.w	r5, [r2, r3, lsl #3]
 800e0f2:	eb02 04c3 	add.w	r4, r2, r3, lsl #3
 800e0f6:	b91d      	cbnz	r5, 800e100 <vQueueAddToRegistry+0x18>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800e0f8:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800e0fc:	6060      	str	r0, [r4, #4]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800e0fe:	bd30      	pop	{r4, r5, pc}
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800e100:	3301      	adds	r3, #1
 800e102:	2b08      	cmp	r3, #8
 800e104:	d1f3      	bne.n	800e0ee <vQueueAddToRegistry+0x6>
 800e106:	e7fa      	b.n	800e0fe <vQueueAddToRegistry+0x16>
 800e108:	240287ac 	.word	0x240287ac

0800e10c <vQueueUnregisterQueue>:
	{
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800e10c:	2300      	movs	r3, #0
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800e10e:	4a09      	ldr	r2, [pc, #36]	@ (800e134 <vQueueUnregisterQueue+0x28>)
	{
 800e110:	b510      	push	{r4, lr}
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800e112:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 800e116:	00dc      	lsls	r4, r3, #3
 800e118:	4281      	cmp	r1, r0
 800e11a:	d106      	bne.n	800e12a <vQueueUnregisterQueue+0x1e>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800e11c:	4a06      	ldr	r2, [pc, #24]	@ (800e138 <vQueueUnregisterQueue+0x2c>)
 800e11e:	2100      	movs	r1, #0
 800e120:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800e124:	4422      	add	r2, r4
 800e126:	6051      	str	r1, [r2, #4]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800e128:	bd10      	pop	{r4, pc}
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800e12a:	3301      	adds	r3, #1
 800e12c:	2b08      	cmp	r3, #8
 800e12e:	d1f0      	bne.n	800e112 <vQueueUnregisterQueue+0x6>
 800e130:	e7fa      	b.n	800e128 <vQueueUnregisterQueue+0x1c>
 800e132:	bf00      	nop
 800e134:	240287b0 	.word	0x240287b0
 800e138:	240287ac 	.word	0x240287ac

0800e13c <vQueueDelete>:
{
 800e13c:	b510      	push	{r4, lr}
	configASSERT( pxQueue );
 800e13e:	b940      	cbnz	r0, 800e152 <vQueueDelete+0x16>
	__asm volatile
 800e140:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e144:	f383 8811 	msr	BASEPRI, r3
 800e148:	f3bf 8f6f 	isb	sy
 800e14c:	f3bf 8f4f 	dsb	sy
 800e150:	e7fe      	b.n	800e150 <vQueueDelete+0x14>
		vQueueUnregisterQueue( pxQueue );
 800e152:	f7ff ffdb 	bl	800e10c <vQueueUnregisterQueue>
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800e156:	f890 3046 	ldrb.w	r3, [r0, #70]	@ 0x46
 800e15a:	b91b      	cbnz	r3, 800e164 <vQueueDelete+0x28>
}
 800e15c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			vPortFree( pxQueue );
 800e160:	f7ff b8a4 	b.w	800d2ac <vPortFree>
}
 800e164:	bd10      	pop	{r4, pc}

0800e166 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800e166:	b570      	push	{r4, r5, r6, lr}
 800e168:	4604      	mov	r4, r0
 800e16a:	460d      	mov	r5, r1
 800e16c:	4616      	mov	r6, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800e16e:	f7ff f981 	bl	800d474 <vPortEnterCritical>
 800e172:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800e176:	2bff      	cmp	r3, #255	@ 0xff
 800e178:	d102      	bne.n	800e180 <vQueueWaitForMessageRestricted+0x1a>
 800e17a:	2300      	movs	r3, #0
 800e17c:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 800e180:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 800e184:	2bff      	cmp	r3, #255	@ 0xff
 800e186:	d102      	bne.n	800e18e <vQueueWaitForMessageRestricted+0x28>
 800e188:	2300      	movs	r3, #0
 800e18a:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 800e18e:	f7ff f991 	bl	800d4b4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800e192:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800e194:	b92b      	cbnz	r3, 800e1a2 <vQueueWaitForMessageRestricted+0x3c>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800e196:	4632      	mov	r2, r6
 800e198:	4629      	mov	r1, r5
 800e19a:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 800e19e:	f000 fbaf 	bl	800e900 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800e1a2:	4620      	mov	r0, r4
	}
 800e1a4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		prvUnlockQueue( pxQueue );
 800e1a8:	f7ff baf7 	b.w	800d79a <prvUnlockQueue>

0800e1ac <prvAddNewTaskToReadyList>:
	}
}
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800e1ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e1b0:	4604      	mov	r4, r0
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800e1b2:	f7ff f95f 	bl	800d474 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800e1b6:	4b2f      	ldr	r3, [pc, #188]	@ (800e274 <prvAddNewTaskToReadyList+0xc8>)
		if( pxCurrentTCB == NULL )
 800e1b8:	4e2f      	ldr	r6, [pc, #188]	@ (800e278 <prvAddNewTaskToReadyList+0xcc>)
		uxCurrentNumberOfTasks++;
 800e1ba:	681a      	ldr	r2, [r3, #0]
 800e1bc:	4f2f      	ldr	r7, [pc, #188]	@ (800e27c <prvAddNewTaskToReadyList+0xd0>)
 800e1be:	3201      	adds	r2, #1
 800e1c0:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 800e1c2:	6835      	ldr	r5, [r6, #0]
 800e1c4:	2d00      	cmp	r5, #0
 800e1c6:	d14a      	bne.n	800e25e <prvAddNewTaskToReadyList+0xb2>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800e1c8:	6034      	str	r4, [r6, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800e1ca:	681b      	ldr	r3, [r3, #0]
 800e1cc:	2b01      	cmp	r3, #1
 800e1ce:	d11f      	bne.n	800e210 <prvAddNewTaskToReadyList+0x64>
 800e1d0:	46b8      	mov	r8, r7

static void prvInitialiseTaskLists( void )
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e1d2:	3501      	adds	r5, #1
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800e1d4:	4640      	mov	r0, r8
 800e1d6:	f7ff f8a7 	bl	800d328 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e1da:	f108 0814 	add.w	r8, r8, #20
 800e1de:	2d38      	cmp	r5, #56	@ 0x38
 800e1e0:	d1f7      	bne.n	800e1d2 <prvAddNewTaskToReadyList+0x26>
	}

	vListInitialise( &xDelayedTaskList1 );
 800e1e2:	f8df 80c0 	ldr.w	r8, [pc, #192]	@ 800e2a4 <prvAddNewTaskToReadyList+0xf8>
	vListInitialise( &xDelayedTaskList2 );
 800e1e6:	4d26      	ldr	r5, [pc, #152]	@ (800e280 <prvAddNewTaskToReadyList+0xd4>)
	vListInitialise( &xDelayedTaskList1 );
 800e1e8:	4640      	mov	r0, r8
 800e1ea:	f7ff f89d 	bl	800d328 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800e1ee:	4628      	mov	r0, r5
 800e1f0:	f7ff f89a 	bl	800d328 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800e1f4:	4823      	ldr	r0, [pc, #140]	@ (800e284 <prvAddNewTaskToReadyList+0xd8>)
 800e1f6:	f7ff f897 	bl	800d328 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800e1fa:	4823      	ldr	r0, [pc, #140]	@ (800e288 <prvAddNewTaskToReadyList+0xdc>)
 800e1fc:	f7ff f894 	bl	800d328 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800e200:	4822      	ldr	r0, [pc, #136]	@ (800e28c <prvAddNewTaskToReadyList+0xe0>)
 800e202:	f7ff f891 	bl	800d328 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800e206:	4b22      	ldr	r3, [pc, #136]	@ (800e290 <prvAddNewTaskToReadyList+0xe4>)
 800e208:	f8c3 8000 	str.w	r8, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800e20c:	4b21      	ldr	r3, [pc, #132]	@ (800e294 <prvAddNewTaskToReadyList+0xe8>)
 800e20e:	601d      	str	r5, [r3, #0]
		uxTaskNumber++;
 800e210:	4a21      	ldr	r2, [pc, #132]	@ (800e298 <prvAddNewTaskToReadyList+0xec>)
 800e212:	6813      	ldr	r3, [r2, #0]
 800e214:	3301      	adds	r3, #1
 800e216:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 800e218:	4a20      	ldr	r2, [pc, #128]	@ (800e29c <prvAddNewTaskToReadyList+0xf0>)
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800e21a:	6463      	str	r3, [r4, #68]	@ 0x44
		prvAddTaskToReadyList( pxNewTCB );
 800e21c:	6811      	ldr	r1, [r2, #0]
 800e21e:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800e220:	428b      	cmp	r3, r1
 800e222:	d900      	bls.n	800e226 <prvAddNewTaskToReadyList+0x7a>
 800e224:	6013      	str	r3, [r2, #0]
 800e226:	2014      	movs	r0, #20
 800e228:	1d21      	adds	r1, r4, #4
 800e22a:	fb00 7003 	mla	r0, r0, r3, r7
 800e22e:	f7ff f889 	bl	800d344 <vListInsertEnd>
	taskEXIT_CRITICAL();
 800e232:	f7ff f93f 	bl	800d4b4 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 800e236:	4b1a      	ldr	r3, [pc, #104]	@ (800e2a0 <prvAddNewTaskToReadyList+0xf4>)
 800e238:	681b      	ldr	r3, [r3, #0]
 800e23a:	b173      	cbz	r3, 800e25a <prvAddNewTaskToReadyList+0xae>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800e23c:	6833      	ldr	r3, [r6, #0]
 800e23e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e240:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800e242:	429a      	cmp	r2, r3
 800e244:	d209      	bcs.n	800e25a <prvAddNewTaskToReadyList+0xae>
			taskYIELD_IF_USING_PREEMPTION();
 800e246:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800e24a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e24e:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800e252:	f3bf 8f4f 	dsb	sy
 800e256:	f3bf 8f6f 	isb	sy
}
 800e25a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if( xSchedulerRunning == pdFALSE )
 800e25e:	4b10      	ldr	r3, [pc, #64]	@ (800e2a0 <prvAddNewTaskToReadyList+0xf4>)
 800e260:	681a      	ldr	r2, [r3, #0]
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800e262:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
			if( xSchedulerRunning == pdFALSE )
 800e264:	2a00      	cmp	r2, #0
 800e266:	d1d3      	bne.n	800e210 <prvAddNewTaskToReadyList+0x64>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800e268:	6832      	ldr	r2, [r6, #0]
 800e26a:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800e26c:	429a      	cmp	r2, r3
 800e26e:	d8cf      	bhi.n	800e210 <prvAddNewTaskToReadyList+0x64>
					pxCurrentTCB = pxNewTCB;
 800e270:	6034      	str	r4, [r6, #0]
 800e272:	e7cd      	b.n	800e210 <prvAddNewTaskToReadyList+0x64>
 800e274:	24028810 	.word	0x24028810
 800e278:	24028ce4 	.word	0x24028ce4
 800e27c:	24028884 	.word	0x24028884
 800e280:	2402885c 	.word	0x2402885c
 800e284:	24028840 	.word	0x24028840
 800e288:	2402882c 	.word	0x2402882c
 800e28c:	24028814 	.word	0x24028814
 800e290:	24028858 	.word	0x24028858
 800e294:	24028854 	.word	0x24028854
 800e298:	240287f4 	.word	0x240287f4
 800e29c:	24028808 	.word	0x24028808
 800e2a0:	24028804 	.word	0x24028804
 800e2a4:	24028870 	.word	0x24028870

0800e2a8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800e2a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800e2aa:	4b15      	ldr	r3, [pc, #84]	@ (800e300 <prvAddCurrentTaskToDelayedList+0x58>)
{
 800e2ac:	4606      	mov	r6, r0
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e2ae:	4d15      	ldr	r5, [pc, #84]	@ (800e304 <prvAddCurrentTaskToDelayedList+0x5c>)
{
 800e2b0:	460f      	mov	r7, r1
const TickType_t xConstTickCount = xTickCount;
 800e2b2:	681c      	ldr	r4, [r3, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e2b4:	6828      	ldr	r0, [r5, #0]
 800e2b6:	3004      	adds	r0, #4
 800e2b8:	f7ff f866 	bl	800d388 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800e2bc:	1c73      	adds	r3, r6, #1
 800e2be:	d107      	bne.n	800e2d0 <prvAddCurrentTaskToDelayedList+0x28>
 800e2c0:	b137      	cbz	r7, 800e2d0 <prvAddCurrentTaskToDelayedList+0x28>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e2c2:	6829      	ldr	r1, [r5, #0]
 800e2c4:	4810      	ldr	r0, [pc, #64]	@ (800e308 <prvAddCurrentTaskToDelayedList+0x60>)
 800e2c6:	3104      	adds	r1, #4

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800e2c8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e2cc:	f7ff b83a 	b.w	800d344 <vListInsertEnd>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800e2d0:	19a4      	adds	r4, r4, r6
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800e2d2:	682b      	ldr	r3, [r5, #0]
 800e2d4:	605c      	str	r4, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800e2d6:	d307      	bcc.n	800e2e8 <prvAddCurrentTaskToDelayedList+0x40>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e2d8:	4b0c      	ldr	r3, [pc, #48]	@ (800e30c <prvAddCurrentTaskToDelayedList+0x64>)
 800e2da:	6818      	ldr	r0, [r3, #0]
 800e2dc:	6829      	ldr	r1, [r5, #0]
}
 800e2de:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e2e2:	3104      	adds	r1, #4
 800e2e4:	f7ff b839 	b.w	800d35a <vListInsert>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e2e8:	4b09      	ldr	r3, [pc, #36]	@ (800e310 <prvAddCurrentTaskToDelayedList+0x68>)
 800e2ea:	6818      	ldr	r0, [r3, #0]
 800e2ec:	6829      	ldr	r1, [r5, #0]
 800e2ee:	3104      	adds	r1, #4
 800e2f0:	f7ff f833 	bl	800d35a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800e2f4:	4b07      	ldr	r3, [pc, #28]	@ (800e314 <prvAddCurrentTaskToDelayedList+0x6c>)
 800e2f6:	681a      	ldr	r2, [r3, #0]
 800e2f8:	42a2      	cmp	r2, r4
 800e2fa:	d900      	bls.n	800e2fe <prvAddCurrentTaskToDelayedList+0x56>
					xNextTaskUnblockTime = xTimeToWake;
 800e2fc:	601c      	str	r4, [r3, #0]
}
 800e2fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e300:	2402880c 	.word	0x2402880c
 800e304:	24028ce4 	.word	0x24028ce4
 800e308:	24028814 	.word	0x24028814
 800e30c:	24028854 	.word	0x24028854
 800e310:	24028858 	.word	0x24028858
 800e314:	240287f0 	.word	0x240287f0

0800e318 <prvResetNextTaskUnblockTime>:
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e318:	4a06      	ldr	r2, [pc, #24]	@ (800e334 <prvResetNextTaskUnblockTime+0x1c>)
 800e31a:	6813      	ldr	r3, [r2, #0]
 800e31c:	6819      	ldr	r1, [r3, #0]
 800e31e:	4b06      	ldr	r3, [pc, #24]	@ (800e338 <prvResetNextTaskUnblockTime+0x20>)
 800e320:	b919      	cbnz	r1, 800e32a <prvResetNextTaskUnblockTime+0x12>
		xNextTaskUnblockTime = portMAX_DELAY;
 800e322:	f04f 32ff 	mov.w	r2, #4294967295
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800e326:	601a      	str	r2, [r3, #0]
}
 800e328:	4770      	bx	lr
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e32a:	6812      	ldr	r2, [r2, #0]
 800e32c:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800e32e:	68d2      	ldr	r2, [r2, #12]
 800e330:	6852      	ldr	r2, [r2, #4]
 800e332:	e7f8      	b.n	800e326 <prvResetNextTaskUnblockTime+0xe>
 800e334:	24028858 	.word	0x24028858
 800e338:	240287f0 	.word	0x240287f0

0800e33c <prvDeleteTCB>:
	{
 800e33c:	b510      	push	{r4, lr}
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800e33e:	f890 305d 	ldrb.w	r3, [r0, #93]	@ 0x5d
	{
 800e342:	4604      	mov	r4, r0
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800e344:	b93b      	cbnz	r3, 800e356 <prvDeleteTCB+0x1a>
				vPortFree( pxTCB->pxStack );
 800e346:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 800e348:	f7fe ffb0 	bl	800d2ac <vPortFree>
				vPortFree( pxTCB );
 800e34c:	4620      	mov	r0, r4
	}
 800e34e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				vPortFree( pxTCB );
 800e352:	f7fe bfab 	b.w	800d2ac <vPortFree>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800e356:	2b01      	cmp	r3, #1
 800e358:	d0f9      	beq.n	800e34e <prvDeleteTCB+0x12>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800e35a:	2b02      	cmp	r3, #2
 800e35c:	d008      	beq.n	800e370 <prvDeleteTCB+0x34>
 800e35e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e362:	f383 8811 	msr	BASEPRI, r3
 800e366:	f3bf 8f6f 	isb	sy
 800e36a:	f3bf 8f4f 	dsb	sy
 800e36e:	e7fe      	b.n	800e36e <prvDeleteTCB+0x32>
	}
 800e370:	bd10      	pop	{r4, pc}
	...

0800e374 <prvIdleTask>:
{
 800e374:	b580      	push	{r7, lr}
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e376:	4c14      	ldr	r4, [pc, #80]	@ (800e3c8 <prvIdleTask+0x54>)
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e378:	4f14      	ldr	r7, [pc, #80]	@ (800e3cc <prvIdleTask+0x58>)
				--uxCurrentNumberOfTasks;
 800e37a:	4d15      	ldr	r5, [pc, #84]	@ (800e3d0 <prvIdleTask+0x5c>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e37c:	6823      	ldr	r3, [r4, #0]
 800e37e:	b983      	cbnz	r3, 800e3a2 <prvIdleTask+0x2e>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800e380:	4b14      	ldr	r3, [pc, #80]	@ (800e3d4 <prvIdleTask+0x60>)
 800e382:	681b      	ldr	r3, [r3, #0]
 800e384:	2b01      	cmp	r3, #1
 800e386:	d909      	bls.n	800e39c <prvIdleTask+0x28>
				taskYIELD();
 800e388:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800e38c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e390:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800e394:	f3bf 8f4f 	dsb	sy
 800e398:	f3bf 8f6f 	isb	sy
			vApplicationIdleHook();
 800e39c:	f7f2 f9ac 	bl	80006f8 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 800e3a0:	e7eb      	b.n	800e37a <prvIdleTask+0x6>
			taskENTER_CRITICAL();
 800e3a2:	f7ff f867 	bl	800d474 <vPortEnterCritical>
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e3a6:	68fb      	ldr	r3, [r7, #12]
 800e3a8:	68de      	ldr	r6, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e3aa:	1d30      	adds	r0, r6, #4
 800e3ac:	f7fe ffec 	bl	800d388 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800e3b0:	682b      	ldr	r3, [r5, #0]
 800e3b2:	3b01      	subs	r3, #1
 800e3b4:	602b      	str	r3, [r5, #0]
				--uxDeletedTasksWaitingCleanUp;
 800e3b6:	6823      	ldr	r3, [r4, #0]
 800e3b8:	3b01      	subs	r3, #1
 800e3ba:	6023      	str	r3, [r4, #0]
			taskEXIT_CRITICAL();
 800e3bc:	f7ff f87a 	bl	800d4b4 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 800e3c0:	4630      	mov	r0, r6
 800e3c2:	f7ff ffbb 	bl	800e33c <prvDeleteTCB>
 800e3c6:	e7d9      	b.n	800e37c <prvIdleTask+0x8>
 800e3c8:	24028828 	.word	0x24028828
 800e3cc:	2402882c 	.word	0x2402882c
 800e3d0:	24028810 	.word	0x24028810
 800e3d4:	24028884 	.word	0x24028884

0800e3d8 <prvInitialiseNewTask.constprop.0>:
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 800e3d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800e3dc:	0096      	lsls	r6, r2, #2
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 800e3de:	4607      	mov	r7, r0
 800e3e0:	460d      	mov	r5, r1
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800e3e2:	21a5      	movs	r1, #165	@ 0xa5
 800e3e4:	4632      	mov	r2, r6
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 800e3e6:	4698      	mov	r8, r3
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800e3e8:	3e04      	subs	r6, #4
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 800e3ea:	e9dd 9409 	ldrd	r9, r4, [sp, #36]	@ 0x24
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800e3ee:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 800e3f0:	f019 fe62 	bl	80280b8 <memset>
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800e3f4:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800e3f6:	441e      	add	r6, r3
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800e3f8:	f026 0607 	bic.w	r6, r6, #7
	if( pcName != NULL )
 800e3fc:	b3b5      	cbz	r5, 800e46c <prvInitialiseNewTask.constprop.0+0x94>
 800e3fe:	1e6b      	subs	r3, r5, #1
 800e400:	f104 0233 	add.w	r2, r4, #51	@ 0x33
 800e404:	350f      	adds	r5, #15
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800e406:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 800e40a:	f802 1f01 	strb.w	r1, [r2, #1]!
			if( pcName[ x ] == ( char ) 0x00 )
 800e40e:	b109      	cbz	r1, 800e414 <prvInitialiseNewTask.constprop.0+0x3c>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800e410:	42ab      	cmp	r3, r5
 800e412:	d1f8      	bne.n	800e406 <prvInitialiseNewTask.constprop.0+0x2e>
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800e414:	2300      	movs	r3, #0
 800e416:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800e41a:	9d08      	ldr	r5, [sp, #32]
		pxNewTCB->uxMutexesHeld = 0;
 800e41c:	f04f 0a00 	mov.w	sl, #0
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800e420:	1d20      	adds	r0, r4, #4
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800e422:	2d37      	cmp	r5, #55	@ 0x37
		pxNewTCB->uxMutexesHeld = 0;
 800e424:	f8c4 a050 	str.w	sl, [r4, #80]	@ 0x50
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800e428:	bf28      	it	cs
 800e42a:	2537      	movcs	r5, #55	@ 0x37
	pxNewTCB->uxPriority = uxPriority;
 800e42c:	62e5      	str	r5, [r4, #44]	@ 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 800e42e:	64e5      	str	r5, [r4, #76]	@ 0x4c
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e430:	f1c5 0538 	rsb	r5, r5, #56	@ 0x38
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800e434:	f7fe ff83 	bl	800d33e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800e438:	f104 0018 	add.w	r0, r4, #24
 800e43c:	f7fe ff7f 	bl	800d33e <vListInitialiseItem>
		pxNewTCB->ulNotifiedValue = 0;
 800e440:	f8c4 a058 	str.w	sl, [r4, #88]	@ 0x58
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800e444:	4642      	mov	r2, r8
 800e446:	4639      	mov	r1, r7
 800e448:	4630      	mov	r0, r6
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800e44a:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e44c:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800e44e:	6264      	str	r4, [r4, #36]	@ 0x24
		pxNewTCB->pxTaskTag = NULL;
 800e450:	f8c4 a054 	str.w	sl, [r4, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800e454:	f884 a05c 	strb.w	sl, [r4, #92]	@ 0x5c
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800e458:	f7fe ffe4 	bl	800d424 <pxPortInitialiseStack>
 800e45c:	6020      	str	r0, [r4, #0]
	if( pxCreatedTask != NULL )
 800e45e:	f1b9 0f00 	cmp.w	r9, #0
 800e462:	d001      	beq.n	800e468 <prvInitialiseNewTask.constprop.0+0x90>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800e464:	f8c9 4000 	str.w	r4, [r9]
}
 800e468:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800e46c:	f884 5034 	strb.w	r5, [r4, #52]	@ 0x34
 800e470:	e7d3      	b.n	800e41a <prvInitialiseNewTask.constprop.0+0x42>

0800e472 <xTaskCreateStatic>:
	{
 800e472:	b570      	push	{r4, r5, r6, lr}
 800e474:	b086      	sub	sp, #24
 800e476:	e9dd 540b 	ldrd	r5, r4, [sp, #44]	@ 0x2c
		configASSERT( puxStackBuffer != NULL );
 800e47a:	b945      	cbnz	r5, 800e48e <xTaskCreateStatic+0x1c>
 800e47c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e480:	f383 8811 	msr	BASEPRI, r3
 800e484:	f3bf 8f6f 	isb	sy
 800e488:	f3bf 8f4f 	dsb	sy
 800e48c:	e7fe      	b.n	800e48c <xTaskCreateStatic+0x1a>
		configASSERT( pxTaskBuffer != NULL );
 800e48e:	b944      	cbnz	r4, 800e4a2 <xTaskCreateStatic+0x30>
 800e490:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e494:	f383 8811 	msr	BASEPRI, r3
 800e498:	f3bf 8f6f 	isb	sy
 800e49c:	f3bf 8f4f 	dsb	sy
 800e4a0:	e7fe      	b.n	800e4a0 <xTaskCreateStatic+0x2e>
			volatile size_t xSize = sizeof( StaticTask_t );
 800e4a2:	2660      	movs	r6, #96	@ 0x60
 800e4a4:	9605      	str	r6, [sp, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 800e4a6:	9e05      	ldr	r6, [sp, #20]
 800e4a8:	2e60      	cmp	r6, #96	@ 0x60
 800e4aa:	d008      	beq.n	800e4be <xTaskCreateStatic+0x4c>
 800e4ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e4b0:	f383 8811 	msr	BASEPRI, r3
 800e4b4:	f3bf 8f6f 	isb	sy
 800e4b8:	f3bf 8f4f 	dsb	sy
 800e4bc:	e7fe      	b.n	800e4bc <xTaskCreateStatic+0x4a>
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800e4be:	6325      	str	r5, [r4, #48]	@ 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800e4c0:	2502      	movs	r5, #2
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800e4c2:	9e05      	ldr	r6, [sp, #20]
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800e4c4:	f884 505d 	strb.w	r5, [r4, #93]	@ 0x5d
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800e4c8:	ad04      	add	r5, sp, #16
 800e4ca:	9402      	str	r4, [sp, #8]
 800e4cc:	9501      	str	r5, [sp, #4]
 800e4ce:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 800e4d0:	9500      	str	r5, [sp, #0]
 800e4d2:	f7ff ff81 	bl	800e3d8 <prvInitialiseNewTask.constprop.0>
			prvAddNewTaskToReadyList( pxNewTCB );
 800e4d6:	4620      	mov	r0, r4
 800e4d8:	f7ff fe68 	bl	800e1ac <prvAddNewTaskToReadyList>
	}
 800e4dc:	9804      	ldr	r0, [sp, #16]
 800e4de:	b006      	add	sp, #24
 800e4e0:	bd70      	pop	{r4, r5, r6, pc}

0800e4e2 <xTaskCreate>:
	{
 800e4e2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e4e6:	4607      	mov	r7, r0
 800e4e8:	b085      	sub	sp, #20
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800e4ea:	0090      	lsls	r0, r2, #2
	{
 800e4ec:	4688      	mov	r8, r1
 800e4ee:	4616      	mov	r6, r2
 800e4f0:	4699      	mov	r9, r3
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800e4f2:	f7fe fe43 	bl	800d17c <pvPortMalloc>
			if( pxStack != NULL )
 800e4f6:	4605      	mov	r5, r0
 800e4f8:	b920      	cbnz	r0, 800e504 <xTaskCreate+0x22>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800e4fa:	f04f 30ff 	mov.w	r0, #4294967295
	}
 800e4fe:	b005      	add	sp, #20
 800e500:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800e504:	2060      	movs	r0, #96	@ 0x60
 800e506:	f7fe fe39 	bl	800d17c <pvPortMalloc>
				if( pxNewTCB != NULL )
 800e50a:	4604      	mov	r4, r0
 800e50c:	b198      	cbz	r0, 800e536 <xTaskCreate+0x54>
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800e50e:	2300      	movs	r3, #0
					pxNewTCB->pxStack = pxStack;
 800e510:	6305      	str	r5, [r0, #48]	@ 0x30
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800e512:	4632      	mov	r2, r6
 800e514:	4641      	mov	r1, r8
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800e516:	f880 305d 	strb.w	r3, [r0, #93]	@ 0x5d
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800e51a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800e51c:	9002      	str	r0, [sp, #8]
 800e51e:	4638      	mov	r0, r7
 800e520:	9301      	str	r3, [sp, #4]
 800e522:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800e524:	9300      	str	r3, [sp, #0]
 800e526:	464b      	mov	r3, r9
 800e528:	f7ff ff56 	bl	800e3d8 <prvInitialiseNewTask.constprop.0>
			prvAddNewTaskToReadyList( pxNewTCB );
 800e52c:	4620      	mov	r0, r4
 800e52e:	f7ff fe3d 	bl	800e1ac <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800e532:	2001      	movs	r0, #1
 800e534:	e7e3      	b.n	800e4fe <xTaskCreate+0x1c>
					vPortFree( pxStack );
 800e536:	4628      	mov	r0, r5
 800e538:	f7fe feb8 	bl	800d2ac <vPortFree>
		if( pxNewTCB != NULL )
 800e53c:	e7dd      	b.n	800e4fa <xTaskCreate+0x18>
	...

0800e540 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 800e540:	4a02      	ldr	r2, [pc, #8]	@ (800e54c <vTaskSuspendAll+0xc>)
 800e542:	6813      	ldr	r3, [r2, #0]
 800e544:	3301      	adds	r3, #1
 800e546:	6013      	str	r3, [r2, #0]
}
 800e548:	4770      	bx	lr
 800e54a:	bf00      	nop
 800e54c:	240287ec 	.word	0x240287ec

0800e550 <xTaskGetTickCount>:
		xTicks = xTickCount;
 800e550:	4b01      	ldr	r3, [pc, #4]	@ (800e558 <xTaskGetTickCount+0x8>)
 800e552:	6818      	ldr	r0, [r3, #0]
}
 800e554:	4770      	bx	lr
 800e556:	bf00      	nop
 800e558:	2402880c 	.word	0x2402880c

0800e55c <xTaskIncrementTick>:
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e55c:	4b3f      	ldr	r3, [pc, #252]	@ (800e65c <xTaskIncrementTick+0x100>)
 800e55e:	681b      	ldr	r3, [r3, #0]
{
 800e560:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e564:	2b00      	cmp	r3, #0
 800e566:	d172      	bne.n	800e64e <xTaskIncrementTick+0xf2>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800e568:	4b3d      	ldr	r3, [pc, #244]	@ (800e660 <xTaskIncrementTick+0x104>)
 800e56a:	681c      	ldr	r4, [r3, #0]
 800e56c:	3401      	adds	r4, #1
		xTickCount = xConstTickCount;
 800e56e:	601c      	str	r4, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800e570:	b9bc      	cbnz	r4, 800e5a2 <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
 800e572:	4b3c      	ldr	r3, [pc, #240]	@ (800e664 <xTaskIncrementTick+0x108>)
 800e574:	681a      	ldr	r2, [r3, #0]
 800e576:	6812      	ldr	r2, [r2, #0]
 800e578:	b142      	cbz	r2, 800e58c <xTaskIncrementTick+0x30>
 800e57a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e57e:	f383 8811 	msr	BASEPRI, r3
 800e582:	f3bf 8f6f 	isb	sy
 800e586:	f3bf 8f4f 	dsb	sy
 800e58a:	e7fe      	b.n	800e58a <xTaskIncrementTick+0x2e>
 800e58c:	4a36      	ldr	r2, [pc, #216]	@ (800e668 <xTaskIncrementTick+0x10c>)
 800e58e:	6819      	ldr	r1, [r3, #0]
 800e590:	6810      	ldr	r0, [r2, #0]
 800e592:	6018      	str	r0, [r3, #0]
 800e594:	6011      	str	r1, [r2, #0]
 800e596:	4a35      	ldr	r2, [pc, #212]	@ (800e66c <xTaskIncrementTick+0x110>)
 800e598:	6813      	ldr	r3, [r2, #0]
 800e59a:	3301      	adds	r3, #1
 800e59c:	6013      	str	r3, [r2, #0]
 800e59e:	f7ff febb 	bl	800e318 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 800e5a2:	4d33      	ldr	r5, [pc, #204]	@ (800e670 <xTaskIncrementTick+0x114>)
BaseType_t xSwitchRequired = pdFALSE;
 800e5a4:	f04f 0b00 	mov.w	fp, #0
 800e5a8:	4e32      	ldr	r6, [pc, #200]	@ (800e674 <xTaskIncrementTick+0x118>)
		if( xConstTickCount >= xNextTaskUnblockTime )
 800e5aa:	682b      	ldr	r3, [r5, #0]
 800e5ac:	4f32      	ldr	r7, [pc, #200]	@ (800e678 <xTaskIncrementTick+0x11c>)
 800e5ae:	429c      	cmp	r4, r3
 800e5b0:	d212      	bcs.n	800e5d8 <xTaskIncrementTick+0x7c>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800e5b2:	683a      	ldr	r2, [r7, #0]
 800e5b4:	2114      	movs	r1, #20
 800e5b6:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800e5b8:	434a      	muls	r2, r1
 800e5ba:	58b2      	ldr	r2, [r6, r2]
				xSwitchRequired = pdTRUE;
 800e5bc:	2a02      	cmp	r2, #2
			if( xYieldPending != pdFALSE )
 800e5be:	4a2f      	ldr	r2, [pc, #188]	@ (800e67c <xTaskIncrementTick+0x120>)
 800e5c0:	6812      	ldr	r2, [r2, #0]
				xSwitchRequired = pdTRUE;
 800e5c2:	bf28      	it	cs
 800e5c4:	f04f 0b01 	movcs.w	fp, #1
				xSwitchRequired = pdTRUE;
 800e5c8:	2a00      	cmp	r2, #0
 800e5ca:	bf18      	it	ne
 800e5cc:	f04f 0b01 	movne.w	fp, #1
}
 800e5d0:	4658      	mov	r0, fp
 800e5d2:	b003      	add	sp, #12
 800e5d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e5d8:	f8df 9088 	ldr.w	r9, [pc, #136]	@ 800e664 <xTaskIncrementTick+0x108>
					prvAddTaskToReadyList( pxTCB );
 800e5dc:	f8df a0a4 	ldr.w	sl, [pc, #164]	@ 800e684 <xTaskIncrementTick+0x128>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e5e0:	f8d9 2000 	ldr.w	r2, [r9]
 800e5e4:	6812      	ldr	r2, [r2, #0]
 800e5e6:	b91a      	cbnz	r2, 800e5f0 <xTaskIncrementTick+0x94>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e5e8:	f04f 32ff 	mov.w	r2, #4294967295
 800e5ec:	602a      	str	r2, [r5, #0]
					break;
 800e5ee:	e7e0      	b.n	800e5b2 <xTaskIncrementTick+0x56>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e5f0:	f8d9 2000 	ldr.w	r2, [r9]
 800e5f4:	68d2      	ldr	r2, [r2, #12]
 800e5f6:	f8d2 800c 	ldr.w	r8, [r2, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800e5fa:	f8d8 1004 	ldr.w	r1, [r8, #4]
					if( xConstTickCount < xItemValue )
 800e5fe:	428c      	cmp	r4, r1
 800e600:	d201      	bcs.n	800e606 <xTaskIncrementTick+0xaa>
						xNextTaskUnblockTime = xItemValue;
 800e602:	6029      	str	r1, [r5, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800e604:	e7d5      	b.n	800e5b2 <xTaskIncrementTick+0x56>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e606:	f108 0304 	add.w	r3, r8, #4
 800e60a:	4618      	mov	r0, r3
 800e60c:	9301      	str	r3, [sp, #4]
 800e60e:	f7fe febb 	bl	800d388 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800e612:	f8d8 1028 	ldr.w	r1, [r8, #40]	@ 0x28
 800e616:	b119      	cbz	r1, 800e620 <xTaskIncrementTick+0xc4>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e618:	f108 0018 	add.w	r0, r8, #24
 800e61c:	f7fe feb4 	bl	800d388 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800e620:	f8d8 002c 	ldr.w	r0, [r8, #44]	@ 0x2c
 800e624:	f8da 1000 	ldr.w	r1, [sl]
 800e628:	4288      	cmp	r0, r1
 800e62a:	d901      	bls.n	800e630 <xTaskIncrementTick+0xd4>
 800e62c:	f8ca 0000 	str.w	r0, [sl]
 800e630:	2314      	movs	r3, #20
 800e632:	9901      	ldr	r1, [sp, #4]
 800e634:	fb03 6000 	mla	r0, r3, r0, r6
 800e638:	f7fe fe84 	bl	800d344 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e63c:	6838      	ldr	r0, [r7, #0]
 800e63e:	f8d8 102c 	ldr.w	r1, [r8, #44]	@ 0x2c
 800e642:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
							xSwitchRequired = pdTRUE;
 800e644:	4291      	cmp	r1, r2
 800e646:	bf28      	it	cs
 800e648:	f04f 0b01 	movcs.w	fp, #1
 800e64c:	e7c8      	b.n	800e5e0 <xTaskIncrementTick+0x84>
		++xPendedTicks;
 800e64e:	4a0c      	ldr	r2, [pc, #48]	@ (800e680 <xTaskIncrementTick+0x124>)
BaseType_t xSwitchRequired = pdFALSE;
 800e650:	f04f 0b00 	mov.w	fp, #0
		++xPendedTicks;
 800e654:	6813      	ldr	r3, [r2, #0]
 800e656:	3301      	adds	r3, #1
 800e658:	6013      	str	r3, [r2, #0]
 800e65a:	e7b9      	b.n	800e5d0 <xTaskIncrementTick+0x74>
 800e65c:	240287ec 	.word	0x240287ec
 800e660:	2402880c 	.word	0x2402880c
 800e664:	24028858 	.word	0x24028858
 800e668:	24028854 	.word	0x24028854
 800e66c:	240287f8 	.word	0x240287f8
 800e670:	240287f0 	.word	0x240287f0
 800e674:	24028884 	.word	0x24028884
 800e678:	24028ce4 	.word	0x24028ce4
 800e67c:	240287fc 	.word	0x240287fc
 800e680:	24028800 	.word	0x24028800
 800e684:	24028808 	.word	0x24028808

0800e688 <xTaskResumeAll>:
{
 800e688:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	configASSERT( uxSchedulerSuspended );
 800e68c:	4c30      	ldr	r4, [pc, #192]	@ (800e750 <xTaskResumeAll+0xc8>)
 800e68e:	6823      	ldr	r3, [r4, #0]
 800e690:	b943      	cbnz	r3, 800e6a4 <xTaskResumeAll+0x1c>
 800e692:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e696:	f383 8811 	msr	BASEPRI, r3
 800e69a:	f3bf 8f6f 	isb	sy
 800e69e:	f3bf 8f4f 	dsb	sy
 800e6a2:	e7fe      	b.n	800e6a2 <xTaskResumeAll+0x1a>
	taskENTER_CRITICAL();
 800e6a4:	f7fe fee6 	bl	800d474 <vPortEnterCritical>
		--uxSchedulerSuspended;
 800e6a8:	6823      	ldr	r3, [r4, #0]
 800e6aa:	3b01      	subs	r3, #1
 800e6ac:	6023      	str	r3, [r4, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e6ae:	6824      	ldr	r4, [r4, #0]
 800e6b0:	b12c      	cbz	r4, 800e6be <xTaskResumeAll+0x36>
BaseType_t xAlreadyYielded = pdFALSE;
 800e6b2:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 800e6b4:	f7fe fefe 	bl	800d4b4 <vPortExitCritical>
}
 800e6b8:	4620      	mov	r0, r4
 800e6ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800e6be:	4b25      	ldr	r3, [pc, #148]	@ (800e754 <xTaskResumeAll+0xcc>)
 800e6c0:	681b      	ldr	r3, [r3, #0]
 800e6c2:	2b00      	cmp	r3, #0
 800e6c4:	d0f5      	beq.n	800e6b2 <xTaskResumeAll+0x2a>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800e6c6:	4d24      	ldr	r5, [pc, #144]	@ (800e758 <xTaskResumeAll+0xd0>)
					prvAddTaskToReadyList( pxTCB );
 800e6c8:	4e24      	ldr	r6, [pc, #144]	@ (800e75c <xTaskResumeAll+0xd4>)
 800e6ca:	f8df 80a0 	ldr.w	r8, [pc, #160]	@ 800e76c <xTaskResumeAll+0xe4>
 800e6ce:	e01d      	b.n	800e70c <xTaskResumeAll+0x84>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e6d0:	68eb      	ldr	r3, [r5, #12]
 800e6d2:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e6d4:	1d27      	adds	r7, r4, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e6d6:	f104 0018 	add.w	r0, r4, #24
 800e6da:	f7fe fe55 	bl	800d388 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e6de:	4638      	mov	r0, r7
 800e6e0:	f7fe fe52 	bl	800d388 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800e6e4:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800e6e6:	6832      	ldr	r2, [r6, #0]
 800e6e8:	4293      	cmp	r3, r2
 800e6ea:	d900      	bls.n	800e6ee <xTaskResumeAll+0x66>
 800e6ec:	6033      	str	r3, [r6, #0]
 800e6ee:	2014      	movs	r0, #20
 800e6f0:	4639      	mov	r1, r7
 800e6f2:	fb00 8003 	mla	r0, r0, r3, r8
 800e6f6:	f7fe fe25 	bl	800d344 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e6fa:	4b19      	ldr	r3, [pc, #100]	@ (800e760 <xTaskResumeAll+0xd8>)
 800e6fc:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800e6fe:	681b      	ldr	r3, [r3, #0]
 800e700:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e702:	429a      	cmp	r2, r3
 800e704:	d302      	bcc.n	800e70c <xTaskResumeAll+0x84>
						xYieldPending = pdTRUE;
 800e706:	4b17      	ldr	r3, [pc, #92]	@ (800e764 <xTaskResumeAll+0xdc>)
 800e708:	2201      	movs	r2, #1
 800e70a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800e70c:	682b      	ldr	r3, [r5, #0]
 800e70e:	2b00      	cmp	r3, #0
 800e710:	d1de      	bne.n	800e6d0 <xTaskResumeAll+0x48>
				if( pxTCB != NULL )
 800e712:	b10c      	cbz	r4, 800e718 <xTaskResumeAll+0x90>
					prvResetNextTaskUnblockTime();
 800e714:	f7ff fe00 	bl	800e318 <prvResetNextTaskUnblockTime>
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800e718:	4d13      	ldr	r5, [pc, #76]	@ (800e768 <xTaskResumeAll+0xe0>)
 800e71a:	682c      	ldr	r4, [r5, #0]
					if( xPendedCounts > ( TickType_t ) 0U )
 800e71c:	b144      	cbz	r4, 800e730 <xTaskResumeAll+0xa8>
								xYieldPending = pdTRUE;
 800e71e:	4e11      	ldr	r6, [pc, #68]	@ (800e764 <xTaskResumeAll+0xdc>)
 800e720:	2701      	movs	r7, #1
							if( xTaskIncrementTick() != pdFALSE )
 800e722:	f7ff ff1b 	bl	800e55c <xTaskIncrementTick>
 800e726:	b100      	cbz	r0, 800e72a <xTaskResumeAll+0xa2>
								xYieldPending = pdTRUE;
 800e728:	6037      	str	r7, [r6, #0]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800e72a:	3c01      	subs	r4, #1
 800e72c:	d1f9      	bne.n	800e722 <xTaskResumeAll+0x9a>
						xPendedTicks = 0;
 800e72e:	602c      	str	r4, [r5, #0]
				if( xYieldPending != pdFALSE )
 800e730:	4b0c      	ldr	r3, [pc, #48]	@ (800e764 <xTaskResumeAll+0xdc>)
 800e732:	681b      	ldr	r3, [r3, #0]
 800e734:	2b00      	cmp	r3, #0
 800e736:	d0bc      	beq.n	800e6b2 <xTaskResumeAll+0x2a>
					taskYIELD_IF_USING_PREEMPTION();
 800e738:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800e73c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e740:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800e744:	f3bf 8f4f 	dsb	sy
 800e748:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 800e74c:	2401      	movs	r4, #1
 800e74e:	e7b1      	b.n	800e6b4 <xTaskResumeAll+0x2c>
 800e750:	240287ec 	.word	0x240287ec
 800e754:	24028810 	.word	0x24028810
 800e758:	24028840 	.word	0x24028840
 800e75c:	24028808 	.word	0x24028808
 800e760:	24028ce4 	.word	0x24028ce4
 800e764:	240287fc 	.word	0x240287fc
 800e768:	24028800 	.word	0x24028800
 800e76c:	24028884 	.word	0x24028884

0800e770 <vTaskSetApplicationTaskTag>:
	{
 800e770:	b538      	push	{r3, r4, r5, lr}
 800e772:	460d      	mov	r5, r1
		if( xTask == NULL )
 800e774:	4604      	mov	r4, r0
 800e776:	b908      	cbnz	r0, 800e77c <vTaskSetApplicationTaskTag+0xc>
			xTCB = ( TCB_t * ) pxCurrentTCB;
 800e778:	4b04      	ldr	r3, [pc, #16]	@ (800e78c <vTaskSetApplicationTaskTag+0x1c>)
 800e77a:	681c      	ldr	r4, [r3, #0]
		taskENTER_CRITICAL();
 800e77c:	f7fe fe7a 	bl	800d474 <vPortEnterCritical>
			xTCB->pxTaskTag = pxHookFunction;
 800e780:	6565      	str	r5, [r4, #84]	@ 0x54
	}
 800e782:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		taskEXIT_CRITICAL();
 800e786:	f7fe be95 	b.w	800d4b4 <vPortExitCritical>
 800e78a:	bf00      	nop
 800e78c:	24028ce4 	.word	0x24028ce4

0800e790 <xTaskCallApplicationTaskHook>:
	{
 800e790:	4603      	mov	r3, r0
 800e792:	4608      	mov	r0, r1
		if( xTask == NULL )
 800e794:	b90b      	cbnz	r3, 800e79a <xTaskCallApplicationTaskHook+0xa>
			xTCB = pxCurrentTCB;
 800e796:	4b03      	ldr	r3, [pc, #12]	@ (800e7a4 <xTaskCallApplicationTaskHook+0x14>)
 800e798:	681b      	ldr	r3, [r3, #0]
		if( xTCB->pxTaskTag != NULL )
 800e79a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e79c:	b103      	cbz	r3, 800e7a0 <xTaskCallApplicationTaskHook+0x10>
			xReturn = xTCB->pxTaskTag( pvParameter );
 800e79e:	4718      	bx	r3
	}
 800e7a0:	4618      	mov	r0, r3
 800e7a2:	4770      	bx	lr
 800e7a4:	24028ce4 	.word	0x24028ce4

0800e7a8 <vTaskStartScheduler>:
{
 800e7a8:	b510      	push	{r4, lr}
 800e7aa:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800e7ac:	2400      	movs	r4, #0
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800e7ae:	aa07      	add	r2, sp, #28
 800e7b0:	a906      	add	r1, sp, #24
 800e7b2:	a805      	add	r0, sp, #20
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800e7b4:	e9cd 4405 	strd	r4, r4, [sp, #20]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800e7b8:	f7fe fca2 	bl	800d100 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800e7bc:	9b05      	ldr	r3, [sp, #20]
 800e7be:	9a07      	ldr	r2, [sp, #28]
 800e7c0:	9302      	str	r3, [sp, #8]
 800e7c2:	9b06      	ldr	r3, [sp, #24]
 800e7c4:	4919      	ldr	r1, [pc, #100]	@ (800e82c <vTaskStartScheduler+0x84>)
 800e7c6:	481a      	ldr	r0, [pc, #104]	@ (800e830 <vTaskStartScheduler+0x88>)
 800e7c8:	e9cd 4300 	strd	r4, r3, [sp]
 800e7cc:	4623      	mov	r3, r4
 800e7ce:	f7ff fe50 	bl	800e472 <xTaskCreateStatic>
		if( xIdleTaskHandle != NULL )
 800e7d2:	b340      	cbz	r0, 800e826 <vTaskStartScheduler+0x7e>
			xReturn = xTimerCreateTimerTask();
 800e7d4:	f000 fa84 	bl	800ece0 <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
 800e7d8:	2801      	cmp	r0, #1
 800e7da:	d119      	bne.n	800e810 <vTaskStartScheduler+0x68>
 800e7dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e7e0:	f383 8811 	msr	BASEPRI, r3
 800e7e4:	f3bf 8f6f 	isb	sy
 800e7e8:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
 800e7ec:	f04f 32ff 	mov.w	r2, #4294967295
 800e7f0:	4b10      	ldr	r3, [pc, #64]	@ (800e834 <vTaskStartScheduler+0x8c>)
		traceTASK_SWITCHED_IN();
 800e7f2:	4621      	mov	r1, r4
		xNextTaskUnblockTime = portMAX_DELAY;
 800e7f4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800e7f6:	4b10      	ldr	r3, [pc, #64]	@ (800e838 <vTaskStartScheduler+0x90>)
 800e7f8:	6018      	str	r0, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800e7fa:	4b10      	ldr	r3, [pc, #64]	@ (800e83c <vTaskStartScheduler+0x94>)
 800e7fc:	601c      	str	r4, [r3, #0]
		traceTASK_SWITCHED_IN();
 800e7fe:	4b10      	ldr	r3, [pc, #64]	@ (800e840 <vTaskStartScheduler+0x98>)
 800e800:	6818      	ldr	r0, [r3, #0]
 800e802:	f7ff ffc5 	bl	800e790 <xTaskCallApplicationTaskHook>
}
 800e806:	b008      	add	sp, #32
 800e808:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		if( xPortStartScheduler() != pdFALSE )
 800e80c:	f7fe bec2 	b.w	800d594 <xPortStartScheduler>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800e810:	3001      	adds	r0, #1
 800e812:	d108      	bne.n	800e826 <vTaskStartScheduler+0x7e>
 800e814:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e818:	f383 8811 	msr	BASEPRI, r3
 800e81c:	f3bf 8f6f 	isb	sy
 800e820:	f3bf 8f4f 	dsb	sy
 800e824:	e7fe      	b.n	800e824 <vTaskStartScheduler+0x7c>
}
 800e826:	b008      	add	sp, #32
 800e828:	bd10      	pop	{r4, pc}
 800e82a:	bf00      	nop
 800e82c:	0802c270 	.word	0x0802c270
 800e830:	0800e375 	.word	0x0800e375
 800e834:	240287f0 	.word	0x240287f0
 800e838:	24028804 	.word	0x24028804
 800e83c:	2402880c 	.word	0x2402880c
 800e840:	24028ce4 	.word	0x24028ce4

0800e844 <vTaskSwitchContext>:
{
 800e844:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800e846:	4b1c      	ldr	r3, [pc, #112]	@ (800e8b8 <vTaskSwitchContext+0x74>)
 800e848:	681a      	ldr	r2, [r3, #0]
 800e84a:	4b1c      	ldr	r3, [pc, #112]	@ (800e8bc <vTaskSwitchContext+0x78>)
 800e84c:	b112      	cbz	r2, 800e854 <vTaskSwitchContext+0x10>
		xYieldPending = pdTRUE;
 800e84e:	2201      	movs	r2, #1
 800e850:	601a      	str	r2, [r3, #0]
}
 800e852:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		traceTASK_SWITCHED_OUT();
 800e854:	4c1a      	ldr	r4, [pc, #104]	@ (800e8c0 <vTaskSwitchContext+0x7c>)
 800e856:	2101      	movs	r1, #1
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e858:	4e1a      	ldr	r6, [pc, #104]	@ (800e8c4 <vTaskSwitchContext+0x80>)
 800e85a:	2714      	movs	r7, #20
		xYieldPending = pdFALSE;
 800e85c:	601a      	str	r2, [r3, #0]
		traceTASK_SWITCHED_OUT();
 800e85e:	6820      	ldr	r0, [r4, #0]
 800e860:	f7ff ff96 	bl	800e790 <xTaskCallApplicationTaskHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e864:	6832      	ldr	r2, [r6, #0]
 800e866:	4918      	ldr	r1, [pc, #96]	@ (800e8c8 <vTaskSwitchContext+0x84>)
 800e868:	fb07 f302 	mul.w	r3, r7, r2
 800e86c:	58cd      	ldr	r5, [r1, r3]
 800e86e:	18c8      	adds	r0, r1, r3
 800e870:	b1ad      	cbz	r5, 800e89e <vTaskSwitchContext+0x5a>
 800e872:	6845      	ldr	r5, [r0, #4]
 800e874:	3308      	adds	r3, #8
 800e876:	686d      	ldr	r5, [r5, #4]
 800e878:	440b      	add	r3, r1
 800e87a:	429d      	cmp	r5, r3
 800e87c:	6045      	str	r5, [r0, #4]
 800e87e:	bf04      	itt	eq
 800e880:	686b      	ldreq	r3, [r5, #4]
 800e882:	6043      	streq	r3, [r0, #4]
 800e884:	2314      	movs	r3, #20
 800e886:	fb03 1102 	mla	r1, r3, r2, r1
 800e88a:	684b      	ldr	r3, [r1, #4]
		traceTASK_SWITCHED_IN();
 800e88c:	2100      	movs	r1, #0
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e88e:	68db      	ldr	r3, [r3, #12]
 800e890:	6023      	str	r3, [r4, #0]
 800e892:	6032      	str	r2, [r6, #0]
		traceTASK_SWITCHED_IN();
 800e894:	6820      	ldr	r0, [r4, #0]
}
 800e896:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		traceTASK_SWITCHED_IN();
 800e89a:	f7ff bf79 	b.w	800e790 <xTaskCallApplicationTaskHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e89e:	b942      	cbnz	r2, 800e8b2 <vTaskSwitchContext+0x6e>
 800e8a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e8a4:	f383 8811 	msr	BASEPRI, r3
 800e8a8:	f3bf 8f6f 	isb	sy
 800e8ac:	f3bf 8f4f 	dsb	sy
 800e8b0:	e7fe      	b.n	800e8b0 <vTaskSwitchContext+0x6c>
 800e8b2:	3a01      	subs	r2, #1
 800e8b4:	e7d8      	b.n	800e868 <vTaskSwitchContext+0x24>
 800e8b6:	bf00      	nop
 800e8b8:	240287ec 	.word	0x240287ec
 800e8bc:	240287fc 	.word	0x240287fc
 800e8c0:	24028ce4 	.word	0x24028ce4
 800e8c4:	24028808 	.word	0x24028808
 800e8c8:	24028884 	.word	0x24028884

0800e8cc <vTaskPlaceOnEventList>:
{
 800e8cc:	b510      	push	{r4, lr}
 800e8ce:	460c      	mov	r4, r1
	configASSERT( pxEventList );
 800e8d0:	b940      	cbnz	r0, 800e8e4 <vTaskPlaceOnEventList+0x18>
 800e8d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e8d6:	f383 8811 	msr	BASEPRI, r3
 800e8da:	f3bf 8f6f 	isb	sy
 800e8de:	f3bf 8f4f 	dsb	sy
 800e8e2:	e7fe      	b.n	800e8e2 <vTaskPlaceOnEventList+0x16>
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e8e4:	4b05      	ldr	r3, [pc, #20]	@ (800e8fc <vTaskPlaceOnEventList+0x30>)
 800e8e6:	6819      	ldr	r1, [r3, #0]
 800e8e8:	3118      	adds	r1, #24
 800e8ea:	f7fe fd36 	bl	800d35a <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800e8ee:	4620      	mov	r0, r4
 800e8f0:	2101      	movs	r1, #1
}
 800e8f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800e8f6:	f7ff bcd7 	b.w	800e2a8 <prvAddCurrentTaskToDelayedList>
 800e8fa:	bf00      	nop
 800e8fc:	24028ce4 	.word	0x24028ce4

0800e900 <vTaskPlaceOnEventListRestricted>:
	{
 800e900:	b538      	push	{r3, r4, r5, lr}
 800e902:	460d      	mov	r5, r1
 800e904:	4614      	mov	r4, r2
		configASSERT( pxEventList );
 800e906:	b940      	cbnz	r0, 800e91a <vTaskPlaceOnEventListRestricted+0x1a>
 800e908:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e90c:	f383 8811 	msr	BASEPRI, r3
 800e910:	f3bf 8f6f 	isb	sy
 800e914:	f3bf 8f4f 	dsb	sy
 800e918:	e7fe      	b.n	800e918 <vTaskPlaceOnEventListRestricted+0x18>
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e91a:	4b07      	ldr	r3, [pc, #28]	@ (800e938 <vTaskPlaceOnEventListRestricted+0x38>)
 800e91c:	6819      	ldr	r1, [r3, #0]
 800e91e:	3118      	adds	r1, #24
 800e920:	f7fe fd10 	bl	800d344 <vListInsertEnd>
			xTicksToWait = portMAX_DELAY;
 800e924:	2c00      	cmp	r4, #0
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800e926:	4621      	mov	r1, r4
 800e928:	bf0c      	ite	eq
 800e92a:	4628      	moveq	r0, r5
 800e92c:	f04f 30ff 	movne.w	r0, #4294967295
	}
 800e930:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800e934:	f7ff bcb8 	b.w	800e2a8 <prvAddCurrentTaskToDelayedList>
 800e938:	24028ce4 	.word	0x24028ce4

0800e93c <xTaskRemoveFromEventList>:
{
 800e93c:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e93e:	68c3      	ldr	r3, [r0, #12]
 800e940:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 800e942:	b944      	cbnz	r4, 800e956 <xTaskRemoveFromEventList+0x1a>
 800e944:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e948:	f383 8811 	msr	BASEPRI, r3
 800e94c:	f3bf 8f6f 	isb	sy
 800e950:	f3bf 8f4f 	dsb	sy
 800e954:	e7fe      	b.n	800e954 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800e956:	f104 0518 	add.w	r5, r4, #24
 800e95a:	4628      	mov	r0, r5
 800e95c:	f7fe fd14 	bl	800d388 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e960:	4b11      	ldr	r3, [pc, #68]	@ (800e9a8 <xTaskRemoveFromEventList+0x6c>)
 800e962:	681b      	ldr	r3, [r3, #0]
 800e964:	b9d3      	cbnz	r3, 800e99c <xTaskRemoveFromEventList+0x60>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800e966:	1d25      	adds	r5, r4, #4
 800e968:	4628      	mov	r0, r5
 800e96a:	f7fe fd0d 	bl	800d388 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800e96e:	4a0f      	ldr	r2, [pc, #60]	@ (800e9ac <xTaskRemoveFromEventList+0x70>)
 800e970:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800e972:	6811      	ldr	r1, [r2, #0]
 800e974:	428b      	cmp	r3, r1
 800e976:	d900      	bls.n	800e97a <xTaskRemoveFromEventList+0x3e>
 800e978:	6013      	str	r3, [r2, #0]
 800e97a:	2014      	movs	r0, #20
 800e97c:	4a0c      	ldr	r2, [pc, #48]	@ (800e9b0 <xTaskRemoveFromEventList+0x74>)
 800e97e:	4629      	mov	r1, r5
 800e980:	fb00 2003 	mla	r0, r0, r3, r2
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800e984:	f7fe fcde 	bl	800d344 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800e988:	4b0a      	ldr	r3, [pc, #40]	@ (800e9b4 <xTaskRemoveFromEventList+0x78>)
 800e98a:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800e98c:	681b      	ldr	r3, [r3, #0]
 800e98e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e990:	429a      	cmp	r2, r3
 800e992:	d906      	bls.n	800e9a2 <xTaskRemoveFromEventList+0x66>
		xYieldPending = pdTRUE;
 800e994:	2001      	movs	r0, #1
 800e996:	4b08      	ldr	r3, [pc, #32]	@ (800e9b8 <xTaskRemoveFromEventList+0x7c>)
 800e998:	6018      	str	r0, [r3, #0]
}
 800e99a:	bd38      	pop	{r3, r4, r5, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800e99c:	4629      	mov	r1, r5
 800e99e:	4807      	ldr	r0, [pc, #28]	@ (800e9bc <xTaskRemoveFromEventList+0x80>)
 800e9a0:	e7f0      	b.n	800e984 <xTaskRemoveFromEventList+0x48>
		xReturn = pdFALSE;
 800e9a2:	2000      	movs	r0, #0
	return xReturn;
 800e9a4:	e7f9      	b.n	800e99a <xTaskRemoveFromEventList+0x5e>
 800e9a6:	bf00      	nop
 800e9a8:	240287ec 	.word	0x240287ec
 800e9ac:	24028808 	.word	0x24028808
 800e9b0:	24028884 	.word	0x24028884
 800e9b4:	24028ce4 	.word	0x24028ce4
 800e9b8:	240287fc 	.word	0x240287fc
 800e9bc:	24028840 	.word	0x24028840

0800e9c0 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800e9c0:	4b03      	ldr	r3, [pc, #12]	@ (800e9d0 <vTaskInternalSetTimeOutState+0x10>)
 800e9c2:	681b      	ldr	r3, [r3, #0]
 800e9c4:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800e9c6:	4b03      	ldr	r3, [pc, #12]	@ (800e9d4 <vTaskInternalSetTimeOutState+0x14>)
 800e9c8:	681b      	ldr	r3, [r3, #0]
 800e9ca:	6043      	str	r3, [r0, #4]
}
 800e9cc:	4770      	bx	lr
 800e9ce:	bf00      	nop
 800e9d0:	240287f8 	.word	0x240287f8
 800e9d4:	2402880c 	.word	0x2402880c

0800e9d8 <xTaskCheckForTimeOut>:
{
 800e9d8:	b570      	push	{r4, r5, r6, lr}
 800e9da:	460c      	mov	r4, r1
	configASSERT( pxTimeOut );
 800e9dc:	4605      	mov	r5, r0
 800e9de:	b940      	cbnz	r0, 800e9f2 <xTaskCheckForTimeOut+0x1a>
 800e9e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e9e4:	f383 8811 	msr	BASEPRI, r3
 800e9e8:	f3bf 8f6f 	isb	sy
 800e9ec:	f3bf 8f4f 	dsb	sy
 800e9f0:	e7fe      	b.n	800e9f0 <xTaskCheckForTimeOut+0x18>
	configASSERT( pxTicksToWait );
 800e9f2:	b941      	cbnz	r1, 800ea06 <xTaskCheckForTimeOut+0x2e>
 800e9f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e9f8:	f383 8811 	msr	BASEPRI, r3
 800e9fc:	f3bf 8f6f 	isb	sy
 800ea00:	f3bf 8f4f 	dsb	sy
 800ea04:	e7fe      	b.n	800ea04 <xTaskCheckForTimeOut+0x2c>
	taskENTER_CRITICAL();
 800ea06:	f7fe fd35 	bl	800d474 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 800ea0a:	4b0f      	ldr	r3, [pc, #60]	@ (800ea48 <xTaskCheckForTimeOut+0x70>)
 800ea0c:	6819      	ldr	r1, [r3, #0]
			if( *pxTicksToWait == portMAX_DELAY )
 800ea0e:	6823      	ldr	r3, [r4, #0]
 800ea10:	1c5a      	adds	r2, r3, #1
 800ea12:	d010      	beq.n	800ea36 <xTaskCheckForTimeOut+0x5e>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800ea14:	480d      	ldr	r0, [pc, #52]	@ (800ea4c <xTaskCheckForTimeOut+0x74>)
 800ea16:	682e      	ldr	r6, [r5, #0]
 800ea18:	6800      	ldr	r0, [r0, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800ea1a:	686a      	ldr	r2, [r5, #4]
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800ea1c:	4286      	cmp	r6, r0
 800ea1e:	d001      	beq.n	800ea24 <xTaskCheckForTimeOut+0x4c>
 800ea20:	428a      	cmp	r2, r1
 800ea22:	d90f      	bls.n	800ea44 <xTaskCheckForTimeOut+0x6c>
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800ea24:	1a88      	subs	r0, r1, r2
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800ea26:	4283      	cmp	r3, r0
 800ea28:	d90a      	bls.n	800ea40 <xTaskCheckForTimeOut+0x68>
			*pxTicksToWait -= xElapsedTime;
 800ea2a:	1a5b      	subs	r3, r3, r1
			vTaskInternalSetTimeOutState( pxTimeOut );
 800ea2c:	4628      	mov	r0, r5
			*pxTicksToWait -= xElapsedTime;
 800ea2e:	4413      	add	r3, r2
 800ea30:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800ea32:	f7ff ffc5 	bl	800e9c0 <vTaskInternalSetTimeOutState>
				xReturn = pdFALSE;
 800ea36:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 800ea38:	f7fe fd3c 	bl	800d4b4 <vPortExitCritical>
}
 800ea3c:	4620      	mov	r0, r4
 800ea3e:	bd70      	pop	{r4, r5, r6, pc}
			*pxTicksToWait = 0;
 800ea40:	2300      	movs	r3, #0
 800ea42:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
 800ea44:	2401      	movs	r4, #1
 800ea46:	e7f7      	b.n	800ea38 <xTaskCheckForTimeOut+0x60>
 800ea48:	2402880c 	.word	0x2402880c
 800ea4c:	240287f8 	.word	0x240287f8

0800ea50 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 800ea50:	4b01      	ldr	r3, [pc, #4]	@ (800ea58 <vTaskMissedYield+0x8>)
 800ea52:	2201      	movs	r2, #1
 800ea54:	601a      	str	r2, [r3, #0]
}
 800ea56:	4770      	bx	lr
 800ea58:	240287fc 	.word	0x240287fc

0800ea5c <xTaskGetCurrentTaskHandle>:
		xReturn = pxCurrentTCB;
 800ea5c:	4b01      	ldr	r3, [pc, #4]	@ (800ea64 <xTaskGetCurrentTaskHandle+0x8>)
 800ea5e:	6818      	ldr	r0, [r3, #0]
	}
 800ea60:	4770      	bx	lr
 800ea62:	bf00      	nop
 800ea64:	24028ce4 	.word	0x24028ce4

0800ea68 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 800ea68:	4b05      	ldr	r3, [pc, #20]	@ (800ea80 <xTaskGetSchedulerState+0x18>)
 800ea6a:	681b      	ldr	r3, [r3, #0]
 800ea6c:	b133      	cbz	r3, 800ea7c <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ea6e:	4b05      	ldr	r3, [pc, #20]	@ (800ea84 <xTaskGetSchedulerState+0x1c>)
 800ea70:	6818      	ldr	r0, [r3, #0]
 800ea72:	fab0 f080 	clz	r0, r0
 800ea76:	0940      	lsrs	r0, r0, #5
 800ea78:	0040      	lsls	r0, r0, #1
 800ea7a:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 800ea7c:	2001      	movs	r0, #1
	}
 800ea7e:	4770      	bx	lr
 800ea80:	24028804 	.word	0x24028804
 800ea84:	240287ec 	.word	0x240287ec

0800ea88 <xTaskPriorityInherit>:
	{
 800ea88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		if( pxMutexHolder != NULL )
 800ea8a:	4604      	mov	r4, r0
 800ea8c:	b338      	cbz	r0, 800eade <xTaskPriorityInherit+0x56>
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800ea8e:	4d1a      	ldr	r5, [pc, #104]	@ (800eaf8 <xTaskPriorityInherit+0x70>)
 800ea90:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 800ea92:	682a      	ldr	r2, [r5, #0]
 800ea94:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800ea96:	4293      	cmp	r3, r2
 800ea98:	d226      	bcs.n	800eae8 <xTaskPriorityInherit+0x60>
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800ea9a:	6982      	ldr	r2, [r0, #24]
 800ea9c:	2a00      	cmp	r2, #0
 800ea9e:	db04      	blt.n	800eaaa <xTaskPriorityInherit+0x22>
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800eaa0:	682a      	ldr	r2, [r5, #0]
 800eaa2:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800eaa4:	f1c2 0238 	rsb	r2, r2, #56	@ 0x38
 800eaa8:	6182      	str	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800eaaa:	2214      	movs	r2, #20
 800eaac:	4e13      	ldr	r6, [pc, #76]	@ (800eafc <xTaskPriorityInherit+0x74>)
 800eaae:	fb02 6303 	mla	r3, r2, r3, r6
 800eab2:	6962      	ldr	r2, [r4, #20]
 800eab4:	429a      	cmp	r2, r3
 800eab6:	d113      	bne.n	800eae0 <xTaskPriorityInherit+0x58>
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800eab8:	1d27      	adds	r7, r4, #4
 800eaba:	4638      	mov	r0, r7
 800eabc:	f7fe fc64 	bl	800d388 <uxListRemove>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800eac0:	682b      	ldr	r3, [r5, #0]
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800eac2:	4a0f      	ldr	r2, [pc, #60]	@ (800eb00 <xTaskPriorityInherit+0x78>)
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800eac4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800eac6:	6811      	ldr	r1, [r2, #0]
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800eac8:	62e3      	str	r3, [r4, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800eaca:	428b      	cmp	r3, r1
 800eacc:	d900      	bls.n	800ead0 <xTaskPriorityInherit+0x48>
 800eace:	6013      	str	r3, [r2, #0]
 800ead0:	2014      	movs	r0, #20
 800ead2:	4639      	mov	r1, r7
 800ead4:	fb00 6003 	mla	r0, r0, r3, r6
 800ead8:	f7fe fc34 	bl	800d344 <vListInsertEnd>
				xReturn = pdTRUE;
 800eadc:	2001      	movs	r0, #1
	}
 800eade:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800eae0:	682b      	ldr	r3, [r5, #0]
 800eae2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800eae4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800eae6:	e7f9      	b.n	800eadc <xTaskPriorityInherit+0x54>
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800eae8:	682b      	ldr	r3, [r5, #0]
 800eaea:	6cc0      	ldr	r0, [r0, #76]	@ 0x4c
 800eaec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800eaee:	4298      	cmp	r0, r3
 800eaf0:	bf2c      	ite	cs
 800eaf2:	2000      	movcs	r0, #0
 800eaf4:	2001      	movcc	r0, #1
 800eaf6:	e7f2      	b.n	800eade <xTaskPriorityInherit+0x56>
 800eaf8:	24028ce4 	.word	0x24028ce4
 800eafc:	24028884 	.word	0x24028884
 800eb00:	24028808 	.word	0x24028808

0800eb04 <xTaskPriorityDisinherit>:
	{
 800eb04:	b538      	push	{r3, r4, r5, lr}
		if( pxMutexHolder != NULL )
 800eb06:	b908      	cbnz	r0, 800eb0c <xTaskPriorityDisinherit+0x8>
	BaseType_t xReturn = pdFALSE;
 800eb08:	2000      	movs	r0, #0
	}
 800eb0a:	bd38      	pop	{r3, r4, r5, pc}
			configASSERT( pxTCB == pxCurrentTCB );
 800eb0c:	4b1b      	ldr	r3, [pc, #108]	@ (800eb7c <xTaskPriorityDisinherit+0x78>)
 800eb0e:	681c      	ldr	r4, [r3, #0]
 800eb10:	4284      	cmp	r4, r0
 800eb12:	d008      	beq.n	800eb26 <xTaskPriorityDisinherit+0x22>
 800eb14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eb18:	f383 8811 	msr	BASEPRI, r3
 800eb1c:	f3bf 8f6f 	isb	sy
 800eb20:	f3bf 8f4f 	dsb	sy
 800eb24:	e7fe      	b.n	800eb24 <xTaskPriorityDisinherit+0x20>
			configASSERT( pxTCB->uxMutexesHeld );
 800eb26:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 800eb28:	b943      	cbnz	r3, 800eb3c <xTaskPriorityDisinherit+0x38>
 800eb2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eb2e:	f383 8811 	msr	BASEPRI, r3
 800eb32:	f3bf 8f6f 	isb	sy
 800eb36:	f3bf 8f4f 	dsb	sy
 800eb3a:	e7fe      	b.n	800eb3a <xTaskPriorityDisinherit+0x36>
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800eb3c:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
			( pxTCB->uxMutexesHeld )--;
 800eb3e:	3b01      	subs	r3, #1
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800eb40:	6ce2      	ldr	r2, [r4, #76]	@ 0x4c
			( pxTCB->uxMutexesHeld )--;
 800eb42:	6523      	str	r3, [r4, #80]	@ 0x50
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800eb44:	4291      	cmp	r1, r2
 800eb46:	d0df      	beq.n	800eb08 <xTaskPriorityDisinherit+0x4>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800eb48:	2b00      	cmp	r3, #0
 800eb4a:	d1dd      	bne.n	800eb08 <xTaskPriorityDisinherit+0x4>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800eb4c:	1d25      	adds	r5, r4, #4
 800eb4e:	4628      	mov	r0, r5
 800eb50:	f7fe fc1a 	bl	800d388 <uxListRemove>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800eb54:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800eb56:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800eb5a:	62e3      	str	r3, [r4, #44]	@ 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800eb5c:	61a2      	str	r2, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 800eb5e:	4a08      	ldr	r2, [pc, #32]	@ (800eb80 <xTaskPriorityDisinherit+0x7c>)
 800eb60:	6811      	ldr	r1, [r2, #0]
 800eb62:	428b      	cmp	r3, r1
 800eb64:	d900      	bls.n	800eb68 <xTaskPriorityDisinherit+0x64>
 800eb66:	6013      	str	r3, [r2, #0]
 800eb68:	4a06      	ldr	r2, [pc, #24]	@ (800eb84 <xTaskPriorityDisinherit+0x80>)
 800eb6a:	2014      	movs	r0, #20
 800eb6c:	4629      	mov	r1, r5
 800eb6e:	fb00 2003 	mla	r0, r0, r3, r2
 800eb72:	f7fe fbe7 	bl	800d344 <vListInsertEnd>
					xReturn = pdTRUE;
 800eb76:	2001      	movs	r0, #1
		return xReturn;
 800eb78:	e7c7      	b.n	800eb0a <xTaskPriorityDisinherit+0x6>
 800eb7a:	bf00      	nop
 800eb7c:	24028ce4 	.word	0x24028ce4
 800eb80:	24028808 	.word	0x24028808
 800eb84:	24028884 	.word	0x24028884

0800eb88 <vTaskPriorityDisinheritAfterTimeout>:
	{
 800eb88:	b570      	push	{r4, r5, r6, lr}
		if( pxMutexHolder != NULL )
 800eb8a:	4604      	mov	r4, r0
 800eb8c:	2800      	cmp	r0, #0
 800eb8e:	d042      	beq.n	800ec16 <vTaskPriorityDisinheritAfterTimeout+0x8e>
			configASSERT( pxTCB->uxMutexesHeld );
 800eb90:	6d02      	ldr	r2, [r0, #80]	@ 0x50
 800eb92:	b942      	cbnz	r2, 800eba6 <vTaskPriorityDisinheritAfterTimeout+0x1e>
 800eb94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eb98:	f383 8811 	msr	BASEPRI, r3
 800eb9c:	f3bf 8f6f 	isb	sy
 800eba0:	f3bf 8f4f 	dsb	sy
 800eba4:	e7fe      	b.n	800eba4 <vTaskPriorityDisinheritAfterTimeout+0x1c>
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800eba6:	6cc3      	ldr	r3, [r0, #76]	@ 0x4c
 800eba8:	4299      	cmp	r1, r3
 800ebaa:	bf38      	it	cc
 800ebac:	4619      	movcc	r1, r3
			if( pxTCB->uxPriority != uxPriorityToUse )
 800ebae:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 800ebb0:	428b      	cmp	r3, r1
 800ebb2:	d030      	beq.n	800ec16 <vTaskPriorityDisinheritAfterTimeout+0x8e>
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800ebb4:	2a01      	cmp	r2, #1
 800ebb6:	d12e      	bne.n	800ec16 <vTaskPriorityDisinheritAfterTimeout+0x8e>
					configASSERT( pxTCB != pxCurrentTCB );
 800ebb8:	4a17      	ldr	r2, [pc, #92]	@ (800ec18 <vTaskPriorityDisinheritAfterTimeout+0x90>)
 800ebba:	6812      	ldr	r2, [r2, #0]
 800ebbc:	4282      	cmp	r2, r0
 800ebbe:	d108      	bne.n	800ebd2 <vTaskPriorityDisinheritAfterTimeout+0x4a>
 800ebc0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ebc4:	f383 8811 	msr	BASEPRI, r3
 800ebc8:	f3bf 8f6f 	isb	sy
 800ebcc:	f3bf 8f4f 	dsb	sy
 800ebd0:	e7fe      	b.n	800ebd0 <vTaskPriorityDisinheritAfterTimeout+0x48>
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800ebd2:	6982      	ldr	r2, [r0, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800ebd4:	4d11      	ldr	r5, [pc, #68]	@ (800ec1c <vTaskPriorityDisinheritAfterTimeout+0x94>)
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800ebd6:	2a00      	cmp	r2, #0
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800ebd8:	f04f 0214 	mov.w	r2, #20
					pxTCB->uxPriority = uxPriorityToUse;
 800ebdc:	62c1      	str	r1, [r0, #44]	@ 0x2c
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800ebde:	fb02 5303 	mla	r3, r2, r3, r5
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ebe2:	bfa8      	it	ge
 800ebe4:	f1c1 0138 	rsbge	r1, r1, #56	@ 0x38
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800ebe8:	6942      	ldr	r2, [r0, #20]
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ebea:	bfa8      	it	ge
 800ebec:	6181      	strge	r1, [r0, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800ebee:	429a      	cmp	r2, r3
 800ebf0:	d111      	bne.n	800ec16 <vTaskPriorityDisinheritAfterTimeout+0x8e>
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ebf2:	1d06      	adds	r6, r0, #4
 800ebf4:	4630      	mov	r0, r6
 800ebf6:	f7fe fbc7 	bl	800d388 <uxListRemove>
						prvAddTaskToReadyList( pxTCB );
 800ebfa:	4a09      	ldr	r2, [pc, #36]	@ (800ec20 <vTaskPriorityDisinheritAfterTimeout+0x98>)
 800ebfc:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800ebfe:	6811      	ldr	r1, [r2, #0]
 800ec00:	428b      	cmp	r3, r1
 800ec02:	d900      	bls.n	800ec06 <vTaskPriorityDisinheritAfterTimeout+0x7e>
 800ec04:	6013      	str	r3, [r2, #0]
 800ec06:	2014      	movs	r0, #20
 800ec08:	4631      	mov	r1, r6
 800ec0a:	fb00 5003 	mla	r0, r0, r3, r5
	}
 800ec0e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
						prvAddTaskToReadyList( pxTCB );
 800ec12:	f7fe bb97 	b.w	800d344 <vListInsertEnd>
	}
 800ec16:	bd70      	pop	{r4, r5, r6, pc}
 800ec18:	24028ce4 	.word	0x24028ce4
 800ec1c:	24028884 	.word	0x24028884
 800ec20:	24028808 	.word	0x24028808

0800ec24 <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
 800ec24:	4b04      	ldr	r3, [pc, #16]	@ (800ec38 <pvTaskIncrementMutexHeldCount+0x14>)
 800ec26:	681a      	ldr	r2, [r3, #0]
 800ec28:	b11a      	cbz	r2, 800ec32 <pvTaskIncrementMutexHeldCount+0xe>
			( pxCurrentTCB->uxMutexesHeld )++;
 800ec2a:	6819      	ldr	r1, [r3, #0]
 800ec2c:	6d0a      	ldr	r2, [r1, #80]	@ 0x50
 800ec2e:	3201      	adds	r2, #1
 800ec30:	650a      	str	r2, [r1, #80]	@ 0x50
		return pxCurrentTCB;
 800ec32:	6818      	ldr	r0, [r3, #0]
	}
 800ec34:	4770      	bx	lr
 800ec36:	bf00      	nop
 800ec38:	24028ce4 	.word	0x24028ce4

0800ec3c <prvInsertTimerInActiveList>:
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );

	if( xNextExpiryTime <= xTimeNow )
 800ec3c:	4291      	cmp	r1, r2
{
 800ec3e:	b508      	push	{r3, lr}
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800ec40:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800ec42:	6100      	str	r0, [r0, #16]
	if( xNextExpiryTime <= xTimeNow )
 800ec44:	d80a      	bhi.n	800ec5c <prvInsertTimerInActiveList+0x20>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ec46:	1ad2      	subs	r2, r2, r3
 800ec48:	6983      	ldr	r3, [r0, #24]
 800ec4a:	429a      	cmp	r2, r3
 800ec4c:	d20d      	bcs.n	800ec6a <prvInsertTimerInActiveList+0x2e>
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800ec4e:	1d01      	adds	r1, r0, #4
 800ec50:	4b07      	ldr	r3, [pc, #28]	@ (800ec70 <prvInsertTimerInActiveList+0x34>)
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800ec52:	6818      	ldr	r0, [r3, #0]
 800ec54:	f7fe fb81 	bl	800d35a <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 800ec58:	2000      	movs	r0, #0
		}
	}

	return xProcessTimerNow;
}
 800ec5a:	bd08      	pop	{r3, pc}
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800ec5c:	429a      	cmp	r2, r3
 800ec5e:	d201      	bcs.n	800ec64 <prvInsertTimerInActiveList+0x28>
 800ec60:	4299      	cmp	r1, r3
 800ec62:	d202      	bcs.n	800ec6a <prvInsertTimerInActiveList+0x2e>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800ec64:	1d01      	adds	r1, r0, #4
 800ec66:	4b03      	ldr	r3, [pc, #12]	@ (800ec74 <prvInsertTimerInActiveList+0x38>)
 800ec68:	e7f3      	b.n	800ec52 <prvInsertTimerInActiveList+0x16>
			xProcessTimerNow = pdTRUE;
 800ec6a:	2001      	movs	r0, #1
	return xProcessTimerNow;
 800ec6c:	e7f5      	b.n	800ec5a <prvInsertTimerInActiveList+0x1e>
 800ec6e:	bf00      	nop
 800ec70:	24028de4 	.word	0x24028de4
 800ec74:	24028de8 	.word	0x24028de8

0800ec78 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800ec78:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
	{
		if( xTimerQueue == NULL )
 800ec7a:	4c11      	ldr	r4, [pc, #68]	@ (800ecc0 <prvCheckForValidListAndQueue+0x48>)
	taskENTER_CRITICAL();
 800ec7c:	f7fe fbfa 	bl	800d474 <vPortEnterCritical>
		if( xTimerQueue == NULL )
 800ec80:	6825      	ldr	r5, [r4, #0]
 800ec82:	b9bd      	cbnz	r5, 800ecb4 <prvCheckForValidListAndQueue+0x3c>
		{
			vListInitialise( &xActiveTimerList1 );
 800ec84:	4f0f      	ldr	r7, [pc, #60]	@ (800ecc4 <prvCheckForValidListAndQueue+0x4c>)
			vListInitialise( &xActiveTimerList2 );
 800ec86:	4e10      	ldr	r6, [pc, #64]	@ (800ecc8 <prvCheckForValidListAndQueue+0x50>)
			vListInitialise( &xActiveTimerList1 );
 800ec88:	4638      	mov	r0, r7
 800ec8a:	f7fe fb4d 	bl	800d328 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800ec8e:	4630      	mov	r0, r6
 800ec90:	f7fe fb4a 	bl	800d328 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800ec94:	4b0d      	ldr	r3, [pc, #52]	@ (800eccc <prvCheckForValidListAndQueue+0x54>)
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800ec96:	4a0e      	ldr	r2, [pc, #56]	@ (800ecd0 <prvCheckForValidListAndQueue+0x58>)
 800ec98:	2110      	movs	r1, #16
			pxCurrentTimerList = &xActiveTimerList1;
 800ec9a:	601f      	str	r7, [r3, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800ec9c:	200a      	movs	r0, #10
			pxOverflowTimerList = &xActiveTimerList2;
 800ec9e:	4b0d      	ldr	r3, [pc, #52]	@ (800ecd4 <prvCheckForValidListAndQueue+0x5c>)
 800eca0:	601e      	str	r6, [r3, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800eca2:	4b0d      	ldr	r3, [pc, #52]	@ (800ecd8 <prvCheckForValidListAndQueue+0x60>)
 800eca4:	9500      	str	r5, [sp, #0]
 800eca6:	f7fe fdef 	bl	800d888 <xQueueGenericCreateStatic>
 800ecaa:	6020      	str	r0, [r4, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800ecac:	b110      	cbz	r0, 800ecb4 <prvCheckForValidListAndQueue+0x3c>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800ecae:	490b      	ldr	r1, [pc, #44]	@ (800ecdc <prvCheckForValidListAndQueue+0x64>)
 800ecb0:	f7ff fa1a 	bl	800e0e8 <vQueueAddToRegistry>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
}
 800ecb4:	b003      	add	sp, #12
 800ecb6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	taskEXIT_CRITICAL();
 800ecba:	f7fe bbfb 	b.w	800d4b4 <vPortExitCritical>
 800ecbe:	bf00      	nop
 800ecc0:	24028de0 	.word	0x24028de0
 800ecc4:	24028e00 	.word	0x24028e00
 800ecc8:	24028dec 	.word	0x24028dec
 800eccc:	24028de8 	.word	0x24028de8
 800ecd0:	24028d38 	.word	0x24028d38
 800ecd4:	24028de4 	.word	0x24028de4
 800ecd8:	24028ce8 	.word	0x24028ce8
 800ecdc:	0802c275 	.word	0x0802c275

0800ece0 <xTimerCreateTimerTask>:
{
 800ece0:	b510      	push	{r4, lr}
 800ece2:	b088      	sub	sp, #32
	prvCheckForValidListAndQueue();
 800ece4:	f7ff ffc8 	bl	800ec78 <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
 800ece8:	4b12      	ldr	r3, [pc, #72]	@ (800ed34 <xTimerCreateTimerTask+0x54>)
 800ecea:	681b      	ldr	r3, [r3, #0]
 800ecec:	b1b3      	cbz	r3, 800ed1c <xTimerCreateTimerTask+0x3c>
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800ecee:	2400      	movs	r4, #0
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800ecf0:	aa07      	add	r2, sp, #28
 800ecf2:	a906      	add	r1, sp, #24
 800ecf4:	a805      	add	r0, sp, #20
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800ecf6:	e9cd 4405 	strd	r4, r4, [sp, #20]
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800ecfa:	f7fe fa0d 	bl	800d118 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800ecfe:	9b05      	ldr	r3, [sp, #20]
 800ed00:	9a07      	ldr	r2, [sp, #28]
 800ed02:	9302      	str	r3, [sp, #8]
 800ed04:	9b06      	ldr	r3, [sp, #24]
 800ed06:	490c      	ldr	r1, [pc, #48]	@ (800ed38 <xTimerCreateTimerTask+0x58>)
 800ed08:	9301      	str	r3, [sp, #4]
 800ed0a:	2302      	movs	r3, #2
 800ed0c:	480b      	ldr	r0, [pc, #44]	@ (800ed3c <xTimerCreateTimerTask+0x5c>)
 800ed0e:	9300      	str	r3, [sp, #0]
 800ed10:	4623      	mov	r3, r4
 800ed12:	f7ff fbae 	bl	800e472 <xTaskCreateStatic>
 800ed16:	4b0a      	ldr	r3, [pc, #40]	@ (800ed40 <xTimerCreateTimerTask+0x60>)
 800ed18:	6018      	str	r0, [r3, #0]
			if( xTimerTaskHandle != NULL )
 800ed1a:	b940      	cbnz	r0, 800ed2e <xTimerCreateTimerTask+0x4e>
 800ed1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ed20:	f383 8811 	msr	BASEPRI, r3
 800ed24:	f3bf 8f6f 	isb	sy
 800ed28:	f3bf 8f4f 	dsb	sy
	configASSERT( xReturn );
 800ed2c:	e7fe      	b.n	800ed2c <xTimerCreateTimerTask+0x4c>
}
 800ed2e:	2001      	movs	r0, #1
 800ed30:	b008      	add	sp, #32
 800ed32:	bd10      	pop	{r4, pc}
 800ed34:	24028de0 	.word	0x24028de0
 800ed38:	0802c27a 	.word	0x0802c27a
 800ed3c:	0800ee3d 	.word	0x0800ee3d
 800ed40:	24028ddc 	.word	0x24028ddc

0800ed44 <xTimerGenericCommand>:
{
 800ed44:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800ed46:	4616      	mov	r6, r2
	configASSERT( xTimer );
 800ed48:	4604      	mov	r4, r0
{
 800ed4a:	461a      	mov	r2, r3
	configASSERT( xTimer );
 800ed4c:	b940      	cbnz	r0, 800ed60 <xTimerGenericCommand+0x1c>
 800ed4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ed52:	f383 8811 	msr	BASEPRI, r3
 800ed56:	f3bf 8f6f 	isb	sy
 800ed5a:	f3bf 8f4f 	dsb	sy
 800ed5e:	e7fe      	b.n	800ed5e <xTimerGenericCommand+0x1a>
	if( xTimerQueue != NULL )
 800ed60:	4d0c      	ldr	r5, [pc, #48]	@ (800ed94 <xTimerGenericCommand+0x50>)
 800ed62:	6828      	ldr	r0, [r5, #0]
 800ed64:	b178      	cbz	r0, 800ed86 <xTimerGenericCommand+0x42>
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800ed66:	2905      	cmp	r1, #5
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800ed68:	9402      	str	r4, [sp, #8]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800ed6a:	e9cd 1600 	strd	r1, r6, [sp]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800ed6e:	dc0c      	bgt.n	800ed8a <xTimerGenericCommand+0x46>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800ed70:	f7ff fe7a 	bl	800ea68 <xTaskGetSchedulerState>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800ed74:	2300      	movs	r3, #0
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800ed76:	2802      	cmp	r0, #2
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800ed78:	4669      	mov	r1, sp
 800ed7a:	6828      	ldr	r0, [r5, #0]
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800ed7c:	bf0c      	ite	eq
 800ed7e:	9a08      	ldreq	r2, [sp, #32]
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800ed80:	461a      	movne	r2, r3
 800ed82:	f7fe fe36 	bl	800d9f2 <xQueueGenericSend>
}
 800ed86:	b004      	add	sp, #16
 800ed88:	bd70      	pop	{r4, r5, r6, pc}
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800ed8a:	2300      	movs	r3, #0
 800ed8c:	4669      	mov	r1, sp
 800ed8e:	f7fe ff33 	bl	800dbf8 <xQueueGenericSendFromISR>
 800ed92:	e7f8      	b.n	800ed86 <xTimerGenericCommand+0x42>
 800ed94:	24028de0 	.word	0x24028de0

0800ed98 <prvSampleTimeNow>:
{
 800ed98:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
	if( xTimeNow < xLastTime )
 800ed9c:	f8df 8098 	ldr.w	r8, [pc, #152]	@ 800ee38 <prvSampleTimeNow+0xa0>
{
 800eda0:	4606      	mov	r6, r0
	xTimeNow = xTaskGetTickCount();
 800eda2:	f7ff fbd5 	bl	800e550 <xTaskGetTickCount>
 800eda6:	4605      	mov	r5, r0
	if( xTimeNow < xLastTime )
 800eda8:	f8d8 3000 	ldr.w	r3, [r8]
 800edac:	4283      	cmp	r3, r0
 800edae:	d909      	bls.n	800edc4 <prvSampleTimeNow+0x2c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800edb0:	4f1f      	ldr	r7, [pc, #124]	@ (800ee30 <prvSampleTimeNow+0x98>)
 800edb2:	683b      	ldr	r3, [r7, #0]
 800edb4:	681a      	ldr	r2, [r3, #0]
 800edb6:	b96a      	cbnz	r2, 800edd4 <prvSampleTimeNow+0x3c>
	pxCurrentTimerList = pxOverflowTimerList;
 800edb8:	4a1e      	ldr	r2, [pc, #120]	@ (800ee34 <prvSampleTimeNow+0x9c>)
 800edba:	6811      	ldr	r1, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800edbc:	6013      	str	r3, [r2, #0]
 800edbe:	2301      	movs	r3, #1
	pxCurrentTimerList = pxOverflowTimerList;
 800edc0:	6039      	str	r1, [r7, #0]
		*pxTimerListsWereSwitched = pdTRUE;
 800edc2:	e000      	b.n	800edc6 <prvSampleTimeNow+0x2e>
 800edc4:	2300      	movs	r3, #0
}
 800edc6:	4628      	mov	r0, r5
		*pxTimerListsWereSwitched = pdTRUE;
 800edc8:	6033      	str	r3, [r6, #0]
	xLastTime = xTimeNow;
 800edca:	f8c8 5000 	str.w	r5, [r8]
}
 800edce:	b002      	add	sp, #8
 800edd0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800edd4:	68db      	ldr	r3, [r3, #12]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800edd6:	68dc      	ldr	r4, [r3, #12]
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800edd8:	f8d3 9000 	ldr.w	r9, [r3]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800eddc:	f104 0a04 	add.w	sl, r4, #4
 800ede0:	4650      	mov	r0, sl
 800ede2:	f7fe fad1 	bl	800d388 <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ede6:	6a23      	ldr	r3, [r4, #32]
 800ede8:	4620      	mov	r0, r4
 800edea:	4798      	blx	r3
		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800edec:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 800edf0:	075b      	lsls	r3, r3, #29
 800edf2:	d5de      	bpl.n	800edb2 <prvSampleTimeNow+0x1a>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800edf4:	69a3      	ldr	r3, [r4, #24]
 800edf6:	444b      	add	r3, r9
			if( xReloadTime > xNextExpireTime )
 800edf8:	4599      	cmp	r9, r3
 800edfa:	d206      	bcs.n	800ee0a <prvSampleTimeNow+0x72>
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800edfc:	4651      	mov	r1, sl
 800edfe:	6838      	ldr	r0, [r7, #0]
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800ee00:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800ee02:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800ee04:	f7fe faa9 	bl	800d35a <vListInsert>
 800ee08:	e7d3      	b.n	800edb2 <prvSampleTimeNow+0x1a>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800ee0a:	2300      	movs	r3, #0
 800ee0c:	464a      	mov	r2, r9
 800ee0e:	4620      	mov	r0, r4
 800ee10:	4619      	mov	r1, r3
 800ee12:	9300      	str	r3, [sp, #0]
 800ee14:	f7ff ff96 	bl	800ed44 <xTimerGenericCommand>
				configASSERT( xResult );
 800ee18:	2800      	cmp	r0, #0
 800ee1a:	d1ca      	bne.n	800edb2 <prvSampleTimeNow+0x1a>
 800ee1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ee20:	f383 8811 	msr	BASEPRI, r3
 800ee24:	f3bf 8f6f 	isb	sy
 800ee28:	f3bf 8f4f 	dsb	sy
 800ee2c:	e7fe      	b.n	800ee2c <prvSampleTimeNow+0x94>
 800ee2e:	bf00      	nop
 800ee30:	24028de8 	.word	0x24028de8
 800ee34:	24028de4 	.word	0x24028de4
 800ee38:	24028dd8 	.word	0x24028dd8

0800ee3c <prvTimerTask>:
{
 800ee3c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800ee40:	4d6e      	ldr	r5, [pc, #440]	@ (800effc <prvTimerTask+0x1c0>)
{
 800ee42:	b089      	sub	sp, #36	@ 0x24
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800ee44:	4e6e      	ldr	r6, [pc, #440]	@ (800f000 <prvTimerTask+0x1c4>)
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800ee46:	682b      	ldr	r3, [r5, #0]
 800ee48:	f8d3 8000 	ldr.w	r8, [r3]
 800ee4c:	f1b8 0f00 	cmp.w	r8, #0
 800ee50:	d035      	beq.n	800eebe <prvTimerTask+0x82>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800ee52:	68db      	ldr	r3, [r3, #12]
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800ee54:	2400      	movs	r4, #0
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800ee56:	f8d3 8000 	ldr.w	r8, [r3]
	vTaskSuspendAll();
 800ee5a:	f7ff fb71 	bl	800e540 <vTaskSuspendAll>
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800ee5e:	a804      	add	r0, sp, #16
 800ee60:	f7ff ff9a 	bl	800ed98 <prvSampleTimeNow>
		if( xTimerListsWereSwitched == pdFALSE )
 800ee64:	9b04      	ldr	r3, [sp, #16]
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800ee66:	4681      	mov	r9, r0
		if( xTimerListsWereSwitched == pdFALSE )
 800ee68:	2b00      	cmp	r3, #0
 800ee6a:	d169      	bne.n	800ef40 <prvTimerTask+0x104>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800ee6c:	2c00      	cmp	r4, #0
 800ee6e:	d14c      	bne.n	800ef0a <prvTimerTask+0xce>
 800ee70:	4540      	cmp	r0, r8
 800ee72:	d350      	bcc.n	800ef16 <prvTimerTask+0xda>
				( void ) xTaskResumeAll();
 800ee74:	f7ff fc08 	bl	800e688 <xTaskResumeAll>
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ee78:	682b      	ldr	r3, [r5, #0]
 800ee7a:	68db      	ldr	r3, [r3, #12]
 800ee7c:	68df      	ldr	r7, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ee7e:	1d38      	adds	r0, r7, #4
 800ee80:	f7fe fa82 	bl	800d388 <uxListRemove>
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ee84:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800ee88:	0758      	lsls	r0, r3, #29
 800ee8a:	d51a      	bpl.n	800eec2 <prvTimerTask+0x86>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800ee8c:	69b9      	ldr	r1, [r7, #24]
 800ee8e:	4643      	mov	r3, r8
 800ee90:	464a      	mov	r2, r9
 800ee92:	4638      	mov	r0, r7
 800ee94:	4441      	add	r1, r8
 800ee96:	f7ff fed1 	bl	800ec3c <prvInsertTimerInActiveList>
 800ee9a:	b1b0      	cbz	r0, 800eeca <prvTimerTask+0x8e>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800ee9c:	4623      	mov	r3, r4
 800ee9e:	4642      	mov	r2, r8
 800eea0:	4621      	mov	r1, r4
 800eea2:	4638      	mov	r0, r7
 800eea4:	9400      	str	r4, [sp, #0]
 800eea6:	f7ff ff4d 	bl	800ed44 <xTimerGenericCommand>
			configASSERT( xResult );
 800eeaa:	b970      	cbnz	r0, 800eeca <prvTimerTask+0x8e>
 800eeac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eeb0:	f383 8811 	msr	BASEPRI, r3
 800eeb4:	f3bf 8f6f 	isb	sy
 800eeb8:	f3bf 8f4f 	dsb	sy
 800eebc:	e7fe      	b.n	800eebc <prvTimerTask+0x80>
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800eebe:	2401      	movs	r4, #1
 800eec0:	e7cb      	b.n	800ee5a <prvTimerTask+0x1e>
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800eec2:	f023 0301 	bic.w	r3, r3, #1
 800eec6:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800eeca:	6a3b      	ldr	r3, [r7, #32]
 800eecc:	4638      	mov	r0, r7
 800eece:	4798      	blx	r3
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800eed0:	2200      	movs	r2, #0
 800eed2:	a904      	add	r1, sp, #16
 800eed4:	6830      	ldr	r0, [r6, #0]
 800eed6:	f7fe ff3d 	bl	800dd54 <xQueueReceive>
 800eeda:	2800      	cmp	r0, #0
 800eedc:	d0b3      	beq.n	800ee46 <prvTimerTask+0xa>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800eede:	9b04      	ldr	r3, [sp, #16]
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800eee0:	9806      	ldr	r0, [sp, #24]
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800eee2:	2b00      	cmp	r3, #0
 800eee4:	db2f      	blt.n	800ef46 <prvTimerTask+0x10a>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800eee6:	9c06      	ldr	r4, [sp, #24]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800eee8:	6963      	ldr	r3, [r4, #20]
 800eeea:	2b00      	cmp	r3, #0
 800eeec:	d132      	bne.n	800ef54 <prvTimerTask+0x118>
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800eeee:	a803      	add	r0, sp, #12
 800eef0:	f7ff ff52 	bl	800ed98 <prvSampleTimeNow>
			switch( xMessage.xMessageID )
 800eef4:	9b04      	ldr	r3, [sp, #16]
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800eef6:	4602      	mov	r2, r0
			switch( xMessage.xMessageID )
 800eef8:	2b09      	cmp	r3, #9
 800eefa:	d8e9      	bhi.n	800eed0 <prvTimerTask+0x94>
 800eefc:	e8df f003 	tbb	[pc, r3]
 800ef00:	572e2e2e 	.word	0x572e2e2e
 800ef04:	2e2e765e 	.word	0x2e2e765e
 800ef08:	5e57      	.short	0x5e57
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800ef0a:	4b3e      	ldr	r3, [pc, #248]	@ (800f004 <prvTimerTask+0x1c8>)
 800ef0c:	681b      	ldr	r3, [r3, #0]
 800ef0e:	681c      	ldr	r4, [r3, #0]
 800ef10:	fab4 f484 	clz	r4, r4
 800ef14:	0964      	lsrs	r4, r4, #5
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800ef16:	4622      	mov	r2, r4
 800ef18:	eba8 0109 	sub.w	r1, r8, r9
 800ef1c:	6830      	ldr	r0, [r6, #0]
 800ef1e:	f7ff f922 	bl	800e166 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800ef22:	f7ff fbb1 	bl	800e688 <xTaskResumeAll>
 800ef26:	2800      	cmp	r0, #0
 800ef28:	d1d2      	bne.n	800eed0 <prvTimerTask+0x94>
					portYIELD_WITHIN_API();
 800ef2a:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800ef2e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ef32:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800ef36:	f3bf 8f4f 	dsb	sy
 800ef3a:	f3bf 8f6f 	isb	sy
 800ef3e:	e7c7      	b.n	800eed0 <prvTimerTask+0x94>
			( void ) xTaskResumeAll();
 800ef40:	f7ff fba2 	bl	800e688 <xTaskResumeAll>
}
 800ef44:	e7c4      	b.n	800eed0 <prvTimerTask+0x94>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800ef46:	9b05      	ldr	r3, [sp, #20]
 800ef48:	9907      	ldr	r1, [sp, #28]
 800ef4a:	4798      	blx	r3
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800ef4c:	9b04      	ldr	r3, [sp, #16]
 800ef4e:	2b00      	cmp	r3, #0
 800ef50:	dbbe      	blt.n	800eed0 <prvTimerTask+0x94>
 800ef52:	e7c8      	b.n	800eee6 <prvTimerTask+0xaa>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ef54:	1d20      	adds	r0, r4, #4
 800ef56:	f7fe fa17 	bl	800d388 <uxListRemove>
 800ef5a:	e7c8      	b.n	800eeee <prvTimerTask+0xb2>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800ef5c:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800ef60:	4620      	mov	r0, r4
 800ef62:	69a1      	ldr	r1, [r4, #24]
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800ef64:	f043 0301 	orr.w	r3, r3, #1
 800ef68:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800ef6c:	9b05      	ldr	r3, [sp, #20]
 800ef6e:	4419      	add	r1, r3
 800ef70:	f7ff fe64 	bl	800ec3c <prvInsertTimerInActiveList>
 800ef74:	2800      	cmp	r0, #0
 800ef76:	d0ab      	beq.n	800eed0 <prvTimerTask+0x94>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ef78:	6a23      	ldr	r3, [r4, #32]
 800ef7a:	4620      	mov	r0, r4
 800ef7c:	4798      	blx	r3
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ef7e:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 800ef82:	0759      	lsls	r1, r3, #29
 800ef84:	d5a4      	bpl.n	800eed0 <prvTimerTask+0x94>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800ef86:	69a2      	ldr	r2, [r4, #24]
 800ef88:	2300      	movs	r3, #0
 800ef8a:	9905      	ldr	r1, [sp, #20]
 800ef8c:	4620      	mov	r0, r4
 800ef8e:	9300      	str	r3, [sp, #0]
 800ef90:	440a      	add	r2, r1
 800ef92:	4619      	mov	r1, r3
 800ef94:	f7ff fed6 	bl	800ed44 <xTimerGenericCommand>
							configASSERT( xResult );
 800ef98:	2800      	cmp	r0, #0
 800ef9a:	d199      	bne.n	800eed0 <prvTimerTask+0x94>
 800ef9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800efa0:	f383 8811 	msr	BASEPRI, r3
 800efa4:	f3bf 8f6f 	isb	sy
 800efa8:	f3bf 8f4f 	dsb	sy
 800efac:	e7fe      	b.n	800efac <prvTimerTask+0x170>
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800efae:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800efb2:	f023 0301 	bic.w	r3, r3, #1
 800efb6:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
 800efba:	e789      	b.n	800eed0 <prvTimerTask+0x94>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800efbc:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 800efc0:	f043 0301 	orr.w	r3, r3, #1
 800efc4:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800efc8:	9905      	ldr	r1, [sp, #20]
 800efca:	61a1      	str	r1, [r4, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800efcc:	b941      	cbnz	r1, 800efe0 <prvTimerTask+0x1a4>
 800efce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800efd2:	f383 8811 	msr	BASEPRI, r3
 800efd6:	f3bf 8f6f 	isb	sy
 800efda:	f3bf 8f4f 	dsb	sy
 800efde:	e7fe      	b.n	800efde <prvTimerTask+0x1a2>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800efe0:	4603      	mov	r3, r0
 800efe2:	4401      	add	r1, r0
 800efe4:	4620      	mov	r0, r4
 800efe6:	f7ff fe29 	bl	800ec3c <prvInsertTimerInActiveList>
					break;
 800efea:	e771      	b.n	800eed0 <prvTimerTask+0x94>
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800efec:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 800eff0:	079a      	lsls	r2, r3, #30
 800eff2:	d4de      	bmi.n	800efb2 <prvTimerTask+0x176>
							vPortFree( pxTimer );
 800eff4:	4620      	mov	r0, r4
 800eff6:	f7fe f959 	bl	800d2ac <vPortFree>
 800effa:	e769      	b.n	800eed0 <prvTimerTask+0x94>
 800effc:	24028de8 	.word	0x24028de8
 800f000:	24028de0 	.word	0x24028de0
 800f004:	24028de4 	.word	0x24028de4

0800f008 <_ZNK8touchgfx17AbstractPartition18getAllocationCountEv>:
 800f008:	8880      	ldrh	r0, [r0, #4]
 800f00a:	4770      	bx	lr

0800f00c <_ZN8touchgfx17AbstractPartition7indexOfEPKv>:
 800f00c:	b570      	push	{r4, r5, r6, lr}
 800f00e:	6803      	ldr	r3, [r0, #0]
 800f010:	460c      	mov	r4, r1
 800f012:	2100      	movs	r1, #0
 800f014:	4605      	mov	r5, r0
 800f016:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f018:	4798      	blx	r3
 800f01a:	4606      	mov	r6, r0
 800f01c:	682b      	ldr	r3, [r5, #0]
 800f01e:	4628      	mov	r0, r5
 800f020:	1ba4      	subs	r4, r4, r6
 800f022:	6a1b      	ldr	r3, [r3, #32]
 800f024:	b2a4      	uxth	r4, r4
 800f026:	4798      	blx	r3
 800f028:	fbb4 f0f0 	udiv	r0, r4, r0
 800f02c:	bd70      	pop	{r4, r5, r6, pc}

0800f02e <_ZN8touchgfx17AbstractPartition5clearEv>:
 800f02e:	2300      	movs	r3, #0
 800f030:	8083      	strh	r3, [r0, #4]
 800f032:	4770      	bx	lr

0800f034 <_ZN8touchgfx17AbstractPartition8allocateEt>:
 800f034:	b510      	push	{r4, lr}
 800f036:	6803      	ldr	r3, [r0, #0]
 800f038:	4604      	mov	r4, r0
 800f03a:	8881      	ldrh	r1, [r0, #4]
 800f03c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f03e:	4798      	blx	r3
 800f040:	88a3      	ldrh	r3, [r4, #4]
 800f042:	3301      	adds	r3, #1
 800f044:	80a3      	strh	r3, [r4, #4]
 800f046:	bd10      	pop	{r4, pc}

0800f048 <_ZN8touchgfx17AbstractPartition10allocateAtEtt>:
 800f048:	6803      	ldr	r3, [r0, #0]
 800f04a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f04c:	4718      	bx	r3

0800f04e <_ZN8touchgfx17AbstractPartitionD1Ev>:
 800f04e:	4770      	bx	lr

0800f050 <_ZN8touchgfx17AbstractPartitionC1Ev>:
 800f050:	4a02      	ldr	r2, [pc, #8]	@ (800f05c <_ZN8touchgfx17AbstractPartitionC1Ev+0xc>)
 800f052:	6002      	str	r2, [r0, #0]
 800f054:	2200      	movs	r2, #0
 800f056:	8082      	strh	r2, [r0, #4]
 800f058:	4770      	bx	lr
 800f05a:	bf00      	nop
 800f05c:	0802c28c 	.word	0x0802c28c

0800f060 <_ZNK8touchgfx25AbstractDirectionProgress12getDirectionEv>:
 800f060:	f890 00b4 	ldrb.w	r0, [r0, #180]	@ 0xb4
 800f064:	4770      	bx	lr

0800f066 <_ZN8touchgfx25AbstractDirectionProgressD1Ev>:
 800f066:	4770      	bx	lr

0800f068 <_ZN8touchgfx25AbstractDirectionProgressD0Ev>:
 800f068:	b510      	push	{r4, lr}
 800f06a:	4604      	mov	r4, r0
 800f06c:	21b8      	movs	r1, #184	@ 0xb8
 800f06e:	f018 fa0e 	bl	802748e <_ZdlPvj>
 800f072:	4620      	mov	r0, r4
 800f074:	bd10      	pop	{r4, pc}

0800f076 <_ZN8touchgfx25AbstractDirectionProgress12setDirectionENS0_13DirectionTypeE.part.0>:
 800f076:	b570      	push	{r4, r5, r6, lr}
 800f078:	4604      	mov	r4, r0
 800f07a:	f880 10b4 	strb.w	r1, [r0, #180]	@ 0xb4
 800f07e:	3058      	adds	r0, #88	@ 0x58
 800f080:	f009 ffcb 	bl	801901a <_ZNK8touchgfx8Drawable10invalidateEv>
 800f084:	6823      	ldr	r3, [r4, #0]
 800f086:	4620      	mov	r0, r4
 800f088:	f8d3 50b0 	ldr.w	r5, [r3, #176]	@ 0xb0
 800f08c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800f090:	4798      	blx	r3
 800f092:	462b      	mov	r3, r5
 800f094:	4601      	mov	r1, r0
 800f096:	4620      	mov	r0, r4
 800f098:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f09c:	4718      	bx	r3

0800f09e <_ZN8touchgfx25AbstractDirectionProgress12setDirectionENS0_13DirectionTypeE>:
 800f09e:	f890 30b4 	ldrb.w	r3, [r0, #180]	@ 0xb4
 800f0a2:	428b      	cmp	r3, r1
 800f0a4:	d001      	beq.n	800f0aa <_ZN8touchgfx25AbstractDirectionProgress12setDirectionENS0_13DirectionTypeE+0xc>
 800f0a6:	f7ff bfe6 	b.w	800f076 <_ZN8touchgfx25AbstractDirectionProgress12setDirectionENS0_13DirectionTypeE.part.0>
 800f0aa:	4770      	bx	lr

0800f0ac <_ZN8touchgfx25AbstractDirectionProgressC1Ev>:
 800f0ac:	b510      	push	{r4, lr}
 800f0ae:	4604      	mov	r4, r0
 800f0b0:	f000 fb74 	bl	800f79c <_ZN8touchgfx25AbstractProgressIndicatorC1Ev>
 800f0b4:	4b03      	ldr	r3, [pc, #12]	@ (800f0c4 <_ZN8touchgfx25AbstractDirectionProgressC1Ev+0x18>)
 800f0b6:	4620      	mov	r0, r4
 800f0b8:	6023      	str	r3, [r4, #0]
 800f0ba:	2300      	movs	r3, #0
 800f0bc:	f884 30b4 	strb.w	r3, [r4, #180]	@ 0xb4
 800f0c0:	bd10      	pop	{r4, pc}
 800f0c2:	bf00      	nop
 800f0c4:	0802c2c0 	.word	0x0802c2c0

0800f0c8 <_ZN8touchgfx13ImageProgress15setAnchorAtZeroEb>:
 800f0c8:	b570      	push	{r4, r5, r6, lr}
 800f0ca:	6803      	ldr	r3, [r0, #0]
 800f0cc:	4604      	mov	r4, r0
 800f0ce:	f880 1114 	strb.w	r1, [r0, #276]	@ 0x114
 800f0d2:	f8d3 50b0 	ldr.w	r5, [r3, #176]	@ 0xb0
 800f0d6:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800f0da:	4798      	blx	r3
 800f0dc:	462b      	mov	r3, r5
 800f0de:	4601      	mov	r1, r0
 800f0e0:	4620      	mov	r0, r4
 800f0e2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f0e6:	4718      	bx	r3

0800f0e8 <_ZNK8touchgfx13ImageProgress15getAnchorAtZeroEv>:
 800f0e8:	f890 0114 	ldrb.w	r0, [r0, #276]	@ 0x114
 800f0ec:	4770      	bx	lr

0800f0ee <_ZNK8touchgfx13ImageProgress9getBitmapEv>:
 800f0ee:	f8b0 010a 	ldrh.w	r0, [r0, #266]	@ 0x10a
 800f0f2:	4770      	bx	lr

0800f0f4 <_ZN8touchgfx13ImageProgressD1Ev>:
 800f0f4:	4770      	bx	lr

0800f0f6 <_ZN8touchgfx13ImageProgressD0Ev>:
 800f0f6:	b510      	push	{r4, lr}
 800f0f8:	4604      	mov	r4, r0
 800f0fa:	f44f 718c 	mov.w	r1, #280	@ 0x118
 800f0fe:	f018 f9c6 	bl	802748e <_ZdlPvj>
 800f102:	4620      	mov	r0, r4
 800f104:	bd10      	pop	{r4, pc}

0800f106 <_ZN8touchgfx13ImageProgress9setBitmapEt>:
 800f106:	b507      	push	{r0, r1, r2, lr}
 800f108:	ab02      	add	r3, sp, #8
 800f10a:	30e4      	adds	r0, #228	@ 0xe4
 800f10c:	f823 1d04 	strh.w	r1, [r3, #-4]!
 800f110:	4619      	mov	r1, r3
 800f112:	f005 fd17 	bl	8014b44 <_ZN8touchgfx10TiledImage9setBitmapERKNS_6BitmapE>
 800f116:	b003      	add	sp, #12
 800f118:	f85d fb04 	ldr.w	pc, [sp], #4

0800f11c <_ZN8touchgfx13ImageProgress8setAlphaEh>:
 800f11c:	b538      	push	{r3, r4, r5, lr}
 800f11e:	4604      	mov	r4, r0
 800f120:	460d      	mov	r5, r1
 800f122:	f000 fa19 	bl	800f558 <_ZN8touchgfx25AbstractProgressIndicator8setAlphaEh>
 800f126:	f884 510c 	strb.w	r5, [r4, #268]	@ 0x10c
 800f12a:	bd38      	pop	{r3, r4, r5, pc}

0800f12c <_ZN8touchgfx13ImageProgress28setProgressIndicatorPositionEssss>:
 800f12c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800f130:	4617      	mov	r7, r2
 800f132:	f9bd 5020 	ldrsh.w	r5, [sp, #32]
 800f136:	2200      	movs	r2, #0
 800f138:	4604      	mov	r4, r0
 800f13a:	460e      	mov	r6, r1
 800f13c:	4698      	mov	r8, r3
 800f13e:	4611      	mov	r1, r2
 800f140:	9500      	str	r5, [sp, #0]
 800f142:	30b8      	adds	r0, #184	@ 0xb8
 800f144:	f7f4 ffa6 	bl	8004094 <_ZN8touchgfx8Drawable11setPositionEssss>
 800f148:	4643      	mov	r3, r8
 800f14a:	463a      	mov	r2, r7
 800f14c:	4631      	mov	r1, r6
 800f14e:	4620      	mov	r0, r4
 800f150:	9508      	str	r5, [sp, #32]
 800f152:	b002      	add	sp, #8
 800f154:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f158:	f000 baf3 	b.w	800f742 <_ZN8touchgfx25AbstractProgressIndicator28setProgressIndicatorPositionEssss>

0800f15c <_ZN8touchgfx13ImageProgress8setValueEi>:
 800f15c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f15e:	4604      	mov	r4, r0
 800f160:	b085      	sub	sp, #20
 800f162:	f000 fa4c 	bl	800f5fe <_ZN8touchgfx25AbstractProgressIndicator8setValueEi>
 800f166:	f894 30b4 	ldrb.w	r3, [r4, #180]	@ 0xb4
 800f16a:	4620      	mov	r0, r4
 800f16c:	2b01      	cmp	r3, #1
 800f16e:	bf94      	ite	ls
 800f170:	f8b4 1060 	ldrhls.w	r1, [r4, #96]	@ 0x60
 800f174:	f8b4 1062 	ldrhhi.w	r1, [r4, #98]	@ 0x62
 800f178:	f000 fa63 	bl	800f642 <_ZNK8touchgfx25AbstractProgressIndicator11getProgressEt>
 800f17c:	f894 3114 	ldrb.w	r3, [r4, #276]	@ 0x114
 800f180:	4606      	mov	r6, r0
 800f182:	b205      	sxth	r5, r0
 800f184:	2b00      	cmp	r3, #0
 800f186:	f000 80ca 	beq.w	800f31e <_ZN8touchgfx13ImageProgress8setValueEi+0x1c2>
 800f18a:	f894 30b4 	ldrb.w	r3, [r4, #180]	@ 0xb4
 800f18e:	2b03      	cmp	r3, #3
 800f190:	d834      	bhi.n	800f1fc <_ZN8touchgfx13ImageProgress8setValueEi+0xa0>
 800f192:	e8df f003 	tbb	[pc, r3]
 800f196:	3502      	.short	0x3502
 800f198:	9166      	.short	0x9166
 800f19a:	f9b4 3062 	ldrsh.w	r3, [r4, #98]	@ 0x62
 800f19e:	2200      	movs	r2, #0
 800f1a0:	f104 00b8 	add.w	r0, r4, #184	@ 0xb8
 800f1a4:	f9b4 60c0 	ldrsh.w	r6, [r4, #192]	@ 0xc0
 800f1a8:	4611      	mov	r1, r2
 800f1aa:	9300      	str	r3, [sp, #0]
 800f1ac:	462b      	mov	r3, r5
 800f1ae:	f7f4 ff71 	bl	8004094 <_ZN8touchgfx8Drawable11setPositionEssss>
 800f1b2:	f9b4 3062 	ldrsh.w	r3, [r4, #98]	@ 0x62
 800f1b6:	2200      	movs	r2, #0
 800f1b8:	f104 00e4 	add.w	r0, r4, #228	@ 0xe4
 800f1bc:	9300      	str	r3, [sp, #0]
 800f1be:	462b      	mov	r3, r5
 800f1c0:	4611      	mov	r1, r2
 800f1c2:	f7f4 ff67 	bl	8004094 <_ZN8touchgfx8Drawable11setPositionEssss>
 800f1c6:	f9b4 30c0 	ldrsh.w	r3, [r4, #192]	@ 0xc0
 800f1ca:	4631      	mov	r1, r6
 800f1cc:	f9b4 20c2 	ldrsh.w	r2, [r4, #194]	@ 0xc2
 800f1d0:	429e      	cmp	r6, r3
 800f1d2:	eba6 0603 	sub.w	r6, r6, r3
 800f1d6:	bfa8      	it	ge
 800f1d8:	4619      	movge	r1, r3
 800f1da:	2e00      	cmp	r6, #0
 800f1dc:	f8ad 1008 	strh.w	r1, [sp, #8]
 800f1e0:	bfb8      	it	lt
 800f1e2:	4276      	neglt	r6, r6
 800f1e4:	2100      	movs	r1, #0
 800f1e6:	f8ad 600c 	strh.w	r6, [sp, #12]
 800f1ea:	f8ad 100a 	strh.w	r1, [sp, #10]
 800f1ee:	f8ad 200e 	strh.w	r2, [sp, #14]
 800f1f2:	a902      	add	r1, sp, #8
 800f1f4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800f1f8:	f009 ff60 	bl	80190bc <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE>
 800f1fc:	b005      	add	sp, #20
 800f1fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f200:	8921      	ldrh	r1, [r4, #8]
 800f202:	2200      	movs	r2, #0
 800f204:	f9b4 3062 	ldrsh.w	r3, [r4, #98]	@ 0x62
 800f208:	1a09      	subs	r1, r1, r0
 800f20a:	f104 00b8 	add.w	r0, r4, #184	@ 0xb8
 800f20e:	9300      	str	r3, [sp, #0]
 800f210:	462b      	mov	r3, r5
 800f212:	b209      	sxth	r1, r1
 800f214:	f9b4 70bc 	ldrsh.w	r7, [r4, #188]	@ 0xbc
 800f218:	f7f4 ff3c 	bl	8004094 <_ZN8touchgfx8Drawable11setPositionEssss>
 800f21c:	f8b4 10bc 	ldrh.w	r1, [r4, #188]	@ 0xbc
 800f220:	f9b4 2062 	ldrsh.w	r2, [r4, #98]	@ 0x62
 800f224:	f104 00e4 	add.w	r0, r4, #228	@ 0xe4
 800f228:	4249      	negs	r1, r1
 800f22a:	f9b4 3060 	ldrsh.w	r3, [r4, #96]	@ 0x60
 800f22e:	9200      	str	r2, [sp, #0]
 800f230:	2200      	movs	r2, #0
 800f232:	b209      	sxth	r1, r1
 800f234:	f7f4 ff2e 	bl	8004094 <_ZN8touchgfx8Drawable11setPositionEssss>
 800f238:	f9b4 30bc 	ldrsh.w	r3, [r4, #188]	@ 0xbc
 800f23c:	4639      	mov	r1, r7
 800f23e:	f9b4 20c2 	ldrsh.w	r2, [r4, #194]	@ 0xc2
 800f242:	429f      	cmp	r7, r3
 800f244:	eba7 0703 	sub.w	r7, r7, r3
 800f248:	bfa8      	it	ge
 800f24a:	4619      	movge	r1, r3
 800f24c:	2f00      	cmp	r7, #0
 800f24e:	f8ad 1008 	strh.w	r1, [sp, #8]
 800f252:	bfb8      	it	lt
 800f254:	427f      	neglt	r7, r7
 800f256:	2100      	movs	r1, #0
 800f258:	f8ad 700c 	strh.w	r7, [sp, #12]
 800f25c:	f8ad 100a 	strh.w	r1, [sp, #10]
 800f260:	e7c5      	b.n	800f1ee <_ZN8touchgfx13ImageProgress8setValueEi+0x92>
 800f262:	2200      	movs	r2, #0
 800f264:	f9b4 3060 	ldrsh.w	r3, [r4, #96]	@ 0x60
 800f268:	f104 00b8 	add.w	r0, r4, #184	@ 0xb8
 800f26c:	9500      	str	r5, [sp, #0]
 800f26e:	4611      	mov	r1, r2
 800f270:	f9b4 60c2 	ldrsh.w	r6, [r4, #194]	@ 0xc2
 800f274:	f7f4 ff0e 	bl	8004094 <_ZN8touchgfx8Drawable11setPositionEssss>
 800f278:	2200      	movs	r2, #0
 800f27a:	f9b4 3060 	ldrsh.w	r3, [r4, #96]	@ 0x60
 800f27e:	f104 00e4 	add.w	r0, r4, #228	@ 0xe4
 800f282:	4611      	mov	r1, r2
 800f284:	9500      	str	r5, [sp, #0]
 800f286:	f7f4 ff05 	bl	8004094 <_ZN8touchgfx8Drawable11setPositionEssss>
 800f28a:	f9b4 30c2 	ldrsh.w	r3, [r4, #194]	@ 0xc2
 800f28e:	2100      	movs	r1, #0
 800f290:	f9b4 20c0 	ldrsh.w	r2, [r4, #192]	@ 0xc0
 800f294:	429e      	cmp	r6, r3
 800f296:	f8ad 1008 	strh.w	r1, [sp, #8]
 800f29a:	4631      	mov	r1, r6
 800f29c:	eba6 0603 	sub.w	r6, r6, r3
 800f2a0:	bfa8      	it	ge
 800f2a2:	4619      	movge	r1, r3
 800f2a4:	f8ad 200c 	strh.w	r2, [sp, #12]
 800f2a8:	2e00      	cmp	r6, #0
 800f2aa:	f8ad 100a 	strh.w	r1, [sp, #10]
 800f2ae:	bfb8      	it	lt
 800f2b0:	4276      	neglt	r6, r6
 800f2b2:	f8ad 600e 	strh.w	r6, [sp, #14]
 800f2b6:	e79c      	b.n	800f1f2 <_ZN8touchgfx13ImageProgress8setValueEi+0x96>
 800f2b8:	f8b4 2062 	ldrh.w	r2, [r4, #98]	@ 0x62
 800f2bc:	2100      	movs	r1, #0
 800f2be:	f9b4 3060 	ldrsh.w	r3, [r4, #96]	@ 0x60
 800f2c2:	1a12      	subs	r2, r2, r0
 800f2c4:	9500      	str	r5, [sp, #0]
 800f2c6:	f104 00b8 	add.w	r0, r4, #184	@ 0xb8
 800f2ca:	f9b4 70be 	ldrsh.w	r7, [r4, #190]	@ 0xbe
 800f2ce:	b212      	sxth	r2, r2
 800f2d0:	f7f4 fee0 	bl	8004094 <_ZN8touchgfx8Drawable11setPositionEssss>
 800f2d4:	f8b4 20be 	ldrh.w	r2, [r4, #190]	@ 0xbe
 800f2d8:	f9b4 1062 	ldrsh.w	r1, [r4, #98]	@ 0x62
 800f2dc:	f104 00e4 	add.w	r0, r4, #228	@ 0xe4
 800f2e0:	4252      	negs	r2, r2
 800f2e2:	f9b4 3060 	ldrsh.w	r3, [r4, #96]	@ 0x60
 800f2e6:	9100      	str	r1, [sp, #0]
 800f2e8:	2100      	movs	r1, #0
 800f2ea:	b212      	sxth	r2, r2
 800f2ec:	f7f4 fed2 	bl	8004094 <_ZN8touchgfx8Drawable11setPositionEssss>
 800f2f0:	f9b4 30be 	ldrsh.w	r3, [r4, #190]	@ 0xbe
 800f2f4:	2100      	movs	r1, #0
 800f2f6:	f9b4 20c0 	ldrsh.w	r2, [r4, #192]	@ 0xc0
 800f2fa:	429f      	cmp	r7, r3
 800f2fc:	f8ad 1008 	strh.w	r1, [sp, #8]
 800f300:	4639      	mov	r1, r7
 800f302:	eba7 0703 	sub.w	r7, r7, r3
 800f306:	bfa8      	it	ge
 800f308:	4619      	movge	r1, r3
 800f30a:	f8ad 200c 	strh.w	r2, [sp, #12]
 800f30e:	2f00      	cmp	r7, #0
 800f310:	f8ad 100a 	strh.w	r1, [sp, #10]
 800f314:	bfb8      	it	lt
 800f316:	427f      	neglt	r7, r7
 800f318:	f8ad 700e 	strh.w	r7, [sp, #14]
 800f31c:	e769      	b.n	800f1f2 <_ZN8touchgfx13ImageProgress8setValueEi+0x96>
 800f31e:	f104 07b8 	add.w	r7, r4, #184	@ 0xb8
 800f322:	4638      	mov	r0, r7
 800f324:	f009 fe79 	bl	801901a <_ZNK8touchgfx8Drawable10invalidateEv>
 800f328:	f894 30b4 	ldrb.w	r3, [r4, #180]	@ 0xb4
 800f32c:	2b03      	cmp	r3, #3
 800f32e:	d818      	bhi.n	800f362 <_ZN8touchgfx13ImageProgress8setValueEi+0x206>
 800f330:	e8df f003 	tbb	[pc, r3]
 800f334:	3f2e1b02 	.word	0x3f2e1b02
 800f338:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 800f33c:	2200      	movs	r2, #0
 800f33e:	4638      	mov	r0, r7
 800f340:	4611      	mov	r1, r2
 800f342:	9300      	str	r3, [sp, #0]
 800f344:	462b      	mov	r3, r5
 800f346:	f7f4 fea5 	bl	8004094 <_ZN8touchgfx8Drawable11setPositionEssss>
 800f34a:	f9b4 3060 	ldrsh.w	r3, [r4, #96]	@ 0x60
 800f34e:	f9b4 200a 	ldrsh.w	r2, [r4, #10]
 800f352:	1af1      	subs	r1, r6, r3
 800f354:	9200      	str	r2, [sp, #0]
 800f356:	2200      	movs	r2, #0
 800f358:	b209      	sxth	r1, r1
 800f35a:	f104 00e4 	add.w	r0, r4, #228	@ 0xe4
 800f35e:	f7f4 fe99 	bl	8004094 <_ZN8touchgfx8Drawable11setPositionEssss>
 800f362:	4638      	mov	r0, r7
 800f364:	f009 fe59 	bl	801901a <_ZNK8touchgfx8Drawable10invalidateEv>
 800f368:	e748      	b.n	800f1fc <_ZN8touchgfx13ImageProgress8setValueEi+0xa0>
 800f36a:	f8b4 1060 	ldrh.w	r1, [r4, #96]	@ 0x60
 800f36e:	2200      	movs	r2, #0
 800f370:	f9b4 3062 	ldrsh.w	r3, [r4, #98]	@ 0x62
 800f374:	4638      	mov	r0, r7
 800f376:	1b89      	subs	r1, r1, r6
 800f378:	9300      	str	r3, [sp, #0]
 800f37a:	462b      	mov	r3, r5
 800f37c:	b209      	sxth	r1, r1
 800f37e:	f7f4 fe89 	bl	8004094 <_ZN8touchgfx8Drawable11setPositionEssss>
 800f382:	f9b4 3062 	ldrsh.w	r3, [r4, #98]	@ 0x62
 800f386:	9300      	str	r3, [sp, #0]
 800f388:	462b      	mov	r3, r5
 800f38a:	2200      	movs	r2, #0
 800f38c:	4611      	mov	r1, r2
 800f38e:	e7e4      	b.n	800f35a <_ZN8touchgfx13ImageProgress8setValueEi+0x1fe>
 800f390:	2200      	movs	r2, #0
 800f392:	f9b4 3060 	ldrsh.w	r3, [r4, #96]	@ 0x60
 800f396:	4638      	mov	r0, r7
 800f398:	9500      	str	r5, [sp, #0]
 800f39a:	4611      	mov	r1, r2
 800f39c:	f7f4 fe7a 	bl	8004094 <_ZN8touchgfx8Drawable11setPositionEssss>
 800f3a0:	f9b4 0062 	ldrsh.w	r0, [r4, #98]	@ 0x62
 800f3a4:	f9b4 3060 	ldrsh.w	r3, [r4, #96]	@ 0x60
 800f3a8:	2100      	movs	r1, #0
 800f3aa:	1a32      	subs	r2, r6, r0
 800f3ac:	9000      	str	r0, [sp, #0]
 800f3ae:	b212      	sxth	r2, r2
 800f3b0:	e7d3      	b.n	800f35a <_ZN8touchgfx13ImageProgress8setValueEi+0x1fe>
 800f3b2:	f8b4 2062 	ldrh.w	r2, [r4, #98]	@ 0x62
 800f3b6:	2100      	movs	r1, #0
 800f3b8:	f9b4 3060 	ldrsh.w	r3, [r4, #96]	@ 0x60
 800f3bc:	4638      	mov	r0, r7
 800f3be:	1b92      	subs	r2, r2, r6
 800f3c0:	9500      	str	r5, [sp, #0]
 800f3c2:	b212      	sxth	r2, r2
 800f3c4:	f7f4 fe66 	bl	8004094 <_ZN8touchgfx8Drawable11setPositionEssss>
 800f3c8:	f9b4 3060 	ldrsh.w	r3, [r4, #96]	@ 0x60
 800f3cc:	9500      	str	r5, [sp, #0]
 800f3ce:	e7dc      	b.n	800f38a <_ZN8touchgfx13ImageProgress8setValueEi+0x22e>

0800f3d0 <_ZN8touchgfx13ImageProgressC1Ev>:
 800f3d0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800f3d4:	4604      	mov	r4, r0
 800f3d6:	f7ff fe69 	bl	800f0ac <_ZN8touchgfx25AbstractDirectionProgressC1Ev>
 800f3da:	4b35      	ldr	r3, [pc, #212]	@ (800f4b0 <_ZN8touchgfx13ImageProgressC1Ev+0xe0>)
 800f3dc:	2500      	movs	r5, #0
 800f3de:	4626      	mov	r6, r4
 800f3e0:	4a34      	ldr	r2, [pc, #208]	@ (800f4b4 <_ZN8touchgfx13ImageProgressC1Ev+0xe4>)
 800f3e2:	2701      	movs	r7, #1
 800f3e4:	a902      	add	r1, sp, #8
 800f3e6:	f846 3bb8 	str.w	r3, [r6], #184
 800f3ea:	f104 08e4 	add.w	r8, r4, #228	@ 0xe4
 800f3ee:	4b32      	ldr	r3, [pc, #200]	@ (800f4b8 <_ZN8touchgfx13ImageProgressC1Ev+0xe8>)
 800f3f0:	4640      	mov	r0, r8
 800f3f2:	f8a4 50bc 	strh.w	r5, [r4, #188]	@ 0xbc
 800f3f6:	f8c4 30b8 	str.w	r3, [r4, #184]	@ 0xb8
 800f3fa:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800f3fe:	f8a4 50be 	strh.w	r5, [r4, #190]	@ 0xbe
 800f402:	f821 3d04 	strh.w	r3, [r1, #-4]!
 800f406:	f8a4 50c0 	strh.w	r5, [r4, #192]	@ 0xc0
 800f40a:	f8a4 50c2 	strh.w	r5, [r4, #194]	@ 0xc2
 800f40e:	f8a4 50c4 	strh.w	r5, [r4, #196]	@ 0xc4
 800f412:	f8a4 50c6 	strh.w	r5, [r4, #198]	@ 0xc6
 800f416:	f8a4 50c8 	strh.w	r5, [r4, #200]	@ 0xc8
 800f41a:	f8a4 50ca 	strh.w	r5, [r4, #202]	@ 0xca
 800f41e:	f8c4 50d4 	str.w	r5, [r4, #212]	@ 0xd4
 800f422:	f8a4 50d8 	strh.w	r5, [r4, #216]	@ 0xd8
 800f426:	f8a4 50da 	strh.w	r5, [r4, #218]	@ 0xda
 800f42a:	f884 50dc 	strb.w	r5, [r4, #220]	@ 0xdc
 800f42e:	f884 70dd 	strb.w	r7, [r4, #221]	@ 0xdd
 800f432:	f8c4 50e0 	str.w	r5, [r4, #224]	@ 0xe0
 800f436:	f8a4 50e8 	strh.w	r5, [r4, #232]	@ 0xe8
 800f43a:	f8a4 50ea 	strh.w	r5, [r4, #234]	@ 0xea
 800f43e:	f8a4 50ec 	strh.w	r5, [r4, #236]	@ 0xec
 800f442:	f8a4 50ee 	strh.w	r5, [r4, #238]	@ 0xee
 800f446:	f8a4 50f0 	strh.w	r5, [r4, #240]	@ 0xf0
 800f44a:	f8a4 50f2 	strh.w	r5, [r4, #242]	@ 0xf2
 800f44e:	f8a4 50f4 	strh.w	r5, [r4, #244]	@ 0xf4
 800f452:	f8a4 50f6 	strh.w	r5, [r4, #246]	@ 0xf6
 800f456:	f8c4 5100 	str.w	r5, [r4, #256]	@ 0x100
 800f45a:	f8a4 5104 	strh.w	r5, [r4, #260]	@ 0x104
 800f45e:	f8a4 5106 	strh.w	r5, [r4, #262]	@ 0x106
 800f462:	e9c4 5533 	strd	r5, r5, [r4, #204]	@ 0xcc
 800f466:	e9c4 553e 	strd	r5, r5, [r4, #248]	@ 0xf8
 800f46a:	f884 5108 	strb.w	r5, [r4, #264]	@ 0x108
 800f46e:	f8c4 20e4 	str.w	r2, [r4, #228]	@ 0xe4
 800f472:	f8a4 310a 	strh.w	r3, [r4, #266]	@ 0x10a
 800f476:	f884 310c 	strb.w	r3, [r4, #268]	@ 0x10c
 800f47a:	f884 7109 	strb.w	r7, [r4, #265]	@ 0x109
 800f47e:	f005 ffe0 	bl	8015442 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 800f482:	4b0e      	ldr	r3, [pc, #56]	@ (800f4bc <_ZN8touchgfx13ImageProgressC1Ev+0xec>)
 800f484:	4641      	mov	r1, r8
 800f486:	4630      	mov	r0, r6
 800f488:	f8c4 30e4 	str.w	r3, [r4, #228]	@ 0xe4
 800f48c:	f8a4 510e 	strh.w	r5, [r4, #270]	@ 0x10e
 800f490:	f8a4 5110 	strh.w	r5, [r4, #272]	@ 0x110
 800f494:	f884 7114 	strb.w	r7, [r4, #276]	@ 0x114
 800f498:	f000 fbad 	bl	800fbf6 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 800f49c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800f4a0:	4631      	mov	r1, r6
 800f4a2:	f000 fba8 	bl	800fbf6 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 800f4a6:	4620      	mov	r0, r4
 800f4a8:	b002      	add	sp, #8
 800f4aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f4ae:	bf00      	nop
 800f4b0:	0802c39c 	.word	0x0802c39c
 800f4b4:	0802d004 	.word	0x0802d004
 800f4b8:	0802c70c 	.word	0x0802c70c
 800f4bc:	0802ce98 	.word	0x0802ce98

0800f4c0 <_ZNK8touchgfx25AbstractProgressIndicator21getProgressIndicatorXEv>:
 800f4c0:	f9b0 005c 	ldrsh.w	r0, [r0, #92]	@ 0x5c
 800f4c4:	4770      	bx	lr

0800f4c6 <_ZNK8touchgfx25AbstractProgressIndicator21getProgressIndicatorYEv>:
 800f4c6:	f9b0 005e 	ldrsh.w	r0, [r0, #94]	@ 0x5e
 800f4ca:	4770      	bx	lr

0800f4cc <_ZNK8touchgfx25AbstractProgressIndicator25getProgressIndicatorWidthEv>:
 800f4cc:	f9b0 0060 	ldrsh.w	r0, [r0, #96]	@ 0x60
 800f4d0:	4770      	bx	lr

0800f4d2 <_ZNK8touchgfx25AbstractProgressIndicator26getProgressIndicatorHeightEv>:
 800f4d2:	f9b0 0062 	ldrsh.w	r0, [r0, #98]	@ 0x62
 800f4d6:	4770      	bx	lr

0800f4d8 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEiitt>:
 800f4d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f4da:	461e      	mov	r6, r3
 800f4dc:	6803      	ldr	r3, [r0, #0]
 800f4de:	460f      	mov	r7, r1
 800f4e0:	4604      	mov	r4, r0
 800f4e2:	4615      	mov	r5, r2
 800f4e4:	e9c0 1221 	strd	r1, r2, [r0, #132]	@ 0x84
 800f4e8:	f8d0 108c 	ldr.w	r1, [r0, #140]	@ 0x8c
 800f4ec:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800f4f0:	4798      	blx	r3
 800f4f2:	b93e      	cbnz	r6, 800f504 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEiitt+0x2c>
 800f4f4:	1bed      	subs	r5, r5, r7
 800f4f6:	f8a4 5090 	strh.w	r5, [r4, #144]	@ 0x90
 800f4fa:	f8bd 3018 	ldrh.w	r3, [sp, #24]
 800f4fe:	f8a4 3092 	strh.w	r3, [r4, #146]	@ 0x92
 800f502:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f504:	f8a4 6090 	strh.w	r6, [r4, #144]	@ 0x90
 800f508:	e7f7      	b.n	800f4fa <_ZN8touchgfx25AbstractProgressIndicator8setRangeEiitt+0x22>

0800f50a <_ZNK8touchgfx25AbstractProgressIndicator8getRangeERiS1_RtS2_>:
 800f50a:	b510      	push	{r4, lr}
 800f50c:	f8d0 4084 	ldr.w	r4, [r0, #132]	@ 0x84
 800f510:	600c      	str	r4, [r1, #0]
 800f512:	f8d0 1088 	ldr.w	r1, [r0, #136]	@ 0x88
 800f516:	6011      	str	r1, [r2, #0]
 800f518:	f8b0 2090 	ldrh.w	r2, [r0, #144]	@ 0x90
 800f51c:	801a      	strh	r2, [r3, #0]
 800f51e:	9b02      	ldr	r3, [sp, #8]
 800f520:	f8b0 2092 	ldrh.w	r2, [r0, #146]	@ 0x92
 800f524:	801a      	strh	r2, [r3, #0]
 800f526:	bd10      	pop	{r4, pc}

0800f528 <_ZNK8touchgfx25AbstractProgressIndicator8getRangeERiS1_Rt>:
 800f528:	b510      	push	{r4, lr}
 800f52a:	f8d0 4084 	ldr.w	r4, [r0, #132]	@ 0x84
 800f52e:	600c      	str	r4, [r1, #0]
 800f530:	f8d0 1088 	ldr.w	r1, [r0, #136]	@ 0x88
 800f534:	6011      	str	r1, [r2, #0]
 800f536:	f8b0 2090 	ldrh.w	r2, [r0, #144]	@ 0x90
 800f53a:	801a      	strh	r2, [r3, #0]
 800f53c:	bd10      	pop	{r4, pc}

0800f53e <_ZNK8touchgfx25AbstractProgressIndicator8getRangeERiS1_>:
 800f53e:	f8d0 3084 	ldr.w	r3, [r0, #132]	@ 0x84
 800f542:	600b      	str	r3, [r1, #0]
 800f544:	f8d0 3088 	ldr.w	r3, [r0, #136]	@ 0x88
 800f548:	6013      	str	r3, [r2, #0]
 800f54a:	4770      	bx	lr

0800f54c <_ZN8touchgfx25AbstractProgressIndicator17setEasingEquationEPFstsstE>:
 800f54c:	f8c0 1094 	str.w	r1, [r0, #148]	@ 0x94
 800f550:	4770      	bx	lr

0800f552 <_ZNK8touchgfx25AbstractProgressIndicator8getValueEv>:
 800f552:	f8d0 008c 	ldr.w	r0, [r0, #140]	@ 0x8c
 800f556:	4770      	bx	lr

0800f558 <_ZN8touchgfx25AbstractProgressIndicator8setAlphaEh>:
 800f558:	f880 1054 	strb.w	r1, [r0, #84]	@ 0x54
 800f55c:	4770      	bx	lr

0800f55e <_ZNK8touchgfx25AbstractProgressIndicator8getAlphaEv>:
 800f55e:	f890 0054 	ldrb.w	r0, [r0, #84]	@ 0x54
 800f562:	4770      	bx	lr

0800f564 <_ZN8touchgfx25AbstractProgressIndicatorD1Ev>:
 800f564:	4770      	bx	lr

0800f566 <_ZN8touchgfx25AbstractProgressIndicatorD0Ev>:
 800f566:	b510      	push	{r4, lr}
 800f568:	4604      	mov	r4, r0
 800f56a:	21b4      	movs	r1, #180	@ 0xb4
 800f56c:	f017 ff8f 	bl	802748e <_ZdlPvj>
 800f570:	4620      	mov	r0, r4
 800f572:	bd10      	pop	{r4, pc}

0800f574 <_ZN8touchgfx25AbstractProgressIndicator11updateValueEit>:
 800f574:	b570      	push	{r4, r5, r6, lr}
 800f576:	f8d0 5084 	ldr.w	r5, [r0, #132]	@ 0x84
 800f57a:	4604      	mov	r4, r0
 800f57c:	4616      	mov	r6, r2
 800f57e:	428d      	cmp	r5, r1
 800f580:	bfb8      	it	lt
 800f582:	460d      	movlt	r5, r1
 800f584:	f8d0 1088 	ldr.w	r1, [r0, #136]	@ 0x88
 800f588:	428d      	cmp	r5, r1
 800f58a:	bfa8      	it	ge
 800f58c:	460d      	movge	r5, r1
 800f58e:	b99a      	cbnz	r2, 800f5b8 <_ZN8touchgfx25AbstractProgressIndicator11updateValueEit+0x44>
 800f590:	6803      	ldr	r3, [r0, #0]
 800f592:	4629      	mov	r1, r5
 800f594:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800f598:	4798      	blx	r3
 800f59a:	f8d4 00b0 	ldr.w	r0, [r4, #176]	@ 0xb0
 800f59e:	b368      	cbz	r0, 800f5fc <_ZN8touchgfx25AbstractProgressIndicator11updateValueEit+0x88>
 800f5a0:	6803      	ldr	r3, [r0, #0]
 800f5a2:	68db      	ldr	r3, [r3, #12]
 800f5a4:	4798      	blx	r3
 800f5a6:	b348      	cbz	r0, 800f5fc <_ZN8touchgfx25AbstractProgressIndicator11updateValueEit+0x88>
 800f5a8:	f8d4 00b0 	ldr.w	r0, [r4, #176]	@ 0xb0
 800f5ac:	4621      	mov	r1, r4
 800f5ae:	6803      	ldr	r3, [r0, #0]
 800f5b0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f5b4:	689b      	ldr	r3, [r3, #8]
 800f5b6:	4718      	bx	r3
 800f5b8:	f8d0 30a4 	ldr.w	r3, [r0, #164]	@ 0xa4
 800f5bc:	2b00      	cmp	r3, #0
 800f5be:	dd08      	ble.n	800f5d2 <_ZN8touchgfx25AbstractProgressIndicator11updateValueEit+0x5e>
 800f5c0:	f008 fc40 	bl	8017e44 <_ZN8touchgfx11Application11getInstanceEv>
 800f5c4:	4621      	mov	r1, r4
 800f5c6:	3004      	adds	r0, #4
 800f5c8:	f008 fc89 	bl	8017ede <_ZN8touchgfx11Application12TimerWidgets6removeEPKNS_8DrawableE>
 800f5cc:	2300      	movs	r3, #0
 800f5ce:	f884 3098 	strb.w	r3, [r4, #152]	@ 0x98
 800f5d2:	6823      	ldr	r3, [r4, #0]
 800f5d4:	4620      	mov	r0, r4
 800f5d6:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800f5da:	4798      	blx	r3
 800f5dc:	2300      	movs	r3, #0
 800f5de:	f8c4 60a4 	str.w	r6, [r4, #164]	@ 0xa4
 800f5e2:	f8c4 30a8 	str.w	r3, [r4, #168]	@ 0xa8
 800f5e6:	e9c4 0527 	strd	r0, r5, [r4, #156]	@ 0x9c
 800f5ea:	f008 fc2b 	bl	8017e44 <_ZN8touchgfx11Application11getInstanceEv>
 800f5ee:	4621      	mov	r1, r4
 800f5f0:	3004      	adds	r0, #4
 800f5f2:	f008 fd1d 	bl	8018030 <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE>
 800f5f6:	2301      	movs	r3, #1
 800f5f8:	f884 3098 	strb.w	r3, [r4, #152]	@ 0x98
 800f5fc:	bd70      	pop	{r4, r5, r6, pc}

0800f5fe <_ZN8touchgfx25AbstractProgressIndicator8setValueEi>:
 800f5fe:	b510      	push	{r4, lr}
 800f600:	f8d0 3084 	ldr.w	r3, [r0, #132]	@ 0x84
 800f604:	4604      	mov	r4, r0
 800f606:	4299      	cmp	r1, r3
 800f608:	bfb8      	it	lt
 800f60a:	4619      	movlt	r1, r3
 800f60c:	f8d0 3088 	ldr.w	r3, [r0, #136]	@ 0x88
 800f610:	4299      	cmp	r1, r3
 800f612:	bfa8      	it	ge
 800f614:	4619      	movge	r1, r3
 800f616:	f8d0 308c 	ldr.w	r3, [r0, #140]	@ 0x8c
 800f61a:	428b      	cmp	r3, r1
 800f61c:	d010      	beq.n	800f640 <_ZN8touchgfx25AbstractProgressIndicator8setValueEi+0x42>
 800f61e:	f8c0 108c 	str.w	r1, [r0, #140]	@ 0x8c
 800f622:	f8d0 00ac 	ldr.w	r0, [r0, #172]	@ 0xac
 800f626:	b158      	cbz	r0, 800f640 <_ZN8touchgfx25AbstractProgressIndicator8setValueEi+0x42>
 800f628:	6803      	ldr	r3, [r0, #0]
 800f62a:	68db      	ldr	r3, [r3, #12]
 800f62c:	4798      	blx	r3
 800f62e:	b138      	cbz	r0, 800f640 <_ZN8touchgfx25AbstractProgressIndicator8setValueEi+0x42>
 800f630:	f8d4 00ac 	ldr.w	r0, [r4, #172]	@ 0xac
 800f634:	4621      	mov	r1, r4
 800f636:	6803      	ldr	r3, [r0, #0]
 800f638:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f63c:	689b      	ldr	r3, [r3, #8]
 800f63e:	4718      	bx	r3
 800f640:	bd10      	pop	{r4, pc}

0800f642 <_ZNK8touchgfx25AbstractProgressIndicator11getProgressEt>:
 800f642:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f644:	4604      	mov	r4, r0
 800f646:	460d      	mov	r5, r1
 800f648:	b1a9      	cbz	r1, 800f676 <_ZNK8touchgfx25AbstractProgressIndicator11getProgressEt+0x34>
 800f64a:	f8b0 6092 	ldrh.w	r6, [r0, #146]	@ 0x92
 800f64e:	ab01      	add	r3, sp, #4
 800f650:	f8b4 1090 	ldrh.w	r1, [r4, #144]	@ 0x90
 800f654:	f8d4 708c 	ldr.w	r7, [r4, #140]	@ 0x8c
 800f658:	1b89      	subs	r1, r1, r6
 800f65a:	e9d0 0221 	ldrd	r0, r2, [r0, #132]	@ 0x84
 800f65e:	1a12      	subs	r2, r2, r0
 800f660:	1a38      	subs	r0, r7, r0
 800f662:	f00a f9cb 	bl	80199fc <_ZN8touchgfx6muldivElllRl>
 800f666:	4629      	mov	r1, r5
 800f668:	ab01      	add	r3, sp, #4
 800f66a:	f8b4 2090 	ldrh.w	r2, [r4, #144]	@ 0x90
 800f66e:	4430      	add	r0, r6
 800f670:	f00a f9c4 	bl	80199fc <_ZN8touchgfx6muldivElllRl>
 800f674:	b285      	uxth	r5, r0
 800f676:	4628      	mov	r0, r5
 800f678:	b003      	add	sp, #12
 800f67a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800f67c <_ZN8touchgfx25AbstractProgressIndicator15handleTickEventEv>:
 800f67c:	b570      	push	{r4, r5, r6, lr}
 800f67e:	f890 3098 	ldrb.w	r3, [r0, #152]	@ 0x98
 800f682:	4604      	mov	r4, r0
 800f684:	2b00      	cmp	r3, #0
 800f686:	d035      	beq.n	800f6f4 <_ZN8touchgfx25AbstractProgressIndicator15handleTickEventEv+0x78>
 800f688:	f8d0 00a8 	ldr.w	r0, [r0, #168]	@ 0xa8
 800f68c:	2100      	movs	r1, #0
 800f68e:	f8d4 5094 	ldr.w	r5, [r4, #148]	@ 0x94
 800f692:	3001      	adds	r0, #1
 800f694:	e9d4 3227 	ldrd	r3, r2, [r4, #156]	@ 0x9c
 800f698:	f8c4 00a8 	str.w	r0, [r4, #168]	@ 0xa8
 800f69c:	b280      	uxth	r0, r0
 800f69e:	1ad2      	subs	r2, r2, r3
 800f6a0:	f8b4 30a4 	ldrh.w	r3, [r4, #164]	@ 0xa4
 800f6a4:	b212      	sxth	r2, r2
 800f6a6:	47a8      	blx	r5
 800f6a8:	f8d4 109c 	ldr.w	r1, [r4, #156]	@ 0x9c
 800f6ac:	6823      	ldr	r3, [r4, #0]
 800f6ae:	4401      	add	r1, r0
 800f6b0:	4620      	mov	r0, r4
 800f6b2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800f6b6:	4798      	blx	r3
 800f6b8:	e9d4 3229 	ldrd	r3, r2, [r4, #164]	@ 0xa4
 800f6bc:	429a      	cmp	r2, r3
 800f6be:	db19      	blt.n	800f6f4 <_ZN8touchgfx25AbstractProgressIndicator15handleTickEventEv+0x78>
 800f6c0:	2500      	movs	r5, #0
 800f6c2:	e9c4 5529 	strd	r5, r5, [r4, #164]	@ 0xa4
 800f6c6:	f008 fbbd 	bl	8017e44 <_ZN8touchgfx11Application11getInstanceEv>
 800f6ca:	4621      	mov	r1, r4
 800f6cc:	3004      	adds	r0, #4
 800f6ce:	f008 fc06 	bl	8017ede <_ZN8touchgfx11Application12TimerWidgets6removeEPKNS_8DrawableE>
 800f6d2:	f8d4 00b0 	ldr.w	r0, [r4, #176]	@ 0xb0
 800f6d6:	f884 5098 	strb.w	r5, [r4, #152]	@ 0x98
 800f6da:	b158      	cbz	r0, 800f6f4 <_ZN8touchgfx25AbstractProgressIndicator15handleTickEventEv+0x78>
 800f6dc:	6803      	ldr	r3, [r0, #0]
 800f6de:	68db      	ldr	r3, [r3, #12]
 800f6e0:	4798      	blx	r3
 800f6e2:	b138      	cbz	r0, 800f6f4 <_ZN8touchgfx25AbstractProgressIndicator15handleTickEventEv+0x78>
 800f6e4:	f8d4 00b0 	ldr.w	r0, [r4, #176]	@ 0xb0
 800f6e8:	4621      	mov	r1, r4
 800f6ea:	6803      	ldr	r3, [r0, #0]
 800f6ec:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f6f0:	689b      	ldr	r3, [r3, #8]
 800f6f2:	4718      	bx	r3
 800f6f4:	bd70      	pop	{r4, r5, r6, pc}
	...

0800f6f8 <_ZN8touchgfx8DrawableC1Ev>:
 800f6f8:	4a0a      	ldr	r2, [pc, #40]	@ (800f724 <_ZN8touchgfx8DrawableC1Ev+0x2c>)
 800f6fa:	6002      	str	r2, [r0, #0]
 800f6fc:	2200      	movs	r2, #0
 800f6fe:	8082      	strh	r2, [r0, #4]
 800f700:	80c2      	strh	r2, [r0, #6]
 800f702:	8102      	strh	r2, [r0, #8]
 800f704:	8142      	strh	r2, [r0, #10]
 800f706:	8182      	strh	r2, [r0, #12]
 800f708:	81c2      	strh	r2, [r0, #14]
 800f70a:	8202      	strh	r2, [r0, #16]
 800f70c:	8242      	strh	r2, [r0, #18]
 800f70e:	61c2      	str	r2, [r0, #28]
 800f710:	8402      	strh	r2, [r0, #32]
 800f712:	8442      	strh	r2, [r0, #34]	@ 0x22
 800f714:	f880 2024 	strb.w	r2, [r0, #36]	@ 0x24
 800f718:	e9c0 2205 	strd	r2, r2, [r0, #20]
 800f71c:	2201      	movs	r2, #1
 800f71e:	f880 2025 	strb.w	r2, [r0, #37]	@ 0x25
 800f722:	4770      	bx	lr
 800f724:	0802d148 	.word	0x0802d148

0800f728 <_ZN8touchgfx8Drawable14setWidthHeightEss>:
 800f728:	b570      	push	{r4, r5, r6, lr}
 800f72a:	6803      	ldr	r3, [r0, #0]
 800f72c:	4604      	mov	r4, r0
 800f72e:	4615      	mov	r5, r2
 800f730:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f732:	4798      	blx	r3
 800f734:	6823      	ldr	r3, [r4, #0]
 800f736:	4629      	mov	r1, r5
 800f738:	4620      	mov	r0, r4
 800f73a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f73c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f740:	4718      	bx	r3

0800f742 <_ZN8touchgfx25AbstractProgressIndicator28setProgressIndicatorPositionEssss>:
 800f742:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f746:	4604      	mov	r4, r0
 800f748:	f9bd 7018 	ldrsh.w	r7, [sp, #24]
 800f74c:	4698      	mov	r8, r3
 800f74e:	460e      	mov	r6, r1
 800f750:	4615      	mov	r5, r2
 800f752:	f8a4 105c 	strh.w	r1, [r4, #92]	@ 0x5c
 800f756:	f8a4 205e 	strh.w	r2, [r4, #94]	@ 0x5e
 800f75a:	4619      	mov	r1, r3
 800f75c:	463a      	mov	r2, r7
 800f75e:	3058      	adds	r0, #88	@ 0x58
 800f760:	f7ff ffe2 	bl	800f728 <_ZN8touchgfx8Drawable14setWidthHeightEss>
 800f764:	4446      	add	r6, r8
 800f766:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 800f76a:	443d      	add	r5, r7
 800f76c:	42b3      	cmp	r3, r6
 800f76e:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 800f772:	bfb8      	it	lt
 800f774:	8126      	strhlt	r6, [r4, #8]
 800f776:	42ab      	cmp	r3, r5
 800f778:	bfb8      	it	lt
 800f77a:	8165      	strhlt	r5, [r4, #10]
 800f77c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800f780 <_ZN8touchgfx25AbstractProgressIndicator13setBackgroundERKNS_6BitmapE>:
 800f780:	b510      	push	{r4, lr}
 800f782:	4604      	mov	r4, r0
 800f784:	302c      	adds	r0, #44	@ 0x2c
 800f786:	f005 fe5c 	bl	8015442 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 800f78a:	f9b4 2036 	ldrsh.w	r2, [r4, #54]	@ 0x36
 800f78e:	4620      	mov	r0, r4
 800f790:	f9b4 1034 	ldrsh.w	r1, [r4, #52]	@ 0x34
 800f794:	f7ff ffc8 	bl	800f728 <_ZN8touchgfx8Drawable14setWidthHeightEss>
 800f798:	bd10      	pop	{r4, pc}
	...

0800f79c <_ZN8touchgfx25AbstractProgressIndicatorC1Ev>:
 800f79c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f79e:	4604      	mov	r4, r0
 800f7a0:	2500      	movs	r5, #0
 800f7a2:	f7ff ffa9 	bl	800f6f8 <_ZN8touchgfx8DrawableC1Ev>
 800f7a6:	4b24      	ldr	r3, [pc, #144]	@ (800f838 <_ZN8touchgfx25AbstractProgressIndicatorC1Ev+0x9c>)
 800f7a8:	4626      	mov	r6, r4
 800f7aa:	f64f 77ff 	movw	r7, #65535	@ 0xffff
 800f7ae:	2226      	movs	r2, #38	@ 0x26
 800f7b0:	4629      	mov	r1, r5
 800f7b2:	62a5      	str	r5, [r4, #40]	@ 0x28
 800f7b4:	f846 3b2c 	str.w	r3, [r6], #44
 800f7b8:	4630      	mov	r0, r6
 800f7ba:	f8ad 7004 	strh.w	r7, [sp, #4]
 800f7be:	f018 fc7b 	bl	80280b8 <memset>
 800f7c2:	4630      	mov	r0, r6
 800f7c4:	f7ff ff98 	bl	800f6f8 <_ZN8touchgfx8DrawableC1Ev>
 800f7c8:	a902      	add	r1, sp, #8
 800f7ca:	4b1c      	ldr	r3, [pc, #112]	@ (800f83c <_ZN8touchgfx25AbstractProgressIndicatorC1Ev+0xa0>)
 800f7cc:	4630      	mov	r0, r6
 800f7ce:	f884 7054 	strb.w	r7, [r4, #84]	@ 0x54
 800f7d2:	f104 0758 	add.w	r7, r4, #88	@ 0x58
 800f7d6:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800f7d8:	f831 3d04 	ldrh.w	r3, [r1, #-4]!
 800f7dc:	f8a4 3052 	strh.w	r3, [r4, #82]	@ 0x52
 800f7e0:	f005 fe2f 	bl	8015442 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 800f7e4:	4638      	mov	r0, r7
 800f7e6:	f7ff ff87 	bl	800f6f8 <_ZN8touchgfx8DrawableC1Ev>
 800f7ea:	4b15      	ldr	r3, [pc, #84]	@ (800f840 <_ZN8touchgfx25AbstractProgressIndicatorC1Ev+0xa4>)
 800f7ec:	4629      	mov	r1, r5
 800f7ee:	4630      	mov	r0, r6
 800f7f0:	65a3      	str	r3, [r4, #88]	@ 0x58
 800f7f2:	2364      	movs	r3, #100	@ 0x64
 800f7f4:	f884 5098 	strb.w	r5, [r4, #152]	@ 0x98
 800f7f8:	f8c4 3090 	str.w	r3, [r4, #144]	@ 0x90
 800f7fc:	e9c4 3522 	strd	r3, r5, [r4, #136]	@ 0x88
 800f800:	4b10      	ldr	r3, [pc, #64]	@ (800f844 <_ZN8touchgfx25AbstractProgressIndicatorC1Ev+0xa8>)
 800f802:	e9c4 5520 	strd	r5, r5, [r4, #128]	@ 0x80
 800f806:	f8c4 3094 	str.w	r3, [r4, #148]	@ 0x94
 800f80a:	e9c4 5527 	strd	r5, r5, [r4, #156]	@ 0x9c
 800f80e:	e9c4 5529 	strd	r5, r5, [r4, #164]	@ 0xa4
 800f812:	e9c4 552b 	strd	r5, r5, [r4, #172]	@ 0xac
 800f816:	f7f3 fcfd 	bl	8003214 <_ZN8touchgfx8Drawable4setXEs>
 800f81a:	4629      	mov	r1, r5
 800f81c:	4630      	mov	r0, r6
 800f81e:	f7f3 fcfb 	bl	8003218 <_ZN8touchgfx8Drawable4setYEs>
 800f822:	4631      	mov	r1, r6
 800f824:	4620      	mov	r0, r4
 800f826:	f000 f9e6 	bl	800fbf6 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 800f82a:	4620      	mov	r0, r4
 800f82c:	4639      	mov	r1, r7
 800f82e:	f000 f9e2 	bl	800fbf6 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 800f832:	4620      	mov	r0, r4
 800f834:	b003      	add	sp, #12
 800f836:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f838:	0802c488 	.word	0x0802c488
 800f83c:	0802d004 	.word	0x0802d004
 800f840:	0802c70c 	.word	0x0802c70c
 800f844:	0801a1d7 	.word	0x0801a1d7

0800f848 <_ZN8touchgfx12DigitalClock14setDisplayModeENS0_11DisplayModeE>:
 800f848:	f880 102f 	strb.w	r1, [r0, #47]	@ 0x2f
 800f84c:	4770      	bx	lr

0800f84e <_ZNK8touchgfx12DigitalClock14getDisplayModeEv>:
 800f84e:	f890 002f 	ldrb.w	r0, [r0, #47]	@ 0x2f
 800f852:	4770      	bx	lr

0800f854 <_ZNK8touchgfx12DigitalClock17invalidateContentEv>:
 800f854:	b510      	push	{r4, lr}
 800f856:	6803      	ldr	r3, [r0, #0]
 800f858:	4604      	mov	r4, r0
 800f85a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800f85e:	4798      	blx	r3
 800f860:	b110      	cbz	r0, 800f868 <_ZNK8touchgfx12DigitalClock17invalidateContentEv+0x14>
 800f862:	4620      	mov	r0, r4
 800f864:	f7f3 fd9f 	bl	80033a6 <_ZNK8touchgfx8Drawable17invalidateContentEv>
 800f868:	bd10      	pop	{r4, pc}

0800f86a <_ZN8touchgfx12DigitalClock8setWidthEs>:
 800f86a:	b508      	push	{r3, lr}
 800f86c:	3034      	adds	r0, #52	@ 0x34
 800f86e:	f820 1c2c 	strh.w	r1, [r0, #-44]
 800f872:	f7f4 febe 	bl	80045f2 <_ZN8touchgfx8TextArea8setWidthEs>
 800f876:	bd08      	pop	{r3, pc}

0800f878 <_ZN8touchgfx12DigitalClock9setHeightEs>:
 800f878:	b508      	push	{r3, lr}
 800f87a:	3034      	adds	r0, #52	@ 0x34
 800f87c:	f820 1c2a 	strh.w	r1, [r0, #-42]
 800f880:	f7f4 fec9 	bl	8004616 <_ZN8touchgfx8TextArea9setHeightEs>
 800f884:	bd08      	pop	{r3, pc}
	...

0800f888 <_ZN8touchgfx12DigitalClock12setBaselineYEs>:
 800f888:	4a11      	ldr	r2, [pc, #68]	@ (800f8d0 <_ZN8touchgfx12DigitalClock12setBaselineYEs+0x48>)
 800f88a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f88e:	f8b0 3060 	ldrh.w	r3, [r0, #96]	@ 0x60
 800f892:	4604      	mov	r4, r0
 800f894:	8812      	ldrh	r2, [r2, #0]
 800f896:	460d      	mov	r5, r1
 800f898:	429a      	cmp	r2, r3
 800f89a:	d916      	bls.n	800f8ca <_ZN8touchgfx12DigitalClock12setBaselineYEs+0x42>
 800f89c:	6802      	ldr	r2, [r0, #0]
 800f89e:	f9b0 7004 	ldrsh.w	r7, [r0, #4]
 800f8a2:	6d96      	ldr	r6, [r2, #88]	@ 0x58
 800f8a4:	4a0b      	ldr	r2, [pc, #44]	@ (800f8d4 <_ZN8touchgfx12DigitalClock12setBaselineYEs+0x4c>)
 800f8a6:	6812      	ldr	r2, [r2, #0]
 800f8a8:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 800f8ac:	4b0a      	ldr	r3, [pc, #40]	@ (800f8d8 <_ZN8touchgfx12DigitalClock12setBaselineYEs+0x50>)
 800f8ae:	681b      	ldr	r3, [r3, #0]
 800f8b0:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800f8b4:	6803      	ldr	r3, [r0, #0]
 800f8b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f8b8:	4798      	blx	r3
 800f8ba:	1a2a      	subs	r2, r5, r0
 800f8bc:	4639      	mov	r1, r7
 800f8be:	4620      	mov	r0, r4
 800f8c0:	4633      	mov	r3, r6
 800f8c2:	b212      	sxth	r2, r2
 800f8c4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f8c8:	4718      	bx	r3
 800f8ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f8ce:	bf00      	nop
 800f8d0:	24028e7c 	.word	0x24028e7c
 800f8d4:	24028e78 	.word	0x24028e78
 800f8d8:	24028e80 	.word	0x24028e80

0800f8dc <_ZN8touchgfx12DigitalClock8setAlphaEh>:
 800f8dc:	f880 106a 	strb.w	r1, [r0, #106]	@ 0x6a
 800f8e0:	4770      	bx	lr

0800f8e2 <_ZNK8touchgfx12DigitalClock8getAlphaEv>:
 800f8e2:	f890 006a 	ldrb.w	r0, [r0, #106]	@ 0x6a
 800f8e6:	4770      	bx	lr

0800f8e8 <_ZN8touchgfx12DigitalClock8setColorENS_9colortypeE>:
 800f8e8:	b508      	push	{r3, lr}
 800f8ea:	3034      	adds	r0, #52	@ 0x34
 800f8ec:	6301      	str	r1, [r0, #48]	@ 0x30
 800f8ee:	f7f3 fd5a 	bl	80033a6 <_ZNK8touchgfx8Drawable17invalidateContentEv>
 800f8f2:	bd08      	pop	{r3, pc}

0800f8f4 <_ZNK8touchgfx12DigitalClock8getColorEv>:
 800f8f4:	6e40      	ldr	r0, [r0, #100]	@ 0x64
 800f8f6:	4770      	bx	lr

0800f8f8 <_ZN8touchgfx12DigitalClockD1Ev>:
 800f8f8:	4770      	bx	lr

0800f8fa <_ZNK8touchgfx12DigitalClock12getTextWidthEv>:
 800f8fa:	3034      	adds	r0, #52	@ 0x34
 800f8fc:	f004 bd6a 	b.w	80143d4 <_ZNK8touchgfx8TextArea12getTextWidthEv>

0800f900 <_ZN8touchgfx12DigitalClockD0Ev>:
 800f900:	b510      	push	{r4, lr}
 800f902:	4604      	mov	r4, r0
 800f904:	2198      	movs	r1, #152	@ 0x98
 800f906:	f017 fdc2 	bl	802748e <_ZdlPvj>
 800f90a:	4620      	mov	r0, r4
 800f90c:	bd10      	pop	{r4, pc}

0800f90e <_ZN8touchgfx12DigitalClock12setTypedTextENS_9TypedTextE>:
 800f90e:	b538      	push	{r3, r4, r5, lr}
 800f910:	f100 0434 	add.w	r4, r0, #52	@ 0x34
 800f914:	460d      	mov	r5, r1
 800f916:	4620      	mov	r0, r4
 800f918:	f7f3 fd45 	bl	80033a6 <_ZNK8touchgfx8Drawable17invalidateContentEv>
 800f91c:	4620      	mov	r0, r4
 800f91e:	4629      	mov	r1, r5
 800f920:	f005 f894 	bl	8014a4c <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 800f924:	4620      	mov	r0, r4
 800f926:	f7f3 fd3e 	bl	80033a6 <_ZNK8touchgfx8Drawable17invalidateContentEv>
 800f92a:	bd38      	pop	{r3, r4, r5, pc}

0800f92c <_ZN8touchgfx12DigitalClock11updateClockEv>:
 800f92c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f930:	f100 0634 	add.w	r6, r0, #52	@ 0x34
 800f934:	4604      	mov	r4, r0
 800f936:	4630      	mov	r0, r6
 800f938:	f7f3 fd35 	bl	80033a6 <_ZNK8touchgfx8Drawable17invalidateContentEv>
 800f93c:	f894 302f 	ldrb.w	r3, [r4, #47]	@ 0x2f
 800f940:	bb0b      	cbnz	r3, 800f986 <_ZN8touchgfx12DigitalClock11updateClockEv+0x5a>
 800f942:	f894 3030 	ldrb.w	r3, [r4, #48]	@ 0x30
 800f946:	4620      	mov	r0, r4
 800f948:	4a40      	ldr	r2, [pc, #256]	@ (800fa4c <_ZN8touchgfx12DigitalClock11updateClockEv+0x120>)
 800f94a:	f104 0780 	add.w	r7, r4, #128	@ 0x80
 800f94e:	4d40      	ldr	r5, [pc, #256]	@ (800fa50 <_ZN8touchgfx12DigitalClock11updateClockEv+0x124>)
 800f950:	2b00      	cmp	r3, #0
 800f952:	bf08      	it	eq
 800f954:	4615      	moveq	r5, r2
 800f956:	f000 f92b 	bl	800fbb0 <_ZNK8touchgfx13AbstractClock16getCurrentHour12Ev>
 800f95a:	4680      	mov	r8, r0
 800f95c:	4620      	mov	r0, r4
 800f95e:	f000 f93a 	bl	800fbd6 <_ZNK8touchgfx13AbstractClock16getCurrentMinuteEv>
 800f962:	4681      	mov	r9, r0
 800f964:	4620      	mov	r0, r4
 800f966:	f000 f92f 	bl	800fbc8 <_ZNK8touchgfx13AbstractClock12getCurrentAMEv>
 800f96a:	2800      	cmp	r0, #0
 800f96c:	462a      	mov	r2, r5
 800f96e:	f04f 010c 	mov.w	r1, #12
 800f972:	bf14      	ite	ne
 800f974:	2341      	movne	r3, #65	@ 0x41
 800f976:	2350      	moveq	r3, #80	@ 0x50
 800f978:	4638      	mov	r0, r7
 800f97a:	e9cd 9300 	strd	r9, r3, [sp]
 800f97e:	4643      	mov	r3, r8
 800f980:	f00b ff2a 	bl	801b7d8 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 800f984:	e017      	b.n	800f9b6 <_ZN8touchgfx12DigitalClock11updateClockEv+0x8a>
 800f986:	2b01      	cmp	r3, #1
 800f988:	d11b      	bne.n	800f9c2 <_ZN8touchgfx12DigitalClock11updateClockEv+0x96>
 800f98a:	f894 3030 	ldrb.w	r3, [r4, #48]	@ 0x30
 800f98e:	4620      	mov	r0, r4
 800f990:	4a30      	ldr	r2, [pc, #192]	@ (800fa54 <_ZN8touchgfx12DigitalClock11updateClockEv+0x128>)
 800f992:	4d31      	ldr	r5, [pc, #196]	@ (800fa58 <_ZN8touchgfx12DigitalClock11updateClockEv+0x12c>)
 800f994:	2b00      	cmp	r3, #0
 800f996:	bf08      	it	eq
 800f998:	4615      	moveq	r5, r2
 800f99a:	f000 f906 	bl	800fbaa <_ZNK8touchgfx13AbstractClock16getCurrentHour24Ev>
 800f99e:	4607      	mov	r7, r0
 800f9a0:	4620      	mov	r0, r4
 800f9a2:	f000 f918 	bl	800fbd6 <_ZNK8touchgfx13AbstractClock16getCurrentMinuteEv>
 800f9a6:	462a      	mov	r2, r5
 800f9a8:	9000      	str	r0, [sp, #0]
 800f9aa:	463b      	mov	r3, r7
 800f9ac:	210c      	movs	r1, #12
 800f9ae:	f104 0080 	add.w	r0, r4, #128	@ 0x80
 800f9b2:	f00b ff11 	bl	801b7d8 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 800f9b6:	4630      	mov	r0, r6
 800f9b8:	f7f3 fcf5 	bl	80033a6 <_ZNK8touchgfx8Drawable17invalidateContentEv>
 800f9bc:	b004      	add	sp, #16
 800f9be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f9c2:	2b02      	cmp	r3, #2
 800f9c4:	d126      	bne.n	800fa14 <_ZN8touchgfx12DigitalClock11updateClockEv+0xe8>
 800f9c6:	f894 3030 	ldrb.w	r3, [r4, #48]	@ 0x30
 800f9ca:	4620      	mov	r0, r4
 800f9cc:	4a23      	ldr	r2, [pc, #140]	@ (800fa5c <_ZN8touchgfx12DigitalClock11updateClockEv+0x130>)
 800f9ce:	f104 0780 	add.w	r7, r4, #128	@ 0x80
 800f9d2:	4d23      	ldr	r5, [pc, #140]	@ (800fa60 <_ZN8touchgfx12DigitalClock11updateClockEv+0x134>)
 800f9d4:	2b00      	cmp	r3, #0
 800f9d6:	bf08      	it	eq
 800f9d8:	4615      	moveq	r5, r2
 800f9da:	f000 f8e9 	bl	800fbb0 <_ZNK8touchgfx13AbstractClock16getCurrentHour12Ev>
 800f9de:	4680      	mov	r8, r0
 800f9e0:	4620      	mov	r0, r4
 800f9e2:	f000 f8f8 	bl	800fbd6 <_ZNK8touchgfx13AbstractClock16getCurrentMinuteEv>
 800f9e6:	4681      	mov	r9, r0
 800f9e8:	4620      	mov	r0, r4
 800f9ea:	f000 f8f7 	bl	800fbdc <_ZNK8touchgfx13AbstractClock16getCurrentSecondEv>
 800f9ee:	4682      	mov	sl, r0
 800f9f0:	4620      	mov	r0, r4
 800f9f2:	f000 f8e9 	bl	800fbc8 <_ZNK8touchgfx13AbstractClock12getCurrentAMEv>
 800f9f6:	2800      	cmp	r0, #0
 800f9f8:	f8cd 9000 	str.w	r9, [sp]
 800f9fc:	462a      	mov	r2, r5
 800f9fe:	bf14      	ite	ne
 800fa00:	2341      	movne	r3, #65	@ 0x41
 800fa02:	2350      	moveq	r3, #80	@ 0x50
 800fa04:	210c      	movs	r1, #12
 800fa06:	4638      	mov	r0, r7
 800fa08:	e9cd a301 	strd	sl, r3, [sp, #4]
 800fa0c:	4643      	mov	r3, r8
 800fa0e:	f00b fee3 	bl	801b7d8 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 800fa12:	e7d0      	b.n	800f9b6 <_ZN8touchgfx12DigitalClock11updateClockEv+0x8a>
 800fa14:	2b03      	cmp	r3, #3
 800fa16:	d1ce      	bne.n	800f9b6 <_ZN8touchgfx12DigitalClock11updateClockEv+0x8a>
 800fa18:	f894 3030 	ldrb.w	r3, [r4, #48]	@ 0x30
 800fa1c:	4620      	mov	r0, r4
 800fa1e:	4a11      	ldr	r2, [pc, #68]	@ (800fa64 <_ZN8touchgfx12DigitalClock11updateClockEv+0x138>)
 800fa20:	4d11      	ldr	r5, [pc, #68]	@ (800fa68 <_ZN8touchgfx12DigitalClock11updateClockEv+0x13c>)
 800fa22:	2b00      	cmp	r3, #0
 800fa24:	bf08      	it	eq
 800fa26:	4615      	moveq	r5, r2
 800fa28:	f000 f8bf 	bl	800fbaa <_ZNK8touchgfx13AbstractClock16getCurrentHour24Ev>
 800fa2c:	4607      	mov	r7, r0
 800fa2e:	4620      	mov	r0, r4
 800fa30:	f000 f8d1 	bl	800fbd6 <_ZNK8touchgfx13AbstractClock16getCurrentMinuteEv>
 800fa34:	4680      	mov	r8, r0
 800fa36:	4620      	mov	r0, r4
 800fa38:	f000 f8d0 	bl	800fbdc <_ZNK8touchgfx13AbstractClock16getCurrentSecondEv>
 800fa3c:	463b      	mov	r3, r7
 800fa3e:	462a      	mov	r2, r5
 800fa40:	210c      	movs	r1, #12
 800fa42:	e9cd 8000 	strd	r8, r0, [sp]
 800fa46:	f104 0080 	add.w	r0, r4, #128	@ 0x80
 800fa4a:	e799      	b.n	800f980 <_ZN8touchgfx12DigitalClock11updateClockEv+0x54>
 800fa4c:	0802c554 	.word	0x0802c554
 800fa50:	0802c57e 	.word	0x0802c57e
 800fa54:	0802c560 	.word	0x0802c560
 800fa58:	0802c59e 	.word	0x0802c59e
 800fa5c:	0802c57b 	.word	0x0802c57b
 800fa60:	0802c568 	.word	0x0802c568
 800fa64:	0802c59b 	.word	0x0802c59b
 800fa68:	0802c58c 	.word	0x0802c58c

0800fa6c <_ZN8touchgfx12DigitalClockC1Ev>:
 800fa6c:	b510      	push	{r4, lr}
 800fa6e:	4604      	mov	r4, r0
 800fa70:	f000 f87c 	bl	800fb6c <_ZN8touchgfx13AbstractClockC1Ev>
 800fa74:	2201      	movs	r2, #1
 800fa76:	4b21      	ldr	r3, [pc, #132]	@ (800fafc <_ZN8touchgfx12DigitalClockC1Ev+0x90>)
 800fa78:	f44f 017f 	mov.w	r1, #16711680	@ 0xff0000
 800fa7c:	4620      	mov	r0, r4
 800fa7e:	f884 2059 	strb.w	r2, [r4, #89]	@ 0x59
 800fa82:	4a1f      	ldr	r2, [pc, #124]	@ (800fb00 <_ZN8touchgfx12DigitalClockC1Ev+0x94>)
 800fa84:	6023      	str	r3, [r4, #0]
 800fa86:	2303      	movs	r3, #3
 800fa88:	65e2      	str	r2, [r4, #92]	@ 0x5c
 800fa8a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800fa8e:	f884 302f 	strb.w	r3, [r4, #47]	@ 0x2f
 800fa92:	2300      	movs	r3, #0
 800fa94:	f8a4 2060 	strh.w	r2, [r4, #96]	@ 0x60
 800fa98:	f8a4 2074 	strh.w	r2, [r4, #116]	@ 0x74
 800fa9c:	f8a4 2076 	strh.w	r2, [r4, #118]	@ 0x76
 800faa0:	4a18      	ldr	r2, [pc, #96]	@ (800fb04 <_ZN8touchgfx12DigitalClockC1Ev+0x98>)
 800faa2:	66a1      	str	r1, [r4, #104]	@ 0x68
 800faa4:	f104 0134 	add.w	r1, r4, #52	@ 0x34
 800faa8:	6362      	str	r2, [r4, #52]	@ 0x34
 800faaa:	4622      	mov	r2, r4
 800faac:	f884 3030 	strb.w	r3, [r4, #48]	@ 0x30
 800fab0:	8723      	strh	r3, [r4, #56]	@ 0x38
 800fab2:	8763      	strh	r3, [r4, #58]	@ 0x3a
 800fab4:	87a3      	strh	r3, [r4, #60]	@ 0x3c
 800fab6:	87e3      	strh	r3, [r4, #62]	@ 0x3e
 800fab8:	f8a4 3040 	strh.w	r3, [r4, #64]	@ 0x40
 800fabc:	f8a4 3042 	strh.w	r3, [r4, #66]	@ 0x42
 800fac0:	f8a4 3044 	strh.w	r3, [r4, #68]	@ 0x44
 800fac4:	f8a4 3046 	strh.w	r3, [r4, #70]	@ 0x46
 800fac8:	6523      	str	r3, [r4, #80]	@ 0x50
 800faca:	f8a4 3054 	strh.w	r3, [r4, #84]	@ 0x54
 800face:	f8a4 3056 	strh.w	r3, [r4, #86]	@ 0x56
 800fad2:	f884 3058 	strb.w	r3, [r4, #88]	@ 0x58
 800fad6:	6663      	str	r3, [r4, #100]	@ 0x64
 800fad8:	f884 306c 	strb.w	r3, [r4, #108]	@ 0x6c
 800fadc:	f884 306d 	strb.w	r3, [r4, #109]	@ 0x6d
 800fae0:	f8a4 3070 	strh.w	r3, [r4, #112]	@ 0x70
 800fae4:	f8a4 3072 	strh.w	r3, [r4, #114]	@ 0x72
 800fae8:	67a3      	str	r3, [r4, #120]	@ 0x78
 800faea:	e9c4 3312 	strd	r3, r3, [r4, #72]	@ 0x48
 800faee:	f822 3f80 	strh.w	r3, [r2, #128]!
 800faf2:	67e2      	str	r2, [r4, #124]	@ 0x7c
 800faf4:	f000 f87f 	bl	800fbf6 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 800faf8:	4620      	mov	r0, r4
 800fafa:	bd10      	pop	{r4, pc}
 800fafc:	0802c5b0 	.word	0x0802c5b0
 800fb00:	0802aec4 	.word	0x0802aec4
 800fb04:	0802b848 	.word	0x0802b848

0800fb08 <_ZN8touchgfx12DigitalClock34displayLeadingZeroForHourIndicatorEb>:
 800fb08:	f880 1030 	strb.w	r1, [r0, #48]	@ 0x30
 800fb0c:	4770      	bx	lr

0800fb0e <_ZN8touchgfx13AbstractClock13setTime24HourEhhh>:
 800fb0e:	b470      	push	{r4, r5, r6}
 800fb10:	2518      	movs	r5, #24
 800fb12:	fbb1 f6f5 	udiv	r6, r1, r5
 800fb16:	fb06 1115 	mls	r1, r6, r5, r1
 800fb1a:	f880 102c 	strb.w	r1, [r0, #44]	@ 0x2c
 800fb1e:	213c      	movs	r1, #60	@ 0x3c
 800fb20:	fbb2 f5f1 	udiv	r5, r2, r1
 800fb24:	fb05 2211 	mls	r2, r5, r1, r2
 800fb28:	f880 202d 	strb.w	r2, [r0, #45]	@ 0x2d
 800fb2c:	fbb3 f2f1 	udiv	r2, r3, r1
 800fb30:	fb02 3311 	mls	r3, r2, r1, r3
 800fb34:	f880 302e 	strb.w	r3, [r0, #46]	@ 0x2e
 800fb38:	6803      	ldr	r3, [r0, #0]
 800fb3a:	bc70      	pop	{r4, r5, r6}
 800fb3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800fb40:	4718      	bx	r3

0800fb42 <_ZN8touchgfx13AbstractClock13setTime12HourEhhhb>:
 800fb42:	b4f0      	push	{r4, r5, r6, r7}
 800fb44:	6804      	ldr	r4, [r0, #0]
 800fb46:	f89d 6010 	ldrb.w	r6, [sp, #16]
 800fb4a:	f8d4 5088 	ldr.w	r5, [r4, #136]	@ 0x88
 800fb4e:	240c      	movs	r4, #12
 800fb50:	2e00      	cmp	r6, #0
 800fb52:	46ac      	mov	ip, r5
 800fb54:	fbb1 f7f4 	udiv	r7, r1, r4
 800fb58:	fb07 1114 	mls	r1, r7, r4, r1
 800fb5c:	bf18      	it	ne
 800fb5e:	2400      	movne	r4, #0
 800fb60:	fa54 f181 	uxtab	r1, r4, r1
 800fb64:	bcf0      	pop	{r4, r5, r6, r7}
 800fb66:	b2c9      	uxtb	r1, r1
 800fb68:	4760      	bx	ip
	...

0800fb6c <_ZN8touchgfx13AbstractClockC1Ev>:
 800fb6c:	2101      	movs	r1, #1
 800fb6e:	2200      	movs	r2, #0
 800fb70:	f880 1025 	strb.w	r1, [r0, #37]	@ 0x25
 800fb74:	490a      	ldr	r1, [pc, #40]	@ (800fba0 <_ZN8touchgfx13AbstractClockC1Ev+0x34>)
 800fb76:	8082      	strh	r2, [r0, #4]
 800fb78:	80c2      	strh	r2, [r0, #6]
 800fb7a:	8102      	strh	r2, [r0, #8]
 800fb7c:	8142      	strh	r2, [r0, #10]
 800fb7e:	8182      	strh	r2, [r0, #12]
 800fb80:	81c2      	strh	r2, [r0, #14]
 800fb82:	8202      	strh	r2, [r0, #16]
 800fb84:	8242      	strh	r2, [r0, #18]
 800fb86:	61c2      	str	r2, [r0, #28]
 800fb88:	8402      	strh	r2, [r0, #32]
 800fb8a:	8442      	strh	r2, [r0, #34]	@ 0x22
 800fb8c:	f880 2024 	strb.w	r2, [r0, #36]	@ 0x24
 800fb90:	6001      	str	r1, [r0, #0]
 800fb92:	6282      	str	r2, [r0, #40]	@ 0x28
 800fb94:	8582      	strh	r2, [r0, #44]	@ 0x2c
 800fb96:	f880 202e 	strb.w	r2, [r0, #46]	@ 0x2e
 800fb9a:	e9c0 2205 	strd	r2, r2, [r0, #20]
 800fb9e:	4770      	bx	lr
 800fba0:	0802c670 	.word	0x0802c670

0800fba4 <_ZNK8touchgfx13AbstractClock14getCurrentHourEv>:
 800fba4:	f890 002c 	ldrb.w	r0, [r0, #44]	@ 0x2c
 800fba8:	4770      	bx	lr

0800fbaa <_ZNK8touchgfx13AbstractClock16getCurrentHour24Ev>:
 800fbaa:	f890 002c 	ldrb.w	r0, [r0, #44]	@ 0x2c
 800fbae:	4770      	bx	lr

0800fbb0 <_ZNK8touchgfx13AbstractClock16getCurrentHour12Ev>:
 800fbb0:	f890 002c 	ldrb.w	r0, [r0, #44]	@ 0x2c
 800fbb4:	220c      	movs	r2, #12
 800fbb6:	f100 030b 	add.w	r3, r0, #11
 800fbba:	fb93 f0f2 	sdiv	r0, r3, r2
 800fbbe:	fb02 3010 	mls	r0, r2, r0, r3
 800fbc2:	3001      	adds	r0, #1
 800fbc4:	b2c0      	uxtb	r0, r0
 800fbc6:	4770      	bx	lr

0800fbc8 <_ZNK8touchgfx13AbstractClock12getCurrentAMEv>:
 800fbc8:	f890 002c 	ldrb.w	r0, [r0, #44]	@ 0x2c
 800fbcc:	280b      	cmp	r0, #11
 800fbce:	bf8c      	ite	hi
 800fbd0:	2000      	movhi	r0, #0
 800fbd2:	2001      	movls	r0, #1
 800fbd4:	4770      	bx	lr

0800fbd6 <_ZNK8touchgfx13AbstractClock16getCurrentMinuteEv>:
 800fbd6:	f890 002d 	ldrb.w	r0, [r0, #45]	@ 0x2d
 800fbda:	4770      	bx	lr

0800fbdc <_ZNK8touchgfx13AbstractClock16getCurrentSecondEv>:
 800fbdc:	f890 002e 	ldrb.w	r0, [r0, #46]	@ 0x2e
 800fbe0:	4770      	bx	lr

0800fbe2 <_ZN8touchgfx9Container8containsERKNS_8DrawableE>:
 800fbe2:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 800fbe4:	2000      	movs	r0, #0
 800fbe6:	b12b      	cbz	r3, 800fbf4 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 800fbe8:	b920      	cbnz	r0, 800fbf4 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 800fbea:	1a5a      	subs	r2, r3, r1
 800fbec:	699b      	ldr	r3, [r3, #24]
 800fbee:	4250      	negs	r0, r2
 800fbf0:	4150      	adcs	r0, r2
 800fbf2:	e7f8      	b.n	800fbe6 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x4>
 800fbf4:	4770      	bx	lr

0800fbf6 <_ZN8touchgfx9Container3addERNS_8DrawableE>:
 800fbf6:	2300      	movs	r3, #0
 800fbf8:	6148      	str	r0, [r1, #20]
 800fbfa:	618b      	str	r3, [r1, #24]
 800fbfc:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 800fbfe:	b913      	cbnz	r3, 800fc06 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x10>
 800fc00:	6281      	str	r1, [r0, #40]	@ 0x28
 800fc02:	4770      	bx	lr
 800fc04:	4613      	mov	r3, r2
 800fc06:	699a      	ldr	r2, [r3, #24]
 800fc08:	2a00      	cmp	r2, #0
 800fc0a:	d1fb      	bne.n	800fc04 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xe>
 800fc0c:	6199      	str	r1, [r3, #24]
 800fc0e:	4770      	bx	lr

0800fc10 <_ZN8touchgfx9Container9removeAllEv>:
 800fc10:	2200      	movs	r2, #0
 800fc12:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 800fc14:	b123      	cbz	r3, 800fc20 <_ZN8touchgfx9Container9removeAllEv+0x10>
 800fc16:	6999      	ldr	r1, [r3, #24]
 800fc18:	6281      	str	r1, [r0, #40]	@ 0x28
 800fc1a:	e9c3 2205 	strd	r2, r2, [r3, #20]
 800fc1e:	e7f8      	b.n	800fc12 <_ZN8touchgfx9Container9removeAllEv+0x2>
 800fc20:	4770      	bx	lr

0800fc22 <_ZN8touchgfx9Container6unlinkEv>:
 800fc22:	2300      	movs	r3, #0
 800fc24:	6283      	str	r3, [r0, #40]	@ 0x28
 800fc26:	4770      	bx	lr

0800fc28 <_ZNK8touchgfx9Container12getSolidRectEv>:
 800fc28:	2200      	movs	r2, #0
 800fc2a:	8002      	strh	r2, [r0, #0]
 800fc2c:	8042      	strh	r2, [r0, #2]
 800fc2e:	8082      	strh	r2, [r0, #4]
 800fc30:	80c2      	strh	r2, [r0, #6]
 800fc32:	4770      	bx	lr

0800fc34 <_ZN8touchgfx9Container20moveChildrenRelativeEss>:
 800fc34:	b570      	push	{r4, r5, r6, lr}
 800fc36:	460d      	mov	r5, r1
 800fc38:	4616      	mov	r6, r2
 800fc3a:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 800fc3c:	b13c      	cbz	r4, 800fc4e <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x1a>
 800fc3e:	6823      	ldr	r3, [r4, #0]
 800fc40:	4620      	mov	r0, r4
 800fc42:	4632      	mov	r2, r6
 800fc44:	4629      	mov	r1, r5
 800fc46:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800fc48:	4798      	blx	r3
 800fc4a:	69a4      	ldr	r4, [r4, #24]
 800fc4c:	e7f6      	b.n	800fc3c <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x8>
 800fc4e:	bd70      	pop	{r4, r5, r6, pc}

0800fc50 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE>:
 800fc50:	b538      	push	{r3, r4, r5, lr}
 800fc52:	460d      	mov	r5, r1
 800fc54:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 800fc56:	b134      	cbz	r4, 800fc66 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x16>
 800fc58:	682b      	ldr	r3, [r5, #0]
 800fc5a:	4621      	mov	r1, r4
 800fc5c:	4628      	mov	r0, r5
 800fc5e:	689b      	ldr	r3, [r3, #8]
 800fc60:	4798      	blx	r3
 800fc62:	69a4      	ldr	r4, [r4, #24]
 800fc64:	e7f7      	b.n	800fc56 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x6>
 800fc66:	bd38      	pop	{r3, r4, r5, pc}

0800fc68 <_ZN8touchgfx9ContainerD1Ev>:
 800fc68:	4770      	bx	lr

0800fc6a <_ZN8touchgfx9ContainerD0Ev>:
 800fc6a:	b510      	push	{r4, lr}
 800fc6c:	4604      	mov	r4, r0
 800fc6e:	212c      	movs	r1, #44	@ 0x2c
 800fc70:	f017 fc0d 	bl	802748e <_ZdlPvj>
 800fc74:	4620      	mov	r0, r4
 800fc76:	bd10      	pop	{r4, pc}

0800fc78 <_ZN8touchgfx9Container6removeERNS_8DrawableE>:
 800fc78:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 800fc7a:	b19b      	cbz	r3, 800fca4 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 800fc7c:	428b      	cmp	r3, r1
 800fc7e:	d109      	bne.n	800fc94 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x1c>
 800fc80:	699a      	ldr	r2, [r3, #24]
 800fc82:	2100      	movs	r1, #0
 800fc84:	6159      	str	r1, [r3, #20]
 800fc86:	6282      	str	r2, [r0, #40]	@ 0x28
 800fc88:	b902      	cbnz	r2, 800fc8c <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x14>
 800fc8a:	4770      	bx	lr
 800fc8c:	6199      	str	r1, [r3, #24]
 800fc8e:	4770      	bx	lr
 800fc90:	4613      	mov	r3, r2
 800fc92:	b13a      	cbz	r2, 800fca4 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 800fc94:	699a      	ldr	r2, [r3, #24]
 800fc96:	428a      	cmp	r2, r1
 800fc98:	d1fa      	bne.n	800fc90 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x18>
 800fc9a:	698a      	ldr	r2, [r1, #24]
 800fc9c:	619a      	str	r2, [r3, #24]
 800fc9e:	2300      	movs	r3, #0
 800fca0:	e9c1 3305 	strd	r3, r3, [r1, #20]
 800fca4:	4770      	bx	lr

0800fca6 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_>:
 800fca6:	b410      	push	{r4}
 800fca8:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 800fcaa:	4604      	mov	r4, r0
 800fcac:	b92b      	cbnz	r3, 800fcba <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x14>
 800fcae:	6803      	ldr	r3, [r0, #0]
 800fcb0:	4611      	mov	r1, r2
 800fcb2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fcb6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800fcb8:	4718      	bx	r3
 800fcba:	b941      	cbnz	r1, 800fcce <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x28>
 800fcbc:	6193      	str	r3, [r2, #24]
 800fcbe:	6282      	str	r2, [r0, #40]	@ 0x28
 800fcc0:	6154      	str	r4, [r2, #20]
 800fcc2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fcc6:	4770      	bx	lr
 800fcc8:	4603      	mov	r3, r0
 800fcca:	2800      	cmp	r0, #0
 800fccc:	d0f9      	beq.n	800fcc2 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1c>
 800fcce:	4299      	cmp	r1, r3
 800fcd0:	6998      	ldr	r0, [r3, #24]
 800fcd2:	d1f9      	bne.n	800fcc8 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x22>
 800fcd4:	6190      	str	r0, [r2, #24]
 800fcd6:	618a      	str	r2, [r1, #24]
 800fcd8:	e7f2      	b.n	800fcc0 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1a>

0800fcda <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>:
 800fcda:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fcde:	461f      	mov	r7, r3
 800fce0:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
 800fce4:	460d      	mov	r5, r1
 800fce6:	4616      	mov	r6, r2
 800fce8:	b103      	cbz	r3, 800fcec <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x12>
 800fcea:	6038      	str	r0, [r7, #0]
 800fcec:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 800fcee:	b314      	cbz	r4, 800fd36 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x5c>
 800fcf0:	f894 3025 	ldrb.w	r3, [r4, #37]	@ 0x25
 800fcf4:	b1eb      	cbz	r3, 800fd32 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 800fcf6:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 800fcfa:	428d      	cmp	r5, r1
 800fcfc:	db19      	blt.n	800fd32 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 800fcfe:	b289      	uxth	r1, r1
 800fd00:	8923      	ldrh	r3, [r4, #8]
 800fd02:	440b      	add	r3, r1
 800fd04:	b21b      	sxth	r3, r3
 800fd06:	429d      	cmp	r5, r3
 800fd08:	da13      	bge.n	800fd32 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 800fd0a:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 800fd0e:	4296      	cmp	r6, r2
 800fd10:	db0f      	blt.n	800fd32 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 800fd12:	b292      	uxth	r2, r2
 800fd14:	8963      	ldrh	r3, [r4, #10]
 800fd16:	4413      	add	r3, r2
 800fd18:	b21b      	sxth	r3, r3
 800fd1a:	429e      	cmp	r6, r3
 800fd1c:	da09      	bge.n	800fd32 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 800fd1e:	6823      	ldr	r3, [r4, #0]
 800fd20:	1ab2      	subs	r2, r6, r2
 800fd22:	1a69      	subs	r1, r5, r1
 800fd24:	4620      	mov	r0, r4
 800fd26:	f8d3 8024 	ldr.w	r8, [r3, #36]	@ 0x24
 800fd2a:	b212      	sxth	r2, r2
 800fd2c:	463b      	mov	r3, r7
 800fd2e:	b209      	sxth	r1, r1
 800fd30:	47c0      	blx	r8
 800fd32:	69a4      	ldr	r4, [r4, #24]
 800fd34:	e7db      	b.n	800fcee <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x14>
 800fd36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

0800fd3c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>:
 800fd3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fd40:	4c6d      	ldr	r4, [pc, #436]	@ (800fef8 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1bc>)
 800fd42:	b0a1      	sub	sp, #132	@ 0x84
 800fd44:	4606      	mov	r6, r0
 800fd46:	6824      	ldr	r4, [r4, #0]
 800fd48:	9d2a      	ldr	r5, [sp, #168]	@ 0xa8
 800fd4a:	f894 9049 	ldrb.w	r9, [r4, #73]	@ 0x49
 800fd4e:	2400      	movs	r4, #0
 800fd50:	9303      	str	r3, [sp, #12]
 800fd52:	802c      	strh	r4, [r5, #0]
 800fd54:	9d2b      	ldr	r5, [sp, #172]	@ 0xac
 800fd56:	802c      	strh	r4, [r5, #0]
 800fd58:	601c      	str	r4, [r3, #0]
 800fd5a:	e9cd 1201 	strd	r1, r2, [sp, #4]
 800fd5e:	f7ff ffbc 	bl	800fcda <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 800fd62:	f1b9 0f03 	cmp.w	r9, #3
 800fd66:	f340 80c1 	ble.w	800feec <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b0>
 800fd6a:	4631      	mov	r1, r6
 800fd6c:	a80c      	add	r0, sp, #48	@ 0x30
 800fd6e:	f009 f9ef 	bl	8019150 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800fd72:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	@ 0x30
 800fd76:	9306      	str	r3, [sp, #24]
 800fd78:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	@ 0x32
 800fd7c:	9307      	str	r3, [sp, #28]
 800fd7e:	9b03      	ldr	r3, [sp, #12]
 800fd80:	f8d3 a000 	ldr.w	sl, [r3]
 800fd84:	f1ba 0f00 	cmp.w	sl, #0
 800fd88:	f000 80b3 	beq.w	800fef2 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b6>
 800fd8c:	4651      	mov	r1, sl
 800fd8e:	a810      	add	r0, sp, #64	@ 0x40
 800fd90:	f009 f9de 	bl	8019150 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800fd94:	2002      	movs	r0, #2
 800fd96:	f9bd 1044 	ldrsh.w	r1, [sp, #68]	@ 0x44
 800fd9a:	9b01      	ldr	r3, [sp, #4]
 800fd9c:	9a06      	ldr	r2, [sp, #24]
 800fd9e:	fb91 f1f0 	sdiv	r1, r1, r0
 800fda2:	189d      	adds	r5, r3, r2
 800fda4:	f9bd 3040 	ldrsh.w	r3, [sp, #64]	@ 0x40
 800fda8:	9a07      	ldr	r2, [sp, #28]
 800fdaa:	4419      	add	r1, r3
 800fdac:	9b02      	ldr	r3, [sp, #8]
 800fdae:	4413      	add	r3, r2
 800fdb0:	f9bd 2046 	ldrsh.w	r2, [sp, #70]	@ 0x46
 800fdb4:	1a6d      	subs	r5, r5, r1
 800fdb6:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	@ 0x42
 800fdba:	fb92 f2f0 	sdiv	r2, r2, r0
 800fdbe:	440a      	add	r2, r1
 800fdc0:	1a9b      	subs	r3, r3, r2
 800fdc2:	435b      	muls	r3, r3
 800fdc4:	fb05 3505 	mla	r5, r5, r5, r3
 800fdc8:	4f4c      	ldr	r7, [pc, #304]	@ (800fefc <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1c0>)
 800fdca:	ac10      	add	r4, sp, #64	@ 0x40
 800fdcc:	f1b9 0f0c 	cmp.w	r9, #12
 800fdd0:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800fdd2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800fdd4:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800fdd6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800fdd8:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800fdda:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800fddc:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
 800fde0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800fde4:	f04f 0303 	mov.w	r3, #3
 800fde8:	bfd8      	it	le
 800fdea:	f109 32ff 	addle.w	r2, r9, #4294967295
 800fdee:	f04f 0400 	mov.w	r4, #0
 800fdf2:	f8cd 9000 	str.w	r9, [sp]
 800fdf6:	bfcc      	ite	gt
 800fdf8:	4698      	movgt	r8, r3
 800fdfa:	fb92 f8f3 	sdivle	r8, r2, r3
 800fdfe:	1c63      	adds	r3, r4, #1
 800fe00:	aa10      	add	r2, sp, #64	@ 0x40
 800fe02:	f004 0401 	and.w	r4, r4, #1
 800fe06:	f04f 0b00 	mov.w	fp, #0
 800fe0a:	9308      	str	r3, [sp, #32]
 800fe0c:	9b00      	ldr	r3, [sp, #0]
 800fe0e:	eb02 1444 	add.w	r4, r2, r4, lsl #5
 800fe12:	fb93 f3f8 	sdiv	r3, r3, r8
 800fe16:	3404      	adds	r4, #4
 800fe18:	b29b      	uxth	r3, r3
 800fe1a:	9304      	str	r3, [sp, #16]
 800fe1c:	9a04      	ldr	r2, [sp, #16]
 800fe1e:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800fe22:	fb13 f302 	smulbb	r3, r3, r2
 800fe26:	9a01      	ldr	r2, [sp, #4]
 800fe28:	b29b      	uxth	r3, r3
 800fe2a:	1899      	adds	r1, r3, r2
 800fe2c:	9305      	str	r3, [sp, #20]
 800fe2e:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 800fe32:	b209      	sxth	r1, r1
 800fe34:	4299      	cmp	r1, r3
 800fe36:	db4d      	blt.n	800fed4 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 800fe38:	8932      	ldrh	r2, [r6, #8]
 800fe3a:	4413      	add	r3, r2
 800fe3c:	b21b      	sxth	r3, r3
 800fe3e:	4299      	cmp	r1, r3
 800fe40:	da48      	bge.n	800fed4 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 800fe42:	9b04      	ldr	r3, [sp, #16]
 800fe44:	6827      	ldr	r7, [r4, #0]
 800fe46:	fb17 f703 	smulbb	r7, r7, r3
 800fe4a:	9b02      	ldr	r3, [sp, #8]
 800fe4c:	b2bf      	uxth	r7, r7
 800fe4e:	18fa      	adds	r2, r7, r3
 800fe50:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 800fe54:	b212      	sxth	r2, r2
 800fe56:	429a      	cmp	r2, r3
 800fe58:	db3c      	blt.n	800fed4 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 800fe5a:	8970      	ldrh	r0, [r6, #10]
 800fe5c:	4403      	add	r3, r0
 800fe5e:	b21b      	sxth	r3, r3
 800fe60:	429a      	cmp	r2, r3
 800fe62:	da37      	bge.n	800fed4 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 800fe64:	2300      	movs	r3, #0
 800fe66:	4630      	mov	r0, r6
 800fe68:	930b      	str	r3, [sp, #44]	@ 0x2c
 800fe6a:	ab0b      	add	r3, sp, #44	@ 0x2c
 800fe6c:	f7ff ff35 	bl	800fcda <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 800fe70:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800fe72:	b37a      	cbz	r2, 800fed4 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 800fe74:	4552      	cmp	r2, sl
 800fe76:	d02d      	beq.n	800fed4 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 800fe78:	4611      	mov	r1, r2
 800fe7a:	a80e      	add	r0, sp, #56	@ 0x38
 800fe7c:	9209      	str	r2, [sp, #36]	@ 0x24
 800fe7e:	f009 f967 	bl	8019150 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800fe82:	f04f 0e02 	mov.w	lr, #2
 800fe86:	f9bd 103c 	ldrsh.w	r1, [sp, #60]	@ 0x3c
 800fe8a:	9a06      	ldr	r2, [sp, #24]
 800fe8c:	f9bd 0038 	ldrsh.w	r0, [sp, #56]	@ 0x38
 800fe90:	9b01      	ldr	r3, [sp, #4]
 800fe92:	f9bd c03e 	ldrsh.w	ip, [sp, #62]	@ 0x3e
 800fe96:	4413      	add	r3, r2
 800fe98:	9a07      	ldr	r2, [sp, #28]
 800fe9a:	fb91 f1fe 	sdiv	r1, r1, lr
 800fe9e:	fb9c fcfe 	sdiv	ip, ip, lr
 800fea2:	4401      	add	r1, r0
 800fea4:	1a58      	subs	r0, r3, r1
 800fea6:	9b02      	ldr	r3, [sp, #8]
 800fea8:	f9bd 103a 	ldrsh.w	r1, [sp, #58]	@ 0x3a
 800feac:	4413      	add	r3, r2
 800feae:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800feb0:	448c      	add	ip, r1
 800feb2:	eba3 030c 	sub.w	r3, r3, ip
 800feb6:	435b      	muls	r3, r3
 800feb8:	fb00 3300 	mla	r3, r0, r0, r3
 800febc:	42ab      	cmp	r3, r5
 800febe:	d208      	bcs.n	800fed2 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x196>
 800fec0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800fec2:	461d      	mov	r5, r3
 800fec4:	9803      	ldr	r0, [sp, #12]
 800fec6:	6001      	str	r1, [r0, #0]
 800fec8:	992a      	ldr	r1, [sp, #168]	@ 0xa8
 800feca:	9805      	ldr	r0, [sp, #20]
 800fecc:	8008      	strh	r0, [r1, #0]
 800fece:	992b      	ldr	r1, [sp, #172]	@ 0xac
 800fed0:	800f      	strh	r7, [r1, #0]
 800fed2:	4692      	mov	sl, r2
 800fed4:	f10b 0b01 	add.w	fp, fp, #1
 800fed8:	3408      	adds	r4, #8
 800feda:	f1bb 0f04 	cmp.w	fp, #4
 800fede:	d19d      	bne.n	800fe1c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xe0>
 800fee0:	9b00      	ldr	r3, [sp, #0]
 800fee2:	9c08      	ldr	r4, [sp, #32]
 800fee4:	444b      	add	r3, r9
 800fee6:	4544      	cmp	r4, r8
 800fee8:	9300      	str	r3, [sp, #0]
 800feea:	d188      	bne.n	800fdfe <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xc2>
 800feec:	b021      	add	sp, #132	@ 0x84
 800feee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fef2:	f04f 35ff 	mov.w	r5, #4294967295
 800fef6:	e767      	b.n	800fdc8 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x8c>
 800fef8:	24028e20 	.word	0x24028e20
 800fefc:	08028c00 	.word	0x08028c00

0800ff00 <_ZN8touchgfx4RectaNERKS0_>:
 800ff00:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ff04:	f9b1 7000 	ldrsh.w	r7, [r1]
 800ff08:	888c      	ldrh	r4, [r1, #4]
 800ff0a:	f9b0 9000 	ldrsh.w	r9, [r0]
 800ff0e:	443c      	add	r4, r7
 800ff10:	b2a4      	uxth	r4, r4
 800ff12:	fa0f f884 	sxth.w	r8, r4
 800ff16:	45c1      	cmp	r9, r8
 800ff18:	da2f      	bge.n	800ff7a <_ZN8touchgfx4RectaNERKS0_+0x7a>
 800ff1a:	8882      	ldrh	r2, [r0, #4]
 800ff1c:	444a      	add	r2, r9
 800ff1e:	b292      	uxth	r2, r2
 800ff20:	fa0f fe82 	sxth.w	lr, r2
 800ff24:	4577      	cmp	r7, lr
 800ff26:	da28      	bge.n	800ff7a <_ZN8touchgfx4RectaNERKS0_+0x7a>
 800ff28:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 800ff2c:	88cb      	ldrh	r3, [r1, #6]
 800ff2e:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 800ff32:	442b      	add	r3, r5
 800ff34:	b21b      	sxth	r3, r3
 800ff36:	429e      	cmp	r6, r3
 800ff38:	da1f      	bge.n	800ff7a <_ZN8touchgfx4RectaNERKS0_+0x7a>
 800ff3a:	88c3      	ldrh	r3, [r0, #6]
 800ff3c:	4433      	add	r3, r6
 800ff3e:	b29b      	uxth	r3, r3
 800ff40:	fa0f fc83 	sxth.w	ip, r3
 800ff44:	4565      	cmp	r5, ip
 800ff46:	da18      	bge.n	800ff7a <_ZN8touchgfx4RectaNERKS0_+0x7a>
 800ff48:	454f      	cmp	r7, r9
 800ff4a:	bfb8      	it	lt
 800ff4c:	464f      	movlt	r7, r9
 800ff4e:	42b5      	cmp	r5, r6
 800ff50:	bfb8      	it	lt
 800ff52:	4635      	movlt	r5, r6
 800ff54:	45f0      	cmp	r8, lr
 800ff56:	bfd8      	it	le
 800ff58:	4622      	movle	r2, r4
 800ff5a:	1bd2      	subs	r2, r2, r7
 800ff5c:	8082      	strh	r2, [r0, #4]
 800ff5e:	884a      	ldrh	r2, [r1, #2]
 800ff60:	88c9      	ldrh	r1, [r1, #6]
 800ff62:	8007      	strh	r7, [r0, #0]
 800ff64:	440a      	add	r2, r1
 800ff66:	8045      	strh	r5, [r0, #2]
 800ff68:	b292      	uxth	r2, r2
 800ff6a:	b211      	sxth	r1, r2
 800ff6c:	458c      	cmp	ip, r1
 800ff6e:	bfa8      	it	ge
 800ff70:	4613      	movge	r3, r2
 800ff72:	1b5b      	subs	r3, r3, r5
 800ff74:	80c3      	strh	r3, [r0, #6]
 800ff76:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ff7a:	2300      	movs	r3, #0
 800ff7c:	8003      	strh	r3, [r0, #0]
 800ff7e:	8043      	strh	r3, [r0, #2]
 800ff80:	8083      	strh	r3, [r0, #4]
 800ff82:	80c3      	strh	r3, [r0, #6]
 800ff84:	e7f7      	b.n	800ff76 <_ZN8touchgfx4RectaNERKS0_+0x76>

0800ff86 <_ZNK8touchgfx4Rect7isEmptyEv>:
 800ff86:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 800ff8a:	2b00      	cmp	r3, #0
 800ff8c:	dd06      	ble.n	800ff9c <_ZNK8touchgfx4Rect7isEmptyEv+0x16>
 800ff8e:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 800ff92:	2800      	cmp	r0, #0
 800ff94:	bfcc      	ite	gt
 800ff96:	2000      	movgt	r0, #0
 800ff98:	2001      	movle	r0, #1
 800ff9a:	4770      	bx	lr
 800ff9c:	2001      	movs	r0, #1
 800ff9e:	4770      	bx	lr

0800ffa0 <_ZNK8touchgfx9Container16getContainedAreaEv>:
 800ffa0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ffa4:	2300      	movs	r3, #0
 800ffa6:	4604      	mov	r4, r0
 800ffa8:	6a8d      	ldr	r5, [r1, #40]	@ 0x28
 800ffaa:	8003      	strh	r3, [r0, #0]
 800ffac:	8043      	strh	r3, [r0, #2]
 800ffae:	8083      	strh	r3, [r0, #4]
 800ffb0:	80c3      	strh	r3, [r0, #6]
 800ffb2:	2d00      	cmp	r5, #0
 800ffb4:	d040      	beq.n	8010038 <_ZNK8touchgfx9Container16getContainedAreaEv+0x98>
 800ffb6:	1d28      	adds	r0, r5, #4
 800ffb8:	f7ff ffe5 	bl	800ff86 <_ZNK8touchgfx4Rect7isEmptyEv>
 800ffbc:	b988      	cbnz	r0, 800ffe2 <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 800ffbe:	4620      	mov	r0, r4
 800ffc0:	f7ff ffe1 	bl	800ff86 <_ZNK8touchgfx4Rect7isEmptyEv>
 800ffc4:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 800ffc8:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 800ffcc:	f9b5 e008 	ldrsh.w	lr, [r5, #8]
 800ffd0:	f9b5 c00a 	ldrsh.w	ip, [r5, #10]
 800ffd4:	b138      	cbz	r0, 800ffe6 <_ZNK8touchgfx9Container16getContainedAreaEv+0x46>
 800ffd6:	8022      	strh	r2, [r4, #0]
 800ffd8:	8063      	strh	r3, [r4, #2]
 800ffda:	f8a4 e004 	strh.w	lr, [r4, #4]
 800ffde:	f8a4 c006 	strh.w	ip, [r4, #6]
 800ffe2:	69ad      	ldr	r5, [r5, #24]
 800ffe4:	e7e5      	b.n	800ffb2 <_ZNK8touchgfx9Container16getContainedAreaEv+0x12>
 800ffe6:	f9b4 0000 	ldrsh.w	r0, [r4]
 800ffea:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 800ffee:	4290      	cmp	r0, r2
 800fff0:	4607      	mov	r7, r0
 800fff2:	f8b4 8004 	ldrh.w	r8, [r4, #4]
 800fff6:	460e      	mov	r6, r1
 800fff8:	bfa8      	it	ge
 800fffa:	4617      	movge	r7, r2
 800fffc:	4299      	cmp	r1, r3
 800fffe:	4472      	add	r2, lr
 8010000:	f8b4 e006 	ldrh.w	lr, [r4, #6]
 8010004:	bfa8      	it	ge
 8010006:	461e      	movge	r6, r3
 8010008:	4440      	add	r0, r8
 801000a:	4471      	add	r1, lr
 801000c:	4463      	add	r3, ip
 801000e:	b200      	sxth	r0, r0
 8010010:	8027      	strh	r7, [r4, #0]
 8010012:	b212      	sxth	r2, r2
 8010014:	8066      	strh	r6, [r4, #2]
 8010016:	b209      	sxth	r1, r1
 8010018:	b21b      	sxth	r3, r3
 801001a:	4290      	cmp	r0, r2
 801001c:	bfac      	ite	ge
 801001e:	ebc7 0200 	rsbge	r2, r7, r0
 8010022:	ebc7 0202 	rsblt	r2, r7, r2
 8010026:	4299      	cmp	r1, r3
 8010028:	bfac      	ite	ge
 801002a:	ebc6 0301 	rsbge	r3, r6, r1
 801002e:	ebc6 0303 	rsblt	r3, r6, r3
 8010032:	80a2      	strh	r2, [r4, #4]
 8010034:	80e3      	strh	r3, [r4, #6]
 8010036:	e7d4      	b.n	800ffe2 <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 8010038:	4620      	mov	r0, r4
 801003a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801003e <_ZNK8touchgfx9Container4drawERKNS_4RectE>:
 801003e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8010042:	f890 3025 	ldrb.w	r3, [r0, #37]	@ 0x25
 8010046:	b383      	cbz	r3, 80100aa <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 8010048:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 801004a:	b374      	cbz	r4, 80100aa <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 801004c:	f9b1 5000 	ldrsh.w	r5, [r1]
 8010050:	f9b1 6002 	ldrsh.w	r6, [r1, #2]
 8010054:	f9b1 7004 	ldrsh.w	r7, [r1, #4]
 8010058:	f9b1 8006 	ldrsh.w	r8, [r1, #6]
 801005c:	f894 3025 	ldrb.w	r3, [r4, #37]	@ 0x25
 8010060:	b303      	cbz	r3, 80100a4 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 8010062:	4668      	mov	r0, sp
 8010064:	1d21      	adds	r1, r4, #4
 8010066:	f8ad 5000 	strh.w	r5, [sp]
 801006a:	f8ad 6002 	strh.w	r6, [sp, #2]
 801006e:	f8ad 7004 	strh.w	r7, [sp, #4]
 8010072:	f8ad 8006 	strh.w	r8, [sp, #6]
 8010076:	f7ff ff43 	bl	800ff00 <_ZN8touchgfx4RectaNERKS0_>
 801007a:	4668      	mov	r0, sp
 801007c:	f7ff ff83 	bl	800ff86 <_ZNK8touchgfx4Rect7isEmptyEv>
 8010080:	b980      	cbnz	r0, 80100a4 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 8010082:	f8bd 3000 	ldrh.w	r3, [sp]
 8010086:	4669      	mov	r1, sp
 8010088:	88a2      	ldrh	r2, [r4, #4]
 801008a:	4620      	mov	r0, r4
 801008c:	1a9b      	subs	r3, r3, r2
 801008e:	88e2      	ldrh	r2, [r4, #6]
 8010090:	f8ad 3000 	strh.w	r3, [sp]
 8010094:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8010098:	1a9b      	subs	r3, r3, r2
 801009a:	f8ad 3002 	strh.w	r3, [sp, #2]
 801009e:	6823      	ldr	r3, [r4, #0]
 80100a0:	689b      	ldr	r3, [r3, #8]
 80100a2:	4798      	blx	r3
 80100a4:	69a4      	ldr	r4, [r4, #24]
 80100a6:	2c00      	cmp	r4, #0
 80100a8:	d1d8      	bne.n	801005c <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x1e>
 80100aa:	b002      	add	sp, #8
 80100ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080100b0 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>:
 80100b0:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80100b2:	f890 3025 	ldrb.w	r3, [r0, #37]	@ 0x25
 80100b6:	460d      	mov	r5, r1
 80100b8:	4616      	mov	r6, r2
 80100ba:	b323      	cbz	r3, 8010106 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 80100bc:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 80100be:	b314      	cbz	r4, 8010106 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 80100c0:	f894 3025 	ldrb.w	r3, [r4, #37]	@ 0x25
 80100c4:	b1eb      	cbz	r3, 8010102 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 80100c6:	6828      	ldr	r0, [r5, #0]
 80100c8:	466b      	mov	r3, sp
 80100ca:	6869      	ldr	r1, [r5, #4]
 80100cc:	c303      	stmia	r3!, {r0, r1}
 80100ce:	4668      	mov	r0, sp
 80100d0:	1d21      	adds	r1, r4, #4
 80100d2:	f7ff ff15 	bl	800ff00 <_ZN8touchgfx4RectaNERKS0_>
 80100d6:	4668      	mov	r0, sp
 80100d8:	f7ff ff55 	bl	800ff86 <_ZNK8touchgfx4Rect7isEmptyEv>
 80100dc:	b988      	cbnz	r0, 8010102 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 80100de:	f8bd 3000 	ldrh.w	r3, [sp]
 80100e2:	4669      	mov	r1, sp
 80100e4:	88a2      	ldrh	r2, [r4, #4]
 80100e6:	4620      	mov	r0, r4
 80100e8:	1a9b      	subs	r3, r3, r2
 80100ea:	88e2      	ldrh	r2, [r4, #6]
 80100ec:	f8ad 3000 	strh.w	r3, [sp]
 80100f0:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 80100f4:	1a9b      	subs	r3, r3, r2
 80100f6:	4632      	mov	r2, r6
 80100f8:	f8ad 3002 	strh.w	r3, [sp, #2]
 80100fc:	6823      	ldr	r3, [r4, #0]
 80100fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8010100:	4798      	blx	r3
 8010102:	69a4      	ldr	r4, [r4, #24]
 8010104:	e7db      	b.n	80100be <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0xe>
 8010106:	b002      	add	sp, #8
 8010108:	bd70      	pop	{r4, r5, r6, pc}

0801010a <_ZNK8touchgfx6Slider15getIndicatorMinEv>:
 801010a:	f9b0 00e4 	ldrsh.w	r0, [r0, #228]	@ 0xe4
 801010e:	4770      	bx	lr

08010110 <_ZNK8touchgfx6Slider15getIndicatorMaxEv>:
 8010110:	f9b0 00e6 	ldrsh.w	r0, [r0, #230]	@ 0xe6
 8010114:	4770      	bx	lr

08010116 <_ZNK8touchgfx6Slider11getMinValueEv>:
 8010116:	f9b0 0030 	ldrsh.w	r0, [r0, #48]	@ 0x30
 801011a:	4770      	bx	lr

0801011c <_ZNK8touchgfx6Slider11getMaxValueEv>:
 801011c:	f9b0 0032 	ldrsh.w	r0, [r0, #50]	@ 0x32
 8010120:	4770      	bx	lr

08010122 <_ZN8touchgfx6Slider8setValueEs>:
 8010122:	b570      	push	{r4, r5, r6, lr}
 8010124:	6803      	ldr	r3, [r0, #0]
 8010126:	4604      	mov	r4, r0
 8010128:	e9d3 532b 	ldrd	r5, r3, [r3, #172]	@ 0xac
 801012c:	4798      	blx	r3
 801012e:	4601      	mov	r1, r0
 8010130:	462b      	mov	r3, r5
 8010132:	4620      	mov	r0, r4
 8010134:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010138:	4718      	bx	r3

0801013a <_ZN8touchgfx6Slider15handleDragEventERKNS_9DragEventE>:
 801013a:	b570      	push	{r4, r5, r6, lr}
 801013c:	6803      	ldr	r3, [r0, #0]
 801013e:	4604      	mov	r4, r0
 8010140:	f890 202c 	ldrb.w	r2, [r0, #44]	@ 0x2c
 8010144:	f8d3 60ac 	ldr.w	r6, [r3, #172]	@ 0xac
 8010148:	b95a      	cbnz	r2, 8010162 <_ZN8touchgfx6Slider15handleDragEventERKNS_9DragEventE+0x28>
 801014a:	894d      	ldrh	r5, [r1, #10]
 801014c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8010150:	4620      	mov	r0, r4
 8010152:	4798      	blx	r3
 8010154:	1a29      	subs	r1, r5, r0
 8010156:	4633      	mov	r3, r6
 8010158:	4620      	mov	r0, r4
 801015a:	b209      	sxth	r1, r1
 801015c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010160:	4718      	bx	r3
 8010162:	898d      	ldrh	r5, [r1, #12]
 8010164:	e7f2      	b.n	801014c <_ZN8touchgfx6Slider15handleDragEventERKNS_9DragEventE+0x12>

08010166 <_ZNK8touchgfx6Slider18getIndicatorRadiusEv>:
 8010166:	f890 202c 	ldrb.w	r2, [r0, #44]	@ 0x2c
 801016a:	2302      	movs	r3, #2
 801016c:	b922      	cbnz	r2, 8010178 <_ZNK8touchgfx6Slider18getIndicatorRadiusEv+0x12>
 801016e:	f9b0 0094 	ldrsh.w	r0, [r0, #148]	@ 0x94
 8010172:	fb90 f0f3 	sdiv	r0, r0, r3
 8010176:	4770      	bx	lr
 8010178:	f9b0 0096 	ldrsh.w	r0, [r0, #150]	@ 0x96
 801017c:	e7f9      	b.n	8010172 <_ZNK8touchgfx6Slider18getIndicatorRadiusEv+0xc>

0801017e <_ZN8touchgfx6Slider13setValueRangeEsss>:
 801017e:	8642      	strh	r2, [r0, #50]	@ 0x32
 8010180:	6802      	ldr	r2, [r0, #0]
 8010182:	8601      	strh	r1, [r0, #48]	@ 0x30
 8010184:	4619      	mov	r1, r3
 8010186:	b410      	push	{r4}
 8010188:	f85d 4b04 	ldr.w	r4, [sp], #4
 801018c:	f8d2 20a8 	ldr.w	r2, [r2, #168]	@ 0xa8
 8010190:	4710      	bx	r2

08010192 <_ZN8touchgfx6Slider13setValueRangeEss>:
 8010192:	f9b0 302e 	ldrsh.w	r3, [r0, #46]	@ 0x2e
 8010196:	428b      	cmp	r3, r1
 8010198:	b410      	push	{r4}
 801019a:	db09      	blt.n	80101b0 <_ZN8touchgfx6Slider13setValueRangeEss+0x1e>
 801019c:	4293      	cmp	r3, r2
 801019e:	bfa8      	it	ge
 80101a0:	4613      	movge	r3, r2
 80101a2:	6804      	ldr	r4, [r0, #0]
 80101a4:	f8d4 4098 	ldr.w	r4, [r4, #152]	@ 0x98
 80101a8:	46a4      	mov	ip, r4
 80101aa:	f85d 4b04 	ldr.w	r4, [sp], #4
 80101ae:	4760      	bx	ip
 80101b0:	460b      	mov	r3, r1
 80101b2:	e7f6      	b.n	80101a2 <_ZN8touchgfx6Slider13setValueRangeEss+0x10>

080101b4 <_ZNK8touchgfx6Slider29getIndicatorPositionRangeSizeEv>:
 80101b4:	f9b0 20e6 	ldrsh.w	r2, [r0, #230]	@ 0xe6
 80101b8:	f9b0 00e4 	ldrsh.w	r0, [r0, #228]	@ 0xe4
 80101bc:	1a10      	subs	r0, r2, r0
 80101be:	4770      	bx	lr

080101c0 <_ZNK8touchgfx6Slider17getValueRangeSizeEv>:
 80101c0:	f9b0 2032 	ldrsh.w	r2, [r0, #50]	@ 0x32
 80101c4:	f9b0 0030 	ldrsh.w	r0, [r0, #48]	@ 0x30
 80101c8:	1a10      	subs	r0, r2, r0
 80101ca:	4770      	bx	lr

080101cc <_ZN8touchgfx6SliderD1Ev>:
 80101cc:	4770      	bx	lr

080101ce <_ZN8touchgfx6SliderD0Ev>:
 80101ce:	b510      	push	{r4, lr}
 80101d0:	4604      	mov	r4, r0
 80101d2:	21f4      	movs	r1, #244	@ 0xf4
 80101d4:	f017 f95b 	bl	802748e <_ZdlPvj>
 80101d8:	4620      	mov	r0, r4
 80101da:	bd10      	pop	{r4, pc}

080101dc <_ZNK8touchgfx6Slider15valueToPositionEi>:
 80101dc:	b570      	push	{r4, r5, r6, lr}
 80101de:	f9b0 5032 	ldrsh.w	r5, [r0, #50]	@ 0x32
 80101e2:	4604      	mov	r4, r0
 80101e4:	f9b0 3030 	ldrsh.w	r3, [r0, #48]	@ 0x30
 80101e8:	428d      	cmp	r5, r1
 80101ea:	bfa8      	it	ge
 80101ec:	460d      	movge	r5, r1
 80101ee:	429d      	cmp	r5, r3
 80101f0:	bfac      	ite	ge
 80101f2:	ebc3 0505 	rsbge	r5, r3, r5
 80101f6:	ebc3 0503 	rsblt	r5, r3, r3
 80101fa:	6803      	ldr	r3, [r0, #0]
 80101fc:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8010200:	4798      	blx	r3
 8010202:	6823      	ldr	r3, [r4, #0]
 8010204:	4606      	mov	r6, r0
 8010206:	4620      	mov	r0, r4
 8010208:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 801020c:	4798      	blx	r3
 801020e:	4631      	mov	r1, r6
 8010210:	4602      	mov	r2, r0
 8010212:	4628      	mov	r0, r5
 8010214:	f009 fc11 	bl	8019a3a <_ZN8touchgfx6muldivElll>
 8010218:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 801021c:	2b01      	cmp	r3, #1
 801021e:	bf0b      	itete	eq
 8010220:	f8b4 30e6 	ldrheq.w	r3, [r4, #230]	@ 0xe6
 8010224:	f8b4 30e4 	ldrhne.w	r3, [r4, #228]	@ 0xe4
 8010228:	1a18      	subeq	r0, r3, r0
 801022a:	18c0      	addne	r0, r0, r3
 801022c:	b200      	sxth	r0, r0
 801022e:	bd70      	pop	{r4, r5, r6, pc}

08010230 <_ZNK8touchgfx6Slider15positionToValueEs>:
 8010230:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010232:	f9b0 30e6 	ldrsh.w	r3, [r0, #230]	@ 0xe6
 8010236:	4605      	mov	r5, r0
 8010238:	f9b0 40e4 	ldrsh.w	r4, [r0, #228]	@ 0xe4
 801023c:	4299      	cmp	r1, r3
 801023e:	f890 202c 	ldrb.w	r2, [r0, #44]	@ 0x2c
 8010242:	f9b0 6030 	ldrsh.w	r6, [r0, #48]	@ 0x30
 8010246:	bfa8      	it	ge
 8010248:	4619      	movge	r1, r3
 801024a:	42a1      	cmp	r1, r4
 801024c:	bfb8      	it	lt
 801024e:	4621      	movlt	r1, r4
 8010250:	2a01      	cmp	r2, #1
 8010252:	b289      	uxth	r1, r1
 8010254:	bf08      	it	eq
 8010256:	1a5c      	subeq	r4, r3, r1
 8010258:	6803      	ldr	r3, [r0, #0]
 801025a:	bf18      	it	ne
 801025c:	1b0c      	subne	r4, r1, r4
 801025e:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8010262:	4798      	blx	r3
 8010264:	682b      	ldr	r3, [r5, #0]
 8010266:	4607      	mov	r7, r0
 8010268:	b224      	sxth	r4, r4
 801026a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 801026e:	4628      	mov	r0, r5
 8010270:	4798      	blx	r3
 8010272:	4639      	mov	r1, r7
 8010274:	4602      	mov	r2, r0
 8010276:	4620      	mov	r0, r4
 8010278:	f009 fbdf 	bl	8019a3a <_ZN8touchgfx6muldivElll>
 801027c:	4430      	add	r0, r6
 801027e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08010280 <_ZN8touchgfx6Slider16handleClickEventERKNS_10ClickEventE>:
 8010280:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010284:	790b      	ldrb	r3, [r1, #4]
 8010286:	4604      	mov	r4, r0
 8010288:	460d      	mov	r5, r1
 801028a:	b32b      	cbz	r3, 80102d8 <_ZN8touchgfx6Slider16handleClickEventERKNS_10ClickEventE+0x58>
 801028c:	2b01      	cmp	r3, #1
 801028e:	d137      	bne.n	8010300 <_ZN8touchgfx6Slider16handleClickEventERKNS_10ClickEventE+0x80>
 8010290:	6823      	ldr	r3, [r4, #0]
 8010292:	f894 202c 	ldrb.w	r2, [r4, #44]	@ 0x2c
 8010296:	f8d3 70ac 	ldr.w	r7, [r3, #172]	@ 0xac
 801029a:	2a00      	cmp	r2, #0
 801029c:	d12e      	bne.n	80102fc <_ZN8touchgfx6Slider16handleClickEventERKNS_10ClickEventE+0x7c>
 801029e:	88ee      	ldrh	r6, [r5, #6]
 80102a0:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80102a4:	4620      	mov	r0, r4
 80102a6:	4798      	blx	r3
 80102a8:	1a31      	subs	r1, r6, r0
 80102aa:	4620      	mov	r0, r4
 80102ac:	b209      	sxth	r1, r1
 80102ae:	47b8      	blx	r7
 80102b0:	792b      	ldrb	r3, [r5, #4]
 80102b2:	2b01      	cmp	r3, #1
 80102b4:	d124      	bne.n	8010300 <_ZN8touchgfx6Slider16handleClickEventERKNS_10ClickEventE+0x80>
 80102b6:	f8d4 00ec 	ldr.w	r0, [r4, #236]	@ 0xec
 80102ba:	b308      	cbz	r0, 8010300 <_ZN8touchgfx6Slider16handleClickEventERKNS_10ClickEventE+0x80>
 80102bc:	6803      	ldr	r3, [r0, #0]
 80102be:	68db      	ldr	r3, [r3, #12]
 80102c0:	4798      	blx	r3
 80102c2:	b1e8      	cbz	r0, 8010300 <_ZN8touchgfx6Slider16handleClickEventERKNS_10ClickEventE+0x80>
 80102c4:	f8d4 00ec 	ldr.w	r0, [r4, #236]	@ 0xec
 80102c8:	4621      	mov	r1, r4
 80102ca:	f9b4 202e 	ldrsh.w	r2, [r4, #46]	@ 0x2e
 80102ce:	6803      	ldr	r3, [r0, #0]
 80102d0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80102d4:	689b      	ldr	r3, [r3, #8]
 80102d6:	4718      	bx	r3
 80102d8:	f8d0 00e8 	ldr.w	r0, [r0, #232]	@ 0xe8
 80102dc:	2800      	cmp	r0, #0
 80102de:	d0d7      	beq.n	8010290 <_ZN8touchgfx6Slider16handleClickEventERKNS_10ClickEventE+0x10>
 80102e0:	6803      	ldr	r3, [r0, #0]
 80102e2:	68db      	ldr	r3, [r3, #12]
 80102e4:	4798      	blx	r3
 80102e6:	2800      	cmp	r0, #0
 80102e8:	d0d2      	beq.n	8010290 <_ZN8touchgfx6Slider16handleClickEventERKNS_10ClickEventE+0x10>
 80102ea:	f8d4 00e8 	ldr.w	r0, [r4, #232]	@ 0xe8
 80102ee:	4621      	mov	r1, r4
 80102f0:	f9b4 202e 	ldrsh.w	r2, [r4, #46]	@ 0x2e
 80102f4:	6803      	ldr	r3, [r0, #0]
 80102f6:	689b      	ldr	r3, [r3, #8]
 80102f8:	4798      	blx	r3
 80102fa:	e7c9      	b.n	8010290 <_ZN8touchgfx6Slider16handleClickEventERKNS_10ClickEventE+0x10>
 80102fc:	892e      	ldrh	r6, [r5, #8]
 80102fe:	e7cf      	b.n	80102a0 <_ZN8touchgfx6Slider16handleClickEventERKNS_10ClickEventE+0x20>
 8010300:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08010304 <_ZN8touchgfx6Slider23updateIndicatorPositionEs>:
 8010304:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010308:	f9b0 80e4 	ldrsh.w	r8, [r0, #228]	@ 0xe4
 801030c:	4604      	mov	r4, r0
 801030e:	308c      	adds	r0, #140	@ 0x8c
 8010310:	4588      	cmp	r8, r1
 8010312:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 8010316:	f104 06b8 	add.w	r6, r4, #184	@ 0xb8
 801031a:	bfb8      	it	lt
 801031c:	4688      	movlt	r8, r1
 801031e:	f9b0 105a 	ldrsh.w	r1, [r0, #90]	@ 0x5a
 8010322:	4588      	cmp	r8, r1
 8010324:	bfa8      	it	ge
 8010326:	4688      	movge	r8, r1
 8010328:	fa1f f788 	uxth.w	r7, r8
 801032c:	2b00      	cmp	r3, #0
 801032e:	d130      	bne.n	8010392 <_ZN8touchgfx6Slider23updateIndicatorPositionEs+0x8e>
 8010330:	f9b4 2092 	ldrsh.w	r2, [r4, #146]	@ 0x92
 8010334:	4641      	mov	r1, r8
 8010336:	f7f2 ff7a 	bl	800322e <_ZN8touchgfx8Drawable6moveToEss>
 801033a:	4630      	mov	r0, r6
 801033c:	f008 fe6d 	bl	801901a <_ZNK8touchgfx8Drawable10invalidateEv>
 8010340:	f8b4 20bc 	ldrh.w	r2, [r4, #188]	@ 0xbc
 8010344:	6823      	ldr	r3, [r4, #0]
 8010346:	4620      	mov	r0, r4
 8010348:	1abf      	subs	r7, r7, r2
 801034a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 801034e:	b2bf      	uxth	r7, r7
 8010350:	4798      	blx	r3
 8010352:	4407      	add	r7, r0
 8010354:	f8a4 70c0 	strh.w	r7, [r4, #192]	@ 0xc0
 8010358:	4630      	mov	r0, r6
 801035a:	f008 fe5e 	bl	801901a <_ZNK8touchgfx8Drawable10invalidateEv>
 801035e:	6823      	ldr	r3, [r4, #0]
 8010360:	4641      	mov	r1, r8
 8010362:	4620      	mov	r0, r4
 8010364:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8010368:	4798      	blx	r3
 801036a:	85e0      	strh	r0, [r4, #46]	@ 0x2e
 801036c:	f8d4 00f0 	ldr.w	r0, [r4, #240]	@ 0xf0
 8010370:	2800      	cmp	r0, #0
 8010372:	d03c      	beq.n	80103ee <_ZN8touchgfx6Slider23updateIndicatorPositionEs+0xea>
 8010374:	6803      	ldr	r3, [r0, #0]
 8010376:	68db      	ldr	r3, [r3, #12]
 8010378:	4798      	blx	r3
 801037a:	2800      	cmp	r0, #0
 801037c:	d037      	beq.n	80103ee <_ZN8touchgfx6Slider23updateIndicatorPositionEs+0xea>
 801037e:	f8d4 00f0 	ldr.w	r0, [r4, #240]	@ 0xf0
 8010382:	4621      	mov	r1, r4
 8010384:	f9b4 202e 	ldrsh.w	r2, [r4, #46]	@ 0x2e
 8010388:	6803      	ldr	r3, [r0, #0]
 801038a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801038e:	689b      	ldr	r3, [r3, #8]
 8010390:	4718      	bx	r3
 8010392:	4642      	mov	r2, r8
 8010394:	f9b4 1090 	ldrsh.w	r1, [r4, #144]	@ 0x90
 8010398:	f7f2 ff49 	bl	800322e <_ZN8touchgfx8Drawable6moveToEss>
 801039c:	4630      	mov	r0, r6
 801039e:	f008 fe3c 	bl	801901a <_ZNK8touchgfx8Drawable10invalidateEv>
 80103a2:	8f60      	ldrh	r0, [r4, #58]	@ 0x3a
 80103a4:	8fe5      	ldrh	r5, [r4, #62]	@ 0x3e
 80103a6:	6823      	ldr	r3, [r4, #0]
 80103a8:	4405      	add	r5, r0
 80103aa:	4620      	mov	r0, r4
 80103ac:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80103b0:	b2ad      	uxth	r5, r5
 80103b2:	4798      	blx	r3
 80103b4:	6823      	ldr	r3, [r4, #0]
 80103b6:	1bed      	subs	r5, r5, r7
 80103b8:	f9b4 a0bc 	ldrsh.w	sl, [r4, #188]	@ 0xbc
 80103bc:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80103c0:	1a2d      	subs	r5, r5, r0
 80103c2:	4620      	mov	r0, r4
 80103c4:	4798      	blx	r3
 80103c6:	4438      	add	r0, r7
 80103c8:	b2ad      	uxth	r5, r5
 80103ca:	f9b4 90c0 	ldrsh.w	r9, [r4, #192]	@ 0xc0
 80103ce:	b202      	sxth	r2, r0
 80103d0:	4651      	mov	r1, sl
 80103d2:	4630      	mov	r0, r6
 80103d4:	f7f3 fe51 	bl	800407a <_ZN8touchgfx8Drawable5setXYEss>
 80103d8:	4630      	mov	r0, r6
 80103da:	b22a      	sxth	r2, r5
 80103dc:	4649      	mov	r1, r9
 80103de:	f7ff f9a3 	bl	800f728 <_ZN8touchgfx8Drawable14setWidthHeightEss>
 80103e2:	f8b4 006a 	ldrh.w	r0, [r4, #106]	@ 0x6a
 80103e6:	1a2d      	subs	r5, r5, r0
 80103e8:	f8a4 5066 	strh.w	r5, [r4, #102]	@ 0x66
 80103ec:	e7b4      	b.n	8010358 <_ZN8touchgfx6Slider23updateIndicatorPositionEs+0x54>
 80103ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080103f2 <_ZN8touchgfx8Drawable11setPositionERKS0_>:
 80103f2:	b570      	push	{r4, r5, r6, lr}
 80103f4:	4604      	mov	r4, r0
 80103f6:	f9b1 5008 	ldrsh.w	r5, [r1, #8]
 80103fa:	f9b1 600a 	ldrsh.w	r6, [r1, #10]
 80103fe:	f9b1 2006 	ldrsh.w	r2, [r1, #6]
 8010402:	f9b1 1004 	ldrsh.w	r1, [r1, #4]
 8010406:	f7f3 fe38 	bl	800407a <_ZN8touchgfx8Drawable5setXYEss>
 801040a:	4632      	mov	r2, r6
 801040c:	4629      	mov	r1, r5
 801040e:	4620      	mov	r0, r4
 8010410:	f7ff f98a 	bl	800f728 <_ZN8touchgfx8Drawable14setWidthHeightEss>
 8010414:	bd70      	pop	{r4, r5, r6, pc}

08010416 <_ZN8touchgfx6Slider21setupHorizontalSliderEsssss>:
 8010416:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801041a:	f04f 0a00 	mov.w	sl, #0
 801041e:	f100 0b34 	add.w	fp, r0, #52	@ 0x34
 8010422:	4604      	mov	r4, r0
 8010424:	461d      	mov	r5, r3
 8010426:	f880 a02c 	strb.w	sl, [r0, #44]	@ 0x2c
 801042a:	4658      	mov	r0, fp
 801042c:	4690      	mov	r8, r2
 801042e:	f9bd 602c 	ldrsh.w	r6, [sp, #44]	@ 0x2c
 8010432:	4689      	mov	r9, r1
 8010434:	f9bd 7028 	ldrsh.w	r7, [sp, #40]	@ 0x28
 8010438:	f7f3 fe1f 	bl	800407a <_ZN8touchgfx8Drawable5setXYEss>
 801043c:	4659      	mov	r1, fp
 801043e:	f104 00b8 	add.w	r0, r4, #184	@ 0xb8
 8010442:	f7ff ffd6 	bl	80103f2 <_ZN8touchgfx8Drawable11setPositionERKS0_>
 8010446:	4652      	mov	r2, sl
 8010448:	4651      	mov	r1, sl
 801044a:	f104 0060 	add.w	r0, r4, #96	@ 0x60
 801044e:	f7f3 fe14 	bl	800407a <_ZN8touchgfx8Drawable5setXYEss>
 8010452:	8fe2      	ldrh	r2, [r4, #62]	@ 0x3e
 8010454:	8fa1      	ldrh	r1, [r4, #60]	@ 0x3c
 8010456:	4620      	mov	r0, r4
 8010458:	4490      	add	r8, r2
 801045a:	f8b4 2096 	ldrh.w	r2, [r4, #150]	@ 0x96
 801045e:	f8a4 5092 	strh.w	r5, [r4, #146]	@ 0x92
 8010462:	4489      	add	r9, r1
 8010464:	4415      	add	r5, r2
 8010466:	f8b4 1094 	ldrh.w	r1, [r4, #148]	@ 0x94
 801046a:	fa0f f288 	sxth.w	r2, r8
 801046e:	f8a4 70e4 	strh.w	r7, [r4, #228]	@ 0xe4
 8010472:	1873      	adds	r3, r6, r1
 8010474:	b22d      	sxth	r5, r5
 8010476:	fa0f f989 	sxth.w	r9, r9
 801047a:	f8a4 60e6 	strh.w	r6, [r4, #230]	@ 0xe6
 801047e:	b219      	sxth	r1, r3
 8010480:	42aa      	cmp	r2, r5
 8010482:	bfb8      	it	lt
 8010484:	462a      	movlt	r2, r5
 8010486:	4549      	cmp	r1, r9
 8010488:	bfb8      	it	lt
 801048a:	4649      	movlt	r1, r9
 801048c:	f7ff f94c 	bl	800f728 <_ZN8touchgfx8Drawable14setWidthHeightEss>
 8010490:	6823      	ldr	r3, [r4, #0]
 8010492:	f9b4 102e 	ldrsh.w	r1, [r4, #46]	@ 0x2e
 8010496:	4620      	mov	r0, r4
 8010498:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 801049c:	b001      	add	sp, #4
 801049e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80104a2:	4718      	bx	r3

080104a4 <_ZN8touchgfx6Slider19setupVerticalSliderEsssss>:
 80104a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80104a8:	461d      	mov	r5, r3
 80104aa:	f100 0a34 	add.w	sl, r0, #52	@ 0x34
 80104ae:	2301      	movs	r3, #1
 80104b0:	4604      	mov	r4, r0
 80104b2:	4617      	mov	r7, r2
 80104b4:	f9bd 8024 	ldrsh.w	r8, [sp, #36]	@ 0x24
 80104b8:	f880 302c 	strb.w	r3, [r0, #44]	@ 0x2c
 80104bc:	4650      	mov	r0, sl
 80104be:	460e      	mov	r6, r1
 80104c0:	f9bd 9020 	ldrsh.w	r9, [sp, #32]
 80104c4:	f7f3 fdd9 	bl	800407a <_ZN8touchgfx8Drawable5setXYEss>
 80104c8:	4651      	mov	r1, sl
 80104ca:	f104 00b8 	add.w	r0, r4, #184	@ 0xb8
 80104ce:	f7ff ff90 	bl	80103f2 <_ZN8touchgfx8Drawable11setPositionERKS0_>
 80104d2:	8fa1      	ldrh	r1, [r4, #60]	@ 0x3c
 80104d4:	8fe2      	ldrh	r2, [r4, #62]	@ 0x3e
 80104d6:	4620      	mov	r0, r4
 80104d8:	f8b4 3096 	ldrh.w	r3, [r4, #150]	@ 0x96
 80104dc:	440e      	add	r6, r1
 80104de:	443a      	add	r2, r7
 80104e0:	f8b4 1094 	ldrh.w	r1, [r4, #148]	@ 0x94
 80104e4:	4443      	add	r3, r8
 80104e6:	f8a4 5090 	strh.w	r5, [r4, #144]	@ 0x90
 80104ea:	b212      	sxth	r2, r2
 80104ec:	440d      	add	r5, r1
 80104ee:	b21b      	sxth	r3, r3
 80104f0:	f8a4 90e4 	strh.w	r9, [r4, #228]	@ 0xe4
 80104f4:	b231      	sxth	r1, r6
 80104f6:	f8a4 80e6 	strh.w	r8, [r4, #230]	@ 0xe6
 80104fa:	429a      	cmp	r2, r3
 80104fc:	b22d      	sxth	r5, r5
 80104fe:	bfb8      	it	lt
 8010500:	461a      	movlt	r2, r3
 8010502:	42a9      	cmp	r1, r5
 8010504:	bfb8      	it	lt
 8010506:	4629      	movlt	r1, r5
 8010508:	f7ff f90e 	bl	800f728 <_ZN8touchgfx8Drawable14setWidthHeightEss>
 801050c:	6823      	ldr	r3, [r4, #0]
 801050e:	f9b4 102e 	ldrsh.w	r1, [r4, #46]	@ 0x2e
 8010512:	4620      	mov	r0, r4
 8010514:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8010518:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801051c:	4718      	bx	r3
	...

08010520 <_ZN8touchgfx6SliderC1Ev>:
 8010520:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8010524:	4604      	mov	r4, r0
 8010526:	f7ff f8e7 	bl	800f6f8 <_ZN8touchgfx8DrawableC1Ev>
 801052a:	4b28      	ldr	r3, [pc, #160]	@ (80105cc <_ZN8touchgfx6SliderC1Ev+0xac>)
 801052c:	2500      	movs	r5, #0
 801052e:	ae02      	add	r6, sp, #8
 8010530:	f64f 77ff 	movw	r7, #65535	@ 0xffff
 8010534:	6023      	str	r3, [r4, #0]
 8010536:	f104 0934 	add.w	r9, r4, #52	@ 0x34
 801053a:	2364      	movs	r3, #100	@ 0x64
 801053c:	f104 0a60 	add.w	sl, r4, #96	@ 0x60
 8010540:	f826 7d04 	strh.w	r7, [r6, #-4]!
 8010544:	4648      	mov	r0, r9
 8010546:	8663      	strh	r3, [r4, #50]	@ 0x32
 8010548:	4631      	mov	r1, r6
 801054a:	62a5      	str	r5, [r4, #40]	@ 0x28
 801054c:	f104 088c 	add.w	r8, r4, #140	@ 0x8c
 8010550:	f884 502c 	strb.w	r5, [r4, #44]	@ 0x2c
 8010554:	85e5      	strh	r5, [r4, #46]	@ 0x2e
 8010556:	8625      	strh	r5, [r4, #48]	@ 0x30
 8010558:	f7f4 fa0c 	bl	8004974 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 801055c:	4631      	mov	r1, r6
 801055e:	4650      	mov	r0, sl
 8010560:	f8ad 7004 	strh.w	r7, [sp, #4]
 8010564:	f7f4 fa06 	bl	8004974 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 8010568:	4631      	mov	r1, r6
 801056a:	f104 06b8 	add.w	r6, r4, #184	@ 0xb8
 801056e:	4640      	mov	r0, r8
 8010570:	f8ad 7004 	strh.w	r7, [sp, #4]
 8010574:	f7f4 f9fe 	bl	8004974 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 8010578:	4630      	mov	r0, r6
 801057a:	f7ff f8bd 	bl	800f6f8 <_ZN8touchgfx8DrawableC1Ev>
 801057e:	4b14      	ldr	r3, [pc, #80]	@ (80105d0 <_ZN8touchgfx6SliderC1Ev+0xb0>)
 8010580:	4651      	mov	r1, sl
 8010582:	4630      	mov	r0, r6
 8010584:	f8c4 30b8 	str.w	r3, [r4, #184]	@ 0xb8
 8010588:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 801058c:	f8c4 50e0 	str.w	r5, [r4, #224]	@ 0xe0
 8010590:	e9c4 3539 	strd	r3, r5, [r4, #228]	@ 0xe4
 8010594:	2301      	movs	r3, #1
 8010596:	e9c4 553b 	strd	r5, r5, [r4, #236]	@ 0xec
 801059a:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
 801059e:	f7ff fb2a 	bl	800fbf6 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 80105a2:	4649      	mov	r1, r9
 80105a4:	4620      	mov	r0, r4
 80105a6:	f7ff fb26 	bl	800fbf6 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 80105aa:	4631      	mov	r1, r6
 80105ac:	4620      	mov	r0, r4
 80105ae:	f7ff fb22 	bl	800fbf6 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 80105b2:	4641      	mov	r1, r8
 80105b4:	4620      	mov	r0, r4
 80105b6:	f7ff fb1e 	bl	800fbf6 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 80105ba:	4620      	mov	r0, r4
 80105bc:	f9b4 10e4 	ldrsh.w	r1, [r4, #228]	@ 0xe4
 80105c0:	f7ff fea0 	bl	8010304 <_ZN8touchgfx6Slider23updateIndicatorPositionEs>
 80105c4:	4620      	mov	r0, r4
 80105c6:	b002      	add	sp, #8
 80105c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80105cc:	0802c79c 	.word	0x0802c79c
 80105d0:	0802c70c 	.word	0x0802c70c

080105d4 <_ZN8touchgfx6Slider10setBitmapsERKNS_6BitmapES3_S3_>:
 80105d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80105d8:	4604      	mov	r4, r0
 80105da:	f100 0634 	add.w	r6, r0, #52	@ 0x34
 80105de:	4689      	mov	r9, r1
 80105e0:	461f      	mov	r7, r3
 80105e2:	f104 058c 	add.w	r5, r4, #140	@ 0x8c
 80105e6:	4630      	mov	r0, r6
 80105e8:	4690      	mov	r8, r2
 80105ea:	f008 fd16 	bl	801901a <_ZNK8touchgfx8Drawable10invalidateEv>
 80105ee:	4628      	mov	r0, r5
 80105f0:	f008 fd13 	bl	801901a <_ZNK8touchgfx8Drawable10invalidateEv>
 80105f4:	4649      	mov	r1, r9
 80105f6:	4630      	mov	r0, r6
 80105f8:	f004 ff23 	bl	8015442 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 80105fc:	4641      	mov	r1, r8
 80105fe:	f104 0060 	add.w	r0, r4, #96	@ 0x60
 8010602:	f004 ff1e 	bl	8015442 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 8010606:	4639      	mov	r1, r7
 8010608:	4628      	mov	r0, r5
 801060a:	f004 ff1a 	bl	8015442 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 801060e:	f9b4 206a 	ldrsh.w	r2, [r4, #106]	@ 0x6a
 8010612:	f9b4 1068 	ldrsh.w	r1, [r4, #104]	@ 0x68
 8010616:	f104 00b8 	add.w	r0, r4, #184	@ 0xb8
 801061a:	f7ff f885 	bl	800f728 <_ZN8touchgfx8Drawable14setWidthHeightEss>
 801061e:	6823      	ldr	r3, [r4, #0]
 8010620:	f9b4 102e 	ldrsh.w	r1, [r4, #46]	@ 0x2e
 8010624:	4620      	mov	r0, r4
 8010626:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 801062a:	4798      	blx	r3
 801062c:	4630      	mov	r0, r6
 801062e:	f008 fcf4 	bl	801901a <_ZNK8touchgfx8Drawable10invalidateEv>
 8010632:	4628      	mov	r0, r5
 8010634:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010638:	f008 bcef 	b.w	801901a <_ZNK8touchgfx8Drawable10invalidateEv>

0801063c <_ZN8touchgfx14SwipeContainer14setSwipeCutoffEt>:
 801063c:	85c1      	strh	r1, [r0, #46]	@ 0x2e
 801063e:	4770      	bx	lr

08010640 <_ZN8touchgfx14SwipeContainer13PageIndicatorD1Ev>:
 8010640:	4770      	bx	lr

08010642 <_ZN8touchgfx14SwipeContainer13PageIndicatorD0Ev>:
 8010642:	b510      	push	{r4, lr}
 8010644:	4604      	mov	r4, r0
 8010646:	218c      	movs	r1, #140	@ 0x8c
 8010648:	f016 ff21 	bl	802748e <_ZdlPvj>
 801064c:	4620      	mov	r0, r4
 801064e:	bd10      	pop	{r4, pc}

08010650 <_ZN8touchgfx14SwipeContainerD1Ev>:
 8010650:	4b05      	ldr	r3, [pc, #20]	@ (8010668 <_ZN8touchgfx14SwipeContainerD1Ev+0x18>)
 8010652:	b510      	push	{r4, lr}
 8010654:	4604      	mov	r4, r0
 8010656:	6003      	str	r3, [r0, #0]
 8010658:	f007 fbf4 	bl	8017e44 <_ZN8touchgfx11Application11getInstanceEv>
 801065c:	3004      	adds	r0, #4
 801065e:	4621      	mov	r1, r4
 8010660:	f007 fc3d 	bl	8017ede <_ZN8touchgfx11Application12TimerWidgets6removeEPKNS_8DrawableE>
 8010664:	4620      	mov	r0, r4
 8010666:	bd10      	pop	{r4, pc}
 8010668:	0802c8f8 	.word	0x0802c8f8

0801066c <_ZN8touchgfx14SwipeContainerD0Ev>:
 801066c:	b510      	push	{r4, lr}
 801066e:	4604      	mov	r4, r0
 8010670:	f7ff ffee 	bl	8010650 <_ZN8touchgfx14SwipeContainerD1Ev>
 8010674:	21f8      	movs	r1, #248	@ 0xf8
 8010676:	4620      	mov	r0, r4
 8010678:	f016 ff09 	bl	802748e <_ZdlPvj>
 801067c:	4620      	mov	r0, r4
 801067e:	bd10      	pop	{r4, pc}

08010680 <_ZN8touchgfx14SwipeContainer16handleClickEventERKNS_10ClickEventE>:
 8010680:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
 8010684:	2b07      	cmp	r3, #7
 8010686:	d118      	bne.n	80106ba <_ZN8touchgfx14SwipeContainer16handleClickEventERKNS_10ClickEventE+0x3a>
 8010688:	790b      	ldrb	r3, [r1, #4]
 801068a:	2b01      	cmp	r3, #1
 801068c:	d115      	bne.n	80106ba <_ZN8touchgfx14SwipeContainer16handleClickEventERKNS_10ClickEventE+0x3a>
 801068e:	f9b0 3030 	ldrsh.w	r3, [r0, #48]	@ 0x30
 8010692:	f8b0 2040 	ldrh.w	r2, [r0, #64]	@ 0x40
 8010696:	2b00      	cmp	r3, #0
 8010698:	8643      	strh	r3, [r0, #50]	@ 0x32
 801069a:	8682      	strh	r2, [r0, #52]	@ 0x34
 801069c:	f890 10f5 	ldrb.w	r1, [r0, #245]	@ 0xf5
 80106a0:	da0e      	bge.n	80106c0 <_ZN8touchgfx14SwipeContainer16handleClickEventERKNS_10ClickEventE+0x40>
 80106a2:	f890 20f4 	ldrb.w	r2, [r0, #244]	@ 0xf4
 80106a6:	3a01      	subs	r2, #1
 80106a8:	4291      	cmp	r1, r2
 80106aa:	d007      	beq.n	80106bc <_ZN8touchgfx14SwipeContainer16handleClickEventERKNS_10ClickEventE+0x3c>
 80106ac:	8dc2      	ldrh	r2, [r0, #46]	@ 0x2e
 80106ae:	4252      	negs	r2, r2
 80106b0:	4293      	cmp	r3, r2
 80106b2:	dc03      	bgt.n	80106bc <_ZN8touchgfx14SwipeContainer16handleClickEventERKNS_10ClickEventE+0x3c>
 80106b4:	2302      	movs	r3, #2
 80106b6:	f880 302c 	strb.w	r3, [r0, #44]	@ 0x2c
 80106ba:	4770      	bx	lr
 80106bc:	2300      	movs	r3, #0
 80106be:	e7fa      	b.n	80106b6 <_ZN8touchgfx14SwipeContainer16handleClickEventERKNS_10ClickEventE+0x36>
 80106c0:	d0fb      	beq.n	80106ba <_ZN8touchgfx14SwipeContainer16handleClickEventERKNS_10ClickEventE+0x3a>
 80106c2:	b111      	cbz	r1, 80106ca <_ZN8touchgfx14SwipeContainer16handleClickEventERKNS_10ClickEventE+0x4a>
 80106c4:	8dc2      	ldrh	r2, [r0, #46]	@ 0x2e
 80106c6:	4293      	cmp	r3, r2
 80106c8:	da01      	bge.n	80106ce <_ZN8touchgfx14SwipeContainer16handleClickEventERKNS_10ClickEventE+0x4e>
 80106ca:	2301      	movs	r3, #1
 80106cc:	e7f3      	b.n	80106b6 <_ZN8touchgfx14SwipeContainer16handleClickEventERKNS_10ClickEventE+0x36>
 80106ce:	2303      	movs	r3, #3
 80106d0:	e7f1      	b.n	80106b6 <_ZN8touchgfx14SwipeContainer16handleClickEventERKNS_10ClickEventE+0x36>

080106d2 <_ZN8touchgfx14SwipeContainer18handleGestureEventERKNS_12GestureEventE>:
 80106d2:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
 80106d6:	2b07      	cmp	r3, #7
 80106d8:	d114      	bne.n	8010704 <_ZN8touchgfx14SwipeContainer18handleGestureEventERKNS_12GestureEventE+0x32>
 80106da:	790b      	ldrb	r3, [r1, #4]
 80106dc:	b993      	cbnz	r3, 8010704 <_ZN8touchgfx14SwipeContainer18handleGestureEventERKNS_12GestureEventE+0x32>
 80106de:	8e03      	ldrh	r3, [r0, #48]	@ 0x30
 80106e0:	f890 20f5 	ldrb.w	r2, [r0, #245]	@ 0xf5
 80106e4:	8643      	strh	r3, [r0, #50]	@ 0x32
 80106e6:	f8b0 3040 	ldrh.w	r3, [r0, #64]	@ 0x40
 80106ea:	8683      	strh	r3, [r0, #52]	@ 0x34
 80106ec:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 80106f0:	2b00      	cmp	r3, #0
 80106f2:	da08      	bge.n	8010706 <_ZN8touchgfx14SwipeContainer18handleGestureEventERKNS_12GestureEventE+0x34>
 80106f4:	f890 30f4 	ldrb.w	r3, [r0, #244]	@ 0xf4
 80106f8:	3b01      	subs	r3, #1
 80106fa:	429a      	cmp	r2, r3
 80106fc:	da02      	bge.n	8010704 <_ZN8touchgfx14SwipeContainer18handleGestureEventERKNS_12GestureEventE+0x32>
 80106fe:	2302      	movs	r3, #2
 8010700:	f880 302c 	strb.w	r3, [r0, #44]	@ 0x2c
 8010704:	4770      	bx	lr
 8010706:	d0fd      	beq.n	8010704 <_ZN8touchgfx14SwipeContainer18handleGestureEventERKNS_12GestureEventE+0x32>
 8010708:	2a00      	cmp	r2, #0
 801070a:	d0fb      	beq.n	8010704 <_ZN8touchgfx14SwipeContainer18handleGestureEventERKNS_12GestureEventE+0x32>
 801070c:	2303      	movs	r3, #3
 801070e:	e7f7      	b.n	8010700 <_ZN8touchgfx14SwipeContainer18handleGestureEventERKNS_12GestureEventE+0x2e>

08010710 <_ZN8touchgfx14SwipeContainer23setEndSwipeElasticWidthEt>:
 8010710:	86c1      	strh	r1, [r0, #54]	@ 0x36
 8010712:	4770      	bx	lr

08010714 <_ZN8touchgfx14SwipeContainer18setPageIndicatorXYEss>:
 8010714:	b508      	push	{r3, lr}
 8010716:	306c      	adds	r0, #108	@ 0x6c
 8010718:	f7f3 fcaf 	bl	800407a <_ZN8touchgfx8Drawable5setXYEss>
 801071c:	bd08      	pop	{r3, pc}

0801071e <_ZN8touchgfx14SwipeContainer11adjustPagesEv>:
 801071e:	b508      	push	{r3, lr}
 8010720:	8e02      	ldrh	r2, [r0, #48]	@ 0x30
 8010722:	303c      	adds	r0, #60	@ 0x3c
 8010724:	f890 10b9 	ldrb.w	r1, [r0, #185]	@ 0xb9
 8010728:	f930 3c34 	ldrsh.w	r3, [r0, #-52]
 801072c:	fb03 2111 	mls	r1, r3, r1, r2
 8010730:	2200      	movs	r2, #0
 8010732:	b209      	sxth	r1, r1
 8010734:	f7f2 fd7b 	bl	800322e <_ZN8touchgfx8Drawable6moveToEss>
 8010738:	bd08      	pop	{r3, pc}

0801073a <_ZN8touchgfx14SwipeContainer15handleDragEventERKNS_9DragEventE>:
 801073a:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
 801073e:	2b07      	cmp	r3, #7
 8010740:	d119      	bne.n	8010776 <_ZN8touchgfx14SwipeContainer15handleDragEventERKNS_9DragEventE+0x3c>
 8010742:	88ca      	ldrh	r2, [r1, #6]
 8010744:	8e03      	ldrh	r3, [r0, #48]	@ 0x30
 8010746:	1a9b      	subs	r3, r3, r2
 8010748:	894a      	ldrh	r2, [r1, #10]
 801074a:	f890 10f5 	ldrb.w	r1, [r0, #245]	@ 0xf5
 801074e:	4413      	add	r3, r2
 8010750:	b21b      	sxth	r3, r3
 8010752:	8603      	strh	r3, [r0, #48]	@ 0x30
 8010754:	b921      	cbnz	r1, 8010760 <_ZN8touchgfx14SwipeContainer15handleDragEventERKNS_9DragEventE+0x26>
 8010756:	8ec2      	ldrh	r2, [r0, #54]	@ 0x36
 8010758:	4293      	cmp	r3, r2
 801075a:	dd01      	ble.n	8010760 <_ZN8touchgfx14SwipeContainer15handleDragEventERKNS_9DragEventE+0x26>
 801075c:	8602      	strh	r2, [r0, #48]	@ 0x30
 801075e:	e008      	b.n	8010772 <_ZN8touchgfx14SwipeContainer15handleDragEventERKNS_9DragEventE+0x38>
 8010760:	f890 20f4 	ldrb.w	r2, [r0, #244]	@ 0xf4
 8010764:	3a01      	subs	r2, #1
 8010766:	4291      	cmp	r1, r2
 8010768:	d103      	bne.n	8010772 <_ZN8touchgfx14SwipeContainer15handleDragEventERKNS_9DragEventE+0x38>
 801076a:	8ec2      	ldrh	r2, [r0, #54]	@ 0x36
 801076c:	4252      	negs	r2, r2
 801076e:	4293      	cmp	r3, r2
 8010770:	dbf4      	blt.n	801075c <_ZN8touchgfx14SwipeContainer15handleDragEventERKNS_9DragEventE+0x22>
 8010772:	f7ff bfd4 	b.w	801071e <_ZN8touchgfx14SwipeContainer11adjustPagesEv>
 8010776:	4770      	bx	lr

08010778 <_ZN8touchgfx14SwipeContainer25animateSwipeCancelledLeftEv>:
 8010778:	b538      	push	{r3, r4, r5, lr}
 801077a:	f890 502d 	ldrb.w	r5, [r0, #45]	@ 0x2d
 801077e:	4604      	mov	r4, r0
 8010780:	2d0e      	cmp	r5, #14
 8010782:	d813      	bhi.n	80107ac <_ZN8touchgfx14SwipeContainer25animateSwipeCancelledLeftEv+0x34>
 8010784:	8e42      	ldrh	r2, [r0, #50]	@ 0x32
 8010786:	230e      	movs	r3, #14
 8010788:	2100      	movs	r1, #0
 801078a:	4628      	mov	r0, r5
 801078c:	4252      	negs	r2, r2
 801078e:	b212      	sxth	r2, r2
 8010790:	f009 fcb0 	bl	801a0f4 <_ZN8touchgfx15EasingEquations11backEaseOutEtsst>
 8010794:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 8010796:	4418      	add	r0, r3
 8010798:	8620      	strh	r0, [r4, #48]	@ 0x30
 801079a:	4620      	mov	r0, r4
 801079c:	f7ff ffbf 	bl	801071e <_ZN8touchgfx14SwipeContainer11adjustPagesEv>
 80107a0:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 80107a4:	3301      	adds	r3, #1
 80107a6:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 80107aa:	bd38      	pop	{r3, r4, r5, pc}
 80107ac:	2307      	movs	r3, #7
 80107ae:	f880 302c 	strb.w	r3, [r0, #44]	@ 0x2c
 80107b2:	2300      	movs	r3, #0
 80107b4:	f880 302d 	strb.w	r3, [r0, #45]	@ 0x2d
 80107b8:	8603      	strh	r3, [r0, #48]	@ 0x30
 80107ba:	e7ef      	b.n	801079c <_ZN8touchgfx14SwipeContainer25animateSwipeCancelledLeftEv+0x24>

080107bc <_ZN8touchgfx14SwipeContainer26animateSwipeCancelledRightEv>:
 80107bc:	b538      	push	{r3, r4, r5, lr}
 80107be:	f890 502d 	ldrb.w	r5, [r0, #45]	@ 0x2d
 80107c2:	4604      	mov	r4, r0
 80107c4:	2d0e      	cmp	r5, #14
 80107c6:	d812      	bhi.n	80107ee <_ZN8touchgfx14SwipeContainer26animateSwipeCancelledRightEv+0x32>
 80107c8:	230e      	movs	r3, #14
 80107ca:	f9b0 2032 	ldrsh.w	r2, [r0, #50]	@ 0x32
 80107ce:	2100      	movs	r1, #0
 80107d0:	4628      	mov	r0, r5
 80107d2:	f009 fc8f 	bl	801a0f4 <_ZN8touchgfx15EasingEquations11backEaseOutEtsst>
 80107d6:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 80107d8:	1a18      	subs	r0, r3, r0
 80107da:	8620      	strh	r0, [r4, #48]	@ 0x30
 80107dc:	4620      	mov	r0, r4
 80107de:	f7ff ff9e 	bl	801071e <_ZN8touchgfx14SwipeContainer11adjustPagesEv>
 80107e2:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 80107e6:	3301      	adds	r3, #1
 80107e8:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 80107ec:	bd38      	pop	{r3, r4, r5, pc}
 80107ee:	2307      	movs	r3, #7
 80107f0:	f880 302c 	strb.w	r3, [r0, #44]	@ 0x2c
 80107f4:	2300      	movs	r3, #0
 80107f6:	f880 302d 	strb.w	r3, [r0, #45]	@ 0x2d
 80107fa:	8603      	strh	r3, [r0, #48]	@ 0x30
 80107fc:	e7ef      	b.n	80107de <_ZN8touchgfx14SwipeContainer26animateSwipeCancelledRightEv+0x22>
	...

08010800 <_ZN8touchgfx14SwipeContainer13PageIndicatorC1Ev>:
 8010800:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8010804:	4604      	mov	r4, r0
 8010806:	2500      	movs	r5, #0
 8010808:	f7fe ff76 	bl	800f6f8 <_ZN8touchgfx8DrawableC1Ev>
 801080c:	af02      	add	r7, sp, #8
 801080e:	4626      	mov	r6, r4
 8010810:	4b18      	ldr	r3, [pc, #96]	@ (8010874 <_ZN8touchgfx14SwipeContainer13PageIndicatorC1Ev+0x74>)
 8010812:	f64f 79ff 	movw	r9, #65535	@ 0xffff
 8010816:	62a5      	str	r5, [r4, #40]	@ 0x28
 8010818:	f846 3b2c 	str.w	r3, [r6], #44
 801081c:	4630      	mov	r0, r6
 801081e:	f827 9d04 	strh.w	r9, [r7, #-4]!
 8010822:	4639      	mov	r1, r7
 8010824:	f7f4 f8a6 	bl	8004974 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 8010828:	f104 085c 	add.w	r8, r4, #92	@ 0x5c
 801082c:	4b12      	ldr	r3, [pc, #72]	@ (8010878 <_ZN8touchgfx14SwipeContainer13PageIndicatorC1Ev+0x78>)
 801082e:	4639      	mov	r1, r7
 8010830:	f8a4 5056 	strh.w	r5, [r4, #86]	@ 0x56
 8010834:	4640      	mov	r0, r8
 8010836:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8010838:	f8a4 5058 	strh.w	r5, [r4, #88]	@ 0x58
 801083c:	f8ad 9004 	strh.w	r9, [sp, #4]
 8010840:	f7f4 f898 	bl	8004974 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 8010844:	462a      	mov	r2, r5
 8010846:	4629      	mov	r1, r5
 8010848:	4630      	mov	r0, r6
 801084a:	f8a4 5088 	strh.w	r5, [r4, #136]	@ 0x88
 801084e:	f7f3 fc14 	bl	800407a <_ZN8touchgfx8Drawable5setXYEss>
 8010852:	462a      	mov	r2, r5
 8010854:	4629      	mov	r1, r5
 8010856:	4640      	mov	r0, r8
 8010858:	f7f3 fc0f 	bl	800407a <_ZN8touchgfx8Drawable5setXYEss>
 801085c:	4631      	mov	r1, r6
 801085e:	4620      	mov	r0, r4
 8010860:	f7ff f9c9 	bl	800fbf6 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8010864:	4620      	mov	r0, r4
 8010866:	4641      	mov	r1, r8
 8010868:	f7ff f9c5 	bl	800fbf6 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 801086c:	4620      	mov	r0, r4
 801086e:	b003      	add	sp, #12
 8010870:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010874:	0802c868 	.word	0x0802c868
 8010878:	0802ce98 	.word	0x0802ce98

0801087c <_ZN8touchgfx14SwipeContainerC1Ev>:
 801087c:	b570      	push	{r4, r5, r6, lr}
 801087e:	4604      	mov	r4, r0
 8010880:	f7fe ff3a 	bl	800f6f8 <_ZN8touchgfx8DrawableC1Ev>
 8010884:	4b1c      	ldr	r3, [pc, #112]	@ (80108f8 <_ZN8touchgfx14SwipeContainerC1Ev+0x7c>)
 8010886:	2500      	movs	r5, #0
 8010888:	f104 063c 	add.w	r6, r4, #60	@ 0x3c
 801088c:	6023      	str	r3, [r4, #0]
 801088e:	2307      	movs	r3, #7
 8010890:	62a5      	str	r5, [r4, #40]	@ 0x28
 8010892:	4630      	mov	r0, r6
 8010894:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
 8010898:	2350      	movs	r3, #80	@ 0x50
 801089a:	f884 502d 	strb.w	r5, [r4, #45]	@ 0x2d
 801089e:	85e3      	strh	r3, [r4, #46]	@ 0x2e
 80108a0:	231e      	movs	r3, #30
 80108a2:	8625      	strh	r5, [r4, #48]	@ 0x30
 80108a4:	86e3      	strh	r3, [r4, #54]	@ 0x36
 80108a6:	2314      	movs	r3, #20
 80108a8:	8665      	strh	r5, [r4, #50]	@ 0x32
 80108aa:	86a5      	strh	r5, [r4, #52]	@ 0x34
 80108ac:	f884 3038 	strb.w	r3, [r4, #56]	@ 0x38
 80108b0:	f884 5039 	strb.w	r5, [r4, #57]	@ 0x39
 80108b4:	f7fe ff20 	bl	800f6f8 <_ZN8touchgfx8DrawableC1Ev>
 80108b8:	4b10      	ldr	r3, [pc, #64]	@ (80108fc <_ZN8touchgfx14SwipeContainerC1Ev+0x80>)
 80108ba:	6665      	str	r5, [r4, #100]	@ 0x64
 80108bc:	63e3      	str	r3, [r4, #60]	@ 0x3c
 80108be:	2302      	movs	r3, #2
 80108c0:	f8a4 506a 	strh.w	r5, [r4, #106]	@ 0x6a
 80108c4:	f104 056c 	add.w	r5, r4, #108	@ 0x6c
 80108c8:	f884 3068 	strb.w	r3, [r4, #104]	@ 0x68
 80108cc:	4628      	mov	r0, r5
 80108ce:	f7ff ff97 	bl	8010800 <_ZN8touchgfx14SwipeContainer13PageIndicatorC1Ev>
 80108d2:	f007 fab7 	bl	8017e44 <_ZN8touchgfx11Application11getInstanceEv>
 80108d6:	4621      	mov	r1, r4
 80108d8:	3004      	adds	r0, #4
 80108da:	f007 fba9 	bl	8018030 <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE>
 80108de:	2301      	movs	r3, #1
 80108e0:	4631      	mov	r1, r6
 80108e2:	4620      	mov	r0, r4
 80108e4:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
 80108e8:	f7ff f985 	bl	800fbf6 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 80108ec:	4620      	mov	r0, r4
 80108ee:	4629      	mov	r1, r5
 80108f0:	f7ff f981 	bl	800fbf6 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 80108f4:	4620      	mov	r0, r4
 80108f6:	bd70      	pop	{r4, r5, r6, pc}
 80108f8:	0802c8f8 	.word	0x0802c8f8
 80108fc:	0802c9bc 	.word	0x0802c9bc

08010900 <_ZN8touchgfx14SwipeContainer13PageIndicator14setCurrentPageEh>:
 8010900:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8010902:	f890 3088 	ldrb.w	r3, [r0, #136]	@ 0x88
 8010906:	4604      	mov	r4, r0
 8010908:	460d      	mov	r5, r1
 801090a:	428b      	cmp	r3, r1
 801090c:	d915      	bls.n	801093a <_ZN8touchgfx14SwipeContainer13PageIndicator14setCurrentPageEh+0x3a>
 801090e:	f890 3089 	ldrb.w	r3, [r0, #137]	@ 0x89
 8010912:	428b      	cmp	r3, r1
 8010914:	d011      	beq.n	801093a <_ZN8touchgfx14SwipeContainer13PageIndicator14setCurrentPageEh+0x3a>
 8010916:	f884 1089 	strb.w	r1, [r4, #137]	@ 0x89
 801091a:	f8b0 3052 	ldrh.w	r3, [r0, #82]	@ 0x52
 801091e:	a802      	add	r0, sp, #8
 8010920:	f820 3d04 	strh.w	r3, [r0, #-4]!
 8010924:	f00b f8ce 	bl	801bac4 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8010928:	fb15 f100 	smulbb	r1, r5, r0
 801092c:	f9b4 2062 	ldrsh.w	r2, [r4, #98]	@ 0x62
 8010930:	f104 005c 	add.w	r0, r4, #92	@ 0x5c
 8010934:	b209      	sxth	r1, r1
 8010936:	f7f2 fc7a 	bl	800322e <_ZN8touchgfx8Drawable6moveToEss>
 801093a:	b003      	add	sp, #12
 801093c:	bd30      	pop	{r4, r5, pc}

0801093e <_ZN8touchgfx14SwipeContainer13PageIndicator16setNumberOfPagesEh>:
 801093e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8010940:	4604      	mov	r4, r0
 8010942:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8010946:	460d      	mov	r5, r1
 8010948:	f884 1088 	strb.w	r1, [r4, #136]	@ 0x88
 801094c:	f8b0 3052 	ldrh.w	r3, [r0, #82]	@ 0x52
 8010950:	4293      	cmp	r3, r2
 8010952:	d01e      	beq.n	8010992 <_ZN8touchgfx14SwipeContainer13PageIndicator16setNumberOfPagesEh+0x54>
 8010954:	a802      	add	r0, sp, #8
 8010956:	f820 3d04 	strh.w	r3, [r0, #-4]!
 801095a:	f00b f8b3 	bl	801bac4 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801095e:	6823      	ldr	r3, [r4, #0]
 8010960:	fb15 f000 	smulbb	r0, r5, r0
 8010964:	86a0      	strh	r0, [r4, #52]	@ 0x34
 8010966:	4620      	mov	r0, r4
 8010968:	695b      	ldr	r3, [r3, #20]
 801096a:	4798      	blx	r3
 801096c:	f9b4 2036 	ldrsh.w	r2, [r4, #54]	@ 0x36
 8010970:	f9b4 1034 	ldrsh.w	r1, [r4, #52]	@ 0x34
 8010974:	4620      	mov	r0, r4
 8010976:	f7fe fed7 	bl	800f728 <_ZN8touchgfx8Drawable14setWidthHeightEss>
 801097a:	f894 1089 	ldrb.w	r1, [r4, #137]	@ 0x89
 801097e:	4620      	mov	r0, r4
 8010980:	42a9      	cmp	r1, r5
 8010982:	bf28      	it	cs
 8010984:	4629      	movcs	r1, r5
 8010986:	f7ff ffbb 	bl	8010900 <_ZN8touchgfx14SwipeContainer13PageIndicator14setCurrentPageEh>
 801098a:	6823      	ldr	r3, [r4, #0]
 801098c:	4620      	mov	r0, r4
 801098e:	695b      	ldr	r3, [r3, #20]
 8010990:	4798      	blx	r3
 8010992:	b003      	add	sp, #12
 8010994:	bd30      	pop	{r4, r5, pc}

08010996 <_ZN8touchgfx14SwipeContainer13PageIndicator10setBitmapsERKNS_6BitmapES4_>:
 8010996:	b538      	push	{r3, r4, r5, lr}
 8010998:	4604      	mov	r4, r0
 801099a:	460d      	mov	r5, r1
 801099c:	305c      	adds	r0, #92	@ 0x5c
 801099e:	4611      	mov	r1, r2
 80109a0:	f004 fd4f 	bl	8015442 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 80109a4:	4629      	mov	r1, r5
 80109a6:	f104 002c 	add.w	r0, r4, #44	@ 0x2c
 80109aa:	f004 f8cb 	bl	8014b44 <_ZN8touchgfx10TiledImage9setBitmapERKNS_6BitmapE>
 80109ae:	f894 1088 	ldrb.w	r1, [r4, #136]	@ 0x88
 80109b2:	b121      	cbz	r1, 80109be <_ZN8touchgfx14SwipeContainer13PageIndicator10setBitmapsERKNS_6BitmapES4_+0x28>
 80109b4:	4620      	mov	r0, r4
 80109b6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80109ba:	f7ff bfc0 	b.w	801093e <_ZN8touchgfx14SwipeContainer13PageIndicator16setNumberOfPagesEh>
 80109be:	bd38      	pop	{r3, r4, r5, pc}

080109c0 <_ZN8touchgfx14SwipeContainer23setPageIndicatorBitmapsERKNS_6BitmapES3_>:
 80109c0:	306c      	adds	r0, #108	@ 0x6c
 80109c2:	f7ff bfe8 	b.w	8010996 <_ZN8touchgfx14SwipeContainer13PageIndicator10setBitmapsERKNS_6BitmapES4_>

080109c6 <_ZN8touchgfx14SwipeContainer13PageIndicator7goRightEv>:
 80109c6:	f890 1089 	ldrb.w	r1, [r0, #137]	@ 0x89
 80109ca:	f890 2088 	ldrb.w	r2, [r0, #136]	@ 0x88
 80109ce:	3101      	adds	r1, #1
 80109d0:	fb91 f3f2 	sdiv	r3, r1, r2
 80109d4:	fb02 1113 	mls	r1, r2, r3, r1
 80109d8:	b2c9      	uxtb	r1, r1
 80109da:	f7ff bf91 	b.w	8010900 <_ZN8touchgfx14SwipeContainer13PageIndicator14setCurrentPageEh>

080109de <_ZN8touchgfx14SwipeContainer11animateLeftEv>:
 80109de:	b510      	push	{r4, lr}
 80109e0:	4604      	mov	r4, r0
 80109e2:	f890 002d 	ldrb.w	r0, [r0, #45]	@ 0x2d
 80109e6:	280a      	cmp	r0, #10
 80109e8:	d813      	bhi.n	8010a12 <_ZN8touchgfx14SwipeContainer11animateLeftEv+0x34>
 80109ea:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 80109ec:	2100      	movs	r1, #0
 80109ee:	8922      	ldrh	r2, [r4, #8]
 80109f0:	441a      	add	r2, r3
 80109f2:	230a      	movs	r3, #10
 80109f4:	b212      	sxth	r2, r2
 80109f6:	f009 fbbb 	bl	801a170 <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst>
 80109fa:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 80109fc:	1a18      	subs	r0, r3, r0
 80109fe:	8620      	strh	r0, [r4, #48]	@ 0x30
 8010a00:	4620      	mov	r0, r4
 8010a02:	f7ff fe8c 	bl	801071e <_ZN8touchgfx14SwipeContainer11adjustPagesEv>
 8010a06:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8010a0a:	3301      	adds	r3, #1
 8010a0c:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8010a10:	bd10      	pop	{r4, pc}
 8010a12:	2307      	movs	r3, #7
 8010a14:	f104 006c 	add.w	r0, r4, #108	@ 0x6c
 8010a18:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
 8010a1c:	2300      	movs	r3, #0
 8010a1e:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8010a22:	8623      	strh	r3, [r4, #48]	@ 0x30
 8010a24:	f7ff ffcf 	bl	80109c6 <_ZN8touchgfx14SwipeContainer13PageIndicator7goRightEv>
 8010a28:	e7ea      	b.n	8010a00 <_ZN8touchgfx14SwipeContainer11animateLeftEv+0x22>

08010a2a <_ZN8touchgfx14SwipeContainer13PageIndicator6goLeftEv>:
 8010a2a:	f890 2088 	ldrb.w	r2, [r0, #136]	@ 0x88
 8010a2e:	f890 1089 	ldrb.w	r1, [r0, #137]	@ 0x89
 8010a32:	4411      	add	r1, r2
 8010a34:	3901      	subs	r1, #1
 8010a36:	fb91 f3f2 	sdiv	r3, r1, r2
 8010a3a:	fb02 1113 	mls	r1, r2, r3, r1
 8010a3e:	b2c9      	uxtb	r1, r1
 8010a40:	f7ff bf5e 	b.w	8010900 <_ZN8touchgfx14SwipeContainer13PageIndicator14setCurrentPageEh>

08010a44 <_ZN8touchgfx14SwipeContainer12animateRightEv>:
 8010a44:	b510      	push	{r4, lr}
 8010a46:	4604      	mov	r4, r0
 8010a48:	f890 002d 	ldrb.w	r0, [r0, #45]	@ 0x2d
 8010a4c:	280a      	cmp	r0, #10
 8010a4e:	d813      	bhi.n	8010a78 <_ZN8touchgfx14SwipeContainer12animateRightEv+0x34>
 8010a50:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 8010a52:	2100      	movs	r1, #0
 8010a54:	8922      	ldrh	r2, [r4, #8]
 8010a56:	1ad2      	subs	r2, r2, r3
 8010a58:	230a      	movs	r3, #10
 8010a5a:	b212      	sxth	r2, r2
 8010a5c:	f009 fb88 	bl	801a170 <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst>
 8010a60:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 8010a62:	4418      	add	r0, r3
 8010a64:	8620      	strh	r0, [r4, #48]	@ 0x30
 8010a66:	4620      	mov	r0, r4
 8010a68:	f7ff fe59 	bl	801071e <_ZN8touchgfx14SwipeContainer11adjustPagesEv>
 8010a6c:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8010a70:	3301      	adds	r3, #1
 8010a72:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8010a76:	bd10      	pop	{r4, pc}
 8010a78:	2307      	movs	r3, #7
 8010a7a:	f104 006c 	add.w	r0, r4, #108	@ 0x6c
 8010a7e:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
 8010a82:	2300      	movs	r3, #0
 8010a84:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8010a88:	8623      	strh	r3, [r4, #48]	@ 0x30
 8010a8a:	f7ff ffce 	bl	8010a2a <_ZN8touchgfx14SwipeContainer13PageIndicator6goLeftEv>
 8010a8e:	e7ea      	b.n	8010a66 <_ZN8touchgfx14SwipeContainer12animateRightEv+0x22>

08010a90 <_ZN8touchgfx14SwipeContainer15setSelectedPageEh>:
 8010a90:	b510      	push	{r4, lr}
 8010a92:	f890 30f4 	ldrb.w	r3, [r0, #244]	@ 0xf4
 8010a96:	4604      	mov	r4, r0
 8010a98:	428b      	cmp	r3, r1
 8010a9a:	d907      	bls.n	8010aac <_ZN8touchgfx14SwipeContainer15setSelectedPageEh+0x1c>
 8010a9c:	306c      	adds	r0, #108	@ 0x6c
 8010a9e:	f7ff ff2f 	bl	8010900 <_ZN8touchgfx14SwipeContainer13PageIndicator14setCurrentPageEh>
 8010aa2:	4620      	mov	r0, r4
 8010aa4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010aa8:	f7ff be39 	b.w	801071e <_ZN8touchgfx14SwipeContainer11adjustPagesEv>
 8010aac:	bd10      	pop	{r4, pc}

08010aae <_ZN8touchgfx14SwipeContainer3addERNS_8DrawableE>:
 8010aae:	b538      	push	{r3, r4, r5, lr}
 8010ab0:	4604      	mov	r4, r0
 8010ab2:	303c      	adds	r0, #60	@ 0x3c
 8010ab4:	460d      	mov	r5, r1
 8010ab6:	f000 f9fd 	bl	8010eb4 <_ZN8touchgfx10ListLayout3addERNS_8DrawableE>
 8010aba:	f894 10f4 	ldrb.w	r1, [r4, #244]	@ 0xf4
 8010abe:	f104 006c 	add.w	r0, r4, #108	@ 0x6c
 8010ac2:	3101      	adds	r1, #1
 8010ac4:	b2c9      	uxtb	r1, r1
 8010ac6:	f7ff ff3a 	bl	801093e <_ZN8touchgfx14SwipeContainer13PageIndicator16setNumberOfPagesEh>
 8010aca:	f894 10f5 	ldrb.w	r1, [r4, #245]	@ 0xf5
 8010ace:	4620      	mov	r0, r4
 8010ad0:	f7ff ffde 	bl	8010a90 <_ZN8touchgfx14SwipeContainer15setSelectedPageEh>
 8010ad4:	f9b5 200a 	ldrsh.w	r2, [r5, #10]
 8010ad8:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 8010adc:	4620      	mov	r0, r4
 8010ade:	f7fe fe23 	bl	800f728 <_ZN8touchgfx8Drawable14setWidthHeightEss>
 8010ae2:	bd38      	pop	{r3, r4, r5, pc}

08010ae4 <_ZN8touchgfx14SwipeContainer6removeERNS_8DrawableE>:
 8010ae4:	b538      	push	{r3, r4, r5, lr}
 8010ae6:	f890 30f4 	ldrb.w	r3, [r0, #244]	@ 0xf4
 8010aea:	4604      	mov	r4, r0
 8010aec:	b1e3      	cbz	r3, 8010b28 <_ZN8touchgfx14SwipeContainer6removeERNS_8DrawableE+0x44>
 8010aee:	6e43      	ldr	r3, [r0, #100]	@ 0x64
 8010af0:	b1d3      	cbz	r3, 8010b28 <_ZN8touchgfx14SwipeContainer6removeERNS_8DrawableE+0x44>
 8010af2:	428b      	cmp	r3, r1
 8010af4:	d125      	bne.n	8010b42 <_ZN8touchgfx14SwipeContainer6removeERNS_8DrawableE+0x5e>
 8010af6:	4619      	mov	r1, r3
 8010af8:	f104 003c 	add.w	r0, r4, #60	@ 0x3c
 8010afc:	f000 fa5a 	bl	8010fb4 <_ZN8touchgfx10ListLayout6removeERNS_8DrawableE>
 8010b00:	f894 10f4 	ldrb.w	r1, [r4, #244]	@ 0xf4
 8010b04:	f104 006c 	add.w	r0, r4, #108	@ 0x6c
 8010b08:	3901      	subs	r1, #1
 8010b0a:	b2c9      	uxtb	r1, r1
 8010b0c:	f7ff ff17 	bl	801093e <_ZN8touchgfx14SwipeContainer13PageIndicator16setNumberOfPagesEh>
 8010b10:	f894 50f4 	ldrb.w	r5, [r4, #244]	@ 0xf4
 8010b14:	b94d      	cbnz	r5, 8010b2a <_ZN8touchgfx14SwipeContainer6removeERNS_8DrawableE+0x46>
 8010b16:	6823      	ldr	r3, [r4, #0]
 8010b18:	4620      	mov	r0, r4
 8010b1a:	695b      	ldr	r3, [r3, #20]
 8010b1c:	4798      	blx	r3
 8010b1e:	462a      	mov	r2, r5
 8010b20:	4629      	mov	r1, r5
 8010b22:	4620      	mov	r0, r4
 8010b24:	f7fe fe00 	bl	800f728 <_ZN8touchgfx8Drawable14setWidthHeightEss>
 8010b28:	bd38      	pop	{r3, r4, r5, pc}
 8010b2a:	f894 10f5 	ldrb.w	r1, [r4, #245]	@ 0xf5
 8010b2e:	3d01      	subs	r5, #1
 8010b30:	4620      	mov	r0, r4
 8010b32:	42a9      	cmp	r1, r5
 8010b34:	bfa8      	it	ge
 8010b36:	4629      	movge	r1, r5
 8010b38:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010b3c:	b2c9      	uxtb	r1, r1
 8010b3e:	f7ff bfa7 	b.w	8010a90 <_ZN8touchgfx14SwipeContainer15setSelectedPageEh>
 8010b42:	699b      	ldr	r3, [r3, #24]
 8010b44:	e7d4      	b.n	8010af0 <_ZN8touchgfx14SwipeContainer6removeERNS_8DrawableE+0xc>

08010b46 <_ZN8touchgfx14SwipeContainer21animateLeftWithButtonEv>:
 8010b46:	b510      	push	{r4, lr}
 8010b48:	4604      	mov	r4, r0
 8010b4a:	f890 002d 	ldrb.w	r0, [r0, #45]	@ 0x2d
 8010b4e:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 8010b52:	4298      	cmp	r0, r3
 8010b54:	d812      	bhi.n	8010b7c <_ZN8touchgfx14SwipeContainer21animateLeftWithButtonEv+0x36>
 8010b56:	8e61      	ldrh	r1, [r4, #50]	@ 0x32
 8010b58:	8922      	ldrh	r2, [r4, #8]
 8010b5a:	440a      	add	r2, r1
 8010b5c:	2100      	movs	r1, #0
 8010b5e:	b212      	sxth	r2, r2
 8010b60:	f009 fb06 	bl	801a170 <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst>
 8010b64:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 8010b66:	1a18      	subs	r0, r3, r0
 8010b68:	8620      	strh	r0, [r4, #48]	@ 0x30
 8010b6a:	4620      	mov	r0, r4
 8010b6c:	f7ff fdd7 	bl	801071e <_ZN8touchgfx14SwipeContainer11adjustPagesEv>
 8010b70:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8010b74:	3301      	adds	r3, #1
 8010b76:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8010b7a:	bd10      	pop	{r4, pc}
 8010b7c:	2307      	movs	r3, #7
 8010b7e:	f104 006c 	add.w	r0, r4, #108	@ 0x6c
 8010b82:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
 8010b86:	2300      	movs	r3, #0
 8010b88:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8010b8c:	8623      	strh	r3, [r4, #48]	@ 0x30
 8010b8e:	f7ff ff1a 	bl	80109c6 <_ZN8touchgfx14SwipeContainer13PageIndicator7goRightEv>
 8010b92:	e7ea      	b.n	8010b6a <_ZN8touchgfx14SwipeContainer21animateLeftWithButtonEv+0x24>

08010b94 <_ZN8touchgfx14SwipeContainer22animateRightWithButtonEv>:
 8010b94:	b510      	push	{r4, lr}
 8010b96:	4604      	mov	r4, r0
 8010b98:	f890 002d 	ldrb.w	r0, [r0, #45]	@ 0x2d
 8010b9c:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 8010ba0:	4298      	cmp	r0, r3
 8010ba2:	d812      	bhi.n	8010bca <_ZN8touchgfx14SwipeContainer22animateRightWithButtonEv+0x36>
 8010ba4:	8e61      	ldrh	r1, [r4, #50]	@ 0x32
 8010ba6:	8922      	ldrh	r2, [r4, #8]
 8010ba8:	1a52      	subs	r2, r2, r1
 8010baa:	2100      	movs	r1, #0
 8010bac:	b212      	sxth	r2, r2
 8010bae:	f009 fadf 	bl	801a170 <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst>
 8010bb2:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 8010bb4:	4418      	add	r0, r3
 8010bb6:	8620      	strh	r0, [r4, #48]	@ 0x30
 8010bb8:	4620      	mov	r0, r4
 8010bba:	f7ff fdb0 	bl	801071e <_ZN8touchgfx14SwipeContainer11adjustPagesEv>
 8010bbe:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8010bc2:	3301      	adds	r3, #1
 8010bc4:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8010bc8:	bd10      	pop	{r4, pc}
 8010bca:	2307      	movs	r3, #7
 8010bcc:	f104 006c 	add.w	r0, r4, #108	@ 0x6c
 8010bd0:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
 8010bd4:	2300      	movs	r3, #0
 8010bd6:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8010bda:	8623      	strh	r3, [r4, #48]	@ 0x30
 8010bdc:	f7ff ff25 	bl	8010a2a <_ZN8touchgfx14SwipeContainer13PageIndicator6goLeftEv>
 8010be0:	e7ea      	b.n	8010bb8 <_ZN8touchgfx14SwipeContainer22animateRightWithButtonEv+0x24>

08010be2 <_ZN8touchgfx14SwipeContainer13animateToPageEv>:
 8010be2:	b538      	push	{r3, r4, r5, lr}
 8010be4:	4604      	mov	r4, r0
 8010be6:	f890 002d 	ldrb.w	r0, [r0, #45]	@ 0x2d
 8010bea:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 8010bee:	f994 1039 	ldrsb.w	r1, [r4, #57]	@ 0x39
 8010bf2:	4298      	cmp	r0, r3
 8010bf4:	d814      	bhi.n	8010c20 <_ZN8touchgfx14SwipeContainer13animateToPageEv+0x3e>
 8010bf6:	f9b4 5008 	ldrsh.w	r5, [r4, #8]
 8010bfa:	8e62      	ldrh	r2, [r4, #50]	@ 0x32
 8010bfc:	fb05 2201 	mla	r2, r5, r1, r2
 8010c00:	2100      	movs	r1, #0
 8010c02:	b212      	sxth	r2, r2
 8010c04:	f009 fab4 	bl	801a170 <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst>
 8010c08:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 8010c0a:	1a18      	subs	r0, r3, r0
 8010c0c:	8620      	strh	r0, [r4, #48]	@ 0x30
 8010c0e:	4620      	mov	r0, r4
 8010c10:	f7ff fd85 	bl	801071e <_ZN8touchgfx14SwipeContainer11adjustPagesEv>
 8010c14:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8010c18:	3301      	adds	r3, #1
 8010c1a:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8010c1e:	bd38      	pop	{r3, r4, r5, pc}
 8010c20:	2307      	movs	r3, #7
 8010c22:	f894 20f5 	ldrb.w	r2, [r4, #245]	@ 0xf5
 8010c26:	f104 006c 	add.w	r0, r4, #108	@ 0x6c
 8010c2a:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
 8010c2e:	4411      	add	r1, r2
 8010c30:	2300      	movs	r3, #0
 8010c32:	b2c9      	uxtb	r1, r1
 8010c34:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8010c38:	8623      	strh	r3, [r4, #48]	@ 0x30
 8010c3a:	f7ff fe61 	bl	8010900 <_ZN8touchgfx14SwipeContainer13PageIndicator14setCurrentPageEh>
 8010c3e:	e7e6      	b.n	8010c0e <_ZN8touchgfx14SwipeContainer13animateToPageEv+0x2c>

08010c40 <_ZN8touchgfx14SwipeContainer15handleTickEventEv>:
 8010c40:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
 8010c44:	b90b      	cbnz	r3, 8010c4a <_ZN8touchgfx14SwipeContainer15handleTickEventEv+0xa>
 8010c46:	f7ff bd97 	b.w	8010778 <_ZN8touchgfx14SwipeContainer25animateSwipeCancelledLeftEv>
 8010c4a:	2b01      	cmp	r3, #1
 8010c4c:	d101      	bne.n	8010c52 <_ZN8touchgfx14SwipeContainer15handleTickEventEv+0x12>
 8010c4e:	f7ff bdb5 	b.w	80107bc <_ZN8touchgfx14SwipeContainer26animateSwipeCancelledRightEv>
 8010c52:	2b02      	cmp	r3, #2
 8010c54:	d101      	bne.n	8010c5a <_ZN8touchgfx14SwipeContainer15handleTickEventEv+0x1a>
 8010c56:	f7ff bec2 	b.w	80109de <_ZN8touchgfx14SwipeContainer11animateLeftEv>
 8010c5a:	2b03      	cmp	r3, #3
 8010c5c:	d101      	bne.n	8010c62 <_ZN8touchgfx14SwipeContainer15handleTickEventEv+0x22>
 8010c5e:	f7ff bef1 	b.w	8010a44 <_ZN8touchgfx14SwipeContainer12animateRightEv>
 8010c62:	2b04      	cmp	r3, #4
 8010c64:	d101      	bne.n	8010c6a <_ZN8touchgfx14SwipeContainer15handleTickEventEv+0x2a>
 8010c66:	f7ff bf6e 	b.w	8010b46 <_ZN8touchgfx14SwipeContainer21animateLeftWithButtonEv>
 8010c6a:	2b05      	cmp	r3, #5
 8010c6c:	d101      	bne.n	8010c72 <_ZN8touchgfx14SwipeContainer15handleTickEventEv+0x32>
 8010c6e:	f7ff bf91 	b.w	8010b94 <_ZN8touchgfx14SwipeContainer22animateRightWithButtonEv>
 8010c72:	2b06      	cmp	r3, #6
 8010c74:	d101      	bne.n	8010c7a <_ZN8touchgfx14SwipeContainer15handleTickEventEv+0x3a>
 8010c76:	f7ff bfb4 	b.w	8010be2 <_ZN8touchgfx14SwipeContainer13animateToPageEv>
 8010c7a:	4770      	bx	lr

08010c7c <_ZNK8touchgfx10ListLayout12getDirectionEv>:
 8010c7c:	f890 002c 	ldrb.w	r0, [r0, #44]	@ 0x2c
 8010c80:	4770      	bx	lr

08010c82 <_ZN8touchgfx14AdjustElements12handleRemoveERNS_8DrawableE>:
 8010c82:	b538      	push	{r3, r4, r5, lr}
 8010c84:	7882      	ldrb	r2, [r0, #2]
 8010c86:	4604      	mov	r4, r0
 8010c88:	460d      	mov	r5, r1
 8010c8a:	6843      	ldr	r3, [r0, #4]
 8010c8c:	b98a      	cbnz	r2, 8010cb2 <_ZN8touchgfx14AdjustElements12handleRemoveERNS_8DrawableE+0x30>
 8010c8e:	4299      	cmp	r1, r3
 8010c90:	d101      	bne.n	8010c96 <_ZN8touchgfx14AdjustElements12handleRemoveERNS_8DrawableE+0x14>
 8010c92:	2301      	movs	r3, #1
 8010c94:	7083      	strb	r3, [r0, #2]
 8010c96:	6863      	ldr	r3, [r4, #4]
 8010c98:	42ab      	cmp	r3, r5
 8010c9a:	d009      	beq.n	8010cb0 <_ZN8touchgfx14AdjustElements12handleRemoveERNS_8DrawableE+0x2e>
 8010c9c:	7a23      	ldrb	r3, [r4, #8]
 8010c9e:	2b01      	cmp	r3, #1
 8010ca0:	d11b      	bne.n	8010cda <_ZN8touchgfx14AdjustElements12handleRemoveERNS_8DrawableE+0x58>
 8010ca2:	f9b5 3008 	ldrsh.w	r3, [r5, #8]
 8010ca6:	f9b4 2000 	ldrsh.w	r2, [r4]
 8010caa:	429a      	cmp	r2, r3
 8010cac:	bfb8      	it	lt
 8010cae:	8023      	strhlt	r3, [r4, #0]
 8010cb0:	bd38      	pop	{r3, r4, r5, pc}
 8010cb2:	7a02      	ldrb	r2, [r0, #8]
 8010cb4:	2a01      	cmp	r2, #1
 8010cb6:	d108      	bne.n	8010cca <_ZN8touchgfx14AdjustElements12handleRemoveERNS_8DrawableE+0x48>
 8010cb8:	895b      	ldrh	r3, [r3, #10]
 8010cba:	88c9      	ldrh	r1, [r1, #6]
 8010cbc:	1ac9      	subs	r1, r1, r3
 8010cbe:	682b      	ldr	r3, [r5, #0]
 8010cc0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010cc2:	b209      	sxth	r1, r1
 8010cc4:	4628      	mov	r0, r5
 8010cc6:	4798      	blx	r3
 8010cc8:	e7e5      	b.n	8010c96 <_ZN8touchgfx14AdjustElements12handleRemoveERNS_8DrawableE+0x14>
 8010cca:	2a02      	cmp	r2, #2
 8010ccc:	d1e3      	bne.n	8010c96 <_ZN8touchgfx14AdjustElements12handleRemoveERNS_8DrawableE+0x14>
 8010cce:	891b      	ldrh	r3, [r3, #8]
 8010cd0:	8889      	ldrh	r1, [r1, #4]
 8010cd2:	1ac9      	subs	r1, r1, r3
 8010cd4:	682b      	ldr	r3, [r5, #0]
 8010cd6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010cd8:	e7f3      	b.n	8010cc2 <_ZN8touchgfx14AdjustElements12handleRemoveERNS_8DrawableE+0x40>
 8010cda:	2b02      	cmp	r3, #2
 8010cdc:	d1e8      	bne.n	8010cb0 <_ZN8touchgfx14AdjustElements12handleRemoveERNS_8DrawableE+0x2e>
 8010cde:	f9b5 300a 	ldrsh.w	r3, [r5, #10]
 8010ce2:	e7e0      	b.n	8010ca6 <_ZN8touchgfx14AdjustElements12handleRemoveERNS_8DrawableE+0x24>

08010ce4 <_ZN8touchgfx8CallbackINS_14AdjustElementsERNS_8DrawableEvvED1Ev>:
 8010ce4:	4770      	bx	lr

08010ce6 <_ZN8touchgfx8CallbackINS_10ListLayoutERNS_8DrawableEvvED1Ev>:
 8010ce6:	4770      	bx	lr

08010ce8 <_ZN8touchgfx10ListLayoutD1Ev>:
 8010ce8:	4770      	bx	lr

08010cea <_ZN8touchgfx8CallbackINS_14AdjustElementsERNS_8DrawableEvvE7executeES3_>:
 8010cea:	b430      	push	{r4, r5}
 8010cec:	68c5      	ldr	r5, [r0, #12]
 8010cee:	4603      	mov	r3, r0
 8010cf0:	6844      	ldr	r4, [r0, #4]
 8010cf2:	106a      	asrs	r2, r5, #1
 8010cf4:	07ed      	lsls	r5, r5, #31
 8010cf6:	689b      	ldr	r3, [r3, #8]
 8010cf8:	eb04 0002 	add.w	r0, r4, r2
 8010cfc:	bf48      	it	mi
 8010cfe:	58a2      	ldrmi	r2, [r4, r2]
 8010d00:	bc30      	pop	{r4, r5}
 8010d02:	bf48      	it	mi
 8010d04:	58d3      	ldrmi	r3, [r2, r3]
 8010d06:	4718      	bx	r3

08010d08 <_ZNK8touchgfx8CallbackINS_14AdjustElementsERNS_8DrawableEvvE7isValidEv>:
 8010d08:	6843      	ldr	r3, [r0, #4]
 8010d0a:	b12b      	cbz	r3, 8010d18 <_ZNK8touchgfx8CallbackINS_14AdjustElementsERNS_8DrawableEvvE7isValidEv+0x10>
 8010d0c:	6883      	ldr	r3, [r0, #8]
 8010d0e:	b92b      	cbnz	r3, 8010d1c <_ZNK8touchgfx8CallbackINS_14AdjustElementsERNS_8DrawableEvvE7isValidEv+0x14>
 8010d10:	68c0      	ldr	r0, [r0, #12]
 8010d12:	f000 0001 	and.w	r0, r0, #1
 8010d16:	4770      	bx	lr
 8010d18:	4618      	mov	r0, r3
 8010d1a:	4770      	bx	lr
 8010d1c:	2001      	movs	r0, #1
 8010d1e:	4770      	bx	lr

08010d20 <_ZN8touchgfx8CallbackINS_10ListLayoutERNS_8DrawableEvvE7executeES3_>:
 8010d20:	b430      	push	{r4, r5}
 8010d22:	68c5      	ldr	r5, [r0, #12]
 8010d24:	4603      	mov	r3, r0
 8010d26:	6844      	ldr	r4, [r0, #4]
 8010d28:	106a      	asrs	r2, r5, #1
 8010d2a:	07ed      	lsls	r5, r5, #31
 8010d2c:	689b      	ldr	r3, [r3, #8]
 8010d2e:	eb04 0002 	add.w	r0, r4, r2
 8010d32:	bf48      	it	mi
 8010d34:	58a2      	ldrmi	r2, [r4, r2]
 8010d36:	bc30      	pop	{r4, r5}
 8010d38:	bf48      	it	mi
 8010d3a:	58d3      	ldrmi	r3, [r2, r3]
 8010d3c:	4718      	bx	r3

08010d3e <_ZNK8touchgfx8CallbackINS_10ListLayoutERNS_8DrawableEvvE7isValidEv>:
 8010d3e:	6843      	ldr	r3, [r0, #4]
 8010d40:	b12b      	cbz	r3, 8010d4e <_ZNK8touchgfx8CallbackINS_10ListLayoutERNS_8DrawableEvvE7isValidEv+0x10>
 8010d42:	6883      	ldr	r3, [r0, #8]
 8010d44:	b92b      	cbnz	r3, 8010d52 <_ZNK8touchgfx8CallbackINS_10ListLayoutERNS_8DrawableEvvE7isValidEv+0x14>
 8010d46:	68c0      	ldr	r0, [r0, #12]
 8010d48:	f000 0001 	and.w	r0, r0, #1
 8010d4c:	4770      	bx	lr
 8010d4e:	4618      	mov	r0, r3
 8010d50:	4770      	bx	lr
 8010d52:	2001      	movs	r0, #1
 8010d54:	4770      	bx	lr

08010d56 <_ZN8touchgfx10ListLayoutD0Ev>:
 8010d56:	b510      	push	{r4, lr}
 8010d58:	4604      	mov	r4, r0
 8010d5a:	2130      	movs	r1, #48	@ 0x30
 8010d5c:	f016 fb97 	bl	802748e <_ZdlPvj>
 8010d60:	4620      	mov	r0, r4
 8010d62:	bd10      	pop	{r4, pc}

08010d64 <_ZN8touchgfx8CallbackINS_10ListLayoutERNS_8DrawableEvvED0Ev>:
 8010d64:	b510      	push	{r4, lr}
 8010d66:	4604      	mov	r4, r0
 8010d68:	2110      	movs	r1, #16
 8010d6a:	f016 fb90 	bl	802748e <_ZdlPvj>
 8010d6e:	4620      	mov	r0, r4
 8010d70:	bd10      	pop	{r4, pc}

08010d72 <_ZN8touchgfx8CallbackINS_14AdjustElementsERNS_8DrawableEvvED0Ev>:
 8010d72:	b510      	push	{r4, lr}
 8010d74:	4604      	mov	r4, r0
 8010d76:	2110      	movs	r1, #16
 8010d78:	f016 fb89 	bl	802748e <_ZdlPvj>
 8010d7c:	4620      	mov	r0, r4
 8010d7e:	bd10      	pop	{r4, pc}

08010d80 <_ZN8touchgfx14AdjustElements12handleInsertERNS_8DrawableE>:
 8010d80:	4603      	mov	r3, r0
 8010d82:	4608      	mov	r0, r1
 8010d84:	789a      	ldrb	r2, [r3, #2]
 8010d86:	b992      	cbnz	r2, 8010dae <_ZN8touchgfx14AdjustElements12handleInsertERNS_8DrawableE+0x2e>
 8010d88:	685a      	ldr	r2, [r3, #4]
 8010d8a:	428a      	cmp	r2, r1
 8010d8c:	d102      	bne.n	8010d94 <_ZN8touchgfx14AdjustElements12handleInsertERNS_8DrawableE+0x14>
 8010d8e:	2201      	movs	r2, #1
 8010d90:	709a      	strb	r2, [r3, #2]
 8010d92:	4770      	bx	lr
 8010d94:	7a1a      	ldrb	r2, [r3, #8]
 8010d96:	2a01      	cmp	r2, #1
 8010d98:	d104      	bne.n	8010da4 <_ZN8touchgfx14AdjustElements12handleInsertERNS_8DrawableE+0x24>
 8010d9a:	88ca      	ldrh	r2, [r1, #6]
 8010d9c:	8949      	ldrh	r1, [r1, #10]
 8010d9e:	440a      	add	r2, r1
 8010da0:	801a      	strh	r2, [r3, #0]
 8010da2:	4770      	bx	lr
 8010da4:	2a02      	cmp	r2, #2
 8010da6:	d116      	bne.n	8010dd6 <_ZN8touchgfx14AdjustElements12handleInsertERNS_8DrawableE+0x56>
 8010da8:	888a      	ldrh	r2, [r1, #4]
 8010daa:	8909      	ldrh	r1, [r1, #8]
 8010dac:	e7f7      	b.n	8010d9e <_ZN8touchgfx14AdjustElements12handleInsertERNS_8DrawableE+0x1e>
 8010dae:	7a1a      	ldrb	r2, [r3, #8]
 8010db0:	2a01      	cmp	r2, #1
 8010db2:	d107      	bne.n	8010dc4 <_ZN8touchgfx14AdjustElements12handleInsertERNS_8DrawableE+0x44>
 8010db4:	685b      	ldr	r3, [r3, #4]
 8010db6:	8959      	ldrh	r1, [r3, #10]
 8010db8:	88c3      	ldrh	r3, [r0, #6]
 8010dba:	4419      	add	r1, r3
 8010dbc:	6803      	ldr	r3, [r0, #0]
 8010dbe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010dc0:	b209      	sxth	r1, r1
 8010dc2:	4718      	bx	r3
 8010dc4:	2a02      	cmp	r2, #2
 8010dc6:	d106      	bne.n	8010dd6 <_ZN8touchgfx14AdjustElements12handleInsertERNS_8DrawableE+0x56>
 8010dc8:	685b      	ldr	r3, [r3, #4]
 8010dca:	8919      	ldrh	r1, [r3, #8]
 8010dcc:	8883      	ldrh	r3, [r0, #4]
 8010dce:	4419      	add	r1, r3
 8010dd0:	6803      	ldr	r3, [r0, #0]
 8010dd2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010dd4:	e7f4      	b.n	8010dc0 <_ZN8touchgfx14AdjustElements12handleInsertERNS_8DrawableE+0x40>
 8010dd6:	4770      	bx	lr

08010dd8 <_ZN8touchgfx10ListLayout9removeAllEv>:
 8010dd8:	2200      	movs	r2, #0
 8010dda:	b510      	push	{r4, lr}
 8010ddc:	4604      	mov	r4, r0
 8010dde:	85c2      	strh	r2, [r0, #46]	@ 0x2e
 8010de0:	4611      	mov	r1, r2
 8010de2:	f7fe fca1 	bl	800f728 <_ZN8touchgfx8Drawable14setWidthHeightEss>
 8010de6:	4620      	mov	r0, r4
 8010de8:	f7fe ff12 	bl	800fc10 <_ZN8touchgfx9Container9removeAllEv>
 8010dec:	6960      	ldr	r0, [r4, #20]
 8010dee:	b120      	cbz	r0, 8010dfa <_ZN8touchgfx10ListLayout9removeAllEv+0x22>
 8010df0:	6803      	ldr	r3, [r0, #0]
 8010df2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010df6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010df8:	4718      	bx	r3
 8010dfa:	bd10      	pop	{r4, pc}

08010dfc <_ZN8touchgfx10ListLayout12setDirectionENS_9DirectionE>:
 8010dfc:	b530      	push	{r4, r5, lr}
 8010dfe:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
 8010e02:	b085      	sub	sp, #20
 8010e04:	4604      	mov	r4, r0
 8010e06:	428b      	cmp	r3, r1
 8010e08:	d017      	beq.n	8010e3a <_ZN8touchgfx10ListLayout12setDirectionENS_9DirectionE+0x3e>
 8010e0a:	2500      	movs	r5, #0
 8010e0c:	f880 102c 	strb.w	r1, [r0, #44]	@ 0x2c
 8010e10:	85c5      	strh	r5, [r0, #46]	@ 0x2e
 8010e12:	462a      	mov	r2, r5
 8010e14:	4629      	mov	r1, r5
 8010e16:	f7fe fc87 	bl	800f728 <_ZN8touchgfx8Drawable14setWidthHeightEss>
 8010e1a:	4b09      	ldr	r3, [pc, #36]	@ (8010e40 <_ZN8touchgfx10ListLayout12setDirectionENS_9DirectionE+0x44>)
 8010e1c:	4620      	mov	r0, r4
 8010e1e:	4669      	mov	r1, sp
 8010e20:	e9cd 3400 	strd	r3, r4, [sp]
 8010e24:	4b07      	ldr	r3, [pc, #28]	@ (8010e44 <_ZN8touchgfx10ListLayout12setDirectionENS_9DirectionE+0x48>)
 8010e26:	e9cd 3502 	strd	r3, r5, [sp, #8]
 8010e2a:	6823      	ldr	r3, [r4, #0]
 8010e2c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8010e2e:	4798      	blx	r3
 8010e30:	6960      	ldr	r0, [r4, #20]
 8010e32:	b110      	cbz	r0, 8010e3a <_ZN8touchgfx10ListLayout12setDirectionENS_9DirectionE+0x3e>
 8010e34:	6803      	ldr	r3, [r0, #0]
 8010e36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010e38:	4798      	blx	r3
 8010e3a:	b005      	add	sp, #20
 8010e3c:	bd30      	pop	{r4, r5, pc}
 8010e3e:	bf00      	nop
 8010e40:	0802c98c 	.word	0x0802c98c
 8010e44:	08010ead 	.word	0x08010ead

08010e48 <_ZN8touchgfx10ListLayout20internalAddElementAtERNS_8DrawableEs>:
 8010e48:	b538      	push	{r3, r4, r5, lr}
 8010e4a:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
 8010e4e:	460d      	mov	r5, r1
 8010e50:	4604      	mov	r4, r0
 8010e52:	4611      	mov	r1, r2
 8010e54:	2b01      	cmp	r3, #1
 8010e56:	d002      	beq.n	8010e5e <_ZN8touchgfx10ListLayout20internalAddElementAtERNS_8DrawableEs+0x16>
 8010e58:	2b02      	cmp	r3, #2
 8010e5a:	d015      	beq.n	8010e88 <_ZN8touchgfx10ListLayout20internalAddElementAtERNS_8DrawableEs+0x40>
 8010e5c:	bd38      	pop	{r3, r4, r5, pc}
 8010e5e:	f9b5 3008 	ldrsh.w	r3, [r5, #8]
 8010e62:	f9b0 2008 	ldrsh.w	r2, [r0, #8]
 8010e66:	429a      	cmp	r2, r3
 8010e68:	bfb8      	it	lt
 8010e6a:	8103      	strhlt	r3, [r0, #8]
 8010e6c:	8943      	ldrh	r3, [r0, #10]
 8010e6e:	896a      	ldrh	r2, [r5, #10]
 8010e70:	4413      	add	r3, r2
 8010e72:	460a      	mov	r2, r1
 8010e74:	2100      	movs	r1, #0
 8010e76:	8143      	strh	r3, [r0, #10]
 8010e78:	4628      	mov	r0, r5
 8010e7a:	f7f3 f8fe 	bl	800407a <_ZN8touchgfx8Drawable5setXYEss>
 8010e7e:	8de3      	ldrh	r3, [r4, #46]	@ 0x2e
 8010e80:	896a      	ldrh	r2, [r5, #10]
 8010e82:	4413      	add	r3, r2
 8010e84:	85e3      	strh	r3, [r4, #46]	@ 0x2e
 8010e86:	e7e9      	b.n	8010e5c <_ZN8touchgfx10ListLayout20internalAddElementAtERNS_8DrawableEs+0x14>
 8010e88:	f9b5 300a 	ldrsh.w	r3, [r5, #10]
 8010e8c:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8010e90:	429a      	cmp	r2, r3
 8010e92:	bfb8      	it	lt
 8010e94:	8143      	strhlt	r3, [r0, #10]
 8010e96:	8903      	ldrh	r3, [r0, #8]
 8010e98:	892a      	ldrh	r2, [r5, #8]
 8010e9a:	4413      	add	r3, r2
 8010e9c:	2200      	movs	r2, #0
 8010e9e:	8103      	strh	r3, [r0, #8]
 8010ea0:	4628      	mov	r0, r5
 8010ea2:	f7f3 f8ea 	bl	800407a <_ZN8touchgfx8Drawable5setXYEss>
 8010ea6:	8de3      	ldrh	r3, [r4, #46]	@ 0x2e
 8010ea8:	892a      	ldrh	r2, [r5, #8]
 8010eaa:	e7ea      	b.n	8010e82 <_ZN8touchgfx10ListLayout20internalAddElementAtERNS_8DrawableEs+0x3a>

08010eac <_ZN8touchgfx10ListLayout18internalAddElementERNS_8DrawableE>:
 8010eac:	f9b0 202e 	ldrsh.w	r2, [r0, #46]	@ 0x2e
 8010eb0:	f7ff bfca 	b.w	8010e48 <_ZN8touchgfx10ListLayout20internalAddElementAtERNS_8DrawableEs>

08010eb4 <_ZN8touchgfx10ListLayout3addERNS_8DrawableE>:
 8010eb4:	b570      	push	{r4, r5, r6, lr}
 8010eb6:	4604      	mov	r4, r0
 8010eb8:	460d      	mov	r5, r1
 8010eba:	f7ff fff7 	bl	8010eac <_ZN8touchgfx10ListLayout18internalAddElementERNS_8DrawableE>
 8010ebe:	4620      	mov	r0, r4
 8010ec0:	4629      	mov	r1, r5
 8010ec2:	f7fe fe98 	bl	800fbf6 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8010ec6:	6960      	ldr	r0, [r4, #20]
 8010ec8:	b120      	cbz	r0, 8010ed4 <_ZN8touchgfx10ListLayout3addERNS_8DrawableE+0x20>
 8010eca:	6803      	ldr	r3, [r0, #0]
 8010ecc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010ed0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010ed2:	4718      	bx	r3
 8010ed4:	bd70      	pop	{r4, r5, r6, pc}
	...

08010ed8 <_ZN8touchgfx10ListLayout6insertEPNS_8DrawableERS1_>:
 8010ed8:	b530      	push	{r4, r5, lr}
 8010eda:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8010edc:	b089      	sub	sp, #36	@ 0x24
 8010ede:	4604      	mov	r4, r0
 8010ee0:	4615      	mov	r5, r2
 8010ee2:	b92b      	cbnz	r3, 8010ef0 <_ZN8touchgfx10ListLayout6insertEPNS_8DrawableERS1_+0x18>
 8010ee4:	6803      	ldr	r3, [r0, #0]
 8010ee6:	4611      	mov	r1, r2
 8010ee8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8010eea:	4798      	blx	r3
 8010eec:	b009      	add	sp, #36	@ 0x24
 8010eee:	bd30      	pop	{r4, r5, pc}
 8010ef0:	f7fe fed9 	bl	800fca6 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_>
 8010ef4:	f894 202c 	ldrb.w	r2, [r4, #44]	@ 0x2c
 8010ef8:	2300      	movs	r3, #0
 8010efa:	a904      	add	r1, sp, #16
 8010efc:	f88d 200c 	strb.w	r2, [sp, #12]
 8010f00:	4620      	mov	r0, r4
 8010f02:	4a0e      	ldr	r2, [pc, #56]	@ (8010f3c <_ZN8touchgfx10ListLayout6insertEPNS_8DrawableERS1_+0x64>)
 8010f04:	f8ad 3004 	strh.w	r3, [sp, #4]
 8010f08:	9204      	str	r2, [sp, #16]
 8010f0a:	aa01      	add	r2, sp, #4
 8010f0c:	f88d 3006 	strb.w	r3, [sp, #6]
 8010f10:	9205      	str	r2, [sp, #20]
 8010f12:	4a0b      	ldr	r2, [pc, #44]	@ (8010f40 <_ZN8touchgfx10ListLayout6insertEPNS_8DrawableERS1_+0x68>)
 8010f14:	9502      	str	r5, [sp, #8]
 8010f16:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8010f1a:	6823      	ldr	r3, [r4, #0]
 8010f1c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8010f1e:	4798      	blx	r3
 8010f20:	4620      	mov	r0, r4
 8010f22:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
 8010f26:	4629      	mov	r1, r5
 8010f28:	f7ff ff8e 	bl	8010e48 <_ZN8touchgfx10ListLayout20internalAddElementAtERNS_8DrawableEs>
 8010f2c:	6960      	ldr	r0, [r4, #20]
 8010f2e:	2800      	cmp	r0, #0
 8010f30:	d0dc      	beq.n	8010eec <_ZN8touchgfx10ListLayout6insertEPNS_8DrawableERS1_+0x14>
 8010f32:	6803      	ldr	r3, [r0, #0]
 8010f34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010f36:	4798      	blx	r3
 8010f38:	e7d8      	b.n	8010eec <_ZN8touchgfx10ListLayout6insertEPNS_8DrawableERS1_+0x14>
 8010f3a:	bf00      	nop
 8010f3c:	0802c9a4 	.word	0x0802c9a4
 8010f40:	08010d81 	.word	0x08010d81

08010f44 <_ZN8touchgfx10ListLayout21internalRemoveElementERNS_8DrawableEs>:
 8010f44:	b538      	push	{r3, r4, r5, lr}
 8010f46:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
 8010f4a:	4604      	mov	r4, r0
 8010f4c:	460d      	mov	r5, r1
 8010f4e:	2b01      	cmp	r3, #1
 8010f50:	d002      	beq.n	8010f58 <_ZN8touchgfx10ListLayout21internalRemoveElementERNS_8DrawableEs+0x14>
 8010f52:	2b02      	cmp	r3, #2
 8010f54:	d018      	beq.n	8010f88 <_ZN8touchgfx10ListLayout21internalRemoveElementERNS_8DrawableEs+0x44>
 8010f56:	bd38      	pop	{r3, r4, r5, pc}
 8010f58:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
 8010f5c:	4293      	cmp	r3, r2
 8010f5e:	8943      	ldrh	r3, [r0, #10]
 8010f60:	bfc8      	it	gt
 8010f62:	8102      	strhgt	r2, [r0, #8]
 8010f64:	894a      	ldrh	r2, [r1, #10]
 8010f66:	1a9b      	subs	r3, r3, r2
 8010f68:	8143      	strh	r3, [r0, #10]
 8010f6a:	4628      	mov	r0, r5
 8010f6c:	680b      	ldr	r3, [r1, #0]
 8010f6e:	2100      	movs	r1, #0
 8010f70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010f72:	4798      	blx	r3
 8010f74:	682b      	ldr	r3, [r5, #0]
 8010f76:	2100      	movs	r1, #0
 8010f78:	4628      	mov	r0, r5
 8010f7a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010f7c:	4798      	blx	r3
 8010f7e:	8de3      	ldrh	r3, [r4, #46]	@ 0x2e
 8010f80:	896a      	ldrh	r2, [r5, #10]
 8010f82:	1a9b      	subs	r3, r3, r2
 8010f84:	85e3      	strh	r3, [r4, #46]	@ 0x2e
 8010f86:	e7e6      	b.n	8010f56 <_ZN8touchgfx10ListLayout21internalRemoveElementERNS_8DrawableEs+0x12>
 8010f88:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 8010f8c:	4293      	cmp	r3, r2
 8010f8e:	8903      	ldrh	r3, [r0, #8]
 8010f90:	bfc8      	it	gt
 8010f92:	8142      	strhgt	r2, [r0, #10]
 8010f94:	890a      	ldrh	r2, [r1, #8]
 8010f96:	1a9b      	subs	r3, r3, r2
 8010f98:	8103      	strh	r3, [r0, #8]
 8010f9a:	4628      	mov	r0, r5
 8010f9c:	680b      	ldr	r3, [r1, #0]
 8010f9e:	2100      	movs	r1, #0
 8010fa0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010fa2:	4798      	blx	r3
 8010fa4:	682b      	ldr	r3, [r5, #0]
 8010fa6:	2100      	movs	r1, #0
 8010fa8:	4628      	mov	r0, r5
 8010faa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010fac:	4798      	blx	r3
 8010fae:	8de3      	ldrh	r3, [r4, #46]	@ 0x2e
 8010fb0:	892a      	ldrh	r2, [r5, #8]
 8010fb2:	e7e6      	b.n	8010f82 <_ZN8touchgfx10ListLayout21internalRemoveElementERNS_8DrawableEs+0x3e>

08010fb4 <_ZN8touchgfx10ListLayout6removeERNS_8DrawableE>:
 8010fb4:	b530      	push	{r4, r5, lr}
 8010fb6:	b089      	sub	sp, #36	@ 0x24
 8010fb8:	f890 202c 	ldrb.w	r2, [r0, #44]	@ 0x2c
 8010fbc:	2300      	movs	r3, #0
 8010fbe:	460d      	mov	r5, r1
 8010fc0:	f88d 200c 	strb.w	r2, [sp, #12]
 8010fc4:	4604      	mov	r4, r0
 8010fc6:	4a12      	ldr	r2, [pc, #72]	@ (8011010 <_ZN8touchgfx10ListLayout6removeERNS_8DrawableE+0x5c>)
 8010fc8:	f8ad 3004 	strh.w	r3, [sp, #4]
 8010fcc:	9204      	str	r2, [sp, #16]
 8010fce:	aa01      	add	r2, sp, #4
 8010fd0:	f88d 3006 	strb.w	r3, [sp, #6]
 8010fd4:	9205      	str	r2, [sp, #20]
 8010fd6:	4a0f      	ldr	r2, [pc, #60]	@ (8011014 <_ZN8touchgfx10ListLayout6removeERNS_8DrawableE+0x60>)
 8010fd8:	9102      	str	r1, [sp, #8]
 8010fda:	a904      	add	r1, sp, #16
 8010fdc:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8010fe0:	6803      	ldr	r3, [r0, #0]
 8010fe2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8010fe4:	4798      	blx	r3
 8010fe6:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8010fea:	b14b      	cbz	r3, 8011000 <_ZN8touchgfx10ListLayout6removeERNS_8DrawableE+0x4c>
 8010fec:	4629      	mov	r1, r5
 8010fee:	4620      	mov	r0, r4
 8010ff0:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
 8010ff4:	f7ff ffa6 	bl	8010f44 <_ZN8touchgfx10ListLayout21internalRemoveElementERNS_8DrawableEs>
 8010ff8:	4629      	mov	r1, r5
 8010ffa:	4620      	mov	r0, r4
 8010ffc:	f7fe fe3c 	bl	800fc78 <_ZN8touchgfx9Container6removeERNS_8DrawableE>
 8011000:	6960      	ldr	r0, [r4, #20]
 8011002:	b110      	cbz	r0, 801100a <_ZN8touchgfx10ListLayout6removeERNS_8DrawableE+0x56>
 8011004:	6803      	ldr	r3, [r0, #0]
 8011006:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011008:	4798      	blx	r3
 801100a:	b009      	add	sp, #36	@ 0x24
 801100c:	bd30      	pop	{r4, r5, pc}
 801100e:	bf00      	nop
 8011010:	0802c9a4 	.word	0x0802c9a4
 8011014:	08010c83 	.word	0x08010c83

08011018 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEt>:
 8011018:	6803      	ldr	r3, [r0, #0]
 801101a:	b513      	push	{r0, r1, r4, lr}
 801101c:	f8d3 40a8 	ldr.w	r4, [r3, #168]	@ 0xa8
 8011020:	2300      	movs	r3, #0
 8011022:	e9cd 3300 	strd	r3, r3, [sp]
 8011026:	466b      	mov	r3, sp
 8011028:	47a0      	blx	r4
 801102a:	b002      	add	sp, #8
 801102c:	bd10      	pop	{r4, pc}

0801102e <_ZN8touchgfx3HAL16flushFrameBufferEv>:
 801102e:	2301      	movs	r3, #1
 8011030:	f880 304b 	strb.w	r3, [r0, #75]	@ 0x4b
 8011034:	f880 306d 	strb.w	r3, [r0, #109]	@ 0x6d
 8011038:	4770      	bx	lr

0801103a <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>:
 801103a:	2301      	movs	r3, #1
 801103c:	f880 304b 	strb.w	r3, [r0, #75]	@ 0x4b
 8011040:	f880 306d 	strb.w	r3, [r0, #109]	@ 0x6d
 8011044:	4770      	bx	lr

08011046 <_ZN8touchgfx3HAL17allowDMATransfersEv>:
 8011046:	6843      	ldr	r3, [r0, #4]
 8011048:	2201      	movs	r2, #1
 801104a:	725a      	strb	r2, [r3, #9]
 801104c:	6840      	ldr	r0, [r0, #4]
 801104e:	6803      	ldr	r3, [r0, #0]
 8011050:	691b      	ldr	r3, [r3, #16]
 8011052:	4718      	bx	r3

08011054 <_ZN8touchgfx3HAL8flushDMAEv>:
 8011054:	6840      	ldr	r0, [r0, #4]
 8011056:	6803      	ldr	r3, [r0, #0]
 8011058:	689b      	ldr	r3, [r3, #8]
 801105a:	4718      	bx	r3

0801105c <_ZN8touchgfx3HAL8blitCopyEPKtttttthbtNS_6Bitmap12BitmapFormatES4_b>:
 801105c:	b530      	push	{r4, r5, lr}
 801105e:	b08b      	sub	sp, #44	@ 0x2c
 8011060:	6804      	ldr	r4, [r0, #0]
 8011062:	f89d 5058 	ldrb.w	r5, [sp, #88]	@ 0x58
 8011066:	9509      	str	r5, [sp, #36]	@ 0x24
 8011068:	f89d 5054 	ldrb.w	r5, [sp, #84]	@ 0x54
 801106c:	9508      	str	r5, [sp, #32]
 801106e:	f89d 5050 	ldrb.w	r5, [sp, #80]	@ 0x50
 8011072:	9507      	str	r5, [sp, #28]
 8011074:	f8bd 504c 	ldrh.w	r5, [sp, #76]	@ 0x4c
 8011078:	9506      	str	r5, [sp, #24]
 801107a:	f89d 5048 	ldrb.w	r5, [sp, #72]	@ 0x48
 801107e:	9505      	str	r5, [sp, #20]
 8011080:	f89d 5044 	ldrb.w	r5, [sp, #68]	@ 0x44
 8011084:	9504      	str	r5, [sp, #16]
 8011086:	f8bd 5040 	ldrh.w	r5, [sp, #64]	@ 0x40
 801108a:	9503      	str	r5, [sp, #12]
 801108c:	f8bd 503c 	ldrh.w	r5, [sp, #60]	@ 0x3c
 8011090:	9502      	str	r5, [sp, #8]
 8011092:	f8bd 5038 	ldrh.w	r5, [sp, #56]	@ 0x38
 8011096:	e9cd 3500 	strd	r3, r5, [sp]
 801109a:	4613      	mov	r3, r2
 801109c:	6be4      	ldr	r4, [r4, #60]	@ 0x3c
 801109e:	2200      	movs	r2, #0
 80110a0:	47a0      	blx	r4
 80110a2:	b00b      	add	sp, #44	@ 0x2c
 80110a4:	bd30      	pop	{r4, r5, pc}
	...

080110a8 <_ZN8touchgfx3HAL10beginFrameEv>:
 80110a8:	4b04      	ldr	r3, [pc, #16]	@ (80110bc <_ZN8touchgfx3HAL10beginFrameEv+0x14>)
 80110aa:	781b      	ldrb	r3, [r3, #0]
 80110ac:	b123      	cbz	r3, 80110b8 <_ZN8touchgfx3HAL10beginFrameEv+0x10>
 80110ae:	f890 006e 	ldrb.w	r0, [r0, #110]	@ 0x6e
 80110b2:	f080 0001 	eor.w	r0, r0, #1
 80110b6:	4770      	bx	lr
 80110b8:	2001      	movs	r0, #1
 80110ba:	4770      	bx	lr
 80110bc:	24028e1e 	.word	0x24028e1e

080110c0 <_ZN8touchgfx3HAL8endFrameEv>:
 80110c0:	b510      	push	{r4, lr}
 80110c2:	4604      	mov	r4, r0
 80110c4:	6840      	ldr	r0, [r0, #4]
 80110c6:	6803      	ldr	r3, [r0, #0]
 80110c8:	689b      	ldr	r3, [r3, #8]
 80110ca:	4798      	blx	r3
 80110cc:	f894 306d 	ldrb.w	r3, [r4, #109]	@ 0x6d
 80110d0:	b113      	cbz	r3, 80110d8 <_ZN8touchgfx3HAL8endFrameEv+0x18>
 80110d2:	2301      	movs	r3, #1
 80110d4:	f884 306e 	strb.w	r3, [r4, #110]	@ 0x6e
 80110d8:	bd10      	pop	{r4, pc}

080110da <_ZN8touchgfx3HAL10initializeEv>:
 80110da:	b510      	push	{r4, lr}
 80110dc:	4604      	mov	r4, r0
 80110de:	f7f1 fc49 	bl	8002974 <_ZN8touchgfx10OSWrappers10initializeEv>
 80110e2:	f7f0 fc9f 	bl	8001a24 <_ZN8touchgfx4GPIO4initEv>
 80110e6:	6860      	ldr	r0, [r4, #4]
 80110e8:	6803      	ldr	r3, [r0, #0]
 80110ea:	68db      	ldr	r3, [r3, #12]
 80110ec:	4798      	blx	r3
 80110ee:	68e0      	ldr	r0, [r4, #12]
 80110f0:	6803      	ldr	r3, [r0, #0]
 80110f2:	689b      	ldr	r3, [r3, #8]
 80110f4:	4798      	blx	r3
 80110f6:	6823      	ldr	r3, [r4, #0]
 80110f8:	4620      	mov	r0, r4
 80110fa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80110fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011100:	4718      	bx	r3
	...

08011104 <_ZN8touchgfx3HAL4tickEv>:
 8011104:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8011106:	6803      	ldr	r3, [r0, #0]
 8011108:	4604      	mov	r4, r0
 801110a:	4d5b      	ldr	r5, [pc, #364]	@ (8011278 <_ZN8touchgfx3HAL4tickEv+0x174>)
 801110c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8011110:	4798      	blx	r3
 8011112:	2800      	cmp	r0, #0
 8011114:	f000 8095 	beq.w	8011242 <_ZN8touchgfx3HAL4tickEv+0x13e>
 8011118:	2001      	movs	r0, #1
 801111a:	2600      	movs	r6, #0
 801111c:	f7f0 fbe8 	bl	80018f0 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 8011120:	f894 306a 	ldrb.w	r3, [r4, #106]	@ 0x6a
 8011124:	f884 604b 	strb.w	r6, [r4, #75]	@ 0x4b
 8011128:	f884 306b 	strb.w	r3, [r4, #107]	@ 0x6b
 801112c:	f894 3079 	ldrb.w	r3, [r4, #121]	@ 0x79
 8011130:	f884 606a 	strb.w	r6, [r4, #106]	@ 0x6a
 8011134:	b133      	cbz	r3, 8011144 <_ZN8touchgfx3HAL4tickEv+0x40>
 8011136:	6823      	ldr	r3, [r4, #0]
 8011138:	4620      	mov	r0, r4
 801113a:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 801113e:	4798      	blx	r3
 8011140:	f884 6079 	strb.w	r6, [r4, #121]	@ 0x79
 8011144:	f894 304a 	ldrb.w	r3, [r4, #74]	@ 0x4a
 8011148:	2601      	movs	r6, #1
 801114a:	6862      	ldr	r2, [r4, #4]
 801114c:	f083 0301 	eor.w	r3, r3, #1
 8011150:	702e      	strb	r6, [r5, #0]
 8011152:	7253      	strb	r3, [r2, #9]
 8011154:	f006 fe76 	bl	8017e44 <_ZN8touchgfx11Application11getInstanceEv>
 8011158:	6803      	ldr	r3, [r0, #0]
 801115a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801115c:	4798      	blx	r3
 801115e:	f894 306b 	ldrb.w	r3, [r4, #107]	@ 0x6b
 8011162:	b90b      	cbnz	r3, 8011168 <_ZN8touchgfx3HAL4tickEv+0x64>
 8011164:	f884 606b 	strb.w	r6, [r4, #107]	@ 0x6b
 8011168:	f006 fe6c 	bl	8017e44 <_ZN8touchgfx11Application11getInstanceEv>
 801116c:	6803      	ldr	r3, [r0, #0]
 801116e:	695b      	ldr	r3, [r3, #20]
 8011170:	4798      	blx	r3
 8011172:	6de0      	ldr	r0, [r4, #92]	@ 0x5c
 8011174:	6803      	ldr	r3, [r0, #0]
 8011176:	691b      	ldr	r3, [r3, #16]
 8011178:	4798      	blx	r3
 801117a:	f894 306b 	ldrb.w	r3, [r4, #107]	@ 0x6b
 801117e:	f894 206c 	ldrb.w	r2, [r4, #108]	@ 0x6c
 8011182:	3b01      	subs	r3, #1
 8011184:	b2db      	uxtb	r3, r3
 8011186:	f884 306b 	strb.w	r3, [r4, #107]	@ 0x6b
 801118a:	b10a      	cbz	r2, 8011190 <_ZN8touchgfx3HAL4tickEv+0x8c>
 801118c:	2b00      	cmp	r3, #0
 801118e:	d1eb      	bne.n	8011168 <_ZN8touchgfx3HAL4tickEv+0x64>
 8011190:	4a3a      	ldr	r2, [pc, #232]	@ (801127c <_ZN8touchgfx3HAL4tickEv+0x178>)
 8011192:	f994 1068 	ldrsb.w	r1, [r4, #104]	@ 0x68
 8011196:	7813      	ldrb	r3, [r2, #0]
 8011198:	3301      	adds	r3, #1
 801119a:	b25b      	sxtb	r3, r3
 801119c:	4299      	cmp	r1, r3
 801119e:	7013      	strb	r3, [r2, #0]
 80111a0:	dc10      	bgt.n	80111c4 <_ZN8touchgfx3HAL4tickEv+0xc0>
 80111a2:	2300      	movs	r3, #0
 80111a4:	68e0      	ldr	r0, [r4, #12]
 80111a6:	a902      	add	r1, sp, #8
 80111a8:	7013      	strb	r3, [r2, #0]
 80111aa:	aa03      	add	r2, sp, #12
 80111ac:	6803      	ldr	r3, [r0, #0]
 80111ae:	68db      	ldr	r3, [r3, #12]
 80111b0:	4798      	blx	r3
 80111b2:	6823      	ldr	r3, [r4, #0]
 80111b4:	2800      	cmp	r0, #0
 80111b6:	d050      	beq.n	801125a <_ZN8touchgfx3HAL4tickEv+0x156>
 80111b8:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80111bc:	4620      	mov	r0, r4
 80111be:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 80111c2:	4798      	blx	r3
 80111c4:	2300      	movs	r3, #0
 80111c6:	6960      	ldr	r0, [r4, #20]
 80111c8:	f88d 3007 	strb.w	r3, [sp, #7]
 80111cc:	b158      	cbz	r0, 80111e6 <_ZN8touchgfx3HAL4tickEv+0xe2>
 80111ce:	6803      	ldr	r3, [r0, #0]
 80111d0:	f10d 0107 	add.w	r1, sp, #7
 80111d4:	68db      	ldr	r3, [r3, #12]
 80111d6:	4798      	blx	r3
 80111d8:	b128      	cbz	r0, 80111e6 <_ZN8touchgfx3HAL4tickEv+0xe2>
 80111da:	6de0      	ldr	r0, [r4, #92]	@ 0x5c
 80111dc:	f89d 1007 	ldrb.w	r1, [sp, #7]
 80111e0:	6803      	ldr	r3, [r0, #0]
 80111e2:	68db      	ldr	r3, [r3, #12]
 80111e4:	4798      	blx	r3
 80111e6:	f104 001c 	add.w	r0, r4, #28
 80111ea:	f014 fc69 	bl	8025ac0 <_ZN8touchgfx8Gestures4tickEv>
 80111ee:	f894 3070 	ldrb.w	r3, [r4, #112]	@ 0x70
 80111f2:	b30b      	cbz	r3, 8011238 <_ZN8touchgfx3HAL4tickEv+0x134>
 80111f4:	6920      	ldr	r0, [r4, #16]
 80111f6:	6803      	ldr	r3, [r0, #0]
 80111f8:	691b      	ldr	r3, [r3, #16]
 80111fa:	4798      	blx	r3
 80111fc:	6f63      	ldr	r3, [r4, #116]	@ 0x74
 80111fe:	4606      	mov	r6, r0
 8011200:	b903      	cbnz	r3, 8011204 <_ZN8touchgfx3HAL4tickEv+0x100>
 8011202:	6760      	str	r0, [r4, #116]	@ 0x74
 8011204:	6f63      	ldr	r3, [r4, #116]	@ 0x74
 8011206:	4a1e      	ldr	r2, [pc, #120]	@ (8011280 <_ZN8touchgfx3HAL4tickEv+0x17c>)
 8011208:	1af3      	subs	r3, r6, r3
 801120a:	4293      	cmp	r3, r2
 801120c:	d914      	bls.n	8011238 <_ZN8touchgfx3HAL4tickEv+0x134>
 801120e:	6920      	ldr	r0, [r4, #16]
 8011210:	6803      	ldr	r3, [r0, #0]
 8011212:	699b      	ldr	r3, [r3, #24]
 8011214:	4798      	blx	r3
 8011216:	6f63      	ldr	r3, [r4, #116]	@ 0x74
 8011218:	2264      	movs	r2, #100	@ 0x64
 801121a:	1af3      	subs	r3, r6, r3
 801121c:	fbb3 f3f2 	udiv	r3, r3, r2
 8011220:	fbb0 f0f3 	udiv	r0, r0, r3
 8011224:	2800      	cmp	r0, #0
 8011226:	dc1d      	bgt.n	8011264 <_ZN8touchgfx3HAL4tickEv+0x160>
 8011228:	f884 2069 	strb.w	r2, [r4, #105]	@ 0x69
 801122c:	6920      	ldr	r0, [r4, #16]
 801122e:	2100      	movs	r1, #0
 8011230:	6803      	ldr	r3, [r0, #0]
 8011232:	69db      	ldr	r3, [r3, #28]
 8011234:	4798      	blx	r3
 8011236:	6766      	str	r6, [r4, #116]	@ 0x74
 8011238:	f006 fe04 	bl	8017e44 <_ZN8touchgfx11Application11getInstanceEv>
 801123c:	6803      	ldr	r3, [r0, #0]
 801123e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011240:	4798      	blx	r3
 8011242:	6823      	ldr	r3, [r4, #0]
 8011244:	4620      	mov	r0, r4
 8011246:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 801124a:	4798      	blx	r3
 801124c:	2001      	movs	r0, #1
 801124e:	f7f0 fb7f 	bl	8001950 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 8011252:	2300      	movs	r3, #0
 8011254:	702b      	strb	r3, [r5, #0]
 8011256:	b004      	add	sp, #16
 8011258:	bd70      	pop	{r4, r5, r6, pc}
 801125a:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 801125e:	4620      	mov	r0, r4
 8011260:	4798      	blx	r3
 8011262:	e7af      	b.n	80111c4 <_ZN8touchgfx3HAL4tickEv+0xc0>
 8011264:	2863      	cmp	r0, #99	@ 0x63
 8011266:	bfcb      	itete	gt
 8011268:	2300      	movgt	r3, #0
 801126a:	f1c0 0064 	rsble	r0, r0, #100	@ 0x64
 801126e:	f884 3069 	strbgt.w	r3, [r4, #105]	@ 0x69
 8011272:	f884 0069 	strble.w	r0, [r4, #105]	@ 0x69
 8011276:	e7d9      	b.n	801122c <_ZN8touchgfx3HAL4tickEv+0x128>
 8011278:	24028e24 	.word	0x24028e24
 801127c:	24028e25 	.word	0x24028e25
 8011280:	05f5e100 	.word	0x05f5e100

08011284 <_ZN8touchgfx3HAL17unlockFrameBufferEv>:
 8011284:	b510      	push	{r4, lr}
 8011286:	4604      	mov	r4, r0
 8011288:	f7f1 fba4 	bl	80029d4 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>
 801128c:	2200      	movs	r2, #0
 801128e:	6863      	ldr	r3, [r4, #4]
 8011290:	729a      	strb	r2, [r3, #10]
 8011292:	bd10      	pop	{r4, pc}

08011294 <_ZN8touchgfx3HAL21registerEventListenerERNS_15UIEventListenerE>:
 8011294:	65c1      	str	r1, [r0, #92]	@ 0x5c
 8011296:	301c      	adds	r0, #28
 8011298:	f014 bc10 	b.w	8025abc <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>

0801129c <_ZN8touchgfx3HAL5touchEll>:
 801129c:	b530      	push	{r4, r5, lr}
 801129e:	b087      	sub	sp, #28
 80112a0:	4604      	mov	r4, r0
 80112a2:	a804      	add	r0, sp, #16
 80112a4:	e9cd 1204 	strd	r1, r2, [sp, #16]
 80112a8:	f006 fb98 	bl	80179dc <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>
 80112ac:	9b04      	ldr	r3, [sp, #16]
 80112ae:	a906      	add	r1, sp, #24
 80112b0:	a803      	add	r0, sp, #12
 80112b2:	f8ad 300c 	strh.w	r3, [sp, #12]
 80112b6:	9b05      	ldr	r3, [sp, #20]
 80112b8:	f821 3d0a 	strh.w	r3, [r1, #-10]!
 80112bc:	f006 fbe0 	bl	8017a80 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>
 80112c0:	f894 106f 	ldrb.w	r1, [r4, #111]	@ 0x6f
 80112c4:	f104 001c 	add.w	r0, r4, #28
 80112c8:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 80112cc:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 80112d0:	b189      	cbz	r1, 80112f6 <_ZN8touchgfx3HAL5touchEll+0x5a>
 80112d2:	f8b4 5064 	ldrh.w	r5, [r4, #100]	@ 0x64
 80112d6:	9300      	str	r3, [sp, #0]
 80112d8:	4613      	mov	r3, r2
 80112da:	f8b4 1060 	ldrh.w	r1, [r4, #96]	@ 0x60
 80112de:	462a      	mov	r2, r5
 80112e0:	f014 fbfc 	bl	8025adc <_ZN8touchgfx8Gestures17registerDragEventEtttt>
 80112e4:	b128      	cbz	r0, 80112f2 <_ZN8touchgfx3HAL5touchEll+0x56>
 80112e6:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 80112ea:	6623      	str	r3, [r4, #96]	@ 0x60
 80112ec:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 80112f0:	6663      	str	r3, [r4, #100]	@ 0x64
 80112f2:	b007      	add	sp, #28
 80112f4:	bd30      	pop	{r4, r5, pc}
 80112f6:	f014 fc31 	bl	8025b5c <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 80112fa:	2301      	movs	r3, #1
 80112fc:	f884 306f 	strb.w	r3, [r4, #111]	@ 0x6f
 8011300:	e7f1      	b.n	80112e6 <_ZN8touchgfx3HAL5touchEll+0x4a>

08011302 <_ZN8touchgfx3HAL9blockCopyEPvPKvm>:
 8011302:	b510      	push	{r4, lr}
 8011304:	2b00      	cmp	r3, #0
 8011306:	d046      	beq.n	8011396 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 8011308:	ea81 0002 	eor.w	r0, r1, r2
 801130c:	07c4      	lsls	r4, r0, #31
 801130e:	d508      	bpl.n	8011322 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x20>
 8011310:	440b      	add	r3, r1
 8011312:	3a01      	subs	r2, #1
 8011314:	428b      	cmp	r3, r1
 8011316:	d93e      	bls.n	8011396 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 8011318:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 801131c:	f801 0b01 	strb.w	r0, [r1], #1
 8011320:	e7f8      	b.n	8011314 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x12>
 8011322:	07d0      	lsls	r0, r2, #31
 8011324:	bf42      	ittt	mi
 8011326:	f812 0b01 	ldrbmi.w	r0, [r2], #1
 801132a:	f103 33ff 	addmi.w	r3, r3, #4294967295
 801132e:	f801 0b01 	strbmi.w	r0, [r1], #1
 8011332:	2b01      	cmp	r3, #1
 8011334:	d911      	bls.n	801135a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 8011336:	ea81 0402 	eor.w	r4, r1, r2
 801133a:	4610      	mov	r0, r2
 801133c:	07a4      	lsls	r4, r4, #30
 801133e:	d022      	beq.n	8011386 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x84>
 8011340:	f023 0401 	bic.w	r4, r3, #1
 8011344:	440c      	add	r4, r1
 8011346:	428c      	cmp	r4, r1
 8011348:	4602      	mov	r2, r0
 801134a:	d904      	bls.n	8011356 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x54>
 801134c:	8812      	ldrh	r2, [r2, #0]
 801134e:	3002      	adds	r0, #2
 8011350:	f821 2b02 	strh.w	r2, [r1], #2
 8011354:	e7f7      	b.n	8011346 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x44>
 8011356:	f003 0301 	and.w	r3, r3, #1
 801135a:	f023 0003 	bic.w	r0, r3, #3
 801135e:	4408      	add	r0, r1
 8011360:	4288      	cmp	r0, r1
 8011362:	4614      	mov	r4, r2
 8011364:	d904      	bls.n	8011370 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x6e>
 8011366:	6824      	ldr	r4, [r4, #0]
 8011368:	3204      	adds	r2, #4
 801136a:	f841 4b04 	str.w	r4, [r1], #4
 801136e:	e7f7      	b.n	8011360 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x5e>
 8011370:	f003 0303 	and.w	r3, r3, #3
 8011374:	3a01      	subs	r2, #1
 8011376:	440b      	add	r3, r1
 8011378:	428b      	cmp	r3, r1
 801137a:	d90c      	bls.n	8011396 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 801137c:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 8011380:	f801 0b01 	strb.w	r0, [r1], #1
 8011384:	e7f8      	b.n	8011378 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x76>
 8011386:	0790      	lsls	r0, r2, #30
 8011388:	d0e7      	beq.n	801135a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 801138a:	f832 0b02 	ldrh.w	r0, [r2], #2
 801138e:	3b02      	subs	r3, #2
 8011390:	f821 0b02 	strh.w	r0, [r1], #2
 8011394:	e7e1      	b.n	801135a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 8011396:	2001      	movs	r0, #1
 8011398:	bd10      	pop	{r4, pc}

0801139a <_ZN8touchgfx3HAL7noTouchEv>:
 801139a:	b510      	push	{r4, lr}
 801139c:	f890 306f 	ldrb.w	r3, [r0, #111]	@ 0x6f
 80113a0:	4604      	mov	r4, r0
 80113a2:	b153      	cbz	r3, 80113ba <_ZN8touchgfx3HAL7noTouchEv+0x20>
 80113a4:	f8b0 3064 	ldrh.w	r3, [r0, #100]	@ 0x64
 80113a8:	2101      	movs	r1, #1
 80113aa:	f8b0 2060 	ldrh.w	r2, [r0, #96]	@ 0x60
 80113ae:	301c      	adds	r0, #28
 80113b0:	f014 fbd4 	bl	8025b5c <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 80113b4:	2300      	movs	r3, #0
 80113b6:	f884 306f 	strb.w	r3, [r4, #111]	@ 0x6f
 80113ba:	bd10      	pop	{r4, pc}

080113bc <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt>:
 80113bc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80113c0:	b085      	sub	sp, #20
 80113c2:	4604      	mov	r4, r0
 80113c4:	2000      	movs	r0, #0
 80113c6:	4699      	mov	r9, r3
 80113c8:	ad04      	add	r5, sp, #16
 80113ca:	460f      	mov	r7, r1
 80113cc:	4690      	mov	r8, r2
 80113ce:	f845 0d04 	str.w	r0, [r5, #-4]!
 80113d2:	69a0      	ldr	r0, [r4, #24]
 80113d4:	6806      	ldr	r6, [r0, #0]
 80113d6:	9501      	str	r5, [sp, #4]
 80113d8:	f8bd 5030 	ldrh.w	r5, [sp, #48]	@ 0x30
 80113dc:	9500      	str	r5, [sp, #0]
 80113de:	6835      	ldr	r5, [r6, #0]
 80113e0:	47a8      	blx	r5
 80113e2:	4d10      	ldr	r5, [pc, #64]	@ (8011424 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x68>)
 80113e4:	4606      	mov	r6, r0
 80113e6:	f8a5 9000 	strh.w	r9, [r5]
 80113ea:	f7f2 fd49 	bl	8003e80 <_ZN8touchgfx3HAL3lcdEv>
 80113ee:	6803      	ldr	r3, [r0, #0]
 80113f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80113f2:	4798      	blx	r3
 80113f4:	b128      	cbz	r0, 8011402 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x46>
 80113f6:	2801      	cmp	r0, #1
 80113f8:	d00b      	beq.n	8011412 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x56>
 80113fa:	4630      	mov	r0, r6
 80113fc:	b005      	add	sp, #20
 80113fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011402:	882b      	ldrh	r3, [r5, #0]
 8011404:	fb08 7203 	mla	r2, r8, r3, r7
 8011408:	9b03      	ldr	r3, [sp, #12]
 801140a:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
 801140e:	63e3      	str	r3, [r4, #60]	@ 0x3c
 8011410:	e7f3      	b.n	80113fa <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x3e>
 8011412:	882a      	ldrh	r2, [r5, #0]
 8011414:	9b03      	ldr	r3, [sp, #12]
 8011416:	fb08 7202 	mla	r2, r8, r2, r7
 801141a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801141e:	1a9a      	subs	r2, r3, r2
 8011420:	63e2      	str	r2, [r4, #60]	@ 0x3c
 8011422:	e7ea      	b.n	80113fa <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x3e>
 8011424:	24028e1a 	.word	0x24028e1a

08011428 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb>:
 8011428:	b5f0      	push	{r4, r5, r6, r7, lr}
 801142a:	b08b      	sub	sp, #44	@ 0x2c
 801142c:	4617      	mov	r7, r2
 801142e:	4604      	mov	r4, r0
 8011430:	460e      	mov	r6, r1
 8011432:	461d      	mov	r5, r3
 8011434:	f7f2 fd24 	bl	8003e80 <_ZN8touchgfx3HAL3lcdEv>
 8011438:	6803      	ldr	r3, [r0, #0]
 801143a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801143c:	4798      	blx	r3
 801143e:	f89d 3054 	ldrb.w	r3, [sp, #84]	@ 0x54
 8011442:	9007      	str	r0, [sp, #28]
 8011444:	4631      	mov	r1, r6
 8011446:	6822      	ldr	r2, [r4, #0]
 8011448:	e9cd 0308 	strd	r0, r3, [sp, #32]
 801144c:	4b0c      	ldr	r3, [pc, #48]	@ (8011480 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb+0x58>)
 801144e:	4620      	mov	r0, r4
 8011450:	881b      	ldrh	r3, [r3, #0]
 8011452:	9306      	str	r3, [sp, #24]
 8011454:	f89d 3050 	ldrb.w	r3, [sp, #80]	@ 0x50
 8011458:	9305      	str	r3, [sp, #20]
 801145a:	f89d 304c 	ldrb.w	r3, [sp, #76]	@ 0x4c
 801145e:	9304      	str	r3, [sp, #16]
 8011460:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 8011464:	9303      	str	r3, [sp, #12]
 8011466:	f8bd 3044 	ldrh.w	r3, [sp, #68]	@ 0x44
 801146a:	9302      	str	r3, [sp, #8]
 801146c:	f8bd 3040 	ldrh.w	r3, [sp, #64]	@ 0x40
 8011470:	e9cd 5300 	strd	r5, r3, [sp]
 8011474:	463b      	mov	r3, r7
 8011476:	6bd5      	ldr	r5, [r2, #60]	@ 0x3c
 8011478:	2200      	movs	r2, #0
 801147a:	47a8      	blx	r5
 801147c:	b00b      	add	sp, #44	@ 0x2c
 801147e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011480:	24028e1a 	.word	0x24028e1a

08011484 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb>:
 8011484:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011488:	4698      	mov	r8, r3
 801148a:	6803      	ldr	r3, [r0, #0]
 801148c:	b08b      	sub	sp, #44	@ 0x2c
 801148e:	4617      	mov	r7, r2
 8011490:	6bdd      	ldr	r5, [r3, #60]	@ 0x3c
 8011492:	460e      	mov	r6, r1
 8011494:	4b13      	ldr	r3, [pc, #76]	@ (80114e4 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb+0x60>)
 8011496:	4604      	mov	r4, r0
 8011498:	f8b3 9000 	ldrh.w	r9, [r3]
 801149c:	f7f2 fcf0 	bl	8003e80 <_ZN8touchgfx3HAL3lcdEv>
 80114a0:	6803      	ldr	r3, [r0, #0]
 80114a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80114a4:	4798      	blx	r3
 80114a6:	f89d 3058 	ldrb.w	r3, [sp, #88]	@ 0x58
 80114aa:	2200      	movs	r2, #0
 80114ac:	4631      	mov	r1, r6
 80114ae:	e9cd 0308 	strd	r0, r3, [sp, #32]
 80114b2:	2302      	movs	r3, #2
 80114b4:	4620      	mov	r0, r4
 80114b6:	e9cd 9306 	strd	r9, r3, [sp, #24]
 80114ba:	2301      	movs	r3, #1
 80114bc:	9305      	str	r3, [sp, #20]
 80114be:	f89d 3054 	ldrb.w	r3, [sp, #84]	@ 0x54
 80114c2:	9304      	str	r3, [sp, #16]
 80114c4:	f8bd 3050 	ldrh.w	r3, [sp, #80]	@ 0x50
 80114c8:	9303      	str	r3, [sp, #12]
 80114ca:	f8bd 304c 	ldrh.w	r3, [sp, #76]	@ 0x4c
 80114ce:	9302      	str	r3, [sp, #8]
 80114d0:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 80114d4:	e9cd 8300 	strd	r8, r3, [sp]
 80114d8:	463b      	mov	r3, r7
 80114da:	47a8      	blx	r5
 80114dc:	b00b      	add	sp, #44	@ 0x2c
 80114de:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80114e2:	bf00      	nop
 80114e4:	24028e1a 	.word	0x24028e1a

080114e8 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb>:
 80114e8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80114ec:	4698      	mov	r8, r3
 80114ee:	6803      	ldr	r3, [r0, #0]
 80114f0:	b087      	sub	sp, #28
 80114f2:	460e      	mov	r6, r1
 80114f4:	6d9d      	ldr	r5, [r3, #88]	@ 0x58
 80114f6:	4617      	mov	r7, r2
 80114f8:	4b0f      	ldr	r3, [pc, #60]	@ (8011538 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb+0x50>)
 80114fa:	4604      	mov	r4, r0
 80114fc:	f8b3 9000 	ldrh.w	r9, [r3]
 8011500:	f7f2 fcbe 	bl	8003e80 <_ZN8touchgfx3HAL3lcdEv>
 8011504:	6803      	ldr	r3, [r0, #0]
 8011506:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011508:	4798      	blx	r3
 801150a:	f89d 3044 	ldrb.w	r3, [sp, #68]	@ 0x44
 801150e:	463a      	mov	r2, r7
 8011510:	4631      	mov	r1, r6
 8011512:	f8cd 900c 	str.w	r9, [sp, #12]
 8011516:	e9cd 0304 	strd	r0, r3, [sp, #16]
 801151a:	f89d 3040 	ldrb.w	r3, [sp, #64]	@ 0x40
 801151e:	4620      	mov	r0, r4
 8011520:	9302      	str	r3, [sp, #8]
 8011522:	f8bd 303c 	ldrh.w	r3, [sp, #60]	@ 0x3c
 8011526:	9301      	str	r3, [sp, #4]
 8011528:	f8bd 3038 	ldrh.w	r3, [sp, #56]	@ 0x38
 801152c:	9300      	str	r3, [sp, #0]
 801152e:	4643      	mov	r3, r8
 8011530:	47a8      	blx	r5
 8011532:	b007      	add	sp, #28
 8011534:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011538:	24028e1a 	.word	0x24028e1a

0801153c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE>:
 801153c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011540:	4604      	mov	r4, r0
 8011542:	b08f      	sub	sp, #60	@ 0x3c
 8011544:	4610      	mov	r0, r2
 8011546:	460d      	mov	r5, r1
 8011548:	4691      	mov	r9, r2
 801154a:	461e      	mov	r6, r3
 801154c:	f00a f96a 	bl	801b824 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 8011550:	2800      	cmp	r0, #0
 8011552:	f000 809d 	beq.w	8011690 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x154>
 8011556:	6823      	ldr	r3, [r4, #0]
 8011558:	4620      	mov	r0, r4
 801155a:	f8df b198 	ldr.w	fp, [pc, #408]	@ 80116f4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>
 801155e:	f10d 0838 	add.w	r8, sp, #56	@ 0x38
 8011562:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011564:	4798      	blx	r3
 8011566:	6823      	ldr	r3, [r4, #0]
 8011568:	4620      	mov	r0, r4
 801156a:	f8df a18c 	ldr.w	sl, [pc, #396]	@ 80116f8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1bc>
 801156e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011570:	4798      	blx	r3
 8011572:	f8bb 3000 	ldrh.w	r3, [fp]
 8011576:	4f5c      	ldr	r7, [pc, #368]	@ (80116e8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 8011578:	9301      	str	r3, [sp, #4]
 801157a:	f8ba 3000 	ldrh.w	r3, [sl]
 801157e:	f828 9d1c 	strh.w	r9, [r8, #-28]!
 8011582:	4640      	mov	r0, r8
 8011584:	9302      	str	r3, [sp, #8]
 8011586:	883b      	ldrh	r3, [r7, #0]
 8011588:	9303      	str	r3, [sp, #12]
 801158a:	4b58      	ldr	r3, [pc, #352]	@ (80116ec <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 801158c:	881a      	ldrh	r2, [r3, #0]
 801158e:	9305      	str	r3, [sp, #20]
 8011590:	9204      	str	r2, [sp, #16]
 8011592:	f00a fa97 	bl	801bac4 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8011596:	8038      	strh	r0, [r7, #0]
 8011598:	4640      	mov	r0, r8
 801159a:	f00a fac7 	bl	801bb2c <_ZNK8touchgfx6Bitmap9getHeightEv>
 801159e:	9b05      	ldr	r3, [sp, #20]
 80115a0:	b280      	uxth	r0, r0
 80115a2:	8018      	strh	r0, [r3, #0]
 80115a4:	4b52      	ldr	r3, [pc, #328]	@ (80116f0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b4>)
 80115a6:	781b      	ldrb	r3, [r3, #0]
 80115a8:	2b00      	cmp	r3, #0
 80115aa:	d174      	bne.n	8011696 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x15a>
 80115ac:	883b      	ldrh	r3, [r7, #0]
 80115ae:	f8aa 0000 	strh.w	r0, [sl]
 80115b2:	f8ab 3000 	strh.w	r3, [fp]
 80115b6:	4648      	mov	r0, r9
 80115b8:	e9d4 870f 	ldrd	r8, r7, [r4, #60]	@ 0x3c
 80115bc:	f00a f932 	bl	801b824 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 80115c0:	2200      	movs	r2, #0
 80115c2:	e9c4 000f 	strd	r0, r0, [r4, #60]	@ 0x3c
 80115c6:	4611      	mov	r1, r2
 80115c8:	4628      	mov	r0, r5
 80115ca:	f9b5 9004 	ldrsh.w	r9, [r5, #4]
 80115ce:	f9b5 a006 	ldrsh.w	sl, [r5, #6]
 80115d2:	f7f2 fd52 	bl	800407a <_ZN8touchgfx8Drawable5setXYEss>
 80115d6:	2301      	movs	r3, #1
 80115d8:	f895 b025 	ldrb.w	fp, [r5, #37]	@ 0x25
 80115dc:	f885 3025 	strb.w	r3, [r5, #37]	@ 0x25
 80115e0:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 80115e4:	2b00      	cmp	r3, #0
 80115e6:	dd5c      	ble.n	80116a2 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x166>
 80115e8:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 80115ec:	2b00      	cmp	r3, #0
 80115ee:	dd58      	ble.n	80116a2 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x166>
 80115f0:	462a      	mov	r2, r5
 80115f2:	ab0a      	add	r3, sp, #40	@ 0x28
 80115f4:	f852 0f04 	ldr.w	r0, [r2, #4]!
 80115f8:	6851      	ldr	r1, [r2, #4]
 80115fa:	c303      	stmia	r3!, {r0, r1}
 80115fc:	4631      	mov	r1, r6
 80115fe:	a80a      	add	r0, sp, #40	@ 0x28
 8011600:	f7fe fc7e 	bl	800ff00 <_ZN8touchgfx4RectaNERKS0_>
 8011604:	4b38      	ldr	r3, [pc, #224]	@ (80116e8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 8011606:	2100      	movs	r1, #0
 8011608:	f9b3 2000 	ldrsh.w	r2, [r3]
 801160c:	4b37      	ldr	r3, [pc, #220]	@ (80116ec <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 801160e:	f8ad 2034 	strh.w	r2, [sp, #52]	@ 0x34
 8011612:	aa0a      	add	r2, sp, #40	@ 0x28
 8011614:	f9b3 3000 	ldrsh.w	r3, [r3]
 8011618:	910c      	str	r1, [sp, #48]	@ 0x30
 801161a:	f8ad 3036 	strh.w	r3, [sp, #54]	@ 0x36
 801161e:	ab08      	add	r3, sp, #32
 8011620:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011624:	e883 0003 	stmia.w	r3, {r0, r1}
 8011628:	4618      	mov	r0, r3
 801162a:	a90c      	add	r1, sp, #48	@ 0x30
 801162c:	f7fe fc68 	bl	800ff00 <_ZN8touchgfx4RectaNERKS0_>
 8011630:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8011632:	2b00      	cmp	r3, #0
 8011634:	d13c      	bne.n	80116b0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x174>
 8011636:	2000      	movs	r0, #0
 8011638:	f884 0058 	strb.w	r0, [r4, #88]	@ 0x58
 801163c:	2600      	movs	r6, #0
 801163e:	696b      	ldr	r3, [r5, #20]
 8011640:	a908      	add	r1, sp, #32
 8011642:	682a      	ldr	r2, [r5, #0]
 8011644:	4628      	mov	r0, r5
 8011646:	9305      	str	r3, [sp, #20]
 8011648:	616e      	str	r6, [r5, #20]
 801164a:	6892      	ldr	r2, [r2, #8]
 801164c:	4790      	blx	r2
 801164e:	9b05      	ldr	r3, [sp, #20]
 8011650:	4652      	mov	r2, sl
 8011652:	4649      	mov	r1, r9
 8011654:	616b      	str	r3, [r5, #20]
 8011656:	4628      	mov	r0, r5
 8011658:	f884 6058 	strb.w	r6, [r4, #88]	@ 0x58
 801165c:	f885 b025 	strb.w	fp, [r5, #37]	@ 0x25
 8011660:	f7f2 fd0b 	bl	800407a <_ZN8touchgfx8Drawable5setXYEss>
 8011664:	9a01      	ldr	r2, [sp, #4]
 8011666:	4b23      	ldr	r3, [pc, #140]	@ (80116f4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>)
 8011668:	4620      	mov	r0, r4
 801166a:	801a      	strh	r2, [r3, #0]
 801166c:	9a02      	ldr	r2, [sp, #8]
 801166e:	4b22      	ldr	r3, [pc, #136]	@ (80116f8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1bc>)
 8011670:	801a      	strh	r2, [r3, #0]
 8011672:	9a03      	ldr	r2, [sp, #12]
 8011674:	4b1c      	ldr	r3, [pc, #112]	@ (80116e8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 8011676:	801a      	strh	r2, [r3, #0]
 8011678:	4b1c      	ldr	r3, [pc, #112]	@ (80116ec <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 801167a:	9a04      	ldr	r2, [sp, #16]
 801167c:	801a      	strh	r2, [r3, #0]
 801167e:	6823      	ldr	r3, [r4, #0]
 8011680:	e9c4 870f 	strd	r8, r7, [r4, #60]	@ 0x3c
 8011684:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011686:	4798      	blx	r3
 8011688:	6823      	ldr	r3, [r4, #0]
 801168a:	4620      	mov	r0, r4
 801168c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801168e:	4798      	blx	r3
 8011690:	b00f      	add	sp, #60	@ 0x3c
 8011692:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011696:	883b      	ldrh	r3, [r7, #0]
 8011698:	f8ab 0000 	strh.w	r0, [fp]
 801169c:	f8aa 3000 	strh.w	r3, [sl]
 80116a0:	e789      	b.n	80115b6 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x7a>
 80116a2:	462a      	mov	r2, r5
 80116a4:	ab0a      	add	r3, sp, #40	@ 0x28
 80116a6:	f852 0f04 	ldr.w	r0, [r2, #4]!
 80116aa:	6851      	ldr	r1, [r2, #4]
 80116ac:	c303      	stmia	r3!, {r0, r1}
 80116ae:	e7a9      	b.n	8011604 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xc8>
 80116b0:	a807      	add	r0, sp, #28
 80116b2:	f00a fb7d 	bl	801bdb0 <_ZNK8touchgfx6Bitmap9getFormatEv>
 80116b6:	4606      	mov	r6, r0
 80116b8:	6ce0      	ldr	r0, [r4, #76]	@ 0x4c
 80116ba:	6803      	ldr	r3, [r0, #0]
 80116bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80116be:	4798      	blx	r3
 80116c0:	4286      	cmp	r6, r0
 80116c2:	d1b8      	bne.n	8011636 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xfa>
 80116c4:	f7f2 fbdc 	bl	8003e80 <_ZN8touchgfx3HAL3lcdEv>
 80116c8:	6803      	ldr	r3, [r0, #0]
 80116ca:	4606      	mov	r6, r0
 80116cc:	a807      	add	r0, sp, #28
 80116ce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80116d0:	9305      	str	r3, [sp, #20]
 80116d2:	f00a fb6d 	bl	801bdb0 <_ZNK8touchgfx6Bitmap9getFormatEv>
 80116d6:	9b05      	ldr	r3, [sp, #20]
 80116d8:	4601      	mov	r1, r0
 80116da:	4630      	mov	r0, r6
 80116dc:	4798      	blx	r3
 80116de:	f080 0001 	eor.w	r0, r0, #1
 80116e2:	b2c0      	uxtb	r0, r0
 80116e4:	e7a8      	b.n	8011638 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xfc>
 80116e6:	bf00      	nop
 80116e8:	24028e14 	.word	0x24028e14
 80116ec:	24028e16 	.word	0x24028e16
 80116f0:	24028e18 	.word	0x24028e18
 80116f4:	24028e1a 	.word	0x24028e1a
 80116f8:	24028e1c 	.word	0x24028e1c

080116fc <_ZN8touchgfx3HAL20getClientFrameBufferEv>:
 80116fc:	4b07      	ldr	r3, [pc, #28]	@ (801171c <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x20>)
 80116fe:	b510      	push	{r4, lr}
 8011700:	781b      	ldrb	r3, [r3, #0]
 8011702:	4604      	mov	r4, r0
 8011704:	b13b      	cbz	r3, 8011716 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 8011706:	6803      	ldr	r3, [r0, #0]
 8011708:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801170a:	4798      	blx	r3
 801170c:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 801170e:	4283      	cmp	r3, r0
 8011710:	d101      	bne.n	8011716 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 8011712:	6c20      	ldr	r0, [r4, #64]	@ 0x40
 8011714:	bd10      	pop	{r4, pc}
 8011716:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8011718:	e7fc      	b.n	8011714 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x18>
 801171a:	bf00      	nop
 801171c:	24028e1e 	.word	0x24028e1e

08011720 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt>:
 8011720:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011724:	461d      	mov	r5, r3
 8011726:	b08a      	sub	sp, #40	@ 0x28
 8011728:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801172c:	4690      	mov	r8, r2
 801172e:	f8bd 604c 	ldrh.w	r6, [sp, #76]	@ 0x4c
 8011732:	2400      	movs	r4, #0
 8011734:	4607      	mov	r7, r0
 8011736:	fb06 8505 	mla	r5, r6, r5, r8
 801173a:	9404      	str	r4, [sp, #16]
 801173c:	f88d 4020 	strb.w	r4, [sp, #32]
 8011740:	e9cd 3101 	strd	r3, r1, [sp, #4]
 8011744:	f8bd 3040 	ldrh.w	r3, [sp, #64]	@ 0x40
 8011748:	f8ad 3018 	strh.w	r3, [sp, #24]
 801174c:	f8bd 3044 	ldrh.w	r3, [sp, #68]	@ 0x44
 8011750:	f8ad 301a 	strh.w	r3, [sp, #26]
 8011754:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 8011758:	f8ad 301c 	strh.w	r3, [sp, #28]
 801175c:	f7ff ffce 	bl	80116fc <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8011760:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 8011764:	6878      	ldr	r0, [r7, #4]
 8011766:	f8ad 601e 	strh.w	r6, [sp, #30]
 801176a:	a901      	add	r1, sp, #4
 801176c:	9505      	str	r5, [sp, #20]
 801176e:	f88d 4022 	strb.w	r4, [sp, #34]	@ 0x22
 8011772:	f88d 4021 	strb.w	r4, [sp, #33]	@ 0x21
 8011776:	f88d 4023 	strb.w	r4, [sp, #35]	@ 0x23
 801177a:	f88d 4024 	strb.w	r4, [sp, #36]	@ 0x24
 801177e:	6803      	ldr	r3, [r0, #0]
 8011780:	685b      	ldr	r3, [r3, #4]
 8011782:	4798      	blx	r3
 8011784:	b00a      	add	sp, #40	@ 0x28
 8011786:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801178a <_ZN8touchgfx3HAL12blitFillWordEtttttt>:
 801178a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801178e:	b08b      	sub	sp, #44	@ 0x2c
 8011790:	2400      	movs	r4, #0
 8011792:	4691      	mov	r9, r2
 8011794:	461d      	mov	r5, r3
 8011796:	f8bd 6050 	ldrh.w	r6, [sp, #80]	@ 0x50
 801179a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 801179e:	4688      	mov	r8, r1
 80117a0:	4607      	mov	r7, r0
 80117a2:	9404      	str	r4, [sp, #16]
 80117a4:	fb06 9505 	mla	r5, r6, r5, r9
 80117a8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80117ac:	f7ff ffa6 	bl	80116fc <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 80117b0:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 80117b4:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 80117b8:	6878      	ldr	r0, [r7, #4]
 80117ba:	f8ad 3018 	strh.w	r3, [sp, #24]
 80117be:	a901      	add	r1, sp, #4
 80117c0:	f8bd 304c 	ldrh.w	r3, [sp, #76]	@ 0x4c
 80117c4:	9505      	str	r5, [sp, #20]
 80117c6:	f8ad 301a 	strh.w	r3, [sp, #26]
 80117ca:	f8ad 401c 	strh.w	r4, [sp, #28]
 80117ce:	f8ad 601e 	strh.w	r6, [sp, #30]
 80117d2:	f8cd 8010 	str.w	r8, [sp, #16]
 80117d6:	f8ad 4020 	strh.w	r4, [sp, #32]
 80117da:	f88d 4022 	strb.w	r4, [sp, #34]	@ 0x22
 80117de:	f88d 4023 	strb.w	r4, [sp, #35]	@ 0x23
 80117e2:	f88d 4024 	strb.w	r4, [sp, #36]	@ 0x24
 80117e6:	6803      	ldr	r3, [r0, #0]
 80117e8:	685b      	ldr	r3, [r3, #4]
 80117ea:	4798      	blx	r3
 80117ec:	b00b      	add	sp, #44	@ 0x2c
 80117ee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

080117f4 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b>:
 80117f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80117f8:	b08a      	sub	sp, #40	@ 0x28
 80117fa:	4698      	mov	r8, r3
 80117fc:	2300      	movs	r3, #0
 80117fe:	4606      	mov	r6, r0
 8011800:	f89d 505c 	ldrb.w	r5, [sp, #92]	@ 0x5c
 8011804:	f89d 0050 	ldrb.w	r0, [sp, #80]	@ 0x50
 8011808:	2d0b      	cmp	r5, #11
 801180a:	f89d c054 	ldrb.w	ip, [sp, #84]	@ 0x54
 801180e:	f8bd 7058 	ldrh.w	r7, [sp, #88]	@ 0x58
 8011812:	f89d 4060 	ldrb.w	r4, [sp, #96]	@ 0x60
 8011816:	9304      	str	r3, [sp, #16]
 8011818:	d137      	bne.n	801188a <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x96>
 801181a:	2380      	movs	r3, #128	@ 0x80
 801181c:	f88d 0020 	strb.w	r0, [sp, #32]
 8011820:	4630      	mov	r0, r6
 8011822:	9203      	str	r2, [sp, #12]
 8011824:	e9cd 3101 	strd	r3, r1, [sp, #4]
 8011828:	f8bd 3044 	ldrh.w	r3, [sp, #68]	@ 0x44
 801182c:	f8ad 3018 	strh.w	r3, [sp, #24]
 8011830:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 8011834:	f8ad 301a 	strh.w	r3, [sp, #26]
 8011838:	f8bd 304c 	ldrh.w	r3, [sp, #76]	@ 0x4c
 801183c:	f8ad 301c 	strh.w	r3, [sp, #28]
 8011840:	f7ff ff5c 	bl	80116fc <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8011844:	2c0b      	cmp	r4, #11
 8011846:	f8bd 2040 	ldrh.w	r2, [sp, #64]	@ 0x40
 801184a:	f8ad 701e 	strh.w	r7, [sp, #30]
 801184e:	bf94      	ite	ls
 8011850:	4b19      	ldrls	r3, [pc, #100]	@ (80118b8 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xc4>)
 8011852:	2100      	movhi	r1, #0
 8011854:	f88d 5021 	strb.w	r5, [sp, #33]	@ 0x21
 8011858:	bf98      	it	ls
 801185a:	5d19      	ldrbls	r1, [r3, r4]
 801185c:	fb02 8307 	mla	r3, r2, r7, r8
 8011860:	f88d 4022 	strb.w	r4, [sp, #34]	@ 0x22
 8011864:	10c9      	asrs	r1, r1, #3
 8011866:	fb01 0003 	mla	r0, r1, r3, r0
 801186a:	f89d 3064 	ldrb.w	r3, [sp, #100]	@ 0x64
 801186e:	a901      	add	r1, sp, #4
 8011870:	9005      	str	r0, [sp, #20]
 8011872:	f88d 3023 	strb.w	r3, [sp, #35]	@ 0x23
 8011876:	2300      	movs	r3, #0
 8011878:	6870      	ldr	r0, [r6, #4]
 801187a:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
 801187e:	6803      	ldr	r3, [r0, #0]
 8011880:	685b      	ldr	r3, [r3, #4]
 8011882:	4798      	blx	r3
 8011884:	b00a      	add	sp, #40	@ 0x28
 8011886:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801188a:	2d02      	cmp	r5, #2
 801188c:	d109      	bne.n	80118a2 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xae>
 801188e:	28ff      	cmp	r0, #255	@ 0xff
 8011890:	d105      	bne.n	801189e <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xaa>
 8011892:	f1bc 0f00 	cmp.w	ip, #0
 8011896:	bf14      	ite	ne
 8011898:	2340      	movne	r3, #64	@ 0x40
 801189a:	2320      	moveq	r3, #32
 801189c:	e7be      	b.n	801181c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 801189e:	2340      	movs	r3, #64	@ 0x40
 80118a0:	e7bc      	b.n	801181c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 80118a2:	28ff      	cmp	r0, #255	@ 0xff
 80118a4:	d105      	bne.n	80118b2 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xbe>
 80118a6:	f1bc 0f00 	cmp.w	ip, #0
 80118aa:	bf14      	ite	ne
 80118ac:	2304      	movne	r3, #4
 80118ae:	2301      	moveq	r3, #1
 80118b0:	e7b4      	b.n	801181c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 80118b2:	2304      	movs	r3, #4
 80118b4:	e7b2      	b.n	801181c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 80118b6:	bf00      	nop
 80118b8:	0802ca4c 	.word	0x0802ca4c

080118bc <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb>:
 80118bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80118c0:	b08b      	sub	sp, #44	@ 0x2c
 80118c2:	461d      	mov	r5, r3
 80118c4:	2400      	movs	r4, #0
 80118c6:	4688      	mov	r8, r1
 80118c8:	f89d 9058 	ldrb.w	r9, [sp, #88]	@ 0x58
 80118cc:	4693      	mov	fp, r2
 80118ce:	f89d 6060 	ldrb.w	r6, [sp, #96]	@ 0x60
 80118d2:	4607      	mov	r7, r0
 80118d4:	f1b9 0fff 	cmp.w	r9, #255	@ 0xff
 80118d8:	f8bd a05c 	ldrh.w	sl, [sp, #92]	@ 0x5c
 80118dc:	9404      	str	r4, [sp, #16]
 80118de:	bf14      	ite	ne
 80118e0:	2308      	movne	r3, #8
 80118e2:	2302      	moveq	r3, #2
 80118e4:	fb05 b50a 	mla	r5, r5, sl, fp
 80118e8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80118ec:	f7ff ff06 	bl	80116fc <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 80118f0:	2e0b      	cmp	r6, #11
 80118f2:	f89d 2064 	ldrb.w	r2, [sp, #100]	@ 0x64
 80118f6:	a901      	add	r1, sp, #4
 80118f8:	bf98      	it	ls
 80118fa:	4b13      	ldrls	r3, [pc, #76]	@ (8011948 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb+0x8c>)
 80118fc:	f8ad a01e 	strh.w	sl, [sp, #30]
 8011900:	bf98      	it	ls
 8011902:	5d9c      	ldrbls	r4, [r3, r6]
 8011904:	f8bd 3050 	ldrh.w	r3, [sp, #80]	@ 0x50
 8011908:	10e4      	asrs	r4, r4, #3
 801190a:	f8cd 8010 	str.w	r8, [sp, #16]
 801190e:	f8ad 3018 	strh.w	r3, [sp, #24]
 8011912:	f8bd 3054 	ldrh.w	r3, [sp, #84]	@ 0x54
 8011916:	fb04 0405 	mla	r4, r4, r5, r0
 801191a:	6878      	ldr	r0, [r7, #4]
 801191c:	f8ad 301a 	strh.w	r3, [sp, #26]
 8011920:	2300      	movs	r3, #0
 8011922:	9405      	str	r4, [sp, #20]
 8011924:	f8ad 301c 	strh.w	r3, [sp, #28]
 8011928:	f88d 9020 	strb.w	r9, [sp, #32]
 801192c:	f88d 2023 	strb.w	r2, [sp, #35]	@ 0x23
 8011930:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
 8011934:	f88d 6021 	strb.w	r6, [sp, #33]	@ 0x21
 8011938:	f88d 6022 	strb.w	r6, [sp, #34]	@ 0x22
 801193c:	6803      	ldr	r3, [r0, #0]
 801193e:	685b      	ldr	r3, [r3, #4]
 8011940:	4798      	blx	r3
 8011942:	b00b      	add	sp, #44	@ 0x2c
 8011944:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011948:	0802ca4c 	.word	0x0802ca4c

0801194c <_ZNK8touchgfx3HAL13getDstAddressEttPt>:
 801194c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011950:	461e      	mov	r6, r3
 8011952:	4b0a      	ldr	r3, [pc, #40]	@ (801197c <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x30>)
 8011954:	460f      	mov	r7, r1
 8011956:	4690      	mov	r8, r2
 8011958:	881d      	ldrh	r5, [r3, #0]
 801195a:	f7f2 fa91 	bl	8003e80 <_ZN8touchgfx3HAL3lcdEv>
 801195e:	6803      	ldr	r3, [r0, #0]
 8011960:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011962:	4798      	blx	r3
 8011964:	280b      	cmp	r0, #11
 8011966:	bf96      	itet	ls
 8011968:	4b05      	ldrls	r3, [pc, #20]	@ (8011980 <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x34>)
 801196a:	2400      	movhi	r4, #0
 801196c:	5c1c      	ldrbls	r4, [r3, r0]
 801196e:	fb08 7005 	mla	r0, r8, r5, r7
 8011972:	10e4      	asrs	r4, r4, #3
 8011974:	fb04 6000 	mla	r0, r4, r0, r6
 8011978:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801197c:	24028e1a 	.word	0x24028e1a
 8011980:	0802ca4c 	.word	0x0802ca4c

08011984 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb>:
 8011984:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011986:	b08b      	sub	sp, #44	@ 0x2c
 8011988:	461f      	mov	r7, r3
 801198a:	4604      	mov	r4, r0
 801198c:	4616      	mov	r6, r2
 801198e:	f8bd 3054 	ldrh.w	r3, [sp, #84]	@ 0x54
 8011992:	2500      	movs	r5, #0
 8011994:	e9cd 3101 	strd	r3, r1, [sp, #4]
 8011998:	f8bd 3040 	ldrh.w	r3, [sp, #64]	@ 0x40
 801199c:	9504      	str	r5, [sp, #16]
 801199e:	f8ad 3018 	strh.w	r3, [sp, #24]
 80119a2:	f8bd 3044 	ldrh.w	r3, [sp, #68]	@ 0x44
 80119a6:	f8ad 301a 	strh.w	r3, [sp, #26]
 80119aa:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 80119ae:	f8ad 301c 	strh.w	r3, [sp, #28]
 80119b2:	f89d 3050 	ldrb.w	r3, [sp, #80]	@ 0x50
 80119b6:	f88d 3020 	strb.w	r3, [sp, #32]
 80119ba:	f7ff fe9f 	bl	80116fc <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 80119be:	463a      	mov	r2, r7
 80119c0:	4631      	mov	r1, r6
 80119c2:	4603      	mov	r3, r0
 80119c4:	4620      	mov	r0, r4
 80119c6:	f7ff ffc1 	bl	801194c <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 80119ca:	4b0e      	ldr	r3, [pc, #56]	@ (8011a04 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0x80>)
 80119cc:	9005      	str	r0, [sp, #20]
 80119ce:	881b      	ldrh	r3, [r3, #0]
 80119d0:	f8ad 301e 	strh.w	r3, [sp, #30]
 80119d4:	f7f2 fa54 	bl	8003e80 <_ZN8touchgfx3HAL3lcdEv>
 80119d8:	6803      	ldr	r3, [r0, #0]
 80119da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80119dc:	4798      	blx	r3
 80119de:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80119e0:	f88d 0022 	strb.w	r0, [sp, #34]	@ 0x22
 80119e4:	a901      	add	r1, sp, #4
 80119e6:	f88d 0021 	strb.w	r0, [sp, #33]	@ 0x21
 80119ea:	9304      	str	r3, [sp, #16]
 80119ec:	6860      	ldr	r0, [r4, #4]
 80119ee:	f89d 3058 	ldrb.w	r3, [sp, #88]	@ 0x58
 80119f2:	f88d 5024 	strb.w	r5, [sp, #36]	@ 0x24
 80119f6:	f88d 3023 	strb.w	r3, [sp, #35]	@ 0x23
 80119fa:	6803      	ldr	r3, [r0, #0]
 80119fc:	685b      	ldr	r3, [r3, #4]
 80119fe:	4798      	blx	r3
 8011a00:	b00b      	add	sp, #44	@ 0x2c
 8011a02:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011a04:	24028e1a 	.word	0x24028e1a

08011a08 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE>:
 8011a08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011a0a:	b08d      	sub	sp, #52	@ 0x34
 8011a0c:	2501      	movs	r5, #1
 8011a0e:	4604      	mov	r4, r0
 8011a10:	466b      	mov	r3, sp
 8011a12:	9503      	str	r5, [sp, #12]
 8011a14:	e883 0006 	stmia.w	r3, {r1, r2}
 8011a18:	2300      	movs	r3, #0
 8011a1a:	f8bd 6000 	ldrh.w	r6, [sp]
 8011a1e:	f8bd 7002 	ldrh.w	r7, [sp, #2]
 8011a22:	9306      	str	r3, [sp, #24]
 8011a24:	6803      	ldr	r3, [r0, #0]
 8011a26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011a28:	4798      	blx	r3
 8011a2a:	463a      	mov	r2, r7
 8011a2c:	4631      	mov	r1, r6
 8011a2e:	4603      	mov	r3, r0
 8011a30:	4620      	mov	r0, r4
 8011a32:	f7ff ff8b 	bl	801194c <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8011a36:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8011a38:	9004      	str	r0, [sp, #16]
 8011a3a:	9307      	str	r3, [sp, #28]
 8011a3c:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8011a40:	f8ad 3020 	strh.w	r3, [sp, #32]
 8011a44:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8011a48:	f8ad 3022 	strh.w	r3, [sp, #34]	@ 0x22
 8011a4c:	4b0e      	ldr	r3, [pc, #56]	@ (8011a88 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x80>)
 8011a4e:	881b      	ldrh	r3, [r3, #0]
 8011a50:	f8ad 3024 	strh.w	r3, [sp, #36]	@ 0x24
 8011a54:	f8ad 3026 	strh.w	r3, [sp, #38]	@ 0x26
 8011a58:	f7f2 fa12 	bl	8003e80 <_ZN8touchgfx3HAL3lcdEv>
 8011a5c:	6803      	ldr	r3, [r0, #0]
 8011a5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011a60:	4798      	blx	r3
 8011a62:	23ff      	movs	r3, #255	@ 0xff
 8011a64:	f88d 0029 	strb.w	r0, [sp, #41]	@ 0x29
 8011a68:	a903      	add	r1, sp, #12
 8011a6a:	f88d 002a 	strb.w	r0, [sp, #42]	@ 0x2a
 8011a6e:	6860      	ldr	r0, [r4, #4]
 8011a70:	f88d 3028 	strb.w	r3, [sp, #40]	@ 0x28
 8011a74:	f88d 502b 	strb.w	r5, [sp, #43]	@ 0x2b
 8011a78:	f88d 502c 	strb.w	r5, [sp, #44]	@ 0x2c
 8011a7c:	6803      	ldr	r3, [r0, #0]
 8011a7e:	685b      	ldr	r3, [r3, #4]
 8011a80:	4798      	blx	r3
 8011a82:	6c60      	ldr	r0, [r4, #68]	@ 0x44
 8011a84:	b00d      	add	sp, #52	@ 0x34
 8011a86:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011a88:	24028e1a 	.word	0x24028e1a

08011a8c <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm>:
 8011a8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011a90:	b08c      	sub	sp, #48	@ 0x30
 8011a92:	461e      	mov	r6, r3
 8011a94:	2300      	movs	r3, #0
 8011a96:	4604      	mov	r4, r0
 8011a98:	466d      	mov	r5, sp
 8011a9a:	9306      	str	r3, [sp, #24]
 8011a9c:	6803      	ldr	r3, [r0, #0]
 8011a9e:	e885 0006 	stmia.w	r5, {r1, r2}
 8011aa2:	2501      	movs	r5, #1
 8011aa4:	f8bd 7000 	ldrh.w	r7, [sp]
 8011aa8:	f8bd 8002 	ldrh.w	r8, [sp, #2]
 8011aac:	9503      	str	r5, [sp, #12]
 8011aae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011ab0:	4798      	blx	r3
 8011ab2:	4642      	mov	r2, r8
 8011ab4:	4639      	mov	r1, r7
 8011ab6:	4603      	mov	r3, r0
 8011ab8:	4620      	mov	r0, r4
 8011aba:	f7ff ff47 	bl	801194c <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8011abe:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8011ac2:	9004      	str	r0, [sp, #16]
 8011ac4:	f8ad 3020 	strh.w	r3, [sp, #32]
 8011ac8:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8011acc:	9607      	str	r6, [sp, #28]
 8011ace:	f8ad 3022 	strh.w	r3, [sp, #34]	@ 0x22
 8011ad2:	4b10      	ldr	r3, [pc, #64]	@ (8011b14 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm+0x88>)
 8011ad4:	881b      	ldrh	r3, [r3, #0]
 8011ad6:	f8ad 3024 	strh.w	r3, [sp, #36]	@ 0x24
 8011ada:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8011adc:	f8ad 3026 	strh.w	r3, [sp, #38]	@ 0x26
 8011ae0:	f7f2 f9ce 	bl	8003e80 <_ZN8touchgfx3HAL3lcdEv>
 8011ae4:	6803      	ldr	r3, [r0, #0]
 8011ae6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011ae8:	4798      	blx	r3
 8011aea:	23ff      	movs	r3, #255	@ 0xff
 8011aec:	f88d 0029 	strb.w	r0, [sp, #41]	@ 0x29
 8011af0:	a903      	add	r1, sp, #12
 8011af2:	f88d 002a 	strb.w	r0, [sp, #42]	@ 0x2a
 8011af6:	6860      	ldr	r0, [r4, #4]
 8011af8:	f88d 3028 	strb.w	r3, [sp, #40]	@ 0x28
 8011afc:	f88d 502b 	strb.w	r5, [sp, #43]	@ 0x2b
 8011b00:	f88d 502c 	strb.w	r5, [sp, #44]	@ 0x2c
 8011b04:	6803      	ldr	r3, [r0, #0]
 8011b06:	685b      	ldr	r3, [r3, #4]
 8011b08:	4798      	blx	r3
 8011b0a:	4630      	mov	r0, r6
 8011b0c:	b00c      	add	sp, #48	@ 0x30
 8011b0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011b12:	bf00      	nop
 8011b14:	24028e1a 	.word	0x24028e1a

08011b18 <_ZN8touchgfx3HAL25copyFromTFTToClientBufferENS_4RectE>:
 8011b18:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011b1a:	b085      	sub	sp, #20
 8011b1c:	4605      	mov	r5, r0
 8011b1e:	ac02      	add	r4, sp, #8
 8011b20:	e884 0006 	stmia.w	r4, {r1, r2}
 8011b24:	f8bd 6008 	ldrh.w	r6, [sp, #8]
 8011b28:	f8bd 700a 	ldrh.w	r7, [sp, #10]
 8011b2c:	f7ff fde6 	bl	80116fc <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8011b30:	4631      	mov	r1, r6
 8011b32:	4603      	mov	r3, r0
 8011b34:	463a      	mov	r2, r7
 8011b36:	4628      	mov	r0, r5
 8011b38:	f7ff ff08 	bl	801194c <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8011b3c:	4a05      	ldr	r2, [pc, #20]	@ (8011b54 <_ZN8touchgfx3HAL25copyFromTFTToClientBufferENS_4RectE+0x3c>)
 8011b3e:	682b      	ldr	r3, [r5, #0]
 8011b40:	8812      	ldrh	r2, [r2, #0]
 8011b42:	9200      	str	r2, [sp, #0]
 8011b44:	6ede      	ldr	r6, [r3, #108]	@ 0x6c
 8011b46:	4603      	mov	r3, r0
 8011b48:	4628      	mov	r0, r5
 8011b4a:	e894 0006 	ldmia.w	r4, {r1, r2}
 8011b4e:	47b0      	blx	r6
 8011b50:	b005      	add	sp, #20
 8011b52:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011b54:	24028e1a 	.word	0x24028e1a

08011b58 <_ZN8touchgfx3HAL16swapFrameBuffersEv>:
 8011b58:	b570      	push	{r4, r5, r6, lr}
 8011b5a:	f890 306e 	ldrb.w	r3, [r0, #110]	@ 0x6e
 8011b5e:	4604      	mov	r4, r0
 8011b60:	b19b      	cbz	r3, 8011b8a <_ZN8touchgfx3HAL16swapFrameBuffersEv+0x32>
 8011b62:	2002      	movs	r0, #2
 8011b64:	f7ef ff24 	bl	80019b0 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>
 8011b68:	2300      	movs	r3, #0
 8011b6a:	4620      	mov	r0, r4
 8011b6c:	f884 306e 	strb.w	r3, [r4, #110]	@ 0x6e
 8011b70:	f884 306d 	strb.w	r3, [r4, #109]	@ 0x6d
 8011b74:	6823      	ldr	r3, [r4, #0]
 8011b76:	f8d3 50b8 	ldr.w	r5, [r3, #184]	@ 0xb8
 8011b7a:	f7ff fdbf 	bl	80116fc <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8011b7e:	4601      	mov	r1, r0
 8011b80:	4620      	mov	r0, r4
 8011b82:	462b      	mov	r3, r5
 8011b84:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011b88:	4718      	bx	r3
 8011b8a:	bd70      	pop	{r4, r5, r6, pc}

08011b8c <_ZN8touchgfx3HAL12setMCUActiveEb>:
 8011b8c:	b570      	push	{r4, r5, r6, lr}
 8011b8e:	4605      	mov	r5, r0
 8011b90:	460c      	mov	r4, r1
 8011b92:	2003      	movs	r0, #3
 8011b94:	b149      	cbz	r1, 8011baa <_ZN8touchgfx3HAL12setMCUActiveEb+0x1e>
 8011b96:	f7ef feab 	bl	80018f0 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 8011b9a:	6928      	ldr	r0, [r5, #16]
 8011b9c:	b168      	cbz	r0, 8011bba <_ZN8touchgfx3HAL12setMCUActiveEb+0x2e>
 8011b9e:	6803      	ldr	r3, [r0, #0]
 8011ba0:	2101      	movs	r1, #1
 8011ba2:	695b      	ldr	r3, [r3, #20]
 8011ba4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011ba8:	4718      	bx	r3
 8011baa:	f7ef fed1 	bl	8001950 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 8011bae:	6928      	ldr	r0, [r5, #16]
 8011bb0:	b118      	cbz	r0, 8011bba <_ZN8touchgfx3HAL12setMCUActiveEb+0x2e>
 8011bb2:	6803      	ldr	r3, [r0, #0]
 8011bb4:	4621      	mov	r1, r4
 8011bb6:	695b      	ldr	r3, [r3, #20]
 8011bb8:	e7f4      	b.n	8011ba4 <_ZN8touchgfx3HAL12setMCUActiveEb+0x18>
 8011bba:	bd70      	pop	{r4, r5, r6, pc}

08011bbc <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>:
 8011bbc:	b538      	push	{r3, r4, r5, lr}
 8011bbe:	f890 307b 	ldrb.w	r3, [r0, #123]	@ 0x7b
 8011bc2:	4604      	mov	r4, r0
 8011bc4:	460d      	mov	r5, r1
 8011bc6:	428b      	cmp	r3, r1
 8011bc8:	d006      	beq.n	8011bd8 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x1c>
 8011bca:	6803      	ldr	r3, [r0, #0]
 8011bcc:	b929      	cbnz	r1, 8011bda <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x1e>
 8011bce:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8011bd2:	4798      	blx	r3
 8011bd4:	f884 507b 	strb.w	r5, [r4, #123]	@ 0x7b
 8011bd8:	bd38      	pop	{r3, r4, r5, pc}
 8011bda:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 8011bde:	e7f8      	b.n	8011bd2 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x16>

08011be0 <_ZN8touchgfx3HAL15lockFrameBufferEv>:
 8011be0:	4b0d      	ldr	r3, [pc, #52]	@ (8011c18 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x38>)
 8011be2:	b510      	push	{r4, lr}
 8011be4:	781b      	ldrb	r3, [r3, #0]
 8011be6:	4604      	mov	r4, r0
 8011be8:	b95b      	cbnz	r3, 8011c02 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 8011bea:	f890 3048 	ldrb.w	r3, [r0, #72]	@ 0x48
 8011bee:	2b02      	cmp	r3, #2
 8011bf0:	d007      	beq.n	8011c02 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 8011bf2:	6840      	ldr	r0, [r0, #4]
 8011bf4:	f000 f91a 	bl	8011e2c <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>
 8011bf8:	b118      	cbz	r0, 8011c02 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 8011bfa:	6862      	ldr	r2, [r4, #4]
 8011bfc:	7a53      	ldrb	r3, [r2, #9]
 8011bfe:	2b00      	cmp	r3, #0
 8011c00:	d0fc      	beq.n	8011bfc <_ZN8touchgfx3HAL15lockFrameBufferEv+0x1c>
 8011c02:	f7f0 fedf 	bl	80029c4 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 8011c06:	4620      	mov	r0, r4
 8011c08:	2100      	movs	r1, #0
 8011c0a:	f7ff ffd7 	bl	8011bbc <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 8011c0e:	4620      	mov	r0, r4
 8011c10:	f7ff fd74 	bl	80116fc <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8011c14:	bd10      	pop	{r4, pc}
 8011c16:	bf00      	nop
 8011c18:	24028e1e 	.word	0x24028e1e

08011c1c <_ZN8touchgfx3HAL33lockFrameBufferForRenderingMethodENS0_15RenderingMethodE>:
 8011c1c:	b570      	push	{r4, r5, r6, lr}
 8011c1e:	4604      	mov	r4, r0
 8011c20:	6803      	ldr	r3, [r0, #0]
 8011c22:	b919      	cbnz	r1, 8011c2c <_ZN8touchgfx3HAL33lockFrameBufferForRenderingMethodENS0_15RenderingMethodE+0x10>
 8011c24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011c26:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011c2a:	4718      	bx	r3
 8011c2c:	2200      	movs	r2, #0
 8011c2e:	f890 607b 	ldrb.w	r6, [r0, #123]	@ 0x7b
 8011c32:	f880 207b 	strb.w	r2, [r0, #123]	@ 0x7b
 8011c36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011c38:	4798      	blx	r3
 8011c3a:	6863      	ldr	r3, [r4, #4]
 8011c3c:	2101      	movs	r1, #1
 8011c3e:	4605      	mov	r5, r0
 8011c40:	4620      	mov	r0, r4
 8011c42:	7299      	strb	r1, [r3, #10]
 8011c44:	f884 607b 	strb.w	r6, [r4, #123]	@ 0x7b
 8011c48:	f7ff ffb8 	bl	8011bbc <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 8011c4c:	4628      	mov	r0, r5
 8011c4e:	bd70      	pop	{r4, r5, r6, pc}

08011c50 <_ZN8touchgfx17LockFreeDMA_Queue7isEmptyEv>:
 8011c50:	e9d0 2003 	ldrd	r2, r0, [r0, #12]
 8011c54:	1a13      	subs	r3, r2, r0
 8011c56:	4258      	negs	r0, r3
 8011c58:	4158      	adcs	r0, r3
 8011c5a:	4770      	bx	lr

08011c5c <_ZN8touchgfx17LockFreeDMA_Queue6isFullEv>:
 8011c5c:	e9d0 2303 	ldrd	r2, r3, [r0, #12]
 8011c60:	1a9b      	subs	r3, r3, r2
 8011c62:	2b00      	cmp	r3, #0
 8011c64:	bfdc      	itt	le
 8011c66:	6882      	ldrle	r2, [r0, #8]
 8011c68:	189b      	addle	r3, r3, r2
 8011c6a:	2b01      	cmp	r3, #1
 8011c6c:	bfcc      	ite	gt
 8011c6e:	2000      	movgt	r0, #0
 8011c70:	2001      	movle	r0, #1
 8011c72:	4770      	bx	lr

08011c74 <_ZN8touchgfx17LockFreeDMA_Queue5firstEv>:
 8011c74:	6902      	ldr	r2, [r0, #16]
 8011c76:	6843      	ldr	r3, [r0, #4]
 8011c78:	2024      	movs	r0, #36	@ 0x24
 8011c7a:	fb00 3002 	mla	r0, r0, r2, r3
 8011c7e:	4770      	bx	lr

08011c80 <_ZN8touchgfx13DMA_Interface13seedExecutionEv>:
 8011c80:	6803      	ldr	r3, [r0, #0]
 8011c82:	691b      	ldr	r3, [r3, #16]
 8011c84:	4718      	bx	r3

08011c86 <_ZN8touchgfx13DMA_Interface7executeEv>:
 8011c86:	2301      	movs	r3, #1
 8011c88:	b570      	push	{r4, r5, r6, lr}
 8011c8a:	7203      	strb	r3, [r0, #8]
 8011c8c:	4604      	mov	r4, r0
 8011c8e:	6840      	ldr	r0, [r0, #4]
 8011c90:	6803      	ldr	r3, [r0, #0]
 8011c92:	699b      	ldr	r3, [r3, #24]
 8011c94:	4798      	blx	r3
 8011c96:	6803      	ldr	r3, [r0, #0]
 8011c98:	4605      	mov	r5, r0
 8011c9a:	2b40      	cmp	r3, #64	@ 0x40
 8011c9c:	d00c      	beq.n	8011cb8 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8011c9e:	d810      	bhi.n	8011cc2 <_ZN8touchgfx13DMA_Interface7executeEv+0x3c>
 8011ca0:	2b04      	cmp	r3, #4
 8011ca2:	d01d      	beq.n	8011ce0 <_ZN8touchgfx13DMA_Interface7executeEv+0x5a>
 8011ca4:	d804      	bhi.n	8011cb0 <_ZN8touchgfx13DMA_Interface7executeEv+0x2a>
 8011ca6:	2b01      	cmp	r3, #1
 8011ca8:	d006      	beq.n	8011cb8 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8011caa:	2b02      	cmp	r3, #2
 8011cac:	d02c      	beq.n	8011d08 <_ZN8touchgfx13DMA_Interface7executeEv+0x82>
 8011cae:	bd70      	pop	{r4, r5, r6, pc}
 8011cb0:	2b08      	cmp	r3, #8
 8011cb2:	d01d      	beq.n	8011cf0 <_ZN8touchgfx13DMA_Interface7executeEv+0x6a>
 8011cb4:	2b20      	cmp	r3, #32
 8011cb6:	d1fa      	bne.n	8011cae <_ZN8touchgfx13DMA_Interface7executeEv+0x28>
 8011cb8:	6823      	ldr	r3, [r4, #0]
 8011cba:	4620      	mov	r0, r4
 8011cbc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8011cbe:	4798      	blx	r3
 8011cc0:	e013      	b.n	8011cea <_ZN8touchgfx13DMA_Interface7executeEv+0x64>
 8011cc2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8011cc6:	d0f7      	beq.n	8011cb8 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8011cc8:	d804      	bhi.n	8011cd4 <_ZN8touchgfx13DMA_Interface7executeEv+0x4e>
 8011cca:	2b80      	cmp	r3, #128	@ 0x80
 8011ccc:	d0f4      	beq.n	8011cb8 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8011cce:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8011cd2:	e7f0      	b.n	8011cb6 <_ZN8touchgfx13DMA_Interface7executeEv+0x30>
 8011cd4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8011cd8:	d0ee      	beq.n	8011cb8 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8011cda:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8011cde:	e7e5      	b.n	8011cac <_ZN8touchgfx13DMA_Interface7executeEv+0x26>
 8011ce0:	6823      	ldr	r3, [r4, #0]
 8011ce2:	7f01      	ldrb	r1, [r0, #28]
 8011ce4:	4620      	mov	r0, r4
 8011ce6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011ce8:	4798      	blx	r3
 8011cea:	6823      	ldr	r3, [r4, #0]
 8011cec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011cee:	e006      	b.n	8011cfe <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
 8011cf0:	6823      	ldr	r3, [r4, #0]
 8011cf2:	7f01      	ldrb	r1, [r0, #28]
 8011cf4:	4620      	mov	r0, r4
 8011cf6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011cf8:	4798      	blx	r3
 8011cfa:	6823      	ldr	r3, [r4, #0]
 8011cfc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8011cfe:	4629      	mov	r1, r5
 8011d00:	4620      	mov	r0, r4
 8011d02:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011d06:	4718      	bx	r3
 8011d08:	6823      	ldr	r3, [r4, #0]
 8011d0a:	4620      	mov	r0, r4
 8011d0c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8011d0e:	4798      	blx	r3
 8011d10:	e7f3      	b.n	8011cfa <_ZN8touchgfx13DMA_Interface7executeEv+0x74>

08011d12 <_ZN8touchgfx13DMA_Interface11enableAlphaEh>:
 8011d12:	4770      	bx	lr

08011d14 <_ZN8touchgfx13DMA_Interface12disableAlphaEv>:
 8011d14:	4770      	bx	lr

08011d16 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>:
 8011d16:	4770      	bx	lr

08011d18 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE>:
 8011d18:	e9d0 3203 	ldrd	r3, r2, [r0, #12]
 8011d1c:	b510      	push	{r4, lr}
 8011d1e:	1ad2      	subs	r2, r2, r3
 8011d20:	2a00      	cmp	r2, #0
 8011d22:	bfdc      	itt	le
 8011d24:	6884      	ldrle	r4, [r0, #8]
 8011d26:	1912      	addle	r2, r2, r4
 8011d28:	2a01      	cmp	r2, #1
 8011d2a:	dd16      	ble.n	8011d5a <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x42>
 8011d2c:	6842      	ldr	r2, [r0, #4]
 8011d2e:	2424      	movs	r4, #36	@ 0x24
 8011d30:	fb04 2303 	mla	r3, r4, r3, r2
 8011d34:	f101 0220 	add.w	r2, r1, #32
 8011d38:	f851 4b04 	ldr.w	r4, [r1], #4
 8011d3c:	4291      	cmp	r1, r2
 8011d3e:	f843 4b04 	str.w	r4, [r3], #4
 8011d42:	d1f9      	bne.n	8011d38 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x20>
 8011d44:	780a      	ldrb	r2, [r1, #0]
 8011d46:	701a      	strb	r2, [r3, #0]
 8011d48:	68c3      	ldr	r3, [r0, #12]
 8011d4a:	6882      	ldr	r2, [r0, #8]
 8011d4c:	f3bf 8f5b 	dmb	ish
 8011d50:	3301      	adds	r3, #1
 8011d52:	429a      	cmp	r2, r3
 8011d54:	bfd8      	it	le
 8011d56:	1a9b      	suble	r3, r3, r2
 8011d58:	60c3      	str	r3, [r0, #12]
 8011d5a:	bd10      	pop	{r4, pc}

08011d5c <_ZN8touchgfx17LockFreeDMA_Queue3popEv>:
 8011d5c:	6903      	ldr	r3, [r0, #16]
 8011d5e:	6882      	ldr	r2, [r0, #8]
 8011d60:	f3bf 8f5b 	dmb	ish
 8011d64:	3301      	adds	r3, #1
 8011d66:	429a      	cmp	r2, r3
 8011d68:	bfd8      	it	le
 8011d6a:	1a9b      	suble	r3, r3, r2
 8011d6c:	6103      	str	r3, [r0, #16]
 8011d6e:	4770      	bx	lr

08011d70 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE>:
 8011d70:	b570      	push	{r4, r5, r6, lr}
 8011d72:	4604      	mov	r4, r0
 8011d74:	460e      	mov	r6, r1
 8011d76:	6860      	ldr	r0, [r4, #4]
 8011d78:	6803      	ldr	r3, [r0, #0]
 8011d7a:	685b      	ldr	r3, [r3, #4]
 8011d7c:	4798      	blx	r3
 8011d7e:	2800      	cmp	r0, #0
 8011d80:	d1f9      	bne.n	8011d76 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x6>
 8011d82:	4d0d      	ldr	r5, [pc, #52]	@ (8011db8 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x48>)
 8011d84:	6828      	ldr	r0, [r5, #0]
 8011d86:	6803      	ldr	r3, [r0, #0]
 8011d88:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8011d8a:	4798      	blx	r3
 8011d8c:	f7f0 fe28 	bl	80029e0 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>
 8011d90:	6828      	ldr	r0, [r5, #0]
 8011d92:	2101      	movs	r1, #1
 8011d94:	f7ff ff12 	bl	8011bbc <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 8011d98:	6860      	ldr	r0, [r4, #4]
 8011d9a:	4631      	mov	r1, r6
 8011d9c:	6803      	ldr	r3, [r0, #0]
 8011d9e:	689b      	ldr	r3, [r3, #8]
 8011da0:	4798      	blx	r3
 8011da2:	6823      	ldr	r3, [r4, #0]
 8011da4:	4620      	mov	r0, r4
 8011da6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011da8:	4798      	blx	r3
 8011daa:	6828      	ldr	r0, [r5, #0]
 8011dac:	6803      	ldr	r3, [r0, #0]
 8011dae:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011db2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8011db4:	4718      	bx	r3
 8011db6:	bf00      	nop
 8011db8:	24028e20 	.word	0x24028e20

08011dbc <_ZN8touchgfx13DMA_Interface27waitForFrameBufferSemaphoreEv>:
 8011dbc:	b508      	push	{r3, lr}
 8011dbe:	f7f0 fe01 	bl	80029c4 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 8011dc2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8011dc6:	f7f0 be05 	b.w	80029d4 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

08011dca <_ZN8touchgfx17LockFreeDMA_QueueD0Ev>:
 8011dca:	b510      	push	{r4, lr}
 8011dcc:	4604      	mov	r4, r0
 8011dce:	2114      	movs	r1, #20
 8011dd0:	f015 fb5d 	bl	802748e <_ZdlPvj>
 8011dd4:	4620      	mov	r0, r4
 8011dd6:	bd10      	pop	{r4, pc}

08011dd8 <_ZN8touchgfx13DMA_Interface16executeCompletedEv>:
 8011dd8:	b570      	push	{r4, r5, r6, lr}
 8011dda:	4604      	mov	r4, r0
 8011ddc:	6840      	ldr	r0, [r0, #4]
 8011dde:	6803      	ldr	r3, [r0, #0]
 8011de0:	681b      	ldr	r3, [r3, #0]
 8011de2:	4798      	blx	r3
 8011de4:	4605      	mov	r5, r0
 8011de6:	b930      	cbnz	r0, 8011df6 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 8011de8:	7a23      	ldrb	r3, [r4, #8]
 8011dea:	b123      	cbz	r3, 8011df6 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 8011dec:	6860      	ldr	r0, [r4, #4]
 8011dee:	6803      	ldr	r3, [r0, #0]
 8011df0:	695b      	ldr	r3, [r3, #20]
 8011df2:	4798      	blx	r3
 8011df4:	7225      	strb	r5, [r4, #8]
 8011df6:	6860      	ldr	r0, [r4, #4]
 8011df8:	6803      	ldr	r3, [r0, #0]
 8011dfa:	681b      	ldr	r3, [r3, #0]
 8011dfc:	4798      	blx	r3
 8011dfe:	b928      	cbnz	r0, 8011e0c <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x34>
 8011e00:	6823      	ldr	r3, [r4, #0]
 8011e02:	4620      	mov	r0, r4
 8011e04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011e06:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011e0a:	4718      	bx	r3
 8011e0c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011e10:	f7f0 bdee 	b.w	80029f0 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>

08011e14 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>:
 8011e14:	b510      	push	{r4, lr}
 8011e16:	6082      	str	r2, [r0, #8]
 8011e18:	2200      	movs	r2, #0
 8011e1a:	4c03      	ldr	r4, [pc, #12]	@ (8011e28 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi+0x14>)
 8011e1c:	e9c0 2203 	strd	r2, r2, [r0, #12]
 8011e20:	e9c0 4100 	strd	r4, r1, [r0]
 8011e24:	bd10      	pop	{r4, pc}
 8011e26:	bf00      	nop
 8011e28:	0802ca60 	.word	0x0802ca60

08011e2c <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>:
 8011e2c:	6840      	ldr	r0, [r0, #4]
 8011e2e:	6803      	ldr	r3, [r0, #0]
 8011e30:	681b      	ldr	r3, [r3, #0]
 8011e32:	4718      	bx	r3

08011e34 <_ZN8touchgfx17CWRVectorRenderer8tearDownEv>:
 8011e34:	2300      	movs	r3, #0
 8011e36:	84c3      	strh	r3, [r0, #38]	@ 0x26
 8011e38:	8503      	strh	r3, [r0, #40]	@ 0x28
 8011e3a:	8543      	strh	r3, [r0, #42]	@ 0x2a
 8011e3c:	8583      	strh	r3, [r0, #44]	@ 0x2c
 8011e3e:	6980      	ldr	r0, [r0, #24]
 8011e40:	b110      	cbz	r0, 8011e48 <_ZN8touchgfx17CWRVectorRenderer8tearDownEv+0x14>
 8011e42:	6803      	ldr	r3, [r0, #0]
 8011e44:	691b      	ldr	r3, [r3, #16]
 8011e46:	4718      	bx	r3
 8011e48:	4770      	bx	lr

08011e4a <_ZN8touchgfx17CWRVectorRenderer14setStrokeWidthEf>:
 8011e4a:	ed80 0a0c 	vstr	s0, [r0, #48]	@ 0x30
 8011e4e:	4770      	bx	lr

08011e50 <_ZN8touchgfx17CWRVectorRenderer8setColorENS_9colortypeE>:
 8011e50:	b538      	push	{r3, r4, r5, lr}
 8011e52:	0e0b      	lsrs	r3, r1, #24
 8011e54:	4604      	mov	r4, r0
 8011e56:	460d      	mov	r5, r1
 8011e58:	7783      	strb	r3, [r0, #30]
 8011e5a:	6803      	ldr	r3, [r0, #0]
 8011e5c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8011e5e:	4798      	blx	r3
 8011e60:	6803      	ldr	r3, [r0, #0]
 8011e62:	4629      	mov	r1, r5
 8011e64:	689b      	ldr	r3, [r3, #8]
 8011e66:	4798      	blx	r3
 8011e68:	6823      	ldr	r3, [r4, #0]
 8011e6a:	4620      	mov	r0, r4
 8011e6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011e6e:	4798      	blx	r3
 8011e70:	61a0      	str	r0, [r4, #24]
 8011e72:	bd38      	pop	{r3, r4, r5, pc}

08011e74 <_ZN8touchgfx17CWRVectorRenderer8setAlphaEh>:
 8011e74:	7741      	strb	r1, [r0, #29]
 8011e76:	4770      	bx	lr

08011e78 <_ZN8touchgfx17CWRVectorRenderer23setTransformationMatrixERKNS_9Matrix3x3E>:
 8011e78:	b530      	push	{r4, r5, lr}
 8011e7a:	460d      	mov	r5, r1
 8011e7c:	f100 0434 	add.w	r4, r0, #52	@ 0x34
 8011e80:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011e82:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011e84:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011e86:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011e88:	682b      	ldr	r3, [r5, #0]
 8011e8a:	6023      	str	r3, [r4, #0]
 8011e8c:	bd30      	pop	{r4, r5, pc}

08011e8e <_ZN8touchgfx17CWRVectorRenderer5setupERKNS_4RectES3_>:
 8011e8e:	b538      	push	{r3, r4, r5, lr}
 8011e90:	4604      	mov	r4, r0
 8011e92:	1d03      	adds	r3, r0, #4
 8011e94:	6808      	ldr	r0, [r1, #0]
 8011e96:	2500      	movs	r5, #0
 8011e98:	6849      	ldr	r1, [r1, #4]
 8011e9a:	c303      	stmia	r3!, {r0, r1}
 8011e9c:	6813      	ldr	r3, [r2, #0]
 8011e9e:	f104 0034 	add.w	r0, r4, #52	@ 0x34
 8011ea2:	f8c4 3026 	str.w	r3, [r4, #38]	@ 0x26
 8011ea6:	6853      	ldr	r3, [r2, #4]
 8011ea8:	61a5      	str	r5, [r4, #24]
 8011eaa:	f8c4 302a 	str.w	r3, [r4, #42]	@ 0x2a
 8011eae:	f007 fbbb 	bl	8019628 <_ZN8touchgfx9Matrix3x35resetEv>
 8011eb2:	23ff      	movs	r3, #255	@ 0xff
 8011eb4:	f884 5025 	strb.w	r5, [r4, #37]	@ 0x25
 8011eb8:	7763      	strb	r3, [r4, #29]
 8011eba:	77a3      	strb	r3, [r4, #30]
 8011ebc:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8011ec0:	6323      	str	r3, [r4, #48]	@ 0x30
 8011ec2:	2301      	movs	r3, #1
 8011ec4:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
 8011ec8:	bd38      	pop	{r3, r4, r5, pc}
	...

08011ecc <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_>:
 8011ecc:	ee70 7a41 	vsub.f32	s15, s0, s2
 8011ed0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011ed4:	eef5 7a40 	vcmp.f32	s15, #0.0
 8011ed8:	4605      	mov	r5, r0
 8011eda:	ed2d 8b0a 	vpush	{d8-d12}
 8011ede:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011ee2:	b086      	sub	sp, #24
 8011ee4:	eeb0 ba40 	vmov.f32	s22, s0
 8011ee8:	6802      	ldr	r2, [r0, #0]
 8011eea:	eef0 ba60 	vmov.f32	s23, s1
 8011eee:	f89d 6058 	ldrb.w	r6, [sp, #88]	@ 0x58
 8011ef2:	eef0 aa41 	vmov.f32	s21, s2
 8011ef6:	9f17      	ldr	r7, [sp, #92]	@ 0x5c
 8011ef8:	eeb0 aa61 	vmov.f32	s20, s3
 8011efc:	eeb0 ca42 	vmov.f32	s24, s4
 8011f00:	eef0 ca62 	vmov.f32	s25, s5
 8011f04:	d112      	bne.n	8011f2c <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x60>
 8011f06:	ee70 7ae1 	vsub.f32	s15, s1, s3
 8011f0a:	eef5 7a40 	vcmp.f32	s15, #0.0
 8011f0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011f12:	d10b      	bne.n	8011f2c <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x60>
 8011f14:	f101 4180 	add.w	r1, r1, #1073741824	@ 0x40000000
 8011f18:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8011f1a:	3901      	subs	r1, #1
 8011f1c:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 8011f20:	b006      	add	sp, #24
 8011f22:	ecbd 8b0a 	vpop	{d8-d12}
 8011f26:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011f2a:	4710      	bx	r2
 8011f2c:	23ff      	movs	r3, #255	@ 0xff
 8011f2e:	4628      	mov	r0, r5
 8011f30:	f105 0834 	add.w	r8, r5, #52	@ 0x34
 8011f34:	77ab      	strb	r3, [r5, #30]
 8011f36:	6b93      	ldr	r3, [r2, #56]	@ 0x38
 8011f38:	4798      	blx	r3
 8011f3a:	eeb0 0a4b 	vmov.f32	s0, s22
 8011f3e:	eef0 0a6b 	vmov.f32	s1, s23
 8011f42:	4604      	mov	r4, r0
 8011f44:	4640      	mov	r0, r8
 8011f46:	f007 fc1e 	bl	8019786 <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 8011f4a:	eef0 8a40 	vmov.f32	s17, s0
 8011f4e:	ed8d 0a00 	vstr	s0, [sp]
 8011f52:	eeb0 0a6a 	vmov.f32	s0, s21
 8011f56:	eef0 9a60 	vmov.f32	s19, s1
 8011f5a:	edcd 0a01 	vstr	s1, [sp, #4]
 8011f5e:	4640      	mov	r0, r8
 8011f60:	eef0 0a4a 	vmov.f32	s1, s20
 8011f64:	f007 fc0f 	bl	8019786 <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 8011f68:	eef4 8a40 	vcmp.f32	s17, s0
 8011f6c:	eeb0 8a40 	vmov.f32	s16, s0
 8011f70:	ed8d 0a02 	vstr	s0, [sp, #8]
 8011f74:	eeb0 9a60 	vmov.f32	s18, s1
 8011f78:	edcd 0a03 	vstr	s1, [sp, #12]
 8011f7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011f80:	eef4 9a60 	vcmp.f32	s19, s1
 8011f84:	bf0c      	ite	eq
 8011f86:	2301      	moveq	r3, #1
 8011f88:	2300      	movne	r3, #0
 8011f8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011f8e:	eef4 8a40 	vcmp.f32	s17, s0
 8011f92:	7463      	strb	r3, [r4, #17]
 8011f94:	bf0c      	ite	eq
 8011f96:	2301      	moveq	r3, #1
 8011f98:	2300      	movne	r3, #0
 8011f9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011f9e:	74a3      	strb	r3, [r4, #18]
 8011fa0:	d024      	beq.n	8011fec <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x120>
 8011fa2:	eef4 9a60 	vcmp.f32	s19, s1
 8011fa6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011faa:	d01f      	beq.n	8011fec <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x120>
 8011fac:	ee3a aa6b 	vsub.f32	s20, s20, s23
 8011fb0:	4640      	mov	r0, r8
 8011fb2:	ee7a aacb 	vsub.f32	s21, s21, s22
 8011fb6:	eeb0 0a4b 	vmov.f32	s0, s22
 8011fba:	eeca 7a2c 	vdiv.f32	s15, s20, s25
 8011fbe:	ee8a 7a8c 	vdiv.f32	s14, s21, s24
 8011fc2:	eef0 0a6b 	vmov.f32	s1, s23
 8011fc6:	eea7 0acc 	vfms.f32	s0, s15, s24
 8011fca:	eeec 0a87 	vfma.f32	s1, s25, s14
 8011fce:	f007 fbda 	bl	8019786 <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 8011fd2:	ed8d 0a04 	vstr	s0, [sp, #16]
 8011fd6:	ee30 0a68 	vsub.f32	s0, s0, s17
 8011fda:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8011fde:	edcd 0a05 	vstr	s1, [sp, #20]
 8011fe2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011fe6:	d121      	bne.n	801202c <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x160>
 8011fe8:	2301      	movs	r3, #1
 8011fea:	74a3      	strb	r3, [r4, #18]
 8011fec:	7c63      	ldrb	r3, [r4, #17]
 8011fee:	2b00      	cmp	r3, #0
 8011ff0:	d051      	beq.n	8012096 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x1ca>
 8011ff2:	ee39 7a69 	vsub.f32	s14, s18, s19
 8011ff6:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80120ec <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x220>
 8011ffa:	eef4 9ac9 	vcmpe.f32	s19, s18
 8011ffe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8012002:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012006:	edc4 7a08 	vstr	s15, [r4, #32]
 801200a:	eefd 7ac9 	vcvt.s32.f32	s15, s18
 801200e:	ee17 3a90 	vmov	r3, s15
 8012012:	eefd 7ae9 	vcvt.s32.f32	s15, s19
 8012016:	b21a      	sxth	r2, r3
 8012018:	ee17 3a90 	vmov	r3, s15
 801201c:	bf48      	it	mi
 801201e:	8122      	strhmi	r2, [r4, #8]
 8012020:	b21b      	sxth	r3, r3
 8012022:	bf56      	itet	pl
 8012024:	80e2      	strhpl	r2, [r4, #6]
 8012026:	80e3      	strhmi	r3, [r4, #6]
 8012028:	8123      	strhpl	r3, [r4, #8]
 801202a:	e02c      	b.n	8012086 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x1ba>
 801202c:	ee70 0ae9 	vsub.f32	s1, s1, s19
 8012030:	eec0 7a80 	vdiv.f32	s15, s1, s0
 8012034:	eef5 7a40 	vcmp.f32	s15, #0.0
 8012038:	edc4 7a05 	vstr	s15, [r4, #20]
 801203c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012040:	d102      	bne.n	8012048 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x17c>
 8012042:	2301      	movs	r3, #1
 8012044:	7463      	strb	r3, [r4, #17]
 8012046:	e7d1      	b.n	8011fec <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x120>
 8012048:	eeb0 7a69 	vmov.f32	s14, s19
 801204c:	ee39 9a69 	vsub.f32	s18, s18, s19
 8012050:	ee38 8a68 	vsub.f32	s16, s16, s17
 8012054:	eea8 7ae7 	vfms.f32	s14, s17, s15
 8012058:	ed84 7a06 	vstr	s14, [r4, #24]
 801205c:	ee89 7a27 	vdiv.f32	s14, s18, s15
 8012060:	ee38 8a47 	vsub.f32	s16, s16, s14
 8012064:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 80120f0 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x224>
 8012068:	eec7 7a08 	vdiv.f32	s15, s14, s16
 801206c:	ed84 8a07 	vstr	s16, [r4, #28]
 8012070:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8012074:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012078:	edc4 7a08 	vstr	s15, [r4, #32]
 801207c:	d503      	bpl.n	8012086 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x1ba>
 801207e:	eeb1 8a48 	vneg.f32	s16, s16
 8012082:	ed84 8a07 	vstr	s16, [r4, #28]
 8012086:	60e7      	str	r7, [r4, #12]
 8012088:	7426      	strb	r6, [r4, #16]
 801208a:	61ac      	str	r4, [r5, #24]
 801208c:	b006      	add	sp, #24
 801208e:	ecbd 8b0a 	vpop	{d8-d12}
 8012092:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012096:	7ca3      	ldrb	r3, [r4, #18]
 8012098:	2b00      	cmp	r3, #0
 801209a:	d0f4      	beq.n	8012086 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x1ba>
 801209c:	ee38 7a68 	vsub.f32	s14, s16, s17
 80120a0:	eddf 6a12 	vldr	s13, [pc, #72]	@ 80120ec <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x220>
 80120a4:	eef4 8ac8 	vcmpe.f32	s17, s16
 80120a8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80120ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80120b0:	edc4 7a08 	vstr	s15, [r4, #32]
 80120b4:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 80120b8:	ee17 3a90 	vmov	r3, s15
 80120bc:	eefd 7ae8 	vcvt.s32.f32	s15, s17
 80120c0:	b21a      	sxth	r2, r3
 80120c2:	ee17 3a90 	vmov	r3, s15
 80120c6:	bf48      	it	mi
 80120c8:	8122      	strhmi	r2, [r4, #8]
 80120ca:	b21b      	sxth	r3, r3
 80120cc:	bf56      	itet	pl
 80120ce:	80e2      	strhpl	r2, [r4, #6]
 80120d0:	80e3      	strhmi	r3, [r4, #6]
 80120d2:	8123      	strhpl	r3, [r4, #8]
 80120d4:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 80120d8:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 80120dc:	1a9b      	subs	r3, r3, r2
 80120de:	ee07 3a90 	vmov	s15, r3
 80120e2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80120e6:	edc4 7a07 	vstr	s15, [r4, #28]
 80120ea:	e7cc      	b.n	8012086 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x1ba>
 80120ec:	447ffffe 	.word	0x447ffffe
 80120f0:	44800000 	.word	0x44800000

080120f4 <_ZN8touchgfx6Canvas17quadraticBezierToEffffff>:
 80120f4:	b510      	push	{r4, lr}
 80120f6:	ed2d 8b02 	vpush	{d8}
 80120fa:	eef0 8a62 	vmov.f32	s17, s5
 80120fe:	2100      	movs	r1, #0
 8012100:	4604      	mov	r4, r0
 8012102:	eeb0 8a42 	vmov.f32	s16, s4
 8012106:	f014 f869 	bl	80261dc <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj>
 801210a:	eef0 7a68 	vmov.f32	s15, s17
 801210e:	6823      	ldr	r3, [r4, #0]
 8012110:	4620      	mov	r0, r4
 8012112:	689b      	ldr	r3, [r3, #8]
 8012114:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 8012118:	ee17 2a90 	vmov	r2, s15
 801211c:	eef0 7a48 	vmov.f32	s15, s16
 8012120:	ecbd 8b02 	vpop	{d8}
 8012124:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 8012128:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801212c:	ee17 1a90 	vmov	r1, s15
 8012130:	4718      	bx	r3

08012132 <_ZN8touchgfx6Canvas13cubicBezierToEffffffff>:
 8012132:	b510      	push	{r4, lr}
 8012134:	ed2d 8b02 	vpush	{d8}
 8012138:	eef0 8a63 	vmov.f32	s17, s7
 801213c:	2100      	movs	r1, #0
 801213e:	4604      	mov	r4, r0
 8012140:	eeb0 8a43 	vmov.f32	s16, s6
 8012144:	f014 f90c 	bl	8026360 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj>
 8012148:	eef0 7a68 	vmov.f32	s15, s17
 801214c:	6823      	ldr	r3, [r4, #0]
 801214e:	4620      	mov	r0, r4
 8012150:	689b      	ldr	r3, [r3, #8]
 8012152:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 8012156:	ee17 2a90 	vmov	r2, s15
 801215a:	eef0 7a48 	vmov.f32	s15, s16
 801215e:	ecbd 8b02 	vpop	{d8}
 8012162:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 8012166:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801216a:	ee17 1a90 	vmov	r1, s15
 801216e:	4718      	bx	r3

08012170 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19moveToWithTransformEff>:
 8012170:	b513      	push	{r0, r1, r4, lr}
 8012172:	4604      	mov	r4, r0
 8012174:	6f40      	ldr	r0, [r0, #116]	@ 0x74
 8012176:	f007 fb06 	bl	8019786 <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 801217a:	eef0 7a60 	vmov.f32	s15, s1
 801217e:	4620      	mov	r0, r4
 8012180:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 8012184:	ee17 2a90 	vmov	r2, s15
 8012188:	eef0 7a40 	vmov.f32	s15, s0
 801218c:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 8012190:	ee17 1a90 	vmov	r1, s15
 8012194:	b002      	add	sp, #8
 8012196:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801219a:	f013 bf79 	b.w	8026090 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_>

0801219e <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>:
 801219e:	b513      	push	{r0, r1, r4, lr}
 80121a0:	4604      	mov	r4, r0
 80121a2:	6f40      	ldr	r0, [r0, #116]	@ 0x74
 80121a4:	f007 faef 	bl	8019786 <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 80121a8:	eef0 7a60 	vmov.f32	s15, s1
 80121ac:	4620      	mov	r0, r4
 80121ae:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 80121b2:	ee17 2a90 	vmov	r2, s15
 80121b6:	eef0 7a40 	vmov.f32	s15, s0
 80121ba:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 80121be:	ee17 1a90 	vmov	r1, s15
 80121c2:	b002      	add	sp, #8
 80121c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80121c8:	f013 bfaf 	b.w	802612a <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>

080121cc <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf>:
 80121cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80121ce:	2400      	movs	r4, #0
 80121d0:	9f07      	ldr	r7, [sp, #28]
 80121d2:	f04f 0e01 	mov.w	lr, #1
 80121d6:	4626      	mov	r6, r4
 80121d8:	e9dd 0c05 	ldrd	r0, ip, [sp, #20]
 80121dc:	4463      	add	r3, ip
 80121de:	4563      	cmp	r3, ip
 80121e0:	d02d      	beq.n	801223e <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x72>
 80121e2:	f813 5d01 	ldrb.w	r5, [r3, #-1]!
 80121e6:	2d06      	cmp	r5, #6
 80121e8:	d8f9      	bhi.n	80121de <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x12>
 80121ea:	fa0e f505 	lsl.w	r5, lr, r5
 80121ee:	f015 0f66 	tst.w	r5, #102	@ 0x66
 80121f2:	d10d      	bne.n	8012210 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x44>
 80121f4:	f015 0f10 	tst.w	r5, #16
 80121f8:	d117      	bne.n	801222a <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x5e>
 80121fa:	072d      	lsls	r5, r5, #28
 80121fc:	d5ef      	bpl.n	80121de <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x12>
 80121fe:	3801      	subs	r0, #1
 8012200:	b91e      	cbnz	r6, 801220a <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x3e>
 8012202:	eb07 0580 	add.w	r5, r7, r0, lsl #2
 8012206:	682d      	ldr	r5, [r5, #0]
 8012208:	600d      	str	r5, [r1, #0]
 801220a:	b96c      	cbnz	r4, 8012228 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x5c>
 801220c:	2601      	movs	r6, #1
 801220e:	e7e6      	b.n	80121de <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x12>
 8012210:	b926      	cbnz	r6, 801221c <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x50>
 8012212:	eb07 0380 	add.w	r3, r7, r0, lsl #2
 8012216:	f853 3c08 	ldr.w	r3, [r3, #-8]
 801221a:	600b      	str	r3, [r1, #0]
 801221c:	b924      	cbnz	r4, 8012228 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x5c>
 801221e:	eb07 0080 	add.w	r0, r7, r0, lsl #2
 8012222:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8012226:	6013      	str	r3, [r2, #0]
 8012228:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801222a:	3801      	subs	r0, #1
 801222c:	b91c      	cbnz	r4, 8012236 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x6a>
 801222e:	eb07 0480 	add.w	r4, r7, r0, lsl #2
 8012232:	6824      	ldr	r4, [r4, #0]
 8012234:	6014      	str	r4, [r2, #0]
 8012236:	2e00      	cmp	r6, #0
 8012238:	d1f6      	bne.n	8012228 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x5c>
 801223a:	2401      	movs	r4, #1
 801223c:	e7cf      	b.n	80121de <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x12>
 801223e:	b90e      	cbnz	r6, 8012244 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x78>
 8012240:	2300      	movs	r3, #0
 8012242:	600b      	str	r3, [r1, #0]
 8012244:	2c00      	cmp	r4, #0
 8012246:	d1ef      	bne.n	8012228 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x5c>
 8012248:	2300      	movs	r3, #0
 801224a:	e7ec      	b.n	8012226 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x5a>

0801224c <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawLineJoinRoundEffffffi>:
 801224c:	b538      	push	{r3, r4, r5, lr}
 801224e:	ed2d 8b0a 	vpush	{d8-d12}
 8012252:	eef0 ba40 	vmov.f32	s23, s0
 8012256:	4604      	mov	r4, r0
 8012258:	eeb0 ca60 	vmov.f32	s24, s1
 801225c:	460d      	mov	r5, r1
 801225e:	eef0 aa41 	vmov.f32	s21, s2
 8012262:	eeb0 ba61 	vmov.f32	s22, s3
 8012266:	eeb0 9a42 	vmov.f32	s18, s4
 801226a:	eef0 9a62 	vmov.f32	s19, s5
 801226e:	eeb6 aa00 	vmov.f32	s20, #96	@ 0x3f000000  0.5
 8012272:	ee7b 8a29 	vadd.f32	s17, s22, s19
 8012276:	ee3a 8a89 	vadd.f32	s16, s21, s18
 801227a:	ee68 8a8a 	vmul.f32	s17, s17, s20
 801227e:	ee28 8a0a 	vmul.f32	s16, s16, s20
 8012282:	ee3c 0a68 	vsub.f32	s0, s24, s17
 8012286:	ee7b 7ac8 	vsub.f32	s15, s23, s16
 801228a:	ee20 0a00 	vmul.f32	s0, s0, s0
 801228e:	eea7 0aa7 	vfma.f32	s0, s15, s15
 8012292:	f015 f927 	bl	80274e4 <sqrtf>
 8012296:	eeb5 0a40 	vcmp.f32	s0, #0.0
 801229a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801229e:	d12e      	bne.n	80122fe <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawLineJoinRoundEffffffi+0xb2>
 80122a0:	ee79 7a6a 	vsub.f32	s15, s18, s21
 80122a4:	ee39 7acb 	vsub.f32	s14, s19, s22
 80122a8:	eeb0 8a6a 	vmov.f32	s16, s21
 80122ac:	eef0 8a4b 	vmov.f32	s17, s22
 80122b0:	eea7 8a8a 	vfma.f32	s16, s15, s20
 80122b4:	eee7 8a0a 	vfma.f32	s17, s14, s20
 80122b8:	eea7 8a0a 	vfma.f32	s16, s14, s20
 80122bc:	eee7 8aca 	vfms.f32	s17, s15, s20
 80122c0:	2d02      	cmp	r5, #2
 80122c2:	dc2f      	bgt.n	8012324 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawLineJoinRoundEffffffi+0xd8>
 80122c4:	3501      	adds	r5, #1
 80122c6:	eef0 1a4b 	vmov.f32	s3, s22
 80122ca:	eeb0 1a6a 	vmov.f32	s2, s21
 80122ce:	4620      	mov	r0, r4
 80122d0:	4629      	mov	r1, r5
 80122d2:	eef0 2a68 	vmov.f32	s5, s17
 80122d6:	eeb0 2a48 	vmov.f32	s4, s16
 80122da:	eef0 0a4c 	vmov.f32	s1, s24
 80122de:	eeb0 0a6b 	vmov.f32	s0, s23
 80122e2:	f7ff ffb3 	bl	801224c <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawLineJoinRoundEffffffi>
 80122e6:	eef0 0a68 	vmov.f32	s1, s17
 80122ea:	eeb0 0a48 	vmov.f32	s0, s16
 80122ee:	4620      	mov	r0, r4
 80122f0:	f7ff ff55 	bl	801219e <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 80122f4:	eeb0 ba68 	vmov.f32	s22, s17
 80122f8:	eef0 aa48 	vmov.f32	s21, s16
 80122fc:	e7b9      	b.n	8012272 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawLineJoinRoundEffffffi+0x26>
 80122fe:	ee38 8a6b 	vsub.f32	s16, s16, s23
 8012302:	edd4 7a1f 	vldr	s15, [r4, #124]	@ 0x7c
 8012306:	ee78 8acc 	vsub.f32	s17, s17, s24
 801230a:	ee28 7a27 	vmul.f32	s14, s16, s15
 801230e:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8012312:	ee87 8a00 	vdiv.f32	s16, s14, s0
 8012316:	eec7 8a80 	vdiv.f32	s17, s15, s0
 801231a:	ee3b 8a88 	vadd.f32	s16, s23, s16
 801231e:	ee7c 8a28 	vadd.f32	s17, s24, s17
 8012322:	e7cd      	b.n	80122c0 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawLineJoinRoundEffffffi+0x74>
 8012324:	eef0 0a68 	vmov.f32	s1, s17
 8012328:	4620      	mov	r0, r4
 801232a:	eeb0 0a48 	vmov.f32	s0, s16
 801232e:	f7ff ff36 	bl	801219e <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 8012332:	ecbd 8b0a 	vpop	{d8-d12}
 8012336:	bd38      	pop	{r3, r4, r5, pc}

08012338 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas18strokeDrawLineJoinEffffffffff>:
 8012338:	b510      	push	{r4, lr}
 801233a:	ed2d 8b0a 	vpush	{d8-d12}
 801233e:	f890 3084 	ldrb.w	r3, [r0, #132]	@ 0x84
 8012342:	4604      	mov	r4, r0
 8012344:	eeb0 ca40 	vmov.f32	s24, s0
 8012348:	2b02      	cmp	r3, #2
 801234a:	eeb0 9a60 	vmov.f32	s18, s1
 801234e:	eef0 9a41 	vmov.f32	s19, s2
 8012352:	eef0 8a61 	vmov.f32	s17, s3
 8012356:	eeb0 ba42 	vmov.f32	s22, s4
 801235a:	eef0 ba62 	vmov.f32	s23, s5
 801235e:	eeb0 aa43 	vmov.f32	s20, s6
 8012362:	eef0 aa63 	vmov.f32	s21, s7
 8012366:	eeb0 8a44 	vmov.f32	s16, s8
 801236a:	eef0 ca64 	vmov.f32	s25, s9
 801236e:	d12c      	bne.n	80123ca <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas18strokeDrawLineJoinEffffffffff+0x92>
 8012370:	eef0 0a62 	vmov.f32	s1, s5
 8012374:	eeb0 0a42 	vmov.f32	s0, s4
 8012378:	f7ff ff11 	bl	801219e <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 801237c:	ee79 9acb 	vsub.f32	s19, s19, s22
 8012380:	ee7a caec 	vsub.f32	s25, s21, s25
 8012384:	ee78 8aeb 	vsub.f32	s17, s17, s23
 8012388:	ee3a 8a48 	vsub.f32	s16, s20, s16
 801238c:	ee69 9aac 	vmul.f32	s19, s19, s25
 8012390:	ee28 8a88 	vmul.f32	s16, s17, s16
 8012394:	eef4 9ac8 	vcmpe.f32	s19, s16
 8012398:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801239c:	db0f      	blt.n	80123be <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas18strokeDrawLineJoinEffffffffff+0x86>
 801239e:	2101      	movs	r1, #1
 80123a0:	eef0 2a6a 	vmov.f32	s5, s21
 80123a4:	eeb0 2a4a 	vmov.f32	s4, s20
 80123a8:	4620      	mov	r0, r4
 80123aa:	eef0 1a6b 	vmov.f32	s3, s23
 80123ae:	eeb0 1a4b 	vmov.f32	s2, s22
 80123b2:	eef0 0a49 	vmov.f32	s1, s18
 80123b6:	eeb0 0a4c 	vmov.f32	s0, s24
 80123ba:	f7ff ff47 	bl	801224c <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawLineJoinRoundEffffffi>
 80123be:	eef0 0a6a 	vmov.f32	s1, s21
 80123c2:	4620      	mov	r0, r4
 80123c4:	eeb0 0a4a 	vmov.f32	s0, s20
 80123c8:	e035      	b.n	8012436 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas18strokeDrawLineJoinEffffffffff+0xfe>
 80123ca:	2b01      	cmp	r3, #1
 80123cc:	d138      	bne.n	8012440 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas18strokeDrawLineJoinEffffffffff+0x108>
 80123ce:	ee31 4ae2 	vsub.f32	s8, s3, s5
 80123d2:	ee33 6a48 	vsub.f32	s12, s6, s16
 80123d6:	ee71 7a42 	vsub.f32	s15, s2, s4
 80123da:	ee73 6ae4 	vsub.f32	s13, s7, s9
 80123de:	ee26 7a44 	vnmul.f32	s14, s12, s8
 80123e2:	eea7 7aa6 	vfma.f32	s14, s15, s13
 80123e6:	eeb5 7a40 	vcmp.f32	s14, #0.0
 80123ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80123ee:	d027      	beq.n	8012440 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas18strokeDrawLineJoinEffffffffff+0x108>
 80123f0:	ee28 8a63 	vnmul.f32	s16, s16, s7
 80123f4:	ee61 8ac2 	vnmul.f32	s17, s3, s4
 80123f8:	eea4 8a83 	vfma.f32	s16, s9, s6
 80123fc:	eee1 8a22 	vfma.f32	s17, s2, s5
 8012400:	ee68 7a67 	vnmul.f32	s15, s16, s15
 8012404:	ee28 8a44 	vnmul.f32	s16, s16, s8
 8012408:	eee6 7a28 	vfma.f32	s15, s12, s17
 801240c:	eea6 8aa8 	vfma.f32	s16, s13, s17
 8012410:	ee87 0a87 	vdiv.f32	s0, s15, s14
 8012414:	edd0 7a20 	vldr	s15, [r0, #128]	@ 0x80
 8012418:	eec8 0a07 	vdiv.f32	s1, s16, s14
 801241c:	ee3c ca40 	vsub.f32	s24, s24, s0
 8012420:	ee39 9a60 	vsub.f32	s18, s18, s1
 8012424:	ee29 9a09 	vmul.f32	s18, s18, s18
 8012428:	eeac 9a0c 	vfma.f32	s18, s24, s24
 801242c:	eef4 7ac9 	vcmpe.f32	s15, s18
 8012430:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012434:	db04      	blt.n	8012440 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas18strokeDrawLineJoinEffffffffff+0x108>
 8012436:	f7ff feb2 	bl	801219e <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 801243a:	ecbd 8b0a 	vpop	{d8-d12}
 801243e:	bd10      	pop	{r4, pc}
 8012440:	eef0 0a6b 	vmov.f32	s1, s23
 8012444:	4620      	mov	r0, r4
 8012446:	eeb0 0a4b 	vmov.f32	s0, s22
 801244a:	f7ff fea8 	bl	801219e <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 801244e:	e7b6      	b.n	80123be <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas18strokeDrawLineJoinEffffffffff+0x86>

08012450 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff>:
 8012450:	b510      	push	{r4, lr}
 8012452:	ed2d 8b0c 	vpush	{d8-d13}
 8012456:	f890 3085 	ldrb.w	r3, [r0, #133]	@ 0x85
 801245a:	4604      	mov	r4, r0
 801245c:	eeb0 9a40 	vmov.f32	s18, s0
 8012460:	eef0 9a60 	vmov.f32	s19, s1
 8012464:	eef0 aa41 	vmov.f32	s21, s2
 8012468:	eeb0 ba61 	vmov.f32	s22, s3
 801246c:	b933      	cbnz	r3, 801247c <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x2c>
 801246e:	f7ff fe96 	bl	801219e <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 8012472:	eef0 0a4b 	vmov.f32	s1, s22
 8012476:	eeb0 0a6a 	vmov.f32	s0, s21
 801247a:	e015      	b.n	80124a8 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x58>
 801247c:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8012480:	2b02      	cmp	r3, #2
 8012482:	ee71 8a40 	vsub.f32	s17, s2, s0
 8012486:	ee31 8ae0 	vsub.f32	s16, s3, s1
 801248a:	ee68 8aa7 	vmul.f32	s17, s17, s15
 801248e:	ee28 8a27 	vmul.f32	s16, s16, s15
 8012492:	d10f      	bne.n	80124b4 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x64>
 8012494:	ee70 0ae8 	vsub.f32	s1, s1, s17
 8012498:	ee30 0a08 	vadd.f32	s0, s0, s16
 801249c:	f7ff fe7f 	bl	801219e <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 80124a0:	ee7b 0a68 	vsub.f32	s1, s22, s17
 80124a4:	ee3a 0a88 	vadd.f32	s0, s21, s16
 80124a8:	4620      	mov	r0, r4
 80124aa:	f7ff fe78 	bl	801219e <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 80124ae:	ecbd 8b0c 	vpop	{d8-d13}
 80124b2:	bd10      	pop	{r4, pc}
 80124b4:	f7ff fe73 	bl	801219e <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 80124b8:	eef0 0a69 	vmov.f32	s1, s19
 80124bc:	eeb0 0a49 	vmov.f32	s0, s18
 80124c0:	eddf 7a4b 	vldr	s15, [pc, #300]	@ 80125f0 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1a0>
 80124c4:	eeb1 aa68 	vneg.f32	s20, s17
 80124c8:	eddf ba4a 	vldr	s23, [pc, #296]	@ 80125f4 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1a4>
 80124cc:	eee8 0a27 	vfma.f32	s1, s16, s15
 80124d0:	4620      	mov	r0, r4
 80124d2:	eea8 0aa7 	vfma.f32	s0, s17, s15
 80124d6:	ed9f ca48 	vldr	s24, [pc, #288]	@ 80125f8 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1a8>
 80124da:	eddf ca48 	vldr	s25, [pc, #288]	@ 80125fc <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1ac>
 80124de:	ed9f da48 	vldr	s26, [pc, #288]	@ 8012600 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1b0>
 80124e2:	eeea 0a2b 	vfma.f32	s1, s20, s23
 80124e6:	eea8 0a2b 	vfma.f32	s0, s16, s23
 80124ea:	f7ff fe58 	bl	801219e <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 80124ee:	eef0 0a69 	vmov.f32	s1, s19
 80124f2:	eeb0 0a49 	vmov.f32	s0, s18
 80124f6:	eddf 7a43 	vldr	s15, [pc, #268]	@ 8012604 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1b4>
 80124fa:	4620      	mov	r0, r4
 80124fc:	eee8 0a27 	vfma.f32	s1, s16, s15
 8012500:	eea8 0aa7 	vfma.f32	s0, s17, s15
 8012504:	eeea 0a0c 	vfma.f32	s1, s20, s24
 8012508:	eea8 0a0c 	vfma.f32	s0, s16, s24
 801250c:	f7ff fe47 	bl	801219e <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 8012510:	eef0 0a69 	vmov.f32	s1, s19
 8012514:	eeb0 0a49 	vmov.f32	s0, s18
 8012518:	eddf 7a3b 	vldr	s15, [pc, #236]	@ 8012608 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1b8>
 801251c:	4620      	mov	r0, r4
 801251e:	eee8 0a27 	vfma.f32	s1, s16, s15
 8012522:	eea8 0aa7 	vfma.f32	s0, s17, s15
 8012526:	eeea 0a2c 	vfma.f32	s1, s20, s25
 801252a:	eea8 0a2c 	vfma.f32	s0, s16, s25
 801252e:	f7ff fe36 	bl	801219e <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 8012532:	eef0 0a69 	vmov.f32	s1, s19
 8012536:	eeb0 0a49 	vmov.f32	s0, s18
 801253a:	eddf 7a34 	vldr	s15, [pc, #208]	@ 801260c <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1bc>
 801253e:	4620      	mov	r0, r4
 8012540:	eee8 0a27 	vfma.f32	s1, s16, s15
 8012544:	eea8 0aa7 	vfma.f32	s0, s17, s15
 8012548:	eeea 0a0d 	vfma.f32	s1, s20, s26
 801254c:	eea8 0a0d 	vfma.f32	s0, s16, s26
 8012550:	f7ff fe25 	bl	801219e <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 8012554:	ee79 0a88 	vadd.f32	s1, s19, s16
 8012558:	ee39 0a28 	vadd.f32	s0, s18, s17
 801255c:	4620      	mov	r0, r4
 801255e:	ee70 0ae8 	vsub.f32	s1, s1, s17
 8012562:	ee30 0a08 	vadd.f32	s0, s0, s16
 8012566:	f7ff fe1a 	bl	801219e <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 801256a:	eef0 0a69 	vmov.f32	s1, s19
 801256e:	eeb0 0a49 	vmov.f32	s0, s18
 8012572:	eddf 7a27 	vldr	s15, [pc, #156]	@ 8012610 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1c0>
 8012576:	4620      	mov	r0, r4
 8012578:	eee8 0a27 	vfma.f32	s1, s16, s15
 801257c:	eea8 0aa7 	vfma.f32	s0, s17, s15
 8012580:	eeea 0a0d 	vfma.f32	s1, s20, s26
 8012584:	eea8 0a0d 	vfma.f32	s0, s16, s26
 8012588:	f7ff fe09 	bl	801219e <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 801258c:	eef0 0a69 	vmov.f32	s1, s19
 8012590:	eeb0 0a49 	vmov.f32	s0, s18
 8012594:	eddf 7a1f 	vldr	s15, [pc, #124]	@ 8012614 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1c4>
 8012598:	4620      	mov	r0, r4
 801259a:	eee8 0a27 	vfma.f32	s1, s16, s15
 801259e:	eea8 0aa7 	vfma.f32	s0, s17, s15
 80125a2:	eeea 0a2c 	vfma.f32	s1, s20, s25
 80125a6:	eea8 0a2c 	vfma.f32	s0, s16, s25
 80125aa:	f7ff fdf8 	bl	801219e <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 80125ae:	eef0 0a69 	vmov.f32	s1, s19
 80125b2:	eeb0 0a49 	vmov.f32	s0, s18
 80125b6:	eddf 7a18 	vldr	s15, [pc, #96]	@ 8012618 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1c8>
 80125ba:	4620      	mov	r0, r4
 80125bc:	eee8 0a27 	vfma.f32	s1, s16, s15
 80125c0:	eea8 0aa7 	vfma.f32	s0, s17, s15
 80125c4:	eeea 0a0c 	vfma.f32	s1, s20, s24
 80125c8:	eea8 0a0c 	vfma.f32	s0, s16, s24
 80125cc:	f7ff fde7 	bl	801219e <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 80125d0:	eef0 0a69 	vmov.f32	s1, s19
 80125d4:	eeb0 0a49 	vmov.f32	s0, s18
 80125d8:	eddf 7a10 	vldr	s15, [pc, #64]	@ 801261c <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1cc>
 80125dc:	4620      	mov	r0, r4
 80125de:	eee8 0a27 	vfma.f32	s1, s16, s15
 80125e2:	eea8 0aa7 	vfma.f32	s0, s17, s15
 80125e6:	eeea 0a2b 	vfma.f32	s1, s20, s23
 80125ea:	eea8 0a2b 	vfma.f32	s0, s16, s23
 80125ee:	e73e      	b.n	801246e <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1e>
 80125f0:	3d23d70a 	.word	0x3d23d70a
 80125f4:	3e8f5c29 	.word	0x3e8f5c29
 80125f8:	3f19999a 	.word	0x3f19999a
 80125fc:	3f4ccccd 	.word	0x3f4ccccd
 8012600:	3f75c28f 	.word	0x3f75c28f
 8012604:	3e4ccccd 	.word	0x3e4ccccd
 8012608:	3ecccccd 	.word	0x3ecccccd
 801260c:	3f3851ec 	.word	0x3f3851ec
 8012610:	3fa3d70a 	.word	0x3fa3d70a
 8012614:	3fcccccd 	.word	0x3fcccccd
 8012618:	3fe66666 	.word	0x3fe66666
 801261c:	3ffae148 	.word	0x3ffae148

08012620 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff>:
 8012620:	b570      	push	{r4, r5, r6, lr}
 8012622:	ed2d 8b06 	vpush	{d8-d10}
 8012626:	ed90 8a23 	vldr	s16, [r0, #140]	@ 0x8c
 801262a:	eef0 aa40 	vmov.f32	s21, s0
 801262e:	ed90 9a22 	vldr	s18, [r0, #136]	@ 0x88
 8012632:	4604      	mov	r4, r0
 8012634:	ee30 8ac8 	vsub.f32	s16, s1, s16
 8012638:	ee30 9a49 	vsub.f32	s18, s0, s18
 801263c:	eeb0 aa60 	vmov.f32	s20, s1
 8012640:	ee28 0a08 	vmul.f32	s0, s16, s16
 8012644:	eea9 0a09 	vfma.f32	s0, s18, s18
 8012648:	f014 ff4c 	bl	80274e4 <sqrtf>
 801264c:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8012650:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012654:	dd36      	ble.n	80126c4 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff+0xa4>
 8012656:	edd4 7a1f 	vldr	s15, [r4, #124]	@ 0x7c
 801265a:	2600      	movs	r6, #0
 801265c:	edd4 0a23 	vldr	s1, [r4, #140]	@ 0x8c
 8012660:	eec0 6a27 	vdiv.f32	s13, s0, s15
 8012664:	f894 5078 	ldrb.w	r5, [r4, #120]	@ 0x78
 8012668:	ed94 0a22 	vldr	s0, [r4, #136]	@ 0x88
 801266c:	f884 6079 	strb.w	r6, [r4, #121]	@ 0x79
 8012670:	eec8 8a26 	vdiv.f32	s17, s16, s13
 8012674:	ee89 8a26 	vdiv.f32	s16, s18, s13
 8012678:	ee70 9a28 	vadd.f32	s19, s0, s17
 801267c:	ee78 8aaa 	vadd.f32	s17, s17, s21
 8012680:	ee30 9ac8 	vsub.f32	s18, s1, s16
 8012684:	ee3a 8a48 	vsub.f32	s16, s20, s16
 8012688:	b1fd      	cbz	r5, 80126ca <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff+0xaa>
 801268a:	edc4 9a24 	vstr	s19, [r4, #144]	@ 0x90
 801268e:	eef0 0a49 	vmov.f32	s1, s18
 8012692:	ed84 9a25 	vstr	s18, [r4, #148]	@ 0x94
 8012696:	eeb0 0a69 	vmov.f32	s0, s19
 801269a:	edc4 8a26 	vstr	s17, [r4, #152]	@ 0x98
 801269e:	4620      	mov	r0, r4
 80126a0:	ed84 8a27 	vstr	s16, [r4, #156]	@ 0x9c
 80126a4:	f7ff fd64 	bl	8012170 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19moveToWithTransformEff>
 80126a8:	f884 6078 	strb.w	r6, [r4, #120]	@ 0x78
 80126ac:	edc4 9a28 	vstr	s19, [r4, #160]	@ 0xa0
 80126b0:	ed84 9a29 	vstr	s18, [r4, #164]	@ 0xa4
 80126b4:	edc4 8a2a 	vstr	s17, [r4, #168]	@ 0xa8
 80126b8:	ed84 8a2b 	vstr	s16, [r4, #172]	@ 0xac
 80126bc:	edc4 aa22 	vstr	s21, [r4, #136]	@ 0x88
 80126c0:	ed84 aa23 	vstr	s20, [r4, #140]	@ 0x8c
 80126c4:	ecbd 8b06 	vpop	{d8-d10}
 80126c8:	bd70      	pop	{r4, r5, r6, pc}
 80126ca:	f894 307a 	ldrb.w	r3, [r4, #122]	@ 0x7a
 80126ce:	ed94 2a2a 	vldr	s4, [r4, #168]	@ 0xa8
 80126d2:	edd4 2a2b 	vldr	s5, [r4, #172]	@ 0xac
 80126d6:	b16b      	cbz	r3, 80126f4 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff+0xd4>
 80126d8:	eef0 1a49 	vmov.f32	s3, s18
 80126dc:	4620      	mov	r0, r4
 80126de:	eeb0 1a69 	vmov.f32	s2, s19
 80126e2:	eef0 0a62 	vmov.f32	s1, s5
 80126e6:	eeb0 0a42 	vmov.f32	s0, s4
 80126ea:	f7ff feb1 	bl	8012450 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff>
 80126ee:	f884 507a 	strb.w	r5, [r4, #122]	@ 0x7a
 80126f2:	e7db      	b.n	80126ac <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff+0x8c>
 80126f4:	eef0 4a48 	vmov.f32	s9, s16
 80126f8:	edd4 1a29 	vldr	s3, [r4, #164]	@ 0xa4
 80126fc:	eeb0 4a68 	vmov.f32	s8, s17
 8012700:	ed94 1a28 	vldr	s2, [r4, #160]	@ 0xa0
 8012704:	eef0 3a49 	vmov.f32	s7, s18
 8012708:	4620      	mov	r0, r4
 801270a:	eeb0 3a69 	vmov.f32	s6, s19
 801270e:	f7ff fe13 	bl	8012338 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas18strokeDrawLineJoinEffffffffff>
 8012712:	e7cb      	b.n	80126ac <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff+0x8c>

08012714 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas6lineToENS_7CWRUtil2Q5ES3_>:
 8012714:	ee07 2a90 	vmov	s15, r2
 8012718:	ee07 1a10 	vmov	s14, r1
 801271c:	eef8 0ae7 	vcvt.f32.s32	s1, s15
 8012720:	eddf 7a04 	vldr	s15, [pc, #16]	@ 8012734 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas6lineToENS_7CWRUtil2Q5ES3_+0x20>
 8012724:	eeb8 0ac7 	vcvt.f32.s32	s0, s14
 8012728:	ee60 0aa7 	vmul.f32	s1, s1, s15
 801272c:	ee20 0a27 	vmul.f32	s0, s0, s15
 8012730:	f7ff bf76 	b.w	8012620 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff>
 8012734:	3d000000 	.word	0x3d000000

08012738 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawDoubleLineCapEv>:
 8012738:	b538      	push	{r3, r4, r5, lr}
 801273a:	ed2d 8b02 	vpush	{d8}
 801273e:	f890 5079 	ldrb.w	r5, [r0, #121]	@ 0x79
 8012742:	4604      	mov	r4, r0
 8012744:	b31d      	cbz	r5, 801278e <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawDoubleLineCapEv+0x56>
 8012746:	edd0 7a1f 	vldr	s15, [r0, #124]	@ 0x7c
 801274a:	ed90 8a23 	vldr	s16, [r0, #140]	@ 0x8c
 801274e:	ed90 0a22 	vldr	s0, [r0, #136]	@ 0x88
 8012752:	ee78 8a67 	vsub.f32	s17, s16, s15
 8012756:	ee38 8a27 	vadd.f32	s16, s16, s15
 801275a:	eef0 0a68 	vmov.f32	s1, s17
 801275e:	f7ff fd07 	bl	8012170 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19moveToWithTransformEff>
 8012762:	ed94 1a22 	vldr	s2, [r4, #136]	@ 0x88
 8012766:	eef0 1a48 	vmov.f32	s3, s16
 801276a:	4620      	mov	r0, r4
 801276c:	eeb0 0a41 	vmov.f32	s0, s2
 8012770:	eef0 0a68 	vmov.f32	s1, s17
 8012774:	f7ff fe6c 	bl	8012450 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff>
 8012778:	ed94 1a22 	vldr	s2, [r4, #136]	@ 0x88
 801277c:	eef0 1a68 	vmov.f32	s3, s17
 8012780:	4620      	mov	r0, r4
 8012782:	eef0 0a48 	vmov.f32	s1, s16
 8012786:	eeb0 0a41 	vmov.f32	s0, s2
 801278a:	f7ff fe61 	bl	8012450 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff>
 801278e:	4628      	mov	r0, r5
 8012790:	ecbd 8b02 	vpop	{d8}
 8012794:	bd38      	pop	{r3, r4, r5, pc}

08012796 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas11strokeCloseEff>:
 8012796:	b510      	push	{r4, lr}
 8012798:	ed2d 8b02 	vpush	{d8}
 801279c:	4604      	mov	r4, r0
 801279e:	eeb0 8a40 	vmov.f32	s16, s0
 80127a2:	eef0 8a60 	vmov.f32	s17, s1
 80127a6:	f7ff ffc7 	bl	8012738 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawDoubleLineCapEv>
 80127aa:	b9d0      	cbnz	r0, 80127e2 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas11strokeCloseEff+0x4c>
 80127ac:	4620      	mov	r0, r4
 80127ae:	edd4 4a27 	vldr	s9, [r4, #156]	@ 0x9c
 80127b2:	ed94 4a26 	vldr	s8, [r4, #152]	@ 0x98
 80127b6:	eef0 0a68 	vmov.f32	s1, s17
 80127ba:	edd4 3a25 	vldr	s7, [r4, #148]	@ 0x94
 80127be:	eeb0 0a48 	vmov.f32	s0, s16
 80127c2:	ed94 3a24 	vldr	s6, [r4, #144]	@ 0x90
 80127c6:	edd4 2a2b 	vldr	s5, [r4, #172]	@ 0xac
 80127ca:	ed94 2a2a 	vldr	s4, [r4, #168]	@ 0xa8
 80127ce:	edd4 1a29 	vldr	s3, [r4, #164]	@ 0xa4
 80127d2:	ed94 1a28 	vldr	s2, [r4, #160]	@ 0xa0
 80127d6:	f7ff fdaf 	bl	8012338 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas18strokeDrawLineJoinEffffffffff>
 80127da:	2001      	movs	r0, #1
 80127dc:	ecbd 8b02 	vpop	{d8}
 80127e0:	bd10      	pop	{r4, pc}
 80127e2:	2000      	movs	r0, #0
 80127e4:	e7fa      	b.n	80127dc <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas11strokeCloseEff+0x46>

080127e6 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas16drawFinalLineCapEv>:
 80127e6:	edd0 1a25 	vldr	s3, [r0, #148]	@ 0x94
 80127ea:	ed90 1a24 	vldr	s2, [r0, #144]	@ 0x90
 80127ee:	edd0 0a2b 	vldr	s1, [r0, #172]	@ 0xac
 80127f2:	ed90 0a2a 	vldr	s0, [r0, #168]	@ 0xa8
 80127f6:	f7ff be2b 	b.w	8012450 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff>
	...

080127fc <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE>:
 80127fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012800:	b089      	sub	sp, #36	@ 0x24
 8012802:	461c      	mov	r4, r3
 8012804:	4682      	mov	sl, r0
 8012806:	4615      	mov	r5, r2
 8012808:	f89d 3050 	ldrb.w	r3, [sp, #80]	@ 0x50
 801280c:	f10d 0820 	add.w	r8, sp, #32
 8012810:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8012812:	9304      	str	r3, [sp, #16]
 8012814:	2300      	movs	r3, #0
 8012816:	9105      	str	r1, [sp, #20]
 8012818:	9306      	str	r3, [sp, #24]
 801281a:	f848 3d04 	str.w	r3, [r8, #-4]!
 801281e:	9b04      	ldr	r3, [sp, #16]
 8012820:	e9dd 9712 	ldrd	r9, r7, [sp, #72]	@ 0x48
 8012824:	f886 307a 	strb.w	r3, [r6, #122]	@ 0x7a
 8012828:	9b05      	ldr	r3, [sp, #20]
 801282a:	429d      	cmp	r5, r3
 801282c:	d96d      	bls.n	801290a <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE+0x10e>
 801282e:	3d01      	subs	r5, #1
 8012830:	f819 3005 	ldrb.w	r3, [r9, r5]
 8012834:	2b06      	cmp	r3, #6
 8012836:	d8f7      	bhi.n	8012828 <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE+0x2c>
 8012838:	a201      	add	r2, pc, #4	@ (adr r2, 8012840 <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE+0x44>)
 801283a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801283e:	bf00      	nop
 8012840:	0801285f 	.word	0x0801285f
 8012844:	08012829 	.word	0x08012829
 8012848:	0801285d 	.word	0x0801285d
 801284c:	08012881 	.word	0x08012881
 8012850:	08012881 	.word	0x08012881
 8012854:	08012885 	.word	0x08012885
 8012858:	080128c5 	.word	0x080128c5
 801285c:	3c02      	subs	r4, #2
 801285e:	4650      	mov	r0, sl
 8012860:	9400      	str	r4, [sp, #0]
 8012862:	462b      	mov	r3, r5
 8012864:	4642      	mov	r2, r8
 8012866:	a906      	add	r1, sp, #24
 8012868:	e9cd 9701 	strd	r9, r7, [sp, #4]
 801286c:	f7ff fcae 	bl	80121cc <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf>
 8012870:	eddd 0a07 	vldr	s1, [sp, #28]
 8012874:	ed9d 0a06 	vldr	s0, [sp, #24]
 8012878:	4630      	mov	r0, r6
 801287a:	f7ff fed1 	bl	8012620 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff>
 801287e:	e7d3      	b.n	8012828 <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE+0x2c>
 8012880:	3c01      	subs	r4, #1
 8012882:	e7ec      	b.n	801285e <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE+0x62>
 8012884:	f1a4 0b04 	sub.w	fp, r4, #4
 8012888:	3c02      	subs	r4, #2
 801288a:	4650      	mov	r0, sl
 801288c:	462b      	mov	r3, r5
 801288e:	eb07 0484 	add.w	r4, r7, r4, lsl #2
 8012892:	f8cd b000 	str.w	fp, [sp]
 8012896:	4642      	mov	r2, r8
 8012898:	a906      	add	r1, sp, #24
 801289a:	e9cd 9701 	strd	r9, r7, [sp, #4]
 801289e:	f7ff fc95 	bl	80121cc <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf>
 80128a2:	eddd 2a07 	vldr	s5, [sp, #28]
 80128a6:	ed9d 2a06 	vldr	s4, [sp, #24]
 80128aa:	4630      	mov	r0, r6
 80128ac:	ed54 1a01 	vldr	s3, [r4, #-4]
 80128b0:	ed14 1a02 	vldr	s2, [r4, #-8]
 80128b4:	edd4 0a01 	vldr	s1, [r4, #4]
 80128b8:	ed94 0a00 	vldr	s0, [r4]
 80128bc:	f7ff fc1a 	bl	80120f4 <_ZN8touchgfx6Canvas17quadraticBezierToEffffff>
 80128c0:	465c      	mov	r4, fp
 80128c2:	e7b1      	b.n	8012828 <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE+0x2c>
 80128c4:	f1a4 0b06 	sub.w	fp, r4, #6
 80128c8:	3c02      	subs	r4, #2
 80128ca:	4650      	mov	r0, sl
 80128cc:	462b      	mov	r3, r5
 80128ce:	eb07 0484 	add.w	r4, r7, r4, lsl #2
 80128d2:	f8cd b000 	str.w	fp, [sp]
 80128d6:	4642      	mov	r2, r8
 80128d8:	a906      	add	r1, sp, #24
 80128da:	e9cd 9701 	strd	r9, r7, [sp, #4]
 80128de:	f7ff fc75 	bl	80121cc <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf>
 80128e2:	eddd 3a07 	vldr	s7, [sp, #28]
 80128e6:	ed9d 3a06 	vldr	s6, [sp, #24]
 80128ea:	4630      	mov	r0, r6
 80128ec:	ed54 2a03 	vldr	s5, [r4, #-12]
 80128f0:	ed14 2a04 	vldr	s4, [r4, #-16]
 80128f4:	ed54 1a01 	vldr	s3, [r4, #-4]
 80128f8:	ed14 1a02 	vldr	s2, [r4, #-8]
 80128fc:	edd4 0a01 	vldr	s1, [r4, #4]
 8012900:	ed94 0a00 	vldr	s0, [r4]
 8012904:	f7ff fc15 	bl	8012132 <_ZN8touchgfx6Canvas13cubicBezierToEffffffff>
 8012908:	e7da      	b.n	80128c0 <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE+0xc4>
 801290a:	9b04      	ldr	r3, [sp, #16]
 801290c:	b113      	cbz	r3, 8012914 <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE+0x118>
 801290e:	4630      	mov	r0, r6
 8012910:	f7ff ff69 	bl	80127e6 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas16drawFinalLineCapEv>
 8012914:	b009      	add	sp, #36	@ 0x24
 8012916:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801291a:	bf00      	nop

0801291c <_ZN8touchgfx6Canvas6lineToIfEEvT_S2_>:
 801291c:	eef0 7a60 	vmov.f32	s15, s1
 8012920:	6803      	ldr	r3, [r0, #0]
 8012922:	689b      	ldr	r3, [r3, #8]
 8012924:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 8012928:	ee17 2a90 	vmov	r2, s15
 801292c:	eef0 7a40 	vmov.f32	s15, s0
 8012930:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 8012934:	ee17 1a90 	vmov	r1, s15
 8012938:	4718      	bx	r3
	...

0801293c <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvasD1Ev>:
 801293c:	4b04      	ldr	r3, [pc, #16]	@ (8012950 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvasD1Ev+0x14>)
 801293e:	b510      	push	{r4, lr}
 8012940:	4604      	mov	r4, r0
 8012942:	f840 3b14 	str.w	r3, [r0], #20
 8012946:	f002 fee1 	bl	801570c <_ZN8touchgfx7OutlineD1Ev>
 801294a:	4620      	mov	r0, r4
 801294c:	bd10      	pop	{r4, pc}
 801294e:	bf00      	nop
 8012950:	0802d4e4 	.word	0x0802d4e4

08012954 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE>:
 8012954:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012958:	ed2d 8b04 	vpush	{d8-d9}
 801295c:	edd0 7a0c 	vldr	s15, [r0, #48]	@ 0x30
 8012960:	b0b5      	sub	sp, #212	@ 0xd4
 8012962:	4605      	mov	r5, r0
 8012964:	468b      	mov	fp, r1
 8012966:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801296a:	9206      	str	r2, [sp, #24]
 801296c:	461e      	mov	r6, r3
 801296e:	2400      	movs	r4, #0
 8012970:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012974:	f240 814f 	bls.w	8012c16 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x2c2>
 8012978:	23ff      	movs	r3, #255	@ 0xff
 801297a:	1d02      	adds	r2, r0, #4
 801297c:	ed9f 9aa7 	vldr	s18, [pc, #668]	@ 8012c1c <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x2c8>
 8012980:	f04f 0800 	mov.w	r8, #0
 8012984:	9300      	str	r3, [sp, #0]
 8012986:	af08      	add	r7, sp, #32
 8012988:	6981      	ldr	r1, [r0, #24]
 801298a:	a808      	add	r0, sp, #32
 801298c:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 801298e:	eef0 9a49 	vmov.f32	s19, s18
 8012992:	f013 fa31 	bl	8025df8 <_ZN8touchgfx6CanvasC1EPKNS_15AbstractPainterERKNS_4RectES6_h>
 8012996:	edd5 7a0c 	vldr	s15, [r5, #48]	@ 0x30
 801299a:	4ba1      	ldr	r3, [pc, #644]	@ (8012c20 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x2cc>)
 801299c:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80129a0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80129a4:	2201      	movs	r2, #1
 80129a6:	9308      	str	r3, [sp, #32]
 80129a8:	f105 0334 	add.w	r3, r5, #52	@ 0x34
 80129ac:	edd5 6a08 	vldr	s13, [r5, #32]
 80129b0:	eeb0 8a49 	vmov.f32	s16, s18
 80129b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80129b8:	9325      	str	r3, [sp, #148]	@ 0x94
 80129ba:	f04f 0300 	mov.w	r3, #0
 80129be:	f88d 2099 	strb.w	r2, [sp, #153]	@ 0x99
 80129c2:	7f6a      	ldrb	r2, [r5, #29]
 80129c4:	eef0 8a49 	vmov.f32	s17, s18
 80129c8:	bf48      	it	mi
 80129ca:	eef1 7a67 	vnegmi.f32	s15, s15
 80129ce:	f88d 3098 	strb.w	r3, [sp, #152]	@ 0x98
 80129d2:	f88d 309a 	strb.w	r3, [sp, #154]	@ 0x9a
 80129d6:	46c1      	mov	r9, r8
 80129d8:	f88d 3064 	strb.w	r3, [sp, #100]	@ 0x64
 80129dc:	f04f 0a01 	mov.w	sl, #1
 80129e0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80129e4:	7fab      	ldrb	r3, [r5, #30]
 80129e6:	942a      	str	r4, [sp, #168]	@ 0xa8
 80129e8:	435a      	muls	r2, r3
 80129ea:	f895 0024 	ldrb.w	r0, [r5, #36]	@ 0x24
 80129ee:	ee26 7aa7 	vmul.f32	s14, s13, s15
 80129f2:	edcd 7a27 	vstr	s15, [sp, #156]	@ 0x9c
 80129f6:	1c53      	adds	r3, r2, #1
 80129f8:	942b      	str	r4, [sp, #172]	@ 0xac
 80129fa:	942c      	str	r4, [sp, #176]	@ 0xb0
 80129fc:	ee27 7a26 	vmul.f32	s14, s14, s13
 8012a00:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8012a04:	942d      	str	r4, [sp, #180]	@ 0xb4
 8012a06:	942e      	str	r4, [sp, #184]	@ 0xb8
 8012a08:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8012a0c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8012a10:	942f      	str	r4, [sp, #188]	@ 0xbc
 8012a12:	9430      	str	r4, [sp, #192]	@ 0xc0
 8012a14:	9431      	str	r4, [sp, #196]	@ 0xc4
 8012a16:	9432      	str	r4, [sp, #200]	@ 0xc8
 8012a18:	9433      	str	r4, [sp, #204]	@ 0xcc
 8012a1a:	4644      	mov	r4, r8
 8012a1c:	f895 1025 	ldrb.w	r1, [r5, #37]	@ 0x25
 8012a20:	edcd 7a28 	vstr	s15, [sp, #160]	@ 0xa0
 8012a24:	f88d 00a4 	strb.w	r0, [sp, #164]	@ 0xa4
 8012a28:	f88d 10a5 	strb.w	r1, [sp, #165]	@ 0xa5
 8012a2c:	f88d 30a6 	strb.w	r3, [sp, #166]	@ 0xa6
 8012a30:	9b06      	ldr	r3, [sp, #24]
 8012a32:	454b      	cmp	r3, r9
 8012a34:	f000 80cc 	beq.w	8012bd0 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x27c>
 8012a38:	f109 0301 	add.w	r3, r9, #1
 8012a3c:	9305      	str	r3, [sp, #20]
 8012a3e:	f81b 3009 	ldrb.w	r3, [fp, r9]
 8012a42:	2b06      	cmp	r3, #6
 8012a44:	d839      	bhi.n	8012aba <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x166>
 8012a46:	e8df f003 	tbb	[pc, r3]
 8012a4a:	3b04      	.short	0x3b04
 8012a4c:	817c6f60 	.word	0x817c6f60
 8012a50:	a0          	.byte	0xa0
 8012a51:	00          	.byte	0x00
 8012a52:	45c1      	cmp	r9, r8
 8012a54:	d92b      	bls.n	8012aae <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x15a>
 8012a56:	eef0 0a49 	vmov.f32	s1, s18
 8012a5a:	4638      	mov	r0, r7
 8012a5c:	eeb0 0a69 	vmov.f32	s0, s19
 8012a60:	f7ff fdde 	bl	8012620 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff>
 8012a64:	4638      	mov	r0, r7
 8012a66:	f7ff fe67 	bl	8012738 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawDoubleLineCapEv>
 8012a6a:	4681      	mov	r9, r0
 8012a6c:	b9f8      	cbnz	r0, 8012aae <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x15a>
 8012a6e:	eef0 0a49 	vmov.f32	s1, s18
 8012a72:	4638      	mov	r0, r7
 8012a74:	eeb0 0a69 	vmov.f32	s0, s19
 8012a78:	f7ff fe8d 	bl	8012796 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas11strokeCloseEff>
 8012a7c:	4628      	mov	r0, r5
 8012a7e:	4623      	mov	r3, r4
 8012a80:	9a05      	ldr	r2, [sp, #20]
 8012a82:	4641      	mov	r1, r8
 8012a84:	edcd 9a2a 	vstr	s19, [sp, #168]	@ 0xa8
 8012a88:	ed8d 9a2b 	vstr	s18, [sp, #172]	@ 0xac
 8012a8c:	f88d a098 	strb.w	sl, [sp, #152]	@ 0x98
 8012a90:	f88d a099 	strb.w	sl, [sp, #153]	@ 0x99
 8012a94:	e9cd 9702 	strd	r9, r7, [sp, #8]
 8012a98:	e9cd b600 	strd	fp, r6, [sp]
 8012a9c:	f7ff feae 	bl	80127fc <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE>
 8012aa0:	eef0 0a49 	vmov.f32	s1, s18
 8012aa4:	eeb0 0a69 	vmov.f32	s0, s19
 8012aa8:	4638      	mov	r0, r7
 8012aaa:	f7ff fe74 	bl	8012796 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas11strokeCloseEff>
 8012aae:	eeb0 8a49 	vmov.f32	s16, s18
 8012ab2:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8012ab6:	eef0 8a69 	vmov.f32	s17, s19
 8012aba:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8012abe:	e7b7      	b.n	8012a30 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0xdc>
 8012ac0:	45c1      	cmp	r9, r8
 8012ac2:	d90d      	bls.n	8012ae0 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x18c>
 8012ac4:	4638      	mov	r0, r7
 8012ac6:	f7ff fe37 	bl	8012738 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawDoubleLineCapEv>
 8012aca:	b948      	cbnz	r0, 8012ae0 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x18c>
 8012acc:	4623      	mov	r3, r4
 8012ace:	464a      	mov	r2, r9
 8012ad0:	4641      	mov	r1, r8
 8012ad2:	4628      	mov	r0, r5
 8012ad4:	e9cd a702 	strd	sl, r7, [sp, #8]
 8012ad8:	e9cd b600 	strd	fp, r6, [sp]
 8012adc:	f7ff fe8e 	bl	80127fc <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE>
 8012ae0:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8012ae4:	f88d a098 	strb.w	sl, [sp, #152]	@ 0x98
 8012ae8:	f88d a099 	strb.w	sl, [sp, #153]	@ 0x99
 8012aec:	3402      	adds	r4, #2
 8012aee:	edd3 8a00 	vldr	s17, [r3]
 8012af2:	46c8      	mov	r8, r9
 8012af4:	ed93 8a01 	vldr	s16, [r3, #4]
 8012af8:	edcd 8a2a 	vstr	s17, [sp, #168]	@ 0xa8
 8012afc:	eef0 9a68 	vmov.f32	s19, s17
 8012b00:	ed8d 8a2b 	vstr	s16, [sp, #172]	@ 0xac
 8012b04:	eeb0 9a48 	vmov.f32	s18, s16
 8012b08:	e7d7      	b.n	8012aba <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x166>
 8012b0a:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8012b0e:	4638      	mov	r0, r7
 8012b10:	3402      	adds	r4, #2
 8012b12:	edd3 8a00 	vldr	s17, [r3]
 8012b16:	ed93 8a01 	vldr	s16, [r3, #4]
 8012b1a:	eeb0 0a68 	vmov.f32	s0, s17
 8012b1e:	eef0 0a48 	vmov.f32	s1, s16
 8012b22:	f7ff fd7d 	bl	8012620 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff>
 8012b26:	e7c8      	b.n	8012aba <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x166>
 8012b28:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8012b2c:	edd3 8a00 	vldr	s17, [r3]
 8012b30:	eef0 0a48 	vmov.f32	s1, s16
 8012b34:	4638      	mov	r0, r7
 8012b36:	eeb0 0a68 	vmov.f32	s0, s17
 8012b3a:	3401      	adds	r4, #1
 8012b3c:	f7ff fd70 	bl	8012620 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff>
 8012b40:	e7bb      	b.n	8012aba <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x166>
 8012b42:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8012b46:	ed93 8a00 	vldr	s16, [r3]
 8012b4a:	e7f1      	b.n	8012b30 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x1dc>
 8012b4c:	00a3      	lsls	r3, r4, #2
 8012b4e:	eef0 0a48 	vmov.f32	s1, s16
 8012b52:	eeb0 0a68 	vmov.f32	s0, s17
 8012b56:	4638      	mov	r0, r7
 8012b58:	f103 0208 	add.w	r2, r3, #8
 8012b5c:	f103 090c 	add.w	r9, r3, #12
 8012b60:	4433      	add	r3, r6
 8012b62:	3404      	adds	r4, #4
 8012b64:	4432      	add	r2, r6
 8012b66:	44b1      	add	r9, r6
 8012b68:	edd3 1a01 	vldr	s3, [r3, #4]
 8012b6c:	ed92 2a00 	vldr	s4, [r2]
 8012b70:	edd9 2a00 	vldr	s5, [r9]
 8012b74:	ed93 1a00 	vldr	s2, [r3]
 8012b78:	9207      	str	r2, [sp, #28]
 8012b7a:	f7ff fabb 	bl	80120f4 <_ZN8touchgfx6Canvas17quadraticBezierToEffffff>
 8012b7e:	9a07      	ldr	r2, [sp, #28]
 8012b80:	ed99 8a00 	vldr	s16, [r9]
 8012b84:	edd2 8a00 	vldr	s17, [r2]
 8012b88:	e797      	b.n	8012aba <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x166>
 8012b8a:	00a3      	lsls	r3, r4, #2
 8012b8c:	eef0 0a48 	vmov.f32	s1, s16
 8012b90:	eeb0 0a68 	vmov.f32	s0, s17
 8012b94:	4638      	mov	r0, r7
 8012b96:	f103 0210 	add.w	r2, r3, #16
 8012b9a:	f103 0914 	add.w	r9, r3, #20
 8012b9e:	4433      	add	r3, r6
 8012ba0:	3406      	adds	r4, #6
 8012ba2:	4432      	add	r2, r6
 8012ba4:	44b1      	add	r9, r6
 8012ba6:	edd3 2a03 	vldr	s5, [r3, #12]
 8012baa:	ed92 3a00 	vldr	s6, [r2]
 8012bae:	edd9 3a00 	vldr	s7, [r9]
 8012bb2:	ed93 2a02 	vldr	s4, [r3, #8]
 8012bb6:	edd3 1a01 	vldr	s3, [r3, #4]
 8012bba:	ed93 1a00 	vldr	s2, [r3]
 8012bbe:	9207      	str	r2, [sp, #28]
 8012bc0:	f7ff fab7 	bl	8012132 <_ZN8touchgfx6Canvas13cubicBezierToEffffffff>
 8012bc4:	9a07      	ldr	r2, [sp, #28]
 8012bc6:	ed99 8a00 	vldr	s16, [r9]
 8012bca:	edd2 8a00 	vldr	s17, [r2]
 8012bce:	e774      	b.n	8012aba <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x166>
 8012bd0:	9b06      	ldr	r3, [sp, #24]
 8012bd2:	af08      	add	r7, sp, #32
 8012bd4:	4543      	cmp	r3, r8
 8012bd6:	d90f      	bls.n	8012bf8 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x2a4>
 8012bd8:	4638      	mov	r0, r7
 8012bda:	f7ff fdad 	bl	8012738 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawDoubleLineCapEv>
 8012bde:	b958      	cbnz	r0, 8012bf8 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x2a4>
 8012be0:	2301      	movs	r3, #1
 8012be2:	9703      	str	r7, [sp, #12]
 8012be4:	f8cd b000 	str.w	fp, [sp]
 8012be8:	4641      	mov	r1, r8
 8012bea:	9a06      	ldr	r2, [sp, #24]
 8012bec:	4628      	mov	r0, r5
 8012bee:	e9cd 6301 	strd	r6, r3, [sp, #4]
 8012bf2:	4623      	mov	r3, r4
 8012bf4:	f7ff fe02 	bl	80127fc <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE>
 8012bf8:	f89d 10a6 	ldrb.w	r1, [sp, #166]	@ 0xa6
 8012bfc:	4638      	mov	r0, r7
 8012bfe:	f013 f98f 	bl	8025f20 <_ZN8touchgfx6Canvas6renderEh>
 8012c02:	4604      	mov	r4, r0
 8012c04:	4638      	mov	r0, r7
 8012c06:	f7ff fe99 	bl	801293c <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvasD1Ev>
 8012c0a:	4620      	mov	r0, r4
 8012c0c:	b035      	add	sp, #212	@ 0xd4
 8012c0e:	ecbd 8b04 	vpop	{d8-d9}
 8012c12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012c16:	2401      	movs	r4, #1
 8012c18:	e7f7      	b.n	8012c0a <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x2b6>
 8012c1a:	bf00      	nop
 8012c1c:	00000000 	.word	0x00000000
 8012c20:	0802ca84 	.word	0x0802ca84

08012c24 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvasD0Ev>:
 8012c24:	b510      	push	{r4, lr}
 8012c26:	4604      	mov	r4, r0
 8012c28:	f7ff fe88 	bl	801293c <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvasD1Ev>
 8012c2c:	21b0      	movs	r1, #176	@ 0xb0
 8012c2e:	4620      	mov	r0, r4
 8012c30:	f014 fc2d 	bl	802748e <_ZdlPvj>
 8012c34:	4620      	mov	r0, r4
 8012c36:	bd10      	pop	{r4, pc}

08012c38 <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE>:
 8012c38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012c3c:	4698      	mov	r8, r3
 8012c3e:	23ff      	movs	r3, #255	@ 0xff
 8012c40:	4607      	mov	r7, r0
 8012c42:	4689      	mov	r9, r1
 8012c44:	4692      	mov	sl, r2
 8012c46:	1d02      	adds	r2, r0, #4
 8012c48:	f107 0534 	add.w	r5, r7, #52	@ 0x34
 8012c4c:	2400      	movs	r4, #0
 8012c4e:	44ca      	add	sl, r9
 8012c50:	ed2d 8b06 	vpush	{d8-d10}
 8012c54:	b0aa      	sub	sp, #168	@ 0xa8
 8012c56:	ed9f 8a81 	vldr	s16, [pc, #516]	@ 8012e5c <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0x224>
 8012c5a:	9300      	str	r3, [sp, #0]
 8012c5c:	eef0 8a48 	vmov.f32	s17, s16
 8012c60:	6981      	ldr	r1, [r0, #24]
 8012c62:	a80d      	add	r0, sp, #52	@ 0x34
 8012c64:	9b39      	ldr	r3, [sp, #228]	@ 0xe4
 8012c66:	f013 f8c7 	bl	8025df8 <_ZN8touchgfx6CanvasC1EPKNS_15AbstractPainterERKNS_4RectES6_h>
 8012c6a:	7f3b      	ldrb	r3, [r7, #28]
 8012c6c:	eddf 0a7b 	vldr	s1, [pc, #492]	@ 8012e5c <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0x224>
 8012c70:	4628      	mov	r0, r5
 8012c72:	1e5a      	subs	r2, r3, #1
 8012c74:	eeb0 0a60 	vmov.f32	s0, s1
 8012c78:	4253      	negs	r3, r2
 8012c7a:	4153      	adcs	r3, r2
 8012c7c:	f88d 3078 	strb.w	r3, [sp, #120]	@ 0x78
 8012c80:	f006 fd81 	bl	8019786 <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 8012c84:	eeb0 9a40 	vmov.f32	s18, s0
 8012c88:	eef0 9a60 	vmov.f32	s19, s1
 8012c8c:	45ca      	cmp	sl, r9
 8012c8e:	f000 80cd 	beq.w	8012e2c <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0x1f4>
 8012c92:	f819 3b01 	ldrb.w	r3, [r9], #1
 8012c96:	2b06      	cmp	r3, #6
 8012c98:	d8f8      	bhi.n	8012c8c <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0x54>
 8012c9a:	e8df f003 	tbb	[pc, r3]
 8012c9e:	0804      	.short	0x0804
 8012ca0:	58533f2a 	.word	0x58533f2a
 8012ca4:	8a          	.byte	0x8a
 8012ca5:	00          	.byte	0x00
 8012ca6:	a80d      	add	r0, sp, #52	@ 0x34
 8012ca8:	f013 f918 	bl	8025edc <_ZN8touchgfx6Canvas5closeEv>
 8012cac:	e7ee      	b.n	8012c8c <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0x54>
 8012cae:	eb08 0384 	add.w	r3, r8, r4, lsl #2
 8012cb2:	4628      	mov	r0, r5
 8012cb4:	ed93 8a01 	vldr	s16, [r3, #4]
 8012cb8:	edd3 8a00 	vldr	s17, [r3]
 8012cbc:	eef0 0a48 	vmov.f32	s1, s16
 8012cc0:	eeb0 0a68 	vmov.f32	s0, s17
 8012cc4:	f006 fd5f 	bl	8019786 <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 8012cc8:	a80d      	add	r0, sp, #52	@ 0x34
 8012cca:	eef0 7a60 	vmov.f32	s15, s1
 8012cce:	eeb0 9a40 	vmov.f32	s18, s0
 8012cd2:	eef0 9a60 	vmov.f32	s19, s1
 8012cd6:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 8012cda:	ee17 2a90 	vmov	r2, s15
 8012cde:	eef0 7a40 	vmov.f32	s15, s0
 8012ce2:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 8012ce6:	ee17 1a90 	vmov	r1, s15
 8012cea:	f013 f9d1 	bl	8026090 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_>
 8012cee:	3402      	adds	r4, #2
 8012cf0:	e7cc      	b.n	8012c8c <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0x54>
 8012cf2:	eb08 0384 	add.w	r3, r8, r4, lsl #2
 8012cf6:	4628      	mov	r0, r5
 8012cf8:	edd3 8a00 	vldr	s17, [r3]
 8012cfc:	ed93 8a01 	vldr	s16, [r3, #4]
 8012d00:	eeb0 0a68 	vmov.f32	s0, s17
 8012d04:	eef0 0a48 	vmov.f32	s1, s16
 8012d08:	f006 fd3d 	bl	8019786 <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 8012d0c:	a80d      	add	r0, sp, #52	@ 0x34
 8012d0e:	eeb0 9a40 	vmov.f32	s18, s0
 8012d12:	eef0 9a60 	vmov.f32	s19, s1
 8012d16:	f7ff fe01 	bl	801291c <_ZN8touchgfx6Canvas6lineToIfEEvT_S2_>
 8012d1a:	e7e8      	b.n	8012cee <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0xb6>
 8012d1c:	eb08 0384 	add.w	r3, r8, r4, lsl #2
 8012d20:	edd3 8a00 	vldr	s17, [r3]
 8012d24:	eef0 0a48 	vmov.f32	s1, s16
 8012d28:	4628      	mov	r0, r5
 8012d2a:	eeb0 0a68 	vmov.f32	s0, s17
 8012d2e:	3401      	adds	r4, #1
 8012d30:	f006 fd29 	bl	8019786 <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 8012d34:	a80d      	add	r0, sp, #52	@ 0x34
 8012d36:	eef0 9a60 	vmov.f32	s19, s1
 8012d3a:	eeb0 9a40 	vmov.f32	s18, s0
 8012d3e:	f7ff fded 	bl	801291c <_ZN8touchgfx6Canvas6lineToIfEEvT_S2_>
 8012d42:	e7a3      	b.n	8012c8c <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0x54>
 8012d44:	eb08 0384 	add.w	r3, r8, r4, lsl #2
 8012d48:	ed93 8a00 	vldr	s16, [r3]
 8012d4c:	e7ea      	b.n	8012d24 <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0xec>
 8012d4e:	1ca3      	adds	r3, r4, #2
 8012d50:	4628      	mov	r0, r5
 8012d52:	3404      	adds	r4, #4
 8012d54:	eb08 0383 	add.w	r3, r8, r3, lsl #2
 8012d58:	ed53 0a01 	vldr	s1, [r3, #-4]
 8012d5c:	ed13 0a02 	vldr	s0, [r3, #-8]
 8012d60:	edd3 8a00 	vldr	s17, [r3]
 8012d64:	ed93 8a01 	vldr	s16, [r3, #4]
 8012d68:	f006 fd0d 	bl	8019786 <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 8012d6c:	ed8d 0a09 	vstr	s0, [sp, #36]	@ 0x24
 8012d70:	eeb0 0a68 	vmov.f32	s0, s17
 8012d74:	edcd 0a0a 	vstr	s1, [sp, #40]	@ 0x28
 8012d78:	eef0 0a48 	vmov.f32	s1, s16
 8012d7c:	4628      	mov	r0, r5
 8012d7e:	f006 fd02 	bl	8019786 <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 8012d82:	eddd 1a0a 	vldr	s3, [sp, #40]	@ 0x28
 8012d86:	eef0 2a60 	vmov.f32	s5, s1
 8012d8a:	ed9d 1a09 	vldr	s2, [sp, #36]	@ 0x24
 8012d8e:	eeb0 2a40 	vmov.f32	s4, s0
 8012d92:	a80d      	add	r0, sp, #52	@ 0x34
 8012d94:	eeb0 aa40 	vmov.f32	s20, s0
 8012d98:	eef0 aa60 	vmov.f32	s21, s1
 8012d9c:	eeb0 0a49 	vmov.f32	s0, s18
 8012da0:	eef0 0a69 	vmov.f32	s1, s19
 8012da4:	f7ff f9a6 	bl	80120f4 <_ZN8touchgfx6Canvas17quadraticBezierToEffffff>
 8012da8:	eef0 9a6a 	vmov.f32	s19, s21
 8012dac:	eeb0 9a4a 	vmov.f32	s18, s20
 8012db0:	e76c      	b.n	8012c8c <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0x54>
 8012db2:	1d26      	adds	r6, r4, #4
 8012db4:	4628      	mov	r0, r5
 8012db6:	3406      	adds	r4, #6
 8012db8:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8012dbc:	ed56 0a03 	vldr	s1, [r6, #-12]
 8012dc0:	ed16 0a04 	vldr	s0, [r6, #-16]
 8012dc4:	edd6 8a00 	vldr	s17, [r6]
 8012dc8:	ed96 8a01 	vldr	s16, [r6, #4]
 8012dcc:	f006 fcdb 	bl	8019786 <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 8012dd0:	ed8d 0a07 	vstr	s0, [sp, #28]
 8012dd4:	4628      	mov	r0, r5
 8012dd6:	ed16 0a02 	vldr	s0, [r6, #-8]
 8012dda:	edcd 0a08 	vstr	s1, [sp, #32]
 8012dde:	ed56 0a01 	vldr	s1, [r6, #-4]
 8012de2:	f006 fcd0 	bl	8019786 <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 8012de6:	ed8d 0a09 	vstr	s0, [sp, #36]	@ 0x24
 8012dea:	edcd 0a0a 	vstr	s1, [sp, #40]	@ 0x28
 8012dee:	eeb0 0a68 	vmov.f32	s0, s17
 8012df2:	eef0 0a48 	vmov.f32	s1, s16
 8012df6:	4628      	mov	r0, r5
 8012df8:	f006 fcc5 	bl	8019786 <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 8012dfc:	eddd 2a0a 	vldr	s5, [sp, #40]	@ 0x28
 8012e00:	eeb0 3a40 	vmov.f32	s6, s0
 8012e04:	ed9d 2a09 	vldr	s4, [sp, #36]	@ 0x24
 8012e08:	eef0 3a60 	vmov.f32	s7, s1
 8012e0c:	eddd 1a08 	vldr	s3, [sp, #32]
 8012e10:	eeb0 aa40 	vmov.f32	s20, s0
 8012e14:	ed9d 1a07 	vldr	s2, [sp, #28]
 8012e18:	eef0 aa60 	vmov.f32	s21, s1
 8012e1c:	a80d      	add	r0, sp, #52	@ 0x34
 8012e1e:	eef0 0a69 	vmov.f32	s1, s19
 8012e22:	eeb0 0a49 	vmov.f32	s0, s18
 8012e26:	f7ff f984 	bl	8012132 <_ZN8touchgfx6Canvas13cubicBezierToEffffffff>
 8012e2a:	e7bd      	b.n	8012da8 <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0x170>
 8012e2c:	7f7b      	ldrb	r3, [r7, #29]
 8012e2e:	a80d      	add	r0, sp, #52	@ 0x34
 8012e30:	7fb9      	ldrb	r1, [r7, #30]
 8012e32:	4359      	muls	r1, r3
 8012e34:	1c4b      	adds	r3, r1, #1
 8012e36:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 8012e3a:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8012e3e:	f013 f86f 	bl	8025f20 <_ZN8touchgfx6Canvas6renderEh>
 8012e42:	4b07      	ldr	r3, [pc, #28]	@ (8012e60 <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0x228>)
 8012e44:	4604      	mov	r4, r0
 8012e46:	a812      	add	r0, sp, #72	@ 0x48
 8012e48:	930d      	str	r3, [sp, #52]	@ 0x34
 8012e4a:	f002 fc5f 	bl	801570c <_ZN8touchgfx7OutlineD1Ev>
 8012e4e:	4620      	mov	r0, r4
 8012e50:	b02a      	add	sp, #168	@ 0xa8
 8012e52:	ecbd 8b06 	vpop	{d8-d10}
 8012e56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012e5a:	bf00      	nop
 8012e5c:	00000000 	.word	0x00000000
 8012e60:	0802d4e4 	.word	0x0802d4e4

08012e64 <_ZNK8touchgfx17CWRVectorRenderer12drawPathAreaEPKhmPKfmRKNS_4RectE>:
 8012e64:	b410      	push	{r4}
 8012e66:	7f04      	ldrb	r4, [r0, #28]
 8012e68:	b11c      	cbz	r4, 8012e72 <_ZNK8touchgfx17CWRVectorRenderer12drawPathAreaEPKhmPKfmRKNS_4RectE+0xe>
 8012e6a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012e6e:	f7ff bee3 	b.w	8012c38 <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE>
 8012e72:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012e76:	f7ff bd6d 	b.w	8012954 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE>

08012e7a <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_>:
 8012e7a:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8012e7e:	4691      	mov	r9, r2
 8012e80:	4602      	mov	r2, r0
 8012e82:	4606      	mov	r6, r0
 8012e84:	4688      	mov	r8, r1
 8012e86:	f852 0f26 	ldr.w	r0, [r2, #38]!
 8012e8a:	469a      	mov	sl, r3
 8012e8c:	ab02      	add	r3, sp, #8
 8012e8e:	af02      	add	r7, sp, #8
 8012e90:	6851      	ldr	r1, [r2, #4]
 8012e92:	c303      	stmia	r3!, {r0, r1}
 8012e94:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 8012e98:	2b00      	cmp	r3, #0
 8012e9a:	dd2f      	ble.n	8012efc <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0x82>
 8012e9c:	f9bd 400e 	ldrsh.w	r4, [sp, #14]
 8012ea0:	2c00      	cmp	r4, #0
 8012ea2:	dd2b      	ble.n	8012efc <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0x82>
 8012ea4:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8012ea8:	441c      	add	r4, r3
 8012eaa:	b2a4      	uxth	r4, r4
 8012eac:	b225      	sxth	r5, r4
 8012eae:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 8012eb2:	42ab      	cmp	r3, r5
 8012eb4:	da22      	bge.n	8012efc <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0x82>
 8012eb6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8012eb8:	464a      	mov	r2, r9
 8012eba:	9701      	str	r7, [sp, #4]
 8012ebc:	4641      	mov	r1, r8
 8012ebe:	9300      	str	r3, [sp, #0]
 8012ec0:	4630      	mov	r0, r6
 8012ec2:	4653      	mov	r3, sl
 8012ec4:	f7ff ffce 	bl	8012e64 <_ZNK8touchgfx17CWRVectorRenderer12drawPathAreaEPKhmPKfmRKNS_4RectE>
 8012ec8:	b940      	cbnz	r0, 8012edc <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0x62>
 8012eca:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 8012ece:	2b01      	cmp	r3, #1
 8012ed0:	d004      	beq.n	8012edc <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0x62>
 8012ed2:	3301      	adds	r3, #1
 8012ed4:	105b      	asrs	r3, r3, #1
 8012ed6:	f8ad 300e 	strh.w	r3, [sp, #14]
 8012eda:	e7ec      	b.n	8012eb6 <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0x3c>
 8012edc:	f8bd 200e 	ldrh.w	r2, [sp, #14]
 8012ee0:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8012ee4:	4413      	add	r3, r2
 8012ee6:	b29b      	uxth	r3, r3
 8012ee8:	441a      	add	r2, r3
 8012eea:	f8ad 300a 	strh.w	r3, [sp, #10]
 8012eee:	b212      	sxth	r2, r2
 8012ef0:	4295      	cmp	r5, r2
 8012ef2:	dadc      	bge.n	8012eae <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0x34>
 8012ef4:	1ae3      	subs	r3, r4, r3
 8012ef6:	f8ad 300e 	strh.w	r3, [sp, #14]
 8012efa:	e7d8      	b.n	8012eae <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0x34>
 8012efc:	b004      	add	sp, #16
 8012efe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08012f02 <_ZN8touchgfx13PainterRGB8888setColorENS_9colortypeE>:
 8012f02:	0c0b      	lsrs	r3, r1, #16
 8012f04:	60c1      	str	r1, [r0, #12]
 8012f06:	7481      	strb	r1, [r0, #18]
 8012f08:	7403      	strb	r3, [r0, #16]
 8012f0a:	0a0b      	lsrs	r3, r1, #8
 8012f0c:	7443      	strb	r3, [r0, #17]
 8012f0e:	4770      	bx	lr

08012f10 <_ZThn8_N8touchgfx13PainterRGB8888setColorENS_9colortypeE>:
 8012f10:	f1a0 0008 	sub.w	r0, r0, #8
 8012f14:	e7f5      	b.n	8012f02 <_ZN8touchgfx13PainterRGB8888setColorENS_9colortypeE>
	...

08012f18 <_ZNK8touchgfx13PainterRGB88818getRenderingMethodEv>:
 8012f18:	b508      	push	{r3, lr}
 8012f1a:	4b05      	ldr	r3, [pc, #20]	@ (8012f30 <_ZNK8touchgfx13PainterRGB88818getRenderingMethodEv+0x18>)
 8012f1c:	6818      	ldr	r0, [r3, #0]
 8012f1e:	6803      	ldr	r3, [r0, #0]
 8012f20:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8012f24:	4798      	blx	r3
 8012f26:	1e43      	subs	r3, r0, #1
 8012f28:	4258      	negs	r0, r3
 8012f2a:	4158      	adcs	r0, r3
 8012f2c:	bd08      	pop	{r3, pc}
 8012f2e:	bf00      	nop
 8012f30:	24028e20 	.word	0x24028e20

08012f34 <_ZN8touchgfx13PainterRGB888D1Ev>:
 8012f34:	4770      	bx	lr

08012f36 <_ZThn8_N8touchgfx13PainterRGB888D1Ev>:
 8012f36:	3808      	subs	r0, #8
 8012f38:	4770      	bx	lr

08012f3a <_ZNK8touchgfx13PainterRGB8885paintEPhssssh>:
 8012f3a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8012f3e:	b410      	push	{r4}
 8012f40:	188c      	adds	r4, r1, r2
 8012f42:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8012f46:	68c2      	ldr	r2, [r0, #12]
 8012f48:	f9bd 1008 	ldrsh.w	r1, [sp, #8]
 8012f4c:	4620      	mov	r0, r4
 8012f4e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012f52:	f7ef bfab 	b.w	8002eac <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh>

08012f56 <_ZNK8touchgfx13PainterRGB8888tearDownEv>:
 8012f56:	f7ef bf85 	b.w	8002e64 <_ZN8touchgfx5paint8tearDownEv>

08012f5a <_ZN8touchgfx13PainterRGB888D0Ev>:
 8012f5a:	b510      	push	{r4, lr}
 8012f5c:	4604      	mov	r4, r0
 8012f5e:	2114      	movs	r1, #20
 8012f60:	f014 fa95 	bl	802748e <_ZdlPvj>
 8012f64:	4620      	mov	r0, r4
 8012f66:	bd10      	pop	{r4, pc}

08012f68 <_ZThn8_N8touchgfx13PainterRGB888D0Ev>:
 8012f68:	f1a0 0008 	sub.w	r0, r0, #8
 8012f6c:	e7f5      	b.n	8012f5a <_ZN8touchgfx13PainterRGB888D0Ev>
	...

08012f70 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh>:
 8012f70:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8012f74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012f78:	4411      	add	r1, r2
 8012f7a:	7c42      	ldrb	r2, [r0, #17]
 8012f7c:	f9bd 4020 	ldrsh.w	r4, [sp, #32]
 8012f80:	f9bd 6024 	ldrsh.w	r6, [sp, #36]	@ 0x24
 8012f84:	f89d 5028 	ldrb.w	r5, [sp, #40]	@ 0x28
 8012f88:	2a00      	cmp	r2, #0
 8012f8a:	f000 8084 	beq.w	8013096 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x126>
 8012f8e:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 8012f92:	ed90 7a08 	vldr	s14, [r0, #32]
 8012f96:	42a2      	cmp	r2, r4
 8012f98:	68c3      	ldr	r3, [r0, #12]
 8012f9a:	db20      	blt.n	8012fde <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x6e>
 8012f9c:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8012fa0:	f640 72fc 	movw	r2, #4092	@ 0xffc
 8012fa4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012fa8:	bfc8      	it	gt
 8012faa:	2200      	movgt	r2, #0
 8012fac:	589a      	ldr	r2, [r3, r2]
 8012fae:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8012fb2:	7c03      	ldrb	r3, [r0, #16]
 8012fb4:	fa5f fc82 	uxtb.w	ip, r2
 8012fb8:	f3c2 2707 	ubfx	r7, r2, #8, #8
 8012fbc:	f3c2 4407 	ubfx	r4, r2, #16, #8
 8012fc0:	440e      	add	r6, r1
 8012fc2:	b36b      	cbz	r3, 8013020 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0xb0>
 8012fc4:	2dff      	cmp	r5, #255	@ 0xff
 8012fc6:	d12b      	bne.n	8013020 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0xb0>
 8012fc8:	42b1      	cmp	r1, r6
 8012fca:	f080 8204 	bcs.w	80133d6 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x466>
 8012fce:	f881 c000 	strb.w	ip, [r1]
 8012fd2:	3103      	adds	r1, #3
 8012fd4:	f801 7c02 	strb.w	r7, [r1, #-2]
 8012fd8:	f801 4c01 	strb.w	r4, [r1, #-1]
 8012fdc:	e7f4      	b.n	8012fc8 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x58>
 8012fde:	f9b0 7008 	ldrsh.w	r7, [r0, #8]
 8012fe2:	42a7      	cmp	r7, r4
 8012fe4:	dc08      	bgt.n	8012ff8 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x88>
 8012fe6:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8012fea:	f640 72fc 	movw	r2, #4092	@ 0xffc
 8012fee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012ff2:	bfd8      	it	le
 8012ff4:	2200      	movle	r2, #0
 8012ff6:	e7d9      	b.n	8012fac <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x3c>
 8012ff8:	1aa2      	subs	r2, r4, r2
 8012ffa:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8012ffe:	ee07 2a90 	vmov	s15, r2
 8013002:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013006:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801300a:	ee67 7a87 	vmul.f32	s15, s15, s14
 801300e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8013012:	ee17 2a90 	vmov	r2, s15
 8013016:	bfd8      	it	le
 8013018:	f202 32ff 	addwle	r2, r2, #1023	@ 0x3ff
 801301c:	0092      	lsls	r2, r2, #2
 801301e:	e7c5      	b.n	8012fac <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x3c>
 8013020:	0e12      	lsrs	r2, r2, #24
 8013022:	4355      	muls	r5, r2
 8013024:	1c6a      	adds	r2, r5, #1
 8013026:	eb02 2525 	add.w	r5, r2, r5, asr #8
 801302a:	122d      	asrs	r5, r5, #8
 801302c:	43e8      	mvns	r0, r5
 801302e:	b2ad      	uxth	r5, r5
 8013030:	fb1c fc05 	smulbb	ip, ip, r5
 8013034:	b2c0      	uxtb	r0, r0
 8013036:	fb17 f705 	smulbb	r7, r7, r5
 801303a:	fb14 f505 	smulbb	r5, r4, r5
 801303e:	fa1f fc8c 	uxth.w	ip, ip
 8013042:	b2bf      	uxth	r7, r7
 8013044:	b2ad      	uxth	r5, r5
 8013046:	428e      	cmp	r6, r1
 8013048:	f101 0303 	add.w	r3, r1, #3
 801304c:	f240 81c3 	bls.w	80133d6 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x466>
 8013050:	f813 2c03 	ldrb.w	r2, [r3, #-3]
 8013054:	fb02 c200 	mla	r2, r2, r0, ip
 8013058:	b292      	uxth	r2, r2
 801305a:	1c51      	adds	r1, r2, #1
 801305c:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8013060:	1212      	asrs	r2, r2, #8
 8013062:	f803 2c03 	strb.w	r2, [r3, #-3]
 8013066:	f813 2c02 	ldrb.w	r2, [r3, #-2]
 801306a:	fb02 7200 	mla	r2, r2, r0, r7
 801306e:	b292      	uxth	r2, r2
 8013070:	1c51      	adds	r1, r2, #1
 8013072:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8013076:	1212      	asrs	r2, r2, #8
 8013078:	f803 2c02 	strb.w	r2, [r3, #-2]
 801307c:	f813 2c01 	ldrb.w	r2, [r3, #-1]
 8013080:	fb02 5200 	mla	r2, r2, r0, r5
 8013084:	b292      	uxth	r2, r2
 8013086:	1c51      	adds	r1, r2, #1
 8013088:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 801308c:	4619      	mov	r1, r3
 801308e:	1212      	asrs	r2, r2, #8
 8013090:	f803 2c01 	strb.w	r2, [r3, #-1]
 8013094:	e7d7      	b.n	8013046 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0xd6>
 8013096:	7c82      	ldrb	r2, [r0, #18]
 8013098:	2a00      	cmp	r2, #0
 801309a:	d047      	beq.n	801312c <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x1bc>
 801309c:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 80130a0:	ee07 2a10 	vmov	s14, r2
 80130a4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80130a8:	ee07 3a90 	vmov	s15, r3
 80130ac:	461a      	mov	r2, r3
 80130ae:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80130b2:	eef4 6ac7 	vcmpe.f32	s13, s14
 80130b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80130ba:	f200 808e 	bhi.w	80131da <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x26a>
 80130be:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 80130c2:	f640 72fc 	movw	r2, #4092	@ 0xffc
 80130c6:	68c7      	ldr	r7, [r0, #12]
 80130c8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80130cc:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80130d0:	ee06 6a90 	vmov	s13, r6
 80130d4:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80130d8:	eef4 7ae6 	vcmpe.f32	s15, s13
 80130dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80130e0:	bf4a      	itet	mi
 80130e2:	eefd 7ae7 	vcvtmi.s32.f32	s15, s15
 80130e6:	4634      	movpl	r4, r6
 80130e8:	ee17 4a90 	vmovmi	r4, s15
 80130ec:	edd0 7a08 	vldr	s15, [r0, #32]
 80130f0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80130f4:	eb04 0e44 	add.w	lr, r4, r4, lsl #1
 80130f8:	448e      	add	lr, r1
 80130fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80130fe:	bfc8      	it	gt
 8013100:	2200      	movgt	r2, #0
 8013102:	58bf      	ldr	r7, [r7, r2]
 8013104:	7c02      	ldrb	r2, [r0, #16]
 8013106:	fa5f f987 	uxtb.w	r9, r7
 801310a:	f3c7 2807 	ubfx	r8, r7, #8, #8
 801310e:	f3c7 4c07 	ubfx	ip, r7, #16, #8
 8013112:	b31a      	cbz	r2, 801315c <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x1ec>
 8013114:	2dff      	cmp	r5, #255	@ 0xff
 8013116:	d121      	bne.n	801315c <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x1ec>
 8013118:	4571      	cmp	r1, lr
 801311a:	d25d      	bcs.n	80131d8 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x268>
 801311c:	f881 9000 	strb.w	r9, [r1]
 8013120:	3103      	adds	r1, #3
 8013122:	f801 8c02 	strb.w	r8, [r1, #-2]
 8013126:	f801 cc01 	strb.w	ip, [r1, #-1]
 801312a:	e7f5      	b.n	8013118 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x1a8>
 801312c:	ee07 4a90 	vmov	s15, r4
 8013130:	ed90 7a06 	vldr	s14, [r0, #24]
 8013134:	edd0 6a05 	vldr	s13, [r0, #20]
 8013138:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801313c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8013140:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8013144:	edd0 7a08 	vldr	s15, [r0, #32]
 8013148:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801314c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013150:	bf44      	itt	mi
 8013152:	edd0 7a07 	vldrmi	s15, [r0, #28]
 8013156:	ee37 7a67 	vsubmi.f32	s14, s14, s15
 801315a:	e7a5      	b.n	80130a8 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x138>
 801315c:	0e3f      	lsrs	r7, r7, #24
 801315e:	436f      	muls	r7, r5
 8013160:	1c7a      	adds	r2, r7, #1
 8013162:	eb02 2227 	add.w	r2, r2, r7, asr #8
 8013166:	1212      	asrs	r2, r2, #8
 8013168:	ea6f 0a02 	mvn.w	sl, r2
 801316c:	b292      	uxth	r2, r2
 801316e:	fb19 f902 	smulbb	r9, r9, r2
 8013172:	fa5f fa8a 	uxtb.w	sl, sl
 8013176:	fb18 f802 	smulbb	r8, r8, r2
 801317a:	fb1c fc02 	smulbb	ip, ip, r2
 801317e:	fa1f f989 	uxth.w	r9, r9
 8013182:	fa1f f888 	uxth.w	r8, r8
 8013186:	fa1f fc8c 	uxth.w	ip, ip
 801318a:	458e      	cmp	lr, r1
 801318c:	f101 0203 	add.w	r2, r1, #3
 8013190:	d922      	bls.n	80131d8 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x268>
 8013192:	f812 1c03 	ldrb.w	r1, [r2, #-3]
 8013196:	fb01 910a 	mla	r1, r1, sl, r9
 801319a:	b289      	uxth	r1, r1
 801319c:	1c4f      	adds	r7, r1, #1
 801319e:	eb07 2111 	add.w	r1, r7, r1, lsr #8
 80131a2:	1209      	asrs	r1, r1, #8
 80131a4:	f802 1c03 	strb.w	r1, [r2, #-3]
 80131a8:	f812 1c02 	ldrb.w	r1, [r2, #-2]
 80131ac:	fb01 810a 	mla	r1, r1, sl, r8
 80131b0:	b289      	uxth	r1, r1
 80131b2:	1c4f      	adds	r7, r1, #1
 80131b4:	eb07 2111 	add.w	r1, r7, r1, lsr #8
 80131b8:	1209      	asrs	r1, r1, #8
 80131ba:	f802 1c02 	strb.w	r1, [r2, #-2]
 80131be:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 80131c2:	fb01 c10a 	mla	r1, r1, sl, ip
 80131c6:	b289      	uxth	r1, r1
 80131c8:	1c4f      	adds	r7, r1, #1
 80131ca:	eb07 2111 	add.w	r1, r7, r1, lsr #8
 80131ce:	1209      	asrs	r1, r1, #8
 80131d0:	f802 1c01 	strb.w	r1, [r2, #-1]
 80131d4:	4611      	mov	r1, r2
 80131d6:	e7d8      	b.n	801318a <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x21a>
 80131d8:	191a      	adds	r2, r3, r4
 80131da:	4433      	add	r3, r6
 80131dc:	b21b      	sxth	r3, r3
 80131de:	4293      	cmp	r3, r2
 80131e0:	f340 80f9 	ble.w	80133d6 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x466>
 80131e4:	edd0 7a07 	vldr	s15, [r0, #28]
 80131e8:	ee06 2a90 	vmov	s13, r2
 80131ec:	ee77 7a27 	vadd.f32	s15, s14, s15
 80131f0:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80131f4:	eef4 7ae6 	vcmpe.f32	s15, s13
 80131f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80131fc:	f340 80b0 	ble.w	8013360 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x3f0>
 8013200:	ee06 3a10 	vmov	s12, r3
 8013204:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8013208:	eddf 5a74 	vldr	s11, [pc, #464]	@ 80133dc <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x46c>
 801320c:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8013210:	eef4 7ac6 	vcmpe.f32	s15, s12
 8013214:	ed90 6a08 	vldr	s12, [r0, #32]
 8013218:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801321c:	eeb5 6ac0 	vcmpe.f32	s12, #0.0
 8013220:	bfd6      	itet	le
 8013222:	eefd 7ae7 	vcvtle.s32.f32	s15, s15
 8013226:	469c      	movgt	ip, r3
 8013228:	ee17 ca90 	vmovle	ip, s15
 801322c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013230:	eddf 7a6b 	vldr	s15, [pc, #428]	@ 80133e0 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x470>
 8013234:	ebac 0202 	sub.w	r2, ip, r2
 8013238:	fe77 7aa5 	vselgt.f32	s15, s15, s11
 801323c:	eee6 7a07 	vfma.f32	s15, s12, s14
 8013240:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8013244:	188c      	adds	r4, r1, r2
 8013246:	7c02      	ldrb	r2, [r0, #16]
 8013248:	b1d2      	cbz	r2, 8013280 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x310>
 801324a:	2dff      	cmp	r5, #255	@ 0xff
 801324c:	d118      	bne.n	8013280 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x310>
 801324e:	42a1      	cmp	r1, r4
 8013250:	d261      	bcs.n	8013316 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x3a6>
 8013252:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8013256:	68c6      	ldr	r6, [r0, #12]
 8013258:	3103      	adds	r1, #3
 801325a:	ee17 7a10 	vmov	r7, s14
 801325e:	eb06 0287 	add.w	r2, r6, r7, lsl #2
 8013262:	f816 6027 	ldrb.w	r6, [r6, r7, lsl #2]
 8013266:	f801 6c03 	strb.w	r6, [r1, #-3]
 801326a:	7856      	ldrb	r6, [r2, #1]
 801326c:	f801 6c02 	strb.w	r6, [r1, #-2]
 8013270:	7892      	ldrb	r2, [r2, #2]
 8013272:	f801 2c01 	strb.w	r2, [r1, #-1]
 8013276:	ed90 7a08 	vldr	s14, [r0, #32]
 801327a:	ee77 7a87 	vadd.f32	s15, s15, s14
 801327e:	e7e6      	b.n	801324e <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x2de>
 8013280:	68c2      	ldr	r2, [r0, #12]
 8013282:	428c      	cmp	r4, r1
 8013284:	f101 0e03 	add.w	lr, r1, #3
 8013288:	d945      	bls.n	8013316 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x3a6>
 801328a:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 801328e:	ee17 9a10 	vmov	r9, s14
 8013292:	eb02 0889 	add.w	r8, r2, r9, lsl #2
 8013296:	f898 7003 	ldrb.w	r7, [r8, #3]
 801329a:	fb07 f605 	mul.w	r6, r7, r5
 801329e:	1c77      	adds	r7, r6, #1
 80132a0:	eb07 2716 	add.w	r7, r7, r6, lsr #8
 80132a4:	123f      	asrs	r7, r7, #8
 80132a6:	b2b9      	uxth	r1, r7
 80132a8:	43ff      	mvns	r7, r7
 80132aa:	b2fe      	uxtb	r6, r7
 80132ac:	f812 7029 	ldrb.w	r7, [r2, r9, lsl #2]
 80132b0:	f81e 9c03 	ldrb.w	r9, [lr, #-3]
 80132b4:	fb19 f906 	smulbb	r9, r9, r6
 80132b8:	fb07 9701 	mla	r7, r7, r1, r9
 80132bc:	b2bf      	uxth	r7, r7
 80132be:	f107 0901 	add.w	r9, r7, #1
 80132c2:	eb09 2717 	add.w	r7, r9, r7, lsr #8
 80132c6:	f81e 9c02 	ldrb.w	r9, [lr, #-2]
 80132ca:	fb19 f906 	smulbb	r9, r9, r6
 80132ce:	123f      	asrs	r7, r7, #8
 80132d0:	f80e 7c03 	strb.w	r7, [lr, #-3]
 80132d4:	f898 7001 	ldrb.w	r7, [r8, #1]
 80132d8:	fb07 9701 	mla	r7, r7, r1, r9
 80132dc:	b2bf      	uxth	r7, r7
 80132de:	f107 0901 	add.w	r9, r7, #1
 80132e2:	eb09 2717 	add.w	r7, r9, r7, lsr #8
 80132e6:	123f      	asrs	r7, r7, #8
 80132e8:	f80e 7c02 	strb.w	r7, [lr, #-2]
 80132ec:	f81e 7c01 	ldrb.w	r7, [lr, #-1]
 80132f0:	f898 8002 	ldrb.w	r8, [r8, #2]
 80132f4:	fb17 f606 	smulbb	r6, r7, r6
 80132f8:	fb08 6601 	mla	r6, r8, r1, r6
 80132fc:	b2b6      	uxth	r6, r6
 80132fe:	1c71      	adds	r1, r6, #1
 8013300:	eb01 2616 	add.w	r6, r1, r6, lsr #8
 8013304:	4671      	mov	r1, lr
 8013306:	1236      	asrs	r6, r6, #8
 8013308:	f80e 6c01 	strb.w	r6, [lr, #-1]
 801330c:	ed90 7a08 	vldr	s14, [r0, #32]
 8013310:	ee77 7a87 	vadd.f32	s15, s15, s14
 8013314:	e7b5      	b.n	8013282 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x312>
 8013316:	4563      	cmp	r3, ip
 8013318:	dd5d      	ble.n	80133d6 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x466>
 801331a:	edd0 7a08 	vldr	s15, [r0, #32]
 801331e:	eba3 030c 	sub.w	r3, r3, ip
 8013322:	68c4      	ldr	r4, [r0, #12]
 8013324:	f640 72fc 	movw	r2, #4092	@ 0xffc
 8013328:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801332c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8013330:	7c00      	ldrb	r0, [r0, #16]
 8013332:	440b      	add	r3, r1
 8013334:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013338:	bfd8      	it	le
 801333a:	2200      	movle	r2, #0
 801333c:	58a2      	ldr	r2, [r4, r2]
 801333e:	b2d4      	uxtb	r4, r2
 8013340:	f3c2 2c07 	ubfx	ip, r2, #8, #8
 8013344:	f3c2 4707 	ubfx	r7, r2, #16, #8
 8013348:	b160      	cbz	r0, 8013364 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x3f4>
 801334a:	2dff      	cmp	r5, #255	@ 0xff
 801334c:	d10a      	bne.n	8013364 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x3f4>
 801334e:	4299      	cmp	r1, r3
 8013350:	d241      	bcs.n	80133d6 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x466>
 8013352:	700c      	strb	r4, [r1, #0]
 8013354:	3103      	adds	r1, #3
 8013356:	f801 cc02 	strb.w	ip, [r1, #-2]
 801335a:	f801 7c01 	strb.w	r7, [r1, #-1]
 801335e:	e7f6      	b.n	801334e <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x3de>
 8013360:	4694      	mov	ip, r2
 8013362:	e7da      	b.n	801331a <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x3aa>
 8013364:	0e12      	lsrs	r2, r2, #24
 8013366:	436a      	muls	r2, r5
 8013368:	1c55      	adds	r5, r2, #1
 801336a:	eb05 2522 	add.w	r5, r5, r2, asr #8
 801336e:	122d      	asrs	r5, r5, #8
 8013370:	43ee      	mvns	r6, r5
 8013372:	b2ad      	uxth	r5, r5
 8013374:	fb14 f405 	smulbb	r4, r4, r5
 8013378:	b2f6      	uxtb	r6, r6
 801337a:	fb1c f005 	smulbb	r0, ip, r5
 801337e:	fb17 f505 	smulbb	r5, r7, r5
 8013382:	b2a4      	uxth	r4, r4
 8013384:	b280      	uxth	r0, r0
 8013386:	b2ad      	uxth	r5, r5
 8013388:	428b      	cmp	r3, r1
 801338a:	f101 0203 	add.w	r2, r1, #3
 801338e:	d922      	bls.n	80133d6 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x466>
 8013390:	f812 1c03 	ldrb.w	r1, [r2, #-3]
 8013394:	fb01 4106 	mla	r1, r1, r6, r4
 8013398:	b289      	uxth	r1, r1
 801339a:	1c4f      	adds	r7, r1, #1
 801339c:	eb07 2111 	add.w	r1, r7, r1, lsr #8
 80133a0:	1209      	asrs	r1, r1, #8
 80133a2:	f802 1c03 	strb.w	r1, [r2, #-3]
 80133a6:	f812 1c02 	ldrb.w	r1, [r2, #-2]
 80133aa:	fb01 0106 	mla	r1, r1, r6, r0
 80133ae:	b289      	uxth	r1, r1
 80133b0:	1c4f      	adds	r7, r1, #1
 80133b2:	eb07 2111 	add.w	r1, r7, r1, lsr #8
 80133b6:	1209      	asrs	r1, r1, #8
 80133b8:	f802 1c02 	strb.w	r1, [r2, #-2]
 80133bc:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 80133c0:	fb01 5106 	mla	r1, r1, r6, r5
 80133c4:	b289      	uxth	r1, r1
 80133c6:	1c4f      	adds	r7, r1, #1
 80133c8:	eb07 2111 	add.w	r1, r7, r1, lsr #8
 80133cc:	1209      	asrs	r1, r1, #8
 80133ce:	f802 1c01 	strb.w	r1, [r2, #-1]
 80133d2:	4611      	mov	r1, r2
 80133d4:	e7d8      	b.n	8013388 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x418>
 80133d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80133da:	bf00      	nop
 80133dc:	447ffffe 	.word	0x447ffffe
 80133e0:	00000000 	.word	0x00000000

080133e4 <_ZNK8touchgfx27PainterRGB888LinearGradient8tearDownEv>:
 80133e4:	4770      	bx	lr

080133e6 <_ZN8touchgfx27PainterRGB888LinearGradientD1Ev>:
 80133e6:	4770      	bx	lr

080133e8 <_ZN8touchgfx27PainterRGB888LinearGradientD0Ev>:
 80133e8:	b510      	push	{r4, lr}
 80133ea:	4604      	mov	r4, r0
 80133ec:	2124      	movs	r1, #36	@ 0x24
 80133ee:	f014 f84e 	bl	802748e <_ZdlPvj>
 80133f2:	4620      	mov	r0, r4
 80133f4:	bd10      	pop	{r4, pc}
	...

080133f8 <_ZNK8touchgfx19PainterRGB888Bitmap18getRenderingMethodEv>:
 80133f8:	b508      	push	{r3, lr}
 80133fa:	4b05      	ldr	r3, [pc, #20]	@ (8013410 <_ZNK8touchgfx19PainterRGB888Bitmap18getRenderingMethodEv+0x18>)
 80133fc:	6818      	ldr	r0, [r3, #0]
 80133fe:	6803      	ldr	r3, [r0, #0]
 8013400:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8013404:	4798      	blx	r3
 8013406:	1e43      	subs	r3, r0, #1
 8013408:	4258      	negs	r0, r3
 801340a:	4158      	adcs	r0, r3
 801340c:	bd08      	pop	{r3, pc}
 801340e:	bf00      	nop
 8013410:	24028e20 	.word	0x24028e20

08013414 <_ZN8touchgfx19PainterRGB888BitmapD1Ev>:
 8013414:	4770      	bx	lr

08013416 <_ZThn8_N8touchgfx19PainterRGB888BitmapD1Ev>:
 8013416:	3808      	subs	r0, #8
 8013418:	4770      	bx	lr
	...

0801341c <_ZNK8touchgfx19PainterRGB888Bitmap5setupERKNS_4RectE>:
 801341c:	b538      	push	{r3, r4, r5, lr}
 801341e:	4b10      	ldr	r3, [pc, #64]	@ (8013460 <_ZNK8touchgfx19PainterRGB888Bitmap5setupERKNS_4RectE+0x44>)
 8013420:	4604      	mov	r4, r0
 8013422:	f9b1 5004 	ldrsh.w	r5, [r1, #4]
 8013426:	781b      	ldrb	r3, [r3, #0]
 8013428:	8085      	strh	r5, [r0, #4]
 801342a:	b96b      	cbnz	r3, 8013448 <_ZNK8touchgfx19PainterRGB888Bitmap5setupERKNS_4RectE+0x2c>
 801342c:	f9b0 201c 	ldrsh.w	r2, [r0, #28]
 8013430:	8462      	strh	r2, [r4, #34]	@ 0x22
 8013432:	b963      	cbnz	r3, 801344e <_ZNK8touchgfx19PainterRGB888Bitmap5setupERKNS_4RectE+0x32>
 8013434:	f9b4 001e 	ldrsh.w	r0, [r4, #30]
 8013438:	84a0      	strh	r0, [r4, #36]	@ 0x24
 801343a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801343e:	89a0      	ldrh	r0, [r4, #12]
 8013440:	1ac0      	subs	r0, r0, r3
 8013442:	bf18      	it	ne
 8013444:	2001      	movne	r0, #1
 8013446:	bd38      	pop	{r3, r4, r5, pc}
 8013448:	f9b0 201e 	ldrsh.w	r2, [r0, #30]
 801344c:	e7f0      	b.n	8013430 <_ZNK8touchgfx19PainterRGB888Bitmap5setupERKNS_4RectE+0x14>
 801344e:	f104 000c 	add.w	r0, r4, #12
 8013452:	f008 fb37 	bl	801bac4 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8013456:	1b40      	subs	r0, r0, r5
 8013458:	8ba5      	ldrh	r5, [r4, #28]
 801345a:	1b40      	subs	r0, r0, r5
 801345c:	b200      	sxth	r0, r0
 801345e:	e7eb      	b.n	8013438 <_ZNK8touchgfx19PainterRGB888Bitmap5setupERKNS_4RectE+0x1c>
 8013460:	24028e18 	.word	0x24028e18

08013464 <_ZNK8touchgfx19PainterRGB888Bitmap8tearDownEv>:
 8013464:	f7ef bcfe 	b.w	8002e64 <_ZN8touchgfx5paint8tearDownEv>

08013468 <_ZN8touchgfx19PainterRGB888BitmapD0Ev>:
 8013468:	b510      	push	{r4, lr}
 801346a:	4604      	mov	r4, r0
 801346c:	2128      	movs	r1, #40	@ 0x28
 801346e:	f014 f80e 	bl	802748e <_ZdlPvj>
 8013472:	4620      	mov	r0, r4
 8013474:	bd10      	pop	{r4, pc}

08013476 <_ZThn8_N8touchgfx19PainterRGB888BitmapD0Ev>:
 8013476:	f1a0 0008 	sub.w	r0, r0, #8
 801347a:	e7f5      	b.n	8013468 <_ZN8touchgfx19PainterRGB888BitmapD0Ev>

0801347c <_ZNK8touchgfx19PainterRGB888Bitmap5paintEPhssssh>:
 801347c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013480:	4607      	mov	r7, r0
 8013482:	8c40      	ldrh	r0, [r0, #34]	@ 0x22
 8013484:	f9bd 6028 	ldrsh.w	r6, [sp, #40]	@ 0x28
 8013488:	4403      	add	r3, r0
 801348a:	8cb8      	ldrh	r0, [r7, #36]	@ 0x24
 801348c:	f9bd 502c 	ldrsh.w	r5, [sp, #44]	@ 0x2c
 8013490:	4406      	add	r6, r0
 8013492:	b29b      	uxth	r3, r3
 8013494:	f897 0020 	ldrb.w	r0, [r7, #32]
 8013498:	f89d a030 	ldrb.w	sl, [sp, #48]	@ 0x30
 801349c:	b21c      	sxth	r4, r3
 801349e:	b236      	sxth	r6, r6
 80134a0:	b1a0      	cbz	r0, 80134cc <_ZNK8touchgfx19PainterRGB888Bitmap5paintEPhssssh+0x50>
 80134a2:	f9b7 0014 	ldrsh.w	r0, [r7, #20]
 80134a6:	fb94 f3f0 	sdiv	r3, r4, r0
 80134aa:	fb00 4413 	mls	r4, r0, r3, r4
 80134ae:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80134b2:	2c00      	cmp	r4, #0
 80134b4:	bfb8      	it	lt
 80134b6:	1824      	addlt	r4, r4, r0
 80134b8:	fb96 f0f3 	sdiv	r0, r6, r3
 80134bc:	fb03 6610 	mls	r6, r3, r0, r6
 80134c0:	b224      	sxth	r4, r4
 80134c2:	2e00      	cmp	r6, #0
 80134c4:	da00      	bge.n	80134c8 <_ZNK8touchgfx19PainterRGB888Bitmap5paintEPhssssh+0x4c>
 80134c6:	441e      	add	r6, r3
 80134c8:	b236      	sxth	r6, r6
 80134ca:	e018      	b.n	80134fe <_ZNK8touchgfx19PainterRGB888Bitmap5paintEPhssssh+0x82>
 80134cc:	2c00      	cmp	r4, #0
 80134ce:	da07      	bge.n	80134e0 <_ZNK8touchgfx19PainterRGB888Bitmap5paintEPhssssh+0x64>
 80134d0:	442c      	add	r4, r5
 80134d2:	2c00      	cmp	r4, #0
 80134d4:	dd3f      	ble.n	8013556 <_ZNK8touchgfx19PainterRGB888Bitmap5paintEPhssssh+0xda>
 80134d6:	441d      	add	r5, r3
 80134d8:	1ad3      	subs	r3, r2, r3
 80134da:	4604      	mov	r4, r0
 80134dc:	b22d      	sxth	r5, r5
 80134de:	b21a      	sxth	r2, r3
 80134e0:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80134e4:	42a3      	cmp	r3, r4
 80134e6:	dd36      	ble.n	8013556 <_ZNK8touchgfx19PainterRGB888Bitmap5paintEPhssssh+0xda>
 80134e8:	2e00      	cmp	r6, #0
 80134ea:	db34      	blt.n	8013556 <_ZNK8touchgfx19PainterRGB888Bitmap5paintEPhssssh+0xda>
 80134ec:	f9b7 0016 	ldrsh.w	r0, [r7, #22]
 80134f0:	42b0      	cmp	r0, r6
 80134f2:	dd30      	ble.n	8013556 <_ZNK8touchgfx19PainterRGB888Bitmap5paintEPhssssh+0xda>
 80134f4:	1960      	adds	r0, r4, r5
 80134f6:	4298      	cmp	r0, r3
 80134f8:	dd01      	ble.n	80134fe <_ZNK8touchgfx19PainterRGB888Bitmap5paintEPhssssh+0x82>
 80134fa:	1b1d      	subs	r5, r3, r4
 80134fc:	b22d      	sxth	r5, r5
 80134fe:	eb02 0342 	add.w	r3, r2, r2, lsl #1
 8013502:	f9b7 b014 	ldrsh.w	fp, [r7, #20]
 8013506:	7bba      	ldrb	r2, [r7, #14]
 8013508:	eb05 0945 	add.w	r9, r5, r5, lsl #1
 801350c:	eb01 0803 	add.w	r8, r1, r3
 8013510:	fb06 f60b 	mul.w	r6, r6, fp
 8013514:	2a01      	cmp	r2, #1
 8013516:	ebab 0b04 	sub.w	fp, fp, r4
 801351a:	44c1      	add	r9, r8
 801351c:	69bb      	ldr	r3, [r7, #24]
 801351e:	fa0f fb8b 	sxth.w	fp, fp
 8013522:	d11a      	bne.n	801355a <_ZNK8touchgfx19PainterRGB888Bitmap5paintEPhssssh+0xde>
 8013524:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8013528:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801352c:	441e      	add	r6, r3
 801352e:	1931      	adds	r1, r6, r4
 8013530:	45ab      	cmp	fp, r5
 8013532:	4640      	mov	r0, r8
 8013534:	4653      	mov	r3, sl
 8013536:	bfa8      	it	ge
 8013538:	46ab      	movge	fp, r5
 801353a:	eba5 050b 	sub.w	r5, r5, fp
 801353e:	465a      	mov	r2, fp
 8013540:	eb0b 0b4b 	add.w	fp, fp, fp, lsl #1
 8013544:	f7ef fcdc 	bl	8002f00 <_ZN8touchgfx5paint6rgb88814lineFromRGB888EPhPKhjh>
 8013548:	4631      	mov	r1, r6
 801354a:	44d8      	add	r8, fp
 801354c:	b22d      	sxth	r5, r5
 801354e:	f9b7 b014 	ldrsh.w	fp, [r7, #20]
 8013552:	45c1      	cmp	r9, r8
 8013554:	d8ec      	bhi.n	8013530 <_ZNK8touchgfx19PainterRGB888Bitmap5paintEPhssssh+0xb4>
 8013556:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801355a:	eb03 0686 	add.w	r6, r3, r6, lsl #2
 801355e:	eb06 0184 	add.w	r1, r6, r4, lsl #2
 8013562:	45ab      	cmp	fp, r5
 8013564:	4640      	mov	r0, r8
 8013566:	4653      	mov	r3, sl
 8013568:	bfa8      	it	ge
 801356a:	46ab      	movge	fp, r5
 801356c:	eba5 050b 	sub.w	r5, r5, fp
 8013570:	465a      	mov	r2, fp
 8013572:	eb0b 0b4b 	add.w	fp, fp, fp, lsl #1
 8013576:	f7ef fce7 	bl	8002f48 <_ZN8touchgfx5paint6rgb88816lineFromARGB8888EPhPKmjh>
 801357a:	4631      	mov	r1, r6
 801357c:	44d8      	add	r8, fp
 801357e:	b22d      	sxth	r5, r5
 8013580:	f9b7 b014 	ldrsh.w	fp, [r7, #20]
 8013584:	45c1      	cmp	r9, r8
 8013586:	d8ec      	bhi.n	8013562 <_ZNK8touchgfx19PainterRGB888Bitmap5paintEPhssssh+0xe6>
 8013588:	e7e5      	b.n	8013556 <_ZNK8touchgfx19PainterRGB888Bitmap5paintEPhssssh+0xda>

0801358a <_ZN8touchgfx19PainterRGB888Bitmap9setBitmapERKNS_6BitmapE>:
 801358a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801358c:	880b      	ldrh	r3, [r1, #0]
 801358e:	f100 050c 	add.w	r5, r0, #12
 8013592:	4604      	mov	r4, r0
 8013594:	8183      	strh	r3, [r0, #12]
 8013596:	4628      	mov	r0, r5
 8013598:	f008 fc0a 	bl	801bdb0 <_ZNK8touchgfx6Bitmap9getFormatEv>
 801359c:	73a0      	strb	r0, [r4, #14]
 801359e:	4628      	mov	r0, r5
 80135a0:	f008 fa90 	bl	801bac4 <_ZNK8touchgfx6Bitmap8getWidthEv>
 80135a4:	4607      	mov	r7, r0
 80135a6:	4628      	mov	r0, r5
 80135a8:	f008 fac0 	bl	801bb2c <_ZNK8touchgfx6Bitmap9getHeightEv>
 80135ac:	2300      	movs	r3, #0
 80135ae:	82e0      	strh	r0, [r4, #22]
 80135b0:	f104 0010 	add.w	r0, r4, #16
 80135b4:	6123      	str	r3, [r4, #16]
 80135b6:	82a7      	strh	r7, [r4, #20]
 80135b8:	f004 fa90 	bl	8017adc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80135bc:	4628      	mov	r0, r5
 80135be:	f008 fb73 	bl	801bca8 <_ZNK8touchgfx6Bitmap7getDataEv>
 80135c2:	61a0      	str	r0, [r4, #24]
 80135c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080135c6 <_ZThn8_N8touchgfx19PainterRGB888Bitmap9setBitmapERKNS_6BitmapE>:
 80135c6:	f1a0 0008 	sub.w	r0, r0, #8
 80135ca:	f7ff bfde 	b.w	801358a <_ZN8touchgfx19PainterRGB888Bitmap9setBitmapERKNS_6BitmapE>

080135ce <_ZN8touchgfx6CircleD1Ev>:
 80135ce:	4770      	bx	lr

080135d0 <_ZN8touchgfx6CircleD0Ev>:
 80135d0:	b510      	push	{r4, lr}
 80135d2:	4604      	mov	r4, r0
 80135d4:	2148      	movs	r1, #72	@ 0x48
 80135d6:	f013 ff5a 	bl	802748e <_ZdlPvj>
 80135da:	4620      	mov	r0, r4
 80135dc:	bd10      	pop	{r4, pc}

080135de <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>:
 80135de:	b507      	push	{r0, r1, r2, lr}
 80135e0:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80135e4:	ab01      	add	r3, sp, #4
 80135e6:	6809      	ldr	r1, [r1, #0]
 80135e8:	6800      	ldr	r0, [r0, #0]
 80135ea:	f006 fa07 	bl	80199fc <_ZN8touchgfx6muldivElllRl>
 80135ee:	b003      	add	sp, #12
 80135f0:	f85d fb04 	ldr.w	pc, [sp], #4

080135f4 <_ZN8touchgfx7CWRUtil4sineEi>:
 80135f4:	f44f 73b4 	mov.w	r3, #360	@ 0x168
 80135f8:	fb90 f2f3 	sdiv	r2, r0, r3
 80135fc:	fb02 0013 	mls	r0, r2, r3, r0
 8013600:	2800      	cmp	r0, #0
 8013602:	bfb8      	it	lt
 8013604:	18c0      	addlt	r0, r0, r3
 8013606:	4b0a      	ldr	r3, [pc, #40]	@ (8013630 <_ZN8touchgfx7CWRUtil4sineEi+0x3c>)
 8013608:	285a      	cmp	r0, #90	@ 0x5a
 801360a:	dc02      	bgt.n	8013612 <_ZN8touchgfx7CWRUtil4sineEi+0x1e>
 801360c:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 8013610:	4770      	bx	lr
 8013612:	28b4      	cmp	r0, #180	@ 0xb4
 8013614:	dc02      	bgt.n	801361c <_ZN8touchgfx7CWRUtil4sineEi+0x28>
 8013616:	f1c0 00b4 	rsb	r0, r0, #180	@ 0xb4
 801361a:	e7f7      	b.n	801360c <_ZN8touchgfx7CWRUtil4sineEi+0x18>
 801361c:	f5b0 7f87 	cmp.w	r0, #270	@ 0x10e
 8013620:	bfd4      	ite	le
 8013622:	38b4      	suble	r0, #180	@ 0xb4
 8013624:	f5c0 70b4 	rsbgt	r0, r0, #360	@ 0x168
 8013628:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 801362c:	4240      	negs	r0, r0
 801362e:	4770      	bx	lr
 8013630:	0802cb74 	.word	0x0802cb74

08013634 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>:
 8013634:	f44f 5334 	mov.w	r3, #11520	@ 0x2d00
 8013638:	fb90 f2f3 	sdiv	r2, r0, r3
 801363c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801363e:	fb02 0013 	mls	r0, r2, r3, r0
 8013642:	2800      	cmp	r0, #0
 8013644:	bfb8      	it	lt
 8013646:	18c0      	addlt	r0, r0, r3
 8013648:	1144      	asrs	r4, r0, #5
 801364a:	f000 061f 	and.w	r6, r0, #31
 801364e:	4620      	mov	r0, r4
 8013650:	f7ff ffd0 	bl	80135f4 <_ZN8touchgfx7CWRUtil4sineEi>
 8013654:	4605      	mov	r5, r0
 8013656:	b90e      	cbnz	r6, 801365c <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E+0x28>
 8013658:	b002      	add	sp, #8
 801365a:	bd70      	pop	{r4, r5, r6, pc}
 801365c:	1c60      	adds	r0, r4, #1
 801365e:	f7ff ffc9 	bl	80135f4 <_ZN8touchgfx7CWRUtil4sineEi>
 8013662:	ab01      	add	r3, sp, #4
 8013664:	2220      	movs	r2, #32
 8013666:	4631      	mov	r1, r6
 8013668:	1b40      	subs	r0, r0, r5
 801366a:	f006 f9c7 	bl	80199fc <_ZN8touchgfx6muldivElllRl>
 801366e:	4428      	add	r0, r5
 8013670:	e7f2      	b.n	8013658 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E+0x24>

08013672 <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>:
 8013672:	b508      	push	{r3, lr}
 8013674:	f5c0 6034 	rsb	r0, r0, #2880	@ 0xb40
 8013678:	f7ff ffdc 	bl	8013634 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 801367c:	bd08      	pop	{r3, pc}
	...

08013680 <_ZN8touchgfx6CircleC1Ev>:
 8013680:	b510      	push	{r4, lr}
 8013682:	4604      	mov	r4, r0
 8013684:	f000 fd6a 	bl	801415c <_ZN8touchgfx12CanvasWidgetC1Ev>
 8013688:	4b08      	ldr	r3, [pc, #32]	@ (80136ac <_ZN8touchgfx6CircleC1Ev+0x2c>)
 801368a:	f44f 5234 	mov.w	r2, #11520	@ 0x2d00
 801368e:	4620      	mov	r0, r4
 8013690:	6023      	str	r3, [r4, #0]
 8013692:	2300      	movs	r3, #0
 8013694:	e9c4 230f 	strd	r2, r3, [r4, #60]	@ 0x3c
 8013698:	f24b 4205 	movw	r2, #46085	@ 0xb405
 801369c:	60a3      	str	r3, [r4, #8]
 801369e:	e9c4 330b 	strd	r3, r3, [r4, #44]	@ 0x2c
 80136a2:	e9c4 330d 	strd	r3, r3, [r4, #52]	@ 0x34
 80136a6:	f8a4 2044 	strh.w	r2, [r4, #68]	@ 0x44
 80136aa:	bd10      	pop	{r4, pc}
 80136ac:	0802cc34 	.word	0x0802cc34

080136b0 <_ZN8touchgfx6Circle15setCapPrecisionEi>:
 80136b0:	29b4      	cmp	r1, #180	@ 0xb4
 80136b2:	bfa8      	it	ge
 80136b4:	21b4      	movge	r1, #180	@ 0xb4
 80136b6:	2901      	cmp	r1, #1
 80136b8:	bfb8      	it	lt
 80136ba:	2101      	movlt	r1, #1
 80136bc:	f880 1045 	strb.w	r1, [r0, #69]	@ 0x45
 80136c0:	4770      	bx	lr

080136c2 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_>:
 80136c2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80136c6:	428a      	cmp	r2, r1
 80136c8:	4680      	mov	r8, r0
 80136ca:	4610      	mov	r0, r2
 80136cc:	4699      	mov	r9, r3
 80136ce:	bfaa      	itet	ge
 80136d0:	460a      	movge	r2, r1
 80136d2:	460b      	movlt	r3, r1
 80136d4:	4603      	movge	r3, r0
 80136d6:	b085      	sub	sp, #20
 80136d8:	f8d8 4040 	ldr.w	r4, [r8, #64]	@ 0x40
 80136dc:	f108 0a34 	add.w	sl, r8, #52	@ 0x34
 80136e0:	1a99      	subs	r1, r3, r2
 80136e2:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 80136e4:	f5b1 5f34 	cmp.w	r1, #11520	@ 0x2d00
 80136e8:	bfa4      	itt	ge
 80136ea:	f44f 5334 	movge.w	r3, #11520	@ 0x2d00
 80136ee:	2200      	movge	r2, #0
 80136f0:	e9dd 760e 	ldrd	r7, r6, [sp, #56]	@ 0x38
 80136f4:	9300      	str	r3, [sp, #0]
 80136f6:	f102 0b01 	add.w	fp, r2, #1
 80136fa:	2c00      	cmp	r4, #0
 80136fc:	f040 80ae 	bne.w	801385c <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x19a>
 8013700:	4610      	mov	r0, r2
 8013702:	9201      	str	r2, [sp, #4]
 8013704:	f7ff ff96 	bl	8013634 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 8013708:	a903      	add	r1, sp, #12
 801370a:	9003      	str	r0, [sp, #12]
 801370c:	4650      	mov	r0, sl
 801370e:	f7ff ff66 	bl	80135de <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8013712:	f8d8 102c 	ldr.w	r1, [r8, #44]	@ 0x2c
 8013716:	9a01      	ldr	r2, [sp, #4]
 8013718:	4408      	add	r0, r1
 801371a:	f8d9 1000 	ldr.w	r1, [r9]
 801371e:	4281      	cmp	r1, r0
 8013720:	bfc8      	it	gt
 8013722:	f8c9 0000 	strgt.w	r0, [r9]
 8013726:	6839      	ldr	r1, [r7, #0]
 8013728:	4288      	cmp	r0, r1
 801372a:	bfc8      	it	gt
 801372c:	6038      	strgt	r0, [r7, #0]
 801372e:	4610      	mov	r0, r2
 8013730:	f7ff ff9f 	bl	8013672 <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 8013734:	a903      	add	r1, sp, #12
 8013736:	9003      	str	r0, [sp, #12]
 8013738:	4650      	mov	r0, sl
 801373a:	f7ff ff50 	bl	80135de <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 801373e:	f8d8 2030 	ldr.w	r2, [r8, #48]	@ 0x30
 8013742:	f44f 6134 	mov.w	r1, #2880	@ 0xb40
 8013746:	1a10      	subs	r0, r2, r0
 8013748:	6832      	ldr	r2, [r6, #0]
 801374a:	4282      	cmp	r2, r0
 801374c:	bfc8      	it	gt
 801374e:	6030      	strgt	r0, [r6, #0]
 8013750:	682a      	ldr	r2, [r5, #0]
 8013752:	4290      	cmp	r0, r2
 8013754:	fb9b f2f1 	sdiv	r2, fp, r1
 8013758:	fb01 b212 	mls	r2, r1, r2, fp
 801375c:	bfc8      	it	gt
 801375e:	6028      	strgt	r0, [r5, #0]
 8013760:	1a8a      	subs	r2, r1, r2
 8013762:	fb92 f0f1 	sdiv	r0, r2, r1
 8013766:	fb01 2210 	mls	r2, r1, r0, r2
 801376a:	4493      	add	fp, r2
 801376c:	9b00      	ldr	r3, [sp, #0]
 801376e:	455b      	cmp	r3, fp
 8013770:	db2a      	blt.n	80137c8 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x106>
 8013772:	4658      	mov	r0, fp
 8013774:	f7ff ff5e 	bl	8013634 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 8013778:	a903      	add	r1, sp, #12
 801377a:	9003      	str	r0, [sp, #12]
 801377c:	4650      	mov	r0, sl
 801377e:	f7ff ff2e 	bl	80135de <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8013782:	f8d8 202c 	ldr.w	r2, [r8, #44]	@ 0x2c
 8013786:	4410      	add	r0, r2
 8013788:	f8d9 2000 	ldr.w	r2, [r9]
 801378c:	4282      	cmp	r2, r0
 801378e:	bfc8      	it	gt
 8013790:	f8c9 0000 	strgt.w	r0, [r9]
 8013794:	683a      	ldr	r2, [r7, #0]
 8013796:	4290      	cmp	r0, r2
 8013798:	bfc8      	it	gt
 801379a:	6038      	strgt	r0, [r7, #0]
 801379c:	4658      	mov	r0, fp
 801379e:	f7ff ff68 	bl	8013672 <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 80137a2:	a903      	add	r1, sp, #12
 80137a4:	9003      	str	r0, [sp, #12]
 80137a6:	4650      	mov	r0, sl
 80137a8:	f7ff ff19 	bl	80135de <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 80137ac:	f8d8 2030 	ldr.w	r2, [r8, #48]	@ 0x30
 80137b0:	f50b 6b34 	add.w	fp, fp, #2880	@ 0xb40
 80137b4:	1a10      	subs	r0, r2, r0
 80137b6:	6832      	ldr	r2, [r6, #0]
 80137b8:	4282      	cmp	r2, r0
 80137ba:	bfc8      	it	gt
 80137bc:	6030      	strgt	r0, [r6, #0]
 80137be:	682a      	ldr	r2, [r5, #0]
 80137c0:	4290      	cmp	r0, r2
 80137c2:	bfc8      	it	gt
 80137c4:	6028      	strgt	r0, [r5, #0]
 80137c6:	e7d1      	b.n	801376c <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0xaa>
 80137c8:	f5ab 6b34 	sub.w	fp, fp, #2880	@ 0xb40
 80137cc:	9b00      	ldr	r3, [sp, #0]
 80137ce:	455b      	cmp	r3, fp
 80137d0:	dd27      	ble.n	8013822 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x160>
 80137d2:	4618      	mov	r0, r3
 80137d4:	f7ff ff2e 	bl	8013634 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 80137d8:	a903      	add	r1, sp, #12
 80137da:	9003      	str	r0, [sp, #12]
 80137dc:	4650      	mov	r0, sl
 80137de:	f7ff fefe 	bl	80135de <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 80137e2:	f8d8 202c 	ldr.w	r2, [r8, #44]	@ 0x2c
 80137e6:	4410      	add	r0, r2
 80137e8:	f8d9 2000 	ldr.w	r2, [r9]
 80137ec:	4282      	cmp	r2, r0
 80137ee:	bfc8      	it	gt
 80137f0:	f8c9 0000 	strgt.w	r0, [r9]
 80137f4:	683a      	ldr	r2, [r7, #0]
 80137f6:	4290      	cmp	r0, r2
 80137f8:	bfc8      	it	gt
 80137fa:	6038      	strgt	r0, [r7, #0]
 80137fc:	9800      	ldr	r0, [sp, #0]
 80137fe:	f7ff ff38 	bl	8013672 <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 8013802:	a903      	add	r1, sp, #12
 8013804:	9003      	str	r0, [sp, #12]
 8013806:	4650      	mov	r0, sl
 8013808:	f7ff fee9 	bl	80135de <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 801380c:	f8d8 2030 	ldr.w	r2, [r8, #48]	@ 0x30
 8013810:	1a10      	subs	r0, r2, r0
 8013812:	6832      	ldr	r2, [r6, #0]
 8013814:	4282      	cmp	r2, r0
 8013816:	bfc8      	it	gt
 8013818:	6030      	strgt	r0, [r6, #0]
 801381a:	682a      	ldr	r2, [r5, #0]
 801381c:	4290      	cmp	r0, r2
 801381e:	bfc8      	it	gt
 8013820:	6028      	strgt	r0, [r5, #0]
 8013822:	f8d8 202c 	ldr.w	r2, [r8, #44]	@ 0x2c
 8013826:	f8d9 1000 	ldr.w	r1, [r9]
 801382a:	4291      	cmp	r1, r2
 801382c:	bfc8      	it	gt
 801382e:	f8c9 2000 	strgt.w	r2, [r9]
 8013832:	683a      	ldr	r2, [r7, #0]
 8013834:	f8d8 302c 	ldr.w	r3, [r8, #44]	@ 0x2c
 8013838:	429a      	cmp	r2, r3
 801383a:	bfb8      	it	lt
 801383c:	603b      	strlt	r3, [r7, #0]
 801383e:	6832      	ldr	r2, [r6, #0]
 8013840:	f8d8 3030 	ldr.w	r3, [r8, #48]	@ 0x30
 8013844:	429a      	cmp	r2, r3
 8013846:	bfc8      	it	gt
 8013848:	6033      	strgt	r3, [r6, #0]
 801384a:	682a      	ldr	r2, [r5, #0]
 801384c:	f8d8 3030 	ldr.w	r3, [r8, #48]	@ 0x30
 8013850:	429a      	cmp	r2, r3
 8013852:	da00      	bge.n	8013856 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x194>
 8013854:	602b      	str	r3, [r5, #0]
 8013856:	b005      	add	sp, #20
 8013858:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801385c:	2002      	movs	r0, #2
 801385e:	3401      	adds	r4, #1
 8013860:	9201      	str	r2, [sp, #4]
 8013862:	fb94 f4f0 	sdiv	r4, r4, r0
 8013866:	4610      	mov	r0, r2
 8013868:	f7ff fee4 	bl	8013634 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 801386c:	a903      	add	r1, sp, #12
 801386e:	9003      	str	r0, [sp, #12]
 8013870:	4650      	mov	r0, sl
 8013872:	f7ff feb4 	bl	80135de <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8013876:	f8d8 102c 	ldr.w	r1, [r8, #44]	@ 0x2c
 801387a:	9a01      	ldr	r2, [sp, #4]
 801387c:	4408      	add	r0, r1
 801387e:	f8d9 1000 	ldr.w	r1, [r9]
 8013882:	1b03      	subs	r3, r0, r4
 8013884:	4420      	add	r0, r4
 8013886:	4299      	cmp	r1, r3
 8013888:	bfc8      	it	gt
 801388a:	f8c9 3000 	strgt.w	r3, [r9]
 801388e:	6839      	ldr	r1, [r7, #0]
 8013890:	428b      	cmp	r3, r1
 8013892:	bfc8      	it	gt
 8013894:	603b      	strgt	r3, [r7, #0]
 8013896:	f8d9 1000 	ldr.w	r1, [r9]
 801389a:	4281      	cmp	r1, r0
 801389c:	bfc8      	it	gt
 801389e:	f8c9 0000 	strgt.w	r0, [r9]
 80138a2:	6839      	ldr	r1, [r7, #0]
 80138a4:	4288      	cmp	r0, r1
 80138a6:	bfc8      	it	gt
 80138a8:	6038      	strgt	r0, [r7, #0]
 80138aa:	4610      	mov	r0, r2
 80138ac:	f7ff fee1 	bl	8013672 <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 80138b0:	a903      	add	r1, sp, #12
 80138b2:	9003      	str	r0, [sp, #12]
 80138b4:	4650      	mov	r0, sl
 80138b6:	f7ff fe92 	bl	80135de <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 80138ba:	f8d8 2030 	ldr.w	r2, [r8, #48]	@ 0x30
 80138be:	1a10      	subs	r0, r2, r0
 80138c0:	6832      	ldr	r2, [r6, #0]
 80138c2:	1b01      	subs	r1, r0, r4
 80138c4:	4420      	add	r0, r4
 80138c6:	428a      	cmp	r2, r1
 80138c8:	bfc8      	it	gt
 80138ca:	6031      	strgt	r1, [r6, #0]
 80138cc:	682a      	ldr	r2, [r5, #0]
 80138ce:	4291      	cmp	r1, r2
 80138d0:	bfc8      	it	gt
 80138d2:	6029      	strgt	r1, [r5, #0]
 80138d4:	f44f 6134 	mov.w	r1, #2880	@ 0xb40
 80138d8:	6832      	ldr	r2, [r6, #0]
 80138da:	4282      	cmp	r2, r0
 80138dc:	bfc8      	it	gt
 80138de:	6030      	strgt	r0, [r6, #0]
 80138e0:	682a      	ldr	r2, [r5, #0]
 80138e2:	4290      	cmp	r0, r2
 80138e4:	fb9b f2f1 	sdiv	r2, fp, r1
 80138e8:	fb01 b212 	mls	r2, r1, r2, fp
 80138ec:	bfc8      	it	gt
 80138ee:	6028      	strgt	r0, [r5, #0]
 80138f0:	1a8a      	subs	r2, r1, r2
 80138f2:	fb92 f0f1 	sdiv	r0, r2, r1
 80138f6:	fb01 2210 	mls	r2, r1, r0, r2
 80138fa:	4493      	add	fp, r2
 80138fc:	9b00      	ldr	r3, [sp, #0]
 80138fe:	455b      	cmp	r3, fp
 8013900:	db40      	blt.n	8013984 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x2c2>
 8013902:	4658      	mov	r0, fp
 8013904:	f7ff fe96 	bl	8013634 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 8013908:	a903      	add	r1, sp, #12
 801390a:	9003      	str	r0, [sp, #12]
 801390c:	4650      	mov	r0, sl
 801390e:	f7ff fe66 	bl	80135de <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8013912:	f8d8 202c 	ldr.w	r2, [r8, #44]	@ 0x2c
 8013916:	4410      	add	r0, r2
 8013918:	f8d9 2000 	ldr.w	r2, [r9]
 801391c:	1b01      	subs	r1, r0, r4
 801391e:	4420      	add	r0, r4
 8013920:	428a      	cmp	r2, r1
 8013922:	bfc8      	it	gt
 8013924:	f8c9 1000 	strgt.w	r1, [r9]
 8013928:	683a      	ldr	r2, [r7, #0]
 801392a:	4291      	cmp	r1, r2
 801392c:	bfc8      	it	gt
 801392e:	6039      	strgt	r1, [r7, #0]
 8013930:	f8d9 2000 	ldr.w	r2, [r9]
 8013934:	4282      	cmp	r2, r0
 8013936:	bfc8      	it	gt
 8013938:	f8c9 0000 	strgt.w	r0, [r9]
 801393c:	683a      	ldr	r2, [r7, #0]
 801393e:	4290      	cmp	r0, r2
 8013940:	bfc8      	it	gt
 8013942:	6038      	strgt	r0, [r7, #0]
 8013944:	4658      	mov	r0, fp
 8013946:	f7ff fe94 	bl	8013672 <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 801394a:	a903      	add	r1, sp, #12
 801394c:	9003      	str	r0, [sp, #12]
 801394e:	4650      	mov	r0, sl
 8013950:	f7ff fe45 	bl	80135de <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8013954:	f8d8 2030 	ldr.w	r2, [r8, #48]	@ 0x30
 8013958:	f50b 6b34 	add.w	fp, fp, #2880	@ 0xb40
 801395c:	1a10      	subs	r0, r2, r0
 801395e:	6832      	ldr	r2, [r6, #0]
 8013960:	1b01      	subs	r1, r0, r4
 8013962:	4420      	add	r0, r4
 8013964:	428a      	cmp	r2, r1
 8013966:	bfc8      	it	gt
 8013968:	6031      	strgt	r1, [r6, #0]
 801396a:	682a      	ldr	r2, [r5, #0]
 801396c:	4291      	cmp	r1, r2
 801396e:	bfc8      	it	gt
 8013970:	6029      	strgt	r1, [r5, #0]
 8013972:	6832      	ldr	r2, [r6, #0]
 8013974:	4282      	cmp	r2, r0
 8013976:	bfc8      	it	gt
 8013978:	6030      	strgt	r0, [r6, #0]
 801397a:	682a      	ldr	r2, [r5, #0]
 801397c:	4290      	cmp	r0, r2
 801397e:	bfc8      	it	gt
 8013980:	6028      	strgt	r0, [r5, #0]
 8013982:	e7bb      	b.n	80138fc <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x23a>
 8013984:	f5ab 6b34 	sub.w	fp, fp, #2880	@ 0xb40
 8013988:	9b00      	ldr	r3, [sp, #0]
 801398a:	455b      	cmp	r3, fp
 801398c:	f77f af63 	ble.w	8013856 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x194>
 8013990:	4618      	mov	r0, r3
 8013992:	f7ff fe4f 	bl	8013634 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 8013996:	a903      	add	r1, sp, #12
 8013998:	9003      	str	r0, [sp, #12]
 801399a:	4650      	mov	r0, sl
 801399c:	f7ff fe1f 	bl	80135de <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 80139a0:	f8d8 202c 	ldr.w	r2, [r8, #44]	@ 0x2c
 80139a4:	4410      	add	r0, r2
 80139a6:	f8d9 2000 	ldr.w	r2, [r9]
 80139aa:	1b01      	subs	r1, r0, r4
 80139ac:	4420      	add	r0, r4
 80139ae:	428a      	cmp	r2, r1
 80139b0:	bfc8      	it	gt
 80139b2:	f8c9 1000 	strgt.w	r1, [r9]
 80139b6:	683a      	ldr	r2, [r7, #0]
 80139b8:	4291      	cmp	r1, r2
 80139ba:	bfc8      	it	gt
 80139bc:	6039      	strgt	r1, [r7, #0]
 80139be:	f8d9 2000 	ldr.w	r2, [r9]
 80139c2:	4282      	cmp	r2, r0
 80139c4:	bfc8      	it	gt
 80139c6:	f8c9 0000 	strgt.w	r0, [r9]
 80139ca:	683b      	ldr	r3, [r7, #0]
 80139cc:	4298      	cmp	r0, r3
 80139ce:	bfc8      	it	gt
 80139d0:	6038      	strgt	r0, [r7, #0]
 80139d2:	9800      	ldr	r0, [sp, #0]
 80139d4:	f7ff fe4d 	bl	8013672 <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 80139d8:	a903      	add	r1, sp, #12
 80139da:	9003      	str	r0, [sp, #12]
 80139dc:	4650      	mov	r0, sl
 80139de:	f7ff fdfe 	bl	80135de <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 80139e2:	f8d8 3030 	ldr.w	r3, [r8, #48]	@ 0x30
 80139e6:	6832      	ldr	r2, [r6, #0]
 80139e8:	1a18      	subs	r0, r3, r0
 80139ea:	1b03      	subs	r3, r0, r4
 80139ec:	4404      	add	r4, r0
 80139ee:	429a      	cmp	r2, r3
 80139f0:	bfc8      	it	gt
 80139f2:	6033      	strgt	r3, [r6, #0]
 80139f4:	682a      	ldr	r2, [r5, #0]
 80139f6:	4293      	cmp	r3, r2
 80139f8:	bfc8      	it	gt
 80139fa:	602b      	strgt	r3, [r5, #0]
 80139fc:	6833      	ldr	r3, [r6, #0]
 80139fe:	42a3      	cmp	r3, r4
 8013a00:	bfc8      	it	gt
 8013a02:	6034      	strgt	r4, [r6, #0]
 8013a04:	682b      	ldr	r3, [r5, #0]
 8013a06:	429c      	cmp	r4, r3
 8013a08:	bfc8      	it	gt
 8013a0a:	602c      	strgt	r4, [r5, #0]
 8013a0c:	e723      	b.n	8013856 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x194>

08013a0e <_ZNK8touchgfx6Circle14getMinimalRectENS_7CWRUtil2Q5ES2_>:
 8013a0e:	b530      	push	{r4, r5, lr}
 8013a10:	4604      	mov	r4, r0
 8013a12:	4608      	mov	r0, r1
 8013a14:	4611      	mov	r1, r2
 8013a16:	461a      	mov	r2, r3
 8013a18:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
 8013a1c:	b089      	sub	sp, #36	@ 0x24
 8013a1e:	2500      	movs	r5, #0
 8013a20:	015b      	lsls	r3, r3, #5
 8013a22:	9505      	str	r5, [sp, #20]
 8013a24:	9304      	str	r3, [sp, #16]
 8013a26:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 8013a2a:	015b      	lsls	r3, r3, #5
 8013a2c:	e9cd 3506 	strd	r3, r5, [sp, #24]
 8013a30:	ab07      	add	r3, sp, #28
 8013a32:	2520      	movs	r5, #32
 8013a34:	9302      	str	r3, [sp, #8]
 8013a36:	ab06      	add	r3, sp, #24
 8013a38:	9301      	str	r3, [sp, #4]
 8013a3a:	ab05      	add	r3, sp, #20
 8013a3c:	9300      	str	r3, [sp, #0]
 8013a3e:	ab04      	add	r3, sp, #16
 8013a40:	f7ff fe3f 	bl	80136c2 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_>
 8013a44:	9a04      	ldr	r2, [sp, #16]
 8013a46:	9805      	ldr	r0, [sp, #20]
 8013a48:	9b06      	ldr	r3, [sp, #24]
 8013a4a:	9907      	ldr	r1, [sp, #28]
 8013a4c:	fb92 f2f5 	sdiv	r2, r2, r5
 8013a50:	fb90 f0f5 	sdiv	r0, r0, r5
 8013a54:	fb93 f3f5 	sdiv	r3, r3, r5
 8013a58:	fb91 f1f5 	sdiv	r1, r1, r5
 8013a5c:	b292      	uxth	r2, r2
 8013a5e:	3002      	adds	r0, #2
 8013a60:	b29b      	uxth	r3, r3
 8013a62:	3102      	adds	r1, #2
 8013a64:	1a80      	subs	r0, r0, r2
 8013a66:	3a01      	subs	r2, #1
 8013a68:	1ac9      	subs	r1, r1, r3
 8013a6a:	3b01      	subs	r3, #1
 8013a6c:	80a0      	strh	r0, [r4, #4]
 8013a6e:	4620      	mov	r0, r4
 8013a70:	8022      	strh	r2, [r4, #0]
 8013a72:	8063      	strh	r3, [r4, #2]
 8013a74:	80e1      	strh	r1, [r4, #6]
 8013a76:	b009      	add	sp, #36	@ 0x24
 8013a78:	bd30      	pop	{r4, r5, pc}

08013a7a <_ZNK8touchgfx6Circle14getMinimalRectEv>:
 8013a7a:	b510      	push	{r4, lr}
 8013a7c:	4604      	mov	r4, r0
 8013a7e:	e9d1 230e 	ldrd	r2, r3, [r1, #56]	@ 0x38
 8013a82:	f7ff ffc4 	bl	8013a0e <_ZNK8touchgfx6Circle14getMinimalRectENS_7CWRUtil2Q5ES2_>
 8013a86:	4620      	mov	r0, r4
 8013a88:	bd10      	pop	{r4, pc}

08013a8a <_ZNK8touchgfx6Circle32getMinimalRectForUpdatedEndAngleERKNS_7CWRUtil2Q5E>:
 8013a8a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013a8c:	e9d1 540e 	ldrd	r5, r4, [r1, #56]	@ 0x38
 8013a90:	4606      	mov	r6, r0
 8013a92:	f891 0044 	ldrb.w	r0, [r1, #68]	@ 0x44
 8013a96:	42a5      	cmp	r5, r4
 8013a98:	6813      	ldr	r3, [r2, #0]
 8013a9a:	ea4f 1040 	mov.w	r0, r0, lsl #5
 8013a9e:	da2b      	bge.n	8013af8 <_ZNK8touchgfx6Circle32getMinimalRectForUpdatedEndAngleERKNS_7CWRUtil2Q5E+0x6e>
 8013aa0:	42a3      	cmp	r3, r4
 8013aa2:	dd14      	ble.n	8013ace <_ZNK8touchgfx6Circle32getMinimalRectForUpdatedEndAngleERKNS_7CWRUtil2Q5E+0x44>
 8013aa4:	b168      	cbz	r0, 8013ac2 <_ZNK8touchgfx6Circle32getMinimalRectForUpdatedEndAngleERKNS_7CWRUtil2Q5E+0x38>
 8013aa6:	4267      	negs	r7, r4
 8013aa8:	fb97 f2f0 	sdiv	r2, r7, r0
 8013aac:	fb00 7212 	mls	r2, r0, r2, r7
 8013ab0:	1a82      	subs	r2, r0, r2
 8013ab2:	fb92 f7f0 	sdiv	r7, r2, r0
 8013ab6:	fb00 2017 	mls	r0, r0, r7, r2
 8013aba:	1a24      	subs	r4, r4, r0
 8013abc:	42ac      	cmp	r4, r5
 8013abe:	bfb8      	it	lt
 8013ac0:	462c      	movlt	r4, r5
 8013ac2:	4630      	mov	r0, r6
 8013ac4:	4622      	mov	r2, r4
 8013ac6:	f7ff ffa2 	bl	8013a0e <_ZNK8touchgfx6Circle14getMinimalRectENS_7CWRUtil2Q5ES2_>
 8013aca:	4630      	mov	r0, r6
 8013acc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013ace:	42ab      	cmp	r3, r5
 8013ad0:	dd0e      	ble.n	8013af0 <_ZNK8touchgfx6Circle32getMinimalRectForUpdatedEndAngleERKNS_7CWRUtil2Q5E+0x66>
 8013ad2:	b168      	cbz	r0, 8013af0 <_ZNK8touchgfx6Circle32getMinimalRectForUpdatedEndAngleERKNS_7CWRUtil2Q5E+0x66>
 8013ad4:	425f      	negs	r7, r3
 8013ad6:	fb97 f2f0 	sdiv	r2, r7, r0
 8013ada:	fb00 7212 	mls	r2, r0, r2, r7
 8013ade:	1a82      	subs	r2, r0, r2
 8013ae0:	fb92 f7f0 	sdiv	r7, r2, r0
 8013ae4:	fb00 2017 	mls	r0, r0, r7, r2
 8013ae8:	1a1b      	subs	r3, r3, r0
 8013aea:	42ab      	cmp	r3, r5
 8013aec:	bfb8      	it	lt
 8013aee:	462b      	movlt	r3, r5
 8013af0:	4622      	mov	r2, r4
 8013af2:	461c      	mov	r4, r3
 8013af4:	4613      	mov	r3, r2
 8013af6:	e7e4      	b.n	8013ac2 <_ZNK8touchgfx6Circle32getMinimalRectForUpdatedEndAngleERKNS_7CWRUtil2Q5E+0x38>
 8013af8:	42a3      	cmp	r3, r4
 8013afa:	da10      	bge.n	8013b1e <_ZNK8touchgfx6Circle32getMinimalRectForUpdatedEndAngleERKNS_7CWRUtil2Q5E+0x94>
 8013afc:	b148      	cbz	r0, 8013b12 <_ZNK8touchgfx6Circle32getMinimalRectForUpdatedEndAngleERKNS_7CWRUtil2Q5E+0x88>
 8013afe:	fb94 f2f0 	sdiv	r2, r4, r0
 8013b02:	fb00 4212 	mls	r2, r0, r2, r4
 8013b06:	1a82      	subs	r2, r0, r2
 8013b08:	fb92 f7f0 	sdiv	r7, r2, r0
 8013b0c:	fb00 2017 	mls	r0, r0, r7, r2
 8013b10:	4404      	add	r4, r0
 8013b12:	42a5      	cmp	r5, r4
 8013b14:	bfa8      	it	ge
 8013b16:	4625      	movge	r5, r4
 8013b18:	461c      	mov	r4, r3
 8013b1a:	462b      	mov	r3, r5
 8013b1c:	e7d1      	b.n	8013ac2 <_ZNK8touchgfx6Circle32getMinimalRectForUpdatedEndAngleERKNS_7CWRUtil2Q5E+0x38>
 8013b1e:	42ab      	cmp	r3, r5
 8013b20:	dacf      	bge.n	8013ac2 <_ZNK8touchgfx6Circle32getMinimalRectForUpdatedEndAngleERKNS_7CWRUtil2Q5E+0x38>
 8013b22:	2800      	cmp	r0, #0
 8013b24:	d0cd      	beq.n	8013ac2 <_ZNK8touchgfx6Circle32getMinimalRectForUpdatedEndAngleERKNS_7CWRUtil2Q5E+0x38>
 8013b26:	fb93 f2f0 	sdiv	r2, r3, r0
 8013b2a:	fb00 3212 	mls	r2, r0, r2, r3
 8013b2e:	1a82      	subs	r2, r0, r2
 8013b30:	fb92 f7f0 	sdiv	r7, r2, r0
 8013b34:	fb00 2017 	mls	r0, r0, r7, r2
 8013b38:	4403      	add	r3, r0
 8013b3a:	42ab      	cmp	r3, r5
 8013b3c:	bfa8      	it	ge
 8013b3e:	462b      	movge	r3, r5
 8013b40:	e7bf      	b.n	8013ac2 <_ZNK8touchgfx6Circle32getMinimalRectForUpdatedEndAngleERKNS_7CWRUtil2Q5E+0x38>
	...

08013b44 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE>:
 8013b44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013b48:	e9d0 650e 	ldrd	r6, r5, [r0, #56]	@ 0x38
 8013b4c:	468a      	mov	sl, r1
 8013b4e:	f9b0 902c 	ldrsh.w	r9, [r0, #44]	@ 0x2c
 8013b52:	42b5      	cmp	r5, r6
 8013b54:	f9b0 b030 	ldrsh.w	fp, [r0, #48]	@ 0x30
 8013b58:	6c01      	ldr	r1, [r0, #64]	@ 0x40
 8013b5a:	b0af      	sub	sp, #188	@ 0xbc
 8013b5c:	bfa4      	itt	ge
 8013b5e:	462b      	movge	r3, r5
 8013b60:	4635      	movge	r5, r6
 8013b62:	4604      	mov	r4, r0
 8013b64:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 8013b66:	bfa8      	it	ge
 8013b68:	461e      	movge	r6, r3
 8013b6a:	1b73      	subs	r3, r6, r5
 8013b6c:	f5b3 5f34 	cmp.w	r3, #11520	@ 0x2d00
 8013b70:	f04f 0320 	mov.w	r3, #32
 8013b74:	bfa4      	itt	ge
 8013b76:	f44f 5634 	movge.w	r6, #11520	@ 0x2d00
 8013b7a:	2500      	movge	r5, #0
 8013b7c:	fb99 f9f3 	sdiv	r9, r9, r3
 8013b80:	fb9b fbf3 	sdiv	fp, fp, r3
 8013b84:	2900      	cmp	r1, #0
 8013b86:	f000 80fb 	beq.w	8013d80 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x23c>
 8013b8a:	f9ba 0000 	ldrsh.w	r0, [sl]
 8013b8e:	f9ba 3002 	ldrsh.w	r3, [sl, #2]
 8013b92:	eba9 0700 	sub.w	r7, r9, r0
 8013b96:	ebab 0803 	sub.w	r8, fp, r3
 8013b9a:	ea87 7ce7 	eor.w	ip, r7, r7, asr #31
 8013b9e:	ebac 7ce7 	sub.w	ip, ip, r7, asr #31
 8013ba2:	f8ba 7004 	ldrh.w	r7, [sl, #4]
 8013ba6:	4407      	add	r7, r0
 8013ba8:	ea88 70e8 	eor.w	r0, r8, r8, asr #31
 8013bac:	eba0 70e8 	sub.w	r0, r0, r8, asr #31
 8013bb0:	f8ba 8006 	ldrh.w	r8, [sl, #6]
 8013bb4:	b23f      	sxth	r7, r7
 8013bb6:	4498      	add	r8, r3
 8013bb8:	2302      	movs	r3, #2
 8013bba:	eba9 0707 	sub.w	r7, r9, r7
 8013bbe:	fa0f f888 	sxth.w	r8, r8
 8013bc2:	9303      	str	r3, [sp, #12]
 8013bc4:	2f00      	cmp	r7, #0
 8013bc6:	ebab 0808 	sub.w	r8, fp, r8
 8013bca:	bfb8      	it	lt
 8013bcc:	427f      	neglt	r7, r7
 8013bce:	f1b8 0f00 	cmp.w	r8, #0
 8013bd2:	bfb8      	it	lt
 8013bd4:	f1c8 0800 	rsblt	r8, r8, #0
 8013bd8:	45bc      	cmp	ip, r7
 8013bda:	bfcc      	ite	gt
 8013bdc:	f10c 0701 	addgt.w	r7, ip, #1
 8013be0:	3701      	addle	r7, #1
 8013be2:	4540      	cmp	r0, r8
 8013be4:	bfc8      	it	gt
 8013be6:	f100 0801 	addgt.w	r8, r0, #1
 8013bea:	f894 0044 	ldrb.w	r0, [r4, #68]	@ 0x44
 8013bee:	bfd8      	it	le
 8013bf0:	f108 0801 	addle.w	r8, r8, #1
 8013bf4:	3001      	adds	r0, #1
 8013bf6:	fb08 f808 	mul.w	r8, r8, r8
 8013bfa:	1040      	asrs	r0, r0, #1
 8013bfc:	fb07 8707 	mla	r7, r7, r7, r8
 8013c00:	f1c0 005a 	rsb	r0, r0, #90	@ 0x5a
 8013c04:	fb91 f1f3 	sdiv	r1, r1, r3
 8013c08:	1a52      	subs	r2, r2, r1
 8013c0a:	920f      	str	r2, [sp, #60]	@ 0x3c
 8013c0c:	f7ff fcf2 	bl	80135f4 <_ZN8touchgfx7CWRUtil4sineEi>
 8013c10:	a92e      	add	r1, sp, #184	@ 0xb8
 8013c12:	f841 0d74 	str.w	r0, [r1, #-116]!
 8013c16:	a80f      	add	r0, sp, #60	@ 0x3c
 8013c18:	f7ff fce1 	bl	80135de <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8013c1c:	f04f 0c20 	mov.w	ip, #32
 8013c20:	9b03      	ldr	r3, [sp, #12]
 8013c22:	fb90 f0fc 	sdiv	r0, r0, ip
 8013c26:	4340      	muls	r0, r0
 8013c28:	4287      	cmp	r7, r0
 8013c2a:	da04      	bge.n	8013c36 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0xf2>
 8013c2c:	2401      	movs	r4, #1
 8013c2e:	4620      	mov	r0, r4
 8013c30:	b02f      	add	sp, #188	@ 0xbc
 8013c32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013c36:	6c21      	ldr	r1, [r4, #64]	@ 0x40
 8013c38:	6b60      	ldr	r0, [r4, #52]	@ 0x34
 8013c3a:	fb91 f2f3 	sdiv	r2, r1, r3
 8013c3e:	4402      	add	r2, r0
 8013c40:	fb92 f2fc 	sdiv	r2, r2, ip
 8013c44:	f9ba 1000 	ldrsh.w	r1, [sl]
 8013c48:	3201      	adds	r2, #1
 8013c4a:	f8ba 3004 	ldrh.w	r3, [sl, #4]
 8013c4e:	4352      	muls	r2, r2
 8013c50:	440b      	add	r3, r1
 8013c52:	b21b      	sxth	r3, r3
 8013c54:	454b      	cmp	r3, r9
 8013c56:	bfa8      	it	ge
 8013c58:	464b      	movge	r3, r9
 8013c5a:	428b      	cmp	r3, r1
 8013c5c:	bfac      	ite	ge
 8013c5e:	eba9 0903 	subge.w	r9, r9, r3
 8013c62:	eba9 0901 	sublt.w	r9, r9, r1
 8013c66:	f8ba 3006 	ldrh.w	r3, [sl, #6]
 8013c6a:	f9ba 1002 	ldrsh.w	r1, [sl, #2]
 8013c6e:	440b      	add	r3, r1
 8013c70:	b21b      	sxth	r3, r3
 8013c72:	455b      	cmp	r3, fp
 8013c74:	bfa8      	it	ge
 8013c76:	465b      	movge	r3, fp
 8013c78:	428b      	cmp	r3, r1
 8013c7a:	bfac      	ite	ge
 8013c7c:	ebab 0b03 	subge.w	fp, fp, r3
 8013c80:	ebab 0b01 	sublt.w	fp, fp, r1
 8013c84:	fb0b fb0b 	mul.w	fp, fp, fp
 8013c88:	fb09 b909 	mla	r9, r9, r9, fp
 8013c8c:	4591      	cmp	r9, r2
 8013c8e:	dccd      	bgt.n	8013c2c <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0xe8>
 8013c90:	f10d 093c 	add.w	r9, sp, #60	@ 0x3c
 8013c94:	4621      	mov	r1, r4
 8013c96:	6aa7      	ldr	r7, [r4, #40]	@ 0x28
 8013c98:	4648      	mov	r0, r9
 8013c9a:	f005 fa59 	bl	8019150 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8013c9e:	6823      	ldr	r3, [r4, #0]
 8013ca0:	4620      	mov	r0, r4
 8013ca2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8013ca4:	4798      	blx	r3
 8013ca6:	4653      	mov	r3, sl
 8013ca8:	9000      	str	r0, [sp, #0]
 8013caa:	464a      	mov	r2, r9
 8013cac:	4639      	mov	r1, r7
 8013cae:	a811      	add	r0, sp, #68	@ 0x44
 8013cb0:	f012 f8a2 	bl	8025df8 <_ZN8touchgfx6CanvasC1EPKNS_15AbstractPainterERKNS_4RectES6_h>
 8013cb4:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 8013cb6:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8013cb8:	920b      	str	r2, [sp, #44]	@ 0x2c
 8013cba:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
 8013cbe:	930c      	str	r3, [sp, #48]	@ 0x30
 8013cc0:	dd07      	ble.n	8013cd2 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x18e>
 8013cc2:	2102      	movs	r1, #2
 8013cc4:	fb93 f3f1 	sdiv	r3, r3, r1
 8013cc8:	4413      	add	r3, r2
 8013cca:	930c      	str	r3, [sp, #48]	@ 0x30
 8013ccc:	fb93 f3f1 	sdiv	r3, r3, r1
 8013cd0:	930b      	str	r3, [sp, #44]	@ 0x2c
 8013cd2:	f04f 0a02 	mov.w	sl, #2
 8013cd6:	4628      	mov	r0, r5
 8013cd8:	f894 7044 	ldrb.w	r7, [r4, #68]	@ 0x44
 8013cdc:	f10d 08b8 	add.w	r8, sp, #184	@ 0xb8
 8013ce0:	e9dd 230b 	ldrd	r2, r3, [sp, #44]	@ 0x2c
 8013ce4:	017f      	lsls	r7, r7, #5
 8013ce6:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8013cea:	930d      	str	r3, [sp, #52]	@ 0x34
 8013cec:	f7ff fca2 	bl	8013634 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 8013cf0:	4649      	mov	r1, r9
 8013cf2:	900f      	str	r0, [sp, #60]	@ 0x3c
 8013cf4:	a80d      	add	r0, sp, #52	@ 0x34
 8013cf6:	f7ff fc72 	bl	80135de <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8013cfa:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8013cfc:	fb90 f0fa 	sdiv	r0, r0, sl
 8013d00:	eb00 0b03 	add.w	fp, r0, r3
 8013d04:	4628      	mov	r0, r5
 8013d06:	f7ff fcb4 	bl	8013672 <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 8013d0a:	f848 0d80 	str.w	r0, [r8, #-128]!
 8013d0e:	a80d      	add	r0, sp, #52	@ 0x34
 8013d10:	4641      	mov	r1, r8
 8013d12:	f7ff fc64 	bl	80135de <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8013d16:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8013d18:	4659      	mov	r1, fp
 8013d1a:	fb90 f0fa 	sdiv	r0, r0, sl
 8013d1e:	1a12      	subs	r2, r2, r0
 8013d20:	a811      	add	r0, sp, #68	@ 0x44
 8013d22:	f012 f9b5 	bl	8026090 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_>
 8013d26:	f105 0a20 	add.w	sl, r5, #32
 8013d2a:	bb67      	cbnz	r7, 8013d86 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x242>
 8013d2c:	46ab      	mov	fp, r5
 8013d2e:	45b2      	cmp	sl, r6
 8013d30:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8013d32:	dc33      	bgt.n	8013d9c <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x258>
 8013d34:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8013d36:	4650      	mov	r0, sl
 8013d38:	eb02 0241 	add.w	r2, r2, r1, lsl #1
 8013d3c:	920d      	str	r2, [sp, #52]	@ 0x34
 8013d3e:	f7ff fc79 	bl	8013634 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 8013d42:	4641      	mov	r1, r8
 8013d44:	900e      	str	r0, [sp, #56]	@ 0x38
 8013d46:	a80d      	add	r0, sp, #52	@ 0x34
 8013d48:	f7ff fc49 	bl	80135de <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8013d4c:	2302      	movs	r3, #2
 8013d4e:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8013d50:	fb90 f0f3 	sdiv	r0, r0, r3
 8013d54:	eb00 0b02 	add.w	fp, r0, r2
 8013d58:	4650      	mov	r0, sl
 8013d5a:	f7ff fc8a 	bl	8013672 <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 8013d5e:	4649      	mov	r1, r9
 8013d60:	900f      	str	r0, [sp, #60]	@ 0x3c
 8013d62:	a80d      	add	r0, sp, #52	@ 0x34
 8013d64:	f7ff fc3b 	bl	80135de <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8013d68:	2302      	movs	r3, #2
 8013d6a:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8013d6c:	4659      	mov	r1, fp
 8013d6e:	46d3      	mov	fp, sl
 8013d70:	44ba      	add	sl, r7
 8013d72:	fb90 f0f3 	sdiv	r0, r0, r3
 8013d76:	1a12      	subs	r2, r2, r0
 8013d78:	a811      	add	r0, sp, #68	@ 0x44
 8013d7a:	f012 f9d6 	bl	802612a <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 8013d7e:	e7d6      	b.n	8013d2e <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x1ea>
 8013d80:	fb92 f2f3 	sdiv	r2, r2, r3
 8013d84:	e75e      	b.n	8013c44 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x100>
 8013d86:	fb9a f2f7 	sdiv	r2, sl, r7
 8013d8a:	fb07 a212 	mls	r2, r7, r2, sl
 8013d8e:	1aba      	subs	r2, r7, r2
 8013d90:	fb92 f1f7 	sdiv	r1, r2, r7
 8013d94:	fb07 2211 	mls	r2, r7, r1, r2
 8013d98:	4492      	add	sl, r2
 8013d9a:	e7c7      	b.n	8013d2c <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x1e8>
 8013d9c:	455e      	cmp	r6, fp
 8013d9e:	dd23      	ble.n	8013de8 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x2a4>
 8013da0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8013da2:	f04f 0a02 	mov.w	sl, #2
 8013da6:	4630      	mov	r0, r6
 8013da8:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 8013dac:	920d      	str	r2, [sp, #52]	@ 0x34
 8013dae:	f7ff fc41 	bl	8013634 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 8013db2:	4641      	mov	r1, r8
 8013db4:	900e      	str	r0, [sp, #56]	@ 0x38
 8013db6:	a80d      	add	r0, sp, #52	@ 0x34
 8013db8:	f7ff fc11 	bl	80135de <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8013dbc:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8013dbe:	fb90 f0fa 	sdiv	r0, r0, sl
 8013dc2:	4403      	add	r3, r0
 8013dc4:	4630      	mov	r0, r6
 8013dc6:	9303      	str	r3, [sp, #12]
 8013dc8:	f7ff fc53 	bl	8013672 <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 8013dcc:	4649      	mov	r1, r9
 8013dce:	900f      	str	r0, [sp, #60]	@ 0x3c
 8013dd0:	a80d      	add	r0, sp, #52	@ 0x34
 8013dd2:	f7ff fc04 	bl	80135de <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8013dd6:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8013dd8:	9b03      	ldr	r3, [sp, #12]
 8013dda:	fb90 f0fa 	sdiv	r0, r0, sl
 8013dde:	4619      	mov	r1, r3
 8013de0:	1a12      	subs	r2, r2, r0
 8013de2:	a811      	add	r0, sp, #68	@ 0x44
 8013de4:	f012 f9a1 	bl	802612a <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 8013de8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8013dea:	b99b      	cbnz	r3, 8013e14 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x2d0>
 8013dec:	1b75      	subs	r5, r6, r5
 8013dee:	f5b5 5f34 	cmp.w	r5, #11520	@ 0x2d00
 8013df2:	da04      	bge.n	8013dfe <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x2ba>
 8013df4:	a811      	add	r0, sp, #68	@ 0x44
 8013df6:	e9d4 120b 	ldrd	r1, r2, [r4, #44]	@ 0x2c
 8013dfa:	f012 f996 	bl	802612a <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 8013dfe:	21ff      	movs	r1, #255	@ 0xff
 8013e00:	a811      	add	r0, sp, #68	@ 0x44
 8013e02:	f012 f88d 	bl	8025f20 <_ZN8touchgfx6Canvas6renderEh>
 8013e06:	4604      	mov	r4, r0
 8013e08:	4b89      	ldr	r3, [pc, #548]	@ (8014030 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x4ec>)
 8013e0a:	a816      	add	r0, sp, #88	@ 0x58
 8013e0c:	9311      	str	r3, [sp, #68]	@ 0x44
 8013e0e:	f001 fc7d 	bl	801570c <_ZN8touchgfx7OutlineD1Ev>
 8013e12:	e70c      	b.n	8013c2e <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0xea>
 8013e14:	e9dd 2317 	ldrd	r2, r3, [sp, #92]	@ 0x5c
 8013e18:	429a      	cmp	r2, r3
 8013e1a:	f0c0 8107 	bcc.w	801402c <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x4e8>
 8013e1e:	1b73      	subs	r3, r6, r5
 8013e20:	f894 a045 	ldrb.w	sl, [r4, #69]	@ 0x45
 8013e24:	f5b3 5f34 	cmp.w	r3, #11520	@ 0x2d00
 8013e28:	ea4f 1a4a 	mov.w	sl, sl, lsl #5
 8013e2c:	9303      	str	r3, [sp, #12]
 8013e2e:	da43      	bge.n	8013eb8 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x374>
 8013e30:	4630      	mov	r0, r6
 8013e32:	f7ff fbff 	bl	8013634 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 8013e36:	4649      	mov	r1, r9
 8013e38:	900f      	str	r0, [sp, #60]	@ 0x3c
 8013e3a:	a80b      	add	r0, sp, #44	@ 0x2c
 8013e3c:	f7ff fbcf 	bl	80135de <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8013e40:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8013e42:	18c3      	adds	r3, r0, r3
 8013e44:	4630      	mov	r0, r6
 8013e46:	9305      	str	r3, [sp, #20]
 8013e48:	f7ff fc13 	bl	8013672 <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 8013e4c:	4649      	mov	r1, r9
 8013e4e:	900f      	str	r0, [sp, #60]	@ 0x3c
 8013e50:	a80b      	add	r0, sp, #44	@ 0x2c
 8013e52:	f7ff fbc4 	bl	80135de <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8013e56:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8013e58:	f506 52b4 	add.w	r2, r6, #5760	@ 0x1680
 8013e5c:	1a1b      	subs	r3, r3, r0
 8013e5e:	9206      	str	r2, [sp, #24]
 8013e60:	9304      	str	r3, [sp, #16]
 8013e62:	eb06 030a 	add.w	r3, r6, sl
 8013e66:	9a06      	ldr	r2, [sp, #24]
 8013e68:	4293      	cmp	r3, r2
 8013e6a:	da25      	bge.n	8013eb8 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x374>
 8013e6c:	4618      	mov	r0, r3
 8013e6e:	9308      	str	r3, [sp, #32]
 8013e70:	f7ff fbe0 	bl	8013634 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 8013e74:	4649      	mov	r1, r9
 8013e76:	900f      	str	r0, [sp, #60]	@ 0x3c
 8013e78:	a80c      	add	r0, sp, #48	@ 0x30
 8013e7a:	f7ff fbb0 	bl	80135de <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8013e7e:	2202      	movs	r2, #2
 8013e80:	9b05      	ldr	r3, [sp, #20]
 8013e82:	9209      	str	r2, [sp, #36]	@ 0x24
 8013e84:	fb90 f0f2 	sdiv	r0, r0, r2
 8013e88:	18c3      	adds	r3, r0, r3
 8013e8a:	9307      	str	r3, [sp, #28]
 8013e8c:	9b08      	ldr	r3, [sp, #32]
 8013e8e:	4618      	mov	r0, r3
 8013e90:	f7ff fbef 	bl	8013672 <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 8013e94:	a92e      	add	r1, sp, #184	@ 0xb8
 8013e96:	f841 0d80 	str.w	r0, [r1, #-128]!
 8013e9a:	a80c      	add	r0, sp, #48	@ 0x30
 8013e9c:	f7ff fb9f 	bl	80135de <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8013ea0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8013ea2:	9b04      	ldr	r3, [sp, #16]
 8013ea4:	9907      	ldr	r1, [sp, #28]
 8013ea6:	fb90 f2f2 	sdiv	r2, r0, r2
 8013eaa:	a811      	add	r0, sp, #68	@ 0x44
 8013eac:	1a9a      	subs	r2, r3, r2
 8013eae:	f012 f93c 	bl	802612a <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 8013eb2:	9b08      	ldr	r3, [sp, #32]
 8013eb4:	4453      	add	r3, sl
 8013eb6:	e7d6      	b.n	8013e66 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x322>
 8013eb8:	455e      	cmp	r6, fp
 8013eba:	dd25      	ble.n	8013f08 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x3c4>
 8013ebc:	4630      	mov	r0, r6
 8013ebe:	e9dd 230b 	ldrd	r2, r3, [sp, #44]	@ 0x2c
 8013ec2:	ebc3 0342 	rsb	r3, r3, r2, lsl #1
 8013ec6:	930d      	str	r3, [sp, #52]	@ 0x34
 8013ec8:	f7ff fbb4 	bl	8013634 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 8013ecc:	4641      	mov	r1, r8
 8013ece:	900e      	str	r0, [sp, #56]	@ 0x38
 8013ed0:	a80d      	add	r0, sp, #52	@ 0x34
 8013ed2:	f7ff fb84 	bl	80135de <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8013ed6:	2202      	movs	r2, #2
 8013ed8:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8013eda:	9204      	str	r2, [sp, #16]
 8013edc:	fb90 f0f2 	sdiv	r0, r0, r2
 8013ee0:	eb00 0903 	add.w	r9, r0, r3
 8013ee4:	4630      	mov	r0, r6
 8013ee6:	f7ff fbc4 	bl	8013672 <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 8013eea:	a92e      	add	r1, sp, #184	@ 0xb8
 8013eec:	f841 0d7c 	str.w	r0, [r1, #-124]!
 8013ef0:	a80d      	add	r0, sp, #52	@ 0x34
 8013ef2:	f7ff fb74 	bl	80135de <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8013ef6:	9a04      	ldr	r2, [sp, #16]
 8013ef8:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8013efa:	4649      	mov	r1, r9
 8013efc:	fb90 f2f2 	sdiv	r2, r0, r2
 8013f00:	a811      	add	r0, sp, #68	@ 0x44
 8013f02:	1a9a      	subs	r2, r3, r2
 8013f04:	f012 f911 	bl	802612a <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 8013f08:	46d9      	mov	r9, fp
 8013f0a:	2602      	movs	r6, #2
 8013f0c:	45a9      	cmp	r9, r5
 8013f0e:	db25      	blt.n	8013f5c <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x418>
 8013f10:	4648      	mov	r0, r9
 8013f12:	e9dd 230b 	ldrd	r2, r3, [sp, #44]	@ 0x2c
 8013f16:	ebc3 0342 	rsb	r3, r3, r2, lsl #1
 8013f1a:	930d      	str	r3, [sp, #52]	@ 0x34
 8013f1c:	f7ff fb8a 	bl	8013634 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 8013f20:	4641      	mov	r1, r8
 8013f22:	900e      	str	r0, [sp, #56]	@ 0x38
 8013f24:	a80d      	add	r0, sp, #52	@ 0x34
 8013f26:	f7ff fb5a 	bl	80135de <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8013f2a:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8013f2c:	fb90 f0f6 	sdiv	r0, r0, r6
 8013f30:	eb00 0b03 	add.w	fp, r0, r3
 8013f34:	4648      	mov	r0, r9
 8013f36:	f7ff fb9c 	bl	8013672 <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 8013f3a:	a90f      	add	r1, sp, #60	@ 0x3c
 8013f3c:	900f      	str	r0, [sp, #60]	@ 0x3c
 8013f3e:	a80d      	add	r0, sp, #52	@ 0x34
 8013f40:	f7ff fb4d 	bl	80135de <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8013f44:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8013f46:	4659      	mov	r1, fp
 8013f48:	46cb      	mov	fp, r9
 8013f4a:	eba9 0907 	sub.w	r9, r9, r7
 8013f4e:	fb90 f0f6 	sdiv	r0, r0, r6
 8013f52:	1a12      	subs	r2, r2, r0
 8013f54:	a811      	add	r0, sp, #68	@ 0x44
 8013f56:	f012 f8e8 	bl	802612a <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 8013f5a:	e7d7      	b.n	8013f0c <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x3c8>
 8013f5c:	455d      	cmp	r5, fp
 8013f5e:	da22      	bge.n	8013fa6 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x462>
 8013f60:	2602      	movs	r6, #2
 8013f62:	4628      	mov	r0, r5
 8013f64:	e9dd 230b 	ldrd	r2, r3, [sp, #44]	@ 0x2c
 8013f68:	ebc3 0342 	rsb	r3, r3, r2, lsl #1
 8013f6c:	930d      	str	r3, [sp, #52]	@ 0x34
 8013f6e:	f7ff fb61 	bl	8013634 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 8013f72:	4641      	mov	r1, r8
 8013f74:	900e      	str	r0, [sp, #56]	@ 0x38
 8013f76:	a80d      	add	r0, sp, #52	@ 0x34
 8013f78:	f7ff fb31 	bl	80135de <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8013f7c:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8013f7e:	fb90 f0f6 	sdiv	r0, r0, r6
 8013f82:	4407      	add	r7, r0
 8013f84:	4628      	mov	r0, r5
 8013f86:	f7ff fb74 	bl	8013672 <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 8013f8a:	a92e      	add	r1, sp, #184	@ 0xb8
 8013f8c:	f841 0d7c 	str.w	r0, [r1, #-124]!
 8013f90:	a80d      	add	r0, sp, #52	@ 0x34
 8013f92:	f7ff fb24 	bl	80135de <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8013f96:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8013f98:	4639      	mov	r1, r7
 8013f9a:	fb90 f0f6 	sdiv	r0, r0, r6
 8013f9e:	1a12      	subs	r2, r2, r0
 8013fa0:	a811      	add	r0, sp, #68	@ 0x44
 8013fa2:	f012 f8c2 	bl	802612a <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 8013fa6:	9b03      	ldr	r3, [sp, #12]
 8013fa8:	f5b3 5f34 	cmp.w	r3, #11520	@ 0x2d00
 8013fac:	f6bf af27 	bge.w	8013dfe <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x2ba>
 8013fb0:	ae2e      	add	r6, sp, #184	@ 0xb8
 8013fb2:	4628      	mov	r0, r5
 8013fb4:	f7ff fb3e 	bl	8013634 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 8013fb8:	f04f 0b02 	mov.w	fp, #2
 8013fbc:	f846 0d7c 	str.w	r0, [r6, #-124]!
 8013fc0:	a80b      	add	r0, sp, #44	@ 0x2c
 8013fc2:	4631      	mov	r1, r6
 8013fc4:	f7ff fb0b 	bl	80135de <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8013fc8:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8013fca:	eb00 0903 	add.w	r9, r0, r3
 8013fce:	4628      	mov	r0, r5
 8013fd0:	f7ff fb4f 	bl	8013672 <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 8013fd4:	4631      	mov	r1, r6
 8013fd6:	900f      	str	r0, [sp, #60]	@ 0x3c
 8013fd8:	a80b      	add	r0, sp, #44	@ 0x2c
 8013fda:	f7ff fb00 	bl	80135de <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8013fde:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8013fe0:	f5a5 54b4 	sub.w	r4, r5, #5760	@ 0x1680
 8013fe4:	eba3 0800 	sub.w	r8, r3, r0
 8013fe8:	4454      	add	r4, sl
 8013fea:	42a5      	cmp	r5, r4
 8013fec:	f77f af07 	ble.w	8013dfe <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x2ba>
 8013ff0:	4620      	mov	r0, r4
 8013ff2:	f7ff fb1f 	bl	8013634 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 8013ff6:	4631      	mov	r1, r6
 8013ff8:	900f      	str	r0, [sp, #60]	@ 0x3c
 8013ffa:	a80c      	add	r0, sp, #48	@ 0x30
 8013ffc:	f7ff faef 	bl	80135de <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8014000:	fb90 f0fb 	sdiv	r0, r0, fp
 8014004:	eb00 0709 	add.w	r7, r0, r9
 8014008:	4620      	mov	r0, r4
 801400a:	f7ff fb32 	bl	8013672 <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 801400e:	a90e      	add	r1, sp, #56	@ 0x38
 8014010:	900e      	str	r0, [sp, #56]	@ 0x38
 8014012:	a80c      	add	r0, sp, #48	@ 0x30
 8014014:	f7ff fae3 	bl	80135de <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8014018:	4639      	mov	r1, r7
 801401a:	4454      	add	r4, sl
 801401c:	fb90 f2fb 	sdiv	r2, r0, fp
 8014020:	a811      	add	r0, sp, #68	@ 0x44
 8014022:	eba8 0202 	sub.w	r2, r8, r2
 8014026:	f012 f880 	bl	802612a <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 801402a:	e7de      	b.n	8013fea <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x4a6>
 801402c:	2400      	movs	r4, #0
 801402e:	e6eb      	b.n	8013e08 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x2c4>
 8014030:	0802d4e4 	.word	0x0802d4e4

08014034 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE>:
 8014034:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8014036:	6803      	ldr	r3, [r0, #0]
 8014038:	460d      	mov	r5, r1
 801403a:	4604      	mov	r4, r0
 801403c:	4601      	mov	r1, r0
 801403e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8014040:	a802      	add	r0, sp, #8
 8014042:	4798      	blx	r3
 8014044:	6828      	ldr	r0, [r5, #0]
 8014046:	6869      	ldr	r1, [r5, #4]
 8014048:	466b      	mov	r3, sp
 801404a:	c303      	stmia	r3!, {r0, r1}
 801404c:	4668      	mov	r0, sp
 801404e:	4619      	mov	r1, r3
 8014050:	f7fb ff56 	bl	800ff00 <_ZN8touchgfx4RectaNERKS0_>
 8014054:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8014056:	b188      	cbz	r0, 801407c <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
 8014058:	6803      	ldr	r3, [r0, #0]
 801405a:	1d21      	adds	r1, r4, #4
 801405c:	68db      	ldr	r3, [r3, #12]
 801405e:	4798      	blx	r3
 8014060:	b160      	cbz	r0, 801407c <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
 8014062:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 8014066:	2b00      	cmp	r3, #0
 8014068:	dd08      	ble.n	801407c <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
 801406a:	f9bd 5006 	ldrsh.w	r5, [sp, #6]
 801406e:	2d00      	cmp	r5, #0
 8014070:	dd04      	ble.n	801407c <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
 8014072:	4a2b      	ldr	r2, [pc, #172]	@ (8014120 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xec>)
 8014074:	7812      	ldrb	r2, [r2, #0]
 8014076:	b11a      	cbz	r2, 8014080 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x4c>
 8014078:	2a01      	cmp	r2, #1
 801407a:	d029      	beq.n	80140d0 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x9c>
 801407c:	b004      	add	sp, #16
 801407e:	bd70      	pop	{r4, r5, r6, pc}
 8014080:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8014084:	441d      	add	r5, r3
 8014086:	b2ad      	uxth	r5, r5
 8014088:	b22e      	sxth	r6, r5
 801408a:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
 801408e:	42b3      	cmp	r3, r6
 8014090:	daf4      	bge.n	801407c <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
 8014092:	6823      	ldr	r3, [r4, #0]
 8014094:	4669      	mov	r1, sp
 8014096:	4620      	mov	r0, r4
 8014098:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801409a:	4798      	blx	r3
 801409c:	b940      	cbnz	r0, 80140b0 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x7c>
 801409e:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
 80140a2:	2b01      	cmp	r3, #1
 80140a4:	d004      	beq.n	80140b0 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x7c>
 80140a6:	3301      	adds	r3, #1
 80140a8:	105b      	asrs	r3, r3, #1
 80140aa:	f8ad 3006 	strh.w	r3, [sp, #6]
 80140ae:	e7f0      	b.n	8014092 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x5e>
 80140b0:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 80140b4:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 80140b8:	4413      	add	r3, r2
 80140ba:	b29b      	uxth	r3, r3
 80140bc:	441a      	add	r2, r3
 80140be:	f8ad 3002 	strh.w	r3, [sp, #2]
 80140c2:	b212      	sxth	r2, r2
 80140c4:	4296      	cmp	r6, r2
 80140c6:	dae0      	bge.n	801408a <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x56>
 80140c8:	1aeb      	subs	r3, r5, r3
 80140ca:	f8ad 3006 	strh.w	r3, [sp, #6]
 80140ce:	e7dc      	b.n	801408a <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x56>
 80140d0:	f8bd 5000 	ldrh.w	r5, [sp]
 80140d4:	441d      	add	r5, r3
 80140d6:	b2ad      	uxth	r5, r5
 80140d8:	b22e      	sxth	r6, r5
 80140da:	f9bd 3000 	ldrsh.w	r3, [sp]
 80140de:	42b3      	cmp	r3, r6
 80140e0:	dacc      	bge.n	801407c <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
 80140e2:	6823      	ldr	r3, [r4, #0]
 80140e4:	4669      	mov	r1, sp
 80140e6:	4620      	mov	r0, r4
 80140e8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80140ea:	4798      	blx	r3
 80140ec:	b940      	cbnz	r0, 8014100 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xcc>
 80140ee:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 80140f2:	2b01      	cmp	r3, #1
 80140f4:	d004      	beq.n	8014100 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xcc>
 80140f6:	3301      	adds	r3, #1
 80140f8:	105b      	asrs	r3, r3, #1
 80140fa:	f8ad 3004 	strh.w	r3, [sp, #4]
 80140fe:	e7f0      	b.n	80140e2 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xae>
 8014100:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 8014104:	f8bd 3000 	ldrh.w	r3, [sp]
 8014108:	4413      	add	r3, r2
 801410a:	b29b      	uxth	r3, r3
 801410c:	441a      	add	r2, r3
 801410e:	f8ad 3000 	strh.w	r3, [sp]
 8014112:	b212      	sxth	r2, r2
 8014114:	4296      	cmp	r6, r2
 8014116:	dae0      	bge.n	80140da <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xa6>
 8014118:	1aeb      	subs	r3, r5, r3
 801411a:	f8ad 3004 	strh.w	r3, [sp, #4]
 801411e:	e7dc      	b.n	80140da <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xa6>
 8014120:	24028e18 	.word	0x24028e18

08014124 <_ZNK8touchgfx12CanvasWidget10invalidateEv>:
 8014124:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8014126:	6803      	ldr	r3, [r0, #0]
 8014128:	4604      	mov	r4, r0
 801412a:	4601      	mov	r1, r0
 801412c:	4668      	mov	r0, sp
 801412e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8014130:	4798      	blx	r3
 8014132:	2100      	movs	r1, #0
 8014134:	f9b4 2008 	ldrsh.w	r2, [r4, #8]
 8014138:	4668      	mov	r0, sp
 801413a:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 801413e:	9102      	str	r1, [sp, #8]
 8014140:	a902      	add	r1, sp, #8
 8014142:	f8ad 200c 	strh.w	r2, [sp, #12]
 8014146:	f8ad 300e 	strh.w	r3, [sp, #14]
 801414a:	f7fb fed9 	bl	800ff00 <_ZN8touchgfx4RectaNERKS0_>
 801414e:	6823      	ldr	r3, [r4, #0]
 8014150:	4669      	mov	r1, sp
 8014152:	4620      	mov	r0, r4
 8014154:	691b      	ldr	r3, [r3, #16]
 8014156:	4798      	blx	r3
 8014158:	b004      	add	sp, #16
 801415a:	bd10      	pop	{r4, pc}

0801415c <_ZN8touchgfx12CanvasWidgetC1Ev>:
 801415c:	2101      	movs	r1, #1
 801415e:	2200      	movs	r2, #0
 8014160:	f880 1025 	strb.w	r1, [r0, #37]	@ 0x25
 8014164:	490a      	ldr	r1, [pc, #40]	@ (8014190 <_ZN8touchgfx12CanvasWidgetC1Ev+0x34>)
 8014166:	8082      	strh	r2, [r0, #4]
 8014168:	6001      	str	r1, [r0, #0]
 801416a:	21ff      	movs	r1, #255	@ 0xff
 801416c:	80c2      	strh	r2, [r0, #6]
 801416e:	8102      	strh	r2, [r0, #8]
 8014170:	8142      	strh	r2, [r0, #10]
 8014172:	8182      	strh	r2, [r0, #12]
 8014174:	81c2      	strh	r2, [r0, #14]
 8014176:	8202      	strh	r2, [r0, #16]
 8014178:	8242      	strh	r2, [r0, #18]
 801417a:	61c2      	str	r2, [r0, #28]
 801417c:	8402      	strh	r2, [r0, #32]
 801417e:	8442      	strh	r2, [r0, #34]	@ 0x22
 8014180:	f880 2024 	strb.w	r2, [r0, #36]	@ 0x24
 8014184:	f880 1026 	strb.w	r1, [r0, #38]	@ 0x26
 8014188:	6282      	str	r2, [r0, #40]	@ 0x28
 801418a:	e9c0 2205 	strd	r2, r2, [r0, #20]
 801418e:	4770      	bx	lr
 8014190:	0802ccac 	.word	0x0802ccac

08014194 <_ZN8touchgfx13AnimatedImage12setBitmapEndERKNS_6BitmapE>:
 8014194:	880b      	ldrh	r3, [r1, #0]
 8014196:	8643      	strh	r3, [r0, #50]	@ 0x32
 8014198:	4770      	bx	lr

0801419a <_ZN8touchgfx13AnimatedImageD1Ev>:
 801419a:	4770      	bx	lr

0801419c <_ZN8touchgfx13AnimatedImage9setBitmapERKNS_6BitmapE>:
 801419c:	880b      	ldrh	r3, [r1, #0]
 801419e:	8603      	strh	r3, [r0, #48]	@ 0x30
 80141a0:	f001 b94f 	b.w	8015442 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>

080141a4 <_ZN8touchgfx13AnimatedImage13stopAnimationEv>:
 80141a4:	b513      	push	{r0, r1, r4, lr}
 80141a6:	f890 3038 	ldrb.w	r3, [r0, #56]	@ 0x38
 80141aa:	4604      	mov	r4, r0
 80141ac:	b143      	cbz	r3, 80141c0 <_ZN8touchgfx13AnimatedImage13stopAnimationEv+0x1c>
 80141ae:	f003 fe49 	bl	8017e44 <_ZN8touchgfx11Application11getInstanceEv>
 80141b2:	4621      	mov	r1, r4
 80141b4:	3004      	adds	r0, #4
 80141b6:	f003 fe92 	bl	8017ede <_ZN8touchgfx11Application12TimerWidgets6removeEPKNS_8DrawableE>
 80141ba:	2300      	movs	r3, #0
 80141bc:	f884 3038 	strb.w	r3, [r4, #56]	@ 0x38
 80141c0:	f894 3036 	ldrb.w	r3, [r4, #54]	@ 0x36
 80141c4:	b163      	cbz	r3, 80141e0 <_ZN8touchgfx13AnimatedImage13stopAnimationEv+0x3c>
 80141c6:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 80141c8:	a901      	add	r1, sp, #4
 80141ca:	4620      	mov	r0, r4
 80141cc:	f8ad 3004 	strh.w	r3, [sp, #4]
 80141d0:	f001 f937 	bl	8015442 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 80141d4:	6823      	ldr	r3, [r4, #0]
 80141d6:	4620      	mov	r0, r4
 80141d8:	695b      	ldr	r3, [r3, #20]
 80141da:	4798      	blx	r3
 80141dc:	b002      	add	sp, #8
 80141de:	bd10      	pop	{r4, pc}
 80141e0:	8e23      	ldrh	r3, [r4, #48]	@ 0x30
 80141e2:	e7f1      	b.n	80141c8 <_ZN8touchgfx13AnimatedImage13stopAnimationEv+0x24>

080141e4 <_ZN8touchgfx13AnimatedImage14startAnimationEbbb>:
 80141e4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80141e6:	f64f 77ff 	movw	r7, #65535	@ 0xffff
 80141ea:	8e05      	ldrh	r5, [r0, #48]	@ 0x30
 80141ec:	4604      	mov	r4, r0
 80141ee:	42bd      	cmp	r5, r7
 80141f0:	d01a      	beq.n	8014228 <_ZN8touchgfx13AnimatedImage14startAnimationEbbb+0x44>
 80141f2:	8e46      	ldrh	r6, [r0, #50]	@ 0x32
 80141f4:	42be      	cmp	r6, r7
 80141f6:	d017      	beq.n	8014228 <_ZN8touchgfx13AnimatedImage14startAnimationEbbb+0x44>
 80141f8:	f880 1036 	strb.w	r1, [r0, #54]	@ 0x36
 80141fc:	f880 3037 	strb.w	r3, [r0, #55]	@ 0x37
 8014200:	b1a1      	cbz	r1, 801422c <_ZN8touchgfx13AnimatedImage14startAnimationEbbb+0x48>
 8014202:	b142      	cbz	r2, 8014216 <_ZN8touchgfx13AnimatedImage14startAnimationEbbb+0x32>
 8014204:	a902      	add	r1, sp, #8
 8014206:	f821 6d04 	strh.w	r6, [r1, #-4]!
 801420a:	f001 f91a 	bl	8015442 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 801420e:	6823      	ldr	r3, [r4, #0]
 8014210:	4620      	mov	r0, r4
 8014212:	695b      	ldr	r3, [r3, #20]
 8014214:	4798      	blx	r3
 8014216:	f003 fe15 	bl	8017e44 <_ZN8touchgfx11Application11getInstanceEv>
 801421a:	4621      	mov	r1, r4
 801421c:	3004      	adds	r0, #4
 801421e:	f003 ff07 	bl	8018030 <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE>
 8014222:	2301      	movs	r3, #1
 8014224:	f884 3038 	strb.w	r3, [r4, #56]	@ 0x38
 8014228:	b003      	add	sp, #12
 801422a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801422c:	2a00      	cmp	r2, #0
 801422e:	d0f2      	beq.n	8014216 <_ZN8touchgfx13AnimatedImage14startAnimationEbbb+0x32>
 8014230:	a902      	add	r1, sp, #8
 8014232:	f821 5d04 	strh.w	r5, [r1, #-4]!
 8014236:	e7e8      	b.n	801420a <_ZN8touchgfx13AnimatedImage14startAnimationEbbb+0x26>

08014238 <_ZN8touchgfx13AnimatedImageD0Ev>:
 8014238:	b510      	push	{r4, lr}
 801423a:	4604      	mov	r4, r0
 801423c:	213c      	movs	r1, #60	@ 0x3c
 801423e:	f013 f926 	bl	802748e <_ZdlPvj>
 8014242:	4620      	mov	r0, r4
 8014244:	bd10      	pop	{r4, pc}

08014246 <_ZN8touchgfx13AnimatedImage14pauseAnimationEv>:
 8014246:	b510      	push	{r4, lr}
 8014248:	f890 3038 	ldrb.w	r3, [r0, #56]	@ 0x38
 801424c:	4604      	mov	r4, r0
 801424e:	b14b      	cbz	r3, 8014264 <_ZN8touchgfx13AnimatedImage14pauseAnimationEv+0x1e>
 8014250:	f003 fdf8 	bl	8017e44 <_ZN8touchgfx11Application11getInstanceEv>
 8014254:	4621      	mov	r1, r4
 8014256:	3004      	adds	r0, #4
 8014258:	f003 fe41 	bl	8017ede <_ZN8touchgfx11Application12TimerWidgets6removeEPKNS_8DrawableE>
 801425c:	2300      	movs	r3, #0
 801425e:	f884 3038 	strb.w	r3, [r4, #56]	@ 0x38
 8014262:	bd10      	pop	{r4, pc}
 8014264:	f003 fdee 	bl	8017e44 <_ZN8touchgfx11Application11getInstanceEv>
 8014268:	4621      	mov	r1, r4
 801426a:	3004      	adds	r0, #4
 801426c:	f003 fee0 	bl	8018030 <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE>
 8014270:	2301      	movs	r3, #1
 8014272:	e7f4      	b.n	801425e <_ZN8touchgfx13AnimatedImage14pauseAnimationEv+0x18>

08014274 <_ZN8touchgfx13AnimatedImage15handleTickEventEv>:
 8014274:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8014276:	f890 3038 	ldrb.w	r3, [r0, #56]	@ 0x38
 801427a:	4604      	mov	r4, r0
 801427c:	2b00      	cmp	r3, #0
 801427e:	d042      	beq.n	8014306 <_ZN8touchgfx13AnimatedImage15handleTickEventEv+0x92>
 8014280:	f890 3035 	ldrb.w	r3, [r0, #53]	@ 0x35
 8014284:	f890 2034 	ldrb.w	r2, [r0, #52]	@ 0x34
 8014288:	3301      	adds	r3, #1
 801428a:	b2db      	uxtb	r3, r3
 801428c:	429a      	cmp	r2, r3
 801428e:	f880 3035 	strb.w	r3, [r0, #53]	@ 0x35
 8014292:	d138      	bne.n	8014306 <_ZN8touchgfx13AnimatedImage15handleTickEventEv+0x92>
 8014294:	2300      	movs	r3, #0
 8014296:	8e41      	ldrh	r1, [r0, #50]	@ 0x32
 8014298:	f890 2036 	ldrb.w	r2, [r0, #54]	@ 0x36
 801429c:	f880 3035 	strb.w	r3, [r0, #53]	@ 0x35
 80142a0:	8cc3      	ldrh	r3, [r0, #38]	@ 0x26
 80142a2:	4299      	cmp	r1, r3
 80142a4:	d100      	bne.n	80142a8 <_ZN8touchgfx13AnimatedImage15handleTickEventEv+0x34>
 80142a6:	b122      	cbz	r2, 80142b2 <_ZN8touchgfx13AnimatedImage15handleTickEventEv+0x3e>
 80142a8:	8e21      	ldrh	r1, [r4, #48]	@ 0x30
 80142aa:	4299      	cmp	r1, r3
 80142ac:	d12f      	bne.n	801430e <_ZN8touchgfx13AnimatedImage15handleTickEventEv+0x9a>
 80142ae:	2a00      	cmp	r2, #0
 80142b0:	d034      	beq.n	801431c <_ZN8touchgfx13AnimatedImage15handleTickEventEv+0xa8>
 80142b2:	f894 5037 	ldrb.w	r5, [r4, #55]	@ 0x37
 80142b6:	b93d      	cbnz	r5, 80142c8 <_ZN8touchgfx13AnimatedImage15handleTickEventEv+0x54>
 80142b8:	f003 fdc4 	bl	8017e44 <_ZN8touchgfx11Application11getInstanceEv>
 80142bc:	4621      	mov	r1, r4
 80142be:	3004      	adds	r0, #4
 80142c0:	f003 fe0d 	bl	8017ede <_ZN8touchgfx11Application12TimerWidgets6removeEPKNS_8DrawableE>
 80142c4:	f884 5038 	strb.w	r5, [r4, #56]	@ 0x38
 80142c8:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 80142ca:	b140      	cbz	r0, 80142de <_ZN8touchgfx13AnimatedImage15handleTickEventEv+0x6a>
 80142cc:	6803      	ldr	r3, [r0, #0]
 80142ce:	68db      	ldr	r3, [r3, #12]
 80142d0:	4798      	blx	r3
 80142d2:	b120      	cbz	r0, 80142de <_ZN8touchgfx13AnimatedImage15handleTickEventEv+0x6a>
 80142d4:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 80142d6:	4621      	mov	r1, r4
 80142d8:	6803      	ldr	r3, [r0, #0]
 80142da:	689b      	ldr	r3, [r3, #8]
 80142dc:	4798      	blx	r3
 80142de:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 80142e2:	b183      	cbz	r3, 8014306 <_ZN8touchgfx13AnimatedImage15handleTickEventEv+0x92>
 80142e4:	f894 3037 	ldrb.w	r3, [r4, #55]	@ 0x37
 80142e8:	b16b      	cbz	r3, 8014306 <_ZN8touchgfx13AnimatedImage15handleTickEventEv+0x92>
 80142ea:	f894 3036 	ldrb.w	r3, [r4, #54]	@ 0x36
 80142ee:	b163      	cbz	r3, 801430a <_ZN8touchgfx13AnimatedImage15handleTickEventEv+0x96>
 80142f0:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 80142f2:	a901      	add	r1, sp, #4
 80142f4:	f8ad 3004 	strh.w	r3, [sp, #4]
 80142f8:	4620      	mov	r0, r4
 80142fa:	f001 f8a2 	bl	8015442 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 80142fe:	6823      	ldr	r3, [r4, #0]
 8014300:	4620      	mov	r0, r4
 8014302:	695b      	ldr	r3, [r3, #20]
 8014304:	4798      	blx	r3
 8014306:	b003      	add	sp, #12
 8014308:	bd30      	pop	{r4, r5, pc}
 801430a:	8e23      	ldrh	r3, [r4, #48]	@ 0x30
 801430c:	e7f1      	b.n	80142f2 <_ZN8touchgfx13AnimatedImage15handleTickEventEv+0x7e>
 801430e:	b12a      	cbz	r2, 801431c <_ZN8touchgfx13AnimatedImage15handleTickEventEv+0xa8>
 8014310:	3b01      	subs	r3, #1
 8014312:	b29b      	uxth	r3, r3
 8014314:	a902      	add	r1, sp, #8
 8014316:	f821 3d04 	strh.w	r3, [r1, #-4]!
 801431a:	e7ed      	b.n	80142f8 <_ZN8touchgfx13AnimatedImage15handleTickEventEv+0x84>
 801431c:	3301      	adds	r3, #1
 801431e:	e7f8      	b.n	8014312 <_ZN8touchgfx13AnimatedImage15handleTickEventEv+0x9e>

08014320 <_ZN8touchgfx13AnimatedImage10setBitmapsEtt>:
 8014320:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8014322:	ac02      	add	r4, sp, #8
 8014324:	6803      	ldr	r3, [r0, #0]
 8014326:	4605      	mov	r5, r0
 8014328:	4616      	mov	r6, r2
 801432a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801432c:	f824 1d04 	strh.w	r1, [r4, #-4]!
 8014330:	4621      	mov	r1, r4
 8014332:	4798      	blx	r3
 8014334:	682b      	ldr	r3, [r5, #0]
 8014336:	4621      	mov	r1, r4
 8014338:	4628      	mov	r0, r5
 801433a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801433c:	f8ad 6004 	strh.w	r6, [sp, #4]
 8014340:	4798      	blx	r3
 8014342:	b002      	add	sp, #8
 8014344:	bd70      	pop	{r4, r5, r6, pc}

08014346 <_ZN8touchgfx13AnimatedImage22setUpdateTicksIntervalEh>:
 8014346:	2300      	movs	r3, #0
 8014348:	f880 1034 	strb.w	r1, [r0, #52]	@ 0x34
 801434c:	f880 3035 	strb.w	r3, [r0, #53]	@ 0x35
 8014350:	4770      	bx	lr

08014352 <_ZNK8touchgfx8TextArea12getWildcard1Ev>:
 8014352:	2000      	movs	r0, #0
 8014354:	4770      	bx	lr
	...

08014358 <_ZNK8touchgfx8TextArea12getAlignmentEv>:
 8014358:	4b07      	ldr	r3, [pc, #28]	@ (8014378 <_ZNK8touchgfx8TextArea12getAlignmentEv+0x20>)
 801435a:	8d82      	ldrh	r2, [r0, #44]	@ 0x2c
 801435c:	881b      	ldrh	r3, [r3, #0]
 801435e:	4293      	cmp	r3, r2
 8014360:	bf81      	itttt	hi
 8014362:	4b06      	ldrhi	r3, [pc, #24]	@ (801437c <_ZNK8touchgfx8TextArea12getAlignmentEv+0x24>)
 8014364:	681b      	ldrhi	r3, [r3, #0]
 8014366:	eb03 0342 	addhi.w	r3, r3, r2, lsl #1
 801436a:	7858      	ldrbhi	r0, [r3, #1]
 801436c:	bf8c      	ite	hi
 801436e:	f000 0003 	andhi.w	r0, r0, #3
 8014372:	2000      	movls	r0, #0
 8014374:	4770      	bx	lr
 8014376:	bf00      	nop
 8014378:	24028e7c 	.word	0x24028e7c
 801437c:	24028e78 	.word	0x24028e78

08014380 <_ZN8touchgfx8TextAreaD1Ev>:
 8014380:	4770      	bx	lr
	...

08014384 <_ZNK8touchgfx8TextArea13getTextHeightEv>:
 8014384:	4b11      	ldr	r3, [pc, #68]	@ (80143cc <_ZNK8touchgfx8TextArea13getTextHeightEv+0x48>)
 8014386:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801438a:	8d81      	ldrh	r1, [r0, #44]	@ 0x2c
 801438c:	4604      	mov	r4, r0
 801438e:	881b      	ldrh	r3, [r3, #0]
 8014390:	428b      	cmp	r3, r1
 8014392:	d918      	bls.n	80143c6 <_ZNK8touchgfx8TextArea13getTextHeightEv+0x42>
 8014394:	6803      	ldr	r3, [r0, #0]
 8014396:	6f9d      	ldr	r5, [r3, #120]	@ 0x78
 8014398:	4b0d      	ldr	r3, [pc, #52]	@ (80143d0 <_ZNK8touchgfx8TextArea13getTextHeightEv+0x4c>)
 801439a:	6818      	ldr	r0, [r3, #0]
 801439c:	f7f0 f8fa 	bl	8004594 <_ZNK8touchgfx5Texts7getTextEt>
 80143a0:	6823      	ldr	r3, [r4, #0]
 80143a2:	4606      	mov	r6, r0
 80143a4:	4620      	mov	r0, r4
 80143a6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80143a8:	4798      	blx	r3
 80143aa:	6823      	ldr	r3, [r4, #0]
 80143ac:	4607      	mov	r7, r0
 80143ae:	4620      	mov	r0, r4
 80143b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80143b4:	4798      	blx	r3
 80143b6:	463a      	mov	r2, r7
 80143b8:	4603      	mov	r3, r0
 80143ba:	4631      	mov	r1, r6
 80143bc:	4620      	mov	r0, r4
 80143be:	46ac      	mov	ip, r5
 80143c0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80143c4:	4760      	bx	ip
 80143c6:	2000      	movs	r0, #0
 80143c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80143cc:	24028e7c 	.word	0x24028e7c
 80143d0:	24028e84 	.word	0x24028e84

080143d4 <_ZNK8touchgfx8TextArea12getTextWidthEv>:
 80143d4:	4b18      	ldr	r3, [pc, #96]	@ (8014438 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x64>)
 80143d6:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80143da:	8d81      	ldrh	r1, [r0, #44]	@ 0x2c
 80143dc:	4604      	mov	r4, r0
 80143de:	881b      	ldrh	r3, [r3, #0]
 80143e0:	428b      	cmp	r3, r1
 80143e2:	d926      	bls.n	8014432 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x5e>
 80143e4:	4b15      	ldr	r3, [pc, #84]	@ (801443c <_ZNK8touchgfx8TextArea12getTextWidthEv+0x68>)
 80143e6:	681b      	ldr	r3, [r3, #0]
 80143e8:	eb03 0241 	add.w	r2, r3, r1, lsl #1
 80143ec:	f813 0011 	ldrb.w	r0, [r3, r1, lsl #1]
 80143f0:	4b13      	ldr	r3, [pc, #76]	@ (8014440 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x6c>)
 80143f2:	7855      	ldrb	r5, [r2, #1]
 80143f4:	681b      	ldr	r3, [r3, #0]
 80143f6:	f3c5 0581 	ubfx	r5, r5, #2, #2
 80143fa:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
 80143fe:	6833      	ldr	r3, [r6, #0]
 8014400:	69df      	ldr	r7, [r3, #28]
 8014402:	4b10      	ldr	r3, [pc, #64]	@ (8014444 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x70>)
 8014404:	6818      	ldr	r0, [r3, #0]
 8014406:	f7f0 f8c5 	bl	8004594 <_ZNK8touchgfx5Texts7getTextEt>
 801440a:	6823      	ldr	r3, [r4, #0]
 801440c:	4680      	mov	r8, r0
 801440e:	4620      	mov	r0, r4
 8014410:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8014412:	4798      	blx	r3
 8014414:	6823      	ldr	r3, [r4, #0]
 8014416:	4681      	mov	r9, r0
 8014418:	4620      	mov	r0, r4
 801441a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801441e:	4798      	blx	r3
 8014420:	464b      	mov	r3, r9
 8014422:	9000      	str	r0, [sp, #0]
 8014424:	4642      	mov	r2, r8
 8014426:	4629      	mov	r1, r5
 8014428:	4630      	mov	r0, r6
 801442a:	47b8      	blx	r7
 801442c:	b003      	add	sp, #12
 801442e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014432:	2000      	movs	r0, #0
 8014434:	e7fa      	b.n	801442c <_ZNK8touchgfx8TextArea12getTextWidthEv+0x58>
 8014436:	bf00      	nop
 8014438:	24028e7c 	.word	0x24028e7c
 801443c:	24028e78 	.word	0x24028e78
 8014440:	24028e80 	.word	0x24028e80
 8014444:	24028e84 	.word	0x24028e84

08014448 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz>:
 8014448:	b40e      	push	{r1, r2, r3}
 801444a:	4b30      	ldr	r3, [pc, #192]	@ (801450c <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xc4>)
 801444c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014450:	881a      	ldrh	r2, [r3, #0]
 8014452:	b09d      	sub	sp, #116	@ 0x74
 8014454:	8d83      	ldrh	r3, [r0, #44]	@ 0x2c
 8014456:	4604      	mov	r4, r0
 8014458:	429a      	cmp	r2, r3
 801445a:	d954      	bls.n	8014506 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xbe>
 801445c:	aa26      	add	r2, sp, #152	@ 0x98
 801445e:	f8df 90b0 	ldr.w	r9, [pc, #176]	@ 8014510 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xc8>
 8014462:	f8df 80b0 	ldr.w	r8, [pc, #176]	@ 8014514 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xcc>
 8014466:	9202      	str	r2, [sp, #8]
 8014468:	f8d9 2000 	ldr.w	r2, [r9]
 801446c:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 8014470:	f8d8 3000 	ldr.w	r3, [r8]
 8014474:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 8014478:	682b      	ldr	r3, [r5, #0]
 801447a:	4628      	mov	r0, r5
 801447c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801447e:	4798      	blx	r3
 8014480:	4606      	mov	r6, r0
 8014482:	b207      	sxth	r7, r0
 8014484:	a803      	add	r0, sp, #12
 8014486:	f005 fed5 	bl	801a234 <_ZN8touchgfx12TextProviderC1Ev>
 801448a:	682b      	ldr	r3, [r5, #0]
 801448c:	4628      	mov	r0, r5
 801448e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8014490:	4798      	blx	r3
 8014492:	682b      	ldr	r3, [r5, #0]
 8014494:	4682      	mov	sl, r0
 8014496:	4628      	mov	r0, r5
 8014498:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801449a:	4798      	blx	r3
 801449c:	4653      	mov	r3, sl
 801449e:	9000      	str	r0, [sp, #0]
 80144a0:	a803      	add	r0, sp, #12
 80144a2:	9a02      	ldr	r2, [sp, #8]
 80144a4:	9925      	ldr	r1, [sp, #148]	@ 0x94
 80144a6:	f005 ff20 	bl	801a2ea <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 80144aa:	8da2      	ldrh	r2, [r4, #44]	@ 0x2c
 80144ac:	f8d9 3000 	ldr.w	r3, [r9]
 80144b0:	f894 c037 	ldrb.w	ip, [r4, #55]	@ 0x37
 80144b4:	8925      	ldrh	r5, [r4, #8]
 80144b6:	eb03 0142 	add.w	r1, r3, r2, lsl #1
 80144ba:	f813 0012 	ldrb.w	r0, [r3, r2, lsl #1]
 80144be:	eba5 050c 	sub.w	r5, r5, ip
 80144c2:	784a      	ldrb	r2, [r1, #1]
 80144c4:	f8d8 3000 	ldr.w	r3, [r8]
 80144c8:	b22d      	sxth	r5, r5
 80144ca:	f894 1039 	ldrb.w	r1, [r4, #57]	@ 0x39
 80144ce:	f3c2 0281 	ubfx	r2, r2, #2, #2
 80144d2:	9500      	str	r5, [sp, #0]
 80144d4:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80144d8:	a803      	add	r0, sp, #12
 80144da:	f003 f805 	bl	80174e8 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>
 80144de:	f9b4 2034 	ldrsh.w	r2, [r4, #52]	@ 0x34
 80144e2:	b203      	sxth	r3, r0
 80144e4:	18b9      	adds	r1, r7, r2
 80144e6:	2900      	cmp	r1, #0
 80144e8:	dd0b      	ble.n	8014502 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xba>
 80144ea:	3b01      	subs	r3, #1
 80144ec:	fb13 f302 	smulbb	r3, r3, r2
 80144f0:	fb16 3300 	smlabb	r3, r6, r0, r3
 80144f4:	b21f      	sxth	r7, r3
 80144f6:	4638      	mov	r0, r7
 80144f8:	b01d      	add	sp, #116	@ 0x74
 80144fa:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80144fe:	b003      	add	sp, #12
 8014500:	4770      	bx	lr
 8014502:	2b00      	cmp	r3, #0
 8014504:	dcf7      	bgt.n	80144f6 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xae>
 8014506:	2700      	movs	r7, #0
 8014508:	e7f5      	b.n	80144f6 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xae>
 801450a:	bf00      	nop
 801450c:	24028e7c 	.word	0x24028e7c
 8014510:	24028e78 	.word	0x24028e78
 8014514:	24028e80 	.word	0x24028e80

08014518 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>:
 8014518:	4bbd      	ldr	r3, [pc, #756]	@ (8014810 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2f8>)
 801451a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801451e:	460c      	mov	r4, r1
 8014520:	881b      	ldrh	r3, [r3, #0]
 8014522:	8d89      	ldrh	r1, [r1, #44]	@ 0x2c
 8014524:	b0a9      	sub	sp, #164	@ 0xa4
 8014526:	4680      	mov	r8, r0
 8014528:	428b      	cmp	r3, r1
 801452a:	d809      	bhi.n	8014540 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x28>
 801452c:	2300      	movs	r3, #0
 801452e:	f04f 32ff 	mov.w	r2, #4294967295
 8014532:	6083      	str	r3, [r0, #8]
 8014534:	e9c0 3200 	strd	r3, r2, [r0]
 8014538:	4640      	mov	r0, r8
 801453a:	b029      	add	sp, #164	@ 0xa4
 801453c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014540:	4eb4      	ldr	r6, [pc, #720]	@ (8014814 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2fc>)
 8014542:	6833      	ldr	r3, [r6, #0]
 8014544:	f813 2011 	ldrb.w	r2, [r3, r1, lsl #1]
 8014548:	4bb3      	ldr	r3, [pc, #716]	@ (8014818 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x300>)
 801454a:	681b      	ldr	r3, [r3, #0]
 801454c:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 8014550:	4bb2      	ldr	r3, [pc, #712]	@ (801481c <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x304>)
 8014552:	6818      	ldr	r0, [r3, #0]
 8014554:	f7f0 f81e 	bl	8004594 <_ZNK8touchgfx5Texts7getTextEt>
 8014558:	682b      	ldr	r3, [r5, #0]
 801455a:	4681      	mov	r9, r0
 801455c:	4628      	mov	r0, r5
 801455e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8014560:	4798      	blx	r3
 8014562:	8ea7      	ldrh	r7, [r4, #52]	@ 0x34
 8014564:	b203      	sxth	r3, r0
 8014566:	4682      	mov	sl, r0
 8014568:	4407      	add	r7, r0
 801456a:	a80f      	add	r0, sp, #60	@ 0x3c
 801456c:	9304      	str	r3, [sp, #16]
 801456e:	b2bb      	uxth	r3, r7
 8014570:	9303      	str	r3, [sp, #12]
 8014572:	f894 3039 	ldrb.w	r3, [r4, #57]	@ 0x39
 8014576:	2b00      	cmp	r3, #0
 8014578:	f040 80a5 	bne.w	80146c6 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x1ae>
 801457c:	f005 fe5a 	bl	801a234 <_ZN8touchgfx12TextProviderC1Ev>
 8014580:	682b      	ldr	r3, [r5, #0]
 8014582:	4628      	mov	r0, r5
 8014584:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8014586:	4798      	blx	r3
 8014588:	682b      	ldr	r3, [r5, #0]
 801458a:	4606      	mov	r6, r0
 801458c:	4628      	mov	r0, r5
 801458e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8014590:	4798      	blx	r3
 8014592:	6823      	ldr	r3, [r4, #0]
 8014594:	4607      	mov	r7, r0
 8014596:	4620      	mov	r0, r4
 8014598:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801459a:	4798      	blx	r3
 801459c:	6823      	ldr	r3, [r4, #0]
 801459e:	4683      	mov	fp, r0
 80145a0:	4620      	mov	r0, r4
 80145a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80145a6:	4798      	blx	r3
 80145a8:	463b      	mov	r3, r7
 80145aa:	4649      	mov	r1, r9
 80145ac:	4632      	mov	r2, r6
 80145ae:	2600      	movs	r6, #0
 80145b0:	e9cd b000 	strd	fp, r0, [sp]
 80145b4:	a80f      	add	r0, sp, #60	@ 0x3c
 80145b6:	4637      	mov	r7, r6
 80145b8:	f005 feac 	bl	801a314 <_ZN8touchgfx12TextProvider10initializeEPKtS2_PKNS_24FontContextualFormsTableEz>
 80145bc:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 80145c0:	f8df b250 	ldr.w	fp, [pc, #592]	@ 8014814 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2fc>
 80145c4:	f013 0ffd 	tst.w	r3, #253	@ 0xfd
 80145c8:	bf0c      	ite	eq
 80145ca:	f9b4 900a 	ldrsheq.w	r9, [r4, #10]
 80145ce:	f9b4 9008 	ldrshne.w	r9, [r4, #8]
 80145d2:	8da2      	ldrh	r2, [r4, #44]	@ 0x2c
 80145d4:	4629      	mov	r1, r5
 80145d6:	f8db 3000 	ldr.w	r3, [fp]
 80145da:	a80f      	add	r0, sp, #60	@ 0x3c
 80145dc:	3701      	adds	r7, #1
 80145de:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 80145e2:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 80145e6:	b2bf      	uxth	r7, r7
 80145e8:	785b      	ldrb	r3, [r3, #1]
 80145ea:	f3c3 0381 	ubfx	r3, r3, #2, #2
 80145ee:	f002 fc82 	bl	8016ef6 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>
 80145f2:	9b03      	ldr	r3, [sp, #12]
 80145f4:	4286      	cmp	r6, r0
 80145f6:	eba9 0903 	sub.w	r9, r9, r3
 80145fa:	bfb8      	it	lt
 80145fc:	4606      	movlt	r6, r0
 80145fe:	a80f      	add	r0, sp, #60	@ 0x3c
 8014600:	fa0f f989 	sxth.w	r9, r9
 8014604:	b236      	sxth	r6, r6
 8014606:	f005 fe3c 	bl	801a282 <_ZN8touchgfx12TextProvider11endOfStringEv>
 801460a:	b918      	cbnz	r0, 8014614 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xfc>
 801460c:	7a2b      	ldrb	r3, [r5, #8]
 801460e:	444b      	add	r3, r9
 8014610:	2b00      	cmp	r3, #0
 8014612:	dcde      	bgt.n	80145d2 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xba>
 8014614:	9b03      	ldr	r3, [sp, #12]
 8014616:	4620      	mov	r0, r4
 8014618:	9a04      	ldr	r2, [sp, #16]
 801461a:	fb13 f707 	smulbb	r7, r3, r7
 801461e:	8ea3      	ldrh	r3, [r4, #52]	@ 0x34
 8014620:	f895 9009 	ldrb.w	r9, [r5, #9]
 8014624:	1aff      	subs	r7, r7, r3
 8014626:	b2bf      	uxth	r7, r7
 8014628:	b23b      	sxth	r3, r7
 801462a:	429a      	cmp	r2, r3
 801462c:	bfa8      	it	ge
 801462e:	4657      	movge	r7, sl
 8014630:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 8014634:	f013 0ffd 	tst.w	r3, #253	@ 0xfd
 8014638:	6823      	ldr	r3, [r4, #0]
 801463a:	444f      	add	r7, r9
 801463c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801463e:	bf08      	it	eq
 8014640:	f9b4 a008 	ldrsheq.w	sl, [r4, #8]
 8014644:	fa1f f987 	uxth.w	r9, r7
 8014648:	bf18      	it	ne
 801464a:	f9b4 a00a 	ldrshne.w	sl, [r4, #10]
 801464e:	4798      	blx	r3
 8014650:	2801      	cmp	r0, #1
 8014652:	fa0f f789 	sxth.w	r7, r9
 8014656:	b2b3      	uxth	r3, r6
 8014658:	f000 80e2 	beq.w	8014820 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x308>
 801465c:	2802      	cmp	r0, #2
 801465e:	f894 6037 	ldrb.w	r6, [r4, #55]	@ 0x37
 8014662:	f000 80e3 	beq.w	801482c <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x314>
 8014666:	7aea      	ldrb	r2, [r5, #11]
 8014668:	b236      	sxth	r6, r6
 801466a:	7b2d      	ldrb	r5, [r5, #12]
 801466c:	1ab6      	subs	r6, r6, r2
 801466e:	442a      	add	r2, r5
 8014670:	fa1f fa86 	uxth.w	sl, r6
 8014674:	4413      	add	r3, r2
 8014676:	f894 2038 	ldrb.w	r2, [r4, #56]	@ 0x38
 801467a:	fa0f fb8a 	sxth.w	fp, sl
 801467e:	b29b      	uxth	r3, r3
 8014680:	2a02      	cmp	r2, #2
 8014682:	b21e      	sxth	r6, r3
 8014684:	f000 80d6 	beq.w	8014834 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x31c>
 8014688:	2a03      	cmp	r2, #3
 801468a:	f000 80de 	beq.w	801484a <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x332>
 801468e:	2a01      	cmp	r2, #1
 8014690:	f040 80e6 	bne.w	8014860 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x348>
 8014694:	8925      	ldrh	r5, [r4, #8]
 8014696:	4633      	mov	r3, r6
 8014698:	463e      	mov	r6, r7
 801469a:	eba5 0909 	sub.w	r9, r5, r9
 801469e:	461f      	mov	r7, r3
 80146a0:	465d      	mov	r5, fp
 80146a2:	fa0f fb89 	sxth.w	fp, r9
 80146a6:	4b5d      	ldr	r3, [pc, #372]	@ (801481c <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x304>)
 80146a8:	8da1      	ldrh	r1, [r4, #44]	@ 0x2c
 80146aa:	6818      	ldr	r0, [r3, #0]
 80146ac:	f7ef ff72 	bl	8004594 <_ZNK8touchgfx5Texts7getTextEt>
 80146b0:	f8a8 b000 	strh.w	fp, [r8]
 80146b4:	f8a8 5002 	strh.w	r5, [r8, #2]
 80146b8:	f8a8 6004 	strh.w	r6, [r8, #4]
 80146bc:	f8a8 7006 	strh.w	r7, [r8, #6]
 80146c0:	f8c8 0008 	str.w	r0, [r8, #8]
 80146c4:	e738      	b.n	8014538 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x20>
 80146c6:	f005 fdb5 	bl	801a234 <_ZN8touchgfx12TextProviderC1Ev>
 80146ca:	682b      	ldr	r3, [r5, #0]
 80146cc:	4628      	mov	r0, r5
 80146ce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80146d0:	4798      	blx	r3
 80146d2:	682b      	ldr	r3, [r5, #0]
 80146d4:	4607      	mov	r7, r0
 80146d6:	4628      	mov	r0, r5
 80146d8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80146da:	4798      	blx	r3
 80146dc:	6823      	ldr	r3, [r4, #0]
 80146de:	4683      	mov	fp, r0
 80146e0:	4620      	mov	r0, r4
 80146e2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80146e4:	4798      	blx	r3
 80146e6:	6822      	ldr	r2, [r4, #0]
 80146e8:	9005      	str	r0, [sp, #20]
 80146ea:	4620      	mov	r0, r4
 80146ec:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 80146f0:	4790      	blx	r2
 80146f2:	9b05      	ldr	r3, [sp, #20]
 80146f4:	463a      	mov	r2, r7
 80146f6:	4649      	mov	r1, r9
 80146f8:	9001      	str	r0, [sp, #4]
 80146fa:	a80f      	add	r0, sp, #60	@ 0x3c
 80146fc:	9300      	str	r3, [sp, #0]
 80146fe:	465b      	mov	r3, fp
 8014700:	f005 fe08 	bl	801a314 <_ZN8touchgfx12TextProvider10initializeEPKtS2_PKNS_24FontContextualFormsTableEz>
 8014704:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 8014708:	f9b4 9008 	ldrsh.w	r9, [r4, #8]
 801470c:	af0f      	add	r7, sp, #60	@ 0x3c
 801470e:	f013 0ffd 	tst.w	r3, #253	@ 0xfd
 8014712:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 8014716:	8da1      	ldrh	r1, [r4, #44]	@ 0x2c
 8014718:	bf0a      	itet	eq
 801471a:	464a      	moveq	r2, r9
 801471c:	461a      	movne	r2, r3
 801471e:	4699      	moveq	r9, r3
 8014720:	f894 3037 	ldrb.w	r3, [r4, #55]	@ 0x37
 8014724:	f894 0039 	ldrb.w	r0, [r4, #57]	@ 0x39
 8014728:	1ad2      	subs	r2, r2, r3
 801472a:	6833      	ldr	r3, [r6, #0]
 801472c:	f9b4 6034 	ldrsh.w	r6, [r4, #52]	@ 0x34
 8014730:	eb03 0341 	add.w	r3, r3, r1, lsl #1
 8014734:	7859      	ldrb	r1, [r3, #1]
 8014736:	2300      	movs	r3, #0
 8014738:	9707      	str	r7, [sp, #28]
 801473a:	f3c1 0181 	ubfx	r1, r1, #2, #2
 801473e:	f8ad 3018 	strh.w	r3, [sp, #24]
 8014742:	f88d 0021 	strb.w	r0, [sp, #33]	@ 0x21
 8014746:	f88d 1020 	strb.w	r1, [sp, #32]
 801474a:	9509      	str	r5, [sp, #36]	@ 0x24
 801474c:	f8ad 2028 	strh.w	r2, [sp, #40]	@ 0x28
 8014750:	f8ad 902a 	strh.w	r9, [sp, #42]	@ 0x2a
 8014754:	f8ad 602c 	strh.w	r6, [sp, #44]	@ 0x2c
 8014758:	f8ad 302e 	strh.w	r3, [sp, #46]	@ 0x2e
 801475c:	f8ad 3030 	strh.w	r3, [sp, #48]	@ 0x30
 8014760:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 8014764:	f8ad 3034 	strh.w	r3, [sp, #52]	@ 0x34
 8014768:	f8ad 3036 	strh.w	r3, [sp, #54]	@ 0x36
 801476c:	f8ad 3038 	strh.w	r3, [sp, #56]	@ 0x38
 8014770:	f88d 303a 	strb.w	r3, [sp, #58]	@ 0x3a
 8014774:	b350      	cbz	r0, 80147cc <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2b4>
 8014776:	682b      	ldr	r3, [r5, #0]
 8014778:	4628      	mov	r0, r5
 801477a:	695b      	ldr	r3, [r3, #20]
 801477c:	4798      	blx	r3
 801477e:	4607      	mov	r7, r0
 8014780:	b320      	cbz	r0, 80147cc <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2b4>
 8014782:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8014784:	4639      	mov	r1, r7
 8014786:	6803      	ldr	r3, [r0, #0]
 8014788:	68db      	ldr	r3, [r3, #12]
 801478a:	4798      	blx	r3
 801478c:	4606      	mov	r6, r0
 801478e:	b1e8      	cbz	r0, 80147cc <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2b4>
 8014790:	7b43      	ldrb	r3, [r0, #13]
 8014792:	7a82      	ldrb	r2, [r0, #10]
 8014794:	005b      	lsls	r3, r3, #1
 8014796:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801479a:	4313      	orrs	r3, r2
 801479c:	f8ad 3038 	strh.w	r3, [sp, #56]	@ 0x38
 80147a0:	f89d 3021 	ldrb.w	r3, [sp, #33]	@ 0x21
 80147a4:	2b06      	cmp	r3, #6
 80147a6:	d111      	bne.n	80147cc <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2b4>
 80147a8:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80147aa:	4632      	mov	r2, r6
 80147ac:	4639      	mov	r1, r7
 80147ae:	6803      	ldr	r3, [r0, #0]
 80147b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80147b2:	4798      	blx	r3
 80147b4:	7b73      	ldrb	r3, [r6, #13]
 80147b6:	005b      	lsls	r3, r3, #1
 80147b8:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 80147bc:	7ab3      	ldrb	r3, [r6, #10]
 80147be:	4313      	orrs	r3, r2
 80147c0:	4418      	add	r0, r3
 80147c2:	f8bd 3038 	ldrh.w	r3, [sp, #56]	@ 0x38
 80147c6:	4418      	add	r0, r3
 80147c8:	f8ad 0038 	strh.w	r0, [sp, #56]	@ 0x38
 80147cc:	2600      	movs	r6, #0
 80147ce:	4637      	mov	r7, r6
 80147d0:	a806      	add	r0, sp, #24
 80147d2:	3701      	adds	r7, #1
 80147d4:	f002 fd85 	bl	80172e2 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>
 80147d8:	f8bd 0036 	ldrh.w	r0, [sp, #54]	@ 0x36
 80147dc:	9b03      	ldr	r3, [sp, #12]
 80147de:	b2bf      	uxth	r7, r7
 80147e0:	4286      	cmp	r6, r0
 80147e2:	eba9 0903 	sub.w	r9, r9, r3
 80147e6:	f8bd 3018 	ldrh.w	r3, [sp, #24]
 80147ea:	bfb8      	it	lt
 80147ec:	4606      	movlt	r6, r0
 80147ee:	fa0f f989 	sxth.w	r9, r9
 80147f2:	b236      	sxth	r6, r6
 80147f4:	2b00      	cmp	r3, #0
 80147f6:	f43f af0d 	beq.w	8014614 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xfc>
 80147fa:	f89d 303a 	ldrb.w	r3, [sp, #58]	@ 0x3a
 80147fe:	2b00      	cmp	r3, #0
 8014800:	f47f af08 	bne.w	8014614 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xfc>
 8014804:	7a2b      	ldrb	r3, [r5, #8]
 8014806:	444b      	add	r3, r9
 8014808:	2b00      	cmp	r3, #0
 801480a:	dce1      	bgt.n	80147d0 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2b8>
 801480c:	e702      	b.n	8014614 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xfc>
 801480e:	bf00      	nop
 8014810:	24028e7c 	.word	0x24028e7c
 8014814:	24028e78 	.word	0x24028e78
 8014818:	24028e80 	.word	0x24028e80
 801481c:	24028e84 	.word	0x24028e84
 8014820:	ebaa 0606 	sub.w	r6, sl, r6
 8014824:	2002      	movs	r0, #2
 8014826:	fb96 f6f0 	sdiv	r6, r6, r0
 801482a:	e71c      	b.n	8014666 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x14e>
 801482c:	441e      	add	r6, r3
 801482e:	ebaa 0606 	sub.w	r6, sl, r6
 8014832:	e718      	b.n	8014666 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x14e>
 8014834:	8925      	ldrh	r5, [r4, #8]
 8014836:	1aed      	subs	r5, r5, r3
 8014838:	eba5 050a 	sub.w	r5, r5, sl
 801483c:	fa0f fb85 	sxth.w	fp, r5
 8014840:	8965      	ldrh	r5, [r4, #10]
 8014842:	eba5 0509 	sub.w	r5, r5, r9
 8014846:	b22d      	sxth	r5, r5
 8014848:	e72d      	b.n	80146a6 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x18e>
 801484a:	8965      	ldrh	r5, [r4, #10]
 801484c:	f04f 0b00 	mov.w	fp, #0
 8014850:	1aed      	subs	r5, r5, r3
 8014852:	4633      	mov	r3, r6
 8014854:	463e      	mov	r6, r7
 8014856:	eba5 050a 	sub.w	r5, r5, sl
 801485a:	461f      	mov	r7, r3
 801485c:	b22d      	sxth	r5, r5
 801485e:	e722      	b.n	80146a6 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x18e>
 8014860:	2500      	movs	r5, #0
 8014862:	e720      	b.n	80146a6 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x18e>

08014864 <_ZN8touchgfx8TextAreaD0Ev>:
 8014864:	b510      	push	{r4, lr}
 8014866:	4604      	mov	r4, r0
 8014868:	2148      	movs	r1, #72	@ 0x48
 801486a:	f012 fe10 	bl	802748e <_ZdlPvj>
 801486e:	4620      	mov	r0, r4
 8014870:	bd10      	pop	{r4, pc}
	...

08014874 <_ZNK8touchgfx8TextArea17invalidateContentEv>:
 8014874:	b513      	push	{r0, r1, r4, lr}
 8014876:	f890 3036 	ldrb.w	r3, [r0, #54]	@ 0x36
 801487a:	4604      	mov	r4, r0
 801487c:	b1fb      	cbz	r3, 80148be <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
 801487e:	4b16      	ldr	r3, [pc, #88]	@ (80148d8 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x64>)
 8014880:	8d81      	ldrh	r1, [r0, #44]	@ 0x2c
 8014882:	881b      	ldrh	r3, [r3, #0]
 8014884:	428b      	cmp	r3, r1
 8014886:	d91a      	bls.n	80148be <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
 8014888:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
 801488c:	2b00      	cmp	r3, #0
 801488e:	dd16      	ble.n	80148be <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
 8014890:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 8014894:	2b00      	cmp	r3, #0
 8014896:	dd12      	ble.n	80148be <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
 8014898:	4b10      	ldr	r3, [pc, #64]	@ (80148dc <_ZNK8touchgfx8TextArea17invalidateContentEv+0x68>)
 801489a:	6818      	ldr	r0, [r3, #0]
 801489c:	f7ef fe7a 	bl	8004594 <_ZNK8touchgfx5Texts7getTextEt>
 80148a0:	f9b4 3042 	ldrsh.w	r3, [r4, #66]	@ 0x42
 80148a4:	6822      	ldr	r2, [r4, #0]
 80148a6:	2b00      	cmp	r3, #0
 80148a8:	db06      	blt.n	80148b8 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x44>
 80148aa:	f9b4 3040 	ldrsh.w	r3, [r4, #64]	@ 0x40
 80148ae:	2b00      	cmp	r3, #0
 80148b0:	db02      	blt.n	80148b8 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x44>
 80148b2:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 80148b4:	4298      	cmp	r0, r3
 80148b6:	d004      	beq.n	80148c2 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4e>
 80148b8:	6953      	ldr	r3, [r2, #20]
 80148ba:	4620      	mov	r0, r4
 80148bc:	4798      	blx	r3
 80148be:	b002      	add	sp, #8
 80148c0:	bd10      	pop	{r4, pc}
 80148c2:	f104 013c 	add.w	r1, r4, #60	@ 0x3c
 80148c6:	466b      	mov	r3, sp
 80148c8:	6912      	ldr	r2, [r2, #16]
 80148ca:	c903      	ldmia	r1, {r0, r1}
 80148cc:	e883 0003 	stmia.w	r3, {r0, r1}
 80148d0:	4619      	mov	r1, r3
 80148d2:	4620      	mov	r0, r4
 80148d4:	4790      	blx	r2
 80148d6:	e7f2      	b.n	80148be <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
 80148d8:	24028e7c 	.word	0x24028e7c
 80148dc:	24028e84 	.word	0x24028e84

080148e0 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE>:
 80148e0:	4b45      	ldr	r3, [pc, #276]	@ (80149f8 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x118>)
 80148e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80148e6:	8d82      	ldrh	r2, [r0, #44]	@ 0x2c
 80148e8:	b08e      	sub	sp, #56	@ 0x38
 80148ea:	881b      	ldrh	r3, [r3, #0]
 80148ec:	4604      	mov	r4, r0
 80148ee:	4293      	cmp	r3, r2
 80148f0:	d97e      	bls.n	80149f0 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x110>
 80148f2:	6808      	ldr	r0, [r1, #0]
 80148f4:	ab05      	add	r3, sp, #20
 80148f6:	6849      	ldr	r1, [r1, #4]
 80148f8:	4d40      	ldr	r5, [pc, #256]	@ (80149fc <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x11c>)
 80148fa:	c303      	stmia	r3!, {r0, r1}
 80148fc:	4611      	mov	r1, r2
 80148fe:	6828      	ldr	r0, [r5, #0]
 8014900:	f7ef fe48 	bl	8004594 <_ZNK8touchgfx5Texts7getTextEt>
 8014904:	f9b4 3042 	ldrsh.w	r3, [r4, #66]	@ 0x42
 8014908:	2b00      	cmp	r3, #0
 801490a:	db11      	blt.n	8014930 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x50>
 801490c:	f9b4 3040 	ldrsh.w	r3, [r4, #64]	@ 0x40
 8014910:	2b00      	cmp	r3, #0
 8014912:	db0d      	blt.n	8014930 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x50>
 8014914:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8014916:	4298      	cmp	r0, r3
 8014918:	d10a      	bne.n	8014930 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x50>
 801491a:	f104 023c 	add.w	r2, r4, #60	@ 0x3c
 801491e:	ab09      	add	r3, sp, #36	@ 0x24
 8014920:	e892 0003 	ldmia.w	r2, {r0, r1}
 8014924:	e883 0003 	stmia.w	r3, {r0, r1}
 8014928:	4619      	mov	r1, r3
 801492a:	a805      	add	r0, sp, #20
 801492c:	f7fb fae8 	bl	800ff00 <_ZN8touchgfx4RectaNERKS0_>
 8014930:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 8014934:	2b00      	cmp	r3, #0
 8014936:	dd5b      	ble.n	80149f0 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x110>
 8014938:	f9bd 301a 	ldrsh.w	r3, [sp, #26]
 801493c:	2b00      	cmp	r3, #0
 801493e:	dd57      	ble.n	80149f0 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x110>
 8014940:	4f2f      	ldr	r7, [pc, #188]	@ (8014a00 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x120>)
 8014942:	8da2      	ldrh	r2, [r4, #44]	@ 0x2c
 8014944:	683b      	ldr	r3, [r7, #0]
 8014946:	f813 2012 	ldrb.w	r2, [r3, r2, lsl #1]
 801494a:	4b2e      	ldr	r3, [pc, #184]	@ (8014a04 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x124>)
 801494c:	681b      	ldr	r3, [r3, #0]
 801494e:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 8014952:	2e00      	cmp	r6, #0
 8014954:	d04c      	beq.n	80149f0 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x110>
 8014956:	6823      	ldr	r3, [r4, #0]
 8014958:	4620      	mov	r0, r4
 801495a:	f894 8036 	ldrb.w	r8, [r4, #54]	@ 0x36
 801495e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8014960:	4798      	blx	r3
 8014962:	8da2      	ldrh	r2, [r4, #44]	@ 0x2c
 8014964:	683b      	ldr	r3, [r7, #0]
 8014966:	f9b4 c034 	ldrsh.w	ip, [r4, #52]	@ 0x34
 801496a:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 801496e:	f894 e038 	ldrb.w	lr, [r4, #56]	@ 0x38
 8014972:	f894 2039 	ldrb.w	r2, [r4, #57]	@ 0x39
 8014976:	785b      	ldrb	r3, [r3, #1]
 8014978:	f894 7037 	ldrb.w	r7, [r4, #55]	@ 0x37
 801497c:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8014980:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8014982:	9609      	str	r6, [sp, #36]	@ 0x24
 8014984:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8014988:	4b1f      	ldr	r3, [pc, #124]	@ (8014a08 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x128>)
 801498a:	f88d 0028 	strb.w	r0, [sp, #40]	@ 0x28
 801498e:	681b      	ldr	r3, [r3, #0]
 8014990:	f88d e02a 	strb.w	lr, [sp, #42]	@ 0x2a
 8014994:	910b      	str	r1, [sp, #44]	@ 0x2c
 8014996:	f8ad c030 	strh.w	ip, [sp, #48]	@ 0x30
 801499a:	f88d 8032 	strb.w	r8, [sp, #50]	@ 0x32
 801499e:	f88d 7033 	strb.w	r7, [sp, #51]	@ 0x33
 80149a2:	f88d 2034 	strb.w	r2, [sp, #52]	@ 0x34
 80149a6:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 80149aa:	b10a      	cbz	r2, 80149b0 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xd0>
 80149ac:	6cde      	ldr	r6, [r3, #76]	@ 0x4c
 80149ae:	b906      	cbnz	r6, 80149b2 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xd2>
 80149b0:	689e      	ldr	r6, [r3, #8]
 80149b2:	af07      	add	r7, sp, #28
 80149b4:	4621      	mov	r1, r4
 80149b6:	4638      	mov	r0, r7
 80149b8:	f004 fbca 	bl	8019150 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80149bc:	8da1      	ldrh	r1, [r4, #44]	@ 0x2c
 80149be:	6828      	ldr	r0, [r5, #0]
 80149c0:	f7ef fde8 	bl	8004594 <_ZNK8touchgfx5Texts7getTextEt>
 80149c4:	6823      	ldr	r3, [r4, #0]
 80149c6:	4605      	mov	r5, r0
 80149c8:	4620      	mov	r0, r4
 80149ca:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80149cc:	4798      	blx	r3
 80149ce:	6823      	ldr	r3, [r4, #0]
 80149d0:	4680      	mov	r8, r0
 80149d2:	4620      	mov	r0, r4
 80149d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80149d8:	4798      	blx	r3
 80149da:	ab09      	add	r3, sp, #36	@ 0x24
 80149dc:	9501      	str	r5, [sp, #4]
 80149de:	9300      	str	r3, [sp, #0]
 80149e0:	ab05      	add	r3, sp, #20
 80149e2:	e9cd 8002 	strd	r8, r0, [sp, #8]
 80149e6:	4630      	mov	r0, r6
 80149e8:	e897 0006 	ldmia.w	r7, {r1, r2}
 80149ec:	f7ef fd84 	bl	80044f8 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 80149f0:	b00e      	add	sp, #56	@ 0x38
 80149f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80149f6:	bf00      	nop
 80149f8:	24028e7c 	.word	0x24028e7c
 80149fc:	24028e84 	.word	0x24028e84
 8014a00:	24028e78 	.word	0x24028e78
 8014a04:	24028e80 	.word	0x24028e80
 8014a08:	24028e20 	.word	0x24028e20

08014a0c <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>:
 8014a0c:	b538      	push	{r3, r4, r5, lr}
 8014a0e:	4b0e      	ldr	r3, [pc, #56]	@ (8014a48 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x3c>)
 8014a10:	4604      	mov	r4, r0
 8014a12:	8d82      	ldrh	r2, [r0, #44]	@ 0x2c
 8014a14:	881b      	ldrh	r3, [r3, #0]
 8014a16:	429a      	cmp	r2, r3
 8014a18:	d214      	bcs.n	8014a44 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x38>
 8014a1a:	6803      	ldr	r3, [r0, #0]
 8014a1c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8014a1e:	4798      	blx	r3
 8014a20:	6823      	ldr	r3, [r4, #0]
 8014a22:	4605      	mov	r5, r0
 8014a24:	4620      	mov	r0, r4
 8014a26:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8014a28:	4798      	blx	r3
 8014a2a:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 8014a2e:	b22d      	sxth	r5, r5
 8014a30:	4601      	mov	r1, r0
 8014a32:	f013 0ffd 	tst.w	r3, #253	@ 0xfd
 8014a36:	bf06      	itte	eq
 8014a38:	4602      	moveq	r2, r0
 8014a3a:	4629      	moveq	r1, r5
 8014a3c:	462a      	movne	r2, r5
 8014a3e:	4620      	mov	r0, r4
 8014a40:	f7fa fe72 	bl	800f728 <_ZN8touchgfx8Drawable14setWidthHeightEss>
 8014a44:	bd38      	pop	{r3, r4, r5, pc}
 8014a46:	bf00      	nop
 8014a48:	24028e7c 	.word	0x24028e7c

08014a4c <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>:
 8014a4c:	b530      	push	{r4, r5, lr}
 8014a4e:	888b      	ldrh	r3, [r1, #4]
 8014a50:	b085      	sub	sp, #20
 8014a52:	4604      	mov	r4, r0
 8014a54:	8583      	strh	r3, [r0, #44]	@ 0x2c
 8014a56:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
 8014a5a:	b923      	cbnz	r3, 8014a66 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE+0x1a>
 8014a5c:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 8014a60:	b90b      	cbnz	r3, 8014a66 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE+0x1a>
 8014a62:	f7ff ffd3 	bl	8014a0c <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
 8014a66:	6823      	ldr	r3, [r4, #0]
 8014a68:	466d      	mov	r5, sp
 8014a6a:	4621      	mov	r1, r4
 8014a6c:	343c      	adds	r4, #60	@ 0x3c
 8014a6e:	4628      	mov	r0, r5
 8014a70:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8014a74:	4798      	blx	r3
 8014a76:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8014a7a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8014a7e:	b005      	add	sp, #20
 8014a80:	bd30      	pop	{r4, r5, pc}

08014a82 <_ZNK8touchgfx3Box12getSolidRectEv>:
 8014a82:	2300      	movs	r3, #0
 8014a84:	8083      	strh	r3, [r0, #4]
 8014a86:	80c3      	strh	r3, [r0, #6]
 8014a88:	8003      	strh	r3, [r0, #0]
 8014a8a:	8043      	strh	r3, [r0, #2]
 8014a8c:	f891 3026 	ldrb.w	r3, [r1, #38]	@ 0x26
 8014a90:	2bff      	cmp	r3, #255	@ 0xff
 8014a92:	bf01      	itttt	eq
 8014a94:	890b      	ldrheq	r3, [r1, #8]
 8014a96:	8083      	strheq	r3, [r0, #4]
 8014a98:	894b      	ldrheq	r3, [r1, #10]
 8014a9a:	80c3      	strheq	r3, [r0, #6]
 8014a9c:	4770      	bx	lr
	...

08014aa0 <_ZNK8touchgfx3Box4drawERKNS_4RectE>:
 8014aa0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8014aa2:	4604      	mov	r4, r0
 8014aa4:	466b      	mov	r3, sp
 8014aa6:	6808      	ldr	r0, [r1, #0]
 8014aa8:	6849      	ldr	r1, [r1, #4]
 8014aaa:	c303      	stmia	r3!, {r0, r1}
 8014aac:	6823      	ldr	r3, [r4, #0]
 8014aae:	4669      	mov	r1, sp
 8014ab0:	4620      	mov	r0, r4
 8014ab2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014ab4:	4798      	blx	r3
 8014ab6:	4b08      	ldr	r3, [pc, #32]	@ (8014ad8 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x38>)
 8014ab8:	681b      	ldr	r3, [r3, #0]
 8014aba:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 8014abe:	b10a      	cbz	r2, 8014ac4 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x24>
 8014ac0:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8014ac2:	b900      	cbnz	r0, 8014ac6 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x26>
 8014ac4:	6898      	ldr	r0, [r3, #8]
 8014ac6:	6803      	ldr	r3, [r0, #0]
 8014ac8:	4669      	mov	r1, sp
 8014aca:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8014acc:	6a1d      	ldr	r5, [r3, #32]
 8014ace:	f894 3026 	ldrb.w	r3, [r4, #38]	@ 0x26
 8014ad2:	47a8      	blx	r5
 8014ad4:	b003      	add	sp, #12
 8014ad6:	bd30      	pop	{r4, r5, pc}
 8014ad8:	24028e20 	.word	0x24028e20

08014adc <_ZN8touchgfx3BoxD1Ev>:
 8014adc:	4770      	bx	lr

08014ade <_ZN8touchgfx3BoxD0Ev>:
 8014ade:	b510      	push	{r4, lr}
 8014ae0:	4604      	mov	r4, r0
 8014ae2:	212c      	movs	r1, #44	@ 0x2c
 8014ae4:	f012 fcd3 	bl	802748e <_ZdlPvj>
 8014ae8:	4620      	mov	r0, r4
 8014aea:	bd10      	pop	{r4, pc}

08014aec <_ZNK8touchgfx3Box17invalidateContentEv>:
 8014aec:	f890 2026 	ldrb.w	r2, [r0, #38]	@ 0x26
 8014af0:	b12a      	cbz	r2, 8014afe <_ZNK8touchgfx3Box17invalidateContentEv+0x12>
 8014af2:	f890 2025 	ldrb.w	r2, [r0, #37]	@ 0x25
 8014af6:	b112      	cbz	r2, 8014afe <_ZNK8touchgfx3Box17invalidateContentEv+0x12>
 8014af8:	6803      	ldr	r3, [r0, #0]
 8014afa:	695b      	ldr	r3, [r3, #20]
 8014afc:	4718      	bx	r3
 8014afe:	4770      	bx	lr

08014b00 <_ZN8touchgfx10TiledImage9setOffsetEss>:
 8014b00:	b570      	push	{r4, r5, r6, lr}
 8014b02:	6803      	ldr	r3, [r0, #0]
 8014b04:	4604      	mov	r4, r0
 8014b06:	4615      	mov	r5, r2
 8014b08:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8014b0a:	4798      	blx	r3
 8014b0c:	6823      	ldr	r3, [r4, #0]
 8014b0e:	4629      	mov	r1, r5
 8014b10:	4620      	mov	r0, r4
 8014b12:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8014b14:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014b18:	4718      	bx	r3

08014b1a <_ZN8touchgfx10TiledImage9getOffsetERsS1_>:
 8014b1a:	b570      	push	{r4, r5, r6, lr}
 8014b1c:	6803      	ldr	r3, [r0, #0]
 8014b1e:	4604      	mov	r4, r0
 8014b20:	460e      	mov	r6, r1
 8014b22:	4615      	mov	r5, r2
 8014b24:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8014b26:	4798      	blx	r3
 8014b28:	8030      	strh	r0, [r6, #0]
 8014b2a:	6823      	ldr	r3, [r4, #0]
 8014b2c:	4620      	mov	r0, r4
 8014b2e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8014b30:	4798      	blx	r3
 8014b32:	8028      	strh	r0, [r5, #0]
 8014b34:	bd70      	pop	{r4, r5, r6, pc}

08014b36 <_ZN8touchgfx10TiledImage10getXOffsetEv>:
 8014b36:	f9b0 002a 	ldrsh.w	r0, [r0, #42]	@ 0x2a
 8014b3a:	4770      	bx	lr

08014b3c <_ZN8touchgfx10TiledImage10getYOffsetEv>:
 8014b3c:	f9b0 002c 	ldrsh.w	r0, [r0, #44]	@ 0x2c
 8014b40:	4770      	bx	lr

08014b42 <_ZN8touchgfx10TiledImageD1Ev>:
 8014b42:	4770      	bx	lr

08014b44 <_ZN8touchgfx10TiledImage9setBitmapERKNS_6BitmapE>:
 8014b44:	b510      	push	{r4, lr}
 8014b46:	4604      	mov	r4, r0
 8014b48:	f000 fc7b 	bl	8015442 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 8014b4c:	6823      	ldr	r3, [r4, #0]
 8014b4e:	4620      	mov	r0, r4
 8014b50:	f9b4 202c 	ldrsh.w	r2, [r4, #44]	@ 0x2c
 8014b54:	f9b4 102a 	ldrsh.w	r1, [r4, #42]	@ 0x2a
 8014b58:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8014b5a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014b5e:	4718      	bx	r3

08014b60 <_ZN8touchgfx10TiledImage10setXOffsetEs>:
 8014b60:	b538      	push	{r3, r4, r5, lr}
 8014b62:	f100 0526 	add.w	r5, r0, #38	@ 0x26
 8014b66:	4604      	mov	r4, r0
 8014b68:	8541      	strh	r1, [r0, #42]	@ 0x2a
 8014b6a:	4628      	mov	r0, r5
 8014b6c:	f006 ffaa 	bl	801bac4 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8014b70:	b188      	cbz	r0, 8014b96 <_ZN8touchgfx10TiledImage10setXOffsetEs+0x36>
 8014b72:	4628      	mov	r0, r5
 8014b74:	f006 ffa6 	bl	801bac4 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8014b78:	f9b4 202a 	ldrsh.w	r2, [r4, #42]	@ 0x2a
 8014b7c:	fb92 f3f0 	sdiv	r3, r2, r0
 8014b80:	fb03 2010 	mls	r0, r3, r0, r2
 8014b84:	2800      	cmp	r0, #0
 8014b86:	8560      	strh	r0, [r4, #42]	@ 0x2a
 8014b88:	da05      	bge.n	8014b96 <_ZN8touchgfx10TiledImage10setXOffsetEs+0x36>
 8014b8a:	4628      	mov	r0, r5
 8014b8c:	f006 ff9a 	bl	801bac4 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8014b90:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8014b92:	4418      	add	r0, r3
 8014b94:	8560      	strh	r0, [r4, #42]	@ 0x2a
 8014b96:	bd38      	pop	{r3, r4, r5, pc}

08014b98 <_ZN8touchgfx10TiledImage10setYOffsetEs>:
 8014b98:	b538      	push	{r3, r4, r5, lr}
 8014b9a:	f100 0526 	add.w	r5, r0, #38	@ 0x26
 8014b9e:	4604      	mov	r4, r0
 8014ba0:	8581      	strh	r1, [r0, #44]	@ 0x2c
 8014ba2:	4628      	mov	r0, r5
 8014ba4:	f006 ffc2 	bl	801bb2c <_ZNK8touchgfx6Bitmap9getHeightEv>
 8014ba8:	b188      	cbz	r0, 8014bce <_ZN8touchgfx10TiledImage10setYOffsetEs+0x36>
 8014baa:	4628      	mov	r0, r5
 8014bac:	f006 ffbe 	bl	801bb2c <_ZNK8touchgfx6Bitmap9getHeightEv>
 8014bb0:	f9b4 202c 	ldrsh.w	r2, [r4, #44]	@ 0x2c
 8014bb4:	fb92 f3f0 	sdiv	r3, r2, r0
 8014bb8:	fb03 2010 	mls	r0, r3, r0, r2
 8014bbc:	2800      	cmp	r0, #0
 8014bbe:	85a0      	strh	r0, [r4, #44]	@ 0x2c
 8014bc0:	da05      	bge.n	8014bce <_ZN8touchgfx10TiledImage10setYOffsetEs+0x36>
 8014bc2:	4628      	mov	r0, r5
 8014bc4:	f006 ffb2 	bl	801bb2c <_ZNK8touchgfx6Bitmap9getHeightEv>
 8014bc8:	8da3      	ldrh	r3, [r4, #44]	@ 0x2c
 8014bca:	4418      	add	r0, r3
 8014bcc:	85a0      	strh	r0, [r4, #44]	@ 0x2c
 8014bce:	bd38      	pop	{r3, r4, r5, pc}

08014bd0 <_ZN8touchgfx10TiledImageD0Ev>:
 8014bd0:	b510      	push	{r4, lr}
 8014bd2:	4604      	mov	r4, r0
 8014bd4:	2130      	movs	r1, #48	@ 0x30
 8014bd6:	f012 fc5a 	bl	802748e <_ZdlPvj>
 8014bda:	4620      	mov	r0, r4
 8014bdc:	bd10      	pop	{r4, pc}
	...

08014be0 <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE>:
 8014be0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014be4:	f100 0b26 	add.w	fp, r0, #38	@ 0x26
 8014be8:	b093      	sub	sp, #76	@ 0x4c
 8014bea:	4607      	mov	r7, r0
 8014bec:	460e      	mov	r6, r1
 8014bee:	4658      	mov	r0, fp
 8014bf0:	f006 ff68 	bl	801bac4 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8014bf4:	4681      	mov	r9, r0
 8014bf6:	4658      	mov	r0, fp
 8014bf8:	f006 ff98 	bl	801bb2c <_ZNK8touchgfx6Bitmap9getHeightEv>
 8014bfc:	4605      	mov	r5, r0
 8014bfe:	f1b9 0f00 	cmp.w	r9, #0
 8014c02:	f000 80c4 	beq.w	8014d8e <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x1ae>
 8014c06:	2800      	cmp	r0, #0
 8014c08:	f000 80c1 	beq.w	8014d8e <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x1ae>
 8014c0c:	2300      	movs	r3, #0
 8014c0e:	a90e      	add	r1, sp, #56	@ 0x38
 8014c10:	4638      	mov	r0, r7
 8014c12:	fa1f f889 	uxth.w	r8, r9
 8014c16:	e9cd 330e 	strd	r3, r3, [sp, #56]	@ 0x38
 8014c1a:	683b      	ldr	r3, [r7, #0]
 8014c1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014c1e:	4798      	blx	r3
 8014c20:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	@ 0x2a
 8014c24:	f9b6 3000 	ldrsh.w	r3, [r6]
 8014c28:	88b1      	ldrh	r1, [r6, #4]
 8014c2a:	189c      	adds	r4, r3, r2
 8014c2c:	440b      	add	r3, r1
 8014c2e:	f9b7 102c 	ldrsh.w	r1, [r7, #44]	@ 0x2c
 8014c32:	fa02 f383 	sxtah	r3, r2, r3
 8014c36:	3b01      	subs	r3, #1
 8014c38:	fb93 f3f9 	sdiv	r3, r3, r9
 8014c3c:	fb94 f4f9 	sdiv	r4, r4, r9
 8014c40:	fb13 f308 	smulbb	r3, r3, r8
 8014c44:	fb14 f408 	smulbb	r4, r4, r8
 8014c48:	b21b      	sxth	r3, r3
 8014c4a:	1aa4      	subs	r4, r4, r2
 8014c4c:	b2aa      	uxth	r2, r5
 8014c4e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8014c50:	f9b6 3002 	ldrsh.w	r3, [r6, #2]
 8014c54:	b2a4      	uxth	r4, r4
 8014c56:	9205      	str	r2, [sp, #20]
 8014c58:	185a      	adds	r2, r3, r1
 8014c5a:	9805      	ldr	r0, [sp, #20]
 8014c5c:	fb92 f2f5 	sdiv	r2, r2, r5
 8014c60:	fb12 f200 	smulbb	r2, r2, r0
 8014c64:	1a52      	subs	r2, r2, r1
 8014c66:	b212      	sxth	r2, r2
 8014c68:	920c      	str	r2, [sp, #48]	@ 0x30
 8014c6a:	88f2      	ldrh	r2, [r6, #6]
 8014c6c:	4413      	add	r3, r2
 8014c6e:	fa01 f383 	sxtah	r3, r1, r3
 8014c72:	3b01      	subs	r3, #1
 8014c74:	fb93 f3f5 	sdiv	r3, r3, r5
 8014c78:	fb13 f300 	smulbb	r3, r3, r0
 8014c7c:	eb08 0504 	add.w	r5, r8, r4
 8014c80:	b21b      	sxth	r3, r3
 8014c82:	930d      	str	r3, [sp, #52]	@ 0x34
 8014c84:	b223      	sxth	r3, r4
 8014c86:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8014c88:	b2ad      	uxth	r5, r5
 8014c8a:	4293      	cmp	r3, r2
 8014c8c:	9306      	str	r3, [sp, #24]
 8014c8e:	dc7e      	bgt.n	8014d8e <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x1ae>
 8014c90:	b22b      	sxth	r3, r5
 8014c92:	f8dd 9030 	ldr.w	r9, [sp, #48]	@ 0x30
 8014c96:	930a      	str	r3, [sp, #40]	@ 0x28
 8014c98:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8014c9a:	4599      	cmp	r9, r3
 8014c9c:	dd03      	ble.n	8014ca6 <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0xc6>
 8014c9e:	4444      	add	r4, r8
 8014ca0:	4445      	add	r5, r8
 8014ca2:	b2a4      	uxth	r4, r4
 8014ca4:	e7ee      	b.n	8014c84 <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0xa4>
 8014ca6:	f9b6 c000 	ldrsh.w	ip, [r6]
 8014caa:	88b2      	ldrh	r2, [r6, #4]
 8014cac:	9806      	ldr	r0, [sp, #24]
 8014cae:	4462      	add	r2, ip
 8014cb0:	9905      	ldr	r1, [sp, #20]
 8014cb2:	b292      	uxth	r2, r2
 8014cb4:	b213      	sxth	r3, r2
 8014cb6:	9308      	str	r3, [sp, #32]
 8014cb8:	fa1f f389 	uxth.w	r3, r9
 8014cbc:	4419      	add	r1, r3
 8014cbe:	9307      	str	r3, [sp, #28]
 8014cc0:	4603      	mov	r3, r0
 8014cc2:	9808      	ldr	r0, [sp, #32]
 8014cc4:	b289      	uxth	r1, r1
 8014cc6:	4283      	cmp	r3, r0
 8014cc8:	fa0f fa81 	sxth.w	sl, r1
 8014ccc:	da5b      	bge.n	8014d86 <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x1a6>
 8014cce:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8014cd0:	4584      	cmp	ip, r0
 8014cd2:	da58      	bge.n	8014d86 <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x1a6>
 8014cd4:	f9b6 0002 	ldrsh.w	r0, [r6, #2]
 8014cd8:	f8b6 e006 	ldrh.w	lr, [r6, #6]
 8014cdc:	4486      	add	lr, r0
 8014cde:	fa1f fe8e 	uxth.w	lr, lr
 8014ce2:	fa0f f38e 	sxth.w	r3, lr
 8014ce6:	4599      	cmp	r9, r3
 8014ce8:	9309      	str	r3, [sp, #36]	@ 0x24
 8014cea:	da4c      	bge.n	8014d86 <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x1a6>
 8014cec:	4550      	cmp	r0, sl
 8014cee:	da4a      	bge.n	8014d86 <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x1a6>
 8014cf0:	9b06      	ldr	r3, [sp, #24]
 8014cf2:	459c      	cmp	ip, r3
 8014cf4:	bfb8      	it	lt
 8014cf6:	469c      	movlt	ip, r3
 8014cf8:	4548      	cmp	r0, r9
 8014cfa:	9b08      	ldr	r3, [sp, #32]
 8014cfc:	bfb8      	it	lt
 8014cfe:	4648      	movlt	r0, r9
 8014d00:	f8ad c040 	strh.w	ip, [sp, #64]	@ 0x40
 8014d04:	4699      	mov	r9, r3
 8014d06:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8014d08:	f8ad 0042 	strh.w	r0, [sp, #66]	@ 0x42
 8014d0c:	4599      	cmp	r9, r3
 8014d0e:	bfc8      	it	gt
 8014d10:	462a      	movgt	r2, r5
 8014d12:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014d14:	4553      	cmp	r3, sl
 8014d16:	bfd8      	it	le
 8014d18:	4671      	movle	r1, lr
 8014d1a:	eba2 020c 	sub.w	r2, r2, ip
 8014d1e:	1a09      	subs	r1, r1, r0
 8014d20:	f8ad 2044 	strh.w	r2, [sp, #68]	@ 0x44
 8014d24:	f8ad 1046 	strh.w	r1, [sp, #70]	@ 0x46
 8014d28:	f8bd 2040 	ldrh.w	r2, [sp, #64]	@ 0x40
 8014d2c:	9b07      	ldr	r3, [sp, #28]
 8014d2e:	1b12      	subs	r2, r2, r4
 8014d30:	f8ad 2040 	strh.w	r2, [sp, #64]	@ 0x40
 8014d34:	f8bd 2042 	ldrh.w	r2, [sp, #66]	@ 0x42
 8014d38:	1ad2      	subs	r2, r2, r3
 8014d3a:	4b16      	ldr	r3, [pc, #88]	@ (8014d94 <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x1b4>)
 8014d3c:	f8ad 2042 	strh.w	r2, [sp, #66]	@ 0x42
 8014d40:	681a      	ldr	r2, [r3, #0]
 8014d42:	f892 1058 	ldrb.w	r1, [r2, #88]	@ 0x58
 8014d46:	b109      	cbz	r1, 8014d4c <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x16c>
 8014d48:	6cd0      	ldr	r0, [r2, #76]	@ 0x4c
 8014d4a:	b900      	cbnz	r0, 8014d4e <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x16e>
 8014d4c:	6890      	ldr	r0, [r2, #8]
 8014d4e:	f8bd 203a 	ldrh.w	r2, [sp, #58]	@ 0x3a
 8014d52:	f04f 0c01 	mov.w	ip, #1
 8014d56:	9b07      	ldr	r3, [sp, #28]
 8014d58:	6801      	ldr	r1, [r0, #0]
 8014d5a:	4413      	add	r3, r2
 8014d5c:	f8cd c008 	str.w	ip, [sp, #8]
 8014d60:	f8bd 2038 	ldrh.w	r2, [sp, #56]	@ 0x38
 8014d64:	f897 c028 	ldrb.w	ip, [r7, #40]	@ 0x28
 8014d68:	b21b      	sxth	r3, r3
 8014d6a:	4422      	add	r2, r4
 8014d6c:	f8cd c004 	str.w	ip, [sp, #4]
 8014d70:	f10d 0c40 	add.w	ip, sp, #64	@ 0x40
 8014d74:	b212      	sxth	r2, r2
 8014d76:	f8cd c000 	str.w	ip, [sp]
 8014d7a:	f8d1 9008 	ldr.w	r9, [r1, #8]
 8014d7e:	4659      	mov	r1, fp
 8014d80:	47c8      	blx	r9
 8014d82:	46d1      	mov	r9, sl
 8014d84:	e788      	b.n	8014c98 <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0xb8>
 8014d86:	2300      	movs	r3, #0
 8014d88:	e9cd 3310 	strd	r3, r3, [sp, #64]	@ 0x40
 8014d8c:	e7cc      	b.n	8014d28 <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x148>
 8014d8e:	b013      	add	sp, #76	@ 0x4c
 8014d90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014d94:	24028e20 	.word	0x24028e20

08014d98 <_ZNK8touchgfx10TiledImage12getSolidRectEv>:
 8014d98:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014d9c:	f891 3028 	ldrb.w	r3, [r1, #40]	@ 0x28
 8014da0:	4606      	mov	r6, r0
 8014da2:	4689      	mov	r9, r1
 8014da4:	2bff      	cmp	r3, #255	@ 0xff
 8014da6:	d008      	beq.n	8014dba <_ZNK8touchgfx10TiledImage12getSolidRectEv+0x22>
 8014da8:	2300      	movs	r3, #0
 8014daa:	8003      	strh	r3, [r0, #0]
 8014dac:	8043      	strh	r3, [r0, #2]
 8014dae:	8083      	strh	r3, [r0, #4]
 8014db0:	4630      	mov	r0, r6
 8014db2:	80f3      	strh	r3, [r6, #6]
 8014db4:	b003      	add	sp, #12
 8014db6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014dba:	f101 0b26 	add.w	fp, r1, #38	@ 0x26
 8014dbe:	4668      	mov	r0, sp
 8014dc0:	4659      	mov	r1, fp
 8014dc2:	f006 fee7 	bl	801bb94 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 8014dc6:	f9bd 4004 	ldrsh.w	r4, [sp, #4]
 8014dca:	4658      	mov	r0, fp
 8014dcc:	f9bd 7000 	ldrsh.w	r7, [sp]
 8014dd0:	f9bd a002 	ldrsh.w	sl, [sp, #2]
 8014dd4:	f9bd 8006 	ldrsh.w	r8, [sp, #6]
 8014dd8:	f006 fe74 	bl	801bac4 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8014ddc:	4284      	cmp	r4, r0
 8014dde:	d10d      	bne.n	8014dfc <_ZNK8touchgfx10TiledImage12getSolidRectEv+0x64>
 8014de0:	f9b9 5008 	ldrsh.w	r5, [r9, #8]
 8014de4:	4658      	mov	r0, fp
 8014de6:	f006 fea1 	bl	801bb2c <_ZNK8touchgfx6Bitmap9getHeightEv>
 8014dea:	4580      	cmp	r8, r0
 8014dec:	d12a      	bne.n	8014e44 <_ZNK8touchgfx10TiledImage12getSolidRectEv+0xac>
 8014dee:	f9b9 300a 	ldrsh.w	r3, [r9, #10]
 8014df2:	8037      	strh	r7, [r6, #0]
 8014df4:	f8a6 a002 	strh.w	sl, [r6, #2]
 8014df8:	80b5      	strh	r5, [r6, #4]
 8014dfa:	e7d9      	b.n	8014db0 <_ZNK8touchgfx10TiledImage12getSolidRectEv+0x18>
 8014dfc:	f8b9 502a 	ldrh.w	r5, [r9, #42]	@ 0x2a
 8014e00:	4658      	mov	r0, fp
 8014e02:	f006 fe5f 	bl	801bac4 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8014e06:	f9b9 2008 	ldrsh.w	r2, [r9, #8]
 8014e0a:	1b7f      	subs	r7, r7, r5
 8014e0c:	b2a3      	uxth	r3, r4
 8014e0e:	b2bd      	uxth	r5, r7
 8014e10:	b22f      	sxth	r7, r5
 8014e12:	4428      	add	r0, r5
 8014e14:	2f00      	cmp	r7, #0
 8014e16:	b280      	uxth	r0, r0
 8014e18:	bfb8      	it	lt
 8014e1a:	18ed      	addlt	r5, r5, r3
 8014e1c:	4403      	add	r3, r0
 8014e1e:	bfac      	ite	ge
 8014e20:	4625      	movge	r5, r4
 8014e22:	2700      	movlt	r7, #0
 8014e24:	b29b      	uxth	r3, r3
 8014e26:	bfb8      	it	lt
 8014e28:	b22d      	sxthlt	r5, r5
 8014e2a:	b219      	sxth	r1, r3
 8014e2c:	bfb8      	it	lt
 8014e2e:	ea25 75e5 	biclt.w	r5, r5, r5, asr #31
 8014e32:	4291      	cmp	r1, r2
 8014e34:	bfc4      	itt	gt
 8014e36:	1a9c      	subgt	r4, r3, r2
 8014e38:	b224      	sxthgt	r4, r4
 8014e3a:	42ac      	cmp	r4, r5
 8014e3c:	bfc4      	itt	gt
 8014e3e:	b207      	sxthgt	r7, r0
 8014e40:	4625      	movgt	r5, r4
 8014e42:	e7cf      	b.n	8014de4 <_ZNK8touchgfx10TiledImage12getSolidRectEv+0x4c>
 8014e44:	f8b9 402c 	ldrh.w	r4, [r9, #44]	@ 0x2c
 8014e48:	4658      	mov	r0, fp
 8014e4a:	f006 fe6f 	bl	801bb2c <_ZNK8touchgfx6Bitmap9getHeightEv>
 8014e4e:	f9b9 100a 	ldrsh.w	r1, [r9, #10]
 8014e52:	ebaa 0404 	sub.w	r4, sl, r4
 8014e56:	fa1f f288 	uxth.w	r2, r8
 8014e5a:	b2a4      	uxth	r4, r4
 8014e5c:	fa0f fa84 	sxth.w	sl, r4
 8014e60:	4420      	add	r0, r4
 8014e62:	f1ba 0f00 	cmp.w	sl, #0
 8014e66:	b280      	uxth	r0, r0
 8014e68:	bfb8      	it	lt
 8014e6a:	18a3      	addlt	r3, r4, r2
 8014e6c:	4402      	add	r2, r0
 8014e6e:	bfac      	ite	ge
 8014e70:	4643      	movge	r3, r8
 8014e72:	f04f 0a00 	movlt.w	sl, #0
 8014e76:	b292      	uxth	r2, r2
 8014e78:	bfb8      	it	lt
 8014e7a:	b21b      	sxthlt	r3, r3
 8014e7c:	b214      	sxth	r4, r2
 8014e7e:	bfb8      	it	lt
 8014e80:	ea23 73e3 	biclt.w	r3, r3, r3, asr #31
 8014e84:	428c      	cmp	r4, r1
 8014e86:	bfc4      	itt	gt
 8014e88:	eba2 0801 	subgt.w	r8, r2, r1
 8014e8c:	fa0f f888 	sxthgt.w	r8, r8
 8014e90:	4598      	cmp	r8, r3
 8014e92:	bfc4      	itt	gt
 8014e94:	fa0f fa80 	sxthgt.w	sl, r0
 8014e98:	4643      	movgt	r3, r8
 8014e9a:	e7aa      	b.n	8014df2 <_ZNK8touchgfx10TiledImage12getSolidRectEv+0x5a>

08014e9c <_ZN8touchgfx5Gauge8setWidthEs>:
 8014e9c:	8101      	strh	r1, [r0, #8]
 8014e9e:	f8a0 10bc 	strh.w	r1, [r0, #188]	@ 0xbc
 8014ea2:	f8a0 1160 	strh.w	r1, [r0, #352]	@ 0x160
 8014ea6:	4770      	bx	lr

08014ea8 <_ZN8touchgfx5Gauge9setHeightEs>:
 8014ea8:	8141      	strh	r1, [r0, #10]
 8014eaa:	f8a0 10be 	strh.w	r1, [r0, #190]	@ 0xbe
 8014eae:	f8a0 1162 	strh.w	r1, [r0, #354]	@ 0x162
 8014eb2:	4770      	bx	lr

08014eb4 <_ZNK8touchgfx5Gauge13getStartAngleEv>:
 8014eb4:	f8d0 0148 	ldr.w	r0, [r0, #328]	@ 0x148
 8014eb8:	4770      	bx	lr

08014eba <_ZNK8touchgfx5Gauge11getEndAngleEv>:
 8014eba:	f8d0 014c 	ldr.w	r0, [r0, #332]	@ 0x14c
 8014ebe:	4770      	bx	lr

08014ec0 <_ZN8touchgfx5Gauge28setProgressIndicatorPositionEssss>:
 8014ec0:	4770      	bx	lr

08014ec2 <_ZN8touchgfx5GaugeD1Ev>:
 8014ec2:	4770      	bx	lr

08014ec4 <_ZN8touchgfx5Gauge8setAlphaEh>:
 8014ec4:	b538      	push	{r3, r4, r5, lr}
 8014ec6:	4604      	mov	r4, r0
 8014ec8:	460d      	mov	r5, r1
 8014eca:	f7fa fb45 	bl	800f558 <_ZN8touchgfx25AbstractProgressIndicator8setAlphaEh>
 8014ece:	f884 50dc 	strb.w	r5, [r4, #220]	@ 0xdc
 8014ed2:	f884 517e 	strb.w	r5, [r4, #382]	@ 0x17e
 8014ed6:	bd38      	pop	{r3, r4, r5, pc}

08014ed8 <_ZN8touchgfx5GaugeD0Ev>:
 8014ed8:	b510      	push	{r4, lr}
 8014eda:	4604      	mov	r4, r0
 8014edc:	f44f 71d0 	mov.w	r1, #416	@ 0x1a0
 8014ee0:	f012 fad5 	bl	802748e <_ZdlPvj>
 8014ee4:	4620      	mov	r0, r4
 8014ee6:	bd10      	pop	{r4, pc}

08014ee8 <_ZN8touchgfx5GaugeC1Ev>:
 8014ee8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8014eea:	4604      	mov	r4, r0
 8014eec:	f7fa fc56 	bl	800f79c <_ZN8touchgfx25AbstractProgressIndicatorC1Ev>
 8014ef0:	4b18      	ldr	r3, [pc, #96]	@ (8014f54 <_ZN8touchgfx5GaugeC1Ev+0x6c>)
 8014ef2:	a902      	add	r1, sp, #8
 8014ef4:	4626      	mov	r6, r4
 8014ef6:	2500      	movs	r5, #0
 8014ef8:	f504 77ac 	add.w	r7, r4, #344	@ 0x158
 8014efc:	f846 3bb4 	str.w	r3, [r6], #180
 8014f00:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8014f04:	4630      	mov	r0, r6
 8014f06:	f821 3d04 	strh.w	r3, [r1, #-4]!
 8014f0a:	f011 fcc1 	bl	8026890 <_ZN8touchgfx13TextureMapperC1ERKNS_6BitmapE>
 8014f0e:	2301      	movs	r3, #1
 8014f10:	f8c4 5148 	str.w	r5, [r4, #328]	@ 0x148
 8014f14:	4638      	mov	r0, r7
 8014f16:	f884 3144 	strb.w	r3, [r4, #324]	@ 0x144
 8014f1a:	f884 3145 	strb.w	r3, [r4, #325]	@ 0x145
 8014f1e:	f8c4 514c 	str.w	r5, [r4, #332]	@ 0x14c
 8014f22:	f8c4 5150 	str.w	r5, [r4, #336]	@ 0x150
 8014f26:	f8c4 5154 	str.w	r5, [r4, #340]	@ 0x154
 8014f2a:	f7fe fba9 	bl	8013680 <_ZN8touchgfx6CircleC1Ev>
 8014f2e:	f104 0158 	add.w	r1, r4, #88	@ 0x58
 8014f32:	4620      	mov	r0, r4
 8014f34:	f7fa fea0 	bl	800fc78 <_ZN8touchgfx9Container6removeERNS_8DrawableE>
 8014f38:	4639      	mov	r1, r7
 8014f3a:	4620      	mov	r0, r4
 8014f3c:	f7fa fe5b 	bl	800fbf6 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8014f40:	4620      	mov	r0, r4
 8014f42:	4631      	mov	r1, r6
 8014f44:	f7fa fe57 	bl	800fbf6 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8014f48:	4620      	mov	r0, r4
 8014f4a:	f884 517d 	strb.w	r5, [r4, #381]	@ 0x17d
 8014f4e:	b003      	add	sp, #12
 8014f50:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014f52:	bf00      	nop
 8014f54:	0802cf1c 	.word	0x0802cf1c

08014f58 <_ZN8touchgfx5Gauge19setBackgroundOffsetEss>:
 8014f58:	b508      	push	{r3, lr}
 8014f5a:	302c      	adds	r0, #44	@ 0x2c
 8014f5c:	f7ef f88d 	bl	800407a <_ZN8touchgfx8Drawable5setXYEss>
 8014f60:	bd08      	pop	{r3, pc}

08014f62 <_ZN8touchgfx5Gauge14setArcPositionEssss>:
 8014f62:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014f66:	f500 75ac 	add.w	r5, r0, #344	@ 0x158
 8014f6a:	4604      	mov	r4, r0
 8014f6c:	460e      	mov	r6, r1
 8014f6e:	4617      	mov	r7, r2
 8014f70:	4628      	mov	r0, r5
 8014f72:	4698      	mov	r8, r3
 8014f74:	f7ef f881 	bl	800407a <_ZN8touchgfx8Drawable5setXYEss>
 8014f78:	f8d4 3158 	ldr.w	r3, [r4, #344]	@ 0x158
 8014f7c:	4641      	mov	r1, r8
 8014f7e:	4628      	mov	r0, r5
 8014f80:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8014f82:	4790      	blx	r2
 8014f84:	f8d4 3158 	ldr.w	r3, [r4, #344]	@ 0x158
 8014f88:	f9bd 1018 	ldrsh.w	r1, [sp, #24]
 8014f8c:	4628      	mov	r0, r5
 8014f8e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8014f90:	4798      	blx	r3
 8014f92:	f9b4 2152 	ldrsh.w	r2, [r4, #338]	@ 0x152
 8014f96:	f9b4 1150 	ldrsh.w	r1, [r4, #336]	@ 0x150
 8014f9a:	1bd2      	subs	r2, r2, r7
 8014f9c:	1b89      	subs	r1, r1, r6
 8014f9e:	0152      	lsls	r2, r2, #5
 8014fa0:	0149      	lsls	r1, r1, #5
 8014fa2:	3210      	adds	r2, #16
 8014fa4:	3110      	adds	r1, #16
 8014fa6:	f8c4 2188 	str.w	r2, [r4, #392]	@ 0x188
 8014faa:	f8c4 1184 	str.w	r1, [r4, #388]	@ 0x184
 8014fae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08014fb2 <_ZN8touchgfx5Gauge33setMovingNeedleRenderingAlgorithmENS_13TextureMapper18RenderingAlgorithmE>:
 8014fb2:	f880 1144 	strb.w	r1, [r0, #324]	@ 0x144
 8014fb6:	4770      	bx	lr

08014fb8 <_ZN8touchgfx5Gauge33setSteadyNeedleRenderingAlgorithmENS_13TextureMapper18RenderingAlgorithmE>:
 8014fb8:	f880 1145 	strb.w	r1, [r0, #325]	@ 0x145
 8014fbc:	4770      	bx	lr

08014fbe <_ZN8touchgfx5Gauge13setArcVisibleEb>:
 8014fbe:	f880 117d 	strb.w	r1, [r0, #381]	@ 0x17d
 8014fc2:	4770      	bx	lr

08014fc4 <_ZN8touchgfx5Gauge6getArcEv>:
 8014fc4:	f500 70ac 	add.w	r0, r0, #344	@ 0x158
 8014fc8:	4770      	bx	lr
	...

08014fcc <_ZN8touchgfx5Gauge24setupNeedleTextureMapperEv>:
 8014fcc:	b538      	push	{r3, r4, r5, lr}
 8014fce:	8902      	ldrh	r2, [r0, #8]
 8014fd0:	f100 05b4 	add.w	r5, r0, #180	@ 0xb4
 8014fd4:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 8014fd8:	4604      	mov	r4, r0
 8014fda:	f8a0 20bc 	strh.w	r2, [r0, #188]	@ 0xbc
 8014fde:	2200      	movs	r2, #0
 8014fe0:	f8a0 30be 	strh.w	r3, [r0, #190]	@ 0xbe
 8014fe4:	4628      	mov	r0, r5
 8014fe6:	4611      	mov	r1, r2
 8014fe8:	f7ef f847 	bl	800407a <_ZN8touchgfx8Drawable5setXYEss>
 8014fec:	f9b4 2156 	ldrsh.w	r2, [r4, #342]	@ 0x156
 8014ff0:	f9b4 3152 	ldrsh.w	r3, [r4, #338]	@ 0x152
 8014ff4:	4628      	mov	r0, r5
 8014ff6:	1a9b      	subs	r3, r3, r2
 8014ff8:	f9b4 2154 	ldrsh.w	r2, [r4, #340]	@ 0x154
 8014ffc:	ee07 3a90 	vmov	s15, r3
 8015000:	f9b4 3150 	ldrsh.w	r3, [r4, #336]	@ 0x150
 8015004:	1a9b      	subs	r3, r3, r2
 8015006:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801500a:	ee07 3a10 	vmov	s14, r3
 801500e:	edc4 7a39 	vstr	s15, [r4, #228]	@ 0xe4
 8015012:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8015016:	ed84 7a38 	vstr	s14, [r4, #224]	@ 0xe0
 801501a:	f011 fc85 	bl	8026928 <_ZN8touchgfx13TextureMapper19applyTransformationEv>
 801501e:	4b16      	ldr	r3, [pc, #88]	@ (8015078 <_ZN8touchgfx5Gauge24setupNeedleTextureMapperEv+0xac>)
 8015020:	4628      	mov	r0, r5
 8015022:	f8c4 310c 	str.w	r3, [r4, #268]	@ 0x10c
 8015026:	f011 fc7f 	bl	8026928 <_ZN8touchgfx13TextureMapper19applyTransformationEv>
 801502a:	f9b4 3152 	ldrsh.w	r3, [r4, #338]	@ 0x152
 801502e:	f9b4 2150 	ldrsh.w	r2, [r4, #336]	@ 0x150
 8015032:	4628      	mov	r0, r5
 8015034:	ee07 3a90 	vmov	s15, r3
 8015038:	f8d4 310c 	ldr.w	r3, [r4, #268]	@ 0x10c
 801503c:	ee07 2a10 	vmov	s14, r2
 8015040:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8015044:	f8c4 3100 	str.w	r3, [r4, #256]	@ 0x100
 8015048:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801504c:	edc4 7a3f 	vstr	s15, [r4, #252]	@ 0xfc
 8015050:	ed84 7a3e 	vstr	s14, [r4, #248]	@ 0xf8
 8015054:	f011 fc68 	bl	8026928 <_ZN8touchgfx13TextureMapper19applyTransformationEv>
 8015058:	f8d4 30fc 	ldr.w	r3, [r4, #252]	@ 0xfc
 801505c:	f8d4 20f8 	ldr.w	r2, [r4, #248]	@ 0xf8
 8015060:	4628      	mov	r0, r5
 8015062:	f8c4 3108 	str.w	r3, [r4, #264]	@ 0x108
 8015066:	f8c4 2104 	str.w	r2, [r4, #260]	@ 0x104
 801506a:	f011 fc5d 	bl	8026928 <_ZN8touchgfx13TextureMapper19applyTransformationEv>
 801506e:	2301      	movs	r3, #1
 8015070:	f884 30dd 	strb.w	r3, [r4, #221]	@ 0xdd
 8015074:	bd38      	pop	{r3, r4, r5, pc}
 8015076:	bf00      	nop
 8015078:	43960000 	.word	0x43960000

0801507c <_ZN8touchgfx5Gauge9setNeedleEtss>:
 801507c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801507e:	4604      	mov	r4, r0
 8015080:	a802      	add	r0, sp, #8
 8015082:	4616      	mov	r6, r2
 8015084:	461d      	mov	r5, r3
 8015086:	f820 1d04 	strh.w	r1, [r0, #-4]!
 801508a:	4601      	mov	r1, r0
 801508c:	f104 00b4 	add.w	r0, r4, #180	@ 0xb4
 8015090:	f011 fda0 	bl	8026bd4 <_ZN8touchgfx13TextureMapper9setBitmapERKNS_6BitmapE>
 8015094:	4620      	mov	r0, r4
 8015096:	f8a4 6154 	strh.w	r6, [r4, #340]	@ 0x154
 801509a:	f8a4 5156 	strh.w	r5, [r4, #342]	@ 0x156
 801509e:	f7ff ff95 	bl	8014fcc <_ZN8touchgfx5Gauge24setupNeedleTextureMapperEv>
 80150a2:	b002      	add	sp, #8
 80150a4:	bd70      	pop	{r4, r5, r6, pc}

080150a6 <_ZN8touchgfx5Gauge9setCenterEii>:
 80150a6:	b570      	push	{r4, r5, r6, lr}
 80150a8:	4606      	mov	r6, r0
 80150aa:	460d      	mov	r5, r1
 80150ac:	4614      	mov	r4, r2
 80150ae:	f8a6 1150 	strh.w	r1, [r6, #336]	@ 0x150
 80150b2:	f8a6 2152 	strh.w	r2, [r6, #338]	@ 0x152
 80150b6:	f7ff ff89 	bl	8014fcc <_ZN8touchgfx5Gauge24setupNeedleTextureMapperEv>
 80150ba:	f9b6 215e 	ldrsh.w	r2, [r6, #350]	@ 0x15e
 80150be:	f9b6 115c 	ldrsh.w	r1, [r6, #348]	@ 0x15c
 80150c2:	1aa4      	subs	r4, r4, r2
 80150c4:	1a6d      	subs	r5, r5, r1
 80150c6:	0164      	lsls	r4, r4, #5
 80150c8:	016d      	lsls	r5, r5, #5
 80150ca:	3410      	adds	r4, #16
 80150cc:	3510      	adds	r5, #16
 80150ce:	f8c6 4188 	str.w	r4, [r6, #392]	@ 0x188
 80150d2:	f8c6 5184 	str.w	r5, [r6, #388]	@ 0x184
 80150d6:	bd70      	pop	{r4, r5, r6, pc}

080150d8 <_ZN8touchgfx6Circle12updateArcEndIiEEvT_>:
 80150d8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80150da:	0149      	lsls	r1, r1, #5
 80150dc:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 80150de:	4604      	mov	r4, r0
 80150e0:	4299      	cmp	r1, r3
 80150e2:	9101      	str	r1, [sp, #4]
 80150e4:	d00b      	beq.n	80150fe <_ZN8touchgfx6Circle12updateArcEndIiEEvT_+0x26>
 80150e6:	4601      	mov	r1, r0
 80150e8:	aa01      	add	r2, sp, #4
 80150ea:	a802      	add	r0, sp, #8
 80150ec:	f7fe fccd 	bl	8013a8a <_ZNK8touchgfx6Circle32getMinimalRectForUpdatedEndAngleERKNS_7CWRUtil2Q5E>
 80150f0:	9b01      	ldr	r3, [sp, #4]
 80150f2:	a902      	add	r1, sp, #8
 80150f4:	4620      	mov	r0, r4
 80150f6:	63e3      	str	r3, [r4, #60]	@ 0x3c
 80150f8:	6823      	ldr	r3, [r4, #0]
 80150fa:	691b      	ldr	r3, [r3, #16]
 80150fc:	4798      	blx	r3
 80150fe:	b004      	add	sp, #16
 8015100:	bd10      	pop	{r4, pc}
	...

08015104 <_ZN8touchgfx5Gauge8setValueEi>:
 8015104:	b570      	push	{r4, r5, r6, lr}
 8015106:	4604      	mov	r4, r0
 8015108:	f7fa fa79 	bl	800f5fe <_ZN8touchgfx25AbstractProgressIndicator8setValueEi>
 801510c:	e9d4 3229 	ldrd	r3, r2, [r4, #164]	@ 0xa4
 8015110:	f8d4 114c 	ldr.w	r1, [r4, #332]	@ 0x14c
 8015114:	4620      	mov	r0, r4
 8015116:	429a      	cmp	r2, r3
 8015118:	f504 76ac 	add.w	r6, r4, #344	@ 0x158
 801511c:	bfac      	ite	ge
 801511e:	f894 3145 	ldrbge.w	r3, [r4, #325]	@ 0x145
 8015122:	f894 3144 	ldrblt.w	r3, [r4, #324]	@ 0x144
 8015126:	f884 30dd 	strb.w	r3, [r4, #221]	@ 0xdd
 801512a:	f8d4 3148 	ldr.w	r3, [r4, #328]	@ 0x148
 801512e:	1ac9      	subs	r1, r1, r3
 8015130:	2900      	cmp	r1, #0
 8015132:	bfb8      	it	lt
 8015134:	4249      	neglt	r1, r1
 8015136:	b289      	uxth	r1, r1
 8015138:	f7fa fa83 	bl	800f642 <_ZNK8touchgfx25AbstractProgressIndicator11getProgressEt>
 801513c:	f8d4 3148 	ldr.w	r3, [r4, #328]	@ 0x148
 8015140:	f8d4 214c 	ldr.w	r2, [r4, #332]	@ 0x14c
 8015144:	4605      	mov	r5, r0
 8015146:	eddf 6a18 	vldr	s13, [pc, #96]	@ 80151a8 <_ZN8touchgfx5Gauge8setValueEi+0xa4>
 801514a:	f104 00b4 	add.w	r0, r4, #180	@ 0xb4
 801514e:	429a      	cmp	r2, r3
 8015150:	ed9f 7a16 	vldr	s14, [pc, #88]	@ 80151ac <_ZN8touchgfx5Gauge8setValueEi+0xa8>
 8015154:	da15      	bge.n	8015182 <_ZN8touchgfx5Gauge8setValueEi+0x7e>
 8015156:	1b5b      	subs	r3, r3, r5
 8015158:	edd4 0a3b 	vldr	s1, [r4, #236]	@ 0xec
 801515c:	ed94 0a3a 	vldr	s0, [r4, #232]	@ 0xe8
 8015160:	ee07 3a90 	vmov	s15, r3
 8015164:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8015168:	ee87 1aa6 	vdiv.f32	s2, s15, s13
 801516c:	ee21 1a07 	vmul.f32	s2, s2, s14
 8015170:	f011 fb49 	bl	8026806 <_ZN8touchgfx13TextureMapper12updateAnglesEfff>
 8015174:	f8d4 1148 	ldr.w	r1, [r4, #328]	@ 0x148
 8015178:	1b49      	subs	r1, r1, r5
 801517a:	4630      	mov	r0, r6
 801517c:	f7ff ffac 	bl	80150d8 <_ZN8touchgfx6Circle12updateArcEndIiEEvT_>
 8015180:	bd70      	pop	{r4, r5, r6, pc}
 8015182:	442b      	add	r3, r5
 8015184:	edd4 0a3b 	vldr	s1, [r4, #236]	@ 0xec
 8015188:	ed94 0a3a 	vldr	s0, [r4, #232]	@ 0xe8
 801518c:	ee07 3a90 	vmov	s15, r3
 8015190:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8015194:	ee87 1aa6 	vdiv.f32	s2, s15, s13
 8015198:	ee21 1a07 	vmul.f32	s2, s2, s14
 801519c:	f011 fb33 	bl	8026806 <_ZN8touchgfx13TextureMapper12updateAnglesEfff>
 80151a0:	f8d4 1148 	ldr.w	r1, [r4, #328]	@ 0x148
 80151a4:	4429      	add	r1, r5
 80151a6:	e7e8      	b.n	801517a <_ZN8touchgfx5Gauge8setValueEi+0x76>
 80151a8:	43340000 	.word	0x43340000
 80151ac:	40490fdb 	.word	0x40490fdb

080151b0 <_ZN8touchgfx5Gauge16setStartEndAngleEii>:
 80151b0:	b510      	push	{r4, lr}
 80151b2:	f8c0 1148 	str.w	r1, [r0, #328]	@ 0x148
 80151b6:	0149      	lsls	r1, r1, #5
 80151b8:	f8c0 214c 	str.w	r2, [r0, #332]	@ 0x14c
 80151bc:	0152      	lsls	r2, r2, #5
 80151be:	4604      	mov	r4, r0
 80151c0:	f8c0 1190 	str.w	r1, [r0, #400]	@ 0x190
 80151c4:	f8c0 2194 	str.w	r2, [r0, #404]	@ 0x194
 80151c8:	f7fa f9c3 	bl	800f552 <_ZNK8touchgfx25AbstractProgressIndicator8getValueEv>
 80151cc:	4601      	mov	r1, r0
 80151ce:	4620      	mov	r0, r4
 80151d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80151d4:	f7ff bf96 	b.w	8015104 <_ZN8touchgfx5Gauge8setValueEi>

080151d8 <_ZNK8touchgfx14AbstractButton15getPressedStateEv>:
 80151d8:	f890 002c 	ldrb.w	r0, [r0, #44]	@ 0x2c
 80151dc:	4770      	bx	lr

080151de <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>:
 80151de:	b570      	push	{r4, r5, r6, lr}
 80151e0:	880b      	ldrh	r3, [r1, #0]
 80151e2:	4605      	mov	r5, r0
 80151e4:	4604      	mov	r4, r0
 80151e6:	85c3      	strh	r3, [r0, #46]	@ 0x2e
 80151e8:	8813      	ldrh	r3, [r2, #0]
 80151ea:	f825 3f30 	strh.w	r3, [r5, #48]!
 80151ee:	4628      	mov	r0, r5
 80151f0:	f006 fc68 	bl	801bac4 <_ZNK8touchgfx6Bitmap8getWidthEv>
 80151f4:	4606      	mov	r6, r0
 80151f6:	4628      	mov	r0, r5
 80151f8:	f006 fc98 	bl	801bb2c <_ZNK8touchgfx6Bitmap9getHeightEv>
 80151fc:	6823      	ldr	r3, [r4, #0]
 80151fe:	4605      	mov	r5, r0
 8015200:	4631      	mov	r1, r6
 8015202:	4620      	mov	r0, r4
 8015204:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8015206:	4798      	blx	r3
 8015208:	6823      	ldr	r3, [r4, #0]
 801520a:	4629      	mov	r1, r5
 801520c:	4620      	mov	r0, r4
 801520e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8015210:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015214:	4718      	bx	r3

08015216 <_ZN8touchgfx14AbstractButton13executeActionEv>:
 8015216:	b510      	push	{r4, lr}
 8015218:	4604      	mov	r4, r0
 801521a:	6a80      	ldr	r0, [r0, #40]	@ 0x28
 801521c:	b150      	cbz	r0, 8015234 <_ZN8touchgfx14AbstractButton13executeActionEv+0x1e>
 801521e:	6803      	ldr	r3, [r0, #0]
 8015220:	68db      	ldr	r3, [r3, #12]
 8015222:	4798      	blx	r3
 8015224:	b130      	cbz	r0, 8015234 <_ZN8touchgfx14AbstractButton13executeActionEv+0x1e>
 8015226:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8015228:	4621      	mov	r1, r4
 801522a:	6803      	ldr	r3, [r0, #0]
 801522c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015230:	689b      	ldr	r3, [r3, #8]
 8015232:	4718      	bx	r3
 8015234:	bd10      	pop	{r4, pc}

08015236 <_ZNK8touchgfx6Button12getSolidRectEv>:
 8015236:	b510      	push	{r4, lr}
 8015238:	f891 3032 	ldrb.w	r3, [r1, #50]	@ 0x32
 801523c:	4604      	mov	r4, r0
 801523e:	2bff      	cmp	r3, #255	@ 0xff
 8015240:	d006      	beq.n	8015250 <_ZNK8touchgfx6Button12getSolidRectEv+0x1a>
 8015242:	2300      	movs	r3, #0
 8015244:	8003      	strh	r3, [r0, #0]
 8015246:	8043      	strh	r3, [r0, #2]
 8015248:	8083      	strh	r3, [r0, #4]
 801524a:	80c3      	strh	r3, [r0, #6]
 801524c:	4620      	mov	r0, r4
 801524e:	bd10      	pop	{r4, pc}
 8015250:	f891 302c 	ldrb.w	r3, [r1, #44]	@ 0x2c
 8015254:	b11b      	cbz	r3, 801525e <_ZNK8touchgfx6Button12getSolidRectEv+0x28>
 8015256:	3130      	adds	r1, #48	@ 0x30
 8015258:	f006 fc9c 	bl	801bb94 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 801525c:	e7f6      	b.n	801524c <_ZNK8touchgfx6Button12getSolidRectEv+0x16>
 801525e:	312e      	adds	r1, #46	@ 0x2e
 8015260:	e7fa      	b.n	8015258 <_ZNK8touchgfx6Button12getSolidRectEv+0x22>
	...

08015264 <_ZNK8touchgfx6Button4drawERKNS_4RectE>:
 8015264:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015268:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
 801526c:	b08a      	sub	sp, #40	@ 0x28
 801526e:	4604      	mov	r4, r0
 8015270:	4688      	mov	r8, r1
 8015272:	2b00      	cmp	r3, #0
 8015274:	d066      	beq.n	8015344 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe0>
 8015276:	8e03      	ldrh	r3, [r0, #48]	@ 0x30
 8015278:	a805      	add	r0, sp, #20
 801527a:	f8ad 3014 	strh.w	r3, [sp, #20]
 801527e:	f006 fc21 	bl	801bac4 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8015282:	4607      	mov	r7, r0
 8015284:	a805      	add	r0, sp, #20
 8015286:	f006 fc51 	bl	801bb2c <_ZNK8touchgfx6Bitmap9getHeightEv>
 801528a:	f9b8 6000 	ldrsh.w	r6, [r8]
 801528e:	f8b8 2004 	ldrh.w	r2, [r8, #4]
 8015292:	2300      	movs	r3, #0
 8015294:	4432      	add	r2, r6
 8015296:	9306      	str	r3, [sp, #24]
 8015298:	b292      	uxth	r2, r2
 801529a:	fa0f fc82 	sxth.w	ip, r2
 801529e:	459c      	cmp	ip, r3
 80152a0:	dd52      	ble.n	8015348 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe4>
 80152a2:	42b7      	cmp	r7, r6
 80152a4:	dd50      	ble.n	8015348 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe4>
 80152a6:	f9b8 5002 	ldrsh.w	r5, [r8, #2]
 80152aa:	f8b8 3006 	ldrh.w	r3, [r8, #6]
 80152ae:	442b      	add	r3, r5
 80152b0:	b29b      	uxth	r3, r3
 80152b2:	b219      	sxth	r1, r3
 80152b4:	2900      	cmp	r1, #0
 80152b6:	dd47      	ble.n	8015348 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe4>
 80152b8:	42a8      	cmp	r0, r5
 80152ba:	dd45      	ble.n	8015348 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe4>
 80152bc:	4567      	cmp	r7, ip
 80152be:	ea26 76e6 	bic.w	r6, r6, r6, asr #31
 80152c2:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 80152c6:	bfb8      	it	lt
 80152c8:	b2ba      	uxthlt	r2, r7
 80152ca:	4288      	cmp	r0, r1
 80152cc:	f8ad 6018 	strh.w	r6, [sp, #24]
 80152d0:	bfb8      	it	lt
 80152d2:	b283      	uxthlt	r3, r0
 80152d4:	1b92      	subs	r2, r2, r6
 80152d6:	f8ad 501a 	strh.w	r5, [sp, #26]
 80152da:	1b5b      	subs	r3, r3, r5
 80152dc:	f8ad 201c 	strh.w	r2, [sp, #28]
 80152e0:	f8ad 301e 	strh.w	r3, [sp, #30]
 80152e4:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 80152e8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80152ec:	429a      	cmp	r2, r3
 80152ee:	d026      	beq.n	801533e <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xda>
 80152f0:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 80152f4:	2b00      	cmp	r3, #0
 80152f6:	dd22      	ble.n	801533e <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xda>
 80152f8:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 80152fc:	2b00      	cmp	r3, #0
 80152fe:	dd1e      	ble.n	801533e <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xda>
 8015300:	2300      	movs	r3, #0
 8015302:	a908      	add	r1, sp, #32
 8015304:	4620      	mov	r0, r4
 8015306:	e9cd 3308 	strd	r3, r3, [sp, #32]
 801530a:	6823      	ldr	r3, [r4, #0]
 801530c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801530e:	4798      	blx	r3
 8015310:	4b0f      	ldr	r3, [pc, #60]	@ (8015350 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xec>)
 8015312:	681b      	ldr	r3, [r3, #0]
 8015314:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 8015318:	b10a      	cbz	r2, 801531e <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xba>
 801531a:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 801531c:	b900      	cbnz	r0, 8015320 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xbc>
 801531e:	6898      	ldr	r0, [r3, #8]
 8015320:	2501      	movs	r5, #1
 8015322:	6801      	ldr	r1, [r0, #0]
 8015324:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	@ 0x22
 8015328:	9502      	str	r5, [sp, #8]
 801532a:	f894 4032 	ldrb.w	r4, [r4, #50]	@ 0x32
 801532e:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 8015332:	9401      	str	r4, [sp, #4]
 8015334:	ac06      	add	r4, sp, #24
 8015336:	9400      	str	r4, [sp, #0]
 8015338:	688c      	ldr	r4, [r1, #8]
 801533a:	a905      	add	r1, sp, #20
 801533c:	47a0      	blx	r4
 801533e:	b00a      	add	sp, #40	@ 0x28
 8015340:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015344:	8dc3      	ldrh	r3, [r0, #46]	@ 0x2e
 8015346:	e797      	b.n	8015278 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x14>
 8015348:	2300      	movs	r3, #0
 801534a:	9307      	str	r3, [sp, #28]
 801534c:	e7ca      	b.n	80152e4 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x80>
 801534e:	bf00      	nop
 8015350:	24028e20 	.word	0x24028e20

08015354 <_ZNK8touchgfx6Button17invalidateContentEv>:
 8015354:	f890 2032 	ldrb.w	r2, [r0, #50]	@ 0x32
 8015358:	b12a      	cbz	r2, 8015366 <_ZNK8touchgfx6Button17invalidateContentEv+0x12>
 801535a:	f890 2025 	ldrb.w	r2, [r0, #37]	@ 0x25
 801535e:	b112      	cbz	r2, 8015366 <_ZNK8touchgfx6Button17invalidateContentEv+0x12>
 8015360:	6803      	ldr	r3, [r0, #0]
 8015362:	695b      	ldr	r3, [r3, #20]
 8015364:	4718      	bx	r3
 8015366:	4770      	bx	lr

08015368 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE>:
 8015368:	4b30      	ldr	r3, [pc, #192]	@ (801542c <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xc4>)
 801536a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801536e:	8d82      	ldrh	r2, [r0, #44]	@ 0x2c
 8015370:	b08d      	sub	sp, #52	@ 0x34
 8015372:	881b      	ldrh	r3, [r3, #0]
 8015374:	4604      	mov	r4, r0
 8015376:	460f      	mov	r7, r1
 8015378:	4293      	cmp	r3, r2
 801537a:	d954      	bls.n	8015426 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xbe>
 801537c:	4b2c      	ldr	r3, [pc, #176]	@ (8015430 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xc8>)
 801537e:	6819      	ldr	r1, [r3, #0]
 8015380:	eb01 0342 	add.w	r3, r1, r2, lsl #1
 8015384:	f811 1012 	ldrb.w	r1, [r1, r2, lsl #1]
 8015388:	4a2a      	ldr	r2, [pc, #168]	@ (8015434 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xcc>)
 801538a:	6812      	ldr	r2, [r2, #0]
 801538c:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 8015390:	2900      	cmp	r1, #0
 8015392:	d048      	beq.n	8015426 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xbe>
 8015394:	785a      	ldrb	r2, [r3, #1]
 8015396:	f894 3039 	ldrb.w	r3, [r4, #57]	@ 0x39
 801539a:	f3c2 0801 	ubfx	r8, r2, #0, #2
 801539e:	f3c2 0281 	ubfx	r2, r2, #2, #2
 80153a2:	f88d 302c 	strb.w	r3, [sp, #44]	@ 0x2c
 80153a6:	4b24      	ldr	r3, [pc, #144]	@ (8015438 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xd0>)
 80153a8:	f88d 2021 	strb.w	r2, [sp, #33]	@ 0x21
 80153ac:	681a      	ldr	r2, [r3, #0]
 80153ae:	f890 5036 	ldrb.w	r5, [r0, #54]	@ 0x36
 80153b2:	f9b0 c034 	ldrsh.w	ip, [r0, #52]	@ 0x34
 80153b6:	f890 e038 	ldrb.w	lr, [r0, #56]	@ 0x38
 80153ba:	6b26      	ldr	r6, [r4, #48]	@ 0x30
 80153bc:	f890 0037 	ldrb.w	r0, [r0, #55]	@ 0x37
 80153c0:	f892 3058 	ldrb.w	r3, [r2, #88]	@ 0x58
 80153c4:	9107      	str	r1, [sp, #28]
 80153c6:	f88d 8020 	strb.w	r8, [sp, #32]
 80153ca:	f88d e022 	strb.w	lr, [sp, #34]	@ 0x22
 80153ce:	9609      	str	r6, [sp, #36]	@ 0x24
 80153d0:	f8ad c028 	strh.w	ip, [sp, #40]	@ 0x28
 80153d4:	f88d 502a 	strb.w	r5, [sp, #42]	@ 0x2a
 80153d8:	f88d 002b 	strb.w	r0, [sp, #43]	@ 0x2b
 80153dc:	b10b      	cbz	r3, 80153e2 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0x7a>
 80153de:	6cd5      	ldr	r5, [r2, #76]	@ 0x4c
 80153e0:	b905      	cbnz	r5, 80153e4 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0x7c>
 80153e2:	6895      	ldr	r5, [r2, #8]
 80153e4:	ae05      	add	r6, sp, #20
 80153e6:	4621      	mov	r1, r4
 80153e8:	4630      	mov	r0, r6
 80153ea:	f003 feb1 	bl	8019150 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80153ee:	4b13      	ldr	r3, [pc, #76]	@ (801543c <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xd4>)
 80153f0:	8da1      	ldrh	r1, [r4, #44]	@ 0x2c
 80153f2:	6818      	ldr	r0, [r3, #0]
 80153f4:	f7ef f8ce 	bl	8004594 <_ZNK8touchgfx5Texts7getTextEt>
 80153f8:	6823      	ldr	r3, [r4, #0]
 80153fa:	4680      	mov	r8, r0
 80153fc:	4620      	mov	r0, r4
 80153fe:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8015400:	4798      	blx	r3
 8015402:	6823      	ldr	r3, [r4, #0]
 8015404:	4681      	mov	r9, r0
 8015406:	4620      	mov	r0, r4
 8015408:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801540c:	4798      	blx	r3
 801540e:	ab07      	add	r3, sp, #28
 8015410:	f8cd 8004 	str.w	r8, [sp, #4]
 8015414:	9300      	str	r3, [sp, #0]
 8015416:	463b      	mov	r3, r7
 8015418:	e9cd 9002 	strd	r9, r0, [sp, #8]
 801541c:	4628      	mov	r0, r5
 801541e:	e896 0006 	ldmia.w	r6, {r1, r2}
 8015422:	f7ef f869 	bl	80044f8 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 8015426:	b00d      	add	sp, #52	@ 0x34
 8015428:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801542c:	24028e7c 	.word	0x24028e7c
 8015430:	24028e78 	.word	0x24028e78
 8015434:	24028e80 	.word	0x24028e80
 8015438:	24028e20 	.word	0x24028e20
 801543c:	24028e84 	.word	0x24028e84

08015440 <_ZN8touchgfx5ImageD1Ev>:
 8015440:	4770      	bx	lr

08015442 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>:
 8015442:	b570      	push	{r4, r5, r6, lr}
 8015444:	880b      	ldrh	r3, [r1, #0]
 8015446:	460d      	mov	r5, r1
 8015448:	4604      	mov	r4, r0
 801544a:	84c3      	strh	r3, [r0, #38]	@ 0x26
 801544c:	4608      	mov	r0, r1
 801544e:	f006 fb39 	bl	801bac4 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8015452:	4606      	mov	r6, r0
 8015454:	4628      	mov	r0, r5
 8015456:	f006 fb69 	bl	801bb2c <_ZNK8touchgfx6Bitmap9getHeightEv>
 801545a:	6823      	ldr	r3, [r4, #0]
 801545c:	4605      	mov	r5, r0
 801545e:	4631      	mov	r1, r6
 8015460:	4620      	mov	r0, r4
 8015462:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8015464:	4798      	blx	r3
 8015466:	6823      	ldr	r3, [r4, #0]
 8015468:	4629      	mov	r1, r5
 801546a:	4620      	mov	r0, r4
 801546c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801546e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015472:	4718      	bx	r3

08015474 <_ZN8touchgfx5ImageD0Ev>:
 8015474:	b510      	push	{r4, lr}
 8015476:	4604      	mov	r4, r0
 8015478:	212c      	movs	r1, #44	@ 0x2c
 801547a:	f012 f808 	bl	802748e <_ZdlPvj>
 801547e:	4620      	mov	r0, r4
 8015480:	bd10      	pop	{r4, pc}

08015482 <_ZNK8touchgfx5Image12getSolidRectEv>:
 8015482:	b510      	push	{r4, lr}
 8015484:	f891 3028 	ldrb.w	r3, [r1, #40]	@ 0x28
 8015488:	4604      	mov	r4, r0
 801548a:	2bff      	cmp	r3, #255	@ 0xff
 801548c:	d006      	beq.n	801549c <_ZNK8touchgfx5Image12getSolidRectEv+0x1a>
 801548e:	2300      	movs	r3, #0
 8015490:	8003      	strh	r3, [r0, #0]
 8015492:	8043      	strh	r3, [r0, #2]
 8015494:	8083      	strh	r3, [r0, #4]
 8015496:	80c3      	strh	r3, [r0, #6]
 8015498:	4620      	mov	r0, r4
 801549a:	bd10      	pop	{r4, pc}
 801549c:	3126      	adds	r1, #38	@ 0x26
 801549e:	f006 fb79 	bl	801bb94 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 80154a2:	e7f9      	b.n	8015498 <_ZNK8touchgfx5Image12getSolidRectEv+0x16>

080154a4 <_ZNK8touchgfx5Image4drawERKNS_4RectE>:
 80154a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80154a8:	4604      	mov	r4, r0
 80154aa:	b088      	sub	sp, #32
 80154ac:	2500      	movs	r5, #0
 80154ae:	460f      	mov	r7, r1
 80154b0:	f854 3b26 	ldr.w	r3, [r4], #38
 80154b4:	a904      	add	r1, sp, #16
 80154b6:	4606      	mov	r6, r0
 80154b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80154ba:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80154be:	4798      	blx	r3
 80154c0:	4620      	mov	r0, r4
 80154c2:	f006 faff 	bl	801bac4 <_ZNK8touchgfx6Bitmap8getWidthEv>
 80154c6:	4680      	mov	r8, r0
 80154c8:	4620      	mov	r0, r4
 80154ca:	f006 fb2f 	bl	801bb2c <_ZNK8touchgfx6Bitmap9getHeightEv>
 80154ce:	9506      	str	r5, [sp, #24]
 80154d0:	ad06      	add	r5, sp, #24
 80154d2:	f8ad 001e 	strh.w	r0, [sp, #30]
 80154d6:	4639      	mov	r1, r7
 80154d8:	f8ad 801c 	strh.w	r8, [sp, #28]
 80154dc:	4628      	mov	r0, r5
 80154de:	f7fa fd0f 	bl	800ff00 <_ZN8touchgfx4RectaNERKS0_>
 80154e2:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 80154e6:	2b00      	cmp	r3, #0
 80154e8:	dd19      	ble.n	801551e <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x7a>
 80154ea:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 80154ee:	2b00      	cmp	r3, #0
 80154f0:	dd15      	ble.n	801551e <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x7a>
 80154f2:	4b0c      	ldr	r3, [pc, #48]	@ (8015524 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x80>)
 80154f4:	681b      	ldr	r3, [r3, #0]
 80154f6:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 80154fa:	b10a      	cbz	r2, 8015500 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x5c>
 80154fc:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 80154fe:	b900      	cbnz	r0, 8015502 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x5e>
 8015500:	6898      	ldr	r0, [r3, #8]
 8015502:	2701      	movs	r7, #1
 8015504:	6801      	ldr	r1, [r0, #0]
 8015506:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 801550a:	9702      	str	r7, [sp, #8]
 801550c:	f896 6028 	ldrb.w	r6, [r6, #40]	@ 0x28
 8015510:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8015514:	e9cd 5600 	strd	r5, r6, [sp]
 8015518:	688d      	ldr	r5, [r1, #8]
 801551a:	4621      	mov	r1, r4
 801551c:	47a8      	blx	r5
 801551e:	b008      	add	sp, #32
 8015520:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015524:	24028e20 	.word	0x24028e20

08015528 <_ZN8touchgfx15ButtonWithLabelD1Ev>:
 8015528:	4770      	bx	lr

0801552a <_ZN8touchgfx15ButtonWithLabelD0Ev>:
 801552a:	b510      	push	{r4, lr}
 801552c:	4604      	mov	r4, r0
 801552e:	2148      	movs	r1, #72	@ 0x48
 8015530:	f011 ffad 	bl	802748e <_ZdlPvj>
 8015534:	4620      	mov	r0, r4
 8015536:	bd10      	pop	{r4, pc}

08015538 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE>:
 8015538:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801553c:	b08d      	sub	sp, #52	@ 0x34
 801553e:	4604      	mov	r4, r0
 8015540:	460f      	mov	r7, r1
 8015542:	f7ff fe8f 	bl	8015264 <_ZNK8touchgfx6Button4drawERKNS_4RectE>
 8015546:	4a55      	ldr	r2, [pc, #340]	@ (801569c <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x164>)
 8015548:	8f23      	ldrh	r3, [r4, #56]	@ 0x38
 801554a:	8812      	ldrh	r2, [r2, #0]
 801554c:	429a      	cmp	r2, r3
 801554e:	f240 8082 	bls.w	8015656 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x11e>
 8015552:	4d53      	ldr	r5, [pc, #332]	@ (80156a0 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x168>)
 8015554:	682a      	ldr	r2, [r5, #0]
 8015556:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 801555a:	4b52      	ldr	r3, [pc, #328]	@ (80156a4 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x16c>)
 801555c:	681b      	ldr	r3, [r3, #0]
 801555e:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 8015562:	2200      	movs	r2, #0
 8015564:	f9b4 3046 	ldrsh.w	r3, [r4, #70]	@ 0x46
 8015568:	e9cd 2203 	strd	r2, r2, [sp, #12]
 801556c:	f894 2044 	ldrb.w	r2, [r4, #68]	@ 0x44
 8015570:	2a03      	cmp	r2, #3
 8015572:	d811      	bhi.n	8015598 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x60>
 8015574:	e8df f002 	tbb	[pc, r2]
 8015578:	89727902 	.word	0x89727902
 801557c:	f9b4 200a 	ldrsh.w	r2, [r4, #10]
 8015580:	f9b4 1008 	ldrsh.w	r1, [r4, #8]
 8015584:	1ad2      	subs	r2, r2, r3
 8015586:	2002      	movs	r0, #2
 8015588:	f8ad 1010 	strh.w	r1, [sp, #16]
 801558c:	f8ad 3012 	strh.w	r3, [sp, #18]
 8015590:	fb92 f2f0 	sdiv	r2, r2, r0
 8015594:	f8ad 200e 	strh.w	r2, [sp, #14]
 8015598:	f10d 080c 	add.w	r8, sp, #12
 801559c:	f10d 0914 	add.w	r9, sp, #20
 80155a0:	e898 0003 	ldmia.w	r8, {r0, r1}
 80155a4:	e889 0003 	stmia.w	r9, {r0, r1}
 80155a8:	4639      	mov	r1, r7
 80155aa:	4648      	mov	r0, r9
 80155ac:	f7fa fca8 	bl	800ff00 <_ZN8touchgfx4RectaNERKS0_>
 80155b0:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 80155b4:	2b00      	cmp	r3, #0
 80155b6:	dd4e      	ble.n	8015656 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x11e>
 80155b8:	f9bd 301a 	ldrsh.w	r3, [sp, #26]
 80155bc:	2b00      	cmp	r3, #0
 80155be:	dd4a      	ble.n	8015656 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x11e>
 80155c0:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 80155c4:	4641      	mov	r1, r8
 80155c6:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 80155ca:	4620      	mov	r0, r4
 80155cc:	1a9b      	subs	r3, r3, r2
 80155ce:	f8bd 200e 	ldrh.w	r2, [sp, #14]
 80155d2:	f8ad 3014 	strh.w	r3, [sp, #20]
 80155d6:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 80155da:	1a9b      	subs	r3, r3, r2
 80155dc:	f8ad 3016 	strh.w	r3, [sp, #22]
 80155e0:	6823      	ldr	r3, [r4, #0]
 80155e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80155e4:	4798      	blx	r3
 80155e6:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 80155ea:	2b00      	cmp	r3, #0
 80155ec:	d053      	beq.n	8015696 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x15e>
 80155ee:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 80155f0:	8f21      	ldrh	r1, [r4, #56]	@ 0x38
 80155f2:	682b      	ldr	r3, [r5, #0]
 80155f4:	f894 0032 	ldrb.w	r0, [r4, #50]	@ 0x32
 80155f8:	eb03 0341 	add.w	r3, r3, r1, lsl #1
 80155fc:	f894 4044 	ldrb.w	r4, [r4, #68]	@ 0x44
 8015600:	785b      	ldrb	r3, [r3, #1]
 8015602:	9209      	str	r2, [sp, #36]	@ 0x24
 8015604:	f3c3 0501 	ubfx	r5, r3, #0, #2
 8015608:	f3c3 0381 	ubfx	r3, r3, #2, #2
 801560c:	9607      	str	r6, [sp, #28]
 801560e:	f88d 3021 	strb.w	r3, [sp, #33]	@ 0x21
 8015612:	2300      	movs	r3, #0
 8015614:	f88d 5020 	strb.w	r5, [sp, #32]
 8015618:	f8ad 3028 	strh.w	r3, [sp, #40]	@ 0x28
 801561c:	f88d 302b 	strb.w	r3, [sp, #43]	@ 0x2b
 8015620:	f88d 302c 	strb.w	r3, [sp, #44]	@ 0x2c
 8015624:	4b20      	ldr	r3, [pc, #128]	@ (80156a8 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x170>)
 8015626:	f88d 4022 	strb.w	r4, [sp, #34]	@ 0x22
 801562a:	681b      	ldr	r3, [r3, #0]
 801562c:	f88d 002a 	strb.w	r0, [sp, #42]	@ 0x2a
 8015630:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 8015634:	b10a      	cbz	r2, 801563a <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x102>
 8015636:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 8015638:	b904      	cbnz	r4, 801563c <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x104>
 801563a:	689c      	ldr	r4, [r3, #8]
 801563c:	4b1b      	ldr	r3, [pc, #108]	@ (80156ac <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x174>)
 801563e:	6818      	ldr	r0, [r3, #0]
 8015640:	f7ee ffa8 	bl	8004594 <_ZNK8touchgfx5Texts7getTextEt>
 8015644:	ab07      	add	r3, sp, #28
 8015646:	9001      	str	r0, [sp, #4]
 8015648:	4620      	mov	r0, r4
 801564a:	9300      	str	r3, [sp, #0]
 801564c:	464b      	mov	r3, r9
 801564e:	e898 0006 	ldmia.w	r8, {r1, r2}
 8015652:	f7ee ff51 	bl	80044f8 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 8015656:	b00d      	add	sp, #52	@ 0x34
 8015658:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801565c:	f9b4 200a 	ldrsh.w	r2, [r4, #10]
 8015660:	f9b4 1008 	ldrsh.w	r1, [r4, #8]
 8015664:	1ad2      	subs	r2, r2, r3
 8015666:	3201      	adds	r2, #1
 8015668:	e78d      	b.n	8015586 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x4e>
 801566a:	f9b4 2008 	ldrsh.w	r2, [r4, #8]
 801566e:	f9b4 100a 	ldrsh.w	r1, [r4, #10]
 8015672:	1ad2      	subs	r2, r2, r3
 8015674:	3201      	adds	r2, #1
 8015676:	2002      	movs	r0, #2
 8015678:	f8ad 3010 	strh.w	r3, [sp, #16]
 801567c:	f8ad 1012 	strh.w	r1, [sp, #18]
 8015680:	fb92 f2f0 	sdiv	r2, r2, r0
 8015684:	f8ad 200c 	strh.w	r2, [sp, #12]
 8015688:	e786      	b.n	8015598 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x60>
 801568a:	f9b4 2008 	ldrsh.w	r2, [r4, #8]
 801568e:	f9b4 100a 	ldrsh.w	r1, [r4, #10]
 8015692:	1ad2      	subs	r2, r2, r3
 8015694:	e7ef      	b.n	8015676 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x13e>
 8015696:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 8015698:	e7aa      	b.n	80155f0 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0xb8>
 801569a:	bf00      	nop
 801569c:	24028e7c 	.word	0x24028e7c
 80156a0:	24028e78 	.word	0x24028e78
 80156a4:	24028e80 	.word	0x24028e80
 80156a8:	24028e20 	.word	0x24028e20
 80156ac:	24028e84 	.word	0x24028e84

080156b0 <_ZN8touchgfx15ButtonWithLabelC1Ev>:
 80156b0:	2101      	movs	r1, #1
 80156b2:	2200      	movs	r2, #0
 80156b4:	b510      	push	{r4, lr}
 80156b6:	4c13      	ldr	r4, [pc, #76]	@ (8015704 <_ZN8touchgfx15ButtonWithLabelC1Ev+0x54>)
 80156b8:	f880 1025 	strb.w	r1, [r0, #37]	@ 0x25
 80156bc:	f880 1024 	strb.w	r1, [r0, #36]	@ 0x24
 80156c0:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80156c4:	6004      	str	r4, [r0, #0]
 80156c6:	4c10      	ldr	r4, [pc, #64]	@ (8015708 <_ZN8touchgfx15ButtonWithLabelC1Ev+0x58>)
 80156c8:	8082      	strh	r2, [r0, #4]
 80156ca:	80c2      	strh	r2, [r0, #6]
 80156cc:	8102      	strh	r2, [r0, #8]
 80156ce:	8142      	strh	r2, [r0, #10]
 80156d0:	8182      	strh	r2, [r0, #12]
 80156d2:	81c2      	strh	r2, [r0, #14]
 80156d4:	8202      	strh	r2, [r0, #16]
 80156d6:	8242      	strh	r2, [r0, #18]
 80156d8:	61c2      	str	r2, [r0, #28]
 80156da:	8402      	strh	r2, [r0, #32]
 80156dc:	8442      	strh	r2, [r0, #34]	@ 0x22
 80156de:	6282      	str	r2, [r0, #40]	@ 0x28
 80156e0:	f880 202c 	strb.w	r2, [r0, #44]	@ 0x2c
 80156e4:	85c1      	strh	r1, [r0, #46]	@ 0x2e
 80156e6:	8601      	strh	r1, [r0, #48]	@ 0x30
 80156e8:	f880 1032 	strb.w	r1, [r0, #50]	@ 0x32
 80156ec:	6344      	str	r4, [r0, #52]	@ 0x34
 80156ee:	8701      	strh	r1, [r0, #56]	@ 0x38
 80156f0:	f880 2044 	strb.w	r2, [r0, #68]	@ 0x44
 80156f4:	f8a0 2046 	strh.w	r2, [r0, #70]	@ 0x46
 80156f8:	e9c0 2205 	strd	r2, r2, [r0, #20]
 80156fc:	e9c0 220f 	strd	r2, r2, [r0, #60]	@ 0x3c
 8015700:	bd10      	pop	{r4, pc}
 8015702:	bf00      	nop
 8015704:	0802d070 	.word	0x0802d070
 8015708:	0802aec4 	.word	0x0802aec4

0801570c <_ZN8touchgfx7OutlineD1Ev>:
 801570c:	4770      	bx	lr

0801570e <_ZN8touchgfx7OutlineD0Ev>:
 801570e:	b510      	push	{r4, lr}
 8015710:	4604      	mov	r4, r0
 8015712:	2130      	movs	r1, #48	@ 0x30
 8015714:	f011 febb 	bl	802748e <_ZdlPvj>
 8015718:	4620      	mov	r0, r4
 801571a:	bd10      	pop	{r4, pc}

0801571c <_ZN8touchgfx7Outline5resetEv>:
 801571c:	b510      	push	{r4, lr}
 801571e:	4604      	mov	r4, r0
 8015720:	f000 fe86 	bl	8016430 <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv>
 8015724:	60e0      	str	r0, [r4, #12]
 8015726:	f000 fe89 	bl	801643c <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv>
 801572a:	68e3      	ldr	r3, [r4, #12]
 801572c:	08c0      	lsrs	r0, r0, #3
 801572e:	2200      	movs	r2, #0
 8015730:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8015734:	6123      	str	r3, [r4, #16]
 8015736:	3801      	subs	r0, #1
 8015738:	60a2      	str	r2, [r4, #8]
 801573a:	6060      	str	r0, [r4, #4]
 801573c:	8019      	strh	r1, [r3, #0]
 801573e:	8059      	strh	r1, [r3, #2]
 8015740:	809a      	strh	r2, [r3, #4]
 8015742:	80da      	strh	r2, [r3, #6]
 8015744:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8015746:	f023 0301 	bic.w	r3, r3, #1
 801574a:	f043 0302 	orr.w	r3, r3, #2
 801574e:	6263      	str	r3, [r4, #36]	@ 0x24
 8015750:	bd10      	pop	{r4, pc}
	...

08015754 <_ZN8touchgfx7OutlineC1Ev>:
 8015754:	4b0a      	ldr	r3, [pc, #40]	@ (8015780 <_ZN8touchgfx7OutlineC1Ev+0x2c>)
 8015756:	b510      	push	{r4, lr}
 8015758:	6003      	str	r3, [r0, #0]
 801575a:	2300      	movs	r3, #0
 801575c:	4604      	mov	r4, r0
 801575e:	6243      	str	r3, [r0, #36]	@ 0x24
 8015760:	e9c0 3301 	strd	r3, r3, [r0, #4]
 8015764:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8015768:	e9c0 3305 	strd	r3, r3, [r0, #20]
 801576c:	e9c0 3307 	strd	r3, r3, [r0, #28]
 8015770:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8015774:	e9c0 330a 	strd	r3, r3, [r0, #40]	@ 0x28
 8015778:	f7ff ffd0 	bl	801571c <_ZN8touchgfx7Outline5resetEv>
 801577c:	4620      	mov	r0, r4
 801577e:	bd10      	pop	{r4, pc}
 8015780:	0802d0e4 	.word	0x0802d0e4

08015784 <_ZN8touchgfx7Outline10renderLineEiiii>:
 8015784:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015788:	b093      	sub	sp, #76	@ 0x4c
 801578a:	1156      	asrs	r6, r2, #5
 801578c:	9c1c      	ldr	r4, [sp, #112]	@ 0x70
 801578e:	9305      	str	r3, [sp, #20]
 8015790:	1153      	asrs	r3, r2, #5
 8015792:	f004 051f 	and.w	r5, r4, #31
 8015796:	9303      	str	r3, [sp, #12]
 8015798:	1163      	asrs	r3, r4, #5
 801579a:	9504      	str	r5, [sp, #16]
 801579c:	1165      	asrs	r5, r4, #5
 801579e:	9306      	str	r3, [sp, #24]
 80157a0:	f002 031f 	and.w	r3, r2, #31
 80157a4:	42ae      	cmp	r6, r5
 80157a6:	f040 80f4 	bne.w	8015992 <_ZN8touchgfx7Outline10renderLineEiiii+0x20e>
 80157aa:	9c04      	ldr	r4, [sp, #16]
 80157ac:	9a05      	ldr	r2, [sp, #20]
 80157ae:	42a3      	cmp	r3, r4
 80157b0:	ea4f 1e62 	mov.w	lr, r2, asr #5
 80157b4:	6902      	ldr	r2, [r0, #16]
 80157b6:	d125      	bne.n	8015804 <_ZN8touchgfx7Outline10renderLineEiiii+0x80>
 80157b8:	f9b2 3000 	ldrsh.w	r3, [r2]
 80157bc:	459e      	cmp	lr, r3
 80157be:	d103      	bne.n	80157c8 <_ZN8touchgfx7Outline10renderLineEiiii+0x44>
 80157c0:	f9b2 3002 	ldrsh.w	r3, [r2, #2]
 80157c4:	429e      	cmp	r6, r3
 80157c6:	d035      	beq.n	8015834 <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 80157c8:	88d1      	ldrh	r1, [r2, #6]
 80157ca:	8893      	ldrh	r3, [r2, #4]
 80157cc:	430b      	orrs	r3, r1
 80157ce:	d010      	beq.n	80157f2 <_ZN8touchgfx7Outline10renderLineEiiii+0x6e>
 80157d0:	f9b2 3002 	ldrsh.w	r3, [r2, #2]
 80157d4:	2b00      	cmp	r3, #0
 80157d6:	db0c      	blt.n	80157f2 <_ZN8touchgfx7Outline10renderLineEiiii+0x6e>
 80157d8:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 80157da:	428b      	cmp	r3, r1
 80157dc:	da09      	bge.n	80157f2 <_ZN8touchgfx7Outline10renderLineEiiii+0x6e>
 80157de:	e9d0 1301 	ldrd	r1, r3, [r0, #4]
 80157e2:	428b      	cmp	r3, r1
 80157e4:	f103 0301 	add.w	r3, r3, #1
 80157e8:	bf38      	it	cc
 80157ea:	3208      	addcc	r2, #8
 80157ec:	6083      	str	r3, [r0, #8]
 80157ee:	bf38      	it	cc
 80157f0:	6102      	strcc	r2, [r0, #16]
 80157f2:	6903      	ldr	r3, [r0, #16]
 80157f4:	9a03      	ldr	r2, [sp, #12]
 80157f6:	f8a3 e000 	strh.w	lr, [r3]
 80157fa:	805a      	strh	r2, [r3, #2]
 80157fc:	2200      	movs	r2, #0
 80157fe:	809a      	strh	r2, [r3, #4]
 8015800:	80da      	strh	r2, [r3, #6]
 8015802:	e017      	b.n	8015834 <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 8015804:	9c05      	ldr	r4, [sp, #20]
 8015806:	114e      	asrs	r6, r1, #5
 8015808:	f001 0c1f 	and.w	ip, r1, #31
 801580c:	f8b2 8004 	ldrh.w	r8, [r2, #4]
 8015810:	f004 041f 	and.w	r4, r4, #31
 8015814:	4576      	cmp	r6, lr
 8015816:	f8b2 a006 	ldrh.w	sl, [r2, #6]
 801581a:	9402      	str	r4, [sp, #8]
 801581c:	9c04      	ldr	r4, [sp, #16]
 801581e:	eba4 0403 	sub.w	r4, r4, r3
 8015822:	d10a      	bne.n	801583a <_ZN8touchgfx7Outline10renderLineEiiii+0xb6>
 8015824:	9b02      	ldr	r3, [sp, #8]
 8015826:	44a0      	add	r8, r4
 8015828:	449c      	add	ip, r3
 801582a:	f8a2 8004 	strh.w	r8, [r2, #4]
 801582e:	fb04 a40c 	mla	r4, r4, ip, sl
 8015832:	80d4      	strh	r4, [r2, #6]
 8015834:	b013      	add	sp, #76	@ 0x4c
 8015836:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801583a:	9d05      	ldr	r5, [sp, #20]
 801583c:	1a69      	subs	r1, r5, r1
 801583e:	bf51      	iteee	pl
 8015840:	f1cc 0520 	rsbpl	r5, ip, #32
 8015844:	fb04 f40c 	mulmi.w	r4, r4, ip
 8015848:	4249      	negmi	r1, r1
 801584a:	2500      	movmi	r5, #0
 801584c:	bf5d      	ittte	pl
 801584e:	436c      	mulpl	r4, r5
 8015850:	2520      	movpl	r5, #32
 8015852:	f04f 0901 	movpl.w	r9, #1
 8015856:	f04f 39ff 	movmi.w	r9, #4294967295
 801585a:	9501      	str	r5, [sp, #4]
 801585c:	9f01      	ldr	r7, [sp, #4]
 801585e:	444e      	add	r6, r9
 8015860:	fb94 f5f1 	sdiv	r5, r4, r1
 8015864:	fb01 4415 	mls	r4, r1, r5, r4
 8015868:	44bc      	add	ip, r7
 801586a:	2c00      	cmp	r4, #0
 801586c:	bfbc      	itt	lt
 801586e:	f105 35ff 	addlt.w	r5, r5, #4294967295
 8015872:	1864      	addlt	r4, r4, r1
 8015874:	44a8      	add	r8, r5
 8015876:	fb05 ac0c 	mla	ip, r5, ip, sl
 801587a:	f8a2 8004 	strh.w	r8, [r2, #4]
 801587e:	f8a2 c006 	strh.w	ip, [r2, #6]
 8015882:	f8d0 c010 	ldr.w	ip, [r0, #16]
 8015886:	f8bc 8006 	ldrh.w	r8, [ip, #6]
 801588a:	f8bc 2004 	ldrh.w	r2, [ip, #4]
 801588e:	ea58 0202 	orrs.w	r2, r8, r2
 8015892:	d011      	beq.n	80158b8 <_ZN8touchgfx7Outline10renderLineEiiii+0x134>
 8015894:	f9bc 8002 	ldrsh.w	r8, [ip, #2]
 8015898:	f1b8 0f00 	cmp.w	r8, #0
 801589c:	db0c      	blt.n	80158b8 <_ZN8touchgfx7Outline10renderLineEiiii+0x134>
 801589e:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
 80158a0:	4590      	cmp	r8, r2
 80158a2:	da09      	bge.n	80158b8 <_ZN8touchgfx7Outline10renderLineEiiii+0x134>
 80158a4:	e9d0 2801 	ldrd	r2, r8, [r0, #4]
 80158a8:	4590      	cmp	r8, r2
 80158aa:	bf3c      	itt	cc
 80158ac:	f10c 0208 	addcc.w	r2, ip, #8
 80158b0:	6102      	strcc	r2, [r0, #16]
 80158b2:	f108 0201 	add.w	r2, r8, #1
 80158b6:	6082      	str	r2, [r0, #8]
 80158b8:	f8d0 c010 	ldr.w	ip, [r0, #16]
 80158bc:	2700      	movs	r7, #0
 80158be:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 80158c2:	45b6      	cmp	lr, r6
 80158c4:	f8ac 6000 	strh.w	r6, [ip]
 80158c8:	442b      	add	r3, r5
 80158ca:	f8ac 2002 	strh.w	r2, [ip, #2]
 80158ce:	f8ac 7004 	strh.w	r7, [ip, #4]
 80158d2:	f8ac 7006 	strh.w	r7, [ip, #6]
 80158d6:	d04b      	beq.n	8015970 <_ZN8touchgfx7Outline10renderLineEiiii+0x1ec>
 80158d8:	9f04      	ldr	r7, [sp, #16]
 80158da:	1a64      	subs	r4, r4, r1
 80158dc:	f04f 0a00 	mov.w	sl, #0
 80158e0:	1aff      	subs	r7, r7, r3
 80158e2:	443d      	add	r5, r7
 80158e4:	016d      	lsls	r5, r5, #5
 80158e6:	fb95 f8f1 	sdiv	r8, r5, r1
 80158ea:	fb01 5518 	mls	r5, r1, r8, r5
 80158ee:	2d00      	cmp	r5, #0
 80158f0:	bfbc      	itt	lt
 80158f2:	f108 38ff 	addlt.w	r8, r8, #4294967295
 80158f6:	186d      	addlt	r5, r5, r1
 80158f8:	f108 0701 	add.w	r7, r8, #1
 80158fc:	9703      	str	r7, [sp, #12]
 80158fe:	f8d0 c010 	ldr.w	ip, [r0, #16]
 8015902:	1964      	adds	r4, r4, r5
 8015904:	444e      	add	r6, r9
 8015906:	bf54      	ite	pl
 8015908:	9f03      	ldrpl	r7, [sp, #12]
 801590a:	4647      	movmi	r7, r8
 801590c:	f8bc b004 	ldrh.w	fp, [ip, #4]
 8015910:	bf58      	it	pl
 8015912:	1a64      	subpl	r4, r4, r1
 8015914:	443b      	add	r3, r7
 8015916:	44bb      	add	fp, r7
 8015918:	f8ac b004 	strh.w	fp, [ip, #4]
 801591c:	f8bc b006 	ldrh.w	fp, [ip, #6]
 8015920:	eb0b 1b47 	add.w	fp, fp, r7, lsl #5
 8015924:	f8ac b006 	strh.w	fp, [ip, #6]
 8015928:	f8d0 c010 	ldr.w	ip, [r0, #16]
 801592c:	f8bc b006 	ldrh.w	fp, [ip, #6]
 8015930:	f8bc 7004 	ldrh.w	r7, [ip, #4]
 8015934:	ea5b 0707 	orrs.w	r7, fp, r7
 8015938:	d011      	beq.n	801595e <_ZN8touchgfx7Outline10renderLineEiiii+0x1da>
 801593a:	f9bc b002 	ldrsh.w	fp, [ip, #2]
 801593e:	f1bb 0f00 	cmp.w	fp, #0
 8015942:	db0c      	blt.n	801595e <_ZN8touchgfx7Outline10renderLineEiiii+0x1da>
 8015944:	6ac7      	ldr	r7, [r0, #44]	@ 0x2c
 8015946:	45bb      	cmp	fp, r7
 8015948:	da09      	bge.n	801595e <_ZN8touchgfx7Outline10renderLineEiiii+0x1da>
 801594a:	e9d0 7b01 	ldrd	r7, fp, [r0, #4]
 801594e:	45bb      	cmp	fp, r7
 8015950:	bf3c      	itt	cc
 8015952:	f10c 0708 	addcc.w	r7, ip, #8
 8015956:	6107      	strcc	r7, [r0, #16]
 8015958:	f10b 0701 	add.w	r7, fp, #1
 801595c:	6087      	str	r7, [r0, #8]
 801595e:	6907      	ldr	r7, [r0, #16]
 8015960:	45b6      	cmp	lr, r6
 8015962:	803e      	strh	r6, [r7, #0]
 8015964:	807a      	strh	r2, [r7, #2]
 8015966:	f8a7 a004 	strh.w	sl, [r7, #4]
 801596a:	f8a7 a006 	strh.w	sl, [r7, #6]
 801596e:	d1c6      	bne.n	80158fe <_ZN8touchgfx7Outline10renderLineEiiii+0x17a>
 8015970:	9a04      	ldr	r2, [sp, #16]
 8015972:	1ad3      	subs	r3, r2, r3
 8015974:	6902      	ldr	r2, [r0, #16]
 8015976:	8891      	ldrh	r1, [r2, #4]
 8015978:	88d6      	ldrh	r6, [r2, #6]
 801597a:	4419      	add	r1, r3
 801597c:	8091      	strh	r1, [r2, #4]
 801597e:	9902      	ldr	r1, [sp, #8]
 8015980:	f101 0c20 	add.w	ip, r1, #32
 8015984:	9901      	ldr	r1, [sp, #4]
 8015986:	ebac 0c01 	sub.w	ip, ip, r1
 801598a:	fb03 630c 	mla	r3, r3, ip, r6
 801598e:	80d3      	strh	r3, [r2, #6]
 8015990:	e750      	b.n	8015834 <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 8015992:	9d05      	ldr	r5, [sp, #20]
 8015994:	1aa2      	subs	r2, r4, r2
 8015996:	eba5 0501 	sub.w	r5, r5, r1
 801599a:	9202      	str	r2, [sp, #8]
 801599c:	9508      	str	r5, [sp, #32]
 801599e:	f140 8128 	bpl.w	8015bf2 <_ZN8touchgfx7Outline10renderLineEiiii+0x46e>
 80159a2:	9a03      	ldr	r2, [sp, #12]
 80159a4:	2a00      	cmp	r2, #0
 80159a6:	f6ff af45 	blt.w	8015834 <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 80159aa:	9a02      	ldr	r2, [sp, #8]
 80159ac:	f04f 34ff 	mov.w	r4, #4294967295
 80159b0:	4252      	negs	r2, r2
 80159b2:	940b      	str	r4, [sp, #44]	@ 0x2c
 80159b4:	2400      	movs	r4, #0
 80159b6:	9202      	str	r2, [sp, #8]
 80159b8:	9a06      	ldr	r2, [sp, #24]
 80159ba:	ea42 72e2 	orr.w	r2, r2, r2, asr #31
 80159be:	9206      	str	r2, [sp, #24]
 80159c0:	462a      	mov	r2, r5
 80159c2:	435a      	muls	r2, r3
 80159c4:	9401      	str	r4, [sp, #4]
 80159c6:	9c02      	ldr	r4, [sp, #8]
 80159c8:	9d02      	ldr	r5, [sp, #8]
 80159ca:	fb92 f4f4 	sdiv	r4, r2, r4
 80159ce:	fb05 2214 	mls	r2, r5, r4, r2
 80159d2:	2a00      	cmp	r2, #0
 80159d4:	9207      	str	r2, [sp, #28]
 80159d6:	bfbc      	itt	lt
 80159d8:	1952      	addlt	r2, r2, r5
 80159da:	f104 34ff 	addlt.w	r4, r4, #4294967295
 80159de:	6905      	ldr	r5, [r0, #16]
 80159e0:	bfb8      	it	lt
 80159e2:	9207      	strlt	r2, [sp, #28]
 80159e4:	eb04 0901 	add.w	r9, r4, r1
 80159e8:	9a01      	ldr	r2, [sp, #4]
 80159ea:	ea4f 1669 	mov.w	r6, r9, asr #5
 80159ee:	429a      	cmp	r2, r3
 80159f0:	f040 8111 	bne.w	8015c16 <_ZN8touchgfx7Outline10renderLineEiiii+0x492>
 80159f4:	f9b5 3000 	ldrsh.w	r3, [r5]
 80159f8:	429e      	cmp	r6, r3
 80159fa:	d104      	bne.n	8015a06 <_ZN8touchgfx7Outline10renderLineEiiii+0x282>
 80159fc:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 8015a00:	9a03      	ldr	r2, [sp, #12]
 8015a02:	429a      	cmp	r2, r3
 8015a04:	d01b      	beq.n	8015a3e <_ZN8touchgfx7Outline10renderLineEiiii+0x2ba>
 8015a06:	88ea      	ldrh	r2, [r5, #6]
 8015a08:	88ab      	ldrh	r3, [r5, #4]
 8015a0a:	4313      	orrs	r3, r2
 8015a0c:	d010      	beq.n	8015a30 <_ZN8touchgfx7Outline10renderLineEiiii+0x2ac>
 8015a0e:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 8015a12:	2a00      	cmp	r2, #0
 8015a14:	db0c      	blt.n	8015a30 <_ZN8touchgfx7Outline10renderLineEiiii+0x2ac>
 8015a16:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8015a18:	429a      	cmp	r2, r3
 8015a1a:	da09      	bge.n	8015a30 <_ZN8touchgfx7Outline10renderLineEiiii+0x2ac>
 8015a1c:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
 8015a20:	429a      	cmp	r2, r3
 8015a22:	f102 0201 	add.w	r2, r2, #1
 8015a26:	bf38      	it	cc
 8015a28:	3508      	addcc	r5, #8
 8015a2a:	6082      	str	r2, [r0, #8]
 8015a2c:	bf38      	it	cc
 8015a2e:	6105      	strcc	r5, [r0, #16]
 8015a30:	6903      	ldr	r3, [r0, #16]
 8015a32:	9a03      	ldr	r2, [sp, #12]
 8015a34:	801e      	strh	r6, [r3, #0]
 8015a36:	805a      	strh	r2, [r3, #2]
 8015a38:	2200      	movs	r2, #0
 8015a3a:	809a      	strh	r2, [r3, #4]
 8015a3c:	80da      	strh	r2, [r3, #6]
 8015a3e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8015a40:	9a03      	ldr	r2, [sp, #12]
 8015a42:	6901      	ldr	r1, [r0, #16]
 8015a44:	441a      	add	r2, r3
 8015a46:	f9b1 3000 	ldrsh.w	r3, [r1]
 8015a4a:	42b3      	cmp	r3, r6
 8015a4c:	d103      	bne.n	8015a56 <_ZN8touchgfx7Outline10renderLineEiiii+0x2d2>
 8015a4e:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 8015a52:	429a      	cmp	r2, r3
 8015a54:	d01a      	beq.n	8015a8c <_ZN8touchgfx7Outline10renderLineEiiii+0x308>
 8015a56:	88cc      	ldrh	r4, [r1, #6]
 8015a58:	888b      	ldrh	r3, [r1, #4]
 8015a5a:	4323      	orrs	r3, r4
 8015a5c:	d010      	beq.n	8015a80 <_ZN8touchgfx7Outline10renderLineEiiii+0x2fc>
 8015a5e:	f9b1 4002 	ldrsh.w	r4, [r1, #2]
 8015a62:	2c00      	cmp	r4, #0
 8015a64:	db0c      	blt.n	8015a80 <_ZN8touchgfx7Outline10renderLineEiiii+0x2fc>
 8015a66:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8015a68:	429c      	cmp	r4, r3
 8015a6a:	da09      	bge.n	8015a80 <_ZN8touchgfx7Outline10renderLineEiiii+0x2fc>
 8015a6c:	e9d0 3401 	ldrd	r3, r4, [r0, #4]
 8015a70:	429c      	cmp	r4, r3
 8015a72:	f104 0401 	add.w	r4, r4, #1
 8015a76:	bf38      	it	cc
 8015a78:	3108      	addcc	r1, #8
 8015a7a:	6084      	str	r4, [r0, #8]
 8015a7c:	bf38      	it	cc
 8015a7e:	6101      	strcc	r1, [r0, #16]
 8015a80:	6903      	ldr	r3, [r0, #16]
 8015a82:	2100      	movs	r1, #0
 8015a84:	801e      	strh	r6, [r3, #0]
 8015a86:	805a      	strh	r2, [r3, #2]
 8015a88:	8099      	strh	r1, [r3, #4]
 8015a8a:	80d9      	strh	r1, [r3, #6]
 8015a8c:	9b06      	ldr	r3, [sp, #24]
 8015a8e:	4293      	cmp	r3, r2
 8015a90:	f000 8082 	beq.w	8015b98 <_ZN8touchgfx7Outline10renderLineEiiii+0x414>
 8015a94:	9b08      	ldr	r3, [sp, #32]
 8015a96:	9902      	ldr	r1, [sp, #8]
 8015a98:	015b      	lsls	r3, r3, #5
 8015a9a:	9c02      	ldr	r4, [sp, #8]
 8015a9c:	fb93 f1f1 	sdiv	r1, r3, r1
 8015aa0:	fb04 3311 	mls	r3, r4, r1, r3
 8015aa4:	9103      	str	r1, [sp, #12]
 8015aa6:	2b00      	cmp	r3, #0
 8015aa8:	9308      	str	r3, [sp, #32]
 8015aaa:	da04      	bge.n	8015ab6 <_ZN8touchgfx7Outline10renderLineEiiii+0x332>
 8015aac:	1e4b      	subs	r3, r1, #1
 8015aae:	9303      	str	r3, [sp, #12]
 8015ab0:	9b08      	ldr	r3, [sp, #32]
 8015ab2:	4423      	add	r3, r4
 8015ab4:	9308      	str	r3, [sp, #32]
 8015ab6:	9b07      	ldr	r3, [sp, #28]
 8015ab8:	464f      	mov	r7, r9
 8015aba:	9902      	ldr	r1, [sp, #8]
 8015abc:	2600      	movs	r6, #0
 8015abe:	1a5b      	subs	r3, r3, r1
 8015ac0:	9307      	str	r3, [sp, #28]
 8015ac2:	9b01      	ldr	r3, [sp, #4]
 8015ac4:	f1c3 0320 	rsb	r3, r3, #32
 8015ac8:	930e      	str	r3, [sp, #56]	@ 0x38
 8015aca:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8015acc:	9b01      	ldr	r3, [sp, #4]
 8015ace:	1a5b      	subs	r3, r3, r1
 8015ad0:	930a      	str	r3, [sp, #40]	@ 0x28
 8015ad2:	e9dd 3107 	ldrd	r3, r1, [sp, #28]
 8015ad6:	185b      	adds	r3, r3, r1
 8015ad8:	bf58      	it	pl
 8015ada:	9902      	ldrpl	r1, [sp, #8]
 8015adc:	9307      	str	r3, [sp, #28]
 8015ade:	bf57      	itett	pl
 8015ae0:	1a5b      	subpl	r3, r3, r1
 8015ae2:	9903      	ldrmi	r1, [sp, #12]
 8015ae4:	9307      	strpl	r3, [sp, #28]
 8015ae6:	9b03      	ldrpl	r3, [sp, #12]
 8015ae8:	bf58      	it	pl
 8015aea:	1c59      	addpl	r1, r3, #1
 8015aec:	2a00      	cmp	r2, #0
 8015aee:	4489      	add	r9, r1
 8015af0:	ea4f 1a69 	mov.w	sl, r9, asr #5
 8015af4:	db2e      	blt.n	8015b54 <_ZN8touchgfx7Outline10renderLineEiiii+0x3d0>
 8015af6:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8015af8:	4293      	cmp	r3, r2
 8015afa:	dd2b      	ble.n	8015b54 <_ZN8touchgfx7Outline10renderLineEiiii+0x3d0>
 8015afc:	9c01      	ldr	r4, [sp, #4]
 8015afe:	6905      	ldr	r5, [r0, #16]
 8015b00:	46a0      	mov	r8, r4
 8015b02:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 8015b04:	f9b5 c004 	ldrsh.w	ip, [r5, #4]
 8015b08:	45a0      	cmp	r8, r4
 8015b0a:	f9b5 e006 	ldrsh.w	lr, [r5, #6]
 8015b0e:	f040 814c 	bne.w	8015daa <_ZN8touchgfx7Outline10renderLineEiiii+0x626>
 8015b12:	f9b5 1000 	ldrsh.w	r1, [r5]
 8015b16:	4551      	cmp	r1, sl
 8015b18:	d103      	bne.n	8015b22 <_ZN8touchgfx7Outline10renderLineEiiii+0x39e>
 8015b1a:	f9b5 1002 	ldrsh.w	r1, [r5, #2]
 8015b1e:	4291      	cmp	r1, r2
 8015b20:	d018      	beq.n	8015b54 <_ZN8touchgfx7Outline10renderLineEiiii+0x3d0>
 8015b22:	ea5c 010e 	orrs.w	r1, ip, lr
 8015b26:	d00f      	beq.n	8015b48 <_ZN8touchgfx7Outline10renderLineEiiii+0x3c4>
 8015b28:	f9b5 1002 	ldrsh.w	r1, [r5, #2]
 8015b2c:	2900      	cmp	r1, #0
 8015b2e:	db0b      	blt.n	8015b48 <_ZN8touchgfx7Outline10renderLineEiiii+0x3c4>
 8015b30:	428b      	cmp	r3, r1
 8015b32:	dd09      	ble.n	8015b48 <_ZN8touchgfx7Outline10renderLineEiiii+0x3c4>
 8015b34:	e9d0 3101 	ldrd	r3, r1, [r0, #4]
 8015b38:	4299      	cmp	r1, r3
 8015b3a:	f101 0101 	add.w	r1, r1, #1
 8015b3e:	bf38      	it	cc
 8015b40:	3508      	addcc	r5, #8
 8015b42:	6081      	str	r1, [r0, #8]
 8015b44:	bf38      	it	cc
 8015b46:	6105      	strcc	r5, [r0, #16]
 8015b48:	6903      	ldr	r3, [r0, #16]
 8015b4a:	f8a3 a000 	strh.w	sl, [r3]
 8015b4e:	805a      	strh	r2, [r3, #2]
 8015b50:	809e      	strh	r6, [r3, #4]
 8015b52:	80de      	strh	r6, [r3, #6]
 8015b54:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8015b56:	6901      	ldr	r1, [r0, #16]
 8015b58:	441a      	add	r2, r3
 8015b5a:	88cc      	ldrh	r4, [r1, #6]
 8015b5c:	888b      	ldrh	r3, [r1, #4]
 8015b5e:	4323      	orrs	r3, r4
 8015b60:	d010      	beq.n	8015b84 <_ZN8touchgfx7Outline10renderLineEiiii+0x400>
 8015b62:	f9b1 4002 	ldrsh.w	r4, [r1, #2]
 8015b66:	2c00      	cmp	r4, #0
 8015b68:	db0c      	blt.n	8015b84 <_ZN8touchgfx7Outline10renderLineEiiii+0x400>
 8015b6a:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8015b6c:	429c      	cmp	r4, r3
 8015b6e:	da09      	bge.n	8015b84 <_ZN8touchgfx7Outline10renderLineEiiii+0x400>
 8015b70:	e9d0 3401 	ldrd	r3, r4, [r0, #4]
 8015b74:	429c      	cmp	r4, r3
 8015b76:	f104 0401 	add.w	r4, r4, #1
 8015b7a:	bf38      	it	cc
 8015b7c:	3108      	addcc	r1, #8
 8015b7e:	6084      	str	r4, [r0, #8]
 8015b80:	bf38      	it	cc
 8015b82:	6101      	strcc	r1, [r0, #16]
 8015b84:	6903      	ldr	r3, [r0, #16]
 8015b86:	464f      	mov	r7, r9
 8015b88:	f8a3 a000 	strh.w	sl, [r3]
 8015b8c:	805a      	strh	r2, [r3, #2]
 8015b8e:	809e      	strh	r6, [r3, #4]
 8015b90:	80de      	strh	r6, [r3, #6]
 8015b92:	9b06      	ldr	r3, [sp, #24]
 8015b94:	4293      	cmp	r3, r2
 8015b96:	d19c      	bne.n	8015ad2 <_ZN8touchgfx7Outline10renderLineEiiii+0x34e>
 8015b98:	9b01      	ldr	r3, [sp, #4]
 8015b9a:	6907      	ldr	r7, [r0, #16]
 8015b9c:	f1c3 0620 	rsb	r6, r3, #32
 8015ba0:	9b05      	ldr	r3, [sp, #20]
 8015ba2:	ea4f 1e63 	mov.w	lr, r3, asr #5
 8015ba6:	9b04      	ldr	r3, [sp, #16]
 8015ba8:	429e      	cmp	r6, r3
 8015baa:	f040 81c7 	bne.w	8015f3c <_ZN8touchgfx7Outline10renderLineEiiii+0x7b8>
 8015bae:	f9b7 3000 	ldrsh.w	r3, [r7]
 8015bb2:	459e      	cmp	lr, r3
 8015bb4:	d104      	bne.n	8015bc0 <_ZN8touchgfx7Outline10renderLineEiiii+0x43c>
 8015bb6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8015bba:	429a      	cmp	r2, r3
 8015bbc:	f43f ae3a 	beq.w	8015834 <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 8015bc0:	88f9      	ldrh	r1, [r7, #6]
 8015bc2:	88bb      	ldrh	r3, [r7, #4]
 8015bc4:	430b      	orrs	r3, r1
 8015bc6:	d010      	beq.n	8015bea <_ZN8touchgfx7Outline10renderLineEiiii+0x466>
 8015bc8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8015bcc:	2b00      	cmp	r3, #0
 8015bce:	db0c      	blt.n	8015bea <_ZN8touchgfx7Outline10renderLineEiiii+0x466>
 8015bd0:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 8015bd2:	428b      	cmp	r3, r1
 8015bd4:	da09      	bge.n	8015bea <_ZN8touchgfx7Outline10renderLineEiiii+0x466>
 8015bd6:	e9d0 1301 	ldrd	r1, r3, [r0, #4]
 8015bda:	428b      	cmp	r3, r1
 8015bdc:	f103 0301 	add.w	r3, r3, #1
 8015be0:	bf38      	it	cc
 8015be2:	3708      	addcc	r7, #8
 8015be4:	6083      	str	r3, [r0, #8]
 8015be6:	bf38      	it	cc
 8015be8:	6107      	strcc	r7, [r0, #16]
 8015bea:	6903      	ldr	r3, [r0, #16]
 8015bec:	f8a3 e000 	strh.w	lr, [r3]
 8015bf0:	e603      	b.n	80157fa <_ZN8touchgfx7Outline10renderLineEiiii+0x76>
 8015bf2:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
 8015bf4:	9c03      	ldr	r4, [sp, #12]
 8015bf6:	42a2      	cmp	r2, r4
 8015bf8:	f6ff ae1c 	blt.w	8015834 <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 8015bfc:	9c06      	ldr	r4, [sp, #24]
 8015bfe:	42a2      	cmp	r2, r4
 8015c00:	9c08      	ldr	r4, [sp, #32]
 8015c02:	bfbc      	itt	lt
 8015c04:	3201      	addlt	r2, #1
 8015c06:	9206      	strlt	r2, [sp, #24]
 8015c08:	f1c3 0220 	rsb	r2, r3, #32
 8015c0c:	4362      	muls	r2, r4
 8015c0e:	2401      	movs	r4, #1
 8015c10:	940b      	str	r4, [sp, #44]	@ 0x2c
 8015c12:	2420      	movs	r4, #32
 8015c14:	e6d6      	b.n	80159c4 <_ZN8touchgfx7Outline10renderLineEiiii+0x240>
 8015c16:	ea4f 1861 	mov.w	r8, r1, asr #5
 8015c1a:	f009 021f 	and.w	r2, r9, #31
 8015c1e:	f001 011f 	and.w	r1, r1, #31
 8015c22:	f8b5 e004 	ldrh.w	lr, [r5, #4]
 8015c26:	920c      	str	r2, [sp, #48]	@ 0x30
 8015c28:	45b0      	cmp	r8, r6
 8015c2a:	9a01      	ldr	r2, [sp, #4]
 8015c2c:	f8b5 a006 	ldrh.w	sl, [r5, #6]
 8015c30:	eba2 0203 	sub.w	r2, r2, r3
 8015c34:	d108      	bne.n	8015c48 <_ZN8touchgfx7Outline10renderLineEiiii+0x4c4>
 8015c36:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8015c38:	4496      	add	lr, r2
 8015c3a:	4419      	add	r1, r3
 8015c3c:	f8a5 e004 	strh.w	lr, [r5, #4]
 8015c40:	fb02 a101 	mla	r1, r2, r1, sl
 8015c44:	80e9      	strh	r1, [r5, #6]
 8015c46:	e6fa      	b.n	8015a3e <_ZN8touchgfx7Outline10renderLineEiiii+0x2ba>
 8015c48:	2c00      	cmp	r4, #0
 8015c4a:	f2c0 80a7 	blt.w	8015d9c <_ZN8touchgfx7Outline10renderLineEiiii+0x618>
 8015c4e:	2701      	movs	r7, #1
 8015c50:	f1c1 0c20 	rsb	ip, r1, #32
 8015c54:	970a      	str	r7, [sp, #40]	@ 0x28
 8015c56:	2720      	movs	r7, #32
 8015c58:	fb02 f20c 	mul.w	r2, r2, ip
 8015c5c:	9709      	str	r7, [sp, #36]	@ 0x24
 8015c5e:	9f09      	ldr	r7, [sp, #36]	@ 0x24
 8015c60:	fb92 fcf4 	sdiv	ip, r2, r4
 8015c64:	fb04 221c 	mls	r2, r4, ip, r2
 8015c68:	4439      	add	r1, r7
 8015c6a:	2a00      	cmp	r2, #0
 8015c6c:	bfbc      	itt	lt
 8015c6e:	f10c 3cff 	addlt.w	ip, ip, #4294967295
 8015c72:	1912      	addlt	r2, r2, r4
 8015c74:	fb0c a101 	mla	r1, ip, r1, sl
 8015c78:	44e6      	add	lr, ip
 8015c7a:	80e9      	strh	r1, [r5, #6]
 8015c7c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8015c7e:	f8a5 e004 	strh.w	lr, [r5, #4]
 8015c82:	eb08 0501 	add.w	r5, r8, r1
 8015c86:	6901      	ldr	r1, [r0, #16]
 8015c88:	f8b1 8006 	ldrh.w	r8, [r1, #6]
 8015c8c:	f8b1 e004 	ldrh.w	lr, [r1, #4]
 8015c90:	ea58 070e 	orrs.w	r7, r8, lr
 8015c94:	d010      	beq.n	8015cb8 <_ZN8touchgfx7Outline10renderLineEiiii+0x534>
 8015c96:	f9b1 e002 	ldrsh.w	lr, [r1, #2]
 8015c9a:	f1be 0f00 	cmp.w	lr, #0
 8015c9e:	db0b      	blt.n	8015cb8 <_ZN8touchgfx7Outline10renderLineEiiii+0x534>
 8015ca0:	6ac7      	ldr	r7, [r0, #44]	@ 0x2c
 8015ca2:	45be      	cmp	lr, r7
 8015ca4:	da08      	bge.n	8015cb8 <_ZN8touchgfx7Outline10renderLineEiiii+0x534>
 8015ca6:	e9d0 7e01 	ldrd	r7, lr, [r0, #4]
 8015caa:	45be      	cmp	lr, r7
 8015cac:	bf3c      	itt	cc
 8015cae:	3108      	addcc	r1, #8
 8015cb0:	6101      	strcc	r1, [r0, #16]
 8015cb2:	f10e 0101 	add.w	r1, lr, #1
 8015cb6:	6081      	str	r1, [r0, #8]
 8015cb8:	6901      	ldr	r1, [r0, #16]
 8015cba:	f04f 0e00 	mov.w	lr, #0
 8015cbe:	f9bd 800c 	ldrsh.w	r8, [sp, #12]
 8015cc2:	42ae      	cmp	r6, r5
 8015cc4:	800d      	strh	r5, [r1, #0]
 8015cc6:	4463      	add	r3, ip
 8015cc8:	f8a1 8002 	strh.w	r8, [r1, #2]
 8015ccc:	f8a1 e004 	strh.w	lr, [r1, #4]
 8015cd0:	f8a1 e006 	strh.w	lr, [r1, #6]
 8015cd4:	d053      	beq.n	8015d7e <_ZN8touchgfx7Outline10renderLineEiiii+0x5fa>
 8015cd6:	9901      	ldr	r1, [sp, #4]
 8015cd8:	1b12      	subs	r2, r2, r4
 8015cda:	1ac9      	subs	r1, r1, r3
 8015cdc:	4461      	add	r1, ip
 8015cde:	0149      	lsls	r1, r1, #5
 8015ce0:	fb91 fef4 	sdiv	lr, r1, r4
 8015ce4:	fb04 111e 	mls	r1, r4, lr, r1
 8015ce8:	2900      	cmp	r1, #0
 8015cea:	bfbc      	itt	lt
 8015cec:	f10e 3eff 	addlt.w	lr, lr, #4294967295
 8015cf0:	1909      	addlt	r1, r1, r4
 8015cf2:	f10e 0701 	add.w	r7, lr, #1
 8015cf6:	970d      	str	r7, [sp, #52]	@ 0x34
 8015cf8:	f8d0 a010 	ldr.w	sl, [r0, #16]
 8015cfc:	1852      	adds	r2, r2, r1
 8015cfe:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
 8015d00:	bf54      	ite	pl
 8015d02:	f8dd c034 	ldrpl.w	ip, [sp, #52]	@ 0x34
 8015d06:	46f4      	movmi	ip, lr
 8015d08:	f8ba b004 	ldrh.w	fp, [sl, #4]
 8015d0c:	bf58      	it	pl
 8015d0e:	1b12      	subpl	r2, r2, r4
 8015d10:	4463      	add	r3, ip
 8015d12:	443d      	add	r5, r7
 8015d14:	44e3      	add	fp, ip
 8015d16:	f8aa b004 	strh.w	fp, [sl, #4]
 8015d1a:	f8ba b006 	ldrh.w	fp, [sl, #6]
 8015d1e:	eb0b 1b4c 	add.w	fp, fp, ip, lsl #5
 8015d22:	f8aa b006 	strh.w	fp, [sl, #6]
 8015d26:	f8d0 c010 	ldr.w	ip, [r0, #16]
 8015d2a:	f8bc b006 	ldrh.w	fp, [ip, #6]
 8015d2e:	f8bc a004 	ldrh.w	sl, [ip, #4]
 8015d32:	ea5b 070a 	orrs.w	r7, fp, sl
 8015d36:	d014      	beq.n	8015d62 <_ZN8touchgfx7Outline10renderLineEiiii+0x5de>
 8015d38:	f9bc a002 	ldrsh.w	sl, [ip, #2]
 8015d3c:	f1ba 0f00 	cmp.w	sl, #0
 8015d40:	db0f      	blt.n	8015d62 <_ZN8touchgfx7Outline10renderLineEiiii+0x5de>
 8015d42:	6ac7      	ldr	r7, [r0, #44]	@ 0x2c
 8015d44:	45ba      	cmp	sl, r7
 8015d46:	da0c      	bge.n	8015d62 <_ZN8touchgfx7Outline10renderLineEiiii+0x5de>
 8015d48:	e9d0 7a01 	ldrd	r7, sl, [r0, #4]
 8015d4c:	45ba      	cmp	sl, r7
 8015d4e:	f10a 0a01 	add.w	sl, sl, #1
 8015d52:	bf38      	it	cc
 8015d54:	f10c 0c08 	addcc.w	ip, ip, #8
 8015d58:	f8c0 a008 	str.w	sl, [r0, #8]
 8015d5c:	bf38      	it	cc
 8015d5e:	f8c0 c010 	strcc.w	ip, [r0, #16]
 8015d62:	f8d0 c010 	ldr.w	ip, [r0, #16]
 8015d66:	f04f 0700 	mov.w	r7, #0
 8015d6a:	42ae      	cmp	r6, r5
 8015d6c:	f8ac 5000 	strh.w	r5, [ip]
 8015d70:	f8ac 8002 	strh.w	r8, [ip, #2]
 8015d74:	f8ac 7004 	strh.w	r7, [ip, #4]
 8015d78:	f8ac 7006 	strh.w	r7, [ip, #6]
 8015d7c:	d1bc      	bne.n	8015cf8 <_ZN8touchgfx7Outline10renderLineEiiii+0x574>
 8015d7e:	6904      	ldr	r4, [r0, #16]
 8015d80:	9a01      	ldr	r2, [sp, #4]
 8015d82:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8015d84:	1ad3      	subs	r3, r2, r3
 8015d86:	88a2      	ldrh	r2, [r4, #4]
 8015d88:	3120      	adds	r1, #32
 8015d8a:	441a      	add	r2, r3
 8015d8c:	80a2      	strh	r2, [r4, #4]
 8015d8e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8015d90:	1a89      	subs	r1, r1, r2
 8015d92:	88e2      	ldrh	r2, [r4, #6]
 8015d94:	fb03 2301 	mla	r3, r3, r1, r2
 8015d98:	80e3      	strh	r3, [r4, #6]
 8015d9a:	e650      	b.n	8015a3e <_ZN8touchgfx7Outline10renderLineEiiii+0x2ba>
 8015d9c:	f04f 37ff 	mov.w	r7, #4294967295
 8015da0:	434a      	muls	r2, r1
 8015da2:	4264      	negs	r4, r4
 8015da4:	970a      	str	r7, [sp, #40]	@ 0x28
 8015da6:	2700      	movs	r7, #0
 8015da8:	e758      	b.n	8015c5c <_ZN8touchgfx7Outline10renderLineEiiii+0x4d8>
 8015daa:	ea4f 1867 	mov.w	r8, r7, asr #5
 8015dae:	f009 031f 	and.w	r3, r9, #31
 8015db2:	f007 071f 	and.w	r7, r7, #31
 8015db6:	fa1f fc8c 	uxth.w	ip, ip
 8015dba:	45d0      	cmp	r8, sl
 8015dbc:	930f      	str	r3, [sp, #60]	@ 0x3c
 8015dbe:	fa1f fe8e 	uxth.w	lr, lr
 8015dc2:	d10a      	bne.n	8015dda <_ZN8touchgfx7Outline10renderLineEiiii+0x656>
 8015dc4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8015dc6:	449c      	add	ip, r3
 8015dc8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8015dca:	441f      	add	r7, r3
 8015dcc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8015dce:	f8a5 c004 	strh.w	ip, [r5, #4]
 8015dd2:	fb03 e707 	mla	r7, r3, r7, lr
 8015dd6:	80ef      	strh	r7, [r5, #6]
 8015dd8:	e6bc      	b.n	8015b54 <_ZN8touchgfx7Outline10renderLineEiiii+0x3d0>
 8015dda:	2900      	cmp	r1, #0
 8015ddc:	f2c0 80a6 	blt.w	8015f2c <_ZN8touchgfx7Outline10renderLineEiiii+0x7a8>
 8015de0:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8015de2:	f1c7 0320 	rsb	r3, r7, #32
 8015de6:	4363      	muls	r3, r4
 8015de8:	2401      	movs	r4, #1
 8015dea:	940d      	str	r4, [sp, #52]	@ 0x34
 8015dec:	2420      	movs	r4, #32
 8015dee:	940c      	str	r4, [sp, #48]	@ 0x30
 8015df0:	fb93 f4f1 	sdiv	r4, r3, r1
 8015df4:	fb01 3b14 	mls	fp, r1, r4, r3
 8015df8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8015dfa:	f1bb 0f00 	cmp.w	fp, #0
 8015dfe:	441f      	add	r7, r3
 8015e00:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8015e02:	bfbc      	itt	lt
 8015e04:	f104 34ff 	addlt.w	r4, r4, #4294967295
 8015e08:	448b      	addlt	fp, r1
 8015e0a:	fb04 e707 	mla	r7, r4, r7, lr
 8015e0e:	44a4      	add	ip, r4
 8015e10:	80ef      	strh	r7, [r5, #6]
 8015e12:	f8a5 c004 	strh.w	ip, [r5, #4]
 8015e16:	eb08 0503 	add.w	r5, r8, r3
 8015e1a:	f8d0 c010 	ldr.w	ip, [r0, #16]
 8015e1e:	f8bc e006 	ldrh.w	lr, [ip, #6]
 8015e22:	f8bc 7004 	ldrh.w	r7, [ip, #4]
 8015e26:	ea5e 0307 	orrs.w	r3, lr, r7
 8015e2a:	d011      	beq.n	8015e50 <_ZN8touchgfx7Outline10renderLineEiiii+0x6cc>
 8015e2c:	f9bc e002 	ldrsh.w	lr, [ip, #2]
 8015e30:	f1be 0f00 	cmp.w	lr, #0
 8015e34:	db0c      	blt.n	8015e50 <_ZN8touchgfx7Outline10renderLineEiiii+0x6cc>
 8015e36:	6ac7      	ldr	r7, [r0, #44]	@ 0x2c
 8015e38:	45be      	cmp	lr, r7
 8015e3a:	da09      	bge.n	8015e50 <_ZN8touchgfx7Outline10renderLineEiiii+0x6cc>
 8015e3c:	e9d0 7e01 	ldrd	r7, lr, [r0, #4]
 8015e40:	45be      	cmp	lr, r7
 8015e42:	bf3c      	itt	cc
 8015e44:	f10c 0708 	addcc.w	r7, ip, #8
 8015e48:	6107      	strcc	r7, [r0, #16]
 8015e4a:	f10e 0701 	add.w	r7, lr, #1
 8015e4e:	6087      	str	r7, [r0, #8]
 8015e50:	6907      	ldr	r7, [r0, #16]
 8015e52:	b213      	sxth	r3, r2
 8015e54:	4555      	cmp	r5, sl
 8015e56:	9310      	str	r3, [sp, #64]	@ 0x40
 8015e58:	807b      	strh	r3, [r7, #2]
 8015e5a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8015e5c:	803d      	strh	r5, [r7, #0]
 8015e5e:	80be      	strh	r6, [r7, #4]
 8015e60:	eb04 0c03 	add.w	ip, r4, r3
 8015e64:	80fe      	strh	r6, [r7, #6]
 8015e66:	d050      	beq.n	8015f0a <_ZN8touchgfx7Outline10renderLineEiiii+0x786>
 8015e68:	9b01      	ldr	r3, [sp, #4]
 8015e6a:	eba3 070c 	sub.w	r7, r3, ip
 8015e6e:	ebab 0301 	sub.w	r3, fp, r1
 8015e72:	443c      	add	r4, r7
 8015e74:	9309      	str	r3, [sp, #36]	@ 0x24
 8015e76:	0164      	lsls	r4, r4, #5
 8015e78:	fb94 f8f1 	sdiv	r8, r4, r1
 8015e7c:	fb01 4418 	mls	r4, r1, r8, r4
 8015e80:	2c00      	cmp	r4, #0
 8015e82:	bfbc      	itt	lt
 8015e84:	f108 38ff 	addlt.w	r8, r8, #4294967295
 8015e88:	1864      	addlt	r4, r4, r1
 8015e8a:	f108 0701 	add.w	r7, r8, #1
 8015e8e:	9711      	str	r7, [sp, #68]	@ 0x44
 8015e90:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015e92:	f8d0 e010 	ldr.w	lr, [r0, #16]
 8015e96:	191b      	adds	r3, r3, r4
 8015e98:	f8be b004 	ldrh.w	fp, [lr, #4]
 8015e9c:	bf54      	ite	pl
 8015e9e:	9f11      	ldrpl	r7, [sp, #68]	@ 0x44
 8015ea0:	4647      	movmi	r7, r8
 8015ea2:	9309      	str	r3, [sp, #36]	@ 0x24
 8015ea4:	bf58      	it	pl
 8015ea6:	1a5b      	subpl	r3, r3, r1
 8015ea8:	44bb      	add	fp, r7
 8015eaa:	44bc      	add	ip, r7
 8015eac:	bf58      	it	pl
 8015eae:	9309      	strpl	r3, [sp, #36]	@ 0x24
 8015eb0:	f8ae b004 	strh.w	fp, [lr, #4]
 8015eb4:	f8be b006 	ldrh.w	fp, [lr, #6]
 8015eb8:	eb0b 1b47 	add.w	fp, fp, r7, lsl #5
 8015ebc:	9f0d      	ldr	r7, [sp, #52]	@ 0x34
 8015ebe:	f8ae b006 	strh.w	fp, [lr, #6]
 8015ec2:	443d      	add	r5, r7
 8015ec4:	f8d0 e010 	ldr.w	lr, [r0, #16]
 8015ec8:	f8be b006 	ldrh.w	fp, [lr, #6]
 8015ecc:	f8be 7004 	ldrh.w	r7, [lr, #4]
 8015ed0:	ea5b 0307 	orrs.w	r3, fp, r7
 8015ed4:	d011      	beq.n	8015efa <_ZN8touchgfx7Outline10renderLineEiiii+0x776>
 8015ed6:	f9be b002 	ldrsh.w	fp, [lr, #2]
 8015eda:	f1bb 0f00 	cmp.w	fp, #0
 8015ede:	db0c      	blt.n	8015efa <_ZN8touchgfx7Outline10renderLineEiiii+0x776>
 8015ee0:	6ac7      	ldr	r7, [r0, #44]	@ 0x2c
 8015ee2:	45bb      	cmp	fp, r7
 8015ee4:	da09      	bge.n	8015efa <_ZN8touchgfx7Outline10renderLineEiiii+0x776>
 8015ee6:	e9d0 7b01 	ldrd	r7, fp, [r0, #4]
 8015eea:	45bb      	cmp	fp, r7
 8015eec:	bf3c      	itt	cc
 8015eee:	f10e 0708 	addcc.w	r7, lr, #8
 8015ef2:	6107      	strcc	r7, [r0, #16]
 8015ef4:	f10b 0701 	add.w	r7, fp, #1
 8015ef8:	6087      	str	r7, [r0, #8]
 8015efa:	6907      	ldr	r7, [r0, #16]
 8015efc:	4555      	cmp	r5, sl
 8015efe:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8015f00:	803d      	strh	r5, [r7, #0]
 8015f02:	807b      	strh	r3, [r7, #2]
 8015f04:	80be      	strh	r6, [r7, #4]
 8015f06:	80fe      	strh	r6, [r7, #6]
 8015f08:	d1c2      	bne.n	8015e90 <_ZN8touchgfx7Outline10renderLineEiiii+0x70c>
 8015f0a:	9b01      	ldr	r3, [sp, #4]
 8015f0c:	9f0f      	ldr	r7, [sp, #60]	@ 0x3c
 8015f0e:	eba3 0c0c 	sub.w	ip, r3, ip
 8015f12:	6903      	ldr	r3, [r0, #16]
 8015f14:	3720      	adds	r7, #32
 8015f16:	8899      	ldrh	r1, [r3, #4]
 8015f18:	4461      	add	r1, ip
 8015f1a:	8099      	strh	r1, [r3, #4]
 8015f1c:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8015f1e:	1a7f      	subs	r7, r7, r1
 8015f20:	88d9      	ldrh	r1, [r3, #6]
 8015f22:	fb0c 1c07 	mla	ip, ip, r7, r1
 8015f26:	f8a3 c006 	strh.w	ip, [r3, #6]
 8015f2a:	e613      	b.n	8015b54 <_ZN8touchgfx7Outline10renderLineEiiii+0x3d0>
 8015f2c:	f04f 34ff 	mov.w	r4, #4294967295
 8015f30:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8015f32:	4249      	negs	r1, r1
 8015f34:	940d      	str	r4, [sp, #52]	@ 0x34
 8015f36:	2400      	movs	r4, #0
 8015f38:	437b      	muls	r3, r7
 8015f3a:	e758      	b.n	8015dee <_ZN8touchgfx7Outline10renderLineEiiii+0x66a>
 8015f3c:	9905      	ldr	r1, [sp, #20]
 8015f3e:	ea4f 1b69 	mov.w	fp, r9, asr #5
 8015f42:	f009 0c1f 	and.w	ip, r9, #31
 8015f46:	f8b7 8004 	ldrh.w	r8, [r7, #4]
 8015f4a:	f001 011f 	and.w	r1, r1, #31
 8015f4e:	45f3      	cmp	fp, lr
 8015f50:	f8b7 a006 	ldrh.w	sl, [r7, #6]
 8015f54:	9102      	str	r1, [sp, #8]
 8015f56:	9904      	ldr	r1, [sp, #16]
 8015f58:	eba1 0406 	sub.w	r4, r1, r6
 8015f5c:	d108      	bne.n	8015f70 <_ZN8touchgfx7Outline10renderLineEiiii+0x7ec>
 8015f5e:	9b02      	ldr	r3, [sp, #8]
 8015f60:	44a0      	add	r8, r4
 8015f62:	449c      	add	ip, r3
 8015f64:	f8a7 8004 	strh.w	r8, [r7, #4]
 8015f68:	fb04 a40c 	mla	r4, r4, ip, sl
 8015f6c:	80fc      	strh	r4, [r7, #6]
 8015f6e:	e461      	b.n	8015834 <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 8015f70:	9905      	ldr	r1, [sp, #20]
 8015f72:	ebb1 0109 	subs.w	r1, r1, r9
 8015f76:	bf51      	iteee	pl
 8015f78:	f1cc 0520 	rsbpl	r5, ip, #32
 8015f7c:	fb04 f40c 	mulmi.w	r4, r4, ip
 8015f80:	4249      	negmi	r1, r1
 8015f82:	2500      	movmi	r5, #0
 8015f84:	bf5d      	ittte	pl
 8015f86:	436c      	mulpl	r4, r5
 8015f88:	2520      	movpl	r5, #32
 8015f8a:	f04f 0901 	movpl.w	r9, #1
 8015f8e:	f04f 39ff 	movmi.w	r9, #4294967295
 8015f92:	9501      	str	r5, [sp, #4]
 8015f94:	9b01      	ldr	r3, [sp, #4]
 8015f96:	fb94 f5f1 	sdiv	r5, r4, r1
 8015f9a:	fb01 4415 	mls	r4, r1, r5, r4
 8015f9e:	449c      	add	ip, r3
 8015fa0:	eb0b 0309 	add.w	r3, fp, r9
 8015fa4:	2c00      	cmp	r4, #0
 8015fa6:	bfbc      	itt	lt
 8015fa8:	f105 35ff 	addlt.w	r5, r5, #4294967295
 8015fac:	1864      	addlt	r4, r4, r1
 8015fae:	44a8      	add	r8, r5
 8015fb0:	fb05 ac0c 	mla	ip, r5, ip, sl
 8015fb4:	f8a7 8004 	strh.w	r8, [r7, #4]
 8015fb8:	f8a7 c006 	strh.w	ip, [r7, #6]
 8015fbc:	f8d0 c010 	ldr.w	ip, [r0, #16]
 8015fc0:	f8bc 8006 	ldrh.w	r8, [ip, #6]
 8015fc4:	f8bc 7004 	ldrh.w	r7, [ip, #4]
 8015fc8:	ea58 0707 	orrs.w	r7, r8, r7
 8015fcc:	d011      	beq.n	8015ff2 <_ZN8touchgfx7Outline10renderLineEiiii+0x86e>
 8015fce:	f9bc 8002 	ldrsh.w	r8, [ip, #2]
 8015fd2:	f1b8 0f00 	cmp.w	r8, #0
 8015fd6:	db0c      	blt.n	8015ff2 <_ZN8touchgfx7Outline10renderLineEiiii+0x86e>
 8015fd8:	6ac7      	ldr	r7, [r0, #44]	@ 0x2c
 8015fda:	45b8      	cmp	r8, r7
 8015fdc:	da09      	bge.n	8015ff2 <_ZN8touchgfx7Outline10renderLineEiiii+0x86e>
 8015fde:	e9d0 7801 	ldrd	r7, r8, [r0, #4]
 8015fe2:	45b8      	cmp	r8, r7
 8015fe4:	bf3c      	itt	cc
 8015fe6:	f10c 0708 	addcc.w	r7, ip, #8
 8015fea:	6107      	strcc	r7, [r0, #16]
 8015fec:	f108 0701 	add.w	r7, r8, #1
 8015ff0:	6087      	str	r7, [r0, #8]
 8015ff2:	6907      	ldr	r7, [r0, #16]
 8015ff4:	f04f 0c00 	mov.w	ip, #0
 8015ff8:	b212      	sxth	r2, r2
 8015ffa:	459e      	cmp	lr, r3
 8015ffc:	803b      	strh	r3, [r7, #0]
 8015ffe:	442e      	add	r6, r5
 8016000:	807a      	strh	r2, [r7, #2]
 8016002:	f8a7 c004 	strh.w	ip, [r7, #4]
 8016006:	f8a7 c006 	strh.w	ip, [r7, #6]
 801600a:	d04b      	beq.n	80160a4 <_ZN8touchgfx7Outline10renderLineEiiii+0x920>
 801600c:	9f04      	ldr	r7, [sp, #16]
 801600e:	1a64      	subs	r4, r4, r1
 8016010:	f04f 0a00 	mov.w	sl, #0
 8016014:	1bbf      	subs	r7, r7, r6
 8016016:	443d      	add	r5, r7
 8016018:	016d      	lsls	r5, r5, #5
 801601a:	fb95 f8f1 	sdiv	r8, r5, r1
 801601e:	fb01 5518 	mls	r5, r1, r8, r5
 8016022:	4565      	cmp	r5, ip
 8016024:	bfbc      	itt	lt
 8016026:	f108 38ff 	addlt.w	r8, r8, #4294967295
 801602a:	186d      	addlt	r5, r5, r1
 801602c:	f108 0701 	add.w	r7, r8, #1
 8016030:	9703      	str	r7, [sp, #12]
 8016032:	f8d0 c010 	ldr.w	ip, [r0, #16]
 8016036:	1964      	adds	r4, r4, r5
 8016038:	444b      	add	r3, r9
 801603a:	bf54      	ite	pl
 801603c:	9f03      	ldrpl	r7, [sp, #12]
 801603e:	4647      	movmi	r7, r8
 8016040:	f8bc b004 	ldrh.w	fp, [ip, #4]
 8016044:	bf58      	it	pl
 8016046:	1a64      	subpl	r4, r4, r1
 8016048:	443e      	add	r6, r7
 801604a:	44bb      	add	fp, r7
 801604c:	f8ac b004 	strh.w	fp, [ip, #4]
 8016050:	f8bc b006 	ldrh.w	fp, [ip, #6]
 8016054:	eb0b 1b47 	add.w	fp, fp, r7, lsl #5
 8016058:	f8ac b006 	strh.w	fp, [ip, #6]
 801605c:	f8d0 c010 	ldr.w	ip, [r0, #16]
 8016060:	f8bc b006 	ldrh.w	fp, [ip, #6]
 8016064:	f8bc 7004 	ldrh.w	r7, [ip, #4]
 8016068:	ea5b 0707 	orrs.w	r7, fp, r7
 801606c:	d011      	beq.n	8016092 <_ZN8touchgfx7Outline10renderLineEiiii+0x90e>
 801606e:	f9bc b002 	ldrsh.w	fp, [ip, #2]
 8016072:	f1bb 0f00 	cmp.w	fp, #0
 8016076:	db0c      	blt.n	8016092 <_ZN8touchgfx7Outline10renderLineEiiii+0x90e>
 8016078:	6ac7      	ldr	r7, [r0, #44]	@ 0x2c
 801607a:	45bb      	cmp	fp, r7
 801607c:	da09      	bge.n	8016092 <_ZN8touchgfx7Outline10renderLineEiiii+0x90e>
 801607e:	e9d0 7b01 	ldrd	r7, fp, [r0, #4]
 8016082:	45bb      	cmp	fp, r7
 8016084:	bf3c      	itt	cc
 8016086:	f10c 0708 	addcc.w	r7, ip, #8
 801608a:	6107      	strcc	r7, [r0, #16]
 801608c:	f10b 0701 	add.w	r7, fp, #1
 8016090:	6087      	str	r7, [r0, #8]
 8016092:	6907      	ldr	r7, [r0, #16]
 8016094:	459e      	cmp	lr, r3
 8016096:	803b      	strh	r3, [r7, #0]
 8016098:	807a      	strh	r2, [r7, #2]
 801609a:	f8a7 a004 	strh.w	sl, [r7, #4]
 801609e:	f8a7 a006 	strh.w	sl, [r7, #6]
 80160a2:	d1c6      	bne.n	8016032 <_ZN8touchgfx7Outline10renderLineEiiii+0x8ae>
 80160a4:	9b04      	ldr	r3, [sp, #16]
 80160a6:	1b9e      	subs	r6, r3, r6
 80160a8:	6903      	ldr	r3, [r0, #16]
 80160aa:	889a      	ldrh	r2, [r3, #4]
 80160ac:	4432      	add	r2, r6
 80160ae:	809a      	strh	r2, [r3, #4]
 80160b0:	9a02      	ldr	r2, [sp, #8]
 80160b2:	f102 0c20 	add.w	ip, r2, #32
 80160b6:	9a01      	ldr	r2, [sp, #4]
 80160b8:	ebac 0c02 	sub.w	ip, ip, r2
 80160bc:	88da      	ldrh	r2, [r3, #6]
 80160be:	fb06 260c 	mla	r6, r6, ip, r2
 80160c2:	80de      	strh	r6, [r3, #6]
 80160c4:	f7ff bbb6 	b.w	8015834 <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>

080160c8 <_ZN8touchgfx7Outline6lineToEii>:
 80160c8:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 80160ca:	079b      	lsls	r3, r3, #30
 80160cc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80160ce:	460e      	mov	r6, r1
 80160d0:	4615      	mov	r5, r2
 80160d2:	d511      	bpl.n	80160f8 <_ZN8touchgfx7Outline6lineToEii+0x30>
 80160d4:	e9d0 1205 	ldrd	r1, r2, [r0, #20]
 80160d8:	ea86 0701 	eor.w	r7, r6, r1
 80160dc:	ea85 0302 	eor.w	r3, r5, r2
 80160e0:	433b      	orrs	r3, r7
 80160e2:	d009      	beq.n	80160f8 <_ZN8touchgfx7Outline6lineToEii+0x30>
 80160e4:	4633      	mov	r3, r6
 80160e6:	9500      	str	r5, [sp, #0]
 80160e8:	f7ff fb4c 	bl	8015784 <_ZN8touchgfx7Outline10renderLineEiiii>
 80160ec:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 80160ee:	f043 0301 	orr.w	r3, r3, #1
 80160f2:	e9c0 6505 	strd	r6, r5, [r0, #20]
 80160f6:	6243      	str	r3, [r0, #36]	@ 0x24
 80160f8:	b003      	add	sp, #12
 80160fa:	bdf0      	pop	{r4, r5, r6, r7, pc}

080160fc <_ZN8touchgfx7Outline6moveToEii>:
 80160fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80160fe:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8016100:	4615      	mov	r5, r2
 8016102:	4604      	mov	r4, r0
 8016104:	460e      	mov	r6, r1
 8016106:	079a      	lsls	r2, r3, #30
 8016108:	d401      	bmi.n	801610e <_ZN8touchgfx7Outline6moveToEii+0x12>
 801610a:	f7ff fb07 	bl	801571c <_ZN8touchgfx7Outline5resetEv>
 801610e:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8016110:	07db      	lsls	r3, r3, #31
 8016112:	d504      	bpl.n	801611e <_ZN8touchgfx7Outline6moveToEii+0x22>
 8016114:	4620      	mov	r0, r4
 8016116:	e9d4 1207 	ldrd	r1, r2, [r4, #28]
 801611a:	f7ff ffd5 	bl	80160c8 <_ZN8touchgfx7Outline6lineToEii>
 801611e:	6923      	ldr	r3, [r4, #16]
 8016120:	1170      	asrs	r0, r6, #5
 8016122:	1169      	asrs	r1, r5, #5
 8016124:	f9b3 2000 	ldrsh.w	r2, [r3]
 8016128:	4290      	cmp	r0, r2
 801612a:	d103      	bne.n	8016134 <_ZN8touchgfx7Outline6moveToEii+0x38>
 801612c:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8016130:	4291      	cmp	r1, r2
 8016132:	d01a      	beq.n	801616a <_ZN8touchgfx7Outline6moveToEii+0x6e>
 8016134:	88df      	ldrh	r7, [r3, #6]
 8016136:	889a      	ldrh	r2, [r3, #4]
 8016138:	433a      	orrs	r2, r7
 801613a:	d010      	beq.n	801615e <_ZN8touchgfx7Outline6moveToEii+0x62>
 801613c:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8016140:	2a00      	cmp	r2, #0
 8016142:	db0c      	blt.n	801615e <_ZN8touchgfx7Outline6moveToEii+0x62>
 8016144:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8016146:	42ba      	cmp	r2, r7
 8016148:	da09      	bge.n	801615e <_ZN8touchgfx7Outline6moveToEii+0x62>
 801614a:	e9d4 7201 	ldrd	r7, r2, [r4, #4]
 801614e:	42ba      	cmp	r2, r7
 8016150:	f102 0201 	add.w	r2, r2, #1
 8016154:	bf38      	it	cc
 8016156:	3308      	addcc	r3, #8
 8016158:	60a2      	str	r2, [r4, #8]
 801615a:	bf38      	it	cc
 801615c:	6123      	strcc	r3, [r4, #16]
 801615e:	6923      	ldr	r3, [r4, #16]
 8016160:	2200      	movs	r2, #0
 8016162:	8018      	strh	r0, [r3, #0]
 8016164:	8059      	strh	r1, [r3, #2]
 8016166:	809a      	strh	r2, [r3, #4]
 8016168:	80da      	strh	r2, [r3, #6]
 801616a:	6166      	str	r6, [r4, #20]
 801616c:	6225      	str	r5, [r4, #32]
 801616e:	e9c4 5606 	strd	r5, r6, [r4, #24]
 8016172:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08016174 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj>:
 8016174:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016178:	b0d0      	sub	sp, #320	@ 0x140
 801617a:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 801617e:	466c      	mov	r4, sp
 8016180:	4627      	mov	r7, r4
 8016182:	1a0d      	subs	r5, r1, r0
 8016184:	f100 0308 	add.w	r3, r0, #8
 8016188:	2d48      	cmp	r5, #72	@ 0x48
 801618a:	f340 80d5 	ble.w	8016338 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1c4>
 801618e:	112d      	asrs	r5, r5, #4
 8016190:	f9b0 c006 	ldrsh.w	ip, [r0, #6]
 8016194:	f9b0 9000 	ldrsh.w	r9, [r0]
 8016198:	eb00 02c5 	add.w	r2, r0, r5, lsl #3
 801619c:	f9b0 8002 	ldrsh.w	r8, [r0, #2]
 80161a0:	f9b0 e004 	ldrsh.w	lr, [r0, #4]
 80161a4:	6816      	ldr	r6, [r2, #0]
 80161a6:	6006      	str	r6, [r0, #0]
 80161a8:	6856      	ldr	r6, [r2, #4]
 80161aa:	6046      	str	r6, [r0, #4]
 80161ac:	f820 9035 	strh.w	r9, [r0, r5, lsl #3]
 80161b0:	f8a2 8002 	strh.w	r8, [r2, #2]
 80161b4:	f8a2 e004 	strh.w	lr, [r2, #4]
 80161b8:	f8a2 c006 	strh.w	ip, [r2, #6]
 80161bc:	f1a1 0208 	sub.w	r2, r1, #8
 80161c0:	f931 5c06 	ldrsh.w	r5, [r1, #-6]
 80161c4:	f9b0 c00a 	ldrsh.w	ip, [r0, #10]
 80161c8:	4565      	cmp	r5, ip
 80161ca:	db06      	blt.n	80161da <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x66>
 80161cc:	d119      	bne.n	8016202 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x8e>
 80161ce:	f9b0 6008 	ldrsh.w	r6, [r0, #8]
 80161d2:	f931 5c08 	ldrsh.w	r5, [r1, #-8]
 80161d6:	42ae      	cmp	r6, r5
 80161d8:	dd13      	ble.n	8016202 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x8e>
 80161da:	460e      	mov	r6, r1
 80161dc:	f9b0 9008 	ldrsh.w	r9, [r0, #8]
 80161e0:	f9b0 800c 	ldrsh.w	r8, [r0, #12]
 80161e4:	f856 5d08 	ldr.w	r5, [r6, #-8]!
 80161e8:	f9b0 e00e 	ldrsh.w	lr, [r0, #14]
 80161ec:	601d      	str	r5, [r3, #0]
 80161ee:	6875      	ldr	r5, [r6, #4]
 80161f0:	605d      	str	r5, [r3, #4]
 80161f2:	f821 9c08 	strh.w	r9, [r1, #-8]
 80161f6:	f821 cc06 	strh.w	ip, [r1, #-6]
 80161fa:	f821 8c04 	strh.w	r8, [r1, #-4]
 80161fe:	f821 ec02 	strh.w	lr, [r1, #-2]
 8016202:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 8016206:	f9b0 500a 	ldrsh.w	r5, [r0, #10]
 801620a:	42ae      	cmp	r6, r5
 801620c:	db06      	blt.n	801621c <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xa8>
 801620e:	d116      	bne.n	801623e <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xca>
 8016210:	f9b0 c000 	ldrsh.w	ip, [r0]
 8016214:	f9b0 5008 	ldrsh.w	r5, [r0, #8]
 8016218:	45ac      	cmp	ip, r5
 801621a:	da10      	bge.n	801623e <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xca>
 801621c:	681d      	ldr	r5, [r3, #0]
 801621e:	f9b0 8000 	ldrsh.w	r8, [r0]
 8016222:	f9b0 e004 	ldrsh.w	lr, [r0, #4]
 8016226:	f9b0 c006 	ldrsh.w	ip, [r0, #6]
 801622a:	6005      	str	r5, [r0, #0]
 801622c:	685d      	ldr	r5, [r3, #4]
 801622e:	f8a0 8008 	strh.w	r8, [r0, #8]
 8016232:	6045      	str	r5, [r0, #4]
 8016234:	8146      	strh	r6, [r0, #10]
 8016236:	f8a0 e00c 	strh.w	lr, [r0, #12]
 801623a:	f8a0 c00e 	strh.w	ip, [r0, #14]
 801623e:	f931 5c06 	ldrsh.w	r5, [r1, #-6]
 8016242:	f9b0 c002 	ldrsh.w	ip, [r0, #2]
 8016246:	4565      	cmp	r5, ip
 8016248:	db06      	blt.n	8016258 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xe4>
 801624a:	d119      	bne.n	8016280 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x10c>
 801624c:	f931 6c08 	ldrsh.w	r6, [r1, #-8]
 8016250:	f9b0 5000 	ldrsh.w	r5, [r0]
 8016254:	42ae      	cmp	r6, r5
 8016256:	da13      	bge.n	8016280 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x10c>
 8016258:	460e      	mov	r6, r1
 801625a:	f9b0 9000 	ldrsh.w	r9, [r0]
 801625e:	f9b0 8004 	ldrsh.w	r8, [r0, #4]
 8016262:	f856 5d08 	ldr.w	r5, [r6, #-8]!
 8016266:	f9b0 e006 	ldrsh.w	lr, [r0, #6]
 801626a:	6005      	str	r5, [r0, #0]
 801626c:	6875      	ldr	r5, [r6, #4]
 801626e:	6045      	str	r5, [r0, #4]
 8016270:	f821 9c08 	strh.w	r9, [r1, #-8]
 8016274:	f821 cc06 	strh.w	ip, [r1, #-6]
 8016278:	f821 8c04 	strh.w	r8, [r1, #-4]
 801627c:	f821 ec02 	strh.w	lr, [r1, #-2]
 8016280:	3308      	adds	r3, #8
 8016282:	f9b0 c002 	ldrsh.w	ip, [r0, #2]
 8016286:	f9b3 e002 	ldrsh.w	lr, [r3, #2]
 801628a:	45e6      	cmp	lr, ip
 801628c:	dbf8      	blt.n	8016280 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x10c>
 801628e:	d105      	bne.n	801629c <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x128>
 8016290:	f9b3 6000 	ldrsh.w	r6, [r3]
 8016294:	f9b0 5000 	ldrsh.w	r5, [r0]
 8016298:	42ae      	cmp	r6, r5
 801629a:	dbf1      	blt.n	8016280 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x10c>
 801629c:	4615      	mov	r5, r2
 801629e:	3a08      	subs	r2, #8
 80162a0:	f9b2 6002 	ldrsh.w	r6, [r2, #2]
 80162a4:	45b4      	cmp	ip, r6
 80162a6:	dbf9      	blt.n	801629c <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x128>
 80162a8:	d105      	bne.n	80162b6 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x142>
 80162aa:	f9b0 8000 	ldrsh.w	r8, [r0]
 80162ae:	f9b2 6000 	ldrsh.w	r6, [r2]
 80162b2:	45b0      	cmp	r8, r6
 80162b4:	dbf2      	blt.n	801629c <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x128>
 80162b6:	4293      	cmp	r3, r2
 80162b8:	f1a5 0608 	sub.w	r6, r5, #8
 80162bc:	d816      	bhi.n	80162ec <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x178>
 80162be:	f8d6 c000 	ldr.w	ip, [r6]
 80162c2:	f9b3 a000 	ldrsh.w	sl, [r3]
 80162c6:	f9b3 9004 	ldrsh.w	r9, [r3, #4]
 80162ca:	f9b3 8006 	ldrsh.w	r8, [r3, #6]
 80162ce:	f8c3 c000 	str.w	ip, [r3]
 80162d2:	f8d6 c004 	ldr.w	ip, [r6, #4]
 80162d6:	f8c3 c004 	str.w	ip, [r3, #4]
 80162da:	f825 ac08 	strh.w	sl, [r5, #-8]
 80162de:	f825 ec06 	strh.w	lr, [r5, #-6]
 80162e2:	f825 9c04 	strh.w	r9, [r5, #-4]
 80162e6:	f825 8c02 	strh.w	r8, [r5, #-2]
 80162ea:	e7c9      	b.n	8016280 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x10c>
 80162ec:	f8d6 e000 	ldr.w	lr, [r6]
 80162f0:	f9b0 a000 	ldrsh.w	sl, [r0]
 80162f4:	f9b0 9004 	ldrsh.w	r9, [r0, #4]
 80162f8:	f9b0 8006 	ldrsh.w	r8, [r0, #6]
 80162fc:	f8c0 e000 	str.w	lr, [r0]
 8016300:	f8d6 e004 	ldr.w	lr, [r6, #4]
 8016304:	1a16      	subs	r6, r2, r0
 8016306:	f8c0 e004 	str.w	lr, [r0, #4]
 801630a:	f825 ac08 	strh.w	sl, [r5, #-8]
 801630e:	f825 cc06 	strh.w	ip, [r5, #-6]
 8016312:	f825 9c04 	strh.w	r9, [r5, #-4]
 8016316:	f825 8c02 	strh.w	r8, [r5, #-2]
 801631a:	1acd      	subs	r5, r1, r3
 801631c:	10ed      	asrs	r5, r5, #3
 801631e:	ebb5 0fe6 	cmp.w	r5, r6, asr #3
 8016322:	bfb5      	itete	lt
 8016324:	e9c4 0200 	strdlt	r0, r2, [r4]
 8016328:	e9c4 3100 	strdge	r3, r1, [r4]
 801632c:	460a      	movlt	r2, r1
 801632e:	4603      	movge	r3, r0
 8016330:	3408      	adds	r4, #8
 8016332:	4618      	mov	r0, r3
 8016334:	4611      	mov	r1, r2
 8016336:	e724      	b.n	8016182 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xe>
 8016338:	4299      	cmp	r1, r3
 801633a:	d927      	bls.n	801638c <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x218>
 801633c:	f1a3 0210 	sub.w	r2, r3, #16
 8016340:	f9b2 c012 	ldrsh.w	ip, [r2, #18]
 8016344:	f9b2 500a 	ldrsh.w	r5, [r2, #10]
 8016348:	45ac      	cmp	ip, r5
 801634a:	db06      	blt.n	801635a <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1e6>
 801634c:	d11c      	bne.n	8016388 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x214>
 801634e:	f9b2 6010 	ldrsh.w	r6, [r2, #16]
 8016352:	f9b2 5008 	ldrsh.w	r5, [r2, #8]
 8016356:	42ae      	cmp	r6, r5
 8016358:	da16      	bge.n	8016388 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x214>
 801635a:	4615      	mov	r5, r2
 801635c:	f9b2 9010 	ldrsh.w	r9, [r2, #16]
 8016360:	f9b2 8014 	ldrsh.w	r8, [r2, #20]
 8016364:	3a08      	subs	r2, #8
 8016366:	f855 6f08 	ldr.w	r6, [r5, #8]!
 801636a:	f9b2 e01e 	ldrsh.w	lr, [r2, #30]
 801636e:	6196      	str	r6, [r2, #24]
 8016370:	42a8      	cmp	r0, r5
 8016372:	686e      	ldr	r6, [r5, #4]
 8016374:	f8a2 9010 	strh.w	r9, [r2, #16]
 8016378:	61d6      	str	r6, [r2, #28]
 801637a:	f8a2 c012 	strh.w	ip, [r2, #18]
 801637e:	f8a2 8014 	strh.w	r8, [r2, #20]
 8016382:	f8a2 e016 	strh.w	lr, [r2, #22]
 8016386:	d1db      	bne.n	8016340 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1cc>
 8016388:	3308      	adds	r3, #8
 801638a:	e7d5      	b.n	8016338 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1c4>
 801638c:	42bc      	cmp	r4, r7
 801638e:	d903      	bls.n	8016398 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x224>
 8016390:	e954 0102 	ldrd	r0, r1, [r4, #-8]
 8016394:	3c08      	subs	r4, #8
 8016396:	e6f4      	b.n	8016182 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xe>
 8016398:	b050      	add	sp, #320	@ 0x140
 801639a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0801639e <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv>:
 801639e:	b510      	push	{r4, lr}
 80163a0:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 80163a2:	4604      	mov	r4, r0
 80163a4:	07da      	lsls	r2, r3, #31
 80163a6:	d507      	bpl.n	80163b8 <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x1a>
 80163a8:	e9d0 1207 	ldrd	r1, r2, [r0, #28]
 80163ac:	f7ff fe8c 	bl	80160c8 <_ZN8touchgfx7Outline6lineToEii>
 80163b0:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 80163b2:	f023 0301 	bic.w	r3, r3, #1
 80163b6:	6243      	str	r3, [r0, #36]	@ 0x24
 80163b8:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80163ba:	079b      	lsls	r3, r3, #30
 80163bc:	d521      	bpl.n	8016402 <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x64>
 80163be:	6923      	ldr	r3, [r4, #16]
 80163c0:	88d9      	ldrh	r1, [r3, #6]
 80163c2:	889a      	ldrh	r2, [r3, #4]
 80163c4:	430a      	orrs	r2, r1
 80163c6:	d010      	beq.n	80163ea <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x4c>
 80163c8:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 80163cc:	2a00      	cmp	r2, #0
 80163ce:	db0c      	blt.n	80163ea <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x4c>
 80163d0:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 80163d2:	428a      	cmp	r2, r1
 80163d4:	da09      	bge.n	80163ea <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x4c>
 80163d6:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
 80163da:	4291      	cmp	r1, r2
 80163dc:	f102 0201 	add.w	r2, r2, #1
 80163e0:	bf88      	it	hi
 80163e2:	3308      	addhi	r3, #8
 80163e4:	60a2      	str	r2, [r4, #8]
 80163e6:	bf88      	it	hi
 80163e8:	6123      	strhi	r3, [r4, #16]
 80163ea:	68a1      	ldr	r1, [r4, #8]
 80163ec:	b129      	cbz	r1, 80163fa <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x5c>
 80163ee:	6863      	ldr	r3, [r4, #4]
 80163f0:	4299      	cmp	r1, r3
 80163f2:	d802      	bhi.n	80163fa <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x5c>
 80163f4:	68e0      	ldr	r0, [r4, #12]
 80163f6:	f7ff febd 	bl	8016174 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj>
 80163fa:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80163fc:	f023 0302 	bic.w	r3, r3, #2
 8016400:	6263      	str	r3, [r4, #36]	@ 0x24
 8016402:	68e0      	ldr	r0, [r4, #12]
 8016404:	bd10      	pop	{r4, pc}
	...

08016408 <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj>:
 8016408:	4b02      	ldr	r3, [pc, #8]	@ (8016414 <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj+0xc>)
 801640a:	6018      	str	r0, [r3, #0]
 801640c:	4b02      	ldr	r3, [pc, #8]	@ (8016418 <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj+0x10>)
 801640e:	6019      	str	r1, [r3, #0]
 8016410:	4770      	bx	lr
 8016412:	bf00      	nop
 8016414:	24028e28 	.word	0x24028e28
 8016418:	24028e2c 	.word	0x24028e2c

0801641c <_ZN8touchgfx20CanvasWidgetRenderer11resetBufferEv>:
 801641c:	2300      	movs	r3, #0
 801641e:	4a02      	ldr	r2, [pc, #8]	@ (8016428 <_ZN8touchgfx20CanvasWidgetRenderer11resetBufferEv+0xc>)
 8016420:	6013      	str	r3, [r2, #0]
 8016422:	4a02      	ldr	r2, [pc, #8]	@ (801642c <_ZN8touchgfx20CanvasWidgetRenderer11resetBufferEv+0x10>)
 8016424:	6013      	str	r3, [r2, #0]
 8016426:	4770      	bx	lr
 8016428:	24028e28 	.word	0x24028e28
 801642c:	24028e2c 	.word	0x24028e2c

08016430 <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv>:
 8016430:	4b01      	ldr	r3, [pc, #4]	@ (8016438 <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv+0x8>)
 8016432:	6818      	ldr	r0, [r3, #0]
 8016434:	4770      	bx	lr
 8016436:	bf00      	nop
 8016438:	24028e28 	.word	0x24028e28

0801643c <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv>:
 801643c:	4b01      	ldr	r3, [pc, #4]	@ (8016444 <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv+0x8>)
 801643e:	6818      	ldr	r0, [r3, #0]
 8016440:	4770      	bx	lr
 8016442:	bf00      	nop
 8016444:	24028e2c 	.word	0x24028e2c

08016448 <_ZN8touchgfx3LCD27supportDynamicBitmapDrawingENS_6Bitmap12BitmapFormatE>:
 8016448:	b510      	push	{r4, lr}
 801644a:	6803      	ldr	r3, [r0, #0]
 801644c:	460c      	mov	r4, r1
 801644e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8016450:	4798      	blx	r3
 8016452:	1b03      	subs	r3, r0, r4
 8016454:	4258      	negs	r0, r3
 8016456:	4158      	adcs	r0, r3
 8016458:	bd10      	pop	{r4, pc}
	...

0801645c <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE>:
 801645c:	4b01      	ldr	r3, [pc, #4]	@ (8016464 <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE+0x8>)
 801645e:	6019      	str	r1, [r3, #0]
 8016460:	4770      	bx	lr
 8016462:	bf00      	nop
 8016464:	24028e30 	.word	0x24028e30

08016468 <_ZN8touchgfx3LCD18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 8016468:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801646c:	4696      	mov	lr, r2
 801646e:	b097      	sub	sp, #92	@ 0x5c
 8016470:	4605      	mov	r5, r0
 8016472:	4614      	mov	r4, r2
 8016474:	460e      	mov	r6, r1
 8016476:	461f      	mov	r7, r3
 8016478:	f10d 0c1c 	add.w	ip, sp, #28
 801647c:	f8bd 8088 	ldrh.w	r8, [sp, #136]	@ 0x88
 8016480:	f89d 908c 	ldrb.w	r9, [sp, #140]	@ 0x8c
 8016484:	f8bd a090 	ldrh.w	sl, [sp, #144]	@ 0x90
 8016488:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801648c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8016490:	f8de 3000 	ldr.w	r3, [lr]
 8016494:	f104 0e14 	add.w	lr, r4, #20
 8016498:	f8cc 3000 	str.w	r3, [ip]
 801649c:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 80164a0:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80164a4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80164a8:	f8de 3000 	ldr.w	r3, [lr]
 80164ac:	f104 0e28 	add.w	lr, r4, #40	@ 0x28
 80164b0:	f8cc 3000 	str.w	r3, [ip]
 80164b4:	f10d 0c44 	add.w	ip, sp, #68	@ 0x44
 80164b8:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80164bc:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80164c0:	f8de 3000 	ldr.w	r3, [lr]
 80164c4:	4631      	mov	r1, r6
 80164c6:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 80164c8:	4628      	mov	r0, r5
 80164ca:	f8cc 3000 	str.w	r3, [ip]
 80164ce:	682b      	ldr	r3, [r5, #0]
 80164d0:	9201      	str	r2, [sp, #4]
 80164d2:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80164d4:	f8cd 8008 	str.w	r8, [sp, #8]
 80164d8:	9200      	str	r2, [sp, #0]
 80164da:	aa07      	add	r2, sp, #28
 80164dc:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 80164e0:	f8d3 b03c 	ldr.w	fp, [r3, #60]	@ 0x3c
 80164e4:	463b      	mov	r3, r7
 80164e6:	47d8      	blx	fp
 80164e8:	46a6      	mov	lr, r4
 80164ea:	f10d 0c1c 	add.w	ip, sp, #28
 80164ee:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80164f2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80164f6:	f8de 3000 	ldr.w	r3, [lr]
 80164fa:	f104 0e28 	add.w	lr, r4, #40	@ 0x28
 80164fe:	343c      	adds	r4, #60	@ 0x3c
 8016500:	f8cc 3000 	str.w	r3, [ip]
 8016504:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 8016508:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801650c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8016510:	f8de 3000 	ldr.w	r3, [lr]
 8016514:	f8cc 3000 	str.w	r3, [ip]
 8016518:	f10d 0c44 	add.w	ip, sp, #68	@ 0x44
 801651c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801651e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8016522:	6823      	ldr	r3, [r4, #0]
 8016524:	4631      	mov	r1, r6
 8016526:	4628      	mov	r0, r5
 8016528:	f8cc 3000 	str.w	r3, [ip]
 801652c:	682b      	ldr	r3, [r5, #0]
 801652e:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 8016532:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8016534:	f8cd 8008 	str.w	r8, [sp, #8]
 8016538:	9201      	str	r2, [sp, #4]
 801653a:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 801653c:	9200      	str	r2, [sp, #0]
 801653e:	aa07      	add	r2, sp, #28
 8016540:	6bdc      	ldr	r4, [r3, #60]	@ 0x3c
 8016542:	463b      	mov	r3, r7
 8016544:	47a0      	blx	r4
 8016546:	b017      	add	sp, #92	@ 0x5c
 8016548:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801654c <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht>:
 801654c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016550:	b08d      	sub	sp, #52	@ 0x34
 8016552:	4688      	mov	r8, r1
 8016554:	f8d3 c000 	ldr.w	ip, [r3]
 8016558:	9916      	ldr	r1, [sp, #88]	@ 0x58
 801655a:	f8bd 4070 	ldrh.w	r4, [sp, #112]	@ 0x70
 801655e:	680f      	ldr	r7, [r1, #0]
 8016560:	ed92 4a09 	vldr	s8, [r2, #36]	@ 0x24
 8016564:	eba7 070c 	sub.w	r7, r7, ip
 8016568:	edd2 4a0b 	vldr	s9, [r2, #44]	@ 0x2c
 801656c:	edd3 6a07 	vldr	s13, [r3, #28]
 8016570:	42bc      	cmp	r4, r7
 8016572:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8016574:	f8dd a064 	ldr.w	sl, [sp, #100]	@ 0x64
 8016578:	bfa8      	it	ge
 801657a:	463c      	movge	r4, r7
 801657c:	f9b1 9000 	ldrsh.w	r9, [r1]
 8016580:	f9ba 1000 	ldrsh.w	r1, [sl]
 8016584:	ee07 4a90 	vmov	s15, r4
 8016588:	eb09 0e0c 	add.w	lr, r9, ip
 801658c:	edd3 1a0a 	vldr	s3, [r3, #40]	@ 0x28
 8016590:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
 8016594:	edd2 7a0d 	vldr	s15, [r2, #52]	@ 0x34
 8016598:	ed93 2a0d 	vldr	s4, [r3, #52]	@ 0x34
 801659c:	4571      	cmp	r1, lr
 801659e:	ee25 4a04 	vmul.f32	s8, s10, s8
 80165a2:	ee65 4a24 	vmul.f32	s9, s10, s9
 80165a6:	ee25 5a27 	vmul.f32	s10, s10, s15
 80165aa:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 80165ae:	ee71 0aa4 	vadd.f32	s1, s3, s9
 80165b2:	ee32 1a05 	vadd.f32	s2, s4, s10
 80165b6:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80165ba:	ee36 0a84 	vadd.f32	s0, s13, s8
 80165be:	ee61 1a87 	vmul.f32	s3, s3, s14
 80165c2:	ee22 2a07 	vmul.f32	s4, s4, s14
 80165c6:	f340 808c 	ble.w	80166e2 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x196>
 80165ca:	eba1 060e 	sub.w	r6, r1, lr
 80165ce:	fb96 f5f4 	sdiv	r5, r6, r4
 80165d2:	ee07 5a10 	vmov	s14, r5
 80165d6:	2d00      	cmp	r5, #0
 80165d8:	fb04 6615 	mls	r6, r4, r5, r6
 80165dc:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80165e0:	eea7 0a04 	vfma.f32	s0, s14, s8
 80165e4:	eee7 0a24 	vfma.f32	s1, s14, s9
 80165e8:	eea7 1a05 	vfma.f32	s2, s14, s10
 80165ec:	dd12      	ble.n	8016614 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xc8>
 80165ee:	ee70 6a44 	vsub.f32	s13, s0, s8
 80165f2:	ee70 1ae4 	vsub.f32	s3, s1, s9
 80165f6:	ee31 2a45 	vsub.f32	s4, s2, s10
 80165fa:	eef5 6a40 	vcmp.f32	s13, #0.0
 80165fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016602:	bf14      	ite	ne
 8016604:	ee87 7aa6 	vdivne.f32	s14, s15, s13
 8016608:	eeb0 7a67 	vmoveq.f32	s14, s15
 801660c:	ee61 1a87 	vmul.f32	s3, s3, s14
 8016610:	ee22 2a07 	vmul.f32	s4, s4, s14
 8016614:	fb05 f204 	mul.w	r2, r5, r4
 8016618:	1abf      	subs	r7, r7, r2
 801661a:	4494      	add	ip, r2
 801661c:	f8ba 2004 	ldrh.w	r2, [sl, #4]
 8016620:	4411      	add	r1, r2
 8016622:	eb09 020c 	add.w	r2, r9, ip
 8016626:	b209      	sxth	r1, r1
 8016628:	443a      	add	r2, r7
 801662a:	428a      	cmp	r2, r1
 801662c:	bfc4      	itt	gt
 801662e:	eba1 0209 	subgt.w	r2, r1, r9
 8016632:	eba2 070c 	subgt.w	r7, r2, ip
 8016636:	2f00      	cmp	r7, #0
 8016638:	dd50      	ble.n	80166dc <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x190>
 801663a:	fb97 f1f4 	sdiv	r1, r7, r4
 801663e:	fb04 7211 	mls	r2, r4, r1, r7
 8016642:	b90a      	cbnz	r2, 8016648 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xfc>
 8016644:	3901      	subs	r1, #1
 8016646:	4622      	mov	r2, r4
 8016648:	eec7 3a80 	vdiv.f32	s7, s15, s0
 801664c:	6840      	ldr	r0, [r0, #4]
 801664e:	f89d b06c 	ldrb.w	fp, [sp, #108]	@ 0x6c
 8016652:	44b6      	add	lr, r6
 8016654:	f8d0 a000 	ldr.w	sl, [r0]
 8016658:	2900      	cmp	r1, #0
 801665a:	bfcc      	ite	gt
 801665c:	46a1      	movgt	r9, r4
 801665e:	4691      	movle	r9, r2
 8016660:	900b      	str	r0, [sp, #44]	@ 0x2c
 8016662:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 8016664:	fb04 e505 	mla	r5, r4, r5, lr
 8016668:	eef0 6a42 	vmov.f32	s13, s4
 801666c:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 8016670:	9008      	str	r0, [sp, #32]
 8016672:	eeb0 7a61 	vmov.f32	s14, s3
 8016676:	9818      	ldr	r0, [sp, #96]	@ 0x60
 8016678:	695b      	ldr	r3, [r3, #20]
 801667a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801667e:	f9b0 b002 	ldrsh.w	fp, [r0, #2]
 8016682:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 8016686:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8016688:	445b      	add	r3, fp
 801668a:	9307      	str	r3, [sp, #28]
 801668c:	ee16 3a90 	vmov	r3, s13
 8016690:	e9cd 8505 	strd	r8, r5, [sp, #20]
 8016694:	ee60 2aa3 	vmul.f32	s5, s1, s7
 8016698:	ee21 3a23 	vmul.f32	s6, s2, s7
 801669c:	ee72 7ae1 	vsub.f32	s15, s5, s3
 80166a0:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 80166a4:	ee17 7a90 	vmov	r7, s15
 80166a8:	ee73 7a42 	vsub.f32	s15, s6, s4
 80166ac:	fb97 f7f4 	sdiv	r7, r7, r4
 80166b0:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 80166b4:	ee17 ca90 	vmov	ip, s15
 80166b8:	fb9c fcf4 	sdiv	ip, ip, r4
 80166bc:	fb0c 3306 	mla	r3, ip, r6, r3
 80166c0:	9302      	str	r3, [sp, #8]
 80166c2:	ee17 3a10 	vmov	r3, s14
 80166c6:	e9cd 7c03 	strd	r7, ip, [sp, #12]
 80166ca:	fb07 3706 	mla	r7, r7, r6, r3
 80166ce:	eba9 0306 	sub.w	r3, r9, r6
 80166d2:	e9cd 4700 	strd	r4, r7, [sp]
 80166d6:	f8da 4008 	ldr.w	r4, [sl, #8]
 80166da:	47a0      	blx	r4
 80166dc:	b00d      	add	sp, #52	@ 0x34
 80166de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80166e2:	2500      	movs	r5, #0
 80166e4:	462e      	mov	r6, r5
 80166e6:	e799      	b.n	801661c <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xd0>

080166e8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 80166e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80166ec:	b0db      	sub	sp, #364	@ 0x16c
 80166ee:	461d      	mov	r5, r3
 80166f0:	4614      	mov	r4, r2
 80166f2:	f8bd 3198 	ldrh.w	r3, [sp, #408]	@ 0x198
 80166f6:	910f      	str	r1, [sp, #60]	@ 0x3c
 80166f8:	4629      	mov	r1, r5
 80166fa:	930a      	str	r3, [sp, #40]	@ 0x28
 80166fc:	f89d 319c 	ldrb.w	r3, [sp, #412]	@ 0x19c
 8016700:	9009      	str	r0, [sp, #36]	@ 0x24
 8016702:	930b      	str	r3, [sp, #44]	@ 0x2c
 8016704:	f8bd 31a0 	ldrh.w	r3, [sp, #416]	@ 0x1a0
 8016708:	f8dd b194 	ldr.w	fp, [sp, #404]	@ 0x194
 801670c:	9310      	str	r3, [sp, #64]	@ 0x40
 801670e:	6803      	ldr	r3, [r0, #0]
 8016710:	6c5f      	ldr	r7, [r3, #68]	@ 0x44
 8016712:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	@ 0x28
 8016716:	47b8      	blx	r7
 8016718:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801671a:	6058      	str	r0, [r3, #4]
 801671c:	2800      	cmp	r0, #0
 801671e:	f000 83a1 	beq.w	8016e64 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8016722:	682b      	ldr	r3, [r5, #0]
 8016724:	eef2 7a04 	vmov.f32	s15, #36	@ 0x41200000  10.0
 8016728:	ed94 7a02 	vldr	s14, [r4, #8]
 801672c:	9314      	str	r3, [sp, #80]	@ 0x50
 801672e:	686b      	ldr	r3, [r5, #4]
 8016730:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8016734:	9315      	str	r3, [sp, #84]	@ 0x54
 8016736:	4bc1      	ldr	r3, [pc, #772]	@ (8016a3c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x354>)
 8016738:	7819      	ldrb	r1, [r3, #0]
 801673a:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
 801673e:	2900      	cmp	r1, #0
 8016740:	bf16      	itet	ne
 8016742:	4619      	movne	r1, r3
 8016744:	4611      	moveq	r1, r2
 8016746:	4613      	movne	r3, r2
 8016748:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801674c:	9116      	str	r1, [sp, #88]	@ 0x58
 801674e:	e9cd 3217 	strd	r3, r2, [sp, #92]	@ 0x5c
 8016752:	f240 8387 	bls.w	8016e64 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8016756:	ed94 7a07 	vldr	s14, [r4, #28]
 801675a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801675e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016762:	f240 837f 	bls.w	8016e64 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8016766:	ed94 7a0c 	vldr	s14, [r4, #48]	@ 0x30
 801676a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801676e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016772:	f240 8377 	bls.w	8016e64 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8016776:	6822      	ldr	r2, [r4, #0]
 8016778:	4bb1      	ldr	r3, [pc, #708]	@ (8016a40 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x358>)
 801677a:	429a      	cmp	r2, r3
 801677c:	f2c0 8372 	blt.w	8016e64 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8016780:	49b0      	ldr	r1, [pc, #704]	@ (8016a44 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x35c>)
 8016782:	6963      	ldr	r3, [r4, #20]
 8016784:	428a      	cmp	r2, r1
 8016786:	f300 836d 	bgt.w	8016e64 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801678a:	f503 331c 	add.w	r3, r3, #159744	@ 0x27000
 801678e:	48ae      	ldr	r0, [pc, #696]	@ (8016a48 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x360>)
 8016790:	33ff      	adds	r3, #255	@ 0xff
 8016792:	4283      	cmp	r3, r0
 8016794:	f200 8366 	bhi.w	8016e64 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8016798:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 801679a:	4dac      	ldr	r5, [pc, #688]	@ (8016a4c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x364>)
 801679c:	f503 331c 	add.w	r3, r3, #159744	@ 0x27000
 80167a0:	33ff      	adds	r3, #255	@ 0xff
 80167a2:	42ab      	cmp	r3, r5
 80167a4:	f200 835e 	bhi.w	8016e64 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80167a8:	6862      	ldr	r2, [r4, #4]
 80167aa:	f502 331c 	add.w	r3, r2, #159744	@ 0x27000
 80167ae:	33ff      	adds	r3, #255	@ 0xff
 80167b0:	4283      	cmp	r3, r0
 80167b2:	f200 8357 	bhi.w	8016e64 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80167b6:	69a1      	ldr	r1, [r4, #24]
 80167b8:	f501 331c 	add.w	r3, r1, #159744	@ 0x27000
 80167bc:	33ff      	adds	r3, #255	@ 0xff
 80167be:	4283      	cmp	r3, r0
 80167c0:	f200 8350 	bhi.w	8016e64 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80167c4:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 80167c6:	f503 301c 	add.w	r0, r3, #159744	@ 0x27000
 80167ca:	30ff      	adds	r0, #255	@ 0xff
 80167cc:	42a8      	cmp	r0, r5
 80167ce:	f200 8349 	bhi.w	8016e64 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80167d2:	428a      	cmp	r2, r1
 80167d4:	f280 8110 	bge.w	80169f8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x310>
 80167d8:	429a      	cmp	r2, r3
 80167da:	f300 8119 	bgt.w	8016a10 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x328>
 80167de:	4299      	cmp	r1, r3
 80167e0:	f280 811d 	bge.w	8016a1e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x336>
 80167e4:	2502      	movs	r5, #2
 80167e6:	2701      	movs	r7, #1
 80167e8:	46a9      	mov	r9, r5
 80167ea:	46b8      	mov	r8, r7
 80167ec:	f04f 0a00 	mov.w	sl, #0
 80167f0:	4621      	mov	r1, r4
 80167f2:	a849      	add	r0, sp, #292	@ 0x124
 80167f4:	f004 fa68 	bl	801acc8 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>
 80167f8:	4622      	mov	r2, r4
 80167fa:	4653      	mov	r3, sl
 80167fc:	a949      	add	r1, sp, #292	@ 0x124
 80167fe:	f8cd 9000 	str.w	r9, [sp]
 8016802:	a819      	add	r0, sp, #100	@ 0x64
 8016804:	f004 fb90 	bl	801af28 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 8016808:	4622      	mov	r2, r4
 801680a:	4653      	mov	r3, sl
 801680c:	a949      	add	r1, sp, #292	@ 0x124
 801680e:	f8cd 8000 	str.w	r8, [sp]
 8016812:	a829      	add	r0, sp, #164	@ 0xa4
 8016814:	f004 fb88 	bl	801af28 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 8016818:	4643      	mov	r3, r8
 801681a:	4622      	mov	r2, r4
 801681c:	a949      	add	r1, sp, #292	@ 0x124
 801681e:	f8cd 9000 	str.w	r9, [sp]
 8016822:	a839      	add	r0, sp, #228	@ 0xe4
 8016824:	f004 fb80 	bl	801af28 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 8016828:	42af      	cmp	r7, r5
 801682a:	af12      	add	r7, sp, #72	@ 0x48
 801682c:	bfb7      	itett	lt
 801682e:	2300      	movlt	r3, #0
 8016830:	2301      	movge	r3, #1
 8016832:	ad29      	addlt	r5, sp, #164	@ 0xa4
 8016834:	ac19      	addlt	r4, sp, #100	@ 0x64
 8016836:	bfb1      	iteee	lt
 8016838:	930e      	strlt	r3, [sp, #56]	@ 0x38
 801683a:	ad19      	addge	r5, sp, #100	@ 0x64
 801683c:	930e      	strge	r3, [sp, #56]	@ 0x38
 801683e:	ac29      	addge	r4, sp, #164	@ 0xa4
 8016840:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8016842:	e893 0003 	ldmia.w	r3, {r0, r1}
 8016846:	e887 0003 	stmia.w	r7, {r0, r1}
 801684a:	b928      	cbnz	r0, 8016858 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x170>
 801684c:	4b80      	ldr	r3, [pc, #512]	@ (8016a50 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x368>)
 801684e:	6818      	ldr	r0, [r3, #0]
 8016850:	6803      	ldr	r3, [r0, #0]
 8016852:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8016854:	4798      	blx	r3
 8016856:	6038      	str	r0, [r7, #0]
 8016858:	9b64      	ldr	r3, [sp, #400]	@ 0x190
 801685a:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 801685e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8016862:	9a2f      	ldr	r2, [sp, #188]	@ 0xbc
 8016864:	930c      	str	r3, [sp, #48]	@ 0x30
 8016866:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8016868:	6963      	ldr	r3, [r4, #20]
 801686a:	440b      	add	r3, r1
 801686c:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 8016870:	4408      	add	r0, r1
 8016872:	b200      	sxth	r0, r0
 8016874:	4283      	cmp	r3, r0
 8016876:	900d      	str	r0, [sp, #52]	@ 0x34
 8016878:	f280 80dd 	bge.w	8016a36 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x34e>
 801687c:	428b      	cmp	r3, r1
 801687e:	da08      	bge.n	8016892 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 8016880:	2a00      	cmp	r2, #0
 8016882:	dd06      	ble.n	8016892 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 8016884:	1acb      	subs	r3, r1, r3
 8016886:	429a      	cmp	r2, r3
 8016888:	f2c0 80e4 	blt.w	8016a54 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36c>
 801688c:	2b00      	cmp	r3, #0
 801688e:	f300 80e2 	bgt.w	8016a56 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36e>
 8016892:	6967      	ldr	r7, [r4, #20]
 8016894:	f10d 0850 	add.w	r8, sp, #80	@ 0x50
 8016898:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801689a:	443b      	add	r3, r7
 801689c:	461f      	mov	r7, r3
 801689e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80168a0:	1bdf      	subs	r7, r3, r7
 80168a2:	4297      	cmp	r7, r2
 80168a4:	bfa8      	it	ge
 80168a6:	4617      	movge	r7, r2
 80168a8:	2f00      	cmp	r7, #0
 80168aa:	f340 8166 	ble.w	8016b7a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x492>
 80168ae:	9b64      	ldr	r3, [sp, #400]	@ 0x190
 80168b0:	6829      	ldr	r1, [r5, #0]
 80168b2:	f9b3 2000 	ldrsh.w	r2, [r3]
 80168b6:	f9bb 3000 	ldrsh.w	r3, [fp]
 80168ba:	4411      	add	r1, r2
 80168bc:	6820      	ldr	r0, [r4, #0]
 80168be:	4299      	cmp	r1, r3
 80168c0:	dd1a      	ble.n	80168f8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 80168c2:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 80168c6:	4402      	add	r2, r0
 80168c8:	440b      	add	r3, r1
 80168ca:	b21b      	sxth	r3, r3
 80168cc:	429a      	cmp	r2, r3
 80168ce:	dc13      	bgt.n	80168f8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 80168d0:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 80168d2:	a912      	add	r1, sp, #72	@ 0x48
 80168d4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80168d6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80168d8:	681b      	ldr	r3, [r3, #0]
 80168da:	9206      	str	r2, [sp, #24]
 80168dc:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80168de:	9500      	str	r5, [sp, #0]
 80168e0:	9205      	str	r2, [sp, #20]
 80168e2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80168e4:	e9cd b203 	strd	fp, r2, [sp, #12]
 80168e8:	9a64      	ldr	r2, [sp, #400]	@ 0x190
 80168ea:	e9cd 8201 	strd	r8, r2, [sp, #4]
 80168ee:	aa49      	add	r2, sp, #292	@ 0x124
 80168f0:	f8d3 9048 	ldr.w	r9, [r3, #72]	@ 0x48
 80168f4:	4623      	mov	r3, r4
 80168f6:	47c8      	blx	r9
 80168f8:	ed94 7a0a 	vldr	s14, [r4, #40]	@ 0x28
 80168fc:	edd4 7a0b 	vldr	s15, [r4, #44]	@ 0x2c
 8016900:	edd4 6a0e 	vldr	s13, [r4, #56]	@ 0x38
 8016904:	ee37 7a27 	vadd.f32	s14, s14, s15
 8016908:	edd4 7a0d 	vldr	s15, [r4, #52]	@ 0x34
 801690c:	68a1      	ldr	r1, [r4, #8]
 801690e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8016912:	ed94 6a08 	vldr	s12, [r4, #32]
 8016916:	edd4 6a07 	vldr	s13, [r4, #28]
 801691a:	ed84 7a0a 	vstr	s14, [r4, #40]	@ 0x28
 801691e:	ee76 6a86 	vadd.f32	s13, s13, s12
 8016922:	edc4 7a0d 	vstr	s15, [r4, #52]	@ 0x34
 8016926:	e9d4 2300 	ldrd	r2, r3, [r4]
 801692a:	edc4 6a07 	vstr	s13, [r4, #28]
 801692e:	441a      	add	r2, r3
 8016930:	6963      	ldr	r3, [r4, #20]
 8016932:	3301      	adds	r3, #1
 8016934:	6022      	str	r2, [r4, #0]
 8016936:	6163      	str	r3, [r4, #20]
 8016938:	69a3      	ldr	r3, [r4, #24]
 801693a:	3b01      	subs	r3, #1
 801693c:	61a3      	str	r3, [r4, #24]
 801693e:	6923      	ldr	r3, [r4, #16]
 8016940:	440b      	add	r3, r1
 8016942:	68e1      	ldr	r1, [r4, #12]
 8016944:	428b      	cmp	r3, r1
 8016946:	6123      	str	r3, [r4, #16]
 8016948:	db15      	blt.n	8016976 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x28e>
 801694a:	ed94 6a09 	vldr	s12, [r4, #36]	@ 0x24
 801694e:	3201      	adds	r2, #1
 8016950:	1a5b      	subs	r3, r3, r1
 8016952:	ee76 6a26 	vadd.f32	s13, s12, s13
 8016956:	6022      	str	r2, [r4, #0]
 8016958:	6123      	str	r3, [r4, #16]
 801695a:	edc4 6a07 	vstr	s13, [r4, #28]
 801695e:	edd4 6a0c 	vldr	s13, [r4, #48]	@ 0x30
 8016962:	ee36 7a87 	vadd.f32	s14, s13, s14
 8016966:	ed84 7a0a 	vstr	s14, [r4, #40]	@ 0x28
 801696a:	ed94 7a0f 	vldr	s14, [r4, #60]	@ 0x3c
 801696e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8016972:	edc4 7a0d 	vstr	s15, [r4, #52]	@ 0x34
 8016976:	ed95 7a0a 	vldr	s14, [r5, #40]	@ 0x28
 801697a:	edd5 7a0b 	vldr	s15, [r5, #44]	@ 0x2c
 801697e:	edd5 6a0e 	vldr	s13, [r5, #56]	@ 0x38
 8016982:	ee37 7a27 	vadd.f32	s14, s14, s15
 8016986:	edd5 7a0d 	vldr	s15, [r5, #52]	@ 0x34
 801698a:	68a9      	ldr	r1, [r5, #8]
 801698c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8016990:	ed95 6a08 	vldr	s12, [r5, #32]
 8016994:	edd5 6a07 	vldr	s13, [r5, #28]
 8016998:	ed85 7a0a 	vstr	s14, [r5, #40]	@ 0x28
 801699c:	ee76 6a86 	vadd.f32	s13, s13, s12
 80169a0:	edc5 7a0d 	vstr	s15, [r5, #52]	@ 0x34
 80169a4:	e9d5 2300 	ldrd	r2, r3, [r5]
 80169a8:	edc5 6a07 	vstr	s13, [r5, #28]
 80169ac:	441a      	add	r2, r3
 80169ae:	696b      	ldr	r3, [r5, #20]
 80169b0:	3301      	adds	r3, #1
 80169b2:	602a      	str	r2, [r5, #0]
 80169b4:	616b      	str	r3, [r5, #20]
 80169b6:	69ab      	ldr	r3, [r5, #24]
 80169b8:	3b01      	subs	r3, #1
 80169ba:	61ab      	str	r3, [r5, #24]
 80169bc:	692b      	ldr	r3, [r5, #16]
 80169be:	440b      	add	r3, r1
 80169c0:	68e9      	ldr	r1, [r5, #12]
 80169c2:	428b      	cmp	r3, r1
 80169c4:	612b      	str	r3, [r5, #16]
 80169c6:	db15      	blt.n	80169f4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x30c>
 80169c8:	ed95 6a09 	vldr	s12, [r5, #36]	@ 0x24
 80169cc:	3201      	adds	r2, #1
 80169ce:	1a5b      	subs	r3, r3, r1
 80169d0:	ee76 6a26 	vadd.f32	s13, s12, s13
 80169d4:	602a      	str	r2, [r5, #0]
 80169d6:	612b      	str	r3, [r5, #16]
 80169d8:	edc5 6a07 	vstr	s13, [r5, #28]
 80169dc:	edd5 6a0c 	vldr	s13, [r5, #48]	@ 0x30
 80169e0:	ee36 7a87 	vadd.f32	s14, s13, s14
 80169e4:	ed85 7a0a 	vstr	s14, [r5, #40]	@ 0x28
 80169e8:	ed95 7a0f 	vldr	s14, [r5, #60]	@ 0x3c
 80169ec:	ee77 7a27 	vadd.f32	s15, s14, s15
 80169f0:	edc5 7a0d 	vstr	s15, [r5, #52]	@ 0x34
 80169f4:	3f01      	subs	r7, #1
 80169f6:	e757      	b.n	80168a8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1c0>
 80169f8:	4299      	cmp	r1, r3
 80169fa:	dc13      	bgt.n	8016a24 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x33c>
 80169fc:	429a      	cmp	r2, r3
 80169fe:	da14      	bge.n	8016a2a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x342>
 8016a00:	2502      	movs	r5, #2
 8016a02:	2703      	movs	r7, #3
 8016a04:	f04f 0800 	mov.w	r8, #0
 8016a08:	46a9      	mov	r9, r5
 8016a0a:	f04f 0a01 	mov.w	sl, #1
 8016a0e:	e6ef      	b.n	80167f0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 8016a10:	2501      	movs	r5, #1
 8016a12:	2700      	movs	r7, #0
 8016a14:	46a9      	mov	r9, r5
 8016a16:	46b8      	mov	r8, r7
 8016a18:	f04f 0a02 	mov.w	sl, #2
 8016a1c:	e6e8      	b.n	80167f0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 8016a1e:	2501      	movs	r5, #1
 8016a20:	2702      	movs	r7, #2
 8016a22:	e6e1      	b.n	80167e8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x100>
 8016a24:	2500      	movs	r5, #0
 8016a26:	2701      	movs	r7, #1
 8016a28:	e7f4      	b.n	8016a14 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x32c>
 8016a2a:	2702      	movs	r7, #2
 8016a2c:	2503      	movs	r5, #3
 8016a2e:	f04f 0900 	mov.w	r9, #0
 8016a32:	46b8      	mov	r8, r7
 8016a34:	e7e9      	b.n	8016a0a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x322>
 8016a36:	4613      	mov	r3, r2
 8016a38:	e728      	b.n	801688c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1a4>
 8016a3a:	bf00      	nop
 8016a3c:	24028e18 	.word	0x24028e18
 8016a40:	fffd8f01 	.word	0xfffd8f01
 8016a44:	00027100 	.word	0x00027100
 8016a48:	0004e1ff 	.word	0x0004e1ff
 8016a4c:	0004e1fe 	.word	0x0004e1fe
 8016a50:	24028e20 	.word	0x24028e20
 8016a54:	4613      	mov	r3, r2
 8016a56:	992b      	ldr	r1, [sp, #172]	@ 0xac
 8016a58:	469e      	mov	lr, r3
 8016a5a:	9f2e      	ldr	r7, [sp, #184]	@ 0xb8
 8016a5c:	469c      	mov	ip, r3
 8016a5e:	9111      	str	r1, [sp, #68]	@ 0x44
 8016a60:	f04f 0900 	mov.w	r9, #0
 8016a64:	eddd 4a34 	vldr	s9, [sp, #208]	@ 0xd0
 8016a68:	ed9d 7a33 	vldr	s14, [sp, #204]	@ 0xcc
 8016a6c:	ed9d 4a37 	vldr	s8, [sp, #220]	@ 0xdc
 8016a70:	eddd 7a36 	vldr	s15, [sp, #216]	@ 0xd8
 8016a74:	eddd 3a31 	vldr	s7, [sp, #196]	@ 0xc4
 8016a78:	eddd 6a30 	vldr	s13, [sp, #192]	@ 0xc0
 8016a7c:	ed9d 5a32 	vldr	s10, [sp, #200]	@ 0xc8
 8016a80:	eddd 5a35 	vldr	s11, [sp, #212]	@ 0xd4
 8016a84:	ed9d 6a38 	vldr	s12, [sp, #224]	@ 0xe0
 8016a88:	e9dd 0a29 	ldrd	r0, sl, [sp, #164]	@ 0xa4
 8016a8c:	e9dd 812c 	ldrd	r8, r1, [sp, #176]	@ 0xb0
 8016a90:	f1bc 0f00 	cmp.w	ip, #0
 8016a94:	d147      	bne.n	8016b26 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x43e>
 8016a96:	eb03 0c07 	add.w	ip, r3, r7
 8016a9a:	1ad7      	subs	r7, r2, r3
 8016a9c:	f1b9 0f00 	cmp.w	r9, #0
 8016aa0:	d009      	beq.n	8016ab6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3ce>
 8016aa2:	9029      	str	r0, [sp, #164]	@ 0xa4
 8016aa4:	ed8d 7a33 	vstr	s14, [sp, #204]	@ 0xcc
 8016aa8:	edcd 7a36 	vstr	s15, [sp, #216]	@ 0xd8
 8016aac:	edcd 6a30 	vstr	s13, [sp, #192]	@ 0xc0
 8016ab0:	912d      	str	r1, [sp, #180]	@ 0xb4
 8016ab2:	e9cd c72e 	strd	ip, r7, [sp, #184]	@ 0xb8
 8016ab6:	991b      	ldr	r1, [sp, #108]	@ 0x6c
 8016ab8:	f04f 0800 	mov.w	r8, #0
 8016abc:	eddd 4a24 	vldr	s9, [sp, #144]	@ 0x90
 8016ac0:	9111      	str	r1, [sp, #68]	@ 0x44
 8016ac2:	eddd 6a23 	vldr	s13, [sp, #140]	@ 0x8c
 8016ac6:	ed9d 4a27 	vldr	s8, [sp, #156]	@ 0x9c
 8016aca:	ed9d 7a26 	vldr	s14, [sp, #152]	@ 0x98
 8016ace:	eddd 3a21 	vldr	s7, [sp, #132]	@ 0x84
 8016ad2:	eddd 7a20 	vldr	s15, [sp, #128]	@ 0x80
 8016ad6:	ed9d 5a22 	vldr	s10, [sp, #136]	@ 0x88
 8016ada:	eddd 5a25 	vldr	s11, [sp, #148]	@ 0x94
 8016ade:	ed9d 6a28 	vldr	s12, [sp, #160]	@ 0xa0
 8016ae2:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	@ 0x64
 8016ae6:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	@ 0x78
 8016aea:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	@ 0x70
 8016aee:	f1be 0f00 	cmp.w	lr, #0
 8016af2:	d031      	beq.n	8016b58 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x470>
 8016af4:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 8016af6:	4450      	add	r0, sl
 8016af8:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8016afc:	4431      	add	r1, r6
 8016afe:	ee37 7a04 	vadd.f32	s14, s14, s8
 8016b02:	ee77 7aa3 	vadd.f32	s15, s15, s7
 8016b06:	4549      	cmp	r1, r9
 8016b08:	db08      	blt.n	8016b1c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x434>
 8016b0a:	ee77 7a85 	vadd.f32	s15, s15, s10
 8016b0e:	3001      	adds	r0, #1
 8016b10:	ee76 6aa5 	vadd.f32	s13, s13, s11
 8016b14:	eba1 0109 	sub.w	r1, r1, r9
 8016b18:	ee37 7a06 	vadd.f32	s14, s14, s12
 8016b1c:	f10e 3eff 	add.w	lr, lr, #4294967295
 8016b20:	f04f 0801 	mov.w	r8, #1
 8016b24:	e7e3      	b.n	8016aee <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x406>
 8016b26:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 8016b28:	4450      	add	r0, sl
 8016b2a:	ee37 7a24 	vadd.f32	s14, s14, s9
 8016b2e:	4431      	add	r1, r6
 8016b30:	ee77 7a84 	vadd.f32	s15, s15, s8
 8016b34:	ee76 6aa3 	vadd.f32	s13, s13, s7
 8016b38:	4541      	cmp	r1, r8
 8016b3a:	db08      	blt.n	8016b4e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x466>
 8016b3c:	ee76 6a85 	vadd.f32	s13, s13, s10
 8016b40:	3001      	adds	r0, #1
 8016b42:	ee37 7a25 	vadd.f32	s14, s14, s11
 8016b46:	eba1 0108 	sub.w	r1, r1, r8
 8016b4a:	ee77 7a86 	vadd.f32	s15, s15, s12
 8016b4e:	f10c 3cff 	add.w	ip, ip, #4294967295
 8016b52:	f04f 0901 	mov.w	r9, #1
 8016b56:	e79b      	b.n	8016a90 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3a8>
 8016b58:	449c      	add	ip, r3
 8016b5a:	1aff      	subs	r7, r7, r3
 8016b5c:	f1b8 0f00 	cmp.w	r8, #0
 8016b60:	d009      	beq.n	8016b76 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x48e>
 8016b62:	9019      	str	r0, [sp, #100]	@ 0x64
 8016b64:	edcd 6a23 	vstr	s13, [sp, #140]	@ 0x8c
 8016b68:	ed8d 7a26 	vstr	s14, [sp, #152]	@ 0x98
 8016b6c:	edcd 7a20 	vstr	s15, [sp, #128]	@ 0x80
 8016b70:	911d      	str	r1, [sp, #116]	@ 0x74
 8016b72:	e9cd c71e 	strd	ip, r7, [sp, #120]	@ 0x78
 8016b76:	1ad2      	subs	r2, r2, r3
 8016b78:	e68b      	b.n	8016892 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 8016b7a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8016b7c:	9a3f      	ldr	r2, [sp, #252]	@ 0xfc
 8016b7e:	2b00      	cmp	r3, #0
 8016b80:	f000 80d1 	beq.w	8016d26 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63e>
 8016b84:	ad19      	add	r5, sp, #100	@ 0x64
 8016b86:	ac39      	add	r4, sp, #228	@ 0xe4
 8016b88:	9b64      	ldr	r3, [sp, #400]	@ 0x190
 8016b8a:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 8016b8e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8016b92:	930c      	str	r3, [sp, #48]	@ 0x30
 8016b94:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8016b96:	6963      	ldr	r3, [r4, #20]
 8016b98:	440b      	add	r3, r1
 8016b9a:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 8016b9e:	4408      	add	r0, r1
 8016ba0:	b200      	sxth	r0, r0
 8016ba2:	4283      	cmp	r3, r0
 8016ba4:	900d      	str	r0, [sp, #52]	@ 0x34
 8016ba6:	f280 80c1 	bge.w	8016d2c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x644>
 8016baa:	428b      	cmp	r3, r1
 8016bac:	da08      	bge.n	8016bc0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 8016bae:	2a00      	cmp	r2, #0
 8016bb0:	dd06      	ble.n	8016bc0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 8016bb2:	1acb      	subs	r3, r1, r3
 8016bb4:	429a      	cmp	r2, r3
 8016bb6:	f2c0 80bb 	blt.w	8016d30 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x648>
 8016bba:	2b00      	cmp	r3, #0
 8016bbc:	f300 80b9 	bgt.w	8016d32 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x64a>
 8016bc0:	6967      	ldr	r7, [r4, #20]
 8016bc2:	f10d 0850 	add.w	r8, sp, #80	@ 0x50
 8016bc6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8016bc8:	443b      	add	r3, r7
 8016bca:	461f      	mov	r7, r3
 8016bcc:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8016bce:	1bdf      	subs	r7, r3, r7
 8016bd0:	4297      	cmp	r7, r2
 8016bd2:	bfa8      	it	ge
 8016bd4:	4617      	movge	r7, r2
 8016bd6:	2f00      	cmp	r7, #0
 8016bd8:	f340 813c 	ble.w	8016e54 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x76c>
 8016bdc:	9b64      	ldr	r3, [sp, #400]	@ 0x190
 8016bde:	6829      	ldr	r1, [r5, #0]
 8016be0:	f9b3 2000 	ldrsh.w	r2, [r3]
 8016be4:	f9bb 3000 	ldrsh.w	r3, [fp]
 8016be8:	4411      	add	r1, r2
 8016bea:	6820      	ldr	r0, [r4, #0]
 8016bec:	4299      	cmp	r1, r3
 8016bee:	dd1a      	ble.n	8016c26 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 8016bf0:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 8016bf4:	4402      	add	r2, r0
 8016bf6:	440b      	add	r3, r1
 8016bf8:	b21b      	sxth	r3, r3
 8016bfa:	429a      	cmp	r2, r3
 8016bfc:	dc13      	bgt.n	8016c26 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 8016bfe:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8016c00:	a912      	add	r1, sp, #72	@ 0x48
 8016c02:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8016c04:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8016c06:	681b      	ldr	r3, [r3, #0]
 8016c08:	9206      	str	r2, [sp, #24]
 8016c0a:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8016c0c:	9500      	str	r5, [sp, #0]
 8016c0e:	9205      	str	r2, [sp, #20]
 8016c10:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8016c12:	e9cd b203 	strd	fp, r2, [sp, #12]
 8016c16:	9a64      	ldr	r2, [sp, #400]	@ 0x190
 8016c18:	e9cd 8201 	strd	r8, r2, [sp, #4]
 8016c1c:	aa49      	add	r2, sp, #292	@ 0x124
 8016c1e:	f8d3 9048 	ldr.w	r9, [r3, #72]	@ 0x48
 8016c22:	4623      	mov	r3, r4
 8016c24:	47c8      	blx	r9
 8016c26:	ed94 7a0a 	vldr	s14, [r4, #40]	@ 0x28
 8016c2a:	edd4 7a0b 	vldr	s15, [r4, #44]	@ 0x2c
 8016c2e:	edd4 6a0e 	vldr	s13, [r4, #56]	@ 0x38
 8016c32:	ee37 7a27 	vadd.f32	s14, s14, s15
 8016c36:	edd4 7a0d 	vldr	s15, [r4, #52]	@ 0x34
 8016c3a:	68a1      	ldr	r1, [r4, #8]
 8016c3c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8016c40:	ed94 6a08 	vldr	s12, [r4, #32]
 8016c44:	edd4 6a07 	vldr	s13, [r4, #28]
 8016c48:	ed84 7a0a 	vstr	s14, [r4, #40]	@ 0x28
 8016c4c:	ee76 6a86 	vadd.f32	s13, s13, s12
 8016c50:	edc4 7a0d 	vstr	s15, [r4, #52]	@ 0x34
 8016c54:	e9d4 2300 	ldrd	r2, r3, [r4]
 8016c58:	edc4 6a07 	vstr	s13, [r4, #28]
 8016c5c:	441a      	add	r2, r3
 8016c5e:	6963      	ldr	r3, [r4, #20]
 8016c60:	3301      	adds	r3, #1
 8016c62:	6022      	str	r2, [r4, #0]
 8016c64:	6163      	str	r3, [r4, #20]
 8016c66:	69a3      	ldr	r3, [r4, #24]
 8016c68:	3b01      	subs	r3, #1
 8016c6a:	61a3      	str	r3, [r4, #24]
 8016c6c:	6923      	ldr	r3, [r4, #16]
 8016c6e:	440b      	add	r3, r1
 8016c70:	68e1      	ldr	r1, [r4, #12]
 8016c72:	428b      	cmp	r3, r1
 8016c74:	6123      	str	r3, [r4, #16]
 8016c76:	db15      	blt.n	8016ca4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x5bc>
 8016c78:	ed94 6a09 	vldr	s12, [r4, #36]	@ 0x24
 8016c7c:	3201      	adds	r2, #1
 8016c7e:	1a5b      	subs	r3, r3, r1
 8016c80:	ee76 6a26 	vadd.f32	s13, s12, s13
 8016c84:	6022      	str	r2, [r4, #0]
 8016c86:	6123      	str	r3, [r4, #16]
 8016c88:	edc4 6a07 	vstr	s13, [r4, #28]
 8016c8c:	edd4 6a0c 	vldr	s13, [r4, #48]	@ 0x30
 8016c90:	ee36 7a87 	vadd.f32	s14, s13, s14
 8016c94:	ed84 7a0a 	vstr	s14, [r4, #40]	@ 0x28
 8016c98:	ed94 7a0f 	vldr	s14, [r4, #60]	@ 0x3c
 8016c9c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8016ca0:	edc4 7a0d 	vstr	s15, [r4, #52]	@ 0x34
 8016ca4:	ed95 7a0a 	vldr	s14, [r5, #40]	@ 0x28
 8016ca8:	edd5 7a0b 	vldr	s15, [r5, #44]	@ 0x2c
 8016cac:	edd5 6a0e 	vldr	s13, [r5, #56]	@ 0x38
 8016cb0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8016cb4:	edd5 7a0d 	vldr	s15, [r5, #52]	@ 0x34
 8016cb8:	68a9      	ldr	r1, [r5, #8]
 8016cba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8016cbe:	ed95 6a08 	vldr	s12, [r5, #32]
 8016cc2:	edd5 6a07 	vldr	s13, [r5, #28]
 8016cc6:	ed85 7a0a 	vstr	s14, [r5, #40]	@ 0x28
 8016cca:	ee76 6a86 	vadd.f32	s13, s13, s12
 8016cce:	edc5 7a0d 	vstr	s15, [r5, #52]	@ 0x34
 8016cd2:	e9d5 2300 	ldrd	r2, r3, [r5]
 8016cd6:	edc5 6a07 	vstr	s13, [r5, #28]
 8016cda:	441a      	add	r2, r3
 8016cdc:	696b      	ldr	r3, [r5, #20]
 8016cde:	3301      	adds	r3, #1
 8016ce0:	602a      	str	r2, [r5, #0]
 8016ce2:	616b      	str	r3, [r5, #20]
 8016ce4:	69ab      	ldr	r3, [r5, #24]
 8016ce6:	3b01      	subs	r3, #1
 8016ce8:	61ab      	str	r3, [r5, #24]
 8016cea:	692b      	ldr	r3, [r5, #16]
 8016cec:	440b      	add	r3, r1
 8016cee:	68e9      	ldr	r1, [r5, #12]
 8016cf0:	428b      	cmp	r3, r1
 8016cf2:	612b      	str	r3, [r5, #16]
 8016cf4:	db15      	blt.n	8016d22 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63a>
 8016cf6:	ed95 6a09 	vldr	s12, [r5, #36]	@ 0x24
 8016cfa:	3201      	adds	r2, #1
 8016cfc:	1a5b      	subs	r3, r3, r1
 8016cfe:	ee76 6a26 	vadd.f32	s13, s12, s13
 8016d02:	602a      	str	r2, [r5, #0]
 8016d04:	612b      	str	r3, [r5, #16]
 8016d06:	edc5 6a07 	vstr	s13, [r5, #28]
 8016d0a:	edd5 6a0c 	vldr	s13, [r5, #48]	@ 0x30
 8016d0e:	ee36 7a87 	vadd.f32	s14, s13, s14
 8016d12:	ed85 7a0a 	vstr	s14, [r5, #40]	@ 0x28
 8016d16:	ed95 7a0f 	vldr	s14, [r5, #60]	@ 0x3c
 8016d1a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8016d1e:	edc5 7a0d 	vstr	s15, [r5, #52]	@ 0x34
 8016d22:	3f01      	subs	r7, #1
 8016d24:	e757      	b.n	8016bd6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4ee>
 8016d26:	ad39      	add	r5, sp, #228	@ 0xe4
 8016d28:	ac19      	add	r4, sp, #100	@ 0x64
 8016d2a:	e72d      	b.n	8016b88 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4a0>
 8016d2c:	4613      	mov	r3, r2
 8016d2e:	e744      	b.n	8016bba <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d2>
 8016d30:	4613      	mov	r3, r2
 8016d32:	9e3b      	ldr	r6, [sp, #236]	@ 0xec
 8016d34:	469e      	mov	lr, r3
 8016d36:	f8dd c0f8 	ldr.w	ip, [sp, #248]	@ 0xf8
 8016d3a:	461f      	mov	r7, r3
 8016d3c:	ed9d 7a43 	vldr	s14, [sp, #268]	@ 0x10c
 8016d40:	f04f 0900 	mov.w	r9, #0
 8016d44:	eddd 4a44 	vldr	s9, [sp, #272]	@ 0x110
 8016d48:	eddd 7a46 	vldr	s15, [sp, #280]	@ 0x118
 8016d4c:	ed9d 4a47 	vldr	s8, [sp, #284]	@ 0x11c
 8016d50:	eddd 6a40 	vldr	s13, [sp, #256]	@ 0x100
 8016d54:	eddd 3a41 	vldr	s7, [sp, #260]	@ 0x104
 8016d58:	993d      	ldr	r1, [sp, #244]	@ 0xf4
 8016d5a:	f8dd 80f0 	ldr.w	r8, [sp, #240]	@ 0xf0
 8016d5e:	ed9d 5a42 	vldr	s10, [sp, #264]	@ 0x108
 8016d62:	eddd 5a45 	vldr	s11, [sp, #276]	@ 0x114
 8016d66:	ed9d 6a48 	vldr	s12, [sp, #288]	@ 0x120
 8016d6a:	960e      	str	r6, [sp, #56]	@ 0x38
 8016d6c:	e9dd 0a39 	ldrd	r0, sl, [sp, #228]	@ 0xe4
 8016d70:	2f00      	cmp	r7, #0
 8016d72:	d146      	bne.n	8016e02 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x71a>
 8016d74:	449c      	add	ip, r3
 8016d76:	1ad7      	subs	r7, r2, r3
 8016d78:	f1b9 0f00 	cmp.w	r9, #0
 8016d7c:	d009      	beq.n	8016d92 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6aa>
 8016d7e:	9039      	str	r0, [sp, #228]	@ 0xe4
 8016d80:	913d      	str	r1, [sp, #244]	@ 0xf4
 8016d82:	edcd 6a40 	vstr	s13, [sp, #256]	@ 0x100
 8016d86:	ed8d 7a43 	vstr	s14, [sp, #268]	@ 0x10c
 8016d8a:	edcd 7a46 	vstr	s15, [sp, #280]	@ 0x118
 8016d8e:	e9cd c73e 	strd	ip, r7, [sp, #248]	@ 0xf8
 8016d92:	991b      	ldr	r1, [sp, #108]	@ 0x6c
 8016d94:	f04f 0800 	mov.w	r8, #0
 8016d98:	eddd 4a24 	vldr	s9, [sp, #144]	@ 0x90
 8016d9c:	910e      	str	r1, [sp, #56]	@ 0x38
 8016d9e:	eddd 6a23 	vldr	s13, [sp, #140]	@ 0x8c
 8016da2:	ed9d 4a27 	vldr	s8, [sp, #156]	@ 0x9c
 8016da6:	ed9d 7a26 	vldr	s14, [sp, #152]	@ 0x98
 8016daa:	eddd 3a21 	vldr	s7, [sp, #132]	@ 0x84
 8016dae:	eddd 7a20 	vldr	s15, [sp, #128]	@ 0x80
 8016db2:	ed9d 5a22 	vldr	s10, [sp, #136]	@ 0x88
 8016db6:	eddd 5a25 	vldr	s11, [sp, #148]	@ 0x94
 8016dba:	ed9d 6a28 	vldr	s12, [sp, #160]	@ 0xa0
 8016dbe:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	@ 0x64
 8016dc2:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	@ 0x78
 8016dc6:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	@ 0x70
 8016dca:	f1be 0f00 	cmp.w	lr, #0
 8016dce:	d030      	beq.n	8016e32 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x74a>
 8016dd0:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
 8016dd2:	4450      	add	r0, sl
 8016dd4:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8016dd8:	4431      	add	r1, r6
 8016dda:	ee37 7a04 	vadd.f32	s14, s14, s8
 8016dde:	ee77 7aa3 	vadd.f32	s15, s15, s7
 8016de2:	4549      	cmp	r1, r9
 8016de4:	db08      	blt.n	8016df8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x710>
 8016de6:	ee77 7a85 	vadd.f32	s15, s15, s10
 8016dea:	3001      	adds	r0, #1
 8016dec:	ee76 6aa5 	vadd.f32	s13, s13, s11
 8016df0:	eba1 0109 	sub.w	r1, r1, r9
 8016df4:	ee37 7a06 	vadd.f32	s14, s14, s12
 8016df8:	f10e 3eff 	add.w	lr, lr, #4294967295
 8016dfc:	f04f 0801 	mov.w	r8, #1
 8016e00:	e7e3      	b.n	8016dca <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6e2>
 8016e02:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
 8016e04:	4450      	add	r0, sl
 8016e06:	ee37 7a24 	vadd.f32	s14, s14, s9
 8016e0a:	4431      	add	r1, r6
 8016e0c:	ee77 7a84 	vadd.f32	s15, s15, s8
 8016e10:	ee76 6aa3 	vadd.f32	s13, s13, s7
 8016e14:	4541      	cmp	r1, r8
 8016e16:	db08      	blt.n	8016e2a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x742>
 8016e18:	ee76 6a85 	vadd.f32	s13, s13, s10
 8016e1c:	3001      	adds	r0, #1
 8016e1e:	ee37 7a25 	vadd.f32	s14, s14, s11
 8016e22:	eba1 0108 	sub.w	r1, r1, r8
 8016e26:	ee77 7a86 	vadd.f32	s15, s15, s12
 8016e2a:	3f01      	subs	r7, #1
 8016e2c:	f04f 0901 	mov.w	r9, #1
 8016e30:	e79e      	b.n	8016d70 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x688>
 8016e32:	449c      	add	ip, r3
 8016e34:	1aff      	subs	r7, r7, r3
 8016e36:	f1b8 0f00 	cmp.w	r8, #0
 8016e3a:	d009      	beq.n	8016e50 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x768>
 8016e3c:	9019      	str	r0, [sp, #100]	@ 0x64
 8016e3e:	edcd 6a23 	vstr	s13, [sp, #140]	@ 0x8c
 8016e42:	ed8d 7a26 	vstr	s14, [sp, #152]	@ 0x98
 8016e46:	edcd 7a20 	vstr	s15, [sp, #128]	@ 0x80
 8016e4a:	911d      	str	r1, [sp, #116]	@ 0x74
 8016e4c:	e9cd c71e 	strd	ip, r7, [sp, #120]	@ 0x78
 8016e50:	1ad2      	subs	r2, r2, r3
 8016e52:	e6b5      	b.n	8016bc0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 8016e54:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8016e56:	681b      	ldr	r3, [r3, #0]
 8016e58:	b923      	cbnz	r3, 8016e64 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8016e5a:	4b04      	ldr	r3, [pc, #16]	@ (8016e6c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x784>)
 8016e5c:	6818      	ldr	r0, [r3, #0]
 8016e5e:	6803      	ldr	r3, [r0, #0]
 8016e60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8016e62:	4798      	blx	r3
 8016e64:	b05b      	add	sp, #364	@ 0x16c
 8016e66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016e6a:	bf00      	nop
 8016e6c:	24028e20 	.word	0x24028e20

08016e70 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE>:
 8016e70:	b570      	push	{r4, r5, r6, lr}
 8016e72:	4604      	mov	r4, r0
 8016e74:	2500      	movs	r5, #0
 8016e76:	9805      	ldr	r0, [sp, #20]
 8016e78:	f89d 601c 	ldrb.w	r6, [sp, #28]
 8016e7c:	6061      	str	r1, [r4, #4]
 8016e7e:	8263      	strh	r3, [r4, #18]
 8016e80:	f89d 1010 	ldrb.w	r1, [sp, #16]
 8016e84:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 8016e88:	8025      	strh	r5, [r4, #0]
 8016e8a:	7221      	strb	r1, [r4, #8]
 8016e8c:	7266      	strb	r6, [r4, #9]
 8016e8e:	60e0      	str	r0, [r4, #12]
 8016e90:	8222      	strh	r2, [r4, #16]
 8016e92:	82a3      	strh	r3, [r4, #20]
 8016e94:	82e5      	strh	r5, [r4, #22]
 8016e96:	8325      	strh	r5, [r4, #24]
 8016e98:	8365      	strh	r5, [r4, #26]
 8016e9a:	83a5      	strh	r5, [r4, #28]
 8016e9c:	83e5      	strh	r5, [r4, #30]
 8016e9e:	8425      	strh	r5, [r4, #32]
 8016ea0:	f884 5022 	strb.w	r5, [r4, #34]	@ 0x22
 8016ea4:	b32e      	cbz	r6, 8016ef2 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE+0x82>
 8016ea6:	6803      	ldr	r3, [r0, #0]
 8016ea8:	695b      	ldr	r3, [r3, #20]
 8016eaa:	4798      	blx	r3
 8016eac:	4606      	mov	r6, r0
 8016eae:	b300      	cbz	r0, 8016ef2 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE+0x82>
 8016eb0:	68e0      	ldr	r0, [r4, #12]
 8016eb2:	4631      	mov	r1, r6
 8016eb4:	6803      	ldr	r3, [r0, #0]
 8016eb6:	68db      	ldr	r3, [r3, #12]
 8016eb8:	4798      	blx	r3
 8016eba:	4605      	mov	r5, r0
 8016ebc:	b1c8      	cbz	r0, 8016ef2 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE+0x82>
 8016ebe:	7b43      	ldrb	r3, [r0, #13]
 8016ec0:	7a82      	ldrb	r2, [r0, #10]
 8016ec2:	005b      	lsls	r3, r3, #1
 8016ec4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8016ec8:	4313      	orrs	r3, r2
 8016eca:	8423      	strh	r3, [r4, #32]
 8016ecc:	7a63      	ldrb	r3, [r4, #9]
 8016ece:	2b06      	cmp	r3, #6
 8016ed0:	d10f      	bne.n	8016ef2 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE+0x82>
 8016ed2:	68e0      	ldr	r0, [r4, #12]
 8016ed4:	462a      	mov	r2, r5
 8016ed6:	4631      	mov	r1, r6
 8016ed8:	6803      	ldr	r3, [r0, #0]
 8016eda:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8016edc:	4798      	blx	r3
 8016ede:	7b6b      	ldrb	r3, [r5, #13]
 8016ee0:	005b      	lsls	r3, r3, #1
 8016ee2:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 8016ee6:	7aab      	ldrb	r3, [r5, #10]
 8016ee8:	4313      	orrs	r3, r2
 8016eea:	4418      	add	r0, r3
 8016eec:	8c23      	ldrh	r3, [r4, #32]
 8016eee:	4418      	add	r0, r3
 8016ef0:	8420      	strh	r0, [r4, #32]
 8016ef2:	4620      	mov	r0, r4
 8016ef4:	bd70      	pop	{r4, r5, r6, pc}

08016ef6 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>:
 8016ef6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016efa:	2400      	movs	r4, #0
 8016efc:	b085      	sub	sp, #20
 8016efe:	4681      	mov	r9, r0
 8016f00:	4688      	mov	r8, r1
 8016f02:	4692      	mov	sl, r2
 8016f04:	469b      	mov	fp, r3
 8016f06:	4627      	mov	r7, r4
 8016f08:	4625      	mov	r5, r4
 8016f0a:	4626      	mov	r6, r4
 8016f0c:	4554      	cmp	r4, sl
 8016f0e:	da2a      	bge.n	8016f66 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 8016f10:	2300      	movs	r3, #0
 8016f12:	9303      	str	r3, [sp, #12]
 8016f14:	f64f 63ff 	movw	r3, #65279	@ 0xfeff
 8016f18:	429d      	cmp	r5, r3
 8016f1a:	d004      	beq.n	8016f26 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x30>
 8016f1c:	f242 030b 	movw	r3, #8203	@ 0x200b
 8016f20:	429d      	cmp	r5, r3
 8016f22:	bf18      	it	ne
 8016f24:	462f      	movne	r7, r5
 8016f26:	ab03      	add	r3, sp, #12
 8016f28:	4642      	mov	r2, r8
 8016f2a:	4659      	mov	r1, fp
 8016f2c:	4648      	mov	r0, r9
 8016f2e:	f003 fce1 	bl	801a8f4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8016f32:	4605      	mov	r5, r0
 8016f34:	b1b8      	cbz	r0, 8016f66 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 8016f36:	280a      	cmp	r0, #10
 8016f38:	d015      	beq.n	8016f66 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 8016f3a:	9a03      	ldr	r2, [sp, #12]
 8016f3c:	b18a      	cbz	r2, 8016f62 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x6c>
 8016f3e:	7b50      	ldrb	r0, [r2, #13]
 8016f40:	4639      	mov	r1, r7
 8016f42:	7a93      	ldrb	r3, [r2, #10]
 8016f44:	0040      	lsls	r0, r0, #1
 8016f46:	8895      	ldrh	r5, [r2, #4]
 8016f48:	f400 7080 	and.w	r0, r0, #256	@ 0x100
 8016f4c:	4303      	orrs	r3, r0
 8016f4e:	4640      	mov	r0, r8
 8016f50:	9301      	str	r3, [sp, #4]
 8016f52:	f8d8 3000 	ldr.w	r3, [r8]
 8016f56:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8016f58:	4798      	blx	r3
 8016f5a:	9b01      	ldr	r3, [sp, #4]
 8016f5c:	4418      	add	r0, r3
 8016f5e:	4406      	add	r6, r0
 8016f60:	b2b6      	uxth	r6, r6
 8016f62:	3401      	adds	r4, #1
 8016f64:	e7d2      	b.n	8016f0c <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x16>
 8016f66:	4630      	mov	r0, r6
 8016f68:	b005      	add	sp, #20
 8016f6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08016f6e <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>:
 8016f6e:	2a02      	cmp	r2, #2
 8016f70:	b530      	push	{r4, r5, lr}
 8016f72:	d011      	beq.n	8016f98 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x2a>
 8016f74:	2a03      	cmp	r2, #3
 8016f76:	d01c      	beq.n	8016fb2 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x44>
 8016f78:	2a01      	cmp	r2, #1
 8016f7a:	d10c      	bne.n	8016f96 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 8016f7c:	888b      	ldrh	r3, [r1, #4]
 8016f7e:	8801      	ldrh	r1, [r0, #0]
 8016f80:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
 8016f84:	1a5b      	subs	r3, r3, r1
 8016f86:	8844      	ldrh	r4, [r0, #2]
 8016f88:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 8016f8c:	1a9b      	subs	r3, r3, r2
 8016f8e:	8004      	strh	r4, [r0, #0]
 8016f90:	8081      	strh	r1, [r0, #4]
 8016f92:	8043      	strh	r3, [r0, #2]
 8016f94:	80c2      	strh	r2, [r0, #6]
 8016f96:	bd30      	pop	{r4, r5, pc}
 8016f98:	88cb      	ldrh	r3, [r1, #6]
 8016f9a:	8842      	ldrh	r2, [r0, #2]
 8016f9c:	1a9b      	subs	r3, r3, r2
 8016f9e:	88c2      	ldrh	r2, [r0, #6]
 8016fa0:	1a9b      	subs	r3, r3, r2
 8016fa2:	888a      	ldrh	r2, [r1, #4]
 8016fa4:	8801      	ldrh	r1, [r0, #0]
 8016fa6:	8043      	strh	r3, [r0, #2]
 8016fa8:	1a52      	subs	r2, r2, r1
 8016faa:	8881      	ldrh	r1, [r0, #4]
 8016fac:	1a52      	subs	r2, r2, r1
 8016fae:	8002      	strh	r2, [r0, #0]
 8016fb0:	e7f1      	b.n	8016f96 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 8016fb2:	88cb      	ldrh	r3, [r1, #6]
 8016fb4:	8841      	ldrh	r1, [r0, #2]
 8016fb6:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 8016fba:	1a5b      	subs	r3, r3, r1
 8016fbc:	f9b0 5000 	ldrsh.w	r5, [r0]
 8016fc0:	f9b0 4004 	ldrsh.w	r4, [r0, #4]
 8016fc4:	1a9b      	subs	r3, r3, r2
 8016fc6:	8045      	strh	r5, [r0, #2]
 8016fc8:	8082      	strh	r2, [r0, #4]
 8016fca:	8003      	strh	r3, [r0, #0]
 8016fcc:	80c4      	strh	r4, [r0, #6]
 8016fce:	e7e2      	b.n	8016f96 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>

08016fd0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>:
 8016fd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016fd4:	b09f      	sub	sp, #124	@ 0x7c
 8016fd6:	920f      	str	r2, [sp, #60]	@ 0x3c
 8016fd8:	9312      	str	r3, [sp, #72]	@ 0x48
 8016fda:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 8016fdc:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 8016fde:	8812      	ldrh	r2, [r2, #0]
 8016fe0:	889b      	ldrh	r3, [r3, #4]
 8016fe2:	9d2a      	ldr	r5, [sp, #168]	@ 0xa8
 8016fe4:	4413      	add	r3, r2
 8016fe6:	900e      	str	r0, [sp, #56]	@ 0x38
 8016fe8:	6828      	ldr	r0, [r5, #0]
 8016fea:	b21b      	sxth	r3, r3
 8016fec:	9117      	str	r1, [sp, #92]	@ 0x5c
 8016fee:	f89d b0ac 	ldrb.w	fp, [sp, #172]	@ 0xac
 8016ff2:	9311      	str	r3, [sp, #68]	@ 0x44
 8016ff4:	6803      	ldr	r3, [r0, #0]
 8016ff6:	f89d 40b8 	ldrb.w	r4, [sp, #184]	@ 0xb8
 8016ffa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8016ffc:	4798      	blx	r3
 8016ffe:	682b      	ldr	r3, [r5, #0]
 8017000:	9013      	str	r0, [sp, #76]	@ 0x4c
 8017002:	7b1a      	ldrb	r2, [r3, #12]
 8017004:	7adb      	ldrb	r3, [r3, #11]
 8017006:	9215      	str	r2, [sp, #84]	@ 0x54
 8017008:	9316      	str	r3, [sp, #88]	@ 0x58
 801700a:	f9bd 60a0 	ldrsh.w	r6, [sp, #160]	@ 0xa0
 801700e:	2c00      	cmp	r4, #0
 8017010:	d067      	beq.n	80170e2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x112>
 8017012:	7c2b      	ldrb	r3, [r5, #16]
 8017014:	9a2d      	ldr	r2, [sp, #180]	@ 0xb4
 8017016:	2b06      	cmp	r3, #6
 8017018:	bf14      	ite	ne
 801701a:	2301      	movne	r3, #1
 801701c:	2302      	moveq	r3, #2
 801701e:	4413      	add	r3, r2
 8017020:	f04f 0900 	mov.w	r9, #0
 8017024:	9310      	str	r3, [sp, #64]	@ 0x40
 8017026:	464c      	mov	r4, r9
 8017028:	f8cd 9034 	str.w	r9, [sp, #52]	@ 0x34
 801702c:	f8cd 9030 	str.w	r9, [sp, #48]	@ 0x30
 8017030:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8017032:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8017034:	4293      	cmp	r3, r2
 8017036:	f280 808b 	bge.w	8017150 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x180>
 801703a:	2300      	movs	r3, #0
 801703c:	e9cd 331c 	strd	r3, r3, [sp, #112]	@ 0x70
 8017040:	f88d 306f 	strb.w	r3, [sp, #111]	@ 0x6f
 8017044:	f64f 63ff 	movw	r3, #65279	@ 0xfeff
 8017048:	429c      	cmp	r4, r3
 801704a:	d006      	beq.n	801705a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x8a>
 801704c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801704e:	f242 020b 	movw	r2, #8203	@ 0x200b
 8017052:	4294      	cmp	r4, r2
 8017054:	bf18      	it	ne
 8017056:	4623      	movne	r3, r4
 8017058:	930c      	str	r3, [sp, #48]	@ 0x30
 801705a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801705c:	992d      	ldr	r1, [sp, #180]	@ 0xb4
 801705e:	682a      	ldr	r2, [r5, #0]
 8017060:	428b      	cmp	r3, r1
 8017062:	db40      	blt.n	80170e6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x116>
 8017064:	6813      	ldr	r3, [r2, #0]
 8017066:	4610      	mov	r0, r2
 8017068:	695b      	ldr	r3, [r3, #20]
 801706a:	4798      	blx	r3
 801706c:	4604      	mov	r4, r0
 801706e:	6828      	ldr	r0, [r5, #0]
 8017070:	aa1d      	add	r2, sp, #116	@ 0x74
 8017072:	4621      	mov	r1, r4
 8017074:	6803      	ldr	r3, [r0, #0]
 8017076:	689f      	ldr	r7, [r3, #8]
 8017078:	f10d 036f 	add.w	r3, sp, #111	@ 0x6f
 801707c:	47b8      	blx	r7
 801707e:	901c      	str	r0, [sp, #112]	@ 0x70
 8017080:	f64f 63ff 	movw	r3, #65279	@ 0xfeff
 8017084:	429c      	cmp	r4, r3
 8017086:	f000 80eb 	beq.w	8017260 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x290>
 801708a:	f242 030b 	movw	r3, #8203	@ 0x200b
 801708e:	429c      	cmp	r4, r3
 8017090:	f000 80e6 	beq.w	8017260 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x290>
 8017094:	2c00      	cmp	r4, #0
 8017096:	f000 810d 	beq.w	80172b4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2e4>
 801709a:	2c0a      	cmp	r4, #10
 801709c:	d05e      	beq.n	801715c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18c>
 801709e:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 80170a0:	b36a      	cbz	r2, 80170fe <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x12e>
 80170a2:	8894      	ldrh	r4, [r2, #4]
 80170a4:	f1bb 0f00 	cmp.w	fp, #0
 80170a8:	d03a      	beq.n	8017120 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x150>
 80170aa:	f892 900d 	ldrb.w	r9, [r2, #13]
 80170ae:	f1bb 0f01 	cmp.w	fp, #1
 80170b2:	ea4f 0949 	mov.w	r9, r9, lsl #1
 80170b6:	f409 7380 	and.w	r3, r9, #256	@ 0x100
 80170ba:	f892 900a 	ldrb.w	r9, [r2, #10]
 80170be:	ea49 0903 	orr.w	r9, r9, r3
 80170c2:	d133      	bne.n	801712c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x15c>
 80170c4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80170c6:	eba6 0609 	sub.w	r6, r6, r9
 80170ca:	2b00      	cmp	r3, #0
 80170cc:	d14d      	bne.n	801716a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x19a>
 80170ce:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 80170d0:	eb09 0306 	add.w	r3, r9, r6
 80170d4:	4413      	add	r3, r2
 80170d6:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 80170d8:	f9b2 2000 	ldrsh.w	r2, [r2]
 80170dc:	4293      	cmp	r3, r2
 80170de:	da4e      	bge.n	801717e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1ae>
 80170e0:	e036      	b.n	8017150 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x180>
 80170e2:	9b2d      	ldr	r3, [sp, #180]	@ 0xb4
 80170e4:	e79c      	b.n	8017020 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x50>
 80170e6:	f10d 036f 	add.w	r3, sp, #111	@ 0x6f
 80170ea:	4659      	mov	r1, fp
 80170ec:	982c      	ldr	r0, [sp, #176]	@ 0xb0
 80170ee:	9301      	str	r3, [sp, #4]
 80170f0:	ab1d      	add	r3, sp, #116	@ 0x74
 80170f2:	9300      	str	r3, [sp, #0]
 80170f4:	ab1c      	add	r3, sp, #112	@ 0x70
 80170f6:	f003 fc46 	bl	801a986 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>
 80170fa:	4604      	mov	r4, r0
 80170fc:	e7c0      	b.n	8017080 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xb0>
 80170fe:	6828      	ldr	r0, [r5, #0]
 8017100:	6803      	ldr	r3, [r0, #0]
 8017102:	691b      	ldr	r3, [r3, #16]
 8017104:	4798      	blx	r3
 8017106:	f64f 63ff 	movw	r3, #65279	@ 0xfeff
 801710a:	4298      	cmp	r0, r3
 801710c:	f000 80a8 	beq.w	8017260 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x290>
 8017110:	f242 030b 	movw	r3, #8203	@ 0x200b
 8017114:	4298      	cmp	r0, r3
 8017116:	f000 80a3 	beq.w	8017260 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x290>
 801711a:	f1bb 0f00 	cmp.w	fp, #0
 801711e:	d100      	bne.n	8017122 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x152>
 8017120:	444e      	add	r6, r9
 8017122:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8017124:	2a00      	cmp	r2, #0
 8017126:	d1c0      	bne.n	80170aa <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xda>
 8017128:	4691      	mov	r9, r2
 801712a:	e099      	b.n	8017260 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x290>
 801712c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801712e:	2b00      	cmp	r3, #0
 8017130:	f000 80c2 	beq.w	80172b8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2e8>
 8017134:	f1bb 0f00 	cmp.w	fp, #0
 8017138:	d117      	bne.n	801716a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x19a>
 801713a:	6828      	ldr	r0, [r5, #0]
 801713c:	990c      	ldr	r1, [sp, #48]	@ 0x30
 801713e:	6803      	ldr	r3, [r0, #0]
 8017140:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8017142:	4798      	blx	r3
 8017144:	4406      	add	r6, r0
 8017146:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8017148:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801714a:	1af3      	subs	r3, r6, r3
 801714c:	4293      	cmp	r3, r2
 801714e:	dd16      	ble.n	801717e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1ae>
 8017150:	2c00      	cmp	r4, #0
 8017152:	f000 80af 	beq.w	80172b4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2e4>
 8017156:	2c0a      	cmp	r4, #10
 8017158:	f040 809d 	bne.w	8017296 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2c6>
 801715c:	240a      	movs	r4, #10
 801715e:	fab4 f084 	clz	r0, r4
 8017162:	0940      	lsrs	r0, r0, #5
 8017164:	b01f      	add	sp, #124	@ 0x7c
 8017166:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801716a:	6828      	ldr	r0, [r5, #0]
 801716c:	990c      	ldr	r1, [sp, #48]	@ 0x30
 801716e:	6803      	ldr	r3, [r0, #0]
 8017170:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8017172:	4798      	blx	r3
 8017174:	f1bb 0f01 	cmp.w	fp, #1
 8017178:	eba6 0600 	sub.w	r6, r6, r0
 801717c:	d0a7      	beq.n	80170ce <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xfe>
 801717e:	981c      	ldr	r0, [sp, #112]	@ 0x70
 8017180:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 8017182:	f990 1009 	ldrsb.w	r1, [r0, #9]
 8017186:	f9b3 8000 	ldrsh.w	r8, [r3]
 801718a:	7b43      	ldrb	r3, [r0, #13]
 801718c:	4431      	add	r1, r6
 801718e:	015b      	lsls	r3, r3, #5
 8017190:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 8017194:	7983      	ldrb	r3, [r0, #6]
 8017196:	4313      	orrs	r3, r2
 8017198:	440b      	add	r3, r1
 801719a:	4543      	cmp	r3, r8
 801719c:	db60      	blt.n	8017260 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x290>
 801719e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80171a0:	4299      	cmp	r1, r3
 80171a2:	da5d      	bge.n	8017260 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x290>
 80171a4:	6828      	ldr	r0, [r5, #0]
 80171a6:	45b0      	cmp	r8, r6
 80171a8:	6803      	ldr	r3, [r0, #0]
 80171aa:	bfcc      	ite	gt
 80171ac:	eba8 0806 	subgt.w	r8, r8, r6
 80171b0:	f04f 0800 	movle.w	r8, #0
 80171b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80171b6:	bfc8      	it	gt
 80171b8:	fa1f f888 	uxthgt.w	r8, r8
 80171bc:	4798      	blx	r3
 80171be:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 80171c0:	7b53      	ldrb	r3, [r2, #13]
 80171c2:	00d9      	lsls	r1, r3, #3
 80171c4:	f401 7780 	and.w	r7, r1, #256	@ 0x100
 80171c8:	7a11      	ldrb	r1, [r2, #8]
 80171ca:	4339      	orrs	r1, r7
 80171cc:	065f      	lsls	r7, r3, #25
 80171ce:	9f12      	ldr	r7, [sp, #72]	@ 0x48
 80171d0:	bf48      	it	mi
 80171d2:	f5a1 7100 	submi.w	r1, r1, #512	@ 0x200
 80171d6:	4407      	add	r7, r0
 80171d8:	bf48      	it	mi
 80171da:	b209      	sxthmi	r1, r1
 80171dc:	1a7f      	subs	r7, r7, r1
 80171de:	9929      	ldr	r1, [sp, #164]	@ 0xa4
 80171e0:	b2bf      	uxth	r7, r7
 80171e2:	f9b1 1002 	ldrsh.w	r1, [r1, #2]
 80171e6:	fa0f fa87 	sxth.w	sl, r7
 80171ea:	4551      	cmp	r1, sl
 80171ec:	dd3c      	ble.n	8017268 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x298>
 80171ee:	011b      	lsls	r3, r3, #4
 80171f0:	79d0      	ldrb	r0, [r2, #7]
 80171f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80171f6:	4303      	orrs	r3, r0
 80171f8:	449a      	add	sl, r3
 80171fa:	4551      	cmp	r1, sl
 80171fc:	dc30      	bgt.n	8017260 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x290>
 80171fe:	1bcf      	subs	r7, r1, r7
 8017200:	468a      	mov	sl, r1
 8017202:	b23f      	sxth	r7, r7
 8017204:	9219      	str	r2, [sp, #100]	@ 0x64
 8017206:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8017208:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801720a:	6828      	ldr	r0, [r5, #0]
 801720c:	2a00      	cmp	r2, #0
 801720e:	d12d      	bne.n	801726c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x29c>
 8017210:	9318      	str	r3, [sp, #96]	@ 0x60
 8017212:	b2bf      	uxth	r7, r7
 8017214:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8017216:	6819      	ldr	r1, [r3, #0]
 8017218:	6ccb      	ldr	r3, [r1, #76]	@ 0x4c
 801721a:	6801      	ldr	r1, [r0, #0]
 801721c:	9314      	str	r3, [sp, #80]	@ 0x50
 801721e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8017220:	4788      	blx	r1
 8017222:	79a9      	ldrb	r1, [r5, #6]
 8017224:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8017226:	910b      	str	r1, [sp, #44]	@ 0x2c
 8017228:	7ba9      	ldrb	r1, [r5, #14]
 801722a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 801722c:	910a      	str	r1, [sp, #40]	@ 0x28
 801722e:	f89d 106f 	ldrb.w	r1, [sp, #111]	@ 0x6f
 8017232:	9109      	str	r1, [sp, #36]	@ 0x24
 8017234:	68a9      	ldr	r1, [r5, #8]
 8017236:	9306      	str	r3, [sp, #24]
 8017238:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 801723a:	9205      	str	r2, [sp, #20]
 801723c:	9304      	str	r3, [sp, #16]
 801723e:	f8cd a004 	str.w	sl, [sp, #4]
 8017242:	e9cd 8702 	strd	r8, r7, [sp, #8]
 8017246:	44b0      	add	r8, r6
 8017248:	9f14      	ldr	r7, [sp, #80]	@ 0x50
 801724a:	fa0f f388 	sxth.w	r3, r8
 801724e:	9300      	str	r3, [sp, #0]
 8017250:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8017252:	e9cd 0107 	strd	r0, r1, [sp, #28]
 8017256:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 8017258:	681a      	ldr	r2, [r3, #0]
 801725a:	980e      	ldr	r0, [sp, #56]	@ 0x38
 801725c:	685b      	ldr	r3, [r3, #4]
 801725e:	47b8      	blx	r7
 8017260:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8017262:	3301      	adds	r3, #1
 8017264:	930d      	str	r3, [sp, #52]	@ 0x34
 8017266:	e6e3      	b.n	8017030 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x60>
 8017268:	2700      	movs	r7, #0
 801726a:	e7cb      	b.n	8017204 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x234>
 801726c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801726e:	f8d2 c008 	ldr.w	ip, [r2, #8]
 8017272:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8017274:	f8dc 1000 	ldr.w	r1, [ip]
 8017278:	e9cd 6204 	strd	r6, r2, [sp, #16]
 801727c:	79aa      	ldrb	r2, [r5, #6]
 801727e:	9203      	str	r2, [sp, #12]
 8017280:	7baa      	ldrb	r2, [r5, #14]
 8017282:	9202      	str	r2, [sp, #8]
 8017284:	68aa      	ldr	r2, [r5, #8]
 8017286:	e9cd 0200 	strd	r0, r2, [sp]
 801728a:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 801728c:	4660      	mov	r0, ip
 801728e:	688f      	ldr	r7, [r1, #8]
 8017290:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8017292:	47b8      	blx	r7
 8017294:	e7e4      	b.n	8017260 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x290>
 8017296:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 8017298:	3501      	adds	r5, #1
 801729a:	9b2d      	ldr	r3, [sp, #180]	@ 0xb4
 801729c:	429d      	cmp	r5, r3
 801729e:	f6bf af5e 	bge.w	801715e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18e>
 80172a2:	4659      	mov	r1, fp
 80172a4:	982c      	ldr	r0, [sp, #176]	@ 0xb0
 80172a6:	f7ed f8e3 	bl	8004470 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 80172aa:	4604      	mov	r4, r0
 80172ac:	b110      	cbz	r0, 80172b4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2e4>
 80172ae:	280a      	cmp	r0, #10
 80172b0:	d1f2      	bne.n	8017298 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2c8>
 80172b2:	e753      	b.n	801715c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18c>
 80172b4:	2400      	movs	r4, #0
 80172b6:	e752      	b.n	801715e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18e>
 80172b8:	f1bb 0f00 	cmp.w	fp, #0
 80172bc:	f43f af43 	beq.w	8017146 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x176>
 80172c0:	e75d      	b.n	801717e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1ae>

080172c2 <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>:
 80172c2:	b530      	push	{r4, r5, lr}
 80172c4:	8ac4      	ldrh	r4, [r0, #22]
 80172c6:	8b45      	ldrh	r5, [r0, #26]
 80172c8:	8343      	strh	r3, [r0, #26]
 80172ca:	442c      	add	r4, r5
 80172cc:	1ae4      	subs	r4, r4, r3
 80172ce:	8b83      	ldrh	r3, [r0, #28]
 80172d0:	82c4      	strh	r4, [r0, #22]
 80172d2:	8b04      	ldrh	r4, [r0, #24]
 80172d4:	4422      	add	r2, r4
 80172d6:	440c      	add	r4, r1
 80172d8:	1a59      	subs	r1, r3, r1
 80172da:	83c2      	strh	r2, [r0, #30]
 80172dc:	8304      	strh	r4, [r0, #24]
 80172de:	8381      	strh	r1, [r0, #28]
 80172e0:	bd30      	pop	{r4, r5, pc}

080172e2 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>:
 80172e2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80172e6:	4604      	mov	r4, r0
 80172e8:	8a47      	ldrh	r7, [r0, #18]
 80172ea:	68c0      	ldr	r0, [r0, #12]
 80172ec:	b085      	sub	sp, #20
 80172ee:	6803      	ldr	r3, [r0, #0]
 80172f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80172f2:	4798      	blx	r3
 80172f4:	f9b4 6014 	ldrsh.w	r6, [r4, #20]
 80172f8:	7a63      	ldrb	r3, [r4, #9]
 80172fa:	eb06 0640 	add.w	r6, r6, r0, lsl #1
 80172fe:	3b01      	subs	r3, #1
 8017300:	42b7      	cmp	r7, r6
 8017302:	bfac      	ite	ge
 8017304:	f04f 0900 	movge.w	r9, #0
 8017308:	f04f 0901 	movlt.w	r9, #1
 801730c:	2b05      	cmp	r3, #5
 801730e:	d804      	bhi.n	801731a <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x38>
 8017310:	e8df f003 	tbb	[pc, r3]
 8017314:	470f0854 	.word	0x470f0854
 8017318:	4c4c      	.short	0x4c4c
 801731a:	2500      	movs	r5, #0
 801731c:	46a9      	mov	r9, r5
 801731e:	462e      	mov	r6, r5
 8017320:	462f      	mov	r7, r5
 8017322:	e00e      	b.n	8017342 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x60>
 8017324:	42b7      	cmp	r7, r6
 8017326:	f04f 0500 	mov.w	r5, #0
 801732a:	bfb4      	ite	lt
 801732c:	2600      	movlt	r6, #0
 801732e:	2601      	movge	r6, #1
 8017330:	e7f6      	b.n	8017320 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x3e>
 8017332:	42b7      	cmp	r7, r6
 8017334:	464d      	mov	r5, r9
 8017336:	f04f 0900 	mov.w	r9, #0
 801733a:	bfb4      	ite	lt
 801733c:	2600      	movlt	r6, #0
 801733e:	2601      	movge	r6, #1
 8017340:	464f      	mov	r7, r9
 8017342:	f04f 0800 	mov.w	r8, #0
 8017346:	f8a4 8016 	strh.w	r8, [r4, #22]
 801734a:	f8a4 8018 	strh.w	r8, [r4, #24]
 801734e:	f8cd 8004 	str.w	r8, [sp, #4]
 8017352:	2300      	movs	r3, #0
 8017354:	9303      	str	r3, [sp, #12]
 8017356:	8823      	ldrh	r3, [r4, #0]
 8017358:	2b20      	cmp	r3, #32
 801735a:	d033      	beq.n	80173c4 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xe2>
 801735c:	f242 010b 	movw	r1, #8203	@ 0x200b
 8017360:	1a5a      	subs	r2, r3, r1
 8017362:	f1d2 0a00 	rsbs	sl, r2, #0
 8017366:	eb4a 0a02 	adc.w	sl, sl, r2
 801736a:	f64f 62ff 	movw	r2, #65279	@ 0xfeff
 801736e:	4293      	cmp	r3, r2
 8017370:	d008      	beq.n	8017384 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xa2>
 8017372:	428b      	cmp	r3, r1
 8017374:	9a01      	ldr	r2, [sp, #4]
 8017376:	bf0e      	itee	eq
 8017378:	f04f 0a01 	moveq.w	sl, #1
 801737c:	461a      	movne	r2, r3
 801737e:	f04f 0a00 	movne.w	sl, #0
 8017382:	9201      	str	r2, [sp, #4]
 8017384:	ab03      	add	r3, sp, #12
 8017386:	68e2      	ldr	r2, [r4, #12]
 8017388:	7a21      	ldrb	r1, [r4, #8]
 801738a:	6860      	ldr	r0, [r4, #4]
 801738c:	f003 fab2 	bl	801a8f4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8017390:	8020      	strh	r0, [r4, #0]
 8017392:	b9d8      	cbnz	r0, 80173cc <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xea>
 8017394:	8ba2      	ldrh	r2, [r4, #28]
 8017396:	2300      	movs	r3, #0
 8017398:	4611      	mov	r1, r2
 801739a:	4620      	mov	r0, r4
 801739c:	f7ff ff91 	bl	80172c2 <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 80173a0:	e06e      	b.n	8017480 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x19e>
 80173a2:	2500      	movs	r5, #0
 80173a4:	2701      	movs	r7, #1
 80173a6:	46a9      	mov	r9, r5
 80173a8:	462e      	mov	r6, r5
 80173aa:	e7ca      	b.n	8017342 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x60>
 80173ac:	42b7      	cmp	r7, r6
 80173ae:	f04f 0500 	mov.w	r5, #0
 80173b2:	bfb4      	ite	lt
 80173b4:	2700      	movlt	r7, #0
 80173b6:	2701      	movge	r7, #1
 80173b8:	462e      	mov	r6, r5
 80173ba:	e7c2      	b.n	8017342 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x60>
 80173bc:	2500      	movs	r5, #0
 80173be:	2601      	movs	r6, #1
 80173c0:	46a9      	mov	r9, r5
 80173c2:	e7ad      	b.n	8017320 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x3e>
 80173c4:	9301      	str	r3, [sp, #4]
 80173c6:	f04f 0a01 	mov.w	sl, #1
 80173ca:	e7db      	b.n	8017384 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xa2>
 80173cc:	8b63      	ldrh	r3, [r4, #26]
 80173ce:	280a      	cmp	r0, #10
 80173d0:	f103 0301 	add.w	r3, r3, #1
 80173d4:	8363      	strh	r3, [r4, #26]
 80173d6:	d0dd      	beq.n	8017394 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xb2>
 80173d8:	9a03      	ldr	r2, [sp, #12]
 80173da:	bb62      	cbnz	r2, 8017436 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x154>
 80173dc:	f64f 63ff 	movw	r3, #65279	@ 0xfeff
 80173e0:	4298      	cmp	r0, r3
 80173e2:	d003      	beq.n	80173ec <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x10a>
 80173e4:	f242 030b 	movw	r3, #8203	@ 0x200b
 80173e8:	4298      	cmp	r0, r3
 80173ea:	d1b2      	bne.n	8017352 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 80173ec:	8823      	ldrh	r3, [r4, #0]
 80173ee:	8ba1      	ldrh	r1, [r4, #28]
 80173f0:	2b20      	cmp	r3, #32
 80173f2:	d003      	beq.n	80173fc <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x11a>
 80173f4:	f242 000b 	movw	r0, #8203	@ 0x200b
 80173f8:	4283      	cmp	r3, r0
 80173fa:	d131      	bne.n	8017460 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x17e>
 80173fc:	f1ba 0f00 	cmp.w	sl, #0
 8017400:	bf0a      	itet	eq
 8017402:	4688      	moveq	r8, r1
 8017404:	4650      	movne	r0, sl
 8017406:	2001      	moveq	r0, #1
 8017408:	440a      	add	r2, r1
 801740a:	8b23      	ldrh	r3, [r4, #24]
 801740c:	f8b4 c010 	ldrh.w	ip, [r4, #16]
 8017410:	b292      	uxth	r2, r2
 8017412:	83a2      	strh	r2, [r4, #28]
 8017414:	4413      	add	r3, r2
 8017416:	f1b9 0f00 	cmp.w	r9, #0
 801741a:	d102      	bne.n	8017422 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x140>
 801741c:	2d00      	cmp	r5, #0
 801741e:	d042      	beq.n	80174a6 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1c4>
 8017420:	b300      	cbz	r0, 8017464 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x182>
 8017422:	8c21      	ldrh	r1, [r4, #32]
 8017424:	4419      	add	r1, r3
 8017426:	458c      	cmp	ip, r1
 8017428:	da37      	bge.n	801749a <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1b8>
 801742a:	8ae1      	ldrh	r1, [r4, #22]
 801742c:	2900      	cmp	r1, #0
 801742e:	d034      	beq.n	801749a <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1b8>
 8017430:	4563      	cmp	r3, ip
 8017432:	dd8e      	ble.n	8017352 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 8017434:	e01d      	b.n	8017472 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x190>
 8017436:	8893      	ldrh	r3, [r2, #4]
 8017438:	9901      	ldr	r1, [sp, #4]
 801743a:	8023      	strh	r3, [r4, #0]
 801743c:	f892 b00d 	ldrb.w	fp, [r2, #13]
 8017440:	ea4f 0b4b 	mov.w	fp, fp, lsl #1
 8017444:	f40b 7080 	and.w	r0, fp, #256	@ 0x100
 8017448:	f892 b00a 	ldrb.w	fp, [r2, #10]
 801744c:	ea4b 0b00 	orr.w	fp, fp, r0
 8017450:	68e0      	ldr	r0, [r4, #12]
 8017452:	6803      	ldr	r3, [r0, #0]
 8017454:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8017456:	4798      	blx	r3
 8017458:	eb0b 0200 	add.w	r2, fp, r0
 801745c:	b292      	uxth	r2, r2
 801745e:	e7c5      	b.n	80173ec <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x10a>
 8017460:	2000      	movs	r0, #0
 8017462:	e7d1      	b.n	8017408 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x126>
 8017464:	4563      	cmp	r3, ip
 8017466:	f77f af74 	ble.w	8017352 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 801746a:	8ae3      	ldrh	r3, [r4, #22]
 801746c:	2b00      	cmp	r3, #0
 801746e:	f43f af70 	beq.w	8017352 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 8017472:	2301      	movs	r3, #1
 8017474:	8c22      	ldrh	r2, [r4, #32]
 8017476:	f884 3022 	strb.w	r3, [r4, #34]	@ 0x22
 801747a:	8be3      	ldrh	r3, [r4, #30]
 801747c:	4413      	add	r3, r2
 801747e:	83e3      	strh	r3, [r4, #30]
 8017480:	68e0      	ldr	r0, [r4, #12]
 8017482:	6803      	ldr	r3, [r0, #0]
 8017484:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8017486:	4798      	blx	r3
 8017488:	f9b4 3014 	ldrsh.w	r3, [r4, #20]
 801748c:	4418      	add	r0, r3
 801748e:	8a63      	ldrh	r3, [r4, #18]
 8017490:	1a18      	subs	r0, r3, r0
 8017492:	8260      	strh	r0, [r4, #18]
 8017494:	b005      	add	sp, #20
 8017496:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801749a:	2300      	movs	r3, #0
 801749c:	4611      	mov	r1, r2
 801749e:	4620      	mov	r0, r4
 80174a0:	f7ff ff0f 	bl	80172c2 <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 80174a4:	e755      	b.n	8017352 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 80174a6:	4563      	cmp	r3, ip
 80174a8:	dd14      	ble.n	80174d4 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1f2>
 80174aa:	b117      	cbz	r7, 80174b2 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1d0>
 80174ac:	2301      	movs	r3, #1
 80174ae:	460a      	mov	r2, r1
 80174b0:	e772      	b.n	8017398 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xb6>
 80174b2:	2e00      	cmp	r6, #0
 80174b4:	f43f af4d 	beq.w	8017352 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 80174b8:	2800      	cmp	r0, #0
 80174ba:	f47f af4a 	bne.w	8017352 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 80174be:	f1ba 0f00 	cmp.w	sl, #0
 80174c2:	d002      	beq.n	80174ca <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1e8>
 80174c4:	2301      	movs	r3, #1
 80174c6:	4642      	mov	r2, r8
 80174c8:	e767      	b.n	801739a <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xb8>
 80174ca:	8ae3      	ldrh	r3, [r4, #22]
 80174cc:	2b00      	cmp	r3, #0
 80174ce:	f43f af40 	beq.w	8017352 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 80174d2:	e7d5      	b.n	8017480 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x19e>
 80174d4:	2800      	cmp	r0, #0
 80174d6:	f47f af3c 	bne.w	8017352 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 80174da:	f1ba 0f00 	cmp.w	sl, #0
 80174de:	f43f af38 	beq.w	8017352 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 80174e2:	2301      	movs	r3, #1
 80174e4:	4642      	mov	r2, r8
 80174e6:	e7da      	b.n	801749e <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1bc>

080174e8 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>:
 80174e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80174ea:	4605      	mov	r5, r0
 80174ec:	b08f      	sub	sp, #60	@ 0x3c
 80174ee:	4617      	mov	r7, r2
 80174f0:	461c      	mov	r4, r3
 80174f2:	460e      	mov	r6, r1
 80174f4:	b1d1      	cbz	r1, 801752c <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x44>
 80174f6:	681b      	ldr	r3, [r3, #0]
 80174f8:	4620      	mov	r0, r4
 80174fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80174fc:	4798      	blx	r3
 80174fe:	4240      	negs	r0, r0
 8017500:	9603      	str	r6, [sp, #12]
 8017502:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8017506:	b200      	sxth	r0, r0
 8017508:	9700      	str	r7, [sp, #0]
 801750a:	f8bd 2050 	ldrh.w	r2, [sp, #80]	@ 0x50
 801750e:	4629      	mov	r1, r5
 8017510:	e9cd 4001 	strd	r4, r0, [sp, #4]
 8017514:	2401      	movs	r4, #1
 8017516:	a805      	add	r0, sp, #20
 8017518:	f7ff fcaa 	bl	8016e70 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE>
 801751c:	a805      	add	r0, sp, #20
 801751e:	f7ff fee0 	bl	80172e2 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>
 8017522:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 8017526:	b163      	cbz	r3, 8017542 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x5a>
 8017528:	3401      	adds	r4, #1
 801752a:	e7f7      	b.n	801751c <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x34>
 801752c:	2401      	movs	r4, #1
 801752e:	f003 faad 	bl	801aa8c <_ZN8touchgfx12TextProvider11getNextCharEv>
 8017532:	280a      	cmp	r0, #10
 8017534:	4628      	mov	r0, r5
 8017536:	bf08      	it	eq
 8017538:	3401      	addeq	r4, #1
 801753a:	f003 faa7 	bl	801aa8c <_ZN8touchgfx12TextProvider11getNextCharEv>
 801753e:	2800      	cmp	r0, #0
 8017540:	d1f7      	bne.n	8017532 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x4a>
 8017542:	b2a0      	uxth	r0, r4
 8017544:	b00f      	add	sp, #60	@ 0x3c
 8017546:	bdf0      	pop	{r4, r5, r6, r7, pc}

08017548 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>:
 8017548:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801754c:	b0e3      	sub	sp, #396	@ 0x18c
 801754e:	461c      	mov	r4, r3
 8017550:	4683      	mov	fp, r0
 8017552:	4688      	mov	r8, r1
 8017554:	9b6c      	ldr	r3, [sp, #432]	@ 0x1b0
 8017556:	2b00      	cmp	r3, #0
 8017558:	f000 8112 	beq.w	8017780 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 801755c:	6823      	ldr	r3, [r4, #0]
 801755e:	2b00      	cmp	r3, #0
 8017560:	f000 810e 	beq.w	8017780 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 8017564:	7ba3      	ldrb	r3, [r4, #14]
 8017566:	2b00      	cmp	r3, #0
 8017568:	f000 810a 	beq.w	8017780 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 801756c:	ad0a      	add	r5, sp, #40	@ 0x28
 801756e:	6810      	ldr	r0, [r2, #0]
 8017570:	6851      	ldr	r1, [r2, #4]
 8017572:	462b      	mov	r3, r5
 8017574:	f9b8 2004 	ldrsh.w	r2, [r8, #4]
 8017578:	c303      	stmia	r3!, {r0, r1}
 801757a:	2100      	movs	r1, #0
 801757c:	f9b8 3006 	ldrsh.w	r3, [r8, #6]
 8017580:	f8ad 2034 	strh.w	r2, [sp, #52]	@ 0x34
 8017584:	4628      	mov	r0, r5
 8017586:	910c      	str	r1, [sp, #48]	@ 0x30
 8017588:	a90c      	add	r1, sp, #48	@ 0x30
 801758a:	79a2      	ldrb	r2, [r4, #6]
 801758c:	f8ad 3036 	strh.w	r3, [sp, #54]	@ 0x36
 8017590:	f7ff fced 	bl	8016f6e <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 8017594:	a90c      	add	r1, sp, #48	@ 0x30
 8017596:	79a2      	ldrb	r2, [r4, #6]
 8017598:	4608      	mov	r0, r1
 801759a:	f7ff fce8 	bl	8016f6e <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 801759e:	a817      	add	r0, sp, #92	@ 0x5c
 80175a0:	f002 fe48 	bl	801a234 <_ZN8touchgfx12TextProviderC1Ev>
 80175a4:	6820      	ldr	r0, [r4, #0]
 80175a6:	6803      	ldr	r3, [r0, #0]
 80175a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80175aa:	4798      	blx	r3
 80175ac:	4606      	mov	r6, r0
 80175ae:	6820      	ldr	r0, [r4, #0]
 80175b0:	6803      	ldr	r3, [r0, #0]
 80175b2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80175b4:	4798      	blx	r3
 80175b6:	4633      	mov	r3, r6
 80175b8:	9a6d      	ldr	r2, [sp, #436]	@ 0x1b4
 80175ba:	996c      	ldr	r1, [sp, #432]	@ 0x1b0
 80175bc:	9000      	str	r0, [sp, #0]
 80175be:	a817      	add	r0, sp, #92	@ 0x5c
 80175c0:	f002 fe93 	bl	801a2ea <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 80175c4:	6820      	ldr	r0, [r4, #0]
 80175c6:	f894 a004 	ldrb.w	sl, [r4, #4]
 80175ca:	6803      	ldr	r3, [r0, #0]
 80175cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80175ce:	4798      	blx	r3
 80175d0:	f9b4 600c 	ldrsh.w	r6, [r4, #12]
 80175d4:	6823      	ldr	r3, [r4, #0]
 80175d6:	4607      	mov	r7, r0
 80175d8:	4406      	add	r6, r0
 80175da:	a830      	add	r0, sp, #192	@ 0xc0
 80175dc:	f893 9009 	ldrb.w	r9, [r3, #9]
 80175e0:	f002 fe28 	bl	801a234 <_ZN8touchgfx12TextProviderC1Ev>
 80175e4:	7c23      	ldrb	r3, [r4, #16]
 80175e6:	b17b      	cbz	r3, 8017608 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xc0>
 80175e8:	6820      	ldr	r0, [r4, #0]
 80175ea:	6803      	ldr	r3, [r0, #0]
 80175ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80175ee:	4798      	blx	r3
 80175f0:	9009      	str	r0, [sp, #36]	@ 0x24
 80175f2:	6820      	ldr	r0, [r4, #0]
 80175f4:	6802      	ldr	r2, [r0, #0]
 80175f6:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80175f8:	4790      	blx	r2
 80175fa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80175fc:	9000      	str	r0, [sp, #0]
 80175fe:	a830      	add	r0, sp, #192	@ 0xc0
 8017600:	9a6d      	ldr	r2, [sp, #436]	@ 0x1b4
 8017602:	996c      	ldr	r1, [sp, #432]	@ 0x1b0
 8017604:	f002 fe71 	bl	801a2ea <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8017608:	f8bd 1034 	ldrh.w	r1, [sp, #52]	@ 0x34
 801760c:	a80e      	add	r0, sp, #56	@ 0x38
 801760e:	7be2      	ldrb	r2, [r4, #15]
 8017610:	f8bd 3036 	ldrh.w	r3, [sp, #54]	@ 0x36
 8017614:	1a8a      	subs	r2, r1, r2
 8017616:	7c21      	ldrb	r1, [r4, #16]
 8017618:	9103      	str	r1, [sp, #12]
 801761a:	b292      	uxth	r2, r2
 801761c:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
 8017620:	9102      	str	r1, [sp, #8]
 8017622:	6821      	ldr	r1, [r4, #0]
 8017624:	9101      	str	r1, [sp, #4]
 8017626:	7961      	ldrb	r1, [r4, #5]
 8017628:	9100      	str	r1, [sp, #0]
 801762a:	a930      	add	r1, sp, #192	@ 0xc0
 801762c:	f7ff fc20 	bl	8016e70 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE>
 8017630:	2e00      	cmp	r6, #0
 8017632:	dc5b      	bgt.n	80176ec <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1a4>
 8017634:	af17      	add	r7, sp, #92	@ 0x5c
 8017636:	f04f 0900 	mov.w	r9, #0
 801763a:	7c23      	ldrb	r3, [r4, #16]
 801763c:	2b00      	cmp	r3, #0
 801763e:	f000 80b1 	beq.w	80177a4 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x25c>
 8017642:	a80e      	add	r0, sp, #56	@ 0x38
 8017644:	f7ff fe4d 	bl	80172e2 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>
 8017648:	f1ba 0f00 	cmp.w	sl, #0
 801764c:	f000 80a5 	beq.w	801779a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x252>
 8017650:	7c23      	ldrb	r3, [r4, #16]
 8017652:	2264      	movs	r2, #100	@ 0x64
 8017654:	4639      	mov	r1, r7
 8017656:	a849      	add	r0, sp, #292	@ 0x124
 8017658:	9309      	str	r3, [sp, #36]	@ 0x24
 801765a:	f010 fe0e 	bl	802827a <memcpy>
 801765e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8017660:	2b00      	cmp	r3, #0
 8017662:	f000 80a7 	beq.w	80177b4 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x26c>
 8017666:	f9bd 3056 	ldrsh.w	r3, [sp, #86]	@ 0x56
 801766a:	7922      	ldrb	r2, [r4, #4]
 801766c:	2a01      	cmp	r2, #1
 801766e:	f040 808a 	bne.w	8017786 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x23e>
 8017672:	f9bd 0034 	ldrsh.w	r0, [sp, #52]	@ 0x34
 8017676:	1ac0      	subs	r0, r0, r3
 8017678:	2302      	movs	r3, #2
 801767a:	fb90 f0f3 	sdiv	r0, r0, r3
 801767e:	b200      	sxth	r0, r0
 8017680:	7c23      	ldrb	r3, [r4, #16]
 8017682:	2b00      	cmp	r3, #0
 8017684:	f000 808b 	beq.w	801779e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x256>
 8017688:	f8bd 204e 	ldrh.w	r2, [sp, #78]	@ 0x4e
 801768c:	f89d 105a 	ldrb.w	r1, [sp, #90]	@ 0x5a
 8017690:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	@ 0x32
 8017694:	e9cd 2105 	strd	r2, r1, [sp, #20]
 8017698:	f8bd 2030 	ldrh.w	r2, [sp, #48]	@ 0x30
 801769c:	2100      	movs	r1, #0
 801769e:	4410      	add	r0, r2
 80176a0:	4642      	mov	r2, r8
 80176a2:	b200      	sxth	r0, r0
 80176a4:	e9cd 9703 	strd	r9, r7, [sp, #12]
 80176a8:	9000      	str	r0, [sp, #0]
 80176aa:	4658      	mov	r0, fp
 80176ac:	e9cd 5401 	strd	r5, r4, [sp, #4]
 80176b0:	f7ff fc8e 	bl	8016fd0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>
 80176b4:	2800      	cmp	r0, #0
 80176b6:	d163      	bne.n	8017780 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 80176b8:	b2b2      	uxth	r2, r6
 80176ba:	f8bd 3032 	ldrh.w	r3, [sp, #50]	@ 0x32
 80176be:	f8bd 1036 	ldrh.w	r1, [sp, #54]	@ 0x36
 80176c2:	4413      	add	r3, r2
 80176c4:	1a8a      	subs	r2, r1, r2
 80176c6:	b21b      	sxth	r3, r3
 80176c8:	f8ad 2036 	strh.w	r2, [sp, #54]	@ 0x36
 80176cc:	f89d 205a 	ldrb.w	r2, [sp, #90]	@ 0x5a
 80176d0:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 80176d4:	2a00      	cmp	r2, #0
 80176d6:	d153      	bne.n	8017780 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 80176d8:	6822      	ldr	r2, [r4, #0]
 80176da:	8869      	ldrh	r1, [r5, #2]
 80176dc:	7a12      	ldrb	r2, [r2, #8]
 80176de:	1a9b      	subs	r3, r3, r2
 80176e0:	88ea      	ldrh	r2, [r5, #6]
 80176e2:	440a      	add	r2, r1
 80176e4:	b212      	sxth	r2, r2
 80176e6:	4293      	cmp	r3, r2
 80176e8:	dda7      	ble.n	801763a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xf2>
 80176ea:	e049      	b.n	8017780 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 80176ec:	7c23      	ldrb	r3, [r4, #16]
 80176ee:	444f      	add	r7, r9
 80176f0:	b1c3      	cbz	r3, 8017724 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1dc>
 80176f2:	f64f 79ff 	movw	r9, #65535	@ 0xffff
 80176f6:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	@ 0x32
 80176fa:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 80176fe:	443b      	add	r3, r7
 8017700:	4293      	cmp	r3, r2
 8017702:	da97      	bge.n	8017634 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xec>
 8017704:	a80e      	add	r0, sp, #56	@ 0x38
 8017706:	f7ff fdec 	bl	80172e2 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>
 801770a:	f8bd 304e 	ldrh.w	r3, [sp, #78]	@ 0x4e
 801770e:	3b01      	subs	r3, #1
 8017710:	b29b      	uxth	r3, r3
 8017712:	454b      	cmp	r3, r9
 8017714:	9309      	str	r3, [sp, #36]	@ 0x24
 8017716:	d021      	beq.n	801775c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x214>
 8017718:	7961      	ldrb	r1, [r4, #5]
 801771a:	a817      	add	r0, sp, #92	@ 0x5c
 801771c:	f7ec fea8 	bl	8004470 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8017720:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8017722:	e7f4      	b.n	801770e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1c6>
 8017724:	fa1f f986 	uxth.w	r9, r6
 8017728:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	@ 0x32
 801772c:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 8017730:	443b      	add	r3, r7
 8017732:	4293      	cmp	r3, r2
 8017734:	f6bf af7e 	bge.w	8017634 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xec>
 8017738:	a817      	add	r0, sp, #92	@ 0x5c
 801773a:	f003 f9a7 	bl	801aa8c <_ZN8touchgfx12TextProvider11getNextCharEv>
 801773e:	b1f8      	cbz	r0, 8017780 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 8017740:	280a      	cmp	r0, #10
 8017742:	d1f1      	bne.n	8017728 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1e0>
 8017744:	f8bd 3032 	ldrh.w	r3, [sp, #50]	@ 0x32
 8017748:	444b      	add	r3, r9
 801774a:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 801774e:	f8bd 3036 	ldrh.w	r3, [sp, #54]	@ 0x36
 8017752:	eba3 0309 	sub.w	r3, r3, r9
 8017756:	f8ad 3036 	strh.w	r3, [sp, #54]	@ 0x36
 801775a:	e7e5      	b.n	8017728 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1e0>
 801775c:	b2b3      	uxth	r3, r6
 801775e:	f8bd 2032 	ldrh.w	r2, [sp, #50]	@ 0x32
 8017762:	441a      	add	r2, r3
 8017764:	f8ad 2032 	strh.w	r2, [sp, #50]	@ 0x32
 8017768:	f8bd 2036 	ldrh.w	r2, [sp, #54]	@ 0x36
 801776c:	1ad3      	subs	r3, r2, r3
 801776e:	f8ad 3036 	strh.w	r3, [sp, #54]	@ 0x36
 8017772:	f8bd 3038 	ldrh.w	r3, [sp, #56]	@ 0x38
 8017776:	b11b      	cbz	r3, 8017780 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 8017778:	f89d 305a 	ldrb.w	r3, [sp, #90]	@ 0x5a
 801777c:	2b00      	cmp	r3, #0
 801777e:	d0ba      	beq.n	80176f6 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1ae>
 8017780:	b063      	add	sp, #396	@ 0x18c
 8017782:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017786:	2a02      	cmp	r2, #2
 8017788:	d105      	bne.n	8017796 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x24e>
 801778a:	7be2      	ldrb	r2, [r4, #15]
 801778c:	f8bd 0034 	ldrh.w	r0, [sp, #52]	@ 0x34
 8017790:	1a80      	subs	r0, r0, r2
 8017792:	1ac0      	subs	r0, r0, r3
 8017794:	e773      	b.n	801767e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x136>
 8017796:	2000      	movs	r0, #0
 8017798:	e772      	b.n	8017680 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x138>
 801779a:	7be0      	ldrb	r0, [r4, #15]
 801779c:	e770      	b.n	8017680 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x138>
 801779e:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 80177a2:	e773      	b.n	801768c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x144>
 80177a4:	f1ba 0f00 	cmp.w	sl, #0
 80177a8:	d0f7      	beq.n	801779a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x252>
 80177aa:	2264      	movs	r2, #100	@ 0x64
 80177ac:	4639      	mov	r1, r7
 80177ae:	a849      	add	r0, sp, #292	@ 0x124
 80177b0:	f010 fd63 	bl	802827a <memcpy>
 80177b4:	2300      	movs	r3, #0
 80177b6:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 80177ba:	6821      	ldr	r1, [r4, #0]
 80177bc:	a849      	add	r0, sp, #292	@ 0x124
 80177be:	f7ff fb9a 	bl	8016ef6 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>
 80177c2:	b203      	sxth	r3, r0
 80177c4:	e751      	b.n	801766a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x122>

080177c6 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>:
 80177c6:	2b03      	cmp	r3, #3
 80177c8:	d818      	bhi.n	80177fc <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x36>
 80177ca:	e8df f003 	tbb	[pc, r3]
 80177ce:	0602      	.short	0x0602
 80177d0:	130d      	.short	0x130d
 80177d2:	f9b0 2000 	ldrsh.w	r2, [r0]
 80177d6:	1850      	adds	r0, r2, r1
 80177d8:	4770      	bx	lr
 80177da:	8803      	ldrh	r3, [r0, #0]
 80177dc:	8880      	ldrh	r0, [r0, #4]
 80177de:	4418      	add	r0, r3
 80177e0:	b200      	sxth	r0, r0
 80177e2:	1a80      	subs	r0, r0, r2
 80177e4:	3801      	subs	r0, #1
 80177e6:	4770      	bx	lr
 80177e8:	8803      	ldrh	r3, [r0, #0]
 80177ea:	8880      	ldrh	r0, [r0, #4]
 80177ec:	4418      	add	r0, r3
 80177ee:	b200      	sxth	r0, r0
 80177f0:	1a40      	subs	r0, r0, r1
 80177f2:	e7f7      	b.n	80177e4 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x1e>
 80177f4:	f9b0 0000 	ldrsh.w	r0, [r0]
 80177f8:	4410      	add	r0, r2
 80177fa:	4770      	bx	lr
 80177fc:	2000      	movs	r0, #0
 80177fe:	4770      	bx	lr

08017800 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>:
 8017800:	2b03      	cmp	r3, #3
 8017802:	d817      	bhi.n	8017834 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x34>
 8017804:	e8df f003 	tbb	[pc, r3]
 8017808:	10090602 	.word	0x10090602
 801780c:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
 8017810:	1850      	adds	r0, r2, r1
 8017812:	4770      	bx	lr
 8017814:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 8017818:	e7fa      	b.n	8017810 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x10>
 801781a:	8843      	ldrh	r3, [r0, #2]
 801781c:	88c0      	ldrh	r0, [r0, #6]
 801781e:	4418      	add	r0, r3
 8017820:	b200      	sxth	r0, r0
 8017822:	1a80      	subs	r0, r0, r2
 8017824:	3801      	subs	r0, #1
 8017826:	4770      	bx	lr
 8017828:	8843      	ldrh	r3, [r0, #2]
 801782a:	88c0      	ldrh	r0, [r0, #6]
 801782c:	4418      	add	r0, r3
 801782e:	b200      	sxth	r0, r0
 8017830:	1a40      	subs	r0, r0, r1
 8017832:	e7f7      	b.n	8017824 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x24>
 8017834:	2000      	movs	r0, #0
 8017836:	4770      	bx	lr

08017838 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE>:
 8017838:	4b01      	ldr	r3, [pc, #4]	@ (8017840 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE+0x8>)
 801783a:	2200      	movs	r2, #0
 801783c:	601a      	str	r2, [r3, #0]
 801783e:	4770      	bx	lr
 8017840:	24028e30 	.word	0x24028e30

08017844 <_ZN8touchgfx16TouchCalibration4clzuEm>:
 8017844:	4603      	mov	r3, r0
 8017846:	b1c8      	cbz	r0, 801787c <_ZN8touchgfx16TouchCalibration4clzuEm+0x38>
 8017848:	0c02      	lsrs	r2, r0, #16
 801784a:	0412      	lsls	r2, r2, #16
 801784c:	b9a2      	cbnz	r2, 8017878 <_ZN8touchgfx16TouchCalibration4clzuEm+0x34>
 801784e:	0403      	lsls	r3, r0, #16
 8017850:	2010      	movs	r0, #16
 8017852:	f013 4f7f 	tst.w	r3, #4278190080	@ 0xff000000
 8017856:	bf04      	itt	eq
 8017858:	021b      	lsleq	r3, r3, #8
 801785a:	3008      	addeq	r0, #8
 801785c:	f013 4f70 	tst.w	r3, #4026531840	@ 0xf0000000
 8017860:	bf04      	itt	eq
 8017862:	011b      	lsleq	r3, r3, #4
 8017864:	3004      	addeq	r0, #4
 8017866:	f013 4f40 	tst.w	r3, #3221225472	@ 0xc0000000
 801786a:	bf04      	itt	eq
 801786c:	009b      	lsleq	r3, r3, #2
 801786e:	3002      	addeq	r0, #2
 8017870:	2b00      	cmp	r3, #0
 8017872:	db04      	blt.n	801787e <_ZN8touchgfx16TouchCalibration4clzuEm+0x3a>
 8017874:	3001      	adds	r0, #1
 8017876:	4770      	bx	lr
 8017878:	2000      	movs	r0, #0
 801787a:	e7ea      	b.n	8017852 <_ZN8touchgfx16TouchCalibration4clzuEm+0xe>
 801787c:	2020      	movs	r0, #32
 801787e:	4770      	bx	lr

08017880 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>:
 8017880:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017884:	b087      	sub	sp, #28
 8017886:	460d      	mov	r5, r1
 8017888:	4616      	mov	r6, r2
 801788a:	4698      	mov	r8, r3
 801788c:	4601      	mov	r1, r0
 801788e:	e9dd 4710 	ldrd	r4, r7, [sp, #64]	@ 0x40
 8017892:	b120      	cbz	r0, 801789e <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x1e>
 8017894:	b11a      	cbz	r2, 801789e <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x1e>
 8017896:	2d1f      	cmp	r5, #31
 8017898:	d801      	bhi.n	801789e <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x1e>
 801789a:	2b1f      	cmp	r3, #31
 801789c:	d904      	bls.n	80178a8 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x28>
 801789e:	2000      	movs	r0, #0
 80178a0:	6038      	str	r0, [r7, #0]
 80178a2:	b007      	add	sp, #28
 80178a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80178a8:	b97d      	cbnz	r5, 80178ca <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x4a>
 80178aa:	b143      	cbz	r3, 80178be <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x3e>
 80178ac:	4602      	mov	r2, r0
 80178ae:	462b      	mov	r3, r5
 80178b0:	4641      	mov	r1, r8
 80178b2:	4630      	mov	r0, r6
 80178b4:	e9cd 4700 	strd	r4, r7, [sp]
 80178b8:	f7ff ffe2 	bl	8017880 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 80178bc:	e7f1      	b.n	80178a2 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x22>
 80178be:	f04f 33ff 	mov.w	r3, #4294967295
 80178c2:	f06f 4000 	mvn.w	r0, #2147483648	@ 0x80000000
 80178c6:	603b      	str	r3, [r7, #0]
 80178c8:	e7eb      	b.n	80178a2 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x22>
 80178ca:	fa32 fa05 	lsrs.w	sl, r2, r5
 80178ce:	d106      	bne.n	80178de <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x5e>
 80178d0:	4346      	muls	r6, r0
 80178d2:	fbb6 f0f4 	udiv	r0, r6, r4
 80178d6:	fb04 6610 	mls	r6, r4, r0, r6
 80178da:	603e      	str	r6, [r7, #0]
 80178dc:	e7e1      	b.n	80178a2 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x22>
 80178de:	2201      	movs	r2, #1
 80178e0:	fa00 fb05 	lsl.w	fp, r0, r5
 80178e4:	40aa      	lsls	r2, r5
 80178e6:	fbbb f9f4 	udiv	r9, fp, r4
 80178ea:	3a01      	subs	r2, #1
 80178ec:	fb0a f309 	mul.w	r3, sl, r9
 80178f0:	fb04 b919 	mls	r9, r4, r9, fp
 80178f4:	4016      	ands	r6, r2
 80178f6:	9303      	str	r3, [sp, #12]
 80178f8:	4630      	mov	r0, r6
 80178fa:	f7ff ffa3 	bl	8017844 <_ZN8touchgfx16TouchCalibration4clzuEm>
 80178fe:	462b      	mov	r3, r5
 8017900:	460a      	mov	r2, r1
 8017902:	4601      	mov	r1, r0
 8017904:	4630      	mov	r0, r6
 8017906:	e9cd 4700 	strd	r4, r7, [sp]
 801790a:	f7ff ffb9 	bl	8017880 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 801790e:	4606      	mov	r6, r0
 8017910:	4648      	mov	r0, r9
 8017912:	eb05 0108 	add.w	r1, r5, r8
 8017916:	f7ff ff95 	bl	8017844 <_ZN8touchgfx16TouchCalibration4clzuEm>
 801791a:	ab05      	add	r3, sp, #20
 801791c:	464a      	mov	r2, r9
 801791e:	e9cd 4300 	strd	r4, r3, [sp]
 8017922:	4603      	mov	r3, r0
 8017924:	4650      	mov	r0, sl
 8017926:	f7ff ffab 	bl	8017880 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 801792a:	6839      	ldr	r1, [r7, #0]
 801792c:	9a05      	ldr	r2, [sp, #20]
 801792e:	9b03      	ldr	r3, [sp, #12]
 8017930:	4411      	add	r1, r2
 8017932:	fbb1 f2f4 	udiv	r2, r1, r4
 8017936:	18d3      	adds	r3, r2, r3
 8017938:	fb04 1412 	mls	r4, r4, r2, r1
 801793c:	441e      	add	r6, r3
 801793e:	603c      	str	r4, [r7, #0]
 8017940:	4430      	add	r0, r6
 8017942:	e7ae      	b.n	80178a2 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x22>

08017944 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>:
 8017944:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017948:	b085      	sub	sp, #20
 801794a:	f1b0 0900 	subs.w	r9, r0, #0
 801794e:	461d      	mov	r5, r3
 8017950:	4617      	mov	r7, r2
 8017952:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8017954:	bfbb      	ittet	lt
 8017956:	f1c9 0900 	rsblt	r9, r9, #0
 801795a:	f04f 36ff 	movlt.w	r6, #4294967295
 801795e:	2601      	movge	r6, #1
 8017960:	6823      	ldrlt	r3, [r4, #0]
 8017962:	bfbc      	itt	lt
 8017964:	425b      	neglt	r3, r3
 8017966:	6023      	strlt	r3, [r4, #0]
 8017968:	2a00      	cmp	r2, #0
 801796a:	da04      	bge.n	8017976 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x32>
 801796c:	6823      	ldr	r3, [r4, #0]
 801796e:	4257      	negs	r7, r2
 8017970:	4276      	negs	r6, r6
 8017972:	425b      	negs	r3, r3
 8017974:	6023      	str	r3, [r4, #0]
 8017976:	2d00      	cmp	r5, #0
 8017978:	4638      	mov	r0, r7
 801797a:	bfba      	itte	lt
 801797c:	426d      	neglt	r5, r5
 801797e:	f04f 38ff 	movlt.w	r8, #4294967295
 8017982:	f04f 0801 	movge.w	r8, #1
 8017986:	f7ff ff5d 	bl	8017844 <_ZN8touchgfx16TouchCalibration4clzuEm>
 801798a:	ab03      	add	r3, sp, #12
 801798c:	463a      	mov	r2, r7
 801798e:	e9cd 5300 	strd	r5, r3, [sp]
 8017992:	4603      	mov	r3, r0
 8017994:	4648      	mov	r0, r9
 8017996:	f7ff ff73 	bl	8017880 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 801799a:	6823      	ldr	r3, [r4, #0]
 801799c:	9a03      	ldr	r2, [sp, #12]
 801799e:	4546      	cmp	r6, r8
 80179a0:	441a      	add	r2, r3
 80179a2:	fb92 f3f5 	sdiv	r3, r2, r5
 80179a6:	4418      	add	r0, r3
 80179a8:	fb05 2313 	mls	r3, r5, r3, r2
 80179ac:	bf18      	it	ne
 80179ae:	4240      	negne	r0, r0
 80179b0:	1c72      	adds	r2, r6, #1
 80179b2:	6023      	str	r3, [r4, #0]
 80179b4:	d105      	bne.n	80179c2 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7e>
 80179b6:	2b00      	cmp	r3, #0
 80179b8:	f1c3 0200 	rsb	r2, r3, #0
 80179bc:	db0b      	blt.n	80179d6 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x92>
 80179be:	6022      	str	r2, [r4, #0]
 80179c0:	e006      	b.n	80179d0 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 80179c2:	2e01      	cmp	r6, #1
 80179c4:	d104      	bne.n	80179d0 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 80179c6:	2b00      	cmp	r3, #0
 80179c8:	da02      	bge.n	80179d0 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 80179ca:	442b      	add	r3, r5
 80179cc:	3801      	subs	r0, #1
 80179ce:	6023      	str	r3, [r4, #0]
 80179d0:	b005      	add	sp, #20
 80179d2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80179d6:	3801      	subs	r0, #1
 80179d8:	1b52      	subs	r2, r2, r5
 80179da:	e7f0      	b.n	80179be <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7a>

080179dc <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>:
 80179dc:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 80179e0:	4c1c      	ldr	r4, [pc, #112]	@ (8017a54 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x78>)
 80179e2:	4605      	mov	r5, r0
 80179e4:	6807      	ldr	r7, [r0, #0]
 80179e6:	69a3      	ldr	r3, [r4, #24]
 80179e8:	b92b      	cbnz	r3, 80179f6 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x1a>
 80179ea:	6840      	ldr	r0, [r0, #4]
 80179ec:	e9c5 7000 	strd	r7, r0, [r5]
 80179f0:	b004      	add	sp, #16
 80179f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80179f6:	f04f 0802 	mov.w	r8, #2
 80179fa:	68a2      	ldr	r2, [r4, #8]
 80179fc:	ae04      	add	r6, sp, #16
 80179fe:	6820      	ldr	r0, [r4, #0]
 8017a00:	fb93 f1f8 	sdiv	r1, r3, r8
 8017a04:	440a      	add	r2, r1
 8017a06:	69e1      	ldr	r1, [r4, #28]
 8017a08:	f846 2d04 	str.w	r2, [r6, #-4]!
 8017a0c:	463a      	mov	r2, r7
 8017a0e:	9600      	str	r6, [sp, #0]
 8017a10:	f7ff ff98 	bl	8017944 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 8017a14:	69a3      	ldr	r3, [r4, #24]
 8017a16:	4607      	mov	r7, r0
 8017a18:	686a      	ldr	r2, [r5, #4]
 8017a1a:	6a21      	ldr	r1, [r4, #32]
 8017a1c:	9600      	str	r6, [sp, #0]
 8017a1e:	6860      	ldr	r0, [r4, #4]
 8017a20:	f7ff ff90 	bl	8017944 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 8017a24:	69a3      	ldr	r3, [r4, #24]
 8017a26:	6962      	ldr	r2, [r4, #20]
 8017a28:	4407      	add	r7, r0
 8017a2a:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8017a2c:	9600      	str	r6, [sp, #0]
 8017a2e:	68e0      	ldr	r0, [r4, #12]
 8017a30:	fb93 f8f8 	sdiv	r8, r3, r8
 8017a34:	4442      	add	r2, r8
 8017a36:	9203      	str	r2, [sp, #12]
 8017a38:	682a      	ldr	r2, [r5, #0]
 8017a3a:	f7ff ff83 	bl	8017944 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 8017a3e:	4680      	mov	r8, r0
 8017a40:	9600      	str	r6, [sp, #0]
 8017a42:	69a3      	ldr	r3, [r4, #24]
 8017a44:	686a      	ldr	r2, [r5, #4]
 8017a46:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8017a48:	6920      	ldr	r0, [r4, #16]
 8017a4a:	f7ff ff7b 	bl	8017944 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 8017a4e:	4440      	add	r0, r8
 8017a50:	e7cc      	b.n	80179ec <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x10>
 8017a52:	bf00      	nop
 8017a54:	24028e34 	.word	0x24028e34

08017a58 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>:
 8017a58:	4b07      	ldr	r3, [pc, #28]	@ (8017a78 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x20>)
 8017a5a:	781b      	ldrb	r3, [r3, #0]
 8017a5c:	2b01      	cmp	r3, #1
 8017a5e:	d109      	bne.n	8017a74 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x1c>
 8017a60:	f9b1 3000 	ldrsh.w	r3, [r1]
 8017a64:	f9b0 2000 	ldrsh.w	r2, [r0]
 8017a68:	8003      	strh	r3, [r0, #0]
 8017a6a:	4b04      	ldr	r3, [pc, #16]	@ (8017a7c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x24>)
 8017a6c:	881b      	ldrh	r3, [r3, #0]
 8017a6e:	3b01      	subs	r3, #1
 8017a70:	1a9b      	subs	r3, r3, r2
 8017a72:	800b      	strh	r3, [r1, #0]
 8017a74:	4770      	bx	lr
 8017a76:	bf00      	nop
 8017a78:	24028e18 	.word	0x24028e18
 8017a7c:	24028e14 	.word	0x24028e14

08017a80 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>:
 8017a80:	4b07      	ldr	r3, [pc, #28]	@ (8017aa0 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x20>)
 8017a82:	b510      	push	{r4, lr}
 8017a84:	781b      	ldrb	r3, [r3, #0]
 8017a86:	2b01      	cmp	r3, #1
 8017a88:	d108      	bne.n	8017a9c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x1c>
 8017a8a:	4b06      	ldr	r3, [pc, #24]	@ (8017aa4 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x24>)
 8017a8c:	880c      	ldrh	r4, [r1, #0]
 8017a8e:	881b      	ldrh	r3, [r3, #0]
 8017a90:	f9b0 2000 	ldrsh.w	r2, [r0]
 8017a94:	3b01      	subs	r3, #1
 8017a96:	1b1b      	subs	r3, r3, r4
 8017a98:	8003      	strh	r3, [r0, #0]
 8017a9a:	800a      	strh	r2, [r1, #0]
 8017a9c:	bd10      	pop	{r4, pc}
 8017a9e:	bf00      	nop
 8017aa0:	24028e18 	.word	0x24028e18
 8017aa4:	24028e14 	.word	0x24028e14

08017aa8 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>:
 8017aa8:	4b0a      	ldr	r3, [pc, #40]	@ (8017ad4 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x2c>)
 8017aaa:	b510      	push	{r4, lr}
 8017aac:	781b      	ldrb	r3, [r3, #0]
 8017aae:	2b01      	cmp	r3, #1
 8017ab0:	d10e      	bne.n	8017ad0 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x28>
 8017ab2:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 8017ab6:	8843      	ldrh	r3, [r0, #2]
 8017ab8:	f9b0 4000 	ldrsh.w	r4, [r0]
 8017abc:	18ca      	adds	r2, r1, r3
 8017abe:	4b06      	ldr	r3, [pc, #24]	@ (8017ad8 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x30>)
 8017ac0:	8044      	strh	r4, [r0, #2]
 8017ac2:	881b      	ldrh	r3, [r3, #0]
 8017ac4:	1a9b      	subs	r3, r3, r2
 8017ac6:	8003      	strh	r3, [r0, #0]
 8017ac8:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8017acc:	8081      	strh	r1, [r0, #4]
 8017ace:	80c3      	strh	r3, [r0, #6]
 8017ad0:	bd10      	pop	{r4, pc}
 8017ad2:	bf00      	nop
 8017ad4:	24028e18 	.word	0x24028e18
 8017ad8:	24028e14 	.word	0x24028e14

08017adc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>:
 8017adc:	4b08      	ldr	r3, [pc, #32]	@ (8017b00 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x24>)
 8017ade:	781b      	ldrb	r3, [r3, #0]
 8017ae0:	2b01      	cmp	r3, #1
 8017ae2:	d10c      	bne.n	8017afe <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x22>
 8017ae4:	8803      	ldrh	r3, [r0, #0]
 8017ae6:	f9b0 1004 	ldrsh.w	r1, [r0, #4]
 8017aea:	8842      	ldrh	r2, [r0, #2]
 8017aec:	8002      	strh	r2, [r0, #0]
 8017aee:	185a      	adds	r2, r3, r1
 8017af0:	4b04      	ldr	r3, [pc, #16]	@ (8017b04 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x28>)
 8017af2:	881b      	ldrh	r3, [r3, #0]
 8017af4:	1a9b      	subs	r3, r3, r2
 8017af6:	8043      	strh	r3, [r0, #2]
 8017af8:	88c3      	ldrh	r3, [r0, #6]
 8017afa:	80c1      	strh	r1, [r0, #6]
 8017afc:	8083      	strh	r3, [r0, #4]
 8017afe:	4770      	bx	lr
 8017b00:	24028e18 	.word	0x24028e18
 8017b04:	24028e14 	.word	0x24028e14

08017b08 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>:
 8017b08:	4b07      	ldr	r3, [pc, #28]	@ (8017b28 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x20>)
 8017b0a:	b510      	push	{r4, lr}
 8017b0c:	781b      	ldrb	r3, [r3, #0]
 8017b0e:	2b01      	cmp	r3, #1
 8017b10:	d108      	bne.n	8017b24 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x1c>
 8017b12:	f9b1 3000 	ldrsh.w	r3, [r1]
 8017b16:	f9b0 4000 	ldrsh.w	r4, [r0]
 8017b1a:	8003      	strh	r3, [r0, #0]
 8017b1c:	8893      	ldrh	r3, [r2, #4]
 8017b1e:	3b01      	subs	r3, #1
 8017b20:	1b1b      	subs	r3, r3, r4
 8017b22:	800b      	strh	r3, [r1, #0]
 8017b24:	bd10      	pop	{r4, pc}
 8017b26:	bf00      	nop
 8017b28:	24028e18 	.word	0x24028e18

08017b2c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE>:
 8017b2c:	4b0b      	ldr	r3, [pc, #44]	@ (8017b5c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE+0x30>)
 8017b2e:	781b      	ldrb	r3, [r3, #0]
 8017b30:	2b01      	cmp	r3, #1
 8017b32:	d111      	bne.n	8017b58 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE+0x2c>
 8017b34:	680b      	ldr	r3, [r1, #0]
 8017b36:	ed90 7a00 	vldr	s14, [r0]
 8017b3a:	6003      	str	r3, [r0, #0]
 8017b3c:	f9b2 3004 	ldrsh.w	r3, [r2, #4]
 8017b40:	eddf 6a07 	vldr	s13, [pc, #28]	@ 8017b60 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE+0x34>
 8017b44:	ee07 3a90 	vmov	s15, r3
 8017b48:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8017b4c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8017b50:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8017b54:	edc1 7a00 	vstr	s15, [r1]
 8017b58:	4770      	bx	lr
 8017b5a:	bf00      	nop
 8017b5c:	24028e18 	.word	0x24028e18
 8017b60:	38d1b717 	.word	0x38d1b717

08017b64 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>:
 8017b64:	4b0a      	ldr	r3, [pc, #40]	@ (8017b90 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x2c>)
 8017b66:	460a      	mov	r2, r1
 8017b68:	b510      	push	{r4, lr}
 8017b6a:	781b      	ldrb	r3, [r3, #0]
 8017b6c:	2b01      	cmp	r3, #1
 8017b6e:	d10d      	bne.n	8017b8c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x28>
 8017b70:	8881      	ldrh	r1, [r0, #4]
 8017b72:	8803      	ldrh	r3, [r0, #0]
 8017b74:	440b      	add	r3, r1
 8017b76:	4601      	mov	r1, r0
 8017b78:	3b01      	subs	r3, #1
 8017b7a:	f821 3b02 	strh.w	r3, [r1], #2
 8017b7e:	f7ff ffc3 	bl	8017b08 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>
 8017b82:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8017b86:	88c2      	ldrh	r2, [r0, #6]
 8017b88:	80c3      	strh	r3, [r0, #6]
 8017b8a:	8082      	strh	r2, [r0, #4]
 8017b8c:	bd10      	pop	{r4, pc}
 8017b8e:	bf00      	nop
 8017b90:	24028e18 	.word	0x24028e18

08017b94 <_ZN8touchgfx11Application13requestRedrawEv>:
 8017b94:	4b06      	ldr	r3, [pc, #24]	@ (8017bb0 <_ZN8touchgfx11Application13requestRedrawEv+0x1c>)
 8017b96:	2100      	movs	r1, #0
 8017b98:	f9b3 2000 	ldrsh.w	r2, [r3]
 8017b9c:	4b05      	ldr	r3, [pc, #20]	@ (8017bb4 <_ZN8touchgfx11Application13requestRedrawEv+0x20>)
 8017b9e:	f8c0 1130 	str.w	r1, [r0, #304]	@ 0x130
 8017ba2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8017ba6:	f8a0 2134 	strh.w	r2, [r0, #308]	@ 0x134
 8017baa:	f8a0 3136 	strh.w	r3, [r0, #310]	@ 0x136
 8017bae:	4770      	bx	lr
 8017bb0:	24028e14 	.word	0x24028e14
 8017bb4:	24028e16 	.word	0x24028e16

08017bb8 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE>:
 8017bb8:	4b03      	ldr	r3, [pc, #12]	@ (8017bc8 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0x10>)
 8017bba:	6818      	ldr	r0, [r3, #0]
 8017bbc:	b110      	cbz	r0, 8017bc4 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0xc>
 8017bbe:	6803      	ldr	r3, [r0, #0]
 8017bc0:	699b      	ldr	r3, [r3, #24]
 8017bc2:	4718      	bx	r3
 8017bc4:	4770      	bx	lr
 8017bc6:	bf00      	nop
 8017bc8:	24028e64 	.word	0x24028e64

08017bcc <_ZN8touchgfx11Application29handlePendingScreenTransitionEv>:
 8017bcc:	4770      	bx	lr
	...

08017bd0 <_ZN8touchgfx11Application4drawEv>:
 8017bd0:	4b09      	ldr	r3, [pc, #36]	@ (8017bf8 <_ZN8touchgfx11Application4drawEv+0x28>)
 8017bd2:	b507      	push	{r0, r1, r2, lr}
 8017bd4:	f9b3 2000 	ldrsh.w	r2, [r3]
 8017bd8:	2100      	movs	r1, #0
 8017bda:	4b08      	ldr	r3, [pc, #32]	@ (8017bfc <_ZN8touchgfx11Application4drawEv+0x2c>)
 8017bdc:	9100      	str	r1, [sp, #0]
 8017bde:	4669      	mov	r1, sp
 8017be0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8017be4:	f8ad 2004 	strh.w	r2, [sp, #4]
 8017be8:	f8ad 3006 	strh.w	r3, [sp, #6]
 8017bec:	6803      	ldr	r3, [r0, #0]
 8017bee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8017bf0:	4798      	blx	r3
 8017bf2:	b003      	add	sp, #12
 8017bf4:	f85d fb04 	ldr.w	pc, [sp], #4
 8017bf8:	24028e14 	.word	0x24028e14
 8017bfc:	24028e16 	.word	0x24028e16

08017c00 <_ZN8touchgfx11Application10invalidateEv>:
 8017c00:	4b09      	ldr	r3, [pc, #36]	@ (8017c28 <_ZN8touchgfx11Application10invalidateEv+0x28>)
 8017c02:	b082      	sub	sp, #8
 8017c04:	2100      	movs	r1, #0
 8017c06:	f9b3 2000 	ldrsh.w	r2, [r3]
 8017c0a:	4b08      	ldr	r3, [pc, #32]	@ (8017c2c <_ZN8touchgfx11Application10invalidateEv+0x2c>)
 8017c0c:	f8ad 2004 	strh.w	r2, [sp, #4]
 8017c10:	aa02      	add	r2, sp, #8
 8017c12:	f9b3 3000 	ldrsh.w	r3, [r3]
 8017c16:	9100      	str	r1, [sp, #0]
 8017c18:	f8ad 3006 	strh.w	r3, [sp, #6]
 8017c1c:	6803      	ldr	r3, [r0, #0]
 8017c1e:	e912 0006 	ldmdb	r2, {r1, r2}
 8017c22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8017c24:	b002      	add	sp, #8
 8017c26:	4718      	bx	r3
 8017c28:	24028e14 	.word	0x24028e14
 8017c2c:	24028e16 	.word	0x24028e16

08017c30 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE>:
 8017c30:	4b03      	ldr	r3, [pc, #12]	@ (8017c40 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0x10>)
 8017c32:	6818      	ldr	r0, [r3, #0]
 8017c34:	b110      	cbz	r0, 8017c3c <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0xc>
 8017c36:	6803      	ldr	r3, [r0, #0]
 8017c38:	69db      	ldr	r3, [r3, #28]
 8017c3a:	4718      	bx	r3
 8017c3c:	4770      	bx	lr
 8017c3e:	bf00      	nop
 8017c40:	24028e64 	.word	0x24028e64

08017c44 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE>:
 8017c44:	4b03      	ldr	r3, [pc, #12]	@ (8017c54 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0x10>)
 8017c46:	6818      	ldr	r0, [r3, #0]
 8017c48:	b110      	cbz	r0, 8017c50 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0xc>
 8017c4a:	6803      	ldr	r3, [r0, #0]
 8017c4c:	6a1b      	ldr	r3, [r3, #32]
 8017c4e:	4718      	bx	r3
 8017c50:	4770      	bx	lr
 8017c52:	bf00      	nop
 8017c54:	24028e64 	.word	0x24028e64

08017c58 <_ZN8touchgfx11Application16clearCachedAreasEv>:
 8017c58:	2300      	movs	r3, #0
 8017c5a:	f8a0 30ec 	strh.w	r3, [r0, #236]	@ 0xec
 8017c5e:	4770      	bx	lr

08017c60 <_ZN8touchgfx11Application14handleKeyEventEh>:
 8017c60:	4b03      	ldr	r3, [pc, #12]	@ (8017c70 <_ZN8touchgfx11Application14handleKeyEventEh+0x10>)
 8017c62:	6818      	ldr	r0, [r3, #0]
 8017c64:	b110      	cbz	r0, 8017c6c <_ZN8touchgfx11Application14handleKeyEventEh+0xc>
 8017c66:	6803      	ldr	r3, [r0, #0]
 8017c68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8017c6a:	4718      	bx	r3
 8017c6c:	4770      	bx	lr
 8017c6e:	bf00      	nop
 8017c70:	24028e64 	.word	0x24028e64

08017c74 <_ZN8touchgfx11ApplicationD1Ev>:
 8017c74:	4770      	bx	lr

08017c76 <_ZN8touchgfx11ApplicationD0Ev>:
 8017c76:	b510      	push	{r4, lr}
 8017c78:	4604      	mov	r4, r0
 8017c7a:	f44f 719e 	mov.w	r1, #316	@ 0x13c
 8017c7e:	f00f fc06 	bl	802748e <_ZdlPvj>
 8017c82:	4620      	mov	r0, r4
 8017c84:	bd10      	pop	{r4, pc}

08017c86 <_ZNK8touchgfx4Rect9intersectERKS0_>:
 8017c86:	b510      	push	{r4, lr}
 8017c88:	f9b1 4000 	ldrsh.w	r4, [r1]
 8017c8c:	888a      	ldrh	r2, [r1, #4]
 8017c8e:	f9b0 3000 	ldrsh.w	r3, [r0]
 8017c92:	4422      	add	r2, r4
 8017c94:	b212      	sxth	r2, r2
 8017c96:	4293      	cmp	r3, r2
 8017c98:	da15      	bge.n	8017cc6 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 8017c9a:	8882      	ldrh	r2, [r0, #4]
 8017c9c:	4413      	add	r3, r2
 8017c9e:	b21b      	sxth	r3, r3
 8017ca0:	429c      	cmp	r4, r3
 8017ca2:	da10      	bge.n	8017cc6 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 8017ca4:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 8017ca8:	88c9      	ldrh	r1, [r1, #6]
 8017caa:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 8017cae:	4419      	add	r1, r3
 8017cb0:	b209      	sxth	r1, r1
 8017cb2:	428a      	cmp	r2, r1
 8017cb4:	da07      	bge.n	8017cc6 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 8017cb6:	88c0      	ldrh	r0, [r0, #6]
 8017cb8:	4410      	add	r0, r2
 8017cba:	b200      	sxth	r0, r0
 8017cbc:	4283      	cmp	r3, r0
 8017cbe:	bfac      	ite	ge
 8017cc0:	2000      	movge	r0, #0
 8017cc2:	2001      	movlt	r0, #1
 8017cc4:	bd10      	pop	{r4, pc}
 8017cc6:	2000      	movs	r0, #0
 8017cc8:	e7fc      	b.n	8017cc4 <_ZNK8touchgfx4Rect9intersectERKS0_+0x3e>

08017cca <_ZN8touchgfx4Rect10restrictToEss>:
 8017cca:	f9b0 3000 	ldrsh.w	r3, [r0]
 8017cce:	2b00      	cmp	r3, #0
 8017cd0:	b510      	push	{r4, lr}
 8017cd2:	da04      	bge.n	8017cde <_ZN8touchgfx4Rect10restrictToEss+0x14>
 8017cd4:	8884      	ldrh	r4, [r0, #4]
 8017cd6:	4423      	add	r3, r4
 8017cd8:	8083      	strh	r3, [r0, #4]
 8017cda:	2300      	movs	r3, #0
 8017cdc:	8003      	strh	r3, [r0, #0]
 8017cde:	f9b0 4000 	ldrsh.w	r4, [r0]
 8017ce2:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8017ce6:	1b09      	subs	r1, r1, r4
 8017ce8:	428b      	cmp	r3, r1
 8017cea:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 8017cee:	bfc8      	it	gt
 8017cf0:	8081      	strhgt	r1, [r0, #4]
 8017cf2:	2b00      	cmp	r3, #0
 8017cf4:	da04      	bge.n	8017d00 <_ZN8touchgfx4Rect10restrictToEss+0x36>
 8017cf6:	88c1      	ldrh	r1, [r0, #6]
 8017cf8:	440b      	add	r3, r1
 8017cfa:	80c3      	strh	r3, [r0, #6]
 8017cfc:	2300      	movs	r3, #0
 8017cfe:	8043      	strh	r3, [r0, #2]
 8017d00:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
 8017d04:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 8017d08:	1a52      	subs	r2, r2, r1
 8017d0a:	4293      	cmp	r3, r2
 8017d0c:	bfc8      	it	gt
 8017d0e:	80c2      	strhgt	r2, [r0, #6]
 8017d10:	bd10      	pop	{r4, pc}
	...

08017d14 <_ZN8touchgfx11Application4drawERNS_4RectE>:
 8017d14:	4b10      	ldr	r3, [pc, #64]	@ (8017d58 <_ZN8touchgfx11Application4drawERNS_4RectE+0x44>)
 8017d16:	b510      	push	{r4, lr}
 8017d18:	460c      	mov	r4, r1
 8017d1a:	f9b3 2000 	ldrsh.w	r2, [r3]
 8017d1e:	4b0f      	ldr	r3, [pc, #60]	@ (8017d5c <_ZN8touchgfx11Application4drawERNS_4RectE+0x48>)
 8017d20:	4620      	mov	r0, r4
 8017d22:	f9b3 1000 	ldrsh.w	r1, [r3]
 8017d26:	f7ff ffd0 	bl	8017cca <_ZN8touchgfx4Rect10restrictToEss>
 8017d2a:	4b0d      	ldr	r3, [pc, #52]	@ (8017d60 <_ZN8touchgfx11Application4drawERNS_4RectE+0x4c>)
 8017d2c:	6818      	ldr	r0, [r3, #0]
 8017d2e:	b190      	cbz	r0, 8017d56 <_ZN8touchgfx11Application4drawERNS_4RectE+0x42>
 8017d30:	6803      	ldr	r3, [r0, #0]
 8017d32:	4621      	mov	r1, r4
 8017d34:	689b      	ldr	r3, [r3, #8]
 8017d36:	4798      	blx	r3
 8017d38:	4b0a      	ldr	r3, [pc, #40]	@ (8017d64 <_ZN8touchgfx11Application4drawERNS_4RectE+0x50>)
 8017d3a:	6818      	ldr	r0, [r3, #0]
 8017d3c:	b118      	cbz	r0, 8017d46 <_ZN8touchgfx11Application4drawERNS_4RectE+0x32>
 8017d3e:	6803      	ldr	r3, [r0, #0]
 8017d40:	4621      	mov	r1, r4
 8017d42:	689b      	ldr	r3, [r3, #8]
 8017d44:	4798      	blx	r3
 8017d46:	4b08      	ldr	r3, [pc, #32]	@ (8017d68 <_ZN8touchgfx11Application4drawERNS_4RectE+0x54>)
 8017d48:	4621      	mov	r1, r4
 8017d4a:	6818      	ldr	r0, [r3, #0]
 8017d4c:	6803      	ldr	r3, [r0, #0]
 8017d4e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017d52:	69db      	ldr	r3, [r3, #28]
 8017d54:	4718      	bx	r3
 8017d56:	bd10      	pop	{r4, pc}
 8017d58:	24028e16 	.word	0x24028e16
 8017d5c:	24028e14 	.word	0x24028e14
 8017d60:	24028e64 	.word	0x24028e64
 8017d64:	24028e60 	.word	0x24028e60
 8017d68:	24028e20 	.word	0x24028e20

08017d6c <_ZNK8touchgfx4Rect8includesERKS0_>:
 8017d6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017d6e:	4606      	mov	r6, r0
 8017d70:	4608      	mov	r0, r1
 8017d72:	460f      	mov	r7, r1
 8017d74:	f7f8 f907 	bl	800ff86 <_ZNK8touchgfx4Rect7isEmptyEv>
 8017d78:	b9e8      	cbnz	r0, 8017db6 <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 8017d7a:	f9b7 5000 	ldrsh.w	r5, [r7]
 8017d7e:	f9b6 4000 	ldrsh.w	r4, [r6]
 8017d82:	42a5      	cmp	r5, r4
 8017d84:	db17      	blt.n	8017db6 <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 8017d86:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8017d8a:	f9b6 3002 	ldrsh.w	r3, [r6, #2]
 8017d8e:	429a      	cmp	r2, r3
 8017d90:	db11      	blt.n	8017db6 <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 8017d92:	88b9      	ldrh	r1, [r7, #4]
 8017d94:	440d      	add	r5, r1
 8017d96:	88b1      	ldrh	r1, [r6, #4]
 8017d98:	440c      	add	r4, r1
 8017d9a:	b22d      	sxth	r5, r5
 8017d9c:	b224      	sxth	r4, r4
 8017d9e:	42a5      	cmp	r5, r4
 8017da0:	dc09      	bgt.n	8017db6 <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 8017da2:	88f8      	ldrh	r0, [r7, #6]
 8017da4:	4410      	add	r0, r2
 8017da6:	88f2      	ldrh	r2, [r6, #6]
 8017da8:	4413      	add	r3, r2
 8017daa:	b200      	sxth	r0, r0
 8017dac:	b21b      	sxth	r3, r3
 8017dae:	4298      	cmp	r0, r3
 8017db0:	bfcc      	ite	gt
 8017db2:	2000      	movgt	r0, #0
 8017db4:	2001      	movle	r0, #1
 8017db6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08017db8 <_ZN8touchgfx4Rect11expandToFitERKS0_>:
 8017db8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017dba:	4604      	mov	r4, r0
 8017dbc:	4608      	mov	r0, r1
 8017dbe:	460d      	mov	r5, r1
 8017dc0:	f7f8 f8e1 	bl	800ff86 <_ZNK8touchgfx4Rect7isEmptyEv>
 8017dc4:	b978      	cbnz	r0, 8017de6 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
 8017dc6:	4620      	mov	r0, r4
 8017dc8:	f7f8 f8dd 	bl	800ff86 <_ZNK8touchgfx4Rect7isEmptyEv>
 8017dcc:	f9b5 6000 	ldrsh.w	r6, [r5]
 8017dd0:	b150      	cbz	r0, 8017de8 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x30>
 8017dd2:	8026      	strh	r6, [r4, #0]
 8017dd4:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 8017dd8:	8063      	strh	r3, [r4, #2]
 8017dda:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 8017dde:	80a3      	strh	r3, [r4, #4]
 8017de0:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 8017de4:	80e3      	strh	r3, [r4, #6]
 8017de6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017de8:	f9b4 1000 	ldrsh.w	r1, [r4]
 8017dec:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 8017df0:	42b1      	cmp	r1, r6
 8017df2:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 8017df6:	f8b5 c004 	ldrh.w	ip, [r5, #4]
 8017dfa:	460f      	mov	r7, r1
 8017dfc:	88ed      	ldrh	r5, [r5, #6]
 8017dfe:	bfa8      	it	ge
 8017e00:	4637      	movge	r7, r6
 8017e02:	4293      	cmp	r3, r2
 8017e04:	4618      	mov	r0, r3
 8017e06:	4466      	add	r6, ip
 8017e08:	f8b4 c004 	ldrh.w	ip, [r4, #4]
 8017e0c:	bfa8      	it	ge
 8017e0e:	4610      	movge	r0, r2
 8017e10:	442a      	add	r2, r5
 8017e12:	88e5      	ldrh	r5, [r4, #6]
 8017e14:	4461      	add	r1, ip
 8017e16:	b236      	sxth	r6, r6
 8017e18:	8027      	strh	r7, [r4, #0]
 8017e1a:	442b      	add	r3, r5
 8017e1c:	b209      	sxth	r1, r1
 8017e1e:	b212      	sxth	r2, r2
 8017e20:	8060      	strh	r0, [r4, #2]
 8017e22:	b21b      	sxth	r3, r3
 8017e24:	428e      	cmp	r6, r1
 8017e26:	bfac      	ite	ge
 8017e28:	ebc7 0106 	rsbge	r1, r7, r6
 8017e2c:	ebc7 0101 	rsblt	r1, r7, r1
 8017e30:	429a      	cmp	r2, r3
 8017e32:	bfac      	ite	ge
 8017e34:	ebc0 0202 	rsbge	r2, r0, r2
 8017e38:	ebc0 0203 	rsblt	r2, r0, r3
 8017e3c:	80a1      	strh	r1, [r4, #4]
 8017e3e:	80e2      	strh	r2, [r4, #6]
 8017e40:	e7d1      	b.n	8017de6 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
	...

08017e44 <_ZN8touchgfx11Application11getInstanceEv>:
 8017e44:	4b01      	ldr	r3, [pc, #4]	@ (8017e4c <_ZN8touchgfx11Application11getInstanceEv+0x8>)
 8017e46:	6818      	ldr	r0, [r3, #0]
 8017e48:	4770      	bx	lr
 8017e4a:	bf00      	nop
 8017e4c:	24028e74 	.word	0x24028e74

08017e50 <_ZN8touchgfx11Application41copyInvalidatedAreasFromTFTToClientBufferEv>:
 8017e50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017e52:	4b10      	ldr	r3, [pc, #64]	@ (8017e94 <_ZN8touchgfx11Application41copyInvalidatedAreasFromTFTToClientBufferEv+0x44>)
 8017e54:	4605      	mov	r5, r0
 8017e56:	781b      	ldrb	r3, [r3, #0]
 8017e58:	b1d3      	cbz	r3, 8017e90 <_ZN8touchgfx11Application41copyInvalidatedAreasFromTFTToClientBufferEv+0x40>
 8017e5a:	4b0f      	ldr	r3, [pc, #60]	@ (8017e98 <_ZN8touchgfx11Application41copyInvalidatedAreasFromTFTToClientBufferEv+0x48>)
 8017e5c:	f100 06ee 	add.w	r6, r0, #238	@ 0xee
 8017e60:	4f0e      	ldr	r7, [pc, #56]	@ (8017e9c <_ZN8touchgfx11Application41copyInvalidatedAreasFromTFTToClientBufferEv+0x4c>)
 8017e62:	881c      	ldrh	r4, [r3, #0]
 8017e64:	f8b5 312e 	ldrh.w	r3, [r5, #302]	@ 0x12e
 8017e68:	42a3      	cmp	r3, r4
 8017e6a:	d90e      	bls.n	8017e8a <_ZN8touchgfx11Application41copyInvalidatedAreasFromTFTToClientBufferEv+0x3a>
 8017e6c:	683b      	ldr	r3, [r7, #0]
 8017e6e:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 8017e72:	b10a      	cbz	r2, 8017e78 <_ZN8touchgfx11Application41copyInvalidatedAreasFromTFTToClientBufferEv+0x28>
 8017e74:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8017e76:	b900      	cbnz	r0, 8017e7a <_ZN8touchgfx11Application41copyInvalidatedAreasFromTFTToClientBufferEv+0x2a>
 8017e78:	6898      	ldr	r0, [r3, #8]
 8017e7a:	6803      	ldr	r3, [r0, #0]
 8017e7c:	eb06 01c4 	add.w	r1, r6, r4, lsl #3
 8017e80:	3401      	adds	r4, #1
 8017e82:	69db      	ldr	r3, [r3, #28]
 8017e84:	4798      	blx	r3
 8017e86:	b2a4      	uxth	r4, r4
 8017e88:	e7ec      	b.n	8017e64 <_ZN8touchgfx11Application41copyInvalidatedAreasFromTFTToClientBufferEv+0x14>
 8017e8a:	2300      	movs	r3, #0
 8017e8c:	f8a5 312e 	strh.w	r3, [r5, #302]	@ 0x12e
 8017e90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017e92:	bf00      	nop
 8017e94:	24028e1e 	.word	0x24028e1e
 8017e98:	2400007c 	.word	0x2400007c
 8017e9c:	24028e20 	.word	0x24028e20

08017ea0 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv>:
 8017ea0:	2300      	movs	r3, #0
 8017ea2:	b510      	push	{r4, lr}
 8017ea4:	f8a0 30a4 	strh.w	r3, [r0, #164]	@ 0xa4
 8017ea8:	4604      	mov	r4, r0
 8017eaa:	f8b0 3080 	ldrh.w	r3, [r0, #128]	@ 0x80
 8017eae:	f8a0 30a6 	strh.w	r3, [r0, #166]	@ 0xa6
 8017eb2:	f8b4 30a4 	ldrh.w	r3, [r4, #164]	@ 0xa4
 8017eb6:	f8b4 20a6 	ldrh.w	r2, [r4, #166]	@ 0xa6
 8017eba:	429a      	cmp	r2, r3
 8017ebc:	d90e      	bls.n	8017edc <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv+0x3c>
 8017ebe:	18e2      	adds	r2, r4, r3
 8017ec0:	f892 2084 	ldrb.w	r2, [r2, #132]	@ 0x84
 8017ec4:	b122      	cbz	r2, 8017ed0 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv+0x30>
 8017ec6:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
 8017eca:	6803      	ldr	r3, [r0, #0]
 8017ecc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8017ece:	4798      	blx	r3
 8017ed0:	f8b4 30a4 	ldrh.w	r3, [r4, #164]	@ 0xa4
 8017ed4:	3301      	adds	r3, #1
 8017ed6:	f8a4 30a4 	strh.w	r3, [r4, #164]	@ 0xa4
 8017eda:	e7ea      	b.n	8017eb2 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv+0x12>
 8017edc:	bd10      	pop	{r4, pc}

08017ede <_ZN8touchgfx11Application12TimerWidgets6removeEPKNS_8DrawableE>:
 8017ede:	b530      	push	{r4, r5, lr}
 8017ee0:	2200      	movs	r2, #0
 8017ee2:	f8b0 5080 	ldrh.w	r5, [r0, #128]	@ 0x80
 8017ee6:	b293      	uxth	r3, r2
 8017ee8:	429d      	cmp	r5, r3
 8017eea:	d90e      	bls.n	8017f0a <_ZN8touchgfx11Application12TimerWidgets6removeEPKNS_8DrawableE+0x2c>
 8017eec:	f850 3022 	ldr.w	r3, [r0, r2, lsl #2]
 8017ef0:	428b      	cmp	r3, r1
 8017ef2:	d10b      	bne.n	8017f0c <_ZN8touchgfx11Application12TimerWidgets6removeEPKNS_8DrawableE+0x2e>
 8017ef4:	1884      	adds	r4, r0, r2
 8017ef6:	f894 3084 	ldrb.w	r3, [r4, #132]	@ 0x84
 8017efa:	b13b      	cbz	r3, 8017f0c <_ZN8touchgfx11Application12TimerWidgets6removeEPKNS_8DrawableE+0x2e>
 8017efc:	3b01      	subs	r3, #1
 8017efe:	b2db      	uxtb	r3, r3
 8017f00:	f884 3084 	strb.w	r3, [r4, #132]	@ 0x84
 8017f04:	b90b      	cbnz	r3, 8017f0a <_ZN8touchgfx11Application12TimerWidgets6removeEPKNS_8DrawableE+0x2c>
 8017f06:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 8017f0a:	bd30      	pop	{r4, r5, pc}
 8017f0c:	3201      	adds	r2, #1
 8017f0e:	e7ea      	b.n	8017ee6 <_ZN8touchgfx11Application12TimerWidgets6removeEPKNS_8DrawableE+0x8>

08017f10 <_ZN8touchgfx11Application12TimerWidgets5clearEv>:
 8017f10:	2300      	movs	r3, #0
 8017f12:	f100 0284 	add.w	r2, r0, #132	@ 0x84
 8017f16:	30a4      	adds	r0, #164	@ 0xa4
 8017f18:	f820 3c24 	strh.w	r3, [r0, #-36]
 8017f1c:	f802 3b01 	strb.w	r3, [r2], #1
 8017f20:	4282      	cmp	r2, r0
 8017f22:	d1fb      	bne.n	8017f1c <_ZN8touchgfx11Application12TimerWidgets5clearEv+0xc>
 8017f24:	4770      	bx	lr
	...

08017f28 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE>:
 8017f28:	b570      	push	{r4, r5, r6, lr}
 8017f2a:	4c0b      	ldr	r4, [pc, #44]	@ (8017f58 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x30>)
 8017f2c:	4605      	mov	r5, r0
 8017f2e:	460e      	mov	r6, r1
 8017f30:	6820      	ldr	r0, [r4, #0]
 8017f32:	b110      	cbz	r0, 8017f3a <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x12>
 8017f34:	6803      	ldr	r3, [r0, #0]
 8017f36:	695b      	ldr	r3, [r3, #20]
 8017f38:	4798      	blx	r3
 8017f3a:	1d28      	adds	r0, r5, #4
 8017f3c:	f7ff ffe8 	bl	8017f10 <_ZN8touchgfx11Application12TimerWidgets5clearEv>
 8017f40:	6026      	str	r6, [r4, #0]
 8017f42:	6833      	ldr	r3, [r6, #0]
 8017f44:	4630      	mov	r0, r6
 8017f46:	68db      	ldr	r3, [r3, #12]
 8017f48:	4798      	blx	r3
 8017f4a:	682b      	ldr	r3, [r5, #0]
 8017f4c:	4628      	mov	r0, r5
 8017f4e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8017f50:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017f54:	4718      	bx	r3
 8017f56:	bf00      	nop
 8017f58:	24028e64 	.word	0x24028e64

08017f5c <_ZN8touchgfx11Application12TimerWidgets7compactEv>:
 8017f5c:	2300      	movs	r3, #0
 8017f5e:	f8b0 c080 	ldrh.w	ip, [r0, #128]	@ 0x80
 8017f62:	f8b0 10a4 	ldrh.w	r1, [r0, #164]	@ 0xa4
 8017f66:	461a      	mov	r2, r3
 8017f68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017f6a:	461c      	mov	r4, r3
 8017f6c:	461d      	mov	r5, r3
 8017f6e:	459c      	cmp	ip, r3
 8017f70:	dd1a      	ble.n	8017fa8 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x4c>
 8017f72:	18c6      	adds	r6, r0, r3
 8017f74:	f896 6084 	ldrb.w	r6, [r6, #132]	@ 0x84
 8017f78:	b16e      	cbz	r6, 8017f96 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x3a>
 8017f7a:	429a      	cmp	r2, r3
 8017f7c:	d008      	beq.n	8017f90 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x34>
 8017f7e:	f850 7023 	ldr.w	r7, [r0, r3, lsl #2]
 8017f82:	fa1f fe82 	uxth.w	lr, r2
 8017f86:	f840 702e 	str.w	r7, [r0, lr, lsl #2]
 8017f8a:	1887      	adds	r7, r0, r2
 8017f8c:	f887 6084 	strb.w	r6, [r7, #132]	@ 0x84
 8017f90:	3201      	adds	r2, #1
 8017f92:	3301      	adds	r3, #1
 8017f94:	e7eb      	b.n	8017f6e <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x12>
 8017f96:	4299      	cmp	r1, r3
 8017f98:	f8b0 60a6 	ldrh.w	r6, [r0, #166]	@ 0xa6
 8017f9c:	bfa8      	it	ge
 8017f9e:	3501      	addge	r5, #1
 8017fa0:	429e      	cmp	r6, r3
 8017fa2:	bfc8      	it	gt
 8017fa4:	3401      	addgt	r4, #1
 8017fa6:	e7f4      	b.n	8017f92 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x36>
 8017fa8:	f8b0 30a6 	ldrh.w	r3, [r0, #166]	@ 0xa6
 8017fac:	1b49      	subs	r1, r1, r5
 8017fae:	1b1b      	subs	r3, r3, r4
 8017fb0:	f8a0 10a4 	strh.w	r1, [r0, #164]	@ 0xa4
 8017fb4:	f8a0 30a6 	strh.w	r3, [r0, #166]	@ 0xa6
 8017fb8:	f8b0 3080 	ldrh.w	r3, [r0, #128]	@ 0x80
 8017fbc:	4293      	cmp	r3, r2
 8017fbe:	dd03      	ble.n	8017fc8 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x6c>
 8017fc0:	3b01      	subs	r3, #1
 8017fc2:	f8a0 3080 	strh.w	r3, [r0, #128]	@ 0x80
 8017fc6:	e7f7      	b.n	8017fb8 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x5c>
 8017fc8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08017fcc <_ZN8touchgfx11Application15handleTickEventEv>:
 8017fcc:	b570      	push	{r4, r5, r6, lr}
 8017fce:	4d16      	ldr	r5, [pc, #88]	@ (8018028 <_ZN8touchgfx11Application15handleTickEventEv+0x5c>)
 8017fd0:	4604      	mov	r4, r0
 8017fd2:	6828      	ldr	r0, [r5, #0]
 8017fd4:	b140      	cbz	r0, 8017fe8 <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 8017fd6:	7a03      	ldrb	r3, [r0, #8]
 8017fd8:	b933      	cbnz	r3, 8017fe8 <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 8017fda:	f884 3138 	strb.w	r3, [r4, #312]	@ 0x138
 8017fde:	6803      	ldr	r3, [r0, #0]
 8017fe0:	689b      	ldr	r3, [r3, #8]
 8017fe2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017fe6:	4718      	bx	r3
 8017fe8:	f894 3138 	ldrb.w	r3, [r4, #312]	@ 0x138
 8017fec:	4e0f      	ldr	r6, [pc, #60]	@ (801802c <_ZN8touchgfx11Application15handleTickEventEv+0x60>)
 8017fee:	b973      	cbnz	r3, 801800e <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 8017ff0:	b168      	cbz	r0, 801800e <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 8017ff2:	7a03      	ldrb	r3, [r0, #8]
 8017ff4:	b15b      	cbz	r3, 801800e <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 8017ff6:	6830      	ldr	r0, [r6, #0]
 8017ff8:	b110      	cbz	r0, 8018000 <_ZN8touchgfx11Application15handleTickEventEv+0x34>
 8017ffa:	6803      	ldr	r3, [r0, #0]
 8017ffc:	691b      	ldr	r3, [r3, #16]
 8017ffe:	4798      	blx	r3
 8018000:	6828      	ldr	r0, [r5, #0]
 8018002:	6803      	ldr	r3, [r0, #0]
 8018004:	68db      	ldr	r3, [r3, #12]
 8018006:	4798      	blx	r3
 8018008:	2301      	movs	r3, #1
 801800a:	f884 3138 	strb.w	r3, [r4, #312]	@ 0x138
 801800e:	3404      	adds	r4, #4
 8018010:	4620      	mov	r0, r4
 8018012:	f7ff ff45 	bl	8017ea0 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv>
 8018016:	4620      	mov	r0, r4
 8018018:	f7ff ffa0 	bl	8017f5c <_ZN8touchgfx11Application12TimerWidgets7compactEv>
 801801c:	6830      	ldr	r0, [r6, #0]
 801801e:	b110      	cbz	r0, 8018026 <_ZN8touchgfx11Application15handleTickEventEv+0x5a>
 8018020:	6803      	ldr	r3, [r0, #0]
 8018022:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018024:	e7dd      	b.n	8017fe2 <_ZN8touchgfx11Application15handleTickEventEv+0x16>
 8018026:	bd70      	pop	{r4, r5, r6, pc}
 8018028:	24028e68 	.word	0x24028e68
 801802c:	24028e64 	.word	0x24028e64

08018030 <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE>:
 8018030:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018032:	2300      	movs	r3, #0
 8018034:	4604      	mov	r4, r0
 8018036:	460d      	mov	r5, r1
 8018038:	f8b0 1080 	ldrh.w	r1, [r0, #128]	@ 0x80
 801803c:	4618      	mov	r0, r3
 801803e:	b29a      	uxth	r2, r3
 8018040:	4291      	cmp	r1, r2
 8018042:	d912      	bls.n	801806a <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE+0x3a>
 8018044:	f854 7023 	ldr.w	r7, [r4, r3, lsl #2]
 8018048:	18e6      	adds	r6, r4, r3
 801804a:	42af      	cmp	r7, r5
 801804c:	f896 2084 	ldrb.w	r2, [r6, #132]	@ 0x84
 8018050:	d105      	bne.n	801805e <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE+0x2e>
 8018052:	2aff      	cmp	r2, #255	@ 0xff
 8018054:	d002      	beq.n	801805c <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE+0x2c>
 8018056:	3201      	adds	r2, #1
 8018058:	f886 2084 	strb.w	r2, [r6, #132]	@ 0x84
 801805c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801805e:	2a00      	cmp	r2, #0
 8018060:	f103 0301 	add.w	r3, r3, #1
 8018064:	bf08      	it	eq
 8018066:	2001      	moveq	r0, #1
 8018068:	e7e9      	b.n	801803e <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE+0xe>
 801806a:	b120      	cbz	r0, 8018076 <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE+0x46>
 801806c:	2920      	cmp	r1, #32
 801806e:	d102      	bne.n	8018076 <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE+0x46>
 8018070:	4620      	mov	r0, r4
 8018072:	f7ff ff73 	bl	8017f5c <_ZN8touchgfx11Application12TimerWidgets7compactEv>
 8018076:	f8b4 3080 	ldrh.w	r3, [r4, #128]	@ 0x80
 801807a:	2b1f      	cmp	r3, #31
 801807c:	d8ee      	bhi.n	801805c <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE+0x2c>
 801807e:	18e2      	adds	r2, r4, r3
 8018080:	2101      	movs	r1, #1
 8018082:	f882 1084 	strb.w	r1, [r2, #132]	@ 0x84
 8018086:	185a      	adds	r2, r3, r1
 8018088:	f8a4 2080 	strh.w	r2, [r4, #128]	@ 0x80
 801808c:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 8018090:	e7e4      	b.n	801805c <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE+0x2c>

08018092 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>:
 8018092:	4603      	mov	r3, r0
 8018094:	f100 0140 	add.w	r1, r0, #64	@ 0x40
 8018098:	2200      	movs	r2, #0
 801809a:	801a      	strh	r2, [r3, #0]
 801809c:	3308      	adds	r3, #8
 801809e:	f823 2c06 	strh.w	r2, [r3, #-6]
 80180a2:	f823 2c04 	strh.w	r2, [r3, #-4]
 80180a6:	f823 2c02 	strh.w	r2, [r3, #-2]
 80180aa:	428b      	cmp	r3, r1
 80180ac:	d1f5      	bne.n	801809a <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev+0x8>
 80180ae:	f8a0 2040 	strh.w	r2, [r0, #64]	@ 0x40
 80180b2:	4770      	bx	lr

080180b4 <_ZN8touchgfx11ApplicationC1Ev>:
 80180b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80180b6:	4b1d      	ldr	r3, [pc, #116]	@ (801812c <_ZN8touchgfx11ApplicationC1Ev+0x78>)
 80180b8:	4606      	mov	r6, r0
 80180ba:	4604      	mov	r4, r0
 80180bc:	2500      	movs	r5, #0
 80180be:	f846 3b04 	str.w	r3, [r6], #4
 80180c2:	22a8      	movs	r2, #168	@ 0xa8
 80180c4:	2100      	movs	r1, #0
 80180c6:	4630      	mov	r0, r6
 80180c8:	f00f fff6 	bl	80280b8 <memset>
 80180cc:	f8a4 5084 	strh.w	r5, [r4, #132]	@ 0x84
 80180d0:	f104 00ac 	add.w	r0, r4, #172	@ 0xac
 80180d4:	4f16      	ldr	r7, [pc, #88]	@ (8018130 <_ZN8touchgfx11ApplicationC1Ev+0x7c>)
 80180d6:	f7ff ffdc 	bl	8018092 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 80180da:	f104 00ee 	add.w	r0, r4, #238	@ 0xee
 80180de:	f7ff ffd8 	bl	8018092 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 80180e2:	f8a4 5130 	strh.w	r5, [r4, #304]	@ 0x130
 80180e6:	f8a4 5132 	strh.w	r5, [r4, #306]	@ 0x132
 80180ea:	f8a4 5134 	strh.w	r5, [r4, #308]	@ 0x134
 80180ee:	f8a4 5136 	strh.w	r5, [r4, #310]	@ 0x136
 80180f2:	f884 5138 	strb.w	r5, [r4, #312]	@ 0x138
 80180f6:	490f      	ldr	r1, [pc, #60]	@ (8018134 <_ZN8touchgfx11ApplicationC1Ev+0x80>)
 80180f8:	480f      	ldr	r0, [pc, #60]	@ (8018138 <_ZN8touchgfx11ApplicationC1Ev+0x84>)
 80180fa:	f00d fc6d 	bl	80259d8 <CRC_Lock>
 80180fe:	4b0f      	ldr	r3, [pc, #60]	@ (801813c <_ZN8touchgfx11ApplicationC1Ev+0x88>)
 8018100:	b158      	cbz	r0, 801811a <_ZN8touchgfx11ApplicationC1Ev+0x66>
 8018102:	801d      	strh	r5, [r3, #0]
 8018104:	2300      	movs	r3, #0
 8018106:	4a0e      	ldr	r2, [pc, #56]	@ (8018140 <_ZN8touchgfx11ApplicationC1Ev+0x8c>)
 8018108:	4630      	mov	r0, r6
 801810a:	6013      	str	r3, [r2, #0]
 801810c:	4a0d      	ldr	r2, [pc, #52]	@ (8018144 <_ZN8touchgfx11ApplicationC1Ev+0x90>)
 801810e:	603b      	str	r3, [r7, #0]
 8018110:	6013      	str	r3, [r2, #0]
 8018112:	f7ff fefd 	bl	8017f10 <_ZN8touchgfx11Application12TimerWidgets5clearEv>
 8018116:	4620      	mov	r0, r4
 8018118:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801811a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 801811e:	2002      	movs	r0, #2
 8018120:	801a      	strh	r2, [r3, #0]
 8018122:	6038      	str	r0, [r7, #0]
 8018124:	f001 fe6c 	bl	8019e00 <_ZN8touchgfx6Screen4drawEv>
 8018128:	e7ec      	b.n	8018104 <_ZN8touchgfx11ApplicationC1Ev+0x50>
 801812a:	bf00      	nop
 801812c:	0802d0f4 	.word	0x0802d0f4
 8018130:	24028e64 	.word	0x24028e64
 8018134:	b5e8b5cd 	.word	0xb5e8b5cd
 8018138:	f407a5c2 	.word	0xf407a5c2
 801813c:	2400007c 	.word	0x2400007c
 8018140:	24028e74 	.word	0x24028e74
 8018144:	24028e68 	.word	0x24028e68

08018148 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>:
 8018148:	f8b0 3040 	ldrh.w	r3, [r0, #64]	@ 0x40
 801814c:	3b01      	subs	r3, #1
 801814e:	b29b      	uxth	r3, r3
 8018150:	428b      	cmp	r3, r1
 8018152:	f8a0 3040 	strh.w	r3, [r0, #64]	@ 0x40
 8018156:	b510      	push	{r4, lr}
 8018158:	d908      	bls.n	801816c <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x24>
 801815a:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 801815e:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
 8018162:	681a      	ldr	r2, [r3, #0]
 8018164:	f840 2031 	str.w	r2, [r0, r1, lsl #3]
 8018168:	685a      	ldr	r2, [r3, #4]
 801816a:	6062      	str	r2, [r4, #4]
 801816c:	bd10      	pop	{r4, pc}
	...

08018170 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>:
 8018170:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018174:	b08f      	sub	sp, #60	@ 0x3c
 8018176:	4b8f      	ldr	r3, [pc, #572]	@ (80183b4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x244>)
 8018178:	4683      	mov	fp, r0
 801817a:	ac0a      	add	r4, sp, #40	@ 0x28
 801817c:	e884 0006 	stmia.w	r4, {r1, r2}
 8018180:	f9b3 2000 	ldrsh.w	r2, [r3]
 8018184:	4620      	mov	r0, r4
 8018186:	4b8c      	ldr	r3, [pc, #560]	@ (80183b8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x248>)
 8018188:	f9b3 1000 	ldrsh.w	r1, [r3]
 801818c:	f7ff fd9d 	bl	8017cca <_ZN8touchgfx4Rect10restrictToEss>
 8018190:	4620      	mov	r0, r4
 8018192:	f7f7 fef8 	bl	800ff86 <_ZNK8touchgfx4Rect7isEmptyEv>
 8018196:	2800      	cmp	r0, #0
 8018198:	d16a      	bne.n	8018270 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 801819a:	9403      	str	r4, [sp, #12]
 801819c:	f8bb 40ec 	ldrh.w	r4, [fp, #236]	@ 0xec
 80181a0:	f10b 03ac 	add.w	r3, fp, #172	@ 0xac
 80181a4:	eb0b 05c4 	add.w	r5, fp, r4, lsl #3
 80181a8:	9301      	str	r3, [sp, #4]
 80181aa:	35a4      	adds	r5, #164	@ 0xa4
 80181ac:	b15c      	cbz	r4, 80181c6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x56>
 80181ae:	4629      	mov	r1, r5
 80181b0:	9803      	ldr	r0, [sp, #12]
 80181b2:	f7ff fddb 	bl	8017d6c <_ZNK8touchgfx4Rect8includesERKS0_>
 80181b6:	3c01      	subs	r4, #1
 80181b8:	b118      	cbz	r0, 80181c2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52>
 80181ba:	b2a1      	uxth	r1, r4
 80181bc:	9801      	ldr	r0, [sp, #4]
 80181be:	f7ff ffc3 	bl	8018148 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 80181c2:	3d08      	subs	r5, #8
 80181c4:	e7f2      	b.n	80181ac <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3c>
 80181c6:	f8bb a0ec 	ldrh.w	sl, [fp, #236]	@ 0xec
 80181ca:	f10a 33ff 	add.w	r3, sl, #4294967295
 80181ce:	f8cd a010 	str.w	sl, [sp, #16]
 80181d2:	9302      	str	r3, [sp, #8]
 80181d4:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 80181d8:	f103 04a4 	add.w	r4, r3, #164	@ 0xa4
 80181dc:	9306      	str	r3, [sp, #24]
 80181de:	445c      	add	r4, fp
 80181e0:	2500      	movs	r5, #0
 80181e2:	4626      	mov	r6, r4
 80181e4:	f8cd a014 	str.w	sl, [sp, #20]
 80181e8:	462f      	mov	r7, r5
 80181ea:	9b05      	ldr	r3, [sp, #20]
 80181ec:	2b00      	cmp	r3, #0
 80181ee:	d073      	beq.n	80182d8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x168>
 80181f0:	9903      	ldr	r1, [sp, #12]
 80181f2:	4630      	mov	r0, r6
 80181f4:	f7ff fd47 	bl	8017c86 <_ZNK8touchgfx4Rect9intersectERKS0_>
 80181f8:	b350      	cbz	r0, 8018250 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xe0>
 80181fa:	f9bd e028 	ldrsh.w	lr, [sp, #40]	@ 0x28
 80181fe:	f9b6 c000 	ldrsh.w	ip, [r6]
 8018202:	f9bd 802a 	ldrsh.w	r8, [sp, #42]	@ 0x2a
 8018206:	45e6      	cmp	lr, ip
 8018208:	f9b6 9002 	ldrsh.w	r9, [r6, #2]
 801820c:	db33      	blt.n	8018276 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x106>
 801820e:	f8bd 202c 	ldrh.w	r2, [sp, #44]	@ 0x2c
 8018212:	88b3      	ldrh	r3, [r6, #4]
 8018214:	4472      	add	r2, lr
 8018216:	4463      	add	r3, ip
 8018218:	b212      	sxth	r2, r2
 801821a:	b21b      	sxth	r3, r3
 801821c:	429a      	cmp	r2, r3
 801821e:	dc2a      	bgt.n	8018276 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x106>
 8018220:	fa1f f289 	uxth.w	r2, r9
 8018224:	88f3      	ldrh	r3, [r6, #6]
 8018226:	45c8      	cmp	r8, r9
 8018228:	f8bd 102e 	ldrh.w	r1, [sp, #46]	@ 0x2e
 801822c:	4413      	add	r3, r2
 801822e:	fa1f fc88 	uxth.w	ip, r8
 8018232:	b29b      	uxth	r3, r3
 8018234:	fa0f fe83 	sxth.w	lr, r3
 8018238:	db0f      	blt.n	801825a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xea>
 801823a:	eba3 030c 	sub.w	r3, r3, ip
 801823e:	1ac9      	subs	r1, r1, r3
 8018240:	b209      	sxth	r1, r1
 8018242:	2900      	cmp	r1, #0
 8018244:	f8ad 102e 	strh.w	r1, [sp, #46]	@ 0x2e
 8018248:	dd12      	ble.n	8018270 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 801824a:	f8ad e02a 	strh.w	lr, [sp, #42]	@ 0x2a
 801824e:	4605      	mov	r5, r0
 8018250:	9b05      	ldr	r3, [sp, #20]
 8018252:	3e08      	subs	r6, #8
 8018254:	3b01      	subs	r3, #1
 8018256:	9305      	str	r3, [sp, #20]
 8018258:	e7c7      	b.n	80181ea <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x7a>
 801825a:	4461      	add	r1, ip
 801825c:	b209      	sxth	r1, r1
 801825e:	4571      	cmp	r1, lr
 8018260:	dc38      	bgt.n	80182d4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 8018262:	eba2 020c 	sub.w	r2, r2, ip
 8018266:	b212      	sxth	r2, r2
 8018268:	f8ad 202e 	strh.w	r2, [sp, #46]	@ 0x2e
 801826c:	2a00      	cmp	r2, #0
 801826e:	dcee      	bgt.n	801824e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xde>
 8018270:	b00f      	add	sp, #60	@ 0x3c
 8018272:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018276:	45c8      	cmp	r8, r9
 8018278:	db2c      	blt.n	80182d4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 801827a:	88f3      	ldrh	r3, [r6, #6]
 801827c:	4499      	add	r9, r3
 801827e:	f8bd 302e 	ldrh.w	r3, [sp, #46]	@ 0x2e
 8018282:	4498      	add	r8, r3
 8018284:	fa0f f989 	sxth.w	r9, r9
 8018288:	fa0f f888 	sxth.w	r8, r8
 801828c:	45c1      	cmp	r9, r8
 801828e:	db21      	blt.n	80182d4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 8018290:	fa1f f28c 	uxth.w	r2, ip
 8018294:	88b3      	ldrh	r3, [r6, #4]
 8018296:	45e6      	cmp	lr, ip
 8018298:	f8bd 102c 	ldrh.w	r1, [sp, #44]	@ 0x2c
 801829c:	4413      	add	r3, r2
 801829e:	fa1f f88e 	uxth.w	r8, lr
 80182a2:	b29b      	uxth	r3, r3
 80182a4:	fa0f f983 	sxth.w	r9, r3
 80182a8:	db0a      	blt.n	80182c0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x150>
 80182aa:	eba3 0308 	sub.w	r3, r3, r8
 80182ae:	1ac9      	subs	r1, r1, r3
 80182b0:	b209      	sxth	r1, r1
 80182b2:	2900      	cmp	r1, #0
 80182b4:	f8ad 102c 	strh.w	r1, [sp, #44]	@ 0x2c
 80182b8:	ddda      	ble.n	8018270 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 80182ba:	f8ad 9028 	strh.w	r9, [sp, #40]	@ 0x28
 80182be:	e7c6      	b.n	801824e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xde>
 80182c0:	4441      	add	r1, r8
 80182c2:	b209      	sxth	r1, r1
 80182c4:	4549      	cmp	r1, r9
 80182c6:	dc05      	bgt.n	80182d4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 80182c8:	eba2 0208 	sub.w	r2, r2, r8
 80182cc:	b212      	sxth	r2, r2
 80182ce:	f8ad 202c 	strh.w	r2, [sp, #44]	@ 0x2c
 80182d2:	e7cb      	b.n	801826c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xfc>
 80182d4:	4607      	mov	r7, r0
 80182d6:	e7bb      	b.n	8018250 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xe0>
 80182d8:	2d00      	cmp	r5, #0
 80182da:	d181      	bne.n	80181e0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x70>
 80182dc:	2f00      	cmp	r7, #0
 80182de:	f000 81dd 	beq.w	801869c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52c>
 80182e2:	f9bd 6028 	ldrsh.w	r6, [sp, #40]	@ 0x28
 80182e6:	f9bd 702a 	ldrsh.w	r7, [sp, #42]	@ 0x2a
 80182ea:	b2b3      	uxth	r3, r6
 80182ec:	f8bd a02e 	ldrh.w	sl, [sp, #46]	@ 0x2e
 80182f0:	9305      	str	r3, [sp, #20]
 80182f2:	9a05      	ldr	r2, [sp, #20]
 80182f4:	f8bd 302c 	ldrh.w	r3, [sp, #44]	@ 0x2c
 80182f8:	4413      	add	r3, r2
 80182fa:	b2ba      	uxth	r2, r7
 80182fc:	4492      	add	sl, r2
 80182fe:	b29b      	uxth	r3, r3
 8018300:	fa1f fa8a 	uxth.w	sl, sl
 8018304:	fa0f f883 	sxth.w	r8, r3
 8018308:	fa0f f98a 	sxth.w	r9, sl
 801830c:	e9cd 2307 	strd	r2, r3, [sp, #28]
 8018310:	9b04      	ldr	r3, [sp, #16]
 8018312:	2b00      	cmp	r3, #0
 8018314:	d052      	beq.n	80183bc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x24c>
 8018316:	9903      	ldr	r1, [sp, #12]
 8018318:	4620      	mov	r0, r4
 801831a:	f7ff fcb4 	bl	8017c86 <_ZNK8touchgfx4Rect9intersectERKS0_>
 801831e:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8018322:	b1c0      	cbz	r0, 8018356 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 8018324:	f9b4 e000 	ldrsh.w	lr, [r4]
 8018328:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 801832c:	4576      	cmp	r6, lr
 801832e:	dc22      	bgt.n	8018376 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x206>
 8018330:	f8b4 c004 	ldrh.w	ip, [r4, #4]
 8018334:	44f4      	add	ip, lr
 8018336:	fa0f fc8c 	sxth.w	ip, ip
 801833a:	45e0      	cmp	r8, ip
 801833c:	db1b      	blt.n	8018376 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x206>
 801833e:	428f      	cmp	r7, r1
 8018340:	fa1f fc81 	uxth.w	ip, r1
 8018344:	88e1      	ldrh	r1, [r4, #6]
 8018346:	dc0d      	bgt.n	8018364 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f4>
 8018348:	ebaa 0c0c 	sub.w	ip, sl, ip
 801834c:	f8a4 9002 	strh.w	r9, [r4, #2]
 8018350:	eba1 010c 	sub.w	r1, r1, ip
 8018354:	80e1      	strh	r1, [r4, #6]
 8018356:	4628      	mov	r0, r5
 8018358:	9904      	ldr	r1, [sp, #16]
 801835a:	3c08      	subs	r4, #8
 801835c:	4605      	mov	r5, r0
 801835e:	3901      	subs	r1, #1
 8018360:	9104      	str	r1, [sp, #16]
 8018362:	e7d3      	b.n	801830c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x19c>
 8018364:	4461      	add	r1, ip
 8018366:	b209      	sxth	r1, r1
 8018368:	4549      	cmp	r1, r9
 801836a:	dcf5      	bgt.n	8018358 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e8>
 801836c:	eba2 0c0c 	sub.w	ip, r2, ip
 8018370:	f8a4 c006 	strh.w	ip, [r4, #6]
 8018374:	e7ef      	b.n	8018356 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 8018376:	428f      	cmp	r7, r1
 8018378:	dcee      	bgt.n	8018358 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e8>
 801837a:	f8b4 c006 	ldrh.w	ip, [r4, #6]
 801837e:	4461      	add	r1, ip
 8018380:	b209      	sxth	r1, r1
 8018382:	4589      	cmp	r9, r1
 8018384:	dbe8      	blt.n	8018358 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e8>
 8018386:	4576      	cmp	r6, lr
 8018388:	fa1f fc8e 	uxth.w	ip, lr
 801838c:	88a1      	ldrh	r1, [r4, #4]
 801838e:	dc07      	bgt.n	80183a0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x230>
 8018390:	eba3 0c0c 	sub.w	ip, r3, ip
 8018394:	f8a4 8000 	strh.w	r8, [r4]
 8018398:	eba1 010c 	sub.w	r1, r1, ip
 801839c:	80a1      	strh	r1, [r4, #4]
 801839e:	e7da      	b.n	8018356 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 80183a0:	4461      	add	r1, ip
 80183a2:	b209      	sxth	r1, r1
 80183a4:	4588      	cmp	r8, r1
 80183a6:	dbd7      	blt.n	8018358 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e8>
 80183a8:	9905      	ldr	r1, [sp, #20]
 80183aa:	eba1 0c0c 	sub.w	ip, r1, ip
 80183ae:	f8a4 c004 	strh.w	ip, [r4, #4]
 80183b2:	e7d0      	b.n	8018356 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 80183b4:	24028e16 	.word	0x24028e16
 80183b8:	24028e14 	.word	0x24028e14
 80183bc:	2d00      	cmp	r5, #0
 80183be:	f000 816d 	beq.w	801869c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52c>
 80183c2:	9b06      	ldr	r3, [sp, #24]
 80183c4:	445b      	add	r3, fp
 80183c6:	461c      	mov	r4, r3
 80183c8:	9b02      	ldr	r3, [sp, #8]
 80183ca:	3301      	adds	r3, #1
 80183cc:	f000 8166 	beq.w	801869c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52c>
 80183d0:	f104 05a4 	add.w	r5, r4, #164	@ 0xa4
 80183d4:	9803      	ldr	r0, [sp, #12]
 80183d6:	4629      	mov	r1, r5
 80183d8:	f7ff fcc8 	bl	8017d6c <_ZNK8touchgfx4Rect8includesERKS0_>
 80183dc:	b120      	cbz	r0, 80183e8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x278>
 80183de:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 80183e2:	9801      	ldr	r0, [sp, #4]
 80183e4:	f7ff feb0 	bl	8018148 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 80183e8:	9903      	ldr	r1, [sp, #12]
 80183ea:	4628      	mov	r0, r5
 80183ec:	f7ff fc4b 	bl	8017c86 <_ZNK8touchgfx4Rect9intersectERKS0_>
 80183f0:	2800      	cmp	r0, #0
 80183f2:	f000 809c 	beq.w	801852e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3be>
 80183f6:	f9b4 90a4 	ldrsh.w	r9, [r4, #164]	@ 0xa4
 80183fa:	f9b4 30a8 	ldrsh.w	r3, [r4, #168]	@ 0xa8
 80183fe:	fa1f f189 	uxth.w	r1, r9
 8018402:	f9bd 0028 	ldrsh.w	r0, [sp, #40]	@ 0x28
 8018406:	9309      	str	r3, [sp, #36]	@ 0x24
 8018408:	eb01 0c03 	add.w	ip, r1, r3
 801840c:	b283      	uxth	r3, r0
 801840e:	4548      	cmp	r0, r9
 8018410:	f9bd e02a 	ldrsh.w	lr, [sp, #42]	@ 0x2a
 8018414:	fa1f fa8c 	uxth.w	sl, ip
 8018418:	f8bd c02c 	ldrh.w	ip, [sp, #44]	@ 0x2c
 801841c:	f9b4 20a6 	ldrsh.w	r2, [r4, #166]	@ 0xa6
 8018420:	eb03 050c 	add.w	r5, r3, ip
 8018424:	b2ad      	uxth	r5, r5
 8018426:	9505      	str	r5, [sp, #20]
 8018428:	f9bd 5014 	ldrsh.w	r5, [sp, #20]
 801842c:	9504      	str	r5, [sp, #16]
 801842e:	f8bb 50ec 	ldrh.w	r5, [fp, #236]	@ 0xec
 8018432:	f340 8099 	ble.w	8018568 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3f8>
 8018436:	1a5b      	subs	r3, r3, r1
 8018438:	4596      	cmp	lr, r2
 801843a:	fa0f f08a 	sxth.w	r0, sl
 801843e:	b29b      	uxth	r3, r3
 8018440:	b21e      	sxth	r6, r3
 8018442:	dd2e      	ble.n	80184a2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x332>
 8018444:	9f02      	ldr	r7, [sp, #8]
 8018446:	fa1f fe8e 	uxth.w	lr, lr
 801844a:	b292      	uxth	r2, r2
 801844c:	f8bd 402e 	ldrh.w	r4, [sp, #46]	@ 0x2e
 8018450:	eb0b 08c7 	add.w	r8, fp, r7, lsl #3
 8018454:	9f04      	ldr	r7, [sp, #16]
 8018456:	ebae 0102 	sub.w	r1, lr, r2
 801845a:	44a6      	add	lr, r4
 801845c:	1a3f      	subs	r7, r7, r0
 801845e:	f8b8 00b2 	ldrh.w	r0, [r8, #178]	@ 0xb2
 8018462:	b289      	uxth	r1, r1
 8018464:	4402      	add	r2, r0
 8018466:	fa0f fe8e 	sxth.w	lr, lr
 801846a:	b20d      	sxth	r5, r1
 801846c:	b212      	sxth	r2, r2
 801846e:	436f      	muls	r7, r5
 8018470:	ebae 0202 	sub.w	r2, lr, r2
 8018474:	4372      	muls	r2, r6
 8018476:	4297      	cmp	r7, r2
 8018478:	db09      	blt.n	801848e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x31e>
 801847a:	f8b8 20ac 	ldrh.w	r2, [r8, #172]	@ 0xac
 801847e:	f8a8 50b2 	strh.w	r5, [r8, #178]	@ 0xb2
 8018482:	449c      	add	ip, r3
 8018484:	f8ad 2028 	strh.w	r2, [sp, #40]	@ 0x28
 8018488:	f8ad c02c 	strh.w	ip, [sp, #44]	@ 0x2c
 801848c:	e686      	b.n	801819c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 801848e:	4421      	add	r1, r4
 8018490:	f8b8 30ae 	ldrh.w	r3, [r8, #174]	@ 0xae
 8018494:	f8a8 60b0 	strh.w	r6, [r8, #176]	@ 0xb0
 8018498:	f8ad 102e 	strh.w	r1, [sp, #46]	@ 0x2e
 801849c:	f8ad 302a 	strh.w	r3, [sp, #42]	@ 0x2a
 80184a0:	e67c      	b.n	801819c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 80184a2:	9f04      	ldr	r7, [sp, #16]
 80184a4:	42b8      	cmp	r0, r7
 80184a6:	da27      	bge.n	80184f8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x388>
 80184a8:	9902      	ldr	r1, [sp, #8]
 80184aa:	1a3f      	subs	r7, r7, r0
 80184ac:	f8bd 502e 	ldrh.w	r5, [sp, #46]	@ 0x2e
 80184b0:	eb0b 04c1 	add.w	r4, fp, r1, lsl #3
 80184b4:	eb05 010e 	add.w	r1, r5, lr
 80184b8:	fa1f f881 	uxth.w	r8, r1
 80184bc:	f8b4 10b2 	ldrh.w	r1, [r4, #178]	@ 0xb2
 80184c0:	4411      	add	r1, r2
 80184c2:	fa0f f988 	sxth.w	r9, r8
 80184c6:	eba2 020e 	sub.w	r2, r2, lr
 80184ca:	eba1 0108 	sub.w	r1, r1, r8
 80184ce:	4372      	muls	r2, r6
 80184d0:	b289      	uxth	r1, r1
 80184d2:	fa0f f881 	sxth.w	r8, r1
 80184d6:	fb08 f707 	mul.w	r7, r8, r7
 80184da:	42ba      	cmp	r2, r7
 80184dc:	dc06      	bgt.n	80184ec <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x37c>
 80184de:	f8a4 90ae 	strh.w	r9, [r4, #174]	@ 0xae
 80184e2:	f8a4 80b2 	strh.w	r8, [r4, #178]	@ 0xb2
 80184e6:	f8b4 20ac 	ldrh.w	r2, [r4, #172]	@ 0xac
 80184ea:	e7ca      	b.n	8018482 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x312>
 80184ec:	4429      	add	r1, r5
 80184ee:	f8a4 60b0 	strh.w	r6, [r4, #176]	@ 0xb0
 80184f2:	f8ad 102e 	strh.w	r1, [sp, #46]	@ 0x2e
 80184f6:	e651      	b.n	801819c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 80184f8:	9805      	ldr	r0, [sp, #20]
 80184fa:	2d06      	cmp	r5, #6
 80184fc:	ebaa 0000 	sub.w	r0, sl, r0
 8018500:	b280      	uxth	r0, r0
 8018502:	fa0f fe80 	sxth.w	lr, r0
 8018506:	d817      	bhi.n	8018538 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3c8>
 8018508:	9b04      	ldr	r3, [sp, #16]
 801850a:	f9b4 10aa 	ldrsh.w	r1, [r4, #170]	@ 0xaa
 801850e:	f8a4 30a4 	strh.w	r3, [r4, #164]	@ 0xa4
 8018512:	1c6b      	adds	r3, r5, #1
 8018514:	f8a4 e0a8 	strh.w	lr, [r4, #168]	@ 0xa8
 8018518:	f8ab 30ec 	strh.w	r3, [fp, #236]	@ 0xec
 801851c:	9b01      	ldr	r3, [sp, #4]
 801851e:	9801      	ldr	r0, [sp, #4]
 8018520:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8018524:	f820 9035 	strh.w	r9, [r0, r5, lsl #3]
 8018528:	805a      	strh	r2, [r3, #2]
 801852a:	809e      	strh	r6, [r3, #4]
 801852c:	80d9      	strh	r1, [r3, #6]
 801852e:	9b02      	ldr	r3, [sp, #8]
 8018530:	3c08      	subs	r4, #8
 8018532:	3b01      	subs	r3, #1
 8018534:	9302      	str	r3, [sp, #8]
 8018536:	e747      	b.n	80183c8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x258>
 8018538:	9a02      	ldr	r2, [sp, #8]
 801853a:	45b6      	cmp	lr, r6
 801853c:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8018540:	db0d      	blt.n	801855e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3ee>
 8018542:	449c      	add	ip, r3
 8018544:	445a      	add	r2, fp
 8018546:	f8ad 9028 	strh.w	r9, [sp, #40]	@ 0x28
 801854a:	fa1f fc8c 	uxth.w	ip, ip
 801854e:	f8a2 e0b0 	strh.w	lr, [r2, #176]	@ 0xb0
 8018552:	f8ad c02c 	strh.w	ip, [sp, #44]	@ 0x2c
 8018556:	448c      	add	ip, r1
 8018558:	f8a2 c0ac 	strh.w	ip, [r2, #172]	@ 0xac
 801855c:	e61e      	b.n	801819c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 801855e:	445a      	add	r2, fp
 8018560:	4484      	add	ip, r0
 8018562:	f8a2 60b0 	strh.w	r6, [r2, #176]	@ 0xb0
 8018566:	e78f      	b.n	8018488 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x318>
 8018568:	fa1f f18e 	uxth.w	r1, lr
 801856c:	f8bd 602e 	ldrh.w	r6, [sp, #46]	@ 0x2e
 8018570:	b293      	uxth	r3, r2
 8018572:	4596      	cmp	lr, r2
 8018574:	eb01 0806 	add.w	r8, r1, r6
 8018578:	9306      	str	r3, [sp, #24]
 801857a:	fa1f f888 	uxth.w	r8, r8
 801857e:	9f06      	ldr	r7, [sp, #24]
 8018580:	fa0f f388 	sxth.w	r3, r8
 8018584:	9307      	str	r3, [sp, #28]
 8018586:	f8b4 30aa 	ldrh.w	r3, [r4, #170]	@ 0xaa
 801858a:	443b      	add	r3, r7
 801858c:	b29b      	uxth	r3, r3
 801858e:	9308      	str	r3, [sp, #32]
 8018590:	da24      	bge.n	80185dc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x46c>
 8018592:	9905      	ldr	r1, [sp, #20]
 8018594:	eba3 0308 	sub.w	r3, r3, r8
 8018598:	eba2 020e 	sub.w	r2, r2, lr
 801859c:	eba9 0000 	sub.w	r0, r9, r0
 80185a0:	ebaa 0401 	sub.w	r4, sl, r1
 80185a4:	b29b      	uxth	r3, r3
 80185a6:	b2a4      	uxth	r4, r4
 80185a8:	b219      	sxth	r1, r3
 80185aa:	b225      	sxth	r5, r4
 80185ac:	4348      	muls	r0, r1
 80185ae:	436a      	muls	r2, r5
 80185b0:	4282      	cmp	r2, r0
 80185b2:	9a02      	ldr	r2, [sp, #8]
 80185b4:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80185b8:	445a      	add	r2, fp
 80185ba:	dc06      	bgt.n	80185ca <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x45a>
 80185bc:	9b07      	ldr	r3, [sp, #28]
 80185be:	44a4      	add	ip, r4
 80185c0:	f8a2 10b2 	strh.w	r1, [r2, #178]	@ 0xb2
 80185c4:	f8a2 30ae 	strh.w	r3, [r2, #174]	@ 0xae
 80185c8:	e75e      	b.n	8018488 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x318>
 80185ca:	9904      	ldr	r1, [sp, #16]
 80185cc:	f8a2 50b0 	strh.w	r5, [r2, #176]	@ 0xb0
 80185d0:	f8a2 10ac 	strh.w	r1, [r2, #172]	@ 0xac
 80185d4:	4433      	add	r3, r6
 80185d6:	f8ad 302e 	strh.w	r3, [sp, #46]	@ 0x2e
 80185da:	e5df      	b.n	801819c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 80185dc:	9f06      	ldr	r7, [sp, #24]
 80185de:	9b04      	ldr	r3, [sp, #16]
 80185e0:	1bc9      	subs	r1, r1, r7
 80185e2:	fa0f f78a 	sxth.w	r7, sl
 80185e6:	b289      	uxth	r1, r1
 80185e8:	429f      	cmp	r7, r3
 80185ea:	fa0f fe81 	sxth.w	lr, r1
 80185ee:	dd23      	ble.n	8018638 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4c8>
 80185f0:	9a05      	ldr	r2, [sp, #20]
 80185f2:	eba9 0000 	sub.w	r0, r9, r0
 80185f6:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 80185fa:	ebaa 0202 	sub.w	r2, sl, r2
 80185fe:	9d07      	ldr	r5, [sp, #28]
 8018600:	fb0e f000 	mul.w	r0, lr, r0
 8018604:	b292      	uxth	r2, r2
 8018606:	eba5 0a03 	sub.w	sl, r5, r3
 801860a:	9b02      	ldr	r3, [sp, #8]
 801860c:	b214      	sxth	r4, r2
 801860e:	00db      	lsls	r3, r3, #3
 8018610:	fb04 fa0a 	mul.w	sl, r4, sl
 8018614:	445b      	add	r3, fp
 8018616:	4550      	cmp	r0, sl
 8018618:	db03      	blt.n	8018622 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4b2>
 801861a:	f8a3 e0b2 	strh.w	lr, [r3, #178]	@ 0xb2
 801861e:	4494      	add	ip, r2
 8018620:	e732      	b.n	8018488 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x318>
 8018622:	9a04      	ldr	r2, [sp, #16]
 8018624:	4431      	add	r1, r6
 8018626:	f8a3 40b0 	strh.w	r4, [r3, #176]	@ 0xb0
 801862a:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
 801862e:	f8b3 30ae 	ldrh.w	r3, [r3, #174]	@ 0xae
 8018632:	f8ad 302a 	strh.w	r3, [sp, #42]	@ 0x2a
 8018636:	e75c      	b.n	80184f2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x382>
 8018638:	9b08      	ldr	r3, [sp, #32]
 801863a:	2d06      	cmp	r5, #6
 801863c:	eba3 0308 	sub.w	r3, r3, r8
 8018640:	b29b      	uxth	r3, r3
 8018642:	b218      	sxth	r0, r3
 8018644:	d813      	bhi.n	801866e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4fe>
 8018646:	9b07      	ldr	r3, [sp, #28]
 8018648:	f8a4 00aa 	strh.w	r0, [r4, #170]	@ 0xaa
 801864c:	f8a4 30a6 	strh.w	r3, [r4, #166]	@ 0xa6
 8018650:	1c6b      	adds	r3, r5, #1
 8018652:	9901      	ldr	r1, [sp, #4]
 8018654:	f8ab 30ec 	strh.w	r3, [fp, #236]	@ 0xec
 8018658:	9b01      	ldr	r3, [sp, #4]
 801865a:	f821 9035 	strh.w	r9, [r1, r5, lsl #3]
 801865e:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8018662:	805a      	strh	r2, [r3, #2]
 8018664:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8018666:	f8a3 e006 	strh.w	lr, [r3, #6]
 801866a:	809a      	strh	r2, [r3, #4]
 801866c:	e75f      	b.n	801852e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3be>
 801866e:	9c02      	ldr	r4, [sp, #8]
 8018670:	4570      	cmp	r0, lr
 8018672:	ea4f 04c4 	mov.w	r4, r4, lsl #3
 8018676:	db0d      	blt.n	8018694 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x524>
 8018678:	4431      	add	r1, r6
 801867a:	9b06      	ldr	r3, [sp, #24]
 801867c:	445c      	add	r4, fp
 801867e:	f8ad 202a 	strh.w	r2, [sp, #42]	@ 0x2a
 8018682:	b289      	uxth	r1, r1
 8018684:	f8a4 00b2 	strh.w	r0, [r4, #178]	@ 0xb2
 8018688:	f8ad 102e 	strh.w	r1, [sp, #46]	@ 0x2e
 801868c:	4419      	add	r1, r3
 801868e:	f8a4 10ae 	strh.w	r1, [r4, #174]	@ 0xae
 8018692:	e583      	b.n	801819c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 8018694:	445c      	add	r4, fp
 8018696:	f8a4 e0b2 	strh.w	lr, [r4, #178]	@ 0xb2
 801869a:	e79b      	b.n	80185d4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x464>
 801869c:	f8bb 40ec 	ldrh.w	r4, [fp, #236]	@ 0xec
 80186a0:	f64f 76ff 	movw	r6, #65535	@ 0xffff
 80186a4:	1e65      	subs	r5, r4, #1
 80186a6:	eb0b 04c4 	add.w	r4, fp, r4, lsl #3
 80186aa:	b2ad      	uxth	r5, r5
 80186ac:	42b5      	cmp	r5, r6
 80186ae:	d044      	beq.n	801873a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5ca>
 80186b0:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	@ 0x2a
 80186b4:	f9b4 00a6 	ldrsh.w	r0, [r4, #166]	@ 0xa6
 80186b8:	f9bd 1028 	ldrsh.w	r1, [sp, #40]	@ 0x28
 80186bc:	4282      	cmp	r2, r0
 80186be:	f9b4 70a4 	ldrsh.w	r7, [r4, #164]	@ 0xa4
 80186c2:	d11f      	bne.n	8018704 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x594>
 80186c4:	f9bd c02e 	ldrsh.w	ip, [sp, #46]	@ 0x2e
 80186c8:	f9b4 30aa 	ldrsh.w	r3, [r4, #170]	@ 0xaa
 80186cc:	459c      	cmp	ip, r3
 80186ce:	d119      	bne.n	8018704 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x594>
 80186d0:	f8b4 30a8 	ldrh.w	r3, [r4, #168]	@ 0xa8
 80186d4:	f8bd 202c 	ldrh.w	r2, [sp, #44]	@ 0x2c
 80186d8:	19d8      	adds	r0, r3, r7
 80186da:	b200      	sxth	r0, r0
 80186dc:	4288      	cmp	r0, r1
 80186de:	d109      	bne.n	80186f4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x584>
 80186e0:	f8ad 7028 	strh.w	r7, [sp, #40]	@ 0x28
 80186e4:	4413      	add	r3, r2
 80186e6:	f8ad 302c 	strh.w	r3, [sp, #44]	@ 0x2c
 80186ea:	4629      	mov	r1, r5
 80186ec:	9801      	ldr	r0, [sp, #4]
 80186ee:	f7ff fd2b 	bl	8018148 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 80186f2:	e003      	b.n	80186fc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x58c>
 80186f4:	4411      	add	r1, r2
 80186f6:	b209      	sxth	r1, r1
 80186f8:	42b9      	cmp	r1, r7
 80186fa:	d0f3      	beq.n	80186e4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x574>
 80186fc:	3d01      	subs	r5, #1
 80186fe:	3c08      	subs	r4, #8
 8018700:	b2ad      	uxth	r5, r5
 8018702:	e7d3      	b.n	80186ac <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x53c>
 8018704:	42b9      	cmp	r1, r7
 8018706:	d1f9      	bne.n	80186fc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x58c>
 8018708:	f9bd 102c 	ldrsh.w	r1, [sp, #44]	@ 0x2c
 801870c:	f9b4 30a8 	ldrsh.w	r3, [r4, #168]	@ 0xa8
 8018710:	4299      	cmp	r1, r3
 8018712:	d1f3      	bne.n	80186fc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x58c>
 8018714:	f8b4 30aa 	ldrh.w	r3, [r4, #170]	@ 0xaa
 8018718:	f8bd 102e 	ldrh.w	r1, [sp, #46]	@ 0x2e
 801871c:	181f      	adds	r7, r3, r0
 801871e:	b23f      	sxth	r7, r7
 8018720:	42ba      	cmp	r2, r7
 8018722:	d105      	bne.n	8018730 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5c0>
 8018724:	f8ad 002a 	strh.w	r0, [sp, #42]	@ 0x2a
 8018728:	440b      	add	r3, r1
 801872a:	f8ad 302e 	strh.w	r3, [sp, #46]	@ 0x2e
 801872e:	e7dc      	b.n	80186ea <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x57a>
 8018730:	440a      	add	r2, r1
 8018732:	b212      	sxth	r2, r2
 8018734:	4290      	cmp	r0, r2
 8018736:	d1e1      	bne.n	80186fc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x58c>
 8018738:	e7f6      	b.n	8018728 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5b8>
 801873a:	f8bb 60ec 	ldrh.w	r6, [fp, #236]	@ 0xec
 801873e:	2e07      	cmp	r6, #7
 8018740:	ea4f 04c6 	mov.w	r4, r6, lsl #3
 8018744:	d812      	bhi.n	801876c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5fc>
 8018746:	1c75      	adds	r5, r6, #1
 8018748:	f9bd 0028 	ldrsh.w	r0, [sp, #40]	@ 0x28
 801874c:	f9bd 102a 	ldrsh.w	r1, [sp, #42]	@ 0x2a
 8018750:	f8ab 50ec 	strh.w	r5, [fp, #236]	@ 0xec
 8018754:	9d01      	ldr	r5, [sp, #4]
 8018756:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	@ 0x2c
 801875a:	442c      	add	r4, r5
 801875c:	f9bd 302e 	ldrsh.w	r3, [sp, #46]	@ 0x2e
 8018760:	f825 0036 	strh.w	r0, [r5, r6, lsl #3]
 8018764:	8061      	strh	r1, [r4, #2]
 8018766:	80a2      	strh	r2, [r4, #4]
 8018768:	80e3      	strh	r3, [r4, #6]
 801876a:	e581      	b.n	8018270 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 801876c:	f10b 03ac 	add.w	r3, fp, #172	@ 0xac
 8018770:	3e01      	subs	r6, #1
 8018772:	445c      	add	r4, fp
 8018774:	f06f 4a00 	mvn.w	sl, #2147483648	@ 0x80000000
 8018778:	f04f 37ff 	mov.w	r7, #4294967295
 801877c:	2500      	movs	r5, #0
 801877e:	9305      	str	r3, [sp, #20]
 8018780:	f9b4 30a8 	ldrsh.w	r3, [r4, #168]	@ 0xa8
 8018784:	1e72      	subs	r2, r6, #1
 8018786:	9302      	str	r3, [sp, #8]
 8018788:	4691      	mov	r9, r2
 801878a:	f9b4 30aa 	ldrsh.w	r3, [r4, #170]	@ 0xaa
 801878e:	9304      	str	r3, [sp, #16]
 8018790:	f104 03a4 	add.w	r3, r4, #164	@ 0xa4
 8018794:	f1b9 3fff 	cmp.w	r9, #4294967295
 8018798:	6818      	ldr	r0, [r3, #0]
 801879a:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 801879e:	9207      	str	r2, [sp, #28]
 80187a0:	bf16      	itet	ne
 80187a2:	9905      	ldrne	r1, [sp, #20]
 80187a4:	f8dd e00c 	ldreq.w	lr, [sp, #12]
 80187a8:	eb01 0ec9 	addne.w	lr, r1, r9, lsl #3
 80187ac:	9306      	str	r3, [sp, #24]
 80187ae:	f8be 1006 	ldrh.w	r1, [lr, #6]
 80187b2:	f8be 8004 	ldrh.w	r8, [lr, #4]
 80187b6:	fb18 f801 	smulbb	r8, r8, r1
 80187ba:	6859      	ldr	r1, [r3, #4]
 80187bc:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 80187c0:	4671      	mov	r1, lr
 80187c2:	a80c      	add	r0, sp, #48	@ 0x30
 80187c4:	f7ff faf8 	bl	8017db8 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 80187c8:	f8bd 1036 	ldrh.w	r1, [sp, #54]	@ 0x36
 80187cc:	f8bd 0034 	ldrh.w	r0, [sp, #52]	@ 0x34
 80187d0:	f04f 0c08 	mov.w	ip, #8
 80187d4:	9b04      	ldr	r3, [sp, #16]
 80187d6:	9a02      	ldr	r2, [sp, #8]
 80187d8:	fb10 f001 	smulbb	r0, r0, r1
 80187dc:	fb02 8803 	mla	r8, r2, r3, r8
 80187e0:	eba0 0108 	sub.w	r1, r0, r8
 80187e4:	fb90 f0fc 	sdiv	r0, r0, ip
 80187e8:	4288      	cmp	r0, r1
 80187ea:	dc20      	bgt.n	801882e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6be>
 80187ec:	4551      	cmp	r1, sl
 80187ee:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 80187f2:	da03      	bge.n	80187fc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x68c>
 80187f4:	b1d9      	cbz	r1, 801882e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6be>
 80187f6:	468a      	mov	sl, r1
 80187f8:	464f      	mov	r7, r9
 80187fa:	4635      	mov	r5, r6
 80187fc:	f109 39ff 	add.w	r9, r9, #4294967295
 8018800:	f119 0f02 	cmn.w	r9, #2
 8018804:	d1c6      	bne.n	8018794 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x624>
 8018806:	4616      	mov	r6, r2
 8018808:	3201      	adds	r2, #1
 801880a:	f1a4 0408 	sub.w	r4, r4, #8
 801880e:	d1b7      	bne.n	8018780 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x610>
 8018810:	9b01      	ldr	r3, [sp, #4]
 8018812:	b2ac      	uxth	r4, r5
 8018814:	00ed      	lsls	r5, r5, #3
 8018816:	1958      	adds	r0, r3, r5
 8018818:	1c7b      	adds	r3, r7, #1
 801881a:	d10b      	bne.n	8018834 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6c4>
 801881c:	4601      	mov	r1, r0
 801881e:	9803      	ldr	r0, [sp, #12]
 8018820:	f7ff faca 	bl	8017db8 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 8018824:	4621      	mov	r1, r4
 8018826:	9801      	ldr	r0, [sp, #4]
 8018828:	f7ff fc8e 	bl	8018148 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801882c:	e4b6      	b.n	801819c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 801882e:	464f      	mov	r7, r9
 8018830:	4635      	mov	r5, r6
 8018832:	e7ed      	b.n	8018810 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6a0>
 8018834:	9b01      	ldr	r3, [sp, #4]
 8018836:	00ff      	lsls	r7, r7, #3
 8018838:	445d      	add	r5, fp
 801883a:	19d9      	adds	r1, r3, r7
 801883c:	445f      	add	r7, fp
 801883e:	f7ff fabb 	bl	8017db8 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 8018842:	9b03      	ldr	r3, [sp, #12]
 8018844:	cb03      	ldmia	r3!, {r0, r1}
 8018846:	9b03      	ldr	r3, [sp, #12]
 8018848:	f8c7 00ac 	str.w	r0, [r7, #172]	@ 0xac
 801884c:	f8c7 10b0 	str.w	r1, [r7, #176]	@ 0xb0
 8018850:	f855 0fac 	ldr.w	r0, [r5, #172]!
 8018854:	6869      	ldr	r1, [r5, #4]
 8018856:	c303      	stmia	r3!, {r0, r1}
 8018858:	e7e4      	b.n	8018824 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6b4>
 801885a:	bf00      	nop

0801885c <_ZN8touchgfx11Application15drawCachedAreasEv>:
 801885c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018860:	f500 7698 	add.w	r6, r0, #304	@ 0x130
 8018864:	b09b      	sub	sp, #108	@ 0x6c
 8018866:	4604      	mov	r4, r0
 8018868:	4630      	mov	r0, r6
 801886a:	f7f7 fb8c 	bl	800ff86 <_ZNK8touchgfx4Rect7isEmptyEv>
 801886e:	4605      	mov	r5, r0
 8018870:	b948      	cbnz	r0, 8018886 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2a>
 8018872:	6823      	ldr	r3, [r4, #0]
 8018874:	4620      	mov	r0, r4
 8018876:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8018878:	e896 0006 	ldmia.w	r6, {r1, r2}
 801887c:	4798      	blx	r3
 801887e:	f8c4 5130 	str.w	r5, [r4, #304]	@ 0x130
 8018882:	f8c4 5134 	str.w	r5, [r4, #308]	@ 0x134
 8018886:	4bc5      	ldr	r3, [pc, #788]	@ (8018b9c <_ZN8touchgfx11Application15drawCachedAreasEv+0x340>)
 8018888:	681b      	ldr	r3, [r3, #0]
 801888a:	2b00      	cmp	r3, #0
 801888c:	d03f      	beq.n	801890e <_ZN8touchgfx11Application15drawCachedAreasEv+0xb2>
 801888e:	4dc4      	ldr	r5, [pc, #784]	@ (8018ba0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x344>)
 8018890:	4628      	mov	r0, r5
 8018892:	f7f7 fb78 	bl	800ff86 <_ZNK8touchgfx4Rect7isEmptyEv>
 8018896:	4606      	mov	r6, r0
 8018898:	2800      	cmp	r0, #0
 801889a:	d138      	bne.n	801890e <_ZN8touchgfx11Application15drawCachedAreasEv+0xb2>
 801889c:	4628      	mov	r0, r5
 801889e:	f7ff f903 	bl	8017aa8 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 80188a2:	6823      	ldr	r3, [r4, #0]
 80188a4:	6829      	ldr	r1, [r5, #0]
 80188a6:	4620      	mov	r0, r4
 80188a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80188aa:	686a      	ldr	r2, [r5, #4]
 80188ac:	4798      	blx	r3
 80188ae:	802e      	strh	r6, [r5, #0]
 80188b0:	806e      	strh	r6, [r5, #2]
 80188b2:	80ae      	strh	r6, [r5, #4]
 80188b4:	80ee      	strh	r6, [r5, #6]
 80188b6:	f10d 0824 	add.w	r8, sp, #36	@ 0x24
 80188ba:	4dba      	ldr	r5, [pc, #744]	@ (8018ba4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x348>)
 80188bc:	4640      	mov	r0, r8
 80188be:	f7ff fbe8 	bl	8018092 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 80188c2:	882e      	ldrh	r6, [r5, #0]
 80188c4:	f8b4 70ec 	ldrh.w	r7, [r4, #236]	@ 0xec
 80188c8:	f104 00ac 	add.w	r0, r4, #172	@ 0xac
 80188cc:	4633      	mov	r3, r6
 80188ce:	42bb      	cmp	r3, r7
 80188d0:	d224      	bcs.n	801891c <_ZN8touchgfx11Application15drawCachedAreasEv+0xc0>
 80188d2:	f8bd 1064 	ldrh.w	r1, [sp, #100]	@ 0x64
 80188d6:	2907      	cmp	r1, #7
 80188d8:	d816      	bhi.n	8018908 <_ZN8touchgfx11Application15drawCachedAreasEv+0xac>
 80188da:	eb00 02c3 	add.w	r2, r0, r3, lsl #3
 80188de:	f930 9033 	ldrsh.w	r9, [r0, r3, lsl #3]
 80188e2:	f9b2 a002 	ldrsh.w	sl, [r2, #2]
 80188e6:	f9b2 e004 	ldrsh.w	lr, [r2, #4]
 80188ea:	f9b2 c006 	ldrsh.w	ip, [r2, #6]
 80188ee:	1c4a      	adds	r2, r1, #1
 80188f0:	f8ad 2064 	strh.w	r2, [sp, #100]	@ 0x64
 80188f4:	eb08 02c1 	add.w	r2, r8, r1, lsl #3
 80188f8:	f828 9031 	strh.w	r9, [r8, r1, lsl #3]
 80188fc:	f8a2 a002 	strh.w	sl, [r2, #2]
 8018900:	f8a2 e004 	strh.w	lr, [r2, #4]
 8018904:	f8a2 c006 	strh.w	ip, [r2, #6]
 8018908:	3301      	adds	r3, #1
 801890a:	b29b      	uxth	r3, r3
 801890c:	e7df      	b.n	80188ce <_ZN8touchgfx11Application15drawCachedAreasEv+0x72>
 801890e:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	@ 0xec
 8018912:	2b00      	cmp	r3, #0
 8018914:	d1cf      	bne.n	80188b6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x5a>
 8018916:	b01b      	add	sp, #108	@ 0x6c
 8018918:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801891c:	f8b4 312e 	ldrh.w	r3, [r4, #302]	@ 0x12e
 8018920:	42b3      	cmp	r3, r6
 8018922:	d90c      	bls.n	801893e <_ZN8touchgfx11Application15drawCachedAreasEv+0xe2>
 8018924:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
 8018928:	6822      	ldr	r2, [r4, #0]
 801892a:	3601      	adds	r6, #1
 801892c:	4620      	mov	r0, r4
 801892e:	6c17      	ldr	r7, [r2, #64]	@ 0x40
 8018930:	f8d3 10ee 	ldr.w	r1, [r3, #238]	@ 0xee
 8018934:	b2b6      	uxth	r6, r6
 8018936:	f8d3 20f2 	ldr.w	r2, [r3, #242]	@ 0xf2
 801893a:	47b8      	blx	r7
 801893c:	e7ee      	b.n	801891c <_ZN8touchgfx11Application15drawCachedAreasEv+0xc0>
 801893e:	4a9a      	ldr	r2, [pc, #616]	@ (8018ba8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x34c>)
 8018940:	6813      	ldr	r3, [r2, #0]
 8018942:	4691      	mov	r9, r2
 8018944:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8018948:	2b01      	cmp	r3, #1
 801894a:	f040 80e0 	bne.w	8018b0e <_ZN8touchgfx11Application15drawCachedAreasEv+0x2b2>
 801894e:	8829      	ldrh	r1, [r5, #0]
 8018950:	2600      	movs	r6, #0
 8018952:	f8b4 70ec 	ldrh.w	r7, [r4, #236]	@ 0xec
 8018956:	eb04 03c1 	add.w	r3, r4, r1, lsl #3
 801895a:	33ae      	adds	r3, #174	@ 0xae
 801895c:	428f      	cmp	r7, r1
 801895e:	f103 0308 	add.w	r3, r3, #8
 8018962:	dd0a      	ble.n	801897a <_ZN8touchgfx11Application15drawCachedAreasEv+0x11e>
 8018964:	f833 2c04 	ldrh.w	r2, [r3, #-4]
 8018968:	3101      	adds	r1, #1
 801896a:	f833 0c08 	ldrh.w	r0, [r3, #-8]
 801896e:	4402      	add	r2, r0
 8018970:	b212      	sxth	r2, r2
 8018972:	4296      	cmp	r6, r2
 8018974:	bfb8      	it	lt
 8018976:	4616      	movlt	r6, r2
 8018978:	e7f0      	b.n	801895c <_ZN8touchgfx11Application15drawCachedAreasEv+0x100>
 801897a:	4b8c      	ldr	r3, [pc, #560]	@ (8018bac <_ZN8touchgfx11Application15drawCachedAreasEv+0x350>)
 801897c:	f8df 9228 	ldr.w	r9, [pc, #552]	@ 8018ba8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x34c>
 8018980:	881b      	ldrh	r3, [r3, #0]
 8018982:	2b0f      	cmp	r3, #15
 8018984:	bf8c      	ite	hi
 8018986:	ea4f 0bd3 	movhi.w	fp, r3, lsr #3
 801898a:	f04f 0b01 	movls.w	fp, #1
 801898e:	2300      	movs	r3, #0
 8018990:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8018994:	f8bd 7016 	ldrh.w	r7, [sp, #22]
 8018998:	f8bd 001a 	ldrh.w	r0, [sp, #26]
 801899c:	4b82      	ldr	r3, [pc, #520]	@ (8018ba8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x34c>)
 801899e:	4438      	add	r0, r7
 80189a0:	b207      	sxth	r7, r0
 80189a2:	6818      	ldr	r0, [r3, #0]
 80189a4:	42b7      	cmp	r7, r6
 80189a6:	6803      	ldr	r3, [r0, #0]
 80189a8:	f280 8083 	bge.w	8018ab2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x256>
 80189ac:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80189b0:	4798      	blx	r3
 80189b2:	eb07 030b 	add.w	r3, r7, fp
 80189b6:	4298      	cmp	r0, r3
 80189b8:	da07      	bge.n	80189ca <_ZN8touchgfx11Application15drawCachedAreasEv+0x16e>
 80189ba:	42b0      	cmp	r0, r6
 80189bc:	da05      	bge.n	80189ca <_ZN8touchgfx11Application15drawCachedAreasEv+0x16e>
 80189be:	4287      	cmp	r7, r0
 80189c0:	dd6c      	ble.n	8018a9c <_ZN8touchgfx11Application15drawCachedAreasEv+0x240>
 80189c2:	2f00      	cmp	r7, #0
 80189c4:	dd6a      	ble.n	8018a9c <_ZN8touchgfx11Application15drawCachedAreasEv+0x240>
 80189c6:	4630      	mov	r0, r6
 80189c8:	e004      	b.n	80189d4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x178>
 80189ca:	4287      	cmp	r7, r0
 80189cc:	dcfb      	bgt.n	80189c6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x16a>
 80189ce:	42b0      	cmp	r0, r6
 80189d0:	bfa8      	it	ge
 80189d2:	4630      	movge	r0, r6
 80189d4:	4b76      	ldr	r3, [pc, #472]	@ (8018bb0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x354>)
 80189d6:	1bc0      	subs	r0, r0, r7
 80189d8:	2200      	movs	r2, #0
 80189da:	f8ad 7016 	strh.w	r7, [sp, #22]
 80189de:	f9b3 3000 	ldrsh.w	r3, [r3]
 80189e2:	882f      	ldrh	r7, [r5, #0]
 80189e4:	f8ad 2014 	strh.w	r2, [sp, #20]
 80189e8:	f8ad 3018 	strh.w	r3, [sp, #24]
 80189ec:	f8ad 001a 	strh.w	r0, [sp, #26]
 80189f0:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	@ 0xec
 80189f4:	42bb      	cmp	r3, r7
 80189f6:	d9cd      	bls.n	8018994 <_ZN8touchgfx11Application15drawCachedAreasEv+0x138>
 80189f8:	eb04 02c7 	add.w	r2, r4, r7, lsl #3
 80189fc:	ab07      	add	r3, sp, #28
 80189fe:	f852 0fac 	ldr.w	r0, [r2, #172]!
 8018a02:	6851      	ldr	r1, [r2, #4]
 8018a04:	c303      	stmia	r3!, {r0, r1}
 8018a06:	a905      	add	r1, sp, #20
 8018a08:	a807      	add	r0, sp, #28
 8018a0a:	f7ff f93c 	bl	8017c86 <_ZNK8touchgfx4Rect9intersectERKS0_>
 8018a0e:	2800      	cmp	r0, #0
 8018a10:	d04c      	beq.n	8018aac <_ZN8touchgfx11Application15drawCachedAreasEv+0x250>
 8018a12:	f9bd 001c 	ldrsh.w	r0, [sp, #28]
 8018a16:	f9bd 2014 	ldrsh.w	r2, [sp, #20]
 8018a1a:	f8bd a020 	ldrh.w	sl, [sp, #32]
 8018a1e:	4686      	mov	lr, r0
 8018a20:	4290      	cmp	r0, r2
 8018a22:	f9bd 101e 	ldrsh.w	r1, [sp, #30]
 8018a26:	4450      	add	r0, sl
 8018a28:	f8bd a018 	ldrh.w	sl, [sp, #24]
 8018a2c:	bfb8      	it	lt
 8018a2e:	4696      	movlt	lr, r2
 8018a30:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 8018a34:	4452      	add	r2, sl
 8018a36:	b280      	uxth	r0, r0
 8018a38:	4299      	cmp	r1, r3
 8018a3a:	468c      	mov	ip, r1
 8018a3c:	b292      	uxth	r2, r2
 8018a3e:	9302      	str	r3, [sp, #8]
 8018a40:	bfb8      	it	lt
 8018a42:	469c      	movlt	ip, r3
 8018a44:	b203      	sxth	r3, r0
 8018a46:	fa0f fa82 	sxth.w	sl, r2
 8018a4a:	f8ad e01c 	strh.w	lr, [sp, #28]
 8018a4e:	f8ad c01e 	strh.w	ip, [sp, #30]
 8018a52:	4553      	cmp	r3, sl
 8018a54:	bfb8      	it	lt
 8018a56:	4602      	movlt	r2, r0
 8018a58:	9b02      	ldr	r3, [sp, #8]
 8018a5a:	eba2 020e 	sub.w	r2, r2, lr
 8018a5e:	f8ad 2020 	strh.w	r2, [sp, #32]
 8018a62:	f8bd 2022 	ldrh.w	r2, [sp, #34]	@ 0x22
 8018a66:	4411      	add	r1, r2
 8018a68:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 8018a6c:	4413      	add	r3, r2
 8018a6e:	b289      	uxth	r1, r1
 8018a70:	b29b      	uxth	r3, r3
 8018a72:	b208      	sxth	r0, r1
 8018a74:	b21a      	sxth	r2, r3
 8018a76:	4290      	cmp	r0, r2
 8018a78:	bfb8      	it	lt
 8018a7a:	460b      	movlt	r3, r1
 8018a7c:	eba3 030c 	sub.w	r3, r3, ip
 8018a80:	f8ad 3022 	strh.w	r3, [sp, #34]	@ 0x22
 8018a84:	a807      	add	r0, sp, #28
 8018a86:	f7f7 fa7e 	bl	800ff86 <_ZNK8touchgfx4Rect7isEmptyEv>
 8018a8a:	b920      	cbnz	r0, 8018a96 <_ZN8touchgfx11Application15drawCachedAreasEv+0x23a>
 8018a8c:	6823      	ldr	r3, [r4, #0]
 8018a8e:	a907      	add	r1, sp, #28
 8018a90:	4620      	mov	r0, r4
 8018a92:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8018a94:	4798      	blx	r3
 8018a96:	3701      	adds	r7, #1
 8018a98:	b2bf      	uxth	r7, r7
 8018a9a:	e7a9      	b.n	80189f0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x194>
 8018a9c:	f8d9 0000 	ldr.w	r0, [r9]
 8018aa0:	2101      	movs	r1, #1
 8018aa2:	6803      	ldr	r3, [r0, #0]
 8018aa4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8018aa8:	4798      	blx	r3
 8018aaa:	e773      	b.n	8018994 <_ZN8touchgfx11Application15drawCachedAreasEv+0x138>
 8018aac:	e9cd 0007 	strd	r0, r0, [sp, #28]
 8018ab0:	e7e8      	b.n	8018a84 <_ZN8touchgfx11Application15drawCachedAreasEv+0x228>
 8018ab2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018ab4:	4798      	blx	r3
 8018ab6:	4b3f      	ldr	r3, [pc, #252]	@ (8018bb4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x358>)
 8018ab8:	781b      	ldrb	r3, [r3, #0]
 8018aba:	2b00      	cmp	r3, #0
 8018abc:	f43f af2b 	beq.w	8018916 <_ZN8touchgfx11Application15drawCachedAreasEv+0xba>
 8018ac0:	2300      	movs	r3, #0
 8018ac2:	f104 00ee 	add.w	r0, r4, #238	@ 0xee
 8018ac6:	f8a4 312e 	strh.w	r3, [r4, #302]	@ 0x12e
 8018aca:	882b      	ldrh	r3, [r5, #0]
 8018acc:	f8bd 5064 	ldrh.w	r5, [sp, #100]	@ 0x64
 8018ad0:	42ab      	cmp	r3, r5
 8018ad2:	f4bf af20 	bcs.w	8018916 <_ZN8touchgfx11Application15drawCachedAreasEv+0xba>
 8018ad6:	f8b4 112e 	ldrh.w	r1, [r4, #302]	@ 0x12e
 8018ada:	2907      	cmp	r1, #7
 8018adc:	d814      	bhi.n	8018b08 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2ac>
 8018ade:	eb08 02c3 	add.w	r2, r8, r3, lsl #3
 8018ae2:	f938 e033 	ldrsh.w	lr, [r8, r3, lsl #3]
 8018ae6:	f9b2 c002 	ldrsh.w	ip, [r2, #2]
 8018aea:	f9b2 7004 	ldrsh.w	r7, [r2, #4]
 8018aee:	f9b2 6006 	ldrsh.w	r6, [r2, #6]
 8018af2:	1c4a      	adds	r2, r1, #1
 8018af4:	f8a4 212e 	strh.w	r2, [r4, #302]	@ 0x12e
 8018af8:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
 8018afc:	f820 e031 	strh.w	lr, [r0, r1, lsl #3]
 8018b00:	f8a2 c002 	strh.w	ip, [r2, #2]
 8018b04:	8097      	strh	r7, [r2, #4]
 8018b06:	80d6      	strh	r6, [r2, #6]
 8018b08:	3301      	adds	r3, #1
 8018b0a:	b29b      	uxth	r3, r3
 8018b0c:	e7e0      	b.n	8018ad0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x274>
 8018b0e:	2b02      	cmp	r3, #2
 8018b10:	f040 8133 	bne.w	8018d7a <_ZN8touchgfx11Application15drawCachedAreasEv+0x51e>
 8018b14:	4b28      	ldr	r3, [pc, #160]	@ (8018bb8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x35c>)
 8018b16:	f104 0aac 	add.w	sl, r4, #172	@ 0xac
 8018b1a:	781b      	ldrb	r3, [r3, #0]
 8018b1c:	2b01      	cmp	r3, #1
 8018b1e:	f000 8098 	beq.w	8018c52 <_ZN8touchgfx11Application15drawCachedAreasEv+0x3f6>
 8018b22:	882a      	ldrh	r2, [r5, #0]
 8018b24:	f8b4 10ec 	ldrh.w	r1, [r4, #236]	@ 0xec
 8018b28:	3201      	adds	r2, #1
 8018b2a:	b292      	uxth	r2, r2
 8018b2c:	2900      	cmp	r1, #0
 8018b2e:	d0c2      	beq.n	8018ab6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x25a>
 8018b30:	f8b4 60ae 	ldrh.w	r6, [r4, #174]	@ 0xae
 8018b34:	4694      	mov	ip, r2
 8018b36:	f8b4 30b2 	ldrh.w	r3, [r4, #178]	@ 0xb2
 8018b3a:	f04f 0900 	mov.w	r9, #0
 8018b3e:	441e      	add	r6, r3
 8018b40:	b236      	sxth	r6, r6
 8018b42:	fa1f f38c 	uxth.w	r3, ip
 8018b46:	ea4f 07c9 	mov.w	r7, r9, lsl #3
 8018b4a:	4299      	cmp	r1, r3
 8018b4c:	f240 80be 	bls.w	8018ccc <_ZN8touchgfx11Application15drawCachedAreasEv+0x470>
 8018b50:	4427      	add	r7, r4
 8018b52:	eb04 0ecc 	add.w	lr, r4, ip, lsl #3
 8018b56:	f9b7 30ae 	ldrsh.w	r3, [r7, #174]	@ 0xae
 8018b5a:	f9be 00ae 	ldrsh.w	r0, [lr, #174]	@ 0xae
 8018b5e:	4283      	cmp	r3, r0
 8018b60:	f340 80a0 	ble.w	8018ca4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x448>
 8018b64:	f8be 60b2 	ldrh.w	r6, [lr, #178]	@ 0xb2
 8018b68:	46e1      	mov	r9, ip
 8018b6a:	4406      	add	r6, r0
 8018b6c:	b236      	sxth	r6, r6
 8018b6e:	429e      	cmp	r6, r3
 8018b70:	bfa8      	it	ge
 8018b72:	461e      	movge	r6, r3
 8018b74:	f10c 0c01 	add.w	ip, ip, #1
 8018b78:	e7e3      	b.n	8018b42 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2e6>
 8018b7a:	d10a      	bne.n	8018b92 <_ZN8touchgfx11Application15drawCachedAreasEv+0x336>
 8018b7c:	4562      	cmp	r2, ip
 8018b7e:	f9b6 00b2 	ldrsh.w	r0, [r6, #178]	@ 0xb2
 8018b82:	f9be 10b2 	ldrsh.w	r1, [lr, #178]	@ 0xb2
 8018b86:	bfb8      	it	lt
 8018b88:	4662      	movlt	r2, ip
 8018b8a:	4288      	cmp	r0, r1
 8018b8c:	bfb8      	it	lt
 8018b8e:	461f      	movlt	r7, r3
 8018b90:	e086      	b.n	8018ca0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x444>
 8018b92:	428a      	cmp	r2, r1
 8018b94:	bfb8      	it	lt
 8018b96:	460a      	movlt	r2, r1
 8018b98:	e082      	b.n	8018ca0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x444>
 8018b9a:	bf00      	nop
 8018b9c:	24028e60 	.word	0x24028e60
 8018ba0:	24028e6c 	.word	0x24028e6c
 8018ba4:	2400007c 	.word	0x2400007c
 8018ba8:	24028e20 	.word	0x24028e20
 8018bac:	24028e16 	.word	0x24028e16
 8018bb0:	24028e14 	.word	0x24028e14
 8018bb4:	24028e1e 	.word	0x24028e1e
 8018bb8:	24028e18 	.word	0x24028e18
 8018bbc:	19a1      	adds	r1, r4, r6
 8018bbe:	ab07      	add	r3, sp, #28
 8018bc0:	f851 0fac 	ldr.w	r0, [r1, #172]!
 8018bc4:	6849      	ldr	r1, [r1, #4]
 8018bc6:	c303      	stmia	r3!, {r0, r1}
 8018bc8:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 8018bcc:	a807      	add	r0, sp, #28
 8018bce:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 8018bd2:	2b13      	cmp	r3, #19
 8018bd4:	440b      	add	r3, r1
 8018bd6:	bfd8      	it	le
 8018bd8:	f9bd 201c 	ldrshle.w	r2, [sp, #28]
 8018bdc:	1a9b      	subs	r3, r3, r2
 8018bde:	f8ad 201c 	strh.w	r2, [sp, #28]
 8018be2:	f8ad 3020 	strh.w	r3, [sp, #32]
 8018be6:	f7fe ff79 	bl	8017adc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8018bea:	a807      	add	r0, sp, #28
 8018bec:	f7f7 f9cb 	bl	800ff86 <_ZNK8touchgfx4Rect7isEmptyEv>
 8018bf0:	bb78      	cbnz	r0, 8018c52 <_ZN8touchgfx11Application15drawCachedAreasEv+0x3f6>
 8018bf2:	f9bd c022 	ldrsh.w	ip, [sp, #34]	@ 0x22
 8018bf6:	4426      	add	r6, r4
 8018bf8:	f8d9 0000 	ldr.w	r0, [r9]
 8018bfc:	f1bc 0f14 	cmp.w	ip, #20
 8018c00:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8018c04:	f8d0 e000 	ldr.w	lr, [r0]
 8018c08:	bfa8      	it	ge
 8018c0a:	f04f 0c14 	movge.w	ip, #20
 8018c0e:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 8018c12:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 8018c16:	fa1f fc8c 	uxth.w	ip, ip
 8018c1a:	f8cd c000 	str.w	ip, [sp]
 8018c1e:	f8de b090 	ldr.w	fp, [lr, #144]	@ 0x90
 8018c22:	47d8      	blx	fp
 8018c24:	4683      	mov	fp, r0
 8018c26:	f8ad 0022 	strh.w	r0, [sp, #34]	@ 0x22
 8018c2a:	a807      	add	r0, sp, #28
 8018c2c:	f7fe ff3c 	bl	8017aa8 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 8018c30:	6823      	ldr	r3, [r4, #0]
 8018c32:	4620      	mov	r0, r4
 8018c34:	a907      	add	r1, sp, #28
 8018c36:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8018c38:	4798      	blx	r3
 8018c3a:	f8b6 00b0 	ldrh.w	r0, [r6, #176]	@ 0xb0
 8018c3e:	eba0 000b 	sub.w	r0, r0, fp
 8018c42:	b200      	sxth	r0, r0
 8018c44:	f8a6 00b0 	strh.w	r0, [r6, #176]	@ 0xb0
 8018c48:	b918      	cbnz	r0, 8018c52 <_ZN8touchgfx11Application15drawCachedAreasEv+0x3f6>
 8018c4a:	b2b9      	uxth	r1, r7
 8018c4c:	4650      	mov	r0, sl
 8018c4e:	f7ff fa7b 	bl	8018148 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8018c52:	f8b4 b0ec 	ldrh.w	fp, [r4, #236]	@ 0xec
 8018c56:	f1bb 0f00 	cmp.w	fp, #0
 8018c5a:	f43f af2c 	beq.w	8018ab6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x25a>
 8018c5e:	882b      	ldrh	r3, [r5, #0]
 8018c60:	2700      	movs	r7, #0
 8018c62:	f9b4 20ac 	ldrsh.w	r2, [r4, #172]	@ 0xac
 8018c66:	3301      	adds	r3, #1
 8018c68:	b29b      	uxth	r3, r3
 8018c6a:	b299      	uxth	r1, r3
 8018c6c:	00fe      	lsls	r6, r7, #3
 8018c6e:	458b      	cmp	fp, r1
 8018c70:	d9a4      	bls.n	8018bbc <_ZN8touchgfx11Application15drawCachedAreasEv+0x360>
 8018c72:	4426      	add	r6, r4
 8018c74:	eb04 0ec3 	add.w	lr, r4, r3, lsl #3
 8018c78:	f8b6 10ac 	ldrh.w	r1, [r6, #172]	@ 0xac
 8018c7c:	f8b6 00b0 	ldrh.w	r0, [r6, #176]	@ 0xb0
 8018c80:	f9be c0ac 	ldrsh.w	ip, [lr, #172]	@ 0xac
 8018c84:	4408      	add	r0, r1
 8018c86:	f8be 10b0 	ldrh.w	r1, [lr, #176]	@ 0xb0
 8018c8a:	4461      	add	r1, ip
 8018c8c:	b200      	sxth	r0, r0
 8018c8e:	b209      	sxth	r1, r1
 8018c90:	4288      	cmp	r0, r1
 8018c92:	f6bf af72 	bge.w	8018b7a <_ZN8touchgfx11Application15drawCachedAreasEv+0x31e>
 8018c96:	4584      	cmp	ip, r0
 8018c98:	4662      	mov	r2, ip
 8018c9a:	461f      	mov	r7, r3
 8018c9c:	bfb8      	it	lt
 8018c9e:	4602      	movlt	r2, r0
 8018ca0:	3301      	adds	r3, #1
 8018ca2:	e7e2      	b.n	8018c6a <_ZN8touchgfx11Application15drawCachedAreasEv+0x40e>
 8018ca4:	d10e      	bne.n	8018cc4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x468>
 8018ca6:	f9be 00b0 	ldrsh.w	r0, [lr, #176]	@ 0xb0
 8018caa:	f8be e0b2 	ldrh.w	lr, [lr, #178]	@ 0xb2
 8018cae:	f9b7 70b0 	ldrsh.w	r7, [r7, #176]	@ 0xb0
 8018cb2:	4473      	add	r3, lr
 8018cb4:	b21b      	sxth	r3, r3
 8018cb6:	429e      	cmp	r6, r3
 8018cb8:	bfa8      	it	ge
 8018cba:	461e      	movge	r6, r3
 8018cbc:	4287      	cmp	r7, r0
 8018cbe:	bfb8      	it	lt
 8018cc0:	46e1      	movlt	r9, ip
 8018cc2:	e757      	b.n	8018b74 <_ZN8touchgfx11Application15drawCachedAreasEv+0x318>
 8018cc4:	4286      	cmp	r6, r0
 8018cc6:	bfa8      	it	ge
 8018cc8:	4606      	movge	r6, r0
 8018cca:	e753      	b.n	8018b74 <_ZN8touchgfx11Application15drawCachedAreasEv+0x318>
 8018ccc:	eb0a 0007 	add.w	r0, sl, r7
 8018cd0:	4427      	add	r7, r4
 8018cd2:	f9b7 b0b2 	ldrsh.w	fp, [r7, #178]	@ 0xb2
 8018cd6:	f1bb 0f13 	cmp.w	fp, #19
 8018cda:	bfdc      	itt	le
 8018cdc:	f8b7 60ae 	ldrhle.w	r6, [r7, #174]	@ 0xae
 8018ce0:	445e      	addle	r6, fp
 8018ce2:	e9cd 2102 	strd	r2, r1, [sp, #8]
 8018ce6:	bfd8      	it	le
 8018ce8:	b236      	sxthle	r6, r6
 8018cea:	f7f7 f94c 	bl	800ff86 <_ZNK8touchgfx4Rect7isEmptyEv>
 8018cee:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8018cf2:	2800      	cmp	r0, #0
 8018cf4:	f47f af1a 	bne.w	8018b2c <_ZN8touchgfx11Application15drawCachedAreasEv+0x2d0>
 8018cf8:	f9b7 20ae 	ldrsh.w	r2, [r7, #174]	@ 0xae
 8018cfc:	fa1f fb8b 	uxth.w	fp, fp
 8018d00:	f8ad 0022 	strh.w	r0, [sp, #34]	@ 0x22
 8018d04:	1ab6      	subs	r6, r6, r2
 8018d06:	4829      	ldr	r0, [pc, #164]	@ (8018dac <_ZN8touchgfx11Application15drawCachedAreasEv+0x550>)
 8018d08:	f9b7 10ac 	ldrsh.w	r1, [r7, #172]	@ 0xac
 8018d0c:	2e14      	cmp	r6, #20
 8018d0e:	f9b7 30b0 	ldrsh.w	r3, [r7, #176]	@ 0xb0
 8018d12:	6800      	ldr	r0, [r0, #0]
 8018d14:	bfa8      	it	ge
 8018d16:	2614      	movge	r6, #20
 8018d18:	f8ad 101c 	strh.w	r1, [sp, #28]
 8018d1c:	f8ad 201e 	strh.w	r2, [sp, #30]
 8018d20:	b289      	uxth	r1, r1
 8018d22:	f8ad 3020 	strh.w	r3, [sp, #32]
 8018d26:	b2b6      	uxth	r6, r6
 8018d28:	f8d0 c000 	ldr.w	ip, [r0]
 8018d2c:	b292      	uxth	r2, r2
 8018d2e:	455e      	cmp	r6, fp
 8018d30:	bf94      	ite	ls
 8018d32:	9600      	strls	r6, [sp, #0]
 8018d34:	f8cd b000 	strhi.w	fp, [sp]
 8018d38:	b29b      	uxth	r3, r3
 8018d3a:	f8dc 6090 	ldr.w	r6, [ip, #144]	@ 0x90
 8018d3e:	47b0      	blx	r6
 8018d40:	6823      	ldr	r3, [r4, #0]
 8018d42:	f8ad 0022 	strh.w	r0, [sp, #34]	@ 0x22
 8018d46:	a907      	add	r1, sp, #28
 8018d48:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8018d4a:	4620      	mov	r0, r4
 8018d4c:	4798      	blx	r3
 8018d4e:	f8bd 1022 	ldrh.w	r1, [sp, #34]	@ 0x22
 8018d52:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 8018d56:	f8b7 20ae 	ldrh.w	r2, [r7, #174]	@ 0xae
 8018d5a:	1a5b      	subs	r3, r3, r1
 8018d5c:	440a      	add	r2, r1
 8018d5e:	b21b      	sxth	r3, r3
 8018d60:	f8a7 20ae 	strh.w	r2, [r7, #174]	@ 0xae
 8018d64:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
 8018d68:	2b00      	cmp	r3, #0
 8018d6a:	f47f aeda 	bne.w	8018b22 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2c6>
 8018d6e:	fa1f f189 	uxth.w	r1, r9
 8018d72:	4650      	mov	r0, sl
 8018d74:	f7ff f9e8 	bl	8018148 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8018d78:	e6d3      	b.n	8018b22 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2c6>
 8018d7a:	882e      	ldrh	r6, [r5, #0]
 8018d7c:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	@ 0xec
 8018d80:	42b3      	cmp	r3, r6
 8018d82:	f67f ae98 	bls.w	8018ab6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x25a>
 8018d86:	eb04 02c6 	add.w	r2, r4, r6, lsl #3
 8018d8a:	ab07      	add	r3, sp, #28
 8018d8c:	f852 0fac 	ldr.w	r0, [r2, #172]!
 8018d90:	6851      	ldr	r1, [r2, #4]
 8018d92:	c303      	stmia	r3!, {r0, r1}
 8018d94:	a807      	add	r0, sp, #28
 8018d96:	f7f7 f8f6 	bl	800ff86 <_ZNK8touchgfx4Rect7isEmptyEv>
 8018d9a:	b920      	cbnz	r0, 8018da6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x54a>
 8018d9c:	6823      	ldr	r3, [r4, #0]
 8018d9e:	a907      	add	r1, sp, #28
 8018da0:	4620      	mov	r0, r4
 8018da2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8018da4:	4798      	blx	r3
 8018da6:	3601      	adds	r6, #1
 8018da8:	b2b6      	uxth	r6, r6
 8018daa:	e7e7      	b.n	8018d7c <_ZN8touchgfx11Application15drawCachedAreasEv+0x520>
 8018dac:	24028e20 	.word	0x24028e20

08018db0 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE>:
 8018db0:	4b03      	ldr	r3, [pc, #12]	@ (8018dc0 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE+0x10>)
 8018db2:	2200      	movs	r2, #0
 8018db4:	801a      	strh	r2, [r3, #0]
 8018db6:	805a      	strh	r2, [r3, #2]
 8018db8:	809a      	strh	r2, [r3, #4]
 8018dba:	80da      	strh	r2, [r3, #6]
 8018dbc:	4770      	bx	lr
 8018dbe:	bf00      	nop
 8018dc0:	24028e6c 	.word	0x24028e6c

08018dc4 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>:
 8018dc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018dc8:	b09d      	sub	sp, #116	@ 0x74
 8018dca:	4606      	mov	r6, r0
 8018dcc:	4614      	mov	r4, r2
 8018dce:	468a      	mov	sl, r1
 8018dd0:	a803      	add	r0, sp, #12
 8018dd2:	461d      	mov	r5, r3
 8018dd4:	f001 fa2e 	bl	801a234 <_ZN8touchgfx12TextProviderC1Ev>
 8018dd8:	6833      	ldr	r3, [r6, #0]
 8018dda:	4630      	mov	r0, r6
 8018ddc:	f242 0b0b 	movw	fp, #8203	@ 0x200b
 8018de0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8018de2:	4798      	blx	r3
 8018de4:	6833      	ldr	r3, [r6, #0]
 8018de6:	4607      	mov	r7, r0
 8018de8:	4630      	mov	r0, r6
 8018dea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8018dec:	4798      	blx	r3
 8018dee:	462a      	mov	r2, r5
 8018df0:	2500      	movs	r5, #0
 8018df2:	4621      	mov	r1, r4
 8018df4:	9000      	str	r0, [sp, #0]
 8018df6:	463b      	mov	r3, r7
 8018df8:	462c      	mov	r4, r5
 8018dfa:	46a9      	mov	r9, r5
 8018dfc:	46a8      	mov	r8, r5
 8018dfe:	a803      	add	r0, sp, #12
 8018e00:	f001 fa73 	bl	801a2ea <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8018e04:	2300      	movs	r3, #0
 8018e06:	9302      	str	r3, [sp, #8]
 8018e08:	f64f 63ff 	movw	r3, #65279	@ 0xfeff
 8018e0c:	429c      	cmp	r4, r3
 8018e0e:	d002      	beq.n	8018e16 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x52>
 8018e10:	455c      	cmp	r4, fp
 8018e12:	bf18      	it	ne
 8018e14:	4625      	movne	r5, r4
 8018e16:	ab02      	add	r3, sp, #8
 8018e18:	4632      	mov	r2, r6
 8018e1a:	4651      	mov	r1, sl
 8018e1c:	a803      	add	r0, sp, #12
 8018e1e:	f001 fd69 	bl	801a8f4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8018e22:	4604      	mov	r4, r0
 8018e24:	b108      	cbz	r0, 8018e2a <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x66>
 8018e26:	280a      	cmp	r0, #10
 8018e28:	d10a      	bne.n	8018e40 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x7c>
 8018e2a:	45c1      	cmp	r9, r8
 8018e2c:	bf38      	it	cc
 8018e2e:	46c1      	movcc	r9, r8
 8018e30:	f04f 0800 	mov.w	r8, #0
 8018e34:	2c00      	cmp	r4, #0
 8018e36:	d1e5      	bne.n	8018e04 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 8018e38:	4648      	mov	r0, r9
 8018e3a:	b01d      	add	sp, #116	@ 0x74
 8018e3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018e40:	9a02      	ldr	r2, [sp, #8]
 8018e42:	2a00      	cmp	r2, #0
 8018e44:	d0de      	beq.n	8018e04 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 8018e46:	7b57      	ldrb	r7, [r2, #13]
 8018e48:	4629      	mov	r1, r5
 8018e4a:	6833      	ldr	r3, [r6, #0]
 8018e4c:	007f      	lsls	r7, r7, #1
 8018e4e:	8894      	ldrh	r4, [r2, #4]
 8018e50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8018e52:	f407 7080 	and.w	r0, r7, #256	@ 0x100
 8018e56:	7a97      	ldrb	r7, [r2, #10]
 8018e58:	4307      	orrs	r7, r0
 8018e5a:	4630      	mov	r0, r6
 8018e5c:	4798      	blx	r3
 8018e5e:	4438      	add	r0, r7
 8018e60:	4480      	add	r8, r0
 8018e62:	fa1f f888 	uxth.w	r8, r8
 8018e66:	e7e5      	b.n	8018e34 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x70>

08018e68 <_ZNK8touchgfx4Font12getCharWidthEt>:
 8018e68:	b508      	push	{r3, lr}
 8018e6a:	6803      	ldr	r3, [r0, #0]
 8018e6c:	68db      	ldr	r3, [r3, #12]
 8018e6e:	4798      	blx	r3
 8018e70:	b128      	cbz	r0, 8018e7e <_ZNK8touchgfx4Font12getCharWidthEt+0x16>
 8018e72:	7b43      	ldrb	r3, [r0, #13]
 8018e74:	7a80      	ldrb	r0, [r0, #10]
 8018e76:	005b      	lsls	r3, r3, #1
 8018e78:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8018e7c:	4318      	orrs	r0, r3
 8018e7e:	bd08      	pop	{r3, pc}

08018e80 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz>:
 8018e80:	b40e      	push	{r1, r2, r3}
 8018e82:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018e84:	b09e      	sub	sp, #120	@ 0x78
 8018e86:	4605      	mov	r5, r0
 8018e88:	ab23      	add	r3, sp, #140	@ 0x8c
 8018e8a:	a805      	add	r0, sp, #20
 8018e8c:	f853 4b04 	ldr.w	r4, [r3], #4
 8018e90:	9303      	str	r3, [sp, #12]
 8018e92:	f001 f9cf 	bl	801a234 <_ZN8touchgfx12TextProviderC1Ev>
 8018e96:	682b      	ldr	r3, [r5, #0]
 8018e98:	4628      	mov	r0, r5
 8018e9a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8018e9c:	4798      	blx	r3
 8018e9e:	682b      	ldr	r3, [r5, #0]
 8018ea0:	4606      	mov	r6, r0
 8018ea2:	4628      	mov	r0, r5
 8018ea4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8018ea6:	4798      	blx	r3
 8018ea8:	4633      	mov	r3, r6
 8018eaa:	4621      	mov	r1, r4
 8018eac:	ae1e      	add	r6, sp, #120	@ 0x78
 8018eae:	2400      	movs	r4, #0
 8018eb0:	9000      	str	r0, [sp, #0]
 8018eb2:	9a03      	ldr	r2, [sp, #12]
 8018eb4:	a805      	add	r0, sp, #20
 8018eb6:	f001 fa18 	bl	801a2ea <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8018eba:	f846 4d68 	str.w	r4, [r6, #-104]!
 8018ebe:	462a      	mov	r2, r5
 8018ec0:	4633      	mov	r3, r6
 8018ec2:	4621      	mov	r1, r4
 8018ec4:	a805      	add	r0, sp, #20
 8018ec6:	f001 fd15 	bl	801a8f4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8018eca:	b300      	cbz	r0, 8018f0e <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x8e>
 8018ecc:	280a      	cmp	r0, #10
 8018ece:	d01a      	beq.n	8018f06 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
 8018ed0:	9f04      	ldr	r7, [sp, #16]
 8018ed2:	b1c7      	cbz	r7, 8018f06 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
 8018ed4:	7b78      	ldrb	r0, [r7, #13]
 8018ed6:	7a3b      	ldrb	r3, [r7, #8]
 8018ed8:	00c1      	lsls	r1, r0, #3
 8018eda:	88ea      	ldrh	r2, [r5, #6]
 8018edc:	f401 7180 	and.w	r1, r1, #256	@ 0x100
 8018ee0:	4319      	orrs	r1, r3
 8018ee2:	0643      	lsls	r3, r0, #25
 8018ee4:	ea4f 1000 	mov.w	r0, r0, lsl #4
 8018ee8:	bf48      	it	mi
 8018eea:	f5a1 7300 	submi.w	r3, r1, #512	@ 0x200
 8018eee:	f400 7080 	and.w	r0, r0, #256	@ 0x100
 8018ef2:	bf48      	it	mi
 8018ef4:	b219      	sxthmi	r1, r3
 8018ef6:	79fb      	ldrb	r3, [r7, #7]
 8018ef8:	4303      	orrs	r3, r0
 8018efa:	4413      	add	r3, r2
 8018efc:	1a5b      	subs	r3, r3, r1
 8018efe:	b21b      	sxth	r3, r3
 8018f00:	429c      	cmp	r4, r3
 8018f02:	bfb8      	it	lt
 8018f04:	461c      	movlt	r4, r3
 8018f06:	4633      	mov	r3, r6
 8018f08:	462a      	mov	r2, r5
 8018f0a:	2100      	movs	r1, #0
 8018f0c:	e7da      	b.n	8018ec4 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x44>
 8018f0e:	b2a0      	uxth	r0, r4
 8018f10:	b01e      	add	sp, #120	@ 0x78
 8018f12:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8018f16:	b003      	add	sp, #12
 8018f18:	4770      	bx	lr

08018f1a <_ZNK8touchgfx4Font20getMinimumTextHeightEv>:
 8018f1a:	7a43      	ldrb	r3, [r0, #9]
 8018f1c:	8880      	ldrh	r0, [r0, #4]
 8018f1e:	4418      	add	r0, r3
 8018f20:	b280      	uxth	r0, r0
 8018f22:	4770      	bx	lr

08018f24 <_ZNK8touchgfx4Font13getFontHeightEv>:
 8018f24:	6803      	ldr	r3, [r0, #0]
 8018f26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8018f28:	4718      	bx	r3

08018f2a <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz>:
 8018f2a:	b40e      	push	{r1, r2, r3}
 8018f2c:	b570      	push	{r4, r5, r6, lr}
 8018f2e:	b09d      	sub	sp, #116	@ 0x74
 8018f30:	4604      	mov	r4, r0
 8018f32:	ab21      	add	r3, sp, #132	@ 0x84
 8018f34:	a803      	add	r0, sp, #12
 8018f36:	f853 5b04 	ldr.w	r5, [r3], #4
 8018f3a:	9302      	str	r3, [sp, #8]
 8018f3c:	f001 f97a 	bl	801a234 <_ZN8touchgfx12TextProviderC1Ev>
 8018f40:	6823      	ldr	r3, [r4, #0]
 8018f42:	4620      	mov	r0, r4
 8018f44:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8018f46:	4798      	blx	r3
 8018f48:	6823      	ldr	r3, [r4, #0]
 8018f4a:	4606      	mov	r6, r0
 8018f4c:	4620      	mov	r0, r4
 8018f4e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8018f50:	2401      	movs	r4, #1
 8018f52:	4798      	blx	r3
 8018f54:	4633      	mov	r3, r6
 8018f56:	9000      	str	r0, [sp, #0]
 8018f58:	4629      	mov	r1, r5
 8018f5a:	9a02      	ldr	r2, [sp, #8]
 8018f5c:	a803      	add	r0, sp, #12
 8018f5e:	f001 f9c4 	bl	801a2ea <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8018f62:	a803      	add	r0, sp, #12
 8018f64:	f001 fd92 	bl	801aa8c <_ZN8touchgfx12TextProvider11getNextCharEv>
 8018f68:	b2a3      	uxth	r3, r4
 8018f6a:	b138      	cbz	r0, 8018f7c <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x52>
 8018f6c:	280a      	cmp	r0, #10
 8018f6e:	a803      	add	r0, sp, #12
 8018f70:	bf04      	itt	eq
 8018f72:	3301      	addeq	r3, #1
 8018f74:	b21c      	sxtheq	r4, r3
 8018f76:	f001 fd89 	bl	801aa8c <_ZN8touchgfx12TextProvider11getNextCharEv>
 8018f7a:	e7f5      	b.n	8018f68 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x3e>
 8018f7c:	4618      	mov	r0, r3
 8018f7e:	b01d      	add	sp, #116	@ 0x74
 8018f80:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8018f84:	b003      	add	sp, #12
 8018f86:	4770      	bx	lr

08018f88 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz>:
 8018f88:	b40e      	push	{r1, r2, r3}
 8018f8a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018f8c:	b09e      	sub	sp, #120	@ 0x78
 8018f8e:	4604      	mov	r4, r0
 8018f90:	ab23      	add	r3, sp, #140	@ 0x8c
 8018f92:	a805      	add	r0, sp, #20
 8018f94:	f853 5b04 	ldr.w	r5, [r3], #4
 8018f98:	9303      	str	r3, [sp, #12]
 8018f9a:	f001 f94b 	bl	801a234 <_ZN8touchgfx12TextProviderC1Ev>
 8018f9e:	6823      	ldr	r3, [r4, #0]
 8018fa0:	4620      	mov	r0, r4
 8018fa2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8018fa4:	4798      	blx	r3
 8018fa6:	6823      	ldr	r3, [r4, #0]
 8018fa8:	4606      	mov	r6, r0
 8018faa:	4620      	mov	r0, r4
 8018fac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8018fae:	4798      	blx	r3
 8018fb0:	4633      	mov	r3, r6
 8018fb2:	4629      	mov	r1, r5
 8018fb4:	9000      	str	r0, [sp, #0]
 8018fb6:	9a03      	ldr	r2, [sp, #12]
 8018fb8:	a805      	add	r0, sp, #20
 8018fba:	f001 f996 	bl	801a2ea <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8018fbe:	ad1e      	add	r5, sp, #120	@ 0x78
 8018fc0:	2100      	movs	r1, #0
 8018fc2:	f647 76ff 	movw	r6, #32767	@ 0x7fff
 8018fc6:	4622      	mov	r2, r4
 8018fc8:	a805      	add	r0, sp, #20
 8018fca:	f845 1d68 	str.w	r1, [r5, #-104]!
 8018fce:	462b      	mov	r3, r5
 8018fd0:	f001 fc90 	bl	801a8f4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8018fd4:	b1d8      	cbz	r0, 801900e <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x86>
 8018fd6:	280a      	cmp	r0, #10
 8018fd8:	d012      	beq.n	8019000 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x78>
 8018fda:	9804      	ldr	r0, [sp, #16]
 8018fdc:	b180      	cbz	r0, 8019000 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x78>
 8018fde:	7b47      	ldrb	r7, [r0, #13]
 8018fe0:	88e2      	ldrh	r2, [r4, #6]
 8018fe2:	00fb      	lsls	r3, r7, #3
 8018fe4:	f403 7180 	and.w	r1, r3, #256	@ 0x100
 8018fe8:	7a03      	ldrb	r3, [r0, #8]
 8018fea:	430b      	orrs	r3, r1
 8018fec:	0679      	lsls	r1, r7, #25
 8018fee:	bf44      	itt	mi
 8018ff0:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 8018ff4:	b21b      	sxthmi	r3, r3
 8018ff6:	1ad3      	subs	r3, r2, r3
 8018ff8:	b21b      	sxth	r3, r3
 8018ffa:	429e      	cmp	r6, r3
 8018ffc:	bfa8      	it	ge
 8018ffe:	461e      	movge	r6, r3
 8019000:	462b      	mov	r3, r5
 8019002:	4622      	mov	r2, r4
 8019004:	2100      	movs	r1, #0
 8019006:	a805      	add	r0, sp, #20
 8019008:	f001 fc74 	bl	801a8f4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801900c:	e7e2      	b.n	8018fd4 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x4c>
 801900e:	4630      	mov	r0, r6
 8019010:	b01e      	add	sp, #120	@ 0x78
 8019012:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8019016:	b003      	add	sp, #12
 8019018:	4770      	bx	lr

0801901a <_ZNK8touchgfx8Drawable10invalidateEv>:
 801901a:	b513      	push	{r0, r1, r4, lr}
 801901c:	6803      	ldr	r3, [r0, #0]
 801901e:	2400      	movs	r4, #0
 8019020:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 8019024:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8019028:	f8ad 1004 	strh.w	r1, [sp, #4]
 801902c:	4669      	mov	r1, sp
 801902e:	691b      	ldr	r3, [r3, #16]
 8019030:	9400      	str	r4, [sp, #0]
 8019032:	f8ad 2006 	strh.w	r2, [sp, #6]
 8019036:	4798      	blx	r3
 8019038:	b002      	add	sp, #8
 801903a:	bd10      	pop	{r4, pc}

0801903c <_ZN8touchgfx8Drawable20getSolidRectAbsoluteEv>:
 801903c:	b538      	push	{r3, r4, r5, lr}
 801903e:	680b      	ldr	r3, [r1, #0]
 8019040:	460c      	mov	r4, r1
 8019042:	4605      	mov	r5, r0
 8019044:	68db      	ldr	r3, [r3, #12]
 8019046:	4798      	blx	r3
 8019048:	6823      	ldr	r3, [r4, #0]
 801904a:	4620      	mov	r0, r4
 801904c:	4629      	mov	r1, r5
 801904e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8019050:	4798      	blx	r3
 8019052:	4628      	mov	r0, r5
 8019054:	bd38      	pop	{r3, r4, r5, pc}

08019056 <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE>:
 8019056:	b410      	push	{r4}
 8019058:	880a      	ldrh	r2, [r1, #0]
 801905a:	8884      	ldrh	r4, [r0, #4]
 801905c:	4422      	add	r2, r4
 801905e:	800a      	strh	r2, [r1, #0]
 8019060:	884a      	ldrh	r2, [r1, #2]
 8019062:	88c4      	ldrh	r4, [r0, #6]
 8019064:	4422      	add	r2, r4
 8019066:	804a      	strh	r2, [r1, #2]
 8019068:	6940      	ldr	r0, [r0, #20]
 801906a:	b120      	cbz	r0, 8019076 <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE+0x20>
 801906c:	6803      	ldr	r3, [r0, #0]
 801906e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8019072:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8019074:	4718      	bx	r3
 8019076:	f85d 4b04 	ldr.w	r4, [sp], #4
 801907a:	4770      	bx	lr

0801907c <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE>:
 801907c:	b570      	push	{r4, r5, r6, lr}
 801907e:	8882      	ldrh	r2, [r0, #4]
 8019080:	460c      	mov	r4, r1
 8019082:	880b      	ldrh	r3, [r1, #0]
 8019084:	4605      	mov	r5, r0
 8019086:	4413      	add	r3, r2
 8019088:	800b      	strh	r3, [r1, #0]
 801908a:	884b      	ldrh	r3, [r1, #2]
 801908c:	88c2      	ldrh	r2, [r0, #6]
 801908e:	4413      	add	r3, r2
 8019090:	804b      	strh	r3, [r1, #2]
 8019092:	1d01      	adds	r1, r0, #4
 8019094:	4620      	mov	r0, r4
 8019096:	f7f6 ff33 	bl	800ff00 <_ZN8touchgfx4RectaNERKS0_>
 801909a:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 801909e:	2b00      	cmp	r3, #0
 80190a0:	dd0b      	ble.n	80190ba <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 80190a2:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 80190a6:	2b00      	cmp	r3, #0
 80190a8:	dd07      	ble.n	80190ba <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 80190aa:	6968      	ldr	r0, [r5, #20]
 80190ac:	b128      	cbz	r0, 80190ba <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 80190ae:	6803      	ldr	r3, [r0, #0]
 80190b0:	4621      	mov	r1, r4
 80190b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80190b4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80190b8:	4718      	bx	r3
 80190ba:	bd70      	pop	{r4, r5, r6, pc}

080190bc <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE>:
 80190bc:	b570      	push	{r4, r5, r6, lr}
 80190be:	8882      	ldrh	r2, [r0, #4]
 80190c0:	460c      	mov	r4, r1
 80190c2:	880b      	ldrh	r3, [r1, #0]
 80190c4:	4605      	mov	r5, r0
 80190c6:	4413      	add	r3, r2
 80190c8:	800b      	strh	r3, [r1, #0]
 80190ca:	884b      	ldrh	r3, [r1, #2]
 80190cc:	88c2      	ldrh	r2, [r0, #6]
 80190ce:	4413      	add	r3, r2
 80190d0:	804b      	strh	r3, [r1, #2]
 80190d2:	1d01      	adds	r1, r0, #4
 80190d4:	4620      	mov	r0, r4
 80190d6:	f7f6 ff13 	bl	800ff00 <_ZN8touchgfx4RectaNERKS0_>
 80190da:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 80190de:	2b00      	cmp	r3, #0
 80190e0:	dd19      	ble.n	8019116 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5a>
 80190e2:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 80190e6:	2b00      	cmp	r3, #0
 80190e8:	dd15      	ble.n	8019116 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5a>
 80190ea:	6968      	ldr	r0, [r5, #20]
 80190ec:	b128      	cbz	r0, 80190fa <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x3e>
 80190ee:	6803      	ldr	r3, [r0, #0]
 80190f0:	4621      	mov	r1, r4
 80190f2:	691b      	ldr	r3, [r3, #16]
 80190f4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80190f8:	4718      	bx	r3
 80190fa:	4b07      	ldr	r3, [pc, #28]	@ (8019118 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5c>)
 80190fc:	681b      	ldr	r3, [r3, #0]
 80190fe:	3304      	adds	r3, #4
 8019100:	429d      	cmp	r5, r3
 8019102:	d108      	bne.n	8019116 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5a>
 8019104:	f7fe fe9e 	bl	8017e44 <_ZN8touchgfx11Application11getInstanceEv>
 8019108:	6803      	ldr	r3, [r0, #0]
 801910a:	6821      	ldr	r1, [r4, #0]
 801910c:	6862      	ldr	r2, [r4, #4]
 801910e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8019110:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8019114:	4718      	bx	r3
 8019116:	bd70      	pop	{r4, r5, r6, pc}
 8019118:	24028e64 	.word	0x24028e64

0801911c <_ZN8touchgfx8Drawable12moveRelativeEss>:
 801911c:	b570      	push	{r4, r5, r6, lr}
 801911e:	4604      	mov	r4, r0
 8019120:	4616      	mov	r6, r2
 8019122:	460d      	mov	r5, r1
 8019124:	b901      	cbnz	r1, 8019128 <_ZN8touchgfx8Drawable12moveRelativeEss+0xc>
 8019126:	b192      	cbz	r2, 801914e <_ZN8touchgfx8Drawable12moveRelativeEss+0x32>
 8019128:	6823      	ldr	r3, [r4, #0]
 801912a:	4620      	mov	r0, r4
 801912c:	699b      	ldr	r3, [r3, #24]
 801912e:	4798      	blx	r3
 8019130:	88e2      	ldrh	r2, [r4, #6]
 8019132:	88a1      	ldrh	r1, [r4, #4]
 8019134:	4620      	mov	r0, r4
 8019136:	4432      	add	r2, r6
 8019138:	4429      	add	r1, r5
 801913a:	b212      	sxth	r2, r2
 801913c:	b209      	sxth	r1, r1
 801913e:	f7ea ff9c 	bl	800407a <_ZN8touchgfx8Drawable5setXYEss>
 8019142:	6823      	ldr	r3, [r4, #0]
 8019144:	4620      	mov	r0, r4
 8019146:	699b      	ldr	r3, [r3, #24]
 8019148:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801914c:	4718      	bx	r3
 801914e:	bd70      	pop	{r4, r5, r6, pc}

08019150 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>:
 8019150:	b510      	push	{r4, lr}
 8019152:	2300      	movs	r3, #0
 8019154:	4604      	mov	r4, r0
 8019156:	4608      	mov	r0, r1
 8019158:	f9b1 1008 	ldrsh.w	r1, [r1, #8]
 801915c:	8023      	strh	r3, [r4, #0]
 801915e:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8019162:	8063      	strh	r3, [r4, #2]
 8019164:	6803      	ldr	r3, [r0, #0]
 8019166:	80a1      	strh	r1, [r4, #4]
 8019168:	4621      	mov	r1, r4
 801916a:	80e2      	strh	r2, [r4, #6]
 801916c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801916e:	4798      	blx	r3
 8019170:	4620      	mov	r0, r4
 8019172:	bd10      	pop	{r4, pc}

08019174 <_ZN8touchgfx22VectorFontRendererImplD1Ev>:
 8019174:	4770      	bx	lr

08019176 <_ZN8touchgfx22VectorFontRendererImplD0Ev>:
 8019176:	b510      	push	{r4, lr}
 8019178:	4604      	mov	r4, r0
 801917a:	211c      	movs	r1, #28
 801917c:	f00e f987 	bl	802748e <_ZdlPvj>
 8019180:	4620      	mov	r0, r4
 8019182:	bd10      	pop	{r4, pc}

08019184 <_ZN8touchgfx22VectorFontRendererImplC1Ev>:
 8019184:	4a04      	ldr	r2, [pc, #16]	@ (8019198 <_ZN8touchgfx22VectorFontRendererImplC1Ev+0x14>)
 8019186:	6002      	str	r2, [r0, #0]
 8019188:	2200      	movs	r2, #0
 801918a:	e9c0 2201 	strd	r2, r2, [r0, #4]
 801918e:	e9c0 2203 	strd	r2, r2, [r0, #12]
 8019192:	e9c0 2205 	strd	r2, r2, [r0, #20]
 8019196:	4770      	bx	lr
 8019198:	0802d1b0 	.word	0x0802d1b0

0801919c <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs>:
 801919c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80191a0:	4604      	mov	r4, r0
 80191a2:	b087      	sub	sp, #28
 80191a4:	4696      	mov	lr, r2
 80191a6:	6880      	ldr	r0, [r0, #8]
 80191a8:	8b22      	ldrh	r2, [r4, #24]
 80191aa:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 80191ae:	9105      	str	r1, [sp, #20]
 80191b0:	1c51      	adds	r1, r2, #1
 80191b2:	8321      	strh	r1, [r4, #24]
 80191b4:	2101      	movs	r1, #1
 80191b6:	5481      	strb	r1, [r0, r2]
 80191b8:	4689      	mov	r9, r1
 80191ba:	f9b3 2000 	ldrsh.w	r2, [r3]
 80191be:	8b60      	ldrh	r0, [r4, #26]
 80191c0:	ee06 2a90 	vmov	s13, r2
 80191c4:	68e2      	ldr	r2, [r4, #12]
 80191c6:	1845      	adds	r5, r0, r1
 80191c8:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80191cc:	eb02 0280 	add.w	r2, r2, r0, lsl #2
 80191d0:	8365      	strh	r5, [r4, #26]
 80191d2:	edc2 6a00 	vstr	s13, [r2]
 80191d6:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 80191da:	8b60      	ldrh	r0, [r4, #26]
 80191dc:	ee07 2a10 	vmov	s14, r2
 80191e0:	68e2      	ldr	r2, [r4, #12]
 80191e2:	1845      	adds	r5, r0, r1
 80191e4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80191e8:	eb02 0280 	add.w	r2, r2, r0, lsl #2
 80191ec:	8365      	strh	r5, [r4, #26]
 80191ee:	1d18      	adds	r0, r3, #4
 80191f0:	460d      	mov	r5, r1
 80191f2:	ed82 7a00 	vstr	s14, [r2]
 80191f6:	f8be 2000 	ldrh.w	r2, [lr]
 80191fa:	9203      	str	r2, [sp, #12]
 80191fc:	2200      	movs	r2, #0
 80191fe:	4613      	mov	r3, r2
 8019200:	4694      	mov	ip, r2
 8019202:	9201      	str	r2, [sp, #4]
 8019204:	9202      	str	r2, [sp, #8]
 8019206:	f8b4 8018 	ldrh.w	r8, [r4, #24]
 801920a:	9e05      	ldr	r6, [sp, #20]
 801920c:	f108 0701 	add.w	r7, r8, #1
 8019210:	f8d4 a008 	ldr.w	sl, [r4, #8]
 8019214:	428e      	cmp	r6, r1
 8019216:	b2bf      	uxth	r7, r7
 8019218:	eb0a 0b08 	add.w	fp, sl, r8
 801921c:	f340 80b6 	ble.w	801938c <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x1f0>
 8019220:	9b03      	ldr	r3, [sp, #12]
 8019222:	f9b0 c000 	ldrsh.w	ip, [r0]
 8019226:	fa43 fb05 	asr.w	fp, r3, r5
 801922a:	f00b 0b01 	and.w	fp, fp, #1
 801922e:	fa5f f38b 	uxtb.w	r3, fp
 8019232:	9304      	str	r3, [sp, #16]
 8019234:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 8019238:	f1bb 0f00 	cmp.w	fp, #0
 801923c:	d057      	beq.n	80192ee <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x152>
 801923e:	ee07 ca90 	vmov	s15, ip
 8019242:	8327      	strh	r7, [r4, #24]
 8019244:	eef8 5ae7 	vcvt.f32.s32	s11, s15
 8019248:	ee07 3a90 	vmov	s15, r3
 801924c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8019250:	f1b9 0f00 	cmp.w	r9, #0
 8019254:	d028      	beq.n	80192a8 <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x10c>
 8019256:	f04f 0602 	mov.w	r6, #2
 801925a:	f80a 6008 	strb.w	r6, [sl, r8]
 801925e:	f8b4 801a 	ldrh.w	r8, [r4, #26]
 8019262:	68e7      	ldr	r7, [r4, #12]
 8019264:	f108 0901 	add.w	r9, r8, #1
 8019268:	eb07 0788 	add.w	r7, r7, r8, lsl #2
 801926c:	f8a4 901a 	strh.w	r9, [r4, #26]
 8019270:	edc7 5a00 	vstr	s11, [r7]
 8019274:	f8b4 801a 	ldrh.w	r8, [r4, #26]
 8019278:	68e7      	ldr	r7, [r4, #12]
 801927a:	f108 0901 	add.w	r9, r8, #1
 801927e:	eb07 0788 	add.w	r7, r7, r8, lsl #2
 8019282:	f8a4 901a 	strh.w	r9, [r4, #26]
 8019286:	edc7 7a00 	vstr	s15, [r7]
 801928a:	3501      	adds	r5, #1
 801928c:	2d10      	cmp	r5, #16
 801928e:	d106      	bne.n	801929e <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x102>
 8019290:	9d02      	ldr	r5, [sp, #8]
 8019292:	3501      	adds	r5, #1
 8019294:	9502      	str	r5, [sp, #8]
 8019296:	f83e 5015 	ldrh.w	r5, [lr, r5, lsl #1]
 801929a:	9503      	str	r5, [sp, #12]
 801929c:	2500      	movs	r5, #0
 801929e:	3101      	adds	r1, #1
 80192a0:	3004      	adds	r0, #4
 80192a2:	f8dd 9010 	ldr.w	r9, [sp, #16]
 80192a6:	e7ae      	b.n	8019206 <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x6a>
 80192a8:	f04f 0605 	mov.w	r6, #5
 80192ac:	ed9d 5a01 	vldr	s10, [sp, #4]
 80192b0:	f80a 6008 	strb.w	r6, [sl, r8]
 80192b4:	eeb8 5ac5 	vcvt.f32.s32	s10, s10
 80192b8:	f8b4 801a 	ldrh.w	r8, [r4, #26]
 80192bc:	68e7      	ldr	r7, [r4, #12]
 80192be:	f108 0901 	add.w	r9, r8, #1
 80192c2:	eb07 0788 	add.w	r7, r7, r8, lsl #2
 80192c6:	f8a4 901a 	strh.w	r9, [r4, #26]
 80192ca:	ed87 5a00 	vstr	s10, [r7]
 80192ce:	ee05 2a10 	vmov	s10, r2
 80192d2:	f8b4 801a 	ldrh.w	r8, [r4, #26]
 80192d6:	68e7      	ldr	r7, [r4, #12]
 80192d8:	eeb8 5ac5 	vcvt.f32.s32	s10, s10
 80192dc:	f108 0901 	add.w	r9, r8, #1
 80192e0:	eb07 0788 	add.w	r7, r7, r8, lsl #2
 80192e4:	f8a4 901a 	strh.w	r9, [r4, #26]
 80192e8:	ed87 5a00 	vstr	s10, [r7]
 80192ec:	e7b7      	b.n	801925e <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0xc2>
 80192ee:	f1b9 0f00 	cmp.w	r9, #0
 80192f2:	d147      	bne.n	8019384 <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x1e8>
 80192f4:	f04f 0605 	mov.w	r6, #5
 80192f8:	eddd 7a01 	vldr	s15, [sp, #4]
 80192fc:	8327      	strh	r7, [r4, #24]
 80192fe:	f80a 6008 	strb.w	r6, [sl, r8]
 8019302:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8019306:	f8b4 801a 	ldrh.w	r8, [r4, #26]
 801930a:	68e7      	ldr	r7, [r4, #12]
 801930c:	f108 0901 	add.w	r9, r8, #1
 8019310:	9e01      	ldr	r6, [sp, #4]
 8019312:	eb07 0788 	add.w	r7, r7, r8, lsl #2
 8019316:	f8a4 901a 	strh.w	r9, [r4, #26]
 801931a:	4466      	add	r6, ip
 801931c:	edc7 7a00 	vstr	s15, [r7]
 8019320:	ee07 2a90 	vmov	s15, r2
 8019324:	f8b4 801a 	ldrh.w	r8, [r4, #26]
 8019328:	441a      	add	r2, r3
 801932a:	68e7      	ldr	r7, [r4, #12]
 801932c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8019330:	f108 0901 	add.w	r9, r8, #1
 8019334:	eb07 0788 	add.w	r7, r7, r8, lsl #2
 8019338:	f8a4 901a 	strh.w	r9, [r4, #26]
 801933c:	edc7 7a00 	vstr	s15, [r7]
 8019340:	ee07 6a90 	vmov	s15, r6
 8019344:	f8b4 801a 	ldrh.w	r8, [r4, #26]
 8019348:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801934c:	68e7      	ldr	r7, [r4, #12]
 801934e:	f108 0901 	add.w	r9, r8, #1
 8019352:	eb07 0788 	add.w	r7, r7, r8, lsl #2
 8019356:	ee67 7a86 	vmul.f32	s15, s15, s12
 801935a:	f8a4 901a 	strh.w	r9, [r4, #26]
 801935e:	edc7 7a00 	vstr	s15, [r7]
 8019362:	ee07 2a90 	vmov	s15, r2
 8019366:	f8b4 801a 	ldrh.w	r8, [r4, #26]
 801936a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801936e:	68e7      	ldr	r7, [r4, #12]
 8019370:	f108 0901 	add.w	r9, r8, #1
 8019374:	eb07 0788 	add.w	r7, r7, r8, lsl #2
 8019378:	ee67 7a86 	vmul.f32	s15, s15, s12
 801937c:	f8a4 901a 	strh.w	r9, [r4, #26]
 8019380:	edc7 7a00 	vstr	s15, [r7]
 8019384:	461a      	mov	r2, r3
 8019386:	f8cd c004 	str.w	ip, [sp, #4]
 801938a:	e77e      	b.n	801928a <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0xee>
 801938c:	f1b9 0f00 	cmp.w	r9, #0
 8019390:	d028      	beq.n	80193e4 <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x248>
 8019392:	ee07 ca90 	vmov	s15, ip
 8019396:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801939a:	eef4 6a67 	vcmp.f32	s13, s15
 801939e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80193a2:	d108      	bne.n	80193b6 <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x21a>
 80193a4:	ee07 3a90 	vmov	s15, r3
 80193a8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80193ac:	eeb4 7a67 	vcmp.f32	s14, s15
 80193b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80193b4:	d016      	beq.n	80193e4 <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x248>
 80193b6:	2302      	movs	r3, #2
 80193b8:	8327      	strh	r7, [r4, #24]
 80193ba:	f88b 3000 	strb.w	r3, [fp]
 80193be:	8b62      	ldrh	r2, [r4, #26]
 80193c0:	68e3      	ldr	r3, [r4, #12]
 80193c2:	1c51      	adds	r1, r2, #1
 80193c4:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 80193c8:	8361      	strh	r1, [r4, #26]
 80193ca:	edc3 6a00 	vstr	s13, [r3]
 80193ce:	8b62      	ldrh	r2, [r4, #26]
 80193d0:	68e3      	ldr	r3, [r4, #12]
 80193d2:	1c51      	adds	r1, r2, #1
 80193d4:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 80193d8:	8361      	strh	r1, [r4, #26]
 80193da:	ed83 7a00 	vstr	s14, [r3]
 80193de:	b007      	add	sp, #28
 80193e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80193e4:	2305      	movs	r3, #5
 80193e6:	eddd 7a01 	vldr	s15, [sp, #4]
 80193ea:	8327      	strh	r7, [r4, #24]
 80193ec:	f88b 3000 	strb.w	r3, [fp]
 80193f0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80193f4:	8b61      	ldrh	r1, [r4, #26]
 80193f6:	68e3      	ldr	r3, [r4, #12]
 80193f8:	1c4d      	adds	r5, r1, #1
 80193fa:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 80193fe:	8365      	strh	r5, [r4, #26]
 8019400:	edc3 7a00 	vstr	s15, [r3]
 8019404:	ee07 2a90 	vmov	s15, r2
 8019408:	8b61      	ldrh	r1, [r4, #26]
 801940a:	68e3      	ldr	r3, [r4, #12]
 801940c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8019410:	1c4d      	adds	r5, r1, #1
 8019412:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8019416:	8365      	strh	r5, [r4, #26]
 8019418:	edc3 7a00 	vstr	s15, [r3]
 801941c:	e7cf      	b.n	80193be <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x222>
	...

08019420 <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii>:
 8019420:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019424:	4604      	mov	r4, r0
 8019426:	b08e      	sub	sp, #56	@ 0x38
 8019428:	4699      	mov	r9, r3
 801942a:	4688      	mov	r8, r1
 801942c:	4615      	mov	r5, r2
 801942e:	9e16      	ldr	r6, [sp, #88]	@ 0x58
 8019430:	f89d a064 	ldrb.w	sl, [sp, #100]	@ 0x64
 8019434:	9f1a      	ldr	r7, [sp, #104]	@ 0x68
 8019436:	f7ea f98f 	bl	8003758 <_ZN8touchgfx14VectorRenderer11getInstanceEv>
 801943a:	6060      	str	r0, [r4, #4]
 801943c:	f1b9 0f00 	cmp.w	r9, #0
 8019440:	f000 80e8 	beq.w	8019614 <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0x1f4>
 8019444:	2800      	cmp	r0, #0
 8019446:	f000 80e5 	beq.w	8019614 <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0x1f4>
 801944a:	a805      	add	r0, sp, #20
 801944c:	f000 f8f9 	bl	8019642 <_ZN8touchgfx9Matrix3x3C1Ev>
 8019450:	6833      	ldr	r3, [r6, #0]
 8019452:	4630      	mov	r0, r6
 8019454:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8019456:	4798      	blx	r3
 8019458:	a805      	add	r0, sp, #20
 801945a:	eef0 0a40 	vmov.f32	s1, s0
 801945e:	f000 f8f4 	bl	801964a <_ZN8touchgfx9Matrix3x35scaleEff>
 8019462:	6860      	ldr	r0, [r4, #4]
 8019464:	f1ba 0f03 	cmp.w	sl, #3
 8019468:	d83b      	bhi.n	80194e2 <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0xc2>
 801946a:	e8df f00a 	tbb	[pc, sl]
 801946e:	1002      	.short	0x1002
 8019470:	9f71      	.short	0x9f71
 8019472:	6803      	ldr	r3, [r0, #0]
 8019474:	462a      	mov	r2, r5
 8019476:	4641      	mov	r1, r8
 8019478:	689b      	ldr	r3, [r3, #8]
 801947a:	4798      	blx	r3
 801947c:	eddd 7a1b 	vldr	s15, [sp, #108]	@ 0x6c
 8019480:	eef8 0ae7 	vcvt.f32.s32	s1, s15
 8019484:	ee07 7a90 	vmov	s15, r7
 8019488:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 801948c:	e026      	b.n	80194dc <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0xbc>
 801948e:	f9b5 2006 	ldrsh.w	r2, [r5, #6]
 8019492:	f8b8 3004 	ldrh.w	r3, [r8, #4]
 8019496:	8869      	ldrh	r1, [r5, #2]
 8019498:	1a9b      	subs	r3, r3, r2
 801949a:	f8ad 2010 	strh.w	r2, [sp, #16]
 801949e:	aa03      	add	r2, sp, #12
 80194a0:	1a5b      	subs	r3, r3, r1
 80194a2:	4641      	mov	r1, r8
 80194a4:	f8ad 300c 	strh.w	r3, [sp, #12]
 80194a8:	882b      	ldrh	r3, [r5, #0]
 80194aa:	f8ad 300e 	strh.w	r3, [sp, #14]
 80194ae:	88ab      	ldrh	r3, [r5, #4]
 80194b0:	f8ad 3012 	strh.w	r3, [sp, #18]
 80194b4:	6803      	ldr	r3, [r0, #0]
 80194b6:	689b      	ldr	r3, [r3, #8]
 80194b8:	4798      	blx	r3
 80194ba:	ed9f 0a58 	vldr	s0, [pc, #352]	@ 801961c <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0x1fc>
 80194be:	a805      	add	r0, sp, #20
 80194c0:	f000 f8e8 	bl	8019694 <_ZN8touchgfx9Matrix3x36rotateEf>
 80194c4:	f9b8 3004 	ldrsh.w	r3, [r8, #4]
 80194c8:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 80194ca:	ee07 7a90 	vmov	s15, r7
 80194ce:	1a9b      	subs	r3, r3, r2
 80194d0:	eef8 0ae7 	vcvt.f32.s32	s1, s15
 80194d4:	ee00 3a10 	vmov	s0, r3
 80194d8:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 80194dc:	a805      	add	r0, sp, #20
 80194de:	f000 f927 	bl	8019730 <_ZN8touchgfx9Matrix3x39translateEff>
 80194e2:	6860      	ldr	r0, [r4, #4]
 80194e4:	a905      	add	r1, sp, #20
 80194e6:	2500      	movs	r5, #0
 80194e8:	f109 0602 	add.w	r6, r9, #2
 80194ec:	6803      	ldr	r3, [r0, #0]
 80194ee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80194f0:	4798      	blx	r3
 80194f2:	6860      	ldr	r0, [r4, #4]
 80194f4:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 80194f6:	6803      	ldr	r3, [r0, #0]
 80194f8:	f041 417f 	orr.w	r1, r1, #4278190080	@ 0xff000000
 80194fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80194fe:	4798      	blx	r3
 8019500:	6860      	ldr	r0, [r4, #4]
 8019502:	f89d 1060 	ldrb.w	r1, [sp, #96]	@ 0x60
 8019506:	6803      	ldr	r3, [r0, #0]
 8019508:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801950a:	4798      	blx	r3
 801950c:	6860      	ldr	r0, [r4, #4]
 801950e:	2101      	movs	r1, #1
 8019510:	6803      	ldr	r3, [r0, #0]
 8019512:	68db      	ldr	r3, [r3, #12]
 8019514:	4798      	blx	r3
 8019516:	f8b9 7000 	ldrh.w	r7, [r9]
 801951a:	f104 0310 	add.w	r3, r4, #16
 801951e:	61a5      	str	r5, [r4, #24]
 8019520:	f104 0208 	add.w	r2, r4, #8
 8019524:	f104 0114 	add.w	r1, r4, #20
 8019528:	f104 000c 	add.w	r0, r4, #12
 801952c:	f7eb f858 	bl	80045e0 <_ZN8touchgfx22VectorFontRendererImpl20getVectorFontBuffersERPfRiRPhS3_>
 8019530:	42af      	cmp	r7, r5
 8019532:	dd60      	ble.n	80195f6 <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0x1d6>
 8019534:	8831      	ldrh	r1, [r6, #0]
 8019536:	1cb2      	adds	r2, r6, #2
 8019538:	4620      	mov	r0, r4
 801953a:	3501      	adds	r5, #1
 801953c:	f101 030f 	add.w	r3, r1, #15
 8019540:	f3c3 1307 	ubfx	r3, r3, #4, #8
 8019544:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8019548:	f7ff fe28 	bl	801919c <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs>
 801954c:	4606      	mov	r6, r0
 801954e:	e7ef      	b.n	8019530 <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0x110>
 8019550:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 8019554:	f8b8 3004 	ldrh.w	r3, [r8, #4]
 8019558:	8829      	ldrh	r1, [r5, #0]
 801955a:	1a9b      	subs	r3, r3, r2
 801955c:	f8ad 2010 	strh.w	r2, [sp, #16]
 8019560:	aa03      	add	r2, sp, #12
 8019562:	1a5b      	subs	r3, r3, r1
 8019564:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 8019568:	886d      	ldrh	r5, [r5, #2]
 801956a:	f8ad 300c 	strh.w	r3, [sp, #12]
 801956e:	f8b8 3006 	ldrh.w	r3, [r8, #6]
 8019572:	f8ad 1012 	strh.w	r1, [sp, #18]
 8019576:	1a5b      	subs	r3, r3, r1
 8019578:	4641      	mov	r1, r8
 801957a:	1b5b      	subs	r3, r3, r5
 801957c:	f8ad 300e 	strh.w	r3, [sp, #14]
 8019580:	6803      	ldr	r3, [r0, #0]
 8019582:	689b      	ldr	r3, [r3, #8]
 8019584:	4798      	blx	r3
 8019586:	ed9f 0a26 	vldr	s0, [pc, #152]	@ 8019620 <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0x200>
 801958a:	a805      	add	r0, sp, #20
 801958c:	f000 f882 	bl	8019694 <_ZN8touchgfx9Matrix3x36rotateEf>
 8019590:	f9b8 3006 	ldrsh.w	r3, [r8, #6]
 8019594:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8019596:	1a9b      	subs	r3, r3, r2
 8019598:	ee00 3a90 	vmov	s1, r3
 801959c:	f9b8 3004 	ldrsh.w	r3, [r8, #4]
 80195a0:	1bdb      	subs	r3, r3, r7
 80195a2:	eef8 0ae0 	vcvt.f32.s32	s1, s1
 80195a6:	ee00 3a10 	vmov	s0, r3
 80195aa:	e795      	b.n	80194d8 <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0xb8>
 80195ac:	886b      	ldrh	r3, [r5, #2]
 80195ae:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 80195b2:	f8ad 300c 	strh.w	r3, [sp, #12]
 80195b6:	f8b8 3006 	ldrh.w	r3, [r8, #6]
 80195ba:	8829      	ldrh	r1, [r5, #0]
 80195bc:	1a9b      	subs	r3, r3, r2
 80195be:	f8ad 2012 	strh.w	r2, [sp, #18]
 80195c2:	aa03      	add	r2, sp, #12
 80195c4:	1a5b      	subs	r3, r3, r1
 80195c6:	4641      	mov	r1, r8
 80195c8:	f8ad 300e 	strh.w	r3, [sp, #14]
 80195cc:	88eb      	ldrh	r3, [r5, #6]
 80195ce:	f8ad 3010 	strh.w	r3, [sp, #16]
 80195d2:	6803      	ldr	r3, [r0, #0]
 80195d4:	689b      	ldr	r3, [r3, #8]
 80195d6:	4798      	blx	r3
 80195d8:	ed9f 0a12 	vldr	s0, [pc, #72]	@ 8019624 <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0x204>
 80195dc:	a805      	add	r0, sp, #20
 80195de:	f000 f859 	bl	8019694 <_ZN8touchgfx9Matrix3x36rotateEf>
 80195e2:	f9b8 3006 	ldrsh.w	r3, [r8, #6]
 80195e6:	eddd 7a1b 	vldr	s15, [sp, #108]	@ 0x6c
 80195ea:	1bdb      	subs	r3, r3, r7
 80195ec:	ee00 3a90 	vmov	s1, r3
 80195f0:	eef8 0ae0 	vcvt.f32.s32	s1, s1
 80195f4:	e748      	b.n	8019488 <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0x68>
 80195f6:	6860      	ldr	r0, [r4, #4]
 80195f8:	2100      	movs	r1, #0
 80195fa:	8b22      	ldrh	r2, [r4, #24]
 80195fc:	6803      	ldr	r3, [r0, #0]
 80195fe:	9101      	str	r1, [sp, #4]
 8019600:	8b61      	ldrh	r1, [r4, #26]
 8019602:	9100      	str	r1, [sp, #0]
 8019604:	6a1d      	ldr	r5, [r3, #32]
 8019606:	e9d4 1302 	ldrd	r1, r3, [r4, #8]
 801960a:	47a8      	blx	r5
 801960c:	6860      	ldr	r0, [r4, #4]
 801960e:	6803      	ldr	r3, [r0, #0]
 8019610:	69db      	ldr	r3, [r3, #28]
 8019612:	4798      	blx	r3
 8019614:	b00e      	add	sp, #56	@ 0x38
 8019616:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801961a:	bf00      	nop
 801961c:	42b40000 	.word	0x42b40000
 8019620:	43340000 	.word	0x43340000
 8019624:	43870000 	.word	0x43870000

08019628 <_ZN8touchgfx9Matrix3x35resetEv>:
 8019628:	2300      	movs	r3, #0
 801962a:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 801962e:	6043      	str	r3, [r0, #4]
 8019630:	6002      	str	r2, [r0, #0]
 8019632:	6083      	str	r3, [r0, #8]
 8019634:	60c3      	str	r3, [r0, #12]
 8019636:	6102      	str	r2, [r0, #16]
 8019638:	6143      	str	r3, [r0, #20]
 801963a:	6183      	str	r3, [r0, #24]
 801963c:	61c3      	str	r3, [r0, #28]
 801963e:	6202      	str	r2, [r0, #32]
 8019640:	4770      	bx	lr

08019642 <_ZN8touchgfx9Matrix3x3C1Ev>:
 8019642:	b508      	push	{r3, lr}
 8019644:	f7ff fff0 	bl	8019628 <_ZN8touchgfx9Matrix3x35resetEv>
 8019648:	bd08      	pop	{r3, pc}

0801964a <_ZN8touchgfx9Matrix3x35scaleEff>:
 801964a:	edd0 7a00 	vldr	s15, [r0]
 801964e:	ee67 7a80 	vmul.f32	s15, s15, s0
 8019652:	edc0 7a00 	vstr	s15, [r0]
 8019656:	edd0 7a01 	vldr	s15, [r0, #4]
 801965a:	ee67 7a80 	vmul.f32	s15, s15, s0
 801965e:	edc0 7a01 	vstr	s15, [r0, #4]
 8019662:	edd0 7a02 	vldr	s15, [r0, #8]
 8019666:	ee27 0a80 	vmul.f32	s0, s15, s0
 801966a:	edd0 7a03 	vldr	s15, [r0, #12]
 801966e:	ee67 7aa0 	vmul.f32	s15, s15, s1
 8019672:	ed80 0a02 	vstr	s0, [r0, #8]
 8019676:	edc0 7a03 	vstr	s15, [r0, #12]
 801967a:	edd0 7a04 	vldr	s15, [r0, #16]
 801967e:	ee67 7aa0 	vmul.f32	s15, s15, s1
 8019682:	edc0 7a04 	vstr	s15, [r0, #16]
 8019686:	edd0 7a05 	vldr	s15, [r0, #20]
 801968a:	ee67 0aa0 	vmul.f32	s1, s15, s1
 801968e:	edc0 0a05 	vstr	s1, [r0, #20]
 8019692:	4770      	bx	lr

08019694 <_ZN8touchgfx9Matrix3x36rotateEf>:
 8019694:	eddf 7a24 	vldr	s15, [pc, #144]	@ 8019728 <_ZN8touchgfx9Matrix3x36rotateEf+0x94>
 8019698:	ee20 0a27 	vmul.f32	s0, s0, s15
 801969c:	eddf 7a23 	vldr	s15, [pc, #140]	@ 801972c <_ZN8touchgfx9Matrix3x36rotateEf+0x98>
 80196a0:	b510      	push	{r4, lr}
 80196a2:	ed2d 8b02 	vpush	{d8}
 80196a6:	eec0 8a27 	vdiv.f32	s17, s0, s15
 80196aa:	4604      	mov	r4, r0
 80196ac:	eeb0 0a68 	vmov.f32	s0, s17
 80196b0:	f00e f826 	bl	8027700 <cosf>
 80196b4:	eeb0 8a40 	vmov.f32	s16, s0
 80196b8:	eeb0 0a68 	vmov.f32	s0, s17
 80196bc:	f00d ff5c 	bl	8027578 <sinf>
 80196c0:	edd4 6a03 	vldr	s13, [r4, #12]
 80196c4:	edd4 4a00 	vldr	s9, [r4]
 80196c8:	ee60 7a66 	vnmul.f32	s15, s0, s13
 80196cc:	ed94 7a04 	vldr	s14, [r4, #16]
 80196d0:	ed94 5a01 	vldr	s10, [r4, #4]
 80196d4:	ee66 6a88 	vmul.f32	s13, s13, s16
 80196d8:	edd4 5a02 	vldr	s11, [r4, #8]
 80196dc:	eee8 7a24 	vfma.f32	s15, s16, s9
 80196e0:	eee0 6a24 	vfma.f32	s13, s0, s9
 80196e4:	edc4 7a00 	vstr	s15, [r4]
 80196e8:	ee60 7a47 	vnmul.f32	s15, s0, s14
 80196ec:	ee27 7a08 	vmul.f32	s14, s14, s16
 80196f0:	edc4 6a03 	vstr	s13, [r4, #12]
 80196f4:	eee8 7a05 	vfma.f32	s15, s16, s10
 80196f8:	eea0 7a05 	vfma.f32	s14, s0, s10
 80196fc:	edc4 7a01 	vstr	s15, [r4, #4]
 8019700:	edd4 7a05 	vldr	s15, [r4, #20]
 8019704:	ed84 7a04 	vstr	s14, [r4, #16]
 8019708:	ee20 6a67 	vnmul.f32	s12, s0, s15
 801970c:	ee67 7a88 	vmul.f32	s15, s15, s16
 8019710:	eea8 6a25 	vfma.f32	s12, s16, s11
 8019714:	eee0 7a25 	vfma.f32	s15, s0, s11
 8019718:	ecbd 8b02 	vpop	{d8}
 801971c:	ed84 6a02 	vstr	s12, [r4, #8]
 8019720:	edc4 7a05 	vstr	s15, [r4, #20]
 8019724:	bd10      	pop	{r4, pc}
 8019726:	bf00      	nop
 8019728:	40490fdb 	.word	0x40490fdb
 801972c:	43340000 	.word	0x43340000

08019730 <_ZN8touchgfx9Matrix3x39translateEff>:
 8019730:	ed90 6a06 	vldr	s12, [r0, #24]
 8019734:	edd0 7a00 	vldr	s15, [r0]
 8019738:	edd0 6a07 	vldr	s13, [r0, #28]
 801973c:	eee6 7a00 	vfma.f32	s15, s12, s0
 8019740:	ed90 7a08 	vldr	s14, [r0, #32]
 8019744:	edc0 7a00 	vstr	s15, [r0]
 8019748:	edd0 7a01 	vldr	s15, [r0, #4]
 801974c:	eee6 7a80 	vfma.f32	s15, s13, s0
 8019750:	edc0 7a01 	vstr	s15, [r0, #4]
 8019754:	edd0 7a02 	vldr	s15, [r0, #8]
 8019758:	eee7 7a00 	vfma.f32	s15, s14, s0
 801975c:	edc0 7a02 	vstr	s15, [r0, #8]
 8019760:	edd0 7a03 	vldr	s15, [r0, #12]
 8019764:	eee6 7a20 	vfma.f32	s15, s12, s1
 8019768:	edc0 7a03 	vstr	s15, [r0, #12]
 801976c:	edd0 7a04 	vldr	s15, [r0, #16]
 8019770:	eee6 7aa0 	vfma.f32	s15, s13, s1
 8019774:	edc0 7a04 	vstr	s15, [r0, #16]
 8019778:	edd0 7a05 	vldr	s15, [r0, #20]
 801977c:	eee7 7a20 	vfma.f32	s15, s14, s1
 8019780:	edc0 7a05 	vstr	s15, [r0, #20]
 8019784:	4770      	bx	lr

08019786 <_ZNK8touchgfx9Matrix3x315affineTransformEff>:
 8019786:	edd0 6a01 	vldr	s13, [r0, #4]
 801978a:	b084      	sub	sp, #16
 801978c:	edd0 7a04 	vldr	s15, [r0, #16]
 8019790:	ed90 7a03 	vldr	s14, [r0, #12]
 8019794:	ee60 7aa7 	vmul.f32	s15, s1, s15
 8019798:	ee60 0aa6 	vmul.f32	s1, s1, s13
 801979c:	edd0 6a00 	vldr	s13, [r0]
 80197a0:	eee7 7a00 	vfma.f32	s15, s14, s0
 80197a4:	ed90 7a05 	vldr	s14, [r0, #20]
 80197a8:	eee6 0a80 	vfma.f32	s1, s13, s0
 80197ac:	ed90 0a02 	vldr	s0, [r0, #8]
 80197b0:	ee30 0a80 	vadd.f32	s0, s1, s0
 80197b4:	ee77 0a87 	vadd.f32	s1, s15, s14
 80197b8:	b004      	add	sp, #16
 80197ba:	4770      	bx	lr

080197bc <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt>:
 80197bc:	b530      	push	{r4, r5, lr}
 80197be:	8083      	strh	r3, [r0, #4]
 80197c0:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 80197c4:	f89d 5018 	ldrb.w	r5, [sp, #24]
 80197c8:	80c3      	strh	r3, [r0, #6]
 80197ca:	f89d 3010 	ldrb.w	r3, [sp, #16]
 80197ce:	6141      	str	r1, [r0, #20]
 80197d0:	7203      	strb	r3, [r0, #8]
 80197d2:	f89d 3014 	ldrb.w	r3, [sp, #20]
 80197d6:	8302      	strh	r2, [r0, #24]
 80197d8:	7243      	strb	r3, [r0, #9]
 80197da:	7a83      	ldrb	r3, [r0, #10]
 80197dc:	f365 0306 	bfi	r3, r5, #0, #7
 80197e0:	f89d 501c 	ldrb.w	r5, [sp, #28]
 80197e4:	f365 13c7 	bfi	r3, r5, #7, #1
 80197e8:	7283      	strb	r3, [r0, #10]
 80197ea:	f89d 3020 	ldrb.w	r3, [sp, #32]
 80197ee:	72c3      	strb	r3, [r0, #11]
 80197f0:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 80197f4:	7303      	strb	r3, [r0, #12]
 80197f6:	f8bd 3028 	ldrh.w	r3, [sp, #40]	@ 0x28
 80197fa:	81c3      	strh	r3, [r0, #14]
 80197fc:	f8bd 302c 	ldrh.w	r3, [sp, #44]	@ 0x2c
 8019800:	8203      	strh	r3, [r0, #16]
 8019802:	4b01      	ldr	r3, [pc, #4]	@ (8019808 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt+0x4c>)
 8019804:	6003      	str	r3, [r0, #0]
 8019806:	bd30      	pop	{r4, r5, pc}
 8019808:	0802d1c4 	.word	0x0802d1c4

0801980c <_ZNK8touchgfx9ConstFont4findEt>:
 801980c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801980e:	6944      	ldr	r4, [r0, #20]
 8019810:	b3bc      	cbz	r4, 8019882 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8019812:	88a3      	ldrh	r3, [r4, #4]
 8019814:	8b02      	ldrh	r2, [r0, #24]
 8019816:	1acb      	subs	r3, r1, r3
 8019818:	f102 32ff 	add.w	r2, r2, #4294967295
 801981c:	d431      	bmi.n	8019882 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801981e:	4293      	cmp	r3, r2
 8019820:	dd0c      	ble.n	801983c <_ZNK8touchgfx9ConstFont4findEt+0x30>
 8019822:	230e      	movs	r3, #14
 8019824:	fb03 4302 	mla	r3, r3, r2, r4
 8019828:	889b      	ldrh	r3, [r3, #4]
 801982a:	1a5b      	subs	r3, r3, r1
 801982c:	1ad3      	subs	r3, r2, r3
 801982e:	429a      	cmp	r2, r3
 8019830:	db27      	blt.n	8019882 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8019832:	2b00      	cmp	r3, #0
 8019834:	bfbc      	itt	lt
 8019836:	2302      	movlt	r3, #2
 8019838:	fb92 f3f3 	sdivlt	r3, r2, r3
 801983c:	2500      	movs	r5, #0
 801983e:	260e      	movs	r6, #14
 8019840:	4295      	cmp	r5, r2
 8019842:	dc1e      	bgt.n	8019882 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8019844:	fb06 4003 	mla	r0, r6, r3, r4
 8019848:	8887      	ldrh	r7, [r0, #4]
 801984a:	42b9      	cmp	r1, r7
 801984c:	d01a      	beq.n	8019884 <_ZNK8touchgfx9ConstFont4findEt+0x78>
 801984e:	d20d      	bcs.n	801986c <_ZNK8touchgfx9ConstFont4findEt+0x60>
 8019850:	1e5a      	subs	r2, r3, #1
 8019852:	4295      	cmp	r5, r2
 8019854:	dc15      	bgt.n	8019882 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8019856:	f830 3c0a 	ldrh.w	r3, [r0, #-10]
 801985a:	1a5b      	subs	r3, r3, r1
 801985c:	1ad3      	subs	r3, r2, r3
 801985e:	429a      	cmp	r2, r3
 8019860:	db0f      	blt.n	8019882 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8019862:	429d      	cmp	r5, r3
 8019864:	ddec      	ble.n	8019840 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 8019866:	1953      	adds	r3, r2, r5
 8019868:	105b      	asrs	r3, r3, #1
 801986a:	e7e9      	b.n	8019840 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 801986c:	1c5d      	adds	r5, r3, #1
 801986e:	42aa      	cmp	r2, r5
 8019870:	db07      	blt.n	8019882 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8019872:	8a43      	ldrh	r3, [r0, #18]
 8019874:	1acb      	subs	r3, r1, r3
 8019876:	442b      	add	r3, r5
 8019878:	429d      	cmp	r5, r3
 801987a:	dc02      	bgt.n	8019882 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801987c:	429a      	cmp	r2, r3
 801987e:	dadf      	bge.n	8019840 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 8019880:	e7f1      	b.n	8019866 <_ZNK8touchgfx9ConstFont4findEt+0x5a>
 8019882:	2000      	movs	r0, #0
 8019884:	bdf0      	pop	{r4, r5, r6, r7, pc}

08019886 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh>:
 8019886:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019888:	4604      	mov	r4, r0
 801988a:	4617      	mov	r7, r2
 801988c:	461e      	mov	r6, r3
 801988e:	b911      	cbnz	r1, 8019896 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x10>
 8019890:	2500      	movs	r5, #0
 8019892:	4628      	mov	r0, r5
 8019894:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019896:	290a      	cmp	r1, #10
 8019898:	d0fa      	beq.n	8019890 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801989a:	f64f 62ff 	movw	r2, #65279	@ 0xfeff
 801989e:	4291      	cmp	r1, r2
 80198a0:	d0f6      	beq.n	8019890 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 80198a2:	f242 020b 	movw	r2, #8203	@ 0x200b
 80198a6:	4291      	cmp	r1, r2
 80198a8:	d0f2      	beq.n	8019890 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 80198aa:	f7ff ffaf 	bl	801980c <_ZNK8touchgfx9ConstFont4findEt>
 80198ae:	4605      	mov	r5, r0
 80198b0:	b950      	cbnz	r0, 80198c8 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x42>
 80198b2:	6823      	ldr	r3, [r4, #0]
 80198b4:	4620      	mov	r0, r4
 80198b6:	691b      	ldr	r3, [r3, #16]
 80198b8:	4798      	blx	r3
 80198ba:	4601      	mov	r1, r0
 80198bc:	4620      	mov	r0, r4
 80198be:	f7ff ffa5 	bl	801980c <_ZNK8touchgfx9ConstFont4findEt>
 80198c2:	4605      	mov	r5, r0
 80198c4:	2800      	cmp	r0, #0
 80198c6:	d0e3      	beq.n	8019890 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 80198c8:	6823      	ldr	r3, [r4, #0]
 80198ca:	4629      	mov	r1, r5
 80198cc:	4620      	mov	r0, r4
 80198ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80198d0:	4798      	blx	r3
 80198d2:	6038      	str	r0, [r7, #0]
 80198d4:	6823      	ldr	r3, [r4, #0]
 80198d6:	4620      	mov	r0, r4
 80198d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80198da:	4798      	blx	r3
 80198dc:	7030      	strb	r0, [r6, #0]
 80198de:	e7d8      	b.n	8019892 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xc>

080198e0 <_ZN8touchgfx34lookupNearestNeighborRenderVariantERKNS_6BitmapE>:
 80198e0:	b538      	push	{r3, r4, r5, lr}
 80198e2:	4605      	mov	r5, r0
 80198e4:	f002 fa64 	bl	801bdb0 <_ZNK8touchgfx6Bitmap9getFormatEv>
 80198e8:	4604      	mov	r4, r0
 80198ea:	4628      	mov	r0, r5
 80198ec:	f002 f9a4 	bl	801bc38 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
 80198f0:	2800      	cmp	r0, #0
 80198f2:	bf14      	ite	ne
 80198f4:	2002      	movne	r0, #2
 80198f6:	2000      	moveq	r0, #0
 80198f8:	ea40 0084 	orr.w	r0, r0, r4, lsl #2
 80198fc:	b280      	uxth	r0, r0
 80198fe:	bd38      	pop	{r3, r4, r5, pc}

08019900 <_ZN8touchgfx27lookupBilinearRenderVariantERKNS_6BitmapE>:
 8019900:	b538      	push	{r3, r4, r5, lr}
 8019902:	4605      	mov	r5, r0
 8019904:	f002 fa54 	bl	801bdb0 <_ZNK8touchgfx6Bitmap9getFormatEv>
 8019908:	4604      	mov	r4, r0
 801990a:	4628      	mov	r0, r5
 801990c:	f002 f994 	bl	801bc38 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
 8019910:	2800      	cmp	r0, #0
 8019912:	bf14      	ite	ne
 8019914:	2002      	movne	r0, #2
 8019916:	2000      	moveq	r0, #0
 8019918:	ea40 0084 	orr.w	r0, r0, r4, lsl #2
 801991c:	f040 0001 	orr.w	r0, r0, #1
 8019920:	b280      	uxth	r0, r0
 8019922:	bd38      	pop	{r3, r4, r5, pc}

08019924 <_ZN8touchgfx4clzuEm>:
 8019924:	4603      	mov	r3, r0
 8019926:	b1c8      	cbz	r0, 801995c <_ZN8touchgfx4clzuEm+0x38>
 8019928:	0c02      	lsrs	r2, r0, #16
 801992a:	0412      	lsls	r2, r2, #16
 801992c:	b9a2      	cbnz	r2, 8019958 <_ZN8touchgfx4clzuEm+0x34>
 801992e:	0403      	lsls	r3, r0, #16
 8019930:	2010      	movs	r0, #16
 8019932:	f013 4f7f 	tst.w	r3, #4278190080	@ 0xff000000
 8019936:	bf04      	itt	eq
 8019938:	021b      	lsleq	r3, r3, #8
 801993a:	3008      	addeq	r0, #8
 801993c:	f013 4f70 	tst.w	r3, #4026531840	@ 0xf0000000
 8019940:	bf04      	itt	eq
 8019942:	011b      	lsleq	r3, r3, #4
 8019944:	3004      	addeq	r0, #4
 8019946:	f013 4f40 	tst.w	r3, #3221225472	@ 0xc0000000
 801994a:	bf04      	itt	eq
 801994c:	009b      	lsleq	r3, r3, #2
 801994e:	3002      	addeq	r0, #2
 8019950:	2b00      	cmp	r3, #0
 8019952:	db04      	blt.n	801995e <_ZN8touchgfx4clzuEm+0x3a>
 8019954:	3001      	adds	r0, #1
 8019956:	4770      	bx	lr
 8019958:	2000      	movs	r0, #0
 801995a:	e7ea      	b.n	8019932 <_ZN8touchgfx4clzuEm+0xe>
 801995c:	2020      	movs	r0, #32
 801995e:	4770      	bx	lr

08019960 <_ZN8touchgfx7muldivuEmmmRm>:
 8019960:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8019964:	460f      	mov	r7, r1
 8019966:	4615      	mov	r5, r2
 8019968:	461e      	mov	r6, r3
 801996a:	4601      	mov	r1, r0
 801996c:	b100      	cbz	r0, 8019970 <_ZN8touchgfx7muldivuEmmmRm+0x10>
 801996e:	b927      	cbnz	r7, 801997a <_ZN8touchgfx7muldivuEmmmRm+0x1a>
 8019970:	2000      	movs	r0, #0
 8019972:	6030      	str	r0, [r6, #0]
 8019974:	b002      	add	sp, #8
 8019976:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801997a:	f7ff ffd3 	bl	8019924 <_ZN8touchgfx4clzuEm>
 801997e:	b980      	cbnz	r0, 80199a2 <_ZN8touchgfx7muldivuEmmmRm+0x42>
 8019980:	4638      	mov	r0, r7
 8019982:	f7ff ffcf 	bl	8019924 <_ZN8touchgfx4clzuEm>
 8019986:	2800      	cmp	r0, #0
 8019988:	dd05      	ble.n	8019996 <_ZN8touchgfx7muldivuEmmmRm+0x36>
 801998a:	4633      	mov	r3, r6
 801998c:	462a      	mov	r2, r5
 801998e:	4638      	mov	r0, r7
 8019990:	f7ff ffe6 	bl	8019960 <_ZN8touchgfx7muldivuEmmmRm>
 8019994:	e7ee      	b.n	8019974 <_ZN8touchgfx7muldivuEmmmRm+0x14>
 8019996:	f04f 33ff 	mov.w	r3, #4294967295
 801999a:	f06f 4000 	mvn.w	r0, #2147483648	@ 0x80000000
 801999e:	6033      	str	r3, [r6, #0]
 80199a0:	e7e8      	b.n	8019974 <_ZN8touchgfx7muldivuEmmmRm+0x14>
 80199a2:	fa37 f800 	lsrs.w	r8, r7, r0
 80199a6:	fb07 f301 	mul.w	r3, r7, r1
 80199aa:	d105      	bne.n	80199b8 <_ZN8touchgfx7muldivuEmmmRm+0x58>
 80199ac:	fbb3 f0f5 	udiv	r0, r3, r5
 80199b0:	fb05 3510 	mls	r5, r5, r0, r3
 80199b4:	6035      	str	r5, [r6, #0]
 80199b6:	e7dd      	b.n	8019974 <_ZN8touchgfx7muldivuEmmmRm+0x14>
 80199b8:	2301      	movs	r3, #1
 80199ba:	fa01 fa00 	lsl.w	sl, r1, r0
 80199be:	462a      	mov	r2, r5
 80199c0:	fa03 f000 	lsl.w	r0, r3, r0
 80199c4:	4633      	mov	r3, r6
 80199c6:	fbba f9f5 	udiv	r9, sl, r5
 80199ca:	3801      	subs	r0, #1
 80199cc:	fb08 f409 	mul.w	r4, r8, r9
 80199d0:	4038      	ands	r0, r7
 80199d2:	f7ff ffc5 	bl	8019960 <_ZN8touchgfx7muldivuEmmmRm>
 80199d6:	462a      	mov	r2, r5
 80199d8:	4607      	mov	r7, r0
 80199da:	ab01      	add	r3, sp, #4
 80199dc:	fb05 a119 	mls	r1, r5, r9, sl
 80199e0:	4640      	mov	r0, r8
 80199e2:	f7ff ffbd 	bl	8019960 <_ZN8touchgfx7muldivuEmmmRm>
 80199e6:	9b01      	ldr	r3, [sp, #4]
 80199e8:	6832      	ldr	r2, [r6, #0]
 80199ea:	441a      	add	r2, r3
 80199ec:	fbb2 f3f5 	udiv	r3, r2, r5
 80199f0:	441c      	add	r4, r3
 80199f2:	fb05 2513 	mls	r5, r5, r3, r2
 80199f6:	443c      	add	r4, r7
 80199f8:	4420      	add	r0, r4
 80199fa:	e7db      	b.n	80199b4 <_ZN8touchgfx7muldivuEmmmRm+0x54>

080199fc <_ZN8touchgfx6muldivElllRl>:
 80199fc:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80199fe:	2800      	cmp	r0, #0
 8019a00:	461e      	mov	r6, r3
 8019a02:	bfba      	itte	lt
 8019a04:	4240      	neglt	r0, r0
 8019a06:	f04f 34ff 	movlt.w	r4, #4294967295
 8019a0a:	2401      	movge	r4, #1
 8019a0c:	2900      	cmp	r1, #0
 8019a0e:	bfbc      	itt	lt
 8019a10:	4249      	neglt	r1, r1
 8019a12:	4264      	neglt	r4, r4
 8019a14:	2a00      	cmp	r2, #0
 8019a16:	bfb6      	itet	lt
 8019a18:	4265      	neglt	r5, r4
 8019a1a:	4625      	movge	r5, r4
 8019a1c:	4252      	neglt	r2, r2
 8019a1e:	4288      	cmp	r0, r1
 8019a20:	bfc2      	ittt	gt
 8019a22:	4603      	movgt	r3, r0
 8019a24:	4608      	movgt	r0, r1
 8019a26:	4619      	movgt	r1, r3
 8019a28:	ab01      	add	r3, sp, #4
 8019a2a:	f7ff ff99 	bl	8019960 <_ZN8touchgfx7muldivuEmmmRm>
 8019a2e:	9b01      	ldr	r3, [sp, #4]
 8019a30:	4368      	muls	r0, r5
 8019a32:	435c      	muls	r4, r3
 8019a34:	6034      	str	r4, [r6, #0]
 8019a36:	b002      	add	sp, #8
 8019a38:	bd70      	pop	{r4, r5, r6, pc}

08019a3a <_ZN8touchgfx6muldivElll>:
 8019a3a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8019a3c:	4606      	mov	r6, r0
 8019a3e:	ab01      	add	r3, sp, #4
 8019a40:	460d      	mov	r5, r1
 8019a42:	4614      	mov	r4, r2
 8019a44:	f7ff ffda 	bl	80199fc <_ZN8touchgfx6muldivElllRl>
 8019a48:	2e00      	cmp	r6, #0
 8019a4a:	db20      	blt.n	8019a8e <_ZN8touchgfx6muldivElll+0x54>
 8019a4c:	bf14      	ite	ne
 8019a4e:	2301      	movne	r3, #1
 8019a50:	2300      	moveq	r3, #0
 8019a52:	2d00      	cmp	r5, #0
 8019a54:	db1e      	blt.n	8019a94 <_ZN8touchgfx6muldivElll+0x5a>
 8019a56:	bf14      	ite	ne
 8019a58:	2201      	movne	r2, #1
 8019a5a:	2200      	moveq	r2, #0
 8019a5c:	2c00      	cmp	r4, #0
 8019a5e:	fb03 f202 	mul.w	r2, r3, r2
 8019a62:	db1a      	blt.n	8019a9a <_ZN8touchgfx6muldivElll+0x60>
 8019a64:	bf14      	ite	ne
 8019a66:	2301      	movne	r3, #1
 8019a68:	2300      	moveq	r3, #0
 8019a6a:	4353      	muls	r3, r2
 8019a6c:	2b01      	cmp	r3, #1
 8019a6e:	d117      	bne.n	8019aa0 <_ZN8touchgfx6muldivElll+0x66>
 8019a70:	2c00      	cmp	r4, #0
 8019a72:	9b01      	ldr	r3, [sp, #4]
 8019a74:	bfb8      	it	lt
 8019a76:	4264      	neglt	r4, r4
 8019a78:	2b00      	cmp	r3, #0
 8019a7a:	f104 0401 	add.w	r4, r4, #1
 8019a7e:	bfb8      	it	lt
 8019a80:	425b      	neglt	r3, r3
 8019a82:	ebb3 0f64 	cmp.w	r3, r4, asr #1
 8019a86:	db00      	blt.n	8019a8a <_ZN8touchgfx6muldivElll+0x50>
 8019a88:	3001      	adds	r0, #1
 8019a8a:	b002      	add	sp, #8
 8019a8c:	bd70      	pop	{r4, r5, r6, pc}
 8019a8e:	f04f 33ff 	mov.w	r3, #4294967295
 8019a92:	e7de      	b.n	8019a52 <_ZN8touchgfx6muldivElll+0x18>
 8019a94:	f04f 32ff 	mov.w	r2, #4294967295
 8019a98:	e7e0      	b.n	8019a5c <_ZN8touchgfx6muldivElll+0x22>
 8019a9a:	f04f 33ff 	mov.w	r3, #4294967295
 8019a9e:	e7e4      	b.n	8019a6a <_ZN8touchgfx6muldivElll+0x30>
 8019aa0:	3301      	adds	r3, #1
 8019aa2:	d1f2      	bne.n	8019a8a <_ZN8touchgfx6muldivElll+0x50>
 8019aa4:	9b01      	ldr	r3, [sp, #4]
 8019aa6:	2c00      	cmp	r4, #0
 8019aa8:	bfb8      	it	lt
 8019aaa:	4264      	neglt	r4, r4
 8019aac:	2b00      	cmp	r3, #0
 8019aae:	bfb8      	it	lt
 8019ab0:	425b      	neglt	r3, r3
 8019ab2:	ebb3 0f64 	cmp.w	r3, r4, asr #1
 8019ab6:	bfc8      	it	gt
 8019ab8:	f100 30ff 	addgt.w	r0, r0, #4294967295
 8019abc:	e7e5      	b.n	8019a8a <_ZN8touchgfx6muldivElll+0x50>

08019abe <_ZNK8touchgfx10ClickEvent12getEventTypeEv>:
 8019abe:	2000      	movs	r0, #0
 8019ac0:	4770      	bx	lr

08019ac2 <_ZNK8touchgfx9DragEvent12getEventTypeEv>:
 8019ac2:	2001      	movs	r0, #1
 8019ac4:	4770      	bx	lr

08019ac6 <_ZNK8touchgfx12GestureEvent12getEventTypeEv>:
 8019ac6:	2002      	movs	r0, #2
 8019ac8:	4770      	bx	lr

08019aca <_ZN8touchgfx6ScreenD1Ev>:
 8019aca:	4770      	bx	lr

08019acc <_ZN8touchgfx12GestureEventD1Ev>:
 8019acc:	4770      	bx	lr

08019ace <_ZN8touchgfx9DragEventD1Ev>:
 8019ace:	4770      	bx	lr

08019ad0 <_ZN8touchgfx10ClickEventD1Ev>:
 8019ad0:	4770      	bx	lr

08019ad2 <_ZN8touchgfx10ClickEventD0Ev>:
 8019ad2:	b510      	push	{r4, lr}
 8019ad4:	4604      	mov	r4, r0
 8019ad6:	210c      	movs	r1, #12
 8019ad8:	f00d fcd9 	bl	802748e <_ZdlPvj>
 8019adc:	4620      	mov	r0, r4
 8019ade:	bd10      	pop	{r4, pc}

08019ae0 <_ZN8touchgfx9DragEventD0Ev>:
 8019ae0:	b510      	push	{r4, lr}
 8019ae2:	4604      	mov	r4, r0
 8019ae4:	2110      	movs	r1, #16
 8019ae6:	f00d fcd2 	bl	802748e <_ZdlPvj>
 8019aea:	4620      	mov	r0, r4
 8019aec:	bd10      	pop	{r4, pc}

08019aee <_ZN8touchgfx12GestureEventD0Ev>:
 8019aee:	b510      	push	{r4, lr}
 8019af0:	4604      	mov	r4, r0
 8019af2:	210c      	movs	r1, #12
 8019af4:	f00d fccb 	bl	802748e <_ZdlPvj>
 8019af8:	4620      	mov	r0, r4
 8019afa:	bd10      	pop	{r4, pc}

08019afc <_ZN8touchgfx6ScreenD0Ev>:
 8019afc:	b510      	push	{r4, lr}
 8019afe:	4604      	mov	r4, r0
 8019b00:	213c      	movs	r1, #60	@ 0x3c
 8019b02:	f00d fcc4 	bl	802748e <_ZdlPvj>
 8019b06:	4620      	mov	r0, r4
 8019b08:	bd10      	pop	{r4, pc}
	...

08019b0c <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE>:
 8019b0c:	b530      	push	{r4, r5, lr}
 8019b0e:	460d      	mov	r5, r1
 8019b10:	6b01      	ldr	r1, [r0, #48]	@ 0x30
 8019b12:	b087      	sub	sp, #28
 8019b14:	4604      	mov	r4, r0
 8019b16:	b301      	cbz	r1, 8019b5a <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x4e>
 8019b18:	a801      	add	r0, sp, #4
 8019b1a:	f7ff fb19 	bl	8019150 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8019b1e:	892a      	ldrh	r2, [r5, #8]
 8019b20:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8019b24:	7928      	ldrb	r0, [r5, #4]
 8019b26:	1ad2      	subs	r2, r2, r3
 8019b28:	8ea3      	ldrh	r3, [r4, #52]	@ 0x34
 8019b2a:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 8019b2e:	441a      	add	r2, r3
 8019b30:	896b      	ldrh	r3, [r5, #10]
 8019b32:	f8bd 5006 	ldrh.w	r5, [sp, #6]
 8019b36:	f88d 0010 	strb.w	r0, [sp, #16]
 8019b3a:	1b5b      	subs	r3, r3, r5
 8019b3c:	8ee5      	ldrh	r5, [r4, #54]	@ 0x36
 8019b3e:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8019b40:	442b      	add	r3, r5
 8019b42:	4d07      	ldr	r5, [pc, #28]	@ (8019b60 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x54>)
 8019b44:	f8ad 1012 	strh.w	r1, [sp, #18]
 8019b48:	a903      	add	r1, sp, #12
 8019b4a:	9503      	str	r5, [sp, #12]
 8019b4c:	f8ad 2014 	strh.w	r2, [sp, #20]
 8019b50:	f8ad 3016 	strh.w	r3, [sp, #22]
 8019b54:	6803      	ldr	r3, [r0, #0]
 8019b56:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8019b58:	4798      	blx	r3
 8019b5a:	b007      	add	sp, #28
 8019b5c:	bd30      	pop	{r4, r5, pc}
 8019b5e:	bf00      	nop
 8019b60:	0802d254 	.word	0x0802d254

08019b64 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE>:
 8019b64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019b68:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8019b6a:	b08a      	sub	sp, #40	@ 0x28
 8019b6c:	4604      	mov	r4, r0
 8019b6e:	460d      	mov	r5, r1
 8019b70:	b113      	cbz	r3, 8019b78 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x14>
 8019b72:	790b      	ldrb	r3, [r1, #4]
 8019b74:	2b00      	cmp	r3, #0
 8019b76:	d044      	beq.n	8019c02 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 8019b78:	f104 0804 	add.w	r8, r4, #4
 8019b7c:	a803      	add	r0, sp, #12
 8019b7e:	4641      	mov	r1, r8
 8019b80:	f7ff fae6 	bl	8019150 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8019b84:	792b      	ldrb	r3, [r5, #4]
 8019b86:	f9bd 700c 	ldrsh.w	r7, [sp, #12]
 8019b8a:	f9bd 600e 	ldrsh.w	r6, [sp, #14]
 8019b8e:	b983      	cbnz	r3, 8019bb2 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x4e>
 8019b90:	f104 0336 	add.w	r3, r4, #54	@ 0x36
 8019b94:	892a      	ldrh	r2, [r5, #8]
 8019b96:	88e9      	ldrh	r1, [r5, #6]
 8019b98:	4640      	mov	r0, r8
 8019b9a:	1b92      	subs	r2, r2, r6
 8019b9c:	9301      	str	r3, [sp, #4]
 8019b9e:	1bc9      	subs	r1, r1, r7
 8019ba0:	f104 0334 	add.w	r3, r4, #52	@ 0x34
 8019ba4:	b212      	sxth	r2, r2
 8019ba6:	9300      	str	r3, [sp, #0]
 8019ba8:	b209      	sxth	r1, r1
 8019baa:	f104 0330 	add.w	r3, r4, #48	@ 0x30
 8019bae:	f7f6 f8c5 	bl	800fd3c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>
 8019bb2:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8019bb4:	b329      	cbz	r1, 8019c02 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 8019bb6:	a805      	add	r0, sp, #20
 8019bb8:	f7ff faca 	bl	8019150 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8019bbc:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 8019bc0:	792b      	ldrb	r3, [r5, #4]
 8019bc2:	a907      	add	r1, sp, #28
 8019bc4:	1abf      	subs	r7, r7, r2
 8019bc6:	88ea      	ldrh	r2, [r5, #6]
 8019bc8:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8019bca:	4417      	add	r7, r2
 8019bcc:	8ea2      	ldrh	r2, [r4, #52]	@ 0x34
 8019bce:	f88d 3020 	strb.w	r3, [sp, #32]
 8019bd2:	4417      	add	r7, r2
 8019bd4:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 8019bd8:	1ab6      	subs	r6, r6, r2
 8019bda:	892a      	ldrh	r2, [r5, #8]
 8019bdc:	f8ad 7022 	strh.w	r7, [sp, #34]	@ 0x22
 8019be0:	4416      	add	r6, r2
 8019be2:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
 8019be4:	4416      	add	r6, r2
 8019be6:	4a08      	ldr	r2, [pc, #32]	@ (8019c08 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0xa4>)
 8019be8:	f8ad 6024 	strh.w	r6, [sp, #36]	@ 0x24
 8019bec:	2600      	movs	r6, #0
 8019bee:	9207      	str	r2, [sp, #28]
 8019bf0:	f8ad 6026 	strh.w	r6, [sp, #38]	@ 0x26
 8019bf4:	6803      	ldr	r3, [r0, #0]
 8019bf6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8019bf8:	4798      	blx	r3
 8019bfa:	792b      	ldrb	r3, [r5, #4]
 8019bfc:	b10b      	cbz	r3, 8019c02 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 8019bfe:	e9c4 660c 	strd	r6, r6, [r4, #48]	@ 0x30
 8019c02:	b00a      	add	sp, #40	@ 0x28
 8019c04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019c08:	0802d22c 	.word	0x0802d22c

08019c0c <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE>:
 8019c0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019c10:	460c      	mov	r4, r1
 8019c12:	6b01      	ldr	r1, [r0, #48]	@ 0x30
 8019c14:	b088      	sub	sp, #32
 8019c16:	4605      	mov	r5, r0
 8019c18:	2900      	cmp	r1, #0
 8019c1a:	d06d      	beq.n	8019cf8 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xec>
 8019c1c:	4668      	mov	r0, sp
 8019c1e:	f7ff fa97 	bl	8019150 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8019c22:	8ea9      	ldrh	r1, [r5, #52]	@ 0x34
 8019c24:	88e3      	ldrh	r3, [r4, #6]
 8019c26:	f9bd 8000 	ldrsh.w	r8, [sp]
 8019c2a:	440b      	add	r3, r1
 8019c2c:	f9bd 7002 	ldrsh.w	r7, [sp, #2]
 8019c30:	b21b      	sxth	r3, r3
 8019c32:	4543      	cmp	r3, r8
 8019c34:	db31      	blt.n	8019c9a <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 8019c36:	f8bd c004 	ldrh.w	ip, [sp, #4]
 8019c3a:	44c4      	add	ip, r8
 8019c3c:	fa0f fc8c 	sxth.w	ip, ip
 8019c40:	4563      	cmp	r3, ip
 8019c42:	da2a      	bge.n	8019c9a <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 8019c44:	8eea      	ldrh	r2, [r5, #54]	@ 0x36
 8019c46:	8926      	ldrh	r6, [r4, #8]
 8019c48:	4416      	add	r6, r2
 8019c4a:	b236      	sxth	r6, r6
 8019c4c:	42be      	cmp	r6, r7
 8019c4e:	db24      	blt.n	8019c9a <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 8019c50:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 8019c54:	4438      	add	r0, r7
 8019c56:	b200      	sxth	r0, r0
 8019c58:	4286      	cmp	r6, r0
 8019c5a:	da1e      	bge.n	8019c9a <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 8019c5c:	8963      	ldrh	r3, [r4, #10]
 8019c5e:	4419      	add	r1, r3
 8019c60:	b209      	sxth	r1, r1
 8019c62:	4541      	cmp	r1, r8
 8019c64:	db08      	blt.n	8019c78 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 8019c66:	4561      	cmp	r1, ip
 8019c68:	da06      	bge.n	8019c78 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 8019c6a:	89a3      	ldrh	r3, [r4, #12]
 8019c6c:	441a      	add	r2, r3
 8019c6e:	b212      	sxth	r2, r2
 8019c70:	42ba      	cmp	r2, r7
 8019c72:	db01      	blt.n	8019c78 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 8019c74:	4282      	cmp	r2, r0
 8019c76:	db10      	blt.n	8019c9a <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 8019c78:	4b21      	ldr	r3, [pc, #132]	@ (8019d00 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf4>)
 8019c7a:	a904      	add	r1, sp, #16
 8019c7c:	6b28      	ldr	r0, [r5, #48]	@ 0x30
 8019c7e:	9304      	str	r3, [sp, #16]
 8019c80:	2302      	movs	r3, #2
 8019c82:	f88d 3014 	strb.w	r3, [sp, #20]
 8019c86:	2300      	movs	r3, #0
 8019c88:	f8ad 3016 	strh.w	r3, [sp, #22]
 8019c8c:	f8ad 3018 	strh.w	r3, [sp, #24]
 8019c90:	f8ad 301a 	strh.w	r3, [sp, #26]
 8019c94:	6803      	ldr	r3, [r0, #0]
 8019c96:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8019c98:	4798      	blx	r3
 8019c9a:	1d29      	adds	r1, r5, #4
 8019c9c:	a802      	add	r0, sp, #8
 8019c9e:	f7ff fa57 	bl	8019150 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8019ca2:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 8019ca6:	88e0      	ldrh	r0, [r4, #6]
 8019ca8:	eba3 0808 	sub.w	r8, r3, r8
 8019cac:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8019cb0:	7921      	ldrb	r1, [r4, #4]
 8019cb2:	fa1f f888 	uxth.w	r8, r8
 8019cb6:	1bdf      	subs	r7, r3, r7
 8019cb8:	f8b5 c034 	ldrh.w	ip, [r5, #52]	@ 0x34
 8019cbc:	b2bb      	uxth	r3, r7
 8019cbe:	4440      	add	r0, r8
 8019cc0:	8922      	ldrh	r2, [r4, #8]
 8019cc2:	8967      	ldrh	r7, [r4, #10]
 8019cc4:	4460      	add	r0, ip
 8019cc6:	89a4      	ldrh	r4, [r4, #12]
 8019cc8:	441a      	add	r2, r3
 8019cca:	8eee      	ldrh	r6, [r5, #54]	@ 0x36
 8019ccc:	44b8      	add	r8, r7
 8019cce:	4423      	add	r3, r4
 8019cd0:	f8ad 0016 	strh.w	r0, [sp, #22]
 8019cd4:	4432      	add	r2, r6
 8019cd6:	44e0      	add	r8, ip
 8019cd8:	4433      	add	r3, r6
 8019cda:	4c0a      	ldr	r4, [pc, #40]	@ (8019d04 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf8>)
 8019cdc:	6b28      	ldr	r0, [r5, #48]	@ 0x30
 8019cde:	f88d 1014 	strb.w	r1, [sp, #20]
 8019ce2:	a904      	add	r1, sp, #16
 8019ce4:	9404      	str	r4, [sp, #16]
 8019ce6:	f8ad 2018 	strh.w	r2, [sp, #24]
 8019cea:	f8ad 801a 	strh.w	r8, [sp, #26]
 8019cee:	f8ad 301c 	strh.w	r3, [sp, #28]
 8019cf2:	6803      	ldr	r3, [r0, #0]
 8019cf4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8019cf6:	4798      	blx	r3
 8019cf8:	b008      	add	sp, #32
 8019cfa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019cfe:	bf00      	nop
 8019d00:	0802d22c 	.word	0x0802d22c
 8019d04:	0802d240 	.word	0x0802d240

08019d08 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>:
 8019d08:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8019d0a:	4604      	mov	r4, r0
 8019d0c:	f934 2f0c 	ldrsh.w	r2, [r4, #12]!
 8019d10:	3201      	adds	r2, #1
 8019d12:	d112      	bne.n	8019d3a <_ZN8touchgfx8Drawable20getCachedVisibleRectEv+0x32>
 8019d14:	2500      	movs	r5, #0
 8019d16:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 8019d1a:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8019d1e:	6803      	ldr	r3, [r0, #0]
 8019d20:	9500      	str	r5, [sp, #0]
 8019d22:	466d      	mov	r5, sp
 8019d24:	f8ad 1004 	strh.w	r1, [sp, #4]
 8019d28:	f8ad 2006 	strh.w	r2, [sp, #6]
 8019d2c:	4629      	mov	r1, r5
 8019d2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8019d30:	4798      	blx	r3
 8019d32:	e895 0003 	ldmia.w	r5, {r0, r1}
 8019d36:	e884 0003 	stmia.w	r4, {r0, r1}
 8019d3a:	4620      	mov	r0, r4
 8019d3c:	b003      	add	sp, #12
 8019d3e:	bd30      	pop	{r4, r5, pc}

08019d40 <_ZN8touchgfx8Drawable13getCachedAbsXEv>:
 8019d40:	b513      	push	{r0, r1, r4, lr}
 8019d42:	f9b0 3020 	ldrsh.w	r3, [r0, #32]
 8019d46:	4604      	mov	r4, r0
 8019d48:	3301      	adds	r3, #1
 8019d4a:	d109      	bne.n	8019d60 <_ZN8touchgfx8Drawable13getCachedAbsXEv+0x20>
 8019d4c:	4601      	mov	r1, r0
 8019d4e:	4668      	mov	r0, sp
 8019d50:	f7ff f9fe 	bl	8019150 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8019d54:	f8bd 3000 	ldrh.w	r3, [sp]
 8019d58:	8423      	strh	r3, [r4, #32]
 8019d5a:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8019d5e:	8463      	strh	r3, [r4, #34]	@ 0x22
 8019d60:	f9b4 0020 	ldrsh.w	r0, [r4, #32]
 8019d64:	b002      	add	sp, #8
 8019d66:	bd10      	pop	{r4, pc}

08019d68 <_ZN8touchgfx8Drawable13getCachedAbsYEv>:
 8019d68:	b513      	push	{r0, r1, r4, lr}
 8019d6a:	f9b0 3022 	ldrsh.w	r3, [r0, #34]	@ 0x22
 8019d6e:	4604      	mov	r4, r0
 8019d70:	3301      	adds	r3, #1
 8019d72:	d109      	bne.n	8019d88 <_ZN8touchgfx8Drawable13getCachedAbsYEv+0x20>
 8019d74:	4601      	mov	r1, r0
 8019d76:	4668      	mov	r0, sp
 8019d78:	f7ff f9ea 	bl	8019150 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8019d7c:	f8bd 3000 	ldrh.w	r3, [sp]
 8019d80:	8423      	strh	r3, [r4, #32]
 8019d82:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8019d86:	8463      	strh	r3, [r4, #34]	@ 0x22
 8019d88:	f9b4 0022 	ldrsh.w	r0, [r4, #34]	@ 0x22
 8019d8c:	b002      	add	sp, #8
 8019d8e:	bd10      	pop	{r4, pc}

08019d90 <_ZN8touchgfx6ScreenC1Ev>:
 8019d90:	b570      	push	{r4, r5, r6, lr}
 8019d92:	4b17      	ldr	r3, [pc, #92]	@ (8019df0 <_ZN8touchgfx6ScreenC1Ev+0x60>)
 8019d94:	4605      	mov	r5, r0
 8019d96:	4a17      	ldr	r2, [pc, #92]	@ (8019df4 <_ZN8touchgfx6ScreenC1Ev+0x64>)
 8019d98:	2101      	movs	r1, #1
 8019d9a:	f845 3b04 	str.w	r3, [r5], #4
 8019d9e:	2300      	movs	r3, #0
 8019da0:	6042      	str	r2, [r0, #4]
 8019da2:	4604      	mov	r4, r0
 8019da4:	8103      	strh	r3, [r0, #8]
 8019da6:	8143      	strh	r3, [r0, #10]
 8019da8:	8183      	strh	r3, [r0, #12]
 8019daa:	81c3      	strh	r3, [r0, #14]
 8019dac:	8203      	strh	r3, [r0, #16]
 8019dae:	8243      	strh	r3, [r0, #18]
 8019db0:	8283      	strh	r3, [r0, #20]
 8019db2:	82c3      	strh	r3, [r0, #22]
 8019db4:	6203      	str	r3, [r0, #32]
 8019db6:	8483      	strh	r3, [r0, #36]	@ 0x24
 8019db8:	84c3      	strh	r3, [r0, #38]	@ 0x26
 8019dba:	f880 3028 	strb.w	r3, [r0, #40]	@ 0x28
 8019dbe:	6343      	str	r3, [r0, #52]	@ 0x34
 8019dc0:	f880 1029 	strb.w	r1, [r0, #41]	@ 0x29
 8019dc4:	f880 1038 	strb.w	r1, [r0, #56]	@ 0x38
 8019dc8:	e9c0 3306 	strd	r3, r3, [r0, #24]
 8019dcc:	e9c0 330b 	strd	r3, r3, [r0, #44]	@ 0x2c
 8019dd0:	4b09      	ldr	r3, [pc, #36]	@ (8019df8 <_ZN8touchgfx6ScreenC1Ev+0x68>)
 8019dd2:	4628      	mov	r0, r5
 8019dd4:	f9b3 6000 	ldrsh.w	r6, [r3]
 8019dd8:	6b93      	ldr	r3, [r2, #56]	@ 0x38
 8019dda:	4a08      	ldr	r2, [pc, #32]	@ (8019dfc <_ZN8touchgfx6ScreenC1Ev+0x6c>)
 8019ddc:	f9b2 1000 	ldrsh.w	r1, [r2]
 8019de0:	4798      	blx	r3
 8019de2:	6863      	ldr	r3, [r4, #4]
 8019de4:	4628      	mov	r0, r5
 8019de6:	4631      	mov	r1, r6
 8019de8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8019dea:	4798      	blx	r3
 8019dec:	4620      	mov	r0, r4
 8019dee:	bd70      	pop	{r4, r5, r6, pc}
 8019df0:	0802d268 	.word	0x0802d268
 8019df4:	0802c70c 	.word	0x0802c70c
 8019df8:	24028e16 	.word	0x24028e16
 8019dfc:	24028e14 	.word	0x24028e14

08019e00 <_ZN8touchgfx6Screen4drawEv>:
 8019e00:	4b09      	ldr	r3, [pc, #36]	@ (8019e28 <_ZN8touchgfx6Screen4drawEv+0x28>)
 8019e02:	b507      	push	{r0, r1, r2, lr}
 8019e04:	f9b3 2000 	ldrsh.w	r2, [r3]
 8019e08:	2100      	movs	r1, #0
 8019e0a:	4b08      	ldr	r3, [pc, #32]	@ (8019e2c <_ZN8touchgfx6Screen4drawEv+0x2c>)
 8019e0c:	9100      	str	r1, [sp, #0]
 8019e0e:	4669      	mov	r1, sp
 8019e10:	f9b3 3000 	ldrsh.w	r3, [r3]
 8019e14:	f8ad 2004 	strh.w	r2, [sp, #4]
 8019e18:	f8ad 3006 	strh.w	r3, [sp, #6]
 8019e1c:	6803      	ldr	r3, [r0, #0]
 8019e1e:	689b      	ldr	r3, [r3, #8]
 8019e20:	4798      	blx	r3
 8019e22:	b003      	add	sp, #12
 8019e24:	f85d fb04 	ldr.w	pc, [sp], #4
 8019e28:	24028e14 	.word	0x24028e14
 8019e2c:	24028e16 	.word	0x24028e16

08019e30 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>:
 8019e30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019e34:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 8019e38:	b089      	sub	sp, #36	@ 0x24
 8019e3a:	4680      	mov	r8, r0
 8019e3c:	460c      	mov	r4, r1
 8019e3e:	2b00      	cmp	r3, #0
 8019e40:	4615      	mov	r5, r2
 8019e42:	dd0e      	ble.n	8019e62 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 8019e44:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 8019e48:	2b00      	cmp	r3, #0
 8019e4a:	dd0a      	ble.n	8019e62 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 8019e4c:	4628      	mov	r0, r5
 8019e4e:	f7ff ff5b 	bl	8019d08 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 8019e52:	4621      	mov	r1, r4
 8019e54:	f7fd ff17 	bl	8017c86 <_ZNK8touchgfx4Rect9intersectERKS0_>
 8019e58:	69eb      	ldr	r3, [r5, #28]
 8019e5a:	b928      	cbnz	r0, 8019e68 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x38>
 8019e5c:	461d      	mov	r5, r3
 8019e5e:	2b00      	cmp	r3, #0
 8019e60:	d1f4      	bne.n	8019e4c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1c>
 8019e62:	b009      	add	sp, #36	@ 0x24
 8019e64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019e68:	ae04      	add	r6, sp, #16
 8019e6a:	2b00      	cmp	r3, #0
 8019e6c:	f000 80b5 	beq.w	8019fda <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 8019e70:	682b      	ldr	r3, [r5, #0]
 8019e72:	4629      	mov	r1, r5
 8019e74:	a802      	add	r0, sp, #8
 8019e76:	68db      	ldr	r3, [r3, #12]
 8019e78:	4798      	blx	r3
 8019e7a:	4628      	mov	r0, r5
 8019e7c:	f7ff ff60 	bl	8019d40 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 8019e80:	f8bd 7008 	ldrh.w	r7, [sp, #8]
 8019e84:	4407      	add	r7, r0
 8019e86:	4628      	mov	r0, r5
 8019e88:	f7ff ff6e 	bl	8019d68 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 8019e8c:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8019e90:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 8019e94:	b23f      	sxth	r7, r7
 8019e96:	4418      	add	r0, r3
 8019e98:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 8019e9c:	4621      	mov	r1, r4
 8019e9e:	f8ad 2014 	strh.w	r2, [sp, #20]
 8019ea2:	f8ad 0012 	strh.w	r0, [sp, #18]
 8019ea6:	4630      	mov	r0, r6
 8019ea8:	f8ad 3016 	strh.w	r3, [sp, #22]
 8019eac:	f8ad 7010 	strh.w	r7, [sp, #16]
 8019eb0:	f7f6 f826 	bl	800ff00 <_ZN8touchgfx4RectaNERKS0_>
 8019eb4:	4628      	mov	r0, r5
 8019eb6:	f7ff ff27 	bl	8019d08 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 8019eba:	ab06      	add	r3, sp, #24
 8019ebc:	4602      	mov	r2, r0
 8019ebe:	e896 0003 	ldmia.w	r6, {r0, r1}
 8019ec2:	e883 0003 	stmia.w	r3, {r0, r1}
 8019ec6:	4611      	mov	r1, r2
 8019ec8:	4618      	mov	r0, r3
 8019eca:	f7f6 f819 	bl	800ff00 <_ZN8touchgfx4RectaNERKS0_>
 8019ece:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 8019ed2:	f9b4 1000 	ldrsh.w	r1, [r4]
 8019ed6:	f9bd a01a 	ldrsh.w	sl, [sp, #26]
 8019eda:	4299      	cmp	r1, r3
 8019edc:	f9bd b01c 	ldrsh.w	fp, [sp, #28]
 8019ee0:	f9bd 901e 	ldrsh.w	r9, [sp, #30]
 8019ee4:	d10b      	bne.n	8019efe <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 8019ee6:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 8019eea:	4552      	cmp	r2, sl
 8019eec:	d107      	bne.n	8019efe <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 8019eee:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 8019ef2:	455a      	cmp	r2, fp
 8019ef4:	d103      	bne.n	8019efe <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 8019ef6:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 8019efa:	454a      	cmp	r2, r9
 8019efc:	d06d      	beq.n	8019fda <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 8019efe:	f1bb 0f00 	cmp.w	fp, #0
 8019f02:	dd65      	ble.n	8019fd0 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 8019f04:	f1b9 0f00 	cmp.w	r9, #0
 8019f08:	dd62      	ble.n	8019fd0 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 8019f0a:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 8019f0e:	fa1f f08a 	uxth.w	r0, sl
 8019f12:	4552      	cmp	r2, sl
 8019f14:	9000      	str	r0, [sp, #0]
 8019f16:	da12      	bge.n	8019f3e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x10e>
 8019f18:	9301      	str	r3, [sp, #4]
 8019f1a:	9b00      	ldr	r3, [sp, #0]
 8019f1c:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 8019f20:	f8ad 2012 	strh.w	r2, [sp, #18]
 8019f24:	1a9a      	subs	r2, r3, r2
 8019f26:	f8ad 1010 	strh.w	r1, [sp, #16]
 8019f2a:	4631      	mov	r1, r6
 8019f2c:	f8ad 0014 	strh.w	r0, [sp, #20]
 8019f30:	4640      	mov	r0, r8
 8019f32:	f8ad 2016 	strh.w	r2, [sp, #22]
 8019f36:	69ea      	ldr	r2, [r5, #28]
 8019f38:	f7ff ff7a 	bl	8019e30 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8019f3c:	9b01      	ldr	r3, [sp, #4]
 8019f3e:	f9b4 2000 	ldrsh.w	r2, [r4]
 8019f42:	b29f      	uxth	r7, r3
 8019f44:	429a      	cmp	r2, r3
 8019f46:	da0d      	bge.n	8019f64 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x134>
 8019f48:	f8ad 2010 	strh.w	r2, [sp, #16]
 8019f4c:	1aba      	subs	r2, r7, r2
 8019f4e:	f8ad a012 	strh.w	sl, [sp, #18]
 8019f52:	4631      	mov	r1, r6
 8019f54:	f8ad 2014 	strh.w	r2, [sp, #20]
 8019f58:	4640      	mov	r0, r8
 8019f5a:	f8ad 9016 	strh.w	r9, [sp, #22]
 8019f5e:	69ea      	ldr	r2, [r5, #28]
 8019f60:	f7ff ff66 	bl	8019e30 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8019f64:	8822      	ldrh	r2, [r4, #0]
 8019f66:	445f      	add	r7, fp
 8019f68:	88a3      	ldrh	r3, [r4, #4]
 8019f6a:	b2bf      	uxth	r7, r7
 8019f6c:	4413      	add	r3, r2
 8019f6e:	b23a      	sxth	r2, r7
 8019f70:	b29b      	uxth	r3, r3
 8019f72:	b219      	sxth	r1, r3
 8019f74:	4291      	cmp	r1, r2
 8019f76:	dd0d      	ble.n	8019f94 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x164>
 8019f78:	1bdb      	subs	r3, r3, r7
 8019f7a:	f8ad 2010 	strh.w	r2, [sp, #16]
 8019f7e:	f8ad a012 	strh.w	sl, [sp, #18]
 8019f82:	4631      	mov	r1, r6
 8019f84:	f8ad 3014 	strh.w	r3, [sp, #20]
 8019f88:	4640      	mov	r0, r8
 8019f8a:	f8ad 9016 	strh.w	r9, [sp, #22]
 8019f8e:	69ea      	ldr	r2, [r5, #28]
 8019f90:	f7ff ff4e 	bl	8019e30 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8019f94:	88e2      	ldrh	r2, [r4, #6]
 8019f96:	8863      	ldrh	r3, [r4, #2]
 8019f98:	4413      	add	r3, r2
 8019f9a:	9a00      	ldr	r2, [sp, #0]
 8019f9c:	444a      	add	r2, r9
 8019f9e:	b29b      	uxth	r3, r3
 8019fa0:	fa1f f982 	uxth.w	r9, r2
 8019fa4:	b219      	sxth	r1, r3
 8019fa6:	fa0f f289 	sxth.w	r2, r9
 8019faa:	428a      	cmp	r2, r1
 8019fac:	da15      	bge.n	8019fda <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 8019fae:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8019fb2:	eba3 0309 	sub.w	r3, r3, r9
 8019fb6:	f9b4 0000 	ldrsh.w	r0, [r4]
 8019fba:	f8ad 1014 	strh.w	r1, [sp, #20]
 8019fbe:	4631      	mov	r1, r6
 8019fc0:	f8ad 0010 	strh.w	r0, [sp, #16]
 8019fc4:	f8ad 2012 	strh.w	r2, [sp, #18]
 8019fc8:	f8ad 3016 	strh.w	r3, [sp, #22]
 8019fcc:	69ea      	ldr	r2, [r5, #28]
 8019fce:	e001      	b.n	8019fd4 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a4>
 8019fd0:	69ea      	ldr	r2, [r5, #28]
 8019fd2:	4621      	mov	r1, r4
 8019fd4:	4640      	mov	r0, r8
 8019fd6:	f7ff ff2b 	bl	8019e30 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8019fda:	4628      	mov	r0, r5
 8019fdc:	f7ff fe94 	bl	8019d08 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 8019fe0:	6861      	ldr	r1, [r4, #4]
 8019fe2:	4602      	mov	r2, r0
 8019fe4:	4633      	mov	r3, r6
 8019fe6:	6820      	ldr	r0, [r4, #0]
 8019fe8:	c303      	stmia	r3!, {r0, r1}
 8019fea:	4611      	mov	r1, r2
 8019fec:	4630      	mov	r0, r6
 8019fee:	f7f5 ff87 	bl	800ff00 <_ZN8touchgfx4RectaNERKS0_>
 8019ff2:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 8019ff6:	2b00      	cmp	r3, #0
 8019ff8:	f77f af33 	ble.w	8019e62 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 8019ffc:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 801a000:	2b00      	cmp	r3, #0
 801a002:	f77f af2e 	ble.w	8019e62 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801a006:	4628      	mov	r0, r5
 801a008:	f7ff fe9a 	bl	8019d40 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 801a00c:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 801a010:	1a18      	subs	r0, r3, r0
 801a012:	f8ad 0010 	strh.w	r0, [sp, #16]
 801a016:	4628      	mov	r0, r5
 801a018:	f7ff fea6 	bl	8019d68 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 801a01c:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 801a020:	4631      	mov	r1, r6
 801a022:	1a18      	subs	r0, r3, r0
 801a024:	f8ad 0012 	strh.w	r0, [sp, #18]
 801a028:	4628      	mov	r0, r5
 801a02a:	682b      	ldr	r3, [r5, #0]
 801a02c:	689b      	ldr	r3, [r3, #8]
 801a02e:	4798      	blx	r3
 801a030:	e717      	b.n	8019e62 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>

0801a032 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>:
 801a032:	b570      	push	{r4, r5, r6, lr}
 801a034:	1d06      	adds	r6, r0, #4
 801a036:	b086      	sub	sp, #24
 801a038:	460c      	mov	r4, r1
 801a03a:	2300      	movs	r3, #0
 801a03c:	4631      	mov	r1, r6
 801a03e:	4605      	mov	r5, r0
 801a040:	a802      	add	r0, sp, #8
 801a042:	9301      	str	r3, [sp, #4]
 801a044:	f7ff f884 	bl	8019150 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801a048:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 801a04c:	8822      	ldrh	r2, [r4, #0]
 801a04e:	f8bd 100a 	ldrh.w	r1, [sp, #10]
 801a052:	1ad2      	subs	r2, r2, r3
 801a054:	8863      	ldrh	r3, [r4, #2]
 801a056:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 801a05a:	1a5b      	subs	r3, r3, r1
 801a05c:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 801a060:	f8ad 2010 	strh.w	r2, [sp, #16]
 801a064:	aa01      	add	r2, sp, #4
 801a066:	f8ad 0014 	strh.w	r0, [sp, #20]
 801a06a:	4630      	mov	r0, r6
 801a06c:	f8ad 1016 	strh.w	r1, [sp, #22]
 801a070:	a904      	add	r1, sp, #16
 801a072:	f8ad 3012 	strh.w	r3, [sp, #18]
 801a076:	f7f6 f81b 	bl	80100b0 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>
 801a07a:	9a01      	ldr	r2, [sp, #4]
 801a07c:	b11a      	cbz	r2, 801a086 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE+0x54>
 801a07e:	4621      	mov	r1, r4
 801a080:	4628      	mov	r0, r5
 801a082:	f7ff fed5 	bl	8019e30 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801a086:	b006      	add	sp, #24
 801a088:	bd70      	pop	{r4, r5, r6, pc}

0801a08a <_ZN8touchgfx6Screen4drawERNS_4RectE>:
 801a08a:	4602      	mov	r2, r0
 801a08c:	b530      	push	{r4, r5, lr}
 801a08e:	4604      	mov	r4, r0
 801a090:	b085      	sub	sp, #20
 801a092:	f852 0f08 	ldr.w	r0, [r2, #8]!
 801a096:	460d      	mov	r5, r1
 801a098:	466b      	mov	r3, sp
 801a09a:	6851      	ldr	r1, [r2, #4]
 801a09c:	c303      	stmia	r3!, {r0, r1}
 801a09e:	4629      	mov	r1, r5
 801a0a0:	4668      	mov	r0, sp
 801a0a2:	f7f5 ff2d 	bl	800ff00 <_ZN8touchgfx4RectaNERKS0_>
 801a0a6:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 801a0aa:	b12b      	cbz	r3, 801a0b8 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2e>
 801a0ac:	4669      	mov	r1, sp
 801a0ae:	4620      	mov	r0, r4
 801a0b0:	f7ff ffbf 	bl	801a032 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>
 801a0b4:	b005      	add	sp, #20
 801a0b6:	bd30      	pop	{r4, r5, pc}
 801a0b8:	3404      	adds	r4, #4
 801a0ba:	a802      	add	r0, sp, #8
 801a0bc:	4621      	mov	r1, r4
 801a0be:	f7ff f847 	bl	8019150 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801a0c2:	f8bd 3000 	ldrh.w	r3, [sp]
 801a0c6:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 801a0ca:	4669      	mov	r1, sp
 801a0cc:	4620      	mov	r0, r4
 801a0ce:	1a9b      	subs	r3, r3, r2
 801a0d0:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 801a0d4:	f8ad 3000 	strh.w	r3, [sp]
 801a0d8:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801a0dc:	1a9b      	subs	r3, r3, r2
 801a0de:	f8ad 3002 	strh.w	r3, [sp, #2]
 801a0e2:	f7f5 ffac 	bl	801003e <_ZNK8touchgfx9Container4drawERKNS_4RectE>
 801a0e6:	e7e5      	b.n	801a0b4 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2a>

0801a0e8 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>:
 801a0e8:	460b      	mov	r3, r1
 801a0ea:	680a      	ldr	r2, [r1, #0]
 801a0ec:	1d01      	adds	r1, r0, #4
 801a0ee:	6992      	ldr	r2, [r2, #24]
 801a0f0:	4618      	mov	r0, r3
 801a0f2:	4710      	bx	r2

0801a0f4 <_ZN8touchgfx15EasingEquations11backEaseOutEtsst>:
 801a0f4:	4298      	cmp	r0, r3
 801a0f6:	d200      	bcs.n	801a0fa <_ZN8touchgfx15EasingEquations11backEaseOutEtsst+0x6>
 801a0f8:	b913      	cbnz	r3, 801a100 <_ZN8touchgfx15EasingEquations11backEaseOutEtsst+0xc>
 801a0fa:	440a      	add	r2, r1
 801a0fc:	b210      	sxth	r0, r2
 801a0fe:	4770      	bx	lr
 801a100:	ee07 0a90 	vmov	s15, r0
 801a104:	eddf 4a18 	vldr	s9, [pc, #96]	@ 801a168 <_ZN8touchgfx15EasingEquations11backEaseOutEtsst+0x74>
 801a108:	eddf 5a18 	vldr	s11, [pc, #96]	@ 801a16c <_ZN8touchgfx15EasingEquations11backEaseOutEtsst+0x78>
 801a10c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801a110:	ee07 3a90 	vmov	s15, r3
 801a114:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801a118:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801a11c:	ee07 2a90 	vmov	s15, r2
 801a120:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801a124:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 801a128:	ee07 1a90 	vmov	s15, r1
 801a12c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801a130:	ee37 7a66 	vsub.f32	s14, s14, s13
 801a134:	eee7 5a24 	vfma.f32	s11, s14, s9
 801a138:	ee27 5a07 	vmul.f32	s10, s14, s14
 801a13c:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 801a140:	eee5 6a25 	vfma.f32	s13, s10, s11
 801a144:	eee6 7a26 	vfma.f32	s15, s12, s13
 801a148:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801a14c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a150:	bfcc      	ite	gt
 801a152:	ee77 7a87 	vaddgt.f32	s15, s15, s14
 801a156:	ee77 7ac7 	vsuble.f32	s15, s15, s14
 801a15a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801a15e:	ee17 3a90 	vmov	r3, s15
 801a162:	b218      	sxth	r0, r3
 801a164:	4770      	bx	lr
 801a166:	bf00      	nop
 801a168:	402ce6b0 	.word	0x402ce6b0
 801a16c:	3fd9cd60 	.word	0x3fd9cd60

0801a170 <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst>:
 801a170:	4298      	cmp	r0, r3
 801a172:	d200      	bcs.n	801a176 <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst+0x6>
 801a174:	b913      	cbnz	r3, 801a17c <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst+0xc>
 801a176:	440a      	add	r2, r1
 801a178:	b210      	sxth	r0, r2
 801a17a:	4770      	bx	lr
 801a17c:	ee07 0a90 	vmov	s15, r0
 801a180:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801a184:	ee07 3a90 	vmov	s15, r3
 801a188:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801a18c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801a190:	ee07 2a90 	vmov	s15, r2
 801a194:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801a198:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 801a19c:	ee07 1a90 	vmov	s15, r1
 801a1a0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801a1a4:	ee37 7a66 	vsub.f32	s14, s14, s13
 801a1a8:	ee67 5a07 	vmul.f32	s11, s14, s14
 801a1ac:	eee5 6a87 	vfma.f32	s13, s11, s14
 801a1b0:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 801a1b4:	eee6 7a26 	vfma.f32	s15, s12, s13
 801a1b8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801a1bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a1c0:	bfcc      	ite	gt
 801a1c2:	ee77 7a87 	vaddgt.f32	s15, s15, s14
 801a1c6:	ee77 7ac7 	vsuble.f32	s15, s15, s14
 801a1ca:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801a1ce:	ee17 3a90 	vmov	r3, s15
 801a1d2:	b218      	sxth	r0, r3
 801a1d4:	4770      	bx	lr

0801a1d6 <_ZN8touchgfx15EasingEquations14linearEaseNoneEtsst>:
 801a1d6:	4298      	cmp	r0, r3
 801a1d8:	d200      	bcs.n	801a1dc <_ZN8touchgfx15EasingEquations14linearEaseNoneEtsst+0x6>
 801a1da:	b913      	cbnz	r3, 801a1e2 <_ZN8touchgfx15EasingEquations14linearEaseNoneEtsst+0xc>
 801a1dc:	440a      	add	r2, r1
 801a1de:	b210      	sxth	r0, r2
 801a1e0:	4770      	bx	lr
 801a1e2:	ee07 2a90 	vmov	s15, r2
 801a1e6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801a1ea:	ee07 0a90 	vmov	s15, r0
 801a1ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801a1f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 801a1f6:	ee07 3a10 	vmov	s14, r3
 801a1fa:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 801a1fe:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 801a202:	ee07 1a90 	vmov	s15, r1
 801a206:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801a20a:	ee77 7a27 	vadd.f32	s15, s14, s15
 801a20e:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 801a212:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801a216:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a21a:	bfcc      	ite	gt
 801a21c:	ee77 7a87 	vaddgt.f32	s15, s15, s14
 801a220:	ee77 7ac7 	vsuble.f32	s15, s15, s14
 801a224:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801a228:	ee17 3a90 	vmov	r3, s15
 801a22c:	b218      	sxth	r0, r3
 801a22e:	4770      	bx	lr

0801a230 <_ZN8touchgfx15EasingEquations12linearEaseInEtsst>:
 801a230:	f7ff bfd1 	b.w	801a1d6 <_ZN8touchgfx15EasingEquations14linearEaseNoneEtsst>

0801a234 <_ZN8touchgfx12TextProviderC1Ev>:
 801a234:	b538      	push	{r3, r4, r5, lr}
 801a236:	2500      	movs	r5, #0
 801a238:	2302      	movs	r3, #2
 801a23a:	4604      	mov	r4, r0
 801a23c:	220e      	movs	r2, #14
 801a23e:	7403      	strb	r3, [r0, #16]
 801a240:	4629      	mov	r1, r5
 801a242:	6145      	str	r5, [r0, #20]
 801a244:	7605      	strb	r5, [r0, #24]
 801a246:	83c5      	strh	r5, [r0, #30]
 801a248:	8405      	strh	r5, [r0, #32]
 801a24a:	86c5      	strh	r5, [r0, #54]	@ 0x36
 801a24c:	8705      	strh	r5, [r0, #56]	@ 0x38
 801a24e:	87c5      	strh	r5, [r0, #62]	@ 0x3e
 801a250:	f8a0 5040 	strh.w	r5, [r0, #64]	@ 0x40
 801a254:	e9c0 5500 	strd	r5, r5, [r0]
 801a258:	e9c0 5511 	strd	r5, r5, [r0, #68]	@ 0x44
 801a25c:	304c      	adds	r0, #76	@ 0x4c
 801a25e:	f00d ff2b 	bl	80280b8 <memset>
 801a262:	2301      	movs	r3, #1
 801a264:	4620      	mov	r0, r4
 801a266:	f8a4 505a 	strh.w	r5, [r4, #90]	@ 0x5a
 801a26a:	f8a4 505c 	strh.w	r5, [r4, #92]	@ 0x5c
 801a26e:	f8a4 505e 	strh.w	r5, [r4, #94]	@ 0x5e
 801a272:	f884 3060 	strb.w	r3, [r4, #96]	@ 0x60
 801a276:	f884 5061 	strb.w	r5, [r4, #97]	@ 0x61
 801a27a:	f7ea f93b 	bl	80044f4 <_ZN8touchgfx12TextProvider18initializeInternalEv>
 801a27e:	4620      	mov	r0, r4
 801a280:	bd38      	pop	{r3, r4, r5, pc}

0801a282 <_ZN8touchgfx12TextProvider11endOfStringEv>:
 801a282:	8ec3      	ldrh	r3, [r0, #54]	@ 0x36
 801a284:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801a288:	8c40      	ldrh	r0, [r0, #34]	@ 0x22
 801a28a:	fab0 f080 	clz	r0, r0
 801a28e:	0940      	lsrs	r0, r0, #5
 801a290:	4770      	bx	lr

0801a292 <_ZN8touchgfx12TextProvider19getNextCharInternalEv>:
 801a292:	b530      	push	{r4, r5, lr}
 801a294:	2500      	movs	r5, #0
 801a296:	2401      	movs	r4, #1
 801a298:	6843      	ldr	r3, [r0, #4]
 801a29a:	b913      	cbnz	r3, 801a2a2 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x10>
 801a29c:	6803      	ldr	r3, [r0, #0]
 801a29e:	b313      	cbz	r3, 801a2e6 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 801a2a0:	6043      	str	r3, [r0, #4]
 801a2a2:	7e03      	ldrb	r3, [r0, #24]
 801a2a4:	b143      	cbz	r3, 801a2b8 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x26>
 801a2a6:	6943      	ldr	r3, [r0, #20]
 801a2a8:	b12b      	cbz	r3, 801a2b6 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 801a2aa:	881a      	ldrh	r2, [r3, #0]
 801a2ac:	b11a      	cbz	r2, 801a2b6 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 801a2ae:	1c9a      	adds	r2, r3, #2
 801a2b0:	6142      	str	r2, [r0, #20]
 801a2b2:	8818      	ldrh	r0, [r3, #0]
 801a2b4:	bd30      	pop	{r4, r5, pc}
 801a2b6:	7605      	strb	r5, [r0, #24]
 801a2b8:	6843      	ldr	r3, [r0, #4]
 801a2ba:	8819      	ldrh	r1, [r3, #0]
 801a2bc:	b199      	cbz	r1, 801a2e6 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 801a2be:	1c9a      	adds	r2, r3, #2
 801a2c0:	2902      	cmp	r1, #2
 801a2c2:	6042      	str	r2, [r0, #4]
 801a2c4:	d1f5      	bne.n	801a2b2 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x20>
 801a2c6:	7c03      	ldrb	r3, [r0, #16]
 801a2c8:	2b01      	cmp	r3, #1
 801a2ca:	d8e5      	bhi.n	801a298 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801a2cc:	1c5a      	adds	r2, r3, #1
 801a2ce:	3302      	adds	r3, #2
 801a2d0:	7402      	strb	r2, [r0, #16]
 801a2d2:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 801a2d6:	6143      	str	r3, [r0, #20]
 801a2d8:	2b00      	cmp	r3, #0
 801a2da:	d0dd      	beq.n	801a298 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801a2dc:	881b      	ldrh	r3, [r3, #0]
 801a2de:	2b00      	cmp	r3, #0
 801a2e0:	d0da      	beq.n	801a298 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801a2e2:	7604      	strb	r4, [r0, #24]
 801a2e4:	e7d8      	b.n	801a298 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801a2e6:	2000      	movs	r0, #0
 801a2e8:	e7e4      	b.n	801a2b4 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x22>

0801a2ea <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>:
 801a2ea:	6001      	str	r1, [r0, #0]
 801a2ec:	2100      	movs	r1, #0
 801a2ee:	b430      	push	{r4, r5}
 801a2f0:	6041      	str	r1, [r0, #4]
 801a2f2:	6815      	ldr	r5, [r2, #0]
 801a2f4:	6085      	str	r5, [r0, #8]
 801a2f6:	6852      	ldr	r2, [r2, #4]
 801a2f8:	6443      	str	r3, [r0, #68]	@ 0x44
 801a2fa:	9b02      	ldr	r3, [sp, #8]
 801a2fc:	60c2      	str	r2, [r0, #12]
 801a2fe:	7401      	strb	r1, [r0, #16]
 801a300:	6141      	str	r1, [r0, #20]
 801a302:	7601      	strb	r1, [r0, #24]
 801a304:	8701      	strh	r1, [r0, #56]	@ 0x38
 801a306:	8401      	strh	r1, [r0, #32]
 801a308:	f8a0 1040 	strh.w	r1, [r0, #64]	@ 0x40
 801a30c:	6483      	str	r3, [r0, #72]	@ 0x48
 801a30e:	bc30      	pop	{r4, r5}
 801a310:	f7ea b8f0 	b.w	80044f4 <_ZN8touchgfx12TextProvider18initializeInternalEv>

0801a314 <_ZN8touchgfx12TextProvider10initializeEPKtS2_PKNS_24FontContextualFormsTableEz>:
 801a314:	b408      	push	{r3}
 801a316:	b510      	push	{r4, lr}
 801a318:	b085      	sub	sp, #20
 801a31a:	ac07      	add	r4, sp, #28
 801a31c:	f854 3b04 	ldr.w	r3, [r4], #4
 801a320:	9300      	str	r3, [sp, #0]
 801a322:	4613      	mov	r3, r2
 801a324:	4622      	mov	r2, r4
 801a326:	9403      	str	r4, [sp, #12]
 801a328:	f7ff ffdf 	bl	801a2ea <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801a32c:	b005      	add	sp, #20
 801a32e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801a332:	b001      	add	sp, #4
 801a334:	4770      	bx	lr

0801a336 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>:
 801a336:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a338:	4605      	mov	r5, r0
 801a33a:	4608      	mov	r0, r1
 801a33c:	b1f1      	cbz	r1, 801a37c <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x46>
 801a33e:	f105 044c 	add.w	r4, r5, #76	@ 0x4c
 801a342:	460b      	mov	r3, r1
 801a344:	f101 0708 	add.w	r7, r1, #8
 801a348:	4622      	mov	r2, r4
 801a34a:	6818      	ldr	r0, [r3, #0]
 801a34c:	3308      	adds	r3, #8
 801a34e:	f853 1c04 	ldr.w	r1, [r3, #-4]
 801a352:	4626      	mov	r6, r4
 801a354:	42bb      	cmp	r3, r7
 801a356:	c603      	stmia	r6!, {r0, r1}
 801a358:	4634      	mov	r4, r6
 801a35a:	d1f6      	bne.n	801a34a <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x14>
 801a35c:	6818      	ldr	r0, [r3, #0]
 801a35e:	6030      	str	r0, [r6, #0]
 801a360:	4610      	mov	r0, r2
 801a362:	889b      	ldrh	r3, [r3, #4]
 801a364:	80b3      	strh	r3, [r6, #4]
 801a366:	f895 3059 	ldrb.w	r3, [r5, #89]	@ 0x59
 801a36a:	015b      	lsls	r3, r3, #5
 801a36c:	f403 7180 	and.w	r1, r3, #256	@ 0x100
 801a370:	f895 3052 	ldrb.w	r3, [r5, #82]	@ 0x52
 801a374:	430b      	orrs	r3, r1
 801a376:	425b      	negs	r3, r3
 801a378:	f885 3055 	strb.w	r3, [r5, #85]	@ 0x55
 801a37c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801a37e <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>:
 801a37e:	b538      	push	{r3, r4, r5, lr}
 801a380:	460c      	mov	r4, r1
 801a382:	6811      	ldr	r1, [r2, #0]
 801a384:	4610      	mov	r0, r2
 801a386:	68cd      	ldr	r5, [r1, #12]
 801a388:	4619      	mov	r1, r3
 801a38a:	47a8      	blx	r5
 801a38c:	2800      	cmp	r0, #0
 801a38e:	bf08      	it	eq
 801a390:	4620      	moveq	r0, r4
 801a392:	bd38      	pop	{r3, r4, r5, pc}

0801a394 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>:
 801a394:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a398:	468c      	mov	ip, r1
 801a39a:	4604      	mov	r4, r0
 801a39c:	4615      	mov	r5, r2
 801a39e:	b942      	cbnz	r2, 801a3b2 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1e>
 801a3a0:	f8a4 205a 	strh.w	r2, [r4, #90]	@ 0x5a
 801a3a4:	f8a4 205c 	strh.w	r2, [r4, #92]	@ 0x5c
 801a3a8:	f8a4 205e 	strh.w	r2, [r4, #94]	@ 0x5e
 801a3ac:	4628      	mov	r0, r5
 801a3ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a3b2:	7b50      	ldrb	r0, [r2, #13]
 801a3b4:	f46f 6163 	mvn.w	r1, #3632	@ 0xe30
 801a3b8:	8893      	ldrh	r3, [r2, #4]
 801a3ba:	0106      	lsls	r6, r0, #4
 801a3bc:	f406 7280 	and.w	r2, r6, #256	@ 0x100
 801a3c0:	79ee      	ldrb	r6, [r5, #7]
 801a3c2:	4316      	orrs	r6, r2
 801a3c4:	185a      	adds	r2, r3, r1
 801a3c6:	b291      	uxth	r1, r2
 801a3c8:	b2b7      	uxth	r7, r6
 801a3ca:	291d      	cmp	r1, #29
 801a3cc:	d87f      	bhi.n	801a4ce <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x13a>
 801a3ce:	2201      	movs	r2, #1
 801a3d0:	10f6      	asrs	r6, r6, #3
 801a3d2:	408a      	lsls	r2, r1
 801a3d4:	4974      	ldr	r1, [pc, #464]	@ (801a5a8 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x214>)
 801a3d6:	420a      	tst	r2, r1
 801a3d8:	d12e      	bne.n	801a438 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xa4>
 801a3da:	f412 7f60 	tst.w	r2, #896	@ 0x380
 801a3de:	d076      	beq.n	801a4ce <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x13a>
 801a3e0:	f104 024c 	add.w	r2, r4, #76	@ 0x4c
 801a3e4:	462b      	mov	r3, r5
 801a3e6:	f105 0e08 	add.w	lr, r5, #8
 801a3ea:	4615      	mov	r5, r2
 801a3ec:	6818      	ldr	r0, [r3, #0]
 801a3ee:	3308      	adds	r3, #8
 801a3f0:	f853 1c04 	ldr.w	r1, [r3, #-4]
 801a3f4:	4694      	mov	ip, r2
 801a3f6:	4573      	cmp	r3, lr
 801a3f8:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 801a3fc:	4662      	mov	r2, ip
 801a3fe:	d1f5      	bne.n	801a3ec <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x58>
 801a400:	6818      	ldr	r0, [r3, #0]
 801a402:	f8cc 0000 	str.w	r0, [ip]
 801a406:	889b      	ldrh	r3, [r3, #4]
 801a408:	f8ac 3004 	strh.w	r3, [ip, #4]
 801a40c:	b2b3      	uxth	r3, r6
 801a40e:	f8b4 105c 	ldrh.w	r1, [r4, #92]	@ 0x5c
 801a412:	f894 0059 	ldrb.w	r0, [r4, #89]	@ 0x59
 801a416:	1aca      	subs	r2, r1, r3
 801a418:	1bcf      	subs	r7, r1, r7
 801a41a:	f020 0060 	bic.w	r0, r0, #96	@ 0x60
 801a41e:	b292      	uxth	r2, r2
 801a420:	1afb      	subs	r3, r7, r3
 801a422:	f884 2054 	strb.w	r2, [r4, #84]	@ 0x54
 801a426:	10d2      	asrs	r2, r2, #3
 801a428:	f002 0260 	and.w	r2, r2, #96	@ 0x60
 801a42c:	4302      	orrs	r2, r0
 801a42e:	f884 2059 	strb.w	r2, [r4, #89]	@ 0x59
 801a432:	f8a4 305c 	strh.w	r3, [r4, #92]	@ 0x5c
 801a436:	e7b9      	b.n	801a3ac <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x18>
 801a438:	f104 024c 	add.w	r2, r4, #76	@ 0x4c
 801a43c:	462b      	mov	r3, r5
 801a43e:	f105 0808 	add.w	r8, r5, #8
 801a442:	4615      	mov	r5, r2
 801a444:	6818      	ldr	r0, [r3, #0]
 801a446:	3308      	adds	r3, #8
 801a448:	f853 1c04 	ldr.w	r1, [r3, #-4]
 801a44c:	4696      	mov	lr, r2
 801a44e:	4543      	cmp	r3, r8
 801a450:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 801a454:	4672      	mov	r2, lr
 801a456:	d1f5      	bne.n	801a444 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xb0>
 801a458:	6818      	ldr	r0, [r3, #0]
 801a45a:	f8ce 0000 	str.w	r0, [lr]
 801a45e:	889b      	ldrh	r3, [r3, #4]
 801a460:	f8ae 3004 	strh.w	r3, [lr, #4]
 801a464:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 801a466:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801a46a:	8c59      	ldrh	r1, [r3, #34]	@ 0x22
 801a46c:	f640 6333 	movw	r3, #3635	@ 0xe33
 801a470:	4299      	cmp	r1, r3
 801a472:	d111      	bne.n	801a498 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x104>
 801a474:	f8dc 3000 	ldr.w	r3, [ip]
 801a478:	4660      	mov	r0, ip
 801a47a:	68db      	ldr	r3, [r3, #12]
 801a47c:	4798      	blx	r3
 801a47e:	7b41      	ldrb	r1, [r0, #13]
 801a480:	00cb      	lsls	r3, r1, #3
 801a482:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 801a486:	7a03      	ldrb	r3, [r0, #8]
 801a488:	4313      	orrs	r3, r2
 801a48a:	064a      	lsls	r2, r1, #25
 801a48c:	bf44      	itt	mi
 801a48e:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 801a492:	b21b      	sxthmi	r3, r3
 801a494:	f8a4 305a 	strh.w	r3, [r4, #90]	@ 0x5a
 801a498:	f8b4 305a 	ldrh.w	r3, [r4, #90]	@ 0x5a
 801a49c:	f894 2059 	ldrb.w	r2, [r4, #89]	@ 0x59
 801a4a0:	443b      	add	r3, r7
 801a4a2:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 801a4a6:	4433      	add	r3, r6
 801a4a8:	b29b      	uxth	r3, r3
 801a4aa:	f8a4 305a 	strh.w	r3, [r4, #90]	@ 0x5a
 801a4ae:	f884 3054 	strb.w	r3, [r4, #84]	@ 0x54
 801a4b2:	10db      	asrs	r3, r3, #3
 801a4b4:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 801a4b8:	4313      	orrs	r3, r2
 801a4ba:	f894 205e 	ldrb.w	r2, [r4, #94]	@ 0x5e
 801a4be:	f884 3059 	strb.w	r3, [r4, #89]	@ 0x59
 801a4c2:	f894 3055 	ldrb.w	r3, [r4, #85]	@ 0x55
 801a4c6:	1a9b      	subs	r3, r3, r2
 801a4c8:	f884 3055 	strb.w	r3, [r4, #85]	@ 0x55
 801a4cc:	e76e      	b.n	801a3ac <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x18>
 801a4ce:	f023 0204 	bic.w	r2, r3, #4
 801a4d2:	f640 611b 	movw	r1, #3611	@ 0xe1b
 801a4d6:	428a      	cmp	r2, r1
 801a4d8:	d003      	beq.n	801a4e2 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x14e>
 801a4da:	f640 621d 	movw	r2, #3613	@ 0xe1d
 801a4de:	4293      	cmp	r3, r2
 801a4e0:	d120      	bne.n	801a524 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x190>
 801a4e2:	3b01      	subs	r3, #1
 801a4e4:	4662      	mov	r2, ip
 801a4e6:	4629      	mov	r1, r5
 801a4e8:	4620      	mov	r0, r4
 801a4ea:	b29b      	uxth	r3, r3
 801a4ec:	f7ff ff47 	bl	801a37e <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 801a4f0:	7b41      	ldrb	r1, [r0, #13]
 801a4f2:	00cb      	lsls	r3, r1, #3
 801a4f4:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 801a4f8:	7a03      	ldrb	r3, [r0, #8]
 801a4fa:	0648      	lsls	r0, r1, #25
 801a4fc:	ea43 0302 	orr.w	r3, r3, r2
 801a500:	bf44      	itt	mi
 801a502:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 801a506:	b21b      	sxthmi	r3, r3
 801a508:	f8a4 305a 	strh.w	r3, [r4, #90]	@ 0x5a
 801a50c:	7b6b      	ldrb	r3, [r5, #13]
 801a50e:	7aaa      	ldrb	r2, [r5, #10]
 801a510:	005b      	lsls	r3, r3, #1
 801a512:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801a516:	4313      	orrs	r3, r2
 801a518:	115a      	asrs	r2, r3, #5
 801a51a:	eb02 0393 	add.w	r3, r2, r3, lsr #2
 801a51e:	f8a4 305e 	strh.w	r3, [r4, #94]	@ 0x5e
 801a522:	e032      	b.n	801a58a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1f6>
 801a524:	00c2      	lsls	r2, r0, #3
 801a526:	f402 7180 	and.w	r1, r2, #256	@ 0x100
 801a52a:	7a2a      	ldrb	r2, [r5, #8]
 801a52c:	430a      	orrs	r2, r1
 801a52e:	0641      	lsls	r1, r0, #25
 801a530:	f640 6109 	movw	r1, #3593	@ 0xe09
 801a534:	bf44      	itt	mi
 801a536:	f5a2 7200 	submi.w	r2, r2, #512	@ 0x200
 801a53a:	b212      	sxthmi	r2, r2
 801a53c:	f8a4 205a 	strh.w	r2, [r4, #90]	@ 0x5a
 801a540:	f023 0210 	bic.w	r2, r3, #16
 801a544:	428a      	cmp	r2, r1
 801a546:	d003      	beq.n	801a550 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1bc>
 801a548:	f640 6213 	movw	r2, #3603	@ 0xe13
 801a54c:	4293      	cmp	r3, r2
 801a54e:	d129      	bne.n	801a5a4 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x210>
 801a550:	7b6e      	ldrb	r6, [r5, #13]
 801a552:	4629      	mov	r1, r5
 801a554:	4620      	mov	r0, r4
 801a556:	0076      	lsls	r6, r6, #1
 801a558:	f406 7280 	and.w	r2, r6, #256	@ 0x100
 801a55c:	7aae      	ldrb	r6, [r5, #10]
 801a55e:	4316      	orrs	r6, r2
 801a560:	f640 6213 	movw	r2, #3603	@ 0xe13
 801a564:	4293      	cmp	r3, r2
 801a566:	4662      	mov	r2, ip
 801a568:	bf16      	itet	ne
 801a56a:	f103 33ff 	addne.w	r3, r3, #4294967295
 801a56e:	f640 630c 	movweq	r3, #3596	@ 0xe0c
 801a572:	b29b      	uxthne	r3, r3
 801a574:	f7ff ff03 	bl	801a37e <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 801a578:	7b43      	ldrb	r3, [r0, #13]
 801a57a:	7a82      	ldrb	r2, [r0, #10]
 801a57c:	005b      	lsls	r3, r3, #1
 801a57e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801a582:	4313      	orrs	r3, r2
 801a584:	1af6      	subs	r6, r6, r3
 801a586:	f8a4 605e 	strh.w	r6, [r4, #94]	@ 0x5e
 801a58a:	7b69      	ldrb	r1, [r5, #13]
 801a58c:	00cb      	lsls	r3, r1, #3
 801a58e:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 801a592:	7a2b      	ldrb	r3, [r5, #8]
 801a594:	4313      	orrs	r3, r2
 801a596:	064a      	lsls	r2, r1, #25
 801a598:	bf44      	itt	mi
 801a59a:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 801a59e:	b21b      	sxthmi	r3, r3
 801a5a0:	1bdb      	subs	r3, r3, r7
 801a5a2:	e746      	b.n	801a432 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x9e>
 801a5a4:	2300      	movs	r3, #0
 801a5a6:	e7ba      	b.n	801a51e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x18a>
 801a5a8:	3fc00079 	.word	0x3fc00079

0801a5ac <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>:
 801a5ac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801a5b0:	4604      	mov	r4, r0
 801a5b2:	b942      	cbnz	r2, 801a5c6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1a>
 801a5b4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 801a5b8:	f8a0 305a 	strh.w	r3, [r0, #90]	@ 0x5a
 801a5bc:	f8a0 305c 	strh.w	r3, [r0, #92]	@ 0x5c
 801a5c0:	f8a4 305e 	strh.w	r3, [r4, #94]	@ 0x5e
 801a5c4:	e047      	b.n	801a656 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xaa>
 801a5c6:	7b51      	ldrb	r1, [r2, #13]
 801a5c8:	8893      	ldrh	r3, [r2, #4]
 801a5ca:	010d      	lsls	r5, r1, #4
 801a5cc:	f405 7080 	and.w	r0, r5, #256	@ 0x100
 801a5d0:	79d5      	ldrb	r5, [r2, #7]
 801a5d2:	4305      	orrs	r5, r0
 801a5d4:	2d04      	cmp	r5, #4
 801a5d6:	bfcc      	ite	gt
 801a5d8:	ea4f 0e95 	movgt.w	lr, r5, lsr #2
 801a5dc:	f04f 0e01 	movle.w	lr, #1
 801a5e0:	f5b3 6fdd 	cmp.w	r3, #1768	@ 0x6e8
 801a5e4:	f200 80ab 	bhi.w	801a73e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x192>
 801a5e8:	f240 60e7 	movw	r0, #1767	@ 0x6e7
 801a5ec:	4283      	cmp	r3, r0
 801a5ee:	d216      	bcs.n	801a61e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801a5f0:	f240 605b 	movw	r0, #1627	@ 0x65b
 801a5f4:	4283      	cmp	r3, r0
 801a5f6:	d859      	bhi.n	801a6ac <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x100>
 801a5f8:	f240 6057 	movw	r0, #1623	@ 0x657
 801a5fc:	4283      	cmp	r3, r0
 801a5fe:	d20e      	bcs.n	801a61e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801a600:	f5b3 6fca 	cmp.w	r3, #1616	@ 0x650
 801a604:	d24a      	bcs.n	801a69c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xf0>
 801a606:	f240 604e 	movw	r0, #1614	@ 0x64e
 801a60a:	4283      	cmp	r3, r0
 801a60c:	d207      	bcs.n	801a61e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801a60e:	f240 601a 	movw	r0, #1562	@ 0x61a
 801a612:	4283      	cmp	r3, r0
 801a614:	d02a      	beq.n	801a66c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801a616:	d821      	bhi.n	801a65c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xb0>
 801a618:	f5b3 6fc2 	cmp.w	r3, #1552	@ 0x610
 801a61c:	d35b      	bcc.n	801a6d6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 801a61e:	f9b4 305a 	ldrsh.w	r3, [r4, #90]	@ 0x5a
 801a622:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 801a626:	f040 80d0 	bne.w	801a7ca <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21e>
 801a62a:	f9b4 005c 	ldrsh.w	r0, [r4, #92]	@ 0x5c
 801a62e:	f510 4f00 	cmn.w	r0, #32768	@ 0x8000
 801a632:	f040 80ca 	bne.w	801a7ca <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21e>
 801a636:	00cb      	lsls	r3, r1, #3
 801a638:	0649      	lsls	r1, r1, #25
 801a63a:	f403 7080 	and.w	r0, r3, #256	@ 0x100
 801a63e:	7a13      	ldrb	r3, [r2, #8]
 801a640:	ea43 0300 	orr.w	r3, r3, r0
 801a644:	bf44      	itt	mi
 801a646:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 801a64a:	b21b      	sxthmi	r3, r3
 801a64c:	f8a4 305a 	strh.w	r3, [r4, #90]	@ 0x5a
 801a650:	1b5d      	subs	r5, r3, r5
 801a652:	f8a4 505c 	strh.w	r5, [r4, #92]	@ 0x5c
 801a656:	4610      	mov	r0, r2
 801a658:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801a65c:	f240 604b 	movw	r0, #1611	@ 0x64b
 801a660:	4283      	cmp	r3, r0
 801a662:	d338      	bcc.n	801a6d6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 801a664:	f240 604c 	movw	r0, #1612	@ 0x64c
 801a668:	4283      	cmp	r3, r0
 801a66a:	d9d8      	bls.n	801a61e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801a66c:	f9b4 005a 	ldrsh.w	r0, [r4, #90]	@ 0x5a
 801a670:	f9b4 305c 	ldrsh.w	r3, [r4, #92]	@ 0x5c
 801a674:	f510 4f00 	cmn.w	r0, #32768	@ 0x8000
 801a678:	f040 80f3 	bne.w	801a862 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b6>
 801a67c:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 801a680:	f040 80ef 	bne.w	801a862 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b6>
 801a684:	00cb      	lsls	r3, r1, #3
 801a686:	064e      	lsls	r6, r1, #25
 801a688:	f403 7080 	and.w	r0, r3, #256	@ 0x100
 801a68c:	7a13      	ldrb	r3, [r2, #8]
 801a68e:	ea43 0300 	orr.w	r3, r3, r0
 801a692:	bf44      	itt	mi
 801a694:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 801a698:	b21b      	sxthmi	r3, r3
 801a69a:	e7d9      	b.n	801a650 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa4>
 801a69c:	f240 6054 	movw	r0, #1620	@ 0x654
 801a6a0:	4283      	cmp	r3, r0
 801a6a2:	d8e3      	bhi.n	801a66c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801a6a4:	f5b3 6fca 	cmp.w	r3, #1616	@ 0x650
 801a6a8:	d9e0      	bls.n	801a66c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801a6aa:	e7b8      	b.n	801a61e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801a6ac:	f240 6074 	movw	r0, #1652	@ 0x674
 801a6b0:	4283      	cmp	r3, r0
 801a6b2:	d0b4      	beq.n	801a61e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801a6b4:	d82d      	bhi.n	801a712 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x166>
 801a6b6:	f240 605e 	movw	r0, #1630	@ 0x65e
 801a6ba:	4283      	cmp	r3, r0
 801a6bc:	d804      	bhi.n	801a6c8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x11c>
 801a6be:	f240 605d 	movw	r0, #1629	@ 0x65d
 801a6c2:	4283      	cmp	r3, r0
 801a6c4:	d3d2      	bcc.n	801a66c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801a6c6:	e7aa      	b.n	801a61e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801a6c8:	f240 605f 	movw	r0, #1631	@ 0x65f
 801a6cc:	4283      	cmp	r3, r0
 801a6ce:	d0cd      	beq.n	801a66c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801a6d0:	f5b3 6fce 	cmp.w	r3, #1648	@ 0x670
 801a6d4:	d0a3      	beq.n	801a61e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801a6d6:	00cb      	lsls	r3, r1, #3
 801a6d8:	0649      	lsls	r1, r1, #25
 801a6da:	f403 7080 	and.w	r0, r3, #256	@ 0x100
 801a6de:	7a13      	ldrb	r3, [r2, #8]
 801a6e0:	ea43 0300 	orr.w	r3, r3, r0
 801a6e4:	bf44      	itt	mi
 801a6e6:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 801a6ea:	b21b      	sxthmi	r3, r3
 801a6ec:	1b5d      	subs	r5, r3, r5
 801a6ee:	f8a4 305a 	strh.w	r3, [r4, #90]	@ 0x5a
 801a6f2:	f8a4 505c 	strh.w	r5, [r4, #92]	@ 0x5c
 801a6f6:	7b53      	ldrb	r3, [r2, #13]
 801a6f8:	015b      	lsls	r3, r3, #5
 801a6fa:	f403 7180 	and.w	r1, r3, #256	@ 0x100
 801a6fe:	7993      	ldrb	r3, [r2, #6]
 801a700:	430b      	orrs	r3, r1
 801a702:	2105      	movs	r1, #5
 801a704:	005b      	lsls	r3, r3, #1
 801a706:	fb93 f3f1 	sdiv	r3, r3, r1
 801a70a:	f992 1009 	ldrsb.w	r1, [r2, #9]
 801a70e:	440b      	add	r3, r1
 801a710:	e756      	b.n	801a5c0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x14>
 801a712:	f240 60e2 	movw	r0, #1762	@ 0x6e2
 801a716:	4283      	cmp	r3, r0
 801a718:	d809      	bhi.n	801a72e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x182>
 801a71a:	f240 60df 	movw	r0, #1759	@ 0x6df
 801a71e:	4283      	cmp	r3, r0
 801a720:	f4bf af7d 	bcs.w	801a61e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801a724:	f2a3 63d6 	subw	r3, r3, #1750	@ 0x6d6
 801a728:	2b05      	cmp	r3, #5
 801a72a:	d8d4      	bhi.n	801a6d6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 801a72c:	e777      	b.n	801a61e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801a72e:	f240 60e3 	movw	r0, #1763	@ 0x6e3
 801a732:	4283      	cmp	r3, r0
 801a734:	d09a      	beq.n	801a66c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801a736:	f240 60e4 	movw	r0, #1764	@ 0x6e4
 801a73a:	4283      	cmp	r3, r0
 801a73c:	e7ca      	b.n	801a6d4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 801a73e:	f5b3 6f0f 	cmp.w	r3, #2288	@ 0x8f0
 801a742:	d22b      	bcs.n	801a79c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1f0>
 801a744:	f640 00ed 	movw	r0, #2285	@ 0x8ed
 801a748:	4283      	cmp	r3, r0
 801a74a:	d28f      	bcs.n	801a66c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801a74c:	f640 00e5 	movw	r0, #2277	@ 0x8e5
 801a750:	4283      	cmp	r3, r0
 801a752:	d816      	bhi.n	801a782 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d6>
 801a754:	f640 00e4 	movw	r0, #2276	@ 0x8e4
 801a758:	4283      	cmp	r3, r0
 801a75a:	f4bf af60 	bcs.w	801a61e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801a75e:	f240 60ec 	movw	r0, #1772	@ 0x6ec
 801a762:	4283      	cmp	r3, r0
 801a764:	d80a      	bhi.n	801a77c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d0>
 801a766:	f240 60eb 	movw	r0, #1771	@ 0x6eb
 801a76a:	4283      	cmp	r3, r0
 801a76c:	f4bf af57 	bcs.w	801a61e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801a770:	f240 60ea 	movw	r0, #1770	@ 0x6ea
 801a774:	4283      	cmp	r3, r0
 801a776:	f43f af79 	beq.w	801a66c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801a77a:	e7ac      	b.n	801a6d6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 801a77c:	f240 60ed 	movw	r0, #1773	@ 0x6ed
 801a780:	e7f8      	b.n	801a774 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1c8>
 801a782:	f640 00e8 	movw	r0, #2280	@ 0x8e8
 801a786:	4283      	cmp	r3, r0
 801a788:	d802      	bhi.n	801a790 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e4>
 801a78a:	f640 00e7 	movw	r0, #2279	@ 0x8e7
 801a78e:	e798      	b.n	801a6c2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x116>
 801a790:	f640 00e9 	movw	r0, #2281	@ 0x8e9
 801a794:	4283      	cmp	r3, r0
 801a796:	f47f af42 	bne.w	801a61e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801a79a:	e767      	b.n	801a66c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801a79c:	f640 00f6 	movw	r0, #2294	@ 0x8f6
 801a7a0:	4283      	cmp	r3, r0
 801a7a2:	f43f af63 	beq.w	801a66c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801a7a6:	d802      	bhi.n	801a7ae <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x202>
 801a7a8:	f640 00f2 	movw	r0, #2290	@ 0x8f2
 801a7ac:	e7f2      	b.n	801a794 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e8>
 801a7ae:	f640 00fa 	movw	r0, #2298	@ 0x8fa
 801a7b2:	4283      	cmp	r3, r0
 801a7b4:	d805      	bhi.n	801a7c2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x216>
 801a7b6:	f640 00f9 	movw	r0, #2297	@ 0x8f9
 801a7ba:	4283      	cmp	r3, r0
 801a7bc:	f4ff af2f 	bcc.w	801a61e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801a7c0:	e754      	b.n	801a66c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801a7c2:	f640 00fe 	movw	r0, #2302	@ 0x8fe
 801a7c6:	4283      	cmp	r3, r0
 801a7c8:	e7af      	b.n	801a72a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x17e>
 801a7ca:	f104 0c4c 	add.w	ip, r4, #76	@ 0x4c
 801a7ce:	4617      	mov	r7, r2
 801a7d0:	f102 0808 	add.w	r8, r2, #8
 801a7d4:	4666      	mov	r6, ip
 801a7d6:	6838      	ldr	r0, [r7, #0]
 801a7d8:	3708      	adds	r7, #8
 801a7da:	f857 1c04 	ldr.w	r1, [r7, #-4]
 801a7de:	46e6      	mov	lr, ip
 801a7e0:	4547      	cmp	r7, r8
 801a7e2:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 801a7e6:	46f4      	mov	ip, lr
 801a7e8:	d1f5      	bne.n	801a7d6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x22a>
 801a7ea:	6838      	ldr	r0, [r7, #0]
 801a7ec:	f8ce 0000 	str.w	r0, [lr]
 801a7f0:	88b9      	ldrh	r1, [r7, #4]
 801a7f2:	f8ae 1004 	strh.w	r1, [lr, #4]
 801a7f6:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	@ 0x5e
 801a7fa:	f510 4f00 	cmn.w	r0, #32768	@ 0x8000
 801a7fe:	d009      	beq.n	801a814 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x268>
 801a800:	7b51      	ldrb	r1, [r2, #13]
 801a802:	7992      	ldrb	r2, [r2, #6]
 801a804:	0149      	lsls	r1, r1, #5
 801a806:	f401 7180 	and.w	r1, r1, #256	@ 0x100
 801a80a:	4311      	orrs	r1, r2
 801a80c:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 801a810:	f884 0055 	strb.w	r0, [r4, #85]	@ 0x55
 801a814:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 801a818:	b2ad      	uxth	r5, r5
 801a81a:	d00d      	beq.n	801a838 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x28c>
 801a81c:	442b      	add	r3, r5
 801a81e:	f894 2059 	ldrb.w	r2, [r4, #89]	@ 0x59
 801a822:	b29b      	uxth	r3, r3
 801a824:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 801a828:	f884 3054 	strb.w	r3, [r4, #84]	@ 0x54
 801a82c:	10db      	asrs	r3, r3, #3
 801a82e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 801a832:	4313      	orrs	r3, r2
 801a834:	f884 3059 	strb.w	r3, [r4, #89]	@ 0x59
 801a838:	f894 1059 	ldrb.w	r1, [r4, #89]	@ 0x59
 801a83c:	00cb      	lsls	r3, r1, #3
 801a83e:	064f      	lsls	r7, r1, #25
 801a840:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 801a844:	f894 3054 	ldrb.w	r3, [r4, #84]	@ 0x54
 801a848:	ea43 0302 	orr.w	r3, r3, r2
 801a84c:	bf44      	itt	mi
 801a84e:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 801a852:	b21b      	sxthmi	r3, r3
 801a854:	f8a4 305a 	strh.w	r3, [r4, #90]	@ 0x5a
 801a858:	1b5b      	subs	r3, r3, r5
 801a85a:	f8a4 305c 	strh.w	r3, [r4, #92]	@ 0x5c
 801a85e:	4632      	mov	r2, r6
 801a860:	e6f9      	b.n	801a656 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xaa>
 801a862:	f104 0c4c 	add.w	ip, r4, #76	@ 0x4c
 801a866:	4617      	mov	r7, r2
 801a868:	f102 0908 	add.w	r9, r2, #8
 801a86c:	4666      	mov	r6, ip
 801a86e:	6838      	ldr	r0, [r7, #0]
 801a870:	3708      	adds	r7, #8
 801a872:	f857 1c04 	ldr.w	r1, [r7, #-4]
 801a876:	46e0      	mov	r8, ip
 801a878:	454f      	cmp	r7, r9
 801a87a:	e8a8 0003 	stmia.w	r8!, {r0, r1}
 801a87e:	46c4      	mov	ip, r8
 801a880:	d1f5      	bne.n	801a86e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2c2>
 801a882:	6838      	ldr	r0, [r7, #0]
 801a884:	f8c8 0000 	str.w	r0, [r8]
 801a888:	88b9      	ldrh	r1, [r7, #4]
 801a88a:	f8a8 1004 	strh.w	r1, [r8, #4]
 801a88e:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	@ 0x5e
 801a892:	f510 4f00 	cmn.w	r0, #32768	@ 0x8000
 801a896:	d009      	beq.n	801a8ac <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x300>
 801a898:	7b51      	ldrb	r1, [r2, #13]
 801a89a:	7992      	ldrb	r2, [r2, #6]
 801a89c:	0149      	lsls	r1, r1, #5
 801a89e:	f401 7180 	and.w	r1, r1, #256	@ 0x100
 801a8a2:	4311      	orrs	r1, r2
 801a8a4:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 801a8a8:	f884 0055 	strb.w	r0, [r4, #85]	@ 0x55
 801a8ac:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 801a8b0:	d00e      	beq.n	801a8d0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x324>
 801a8b2:	eba3 030e 	sub.w	r3, r3, lr
 801a8b6:	f894 2059 	ldrb.w	r2, [r4, #89]	@ 0x59
 801a8ba:	b29b      	uxth	r3, r3
 801a8bc:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 801a8c0:	f884 3054 	strb.w	r3, [r4, #84]	@ 0x54
 801a8c4:	10db      	asrs	r3, r3, #3
 801a8c6:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 801a8ca:	4313      	orrs	r3, r2
 801a8cc:	f884 3059 	strb.w	r3, [r4, #89]	@ 0x59
 801a8d0:	f894 1059 	ldrb.w	r1, [r4, #89]	@ 0x59
 801a8d4:	00cb      	lsls	r3, r1, #3
 801a8d6:	0648      	lsls	r0, r1, #25
 801a8d8:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 801a8dc:	f894 3054 	ldrb.w	r3, [r4, #84]	@ 0x54
 801a8e0:	ea43 0302 	orr.w	r3, r3, r2
 801a8e4:	bf44      	itt	mi
 801a8e6:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 801a8ea:	b21b      	sxthmi	r3, r3
 801a8ec:	1b5d      	subs	r5, r3, r5
 801a8ee:	f8a4 505c 	strh.w	r5, [r4, #92]	@ 0x5c
 801a8f2:	e7b4      	b.n	801a85e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b2>

0801a8f4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>:
 801a8f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a8f8:	461e      	mov	r6, r3
 801a8fa:	8ec3      	ldrh	r3, [r0, #54]	@ 0x36
 801a8fc:	4604      	mov	r4, r0
 801a8fe:	4617      	mov	r7, r2
 801a900:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801a904:	f8b3 8022 	ldrh.w	r8, [r3, #34]	@ 0x22
 801a908:	f7e9 fdb2 	bl	8004470 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801a90c:	4605      	mov	r5, r0
 801a90e:	b918      	cbnz	r0, 801a918 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x24>
 801a910:	6030      	str	r0, [r6, #0]
 801a912:	4628      	mov	r0, r5
 801a914:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a918:	683b      	ldr	r3, [r7, #0]
 801a91a:	4601      	mov	r1, r0
 801a91c:	4638      	mov	r0, r7
 801a91e:	68db      	ldr	r3, [r3, #12]
 801a920:	4798      	blx	r3
 801a922:	f5a8 63c0 	sub.w	r3, r8, #1536	@ 0x600
 801a926:	4602      	mov	r2, r0
 801a928:	6030      	str	r0, [r6, #0]
 801a92a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 801a92e:	d213      	bcs.n	801a958 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x64>
 801a930:	4643      	mov	r3, r8
 801a932:	4639      	mov	r1, r7
 801a934:	4620      	mov	r0, r4
 801a936:	f7ff fe39 	bl	801a5ac <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 801a93a:	6030      	str	r0, [r6, #0]
 801a93c:	6833      	ldr	r3, [r6, #0]
 801a93e:	b143      	cbz	r3, 801a952 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x5e>
 801a940:	7b5a      	ldrb	r2, [r3, #13]
 801a942:	7a9b      	ldrb	r3, [r3, #10]
 801a944:	0052      	lsls	r2, r2, #1
 801a946:	f402 7280 	and.w	r2, r2, #256	@ 0x100
 801a94a:	4313      	orrs	r3, r2
 801a94c:	bf0c      	ite	eq
 801a94e:	2301      	moveq	r3, #1
 801a950:	2300      	movne	r3, #0
 801a952:	f884 3061 	strb.w	r3, [r4, #97]	@ 0x61
 801a956:	e7dc      	b.n	801a912 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x1e>
 801a958:	f5a5 6360 	sub.w	r3, r5, #3584	@ 0xe00
 801a95c:	b29b      	uxth	r3, r3
 801a95e:	2b7f      	cmp	r3, #127	@ 0x7f
 801a960:	d804      	bhi.n	801a96c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x78>
 801a962:	4639      	mov	r1, r7
 801a964:	4620      	mov	r0, r4
 801a966:	f7ff fd15 	bl	801a394 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 801a96a:	e7e6      	b.n	801a93a <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x46>
 801a96c:	f894 3061 	ldrb.w	r3, [r4, #97]	@ 0x61
 801a970:	2b00      	cmp	r3, #0
 801a972:	d0e3      	beq.n	801a93c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x48>
 801a974:	f640 1302 	movw	r3, #2306	@ 0x902
 801a978:	429d      	cmp	r5, r3
 801a97a:	d1df      	bne.n	801a93c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x48>
 801a97c:	4601      	mov	r1, r0
 801a97e:	4620      	mov	r0, r4
 801a980:	f7ff fcd9 	bl	801a336 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 801a984:	e7d9      	b.n	801a93a <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x46>

0801a986 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>:
 801a986:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801a98a:	461e      	mov	r6, r3
 801a98c:	8ec3      	ldrh	r3, [r0, #54]	@ 0x36
 801a98e:	4604      	mov	r4, r0
 801a990:	4617      	mov	r7, r2
 801a992:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801a996:	f8b3 8022 	ldrh.w	r8, [r3, #34]	@ 0x22
 801a99a:	f7e9 fd69 	bl	8004470 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801a99e:	4605      	mov	r5, r0
 801a9a0:	b918      	cbnz	r0, 801a9aa <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x24>
 801a9a2:	6030      	str	r0, [r6, #0]
 801a9a4:	4628      	mov	r0, r5
 801a9a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801a9aa:	683b      	ldr	r3, [r7, #0]
 801a9ac:	4601      	mov	r1, r0
 801a9ae:	4638      	mov	r0, r7
 801a9b0:	f8d3 9008 	ldr.w	r9, [r3, #8]
 801a9b4:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801a9b8:	47c8      	blx	r9
 801a9ba:	f5a8 63c0 	sub.w	r3, r8, #1536	@ 0x600
 801a9be:	4602      	mov	r2, r0
 801a9c0:	6030      	str	r0, [r6, #0]
 801a9c2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 801a9c6:	d213      	bcs.n	801a9f0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x6a>
 801a9c8:	4643      	mov	r3, r8
 801a9ca:	4639      	mov	r1, r7
 801a9cc:	4620      	mov	r0, r4
 801a9ce:	f7ff fded 	bl	801a5ac <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 801a9d2:	6030      	str	r0, [r6, #0]
 801a9d4:	6833      	ldr	r3, [r6, #0]
 801a9d6:	b143      	cbz	r3, 801a9ea <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x64>
 801a9d8:	7b5a      	ldrb	r2, [r3, #13]
 801a9da:	7a9b      	ldrb	r3, [r3, #10]
 801a9dc:	0052      	lsls	r2, r2, #1
 801a9de:	f402 7280 	and.w	r2, r2, #256	@ 0x100
 801a9e2:	4313      	orrs	r3, r2
 801a9e4:	bf0c      	ite	eq
 801a9e6:	2301      	moveq	r3, #1
 801a9e8:	2300      	movne	r3, #0
 801a9ea:	f884 3061 	strb.w	r3, [r4, #97]	@ 0x61
 801a9ee:	e7d9      	b.n	801a9a4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x1e>
 801a9f0:	f5a5 6360 	sub.w	r3, r5, #3584	@ 0xe00
 801a9f4:	b29b      	uxth	r3, r3
 801a9f6:	2b7f      	cmp	r3, #127	@ 0x7f
 801a9f8:	d804      	bhi.n	801aa04 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x7e>
 801a9fa:	4639      	mov	r1, r7
 801a9fc:	4620      	mov	r0, r4
 801a9fe:	f7ff fcc9 	bl	801a394 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 801aa02:	e7e6      	b.n	801a9d2 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4c>
 801aa04:	f894 3061 	ldrb.w	r3, [r4, #97]	@ 0x61
 801aa08:	2b00      	cmp	r3, #0
 801aa0a:	d0e3      	beq.n	801a9d4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4e>
 801aa0c:	f640 1302 	movw	r3, #2306	@ 0x902
 801aa10:	429d      	cmp	r5, r3
 801aa12:	d1df      	bne.n	801a9d4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4e>
 801aa14:	4601      	mov	r1, r0
 801aa16:	4620      	mov	r0, r4
 801aa18:	f7ff fc8d 	bl	801a336 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 801aa1c:	e7d9      	b.n	801a9d2 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4c>

0801aa1e <_ZN8touchgfx12TextProvider15fillInputBufferEv>:
 801aa1e:	b510      	push	{r4, lr}
 801aa20:	4604      	mov	r4, r0
 801aa22:	f8b4 1040 	ldrh.w	r1, [r4, #64]	@ 0x40
 801aa26:	8f23      	ldrh	r3, [r4, #56]	@ 0x38
 801aa28:	b1e1      	cbz	r1, 801aa64 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x46>
 801aa2a:	2b0a      	cmp	r3, #10
 801aa2c:	d02d      	beq.n	801aa8a <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x6c>
 801aa2e:	8fe2      	ldrh	r2, [r4, #62]	@ 0x3e
 801aa30:	3901      	subs	r1, #1
 801aa32:	eb04 0042 	add.w	r0, r4, r2, lsl #1
 801aa36:	8f40      	ldrh	r0, [r0, #58]	@ 0x3a
 801aa38:	f8a4 1040 	strh.w	r1, [r4, #64]	@ 0x40
 801aa3c:	1c51      	adds	r1, r2, #1
 801aa3e:	b289      	uxth	r1, r1
 801aa40:	2901      	cmp	r1, #1
 801aa42:	bf8a      	itet	hi
 801aa44:	f102 32ff 	addhi.w	r2, r2, #4294967295
 801aa48:	87e1      	strhls	r1, [r4, #62]	@ 0x3e
 801aa4a:	87e2      	strhhi	r2, [r4, #62]	@ 0x3e
 801aa4c:	1c5a      	adds	r2, r3, #1
 801aa4e:	8722      	strh	r2, [r4, #56]	@ 0x38
 801aa50:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
 801aa52:	4413      	add	r3, r2
 801aa54:	b29b      	uxth	r3, r3
 801aa56:	2b09      	cmp	r3, #9
 801aa58:	bf88      	it	hi
 801aa5a:	3b0a      	subhi	r3, #10
 801aa5c:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801aa60:	8458      	strh	r0, [r3, #34]	@ 0x22
 801aa62:	e7de      	b.n	801aa22 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x4>
 801aa64:	8f23      	ldrh	r3, [r4, #56]	@ 0x38
 801aa66:	2b0a      	cmp	r3, #10
 801aa68:	d00f      	beq.n	801aa8a <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x6c>
 801aa6a:	4620      	mov	r0, r4
 801aa6c:	f7ff fc11 	bl	801a292 <_ZN8touchgfx12TextProvider19getNextCharInternalEv>
 801aa70:	8f23      	ldrh	r3, [r4, #56]	@ 0x38
 801aa72:	1c5a      	adds	r2, r3, #1
 801aa74:	8722      	strh	r2, [r4, #56]	@ 0x38
 801aa76:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
 801aa78:	4413      	add	r3, r2
 801aa7a:	b29b      	uxth	r3, r3
 801aa7c:	2b09      	cmp	r3, #9
 801aa7e:	bf88      	it	hi
 801aa80:	3b0a      	subhi	r3, #10
 801aa82:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801aa86:	8458      	strh	r0, [r3, #34]	@ 0x22
 801aa88:	e7ec      	b.n	801aa64 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x46>
 801aa8a:	bd10      	pop	{r4, pc}

0801aa8c <_ZN8touchgfx12TextProvider11getNextCharEv>:
 801aa8c:	b538      	push	{r3, r4, r5, lr}
 801aa8e:	8ec3      	ldrh	r3, [r0, #54]	@ 0x36
 801aa90:	4604      	mov	r4, r0
 801aa92:	eb00 0243 	add.w	r2, r0, r3, lsl #1
 801aa96:	8c55      	ldrh	r5, [r2, #34]	@ 0x22
 801aa98:	8f02      	ldrh	r2, [r0, #56]	@ 0x38
 801aa9a:	3a01      	subs	r2, #1
 801aa9c:	8702      	strh	r2, [r0, #56]	@ 0x38
 801aa9e:	1c5a      	adds	r2, r3, #1
 801aaa0:	b292      	uxth	r2, r2
 801aaa2:	2a09      	cmp	r2, #9
 801aaa4:	bf8a      	itet	hi
 801aaa6:	3b09      	subhi	r3, #9
 801aaa8:	86c2      	strhls	r2, [r0, #54]	@ 0x36
 801aaaa:	86c3      	strhhi	r3, [r0, #54]	@ 0x36
 801aaac:	f7ff ffb7 	bl	801aa1e <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 801aab0:	8c23      	ldrh	r3, [r4, #32]
 801aab2:	2b01      	cmp	r3, #1
 801aab4:	bf9c      	itt	ls
 801aab6:	3301      	addls	r3, #1
 801aab8:	8423      	strhls	r3, [r4, #32]
 801aaba:	8be3      	ldrh	r3, [r4, #30]
 801aabc:	b90b      	cbnz	r3, 801aac2 <_ZN8touchgfx12TextProvider11getNextCharEv+0x36>
 801aabe:	2302      	movs	r3, #2
 801aac0:	83e3      	strh	r3, [r4, #30]
 801aac2:	8be3      	ldrh	r3, [r4, #30]
 801aac4:	4628      	mov	r0, r5
 801aac6:	3b01      	subs	r3, #1
 801aac8:	b29b      	uxth	r3, r3
 801aaca:	83e3      	strh	r3, [r4, #30]
 801aacc:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801aad0:	8365      	strh	r5, [r4, #26]
 801aad2:	bd38      	pop	{r3, r4, r5, pc}

0801aad4 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>:
 801aad4:	428a      	cmp	r2, r1
 801aad6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801aada:	8ec7      	ldrh	r7, [r0, #54]	@ 0x36
 801aadc:	d932      	bls.n	801ab44 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x70>
 801aade:	8f05      	ldrh	r5, [r0, #56]	@ 0x38
 801aae0:	1a54      	subs	r4, r2, r1
 801aae2:	f8b0 8040 	ldrh.w	r8, [r0, #64]	@ 0x40
 801aae6:	19ee      	adds	r6, r5, r7
 801aae8:	fa1f fe84 	uxth.w	lr, r4
 801aaec:	f8b0 c03e 	ldrh.w	ip, [r0, #62]	@ 0x3e
 801aaf0:	3e01      	subs	r6, #1
 801aaf2:	b2b4      	uxth	r4, r6
 801aaf4:	eba4 090e 	sub.w	r9, r4, lr
 801aaf8:	fa1f f989 	uxth.w	r9, r9
 801aafc:	2c09      	cmp	r4, #9
 801aafe:	4626      	mov	r6, r4
 801ab00:	bf88      	it	hi
 801ab02:	f1a4 060a 	subhi.w	r6, r4, #10
 801ab06:	f1bc 0f00 	cmp.w	ip, #0
 801ab0a:	f104 34ff 	add.w	r4, r4, #4294967295
 801ab0e:	bf08      	it	eq
 801ab10:	f04f 0c02 	moveq.w	ip, #2
 801ab14:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 801ab18:	b2a4      	uxth	r4, r4
 801ab1a:	f10c 3cff 	add.w	ip, ip, #4294967295
 801ab1e:	f8b6 a022 	ldrh.w	sl, [r6, #34]	@ 0x22
 801ab22:	454c      	cmp	r4, r9
 801ab24:	fa1f fc8c 	uxth.w	ip, ip
 801ab28:	eb00 064c 	add.w	r6, r0, ip, lsl #1
 801ab2c:	f8a6 a03a 	strh.w	sl, [r6, #58]	@ 0x3a
 801ab30:	d1e4      	bne.n	801aafc <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x28>
 801ab32:	eba5 050e 	sub.w	r5, r5, lr
 801ab36:	eb0e 0408 	add.w	r4, lr, r8
 801ab3a:	f8a0 c03e 	strh.w	ip, [r0, #62]	@ 0x3e
 801ab3e:	8705      	strh	r5, [r0, #56]	@ 0x38
 801ab40:	f8a0 4040 	strh.w	r4, [r0, #64]	@ 0x40
 801ab44:	8f04      	ldrh	r4, [r0, #56]	@ 0x38
 801ab46:	250a      	movs	r5, #10
 801ab48:	1a64      	subs	r4, r4, r1
 801ab4a:	4439      	add	r1, r7
 801ab4c:	b289      	uxth	r1, r1
 801ab4e:	8704      	strh	r4, [r0, #56]	@ 0x38
 801ab50:	2909      	cmp	r1, #9
 801ab52:	bf88      	it	hi
 801ab54:	390a      	subhi	r1, #10
 801ab56:	86c1      	strh	r1, [r0, #54]	@ 0x36
 801ab58:	b18a      	cbz	r2, 801ab7e <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xaa>
 801ab5a:	8f01      	ldrh	r1, [r0, #56]	@ 0x38
 801ab5c:	3a01      	subs	r2, #1
 801ab5e:	3101      	adds	r1, #1
 801ab60:	b292      	uxth	r2, r2
 801ab62:	f833 4012 	ldrh.w	r4, [r3, r2, lsl #1]
 801ab66:	8701      	strh	r1, [r0, #56]	@ 0x38
 801ab68:	8ec1      	ldrh	r1, [r0, #54]	@ 0x36
 801ab6a:	b901      	cbnz	r1, 801ab6e <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x9a>
 801ab6c:	86c5      	strh	r5, [r0, #54]	@ 0x36
 801ab6e:	8ec1      	ldrh	r1, [r0, #54]	@ 0x36
 801ab70:	3901      	subs	r1, #1
 801ab72:	b289      	uxth	r1, r1
 801ab74:	86c1      	strh	r1, [r0, #54]	@ 0x36
 801ab76:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 801ab7a:	844c      	strh	r4, [r1, #34]	@ 0x22
 801ab7c:	e7ec      	b.n	801ab58 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x84>
 801ab7e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801ab82:	f7ff bf4c 	b.w	801aa1e <_ZN8touchgfx12TextProvider15fillInputBufferEv>

0801ab86 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>:
 801ab86:	b570      	push	{r4, r5, r6, lr}
 801ab88:	2500      	movs	r5, #0
 801ab8a:	4295      	cmp	r5, r2
 801ab8c:	d011      	beq.n	801abb2 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x2c>
 801ab8e:	8bc4      	ldrh	r4, [r0, #30]
 801ab90:	f831 6b02 	ldrh.w	r6, [r1], #2
 801ab94:	4414      	add	r4, r2
 801ab96:	3c01      	subs	r4, #1
 801ab98:	1b64      	subs	r4, r4, r5
 801ab9a:	b2a4      	uxth	r4, r4
 801ab9c:	2c01      	cmp	r4, #1
 801ab9e:	bf88      	it	hi
 801aba0:	3c02      	subhi	r4, #2
 801aba2:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 801aba6:	8b64      	ldrh	r4, [r4, #26]
 801aba8:	42b4      	cmp	r4, r6
 801abaa:	d117      	bne.n	801abdc <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x56>
 801abac:	3501      	adds	r5, #1
 801abae:	b2ad      	uxth	r5, r5
 801abb0:	e7eb      	b.n	801ab8a <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x4>
 801abb2:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 801abb6:	2400      	movs	r4, #0
 801abb8:	4413      	add	r3, r2
 801abba:	b2a2      	uxth	r2, r4
 801abbc:	429a      	cmp	r2, r3
 801abbe:	da0f      	bge.n	801abe0 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x5a>
 801abc0:	8ec6      	ldrh	r6, [r0, #54]	@ 0x36
 801abc2:	f831 5014 	ldrh.w	r5, [r1, r4, lsl #1]
 801abc6:	3401      	adds	r4, #1
 801abc8:	4432      	add	r2, r6
 801abca:	b292      	uxth	r2, r2
 801abcc:	2a09      	cmp	r2, #9
 801abce:	bf88      	it	hi
 801abd0:	3a0a      	subhi	r2, #10
 801abd2:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 801abd6:	8c52      	ldrh	r2, [r2, #34]	@ 0x22
 801abd8:	42aa      	cmp	r2, r5
 801abda:	d0ee      	beq.n	801abba <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x34>
 801abdc:	2000      	movs	r0, #0
 801abde:	bd70      	pop	{r4, r5, r6, pc}
 801abe0:	2001      	movs	r0, #1
 801abe2:	e7fc      	b.n	801abde <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x58>

0801abe4 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>:
 801abe4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801abe8:	4605      	mov	r5, r0
 801abea:	4616      	mov	r6, r2
 801abec:	1c8c      	adds	r4, r1, #2
 801abee:	8809      	ldrh	r1, [r1, #0]
 801abf0:	ea4f 3a11 	mov.w	sl, r1, lsr #12
 801abf4:	f834 301a 	ldrh.w	r3, [r4, sl, lsl #1]
 801abf8:	42b3      	cmp	r3, r6
 801abfa:	d124      	bne.n	801ac46 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x62>
 801abfc:	f3c1 2903 	ubfx	r9, r1, #8, #4
 801ac00:	f3c1 1803 	ubfx	r8, r1, #4, #4
 801ac04:	f001 070f 	and.w	r7, r1, #15
 801ac08:	4652      	mov	r2, sl
 801ac0a:	f8cd 8000 	str.w	r8, [sp]
 801ac0e:	464b      	mov	r3, r9
 801ac10:	4621      	mov	r1, r4
 801ac12:	4628      	mov	r0, r5
 801ac14:	f7ff ffb7 	bl	801ab86 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>
 801ac18:	4683      	mov	fp, r0
 801ac1a:	b168      	cbz	r0, 801ac38 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x54>
 801ac1c:	eb0a 0109 	add.w	r1, sl, r9
 801ac20:	463a      	mov	r2, r7
 801ac22:	4628      	mov	r0, r5
 801ac24:	4441      	add	r1, r8
 801ac26:	eb04 0341 	add.w	r3, r4, r1, lsl #1
 801ac2a:	4649      	mov	r1, r9
 801ac2c:	f7ff ff52 	bl	801aad4 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>
 801ac30:	4658      	mov	r0, fp
 801ac32:	b003      	add	sp, #12
 801ac34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ac38:	eb07 010a 	add.w	r1, r7, sl
 801ac3c:	4449      	add	r1, r9
 801ac3e:	4441      	add	r1, r8
 801ac40:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 801ac44:	e7d2      	b.n	801abec <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x8>
 801ac46:	f04f 0b00 	mov.w	fp, #0
 801ac4a:	e7f1      	b.n	801ac30 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x4c>

0801ac4c <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>:
 801ac4c:	b570      	push	{r4, r5, r6, lr}
 801ac4e:	8810      	ldrh	r0, [r2, #0]
 801ac50:	4298      	cmp	r0, r3
 801ac52:	d817      	bhi.n	801ac84 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801ac54:	1e48      	subs	r0, r1, #1
 801ac56:	f832 0020 	ldrh.w	r0, [r2, r0, lsl #2]
 801ac5a:	4298      	cmp	r0, r3
 801ac5c:	d312      	bcc.n	801ac84 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801ac5e:	2400      	movs	r4, #0
 801ac60:	428c      	cmp	r4, r1
 801ac62:	d20f      	bcs.n	801ac84 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801ac64:	1860      	adds	r0, r4, r1
 801ac66:	1040      	asrs	r0, r0, #1
 801ac68:	f832 6020 	ldrh.w	r6, [r2, r0, lsl #2]
 801ac6c:	0085      	lsls	r5, r0, #2
 801ac6e:	42b3      	cmp	r3, r6
 801ac70:	d902      	bls.n	801ac78 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x2c>
 801ac72:	3001      	adds	r0, #1
 801ac74:	b284      	uxth	r4, r0
 801ac76:	e7f3      	b.n	801ac60 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 801ac78:	d201      	bcs.n	801ac7e <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x32>
 801ac7a:	b281      	uxth	r1, r0
 801ac7c:	e7f0      	b.n	801ac60 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 801ac7e:	442a      	add	r2, r5
 801ac80:	8850      	ldrh	r0, [r2, #2]
 801ac82:	bd70      	pop	{r4, r5, r6, pc}
 801ac84:	2000      	movs	r0, #0
 801ac86:	e7fc      	b.n	801ac82 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x36>

0801ac88 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>:
 801ac88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ac8c:	6c45      	ldr	r5, [r0, #68]	@ 0x44
 801ac8e:	4604      	mov	r4, r0
 801ac90:	260b      	movs	r6, #11
 801ac92:	886f      	ldrh	r7, [r5, #2]
 801ac94:	087f      	lsrs	r7, r7, #1
 801ac96:	3e01      	subs	r6, #1
 801ac98:	d013      	beq.n	801acc2 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3a>
 801ac9a:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 801ac9c:	462a      	mov	r2, r5
 801ac9e:	4639      	mov	r1, r7
 801aca0:	4620      	mov	r0, r4
 801aca2:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801aca6:	f8b3 8022 	ldrh.w	r8, [r3, #34]	@ 0x22
 801acaa:	4643      	mov	r3, r8
 801acac:	f7ff ffce 	bl	801ac4c <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>
 801acb0:	b138      	cbz	r0, 801acc2 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3a>
 801acb2:	eb05 0140 	add.w	r1, r5, r0, lsl #1
 801acb6:	4642      	mov	r2, r8
 801acb8:	4620      	mov	r0, r4
 801acba:	f7ff ff93 	bl	801abe4 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>
 801acbe:	2800      	cmp	r0, #0
 801acc0:	d1e9      	bne.n	801ac96 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0xe>
 801acc2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

0801acc8 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>:
 801acc8:	b570      	push	{r4, r5, r6, lr}
 801acca:	694a      	ldr	r2, [r1, #20]
 801accc:	6a8d      	ldr	r5, [r1, #40]	@ 0x28
 801acce:	684b      	ldr	r3, [r1, #4]
 801acd0:	1b54      	subs	r4, r2, r5
 801acd2:	6ace      	ldr	r6, [r1, #44]	@ 0x2c
 801acd4:	f000 8106 	beq.w	801aee4 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x21c>
 801acd8:	1b9b      	subs	r3, r3, r6
 801acda:	d003      	beq.n	801ace4 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 801acdc:	4363      	muls	r3, r4
 801acde:	2210      	movs	r2, #16
 801ace0:	fb93 f3f2 	sdiv	r3, r3, r2
 801ace4:	680c      	ldr	r4, [r1, #0]
 801ace6:	698a      	ldr	r2, [r1, #24]
 801ace8:	1b65      	subs	r5, r4, r5
 801acea:	f000 80fd 	beq.w	801aee8 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x220>
 801acee:	1b92      	subs	r2, r2, r6
 801acf0:	d003      	beq.n	801acfa <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 801acf2:	436a      	muls	r2, r5
 801acf4:	2410      	movs	r4, #16
 801acf6:	fb92 f2f4 	sdiv	r2, r2, r4
 801acfa:	1a9b      	subs	r3, r3, r2
 801acfc:	ed9f 4a89 	vldr	s8, [pc, #548]	@ 801af24 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x25c>
 801ad00:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801ad04:	460a      	mov	r2, r1
 801ad06:	ee07 3a90 	vmov	s15, r3
 801ad0a:	f100 040c 	add.w	r4, r0, #12
 801ad0e:	4603      	mov	r3, r0
 801ad10:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801ad14:	ee67 7a84 	vmul.f32	s15, s15, s8
 801ad18:	ee87 3a27 	vdiv.f32	s6, s14, s15
 801ad1c:	eeb1 6a43 	vneg.f32	s12, s6
 801ad20:	edd2 7a02 	vldr	s15, [r2, #8]
 801ad24:	3214      	adds	r2, #20
 801ad26:	eec7 6a27 	vdiv.f32	s13, s14, s15
 801ad2a:	ece3 6a01 	vstmia	r3!, {s13}
 801ad2e:	429c      	cmp	r4, r3
 801ad30:	ed52 7a02 	vldr	s15, [r2, #-8]
 801ad34:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801ad38:	edc3 7a02 	vstr	s15, [r3, #8]
 801ad3c:	ed52 7a01 	vldr	s15, [r2, #-4]
 801ad40:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801ad44:	edc3 7a05 	vstr	s15, [r3, #20]
 801ad48:	d1ea      	bne.n	801ad20 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x58>
 801ad4a:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 801ad4c:	698b      	ldr	r3, [r1, #24]
 801ad4e:	edd0 4a02 	vldr	s9, [r0, #8]
 801ad52:	1a9b      	subs	r3, r3, r2
 801ad54:	edd0 3a00 	vldr	s7, [r0]
 801ad58:	edd0 6a01 	vldr	s13, [r0, #4]
 801ad5c:	ee07 3a90 	vmov	s15, r3
 801ad60:	684b      	ldr	r3, [r1, #4]
 801ad62:	ee76 6ae4 	vsub.f32	s13, s13, s9
 801ad66:	ed90 5a05 	vldr	s10, [r0, #20]
 801ad6a:	1a9b      	subs	r3, r3, r2
 801ad6c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801ad70:	ee73 4ae4 	vsub.f32	s9, s7, s9
 801ad74:	ed90 2a03 	vldr	s4, [r0, #12]
 801ad78:	ee07 3a10 	vmov	s14, r3
 801ad7c:	edd0 5a04 	vldr	s11, [r0, #16]
 801ad80:	ee67 7a84 	vmul.f32	s15, s15, s8
 801ad84:	ed90 1a07 	vldr	s2, [r0, #28]
 801ad88:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801ad8c:	edd0 2a06 	vldr	s5, [r0, #24]
 801ad90:	ee75 5ac5 	vsub.f32	s11, s11, s10
 801ad94:	ee64 7ae7 	vnmul.f32	s15, s9, s15
 801ad98:	ee27 7a04 	vmul.f32	s14, s14, s8
 801ad9c:	ee32 5a45 	vsub.f32	s10, s4, s10
 801ada0:	eee6 7a87 	vfma.f32	s15, s13, s14
 801ada4:	ee67 7a83 	vmul.f32	s15, s15, s6
 801ada8:	edc0 7a09 	vstr	s15, [r0, #36]	@ 0x24
 801adac:	6a8c      	ldr	r4, [r1, #40]	@ 0x28
 801adae:	694a      	ldr	r2, [r1, #20]
 801adb0:	1b13      	subs	r3, r2, r4
 801adb2:	ee07 3a10 	vmov	s14, r3
 801adb6:	680b      	ldr	r3, [r1, #0]
 801adb8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801adbc:	1b1b      	subs	r3, r3, r4
 801adbe:	ee27 7a04 	vmul.f32	s14, s14, s8
 801adc2:	ee64 4ac7 	vnmul.f32	s9, s9, s14
 801adc6:	ee07 3a10 	vmov	s14, r3
 801adca:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801adce:	ee27 7a04 	vmul.f32	s14, s14, s8
 801add2:	eee6 4a87 	vfma.f32	s9, s13, s14
 801add6:	ee64 4a86 	vmul.f32	s9, s9, s12
 801adda:	edc0 4a0a 	vstr	s9, [r0, #40]	@ 0x28
 801adde:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 801ade0:	698b      	ldr	r3, [r1, #24]
 801ade2:	1a9b      	subs	r3, r3, r2
 801ade4:	ee06 3a90 	vmov	s13, r3
 801ade8:	684b      	ldr	r3, [r1, #4]
 801adea:	1a9b      	subs	r3, r3, r2
 801adec:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801adf0:	ee07 3a10 	vmov	s14, r3
 801adf4:	ee66 6a84 	vmul.f32	s13, s13, s8
 801adf8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801adfc:	ee65 6a66 	vnmul.f32	s13, s10, s13
 801ae00:	ee27 7a04 	vmul.f32	s14, s14, s8
 801ae04:	eee5 6a87 	vfma.f32	s13, s11, s14
 801ae08:	ee66 6a83 	vmul.f32	s13, s13, s6
 801ae0c:	edc0 6a0b 	vstr	s13, [r0, #44]	@ 0x2c
 801ae10:	6a8c      	ldr	r4, [r1, #40]	@ 0x28
 801ae12:	694a      	ldr	r2, [r1, #20]
 801ae14:	1b13      	subs	r3, r2, r4
 801ae16:	ee07 3a10 	vmov	s14, r3
 801ae1a:	680b      	ldr	r3, [r1, #0]
 801ae1c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801ae20:	1b1b      	subs	r3, r3, r4
 801ae22:	ee27 7a04 	vmul.f32	s14, s14, s8
 801ae26:	ee25 5a47 	vnmul.f32	s10, s10, s14
 801ae2a:	ee07 3a10 	vmov	s14, r3
 801ae2e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801ae32:	ee27 7a04 	vmul.f32	s14, s14, s8
 801ae36:	eea5 5a87 	vfma.f32	s10, s11, s14
 801ae3a:	edd0 5a08 	vldr	s11, [r0, #32]
 801ae3e:	ee31 1a65 	vsub.f32	s2, s2, s11
 801ae42:	ee72 5ae5 	vsub.f32	s11, s5, s11
 801ae46:	ee25 5a06 	vmul.f32	s10, s10, s12
 801ae4a:	ed80 5a0c 	vstr	s10, [r0, #48]	@ 0x30
 801ae4e:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 801ae50:	698b      	ldr	r3, [r1, #24]
 801ae52:	1a9b      	subs	r3, r3, r2
 801ae54:	ee07 3a10 	vmov	s14, r3
 801ae58:	684b      	ldr	r3, [r1, #4]
 801ae5a:	1a9b      	subs	r3, r3, r2
 801ae5c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801ae60:	ee01 3a90 	vmov	s3, r3
 801ae64:	ee27 7a04 	vmul.f32	s14, s14, s8
 801ae68:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 801ae6c:	ee25 7ac7 	vnmul.f32	s14, s11, s14
 801ae70:	ee61 1a84 	vmul.f32	s3, s3, s8
 801ae74:	eea1 7a21 	vfma.f32	s14, s2, s3
 801ae78:	ee27 7a03 	vmul.f32	s14, s14, s6
 801ae7c:	ed80 7a0d 	vstr	s14, [r0, #52]	@ 0x34
 801ae80:	6a8c      	ldr	r4, [r1, #40]	@ 0x28
 801ae82:	694a      	ldr	r2, [r1, #20]
 801ae84:	1b13      	subs	r3, r2, r4
 801ae86:	ee03 3a10 	vmov	s6, r3
 801ae8a:	680b      	ldr	r3, [r1, #0]
 801ae8c:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 801ae90:	1b1b      	subs	r3, r3, r4
 801ae92:	ee23 3a04 	vmul.f32	s6, s6, s8
 801ae96:	ee65 5ac3 	vnmul.f32	s11, s11, s6
 801ae9a:	ee03 3a10 	vmov	s6, r3
 801ae9e:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 801aea2:	ee23 4a04 	vmul.f32	s8, s6, s8
 801aea6:	eee1 5a04 	vfma.f32	s11, s2, s8
 801aeaa:	ee25 6a86 	vmul.f32	s12, s11, s12
 801aeae:	ee62 5a67 	vnmul.f32	s11, s4, s15
 801aeb2:	ed80 6a0e 	vstr	s12, [r0, #56]	@ 0x38
 801aeb6:	eee3 5aa6 	vfma.f32	s11, s7, s13
 801aeba:	eef5 5ac0 	vcmpe.f32	s11, #0.0
 801aebe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801aec2:	dd13      	ble.n	801aeec <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x224>
 801aec4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 801aec8:	ee62 7ae7 	vnmul.f32	s15, s5, s15
 801aecc:	63c3      	str	r3, [r0, #60]	@ 0x3c
 801aece:	eee3 7a87 	vfma.f32	s15, s7, s14
 801aed2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801aed6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801aeda:	dd15      	ble.n	801af08 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x240>
 801aedc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 801aee0:	6403      	str	r3, [r0, #64]	@ 0x40
 801aee2:	bd70      	pop	{r4, r5, r6, pc}
 801aee4:	4623      	mov	r3, r4
 801aee6:	e6fd      	b.n	801ace4 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 801aee8:	462a      	mov	r2, r5
 801aeea:	e706      	b.n	801acfa <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 801aeec:	d502      	bpl.n	801aef4 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x22c>
 801aeee:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 801aef2:	e7e9      	b.n	801aec8 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x200>
 801aef4:	ee22 2a64 	vnmul.f32	s4, s4, s9
 801aef8:	eea3 2a85 	vfma.f32	s4, s7, s10
 801aefc:	eeb5 2ac0 	vcmpe.f32	s4, #0.0
 801af00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801af04:	dade      	bge.n	801aec4 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1fc>
 801af06:	e7f2      	b.n	801aeee <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x226>
 801af08:	d502      	bpl.n	801af10 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x248>
 801af0a:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 801af0e:	e7e7      	b.n	801aee0 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x218>
 801af10:	ee62 4ae4 	vnmul.f32	s9, s5, s9
 801af14:	eee3 4a86 	vfma.f32	s9, s7, s12
 801af18:	eef5 4ac0 	vcmpe.f32	s9, #0.0
 801af1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801af20:	dadc      	bge.n	801aedc <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x214>
 801af22:	e7f2      	b.n	801af0a <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x242>
 801af24:	3d800000 	.word	0x3d800000

0801af28 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>:
 801af28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801af2c:	2714      	movs	r7, #20
 801af2e:	435f      	muls	r7, r3
 801af30:	eb02 0c07 	add.w	ip, r2, r7
 801af34:	f8dc 5004 	ldr.w	r5, [ip, #4]
 801af38:	f115 0e0f 	adds.w	lr, r5, #15
 801af3c:	f100 80a2 	bmi.w	801b084 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x15c>
 801af40:	ea4f 1e2e 	mov.w	lr, lr, asr #4
 801af44:	9c08      	ldr	r4, [sp, #32]
 801af46:	2614      	movs	r6, #20
 801af48:	f8c0 e014 	str.w	lr, [r0, #20]
 801af4c:	4366      	muls	r6, r4
 801af4e:	eb02 0806 	add.w	r8, r2, r6
 801af52:	f8d8 5004 	ldr.w	r5, [r8, #4]
 801af56:	f115 040f 	adds.w	r4, r5, #15
 801af5a:	f100 809f 	bmi.w	801b09c <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x174>
 801af5e:	1124      	asrs	r4, r4, #4
 801af60:	eba4 040e 	sub.w	r4, r4, lr
 801af64:	6184      	str	r4, [r0, #24]
 801af66:	2c00      	cmp	r4, #0
 801af68:	f000 808a 	beq.w	801b080 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x158>
 801af6c:	f8dc 9004 	ldr.w	r9, [ip, #4]
 801af70:	f8d8 4004 	ldr.w	r4, [r8, #4]
 801af74:	5995      	ldr	r5, [r2, r6]
 801af76:	eba4 0809 	sub.w	r8, r4, r9
 801af7a:	59d4      	ldr	r4, [r2, r7]
 801af7c:	eba5 0a04 	sub.w	sl, r5, r4
 801af80:	ea4f 1608 	mov.w	r6, r8, lsl #4
 801af84:	ea4f 150a 	mov.w	r5, sl, lsl #4
 801af88:	fb0e fe05 	mul.w	lr, lr, r5
 801af8c:	fb0a ee19 	mls	lr, sl, r9, lr
 801af90:	fb08 e404 	mla	r4, r8, r4, lr
 801af94:	3c01      	subs	r4, #1
 801af96:	19a4      	adds	r4, r4, r6
 801af98:	f100 808c 	bmi.w	801b0b4 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x18c>
 801af9c:	fb94 fef6 	sdiv	lr, r4, r6
 801afa0:	fb06 441e 	mls	r4, r6, lr, r4
 801afa4:	f8c0 e000 	str.w	lr, [r0]
 801afa8:	6104      	str	r4, [r0, #16]
 801afaa:	2d00      	cmp	r5, #0
 801afac:	f2c0 8095 	blt.w	801b0da <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1b2>
 801afb0:	fb95 f4f6 	sdiv	r4, r5, r6
 801afb4:	fb06 5514 	mls	r5, r6, r4, r5
 801afb8:	6044      	str	r4, [r0, #4]
 801afba:	6085      	str	r5, [r0, #8]
 801afbc:	60c6      	str	r6, [r0, #12]
 801afbe:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 801afc2:	f8dc 4004 	ldr.w	r4, [ip, #4]
 801afc6:	6945      	ldr	r5, [r0, #20]
 801afc8:	59d2      	ldr	r2, [r2, r7]
 801afca:	ebc4 1405 	rsb	r4, r4, r5, lsl #4
 801afce:	eddf 6a4b 	vldr	s13, [pc, #300]	@ 801b0fc <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1d4>
 801afd2:	ed91 6a0a 	vldr	s12, [r1, #40]	@ 0x28
 801afd6:	ee07 4a10 	vmov	s14, r4
 801afda:	6804      	ldr	r4, [r0, #0]
 801afdc:	ebc2 1204 	rsb	r2, r2, r4, lsl #4
 801afe0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801afe4:	ee07 2a90 	vmov	s15, r2
 801afe8:	ee27 7a26 	vmul.f32	s14, s14, s13
 801afec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801aff0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801aff4:	edd3 6a00 	vldr	s13, [r3]
 801aff8:	eee6 6a07 	vfma.f32	s13, s12, s14
 801affc:	ed91 6a09 	vldr	s12, [r1, #36]	@ 0x24
 801b000:	eee6 6a27 	vfma.f32	s13, s12, s15
 801b004:	edc0 6a07 	vstr	s13, [r0, #28]
 801b008:	edd0 6a01 	vldr	s13, [r0, #4]
 801b00c:	edd1 5a09 	vldr	s11, [r1, #36]	@ 0x24
 801b010:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801b014:	ed91 6a0a 	vldr	s12, [r1, #40]	@ 0x28
 801b018:	eea6 6aa5 	vfma.f32	s12, s13, s11
 801b01c:	ed80 6a08 	vstr	s12, [r0, #32]
 801b020:	6a4a      	ldr	r2, [r1, #36]	@ 0x24
 801b022:	6242      	str	r2, [r0, #36]	@ 0x24
 801b024:	edd1 5a0c 	vldr	s11, [r1, #48]	@ 0x30
 801b028:	ed93 6a03 	vldr	s12, [r3, #12]
 801b02c:	eea5 6a87 	vfma.f32	s12, s11, s14
 801b030:	edd1 5a0b 	vldr	s11, [r1, #44]	@ 0x2c
 801b034:	eea5 6aa7 	vfma.f32	s12, s11, s15
 801b038:	ed80 6a0a 	vstr	s12, [r0, #40]	@ 0x28
 801b03c:	edd1 5a0b 	vldr	s11, [r1, #44]	@ 0x2c
 801b040:	ed91 6a0c 	vldr	s12, [r1, #48]	@ 0x30
 801b044:	eea6 6aa5 	vfma.f32	s12, s13, s11
 801b048:	ed80 6a0b 	vstr	s12, [r0, #44]	@ 0x2c
 801b04c:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 801b04e:	6302      	str	r2, [r0, #48]	@ 0x30
 801b050:	ed93 6a06 	vldr	s12, [r3, #24]
 801b054:	edd1 5a0e 	vldr	s11, [r1, #56]	@ 0x38
 801b058:	eea5 6a87 	vfma.f32	s12, s11, s14
 801b05c:	eeb0 7a46 	vmov.f32	s14, s12
 801b060:	ed91 6a0d 	vldr	s12, [r1, #52]	@ 0x34
 801b064:	eea6 7a27 	vfma.f32	s14, s12, s15
 801b068:	ed80 7a0d 	vstr	s14, [r0, #52]	@ 0x34
 801b06c:	ed91 7a0d 	vldr	s14, [r1, #52]	@ 0x34
 801b070:	edd1 7a0e 	vldr	s15, [r1, #56]	@ 0x38
 801b074:	eee6 7a87 	vfma.f32	s15, s13, s14
 801b078:	edc0 7a0e 	vstr	s15, [r0, #56]	@ 0x38
 801b07c:	6b4b      	ldr	r3, [r1, #52]	@ 0x34
 801b07e:	63c3      	str	r3, [r0, #60]	@ 0x3c
 801b080:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b084:	2410      	movs	r4, #16
 801b086:	f1c5 0501 	rsb	r5, r5, #1
 801b08a:	fb9e fef4 	sdiv	lr, lr, r4
 801b08e:	f015 050f 	ands.w	r5, r5, #15
 801b092:	bf18      	it	ne
 801b094:	2501      	movne	r5, #1
 801b096:	ebae 0e05 	sub.w	lr, lr, r5
 801b09a:	e753      	b.n	801af44 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1c>
 801b09c:	f04f 0910 	mov.w	r9, #16
 801b0a0:	f1c5 0501 	rsb	r5, r5, #1
 801b0a4:	fb94 f4f9 	sdiv	r4, r4, r9
 801b0a8:	f015 050f 	ands.w	r5, r5, #15
 801b0ac:	bf18      	it	ne
 801b0ae:	2501      	movne	r5, #1
 801b0b0:	1b64      	subs	r4, r4, r5
 801b0b2:	e755      	b.n	801af60 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x38>
 801b0b4:	4264      	negs	r4, r4
 801b0b6:	fb94 fef6 	sdiv	lr, r4, r6
 801b0ba:	f1ce 0800 	rsb	r8, lr, #0
 801b0be:	fb06 441e 	mls	r4, r6, lr, r4
 801b0c2:	f8c0 8000 	str.w	r8, [r0]
 801b0c6:	6104      	str	r4, [r0, #16]
 801b0c8:	2c00      	cmp	r4, #0
 801b0ca:	f43f af6e 	beq.w	801afaa <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x82>
 801b0ce:	ea6f 0e0e 	mvn.w	lr, lr
 801b0d2:	1b34      	subs	r4, r6, r4
 801b0d4:	f8c0 e000 	str.w	lr, [r0]
 801b0d8:	e766      	b.n	801afa8 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x80>
 801b0da:	426d      	negs	r5, r5
 801b0dc:	fb95 f4f6 	sdiv	r4, r5, r6
 801b0e0:	f1c4 0e00 	rsb	lr, r4, #0
 801b0e4:	fb06 5514 	mls	r5, r6, r4, r5
 801b0e8:	f8c0 e004 	str.w	lr, [r0, #4]
 801b0ec:	6085      	str	r5, [r0, #8]
 801b0ee:	2d00      	cmp	r5, #0
 801b0f0:	f43f af64 	beq.w	801afbc <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x94>
 801b0f4:	43e4      	mvns	r4, r4
 801b0f6:	1b75      	subs	r5, r6, r5
 801b0f8:	6044      	str	r4, [r0, #4]
 801b0fa:	e75e      	b.n	801afba <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x92>
 801b0fc:	3d800000 	.word	0x3d800000

0801b100 <_ZN8touchgfx7Unicode6strlenEPKt>:
 801b100:	4602      	mov	r2, r0
 801b102:	b148      	cbz	r0, 801b118 <_ZN8touchgfx7Unicode6strlenEPKt+0x18>
 801b104:	2300      	movs	r3, #0
 801b106:	b298      	uxth	r0, r3
 801b108:	3301      	adds	r3, #1
 801b10a:	eb02 0143 	add.w	r1, r2, r3, lsl #1
 801b10e:	f831 1c02 	ldrh.w	r1, [r1, #-2]
 801b112:	2900      	cmp	r1, #0
 801b114:	d1f7      	bne.n	801b106 <_ZN8touchgfx7Unicode6strlenEPKt+0x6>
 801b116:	4770      	bx	lr
 801b118:	4770      	bx	lr

0801b11a <_ZN8touchgfx7Unicode7strncpyEPtPKct>:
 801b11a:	b530      	push	{r4, r5, lr}
 801b11c:	4604      	mov	r4, r0
 801b11e:	b159      	cbz	r1, 801b138 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1e>
 801b120:	b148      	cbz	r0, 801b136 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>
 801b122:	2300      	movs	r3, #0
 801b124:	b298      	uxth	r0, r3
 801b126:	4282      	cmp	r2, r0
 801b128:	d905      	bls.n	801b136 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>
 801b12a:	5ccd      	ldrb	r5, [r1, r3]
 801b12c:	f824 5013 	strh.w	r5, [r4, r3, lsl #1]
 801b130:	3301      	adds	r3, #1
 801b132:	2d00      	cmp	r5, #0
 801b134:	d1f6      	bne.n	801b124 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0xa>
 801b136:	bd30      	pop	{r4, r5, pc}
 801b138:	4608      	mov	r0, r1
 801b13a:	e7fc      	b.n	801b136 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>

0801b13c <_ZN8touchgfx7Unicode4itoaElPtti.part.2>:
 801b13c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b13e:	b08b      	sub	sp, #44	@ 0x2c
 801b140:	468c      	mov	ip, r1
 801b142:	4604      	mov	r4, r0
 801b144:	2100      	movs	r1, #0
 801b146:	261f      	movs	r6, #31
 801b148:	af01      	add	r7, sp, #4
 801b14a:	f88d 1024 	strb.w	r1, [sp, #36]	@ 0x24
 801b14e:	1e71      	subs	r1, r6, #1
 801b150:	fb94 fef3 	sdiv	lr, r4, r3
 801b154:	fb03 441e 	mls	r4, r3, lr, r4
 801b158:	ea84 75e4 	eor.w	r5, r4, r4, asr #31
 801b15c:	eba5 75e4 	sub.w	r5, r5, r4, asr #31
 801b160:	b2ec      	uxtb	r4, r5
 801b162:	2d09      	cmp	r5, #9
 801b164:	bfd4      	ite	le
 801b166:	3430      	addle	r4, #48	@ 0x30
 801b168:	3457      	addgt	r4, #87	@ 0x57
 801b16a:	b2e4      	uxtb	r4, r4
 801b16c:	55bc      	strb	r4, [r7, r6]
 801b16e:	4674      	mov	r4, lr
 801b170:	b974      	cbnz	r4, 801b190 <_ZN8touchgfx7Unicode4itoaElPtti.part.2+0x54>
 801b172:	2800      	cmp	r0, #0
 801b174:	da05      	bge.n	801b182 <_ZN8touchgfx7Unicode4itoaElPtti.part.2+0x46>
 801b176:	ab0a      	add	r3, sp, #40	@ 0x28
 801b178:	4419      	add	r1, r3
 801b17a:	232d      	movs	r3, #45	@ 0x2d
 801b17c:	f801 3c24 	strb.w	r3, [r1, #-36]
 801b180:	1eb1      	subs	r1, r6, #2
 801b182:	3101      	adds	r1, #1
 801b184:	4660      	mov	r0, ip
 801b186:	4439      	add	r1, r7
 801b188:	f7ff ffc7 	bl	801b11a <_ZN8touchgfx7Unicode7strncpyEPtPKct>
 801b18c:	b00b      	add	sp, #44	@ 0x2c
 801b18e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801b190:	460e      	mov	r6, r1
 801b192:	e7dc      	b.n	801b14e <_ZN8touchgfx7Unicode4itoaElPtti.part.2+0x12>

0801b194 <_ZN8touchgfx7Unicode4utoaEmPtti.part.3>:
 801b194:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b196:	468c      	mov	ip, r1
 801b198:	b08b      	sub	sp, #44	@ 0x2c
 801b19a:	2100      	movs	r1, #0
 801b19c:	ae01      	add	r6, sp, #4
 801b19e:	f88d 1024 	strb.w	r1, [sp, #36]	@ 0x24
 801b1a2:	211f      	movs	r1, #31
 801b1a4:	fbb0 f7f3 	udiv	r7, r0, r3
 801b1a8:	fb03 0517 	mls	r5, r3, r7, r0
 801b1ac:	4638      	mov	r0, r7
 801b1ae:	b2ec      	uxtb	r4, r5
 801b1b0:	2d09      	cmp	r5, #9
 801b1b2:	bfd4      	ite	le
 801b1b4:	3430      	addle	r4, #48	@ 0x30
 801b1b6:	3457      	addgt	r4, #87	@ 0x57
 801b1b8:	b2e4      	uxtb	r4, r4
 801b1ba:	558c      	strb	r4, [r1, r6]
 801b1bc:	1e4c      	subs	r4, r1, #1
 801b1be:	b92f      	cbnz	r7, 801b1cc <_ZN8touchgfx7Unicode4utoaEmPtti.part.3+0x38>
 801b1c0:	4431      	add	r1, r6
 801b1c2:	4660      	mov	r0, ip
 801b1c4:	f7ff ffa9 	bl	801b11a <_ZN8touchgfx7Unicode7strncpyEPtPKct>
 801b1c8:	b00b      	add	sp, #44	@ 0x2c
 801b1ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801b1cc:	4621      	mov	r1, r4
 801b1ce:	e7e9      	b.n	801b1a4 <_ZN8touchgfx7Unicode4utoaEmPtti.part.3+0x10>

0801b1d0 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt>:
 801b1d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b1d4:	b085      	sub	sp, #20
 801b1d6:	4691      	mov	r9, r2
 801b1d8:	6802      	ldr	r2, [r0, #0]
 801b1da:	4688      	mov	r8, r1
 801b1dc:	461c      	mov	r4, r3
 801b1de:	f89d 1040 	ldrb.w	r1, [sp, #64]	@ 0x40
 801b1e2:	f89d 3048 	ldrb.w	r3, [sp, #72]	@ 0x48
 801b1e6:	4683      	mov	fp, r0
 801b1e8:	4610      	mov	r0, r2
 801b1ea:	9103      	str	r1, [sp, #12]
 801b1ec:	9302      	str	r3, [sp, #8]
 801b1ee:	9201      	str	r2, [sp, #4]
 801b1f0:	f7ff ff86 	bl	801b100 <_ZN8touchgfx7Unicode6strlenEPKt>
 801b1f4:	f1b8 0f00 	cmp.w	r8, #0
 801b1f8:	bf0c      	ite	eq
 801b1fa:	4684      	moveq	ip, r0
 801b1fc:	f100 0c01 	addne.w	ip, r0, #1
 801b200:	f1b9 0f69 	cmp.w	r9, #105	@ 0x69
 801b204:	f89d 6038 	ldrb.w	r6, [sp, #56]	@ 0x38
 801b208:	9f0f      	ldr	r7, [sp, #60]	@ 0x3c
 801b20a:	fa1f fc8c 	uxth.w	ip, ip
 801b20e:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 801b210:	f8dd a054 	ldr.w	sl, [sp, #84]	@ 0x54
 801b214:	9903      	ldr	r1, [sp, #12]
 801b216:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 801b21a:	d041      	beq.n	801b2a0 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xd0>
 801b21c:	d834      	bhi.n	801b288 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xb8>
 801b21e:	f1b9 0f63 	cmp.w	r9, #99	@ 0x63
 801b222:	d059      	beq.n	801b2d8 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x108>
 801b224:	f1b9 0f64 	cmp.w	r9, #100	@ 0x64
 801b228:	d03a      	beq.n	801b2a0 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xd0>
 801b22a:	f1b9 0f58 	cmp.w	r9, #88	@ 0x58
 801b22e:	d034      	beq.n	801b29a <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xca>
 801b230:	2400      	movs	r4, #0
 801b232:	f8bd 2050 	ldrh.w	r2, [sp, #80]	@ 0x50
 801b236:	3a01      	subs	r2, #1
 801b238:	b169      	cbz	r1, 801b256 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 801b23a:	9911      	ldr	r1, [sp, #68]	@ 0x44
 801b23c:	458c      	cmp	ip, r1
 801b23e:	da09      	bge.n	801b254 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x84>
 801b240:	eba1 010c 	sub.w	r1, r1, ip
 801b244:	b289      	uxth	r1, r1
 801b246:	b933      	cbnz	r3, 801b256 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 801b248:	2e00      	cmp	r6, #0
 801b24a:	d051      	beq.n	801b2f0 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x120>
 801b24c:	2800      	cmp	r0, #0
 801b24e:	d04f      	beq.n	801b2f0 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x120>
 801b250:	440c      	add	r4, r1
 801b252:	b2a4      	uxth	r4, r4
 801b254:	2100      	movs	r1, #0
 801b256:	682b      	ldr	r3, [r5, #0]
 801b258:	4293      	cmp	r3, r2
 801b25a:	da07      	bge.n	801b26c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x9c>
 801b25c:	f1b8 0f00 	cmp.w	r8, #0
 801b260:	d004      	beq.n	801b26c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x9c>
 801b262:	f82a 8013 	strh.w	r8, [sl, r3, lsl #1]
 801b266:	682b      	ldr	r3, [r5, #0]
 801b268:	3301      	adds	r3, #1
 801b26a:	602b      	str	r3, [r5, #0]
 801b26c:	2730      	movs	r7, #48	@ 0x30
 801b26e:	2c00      	cmp	r4, #0
 801b270:	d04e      	beq.n	801b310 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x140>
 801b272:	682e      	ldr	r6, [r5, #0]
 801b274:	3c01      	subs	r4, #1
 801b276:	42b2      	cmp	r2, r6
 801b278:	b2a4      	uxth	r4, r4
 801b27a:	dd49      	ble.n	801b310 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x140>
 801b27c:	f82a 7016 	strh.w	r7, [sl, r6, lsl #1]
 801b280:	682b      	ldr	r3, [r5, #0]
 801b282:	3301      	adds	r3, #1
 801b284:	602b      	str	r3, [r5, #0]
 801b286:	e7f2      	b.n	801b26e <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x9e>
 801b288:	f1b9 0f73 	cmp.w	r9, #115	@ 0x73
 801b28c:	d01d      	beq.n	801b2ca <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xfa>
 801b28e:	f1b9 0f78 	cmp.w	r9, #120	@ 0x78
 801b292:	d002      	beq.n	801b29a <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xca>
 801b294:	f1b9 0f6f 	cmp.w	r9, #111	@ 0x6f
 801b298:	e7c9      	b.n	801b22e <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x5e>
 801b29a:	4684      	mov	ip, r0
 801b29c:	f04f 0800 	mov.w	r8, #0
 801b2a0:	2c00      	cmp	r4, #0
 801b2a2:	d0c6      	beq.n	801b232 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 801b2a4:	b947      	cbnz	r7, 801b2b8 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xe8>
 801b2a6:	2801      	cmp	r0, #1
 801b2a8:	d106      	bne.n	801b2b8 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xe8>
 801b2aa:	8814      	ldrh	r4, [r2, #0]
 801b2ac:	2c30      	cmp	r4, #48	@ 0x30
 801b2ae:	bf02      	ittt	eq
 801b2b0:	3202      	addeq	r2, #2
 801b2b2:	4638      	moveq	r0, r7
 801b2b4:	f8cb 2000 	streq.w	r2, [fp]
 801b2b8:	45bc      	cmp	ip, r7
 801b2ba:	da14      	bge.n	801b2e6 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x116>
 801b2bc:	b2bf      	uxth	r7, r7
 801b2be:	eba7 040c 	sub.w	r4, r7, ip
 801b2c2:	46bc      	mov	ip, r7
 801b2c4:	b2a4      	uxth	r4, r4
 801b2c6:	2600      	movs	r6, #0
 801b2c8:	e7b3      	b.n	801b232 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 801b2ca:	4684      	mov	ip, r0
 801b2cc:	b16c      	cbz	r4, 801b2ea <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x11a>
 801b2ce:	42b8      	cmp	r0, r7
 801b2d0:	dd00      	ble.n	801b2d4 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x104>
 801b2d2:	b2b8      	uxth	r0, r7
 801b2d4:	2400      	movs	r4, #0
 801b2d6:	e003      	b.n	801b2e0 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x110>
 801b2d8:	f04f 0c01 	mov.w	ip, #1
 801b2dc:	2400      	movs	r4, #0
 801b2de:	4660      	mov	r0, ip
 801b2e0:	4626      	mov	r6, r4
 801b2e2:	46a0      	mov	r8, r4
 801b2e4:	e7a5      	b.n	801b232 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 801b2e6:	2400      	movs	r4, #0
 801b2e8:	e7ed      	b.n	801b2c6 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xf6>
 801b2ea:	4626      	mov	r6, r4
 801b2ec:	46a0      	mov	r8, r4
 801b2ee:	e7a0      	b.n	801b232 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 801b2f0:	2900      	cmp	r1, #0
 801b2f2:	d0b0      	beq.n	801b256 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 801b2f4:	2720      	movs	r7, #32
 801b2f6:	682e      	ldr	r6, [r5, #0]
 801b2f8:	2900      	cmp	r1, #0
 801b2fa:	d0ac      	beq.n	801b256 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 801b2fc:	3901      	subs	r1, #1
 801b2fe:	4296      	cmp	r6, r2
 801b300:	b289      	uxth	r1, r1
 801b302:	daa7      	bge.n	801b254 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x84>
 801b304:	f82a 7016 	strh.w	r7, [sl, r6, lsl #1]
 801b308:	682b      	ldr	r3, [r5, #0]
 801b30a:	3301      	adds	r3, #1
 801b30c:	602b      	str	r3, [r5, #0]
 801b30e:	e7f2      	b.n	801b2f6 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x126>
 801b310:	b188      	cbz	r0, 801b336 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x166>
 801b312:	682b      	ldr	r3, [r5, #0]
 801b314:	3801      	subs	r0, #1
 801b316:	429a      	cmp	r2, r3
 801b318:	b280      	uxth	r0, r0
 801b31a:	dd0c      	ble.n	801b336 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x166>
 801b31c:	f8db 3000 	ldr.w	r3, [fp]
 801b320:	1c9c      	adds	r4, r3, #2
 801b322:	f8cb 4000 	str.w	r4, [fp]
 801b326:	881c      	ldrh	r4, [r3, #0]
 801b328:	682b      	ldr	r3, [r5, #0]
 801b32a:	f82a 4013 	strh.w	r4, [sl, r3, lsl #1]
 801b32e:	682b      	ldr	r3, [r5, #0]
 801b330:	3301      	adds	r3, #1
 801b332:	602b      	str	r3, [r5, #0]
 801b334:	e7ec      	b.n	801b310 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x140>
 801b336:	2620      	movs	r6, #32
 801b338:	b151      	cbz	r1, 801b350 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x180>
 801b33a:	6828      	ldr	r0, [r5, #0]
 801b33c:	3901      	subs	r1, #1
 801b33e:	4282      	cmp	r2, r0
 801b340:	b289      	uxth	r1, r1
 801b342:	dd05      	ble.n	801b350 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x180>
 801b344:	f82a 6010 	strh.w	r6, [sl, r0, lsl #1]
 801b348:	682b      	ldr	r3, [r5, #0]
 801b34a:	3301      	adds	r3, #1
 801b34c:	602b      	str	r3, [r5, #0]
 801b34e:	e7f3      	b.n	801b338 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x168>
 801b350:	b005      	add	sp, #20
 801b352:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801b356 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_>:
 801b356:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801b35a:	2400      	movs	r4, #0
 801b35c:	e9dd 8c07 	ldrd	r8, ip, [sp, #28]
 801b360:	e9dd e609 	ldrd	lr, r6, [sp, #36]	@ 0x24
 801b364:	e9dd 750b 	ldrd	r7, r5, [sp, #44]	@ 0x2c
 801b368:	8014      	strh	r4, [r2, #0]
 801b36a:	701c      	strb	r4, [r3, #0]
 801b36c:	f888 4000 	strb.w	r4, [r8]
 801b370:	f88c 4000 	strb.w	r4, [ip]
 801b374:	f88e 4000 	strb.w	r4, [lr]
 801b378:	703c      	strb	r4, [r7, #0]
 801b37a:	6804      	ldr	r4, [r0, #0]
 801b37c:	b1a4      	cbz	r4, 801b3a8 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x52>
 801b37e:	8824      	ldrh	r4, [r4, #0]
 801b380:	f04f 0901 	mov.w	r9, #1
 801b384:	b314      	cbz	r4, 801b3cc <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x76>
 801b386:	2c2b      	cmp	r4, #43	@ 0x2b
 801b388:	d001      	beq.n	801b38e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x38>
 801b38a:	2c20      	cmp	r4, #32
 801b38c:	d110      	bne.n	801b3b0 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x5a>
 801b38e:	8014      	strh	r4, [r2, #0]
 801b390:	6804      	ldr	r4, [r0, #0]
 801b392:	b10c      	cbz	r4, 801b398 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x42>
 801b394:	3402      	adds	r4, #2
 801b396:	6004      	str	r4, [r0, #0]
 801b398:	680c      	ldr	r4, [r1, #0]
 801b39a:	b10c      	cbz	r4, 801b3a0 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x4a>
 801b39c:	3401      	adds	r4, #1
 801b39e:	600c      	str	r4, [r1, #0]
 801b3a0:	6804      	ldr	r4, [r0, #0]
 801b3a2:	b17c      	cbz	r4, 801b3c4 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x6e>
 801b3a4:	8824      	ldrh	r4, [r4, #0]
 801b3a6:	e7ed      	b.n	801b384 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x2e>
 801b3a8:	680c      	ldr	r4, [r1, #0]
 801b3aa:	b17c      	cbz	r4, 801b3cc <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x76>
 801b3ac:	7824      	ldrb	r4, [r4, #0]
 801b3ae:	e7e7      	b.n	801b380 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x2a>
 801b3b0:	2c2d      	cmp	r4, #45	@ 0x2d
 801b3b2:	d102      	bne.n	801b3ba <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x64>
 801b3b4:	f883 9000 	strb.w	r9, [r3]
 801b3b8:	e7ea      	b.n	801b390 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x3a>
 801b3ba:	2c23      	cmp	r4, #35	@ 0x23
 801b3bc:	d107      	bne.n	801b3ce <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x78>
 801b3be:	f888 9000 	strb.w	r9, [r8]
 801b3c2:	e7e5      	b.n	801b390 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x3a>
 801b3c4:	680c      	ldr	r4, [r1, #0]
 801b3c6:	b10c      	cbz	r4, 801b3cc <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x76>
 801b3c8:	7824      	ldrb	r4, [r4, #0]
 801b3ca:	e7db      	b.n	801b384 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x2e>
 801b3cc:	2400      	movs	r4, #0
 801b3ce:	f1a4 0330 	sub.w	r3, r4, #48	@ 0x30
 801b3d2:	2b09      	cmp	r3, #9
 801b3d4:	d901      	bls.n	801b3da <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x84>
 801b3d6:	2c2a      	cmp	r4, #42	@ 0x2a
 801b3d8:	d122      	bne.n	801b420 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xca>
 801b3da:	2301      	movs	r3, #1
 801b3dc:	2c30      	cmp	r4, #48	@ 0x30
 801b3de:	f88e 3000 	strb.w	r3, [lr]
 801b3e2:	d10d      	bne.n	801b400 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xaa>
 801b3e4:	f88c 3000 	strb.w	r3, [ip]
 801b3e8:	6803      	ldr	r3, [r0, #0]
 801b3ea:	b10b      	cbz	r3, 801b3f0 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x9a>
 801b3ec:	3302      	adds	r3, #2
 801b3ee:	6003      	str	r3, [r0, #0]
 801b3f0:	680b      	ldr	r3, [r1, #0]
 801b3f2:	b10b      	cbz	r3, 801b3f8 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xa2>
 801b3f4:	3301      	adds	r3, #1
 801b3f6:	600b      	str	r3, [r1, #0]
 801b3f8:	6803      	ldr	r3, [r0, #0]
 801b3fa:	2b00      	cmp	r3, #0
 801b3fc:	d02f      	beq.n	801b45e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x108>
 801b3fe:	881c      	ldrh	r4, [r3, #0]
 801b400:	2c2a      	cmp	r4, #42	@ 0x2a
 801b402:	d135      	bne.n	801b470 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x11a>
 801b404:	f04f 33ff 	mov.w	r3, #4294967295
 801b408:	6033      	str	r3, [r6, #0]
 801b40a:	6803      	ldr	r3, [r0, #0]
 801b40c:	b10b      	cbz	r3, 801b412 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xbc>
 801b40e:	3302      	adds	r3, #2
 801b410:	6003      	str	r3, [r0, #0]
 801b412:	680b      	ldr	r3, [r1, #0]
 801b414:	b10b      	cbz	r3, 801b41a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xc4>
 801b416:	3301      	adds	r3, #1
 801b418:	600b      	str	r3, [r1, #0]
 801b41a:	6803      	ldr	r3, [r0, #0]
 801b41c:	b31b      	cbz	r3, 801b466 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x110>
 801b41e:	881c      	ldrh	r4, [r3, #0]
 801b420:	2c2e      	cmp	r4, #46	@ 0x2e
 801b422:	d11a      	bne.n	801b45a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>
 801b424:	2301      	movs	r3, #1
 801b426:	703b      	strb	r3, [r7, #0]
 801b428:	6803      	ldr	r3, [r0, #0]
 801b42a:	b10b      	cbz	r3, 801b430 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xda>
 801b42c:	3302      	adds	r3, #2
 801b42e:	6003      	str	r3, [r0, #0]
 801b430:	680b      	ldr	r3, [r1, #0]
 801b432:	b10b      	cbz	r3, 801b438 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xe2>
 801b434:	3301      	adds	r3, #1
 801b436:	600b      	str	r3, [r1, #0]
 801b438:	6803      	ldr	r3, [r0, #0]
 801b43a:	2b00      	cmp	r3, #0
 801b43c:	d036      	beq.n	801b4ac <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x156>
 801b43e:	881b      	ldrh	r3, [r3, #0]
 801b440:	2b2a      	cmp	r3, #42	@ 0x2a
 801b442:	d137      	bne.n	801b4b4 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x15e>
 801b444:	f04f 33ff 	mov.w	r3, #4294967295
 801b448:	602b      	str	r3, [r5, #0]
 801b44a:	6803      	ldr	r3, [r0, #0]
 801b44c:	b10b      	cbz	r3, 801b452 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xfc>
 801b44e:	3302      	adds	r3, #2
 801b450:	6003      	str	r3, [r0, #0]
 801b452:	680b      	ldr	r3, [r1, #0]
 801b454:	b10b      	cbz	r3, 801b45a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>
 801b456:	3301      	adds	r3, #1
 801b458:	600b      	str	r3, [r1, #0]
 801b45a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801b45e:	680c      	ldr	r4, [r1, #0]
 801b460:	b134      	cbz	r4, 801b470 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x11a>
 801b462:	7824      	ldrb	r4, [r4, #0]
 801b464:	e7cc      	b.n	801b400 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xaa>
 801b466:	680b      	ldr	r3, [r1, #0]
 801b468:	2b00      	cmp	r3, #0
 801b46a:	d0f6      	beq.n	801b45a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>
 801b46c:	781c      	ldrb	r4, [r3, #0]
 801b46e:	e7d7      	b.n	801b420 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xca>
 801b470:	2300      	movs	r3, #0
 801b472:	220a      	movs	r2, #10
 801b474:	6033      	str	r3, [r6, #0]
 801b476:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 801b47a:	fa1f f38c 	uxth.w	r3, ip
 801b47e:	2b09      	cmp	r3, #9
 801b480:	d8ce      	bhi.n	801b420 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xca>
 801b482:	6833      	ldr	r3, [r6, #0]
 801b484:	fb02 c303 	mla	r3, r2, r3, ip
 801b488:	6033      	str	r3, [r6, #0]
 801b48a:	6803      	ldr	r3, [r0, #0]
 801b48c:	b10b      	cbz	r3, 801b492 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x13c>
 801b48e:	3302      	adds	r3, #2
 801b490:	6003      	str	r3, [r0, #0]
 801b492:	680b      	ldr	r3, [r1, #0]
 801b494:	b10b      	cbz	r3, 801b49a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x144>
 801b496:	3301      	adds	r3, #1
 801b498:	600b      	str	r3, [r1, #0]
 801b49a:	6803      	ldr	r3, [r0, #0]
 801b49c:	b10b      	cbz	r3, 801b4a2 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x14c>
 801b49e:	881c      	ldrh	r4, [r3, #0]
 801b4a0:	e7e9      	b.n	801b476 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x120>
 801b4a2:	680c      	ldr	r4, [r1, #0]
 801b4a4:	2c00      	cmp	r4, #0
 801b4a6:	d0e6      	beq.n	801b476 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x120>
 801b4a8:	7824      	ldrb	r4, [r4, #0]
 801b4aa:	e7e4      	b.n	801b476 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x120>
 801b4ac:	680b      	ldr	r3, [r1, #0]
 801b4ae:	b10b      	cbz	r3, 801b4b4 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x15e>
 801b4b0:	781b      	ldrb	r3, [r3, #0]
 801b4b2:	e7c5      	b.n	801b440 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xea>
 801b4b4:	2200      	movs	r2, #0
 801b4b6:	240a      	movs	r4, #10
 801b4b8:	602a      	str	r2, [r5, #0]
 801b4ba:	3b30      	subs	r3, #48	@ 0x30
 801b4bc:	682a      	ldr	r2, [r5, #0]
 801b4be:	b29e      	uxth	r6, r3
 801b4c0:	2e09      	cmp	r6, #9
 801b4c2:	d813      	bhi.n	801b4ec <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x196>
 801b4c4:	fb04 3302 	mla	r3, r4, r2, r3
 801b4c8:	602b      	str	r3, [r5, #0]
 801b4ca:	6803      	ldr	r3, [r0, #0]
 801b4cc:	b10b      	cbz	r3, 801b4d2 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x17c>
 801b4ce:	3302      	adds	r3, #2
 801b4d0:	6003      	str	r3, [r0, #0]
 801b4d2:	680b      	ldr	r3, [r1, #0]
 801b4d4:	b10b      	cbz	r3, 801b4da <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x184>
 801b4d6:	3301      	adds	r3, #1
 801b4d8:	600b      	str	r3, [r1, #0]
 801b4da:	6803      	ldr	r3, [r0, #0]
 801b4dc:	b10b      	cbz	r3, 801b4e2 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x18c>
 801b4de:	881b      	ldrh	r3, [r3, #0]
 801b4e0:	e7eb      	b.n	801b4ba <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x164>
 801b4e2:	680b      	ldr	r3, [r1, #0]
 801b4e4:	2b00      	cmp	r3, #0
 801b4e6:	d0e8      	beq.n	801b4ba <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x164>
 801b4e8:	781b      	ldrb	r3, [r3, #0]
 801b4ea:	e7e6      	b.n	801b4ba <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x164>
 801b4ec:	2a06      	cmp	r2, #6
 801b4ee:	bfa8      	it	ge
 801b4f0:	2206      	movge	r2, #6
 801b4f2:	602a      	str	r2, [r5, #0]
 801b4f4:	e7b1      	b.n	801b45a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>

0801b4f6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list>:
 801b4f6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b4fa:	b0a3      	sub	sp, #140	@ 0x8c
 801b4fc:	2600      	movs	r6, #0
 801b4fe:	4607      	mov	r7, r0
 801b500:	4688      	mov	r8, r1
 801b502:	f10d 0944 	add.w	r9, sp, #68	@ 0x44
 801b506:	4631      	mov	r1, r6
 801b508:	9c2c      	ldr	r4, [sp, #176]	@ 0xb0
 801b50a:	4648      	mov	r0, r9
 801b50c:	960d      	str	r6, [sp, #52]	@ 0x34
 801b50e:	e9cd 3208 	strd	r3, r2, [sp, #32]
 801b512:	2242      	movs	r2, #66	@ 0x42
 801b514:	f00c fdd0 	bl	80280b8 <memset>
 801b518:	b15f      	cbz	r7, 801b532 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x3c>
 801b51a:	f108 3aff 	add.w	sl, r8, #4294967295
 801b51e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801b520:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801b522:	b152      	cbz	r2, 801b53a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x44>
 801b524:	8812      	ldrh	r2, [r2, #0]
 801b526:	b10a      	cbz	r2, 801b52c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x36>
 801b528:	459a      	cmp	sl, r3
 801b52a:	dc2e      	bgt.n	801b58a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x94>
 801b52c:	2200      	movs	r2, #0
 801b52e:	f827 2013 	strh.w	r2, [r7, r3, lsl #1]
 801b532:	4638      	mov	r0, r7
 801b534:	b023      	add	sp, #140	@ 0x8c
 801b536:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b53a:	9a08      	ldr	r2, [sp, #32]
 801b53c:	2a00      	cmp	r2, #0
 801b53e:	d0f5      	beq.n	801b52c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x36>
 801b540:	7812      	ldrb	r2, [r2, #0]
 801b542:	e7f0      	b.n	801b526 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x30>
 801b544:	2d00      	cmp	r5, #0
 801b546:	d0ea      	beq.n	801b51e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801b548:	782a      	ldrb	r2, [r5, #0]
 801b54a:	b142      	cbz	r2, 801b55e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x68>
 801b54c:	2a25      	cmp	r2, #37	@ 0x25
 801b54e:	d001      	beq.n	801b554 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x5e>
 801b550:	459a      	cmp	sl, r3
 801b552:	dc08      	bgt.n	801b566 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x70>
 801b554:	f1bb 0f00 	cmp.w	fp, #0
 801b558:	d121      	bne.n	801b59e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xa8>
 801b55a:	2d00      	cmp	r5, #0
 801b55c:	d0df      	beq.n	801b51e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801b55e:	782a      	ldrb	r2, [r5, #0]
 801b560:	f04f 0b00 	mov.w	fp, #0
 801b564:	e01d      	b.n	801b5a2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xac>
 801b566:	f1bb 0f00 	cmp.w	fp, #0
 801b56a:	d077      	beq.n	801b65c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x166>
 801b56c:	f8bb 2000 	ldrh.w	r2, [fp]
 801b570:	f827 2013 	strh.w	r2, [r7, r3, lsl #1]
 801b574:	f1bb 0f00 	cmp.w	fp, #0
 801b578:	d002      	beq.n	801b580 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x8a>
 801b57a:	f10b 0202 	add.w	r2, fp, #2
 801b57e:	9209      	str	r2, [sp, #36]	@ 0x24
 801b580:	b10d      	cbz	r5, 801b586 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x90>
 801b582:	3501      	adds	r5, #1
 801b584:	9508      	str	r5, [sp, #32]
 801b586:	3301      	adds	r3, #1
 801b588:	930d      	str	r3, [sp, #52]	@ 0x34
 801b58a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801b58c:	e9dd 5b08 	ldrd	r5, fp, [sp, #32]
 801b590:	f1bb 0f00 	cmp.w	fp, #0
 801b594:	d0d6      	beq.n	801b544 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x4e>
 801b596:	f8bb 2000 	ldrh.w	r2, [fp]
 801b59a:	2a00      	cmp	r2, #0
 801b59c:	d1d6      	bne.n	801b54c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x56>
 801b59e:	f8bb 2000 	ldrh.w	r2, [fp]
 801b5a2:	2a00      	cmp	r2, #0
 801b5a4:	d0bb      	beq.n	801b51e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801b5a6:	459a      	cmp	sl, r3
 801b5a8:	ddb9      	ble.n	801b51e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801b5aa:	f8ad 6032 	strh.w	r6, [sp, #50]	@ 0x32
 801b5ae:	f88d 602d 	strb.w	r6, [sp, #45]	@ 0x2d
 801b5b2:	f88d 602e 	strb.w	r6, [sp, #46]	@ 0x2e
 801b5b6:	f88d 602f 	strb.w	r6, [sp, #47]	@ 0x2f
 801b5ba:	f88d 6030 	strb.w	r6, [sp, #48]	@ 0x30
 801b5be:	960e      	str	r6, [sp, #56]	@ 0x38
 801b5c0:	f88d 6031 	strb.w	r6, [sp, #49]	@ 0x31
 801b5c4:	960f      	str	r6, [sp, #60]	@ 0x3c
 801b5c6:	f1bb 0f00 	cmp.w	fp, #0
 801b5ca:	d002      	beq.n	801b5d2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xdc>
 801b5cc:	f10b 0302 	add.w	r3, fp, #2
 801b5d0:	9309      	str	r3, [sp, #36]	@ 0x24
 801b5d2:	b10d      	cbz	r5, 801b5d8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xe2>
 801b5d4:	1c6b      	adds	r3, r5, #1
 801b5d6:	9308      	str	r3, [sp, #32]
 801b5d8:	ab0f      	add	r3, sp, #60	@ 0x3c
 801b5da:	f10d 0232 	add.w	r2, sp, #50	@ 0x32
 801b5de:	a908      	add	r1, sp, #32
 801b5e0:	a809      	add	r0, sp, #36	@ 0x24
 801b5e2:	9305      	str	r3, [sp, #20]
 801b5e4:	f10d 0331 	add.w	r3, sp, #49	@ 0x31
 801b5e8:	9304      	str	r3, [sp, #16]
 801b5ea:	ab0e      	add	r3, sp, #56	@ 0x38
 801b5ec:	9303      	str	r3, [sp, #12]
 801b5ee:	ab0c      	add	r3, sp, #48	@ 0x30
 801b5f0:	9302      	str	r3, [sp, #8]
 801b5f2:	f10d 032f 	add.w	r3, sp, #47	@ 0x2f
 801b5f6:	9301      	str	r3, [sp, #4]
 801b5f8:	f10d 032e 	add.w	r3, sp, #46	@ 0x2e
 801b5fc:	9300      	str	r3, [sp, #0]
 801b5fe:	f10d 032d 	add.w	r3, sp, #45	@ 0x2d
 801b602:	f7ff fea8 	bl	801b356 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_>
 801b606:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801b608:	2b00      	cmp	r3, #0
 801b60a:	bfbf      	itttt	lt
 801b60c:	6823      	ldrlt	r3, [r4, #0]
 801b60e:	3404      	addlt	r4, #4
 801b610:	ea23 73e3 	biclt.w	r3, r3, r3, asr #31
 801b614:	930e      	strlt	r3, [sp, #56]	@ 0x38
 801b616:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801b618:	2b00      	cmp	r3, #0
 801b61a:	bfbe      	ittt	lt
 801b61c:	6823      	ldrlt	r3, [r4, #0]
 801b61e:	3404      	addlt	r4, #4
 801b620:	ea23 73e3 	biclt.w	r3, r3, r3, asr #31
 801b624:	e9dd 2108 	ldrd	r2, r1, [sp, #32]
 801b628:	bfb8      	it	lt
 801b62a:	930f      	strlt	r3, [sp, #60]	@ 0x3c
 801b62c:	b1d9      	cbz	r1, 801b666 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x170>
 801b62e:	880b      	ldrh	r3, [r1, #0]
 801b630:	2b69      	cmp	r3, #105	@ 0x69
 801b632:	d01f      	beq.n	801b674 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 801b634:	d82f      	bhi.n	801b696 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1a0>
 801b636:	2b58      	cmp	r3, #88	@ 0x58
 801b638:	d01c      	beq.n	801b674 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 801b63a:	d818      	bhi.n	801b66e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x178>
 801b63c:	2b25      	cmp	r3, #37	@ 0x25
 801b63e:	d034      	beq.n	801b6aa <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1b4>
 801b640:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801b642:	e9cd 5b08 	strd	r5, fp, [sp, #32]
 801b646:	f1bb 0f00 	cmp.w	fp, #0
 801b64a:	f000 80b7 	beq.w	801b7bc <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2c6>
 801b64e:	f8bb 5000 	ldrh.w	r5, [fp]
 801b652:	f827 5013 	strh.w	r5, [r7, r3, lsl #1]
 801b656:	3301      	adds	r3, #1
 801b658:	930d      	str	r3, [sp, #52]	@ 0x34
 801b65a:	e029      	b.n	801b6b0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ba>
 801b65c:	b10d      	cbz	r5, 801b662 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x16c>
 801b65e:	782a      	ldrb	r2, [r5, #0]
 801b660:	e786      	b.n	801b570 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x7a>
 801b662:	462a      	mov	r2, r5
 801b664:	e784      	b.n	801b570 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x7a>
 801b666:	2a00      	cmp	r2, #0
 801b668:	d0ea      	beq.n	801b640 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x14a>
 801b66a:	7813      	ldrb	r3, [r2, #0]
 801b66c:	e7e0      	b.n	801b630 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x13a>
 801b66e:	3b63      	subs	r3, #99	@ 0x63
 801b670:	2b01      	cmp	r3, #1
 801b672:	d8e5      	bhi.n	801b640 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x14a>
 801b674:	f8cd 9040 	str.w	r9, [sp, #64]	@ 0x40
 801b678:	b329      	cbz	r1, 801b6c6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1d0>
 801b67a:	880b      	ldrh	r3, [r1, #0]
 801b67c:	2b69      	cmp	r3, #105	@ 0x69
 801b67e:	d063      	beq.n	801b748 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x252>
 801b680:	d825      	bhi.n	801b6ce <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1d8>
 801b682:	2b63      	cmp	r3, #99	@ 0x63
 801b684:	d038      	beq.n	801b6f8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x202>
 801b686:	2b64      	cmp	r3, #100	@ 0x64
 801b688:	d05e      	beq.n	801b748 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x252>
 801b68a:	2b58      	cmp	r3, #88	@ 0x58
 801b68c:	d07a      	beq.n	801b784 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28e>
 801b68e:	f8ad 6044 	strh.w	r6, [sp, #68]	@ 0x44
 801b692:	4625      	mov	r5, r4
 801b694:	e036      	b.n	801b704 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 801b696:	2b73      	cmp	r3, #115	@ 0x73
 801b698:	d0ec      	beq.n	801b674 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 801b69a:	d802      	bhi.n	801b6a2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ac>
 801b69c:	2b6f      	cmp	r3, #111	@ 0x6f
 801b69e:	d1cf      	bne.n	801b640 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x14a>
 801b6a0:	e7e8      	b.n	801b674 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 801b6a2:	2b75      	cmp	r3, #117	@ 0x75
 801b6a4:	d0e6      	beq.n	801b674 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 801b6a6:	2b78      	cmp	r3, #120	@ 0x78
 801b6a8:	e7f9      	b.n	801b69e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1a8>
 801b6aa:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801b6ac:	f827 3012 	strh.w	r3, [r7, r2, lsl #1]
 801b6b0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801b6b2:	b10b      	cbz	r3, 801b6b8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1c2>
 801b6b4:	3302      	adds	r3, #2
 801b6b6:	9309      	str	r3, [sp, #36]	@ 0x24
 801b6b8:	9b08      	ldr	r3, [sp, #32]
 801b6ba:	2b00      	cmp	r3, #0
 801b6bc:	f43f af2f 	beq.w	801b51e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801b6c0:	3301      	adds	r3, #1
 801b6c2:	9308      	str	r3, [sp, #32]
 801b6c4:	e72b      	b.n	801b51e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801b6c6:	2a00      	cmp	r2, #0
 801b6c8:	d0e1      	beq.n	801b68e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x198>
 801b6ca:	7813      	ldrb	r3, [r2, #0]
 801b6cc:	e7d6      	b.n	801b67c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x186>
 801b6ce:	2b73      	cmp	r3, #115	@ 0x73
 801b6d0:	d036      	beq.n	801b740 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x24a>
 801b6d2:	d807      	bhi.n	801b6e4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ee>
 801b6d4:	2b6f      	cmp	r3, #111	@ 0x6f
 801b6d6:	d1da      	bne.n	801b68e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x198>
 801b6d8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801b6da:	1d25      	adds	r5, r4, #4
 801b6dc:	2308      	movs	r3, #8
 801b6de:	eba8 0202 	sub.w	r2, r8, r2
 801b6e2:	e049      	b.n	801b778 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x282>
 801b6e4:	2b75      	cmp	r3, #117	@ 0x75
 801b6e6:	d042      	beq.n	801b76e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x278>
 801b6e8:	2b78      	cmp	r3, #120	@ 0x78
 801b6ea:	d1d0      	bne.n	801b68e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x198>
 801b6ec:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801b6ee:	1d25      	adds	r5, r4, #4
 801b6f0:	2310      	movs	r3, #16
 801b6f2:	eba8 0202 	sub.w	r2, r8, r2
 801b6f6:	e03f      	b.n	801b778 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x282>
 801b6f8:	6823      	ldr	r3, [r4, #0]
 801b6fa:	1d25      	adds	r5, r4, #4
 801b6fc:	f8ad 6046 	strh.w	r6, [sp, #70]	@ 0x46
 801b700:	f8ad 3044 	strh.w	r3, [sp, #68]	@ 0x44
 801b704:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801b706:	f8bd 1032 	ldrh.w	r1, [sp, #50]	@ 0x32
 801b70a:	2b00      	cmp	r3, #0
 801b70c:	d051      	beq.n	801b7b2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2bc>
 801b70e:	881a      	ldrh	r2, [r3, #0]
 801b710:	a80d      	add	r0, sp, #52	@ 0x34
 801b712:	f89d 3031 	ldrb.w	r3, [sp, #49]	@ 0x31
 801b716:	462c      	mov	r4, r5
 801b718:	9005      	str	r0, [sp, #20]
 801b71a:	f89d 002d 	ldrb.w	r0, [sp, #45]	@ 0x2d
 801b71e:	9004      	str	r0, [sp, #16]
 801b720:	980e      	ldr	r0, [sp, #56]	@ 0x38
 801b722:	9003      	str	r0, [sp, #12]
 801b724:	f89d 0030 	ldrb.w	r0, [sp, #48]	@ 0x30
 801b728:	9002      	str	r0, [sp, #8]
 801b72a:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 801b72c:	9001      	str	r0, [sp, #4]
 801b72e:	f89d 002f 	ldrb.w	r0, [sp, #47]	@ 0x2f
 801b732:	e9cd 8706 	strd	r8, r7, [sp, #24]
 801b736:	9000      	str	r0, [sp, #0]
 801b738:	a810      	add	r0, sp, #64	@ 0x40
 801b73a:	f7ff fd49 	bl	801b1d0 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt>
 801b73e:	e7b7      	b.n	801b6b0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ba>
 801b740:	1d25      	adds	r5, r4, #4
 801b742:	6823      	ldr	r3, [r4, #0]
 801b744:	9310      	str	r3, [sp, #64]	@ 0x40
 801b746:	e7dd      	b.n	801b704 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 801b748:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801b74a:	230a      	movs	r3, #10
 801b74c:	4649      	mov	r1, r9
 801b74e:	6820      	ldr	r0, [r4, #0]
 801b750:	eba8 0202 	sub.w	r2, r8, r2
 801b754:	1d25      	adds	r5, r4, #4
 801b756:	b292      	uxth	r2, r2
 801b758:	f7ff fcf0 	bl	801b13c <_ZN8touchgfx7Unicode4itoaElPtti.part.2>
 801b75c:	f8bd 3044 	ldrh.w	r3, [sp, #68]	@ 0x44
 801b760:	2b2d      	cmp	r3, #45	@ 0x2d
 801b762:	d1cf      	bne.n	801b704 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 801b764:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 801b768:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801b76a:	3302      	adds	r3, #2
 801b76c:	e7ea      	b.n	801b744 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x24e>
 801b76e:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801b770:	1d25      	adds	r5, r4, #4
 801b772:	230a      	movs	r3, #10
 801b774:	eba8 0202 	sub.w	r2, r8, r2
 801b778:	b292      	uxth	r2, r2
 801b77a:	4649      	mov	r1, r9
 801b77c:	6820      	ldr	r0, [r4, #0]
 801b77e:	f7ff fd09 	bl	801b194 <_ZN8touchgfx7Unicode4utoaEmPtti.part.3>
 801b782:	e7bf      	b.n	801b704 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 801b784:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801b786:	2310      	movs	r3, #16
 801b788:	4649      	mov	r1, r9
 801b78a:	6820      	ldr	r0, [r4, #0]
 801b78c:	eba8 0202 	sub.w	r2, r8, r2
 801b790:	1d25      	adds	r5, r4, #4
 801b792:	b292      	uxth	r2, r2
 801b794:	f7ff fcfe 	bl	801b194 <_ZN8touchgfx7Unicode4utoaEmPtti.part.3>
 801b798:	f10d 0242 	add.w	r2, sp, #66	@ 0x42
 801b79c:	f832 3f02 	ldrh.w	r3, [r2, #2]!
 801b7a0:	2b00      	cmp	r3, #0
 801b7a2:	d0af      	beq.n	801b704 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 801b7a4:	f1a3 0161 	sub.w	r1, r3, #97	@ 0x61
 801b7a8:	2919      	cmp	r1, #25
 801b7aa:	d8f7      	bhi.n	801b79c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2a6>
 801b7ac:	3b20      	subs	r3, #32
 801b7ae:	8013      	strh	r3, [r2, #0]
 801b7b0:	e7f4      	b.n	801b79c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2a6>
 801b7b2:	9a08      	ldr	r2, [sp, #32]
 801b7b4:	2a00      	cmp	r2, #0
 801b7b6:	d0ab      	beq.n	801b710 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x21a>
 801b7b8:	7812      	ldrb	r2, [r2, #0]
 801b7ba:	e7a9      	b.n	801b710 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x21a>
 801b7bc:	2d00      	cmp	r5, #0
 801b7be:	f43f af48 	beq.w	801b652 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x15c>
 801b7c2:	782d      	ldrb	r5, [r5, #0]
 801b7c4:	e745      	b.n	801b652 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x15c>

0801b7c6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list>:
 801b7c6:	b507      	push	{r0, r1, r2, lr}
 801b7c8:	9300      	str	r3, [sp, #0]
 801b7ca:	4613      	mov	r3, r2
 801b7cc:	2200      	movs	r2, #0
 801b7ce:	f7ff fe92 	bl	801b4f6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list>
 801b7d2:	b003      	add	sp, #12
 801b7d4:	f85d fb04 	ldr.w	pc, [sp], #4

0801b7d8 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>:
 801b7d8:	b40c      	push	{r2, r3}
 801b7da:	b507      	push	{r0, r1, r2, lr}
 801b7dc:	ab04      	add	r3, sp, #16
 801b7de:	f853 2b04 	ldr.w	r2, [r3], #4
 801b7e2:	9301      	str	r3, [sp, #4]
 801b7e4:	f7ff ffef 	bl	801b7c6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list>
 801b7e8:	b003      	add	sp, #12
 801b7ea:	f85d eb04 	ldr.w	lr, [sp], #4
 801b7ee:	b002      	add	sp, #8
 801b7f0:	4770      	bx	lr
	...

0801b7f4 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>:
 801b7f4:	4b01      	ldr	r3, [pc, #4]	@ (801b7fc <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE+0x8>)
 801b7f6:	6018      	str	r0, [r3, #0]
 801b7f8:	4770      	bx	lr
 801b7fa:	bf00      	nop
 801b7fc:	24028e88 	.word	0x24028e88

0801b800 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>:
 801b800:	4b06      	ldr	r3, [pc, #24]	@ (801b81c <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x1c>)
 801b802:	881a      	ldrh	r2, [r3, #0]
 801b804:	4282      	cmp	r2, r0
 801b806:	d807      	bhi.n	801b818 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x18>
 801b808:	4b05      	ldr	r3, [pc, #20]	@ (801b820 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x20>)
 801b80a:	881b      	ldrh	r3, [r3, #0]
 801b80c:	4413      	add	r3, r2
 801b80e:	4298      	cmp	r0, r3
 801b810:	bfac      	ite	ge
 801b812:	2000      	movge	r0, #0
 801b814:	2001      	movlt	r0, #1
 801b816:	4770      	bx	lr
 801b818:	2000      	movs	r0, #0
 801b81a:	4770      	bx	lr
 801b81c:	24028ea8 	.word	0x24028ea8
 801b820:	24028eac 	.word	0x24028eac

0801b824 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>:
 801b824:	b508      	push	{r3, lr}
 801b826:	4601      	mov	r1, r0
 801b828:	f7ff ffea 	bl	801b800 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>
 801b82c:	b118      	cbz	r0, 801b836 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x12>
 801b82e:	4b02      	ldr	r3, [pc, #8]	@ (801b838 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x14>)
 801b830:	681b      	ldr	r3, [r3, #0]
 801b832:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 801b836:	bd08      	pop	{r3, pc}
 801b838:	24028e8c 	.word	0x24028e8c

0801b83c <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE>:
 801b83c:	b538      	push	{r3, r4, r5, lr}
 801b83e:	4604      	mov	r4, r0
 801b840:	f7ff ffde 	bl	801b800 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>
 801b844:	b1d8      	cbz	r0, 801b87e <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE+0x42>
 801b846:	4b0f      	ldr	r3, [pc, #60]	@ (801b884 <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE+0x48>)
 801b848:	881b      	ldrh	r3, [r3, #0]
 801b84a:	1ae4      	subs	r4, r4, r3
 801b84c:	230e      	movs	r3, #14
 801b84e:	4363      	muls	r3, r4
 801b850:	4c0d      	ldr	r4, [pc, #52]	@ (801b888 <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE+0x4c>)
 801b852:	6825      	ldr	r5, [r4, #0]
 801b854:	18ea      	adds	r2, r5, r3
 801b856:	7b12      	ldrb	r2, [r2, #12]
 801b858:	f012 0220 	ands.w	r2, r2, #32
 801b85c:	d010      	beq.n	801b880 <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE+0x44>
 801b85e:	f9b1 2000 	ldrsh.w	r2, [r1]
 801b862:	52ea      	strh	r2, [r5, r3]
 801b864:	6822      	ldr	r2, [r4, #0]
 801b866:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 801b86a:	441a      	add	r2, r3
 801b86c:	8055      	strh	r5, [r2, #2]
 801b86e:	6822      	ldr	r2, [r4, #0]
 801b870:	4413      	add	r3, r2
 801b872:	f9b1 2004 	ldrsh.w	r2, [r1, #4]
 801b876:	809a      	strh	r2, [r3, #4]
 801b878:	f9b1 2006 	ldrsh.w	r2, [r1, #6]
 801b87c:	80da      	strh	r2, [r3, #6]
 801b87e:	bd38      	pop	{r3, r4, r5, pc}
 801b880:	4610      	mov	r0, r2
 801b882:	e7fc      	b.n	801b87e <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE+0x42>
 801b884:	24028ea8 	.word	0x24028ea8
 801b888:	24028e90 	.word	0x24028e90

0801b88c <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE>:
 801b88c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 801b890:	4606      	mov	r6, r0
 801b892:	460c      	mov	r4, r1
 801b894:	f7ff ffb4 	bl	801b800 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>
 801b898:	b918      	cbnz	r0, 801b8a2 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x16>
 801b89a:	2000      	movs	r0, #0
 801b89c:	b002      	add	sp, #8
 801b89e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b8a2:	4608      	mov	r0, r1
 801b8a4:	f7f4 fb6f 	bl	800ff86 <_ZNK8touchgfx4Rect7isEmptyEv>
 801b8a8:	2800      	cmp	r0, #0
 801b8aa:	d1f6      	bne.n	801b89a <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xe>
 801b8ac:	4b3f      	ldr	r3, [pc, #252]	@ (801b9ac <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x120>)
 801b8ae:	f8df 9100 	ldr.w	r9, [pc, #256]	@ 801b9b0 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x124>
 801b8b2:	881d      	ldrh	r5, [r3, #0]
 801b8b4:	f8d9 a000 	ldr.w	sl, [r9]
 801b8b8:	46c8      	mov	r8, r9
 801b8ba:	1b73      	subs	r3, r6, r5
 801b8bc:	250e      	movs	r5, #14
 801b8be:	435d      	muls	r5, r3
 801b8c0:	eb0a 0705 	add.w	r7, sl, r5
 801b8c4:	7b3b      	ldrb	r3, [r7, #12]
 801b8c6:	f013 0f20 	tst.w	r3, #32
 801b8ca:	d0e6      	beq.n	801b89a <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xe>
 801b8cc:	4621      	mov	r1, r4
 801b8ce:	4638      	mov	r0, r7
 801b8d0:	f7fc fa4c 	bl	8017d6c <_ZNK8touchgfx4Rect8includesERKS0_>
 801b8d4:	2800      	cmp	r0, #0
 801b8d6:	d1e1      	bne.n	801b89c <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x10>
 801b8d8:	4639      	mov	r1, r7
 801b8da:	4620      	mov	r0, r4
 801b8dc:	f7fc fa46 	bl	8017d6c <_ZNK8touchgfx4Rect8includesERKS0_>
 801b8e0:	b108      	cbz	r0, 801b8e6 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x5a>
 801b8e2:	4621      	mov	r1, r4
 801b8e4:	e020      	b.n	801b928 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x9c>
 801b8e6:	f9b4 2000 	ldrsh.w	r2, [r4]
 801b8ea:	f93a 3005 	ldrsh.w	r3, [sl, r5]
 801b8ee:	429a      	cmp	r2, r3
 801b8f0:	d11e      	bne.n	801b930 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xa4>
 801b8f2:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 801b8f6:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 801b8fa:	429a      	cmp	r2, r3
 801b8fc:	d118      	bne.n	801b930 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xa4>
 801b8fe:	6820      	ldr	r0, [r4, #0]
 801b900:	466b      	mov	r3, sp
 801b902:	6861      	ldr	r1, [r4, #4]
 801b904:	c303      	stmia	r3!, {r0, r1}
 801b906:	4639      	mov	r1, r7
 801b908:	4668      	mov	r0, sp
 801b90a:	f7fc fa55 	bl	8017db8 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801b90e:	f8d9 3000 	ldr.w	r3, [r9]
 801b912:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 801b916:	442b      	add	r3, r5
 801b918:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 801b91c:	4413      	add	r3, r2
 801b91e:	f9bd 2006 	ldrsh.w	r2, [sp, #6]
 801b922:	4293      	cmp	r3, r2
 801b924:	dc04      	bgt.n	801b930 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xa4>
 801b926:	4669      	mov	r1, sp
 801b928:	4630      	mov	r0, r6
 801b92a:	f7ff ff87 	bl	801b83c <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE>
 801b92e:	e7b5      	b.n	801b89c <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x10>
 801b930:	f8d8 3000 	ldr.w	r3, [r8]
 801b934:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 801b938:	442b      	add	r3, r5
 801b93a:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 801b93e:	4291      	cmp	r1, r2
 801b940:	d119      	bne.n	801b976 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xea>
 801b942:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 801b946:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 801b94a:	4291      	cmp	r1, r2
 801b94c:	d113      	bne.n	801b976 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xea>
 801b94e:	6820      	ldr	r0, [r4, #0]
 801b950:	466a      	mov	r2, sp
 801b952:	6861      	ldr	r1, [r4, #4]
 801b954:	c203      	stmia	r2!, {r0, r1}
 801b956:	4619      	mov	r1, r3
 801b958:	4668      	mov	r0, sp
 801b95a:	f7fc fa2d 	bl	8017db8 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801b95e:	f8d8 3000 	ldr.w	r3, [r8]
 801b962:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 801b966:	442b      	add	r3, r5
 801b968:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801b96c:	4413      	add	r3, r2
 801b96e:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
 801b972:	4293      	cmp	r3, r2
 801b974:	ddd7      	ble.n	801b926 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x9a>
 801b976:	4620      	mov	r0, r4
 801b978:	f7f4 fb05 	bl	800ff86 <_ZNK8touchgfx4Rect7isEmptyEv>
 801b97c:	b990      	cbnz	r0, 801b9a4 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x118>
 801b97e:	88a7      	ldrh	r7, [r4, #4]
 801b980:	88e3      	ldrh	r3, [r4, #6]
 801b982:	fb17 f703 	smulbb	r7, r7, r3
 801b986:	f8d8 3000 	ldr.w	r3, [r8]
 801b98a:	441d      	add	r5, r3
 801b98c:	4628      	mov	r0, r5
 801b98e:	f7f4 fafa 	bl	800ff86 <_ZNK8touchgfx4Rect7isEmptyEv>
 801b992:	b948      	cbnz	r0, 801b9a8 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x11c>
 801b994:	88ab      	ldrh	r3, [r5, #4]
 801b996:	88ea      	ldrh	r2, [r5, #6]
 801b998:	fb13 f302 	smulbb	r3, r3, r2
 801b99c:	42bb      	cmp	r3, r7
 801b99e:	f6bf af7c 	bge.w	801b89a <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xe>
 801b9a2:	e79e      	b.n	801b8e2 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x56>
 801b9a4:	2700      	movs	r7, #0
 801b9a6:	e7ee      	b.n	801b986 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xfa>
 801b9a8:	2300      	movs	r3, #0
 801b9aa:	e7f7      	b.n	801b99c <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x110>
 801b9ac:	24028ea8 	.word	0x24028ea8
 801b9b0:	24028e90 	.word	0x24028e90

0801b9b4 <_ZN8touchgfx6Bitmap10clearCacheEv>:
 801b9b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b9b6:	4c24      	ldr	r4, [pc, #144]	@ (801ba48 <_ZN8touchgfx6Bitmap10clearCacheEv+0x94>)
 801b9b8:	6823      	ldr	r3, [r4, #0]
 801b9ba:	2b00      	cmp	r3, #0
 801b9bc:	d042      	beq.n	801ba44 <_ZN8touchgfx6Bitmap10clearCacheEv+0x90>
 801b9be:	4a23      	ldr	r2, [pc, #140]	@ (801ba4c <_ZN8touchgfx6Bitmap10clearCacheEv+0x98>)
 801b9c0:	4d23      	ldr	r5, [pc, #140]	@ (801ba50 <_ZN8touchgfx6Bitmap10clearCacheEv+0x9c>)
 801b9c2:	8811      	ldrh	r1, [r2, #0]
 801b9c4:	f8b5 c000 	ldrh.w	ip, [r5]
 801b9c8:	4822      	ldr	r0, [pc, #136]	@ (801ba54 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa0>)
 801b9ca:	4461      	add	r1, ip
 801b9cc:	1c4a      	adds	r2, r1, #1
 801b9ce:	008f      	lsls	r7, r1, #2
 801b9d0:	f022 0201 	bic.w	r2, r2, #1
 801b9d4:	19de      	adds	r6, r3, r7
 801b9d6:	0412      	lsls	r2, r2, #16
 801b9d8:	6006      	str	r6, [r0, #0]
 801b9da:	4e1f      	ldr	r6, [pc, #124]	@ (801ba58 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa4>)
 801b9dc:	0c12      	lsrs	r2, r2, #16
 801b9de:	eb07 0742 	add.w	r7, r7, r2, lsl #1
 801b9e2:	19da      	adds	r2, r3, r7
 801b9e4:	6032      	str	r2, [r6, #0]
 801b9e6:	220e      	movs	r2, #14
 801b9e8:	fb02 f20c 	mul.w	r2, r2, ip
 801b9ec:	3203      	adds	r2, #3
 801b9ee:	f022 0203 	bic.w	r2, r2, #3
 801b9f2:	443a      	add	r2, r7
 801b9f4:	4f19      	ldr	r7, [pc, #100]	@ (801ba5c <_ZN8touchgfx6Bitmap10clearCacheEv+0xa8>)
 801b9f6:	4413      	add	r3, r2
 801b9f8:	603b      	str	r3, [r7, #0]
 801b9fa:	2300      	movs	r3, #0
 801b9fc:	4f18      	ldr	r7, [pc, #96]	@ (801ba60 <_ZN8touchgfx6Bitmap10clearCacheEv+0xac>)
 801b9fe:	469c      	mov	ip, r3
 801ba00:	803b      	strh	r3, [r7, #0]
 801ba02:	4f18      	ldr	r7, [pc, #96]	@ (801ba64 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb0>)
 801ba04:	683f      	ldr	r7, [r7, #0]
 801ba06:	1aba      	subs	r2, r7, r2
 801ba08:	4f17      	ldr	r7, [pc, #92]	@ (801ba68 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb4>)
 801ba0a:	603a      	str	r2, [r7, #0]
 801ba0c:	f64f 77ff 	movw	r7, #65535	@ 0xffff
 801ba10:	4a16      	ldr	r2, [pc, #88]	@ (801ba6c <_ZN8touchgfx6Bitmap10clearCacheEv+0xb8>)
 801ba12:	8013      	strh	r3, [r2, #0]
 801ba14:	428b      	cmp	r3, r1
 801ba16:	d10d      	bne.n	801ba34 <_ZN8touchgfx6Bitmap10clearCacheEv+0x80>
 801ba18:	882d      	ldrh	r5, [r5, #0]
 801ba1a:	2300      	movs	r3, #0
 801ba1c:	6830      	ldr	r0, [r6, #0]
 801ba1e:	240e      	movs	r4, #14
 801ba20:	429d      	cmp	r5, r3
 801ba22:	d90f      	bls.n	801ba44 <_ZN8touchgfx6Bitmap10clearCacheEv+0x90>
 801ba24:	fb04 0203 	mla	r2, r4, r3, r0
 801ba28:	3301      	adds	r3, #1
 801ba2a:	7b11      	ldrb	r1, [r2, #12]
 801ba2c:	f36f 1145 	bfc	r1, #5, #1
 801ba30:	7311      	strb	r1, [r2, #12]
 801ba32:	e7f5      	b.n	801ba20 <_ZN8touchgfx6Bitmap10clearCacheEv+0x6c>
 801ba34:	6822      	ldr	r2, [r4, #0]
 801ba36:	f842 c023 	str.w	ip, [r2, r3, lsl #2]
 801ba3a:	6802      	ldr	r2, [r0, #0]
 801ba3c:	f822 7013 	strh.w	r7, [r2, r3, lsl #1]
 801ba40:	3301      	adds	r3, #1
 801ba42:	e7e7      	b.n	801ba14 <_ZN8touchgfx6Bitmap10clearCacheEv+0x60>
 801ba44:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801ba46:	bf00      	nop
 801ba48:	24028e8c 	.word	0x24028e8c
 801ba4c:	24028ea8 	.word	0x24028ea8
 801ba50:	24028eac 	.word	0x24028eac
 801ba54:	24028ea0 	.word	0x24028ea0
 801ba58:	24028e90 	.word	0x24028e90
 801ba5c:	24028e98 	.word	0x24028e98
 801ba60:	24028eaa 	.word	0x24028eaa
 801ba64:	24028e94 	.word	0x24028e94
 801ba68:	24028ea4 	.word	0x24028ea4
 801ba6c:	24028e9c 	.word	0x24028e9c

0801ba70 <_ZN8touchgfx6Bitmap8setCacheEPtmm>:
 801ba70:	4b06      	ldr	r3, [pc, #24]	@ (801ba8c <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x1c>)
 801ba72:	681b      	ldr	r3, [r3, #0]
 801ba74:	b943      	cbnz	r3, 801ba88 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x18>
 801ba76:	b139      	cbz	r1, 801ba88 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x18>
 801ba78:	4b05      	ldr	r3, [pc, #20]	@ (801ba90 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x20>)
 801ba7a:	801a      	strh	r2, [r3, #0]
 801ba7c:	4b05      	ldr	r3, [pc, #20]	@ (801ba94 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x24>)
 801ba7e:	6019      	str	r1, [r3, #0]
 801ba80:	4b05      	ldr	r3, [pc, #20]	@ (801ba98 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x28>)
 801ba82:	6018      	str	r0, [r3, #0]
 801ba84:	f7ff bf96 	b.w	801b9b4 <_ZN8touchgfx6Bitmap10clearCacheEv>
 801ba88:	4770      	bx	lr
 801ba8a:	bf00      	nop
 801ba8c:	24028e98 	.word	0x24028e98
 801ba90:	24028eac 	.word	0x24028eac
 801ba94:	24028e94 	.word	0x24028e94
 801ba98:	24028e8c 	.word	0x24028e8c

0801ba9c <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>:
 801ba9c:	b470      	push	{r4, r5, r6}
 801ba9e:	4c07      	ldr	r4, [pc, #28]	@ (801babc <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x20>)
 801baa0:	4605      	mov	r5, r0
 801baa2:	4610      	mov	r0, r2
 801baa4:	9a03      	ldr	r2, [sp, #12]
 801baa6:	6826      	ldr	r6, [r4, #0]
 801baa8:	b936      	cbnz	r6, 801bab8 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x1c>
 801baaa:	6025      	str	r5, [r4, #0]
 801baac:	4c04      	ldr	r4, [pc, #16]	@ (801bac0 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x24>)
 801baae:	8021      	strh	r1, [r4, #0]
 801bab0:	4619      	mov	r1, r3
 801bab2:	bc70      	pop	{r4, r5, r6}
 801bab4:	f7ff bfdc 	b.w	801ba70 <_ZN8touchgfx6Bitmap8setCacheEPtmm>
 801bab8:	bc70      	pop	{r4, r5, r6}
 801baba:	4770      	bx	lr
 801babc:	24028eb0 	.word	0x24028eb0
 801bac0:	24028ea8 	.word	0x24028ea8

0801bac4 <_ZNK8touchgfx6Bitmap8getWidthEv>:
 801bac4:	4a12      	ldr	r2, [pc, #72]	@ (801bb10 <_ZNK8touchgfx6Bitmap8getWidthEv+0x4c>)
 801bac6:	8803      	ldrh	r3, [r0, #0]
 801bac8:	8812      	ldrh	r2, [r2, #0]
 801baca:	4293      	cmp	r3, r2
 801bacc:	d207      	bcs.n	801bade <_ZNK8touchgfx6Bitmap8getWidthEv+0x1a>
 801bace:	4a11      	ldr	r2, [pc, #68]	@ (801bb14 <_ZNK8touchgfx6Bitmap8getWidthEv+0x50>)
 801bad0:	2114      	movs	r1, #20
 801bad2:	6812      	ldr	r2, [r2, #0]
 801bad4:	fb01 2303 	mla	r3, r1, r3, r2
 801bad8:	f9b3 0008 	ldrsh.w	r0, [r3, #8]
 801badc:	4770      	bx	lr
 801bade:	490e      	ldr	r1, [pc, #56]	@ (801bb18 <_ZNK8touchgfx6Bitmap8getWidthEv+0x54>)
 801bae0:	8809      	ldrh	r1, [r1, #0]
 801bae2:	4411      	add	r1, r2
 801bae4:	428b      	cmp	r3, r1
 801bae6:	da04      	bge.n	801baf2 <_ZNK8touchgfx6Bitmap8getWidthEv+0x2e>
 801bae8:	1a9b      	subs	r3, r3, r2
 801baea:	4a0c      	ldr	r2, [pc, #48]	@ (801bb1c <_ZNK8touchgfx6Bitmap8getWidthEv+0x58>)
 801baec:	210e      	movs	r1, #14
 801baee:	6812      	ldr	r2, [r2, #0]
 801baf0:	e7f0      	b.n	801bad4 <_ZNK8touchgfx6Bitmap8getWidthEv+0x10>
 801baf2:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 801baf6:	4293      	cmp	r3, r2
 801baf8:	d108      	bne.n	801bb0c <_ZNK8touchgfx6Bitmap8getWidthEv+0x48>
 801bafa:	4b09      	ldr	r3, [pc, #36]	@ (801bb20 <_ZNK8touchgfx6Bitmap8getWidthEv+0x5c>)
 801bafc:	781b      	ldrb	r3, [r3, #0]
 801bafe:	b91b      	cbnz	r3, 801bb08 <_ZNK8touchgfx6Bitmap8getWidthEv+0x44>
 801bb00:	4b08      	ldr	r3, [pc, #32]	@ (801bb24 <_ZNK8touchgfx6Bitmap8getWidthEv+0x60>)
 801bb02:	f9b3 0000 	ldrsh.w	r0, [r3]
 801bb06:	4770      	bx	lr
 801bb08:	4b07      	ldr	r3, [pc, #28]	@ (801bb28 <_ZNK8touchgfx6Bitmap8getWidthEv+0x64>)
 801bb0a:	e7fa      	b.n	801bb02 <_ZNK8touchgfx6Bitmap8getWidthEv+0x3e>
 801bb0c:	2000      	movs	r0, #0
 801bb0e:	4770      	bx	lr
 801bb10:	24028ea8 	.word	0x24028ea8
 801bb14:	24028eb0 	.word	0x24028eb0
 801bb18:	24028eac 	.word	0x24028eac
 801bb1c:	24028e90 	.word	0x24028e90
 801bb20:	24028e18 	.word	0x24028e18
 801bb24:	24028e1a 	.word	0x24028e1a
 801bb28:	24028e1c 	.word	0x24028e1c

0801bb2c <_ZNK8touchgfx6Bitmap9getHeightEv>:
 801bb2c:	4a12      	ldr	r2, [pc, #72]	@ (801bb78 <_ZNK8touchgfx6Bitmap9getHeightEv+0x4c>)
 801bb2e:	8803      	ldrh	r3, [r0, #0]
 801bb30:	8812      	ldrh	r2, [r2, #0]
 801bb32:	4293      	cmp	r3, r2
 801bb34:	d207      	bcs.n	801bb46 <_ZNK8touchgfx6Bitmap9getHeightEv+0x1a>
 801bb36:	4a11      	ldr	r2, [pc, #68]	@ (801bb7c <_ZNK8touchgfx6Bitmap9getHeightEv+0x50>)
 801bb38:	2114      	movs	r1, #20
 801bb3a:	6812      	ldr	r2, [r2, #0]
 801bb3c:	fb01 2303 	mla	r3, r1, r3, r2
 801bb40:	f9b3 000a 	ldrsh.w	r0, [r3, #10]
 801bb44:	4770      	bx	lr
 801bb46:	490e      	ldr	r1, [pc, #56]	@ (801bb80 <_ZNK8touchgfx6Bitmap9getHeightEv+0x54>)
 801bb48:	8809      	ldrh	r1, [r1, #0]
 801bb4a:	4411      	add	r1, r2
 801bb4c:	428b      	cmp	r3, r1
 801bb4e:	da04      	bge.n	801bb5a <_ZNK8touchgfx6Bitmap9getHeightEv+0x2e>
 801bb50:	1a9b      	subs	r3, r3, r2
 801bb52:	4a0c      	ldr	r2, [pc, #48]	@ (801bb84 <_ZNK8touchgfx6Bitmap9getHeightEv+0x58>)
 801bb54:	210e      	movs	r1, #14
 801bb56:	6812      	ldr	r2, [r2, #0]
 801bb58:	e7f0      	b.n	801bb3c <_ZNK8touchgfx6Bitmap9getHeightEv+0x10>
 801bb5a:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 801bb5e:	4293      	cmp	r3, r2
 801bb60:	d108      	bne.n	801bb74 <_ZNK8touchgfx6Bitmap9getHeightEv+0x48>
 801bb62:	4b09      	ldr	r3, [pc, #36]	@ (801bb88 <_ZNK8touchgfx6Bitmap9getHeightEv+0x5c>)
 801bb64:	781b      	ldrb	r3, [r3, #0]
 801bb66:	b91b      	cbnz	r3, 801bb70 <_ZNK8touchgfx6Bitmap9getHeightEv+0x44>
 801bb68:	4b08      	ldr	r3, [pc, #32]	@ (801bb8c <_ZNK8touchgfx6Bitmap9getHeightEv+0x60>)
 801bb6a:	f9b3 0000 	ldrsh.w	r0, [r3]
 801bb6e:	4770      	bx	lr
 801bb70:	4b07      	ldr	r3, [pc, #28]	@ (801bb90 <_ZNK8touchgfx6Bitmap9getHeightEv+0x64>)
 801bb72:	e7fa      	b.n	801bb6a <_ZNK8touchgfx6Bitmap9getHeightEv+0x3e>
 801bb74:	2000      	movs	r0, #0
 801bb76:	4770      	bx	lr
 801bb78:	24028ea8 	.word	0x24028ea8
 801bb7c:	24028eb0 	.word	0x24028eb0
 801bb80:	24028eac 	.word	0x24028eac
 801bb84:	24028e90 	.word	0x24028e90
 801bb88:	24028e18 	.word	0x24028e18
 801bb8c:	24028e1c 	.word	0x24028e1c
 801bb90:	24028e1a 	.word	0x24028e1a

0801bb94 <_ZNK8touchgfx6Bitmap12getSolidRectEv>:
 801bb94:	4a22      	ldr	r2, [pc, #136]	@ (801bc20 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x8c>)
 801bb96:	b530      	push	{r4, r5, lr}
 801bb98:	880b      	ldrh	r3, [r1, #0]
 801bb9a:	8812      	ldrh	r2, [r2, #0]
 801bb9c:	4293      	cmp	r3, r2
 801bb9e:	d213      	bcs.n	801bbc8 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x34>
 801bba0:	4a20      	ldr	r2, [pc, #128]	@ (801bc24 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x90>)
 801bba2:	2114      	movs	r1, #20
 801bba4:	6812      	ldr	r2, [r2, #0]
 801bba6:	fb01 2303 	mla	r3, r1, r3, r2
 801bbaa:	f9b3 400c 	ldrsh.w	r4, [r3, #12]
 801bbae:	f9b3 100e 	ldrsh.w	r1, [r3, #14]
 801bbb2:	8a1a      	ldrh	r2, [r3, #16]
 801bbb4:	8a5b      	ldrh	r3, [r3, #18]
 801bbb6:	f3c2 020c 	ubfx	r2, r2, #0, #13
 801bbba:	8004      	strh	r4, [r0, #0]
 801bbbc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801bbc0:	8041      	strh	r1, [r0, #2]
 801bbc2:	8082      	strh	r2, [r0, #4]
 801bbc4:	80c3      	strh	r3, [r0, #6]
 801bbc6:	e024      	b.n	801bc12 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x7e>
 801bbc8:	4917      	ldr	r1, [pc, #92]	@ (801bc28 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x94>)
 801bbca:	8809      	ldrh	r1, [r1, #0]
 801bbcc:	4411      	add	r1, r2
 801bbce:	428b      	cmp	r3, r1
 801bbd0:	da10      	bge.n	801bbf4 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x60>
 801bbd2:	1a9b      	subs	r3, r3, r2
 801bbd4:	220e      	movs	r2, #14
 801bbd6:	4353      	muls	r3, r2
 801bbd8:	4a14      	ldr	r2, [pc, #80]	@ (801bc2c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x98>)
 801bbda:	6811      	ldr	r1, [r2, #0]
 801bbdc:	18ca      	adds	r2, r1, r3
 801bbde:	5ecd      	ldrsh	r5, [r1, r3]
 801bbe0:	f9b2 4002 	ldrsh.w	r4, [r2, #2]
 801bbe4:	f9b2 1004 	ldrsh.w	r1, [r2, #4]
 801bbe8:	f9b2 3006 	ldrsh.w	r3, [r2, #6]
 801bbec:	8005      	strh	r5, [r0, #0]
 801bbee:	8044      	strh	r4, [r0, #2]
 801bbf0:	8081      	strh	r1, [r0, #4]
 801bbf2:	e7e7      	b.n	801bbc4 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x30>
 801bbf4:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 801bbf8:	4293      	cmp	r3, r2
 801bbfa:	d10b      	bne.n	801bc14 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x80>
 801bbfc:	4b0c      	ldr	r3, [pc, #48]	@ (801bc30 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x9c>)
 801bbfe:	f9b3 1000 	ldrsh.w	r1, [r3]
 801bc02:	4b0c      	ldr	r3, [pc, #48]	@ (801bc34 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa0>)
 801bc04:	8081      	strh	r1, [r0, #4]
 801bc06:	f9b3 2000 	ldrsh.w	r2, [r3]
 801bc0a:	2300      	movs	r3, #0
 801bc0c:	80c2      	strh	r2, [r0, #6]
 801bc0e:	8003      	strh	r3, [r0, #0]
 801bc10:	8043      	strh	r3, [r0, #2]
 801bc12:	bd30      	pop	{r4, r5, pc}
 801bc14:	2300      	movs	r3, #0
 801bc16:	8003      	strh	r3, [r0, #0]
 801bc18:	8043      	strh	r3, [r0, #2]
 801bc1a:	8083      	strh	r3, [r0, #4]
 801bc1c:	e7d2      	b.n	801bbc4 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x30>
 801bc1e:	bf00      	nop
 801bc20:	24028ea8 	.word	0x24028ea8
 801bc24:	24028eb0 	.word	0x24028eb0
 801bc28:	24028eac 	.word	0x24028eac
 801bc2c:	24028e90 	.word	0x24028e90
 801bc30:	24028e14 	.word	0x24028e14
 801bc34:	24028e16 	.word	0x24028e16

0801bc38 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>:
 801bc38:	4a17      	ldr	r2, [pc, #92]	@ (801bc98 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x60>)
 801bc3a:	8803      	ldrh	r3, [r0, #0]
 801bc3c:	8812      	ldrh	r2, [r2, #0]
 801bc3e:	4293      	cmp	r3, r2
 801bc40:	d213      	bcs.n	801bc6a <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x32>
 801bc42:	4a16      	ldr	r2, [pc, #88]	@ (801bc9c <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x64>)
 801bc44:	2114      	movs	r1, #20
 801bc46:	6812      	ldr	r2, [r2, #0]
 801bc48:	fb01 2303 	mla	r3, r1, r3, r2
 801bc4c:	8a1a      	ldrh	r2, [r3, #16]
 801bc4e:	8919      	ldrh	r1, [r3, #8]
 801bc50:	f3c2 020c 	ubfx	r2, r2, #0, #13
 801bc54:	428a      	cmp	r2, r1
 801bc56:	db1d      	blt.n	801bc94 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5c>
 801bc58:	8a58      	ldrh	r0, [r3, #18]
 801bc5a:	f3c0 000c 	ubfx	r0, r0, #0, #13
 801bc5e:	895b      	ldrh	r3, [r3, #10]
 801bc60:	4298      	cmp	r0, r3
 801bc62:	bfac      	ite	ge
 801bc64:	2000      	movge	r0, #0
 801bc66:	2001      	movlt	r0, #1
 801bc68:	4770      	bx	lr
 801bc6a:	490d      	ldr	r1, [pc, #52]	@ (801bca0 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x68>)
 801bc6c:	8809      	ldrh	r1, [r1, #0]
 801bc6e:	4411      	add	r1, r2
 801bc70:	428b      	cmp	r3, r1
 801bc72:	da0d      	bge.n	801bc90 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x58>
 801bc74:	1a9b      	subs	r3, r3, r2
 801bc76:	4a0b      	ldr	r2, [pc, #44]	@ (801bca4 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x6c>)
 801bc78:	210e      	movs	r1, #14
 801bc7a:	6812      	ldr	r2, [r2, #0]
 801bc7c:	fb01 2303 	mla	r3, r1, r3, r2
 801bc80:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
 801bc84:	891a      	ldrh	r2, [r3, #8]
 801bc86:	4291      	cmp	r1, r2
 801bc88:	db04      	blt.n	801bc94 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5c>
 801bc8a:	f9b3 0006 	ldrsh.w	r0, [r3, #6]
 801bc8e:	e7e6      	b.n	801bc5e <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x26>
 801bc90:	2000      	movs	r0, #0
 801bc92:	4770      	bx	lr
 801bc94:	2001      	movs	r0, #1
 801bc96:	4770      	bx	lr
 801bc98:	24028ea8 	.word	0x24028ea8
 801bc9c:	24028eb0 	.word	0x24028eb0
 801bca0:	24028eac 	.word	0x24028eac
 801bca4:	24028e90 	.word	0x24028e90

0801bca8 <_ZNK8touchgfx6Bitmap7getDataEv>:
 801bca8:	4a12      	ldr	r2, [pc, #72]	@ (801bcf4 <_ZNK8touchgfx6Bitmap7getDataEv+0x4c>)
 801bcaa:	8803      	ldrh	r3, [r0, #0]
 801bcac:	8811      	ldrh	r1, [r2, #0]
 801bcae:	428b      	cmp	r3, r1
 801bcb0:	d20b      	bcs.n	801bcca <_ZNK8touchgfx6Bitmap7getDataEv+0x22>
 801bcb2:	4a11      	ldr	r2, [pc, #68]	@ (801bcf8 <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 801bcb4:	6812      	ldr	r2, [r2, #0]
 801bcb6:	b112      	cbz	r2, 801bcbe <_ZNK8touchgfx6Bitmap7getDataEv+0x16>
 801bcb8:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 801bcbc:	b9c0      	cbnz	r0, 801bcf0 <_ZNK8touchgfx6Bitmap7getDataEv+0x48>
 801bcbe:	4a0f      	ldr	r2, [pc, #60]	@ (801bcfc <_ZNK8touchgfx6Bitmap7getDataEv+0x54>)
 801bcc0:	6811      	ldr	r1, [r2, #0]
 801bcc2:	2214      	movs	r2, #20
 801bcc4:	4353      	muls	r3, r2
 801bcc6:	58c8      	ldr	r0, [r1, r3]
 801bcc8:	4770      	bx	lr
 801bcca:	4a0d      	ldr	r2, [pc, #52]	@ (801bd00 <_ZNK8touchgfx6Bitmap7getDataEv+0x58>)
 801bccc:	8812      	ldrh	r2, [r2, #0]
 801bcce:	440a      	add	r2, r1
 801bcd0:	4293      	cmp	r3, r2
 801bcd2:	da04      	bge.n	801bcde <_ZNK8touchgfx6Bitmap7getDataEv+0x36>
 801bcd4:	4a08      	ldr	r2, [pc, #32]	@ (801bcf8 <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 801bcd6:	6812      	ldr	r2, [r2, #0]
 801bcd8:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 801bcdc:	4770      	bx	lr
 801bcde:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 801bce2:	4293      	cmp	r3, r2
 801bce4:	d103      	bne.n	801bcee <_ZNK8touchgfx6Bitmap7getDataEv+0x46>
 801bce6:	4b07      	ldr	r3, [pc, #28]	@ (801bd04 <_ZNK8touchgfx6Bitmap7getDataEv+0x5c>)
 801bce8:	681b      	ldr	r3, [r3, #0]
 801bcea:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 801bcec:	4770      	bx	lr
 801bcee:	2000      	movs	r0, #0
 801bcf0:	4770      	bx	lr
 801bcf2:	bf00      	nop
 801bcf4:	24028ea8 	.word	0x24028ea8
 801bcf8:	24028e8c 	.word	0x24028e8c
 801bcfc:	24028eb0 	.word	0x24028eb0
 801bd00:	24028eac 	.word	0x24028eac
 801bd04:	24028e20 	.word	0x24028e20

0801bd08 <_ZNK8touchgfx6Bitmap12getExtraDataEv>:
 801bd08:	4b24      	ldr	r3, [pc, #144]	@ (801bd9c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x94>)
 801bd0a:	8802      	ldrh	r2, [r0, #0]
 801bd0c:	8818      	ldrh	r0, [r3, #0]
 801bd0e:	4282      	cmp	r2, r0
 801bd10:	d221      	bcs.n	801bd56 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x4e>
 801bd12:	4b23      	ldr	r3, [pc, #140]	@ (801bda0 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>)
 801bd14:	6819      	ldr	r1, [r3, #0]
 801bd16:	2314      	movs	r3, #20
 801bd18:	fb03 1302 	mla	r3, r3, r2, r1
 801bd1c:	6858      	ldr	r0, [r3, #4]
 801bd1e:	2800      	cmp	r0, #0
 801bd20:	d03a      	beq.n	801bd98 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 801bd22:	4920      	ldr	r1, [pc, #128]	@ (801bda4 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 801bd24:	6809      	ldr	r1, [r1, #0]
 801bd26:	2900      	cmp	r1, #0
 801bd28:	d036      	beq.n	801bd98 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 801bd2a:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801bd2e:	2900      	cmp	r1, #0
 801bd30:	d032      	beq.n	801bd98 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 801bd32:	891a      	ldrh	r2, [r3, #8]
 801bd34:	8958      	ldrh	r0, [r3, #10]
 801bd36:	4350      	muls	r0, r2
 801bd38:	7c5a      	ldrb	r2, [r3, #17]
 801bd3a:	7cdb      	ldrb	r3, [r3, #19]
 801bd3c:	0952      	lsrs	r2, r2, #5
 801bd3e:	f3c3 1342 	ubfx	r3, r3, #5, #3
 801bd42:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 801bd46:	2b0b      	cmp	r3, #11
 801bd48:	bf18      	it	ne
 801bd4a:	0040      	lslne	r0, r0, #1
 801bd4c:	3003      	adds	r0, #3
 801bd4e:	f020 0003 	bic.w	r0, r0, #3
 801bd52:	4408      	add	r0, r1
 801bd54:	4770      	bx	lr
 801bd56:	4b14      	ldr	r3, [pc, #80]	@ (801bda8 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa0>)
 801bd58:	881b      	ldrh	r3, [r3, #0]
 801bd5a:	4403      	add	r3, r0
 801bd5c:	429a      	cmp	r2, r3
 801bd5e:	da1a      	bge.n	801bd96 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 801bd60:	4b12      	ldr	r3, [pc, #72]	@ (801bdac <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa4>)
 801bd62:	1a10      	subs	r0, r2, r0
 801bd64:	210e      	movs	r1, #14
 801bd66:	681b      	ldr	r3, [r3, #0]
 801bd68:	fb01 3000 	mla	r0, r1, r0, r3
 801bd6c:	7b03      	ldrb	r3, [r0, #12]
 801bd6e:	f003 031f 	and.w	r3, r3, #31
 801bd72:	2b0b      	cmp	r3, #11
 801bd74:	d10b      	bne.n	801bd8e <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x86>
 801bd76:	8903      	ldrh	r3, [r0, #8]
 801bd78:	8940      	ldrh	r0, [r0, #10]
 801bd7a:	4358      	muls	r0, r3
 801bd7c:	4b09      	ldr	r3, [pc, #36]	@ (801bda4 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 801bd7e:	3003      	adds	r0, #3
 801bd80:	6819      	ldr	r1, [r3, #0]
 801bd82:	f020 0303 	bic.w	r3, r0, #3
 801bd86:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 801bd8a:	4418      	add	r0, r3
 801bd8c:	4770      	bx	lr
 801bd8e:	2b0d      	cmp	r3, #13
 801bd90:	d101      	bne.n	801bd96 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 801bd92:	300d      	adds	r0, #13
 801bd94:	4770      	bx	lr
 801bd96:	2000      	movs	r0, #0
 801bd98:	4770      	bx	lr
 801bd9a:	bf00      	nop
 801bd9c:	24028ea8 	.word	0x24028ea8
 801bda0:	24028eb0 	.word	0x24028eb0
 801bda4:	24028e8c 	.word	0x24028e8c
 801bda8:	24028eac 	.word	0x24028eac
 801bdac:	24028e90 	.word	0x24028e90

0801bdb0 <_ZNK8touchgfx6Bitmap9getFormatEv>:
 801bdb0:	4b1f      	ldr	r3, [pc, #124]	@ (801be30 <_ZNK8touchgfx6Bitmap9getFormatEv+0x80>)
 801bdb2:	b510      	push	{r4, lr}
 801bdb4:	8802      	ldrh	r2, [r0, #0]
 801bdb6:	881b      	ldrh	r3, [r3, #0]
 801bdb8:	429a      	cmp	r2, r3
 801bdba:	d21a      	bcs.n	801bdf2 <_ZNK8touchgfx6Bitmap9getFormatEv+0x42>
 801bdbc:	4b1d      	ldr	r3, [pc, #116]	@ (801be34 <_ZNK8touchgfx6Bitmap9getFormatEv+0x84>)
 801bdbe:	2114      	movs	r1, #20
 801bdc0:	681b      	ldr	r3, [r3, #0]
 801bdc2:	fb01 3102 	mla	r1, r1, r2, r3
 801bdc6:	7c4b      	ldrb	r3, [r1, #17]
 801bdc8:	0958      	lsrs	r0, r3, #5
 801bdca:	7ccb      	ldrb	r3, [r1, #19]
 801bdcc:	491a      	ldr	r1, [pc, #104]	@ (801be38 <_ZNK8touchgfx6Bitmap9getFormatEv+0x88>)
 801bdce:	f3c3 1342 	ubfx	r3, r3, #5, #3
 801bdd2:	6809      	ldr	r1, [r1, #0]
 801bdd4:	ea43 03c0 	orr.w	r3, r3, r0, lsl #3
 801bdd8:	b2d8      	uxtb	r0, r3
 801bdda:	b149      	cbz	r1, 801bdf0 <_ZNK8touchgfx6Bitmap9getFormatEv+0x40>
 801bddc:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 801bde0:	b132      	cbz	r2, 801bdf0 <_ZNK8touchgfx6Bitmap9getFormatEv+0x40>
 801bde2:	2b0e      	cmp	r3, #14
 801bde4:	d021      	beq.n	801be2a <_ZNK8touchgfx6Bitmap9getFormatEv+0x7a>
 801bde6:	280f      	cmp	r0, #15
 801bde8:	d01d      	beq.n	801be26 <_ZNK8touchgfx6Bitmap9getFormatEv+0x76>
 801bdea:	2810      	cmp	r0, #16
 801bdec:	bf08      	it	eq
 801bdee:	2002      	moveq	r0, #2
 801bdf0:	bd10      	pop	{r4, pc}
 801bdf2:	4912      	ldr	r1, [pc, #72]	@ (801be3c <_ZNK8touchgfx6Bitmap9getFormatEv+0x8c>)
 801bdf4:	8809      	ldrh	r1, [r1, #0]
 801bdf6:	4419      	add	r1, r3
 801bdf8:	428a      	cmp	r2, r1
 801bdfa:	da09      	bge.n	801be10 <_ZNK8touchgfx6Bitmap9getFormatEv+0x60>
 801bdfc:	1ad3      	subs	r3, r2, r3
 801bdfe:	4a10      	ldr	r2, [pc, #64]	@ (801be40 <_ZNK8touchgfx6Bitmap9getFormatEv+0x90>)
 801be00:	210e      	movs	r1, #14
 801be02:	6812      	ldr	r2, [r2, #0]
 801be04:	fb01 2303 	mla	r3, r1, r3, r2
 801be08:	7b18      	ldrb	r0, [r3, #12]
 801be0a:	f000 001f 	and.w	r0, r0, #31
 801be0e:	e7ef      	b.n	801bdf0 <_ZNK8touchgfx6Bitmap9getFormatEv+0x40>
 801be10:	f64f 73fe 	movw	r3, #65534	@ 0xfffe
 801be14:	429a      	cmp	r2, r3
 801be16:	d108      	bne.n	801be2a <_ZNK8touchgfx6Bitmap9getFormatEv+0x7a>
 801be18:	f7e8 f832 	bl	8003e80 <_ZN8touchgfx3HAL3lcdEv>
 801be1c:	6803      	ldr	r3, [r0, #0]
 801be1e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801be22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801be24:	4718      	bx	r3
 801be26:	2001      	movs	r0, #1
 801be28:	e7e2      	b.n	801bdf0 <_ZNK8touchgfx6Bitmap9getFormatEv+0x40>
 801be2a:	2000      	movs	r0, #0
 801be2c:	e7e0      	b.n	801bdf0 <_ZNK8touchgfx6Bitmap9getFormatEv+0x40>
 801be2e:	bf00      	nop
 801be30:	24028ea8 	.word	0x24028ea8
 801be34:	24028eb0 	.word	0x24028eb0
 801be38:	24028e8c 	.word	0x24028e8c
 801be3c:	24028eac 	.word	0x24028eac
 801be40:	24028e90 	.word	0x24028e90

0801be44 <_ZNK8touchgfx8LCD24bpp8bitDepthEv>:
 801be44:	2018      	movs	r0, #24
 801be46:	4770      	bx	lr

0801be48 <_ZNK8touchgfx8LCD24bpp17framebufferFormatEv>:
 801be48:	2001      	movs	r0, #1
 801be4a:	4770      	bx	lr

0801be4c <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv>:
 801be4c:	4b02      	ldr	r3, [pc, #8]	@ (801be58 <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv+0xc>)
 801be4e:	8818      	ldrh	r0, [r3, #0]
 801be50:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801be54:	b280      	uxth	r0, r0
 801be56:	4770      	bx	lr
 801be58:	24028e1a 	.word	0x24028e1a

0801be5c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 801be5c:	2bff      	cmp	r3, #255	@ 0xff
 801be5e:	d04c      	beq.n	801befa <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
 801be60:	2a2c      	cmp	r2, #44	@ 0x2c
 801be62:	d030      	beq.n	801bec6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6a>
 801be64:	d80f      	bhi.n	801be86 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x2a>
 801be66:	2a08      	cmp	r2, #8
 801be68:	d043      	beq.n	801bef2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x96>
 801be6a:	d805      	bhi.n	801be78 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1c>
 801be6c:	2a04      	cmp	r2, #4
 801be6e:	d03e      	beq.n	801beee <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x92>
 801be70:	2a05      	cmp	r2, #5
 801be72:	d03a      	beq.n	801beea <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8e>
 801be74:	2300      	movs	r3, #0
 801be76:	e024      	b.n	801bec2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801be78:	2a0a      	cmp	r2, #10
 801be7a:	d03a      	beq.n	801bef2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x96>
 801be7c:	d301      	bcc.n	801be82 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x26>
 801be7e:	2a0b      	cmp	r2, #11
 801be80:	d1f8      	bne.n	801be74 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801be82:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 801be84:	e01d      	b.n	801bec2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801be86:	2a30      	cmp	r2, #48	@ 0x30
 801be88:	d035      	beq.n	801bef6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9a>
 801be8a:	d80a      	bhi.n	801bea2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x46>
 801be8c:	2a2e      	cmp	r2, #46	@ 0x2e
 801be8e:	684b      	ldr	r3, [r1, #4]
 801be90:	d023      	beq.n	801beda <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801be92:	d90d      	bls.n	801beb0 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x54>
 801be94:	781a      	ldrb	r2, [r3, #0]
 801be96:	785b      	ldrb	r3, [r3, #1]
 801be98:	2b00      	cmp	r3, #0
 801be9a:	d1eb      	bne.n	801be74 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801be9c:	b98a      	cbnz	r2, 801bec2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801be9e:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 801bea0:	e00f      	b.n	801bec2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801bea2:	2a32      	cmp	r2, #50	@ 0x32
 801bea4:	d027      	beq.n	801bef6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9a>
 801bea6:	d301      	bcc.n	801beac <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x50>
 801bea8:	2a33      	cmp	r2, #51	@ 0x33
 801beaa:	d1e3      	bne.n	801be74 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801beac:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 801beae:	e008      	b.n	801bec2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801beb0:	781a      	ldrb	r2, [r3, #0]
 801beb2:	785b      	ldrb	r3, [r3, #1]
 801beb4:	2b00      	cmp	r3, #0
 801beb6:	d1dd      	bne.n	801be74 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801beb8:	2a00      	cmp	r2, #0
 801beba:	d0f0      	beq.n	801be9e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x42>
 801bebc:	2a01      	cmp	r2, #1
 801bebe:	d1d9      	bne.n	801be74 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801bec0:	6943      	ldr	r3, [r0, #20]
 801bec2:	4618      	mov	r0, r3
 801bec4:	4770      	bx	lr
 801bec6:	684b      	ldr	r3, [r1, #4]
 801bec8:	781a      	ldrb	r2, [r3, #0]
 801beca:	785b      	ldrb	r3, [r3, #1]
 801becc:	2b00      	cmp	r3, #0
 801bece:	d1d1      	bne.n	801be74 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801bed0:	b14a      	cbz	r2, 801bee6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8a>
 801bed2:	2a01      	cmp	r2, #1
 801bed4:	bf08      	it	eq
 801bed6:	68c3      	ldreq	r3, [r0, #12]
 801bed8:	e7f3      	b.n	801bec2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801beda:	781a      	ldrb	r2, [r3, #0]
 801bedc:	785b      	ldrb	r3, [r3, #1]
 801bede:	2b00      	cmp	r3, #0
 801bee0:	d1c8      	bne.n	801be74 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801bee2:	2a00      	cmp	r2, #0
 801bee4:	d1ed      	bne.n	801bec2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801bee6:	69c3      	ldr	r3, [r0, #28]
 801bee8:	e7eb      	b.n	801bec2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801beea:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 801beec:	e7e9      	b.n	801bec2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801beee:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 801bef0:	e7e7      	b.n	801bec2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801bef2:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 801bef4:	e7e5      	b.n	801bec2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801bef6:	6cc3      	ldr	r3, [r0, #76]	@ 0x4c
 801bef8:	e7e3      	b.n	801bec2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801befa:	2a2c      	cmp	r2, #44	@ 0x2c
 801befc:	d030      	beq.n	801bf60 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x104>
 801befe:	d80f      	bhi.n	801bf20 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xc4>
 801bf00:	2a08      	cmp	r2, #8
 801bf02:	d042      	beq.n	801bf8a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x12e>
 801bf04:	d805      	bhi.n	801bf12 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xb6>
 801bf06:	2a04      	cmp	r2, #4
 801bf08:	d03d      	beq.n	801bf86 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x12a>
 801bf0a:	2a05      	cmp	r2, #5
 801bf0c:	d1b2      	bne.n	801be74 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801bf0e:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 801bf10:	e7d7      	b.n	801bec2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801bf12:	2a0a      	cmp	r2, #10
 801bf14:	d039      	beq.n	801bf8a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x12e>
 801bf16:	d301      	bcc.n	801bf1c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xc0>
 801bf18:	2a0b      	cmp	r2, #11
 801bf1a:	d1ab      	bne.n	801be74 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801bf1c:	6c83      	ldr	r3, [r0, #72]	@ 0x48
 801bf1e:	e7d0      	b.n	801bec2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801bf20:	2a30      	cmp	r2, #48	@ 0x30
 801bf22:	d034      	beq.n	801bf8e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x132>
 801bf24:	d80b      	bhi.n	801bf3e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xe2>
 801bf26:	2a2e      	cmp	r2, #46	@ 0x2e
 801bf28:	684b      	ldr	r3, [r1, #4]
 801bf2a:	d023      	beq.n	801bf74 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x118>
 801bf2c:	d90e      	bls.n	801bf4c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xf0>
 801bf2e:	781a      	ldrb	r2, [r3, #0]
 801bf30:	785b      	ldrb	r3, [r3, #1]
 801bf32:	2b00      	cmp	r3, #0
 801bf34:	d19e      	bne.n	801be74 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801bf36:	2a00      	cmp	r2, #0
 801bf38:	d1c3      	bne.n	801bec2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801bf3a:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 801bf3c:	e7c1      	b.n	801bec2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801bf3e:	2a32      	cmp	r2, #50	@ 0x32
 801bf40:	d025      	beq.n	801bf8e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x132>
 801bf42:	d301      	bcc.n	801bf48 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xec>
 801bf44:	2a33      	cmp	r2, #51	@ 0x33
 801bf46:	d195      	bne.n	801be74 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801bf48:	6d83      	ldr	r3, [r0, #88]	@ 0x58
 801bf4a:	e7ba      	b.n	801bec2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801bf4c:	781a      	ldrb	r2, [r3, #0]
 801bf4e:	785b      	ldrb	r3, [r3, #1]
 801bf50:	2b00      	cmp	r3, #0
 801bf52:	d18f      	bne.n	801be74 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801bf54:	2a00      	cmp	r2, #0
 801bf56:	d0f0      	beq.n	801bf3a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xde>
 801bf58:	2a01      	cmp	r2, #1
 801bf5a:	d18b      	bne.n	801be74 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801bf5c:	6983      	ldr	r3, [r0, #24]
 801bf5e:	e7b0      	b.n	801bec2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801bf60:	684b      	ldr	r3, [r1, #4]
 801bf62:	781a      	ldrb	r2, [r3, #0]
 801bf64:	785b      	ldrb	r3, [r3, #1]
 801bf66:	2b00      	cmp	r3, #0
 801bf68:	d184      	bne.n	801be74 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801bf6a:	b152      	cbz	r2, 801bf82 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x126>
 801bf6c:	2a01      	cmp	r2, #1
 801bf6e:	bf08      	it	eq
 801bf70:	6903      	ldreq	r3, [r0, #16]
 801bf72:	e7a6      	b.n	801bec2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801bf74:	781a      	ldrb	r2, [r3, #0]
 801bf76:	785b      	ldrb	r3, [r3, #1]
 801bf78:	2b00      	cmp	r3, #0
 801bf7a:	f47f af7b 	bne.w	801be74 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801bf7e:	2a00      	cmp	r2, #0
 801bf80:	d19f      	bne.n	801bec2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801bf82:	6a03      	ldr	r3, [r0, #32]
 801bf84:	e79d      	b.n	801bec2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801bf86:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 801bf88:	e79b      	b.n	801bec2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801bf8a:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 801bf8c:	e799      	b.n	801bec2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801bf8e:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 801bf90:	e797      	b.n	801bec2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>

0801bf92 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801bf92:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bf96:	b085      	sub	sp, #20
 801bf98:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 801bf9a:	9203      	str	r2, [sp, #12]
 801bf9c:	6870      	ldr	r0, [r6, #4]
 801bf9e:	f8dd c058 	ldr.w	ip, [sp, #88]	@ 0x58
 801bfa2:	f89d 505c 	ldrb.w	r5, [sp, #92]	@ 0x5c
 801bfa6:	9101      	str	r1, [sp, #4]
 801bfa8:	fa1f f885 	uxth.w	r8, r5
 801bfac:	43ed      	mvns	r5, r5
 801bfae:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	@ 0x50
 801bfb2:	b2ed      	uxtb	r5, r5
 801bfb4:	fb00 2404 	mla	r4, r0, r4, r2
 801bfb8:	6832      	ldr	r2, [r6, #0]
 801bfba:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801bfbe:	4414      	add	r4, r2
 801bfc0:	f8dc 2000 	ldr.w	r2, [ip]
 801bfc4:	9202      	str	r2, [sp, #8]
 801bfc6:	f8dc 2004 	ldr.w	r2, [ip, #4]
 801bfca:	f102 0e04 	add.w	lr, r2, #4
 801bfce:	9a01      	ldr	r2, [sp, #4]
 801bfd0:	2a00      	cmp	r2, #0
 801bfd2:	dc03      	bgt.n	801bfdc <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 801bfd4:	9a03      	ldr	r2, [sp, #12]
 801bfd6:	2a00      	cmp	r2, #0
 801bfd8:	f340 8116 	ble.w	801c208 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 801bfdc:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801bfde:	f9bc a008 	ldrsh.w	sl, [ip, #8]
 801bfe2:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 801bfe6:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801bfe8:	f9bc 900c 	ldrsh.w	r9, [ip, #12]
 801bfec:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 801bff0:	2b00      	cmp	r3, #0
 801bff2:	dd0e      	ble.n	801c012 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 801bff4:	1406      	asrs	r6, r0, #16
 801bff6:	d405      	bmi.n	801c004 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801bff8:	4556      	cmp	r6, sl
 801bffa:	da03      	bge.n	801c004 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801bffc:	1416      	asrs	r6, r2, #16
 801bffe:	d401      	bmi.n	801c004 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801c000:	454e      	cmp	r6, r9
 801c002:	db07      	blt.n	801c014 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 801c004:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 801c006:	3b01      	subs	r3, #1
 801c008:	3403      	adds	r4, #3
 801c00a:	4430      	add	r0, r6
 801c00c:	9e12      	ldr	r6, [sp, #72]	@ 0x48
 801c00e:	4432      	add	r2, r6
 801c010:	e7ee      	b.n	801bff0 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 801c012:	d063      	beq.n	801c0dc <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 801c014:	1e5e      	subs	r6, r3, #1
 801c016:	9f11      	ldr	r7, [sp, #68]	@ 0x44
 801c018:	fb07 0706 	mla	r7, r7, r6, r0
 801c01c:	143f      	asrs	r7, r7, #16
 801c01e:	d454      	bmi.n	801c0ca <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 801c020:	4557      	cmp	r7, sl
 801c022:	da52      	bge.n	801c0ca <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 801c024:	9f12      	ldr	r7, [sp, #72]	@ 0x48
 801c026:	fb07 2606 	mla	r6, r7, r6, r2
 801c02a:	1436      	asrs	r6, r6, #16
 801c02c:	d44d      	bmi.n	801c0ca <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 801c02e:	454e      	cmp	r6, r9
 801c030:	da4b      	bge.n	801c0ca <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 801c032:	1ce6      	adds	r6, r4, #3
 801c034:	4699      	mov	r9, r3
 801c036:	f1b9 0f00 	cmp.w	r9, #0
 801c03a:	f106 0603 	add.w	r6, r6, #3
 801c03e:	dd48      	ble.n	801c0d2 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x140>
 801c040:	f9bc b008 	ldrsh.w	fp, [ip, #8]
 801c044:	1417      	asrs	r7, r2, #16
 801c046:	9902      	ldr	r1, [sp, #8]
 801c048:	ea4f 4a20 	mov.w	sl, r0, asr #16
 801c04c:	f109 39ff 	add.w	r9, r9, #4294967295
 801c050:	fb0b 1707 	mla	r7, fp, r7, r1
 801c054:	f816 bc06 	ldrb.w	fp, [r6, #-6]
 801c058:	9911      	ldr	r1, [sp, #68]	@ 0x44
 801c05a:	f817 700a 	ldrb.w	r7, [r7, sl]
 801c05e:	fb1b fb05 	smulbb	fp, fp, r5
 801c062:	4408      	add	r0, r1
 801c064:	9912      	ldr	r1, [sp, #72]	@ 0x48
 801c066:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801c06a:	440a      	add	r2, r1
 801c06c:	eb0e 0a07 	add.w	sl, lr, r7
 801c070:	f81e 7007 	ldrb.w	r7, [lr, r7]
 801c074:	fb07 b708 	mla	r7, r7, r8, fp
 801c078:	b2bf      	uxth	r7, r7
 801c07a:	f107 0b01 	add.w	fp, r7, #1
 801c07e:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 801c082:	f816 bc05 	ldrb.w	fp, [r6, #-5]
 801c086:	fb1b fb05 	smulbb	fp, fp, r5
 801c08a:	123f      	asrs	r7, r7, #8
 801c08c:	f806 7c06 	strb.w	r7, [r6, #-6]
 801c090:	f89a 7001 	ldrb.w	r7, [sl, #1]
 801c094:	fb07 b708 	mla	r7, r7, r8, fp
 801c098:	b2bf      	uxth	r7, r7
 801c09a:	f107 0b01 	add.w	fp, r7, #1
 801c09e:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 801c0a2:	123f      	asrs	r7, r7, #8
 801c0a4:	f806 7c05 	strb.w	r7, [r6, #-5]
 801c0a8:	f89a 7002 	ldrb.w	r7, [sl, #2]
 801c0ac:	f816 ac04 	ldrb.w	sl, [r6, #-4]
 801c0b0:	fb1a fa05 	smulbb	sl, sl, r5
 801c0b4:	fb07 a708 	mla	r7, r7, r8, sl
 801c0b8:	b2bf      	uxth	r7, r7
 801c0ba:	f107 0a01 	add.w	sl, r7, #1
 801c0be:	eb0a 2717 	add.w	r7, sl, r7, lsr #8
 801c0c2:	123f      	asrs	r7, r7, #8
 801c0c4:	f806 7c04 	strb.w	r7, [r6, #-4]
 801c0c8:	e7b5      	b.n	801c036 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa4>
 801c0ca:	2700      	movs	r7, #0
 801c0cc:	1bde      	subs	r6, r3, r7
 801c0ce:	2e00      	cmp	r6, #0
 801c0d0:	dc42      	bgt.n	801c158 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c6>
 801c0d2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801c0d6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801c0da:	441c      	add	r4, r3
 801c0dc:	9b01      	ldr	r3, [sp, #4]
 801c0de:	2b00      	cmp	r3, #0
 801c0e0:	f340 8092 	ble.w	801c208 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 801c0e4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801c0e8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801c0ea:	ee30 0a04 	vadd.f32	s0, s0, s8
 801c0ee:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801c0f2:	eef0 6a62 	vmov.f32	s13, s5
 801c0f6:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801c0fa:	ee31 1a05 	vadd.f32	s2, s2, s10
 801c0fe:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801c102:	edcd 6a0f 	vstr	s13, [sp, #60]	@ 0x3c
 801c106:	eef0 6a43 	vmov.f32	s13, s6
 801c10a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801c10e:	edcd 6a10 	vstr	s13, [sp, #64]	@ 0x40
 801c112:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801c116:	ee61 7a27 	vmul.f32	s15, s2, s15
 801c11a:	ee77 2a62 	vsub.f32	s5, s14, s5
 801c11e:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801c122:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801c126:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801c12a:	ee12 2a90 	vmov	r2, s5
 801c12e:	eef0 2a47 	vmov.f32	s5, s14
 801c132:	fb92 f3f3 	sdiv	r3, r2, r3
 801c136:	ee13 2a10 	vmov	r2, s6
 801c13a:	9311      	str	r3, [sp, #68]	@ 0x44
 801c13c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801c13e:	eeb0 3a67 	vmov.f32	s6, s15
 801c142:	fb92 f3f3 	sdiv	r3, r2, r3
 801c146:	9312      	str	r3, [sp, #72]	@ 0x48
 801c148:	9b01      	ldr	r3, [sp, #4]
 801c14a:	9a03      	ldr	r2, [sp, #12]
 801c14c:	3b01      	subs	r3, #1
 801c14e:	9301      	str	r3, [sp, #4]
 801c150:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801c152:	bf08      	it	eq
 801c154:	4613      	moveq	r3, r2
 801c156:	e73a      	b.n	801bfce <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801c158:	ea5f 4a20 	movs.w	sl, r0, asr #16
 801c15c:	d44e      	bmi.n	801c1fc <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 801c15e:	f8dc 6008 	ldr.w	r6, [ip, #8]
 801c162:	4556      	cmp	r6, sl
 801c164:	dd4a      	ble.n	801c1fc <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 801c166:	ea5f 4b22 	movs.w	fp, r2, asr #16
 801c16a:	d447      	bmi.n	801c1fc <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 801c16c:	f8dc 100c 	ldr.w	r1, [ip, #12]
 801c170:	4559      	cmp	r1, fp
 801c172:	dd43      	ble.n	801c1fc <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 801c174:	fa0f f986 	sxth.w	r9, r6
 801c178:	9902      	ldr	r1, [sp, #8]
 801c17a:	eb07 0647 	add.w	r6, r7, r7, lsl #1
 801c17e:	fb0b 1909 	mla	r9, fp, r9, r1
 801c182:	f814 b006 	ldrb.w	fp, [r4, r6]
 801c186:	f819 900a 	ldrb.w	r9, [r9, sl]
 801c18a:	fb1b fb05 	smulbb	fp, fp, r5
 801c18e:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 801c192:	eb0e 0a09 	add.w	sl, lr, r9
 801c196:	f81e 9009 	ldrb.w	r9, [lr, r9]
 801c19a:	fb09 b908 	mla	r9, r9, r8, fp
 801c19e:	fa1f f989 	uxth.w	r9, r9
 801c1a2:	f109 0b01 	add.w	fp, r9, #1
 801c1a6:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801c1aa:	ea4f 2929 	mov.w	r9, r9, asr #8
 801c1ae:	f804 9006 	strb.w	r9, [r4, r6]
 801c1b2:	4426      	add	r6, r4
 801c1b4:	f89a 9001 	ldrb.w	r9, [sl, #1]
 801c1b8:	f896 b001 	ldrb.w	fp, [r6, #1]
 801c1bc:	fb1b fb05 	smulbb	fp, fp, r5
 801c1c0:	fb09 b908 	mla	r9, r9, r8, fp
 801c1c4:	fa1f f989 	uxth.w	r9, r9
 801c1c8:	f109 0b01 	add.w	fp, r9, #1
 801c1cc:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801c1d0:	ea4f 2929 	mov.w	r9, r9, asr #8
 801c1d4:	f886 9001 	strb.w	r9, [r6, #1]
 801c1d8:	f89a 9002 	ldrb.w	r9, [sl, #2]
 801c1dc:	f896 a002 	ldrb.w	sl, [r6, #2]
 801c1e0:	fb1a fa05 	smulbb	sl, sl, r5
 801c1e4:	fb09 a908 	mla	r9, r9, r8, sl
 801c1e8:	fa1f f989 	uxth.w	r9, r9
 801c1ec:	f109 0a01 	add.w	sl, r9, #1
 801c1f0:	eb0a 2919 	add.w	r9, sl, r9, lsr #8
 801c1f4:	ea4f 2929 	mov.w	r9, r9, asr #8
 801c1f8:	f886 9002 	strb.w	r9, [r6, #2]
 801c1fc:	9911      	ldr	r1, [sp, #68]	@ 0x44
 801c1fe:	3701      	adds	r7, #1
 801c200:	4408      	add	r0, r1
 801c202:	9912      	ldr	r1, [sp, #72]	@ 0x48
 801c204:	440a      	add	r2, r1
 801c206:	e761      	b.n	801c0cc <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 801c208:	b005      	add	sp, #20
 801c20a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801c20e <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801c20e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c212:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 801c214:	4693      	mov	fp, r2
 801c216:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 801c218:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801c21c:	6868      	ldr	r0, [r5, #4]
 801c21e:	6877      	ldr	r7, [r6, #4]
 801c220:	9100      	str	r1, [sp, #0]
 801c222:	3704      	adds	r7, #4
 801c224:	e9dd 2412 	ldrd	r2, r4, [sp, #72]	@ 0x48
 801c228:	e9dd 8e0f 	ldrd	r8, lr, [sp, #60]	@ 0x3c
 801c22c:	fb00 2404 	mla	r4, r0, r4, r2
 801c230:	682a      	ldr	r2, [r5, #0]
 801c232:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801c236:	4414      	add	r4, r2
 801c238:	6832      	ldr	r2, [r6, #0]
 801c23a:	9201      	str	r2, [sp, #4]
 801c23c:	9a00      	ldr	r2, [sp, #0]
 801c23e:	2a00      	cmp	r2, #0
 801c240:	dc03      	bgt.n	801c24a <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801c242:	f1bb 0f00 	cmp.w	fp, #0
 801c246:	f340 80bc 	ble.w	801c3c2 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 801c24a:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801c24c:	f9b6 a008 	ldrsh.w	sl, [r6, #8]
 801c250:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 801c254:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801c256:	f9b6 900c 	ldrsh.w	r9, [r6, #12]
 801c25a:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 801c25e:	2b00      	cmp	r3, #0
 801c260:	dd0c      	ble.n	801c27c <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801c262:	1405      	asrs	r5, r0, #16
 801c264:	d405      	bmi.n	801c272 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 801c266:	4555      	cmp	r5, sl
 801c268:	da03      	bge.n	801c272 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 801c26a:	1415      	asrs	r5, r2, #16
 801c26c:	d401      	bmi.n	801c272 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 801c26e:	454d      	cmp	r5, r9
 801c270:	db05      	blt.n	801c27e <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801c272:	4440      	add	r0, r8
 801c274:	4472      	add	r2, lr
 801c276:	3b01      	subs	r3, #1
 801c278:	3403      	adds	r4, #3
 801c27a:	e7f0      	b.n	801c25e <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50>
 801c27c:	d03f      	beq.n	801c2fe <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xf0>
 801c27e:	1e5d      	subs	r5, r3, #1
 801c280:	fb08 0c05 	mla	ip, r8, r5, r0
 801c284:	ea5f 4c2c 	movs.w	ip, ip, asr #16
 801c288:	d42e      	bmi.n	801c2e8 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 801c28a:	45d4      	cmp	ip, sl
 801c28c:	da2c      	bge.n	801c2e8 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 801c28e:	fb0e 2505 	mla	r5, lr, r5, r2
 801c292:	142d      	asrs	r5, r5, #16
 801c294:	d428      	bmi.n	801c2e8 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 801c296:	454d      	cmp	r5, r9
 801c298:	da26      	bge.n	801c2e8 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 801c29a:	1ce5      	adds	r5, r4, #3
 801c29c:	469c      	mov	ip, r3
 801c29e:	f1bc 0f00 	cmp.w	ip, #0
 801c2a2:	f105 0503 	add.w	r5, r5, #3
 801c2a6:	dd25      	ble.n	801c2f4 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xe6>
 801c2a8:	f9b6 1008 	ldrsh.w	r1, [r6, #8]
 801c2ac:	ea4f 4922 	mov.w	r9, r2, asr #16
 801c2b0:	f10c 3cff 	add.w	ip, ip, #4294967295
 801c2b4:	4472      	add	r2, lr
 801c2b6:	468a      	mov	sl, r1
 801c2b8:	9901      	ldr	r1, [sp, #4]
 801c2ba:	fb0a 1909 	mla	r9, sl, r9, r1
 801c2be:	1401      	asrs	r1, r0, #16
 801c2c0:	4440      	add	r0, r8
 801c2c2:	f819 9001 	ldrb.w	r9, [r9, r1]
 801c2c6:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 801c2ca:	eb07 0a09 	add.w	sl, r7, r9
 801c2ce:	f817 9009 	ldrb.w	r9, [r7, r9]
 801c2d2:	f805 9c06 	strb.w	r9, [r5, #-6]
 801c2d6:	f89a 9001 	ldrb.w	r9, [sl, #1]
 801c2da:	f805 9c05 	strb.w	r9, [r5, #-5]
 801c2de:	f89a 9002 	ldrb.w	r9, [sl, #2]
 801c2e2:	f805 9c04 	strb.w	r9, [r5, #-4]
 801c2e6:	e7da      	b.n	801c29e <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801c2e8:	2500      	movs	r5, #0
 801c2ea:	eba3 0c05 	sub.w	ip, r3, r5
 801c2ee:	f1bc 0f00 	cmp.w	ip, #0
 801c2f2:	dc3b      	bgt.n	801c36c <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15e>
 801c2f4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801c2f8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801c2fc:	441c      	add	r4, r3
 801c2fe:	9b00      	ldr	r3, [sp, #0]
 801c300:	2b00      	cmp	r3, #0
 801c302:	dd5e      	ble.n	801c3c2 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 801c304:	ee30 0a04 	vadd.f32	s0, s0, s8
 801c308:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801c30a:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801c30e:	eeb0 6a62 	vmov.f32	s12, s5
 801c312:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801c316:	ee31 1a05 	vadd.f32	s2, s2, s10
 801c31a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801c31e:	ed8d 6a0d 	vstr	s12, [sp, #52]	@ 0x34
 801c322:	eeb0 6a43 	vmov.f32	s12, s6
 801c326:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801c32a:	ed8d 6a0e 	vstr	s12, [sp, #56]	@ 0x38
 801c32e:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801c332:	ee61 7a27 	vmul.f32	s15, s2, s15
 801c336:	ee77 2a62 	vsub.f32	s5, s14, s5
 801c33a:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801c33e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801c342:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801c346:	ee12 2a90 	vmov	r2, s5
 801c34a:	eef0 2a47 	vmov.f32	s5, s14
 801c34e:	fb92 f8f3 	sdiv	r8, r2, r3
 801c352:	ee13 2a10 	vmov	r2, s6
 801c356:	eeb0 3a67 	vmov.f32	s6, s15
 801c35a:	fb92 fef3 	sdiv	lr, r2, r3
 801c35e:	9b00      	ldr	r3, [sp, #0]
 801c360:	3b01      	subs	r3, #1
 801c362:	9300      	str	r3, [sp, #0]
 801c364:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801c366:	bf08      	it	eq
 801c368:	465b      	moveq	r3, fp
 801c36a:	e767      	b.n	801c23c <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 801c36c:	ea5f 4920 	movs.w	r9, r0, asr #16
 801c370:	d423      	bmi.n	801c3ba <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 801c372:	f8d6 c008 	ldr.w	ip, [r6, #8]
 801c376:	45cc      	cmp	ip, r9
 801c378:	dd1f      	ble.n	801c3ba <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 801c37a:	ea5f 4a22 	movs.w	sl, r2, asr #16
 801c37e:	d41c      	bmi.n	801c3ba <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 801c380:	68f1      	ldr	r1, [r6, #12]
 801c382:	4551      	cmp	r1, sl
 801c384:	dd19      	ble.n	801c3ba <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 801c386:	fa0f fc8c 	sxth.w	ip, ip
 801c38a:	9901      	ldr	r1, [sp, #4]
 801c38c:	fb0a 1c0c 	mla	ip, sl, ip, r1
 801c390:	f81c c009 	ldrb.w	ip, [ip, r9]
 801c394:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 801c398:	f817 a00c 	ldrb.w	sl, [r7, ip]
 801c39c:	eb07 090c 	add.w	r9, r7, ip
 801c3a0:	eb05 0c45 	add.w	ip, r5, r5, lsl #1
 801c3a4:	f804 a00c 	strb.w	sl, [r4, ip]
 801c3a8:	44a4      	add	ip, r4
 801c3aa:	f899 a001 	ldrb.w	sl, [r9, #1]
 801c3ae:	f88c a001 	strb.w	sl, [ip, #1]
 801c3b2:	f899 9002 	ldrb.w	r9, [r9, #2]
 801c3b6:	f88c 9002 	strb.w	r9, [ip, #2]
 801c3ba:	4440      	add	r0, r8
 801c3bc:	4472      	add	r2, lr
 801c3be:	3501      	adds	r5, #1
 801c3c0:	e793      	b.n	801c2ea <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xdc>
 801c3c2:	b003      	add	sp, #12
 801c3c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801c3c8 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801c3c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c3cc:	b085      	sub	sp, #20
 801c3ce:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801c3d2:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801c3d4:	9202      	str	r2, [sp, #8]
 801c3d6:	f89d 205c 	ldrb.w	r2, [sp, #92]	@ 0x5c
 801c3da:	6860      	ldr	r0, [r4, #4]
 801c3dc:	9203      	str	r2, [sp, #12]
 801c3de:	f8dd c058 	ldr.w	ip, [sp, #88]	@ 0x58
 801c3e2:	f8dd e044 	ldr.w	lr, [sp, #68]	@ 0x44
 801c3e6:	e9dd 2514 	ldrd	r2, r5, [sp, #80]	@ 0x50
 801c3ea:	fb00 2505 	mla	r5, r0, r5, r2
 801c3ee:	6822      	ldr	r2, [r4, #0]
 801c3f0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801c3f4:	4415      	add	r5, r2
 801c3f6:	f8dc 2000 	ldr.w	r2, [ip]
 801c3fa:	9200      	str	r2, [sp, #0]
 801c3fc:	f8dc 2004 	ldr.w	r2, [ip, #4]
 801c400:	3204      	adds	r2, #4
 801c402:	9201      	str	r2, [sp, #4]
 801c404:	2900      	cmp	r1, #0
 801c406:	dc03      	bgt.n	801c410 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 801c408:	9a02      	ldr	r2, [sp, #8]
 801c40a:	2a00      	cmp	r2, #0
 801c40c:	f340 8127 	ble.w	801c65e <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x296>
 801c410:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801c412:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 801c416:	f502 4400 	add.w	r4, r2, #32768	@ 0x8000
 801c41a:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801c41c:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 801c420:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 801c424:	2b00      	cmp	r3, #0
 801c426:	dd0d      	ble.n	801c444 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801c428:	1422      	asrs	r2, r4, #16
 801c42a:	d405      	bmi.n	801c438 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801c42c:	4542      	cmp	r2, r8
 801c42e:	da03      	bge.n	801c438 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801c430:	1402      	asrs	r2, r0, #16
 801c432:	d401      	bmi.n	801c438 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801c434:	42ba      	cmp	r2, r7
 801c436:	db06      	blt.n	801c446 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801c438:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801c43a:	4474      	add	r4, lr
 801c43c:	3b01      	subs	r3, #1
 801c43e:	3503      	adds	r5, #3
 801c440:	4410      	add	r0, r2
 801c442:	e7ef      	b.n	801c424 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801c444:	d075      	beq.n	801c532 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16a>
 801c446:	1e5a      	subs	r2, r3, #1
 801c448:	fb0e 4602 	mla	r6, lr, r2, r4
 801c44c:	1436      	asrs	r6, r6, #16
 801c44e:	d465      	bmi.n	801c51c <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 801c450:	4546      	cmp	r6, r8
 801c452:	da63      	bge.n	801c51c <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 801c454:	9e12      	ldr	r6, [sp, #72]	@ 0x48
 801c456:	fb06 0202 	mla	r2, r6, r2, r0
 801c45a:	1412      	asrs	r2, r2, #16
 801c45c:	d45e      	bmi.n	801c51c <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 801c45e:	42ba      	cmp	r2, r7
 801c460:	da5c      	bge.n	801c51c <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 801c462:	1cef      	adds	r7, r5, #3
 801c464:	4699      	mov	r9, r3
 801c466:	f1b9 0f00 	cmp.w	r9, #0
 801c46a:	dd5d      	ble.n	801c528 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x160>
 801c46c:	1402      	asrs	r2, r0, #16
 801c46e:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 801c472:	1426      	asrs	r6, r4, #16
 801c474:	4692      	mov	sl, r2
 801c476:	9a00      	ldr	r2, [sp, #0]
 801c478:	fb08 220a 	mla	r2, r8, sl, r2
 801c47c:	5d92      	ldrb	r2, [r2, r6]
 801c47e:	9e01      	ldr	r6, [sp, #4]
 801c480:	f856 6022 	ldr.w	r6, [r6, r2, lsl #2]
 801c484:	ea5f 6816 	movs.w	r8, r6, lsr #24
 801c488:	d041      	beq.n	801c50e <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 801c48a:	9a03      	ldr	r2, [sp, #12]
 801c48c:	fa5f fb86 	uxtb.w	fp, r6
 801c490:	fb02 f808 	mul.w	r8, r2, r8
 801c494:	f108 0201 	add.w	r2, r8, #1
 801c498:	eb02 2228 	add.w	r2, r2, r8, asr #8
 801c49c:	f817 8c03 	ldrb.w	r8, [r7, #-3]
 801c4a0:	1212      	asrs	r2, r2, #8
 801c4a2:	fa1f fa82 	uxth.w	sl, r2
 801c4a6:	43d2      	mvns	r2, r2
 801c4a8:	fb1b fb0a 	smulbb	fp, fp, sl
 801c4ac:	b2d2      	uxtb	r2, r2
 801c4ae:	fb08 b802 	mla	r8, r8, r2, fp
 801c4b2:	fa1f f888 	uxth.w	r8, r8
 801c4b6:	f108 0b01 	add.w	fp, r8, #1
 801c4ba:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 801c4be:	f3c6 2b07 	ubfx	fp, r6, #8, #8
 801c4c2:	f3c6 4607 	ubfx	r6, r6, #16, #8
 801c4c6:	fb1b fb0a 	smulbb	fp, fp, sl
 801c4ca:	ea4f 2828 	mov.w	r8, r8, asr #8
 801c4ce:	fb16 fa0a 	smulbb	sl, r6, sl
 801c4d2:	f817 6c01 	ldrb.w	r6, [r7, #-1]
 801c4d6:	f807 8c03 	strb.w	r8, [r7, #-3]
 801c4da:	f817 8c02 	ldrb.w	r8, [r7, #-2]
 801c4de:	fb06 aa02 	mla	sl, r6, r2, sl
 801c4e2:	fb08 b802 	mla	r8, r8, r2, fp
 801c4e6:	fa1f fa8a 	uxth.w	sl, sl
 801c4ea:	fa1f f888 	uxth.w	r8, r8
 801c4ee:	f10a 0601 	add.w	r6, sl, #1
 801c4f2:	f108 0b01 	add.w	fp, r8, #1
 801c4f6:	eb06 2a1a 	add.w	sl, r6, sl, lsr #8
 801c4fa:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 801c4fe:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801c502:	ea4f 2828 	mov.w	r8, r8, asr #8
 801c506:	f807 ac01 	strb.w	sl, [r7, #-1]
 801c50a:	f807 8c02 	strb.w	r8, [r7, #-2]
 801c50e:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801c510:	4474      	add	r4, lr
 801c512:	3703      	adds	r7, #3
 801c514:	f109 39ff 	add.w	r9, r9, #4294967295
 801c518:	4410      	add	r0, r2
 801c51a:	e7a4      	b.n	801c466 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801c51c:	f04f 0800 	mov.w	r8, #0
 801c520:	eba3 0208 	sub.w	r2, r3, r8
 801c524:	2a00      	cmp	r2, #0
 801c526:	dc3b      	bgt.n	801c5a0 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d8>
 801c528:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801c52c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801c530:	441d      	add	r5, r3
 801c532:	2900      	cmp	r1, #0
 801c534:	f340 8093 	ble.w	801c65e <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x296>
 801c538:	ee30 0a04 	vadd.f32	s0, s0, s8
 801c53c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801c53e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801c542:	3901      	subs	r1, #1
 801c544:	eeb0 6a62 	vmov.f32	s12, s5
 801c548:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801c54c:	ee31 1a05 	vadd.f32	s2, s2, s10
 801c550:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801c554:	ed8d 6a0f 	vstr	s12, [sp, #60]	@ 0x3c
 801c558:	eeb0 6a43 	vmov.f32	s12, s6
 801c55c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801c560:	ed8d 6a10 	vstr	s12, [sp, #64]	@ 0x40
 801c564:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801c568:	ee61 7a27 	vmul.f32	s15, s2, s15
 801c56c:	ee77 2a62 	vsub.f32	s5, s14, s5
 801c570:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801c574:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801c578:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801c57c:	ee12 2a90 	vmov	r2, s5
 801c580:	eef0 2a47 	vmov.f32	s5, s14
 801c584:	fb92 fef3 	sdiv	lr, r2, r3
 801c588:	ee13 2a10 	vmov	r2, s6
 801c58c:	eeb0 3a67 	vmov.f32	s6, s15
 801c590:	fb92 f3f3 	sdiv	r3, r2, r3
 801c594:	9a02      	ldr	r2, [sp, #8]
 801c596:	9312      	str	r3, [sp, #72]	@ 0x48
 801c598:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801c59a:	bf08      	it	eq
 801c59c:	4613      	moveq	r3, r2
 801c59e:	e731      	b.n	801c404 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801c5a0:	1427      	asrs	r7, r4, #16
 801c5a2:	d456      	bmi.n	801c652 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 801c5a4:	f8dc 6008 	ldr.w	r6, [ip, #8]
 801c5a8:	42be      	cmp	r6, r7
 801c5aa:	dd52      	ble.n	801c652 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 801c5ac:	ea5f 4920 	movs.w	r9, r0, asr #16
 801c5b0:	d44f      	bmi.n	801c652 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 801c5b2:	f8dc 200c 	ldr.w	r2, [ip, #12]
 801c5b6:	454a      	cmp	r2, r9
 801c5b8:	dd4b      	ble.n	801c652 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 801c5ba:	9a00      	ldr	r2, [sp, #0]
 801c5bc:	b236      	sxth	r6, r6
 801c5be:	fb09 2606 	mla	r6, r9, r6, r2
 801c5c2:	5df2      	ldrb	r2, [r6, r7]
 801c5c4:	9e01      	ldr	r6, [sp, #4]
 801c5c6:	f856 7022 	ldr.w	r7, [r6, r2, lsl #2]
 801c5ca:	0e3a      	lsrs	r2, r7, #24
 801c5cc:	d041      	beq.n	801c652 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 801c5ce:	9e03      	ldr	r6, [sp, #12]
 801c5d0:	fa5f fb87 	uxtb.w	fp, r7
 801c5d4:	4372      	muls	r2, r6
 801c5d6:	1c56      	adds	r6, r2, #1
 801c5d8:	eb06 2222 	add.w	r2, r6, r2, asr #8
 801c5dc:	eb08 0648 	add.w	r6, r8, r8, lsl #1
 801c5e0:	1212      	asrs	r2, r2, #8
 801c5e2:	f815 9006 	ldrb.w	r9, [r5, r6]
 801c5e6:	fa1f fa82 	uxth.w	sl, r2
 801c5ea:	43d2      	mvns	r2, r2
 801c5ec:	fb1b fb0a 	smulbb	fp, fp, sl
 801c5f0:	b2d2      	uxtb	r2, r2
 801c5f2:	fb09 b902 	mla	r9, r9, r2, fp
 801c5f6:	fa1f f989 	uxth.w	r9, r9
 801c5fa:	f109 0b01 	add.w	fp, r9, #1
 801c5fe:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801c602:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 801c606:	f3c7 4707 	ubfx	r7, r7, #16, #8
 801c60a:	fb1b fb0a 	smulbb	fp, fp, sl
 801c60e:	ea4f 2929 	mov.w	r9, r9, asr #8
 801c612:	fb17 fa0a 	smulbb	sl, r7, sl
 801c616:	f805 9006 	strb.w	r9, [r5, r6]
 801c61a:	442e      	add	r6, r5
 801c61c:	78b7      	ldrb	r7, [r6, #2]
 801c61e:	f896 9001 	ldrb.w	r9, [r6, #1]
 801c622:	fb07 aa02 	mla	sl, r7, r2, sl
 801c626:	fb09 b902 	mla	r9, r9, r2, fp
 801c62a:	fa1f fa8a 	uxth.w	sl, sl
 801c62e:	fa1f f989 	uxth.w	r9, r9
 801c632:	f10a 0701 	add.w	r7, sl, #1
 801c636:	f109 0b01 	add.w	fp, r9, #1
 801c63a:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801c63e:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801c642:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801c646:	ea4f 2929 	mov.w	r9, r9, asr #8
 801c64a:	f886 a002 	strb.w	sl, [r6, #2]
 801c64e:	f886 9001 	strb.w	r9, [r6, #1]
 801c652:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801c654:	4474      	add	r4, lr
 801c656:	f108 0801 	add.w	r8, r8, #1
 801c65a:	4410      	add	r0, r2
 801c65c:	e760      	b.n	801c520 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x158>
 801c65e:	b005      	add	sp, #20
 801c660:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801c664 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801c664:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c668:	b085      	sub	sp, #20
 801c66a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801c66e:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 801c670:	9203      	str	r2, [sp, #12]
 801c672:	6868      	ldr	r0, [r5, #4]
 801c674:	f8dd c058 	ldr.w	ip, [sp, #88]	@ 0x58
 801c678:	f8dd e044 	ldr.w	lr, [sp, #68]	@ 0x44
 801c67c:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	@ 0x50
 801c680:	fb00 2404 	mla	r4, r0, r4, r2
 801c684:	682a      	ldr	r2, [r5, #0]
 801c686:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801c68a:	4414      	add	r4, r2
 801c68c:	f8dc 2000 	ldr.w	r2, [ip]
 801c690:	9201      	str	r2, [sp, #4]
 801c692:	f8dc 2004 	ldr.w	r2, [ip, #4]
 801c696:	3204      	adds	r2, #4
 801c698:	9202      	str	r2, [sp, #8]
 801c69a:	2900      	cmp	r1, #0
 801c69c:	dc03      	bgt.n	801c6a6 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42>
 801c69e:	9a03      	ldr	r2, [sp, #12]
 801c6a0:	2a00      	cmp	r2, #0
 801c6a2:	f340 8137 	ble.w	801c914 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 801c6a6:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801c6a8:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 801c6ac:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 801c6b0:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801c6b2:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 801c6b6:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 801c6ba:	2b00      	cmp	r3, #0
 801c6bc:	dd0d      	ble.n	801c6da <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801c6be:	1405      	asrs	r5, r0, #16
 801c6c0:	d405      	bmi.n	801c6ce <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801c6c2:	4545      	cmp	r5, r8
 801c6c4:	da03      	bge.n	801c6ce <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801c6c6:	1415      	asrs	r5, r2, #16
 801c6c8:	d401      	bmi.n	801c6ce <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801c6ca:	42bd      	cmp	r5, r7
 801c6cc:	db06      	blt.n	801c6dc <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801c6ce:	9d12      	ldr	r5, [sp, #72]	@ 0x48
 801c6d0:	4470      	add	r0, lr
 801c6d2:	3b01      	subs	r3, #1
 801c6d4:	3403      	adds	r4, #3
 801c6d6:	442a      	add	r2, r5
 801c6d8:	e7ef      	b.n	801c6ba <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56>
 801c6da:	d070      	beq.n	801c7be <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15a>
 801c6dc:	1e5d      	subs	r5, r3, #1
 801c6de:	fb0e 0605 	mla	r6, lr, r5, r0
 801c6e2:	1436      	asrs	r6, r6, #16
 801c6e4:	d462      	bmi.n	801c7ac <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 801c6e6:	4546      	cmp	r6, r8
 801c6e8:	da60      	bge.n	801c7ac <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 801c6ea:	9e12      	ldr	r6, [sp, #72]	@ 0x48
 801c6ec:	fb06 2505 	mla	r5, r6, r5, r2
 801c6f0:	142d      	asrs	r5, r5, #16
 801c6f2:	d45b      	bmi.n	801c7ac <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 801c6f4:	42bd      	cmp	r5, r7
 801c6f6:	da59      	bge.n	801c7ac <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 801c6f8:	1ce5      	adds	r5, r4, #3
 801c6fa:	469a      	mov	sl, r3
 801c6fc:	f1ba 0f00 	cmp.w	sl, #0
 801c700:	dd58      	ble.n	801c7b4 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x150>
 801c702:	1416      	asrs	r6, r2, #16
 801c704:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 801c708:	1407      	asrs	r7, r0, #16
 801c70a:	46b1      	mov	r9, r6
 801c70c:	9e01      	ldr	r6, [sp, #4]
 801c70e:	fb08 6609 	mla	r6, r8, r9, r6
 801c712:	5df6      	ldrb	r6, [r6, r7]
 801c714:	9f02      	ldr	r7, [sp, #8]
 801c716:	f857 6026 	ldr.w	r6, [r7, r6, lsl #2]
 801c71a:	0e37      	lsrs	r7, r6, #24
 801c71c:	2fff      	cmp	r7, #255	@ 0xff
 801c71e:	f000 80f0 	beq.w	801c902 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29e>
 801c722:	fa5f f887 	uxtb.w	r8, r7
 801c726:	b3d7      	cbz	r7, 801c79e <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 801c728:	fa1f f788 	uxth.w	r7, r8
 801c72c:	ea6f 0808 	mvn.w	r8, r8
 801c730:	fa5f fb86 	uxtb.w	fp, r6
 801c734:	f815 9c03 	ldrb.w	r9, [r5, #-3]
 801c738:	fa5f f888 	uxtb.w	r8, r8
 801c73c:	fb1b fb07 	smulbb	fp, fp, r7
 801c740:	fb09 b908 	mla	r9, r9, r8, fp
 801c744:	fa1f f989 	uxth.w	r9, r9
 801c748:	f109 0b01 	add.w	fp, r9, #1
 801c74c:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801c750:	f815 bc02 	ldrb.w	fp, [r5, #-2]
 801c754:	fb1b fb08 	smulbb	fp, fp, r8
 801c758:	ea4f 2929 	mov.w	r9, r9, asr #8
 801c75c:	f805 9c03 	strb.w	r9, [r5, #-3]
 801c760:	f3c6 2907 	ubfx	r9, r6, #8, #8
 801c764:	f3c6 4607 	ubfx	r6, r6, #16, #8
 801c768:	fb09 b907 	mla	r9, r9, r7, fp
 801c76c:	fa1f f989 	uxth.w	r9, r9
 801c770:	f109 0b01 	add.w	fp, r9, #1
 801c774:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801c778:	ea4f 2929 	mov.w	r9, r9, asr #8
 801c77c:	f805 9c02 	strb.w	r9, [r5, #-2]
 801c780:	f815 9c01 	ldrb.w	r9, [r5, #-1]
 801c784:	fb19 f808 	smulbb	r8, r9, r8
 801c788:	fb06 8607 	mla	r6, r6, r7, r8
 801c78c:	b2b6      	uxth	r6, r6
 801c78e:	f106 0801 	add.w	r8, r6, #1
 801c792:	eb08 2816 	add.w	r8, r8, r6, lsr #8
 801c796:	ea4f 2828 	mov.w	r8, r8, asr #8
 801c79a:	f805 8c01 	strb.w	r8, [r5, #-1]
 801c79e:	9e12      	ldr	r6, [sp, #72]	@ 0x48
 801c7a0:	4470      	add	r0, lr
 801c7a2:	3503      	adds	r5, #3
 801c7a4:	f10a 3aff 	add.w	sl, sl, #4294967295
 801c7a8:	4432      	add	r2, r6
 801c7aa:	e7a7      	b.n	801c6fc <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801c7ac:	2600      	movs	r6, #0
 801c7ae:	1b9d      	subs	r5, r3, r6
 801c7b0:	2d00      	cmp	r5, #0
 801c7b2:	dc3b      	bgt.n	801c82c <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 801c7b4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801c7b8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801c7bc:	441c      	add	r4, r3
 801c7be:	2900      	cmp	r1, #0
 801c7c0:	f340 80a8 	ble.w	801c914 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 801c7c4:	ee30 0a04 	vadd.f32	s0, s0, s8
 801c7c8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801c7ca:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801c7ce:	3901      	subs	r1, #1
 801c7d0:	eeb0 6a62 	vmov.f32	s12, s5
 801c7d4:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801c7d8:	ee31 1a05 	vadd.f32	s2, s2, s10
 801c7dc:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801c7e0:	ed8d 6a0f 	vstr	s12, [sp, #60]	@ 0x3c
 801c7e4:	eeb0 6a43 	vmov.f32	s12, s6
 801c7e8:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801c7ec:	ed8d 6a10 	vstr	s12, [sp, #64]	@ 0x40
 801c7f0:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801c7f4:	ee61 7a27 	vmul.f32	s15, s2, s15
 801c7f8:	ee77 2a62 	vsub.f32	s5, s14, s5
 801c7fc:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801c800:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801c804:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801c808:	ee12 2a90 	vmov	r2, s5
 801c80c:	eef0 2a47 	vmov.f32	s5, s14
 801c810:	fb92 fef3 	sdiv	lr, r2, r3
 801c814:	ee13 2a10 	vmov	r2, s6
 801c818:	eeb0 3a67 	vmov.f32	s6, s15
 801c81c:	fb92 f3f3 	sdiv	r3, r2, r3
 801c820:	9a03      	ldr	r2, [sp, #12]
 801c822:	9312      	str	r3, [sp, #72]	@ 0x48
 801c824:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801c826:	bf08      	it	eq
 801c828:	4613      	moveq	r3, r2
 801c82a:	e736      	b.n	801c69a <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36>
 801c82c:	ea5f 4820 	movs.w	r8, r0, asr #16
 801c830:	d457      	bmi.n	801c8e2 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 801c832:	f8dc 7008 	ldr.w	r7, [ip, #8]
 801c836:	4547      	cmp	r7, r8
 801c838:	dd53      	ble.n	801c8e2 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 801c83a:	ea5f 4922 	movs.w	r9, r2, asr #16
 801c83e:	d450      	bmi.n	801c8e2 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 801c840:	f8dc 500c 	ldr.w	r5, [ip, #12]
 801c844:	454d      	cmp	r5, r9
 801c846:	dd4c      	ble.n	801c8e2 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 801c848:	9d01      	ldr	r5, [sp, #4]
 801c84a:	b23f      	sxth	r7, r7
 801c84c:	fb09 5707 	mla	r7, r9, r7, r5
 801c850:	f817 5008 	ldrb.w	r5, [r7, r8]
 801c854:	9f02      	ldr	r7, [sp, #8]
 801c856:	f857 5025 	ldr.w	r5, [r7, r5, lsl #2]
 801c85a:	0e2f      	lsrs	r7, r5, #24
 801c85c:	2fff      	cmp	r7, #255	@ 0xff
 801c85e:	d045      	beq.n	801c8ec <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x288>
 801c860:	fa5f f987 	uxtb.w	r9, r7
 801c864:	b3ef      	cbz	r7, 801c8e2 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 801c866:	fa1f f889 	uxth.w	r8, r9
 801c86a:	ea6f 0909 	mvn.w	r9, r9
 801c86e:	eb06 0746 	add.w	r7, r6, r6, lsl #1
 801c872:	fa5f fb85 	uxtb.w	fp, r5
 801c876:	f814 a007 	ldrb.w	sl, [r4, r7]
 801c87a:	fa5f f989 	uxtb.w	r9, r9
 801c87e:	fb1b fb08 	smulbb	fp, fp, r8
 801c882:	fb0a ba09 	mla	sl, sl, r9, fp
 801c886:	fa1f fa8a 	uxth.w	sl, sl
 801c88a:	f10a 0b01 	add.w	fp, sl, #1
 801c88e:	eb0b 2a1a 	add.w	sl, fp, sl, lsr #8
 801c892:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801c896:	f804 a007 	strb.w	sl, [r4, r7]
 801c89a:	4427      	add	r7, r4
 801c89c:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 801c8a0:	f3c5 4507 	ubfx	r5, r5, #16, #8
 801c8a4:	f897 b001 	ldrb.w	fp, [r7, #1]
 801c8a8:	fb1b fb09 	smulbb	fp, fp, r9
 801c8ac:	fb0a ba08 	mla	sl, sl, r8, fp
 801c8b0:	fa1f fa8a 	uxth.w	sl, sl
 801c8b4:	f10a 0b01 	add.w	fp, sl, #1
 801c8b8:	eb0b 2a1a 	add.w	sl, fp, sl, lsr #8
 801c8bc:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801c8c0:	f887 a001 	strb.w	sl, [r7, #1]
 801c8c4:	f897 a002 	ldrb.w	sl, [r7, #2]
 801c8c8:	fb1a f909 	smulbb	r9, sl, r9
 801c8cc:	fb05 9508 	mla	r5, r5, r8, r9
 801c8d0:	b2ad      	uxth	r5, r5
 801c8d2:	f105 0901 	add.w	r9, r5, #1
 801c8d6:	eb09 2915 	add.w	r9, r9, r5, lsr #8
 801c8da:	ea4f 2929 	mov.w	r9, r9, asr #8
 801c8de:	f887 9002 	strb.w	r9, [r7, #2]
 801c8e2:	9d12      	ldr	r5, [sp, #72]	@ 0x48
 801c8e4:	4470      	add	r0, lr
 801c8e6:	3601      	adds	r6, #1
 801c8e8:	442a      	add	r2, r5
 801c8ea:	e760      	b.n	801c7ae <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 801c8ec:	eb06 0746 	add.w	r7, r6, r6, lsl #1
 801c8f0:	ea4f 2815 	mov.w	r8, r5, lsr #8
 801c8f4:	55e5      	strb	r5, [r4, r7]
 801c8f6:	4427      	add	r7, r4
 801c8f8:	0c2d      	lsrs	r5, r5, #16
 801c8fa:	f887 8001 	strb.w	r8, [r7, #1]
 801c8fe:	70bd      	strb	r5, [r7, #2]
 801c900:	e7ef      	b.n	801c8e2 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 801c902:	0a37      	lsrs	r7, r6, #8
 801c904:	f805 6c03 	strb.w	r6, [r5, #-3]
 801c908:	0c36      	lsrs	r6, r6, #16
 801c90a:	f805 7c02 	strb.w	r7, [r5, #-2]
 801c90e:	f805 6c01 	strb.w	r6, [r5, #-1]
 801c912:	e744      	b.n	801c79e <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 801c914:	b005      	add	sp, #20
 801c916:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801c91a <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801c91a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c91e:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 801c920:	9201      	str	r2, [sp, #4]
 801c922:	6870      	ldr	r0, [r6, #4]
 801c924:	f89d 5054 	ldrb.w	r5, [sp, #84]	@ 0x54
 801c928:	f8dd c050 	ldr.w	ip, [sp, #80]	@ 0x50
 801c92c:	fa1f fe85 	uxth.w	lr, r5
 801c930:	43ed      	mvns	r5, r5
 801c932:	f8dc 8000 	ldr.w	r8, [ip]
 801c936:	b2ed      	uxtb	r5, r5
 801c938:	e9dd 2412 	ldrd	r2, r4, [sp, #72]	@ 0x48
 801c93c:	fb00 2404 	mla	r4, r0, r4, r2
 801c940:	6832      	ldr	r2, [r6, #0]
 801c942:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801c946:	4414      	add	r4, r2
 801c948:	2900      	cmp	r1, #0
 801c94a:	dc03      	bgt.n	801c954 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 801c94c:	9a01      	ldr	r2, [sp, #4]
 801c94e:	2a00      	cmp	r2, #0
 801c950:	f340 810d 	ble.w	801cb6e <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x254>
 801c954:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801c956:	f9bc a008 	ldrsh.w	sl, [ip, #8]
 801c95a:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 801c95e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801c960:	f9bc 900c 	ldrsh.w	r9, [ip, #12]
 801c964:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 801c968:	2b00      	cmp	r3, #0
 801c96a:	dd0e      	ble.n	801c98a <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801c96c:	1406      	asrs	r6, r0, #16
 801c96e:	d405      	bmi.n	801c97c <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 801c970:	4556      	cmp	r6, sl
 801c972:	da03      	bge.n	801c97c <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 801c974:	1416      	asrs	r6, r2, #16
 801c976:	d401      	bmi.n	801c97c <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 801c978:	454e      	cmp	r6, r9
 801c97a:	db07      	blt.n	801c98c <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801c97c:	9e0f      	ldr	r6, [sp, #60]	@ 0x3c
 801c97e:	3b01      	subs	r3, #1
 801c980:	3403      	adds	r4, #3
 801c982:	4430      	add	r0, r6
 801c984:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 801c986:	4432      	add	r2, r6
 801c988:	e7ee      	b.n	801c968 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e>
 801c98a:	d060      	beq.n	801ca4e <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x134>
 801c98c:	1e5e      	subs	r6, r3, #1
 801c98e:	9f0f      	ldr	r7, [sp, #60]	@ 0x3c
 801c990:	fb07 0706 	mla	r7, r7, r6, r0
 801c994:	143f      	asrs	r7, r7, #16
 801c996:	d451      	bmi.n	801ca3c <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 801c998:	4557      	cmp	r7, sl
 801c99a:	da4f      	bge.n	801ca3c <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 801c99c:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 801c99e:	fb07 2606 	mla	r6, r7, r6, r2
 801c9a2:	1436      	asrs	r6, r6, #16
 801c9a4:	d44a      	bmi.n	801ca3c <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 801c9a6:	454e      	cmp	r6, r9
 801c9a8:	da48      	bge.n	801ca3c <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 801c9aa:	1ce6      	adds	r6, r4, #3
 801c9ac:	4699      	mov	r9, r3
 801c9ae:	f1b9 0f00 	cmp.w	r9, #0
 801c9b2:	f106 0603 	add.w	r6, r6, #3
 801c9b6:	dd45      	ble.n	801ca44 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x12a>
 801c9b8:	f9bc b008 	ldrsh.w	fp, [ip, #8]
 801c9bc:	ea4f 4a20 	mov.w	sl, r0, asr #16
 801c9c0:	1417      	asrs	r7, r2, #16
 801c9c2:	f109 39ff 	add.w	r9, r9, #4294967295
 801c9c6:	fb0b a707 	mla	r7, fp, r7, sl
 801c9ca:	f816 bc06 	ldrb.w	fp, [r6, #-6]
 801c9ce:	fb1b fb05 	smulbb	fp, fp, r5
 801c9d2:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801c9d6:	eb08 0a07 	add.w	sl, r8, r7
 801c9da:	f818 7007 	ldrb.w	r7, [r8, r7]
 801c9de:	fb07 b70e 	mla	r7, r7, lr, fp
 801c9e2:	b2bf      	uxth	r7, r7
 801c9e4:	f107 0b01 	add.w	fp, r7, #1
 801c9e8:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 801c9ec:	f816 bc05 	ldrb.w	fp, [r6, #-5]
 801c9f0:	fb1b fb05 	smulbb	fp, fp, r5
 801c9f4:	123f      	asrs	r7, r7, #8
 801c9f6:	f806 7c06 	strb.w	r7, [r6, #-6]
 801c9fa:	f89a 7001 	ldrb.w	r7, [sl, #1]
 801c9fe:	fb07 b70e 	mla	r7, r7, lr, fp
 801ca02:	b2bf      	uxth	r7, r7
 801ca04:	f107 0b01 	add.w	fp, r7, #1
 801ca08:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 801ca0c:	123f      	asrs	r7, r7, #8
 801ca0e:	f806 7c05 	strb.w	r7, [r6, #-5]
 801ca12:	f89a 7002 	ldrb.w	r7, [sl, #2]
 801ca16:	f816 ac04 	ldrb.w	sl, [r6, #-4]
 801ca1a:	fb1a fa05 	smulbb	sl, sl, r5
 801ca1e:	fb07 a70e 	mla	r7, r7, lr, sl
 801ca22:	b2bf      	uxth	r7, r7
 801ca24:	f107 0a01 	add.w	sl, r7, #1
 801ca28:	eb0a 2717 	add.w	r7, sl, r7, lsr #8
 801ca2c:	123f      	asrs	r7, r7, #8
 801ca2e:	f806 7c04 	strb.w	r7, [r6, #-4]
 801ca32:	9f0f      	ldr	r7, [sp, #60]	@ 0x3c
 801ca34:	4438      	add	r0, r7
 801ca36:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 801ca38:	443a      	add	r2, r7
 801ca3a:	e7b8      	b.n	801c9ae <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801ca3c:	2700      	movs	r7, #0
 801ca3e:	1bde      	subs	r6, r3, r7
 801ca40:	2e00      	cmp	r6, #0
 801ca42:	dc3f      	bgt.n	801cac4 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1aa>
 801ca44:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801ca48:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801ca4c:	441c      	add	r4, r3
 801ca4e:	2900      	cmp	r1, #0
 801ca50:	f340 808d 	ble.w	801cb6e <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x254>
 801ca54:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801ca58:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801ca5a:	ee30 0a04 	vadd.f32	s0, s0, s8
 801ca5e:	3901      	subs	r1, #1
 801ca60:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801ca64:	eef0 6a62 	vmov.f32	s13, s5
 801ca68:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801ca6c:	ee31 1a05 	vadd.f32	s2, s2, s10
 801ca70:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801ca74:	edcd 6a0d 	vstr	s13, [sp, #52]	@ 0x34
 801ca78:	eef0 6a43 	vmov.f32	s13, s6
 801ca7c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801ca80:	edcd 6a0e 	vstr	s13, [sp, #56]	@ 0x38
 801ca84:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801ca88:	ee61 7a27 	vmul.f32	s15, s2, s15
 801ca8c:	ee77 2a62 	vsub.f32	s5, s14, s5
 801ca90:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801ca94:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801ca98:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801ca9c:	ee12 2a90 	vmov	r2, s5
 801caa0:	eef0 2a47 	vmov.f32	s5, s14
 801caa4:	fb92 f3f3 	sdiv	r3, r2, r3
 801caa8:	ee13 2a10 	vmov	r2, s6
 801caac:	930f      	str	r3, [sp, #60]	@ 0x3c
 801caae:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801cab0:	eeb0 3a67 	vmov.f32	s6, s15
 801cab4:	fb92 f3f3 	sdiv	r3, r2, r3
 801cab8:	9a01      	ldr	r2, [sp, #4]
 801caba:	9310      	str	r3, [sp, #64]	@ 0x40
 801cabc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801cabe:	bf08      	it	eq
 801cac0:	4613      	moveq	r3, r2
 801cac2:	e741      	b.n	801c948 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 801cac4:	ea5f 4920 	movs.w	r9, r0, asr #16
 801cac8:	d44b      	bmi.n	801cb62 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 801caca:	f8dc b008 	ldr.w	fp, [ip, #8]
 801cace:	45cb      	cmp	fp, r9
 801cad0:	dd47      	ble.n	801cb62 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 801cad2:	ea5f 4a22 	movs.w	sl, r2, asr #16
 801cad6:	d444      	bmi.n	801cb62 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 801cad8:	f8dc 600c 	ldr.w	r6, [ip, #12]
 801cadc:	4556      	cmp	r6, sl
 801cade:	dd40      	ble.n	801cb62 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 801cae0:	fa0f f68b 	sxth.w	r6, fp
 801cae4:	fb0a 9906 	mla	r9, sl, r6, r9
 801cae8:	eb07 0647 	add.w	r6, r7, r7, lsl #1
 801caec:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 801caf0:	f814 b006 	ldrb.w	fp, [r4, r6]
 801caf4:	fb1b fb05 	smulbb	fp, fp, r5
 801caf8:	eb08 0a09 	add.w	sl, r8, r9
 801cafc:	f818 9009 	ldrb.w	r9, [r8, r9]
 801cb00:	fb09 b90e 	mla	r9, r9, lr, fp
 801cb04:	fa1f f989 	uxth.w	r9, r9
 801cb08:	f109 0b01 	add.w	fp, r9, #1
 801cb0c:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801cb10:	ea4f 2929 	mov.w	r9, r9, asr #8
 801cb14:	f804 9006 	strb.w	r9, [r4, r6]
 801cb18:	4426      	add	r6, r4
 801cb1a:	f89a 9001 	ldrb.w	r9, [sl, #1]
 801cb1e:	f896 b001 	ldrb.w	fp, [r6, #1]
 801cb22:	fb1b fb05 	smulbb	fp, fp, r5
 801cb26:	fb09 b90e 	mla	r9, r9, lr, fp
 801cb2a:	fa1f f989 	uxth.w	r9, r9
 801cb2e:	f109 0b01 	add.w	fp, r9, #1
 801cb32:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801cb36:	ea4f 2929 	mov.w	r9, r9, asr #8
 801cb3a:	f886 9001 	strb.w	r9, [r6, #1]
 801cb3e:	f89a 9002 	ldrb.w	r9, [sl, #2]
 801cb42:	f896 a002 	ldrb.w	sl, [r6, #2]
 801cb46:	fb1a fa05 	smulbb	sl, sl, r5
 801cb4a:	fb09 a90e 	mla	r9, r9, lr, sl
 801cb4e:	fa1f f989 	uxth.w	r9, r9
 801cb52:	f109 0a01 	add.w	sl, r9, #1
 801cb56:	eb0a 2919 	add.w	r9, sl, r9, lsr #8
 801cb5a:	ea4f 2929 	mov.w	r9, r9, asr #8
 801cb5e:	f886 9002 	strb.w	r9, [r6, #2]
 801cb62:	9e0f      	ldr	r6, [sp, #60]	@ 0x3c
 801cb64:	3701      	adds	r7, #1
 801cb66:	4430      	add	r0, r6
 801cb68:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 801cb6a:	4432      	add	r2, r6
 801cb6c:	e767      	b.n	801ca3e <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x124>
 801cb6e:	b003      	add	sp, #12
 801cb70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801cb74 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801cb74:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cb78:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 801cb7a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801cb7e:	9201      	str	r2, [sp, #4]
 801cb80:	6868      	ldr	r0, [r5, #4]
 801cb82:	9f14      	ldr	r7, [sp, #80]	@ 0x50
 801cb84:	e9dd 2412 	ldrd	r2, r4, [sp, #72]	@ 0x48
 801cb88:	e9dd ec0f 	ldrd	lr, ip, [sp, #60]	@ 0x3c
 801cb8c:	fb00 2404 	mla	r4, r0, r4, r2
 801cb90:	682a      	ldr	r2, [r5, #0]
 801cb92:	f8d7 8000 	ldr.w	r8, [r7]
 801cb96:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801cb9a:	4414      	add	r4, r2
 801cb9c:	2900      	cmp	r1, #0
 801cb9e:	dc03      	bgt.n	801cba8 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 801cba0:	9a01      	ldr	r2, [sp, #4]
 801cba2:	2a00      	cmp	r2, #0
 801cba4:	f340 80af 	ble.w	801cd06 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x192>
 801cba8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801cbaa:	f9b7 a008 	ldrsh.w	sl, [r7, #8]
 801cbae:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 801cbb2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801cbb4:	f9b7 900c 	ldrsh.w	r9, [r7, #12]
 801cbb8:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 801cbbc:	2b00      	cmp	r3, #0
 801cbbe:	dd0c      	ble.n	801cbda <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801cbc0:	1405      	asrs	r5, r0, #16
 801cbc2:	d405      	bmi.n	801cbd0 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801cbc4:	4555      	cmp	r5, sl
 801cbc6:	da03      	bge.n	801cbd0 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801cbc8:	1415      	asrs	r5, r2, #16
 801cbca:	d401      	bmi.n	801cbd0 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801cbcc:	454d      	cmp	r5, r9
 801cbce:	db05      	blt.n	801cbdc <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801cbd0:	4470      	add	r0, lr
 801cbd2:	4462      	add	r2, ip
 801cbd4:	3b01      	subs	r3, #1
 801cbd6:	3403      	adds	r4, #3
 801cbd8:	e7f0      	b.n	801cbbc <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 801cbda:	d038      	beq.n	801cc4e <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 801cbdc:	1e5d      	subs	r5, r3, #1
 801cbde:	fb0e 0605 	mla	r6, lr, r5, r0
 801cbe2:	1436      	asrs	r6, r6, #16
 801cbe4:	d42a      	bmi.n	801cc3c <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 801cbe6:	4556      	cmp	r6, sl
 801cbe8:	da28      	bge.n	801cc3c <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 801cbea:	fb0c 2505 	mla	r5, ip, r5, r2
 801cbee:	142d      	asrs	r5, r5, #16
 801cbf0:	d424      	bmi.n	801cc3c <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 801cbf2:	454d      	cmp	r5, r9
 801cbf4:	da22      	bge.n	801cc3c <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 801cbf6:	1ce6      	adds	r6, r4, #3
 801cbf8:	4699      	mov	r9, r3
 801cbfa:	f1b9 0f00 	cmp.w	r9, #0
 801cbfe:	f106 0603 	add.w	r6, r6, #3
 801cc02:	dd1f      	ble.n	801cc44 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xd0>
 801cc04:	f9b7 b008 	ldrsh.w	fp, [r7, #8]
 801cc08:	ea4f 4a20 	mov.w	sl, r0, asr #16
 801cc0c:	1415      	asrs	r5, r2, #16
 801cc0e:	4470      	add	r0, lr
 801cc10:	4462      	add	r2, ip
 801cc12:	f109 39ff 	add.w	r9, r9, #4294967295
 801cc16:	fb0b a505 	mla	r5, fp, r5, sl
 801cc1a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801cc1e:	eb08 0a05 	add.w	sl, r8, r5
 801cc22:	f818 5005 	ldrb.w	r5, [r8, r5]
 801cc26:	f806 5c06 	strb.w	r5, [r6, #-6]
 801cc2a:	f89a 5001 	ldrb.w	r5, [sl, #1]
 801cc2e:	f806 5c05 	strb.w	r5, [r6, #-5]
 801cc32:	f89a 5002 	ldrb.w	r5, [sl, #2]
 801cc36:	f806 5c04 	strb.w	r5, [r6, #-4]
 801cc3a:	e7de      	b.n	801cbfa <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 801cc3c:	2600      	movs	r6, #0
 801cc3e:	1b9d      	subs	r5, r3, r6
 801cc40:	2d00      	cmp	r5, #0
 801cc42:	dc38      	bgt.n	801ccb6 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 801cc44:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801cc48:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801cc4c:	441c      	add	r4, r3
 801cc4e:	2900      	cmp	r1, #0
 801cc50:	dd59      	ble.n	801cd06 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x192>
 801cc52:	ee30 0a04 	vadd.f32	s0, s0, s8
 801cc56:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801cc58:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801cc5c:	3901      	subs	r1, #1
 801cc5e:	eeb0 6a62 	vmov.f32	s12, s5
 801cc62:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801cc66:	ee31 1a05 	vadd.f32	s2, s2, s10
 801cc6a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801cc6e:	ed8d 6a0d 	vstr	s12, [sp, #52]	@ 0x34
 801cc72:	eeb0 6a43 	vmov.f32	s12, s6
 801cc76:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801cc7a:	ed8d 6a0e 	vstr	s12, [sp, #56]	@ 0x38
 801cc7e:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801cc82:	ee61 7a27 	vmul.f32	s15, s2, s15
 801cc86:	ee77 2a62 	vsub.f32	s5, s14, s5
 801cc8a:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801cc8e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801cc92:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801cc96:	ee12 2a90 	vmov	r2, s5
 801cc9a:	eef0 2a47 	vmov.f32	s5, s14
 801cc9e:	fb92 fef3 	sdiv	lr, r2, r3
 801cca2:	ee13 2a10 	vmov	r2, s6
 801cca6:	eeb0 3a67 	vmov.f32	s6, s15
 801ccaa:	fb92 fcf3 	sdiv	ip, r2, r3
 801ccae:	9a01      	ldr	r2, [sp, #4]
 801ccb0:	bf08      	it	eq
 801ccb2:	4613      	moveq	r3, r2
 801ccb4:	e772      	b.n	801cb9c <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28>
 801ccb6:	ea5f 4920 	movs.w	r9, r0, asr #16
 801ccba:	d420      	bmi.n	801ccfe <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 801ccbc:	f8d7 b008 	ldr.w	fp, [r7, #8]
 801ccc0:	45cb      	cmp	fp, r9
 801ccc2:	dd1c      	ble.n	801ccfe <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 801ccc4:	ea5f 4a22 	movs.w	sl, r2, asr #16
 801ccc8:	d419      	bmi.n	801ccfe <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 801ccca:	68fd      	ldr	r5, [r7, #12]
 801cccc:	4555      	cmp	r5, sl
 801ccce:	dd16      	ble.n	801ccfe <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 801ccd0:	fa0f f58b 	sxth.w	r5, fp
 801ccd4:	fb0a 9505 	mla	r5, sl, r5, r9
 801ccd8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801ccdc:	f818 9005 	ldrb.w	r9, [r8, r5]
 801cce0:	eb08 0b05 	add.w	fp, r8, r5
 801cce4:	eb06 0546 	add.w	r5, r6, r6, lsl #1
 801cce8:	f804 9005 	strb.w	r9, [r4, r5]
 801ccec:	4425      	add	r5, r4
 801ccee:	f89b 9001 	ldrb.w	r9, [fp, #1]
 801ccf2:	f885 9001 	strb.w	r9, [r5, #1]
 801ccf6:	f89b 9002 	ldrb.w	r9, [fp, #2]
 801ccfa:	f885 9002 	strb.w	r9, [r5, #2]
 801ccfe:	4470      	add	r0, lr
 801cd00:	4462      	add	r2, ip
 801cd02:	3601      	adds	r6, #1
 801cd04:	e79b      	b.n	801cc3e <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xca>
 801cd06:	b003      	add	sp, #12
 801cd08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801cd0c <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801cd0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cd10:	b085      	sub	sp, #20
 801cd12:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801cd16:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801cd18:	9202      	str	r2, [sp, #8]
 801cd1a:	f89d 205c 	ldrb.w	r2, [sp, #92]	@ 0x5c
 801cd1e:	6860      	ldr	r0, [r4, #4]
 801cd20:	9203      	str	r2, [sp, #12]
 801cd22:	f8dd c058 	ldr.w	ip, [sp, #88]	@ 0x58
 801cd26:	f8dd e044 	ldr.w	lr, [sp, #68]	@ 0x44
 801cd2a:	e9dd 2514 	ldrd	r2, r5, [sp, #80]	@ 0x50
 801cd2e:	fb00 2505 	mla	r5, r0, r5, r2
 801cd32:	6822      	ldr	r2, [r4, #0]
 801cd34:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801cd38:	4415      	add	r5, r2
 801cd3a:	f8dc 2000 	ldr.w	r2, [ip]
 801cd3e:	9201      	str	r2, [sp, #4]
 801cd40:	2900      	cmp	r1, #0
 801cd42:	dc03      	bgt.n	801cd4c <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
 801cd44:	9a02      	ldr	r2, [sp, #8]
 801cd46:	2a00      	cmp	r2, #0
 801cd48:	f340 8122 	ble.w	801cf90 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x284>
 801cd4c:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801cd4e:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 801cd52:	f502 4400 	add.w	r4, r2, #32768	@ 0x8000
 801cd56:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801cd58:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 801cd5c:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 801cd60:	2b00      	cmp	r3, #0
 801cd62:	dd0d      	ble.n	801cd80 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 801cd64:	1422      	asrs	r2, r4, #16
 801cd66:	d405      	bmi.n	801cd74 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801cd68:	4542      	cmp	r2, r8
 801cd6a:	da03      	bge.n	801cd74 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801cd6c:	1402      	asrs	r2, r0, #16
 801cd6e:	d401      	bmi.n	801cd74 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801cd70:	42ba      	cmp	r2, r7
 801cd72:	db06      	blt.n	801cd82 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801cd74:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801cd76:	4474      	add	r4, lr
 801cd78:	3b01      	subs	r3, #1
 801cd7a:	3503      	adds	r5, #3
 801cd7c:	4410      	add	r0, r2
 801cd7e:	e7ef      	b.n	801cd60 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
 801cd80:	d072      	beq.n	801ce68 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15c>
 801cd82:	1e5a      	subs	r2, r3, #1
 801cd84:	fb0e 4602 	mla	r6, lr, r2, r4
 801cd88:	1436      	asrs	r6, r6, #16
 801cd8a:	d462      	bmi.n	801ce52 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 801cd8c:	4546      	cmp	r6, r8
 801cd8e:	da60      	bge.n	801ce52 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 801cd90:	9e12      	ldr	r6, [sp, #72]	@ 0x48
 801cd92:	fb06 0202 	mla	r2, r6, r2, r0
 801cd96:	1412      	asrs	r2, r2, #16
 801cd98:	d45b      	bmi.n	801ce52 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 801cd9a:	42ba      	cmp	r2, r7
 801cd9c:	da59      	bge.n	801ce52 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 801cd9e:	1cef      	adds	r7, r5, #3
 801cda0:	4699      	mov	r9, r3
 801cda2:	f1b9 0f00 	cmp.w	r9, #0
 801cda6:	dd5a      	ble.n	801ce5e <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801cda8:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 801cdac:	1426      	asrs	r6, r4, #16
 801cdae:	1402      	asrs	r2, r0, #16
 801cdb0:	fb08 6202 	mla	r2, r8, r2, r6
 801cdb4:	9e01      	ldr	r6, [sp, #4]
 801cdb6:	f856 6022 	ldr.w	r6, [r6, r2, lsl #2]
 801cdba:	ea5f 6816 	movs.w	r8, r6, lsr #24
 801cdbe:	d041      	beq.n	801ce44 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 801cdc0:	9a03      	ldr	r2, [sp, #12]
 801cdc2:	fa5f fb86 	uxtb.w	fp, r6
 801cdc6:	fb02 f808 	mul.w	r8, r2, r8
 801cdca:	f108 0201 	add.w	r2, r8, #1
 801cdce:	eb02 2228 	add.w	r2, r2, r8, asr #8
 801cdd2:	f817 8c03 	ldrb.w	r8, [r7, #-3]
 801cdd6:	1212      	asrs	r2, r2, #8
 801cdd8:	fa1f fa82 	uxth.w	sl, r2
 801cddc:	43d2      	mvns	r2, r2
 801cdde:	fb1b fb0a 	smulbb	fp, fp, sl
 801cde2:	b2d2      	uxtb	r2, r2
 801cde4:	fb08 b802 	mla	r8, r8, r2, fp
 801cde8:	fa1f f888 	uxth.w	r8, r8
 801cdec:	f108 0b01 	add.w	fp, r8, #1
 801cdf0:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 801cdf4:	f3c6 2b07 	ubfx	fp, r6, #8, #8
 801cdf8:	f3c6 4607 	ubfx	r6, r6, #16, #8
 801cdfc:	fb1b fb0a 	smulbb	fp, fp, sl
 801ce00:	ea4f 2828 	mov.w	r8, r8, asr #8
 801ce04:	fb16 fa0a 	smulbb	sl, r6, sl
 801ce08:	f817 6c01 	ldrb.w	r6, [r7, #-1]
 801ce0c:	f807 8c03 	strb.w	r8, [r7, #-3]
 801ce10:	f817 8c02 	ldrb.w	r8, [r7, #-2]
 801ce14:	fb06 aa02 	mla	sl, r6, r2, sl
 801ce18:	fb08 b802 	mla	r8, r8, r2, fp
 801ce1c:	fa1f fa8a 	uxth.w	sl, sl
 801ce20:	fa1f f888 	uxth.w	r8, r8
 801ce24:	f10a 0601 	add.w	r6, sl, #1
 801ce28:	f108 0b01 	add.w	fp, r8, #1
 801ce2c:	eb06 2a1a 	add.w	sl, r6, sl, lsr #8
 801ce30:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 801ce34:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801ce38:	ea4f 2828 	mov.w	r8, r8, asr #8
 801ce3c:	f807 ac01 	strb.w	sl, [r7, #-1]
 801ce40:	f807 8c02 	strb.w	r8, [r7, #-2]
 801ce44:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801ce46:	4474      	add	r4, lr
 801ce48:	3703      	adds	r7, #3
 801ce4a:	f109 39ff 	add.w	r9, r9, #4294967295
 801ce4e:	4410      	add	r0, r2
 801ce50:	e7a7      	b.n	801cda2 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801ce52:	f04f 0800 	mov.w	r8, #0
 801ce56:	eba3 0208 	sub.w	r2, r3, r8
 801ce5a:	2a00      	cmp	r2, #0
 801ce5c:	dc3b      	bgt.n	801ced6 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ca>
 801ce5e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801ce62:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801ce66:	441d      	add	r5, r3
 801ce68:	2900      	cmp	r1, #0
 801ce6a:	f340 8091 	ble.w	801cf90 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x284>
 801ce6e:	ee30 0a04 	vadd.f32	s0, s0, s8
 801ce72:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801ce74:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801ce78:	3901      	subs	r1, #1
 801ce7a:	eeb0 6a62 	vmov.f32	s12, s5
 801ce7e:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801ce82:	ee31 1a05 	vadd.f32	s2, s2, s10
 801ce86:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801ce8a:	ed8d 6a0f 	vstr	s12, [sp, #60]	@ 0x3c
 801ce8e:	eeb0 6a43 	vmov.f32	s12, s6
 801ce92:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801ce96:	ed8d 6a10 	vstr	s12, [sp, #64]	@ 0x40
 801ce9a:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801ce9e:	ee61 7a27 	vmul.f32	s15, s2, s15
 801cea2:	ee77 2a62 	vsub.f32	s5, s14, s5
 801cea6:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801ceaa:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801ceae:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801ceb2:	ee12 2a90 	vmov	r2, s5
 801ceb6:	eef0 2a47 	vmov.f32	s5, s14
 801ceba:	fb92 fef3 	sdiv	lr, r2, r3
 801cebe:	ee13 2a10 	vmov	r2, s6
 801cec2:	eeb0 3a67 	vmov.f32	s6, s15
 801cec6:	fb92 f3f3 	sdiv	r3, r2, r3
 801ceca:	9a02      	ldr	r2, [sp, #8]
 801cecc:	9312      	str	r3, [sp, #72]	@ 0x48
 801cece:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801ced0:	bf08      	it	eq
 801ced2:	4613      	moveq	r3, r2
 801ced4:	e734      	b.n	801cd40 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 801ced6:	1427      	asrs	r7, r4, #16
 801ced8:	d454      	bmi.n	801cf84 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 801ceda:	f8dc 6008 	ldr.w	r6, [ip, #8]
 801cede:	42be      	cmp	r6, r7
 801cee0:	dd50      	ble.n	801cf84 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 801cee2:	ea5f 4920 	movs.w	r9, r0, asr #16
 801cee6:	d44d      	bmi.n	801cf84 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 801cee8:	f8dc 200c 	ldr.w	r2, [ip, #12]
 801ceec:	454a      	cmp	r2, r9
 801ceee:	dd49      	ble.n	801cf84 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 801cef0:	b236      	sxth	r6, r6
 801cef2:	9a01      	ldr	r2, [sp, #4]
 801cef4:	fb09 7606 	mla	r6, r9, r6, r7
 801cef8:	f852 7026 	ldr.w	r7, [r2, r6, lsl #2]
 801cefc:	0e3a      	lsrs	r2, r7, #24
 801cefe:	d041      	beq.n	801cf84 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 801cf00:	9e03      	ldr	r6, [sp, #12]
 801cf02:	fa5f fb87 	uxtb.w	fp, r7
 801cf06:	4372      	muls	r2, r6
 801cf08:	1c56      	adds	r6, r2, #1
 801cf0a:	eb06 2222 	add.w	r2, r6, r2, asr #8
 801cf0e:	eb08 0648 	add.w	r6, r8, r8, lsl #1
 801cf12:	1212      	asrs	r2, r2, #8
 801cf14:	f815 9006 	ldrb.w	r9, [r5, r6]
 801cf18:	fa1f fa82 	uxth.w	sl, r2
 801cf1c:	43d2      	mvns	r2, r2
 801cf1e:	fb1b fb0a 	smulbb	fp, fp, sl
 801cf22:	b2d2      	uxtb	r2, r2
 801cf24:	fb09 b902 	mla	r9, r9, r2, fp
 801cf28:	fa1f f989 	uxth.w	r9, r9
 801cf2c:	f109 0b01 	add.w	fp, r9, #1
 801cf30:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801cf34:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 801cf38:	f3c7 4707 	ubfx	r7, r7, #16, #8
 801cf3c:	fb1b fb0a 	smulbb	fp, fp, sl
 801cf40:	ea4f 2929 	mov.w	r9, r9, asr #8
 801cf44:	fb17 fa0a 	smulbb	sl, r7, sl
 801cf48:	f805 9006 	strb.w	r9, [r5, r6]
 801cf4c:	442e      	add	r6, r5
 801cf4e:	78b7      	ldrb	r7, [r6, #2]
 801cf50:	f896 9001 	ldrb.w	r9, [r6, #1]
 801cf54:	fb07 aa02 	mla	sl, r7, r2, sl
 801cf58:	fb09 b902 	mla	r9, r9, r2, fp
 801cf5c:	fa1f fa8a 	uxth.w	sl, sl
 801cf60:	fa1f f989 	uxth.w	r9, r9
 801cf64:	f10a 0701 	add.w	r7, sl, #1
 801cf68:	f109 0b01 	add.w	fp, r9, #1
 801cf6c:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801cf70:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801cf74:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801cf78:	ea4f 2929 	mov.w	r9, r9, asr #8
 801cf7c:	f886 a002 	strb.w	sl, [r6, #2]
 801cf80:	f886 9001 	strb.w	r9, [r6, #1]
 801cf84:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801cf86:	4474      	add	r4, lr
 801cf88:	f108 0801 	add.w	r8, r8, #1
 801cf8c:	4410      	add	r0, r2
 801cf8e:	e762      	b.n	801ce56 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 801cf90:	b005      	add	sp, #20
 801cf92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801cf96 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801cf96:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cf9a:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 801cf9c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801cfa0:	9201      	str	r2, [sp, #4]
 801cfa2:	6860      	ldr	r0, [r4, #4]
 801cfa4:	f8dd c050 	ldr.w	ip, [sp, #80]	@ 0x50
 801cfa8:	e9dd 2512 	ldrd	r2, r5, [sp, #72]	@ 0x48
 801cfac:	fb00 2505 	mla	r5, r0, r5, r2
 801cfb0:	6822      	ldr	r2, [r4, #0]
 801cfb2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801cfb6:	4415      	add	r5, r2
 801cfb8:	f8dc 2000 	ldr.w	r2, [ip]
 801cfbc:	9200      	str	r2, [sp, #0]
 801cfbe:	2900      	cmp	r1, #0
 801cfc0:	dc03      	bgt.n	801cfca <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 801cfc2:	9a01      	ldr	r2, [sp, #4]
 801cfc4:	2a00      	cmp	r2, #0
 801cfc6:	f340 812b 	ble.w	801d220 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 801cfca:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801cfcc:	f9bc e008 	ldrsh.w	lr, [ip, #8]
 801cfd0:	f502 4400 	add.w	r4, r2, #32768	@ 0x8000
 801cfd4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801cfd6:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 801cfda:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 801cfde:	2b00      	cmp	r3, #0
 801cfe0:	dd0e      	ble.n	801d000 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801cfe2:	1422      	asrs	r2, r4, #16
 801cfe4:	d405      	bmi.n	801cff2 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801cfe6:	4572      	cmp	r2, lr
 801cfe8:	da03      	bge.n	801cff2 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801cfea:	1402      	asrs	r2, r0, #16
 801cfec:	d401      	bmi.n	801cff2 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801cfee:	42ba      	cmp	r2, r7
 801cff0:	db07      	blt.n	801d002 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801cff2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801cff4:	3b01      	subs	r3, #1
 801cff6:	3503      	adds	r5, #3
 801cff8:	4414      	add	r4, r2
 801cffa:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801cffc:	4410      	add	r0, r2
 801cffe:	e7ee      	b.n	801cfde <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 801d000:	d06f      	beq.n	801d0e2 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 801d002:	1e5a      	subs	r2, r3, #1
 801d004:	9e0f      	ldr	r6, [sp, #60]	@ 0x3c
 801d006:	fb06 4602 	mla	r6, r6, r2, r4
 801d00a:	1436      	asrs	r6, r6, #16
 801d00c:	d45e      	bmi.n	801d0cc <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 801d00e:	4576      	cmp	r6, lr
 801d010:	da5c      	bge.n	801d0cc <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 801d012:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 801d014:	fb06 0202 	mla	r2, r6, r2, r0
 801d018:	1412      	asrs	r2, r2, #16
 801d01a:	d457      	bmi.n	801d0cc <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 801d01c:	42ba      	cmp	r2, r7
 801d01e:	da55      	bge.n	801d0cc <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 801d020:	1cee      	adds	r6, r5, #3
 801d022:	469a      	mov	sl, r3
 801d024:	f1ba 0f00 	cmp.w	sl, #0
 801d028:	dd56      	ble.n	801d0d8 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 801d02a:	f9bc e008 	ldrsh.w	lr, [ip, #8]
 801d02e:	1427      	asrs	r7, r4, #16
 801d030:	1402      	asrs	r2, r0, #16
 801d032:	fb0e 7202 	mla	r2, lr, r2, r7
 801d036:	9f00      	ldr	r7, [sp, #0]
 801d038:	f857 7022 	ldr.w	r7, [r7, r2, lsl #2]
 801d03c:	ea5f 6e17 	movs.w	lr, r7, lsr #24
 801d040:	d03c      	beq.n	801d0bc <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 801d042:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 801d046:	f3c7 4b07 	ubfx	fp, r7, #16, #8
 801d04a:	f3c7 2907 	ubfx	r9, r7, #8, #8
 801d04e:	fa5f f28e 	uxtb.w	r2, lr
 801d052:	b2ff      	uxtb	r7, r7
 801d054:	f000 80dd 	beq.w	801d212 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 801d058:	fa1f f882 	uxth.w	r8, r2
 801d05c:	43d2      	mvns	r2, r2
 801d05e:	f816 ec03 	ldrb.w	lr, [r6, #-3]
 801d062:	fb17 f708 	smulbb	r7, r7, r8
 801d066:	b2d2      	uxtb	r2, r2
 801d068:	fb19 f908 	smulbb	r9, r9, r8
 801d06c:	fb0e 7702 	mla	r7, lr, r2, r7
 801d070:	fb1b f808 	smulbb	r8, fp, r8
 801d074:	b2bf      	uxth	r7, r7
 801d076:	f107 0e01 	add.w	lr, r7, #1
 801d07a:	eb0e 2717 	add.w	r7, lr, r7, lsr #8
 801d07e:	123f      	asrs	r7, r7, #8
 801d080:	f806 7c03 	strb.w	r7, [r6, #-3]
 801d084:	f816 7c02 	ldrb.w	r7, [r6, #-2]
 801d088:	fb07 9902 	mla	r9, r7, r2, r9
 801d08c:	fa1f f989 	uxth.w	r9, r9
 801d090:	f109 0701 	add.w	r7, r9, #1
 801d094:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 801d098:	f816 7c01 	ldrb.w	r7, [r6, #-1]
 801d09c:	fb07 8802 	mla	r8, r7, r2, r8
 801d0a0:	ea4f 2929 	mov.w	r9, r9, asr #8
 801d0a4:	fa1f f888 	uxth.w	r8, r8
 801d0a8:	f806 9c02 	strb.w	r9, [r6, #-2]
 801d0ac:	f108 0201 	add.w	r2, r8, #1
 801d0b0:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 801d0b4:	ea4f 2828 	mov.w	r8, r8, asr #8
 801d0b8:	f806 8c01 	strb.w	r8, [r6, #-1]
 801d0bc:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801d0be:	3603      	adds	r6, #3
 801d0c0:	f10a 3aff 	add.w	sl, sl, #4294967295
 801d0c4:	4414      	add	r4, r2
 801d0c6:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801d0c8:	4410      	add	r0, r2
 801d0ca:	e7ab      	b.n	801d024 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 801d0cc:	f04f 0e00 	mov.w	lr, #0
 801d0d0:	eba3 020e 	sub.w	r2, r3, lr
 801d0d4:	2a00      	cmp	r2, #0
 801d0d6:	dc3d      	bgt.n	801d154 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1be>
 801d0d8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801d0dc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801d0e0:	441d      	add	r5, r3
 801d0e2:	2900      	cmp	r1, #0
 801d0e4:	f340 809c 	ble.w	801d220 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 801d0e8:	ee30 0a04 	vadd.f32	s0, s0, s8
 801d0ec:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801d0ee:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801d0f2:	3901      	subs	r1, #1
 801d0f4:	eeb0 6a62 	vmov.f32	s12, s5
 801d0f8:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801d0fc:	ee31 1a05 	vadd.f32	s2, s2, s10
 801d100:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801d104:	ed8d 6a0d 	vstr	s12, [sp, #52]	@ 0x34
 801d108:	eeb0 6a43 	vmov.f32	s12, s6
 801d10c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801d110:	ed8d 6a0e 	vstr	s12, [sp, #56]	@ 0x38
 801d114:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801d118:	ee61 7a27 	vmul.f32	s15, s2, s15
 801d11c:	ee77 2a62 	vsub.f32	s5, s14, s5
 801d120:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801d124:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801d128:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801d12c:	ee12 2a90 	vmov	r2, s5
 801d130:	eef0 2a47 	vmov.f32	s5, s14
 801d134:	fb92 f3f3 	sdiv	r3, r2, r3
 801d138:	ee13 2a10 	vmov	r2, s6
 801d13c:	930f      	str	r3, [sp, #60]	@ 0x3c
 801d13e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801d140:	eeb0 3a67 	vmov.f32	s6, s15
 801d144:	fb92 f3f3 	sdiv	r3, r2, r3
 801d148:	9a01      	ldr	r2, [sp, #4]
 801d14a:	9310      	str	r3, [sp, #64]	@ 0x40
 801d14c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801d14e:	bf08      	it	eq
 801d150:	4613      	moveq	r3, r2
 801d152:	e734      	b.n	801cfbe <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28>
 801d154:	1427      	asrs	r7, r4, #16
 801d156:	d44d      	bmi.n	801d1f4 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 801d158:	f8dc 6008 	ldr.w	r6, [ip, #8]
 801d15c:	42be      	cmp	r6, r7
 801d15e:	dd49      	ble.n	801d1f4 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 801d160:	ea5f 4820 	movs.w	r8, r0, asr #16
 801d164:	d446      	bmi.n	801d1f4 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 801d166:	f8dc 200c 	ldr.w	r2, [ip, #12]
 801d16a:	4542      	cmp	r2, r8
 801d16c:	dd42      	ble.n	801d1f4 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 801d16e:	b236      	sxth	r6, r6
 801d170:	9a00      	ldr	r2, [sp, #0]
 801d172:	fb08 7606 	mla	r6, r8, r6, r7
 801d176:	f852 7026 	ldr.w	r7, [r2, r6, lsl #2]
 801d17a:	0e3a      	lsrs	r2, r7, #24
 801d17c:	d03a      	beq.n	801d1f4 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 801d17e:	2aff      	cmp	r2, #255	@ 0xff
 801d180:	b2d6      	uxtb	r6, r2
 801d182:	f3c7 4b07 	ubfx	fp, r7, #16, #8
 801d186:	f3c7 2a07 	ubfx	sl, r7, #8, #8
 801d18a:	ea4f 024e 	mov.w	r2, lr, lsl #1
 801d18e:	b2ff      	uxtb	r7, r7
 801d190:	d037      	beq.n	801d202 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26c>
 801d192:	fa1f f986 	uxth.w	r9, r6
 801d196:	4472      	add	r2, lr
 801d198:	43f6      	mvns	r6, r6
 801d19a:	f815 8002 	ldrb.w	r8, [r5, r2]
 801d19e:	fb17 f709 	smulbb	r7, r7, r9
 801d1a2:	fb1a fa09 	smulbb	sl, sl, r9
 801d1a6:	b2f6      	uxtb	r6, r6
 801d1a8:	fb1b f909 	smulbb	r9, fp, r9
 801d1ac:	fb08 7706 	mla	r7, r8, r6, r7
 801d1b0:	b2bf      	uxth	r7, r7
 801d1b2:	f107 0801 	add.w	r8, r7, #1
 801d1b6:	eb08 2717 	add.w	r7, r8, r7, lsr #8
 801d1ba:	123f      	asrs	r7, r7, #8
 801d1bc:	54af      	strb	r7, [r5, r2]
 801d1be:	442a      	add	r2, r5
 801d1c0:	7857      	ldrb	r7, [r2, #1]
 801d1c2:	fb07 aa06 	mla	sl, r7, r6, sl
 801d1c6:	fa1f fa8a 	uxth.w	sl, sl
 801d1ca:	f10a 0701 	add.w	r7, sl, #1
 801d1ce:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801d1d2:	7897      	ldrb	r7, [r2, #2]
 801d1d4:	fb07 9906 	mla	r9, r7, r6, r9
 801d1d8:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801d1dc:	fa1f f989 	uxth.w	r9, r9
 801d1e0:	f882 a001 	strb.w	sl, [r2, #1]
 801d1e4:	f109 0601 	add.w	r6, r9, #1
 801d1e8:	eb06 2919 	add.w	r9, r6, r9, lsr #8
 801d1ec:	ea4f 2929 	mov.w	r9, r9, asr #8
 801d1f0:	f882 9002 	strb.w	r9, [r2, #2]
 801d1f4:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801d1f6:	f10e 0e01 	add.w	lr, lr, #1
 801d1fa:	4414      	add	r4, r2
 801d1fc:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801d1fe:	4410      	add	r0, r2
 801d200:	e766      	b.n	801d0d0 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 801d202:	4472      	add	r2, lr
 801d204:	54af      	strb	r7, [r5, r2]
 801d206:	442a      	add	r2, r5
 801d208:	f882 a001 	strb.w	sl, [r2, #1]
 801d20c:	f882 b002 	strb.w	fp, [r2, #2]
 801d210:	e7f0      	b.n	801d1f4 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 801d212:	f806 7c03 	strb.w	r7, [r6, #-3]
 801d216:	f806 9c02 	strb.w	r9, [r6, #-2]
 801d21a:	f806 bc01 	strb.w	fp, [r6, #-1]
 801d21e:	e74d      	b.n	801d0bc <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 801d220:	b003      	add	sp, #12
 801d222:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0801d228 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801d228:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d22c:	b087      	sub	sp, #28
 801d22e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801d232:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 801d234:	9204      	str	r2, [sp, #16]
 801d236:	f89d 2064 	ldrb.w	r2, [sp, #100]	@ 0x64
 801d23a:	6860      	ldr	r0, [r4, #4]
 801d23c:	9205      	str	r2, [sp, #20]
 801d23e:	f8dd c060 	ldr.w	ip, [sp, #96]	@ 0x60
 801d242:	f8dd e04c 	ldr.w	lr, [sp, #76]	@ 0x4c
 801d246:	9101      	str	r1, [sp, #4]
 801d248:	e9dd 2516 	ldrd	r2, r5, [sp, #88]	@ 0x58
 801d24c:	fb00 2505 	mla	r5, r0, r5, r2
 801d250:	6822      	ldr	r2, [r4, #0]
 801d252:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801d256:	4415      	add	r5, r2
 801d258:	f8dc 2008 	ldr.w	r2, [ip, #8]
 801d25c:	3201      	adds	r2, #1
 801d25e:	f022 0201 	bic.w	r2, r2, #1
 801d262:	9202      	str	r2, [sp, #8]
 801d264:	f8dc 2000 	ldr.w	r2, [ip]
 801d268:	9203      	str	r2, [sp, #12]
 801d26a:	9a01      	ldr	r2, [sp, #4]
 801d26c:	2a00      	cmp	r2, #0
 801d26e:	dc03      	bgt.n	801d278 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50>
 801d270:	9a04      	ldr	r2, [sp, #16]
 801d272:	2a00      	cmp	r2, #0
 801d274:	f340 8135 	ble.w	801d4e2 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ba>
 801d278:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801d27a:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 801d27e:	f502 4400 	add.w	r4, r2, #32768	@ 0x8000
 801d282:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801d284:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 801d288:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 801d28c:	2b00      	cmp	r3, #0
 801d28e:	dd0d      	ble.n	801d2ac <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801d290:	1422      	asrs	r2, r4, #16
 801d292:	d405      	bmi.n	801d2a0 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801d294:	4542      	cmp	r2, r8
 801d296:	da03      	bge.n	801d2a0 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801d298:	1402      	asrs	r2, r0, #16
 801d29a:	d401      	bmi.n	801d2a0 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801d29c:	42ba      	cmp	r2, r7
 801d29e:	db06      	blt.n	801d2ae <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 801d2a0:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801d2a2:	4474      	add	r4, lr
 801d2a4:	3b01      	subs	r3, #1
 801d2a6:	3503      	adds	r5, #3
 801d2a8:	4410      	add	r0, r2
 801d2aa:	e7ef      	b.n	801d28c <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 801d2ac:	d077      	beq.n	801d39e <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x176>
 801d2ae:	1e5a      	subs	r2, r3, #1
 801d2b0:	fb0e 4602 	mla	r6, lr, r2, r4
 801d2b4:	1436      	asrs	r6, r6, #16
 801d2b6:	d469      	bmi.n	801d38c <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801d2b8:	4546      	cmp	r6, r8
 801d2ba:	da67      	bge.n	801d38c <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801d2bc:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 801d2be:	fb06 0202 	mla	r2, r6, r2, r0
 801d2c2:	1412      	asrs	r2, r2, #16
 801d2c4:	d462      	bmi.n	801d38c <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801d2c6:	42ba      	cmp	r2, r7
 801d2c8:	da60      	bge.n	801d38c <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801d2ca:	1cee      	adds	r6, r5, #3
 801d2cc:	4699      	mov	r9, r3
 801d2ce:	f1b9 0f00 	cmp.w	r9, #0
 801d2d2:	dd5f      	ble.n	801d394 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16c>
 801d2d4:	1422      	asrs	r2, r4, #16
 801d2d6:	9902      	ldr	r1, [sp, #8]
 801d2d8:	1407      	asrs	r7, r0, #16
 801d2da:	fb01 2707 	mla	r7, r1, r7, r2
 801d2de:	9903      	ldr	r1, [sp, #12]
 801d2e0:	087a      	lsrs	r2, r7, #1
 801d2e2:	5c8a      	ldrb	r2, [r1, r2]
 801d2e4:	07f9      	lsls	r1, r7, #31
 801d2e6:	bf54      	ite	pl
 801d2e8:	f002 020f 	andpl.w	r2, r2, #15
 801d2ec:	1112      	asrmi	r2, r2, #4
 801d2ee:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801d2f2:	b2d2      	uxtb	r2, r2
 801d2f4:	2a00      	cmp	r2, #0
 801d2f6:	d042      	beq.n	801d37e <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 801d2f8:	497b      	ldr	r1, [pc, #492]	@ (801d4e8 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c0>)
 801d2fa:	680f      	ldr	r7, [r1, #0]
 801d2fc:	9905      	ldr	r1, [sp, #20]
 801d2fe:	fa5f fb87 	uxtb.w	fp, r7
 801d302:	434a      	muls	r2, r1
 801d304:	f102 0801 	add.w	r8, r2, #1
 801d308:	eb08 2222 	add.w	r2, r8, r2, asr #8
 801d30c:	f816 8c03 	ldrb.w	r8, [r6, #-3]
 801d310:	1212      	asrs	r2, r2, #8
 801d312:	fa1f fa82 	uxth.w	sl, r2
 801d316:	43d2      	mvns	r2, r2
 801d318:	fb1b fb0a 	smulbb	fp, fp, sl
 801d31c:	b2d2      	uxtb	r2, r2
 801d31e:	fb08 b802 	mla	r8, r8, r2, fp
 801d322:	fa1f f888 	uxth.w	r8, r8
 801d326:	f108 0b01 	add.w	fp, r8, #1
 801d32a:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 801d32e:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 801d332:	f3c7 4707 	ubfx	r7, r7, #16, #8
 801d336:	fb1b fb0a 	smulbb	fp, fp, sl
 801d33a:	ea4f 2828 	mov.w	r8, r8, asr #8
 801d33e:	fb17 fa0a 	smulbb	sl, r7, sl
 801d342:	f816 7c01 	ldrb.w	r7, [r6, #-1]
 801d346:	f806 8c03 	strb.w	r8, [r6, #-3]
 801d34a:	f816 8c02 	ldrb.w	r8, [r6, #-2]
 801d34e:	fb07 aa02 	mla	sl, r7, r2, sl
 801d352:	fb08 b802 	mla	r8, r8, r2, fp
 801d356:	fa1f fa8a 	uxth.w	sl, sl
 801d35a:	fa1f f888 	uxth.w	r8, r8
 801d35e:	f10a 0701 	add.w	r7, sl, #1
 801d362:	f108 0b01 	add.w	fp, r8, #1
 801d366:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801d36a:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 801d36e:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801d372:	ea4f 2828 	mov.w	r8, r8, asr #8
 801d376:	f806 ac01 	strb.w	sl, [r6, #-1]
 801d37a:	f806 8c02 	strb.w	r8, [r6, #-2]
 801d37e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801d380:	4474      	add	r4, lr
 801d382:	3603      	adds	r6, #3
 801d384:	f109 39ff 	add.w	r9, r9, #4294967295
 801d388:	4410      	add	r0, r2
 801d38a:	e7a0      	b.n	801d2ce <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 801d38c:	2700      	movs	r7, #0
 801d38e:	1bda      	subs	r2, r3, r7
 801d390:	2a00      	cmp	r2, #0
 801d392:	dc3e      	bgt.n	801d412 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 801d394:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801d398:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801d39c:	441d      	add	r5, r3
 801d39e:	9b01      	ldr	r3, [sp, #4]
 801d3a0:	2b00      	cmp	r3, #0
 801d3a2:	f340 809e 	ble.w	801d4e2 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ba>
 801d3a6:	ee30 0a04 	vadd.f32	s0, s0, s8
 801d3aa:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801d3ac:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801d3b0:	eeb0 6a62 	vmov.f32	s12, s5
 801d3b4:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801d3b8:	ee31 1a05 	vadd.f32	s2, s2, s10
 801d3bc:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801d3c0:	ed8d 6a11 	vstr	s12, [sp, #68]	@ 0x44
 801d3c4:	eeb0 6a43 	vmov.f32	s12, s6
 801d3c8:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801d3cc:	ed8d 6a12 	vstr	s12, [sp, #72]	@ 0x48
 801d3d0:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801d3d4:	ee61 7a27 	vmul.f32	s15, s2, s15
 801d3d8:	ee77 2a62 	vsub.f32	s5, s14, s5
 801d3dc:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801d3e0:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801d3e4:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801d3e8:	ee12 2a90 	vmov	r2, s5
 801d3ec:	eef0 2a47 	vmov.f32	s5, s14
 801d3f0:	fb92 fef3 	sdiv	lr, r2, r3
 801d3f4:	ee13 2a10 	vmov	r2, s6
 801d3f8:	eeb0 3a67 	vmov.f32	s6, s15
 801d3fc:	fb92 f3f3 	sdiv	r3, r2, r3
 801d400:	9314      	str	r3, [sp, #80]	@ 0x50
 801d402:	9b01      	ldr	r3, [sp, #4]
 801d404:	9a04      	ldr	r2, [sp, #16]
 801d406:	3b01      	subs	r3, #1
 801d408:	9301      	str	r3, [sp, #4]
 801d40a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801d40c:	bf08      	it	eq
 801d40e:	4613      	moveq	r3, r2
 801d410:	e72b      	b.n	801d26a <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42>
 801d412:	1426      	asrs	r6, r4, #16
 801d414:	d460      	bmi.n	801d4d8 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 801d416:	f8dc 2008 	ldr.w	r2, [ip, #8]
 801d41a:	42b2      	cmp	r2, r6
 801d41c:	dd5c      	ble.n	801d4d8 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 801d41e:	ea5f 4820 	movs.w	r8, r0, asr #16
 801d422:	d459      	bmi.n	801d4d8 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 801d424:	f8dc 200c 	ldr.w	r2, [ip, #12]
 801d428:	4542      	cmp	r2, r8
 801d42a:	dd55      	ble.n	801d4d8 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 801d42c:	9a02      	ldr	r2, [sp, #8]
 801d42e:	9903      	ldr	r1, [sp, #12]
 801d430:	fb08 6602 	mla	r6, r8, r2, r6
 801d434:	0872      	lsrs	r2, r6, #1
 801d436:	07f6      	lsls	r6, r6, #31
 801d438:	5c8a      	ldrb	r2, [r1, r2]
 801d43a:	bf54      	ite	pl
 801d43c:	f002 020f 	andpl.w	r2, r2, #15
 801d440:	1112      	asrmi	r2, r2, #4
 801d442:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801d446:	b2d2      	uxtb	r2, r2
 801d448:	2a00      	cmp	r2, #0
 801d44a:	d045      	beq.n	801d4d8 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 801d44c:	4926      	ldr	r1, [pc, #152]	@ (801d4e8 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c0>)
 801d44e:	f8d1 8000 	ldr.w	r8, [r1]
 801d452:	9905      	ldr	r1, [sp, #20]
 801d454:	fa5f fb88 	uxtb.w	fp, r8
 801d458:	434a      	muls	r2, r1
 801d45a:	1c56      	adds	r6, r2, #1
 801d45c:	eb06 2222 	add.w	r2, r6, r2, asr #8
 801d460:	eb07 0647 	add.w	r6, r7, r7, lsl #1
 801d464:	1212      	asrs	r2, r2, #8
 801d466:	f815 9006 	ldrb.w	r9, [r5, r6]
 801d46a:	fa1f fa82 	uxth.w	sl, r2
 801d46e:	43d2      	mvns	r2, r2
 801d470:	fb1b fb0a 	smulbb	fp, fp, sl
 801d474:	b2d2      	uxtb	r2, r2
 801d476:	fb09 b902 	mla	r9, r9, r2, fp
 801d47a:	fa1f f989 	uxth.w	r9, r9
 801d47e:	f109 0b01 	add.w	fp, r9, #1
 801d482:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801d486:	f3c8 2b07 	ubfx	fp, r8, #8, #8
 801d48a:	f3c8 4807 	ubfx	r8, r8, #16, #8
 801d48e:	fb1b fb0a 	smulbb	fp, fp, sl
 801d492:	ea4f 2929 	mov.w	r9, r9, asr #8
 801d496:	fb18 fa0a 	smulbb	sl, r8, sl
 801d49a:	f805 9006 	strb.w	r9, [r5, r6]
 801d49e:	442e      	add	r6, r5
 801d4a0:	f896 8002 	ldrb.w	r8, [r6, #2]
 801d4a4:	f896 9001 	ldrb.w	r9, [r6, #1]
 801d4a8:	fb08 aa02 	mla	sl, r8, r2, sl
 801d4ac:	fb09 b902 	mla	r9, r9, r2, fp
 801d4b0:	fa1f fa8a 	uxth.w	sl, sl
 801d4b4:	fa1f f989 	uxth.w	r9, r9
 801d4b8:	f10a 0801 	add.w	r8, sl, #1
 801d4bc:	f109 0b01 	add.w	fp, r9, #1
 801d4c0:	eb08 2a1a 	add.w	sl, r8, sl, lsr #8
 801d4c4:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801d4c8:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801d4cc:	ea4f 2929 	mov.w	r9, r9, asr #8
 801d4d0:	f886 a002 	strb.w	sl, [r6, #2]
 801d4d4:	f886 9001 	strb.w	r9, [r6, #1]
 801d4d8:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801d4da:	4474      	add	r4, lr
 801d4dc:	3701      	adds	r7, #1
 801d4de:	4410      	add	r0, r2
 801d4e0:	e755      	b.n	801d38e <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x166>
 801d4e2:	b007      	add	sp, #28
 801d4e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d4e8:	24028e30 	.word	0x24028e30

0801d4ec <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801d4ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d4f0:	b085      	sub	sp, #20
 801d4f2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801d4f6:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801d4f8:	9203      	str	r2, [sp, #12]
 801d4fa:	6860      	ldr	r0, [r4, #4]
 801d4fc:	f8dd c058 	ldr.w	ip, [sp, #88]	@ 0x58
 801d500:	9100      	str	r1, [sp, #0]
 801d502:	e9dd 2614 	ldrd	r2, r6, [sp, #80]	@ 0x50
 801d506:	fb00 2606 	mla	r6, r0, r6, r2
 801d50a:	6822      	ldr	r2, [r4, #0]
 801d50c:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801d510:	4416      	add	r6, r2
 801d512:	f8dc 2008 	ldr.w	r2, [ip, #8]
 801d516:	3201      	adds	r2, #1
 801d518:	f022 0201 	bic.w	r2, r2, #1
 801d51c:	9201      	str	r2, [sp, #4]
 801d51e:	f8dc 2000 	ldr.w	r2, [ip]
 801d522:	9202      	str	r2, [sp, #8]
 801d524:	9a00      	ldr	r2, [sp, #0]
 801d526:	2a00      	cmp	r2, #0
 801d528:	dc03      	bgt.n	801d532 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46>
 801d52a:	9a03      	ldr	r2, [sp, #12]
 801d52c:	2a00      	cmp	r2, #0
 801d52e:	f340 8140 	ble.w	801d7b2 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c6>
 801d532:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801d534:	f9bc e008 	ldrsh.w	lr, [ip, #8]
 801d538:	f502 4500 	add.w	r5, r2, #32768	@ 0x8000
 801d53c:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801d53e:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 801d542:	f502 4400 	add.w	r4, r2, #32768	@ 0x8000
 801d546:	2b00      	cmp	r3, #0
 801d548:	dd0e      	ble.n	801d568 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801d54a:	142a      	asrs	r2, r5, #16
 801d54c:	d405      	bmi.n	801d55a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801d54e:	4572      	cmp	r2, lr
 801d550:	da03      	bge.n	801d55a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801d552:	1422      	asrs	r2, r4, #16
 801d554:	d401      	bmi.n	801d55a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801d556:	42ba      	cmp	r2, r7
 801d558:	db07      	blt.n	801d56a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801d55a:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801d55c:	3b01      	subs	r3, #1
 801d55e:	3603      	adds	r6, #3
 801d560:	4415      	add	r5, r2
 801d562:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801d564:	4414      	add	r4, r2
 801d566:	e7ee      	b.n	801d546 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 801d568:	d072      	beq.n	801d650 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801d56a:	1e5a      	subs	r2, r3, #1
 801d56c:	9811      	ldr	r0, [sp, #68]	@ 0x44
 801d56e:	fb00 5002 	mla	r0, r0, r2, r5
 801d572:	1400      	asrs	r0, r0, #16
 801d574:	d463      	bmi.n	801d63e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801d576:	4570      	cmp	r0, lr
 801d578:	da61      	bge.n	801d63e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801d57a:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801d57c:	fb00 4202 	mla	r2, r0, r2, r4
 801d580:	1412      	asrs	r2, r2, #16
 801d582:	d45c      	bmi.n	801d63e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801d584:	42ba      	cmp	r2, r7
 801d586:	da5a      	bge.n	801d63e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801d588:	1cf0      	adds	r0, r6, #3
 801d58a:	469a      	mov	sl, r3
 801d58c:	f1ba 0f00 	cmp.w	sl, #0
 801d590:	dd59      	ble.n	801d646 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15a>
 801d592:	142a      	asrs	r2, r5, #16
 801d594:	9901      	ldr	r1, [sp, #4]
 801d596:	1427      	asrs	r7, r4, #16
 801d598:	fb01 2707 	mla	r7, r1, r7, r2
 801d59c:	9902      	ldr	r1, [sp, #8]
 801d59e:	087a      	lsrs	r2, r7, #1
 801d5a0:	5c8a      	ldrb	r2, [r1, r2]
 801d5a2:	07f9      	lsls	r1, r7, #31
 801d5a4:	bf54      	ite	pl
 801d5a6:	f002 020f 	andpl.w	r2, r2, #15
 801d5aa:	1112      	asrmi	r2, r2, #4
 801d5ac:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801d5b0:	b2d2      	uxtb	r2, r2
 801d5b2:	2a00      	cmp	r2, #0
 801d5b4:	d03b      	beq.n	801d62e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 801d5b6:	4980      	ldr	r1, [pc, #512]	@ (801d7b8 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2cc>)
 801d5b8:	2aff      	cmp	r2, #255	@ 0xff
 801d5ba:	680f      	ldr	r7, [r1, #0]
 801d5bc:	f3c7 4b07 	ubfx	fp, r7, #16, #8
 801d5c0:	f3c7 2907 	ubfx	r9, r7, #8, #8
 801d5c4:	b2ff      	uxtb	r7, r7
 801d5c6:	f000 80ed 	beq.w	801d7a4 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b8>
 801d5ca:	fa1f f882 	uxth.w	r8, r2
 801d5ce:	43d2      	mvns	r2, r2
 801d5d0:	f810 ec03 	ldrb.w	lr, [r0, #-3]
 801d5d4:	fb17 f708 	smulbb	r7, r7, r8
 801d5d8:	b2d2      	uxtb	r2, r2
 801d5da:	fb19 f908 	smulbb	r9, r9, r8
 801d5de:	fb0e 7702 	mla	r7, lr, r2, r7
 801d5e2:	fb1b f808 	smulbb	r8, fp, r8
 801d5e6:	b2bf      	uxth	r7, r7
 801d5e8:	f107 0e01 	add.w	lr, r7, #1
 801d5ec:	eb0e 2717 	add.w	r7, lr, r7, lsr #8
 801d5f0:	123f      	asrs	r7, r7, #8
 801d5f2:	f800 7c03 	strb.w	r7, [r0, #-3]
 801d5f6:	f810 7c02 	ldrb.w	r7, [r0, #-2]
 801d5fa:	fb07 9902 	mla	r9, r7, r2, r9
 801d5fe:	fa1f f989 	uxth.w	r9, r9
 801d602:	f109 0701 	add.w	r7, r9, #1
 801d606:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 801d60a:	f810 7c01 	ldrb.w	r7, [r0, #-1]
 801d60e:	fb07 8802 	mla	r8, r7, r2, r8
 801d612:	ea4f 2929 	mov.w	r9, r9, asr #8
 801d616:	fa1f f888 	uxth.w	r8, r8
 801d61a:	f800 9c02 	strb.w	r9, [r0, #-2]
 801d61e:	f108 0201 	add.w	r2, r8, #1
 801d622:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 801d626:	ea4f 2828 	mov.w	r8, r8, asr #8
 801d62a:	f800 8c01 	strb.w	r8, [r0, #-1]
 801d62e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801d630:	3003      	adds	r0, #3
 801d632:	f10a 3aff 	add.w	sl, sl, #4294967295
 801d636:	4415      	add	r5, r2
 801d638:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801d63a:	4414      	add	r4, r2
 801d63c:	e7a6      	b.n	801d58c <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801d63e:	2700      	movs	r7, #0
 801d640:	1bda      	subs	r2, r3, r7
 801d642:	2a00      	cmp	r2, #0
 801d644:	dc40      	bgt.n	801d6c8 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1dc>
 801d646:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801d64a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801d64e:	441e      	add	r6, r3
 801d650:	9b00      	ldr	r3, [sp, #0]
 801d652:	2b00      	cmp	r3, #0
 801d654:	f340 80ad 	ble.w	801d7b2 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c6>
 801d658:	ee30 0a04 	vadd.f32	s0, s0, s8
 801d65c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801d65e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801d662:	eeb0 6a62 	vmov.f32	s12, s5
 801d666:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801d66a:	ee31 1a05 	vadd.f32	s2, s2, s10
 801d66e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801d672:	ed8d 6a0f 	vstr	s12, [sp, #60]	@ 0x3c
 801d676:	eeb0 6a43 	vmov.f32	s12, s6
 801d67a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801d67e:	ed8d 6a10 	vstr	s12, [sp, #64]	@ 0x40
 801d682:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801d686:	ee61 7a27 	vmul.f32	s15, s2, s15
 801d68a:	ee77 2a62 	vsub.f32	s5, s14, s5
 801d68e:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801d692:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801d696:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801d69a:	ee12 2a90 	vmov	r2, s5
 801d69e:	eef0 2a47 	vmov.f32	s5, s14
 801d6a2:	fb92 f3f3 	sdiv	r3, r2, r3
 801d6a6:	ee13 2a10 	vmov	r2, s6
 801d6aa:	9311      	str	r3, [sp, #68]	@ 0x44
 801d6ac:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801d6ae:	eeb0 3a67 	vmov.f32	s6, s15
 801d6b2:	fb92 f3f3 	sdiv	r3, r2, r3
 801d6b6:	9312      	str	r3, [sp, #72]	@ 0x48
 801d6b8:	9b00      	ldr	r3, [sp, #0]
 801d6ba:	9a03      	ldr	r2, [sp, #12]
 801d6bc:	3b01      	subs	r3, #1
 801d6be:	9300      	str	r3, [sp, #0]
 801d6c0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801d6c2:	bf08      	it	eq
 801d6c4:	4613      	moveq	r3, r2
 801d6c6:	e72d      	b.n	801d524 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 801d6c8:	1428      	asrs	r0, r5, #16
 801d6ca:	d45c      	bmi.n	801d786 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 801d6cc:	f8dc 2008 	ldr.w	r2, [ip, #8]
 801d6d0:	4282      	cmp	r2, r0
 801d6d2:	dd58      	ble.n	801d786 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 801d6d4:	ea5f 4e24 	movs.w	lr, r4, asr #16
 801d6d8:	d455      	bmi.n	801d786 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 801d6da:	f8dc 200c 	ldr.w	r2, [ip, #12]
 801d6de:	4572      	cmp	r2, lr
 801d6e0:	dd51      	ble.n	801d786 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 801d6e2:	9a01      	ldr	r2, [sp, #4]
 801d6e4:	9902      	ldr	r1, [sp, #8]
 801d6e6:	fb0e 0002 	mla	r0, lr, r2, r0
 801d6ea:	0842      	lsrs	r2, r0, #1
 801d6ec:	07c0      	lsls	r0, r0, #31
 801d6ee:	5c8a      	ldrb	r2, [r1, r2]
 801d6f0:	bf54      	ite	pl
 801d6f2:	f002 020f 	andpl.w	r2, r2, #15
 801d6f6:	1112      	asrmi	r2, r2, #4
 801d6f8:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801d6fc:	b2d2      	uxtb	r2, r2
 801d6fe:	2a00      	cmp	r2, #0
 801d700:	d041      	beq.n	801d786 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 801d702:	492d      	ldr	r1, [pc, #180]	@ (801d7b8 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2cc>)
 801d704:	2aff      	cmp	r2, #255	@ 0xff
 801d706:	6808      	ldr	r0, [r1, #0]
 801d708:	f3c0 4b07 	ubfx	fp, r0, #16, #8
 801d70c:	f3c0 2a07 	ubfx	sl, r0, #8, #8
 801d710:	fa5f fe80 	uxtb.w	lr, r0
 801d714:	ea4f 0047 	mov.w	r0, r7, lsl #1
 801d718:	d03b      	beq.n	801d792 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
 801d71a:	fa1f f982 	uxth.w	r9, r2
 801d71e:	4438      	add	r0, r7
 801d720:	43d2      	mvns	r2, r2
 801d722:	f816 8000 	ldrb.w	r8, [r6, r0]
 801d726:	fb1e fe09 	smulbb	lr, lr, r9
 801d72a:	fb1a fa09 	smulbb	sl, sl, r9
 801d72e:	b2d2      	uxtb	r2, r2
 801d730:	fb1b f909 	smulbb	r9, fp, r9
 801d734:	fb08 ee02 	mla	lr, r8, r2, lr
 801d738:	fa1f fe8e 	uxth.w	lr, lr
 801d73c:	f10e 0801 	add.w	r8, lr, #1
 801d740:	eb08 2e1e 	add.w	lr, r8, lr, lsr #8
 801d744:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801d748:	f806 e000 	strb.w	lr, [r6, r0]
 801d74c:	4430      	add	r0, r6
 801d74e:	f890 e001 	ldrb.w	lr, [r0, #1]
 801d752:	fb0e aa02 	mla	sl, lr, r2, sl
 801d756:	fa1f fa8a 	uxth.w	sl, sl
 801d75a:	f10a 0e01 	add.w	lr, sl, #1
 801d75e:	eb0e 2a1a 	add.w	sl, lr, sl, lsr #8
 801d762:	f890 e002 	ldrb.w	lr, [r0, #2]
 801d766:	fb0e 9902 	mla	r9, lr, r2, r9
 801d76a:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801d76e:	fa1f f989 	uxth.w	r9, r9
 801d772:	f880 a001 	strb.w	sl, [r0, #1]
 801d776:	f109 0201 	add.w	r2, r9, #1
 801d77a:	eb02 2919 	add.w	r9, r2, r9, lsr #8
 801d77e:	ea4f 2929 	mov.w	r9, r9, asr #8
 801d782:	f880 9002 	strb.w	r9, [r0, #2]
 801d786:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801d788:	3701      	adds	r7, #1
 801d78a:	4415      	add	r5, r2
 801d78c:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801d78e:	4414      	add	r4, r2
 801d790:	e756      	b.n	801d640 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 801d792:	4438      	add	r0, r7
 801d794:	f806 e000 	strb.w	lr, [r6, r0]
 801d798:	4430      	add	r0, r6
 801d79a:	f880 a001 	strb.w	sl, [r0, #1]
 801d79e:	f880 b002 	strb.w	fp, [r0, #2]
 801d7a2:	e7f0      	b.n	801d786 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 801d7a4:	f800 7c03 	strb.w	r7, [r0, #-3]
 801d7a8:	f800 9c02 	strb.w	r9, [r0, #-2]
 801d7ac:	f800 bc01 	strb.w	fp, [r0, #-1]
 801d7b0:	e73d      	b.n	801d62e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 801d7b2:	b005      	add	sp, #20
 801d7b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d7b8:	24028e30 	.word	0x24028e30

0801d7bc <_ZN8touchgfx8LCD24bppD1Ev>:
 801d7bc:	4770      	bx	lr

0801d7be <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOID1Ev>:
 801d7be:	4770      	bx	lr

0801d7c0 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW9D1Ev>:
 801d7c0:	4770      	bx	lr

0801d7c2 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLED1Ev>:
 801d7c2:	4770      	bx	lr

0801d7c4 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L4D1Ev>:
 801d7c4:	4770      	bx	lr

0801d7c6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGAD1Ev>:
 801d7c6:	4770      	bx	lr

0801d7c8 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GAD1Ev>:
 801d7c8:	4770      	bx	lr

0801d7ca <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGAD1Ev>:
 801d7ca:	4770      	bx	lr

0801d7cc <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GAD1Ev>:
 801d7cc:	4770      	bx	lr

0801d7ce <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 801d7ce:	4770      	bx	lr

0801d7d0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 801d7d0:	4770      	bx	lr

0801d7d2 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 801d7d2:	4770      	bx	lr

0801d7d4 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 801d7d4:	4770      	bx	lr

0801d7d6 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 801d7d6:	4770      	bx	lr

0801d7d8 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 801d7d8:	4770      	bx	lr

0801d7da <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 801d7da:	4770      	bx	lr

0801d7dc <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 801d7dc:	4770      	bx	lr

0801d7de <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 801d7de:	4770      	bx	lr

0801d7e0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 801d7e0:	4770      	bx	lr

0801d7e2 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 801d7e2:	4770      	bx	lr

0801d7e4 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 801d7e4:	4770      	bx	lr

0801d7e6 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 801d7e6:	4770      	bx	lr

0801d7e8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 801d7e8:	4770      	bx	lr

0801d7ea <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 801d7ea:	4770      	bx	lr

0801d7ec <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 801d7ec:	4770      	bx	lr
	...

0801d7f0 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh>:
 801d7f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d7f2:	4606      	mov	r6, r0
 801d7f4:	b087      	sub	sp, #28
 801d7f6:	4615      	mov	r5, r2
 801d7f8:	461f      	mov	r7, r3
 801d7fa:	b353      	cbz	r3, 801d852 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 801d7fc:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 801d800:	2b00      	cmp	r3, #0
 801d802:	dd26      	ble.n	801d852 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 801d804:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 801d808:	2b00      	cmp	r3, #0
 801d80a:	dd22      	ble.n	801d852 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 801d80c:	6808      	ldr	r0, [r1, #0]
 801d80e:	aa04      	add	r2, sp, #16
 801d810:	6849      	ldr	r1, [r1, #4]
 801d812:	4c1b      	ldr	r4, [pc, #108]	@ (801d880 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x90>)
 801d814:	c203      	stmia	r2!, {r0, r1}
 801d816:	a804      	add	r0, sp, #16
 801d818:	f7fa f960 	bl	8017adc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801d81c:	6820      	ldr	r0, [r4, #0]
 801d81e:	6803      	ldr	r3, [r0, #0]
 801d820:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801d822:	4798      	blx	r3
 801d824:	2fff      	cmp	r7, #255	@ 0xff
 801d826:	d016      	beq.n	801d856 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x66>
 801d828:	f010 0f08 	tst.w	r0, #8
 801d82c:	6820      	ldr	r0, [r4, #0]
 801d82e:	d015      	beq.n	801d85c <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x6c>
 801d830:	2400      	movs	r4, #0
 801d832:	6801      	ldr	r1, [r0, #0]
 801d834:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 801d838:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 801d83c:	e9cd 7402 	strd	r7, r4, [sp, #8]
 801d840:	f8bd 4016 	ldrh.w	r4, [sp, #22]
 801d844:	9401      	str	r4, [sp, #4]
 801d846:	f8bd 4014 	ldrh.w	r4, [sp, #20]
 801d84a:	9400      	str	r4, [sp, #0]
 801d84c:	6e0c      	ldr	r4, [r1, #96]	@ 0x60
 801d84e:	4629      	mov	r1, r5
 801d850:	47a0      	blx	r4
 801d852:	b007      	add	sp, #28
 801d854:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801d856:	f010 0f02 	tst.w	r0, #2
 801d85a:	e7e7      	b.n	801d82c <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x3c>
 801d85c:	6803      	ldr	r3, [r0, #0]
 801d85e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801d860:	4798      	blx	r3
 801d862:	4b08      	ldr	r3, [pc, #32]	@ (801d884 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x94>)
 801d864:	4601      	mov	r1, r0
 801d866:	4630      	mov	r0, r6
 801d868:	881a      	ldrh	r2, [r3, #0]
 801d86a:	6833      	ldr	r3, [r6, #0]
 801d86c:	e9cd 5700 	strd	r5, r7, [sp]
 801d870:	6a5d      	ldr	r5, [r3, #36]	@ 0x24
 801d872:	ab04      	add	r3, sp, #16
 801d874:	47a8      	blx	r5
 801d876:	6820      	ldr	r0, [r4, #0]
 801d878:	6803      	ldr	r3, [r0, #0]
 801d87a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801d87c:	4798      	blx	r3
 801d87e:	e7e8      	b.n	801d852 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 801d880:	24028e20 	.word	0x24028e20
 801d884:	24028e1a 	.word	0x24028e1a

0801d888 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb>:
 801d888:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801d88c:	b08b      	sub	sp, #44	@ 0x2c
 801d88e:	460d      	mov	r5, r1
 801d890:	4616      	mov	r6, r2
 801d892:	f89d 8048 	ldrb.w	r8, [sp, #72]	@ 0x48
 801d896:	f1b8 0f00 	cmp.w	r8, #0
 801d89a:	d047      	beq.n	801d92c <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xa4>
 801d89c:	6810      	ldr	r0, [r2, #0]
 801d89e:	ac06      	add	r4, sp, #24
 801d8a0:	6851      	ldr	r1, [r2, #4]
 801d8a2:	4f51      	ldr	r7, [pc, #324]	@ (801d9e8 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x160>)
 801d8a4:	c403      	stmia	r4!, {r0, r1}
 801d8a6:	6818      	ldr	r0, [r3, #0]
 801d8a8:	ac08      	add	r4, sp, #32
 801d8aa:	6859      	ldr	r1, [r3, #4]
 801d8ac:	c403      	stmia	r4!, {r0, r1}
 801d8ae:	a806      	add	r0, sp, #24
 801d8b0:	f7fa f914 	bl	8017adc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801d8b4:	4631      	mov	r1, r6
 801d8b6:	a808      	add	r0, sp, #32
 801d8b8:	f7fa f954 	bl	8017b64 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801d8bc:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 801d8c0:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	@ 0x22
 801d8c4:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 801d8c8:	6838      	ldr	r0, [r7, #0]
 801d8ca:	fb11 2103 	smlabb	r1, r1, r3, r2
 801d8ce:	f9bd 6024 	ldrsh.w	r6, [sp, #36]	@ 0x24
 801d8d2:	f9bd 4026 	ldrsh.w	r4, [sp, #38]	@ 0x26
 801d8d6:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801d8da:	440d      	add	r5, r1
 801d8dc:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 801d8e0:	440a      	add	r2, r1
 801d8e2:	f8ad 2020 	strh.w	r2, [sp, #32]
 801d8e6:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 801d8ea:	4413      	add	r3, r2
 801d8ec:	f8ad 3022 	strh.w	r3, [sp, #34]	@ 0x22
 801d8f0:	6803      	ldr	r3, [r0, #0]
 801d8f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801d8f4:	4798      	blx	r3
 801d8f6:	f1b8 0fff 	cmp.w	r8, #255	@ 0xff
 801d8fa:	d01a      	beq.n	801d932 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xaa>
 801d8fc:	f010 0f04 	tst.w	r0, #4
 801d900:	6838      	ldr	r0, [r7, #0]
 801d902:	d019      	beq.n	801d938 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xb0>
 801d904:	2100      	movs	r1, #0
 801d906:	6807      	ldr	r7, [r0, #0]
 801d908:	b2a4      	uxth	r4, r4
 801d90a:	f8cd 800c 	str.w	r8, [sp, #12]
 801d90e:	b2b6      	uxth	r6, r6
 801d910:	f8bd 3022 	ldrh.w	r3, [sp, #34]	@ 0x22
 801d914:	9401      	str	r4, [sp, #4]
 801d916:	9600      	str	r6, [sp, #0]
 801d918:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 801d91c:	e9cd 1104 	strd	r1, r1, [sp, #16]
 801d920:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 801d924:	9102      	str	r1, [sp, #8]
 801d926:	4629      	mov	r1, r5
 801d928:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 801d92a:	47a0      	blx	r4
 801d92c:	b00b      	add	sp, #44	@ 0x2c
 801d92e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801d932:	f010 0f01 	tst.w	r0, #1
 801d936:	e7e3      	b.n	801d900 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x78>
 801d938:	6803      	ldr	r3, [r0, #0]
 801d93a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801d93c:	4798      	blx	r3
 801d93e:	4a2b      	ldr	r2, [pc, #172]	@ (801d9ec <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x164>)
 801d940:	f9bd 1022 	ldrsh.w	r1, [sp, #34]	@ 0x22
 801d944:	f1b8 0fff 	cmp.w	r8, #255	@ 0xff
 801d948:	8813      	ldrh	r3, [r2, #0]
 801d94a:	f9bd c020 	ldrsh.w	ip, [sp, #32]
 801d94e:	fb03 f404 	mul.w	r4, r3, r4
 801d952:	fb03 c101 	mla	r1, r3, r1, ip
 801d956:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801d95a:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801d95e:	4408      	add	r0, r1
 801d960:	eb06 0146 	add.w	r1, r6, r6, lsl #1
 801d964:	4404      	add	r4, r0
 801d966:	d02e      	beq.n	801d9c6 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x13e>
 801d968:	f9bd 201c 	ldrsh.w	r2, [sp, #28]
 801d96c:	1b9b      	subs	r3, r3, r6
 801d96e:	f1c8 0cff 	rsb	ip, r8, #255	@ 0xff
 801d972:	1b96      	subs	r6, r2, r6
 801d974:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801d978:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801d97c:	42a0      	cmp	r0, r4
 801d97e:	d22d      	bcs.n	801d9dc <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x154>
 801d980:	eb00 0e01 	add.w	lr, r0, r1
 801d984:	4570      	cmp	r0, lr
 801d986:	d210      	bcs.n	801d9aa <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x122>
 801d988:	f890 9000 	ldrb.w	r9, [r0]
 801d98c:	f815 2b01 	ldrb.w	r2, [r5], #1
 801d990:	fb19 f90c 	smulbb	r9, r9, ip
 801d994:	fb02 9208 	mla	r2, r2, r8, r9
 801d998:	b292      	uxth	r2, r2
 801d99a:	f102 0901 	add.w	r9, r2, #1
 801d99e:	eb09 2212 	add.w	r2, r9, r2, lsr #8
 801d9a2:	1212      	asrs	r2, r2, #8
 801d9a4:	f800 2b01 	strb.w	r2, [r0], #1
 801d9a8:	e7ec      	b.n	801d984 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xfc>
 801d9aa:	4418      	add	r0, r3
 801d9ac:	4435      	add	r5, r6
 801d9ae:	e7e5      	b.n	801d97c <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xf4>
 801d9b0:	8813      	ldrh	r3, [r2, #0]
 801d9b2:	1b9b      	subs	r3, r3, r6
 801d9b4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801d9b8:	4418      	add	r0, r3
 801d9ba:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 801d9be:	1b9b      	subs	r3, r3, r6
 801d9c0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801d9c4:	441d      	add	r5, r3
 801d9c6:	42a0      	cmp	r0, r4
 801d9c8:	d208      	bcs.n	801d9dc <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x154>
 801d9ca:	eb00 0c01 	add.w	ip, r0, r1
 801d9ce:	4560      	cmp	r0, ip
 801d9d0:	d2ee      	bcs.n	801d9b0 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x128>
 801d9d2:	f815 3b01 	ldrb.w	r3, [r5], #1
 801d9d6:	f800 3b01 	strb.w	r3, [r0], #1
 801d9da:	e7f8      	b.n	801d9ce <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x146>
 801d9dc:	6838      	ldr	r0, [r7, #0]
 801d9de:	6803      	ldr	r3, [r0, #0]
 801d9e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801d9e2:	4798      	blx	r3
 801d9e4:	e7a2      	b.n	801d92c <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xa4>
 801d9e6:	bf00      	nop
 801d9e8:	24028e20 	.word	0x24028e20
 801d9ec:	24028e1a 	.word	0x24028e1a

0801d9f0 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE>:
 801d9f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d9f2:	2300      	movs	r3, #0
 801d9f4:	b085      	sub	sp, #20
 801d9f6:	9300      	str	r3, [sp, #0]
 801d9f8:	4b41      	ldr	r3, [pc, #260]	@ (801db00 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x110>)
 801d9fa:	781b      	ldrb	r3, [r3, #0]
 801d9fc:	2b00      	cmp	r3, #0
 801d9fe:	d136      	bne.n	801da6e <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x7e>
 801da00:	4a40      	ldr	r2, [pc, #256]	@ (801db04 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x114>)
 801da02:	f9b2 2000 	ldrsh.w	r2, [r2]
 801da06:	f8ad 2004 	strh.w	r2, [sp, #4]
 801da0a:	2b00      	cmp	r3, #0
 801da0c:	d131      	bne.n	801da72 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x82>
 801da0e:	4b3e      	ldr	r3, [pc, #248]	@ (801db08 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x118>)
 801da10:	f9b3 3000 	ldrsh.w	r3, [r3]
 801da14:	ac02      	add	r4, sp, #8
 801da16:	6808      	ldr	r0, [r1, #0]
 801da18:	f8ad 3006 	strh.w	r3, [sp, #6]
 801da1c:	ab02      	add	r3, sp, #8
 801da1e:	6849      	ldr	r1, [r1, #4]
 801da20:	4d3a      	ldr	r5, [pc, #232]	@ (801db0c <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x11c>)
 801da22:	c303      	stmia	r3!, {r0, r1}
 801da24:	4669      	mov	r1, sp
 801da26:	4620      	mov	r0, r4
 801da28:	f7fa f89c 	bl	8017b64 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801da2c:	4668      	mov	r0, sp
 801da2e:	f7fa f855 	bl	8017adc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801da32:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 801da36:	f8bd 2000 	ldrh.w	r2, [sp]
 801da3a:	462e      	mov	r6, r5
 801da3c:	6828      	ldr	r0, [r5, #0]
 801da3e:	4413      	add	r3, r2
 801da40:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 801da44:	f8ad 3008 	strh.w	r3, [sp, #8]
 801da48:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 801da4c:	4413      	add	r3, r2
 801da4e:	f8ad 300a 	strh.w	r3, [sp, #10]
 801da52:	6803      	ldr	r3, [r0, #0]
 801da54:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801da56:	4798      	blx	r3
 801da58:	f010 0f01 	tst.w	r0, #1
 801da5c:	d00b      	beq.n	801da76 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x86>
 801da5e:	6828      	ldr	r0, [r5, #0]
 801da60:	6803      	ldr	r3, [r0, #0]
 801da62:	e894 0006 	ldmia.w	r4, {r1, r2}
 801da66:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801da68:	4798      	blx	r3
 801da6a:	b005      	add	sp, #20
 801da6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801da6e:	4a26      	ldr	r2, [pc, #152]	@ (801db08 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x118>)
 801da70:	e7c7      	b.n	801da02 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x12>
 801da72:	4b24      	ldr	r3, [pc, #144]	@ (801db04 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x114>)
 801da74:	e7cc      	b.n	801da10 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x20>
 801da76:	6830      	ldr	r0, [r6, #0]
 801da78:	f9bd 700e 	ldrsh.w	r7, [sp, #14]
 801da7c:	6803      	ldr	r3, [r0, #0]
 801da7e:	f9bd 500c 	ldrsh.w	r5, [sp, #12]
 801da82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801da84:	4798      	blx	r3
 801da86:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
 801da8a:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 801da8e:	f8bd 4004 	ldrh.w	r4, [sp, #4]
 801da92:	fb14 3402 	smlabb	r4, r4, r2, r3
 801da96:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801da9a:	4404      	add	r4, r0
 801da9c:	6830      	ldr	r0, [r6, #0]
 801da9e:	6803      	ldr	r3, [r0, #0]
 801daa0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801daa2:	4798      	blx	r3
 801daa4:	4917      	ldr	r1, [pc, #92]	@ (801db04 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x114>)
 801daa6:	f9bd 200a 	ldrsh.w	r2, [sp, #10]
 801daaa:	880b      	ldrh	r3, [r1, #0]
 801daac:	f9bd c008 	ldrsh.w	ip, [sp, #8]
 801dab0:	fb03 c202 	mla	r2, r3, r2, ip
 801dab4:	437b      	muls	r3, r7
 801dab6:	eb05 0745 	add.w	r7, r5, r5, lsl #1
 801daba:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801dabe:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801dac2:	4410      	add	r0, r2
 801dac4:	18c2      	adds	r2, r0, r3
 801dac6:	4290      	cmp	r0, r2
 801dac8:	d214      	bcs.n	801daf4 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x104>
 801daca:	eb00 0c07 	add.w	ip, r0, r7
 801dace:	4560      	cmp	r0, ip
 801dad0:	d204      	bcs.n	801dadc <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xec>
 801dad2:	f814 3b01 	ldrb.w	r3, [r4], #1
 801dad6:	f800 3b01 	strb.w	r3, [r0], #1
 801dada:	e7f8      	b.n	801dace <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xde>
 801dadc:	880b      	ldrh	r3, [r1, #0]
 801dade:	1b5b      	subs	r3, r3, r5
 801dae0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801dae4:	4418      	add	r0, r3
 801dae6:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 801daea:	1b5b      	subs	r3, r3, r5
 801daec:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801daf0:	441c      	add	r4, r3
 801daf2:	e7e8      	b.n	801dac6 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xd6>
 801daf4:	6830      	ldr	r0, [r6, #0]
 801daf6:	6803      	ldr	r3, [r0, #0]
 801daf8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801dafa:	4798      	blx	r3
 801dafc:	e7b5      	b.n	801da6a <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x7a>
 801dafe:	bf00      	nop
 801db00:	24028e18 	.word	0x24028e18
 801db04:	24028e1a 	.word	0x24028e1a
 801db08:	24028e1c 	.word	0x24028e1c
 801db0c:	24028e20 	.word	0x24028e20

0801db10 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h>:
 801db10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801db14:	b08f      	sub	sp, #60	@ 0x3c
 801db16:	461c      	mov	r4, r3
 801db18:	9203      	str	r2, [sp, #12]
 801db1a:	f89d 2064 	ldrb.w	r2, [sp, #100]	@ 0x64
 801db1e:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 801db20:	6820      	ldr	r0, [r4, #0]
 801db22:	9100      	str	r1, [sp, #0]
 801db24:	9204      	str	r2, [sp, #16]
 801db26:	aa0a      	add	r2, sp, #40	@ 0x28
 801db28:	6861      	ldr	r1, [r4, #4]
 801db2a:	c203      	stmia	r2!, {r0, r1}
 801db2c:	6818      	ldr	r0, [r3, #0]
 801db2e:	aa0c      	add	r2, sp, #48	@ 0x30
 801db30:	6859      	ldr	r1, [r3, #4]
 801db32:	c203      	stmia	r2!, {r0, r1}
 801db34:	a80a      	add	r0, sp, #40	@ 0x28
 801db36:	f7f9 ffd1 	bl	8017adc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801db3a:	4621      	mov	r1, r4
 801db3c:	a80c      	add	r0, sp, #48	@ 0x30
 801db3e:	f7fa f811 	bl	8017b64 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801db42:	f9bd 602c 	ldrsh.w	r6, [sp, #44]	@ 0x2c
 801db46:	f9bd 502e 	ldrsh.w	r5, [sp, #46]	@ 0x2e
 801db4a:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 801db4e:	f8bd 0030 	ldrh.w	r0, [sp, #48]	@ 0x30
 801db52:	bfdb      	ittet	le
 801db54:	b2b3      	uxthle	r3, r6
 801db56:	f44f 6280 	movle.w	r2, #1024	@ 0x400
 801db5a:	2301      	movgt	r3, #1
 801db5c:	fb92 f3f3 	sdivle	r3, r2, r3
 801db60:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	@ 0x32
 801db64:	441d      	add	r5, r3
 801db66:	fb92 f1f3 	sdiv	r1, r2, r3
 801db6a:	fa1f fc81 	uxth.w	ip, r1
 801db6e:	3d01      	subs	r5, #1
 801db70:	fb0c 2413 	mls	r4, ip, r3, r2
 801db74:	4661      	mov	r1, ip
 801db76:	fb14 f406 	smulbb	r4, r4, r6
 801db7a:	4404      	add	r4, r0
 801db7c:	fb95 f5f3 	sdiv	r5, r5, r3
 801db80:	b2a4      	uxth	r4, r4
 801db82:	b131      	cbz	r1, 801db92 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x82>
 801db84:	9b03      	ldr	r3, [sp, #12]
 801db86:	9900      	ldr	r1, [sp, #0]
 801db88:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 801db8c:	ba1b      	rev	r3, r3
 801db8e:	4419      	add	r1, r3
 801db90:	9100      	str	r1, [sp, #0]
 801db92:	f8bd 3028 	ldrh.w	r3, [sp, #40]	@ 0x28
 801db96:	b2ad      	uxth	r5, r5
 801db98:	f9bd 6036 	ldrsh.w	r6, [sp, #54]	@ 0x36
 801db9c:	4418      	add	r0, r3
 801db9e:	f8bd 302a 	ldrh.w	r3, [sp, #42]	@ 0x2a
 801dba2:	00ad      	lsls	r5, r5, #2
 801dba4:	441a      	add	r2, r3
 801dba6:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	@ 0x34
 801dbaa:	f8ad 0030 	strh.w	r0, [sp, #48]	@ 0x30
 801dbae:	9301      	str	r3, [sp, #4]
 801dbb0:	4b79      	ldr	r3, [pc, #484]	@ (801dd98 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x288>)
 801dbb2:	f8ad 2032 	strh.w	r2, [sp, #50]	@ 0x32
 801dbb6:	6818      	ldr	r0, [r3, #0]
 801dbb8:	6803      	ldr	r3, [r0, #0]
 801dbba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801dbbc:	4798      	blx	r3
 801dbbe:	4a77      	ldr	r2, [pc, #476]	@ (801dd9c <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x28c>)
 801dbc0:	f9bd 1032 	ldrsh.w	r1, [sp, #50]	@ 0x32
 801dbc4:	2c00      	cmp	r4, #0
 801dbc6:	8813      	ldrh	r3, [r2, #0]
 801dbc8:	f9bd c030 	ldrsh.w	ip, [sp, #48]	@ 0x30
 801dbcc:	9209      	str	r2, [sp, #36]	@ 0x24
 801dbce:	fb03 c101 	mla	r1, r3, r1, ip
 801dbd2:	fb06 f303 	mul.w	r3, r6, r3
 801dbd6:	bf18      	it	ne
 801dbd8:	2600      	movne	r6, #0
 801dbda:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801dbde:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801dbe2:	4408      	add	r0, r1
 801dbe4:	4403      	add	r3, r0
 801dbe6:	9306      	str	r3, [sp, #24]
 801dbe8:	f105 0304 	add.w	r3, r5, #4
 801dbec:	9305      	str	r3, [sp, #20]
 801dbee:	9b01      	ldr	r3, [sp, #4]
 801dbf0:	bf08      	it	eq
 801dbf2:	461e      	moveq	r6, r3
 801dbf4:	2300      	movs	r3, #0
 801dbf6:	b2b6      	uxth	r6, r6
 801dbf8:	9302      	str	r3, [sp, #8]
 801dbfa:	9a06      	ldr	r2, [sp, #24]
 801dbfc:	4290      	cmp	r0, r2
 801dbfe:	f080 80c2 	bcs.w	801dd86 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x276>
 801dc02:	b963      	cbnz	r3, 801dc1e <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x10e>
 801dc04:	9b00      	ldr	r3, [sp, #0]
 801dc06:	781a      	ldrb	r2, [r3, #0]
 801dc08:	0993      	lsrs	r3, r2, #6
 801dc0a:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 801dc0e:	9202      	str	r2, [sp, #8]
 801dc10:	1e5a      	subs	r2, r3, #1
 801dc12:	2a02      	cmp	r2, #2
 801dc14:	d815      	bhi.n	801dc42 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x132>
 801dc16:	9a00      	ldr	r2, [sp, #0]
 801dc18:	b29b      	uxth	r3, r3
 801dc1a:	3201      	adds	r2, #1
 801dc1c:	9200      	str	r2, [sp, #0]
 801dc1e:	b1b4      	cbz	r4, 801dc4e <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x13e>
 801dc20:	429c      	cmp	r4, r3
 801dc22:	bf91      	iteee	ls
 801dc24:	1b1c      	subls	r4, r3, r4
 801dc26:	1ae4      	subhi	r4, r4, r3
 801dc28:	4635      	movhi	r5, r6
 801dc2a:	f04f 0e00 	movhi.w	lr, #0
 801dc2e:	bf9b      	ittet	ls
 801dc30:	fa1f fe84 	uxthls.w	lr, r4
 801dc34:	f8bd 5004 	ldrhls.w	r5, [sp, #4]
 801dc38:	b2a4      	uxthhi	r4, r4
 801dc3a:	2400      	movls	r4, #0
 801dc3c:	4673      	mov	r3, lr
 801dc3e:	462e      	mov	r6, r5
 801dc40:	e7db      	b.n	801dbfa <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xea>
 801dc42:	9a00      	ldr	r2, [sp, #0]
 801dc44:	9b00      	ldr	r3, [sp, #0]
 801dc46:	3202      	adds	r2, #2
 801dc48:	785b      	ldrb	r3, [r3, #1]
 801dc4a:	9200      	str	r2, [sp, #0]
 801dc4c:	e7e7      	b.n	801dc1e <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x10e>
 801dc4e:	2204      	movs	r2, #4
 801dc50:	9905      	ldr	r1, [sp, #20]
 801dc52:	429e      	cmp	r6, r3
 801dc54:	4615      	mov	r5, r2
 801dc56:	9a02      	ldr	r2, [sp, #8]
 801dc58:	bf94      	ite	ls
 801dc5a:	eba3 0e06 	subls.w	lr, r3, r6
 801dc5e:	46a6      	movhi	lr, r4
 801dc60:	fb15 1202 	smlabb	r2, r5, r2, r1
 801dc64:	9903      	ldr	r1, [sp, #12]
 801dc66:	bf8c      	ite	hi
 801dc68:	1af5      	subhi	r5, r6, r3
 801dc6a:	fa1f fe8e 	uxthls.w	lr, lr
 801dc6e:	f851 c002 	ldr.w	ip, [r1, r2]
 801dc72:	bf9a      	itte	ls
 801dc74:	4625      	movls	r5, r4
 801dc76:	4632      	movls	r2, r6
 801dc78:	b2ad      	uxthhi	r5, r5
 801dc7a:	ea4f 611c 	mov.w	r1, ip, lsr #24
 801dc7e:	bf88      	it	hi
 801dc80:	461a      	movhi	r2, r3
 801dc82:	b179      	cbz	r1, 801dca4 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x194>
 801dc84:	29ff      	cmp	r1, #255	@ 0xff
 801dc86:	fa5f f98c 	uxtb.w	r9, ip
 801dc8a:	f3cc 2807 	ubfx	r8, ip, #8, #8
 801dc8e:	f3cc 4c07 	ubfx	ip, ip, #16, #8
 801dc92:	d126      	bne.n	801dce2 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1d2>
 801dc94:	9f04      	ldr	r7, [sp, #16]
 801dc96:	2fff      	cmp	r7, #255	@ 0xff
 801dc98:	d123      	bne.n	801dce2 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1d2>
 801dc9a:	4682      	mov	sl, r0
 801dc9c:	4611      	mov	r1, r2
 801dc9e:	f10a 0a03 	add.w	sl, sl, #3
 801dca2:	b9a9      	cbnz	r1, 801dcd0 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1c0>
 801dca4:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801dca8:	429e      	cmp	r6, r3
 801dcaa:	4410      	add	r0, r2
 801dcac:	d8c6      	bhi.n	801dc3c <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x12c>
 801dcae:	f8bd 5004 	ldrh.w	r5, [sp, #4]
 801dcb2:	f8bd 402c 	ldrh.w	r4, [sp, #44]	@ 0x2c
 801dcb6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801dcb8:	1b64      	subs	r4, r4, r5
 801dcba:	9a01      	ldr	r2, [sp, #4]
 801dcbc:	881b      	ldrh	r3, [r3, #0]
 801dcbe:	b2a4      	uxth	r4, r4
 801dcc0:	1a9b      	subs	r3, r3, r2
 801dcc2:	2c00      	cmp	r4, #0
 801dcc4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801dcc8:	bf18      	it	ne
 801dcca:	2500      	movne	r5, #0
 801dccc:	4418      	add	r0, r3
 801dcce:	e7b5      	b.n	801dc3c <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x12c>
 801dcd0:	3901      	subs	r1, #1
 801dcd2:	f80a 9c03 	strb.w	r9, [sl, #-3]
 801dcd6:	f80a 8c02 	strb.w	r8, [sl, #-2]
 801dcda:	f80a cc01 	strb.w	ip, [sl, #-1]
 801dcde:	b289      	uxth	r1, r1
 801dce0:	e7dd      	b.n	801dc9e <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x18e>
 801dce2:	9f04      	ldr	r7, [sp, #16]
 801dce4:	fb07 fa01 	mul.w	sl, r7, r1
 801dce8:	f10a 0101 	add.w	r1, sl, #1
 801dcec:	eb01 212a 	add.w	r1, r1, sl, asr #8
 801dcf0:	1209      	asrs	r1, r1, #8
 801dcf2:	ea6f 0a01 	mvn.w	sl, r1
 801dcf6:	b289      	uxth	r1, r1
 801dcf8:	fb19 f901 	smulbb	r9, r9, r1
 801dcfc:	fa5f fa8a 	uxtb.w	sl, sl
 801dd00:	fb18 f801 	smulbb	r8, r8, r1
 801dd04:	fb1c f101 	smulbb	r1, ip, r1
 801dd08:	fa1f f789 	uxth.w	r7, r9
 801dd0c:	4684      	mov	ip, r0
 801dd0e:	4691      	mov	r9, r2
 801dd10:	9707      	str	r7, [sp, #28]
 801dd12:	b289      	uxth	r1, r1
 801dd14:	fa1f f788 	uxth.w	r7, r8
 801dd18:	9708      	str	r7, [sp, #32]
 801dd1a:	f10c 0c03 	add.w	ip, ip, #3
 801dd1e:	f1b9 0f00 	cmp.w	r9, #0
 801dd22:	d0bf      	beq.n	801dca4 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x194>
 801dd24:	f81c 8c03 	ldrb.w	r8, [ip, #-3]
 801dd28:	f109 39ff 	add.w	r9, r9, #4294967295
 801dd2c:	9f07      	ldr	r7, [sp, #28]
 801dd2e:	fa1f f989 	uxth.w	r9, r9
 801dd32:	fb08 780a 	mla	r8, r8, sl, r7
 801dd36:	9f08      	ldr	r7, [sp, #32]
 801dd38:	fa1f f888 	uxth.w	r8, r8
 801dd3c:	f108 0b01 	add.w	fp, r8, #1
 801dd40:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 801dd44:	ea4f 2828 	mov.w	r8, r8, asr #8
 801dd48:	f80c 8c03 	strb.w	r8, [ip, #-3]
 801dd4c:	f81c 8c02 	ldrb.w	r8, [ip, #-2]
 801dd50:	fb08 780a 	mla	r8, r8, sl, r7
 801dd54:	fa1f f888 	uxth.w	r8, r8
 801dd58:	f108 0b01 	add.w	fp, r8, #1
 801dd5c:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 801dd60:	ea4f 2828 	mov.w	r8, r8, asr #8
 801dd64:	f80c 8c02 	strb.w	r8, [ip, #-2]
 801dd68:	f81c 8c01 	ldrb.w	r8, [ip, #-1]
 801dd6c:	fb08 180a 	mla	r8, r8, sl, r1
 801dd70:	fa1f f888 	uxth.w	r8, r8
 801dd74:	f108 0b01 	add.w	fp, r8, #1
 801dd78:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 801dd7c:	ea4f 2828 	mov.w	r8, r8, asr #8
 801dd80:	f80c 8c01 	strb.w	r8, [ip, #-1]
 801dd84:	e7c9      	b.n	801dd1a <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x20a>
 801dd86:	4b04      	ldr	r3, [pc, #16]	@ (801dd98 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x288>)
 801dd88:	6818      	ldr	r0, [r3, #0]
 801dd8a:	6803      	ldr	r3, [r0, #0]
 801dd8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801dd8e:	4798      	blx	r3
 801dd90:	b00f      	add	sp, #60	@ 0x3c
 801dd92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801dd96:	bf00      	nop
 801dd98:	24028e20 	.word	0x24028e20
 801dd9c:	24028e1a 	.word	0x24028e1a

0801dda0 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t>:
 801dda0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801dda4:	b089      	sub	sp, #36	@ 0x24
 801dda6:	4607      	mov	r7, r0
 801dda8:	4689      	mov	r9, r1
 801ddaa:	4692      	mov	sl, r2
 801ddac:	ac08      	add	r4, sp, #32
 801ddae:	461e      	mov	r6, r3
 801ddb0:	f824 3d0c 	strh.w	r3, [r4, #-12]!
 801ddb4:	4620      	mov	r0, r4
 801ddb6:	f7fd ff77 	bl	801bca8 <_ZNK8touchgfx6Bitmap7getDataEv>
 801ddba:	683b      	ldr	r3, [r7, #0]
 801ddbc:	4605      	mov	r5, r0
 801ddbe:	4620      	mov	r0, r4
 801ddc0:	f8d3 8018 	ldr.w	r8, [r3, #24]
 801ddc4:	f7fd fe7e 	bl	801bac4 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801ddc8:	4683      	mov	fp, r0
 801ddca:	4620      	mov	r0, r4
 801ddcc:	f7fd feae 	bl	801bb2c <_ZNK8touchgfx6Bitmap9getHeightEv>
 801ddd0:	4653      	mov	r3, sl
 801ddd2:	464a      	mov	r2, r9
 801ddd4:	4639      	mov	r1, r7
 801ddd6:	9500      	str	r5, [sp, #0]
 801ddd8:	e9cd b001 	strd	fp, r0, [sp, #4]
 801dddc:	a806      	add	r0, sp, #24
 801ddde:	47c0      	blx	r8
 801dde0:	a906      	add	r1, sp, #24
 801dde2:	4630      	mov	r0, r6
 801dde4:	f7fd fd52 	bl	801b88c <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE>
 801dde8:	4628      	mov	r0, r5
 801ddea:	b009      	add	sp, #36	@ 0x24
 801ddec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801ddf0 <_ZN8touchgfx8LCD24bppD0Ev>:
 801ddf0:	b510      	push	{r4, lr}
 801ddf2:	4604      	mov	r4, r0
 801ddf4:	216c      	movs	r1, #108	@ 0x6c
 801ddf6:	f009 fb4a 	bl	802748e <_ZdlPvj>
 801ddfa:	4620      	mov	r0, r4
 801ddfc:	bd10      	pop	{r4, pc}

0801ddfe <_ZN8touchgfx8LCD24bpp17DecompressorL8_L4D0Ev>:
 801ddfe:	b510      	push	{r4, lr}
 801de00:	4604      	mov	r4, r0
 801de02:	2104      	movs	r1, #4
 801de04:	f009 fb43 	bl	802748e <_ZdlPvj>
 801de08:	4620      	mov	r0, r4
 801de0a:	bd10      	pop	{r4, pc}

0801de0c <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLED0Ev>:
 801de0c:	b510      	push	{r4, lr}
 801de0e:	4604      	mov	r4, r0
 801de10:	2104      	movs	r1, #4
 801de12:	f009 fb3c 	bl	802748e <_ZdlPvj>
 801de16:	4620      	mov	r0, r4
 801de18:	bd10      	pop	{r4, pc}

0801de1a <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW9D0Ev>:
 801de1a:	b510      	push	{r4, lr}
 801de1c:	4604      	mov	r4, r0
 801de1e:	f640 0144 	movw	r1, #2116	@ 0x844
 801de22:	f009 fb34 	bl	802748e <_ZdlPvj>
 801de26:	4620      	mov	r0, r4
 801de28:	bd10      	pop	{r4, pc}

0801de2a <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOID0Ev>:
 801de2a:	b510      	push	{r4, lr}
 801de2c:	4604      	mov	r4, r0
 801de2e:	f44f 7182 	mov.w	r1, #260	@ 0x104
 801de32:	f009 fb2c 	bl	802748e <_ZdlPvj>
 801de36:	4620      	mov	r0, r4
 801de38:	bd10      	pop	{r4, pc}

0801de3a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 801de3a:	b510      	push	{r4, lr}
 801de3c:	4604      	mov	r4, r0
 801de3e:	2104      	movs	r1, #4
 801de40:	f009 fb25 	bl	802748e <_ZdlPvj>
 801de44:	4620      	mov	r0, r4
 801de46:	bd10      	pop	{r4, pc}

0801de48 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 801de48:	b510      	push	{r4, lr}
 801de4a:	4604      	mov	r4, r0
 801de4c:	2104      	movs	r1, #4
 801de4e:	f009 fb1e 	bl	802748e <_ZdlPvj>
 801de52:	4620      	mov	r0, r4
 801de54:	bd10      	pop	{r4, pc}

0801de56 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 801de56:	b510      	push	{r4, lr}
 801de58:	4604      	mov	r4, r0
 801de5a:	2104      	movs	r1, #4
 801de5c:	f009 fb17 	bl	802748e <_ZdlPvj>
 801de60:	4620      	mov	r0, r4
 801de62:	bd10      	pop	{r4, pc}

0801de64 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 801de64:	b510      	push	{r4, lr}
 801de66:	4604      	mov	r4, r0
 801de68:	2104      	movs	r1, #4
 801de6a:	f009 fb10 	bl	802748e <_ZdlPvj>
 801de6e:	4620      	mov	r0, r4
 801de70:	bd10      	pop	{r4, pc}

0801de72 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 801de72:	b510      	push	{r4, lr}
 801de74:	4604      	mov	r4, r0
 801de76:	2104      	movs	r1, #4
 801de78:	f009 fb09 	bl	802748e <_ZdlPvj>
 801de7c:	4620      	mov	r0, r4
 801de7e:	bd10      	pop	{r4, pc}

0801de80 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 801de80:	b510      	push	{r4, lr}
 801de82:	4604      	mov	r4, r0
 801de84:	2104      	movs	r1, #4
 801de86:	f009 fb02 	bl	802748e <_ZdlPvj>
 801de8a:	4620      	mov	r0, r4
 801de8c:	bd10      	pop	{r4, pc}

0801de8e <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 801de8e:	b510      	push	{r4, lr}
 801de90:	4604      	mov	r4, r0
 801de92:	2104      	movs	r1, #4
 801de94:	f009 fafb 	bl	802748e <_ZdlPvj>
 801de98:	4620      	mov	r0, r4
 801de9a:	bd10      	pop	{r4, pc}

0801de9c <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 801de9c:	b510      	push	{r4, lr}
 801de9e:	4604      	mov	r4, r0
 801dea0:	2104      	movs	r1, #4
 801dea2:	f009 faf4 	bl	802748e <_ZdlPvj>
 801dea6:	4620      	mov	r0, r4
 801dea8:	bd10      	pop	{r4, pc}

0801deaa <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 801deaa:	b510      	push	{r4, lr}
 801deac:	4604      	mov	r4, r0
 801deae:	2104      	movs	r1, #4
 801deb0:	f009 faed 	bl	802748e <_ZdlPvj>
 801deb4:	4620      	mov	r0, r4
 801deb6:	bd10      	pop	{r4, pc}

0801deb8 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 801deb8:	b510      	push	{r4, lr}
 801deba:	4604      	mov	r4, r0
 801debc:	2104      	movs	r1, #4
 801debe:	f009 fae6 	bl	802748e <_ZdlPvj>
 801dec2:	4620      	mov	r0, r4
 801dec4:	bd10      	pop	{r4, pc}

0801dec6 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 801dec6:	b510      	push	{r4, lr}
 801dec8:	4604      	mov	r4, r0
 801deca:	2104      	movs	r1, #4
 801decc:	f009 fadf 	bl	802748e <_ZdlPvj>
 801ded0:	4620      	mov	r0, r4
 801ded2:	bd10      	pop	{r4, pc}

0801ded4 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 801ded4:	b510      	push	{r4, lr}
 801ded6:	4604      	mov	r4, r0
 801ded8:	2104      	movs	r1, #4
 801deda:	f009 fad8 	bl	802748e <_ZdlPvj>
 801dede:	4620      	mov	r0, r4
 801dee0:	bd10      	pop	{r4, pc}

0801dee2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 801dee2:	b510      	push	{r4, lr}
 801dee4:	4604      	mov	r4, r0
 801dee6:	2104      	movs	r1, #4
 801dee8:	f009 fad1 	bl	802748e <_ZdlPvj>
 801deec:	4620      	mov	r0, r4
 801deee:	bd10      	pop	{r4, pc}

0801def0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 801def0:	b510      	push	{r4, lr}
 801def2:	4604      	mov	r4, r0
 801def4:	2104      	movs	r1, #4
 801def6:	f009 faca 	bl	802748e <_ZdlPvj>
 801defa:	4620      	mov	r0, r4
 801defc:	bd10      	pop	{r4, pc}

0801defe <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 801defe:	b510      	push	{r4, lr}
 801df00:	4604      	mov	r4, r0
 801df02:	2104      	movs	r1, #4
 801df04:	f009 fac3 	bl	802748e <_ZdlPvj>
 801df08:	4620      	mov	r0, r4
 801df0a:	bd10      	pop	{r4, pc}

0801df0c <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 801df0c:	b510      	push	{r4, lr}
 801df0e:	4604      	mov	r4, r0
 801df10:	2104      	movs	r1, #4
 801df12:	f009 fabc 	bl	802748e <_ZdlPvj>
 801df16:	4620      	mov	r0, r4
 801df18:	bd10      	pop	{r4, pc}

0801df1a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGAD0Ev>:
 801df1a:	b510      	push	{r4, lr}
 801df1c:	4604      	mov	r4, r0
 801df1e:	2104      	movs	r1, #4
 801df20:	f009 fab5 	bl	802748e <_ZdlPvj>
 801df24:	4620      	mov	r0, r4
 801df26:	bd10      	pop	{r4, pc}

0801df28 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GAD0Ev>:
 801df28:	b510      	push	{r4, lr}
 801df2a:	4604      	mov	r4, r0
 801df2c:	2104      	movs	r1, #4
 801df2e:	f009 faae 	bl	802748e <_ZdlPvj>
 801df32:	4620      	mov	r0, r4
 801df34:	bd10      	pop	{r4, pc}

0801df36 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGAD0Ev>:
 801df36:	b510      	push	{r4, lr}
 801df38:	4604      	mov	r4, r0
 801df3a:	2104      	movs	r1, #4
 801df3c:	f009 faa7 	bl	802748e <_ZdlPvj>
 801df40:	4620      	mov	r0, r4
 801df42:	bd10      	pop	{r4, pc}

0801df44 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GAD0Ev>:
 801df44:	b510      	push	{r4, lr}
 801df46:	4604      	mov	r4, r0
 801df48:	2104      	movs	r1, #4
 801df4a:	f009 faa0 	bl	802748e <_ZdlPvj>
 801df4e:	4620      	mov	r0, r4
 801df50:	bd10      	pop	{r4, pc}
	...

0801df54 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h>:
 801df54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801df58:	b08f      	sub	sp, #60	@ 0x3c
 801df5a:	461c      	mov	r4, r3
 801df5c:	460e      	mov	r6, r1
 801df5e:	9206      	str	r2, [sp, #24]
 801df60:	f89d 2064 	ldrb.w	r2, [sp, #100]	@ 0x64
 801df64:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 801df66:	9202      	str	r2, [sp, #8]
 801df68:	2a00      	cmp	r2, #0
 801df6a:	f000 8128 	beq.w	801e1be <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x26a>
 801df6e:	6820      	ldr	r0, [r4, #0]
 801df70:	aa0a      	add	r2, sp, #40	@ 0x28
 801df72:	6861      	ldr	r1, [r4, #4]
 801df74:	c203      	stmia	r2!, {r0, r1}
 801df76:	6818      	ldr	r0, [r3, #0]
 801df78:	aa0c      	add	r2, sp, #48	@ 0x30
 801df7a:	6859      	ldr	r1, [r3, #4]
 801df7c:	c203      	stmia	r2!, {r0, r1}
 801df7e:	a80a      	add	r0, sp, #40	@ 0x28
 801df80:	f7f9 fdac 	bl	8017adc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801df84:	4621      	mov	r1, r4
 801df86:	a80c      	add	r0, sp, #48	@ 0x30
 801df88:	f7f9 fdec 	bl	8017b64 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801df8c:	f9bd 702c 	ldrsh.w	r7, [sp, #44]	@ 0x2c
 801df90:	f9bd 502e 	ldrsh.w	r5, [sp, #46]	@ 0x2e
 801df94:	f5b7 6f80 	cmp.w	r7, #1024	@ 0x400
 801df98:	f8bd 0030 	ldrh.w	r0, [sp, #48]	@ 0x30
 801df9c:	bfdb      	ittet	le
 801df9e:	b2bb      	uxthle	r3, r7
 801dfa0:	f44f 6280 	movle.w	r2, #1024	@ 0x400
 801dfa4:	2301      	movgt	r3, #1
 801dfa6:	fb92 f3f3 	sdivle	r3, r2, r3
 801dfaa:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	@ 0x32
 801dfae:	441d      	add	r5, r3
 801dfb0:	fb92 f1f3 	sdiv	r1, r2, r3
 801dfb4:	fa1f fc81 	uxth.w	ip, r1
 801dfb8:	3d01      	subs	r5, #1
 801dfba:	fb0c 2413 	mls	r4, ip, r3, r2
 801dfbe:	4661      	mov	r1, ip
 801dfc0:	fb14 f407 	smulbb	r4, r4, r7
 801dfc4:	4404      	add	r4, r0
 801dfc6:	fb95 f5f3 	sdiv	r5, r5, r3
 801dfca:	b2a4      	uxth	r4, r4
 801dfcc:	b121      	cbz	r1, 801dfd8 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x84>
 801dfce:	9b06      	ldr	r3, [sp, #24]
 801dfd0:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 801dfd4:	ba1b      	rev	r3, r3
 801dfd6:	441e      	add	r6, r3
 801dfd8:	f8bd 3028 	ldrh.w	r3, [sp, #40]	@ 0x28
 801dfdc:	b2ad      	uxth	r5, r5
 801dfde:	f9bd 8034 	ldrsh.w	r8, [sp, #52]	@ 0x34
 801dfe2:	4418      	add	r0, r3
 801dfe4:	f8bd 302a 	ldrh.w	r3, [sp, #42]	@ 0x2a
 801dfe8:	f9bd 7036 	ldrsh.w	r7, [sp, #54]	@ 0x36
 801dfec:	00ad      	lsls	r5, r5, #2
 801dfee:	441a      	add	r2, r3
 801dff0:	4b74      	ldr	r3, [pc, #464]	@ (801e1c4 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x270>)
 801dff2:	f8ad 0030 	strh.w	r0, [sp, #48]	@ 0x30
 801dff6:	6818      	ldr	r0, [r3, #0]
 801dff8:	f8ad 2032 	strh.w	r2, [sp, #50]	@ 0x32
 801dffc:	6803      	ldr	r3, [r0, #0]
 801dffe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801e000:	4798      	blx	r3
 801e002:	4a71      	ldr	r2, [pc, #452]	@ (801e1c8 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x274>)
 801e004:	f9bd 1032 	ldrsh.w	r1, [sp, #50]	@ 0x32
 801e008:	2c00      	cmp	r4, #0
 801e00a:	8813      	ldrh	r3, [r2, #0]
 801e00c:	f9bd c030 	ldrsh.w	ip, [sp, #48]	@ 0x30
 801e010:	9209      	str	r2, [sp, #36]	@ 0x24
 801e012:	fb03 c101 	mla	r1, r3, r1, ip
 801e016:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 801e01a:	fb03 f307 	mul.w	r3, r3, r7
 801e01e:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801e022:	9204      	str	r2, [sp, #16]
 801e024:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801e028:	9a02      	ldr	r2, [sp, #8]
 801e02a:	4408      	add	r0, r1
 801e02c:	f1c2 02ff 	rsb	r2, r2, #255	@ 0xff
 801e030:	4403      	add	r3, r0
 801e032:	b292      	uxth	r2, r2
 801e034:	9307      	str	r3, [sp, #28]
 801e036:	f105 0304 	add.w	r3, r5, #4
 801e03a:	bf0c      	ite	eq
 801e03c:	4645      	moveq	r5, r8
 801e03e:	2500      	movne	r5, #0
 801e040:	9308      	str	r3, [sp, #32]
 801e042:	2300      	movs	r3, #0
 801e044:	b2ad      	uxth	r5, r5
 801e046:	9205      	str	r2, [sp, #20]
 801e048:	9303      	str	r3, [sp, #12]
 801e04a:	9a07      	ldr	r2, [sp, #28]
 801e04c:	4282      	cmp	r2, r0
 801e04e:	f240 80b1 	bls.w	801e1b4 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x260>
 801e052:	b95b      	cbnz	r3, 801e06c <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x118>
 801e054:	7832      	ldrb	r2, [r6, #0]
 801e056:	0993      	lsrs	r3, r2, #6
 801e058:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 801e05c:	9203      	str	r2, [sp, #12]
 801e05e:	1e5a      	subs	r2, r3, #1
 801e060:	2a02      	cmp	r2, #2
 801e062:	bf8d      	iteet	hi
 801e064:	7873      	ldrbhi	r3, [r6, #1]
 801e066:	3601      	addls	r6, #1
 801e068:	b29b      	uxthls	r3, r3
 801e06a:	3602      	addhi	r6, #2
 801e06c:	b184      	cbz	r4, 801e090 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x13c>
 801e06e:	429c      	cmp	r4, r3
 801e070:	bf91      	iteee	ls
 801e072:	1b1c      	subls	r4, r3, r4
 801e074:	1ae4      	subhi	r4, r4, r3
 801e076:	4629      	movhi	r1, r5
 801e078:	f04f 0e00 	movhi.w	lr, #0
 801e07c:	bf9b      	ittet	ls
 801e07e:	fa1f fe84 	uxthls.w	lr, r4
 801e082:	2400      	movls	r4, #0
 801e084:	b2a4      	uxthhi	r4, r4
 801e086:	fa1f f188 	uxthls.w	r1, r8
 801e08a:	4673      	mov	r3, lr
 801e08c:	460d      	mov	r5, r1
 801e08e:	e7dc      	b.n	801e04a <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0xf6>
 801e090:	2203      	movs	r2, #3
 801e092:	9908      	ldr	r1, [sp, #32]
 801e094:	42ab      	cmp	r3, r5
 801e096:	4617      	mov	r7, r2
 801e098:	9a03      	ldr	r2, [sp, #12]
 801e09a:	bf24      	itt	cs
 801e09c:	eba3 0e05 	subcs.w	lr, r3, r5
 801e0a0:	9501      	strcs	r5, [sp, #4]
 801e0a2:	fb17 1702 	smlabb	r7, r7, r2, r1
 801e0a6:	9a06      	ldr	r2, [sp, #24]
 801e0a8:	bf34      	ite	cc
 801e0aa:	1ae9      	subcc	r1, r5, r3
 801e0ac:	fa1f fe8e 	uxthcs.w	lr, lr
 801e0b0:	4417      	add	r7, r2
 801e0b2:	9a02      	ldr	r2, [sp, #8]
 801e0b4:	bf2f      	iteee	cs
 801e0b6:	4621      	movcs	r1, r4
 801e0b8:	b289      	uxthcc	r1, r1
 801e0ba:	9301      	strcc	r3, [sp, #4]
 801e0bc:	46a6      	movcc	lr, r4
 801e0be:	2aff      	cmp	r2, #255	@ 0xff
 801e0c0:	d11e      	bne.n	801e100 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1ac>
 801e0c2:	4681      	mov	r9, r0
 801e0c4:	f8dd c004 	ldr.w	ip, [sp, #4]
 801e0c8:	f109 0903 	add.w	r9, r9, #3
 801e0cc:	f1bc 0f00 	cmp.w	ip, #0
 801e0d0:	d15f      	bne.n	801e192 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x23e>
 801e0d2:	9a01      	ldr	r2, [sp, #4]
 801e0d4:	42ab      	cmp	r3, r5
 801e0d6:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801e0da:	4410      	add	r0, r2
 801e0dc:	d3d5      	bcc.n	801e08a <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x136>
 801e0de:	fa1f f188 	uxth.w	r1, r8
 801e0e2:	f8bd 402c 	ldrh.w	r4, [sp, #44]	@ 0x2c
 801e0e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801e0e8:	1a64      	subs	r4, r4, r1
 801e0ea:	881b      	ldrh	r3, [r3, #0]
 801e0ec:	b2a4      	uxth	r4, r4
 801e0ee:	eba3 0308 	sub.w	r3, r3, r8
 801e0f2:	2c00      	cmp	r4, #0
 801e0f4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801e0f8:	bf18      	it	ne
 801e0fa:	2100      	movne	r1, #0
 801e0fc:	4418      	add	r0, r3
 801e0fe:	e7c4      	b.n	801e08a <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x136>
 801e100:	4684      	mov	ip, r0
 801e102:	f8dd a004 	ldr.w	sl, [sp, #4]
 801e106:	f10c 0c03 	add.w	ip, ip, #3
 801e10a:	f1ba 0f00 	cmp.w	sl, #0
 801e10e:	d0e0      	beq.n	801e0d2 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x17e>
 801e110:	f81c bc03 	ldrb.w	fp, [ip, #-3]
 801e114:	f10a 3aff 	add.w	sl, sl, #4294967295
 801e118:	9a05      	ldr	r2, [sp, #20]
 801e11a:	f897 9000 	ldrb.w	r9, [r7]
 801e11e:	fa1f fa8a 	uxth.w	sl, sl
 801e122:	fb1b fb02 	smulbb	fp, fp, r2
 801e126:	9a04      	ldr	r2, [sp, #16]
 801e128:	fb09 b902 	mla	r9, r9, r2, fp
 801e12c:	9a05      	ldr	r2, [sp, #20]
 801e12e:	fa1f f989 	uxth.w	r9, r9
 801e132:	f109 0b01 	add.w	fp, r9, #1
 801e136:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801e13a:	f81c bc02 	ldrb.w	fp, [ip, #-2]
 801e13e:	fb1b fb02 	smulbb	fp, fp, r2
 801e142:	ea4f 2929 	mov.w	r9, r9, asr #8
 801e146:	9a04      	ldr	r2, [sp, #16]
 801e148:	f80c 9c03 	strb.w	r9, [ip, #-3]
 801e14c:	f897 9001 	ldrb.w	r9, [r7, #1]
 801e150:	fb09 b902 	mla	r9, r9, r2, fp
 801e154:	9a05      	ldr	r2, [sp, #20]
 801e156:	fa1f f989 	uxth.w	r9, r9
 801e15a:	f109 0b01 	add.w	fp, r9, #1
 801e15e:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801e162:	f81c bc01 	ldrb.w	fp, [ip, #-1]
 801e166:	fb1b fb02 	smulbb	fp, fp, r2
 801e16a:	ea4f 2929 	mov.w	r9, r9, asr #8
 801e16e:	9a04      	ldr	r2, [sp, #16]
 801e170:	f80c 9c02 	strb.w	r9, [ip, #-2]
 801e174:	f897 9002 	ldrb.w	r9, [r7, #2]
 801e178:	fb09 b902 	mla	r9, r9, r2, fp
 801e17c:	fa1f f989 	uxth.w	r9, r9
 801e180:	f109 0b01 	add.w	fp, r9, #1
 801e184:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801e188:	ea4f 2929 	mov.w	r9, r9, asr #8
 801e18c:	f80c 9c01 	strb.w	r9, [ip, #-1]
 801e190:	e7b9      	b.n	801e106 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1b2>
 801e192:	f897 a000 	ldrb.w	sl, [r7]
 801e196:	f10c 3cff 	add.w	ip, ip, #4294967295
 801e19a:	f809 ac03 	strb.w	sl, [r9, #-3]
 801e19e:	fa1f fc8c 	uxth.w	ip, ip
 801e1a2:	f897 a001 	ldrb.w	sl, [r7, #1]
 801e1a6:	f809 ac02 	strb.w	sl, [r9, #-2]
 801e1aa:	f897 a002 	ldrb.w	sl, [r7, #2]
 801e1ae:	f809 ac01 	strb.w	sl, [r9, #-1]
 801e1b2:	e789      	b.n	801e0c8 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x174>
 801e1b4:	4b03      	ldr	r3, [pc, #12]	@ (801e1c4 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x270>)
 801e1b6:	6818      	ldr	r0, [r3, #0]
 801e1b8:	6803      	ldr	r3, [r0, #0]
 801e1ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801e1bc:	4798      	blx	r3
 801e1be:	b00f      	add	sp, #60	@ 0x3c
 801e1c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e1c4:	24028e20 	.word	0x24028e20
 801e1c8:	24028e1a 	.word	0x24028e1a

0801e1cc <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h>:
 801e1cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e1d0:	b09b      	sub	sp, #108	@ 0x6c
 801e1d2:	461d      	mov	r5, r3
 801e1d4:	4604      	mov	r4, r0
 801e1d6:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801e1d8:	e9cd 1210 	strd	r1, r2, [sp, #64]	@ 0x40
 801e1dc:	f89d 2094 	ldrb.w	r2, [sp, #148]	@ 0x94
 801e1e0:	9208      	str	r2, [sp, #32]
 801e1e2:	2a00      	cmp	r2, #0
 801e1e4:	f000 81f3 	beq.w	801e5ce <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x402>
 801e1e8:	6828      	ldr	r0, [r5, #0]
 801e1ea:	aa16      	add	r2, sp, #88	@ 0x58
 801e1ec:	6869      	ldr	r1, [r5, #4]
 801e1ee:	c203      	stmia	r2!, {r0, r1}
 801e1f0:	6818      	ldr	r0, [r3, #0]
 801e1f2:	aa18      	add	r2, sp, #96	@ 0x60
 801e1f4:	6859      	ldr	r1, [r3, #4]
 801e1f6:	c203      	stmia	r2!, {r0, r1}
 801e1f8:	a816      	add	r0, sp, #88	@ 0x58
 801e1fa:	f7f9 fc6f 	bl	8017adc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801e1fe:	4629      	mov	r1, r5
 801e200:	a818      	add	r0, sp, #96	@ 0x60
 801e202:	f7f9 fcaf 	bl	8017b64 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801e206:	f9bd 305c 	ldrsh.w	r3, [sp, #92]	@ 0x5c
 801e20a:	f9bd 605e 	ldrsh.w	r6, [sp, #94]	@ 0x5e
 801e20e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 801e212:	f9bd 5066 	ldrsh.w	r5, [sp, #102]	@ 0x66
 801e216:	bfdb      	ittet	le
 801e218:	b29a      	uxthle	r2, r3
 801e21a:	f44f 6180 	movle.w	r1, #1024	@ 0x400
 801e21e:	f04f 0a01 	movgt.w	sl, #1
 801e222:	fb91 faf2 	sdivle	sl, r1, r2
 801e226:	f9bd 2062 	ldrsh.w	r2, [sp, #98]	@ 0x62
 801e22a:	4456      	add	r6, sl
 801e22c:	f8bd 1060 	ldrh.w	r1, [sp, #96]	@ 0x60
 801e230:	3e01      	subs	r6, #1
 801e232:	fb92 f0fa 	sdiv	r0, r2, sl
 801e236:	b280      	uxth	r0, r0
 801e238:	fb00 281a 	mls	r8, r0, sl, r2
 801e23c:	900e      	str	r0, [sp, #56]	@ 0x38
 801e23e:	fb18 f803 	smulbb	r8, r8, r3
 801e242:	f8bd 3058 	ldrh.w	r3, [sp, #88]	@ 0x58
 801e246:	4488      	add	r8, r1
 801e248:	4419      	add	r1, r3
 801e24a:	f8bd 305a 	ldrh.w	r3, [sp, #90]	@ 0x5a
 801e24e:	f8ad 1060 	strh.w	r1, [sp, #96]	@ 0x60
 801e252:	fa1f f888 	uxth.w	r8, r8
 801e256:	441a      	add	r2, r3
 801e258:	f9bd 3064 	ldrsh.w	r3, [sp, #100]	@ 0x64
 801e25c:	9303      	str	r3, [sp, #12]
 801e25e:	4b9c      	ldr	r3, [pc, #624]	@ (801e4d0 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x304>)
 801e260:	f8ad 2062 	strh.w	r2, [sp, #98]	@ 0x62
 801e264:	6818      	ldr	r0, [r3, #0]
 801e266:	6803      	ldr	r3, [r0, #0]
 801e268:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801e26a:	4798      	blx	r3
 801e26c:	4b99      	ldr	r3, [pc, #612]	@ (801e4d4 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x308>)
 801e26e:	f9bd 1062 	ldrsh.w	r1, [sp, #98]	@ 0x62
 801e272:	f1b8 0f00 	cmp.w	r8, #0
 801e276:	881a      	ldrh	r2, [r3, #0]
 801e278:	f9bd 7060 	ldrsh.w	r7, [sp, #96]	@ 0x60
 801e27c:	fb02 f505 	mul.w	r5, r2, r5
 801e280:	fb02 7101 	mla	r1, r2, r1, r7
 801e284:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801e288:	9314      	str	r3, [sp, #80]	@ 0x50
 801e28a:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801e28e:	9b08      	ldr	r3, [sp, #32]
 801e290:	fb96 f6fa 	sdiv	r6, r6, sl
 801e294:	4408      	add	r0, r1
 801e296:	f106 0601 	add.w	r6, r6, #1
 801e29a:	f1c3 03ff 	rsb	r3, r3, #255	@ 0xff
 801e29e:	f04f 0100 	mov.w	r1, #0
 801e2a2:	eb00 0205 	add.w	r2, r0, r5
 801e2a6:	b2b6      	uxth	r6, r6
 801e2a8:	b29b      	uxth	r3, r3
 801e2aa:	910b      	str	r1, [sp, #44]	@ 0x2c
 801e2ac:	9209      	str	r2, [sp, #36]	@ 0x24
 801e2ae:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801e2b0:	930d      	str	r3, [sp, #52]	@ 0x34
 801e2b2:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 801e2b6:	4b88      	ldr	r3, [pc, #544]	@ (801e4d8 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x30c>)
 801e2b8:	f106 0204 	add.w	r2, r6, #4
 801e2bc:	eba3 0304 	sub.w	r3, r3, r4
 801e2c0:	9205      	str	r2, [sp, #20]
 801e2c2:	9a03      	ldr	r2, [sp, #12]
 801e2c4:	bf18      	it	ne
 801e2c6:	2200      	movne	r2, #0
 801e2c8:	9315      	str	r3, [sp, #84]	@ 0x54
 801e2ca:	b292      	uxth	r2, r2
 801e2cc:	990e      	ldr	r1, [sp, #56]	@ 0x38
 801e2ce:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801e2d0:	fa11 f383 	uxtah	r3, r1, r3
 801e2d4:	9911      	ldr	r1, [sp, #68]	@ 0x44
 801e2d6:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 801e2da:	3304      	adds	r3, #4
 801e2dc:	9306      	str	r3, [sp, #24]
 801e2de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801e2e0:	4283      	cmp	r3, r0
 801e2e2:	f240 816f 	bls.w	801e5c4 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x3f8>
 801e2e6:	f8bd 305c 	ldrh.w	r3, [sp, #92]	@ 0x5c
 801e2ea:	f04f 0900 	mov.w	r9, #0
 801e2ee:	9d06      	ldr	r5, [sp, #24]
 801e2f0:	fbb8 f3f3 	udiv	r3, r8, r3
 801e2f4:	ebaa 0303 	sub.w	r3, sl, r3
 801e2f8:	782d      	ldrb	r5, [r5, #0]
 801e2fa:	b29b      	uxth	r3, r3
 801e2fc:	950f      	str	r5, [sp, #60]	@ 0x3c
 801e2fe:	3501      	adds	r5, #1
 801e300:	9312      	str	r3, [sp, #72]	@ 0x48
 801e302:	9b06      	ldr	r3, [sp, #24]
 801e304:	9504      	str	r5, [sp, #16]
 801e306:	7859      	ldrb	r1, [r3, #1]
 801e308:	789b      	ldrb	r3, [r3, #2]
 801e30a:	021b      	lsls	r3, r3, #8
 801e30c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 801e310:	9906      	ldr	r1, [sp, #24]
 801e312:	78c9      	ldrb	r1, [r1, #3]
 801e314:	430b      	orrs	r3, r1
 801e316:	9910      	ldr	r1, [sp, #64]	@ 0x40
 801e318:	4419      	add	r1, r3
 801e31a:	1c4d      	adds	r5, r1, #1
 801e31c:	7849      	ldrb	r1, [r1, #1]
 801e31e:	9502      	str	r5, [sp, #8]
 801e320:	0209      	lsls	r1, r1, #8
 801e322:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 801e324:	f401 71ff 	and.w	r1, r1, #510	@ 0x1fe
 801e328:	5ceb      	ldrb	r3, [r5, r3]
 801e32a:	4319      	orrs	r1, r3
 801e32c:	b28b      	uxth	r3, r1
 801e32e:	f884 1804 	strb.w	r1, [r4, #2052]	@ 0x804
 801e332:	930a      	str	r3, [sp, #40]	@ 0x28
 801e334:	2300      	movs	r3, #0
 801e336:	9307      	str	r3, [sp, #28]
 801e338:	2301      	movs	r3, #1
 801e33a:	e9cd 3300 	strd	r3, r3, [sp]
 801e33e:	469c      	mov	ip, r3
 801e340:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 801e344:	930c      	str	r3, [sp, #48]	@ 0x30
 801e346:	f1b8 0f00 	cmp.w	r8, #0
 801e34a:	f000 8082 	beq.w	801e452 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x286>
 801e34e:	45c4      	cmp	ip, r8
 801e350:	d270      	bcs.n	801e434 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x268>
 801e352:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801e354:	eba8 080c 	sub.w	r8, r8, ip
 801e358:	4611      	mov	r1, r2
 801e35a:	4283      	cmp	r3, r0
 801e35c:	fa1f f888 	uxth.w	r8, r8
 801e360:	d802      	bhi.n	801e368 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x19c>
 801e362:	e074      	b.n	801e44e <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x282>
 801e364:	2b00      	cmp	r3, #0
 801e366:	d15f      	bne.n	801e428 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x25c>
 801e368:	9b02      	ldr	r3, [sp, #8]
 801e36a:	9a01      	ldr	r2, [sp, #4]
 801e36c:	785b      	ldrb	r3, [r3, #1]
 801e36e:	f1c2 0207 	rsb	r2, r2, #7
 801e372:	9d01      	ldr	r5, [sp, #4]
 801e374:	4093      	lsls	r3, r2
 801e376:	005b      	lsls	r3, r3, #1
 801e378:	f403 72ff 	and.w	r2, r3, #510	@ 0x1fe
 801e37c:	9b02      	ldr	r3, [sp, #8]
 801e37e:	781b      	ldrb	r3, [r3, #0]
 801e380:	412b      	asrs	r3, r5
 801e382:	b2db      	uxtb	r3, r3
 801e384:	4313      	orrs	r3, r2
 801e386:	462a      	mov	r2, r5
 801e388:	3201      	adds	r2, #1
 801e38a:	b29e      	uxth	r6, r3
 801e38c:	b2d2      	uxtb	r2, r2
 801e38e:	2a08      	cmp	r2, #8
 801e390:	9201      	str	r2, [sp, #4]
 801e392:	9a02      	ldr	r2, [sp, #8]
 801e394:	bf09      	itett	eq
 801e396:	3202      	addeq	r2, #2
 801e398:	3201      	addne	r2, #1
 801e39a:	9202      	streq	r2, [sp, #8]
 801e39c:	2200      	moveq	r2, #0
 801e39e:	bf14      	ite	ne
 801e3a0:	9202      	strne	r2, [sp, #8]
 801e3a2:	9201      	streq	r2, [sp, #4]
 801e3a4:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801e3a6:	42b2      	cmp	r2, r6
 801e3a8:	d309      	bcc.n	801e3be <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1f2>
 801e3aa:	f884 3804 	strb.w	r3, [r4, #2052]	@ 0x804
 801e3ae:	2301      	movs	r3, #1
 801e3b0:	9a04      	ldr	r2, [sp, #16]
 801e3b2:	f5b2 7f00 	cmp.w	r2, #512	@ 0x200
 801e3b6:	d30e      	bcc.n	801e3d6 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x20a>
 801e3b8:	9300      	str	r3, [sp, #0]
 801e3ba:	2500      	movs	r5, #0
 801e3bc:	e035      	b.n	801e42a <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x25e>
 801e3be:	9b04      	ldr	r3, [sp, #16]
 801e3c0:	429e      	cmp	r6, r3
 801e3c2:	d318      	bcc.n	801e3f6 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x22a>
 801e3c4:	9b00      	ldr	r3, [sp, #0]
 801e3c6:	f894 2804 	ldrb.w	r2, [r4, #2052]	@ 0x804
 801e3ca:	18e3      	adds	r3, r4, r3
 801e3cc:	f883 2804 	strb.w	r2, [r3, #2052]	@ 0x804
 801e3d0:	9b00      	ldr	r3, [sp, #0]
 801e3d2:	3301      	adds	r3, #1
 801e3d4:	b29b      	uxth	r3, r3
 801e3d6:	9a04      	ldr	r2, [sp, #16]
 801e3d8:	f894 5804 	ldrb.w	r5, [r4, #2052]	@ 0x804
 801e3dc:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 801e3e0:	9f00      	ldr	r7, [sp, #0]
 801e3e2:	7115      	strb	r5, [r2, #4]
 801e3e4:	3701      	adds	r7, #1
 801e3e6:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 801e3e8:	7157      	strb	r7, [r2, #5]
 801e3ea:	80d5      	strh	r5, [r2, #6]
 801e3ec:	9a04      	ldr	r2, [sp, #16]
 801e3ee:	3201      	adds	r2, #1
 801e3f0:	b292      	uxth	r2, r2
 801e3f2:	9204      	str	r2, [sp, #16]
 801e3f4:	e7e0      	b.n	801e3b8 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1ec>
 801e3f6:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 801e3fa:	4632      	mov	r2, r6
 801e3fc:	795b      	ldrb	r3, [r3, #5]
 801e3fe:	f603 0504 	addw	r5, r3, #2052	@ 0x804
 801e402:	4425      	add	r5, r4
 801e404:	9f15      	ldr	r7, [sp, #84]	@ 0x54
 801e406:	eb07 0c05 	add.w	ip, r7, r5
 801e40a:	f1bc 0f00 	cmp.w	ip, #0
 801e40e:	dd07      	ble.n	801e420 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x254>
 801e410:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 801e414:	f892 c004 	ldrb.w	ip, [r2, #4]
 801e418:	f805 cd01 	strb.w	ip, [r5, #-1]!
 801e41c:	88d2      	ldrh	r2, [r2, #6]
 801e41e:	e7f1      	b.n	801e404 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x238>
 801e420:	f884 2804 	strb.w	r2, [r4, #2052]	@ 0x804
 801e424:	b29b      	uxth	r3, r3
 801e426:	e7c3      	b.n	801e3b0 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1e4>
 801e428:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 801e42a:	460a      	mov	r2, r1
 801e42c:	960a      	str	r6, [sp, #40]	@ 0x28
 801e42e:	46a9      	mov	r9, r5
 801e430:	469c      	mov	ip, r3
 801e432:	e788      	b.n	801e346 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x17a>
 801e434:	ebac 0308 	sub.w	r3, ip, r8
 801e438:	eb09 0508 	add.w	r5, r9, r8
 801e43c:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 801e440:	b29b      	uxth	r3, r3
 801e442:	b2ad      	uxth	r5, r5
 801e444:	f04f 0800 	mov.w	r8, #0
 801e448:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801e44a:	4282      	cmp	r2, r0
 801e44c:	d88a      	bhi.n	801e364 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x198>
 801e44e:	460a      	mov	r2, r1
 801e450:	e745      	b.n	801e2de <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x112>
 801e452:	4594      	cmp	ip, r2
 801e454:	9d08      	ldr	r5, [sp, #32]
 801e456:	4686      	mov	lr, r0
 801e458:	bf27      	ittee	cs
 801e45a:	ebac 0302 	subcs.w	r3, ip, r2
 801e45e:	4616      	movcs	r6, r2
 801e460:	eba2 010c 	subcc.w	r1, r2, ip
 801e464:	4666      	movcc	r6, ip
 801e466:	bf27      	ittee	cs
 801e468:	b29b      	uxthcs	r3, r3
 801e46a:	4641      	movcs	r1, r8
 801e46c:	b289      	uxthcc	r1, r1
 801e46e:	4643      	movcc	r3, r8
 801e470:	2dff      	cmp	r5, #255	@ 0xff
 801e472:	eb09 0506 	add.w	r5, r9, r6
 801e476:	b2ad      	uxth	r5, r5
 801e478:	d130      	bne.n	801e4dc <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x310>
 801e47a:	45a9      	cmp	r9, r5
 801e47c:	f10e 0e03 	add.w	lr, lr, #3
 801e480:	d17a      	bne.n	801e578 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x3ac>
 801e482:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801e486:	4594      	cmp	ip, r2
 801e488:	4430      	add	r0, r6
 801e48a:	d3db      	bcc.n	801e444 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x278>
 801e48c:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801e48e:	9903      	ldr	r1, [sp, #12]
 801e490:	8812      	ldrh	r2, [r2, #0]
 801e492:	1a52      	subs	r2, r2, r1
 801e494:	9912      	ldr	r1, [sp, #72]	@ 0x48
 801e496:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801e49a:	4410      	add	r0, r2
 801e49c:	9a07      	ldr	r2, [sp, #28]
 801e49e:	3201      	adds	r2, #1
 801e4a0:	428a      	cmp	r2, r1
 801e4a2:	9207      	str	r2, [sp, #28]
 801e4a4:	f040 8081 	bne.w	801e5aa <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x3de>
 801e4a8:	f8bd 8060 	ldrh.w	r8, [sp, #96]	@ 0x60
 801e4ac:	f8bd c058 	ldrh.w	ip, [sp, #88]	@ 0x58
 801e4b0:	9b03      	ldr	r3, [sp, #12]
 801e4b2:	eba8 080c 	sub.w	r8, r8, ip
 801e4b6:	fa1f f888 	uxth.w	r8, r8
 801e4ba:	f1b8 0f00 	cmp.w	r8, #0
 801e4be:	bf08      	it	eq
 801e4c0:	461a      	moveq	r2, r3
 801e4c2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801e4c4:	bf18      	it	ne
 801e4c6:	2200      	movne	r2, #0
 801e4c8:	3301      	adds	r3, #1
 801e4ca:	b292      	uxth	r2, r2
 801e4cc:	930b      	str	r3, [sp, #44]	@ 0x2c
 801e4ce:	e6fd      	b.n	801e2cc <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x100>
 801e4d0:	24028e20 	.word	0x24028e20
 801e4d4:	24028e1a 	.word	0x24028e1a
 801e4d8:	fffff7fb 	.word	0xfffff7fb
 801e4dc:	45a9      	cmp	r9, r5
 801e4de:	f10e 0e03 	add.w	lr, lr, #3
 801e4e2:	d0ce      	beq.n	801e482 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x2b6>
 801e4e4:	f109 0701 	add.w	r7, r9, #1
 801e4e8:	44a1      	add	r9, r4
 801e4ea:	f81e bc03 	ldrb.w	fp, [lr, #-3]
 801e4ee:	f899 8804 	ldrb.w	r8, [r9, #2052]	@ 0x804
 801e4f2:	9713      	str	r7, [sp, #76]	@ 0x4c
 801e4f4:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 801e4f8:	9f05      	ldr	r7, [sp, #20]
 801e4fa:	eb07 0908 	add.w	r9, r7, r8
 801e4fe:	f817 8008 	ldrb.w	r8, [r7, r8]
 801e502:	9f0d      	ldr	r7, [sp, #52]	@ 0x34
 801e504:	fb1b fb07 	smulbb	fp, fp, r7
 801e508:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
 801e50a:	fb08 b807 	mla	r8, r8, r7, fp
 801e50e:	9f0d      	ldr	r7, [sp, #52]	@ 0x34
 801e510:	fa1f f888 	uxth.w	r8, r8
 801e514:	f108 0b01 	add.w	fp, r8, #1
 801e518:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 801e51c:	f81e bc02 	ldrb.w	fp, [lr, #-2]
 801e520:	fb1b fb07 	smulbb	fp, fp, r7
 801e524:	ea4f 2828 	mov.w	r8, r8, asr #8
 801e528:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
 801e52a:	f80e 8c03 	strb.w	r8, [lr, #-3]
 801e52e:	f899 8001 	ldrb.w	r8, [r9, #1]
 801e532:	fb08 b807 	mla	r8, r8, r7, fp
 801e536:	9f0d      	ldr	r7, [sp, #52]	@ 0x34
 801e538:	fa1f f888 	uxth.w	r8, r8
 801e53c:	f108 0b01 	add.w	fp, r8, #1
 801e540:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 801e544:	ea4f 2828 	mov.w	r8, r8, asr #8
 801e548:	f80e 8c02 	strb.w	r8, [lr, #-2]
 801e54c:	f899 8002 	ldrb.w	r8, [r9, #2]
 801e550:	f81e 9c01 	ldrb.w	r9, [lr, #-1]
 801e554:	fb19 f907 	smulbb	r9, r9, r7
 801e558:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
 801e55a:	fb08 9807 	mla	r8, r8, r7, r9
 801e55e:	fa1f f888 	uxth.w	r8, r8
 801e562:	f108 0901 	add.w	r9, r8, #1
 801e566:	eb09 2818 	add.w	r8, r9, r8, lsr #8
 801e56a:	f8bd 904c 	ldrh.w	r9, [sp, #76]	@ 0x4c
 801e56e:	ea4f 2828 	mov.w	r8, r8, asr #8
 801e572:	f80e 8c01 	strb.w	r8, [lr, #-1]
 801e576:	e7b1      	b.n	801e4dc <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x310>
 801e578:	f109 0b01 	add.w	fp, r9, #1
 801e57c:	44a1      	add	r9, r4
 801e57e:	9f05      	ldr	r7, [sp, #20]
 801e580:	f899 8804 	ldrb.w	r8, [r9, #2052]	@ 0x804
 801e584:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 801e588:	eb07 0908 	add.w	r9, r7, r8
 801e58c:	f817 8008 	ldrb.w	r8, [r7, r8]
 801e590:	f80e 8c03 	strb.w	r8, [lr, #-3]
 801e594:	f899 8001 	ldrb.w	r8, [r9, #1]
 801e598:	f80e 8c02 	strb.w	r8, [lr, #-2]
 801e59c:	f899 8002 	ldrb.w	r8, [r9, #2]
 801e5a0:	fa1f f98b 	uxth.w	r9, fp
 801e5a4:	f80e 8c01 	strb.w	r8, [lr, #-1]
 801e5a8:	e767      	b.n	801e47a <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x2ae>
 801e5aa:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 801e5ae:	f8bd 805c 	ldrh.w	r8, [sp, #92]	@ 0x5c
 801e5b2:	eba8 0801 	sub.w	r8, r8, r1
 801e5b6:	fa1f f888 	uxth.w	r8, r8
 801e5ba:	f1b8 0f00 	cmp.w	r8, #0
 801e5be:	bf18      	it	ne
 801e5c0:	2100      	movne	r1, #0
 801e5c2:	e741      	b.n	801e448 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x27c>
 801e5c4:	4b03      	ldr	r3, [pc, #12]	@ (801e5d4 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x408>)
 801e5c6:	6818      	ldr	r0, [r3, #0]
 801e5c8:	6803      	ldr	r3, [r0, #0]
 801e5ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801e5cc:	4798      	blx	r3
 801e5ce:	b01b      	add	sp, #108	@ 0x6c
 801e5d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e5d4:	24028e20 	.word	0x24028e20

0801e5d8 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h>:
 801e5d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e5dc:	b09d      	sub	sp, #116	@ 0x74
 801e5de:	461d      	mov	r5, r3
 801e5e0:	4604      	mov	r4, r0
 801e5e2:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 801e5e4:	e9cd 120f 	strd	r1, r2, [sp, #60]	@ 0x3c
 801e5e8:	f89d 209c 	ldrb.w	r2, [sp, #156]	@ 0x9c
 801e5ec:	920c      	str	r2, [sp, #48]	@ 0x30
 801e5ee:	2a00      	cmp	r2, #0
 801e5f0:	f000 81de 	beq.w	801e9b0 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x3d8>
 801e5f4:	6828      	ldr	r0, [r5, #0]
 801e5f6:	aa18      	add	r2, sp, #96	@ 0x60
 801e5f8:	6869      	ldr	r1, [r5, #4]
 801e5fa:	c203      	stmia	r2!, {r0, r1}
 801e5fc:	6818      	ldr	r0, [r3, #0]
 801e5fe:	aa1a      	add	r2, sp, #104	@ 0x68
 801e600:	6859      	ldr	r1, [r3, #4]
 801e602:	c203      	stmia	r2!, {r0, r1}
 801e604:	a818      	add	r0, sp, #96	@ 0x60
 801e606:	f7f9 fa69 	bl	8017adc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801e60a:	4629      	mov	r1, r5
 801e60c:	a81a      	add	r0, sp, #104	@ 0x68
 801e60e:	f7f9 faa9 	bl	8017b64 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801e612:	f9bd 3064 	ldrsh.w	r3, [sp, #100]	@ 0x64
 801e616:	f9bd 7066 	ldrsh.w	r7, [sp, #102]	@ 0x66
 801e61a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 801e61e:	f9bd 606e 	ldrsh.w	r6, [sp, #110]	@ 0x6e
 801e622:	bfdb      	ittet	le
 801e624:	b29a      	uxthle	r2, r3
 801e626:	f44f 6180 	movle.w	r1, #1024	@ 0x400
 801e62a:	2201      	movgt	r2, #1
 801e62c:	fb91 f2f2 	sdivle	r2, r1, r2
 801e630:	9201      	str	r2, [sp, #4]
 801e632:	9801      	ldr	r0, [sp, #4]
 801e634:	f9bd 206a 	ldrsh.w	r2, [sp, #106]	@ 0x6a
 801e638:	9901      	ldr	r1, [sp, #4]
 801e63a:	fb92 f0f0 	sdiv	r0, r2, r0
 801e63e:	b280      	uxth	r0, r0
 801e640:	440f      	add	r7, r1
 801e642:	900d      	str	r0, [sp, #52]	@ 0x34
 801e644:	3f01      	subs	r7, #1
 801e646:	9801      	ldr	r0, [sp, #4]
 801e648:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 801e64a:	fb05 2510 	mls	r5, r5, r0, r2
 801e64e:	fb97 f7f1 	sdiv	r7, r7, r1
 801e652:	fb15 f503 	smulbb	r5, r5, r3
 801e656:	f8bd 1068 	ldrh.w	r1, [sp, #104]	@ 0x68
 801e65a:	f8bd 3060 	ldrh.w	r3, [sp, #96]	@ 0x60
 801e65e:	3701      	adds	r7, #1
 801e660:	440d      	add	r5, r1
 801e662:	4419      	add	r1, r3
 801e664:	f8bd 3062 	ldrh.w	r3, [sp, #98]	@ 0x62
 801e668:	b2bf      	uxth	r7, r7
 801e66a:	441a      	add	r2, r3
 801e66c:	f9bd 306c 	ldrsh.w	r3, [sp, #108]	@ 0x6c
 801e670:	f8ad 1068 	strh.w	r1, [sp, #104]	@ 0x68
 801e674:	00bf      	lsls	r7, r7, #2
 801e676:	9304      	str	r3, [sp, #16]
 801e678:	b2ad      	uxth	r5, r5
 801e67a:	4bb0      	ldr	r3, [pc, #704]	@ (801e93c <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x364>)
 801e67c:	f8ad 206a 	strh.w	r2, [sp, #106]	@ 0x6a
 801e680:	6818      	ldr	r0, [r3, #0]
 801e682:	6803      	ldr	r3, [r0, #0]
 801e684:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801e686:	4798      	blx	r3
 801e688:	4bad      	ldr	r3, [pc, #692]	@ (801e940 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x368>)
 801e68a:	f9bd 106a 	ldrsh.w	r1, [sp, #106]	@ 0x6a
 801e68e:	2d00      	cmp	r5, #0
 801e690:	881a      	ldrh	r2, [r3, #0]
 801e692:	f9bd c068 	ldrsh.w	ip, [sp, #104]	@ 0x68
 801e696:	fb02 f606 	mul.w	r6, r2, r6
 801e69a:	fb02 c101 	mla	r1, r2, r1, ip
 801e69e:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801e6a2:	9316      	str	r3, [sp, #88]	@ 0x58
 801e6a4:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801e6a8:	4ba6      	ldr	r3, [pc, #664]	@ (801e944 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x36c>)
 801e6aa:	eb00 0801 	add.w	r8, r0, r1
 801e6ae:	bf18      	it	ne
 801e6b0:	2100      	movne	r1, #0
 801e6b2:	eba3 0304 	sub.w	r3, r3, r4
 801e6b6:	eb08 0206 	add.w	r2, r8, r6
 801e6ba:	9317      	str	r3, [sp, #92]	@ 0x5c
 801e6bc:	9208      	str	r2, [sp, #32]
 801e6be:	f107 0204 	add.w	r2, r7, #4
 801e6c2:	9211      	str	r2, [sp, #68]	@ 0x44
 801e6c4:	9a04      	ldr	r2, [sp, #16]
 801e6c6:	bf08      	it	eq
 801e6c8:	4611      	moveq	r1, r2
 801e6ca:	2200      	movs	r2, #0
 801e6cc:	b289      	uxth	r1, r1
 801e6ce:	920b      	str	r2, [sp, #44]	@ 0x2c
 801e6d0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801e6d2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801e6d4:	fa12 f383 	uxtah	r3, r2, r3
 801e6d8:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801e6da:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801e6de:	3304      	adds	r3, #4
 801e6e0:	9306      	str	r3, [sp, #24]
 801e6e2:	9b08      	ldr	r3, [sp, #32]
 801e6e4:	4543      	cmp	r3, r8
 801e6e6:	f240 815e 	bls.w	801e9a6 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x3ce>
 801e6ea:	f8bd 3064 	ldrh.w	r3, [sp, #100]	@ 0x64
 801e6ee:	f04f 0b01 	mov.w	fp, #1
 801e6f2:	9a01      	ldr	r2, [sp, #4]
 801e6f4:	9806      	ldr	r0, [sp, #24]
 801e6f6:	465e      	mov	r6, fp
 801e6f8:	f8cd b008 	str.w	fp, [sp, #8]
 801e6fc:	7800      	ldrb	r0, [r0, #0]
 801e6fe:	fbb5 f3f3 	udiv	r3, r5, r3
 801e702:	1ad3      	subs	r3, r2, r3
 801e704:	900e      	str	r0, [sp, #56]	@ 0x38
 801e706:	3001      	adds	r0, #1
 801e708:	b29b      	uxth	r3, r3
 801e70a:	9005      	str	r0, [sp, #20]
 801e70c:	9312      	str	r3, [sp, #72]	@ 0x48
 801e70e:	9b06      	ldr	r3, [sp, #24]
 801e710:	785a      	ldrb	r2, [r3, #1]
 801e712:	789b      	ldrb	r3, [r3, #2]
 801e714:	021b      	lsls	r3, r3, #8
 801e716:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801e71a:	9a06      	ldr	r2, [sp, #24]
 801e71c:	78d2      	ldrb	r2, [r2, #3]
 801e71e:	4313      	orrs	r3, r2
 801e720:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801e722:	441a      	add	r2, r3
 801e724:	1c50      	adds	r0, r2, #1
 801e726:	7852      	ldrb	r2, [r2, #1]
 801e728:	9003      	str	r0, [sp, #12]
 801e72a:	0212      	lsls	r2, r2, #8
 801e72c:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 801e72e:	f402 72ff 	and.w	r2, r2, #510	@ 0x1fe
 801e732:	5cc3      	ldrb	r3, [r0, r3]
 801e734:	431a      	orrs	r2, r3
 801e736:	b293      	uxth	r3, r2
 801e738:	f884 2804 	strb.w	r2, [r4, #2052]	@ 0x804
 801e73c:	930a      	str	r3, [sp, #40]	@ 0x28
 801e73e:	2300      	movs	r3, #0
 801e740:	461a      	mov	r2, r3
 801e742:	9307      	str	r3, [sp, #28]
 801e744:	2d00      	cmp	r5, #0
 801e746:	d07c      	beq.n	801e842 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x26a>
 801e748:	42ae      	cmp	r6, r5
 801e74a:	d26c      	bcs.n	801e826 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x24e>
 801e74c:	9b08      	ldr	r3, [sp, #32]
 801e74e:	1bad      	subs	r5, r5, r6
 801e750:	4608      	mov	r0, r1
 801e752:	4543      	cmp	r3, r8
 801e754:	b2ad      	uxth	r5, r5
 801e756:	d802      	bhi.n	801e75e <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x186>
 801e758:	e071      	b.n	801e83e <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x266>
 801e75a:	2b00      	cmp	r3, #0
 801e75c:	d15d      	bne.n	801e81a <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x242>
 801e75e:	9b03      	ldr	r3, [sp, #12]
 801e760:	9a02      	ldr	r2, [sp, #8]
 801e762:	785b      	ldrb	r3, [r3, #1]
 801e764:	f1c2 0207 	rsb	r2, r2, #7
 801e768:	9902      	ldr	r1, [sp, #8]
 801e76a:	4093      	lsls	r3, r2
 801e76c:	005b      	lsls	r3, r3, #1
 801e76e:	f403 72ff 	and.w	r2, r3, #510	@ 0x1fe
 801e772:	9b03      	ldr	r3, [sp, #12]
 801e774:	781b      	ldrb	r3, [r3, #0]
 801e776:	410b      	asrs	r3, r1
 801e778:	3101      	adds	r1, #1
 801e77a:	b2c9      	uxtb	r1, r1
 801e77c:	b2db      	uxtb	r3, r3
 801e77e:	2908      	cmp	r1, #8
 801e780:	9102      	str	r1, [sp, #8]
 801e782:	9903      	ldr	r1, [sp, #12]
 801e784:	ea43 0302 	orr.w	r3, r3, r2
 801e788:	bf0c      	ite	eq
 801e78a:	3102      	addeq	r1, #2
 801e78c:	3101      	addne	r1, #1
 801e78e:	b29a      	uxth	r2, r3
 801e790:	bf05      	ittet	eq
 801e792:	9103      	streq	r1, [sp, #12]
 801e794:	2100      	moveq	r1, #0
 801e796:	9103      	strne	r1, [sp, #12]
 801e798:	9102      	streq	r1, [sp, #8]
 801e79a:	990e      	ldr	r1, [sp, #56]	@ 0x38
 801e79c:	4291      	cmp	r1, r2
 801e79e:	d30a      	bcc.n	801e7b6 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1de>
 801e7a0:	f884 3804 	strb.w	r3, [r4, #2052]	@ 0x804
 801e7a4:	2301      	movs	r3, #1
 801e7a6:	9905      	ldr	r1, [sp, #20]
 801e7a8:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 801e7ac:	d30f      	bcc.n	801e7ce <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1f6>
 801e7ae:	469b      	mov	fp, r3
 801e7b0:	f04f 0c00 	mov.w	ip, #0
 801e7b4:	e032      	b.n	801e81c <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x244>
 801e7b6:	9b05      	ldr	r3, [sp, #20]
 801e7b8:	429a      	cmp	r2, r3
 801e7ba:	d318      	bcc.n	801e7ee <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x216>
 801e7bc:	eb04 030b 	add.w	r3, r4, fp
 801e7c0:	f894 1804 	ldrb.w	r1, [r4, #2052]	@ 0x804
 801e7c4:	f883 1804 	strb.w	r1, [r3, #2052]	@ 0x804
 801e7c8:	f10b 0301 	add.w	r3, fp, #1
 801e7cc:	b29b      	uxth	r3, r3
 801e7ce:	9905      	ldr	r1, [sp, #20]
 801e7d0:	f894 6804 	ldrb.w	r6, [r4, #2052]	@ 0x804
 801e7d4:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 801e7d8:	710e      	strb	r6, [r1, #4]
 801e7da:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 801e7dc:	80ce      	strh	r6, [r1, #6]
 801e7de:	f10b 0601 	add.w	r6, fp, #1
 801e7e2:	714e      	strb	r6, [r1, #5]
 801e7e4:	9905      	ldr	r1, [sp, #20]
 801e7e6:	3101      	adds	r1, #1
 801e7e8:	b289      	uxth	r1, r1
 801e7ea:	9105      	str	r1, [sp, #20]
 801e7ec:	e7df      	b.n	801e7ae <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1d6>
 801e7ee:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801e7f2:	4611      	mov	r1, r2
 801e7f4:	795b      	ldrb	r3, [r3, #5]
 801e7f6:	f603 0604 	addw	r6, r3, #2052	@ 0x804
 801e7fa:	4426      	add	r6, r4
 801e7fc:	9f17      	ldr	r7, [sp, #92]	@ 0x5c
 801e7fe:	4437      	add	r7, r6
 801e800:	2f00      	cmp	r7, #0
 801e802:	dd06      	ble.n	801e812 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x23a>
 801e804:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 801e808:	790f      	ldrb	r7, [r1, #4]
 801e80a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801e80e:	88c9      	ldrh	r1, [r1, #6]
 801e810:	e7f4      	b.n	801e7fc <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x224>
 801e812:	f884 1804 	strb.w	r1, [r4, #2052]	@ 0x804
 801e816:	b29b      	uxth	r3, r3
 801e818:	e7c5      	b.n	801e7a6 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1ce>
 801e81a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801e81c:	920a      	str	r2, [sp, #40]	@ 0x28
 801e81e:	4601      	mov	r1, r0
 801e820:	4662      	mov	r2, ip
 801e822:	461e      	mov	r6, r3
 801e824:	e78e      	b.n	801e744 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x16c>
 801e826:	1b73      	subs	r3, r6, r5
 801e828:	eb02 0c05 	add.w	ip, r2, r5
 801e82c:	f8bd 0010 	ldrh.w	r0, [sp, #16]
 801e830:	b29b      	uxth	r3, r3
 801e832:	fa1f fc8c 	uxth.w	ip, ip
 801e836:	2500      	movs	r5, #0
 801e838:	9a08      	ldr	r2, [sp, #32]
 801e83a:	4542      	cmp	r2, r8
 801e83c:	d88d      	bhi.n	801e75a <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x182>
 801e83e:	4601      	mov	r1, r0
 801e840:	e74f      	b.n	801e6e2 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x10a>
 801e842:	428e      	cmp	r6, r1
 801e844:	bf2b      	itete	cs
 801e846:	468e      	movcs	lr, r1
 801e848:	46b6      	movcc	lr, r6
 801e84a:	1a73      	subcs	r3, r6, r1
 801e84c:	1b88      	subcc	r0, r1, r6
 801e84e:	eb02 0c0e 	add.w	ip, r2, lr
 801e852:	bf2b      	itete	cs
 801e854:	4628      	movcs	r0, r5
 801e856:	462b      	movcc	r3, r5
 801e858:	b29b      	uxthcs	r3, r3
 801e85a:	b280      	uxthcc	r0, r0
 801e85c:	f108 0503 	add.w	r5, r8, #3
 801e860:	fa1f fc8c 	uxth.w	ip, ip
 801e864:	4562      	cmp	r2, ip
 801e866:	d06f      	beq.n	801e948 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x370>
 801e868:	1c57      	adds	r7, r2, #1
 801e86a:	4422      	add	r2, r4
 801e86c:	b2bf      	uxth	r7, r7
 801e86e:	f892 2804 	ldrb.w	r2, [r2, #2052]	@ 0x804
 801e872:	9713      	str	r7, [sp, #76]	@ 0x4c
 801e874:	2704      	movs	r7, #4
 801e876:	46b9      	mov	r9, r7
 801e878:	9f11      	ldr	r7, [sp, #68]	@ 0x44
 801e87a:	fb19 7202 	smlabb	r2, r9, r2, r7
 801e87e:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 801e880:	58bf      	ldr	r7, [r7, r2]
 801e882:	0e3a      	lsrs	r2, r7, #24
 801e884:	9209      	str	r2, [sp, #36]	@ 0x24
 801e886:	d016      	beq.n	801e8b6 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x2de>
 801e888:	f3c7 2907 	ubfx	r9, r7, #8, #8
 801e88c:	fa5f fa87 	uxtb.w	sl, r7
 801e890:	f3c7 4707 	ubfx	r7, r7, #16, #8
 801e894:	fa5f f289 	uxtb.w	r2, r9
 801e898:	9214      	str	r2, [sp, #80]	@ 0x50
 801e89a:	b2fa      	uxtb	r2, r7
 801e89c:	9215      	str	r2, [sp, #84]	@ 0x54
 801e89e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801e8a0:	2aff      	cmp	r2, #255	@ 0xff
 801e8a2:	d10b      	bne.n	801e8bc <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x2e4>
 801e8a4:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801e8a6:	2aff      	cmp	r2, #255	@ 0xff
 801e8a8:	d108      	bne.n	801e8bc <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x2e4>
 801e8aa:	f805 ac03 	strb.w	sl, [r5, #-3]
 801e8ae:	f805 9c02 	strb.w	r9, [r5, #-2]
 801e8b2:	f805 7c01 	strb.w	r7, [r5, #-1]
 801e8b6:	3503      	adds	r5, #3
 801e8b8:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801e8ba:	e7d3      	b.n	801e864 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x28c>
 801e8bc:	9f09      	ldr	r7, [sp, #36]	@ 0x24
 801e8be:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801e8c0:	437a      	muls	r2, r7
 801e8c2:	1c57      	adds	r7, r2, #1
 801e8c4:	eb07 2222 	add.w	r2, r7, r2, asr #8
 801e8c8:	f815 7c03 	ldrb.w	r7, [r5, #-3]
 801e8cc:	1212      	asrs	r2, r2, #8
 801e8ce:	fa1f f982 	uxth.w	r9, r2
 801e8d2:	43d2      	mvns	r2, r2
 801e8d4:	fb1a fa09 	smulbb	sl, sl, r9
 801e8d8:	b2d2      	uxtb	r2, r2
 801e8da:	fb07 a702 	mla	r7, r7, r2, sl
 801e8de:	9209      	str	r2, [sp, #36]	@ 0x24
 801e8e0:	b2bf      	uxth	r7, r7
 801e8e2:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801e8e4:	f107 0a01 	add.w	sl, r7, #1
 801e8e8:	eb0a 2717 	add.w	r7, sl, r7, lsr #8
 801e8ec:	fb12 fa09 	smulbb	sl, r2, r9
 801e8f0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801e8f2:	123f      	asrs	r7, r7, #8
 801e8f4:	f805 7c03 	strb.w	r7, [r5, #-3]
 801e8f8:	f815 7c02 	ldrb.w	r7, [r5, #-2]
 801e8fc:	fb07 aa02 	mla	sl, r7, r2, sl
 801e900:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 801e902:	fb12 f909 	smulbb	r9, r2, r9
 801e906:	fa1f fa8a 	uxth.w	sl, sl
 801e90a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801e90c:	f10a 0701 	add.w	r7, sl, #1
 801e910:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801e914:	f815 7c01 	ldrb.w	r7, [r5, #-1]
 801e918:	fb07 9902 	mla	r9, r7, r2, r9
 801e91c:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801e920:	fa1f f989 	uxth.w	r9, r9
 801e924:	f805 ac02 	strb.w	sl, [r5, #-2]
 801e928:	f109 0201 	add.w	r2, r9, #1
 801e92c:	eb02 2919 	add.w	r9, r2, r9, lsr #8
 801e930:	ea4f 2929 	mov.w	r9, r9, asr #8
 801e934:	f805 9c01 	strb.w	r9, [r5, #-1]
 801e938:	e7bd      	b.n	801e8b6 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x2de>
 801e93a:	bf00      	nop
 801e93c:	24028e20 	.word	0x24028e20
 801e940:	24028e1a 	.word	0x24028e1a
 801e944:	fffff7fb 	.word	0xfffff7fb
 801e948:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801e94c:	428e      	cmp	r6, r1
 801e94e:	44f0      	add	r8, lr
 801e950:	f4ff af71 	bcc.w	801e836 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x25e>
 801e954:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801e956:	9904      	ldr	r1, [sp, #16]
 801e958:	8812      	ldrh	r2, [r2, #0]
 801e95a:	1a52      	subs	r2, r2, r1
 801e95c:	9912      	ldr	r1, [sp, #72]	@ 0x48
 801e95e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801e962:	4490      	add	r8, r2
 801e964:	9a07      	ldr	r2, [sp, #28]
 801e966:	3201      	adds	r2, #1
 801e968:	428a      	cmp	r2, r1
 801e96a:	9207      	str	r2, [sp, #28]
 801e96c:	d111      	bne.n	801e992 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x3ba>
 801e96e:	f8bd 5068 	ldrh.w	r5, [sp, #104]	@ 0x68
 801e972:	f8bd c060 	ldrh.w	ip, [sp, #96]	@ 0x60
 801e976:	9b04      	ldr	r3, [sp, #16]
 801e978:	eba5 050c 	sub.w	r5, r5, ip
 801e97c:	b2ad      	uxth	r5, r5
 801e97e:	2d00      	cmp	r5, #0
 801e980:	bf08      	it	eq
 801e982:	4619      	moveq	r1, r3
 801e984:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801e986:	bf18      	it	ne
 801e988:	2100      	movne	r1, #0
 801e98a:	3301      	adds	r3, #1
 801e98c:	b289      	uxth	r1, r1
 801e98e:	930b      	str	r3, [sp, #44]	@ 0x2c
 801e990:	e69e      	b.n	801e6d0 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xf8>
 801e992:	f8bd 0010 	ldrh.w	r0, [sp, #16]
 801e996:	f8bd 5064 	ldrh.w	r5, [sp, #100]	@ 0x64
 801e99a:	1a2d      	subs	r5, r5, r0
 801e99c:	b2ad      	uxth	r5, r5
 801e99e:	2d00      	cmp	r5, #0
 801e9a0:	bf18      	it	ne
 801e9a2:	2000      	movne	r0, #0
 801e9a4:	e748      	b.n	801e838 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x260>
 801e9a6:	4b04      	ldr	r3, [pc, #16]	@ (801e9b8 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x3e0>)
 801e9a8:	6818      	ldr	r0, [r3, #0]
 801e9aa:	6803      	ldr	r3, [r0, #0]
 801e9ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801e9ae:	4798      	blx	r3
 801e9b0:	b01d      	add	sp, #116	@ 0x74
 801e9b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e9b6:	bf00      	nop
 801e9b8:	24028e20 	.word	0x24028e20

0801e9bc <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h>:
 801e9bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e9c0:	b08f      	sub	sp, #60	@ 0x3c
 801e9c2:	4616      	mov	r6, r2
 801e9c4:	4681      	mov	r9, r0
 801e9c6:	460d      	mov	r5, r1
 801e9c8:	f89d 2060 	ldrb.w	r2, [sp, #96]	@ 0x60
 801e9cc:	9205      	str	r2, [sp, #20]
 801e9ce:	2a00      	cmp	r2, #0
 801e9d0:	f000 82a8 	beq.w	801ef24 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x568>
 801e9d4:	6830      	ldr	r0, [r6, #0]
 801e9d6:	ac0a      	add	r4, sp, #40	@ 0x28
 801e9d8:	6871      	ldr	r1, [r6, #4]
 801e9da:	c403      	stmia	r4!, {r0, r1}
 801e9dc:	6818      	ldr	r0, [r3, #0]
 801e9de:	ac0c      	add	r4, sp, #48	@ 0x30
 801e9e0:	6859      	ldr	r1, [r3, #4]
 801e9e2:	c403      	stmia	r4!, {r0, r1}
 801e9e4:	a80a      	add	r0, sp, #40	@ 0x28
 801e9e6:	f7f9 f879 	bl	8017adc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801e9ea:	4631      	mov	r1, r6
 801e9ec:	a80c      	add	r0, sp, #48	@ 0x30
 801e9ee:	f7f9 f8b9 	bl	8017b64 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801e9f2:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	@ 0x2c
 801e9f6:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 801e9fa:	bfdb      	ittet	le
 801e9fc:	b293      	uxthle	r3, r2
 801e9fe:	f44f 6180 	movle.w	r1, #1024	@ 0x400
 801ea02:	2301      	movgt	r3, #1
 801ea04:	fb91 f3f3 	sdivle	r3, r1, r3
 801ea08:	9300      	str	r3, [sp, #0]
 801ea0a:	f105 0308 	add.w	r3, r5, #8
 801ea0e:	9900      	ldr	r1, [sp, #0]
 801ea10:	9306      	str	r3, [sp, #24]
 801ea12:	f9bd 302e 	ldrsh.w	r3, [sp, #46]	@ 0x2e
 801ea16:	440b      	add	r3, r1
 801ea18:	3b01      	subs	r3, #1
 801ea1a:	fb93 f3f1 	sdiv	r3, r3, r1
 801ea1e:	3b01      	subs	r3, #1
 801ea20:	9906      	ldr	r1, [sp, #24]
 801ea22:	b29b      	uxth	r3, r3
 801ea24:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 801ea28:	9900      	ldr	r1, [sp, #0]
 801ea2a:	9307      	str	r3, [sp, #28]
 801ea2c:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	@ 0x32
 801ea30:	fb93 f0f1 	sdiv	r0, r3, r1
 801ea34:	b284      	uxth	r4, r0
 801ea36:	f8bd 1030 	ldrh.w	r1, [sp, #48]	@ 0x30
 801ea3a:	b280      	uxth	r0, r0
 801ea3c:	9402      	str	r4, [sp, #8]
 801ea3e:	9d02      	ldr	r5, [sp, #8]
 801ea40:	9c00      	ldr	r4, [sp, #0]
 801ea42:	fb05 3514 	mls	r5, r5, r4, r3
 801ea46:	fb15 f502 	smulbb	r5, r5, r2
 801ea4a:	440d      	add	r5, r1
 801ea4c:	b2ad      	uxth	r5, r5
 801ea4e:	2800      	cmp	r0, #0
 801ea50:	d071      	beq.n	801eb36 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x17a>
 801ea52:	1e42      	subs	r2, r0, #1
 801ea54:	9806      	ldr	r0, [sp, #24]
 801ea56:	f850 8022 	ldr.w	r8, [r0, r2, lsl #2]
 801ea5a:	9a07      	ldr	r2, [sp, #28]
 801ea5c:	fa98 f888 	rev.w	r8, r8
 801ea60:	4490      	add	r8, r2
 801ea62:	f8bd 2028 	ldrh.w	r2, [sp, #40]	@ 0x28
 801ea66:	f9bd 4036 	ldrsh.w	r4, [sp, #54]	@ 0x36
 801ea6a:	4411      	add	r1, r2
 801ea6c:	f8bd 202a 	ldrh.w	r2, [sp, #42]	@ 0x2a
 801ea70:	f8df b348 	ldr.w	fp, [pc, #840]	@ 801edbc <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x400>
 801ea74:	4413      	add	r3, r2
 801ea76:	f8ad 1030 	strh.w	r1, [sp, #48]	@ 0x30
 801ea7a:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 801ea7e:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	@ 0x34
 801ea82:	9301      	str	r3, [sp, #4]
 801ea84:	4bcb      	ldr	r3, [pc, #812]	@ (801edb4 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x3f8>)
 801ea86:	6818      	ldr	r0, [r3, #0]
 801ea88:	6803      	ldr	r3, [r0, #0]
 801ea8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801ea8c:	4798      	blx	r3
 801ea8e:	4bca      	ldr	r3, [pc, #808]	@ (801edb8 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x3fc>)
 801ea90:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	@ 0x30
 801ea94:	881b      	ldrh	r3, [r3, #0]
 801ea96:	f9bd 7032 	ldrsh.w	r7, [sp, #50]	@ 0x32
 801ea9a:	fb03 2707 	mla	r7, r3, r7, r2
 801ea9e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 801eaa2:	4363      	muls	r3, r4
 801eaa4:	2400      	movs	r4, #0
 801eaa6:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801eaaa:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801eaae:	4621      	mov	r1, r4
 801eab0:	4407      	add	r7, r0
 801eab2:	18fb      	adds	r3, r7, r3
 801eab4:	9309      	str	r3, [sp, #36]	@ 0x24
 801eab6:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	@ 0x2c
 801eaba:	fb95 f3f3 	sdiv	r3, r5, r3
 801eabe:	9304      	str	r3, [sp, #16]
 801eac0:	f109 0304 	add.w	r3, r9, #4
 801eac4:	4618      	mov	r0, r3
 801eac6:	9308      	str	r3, [sp, #32]
 801eac8:	f009 faf6 	bl	80280b8 <memset>
 801eacc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801eace:	42bb      	cmp	r3, r7
 801ead0:	f240 8223 	bls.w	801ef1a <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x55e>
 801ead4:	2003      	movs	r0, #3
 801ead6:	f04f 0c07 	mov.w	ip, #7
 801eada:	f04f 0e0b 	mov.w	lr, #11
 801eade:	2d00      	cmp	r5, #0
 801eae0:	f000 813c 	beq.w	801ed5c <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x3a0>
 801eae4:	f898 3000 	ldrb.w	r3, [r8]
 801eae8:	b2db      	uxtb	r3, r3
 801eaea:	2bfe      	cmp	r3, #254	@ 0xfe
 801eaec:	d126      	bne.n	801eb3c <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x180>
 801eaee:	f898 1001 	ldrb.w	r1, [r8, #1]
 801eaf2:	f108 0604 	add.w	r6, r8, #4
 801eaf6:	f898 2002 	ldrb.w	r2, [r8, #2]
 801eafa:	3d01      	subs	r5, #1
 801eafc:	b2c9      	uxtb	r1, r1
 801eafe:	f898 8003 	ldrb.w	r8, [r8, #3]
 801eb02:	b2d2      	uxtb	r2, r2
 801eb04:	f361 0407 	bfi	r4, r1, #0, #8
 801eb08:	fa5f f888 	uxtb.w	r8, r8
 801eb0c:	b2ad      	uxth	r5, r5
 801eb0e:	f362 240f 	bfi	r4, r2, #8, #8
 801eb12:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 801eb16:	fb10 2208 	smlabb	r2, r0, r8, r2
 801eb1a:	f368 4417 	bfi	r4, r8, #16, #8
 801eb1e:	fb1c 2201 	smlabb	r2, ip, r1, r2
 801eb22:	0e23      	lsrs	r3, r4, #24
 801eb24:	fb1e 2303 	smlabb	r3, lr, r3, r2
 801eb28:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801eb2c:	eb09 0383 	add.w	r3, r9, r3, lsl #2
 801eb30:	605c      	str	r4, [r3, #4]
 801eb32:	46b0      	mov	r8, r6
 801eb34:	e7d3      	b.n	801eade <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x122>
 801eb36:	f8dd 801c 	ldr.w	r8, [sp, #28]
 801eb3a:	e792      	b.n	801ea62 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0xa6>
 801eb3c:	2bff      	cmp	r3, #255	@ 0xff
 801eb3e:	d127      	bne.n	801eb90 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x1d4>
 801eb40:	f898 2001 	ldrb.w	r2, [r8, #1]
 801eb44:	f108 0605 	add.w	r6, r8, #5
 801eb48:	f898 3002 	ldrb.w	r3, [r8, #2]
 801eb4c:	3d01      	subs	r5, #1
 801eb4e:	b2d2      	uxtb	r2, r2
 801eb50:	f898 1003 	ldrb.w	r1, [r8, #3]
 801eb54:	b2db      	uxtb	r3, r3
 801eb56:	f898 8004 	ldrb.w	r8, [r8, #4]
 801eb5a:	f362 0407 	bfi	r4, r2, #0, #8
 801eb5e:	b2c9      	uxtb	r1, r1
 801eb60:	fa5f f888 	uxtb.w	r8, r8
 801eb64:	f363 240f 	bfi	r4, r3, #8, #8
 801eb68:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 801eb6c:	b2ad      	uxth	r5, r5
 801eb6e:	fb10 3301 	smlabb	r3, r0, r1, r3
 801eb72:	f361 4417 	bfi	r4, r1, #16, #8
 801eb76:	fb1c 3302 	smlabb	r3, ip, r2, r3
 801eb7a:	f368 641f 	bfi	r4, r8, #24, #8
 801eb7e:	fb1e 3808 	smlabb	r8, lr, r8, r3
 801eb82:	f008 083f 	and.w	r8, r8, #63	@ 0x3f
 801eb86:	eb09 0888 	add.w	r8, r9, r8, lsl #2
 801eb8a:	f8c8 4004 	str.w	r4, [r8, #4]
 801eb8e:	e7d0      	b.n	801eb32 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x176>
 801eb90:	119a      	asrs	r2, r3, #6
 801eb92:	f108 0601 	add.w	r6, r8, #1
 801eb96:	d107      	bne.n	801eba8 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x1ec>
 801eb98:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801eb9c:	eb09 0383 	add.w	r3, r9, r3, lsl #2
 801eba0:	685c      	ldr	r4, [r3, #4]
 801eba2:	3d01      	subs	r5, #1
 801eba4:	b2ad      	uxth	r5, r5
 801eba6:	e7c4      	b.n	801eb32 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x176>
 801eba8:	2a01      	cmp	r2, #1
 801ebaa:	d129      	bne.n	801ec00 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x244>
 801ebac:	f003 0203 	and.w	r2, r3, #3
 801ebb0:	1ea1      	subs	r1, r4, #2
 801ebb2:	4411      	add	r1, r2
 801ebb4:	f3c3 0281 	ubfx	r2, r3, #2, #2
 801ebb8:	f3c3 1301 	ubfx	r3, r3, #4, #2
 801ebbc:	b2c9      	uxtb	r1, r1
 801ebbe:	3a02      	subs	r2, #2
 801ebc0:	3b02      	subs	r3, #2
 801ebc2:	f361 0407 	bfi	r4, r1, #0, #8
 801ebc6:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 801ebca:	f002 02ff 	and.w	r2, r2, #255	@ 0xff
 801ebce:	f362 240f 	bfi	r4, r2, #8, #8
 801ebd2:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 801ebd6:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 801ebda:	f003 03ff 	and.w	r3, r3, #255	@ 0xff
 801ebde:	fb10 2203 	smlabb	r2, r0, r3, r2
 801ebe2:	f363 4417 	bfi	r4, r3, #16, #8
 801ebe6:	fb1c 2201 	smlabb	r2, ip, r1, r2
 801ebea:	ea4f 6814 	mov.w	r8, r4, lsr #24
 801ebee:	fb1e 2808 	smlabb	r8, lr, r8, r2
 801ebf2:	f008 083f 	and.w	r8, r8, #63	@ 0x3f
 801ebf6:	eb09 0888 	add.w	r8, r9, r8, lsl #2
 801ebfa:	f8c8 4004 	str.w	r4, [r8, #4]
 801ebfe:	e7d0      	b.n	801eba2 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x1e6>
 801ec00:	2a02      	cmp	r2, #2
 801ec02:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801ec06:	d12e      	bne.n	801ec66 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x2aa>
 801ec08:	f898 2001 	ldrb.w	r2, [r8, #1]
 801ec0c:	f1a3 0a20 	sub.w	sl, r3, #32
 801ec10:	f108 0602 	add.w	r6, r8, #2
 801ec14:	b2d2      	uxtb	r2, r2
 801ec16:	f002 010f 	and.w	r1, r2, #15
 801ec1a:	1112      	asrs	r2, r2, #4
 801ec1c:	3908      	subs	r1, #8
 801ec1e:	3a08      	subs	r2, #8
 801ec20:	4451      	add	r1, sl
 801ec22:	4492      	add	sl, r2
 801ec24:	4421      	add	r1, r4
 801ec26:	b2c9      	uxtb	r1, r1
 801ec28:	f361 0407 	bfi	r4, r1, #0, #8
 801ec2c:	f3c4 2807 	ubfx	r8, r4, #8, #8
 801ec30:	f1a8 0820 	sub.w	r8, r8, #32
 801ec34:	4443      	add	r3, r8
 801ec36:	b2db      	uxtb	r3, r3
 801ec38:	f363 240f 	bfi	r4, r3, #8, #8
 801ec3c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 801ec40:	eb0a 4a14 	add.w	sl, sl, r4, lsr #16
 801ec44:	f00a 0aff 	and.w	sl, sl, #255	@ 0xff
 801ec48:	fb10 330a 	smlabb	r3, r0, sl, r3
 801ec4c:	f36a 4417 	bfi	r4, sl, #16, #8
 801ec50:	fb1c 3301 	smlabb	r3, ip, r1, r3
 801ec54:	0e22      	lsrs	r2, r4, #24
 801ec56:	fb1e 3202 	smlabb	r2, lr, r2, r3
 801ec5a:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 801ec5e:	eb09 0282 	add.w	r2, r9, r2, lsl #2
 801ec62:	6054      	str	r4, [r2, #4]
 801ec64:	e79d      	b.n	801eba2 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x1e6>
 801ec66:	3301      	adds	r3, #1
 801ec68:	42ab      	cmp	r3, r5
 801ec6a:	dd59      	ble.n	801ed20 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x364>
 801ec6c:	1b5d      	subs	r5, r3, r5
 801ec6e:	2d00      	cmp	r5, #0
 801ec70:	dc58      	bgt.n	801ed24 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x368>
 801ec72:	f8dd a004 	ldr.w	sl, [sp, #4]
 801ec76:	f04f 0800 	mov.w	r8, #0
 801ec7a:	f1ba 0f00 	cmp.w	sl, #0
 801ec7e:	f340 8108 	ble.w	801ee92 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x4d6>
 801ec82:	1c73      	adds	r3, r6, #1
 801ec84:	9303      	str	r3, [sp, #12]
 801ec86:	7833      	ldrb	r3, [r6, #0]
 801ec88:	b2db      	uxtb	r3, r3
 801ec8a:	2bfe      	cmp	r3, #254	@ 0xfe
 801ec8c:	d16a      	bne.n	801ed64 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x3a8>
 801ec8e:	7871      	ldrb	r1, [r6, #1]
 801ec90:	1d33      	adds	r3, r6, #4
 801ec92:	78b2      	ldrb	r2, [r6, #2]
 801ec94:	b2c9      	uxtb	r1, r1
 801ec96:	78f0      	ldrb	r0, [r6, #3]
 801ec98:	b2d2      	uxtb	r2, r2
 801ec9a:	9303      	str	r3, [sp, #12]
 801ec9c:	f361 0407 	bfi	r4, r1, #0, #8
 801eca0:	b2c0      	uxtb	r0, r0
 801eca2:	2303      	movs	r3, #3
 801eca4:	f362 240f 	bfi	r4, r2, #8, #8
 801eca8:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 801ecac:	fb13 2200 	smlabb	r2, r3, r0, r2
 801ecb0:	f360 4417 	bfi	r4, r0, #16, #8
 801ecb4:	2307      	movs	r3, #7
 801ecb6:	0e25      	lsrs	r5, r4, #24
 801ecb8:	fb13 2101 	smlabb	r1, r3, r1, r2
 801ecbc:	230b      	movs	r3, #11
 801ecbe:	fb13 1305 	smlabb	r3, r3, r5, r1
 801ecc2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801ecc6:	eb09 0383 	add.w	r3, r9, r3, lsl #2
 801ecca:	605c      	str	r4, [r3, #4]
 801eccc:	2501      	movs	r5, #1
 801ecce:	462e      	mov	r6, r5
 801ecd0:	eb06 0308 	add.w	r3, r6, r8
 801ecd4:	ebaa 0a06 	sub.w	sl, sl, r6
 801ecd8:	1bad      	subs	r5, r5, r6
 801ecda:	2b40      	cmp	r3, #64	@ 0x40
 801ecdc:	dd16      	ble.n	801ed0c <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x350>
 801ecde:	4658      	mov	r0, fp
 801ece0:	ea4f 0188 	mov.w	r1, r8, lsl #2
 801ece4:	f7e4 f8c8 	bl	8002e78 <_ZN8touchgfx5paint9flushLineEPmi>
 801ece8:	4659      	mov	r1, fp
 801ecea:	9b05      	ldr	r3, [sp, #20]
 801ecec:	4642      	mov	r2, r8
 801ecee:	4638      	mov	r0, r7
 801ecf0:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 801ecf4:	f7e4 f928 	bl	8002f48 <_ZN8touchgfx5paint6rgb88816lineFromARGB8888EPhPKmjh>
 801ecf8:	4b30      	ldr	r3, [pc, #192]	@ (801edbc <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x400>)
 801ecfa:	4447      	add	r7, r8
 801ecfc:	f04f 0800 	mov.w	r8, #0
 801ed00:	459b      	cmp	fp, r3
 801ed02:	bf0c      	ite	eq
 801ed04:	f8df b0b8 	ldreq.w	fp, [pc, #184]	@ 801edc0 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x404>
 801ed08:	f8df b0b0 	ldrne.w	fp, [pc, #176]	@ 801edbc <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x400>
 801ed0c:	eb0b 0288 	add.w	r2, fp, r8, lsl #2
 801ed10:	4633      	mov	r3, r6
 801ed12:	3b01      	subs	r3, #1
 801ed14:	f842 4b04 	str.w	r4, [r2], #4
 801ed18:	d1fb      	bne.n	801ed12 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x356>
 801ed1a:	44b0      	add	r8, r6
 801ed1c:	9e03      	ldr	r6, [sp, #12]
 801ed1e:	e7ac      	b.n	801ec7a <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x2be>
 801ed20:	1aed      	subs	r5, r5, r3
 801ed22:	e73f      	b.n	801eba4 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x1e8>
 801ed24:	9b01      	ldr	r3, [sp, #4]
 801ed26:	42ab      	cmp	r3, r5
 801ed28:	bfa8      	it	ge
 801ed2a:	462b      	movge	r3, r5
 801ed2c:	4698      	mov	r8, r3
 801ed2e:	9b01      	ldr	r3, [sp, #4]
 801ed30:	eba3 0a08 	sub.w	sl, r3, r8
 801ed34:	0e23      	lsrs	r3, r4, #24
 801ed36:	eba5 0508 	sub.w	r5, r5, r8
 801ed3a:	d00b      	beq.n	801ed54 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x398>
 801ed3c:	9a05      	ldr	r2, [sp, #20]
 801ed3e:	4641      	mov	r1, r8
 801ed40:	4638      	mov	r0, r7
 801ed42:	4353      	muls	r3, r2
 801ed44:	1c5a      	adds	r2, r3, #1
 801ed46:	eb02 2323 	add.w	r3, r2, r3, asr #8
 801ed4a:	4622      	mov	r2, r4
 801ed4c:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801ed50:	f7e4 f8ac 	bl	8002eac <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh>
 801ed54:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 801ed58:	4447      	add	r7, r8
 801ed5a:	e78c      	b.n	801ec76 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x2ba>
 801ed5c:	f8dd a004 	ldr.w	sl, [sp, #4]
 801ed60:	4646      	mov	r6, r8
 801ed62:	e788      	b.n	801ec76 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x2ba>
 801ed64:	2bff      	cmp	r3, #255	@ 0xff
 801ed66:	d11d      	bne.n	801eda4 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x3e8>
 801ed68:	7870      	ldrb	r0, [r6, #1]
 801ed6a:	1d73      	adds	r3, r6, #5
 801ed6c:	78b2      	ldrb	r2, [r6, #2]
 801ed6e:	b2c0      	uxtb	r0, r0
 801ed70:	78f5      	ldrb	r5, [r6, #3]
 801ed72:	b2d2      	uxtb	r2, r2
 801ed74:	9303      	str	r3, [sp, #12]
 801ed76:	f360 0407 	bfi	r4, r0, #0, #8
 801ed7a:	7933      	ldrb	r3, [r6, #4]
 801ed7c:	b2ed      	uxtb	r5, r5
 801ed7e:	b2d9      	uxtb	r1, r3
 801ed80:	f362 240f 	bfi	r4, r2, #8, #8
 801ed84:	2303      	movs	r3, #3
 801ed86:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 801ed8a:	f365 4417 	bfi	r4, r5, #16, #8
 801ed8e:	fb13 2205 	smlabb	r2, r3, r5, r2
 801ed92:	2307      	movs	r3, #7
 801ed94:	f361 641f 	bfi	r4, r1, #24, #8
 801ed98:	fb13 2000 	smlabb	r0, r3, r0, r2
 801ed9c:	230b      	movs	r3, #11
 801ed9e:	fb13 0301 	smlabb	r3, r3, r1, r0
 801eda2:	e78e      	b.n	801ecc2 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x306>
 801eda4:	119d      	asrs	r5, r3, #6
 801eda6:	d10d      	bne.n	801edc4 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x408>
 801eda8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801edac:	eb09 0383 	add.w	r3, r9, r3, lsl #2
 801edb0:	685c      	ldr	r4, [r3, #4]
 801edb2:	e78b      	b.n	801eccc <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x310>
 801edb4:	24028e20 	.word	0x24028e20
 801edb8:	24028e1a 	.word	0x24028e1a
 801edbc:	24000140 	.word	0x24000140
 801edc0:	24000240 	.word	0x24000240
 801edc4:	2d01      	cmp	r5, #1
 801edc6:	d12a      	bne.n	801ee1e <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x462>
 801edc8:	f003 0203 	and.w	r2, r3, #3
 801edcc:	1ea1      	subs	r1, r4, #2
 801edce:	2603      	movs	r6, #3
 801edd0:	4411      	add	r1, r2
 801edd2:	f3c3 0281 	ubfx	r2, r3, #2, #2
 801edd6:	f3c3 1301 	ubfx	r3, r3, #4, #2
 801edda:	b2c9      	uxtb	r1, r1
 801eddc:	3a02      	subs	r2, #2
 801edde:	3b02      	subs	r3, #2
 801ede0:	f361 0407 	bfi	r4, r1, #0, #8
 801ede4:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 801ede8:	f002 02ff 	and.w	r2, r2, #255	@ 0xff
 801edec:	f362 240f 	bfi	r4, r2, #8, #8
 801edf0:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 801edf4:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 801edf8:	f003 03ff 	and.w	r3, r3, #255	@ 0xff
 801edfc:	fb16 2203 	smlabb	r2, r6, r3, r2
 801ee00:	f363 4417 	bfi	r4, r3, #16, #8
 801ee04:	2307      	movs	r3, #7
 801ee06:	0e20      	lsrs	r0, r4, #24
 801ee08:	fb13 2101 	smlabb	r1, r3, r1, r2
 801ee0c:	230b      	movs	r3, #11
 801ee0e:	fb13 1300 	smlabb	r3, r3, r0, r1
 801ee12:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801ee16:	eb09 0383 	add.w	r3, r9, r3, lsl #2
 801ee1a:	605c      	str	r4, [r3, #4]
 801ee1c:	e757      	b.n	801ecce <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x312>
 801ee1e:	2d02      	cmp	r5, #2
 801ee20:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801ee24:	d12f      	bne.n	801ee86 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x4ca>
 801ee26:	1cb2      	adds	r2, r6, #2
 801ee28:	f1a3 0020 	sub.w	r0, r3, #32
 801ee2c:	9203      	str	r2, [sp, #12]
 801ee2e:	7872      	ldrb	r2, [r6, #1]
 801ee30:	b2d2      	uxtb	r2, r2
 801ee32:	f002 010f 	and.w	r1, r2, #15
 801ee36:	1112      	asrs	r2, r2, #4
 801ee38:	3908      	subs	r1, #8
 801ee3a:	3a08      	subs	r2, #8
 801ee3c:	4401      	add	r1, r0
 801ee3e:	4402      	add	r2, r0
 801ee40:	4421      	add	r1, r4
 801ee42:	b2c9      	uxtb	r1, r1
 801ee44:	f361 0407 	bfi	r4, r1, #0, #8
 801ee48:	f3c4 2507 	ubfx	r5, r4, #8, #8
 801ee4c:	3d20      	subs	r5, #32
 801ee4e:	442b      	add	r3, r5
 801ee50:	2503      	movs	r5, #3
 801ee52:	b2db      	uxtb	r3, r3
 801ee54:	f363 240f 	bfi	r4, r3, #8, #8
 801ee58:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 801ee5c:	eb02 4214 	add.w	r2, r2, r4, lsr #16
 801ee60:	f002 02ff 	and.w	r2, r2, #255	@ 0xff
 801ee64:	fb15 3302 	smlabb	r3, r5, r2, r3
 801ee68:	f362 4417 	bfi	r4, r2, #16, #8
 801ee6c:	2207      	movs	r2, #7
 801ee6e:	0e20      	lsrs	r0, r4, #24
 801ee70:	fb12 3201 	smlabb	r2, r2, r1, r3
 801ee74:	210b      	movs	r1, #11
 801ee76:	fb11 2100 	smlabb	r1, r1, r0, r2
 801ee7a:	f001 013f 	and.w	r1, r1, #63	@ 0x3f
 801ee7e:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 801ee82:	604c      	str	r4, [r1, #4]
 801ee84:	e722      	b.n	801eccc <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x310>
 801ee86:	1c5d      	adds	r5, r3, #1
 801ee88:	4656      	mov	r6, sl
 801ee8a:	45aa      	cmp	sl, r5
 801ee8c:	bfa8      	it	ge
 801ee8e:	462e      	movge	r6, r5
 801ee90:	e71e      	b.n	801ecd0 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x314>
 801ee92:	f1b8 0f00 	cmp.w	r8, #0
 801ee96:	d00d      	beq.n	801eeb4 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x4f8>
 801ee98:	ea4f 0188 	mov.w	r1, r8, lsl #2
 801ee9c:	4658      	mov	r0, fp
 801ee9e:	f7e3 ffeb 	bl	8002e78 <_ZN8touchgfx5paint9flushLineEPmi>
 801eea2:	4642      	mov	r2, r8
 801eea4:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 801eea8:	4638      	mov	r0, r7
 801eeaa:	9b05      	ldr	r3, [sp, #20]
 801eeac:	4659      	mov	r1, fp
 801eeae:	4447      	add	r7, r8
 801eeb0:	f7e4 f84a 	bl	8002f48 <_ZN8touchgfx5paint6rgb88816lineFromARGB8888EPhPKmjh>
 801eeb4:	4b1d      	ldr	r3, [pc, #116]	@ (801ef2c <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x570>)
 801eeb6:	9a01      	ldr	r2, [sp, #4]
 801eeb8:	881b      	ldrh	r3, [r3, #0]
 801eeba:	1a9b      	subs	r3, r3, r2
 801eebc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801eec0:	441f      	add	r7, r3
 801eec2:	9b04      	ldr	r3, [sp, #16]
 801eec4:	3301      	adds	r3, #1
 801eec6:	9304      	str	r3, [sp, #16]
 801eec8:	9a04      	ldr	r2, [sp, #16]
 801eeca:	9b00      	ldr	r3, [sp, #0]
 801eecc:	4293      	cmp	r3, r2
 801eece:	d11d      	bne.n	801ef0c <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x550>
 801eed0:	9b02      	ldr	r3, [sp, #8]
 801eed2:	2400      	movs	r4, #0
 801eed4:	9a02      	ldr	r2, [sp, #8]
 801eed6:	f103 0801 	add.w	r8, r3, #1
 801eeda:	9b06      	ldr	r3, [sp, #24]
 801eedc:	f8bd 5030 	ldrh.w	r5, [sp, #48]	@ 0x30
 801eee0:	4621      	mov	r1, r4
 801eee2:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 801eee6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 801eeea:	9b07      	ldr	r3, [sp, #28]
 801eeec:	ba36      	rev	r6, r6
 801eeee:	9808      	ldr	r0, [sp, #32]
 801eef0:	441e      	add	r6, r3
 801eef2:	f8bd 3028 	ldrh.w	r3, [sp, #40]	@ 0x28
 801eef6:	1aed      	subs	r5, r5, r3
 801eef8:	f009 f8de 	bl	80280b8 <memset>
 801eefc:	f8cd 8008 	str.w	r8, [sp, #8]
 801ef00:	b2ad      	uxth	r5, r5
 801ef02:	9404      	str	r4, [sp, #16]
 801ef04:	f7e3 ffae 	bl	8002e64 <_ZN8touchgfx5paint8tearDownEv>
 801ef08:	46b0      	mov	r8, r6
 801ef0a:	e5df      	b.n	801eacc <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x110>
 801ef0c:	f8bd 302c 	ldrh.w	r3, [sp, #44]	@ 0x2c
 801ef10:	9a01      	ldr	r2, [sp, #4]
 801ef12:	1a9b      	subs	r3, r3, r2
 801ef14:	1b5d      	subs	r5, r3, r5
 801ef16:	b2ad      	uxth	r5, r5
 801ef18:	e7f4      	b.n	801ef04 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x548>
 801ef1a:	4b05      	ldr	r3, [pc, #20]	@ (801ef30 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x574>)
 801ef1c:	6818      	ldr	r0, [r3, #0]
 801ef1e:	6803      	ldr	r3, [r0, #0]
 801ef20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801ef22:	4798      	blx	r3
 801ef24:	b00f      	add	sp, #60	@ 0x3c
 801ef26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ef2a:	bf00      	nop
 801ef2c:	24028e1a 	.word	0x24028e1a
 801ef30:	24028e20 	.word	0x24028e20

0801ef34 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h>:
 801ef34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ef38:	b093      	sub	sp, #76	@ 0x4c
 801ef3a:	460d      	mov	r5, r1
 801ef3c:	4616      	mov	r6, r2
 801ef3e:	f89d b070 	ldrb.w	fp, [sp, #112]	@ 0x70
 801ef42:	9000      	str	r0, [sp, #0]
 801ef44:	f1bb 0f00 	cmp.w	fp, #0
 801ef48:	f000 82ac 	beq.w	801f4a4 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x570>
 801ef4c:	6810      	ldr	r0, [r2, #0]
 801ef4e:	ac0e      	add	r4, sp, #56	@ 0x38
 801ef50:	6851      	ldr	r1, [r2, #4]
 801ef52:	c403      	stmia	r4!, {r0, r1}
 801ef54:	6818      	ldr	r0, [r3, #0]
 801ef56:	ac10      	add	r4, sp, #64	@ 0x40
 801ef58:	6859      	ldr	r1, [r3, #4]
 801ef5a:	c403      	stmia	r4!, {r0, r1}
 801ef5c:	a80e      	add	r0, sp, #56	@ 0x38
 801ef5e:	f7f8 fdbd 	bl	8017adc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801ef62:	4631      	mov	r1, r6
 801ef64:	a810      	add	r0, sp, #64	@ 0x40
 801ef66:	f7f8 fdfd 	bl	8017b64 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801ef6a:	f9bd 203c 	ldrsh.w	r2, [sp, #60]	@ 0x3c
 801ef6e:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 801ef72:	bfdb      	ittet	le
 801ef74:	b293      	uxthle	r3, r2
 801ef76:	f44f 6180 	movle.w	r1, #1024	@ 0x400
 801ef7a:	2301      	movgt	r3, #1
 801ef7c:	fb91 f3f3 	sdivle	r3, r1, r3
 801ef80:	9301      	str	r3, [sp, #4]
 801ef82:	f105 0308 	add.w	r3, r5, #8
 801ef86:	9901      	ldr	r1, [sp, #4]
 801ef88:	9305      	str	r3, [sp, #20]
 801ef8a:	f9bd 303e 	ldrsh.w	r3, [sp, #62]	@ 0x3e
 801ef8e:	440b      	add	r3, r1
 801ef90:	3b01      	subs	r3, #1
 801ef92:	fb93 f3f1 	sdiv	r3, r3, r1
 801ef96:	3b01      	subs	r3, #1
 801ef98:	9905      	ldr	r1, [sp, #20]
 801ef9a:	b29b      	uxth	r3, r3
 801ef9c:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 801efa0:	9901      	ldr	r1, [sp, #4]
 801efa2:	9306      	str	r3, [sp, #24]
 801efa4:	f9bd 3042 	ldrsh.w	r3, [sp, #66]	@ 0x42
 801efa8:	fb93 f0f1 	sdiv	r0, r3, r1
 801efac:	b284      	uxth	r4, r0
 801efae:	f8bd 1040 	ldrh.w	r1, [sp, #64]	@ 0x40
 801efb2:	9403      	str	r4, [sp, #12]
 801efb4:	9d03      	ldr	r5, [sp, #12]
 801efb6:	9c01      	ldr	r4, [sp, #4]
 801efb8:	fb05 3714 	mls	r7, r5, r4, r3
 801efbc:	fb17 f702 	smulbb	r7, r7, r2
 801efc0:	440f      	add	r7, r1
 801efc2:	b2bf      	uxth	r7, r7
 801efc4:	2d00      	cmp	r5, #0
 801efc6:	d06b      	beq.n	801f0a0 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x16c>
 801efc8:	1e6a      	subs	r2, r5, #1
 801efca:	9805      	ldr	r0, [sp, #20]
 801efcc:	f850 9022 	ldr.w	r9, [r0, r2, lsl #2]
 801efd0:	9a06      	ldr	r2, [sp, #24]
 801efd2:	fa99 f989 	rev.w	r9, r9
 801efd6:	4491      	add	r9, r2
 801efd8:	f8bd 2038 	ldrh.w	r2, [sp, #56]	@ 0x38
 801efdc:	f9bd 5046 	ldrsh.w	r5, [sp, #70]	@ 0x46
 801efe0:	4411      	add	r1, r2
 801efe2:	f8bd 203a 	ldrh.w	r2, [sp, #58]	@ 0x3a
 801efe6:	f8df a35c 	ldr.w	sl, [pc, #860]	@ 801f344 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x410>
 801efea:	4413      	add	r3, r2
 801efec:	f8ad 1040 	strh.w	r1, [sp, #64]	@ 0x40
 801eff0:	f8ad 3042 	strh.w	r3, [sp, #66]	@ 0x42
 801eff4:	f9bd 3044 	ldrsh.w	r3, [sp, #68]	@ 0x44
 801eff8:	9302      	str	r3, [sp, #8]
 801effa:	4bd0      	ldr	r3, [pc, #832]	@ (801f33c <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x408>)
 801effc:	6818      	ldr	r0, [r3, #0]
 801effe:	6803      	ldr	r3, [r0, #0]
 801f000:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801f002:	4798      	blx	r3
 801f004:	4bce      	ldr	r3, [pc, #824]	@ (801f340 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x40c>)
 801f006:	f9bd 2040 	ldrsh.w	r2, [sp, #64]	@ 0x40
 801f00a:	881b      	ldrh	r3, [r3, #0]
 801f00c:	f9bd 4042 	ldrsh.w	r4, [sp, #66]	@ 0x42
 801f010:	fb03 2404 	mla	r4, r3, r4, r2
 801f014:	f44f 7280 	mov.w	r2, #256	@ 0x100
 801f018:	436b      	muls	r3, r5
 801f01a:	2500      	movs	r5, #0
 801f01c:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801f020:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801f024:	4629      	mov	r1, r5
 801f026:	4404      	add	r4, r0
 801f028:	18e3      	adds	r3, r4, r3
 801f02a:	930d      	str	r3, [sp, #52]	@ 0x34
 801f02c:	f9bd 303c 	ldrsh.w	r3, [sp, #60]	@ 0x3c
 801f030:	fb97 f3f3 	sdiv	r3, r7, r3
 801f034:	9304      	str	r3, [sp, #16]
 801f036:	9b00      	ldr	r3, [sp, #0]
 801f038:	3304      	adds	r3, #4
 801f03a:	4618      	mov	r0, r3
 801f03c:	9309      	str	r3, [sp, #36]	@ 0x24
 801f03e:	f009 f83b 	bl	80280b8 <memset>
 801f042:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801f044:	42a3      	cmp	r3, r4
 801f046:	f240 8228 	bls.w	801f49a <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x566>
 801f04a:	2003      	movs	r0, #3
 801f04c:	2607      	movs	r6, #7
 801f04e:	2f00      	cmp	r7, #0
 801f050:	f000 80cb 	beq.w	801f1ea <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x2b6>
 801f054:	f899 3000 	ldrb.w	r3, [r9]
 801f058:	b2db      	uxtb	r3, r3
 801f05a:	2bfe      	cmp	r3, #254	@ 0xfe
 801f05c:	d123      	bne.n	801f0a6 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x172>
 801f05e:	f899 3001 	ldrb.w	r3, [r9, #1]
 801f062:	3f01      	subs	r7, #1
 801f064:	f899 2002 	ldrb.w	r2, [r9, #2]
 801f068:	f109 0804 	add.w	r8, r9, #4
 801f06c:	b2db      	uxtb	r3, r3
 801f06e:	f899 1003 	ldrb.w	r1, [r9, #3]
 801f072:	b2d2      	uxtb	r2, r2
 801f074:	f363 0507 	bfi	r5, r3, #0, #8
 801f078:	b2c9      	uxtb	r1, r1
 801f07a:	b2bf      	uxth	r7, r7
 801f07c:	f362 250f 	bfi	r5, r2, #8, #8
 801f080:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 801f084:	fb10 2201 	smlabb	r2, r0, r1, r2
 801f088:	f361 4517 	bfi	r5, r1, #16, #8
 801f08c:	fb16 2303 	smlabb	r3, r6, r3, r2
 801f090:	9a00      	ldr	r2, [sp, #0]
 801f092:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801f096:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801f09a:	605d      	str	r5, [r3, #4]
 801f09c:	46c1      	mov	r9, r8
 801f09e:	e7d6      	b.n	801f04e <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x11a>
 801f0a0:	f8dd 9018 	ldr.w	r9, [sp, #24]
 801f0a4:	e798      	b.n	801efd8 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0xa4>
 801f0a6:	119a      	asrs	r2, r3, #6
 801f0a8:	f109 0801 	add.w	r8, r9, #1
 801f0ac:	d108      	bne.n	801f0c0 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x18c>
 801f0ae:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801f0b2:	9a00      	ldr	r2, [sp, #0]
 801f0b4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801f0b8:	685d      	ldr	r5, [r3, #4]
 801f0ba:	3f01      	subs	r7, #1
 801f0bc:	b2bf      	uxth	r7, r7
 801f0be:	e7ed      	b.n	801f09c <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x168>
 801f0c0:	2a01      	cmp	r2, #1
 801f0c2:	d125      	bne.n	801f110 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x1dc>
 801f0c4:	f003 0103 	and.w	r1, r3, #3
 801f0c8:	1eaa      	subs	r2, r5, #2
 801f0ca:	440a      	add	r2, r1
 801f0cc:	f3c3 0181 	ubfx	r1, r3, #2, #2
 801f0d0:	f3c3 1301 	ubfx	r3, r3, #4, #2
 801f0d4:	b2d2      	uxtb	r2, r2
 801f0d6:	3902      	subs	r1, #2
 801f0d8:	3b02      	subs	r3, #2
 801f0da:	f362 0507 	bfi	r5, r2, #0, #8
 801f0de:	eb01 2115 	add.w	r1, r1, r5, lsr #8
 801f0e2:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 801f0e6:	f361 250f 	bfi	r5, r1, #8, #8
 801f0ea:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 801f0ee:	eb03 4315 	add.w	r3, r3, r5, lsr #16
 801f0f2:	f003 03ff 	and.w	r3, r3, #255	@ 0xff
 801f0f6:	fb10 1103 	smlabb	r1, r0, r3, r1
 801f0fa:	f363 4517 	bfi	r5, r3, #16, #8
 801f0fe:	9b00      	ldr	r3, [sp, #0]
 801f100:	fb16 1202 	smlabb	r2, r6, r2, r1
 801f104:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 801f108:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 801f10c:	6055      	str	r5, [r2, #4]
 801f10e:	e7d4      	b.n	801f0ba <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x186>
 801f110:	2a02      	cmp	r2, #2
 801f112:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801f116:	d12c      	bne.n	801f172 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x23e>
 801f118:	f899 2001 	ldrb.w	r2, [r9, #1]
 801f11c:	f1a3 0c20 	sub.w	ip, r3, #32
 801f120:	f109 0802 	add.w	r8, r9, #2
 801f124:	b2d2      	uxtb	r2, r2
 801f126:	f002 010f 	and.w	r1, r2, #15
 801f12a:	1112      	asrs	r2, r2, #4
 801f12c:	3908      	subs	r1, #8
 801f12e:	3a08      	subs	r2, #8
 801f130:	4461      	add	r1, ip
 801f132:	4494      	add	ip, r2
 801f134:	4429      	add	r1, r5
 801f136:	b2c9      	uxtb	r1, r1
 801f138:	f361 0507 	bfi	r5, r1, #0, #8
 801f13c:	f3c5 2e07 	ubfx	lr, r5, #8, #8
 801f140:	f1ae 0e20 	sub.w	lr, lr, #32
 801f144:	4473      	add	r3, lr
 801f146:	b2db      	uxtb	r3, r3
 801f148:	f363 250f 	bfi	r5, r3, #8, #8
 801f14c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 801f150:	eb0c 4c15 	add.w	ip, ip, r5, lsr #16
 801f154:	f00c 0cff 	and.w	ip, ip, #255	@ 0xff
 801f158:	fb10 330c 	smlabb	r3, r0, ip, r3
 801f15c:	f36c 4517 	bfi	r5, ip, #16, #8
 801f160:	fb16 3101 	smlabb	r1, r6, r1, r3
 801f164:	9b00      	ldr	r3, [sp, #0]
 801f166:	f001 013f 	and.w	r1, r1, #63	@ 0x3f
 801f16a:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 801f16e:	604d      	str	r5, [r1, #4]
 801f170:	e7a3      	b.n	801f0ba <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x186>
 801f172:	3301      	adds	r3, #1
 801f174:	42bb      	cmp	r3, r7
 801f176:	dd23      	ble.n	801f1c0 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x28c>
 801f178:	eba3 0907 	sub.w	r9, r3, r7
 801f17c:	f1b9 0f00 	cmp.w	r9, #0
 801f180:	dc20      	bgt.n	801f1c4 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x290>
 801f182:	9e02      	ldr	r6, [sp, #8]
 801f184:	2700      	movs	r7, #0
 801f186:	2e00      	cmp	r6, #0
 801f188:	f340 8142 	ble.w	801f410 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x4dc>
 801f18c:	f108 0301 	add.w	r3, r8, #1
 801f190:	9307      	str	r3, [sp, #28]
 801f192:	f898 3000 	ldrb.w	r3, [r8]
 801f196:	b2db      	uxtb	r3, r3
 801f198:	119a      	asrs	r2, r3, #6
 801f19a:	d12a      	bne.n	801f1f2 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x2be>
 801f19c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801f1a0:	9a00      	ldr	r2, [sp, #0]
 801f1a2:	f1bb 0fff 	cmp.w	fp, #255	@ 0xff
 801f1a6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801f1aa:	685d      	ldr	r5, [r3, #4]
 801f1ac:	f040 811f 	bne.w	801f3ee <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x4ba>
 801f1b0:	f3c5 2307 	ubfx	r3, r5, #8, #8
 801f1b4:	7025      	strb	r5, [r4, #0]
 801f1b6:	7063      	strb	r3, [r4, #1]
 801f1b8:	f3c5 4307 	ubfx	r3, r5, #16, #8
 801f1bc:	70a3      	strb	r3, [r4, #2]
 801f1be:	e04e      	b.n	801f25e <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x32a>
 801f1c0:	1aff      	subs	r7, r7, r3
 801f1c2:	e77b      	b.n	801f0bc <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x188>
 801f1c4:	9b02      	ldr	r3, [sp, #8]
 801f1c6:	4620      	mov	r0, r4
 801f1c8:	462a      	mov	r2, r5
 801f1ca:	454b      	cmp	r3, r9
 801f1cc:	bfa8      	it	ge
 801f1ce:	464b      	movge	r3, r9
 801f1d0:	461f      	mov	r7, r3
 801f1d2:	9b02      	ldr	r3, [sp, #8]
 801f1d4:	4639      	mov	r1, r7
 801f1d6:	1bde      	subs	r6, r3, r7
 801f1d8:	eba9 0907 	sub.w	r9, r9, r7
 801f1dc:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801f1e0:	465b      	mov	r3, fp
 801f1e2:	f7e3 fe63 	bl	8002eac <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh>
 801f1e6:	443c      	add	r4, r7
 801f1e8:	e7cc      	b.n	801f184 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x250>
 801f1ea:	46c8      	mov	r8, r9
 801f1ec:	9e02      	ldr	r6, [sp, #8]
 801f1ee:	46b9      	mov	r9, r7
 801f1f0:	e7c8      	b.n	801f184 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x250>
 801f1f2:	2a01      	cmp	r2, #1
 801f1f4:	d136      	bne.n	801f264 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x330>
 801f1f6:	f003 0103 	and.w	r1, r3, #3
 801f1fa:	1ea8      	subs	r0, r5, #2
 801f1fc:	f1bb 0fff 	cmp.w	fp, #255	@ 0xff
 801f200:	4408      	add	r0, r1
 801f202:	f3c3 0181 	ubfx	r1, r3, #2, #2
 801f206:	f3c3 1301 	ubfx	r3, r3, #4, #2
 801f20a:	b2c0      	uxtb	r0, r0
 801f20c:	f1a1 0102 	sub.w	r1, r1, #2
 801f210:	f1a3 0302 	sub.w	r3, r3, #2
 801f214:	f360 0507 	bfi	r5, r0, #0, #8
 801f218:	eb01 2115 	add.w	r1, r1, r5, lsr #8
 801f21c:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 801f220:	f361 250f 	bfi	r5, r1, #8, #8
 801f224:	eb01 0c81 	add.w	ip, r1, r1, lsl #2
 801f228:	eb03 4315 	add.w	r3, r3, r5, lsr #16
 801f22c:	f003 08ff 	and.w	r8, r3, #255	@ 0xff
 801f230:	f04f 0303 	mov.w	r3, #3
 801f234:	fb13 ce08 	smlabb	lr, r3, r8, ip
 801f238:	f04f 0c07 	mov.w	ip, #7
 801f23c:	9b00      	ldr	r3, [sp, #0]
 801f23e:	f368 4517 	bfi	r5, r8, #16, #8
 801f242:	fb1c ec00 	smlabb	ip, ip, r0, lr
 801f246:	f00c 0c3f 	and.w	ip, ip, #63	@ 0x3f
 801f24a:	eb03 0c8c 	add.w	ip, r3, ip, lsl #2
 801f24e:	f8cc 5004 	str.w	r5, [ip, #4]
 801f252:	f040 80cd 	bne.w	801f3f0 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x4bc>
 801f256:	7020      	strb	r0, [r4, #0]
 801f258:	7061      	strb	r1, [r4, #1]
 801f25a:	f884 8002 	strb.w	r8, [r4, #2]
 801f25e:	3e01      	subs	r6, #1
 801f260:	3403      	adds	r4, #3
 801f262:	e0c1      	b.n	801f3e8 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x4b4>
 801f264:	2a02      	cmp	r2, #2
 801f266:	d13d      	bne.n	801f2e4 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x3b0>
 801f268:	f898 1001 	ldrb.w	r1, [r8, #1]
 801f26c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801f270:	f108 0202 	add.w	r2, r8, #2
 801f274:	f1bb 0fff 	cmp.w	fp, #255	@ 0xff
 801f278:	b2c9      	uxtb	r1, r1
 801f27a:	f1a3 0c20 	sub.w	ip, r3, #32
 801f27e:	9207      	str	r2, [sp, #28]
 801f280:	f001 000f 	and.w	r0, r1, #15
 801f284:	f1a0 0008 	sub.w	r0, r0, #8
 801f288:	4460      	add	r0, ip
 801f28a:	4428      	add	r0, r5
 801f28c:	b2c0      	uxtb	r0, r0
 801f28e:	f360 0507 	bfi	r5, r0, #0, #8
 801f292:	f3c5 2207 	ubfx	r2, r5, #8, #8
 801f296:	f1a2 0220 	sub.w	r2, r2, #32
 801f29a:	4413      	add	r3, r2
 801f29c:	ea4f 1221 	mov.w	r2, r1, asr #4
 801f2a0:	b2db      	uxtb	r3, r3
 801f2a2:	f1a2 0208 	sub.w	r2, r2, #8
 801f2a6:	f363 250f 	bfi	r5, r3, #8, #8
 801f2aa:	4462      	add	r2, ip
 801f2ac:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 801f2b0:	f04f 0c03 	mov.w	ip, #3
 801f2b4:	eb02 4215 	add.w	r2, r2, r5, lsr #16
 801f2b8:	f002 02ff 	and.w	r2, r2, #255	@ 0xff
 801f2bc:	fb1c 1c02 	smlabb	ip, ip, r2, r1
 801f2c0:	f04f 0107 	mov.w	r1, #7
 801f2c4:	f362 4517 	bfi	r5, r2, #16, #8
 801f2c8:	fb11 c100 	smlabb	r1, r1, r0, ip
 801f2cc:	f001 0c3f 	and.w	ip, r1, #63	@ 0x3f
 801f2d0:	9900      	ldr	r1, [sp, #0]
 801f2d2:	eb01 018c 	add.w	r1, r1, ip, lsl #2
 801f2d6:	604d      	str	r5, [r1, #4]
 801f2d8:	f040 8089 	bne.w	801f3ee <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x4ba>
 801f2dc:	7020      	strb	r0, [r4, #0]
 801f2de:	7063      	strb	r3, [r4, #1]
 801f2e0:	70a2      	strb	r2, [r4, #2]
 801f2e2:	e7bc      	b.n	801f25e <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x32a>
 801f2e4:	2bfe      	cmp	r3, #254	@ 0xfe
 801f2e6:	d12f      	bne.n	801f348 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x414>
 801f2e8:	f898 0001 	ldrb.w	r0, [r8, #1]
 801f2ec:	f108 0304 	add.w	r3, r8, #4
 801f2f0:	f898 2002 	ldrb.w	r2, [r8, #2]
 801f2f4:	f04f 0c03 	mov.w	ip, #3
 801f2f8:	f898 1003 	ldrb.w	r1, [r8, #3]
 801f2fc:	b2c0      	uxtb	r0, r0
 801f2fe:	b2d2      	uxtb	r2, r2
 801f300:	9307      	str	r3, [sp, #28]
 801f302:	b2c9      	uxtb	r1, r1
 801f304:	f360 0507 	bfi	r5, r0, #0, #8
 801f308:	eb02 0382 	add.w	r3, r2, r2, lsl #2
 801f30c:	f1bb 0fff 	cmp.w	fp, #255	@ 0xff
 801f310:	f362 250f 	bfi	r5, r2, #8, #8
 801f314:	fb1c 3c01 	smlabb	ip, ip, r1, r3
 801f318:	f04f 0307 	mov.w	r3, #7
 801f31c:	f361 4517 	bfi	r5, r1, #16, #8
 801f320:	fb13 c300 	smlabb	r3, r3, r0, ip
 801f324:	f003 0c3f 	and.w	ip, r3, #63	@ 0x3f
 801f328:	9b00      	ldr	r3, [sp, #0]
 801f32a:	eb03 038c 	add.w	r3, r3, ip, lsl #2
 801f32e:	605d      	str	r5, [r3, #4]
 801f330:	d15d      	bne.n	801f3ee <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x4ba>
 801f332:	7020      	strb	r0, [r4, #0]
 801f334:	7062      	strb	r2, [r4, #1]
 801f336:	70a1      	strb	r1, [r4, #2]
 801f338:	e791      	b.n	801f25e <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x32a>
 801f33a:	bf00      	nop
 801f33c:	24028e20 	.word	0x24028e20
 801f340:	24028e1a 	.word	0x24028e1a
 801f344:	24000140 	.word	0x24000140
 801f348:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801f34c:	1c5a      	adds	r2, r3, #1
 801f34e:	b94b      	cbnz	r3, 801f364 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x430>
 801f350:	f1bb 0fff 	cmp.w	fp, #255	@ 0xff
 801f354:	d14c      	bne.n	801f3f0 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x4bc>
 801f356:	f3c5 2207 	ubfx	r2, r5, #8, #8
 801f35a:	f3c5 4307 	ubfx	r3, r5, #16, #8
 801f35e:	7025      	strb	r5, [r4, #0]
 801f360:	7062      	strb	r2, [r4, #1]
 801f362:	e72b      	b.n	801f1bc <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x288>
 801f364:	4296      	cmp	r6, r2
 801f366:	46b0      	mov	r8, r6
 801f368:	bfa8      	it	ge
 801f36a:	4690      	movge	r8, r2
 801f36c:	eb08 0348 	add.w	r3, r8, r8, lsl #1
 801f370:	f1bb 0fff 	cmp.w	fp, #255	@ 0xff
 801f374:	eba6 0608 	sub.w	r6, r6, r8
 801f378:	eba2 0908 	sub.w	r9, r2, r8
 801f37c:	9308      	str	r3, [sp, #32]
 801f37e:	b2eb      	uxtb	r3, r5
 801f380:	930c      	str	r3, [sp, #48]	@ 0x30
 801f382:	f3c5 2307 	ubfx	r3, r5, #8, #8
 801f386:	930b      	str	r3, [sp, #44]	@ 0x2c
 801f388:	f3c5 4307 	ubfx	r3, r5, #16, #8
 801f38c:	930a      	str	r3, [sp, #40]	@ 0x28
 801f38e:	9b08      	ldr	r3, [sp, #32]
 801f390:	d030      	beq.n	801f3f4 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x4c0>
 801f392:	18fb      	adds	r3, r7, r3
 801f394:	2bc0      	cmp	r3, #192	@ 0xc0
 801f396:	dd15      	ble.n	801f3c4 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x490>
 801f398:	4650      	mov	r0, sl
 801f39a:	eb07 0147 	add.w	r1, r7, r7, lsl #1
 801f39e:	f7e3 fd6b 	bl	8002e78 <_ZN8touchgfx5paint9flushLineEPmi>
 801f3a2:	2203      	movs	r2, #3
 801f3a4:	4651      	mov	r1, sl
 801f3a6:	465b      	mov	r3, fp
 801f3a8:	4620      	mov	r0, r4
 801f3aa:	443c      	add	r4, r7
 801f3ac:	fb97 f2f2 	sdiv	r2, r7, r2
 801f3b0:	f7e3 fda6 	bl	8002f00 <_ZN8touchgfx5paint6rgb88814lineFromRGB888EPhPKhjh>
 801f3b4:	4b3d      	ldr	r3, [pc, #244]	@ (801f4ac <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x578>)
 801f3b6:	2700      	movs	r7, #0
 801f3b8:	459a      	cmp	sl, r3
 801f3ba:	bf0c      	ite	eq
 801f3bc:	f8df a0f8 	ldreq.w	sl, [pc, #248]	@ 801f4b8 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x584>
 801f3c0:	f8df a0e8 	ldrne.w	sl, [pc, #232]	@ 801f4ac <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x578>
 801f3c4:	eb0a 0307 	add.w	r3, sl, r7
 801f3c8:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801f3ca:	f1b8 0801 	subs.w	r8, r8, #1
 801f3ce:	f103 0303 	add.w	r3, r3, #3
 801f3d2:	f803 2c03 	strb.w	r2, [r3, #-3]
 801f3d6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801f3d8:	f803 2c02 	strb.w	r2, [r3, #-2]
 801f3dc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801f3de:	f803 2c01 	strb.w	r2, [r3, #-1]
 801f3e2:	d1f1      	bne.n	801f3c8 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x494>
 801f3e4:	9b08      	ldr	r3, [sp, #32]
 801f3e6:	441f      	add	r7, r3
 801f3e8:	f8dd 801c 	ldr.w	r8, [sp, #28]
 801f3ec:	e6cb      	b.n	801f186 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x252>
 801f3ee:	2201      	movs	r2, #1
 801f3f0:	4690      	mov	r8, r2
 801f3f2:	e7bb      	b.n	801f36c <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x438>
 801f3f4:	4423      	add	r3, r4
 801f3f6:	42a3      	cmp	r3, r4
 801f3f8:	d9f6      	bls.n	801f3e8 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x4b4>
 801f3fa:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801f3fc:	3403      	adds	r4, #3
 801f3fe:	f804 2c03 	strb.w	r2, [r4, #-3]
 801f402:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801f404:	f804 2c02 	strb.w	r2, [r4, #-2]
 801f408:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801f40a:	f804 2c01 	strb.w	r2, [r4, #-1]
 801f40e:	e7f2      	b.n	801f3f6 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x4c2>
 801f410:	f1bb 0fff 	cmp.w	fp, #255	@ 0xff
 801f414:	d00e      	beq.n	801f434 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x500>
 801f416:	b16f      	cbz	r7, 801f434 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x500>
 801f418:	eb07 0147 	add.w	r1, r7, r7, lsl #1
 801f41c:	4650      	mov	r0, sl
 801f41e:	f7e3 fd2b 	bl	8002e78 <_ZN8touchgfx5paint9flushLineEPmi>
 801f422:	2203      	movs	r2, #3
 801f424:	4620      	mov	r0, r4
 801f426:	443c      	add	r4, r7
 801f428:	465b      	mov	r3, fp
 801f42a:	4651      	mov	r1, sl
 801f42c:	fb97 f2f2 	sdiv	r2, r7, r2
 801f430:	f7e3 fd66 	bl	8002f00 <_ZN8touchgfx5paint6rgb88814lineFromRGB888EPhPKhjh>
 801f434:	4b1e      	ldr	r3, [pc, #120]	@ (801f4b0 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x57c>)
 801f436:	9a02      	ldr	r2, [sp, #8]
 801f438:	881b      	ldrh	r3, [r3, #0]
 801f43a:	1a9b      	subs	r3, r3, r2
 801f43c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801f440:	441c      	add	r4, r3
 801f442:	9b04      	ldr	r3, [sp, #16]
 801f444:	3301      	adds	r3, #1
 801f446:	9304      	str	r3, [sp, #16]
 801f448:	9a04      	ldr	r2, [sp, #16]
 801f44a:	9b01      	ldr	r3, [sp, #4]
 801f44c:	4293      	cmp	r3, r2
 801f44e:	d11c      	bne.n	801f48a <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x556>
 801f450:	9b03      	ldr	r3, [sp, #12]
 801f452:	2500      	movs	r5, #0
 801f454:	9a03      	ldr	r2, [sp, #12]
 801f456:	1c5e      	adds	r6, r3, #1
 801f458:	9b05      	ldr	r3, [sp, #20]
 801f45a:	f8bd 7040 	ldrh.w	r7, [sp, #64]	@ 0x40
 801f45e:	4629      	mov	r1, r5
 801f460:	f853 8022 	ldr.w	r8, [r3, r2, lsl #2]
 801f464:	f44f 7280 	mov.w	r2, #256	@ 0x100
 801f468:	9b06      	ldr	r3, [sp, #24]
 801f46a:	fa98 f888 	rev.w	r8, r8
 801f46e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801f470:	4498      	add	r8, r3
 801f472:	f8bd 3038 	ldrh.w	r3, [sp, #56]	@ 0x38
 801f476:	1aff      	subs	r7, r7, r3
 801f478:	f008 fe1e 	bl	80280b8 <memset>
 801f47c:	b2bf      	uxth	r7, r7
 801f47e:	e9cd 6503 	strd	r6, r5, [sp, #12]
 801f482:	f7e3 fcef 	bl	8002e64 <_ZN8touchgfx5paint8tearDownEv>
 801f486:	46c1      	mov	r9, r8
 801f488:	e5db      	b.n	801f042 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x10e>
 801f48a:	f8bd 703c 	ldrh.w	r7, [sp, #60]	@ 0x3c
 801f48e:	9b02      	ldr	r3, [sp, #8]
 801f490:	1aff      	subs	r7, r7, r3
 801f492:	eba7 0709 	sub.w	r7, r7, r9
 801f496:	b2bf      	uxth	r7, r7
 801f498:	e7f3      	b.n	801f482 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x54e>
 801f49a:	4b06      	ldr	r3, [pc, #24]	@ (801f4b4 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x580>)
 801f49c:	6818      	ldr	r0, [r3, #0]
 801f49e:	6803      	ldr	r3, [r0, #0]
 801f4a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801f4a2:	4798      	blx	r3
 801f4a4:	b013      	add	sp, #76	@ 0x4c
 801f4a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f4aa:	bf00      	nop
 801f4ac:	24000140 	.word	0x24000140
 801f4b0:	24028e1a 	.word	0x24028e1a
 801f4b4:	24028e20 	.word	0x24028e20
 801f4b8:	24000240 	.word	0x24000240

0801f4bc <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh>:
 801f4bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801f4c0:	f89d 001c 	ldrb.w	r0, [sp, #28]
 801f4c4:	9c06      	ldr	r4, [sp, #24]
 801f4c6:	2800      	cmp	r0, #0
 801f4c8:	d06e      	beq.n	801f5a8 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 801f4ca:	f9b3 5004 	ldrsh.w	r5, [r3, #4]
 801f4ce:	2d00      	cmp	r5, #0
 801f4d0:	dd6a      	ble.n	801f5a8 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 801f4d2:	f9b3 c006 	ldrsh.w	ip, [r3, #6]
 801f4d6:	f1bc 0f00 	cmp.w	ip, #0
 801f4da:	dd65      	ble.n	801f5a8 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 801f4dc:	f9b3 6002 	ldrsh.w	r6, [r3, #2]
 801f4e0:	28ff      	cmp	r0, #255	@ 0xff
 801f4e2:	f9b3 3000 	ldrsh.w	r3, [r3]
 801f4e6:	f3c4 2707 	ubfx	r7, r4, #8, #8
 801f4ea:	fb02 3306 	mla	r3, r2, r6, r3
 801f4ee:	f3c4 4607 	ubfx	r6, r4, #16, #8
 801f4f2:	b2e4      	uxtb	r4, r4
 801f4f4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801f4f8:	4419      	add	r1, r3
 801f4fa:	fb02 f30c 	mul.w	r3, r2, ip
 801f4fe:	eba2 0205 	sub.w	r2, r2, r5
 801f502:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801f506:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801f50a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801f50e:	440b      	add	r3, r1
 801f510:	d03e      	beq.n	801f590 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xd4>
 801f512:	fa1f fc80 	uxth.w	ip, r0
 801f516:	f1c0 00ff 	rsb	r0, r0, #255	@ 0xff
 801f51a:	fb06 f60c 	mul.w	r6, r6, ip
 801f51e:	b280      	uxth	r0, r0
 801f520:	fb07 f70c 	mul.w	r7, r7, ip
 801f524:	fb04 f40c 	mul.w	r4, r4, ip
 801f528:	4299      	cmp	r1, r3
 801f52a:	d23d      	bcs.n	801f5a8 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 801f52c:	eb01 0c05 	add.w	ip, r1, r5
 801f530:	458c      	cmp	ip, r1
 801f532:	f101 0e03 	add.w	lr, r1, #3
 801f536:	d928      	bls.n	801f58a <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xce>
 801f538:	f81e 1c03 	ldrb.w	r1, [lr, #-3]
 801f53c:	fb11 f100 	smulbb	r1, r1, r0
 801f540:	4421      	add	r1, r4
 801f542:	b289      	uxth	r1, r1
 801f544:	f101 0801 	add.w	r8, r1, #1
 801f548:	eb08 2111 	add.w	r1, r8, r1, lsr #8
 801f54c:	1209      	asrs	r1, r1, #8
 801f54e:	f80e 1c03 	strb.w	r1, [lr, #-3]
 801f552:	f81e 1c02 	ldrb.w	r1, [lr, #-2]
 801f556:	fb11 f100 	smulbb	r1, r1, r0
 801f55a:	4439      	add	r1, r7
 801f55c:	b289      	uxth	r1, r1
 801f55e:	f101 0801 	add.w	r8, r1, #1
 801f562:	eb08 2111 	add.w	r1, r8, r1, lsr #8
 801f566:	1209      	asrs	r1, r1, #8
 801f568:	f80e 1c02 	strb.w	r1, [lr, #-2]
 801f56c:	f81e 1c01 	ldrb.w	r1, [lr, #-1]
 801f570:	fb11 f100 	smulbb	r1, r1, r0
 801f574:	4431      	add	r1, r6
 801f576:	b289      	uxth	r1, r1
 801f578:	f101 0801 	add.w	r8, r1, #1
 801f57c:	eb08 2111 	add.w	r1, r8, r1, lsr #8
 801f580:	1209      	asrs	r1, r1, #8
 801f582:	f80e 1c01 	strb.w	r1, [lr, #-1]
 801f586:	4671      	mov	r1, lr
 801f588:	e7d2      	b.n	801f530 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x74>
 801f58a:	4411      	add	r1, r2
 801f58c:	e7cc      	b.n	801f528 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x6c>
 801f58e:	4411      	add	r1, r2
 801f590:	4299      	cmp	r1, r3
 801f592:	d209      	bcs.n	801f5a8 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 801f594:	1948      	adds	r0, r1, r5
 801f596:	4281      	cmp	r1, r0
 801f598:	d2f9      	bcs.n	801f58e <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xd2>
 801f59a:	700c      	strb	r4, [r1, #0]
 801f59c:	3103      	adds	r1, #3
 801f59e:	f801 7c02 	strb.w	r7, [r1, #-2]
 801f5a2:	f801 6c01 	strb.w	r6, [r1, #-1]
 801f5a6:	e7f6      	b.n	801f596 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xda>
 801f5a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801f5ac <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss>:
 801f5ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f5b0:	b093      	sub	sp, #76	@ 0x4c
 801f5b2:	4699      	mov	r9, r3
 801f5b4:	4617      	mov	r7, r2
 801f5b6:	f9b3 2000 	ldrsh.w	r2, [r3]
 801f5ba:	f9bd 8074 	ldrsh.w	r8, [sp, #116]	@ 0x74
 801f5be:	4604      	mov	r4, r0
 801f5c0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801f5c4:	a80c      	add	r0, sp, #48	@ 0x30
 801f5c6:	f9bd 6078 	ldrsh.w	r6, [sp, #120]	@ 0x78
 801f5ca:	460d      	mov	r5, r1
 801f5cc:	4649      	mov	r1, r9
 801f5ce:	f8ad 2030 	strh.w	r2, [sp, #48]	@ 0x30
 801f5d2:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 801f5d6:	f8ad 8034 	strh.w	r8, [sp, #52]	@ 0x34
 801f5da:	f8ad 6036 	strh.w	r6, [sp, #54]	@ 0x36
 801f5de:	f7f0 fc8f 	bl	800ff00 <_ZN8touchgfx4RectaNERKS0_>
 801f5e2:	4639      	mov	r1, r7
 801f5e4:	a80c      	add	r0, sp, #48	@ 0x30
 801f5e6:	f7f0 fc8b 	bl	800ff00 <_ZN8touchgfx4RectaNERKS0_>
 801f5ea:	4b78      	ldr	r3, [pc, #480]	@ (801f7cc <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x220>)
 801f5ec:	8818      	ldrh	r0, [r3, #0]
 801f5ee:	4b78      	ldr	r3, [pc, #480]	@ (801f7d0 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x224>)
 801f5f0:	b202      	sxth	r2, r0
 801f5f2:	8819      	ldrh	r1, [r3, #0]
 801f5f4:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	@ 0x30
 801f5f8:	b20f      	sxth	r7, r1
 801f5fa:	2b00      	cmp	r3, #0
 801f5fc:	da07      	bge.n	801f60e <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x62>
 801f5fe:	f8bd c034 	ldrh.w	ip, [sp, #52]	@ 0x34
 801f602:	4463      	add	r3, ip
 801f604:	f8ad 3034 	strh.w	r3, [sp, #52]	@ 0x34
 801f608:	2300      	movs	r3, #0
 801f60a:	f8ad 3030 	strh.w	r3, [sp, #48]	@ 0x30
 801f60e:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	@ 0x30
 801f612:	f9bd c034 	ldrsh.w	ip, [sp, #52]	@ 0x34
 801f616:	1ad2      	subs	r2, r2, r3
 801f618:	4594      	cmp	ip, r2
 801f61a:	bfc4      	itt	gt
 801f61c:	1ac2      	subgt	r2, r0, r3
 801f61e:	f8ad 2034 	strhgt.w	r2, [sp, #52]	@ 0x34
 801f622:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	@ 0x32
 801f626:	2a00      	cmp	r2, #0
 801f628:	da07      	bge.n	801f63a <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x8e>
 801f62a:	f8bd c036 	ldrh.w	ip, [sp, #54]	@ 0x36
 801f62e:	4462      	add	r2, ip
 801f630:	f8ad 2036 	strh.w	r2, [sp, #54]	@ 0x36
 801f634:	2200      	movs	r2, #0
 801f636:	f8ad 2032 	strh.w	r2, [sp, #50]	@ 0x32
 801f63a:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	@ 0x32
 801f63e:	f9bd c036 	ldrsh.w	ip, [sp, #54]	@ 0x36
 801f642:	1abf      	subs	r7, r7, r2
 801f644:	45bc      	cmp	ip, r7
 801f646:	f8df c190 	ldr.w	ip, [pc, #400]	@ 801f7d8 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x22c>
 801f64a:	bfc8      	it	gt
 801f64c:	1a8f      	subgt	r7, r1, r2
 801f64e:	f89c c000 	ldrb.w	ip, [ip]
 801f652:	bfc8      	it	gt
 801f654:	f8ad 7036 	strhgt.w	r7, [sp, #54]	@ 0x36
 801f658:	f9bd 7034 	ldrsh.w	r7, [sp, #52]	@ 0x34
 801f65c:	f1bc 0f00 	cmp.w	ip, #0
 801f660:	d176      	bne.n	801f750 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1a4>
 801f662:	4287      	cmp	r7, r0
 801f664:	bf14      	ite	ne
 801f666:	2100      	movne	r1, #0
 801f668:	2101      	moveq	r1, #1
 801f66a:	2f00      	cmp	r7, #0
 801f66c:	9107      	str	r1, [sp, #28]
 801f66e:	dd73      	ble.n	801f758 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1ac>
 801f670:	f9bd 1036 	ldrsh.w	r1, [sp, #54]	@ 0x36
 801f674:	2900      	cmp	r1, #0
 801f676:	9104      	str	r1, [sp, #16]
 801f678:	dd6e      	ble.n	801f758 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1ac>
 801f67a:	f8b9 1000 	ldrh.w	r1, [r9]
 801f67e:	a80e      	add	r0, sp, #56	@ 0x38
 801f680:	f8ad 8044 	strh.w	r8, [sp, #68]	@ 0x44
 801f684:	f10d 0830 	add.w	r8, sp, #48	@ 0x30
 801f688:	1a5b      	subs	r3, r3, r1
 801f68a:	a910      	add	r1, sp, #64	@ 0x40
 801f68c:	f8ad 6046 	strh.w	r6, [sp, #70]	@ 0x46
 801f690:	b21b      	sxth	r3, r3
 801f692:	f8ad 703c 	strh.w	r7, [sp, #60]	@ 0x3c
 801f696:	f8df a144 	ldr.w	sl, [pc, #324]	@ 801f7dc <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x230>
 801f69a:	9305      	str	r3, [sp, #20]
 801f69c:	f8b9 3002 	ldrh.w	r3, [r9, #2]
 801f6a0:	1ad2      	subs	r2, r2, r3
 801f6a2:	b213      	sxth	r3, r2
 801f6a4:	9306      	str	r3, [sp, #24]
 801f6a6:	9b05      	ldr	r3, [sp, #20]
 801f6a8:	f8ad 3038 	strh.w	r3, [sp, #56]	@ 0x38
 801f6ac:	9b06      	ldr	r3, [sp, #24]
 801f6ae:	f8ad 303a 	strh.w	r3, [sp, #58]	@ 0x3a
 801f6b2:	9b04      	ldr	r3, [sp, #16]
 801f6b4:	f8ad 303e 	strh.w	r3, [sp, #62]	@ 0x3e
 801f6b8:	2300      	movs	r3, #0
 801f6ba:	9310      	str	r3, [sp, #64]	@ 0x40
 801f6bc:	f7f8 fa52 	bl	8017b64 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801f6c0:	4640      	mov	r0, r8
 801f6c2:	f7f8 fa0b 	bl	8017adc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801f6c6:	a810      	add	r0, sp, #64	@ 0x40
 801f6c8:	f7f8 fa08 	bl	8017adc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801f6cc:	4b41      	ldr	r3, [pc, #260]	@ (801f7d4 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x228>)
 801f6ce:	f9bd b044 	ldrsh.w	fp, [sp, #68]	@ 0x44
 801f6d2:	4628      	mov	r0, r5
 801f6d4:	881b      	ldrh	r3, [r3, #0]
 801f6d6:	9308      	str	r3, [sp, #32]
 801f6d8:	eb0b 034b 	add.w	r3, fp, fp, lsl #1
 801f6dc:	b21b      	sxth	r3, r3
 801f6de:	9303      	str	r3, [sp, #12]
 801f6e0:	682b      	ldr	r3, [r5, #0]
 801f6e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801f6e4:	4798      	blx	r3
 801f6e6:	9a03      	ldr	r2, [sp, #12]
 801f6e8:	f8bd 303a 	ldrh.w	r3, [sp, #58]	@ 0x3a
 801f6ec:	4681      	mov	r9, r0
 801f6ee:	f8bd 5038 	ldrh.w	r5, [sp, #56]	@ 0x38
 801f6f2:	fb13 f302 	smulbb	r3, r3, r2
 801f6f6:	2203      	movs	r2, #3
 801f6f8:	f8da 0000 	ldr.w	r0, [sl]
 801f6fc:	fb15 3302 	smlabb	r3, r5, r2, r3
 801f700:	9d1c      	ldr	r5, [sp, #112]	@ 0x70
 801f702:	920b      	str	r2, [sp, #44]	@ 0x2c
 801f704:	441d      	add	r5, r3
 801f706:	6803      	ldr	r3, [r0, #0]
 801f708:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801f70a:	4798      	blx	r3
 801f70c:	9009      	str	r0, [sp, #36]	@ 0x24
 801f70e:	f8da 0000 	ldr.w	r0, [sl]
 801f712:	f9bd 1030 	ldrsh.w	r1, [sp, #48]	@ 0x30
 801f716:	6803      	ldr	r3, [r0, #0]
 801f718:	910a      	str	r1, [sp, #40]	@ 0x28
 801f71a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801f71c:	f9bd 6032 	ldrsh.w	r6, [sp, #50]	@ 0x32
 801f720:	4798      	blx	r3
 801f722:	f010 0f01 	tst.w	r0, #1
 801f726:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	@ 0x28
 801f72a:	d01e      	beq.n	801f76a <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1be>
 801f72c:	f8da 0000 	ldr.w	r0, [sl]
 801f730:	f9bd 203c 	ldrsh.w	r2, [sp, #60]	@ 0x3c
 801f734:	6803      	ldr	r3, [r0, #0]
 801f736:	9200      	str	r2, [sp, #0]
 801f738:	6ede      	ldr	r6, [r3, #108]	@ 0x6c
 801f73a:	462b      	mov	r3, r5
 801f73c:	e898 0006 	ldmia.w	r8, {r1, r2}
 801f740:	47b0      	blx	r6
 801f742:	9b05      	ldr	r3, [sp, #20]
 801f744:	80a7      	strh	r7, [r4, #4]
 801f746:	8023      	strh	r3, [r4, #0]
 801f748:	9b06      	ldr	r3, [sp, #24]
 801f74a:	8063      	strh	r3, [r4, #2]
 801f74c:	9b04      	ldr	r3, [sp, #16]
 801f74e:	e007      	b.n	801f760 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1b4>
 801f750:	f9bd 0036 	ldrsh.w	r0, [sp, #54]	@ 0x36
 801f754:	4288      	cmp	r0, r1
 801f756:	e785      	b.n	801f664 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xb8>
 801f758:	2300      	movs	r3, #0
 801f75a:	8023      	strh	r3, [r4, #0]
 801f75c:	8063      	strh	r3, [r4, #2]
 801f75e:	80a3      	strh	r3, [r4, #4]
 801f760:	4620      	mov	r0, r4
 801f762:	80e3      	strh	r3, [r4, #6]
 801f764:	b013      	add	sp, #76	@ 0x4c
 801f766:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f76a:	fb09 f606 	mul.w	r6, r9, r6
 801f76e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801f770:	fb11 6602 	smlabb	r6, r1, r2, r6
 801f774:	9a07      	ldr	r2, [sp, #28]
 801f776:	4433      	add	r3, r6
 801f778:	461e      	mov	r6, r3
 801f77a:	f9bd 303e 	ldrsh.w	r3, [sp, #62]	@ 0x3e
 801f77e:	b16a      	cbz	r2, 801f79c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1f0>
 801f780:	9a08      	ldr	r2, [sp, #32]
 801f782:	4593      	cmp	fp, r2
 801f784:	d10a      	bne.n	801f79c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1f0>
 801f786:	f8da 0000 	ldr.w	r0, [sl]
 801f78a:	fb09 f303 	mul.w	r3, r9, r3
 801f78e:	4629      	mov	r1, r5
 801f790:	6802      	ldr	r2, [r0, #0]
 801f792:	f8d2 a034 	ldr.w	sl, [r2, #52]	@ 0x34
 801f796:	4632      	mov	r2, r6
 801f798:	47d0      	blx	sl
 801f79a:	e7d2      	b.n	801f742 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x196>
 801f79c:	9a03      	ldr	r2, [sp, #12]
 801f79e:	f8df b03c 	ldr.w	fp, [pc, #60]	@ 801f7dc <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x230>
 801f7a2:	fb02 5803 	mla	r8, r2, r3, r5
 801f7a6:	4545      	cmp	r5, r8
 801f7a8:	d2cb      	bcs.n	801f742 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x196>
 801f7aa:	f8db 0000 	ldr.w	r0, [fp]
 801f7ae:	4629      	mov	r1, r5
 801f7b0:	f9bd 303c 	ldrsh.w	r3, [sp, #60]	@ 0x3c
 801f7b4:	6802      	ldr	r2, [r0, #0]
 801f7b6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801f7ba:	f8d2 a034 	ldr.w	sl, [r2, #52]	@ 0x34
 801f7be:	4632      	mov	r2, r6
 801f7c0:	47d0      	blx	sl
 801f7c2:	9b03      	ldr	r3, [sp, #12]
 801f7c4:	444e      	add	r6, r9
 801f7c6:	441d      	add	r5, r3
 801f7c8:	e7ed      	b.n	801f7a6 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1fa>
 801f7ca:	bf00      	nop
 801f7cc:	24028e14 	.word	0x24028e14
 801f7d0:	24028e16 	.word	0x24028e16
 801f7d4:	24028e1a 	.word	0x24028e1a
 801f7d8:	24028e18 	.word	0x24028e18
 801f7dc:	24028e20 	.word	0x24028e20

0801f7e0 <_ZN8touchgfx8LCD24bppC1Ev>:
 801f7e0:	2200      	movs	r2, #0
 801f7e2:	490e      	ldr	r1, [pc, #56]	@ (801f81c <_ZN8touchgfx8LCD24bppC1Ev+0x3c>)
 801f7e4:	e9c0 2201 	strd	r2, r2, [r0, #4]
 801f7e8:	6001      	str	r1, [r0, #0]
 801f7ea:	e9c0 2203 	strd	r2, r2, [r0, #12]
 801f7ee:	e9c0 2205 	strd	r2, r2, [r0, #20]
 801f7f2:	e9c0 2207 	strd	r2, r2, [r0, #28]
 801f7f6:	e9c0 2209 	strd	r2, r2, [r0, #36]	@ 0x24
 801f7fa:	e9c0 220b 	strd	r2, r2, [r0, #44]	@ 0x2c
 801f7fe:	e9c0 220d 	strd	r2, r2, [r0, #52]	@ 0x34
 801f802:	e9c0 220f 	strd	r2, r2, [r0, #60]	@ 0x3c
 801f806:	e9c0 2211 	strd	r2, r2, [r0, #68]	@ 0x44
 801f80a:	e9c0 2213 	strd	r2, r2, [r0, #76]	@ 0x4c
 801f80e:	e9c0 2215 	strd	r2, r2, [r0, #84]	@ 0x54
 801f812:	e9c0 2217 	strd	r2, r2, [r0, #92]	@ 0x5c
 801f816:	e9c0 2219 	strd	r2, r2, [r0, #100]	@ 0x64
 801f81a:	4770      	bx	lr
 801f81c:	0802d48c 	.word	0x0802d48c

0801f820 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>:
 801f820:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f824:	b091      	sub	sp, #68	@ 0x44
 801f826:	4607      	mov	r7, r0
 801f828:	4688      	mov	r8, r1
 801f82a:	6810      	ldr	r0, [r2, #0]
 801f82c:	6851      	ldr	r1, [r2, #4]
 801f82e:	ac0c      	add	r4, sp, #48	@ 0x30
 801f830:	4616      	mov	r6, r2
 801f832:	f89d 9068 	ldrb.w	r9, [sp, #104]	@ 0x68
 801f836:	4d64      	ldr	r5, [pc, #400]	@ (801f9c8 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1a8>)
 801f838:	f8df a190 	ldr.w	sl, [pc, #400]	@ 801f9cc <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1ac>
 801f83c:	c403      	stmia	r4!, {r0, r1}
 801f83e:	6818      	ldr	r0, [r3, #0]
 801f840:	ac0e      	add	r4, sp, #56	@ 0x38
 801f842:	6859      	ldr	r1, [r3, #4]
 801f844:	c403      	stmia	r4!, {r0, r1}
 801f846:	a80c      	add	r0, sp, #48	@ 0x30
 801f848:	f7f8 f948 	bl	8017adc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801f84c:	4631      	mov	r1, r6
 801f84e:	a80e      	add	r0, sp, #56	@ 0x38
 801f850:	f7f8 f988 	bl	8017b64 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801f854:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	@ 0x38
 801f858:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	@ 0x3a
 801f85c:	f8bd 1034 	ldrh.w	r1, [sp, #52]	@ 0x34
 801f860:	6828      	ldr	r0, [r5, #0]
 801f862:	fb11 2103 	smlabb	r1, r1, r3, r2
 801f866:	f9bd 403c 	ldrsh.w	r4, [sp, #60]	@ 0x3c
 801f86a:	f9bd 603e 	ldrsh.w	r6, [sp, #62]	@ 0x3e
 801f86e:	440f      	add	r7, r1
 801f870:	f8bd 1030 	ldrh.w	r1, [sp, #48]	@ 0x30
 801f874:	440a      	add	r2, r1
 801f876:	f8ad 2038 	strh.w	r2, [sp, #56]	@ 0x38
 801f87a:	f8bd 2032 	ldrh.w	r2, [sp, #50]	@ 0x32
 801f87e:	4413      	add	r3, r2
 801f880:	f8ad 303a 	strh.w	r3, [sp, #58]	@ 0x3a
 801f884:	6803      	ldr	r3, [r0, #0]
 801f886:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801f888:	4798      	blx	r3
 801f88a:	f010 0f80 	tst.w	r0, #128	@ 0x80
 801f88e:	6828      	ldr	r0, [r5, #0]
 801f890:	d01f      	beq.n	801f8d2 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xb2>
 801f892:	2201      	movs	r2, #1
 801f894:	2500      	movs	r5, #0
 801f896:	6801      	ldr	r1, [r0, #0]
 801f898:	b2a4      	uxth	r4, r4
 801f89a:	b2b6      	uxth	r6, r6
 801f89c:	f8bd 3038 	ldrh.w	r3, [sp, #56]	@ 0x38
 801f8a0:	e9cd 2508 	strd	r2, r5, [sp, #32]
 801f8a4:	250b      	movs	r5, #11
 801f8a6:	9507      	str	r5, [sp, #28]
 801f8a8:	f8ba 5000 	ldrh.w	r5, [sl]
 801f8ac:	f8cd 9010 	str.w	r9, [sp, #16]
 801f8b0:	9602      	str	r6, [sp, #8]
 801f8b2:	9401      	str	r4, [sp, #4]
 801f8b4:	e9cd 2505 	strd	r2, r5, [sp, #20]
 801f8b8:	f8bd 2034 	ldrh.w	r2, [sp, #52]	@ 0x34
 801f8bc:	9203      	str	r2, [sp, #12]
 801f8be:	f8bd 203a 	ldrh.w	r2, [sp, #58]	@ 0x3a
 801f8c2:	9200      	str	r2, [sp, #0]
 801f8c4:	4642      	mov	r2, r8
 801f8c6:	6bcc      	ldr	r4, [r1, #60]	@ 0x3c
 801f8c8:	4639      	mov	r1, r7
 801f8ca:	47a0      	blx	r4
 801f8cc:	b011      	add	sp, #68	@ 0x44
 801f8ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f8d2:	6803      	ldr	r3, [r0, #0]
 801f8d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801f8d6:	4798      	blx	r3
 801f8d8:	f8ba 5000 	ldrh.w	r5, [sl]
 801f8dc:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	@ 0x38
 801f8e0:	f04f 0e04 	mov.w	lr, #4
 801f8e4:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	@ 0x3a
 801f8e8:	436e      	muls	r6, r5
 801f8ea:	fb05 2303 	mla	r3, r5, r3, r2
 801f8ee:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801f8f2:	1b2d      	subs	r5, r5, r4
 801f8f4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801f8f8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801f8fc:	4418      	add	r0, r3
 801f8fe:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	@ 0x34
 801f902:	1982      	adds	r2, r0, r6
 801f904:	1b1b      	subs	r3, r3, r4
 801f906:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801f90a:	930b      	str	r3, [sp, #44]	@ 0x2c
 801f90c:	4290      	cmp	r0, r2
 801f90e:	d254      	bcs.n	801f9ba <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x19a>
 801f910:	eb00 0a04 	add.w	sl, r0, r4
 801f914:	4550      	cmp	r0, sl
 801f916:	d24c      	bcs.n	801f9b2 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x192>
 801f918:	f817 1b01 	ldrb.w	r1, [r7], #1
 801f91c:	fb1e e101 	smlabb	r1, lr, r1, lr
 801f920:	eb08 0c01 	add.w	ip, r8, r1
 801f924:	f89c 3003 	ldrb.w	r3, [ip, #3]
 801f928:	b173      	cbz	r3, 801f948 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x128>
 801f92a:	2bff      	cmp	r3, #255	@ 0xff
 801f92c:	f818 b001 	ldrb.w	fp, [r8, r1]
 801f930:	d10c      	bne.n	801f94c <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x12c>
 801f932:	f1b9 0fff 	cmp.w	r9, #255	@ 0xff
 801f936:	d109      	bne.n	801f94c <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x12c>
 801f938:	f880 b000 	strb.w	fp, [r0]
 801f93c:	f89c 3001 	ldrb.w	r3, [ip, #1]
 801f940:	7043      	strb	r3, [r0, #1]
 801f942:	f89c 3002 	ldrb.w	r3, [ip, #2]
 801f946:	7083      	strb	r3, [r0, #2]
 801f948:	3003      	adds	r0, #3
 801f94a:	e7e3      	b.n	801f914 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xf4>
 801f94c:	fb09 f103 	mul.w	r1, r9, r3
 801f950:	1c4b      	adds	r3, r1, #1
 801f952:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 801f956:	7801      	ldrb	r1, [r0, #0]
 801f958:	121b      	asrs	r3, r3, #8
 801f95a:	b29e      	uxth	r6, r3
 801f95c:	43db      	mvns	r3, r3
 801f95e:	fb1b fb06 	smulbb	fp, fp, r6
 801f962:	b2db      	uxtb	r3, r3
 801f964:	fb01 b103 	mla	r1, r1, r3, fp
 801f968:	b289      	uxth	r1, r1
 801f96a:	f101 0b01 	add.w	fp, r1, #1
 801f96e:	eb0b 2111 	add.w	r1, fp, r1, lsr #8
 801f972:	f890 b001 	ldrb.w	fp, [r0, #1]
 801f976:	fb1b fb03 	smulbb	fp, fp, r3
 801f97a:	1209      	asrs	r1, r1, #8
 801f97c:	7001      	strb	r1, [r0, #0]
 801f97e:	f89c 1001 	ldrb.w	r1, [ip, #1]
 801f982:	fb01 b106 	mla	r1, r1, r6, fp
 801f986:	b289      	uxth	r1, r1
 801f988:	f101 0b01 	add.w	fp, r1, #1
 801f98c:	eb0b 2111 	add.w	r1, fp, r1, lsr #8
 801f990:	1209      	asrs	r1, r1, #8
 801f992:	7041      	strb	r1, [r0, #1]
 801f994:	f89c 1002 	ldrb.w	r1, [ip, #2]
 801f998:	f890 c002 	ldrb.w	ip, [r0, #2]
 801f99c:	fb1c f303 	smulbb	r3, ip, r3
 801f9a0:	fb01 3606 	mla	r6, r1, r6, r3
 801f9a4:	b2b6      	uxth	r6, r6
 801f9a6:	1c73      	adds	r3, r6, #1
 801f9a8:	eb03 2616 	add.w	r6, r3, r6, lsr #8
 801f9ac:	1236      	asrs	r6, r6, #8
 801f9ae:	7086      	strb	r6, [r0, #2]
 801f9b0:	e7ca      	b.n	801f948 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x128>
 801f9b2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801f9b4:	4428      	add	r0, r5
 801f9b6:	441f      	add	r7, r3
 801f9b8:	e7a8      	b.n	801f90c <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xec>
 801f9ba:	4b03      	ldr	r3, [pc, #12]	@ (801f9c8 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1a8>)
 801f9bc:	6818      	ldr	r0, [r3, #0]
 801f9be:	6803      	ldr	r3, [r0, #0]
 801f9c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801f9c2:	4798      	blx	r3
 801f9c4:	e782      	b.n	801f8cc <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xac>
 801f9c6:	bf00      	nop
 801f9c8:	24028e20 	.word	0x24028e20
 801f9cc:	24028e1a 	.word	0x24028e1a

0801f9d0 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>:
 801f9d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f9d4:	b091      	sub	sp, #68	@ 0x44
 801f9d6:	4680      	mov	r8, r0
 801f9d8:	460e      	mov	r6, r1
 801f9da:	6810      	ldr	r0, [r2, #0]
 801f9dc:	6851      	ldr	r1, [r2, #4]
 801f9de:	ad0c      	add	r5, sp, #48	@ 0x30
 801f9e0:	4614      	mov	r4, r2
 801f9e2:	f89d 7068 	ldrb.w	r7, [sp, #104]	@ 0x68
 801f9e6:	f8df 9198 	ldr.w	r9, [pc, #408]	@ 801fb80 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1b0>
 801f9ea:	f8df a198 	ldr.w	sl, [pc, #408]	@ 801fb84 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1b4>
 801f9ee:	c503      	stmia	r5!, {r0, r1}
 801f9f0:	6818      	ldr	r0, [r3, #0]
 801f9f2:	ad0e      	add	r5, sp, #56	@ 0x38
 801f9f4:	6859      	ldr	r1, [r3, #4]
 801f9f6:	c503      	stmia	r5!, {r0, r1}
 801f9f8:	a80c      	add	r0, sp, #48	@ 0x30
 801f9fa:	f7f8 f86f 	bl	8017adc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801f9fe:	4621      	mov	r1, r4
 801fa00:	a80e      	add	r0, sp, #56	@ 0x38
 801fa02:	f7f8 f8af 	bl	8017b64 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801fa06:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	@ 0x38
 801fa0a:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	@ 0x3a
 801fa0e:	f8bd 1034 	ldrh.w	r1, [sp, #52]	@ 0x34
 801fa12:	f8d9 0000 	ldr.w	r0, [r9]
 801fa16:	fb11 2103 	smlabb	r1, r1, r3, r2
 801fa1a:	f9bd 503e 	ldrsh.w	r5, [sp, #62]	@ 0x3e
 801fa1e:	eb08 0401 	add.w	r4, r8, r1
 801fa22:	f8bd 1030 	ldrh.w	r1, [sp, #48]	@ 0x30
 801fa26:	f9bd 803c 	ldrsh.w	r8, [sp, #60]	@ 0x3c
 801fa2a:	440a      	add	r2, r1
 801fa2c:	f8ad 2038 	strh.w	r2, [sp, #56]	@ 0x38
 801fa30:	f8bd 2032 	ldrh.w	r2, [sp, #50]	@ 0x32
 801fa34:	4413      	add	r3, r2
 801fa36:	f8ad 303a 	strh.w	r3, [sp, #58]	@ 0x3a
 801fa3a:	6803      	ldr	r3, [r0, #0]
 801fa3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801fa3e:	4798      	blx	r3
 801fa40:	f010 0f80 	tst.w	r0, #128	@ 0x80
 801fa44:	f8d9 0000 	ldr.w	r0, [r9]
 801fa48:	d022      	beq.n	801fa90 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xc0>
 801fa4a:	2200      	movs	r2, #0
 801fa4c:	f04f 0c01 	mov.w	ip, #1
 801fa50:	6801      	ldr	r1, [r0, #0]
 801fa52:	b2ad      	uxth	r5, r5
 801fa54:	f8bd 3038 	ldrh.w	r3, [sp, #56]	@ 0x38
 801fa58:	e9cd c208 	strd	ip, r2, [sp, #32]
 801fa5c:	f04f 0c0b 	mov.w	ip, #11
 801fa60:	f8cd c01c 	str.w	ip, [sp, #28]
 801fa64:	f8ba c000 	ldrh.w	ip, [sl]
 801fa68:	9704      	str	r7, [sp, #16]
 801fa6a:	9502      	str	r5, [sp, #8]
 801fa6c:	e9cd 2c05 	strd	r2, ip, [sp, #20]
 801fa70:	f8bd 2034 	ldrh.w	r2, [sp, #52]	@ 0x34
 801fa74:	9203      	str	r2, [sp, #12]
 801fa76:	fa1f f288 	uxth.w	r2, r8
 801fa7a:	9201      	str	r2, [sp, #4]
 801fa7c:	f8bd 203a 	ldrh.w	r2, [sp, #58]	@ 0x3a
 801fa80:	9200      	str	r2, [sp, #0]
 801fa82:	4632      	mov	r2, r6
 801fa84:	6bcd      	ldr	r5, [r1, #60]	@ 0x3c
 801fa86:	4621      	mov	r1, r4
 801fa88:	47a8      	blx	r5
 801fa8a:	b011      	add	sp, #68	@ 0x44
 801fa8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801fa90:	6803      	ldr	r3, [r0, #0]
 801fa92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801fa94:	4798      	blx	r3
 801fa96:	f8ba 2000 	ldrh.w	r2, [sl]
 801fa9a:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	@ 0x3a
 801fa9e:	f04f 0e03 	mov.w	lr, #3
 801faa2:	f9bd 1038 	ldrsh.w	r1, [sp, #56]	@ 0x38
 801faa6:	4355      	muls	r5, r2
 801faa8:	fa1f fc87 	uxth.w	ip, r7
 801faac:	fb02 1303 	mla	r3, r2, r3, r1
 801fab0:	eba2 0208 	sub.w	r2, r2, r8
 801fab4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801fab8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801fabc:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801fac0:	4418      	add	r0, r3
 801fac2:	920b      	str	r2, [sp, #44]	@ 0x2c
 801fac4:	1943      	adds	r3, r0, r5
 801fac6:	f9bd 2034 	ldrsh.w	r2, [sp, #52]	@ 0x34
 801faca:	f1c7 05ff 	rsb	r5, r7, #255	@ 0xff
 801face:	eba2 0208 	sub.w	r2, r2, r8
 801fad2:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 801fad6:	b2ad      	uxth	r5, r5
 801fad8:	4298      	cmp	r0, r3
 801fada:	d24a      	bcs.n	801fb72 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1a2>
 801fadc:	eb00 0908 	add.w	r9, r0, r8
 801fae0:	4621      	mov	r1, r4
 801fae2:	4548      	cmp	r0, r9
 801fae4:	460c      	mov	r4, r1
 801fae6:	d240      	bcs.n	801fb6a <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x19a>
 801fae8:	f04f 0a04 	mov.w	sl, #4
 801faec:	7824      	ldrb	r4, [r4, #0]
 801faee:	2fff      	cmp	r7, #255	@ 0xff
 801faf0:	f101 0101 	add.w	r1, r1, #1
 801faf4:	fb1e a404 	smlabb	r4, lr, r4, sl
 801faf8:	eb06 0a04 	add.w	sl, r6, r4
 801fafc:	f816 b004 	ldrb.w	fp, [r6, r4]
 801fb00:	d02b      	beq.n	801fb5a <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x18a>
 801fb02:	7804      	ldrb	r4, [r0, #0]
 801fb04:	fb14 f405 	smulbb	r4, r4, r5
 801fb08:	fb0b 440c 	mla	r4, fp, ip, r4
 801fb0c:	b2a4      	uxth	r4, r4
 801fb0e:	f104 0b01 	add.w	fp, r4, #1
 801fb12:	eb0b 2414 	add.w	r4, fp, r4, lsr #8
 801fb16:	f890 b001 	ldrb.w	fp, [r0, #1]
 801fb1a:	fb1b fb05 	smulbb	fp, fp, r5
 801fb1e:	1224      	asrs	r4, r4, #8
 801fb20:	7004      	strb	r4, [r0, #0]
 801fb22:	f89a 4001 	ldrb.w	r4, [sl, #1]
 801fb26:	fb04 b40c 	mla	r4, r4, ip, fp
 801fb2a:	b2a4      	uxth	r4, r4
 801fb2c:	f104 0b01 	add.w	fp, r4, #1
 801fb30:	eb0b 2414 	add.w	r4, fp, r4, lsr #8
 801fb34:	1224      	asrs	r4, r4, #8
 801fb36:	7044      	strb	r4, [r0, #1]
 801fb38:	f89a 4002 	ldrb.w	r4, [sl, #2]
 801fb3c:	f890 a002 	ldrb.w	sl, [r0, #2]
 801fb40:	fb1a fa05 	smulbb	sl, sl, r5
 801fb44:	fb04 a40c 	mla	r4, r4, ip, sl
 801fb48:	b2a4      	uxth	r4, r4
 801fb4a:	f104 0a01 	add.w	sl, r4, #1
 801fb4e:	eb0a 2414 	add.w	r4, sl, r4, lsr #8
 801fb52:	1224      	asrs	r4, r4, #8
 801fb54:	7084      	strb	r4, [r0, #2]
 801fb56:	3003      	adds	r0, #3
 801fb58:	e7c3      	b.n	801fae2 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x112>
 801fb5a:	f880 b000 	strb.w	fp, [r0]
 801fb5e:	f89a 4001 	ldrb.w	r4, [sl, #1]
 801fb62:	7044      	strb	r4, [r0, #1]
 801fb64:	f89a 4002 	ldrb.w	r4, [sl, #2]
 801fb68:	e7f4      	b.n	801fb54 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x184>
 801fb6a:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801fb6c:	4420      	add	r0, r4
 801fb6e:	188c      	adds	r4, r1, r2
 801fb70:	e7b2      	b.n	801fad8 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x108>
 801fb72:	4b03      	ldr	r3, [pc, #12]	@ (801fb80 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1b0>)
 801fb74:	6818      	ldr	r0, [r3, #0]
 801fb76:	6803      	ldr	r3, [r0, #0]
 801fb78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801fb7a:	4798      	blx	r3
 801fb7c:	e785      	b.n	801fa8a <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xba>
 801fb7e:	bf00      	nop
 801fb80:	24028e20 	.word	0x24028e20
 801fb84:	24028e1a 	.word	0x24028e1a

0801fb88 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>:
 801fb88:	b4f0      	push	{r4, r5, r6, r7}
 801fb8a:	460c      	mov	r4, r1
 801fb8c:	4611      	mov	r1, r2
 801fb8e:	f89d 5014 	ldrb.w	r5, [sp, #20]
 801fb92:	461a      	mov	r2, r3
 801fb94:	780f      	ldrb	r7, [r1, #0]
 801fb96:	9b04      	ldr	r3, [sp, #16]
 801fb98:	784e      	ldrb	r6, [r1, #1]
 801fb9a:	b11f      	cbz	r7, 801fba4 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x1c>
 801fb9c:	2f01      	cmp	r7, #1
 801fb9e:	d01d      	beq.n	801fbdc <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x54>
 801fba0:	bcf0      	pop	{r4, r5, r6, r7}
 801fba2:	4770      	bx	lr
 801fba4:	2e03      	cmp	r6, #3
 801fba6:	d8fb      	bhi.n	801fba0 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x18>
 801fba8:	e8df f006 	tbb	[pc, r6]
 801fbac:	16140702 	.word	0x16140702
 801fbb0:	9504      	str	r5, [sp, #16]
 801fbb2:	4620      	mov	r0, r4
 801fbb4:	bcf0      	pop	{r4, r5, r6, r7}
 801fbb6:	f7ff be33 	b.w	801f820 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>
 801fbba:	6dc0      	ldr	r0, [r0, #92]	@ 0x5c
 801fbbc:	2800      	cmp	r0, #0
 801fbbe:	d0ef      	beq.n	801fba0 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x18>
 801fbc0:	6806      	ldr	r6, [r0, #0]
 801fbc2:	e9cd 3504 	strd	r3, r5, [sp, #16]
 801fbc6:	68f5      	ldr	r5, [r6, #12]
 801fbc8:	4613      	mov	r3, r2
 801fbca:	46ac      	mov	ip, r5
 801fbcc:	460a      	mov	r2, r1
 801fbce:	4621      	mov	r1, r4
 801fbd0:	bcf0      	pop	{r4, r5, r6, r7}
 801fbd2:	4760      	bx	ip
 801fbd4:	6e00      	ldr	r0, [r0, #96]	@ 0x60
 801fbd6:	e7f1      	b.n	801fbbc <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x34>
 801fbd8:	6e40      	ldr	r0, [r0, #100]	@ 0x64
 801fbda:	e7ef      	b.n	801fbbc <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x34>
 801fbdc:	2e03      	cmp	r6, #3
 801fbde:	d8df      	bhi.n	801fba0 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x18>
 801fbe0:	e8df f006 	tbb	[pc, r6]
 801fbe4:	110f0702 	.word	0x110f0702
 801fbe8:	9504      	str	r5, [sp, #16]
 801fbea:	4620      	mov	r0, r4
 801fbec:	bcf0      	pop	{r4, r5, r6, r7}
 801fbee:	f7ff beef 	b.w	801f9d0 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>
 801fbf2:	6dc0      	ldr	r0, [r0, #92]	@ 0x5c
 801fbf4:	2800      	cmp	r0, #0
 801fbf6:	d0d3      	beq.n	801fba0 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x18>
 801fbf8:	6806      	ldr	r6, [r0, #0]
 801fbfa:	e9cd 3504 	strd	r3, r5, [sp, #16]
 801fbfe:	68b5      	ldr	r5, [r6, #8]
 801fc00:	e7e2      	b.n	801fbc8 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x40>
 801fc02:	6e00      	ldr	r0, [r0, #96]	@ 0x60
 801fc04:	e7f6      	b.n	801fbf4 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x6c>
 801fc06:	6e40      	ldr	r0, [r0, #100]	@ 0x64
 801fc08:	e7f4      	b.n	801fbf4 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x6c>
	...

0801fc0c <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h>:
 801fc0c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801fc10:	4605      	mov	r5, r0
 801fc12:	b08f      	sub	sp, #60	@ 0x3c
 801fc14:	460c      	mov	r4, r1
 801fc16:	461f      	mov	r7, r3
 801fc18:	2b00      	cmp	r3, #0
 801fc1a:	d052      	beq.n	801fcc2 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xb6>
 801fc1c:	6808      	ldr	r0, [r1, #0]
 801fc1e:	ab0a      	add	r3, sp, #40	@ 0x28
 801fc20:	6849      	ldr	r1, [r1, #4]
 801fc22:	f8df 81c8 	ldr.w	r8, [pc, #456]	@ 801fdec <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1e0>
 801fc26:	f8df 91c8 	ldr.w	r9, [pc, #456]	@ 801fdf0 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1e4>
 801fc2a:	c303      	stmia	r3!, {r0, r1}
 801fc2c:	6810      	ldr	r0, [r2, #0]
 801fc2e:	ab0c      	add	r3, sp, #48	@ 0x30
 801fc30:	6851      	ldr	r1, [r2, #4]
 801fc32:	c303      	stmia	r3!, {r0, r1}
 801fc34:	a80a      	add	r0, sp, #40	@ 0x28
 801fc36:	f7f7 ff51 	bl	8017adc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801fc3a:	4621      	mov	r1, r4
 801fc3c:	a80c      	add	r0, sp, #48	@ 0x30
 801fc3e:	f7f7 ff91 	bl	8017b64 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801fc42:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	@ 0x30
 801fc46:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	@ 0x32
 801fc4a:	f8bd 102c 	ldrh.w	r1, [sp, #44]	@ 0x2c
 801fc4e:	f8d8 0000 	ldr.w	r0, [r8]
 801fc52:	fb11 2103 	smlabb	r1, r1, r3, r2
 801fc56:	f9bd 6034 	ldrsh.w	r6, [sp, #52]	@ 0x34
 801fc5a:	f9bd 4036 	ldrsh.w	r4, [sp, #54]	@ 0x36
 801fc5e:	eb05 0541 	add.w	r5, r5, r1, lsl #1
 801fc62:	f8bd 1028 	ldrh.w	r1, [sp, #40]	@ 0x28
 801fc66:	440a      	add	r2, r1
 801fc68:	f8ad 2030 	strh.w	r2, [sp, #48]	@ 0x30
 801fc6c:	f8bd 202a 	ldrh.w	r2, [sp, #42]	@ 0x2a
 801fc70:	4413      	add	r3, r2
 801fc72:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 801fc76:	6803      	ldr	r3, [r0, #0]
 801fc78:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801fc7a:	4798      	blx	r3
 801fc7c:	2fff      	cmp	r7, #255	@ 0xff
 801fc7e:	d023      	beq.n	801fcc8 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xbc>
 801fc80:	f010 0f04 	tst.w	r0, #4
 801fc84:	f8d8 0000 	ldr.w	r0, [r8]
 801fc88:	d021      	beq.n	801fcce <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xc2>
 801fc8a:	2100      	movs	r1, #0
 801fc8c:	f04f 0e01 	mov.w	lr, #1
 801fc90:	f8d0 c000 	ldr.w	ip, [r0]
 801fc94:	b2a4      	uxth	r4, r4
 801fc96:	9106      	str	r1, [sp, #24]
 801fc98:	b2b6      	uxth	r6, r6
 801fc9a:	f8bd 3032 	ldrh.w	r3, [sp, #50]	@ 0x32
 801fc9e:	f8bd 2030 	ldrh.w	r2, [sp, #48]	@ 0x30
 801fca2:	e9cd e107 	strd	lr, r1, [sp, #28]
 801fca6:	f8b9 e000 	ldrh.w	lr, [r9]
 801fcaa:	9703      	str	r7, [sp, #12]
 801fcac:	9401      	str	r4, [sp, #4]
 801fcae:	9600      	str	r6, [sp, #0]
 801fcb0:	e9cd 1e04 	strd	r1, lr, [sp, #16]
 801fcb4:	f8bd 102c 	ldrh.w	r1, [sp, #44]	@ 0x2c
 801fcb8:	9102      	str	r1, [sp, #8]
 801fcba:	4629      	mov	r1, r5
 801fcbc:	f8dc 4040 	ldr.w	r4, [ip, #64]	@ 0x40
 801fcc0:	47a0      	blx	r4
 801fcc2:	b00f      	add	sp, #60	@ 0x3c
 801fcc4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801fcc8:	f010 0f01 	tst.w	r0, #1
 801fccc:	e7da      	b.n	801fc84 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x78>
 801fcce:	6803      	ldr	r3, [r0, #0]
 801fcd0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801fcd2:	4798      	blx	r3
 801fcd4:	f8b9 1000 	ldrh.w	r1, [r9]
 801fcd8:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	@ 0x32
 801fcdc:	eb06 0c46 	add.w	ip, r6, r6, lsl #1
 801fce0:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	@ 0x30
 801fce4:	434c      	muls	r4, r1
 801fce6:	2fff      	cmp	r7, #255	@ 0xff
 801fce8:	fb01 2303 	mla	r3, r1, r3, r2
 801fcec:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801fcf0:	eba1 0106 	sub.w	r1, r1, r6
 801fcf4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801fcf8:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801fcfc:	4418      	add	r0, r3
 801fcfe:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	@ 0x2c
 801fd02:	eba3 0606 	sub.w	r6, r3, r6
 801fd06:	4404      	add	r4, r0
 801fd08:	ea4f 0646 	mov.w	r6, r6, lsl #1
 801fd0c:	d04a      	beq.n	801fda4 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x198>
 801fd0e:	43fa      	mvns	r2, r7
 801fd10:	b2bb      	uxth	r3, r7
 801fd12:	b2d7      	uxtb	r7, r2
 801fd14:	42a0      	cmp	r0, r4
 801fd16:	d263      	bcs.n	801fde0 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1d4>
 801fd18:	eb00 0e0c 	add.w	lr, r0, ip
 801fd1c:	4586      	cmp	lr, r0
 801fd1e:	f100 0803 	add.w	r8, r0, #3
 801fd22:	d93a      	bls.n	801fd9a <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x18e>
 801fd24:	f835 2b02 	ldrh.w	r2, [r5], #2
 801fd28:	f818 9c03 	ldrb.w	r9, [r8, #-3]
 801fd2c:	00d0      	lsls	r0, r2, #3
 801fd2e:	fb19 f907 	smulbb	r9, r9, r7
 801fd32:	b2c0      	uxtb	r0, r0
 801fd34:	ea40 1050 	orr.w	r0, r0, r0, lsr #5
 801fd38:	fb00 9003 	mla	r0, r0, r3, r9
 801fd3c:	b280      	uxth	r0, r0
 801fd3e:	f100 0901 	add.w	r9, r0, #1
 801fd42:	eb09 2010 	add.w	r0, r9, r0, lsr #8
 801fd46:	f818 9c02 	ldrb.w	r9, [r8, #-2]
 801fd4a:	fb19 f907 	smulbb	r9, r9, r7
 801fd4e:	1200      	asrs	r0, r0, #8
 801fd50:	f808 0c03 	strb.w	r0, [r8, #-3]
 801fd54:	10d0      	asrs	r0, r2, #3
 801fd56:	1212      	asrs	r2, r2, #8
 801fd58:	f000 00fc 	and.w	r0, r0, #252	@ 0xfc
 801fd5c:	f002 02f8 	and.w	r2, r2, #248	@ 0xf8
 801fd60:	ea40 1090 	orr.w	r0, r0, r0, lsr #6
 801fd64:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 801fd68:	fb00 9003 	mla	r0, r0, r3, r9
 801fd6c:	b280      	uxth	r0, r0
 801fd6e:	f100 0901 	add.w	r9, r0, #1
 801fd72:	eb09 2010 	add.w	r0, r9, r0, lsr #8
 801fd76:	1200      	asrs	r0, r0, #8
 801fd78:	f808 0c02 	strb.w	r0, [r8, #-2]
 801fd7c:	f818 0c01 	ldrb.w	r0, [r8, #-1]
 801fd80:	fb10 f007 	smulbb	r0, r0, r7
 801fd84:	fb02 0203 	mla	r2, r2, r3, r0
 801fd88:	b292      	uxth	r2, r2
 801fd8a:	1c50      	adds	r0, r2, #1
 801fd8c:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 801fd90:	4640      	mov	r0, r8
 801fd92:	1212      	asrs	r2, r2, #8
 801fd94:	f808 2c01 	strb.w	r2, [r8, #-1]
 801fd98:	e7c0      	b.n	801fd1c <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x110>
 801fd9a:	4408      	add	r0, r1
 801fd9c:	4435      	add	r5, r6
 801fd9e:	e7b9      	b.n	801fd14 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x108>
 801fda0:	4408      	add	r0, r1
 801fda2:	4435      	add	r5, r6
 801fda4:	42a0      	cmp	r0, r4
 801fda6:	d21b      	bcs.n	801fde0 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1d4>
 801fda8:	eb00 070c 	add.w	r7, r0, ip
 801fdac:	42b8      	cmp	r0, r7
 801fdae:	d2f7      	bcs.n	801fda0 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x194>
 801fdb0:	f835 3b02 	ldrh.w	r3, [r5], #2
 801fdb4:	3003      	adds	r0, #3
 801fdb6:	00da      	lsls	r2, r3, #3
 801fdb8:	b2d2      	uxtb	r2, r2
 801fdba:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 801fdbe:	f800 2c03 	strb.w	r2, [r0, #-3]
 801fdc2:	10da      	asrs	r2, r3, #3
 801fdc4:	121b      	asrs	r3, r3, #8
 801fdc6:	f002 02fc 	and.w	r2, r2, #252	@ 0xfc
 801fdca:	f003 03f8 	and.w	r3, r3, #248	@ 0xf8
 801fdce:	ea42 1292 	orr.w	r2, r2, r2, lsr #6
 801fdd2:	ea43 1353 	orr.w	r3, r3, r3, lsr #5
 801fdd6:	f800 2c02 	strb.w	r2, [r0, #-2]
 801fdda:	f800 3c01 	strb.w	r3, [r0, #-1]
 801fdde:	e7e5      	b.n	801fdac <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1a0>
 801fde0:	4b02      	ldr	r3, [pc, #8]	@ (801fdec <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1e0>)
 801fde2:	6818      	ldr	r0, [r3, #0]
 801fde4:	6803      	ldr	r3, [r0, #0]
 801fde6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801fde8:	4798      	blx	r3
 801fdea:	e76a      	b.n	801fcc2 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xb6>
 801fdec:	24028e20 	.word	0x24028e20
 801fdf0:	24028e1a 	.word	0x24028e1a

0801fdf4 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>:
 801fdf4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801fdf8:	b08a      	sub	sp, #40	@ 0x28
 801fdfa:	460d      	mov	r5, r1
 801fdfc:	4604      	mov	r4, r0
 801fdfe:	461e      	mov	r6, r3
 801fe00:	6808      	ldr	r0, [r1, #0]
 801fe02:	ab06      	add	r3, sp, #24
 801fe04:	6849      	ldr	r1, [r1, #4]
 801fe06:	4f5d      	ldr	r7, [pc, #372]	@ (801ff7c <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x188>)
 801fe08:	c303      	stmia	r3!, {r0, r1}
 801fe0a:	6810      	ldr	r0, [r2, #0]
 801fe0c:	ab08      	add	r3, sp, #32
 801fe0e:	6851      	ldr	r1, [r2, #4]
 801fe10:	c303      	stmia	r3!, {r0, r1}
 801fe12:	a806      	add	r0, sp, #24
 801fe14:	f7f7 fe62 	bl	8017adc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801fe18:	4629      	mov	r1, r5
 801fe1a:	a808      	add	r0, sp, #32
 801fe1c:	f7f7 fea2 	bl	8017b64 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801fe20:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 801fe24:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	@ 0x22
 801fe28:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 801fe2c:	6838      	ldr	r0, [r7, #0]
 801fe2e:	fb11 2103 	smlabb	r1, r1, r3, r2
 801fe32:	f9bd 8024 	ldrsh.w	r8, [sp, #36]	@ 0x24
 801fe36:	f9bd 5026 	ldrsh.w	r5, [sp, #38]	@ 0x26
 801fe3a:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 801fe3e:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 801fe42:	440a      	add	r2, r1
 801fe44:	f8ad 2020 	strh.w	r2, [sp, #32]
 801fe48:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 801fe4c:	4413      	add	r3, r2
 801fe4e:	f8ad 3022 	strh.w	r3, [sp, #34]	@ 0x22
 801fe52:	6803      	ldr	r3, [r0, #0]
 801fe54:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801fe56:	4798      	blx	r3
 801fe58:	2eff      	cmp	r6, #255	@ 0xff
 801fe5a:	d119      	bne.n	801fe90 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x9c>
 801fe5c:	f010 0f20 	tst.w	r0, #32
 801fe60:	6838      	ldr	r0, [r7, #0]
 801fe62:	d018      	beq.n	801fe96 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xa2>
 801fe64:	b2ad      	uxth	r5, r5
 801fe66:	2700      	movs	r7, #0
 801fe68:	6801      	ldr	r1, [r0, #0]
 801fe6a:	9501      	str	r5, [sp, #4]
 801fe6c:	fa1f f588 	uxth.w	r5, r8
 801fe70:	f8bd 3022 	ldrh.w	r3, [sp, #34]	@ 0x22
 801fe74:	9500      	str	r5, [sp, #0]
 801fe76:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 801fe7a:	e9cd 6703 	strd	r6, r7, [sp, #12]
 801fe7e:	f8bd 601c 	ldrh.w	r6, [sp, #28]
 801fe82:	9602      	str	r6, [sp, #8]
 801fe84:	6d0d      	ldr	r5, [r1, #80]	@ 0x50
 801fe86:	4621      	mov	r1, r4
 801fe88:	47a8      	blx	r5
 801fe8a:	b00a      	add	sp, #40	@ 0x28
 801fe8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801fe90:	f010 0f40 	tst.w	r0, #64	@ 0x40
 801fe94:	e7e4      	b.n	801fe60 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x6c>
 801fe96:	6803      	ldr	r3, [r0, #0]
 801fe98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801fe9a:	4798      	blx	r3
 801fe9c:	4b38      	ldr	r3, [pc, #224]	@ (801ff80 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x18c>)
 801fe9e:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 801fea2:	f8b3 c000 	ldrh.w	ip, [r3]
 801fea6:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	@ 0x22
 801feaa:	fb0c f505 	mul.w	r5, ip, r5
 801feae:	f9bd e01c 	ldrsh.w	lr, [sp, #28]
 801feb2:	fb0c 2303 	mla	r3, ip, r3, r2
 801feb6:	ebac 0c08 	sub.w	ip, ip, r8
 801feba:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801febe:	ebae 0e08 	sub.w	lr, lr, r8
 801fec2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801fec6:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 801feca:	4418      	add	r0, r3
 801fecc:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 801fed0:	eb08 0348 	add.w	r3, r8, r8, lsl #1
 801fed4:	4405      	add	r5, r0
 801fed6:	42a8      	cmp	r0, r5
 801fed8:	d24a      	bcs.n	801ff70 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x17c>
 801feda:	eb00 0803 	add.w	r8, r0, r3
 801fede:	4540      	cmp	r0, r8
 801fee0:	d243      	bcs.n	801ff6a <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x176>
 801fee2:	78e2      	ldrb	r2, [r4, #3]
 801fee4:	b15a      	cbz	r2, 801fefe <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x10a>
 801fee6:	2aff      	cmp	r2, #255	@ 0xff
 801fee8:	f894 9000 	ldrb.w	r9, [r4]
 801feec:	d10a      	bne.n	801ff04 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x110>
 801feee:	2eff      	cmp	r6, #255	@ 0xff
 801fef0:	d108      	bne.n	801ff04 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x110>
 801fef2:	f880 9000 	strb.w	r9, [r0]
 801fef6:	7862      	ldrb	r2, [r4, #1]
 801fef8:	7042      	strb	r2, [r0, #1]
 801fefa:	78a2      	ldrb	r2, [r4, #2]
 801fefc:	7082      	strb	r2, [r0, #2]
 801fefe:	3003      	adds	r0, #3
 801ff00:	3404      	adds	r4, #4
 801ff02:	e7ec      	b.n	801fede <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xea>
 801ff04:	4372      	muls	r2, r6
 801ff06:	1c51      	adds	r1, r2, #1
 801ff08:	eb01 2112 	add.w	r1, r1, r2, lsr #8
 801ff0c:	1209      	asrs	r1, r1, #8
 801ff0e:	fa1f fa81 	uxth.w	sl, r1
 801ff12:	43c9      	mvns	r1, r1
 801ff14:	fb19 f90a 	smulbb	r9, r9, sl
 801ff18:	b2ca      	uxtb	r2, r1
 801ff1a:	7801      	ldrb	r1, [r0, #0]
 801ff1c:	fb01 9902 	mla	r9, r1, r2, r9
 801ff20:	fa1f f989 	uxth.w	r9, r9
 801ff24:	f109 0101 	add.w	r1, r9, #1
 801ff28:	eb01 2919 	add.w	r9, r1, r9, lsr #8
 801ff2c:	ea4f 2929 	mov.w	r9, r9, asr #8
 801ff30:	f880 9000 	strb.w	r9, [r0]
 801ff34:	f890 9001 	ldrb.w	r9, [r0, #1]
 801ff38:	7861      	ldrb	r1, [r4, #1]
 801ff3a:	fb19 f902 	smulbb	r9, r9, r2
 801ff3e:	fb01 910a 	mla	r1, r1, sl, r9
 801ff42:	b289      	uxth	r1, r1
 801ff44:	f101 0901 	add.w	r9, r1, #1
 801ff48:	eb09 2111 	add.w	r1, r9, r1, lsr #8
 801ff4c:	1209      	asrs	r1, r1, #8
 801ff4e:	7041      	strb	r1, [r0, #1]
 801ff50:	7881      	ldrb	r1, [r0, #2]
 801ff52:	f894 9002 	ldrb.w	r9, [r4, #2]
 801ff56:	fb11 f202 	smulbb	r2, r1, r2
 801ff5a:	fb09 220a 	mla	r2, r9, sl, r2
 801ff5e:	b292      	uxth	r2, r2
 801ff60:	1c51      	adds	r1, r2, #1
 801ff62:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 801ff66:	1212      	asrs	r2, r2, #8
 801ff68:	e7c8      	b.n	801fefc <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x108>
 801ff6a:	4460      	add	r0, ip
 801ff6c:	4474      	add	r4, lr
 801ff6e:	e7b2      	b.n	801fed6 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xe2>
 801ff70:	6838      	ldr	r0, [r7, #0]
 801ff72:	6803      	ldr	r3, [r0, #0]
 801ff74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801ff76:	4798      	blx	r3
 801ff78:	e787      	b.n	801fe8a <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x96>
 801ff7a:	bf00      	nop
 801ff7c:	24028e20 	.word	0x24028e20
 801ff80:	24028e1a 	.word	0x24028e1a

0801ff84 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb>:
 801ff84:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801ff88:	f89d 5034 	ldrb.w	r5, [sp, #52]	@ 0x34
 801ff8c:	4607      	mov	r7, r0
 801ff8e:	460c      	mov	r4, r1
 801ff90:	4692      	mov	sl, r2
 801ff92:	4699      	mov	r9, r3
 801ff94:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801ff96:	b335      	cbz	r5, 801ffe6 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x62>
 801ff98:	4608      	mov	r0, r1
 801ff9a:	f7fb fd93 	bl	801bac4 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801ff9e:	4680      	mov	r8, r0
 801ffa0:	4620      	mov	r0, r4
 801ffa2:	f7fb fdc3 	bl	801bb2c <_ZNK8touchgfx6Bitmap9getHeightEv>
 801ffa6:	f8ad 000e 	strh.w	r0, [sp, #14]
 801ffaa:	4620      	mov	r0, r4
 801ffac:	f8ad a008 	strh.w	sl, [sp, #8]
 801ffb0:	f8ad 900a 	strh.w	r9, [sp, #10]
 801ffb4:	f8ad 800c 	strh.w	r8, [sp, #12]
 801ffb8:	f7fb fefa 	bl	801bdb0 <_ZNK8touchgfx6Bitmap9getFormatEv>
 801ffbc:	2810      	cmp	r0, #16
 801ffbe:	d812      	bhi.n	801ffe6 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x62>
 801ffc0:	e8df f000 	tbb	[pc, r0]
 801ffc4:	11092d24 	.word	0x11092d24
 801ffc8:	11111111 	.word	0x11111111
 801ffcc:	14111111 	.word	0x14111111
 801ffd0:	4c111111 	.word	0x4c111111
 801ffd4:	3c          	.byte	0x3c
 801ffd5:	00          	.byte	0x00
 801ffd6:	4620      	mov	r0, r4
 801ffd8:	f7fb fe66 	bl	801bca8 <_ZNK8touchgfx6Bitmap7getDataEv>
 801ffdc:	462b      	mov	r3, r5
 801ffde:	4632      	mov	r2, r6
 801ffe0:	a902      	add	r1, sp, #8
 801ffe2:	f7ff ff07 	bl	801fdf4 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 801ffe6:	b004      	add	sp, #16
 801ffe8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ffec:	4620      	mov	r0, r4
 801ffee:	f7fb fe5b 	bl	801bca8 <_ZNK8touchgfx6Bitmap7getDataEv>
 801fff2:	4680      	mov	r8, r0
 801fff4:	4620      	mov	r0, r4
 801fff6:	f7fb fe87 	bl	801bd08 <_ZNK8touchgfx6Bitmap12getExtraDataEv>
 801fffa:	ab02      	add	r3, sp, #8
 801fffc:	4602      	mov	r2, r0
 801fffe:	4641      	mov	r1, r8
 8020000:	4638      	mov	r0, r7
 8020002:	e9cd 6500 	strd	r6, r5, [sp]
 8020006:	f7ff fdbf 	bl	801fb88 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>
 802000a:	e7ec      	b.n	801ffe6 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x62>
 802000c:	4620      	mov	r0, r4
 802000e:	f7fb fe4b 	bl	801bca8 <_ZNK8touchgfx6Bitmap7getDataEv>
 8020012:	462b      	mov	r3, r5
 8020014:	4632      	mov	r2, r6
 8020016:	a902      	add	r1, sp, #8
 8020018:	f7ff fdf8 	bl	801fc0c <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h>
 802001c:	e7e3      	b.n	801ffe6 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x62>
 802001e:	683b      	ldr	r3, [r7, #0]
 8020020:	4620      	mov	r0, r4
 8020022:	f8d3 800c 	ldr.w	r8, [r3, #12]
 8020026:	f7fb fe3f 	bl	801bca8 <_ZNK8touchgfx6Bitmap7getDataEv>
 802002a:	2300      	movs	r3, #0
 802002c:	4601      	mov	r1, r0
 802002e:	aa02      	add	r2, sp, #8
 8020030:	4638      	mov	r0, r7
 8020032:	e9cd 5300 	strd	r5, r3, [sp]
 8020036:	4633      	mov	r3, r6
 8020038:	47c0      	blx	r8
 802003a:	e7d4      	b.n	801ffe6 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x62>
 802003c:	6ebf      	ldr	r7, [r7, #104]	@ 0x68
 802003e:	2f00      	cmp	r7, #0
 8020040:	d0d1      	beq.n	801ffe6 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x62>
 8020042:	683b      	ldr	r3, [r7, #0]
 8020044:	f8d3 8008 	ldr.w	r8, [r3, #8]
 8020048:	4620      	mov	r0, r4
 802004a:	f7fb fe2d 	bl	801bca8 <_ZNK8touchgfx6Bitmap7getDataEv>
 802004e:	9500      	str	r5, [sp, #0]
 8020050:	4601      	mov	r1, r0
 8020052:	4633      	mov	r3, r6
 8020054:	aa02      	add	r2, sp, #8
 8020056:	4638      	mov	r0, r7
 8020058:	47c0      	blx	r8
 802005a:	e7c4      	b.n	801ffe6 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x62>
 802005c:	6ebf      	ldr	r7, [r7, #104]	@ 0x68
 802005e:	2f00      	cmp	r7, #0
 8020060:	d0c1      	beq.n	801ffe6 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x62>
 8020062:	683b      	ldr	r3, [r7, #0]
 8020064:	f8d3 800c 	ldr.w	r8, [r3, #12]
 8020068:	e7ee      	b.n	8020048 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xc4>

0802006a <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb>:
 802006a:	b4f0      	push	{r4, r5, r6, r7}
 802006c:	4616      	mov	r6, r2
 802006e:	461c      	mov	r4, r3
 8020070:	460d      	mov	r5, r1
 8020072:	9a04      	ldr	r2, [sp, #16]
 8020074:	2e01      	cmp	r6, #1
 8020076:	f89d 3014 	ldrb.w	r3, [sp, #20]
 802007a:	d00e      	beq.n	802009a <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x30>
 802007c:	d303      	bcc.n	8020086 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x1c>
 802007e:	2e02      	cmp	r6, #2
 8020080:	d006      	beq.n	8020090 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x26>
 8020082:	bcf0      	pop	{r4, r5, r6, r7}
 8020084:	4770      	bx	lr
 8020086:	4621      	mov	r1, r4
 8020088:	4628      	mov	r0, r5
 802008a:	bcf0      	pop	{r4, r5, r6, r7}
 802008c:	f7ff bdbe 	b.w	801fc0c <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h>
 8020090:	4621      	mov	r1, r4
 8020092:	4628      	mov	r0, r5
 8020094:	bcf0      	pop	{r4, r5, r6, r7}
 8020096:	f7ff bead 	b.w	801fdf4 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 802009a:	6805      	ldr	r5, [r0, #0]
 802009c:	2600      	movs	r6, #0
 802009e:	e9cd 3604 	strd	r3, r6, [sp, #16]
 80200a2:	68ed      	ldr	r5, [r5, #12]
 80200a4:	4613      	mov	r3, r2
 80200a6:	4622      	mov	r2, r4
 80200a8:	46ac      	mov	ip, r5
 80200aa:	bcf0      	pop	{r4, r5, r6, r7}
 80200ac:	4760      	bx	ip
	...

080200b0 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE>:
 80200b0:	b160      	cbz	r0, 80200cc <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x1c>
 80200b2:	2903      	cmp	r1, #3
 80200b4:	d818      	bhi.n	80200e8 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x38>
 80200b6:	e8df f001 	tbb	[pc, r1]
 80200ba:	1902      	.short	0x1902
 80200bc:	1b06      	.short	0x1b06
 80200be:	4b0e      	ldr	r3, [pc, #56]	@ (80200f8 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x48>)
 80200c0:	8818      	ldrh	r0, [r3, #0]
 80200c2:	4240      	negs	r0, r0
 80200c4:	4770      	bx	lr
 80200c6:	4b0c      	ldr	r3, [pc, #48]	@ (80200f8 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x48>)
 80200c8:	8818      	ldrh	r0, [r3, #0]
 80200ca:	4770      	bx	lr
 80200cc:	2903      	cmp	r1, #3
 80200ce:	d80b      	bhi.n	80200e8 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x38>
 80200d0:	a301      	add	r3, pc, #4	@ (adr r3, 80200d8 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x28>)
 80200d2:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
 80200d6:	bf00      	nop
 80200d8:	080200ed 	.word	0x080200ed
 80200dc:	080200c7 	.word	0x080200c7
 80200e0:	080200f1 	.word	0x080200f1
 80200e4:	080200bf 	.word	0x080200bf
 80200e8:	2000      	movs	r0, #0
 80200ea:	4770      	bx	lr
 80200ec:	2001      	movs	r0, #1
 80200ee:	4770      	bx	lr
 80200f0:	f04f 30ff 	mov.w	r0, #4294967295
 80200f4:	4770      	bx	lr
 80200f6:	bf00      	nop
 80200f8:	24028e1a 	.word	0x24028e1a

080200fc <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE>:
 80200fc:	b160      	cbz	r0, 8020118 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x1c>
 80200fe:	2903      	cmp	r1, #3
 8020100:	d818      	bhi.n	8020134 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x38>
 8020102:	e8df f001 	tbb	[pc, r1]
 8020106:	0219      	.short	0x0219
 8020108:	051b      	.short	0x051b
 802010a:	4b0e      	ldr	r3, [pc, #56]	@ (8020144 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x48>)
 802010c:	8818      	ldrh	r0, [r3, #0]
 802010e:	4770      	bx	lr
 8020110:	4b0c      	ldr	r3, [pc, #48]	@ (8020144 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x48>)
 8020112:	8818      	ldrh	r0, [r3, #0]
 8020114:	4240      	negs	r0, r0
 8020116:	4770      	bx	lr
 8020118:	2903      	cmp	r1, #3
 802011a:	d80b      	bhi.n	8020134 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x38>
 802011c:	a301      	add	r3, pc, #4	@ (adr r3, 8020124 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x28>)
 802011e:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
 8020122:	bf00      	nop
 8020124:	0802010b 	.word	0x0802010b
 8020128:	0802013d 	.word	0x0802013d
 802012c:	08020111 	.word	0x08020111
 8020130:	08020139 	.word	0x08020139
 8020134:	2000      	movs	r0, #0
 8020136:	4770      	bx	lr
 8020138:	2001      	movs	r0, #1
 802013a:	4770      	bx	lr
 802013c:	f04f 30ff 	mov.w	r0, #4294967295
 8020140:	4770      	bx	lr
 8020142:	bf00      	nop
 8020144:	24028e1a 	.word	0x24028e1a

08020148 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE>:
 8020148:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802014c:	b097      	sub	sp, #92	@ 0x5c
 802014e:	910b      	str	r1, [sp, #44]	@ 0x2c
 8020150:	a912      	add	r1, sp, #72	@ 0x48
 8020152:	f9bd 6080 	ldrsh.w	r6, [sp, #128]	@ 0x80
 8020156:	f8bd 7088 	ldrh.w	r7, [sp, #136]	@ 0x88
 802015a:	f8bd 408c 	ldrh.w	r4, [sp, #140]	@ 0x8c
 802015e:	f89d 80a4 	ldrb.w	r8, [sp, #164]	@ 0xa4
 8020162:	f89d 90ac 	ldrb.w	r9, [sp, #172]	@ 0xac
 8020166:	e881 000c 	stmia.w	r1, {r2, r3}
 802016a:	f9bd 3084 	ldrsh.w	r3, [sp, #132]	@ 0x84
 802016e:	930a      	str	r3, [sp, #40]	@ 0x28
 8020170:	f89d 309c 	ldrb.w	r3, [sp, #156]	@ 0x9c
 8020174:	e9dd 2124 	ldrd	r2, r1, [sp, #144]	@ 0x90
 8020178:	9311      	str	r3, [sp, #68]	@ 0x44
 802017a:	f89d 30a8 	ldrb.w	r3, [sp, #168]	@ 0xa8
 802017e:	798d      	ldrb	r5, [r1, #6]
 8020180:	930c      	str	r3, [sp, #48]	@ 0x30
 8020182:	7b4b      	ldrb	r3, [r1, #13]
 8020184:	0158      	lsls	r0, r3, #5
 8020186:	f400 7080 	and.w	r0, r0, #256	@ 0x100
 802018a:	4328      	orrs	r0, r5
 802018c:	9009      	str	r0, [sp, #36]	@ 0x24
 802018e:	f000 817c 	beq.w	802048a <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 8020192:	011b      	lsls	r3, r3, #4
 8020194:	79c8      	ldrb	r0, [r1, #7]
 8020196:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 802019a:	4303      	orrs	r3, r0
 802019c:	930e      	str	r3, [sp, #56]	@ 0x38
 802019e:	f000 8174 	beq.w	802048a <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 80201a2:	f991 3009 	ldrsb.w	r3, [r1, #9]
 80201a6:	b29b      	uxth	r3, r3
 80201a8:	2f00      	cmp	r7, #0
 80201aa:	f000 8116 	beq.w	80203da <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x292>
 80201ae:	1aff      	subs	r7, r7, r3
 80201b0:	b2bf      	uxth	r7, r7
 80201b2:	043b      	lsls	r3, r7, #16
 80201b4:	d502      	bpl.n	80201bc <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x74>
 80201b6:	1bf6      	subs	r6, r6, r7
 80201b8:	2700      	movs	r7, #0
 80201ba:	b236      	sxth	r6, r6
 80201bc:	f9b2 1000 	ldrsh.w	r1, [r2]
 80201c0:	a812      	add	r0, sp, #72	@ 0x48
 80201c2:	f8b2 a002 	ldrh.w	sl, [r2, #2]
 80201c6:	428e      	cmp	r6, r1
 80201c8:	b28b      	uxth	r3, r1
 80201ca:	f8bd 5024 	ldrh.w	r5, [sp, #36]	@ 0x24
 80201ce:	bfbf      	itttt	lt
 80201d0:	18ff      	addlt	r7, r7, r3
 80201d2:	1bbe      	sublt	r6, r7, r6
 80201d4:	b2b7      	uxthlt	r7, r6
 80201d6:	460e      	movlt	r6, r1
 80201d8:	8891      	ldrh	r1, [r2, #4]
 80201da:	440b      	add	r3, r1
 80201dc:	4631      	mov	r1, r6
 80201de:	b21b      	sxth	r3, r3
 80201e0:	9310      	str	r3, [sp, #64]	@ 0x40
 80201e2:	88d3      	ldrh	r3, [r2, #6]
 80201e4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80201e6:	449a      	add	sl, r3
 80201e8:	fa0f f38a 	sxth.w	r3, sl
 80201ec:	f8bd a038 	ldrh.w	sl, [sp, #56]	@ 0x38
 80201f0:	930f      	str	r3, [sp, #60]	@ 0x3c
 80201f2:	4bb5      	ldr	r3, [pc, #724]	@ (80204c8 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x380>)
 80201f4:	f893 b000 	ldrb.w	fp, [r3]
 80201f8:	f10b 3cff 	add.w	ip, fp, #4294967295
 80201fc:	f1dc 0300 	rsbs	r3, ip, #0
 8020200:	eb43 030c 	adc.w	r3, r3, ip
 8020204:	930d      	str	r3, [sp, #52]	@ 0x34
 8020206:	464b      	mov	r3, r9
 8020208:	f7f7 fadd 	bl	80177c6 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>
 802020c:	4631      	mov	r1, r6
 802020e:	f8ad 0054 	strh.w	r0, [sp, #84]	@ 0x54
 8020212:	464b      	mov	r3, r9
 8020214:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8020216:	a812      	add	r0, sp, #72	@ 0x48
 8020218:	f7f7 faf2 	bl	8017800 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>
 802021c:	a916      	add	r1, sp, #88	@ 0x58
 802021e:	f821 0d02 	strh.w	r0, [r1, #-2]!
 8020222:	a815      	add	r0, sp, #84	@ 0x54
 8020224:	f7f7 fc18 	bl	8017a58 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>
 8020228:	f1b9 0f00 	cmp.w	r9, #0
 802022c:	f040 80d8 	bne.w	80203e0 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x298>
 8020230:	f1bb 0f01 	cmp.w	fp, #1
 8020234:	f040 80dc 	bne.w	80203f0 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2a8>
 8020238:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 802023a:	b153      	cbz	r3, 8020252 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x10a>
 802023c:	2508      	movs	r5, #8
 802023e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8020240:	fb95 f3f8 	sdiv	r3, r5, r8
 8020244:	1e5d      	subs	r5, r3, #1
 8020246:	4415      	add	r5, r2
 8020248:	fb95 f5f3 	sdiv	r5, r5, r3
 802024c:	fb15 f503 	smulbb	r5, r5, r3
 8020250:	b2ad      	uxth	r5, r5
 8020252:	b907      	cbnz	r7, 8020256 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x10e>
 8020254:	b16c      	cbz	r4, 8020272 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x12a>
 8020256:	fb04 7305 	mla	r3, r4, r5, r7
 802025a:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 802025c:	ebaa 0a04 	sub.w	sl, sl, r4
 8020260:	fb08 f303 	mul.w	r3, r8, r3
 8020264:	fa1f fa8a 	uxth.w	sl, sl
 8020268:	eb02 02d3 	add.w	r2, r2, r3, lsr #3
 802026c:	f003 0407 	and.w	r4, r3, #7
 8020270:	9226      	str	r2, [sp, #152]	@ 0x98
 8020272:	4649      	mov	r1, r9
 8020274:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8020276:	f7ff ff1b 	bl	80200b0 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE>
 802027a:	4683      	mov	fp, r0
 802027c:	980d      	ldr	r0, [sp, #52]	@ 0x34
 802027e:	f7ff ff3d 	bl	80200fc <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE>
 8020282:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8020284:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8020286:	4681      	mov	r9, r0
 8020288:	1a9b      	subs	r3, r3, r2
 802028a:	459a      	cmp	sl, r3
 802028c:	bfa8      	it	ge
 802028e:	469a      	movge	sl, r3
 8020290:	f1ba 0f00 	cmp.w	sl, #0
 8020294:	f340 80f9 	ble.w	802048a <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 8020298:	1bf6      	subs	r6, r6, r7
 802029a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 802029c:	1b9e      	subs	r6, r3, r6
 802029e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80202a0:	429e      	cmp	r6, r3
 80202a2:	bfd4      	ite	le
 80202a4:	ebc7 0706 	rsble	r7, r7, r6
 80202a8:	ebc7 0703 	rsbgt	r7, r7, r3
 80202ac:	2f00      	cmp	r7, #0
 80202ae:	f340 80ec 	ble.w	802048a <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 80202b2:	1bed      	subs	r5, r5, r7
 80202b4:	fb08 f305 	mul.w	r3, r8, r5
 80202b8:	930d      	str	r3, [sp, #52]	@ 0x34
 80202ba:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 80202bc:	f3c3 4307 	ubfx	r3, r3, #16, #8
 80202c0:	930e      	str	r3, [sp, #56]	@ 0x38
 80202c2:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 80202c4:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80202c8:	930f      	str	r3, [sp, #60]	@ 0x3c
 80202ca:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 80202cc:	b2db      	uxtb	r3, r3
 80202ce:	9310      	str	r3, [sp, #64]	@ 0x40
 80202d0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80202d2:	2b00      	cmp	r3, #0
 80202d4:	f040 80de 	bne.w	8020494 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x34c>
 80202d8:	4b7c      	ldr	r3, [pc, #496]	@ (80204cc <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x384>)
 80202da:	6818      	ldr	r0, [r3, #0]
 80202dc:	6803      	ldr	r3, [r0, #0]
 80202de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80202e0:	4798      	blx	r3
 80202e2:	2301      	movs	r3, #1
 80202e4:	4a7a      	ldr	r2, [pc, #488]	@ (80204d0 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x388>)
 80202e6:	eb0b 064b 	add.w	r6, fp, fp, lsl #1
 80202ea:	fb07 9b1b 	mls	fp, r7, fp, r9
 80202ee:	fa03 f308 	lsl.w	r3, r3, r8
 80202f2:	8811      	ldrh	r1, [r2, #0]
 80202f4:	f9bd 2054 	ldrsh.w	r2, [sp, #84]	@ 0x54
 80202f8:	eb0b 0b4b 	add.w	fp, fp, fp, lsl #1
 80202fc:	3b01      	subs	r3, #1
 80202fe:	fb06 bb07 	mla	fp, r6, r7, fp
 8020302:	b2db      	uxtb	r3, r3
 8020304:	930a      	str	r3, [sp, #40]	@ 0x28
 8020306:	f9bd 3056 	ldrsh.w	r3, [sp, #86]	@ 0x56
 802030a:	fb01 2303 	mla	r3, r1, r3, r2
 802030e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8020312:	18c3      	adds	r3, r0, r3
 8020314:	9309      	str	r3, [sp, #36]	@ 0x24
 8020316:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8020318:	781a      	ldrb	r2, [r3, #0]
 802031a:	4122      	asrs	r2, r4
 802031c:	b2d2      	uxtb	r2, r2
 802031e:	f11a 3aff 	adds.w	sl, sl, #4294967295
 8020322:	f0c0 80d7 	bcc.w	80204d4 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x38c>
 8020326:	46be      	mov	lr, r7
 8020328:	9909      	ldr	r1, [sp, #36]	@ 0x24
 802032a:	f11e 3eff 	adds.w	lr, lr, #4294967295
 802032e:	f0c0 80ba 	bcc.w	80204a6 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x35e>
 8020332:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8020334:	4013      	ands	r3, r2
 8020336:	d041      	beq.n	80203bc <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x274>
 8020338:	20ff      	movs	r0, #255	@ 0xff
 802033a:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 802033c:	fb90 f5f5 	sdiv	r5, r0, r5
 8020340:	436b      	muls	r3, r5
 8020342:	2bfe      	cmp	r3, #254	@ 0xfe
 8020344:	dd03      	ble.n	802034e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x206>
 8020346:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 8020348:	4285      	cmp	r5, r0
 802034a:	f000 80a5 	beq.w	8020498 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x350>
 802034e:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 8020350:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8020352:	fb15 f303 	smulbb	r3, r5, r3
 8020356:	b29b      	uxth	r3, r3
 8020358:	1c5d      	adds	r5, r3, #1
 802035a:	eb05 2313 	add.w	r3, r5, r3, lsr #8
 802035e:	780d      	ldrb	r5, [r1, #0]
 8020360:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8020364:	fa1f fc83 	uxth.w	ip, r3
 8020368:	43db      	mvns	r3, r3
 802036a:	fb10 f90c 	smulbb	r9, r0, ip
 802036e:	b2db      	uxtb	r3, r3
 8020370:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 8020372:	fb05 9503 	mla	r5, r5, r3, r9
 8020376:	b2ad      	uxth	r5, r5
 8020378:	f105 0901 	add.w	r9, r5, #1
 802037c:	eb09 2515 	add.w	r5, r9, r5, lsr #8
 8020380:	fb10 f90c 	smulbb	r9, r0, ip
 8020384:	980e      	ldr	r0, [sp, #56]	@ 0x38
 8020386:	122d      	asrs	r5, r5, #8
 8020388:	fb10 fc0c 	smulbb	ip, r0, ip
 802038c:	700d      	strb	r5, [r1, #0]
 802038e:	784d      	ldrb	r5, [r1, #1]
 8020390:	fb05 9503 	mla	r5, r5, r3, r9
 8020394:	b2ad      	uxth	r5, r5
 8020396:	f105 0901 	add.w	r9, r5, #1
 802039a:	eb09 2515 	add.w	r5, r9, r5, lsr #8
 802039e:	122d      	asrs	r5, r5, #8
 80203a0:	704d      	strb	r5, [r1, #1]
 80203a2:	788d      	ldrb	r5, [r1, #2]
 80203a4:	fb05 cc03 	mla	ip, r5, r3, ip
 80203a8:	fa1f fc8c 	uxth.w	ip, ip
 80203ac:	f10c 0301 	add.w	r3, ip, #1
 80203b0:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 80203b4:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 80203b8:	f881 c002 	strb.w	ip, [r1, #2]
 80203bc:	4444      	add	r4, r8
 80203be:	4431      	add	r1, r6
 80203c0:	b2a4      	uxth	r4, r4
 80203c2:	2c07      	cmp	r4, #7
 80203c4:	bf89      	itett	hi
 80203c6:	9b26      	ldrhi	r3, [sp, #152]	@ 0x98
 80203c8:	fa42 f208 	asrls.w	r2, r2, r8
 80203cc:	2400      	movhi	r4, #0
 80203ce:	785a      	ldrbhi	r2, [r3, #1]
 80203d0:	bf8a      	itet	hi
 80203d2:	3301      	addhi	r3, #1
 80203d4:	b2d2      	uxtbls	r2, r2
 80203d6:	9326      	strhi	r3, [sp, #152]	@ 0x98
 80203d8:	e7a7      	b.n	802032a <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1e2>
 80203da:	441e      	add	r6, r3
 80203dc:	b236      	sxth	r6, r6
 80203de:	e6ed      	b.n	80201bc <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x74>
 80203e0:	f1b9 0f01 	cmp.w	r9, #1
 80203e4:	f47f af28 	bne.w	8020238 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 80203e8:	f1bb 0f01 	cmp.w	fp, #1
 80203ec:	f47f af24 	bne.w	8020238 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 80203f0:	f8df b0d8 	ldr.w	fp, [pc, #216]	@ 80204cc <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x384>
 80203f4:	f8db 0000 	ldr.w	r0, [fp]
 80203f8:	6803      	ldr	r3, [r0, #0]
 80203fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80203fc:	4798      	blx	r3
 80203fe:	f410 7380 	ands.w	r3, r0, #256	@ 0x100
 8020402:	465a      	mov	r2, fp
 8020404:	d006      	beq.n	8020414 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2cc>
 8020406:	f1b8 0f04 	cmp.w	r8, #4
 802040a:	d141      	bne.n	8020490 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x348>
 802040c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 802040e:	3300      	adds	r3, #0
 8020410:	bf18      	it	ne
 8020412:	2301      	movne	r3, #1
 8020414:	0580      	lsls	r0, r0, #22
 8020416:	d566      	bpl.n	80204e6 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x39e>
 8020418:	f1b8 0f08 	cmp.w	r8, #8
 802041c:	d163      	bne.n	80204e6 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x39e>
 802041e:	2b00      	cmp	r3, #0
 8020420:	bf0c      	ite	eq
 8020422:	f44f 7100 	moveq.w	r1, #512	@ 0x200
 8020426:	f44f 7180 	movne.w	r1, #256	@ 0x100
 802042a:	2f00      	cmp	r7, #0
 802042c:	f47f af04 	bne.w	8020238 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 8020430:	2c00      	cmp	r4, #0
 8020432:	f47f af01 	bne.w	8020238 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 8020436:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8020438:	9810      	ldr	r0, [sp, #64]	@ 0x40
 802043a:	18f3      	adds	r3, r6, r3
 802043c:	4283      	cmp	r3, r0
 802043e:	f73f aefb 	bgt.w	8020238 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 8020442:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8020444:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8020446:	4403      	add	r3, r0
 8020448:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 802044a:	4283      	cmp	r3, r0
 802044c:	f73f aef4 	bgt.w	8020238 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 8020450:	f1b8 0f08 	cmp.w	r8, #8
 8020454:	6810      	ldr	r0, [r2, #0]
 8020456:	f04f 0600 	mov.w	r6, #0
 802045a:	f8bd 3056 	ldrh.w	r3, [sp, #86]	@ 0x56
 802045e:	bf18      	it	ne
 8020460:	3501      	addne	r5, #1
 8020462:	6804      	ldr	r4, [r0, #0]
 8020464:	f8bd 2054 	ldrh.w	r2, [sp, #84]	@ 0x54
 8020468:	bf18      	it	ne
 802046a:	f025 0501 	bicne.w	r5, r5, #1
 802046e:	e9cd 1605 	strd	r1, r6, [sp, #20]
 8020472:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8020474:	bf18      	it	ne
 8020476:	b2ad      	uxthne	r5, r5
 8020478:	9104      	str	r1, [sp, #16]
 802047a:	9928      	ldr	r1, [sp, #160]	@ 0xa0
 802047c:	e9cd 5a00 	strd	r5, sl, [sp]
 8020480:	e9cd 5102 	strd	r5, r1, [sp, #8]
 8020484:	9926      	ldr	r1, [sp, #152]	@ 0x98
 8020486:	6d64      	ldr	r4, [r4, #84]	@ 0x54
 8020488:	47a0      	blx	r4
 802048a:	b017      	add	sp, #92	@ 0x5c
 802048c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020490:	2300      	movs	r3, #0
 8020492:	e7bf      	b.n	8020414 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2cc>
 8020494:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8020496:	e724      	b.n	80202e2 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x19a>
 8020498:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 802049a:	700b      	strb	r3, [r1, #0]
 802049c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 802049e:	704b      	strb	r3, [r1, #1]
 80204a0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80204a2:	708b      	strb	r3, [r1, #2]
 80204a4:	e78a      	b.n	80203bc <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x274>
 80204a6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80204a8:	b153      	cbz	r3, 80204c0 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x378>
 80204aa:	441c      	add	r4, r3
 80204ac:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 80204ae:	b2a4      	uxth	r4, r4
 80204b0:	eb03 03d4 	add.w	r3, r3, r4, lsr #3
 80204b4:	f004 0407 	and.w	r4, r4, #7
 80204b8:	781a      	ldrb	r2, [r3, #0]
 80204ba:	9326      	str	r3, [sp, #152]	@ 0x98
 80204bc:	4122      	asrs	r2, r4
 80204be:	b2d2      	uxtb	r2, r2
 80204c0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80204c2:	445b      	add	r3, fp
 80204c4:	9309      	str	r3, [sp, #36]	@ 0x24
 80204c6:	e72a      	b.n	802031e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1d6>
 80204c8:	24028e18 	.word	0x24028e18
 80204cc:	24028e20 	.word	0x24028e20
 80204d0:	24028e1a 	.word	0x24028e1a
 80204d4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80204d6:	2b00      	cmp	r3, #0
 80204d8:	d1d7      	bne.n	802048a <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 80204da:	4b06      	ldr	r3, [pc, #24]	@ (80204f4 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ac>)
 80204dc:	6818      	ldr	r0, [r3, #0]
 80204de:	6803      	ldr	r3, [r0, #0]
 80204e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80204e2:	4798      	blx	r3
 80204e4:	e7d1      	b.n	802048a <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 80204e6:	2b00      	cmp	r3, #0
 80204e8:	f43f aea6 	beq.w	8020238 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 80204ec:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80204f0:	e79b      	b.n	802042a <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2e2>
 80204f2:	bf00      	nop
 80204f4:	24028e20 	.word	0x24028e20

080204f8 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>:
 80204f8:	b538      	push	{r3, r4, r5, lr}
 80204fa:	4c15      	ldr	r4, [pc, #84]	@ (8020550 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x58>)
 80204fc:	4605      	mov	r5, r0
 80204fe:	7823      	ldrb	r3, [r4, #0]
 8020500:	f3bf 8f5b 	dmb	ish
 8020504:	07da      	lsls	r2, r3, #31
 8020506:	d40b      	bmi.n	8020520 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 8020508:	4620      	mov	r0, r4
 802050a:	f006 ffc2 	bl	8027492 <__cxa_guard_acquire>
 802050e:	b138      	cbz	r0, 8020520 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 8020510:	4620      	mov	r0, r4
 8020512:	f006 ffca 	bl	80274aa <__cxa_guard_release>
 8020516:	4a0f      	ldr	r2, [pc, #60]	@ (8020554 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 8020518:	490f      	ldr	r1, [pc, #60]	@ (8020558 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x60>)
 802051a:	4810      	ldr	r0, [pc, #64]	@ (802055c <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 802051c:	f006 ffb2 	bl	8027484 <__aeabi_atexit>
 8020520:	4c0f      	ldr	r4, [pc, #60]	@ (8020560 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x68>)
 8020522:	7823      	ldrb	r3, [r4, #0]
 8020524:	f3bf 8f5b 	dmb	ish
 8020528:	07db      	lsls	r3, r3, #31
 802052a:	d40b      	bmi.n	8020544 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 802052c:	4620      	mov	r0, r4
 802052e:	f006 ffb0 	bl	8027492 <__cxa_guard_acquire>
 8020532:	b138      	cbz	r0, 8020544 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 8020534:	4620      	mov	r0, r4
 8020536:	f006 ffb8 	bl	80274aa <__cxa_guard_release>
 802053a:	4a06      	ldr	r2, [pc, #24]	@ (8020554 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 802053c:	4909      	ldr	r1, [pc, #36]	@ (8020564 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x6c>)
 802053e:	480a      	ldr	r0, [pc, #40]	@ (8020568 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 8020540:	f006 ffa0 	bl	8027484 <__aeabi_atexit>
 8020544:	4b05      	ldr	r3, [pc, #20]	@ (802055c <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 8020546:	616b      	str	r3, [r5, #20]
 8020548:	4b07      	ldr	r3, [pc, #28]	@ (8020568 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 802054a:	61ab      	str	r3, [r5, #24]
 802054c:	bd38      	pop	{r3, r4, r5, pc}
 802054e:	bf00      	nop
 8020550:	24028f04 	.word	0x24028f04
 8020554:	24000000 	.word	0x24000000
 8020558:	0801d7e9 	.word	0x0801d7e9
 802055c:	240000c8 	.word	0x240000c8
 8020560:	24028f08 	.word	0x24028f08
 8020564:	0801d7e7 	.word	0x0801d7e7
 8020568:	240000cc 	.word	0x240000cc

0802056c <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>:
 802056c:	b538      	push	{r3, r4, r5, lr}
 802056e:	4c15      	ldr	r4, [pc, #84]	@ (80205c4 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x58>)
 8020570:	4605      	mov	r5, r0
 8020572:	7823      	ldrb	r3, [r4, #0]
 8020574:	f3bf 8f5b 	dmb	ish
 8020578:	07da      	lsls	r2, r3, #31
 802057a:	d40b      	bmi.n	8020594 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 802057c:	4620      	mov	r0, r4
 802057e:	f006 ff88 	bl	8027492 <__cxa_guard_acquire>
 8020582:	b138      	cbz	r0, 8020594 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 8020584:	4620      	mov	r0, r4
 8020586:	f006 ff90 	bl	80274aa <__cxa_guard_release>
 802058a:	4a0f      	ldr	r2, [pc, #60]	@ (80205c8 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 802058c:	490f      	ldr	r1, [pc, #60]	@ (80205cc <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x60>)
 802058e:	4810      	ldr	r0, [pc, #64]	@ (80205d0 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 8020590:	f006 ff78 	bl	8027484 <__aeabi_atexit>
 8020594:	4c0f      	ldr	r4, [pc, #60]	@ (80205d4 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x68>)
 8020596:	7823      	ldrb	r3, [r4, #0]
 8020598:	f3bf 8f5b 	dmb	ish
 802059c:	07db      	lsls	r3, r3, #31
 802059e:	d40b      	bmi.n	80205b8 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 80205a0:	4620      	mov	r0, r4
 80205a2:	f006 ff76 	bl	8027492 <__cxa_guard_acquire>
 80205a6:	b138      	cbz	r0, 80205b8 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 80205a8:	4620      	mov	r0, r4
 80205aa:	f006 ff7e 	bl	80274aa <__cxa_guard_release>
 80205ae:	4a06      	ldr	r2, [pc, #24]	@ (80205c8 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 80205b0:	4909      	ldr	r1, [pc, #36]	@ (80205d8 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x6c>)
 80205b2:	480a      	ldr	r0, [pc, #40]	@ (80205dc <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 80205b4:	f006 ff66 	bl	8027484 <__aeabi_atexit>
 80205b8:	4b05      	ldr	r3, [pc, #20]	@ (80205d0 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 80205ba:	60eb      	str	r3, [r5, #12]
 80205bc:	4b07      	ldr	r3, [pc, #28]	@ (80205dc <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 80205be:	612b      	str	r3, [r5, #16]
 80205c0:	bd38      	pop	{r3, r4, r5, pc}
 80205c2:	bf00      	nop
 80205c4:	24028ee4 	.word	0x24028ee4
 80205c8:	24000000 	.word	0x24000000
 80205cc:	0801d7ed 	.word	0x0801d7ed
 80205d0:	240000a8 	.word	0x240000a8
 80205d4:	24028ee8 	.word	0x24028ee8
 80205d8:	0801d7eb 	.word	0x0801d7eb
 80205dc:	240000ac 	.word	0x240000ac

080205e0 <_ZN8touchgfx8LCD24bpp28enableTextureMapperL8_RGB888Ev>:
 80205e0:	b510      	push	{r4, lr}
 80205e2:	4604      	mov	r4, r0
 80205e4:	f7ff ff88 	bl	80204f8 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>
 80205e8:	4620      	mov	r0, r4
 80205ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80205ee:	f7ff bfbd 	b.w	802056c <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>
	...

080205f4 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>:
 80205f4:	b538      	push	{r3, r4, r5, lr}
 80205f6:	4c15      	ldr	r4, [pc, #84]	@ (802064c <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x58>)
 80205f8:	4605      	mov	r5, r0
 80205fa:	7823      	ldrb	r3, [r4, #0]
 80205fc:	f3bf 8f5b 	dmb	ish
 8020600:	07da      	lsls	r2, r3, #31
 8020602:	d40b      	bmi.n	802061c <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 8020604:	4620      	mov	r0, r4
 8020606:	f006 ff44 	bl	8027492 <__cxa_guard_acquire>
 802060a:	b138      	cbz	r0, 802061c <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 802060c:	4620      	mov	r0, r4
 802060e:	f006 ff4c 	bl	80274aa <__cxa_guard_release>
 8020612:	4a0f      	ldr	r2, [pc, #60]	@ (8020650 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 8020614:	490f      	ldr	r1, [pc, #60]	@ (8020654 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x60>)
 8020616:	4810      	ldr	r0, [pc, #64]	@ (8020658 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 8020618:	f006 ff34 	bl	8027484 <__aeabi_atexit>
 802061c:	4c0f      	ldr	r4, [pc, #60]	@ (802065c <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x68>)
 802061e:	7823      	ldrb	r3, [r4, #0]
 8020620:	f3bf 8f5b 	dmb	ish
 8020624:	07db      	lsls	r3, r3, #31
 8020626:	d40b      	bmi.n	8020640 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 8020628:	4620      	mov	r0, r4
 802062a:	f006 ff32 	bl	8027492 <__cxa_guard_acquire>
 802062e:	b138      	cbz	r0, 8020640 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 8020630:	4620      	mov	r0, r4
 8020632:	f006 ff3a 	bl	80274aa <__cxa_guard_release>
 8020636:	4a06      	ldr	r2, [pc, #24]	@ (8020650 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 8020638:	4909      	ldr	r1, [pc, #36]	@ (8020660 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x6c>)
 802063a:	480a      	ldr	r0, [pc, #40]	@ (8020664 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 802063c:	f006 ff22 	bl	8027484 <__aeabi_atexit>
 8020640:	4b05      	ldr	r3, [pc, #20]	@ (8020658 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 8020642:	626b      	str	r3, [r5, #36]	@ 0x24
 8020644:	4b07      	ldr	r3, [pc, #28]	@ (8020664 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 8020646:	62ab      	str	r3, [r5, #40]	@ 0x28
 8020648:	bd38      	pop	{r3, r4, r5, pc}
 802064a:	bf00      	nop
 802064c:	24028f0c 	.word	0x24028f0c
 8020650:	24000000 	.word	0x24000000
 8020654:	0801d7e1 	.word	0x0801d7e1
 8020658:	240000d0 	.word	0x240000d0
 802065c:	24028f10 	.word	0x24028f10
 8020660:	0801d7df 	.word	0x0801d7df
 8020664:	240000d4 	.word	0x240000d4

08020668 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>:
 8020668:	b538      	push	{r3, r4, r5, lr}
 802066a:	4c15      	ldr	r4, [pc, #84]	@ (80206c0 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x58>)
 802066c:	4605      	mov	r5, r0
 802066e:	7823      	ldrb	r3, [r4, #0]
 8020670:	f3bf 8f5b 	dmb	ish
 8020674:	07da      	lsls	r2, r3, #31
 8020676:	d40b      	bmi.n	8020690 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 8020678:	4620      	mov	r0, r4
 802067a:	f006 ff0a 	bl	8027492 <__cxa_guard_acquire>
 802067e:	b138      	cbz	r0, 8020690 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 8020680:	4620      	mov	r0, r4
 8020682:	f006 ff12 	bl	80274aa <__cxa_guard_release>
 8020686:	4a0f      	ldr	r2, [pc, #60]	@ (80206c4 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 8020688:	490f      	ldr	r1, [pc, #60]	@ (80206c8 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x60>)
 802068a:	4810      	ldr	r0, [pc, #64]	@ (80206cc <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 802068c:	f006 fefa 	bl	8027484 <__aeabi_atexit>
 8020690:	4c0f      	ldr	r4, [pc, #60]	@ (80206d0 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x68>)
 8020692:	7823      	ldrb	r3, [r4, #0]
 8020694:	f3bf 8f5b 	dmb	ish
 8020698:	07db      	lsls	r3, r3, #31
 802069a:	d40b      	bmi.n	80206b4 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 802069c:	4620      	mov	r0, r4
 802069e:	f006 fef8 	bl	8027492 <__cxa_guard_acquire>
 80206a2:	b138      	cbz	r0, 80206b4 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 80206a4:	4620      	mov	r0, r4
 80206a6:	f006 ff00 	bl	80274aa <__cxa_guard_release>
 80206aa:	4a06      	ldr	r2, [pc, #24]	@ (80206c4 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 80206ac:	4909      	ldr	r1, [pc, #36]	@ (80206d4 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x6c>)
 80206ae:	480a      	ldr	r0, [pc, #40]	@ (80206d8 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 80206b0:	f006 fee8 	bl	8027484 <__aeabi_atexit>
 80206b4:	4b05      	ldr	r3, [pc, #20]	@ (80206cc <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 80206b6:	61eb      	str	r3, [r5, #28]
 80206b8:	4b07      	ldr	r3, [pc, #28]	@ (80206d8 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 80206ba:	622b      	str	r3, [r5, #32]
 80206bc:	bd38      	pop	{r3, r4, r5, pc}
 80206be:	bf00      	nop
 80206c0:	24028eec 	.word	0x24028eec
 80206c4:	24000000 	.word	0x24000000
 80206c8:	0801d7e5 	.word	0x0801d7e5
 80206cc:	240000b0 	.word	0x240000b0
 80206d0:	24028ef0 	.word	0x24028ef0
 80206d4:	0801d7e3 	.word	0x0801d7e3
 80206d8:	240000b4 	.word	0x240000b4

080206dc <_ZN8touchgfx8LCD24bpp30enableTextureMapperL8_ARGB8888Ev>:
 80206dc:	b510      	push	{r4, lr}
 80206de:	4604      	mov	r4, r0
 80206e0:	f7ff ff88 	bl	80205f4 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>
 80206e4:	4620      	mov	r0, r4
 80206e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80206ea:	f7ff bfbd 	b.w	8020668 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>
	...

080206f0 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv>:
 80206f0:	b538      	push	{r3, r4, r5, lr}
 80206f2:	4c15      	ldr	r4, [pc, #84]	@ (8020748 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x58>)
 80206f4:	4605      	mov	r5, r0
 80206f6:	7823      	ldrb	r3, [r4, #0]
 80206f8:	f3bf 8f5b 	dmb	ish
 80206fc:	07da      	lsls	r2, r3, #31
 80206fe:	d40b      	bmi.n	8020718 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x28>
 8020700:	4620      	mov	r0, r4
 8020702:	f006 fec6 	bl	8027492 <__cxa_guard_acquire>
 8020706:	b138      	cbz	r0, 8020718 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x28>
 8020708:	4620      	mov	r0, r4
 802070a:	f006 fece 	bl	80274aa <__cxa_guard_release>
 802070e:	4a0f      	ldr	r2, [pc, #60]	@ (802074c <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x5c>)
 8020710:	490f      	ldr	r1, [pc, #60]	@ (8020750 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x60>)
 8020712:	4810      	ldr	r0, [pc, #64]	@ (8020754 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x64>)
 8020714:	f006 feb6 	bl	8027484 <__aeabi_atexit>
 8020718:	4c0f      	ldr	r4, [pc, #60]	@ (8020758 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x68>)
 802071a:	7823      	ldrb	r3, [r4, #0]
 802071c:	f3bf 8f5b 	dmb	ish
 8020720:	07db      	lsls	r3, r3, #31
 8020722:	d40b      	bmi.n	802073c <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x4c>
 8020724:	4620      	mov	r0, r4
 8020726:	f006 feb4 	bl	8027492 <__cxa_guard_acquire>
 802072a:	b138      	cbz	r0, 802073c <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x4c>
 802072c:	4620      	mov	r0, r4
 802072e:	f006 febc 	bl	80274aa <__cxa_guard_release>
 8020732:	4a06      	ldr	r2, [pc, #24]	@ (802074c <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x5c>)
 8020734:	4909      	ldr	r1, [pc, #36]	@ (802075c <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x6c>)
 8020736:	480a      	ldr	r0, [pc, #40]	@ (8020760 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x70>)
 8020738:	f006 fea4 	bl	8027484 <__aeabi_atexit>
 802073c:	4b05      	ldr	r3, [pc, #20]	@ (8020754 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x64>)
 802073e:	636b      	str	r3, [r5, #52]	@ 0x34
 8020740:	4b07      	ldr	r3, [pc, #28]	@ (8020760 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x70>)
 8020742:	63ab      	str	r3, [r5, #56]	@ 0x38
 8020744:	bd38      	pop	{r3, r4, r5, pc}
 8020746:	bf00      	nop
 8020748:	24028ef4 	.word	0x24028ef4
 802074c:	24000000 	.word	0x24000000
 8020750:	0801d7d9 	.word	0x0801d7d9
 8020754:	240000b8 	.word	0x240000b8
 8020758:	24028ef8 	.word	0x24028ef8
 802075c:	0801d7d7 	.word	0x0801d7d7
 8020760:	240000bc 	.word	0x240000bc

08020764 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv>:
 8020764:	b538      	push	{r3, r4, r5, lr}
 8020766:	4c15      	ldr	r4, [pc, #84]	@ (80207bc <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x58>)
 8020768:	4605      	mov	r5, r0
 802076a:	7823      	ldrb	r3, [r4, #0]
 802076c:	f3bf 8f5b 	dmb	ish
 8020770:	07da      	lsls	r2, r3, #31
 8020772:	d40b      	bmi.n	802078c <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x28>
 8020774:	4620      	mov	r0, r4
 8020776:	f006 fe8c 	bl	8027492 <__cxa_guard_acquire>
 802077a:	b138      	cbz	r0, 802078c <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x28>
 802077c:	4620      	mov	r0, r4
 802077e:	f006 fe94 	bl	80274aa <__cxa_guard_release>
 8020782:	4a0f      	ldr	r2, [pc, #60]	@ (80207c0 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x5c>)
 8020784:	490f      	ldr	r1, [pc, #60]	@ (80207c4 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x60>)
 8020786:	4810      	ldr	r0, [pc, #64]	@ (80207c8 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x64>)
 8020788:	f006 fe7c 	bl	8027484 <__aeabi_atexit>
 802078c:	4c0f      	ldr	r4, [pc, #60]	@ (80207cc <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x68>)
 802078e:	7823      	ldrb	r3, [r4, #0]
 8020790:	f3bf 8f5b 	dmb	ish
 8020794:	07db      	lsls	r3, r3, #31
 8020796:	d40b      	bmi.n	80207b0 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x4c>
 8020798:	4620      	mov	r0, r4
 802079a:	f006 fe7a 	bl	8027492 <__cxa_guard_acquire>
 802079e:	b138      	cbz	r0, 80207b0 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x4c>
 80207a0:	4620      	mov	r0, r4
 80207a2:	f006 fe82 	bl	80274aa <__cxa_guard_release>
 80207a6:	4a06      	ldr	r2, [pc, #24]	@ (80207c0 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x5c>)
 80207a8:	4909      	ldr	r1, [pc, #36]	@ (80207d0 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x6c>)
 80207aa:	480a      	ldr	r0, [pc, #40]	@ (80207d4 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x70>)
 80207ac:	f006 fe6a 	bl	8027484 <__aeabi_atexit>
 80207b0:	4b05      	ldr	r3, [pc, #20]	@ (80207c8 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x64>)
 80207b2:	62eb      	str	r3, [r5, #44]	@ 0x2c
 80207b4:	4b07      	ldr	r3, [pc, #28]	@ (80207d4 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x70>)
 80207b6:	632b      	str	r3, [r5, #48]	@ 0x30
 80207b8:	bd38      	pop	{r3, r4, r5, pc}
 80207ba:	bf00      	nop
 80207bc:	24028ecc 	.word	0x24028ecc
 80207c0:	24000000 	.word	0x24000000
 80207c4:	0801d7dd 	.word	0x0801d7dd
 80207c8:	24000090 	.word	0x24000090
 80207cc:	24028ed0 	.word	0x24028ed0
 80207d0:	0801d7db 	.word	0x0801d7db
 80207d4:	24000094 	.word	0x24000094

080207d8 <_ZN8touchgfx8LCD24bpp25enableTextureMapperRGB888Ev>:
 80207d8:	b510      	push	{r4, lr}
 80207da:	4604      	mov	r4, r0
 80207dc:	f7ff ff88 	bl	80206f0 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv>
 80207e0:	4620      	mov	r0, r4
 80207e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80207e6:	f7ff bfbd 	b.w	8020764 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv>
	...

080207ec <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>:
 80207ec:	b538      	push	{r3, r4, r5, lr}
 80207ee:	4c15      	ldr	r4, [pc, #84]	@ (8020844 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x58>)
 80207f0:	4605      	mov	r5, r0
 80207f2:	7823      	ldrb	r3, [r4, #0]
 80207f4:	f3bf 8f5b 	dmb	ish
 80207f8:	07da      	lsls	r2, r3, #31
 80207fa:	d40b      	bmi.n	8020814 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 80207fc:	4620      	mov	r0, r4
 80207fe:	f006 fe48 	bl	8027492 <__cxa_guard_acquire>
 8020802:	b138      	cbz	r0, 8020814 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 8020804:	4620      	mov	r0, r4
 8020806:	f006 fe50 	bl	80274aa <__cxa_guard_release>
 802080a:	4a0f      	ldr	r2, [pc, #60]	@ (8020848 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 802080c:	490f      	ldr	r1, [pc, #60]	@ (802084c <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x60>)
 802080e:	4810      	ldr	r0, [pc, #64]	@ (8020850 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 8020810:	f006 fe38 	bl	8027484 <__aeabi_atexit>
 8020814:	4c0f      	ldr	r4, [pc, #60]	@ (8020854 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x68>)
 8020816:	7823      	ldrb	r3, [r4, #0]
 8020818:	f3bf 8f5b 	dmb	ish
 802081c:	07db      	lsls	r3, r3, #31
 802081e:	d40b      	bmi.n	8020838 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 8020820:	4620      	mov	r0, r4
 8020822:	f006 fe36 	bl	8027492 <__cxa_guard_acquire>
 8020826:	b138      	cbz	r0, 8020838 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 8020828:	4620      	mov	r0, r4
 802082a:	f006 fe3e 	bl	80274aa <__cxa_guard_release>
 802082e:	4a06      	ldr	r2, [pc, #24]	@ (8020848 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 8020830:	4909      	ldr	r1, [pc, #36]	@ (8020858 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x6c>)
 8020832:	480a      	ldr	r0, [pc, #40]	@ (802085c <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 8020834:	f006 fe26 	bl	8027484 <__aeabi_atexit>
 8020838:	4b05      	ldr	r3, [pc, #20]	@ (8020850 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 802083a:	646b      	str	r3, [r5, #68]	@ 0x44
 802083c:	4b07      	ldr	r3, [pc, #28]	@ (802085c <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 802083e:	64ab      	str	r3, [r5, #72]	@ 0x48
 8020840:	bd38      	pop	{r3, r4, r5, pc}
 8020842:	bf00      	nop
 8020844:	24028efc 	.word	0x24028efc
 8020848:	24000000 	.word	0x24000000
 802084c:	0801d7d1 	.word	0x0801d7d1
 8020850:	240000c0 	.word	0x240000c0
 8020854:	24028f00 	.word	0x24028f00
 8020858:	0801d7cf 	.word	0x0801d7cf
 802085c:	240000c4 	.word	0x240000c4

08020860 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv>:
 8020860:	b538      	push	{r3, r4, r5, lr}
 8020862:	4c15      	ldr	r4, [pc, #84]	@ (80208b8 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x58>)
 8020864:	4605      	mov	r5, r0
 8020866:	7823      	ldrb	r3, [r4, #0]
 8020868:	f3bf 8f5b 	dmb	ish
 802086c:	07da      	lsls	r2, r3, #31
 802086e:	d40b      	bmi.n	8020888 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 8020870:	4620      	mov	r0, r4
 8020872:	f006 fe0e 	bl	8027492 <__cxa_guard_acquire>
 8020876:	b138      	cbz	r0, 8020888 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 8020878:	4620      	mov	r0, r4
 802087a:	f006 fe16 	bl	80274aa <__cxa_guard_release>
 802087e:	4a0f      	ldr	r2, [pc, #60]	@ (80208bc <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 8020880:	490f      	ldr	r1, [pc, #60]	@ (80208c0 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x60>)
 8020882:	4810      	ldr	r0, [pc, #64]	@ (80208c4 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 8020884:	f006 fdfe 	bl	8027484 <__aeabi_atexit>
 8020888:	4c0f      	ldr	r4, [pc, #60]	@ (80208c8 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x68>)
 802088a:	7823      	ldrb	r3, [r4, #0]
 802088c:	f3bf 8f5b 	dmb	ish
 8020890:	07db      	lsls	r3, r3, #31
 8020892:	d40b      	bmi.n	80208ac <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 8020894:	4620      	mov	r0, r4
 8020896:	f006 fdfc 	bl	8027492 <__cxa_guard_acquire>
 802089a:	b138      	cbz	r0, 80208ac <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 802089c:	4620      	mov	r0, r4
 802089e:	f006 fe04 	bl	80274aa <__cxa_guard_release>
 80208a2:	4a06      	ldr	r2, [pc, #24]	@ (80208bc <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 80208a4:	4909      	ldr	r1, [pc, #36]	@ (80208cc <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x6c>)
 80208a6:	480a      	ldr	r0, [pc, #40]	@ (80208d0 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 80208a8:	f006 fdec 	bl	8027484 <__aeabi_atexit>
 80208ac:	4b05      	ldr	r3, [pc, #20]	@ (80208c4 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 80208ae:	63eb      	str	r3, [r5, #60]	@ 0x3c
 80208b0:	4b07      	ldr	r3, [pc, #28]	@ (80208d0 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 80208b2:	642b      	str	r3, [r5, #64]	@ 0x40
 80208b4:	bd38      	pop	{r3, r4, r5, pc}
 80208b6:	bf00      	nop
 80208b8:	24028edc 	.word	0x24028edc
 80208bc:	24000000 	.word	0x24000000
 80208c0:	0801d7d5 	.word	0x0801d7d5
 80208c4:	240000a0 	.word	0x240000a0
 80208c8:	24028ee0 	.word	0x24028ee0
 80208cc:	0801d7d3 	.word	0x0801d7d3
 80208d0:	240000a4 	.word	0x240000a4

080208d4 <_ZN8touchgfx8LCD24bpp27enableTextureMapperARGB8888Ev>:
 80208d4:	b510      	push	{r4, lr}
 80208d6:	4604      	mov	r4, r0
 80208d8:	f7ff ff88 	bl	80207ec <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>
 80208dc:	4620      	mov	r0, r4
 80208de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80208e2:	f7ff bfbd 	b.w	8020860 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv>
	...

080208e8 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv>:
 80208e8:	b538      	push	{r3, r4, r5, lr}
 80208ea:	4c15      	ldr	r4, [pc, #84]	@ (8020940 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x58>)
 80208ec:	4605      	mov	r5, r0
 80208ee:	7823      	ldrb	r3, [r4, #0]
 80208f0:	f3bf 8f5b 	dmb	ish
 80208f4:	07da      	lsls	r2, r3, #31
 80208f6:	d40b      	bmi.n	8020910 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 80208f8:	4620      	mov	r0, r4
 80208fa:	f006 fdca 	bl	8027492 <__cxa_guard_acquire>
 80208fe:	b138      	cbz	r0, 8020910 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 8020900:	4620      	mov	r0, r4
 8020902:	f006 fdd2 	bl	80274aa <__cxa_guard_release>
 8020906:	4a0f      	ldr	r2, [pc, #60]	@ (8020944 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 8020908:	490f      	ldr	r1, [pc, #60]	@ (8020948 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x60>)
 802090a:	4810      	ldr	r0, [pc, #64]	@ (802094c <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 802090c:	f006 fdba 	bl	8027484 <__aeabi_atexit>
 8020910:	4c0f      	ldr	r4, [pc, #60]	@ (8020950 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x68>)
 8020912:	7823      	ldrb	r3, [r4, #0]
 8020914:	f3bf 8f5b 	dmb	ish
 8020918:	07db      	lsls	r3, r3, #31
 802091a:	d40b      	bmi.n	8020934 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 802091c:	4620      	mov	r0, r4
 802091e:	f006 fdb8 	bl	8027492 <__cxa_guard_acquire>
 8020922:	b138      	cbz	r0, 8020934 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 8020924:	4620      	mov	r0, r4
 8020926:	f006 fdc0 	bl	80274aa <__cxa_guard_release>
 802092a:	4a06      	ldr	r2, [pc, #24]	@ (8020944 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 802092c:	4909      	ldr	r1, [pc, #36]	@ (8020954 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x6c>)
 802092e:	480a      	ldr	r0, [pc, #40]	@ (8020958 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 8020930:	f006 fda8 	bl	8027484 <__aeabi_atexit>
 8020934:	4b05      	ldr	r3, [pc, #20]	@ (802094c <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 8020936:	656b      	str	r3, [r5, #84]	@ 0x54
 8020938:	4b07      	ldr	r3, [pc, #28]	@ (8020958 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 802093a:	65ab      	str	r3, [r5, #88]	@ 0x58
 802093c:	bd38      	pop	{r3, r4, r5, pc}
 802093e:	bf00      	nop
 8020940:	24028ed4 	.word	0x24028ed4
 8020944:	24000000 	.word	0x24000000
 8020948:	0801d7c9 	.word	0x0801d7c9
 802094c:	24000098 	.word	0x24000098
 8020950:	24028ed8 	.word	0x24028ed8
 8020954:	0801d7c7 	.word	0x0801d7c7
 8020958:	2400009c 	.word	0x2400009c

0802095c <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv>:
 802095c:	b538      	push	{r3, r4, r5, lr}
 802095e:	4c15      	ldr	r4, [pc, #84]	@ (80209b4 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x58>)
 8020960:	4605      	mov	r5, r0
 8020962:	7823      	ldrb	r3, [r4, #0]
 8020964:	f3bf 8f5b 	dmb	ish
 8020968:	07da      	lsls	r2, r3, #31
 802096a:	d40b      	bmi.n	8020984 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 802096c:	4620      	mov	r0, r4
 802096e:	f006 fd90 	bl	8027492 <__cxa_guard_acquire>
 8020972:	b138      	cbz	r0, 8020984 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 8020974:	4620      	mov	r0, r4
 8020976:	f006 fd98 	bl	80274aa <__cxa_guard_release>
 802097a:	4a0f      	ldr	r2, [pc, #60]	@ (80209b8 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 802097c:	490f      	ldr	r1, [pc, #60]	@ (80209bc <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x60>)
 802097e:	4810      	ldr	r0, [pc, #64]	@ (80209c0 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 8020980:	f006 fd80 	bl	8027484 <__aeabi_atexit>
 8020984:	4c0f      	ldr	r4, [pc, #60]	@ (80209c4 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x68>)
 8020986:	7823      	ldrb	r3, [r4, #0]
 8020988:	f3bf 8f5b 	dmb	ish
 802098c:	07db      	lsls	r3, r3, #31
 802098e:	d40b      	bmi.n	80209a8 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 8020990:	4620      	mov	r0, r4
 8020992:	f006 fd7e 	bl	8027492 <__cxa_guard_acquire>
 8020996:	b138      	cbz	r0, 80209a8 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 8020998:	4620      	mov	r0, r4
 802099a:	f006 fd86 	bl	80274aa <__cxa_guard_release>
 802099e:	4a06      	ldr	r2, [pc, #24]	@ (80209b8 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 80209a0:	4909      	ldr	r1, [pc, #36]	@ (80209c8 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x6c>)
 80209a2:	480a      	ldr	r0, [pc, #40]	@ (80209cc <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 80209a4:	f006 fd6e 	bl	8027484 <__aeabi_atexit>
 80209a8:	4b05      	ldr	r3, [pc, #20]	@ (80209c0 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 80209aa:	64eb      	str	r3, [r5, #76]	@ 0x4c
 80209ac:	4b07      	ldr	r3, [pc, #28]	@ (80209cc <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 80209ae:	652b      	str	r3, [r5, #80]	@ 0x50
 80209b0:	bd38      	pop	{r3, r4, r5, pc}
 80209b2:	bf00      	nop
 80209b4:	24028ec4 	.word	0x24028ec4
 80209b8:	24000000 	.word	0x24000000
 80209bc:	0801d7cd 	.word	0x0801d7cd
 80209c0:	24000088 	.word	0x24000088
 80209c4:	24028ec8 	.word	0x24028ec8
 80209c8:	0801d7cb 	.word	0x0801d7cb
 80209cc:	2400008c 	.word	0x2400008c

080209d0 <_ZN8touchgfx8LCD24bpp21enableTextureMapperA4Ev>:
 80209d0:	b510      	push	{r4, lr}
 80209d2:	4604      	mov	r4, r0
 80209d4:	f7ff ff88 	bl	80208e8 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv>
 80209d8:	4620      	mov	r0, r4
 80209da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80209de:	f7ff bfbd 	b.w	802095c <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv>

080209e2 <_ZN8touchgfx8LCD24bpp22enableTextureMapperAllEv>:
 80209e2:	b510      	push	{r4, lr}
 80209e4:	4604      	mov	r4, r0
 80209e6:	f7ff fff3 	bl	80209d0 <_ZN8touchgfx8LCD24bpp21enableTextureMapperA4Ev>
 80209ea:	4620      	mov	r0, r4
 80209ec:	f7ff ff72 	bl	80208d4 <_ZN8touchgfx8LCD24bpp27enableTextureMapperARGB8888Ev>
 80209f0:	4620      	mov	r0, r4
 80209f2:	f7ff fe73 	bl	80206dc <_ZN8touchgfx8LCD24bpp30enableTextureMapperL8_ARGB8888Ev>
 80209f6:	4620      	mov	r0, r4
 80209f8:	f7ff fdf2 	bl	80205e0 <_ZN8touchgfx8LCD24bpp28enableTextureMapperL8_RGB888Ev>
 80209fc:	4620      	mov	r0, r4
 80209fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8020a02:	f7ff bee9 	b.w	80207d8 <_ZN8touchgfx8LCD24bpp25enableTextureMapperRGB888Ev>
	...

08020a08 <_ZN8touchgfx8LCD24bpp23enableDecompressorL8_L4Ev>:
 8020a08:	b538      	push	{r3, r4, r5, lr}
 8020a0a:	4c0b      	ldr	r4, [pc, #44]	@ (8020a38 <_ZN8touchgfx8LCD24bpp23enableDecompressorL8_L4Ev+0x30>)
 8020a0c:	4605      	mov	r5, r0
 8020a0e:	7823      	ldrb	r3, [r4, #0]
 8020a10:	f3bf 8f5b 	dmb	ish
 8020a14:	07db      	lsls	r3, r3, #31
 8020a16:	d40b      	bmi.n	8020a30 <_ZN8touchgfx8LCD24bpp23enableDecompressorL8_L4Ev+0x28>
 8020a18:	4620      	mov	r0, r4
 8020a1a:	f006 fd3a 	bl	8027492 <__cxa_guard_acquire>
 8020a1e:	b138      	cbz	r0, 8020a30 <_ZN8touchgfx8LCD24bpp23enableDecompressorL8_L4Ev+0x28>
 8020a20:	4620      	mov	r0, r4
 8020a22:	f006 fd42 	bl	80274aa <__cxa_guard_release>
 8020a26:	4a05      	ldr	r2, [pc, #20]	@ (8020a3c <_ZN8touchgfx8LCD24bpp23enableDecompressorL8_L4Ev+0x34>)
 8020a28:	4905      	ldr	r1, [pc, #20]	@ (8020a40 <_ZN8touchgfx8LCD24bpp23enableDecompressorL8_L4Ev+0x38>)
 8020a2a:	4806      	ldr	r0, [pc, #24]	@ (8020a44 <_ZN8touchgfx8LCD24bpp23enableDecompressorL8_L4Ev+0x3c>)
 8020a2c:	f006 fd2a 	bl	8027484 <__aeabi_atexit>
 8020a30:	4b04      	ldr	r3, [pc, #16]	@ (8020a44 <_ZN8touchgfx8LCD24bpp23enableDecompressorL8_L4Ev+0x3c>)
 8020a32:	65eb      	str	r3, [r5, #92]	@ 0x5c
 8020a34:	bd38      	pop	{r3, r4, r5, pc}
 8020a36:	bf00      	nop
 8020a38:	24028eb8 	.word	0x24028eb8
 8020a3c:	24000000 	.word	0x24000000
 8020a40:	0801d7c5 	.word	0x0801d7c5
 8020a44:	24000080 	.word	0x24000080

08020a48 <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_RLEEv>:
 8020a48:	b538      	push	{r3, r4, r5, lr}
 8020a4a:	4c0b      	ldr	r4, [pc, #44]	@ (8020a78 <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_RLEEv+0x30>)
 8020a4c:	4605      	mov	r5, r0
 8020a4e:	7823      	ldrb	r3, [r4, #0]
 8020a50:	f3bf 8f5b 	dmb	ish
 8020a54:	07db      	lsls	r3, r3, #31
 8020a56:	d40b      	bmi.n	8020a70 <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_RLEEv+0x28>
 8020a58:	4620      	mov	r0, r4
 8020a5a:	f006 fd1a 	bl	8027492 <__cxa_guard_acquire>
 8020a5e:	b138      	cbz	r0, 8020a70 <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_RLEEv+0x28>
 8020a60:	4620      	mov	r0, r4
 8020a62:	f006 fd22 	bl	80274aa <__cxa_guard_release>
 8020a66:	4a05      	ldr	r2, [pc, #20]	@ (8020a7c <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_RLEEv+0x34>)
 8020a68:	4905      	ldr	r1, [pc, #20]	@ (8020a80 <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_RLEEv+0x38>)
 8020a6a:	4806      	ldr	r0, [pc, #24]	@ (8020a84 <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_RLEEv+0x3c>)
 8020a6c:	f006 fd0a 	bl	8027484 <__aeabi_atexit>
 8020a70:	4b04      	ldr	r3, [pc, #16]	@ (8020a84 <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_RLEEv+0x3c>)
 8020a72:	662b      	str	r3, [r5, #96]	@ 0x60
 8020a74:	bd38      	pop	{r3, r4, r5, pc}
 8020a76:	bf00      	nop
 8020a78:	24028ebc 	.word	0x24028ebc
 8020a7c:	24000000 	.word	0x24000000
 8020a80:	0801d7c3 	.word	0x0801d7c3
 8020a84:	24000084 	.word	0x24000084

08020a88 <_ZN8touchgfx8LCD24bpp25enableDecompressorL8_LZW9Ev>:
 8020a88:	b570      	push	{r4, r5, r6, lr}
 8020a8a:	4d0c      	ldr	r5, [pc, #48]	@ (8020abc <_ZN8touchgfx8LCD24bpp25enableDecompressorL8_LZW9Ev+0x34>)
 8020a8c:	4606      	mov	r6, r0
 8020a8e:	4c0c      	ldr	r4, [pc, #48]	@ (8020ac0 <_ZN8touchgfx8LCD24bpp25enableDecompressorL8_LZW9Ev+0x38>)
 8020a90:	782b      	ldrb	r3, [r5, #0]
 8020a92:	f3bf 8f5b 	dmb	ish
 8020a96:	f013 0f01 	tst.w	r3, #1
 8020a9a:	d10d      	bne.n	8020ab8 <_ZN8touchgfx8LCD24bpp25enableDecompressorL8_LZW9Ev+0x30>
 8020a9c:	4628      	mov	r0, r5
 8020a9e:	f006 fcf8 	bl	8027492 <__cxa_guard_acquire>
 8020aa2:	b148      	cbz	r0, 8020ab8 <_ZN8touchgfx8LCD24bpp25enableDecompressorL8_LZW9Ev+0x30>
 8020aa4:	4b07      	ldr	r3, [pc, #28]	@ (8020ac4 <_ZN8touchgfx8LCD24bpp25enableDecompressorL8_LZW9Ev+0x3c>)
 8020aa6:	4628      	mov	r0, r5
 8020aa8:	6023      	str	r3, [r4, #0]
 8020aaa:	f006 fcfe 	bl	80274aa <__cxa_guard_release>
 8020aae:	4a06      	ldr	r2, [pc, #24]	@ (8020ac8 <_ZN8touchgfx8LCD24bpp25enableDecompressorL8_LZW9Ev+0x40>)
 8020ab0:	4620      	mov	r0, r4
 8020ab2:	4906      	ldr	r1, [pc, #24]	@ (8020acc <_ZN8touchgfx8LCD24bpp25enableDecompressorL8_LZW9Ev+0x44>)
 8020ab4:	f006 fce6 	bl	8027484 <__aeabi_atexit>
 8020ab8:	6674      	str	r4, [r6, #100]	@ 0x64
 8020aba:	bd70      	pop	{r4, r5, r6, pc}
 8020abc:	24028ec0 	.word	0x24028ec0
 8020ac0:	24029018 	.word	0x24029018
 8020ac4:	0802d2cc 	.word	0x0802d2cc
 8020ac8:	24000000 	.word	0x24000000
 8020acc:	0801d7c1 	.word	0x0801d7c1

08020ad0 <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_AllEv>:
 8020ad0:	b510      	push	{r4, lr}
 8020ad2:	4604      	mov	r4, r0
 8020ad4:	f7ff ff98 	bl	8020a08 <_ZN8touchgfx8LCD24bpp23enableDecompressorL8_L4Ev>
 8020ad8:	4620      	mov	r0, r4
 8020ada:	f7ff ffb5 	bl	8020a48 <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_RLEEv>
 8020ade:	4620      	mov	r0, r4
 8020ae0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8020ae4:	f7ff bfd0 	b.w	8020a88 <_ZN8touchgfx8LCD24bpp25enableDecompressorL8_LZW9Ev>

08020ae8 <_ZN8touchgfx8LCD24bpp21enableDecompressorRGBEv>:
 8020ae8:	b570      	push	{r4, r5, r6, lr}
 8020aea:	4d0c      	ldr	r5, [pc, #48]	@ (8020b1c <_ZN8touchgfx8LCD24bpp21enableDecompressorRGBEv+0x34>)
 8020aec:	4606      	mov	r6, r0
 8020aee:	4c0c      	ldr	r4, [pc, #48]	@ (8020b20 <_ZN8touchgfx8LCD24bpp21enableDecompressorRGBEv+0x38>)
 8020af0:	782b      	ldrb	r3, [r5, #0]
 8020af2:	f3bf 8f5b 	dmb	ish
 8020af6:	f013 0f01 	tst.w	r3, #1
 8020afa:	d10d      	bne.n	8020b18 <_ZN8touchgfx8LCD24bpp21enableDecompressorRGBEv+0x30>
 8020afc:	4628      	mov	r0, r5
 8020afe:	f006 fcc8 	bl	8027492 <__cxa_guard_acquire>
 8020b02:	b148      	cbz	r0, 8020b18 <_ZN8touchgfx8LCD24bpp21enableDecompressorRGBEv+0x30>
 8020b04:	4b07      	ldr	r3, [pc, #28]	@ (8020b24 <_ZN8touchgfx8LCD24bpp21enableDecompressorRGBEv+0x3c>)
 8020b06:	4628      	mov	r0, r5
 8020b08:	6023      	str	r3, [r4, #0]
 8020b0a:	f006 fcce 	bl	80274aa <__cxa_guard_release>
 8020b0e:	4a06      	ldr	r2, [pc, #24]	@ (8020b28 <_ZN8touchgfx8LCD24bpp21enableDecompressorRGBEv+0x40>)
 8020b10:	4620      	mov	r0, r4
 8020b12:	4906      	ldr	r1, [pc, #24]	@ (8020b2c <_ZN8touchgfx8LCD24bpp21enableDecompressorRGBEv+0x44>)
 8020b14:	f006 fcb6 	bl	8027484 <__aeabi_atexit>
 8020b18:	66b4      	str	r4, [r6, #104]	@ 0x68
 8020b1a:	bd70      	pop	{r4, r5, r6, pc}
 8020b1c:	24028eb4 	.word	0x24028eb4
 8020b20:	24028f14 	.word	0x24028f14
 8020b24:	0802d2e4 	.word	0x0802d2e4
 8020b28:	24000000 	.word	0x24000000
 8020b2c:	0801d7bf 	.word	0x0801d7bf

08020b30 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh>:
 8020b30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020b34:	b087      	sub	sp, #28
 8020b36:	788d      	ldrb	r5, [r1, #2]
 8020b38:	f891 9000 	ldrb.w	r9, [r1]
 8020b3c:	f9bd 8040 	ldrsh.w	r8, [sp, #64]	@ 0x40
 8020b40:	9501      	str	r5, [sp, #4]
 8020b42:	784d      	ldrb	r5, [r1, #1]
 8020b44:	9203      	str	r2, [sp, #12]
 8020b46:	9502      	str	r5, [sp, #8]
 8020b48:	f9bd b044 	ldrsh.w	fp, [sp, #68]	@ 0x44
 8020b4c:	f89d 4050 	ldrb.w	r4, [sp, #80]	@ 0x50
 8020b50:	f89d c054 	ldrb.w	ip, [sp, #84]	@ 0x54
 8020b54:	f89d e058 	ldrb.w	lr, [sp, #88]	@ 0x58
 8020b58:	e9dd 0612 	ldrd	r0, r6, [sp, #72]	@ 0x48
 8020b5c:	fb06 0708 	mla	r7, r6, r8, r0
 8020b60:	2e00      	cmp	r6, #0
 8020b62:	eb02 0a07 	add.w	sl, r2, r7
 8020b66:	ea4f 2205 	mov.w	r2, r5, lsl #8
 8020b6a:	9d01      	ldr	r5, [sp, #4]
 8020b6c:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
 8020b70:	ea45 0509 	orr.w	r5, r5, r9
 8020b74:	9505      	str	r5, [sp, #20]
 8020b76:	f2c0 80b2 	blt.w	8020cde <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1ae>
 8020b7a:	45b3      	cmp	fp, r6
 8020b7c:	f340 80af 	ble.w	8020cde <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1ae>
 8020b80:	2800      	cmp	r0, #0
 8020b82:	f2c0 80aa 	blt.w	8020cda <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1aa>
 8020b86:	4580      	cmp	r8, r0
 8020b88:	f340 80a7 	ble.w	8020cda <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1aa>
 8020b8c:	9a03      	ldr	r2, [sp, #12]
 8020b8e:	5dd7      	ldrb	r7, [r2, r7]
 8020b90:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8020b94:	441f      	add	r7, r3
 8020b96:	1c42      	adds	r2, r0, #1
 8020b98:	f100 80a4 	bmi.w	8020ce4 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1b4>
 8020b9c:	4590      	cmp	r8, r2
 8020b9e:	f340 80a1 	ble.w	8020ce4 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1b4>
 8020ba2:	2c00      	cmp	r4, #0
 8020ba4:	f000 809e 	beq.w	8020ce4 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1b4>
 8020ba8:	f89a 5001 	ldrb.w	r5, [sl, #1]
 8020bac:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8020bb0:	441d      	add	r5, r3
 8020bb2:	3601      	adds	r6, #1
 8020bb4:	f100 809a 	bmi.w	8020cec <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1bc>
 8020bb8:	45b3      	cmp	fp, r6
 8020bba:	f340 8097 	ble.w	8020cec <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1bc>
 8020bbe:	f1bc 0f00 	cmp.w	ip, #0
 8020bc2:	f000 8093 	beq.w	8020cec <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1bc>
 8020bc6:	2800      	cmp	r0, #0
 8020bc8:	f2c0 808e 	blt.w	8020ce8 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1b8>
 8020bcc:	4580      	cmp	r8, r0
 8020bce:	f340 808b 	ble.w	8020ce8 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1b8>
 8020bd2:	f81a 6008 	ldrb.w	r6, [sl, r8]
 8020bd6:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8020bda:	441e      	add	r6, r3
 8020bdc:	3001      	adds	r0, #1
 8020bde:	f100 8088 	bmi.w	8020cf2 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1c2>
 8020be2:	4580      	cmp	r8, r0
 8020be4:	f340 8085 	ble.w	8020cf2 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1c2>
 8020be8:	2c00      	cmp	r4, #0
 8020bea:	f000 8082 	beq.w	8020cf2 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1c2>
 8020bee:	44d0      	add	r8, sl
 8020bf0:	f898 2001 	ldrb.w	r2, [r8, #1]
 8020bf4:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8020bf8:	4413      	add	r3, r2
 8020bfa:	b2a4      	uxth	r4, r4
 8020bfc:	f895 a000 	ldrb.w	sl, [r5]
 8020c00:	fa1f fc8c 	uxth.w	ip, ip
 8020c04:	fb04 fb0c 	mul.w	fp, r4, ip
 8020c08:	0124      	lsls	r4, r4, #4
 8020c0a:	ebcb 1c0c 	rsb	ip, fp, ip, lsl #4
 8020c0e:	f5c4 7880 	rsb	r8, r4, #256	@ 0x100
 8020c12:	eba4 040b 	sub.w	r4, r4, fp
 8020c16:	fa1f f08c 	uxth.w	r0, ip
 8020c1a:	b2a2      	uxth	r2, r4
 8020c1c:	783c      	ldrb	r4, [r7, #0]
 8020c1e:	eba8 0800 	sub.w	r8, r8, r0
 8020c22:	fa1f fc8e 	uxth.w	ip, lr
 8020c26:	fb02 fa0a 	mul.w	sl, r2, sl
 8020c2a:	ea6f 0e0e 	mvn.w	lr, lr
 8020c2e:	fa1f f888 	uxth.w	r8, r8
 8020c32:	fa5f fe8e 	uxtb.w	lr, lr
 8020c36:	fb08 aa04 	mla	sl, r8, r4, sl
 8020c3a:	7834      	ldrb	r4, [r6, #0]
 8020c3c:	fb19 f90e 	smulbb	r9, r9, lr
 8020c40:	fb00 aa04 	mla	sl, r0, r4, sl
 8020c44:	781c      	ldrb	r4, [r3, #0]
 8020c46:	fb0b a404 	mla	r4, fp, r4, sl
 8020c4a:	f3c4 2407 	ubfx	r4, r4, #8, #8
 8020c4e:	fb04 990c 	mla	r9, r4, ip, r9
 8020c52:	fa1f f989 	uxth.w	r9, r9
 8020c56:	f109 0401 	add.w	r4, r9, #1
 8020c5a:	eb04 2919 	add.w	r9, r4, r9, lsr #8
 8020c5e:	ea4f 2929 	mov.w	r9, r9, asr #8
 8020c62:	f881 9000 	strb.w	r9, [r1]
 8020c66:	f895 9001 	ldrb.w	r9, [r5, #1]
 8020c6a:	787c      	ldrb	r4, [r7, #1]
 8020c6c:	fb02 f909 	mul.w	r9, r2, r9
 8020c70:	fb08 9904 	mla	r9, r8, r4, r9
 8020c74:	7874      	ldrb	r4, [r6, #1]
 8020c76:	fb00 9904 	mla	r9, r0, r4, r9
 8020c7a:	785c      	ldrb	r4, [r3, #1]
 8020c7c:	fb0b 9404 	mla	r4, fp, r4, r9
 8020c80:	f3c4 2a07 	ubfx	sl, r4, #8, #8
 8020c84:	9c02      	ldr	r4, [sp, #8]
 8020c86:	fb14 f90e 	smulbb	r9, r4, lr
 8020c8a:	fb0a 940c 	mla	r4, sl, ip, r9
 8020c8e:	b2a4      	uxth	r4, r4
 8020c90:	f104 0901 	add.w	r9, r4, #1
 8020c94:	eb09 2414 	add.w	r4, r9, r4, lsr #8
 8020c98:	1224      	asrs	r4, r4, #8
 8020c9a:	704c      	strb	r4, [r1, #1]
 8020c9c:	78ad      	ldrb	r5, [r5, #2]
 8020c9e:	78bc      	ldrb	r4, [r7, #2]
 8020ca0:	436a      	muls	r2, r5
 8020ca2:	789b      	ldrb	r3, [r3, #2]
 8020ca4:	fb08 2204 	mla	r2, r8, r4, r2
 8020ca8:	78b4      	ldrb	r4, [r6, #2]
 8020caa:	fb00 2004 	mla	r0, r0, r4, r2
 8020cae:	fb0b 0b03 	mla	fp, fp, r3, r0
 8020cb2:	9b01      	ldr	r3, [sp, #4]
 8020cb4:	fb13 fe0e 	smulbb	lr, r3, lr
 8020cb8:	f3cb 2b07 	ubfx	fp, fp, #8, #8
 8020cbc:	fb0b ec0c 	mla	ip, fp, ip, lr
 8020cc0:	fa1f fc8c 	uxth.w	ip, ip
 8020cc4:	f10c 0e01 	add.w	lr, ip, #1
 8020cc8:	eb0e 2c1c 	add.w	ip, lr, ip, lsr #8
 8020ccc:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 8020cd0:	f881 c002 	strb.w	ip, [r1, #2]
 8020cd4:	b007      	add	sp, #28
 8020cd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020cda:	af05      	add	r7, sp, #20
 8020cdc:	e75b      	b.n	8020b96 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x66>
 8020cde:	ad05      	add	r5, sp, #20
 8020ce0:	462f      	mov	r7, r5
 8020ce2:	e766      	b.n	8020bb2 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x82>
 8020ce4:	ad05      	add	r5, sp, #20
 8020ce6:	e764      	b.n	8020bb2 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x82>
 8020ce8:	ae05      	add	r6, sp, #20
 8020cea:	e777      	b.n	8020bdc <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xac>
 8020cec:	ab05      	add	r3, sp, #20
 8020cee:	461e      	mov	r6, r3
 8020cf0:	e783      	b.n	8020bfa <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xca>
 8020cf2:	ab05      	add	r3, sp, #20
 8020cf4:	e781      	b.n	8020bfa <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xca>

08020cf6 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8020cf6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020cfa:	b093      	sub	sp, #76	@ 0x4c
 8020cfc:	9210      	str	r2, [sp, #64]	@ 0x40
 8020cfe:	9309      	str	r3, [sp, #36]	@ 0x24
 8020d00:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8020d02:	f89d 3094 	ldrb.w	r3, [sp, #148]	@ 0x94
 8020d06:	9011      	str	r0, [sp, #68]	@ 0x44
 8020d08:	930e      	str	r3, [sp, #56]	@ 0x38
 8020d0a:	6850      	ldr	r0, [r2, #4]
 8020d0c:	910d      	str	r1, [sp, #52]	@ 0x34
 8020d0e:	6812      	ldr	r2, [r2, #0]
 8020d10:	e9dd 1322 	ldrd	r1, r3, [sp, #136]	@ 0x88
 8020d14:	fb00 1303 	mla	r3, r0, r3, r1
 8020d18:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8020d1c:	18d3      	adds	r3, r2, r3
 8020d1e:	930a      	str	r3, [sp, #40]	@ 0x28
 8020d20:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8020d22:	681b      	ldr	r3, [r3, #0]
 8020d24:	930c      	str	r3, [sp, #48]	@ 0x30
 8020d26:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8020d28:	685c      	ldr	r4, [r3, #4]
 8020d2a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8020d2c:	3404      	adds	r4, #4
 8020d2e:	43db      	mvns	r3, r3
 8020d30:	b2db      	uxtb	r3, r3
 8020d32:	930b      	str	r3, [sp, #44]	@ 0x2c
 8020d34:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8020d36:	2b00      	cmp	r3, #0
 8020d38:	dc03      	bgt.n	8020d42 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 8020d3a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8020d3c:	2b00      	cmp	r3, #0
 8020d3e:	f340 8250 	ble.w	80211e2 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ec>
 8020d42:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8020d44:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8020d48:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8020d4c:	1e48      	subs	r0, r1, #1
 8020d4e:	1e55      	subs	r5, r2, #1
 8020d50:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8020d52:	2b00      	cmp	r3, #0
 8020d54:	f340 80ee 	ble.w	8020f34 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23e>
 8020d58:	9e1d      	ldr	r6, [sp, #116]	@ 0x74
 8020d5a:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8020d5c:	1436      	asrs	r6, r6, #16
 8020d5e:	ea4f 4323 	mov.w	r3, r3, asr #16
 8020d62:	d406      	bmi.n	8020d72 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8020d64:	4286      	cmp	r6, r0
 8020d66:	da04      	bge.n	8020d72 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8020d68:	2b00      	cmp	r3, #0
 8020d6a:	db02      	blt.n	8020d72 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8020d6c:	42ab      	cmp	r3, r5
 8020d6e:	f2c0 80e2 	blt.w	8020f36 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x240>
 8020d72:	3601      	adds	r6, #1
 8020d74:	f100 80cf 	bmi.w	8020f16 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x220>
 8020d78:	42b1      	cmp	r1, r6
 8020d7a:	f2c0 80cc 	blt.w	8020f16 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x220>
 8020d7e:	3301      	adds	r3, #1
 8020d80:	f100 80c9 	bmi.w	8020f16 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x220>
 8020d84:	429a      	cmp	r2, r3
 8020d86:	f2c0 80c6 	blt.w	8020f16 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x220>
 8020d8a:	e9dd b609 	ldrd	fp, r6, [sp, #36]	@ 0x24
 8020d8e:	f1bb 0f00 	cmp.w	fp, #0
 8020d92:	f340 80f1 	ble.w	8020f78 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x282>
 8020d96:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8020d98:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 8020d9a:	9824      	ldr	r0, [sp, #144]	@ 0x90
 8020d9c:	141d      	asrs	r5, r3, #16
 8020d9e:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8020da0:	f3c2 3103 	ubfx	r1, r2, #12, #4
 8020da4:	68c7      	ldr	r7, [r0, #12]
 8020da6:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8020da8:	1418      	asrs	r0, r3, #16
 8020daa:	f3c3 3803 	ubfx	r8, r3, #12, #4
 8020dae:	6892      	ldr	r2, [r2, #8]
 8020db0:	f100 8137 	bmi.w	8021022 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32c>
 8020db4:	f102 3cff 	add.w	ip, r2, #4294967295
 8020db8:	4560      	cmp	r0, ip
 8020dba:	f280 8132 	bge.w	8021022 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32c>
 8020dbe:	2d00      	cmp	r5, #0
 8020dc0:	f2c0 812f 	blt.w	8021022 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32c>
 8020dc4:	f107 3cff 	add.w	ip, r7, #4294967295
 8020dc8:	4565      	cmp	r5, ip
 8020dca:	f280 812a 	bge.w	8021022 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32c>
 8020dce:	b212      	sxth	r2, r2
 8020dd0:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
 8020dd2:	fb05 0002 	mla	r0, r5, r2, r0
 8020dd6:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 8020dd8:	f817 c000 	ldrb.w	ip, [r7, r0]
 8020ddc:	4405      	add	r5, r0
 8020dde:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 8020de2:	eb04 0e0c 	add.w	lr, r4, ip
 8020de6:	f1b8 0f00 	cmp.w	r8, #0
 8020dea:	f000 810c 	beq.w	8021006 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x310>
 8020dee:	786f      	ldrb	r7, [r5, #1]
 8020df0:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8020df4:	4427      	add	r7, r4
 8020df6:	2900      	cmp	r1, #0
 8020df8:	f000 810d 	beq.w	8021016 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x320>
 8020dfc:	18a8      	adds	r0, r5, r2
 8020dfe:	5caa      	ldrb	r2, [r5, r2]
 8020e00:	7840      	ldrb	r0, [r0, #1]
 8020e02:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8020e06:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8020e0a:	4422      	add	r2, r4
 8020e0c:	4420      	add	r0, r4
 8020e0e:	fa1f f388 	uxth.w	r3, r8
 8020e12:	f814 a00c 	ldrb.w	sl, [r4, ip]
 8020e16:	b289      	uxth	r1, r1
 8020e18:	f897 c000 	ldrb.w	ip, [r7]
 8020e1c:	f8bd 5038 	ldrh.w	r5, [sp, #56]	@ 0x38
 8020e20:	fb03 f901 	mul.w	r9, r3, r1
 8020e24:	011b      	lsls	r3, r3, #4
 8020e26:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 8020e2a:	f5c3 7880 	rsb	r8, r3, #256	@ 0x100
 8020e2e:	eba3 0309 	sub.w	r3, r3, r9
 8020e32:	b289      	uxth	r1, r1
 8020e34:	b29b      	uxth	r3, r3
 8020e36:	eba8 0801 	sub.w	r8, r8, r1
 8020e3a:	fb03 fc0c 	mul.w	ip, r3, ip
 8020e3e:	fa1f f888 	uxth.w	r8, r8
 8020e42:	930f      	str	r3, [sp, #60]	@ 0x3c
 8020e44:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8020e46:	fb08 cc0a 	mla	ip, r8, sl, ip
 8020e4a:	f892 a000 	ldrb.w	sl, [r2]
 8020e4e:	fb01 cc0a 	mla	ip, r1, sl, ip
 8020e52:	f890 a000 	ldrb.w	sl, [r0]
 8020e56:	fb09 cc0a 	mla	ip, r9, sl, ip
 8020e5a:	f896 a000 	ldrb.w	sl, [r6]
 8020e5e:	fb1a fa03 	smulbb	sl, sl, r3
 8020e62:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 8020e66:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8020e68:	fb0c ac05 	mla	ip, ip, r5, sl
 8020e6c:	fa1f fc8c 	uxth.w	ip, ip
 8020e70:	f10c 0a01 	add.w	sl, ip, #1
 8020e74:	eb0a 2a1c 	add.w	sl, sl, ip, lsr #8
 8020e78:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8020e7c:	f886 a000 	strb.w	sl, [r6]
 8020e80:	f897 c001 	ldrb.w	ip, [r7, #1]
 8020e84:	f89e a001 	ldrb.w	sl, [lr, #1]
 8020e88:	fb03 fc0c 	mul.w	ip, r3, ip
 8020e8c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8020e8e:	fb08 cc0a 	mla	ip, r8, sl, ip
 8020e92:	f892 a001 	ldrb.w	sl, [r2, #1]
 8020e96:	fb01 cc0a 	mla	ip, r1, sl, ip
 8020e9a:	f890 a001 	ldrb.w	sl, [r0, #1]
 8020e9e:	fb09 cc0a 	mla	ip, r9, sl, ip
 8020ea2:	f896 a001 	ldrb.w	sl, [r6, #1]
 8020ea6:	fb1a fa03 	smulbb	sl, sl, r3
 8020eaa:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 8020eae:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8020eb0:	fb0c ac05 	mla	ip, ip, r5, sl
 8020eb4:	fa1f fc8c 	uxth.w	ip, ip
 8020eb8:	f10c 0a01 	add.w	sl, ip, #1
 8020ebc:	eb0a 2c1c 	add.w	ip, sl, ip, lsr #8
 8020ec0:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 8020ec4:	f886 c001 	strb.w	ip, [r6, #1]
 8020ec8:	78bf      	ldrb	r7, [r7, #2]
 8020eca:	f89e c002 	ldrb.w	ip, [lr, #2]
 8020ece:	437b      	muls	r3, r7
 8020ed0:	fb08 330c 	mla	r3, r8, ip, r3
 8020ed4:	f892 c002 	ldrb.w	ip, [r2, #2]
 8020ed8:	7882      	ldrb	r2, [r0, #2]
 8020eda:	fb01 310c 	mla	r1, r1, ip, r3
 8020ede:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8020ee0:	fb09 1902 	mla	r9, r9, r2, r1
 8020ee4:	78b1      	ldrb	r1, [r6, #2]
 8020ee6:	fb11 f103 	smulbb	r1, r1, r3
 8020eea:	f3c9 2907 	ubfx	r9, r9, #8, #8
 8020eee:	fb09 1505 	mla	r5, r9, r5, r1
 8020ef2:	b2ad      	uxth	r5, r5
 8020ef4:	1c6b      	adds	r3, r5, #1
 8020ef6:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 8020efa:	122d      	asrs	r5, r5, #8
 8020efc:	70b5      	strb	r5, [r6, #2]
 8020efe:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8020f00:	3603      	adds	r6, #3
 8020f02:	9a1f      	ldr	r2, [sp, #124]	@ 0x7c
 8020f04:	f10b 3bff 	add.w	fp, fp, #4294967295
 8020f08:	4413      	add	r3, r2
 8020f0a:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8020f0c:	931d      	str	r3, [sp, #116]	@ 0x74
 8020f0e:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8020f10:	4413      	add	r3, r2
 8020f12:	931e      	str	r3, [sp, #120]	@ 0x78
 8020f14:	e73b      	b.n	8020d8e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 8020f16:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8020f18:	9e1f      	ldr	r6, [sp, #124]	@ 0x7c
 8020f1a:	4433      	add	r3, r6
 8020f1c:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8020f1e:	931d      	str	r3, [sp, #116]	@ 0x74
 8020f20:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8020f22:	4433      	add	r3, r6
 8020f24:	931e      	str	r3, [sp, #120]	@ 0x78
 8020f26:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8020f28:	3b01      	subs	r3, #1
 8020f2a:	9309      	str	r3, [sp, #36]	@ 0x24
 8020f2c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8020f2e:	3303      	adds	r3, #3
 8020f30:	930a      	str	r3, [sp, #40]	@ 0x28
 8020f32:	e70d      	b.n	8020d50 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 8020f34:	d028      	beq.n	8020f88 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x292>
 8020f36:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8020f38:	981f      	ldr	r0, [sp, #124]	@ 0x7c
 8020f3a:	3b01      	subs	r3, #1
 8020f3c:	9d1d      	ldr	r5, [sp, #116]	@ 0x74
 8020f3e:	fb00 5003 	mla	r0, r0, r3, r5
 8020f42:	1400      	asrs	r0, r0, #16
 8020f44:	f53f af21 	bmi.w	8020d8a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8020f48:	3901      	subs	r1, #1
 8020f4a:	4288      	cmp	r0, r1
 8020f4c:	f6bf af1d 	bge.w	8020d8a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8020f50:	9920      	ldr	r1, [sp, #128]	@ 0x80
 8020f52:	981e      	ldr	r0, [sp, #120]	@ 0x78
 8020f54:	fb01 0303 	mla	r3, r1, r3, r0
 8020f58:	141b      	asrs	r3, r3, #16
 8020f5a:	f53f af16 	bmi.w	8020d8a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8020f5e:	3a01      	subs	r2, #1
 8020f60:	4293      	cmp	r3, r2
 8020f62:	f6bf af12 	bge.w	8020d8a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8020f66:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8020f68:	f8dd 9024 	ldr.w	r9, [sp, #36]	@ 0x24
 8020f6c:	1cdf      	adds	r7, r3, #3
 8020f6e:	f8bd a038 	ldrh.w	sl, [sp, #56]	@ 0x38
 8020f72:	f1b9 0f00 	cmp.w	r9, #0
 8020f76:	dc73      	bgt.n	8021060 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36a>
 8020f78:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8020f7a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8020f7c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8020f80:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8020f84:	441a      	add	r2, r3
 8020f86:	920a      	str	r2, [sp, #40]	@ 0x28
 8020f88:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8020f8a:	2b00      	cmp	r3, #0
 8020f8c:	f340 8129 	ble.w	80211e2 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ec>
 8020f90:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8020f94:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8020f96:	ee30 0a04 	vadd.f32	s0, s0, s8
 8020f9a:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8020f9e:	eef0 6a62 	vmov.f32	s13, s5
 8020fa2:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8020fa6:	ee31 1a05 	vadd.f32	s2, s2, s10
 8020faa:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8020fae:	edcd 6a1d 	vstr	s13, [sp, #116]	@ 0x74
 8020fb2:	eef0 6a43 	vmov.f32	s13, s6
 8020fb6:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8020fba:	edcd 6a1e 	vstr	s13, [sp, #120]	@ 0x78
 8020fbe:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8020fc2:	ee61 7a27 	vmul.f32	s15, s2, s15
 8020fc6:	ee77 2a62 	vsub.f32	s5, s14, s5
 8020fca:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8020fce:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8020fd2:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8020fd6:	ee12 2a90 	vmov	r2, s5
 8020fda:	eef0 2a47 	vmov.f32	s5, s14
 8020fde:	fb92 f3f3 	sdiv	r3, r2, r3
 8020fe2:	ee13 2a10 	vmov	r2, s6
 8020fe6:	931f      	str	r3, [sp, #124]	@ 0x7c
 8020fe8:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8020fea:	eeb0 3a67 	vmov.f32	s6, s15
 8020fee:	fb92 f3f3 	sdiv	r3, r2, r3
 8020ff2:	9320      	str	r3, [sp, #128]	@ 0x80
 8020ff4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8020ff6:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8020ff8:	3b01      	subs	r3, #1
 8020ffa:	930d      	str	r3, [sp, #52]	@ 0x34
 8020ffc:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8020ffe:	bf08      	it	eq
 8021000:	4613      	moveq	r3, r2
 8021002:	9309      	str	r3, [sp, #36]	@ 0x24
 8021004:	e696      	b.n	8020d34 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 8021006:	b149      	cbz	r1, 802101c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x326>
 8021008:	5caa      	ldrb	r2, [r5, r2]
 802100a:	4670      	mov	r0, lr
 802100c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8021010:	4422      	add	r2, r4
 8021012:	4677      	mov	r7, lr
 8021014:	e6fb      	b.n	8020e0e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x118>
 8021016:	4670      	mov	r0, lr
 8021018:	4672      	mov	r2, lr
 802101a:	e6f8      	b.n	8020e0e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x118>
 802101c:	4670      	mov	r0, lr
 802101e:	4672      	mov	r2, lr
 8021020:	e7f7      	b.n	8021012 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31c>
 8021022:	f110 0c01 	adds.w	ip, r0, #1
 8021026:	f53f af6a 	bmi.w	8020efe <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 802102a:	4562      	cmp	r2, ip
 802102c:	f6ff af67 	blt.w	8020efe <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 8021030:	f115 0c01 	adds.w	ip, r5, #1
 8021034:	f53f af63 	bmi.w	8020efe <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 8021038:	4567      	cmp	r7, ip
 802103a:	f6ff af60 	blt.w	8020efe <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 802103e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8021040:	b23f      	sxth	r7, r7
 8021042:	b212      	sxth	r2, r2
 8021044:	9002      	str	r0, [sp, #8]
 8021046:	9701      	str	r7, [sp, #4]
 8021048:	9200      	str	r2, [sp, #0]
 802104a:	9811      	ldr	r0, [sp, #68]	@ 0x44
 802104c:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 802104e:	e9cd 1305 	strd	r1, r3, [sp, #20]
 8021052:	e9cd 5803 	strd	r5, r8, [sp, #12]
 8021056:	4623      	mov	r3, r4
 8021058:	4631      	mov	r1, r6
 802105a:	f7ff fd69 	bl	8020b30 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh>
 802105e:	e74e      	b.n	8020efe <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 8021060:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 8021062:	981e      	ldr	r0, [sp, #120]	@ 0x78
 8021064:	f3c2 3103 	ubfx	r1, r2, #12, #4
 8021068:	9d1d      	ldr	r5, [sp, #116]	@ 0x74
 802106a:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 802106c:	1400      	asrs	r0, r0, #16
 802106e:	142d      	asrs	r5, r5, #16
 8021070:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8021072:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 8021076:	f3c3 3303 	ubfx	r3, r3, #12, #4
 802107a:	fb02 5000 	mla	r0, r2, r0, r5
 802107e:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 8021080:	f815 e000 	ldrb.w	lr, [r5, r0]
 8021084:	eb05 0c00 	add.w	ip, r5, r0
 8021088:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 802108c:	eb04 060e 	add.w	r6, r4, lr
 8021090:	2b00      	cmp	r3, #0
 8021092:	f000 8097 	beq.w	80211c4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ce>
 8021096:	f89c 5001 	ldrb.w	r5, [ip, #1]
 802109a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 802109e:	4425      	add	r5, r4
 80210a0:	2900      	cmp	r1, #0
 80210a2:	f000 8098 	beq.w	80211d6 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e0>
 80210a6:	eb0c 0002 	add.w	r0, ip, r2
 80210aa:	f81c 2002 	ldrb.w	r2, [ip, r2]
 80210ae:	7840      	ldrb	r0, [r0, #1]
 80210b0:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80210b4:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80210b8:	4422      	add	r2, r4
 80210ba:	4420      	add	r0, r4
 80210bc:	b29b      	uxth	r3, r3
 80210be:	f814 b00e 	ldrb.w	fp, [r4, lr]
 80210c2:	b289      	uxth	r1, r1
 80210c4:	f895 e000 	ldrb.w	lr, [r5]
 80210c8:	3703      	adds	r7, #3
 80210ca:	f109 39ff 	add.w	r9, r9, #4294967295
 80210ce:	fb03 f801 	mul.w	r8, r3, r1
 80210d2:	011b      	lsls	r3, r3, #4
 80210d4:	ebc8 1101 	rsb	r1, r8, r1, lsl #4
 80210d8:	f5c3 7c80 	rsb	ip, r3, #256	@ 0x100
 80210dc:	eba3 0308 	sub.w	r3, r3, r8
 80210e0:	b289      	uxth	r1, r1
 80210e2:	b29b      	uxth	r3, r3
 80210e4:	ebac 0c01 	sub.w	ip, ip, r1
 80210e8:	fb03 fe0e 	mul.w	lr, r3, lr
 80210ec:	fa1f fc8c 	uxth.w	ip, ip
 80210f0:	930f      	str	r3, [sp, #60]	@ 0x3c
 80210f2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80210f4:	fb0c ee0b 	mla	lr, ip, fp, lr
 80210f8:	f892 b000 	ldrb.w	fp, [r2]
 80210fc:	fb01 ee0b 	mla	lr, r1, fp, lr
 8021100:	f890 b000 	ldrb.w	fp, [r0]
 8021104:	fb08 ee0b 	mla	lr, r8, fp, lr
 8021108:	f817 bc06 	ldrb.w	fp, [r7, #-6]
 802110c:	fb1b fb03 	smulbb	fp, fp, r3
 8021110:	f3ce 2e07 	ubfx	lr, lr, #8, #8
 8021114:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8021116:	fb0e be0a 	mla	lr, lr, sl, fp
 802111a:	fa1f fe8e 	uxth.w	lr, lr
 802111e:	f10e 0b01 	add.w	fp, lr, #1
 8021122:	eb0b 2e1e 	add.w	lr, fp, lr, lsr #8
 8021126:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 802112a:	f807 ec06 	strb.w	lr, [r7, #-6]
 802112e:	f895 e001 	ldrb.w	lr, [r5, #1]
 8021132:	f896 b001 	ldrb.w	fp, [r6, #1]
 8021136:	fb03 fe0e 	mul.w	lr, r3, lr
 802113a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 802113c:	fb0c ee0b 	mla	lr, ip, fp, lr
 8021140:	f892 b001 	ldrb.w	fp, [r2, #1]
 8021144:	fb01 ee0b 	mla	lr, r1, fp, lr
 8021148:	f890 b001 	ldrb.w	fp, [r0, #1]
 802114c:	fb08 ee0b 	mla	lr, r8, fp, lr
 8021150:	f817 bc05 	ldrb.w	fp, [r7, #-5]
 8021154:	fb1b fb03 	smulbb	fp, fp, r3
 8021158:	f3ce 2e07 	ubfx	lr, lr, #8, #8
 802115c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 802115e:	fb0e be0a 	mla	lr, lr, sl, fp
 8021162:	fa1f fe8e 	uxth.w	lr, lr
 8021166:	f10e 0b01 	add.w	fp, lr, #1
 802116a:	eb0b 2e1e 	add.w	lr, fp, lr, lsr #8
 802116e:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8021172:	f807 ec05 	strb.w	lr, [r7, #-5]
 8021176:	78ad      	ldrb	r5, [r5, #2]
 8021178:	78b6      	ldrb	r6, [r6, #2]
 802117a:	436b      	muls	r3, r5
 802117c:	7895      	ldrb	r5, [r2, #2]
 802117e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8021180:	fb0c 3306 	mla	r3, ip, r6, r3
 8021184:	fb01 3305 	mla	r3, r1, r5, r3
 8021188:	7885      	ldrb	r5, [r0, #2]
 802118a:	fb08 3805 	mla	r8, r8, r5, r3
 802118e:	f817 3c04 	ldrb.w	r3, [r7, #-4]
 8021192:	fb13 f302 	smulbb	r3, r3, r2
 8021196:	f3c8 2807 	ubfx	r8, r8, #8, #8
 802119a:	9a1f      	ldr	r2, [sp, #124]	@ 0x7c
 802119c:	fb08 380a 	mla	r8, r8, sl, r3
 80211a0:	fa1f f888 	uxth.w	r8, r8
 80211a4:	f108 0301 	add.w	r3, r8, #1
 80211a8:	eb03 2818 	add.w	r8, r3, r8, lsr #8
 80211ac:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80211ae:	4413      	add	r3, r2
 80211b0:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80211b2:	ea4f 2828 	mov.w	r8, r8, asr #8
 80211b6:	931d      	str	r3, [sp, #116]	@ 0x74
 80211b8:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 80211ba:	f807 8c04 	strb.w	r8, [r7, #-4]
 80211be:	4413      	add	r3, r2
 80211c0:	931e      	str	r3, [sp, #120]	@ 0x78
 80211c2:	e6d6      	b.n	8020f72 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 80211c4:	b151      	cbz	r1, 80211dc <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e6>
 80211c6:	f81c 2002 	ldrb.w	r2, [ip, r2]
 80211ca:	4630      	mov	r0, r6
 80211cc:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80211d0:	4422      	add	r2, r4
 80211d2:	4635      	mov	r5, r6
 80211d4:	e772      	b.n	80210bc <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c6>
 80211d6:	4630      	mov	r0, r6
 80211d8:	4632      	mov	r2, r6
 80211da:	e76f      	b.n	80210bc <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c6>
 80211dc:	4630      	mov	r0, r6
 80211de:	4632      	mov	r2, r6
 80211e0:	e7f7      	b.n	80211d2 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4dc>
 80211e2:	b013      	add	sp, #76	@ 0x4c
 80211e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080211e8 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh>:
 80211e8:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 80211ec:	784c      	ldrb	r4, [r1, #1]
 80211ee:	f891 a002 	ldrb.w	sl, [r1, #2]
 80211f2:	0224      	lsls	r4, r4, #8
 80211f4:	f9bd e028 	ldrsh.w	lr, [sp, #40]	@ 0x28
 80211f8:	f9bd 902c 	ldrsh.w	r9, [sp, #44]	@ 0x2c
 80211fc:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8021200:	f891 a000 	ldrb.w	sl, [r1]
 8021204:	f89d 0038 	ldrb.w	r0, [sp, #56]	@ 0x38
 8021208:	ea44 040a 	orr.w	r4, r4, sl
 802120c:	f89d 603c 	ldrb.w	r6, [sp, #60]	@ 0x3c
 8021210:	e9dd c50c 	ldrd	ip, r5, [sp, #48]	@ 0x30
 8021214:	9401      	str	r4, [sp, #4]
 8021216:	fb05 c70e 	mla	r7, r5, lr, ip
 802121a:	2d00      	cmp	r5, #0
 802121c:	eb02 0807 	add.w	r8, r2, r7
 8021220:	db72      	blt.n	8021308 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x120>
 8021222:	45a9      	cmp	r9, r5
 8021224:	dd70      	ble.n	8021308 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x120>
 8021226:	f1bc 0f00 	cmp.w	ip, #0
 802122a:	db6b      	blt.n	8021304 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x11c>
 802122c:	45e6      	cmp	lr, ip
 802122e:	dd69      	ble.n	8021304 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x11c>
 8021230:	5dd7      	ldrb	r7, [r2, r7]
 8021232:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8021236:	441f      	add	r7, r3
 8021238:	f11c 0201 	adds.w	r2, ip, #1
 802123c:	d467      	bmi.n	802130e <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x126>
 802123e:	4596      	cmp	lr, r2
 8021240:	dd65      	ble.n	802130e <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x126>
 8021242:	2800      	cmp	r0, #0
 8021244:	d063      	beq.n	802130e <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x126>
 8021246:	f898 4001 	ldrb.w	r4, [r8, #1]
 802124a:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 802124e:	441c      	add	r4, r3
 8021250:	3501      	adds	r5, #1
 8021252:	d460      	bmi.n	8021316 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x12e>
 8021254:	45a9      	cmp	r9, r5
 8021256:	dd5e      	ble.n	8021316 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x12e>
 8021258:	2e00      	cmp	r6, #0
 802125a:	d05c      	beq.n	8021316 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x12e>
 802125c:	f1bc 0f00 	cmp.w	ip, #0
 8021260:	db57      	blt.n	8021312 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x12a>
 8021262:	45e6      	cmp	lr, ip
 8021264:	dd55      	ble.n	8021312 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x12a>
 8021266:	f818 500e 	ldrb.w	r5, [r8, lr]
 802126a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 802126e:	441d      	add	r5, r3
 8021270:	f11c 0201 	adds.w	r2, ip, #1
 8021274:	d452      	bmi.n	802131c <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x134>
 8021276:	4596      	cmp	lr, r2
 8021278:	dd50      	ble.n	802131c <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x134>
 802127a:	2800      	cmp	r0, #0
 802127c:	d04e      	beq.n	802131c <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x134>
 802127e:	44c6      	add	lr, r8
 8021280:	f89e 2001 	ldrb.w	r2, [lr, #1]
 8021284:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8021288:	4413      	add	r3, r2
 802128a:	b280      	uxth	r0, r0
 802128c:	f897 8000 	ldrb.w	r8, [r7]
 8021290:	b2b2      	uxth	r2, r6
 8021292:	fb00 f602 	mul.w	r6, r0, r2
 8021296:	0100      	lsls	r0, r0, #4
 8021298:	ebc6 1202 	rsb	r2, r6, r2, lsl #4
 802129c:	f5c0 7e80 	rsb	lr, r0, #256	@ 0x100
 80212a0:	1b80      	subs	r0, r0, r6
 80212a2:	fa1f fc82 	uxth.w	ip, r2
 80212a6:	b282      	uxth	r2, r0
 80212a8:	7820      	ldrb	r0, [r4, #0]
 80212aa:	ebae 0e0c 	sub.w	lr, lr, ip
 80212ae:	4350      	muls	r0, r2
 80212b0:	fa1f fe8e 	uxth.w	lr, lr
 80212b4:	fb0e 0808 	mla	r8, lr, r8, r0
 80212b8:	7828      	ldrb	r0, [r5, #0]
 80212ba:	fb0c 8800 	mla	r8, ip, r0, r8
 80212be:	7818      	ldrb	r0, [r3, #0]
 80212c0:	fb06 8000 	mla	r0, r6, r0, r8
 80212c4:	1200      	asrs	r0, r0, #8
 80212c6:	7008      	strb	r0, [r1, #0]
 80212c8:	7860      	ldrb	r0, [r4, #1]
 80212ca:	f897 8001 	ldrb.w	r8, [r7, #1]
 80212ce:	4350      	muls	r0, r2
 80212d0:	fb0e 0808 	mla	r8, lr, r8, r0
 80212d4:	7868      	ldrb	r0, [r5, #1]
 80212d6:	fb0c 8800 	mla	r8, ip, r0, r8
 80212da:	7858      	ldrb	r0, [r3, #1]
 80212dc:	fb06 8000 	mla	r0, r6, r0, r8
 80212e0:	1200      	asrs	r0, r0, #8
 80212e2:	7048      	strb	r0, [r1, #1]
 80212e4:	78a0      	ldrb	r0, [r4, #2]
 80212e6:	78bf      	ldrb	r7, [r7, #2]
 80212e8:	4350      	muls	r0, r2
 80212ea:	78aa      	ldrb	r2, [r5, #2]
 80212ec:	fb0e 0007 	mla	r0, lr, r7, r0
 80212f0:	fb0c 0c02 	mla	ip, ip, r2, r0
 80212f4:	789a      	ldrb	r2, [r3, #2]
 80212f6:	fb06 c202 	mla	r2, r6, r2, ip
 80212fa:	1212      	asrs	r2, r2, #8
 80212fc:	708a      	strb	r2, [r1, #2]
 80212fe:	b002      	add	sp, #8
 8021300:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8021304:	af01      	add	r7, sp, #4
 8021306:	e797      	b.n	8021238 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x50>
 8021308:	ac01      	add	r4, sp, #4
 802130a:	4627      	mov	r7, r4
 802130c:	e7a0      	b.n	8021250 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x68>
 802130e:	ac01      	add	r4, sp, #4
 8021310:	e79e      	b.n	8021250 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x68>
 8021312:	ad01      	add	r5, sp, #4
 8021314:	e7ac      	b.n	8021270 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x88>
 8021316:	ab01      	add	r3, sp, #4
 8021318:	461d      	mov	r5, r3
 802131a:	e7b6      	b.n	802128a <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xa2>
 802131c:	ab01      	add	r3, sp, #4
 802131e:	e7b4      	b.n	802128a <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xa2>

08021320 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8021320:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021324:	b08d      	sub	sp, #52	@ 0x34
 8021326:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 802132a:	e9cd 1209 	strd	r1, r2, [sp, #36]	@ 0x24
 802132e:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8021330:	900b      	str	r0, [sp, #44]	@ 0x2c
 8021332:	9306      	str	r3, [sp, #24]
 8021334:	6850      	ldr	r0, [r2, #4]
 8021336:	6812      	ldr	r2, [r2, #0]
 8021338:	9c17      	ldr	r4, [sp, #92]	@ 0x5c
 802133a:	e9dd 131c 	ldrd	r1, r3, [sp, #112]	@ 0x70
 802133e:	fb00 1303 	mla	r3, r0, r3, r1
 8021342:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8021346:	18d3      	adds	r3, r2, r3
 8021348:	9307      	str	r3, [sp, #28]
 802134a:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 802134c:	681b      	ldr	r3, [r3, #0]
 802134e:	9308      	str	r3, [sp, #32]
 8021350:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8021352:	685d      	ldr	r5, [r3, #4]
 8021354:	3504      	adds	r5, #4
 8021356:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8021358:	2b00      	cmp	r3, #0
 802135a:	dc03      	bgt.n	8021364 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44>
 802135c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802135e:	2b00      	cmp	r3, #0
 8021360:	f340 81e6 	ble.w	8021730 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x410>
 8021364:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8021366:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 802136a:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 802136e:	1e48      	subs	r0, r1, #1
 8021370:	1e56      	subs	r6, r2, #1
 8021372:	9b06      	ldr	r3, [sp, #24]
 8021374:	2b00      	cmp	r3, #0
 8021376:	f340 80bd 	ble.w	80214f4 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d4>
 802137a:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 802137c:	1427      	asrs	r7, r4, #16
 802137e:	ea4f 4323 	mov.w	r3, r3, asr #16
 8021382:	d406      	bmi.n	8021392 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8021384:	4287      	cmp	r7, r0
 8021386:	da04      	bge.n	8021392 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8021388:	2b00      	cmp	r3, #0
 802138a:	db02      	blt.n	8021392 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 802138c:	42b3      	cmp	r3, r6
 802138e:	f2c0 80b2 	blt.w	80214f6 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d6>
 8021392:	3701      	adds	r7, #1
 8021394:	f100 80a1 	bmi.w	80214da <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 8021398:	42b9      	cmp	r1, r7
 802139a:	f2c0 809e 	blt.w	80214da <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 802139e:	3301      	adds	r3, #1
 80213a0:	f100 809b 	bmi.w	80214da <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 80213a4:	429a      	cmp	r2, r3
 80213a6:	f2c0 8098 	blt.w	80214da <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 80213aa:	e9dd b606 	ldrd	fp, r6, [sp, #24]
 80213ae:	f1bb 0f00 	cmp.w	fp, #0
 80213b2:	f340 80bf 	ble.w	8021534 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 80213b6:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 80213b8:	981e      	ldr	r0, [sp, #120]	@ 0x78
 80213ba:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 80213bc:	f3c2 3103 	ubfx	r1, r2, #12, #4
 80213c0:	f8d0 c00c 	ldr.w	ip, [r0, #12]
 80213c4:	1420      	asrs	r0, r4, #16
 80213c6:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 80213c8:	ea4f 4723 	mov.w	r7, r3, asr #16
 80213cc:	f3c4 3303 	ubfx	r3, r4, #12, #4
 80213d0:	6892      	ldr	r2, [r2, #8]
 80213d2:	f100 8103 	bmi.w	80215dc <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2bc>
 80213d6:	f102 3eff 	add.w	lr, r2, #4294967295
 80213da:	4570      	cmp	r0, lr
 80213dc:	f280 80fe 	bge.w	80215dc <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2bc>
 80213e0:	2f00      	cmp	r7, #0
 80213e2:	f2c0 80fb 	blt.w	80215dc <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2bc>
 80213e6:	f10c 3eff 	add.w	lr, ip, #4294967295
 80213ea:	4577      	cmp	r7, lr
 80213ec:	f280 80f6 	bge.w	80215dc <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2bc>
 80213f0:	b212      	sxth	r2, r2
 80213f2:	fb07 0002 	mla	r0, r7, r2, r0
 80213f6:	9f08      	ldr	r7, [sp, #32]
 80213f8:	f817 8000 	ldrb.w	r8, [r7, r0]
 80213fc:	eb07 0e00 	add.w	lr, r7, r0
 8021400:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 8021404:	eb05 0c08 	add.w	ip, r5, r8
 8021408:	2b00      	cmp	r3, #0
 802140a:	f000 80d8 	beq.w	80215be <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29e>
 802140e:	f89e 7001 	ldrb.w	r7, [lr, #1]
 8021412:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8021416:	442f      	add	r7, r5
 8021418:	2900      	cmp	r1, #0
 802141a:	f000 80d9 	beq.w	80215d0 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 802141e:	eb0e 0002 	add.w	r0, lr, r2
 8021422:	f81e 2002 	ldrb.w	r2, [lr, r2]
 8021426:	7840      	ldrb	r0, [r0, #1]
 8021428:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 802142c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8021430:	442a      	add	r2, r5
 8021432:	4428      	add	r0, r5
 8021434:	b29b      	uxth	r3, r3
 8021436:	f815 a008 	ldrb.w	sl, [r5, r8]
 802143a:	b289      	uxth	r1, r1
 802143c:	f897 8000 	ldrb.w	r8, [r7]
 8021440:	fb03 f901 	mul.w	r9, r3, r1
 8021444:	011b      	lsls	r3, r3, #4
 8021446:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 802144a:	f5c3 7e80 	rsb	lr, r3, #256	@ 0x100
 802144e:	eba3 0309 	sub.w	r3, r3, r9
 8021452:	b289      	uxth	r1, r1
 8021454:	b29b      	uxth	r3, r3
 8021456:	ebae 0e01 	sub.w	lr, lr, r1
 802145a:	fb03 f808 	mul.w	r8, r3, r8
 802145e:	fa1f fe8e 	uxth.w	lr, lr
 8021462:	fb0e 880a 	mla	r8, lr, sl, r8
 8021466:	f892 a000 	ldrb.w	sl, [r2]
 802146a:	fb01 880a 	mla	r8, r1, sl, r8
 802146e:	f890 a000 	ldrb.w	sl, [r0]
 8021472:	fb09 880a 	mla	r8, r9, sl, r8
 8021476:	ea4f 2828 	mov.w	r8, r8, asr #8
 802147a:	f886 8000 	strb.w	r8, [r6]
 802147e:	f897 8001 	ldrb.w	r8, [r7, #1]
 8021482:	f89c a001 	ldrb.w	sl, [ip, #1]
 8021486:	fb03 f808 	mul.w	r8, r3, r8
 802148a:	fb0e 880a 	mla	r8, lr, sl, r8
 802148e:	f892 a001 	ldrb.w	sl, [r2, #1]
 8021492:	fb01 880a 	mla	r8, r1, sl, r8
 8021496:	f890 a001 	ldrb.w	sl, [r0, #1]
 802149a:	fb09 880a 	mla	r8, r9, sl, r8
 802149e:	ea4f 2828 	mov.w	r8, r8, asr #8
 80214a2:	f886 8001 	strb.w	r8, [r6, #1]
 80214a6:	78bf      	ldrb	r7, [r7, #2]
 80214a8:	f89c c002 	ldrb.w	ip, [ip, #2]
 80214ac:	437b      	muls	r3, r7
 80214ae:	7892      	ldrb	r2, [r2, #2]
 80214b0:	fb0e 330c 	mla	r3, lr, ip, r3
 80214b4:	fb01 3102 	mla	r1, r1, r2, r3
 80214b8:	7882      	ldrb	r2, [r0, #2]
 80214ba:	fb09 1902 	mla	r9, r9, r2, r1
 80214be:	ea4f 2929 	mov.w	r9, r9, asr #8
 80214c2:	f886 9002 	strb.w	r9, [r6, #2]
 80214c6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80214c8:	3603      	adds	r6, #3
 80214ca:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80214cc:	f10b 3bff 	add.w	fp, fp, #4294967295
 80214d0:	441c      	add	r4, r3
 80214d2:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 80214d4:	4413      	add	r3, r2
 80214d6:	9318      	str	r3, [sp, #96]	@ 0x60
 80214d8:	e769      	b.n	80213ae <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 80214da:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80214dc:	9f1a      	ldr	r7, [sp, #104]	@ 0x68
 80214de:	441c      	add	r4, r3
 80214e0:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 80214e2:	443b      	add	r3, r7
 80214e4:	9318      	str	r3, [sp, #96]	@ 0x60
 80214e6:	9b06      	ldr	r3, [sp, #24]
 80214e8:	3b01      	subs	r3, #1
 80214ea:	9306      	str	r3, [sp, #24]
 80214ec:	9b07      	ldr	r3, [sp, #28]
 80214ee:	3303      	adds	r3, #3
 80214f0:	9307      	str	r3, [sp, #28]
 80214f2:	e73e      	b.n	8021372 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 80214f4:	d026      	beq.n	8021544 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x224>
 80214f6:	9b06      	ldr	r3, [sp, #24]
 80214f8:	9819      	ldr	r0, [sp, #100]	@ 0x64
 80214fa:	3b01      	subs	r3, #1
 80214fc:	fb00 4003 	mla	r0, r0, r3, r4
 8021500:	1400      	asrs	r0, r0, #16
 8021502:	f53f af52 	bmi.w	80213aa <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 8021506:	3901      	subs	r1, #1
 8021508:	4288      	cmp	r0, r1
 802150a:	f6bf af4e 	bge.w	80213aa <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 802150e:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8021510:	9818      	ldr	r0, [sp, #96]	@ 0x60
 8021512:	fb01 0303 	mla	r3, r1, r3, r0
 8021516:	141b      	asrs	r3, r3, #16
 8021518:	f53f af47 	bmi.w	80213aa <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 802151c:	3a01      	subs	r2, #1
 802151e:	4293      	cmp	r3, r2
 8021520:	f6bf af43 	bge.w	80213aa <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 8021524:	9b07      	ldr	r3, [sp, #28]
 8021526:	f8dd a018 	ldr.w	sl, [sp, #24]
 802152a:	f103 0803 	add.w	r8, r3, #3
 802152e:	f1ba 0f00 	cmp.w	sl, #0
 8021532:	dc71      	bgt.n	8021618 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f8>
 8021534:	9b06      	ldr	r3, [sp, #24]
 8021536:	9a07      	ldr	r2, [sp, #28]
 8021538:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 802153c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8021540:	441a      	add	r2, r3
 8021542:	9207      	str	r2, [sp, #28]
 8021544:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8021546:	2b00      	cmp	r3, #0
 8021548:	f340 80f2 	ble.w	8021730 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x410>
 802154c:	ee30 0a04 	vadd.f32	s0, s0, s8
 8021550:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8021552:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8021556:	eeb0 6a62 	vmov.f32	s12, s5
 802155a:	eec6 7a80 	vdiv.f32	s15, s13, s0
 802155e:	ee31 1a05 	vadd.f32	s2, s2, s10
 8021562:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8021566:	ee16 4a10 	vmov	r4, s12
 802156a:	eeb0 6a43 	vmov.f32	s12, s6
 802156e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8021572:	ed8d 6a18 	vstr	s12, [sp, #96]	@ 0x60
 8021576:	ee20 7aa7 	vmul.f32	s14, s1, s15
 802157a:	ee61 7a27 	vmul.f32	s15, s2, s15
 802157e:	ee77 2a62 	vsub.f32	s5, s14, s5
 8021582:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8021586:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 802158a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 802158e:	ee12 2a90 	vmov	r2, s5
 8021592:	eef0 2a47 	vmov.f32	s5, s14
 8021596:	fb92 f3f3 	sdiv	r3, r2, r3
 802159a:	ee13 2a10 	vmov	r2, s6
 802159e:	9319      	str	r3, [sp, #100]	@ 0x64
 80215a0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80215a2:	eeb0 3a67 	vmov.f32	s6, s15
 80215a6:	fb92 f3f3 	sdiv	r3, r2, r3
 80215aa:	931a      	str	r3, [sp, #104]	@ 0x68
 80215ac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80215ae:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80215b0:	3b01      	subs	r3, #1
 80215b2:	9309      	str	r3, [sp, #36]	@ 0x24
 80215b4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80215b6:	bf08      	it	eq
 80215b8:	4613      	moveq	r3, r2
 80215ba:	9306      	str	r3, [sp, #24]
 80215bc:	e6cb      	b.n	8021356 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36>
 80215be:	b151      	cbz	r1, 80215d6 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b6>
 80215c0:	f81e 2002 	ldrb.w	r2, [lr, r2]
 80215c4:	4660      	mov	r0, ip
 80215c6:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80215ca:	442a      	add	r2, r5
 80215cc:	4667      	mov	r7, ip
 80215ce:	e731      	b.n	8021434 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x114>
 80215d0:	4660      	mov	r0, ip
 80215d2:	4662      	mov	r2, ip
 80215d4:	e72e      	b.n	8021434 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x114>
 80215d6:	4660      	mov	r0, ip
 80215d8:	4662      	mov	r2, ip
 80215da:	e7f7      	b.n	80215cc <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ac>
 80215dc:	f110 0e01 	adds.w	lr, r0, #1
 80215e0:	f53f af71 	bmi.w	80214c6 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 80215e4:	4572      	cmp	r2, lr
 80215e6:	f6ff af6e 	blt.w	80214c6 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 80215ea:	f117 0e01 	adds.w	lr, r7, #1
 80215ee:	f53f af6a 	bmi.w	80214c6 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 80215f2:	45f4      	cmp	ip, lr
 80215f4:	f6ff af67 	blt.w	80214c6 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 80215f8:	b212      	sxth	r2, r2
 80215fa:	e9cd 3104 	strd	r3, r1, [sp, #16]
 80215fe:	fa0f f38c 	sxth.w	r3, ip
 8021602:	9200      	str	r2, [sp, #0]
 8021604:	4631      	mov	r1, r6
 8021606:	9a08      	ldr	r2, [sp, #32]
 8021608:	9301      	str	r3, [sp, #4]
 802160a:	462b      	mov	r3, r5
 802160c:	e9cd 0702 	strd	r0, r7, [sp, #8]
 8021610:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8021612:	f7ff fde9 	bl	80211e8 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh>
 8021616:	e756      	b.n	80214c6 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 8021618:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 802161a:	1426      	asrs	r6, r4, #16
 802161c:	9818      	ldr	r0, [sp, #96]	@ 0x60
 802161e:	f3c4 3303 	ubfx	r3, r4, #12, #4
 8021622:	f3c2 3103 	ubfx	r1, r2, #12, #4
 8021626:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 8021628:	1400      	asrs	r0, r0, #16
 802162a:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 802162e:	fb02 6000 	mla	r0, r2, r0, r6
 8021632:	9e08      	ldr	r6, [sp, #32]
 8021634:	f816 e000 	ldrb.w	lr, [r6, r0]
 8021638:	eb06 0c00 	add.w	ip, r6, r0
 802163c:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 8021640:	eb05 070e 	add.w	r7, r5, lr
 8021644:	2b00      	cmp	r3, #0
 8021646:	d064      	beq.n	8021712 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f2>
 8021648:	f89c 6001 	ldrb.w	r6, [ip, #1]
 802164c:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8021650:	442e      	add	r6, r5
 8021652:	2900      	cmp	r1, #0
 8021654:	d066      	beq.n	8021724 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x404>
 8021656:	eb0c 0002 	add.w	r0, ip, r2
 802165a:	f81c 2002 	ldrb.w	r2, [ip, r2]
 802165e:	7840      	ldrb	r0, [r0, #1]
 8021660:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8021664:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8021668:	442a      	add	r2, r5
 802166a:	4428      	add	r0, r5
 802166c:	b29b      	uxth	r3, r3
 802166e:	f815 b00e 	ldrb.w	fp, [r5, lr]
 8021672:	b289      	uxth	r1, r1
 8021674:	f896 e000 	ldrb.w	lr, [r6]
 8021678:	f108 0803 	add.w	r8, r8, #3
 802167c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8021680:	fb03 f901 	mul.w	r9, r3, r1
 8021684:	011b      	lsls	r3, r3, #4
 8021686:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 802168a:	f5c3 7c80 	rsb	ip, r3, #256	@ 0x100
 802168e:	eba3 0309 	sub.w	r3, r3, r9
 8021692:	b289      	uxth	r1, r1
 8021694:	b29b      	uxth	r3, r3
 8021696:	ebac 0c01 	sub.w	ip, ip, r1
 802169a:	fb03 fe0e 	mul.w	lr, r3, lr
 802169e:	fa1f fc8c 	uxth.w	ip, ip
 80216a2:	fb0c ee0b 	mla	lr, ip, fp, lr
 80216a6:	f892 b000 	ldrb.w	fp, [r2]
 80216aa:	fb01 ee0b 	mla	lr, r1, fp, lr
 80216ae:	f890 b000 	ldrb.w	fp, [r0]
 80216b2:	fb09 ee0b 	mla	lr, r9, fp, lr
 80216b6:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 80216ba:	f808 ec06 	strb.w	lr, [r8, #-6]
 80216be:	f896 e001 	ldrb.w	lr, [r6, #1]
 80216c2:	f897 b001 	ldrb.w	fp, [r7, #1]
 80216c6:	fb03 fe0e 	mul.w	lr, r3, lr
 80216ca:	fb0c ee0b 	mla	lr, ip, fp, lr
 80216ce:	f892 b001 	ldrb.w	fp, [r2, #1]
 80216d2:	fb01 ee0b 	mla	lr, r1, fp, lr
 80216d6:	f890 b001 	ldrb.w	fp, [r0, #1]
 80216da:	fb09 ee0b 	mla	lr, r9, fp, lr
 80216de:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 80216e2:	f808 ec05 	strb.w	lr, [r8, #-5]
 80216e6:	78b6      	ldrb	r6, [r6, #2]
 80216e8:	78bf      	ldrb	r7, [r7, #2]
 80216ea:	4373      	muls	r3, r6
 80216ec:	7896      	ldrb	r6, [r2, #2]
 80216ee:	7882      	ldrb	r2, [r0, #2]
 80216f0:	fb0c 3307 	mla	r3, ip, r7, r3
 80216f4:	fb01 3306 	mla	r3, r1, r6, r3
 80216f8:	fb09 3902 	mla	r9, r9, r2, r3
 80216fc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80216fe:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8021700:	441c      	add	r4, r3
 8021702:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8021704:	ea4f 2929 	mov.w	r9, r9, asr #8
 8021708:	4413      	add	r3, r2
 802170a:	f808 9c04 	strb.w	r9, [r8, #-4]
 802170e:	9318      	str	r3, [sp, #96]	@ 0x60
 8021710:	e70d      	b.n	802152e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20e>
 8021712:	b151      	cbz	r1, 802172a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40a>
 8021714:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8021718:	4638      	mov	r0, r7
 802171a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 802171e:	442a      	add	r2, r5
 8021720:	463e      	mov	r6, r7
 8021722:	e7a3      	b.n	802166c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34c>
 8021724:	4638      	mov	r0, r7
 8021726:	463a      	mov	r2, r7
 8021728:	e7a0      	b.n	802166c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34c>
 802172a:	4638      	mov	r0, r7
 802172c:	463a      	mov	r2, r7
 802172e:	e7f7      	b.n	8021720 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x400>
 8021730:	b00d      	add	sp, #52	@ 0x34
 8021732:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08021736 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh>:
 8021736:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802173a:	e9dd 750e 	ldrd	r7, r5, [sp, #56]	@ 0x38
 802173e:	f9bd c030 	ldrsh.w	ip, [sp, #48]	@ 0x30
 8021742:	2d00      	cmp	r5, #0
 8021744:	f9bd 9034 	ldrsh.w	r9, [sp, #52]	@ 0x34
 8021748:	fb05 700c 	mla	r0, r5, ip, r7
 802174c:	f89d 4040 	ldrb.w	r4, [sp, #64]	@ 0x40
 8021750:	f89d e044 	ldrb.w	lr, [sp, #68]	@ 0x44
 8021754:	eb02 0800 	add.w	r8, r2, r0
 8021758:	f2c0 8118 	blt.w	802198c <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x256>
 802175c:	45a9      	cmp	r9, r5
 802175e:	f340 8115 	ble.w	802198c <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x256>
 8021762:	2f00      	cmp	r7, #0
 8021764:	f2c0 8110 	blt.w	8021988 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x252>
 8021768:	45bc      	cmp	ip, r7
 802176a:	f340 810d 	ble.w	8021988 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x252>
 802176e:	5c12      	ldrb	r2, [r2, r0]
 8021770:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 8021774:	1c7a      	adds	r2, r7, #1
 8021776:	f100 810c 	bmi.w	8021992 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x25c>
 802177a:	4594      	cmp	ip, r2
 802177c:	f340 8109 	ble.w	8021992 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x25c>
 8021780:	2c00      	cmp	r4, #0
 8021782:	f000 8108 	beq.w	8021996 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x260>
 8021786:	f898 2001 	ldrb.w	r2, [r8, #1]
 802178a:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 802178e:	3501      	adds	r5, #1
 8021790:	f100 8105 	bmi.w	802199e <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x268>
 8021794:	45a9      	cmp	r9, r5
 8021796:	f340 8102 	ble.w	802199e <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x268>
 802179a:	f1be 0f00 	cmp.w	lr, #0
 802179e:	f000 8101 	beq.w	80219a4 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x26e>
 80217a2:	2f00      	cmp	r7, #0
 80217a4:	f2c0 80f9 	blt.w	802199a <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x264>
 80217a8:	45bc      	cmp	ip, r7
 80217aa:	f340 80f6 	ble.w	802199a <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x264>
 80217ae:	f818 200c 	ldrb.w	r2, [r8, ip]
 80217b2:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 80217b6:	3701      	adds	r7, #1
 80217b8:	f100 80f7 	bmi.w	80219aa <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x274>
 80217bc:	45bc      	cmp	ip, r7
 80217be:	f340 80f4 	ble.w	80219aa <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x274>
 80217c2:	2c00      	cmp	r4, #0
 80217c4:	f000 80f3 	beq.w	80219ae <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x278>
 80217c8:	44c4      	add	ip, r8
 80217ca:	f89c 2001 	ldrb.w	r2, [ip, #1]
 80217ce:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80217d2:	fa1f fc84 	uxth.w	ip, r4
 80217d6:	fa1f f48e 	uxth.w	r4, lr
 80217da:	ea4f 6a10 	mov.w	sl, r0, lsr #24
 80217de:	fb04 fe0c 	mul.w	lr, r4, ip
 80217e2:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 80217e6:	ea4f 6b16 	mov.w	fp, r6, lsr #24
 80217ea:	ebce 1404 	rsb	r4, lr, r4, lsl #4
 80217ee:	ebac 070e 	sub.w	r7, ip, lr
 80217f2:	f5cc 7380 	rsb	r3, ip, #256	@ 0x100
 80217f6:	ea4f 6915 	mov.w	r9, r5, lsr #24
 80217fa:	b2a4      	uxth	r4, r4
 80217fc:	b2bf      	uxth	r7, r7
 80217fe:	1b1b      	subs	r3, r3, r4
 8021800:	ea4f 6812 	mov.w	r8, r2, lsr #24
 8021804:	fb07 fc0a 	mul.w	ip, r7, sl
 8021808:	b29b      	uxth	r3, r3
 802180a:	fb03 cc0b 	mla	ip, r3, fp, ip
 802180e:	9300      	str	r3, [sp, #0]
 8021810:	fb04 cc09 	mla	ip, r4, r9, ip
 8021814:	fb0e cc08 	mla	ip, lr, r8, ip
 8021818:	f3cc 2307 	ubfx	r3, ip, #8, #8
 802181c:	9301      	str	r3, [sp, #4]
 802181e:	2b00      	cmp	r3, #0
 8021820:	f000 80af 	beq.w	8021982 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x24c>
 8021824:	f006 1cff 	and.w	ip, r6, #16711935	@ 0xff00ff
 8021828:	f406 467f 	and.w	r6, r6, #65280	@ 0xff00
 802182c:	fb0b fc0c 	mul.w	ip, fp, ip
 8021830:	fb0b f606 	mul.w	r6, fp, r6
 8021834:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 8021838:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 802183c:	f00b 1bff 	and.w	fp, fp, #16711935	@ 0xff00ff
 8021840:	44dc      	add	ip, fp
 8021842:	f000 1bff 	and.w	fp, r0, #16711935	@ 0xff00ff
 8021846:	f400 407f 	and.w	r0, r0, #65280	@ 0xff00
 802184a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802184e:	fb0a fb0b 	mul.w	fp, sl, fp
 8021852:	fb0a fa00 	mul.w	sl, sl, r0
 8021856:	f00c 13ff 	and.w	r3, ip, #16711935	@ 0xff00ff
 802185a:	f506 7c80 	add.w	ip, r6, #256	@ 0x100
 802185e:	f50a 7080 	add.w	r0, sl, #256	@ 0x100
 8021862:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 8021866:	ea4f 2c1b 	mov.w	ip, fp, lsr #8
 802186a:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 802186e:	eb00 2a1a 	add.w	sl, r0, sl, lsr #8
 8021872:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8021876:	0a36      	lsrs	r6, r6, #8
 8021878:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802187c:	44dc      	add	ip, fp
 802187e:	f005 1bff 	and.w	fp, r5, #16711935	@ 0xff00ff
 8021882:	f405 457f 	and.w	r5, r5, #65280	@ 0xff00
 8021886:	f406 467f 	and.w	r6, r6, #65280	@ 0xff00
 802188a:	fb09 fb0b 	mul.w	fp, r9, fp
 802188e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8021892:	fb09 f905 	mul.w	r9, r9, r5
 8021896:	ea4f 201b 	mov.w	r0, fp, lsr #8
 802189a:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 802189e:	f509 7580 	add.w	r5, r9, #256	@ 0x100
 80218a2:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 80218a6:	f000 10ff 	and.w	r0, r0, #16711935	@ 0xff00ff
 80218aa:	fb0c fc07 	mul.w	ip, ip, r7
 80218ae:	eb05 2919 	add.w	r9, r5, r9, lsr #8
 80218b2:	f002 15ff 	and.w	r5, r2, #16711935	@ 0xff00ff
 80218b6:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 80218ba:	4458      	add	r0, fp
 80218bc:	fb08 f505 	mul.w	r5, r8, r5
 80218c0:	ea4f 2919 	mov.w	r9, r9, lsr #8
 80218c4:	fb08 f802 	mul.w	r8, r8, r2
 80218c8:	0a00      	lsrs	r0, r0, #8
 80218ca:	0a2a      	lsrs	r2, r5, #8
 80218cc:	f105 1501 	add.w	r5, r5, #65537	@ 0x10001
 80218d0:	f000 10ff 	and.w	r0, r0, #16711935	@ 0xff00ff
 80218d4:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
 80218d8:	4415      	add	r5, r2
 80218da:	f508 7280 	add.w	r2, r8, #256	@ 0x100
 80218de:	0a2d      	lsrs	r5, r5, #8
 80218e0:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 80218e4:	9a00      	ldr	r2, [sp, #0]
 80218e6:	f005 15ff 	and.w	r5, r5, #16711935	@ 0xff00ff
 80218ea:	fb03 cc02 	mla	ip, r3, r2, ip
 80218ee:	ea4f 2818 	mov.w	r8, r8, lsr #8
 80218f2:	9b01      	ldr	r3, [sp, #4]
 80218f4:	fb05 c50e 	mla	r5, r5, lr, ip
 80218f8:	f408 487f 	and.w	r8, r8, #65280	@ 0xff00
 80218fc:	fb00 5004 	mla	r0, r0, r4, r5
 8021900:	0a00      	lsrs	r0, r0, #8
 8021902:	f000 15ff 	and.w	r5, r0, #16711935	@ 0xff00ff
 8021906:	f40a 407f 	and.w	r0, sl, #65280	@ 0xff00
 802190a:	4378      	muls	r0, r7
 802190c:	fb02 0006 	mla	r0, r2, r6, r0
 8021910:	fb0e 0e08 	mla	lr, lr, r8, r0
 8021914:	f409 407f 	and.w	r0, r9, #65280	@ 0xff00
 8021918:	fb04 e000 	mla	r0, r4, r0, lr
 802191c:	0a00      	lsrs	r0, r0, #8
 802191e:	f400 407f 	and.w	r0, r0, #65280	@ 0xff00
 8021922:	4328      	orrs	r0, r5
 8021924:	f89d 5048 	ldrb.w	r5, [sp, #72]	@ 0x48
 8021928:	b2ad      	uxth	r5, r5
 802192a:	b2c4      	uxtb	r4, r0
 802192c:	436b      	muls	r3, r5
 802192e:	fb14 f405 	smulbb	r4, r4, r5
 8021932:	1c5a      	adds	r2, r3, #1
 8021934:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8021938:	780b      	ldrb	r3, [r1, #0]
 802193a:	ea6f 2212 	mvn.w	r2, r2, lsr #8
 802193e:	b2d2      	uxtb	r2, r2
 8021940:	fb03 4302 	mla	r3, r3, r2, r4
 8021944:	b29b      	uxth	r3, r3
 8021946:	1c5c      	adds	r4, r3, #1
 8021948:	eb04 2313 	add.w	r3, r4, r3, lsr #8
 802194c:	784c      	ldrb	r4, [r1, #1]
 802194e:	fb14 f402 	smulbb	r4, r4, r2
 8021952:	121b      	asrs	r3, r3, #8
 8021954:	700b      	strb	r3, [r1, #0]
 8021956:	f3c0 2307 	ubfx	r3, r0, #8, #8
 802195a:	fb03 4305 	mla	r3, r3, r5, r4
 802195e:	b29b      	uxth	r3, r3
 8021960:	1c5c      	adds	r4, r3, #1
 8021962:	eb04 2313 	add.w	r3, r4, r3, lsr #8
 8021966:	0c04      	lsrs	r4, r0, #16
 8021968:	7888      	ldrb	r0, [r1, #2]
 802196a:	121b      	asrs	r3, r3, #8
 802196c:	fb10 f002 	smulbb	r0, r0, r2
 8021970:	704b      	strb	r3, [r1, #1]
 8021972:	fb04 0005 	mla	r0, r4, r5, r0
 8021976:	b280      	uxth	r0, r0
 8021978:	1c43      	adds	r3, r0, #1
 802197a:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 802197e:	1200      	asrs	r0, r0, #8
 8021980:	7088      	strb	r0, [r1, #2]
 8021982:	b003      	add	sp, #12
 8021984:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021988:	2600      	movs	r6, #0
 802198a:	e6f3      	b.n	8021774 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x3e>
 802198c:	2000      	movs	r0, #0
 802198e:	4606      	mov	r6, r0
 8021990:	e6fd      	b.n	802178e <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x58>
 8021992:	2000      	movs	r0, #0
 8021994:	e6fb      	b.n	802178e <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x58>
 8021996:	4620      	mov	r0, r4
 8021998:	e6f9      	b.n	802178e <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x58>
 802199a:	2500      	movs	r5, #0
 802199c:	e70b      	b.n	80217b6 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x80>
 802199e:	2200      	movs	r2, #0
 80219a0:	4615      	mov	r5, r2
 80219a2:	e716      	b.n	80217d2 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x9c>
 80219a4:	4672      	mov	r2, lr
 80219a6:	4675      	mov	r5, lr
 80219a8:	e713      	b.n	80217d2 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x9c>
 80219aa:	2200      	movs	r2, #0
 80219ac:	e711      	b.n	80217d2 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x9c>
 80219ae:	4622      	mov	r2, r4
 80219b0:	e70f      	b.n	80217d2 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x9c>

080219b2 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80219b2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80219b6:	b09f      	sub	sp, #124	@ 0x7c
 80219b8:	921b      	str	r2, [sp, #108]	@ 0x6c
 80219ba:	9309      	str	r3, [sp, #36]	@ 0x24
 80219bc:	9a2d      	ldr	r2, [sp, #180]	@ 0xb4
 80219be:	f89d 30c4 	ldrb.w	r3, [sp, #196]	@ 0xc4
 80219c2:	901d      	str	r0, [sp, #116]	@ 0x74
 80219c4:	931c      	str	r3, [sp, #112]	@ 0x70
 80219c6:	6850      	ldr	r0, [r2, #4]
 80219c8:	9119      	str	r1, [sp, #100]	@ 0x64
 80219ca:	6812      	ldr	r2, [r2, #0]
 80219cc:	9d2a      	ldr	r5, [sp, #168]	@ 0xa8
 80219ce:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	@ 0xb8
 80219d2:	fb00 1303 	mla	r3, r0, r3, r1
 80219d6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80219da:	18d3      	adds	r3, r2, r3
 80219dc:	930c      	str	r3, [sp, #48]	@ 0x30
 80219de:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 80219e0:	681b      	ldr	r3, [r3, #0]
 80219e2:	9312      	str	r3, [sp, #72]	@ 0x48
 80219e4:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 80219e6:	685e      	ldr	r6, [r3, #4]
 80219e8:	f8bd 3070 	ldrh.w	r3, [sp, #112]	@ 0x70
 80219ec:	3604      	adds	r6, #4
 80219ee:	930d      	str	r3, [sp, #52]	@ 0x34
 80219f0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80219f2:	2b00      	cmp	r3, #0
 80219f4:	dc03      	bgt.n	80219fe <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 80219f6:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 80219f8:	2b00      	cmp	r3, #0
 80219fa:	f340 8378 	ble.w	80220ee <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x73c>
 80219fe:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 8021a00:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8021a04:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8021a08:	1e48      	subs	r0, r1, #1
 8021a0a:	1e57      	subs	r7, r2, #1
 8021a0c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8021a0e:	2b00      	cmp	r3, #0
 8021a10:	f340 818c 	ble.w	8021d2c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37a>
 8021a14:	9c29      	ldr	r4, [sp, #164]	@ 0xa4
 8021a16:	142b      	asrs	r3, r5, #16
 8021a18:	ea5f 4c24 	movs.w	ip, r4, asr #16
 8021a1c:	d406      	bmi.n	8021a2c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 8021a1e:	4584      	cmp	ip, r0
 8021a20:	da04      	bge.n	8021a2c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 8021a22:	2b00      	cmp	r3, #0
 8021a24:	db02      	blt.n	8021a2c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 8021a26:	42bb      	cmp	r3, r7
 8021a28:	f2c0 8181 	blt.w	8021d2e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37c>
 8021a2c:	f11c 0c01 	adds.w	ip, ip, #1
 8021a30:	f100 816f 	bmi.w	8021d12 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x360>
 8021a34:	4561      	cmp	r1, ip
 8021a36:	f2c0 816c 	blt.w	8021d12 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x360>
 8021a3a:	3301      	adds	r3, #1
 8021a3c:	f100 8169 	bmi.w	8021d12 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x360>
 8021a40:	429a      	cmp	r2, r3
 8021a42:	f2c0 8166 	blt.w	8021d12 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x360>
 8021a46:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8021a48:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
 8021a4a:	931a      	str	r3, [sp, #104]	@ 0x68
 8021a4c:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 8021a4e:	2b00      	cmp	r3, #0
 8021a50:	f340 818c 	ble.w	8021d6c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ba>
 8021a54:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 8021a56:	ea4f 4c25 	mov.w	ip, r5, asr #16
 8021a5a:	f3c5 3103 	ubfx	r1, r5, #12, #4
 8021a5e:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8021a62:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 8021a64:	e9d3 0e02 	ldrd	r0, lr, [r3, #8]
 8021a68:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 8021a6a:	141b      	asrs	r3, r3, #16
 8021a6c:	f100 81d0 	bmi.w	8021e10 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 8021a70:	f100 38ff 	add.w	r8, r0, #4294967295
 8021a74:	4543      	cmp	r3, r8
 8021a76:	f280 81cb 	bge.w	8021e10 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 8021a7a:	f1bc 0f00 	cmp.w	ip, #0
 8021a7e:	f2c0 81c7 	blt.w	8021e10 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 8021a82:	f10e 38ff 	add.w	r8, lr, #4294967295
 8021a86:	45c4      	cmp	ip, r8
 8021a88:	f280 81c2 	bge.w	8021e10 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 8021a8c:	b200      	sxth	r0, r0
 8021a8e:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 8021a90:	fb0c 3300 	mla	r3, ip, r0, r3
 8021a94:	eb04 0803 	add.w	r8, r4, r3
 8021a98:	5ce3      	ldrb	r3, [r4, r3]
 8021a9a:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8021a9e:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 8021aa2:	2a00      	cmp	r2, #0
 8021aa4:	f000 81a9 	beq.w	8021dfa <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x448>
 8021aa8:	f898 c001 	ldrb.w	ip, [r8, #1]
 8021aac:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
 8021ab0:	940e      	str	r4, [sp, #56]	@ 0x38
 8021ab2:	0e24      	lsrs	r4, r4, #24
 8021ab4:	9415      	str	r4, [sp, #84]	@ 0x54
 8021ab6:	b179      	cbz	r1, 8021ad8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 8021ab8:	eb08 0c00 	add.w	ip, r8, r0
 8021abc:	f818 0000 	ldrb.w	r0, [r8, r0]
 8021ac0:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 8021ac4:	900a      	str	r0, [sp, #40]	@ 0x28
 8021ac6:	0e00      	lsrs	r0, r0, #24
 8021ac8:	9013      	str	r0, [sp, #76]	@ 0x4c
 8021aca:	f89c 0001 	ldrb.w	r0, [ip, #1]
 8021ace:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 8021ad2:	900f      	str	r0, [sp, #60]	@ 0x3c
 8021ad4:	0e00      	lsrs	r0, r0, #24
 8021ad6:	9016      	str	r0, [sp, #88]	@ 0x58
 8021ad8:	b292      	uxth	r2, r2
 8021ada:	9815      	ldr	r0, [sp, #84]	@ 0x54
 8021adc:	b289      	uxth	r1, r1
 8021ade:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8021ae0:	fb02 f901 	mul.w	r9, r2, r1
 8021ae4:	0112      	lsls	r2, r2, #4
 8021ae6:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 8021aea:	eba2 0809 	sub.w	r8, r2, r9
 8021aee:	f5c2 7280 	rsb	r2, r2, #256	@ 0x100
 8021af2:	b289      	uxth	r1, r1
 8021af4:	fa1f f888 	uxth.w	r8, r8
 8021af8:	1a52      	subs	r2, r2, r1
 8021afa:	fb08 f000 	mul.w	r0, r8, r0
 8021afe:	b292      	uxth	r2, r2
 8021b00:	fb02 000e 	mla	r0, r2, lr, r0
 8021b04:	fb01 0004 	mla	r0, r1, r4, r0
 8021b08:	9c16      	ldr	r4, [sp, #88]	@ 0x58
 8021b0a:	fb09 0004 	mla	r0, r9, r4, r0
 8021b0e:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8021b12:	2800      	cmp	r0, #0
 8021b14:	f000 80f2 	beq.w	8021cfc <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 8021b18:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 8021b1c:	d01b      	beq.n	8021b56 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a4>
 8021b1e:	f003 1aff 	and.w	sl, r3, #16711935	@ 0xff00ff
 8021b22:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8021b26:	fb0e fa0a 	mul.w	sl, lr, sl
 8021b2a:	fb0e fe03 	mul.w	lr, lr, r3
 8021b2e:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8021b32:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 8021b36:	f50e 7c80 	add.w	ip, lr, #256	@ 0x100
 8021b3a:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 8021b3e:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 8021b42:	4453      	add	r3, sl
 8021b44:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8021b48:	0a1b      	lsrs	r3, r3, #8
 8021b4a:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 8021b4e:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 8021b52:	ea43 030c 	orr.w	r3, r3, ip
 8021b56:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 8021b58:	2cff      	cmp	r4, #255	@ 0xff
 8021b5a:	d021      	beq.n	8021ba0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
 8021b5c:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 8021b5e:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 8021b62:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 8021b64:	fb04 fb0b 	mul.w	fp, r4, fp
 8021b68:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 8021b6a:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 8021b6e:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 8021b70:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8021b74:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 8021b78:	fb04 fa0a 	mul.w	sl, r4, sl
 8021b7c:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8021b80:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 8021b84:	44de      	add	lr, fp
 8021b86:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8021b8a:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8021b8e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8021b92:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8021b96:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8021b9a:	ea4e 040a 	orr.w	r4, lr, sl
 8021b9e:	940e      	str	r4, [sp, #56]	@ 0x38
 8021ba0:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8021ba2:	2cff      	cmp	r4, #255	@ 0xff
 8021ba4:	d021      	beq.n	8021bea <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x238>
 8021ba6:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8021ba8:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 8021bac:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8021bae:	fb04 fb0b 	mul.w	fp, r4, fp
 8021bb2:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8021bb4:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 8021bb8:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8021bba:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8021bbe:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 8021bc2:	fb04 fa0a 	mul.w	sl, r4, sl
 8021bc6:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8021bca:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 8021bce:	44de      	add	lr, fp
 8021bd0:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8021bd4:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8021bd8:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8021bdc:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8021be0:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8021be4:	ea4e 040a 	orr.w	r4, lr, sl
 8021be8:	940a      	str	r4, [sp, #40]	@ 0x28
 8021bea:	9c16      	ldr	r4, [sp, #88]	@ 0x58
 8021bec:	2cff      	cmp	r4, #255	@ 0xff
 8021bee:	d021      	beq.n	8021c34 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x282>
 8021bf0:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 8021bf2:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 8021bf6:	9c16      	ldr	r4, [sp, #88]	@ 0x58
 8021bf8:	fb04 fb0b 	mul.w	fp, r4, fp
 8021bfc:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 8021bfe:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 8021c02:	9c16      	ldr	r4, [sp, #88]	@ 0x58
 8021c04:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8021c08:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 8021c0c:	fb04 fa0a 	mul.w	sl, r4, sl
 8021c10:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8021c14:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 8021c18:	44de      	add	lr, fp
 8021c1a:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8021c1e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8021c22:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8021c26:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8021c2a:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8021c2e:	ea4e 040a 	orr.w	r4, lr, sl
 8021c32:	940f      	str	r4, [sp, #60]	@ 0x3c
 8021c34:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 8021c36:	f003 1eff 	and.w	lr, r3, #16711935	@ 0xff00ff
 8021c3a:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8021c3e:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 8021c42:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8021c44:	fb08 fc0c 	mul.w	ip, r8, ip
 8021c48:	fb02 cc0e 	mla	ip, r2, lr, ip
 8021c4c:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 8021c50:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 8021c52:	fb01 cc0e 	mla	ip, r1, lr, ip
 8021c56:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 8021c5a:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 8021c5c:	fb09 cc0e 	mla	ip, r9, lr, ip
 8021c60:	f404 4e7f 	and.w	lr, r4, #65280	@ 0xff00
 8021c64:	fb08 f80e 	mul.w	r8, r8, lr
 8021c68:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8021c6c:	fb02 8303 	mla	r3, r2, r3, r8
 8021c70:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8021c72:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8021c76:	f402 4a7f 	and.w	sl, r2, #65280	@ 0xff00
 8021c7a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8021c7c:	fb01 330a 	mla	r3, r1, sl, r3
 8021c80:	f402 417f 	and.w	r1, r2, #65280	@ 0xff00
 8021c84:	fb09 3901 	mla	r9, r9, r1, r3
 8021c88:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8021c8a:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8021c8c:	4343      	muls	r3, r0
 8021c8e:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8021c92:	1c58      	adds	r0, r3, #1
 8021c94:	f409 497f 	and.w	r9, r9, #65280	@ 0xff00
 8021c98:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 8021c9c:	ea4c 0c09 	orr.w	ip, ip, r9
 8021ca0:	783b      	ldrb	r3, [r7, #0]
 8021ca2:	fa5f f28c 	uxtb.w	r2, ip
 8021ca6:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 8021caa:	fb12 f201 	smulbb	r2, r2, r1
 8021cae:	b2c0      	uxtb	r0, r0
 8021cb0:	fb03 2300 	mla	r3, r3, r0, r2
 8021cb4:	b29b      	uxth	r3, r3
 8021cb6:	1c5a      	adds	r2, r3, #1
 8021cb8:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8021cbc:	787a      	ldrb	r2, [r7, #1]
 8021cbe:	fb12 f200 	smulbb	r2, r2, r0
 8021cc2:	121b      	asrs	r3, r3, #8
 8021cc4:	703b      	strb	r3, [r7, #0]
 8021cc6:	f3cc 2307 	ubfx	r3, ip, #8, #8
 8021cca:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8021cce:	fb03 2301 	mla	r3, r3, r1, r2
 8021cd2:	b29b      	uxth	r3, r3
 8021cd4:	1c5a      	adds	r2, r3, #1
 8021cd6:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8021cda:	121b      	asrs	r3, r3, #8
 8021cdc:	707b      	strb	r3, [r7, #1]
 8021cde:	78bb      	ldrb	r3, [r7, #2]
 8021ce0:	fb13 f000 	smulbb	r0, r3, r0
 8021ce4:	fb0c 0c01 	mla	ip, ip, r1, r0
 8021ce8:	fa1f fc8c 	uxth.w	ip, ip
 8021cec:	f10c 0301 	add.w	r3, ip, #1
 8021cf0:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 8021cf4:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 8021cf8:	f887 c002 	strb.w	ip, [r7, #2]
 8021cfc:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 8021cfe:	3703      	adds	r7, #3
 8021d00:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 8021d02:	441a      	add	r2, r3
 8021d04:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 8021d06:	441d      	add	r5, r3
 8021d08:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 8021d0a:	9229      	str	r2, [sp, #164]	@ 0xa4
 8021d0c:	3b01      	subs	r3, #1
 8021d0e:	931a      	str	r3, [sp, #104]	@ 0x68
 8021d10:	e69c      	b.n	8021a4c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 8021d12:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 8021d14:	9c29      	ldr	r4, [sp, #164]	@ 0xa4
 8021d16:	441c      	add	r4, r3
 8021d18:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 8021d1a:	441d      	add	r5, r3
 8021d1c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8021d1e:	9429      	str	r4, [sp, #164]	@ 0xa4
 8021d20:	3b01      	subs	r3, #1
 8021d22:	9309      	str	r3, [sp, #36]	@ 0x24
 8021d24:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8021d26:	3303      	adds	r3, #3
 8021d28:	930c      	str	r3, [sp, #48]	@ 0x30
 8021d2a:	e66f      	b.n	8021a0c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 8021d2c:	d026      	beq.n	8021d7c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ca>
 8021d2e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8021d30:	982b      	ldr	r0, [sp, #172]	@ 0xac
 8021d32:	3b01      	subs	r3, #1
 8021d34:	9c29      	ldr	r4, [sp, #164]	@ 0xa4
 8021d36:	fb00 4003 	mla	r0, r0, r3, r4
 8021d3a:	1400      	asrs	r0, r0, #16
 8021d3c:	f53f ae83 	bmi.w	8021a46 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8021d40:	3901      	subs	r1, #1
 8021d42:	4288      	cmp	r0, r1
 8021d44:	f6bf ae7f 	bge.w	8021a46 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8021d48:	992c      	ldr	r1, [sp, #176]	@ 0xb0
 8021d4a:	fb01 5303 	mla	r3, r1, r3, r5
 8021d4e:	141b      	asrs	r3, r3, #16
 8021d50:	f53f ae79 	bmi.w	8021a46 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8021d54:	3a01      	subs	r2, #1
 8021d56:	4293      	cmp	r3, r2
 8021d58:	f6bf ae75 	bge.w	8021a46 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8021d5c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8021d5e:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
 8021d62:	f103 0e03 	add.w	lr, r3, #3
 8021d66:	f1bb 0f00 	cmp.w	fp, #0
 8021d6a:	dc71      	bgt.n	8021e50 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49e>
 8021d6c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8021d6e:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8021d72:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8021d74:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8021d78:	4423      	add	r3, r4
 8021d7a:	930c      	str	r3, [sp, #48]	@ 0x30
 8021d7c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8021d7e:	2b00      	cmp	r3, #0
 8021d80:	f340 81b5 	ble.w	80220ee <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x73c>
 8021d84:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8021d88:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8021d8a:	ee30 0a04 	vadd.f32	s0, s0, s8
 8021d8e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8021d92:	eef0 6a62 	vmov.f32	s13, s5
 8021d96:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8021d9a:	ee31 1a05 	vadd.f32	s2, s2, s10
 8021d9e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8021da2:	edcd 6a29 	vstr	s13, [sp, #164]	@ 0xa4
 8021da6:	eef0 6a43 	vmov.f32	s13, s6
 8021daa:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8021dae:	ee16 5a90 	vmov	r5, s13
 8021db2:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8021db6:	ee61 7a27 	vmul.f32	s15, s2, s15
 8021dba:	ee77 2a62 	vsub.f32	s5, s14, s5
 8021dbe:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8021dc2:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8021dc6:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8021dca:	ee12 2a90 	vmov	r2, s5
 8021dce:	eef0 2a47 	vmov.f32	s5, s14
 8021dd2:	fb92 f3f3 	sdiv	r3, r2, r3
 8021dd6:	ee13 2a10 	vmov	r2, s6
 8021dda:	932b      	str	r3, [sp, #172]	@ 0xac
 8021ddc:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8021dde:	eeb0 3a67 	vmov.f32	s6, s15
 8021de2:	fb92 f3f3 	sdiv	r3, r2, r3
 8021de6:	932c      	str	r3, [sp, #176]	@ 0xb0
 8021de8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8021dea:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8021dec:	3b01      	subs	r3, #1
 8021dee:	9319      	str	r3, [sp, #100]	@ 0x64
 8021df0:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8021df2:	bf08      	it	eq
 8021df4:	4613      	moveq	r3, r2
 8021df6:	9309      	str	r3, [sp, #36]	@ 0x24
 8021df8:	e5fa      	b.n	80219f0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 8021dfa:	2900      	cmp	r1, #0
 8021dfc:	f43f ae6c 	beq.w	8021ad8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 8021e00:	f818 0000 	ldrb.w	r0, [r8, r0]
 8021e04:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 8021e08:	900a      	str	r0, [sp, #40]	@ 0x28
 8021e0a:	0e00      	lsrs	r0, r0, #24
 8021e0c:	9013      	str	r0, [sp, #76]	@ 0x4c
 8021e0e:	e663      	b.n	8021ad8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 8021e10:	f113 0801 	adds.w	r8, r3, #1
 8021e14:	f53f af72 	bmi.w	8021cfc <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 8021e18:	4540      	cmp	r0, r8
 8021e1a:	f6ff af6f 	blt.w	8021cfc <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 8021e1e:	f11c 0801 	adds.w	r8, ip, #1
 8021e22:	f53f af6b 	bmi.w	8021cfc <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 8021e26:	45c6      	cmp	lr, r8
 8021e28:	f6ff af68 	blt.w	8021cfc <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 8021e2c:	9c1c      	ldr	r4, [sp, #112]	@ 0x70
 8021e2e:	b200      	sxth	r0, r0
 8021e30:	9302      	str	r3, [sp, #8]
 8021e32:	fa0f f38e 	sxth.w	r3, lr
 8021e36:	9000      	str	r0, [sp, #0]
 8021e38:	9301      	str	r3, [sp, #4]
 8021e3a:	4633      	mov	r3, r6
 8021e3c:	981d      	ldr	r0, [sp, #116]	@ 0x74
 8021e3e:	e9cd 1405 	strd	r1, r4, [sp, #20]
 8021e42:	e9cd c203 	strd	ip, r2, [sp, #12]
 8021e46:	4639      	mov	r1, r7
 8021e48:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8021e4a:	f7ff fc74 	bl	8021736 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh>
 8021e4e:	e755      	b.n	8021cfc <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 8021e50:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 8021e52:	f3c5 3003 	ubfx	r0, r5, #12, #4
 8021e56:	9c29      	ldr	r4, [sp, #164]	@ 0xa4
 8021e58:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8021e5c:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 8021e5e:	1427      	asrs	r7, r4, #16
 8021e60:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 8021e62:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8021e66:	142b      	asrs	r3, r5, #16
 8021e68:	fb01 7303 	mla	r3, r1, r3, r7
 8021e6c:	18e7      	adds	r7, r4, r3
 8021e6e:	5ce3      	ldrb	r3, [r4, r3]
 8021e70:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8021e74:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 8021e78:	2a00      	cmp	r2, #0
 8021e7a:	f000 812e 	beq.w	80220da <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x728>
 8021e7e:	f897 8001 	ldrb.w	r8, [r7, #1]
 8021e82:	f856 4028 	ldr.w	r4, [r6, r8, lsl #2]
 8021e86:	9410      	str	r4, [sp, #64]	@ 0x40
 8021e88:	0e24      	lsrs	r4, r4, #24
 8021e8a:	9417      	str	r4, [sp, #92]	@ 0x5c
 8021e8c:	b170      	cbz	r0, 8021eac <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4fa>
 8021e8e:	eb07 0801 	add.w	r8, r7, r1
 8021e92:	5c79      	ldrb	r1, [r7, r1]
 8021e94:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8021e98:	910b      	str	r1, [sp, #44]	@ 0x2c
 8021e9a:	0e09      	lsrs	r1, r1, #24
 8021e9c:	9114      	str	r1, [sp, #80]	@ 0x50
 8021e9e:	f898 1001 	ldrb.w	r1, [r8, #1]
 8021ea2:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8021ea6:	9111      	str	r1, [sp, #68]	@ 0x44
 8021ea8:	0e09      	lsrs	r1, r1, #24
 8021eaa:	9118      	str	r1, [sp, #96]	@ 0x60
 8021eac:	b292      	uxth	r2, r2
 8021eae:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 8021eb0:	b280      	uxth	r0, r0
 8021eb2:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 8021eb4:	fb02 f900 	mul.w	r9, r2, r0
 8021eb8:	0112      	lsls	r2, r2, #4
 8021eba:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 8021ebe:	eba2 0809 	sub.w	r8, r2, r9
 8021ec2:	f5c2 7280 	rsb	r2, r2, #256	@ 0x100
 8021ec6:	b280      	uxth	r0, r0
 8021ec8:	fa1f f888 	uxth.w	r8, r8
 8021ecc:	1a12      	subs	r2, r2, r0
 8021ece:	fb08 f101 	mul.w	r1, r8, r1
 8021ed2:	b292      	uxth	r2, r2
 8021ed4:	fb02 110c 	mla	r1, r2, ip, r1
 8021ed8:	fb00 1104 	mla	r1, r0, r4, r1
 8021edc:	9c18      	ldr	r4, [sp, #96]	@ 0x60
 8021ede:	fb09 1104 	mla	r1, r9, r4, r1
 8021ee2:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8021ee6:	2900      	cmp	r1, #0
 8021ee8:	f000 80ec 	beq.w	80220c4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x712>
 8021eec:	f1bc 0fff 	cmp.w	ip, #255	@ 0xff
 8021ef0:	d019      	beq.n	8021f26 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x574>
 8021ef2:	f003 1aff 	and.w	sl, r3, #16711935	@ 0xff00ff
 8021ef6:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8021efa:	fb0c fa0a 	mul.w	sl, ip, sl
 8021efe:	fb0c fc03 	mul.w	ip, ip, r3
 8021f02:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8021f06:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 8021f0a:	f50c 7780 	add.w	r7, ip, #256	@ 0x100
 8021f0e:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 8021f12:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 8021f16:	4453      	add	r3, sl
 8021f18:	0a3f      	lsrs	r7, r7, #8
 8021f1a:	0a1b      	lsrs	r3, r3, #8
 8021f1c:	f407 477f 	and.w	r7, r7, #65280	@ 0xff00
 8021f20:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 8021f24:	433b      	orrs	r3, r7
 8021f26:	9c17      	ldr	r4, [sp, #92]	@ 0x5c
 8021f28:	2cff      	cmp	r4, #255	@ 0xff
 8021f2a:	d020      	beq.n	8021f6e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5bc>
 8021f2c:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 8021f2e:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 8021f32:	9c17      	ldr	r4, [sp, #92]	@ 0x5c
 8021f34:	4367      	muls	r7, r4
 8021f36:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 8021f38:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8021f3c:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 8021f40:	9c17      	ldr	r4, [sp, #92]	@ 0x5c
 8021f42:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 8021f46:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8021f4a:	fb04 fa0a 	mul.w	sl, r4, sl
 8021f4e:	44bc      	add	ip, r7
 8021f50:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 8021f54:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8021f58:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8021f5c:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8021f60:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8021f64:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8021f68:	ea4c 040a 	orr.w	r4, ip, sl
 8021f6c:	9410      	str	r4, [sp, #64]	@ 0x40
 8021f6e:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 8021f70:	2cff      	cmp	r4, #255	@ 0xff
 8021f72:	d020      	beq.n	8021fb6 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x604>
 8021f74:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8021f76:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 8021f7a:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 8021f7c:	4367      	muls	r7, r4
 8021f7e:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8021f80:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8021f84:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 8021f88:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 8021f8a:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 8021f8e:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8021f92:	fb04 fa0a 	mul.w	sl, r4, sl
 8021f96:	44bc      	add	ip, r7
 8021f98:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 8021f9c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8021fa0:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8021fa4:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8021fa8:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8021fac:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8021fb0:	ea4c 040a 	orr.w	r4, ip, sl
 8021fb4:	940b      	str	r4, [sp, #44]	@ 0x2c
 8021fb6:	9c18      	ldr	r4, [sp, #96]	@ 0x60
 8021fb8:	2cff      	cmp	r4, #255	@ 0xff
 8021fba:	d020      	beq.n	8021ffe <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64c>
 8021fbc:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 8021fbe:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 8021fc2:	9c18      	ldr	r4, [sp, #96]	@ 0x60
 8021fc4:	4367      	muls	r7, r4
 8021fc6:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 8021fc8:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8021fcc:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 8021fd0:	9c18      	ldr	r4, [sp, #96]	@ 0x60
 8021fd2:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 8021fd6:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8021fda:	fb04 fa0a 	mul.w	sl, r4, sl
 8021fde:	44bc      	add	ip, r7
 8021fe0:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 8021fe4:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8021fe8:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8021fec:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8021ff0:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8021ff4:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8021ff8:	ea4c 040a 	orr.w	r4, ip, sl
 8021ffc:	9411      	str	r4, [sp, #68]	@ 0x44
 8021ffe:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 8022000:	f003 1cff 	and.w	ip, r3, #16711935	@ 0xff00ff
 8022004:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8022008:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 802200c:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 802200e:	fb08 f707 	mul.w	r7, r8, r7
 8022012:	fb02 770c 	mla	r7, r2, ip, r7
 8022016:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 802201a:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 802201c:	fb00 770c 	mla	r7, r0, ip, r7
 8022020:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 8022024:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 8022026:	fb09 770c 	mla	r7, r9, ip, r7
 802202a:	f404 4c7f 	and.w	ip, r4, #65280	@ 0xff00
 802202e:	fb08 f80c 	mul.w	r8, r8, ip
 8022032:	0a3f      	lsrs	r7, r7, #8
 8022034:	fb02 8303 	mla	r3, r2, r3, r8
 8022038:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 802203a:	f007 17ff 	and.w	r7, r7, #16711935	@ 0xff00ff
 802203e:	f402 4a7f 	and.w	sl, r2, #65280	@ 0xff00
 8022042:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8022044:	fb00 330a 	mla	r3, r0, sl, r3
 8022048:	f402 4c7f 	and.w	ip, r2, #65280	@ 0xff00
 802204c:	980d      	ldr	r0, [sp, #52]	@ 0x34
 802204e:	fb09 3c0c 	mla	ip, r9, ip, r3
 8022052:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8022054:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8022058:	434b      	muls	r3, r1
 802205a:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 802205e:	1c59      	adds	r1, r3, #1
 8022060:	ea47 070c 	orr.w	r7, r7, ip
 8022064:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 8022068:	f81e 3c03 	ldrb.w	r3, [lr, #-3]
 802206c:	b2fa      	uxtb	r2, r7
 802206e:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 8022072:	fb12 f200 	smulbb	r2, r2, r0
 8022076:	b2c9      	uxtb	r1, r1
 8022078:	fb03 2301 	mla	r3, r3, r1, r2
 802207c:	b29b      	uxth	r3, r3
 802207e:	1c5a      	adds	r2, r3, #1
 8022080:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8022084:	f81e 2c02 	ldrb.w	r2, [lr, #-2]
 8022088:	fb12 f201 	smulbb	r2, r2, r1
 802208c:	121b      	asrs	r3, r3, #8
 802208e:	f80e 3c03 	strb.w	r3, [lr, #-3]
 8022092:	f3c7 2307 	ubfx	r3, r7, #8, #8
 8022096:	0c3f      	lsrs	r7, r7, #16
 8022098:	fb03 2300 	mla	r3, r3, r0, r2
 802209c:	b29b      	uxth	r3, r3
 802209e:	1c5a      	adds	r2, r3, #1
 80220a0:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 80220a4:	121b      	asrs	r3, r3, #8
 80220a6:	f80e 3c02 	strb.w	r3, [lr, #-2]
 80220aa:	f81e 3c01 	ldrb.w	r3, [lr, #-1]
 80220ae:	fb13 f101 	smulbb	r1, r3, r1
 80220b2:	fb07 1700 	mla	r7, r7, r0, r1
 80220b6:	b2bf      	uxth	r7, r7
 80220b8:	1c7b      	adds	r3, r7, #1
 80220ba:	eb03 2717 	add.w	r7, r3, r7, lsr #8
 80220be:	123f      	asrs	r7, r7, #8
 80220c0:	f80e 7c01 	strb.w	r7, [lr, #-1]
 80220c4:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 80220c6:	f10e 0e03 	add.w	lr, lr, #3
 80220ca:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 80220cc:	f10b 3bff 	add.w	fp, fp, #4294967295
 80220d0:	441a      	add	r2, r3
 80220d2:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 80220d4:	9229      	str	r2, [sp, #164]	@ 0xa4
 80220d6:	441d      	add	r5, r3
 80220d8:	e645      	b.n	8021d66 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3b4>
 80220da:	2800      	cmp	r0, #0
 80220dc:	f43f aee6 	beq.w	8021eac <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4fa>
 80220e0:	5c79      	ldrb	r1, [r7, r1]
 80220e2:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 80220e6:	910b      	str	r1, [sp, #44]	@ 0x2c
 80220e8:	0e09      	lsrs	r1, r1, #24
 80220ea:	9114      	str	r1, [sp, #80]	@ 0x50
 80220ec:	e6de      	b.n	8021eac <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4fa>
 80220ee:	b01f      	add	sp, #124	@ 0x7c
 80220f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080220f4 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh>:
 80220f4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80220f8:	e9dd 750e 	ldrd	r7, r5, [sp, #56]	@ 0x38
 80220fc:	f9bd e030 	ldrsh.w	lr, [sp, #48]	@ 0x30
 8022100:	2d00      	cmp	r5, #0
 8022102:	f9bd 9034 	ldrsh.w	r9, [sp, #52]	@ 0x34
 8022106:	fb05 700e 	mla	r0, r5, lr, r7
 802210a:	f89d 4040 	ldrb.w	r4, [sp, #64]	@ 0x40
 802210e:	f89d c044 	ldrb.w	ip, [sp, #68]	@ 0x44
 8022112:	eb02 0800 	add.w	r8, r2, r0
 8022116:	f2c0 8105 	blt.w	8022324 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x230>
 802211a:	45a9      	cmp	r9, r5
 802211c:	f340 8102 	ble.w	8022324 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x230>
 8022120:	2f00      	cmp	r7, #0
 8022122:	f2c0 80fd 	blt.w	8022320 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x22c>
 8022126:	45be      	cmp	lr, r7
 8022128:	f340 80fa 	ble.w	8022320 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x22c>
 802212c:	5c12      	ldrb	r2, [r2, r0]
 802212e:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 8022132:	1c7a      	adds	r2, r7, #1
 8022134:	f100 80f9 	bmi.w	802232a <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x236>
 8022138:	4596      	cmp	lr, r2
 802213a:	f340 80f6 	ble.w	802232a <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x236>
 802213e:	2c00      	cmp	r4, #0
 8022140:	f000 80f5 	beq.w	802232e <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x23a>
 8022144:	f898 2001 	ldrb.w	r2, [r8, #1]
 8022148:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 802214c:	3501      	adds	r5, #1
 802214e:	f100 80f2 	bmi.w	8022336 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x242>
 8022152:	45a9      	cmp	r9, r5
 8022154:	f340 80ef 	ble.w	8022336 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x242>
 8022158:	f1bc 0f00 	cmp.w	ip, #0
 802215c:	f000 80ee 	beq.w	802233c <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x248>
 8022160:	2f00      	cmp	r7, #0
 8022162:	f2c0 80e6 	blt.w	8022332 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x23e>
 8022166:	45be      	cmp	lr, r7
 8022168:	f340 80e3 	ble.w	8022332 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x23e>
 802216c:	f818 200e 	ldrb.w	r2, [r8, lr]
 8022170:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 8022174:	3701      	adds	r7, #1
 8022176:	f100 80e4 	bmi.w	8022342 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x24e>
 802217a:	45be      	cmp	lr, r7
 802217c:	f340 80e1 	ble.w	8022342 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x24e>
 8022180:	2c00      	cmp	r4, #0
 8022182:	f000 80e0 	beq.w	8022346 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x252>
 8022186:	44c6      	add	lr, r8
 8022188:	f89e 2001 	ldrb.w	r2, [lr, #1]
 802218c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8022190:	b2a3      	uxth	r3, r4
 8022192:	fa1f fc8c 	uxth.w	ip, ip
 8022196:	ea4f 6a10 	mov.w	sl, r0, lsr #24
 802219a:	fb0c fe03 	mul.w	lr, ip, r3
 802219e:	011b      	lsls	r3, r3, #4
 80221a0:	ea4f 6b16 	mov.w	fp, r6, lsr #24
 80221a4:	ebce 1c0c 	rsb	ip, lr, ip, lsl #4
 80221a8:	eba3 070e 	sub.w	r7, r3, lr
 80221ac:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 80221b0:	ea4f 6915 	mov.w	r9, r5, lsr #24
 80221b4:	fa1f f48c 	uxth.w	r4, ip
 80221b8:	b2bf      	uxth	r7, r7
 80221ba:	1b1b      	subs	r3, r3, r4
 80221bc:	ea4f 6812 	mov.w	r8, r2, lsr #24
 80221c0:	fb07 fc0a 	mul.w	ip, r7, sl
 80221c4:	b29b      	uxth	r3, r3
 80221c6:	fb03 cc0b 	mla	ip, r3, fp, ip
 80221ca:	9300      	str	r3, [sp, #0]
 80221cc:	fb04 cc09 	mla	ip, r4, r9, ip
 80221d0:	fb0e cc08 	mla	ip, lr, r8, ip
 80221d4:	f3cc 2307 	ubfx	r3, ip, #8, #8
 80221d8:	9301      	str	r3, [sp, #4]
 80221da:	2b00      	cmp	r3, #0
 80221dc:	f000 809d 	beq.w	802231a <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x226>
 80221e0:	f006 1cff 	and.w	ip, r6, #16711935	@ 0xff00ff
 80221e4:	f406 467f 	and.w	r6, r6, #65280	@ 0xff00
 80221e8:	fb0b fc0c 	mul.w	ip, fp, ip
 80221ec:	fb0b f606 	mul.w	r6, fp, r6
 80221f0:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 80221f4:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 80221f8:	f00b 1bff 	and.w	fp, fp, #16711935	@ 0xff00ff
 80221fc:	44dc      	add	ip, fp
 80221fe:	f000 1bff 	and.w	fp, r0, #16711935	@ 0xff00ff
 8022202:	f400 407f 	and.w	r0, r0, #65280	@ 0xff00
 8022206:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802220a:	fb0a fb0b 	mul.w	fp, sl, fp
 802220e:	fb0a fa00 	mul.w	sl, sl, r0
 8022212:	f00c 13ff 	and.w	r3, ip, #16711935	@ 0xff00ff
 8022216:	f506 7c80 	add.w	ip, r6, #256	@ 0x100
 802221a:	f50a 7080 	add.w	r0, sl, #256	@ 0x100
 802221e:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 8022222:	ea4f 2c1b 	mov.w	ip, fp, lsr #8
 8022226:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 802222a:	eb00 2a1a 	add.w	sl, r0, sl, lsr #8
 802222e:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8022232:	0a36      	lsrs	r6, r6, #8
 8022234:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8022238:	44dc      	add	ip, fp
 802223a:	f005 1bff 	and.w	fp, r5, #16711935	@ 0xff00ff
 802223e:	f405 457f 	and.w	r5, r5, #65280	@ 0xff00
 8022242:	f406 467f 	and.w	r6, r6, #65280	@ 0xff00
 8022246:	fb09 fb0b 	mul.w	fp, r9, fp
 802224a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802224e:	fb09 f905 	mul.w	r9, r9, r5
 8022252:	ea4f 201b 	mov.w	r0, fp, lsr #8
 8022256:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 802225a:	f509 7580 	add.w	r5, r9, #256	@ 0x100
 802225e:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 8022262:	f000 10ff 	and.w	r0, r0, #16711935	@ 0xff00ff
 8022266:	fb0c fc07 	mul.w	ip, ip, r7
 802226a:	eb05 2919 	add.w	r9, r5, r9, lsr #8
 802226e:	f002 15ff 	and.w	r5, r2, #16711935	@ 0xff00ff
 8022272:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 8022276:	4458      	add	r0, fp
 8022278:	fb08 f505 	mul.w	r5, r8, r5
 802227c:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8022280:	fb08 f802 	mul.w	r8, r8, r2
 8022284:	0a00      	lsrs	r0, r0, #8
 8022286:	0a2a      	lsrs	r2, r5, #8
 8022288:	f105 1501 	add.w	r5, r5, #65537	@ 0x10001
 802228c:	f000 10ff 	and.w	r0, r0, #16711935	@ 0xff00ff
 8022290:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
 8022294:	4415      	add	r5, r2
 8022296:	f508 7280 	add.w	r2, r8, #256	@ 0x100
 802229a:	0a2d      	lsrs	r5, r5, #8
 802229c:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 80222a0:	9a00      	ldr	r2, [sp, #0]
 80222a2:	f005 15ff 	and.w	r5, r5, #16711935	@ 0xff00ff
 80222a6:	fb03 cc02 	mla	ip, r3, r2, ip
 80222aa:	ea4f 2818 	mov.w	r8, r8, lsr #8
 80222ae:	9b01      	ldr	r3, [sp, #4]
 80222b0:	fb05 c50e 	mla	r5, r5, lr, ip
 80222b4:	f408 487f 	and.w	r8, r8, #65280	@ 0xff00
 80222b8:	43db      	mvns	r3, r3
 80222ba:	fb00 5004 	mla	r0, r0, r4, r5
 80222be:	b2db      	uxtb	r3, r3
 80222c0:	0a00      	lsrs	r0, r0, #8
 80222c2:	f000 15ff 	and.w	r5, r0, #16711935	@ 0xff00ff
 80222c6:	f40a 407f 	and.w	r0, sl, #65280	@ 0xff00
 80222ca:	4378      	muls	r0, r7
 80222cc:	fb02 0006 	mla	r0, r2, r6, r0
 80222d0:	780a      	ldrb	r2, [r1, #0]
 80222d2:	fb0e 0e08 	mla	lr, lr, r8, r0
 80222d6:	f409 407f 	and.w	r0, r9, #65280	@ 0xff00
 80222da:	fb04 e000 	mla	r0, r4, r0, lr
 80222de:	fb02 f403 	mul.w	r4, r2, r3
 80222e2:	0a00      	lsrs	r0, r0, #8
 80222e4:	1c62      	adds	r2, r4, #1
 80222e6:	f400 407f 	and.w	r0, r0, #65280	@ 0xff00
 80222ea:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 80222ee:	4328      	orrs	r0, r5
 80222f0:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 80222f4:	700a      	strb	r2, [r1, #0]
 80222f6:	784a      	ldrb	r2, [r1, #1]
 80222f8:	435a      	muls	r2, r3
 80222fa:	1c54      	adds	r4, r2, #1
 80222fc:	eb04 2412 	add.w	r4, r4, r2, lsr #8
 8022300:	0a02      	lsrs	r2, r0, #8
 8022302:	0c00      	lsrs	r0, r0, #16
 8022304:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 8022308:	704a      	strb	r2, [r1, #1]
 802230a:	788a      	ldrb	r2, [r1, #2]
 802230c:	4353      	muls	r3, r2
 802230e:	1c5a      	adds	r2, r3, #1
 8022310:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8022314:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 8022318:	7088      	strb	r0, [r1, #2]
 802231a:	b003      	add	sp, #12
 802231c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022320:	2600      	movs	r6, #0
 8022322:	e706      	b.n	8022132 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x3e>
 8022324:	2000      	movs	r0, #0
 8022326:	4606      	mov	r6, r0
 8022328:	e710      	b.n	802214c <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x58>
 802232a:	2000      	movs	r0, #0
 802232c:	e70e      	b.n	802214c <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x58>
 802232e:	4620      	mov	r0, r4
 8022330:	e70c      	b.n	802214c <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x58>
 8022332:	2500      	movs	r5, #0
 8022334:	e71e      	b.n	8022174 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x80>
 8022336:	2200      	movs	r2, #0
 8022338:	4615      	mov	r5, r2
 802233a:	e729      	b.n	8022190 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9c>
 802233c:	4662      	mov	r2, ip
 802233e:	4665      	mov	r5, ip
 8022340:	e726      	b.n	8022190 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9c>
 8022342:	2200      	movs	r2, #0
 8022344:	e724      	b.n	8022190 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9c>
 8022346:	4622      	mov	r2, r4
 8022348:	e722      	b.n	8022190 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9c>

0802234a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 802234a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802234e:	b09b      	sub	sp, #108	@ 0x6c
 8022350:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8022354:	9218      	str	r2, [sp, #96]	@ 0x60
 8022356:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 8022358:	9019      	str	r0, [sp, #100]	@ 0x64
 802235a:	9116      	str	r1, [sp, #88]	@ 0x58
 802235c:	6850      	ldr	r0, [r2, #4]
 802235e:	9307      	str	r3, [sp, #28]
 8022360:	6812      	ldr	r2, [r2, #0]
 8022362:	9d26      	ldr	r5, [sp, #152]	@ 0x98
 8022364:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	@ 0xa8
 8022368:	fb00 1303 	mla	r3, r0, r3, r1
 802236c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8022370:	18d3      	adds	r3, r2, r3
 8022372:	930a      	str	r3, [sp, #40]	@ 0x28
 8022374:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 8022376:	681b      	ldr	r3, [r3, #0]
 8022378:	930f      	str	r3, [sp, #60]	@ 0x3c
 802237a:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 802237c:	685e      	ldr	r6, [r3, #4]
 802237e:	3604      	adds	r6, #4
 8022380:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8022382:	2b00      	cmp	r3, #0
 8022384:	dc03      	bgt.n	802238e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44>
 8022386:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8022388:	2b00      	cmp	r3, #0
 802238a:	f340 834f 	ble.w	8022a2c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e2>
 802238e:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 8022390:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8022394:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8022398:	1e48      	subs	r0, r1, #1
 802239a:	1e57      	subs	r7, r2, #1
 802239c:	9b07      	ldr	r3, [sp, #28]
 802239e:	2b00      	cmp	r3, #0
 80223a0:	f340 8178 	ble.w	8022694 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 80223a4:	9c25      	ldr	r4, [sp, #148]	@ 0x94
 80223a6:	142b      	asrs	r3, r5, #16
 80223a8:	ea5f 4c24 	movs.w	ip, r4, asr #16
 80223ac:	d406      	bmi.n	80223bc <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 80223ae:	4584      	cmp	ip, r0
 80223b0:	da04      	bge.n	80223bc <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 80223b2:	2b00      	cmp	r3, #0
 80223b4:	db02      	blt.n	80223bc <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 80223b6:	42bb      	cmp	r3, r7
 80223b8:	f2c0 816d 	blt.w	8022696 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34c>
 80223bc:	f11c 0c01 	adds.w	ip, ip, #1
 80223c0:	f100 815b 	bmi.w	802267a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 80223c4:	4561      	cmp	r1, ip
 80223c6:	f2c0 8158 	blt.w	802267a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 80223ca:	3301      	adds	r3, #1
 80223cc:	f100 8155 	bmi.w	802267a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 80223d0:	429a      	cmp	r2, r3
 80223d2:	f2c0 8152 	blt.w	802267a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 80223d6:	9b07      	ldr	r3, [sp, #28]
 80223d8:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
 80223da:	9317      	str	r3, [sp, #92]	@ 0x5c
 80223dc:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80223de:	2b00      	cmp	r3, #0
 80223e0:	f340 8178 	ble.w	80226d4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 80223e4:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 80223e6:	ea4f 4c25 	mov.w	ip, r5, asr #16
 80223ea:	f3c5 3003 	ubfx	r0, r5, #12, #4
 80223ee:	f3c3 3203 	ubfx	r2, r3, #12, #4
 80223f2:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 80223f4:	e9d3 1e02 	ldrd	r1, lr, [r3, #8]
 80223f8:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 80223fa:	141b      	asrs	r3, r3, #16
 80223fc:	f100 81ba 	bmi.w	8022774 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 8022400:	f101 38ff 	add.w	r8, r1, #4294967295
 8022404:	4543      	cmp	r3, r8
 8022406:	f280 81b5 	bge.w	8022774 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 802240a:	f1bc 0f00 	cmp.w	ip, #0
 802240e:	f2c0 81b1 	blt.w	8022774 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 8022412:	f10e 38ff 	add.w	r8, lr, #4294967295
 8022416:	45c4      	cmp	ip, r8
 8022418:	f280 81ac 	bge.w	8022774 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 802241c:	b209      	sxth	r1, r1
 802241e:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 8022420:	fb0c 3301 	mla	r3, ip, r1, r3
 8022424:	eb04 0803 	add.w	r8, r4, r3
 8022428:	5ce3      	ldrb	r3, [r4, r3]
 802242a:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 802242e:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 8022432:	2a00      	cmp	r2, #0
 8022434:	f000 8193 	beq.w	802275e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x414>
 8022438:	f898 c001 	ldrb.w	ip, [r8, #1]
 802243c:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
 8022440:	940b      	str	r4, [sp, #44]	@ 0x2c
 8022442:	0e24      	lsrs	r4, r4, #24
 8022444:	9412      	str	r4, [sp, #72]	@ 0x48
 8022446:	b178      	cbz	r0, 8022468 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11e>
 8022448:	eb08 0c01 	add.w	ip, r8, r1
 802244c:	f818 1001 	ldrb.w	r1, [r8, r1]
 8022450:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8022454:	9108      	str	r1, [sp, #32]
 8022456:	0e09      	lsrs	r1, r1, #24
 8022458:	9110      	str	r1, [sp, #64]	@ 0x40
 802245a:	f89c 1001 	ldrb.w	r1, [ip, #1]
 802245e:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8022462:	910c      	str	r1, [sp, #48]	@ 0x30
 8022464:	0e09      	lsrs	r1, r1, #24
 8022466:	9113      	str	r1, [sp, #76]	@ 0x4c
 8022468:	b292      	uxth	r2, r2
 802246a:	9912      	ldr	r1, [sp, #72]	@ 0x48
 802246c:	b280      	uxth	r0, r0
 802246e:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 8022470:	fb02 f900 	mul.w	r9, r2, r0
 8022474:	0112      	lsls	r2, r2, #4
 8022476:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 802247a:	eba2 0809 	sub.w	r8, r2, r9
 802247e:	f5c2 7280 	rsb	r2, r2, #256	@ 0x100
 8022482:	b280      	uxth	r0, r0
 8022484:	fa1f f888 	uxth.w	r8, r8
 8022488:	1a12      	subs	r2, r2, r0
 802248a:	fb08 f101 	mul.w	r1, r8, r1
 802248e:	b292      	uxth	r2, r2
 8022490:	fb02 110e 	mla	r1, r2, lr, r1
 8022494:	fb00 1104 	mla	r1, r0, r4, r1
 8022498:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 802249a:	fb09 1104 	mla	r1, r9, r4, r1
 802249e:	f3c1 2107 	ubfx	r1, r1, #8, #8
 80224a2:	2900      	cmp	r1, #0
 80224a4:	f000 80de 	beq.w	8022664 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 80224a8:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 80224ac:	d01b      	beq.n	80224e6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19c>
 80224ae:	f003 1aff 	and.w	sl, r3, #16711935	@ 0xff00ff
 80224b2:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80224b6:	fb0e fa0a 	mul.w	sl, lr, sl
 80224ba:	fb0e fe03 	mul.w	lr, lr, r3
 80224be:	ea4f 231a 	mov.w	r3, sl, lsr #8
 80224c2:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 80224c6:	f50e 7c80 	add.w	ip, lr, #256	@ 0x100
 80224ca:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 80224ce:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 80224d2:	4453      	add	r3, sl
 80224d4:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80224d8:	0a1b      	lsrs	r3, r3, #8
 80224da:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 80224de:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 80224e2:	ea43 030c 	orr.w	r3, r3, ip
 80224e6:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 80224e8:	2cff      	cmp	r4, #255	@ 0xff
 80224ea:	d021      	beq.n	8022530 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 80224ec:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 80224ee:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 80224f2:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 80224f4:	fb04 fb0b 	mul.w	fp, r4, fp
 80224f8:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 80224fa:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 80224fe:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 8022500:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8022504:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 8022508:	fb04 fa0a 	mul.w	sl, r4, sl
 802250c:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8022510:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 8022514:	44de      	add	lr, fp
 8022516:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 802251a:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802251e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8022522:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8022526:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 802252a:	ea4e 040a 	orr.w	r4, lr, sl
 802252e:	940b      	str	r4, [sp, #44]	@ 0x2c
 8022530:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 8022532:	2cff      	cmp	r4, #255	@ 0xff
 8022534:	d021      	beq.n	802257a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x230>
 8022536:	9c08      	ldr	r4, [sp, #32]
 8022538:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 802253c:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 802253e:	fb04 fb0b 	mul.w	fp, r4, fp
 8022542:	9c08      	ldr	r4, [sp, #32]
 8022544:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 8022548:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 802254a:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 802254e:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 8022552:	fb04 fa0a 	mul.w	sl, r4, sl
 8022556:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 802255a:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 802255e:	44de      	add	lr, fp
 8022560:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8022564:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8022568:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802256c:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8022570:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8022574:	ea4e 040a 	orr.w	r4, lr, sl
 8022578:	9408      	str	r4, [sp, #32]
 802257a:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 802257c:	2cff      	cmp	r4, #255	@ 0xff
 802257e:	d021      	beq.n	80225c4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 8022580:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8022582:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 8022586:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8022588:	fb04 fb0b 	mul.w	fp, r4, fp
 802258c:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 802258e:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 8022592:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8022594:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8022598:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 802259c:	fb04 fa0a 	mul.w	sl, r4, sl
 80225a0:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 80225a4:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 80225a8:	44de      	add	lr, fp
 80225aa:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80225ae:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80225b2:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80225b6:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 80225ba:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 80225be:	ea4e 040a 	orr.w	r4, lr, sl
 80225c2:	940c      	str	r4, [sp, #48]	@ 0x30
 80225c4:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 80225c6:	f003 1eff 	and.w	lr, r3, #16711935	@ 0xff00ff
 80225ca:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80225ce:	43c9      	mvns	r1, r1
 80225d0:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 80225d4:	9c08      	ldr	r4, [sp, #32]
 80225d6:	b2c9      	uxtb	r1, r1
 80225d8:	fb08 fc0c 	mul.w	ip, r8, ip
 80225dc:	fb02 cc0e 	mla	ip, r2, lr, ip
 80225e0:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 80225e4:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 80225e6:	fb00 cc0e 	mla	ip, r0, lr, ip
 80225ea:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 80225ee:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 80225f0:	fb09 cc0e 	mla	ip, r9, lr, ip
 80225f4:	f404 4e7f 	and.w	lr, r4, #65280	@ 0xff00
 80225f8:	fb08 f80e 	mul.w	r8, r8, lr
 80225fc:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8022600:	fb02 8303 	mla	r3, r2, r3, r8
 8022604:	9a08      	ldr	r2, [sp, #32]
 8022606:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 802260a:	f402 4a7f 	and.w	sl, r2, #65280	@ 0xff00
 802260e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8022610:	fb00 330a 	mla	r3, r0, sl, r3
 8022614:	f402 407f 	and.w	r0, r2, #65280	@ 0xff00
 8022618:	fb09 3900 	mla	r9, r9, r0, r3
 802261c:	783b      	ldrb	r3, [r7, #0]
 802261e:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8022622:	fb03 f201 	mul.w	r2, r3, r1
 8022626:	f409 497f 	and.w	r9, r9, #65280	@ 0xff00
 802262a:	1c53      	adds	r3, r2, #1
 802262c:	ea4c 0c09 	orr.w	ip, ip, r9
 8022630:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8022634:	eb0c 2313 	add.w	r3, ip, r3, lsr #8
 8022638:	703b      	strb	r3, [r7, #0]
 802263a:	787b      	ldrb	r3, [r7, #1]
 802263c:	434b      	muls	r3, r1
 802263e:	1c5a      	adds	r2, r3, #1
 8022640:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8022644:	ea4f 231c 	mov.w	r3, ip, lsr #8
 8022648:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 802264c:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8022650:	707b      	strb	r3, [r7, #1]
 8022652:	78bb      	ldrb	r3, [r7, #2]
 8022654:	4359      	muls	r1, r3
 8022656:	1c4b      	adds	r3, r1, #1
 8022658:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 802265c:	eb0c 2c11 	add.w	ip, ip, r1, lsr #8
 8022660:	f887 c002 	strb.w	ip, [r7, #2]
 8022664:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8022666:	3703      	adds	r7, #3
 8022668:	9a25      	ldr	r2, [sp, #148]	@ 0x94
 802266a:	441a      	add	r2, r3
 802266c:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 802266e:	441d      	add	r5, r3
 8022670:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8022672:	9225      	str	r2, [sp, #148]	@ 0x94
 8022674:	3b01      	subs	r3, #1
 8022676:	9317      	str	r3, [sp, #92]	@ 0x5c
 8022678:	e6b0      	b.n	80223dc <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 802267a:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 802267c:	9c25      	ldr	r4, [sp, #148]	@ 0x94
 802267e:	441c      	add	r4, r3
 8022680:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8022682:	441d      	add	r5, r3
 8022684:	9b07      	ldr	r3, [sp, #28]
 8022686:	9425      	str	r4, [sp, #148]	@ 0x94
 8022688:	3b01      	subs	r3, #1
 802268a:	9307      	str	r3, [sp, #28]
 802268c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802268e:	3303      	adds	r3, #3
 8022690:	930a      	str	r3, [sp, #40]	@ 0x28
 8022692:	e683      	b.n	802239c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 8022694:	d026      	beq.n	80226e4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x39a>
 8022696:	9b07      	ldr	r3, [sp, #28]
 8022698:	9827      	ldr	r0, [sp, #156]	@ 0x9c
 802269a:	3b01      	subs	r3, #1
 802269c:	9c25      	ldr	r4, [sp, #148]	@ 0x94
 802269e:	fb00 4003 	mla	r0, r0, r3, r4
 80226a2:	1400      	asrs	r0, r0, #16
 80226a4:	f53f ae97 	bmi.w	80223d6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 80226a8:	3901      	subs	r1, #1
 80226aa:	4288      	cmp	r0, r1
 80226ac:	f6bf ae93 	bge.w	80223d6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 80226b0:	9928      	ldr	r1, [sp, #160]	@ 0xa0
 80226b2:	fb01 5303 	mla	r3, r1, r3, r5
 80226b6:	141b      	asrs	r3, r3, #16
 80226b8:	f53f ae8d 	bmi.w	80223d6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 80226bc:	3a01      	subs	r2, #1
 80226be:	4293      	cmp	r3, r2
 80226c0:	f6bf ae89 	bge.w	80223d6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 80226c4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80226c6:	f8dd b01c 	ldr.w	fp, [sp, #28]
 80226ca:	f103 0e03 	add.w	lr, r3, #3
 80226ce:	f1bb 0f00 	cmp.w	fp, #0
 80226d2:	dc6d      	bgt.n	80227b0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x466>
 80226d4:	9b07      	ldr	r3, [sp, #28]
 80226d6:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 80226da:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80226dc:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80226e0:	4423      	add	r3, r4
 80226e2:	930a      	str	r3, [sp, #40]	@ 0x28
 80226e4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80226e6:	2b00      	cmp	r3, #0
 80226e8:	f340 81a0 	ble.w	8022a2c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e2>
 80226ec:	ee30 0a04 	vadd.f32	s0, s0, s8
 80226f0:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80226f2:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80226f6:	eeb0 6a62 	vmov.f32	s12, s5
 80226fa:	eec6 7a80 	vdiv.f32	s15, s13, s0
 80226fe:	ee31 1a05 	vadd.f32	s2, s2, s10
 8022702:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8022706:	ed8d 6a25 	vstr	s12, [sp, #148]	@ 0x94
 802270a:	eeb0 6a43 	vmov.f32	s12, s6
 802270e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8022712:	ee16 5a10 	vmov	r5, s12
 8022716:	ee20 7aa7 	vmul.f32	s14, s1, s15
 802271a:	ee61 7a27 	vmul.f32	s15, s2, s15
 802271e:	ee77 2a62 	vsub.f32	s5, s14, s5
 8022722:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8022726:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 802272a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 802272e:	ee12 2a90 	vmov	r2, s5
 8022732:	eef0 2a47 	vmov.f32	s5, s14
 8022736:	fb92 f3f3 	sdiv	r3, r2, r3
 802273a:	ee13 2a10 	vmov	r2, s6
 802273e:	9327      	str	r3, [sp, #156]	@ 0x9c
 8022740:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8022742:	eeb0 3a67 	vmov.f32	s6, s15
 8022746:	fb92 f3f3 	sdiv	r3, r2, r3
 802274a:	9328      	str	r3, [sp, #160]	@ 0xa0
 802274c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 802274e:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8022750:	3b01      	subs	r3, #1
 8022752:	9316      	str	r3, [sp, #88]	@ 0x58
 8022754:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8022756:	bf08      	it	eq
 8022758:	4613      	moveq	r3, r2
 802275a:	9307      	str	r3, [sp, #28]
 802275c:	e610      	b.n	8022380 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36>
 802275e:	2800      	cmp	r0, #0
 8022760:	f43f ae82 	beq.w	8022468 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11e>
 8022764:	f818 1001 	ldrb.w	r1, [r8, r1]
 8022768:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 802276c:	9108      	str	r1, [sp, #32]
 802276e:	0e09      	lsrs	r1, r1, #24
 8022770:	9110      	str	r1, [sp, #64]	@ 0x40
 8022772:	e679      	b.n	8022468 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11e>
 8022774:	f113 0801 	adds.w	r8, r3, #1
 8022778:	f53f af74 	bmi.w	8022664 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 802277c:	4541      	cmp	r1, r8
 802277e:	f6ff af71 	blt.w	8022664 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 8022782:	f11c 0801 	adds.w	r8, ip, #1
 8022786:	f53f af6d 	bmi.w	8022664 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 802278a:	45c6      	cmp	lr, r8
 802278c:	f6ff af6a 	blt.w	8022664 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 8022790:	b209      	sxth	r1, r1
 8022792:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 8022796:	fa0f f38e 	sxth.w	r3, lr
 802279a:	9100      	str	r1, [sp, #0]
 802279c:	4639      	mov	r1, r7
 802279e:	9301      	str	r3, [sp, #4]
 80227a0:	4633      	mov	r3, r6
 80227a2:	e9cd 2004 	strd	r2, r0, [sp, #16]
 80227a6:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80227a8:	9819      	ldr	r0, [sp, #100]	@ 0x64
 80227aa:	f7ff fca3 	bl	80220f4 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh>
 80227ae:	e759      	b.n	8022664 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 80227b0:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 80227b2:	f3c5 3003 	ubfx	r0, r5, #12, #4
 80227b6:	9c25      	ldr	r4, [sp, #148]	@ 0x94
 80227b8:	f3c3 3203 	ubfx	r2, r3, #12, #4
 80227bc:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 80227be:	1427      	asrs	r7, r4, #16
 80227c0:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 80227c2:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80227c6:	142b      	asrs	r3, r5, #16
 80227c8:	fb01 7303 	mla	r3, r1, r3, r7
 80227cc:	18e7      	adds	r7, r4, r3
 80227ce:	5ce3      	ldrb	r3, [r4, r3]
 80227d0:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 80227d4:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 80227d8:	2a00      	cmp	r2, #0
 80227da:	f000 811d 	beq.w	8022a18 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6ce>
 80227de:	f897 8001 	ldrb.w	r8, [r7, #1]
 80227e2:	f856 4028 	ldr.w	r4, [r6, r8, lsl #2]
 80227e6:	940d      	str	r4, [sp, #52]	@ 0x34
 80227e8:	0e24      	lsrs	r4, r4, #24
 80227ea:	9414      	str	r4, [sp, #80]	@ 0x50
 80227ec:	b170      	cbz	r0, 802280c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c2>
 80227ee:	eb07 0801 	add.w	r8, r7, r1
 80227f2:	5c79      	ldrb	r1, [r7, r1]
 80227f4:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 80227f8:	9109      	str	r1, [sp, #36]	@ 0x24
 80227fa:	0e09      	lsrs	r1, r1, #24
 80227fc:	9111      	str	r1, [sp, #68]	@ 0x44
 80227fe:	f898 1001 	ldrb.w	r1, [r8, #1]
 8022802:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8022806:	910e      	str	r1, [sp, #56]	@ 0x38
 8022808:	0e09      	lsrs	r1, r1, #24
 802280a:	9115      	str	r1, [sp, #84]	@ 0x54
 802280c:	b292      	uxth	r2, r2
 802280e:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 8022810:	b280      	uxth	r0, r0
 8022812:	fb02 f900 	mul.w	r9, r2, r0
 8022816:	0112      	lsls	r2, r2, #4
 8022818:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 802281c:	eba2 0809 	sub.w	r8, r2, r9
 8022820:	f5c2 7180 	rsb	r1, r2, #256	@ 0x100
 8022824:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8022826:	b280      	uxth	r0, r0
 8022828:	fa1f f888 	uxth.w	r8, r8
 802282c:	1a09      	subs	r1, r1, r0
 802282e:	fb08 f202 	mul.w	r2, r8, r2
 8022832:	b289      	uxth	r1, r1
 8022834:	fb01 220c 	mla	r2, r1, ip, r2
 8022838:	fb00 2204 	mla	r2, r0, r4, r2
 802283c:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 802283e:	fb09 2204 	mla	r2, r9, r4, r2
 8022842:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8022846:	2a00      	cmp	r2, #0
 8022848:	f000 80db 	beq.w	8022a02 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6b8>
 802284c:	f1bc 0fff 	cmp.w	ip, #255	@ 0xff
 8022850:	d019      	beq.n	8022886 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x53c>
 8022852:	f003 1aff 	and.w	sl, r3, #16711935	@ 0xff00ff
 8022856:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 802285a:	fb0c fa0a 	mul.w	sl, ip, sl
 802285e:	fb0c fc03 	mul.w	ip, ip, r3
 8022862:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8022866:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 802286a:	f50c 7780 	add.w	r7, ip, #256	@ 0x100
 802286e:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 8022872:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 8022876:	4453      	add	r3, sl
 8022878:	0a3f      	lsrs	r7, r7, #8
 802287a:	0a1b      	lsrs	r3, r3, #8
 802287c:	f407 477f 	and.w	r7, r7, #65280	@ 0xff00
 8022880:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 8022884:	433b      	orrs	r3, r7
 8022886:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 8022888:	2cff      	cmp	r4, #255	@ 0xff
 802288a:	d020      	beq.n	80228ce <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x584>
 802288c:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 802288e:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 8022892:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 8022894:	4367      	muls	r7, r4
 8022896:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 8022898:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 802289c:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 80228a0:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 80228a2:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 80228a6:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 80228aa:	fb04 fa0a 	mul.w	sl, r4, sl
 80228ae:	44bc      	add	ip, r7
 80228b0:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 80228b4:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80228b8:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80228bc:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 80228c0:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80228c4:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 80228c8:	ea4c 040a 	orr.w	r4, ip, sl
 80228cc:	940d      	str	r4, [sp, #52]	@ 0x34
 80228ce:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 80228d0:	2cff      	cmp	r4, #255	@ 0xff
 80228d2:	d020      	beq.n	8022916 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5cc>
 80228d4:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 80228d6:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 80228da:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 80228dc:	4367      	muls	r7, r4
 80228de:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 80228e0:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 80228e4:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 80228e8:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 80228ea:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 80228ee:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 80228f2:	fb04 fa0a 	mul.w	sl, r4, sl
 80228f6:	44bc      	add	ip, r7
 80228f8:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 80228fc:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8022900:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8022904:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8022908:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802290c:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8022910:	ea4c 040a 	orr.w	r4, ip, sl
 8022914:	9409      	str	r4, [sp, #36]	@ 0x24
 8022916:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 8022918:	2cff      	cmp	r4, #255	@ 0xff
 802291a:	d020      	beq.n	802295e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x614>
 802291c:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 802291e:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 8022922:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 8022924:	4367      	muls	r7, r4
 8022926:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 8022928:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 802292c:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 8022930:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 8022932:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 8022936:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 802293a:	fb04 fa0a 	mul.w	sl, r4, sl
 802293e:	44bc      	add	ip, r7
 8022940:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 8022944:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8022948:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 802294c:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8022950:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8022954:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8022958:	ea4c 040a 	orr.w	r4, ip, sl
 802295c:	940e      	str	r4, [sp, #56]	@ 0x38
 802295e:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 8022960:	f003 1cff 	and.w	ip, r3, #16711935	@ 0xff00ff
 8022964:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8022968:	43d2      	mvns	r2, r2
 802296a:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 802296e:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 8022970:	b2d2      	uxtb	r2, r2
 8022972:	fb08 f707 	mul.w	r7, r8, r7
 8022976:	fb01 770c 	mla	r7, r1, ip, r7
 802297a:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 802297e:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 8022980:	fb00 770c 	mla	r7, r0, ip, r7
 8022984:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 8022988:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 802298a:	fb09 770c 	mla	r7, r9, ip, r7
 802298e:	f404 4c7f 	and.w	ip, r4, #65280	@ 0xff00
 8022992:	fb08 f80c 	mul.w	r8, r8, ip
 8022996:	0a3f      	lsrs	r7, r7, #8
 8022998:	fb01 8303 	mla	r3, r1, r3, r8
 802299c:	9909      	ldr	r1, [sp, #36]	@ 0x24
 802299e:	f007 17ff 	and.w	r7, r7, #16711935	@ 0xff00ff
 80229a2:	f401 4a7f 	and.w	sl, r1, #65280	@ 0xff00
 80229a6:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80229a8:	fb00 330a 	mla	r3, r0, sl, r3
 80229ac:	f401 4c7f 	and.w	ip, r1, #65280	@ 0xff00
 80229b0:	fb09 3c0c 	mla	ip, r9, ip, r3
 80229b4:	f81e 3c03 	ldrb.w	r3, [lr, #-3]
 80229b8:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80229bc:	fb03 f102 	mul.w	r1, r3, r2
 80229c0:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 80229c4:	1c4b      	adds	r3, r1, #1
 80229c6:	ea47 070c 	orr.w	r7, r7, ip
 80229ca:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 80229ce:	eb07 2313 	add.w	r3, r7, r3, lsr #8
 80229d2:	f80e 3c03 	strb.w	r3, [lr, #-3]
 80229d6:	f81e 3c02 	ldrb.w	r3, [lr, #-2]
 80229da:	4353      	muls	r3, r2
 80229dc:	1c59      	adds	r1, r3, #1
 80229de:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 80229e2:	0a3b      	lsrs	r3, r7, #8
 80229e4:	0c3f      	lsrs	r7, r7, #16
 80229e6:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 80229ea:	f80e 3c02 	strb.w	r3, [lr, #-2]
 80229ee:	f81e 3c01 	ldrb.w	r3, [lr, #-1]
 80229f2:	435a      	muls	r2, r3
 80229f4:	1c53      	adds	r3, r2, #1
 80229f6:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 80229fa:	eb07 2712 	add.w	r7, r7, r2, lsr #8
 80229fe:	f80e 7c01 	strb.w	r7, [lr, #-1]
 8022a02:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8022a04:	f10e 0e03 	add.w	lr, lr, #3
 8022a08:	9a25      	ldr	r2, [sp, #148]	@ 0x94
 8022a0a:	f10b 3bff 	add.w	fp, fp, #4294967295
 8022a0e:	441a      	add	r2, r3
 8022a10:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8022a12:	9225      	str	r2, [sp, #148]	@ 0x94
 8022a14:	441d      	add	r5, r3
 8022a16:	e65a      	b.n	80226ce <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x384>
 8022a18:	2800      	cmp	r0, #0
 8022a1a:	f43f aef7 	beq.w	802280c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c2>
 8022a1e:	5c79      	ldrb	r1, [r7, r1]
 8022a20:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8022a24:	9109      	str	r1, [sp, #36]	@ 0x24
 8022a26:	0e09      	lsrs	r1, r1, #24
 8022a28:	9111      	str	r1, [sp, #68]	@ 0x44
 8022a2a:	e6ef      	b.n	802280c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c2>
 8022a2c:	b01b      	add	sp, #108	@ 0x6c
 8022a2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08022a32 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh>:
 8022a32:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022a36:	b08d      	sub	sp, #52	@ 0x34
 8022a38:	468b      	mov	fp, r1
 8022a3a:	e9dd 5c17 	ldrd	r5, ip, [sp, #92]	@ 0x5c
 8022a3e:	f89d 106c 	ldrb.w	r1, [sp, #108]	@ 0x6c
 8022a42:	fb0c 5703 	mla	r7, ip, r3, r5
 8022a46:	f1bc 0f00 	cmp.w	ip, #0
 8022a4a:	910b      	str	r1, [sp, #44]	@ 0x2c
 8022a4c:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8022a50:	f9bd e058 	ldrsh.w	lr, [sp, #88]	@ 0x58
 8022a54:	f89d 8064 	ldrb.w	r8, [sp, #100]	@ 0x64
 8022a58:	f89d a068 	ldrb.w	sl, [sp, #104]	@ 0x68
 8022a5c:	eb02 0607 	add.w	r6, r2, r7
 8022a60:	f89b 4000 	ldrb.w	r4, [fp]
 8022a64:	f89b 0001 	ldrb.w	r0, [fp, #1]
 8022a68:	f89b 1002 	ldrb.w	r1, [fp, #2]
 8022a6c:	f2c0 80c1 	blt.w	8022bf2 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1c0>
 8022a70:	45e6      	cmp	lr, ip
 8022a72:	f340 80be 	ble.w	8022bf2 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1c0>
 8022a76:	2d00      	cmp	r5, #0
 8022a78:	f2c0 80b7 	blt.w	8022bea <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1b8>
 8022a7c:	42ab      	cmp	r3, r5
 8022a7e:	f340 80b4 	ble.w	8022bea <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1b8>
 8022a82:	5dd2      	ldrb	r2, [r2, r7]
 8022a84:	9205      	str	r2, [sp, #20]
 8022a86:	7872      	ldrb	r2, [r6, #1]
 8022a88:	9206      	str	r2, [sp, #24]
 8022a8a:	78b2      	ldrb	r2, [r6, #2]
 8022a8c:	9207      	str	r2, [sp, #28]
 8022a8e:	1c6a      	adds	r2, r5, #1
 8022a90:	f100 80b6 	bmi.w	8022c00 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ce>
 8022a94:	4293      	cmp	r3, r2
 8022a96:	f340 80b3 	ble.w	8022c00 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ce>
 8022a9a:	f1b8 0f00 	cmp.w	r8, #0
 8022a9e:	f000 80af 	beq.w	8022c00 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ce>
 8022aa2:	78f2      	ldrb	r2, [r6, #3]
 8022aa4:	9201      	str	r2, [sp, #4]
 8022aa6:	7932      	ldrb	r2, [r6, #4]
 8022aa8:	9202      	str	r2, [sp, #8]
 8022aaa:	7972      	ldrb	r2, [r6, #5]
 8022aac:	9203      	str	r2, [sp, #12]
 8022aae:	f11c 0c01 	adds.w	ip, ip, #1
 8022ab2:	f100 80ad 	bmi.w	8022c10 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1de>
 8022ab6:	45e6      	cmp	lr, ip
 8022ab8:	f340 80aa 	ble.w	8022c10 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1de>
 8022abc:	f1ba 0f00 	cmp.w	sl, #0
 8022ac0:	f000 80a6 	beq.w	8022c10 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1de>
 8022ac4:	2d00      	cmp	r5, #0
 8022ac6:	f2c0 809f 	blt.w	8022c08 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1d6>
 8022aca:	42ab      	cmp	r3, r5
 8022acc:	f340 809c 	ble.w	8022c08 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1d6>
 8022ad0:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8022ad4:	f816 9002 	ldrb.w	r9, [r6, r2]
 8022ad8:	2203      	movs	r2, #3
 8022ada:	fb03 6c02 	mla	ip, r3, r2, r6
 8022ade:	f89c 7001 	ldrb.w	r7, [ip, #1]
 8022ae2:	f89c e002 	ldrb.w	lr, [ip, #2]
 8022ae6:	9704      	str	r7, [sp, #16]
 8022ae8:	3501      	adds	r5, #1
 8022aea:	f100 8098 	bmi.w	8022c1e <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ec>
 8022aee:	42ab      	cmp	r3, r5
 8022af0:	f340 8095 	ble.w	8022c1e <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ec>
 8022af4:	f1b8 0f00 	cmp.w	r8, #0
 8022af8:	f000 8091 	beq.w	8022c1e <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ec>
 8022afc:	f04f 0c03 	mov.w	ip, #3
 8022b00:	fb13 c20c 	smlabb	r2, r3, ip, ip
 8022b04:	5cb5      	ldrb	r5, [r6, r2]
 8022b06:	fb03 620c 	mla	r2, r3, ip, r6
 8022b0a:	fb03 630c 	mla	r3, r3, ip, r6
 8022b0e:	7912      	ldrb	r2, [r2, #4]
 8022b10:	795e      	ldrb	r6, [r3, #5]
 8022b12:	fa1f f388 	uxth.w	r3, r8
 8022b16:	fa1f fc8a 	uxth.w	ip, sl
 8022b1a:	fb03 f70c 	mul.w	r7, r3, ip
 8022b1e:	011b      	lsls	r3, r3, #4
 8022b20:	9708      	str	r7, [sp, #32]
 8022b22:	ebc7 1c0c 	rsb	ip, r7, ip, lsl #4
 8022b26:	f5c3 7a80 	rsb	sl, r3, #256	@ 0x100
 8022b2a:	1bdb      	subs	r3, r3, r7
 8022b2c:	f8bd 702c 	ldrh.w	r7, [sp, #44]	@ 0x2c
 8022b30:	fa1f fc8c 	uxth.w	ip, ip
 8022b34:	b29b      	uxth	r3, r3
 8022b36:	9709      	str	r7, [sp, #36]	@ 0x24
 8022b38:	ebaa 0a0c 	sub.w	sl, sl, ip
 8022b3c:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8022b3e:	930a      	str	r3, [sp, #40]	@ 0x28
 8022b40:	fa1f fa8a 	uxth.w	sl, sl
 8022b44:	ea6f 0807 	mvn.w	r8, r7
 8022b48:	9f01      	ldr	r7, [sp, #4]
 8022b4a:	435f      	muls	r7, r3
 8022b4c:	9b05      	ldr	r3, [sp, #20]
 8022b4e:	fa5f f888 	uxtb.w	r8, r8
 8022b52:	fb0a 7703 	mla	r7, sl, r3, r7
 8022b56:	9b08      	ldr	r3, [sp, #32]
 8022b58:	fb14 f408 	smulbb	r4, r4, r8
 8022b5c:	fb0c 7709 	mla	r7, ip, r9, r7
 8022b60:	fb10 f008 	smulbb	r0, r0, r8
 8022b64:	fb11 f108 	smulbb	r1, r1, r8
 8022b68:	fb03 7705 	mla	r7, r3, r5, r7
 8022b6c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8022b6e:	f3c7 2707 	ubfx	r7, r7, #8, #8
 8022b72:	fb07 4703 	mla	r7, r7, r3, r4
 8022b76:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8022b78:	b2bf      	uxth	r7, r7
 8022b7a:	1c7c      	adds	r4, r7, #1
 8022b7c:	eb04 2417 	add.w	r4, r4, r7, lsr #8
 8022b80:	1224      	asrs	r4, r4, #8
 8022b82:	f88b 4000 	strb.w	r4, [fp]
 8022b86:	9c02      	ldr	r4, [sp, #8]
 8022b88:	435c      	muls	r4, r3
 8022b8a:	9b06      	ldr	r3, [sp, #24]
 8022b8c:	fb0a 4403 	mla	r4, sl, r3, r4
 8022b90:	9b04      	ldr	r3, [sp, #16]
 8022b92:	fb0c 4403 	mla	r4, ip, r3, r4
 8022b96:	9b08      	ldr	r3, [sp, #32]
 8022b98:	fb03 4402 	mla	r4, r3, r2, r4
 8022b9c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8022b9e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8022ba0:	f3c4 2407 	ubfx	r4, r4, #8, #8
 8022ba4:	fb04 0403 	mla	r4, r4, r3, r0
 8022ba8:	9b03      	ldr	r3, [sp, #12]
 8022baa:	435a      	muls	r2, r3
 8022bac:	b2a4      	uxth	r4, r4
 8022bae:	4613      	mov	r3, r2
 8022bb0:	9a07      	ldr	r2, [sp, #28]
 8022bb2:	1c60      	adds	r0, r4, #1
 8022bb4:	fb0a 3a02 	mla	sl, sl, r2, r3
 8022bb8:	9b08      	ldr	r3, [sp, #32]
 8022bba:	eb00 2414 	add.w	r4, r0, r4, lsr #8
 8022bbe:	fb0c ac0e 	mla	ip, ip, lr, sl
 8022bc2:	1224      	asrs	r4, r4, #8
 8022bc4:	fb03 c606 	mla	r6, r3, r6, ip
 8022bc8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8022bca:	f88b 4001 	strb.w	r4, [fp, #1]
 8022bce:	f3c6 2607 	ubfx	r6, r6, #8, #8
 8022bd2:	fb06 1103 	mla	r1, r6, r3, r1
 8022bd6:	b289      	uxth	r1, r1
 8022bd8:	1c4e      	adds	r6, r1, #1
 8022bda:	eb06 2111 	add.w	r1, r6, r1, lsr #8
 8022bde:	1209      	asrs	r1, r1, #8
 8022be0:	f88b 1002 	strb.w	r1, [fp, #2]
 8022be4:	b00d      	add	sp, #52	@ 0x34
 8022be6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022bea:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8022bee:	9405      	str	r4, [sp, #20]
 8022bf0:	e74d      	b.n	8022a8e <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x5c>
 8022bf2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8022bf6:	9401      	str	r4, [sp, #4]
 8022bf8:	9405      	str	r4, [sp, #20]
 8022bfa:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8022bfe:	e756      	b.n	8022aae <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x7c>
 8022c00:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8022c04:	9401      	str	r4, [sp, #4]
 8022c06:	e752      	b.n	8022aae <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x7c>
 8022c08:	468e      	mov	lr, r1
 8022c0a:	9004      	str	r0, [sp, #16]
 8022c0c:	46a1      	mov	r9, r4
 8022c0e:	e76b      	b.n	8022ae8 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xb6>
 8022c10:	460e      	mov	r6, r1
 8022c12:	4602      	mov	r2, r0
 8022c14:	4625      	mov	r5, r4
 8022c16:	468e      	mov	lr, r1
 8022c18:	9004      	str	r0, [sp, #16]
 8022c1a:	46a1      	mov	r9, r4
 8022c1c:	e779      	b.n	8022b12 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xe0>
 8022c1e:	460e      	mov	r6, r1
 8022c20:	4602      	mov	r2, r0
 8022c22:	4625      	mov	r5, r4
 8022c24:	e775      	b.n	8022b12 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xe0>

08022c26 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8022c26:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022c2a:	b09f      	sub	sp, #124	@ 0x7c
 8022c2c:	920e      	str	r2, [sp, #56]	@ 0x38
 8022c2e:	9307      	str	r3, [sp, #28]
 8022c30:	9a2d      	ldr	r2, [sp, #180]	@ 0xb4
 8022c32:	f89d 30c4 	ldrb.w	r3, [sp, #196]	@ 0xc4
 8022c36:	901d      	str	r0, [sp, #116]	@ 0x74
 8022c38:	930c      	str	r3, [sp, #48]	@ 0x30
 8022c3a:	6850      	ldr	r0, [r2, #4]
 8022c3c:	910b      	str	r1, [sp, #44]	@ 0x2c
 8022c3e:	6812      	ldr	r2, [r2, #0]
 8022c40:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	@ 0xb8
 8022c44:	e9dd a829 	ldrd	sl, r8, [sp, #164]	@ 0xa4
 8022c48:	fb00 1303 	mla	r3, r0, r3, r1
 8022c4c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8022c50:	18d3      	adds	r3, r2, r3
 8022c52:	9308      	str	r3, [sp, #32]
 8022c54:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 8022c56:	681b      	ldr	r3, [r3, #0]
 8022c58:	930a      	str	r3, [sp, #40]	@ 0x28
 8022c5a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8022c5c:	43db      	mvns	r3, r3
 8022c5e:	b2db      	uxtb	r3, r3
 8022c60:	9309      	str	r3, [sp, #36]	@ 0x24
 8022c62:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8022c64:	2b00      	cmp	r3, #0
 8022c66:	dc03      	bgt.n	8022c70 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 8022c68:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8022c6a:	2b00      	cmp	r3, #0
 8022c6c:	f340 81f5 	ble.w	802305a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x434>
 8022c70:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 8022c72:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8022c76:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8022c7a:	1e48      	subs	r0, r1, #1
 8022c7c:	1e54      	subs	r4, r2, #1
 8022c7e:	9b07      	ldr	r3, [sp, #28]
 8022c80:	2b00      	cmp	r3, #0
 8022c82:	f340 80d5 	ble.w	8022e30 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20a>
 8022c86:	ea5f 452a 	movs.w	r5, sl, asr #16
 8022c8a:	ea4f 4328 	mov.w	r3, r8, asr #16
 8022c8e:	d406      	bmi.n	8022c9e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8022c90:	4285      	cmp	r5, r0
 8022c92:	da04      	bge.n	8022c9e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8022c94:	2b00      	cmp	r3, #0
 8022c96:	db02      	blt.n	8022c9e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8022c98:	42a3      	cmp	r3, r4
 8022c9a:	f2c0 80ca 	blt.w	8022e32 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20c>
 8022c9e:	3501      	adds	r5, #1
 8022ca0:	f100 80bb 	bmi.w	8022e1a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f4>
 8022ca4:	42a9      	cmp	r1, r5
 8022ca6:	f2c0 80b8 	blt.w	8022e1a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f4>
 8022caa:	3301      	adds	r3, #1
 8022cac:	f100 80b5 	bmi.w	8022e1a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f4>
 8022cb0:	429a      	cmp	r2, r3
 8022cb2:	f2c0 80b2 	blt.w	8022e1a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f4>
 8022cb6:	9b07      	ldr	r3, [sp, #28]
 8022cb8:	9d08      	ldr	r5, [sp, #32]
 8022cba:	930d      	str	r3, [sp, #52]	@ 0x34
 8022cbc:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8022cbe:	2b00      	cmp	r3, #0
 8022cc0:	f340 80d6 	ble.w	8022e70 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x24a>
 8022cc4:	9830      	ldr	r0, [sp, #192]	@ 0xc0
 8022cc6:	ea4f 4428 	mov.w	r4, r8, asr #16
 8022cca:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 8022ccc:	f3ca 3203 	ubfx	r2, sl, #12, #4
 8022cd0:	68c6      	ldr	r6, [r0, #12]
 8022cd2:	ea5f 402a 	movs.w	r0, sl, asr #16
 8022cd6:	f3c8 3103 	ubfx	r1, r8, #12, #4
 8022cda:	689b      	ldr	r3, [r3, #8]
 8022cdc:	f100 810f 	bmi.w	8022efe <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 8022ce0:	1e5f      	subs	r7, r3, #1
 8022ce2:	42b8      	cmp	r0, r7
 8022ce4:	f280 810b 	bge.w	8022efe <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 8022ce8:	2c00      	cmp	r4, #0
 8022cea:	f2c0 8108 	blt.w	8022efe <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 8022cee:	1e77      	subs	r7, r6, #1
 8022cf0:	42bc      	cmp	r4, r7
 8022cf2:	f280 8104 	bge.w	8022efe <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 8022cf6:	b21b      	sxth	r3, r3
 8022cf8:	fb04 0003 	mla	r0, r4, r3, r0
 8022cfc:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8022cfe:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8022d02:	1826      	adds	r6, r4, r0
 8022d04:	5c24      	ldrb	r4, [r4, r0]
 8022d06:	78b7      	ldrb	r7, [r6, #2]
 8022d08:	7870      	ldrb	r0, [r6, #1]
 8022d0a:	970f      	str	r7, [sp, #60]	@ 0x3c
 8022d0c:	7977      	ldrb	r7, [r6, #5]
 8022d0e:	f896 e003 	ldrb.w	lr, [r6, #3]
 8022d12:	f896 c004 	ldrb.w	ip, [r6, #4]
 8022d16:	9710      	str	r7, [sp, #64]	@ 0x40
 8022d18:	b1c9      	cbz	r1, 8022d4e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
 8022d1a:	f04f 0b03 	mov.w	fp, #3
 8022d1e:	f06f 0904 	mvn.w	r9, #4
 8022d22:	3605      	adds	r6, #5
 8022d24:	fb13 930b 	smlabb	r3, r3, fp, r9
 8022d28:	eb06 0b03 	add.w	fp, r6, r3
 8022d2c:	5cf3      	ldrb	r3, [r6, r3]
 8022d2e:	9311      	str	r3, [sp, #68]	@ 0x44
 8022d30:	f89b 3001 	ldrb.w	r3, [fp, #1]
 8022d34:	9313      	str	r3, [sp, #76]	@ 0x4c
 8022d36:	f89b 3002 	ldrb.w	r3, [fp, #2]
 8022d3a:	9315      	str	r3, [sp, #84]	@ 0x54
 8022d3c:	f89b 3003 	ldrb.w	r3, [fp, #3]
 8022d40:	9312      	str	r3, [sp, #72]	@ 0x48
 8022d42:	f89b 3004 	ldrb.w	r3, [fp, #4]
 8022d46:	9314      	str	r3, [sp, #80]	@ 0x50
 8022d48:	f89b 3005 	ldrb.w	r3, [fp, #5]
 8022d4c:	9316      	str	r3, [sp, #88]	@ 0x58
 8022d4e:	b292      	uxth	r2, r2
 8022d50:	9f11      	ldr	r7, [sp, #68]	@ 0x44
 8022d52:	b289      	uxth	r1, r1
 8022d54:	f8bd 3030 	ldrh.w	r3, [sp, #48]	@ 0x30
 8022d58:	fb02 f601 	mul.w	r6, r2, r1
 8022d5c:	0112      	lsls	r2, r2, #4
 8022d5e:	ebc6 1101 	rsb	r1, r6, r1, lsl #4
 8022d62:	f5c2 7980 	rsb	r9, r2, #256	@ 0x100
 8022d66:	1b92      	subs	r2, r2, r6
 8022d68:	b289      	uxth	r1, r1
 8022d6a:	b292      	uxth	r2, r2
 8022d6c:	eba9 0901 	sub.w	r9, r9, r1
 8022d70:	fb02 fe0e 	mul.w	lr, r2, lr
 8022d74:	fa1f f989 	uxth.w	r9, r9
 8022d78:	fb02 fc0c 	mul.w	ip, r2, ip
 8022d7c:	fb09 e404 	mla	r4, r9, r4, lr
 8022d80:	f895 e000 	ldrb.w	lr, [r5]
 8022d84:	fb09 c000 	mla	r0, r9, r0, ip
 8022d88:	fb01 4407 	mla	r4, r1, r7, r4
 8022d8c:	9f12      	ldr	r7, [sp, #72]	@ 0x48
 8022d8e:	fb06 4407 	mla	r4, r6, r7, r4
 8022d92:	9f09      	ldr	r7, [sp, #36]	@ 0x24
 8022d94:	fb1e fe07 	smulbb	lr, lr, r7
 8022d98:	f3c4 2407 	ubfx	r4, r4, #8, #8
 8022d9c:	fb04 e403 	mla	r4, r4, r3, lr
 8022da0:	b2a4      	uxth	r4, r4
 8022da2:	f104 0e01 	add.w	lr, r4, #1
 8022da6:	eb0e 2e14 	add.w	lr, lr, r4, lsr #8
 8022daa:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8022dac:	fb01 0004 	mla	r0, r1, r4, r0
 8022db0:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 8022db2:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8022db6:	fb06 0004 	mla	r0, r6, r4, r0
 8022dba:	786c      	ldrb	r4, [r5, #1]
 8022dbc:	f885 e000 	strb.w	lr, [r5]
 8022dc0:	fb14 f407 	smulbb	r4, r4, r7
 8022dc4:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8022dc8:	fb00 4003 	mla	r0, r0, r3, r4
 8022dcc:	b280      	uxth	r0, r0
 8022dce:	1c44      	adds	r4, r0, #1
 8022dd0:	eb04 2010 	add.w	r0, r4, r0, lsr #8
 8022dd4:	1200      	asrs	r0, r0, #8
 8022dd6:	7068      	strb	r0, [r5, #1]
 8022dd8:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8022dda:	4342      	muls	r2, r0
 8022ddc:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 8022dde:	fb09 2200 	mla	r2, r9, r0, r2
 8022de2:	9815      	ldr	r0, [sp, #84]	@ 0x54
 8022de4:	fb01 2100 	mla	r1, r1, r0, r2
 8022de8:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8022dea:	fb06 1602 	mla	r6, r6, r2, r1
 8022dee:	78a9      	ldrb	r1, [r5, #2]
 8022df0:	fb11 f107 	smulbb	r1, r1, r7
 8022df4:	f3c6 2607 	ubfx	r6, r6, #8, #8
 8022df8:	fb06 1303 	mla	r3, r6, r3, r1
 8022dfc:	b29b      	uxth	r3, r3
 8022dfe:	1c5e      	adds	r6, r3, #1
 8022e00:	eb06 2313 	add.w	r3, r6, r3, lsr #8
 8022e04:	121b      	asrs	r3, r3, #8
 8022e06:	70ab      	strb	r3, [r5, #2]
 8022e08:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 8022e0a:	3503      	adds	r5, #3
 8022e0c:	449a      	add	sl, r3
 8022e0e:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 8022e10:	4498      	add	r8, r3
 8022e12:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8022e14:	3b01      	subs	r3, #1
 8022e16:	930d      	str	r3, [sp, #52]	@ 0x34
 8022e18:	e750      	b.n	8022cbc <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8022e1a:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 8022e1c:	449a      	add	sl, r3
 8022e1e:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 8022e20:	4498      	add	r8, r3
 8022e22:	9b07      	ldr	r3, [sp, #28]
 8022e24:	3b01      	subs	r3, #1
 8022e26:	9307      	str	r3, [sp, #28]
 8022e28:	9b08      	ldr	r3, [sp, #32]
 8022e2a:	3303      	adds	r3, #3
 8022e2c:	9308      	str	r3, [sp, #32]
 8022e2e:	e726      	b.n	8022c7e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 8022e30:	d026      	beq.n	8022e80 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25a>
 8022e32:	9b07      	ldr	r3, [sp, #28]
 8022e34:	982b      	ldr	r0, [sp, #172]	@ 0xac
 8022e36:	3b01      	subs	r3, #1
 8022e38:	fb00 a003 	mla	r0, r0, r3, sl
 8022e3c:	1400      	asrs	r0, r0, #16
 8022e3e:	f53f af3a 	bmi.w	8022cb6 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8022e42:	3901      	subs	r1, #1
 8022e44:	4288      	cmp	r0, r1
 8022e46:	f6bf af36 	bge.w	8022cb6 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8022e4a:	992c      	ldr	r1, [sp, #176]	@ 0xb0
 8022e4c:	fb01 8303 	mla	r3, r1, r3, r8
 8022e50:	141b      	asrs	r3, r3, #16
 8022e52:	f53f af30 	bmi.w	8022cb6 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8022e56:	3a01      	subs	r2, #1
 8022e58:	4293      	cmp	r3, r2
 8022e5a:	f6bf af2c 	bge.w	8022cb6 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8022e5e:	9b08      	ldr	r3, [sp, #32]
 8022e60:	f8dd c01c 	ldr.w	ip, [sp, #28]
 8022e64:	1cdd      	adds	r5, r3, #3
 8022e66:	f8bd e030 	ldrh.w	lr, [sp, #48]	@ 0x30
 8022e6a:	f1bc 0f00 	cmp.w	ip, #0
 8022e6e:	dc5f      	bgt.n	8022f30 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30a>
 8022e70:	9b07      	ldr	r3, [sp, #28]
 8022e72:	9a08      	ldr	r2, [sp, #32]
 8022e74:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8022e78:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8022e7c:	441a      	add	r2, r3
 8022e7e:	9208      	str	r2, [sp, #32]
 8022e80:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8022e82:	2b00      	cmp	r3, #0
 8022e84:	f340 80e9 	ble.w	802305a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x434>
 8022e88:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8022e8c:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8022e8e:	ee30 0a04 	vadd.f32	s0, s0, s8
 8022e92:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8022e96:	eef0 6a62 	vmov.f32	s13, s5
 8022e9a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8022e9e:	ee31 1a05 	vadd.f32	s2, s2, s10
 8022ea2:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8022ea6:	ee16 aa90 	vmov	sl, s13
 8022eaa:	eef0 6a43 	vmov.f32	s13, s6
 8022eae:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8022eb2:	ee16 8a90 	vmov	r8, s13
 8022eb6:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8022eba:	ee61 7a27 	vmul.f32	s15, s2, s15
 8022ebe:	ee77 2a62 	vsub.f32	s5, s14, s5
 8022ec2:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8022ec6:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8022eca:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8022ece:	ee12 2a90 	vmov	r2, s5
 8022ed2:	eef0 2a47 	vmov.f32	s5, s14
 8022ed6:	fb92 f3f3 	sdiv	r3, r2, r3
 8022eda:	ee13 2a10 	vmov	r2, s6
 8022ede:	932b      	str	r3, [sp, #172]	@ 0xac
 8022ee0:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8022ee2:	eeb0 3a67 	vmov.f32	s6, s15
 8022ee6:	fb92 f3f3 	sdiv	r3, r2, r3
 8022eea:	932c      	str	r3, [sp, #176]	@ 0xb0
 8022eec:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8022eee:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8022ef0:	3b01      	subs	r3, #1
 8022ef2:	930b      	str	r3, [sp, #44]	@ 0x2c
 8022ef4:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8022ef6:	bf08      	it	eq
 8022ef8:	4613      	moveq	r3, r2
 8022efa:	9307      	str	r3, [sp, #28]
 8022efc:	e6b1      	b.n	8022c62 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 8022efe:	1c47      	adds	r7, r0, #1
 8022f00:	d482      	bmi.n	8022e08 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 8022f02:	42bb      	cmp	r3, r7
 8022f04:	db80      	blt.n	8022e08 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 8022f06:	1c67      	adds	r7, r4, #1
 8022f08:	f53f af7e 	bmi.w	8022e08 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 8022f0c:	42be      	cmp	r6, r7
 8022f0e:	f6ff af7b 	blt.w	8022e08 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 8022f12:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
 8022f14:	b236      	sxth	r6, r6
 8022f16:	9001      	str	r0, [sp, #4]
 8022f18:	b21b      	sxth	r3, r3
 8022f1a:	9600      	str	r6, [sp, #0]
 8022f1c:	981d      	ldr	r0, [sp, #116]	@ 0x74
 8022f1e:	e9cd 1704 	strd	r1, r7, [sp, #16]
 8022f22:	e9cd 4202 	strd	r4, r2, [sp, #8]
 8022f26:	4629      	mov	r1, r5
 8022f28:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8022f2a:	f7ff fd82 	bl	8022a32 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh>
 8022f2e:	e76b      	b.n	8022e08 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 8022f30:	9930      	ldr	r1, [sp, #192]	@ 0xc0
 8022f32:	ea4f 402a 	mov.w	r0, sl, asr #16
 8022f36:	f3c8 3203 	ubfx	r2, r8, #12, #4
 8022f3a:	f3ca 3303 	ubfx	r3, sl, #12, #4
 8022f3e:	f9b1 7008 	ldrsh.w	r7, [r1, #8]
 8022f42:	ea4f 4128 	mov.w	r1, r8, asr #16
 8022f46:	fb07 0101 	mla	r1, r7, r1, r0
 8022f4a:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8022f4c:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8022f50:	1844      	adds	r4, r0, r1
 8022f52:	5c40      	ldrb	r0, [r0, r1]
 8022f54:	78a6      	ldrb	r6, [r4, #2]
 8022f56:	7861      	ldrb	r1, [r4, #1]
 8022f58:	960f      	str	r6, [sp, #60]	@ 0x3c
 8022f5a:	78e6      	ldrb	r6, [r4, #3]
 8022f5c:	910d      	str	r1, [sp, #52]	@ 0x34
 8022f5e:	9610      	str	r6, [sp, #64]	@ 0x40
 8022f60:	f894 9004 	ldrb.w	r9, [r4, #4]
 8022f64:	f894 b005 	ldrb.w	fp, [r4, #5]
 8022f68:	b192      	cbz	r2, 8022f90 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36a>
 8022f6a:	f06f 0604 	mvn.w	r6, #4
 8022f6e:	2103      	movs	r1, #3
 8022f70:	3405      	adds	r4, #5
 8022f72:	fb17 6701 	smlabb	r7, r7, r1, r6
 8022f76:	19e6      	adds	r6, r4, r7
 8022f78:	5de4      	ldrb	r4, [r4, r7]
 8022f7a:	9417      	str	r4, [sp, #92]	@ 0x5c
 8022f7c:	7874      	ldrb	r4, [r6, #1]
 8022f7e:	9419      	str	r4, [sp, #100]	@ 0x64
 8022f80:	78b4      	ldrb	r4, [r6, #2]
 8022f82:	941b      	str	r4, [sp, #108]	@ 0x6c
 8022f84:	78f4      	ldrb	r4, [r6, #3]
 8022f86:	9418      	str	r4, [sp, #96]	@ 0x60
 8022f88:	7934      	ldrb	r4, [r6, #4]
 8022f8a:	941a      	str	r4, [sp, #104]	@ 0x68
 8022f8c:	7974      	ldrb	r4, [r6, #5]
 8022f8e:	941c      	str	r4, [sp, #112]	@ 0x70
 8022f90:	b29b      	uxth	r3, r3
 8022f92:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 8022f94:	b292      	uxth	r2, r2
 8022f96:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8022f98:	3503      	adds	r5, #3
 8022f9a:	f10c 3cff 	add.w	ip, ip, #4294967295
 8022f9e:	fb03 f402 	mul.w	r4, r3, r2
 8022fa2:	011b      	lsls	r3, r3, #4
 8022fa4:	ebc4 1202 	rsb	r2, r4, r2, lsl #4
 8022fa8:	f5c3 7680 	rsb	r6, r3, #256	@ 0x100
 8022fac:	1b1b      	subs	r3, r3, r4
 8022fae:	b292      	uxth	r2, r2
 8022fb0:	b29b      	uxth	r3, r3
 8022fb2:	1ab6      	subs	r6, r6, r2
 8022fb4:	435f      	muls	r7, r3
 8022fb6:	b2b6      	uxth	r6, r6
 8022fb8:	fb03 f909 	mul.w	r9, r3, r9
 8022fbc:	fb03 fb0b 	mul.w	fp, r3, fp
 8022fc0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8022fc2:	fb06 7000 	mla	r0, r6, r0, r7
 8022fc6:	9f17      	ldr	r7, [sp, #92]	@ 0x5c
 8022fc8:	fb06 bb03 	mla	fp, r6, r3, fp
 8022fcc:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8022fce:	fb02 0007 	mla	r0, r2, r7, r0
 8022fd2:	9f18      	ldr	r7, [sp, #96]	@ 0x60
 8022fd4:	fb02 bb03 	mla	fp, r2, r3, fp
 8022fd8:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8022fda:	fb04 0007 	mla	r0, r4, r7, r0
 8022fde:	f815 7c06 	ldrb.w	r7, [r5, #-6]
 8022fe2:	fb17 f701 	smulbb	r7, r7, r1
 8022fe6:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8022fea:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8022fec:	fb00 700e 	mla	r0, r0, lr, r7
 8022ff0:	fb06 9101 	mla	r1, r6, r1, r9
 8022ff4:	b280      	uxth	r0, r0
 8022ff6:	1c47      	adds	r7, r0, #1
 8022ff8:	eb07 2010 	add.w	r0, r7, r0, lsr #8
 8022ffc:	9f09      	ldr	r7, [sp, #36]	@ 0x24
 8022ffe:	1200      	asrs	r0, r0, #8
 8023000:	f805 0c06 	strb.w	r0, [r5, #-6]
 8023004:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8023006:	fb02 1100 	mla	r1, r2, r0, r1
 802300a:	981a      	ldr	r0, [sp, #104]	@ 0x68
 802300c:	fb04 1100 	mla	r1, r4, r0, r1
 8023010:	f815 0c05 	ldrb.w	r0, [r5, #-5]
 8023014:	fb04 b403 	mla	r4, r4, r3, fp
 8023018:	f815 3c04 	ldrb.w	r3, [r5, #-4]
 802301c:	fb10 f007 	smulbb	r0, r0, r7
 8023020:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8023024:	fb13 f307 	smulbb	r3, r3, r7
 8023028:	f3c4 2407 	ubfx	r4, r4, #8, #8
 802302c:	fb01 010e 	mla	r1, r1, lr, r0
 8023030:	fb04 340e 	mla	r4, r4, lr, r3
 8023034:	b289      	uxth	r1, r1
 8023036:	b2a4      	uxth	r4, r4
 8023038:	1c48      	adds	r0, r1, #1
 802303a:	1c63      	adds	r3, r4, #1
 802303c:	eb00 2111 	add.w	r1, r0, r1, lsr #8
 8023040:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 8023044:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 8023046:	1209      	asrs	r1, r1, #8
 8023048:	1224      	asrs	r4, r4, #8
 802304a:	449a      	add	sl, r3
 802304c:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 802304e:	f805 1c05 	strb.w	r1, [r5, #-5]
 8023052:	f805 4c04 	strb.w	r4, [r5, #-4]
 8023056:	4498      	add	r8, r3
 8023058:	e707      	b.n	8022e6a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x244>
 802305a:	b01f      	add	sp, #124	@ 0x7c
 802305c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08023060 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh>:
 8023060:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023064:	b087      	sub	sp, #28
 8023066:	780d      	ldrb	r5, [r1, #0]
 8023068:	784c      	ldrb	r4, [r1, #1]
 802306a:	f89d 004c 	ldrb.w	r0, [sp, #76]	@ 0x4c
 802306e:	f9bd 7040 	ldrsh.w	r7, [sp, #64]	@ 0x40
 8023072:	9004      	str	r0, [sp, #16]
 8023074:	f89d 0050 	ldrb.w	r0, [sp, #80]	@ 0x50
 8023078:	e9dd b611 	ldrd	fp, r6, [sp, #68]	@ 0x44
 802307c:	9005      	str	r0, [sp, #20]
 802307e:	fb06 bc03 	mla	ip, r6, r3, fp
 8023082:	2e00      	cmp	r6, #0
 8023084:	7888      	ldrb	r0, [r1, #2]
 8023086:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 802308a:	eb02 090c 	add.w	r9, r2, ip
 802308e:	f2c0 8084 	blt.w	802319a <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x13a>
 8023092:	42b7      	cmp	r7, r6
 8023094:	f340 8081 	ble.w	802319a <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x13a>
 8023098:	f1bb 0f00 	cmp.w	fp, #0
 802309c:	db79      	blt.n	8023192 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x132>
 802309e:	455b      	cmp	r3, fp
 80230a0:	dd77      	ble.n	8023192 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x132>
 80230a2:	f812 200c 	ldrb.w	r2, [r2, ip]
 80230a6:	9201      	str	r2, [sp, #4]
 80230a8:	f899 2001 	ldrb.w	r2, [r9, #1]
 80230ac:	9202      	str	r2, [sp, #8]
 80230ae:	f899 2002 	ldrb.w	r2, [r9, #2]
 80230b2:	9203      	str	r2, [sp, #12]
 80230b4:	f11b 0201 	adds.w	r2, fp, #1
 80230b8:	d476      	bmi.n	80231a8 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x148>
 80230ba:	4293      	cmp	r3, r2
 80230bc:	dd74      	ble.n	80231a8 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x148>
 80230be:	9a04      	ldr	r2, [sp, #16]
 80230c0:	2a00      	cmp	r2, #0
 80230c2:	d071      	beq.n	80231a8 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x148>
 80230c4:	f899 8003 	ldrb.w	r8, [r9, #3]
 80230c8:	f899 c004 	ldrb.w	ip, [r9, #4]
 80230cc:	f899 a005 	ldrb.w	sl, [r9, #5]
 80230d0:	3601      	adds	r6, #1
 80230d2:	d471      	bmi.n	80231b8 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x158>
 80230d4:	42b7      	cmp	r7, r6
 80230d6:	dd6f      	ble.n	80231b8 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x158>
 80230d8:	9a05      	ldr	r2, [sp, #20]
 80230da:	2a00      	cmp	r2, #0
 80230dc:	d06c      	beq.n	80231b8 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x158>
 80230de:	f1bb 0f00 	cmp.w	fp, #0
 80230e2:	db65      	blt.n	80231b0 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x150>
 80230e4:	455b      	cmp	r3, fp
 80230e6:	dd63      	ble.n	80231b0 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x150>
 80230e8:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 80230ec:	f819 e002 	ldrb.w	lr, [r9, r2]
 80230f0:	2203      	movs	r2, #3
 80230f2:	fb03 9602 	mla	r6, r3, r2, r9
 80230f6:	7877      	ldrb	r7, [r6, #1]
 80230f8:	78b6      	ldrb	r6, [r6, #2]
 80230fa:	f11b 0b01 	adds.w	fp, fp, #1
 80230fe:	d40c      	bmi.n	802311a <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xba>
 8023100:	455b      	cmp	r3, fp
 8023102:	dd0a      	ble.n	802311a <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xba>
 8023104:	9a04      	ldr	r2, [sp, #16]
 8023106:	b142      	cbz	r2, 802311a <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xba>
 8023108:	2203      	movs	r2, #3
 802310a:	fb13 2002 	smlabb	r0, r3, r2, r2
 802310e:	f819 5000 	ldrb.w	r5, [r9, r0]
 8023112:	fb03 9002 	mla	r0, r3, r2, r9
 8023116:	7904      	ldrb	r4, [r0, #4]
 8023118:	7940      	ldrb	r0, [r0, #5]
 802311a:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 802311e:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 8023122:	fb03 fb02 	mul.w	fp, r3, r2
 8023126:	011b      	lsls	r3, r3, #4
 8023128:	ebcb 1202 	rsb	r2, fp, r2, lsl #4
 802312c:	f5c3 7980 	rsb	r9, r3, #256	@ 0x100
 8023130:	eba3 030b 	sub.w	r3, r3, fp
 8023134:	b292      	uxth	r2, r2
 8023136:	b29b      	uxth	r3, r3
 8023138:	eba9 0902 	sub.w	r9, r9, r2
 802313c:	9304      	str	r3, [sp, #16]
 802313e:	fa1f f989 	uxth.w	r9, r9
 8023142:	fb03 f808 	mul.w	r8, r3, r8
 8023146:	9b01      	ldr	r3, [sp, #4]
 8023148:	fb09 8803 	mla	r8, r9, r3, r8
 802314c:	9b04      	ldr	r3, [sp, #16]
 802314e:	fb03 fc0c 	mul.w	ip, r3, ip
 8023152:	9b02      	ldr	r3, [sp, #8]
 8023154:	fb02 880e 	mla	r8, r2, lr, r8
 8023158:	fb09 cc03 	mla	ip, r9, r3, ip
 802315c:	9b04      	ldr	r3, [sp, #16]
 802315e:	fb0b 8805 	mla	r8, fp, r5, r8
 8023162:	fb02 c707 	mla	r7, r2, r7, ip
 8023166:	fb03 f30a 	mul.w	r3, r3, sl
 802316a:	ea4f 2828 	mov.w	r8, r8, asr #8
 802316e:	fb0b 7404 	mla	r4, fp, r4, r7
 8023172:	f881 8000 	strb.w	r8, [r1]
 8023176:	1224      	asrs	r4, r4, #8
 8023178:	704c      	strb	r4, [r1, #1]
 802317a:	9c03      	ldr	r4, [sp, #12]
 802317c:	fb09 3904 	mla	r9, r9, r4, r3
 8023180:	fb02 9206 	mla	r2, r2, r6, r9
 8023184:	fb0b 2000 	mla	r0, fp, r0, r2
 8023188:	1200      	asrs	r0, r0, #8
 802318a:	7088      	strb	r0, [r1, #2]
 802318c:	b007      	add	sp, #28
 802318e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023192:	e9cd 4002 	strd	r4, r0, [sp, #8]
 8023196:	9501      	str	r5, [sp, #4]
 8023198:	e78c      	b.n	80230b4 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x54>
 802319a:	4682      	mov	sl, r0
 802319c:	46a4      	mov	ip, r4
 802319e:	46a8      	mov	r8, r5
 80231a0:	9501      	str	r5, [sp, #4]
 80231a2:	e9cd 4002 	strd	r4, r0, [sp, #8]
 80231a6:	e793      	b.n	80230d0 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x70>
 80231a8:	4682      	mov	sl, r0
 80231aa:	46a4      	mov	ip, r4
 80231ac:	46a8      	mov	r8, r5
 80231ae:	e78f      	b.n	80230d0 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x70>
 80231b0:	4606      	mov	r6, r0
 80231b2:	4627      	mov	r7, r4
 80231b4:	46ae      	mov	lr, r5
 80231b6:	e7a0      	b.n	80230fa <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x9a>
 80231b8:	4606      	mov	r6, r0
 80231ba:	4627      	mov	r7, r4
 80231bc:	46ae      	mov	lr, r5
 80231be:	e7ac      	b.n	802311a <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xba>

080231c0 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80231c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80231c4:	b09b      	sub	sp, #108	@ 0x6c
 80231c6:	920b      	str	r2, [sp, #44]	@ 0x2c
 80231c8:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 80231ca:	9019      	str	r0, [sp, #100]	@ 0x64
 80231cc:	9109      	str	r1, [sp, #36]	@ 0x24
 80231ce:	6850      	ldr	r0, [r2, #4]
 80231d0:	9306      	str	r3, [sp, #24]
 80231d2:	6812      	ldr	r2, [r2, #0]
 80231d4:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	@ 0xa8
 80231d8:	e9dd b425 	ldrd	fp, r4, [sp, #148]	@ 0x94
 80231dc:	fb00 1303 	mla	r3, r0, r3, r1
 80231e0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80231e4:	18d3      	adds	r3, r2, r3
 80231e6:	9307      	str	r3, [sp, #28]
 80231e8:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 80231ea:	681b      	ldr	r3, [r3, #0]
 80231ec:	9308      	str	r3, [sp, #32]
 80231ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80231f0:	2b00      	cmp	r3, #0
 80231f2:	dc03      	bgt.n	80231fc <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 80231f4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80231f6:	2b00      	cmp	r3, #0
 80231f8:	f340 81ab 	ble.w	8023552 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x392>
 80231fc:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 80231fe:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8023202:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8023206:	1e48      	subs	r0, r1, #1
 8023208:	1e55      	subs	r5, r2, #1
 802320a:	9b06      	ldr	r3, [sp, #24]
 802320c:	2b00      	cmp	r3, #0
 802320e:	f340 80b1 	ble.w	8023374 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 8023212:	ea5f 462b 	movs.w	r6, fp, asr #16
 8023216:	ea4f 4324 	mov.w	r3, r4, asr #16
 802321a:	d406      	bmi.n	802322a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 802321c:	4286      	cmp	r6, r0
 802321e:	da04      	bge.n	802322a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 8023220:	2b00      	cmp	r3, #0
 8023222:	db02      	blt.n	802322a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 8023224:	42ab      	cmp	r3, r5
 8023226:	f2c0 80a6 	blt.w	8023376 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b6>
 802322a:	3601      	adds	r6, #1
 802322c:	f100 8097 	bmi.w	802335e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19e>
 8023230:	42b1      	cmp	r1, r6
 8023232:	f2c0 8094 	blt.w	802335e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19e>
 8023236:	3301      	adds	r3, #1
 8023238:	f100 8091 	bmi.w	802335e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19e>
 802323c:	429a      	cmp	r2, r3
 802323e:	f2c0 808e 	blt.w	802335e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19e>
 8023242:	9b06      	ldr	r3, [sp, #24]
 8023244:	9e07      	ldr	r6, [sp, #28]
 8023246:	930a      	str	r3, [sp, #40]	@ 0x28
 8023248:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802324a:	2b00      	cmp	r3, #0
 802324c:	f340 80b0 	ble.w	80233b0 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 8023250:	982c      	ldr	r0, [sp, #176]	@ 0xb0
 8023252:	1425      	asrs	r5, r4, #16
 8023254:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 8023256:	f3cb 3203 	ubfx	r2, fp, #12, #4
 802325a:	68c7      	ldr	r7, [r0, #12]
 802325c:	ea5f 402b 	movs.w	r0, fp, asr #16
 8023260:	f3c4 3103 	ubfx	r1, r4, #12, #4
 8023264:	689b      	ldr	r3, [r3, #8]
 8023266:	f100 80ea 	bmi.w	802343e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 802326a:	f103 3cff 	add.w	ip, r3, #4294967295
 802326e:	4560      	cmp	r0, ip
 8023270:	f280 80e5 	bge.w	802343e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 8023274:	2d00      	cmp	r5, #0
 8023276:	f2c0 80e2 	blt.w	802343e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 802327a:	f107 3cff 	add.w	ip, r7, #4294967295
 802327e:	4565      	cmp	r5, ip
 8023280:	f280 80dd 	bge.w	802343e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 8023284:	b21b      	sxth	r3, r3
 8023286:	fb05 0003 	mla	r0, r5, r3, r0
 802328a:	9d08      	ldr	r5, [sp, #32]
 802328c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8023290:	182f      	adds	r7, r5, r0
 8023292:	5c2d      	ldrb	r5, [r5, r0]
 8023294:	7878      	ldrb	r0, [r7, #1]
 8023296:	f897 e002 	ldrb.w	lr, [r7, #2]
 802329a:	900c      	str	r0, [sp, #48]	@ 0x30
 802329c:	f897 9003 	ldrb.w	r9, [r7, #3]
 80232a0:	f897 8004 	ldrb.w	r8, [r7, #4]
 80232a4:	f897 a005 	ldrb.w	sl, [r7, #5]
 80232a8:	b1c9      	cbz	r1, 80232de <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11e>
 80232aa:	f04f 0c03 	mov.w	ip, #3
 80232ae:	f06f 0004 	mvn.w	r0, #4
 80232b2:	3705      	adds	r7, #5
 80232b4:	fb13 030c 	smlabb	r3, r3, ip, r0
 80232b8:	eb07 0c03 	add.w	ip, r7, r3
 80232bc:	5cfb      	ldrb	r3, [r7, r3]
 80232be:	930d      	str	r3, [sp, #52]	@ 0x34
 80232c0:	f89c 3001 	ldrb.w	r3, [ip, #1]
 80232c4:	930f      	str	r3, [sp, #60]	@ 0x3c
 80232c6:	f89c 3002 	ldrb.w	r3, [ip, #2]
 80232ca:	9311      	str	r3, [sp, #68]	@ 0x44
 80232cc:	f89c 3003 	ldrb.w	r3, [ip, #3]
 80232d0:	930e      	str	r3, [sp, #56]	@ 0x38
 80232d2:	f89c 3004 	ldrb.w	r3, [ip, #4]
 80232d6:	9310      	str	r3, [sp, #64]	@ 0x40
 80232d8:	f89c 3005 	ldrb.w	r3, [ip, #5]
 80232dc:	9312      	str	r3, [sp, #72]	@ 0x48
 80232de:	b292      	uxth	r2, r2
 80232e0:	980c      	ldr	r0, [sp, #48]	@ 0x30
 80232e2:	b289      	uxth	r1, r1
 80232e4:	fb02 f301 	mul.w	r3, r2, r1
 80232e8:	0112      	lsls	r2, r2, #4
 80232ea:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 80232ee:	f5c2 7780 	rsb	r7, r2, #256	@ 0x100
 80232f2:	1ad2      	subs	r2, r2, r3
 80232f4:	b289      	uxth	r1, r1
 80232f6:	b292      	uxth	r2, r2
 80232f8:	1a7f      	subs	r7, r7, r1
 80232fa:	fb02 f909 	mul.w	r9, r2, r9
 80232fe:	b2bf      	uxth	r7, r7
 8023300:	fb02 f808 	mul.w	r8, r2, r8
 8023304:	fb02 fa0a 	mul.w	sl, r2, sl
 8023308:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 802330a:	fb07 9905 	mla	r9, r7, r5, r9
 802330e:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 8023310:	fb07 8800 	mla	r8, r7, r0, r8
 8023314:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 8023316:	fb07 aa0e 	mla	sl, r7, lr, sl
 802331a:	fb01 9905 	mla	r9, r1, r5, r9
 802331e:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
 8023320:	fb01 8800 	mla	r8, r1, r0, r8
 8023324:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8023326:	fb01 a102 	mla	r1, r1, r2, sl
 802332a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 802332c:	fb03 9905 	mla	r9, r3, r5, r9
 8023330:	fb03 8800 	mla	r8, r3, r0, r8
 8023334:	fb03 1302 	mla	r3, r3, r2, r1
 8023338:	ea4f 2929 	mov.w	r9, r9, asr #8
 802333c:	ea4f 2828 	mov.w	r8, r8, asr #8
 8023340:	121b      	asrs	r3, r3, #8
 8023342:	f886 9000 	strb.w	r9, [r6]
 8023346:	f886 8001 	strb.w	r8, [r6, #1]
 802334a:	70b3      	strb	r3, [r6, #2]
 802334c:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 802334e:	3603      	adds	r6, #3
 8023350:	449b      	add	fp, r3
 8023352:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8023354:	441c      	add	r4, r3
 8023356:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8023358:	3b01      	subs	r3, #1
 802335a:	930a      	str	r3, [sp, #40]	@ 0x28
 802335c:	e774      	b.n	8023248 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x88>
 802335e:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8023360:	449b      	add	fp, r3
 8023362:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8023364:	441c      	add	r4, r3
 8023366:	9b06      	ldr	r3, [sp, #24]
 8023368:	3b01      	subs	r3, #1
 802336a:	9306      	str	r3, [sp, #24]
 802336c:	9b07      	ldr	r3, [sp, #28]
 802336e:	3303      	adds	r3, #3
 8023370:	9307      	str	r3, [sp, #28]
 8023372:	e74a      	b.n	802320a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 8023374:	d024      	beq.n	80233c0 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 8023376:	9b06      	ldr	r3, [sp, #24]
 8023378:	9827      	ldr	r0, [sp, #156]	@ 0x9c
 802337a:	3b01      	subs	r3, #1
 802337c:	fb00 b003 	mla	r0, r0, r3, fp
 8023380:	1400      	asrs	r0, r0, #16
 8023382:	f53f af5e 	bmi.w	8023242 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 8023386:	3901      	subs	r1, #1
 8023388:	4288      	cmp	r0, r1
 802338a:	f6bf af5a 	bge.w	8023242 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 802338e:	9928      	ldr	r1, [sp, #160]	@ 0xa0
 8023390:	fb01 4303 	mla	r3, r1, r3, r4
 8023394:	141b      	asrs	r3, r3, #16
 8023396:	f53f af54 	bmi.w	8023242 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 802339a:	3a01      	subs	r2, #1
 802339c:	4293      	cmp	r3, r2
 802339e:	f6bf af50 	bge.w	8023242 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 80233a2:	9b07      	ldr	r3, [sp, #28]
 80233a4:	f8dd e018 	ldr.w	lr, [sp, #24]
 80233a8:	1cde      	adds	r6, r3, #3
 80233aa:	f1be 0f00 	cmp.w	lr, #0
 80233ae:	dc5f      	bgt.n	8023470 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 80233b0:	9b06      	ldr	r3, [sp, #24]
 80233b2:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 80233b6:	9b07      	ldr	r3, [sp, #28]
 80233b8:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80233bc:	4423      	add	r3, r4
 80233be:	9307      	str	r3, [sp, #28]
 80233c0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80233c2:	2b00      	cmp	r3, #0
 80233c4:	f340 80c5 	ble.w	8023552 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x392>
 80233c8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80233cc:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80233ce:	ee30 0a04 	vadd.f32	s0, s0, s8
 80233d2:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80233d6:	eef0 6a62 	vmov.f32	s13, s5
 80233da:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80233de:	ee31 1a05 	vadd.f32	s2, s2, s10
 80233e2:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80233e6:	ee16 ba90 	vmov	fp, s13
 80233ea:	eef0 6a43 	vmov.f32	s13, s6
 80233ee:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80233f2:	ee16 4a90 	vmov	r4, s13
 80233f6:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80233fa:	ee61 7a27 	vmul.f32	s15, s2, s15
 80233fe:	ee77 2a62 	vsub.f32	s5, s14, s5
 8023402:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8023406:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 802340a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 802340e:	ee12 2a90 	vmov	r2, s5
 8023412:	eef0 2a47 	vmov.f32	s5, s14
 8023416:	fb92 f3f3 	sdiv	r3, r2, r3
 802341a:	ee13 2a10 	vmov	r2, s6
 802341e:	9327      	str	r3, [sp, #156]	@ 0x9c
 8023420:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8023422:	eeb0 3a67 	vmov.f32	s6, s15
 8023426:	fb92 f3f3 	sdiv	r3, r2, r3
 802342a:	9328      	str	r3, [sp, #160]	@ 0xa0
 802342c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802342e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8023430:	3b01      	subs	r3, #1
 8023432:	9309      	str	r3, [sp, #36]	@ 0x24
 8023434:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8023436:	bf08      	it	eq
 8023438:	4613      	moveq	r3, r2
 802343a:	9306      	str	r3, [sp, #24]
 802343c:	e6d7      	b.n	80231ee <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 802343e:	f110 0c01 	adds.w	ip, r0, #1
 8023442:	d483      	bmi.n	802334c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18c>
 8023444:	4563      	cmp	r3, ip
 8023446:	db81      	blt.n	802334c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18c>
 8023448:	f115 0c01 	adds.w	ip, r5, #1
 802344c:	f53f af7e 	bmi.w	802334c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18c>
 8023450:	4567      	cmp	r7, ip
 8023452:	f6ff af7b 	blt.w	802334c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18c>
 8023456:	b23f      	sxth	r7, r7
 8023458:	b21b      	sxth	r3, r3
 802345a:	9700      	str	r7, [sp, #0]
 802345c:	e9cd 2103 	strd	r2, r1, [sp, #12]
 8023460:	e9cd 0501 	strd	r0, r5, [sp, #4]
 8023464:	9a08      	ldr	r2, [sp, #32]
 8023466:	4631      	mov	r1, r6
 8023468:	9819      	ldr	r0, [sp, #100]	@ 0x64
 802346a:	f7ff fdf9 	bl	8023060 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh>
 802346e:	e76d      	b.n	802334c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18c>
 8023470:	992c      	ldr	r1, [sp, #176]	@ 0xb0
 8023472:	ea4f 402b 	mov.w	r0, fp, asr #16
 8023476:	f3cb 3303 	ubfx	r3, fp, #12, #4
 802347a:	f3c4 3203 	ubfx	r2, r4, #12, #4
 802347e:	f9b1 c008 	ldrsh.w	ip, [r1, #8]
 8023482:	1421      	asrs	r1, r4, #16
 8023484:	930a      	str	r3, [sp, #40]	@ 0x28
 8023486:	fb0c 0101 	mla	r1, ip, r1, r0
 802348a:	9808      	ldr	r0, [sp, #32]
 802348c:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8023490:	1845      	adds	r5, r0, r1
 8023492:	5c40      	ldrb	r0, [r0, r1]
 8023494:	796f      	ldrb	r7, [r5, #5]
 8023496:	7869      	ldrb	r1, [r5, #1]
 8023498:	f895 8002 	ldrb.w	r8, [r5, #2]
 802349c:	f895 a003 	ldrb.w	sl, [r5, #3]
 80234a0:	f895 9004 	ldrb.w	r9, [r5, #4]
 80234a4:	970c      	str	r7, [sp, #48]	@ 0x30
 80234a6:	b1a2      	cbz	r2, 80234d2 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x312>
 80234a8:	2703      	movs	r7, #3
 80234aa:	f06f 0304 	mvn.w	r3, #4
 80234ae:	3505      	adds	r5, #5
 80234b0:	fb1c 3c07 	smlabb	ip, ip, r7, r3
 80234b4:	eb05 070c 	add.w	r7, r5, ip
 80234b8:	f815 500c 	ldrb.w	r5, [r5, ip]
 80234bc:	9513      	str	r5, [sp, #76]	@ 0x4c
 80234be:	787d      	ldrb	r5, [r7, #1]
 80234c0:	9515      	str	r5, [sp, #84]	@ 0x54
 80234c2:	78bd      	ldrb	r5, [r7, #2]
 80234c4:	9517      	str	r5, [sp, #92]	@ 0x5c
 80234c6:	78fd      	ldrb	r5, [r7, #3]
 80234c8:	9514      	str	r5, [sp, #80]	@ 0x50
 80234ca:	793d      	ldrb	r5, [r7, #4]
 80234cc:	9516      	str	r5, [sp, #88]	@ 0x58
 80234ce:	797d      	ldrb	r5, [r7, #5]
 80234d0:	9518      	str	r5, [sp, #96]	@ 0x60
 80234d2:	f8bd 3028 	ldrh.w	r3, [sp, #40]	@ 0x28
 80234d6:	b292      	uxth	r2, r2
 80234d8:	3603      	adds	r6, #3
 80234da:	f10e 3eff 	add.w	lr, lr, #4294967295
 80234de:	fb03 f502 	mul.w	r5, r3, r2
 80234e2:	011b      	lsls	r3, r3, #4
 80234e4:	ebc5 1202 	rsb	r2, r5, r2, lsl #4
 80234e8:	f5c3 7780 	rsb	r7, r3, #256	@ 0x100
 80234ec:	1b5b      	subs	r3, r3, r5
 80234ee:	b292      	uxth	r2, r2
 80234f0:	b29b      	uxth	r3, r3
 80234f2:	1abf      	subs	r7, r7, r2
 80234f4:	fb03 f909 	mul.w	r9, r3, r9
 80234f8:	b2bf      	uxth	r7, r7
 80234fa:	fb03 fa0a 	mul.w	sl, r3, sl
 80234fe:	fb07 9901 	mla	r9, r7, r1, r9
 8023502:	9915      	ldr	r1, [sp, #84]	@ 0x54
 8023504:	fb07 aa00 	mla	sl, r7, r0, sl
 8023508:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 802350a:	fb02 9901 	mla	r9, r2, r1, r9
 802350e:	9916      	ldr	r1, [sp, #88]	@ 0x58
 8023510:	fb02 aa00 	mla	sl, r2, r0, sl
 8023514:	9814      	ldr	r0, [sp, #80]	@ 0x50
 8023516:	fb05 9901 	mla	r9, r5, r1, r9
 802351a:	990c      	ldr	r1, [sp, #48]	@ 0x30
 802351c:	fb05 aa00 	mla	sl, r5, r0, sl
 8023520:	434b      	muls	r3, r1
 8023522:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 8023524:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8023528:	fb07 3308 	mla	r3, r7, r8, r3
 802352c:	ea4f 2929 	mov.w	r9, r9, asr #8
 8023530:	f806 ac06 	strb.w	sl, [r6, #-6]
 8023534:	fb02 3201 	mla	r2, r2, r1, r3
 8023538:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 802353a:	f806 9c05 	strb.w	r9, [r6, #-5]
 802353e:	fb05 2503 	mla	r5, r5, r3, r2
 8023542:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8023544:	122d      	asrs	r5, r5, #8
 8023546:	449b      	add	fp, r3
 8023548:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 802354a:	f806 5c04 	strb.w	r5, [r6, #-4]
 802354e:	441c      	add	r4, r3
 8023550:	e72b      	b.n	80233aa <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 8023552:	b01b      	add	sp, #108	@ 0x6c
 8023554:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08023558 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh>:
 8023558:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802355c:	b087      	sub	sp, #28
 802355e:	e9dd 7511 	ldrd	r7, r5, [sp, #68]	@ 0x44
 8023562:	f9bd 8040 	ldrsh.w	r8, [sp, #64]	@ 0x40
 8023566:	fb05 7003 	mla	r0, r5, r3, r7
 802356a:	2d00      	cmp	r5, #0
 802356c:	f89d 404c 	ldrb.w	r4, [sp, #76]	@ 0x4c
 8023570:	f89d e050 	ldrb.w	lr, [sp, #80]	@ 0x50
 8023574:	eb02 0c80 	add.w	ip, r2, r0, lsl #2
 8023578:	f2c0 811f 	blt.w	80237ba <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x262>
 802357c:	45a8      	cmp	r8, r5
 802357e:	f340 811c 	ble.w	80237ba <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x262>
 8023582:	2f00      	cmp	r7, #0
 8023584:	f2c0 8117 	blt.w	80237b6 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x25e>
 8023588:	42bb      	cmp	r3, r7
 802358a:	f340 8114 	ble.w	80237b6 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x25e>
 802358e:	f852 6020 	ldr.w	r6, [r2, r0, lsl #2]
 8023592:	1c7a      	adds	r2, r7, #1
 8023594:	f100 8114 	bmi.w	80237c0 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x268>
 8023598:	4293      	cmp	r3, r2
 802359a:	f340 8111 	ble.w	80237c0 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x268>
 802359e:	2c00      	cmp	r4, #0
 80235a0:	f000 8110 	beq.w	80237c4 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x26c>
 80235a4:	f8dc 0004 	ldr.w	r0, [ip, #4]
 80235a8:	3501      	adds	r5, #1
 80235aa:	f100 810f 	bmi.w	80237cc <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x274>
 80235ae:	45a8      	cmp	r8, r5
 80235b0:	f340 810c 	ble.w	80237cc <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x274>
 80235b4:	f1be 0f00 	cmp.w	lr, #0
 80235b8:	f000 810b 	beq.w	80237d2 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x27a>
 80235bc:	2f00      	cmp	r7, #0
 80235be:	f2c0 8103 	blt.w	80237c8 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x270>
 80235c2:	42bb      	cmp	r3, r7
 80235c4:	f340 8100 	ble.w	80237c8 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x270>
 80235c8:	f85c 5023 	ldr.w	r5, [ip, r3, lsl #2]
 80235cc:	3701      	adds	r7, #1
 80235ce:	f100 8103 	bmi.w	80237d8 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x280>
 80235d2:	42bb      	cmp	r3, r7
 80235d4:	f340 8100 	ble.w	80237d8 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x280>
 80235d8:	2c00      	cmp	r4, #0
 80235da:	f000 80ff 	beq.w	80237dc <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x284>
 80235de:	3301      	adds	r3, #1
 80235e0:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 80235e4:	fa1f fc84 	uxth.w	ip, r4
 80235e8:	fa1f fe8e 	uxth.w	lr, lr
 80235ec:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 80235f0:	fb0c f90e 	mul.w	r9, ip, lr
 80235f4:	0e13      	lsrs	r3, r2, #24
 80235f6:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 80235fa:	ebc9 1e0e 	rsb	lr, r9, lr, lsl #4
 80235fe:	9302      	str	r3, [sp, #8]
 8023600:	ebac 0709 	sub.w	r7, ip, r9
 8023604:	f5cc 7380 	rsb	r3, ip, #256	@ 0x100
 8023608:	fa1f f48e 	uxth.w	r4, lr
 802360c:	f006 1eff 	and.w	lr, r6, #16711935	@ 0xff00ff
 8023610:	f406 467f 	and.w	r6, r6, #65280	@ 0xff00
 8023614:	ea4f 6b10 	mov.w	fp, r0, lsr #24
 8023618:	fb0a fe0e 	mul.w	lr, sl, lr
 802361c:	1b1b      	subs	r3, r3, r4
 802361e:	fb0a f606 	mul.w	r6, sl, r6
 8023622:	ea4f 6815 	mov.w	r8, r5, lsr #24
 8023626:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 802362a:	f10e 1e01 	add.w	lr, lr, #65537	@ 0x10001
 802362e:	b29b      	uxth	r3, r3
 8023630:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8023634:	b2bf      	uxth	r7, r7
 8023636:	9301      	str	r3, [sp, #4]
 8023638:	44e6      	add	lr, ip
 802363a:	f506 7c80 	add.w	ip, r6, #256	@ 0x100
 802363e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8023642:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 8023646:	f00e 13ff 	and.w	r3, lr, #16711935	@ 0xff00ff
 802364a:	9303      	str	r3, [sp, #12]
 802364c:	0a33      	lsrs	r3, r6, #8
 802364e:	f000 16ff 	and.w	r6, r0, #16711935	@ 0xff00ff
 8023652:	f400 407f 	and.w	r0, r0, #65280	@ 0xff00
 8023656:	9304      	str	r3, [sp, #16]
 8023658:	fb0b f606 	mul.w	r6, fp, r6
 802365c:	fb0b f000 	mul.w	r0, fp, r0
 8023660:	ea4f 2e16 	mov.w	lr, r6, lsr #8
 8023664:	f106 1601 	add.w	r6, r6, #65537	@ 0x10001
 8023668:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 802366c:	44b6      	add	lr, r6
 802366e:	f500 7680 	add.w	r6, r0, #256	@ 0x100
 8023672:	eb06 2010 	add.w	r0, r6, r0, lsr #8
 8023676:	f005 16ff 	and.w	r6, r5, #16711935	@ 0xff00ff
 802367a:	f405 457f 	and.w	r5, r5, #65280	@ 0xff00
 802367e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8023682:	fb08 f606 	mul.w	r6, r8, r6
 8023686:	0a03      	lsrs	r3, r0, #8
 8023688:	fb08 f505 	mul.w	r5, r8, r5
 802368c:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8023690:	0a30      	lsrs	r0, r6, #8
 8023692:	f106 1601 	add.w	r6, r6, #65537	@ 0x10001
 8023696:	9305      	str	r3, [sp, #20]
 8023698:	0e13      	lsrs	r3, r2, #24
 802369a:	f000 10ff 	and.w	r0, r0, #16711935	@ 0xff00ff
 802369e:	fb0e fe07 	mul.w	lr, lr, r7
 80236a2:	4430      	add	r0, r6
 80236a4:	f505 7680 	add.w	r6, r5, #256	@ 0x100
 80236a8:	eb06 2515 	add.w	r5, r6, r5, lsr #8
 80236ac:	f002 16ff 	and.w	r6, r2, #16711935	@ 0xff00ff
 80236b0:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 80236b4:	0a00      	lsrs	r0, r0, #8
 80236b6:	435e      	muls	r6, r3
 80236b8:	0a2d      	lsrs	r5, r5, #8
 80236ba:	435a      	muls	r2, r3
 80236bc:	9b03      	ldr	r3, [sp, #12]
 80236be:	ea4f 2c16 	mov.w	ip, r6, lsr #8
 80236c2:	f106 1601 	add.w	r6, r6, #65537	@ 0x10001
 80236c6:	f000 10ff 	and.w	r0, r0, #16711935	@ 0xff00ff
 80236ca:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 80236ce:	44b4      	add	ip, r6
 80236d0:	f502 7680 	add.w	r6, r2, #256	@ 0x100
 80236d4:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80236d8:	eb06 2212 	add.w	r2, r6, r2, lsr #8
 80236dc:	9e01      	ldr	r6, [sp, #4]
 80236de:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 80236e2:	fb03 ee06 	mla	lr, r3, r6, lr
 80236e6:	9b04      	ldr	r3, [sp, #16]
 80236e8:	0a12      	lsrs	r2, r2, #8
 80236ea:	fb0c ee09 	mla	lr, ip, r9, lr
 80236ee:	f403 467f 	and.w	r6, r3, #65280	@ 0xff00
 80236f2:	9b05      	ldr	r3, [sp, #20]
 80236f4:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 80236f8:	fb00 ee04 	mla	lr, r0, r4, lr
 80236fc:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8023700:	f00e 10ff 	and.w	r0, lr, #16711935	@ 0xff00ff
 8023704:	f403 4e7f 	and.w	lr, r3, #65280	@ 0xff00
 8023708:	9b01      	ldr	r3, [sp, #4]
 802370a:	fb07 fe0e 	mul.w	lr, r7, lr
 802370e:	fb07 f70b 	mul.w	r7, r7, fp
 8023712:	fb03 ee06 	mla	lr, r3, r6, lr
 8023716:	fb03 730a 	mla	r3, r3, sl, r7
 802371a:	fb09 e202 	mla	r2, r9, r2, lr
 802371e:	f405 4e7f 	and.w	lr, r5, #65280	@ 0xff00
 8023722:	fb04 2e0e 	mla	lr, r4, lr, r2
 8023726:	f89d 2054 	ldrb.w	r2, [sp, #84]	@ 0x54
 802372a:	fb04 3408 	mla	r4, r4, r8, r3
 802372e:	9b02      	ldr	r3, [sp, #8]
 8023730:	b292      	uxth	r2, r2
 8023732:	fb09 4903 	mla	r9, r9, r3, r4
 8023736:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802373a:	f3c9 2907 	ubfx	r9, r9, #8, #8
 802373e:	f40e 4e7f 	and.w	lr, lr, #65280	@ 0xff00
 8023742:	fb09 f902 	mul.w	r9, r9, r2
 8023746:	ea40 0e0e 	orr.w	lr, r0, lr
 802374a:	f109 0301 	add.w	r3, r9, #1
 802374e:	fa5f f08e 	uxtb.w	r0, lr
 8023752:	fb10 f002 	smulbb	r0, r0, r2
 8023756:	eb03 2919 	add.w	r9, r3, r9, lsr #8
 802375a:	780b      	ldrb	r3, [r1, #0]
 802375c:	ea6f 2919 	mvn.w	r9, r9, lsr #8
 8023760:	fa5f f989 	uxtb.w	r9, r9
 8023764:	fb03 0309 	mla	r3, r3, r9, r0
 8023768:	b29b      	uxth	r3, r3
 802376a:	1c58      	adds	r0, r3, #1
 802376c:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 8023770:	7848      	ldrb	r0, [r1, #1]
 8023772:	fb10 f009 	smulbb	r0, r0, r9
 8023776:	121b      	asrs	r3, r3, #8
 8023778:	700b      	strb	r3, [r1, #0]
 802377a:	f3ce 2307 	ubfx	r3, lr, #8, #8
 802377e:	ea4f 4e1e 	mov.w	lr, lr, lsr #16
 8023782:	fb03 0302 	mla	r3, r3, r2, r0
 8023786:	b29b      	uxth	r3, r3
 8023788:	1c58      	adds	r0, r3, #1
 802378a:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 802378e:	121b      	asrs	r3, r3, #8
 8023790:	704b      	strb	r3, [r1, #1]
 8023792:	788b      	ldrb	r3, [r1, #2]
 8023794:	fb13 f909 	smulbb	r9, r3, r9
 8023798:	fb0e 9e02 	mla	lr, lr, r2, r9
 802379c:	fa1f fe8e 	uxth.w	lr, lr
 80237a0:	f10e 0301 	add.w	r3, lr, #1
 80237a4:	eb03 2e1e 	add.w	lr, r3, lr, lsr #8
 80237a8:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 80237ac:	f881 e002 	strb.w	lr, [r1, #2]
 80237b0:	b007      	add	sp, #28
 80237b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80237b6:	2600      	movs	r6, #0
 80237b8:	e6eb      	b.n	8023592 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x3a>
 80237ba:	2000      	movs	r0, #0
 80237bc:	4606      	mov	r6, r0
 80237be:	e6f3      	b.n	80235a8 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x50>
 80237c0:	2000      	movs	r0, #0
 80237c2:	e6f1      	b.n	80235a8 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x50>
 80237c4:	4620      	mov	r0, r4
 80237c6:	e6ef      	b.n	80235a8 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x50>
 80237c8:	2500      	movs	r5, #0
 80237ca:	e6ff      	b.n	80235cc <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x74>
 80237cc:	2200      	movs	r2, #0
 80237ce:	4615      	mov	r5, r2
 80237d0:	e708      	b.n	80235e4 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>
 80237d2:	4672      	mov	r2, lr
 80237d4:	4675      	mov	r5, lr
 80237d6:	e705      	b.n	80235e4 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>
 80237d8:	2200      	movs	r2, #0
 80237da:	e703      	b.n	80235e4 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>
 80237dc:	4622      	mov	r2, r4
 80237de:	e701      	b.n	80235e4 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>

080237e0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80237e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80237e4:	b09d      	sub	sp, #116	@ 0x74
 80237e6:	9219      	str	r2, [sp, #100]	@ 0x64
 80237e8:	9307      	str	r3, [sp, #28]
 80237ea:	9a2b      	ldr	r2, [sp, #172]	@ 0xac
 80237ec:	f89d 30bc 	ldrb.w	r3, [sp, #188]	@ 0xbc
 80237f0:	901b      	str	r0, [sp, #108]	@ 0x6c
 80237f2:	931a      	str	r3, [sp, #104]	@ 0x68
 80237f4:	6850      	ldr	r0, [r2, #4]
 80237f6:	9117      	str	r1, [sp, #92]	@ 0x5c
 80237f8:	6812      	ldr	r2, [r2, #0]
 80237fa:	e9dd 132c 	ldrd	r1, r3, [sp, #176]	@ 0xb0
 80237fe:	e9dd 5627 	ldrd	r5, r6, [sp, #156]	@ 0x9c
 8023802:	fb00 1303 	mla	r3, r0, r3, r1
 8023806:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 802380a:	18d3      	adds	r3, r2, r3
 802380c:	930a      	str	r3, [sp, #40]	@ 0x28
 802380e:	9b2e      	ldr	r3, [sp, #184]	@ 0xb8
 8023810:	681b      	ldr	r3, [r3, #0]
 8023812:	9310      	str	r3, [sp, #64]	@ 0x40
 8023814:	f8bd 3068 	ldrh.w	r3, [sp, #104]	@ 0x68
 8023818:	930b      	str	r3, [sp, #44]	@ 0x2c
 802381a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 802381c:	2b00      	cmp	r3, #0
 802381e:	dc03      	bgt.n	8023828 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 8023820:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8023822:	2b00      	cmp	r3, #0
 8023824:	f340 8368 	ble.w	8023ef8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x718>
 8023828:	9b2e      	ldr	r3, [sp, #184]	@ 0xb8
 802382a:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 802382e:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8023832:	1e48      	subs	r0, r1, #1
 8023834:	1e57      	subs	r7, r2, #1
 8023836:	9b07      	ldr	r3, [sp, #28]
 8023838:	2b00      	cmp	r3, #0
 802383a:	f340 8187 	ble.w	8023b4c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36c>
 802383e:	ea5f 4c25 	movs.w	ip, r5, asr #16
 8023842:	ea4f 4326 	mov.w	r3, r6, asr #16
 8023846:	d406      	bmi.n	8023856 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8023848:	4584      	cmp	ip, r0
 802384a:	da04      	bge.n	8023856 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 802384c:	2b00      	cmp	r3, #0
 802384e:	db02      	blt.n	8023856 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8023850:	42bb      	cmp	r3, r7
 8023852:	f2c0 817c 	blt.w	8023b4e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 8023856:	f11c 0c01 	adds.w	ip, ip, #1
 802385a:	f100 816c 	bmi.w	8023b36 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 802385e:	4561      	cmp	r1, ip
 8023860:	f2c0 8169 	blt.w	8023b36 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 8023864:	3301      	adds	r3, #1
 8023866:	f100 8166 	bmi.w	8023b36 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 802386a:	429a      	cmp	r2, r3
 802386c:	f2c0 8163 	blt.w	8023b36 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 8023870:	9b07      	ldr	r3, [sp, #28]
 8023872:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
 8023874:	9318      	str	r3, [sp, #96]	@ 0x60
 8023876:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8023878:	2b00      	cmp	r3, #0
 802387a:	f340 8186 	ble.w	8023b8a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3aa>
 802387e:	9b2e      	ldr	r3, [sp, #184]	@ 0xb8
 8023880:	142a      	asrs	r2, r5, #16
 8023882:	ea4f 4026 	mov.w	r0, r6, asr #16
 8023886:	f3c5 3103 	ubfx	r1, r5, #12, #4
 802388a:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 802388e:	e9d3 e302 	ldrd	lr, r3, [r3, #8]
 8023892:	f100 81cb 	bmi.w	8023c2c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44c>
 8023896:	f10e 38ff 	add.w	r8, lr, #4294967295
 802389a:	4542      	cmp	r2, r8
 802389c:	f280 81c6 	bge.w	8023c2c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44c>
 80238a0:	2800      	cmp	r0, #0
 80238a2:	f2c0 81c3 	blt.w	8023c2c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44c>
 80238a6:	f103 38ff 	add.w	r8, r3, #4294967295
 80238aa:	4540      	cmp	r0, r8
 80238ac:	f280 81be 	bge.w	8023c2c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44c>
 80238b0:	fa0f f38e 	sxth.w	r3, lr
 80238b4:	fb00 2203 	mla	r2, r0, r3, r2
 80238b8:	9810      	ldr	r0, [sp, #64]	@ 0x40
 80238ba:	eb00 0882 	add.w	r8, r0, r2, lsl #2
 80238be:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
 80238c2:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 80238c6:	2900      	cmp	r1, #0
 80238c8:	f000 81a6 	beq.w	8023c18 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x438>
 80238cc:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80238d0:	900c      	str	r0, [sp, #48]	@ 0x30
 80238d2:	0e00      	lsrs	r0, r0, #24
 80238d4:	9013      	str	r0, [sp, #76]	@ 0x4c
 80238d6:	f1bc 0f00 	cmp.w	ip, #0
 80238da:	d00f      	beq.n	80238fc <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 80238dc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80238e0:	3b01      	subs	r3, #1
 80238e2:	009b      	lsls	r3, r3, #2
 80238e4:	3304      	adds	r3, #4
 80238e6:	eb08 0003 	add.w	r0, r8, r3
 80238ea:	f858 3003 	ldr.w	r3, [r8, r3]
 80238ee:	9308      	str	r3, [sp, #32]
 80238f0:	0e1b      	lsrs	r3, r3, #24
 80238f2:	9311      	str	r3, [sp, #68]	@ 0x44
 80238f4:	6843      	ldr	r3, [r0, #4]
 80238f6:	930d      	str	r3, [sp, #52]	@ 0x34
 80238f8:	0e1b      	lsrs	r3, r3, #24
 80238fa:	9314      	str	r3, [sp, #80]	@ 0x50
 80238fc:	b289      	uxth	r1, r1
 80238fe:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 8023900:	fa1f fc8c 	uxth.w	ip, ip
 8023904:	0108      	lsls	r0, r1, #4
 8023906:	fb01 f90c 	mul.w	r9, r1, ip
 802390a:	f5c0 7380 	rsb	r3, r0, #256	@ 0x100
 802390e:	ebc9 1c0c 	rsb	ip, r9, ip, lsl #4
 8023912:	eba0 0809 	sub.w	r8, r0, r9
 8023916:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 8023918:	fa1f f18c 	uxth.w	r1, ip
 802391c:	fa1f f888 	uxth.w	r8, r8
 8023920:	1a5b      	subs	r3, r3, r1
 8023922:	fb08 f000 	mul.w	r0, r8, r0
 8023926:	b29b      	uxth	r3, r3
 8023928:	fb03 000e 	mla	r0, r3, lr, r0
 802392c:	fb01 0004 	mla	r0, r1, r4, r0
 8023930:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 8023932:	fb09 0004 	mla	r0, r9, r4, r0
 8023936:	f3c0 2007 	ubfx	r0, r0, #8, #8
 802393a:	2800      	cmp	r0, #0
 802393c:	f000 80f2 	beq.w	8023b24 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 8023940:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 8023944:	d01b      	beq.n	802397e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19e>
 8023946:	f002 1aff 	and.w	sl, r2, #16711935	@ 0xff00ff
 802394a:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 802394e:	fb0e fa0a 	mul.w	sl, lr, sl
 8023952:	fb0e fe02 	mul.w	lr, lr, r2
 8023956:	ea4f 221a 	mov.w	r2, sl, lsr #8
 802395a:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 802395e:	f50e 7c80 	add.w	ip, lr, #256	@ 0x100
 8023962:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
 8023966:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 802396a:	4452      	add	r2, sl
 802396c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8023970:	0a12      	lsrs	r2, r2, #8
 8023972:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 8023976:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
 802397a:	ea42 020c 	orr.w	r2, r2, ip
 802397e:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8023980:	2cff      	cmp	r4, #255	@ 0xff
 8023982:	d021      	beq.n	80239c8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 8023984:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8023986:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 802398a:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 802398c:	fb04 fb0b 	mul.w	fp, r4, fp
 8023990:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8023992:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 8023996:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8023998:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 802399c:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 80239a0:	fb04 fa0a 	mul.w	sl, r4, sl
 80239a4:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 80239a8:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 80239ac:	44de      	add	lr, fp
 80239ae:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80239b2:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80239b6:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80239ba:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 80239be:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 80239c2:	ea4e 040a 	orr.w	r4, lr, sl
 80239c6:	940c      	str	r4, [sp, #48]	@ 0x30
 80239c8:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 80239ca:	2cff      	cmp	r4, #255	@ 0xff
 80239cc:	d021      	beq.n	8023a12 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x232>
 80239ce:	9c08      	ldr	r4, [sp, #32]
 80239d0:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 80239d4:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 80239d6:	fb04 fb0b 	mul.w	fp, r4, fp
 80239da:	9c08      	ldr	r4, [sp, #32]
 80239dc:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 80239e0:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 80239e2:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 80239e6:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 80239ea:	fb04 fa0a 	mul.w	sl, r4, sl
 80239ee:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 80239f2:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 80239f6:	44de      	add	lr, fp
 80239f8:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80239fc:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8023a00:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8023a04:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8023a08:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8023a0c:	ea4e 040a 	orr.w	r4, lr, sl
 8023a10:	9408      	str	r4, [sp, #32]
 8023a12:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 8023a14:	2cff      	cmp	r4, #255	@ 0xff
 8023a16:	d021      	beq.n	8023a5c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 8023a18:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 8023a1a:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 8023a1e:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 8023a20:	fb04 fb0b 	mul.w	fp, r4, fp
 8023a24:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 8023a26:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 8023a2a:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 8023a2c:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8023a30:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 8023a34:	fb04 fa0a 	mul.w	sl, r4, sl
 8023a38:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8023a3c:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 8023a40:	44de      	add	lr, fp
 8023a42:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8023a46:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8023a4a:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8023a4e:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8023a52:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8023a56:	ea4e 040a 	orr.w	r4, lr, sl
 8023a5a:	940d      	str	r4, [sp, #52]	@ 0x34
 8023a5c:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8023a5e:	f002 1eff 	and.w	lr, r2, #16711935	@ 0xff00ff
 8023a62:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 8023a66:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 8023a6a:	9c08      	ldr	r4, [sp, #32]
 8023a6c:	fb08 fc0c 	mul.w	ip, r8, ip
 8023a70:	fb03 cc0e 	mla	ip, r3, lr, ip
 8023a74:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 8023a78:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 8023a7a:	fb01 cc0e 	mla	ip, r1, lr, ip
 8023a7e:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 8023a82:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8023a84:	fb09 cc0e 	mla	ip, r9, lr, ip
 8023a88:	f404 4e7f 	and.w	lr, r4, #65280	@ 0xff00
 8023a8c:	fb08 f80e 	mul.w	r8, r8, lr
 8023a90:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8023a94:	fb03 8202 	mla	r2, r3, r2, r8
 8023a98:	9b08      	ldr	r3, [sp, #32]
 8023a9a:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8023a9e:	f403 4a7f 	and.w	sl, r3, #65280	@ 0xff00
 8023aa2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8023aa4:	fb01 220a 	mla	r2, r1, sl, r2
 8023aa8:	f403 417f 	and.w	r1, r3, #65280	@ 0xff00
 8023aac:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8023aae:	fb09 2901 	mla	r9, r9, r1, r2
 8023ab2:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8023ab4:	4343      	muls	r3, r0
 8023ab6:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8023aba:	1c58      	adds	r0, r3, #1
 8023abc:	f409 497f 	and.w	r9, r9, #65280	@ 0xff00
 8023ac0:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 8023ac4:	783b      	ldrb	r3, [r7, #0]
 8023ac6:	ea4c 0c09 	orr.w	ip, ip, r9
 8023aca:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 8023ace:	fa5f f28c 	uxtb.w	r2, ip
 8023ad2:	b2c0      	uxtb	r0, r0
 8023ad4:	fb12 f201 	smulbb	r2, r2, r1
 8023ad8:	fb03 2300 	mla	r3, r3, r0, r2
 8023adc:	b29b      	uxth	r3, r3
 8023ade:	1c5a      	adds	r2, r3, #1
 8023ae0:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8023ae4:	787a      	ldrb	r2, [r7, #1]
 8023ae6:	fb12 f200 	smulbb	r2, r2, r0
 8023aea:	121b      	asrs	r3, r3, #8
 8023aec:	703b      	strb	r3, [r7, #0]
 8023aee:	f3cc 2307 	ubfx	r3, ip, #8, #8
 8023af2:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8023af6:	fb03 2301 	mla	r3, r3, r1, r2
 8023afa:	b29b      	uxth	r3, r3
 8023afc:	1c5a      	adds	r2, r3, #1
 8023afe:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8023b02:	121b      	asrs	r3, r3, #8
 8023b04:	707b      	strb	r3, [r7, #1]
 8023b06:	78bb      	ldrb	r3, [r7, #2]
 8023b08:	fb13 f000 	smulbb	r0, r3, r0
 8023b0c:	fb0c 0c01 	mla	ip, ip, r1, r0
 8023b10:	fa1f fc8c 	uxth.w	ip, ip
 8023b14:	f10c 0301 	add.w	r3, ip, #1
 8023b18:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 8023b1c:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 8023b20:	f887 c002 	strb.w	ip, [r7, #2]
 8023b24:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 8023b26:	3703      	adds	r7, #3
 8023b28:	441d      	add	r5, r3
 8023b2a:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 8023b2c:	441e      	add	r6, r3
 8023b2e:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8023b30:	3b01      	subs	r3, #1
 8023b32:	9318      	str	r3, [sp, #96]	@ 0x60
 8023b34:	e69f      	b.n	8023876 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8023b36:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 8023b38:	441d      	add	r5, r3
 8023b3a:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 8023b3c:	441e      	add	r6, r3
 8023b3e:	9b07      	ldr	r3, [sp, #28]
 8023b40:	3b01      	subs	r3, #1
 8023b42:	9307      	str	r3, [sp, #28]
 8023b44:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8023b46:	3303      	adds	r3, #3
 8023b48:	930a      	str	r3, [sp, #40]	@ 0x28
 8023b4a:	e674      	b.n	8023836 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56>
 8023b4c:	d025      	beq.n	8023b9a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ba>
 8023b4e:	9b07      	ldr	r3, [sp, #28]
 8023b50:	9829      	ldr	r0, [sp, #164]	@ 0xa4
 8023b52:	3b01      	subs	r3, #1
 8023b54:	fb00 5003 	mla	r0, r0, r3, r5
 8023b58:	1400      	asrs	r0, r0, #16
 8023b5a:	f53f ae89 	bmi.w	8023870 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8023b5e:	3901      	subs	r1, #1
 8023b60:	4288      	cmp	r0, r1
 8023b62:	f6bf ae85 	bge.w	8023870 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8023b66:	992a      	ldr	r1, [sp, #168]	@ 0xa8
 8023b68:	fb01 6303 	mla	r3, r1, r3, r6
 8023b6c:	141b      	asrs	r3, r3, #16
 8023b6e:	f53f ae7f 	bmi.w	8023870 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8023b72:	3a01      	subs	r2, #1
 8023b74:	4293      	cmp	r3, r2
 8023b76:	f6bf ae7b 	bge.w	8023870 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8023b7a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8023b7c:	f8dd b01c 	ldr.w	fp, [sp, #28]
 8023b80:	f103 0e03 	add.w	lr, r3, #3
 8023b84:	f1bb 0f00 	cmp.w	fp, #0
 8023b88:	dc6e      	bgt.n	8023c68 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x488>
 8023b8a:	9b07      	ldr	r3, [sp, #28]
 8023b8c:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8023b90:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8023b92:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8023b96:	4423      	add	r3, r4
 8023b98:	930a      	str	r3, [sp, #40]	@ 0x28
 8023b9a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8023b9c:	2b00      	cmp	r3, #0
 8023b9e:	f340 81ab 	ble.w	8023ef8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x718>
 8023ba2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8023ba6:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8023ba8:	ee30 0a04 	vadd.f32	s0, s0, s8
 8023bac:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8023bb0:	eef0 6a62 	vmov.f32	s13, s5
 8023bb4:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8023bb8:	ee31 1a05 	vadd.f32	s2, s2, s10
 8023bbc:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8023bc0:	ee16 5a90 	vmov	r5, s13
 8023bc4:	eef0 6a43 	vmov.f32	s13, s6
 8023bc8:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8023bcc:	ee16 6a90 	vmov	r6, s13
 8023bd0:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8023bd4:	ee61 7a27 	vmul.f32	s15, s2, s15
 8023bd8:	ee77 2a62 	vsub.f32	s5, s14, s5
 8023bdc:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8023be0:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8023be4:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8023be8:	ee12 2a90 	vmov	r2, s5
 8023bec:	eef0 2a47 	vmov.f32	s5, s14
 8023bf0:	fb92 f3f3 	sdiv	r3, r2, r3
 8023bf4:	ee13 2a10 	vmov	r2, s6
 8023bf8:	9329      	str	r3, [sp, #164]	@ 0xa4
 8023bfa:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8023bfc:	eeb0 3a67 	vmov.f32	s6, s15
 8023c00:	fb92 f3f3 	sdiv	r3, r2, r3
 8023c04:	932a      	str	r3, [sp, #168]	@ 0xa8
 8023c06:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8023c08:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8023c0a:	3b01      	subs	r3, #1
 8023c0c:	9317      	str	r3, [sp, #92]	@ 0x5c
 8023c0e:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8023c10:	bf08      	it	eq
 8023c12:	4613      	moveq	r3, r2
 8023c14:	9307      	str	r3, [sp, #28]
 8023c16:	e600      	b.n	802381a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 8023c18:	f1bc 0f00 	cmp.w	ip, #0
 8023c1c:	f43f ae6e 	beq.w	80238fc <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 8023c20:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 8023c24:	9308      	str	r3, [sp, #32]
 8023c26:	0e1b      	lsrs	r3, r3, #24
 8023c28:	9311      	str	r3, [sp, #68]	@ 0x44
 8023c2a:	e667      	b.n	80238fc <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 8023c2c:	f112 0801 	adds.w	r8, r2, #1
 8023c30:	f53f af78 	bmi.w	8023b24 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 8023c34:	45c6      	cmp	lr, r8
 8023c36:	f6ff af75 	blt.w	8023b24 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 8023c3a:	f110 0801 	adds.w	r8, r0, #1
 8023c3e:	f53f af71 	bmi.w	8023b24 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 8023c42:	4543      	cmp	r3, r8
 8023c44:	f6ff af6e 	blt.w	8023b24 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 8023c48:	9c1a      	ldr	r4, [sp, #104]	@ 0x68
 8023c4a:	b21b      	sxth	r3, r3
 8023c4c:	9201      	str	r2, [sp, #4]
 8023c4e:	9300      	str	r3, [sp, #0]
 8023c50:	fa0f f38e 	sxth.w	r3, lr
 8023c54:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8023c56:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8023c5a:	e9cd c404 	strd	ip, r4, [sp, #16]
 8023c5e:	4639      	mov	r1, r7
 8023c60:	981b      	ldr	r0, [sp, #108]	@ 0x6c
 8023c62:	f7ff fc79 	bl	8023558 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh>
 8023c66:	e75d      	b.n	8023b24 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 8023c68:	9b2e      	ldr	r3, [sp, #184]	@ 0xb8
 8023c6a:	142f      	asrs	r7, r5, #16
 8023c6c:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 8023c6e:	f3c5 3103 	ubfx	r1, r5, #12, #4
 8023c72:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 8023c76:	1433      	asrs	r3, r6, #16
 8023c78:	f3c6 3003 	ubfx	r0, r6, #12, #4
 8023c7c:	fb02 7303 	mla	r3, r2, r3, r7
 8023c80:	eb04 0783 	add.w	r7, r4, r3, lsl #2
 8023c84:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8023c88:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 8023c8c:	2900      	cmp	r1, #0
 8023c8e:	f000 812a 	beq.w	8023ee6 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x706>
 8023c92:	687c      	ldr	r4, [r7, #4]
 8023c94:	940e      	str	r4, [sp, #56]	@ 0x38
 8023c96:	0e24      	lsrs	r4, r4, #24
 8023c98:	9415      	str	r4, [sp, #84]	@ 0x54
 8023c9a:	b178      	cbz	r0, 8023cbc <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4dc>
 8023c9c:	f102 4280 	add.w	r2, r2, #1073741824	@ 0x40000000
 8023ca0:	3a01      	subs	r2, #1
 8023ca2:	0092      	lsls	r2, r2, #2
 8023ca4:	3204      	adds	r2, #4
 8023ca6:	eb07 0802 	add.w	r8, r7, r2
 8023caa:	58ba      	ldr	r2, [r7, r2]
 8023cac:	9209      	str	r2, [sp, #36]	@ 0x24
 8023cae:	0e12      	lsrs	r2, r2, #24
 8023cb0:	9212      	str	r2, [sp, #72]	@ 0x48
 8023cb2:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8023cb6:	920f      	str	r2, [sp, #60]	@ 0x3c
 8023cb8:	0e12      	lsrs	r2, r2, #24
 8023cba:	9216      	str	r2, [sp, #88]	@ 0x58
 8023cbc:	b289      	uxth	r1, r1
 8023cbe:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 8023cc0:	b280      	uxth	r0, r0
 8023cc2:	fb01 f900 	mul.w	r9, r1, r0
 8023cc6:	0109      	lsls	r1, r1, #4
 8023cc8:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 8023ccc:	eba1 0809 	sub.w	r8, r1, r9
 8023cd0:	f5c1 7280 	rsb	r2, r1, #256	@ 0x100
 8023cd4:	9915      	ldr	r1, [sp, #84]	@ 0x54
 8023cd6:	b280      	uxth	r0, r0
 8023cd8:	fa1f f888 	uxth.w	r8, r8
 8023cdc:	1a12      	subs	r2, r2, r0
 8023cde:	fb08 f101 	mul.w	r1, r8, r1
 8023ce2:	b292      	uxth	r2, r2
 8023ce4:	fb02 110c 	mla	r1, r2, ip, r1
 8023ce8:	fb00 1104 	mla	r1, r0, r4, r1
 8023cec:	9c16      	ldr	r4, [sp, #88]	@ 0x58
 8023cee:	fb09 1104 	mla	r1, r9, r4, r1
 8023cf2:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8023cf6:	2900      	cmp	r1, #0
 8023cf8:	f000 80ec 	beq.w	8023ed4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6f4>
 8023cfc:	f1bc 0fff 	cmp.w	ip, #255	@ 0xff
 8023d00:	d019      	beq.n	8023d36 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x556>
 8023d02:	f003 1aff 	and.w	sl, r3, #16711935	@ 0xff00ff
 8023d06:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8023d0a:	fb0c fa0a 	mul.w	sl, ip, sl
 8023d0e:	fb0c fc03 	mul.w	ip, ip, r3
 8023d12:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8023d16:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 8023d1a:	f50c 7780 	add.w	r7, ip, #256	@ 0x100
 8023d1e:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 8023d22:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 8023d26:	4453      	add	r3, sl
 8023d28:	0a3f      	lsrs	r7, r7, #8
 8023d2a:	0a1b      	lsrs	r3, r3, #8
 8023d2c:	f407 477f 	and.w	r7, r7, #65280	@ 0xff00
 8023d30:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 8023d34:	433b      	orrs	r3, r7
 8023d36:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 8023d38:	2cff      	cmp	r4, #255	@ 0xff
 8023d3a:	d020      	beq.n	8023d7e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x59e>
 8023d3c:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 8023d3e:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 8023d42:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 8023d44:	4367      	muls	r7, r4
 8023d46:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 8023d48:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8023d4c:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 8023d50:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 8023d52:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 8023d56:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8023d5a:	fb04 fa0a 	mul.w	sl, r4, sl
 8023d5e:	44bc      	add	ip, r7
 8023d60:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 8023d64:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8023d68:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8023d6c:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8023d70:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8023d74:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8023d78:	ea4c 040a 	orr.w	r4, ip, sl
 8023d7c:	940e      	str	r4, [sp, #56]	@ 0x38
 8023d7e:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 8023d80:	2cff      	cmp	r4, #255	@ 0xff
 8023d82:	d020      	beq.n	8023dc6 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e6>
 8023d84:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 8023d86:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 8023d8a:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 8023d8c:	4367      	muls	r7, r4
 8023d8e:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 8023d90:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8023d94:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 8023d98:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 8023d9a:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 8023d9e:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8023da2:	fb04 fa0a 	mul.w	sl, r4, sl
 8023da6:	44bc      	add	ip, r7
 8023da8:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 8023dac:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8023db0:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8023db4:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8023db8:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8023dbc:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8023dc0:	ea4c 040a 	orr.w	r4, ip, sl
 8023dc4:	9409      	str	r4, [sp, #36]	@ 0x24
 8023dc6:	9c16      	ldr	r4, [sp, #88]	@ 0x58
 8023dc8:	2cff      	cmp	r4, #255	@ 0xff
 8023dca:	d020      	beq.n	8023e0e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62e>
 8023dcc:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 8023dce:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 8023dd2:	9c16      	ldr	r4, [sp, #88]	@ 0x58
 8023dd4:	4367      	muls	r7, r4
 8023dd6:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 8023dd8:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8023ddc:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 8023de0:	9c16      	ldr	r4, [sp, #88]	@ 0x58
 8023de2:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 8023de6:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8023dea:	fb04 fa0a 	mul.w	sl, r4, sl
 8023dee:	44bc      	add	ip, r7
 8023df0:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 8023df4:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8023df8:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8023dfc:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8023e00:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8023e04:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8023e08:	ea4c 040a 	orr.w	r4, ip, sl
 8023e0c:	940f      	str	r4, [sp, #60]	@ 0x3c
 8023e0e:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 8023e10:	f003 1cff 	and.w	ip, r3, #16711935	@ 0xff00ff
 8023e14:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8023e18:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 8023e1c:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 8023e1e:	fb08 f707 	mul.w	r7, r8, r7
 8023e22:	fb02 770c 	mla	r7, r2, ip, r7
 8023e26:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 8023e2a:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 8023e2c:	fb00 770c 	mla	r7, r0, ip, r7
 8023e30:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 8023e34:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 8023e36:	fb09 770c 	mla	r7, r9, ip, r7
 8023e3a:	f404 4c7f 	and.w	ip, r4, #65280	@ 0xff00
 8023e3e:	fb08 f80c 	mul.w	r8, r8, ip
 8023e42:	0a3f      	lsrs	r7, r7, #8
 8023e44:	fb02 8303 	mla	r3, r2, r3, r8
 8023e48:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8023e4a:	f007 17ff 	and.w	r7, r7, #16711935	@ 0xff00ff
 8023e4e:	f402 4a7f 	and.w	sl, r2, #65280	@ 0xff00
 8023e52:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8023e54:	fb00 330a 	mla	r3, r0, sl, r3
 8023e58:	f402 4c7f 	and.w	ip, r2, #65280	@ 0xff00
 8023e5c:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8023e5e:	fb09 3c0c 	mla	ip, r9, ip, r3
 8023e62:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8023e64:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8023e68:	434b      	muls	r3, r1
 8023e6a:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 8023e6e:	1c59      	adds	r1, r3, #1
 8023e70:	ea47 070c 	orr.w	r7, r7, ip
 8023e74:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 8023e78:	f81e 3c03 	ldrb.w	r3, [lr, #-3]
 8023e7c:	b2fa      	uxtb	r2, r7
 8023e7e:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 8023e82:	fb12 f200 	smulbb	r2, r2, r0
 8023e86:	b2c9      	uxtb	r1, r1
 8023e88:	fb03 2301 	mla	r3, r3, r1, r2
 8023e8c:	b29b      	uxth	r3, r3
 8023e8e:	1c5a      	adds	r2, r3, #1
 8023e90:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8023e94:	f81e 2c02 	ldrb.w	r2, [lr, #-2]
 8023e98:	fb12 f201 	smulbb	r2, r2, r1
 8023e9c:	121b      	asrs	r3, r3, #8
 8023e9e:	f80e 3c03 	strb.w	r3, [lr, #-3]
 8023ea2:	f3c7 2307 	ubfx	r3, r7, #8, #8
 8023ea6:	0c3f      	lsrs	r7, r7, #16
 8023ea8:	fb03 2300 	mla	r3, r3, r0, r2
 8023eac:	b29b      	uxth	r3, r3
 8023eae:	1c5a      	adds	r2, r3, #1
 8023eb0:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8023eb4:	121b      	asrs	r3, r3, #8
 8023eb6:	f80e 3c02 	strb.w	r3, [lr, #-2]
 8023eba:	f81e 3c01 	ldrb.w	r3, [lr, #-1]
 8023ebe:	fb13 f101 	smulbb	r1, r3, r1
 8023ec2:	fb07 1700 	mla	r7, r7, r0, r1
 8023ec6:	b2bf      	uxth	r7, r7
 8023ec8:	1c79      	adds	r1, r7, #1
 8023eca:	eb01 2717 	add.w	r7, r1, r7, lsr #8
 8023ece:	123f      	asrs	r7, r7, #8
 8023ed0:	f80e 7c01 	strb.w	r7, [lr, #-1]
 8023ed4:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 8023ed6:	f10e 0e03 	add.w	lr, lr, #3
 8023eda:	f10b 3bff 	add.w	fp, fp, #4294967295
 8023ede:	441d      	add	r5, r3
 8023ee0:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 8023ee2:	441e      	add	r6, r3
 8023ee4:	e64e      	b.n	8023b84 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a4>
 8023ee6:	2800      	cmp	r0, #0
 8023ee8:	f43f aee8 	beq.w	8023cbc <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4dc>
 8023eec:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 8023ef0:	9209      	str	r2, [sp, #36]	@ 0x24
 8023ef2:	0e12      	lsrs	r2, r2, #24
 8023ef4:	9212      	str	r2, [sp, #72]	@ 0x48
 8023ef6:	e6e1      	b.n	8023cbc <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4dc>
 8023ef8:	b01d      	add	sp, #116	@ 0x74
 8023efa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08023efe <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh>:
 8023efe:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023f02:	b087      	sub	sp, #28
 8023f04:	e9dd 7511 	ldrd	r7, r5, [sp, #68]	@ 0x44
 8023f08:	f9bd 8040 	ldrsh.w	r8, [sp, #64]	@ 0x40
 8023f0c:	fb05 7003 	mla	r0, r5, r3, r7
 8023f10:	2d00      	cmp	r5, #0
 8023f12:	f89d 404c 	ldrb.w	r4, [sp, #76]	@ 0x4c
 8023f16:	f89d e050 	ldrb.w	lr, [sp, #80]	@ 0x50
 8023f1a:	eb02 0c80 	add.w	ip, r2, r0, lsl #2
 8023f1e:	f2c0 810a 	blt.w	8024136 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x238>
 8023f22:	45a8      	cmp	r8, r5
 8023f24:	f340 8107 	ble.w	8024136 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x238>
 8023f28:	2f00      	cmp	r7, #0
 8023f2a:	f2c0 8102 	blt.w	8024132 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x234>
 8023f2e:	42bb      	cmp	r3, r7
 8023f30:	f340 80ff 	ble.w	8024132 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x234>
 8023f34:	f852 6020 	ldr.w	r6, [r2, r0, lsl #2]
 8023f38:	1c7a      	adds	r2, r7, #1
 8023f3a:	f100 80ff 	bmi.w	802413c <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x23e>
 8023f3e:	4293      	cmp	r3, r2
 8023f40:	f340 80fc 	ble.w	802413c <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x23e>
 8023f44:	2c00      	cmp	r4, #0
 8023f46:	f000 80fb 	beq.w	8024140 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x242>
 8023f4a:	f8dc 0004 	ldr.w	r0, [ip, #4]
 8023f4e:	3501      	adds	r5, #1
 8023f50:	f100 80fa 	bmi.w	8024148 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x24a>
 8023f54:	45a8      	cmp	r8, r5
 8023f56:	f340 80f7 	ble.w	8024148 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x24a>
 8023f5a:	f1be 0f00 	cmp.w	lr, #0
 8023f5e:	f000 80f6 	beq.w	802414e <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x250>
 8023f62:	2f00      	cmp	r7, #0
 8023f64:	f2c0 80ee 	blt.w	8024144 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x246>
 8023f68:	42bb      	cmp	r3, r7
 8023f6a:	f340 80eb 	ble.w	8024144 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x246>
 8023f6e:	f85c 5023 	ldr.w	r5, [ip, r3, lsl #2]
 8023f72:	3701      	adds	r7, #1
 8023f74:	f100 80ee 	bmi.w	8024154 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x256>
 8023f78:	42bb      	cmp	r3, r7
 8023f7a:	f340 80eb 	ble.w	8024154 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x256>
 8023f7e:	2c00      	cmp	r4, #0
 8023f80:	f000 80ea 	beq.w	8024158 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x25a>
 8023f84:	3301      	adds	r3, #1
 8023f86:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 8023f8a:	fa1f fc84 	uxth.w	ip, r4
 8023f8e:	fa1f fe8e 	uxth.w	lr, lr
 8023f92:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 8023f96:	fb0c f90e 	mul.w	r9, ip, lr
 8023f9a:	0e13      	lsrs	r3, r2, #24
 8023f9c:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 8023fa0:	ebc9 1e0e 	rsb	lr, r9, lr, lsl #4
 8023fa4:	9302      	str	r3, [sp, #8]
 8023fa6:	ebac 0709 	sub.w	r7, ip, r9
 8023faa:	f5cc 7380 	rsb	r3, ip, #256	@ 0x100
 8023fae:	fa1f f48e 	uxth.w	r4, lr
 8023fb2:	f006 1eff 	and.w	lr, r6, #16711935	@ 0xff00ff
 8023fb6:	f406 467f 	and.w	r6, r6, #65280	@ 0xff00
 8023fba:	ea4f 6b10 	mov.w	fp, r0, lsr #24
 8023fbe:	fb0a fe0e 	mul.w	lr, sl, lr
 8023fc2:	1b1b      	subs	r3, r3, r4
 8023fc4:	fb0a f606 	mul.w	r6, sl, r6
 8023fc8:	ea4f 6815 	mov.w	r8, r5, lsr #24
 8023fcc:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 8023fd0:	f10e 1e01 	add.w	lr, lr, #65537	@ 0x10001
 8023fd4:	b29b      	uxth	r3, r3
 8023fd6:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8023fda:	b2bf      	uxth	r7, r7
 8023fdc:	9301      	str	r3, [sp, #4]
 8023fde:	44e6      	add	lr, ip
 8023fe0:	f506 7c80 	add.w	ip, r6, #256	@ 0x100
 8023fe4:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8023fe8:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 8023fec:	f00e 13ff 	and.w	r3, lr, #16711935	@ 0xff00ff
 8023ff0:	9303      	str	r3, [sp, #12]
 8023ff2:	0a33      	lsrs	r3, r6, #8
 8023ff4:	f000 16ff 	and.w	r6, r0, #16711935	@ 0xff00ff
 8023ff8:	f400 407f 	and.w	r0, r0, #65280	@ 0xff00
 8023ffc:	9304      	str	r3, [sp, #16]
 8023ffe:	fb0b f606 	mul.w	r6, fp, r6
 8024002:	fb0b f000 	mul.w	r0, fp, r0
 8024006:	ea4f 2e16 	mov.w	lr, r6, lsr #8
 802400a:	f106 1601 	add.w	r6, r6, #65537	@ 0x10001
 802400e:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8024012:	44b6      	add	lr, r6
 8024014:	f500 7680 	add.w	r6, r0, #256	@ 0x100
 8024018:	eb06 2010 	add.w	r0, r6, r0, lsr #8
 802401c:	f005 16ff 	and.w	r6, r5, #16711935	@ 0xff00ff
 8024020:	f405 457f 	and.w	r5, r5, #65280	@ 0xff00
 8024024:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8024028:	fb08 f606 	mul.w	r6, r8, r6
 802402c:	0a03      	lsrs	r3, r0, #8
 802402e:	fb08 f505 	mul.w	r5, r8, r5
 8024032:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8024036:	0a30      	lsrs	r0, r6, #8
 8024038:	f106 1601 	add.w	r6, r6, #65537	@ 0x10001
 802403c:	9305      	str	r3, [sp, #20]
 802403e:	0e13      	lsrs	r3, r2, #24
 8024040:	f000 10ff 	and.w	r0, r0, #16711935	@ 0xff00ff
 8024044:	fb0e fe07 	mul.w	lr, lr, r7
 8024048:	4430      	add	r0, r6
 802404a:	f505 7680 	add.w	r6, r5, #256	@ 0x100
 802404e:	eb06 2515 	add.w	r5, r6, r5, lsr #8
 8024052:	f002 16ff 	and.w	r6, r2, #16711935	@ 0xff00ff
 8024056:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 802405a:	0a00      	lsrs	r0, r0, #8
 802405c:	435e      	muls	r6, r3
 802405e:	0a2d      	lsrs	r5, r5, #8
 8024060:	435a      	muls	r2, r3
 8024062:	9b03      	ldr	r3, [sp, #12]
 8024064:	ea4f 2c16 	mov.w	ip, r6, lsr #8
 8024068:	f106 1601 	add.w	r6, r6, #65537	@ 0x10001
 802406c:	f000 10ff 	and.w	r0, r0, #16711935	@ 0xff00ff
 8024070:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8024074:	44b4      	add	ip, r6
 8024076:	f502 7680 	add.w	r6, r2, #256	@ 0x100
 802407a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802407e:	eb06 2212 	add.w	r2, r6, r2, lsr #8
 8024082:	9e01      	ldr	r6, [sp, #4]
 8024084:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8024088:	fb03 ee06 	mla	lr, r3, r6, lr
 802408c:	9b04      	ldr	r3, [sp, #16]
 802408e:	0a12      	lsrs	r2, r2, #8
 8024090:	fb0c ee09 	mla	lr, ip, r9, lr
 8024094:	f403 467f 	and.w	r6, r3, #65280	@ 0xff00
 8024098:	9b05      	ldr	r3, [sp, #20]
 802409a:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 802409e:	fb00 ee04 	mla	lr, r0, r4, lr
 80240a2:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80240a6:	f00e 10ff 	and.w	r0, lr, #16711935	@ 0xff00ff
 80240aa:	f403 4e7f 	and.w	lr, r3, #65280	@ 0xff00
 80240ae:	9b01      	ldr	r3, [sp, #4]
 80240b0:	fb07 fe0e 	mul.w	lr, r7, lr
 80240b4:	fb07 f70b 	mul.w	r7, r7, fp
 80240b8:	fb03 ee06 	mla	lr, r3, r6, lr
 80240bc:	fb03 730a 	mla	r3, r3, sl, r7
 80240c0:	fb09 e202 	mla	r2, r9, r2, lr
 80240c4:	f405 4e7f 	and.w	lr, r5, #65280	@ 0xff00
 80240c8:	fb04 2e0e 	mla	lr, r4, lr, r2
 80240cc:	fb04 3408 	mla	r4, r4, r8, r3
 80240d0:	9b02      	ldr	r3, [sp, #8]
 80240d2:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80240d6:	fb09 4903 	mla	r9, r9, r3, r4
 80240da:	780b      	ldrb	r3, [r1, #0]
 80240dc:	f40e 4e7f 	and.w	lr, lr, #65280	@ 0xff00
 80240e0:	ea6f 2929 	mvn.w	r9, r9, asr #8
 80240e4:	ea40 0e0e 	orr.w	lr, r0, lr
 80240e8:	fa5f f989 	uxtb.w	r9, r9
 80240ec:	fb03 f209 	mul.w	r2, r3, r9
 80240f0:	1c53      	adds	r3, r2, #1
 80240f2:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 80240f6:	eb0e 2313 	add.w	r3, lr, r3, lsr #8
 80240fa:	700b      	strb	r3, [r1, #0]
 80240fc:	784b      	ldrb	r3, [r1, #1]
 80240fe:	fb03 f309 	mul.w	r3, r3, r9
 8024102:	1c5a      	adds	r2, r3, #1
 8024104:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8024108:	ea4f 231e 	mov.w	r3, lr, lsr #8
 802410c:	ea4f 4e1e 	mov.w	lr, lr, lsr #16
 8024110:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8024114:	704b      	strb	r3, [r1, #1]
 8024116:	788b      	ldrb	r3, [r1, #2]
 8024118:	fb03 f909 	mul.w	r9, r3, r9
 802411c:	f109 0301 	add.w	r3, r9, #1
 8024120:	eb03 2919 	add.w	r9, r3, r9, lsr #8
 8024124:	eb0e 2e19 	add.w	lr, lr, r9, lsr #8
 8024128:	f881 e002 	strb.w	lr, [r1, #2]
 802412c:	b007      	add	sp, #28
 802412e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024132:	2600      	movs	r6, #0
 8024134:	e700      	b.n	8023f38 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x3a>
 8024136:	2000      	movs	r0, #0
 8024138:	4606      	mov	r6, r0
 802413a:	e708      	b.n	8023f4e <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x50>
 802413c:	2000      	movs	r0, #0
 802413e:	e706      	b.n	8023f4e <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x50>
 8024140:	4620      	mov	r0, r4
 8024142:	e704      	b.n	8023f4e <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x50>
 8024144:	2500      	movs	r5, #0
 8024146:	e714      	b.n	8023f72 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x74>
 8024148:	2200      	movs	r2, #0
 802414a:	4615      	mov	r5, r2
 802414c:	e71d      	b.n	8023f8a <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>
 802414e:	4672      	mov	r2, lr
 8024150:	4675      	mov	r5, lr
 8024152:	e71a      	b.n	8023f8a <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>
 8024154:	2200      	movs	r2, #0
 8024156:	e718      	b.n	8023f8a <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>
 8024158:	4622      	mov	r2, r4
 802415a:	e716      	b.n	8023f8a <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>

0802415c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 802415c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024160:	b099      	sub	sp, #100	@ 0x64
 8024162:	e9cd 1215 	strd	r1, r2, [sp, #84]	@ 0x54
 8024166:	9a27      	ldr	r2, [sp, #156]	@ 0x9c
 8024168:	9017      	str	r0, [sp, #92]	@ 0x5c
 802416a:	9306      	str	r3, [sp, #24]
 802416c:	6850      	ldr	r0, [r2, #4]
 802416e:	6812      	ldr	r2, [r2, #0]
 8024170:	e9dd 1328 	ldrd	r1, r3, [sp, #160]	@ 0xa0
 8024174:	e9dd 5623 	ldrd	r5, r6, [sp, #140]	@ 0x8c
 8024178:	fb00 1303 	mla	r3, r0, r3, r1
 802417c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8024180:	18d3      	adds	r3, r2, r3
 8024182:	9309      	str	r3, [sp, #36]	@ 0x24
 8024184:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 8024186:	681b      	ldr	r3, [r3, #0]
 8024188:	930e      	str	r3, [sp, #56]	@ 0x38
 802418a:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 802418c:	2b00      	cmp	r3, #0
 802418e:	dc03      	bgt.n	8024198 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 8024190:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8024192:	2b00      	cmp	r3, #0
 8024194:	f340 8360 	ble.w	8024858 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6fc>
 8024198:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 802419a:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 802419e:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80241a2:	1e48      	subs	r0, r1, #1
 80241a4:	1e57      	subs	r7, r2, #1
 80241a6:	9b06      	ldr	r3, [sp, #24]
 80241a8:	2b00      	cmp	r3, #0
 80241aa:	f340 817b 	ble.w	80244a4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x348>
 80241ae:	ea5f 4c25 	movs.w	ip, r5, asr #16
 80241b2:	ea4f 4326 	mov.w	r3, r6, asr #16
 80241b6:	d406      	bmi.n	80241c6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 80241b8:	4584      	cmp	ip, r0
 80241ba:	da04      	bge.n	80241c6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 80241bc:	2b00      	cmp	r3, #0
 80241be:	db02      	blt.n	80241c6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 80241c0:	42bb      	cmp	r3, r7
 80241c2:	f2c0 8170 	blt.w	80244a6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 80241c6:	f11c 0c01 	adds.w	ip, ip, #1
 80241ca:	f100 8160 	bmi.w	802448e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x332>
 80241ce:	4561      	cmp	r1, ip
 80241d0:	f2c0 815d 	blt.w	802448e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x332>
 80241d4:	3301      	adds	r3, #1
 80241d6:	f100 815a 	bmi.w	802448e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x332>
 80241da:	429a      	cmp	r2, r3
 80241dc:	f2c0 8157 	blt.w	802448e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x332>
 80241e0:	f8dd 8018 	ldr.w	r8, [sp, #24]
 80241e4:	9f09      	ldr	r7, [sp, #36]	@ 0x24
 80241e6:	f1b8 0f00 	cmp.w	r8, #0
 80241ea:	f340 8179 	ble.w	80244e0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x384>
 80241ee:	9a2a      	ldr	r2, [sp, #168]	@ 0xa8
 80241f0:	ea4f 4c26 	mov.w	ip, r6, asr #16
 80241f4:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 80241f6:	f3c5 3103 	ubfx	r1, r5, #12, #4
 80241fa:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 80241fe:	142a      	asrs	r2, r5, #16
 8024200:	f3c6 3003 	ubfx	r0, r6, #12, #4
 8024204:	689b      	ldr	r3, [r3, #8]
 8024206:	f100 81be 	bmi.w	8024586 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 802420a:	f103 39ff 	add.w	r9, r3, #4294967295
 802420e:	454a      	cmp	r2, r9
 8024210:	f280 81b9 	bge.w	8024586 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 8024214:	f1bc 0f00 	cmp.w	ip, #0
 8024218:	f2c0 81b5 	blt.w	8024586 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 802421c:	f10e 39ff 	add.w	r9, lr, #4294967295
 8024220:	45cc      	cmp	ip, r9
 8024222:	f280 81b0 	bge.w	8024586 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 8024226:	b21b      	sxth	r3, r3
 8024228:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 802422a:	fb0c 2203 	mla	r2, ip, r3, r2
 802422e:	eb04 0982 	add.w	r9, r4, r2, lsl #2
 8024232:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8024236:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 802423a:	2900      	cmp	r1, #0
 802423c:	f000 8197 	beq.w	802456e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x412>
 8024240:	f8d9 4004 	ldr.w	r4, [r9, #4]
 8024244:	940a      	str	r4, [sp, #40]	@ 0x28
 8024246:	0e24      	lsrs	r4, r4, #24
 8024248:	9411      	str	r4, [sp, #68]	@ 0x44
 802424a:	b180      	cbz	r0, 802426e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x112>
 802424c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8024250:	3b01      	subs	r3, #1
 8024252:	009b      	lsls	r3, r3, #2
 8024254:	3304      	adds	r3, #4
 8024256:	eb09 0c03 	add.w	ip, r9, r3
 802425a:	f859 3003 	ldr.w	r3, [r9, r3]
 802425e:	9307      	str	r3, [sp, #28]
 8024260:	0e1b      	lsrs	r3, r3, #24
 8024262:	930f      	str	r3, [sp, #60]	@ 0x3c
 8024264:	f8dc 3004 	ldr.w	r3, [ip, #4]
 8024268:	930b      	str	r3, [sp, #44]	@ 0x2c
 802426a:	0e1b      	lsrs	r3, r3, #24
 802426c:	9312      	str	r3, [sp, #72]	@ 0x48
 802426e:	b289      	uxth	r1, r1
 8024270:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8024272:	b280      	uxth	r0, r0
 8024274:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 8024276:	fb01 fa00 	mul.w	sl, r1, r0
 802427a:	0109      	lsls	r1, r1, #4
 802427c:	ebca 1000 	rsb	r0, sl, r0, lsl #4
 8024280:	eba1 090a 	sub.w	r9, r1, sl
 8024284:	f5c1 7180 	rsb	r1, r1, #256	@ 0x100
 8024288:	b280      	uxth	r0, r0
 802428a:	fa1f f989 	uxth.w	r9, r9
 802428e:	1a09      	subs	r1, r1, r0
 8024290:	fb09 f303 	mul.w	r3, r9, r3
 8024294:	b289      	uxth	r1, r1
 8024296:	fb01 330e 	mla	r3, r1, lr, r3
 802429a:	fb00 3304 	mla	r3, r0, r4, r3
 802429e:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 80242a0:	fb0a 3304 	mla	r3, sl, r4, r3
 80242a4:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80242a8:	2b00      	cmp	r3, #0
 80242aa:	f000 80e8 	beq.w	802447e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 80242ae:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 80242b2:	d01b      	beq.n	80242ec <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x190>
 80242b4:	f002 1bff 	and.w	fp, r2, #16711935	@ 0xff00ff
 80242b8:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 80242bc:	fb0e fb0b 	mul.w	fp, lr, fp
 80242c0:	fb0e fe02 	mul.w	lr, lr, r2
 80242c4:	ea4f 221b 	mov.w	r2, fp, lsr #8
 80242c8:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 80242cc:	f50e 7c80 	add.w	ip, lr, #256	@ 0x100
 80242d0:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
 80242d4:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 80242d8:	445a      	add	r2, fp
 80242da:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80242de:	0a12      	lsrs	r2, r2, #8
 80242e0:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 80242e4:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
 80242e8:	ea42 020c 	orr.w	r2, r2, ip
 80242ec:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 80242ee:	2cff      	cmp	r4, #255	@ 0xff
 80242f0:	d021      	beq.n	8024336 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1da>
 80242f2:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80242f4:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 80242f8:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 80242fa:	fb04 fc0c 	mul.w	ip, r4, ip
 80242fe:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8024300:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 8024304:	f404 4b7f 	and.w	fp, r4, #65280	@ 0xff00
 8024308:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 802430a:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 802430e:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8024312:	fb04 fb0b 	mul.w	fp, r4, fp
 8024316:	44e6      	add	lr, ip
 8024318:	f50b 7c80 	add.w	ip, fp, #256	@ 0x100
 802431c:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8024320:	eb0c 2b1b 	add.w	fp, ip, fp, lsr #8
 8024324:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8024328:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 802432c:	f40b 4b7f 	and.w	fp, fp, #65280	@ 0xff00
 8024330:	ea4e 040b 	orr.w	r4, lr, fp
 8024334:	940a      	str	r4, [sp, #40]	@ 0x28
 8024336:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 8024338:	2cff      	cmp	r4, #255	@ 0xff
 802433a:	d021      	beq.n	8024380 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x224>
 802433c:	9c07      	ldr	r4, [sp, #28]
 802433e:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 8024342:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 8024344:	fb04 fc0c 	mul.w	ip, r4, ip
 8024348:	9c07      	ldr	r4, [sp, #28]
 802434a:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 802434e:	f404 4b7f 	and.w	fp, r4, #65280	@ 0xff00
 8024352:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 8024354:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 8024358:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 802435c:	fb04 fb0b 	mul.w	fp, r4, fp
 8024360:	44e6      	add	lr, ip
 8024362:	f50b 7c80 	add.w	ip, fp, #256	@ 0x100
 8024366:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802436a:	eb0c 2b1b 	add.w	fp, ip, fp, lsr #8
 802436e:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8024372:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 8024376:	f40b 4b7f 	and.w	fp, fp, #65280	@ 0xff00
 802437a:	ea4e 040b 	orr.w	r4, lr, fp
 802437e:	9407      	str	r4, [sp, #28]
 8024380:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 8024382:	2cff      	cmp	r4, #255	@ 0xff
 8024384:	d021      	beq.n	80243ca <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26e>
 8024386:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8024388:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 802438c:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 802438e:	fb04 fc0c 	mul.w	ip, r4, ip
 8024392:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8024394:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 8024398:	f404 4b7f 	and.w	fp, r4, #65280	@ 0xff00
 802439c:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 802439e:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 80243a2:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 80243a6:	fb04 fb0b 	mul.w	fp, r4, fp
 80243aa:	44e6      	add	lr, ip
 80243ac:	f50b 7c80 	add.w	ip, fp, #256	@ 0x100
 80243b0:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80243b4:	eb0c 2b1b 	add.w	fp, ip, fp, lsr #8
 80243b8:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 80243bc:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 80243c0:	f40b 4b7f 	and.w	fp, fp, #65280	@ 0xff00
 80243c4:	ea4e 040b 	orr.w	r4, lr, fp
 80243c8:	940b      	str	r4, [sp, #44]	@ 0x2c
 80243ca:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80243cc:	f002 1eff 	and.w	lr, r2, #16711935	@ 0xff00ff
 80243d0:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 80243d4:	2bff      	cmp	r3, #255	@ 0xff
 80243d6:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 80243da:	9c07      	ldr	r4, [sp, #28]
 80243dc:	fb09 fc0c 	mul.w	ip, r9, ip
 80243e0:	fb01 cc0e 	mla	ip, r1, lr, ip
 80243e4:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 80243e8:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 80243ea:	fb00 cc0e 	mla	ip, r0, lr, ip
 80243ee:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 80243f2:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80243f4:	fb0a cc0e 	mla	ip, sl, lr, ip
 80243f8:	f404 4e7f 	and.w	lr, r4, #65280	@ 0xff00
 80243fc:	fb09 f90e 	mul.w	r9, r9, lr
 8024400:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8024404:	fb01 9202 	mla	r2, r1, r2, r9
 8024408:	9907      	ldr	r1, [sp, #28]
 802440a:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 802440e:	f401 4b7f 	and.w	fp, r1, #65280	@ 0xff00
 8024412:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8024414:	fb00 220b 	mla	r2, r0, fp, r2
 8024418:	f401 407f 	and.w	r0, r1, #65280	@ 0xff00
 802441c:	fb0a 2a00 	mla	sl, sl, r0, r2
 8024420:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8024424:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8024428:	ea4c 0c0a 	orr.w	ip, ip, sl
 802442c:	fa5f f08c 	uxtb.w	r0, ip
 8024430:	f3cc 2107 	ubfx	r1, ip, #8, #8
 8024434:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8024438:	f000 80a2 	beq.w	8024580 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x424>
 802443c:	43db      	mvns	r3, r3
 802443e:	783a      	ldrb	r2, [r7, #0]
 8024440:	f897 a002 	ldrb.w	sl, [r7, #2]
 8024444:	b2db      	uxtb	r3, r3
 8024446:	fb02 fe03 	mul.w	lr, r2, r3
 802444a:	fb0a fa03 	mul.w	sl, sl, r3
 802444e:	f10e 0201 	add.w	r2, lr, #1
 8024452:	eb02 221e 	add.w	r2, r2, lr, lsr #8
 8024456:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 802445a:	703a      	strb	r2, [r7, #0]
 802445c:	787a      	ldrb	r2, [r7, #1]
 802445e:	fb02 f003 	mul.w	r0, r2, r3
 8024462:	f10a 0301 	add.w	r3, sl, #1
 8024466:	1c42      	adds	r2, r0, #1
 8024468:	eb03 231a 	add.w	r3, r3, sl, lsr #8
 802446c:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 8024470:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 8024474:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8024478:	707a      	strb	r2, [r7, #1]
 802447a:	f887 c002 	strb.w	ip, [r7, #2]
 802447e:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 8024480:	3703      	adds	r7, #3
 8024482:	f108 38ff 	add.w	r8, r8, #4294967295
 8024486:	441d      	add	r5, r3
 8024488:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 802448a:	441e      	add	r6, r3
 802448c:	e6ab      	b.n	80241e6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 802448e:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 8024490:	441d      	add	r5, r3
 8024492:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8024494:	441e      	add	r6, r3
 8024496:	9b06      	ldr	r3, [sp, #24]
 8024498:	3b01      	subs	r3, #1
 802449a:	9306      	str	r3, [sp, #24]
 802449c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802449e:	3303      	adds	r3, #3
 80244a0:	9309      	str	r3, [sp, #36]	@ 0x24
 80244a2:	e680      	b.n	80241a6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 80244a4:	d024      	beq.n	80244f0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x394>
 80244a6:	9b06      	ldr	r3, [sp, #24]
 80244a8:	9825      	ldr	r0, [sp, #148]	@ 0x94
 80244aa:	3b01      	subs	r3, #1
 80244ac:	fb00 5003 	mla	r0, r0, r3, r5
 80244b0:	1400      	asrs	r0, r0, #16
 80244b2:	f53f ae95 	bmi.w	80241e0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 80244b6:	3901      	subs	r1, #1
 80244b8:	4288      	cmp	r0, r1
 80244ba:	f6bf ae91 	bge.w	80241e0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 80244be:	9926      	ldr	r1, [sp, #152]	@ 0x98
 80244c0:	fb01 6303 	mla	r3, r1, r3, r6
 80244c4:	141b      	asrs	r3, r3, #16
 80244c6:	f53f ae8b 	bmi.w	80241e0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 80244ca:	3a01      	subs	r2, #1
 80244cc:	4293      	cmp	r3, r2
 80244ce:	f6bf ae87 	bge.w	80241e0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 80244d2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80244d4:	f8dd b018 	ldr.w	fp, [sp, #24]
 80244d8:	1cdf      	adds	r7, r3, #3
 80244da:	f1bb 0f00 	cmp.w	fp, #0
 80244de:	dc6e      	bgt.n	80245be <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x462>
 80244e0:	9b06      	ldr	r3, [sp, #24]
 80244e2:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 80244e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80244e8:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80244ec:	4423      	add	r3, r4
 80244ee:	9309      	str	r3, [sp, #36]	@ 0x24
 80244f0:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80244f2:	2b00      	cmp	r3, #0
 80244f4:	f340 81b0 	ble.w	8024858 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6fc>
 80244f8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80244fc:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80244fe:	ee30 0a04 	vadd.f32	s0, s0, s8
 8024502:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8024506:	eef0 6a62 	vmov.f32	s13, s5
 802450a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 802450e:	ee31 1a05 	vadd.f32	s2, s2, s10
 8024512:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8024516:	ee16 5a90 	vmov	r5, s13
 802451a:	eef0 6a43 	vmov.f32	s13, s6
 802451e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8024522:	ee16 6a90 	vmov	r6, s13
 8024526:	ee20 7aa7 	vmul.f32	s14, s1, s15
 802452a:	ee61 7a27 	vmul.f32	s15, s2, s15
 802452e:	ee77 2a62 	vsub.f32	s5, s14, s5
 8024532:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8024536:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 802453a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 802453e:	ee12 2a90 	vmov	r2, s5
 8024542:	eef0 2a47 	vmov.f32	s5, s14
 8024546:	fb92 f3f3 	sdiv	r3, r2, r3
 802454a:	ee13 2a10 	vmov	r2, s6
 802454e:	9325      	str	r3, [sp, #148]	@ 0x94
 8024550:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8024552:	eeb0 3a67 	vmov.f32	s6, s15
 8024556:	fb92 f3f3 	sdiv	r3, r2, r3
 802455a:	9326      	str	r3, [sp, #152]	@ 0x98
 802455c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 802455e:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8024560:	3b01      	subs	r3, #1
 8024562:	9315      	str	r3, [sp, #84]	@ 0x54
 8024564:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8024566:	bf08      	it	eq
 8024568:	4613      	moveq	r3, r2
 802456a:	9306      	str	r3, [sp, #24]
 802456c:	e60d      	b.n	802418a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 802456e:	2800      	cmp	r0, #0
 8024570:	f43f ae7d 	beq.w	802426e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x112>
 8024574:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8024578:	9307      	str	r3, [sp, #28]
 802457a:	0e1b      	lsrs	r3, r3, #24
 802457c:	930f      	str	r3, [sp, #60]	@ 0x3c
 802457e:	e676      	b.n	802426e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x112>
 8024580:	7038      	strb	r0, [r7, #0]
 8024582:	7079      	strb	r1, [r7, #1]
 8024584:	e779      	b.n	802447a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31e>
 8024586:	f112 0901 	adds.w	r9, r2, #1
 802458a:	f53f af78 	bmi.w	802447e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 802458e:	454b      	cmp	r3, r9
 8024590:	f6ff af75 	blt.w	802447e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 8024594:	f11c 0901 	adds.w	r9, ip, #1
 8024598:	f53f af71 	bmi.w	802447e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 802459c:	45ce      	cmp	lr, r9
 802459e:	f6ff af6e 	blt.w	802447e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 80245a2:	b21b      	sxth	r3, r3
 80245a4:	e9cd 2c01 	strd	r2, ip, [sp, #4]
 80245a8:	fa0f f28e 	sxth.w	r2, lr
 80245ac:	e9cd 1003 	strd	r1, r0, [sp, #12]
 80245b0:	9200      	str	r2, [sp, #0]
 80245b2:	4639      	mov	r1, r7
 80245b4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80245b6:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 80245b8:	f7ff fca1 	bl	8023efe <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh>
 80245bc:	e75f      	b.n	802447e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 80245be:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 80245c0:	1429      	asrs	r1, r5, #16
 80245c2:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 80245c4:	f3c5 3203 	ubfx	r2, r5, #12, #4
 80245c8:	f9b3 c008 	ldrsh.w	ip, [r3, #8]
 80245cc:	1433      	asrs	r3, r6, #16
 80245ce:	f3c6 3003 	ubfx	r0, r6, #12, #4
 80245d2:	fb0c 1303 	mla	r3, ip, r3, r1
 80245d6:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80245d8:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 80245dc:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 80245e0:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 80245e4:	2a00      	cmp	r2, #0
 80245e6:	f000 8129 	beq.w	802483c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e0>
 80245ea:	684c      	ldr	r4, [r1, #4]
 80245ec:	940c      	str	r4, [sp, #48]	@ 0x30
 80245ee:	0e24      	lsrs	r4, r4, #24
 80245f0:	9413      	str	r4, [sp, #76]	@ 0x4c
 80245f2:	b198      	cbz	r0, 802461c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c0>
 80245f4:	f10c 4c80 	add.w	ip, ip, #1073741824	@ 0x40000000
 80245f8:	f10c 3cff 	add.w	ip, ip, #4294967295
 80245fc:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8024600:	f10c 0c04 	add.w	ip, ip, #4
 8024604:	eb01 080c 	add.w	r8, r1, ip
 8024608:	f851 100c 	ldr.w	r1, [r1, ip]
 802460c:	9108      	str	r1, [sp, #32]
 802460e:	0e09      	lsrs	r1, r1, #24
 8024610:	9110      	str	r1, [sp, #64]	@ 0x40
 8024612:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8024616:	910d      	str	r1, [sp, #52]	@ 0x34
 8024618:	0e09      	lsrs	r1, r1, #24
 802461a:	9114      	str	r1, [sp, #80]	@ 0x50
 802461c:	b292      	uxth	r2, r2
 802461e:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 8024620:	b280      	uxth	r0, r0
 8024622:	fb02 f900 	mul.w	r9, r2, r0
 8024626:	0112      	lsls	r2, r2, #4
 8024628:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 802462c:	eba2 0809 	sub.w	r8, r2, r9
 8024630:	f5c2 7180 	rsb	r1, r2, #256	@ 0x100
 8024634:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8024636:	b280      	uxth	r0, r0
 8024638:	fa1f f888 	uxth.w	r8, r8
 802463c:	1a09      	subs	r1, r1, r0
 802463e:	fb08 f202 	mul.w	r2, r8, r2
 8024642:	b289      	uxth	r1, r1
 8024644:	fb01 220e 	mla	r2, r1, lr, r2
 8024648:	fb00 2204 	mla	r2, r0, r4, r2
 802464c:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 802464e:	fb09 2204 	mla	r2, r9, r4, r2
 8024652:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8024656:	2a00      	cmp	r2, #0
 8024658:	f000 80e8 	beq.w	802482c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6d0>
 802465c:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 8024660:	d01b      	beq.n	802469a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x53e>
 8024662:	f003 1aff 	and.w	sl, r3, #16711935	@ 0xff00ff
 8024666:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 802466a:	fb0e fa0a 	mul.w	sl, lr, sl
 802466e:	fb0e fe03 	mul.w	lr, lr, r3
 8024672:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8024676:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 802467a:	f50e 7c80 	add.w	ip, lr, #256	@ 0x100
 802467e:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 8024682:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 8024686:	4453      	add	r3, sl
 8024688:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802468c:	0a1b      	lsrs	r3, r3, #8
 802468e:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 8024692:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 8024696:	ea43 030c 	orr.w	r3, r3, ip
 802469a:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 802469c:	2cff      	cmp	r4, #255	@ 0xff
 802469e:	d021      	beq.n	80246e4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x588>
 80246a0:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 80246a2:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 80246a6:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 80246a8:	fb04 fc0c 	mul.w	ip, r4, ip
 80246ac:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 80246ae:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 80246b2:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 80246b6:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 80246b8:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 80246bc:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 80246c0:	fb04 fa0a 	mul.w	sl, r4, sl
 80246c4:	44e6      	add	lr, ip
 80246c6:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 80246ca:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80246ce:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80246d2:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 80246d6:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80246da:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 80246de:	ea4e 040a 	orr.w	r4, lr, sl
 80246e2:	940c      	str	r4, [sp, #48]	@ 0x30
 80246e4:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 80246e6:	2cff      	cmp	r4, #255	@ 0xff
 80246e8:	d021      	beq.n	802472e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5d2>
 80246ea:	9c08      	ldr	r4, [sp, #32]
 80246ec:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 80246f0:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 80246f2:	fb04 fc0c 	mul.w	ip, r4, ip
 80246f6:	9c08      	ldr	r4, [sp, #32]
 80246f8:	f404 4e7f 	and.w	lr, r4, #65280	@ 0xff00
 80246fc:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 80246fe:	fb04 fa0e 	mul.w	sl, r4, lr
 8024702:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 8024706:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 802470a:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 802470e:	44e6      	add	lr, ip
 8024710:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 8024714:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8024718:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802471c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8024720:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8024724:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8024728:	ea4e 040a 	orr.w	r4, lr, sl
 802472c:	9408      	str	r4, [sp, #32]
 802472e:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 8024730:	2cff      	cmp	r4, #255	@ 0xff
 8024732:	d021      	beq.n	8024778 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x61c>
 8024734:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 8024736:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 802473a:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 802473c:	fb04 fc0c 	mul.w	ip, r4, ip
 8024740:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 8024742:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 8024746:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 802474a:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 802474c:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 8024750:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8024754:	fb04 fa0a 	mul.w	sl, r4, sl
 8024758:	44e6      	add	lr, ip
 802475a:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 802475e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8024762:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8024766:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 802476a:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802476e:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8024772:	ea4e 040a 	orr.w	r4, lr, sl
 8024776:	940d      	str	r4, [sp, #52]	@ 0x34
 8024778:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 802477a:	f003 1eff 	and.w	lr, r3, #16711935	@ 0xff00ff
 802477e:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8024782:	2aff      	cmp	r2, #255	@ 0xff
 8024784:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 8024788:	9c08      	ldr	r4, [sp, #32]
 802478a:	fb08 fc0c 	mul.w	ip, r8, ip
 802478e:	fb01 cc0e 	mla	ip, r1, lr, ip
 8024792:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 8024796:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 8024798:	fb00 cc0e 	mla	ip, r0, lr, ip
 802479c:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 80247a0:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 80247a2:	fb09 cc0e 	mla	ip, r9, lr, ip
 80247a6:	f404 4e7f 	and.w	lr, r4, #65280	@ 0xff00
 80247aa:	fb08 f80e 	mul.w	r8, r8, lr
 80247ae:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80247b2:	fb01 8303 	mla	r3, r1, r3, r8
 80247b6:	9908      	ldr	r1, [sp, #32]
 80247b8:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 80247bc:	f401 4a7f 	and.w	sl, r1, #65280	@ 0xff00
 80247c0:	990d      	ldr	r1, [sp, #52]	@ 0x34
 80247c2:	fb00 330a 	mla	r3, r0, sl, r3
 80247c6:	f401 4e7f 	and.w	lr, r1, #65280	@ 0xff00
 80247ca:	fb09 3e0e 	mla	lr, r9, lr, r3
 80247ce:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80247d2:	f40e 4e7f 	and.w	lr, lr, #65280	@ 0xff00
 80247d6:	ea4c 0c0e 	orr.w	ip, ip, lr
 80247da:	fa5f f08c 	uxtb.w	r0, ip
 80247de:	f3cc 2107 	ubfx	r1, ip, #8, #8
 80247e2:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 80247e6:	d032      	beq.n	802484e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6f2>
 80247e8:	43d2      	mvns	r2, r2
 80247ea:	f817 ec03 	ldrb.w	lr, [r7, #-3]
 80247ee:	b2d2      	uxtb	r2, r2
 80247f0:	fb0e fe02 	mul.w	lr, lr, r2
 80247f4:	f10e 0301 	add.w	r3, lr, #1
 80247f8:	eb03 231e 	add.w	r3, r3, lr, lsr #8
 80247fc:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 8024800:	f817 0c02 	ldrb.w	r0, [r7, #-2]
 8024804:	4350      	muls	r0, r2
 8024806:	f807 3c03 	strb.w	r3, [r7, #-3]
 802480a:	1c43      	adds	r3, r0, #1
 802480c:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 8024810:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 8024814:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8024818:	4353      	muls	r3, r2
 802481a:	f807 1c02 	strb.w	r1, [r7, #-2]
 802481e:	1c5a      	adds	r2, r3, #1
 8024820:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8024824:	eb0c 2c12 	add.w	ip, ip, r2, lsr #8
 8024828:	f807 cc01 	strb.w	ip, [r7, #-1]
 802482c:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 802482e:	3703      	adds	r7, #3
 8024830:	f10b 3bff 	add.w	fp, fp, #4294967295
 8024834:	441d      	add	r5, r3
 8024836:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8024838:	441e      	add	r6, r3
 802483a:	e64e      	b.n	80244da <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37e>
 802483c:	2800      	cmp	r0, #0
 802483e:	f43f aeed 	beq.w	802461c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c0>
 8024842:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 8024846:	9108      	str	r1, [sp, #32]
 8024848:	0e09      	lsrs	r1, r1, #24
 802484a:	9110      	str	r1, [sp, #64]	@ 0x40
 802484c:	e6e6      	b.n	802461c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c0>
 802484e:	f807 0c03 	strb.w	r0, [r7, #-3]
 8024852:	f807 1c02 	strb.w	r1, [r7, #-2]
 8024856:	e7e7      	b.n	8024828 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6cc>
 8024858:	b019      	add	sp, #100	@ 0x64
 802485a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08024860 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh>:
 8024860:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024864:	e9dd 400b 	ldrd	r4, r0, [sp, #44]	@ 0x2c
 8024868:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	@ 0x24
 802486c:	2c00      	cmp	r4, #0
 802486e:	f9bd 8028 	ldrsh.w	r8, [sp, #40]	@ 0x28
 8024872:	f89d 7034 	ldrb.w	r7, [sp, #52]	@ 0x34
 8024876:	fb00 4e03 	mla	lr, r0, r3, r4
 802487a:	f89d c038 	ldrb.w	ip, [sp, #56]	@ 0x38
 802487e:	f2c0 80b8 	blt.w	80249f2 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x192>
 8024882:	45a1      	cmp	r9, r4
 8024884:	f340 80b5 	ble.w	80249f2 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x192>
 8024888:	2800      	cmp	r0, #0
 802488a:	f2c0 80b2 	blt.w	80249f2 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x192>
 802488e:	4580      	cmp	r8, r0
 8024890:	f340 80af 	ble.w	80249f2 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x192>
 8024894:	ea4f 055e 	mov.w	r5, lr, lsr #1
 8024898:	f01e 0f01 	tst.w	lr, #1
 802489c:	5d56      	ldrb	r6, [r2, r5]
 802489e:	bf0c      	ite	eq
 80248a0:	f006 060f 	andeq.w	r6, r6, #15
 80248a4:	1136      	asrne	r6, r6, #4
 80248a6:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 80248aa:	b2f6      	uxtb	r6, r6
 80248ac:	f114 0a01 	adds.w	sl, r4, #1
 80248b0:	f100 80a1 	bmi.w	80249f6 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x196>
 80248b4:	45d1      	cmp	r9, sl
 80248b6:	f340 809e 	ble.w	80249f6 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x196>
 80248ba:	2800      	cmp	r0, #0
 80248bc:	f2c0 809b 	blt.w	80249f6 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x196>
 80248c0:	4580      	cmp	r8, r0
 80248c2:	f340 8098 	ble.w	80249f6 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x196>
 80248c6:	2f00      	cmp	r7, #0
 80248c8:	f000 8097 	beq.w	80249fa <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x19a>
 80248cc:	f10e 0b01 	add.w	fp, lr, #1
 80248d0:	ea4f 055b 	mov.w	r5, fp, lsr #1
 80248d4:	f01b 0f01 	tst.w	fp, #1
 80248d8:	5d55      	ldrb	r5, [r2, r5]
 80248da:	bf0c      	ite	eq
 80248dc:	f005 050f 	andeq.w	r5, r5, #15
 80248e0:	112d      	asrne	r5, r5, #4
 80248e2:	eb05 1505 	add.w	r5, r5, r5, lsl #4
 80248e6:	b2ed      	uxtb	r5, r5
 80248e8:	f1bc 0f00 	cmp.w	ip, #0
 80248ec:	f000 8089 	beq.w	8024a02 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1a2>
 80248f0:	2c00      	cmp	r4, #0
 80248f2:	f100 0001 	add.w	r0, r0, #1
 80248f6:	f2c0 8082 	blt.w	80249fe <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x19e>
 80248fa:	45a1      	cmp	r9, r4
 80248fc:	dd7f      	ble.n	80249fe <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x19e>
 80248fe:	2800      	cmp	r0, #0
 8024900:	db7d      	blt.n	80249fe <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x19e>
 8024902:	4580      	cmp	r8, r0
 8024904:	dd7b      	ble.n	80249fe <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x19e>
 8024906:	eb03 0b0e 	add.w	fp, r3, lr
 802490a:	ea4f 045b 	mov.w	r4, fp, lsr #1
 802490e:	f01b 0f01 	tst.w	fp, #1
 8024912:	5d14      	ldrb	r4, [r2, r4]
 8024914:	bf0c      	ite	eq
 8024916:	f004 040f 	andeq.w	r4, r4, #15
 802491a:	1124      	asrne	r4, r4, #4
 802491c:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 8024920:	b2e4      	uxtb	r4, r4
 8024922:	f1ba 0f00 	cmp.w	sl, #0
 8024926:	db6f      	blt.n	8024a08 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1a8>
 8024928:	45d1      	cmp	r9, sl
 802492a:	dd6d      	ble.n	8024a08 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1a8>
 802492c:	2800      	cmp	r0, #0
 802492e:	db6b      	blt.n	8024a08 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1a8>
 8024930:	4580      	cmp	r8, r0
 8024932:	dd69      	ble.n	8024a08 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1a8>
 8024934:	2f00      	cmp	r7, #0
 8024936:	d069      	beq.n	8024a0c <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1ac>
 8024938:	3301      	adds	r3, #1
 802493a:	449e      	add	lr, r3
 802493c:	ea4f 035e 	mov.w	r3, lr, lsr #1
 8024940:	f01e 0f01 	tst.w	lr, #1
 8024944:	5cd0      	ldrb	r0, [r2, r3]
 8024946:	bf0c      	ite	eq
 8024948:	f000 000f 	andeq.w	r0, r0, #15
 802494c:	1100      	asrne	r0, r0, #4
 802494e:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8024952:	b2c3      	uxtb	r3, r0
 8024954:	b2ba      	uxth	r2, r7
 8024956:	fa1f fc8c 	uxth.w	ip, ip
 802495a:	fb02 f00c 	mul.w	r0, r2, ip
 802495e:	0112      	lsls	r2, r2, #4
 8024960:	ebc0 1c0c 	rsb	ip, r0, ip, lsl #4
 8024964:	f5c2 7780 	rsb	r7, r2, #256	@ 0x100
 8024968:	1a12      	subs	r2, r2, r0
 802496a:	fa1f fc8c 	uxth.w	ip, ip
 802496e:	b292      	uxth	r2, r2
 8024970:	eba7 070c 	sub.w	r7, r7, ip
 8024974:	436a      	muls	r2, r5
 8024976:	b2bf      	uxth	r7, r7
 8024978:	fb06 2207 	mla	r2, r6, r7, r2
 802497c:	fb0c 2404 	mla	r4, ip, r4, r2
 8024980:	fb00 4303 	mla	r3, r0, r3, r4
 8024984:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8024988:	b38b      	cbz	r3, 80249ee <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x18e>
 802498a:	4a21      	ldr	r2, [pc, #132]	@ (8024a10 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1b0>)
 802498c:	6814      	ldr	r4, [r2, #0]
 802498e:	f89d 203c 	ldrb.w	r2, [sp, #60]	@ 0x3c
 8024992:	b2e5      	uxtb	r5, r4
 8024994:	4353      	muls	r3, r2
 8024996:	1c5a      	adds	r2, r3, #1
 8024998:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 802499c:	1212      	asrs	r2, r2, #8
 802499e:	b290      	uxth	r0, r2
 80249a0:	43d2      	mvns	r2, r2
 80249a2:	fb15 f500 	smulbb	r5, r5, r0
 80249a6:	b2d3      	uxtb	r3, r2
 80249a8:	780a      	ldrb	r2, [r1, #0]
 80249aa:	fb02 5203 	mla	r2, r2, r3, r5
 80249ae:	b292      	uxth	r2, r2
 80249b0:	1c55      	adds	r5, r2, #1
 80249b2:	eb05 2212 	add.w	r2, r5, r2, lsr #8
 80249b6:	784d      	ldrb	r5, [r1, #1]
 80249b8:	fb15 f503 	smulbb	r5, r5, r3
 80249bc:	1212      	asrs	r2, r2, #8
 80249be:	700a      	strb	r2, [r1, #0]
 80249c0:	f3c4 2207 	ubfx	r2, r4, #8, #8
 80249c4:	f3c4 4407 	ubfx	r4, r4, #16, #8
 80249c8:	fb02 5200 	mla	r2, r2, r0, r5
 80249cc:	b292      	uxth	r2, r2
 80249ce:	1c55      	adds	r5, r2, #1
 80249d0:	eb05 2212 	add.w	r2, r5, r2, lsr #8
 80249d4:	1212      	asrs	r2, r2, #8
 80249d6:	704a      	strb	r2, [r1, #1]
 80249d8:	788a      	ldrb	r2, [r1, #2]
 80249da:	fb12 f303 	smulbb	r3, r2, r3
 80249de:	fb04 3300 	mla	r3, r4, r0, r3
 80249e2:	b29b      	uxth	r3, r3
 80249e4:	1c5a      	adds	r2, r3, #1
 80249e6:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 80249ea:	121b      	asrs	r3, r3, #8
 80249ec:	708b      	strb	r3, [r1, #2]
 80249ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80249f2:	2600      	movs	r6, #0
 80249f4:	e75a      	b.n	80248ac <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x4c>
 80249f6:	2500      	movs	r5, #0
 80249f8:	e776      	b.n	80248e8 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x88>
 80249fa:	463d      	mov	r5, r7
 80249fc:	e774      	b.n	80248e8 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x88>
 80249fe:	2400      	movs	r4, #0
 8024a00:	e78f      	b.n	8024922 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xc2>
 8024a02:	4663      	mov	r3, ip
 8024a04:	4664      	mov	r4, ip
 8024a06:	e7a5      	b.n	8024954 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf4>
 8024a08:	2300      	movs	r3, #0
 8024a0a:	e7a3      	b.n	8024954 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf4>
 8024a0c:	463b      	mov	r3, r7
 8024a0e:	e7a1      	b.n	8024954 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf4>
 8024a10:	24028e30 	.word	0x24028e30

08024a14 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8024a14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024a18:	b097      	sub	sp, #92	@ 0x5c
 8024a1a:	9214      	str	r2, [sp, #80]	@ 0x50
 8024a1c:	9309      	str	r3, [sp, #36]	@ 0x24
 8024a1e:	9a25      	ldr	r2, [sp, #148]	@ 0x94
 8024a20:	f89d 30a4 	ldrb.w	r3, [sp, #164]	@ 0xa4
 8024a24:	9015      	str	r0, [sp, #84]	@ 0x54
 8024a26:	910c      	str	r1, [sp, #48]	@ 0x30
 8024a28:	6850      	ldr	r0, [r2, #4]
 8024a2a:	930e      	str	r3, [sp, #56]	@ 0x38
 8024a2c:	6812      	ldr	r2, [r2, #0]
 8024a2e:	e9dd 1326 	ldrd	r1, r3, [sp, #152]	@ 0x98
 8024a32:	e9dd 5621 	ldrd	r5, r6, [sp, #132]	@ 0x84
 8024a36:	fb00 1303 	mla	r3, r0, r3, r1
 8024a3a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8024a3e:	eb02 0a03 	add.w	sl, r2, r3
 8024a42:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8024a44:	689b      	ldr	r3, [r3, #8]
 8024a46:	3301      	adds	r3, #1
 8024a48:	f023 0301 	bic.w	r3, r3, #1
 8024a4c:	930f      	str	r3, [sp, #60]	@ 0x3c
 8024a4e:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8024a50:	681f      	ldr	r7, [r3, #0]
 8024a52:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8024a54:	2b00      	cmp	r3, #0
 8024a56:	dc03      	bgt.n	8024a60 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 8024a58:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8024a5a:	2b00      	cmp	r3, #0
 8024a5c:	f340 8247 	ble.w	8024eee <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4da>
 8024a60:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8024a62:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8024a66:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8024a6a:	1e48      	subs	r0, r1, #1
 8024a6c:	f102 3cff 	add.w	ip, r2, #4294967295
 8024a70:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8024a72:	2b00      	cmp	r3, #0
 8024a74:	f340 80e5 	ble.w	8024c42 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22e>
 8024a78:	ea5f 4e25 	movs.w	lr, r5, asr #16
 8024a7c:	ea4f 4326 	mov.w	r3, r6, asr #16
 8024a80:	d406      	bmi.n	8024a90 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8024a82:	4586      	cmp	lr, r0
 8024a84:	da04      	bge.n	8024a90 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8024a86:	2b00      	cmp	r3, #0
 8024a88:	db02      	blt.n	8024a90 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8024a8a:	4563      	cmp	r3, ip
 8024a8c:	f2c0 80da 	blt.w	8024c44 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x230>
 8024a90:	f11e 0e01 	adds.w	lr, lr, #1
 8024a94:	f100 80cb 	bmi.w	8024c2e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21a>
 8024a98:	4571      	cmp	r1, lr
 8024a9a:	f2c0 80c8 	blt.w	8024c2e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21a>
 8024a9e:	3301      	adds	r3, #1
 8024aa0:	f100 80c5 	bmi.w	8024c2e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21a>
 8024aa4:	429a      	cmp	r2, r3
 8024aa6:	f2c0 80c2 	blt.w	8024c2e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21a>
 8024aaa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8024aac:	46d0      	mov	r8, sl
 8024aae:	f9bd 903c 	ldrsh.w	r9, [sp, #60]	@ 0x3c
 8024ab2:	930d      	str	r3, [sp, #52]	@ 0x34
 8024ab4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8024ab6:	2b00      	cmp	r3, #0
 8024ab8:	f340 80e3 	ble.w	8024c82 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26e>
 8024abc:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8024abe:	1430      	asrs	r0, r6, #16
 8024ac0:	f3c5 3203 	ubfx	r2, r5, #12, #4
 8024ac4:	f3c6 3103 	ubfx	r1, r6, #12, #4
 8024ac8:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
 8024acc:	142b      	asrs	r3, r5, #16
 8024ace:	f100 812e 	bmi.w	8024d2e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 8024ad2:	f10c 3bff 	add.w	fp, ip, #4294967295
 8024ad6:	455b      	cmp	r3, fp
 8024ad8:	f280 8129 	bge.w	8024d2e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 8024adc:	2800      	cmp	r0, #0
 8024ade:	f2c0 8126 	blt.w	8024d2e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 8024ae2:	f10e 3bff 	add.w	fp, lr, #4294967295
 8024ae6:	4558      	cmp	r0, fp
 8024ae8:	f280 8121 	bge.w	8024d2e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 8024aec:	fb00 3309 	mla	r3, r0, r9, r3
 8024af0:	0858      	lsrs	r0, r3, #1
 8024af2:	07dc      	lsls	r4, r3, #31
 8024af4:	f817 c000 	ldrb.w	ip, [r7, r0]
 8024af8:	bf54      	ite	pl
 8024afa:	f00c 0c0f 	andpl.w	ip, ip, #15
 8024afe:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8024b02:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8024b06:	fa5f fc8c 	uxtb.w	ip, ip
 8024b0a:	2a00      	cmp	r2, #0
 8024b0c:	f000 80fe 	beq.w	8024d0c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f8>
 8024b10:	1c58      	adds	r0, r3, #1
 8024b12:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 8024b16:	07c0      	lsls	r0, r0, #31
 8024b18:	f817 e00e 	ldrb.w	lr, [r7, lr]
 8024b1c:	bf54      	ite	pl
 8024b1e:	f00e 0e0f 	andpl.w	lr, lr, #15
 8024b22:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
 8024b26:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
 8024b2a:	fa5f f08e 	uxtb.w	r0, lr
 8024b2e:	9010      	str	r0, [sp, #64]	@ 0x40
 8024b30:	b1d9      	cbz	r1, 8024b6a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 8024b32:	444b      	add	r3, r9
 8024b34:	0858      	lsrs	r0, r3, #1
 8024b36:	07dc      	lsls	r4, r3, #31
 8024b38:	f103 0301 	add.w	r3, r3, #1
 8024b3c:	5c38      	ldrb	r0, [r7, r0]
 8024b3e:	bf54      	ite	pl
 8024b40:	f000 000f 	andpl.w	r0, r0, #15
 8024b44:	1100      	asrmi	r0, r0, #4
 8024b46:	07dc      	lsls	r4, r3, #31
 8024b48:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8024b4c:	b2c0      	uxtb	r0, r0
 8024b4e:	900a      	str	r0, [sp, #40]	@ 0x28
 8024b50:	ea4f 0053 	mov.w	r0, r3, lsr #1
 8024b54:	f817 e000 	ldrb.w	lr, [r7, r0]
 8024b58:	bf54      	ite	pl
 8024b5a:	f00e 030f 	andpl.w	r3, lr, #15
 8024b5e:	ea4f 132e 	movmi.w	r3, lr, asr #4
 8024b62:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8024b66:	b2db      	uxtb	r3, r3
 8024b68:	9311      	str	r3, [sp, #68]	@ 0x44
 8024b6a:	b292      	uxth	r2, r2
 8024b6c:	b289      	uxth	r1, r1
 8024b6e:	0113      	lsls	r3, r2, #4
 8024b70:	fb02 f001 	mul.w	r0, r2, r1
 8024b74:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8024b76:	f5c3 7e80 	rsb	lr, r3, #256	@ 0x100
 8024b7a:	ebc0 1101 	rsb	r1, r0, r1, lsl #4
 8024b7e:	1a1b      	subs	r3, r3, r0
 8024b80:	b289      	uxth	r1, r1
 8024b82:	b29b      	uxth	r3, r3
 8024b84:	ebae 0e01 	sub.w	lr, lr, r1
 8024b88:	4353      	muls	r3, r2
 8024b8a:	fa1f fe8e 	uxth.w	lr, lr
 8024b8e:	fb0c 320e 	mla	r2, ip, lr, r3
 8024b92:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8024b94:	fb01 2203 	mla	r2, r1, r3, r2
 8024b98:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8024b9a:	fb00 2203 	mla	r2, r0, r3, r2
 8024b9e:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8024ba2:	2a00      	cmp	r2, #0
 8024ba4:	d039      	beq.n	8024c1a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 8024ba6:	4bc7      	ldr	r3, [pc, #796]	@ (8024ec4 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>)
 8024ba8:	6819      	ldr	r1, [r3, #0]
 8024baa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8024bac:	fa5f fc81 	uxtb.w	ip, r1
 8024bb0:	435a      	muls	r2, r3
 8024bb2:	1c53      	adds	r3, r2, #1
 8024bb4:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 8024bb8:	1212      	asrs	r2, r2, #8
 8024bba:	b290      	uxth	r0, r2
 8024bbc:	43d2      	mvns	r2, r2
 8024bbe:	fb1c fc00 	smulbb	ip, ip, r0
 8024bc2:	b2d3      	uxtb	r3, r2
 8024bc4:	f898 2000 	ldrb.w	r2, [r8]
 8024bc8:	fb02 c203 	mla	r2, r2, r3, ip
 8024bcc:	b292      	uxth	r2, r2
 8024bce:	f102 0c01 	add.w	ip, r2, #1
 8024bd2:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 8024bd6:	f898 c001 	ldrb.w	ip, [r8, #1]
 8024bda:	fb1c fc03 	smulbb	ip, ip, r3
 8024bde:	1212      	asrs	r2, r2, #8
 8024be0:	f888 2000 	strb.w	r2, [r8]
 8024be4:	f3c1 2207 	ubfx	r2, r1, #8, #8
 8024be8:	f3c1 4107 	ubfx	r1, r1, #16, #8
 8024bec:	fb02 c200 	mla	r2, r2, r0, ip
 8024bf0:	b292      	uxth	r2, r2
 8024bf2:	f102 0c01 	add.w	ip, r2, #1
 8024bf6:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 8024bfa:	1212      	asrs	r2, r2, #8
 8024bfc:	f888 2001 	strb.w	r2, [r8, #1]
 8024c00:	f898 2002 	ldrb.w	r2, [r8, #2]
 8024c04:	fb12 f303 	smulbb	r3, r2, r3
 8024c08:	fb01 3300 	mla	r3, r1, r0, r3
 8024c0c:	b29b      	uxth	r3, r3
 8024c0e:	1c5a      	adds	r2, r3, #1
 8024c10:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8024c14:	121b      	asrs	r3, r3, #8
 8024c16:	f888 3002 	strb.w	r3, [r8, #2]
 8024c1a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8024c1c:	f108 0803 	add.w	r8, r8, #3
 8024c20:	441d      	add	r5, r3
 8024c22:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8024c24:	441e      	add	r6, r3
 8024c26:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8024c28:	3b01      	subs	r3, #1
 8024c2a:	930d      	str	r3, [sp, #52]	@ 0x34
 8024c2c:	e742      	b.n	8024ab4 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 8024c2e:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8024c30:	f10a 0a03 	add.w	sl, sl, #3
 8024c34:	441d      	add	r5, r3
 8024c36:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8024c38:	441e      	add	r6, r3
 8024c3a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8024c3c:	3b01      	subs	r3, #1
 8024c3e:	9309      	str	r3, [sp, #36]	@ 0x24
 8024c40:	e716      	b.n	8024a70 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 8024c42:	d024      	beq.n	8024c8e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 8024c44:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8024c46:	9823      	ldr	r0, [sp, #140]	@ 0x8c
 8024c48:	3b01      	subs	r3, #1
 8024c4a:	fb00 5003 	mla	r0, r0, r3, r5
 8024c4e:	1400      	asrs	r0, r0, #16
 8024c50:	f53f af2b 	bmi.w	8024aaa <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8024c54:	3901      	subs	r1, #1
 8024c56:	4288      	cmp	r0, r1
 8024c58:	f6bf af27 	bge.w	8024aaa <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8024c5c:	9924      	ldr	r1, [sp, #144]	@ 0x90
 8024c5e:	fb01 6303 	mla	r3, r1, r3, r6
 8024c62:	141b      	asrs	r3, r3, #16
 8024c64:	f53f af21 	bmi.w	8024aaa <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8024c68:	3a01      	subs	r2, #1
 8024c6a:	4293      	cmp	r3, r2
 8024c6c:	f6bf af1d 	bge.w	8024aaa <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8024c70:	f10a 0e03 	add.w	lr, sl, #3
 8024c74:	f8dd 8024 	ldr.w	r8, [sp, #36]	@ 0x24
 8024c78:	f9bd 903c 	ldrsh.w	r9, [sp, #60]	@ 0x3c
 8024c7c:	f1b8 0f00 	cmp.w	r8, #0
 8024c80:	dc76      	bgt.n	8024d70 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35c>
 8024c82:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8024c84:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8024c88:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8024c8c:	44a2      	add	sl, r4
 8024c8e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8024c90:	2b00      	cmp	r3, #0
 8024c92:	f340 812c 	ble.w	8024eee <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4da>
 8024c96:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8024c9a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8024c9c:	ee30 0a04 	vadd.f32	s0, s0, s8
 8024ca0:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8024ca4:	eef0 6a62 	vmov.f32	s13, s5
 8024ca8:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8024cac:	ee31 1a05 	vadd.f32	s2, s2, s10
 8024cb0:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8024cb4:	ee16 5a90 	vmov	r5, s13
 8024cb8:	eef0 6a43 	vmov.f32	s13, s6
 8024cbc:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8024cc0:	ee16 6a90 	vmov	r6, s13
 8024cc4:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8024cc8:	ee61 7a27 	vmul.f32	s15, s2, s15
 8024ccc:	ee77 2a62 	vsub.f32	s5, s14, s5
 8024cd0:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8024cd4:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8024cd8:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8024cdc:	ee12 2a90 	vmov	r2, s5
 8024ce0:	eef0 2a47 	vmov.f32	s5, s14
 8024ce4:	fb92 f3f3 	sdiv	r3, r2, r3
 8024ce8:	ee13 2a10 	vmov	r2, s6
 8024cec:	9323      	str	r3, [sp, #140]	@ 0x8c
 8024cee:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8024cf0:	eeb0 3a67 	vmov.f32	s6, s15
 8024cf4:	fb92 f3f3 	sdiv	r3, r2, r3
 8024cf8:	9324      	str	r3, [sp, #144]	@ 0x90
 8024cfa:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8024cfc:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8024cfe:	3b01      	subs	r3, #1
 8024d00:	930c      	str	r3, [sp, #48]	@ 0x30
 8024d02:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8024d04:	bf08      	it	eq
 8024d06:	4613      	moveq	r3, r2
 8024d08:	9309      	str	r3, [sp, #36]	@ 0x24
 8024d0a:	e6a2      	b.n	8024a52 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 8024d0c:	2900      	cmp	r1, #0
 8024d0e:	f43f af2c 	beq.w	8024b6a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 8024d12:	eb09 0003 	add.w	r0, r9, r3
 8024d16:	0843      	lsrs	r3, r0, #1
 8024d18:	07c0      	lsls	r0, r0, #31
 8024d1a:	5cfb      	ldrb	r3, [r7, r3]
 8024d1c:	bf54      	ite	pl
 8024d1e:	f003 030f 	andpl.w	r3, r3, #15
 8024d22:	111b      	asrmi	r3, r3, #4
 8024d24:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8024d28:	b2db      	uxtb	r3, r3
 8024d2a:	930a      	str	r3, [sp, #40]	@ 0x28
 8024d2c:	e71d      	b.n	8024b6a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 8024d2e:	f113 0b01 	adds.w	fp, r3, #1
 8024d32:	f53f af72 	bmi.w	8024c1a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 8024d36:	45dc      	cmp	ip, fp
 8024d38:	f6ff af6f 	blt.w	8024c1a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 8024d3c:	f110 0b01 	adds.w	fp, r0, #1
 8024d40:	f53f af6b 	bmi.w	8024c1a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 8024d44:	45de      	cmp	lr, fp
 8024d46:	f6ff af68 	blt.w	8024c1a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 8024d4a:	9302      	str	r3, [sp, #8]
 8024d4c:	fa0f f38e 	sxth.w	r3, lr
 8024d50:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 8024d52:	9301      	str	r3, [sp, #4]
 8024d54:	fa0f f38c 	sxth.w	r3, ip
 8024d58:	e9cd 0203 	strd	r0, r2, [sp, #12]
 8024d5c:	e9cd 1405 	strd	r1, r4, [sp, #20]
 8024d60:	9300      	str	r3, [sp, #0]
 8024d62:	463a      	mov	r2, r7
 8024d64:	464b      	mov	r3, r9
 8024d66:	4641      	mov	r1, r8
 8024d68:	9815      	ldr	r0, [sp, #84]	@ 0x54
 8024d6a:	f7ff fd79 	bl	8024860 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh>
 8024d6e:	e754      	b.n	8024c1a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 8024d70:	142a      	asrs	r2, r5, #16
 8024d72:	f3c5 3103 	ubfx	r1, r5, #12, #4
 8024d76:	1433      	asrs	r3, r6, #16
 8024d78:	f3c6 3003 	ubfx	r0, r6, #12, #4
 8024d7c:	fb09 2303 	mla	r3, r9, r3, r2
 8024d80:	085a      	lsrs	r2, r3, #1
 8024d82:	07dc      	lsls	r4, r3, #31
 8024d84:	5cba      	ldrb	r2, [r7, r2]
 8024d86:	bf54      	ite	pl
 8024d88:	f002 020f 	andpl.w	r2, r2, #15
 8024d8c:	1112      	asrmi	r2, r2, #4
 8024d8e:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8024d92:	b2d2      	uxtb	r2, r2
 8024d94:	2900      	cmp	r1, #0
 8024d96:	f000 8097 	beq.w	8024ec8 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b4>
 8024d9a:	f103 0b01 	add.w	fp, r3, #1
 8024d9e:	ea4f 0c5b 	mov.w	ip, fp, lsr #1
 8024da2:	f01b 0f01 	tst.w	fp, #1
 8024da6:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8024daa:	bf0c      	ite	eq
 8024dac:	f00c 0c0f 	andeq.w	ip, ip, #15
 8024db0:	ea4f 1c2c 	movne.w	ip, ip, asr #4
 8024db4:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8024db8:	fa5f f48c 	uxtb.w	r4, ip
 8024dbc:	9412      	str	r4, [sp, #72]	@ 0x48
 8024dbe:	b300      	cbz	r0, 8024e02 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ee>
 8024dc0:	444b      	add	r3, r9
 8024dc2:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8024dc6:	07dc      	lsls	r4, r3, #31
 8024dc8:	f103 0301 	add.w	r3, r3, #1
 8024dcc:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8024dd0:	bf54      	ite	pl
 8024dd2:	f00c 0c0f 	andpl.w	ip, ip, #15
 8024dd6:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8024dda:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8024dde:	fa5f f48c 	uxtb.w	r4, ip
 8024de2:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8024de6:	940b      	str	r4, [sp, #44]	@ 0x2c
 8024de8:	07dc      	lsls	r4, r3, #31
 8024dea:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8024dee:	bf54      	ite	pl
 8024df0:	f00c 0c0f 	andpl.w	ip, ip, #15
 8024df4:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8024df8:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8024dfc:	fa5f f38c 	uxtb.w	r3, ip
 8024e00:	9313      	str	r3, [sp, #76]	@ 0x4c
 8024e02:	b289      	uxth	r1, r1
 8024e04:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 8024e06:	b280      	uxth	r0, r0
 8024e08:	fb01 f300 	mul.w	r3, r1, r0
 8024e0c:	0109      	lsls	r1, r1, #4
 8024e0e:	ebc3 1000 	rsb	r0, r3, r0, lsl #4
 8024e12:	f5c1 7c80 	rsb	ip, r1, #256	@ 0x100
 8024e16:	1ac9      	subs	r1, r1, r3
 8024e18:	b280      	uxth	r0, r0
 8024e1a:	b289      	uxth	r1, r1
 8024e1c:	ebac 0c00 	sub.w	ip, ip, r0
 8024e20:	4361      	muls	r1, r4
 8024e22:	fa1f fc8c 	uxth.w	ip, ip
 8024e26:	fb02 120c 	mla	r2, r2, ip, r1
 8024e2a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8024e2c:	fb00 2001 	mla	r0, r0, r1, r2
 8024e30:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8024e32:	fb03 0302 	mla	r3, r3, r2, r0
 8024e36:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8024e3a:	2b00      	cmp	r3, #0
 8024e3c:	d039      	beq.n	8024eb2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49e>
 8024e3e:	4a21      	ldr	r2, [pc, #132]	@ (8024ec4 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>)
 8024e40:	f81e 1c03 	ldrb.w	r1, [lr, #-3]
 8024e44:	6810      	ldr	r0, [r2, #0]
 8024e46:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8024e48:	fa5f fc80 	uxtb.w	ip, r0
 8024e4c:	4353      	muls	r3, r2
 8024e4e:	1c5a      	adds	r2, r3, #1
 8024e50:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8024e54:	121b      	asrs	r3, r3, #8
 8024e56:	b29a      	uxth	r2, r3
 8024e58:	43db      	mvns	r3, r3
 8024e5a:	fb1c fc02 	smulbb	ip, ip, r2
 8024e5e:	b2db      	uxtb	r3, r3
 8024e60:	fb01 c103 	mla	r1, r1, r3, ip
 8024e64:	b289      	uxth	r1, r1
 8024e66:	f101 0c01 	add.w	ip, r1, #1
 8024e6a:	eb0c 2111 	add.w	r1, ip, r1, lsr #8
 8024e6e:	f81e cc02 	ldrb.w	ip, [lr, #-2]
 8024e72:	fb1c fc03 	smulbb	ip, ip, r3
 8024e76:	1209      	asrs	r1, r1, #8
 8024e78:	f80e 1c03 	strb.w	r1, [lr, #-3]
 8024e7c:	f3c0 2107 	ubfx	r1, r0, #8, #8
 8024e80:	f3c0 4007 	ubfx	r0, r0, #16, #8
 8024e84:	fb01 c102 	mla	r1, r1, r2, ip
 8024e88:	b289      	uxth	r1, r1
 8024e8a:	f101 0c01 	add.w	ip, r1, #1
 8024e8e:	eb0c 2111 	add.w	r1, ip, r1, lsr #8
 8024e92:	1209      	asrs	r1, r1, #8
 8024e94:	f80e 1c02 	strb.w	r1, [lr, #-2]
 8024e98:	f81e 1c01 	ldrb.w	r1, [lr, #-1]
 8024e9c:	fb11 f303 	smulbb	r3, r1, r3
 8024ea0:	fb00 3002 	mla	r0, r0, r2, r3
 8024ea4:	b280      	uxth	r0, r0
 8024ea6:	1c42      	adds	r2, r0, #1
 8024ea8:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8024eac:	1200      	asrs	r0, r0, #8
 8024eae:	f80e 0c01 	strb.w	r0, [lr, #-1]
 8024eb2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8024eb4:	f10e 0e03 	add.w	lr, lr, #3
 8024eb8:	f108 38ff 	add.w	r8, r8, #4294967295
 8024ebc:	441d      	add	r5, r3
 8024ebe:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8024ec0:	441e      	add	r6, r3
 8024ec2:	e6db      	b.n	8024c7c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x268>
 8024ec4:	24028e30 	.word	0x24028e30
 8024ec8:	2800      	cmp	r0, #0
 8024eca:	d09a      	beq.n	8024e02 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ee>
 8024ecc:	444b      	add	r3, r9
 8024ece:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8024ed2:	07db      	lsls	r3, r3, #31
 8024ed4:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8024ed8:	bf54      	ite	pl
 8024eda:	f00c 0c0f 	andpl.w	ip, ip, #15
 8024ede:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8024ee2:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8024ee6:	fa5f f38c 	uxtb.w	r3, ip
 8024eea:	930b      	str	r3, [sp, #44]	@ 0x2c
 8024eec:	e789      	b.n	8024e02 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ee>
 8024eee:	b017      	add	sp, #92	@ 0x5c
 8024ef0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08024ef4 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh>:
 8024ef4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024ef8:	e9dd 540b 	ldrd	r5, r4, [sp, #44]	@ 0x2c
 8024efc:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	@ 0x24
 8024f00:	2d00      	cmp	r5, #0
 8024f02:	f9bd 8028 	ldrsh.w	r8, [sp, #40]	@ 0x28
 8024f06:	f89d 0034 	ldrb.w	r0, [sp, #52]	@ 0x34
 8024f0a:	fb04 5e03 	mla	lr, r4, r3, r5
 8024f0e:	f89d c038 	ldrb.w	ip, [sp, #56]	@ 0x38
 8024f12:	f2c0 80b1 	blt.w	8025078 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x184>
 8024f16:	45a9      	cmp	r9, r5
 8024f18:	f340 80ae 	ble.w	8025078 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x184>
 8024f1c:	2c00      	cmp	r4, #0
 8024f1e:	f2c0 80ab 	blt.w	8025078 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x184>
 8024f22:	45a0      	cmp	r8, r4
 8024f24:	f340 80a8 	ble.w	8025078 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x184>
 8024f28:	ea4f 065e 	mov.w	r6, lr, lsr #1
 8024f2c:	f01e 0f01 	tst.w	lr, #1
 8024f30:	5d97      	ldrb	r7, [r2, r6]
 8024f32:	bf0c      	ite	eq
 8024f34:	f007 070f 	andeq.w	r7, r7, #15
 8024f38:	113f      	asrne	r7, r7, #4
 8024f3a:	eb07 1707 	add.w	r7, r7, r7, lsl #4
 8024f3e:	b2ff      	uxtb	r7, r7
 8024f40:	f115 0a01 	adds.w	sl, r5, #1
 8024f44:	f100 809a 	bmi.w	802507c <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x188>
 8024f48:	45d1      	cmp	r9, sl
 8024f4a:	f340 8097 	ble.w	802507c <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x188>
 8024f4e:	2c00      	cmp	r4, #0
 8024f50:	f2c0 8094 	blt.w	802507c <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x188>
 8024f54:	45a0      	cmp	r8, r4
 8024f56:	f340 8091 	ble.w	802507c <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x188>
 8024f5a:	2800      	cmp	r0, #0
 8024f5c:	f000 8090 	beq.w	8025080 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x18c>
 8024f60:	f10e 0b01 	add.w	fp, lr, #1
 8024f64:	ea4f 065b 	mov.w	r6, fp, lsr #1
 8024f68:	f01b 0f01 	tst.w	fp, #1
 8024f6c:	5d96      	ldrb	r6, [r2, r6]
 8024f6e:	bf0c      	ite	eq
 8024f70:	f006 060f 	andeq.w	r6, r6, #15
 8024f74:	1136      	asrne	r6, r6, #4
 8024f76:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 8024f7a:	b2f6      	uxtb	r6, r6
 8024f7c:	f1bc 0f00 	cmp.w	ip, #0
 8024f80:	f000 8082 	beq.w	8025088 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x194>
 8024f84:	2d00      	cmp	r5, #0
 8024f86:	f104 0401 	add.w	r4, r4, #1
 8024f8a:	db7b      	blt.n	8025084 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x190>
 8024f8c:	45a9      	cmp	r9, r5
 8024f8e:	dd79      	ble.n	8025084 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x190>
 8024f90:	2c00      	cmp	r4, #0
 8024f92:	db77      	blt.n	8025084 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x190>
 8024f94:	45a0      	cmp	r8, r4
 8024f96:	dd75      	ble.n	8025084 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x190>
 8024f98:	eb03 0b0e 	add.w	fp, r3, lr
 8024f9c:	ea4f 055b 	mov.w	r5, fp, lsr #1
 8024fa0:	f01b 0f01 	tst.w	fp, #1
 8024fa4:	5d55      	ldrb	r5, [r2, r5]
 8024fa6:	bf0c      	ite	eq
 8024fa8:	f005 050f 	andeq.w	r5, r5, #15
 8024fac:	112d      	asrne	r5, r5, #4
 8024fae:	eb05 1505 	add.w	r5, r5, r5, lsl #4
 8024fb2:	b2ed      	uxtb	r5, r5
 8024fb4:	f1ba 0f00 	cmp.w	sl, #0
 8024fb8:	db69      	blt.n	802508e <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x19a>
 8024fba:	45d1      	cmp	r9, sl
 8024fbc:	dd67      	ble.n	802508e <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x19a>
 8024fbe:	2c00      	cmp	r4, #0
 8024fc0:	db65      	blt.n	802508e <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x19a>
 8024fc2:	45a0      	cmp	r8, r4
 8024fc4:	dd63      	ble.n	802508e <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x19a>
 8024fc6:	2800      	cmp	r0, #0
 8024fc8:	d063      	beq.n	8025092 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x19e>
 8024fca:	3301      	adds	r3, #1
 8024fcc:	449e      	add	lr, r3
 8024fce:	ea4f 035e 	mov.w	r3, lr, lsr #1
 8024fd2:	f01e 0f01 	tst.w	lr, #1
 8024fd6:	5cd4      	ldrb	r4, [r2, r3]
 8024fd8:	bf0c      	ite	eq
 8024fda:	f004 040f 	andeq.w	r4, r4, #15
 8024fde:	1124      	asrne	r4, r4, #4
 8024fe0:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 8024fe4:	b2e3      	uxtb	r3, r4
 8024fe6:	b282      	uxth	r2, r0
 8024fe8:	fa1f fc8c 	uxth.w	ip, ip
 8024fec:	fb02 f40c 	mul.w	r4, r2, ip
 8024ff0:	0112      	lsls	r2, r2, #4
 8024ff2:	ebc4 1c0c 	rsb	ip, r4, ip, lsl #4
 8024ff6:	fa1f f08c 	uxth.w	r0, ip
 8024ffa:	f5c2 7c80 	rsb	ip, r2, #256	@ 0x100
 8024ffe:	1b12      	subs	r2, r2, r4
 8025000:	ebac 0c00 	sub.w	ip, ip, r0
 8025004:	b292      	uxth	r2, r2
 8025006:	fa1f fc8c 	uxth.w	ip, ip
 802500a:	4372      	muls	r2, r6
 802500c:	fb07 220c 	mla	r2, r7, ip, r2
 8025010:	fb00 2005 	mla	r0, r0, r5, r2
 8025014:	fb04 0303 	mla	r3, r4, r3, r0
 8025018:	f3c3 2307 	ubfx	r3, r3, #8, #8
 802501c:	b353      	cbz	r3, 8025074 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x180>
 802501e:	4a1e      	ldr	r2, [pc, #120]	@ (8025098 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1a4>)
 8025020:	7808      	ldrb	r0, [r1, #0]
 8025022:	6814      	ldr	r4, [r2, #0]
 8025024:	b29a      	uxth	r2, r3
 8025026:	43db      	mvns	r3, r3
 8025028:	b2e5      	uxtb	r5, r4
 802502a:	b2db      	uxtb	r3, r3
 802502c:	fb15 f502 	smulbb	r5, r5, r2
 8025030:	fb00 5003 	mla	r0, r0, r3, r5
 8025034:	b280      	uxth	r0, r0
 8025036:	1c45      	adds	r5, r0, #1
 8025038:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 802503c:	784d      	ldrb	r5, [r1, #1]
 802503e:	fb15 f503 	smulbb	r5, r5, r3
 8025042:	1200      	asrs	r0, r0, #8
 8025044:	7008      	strb	r0, [r1, #0]
 8025046:	f3c4 2007 	ubfx	r0, r4, #8, #8
 802504a:	f3c4 4407 	ubfx	r4, r4, #16, #8
 802504e:	fb00 5002 	mla	r0, r0, r2, r5
 8025052:	b280      	uxth	r0, r0
 8025054:	1c45      	adds	r5, r0, #1
 8025056:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 802505a:	1200      	asrs	r0, r0, #8
 802505c:	7048      	strb	r0, [r1, #1]
 802505e:	7888      	ldrb	r0, [r1, #2]
 8025060:	fb10 f303 	smulbb	r3, r0, r3
 8025064:	fb04 3202 	mla	r2, r4, r2, r3
 8025068:	b292      	uxth	r2, r2
 802506a:	1c53      	adds	r3, r2, #1
 802506c:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 8025070:	1212      	asrs	r2, r2, #8
 8025072:	708a      	strb	r2, [r1, #2]
 8025074:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8025078:	2700      	movs	r7, #0
 802507a:	e761      	b.n	8024f40 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x4c>
 802507c:	2600      	movs	r6, #0
 802507e:	e77d      	b.n	8024f7c <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x88>
 8025080:	4606      	mov	r6, r0
 8025082:	e77b      	b.n	8024f7c <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x88>
 8025084:	2500      	movs	r5, #0
 8025086:	e795      	b.n	8024fb4 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xc0>
 8025088:	4663      	mov	r3, ip
 802508a:	4665      	mov	r5, ip
 802508c:	e7ab      	b.n	8024fe6 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf2>
 802508e:	2300      	movs	r3, #0
 8025090:	e7a9      	b.n	8024fe6 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf2>
 8025092:	4603      	mov	r3, r0
 8025094:	e7a7      	b.n	8024fe6 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf2>
 8025096:	bf00      	nop
 8025098:	24028e30 	.word	0x24028e30

0802509c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 802509c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80250a0:	b093      	sub	sp, #76	@ 0x4c
 80250a2:	461c      	mov	r4, r3
 80250a4:	920c      	str	r2, [sp, #48]	@ 0x30
 80250a6:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 80250a8:	9011      	str	r0, [sp, #68]	@ 0x44
 80250aa:	9107      	str	r1, [sp, #28]
 80250ac:	6850      	ldr	r0, [r2, #4]
 80250ae:	6812      	ldr	r2, [r2, #0]
 80250b0:	e9dd 1322 	ldrd	r1, r3, [sp, #136]	@ 0x88
 80250b4:	e9dd 561d 	ldrd	r5, r6, [sp, #116]	@ 0x74
 80250b8:	fb00 1303 	mla	r3, r0, r3, r1
 80250bc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80250c0:	eb02 0b03 	add.w	fp, r2, r3
 80250c4:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80250c6:	689b      	ldr	r3, [r3, #8]
 80250c8:	3301      	adds	r3, #1
 80250ca:	f023 0301 	bic.w	r3, r3, #1
 80250ce:	9309      	str	r3, [sp, #36]	@ 0x24
 80250d0:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80250d2:	f8d3 8000 	ldr.w	r8, [r3]
 80250d6:	9b07      	ldr	r3, [sp, #28]
 80250d8:	2b00      	cmp	r3, #0
 80250da:	dc03      	bgt.n	80250e4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 80250dc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80250de:	2b00      	cmp	r3, #0
 80250e0:	f340 822b 	ble.w	802553a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49e>
 80250e4:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80250e6:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80250ea:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80250ee:	1e48      	subs	r0, r1, #1
 80250f0:	1e57      	subs	r7, r2, #1
 80250f2:	2c00      	cmp	r4, #0
 80250f4:	f340 80d7 	ble.w	80252a6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20a>
 80250f8:	ea5f 4c25 	movs.w	ip, r5, asr #16
 80250fc:	ea4f 4326 	mov.w	r3, r6, asr #16
 8025100:	d406      	bmi.n	8025110 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 8025102:	4584      	cmp	ip, r0
 8025104:	da04      	bge.n	8025110 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 8025106:	2b00      	cmp	r3, #0
 8025108:	db02      	blt.n	8025110 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 802510a:	42bb      	cmp	r3, r7
 802510c:	f2c0 80cc 	blt.w	80252a8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20c>
 8025110:	f11c 0c01 	adds.w	ip, ip, #1
 8025114:	f100 80bf 	bmi.w	8025296 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 8025118:	4561      	cmp	r1, ip
 802511a:	f2c0 80bc 	blt.w	8025296 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 802511e:	3301      	adds	r3, #1
 8025120:	f100 80b9 	bmi.w	8025296 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 8025124:	429a      	cmp	r2, r3
 8025126:	f2c0 80b6 	blt.w	8025296 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 802512a:	46a2      	mov	sl, r4
 802512c:	465f      	mov	r7, fp
 802512e:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	@ 0x24
 8025132:	f1ba 0f00 	cmp.w	sl, #0
 8025136:	f340 80d4 	ble.w	80252e2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x246>
 802513a:	f3c5 3303 	ubfx	r3, r5, #12, #4
 802513e:	1430      	asrs	r0, r6, #16
 8025140:	f3c6 3103 	ubfx	r1, r6, #12, #4
 8025144:	9308      	str	r3, [sp, #32]
 8025146:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8025148:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
 802514c:	142b      	asrs	r3, r5, #16
 802514e:	f100 8124 	bmi.w	802539a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 8025152:	f10c 32ff 	add.w	r2, ip, #4294967295
 8025156:	4293      	cmp	r3, r2
 8025158:	f280 811f 	bge.w	802539a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 802515c:	2800      	cmp	r0, #0
 802515e:	f2c0 811c 	blt.w	802539a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 8025162:	f10e 32ff 	add.w	r2, lr, #4294967295
 8025166:	4290      	cmp	r0, r2
 8025168:	f280 8117 	bge.w	802539a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 802516c:	fb00 3309 	mla	r3, r0, r9, r3
 8025170:	0858      	lsrs	r0, r3, #1
 8025172:	07da      	lsls	r2, r3, #31
 8025174:	9a08      	ldr	r2, [sp, #32]
 8025176:	f818 c000 	ldrb.w	ip, [r8, r0]
 802517a:	bf54      	ite	pl
 802517c:	f00c 0c0f 	andpl.w	ip, ip, #15
 8025180:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8025184:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8025188:	fa5f fc8c 	uxtb.w	ip, ip
 802518c:	2a00      	cmp	r2, #0
 802518e:	f000 80ed 	beq.w	802536c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d0>
 8025192:	1c58      	adds	r0, r3, #1
 8025194:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 8025198:	07c0      	lsls	r0, r0, #31
 802519a:	f818 e00e 	ldrb.w	lr, [r8, lr]
 802519e:	bf54      	ite	pl
 80251a0:	f00e 0e0f 	andpl.w	lr, lr, #15
 80251a4:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
 80251a8:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
 80251ac:	fa5f fe8e 	uxtb.w	lr, lr
 80251b0:	f8cd e034 	str.w	lr, [sp, #52]	@ 0x34
 80251b4:	b1c9      	cbz	r1, 80251ea <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 80251b6:	444b      	add	r3, r9
 80251b8:	0858      	lsrs	r0, r3, #1
 80251ba:	07da      	lsls	r2, r3, #31
 80251bc:	f818 0000 	ldrb.w	r0, [r8, r0]
 80251c0:	bf54      	ite	pl
 80251c2:	f000 000f 	andpl.w	r0, r0, #15
 80251c6:	1100      	asrmi	r0, r0, #4
 80251c8:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 80251cc:	b2c0      	uxtb	r0, r0
 80251ce:	900a      	str	r0, [sp, #40]	@ 0x28
 80251d0:	1c58      	adds	r0, r3, #1
 80251d2:	0843      	lsrs	r3, r0, #1
 80251d4:	07c2      	lsls	r2, r0, #31
 80251d6:	f818 3003 	ldrb.w	r3, [r8, r3]
 80251da:	bf54      	ite	pl
 80251dc:	f003 030f 	andpl.w	r3, r3, #15
 80251e0:	111b      	asrmi	r3, r3, #4
 80251e2:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 80251e6:	b2db      	uxtb	r3, r3
 80251e8:	930e      	str	r3, [sp, #56]	@ 0x38
 80251ea:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 80251ee:	b289      	uxth	r1, r1
 80251f0:	fb02 f301 	mul.w	r3, r2, r1
 80251f4:	0112      	lsls	r2, r2, #4
 80251f6:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 80251fa:	f5c2 7080 	rsb	r0, r2, #256	@ 0x100
 80251fe:	1ad2      	subs	r2, r2, r3
 8025200:	b289      	uxth	r1, r1
 8025202:	b292      	uxth	r2, r2
 8025204:	1a40      	subs	r0, r0, r1
 8025206:	fa1f fe80 	uxth.w	lr, r0
 802520a:	980d      	ldr	r0, [sp, #52]	@ 0x34
 802520c:	4342      	muls	r2, r0
 802520e:	fb0c 2c0e 	mla	ip, ip, lr, r2
 8025212:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8025214:	fb01 c102 	mla	r1, r1, r2, ip
 8025218:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 802521a:	fb03 1302 	mla	r3, r3, r2, r1
 802521e:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8025222:	b383      	cbz	r3, 8025286 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 8025224:	4ac6      	ldr	r2, [pc, #792]	@ (8025540 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a4>)
 8025226:	2bff      	cmp	r3, #255	@ 0xff
 8025228:	6812      	ldr	r2, [r2, #0]
 802522a:	f3c2 4e07 	ubfx	lr, r2, #16, #8
 802522e:	f3c2 2007 	ubfx	r0, r2, #8, #8
 8025232:	b2d2      	uxtb	r2, r2
 8025234:	f000 80ac 	beq.w	8025390 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 8025238:	b299      	uxth	r1, r3
 802523a:	43db      	mvns	r3, r3
 802523c:	f897 c000 	ldrb.w	ip, [r7]
 8025240:	fb12 f201 	smulbb	r2, r2, r1
 8025244:	b2db      	uxtb	r3, r3
 8025246:	fb10 f001 	smulbb	r0, r0, r1
 802524a:	fb0c 2203 	mla	r2, ip, r3, r2
 802524e:	fb1e f101 	smulbb	r1, lr, r1
 8025252:	b292      	uxth	r2, r2
 8025254:	f102 0c01 	add.w	ip, r2, #1
 8025258:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 802525c:	1212      	asrs	r2, r2, #8
 802525e:	703a      	strb	r2, [r7, #0]
 8025260:	787a      	ldrb	r2, [r7, #1]
 8025262:	fb02 0003 	mla	r0, r2, r3, r0
 8025266:	b280      	uxth	r0, r0
 8025268:	1c42      	adds	r2, r0, #1
 802526a:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 802526e:	78ba      	ldrb	r2, [r7, #2]
 8025270:	fb02 1303 	mla	r3, r2, r3, r1
 8025274:	1200      	asrs	r0, r0, #8
 8025276:	b29b      	uxth	r3, r3
 8025278:	7078      	strb	r0, [r7, #1]
 802527a:	f103 0e01 	add.w	lr, r3, #1
 802527e:	eb0e 2313 	add.w	r3, lr, r3, lsr #8
 8025282:	121b      	asrs	r3, r3, #8
 8025284:	70bb      	strb	r3, [r7, #2]
 8025286:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8025288:	3703      	adds	r7, #3
 802528a:	f10a 3aff 	add.w	sl, sl, #4294967295
 802528e:	441d      	add	r5, r3
 8025290:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8025292:	441e      	add	r6, r3
 8025294:	e74d      	b.n	8025132 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8025296:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8025298:	3c01      	subs	r4, #1
 802529a:	f10b 0b03 	add.w	fp, fp, #3
 802529e:	441d      	add	r5, r3
 80252a0:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80252a2:	441e      	add	r6, r3
 80252a4:	e725      	b.n	80250f2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56>
 80252a6:	d021      	beq.n	80252ec <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x250>
 80252a8:	1e63      	subs	r3, r4, #1
 80252aa:	981f      	ldr	r0, [sp, #124]	@ 0x7c
 80252ac:	fb00 5003 	mla	r0, r0, r3, r5
 80252b0:	1400      	asrs	r0, r0, #16
 80252b2:	f53f af3a 	bmi.w	802512a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 80252b6:	3901      	subs	r1, #1
 80252b8:	4288      	cmp	r0, r1
 80252ba:	f6bf af36 	bge.w	802512a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 80252be:	9920      	ldr	r1, [sp, #128]	@ 0x80
 80252c0:	fb01 6303 	mla	r3, r1, r3, r6
 80252c4:	141b      	asrs	r3, r3, #16
 80252c6:	f53f af30 	bmi.w	802512a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 80252ca:	3a01      	subs	r2, #1
 80252cc:	4293      	cmp	r3, r2
 80252ce:	f6bf af2c 	bge.w	802512a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 80252d2:	f10b 0c03 	add.w	ip, fp, #3
 80252d6:	46a6      	mov	lr, r4
 80252d8:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	@ 0x24
 80252dc:	f1be 0f00 	cmp.w	lr, #0
 80252e0:	dc79      	bgt.n	80253d6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33a>
 80252e2:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 80252e6:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80252ea:	44a3      	add	fp, r4
 80252ec:	9b07      	ldr	r3, [sp, #28]
 80252ee:	2b00      	cmp	r3, #0
 80252f0:	f340 8123 	ble.w	802553a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49e>
 80252f4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80252f8:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 80252fa:	ee30 0a04 	vadd.f32	s0, s0, s8
 80252fe:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8025302:	eef0 6a62 	vmov.f32	s13, s5
 8025306:	eec7 7a00 	vdiv.f32	s15, s14, s0
 802530a:	ee31 1a05 	vadd.f32	s2, s2, s10
 802530e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8025312:	ee16 5a90 	vmov	r5, s13
 8025316:	eef0 6a43 	vmov.f32	s13, s6
 802531a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802531e:	ee16 6a90 	vmov	r6, s13
 8025322:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8025326:	ee61 7a27 	vmul.f32	s15, s2, s15
 802532a:	ee77 2a62 	vsub.f32	s5, s14, s5
 802532e:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8025332:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8025336:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 802533a:	ee12 2a90 	vmov	r2, s5
 802533e:	eef0 2a47 	vmov.f32	s5, s14
 8025342:	fb92 f3f3 	sdiv	r3, r2, r3
 8025346:	ee13 2a10 	vmov	r2, s6
 802534a:	931f      	str	r3, [sp, #124]	@ 0x7c
 802534c:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 802534e:	eeb0 3a67 	vmov.f32	s6, s15
 8025352:	fb92 f3f3 	sdiv	r3, r2, r3
 8025356:	9320      	str	r3, [sp, #128]	@ 0x80
 8025358:	9b07      	ldr	r3, [sp, #28]
 802535a:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 802535c:	3b01      	subs	r3, #1
 802535e:	9307      	str	r3, [sp, #28]
 8025360:	bf08      	it	eq
 8025362:	4614      	moveq	r4, r2
 8025364:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8025366:	bf18      	it	ne
 8025368:	461c      	movne	r4, r3
 802536a:	e6b4      	b.n	80250d6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 802536c:	2900      	cmp	r1, #0
 802536e:	f43f af3c 	beq.w	80251ea <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 8025372:	eb09 0003 	add.w	r0, r9, r3
 8025376:	0843      	lsrs	r3, r0, #1
 8025378:	07c0      	lsls	r0, r0, #31
 802537a:	f818 3003 	ldrb.w	r3, [r8, r3]
 802537e:	bf54      	ite	pl
 8025380:	f003 030f 	andpl.w	r3, r3, #15
 8025384:	111b      	asrmi	r3, r3, #4
 8025386:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 802538a:	b2db      	uxtb	r3, r3
 802538c:	930a      	str	r3, [sp, #40]	@ 0x28
 802538e:	e72c      	b.n	80251ea <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 8025390:	703a      	strb	r2, [r7, #0]
 8025392:	7078      	strb	r0, [r7, #1]
 8025394:	f887 e002 	strb.w	lr, [r7, #2]
 8025398:	e775      	b.n	8025286 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 802539a:	1c5a      	adds	r2, r3, #1
 802539c:	f53f af73 	bmi.w	8025286 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 80253a0:	4594      	cmp	ip, r2
 80253a2:	f6ff af70 	blt.w	8025286 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 80253a6:	1c42      	adds	r2, r0, #1
 80253a8:	f53f af6d 	bmi.w	8025286 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 80253ac:	4596      	cmp	lr, r2
 80253ae:	f6ff af6a 	blt.w	8025286 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 80253b2:	9302      	str	r3, [sp, #8]
 80253b4:	fa0f f38e 	sxth.w	r3, lr
 80253b8:	9a08      	ldr	r2, [sp, #32]
 80253ba:	9301      	str	r3, [sp, #4]
 80253bc:	fa0f f38c 	sxth.w	r3, ip
 80253c0:	9105      	str	r1, [sp, #20]
 80253c2:	4639      	mov	r1, r7
 80253c4:	9300      	str	r3, [sp, #0]
 80253c6:	464b      	mov	r3, r9
 80253c8:	e9cd 0203 	strd	r0, r2, [sp, #12]
 80253cc:	4642      	mov	r2, r8
 80253ce:	9811      	ldr	r0, [sp, #68]	@ 0x44
 80253d0:	f7ff fd90 	bl	8024ef4 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh>
 80253d4:	e757      	b.n	8025286 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 80253d6:	142a      	asrs	r2, r5, #16
 80253d8:	f3c5 3003 	ubfx	r0, r5, #12, #4
 80253dc:	1433      	asrs	r3, r6, #16
 80253de:	f3c6 3703 	ubfx	r7, r6, #12, #4
 80253e2:	fb09 2303 	mla	r3, r9, r3, r2
 80253e6:	085a      	lsrs	r2, r3, #1
 80253e8:	07d9      	lsls	r1, r3, #31
 80253ea:	f818 2002 	ldrb.w	r2, [r8, r2]
 80253ee:	bf54      	ite	pl
 80253f0:	f002 020f 	andpl.w	r2, r2, #15
 80253f4:	1112      	asrmi	r2, r2, #4
 80253f6:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 80253fa:	b2d2      	uxtb	r2, r2
 80253fc:	2800      	cmp	r0, #0
 80253fe:	f000 8085 	beq.w	802550c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x470>
 8025402:	f103 0a01 	add.w	sl, r3, #1
 8025406:	ea4f 015a 	mov.w	r1, sl, lsr #1
 802540a:	f01a 0f01 	tst.w	sl, #1
 802540e:	f818 1001 	ldrb.w	r1, [r8, r1]
 8025412:	bf0c      	ite	eq
 8025414:	f001 010f 	andeq.w	r1, r1, #15
 8025418:	1109      	asrne	r1, r1, #4
 802541a:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 802541e:	b2c9      	uxtb	r1, r1
 8025420:	910f      	str	r1, [sp, #60]	@ 0x3c
 8025422:	b1df      	cbz	r7, 802545c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c0>
 8025424:	444b      	add	r3, r9
 8025426:	0859      	lsrs	r1, r3, #1
 8025428:	f013 0f01 	tst.w	r3, #1
 802542c:	f103 0301 	add.w	r3, r3, #1
 8025430:	f818 1001 	ldrb.w	r1, [r8, r1]
 8025434:	bf0c      	ite	eq
 8025436:	f001 010f 	andeq.w	r1, r1, #15
 802543a:	1109      	asrne	r1, r1, #4
 802543c:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8025440:	b2c9      	uxtb	r1, r1
 8025442:	910b      	str	r1, [sp, #44]	@ 0x2c
 8025444:	0859      	lsrs	r1, r3, #1
 8025446:	07db      	lsls	r3, r3, #31
 8025448:	f818 1001 	ldrb.w	r1, [r8, r1]
 802544c:	bf54      	ite	pl
 802544e:	f001 010f 	andpl.w	r1, r1, #15
 8025452:	1109      	asrmi	r1, r1, #4
 8025454:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8025458:	b2c9      	uxtb	r1, r1
 802545a:	9110      	str	r1, [sp, #64]	@ 0x40
 802545c:	b280      	uxth	r0, r0
 802545e:	b2bf      	uxth	r7, r7
 8025460:	fb00 f307 	mul.w	r3, r0, r7
 8025464:	0100      	lsls	r0, r0, #4
 8025466:	ebc3 1707 	rsb	r7, r3, r7, lsl #4
 802546a:	f5c0 7180 	rsb	r1, r0, #256	@ 0x100
 802546e:	1ac0      	subs	r0, r0, r3
 8025470:	b2bf      	uxth	r7, r7
 8025472:	b280      	uxth	r0, r0
 8025474:	1bc9      	subs	r1, r1, r7
 8025476:	fa1f fa81 	uxth.w	sl, r1
 802547a:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 802547c:	4348      	muls	r0, r1
 802547e:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8025480:	fb02 020a 	mla	r2, r2, sl, r0
 8025484:	fb07 2701 	mla	r7, r7, r1, r2
 8025488:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 802548a:	fb03 7302 	mla	r3, r3, r2, r7
 802548e:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8025492:	b393      	cbz	r3, 80254fa <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 8025494:	4a2a      	ldr	r2, [pc, #168]	@ (8025540 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a4>)
 8025496:	2bff      	cmp	r3, #255	@ 0xff
 8025498:	6811      	ldr	r1, [r2, #0]
 802549a:	f3c1 4a07 	ubfx	sl, r1, #16, #8
 802549e:	f3c1 2707 	ubfx	r7, r1, #8, #8
 80254a2:	b2c9      	uxtb	r1, r1
 80254a4:	d042      	beq.n	802552c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x490>
 80254a6:	b298      	uxth	r0, r3
 80254a8:	43db      	mvns	r3, r3
 80254aa:	f81c 2c03 	ldrb.w	r2, [ip, #-3]
 80254ae:	fb11 f100 	smulbb	r1, r1, r0
 80254b2:	b2db      	uxtb	r3, r3
 80254b4:	fb17 f700 	smulbb	r7, r7, r0
 80254b8:	fb02 1103 	mla	r1, r2, r3, r1
 80254bc:	fb1a f000 	smulbb	r0, sl, r0
 80254c0:	b289      	uxth	r1, r1
 80254c2:	1c4a      	adds	r2, r1, #1
 80254c4:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 80254c8:	f81c 2c02 	ldrb.w	r2, [ip, #-2]
 80254cc:	fb02 7703 	mla	r7, r2, r3, r7
 80254d0:	1209      	asrs	r1, r1, #8
 80254d2:	b2bf      	uxth	r7, r7
 80254d4:	f80c 1c03 	strb.w	r1, [ip, #-3]
 80254d8:	1c7a      	adds	r2, r7, #1
 80254da:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 80254de:	f81c 2c01 	ldrb.w	r2, [ip, #-1]
 80254e2:	fb02 0303 	mla	r3, r2, r3, r0
 80254e6:	123f      	asrs	r7, r7, #8
 80254e8:	b29b      	uxth	r3, r3
 80254ea:	f80c 7c02 	strb.w	r7, [ip, #-2]
 80254ee:	1c5a      	adds	r2, r3, #1
 80254f0:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 80254f4:	121b      	asrs	r3, r3, #8
 80254f6:	f80c 3c01 	strb.w	r3, [ip, #-1]
 80254fa:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 80254fc:	f10c 0c03 	add.w	ip, ip, #3
 8025500:	f10e 3eff 	add.w	lr, lr, #4294967295
 8025504:	441d      	add	r5, r3
 8025506:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8025508:	441e      	add	r6, r3
 802550a:	e6e7      	b.n	80252dc <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x240>
 802550c:	2f00      	cmp	r7, #0
 802550e:	d0a5      	beq.n	802545c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c0>
 8025510:	444b      	add	r3, r9
 8025512:	0859      	lsrs	r1, r3, #1
 8025514:	07db      	lsls	r3, r3, #31
 8025516:	f818 1001 	ldrb.w	r1, [r8, r1]
 802551a:	bf54      	ite	pl
 802551c:	f001 010f 	andpl.w	r1, r1, #15
 8025520:	1109      	asrmi	r1, r1, #4
 8025522:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8025526:	b2c9      	uxtb	r1, r1
 8025528:	910b      	str	r1, [sp, #44]	@ 0x2c
 802552a:	e797      	b.n	802545c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c0>
 802552c:	f80c 1c03 	strb.w	r1, [ip, #-3]
 8025530:	f80c 7c02 	strb.w	r7, [ip, #-2]
 8025534:	f80c ac01 	strb.w	sl, [ip, #-1]
 8025538:	e7df      	b.n	80254fa <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 802553a:	b013      	add	sp, #76	@ 0x4c
 802553c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8025540:	24028e30 	.word	0x24028e30

08025544 <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L416blendPixelRGB888EPKhPhi>:
 8025544:	b530      	push	{r4, r5, lr}
 8025546:	b29d      	uxth	r5, r3
 8025548:	f1c3 03ff 	rsb	r3, r3, #255	@ 0xff
 802554c:	780c      	ldrb	r4, [r1, #0]
 802554e:	b298      	uxth	r0, r3
 8025550:	7813      	ldrb	r3, [r2, #0]
 8025552:	fb14 f405 	smulbb	r4, r4, r5
 8025556:	fb13 f300 	smulbb	r3, r3, r0
 802555a:	441c      	add	r4, r3
 802555c:	b2a4      	uxth	r4, r4
 802555e:	1c63      	adds	r3, r4, #1
 8025560:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 8025564:	7853      	ldrb	r3, [r2, #1]
 8025566:	fb13 f300 	smulbb	r3, r3, r0
 802556a:	1224      	asrs	r4, r4, #8
 802556c:	7014      	strb	r4, [r2, #0]
 802556e:	784c      	ldrb	r4, [r1, #1]
 8025570:	fb14 f405 	smulbb	r4, r4, r5
 8025574:	441c      	add	r4, r3
 8025576:	b2a4      	uxth	r4, r4
 8025578:	1c63      	adds	r3, r4, #1
 802557a:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 802557e:	1224      	asrs	r4, r4, #8
 8025580:	7054      	strb	r4, [r2, #1]
 8025582:	788b      	ldrb	r3, [r1, #2]
 8025584:	7891      	ldrb	r1, [r2, #2]
 8025586:	fb13 f305 	smulbb	r3, r3, r5
 802558a:	fb11 f000 	smulbb	r0, r1, r0
 802558e:	4403      	add	r3, r0
 8025590:	b29b      	uxth	r3, r3
 8025592:	1c59      	adds	r1, r3, #1
 8025594:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 8025598:	121b      	asrs	r3, r3, #8
 802559a:	7093      	strb	r3, [r2, #2]
 802559c:	bd30      	pop	{r4, r5, pc}
	...

080255a0 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h>:
 80255a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80255a4:	461c      	mov	r4, r3
 80255a6:	b08b      	sub	sp, #44	@ 0x2c
 80255a8:	460e      	mov	r6, r1
 80255aa:	4615      	mov	r5, r2
 80255ac:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80255ae:	4682      	mov	sl, r0
 80255b0:	6861      	ldr	r1, [r4, #4]
 80255b2:	aa06      	add	r2, sp, #24
 80255b4:	6820      	ldr	r0, [r4, #0]
 80255b6:	2702      	movs	r7, #2
 80255b8:	f89d 9054 	ldrb.w	r9, [sp, #84]	@ 0x54
 80255bc:	3504      	adds	r5, #4
 80255be:	c203      	stmia	r2!, {r0, r1}
 80255c0:	6818      	ldr	r0, [r3, #0]
 80255c2:	aa08      	add	r2, sp, #32
 80255c4:	6859      	ldr	r1, [r3, #4]
 80255c6:	c203      	stmia	r2!, {r0, r1}
 80255c8:	a806      	add	r0, sp, #24
 80255ca:	f7f2 fa87 	bl	8017adc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80255ce:	4621      	mov	r1, r4
 80255d0:	a808      	add	r0, sp, #32
 80255d2:	f7f2 fac7 	bl	8017b64 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80255d6:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 80255da:	f9bd b026 	ldrsh.w	fp, [sp, #38]	@ 0x26
 80255de:	f002 0301 	and.w	r3, r2, #1
 80255e2:	f9bd 8024 	ldrsh.w	r8, [sp, #36]	@ 0x24
 80255e6:	9302      	str	r3, [sp, #8]
 80255e8:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 80255ec:	f003 0101 	and.w	r1, r3, #1
 80255f0:	9101      	str	r1, [sp, #4]
 80255f2:	9801      	ldr	r0, [sp, #4]
 80255f4:	f9bd 1022 	ldrsh.w	r1, [sp, #34]	@ 0x22
 80255f8:	4403      	add	r3, r0
 80255fa:	fb01 2303 	mla	r3, r1, r3, r2
 80255fe:	fb93 f3f7 	sdiv	r3, r3, r7
 8025602:	441e      	add	r6, r3
 8025604:	f8bd 3018 	ldrh.w	r3, [sp, #24]
 8025608:	441a      	add	r2, r3
 802560a:	f8bd 301a 	ldrh.w	r3, [sp, #26]
 802560e:	4419      	add	r1, r3
 8025610:	4b70      	ldr	r3, [pc, #448]	@ (80257d4 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x234>)
 8025612:	f8ad 2020 	strh.w	r2, [sp, #32]
 8025616:	6818      	ldr	r0, [r3, #0]
 8025618:	f8ad 1022 	strh.w	r1, [sp, #34]	@ 0x22
 802561c:	6803      	ldr	r3, [r0, #0]
 802561e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8025620:	4798      	blx	r3
 8025622:	4a6d      	ldr	r2, [pc, #436]	@ (80257d8 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x238>)
 8025624:	f9bd 1020 	ldrsh.w	r1, [sp, #32]
 8025628:	f1b9 0fff 	cmp.w	r9, #255	@ 0xff
 802562c:	8813      	ldrh	r3, [r2, #0]
 802562e:	f9bd 4022 	ldrsh.w	r4, [sp, #34]	@ 0x22
 8025632:	fb03 1404 	mla	r4, r3, r4, r1
 8025636:	4611      	mov	r1, r2
 8025638:	fb0b f303 	mul.w	r3, fp, r3
 802563c:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8025640:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8025644:	4404      	add	r4, r0
 8025646:	4423      	add	r3, r4
 8025648:	d073      	beq.n	8025732 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x192>
 802564a:	9705      	str	r7, [sp, #20]
 802564c:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8025650:	9b03      	ldr	r3, [sp, #12]
 8025652:	429c      	cmp	r4, r3
 8025654:	f080 80b5 	bcs.w	80257c2 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x222>
 8025658:	9b02      	ldr	r3, [sp, #8]
 802565a:	b35b      	cbz	r3, 80256b4 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x114>
 802565c:	7831      	ldrb	r1, [r6, #0]
 802565e:	4622      	mov	r2, r4
 8025660:	1c77      	adds	r7, r6, #1
 8025662:	3403      	adds	r4, #3
 8025664:	f001 010f 	and.w	r1, r1, #15
 8025668:	f108 3bff 	add.w	fp, r8, #4294967295
 802566c:	464b      	mov	r3, r9
 802566e:	4650      	mov	r0, sl
 8025670:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8025674:	4429      	add	r1, r5
 8025676:	f7ff ff65 	bl	8025544 <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L416blendPixelRGB888EPKhPhi>
 802567a:	f1bb 0f01 	cmp.w	fp, #1
 802567e:	dd1c      	ble.n	80256ba <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x11a>
 8025680:	7839      	ldrb	r1, [r7, #0]
 8025682:	4622      	mov	r2, r4
 8025684:	464b      	mov	r3, r9
 8025686:	4650      	mov	r0, sl
 8025688:	0909      	lsrs	r1, r1, #4
 802568a:	f1ab 0b02 	sub.w	fp, fp, #2
 802568e:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8025692:	4429      	add	r1, r5
 8025694:	f7ff ff56 	bl	8025544 <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L416blendPixelRGB888EPKhPhi>
 8025698:	f817 1b01 	ldrb.w	r1, [r7], #1
 802569c:	1ce2      	adds	r2, r4, #3
 802569e:	464b      	mov	r3, r9
 80256a0:	f001 010f 	and.w	r1, r1, #15
 80256a4:	4650      	mov	r0, sl
 80256a6:	3406      	adds	r4, #6
 80256a8:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80256ac:	4429      	add	r1, r5
 80256ae:	f7ff ff49 	bl	8025544 <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L416blendPixelRGB888EPKhPhi>
 80256b2:	e7e2      	b.n	802567a <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0xda>
 80256b4:	4637      	mov	r7, r6
 80256b6:	46c3      	mov	fp, r8
 80256b8:	e7df      	b.n	802567a <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0xda>
 80256ba:	d10a      	bne.n	80256d2 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x132>
 80256bc:	7839      	ldrb	r1, [r7, #0]
 80256be:	4622      	mov	r2, r4
 80256c0:	3403      	adds	r4, #3
 80256c2:	464b      	mov	r3, r9
 80256c4:	0909      	lsrs	r1, r1, #4
 80256c6:	4650      	mov	r0, sl
 80256c8:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80256cc:	4429      	add	r1, r5
 80256ce:	f7ff ff39 	bl	8025544 <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L416blendPixelRGB888EPKhPhi>
 80256d2:	9b04      	ldr	r3, [sp, #16]
 80256d4:	9a01      	ldr	r2, [sp, #4]
 80256d6:	881b      	ldrh	r3, [r3, #0]
 80256d8:	eba3 0308 	sub.w	r3, r3, r8
 80256dc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80256e0:	441c      	add	r4, r3
 80256e2:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 80256e6:	4413      	add	r3, r2
 80256e8:	9a05      	ldr	r2, [sp, #20]
 80256ea:	fb93 f3f2 	sdiv	r3, r3, r2
 80256ee:	441e      	add	r6, r3
 80256f0:	e7ae      	b.n	8025650 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0xb0>
 80256f2:	4632      	mov	r2, r6
 80256f4:	46c4      	mov	ip, r8
 80256f6:	e037      	b.n	8025768 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1c8>
 80256f8:	d10e      	bne.n	8025718 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x178>
 80256fa:	7812      	ldrb	r2, [r2, #0]
 80256fc:	3003      	adds	r0, #3
 80256fe:	0912      	lsrs	r2, r2, #4
 8025700:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8025704:	18ac      	adds	r4, r5, r2
 8025706:	5caa      	ldrb	r2, [r5, r2]
 8025708:	f800 2c03 	strb.w	r2, [r0, #-3]
 802570c:	7862      	ldrb	r2, [r4, #1]
 802570e:	f800 2c02 	strb.w	r2, [r0, #-2]
 8025712:	78a2      	ldrb	r2, [r4, #2]
 8025714:	f800 2c01 	strb.w	r2, [r0, #-1]
 8025718:	880c      	ldrh	r4, [r1, #0]
 802571a:	f9bd 201c 	ldrsh.w	r2, [sp, #28]
 802571e:	eba4 0408 	sub.w	r4, r4, r8
 8025722:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8025726:	4404      	add	r4, r0
 8025728:	9801      	ldr	r0, [sp, #4]
 802572a:	4402      	add	r2, r0
 802572c:	fb92 f2f7 	sdiv	r2, r2, r7
 8025730:	4416      	add	r6, r2
 8025732:	429c      	cmp	r4, r3
 8025734:	d245      	bcs.n	80257c2 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x222>
 8025736:	9a02      	ldr	r2, [sp, #8]
 8025738:	2a00      	cmp	r2, #0
 802573a:	d0da      	beq.n	80256f2 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x152>
 802573c:	7830      	ldrb	r0, [r6, #0]
 802573e:	1c72      	adds	r2, r6, #1
 8025740:	3403      	adds	r4, #3
 8025742:	f000 000f 	and.w	r0, r0, #15
 8025746:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 802574a:	eb05 0c00 	add.w	ip, r5, r0
 802574e:	5c28      	ldrb	r0, [r5, r0]
 8025750:	f804 0c03 	strb.w	r0, [r4, #-3]
 8025754:	f89c 0001 	ldrb.w	r0, [ip, #1]
 8025758:	f804 0c02 	strb.w	r0, [r4, #-2]
 802575c:	f89c 0002 	ldrb.w	r0, [ip, #2]
 8025760:	f108 3cff 	add.w	ip, r8, #4294967295
 8025764:	f804 0c01 	strb.w	r0, [r4, #-1]
 8025768:	f1bc 0f01 	cmp.w	ip, #1
 802576c:	4620      	mov	r0, r4
 802576e:	f104 0406 	add.w	r4, r4, #6
 8025772:	ddc1      	ble.n	80256f8 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x158>
 8025774:	7810      	ldrb	r0, [r2, #0]
 8025776:	f1ac 0c02 	sub.w	ip, ip, #2
 802577a:	0900      	lsrs	r0, r0, #4
 802577c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8025780:	eb05 0e00 	add.w	lr, r5, r0
 8025784:	5c28      	ldrb	r0, [r5, r0]
 8025786:	f804 0c06 	strb.w	r0, [r4, #-6]
 802578a:	f89e 0001 	ldrb.w	r0, [lr, #1]
 802578e:	f804 0c05 	strb.w	r0, [r4, #-5]
 8025792:	f89e 0002 	ldrb.w	r0, [lr, #2]
 8025796:	f804 0c04 	strb.w	r0, [r4, #-4]
 802579a:	f812 0b01 	ldrb.w	r0, [r2], #1
 802579e:	f000 000f 	and.w	r0, r0, #15
 80257a2:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80257a6:	eb05 0e00 	add.w	lr, r5, r0
 80257aa:	5c28      	ldrb	r0, [r5, r0]
 80257ac:	f804 0c03 	strb.w	r0, [r4, #-3]
 80257b0:	f89e 0001 	ldrb.w	r0, [lr, #1]
 80257b4:	f804 0c02 	strb.w	r0, [r4, #-2]
 80257b8:	f89e 0002 	ldrb.w	r0, [lr, #2]
 80257bc:	f804 0c01 	strb.w	r0, [r4, #-1]
 80257c0:	e7d2      	b.n	8025768 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1c8>
 80257c2:	4b04      	ldr	r3, [pc, #16]	@ (80257d4 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x234>)
 80257c4:	6818      	ldr	r0, [r3, #0]
 80257c6:	6803      	ldr	r3, [r0, #0]
 80257c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80257ca:	4798      	blx	r3
 80257cc:	b00b      	add	sp, #44	@ 0x2c
 80257ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80257d2:	bf00      	nop
 80257d4:	24028e20 	.word	0x24028e20
 80257d8:	24028e1a 	.word	0x24028e1a

080257dc <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L418blendPixelARGB8888EPKhPhih>:
 80257dc:	b530      	push	{r4, r5, lr}
 80257de:	f89d 000c 	ldrb.w	r0, [sp, #12]
 80257e2:	780d      	ldrb	r5, [r1, #0]
 80257e4:	28ff      	cmp	r0, #255	@ 0xff
 80257e6:	d107      	bne.n	80257f8 <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L418blendPixelARGB8888EPKhPhih+0x1c>
 80257e8:	2bff      	cmp	r3, #255	@ 0xff
 80257ea:	d105      	bne.n	80257f8 <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L418blendPixelARGB8888EPKhPhih+0x1c>
 80257ec:	7015      	strb	r5, [r2, #0]
 80257ee:	784b      	ldrb	r3, [r1, #1]
 80257f0:	7053      	strb	r3, [r2, #1]
 80257f2:	788b      	ldrb	r3, [r1, #2]
 80257f4:	7093      	strb	r3, [r2, #2]
 80257f6:	bd30      	pop	{r4, r5, pc}
 80257f8:	fb10 f003 	smulbb	r0, r0, r3
 80257fc:	b283      	uxth	r3, r0
 80257fe:	1c58      	adds	r0, r3, #1
 8025800:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 8025804:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8025808:	b284      	uxth	r4, r0
 802580a:	43c0      	mvns	r0, r0
 802580c:	fb15 f504 	smulbb	r5, r5, r4
 8025810:	b2c3      	uxtb	r3, r0
 8025812:	7810      	ldrb	r0, [r2, #0]
 8025814:	fb00 5003 	mla	r0, r0, r3, r5
 8025818:	b280      	uxth	r0, r0
 802581a:	1c45      	adds	r5, r0, #1
 802581c:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 8025820:	7855      	ldrb	r5, [r2, #1]
 8025822:	fb15 f503 	smulbb	r5, r5, r3
 8025826:	1200      	asrs	r0, r0, #8
 8025828:	7010      	strb	r0, [r2, #0]
 802582a:	7848      	ldrb	r0, [r1, #1]
 802582c:	fb00 5004 	mla	r0, r0, r4, r5
 8025830:	b280      	uxth	r0, r0
 8025832:	1c45      	adds	r5, r0, #1
 8025834:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 8025838:	1200      	asrs	r0, r0, #8
 802583a:	7050      	strb	r0, [r2, #1]
 802583c:	7888      	ldrb	r0, [r1, #2]
 802583e:	7891      	ldrb	r1, [r2, #2]
 8025840:	fb11 f303 	smulbb	r3, r1, r3
 8025844:	fb00 3304 	mla	r3, r0, r4, r3
 8025848:	b29b      	uxth	r3, r3
 802584a:	1c59      	adds	r1, r3, #1
 802584c:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 8025850:	121b      	asrs	r3, r3, #8
 8025852:	e7cf      	b.n	80257f4 <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L418blendPixelARGB8888EPKhPhih+0x18>

08025854 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h>:
 8025854:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025858:	461d      	mov	r5, r3
 802585a:	b08f      	sub	sp, #60	@ 0x3c
 802585c:	460c      	mov	r4, r1
 802585e:	4616      	mov	r6, r2
 8025860:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8025862:	4680      	mov	r8, r0
 8025864:	6869      	ldr	r1, [r5, #4]
 8025866:	aa0a      	add	r2, sp, #40	@ 0x28
 8025868:	6828      	ldr	r0, [r5, #0]
 802586a:	3604      	adds	r6, #4
 802586c:	f89d 9064 	ldrb.w	r9, [sp, #100]	@ 0x64
 8025870:	4f57      	ldr	r7, [pc, #348]	@ (80259d0 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x17c>)
 8025872:	c203      	stmia	r2!, {r0, r1}
 8025874:	6818      	ldr	r0, [r3, #0]
 8025876:	aa0c      	add	r2, sp, #48	@ 0x30
 8025878:	6859      	ldr	r1, [r3, #4]
 802587a:	c203      	stmia	r2!, {r0, r1}
 802587c:	a80a      	add	r0, sp, #40	@ 0x28
 802587e:	f7f2 f92d 	bl	8017adc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8025882:	4629      	mov	r1, r5
 8025884:	a80c      	add	r0, sp, #48	@ 0x30
 8025886:	2502      	movs	r5, #2
 8025888:	f7f2 f96c 	bl	8017b64 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 802588c:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	@ 0x30
 8025890:	f9bd a036 	ldrsh.w	sl, [sp, #54]	@ 0x36
 8025894:	f002 0301 	and.w	r3, r2, #1
 8025898:	f9bd b034 	ldrsh.w	fp, [sp, #52]	@ 0x34
 802589c:	9304      	str	r3, [sp, #16]
 802589e:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	@ 0x2c
 80258a2:	f003 0101 	and.w	r1, r3, #1
 80258a6:	9103      	str	r1, [sp, #12]
 80258a8:	9803      	ldr	r0, [sp, #12]
 80258aa:	f9bd 1032 	ldrsh.w	r1, [sp, #50]	@ 0x32
 80258ae:	4403      	add	r3, r0
 80258b0:	6838      	ldr	r0, [r7, #0]
 80258b2:	fb01 2303 	mla	r3, r1, r3, r2
 80258b6:	fb93 f3f5 	sdiv	r3, r3, r5
 80258ba:	18e5      	adds	r5, r4, r3
 80258bc:	f8bd 3028 	ldrh.w	r3, [sp, #40]	@ 0x28
 80258c0:	441a      	add	r2, r3
 80258c2:	f8bd 302a 	ldrh.w	r3, [sp, #42]	@ 0x2a
 80258c6:	4419      	add	r1, r3
 80258c8:	f8ad 2030 	strh.w	r2, [sp, #48]	@ 0x30
 80258cc:	f8ad 1032 	strh.w	r1, [sp, #50]	@ 0x32
 80258d0:	6803      	ldr	r3, [r0, #0]
 80258d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80258d4:	4798      	blx	r3
 80258d6:	4a3f      	ldr	r2, [pc, #252]	@ (80259d4 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x180>)
 80258d8:	f9bd 4032 	ldrsh.w	r4, [sp, #50]	@ 0x32
 80258dc:	8813      	ldrh	r3, [r2, #0]
 80258de:	f9bd 1030 	ldrsh.w	r1, [sp, #48]	@ 0x30
 80258e2:	9207      	str	r2, [sp, #28]
 80258e4:	fb03 1404 	mla	r4, r3, r4, r1
 80258e8:	fb0a f303 	mul.w	r3, sl, r3
 80258ec:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80258f0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80258f4:	4404      	add	r4, r0
 80258f6:	18e3      	adds	r3, r4, r3
 80258f8:	e9cd 3705 	strd	r3, r7, [sp, #20]
 80258fc:	9b05      	ldr	r3, [sp, #20]
 80258fe:	429c      	cmp	r4, r3
 8025900:	d25d      	bcs.n	80259be <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x16a>
 8025902:	9b04      	ldr	r3, [sp, #16]
 8025904:	2b00      	cmp	r3, #0
 8025906:	d037      	beq.n	8025978 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x124>
 8025908:	782b      	ldrb	r3, [r5, #0]
 802590a:	1c6f      	adds	r7, r5, #1
 802590c:	f003 030f 	and.w	r3, r3, #15
 8025910:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8025914:	9309      	str	r3, [sp, #36]	@ 0x24
 8025916:	0e1b      	lsrs	r3, r3, #24
 8025918:	d006      	beq.n	8025928 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xd4>
 802591a:	9300      	str	r3, [sp, #0]
 802591c:	4622      	mov	r2, r4
 802591e:	464b      	mov	r3, r9
 8025920:	a909      	add	r1, sp, #36	@ 0x24
 8025922:	4640      	mov	r0, r8
 8025924:	f7ff ff5a 	bl	80257dc <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L418blendPixelARGB8888EPKhPhih>
 8025928:	3403      	adds	r4, #3
 802592a:	f10b 3aff 	add.w	sl, fp, #4294967295
 802592e:	f1ba 0f01 	cmp.w	sl, #1
 8025932:	dd24      	ble.n	802597e <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x12a>
 8025934:	783b      	ldrb	r3, [r7, #0]
 8025936:	091b      	lsrs	r3, r3, #4
 8025938:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 802593c:	9308      	str	r3, [sp, #32]
 802593e:	0e1b      	lsrs	r3, r3, #24
 8025940:	d006      	beq.n	8025950 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xfc>
 8025942:	9300      	str	r3, [sp, #0]
 8025944:	4622      	mov	r2, r4
 8025946:	464b      	mov	r3, r9
 8025948:	a908      	add	r1, sp, #32
 802594a:	4640      	mov	r0, r8
 802594c:	f7ff ff46 	bl	80257dc <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L418blendPixelARGB8888EPKhPhih>
 8025950:	f817 3b01 	ldrb.w	r3, [r7], #1
 8025954:	f003 030f 	and.w	r3, r3, #15
 8025958:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 802595c:	9309      	str	r3, [sp, #36]	@ 0x24
 802595e:	0e1b      	lsrs	r3, r3, #24
 8025960:	d006      	beq.n	8025970 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x11c>
 8025962:	9300      	str	r3, [sp, #0]
 8025964:	1ce2      	adds	r2, r4, #3
 8025966:	464b      	mov	r3, r9
 8025968:	a909      	add	r1, sp, #36	@ 0x24
 802596a:	4640      	mov	r0, r8
 802596c:	f7ff ff36 	bl	80257dc <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L418blendPixelARGB8888EPKhPhih>
 8025970:	3406      	adds	r4, #6
 8025972:	f1aa 0a02 	sub.w	sl, sl, #2
 8025976:	e7da      	b.n	802592e <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xda>
 8025978:	462f      	mov	r7, r5
 802597a:	46da      	mov	sl, fp
 802597c:	e7d7      	b.n	802592e <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xda>
 802597e:	d10e      	bne.n	802599e <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x14a>
 8025980:	783b      	ldrb	r3, [r7, #0]
 8025982:	091b      	lsrs	r3, r3, #4
 8025984:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8025988:	9309      	str	r3, [sp, #36]	@ 0x24
 802598a:	0e1b      	lsrs	r3, r3, #24
 802598c:	d006      	beq.n	802599c <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x148>
 802598e:	9300      	str	r3, [sp, #0]
 8025990:	4622      	mov	r2, r4
 8025992:	464b      	mov	r3, r9
 8025994:	a909      	add	r1, sp, #36	@ 0x24
 8025996:	4640      	mov	r0, r8
 8025998:	f7ff ff20 	bl	80257dc <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L418blendPixelARGB8888EPKhPhih>
 802599c:	3403      	adds	r4, #3
 802599e:	9b07      	ldr	r3, [sp, #28]
 80259a0:	9a03      	ldr	r2, [sp, #12]
 80259a2:	881b      	ldrh	r3, [r3, #0]
 80259a4:	eba3 030b 	sub.w	r3, r3, fp
 80259a8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80259ac:	441c      	add	r4, r3
 80259ae:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	@ 0x2c
 80259b2:	4413      	add	r3, r2
 80259b4:	2202      	movs	r2, #2
 80259b6:	fb93 f3f2 	sdiv	r3, r3, r2
 80259ba:	441d      	add	r5, r3
 80259bc:	e79e      	b.n	80258fc <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xa8>
 80259be:	9b06      	ldr	r3, [sp, #24]
 80259c0:	6818      	ldr	r0, [r3, #0]
 80259c2:	6803      	ldr	r3, [r0, #0]
 80259c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80259c6:	4798      	blx	r3
 80259c8:	b00f      	add	sp, #60	@ 0x3c
 80259ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80259ce:	bf00      	nop
 80259d0:	24028e20 	.word	0x24028e20
 80259d4:	24028e1a 	.word	0x24028e1a

080259d8 <CRC_Lock>:
 80259d8:	4a2d      	ldr	r2, [pc, #180]	@ (8025a90 <CRC_Lock+0xb8>)
 80259da:	b530      	push	{r4, r5, lr}
 80259dc:	6813      	ldr	r3, [r2, #0]
 80259de:	f24c 2540 	movw	r5, #49728	@ 0xc240
 80259e2:	f023 0301 	bic.w	r3, r3, #1
 80259e6:	6013      	str	r3, [r2, #0]
 80259e8:	f64f 72f0 	movw	r2, #65520	@ 0xfff0
 80259ec:	4b29      	ldr	r3, [pc, #164]	@ (8025a94 <CRC_Lock+0xbc>)
 80259ee:	681c      	ldr	r4, [r3, #0]
 80259f0:	4014      	ands	r4, r2
 80259f2:	42ac      	cmp	r4, r5
 80259f4:	d005      	beq.n	8025a02 <CRC_Lock+0x2a>
 80259f6:	681c      	ldr	r4, [r3, #0]
 80259f8:	f24c 2570 	movw	r5, #49776	@ 0xc270
 80259fc:	4014      	ands	r4, r2
 80259fe:	42ac      	cmp	r4, r5
 8025a00:	d125      	bne.n	8025a4e <CRC_Lock+0x76>
 8025a02:	4b25      	ldr	r3, [pc, #148]	@ (8025a98 <CRC_Lock+0xc0>)
 8025a04:	681b      	ldr	r3, [r3, #0]
 8025a06:	2b00      	cmp	r3, #0
 8025a08:	d139      	bne.n	8025a7e <CRC_Lock+0xa6>
 8025a0a:	4b24      	ldr	r3, [pc, #144]	@ (8025a9c <CRC_Lock+0xc4>)
 8025a0c:	681a      	ldr	r2, [r3, #0]
 8025a0e:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8025a12:	f5b2 6f8a 	cmp.w	r2, #1104	@ 0x450
 8025a16:	d00d      	beq.n	8025a34 <CRC_Lock+0x5c>
 8025a18:	681a      	ldr	r2, [r3, #0]
 8025a1a:	f240 4483 	movw	r4, #1155	@ 0x483
 8025a1e:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8025a22:	42a2      	cmp	r2, r4
 8025a24:	d006      	beq.n	8025a34 <CRC_Lock+0x5c>
 8025a26:	681b      	ldr	r3, [r3, #0]
 8025a28:	f240 4285 	movw	r2, #1157	@ 0x485
 8025a2c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8025a30:	4293      	cmp	r3, r2
 8025a32:	d124      	bne.n	8025a7e <CRC_Lock+0xa6>
 8025a34:	4b1a      	ldr	r3, [pc, #104]	@ (8025aa0 <CRC_Lock+0xc8>)
 8025a36:	2201      	movs	r2, #1
 8025a38:	601a      	str	r2, [r3, #0]
 8025a3a:	681a      	ldr	r2, [r3, #0]
 8025a3c:	2a00      	cmp	r2, #0
 8025a3e:	d1fc      	bne.n	8025a3a <CRC_Lock+0x62>
 8025a40:	4b18      	ldr	r3, [pc, #96]	@ (8025aa4 <CRC_Lock+0xcc>)
 8025a42:	6018      	str	r0, [r3, #0]
 8025a44:	6818      	ldr	r0, [r3, #0]
 8025a46:	1a43      	subs	r3, r0, r1
 8025a48:	4258      	negs	r0, r3
 8025a4a:	4158      	adcs	r0, r3
 8025a4c:	e00e      	b.n	8025a6c <CRC_Lock+0x94>
 8025a4e:	681b      	ldr	r3, [r3, #0]
 8025a50:	4013      	ands	r3, r2
 8025a52:	f24d 2220 	movw	r2, #53792	@ 0xd220
 8025a56:	4293      	cmp	r3, r2
 8025a58:	d111      	bne.n	8025a7e <CRC_Lock+0xa6>
 8025a5a:	4b13      	ldr	r3, [pc, #76]	@ (8025aa8 <CRC_Lock+0xd0>)
 8025a5c:	f240 4286 	movw	r2, #1158	@ 0x486
 8025a60:	681b      	ldr	r3, [r3, #0]
 8025a62:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8025a66:	4293      	cmp	r3, r2
 8025a68:	d001      	beq.n	8025a6e <CRC_Lock+0x96>
 8025a6a:	2000      	movs	r0, #0
 8025a6c:	bd30      	pop	{r4, r5, pc}
 8025a6e:	4b0f      	ldr	r3, [pc, #60]	@ (8025aac <CRC_Lock+0xd4>)
 8025a70:	2201      	movs	r2, #1
 8025a72:	601a      	str	r2, [r3, #0]
 8025a74:	681a      	ldr	r2, [r3, #0]
 8025a76:	2a00      	cmp	r2, #0
 8025a78:	d1fc      	bne.n	8025a74 <CRC_Lock+0x9c>
 8025a7a:	4b0d      	ldr	r3, [pc, #52]	@ (8025ab0 <CRC_Lock+0xd8>)
 8025a7c:	e7e1      	b.n	8025a42 <CRC_Lock+0x6a>
 8025a7e:	4b0d      	ldr	r3, [pc, #52]	@ (8025ab4 <CRC_Lock+0xdc>)
 8025a80:	2201      	movs	r2, #1
 8025a82:	601a      	str	r2, [r3, #0]
 8025a84:	681a      	ldr	r2, [r3, #0]
 8025a86:	2a00      	cmp	r2, #0
 8025a88:	d1fc      	bne.n	8025a84 <CRC_Lock+0xac>
 8025a8a:	4b0b      	ldr	r3, [pc, #44]	@ (8025ab8 <CRC_Lock+0xe0>)
 8025a8c:	e7d9      	b.n	8025a42 <CRC_Lock+0x6a>
 8025a8e:	bf00      	nop
 8025a90:	e0002000 	.word	0xe0002000
 8025a94:	e000ed00 	.word	0xe000ed00
 8025a98:	e0042000 	.word	0xe0042000
 8025a9c:	5c001000 	.word	0x5c001000
 8025aa0:	58024c08 	.word	0x58024c08
 8025aa4:	58024c00 	.word	0x58024c00
 8025aa8:	46008ff0 	.word	0x46008ff0
 8025aac:	46024c08 	.word	0x46024c08
 8025ab0:	46024c00 	.word	0x46024c00
 8025ab4:	40023008 	.word	0x40023008
 8025ab8:	40023000 	.word	0x40023000

08025abc <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>:
 8025abc:	6101      	str	r1, [r0, #16]
 8025abe:	4770      	bx	lr

08025ac0 <_ZN8touchgfx8Gestures4tickEv>:
 8025ac0:	7b83      	ldrb	r3, [r0, #14]
 8025ac2:	b14b      	cbz	r3, 8025ad8 <_ZN8touchgfx8Gestures4tickEv+0x18>
 8025ac4:	8903      	ldrh	r3, [r0, #8]
 8025ac6:	3301      	adds	r3, #1
 8025ac8:	b29b      	uxth	r3, r3
 8025aca:	2b07      	cmp	r3, #7
 8025acc:	8103      	strh	r3, [r0, #8]
 8025ace:	bf81      	itttt	hi
 8025ad0:	2300      	movhi	r3, #0
 8025ad2:	8143      	strhhi	r3, [r0, #10]
 8025ad4:	8183      	strhhi	r3, [r0, #12]
 8025ad6:	7383      	strbhi	r3, [r0, #14]
 8025ad8:	4770      	bx	lr
	...

08025adc <_ZN8touchgfx8Gestures17registerDragEventEtttt>:
 8025adc:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8025ae0:	4698      	mov	r8, r3
 8025ae2:	8883      	ldrh	r3, [r0, #4]
 8025ae4:	4604      	mov	r4, r0
 8025ae6:	4617      	mov	r7, r2
 8025ae8:	f8ad 3006 	strh.w	r3, [sp, #6]
 8025aec:	eba8 0303 	sub.w	r3, r8, r3
 8025af0:	4a19      	ldr	r2, [pc, #100]	@ (8025b58 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x7c>)
 8025af2:	460e      	mov	r6, r1
 8025af4:	b21b      	sxth	r3, r3
 8025af6:	88c1      	ldrh	r1, [r0, #6]
 8025af8:	9200      	str	r2, [sp, #0]
 8025afa:	2000      	movs	r0, #0
 8025afc:	2b00      	cmp	r3, #0
 8025afe:	8aa2      	ldrh	r2, [r4, #20]
 8025b00:	f8bd 5028 	ldrh.w	r5, [sp, #40]	@ 0x28
 8025b04:	bfb8      	it	lt
 8025b06:	425b      	neglt	r3, r3
 8025b08:	f88d 0004 	strb.w	r0, [sp, #4]
 8025b0c:	f8ad 1008 	strh.w	r1, [sp, #8]
 8025b10:	b21b      	sxth	r3, r3
 8025b12:	f8ad 800a 	strh.w	r8, [sp, #10]
 8025b16:	f8ad 500c 	strh.w	r5, [sp, #12]
 8025b1a:	4293      	cmp	r3, r2
 8025b1c:	dc07      	bgt.n	8025b2e <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x52>
 8025b1e:	1a69      	subs	r1, r5, r1
 8025b20:	b209      	sxth	r1, r1
 8025b22:	2900      	cmp	r1, #0
 8025b24:	bfb8      	it	lt
 8025b26:	4249      	neglt	r1, r1
 8025b28:	b209      	sxth	r1, r1
 8025b2a:	428a      	cmp	r2, r1
 8025b2c:	da10      	bge.n	8025b50 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x74>
 8025b2e:	6920      	ldr	r0, [r4, #16]
 8025b30:	4669      	mov	r1, sp
 8025b32:	eba8 0606 	sub.w	r6, r8, r6
 8025b36:	1bef      	subs	r7, r5, r7
 8025b38:	6803      	ldr	r3, [r0, #0]
 8025b3a:	685b      	ldr	r3, [r3, #4]
 8025b3c:	4798      	blx	r3
 8025b3e:	2300      	movs	r3, #0
 8025b40:	2001      	movs	r0, #1
 8025b42:	8166      	strh	r6, [r4, #10]
 8025b44:	8123      	strh	r3, [r4, #8]
 8025b46:	81a7      	strh	r7, [r4, #12]
 8025b48:	f8a4 8004 	strh.w	r8, [r4, #4]
 8025b4c:	80e5      	strh	r5, [r4, #6]
 8025b4e:	73a0      	strb	r0, [r4, #14]
 8025b50:	b004      	add	sp, #16
 8025b52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8025b56:	bf00      	nop
 8025b58:	0802d240 	.word	0x0802d240

08025b5c <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>:
 8025b5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8025b5e:	461e      	mov	r6, r3
 8025b60:	1e4b      	subs	r3, r1, #1
 8025b62:	b085      	sub	sp, #20
 8025b64:	4604      	mov	r4, r0
 8025b66:	2b01      	cmp	r3, #1
 8025b68:	460d      	mov	r5, r1
 8025b6a:	4617      	mov	r7, r2
 8025b6c:	d84b      	bhi.n	8025c06 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xaa>
 8025b6e:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8025b72:	1cd3      	adds	r3, r2, #3
 8025b74:	b29b      	uxth	r3, r3
 8025b76:	2b06      	cmp	r3, #6
 8025b78:	d916      	bls.n	8025ba8 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x4c>
 8025b7a:	f8df c0a0 	ldr.w	ip, [pc, #160]	@ 8025c1c <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 8025b7e:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8025b82:	f8cd c004 	str.w	ip, [sp, #4]
 8025b86:	f04f 0c00 	mov.w	ip, #0
 8025b8a:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8025b8e:	6900      	ldr	r0, [r0, #16]
 8025b90:	f8ad 100c 	strh.w	r1, [sp, #12]
 8025b94:	a901      	add	r1, sp, #4
 8025b96:	f88d c008 	strb.w	ip, [sp, #8]
 8025b9a:	f8ad 200a 	strh.w	r2, [sp, #10]
 8025b9e:	f8ad 300e 	strh.w	r3, [sp, #14]
 8025ba2:	6803      	ldr	r3, [r0, #0]
 8025ba4:	689b      	ldr	r3, [r3, #8]
 8025ba6:	4798      	blx	r3
 8025ba8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8025bac:	1cd3      	adds	r3, r2, #3
 8025bae:	b29b      	uxth	r3, r3
 8025bb0:	2b06      	cmp	r3, #6
 8025bb2:	d916      	bls.n	8025be2 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 8025bb4:	f8df c064 	ldr.w	ip, [pc, #100]	@ 8025c1c <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 8025bb8:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8025bbc:	f8cd c004 	str.w	ip, [sp, #4]
 8025bc0:	f04f 0c01 	mov.w	ip, #1
 8025bc4:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8025bc8:	6920      	ldr	r0, [r4, #16]
 8025bca:	f8ad 100c 	strh.w	r1, [sp, #12]
 8025bce:	a901      	add	r1, sp, #4
 8025bd0:	f88d c008 	strb.w	ip, [sp, #8]
 8025bd4:	f8ad 200a 	strh.w	r2, [sp, #10]
 8025bd8:	f8ad 300e 	strh.w	r3, [sp, #14]
 8025bdc:	6803      	ldr	r3, [r0, #0]
 8025bde:	689b      	ldr	r3, [r3, #8]
 8025be0:	4798      	blx	r3
 8025be2:	4b0d      	ldr	r3, [pc, #52]	@ (8025c18 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xbc>)
 8025be4:	a901      	add	r1, sp, #4
 8025be6:	6920      	ldr	r0, [r4, #16]
 8025be8:	9301      	str	r3, [sp, #4]
 8025bea:	2300      	movs	r3, #0
 8025bec:	f88d 5008 	strb.w	r5, [sp, #8]
 8025bf0:	f8ad 700a 	strh.w	r7, [sp, #10]
 8025bf4:	f8ad 600c 	strh.w	r6, [sp, #12]
 8025bf8:	f8ad 300e 	strh.w	r3, [sp, #14]
 8025bfc:	6803      	ldr	r3, [r0, #0]
 8025bfe:	681b      	ldr	r3, [r3, #0]
 8025c00:	4798      	blx	r3
 8025c02:	b005      	add	sp, #20
 8025c04:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8025c06:	2900      	cmp	r1, #0
 8025c08:	d1eb      	bne.n	8025be2 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 8025c0a:	80a2      	strh	r2, [r4, #4]
 8025c0c:	80c6      	strh	r6, [r0, #6]
 8025c0e:	60a1      	str	r1, [r4, #8]
 8025c10:	81a1      	strh	r1, [r4, #12]
 8025c12:	73a1      	strb	r1, [r4, #14]
 8025c14:	e7e5      	b.n	8025be2 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 8025c16:	bf00      	nop
 8025c18:	0802d22c 	.word	0x0802d22c
 8025c1c:	0802d254 	.word	0x0802d254

08025c20 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.1>:
 8025c20:	10c9      	asrs	r1, r1, #3
 8025c22:	2900      	cmp	r1, #0
 8025c24:	bfb8      	it	lt
 8025c26:	4249      	neglt	r1, r1
 8025c28:	2801      	cmp	r0, #1
 8025c2a:	d108      	bne.n	8025c3e <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.1+0x1e>
 8025c2c:	f3c1 0008 	ubfx	r0, r1, #0, #9
 8025c30:	f5b0 7f80 	cmp.w	r0, #256	@ 0x100
 8025c34:	4601      	mov	r1, r0
 8025c36:	dd02      	ble.n	8025c3e <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.1+0x1e>
 8025c38:	f5c0 7000 	rsb	r0, r0, #512	@ 0x200
 8025c3c:	4770      	bx	lr
 8025c3e:	29ff      	cmp	r1, #255	@ 0xff
 8025c40:	bfa8      	it	ge
 8025c42:	21ff      	movge	r1, #255	@ 0xff
 8025c44:	4608      	mov	r0, r1
 8025c46:	4770      	bx	lr

08025c48 <_ZN8touchgfx10Rasterizer6lineToEii>:
 8025c48:	b410      	push	{r4}
 8025c4a:	e9d0 3401 	ldrd	r3, r4, [r0, #4]
 8025c4e:	429c      	cmp	r4, r3
 8025c50:	d803      	bhi.n	8025c5a <_ZN8touchgfx10Rasterizer6lineToEii+0x12>
 8025c52:	f85d 4b04 	ldr.w	r4, [sp], #4
 8025c56:	f7f0 ba37 	b.w	80160c8 <_ZN8touchgfx7Outline6lineToEii>
 8025c5a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8025c5e:	4770      	bx	lr

08025c60 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh>:
 8025c60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025c64:	b08b      	sub	sp, #44	@ 0x2c
 8025c66:	4606      	mov	r6, r0
 8025c68:	468a      	mov	sl, r1
 8025c6a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8025c6e:	f89d 3050 	ldrb.w	r3, [sp, #80]	@ 0x50
 8025c72:	9308      	str	r3, [sp, #32]
 8025c74:	f89d 3054 	ldrb.w	r3, [sp, #84]	@ 0x54
 8025c78:	9309      	str	r3, [sp, #36]	@ 0x24
 8025c7a:	f7f0 fb90 	bl	801639e <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv>
 8025c7e:	68b5      	ldr	r5, [r6, #8]
 8025c80:	4604      	mov	r4, r0
 8025c82:	2d00      	cmp	r5, #0
 8025c84:	d044      	beq.n	8025d10 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xb0>
 8025c86:	6873      	ldr	r3, [r6, #4]
 8025c88:	42ab      	cmp	r3, r5
 8025c8a:	d33d      	bcc.n	8025d08 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xa8>
 8025c8c:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 8025c90:	f04f 0800 	mov.w	r8, #0
 8025c94:	f9b6 2034 	ldrsh.w	r2, [r6, #52]	@ 0x34
 8025c98:	eb02 0b03 	add.w	fp, r2, r3
 8025c9c:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 8025ca0:	fb02 1203 	mla	r2, r2, r3, r1
 8025ca4:	9205      	str	r2, [sp, #20]
 8025ca6:	1e6a      	subs	r2, r5, #1
 8025ca8:	9204      	str	r2, [sp, #16]
 8025caa:	f9b4 9002 	ldrsh.w	r9, [r4, #2]
 8025cae:	f9b4 7000 	ldrsh.w	r7, [r4]
 8025cb2:	454b      	cmp	r3, r9
 8025cb4:	463a      	mov	r2, r7
 8025cb6:	d008      	beq.n	8025cca <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x6a>
 8025cb8:	f9b6 3034 	ldrsh.w	r3, [r6, #52]	@ 0x34
 8025cbc:	eb03 0b09 	add.w	fp, r3, r9
 8025cc0:	e9dd 1306 	ldrd	r1, r3, [sp, #24]
 8025cc4:	fb03 1309 	mla	r3, r3, r9, r1
 8025cc8:	9305      	str	r3, [sp, #20]
 8025cca:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 8025cce:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 8025cd2:	4498      	add	r8, r3
 8025cd4:	9b04      	ldr	r3, [sp, #16]
 8025cd6:	3b01      	subs	r3, #1
 8025cd8:	9304      	str	r3, [sp, #16]
 8025cda:	9b04      	ldr	r3, [sp, #16]
 8025cdc:	3301      	adds	r3, #1
 8025cde:	d015      	beq.n	8025d0c <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xac>
 8025ce0:	f934 3f08 	ldrsh.w	r3, [r4, #8]!
 8025ce4:	42bb      	cmp	r3, r7
 8025ce6:	d117      	bne.n	8025d18 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xb8>
 8025ce8:	f9b4 0002 	ldrsh.w	r0, [r4, #2]
 8025cec:	9b04      	ldr	r3, [sp, #16]
 8025cee:	4548      	cmp	r0, r9
 8025cf0:	f103 33ff 	add.w	r3, r3, #4294967295
 8025cf4:	d17d      	bne.n	8025df2 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x192>
 8025cf6:	f9b4 0006 	ldrsh.w	r0, [r4, #6]
 8025cfa:	4401      	add	r1, r0
 8025cfc:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 8025d00:	4480      	add	r8, r0
 8025d02:	e7e9      	b.n	8025cd8 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x78>
 8025d04:	461f      	mov	r7, r3
 8025d06:	e042      	b.n	8025d8e <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x12e>
 8025d08:	2000      	movs	r0, #0
 8025d0a:	e002      	b.n	8025d12 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xb2>
 8025d0c:	2900      	cmp	r1, #0
 8025d0e:	d16d      	bne.n	8025dec <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x18c>
 8025d10:	2001      	movs	r0, #1
 8025d12:	b00b      	add	sp, #44	@ 0x2c
 8025d14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8025d18:	b379      	cbz	r1, 8025d7a <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x11a>
 8025d1a:	2f00      	cmp	r7, #0
 8025d1c:	db29      	blt.n	8025d72 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x112>
 8025d1e:	f9b6 3036 	ldrsh.w	r3, [r6, #54]	@ 0x36
 8025d22:	42bb      	cmp	r3, r7
 8025d24:	dd25      	ble.n	8025d72 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x112>
 8025d26:	ebc1 1188 	rsb	r1, r1, r8, lsl #6
 8025d2a:	f896 0030 	ldrb.w	r0, [r6, #48]	@ 0x30
 8025d2e:	f7ff ff77 	bl	8025c20 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.1>
 8025d32:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8025d34:	fb10 f003 	smulbb	r0, r0, r3
 8025d38:	b280      	uxth	r0, r0
 8025d3a:	1c41      	adds	r1, r0, #1
 8025d3c:	eb01 2110 	add.w	r1, r1, r0, lsr #8
 8025d40:	1209      	asrs	r1, r1, #8
 8025d42:	f011 0fff 	tst.w	r1, #255	@ 0xff
 8025d46:	d014      	beq.n	8025d72 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x112>
 8025d48:	b2c9      	uxtb	r1, r1
 8025d4a:	9808      	ldr	r0, [sp, #32]
 8025d4c:	b2ba      	uxth	r2, r7
 8025d4e:	8e73      	ldrh	r3, [r6, #50]	@ 0x32
 8025d50:	9102      	str	r1, [sp, #8]
 8025d52:	2101      	movs	r1, #1
 8025d54:	4413      	add	r3, r2
 8025d56:	4402      	add	r2, r0
 8025d58:	9101      	str	r1, [sp, #4]
 8025d5a:	fa0f f18b 	sxth.w	r1, fp
 8025d5e:	f8da 0000 	ldr.w	r0, [sl]
 8025d62:	b21b      	sxth	r3, r3
 8025d64:	9100      	str	r1, [sp, #0]
 8025d66:	b212      	sxth	r2, r2
 8025d68:	6941      	ldr	r1, [r0, #20]
 8025d6a:	4650      	mov	r0, sl
 8025d6c:	460d      	mov	r5, r1
 8025d6e:	9905      	ldr	r1, [sp, #20]
 8025d70:	47a8      	blx	r5
 8025d72:	9b04      	ldr	r3, [sp, #16]
 8025d74:	1c7a      	adds	r2, r7, #1
 8025d76:	3301      	adds	r3, #1
 8025d78:	d0ca      	beq.n	8025d10 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xb0>
 8025d7a:	f9b4 7000 	ldrsh.w	r7, [r4]
 8025d7e:	1abb      	subs	r3, r7, r2
 8025d80:	2b00      	cmp	r3, #0
 8025d82:	dd31      	ble.n	8025de8 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x188>
 8025d84:	2a00      	cmp	r2, #0
 8025d86:	dabd      	bge.n	8025d04 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xa4>
 8025d88:	2f00      	cmp	r7, #0
 8025d8a:	dd2d      	ble.n	8025de8 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x188>
 8025d8c:	2200      	movs	r2, #0
 8025d8e:	f9b6 3036 	ldrsh.w	r3, [r6, #54]	@ 0x36
 8025d92:	19d1      	adds	r1, r2, r7
 8025d94:	4299      	cmp	r1, r3
 8025d96:	db02      	blt.n	8025d9e <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x13e>
 8025d98:	1a9f      	subs	r7, r3, r2
 8025d9a:	2f00      	cmp	r7, #0
 8025d9c:	dd24      	ble.n	8025de8 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x188>
 8025d9e:	ea4f 1188 	mov.w	r1, r8, lsl #6
 8025da2:	f896 0030 	ldrb.w	r0, [r6, #48]	@ 0x30
 8025da6:	f7ff ff3b 	bl	8025c20 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.1>
 8025daa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8025dac:	fb10 f003 	smulbb	r0, r0, r3
 8025db0:	b280      	uxth	r0, r0
 8025db2:	1c41      	adds	r1, r0, #1
 8025db4:	eb01 2110 	add.w	r1, r1, r0, lsr #8
 8025db8:	1209      	asrs	r1, r1, #8
 8025dba:	f011 0fff 	tst.w	r1, #255	@ 0xff
 8025dbe:	d013      	beq.n	8025de8 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x188>
 8025dc0:	b292      	uxth	r2, r2
 8025dc2:	9808      	ldr	r0, [sp, #32]
 8025dc4:	b2c9      	uxtb	r1, r1
 8025dc6:	8e73      	ldrh	r3, [r6, #50]	@ 0x32
 8025dc8:	b23f      	sxth	r7, r7
 8025dca:	4413      	add	r3, r2
 8025dcc:	9102      	str	r1, [sp, #8]
 8025dce:	4402      	add	r2, r0
 8025dd0:	fa0f f18b 	sxth.w	r1, fp
 8025dd4:	f8da 0000 	ldr.w	r0, [sl]
 8025dd8:	b21b      	sxth	r3, r3
 8025dda:	9100      	str	r1, [sp, #0]
 8025ddc:	b212      	sxth	r2, r2
 8025dde:	9701      	str	r7, [sp, #4]
 8025de0:	9905      	ldr	r1, [sp, #20]
 8025de2:	6947      	ldr	r7, [r0, #20]
 8025de4:	4650      	mov	r0, sl
 8025de6:	47b8      	blx	r7
 8025de8:	464b      	mov	r3, r9
 8025dea:	e75e      	b.n	8025caa <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x4a>
 8025dec:	2f00      	cmp	r7, #0
 8025dee:	da96      	bge.n	8025d1e <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xbe>
 8025df0:	e78e      	b.n	8025d10 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xb0>
 8025df2:	2900      	cmp	r1, #0
 8025df4:	d0f8      	beq.n	8025de8 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x188>
 8025df6:	e790      	b.n	8025d1a <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xba>

08025df8 <_ZN8touchgfx6CanvasC1EPKNS_15AbstractPainterERKNS_4RectES6_h>:
 8025df8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8025dfc:	461e      	mov	r6, r3
 8025dfe:	4b36      	ldr	r3, [pc, #216]	@ (8025ed8 <_ZN8touchgfx6CanvasC1EPKNS_15AbstractPainterERKNS_4RectES6_h+0xe0>)
 8025e00:	2500      	movs	r5, #0
 8025e02:	f100 0814 	add.w	r8, r0, #20
 8025e06:	4604      	mov	r4, r0
 8025e08:	4617      	mov	r7, r2
 8025e0a:	e9c0 3100 	strd	r3, r1, [r0]
 8025e0e:	f9b2 3004 	ldrsh.w	r3, [r2, #4]
 8025e12:	8185      	strh	r5, [r0, #12]
 8025e14:	8103      	strh	r3, [r0, #8]
 8025e16:	f89d 3020 	ldrb.w	r3, [sp, #32]
 8025e1a:	81c5      	strh	r5, [r0, #14]
 8025e1c:	7283      	strb	r3, [r0, #10]
 8025e1e:	8205      	strh	r5, [r0, #16]
 8025e20:	8245      	strh	r5, [r0, #18]
 8025e22:	4640      	mov	r0, r8
 8025e24:	f7ef fc96 	bl	8015754 <_ZN8touchgfx7OutlineC1Ev>
 8025e28:	f884 5044 	strb.w	r5, [r4, #68]	@ 0x44
 8025e2c:	f8a4 5046 	strh.w	r5, [r4, #70]	@ 0x46
 8025e30:	466b      	mov	r3, sp
 8025e32:	f8a4 5048 	strh.w	r5, [r4, #72]	@ 0x48
 8025e36:	f8a4 504a 	strh.w	r5, [r4, #74]	@ 0x4a
 8025e3a:	f884 505c 	strb.w	r5, [r4, #92]	@ 0x5c
 8025e3e:	f884 505d 	strb.w	r5, [r4, #93]	@ 0x5d
 8025e42:	f8a4 5068 	strh.w	r5, [r4, #104]	@ 0x68
 8025e46:	e9c4 5513 	strd	r5, r5, [r4, #76]	@ 0x4c
 8025e4a:	e9c4 5515 	strd	r5, r5, [r4, #84]	@ 0x54
 8025e4e:	e9c4 5518 	strd	r5, r5, [r4, #96]	@ 0x60
 8025e52:	e9c4 551b 	strd	r5, r5, [r4, #108]	@ 0x6c
 8025e56:	6830      	ldr	r0, [r6, #0]
 8025e58:	6871      	ldr	r1, [r6, #4]
 8025e5a:	8872      	ldrh	r2, [r6, #2]
 8025e5c:	8835      	ldrh	r5, [r6, #0]
 8025e5e:	c303      	stmia	r3!, {r0, r1}
 8025e60:	887b      	ldrh	r3, [r7, #2]
 8025e62:	f9b6 0004 	ldrsh.w	r0, [r6, #4]
 8025e66:	4413      	add	r3, r2
 8025e68:	883a      	ldrh	r2, [r7, #0]
 8025e6a:	f9b6 1006 	ldrsh.w	r1, [r6, #6]
 8025e6e:	442a      	add	r2, r5
 8025e70:	81e3      	strh	r3, [r4, #14]
 8025e72:	8220      	strh	r0, [r4, #16]
 8025e74:	4668      	mov	r0, sp
 8025e76:	81a2      	strh	r2, [r4, #12]
 8025e78:	8261      	strh	r1, [r4, #18]
 8025e7a:	4639      	mov	r1, r7
 8025e7c:	f7f1 fe72 	bl	8017b64 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8025e80:	f104 000c 	add.w	r0, r4, #12
 8025e84:	f7f1 fe2a 	bl	8017adc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8025e88:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
 8025e8c:	f8bd 2000 	ldrh.w	r2, [sp]
 8025e90:	4640      	mov	r0, r8
 8025e92:	f8a4 3048 	strh.w	r3, [r4, #72]	@ 0x48
 8025e96:	f8a4 2046 	strh.w	r2, [r4, #70]	@ 0x46
 8025e9a:	f7ef fc3f 	bl	801571c <_ZN8touchgfx7Outline5resetEv>
 8025e9e:	f9bd 3000 	ldrsh.w	r3, [sp]
 8025ea2:	f9b4 2012 	ldrsh.w	r2, [r4, #18]
 8025ea6:	4620      	mov	r0, r4
 8025ea8:	015b      	lsls	r3, r3, #5
 8025eaa:	64e3      	str	r3, [r4, #76]	@ 0x4c
 8025eac:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
 8025eb0:	015b      	lsls	r3, r3, #5
 8025eb2:	6523      	str	r3, [r4, #80]	@ 0x50
 8025eb4:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 8025eb8:	015b      	lsls	r3, r3, #5
 8025eba:	6563      	str	r3, [r4, #84]	@ 0x54
 8025ebc:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
 8025ec0:	015b      	lsls	r3, r3, #5
 8025ec2:	65a3      	str	r3, [r4, #88]	@ 0x58
 8025ec4:	f9b4 3010 	ldrsh.w	r3, [r4, #16]
 8025ec8:	f8a4 304a 	strh.w	r3, [r4, #74]	@ 0x4a
 8025ecc:	e9c4 320f 	strd	r3, r2, [r4, #60]	@ 0x3c
 8025ed0:	b002      	add	sp, #8
 8025ed2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8025ed6:	bf00      	nop
 8025ed8:	0802d4e4 	.word	0x0802d4e4

08025edc <_ZN8touchgfx6Canvas5closeEv>:
 8025edc:	b538      	push	{r3, r4, r5, lr}
 8025ede:	f890 305c 	ldrb.w	r3, [r0, #92]	@ 0x5c
 8025ee2:	4604      	mov	r4, r0
 8025ee4:	b193      	cbz	r3, 8025f0c <_ZN8touchgfx6Canvas5closeEv+0x30>
 8025ee6:	f890 3068 	ldrb.w	r3, [r0, #104]	@ 0x68
 8025eea:	f890 2069 	ldrb.w	r2, [r0, #105]	@ 0x69
 8025eee:	4213      	tst	r3, r2
 8025ef0:	d10c      	bne.n	8025f0c <_ZN8touchgfx6Canvas5closeEv+0x30>
 8025ef2:	f100 0514 	add.w	r5, r0, #20
 8025ef6:	b123      	cbz	r3, 8025f02 <_ZN8touchgfx6Canvas5closeEv+0x26>
 8025ef8:	e9d0 1218 	ldrd	r1, r2, [r0, #96]	@ 0x60
 8025efc:	4628      	mov	r0, r5
 8025efe:	f7ff fea3 	bl	8025c48 <_ZN8touchgfx10Rasterizer6lineToEii>
 8025f02:	4628      	mov	r0, r5
 8025f04:	e9d4 121b 	ldrd	r1, r2, [r4, #108]	@ 0x6c
 8025f08:	f7ff fe9e 	bl	8025c48 <_ZN8touchgfx10Rasterizer6lineToEii>
 8025f0c:	2300      	movs	r3, #0
 8025f0e:	f884 305c 	strb.w	r3, [r4, #92]	@ 0x5c
 8025f12:	e9d4 0306 	ldrd	r0, r3, [r4, #24]
 8025f16:	4298      	cmp	r0, r3
 8025f18:	bf34      	ite	cc
 8025f1a:	2000      	movcc	r0, #0
 8025f1c:	2001      	movcs	r0, #1
 8025f1e:	bd38      	pop	{r3, r4, r5, pc}

08025f20 <_ZN8touchgfx6Canvas6renderEh>:
 8025f20:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8025f24:	7a85      	ldrb	r5, [r0, #10]
 8025f26:	4604      	mov	r4, r0
 8025f28:	4369      	muls	r1, r5
 8025f2a:	1c4d      	adds	r5, r1, #1
 8025f2c:	eb05 2511 	add.w	r5, r5, r1, lsr #8
 8025f30:	122d      	asrs	r5, r5, #8
 8025f32:	f000 8098 	beq.w	8026066 <_ZN8touchgfx6Canvas6renderEh+0x146>
 8025f36:	f890 305d 	ldrb.w	r3, [r0, #93]	@ 0x5d
 8025f3a:	2b00      	cmp	r3, #0
 8025f3c:	f000 8093 	beq.w	8026066 <_ZN8touchgfx6Canvas6renderEh+0x146>
 8025f40:	f7ff ffcc 	bl	8025edc <_ZN8touchgfx6Canvas5closeEv>
 8025f44:	4607      	mov	r7, r0
 8025f46:	2800      	cmp	r0, #0
 8025f48:	d045      	beq.n	8025fd6 <_ZN8touchgfx6Canvas6renderEh+0xb6>
 8025f4a:	6860      	ldr	r0, [r4, #4]
 8025f4c:	4e47      	ldr	r6, [pc, #284]	@ (802606c <_ZN8touchgfx6Canvas6renderEh+0x14c>)
 8025f4e:	6803      	ldr	r3, [r0, #0]
 8025f50:	6837      	ldr	r7, [r6, #0]
 8025f52:	689b      	ldr	r3, [r3, #8]
 8025f54:	4798      	blx	r3
 8025f56:	4601      	mov	r1, r0
 8025f58:	4638      	mov	r0, r7
 8025f5a:	f7eb fe5f 	bl	8011c1c <_ZN8touchgfx3HAL33lockFrameBufferForRenderingMethodENS0_15RenderingMethodE>
 8025f5e:	4607      	mov	r7, r0
 8025f60:	f7dd ff8e 	bl	8003e80 <_ZN8touchgfx3HAL3lcdEv>
 8025f64:	6803      	ldr	r3, [r0, #0]
 8025f66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8025f68:	4798      	blx	r3
 8025f6a:	4680      	mov	r8, r0
 8025f6c:	f7dd ff88 	bl	8003e80 <_ZN8touchgfx3HAL3lcdEv>
 8025f70:	6803      	ldr	r3, [r0, #0]
 8025f72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8025f74:	4798      	blx	r3
 8025f76:	280b      	cmp	r0, #11
 8025f78:	d85a      	bhi.n	8026030 <_ZN8touchgfx6Canvas6renderEh+0x110>
 8025f7a:	e8df f000 	tbb	[pc, r0]
 8025f7e:	5b50      	.short	0x5b50
 8025f80:	3059066b 	.word	0x3059066b
 8025f84:	64646440 	.word	0x64646440
 8025f88:	6464      	.short	0x6464
 8025f8a:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
 8025f8e:	2208      	movs	r2, #8
 8025f90:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 8025f94:	fb91 f2f2 	sdiv	r2, r1, r2
 8025f98:	fb08 2303 	mla	r3, r8, r3, r2
 8025f9c:	441f      	add	r7, r3
 8025f9e:	424b      	negs	r3, r1
 8025fa0:	f001 0107 	and.w	r1, r1, #7
 8025fa4:	f003 0307 	and.w	r3, r3, #7
 8025fa8:	bf58      	it	pl
 8025faa:	4259      	negpl	r1, r3
 8025fac:	b2c9      	uxtb	r1, r1
 8025fae:	b2ed      	uxtb	r5, r5
 8025fb0:	463a      	mov	r2, r7
 8025fb2:	fa0f f388 	sxth.w	r3, r8
 8025fb6:	f104 0014 	add.w	r0, r4, #20
 8025fba:	e9cd 1500 	strd	r1, r5, [sp]
 8025fbe:	6861      	ldr	r1, [r4, #4]
 8025fc0:	f7ff fe4e 	bl	8025c60 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh>
 8025fc4:	4607      	mov	r7, r0
 8025fc6:	6860      	ldr	r0, [r4, #4]
 8025fc8:	6803      	ldr	r3, [r0, #0]
 8025fca:	691b      	ldr	r3, [r3, #16]
 8025fcc:	4798      	blx	r3
 8025fce:	6830      	ldr	r0, [r6, #0]
 8025fd0:	6803      	ldr	r3, [r0, #0]
 8025fd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8025fd4:	4798      	blx	r3
 8025fd6:	4638      	mov	r0, r7
 8025fd8:	b002      	add	sp, #8
 8025fda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8025fde:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
 8025fe2:	2204      	movs	r2, #4
 8025fe4:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 8025fe8:	fb91 f2f2 	sdiv	r2, r1, r2
 8025fec:	fb08 2303 	mla	r3, r8, r3, r2
 8025ff0:	441f      	add	r7, r3
 8025ff2:	424b      	negs	r3, r1
 8025ff4:	f001 0103 	and.w	r1, r1, #3
 8025ff8:	f003 0303 	and.w	r3, r3, #3
 8025ffc:	e7d4      	b.n	8025fa8 <_ZN8touchgfx6Canvas6renderEh+0x88>
 8025ffe:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
 8026002:	2202      	movs	r2, #2
 8026004:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 8026008:	2900      	cmp	r1, #0
 802600a:	fb91 f2f2 	sdiv	r2, r1, r2
 802600e:	f001 0101 	and.w	r1, r1, #1
 8026012:	fb08 2303 	mla	r3, r8, r3, r2
 8026016:	bfb8      	it	lt
 8026018:	4249      	neglt	r1, r1
 802601a:	441f      	add	r7, r3
 802601c:	e7c6      	b.n	8025fac <_ZN8touchgfx6Canvas6renderEh+0x8c>
 802601e:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 8026022:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8026026:	fb08 f303 	mul.w	r3, r8, r3
 802602a:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 802602e:	441f      	add	r7, r3
 8026030:	2100      	movs	r1, #0
 8026032:	e7bc      	b.n	8025fae <_ZN8touchgfx6Canvas6renderEh+0x8e>
 8026034:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 8026038:	2103      	movs	r1, #3
 802603a:	fb08 f203 	mul.w	r2, r8, r3
 802603e:	89a3      	ldrh	r3, [r4, #12]
 8026040:	fb13 2301 	smlabb	r3, r3, r1, r2
 8026044:	e7f3      	b.n	802602e <_ZN8touchgfx6Canvas6renderEh+0x10e>
 8026046:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 802604a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 802604e:	fb08 2303 	mla	r3, r8, r3, r2
 8026052:	e7ec      	b.n	802602e <_ZN8touchgfx6Canvas6renderEh+0x10e>
 8026054:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 8026058:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 802605c:	fb08 f303 	mul.w	r3, r8, r3
 8026060:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8026064:	e7e3      	b.n	802602e <_ZN8touchgfx6Canvas6renderEh+0x10e>
 8026066:	2701      	movs	r7, #1
 8026068:	e7b5      	b.n	8025fd6 <_ZN8touchgfx6Canvas6renderEh+0xb6>
 802606a:	bf00      	nop
 802606c:	24028e20 	.word	0x24028e20

08026070 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>:
 8026070:	4b06      	ldr	r3, [pc, #24]	@ (802608c <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_+0x1c>)
 8026072:	b510      	push	{r4, lr}
 8026074:	781b      	ldrb	r3, [r3, #0]
 8026076:	2b01      	cmp	r3, #1
 8026078:	d107      	bne.n	802608a <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_+0x1a>
 802607a:	f9b0 0008 	ldrsh.w	r0, [r0, #8]
 802607e:	680b      	ldr	r3, [r1, #0]
 8026080:	6814      	ldr	r4, [r2, #0]
 8026082:	ebc3 1340 	rsb	r3, r3, r0, lsl #5
 8026086:	6013      	str	r3, [r2, #0]
 8026088:	600c      	str	r4, [r1, #0]
 802608a:	bd10      	pop	{r4, pc}
 802608c:	24028e18 	.word	0x24028e18

08026090 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_>:
 8026090:	b513      	push	{r0, r1, r4, lr}
 8026092:	f890 305c 	ldrb.w	r3, [r0, #92]	@ 0x5c
 8026096:	4604      	mov	r4, r0
 8026098:	e9cd 2100 	strd	r2, r1, [sp]
 802609c:	b9a3      	cbnz	r3, 80260c8 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x38>
 802609e:	466a      	mov	r2, sp
 80260a0:	a901      	add	r1, sp, #4
 80260a2:	4620      	mov	r0, r4
 80260a4:	f7ff ffe4 	bl	8026070 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>
 80260a8:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 80260aa:	9901      	ldr	r1, [sp, #4]
 80260ac:	9a00      	ldr	r2, [sp, #0]
 80260ae:	1ac9      	subs	r1, r1, r3
 80260b0:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 80260b2:	1ad2      	subs	r2, r2, r3
 80260b4:	9101      	str	r1, [sp, #4]
 80260b6:	2a00      	cmp	r2, #0
 80260b8:	9200      	str	r2, [sp, #0]
 80260ba:	da0b      	bge.n	80260d4 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x44>
 80260bc:	2301      	movs	r3, #1
 80260be:	2900      	cmp	r1, #0
 80260c0:	da0e      	bge.n	80260e0 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x50>
 80260c2:	f043 0304 	orr.w	r3, r3, #4
 80260c6:	e013      	b.n	80260f0 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x60>
 80260c8:	f7ff ff08 	bl	8025edc <_ZN8touchgfx6Canvas5closeEv>
 80260cc:	2800      	cmp	r0, #0
 80260ce:	d1e6      	bne.n	802609e <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0xe>
 80260d0:	b002      	add	sp, #8
 80260d2:	bd10      	pop	{r4, pc}
 80260d4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80260d6:	429a      	cmp	r2, r3
 80260d8:	bfac      	ite	ge
 80260da:	2302      	movge	r3, #2
 80260dc:	2300      	movlt	r3, #0
 80260de:	e7ee      	b.n	80260be <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x2e>
 80260e0:	6d60      	ldr	r0, [r4, #84]	@ 0x54
 80260e2:	4281      	cmp	r1, r0
 80260e4:	bfac      	ite	ge
 80260e6:	2008      	movge	r0, #8
 80260e8:	2000      	movlt	r0, #0
 80260ea:	4318      	orrs	r0, r3
 80260ec:	b2c3      	uxtb	r3, r0
 80260ee:	b158      	cbz	r0, 8026108 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x78>
 80260f0:	2200      	movs	r2, #0
 80260f2:	f884 205c 	strb.w	r2, [r4, #92]	@ 0x5c
 80260f6:	9901      	ldr	r1, [sp, #4]
 80260f8:	9a00      	ldr	r2, [sp, #0]
 80260fa:	66e1      	str	r1, [r4, #108]	@ 0x6c
 80260fc:	6722      	str	r2, [r4, #112]	@ 0x70
 80260fe:	f884 3068 	strb.w	r3, [r4, #104]	@ 0x68
 8026102:	e9c4 1218 	strd	r1, r2, [r4, #96]	@ 0x60
 8026106:	e7e3      	b.n	80260d0 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x40>
 8026108:	f884 0069 	strb.w	r0, [r4, #105]	@ 0x69
 802610c:	e9d4 3006 	ldrd	r3, r0, [r4, #24]
 8026110:	4298      	cmp	r0, r3
 8026112:	d803      	bhi.n	802611c <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x8c>
 8026114:	f104 0014 	add.w	r0, r4, #20
 8026118:	f7ef fff0 	bl	80160fc <_ZN8touchgfx7Outline6moveToEii>
 802611c:	2301      	movs	r3, #1
 802611e:	f884 305c 	strb.w	r3, [r4, #92]	@ 0x5c
 8026122:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
 8026126:	2300      	movs	r3, #0
 8026128:	e7e5      	b.n	80260f6 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x66>

0802612a <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>:
 802612a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 802612c:	ab02      	add	r3, sp, #8
 802612e:	4604      	mov	r4, r0
 8026130:	9101      	str	r1, [sp, #4]
 8026132:	a901      	add	r1, sp, #4
 8026134:	f843 2d08 	str.w	r2, [r3, #-8]!
 8026138:	461a      	mov	r2, r3
 802613a:	f7ff ff99 	bl	8026070 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>
 802613e:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8026140:	9901      	ldr	r1, [sp, #4]
 8026142:	9a00      	ldr	r2, [sp, #0]
 8026144:	1ac9      	subs	r1, r1, r3
 8026146:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8026148:	1ad2      	subs	r2, r2, r3
 802614a:	9101      	str	r1, [sp, #4]
 802614c:	2a00      	cmp	r2, #0
 802614e:	9200      	str	r2, [sp, #0]
 8026150:	db1c      	blt.n	802618c <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x62>
 8026152:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8026154:	429a      	cmp	r2, r3
 8026156:	bfac      	ite	ge
 8026158:	2002      	movge	r0, #2
 802615a:	2000      	movlt	r0, #0
 802615c:	2900      	cmp	r1, #0
 802615e:	db17      	blt.n	8026190 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x66>
 8026160:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8026162:	4299      	cmp	r1, r3
 8026164:	bfac      	ite	ge
 8026166:	2308      	movge	r3, #8
 8026168:	2300      	movlt	r3, #0
 802616a:	4303      	orrs	r3, r0
 802616c:	f894 0068 	ldrb.w	r0, [r4, #104]	@ 0x68
 8026170:	b2dd      	uxtb	r5, r3
 8026172:	b978      	cbnz	r0, 8026194 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x6a>
 8026174:	f104 0014 	add.w	r0, r4, #20
 8026178:	f7ff fd66 	bl	8025c48 <_ZN8touchgfx10Rasterizer6lineToEii>
 802617c:	9b01      	ldr	r3, [sp, #4]
 802617e:	f884 5068 	strb.w	r5, [r4, #104]	@ 0x68
 8026182:	6623      	str	r3, [r4, #96]	@ 0x60
 8026184:	9b00      	ldr	r3, [sp, #0]
 8026186:	6663      	str	r3, [r4, #100]	@ 0x64
 8026188:	b002      	add	sp, #8
 802618a:	bd70      	pop	{r4, r5, r6, pc}
 802618c:	2001      	movs	r0, #1
 802618e:	e7e5      	b.n	802615c <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x32>
 8026190:	2304      	movs	r3, #4
 8026192:	e7ea      	b.n	802616a <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x40>
 8026194:	b113      	cbz	r3, 802619c <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x72>
 8026196:	ea10 0305 	ands.w	r3, r0, r5
 802619a:	d11c      	bne.n	80261d6 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0xac>
 802619c:	f894 305c 	ldrb.w	r3, [r4, #92]	@ 0x5c
 80261a0:	f104 0614 	add.w	r6, r4, #20
 80261a4:	e9d4 1218 	ldrd	r1, r2, [r4, #96]	@ 0x60
 80261a8:	b98b      	cbnz	r3, 80261ce <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0xa4>
 80261aa:	f884 0069 	strb.w	r0, [r4, #105]	@ 0x69
 80261ae:	e9d4 3006 	ldrd	r3, r0, [r4, #24]
 80261b2:	4298      	cmp	r0, r3
 80261b4:	d802      	bhi.n	80261bc <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x92>
 80261b6:	4630      	mov	r0, r6
 80261b8:	f7ef ffa0 	bl	80160fc <_ZN8touchgfx7Outline6moveToEii>
 80261bc:	2301      	movs	r3, #1
 80261be:	f884 305c 	strb.w	r3, [r4, #92]	@ 0x5c
 80261c2:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
 80261c6:	4630      	mov	r0, r6
 80261c8:	e9dd 2100 	ldrd	r2, r1, [sp]
 80261cc:	e7d4      	b.n	8026178 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x4e>
 80261ce:	4630      	mov	r0, r6
 80261d0:	f7ff fd3a 	bl	8025c48 <_ZN8touchgfx10Rasterizer6lineToEii>
 80261d4:	e7f7      	b.n	80261c6 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x9c>
 80261d6:	461d      	mov	r5, r3
 80261d8:	e7d0      	b.n	802617c <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x52>
	...

080261dc <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj>:
 80261dc:	b538      	push	{r3, r4, r5, lr}
 80261de:	ed2d 8b10 	vpush	{d8-d15}
 80261e2:	eef6 ba00 	vmov.f32	s23, #96	@ 0x3f000000  0.5
 80261e6:	4605      	mov	r5, r0
 80261e8:	eeb0 ca40 	vmov.f32	s24, s0
 80261ec:	460c      	mov	r4, r1
 80261ee:	eef0 ca60 	vmov.f32	s25, s1
 80261f2:	ed9f ba57 	vldr	s22, [pc, #348]	@ 8026350 <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj+0x174>
 80261f6:	eeb0 da41 	vmov.f32	s26, s2
 80261fa:	eef0 da61 	vmov.f32	s27, s3
 80261fe:	eeb0 ea42 	vmov.f32	s28, s4
 8026202:	eef0 ea62 	vmov.f32	s29, s5
 8026206:	eef0 aa6b 	vmov.f32	s21, s23
 802620a:	2c08      	cmp	r4, #8
 802620c:	d86e      	bhi.n	80262ec <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj+0x110>
 802620e:	ee7e 6a4c 	vsub.f32	s13, s28, s24
 8026212:	ee7d 7aee 	vsub.f32	s15, s27, s29
 8026216:	ee3d 6a4e 	vsub.f32	s12, s26, s28
 802621a:	ee3e 7aec 	vsub.f32	s14, s29, s25
 802621e:	ee66 7ae7 	vnmul.f32	s15, s13, s15
 8026222:	ee3c fa0d 	vadd.f32	s30, s24, s26
 8026226:	ee7c faad 	vadd.f32	s31, s25, s27
 802622a:	eee6 7a07 	vfma.f32	s15, s12, s14
 802622e:	ee7d 9a0e 	vadd.f32	s19, s26, s28
 8026232:	ee3d aaae 	vadd.f32	s20, s27, s29
 8026236:	ee2f fa2b 	vmul.f32	s30, s30, s23
 802623a:	ee6f faab 	vmul.f32	s31, s31, s23
 802623e:	ee69 9aab 	vmul.f32	s19, s19, s23
 8026242:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8026246:	ee2a aa2b 	vmul.f32	s20, s20, s23
 802624a:	ee7f 8a29 	vadd.f32	s17, s30, s19
 802624e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8026252:	ee3f 9a8a 	vadd.f32	s18, s31, s20
 8026256:	ee68 8aab 	vmul.f32	s17, s17, s23
 802625a:	bf48      	it	mi
 802625c:	eef1 7a67 	vnegmi.f32	s15, s15
 8026260:	ee29 9a2b 	vmul.f32	s18, s18, s23
 8026264:	eeb5 6a00 	vmov.f32	s12, #80	@ 0x3e800000  0.250
 8026268:	eef4 7acb 	vcmpe.f32	s15, s22
 802626c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8026270:	dd3f      	ble.n	80262f2 <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj+0x116>
 8026272:	ee27 7a07 	vmul.f32	s14, s14, s14
 8026276:	ee67 7aa7 	vmul.f32	s15, s15, s15
 802627a:	eea6 7aa6 	vfma.f32	s14, s13, s13
 802627e:	ee27 7a06 	vmul.f32	s14, s14, s12
 8026282:	eef4 7ac7 	vcmpe.f32	s15, s14
 8026286:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802628a:	d847      	bhi.n	802631c <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj+0x140>
 802628c:	ee7e 0a4d 	vsub.f32	s1, s28, s26
 8026290:	ee3e 0aed 	vsub.f32	s0, s29, s27
 8026294:	f001 f923 	bl	80274de <atan2f>
 8026298:	eeb0 8a40 	vmov.f32	s16, s0
 802629c:	ee7d 0a4c 	vsub.f32	s1, s26, s24
 80262a0:	ee3d 0aec 	vsub.f32	s0, s27, s25
 80262a4:	f001 f91b 	bl	80274de <atan2f>
 80262a8:	ee38 0a40 	vsub.f32	s0, s16, s0
 80262ac:	eddf 7a29 	vldr	s15, [pc, #164]	@ 8026354 <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj+0x178>
 80262b0:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80262b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80262b8:	bf48      	it	mi
 80262ba:	eeb1 0a40 	vnegmi.f32	s0, s0
 80262be:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80262c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80262c6:	bfa4      	itt	ge
 80262c8:	eddf 7a23 	vldrge	s15, [pc, #140]	@ 8026358 <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj+0x17c>
 80262cc:	ee37 0ac0 	vsubge.f32	s0, s15, s0
 80262d0:	eddf 7a22 	vldr	s15, [pc, #136]	@ 802635c <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj+0x180>
 80262d4:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80262d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80262dc:	d51e      	bpl.n	802631c <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj+0x140>
 80262de:	eef0 0a49 	vmov.f32	s1, s18
 80262e2:	4628      	mov	r0, r5
 80262e4:	eeb0 0a68 	vmov.f32	s0, s17
 80262e8:	f7ec fb18 	bl	801291c <_ZN8touchgfx6Canvas6lineToIfEEvT_S2_>
 80262ec:	ecbd 8b10 	vpop	{d8-d15}
 80262f0:	bd38      	pop	{r3, r4, r5, pc}
 80262f2:	ee7c 7a0e 	vadd.f32	s15, s24, s28
 80262f6:	eeb0 7a68 	vmov.f32	s14, s17
 80262fa:	eef0 6a49 	vmov.f32	s13, s18
 80262fe:	eea7 7aea 	vfms.f32	s14, s15, s21
 8026302:	ee7c 7aae 	vadd.f32	s15, s25, s29
 8026306:	eee7 6aea 	vfms.f32	s13, s15, s21
 802630a:	ee66 7aa6 	vmul.f32	s15, s13, s13
 802630e:	eee7 7a07 	vfma.f32	s15, s14, s14
 8026312:	eef4 7ac6 	vcmpe.f32	s15, s12
 8026316:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802631a:	d9e0      	bls.n	80262de <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj+0x102>
 802631c:	3401      	adds	r4, #1
 802631e:	eef0 0a6c 	vmov.f32	s1, s25
 8026322:	eeb0 0a4c 	vmov.f32	s0, s24
 8026326:	4628      	mov	r0, r5
 8026328:	4621      	mov	r1, r4
 802632a:	eef0 2a49 	vmov.f32	s5, s18
 802632e:	eeb0 2a68 	vmov.f32	s4, s17
 8026332:	eef0 1a6f 	vmov.f32	s3, s31
 8026336:	eeb0 1a4f 	vmov.f32	s2, s30
 802633a:	f7ff ff4f 	bl	80261dc <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj>
 802633e:	eef0 da4a 	vmov.f32	s27, s20
 8026342:	eeb0 da69 	vmov.f32	s26, s19
 8026346:	eef0 ca49 	vmov.f32	s25, s18
 802634a:	eeb0 ca68 	vmov.f32	s24, s17
 802634e:	e75c      	b.n	802620a <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj+0x2e>
 8026350:	2edbe6ff 	.word	0x2edbe6ff
 8026354:	40490fdb 	.word	0x40490fdb
 8026358:	40c90fdb 	.word	0x40c90fdb
 802635c:	3dcccccd 	.word	0x3dcccccd

08026360 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj>:
 8026360:	b530      	push	{r4, r5, lr}
 8026362:	ed2d 8b10 	vpush	{d8-d15}
 8026366:	eef0 8a40 	vmov.f32	s17, s0
 802636a:	b085      	sub	sp, #20
 802636c:	eef0 9a60 	vmov.f32	s19, s1
 8026370:	4604      	mov	r4, r0
 8026372:	eef0 fa41 	vmov.f32	s31, s2
 8026376:	460d      	mov	r5, r1
 8026378:	eeb0 fa61 	vmov.f32	s30, s3
 802637c:	eef0 ba42 	vmov.f32	s23, s4
 8026380:	eeb0 ca62 	vmov.f32	s24, s5
 8026384:	eef0 aa43 	vmov.f32	s21, s6
 8026388:	eeb0 ba63 	vmov.f32	s22, s7
 802638c:	2d08      	cmp	r5, #8
 802638e:	f200 8113 	bhi.w	80265b8 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x258>
 8026392:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8026396:	ee3b 6aaa 	vadd.f32	s12, s23, s21
 802639a:	ee7f 6aab 	vadd.f32	s13, s31, s23
 802639e:	ee38 daaf 	vadd.f32	s26, s17, s31
 80263a2:	ee26 6a27 	vmul.f32	s12, s12, s15
 80263a6:	ee7c ca0b 	vadd.f32	s25, s24, s22
 80263aa:	ee2d da27 	vmul.f32	s26, s26, s15
 80263ae:	ed8d 6a01 	vstr	s12, [sp, #4]
 80263b2:	eea6 6aa7 	vfma.f32	s12, s13, s15
 80263b6:	ee6c caa7 	vmul.f32	s25, s25, s15
 80263ba:	eeb0 ea4d 	vmov.f32	s28, s26
 80263be:	ee79 da8f 	vadd.f32	s27, s19, s30
 80263c2:	ee3f 7a0c 	vadd.f32	s14, s30, s24
 80263c6:	eea6 eaa7 	vfma.f32	s28, s13, s15
 80263ca:	ee66 6a27 	vmul.f32	s13, s12, s15
 80263ce:	ee6d daa7 	vmul.f32	s27, s27, s15
 80263d2:	edcd 6a03 	vstr	s13, [sp, #12]
 80263d6:	eef0 6a6c 	vmov.f32	s13, s25
 80263da:	eef0 ea6d 	vmov.f32	s29, s27
 80263de:	ee2e ea27 	vmul.f32	s28, s28, s15
 80263e2:	eee7 6a27 	vfma.f32	s13, s14, s15
 80263e6:	eee7 ea27 	vfma.f32	s29, s14, s15
 80263ea:	ee26 7aa7 	vmul.f32	s14, s13, s15
 80263ee:	ee6e eaa7 	vmul.f32	s29, s29, s15
 80263f2:	eef0 6a67 	vmov.f32	s13, s15
 80263f6:	ed8d 7a02 	vstr	s14, [sp, #8]
 80263fa:	ed9d 7a03 	vldr	s14, [sp, #12]
 80263fe:	ee3e 9a07 	vadd.f32	s18, s28, s14
 8026402:	ed9d 7a02 	vldr	s14, [sp, #8]
 8026406:	ee3e aa87 	vadd.f32	s20, s29, s14
 802640a:	ee29 9a27 	vmul.f32	s18, s18, s15
 802640e:	ee2a aa27 	vmul.f32	s20, s20, s15
 8026412:	2d00      	cmp	r5, #0
 8026414:	f000 810b 	beq.w	802662e <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x2ce>
 8026418:	ee7a 5ae8 	vsub.f32	s11, s21, s17
 802641c:	eddf 4a95 	vldr	s9, [pc, #596]	@ 8026674 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x314>
 8026420:	ee3f 7a4b 	vsub.f32	s14, s30, s22
 8026424:	ee7b 7a69 	vsub.f32	s15, s22, s19
 8026428:	ee3f 6aea 	vsub.f32	s12, s31, s21
 802642c:	ee25 7ac7 	vnmul.f32	s14, s11, s14
 8026430:	ee3b 5aea 	vsub.f32	s10, s23, s21
 8026434:	eea6 7a27 	vfma.f32	s14, s12, s15
 8026438:	ee3c 6a4b 	vsub.f32	s12, s24, s22
 802643c:	ee25 6ac6 	vnmul.f32	s12, s11, s12
 8026440:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8026444:	eea5 6a27 	vfma.f32	s12, s10, s15
 8026448:	eeb5 5a00 	vmov.f32	s10, #80	@ 0x3e800000  0.250
 802644c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8026450:	bf48      	it	mi
 8026452:	eeb1 7a47 	vnegmi.f32	s14, s14
 8026456:	eeb5 6ac0 	vcmpe.f32	s12, #0.0
 802645a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802645e:	eeb4 7ae4 	vcmpe.f32	s14, s9
 8026462:	bf48      	it	mi
 8026464:	eeb1 6a46 	vnegmi.f32	s12, s12
 8026468:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802646c:	f340 80a8 	ble.w	80265c0 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x260>
 8026470:	eeb4 6ae4 	vcmpe.f32	s12, s9
 8026474:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8026478:	dd5a      	ble.n	8026530 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x1d0>
 802647a:	ee65 5aa5 	vmul.f32	s11, s11, s11
 802647e:	ee37 7a06 	vadd.f32	s14, s14, s12
 8026482:	eee7 5aa7 	vfma.f32	s11, s15, s15
 8026486:	ee27 7a07 	vmul.f32	s14, s14, s14
 802648a:	ee65 7a85 	vmul.f32	s15, s11, s10
 802648e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8026492:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8026496:	f200 80ca 	bhi.w	802662e <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x2ce>
 802649a:	ee7b 0aef 	vsub.f32	s1, s23, s31
 802649e:	ee3c 0a4f 	vsub.f32	s0, s24, s30
 80264a2:	f001 f81c 	bl	80274de <atan2f>
 80264a6:	eeb0 8a40 	vmov.f32	s16, s0
 80264aa:	ee7f 0ae8 	vsub.f32	s1, s31, s17
 80264ae:	ee3f 0a69 	vsub.f32	s0, s30, s19
 80264b2:	f001 f814 	bl	80274de <atan2f>
 80264b6:	ee38 fa40 	vsub.f32	s30, s16, s0
 80264ba:	ee7a 0aeb 	vsub.f32	s1, s21, s23
 80264be:	ee3b 0a4c 	vsub.f32	s0, s22, s24
 80264c2:	eeb5 fac0 	vcmpe.f32	s30, #0.0
 80264c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80264ca:	bf48      	it	mi
 80264cc:	eeb1 fa4f 	vnegmi.f32	s30, s30
 80264d0:	f001 f805 	bl	80274de <atan2f>
 80264d4:	ee30 0a48 	vsub.f32	s0, s0, s16
 80264d8:	eddf 7a67 	vldr	s15, [pc, #412]	@ 8026678 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x318>
 80264dc:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80264e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80264e4:	eeb4 fae7 	vcmpe.f32	s30, s15
 80264e8:	eddf 7a63 	vldr	s15, [pc, #396]	@ 8026678 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x318>
 80264ec:	bf48      	it	mi
 80264ee:	eeb1 0a40 	vnegmi.f32	s0, s0
 80264f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80264f6:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80264fa:	eddf 7a60 	vldr	s15, [pc, #384]	@ 802667c <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x31c>
 80264fe:	bfa4      	itt	ge
 8026500:	ed9f 7a5f 	vldrge	s14, [pc, #380]	@ 8026680 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x320>
 8026504:	ee37 fa4f 	vsubge.f32	s30, s14, s30
 8026508:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802650c:	bfa4      	itt	ge
 802650e:	ed9f 7a5c 	vldrge	s14, [pc, #368]	@ 8026680 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x320>
 8026512:	ee37 0a40 	vsubge.f32	s0, s14, s0
 8026516:	ee3f 0a00 	vadd.f32	s0, s30, s0
 802651a:	eeb4 0ae7 	vcmpe.f32	s0, s15
 802651e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8026522:	f140 8084 	bpl.w	802662e <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x2ce>
 8026526:	eef0 0a4a 	vmov.f32	s1, s20
 802652a:	eeb0 0a49 	vmov.f32	s0, s18
 802652e:	e040      	b.n	80265b2 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x252>
 8026530:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8026534:	ee27 7a07 	vmul.f32	s14, s14, s14
 8026538:	eee5 7aa5 	vfma.f32	s15, s11, s11
 802653c:	ee67 7a85 	vmul.f32	s15, s15, s10
 8026540:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8026544:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8026548:	d871      	bhi.n	802662e <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x2ce>
 802654a:	ee7b 0aef 	vsub.f32	s1, s23, s31
 802654e:	ee3c 0a4f 	vsub.f32	s0, s24, s30
 8026552:	f000 ffc4 	bl	80274de <atan2f>
 8026556:	ee7f 0ae8 	vsub.f32	s1, s31, s17
 802655a:	eeb0 8a40 	vmov.f32	s16, s0
 802655e:	ee3f 0a69 	vsub.f32	s0, s30, s19
 8026562:	f000 ffbc 	bl	80274de <atan2f>
 8026566:	ee38 0a40 	vsub.f32	s0, s16, s0
 802656a:	eddf 7a43 	vldr	s15, [pc, #268]	@ 8026678 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x318>
 802656e:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8026572:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8026576:	bf48      	it	mi
 8026578:	eeb1 0a40 	vnegmi.f32	s0, s0
 802657c:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8026580:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8026584:	bfa4      	itt	ge
 8026586:	eddf 7a3e 	vldrge	s15, [pc, #248]	@ 8026680 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x320>
 802658a:	ee37 0ac0 	vsubge.f32	s0, s15, s0
 802658e:	eddf 7a3b 	vldr	s15, [pc, #236]	@ 802667c <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x31c>
 8026592:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8026596:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802659a:	d548      	bpl.n	802662e <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x2ce>
 802659c:	eef0 0a4f 	vmov.f32	s1, s30
 80265a0:	4620      	mov	r0, r4
 80265a2:	eeb0 0a6f 	vmov.f32	s0, s31
 80265a6:	f7ec f9b9 	bl	801291c <_ZN8touchgfx6Canvas6lineToIfEEvT_S2_>
 80265aa:	eef0 0a4c 	vmov.f32	s1, s24
 80265ae:	eeb0 0a6b 	vmov.f32	s0, s23
 80265b2:	4620      	mov	r0, r4
 80265b4:	f7ec f9b2 	bl	801291c <_ZN8touchgfx6Canvas6lineToIfEEvT_S2_>
 80265b8:	b005      	add	sp, #20
 80265ba:	ecbd 8b10 	vpop	{d8-d15}
 80265be:	bd30      	pop	{r4, r5, pc}
 80265c0:	ed9f 7a2c 	vldr	s14, [pc, #176]	@ 8026674 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x314>
 80265c4:	eeb4 6ac7 	vcmpe.f32	s12, s14
 80265c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80265cc:	dd19      	ble.n	8026602 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x2a2>
 80265ce:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80265d2:	ee26 7a06 	vmul.f32	s14, s12, s12
 80265d6:	eee5 7aa5 	vfma.f32	s15, s11, s11
 80265da:	ee67 7a85 	vmul.f32	s15, s15, s10
 80265de:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80265e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80265e6:	d822      	bhi.n	802662e <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x2ce>
 80265e8:	ee7a 0aeb 	vsub.f32	s1, s21, s23
 80265ec:	ee3b 0a4c 	vsub.f32	s0, s22, s24
 80265f0:	f000 ff75 	bl	80274de <atan2f>
 80265f4:	ee7b 0aef 	vsub.f32	s1, s23, s31
 80265f8:	eeb0 8a40 	vmov.f32	s16, s0
 80265fc:	ee3c 0a4f 	vsub.f32	s0, s24, s30
 8026600:	e7af      	b.n	8026562 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x202>
 8026602:	ee78 7aaa 	vadd.f32	s15, s17, s21
 8026606:	eeb0 7a49 	vmov.f32	s14, s18
 802660a:	eeb0 6a4a 	vmov.f32	s12, s20
 802660e:	eea7 7ae6 	vfms.f32	s14, s15, s13
 8026612:	ee79 7a8b 	vadd.f32	s15, s19, s22
 8026616:	eea7 6ae6 	vfms.f32	s12, s15, s13
 802661a:	ee66 7a06 	vmul.f32	s15, s12, s12
 802661e:	eee7 7a07 	vfma.f32	s15, s14, s14
 8026622:	eef4 7ac5 	vcmpe.f32	s15, s10
 8026626:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802662a:	f67f af7c 	bls.w	8026526 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x1c6>
 802662e:	3501      	adds	r5, #1
 8026630:	eef0 0a69 	vmov.f32	s1, s19
 8026634:	eeb0 0a68 	vmov.f32	s0, s17
 8026638:	4620      	mov	r0, r4
 802663a:	4629      	mov	r1, r5
 802663c:	eef0 3a4a 	vmov.f32	s7, s20
 8026640:	eeb0 3a49 	vmov.f32	s6, s18
 8026644:	eef0 2a6e 	vmov.f32	s5, s29
 8026648:	eeb0 2a4e 	vmov.f32	s4, s28
 802664c:	eef0 1a6d 	vmov.f32	s3, s27
 8026650:	eeb0 1a4d 	vmov.f32	s2, s26
 8026654:	f7ff fe84 	bl	8026360 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj>
 8026658:	eeb0 ca6c 	vmov.f32	s24, s25
 802665c:	eddd ba01 	vldr	s23, [sp, #4]
 8026660:	eef0 9a4a 	vmov.f32	s19, s20
 8026664:	ed9d fa02 	vldr	s30, [sp, #8]
 8026668:	eef0 8a49 	vmov.f32	s17, s18
 802666c:	eddd fa03 	vldr	s31, [sp, #12]
 8026670:	e68c      	b.n	802638c <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x2c>
 8026672:	bf00      	nop
 8026674:	2edbe6ff 	.word	0x2edbe6ff
 8026678:	40490fdb 	.word	0x40490fdb
 802667c:	3dcccccd 	.word	0x3dcccccd
 8026680:	40c90fdb 	.word	0x40c90fdb

08026684 <_ZN8touchgfx6CanvasD1Ev>:
 8026684:	4b04      	ldr	r3, [pc, #16]	@ (8026698 <_ZN8touchgfx6CanvasD1Ev+0x14>)
 8026686:	b510      	push	{r4, lr}
 8026688:	4604      	mov	r4, r0
 802668a:	f840 3b14 	str.w	r3, [r0], #20
 802668e:	f7ef f83d 	bl	801570c <_ZN8touchgfx7OutlineD1Ev>
 8026692:	4620      	mov	r0, r4
 8026694:	bd10      	pop	{r4, pc}
 8026696:	bf00      	nop
 8026698:	0802d4e4 	.word	0x0802d4e4

0802669c <_ZN8touchgfx6CanvasD0Ev>:
 802669c:	b510      	push	{r4, lr}
 802669e:	4604      	mov	r4, r0
 80266a0:	f7ff fff0 	bl	8026684 <_ZN8touchgfx6CanvasD1Ev>
 80266a4:	2174      	movs	r1, #116	@ 0x74
 80266a6:	4620      	mov	r0, r4
 80266a8:	f000 fef1 	bl	802748e <_ZdlPvj>
 80266ac:	4620      	mov	r0, r4
 80266ae:	bd10      	pop	{r4, pc}

080266b0 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE>:
 80266b0:	790b      	ldrb	r3, [r1, #4]
 80266b2:	2b00      	cmp	r3, #0
 80266b4:	bf0c      	ite	eq
 80266b6:	2301      	moveq	r3, #1
 80266b8:	2300      	movne	r3, #0
 80266ba:	b570      	push	{r4, r5, r6, lr}
 80266bc:	4604      	mov	r4, r0
 80266be:	f890 502c 	ldrb.w	r5, [r0, #44]	@ 0x2c
 80266c2:	460e      	mov	r6, r1
 80266c4:	f880 302c 	strb.w	r3, [r0, #44]	@ 0x2c
 80266c8:	d109      	bne.n	80266de <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x2e>
 80266ca:	b14d      	cbz	r5, 80266e0 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x30>
 80266cc:	7933      	ldrb	r3, [r6, #4]
 80266ce:	2b01      	cmp	r3, #1
 80266d0:	d10c      	bne.n	80266ec <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x3c>
 80266d2:	6823      	ldr	r3, [r4, #0]
 80266d4:	4620      	mov	r0, r4
 80266d6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80266d8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80266dc:	4718      	bx	r3
 80266de:	b12d      	cbz	r5, 80266ec <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x3c>
 80266e0:	6823      	ldr	r3, [r4, #0]
 80266e2:	4620      	mov	r0, r4
 80266e4:	695b      	ldr	r3, [r3, #20]
 80266e6:	4798      	blx	r3
 80266e8:	2d00      	cmp	r5, #0
 80266ea:	d1ef      	bne.n	80266cc <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x1c>
 80266ec:	bd70      	pop	{r4, r5, r6, pc}

080266ee <_ZN8touchgfx13TextureMapper21setRenderingAlgorithmENS0_18RenderingAlgorithmE>:
 80266ee:	f880 1029 	strb.w	r1, [r0, #41]	@ 0x29
 80266f2:	4770      	bx	lr

080266f4 <_ZNK8touchgfx13TextureMapper21getRenderingAlgorithmEv>:
 80266f4:	f890 0029 	ldrb.w	r0, [r0, #41]	@ 0x29
 80266f8:	4770      	bx	lr

080266fa <_ZN8touchgfx13TextureMapper9setXAngleEf>:
 80266fa:	6802      	ldr	r2, [r0, #0]
 80266fc:	ed90 1a0f 	vldr	s2, [r0, #60]	@ 0x3c
 8026700:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
 8026702:	edd0 0a0e 	vldr	s1, [r0, #56]	@ 0x38
 8026706:	4710      	bx	r2

08026708 <_ZN8touchgfx13TextureMapper9setYAngleEf>:
 8026708:	6802      	ldr	r2, [r0, #0]
 802670a:	eef0 0a40 	vmov.f32	s1, s0
 802670e:	ed90 1a0f 	vldr	s2, [r0, #60]	@ 0x3c
 8026712:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
 8026714:	ed90 0a0d 	vldr	s0, [r0, #52]	@ 0x34
 8026718:	4710      	bx	r2

0802671a <_ZN8touchgfx13TextureMapper9setZAngleEf>:
 802671a:	6802      	ldr	r2, [r0, #0]
 802671c:	eeb0 1a40 	vmov.f32	s2, s0
 8026720:	edd0 0a0e 	vldr	s1, [r0, #56]	@ 0x38
 8026724:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
 8026726:	ed90 0a0d 	vldr	s0, [r0, #52]	@ 0x34
 802672a:	4710      	bx	r2

0802672c <_ZN8touchgfx13TextureMapper12updateXAngleEf>:
 802672c:	6802      	ldr	r2, [r0, #0]
 802672e:	ed90 1a0f 	vldr	s2, [r0, #60]	@ 0x3c
 8026732:	6fd2      	ldr	r2, [r2, #124]	@ 0x7c
 8026734:	edd0 0a0e 	vldr	s1, [r0, #56]	@ 0x38
 8026738:	4710      	bx	r2

0802673a <_ZN8touchgfx13TextureMapper12updateYAngleEf>:
 802673a:	6802      	ldr	r2, [r0, #0]
 802673c:	eef0 0a40 	vmov.f32	s1, s0
 8026740:	ed90 1a0f 	vldr	s2, [r0, #60]	@ 0x3c
 8026744:	6fd2      	ldr	r2, [r2, #124]	@ 0x7c
 8026746:	ed90 0a0d 	vldr	s0, [r0, #52]	@ 0x34
 802674a:	4710      	bx	r2

0802674c <_ZN8touchgfx13TextureMapper12updateZAngleEf>:
 802674c:	6802      	ldr	r2, [r0, #0]
 802674e:	eeb0 1a40 	vmov.f32	s2, s0
 8026752:	edd0 0a0e 	vldr	s1, [r0, #56]	@ 0x38
 8026756:	6fd2      	ldr	r2, [r2, #124]	@ 0x7c
 8026758:	ed90 0a0d 	vldr	s0, [r0, #52]	@ 0x34
 802675c:	4710      	bx	r2

0802675e <_ZNK8touchgfx13TextureMapper9getXAngleEv>:
 802675e:	ed90 0a0d 	vldr	s0, [r0, #52]	@ 0x34
 8026762:	4770      	bx	lr

08026764 <_ZNK8touchgfx13TextureMapper9getYAngleEv>:
 8026764:	ed90 0a0e 	vldr	s0, [r0, #56]	@ 0x38
 8026768:	4770      	bx	lr

0802676a <_ZNK8touchgfx13TextureMapper9getZAngleEv>:
 802676a:	ed90 0a0f 	vldr	s0, [r0, #60]	@ 0x3c
 802676e:	4770      	bx	lr

08026770 <_ZNK8touchgfx13TextureMapper8getScaleEv>:
 8026770:	ed90 0a10 	vldr	s0, [r0, #64]	@ 0x40
 8026774:	4770      	bx	lr

08026776 <_ZNK8touchgfx13TextureMapper9getOrigoXEv>:
 8026776:	ed90 0a11 	vldr	s0, [r0, #68]	@ 0x44
 802677a:	4770      	bx	lr

0802677c <_ZNK8touchgfx13TextureMapper9getOrigoYEv>:
 802677c:	ed90 0a12 	vldr	s0, [r0, #72]	@ 0x48
 8026780:	4770      	bx	lr

08026782 <_ZNK8touchgfx13TextureMapper9getOrigoZEv>:
 8026782:	ed90 0a13 	vldr	s0, [r0, #76]	@ 0x4c
 8026786:	4770      	bx	lr

08026788 <_ZNK8touchgfx13TextureMapper10getCameraXEv>:
 8026788:	ed90 0a14 	vldr	s0, [r0, #80]	@ 0x50
 802678c:	4770      	bx	lr

0802678e <_ZNK8touchgfx13TextureMapper10getCameraYEv>:
 802678e:	ed90 0a15 	vldr	s0, [r0, #84]	@ 0x54
 8026792:	4770      	bx	lr

08026794 <_ZNK8touchgfx13TextureMapper17getCameraDistanceEv>:
 8026794:	ed90 0a16 	vldr	s0, [r0, #88]	@ 0x58
 8026798:	4770      	bx	lr

0802679a <_ZN8touchgfx13TextureMapper17setBitmapPositionEii>:
 802679a:	ee07 2a90 	vmov	s15, r2
 802679e:	6803      	ldr	r3, [r0, #0]
 80267a0:	eef8 0ae7 	vcvt.f32.s32	s1, s15
 80267a4:	ee07 1a90 	vmov	s15, r1
 80267a8:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 80267ac:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 80267b0:	4718      	bx	r3

080267b2 <_ZNK8touchgfx13TextureMapper18getBitmapPositionXEv>:
 80267b2:	ed90 0a0b 	vldr	s0, [r0, #44]	@ 0x2c
 80267b6:	4770      	bx	lr

080267b8 <_ZNK8touchgfx13TextureMapper18getBitmapPositionYEv>:
 80267b8:	ed90 0a0c 	vldr	s0, [r0, #48]	@ 0x30
 80267bc:	4770      	bx	lr

080267be <_ZNK8touchgfx13TextureMapper5getX0Ev>:
 80267be:	ed90 0a17 	vldr	s0, [r0, #92]	@ 0x5c
 80267c2:	4770      	bx	lr

080267c4 <_ZNK8touchgfx13TextureMapper5getX1Ev>:
 80267c4:	ed90 0a1a 	vldr	s0, [r0, #104]	@ 0x68
 80267c8:	4770      	bx	lr

080267ca <_ZNK8touchgfx13TextureMapper5getX2Ev>:
 80267ca:	ed90 0a1d 	vldr	s0, [r0, #116]	@ 0x74
 80267ce:	4770      	bx	lr

080267d0 <_ZNK8touchgfx13TextureMapper5getX3Ev>:
 80267d0:	ed90 0a20 	vldr	s0, [r0, #128]	@ 0x80
 80267d4:	4770      	bx	lr

080267d6 <_ZNK8touchgfx13TextureMapper5getY0Ev>:
 80267d6:	ed90 0a18 	vldr	s0, [r0, #96]	@ 0x60
 80267da:	4770      	bx	lr

080267dc <_ZNK8touchgfx13TextureMapper5getY1Ev>:
 80267dc:	ed90 0a1b 	vldr	s0, [r0, #108]	@ 0x6c
 80267e0:	4770      	bx	lr

080267e2 <_ZNK8touchgfx13TextureMapper5getY2Ev>:
 80267e2:	ed90 0a1e 	vldr	s0, [r0, #120]	@ 0x78
 80267e6:	4770      	bx	lr

080267e8 <_ZNK8touchgfx13TextureMapper5getY3Ev>:
 80267e8:	ed90 0a21 	vldr	s0, [r0, #132]	@ 0x84
 80267ec:	4770      	bx	lr

080267ee <_ZNK8touchgfx13TextureMapper5getZ0Ev>:
 80267ee:	ed90 0a19 	vldr	s0, [r0, #100]	@ 0x64
 80267f2:	4770      	bx	lr

080267f4 <_ZNK8touchgfx13TextureMapper5getZ1Ev>:
 80267f4:	ed90 0a1c 	vldr	s0, [r0, #112]	@ 0x70
 80267f8:	4770      	bx	lr

080267fa <_ZNK8touchgfx13TextureMapper5getZ2Ev>:
 80267fa:	ed90 0a1f 	vldr	s0, [r0, #124]	@ 0x7c
 80267fe:	4770      	bx	lr

08026800 <_ZNK8touchgfx13TextureMapper5getZ3Ev>:
 8026800:	ed90 0a22 	vldr	s0, [r0, #136]	@ 0x88
 8026804:	4770      	bx	lr

08026806 <_ZN8touchgfx13TextureMapper12updateAnglesEfff>:
 8026806:	b510      	push	{r4, lr}
 8026808:	ed2d 8b04 	vpush	{d8-d9}
 802680c:	6803      	ldr	r3, [r0, #0]
 802680e:	4604      	mov	r4, r0
 8026810:	eeb0 8a40 	vmov.f32	s16, s0
 8026814:	eef0 8a60 	vmov.f32	s17, s1
 8026818:	699b      	ldr	r3, [r3, #24]
 802681a:	eeb0 9a41 	vmov.f32	s18, s2
 802681e:	4798      	blx	r3
 8026820:	6823      	ldr	r3, [r4, #0]
 8026822:	4620      	mov	r0, r4
 8026824:	eef0 0a68 	vmov.f32	s1, s17
 8026828:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 802682a:	eeb0 1a49 	vmov.f32	s2, s18
 802682e:	eeb0 0a48 	vmov.f32	s0, s16
 8026832:	4798      	blx	r3
 8026834:	6823      	ldr	r3, [r4, #0]
 8026836:	4620      	mov	r0, r4
 8026838:	699b      	ldr	r3, [r3, #24]
 802683a:	ecbd 8b04 	vpop	{d8-d9}
 802683e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8026842:	4718      	bx	r3

08026844 <_ZN8touchgfx13TextureMapper11updateScaleEf>:
 8026844:	b510      	push	{r4, lr}
 8026846:	ed2d 8b02 	vpush	{d8}
 802684a:	6803      	ldr	r3, [r0, #0]
 802684c:	4604      	mov	r4, r0
 802684e:	eeb0 8a40 	vmov.f32	s16, s0
 8026852:	699b      	ldr	r3, [r3, #24]
 8026854:	4798      	blx	r3
 8026856:	6823      	ldr	r3, [r4, #0]
 8026858:	4620      	mov	r0, r4
 802685a:	eeb0 0a48 	vmov.f32	s0, s16
 802685e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8026862:	4798      	blx	r3
 8026864:	6823      	ldr	r3, [r4, #0]
 8026866:	4620      	mov	r0, r4
 8026868:	699b      	ldr	r3, [r3, #24]
 802686a:	ecbd 8b02 	vpop	{d8}
 802686e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8026872:	4718      	bx	r3

08026874 <_ZNK8touchgfx13TextureMapper12getSolidRectEv>:
 8026874:	2200      	movs	r2, #0
 8026876:	8002      	strh	r2, [r0, #0]
 8026878:	8042      	strh	r2, [r0, #2]
 802687a:	8082      	strh	r2, [r0, #4]
 802687c:	80c2      	strh	r2, [r0, #6]
 802687e:	4770      	bx	lr

08026880 <_ZN8touchgfx13TextureMapperD1Ev>:
 8026880:	4770      	bx	lr

08026882 <_ZN8touchgfx13TextureMapperD0Ev>:
 8026882:	b510      	push	{r4, lr}
 8026884:	4604      	mov	r4, r0
 8026886:	2190      	movs	r1, #144	@ 0x90
 8026888:	f000 fe01 	bl	802748e <_ZdlPvj>
 802688c:	4620      	mov	r0, r4
 802688e:	bd10      	pop	{r4, pc}

08026890 <_ZN8touchgfx13TextureMapperC1ERKNS_6BitmapE>:
 8026890:	b538      	push	{r3, r4, r5, lr}
 8026892:	2301      	movs	r3, #1
 8026894:	2500      	movs	r5, #0
 8026896:	4604      	mov	r4, r0
 8026898:	f880 3025 	strb.w	r3, [r0, #37]	@ 0x25
 802689c:	4b1f      	ldr	r3, [pc, #124]	@ (802691c <_ZN8touchgfx13TextureMapperC1ERKNS_6BitmapE+0x8c>)
 802689e:	8085      	strh	r5, [r0, #4]
 80268a0:	80c5      	strh	r5, [r0, #6]
 80268a2:	8105      	strh	r5, [r0, #8]
 80268a4:	8145      	strh	r5, [r0, #10]
 80268a6:	8185      	strh	r5, [r0, #12]
 80268a8:	81c5      	strh	r5, [r0, #14]
 80268aa:	8205      	strh	r5, [r0, #16]
 80268ac:	8245      	strh	r5, [r0, #18]
 80268ae:	61c5      	str	r5, [r0, #28]
 80268b0:	8405      	strh	r5, [r0, #32]
 80268b2:	8445      	strh	r5, [r0, #34]	@ 0x22
 80268b4:	f880 5024 	strb.w	r5, [r0, #36]	@ 0x24
 80268b8:	6003      	str	r3, [r0, #0]
 80268ba:	e9c0 5505 	strd	r5, r5, [r0, #20]
 80268be:	880b      	ldrh	r3, [r1, #0]
 80268c0:	84c3      	strh	r3, [r0, #38]	@ 0x26
 80268c2:	23ff      	movs	r3, #255	@ 0xff
 80268c4:	f880 3028 	strb.w	r3, [r0, #40]	@ 0x28
 80268c8:	f7ee fdbb 	bl	8015442 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 80268cc:	4b14      	ldr	r3, [pc, #80]	@ (8026920 <_ZN8touchgfx13TextureMapperC1ERKNS_6BitmapE+0x90>)
 80268ce:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80268d2:	4914      	ldr	r1, [pc, #80]	@ (8026924 <_ZN8touchgfx13TextureMapperC1ERKNS_6BitmapE+0x94>)
 80268d4:	6023      	str	r3, [r4, #0]
 80268d6:	2300      	movs	r3, #0
 80268d8:	f884 5029 	strb.w	r5, [r4, #41]	@ 0x29
 80268dc:	4620      	mov	r0, r4
 80268de:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80268e0:	6323      	str	r3, [r4, #48]	@ 0x30
 80268e2:	6363      	str	r3, [r4, #52]	@ 0x34
 80268e4:	63a3      	str	r3, [r4, #56]	@ 0x38
 80268e6:	63e3      	str	r3, [r4, #60]	@ 0x3c
 80268e8:	6463      	str	r3, [r4, #68]	@ 0x44
 80268ea:	64a3      	str	r3, [r4, #72]	@ 0x48
 80268ec:	6523      	str	r3, [r4, #80]	@ 0x50
 80268ee:	6563      	str	r3, [r4, #84]	@ 0x54
 80268f0:	65e3      	str	r3, [r4, #92]	@ 0x5c
 80268f2:	6623      	str	r3, [r4, #96]	@ 0x60
 80268f4:	66a3      	str	r3, [r4, #104]	@ 0x68
 80268f6:	66e3      	str	r3, [r4, #108]	@ 0x6c
 80268f8:	6763      	str	r3, [r4, #116]	@ 0x74
 80268fa:	67a3      	str	r3, [r4, #120]	@ 0x78
 80268fc:	f8c4 3080 	str.w	r3, [r4, #128]	@ 0x80
 8026900:	f8c4 3084 	str.w	r3, [r4, #132]	@ 0x84
 8026904:	230c      	movs	r3, #12
 8026906:	6422      	str	r2, [r4, #64]	@ 0x40
 8026908:	64e1      	str	r1, [r4, #76]	@ 0x4c
 802690a:	65a1      	str	r1, [r4, #88]	@ 0x58
 802690c:	6662      	str	r2, [r4, #100]	@ 0x64
 802690e:	6722      	str	r2, [r4, #112]	@ 0x70
 8026910:	67e2      	str	r2, [r4, #124]	@ 0x7c
 8026912:	f8c4 2088 	str.w	r2, [r4, #136]	@ 0x88
 8026916:	f8a4 308c 	strh.w	r3, [r4, #140]	@ 0x8c
 802691a:	bd38      	pop	{r3, r4, r5, pc}
 802691c:	0802d004 	.word	0x0802d004
 8026920:	0802d4f8 	.word	0x0802d4f8
 8026924:	447a0000 	.word	0x447a0000

08026928 <_ZN8touchgfx13TextureMapper19applyTransformationEv>:
 8026928:	b570      	push	{r4, r5, r6, lr}
 802692a:	ed2d 8b04 	vpush	{d8-d9}
 802692e:	f5ad 7d50 	sub.w	sp, sp, #832	@ 0x340
 8026932:	8cc3      	ldrh	r3, [r0, #38]	@ 0x26
 8026934:	4604      	mov	r4, r0
 8026936:	add0      	add	r5, sp, #832	@ 0x340
 8026938:	f825 3d40 	strh.w	r3, [r5, #-64]!
 802693c:	4628      	mov	r0, r5
 802693e:	f7f5 f8c1 	bl	801bac4 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8026942:	8ce3      	ldrh	r3, [r4, #38]	@ 0x26
 8026944:	4606      	mov	r6, r0
 8026946:	4628      	mov	r0, r5
 8026948:	f8ad 3300 	strh.w	r3, [sp, #768]	@ 0x300
 802694c:	f7f5 f8ee 	bl	801bb2c <_ZNK8touchgfx6Bitmap9getHeightEv>
 8026950:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8026954:	1c72      	adds	r2, r6, #1
 8026956:	edd4 6a0c 	vldr	s13, [r4, #48]	@ 0x30
 802695a:	3001      	adds	r0, #1
 802695c:	ee07 2a90 	vmov	s15, r2
 8026960:	ed94 6a0b 	vldr	s12, [r4, #44]	@ 0x2c
 8026964:	ee76 5ac7 	vsub.f32	s11, s13, s14
 8026968:	ee06 0a90 	vmov	s13, r0
 802696c:	ee36 6a47 	vsub.f32	s12, s12, s14
 8026970:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8026972:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8026976:	ed94 9a11 	vldr	s18, [r4, #68]	@ 0x44
 802697a:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 802697e:	9312      	str	r3, [sp, #72]	@ 0x48
 8026980:	9316      	str	r3, [sp, #88]	@ 0x58
 8026982:	a830      	add	r0, sp, #192	@ 0xc0
 8026984:	ee77 7a86 	vadd.f32	s15, s15, s12
 8026988:	931a      	str	r3, [sp, #104]	@ 0x68
 802698a:	ee76 6aa5 	vadd.f32	s13, s13, s11
 802698e:	931e      	str	r3, [sp, #120]	@ 0x78
 8026990:	2300      	movs	r3, #0
 8026992:	ed8d 6a10 	vstr	s12, [sp, #64]	@ 0x40
 8026996:	edcd 5a11 	vstr	s11, [sp, #68]	@ 0x44
 802699a:	ae70      	add	r6, sp, #448	@ 0x1c0
 802699c:	9320      	str	r3, [sp, #128]	@ 0x80
 802699e:	9321      	str	r3, [sp, #132]	@ 0x84
 80269a0:	9322      	str	r3, [sp, #136]	@ 0x88
 80269a2:	9324      	str	r3, [sp, #144]	@ 0x90
 80269a4:	9325      	str	r3, [sp, #148]	@ 0x94
 80269a6:	9326      	str	r3, [sp, #152]	@ 0x98
 80269a8:	9328      	str	r3, [sp, #160]	@ 0xa0
 80269aa:	9329      	str	r3, [sp, #164]	@ 0xa4
 80269ac:	932a      	str	r3, [sp, #168]	@ 0xa8
 80269ae:	932c      	str	r3, [sp, #176]	@ 0xb0
 80269b0:	932d      	str	r3, [sp, #180]	@ 0xb4
 80269b2:	932e      	str	r3, [sp, #184]	@ 0xb8
 80269b4:	ed8d 7a13 	vstr	s14, [sp, #76]	@ 0x4c
 80269b8:	edcd 7a14 	vstr	s15, [sp, #80]	@ 0x50
 80269bc:	edcd 5a15 	vstr	s11, [sp, #84]	@ 0x54
 80269c0:	ed8d 7a17 	vstr	s14, [sp, #92]	@ 0x5c
 80269c4:	edcd 7a18 	vstr	s15, [sp, #96]	@ 0x60
 80269c8:	edcd 6a19 	vstr	s13, [sp, #100]	@ 0x64
 80269cc:	ed8d 7a1b 	vstr	s14, [sp, #108]	@ 0x6c
 80269d0:	ed8d 6a1c 	vstr	s12, [sp, #112]	@ 0x70
 80269d4:	edcd 6a1d 	vstr	s13, [sp, #116]	@ 0x74
 80269d8:	ed8d 7a1f 	vstr	s14, [sp, #124]	@ 0x7c
 80269dc:	edd4 8a12 	vldr	s17, [r4, #72]	@ 0x48
 80269e0:	ed94 8a13 	vldr	s16, [r4, #76]	@ 0x4c
 80269e4:	f000 fc2c 	bl	8027240 <_ZN8touchgfx9Matrix4x4C1Ev>
 80269e8:	eeb1 0a49 	vneg.f32	s0, s18
 80269ec:	a830      	add	r0, sp, #192	@ 0xc0
 80269ee:	f000 fcf7 	bl	80273e0 <_ZN8touchgfx9Matrix4x423concatenateXTranslationEf>
 80269f2:	eeb1 0a68 	vneg.f32	s0, s17
 80269f6:	f000 fd01 	bl	80273fc <_ZN8touchgfx9Matrix4x423concatenateYTranslationEf>
 80269fa:	eeb1 0a48 	vneg.f32	s0, s16
 80269fe:	f000 fd0c 	bl	802741a <_ZN8touchgfx9Matrix4x423concatenateZTranslationEf>
 8026a02:	a840      	add	r0, sp, #256	@ 0x100
 8026a04:	f000 fc1c 	bl	8027240 <_ZN8touchgfx9Matrix4x4C1Ev>
 8026a08:	ed94 0a0d 	vldr	s0, [r4, #52]	@ 0x34
 8026a0c:	a840      	add	r0, sp, #256	@ 0x100
 8026a0e:	f000 fc6b 	bl	80272e8 <_ZN8touchgfx9Matrix4x420concatenateXRotationEf>
 8026a12:	ed94 0a0e 	vldr	s0, [r4, #56]	@ 0x38
 8026a16:	f000 fc91 	bl	802733c <_ZN8touchgfx9Matrix4x420concatenateYRotationEf>
 8026a1a:	ed94 0a0f 	vldr	s0, [r4, #60]	@ 0x3c
 8026a1e:	f000 fcb6 	bl	802738e <_ZN8touchgfx9Matrix4x420concatenateZRotationEf>
 8026a22:	a850      	add	r0, sp, #320	@ 0x140
 8026a24:	f000 fc0c 	bl	8027240 <_ZN8touchgfx9Matrix4x4C1Ev>
 8026a28:	ed94 0a10 	vldr	s0, [r4, #64]	@ 0x40
 8026a2c:	a850      	add	r0, sp, #320	@ 0x140
 8026a2e:	f000 fd03 	bl	8027438 <_ZN8touchgfx9Matrix4x417concatenateXScaleEf>
 8026a32:	ed94 0a10 	vldr	s0, [r4, #64]	@ 0x40
 8026a36:	f000 fd0b 	bl	8027450 <_ZN8touchgfx9Matrix4x417concatenateYScaleEf>
 8026a3a:	ed94 0a10 	vldr	s0, [r4, #64]	@ 0x40
 8026a3e:	f000 fd14 	bl	802746a <_ZN8touchgfx9Matrix4x417concatenateZScaleEf>
 8026a42:	a860      	add	r0, sp, #384	@ 0x180
 8026a44:	f000 fbfc 	bl	8027240 <_ZN8touchgfx9Matrix4x4C1Ev>
 8026a48:	eeb0 0a49 	vmov.f32	s0, s18
 8026a4c:	a860      	add	r0, sp, #384	@ 0x180
 8026a4e:	f000 fcc7 	bl	80273e0 <_ZN8touchgfx9Matrix4x423concatenateXTranslationEf>
 8026a52:	eeb0 0a68 	vmov.f32	s0, s17
 8026a56:	f000 fcd1 	bl	80273fc <_ZN8touchgfx9Matrix4x423concatenateYTranslationEf>
 8026a5a:	eeb0 0a48 	vmov.f32	s0, s16
 8026a5e:	f000 fcdc 	bl	802741a <_ZN8touchgfx9Matrix4x423concatenateZTranslationEf>
 8026a62:	aa50      	add	r2, sp, #320	@ 0x140
 8026a64:	a960      	add	r1, sp, #384	@ 0x180
 8026a66:	a8b0      	add	r0, sp, #704	@ 0x2c0
 8026a68:	f000 fc02 	bl	8027270 <_ZN8touchgfxmlERKNS_9Matrix4x4ES2_>
 8026a6c:	4628      	mov	r0, r5
 8026a6e:	aa40      	add	r2, sp, #256	@ 0x100
 8026a70:	a9b0      	add	r1, sp, #704	@ 0x2c0
 8026a72:	f000 fbfd 	bl	8027270 <_ZN8touchgfxmlERKNS_9Matrix4x4ES2_>
 8026a76:	4629      	mov	r1, r5
 8026a78:	aa30      	add	r2, sp, #192	@ 0xc0
 8026a7a:	a870      	add	r0, sp, #448	@ 0x1c0
 8026a7c:	f000 fbf8 	bl	8027270 <_ZN8touchgfxmlERKNS_9Matrix4x4ES2_>
 8026a80:	a880      	add	r0, sp, #512	@ 0x200
 8026a82:	f000 fbdd 	bl	8027240 <_ZN8touchgfx9Matrix4x4C1Ev>
 8026a86:	ed94 0a14 	vldr	s0, [r4, #80]	@ 0x50
 8026a8a:	a880      	add	r0, sp, #512	@ 0x200
 8026a8c:	eeb1 0a40 	vneg.f32	s0, s0
 8026a90:	f000 fca6 	bl	80273e0 <_ZN8touchgfx9Matrix4x423concatenateXTranslationEf>
 8026a94:	ed94 0a15 	vldr	s0, [r4, #84]	@ 0x54
 8026a98:	a880      	add	r0, sp, #512	@ 0x200
 8026a9a:	eeb1 0a40 	vneg.f32	s0, s0
 8026a9e:	f000 fcad 	bl	80273fc <_ZN8touchgfx9Matrix4x423concatenateYTranslationEf>
 8026aa2:	a890      	add	r0, sp, #576	@ 0x240
 8026aa4:	f000 fbcc 	bl	8027240 <_ZN8touchgfx9Matrix4x4C1Ev>
 8026aa8:	ed94 0a16 	vldr	s0, [r4, #88]	@ 0x58
 8026aac:	a890      	add	r0, sp, #576	@ 0x240
 8026aae:	f000 fc0b 	bl	80272c8 <_ZN8touchgfx9Matrix4x415setViewDistanceEf>
 8026ab2:	a8a0      	add	r0, sp, #640	@ 0x280
 8026ab4:	f000 fbc4 	bl	8027240 <_ZN8touchgfx9Matrix4x4C1Ev>
 8026ab8:	ed94 0a14 	vldr	s0, [r4, #80]	@ 0x50
 8026abc:	a8a0      	add	r0, sp, #640	@ 0x280
 8026abe:	f000 fc8f 	bl	80273e0 <_ZN8touchgfx9Matrix4x423concatenateXTranslationEf>
 8026ac2:	ed94 0a15 	vldr	s0, [r4, #84]	@ 0x54
 8026ac6:	f000 fc99 	bl	80273fc <_ZN8touchgfx9Matrix4x423concatenateYTranslationEf>
 8026aca:	aa90      	add	r2, sp, #576	@ 0x240
 8026acc:	a9a0      	add	r1, sp, #640	@ 0x280
 8026ace:	a8b0      	add	r0, sp, #704	@ 0x2c0
 8026ad0:	f000 fbce 	bl	8027270 <_ZN8touchgfxmlERKNS_9Matrix4x4ES2_>
 8026ad4:	4628      	mov	r0, r5
 8026ad6:	aa80      	add	r2, sp, #512	@ 0x200
 8026ad8:	a9b0      	add	r1, sp, #704	@ 0x2c0
 8026ada:	f000 fbc9 	bl	8027270 <_ZN8touchgfxmlERKNS_9Matrix4x4ES2_>
 8026ade:	4629      	mov	r1, r5
 8026ae0:	466d      	mov	r5, sp
 8026ae2:	aa70      	add	r2, sp, #448	@ 0x1c0
 8026ae4:	4668      	mov	r0, sp
 8026ae6:	f000 fbc3 	bl	8027270 <_ZN8touchgfxmlERKNS_9Matrix4x4ES2_>
 8026aea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8026aec:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8026aee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8026af0:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8026af2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8026af4:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8026af6:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8026afa:	2500      	movs	r5, #0
 8026afc:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
 8026b00:	0129      	lsls	r1, r5, #4
 8026b02:	ab20      	add	r3, sp, #128	@ 0x80
 8026b04:	3501      	adds	r5, #1
 8026b06:	a870      	add	r0, sp, #448	@ 0x1c0
 8026b08:	185e      	adds	r6, r3, r1
 8026b0a:	ab10      	add	r3, sp, #64	@ 0x40
 8026b0c:	4419      	add	r1, r3
 8026b0e:	f000 fb67 	bl	80271e0 <_ZN8touchgfxmlERKNS_9Matrix4x4ERKNS_6Point4E>
 8026b12:	2d04      	cmp	r5, #4
 8026b14:	ed86 0a00 	vstr	s0, [r6]
 8026b18:	edc6 0a01 	vstr	s1, [r6, #4]
 8026b1c:	ed86 1a02 	vstr	s2, [r6, #8]
 8026b20:	edc6 1a03 	vstr	s3, [r6, #12]
 8026b24:	d1ec      	bne.n	8026b00 <_ZN8touchgfx13TextureMapper19applyTransformationEv+0x1d8>
 8026b26:	edd4 7a16 	vldr	s15, [r4, #88]	@ 0x58
 8026b2a:	eddd 6a20 	vldr	s13, [sp, #128]	@ 0x80
 8026b2e:	ed9d 7a22 	vldr	s14, [sp, #136]	@ 0x88
 8026b32:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8026b36:	ed84 7a19 	vstr	s14, [r4, #100]	@ 0x64
 8026b3a:	ee86 6a87 	vdiv.f32	s12, s13, s14
 8026b3e:	eddd 6a21 	vldr	s13, [sp, #132]	@ 0x84
 8026b42:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8026b46:	ed84 6a17 	vstr	s12, [r4, #92]	@ 0x5c
 8026b4a:	ee86 6a87 	vdiv.f32	s12, s13, s14
 8026b4e:	eddd 6a24 	vldr	s13, [sp, #144]	@ 0x90
 8026b52:	ed9d 7a26 	vldr	s14, [sp, #152]	@ 0x98
 8026b56:	ed84 7a1c 	vstr	s14, [r4, #112]	@ 0x70
 8026b5a:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8026b5e:	ed84 6a18 	vstr	s12, [r4, #96]	@ 0x60
 8026b62:	ee86 6a87 	vdiv.f32	s12, s13, s14
 8026b66:	eddd 6a25 	vldr	s13, [sp, #148]	@ 0x94
 8026b6a:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8026b6e:	ed84 6a1a 	vstr	s12, [r4, #104]	@ 0x68
 8026b72:	ee86 6a87 	vdiv.f32	s12, s13, s14
 8026b76:	eddd 6a28 	vldr	s13, [sp, #160]	@ 0xa0
 8026b7a:	ed9d 7a2a 	vldr	s14, [sp, #168]	@ 0xa8
 8026b7e:	ed84 7a1f 	vstr	s14, [r4, #124]	@ 0x7c
 8026b82:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8026b86:	ed84 6a1b 	vstr	s12, [r4, #108]	@ 0x6c
 8026b8a:	ee86 6a87 	vdiv.f32	s12, s13, s14
 8026b8e:	eddd 6a29 	vldr	s13, [sp, #164]	@ 0xa4
 8026b92:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8026b96:	ed84 6a1d 	vstr	s12, [r4, #116]	@ 0x74
 8026b9a:	ee86 6a87 	vdiv.f32	s12, s13, s14
 8026b9e:	eddd 6a2c 	vldr	s13, [sp, #176]	@ 0xb0
 8026ba2:	ed9d 7a2e 	vldr	s14, [sp, #184]	@ 0xb8
 8026ba6:	ed84 7a22 	vstr	s14, [r4, #136]	@ 0x88
 8026baa:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8026bae:	ed84 6a1e 	vstr	s12, [r4, #120]	@ 0x78
 8026bb2:	ee86 6a87 	vdiv.f32	s12, s13, s14
 8026bb6:	eddd 6a2d 	vldr	s13, [sp, #180]	@ 0xb4
 8026bba:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8026bbe:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8026bc2:	ed84 6a20 	vstr	s12, [r4, #128]	@ 0x80
 8026bc6:	edc4 6a21 	vstr	s13, [r4, #132]	@ 0x84
 8026bca:	f50d 7d50 	add.w	sp, sp, #832	@ 0x340
 8026bce:	ecbd 8b04 	vpop	{d8-d9}
 8026bd2:	bd70      	pop	{r4, r5, r6, pc}

08026bd4 <_ZN8touchgfx13TextureMapper9setBitmapERKNS_6BitmapE>:
 8026bd4:	b510      	push	{r4, lr}
 8026bd6:	4604      	mov	r4, r0
 8026bd8:	f7ee fc33 	bl	8015442 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 8026bdc:	4620      	mov	r0, r4
 8026bde:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8026be2:	f7ff bea1 	b.w	8026928 <_ZN8touchgfx13TextureMapper19applyTransformationEv>

08026be6 <_ZN8touchgfx13TextureMapper9setAnglesEfff>:
 8026be6:	ed80 0a0d 	vstr	s0, [r0, #52]	@ 0x34
 8026bea:	edc0 0a0e 	vstr	s1, [r0, #56]	@ 0x38
 8026bee:	ed80 1a0f 	vstr	s2, [r0, #60]	@ 0x3c
 8026bf2:	f7ff be99 	b.w	8026928 <_ZN8touchgfx13TextureMapper19applyTransformationEv>

08026bf6 <_ZN8touchgfx13TextureMapper8setScaleEf>:
 8026bf6:	ed80 0a10 	vstr	s0, [r0, #64]	@ 0x40
 8026bfa:	f7ff be95 	b.w	8026928 <_ZN8touchgfx13TextureMapper19applyTransformationEv>

08026bfe <_ZN8touchgfx13TextureMapper17setBitmapPositionEff>:
 8026bfe:	ed80 0a0b 	vstr	s0, [r0, #44]	@ 0x2c
 8026c02:	edc0 0a0c 	vstr	s1, [r0, #48]	@ 0x30
 8026c06:	f7ff be8f 	b.w	8026928 <_ZN8touchgfx13TextureMapper19applyTransformationEv>

08026c0a <_ZN8touchgfx13TextureMapper17setCameraDistanceEf>:
 8026c0a:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8026c0e:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8026c12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8026c16:	fe30 0a27 	vselgt.f32	s0, s0, s15
 8026c1a:	ed80 0a16 	vstr	s0, [r0, #88]	@ 0x58
 8026c1e:	f7ff be83 	b.w	8026928 <_ZN8touchgfx13TextureMapper19applyTransformationEv>

08026c22 <_ZN8touchgfx13TextureMapper9setCameraEff>:
 8026c22:	ed80 0a14 	vstr	s0, [r0, #80]	@ 0x50
 8026c26:	edc0 0a15 	vstr	s1, [r0, #84]	@ 0x54
 8026c2a:	f7ff be7d 	b.w	8026928 <_ZN8touchgfx13TextureMapper19applyTransformationEv>

08026c2e <_ZN8touchgfx13TextureMapper8setOrigoEff>:
 8026c2e:	ed80 0a11 	vstr	s0, [r0, #68]	@ 0x44
 8026c32:	edc0 0a12 	vstr	s1, [r0, #72]	@ 0x48
 8026c36:	f7ff be77 	b.w	8026928 <_ZN8touchgfx13TextureMapper19applyTransformationEv>

08026c3a <_ZN8touchgfx13TextureMapper8setOrigoEfff>:
 8026c3a:	ed80 0a11 	vstr	s0, [r0, #68]	@ 0x44
 8026c3e:	edc0 0a12 	vstr	s1, [r0, #72]	@ 0x48
 8026c42:	ed80 1a13 	vstr	s2, [r0, #76]	@ 0x4c
 8026c46:	f7ff be6f 	b.w	8026928 <_ZN8touchgfx13TextureMapper19applyTransformationEv>

08026c4a <_ZNK8touchgfx13TextureMapper15getBoundingRectEv>:
 8026c4a:	b510      	push	{r4, lr}
 8026c4c:	edd1 5a1a 	vldr	s11, [r1, #104]	@ 0x68
 8026c50:	edd1 7a17 	vldr	s15, [r1, #92]	@ 0x5c
 8026c54:	ed91 6a1d 	vldr	s12, [r1, #116]	@ 0x74
 8026c58:	eef4 7ae5 	vcmpe.f32	s15, s11
 8026c5c:	edd1 6a20 	vldr	s13, [r1, #128]	@ 0x80
 8026c60:	f9b1 4008 	ldrsh.w	r4, [r1, #8]
 8026c64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8026c68:	bf54      	ite	pl
 8026c6a:	eeb0 7a65 	vmovpl.f32	s14, s11
 8026c6e:	eeb0 7a67 	vmovmi.f32	s14, s15
 8026c72:	eeb4 6ac7 	vcmpe.f32	s12, s14
 8026c76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8026c7a:	fe37 7a06 	vselgt.f32	s14, s14, s12
 8026c7e:	eef4 6ac7 	vcmpe.f32	s13, s14
 8026c82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8026c86:	fe37 7a26 	vselgt.f32	s14, s14, s13
 8026c8a:	febb 7a47 	vrintm.f32	s14, s14
 8026c8e:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8026c92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8026c96:	eef4 7ae5 	vcmpe.f32	s15, s11
 8026c9a:	bf56      	itet	pl
 8026c9c:	eebd 7ac7 	vcvtpl.s32.f32	s14, s14
 8026ca0:	2200      	movmi	r2, #0
 8026ca2:	ee17 3a10 	vmovpl	r3, s14
 8026ca6:	ee07 4a10 	vmov	s14, r4
 8026caa:	bf58      	it	pl
 8026cac:	b21a      	sxthpl	r2, r3
 8026cae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8026cb2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8026cb6:	8002      	strh	r2, [r0, #0]
 8026cb8:	fe77 7aa5 	vselgt.f32	s15, s15, s11
 8026cbc:	eeb4 6ae7 	vcmpe.f32	s12, s15
 8026cc0:	edd1 5a1b 	vldr	s11, [r1, #108]	@ 0x6c
 8026cc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8026cc8:	bf58      	it	pl
 8026cca:	eef0 7a46 	vmovpl.f32	s15, s12
 8026cce:	ed91 6a1e 	vldr	s12, [r1, #120]	@ 0x78
 8026cd2:	eef4 6ae7 	vcmpe.f32	s13, s15
 8026cd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8026cda:	bf58      	it	pl
 8026cdc:	eef0 7a66 	vmovpl.f32	s15, s13
 8026ce0:	edd1 6a21 	vldr	s13, [r1, #132]	@ 0x84
 8026ce4:	fefa 7a67 	vrintp.f32	s15, s15
 8026ce8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8026cec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8026cf0:	bfdc      	itt	le
 8026cf2:	eefd 7ae7 	vcvtle.s32.f32	s15, s15
 8026cf6:	ee17 3a90 	vmovle	r3, s15
 8026cfa:	edd1 7a18 	vldr	s15, [r1, #96]	@ 0x60
 8026cfe:	f9b1 100a 	ldrsh.w	r1, [r1, #10]
 8026d02:	eef4 7ae5 	vcmpe.f32	s15, s11
 8026d06:	bfd8      	it	le
 8026d08:	b21c      	sxthle	r4, r3
 8026d0a:	1aa2      	subs	r2, r4, r2
 8026d0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8026d10:	8082      	strh	r2, [r0, #4]
 8026d12:	bf54      	ite	pl
 8026d14:	eeb0 7a65 	vmovpl.f32	s14, s11
 8026d18:	eeb0 7a67 	vmovmi.f32	s14, s15
 8026d1c:	eeb4 6ac7 	vcmpe.f32	s12, s14
 8026d20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8026d24:	fe37 7a06 	vselgt.f32	s14, s14, s12
 8026d28:	eef4 6ac7 	vcmpe.f32	s13, s14
 8026d2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8026d30:	fe37 7a26 	vselgt.f32	s14, s14, s13
 8026d34:	febb 7a47 	vrintm.f32	s14, s14
 8026d38:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8026d3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8026d40:	eef4 7ae5 	vcmpe.f32	s15, s11
 8026d44:	bf56      	itet	pl
 8026d46:	eebd 7ac7 	vcvtpl.s32.f32	s14, s14
 8026d4a:	2300      	movmi	r3, #0
 8026d4c:	ee17 3a10 	vmovpl	r3, s14
 8026d50:	ee07 1a10 	vmov	s14, r1
 8026d54:	bf58      	it	pl
 8026d56:	b21b      	sxthpl	r3, r3
 8026d58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8026d5c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8026d60:	8043      	strh	r3, [r0, #2]
 8026d62:	fe77 7aa5 	vselgt.f32	s15, s15, s11
 8026d66:	eeb4 6ae7 	vcmpe.f32	s12, s15
 8026d6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8026d6e:	bf58      	it	pl
 8026d70:	eef0 7a46 	vmovpl.f32	s15, s12
 8026d74:	eef4 6ae7 	vcmpe.f32	s13, s15
 8026d78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8026d7c:	bf58      	it	pl
 8026d7e:	eef0 7a66 	vmovpl.f32	s15, s13
 8026d82:	fefa 7a67 	vrintp.f32	s15, s15
 8026d86:	eef4 7ac7 	vcmpe.f32	s15, s14
 8026d8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8026d8e:	bfde      	ittt	le
 8026d90:	eefd 7ae7 	vcvtle.s32.f32	s15, s15
 8026d94:	ee17 1a90 	vmovle	r1, s15
 8026d98:	b209      	sxthle	r1, r1
 8026d9a:	1acb      	subs	r3, r1, r3
 8026d9c:	80c3      	strh	r3, [r0, #6]
 8026d9e:	bd10      	pop	{r4, pc}

08026da0 <_ZNK8touchgfx13TextureMapper17invalidateContentEv>:
 8026da0:	b513      	push	{r0, r1, r4, lr}
 8026da2:	f890 3028 	ldrb.w	r3, [r0, #40]	@ 0x28
 8026da6:	4604      	mov	r4, r0
 8026da8:	b143      	cbz	r3, 8026dbc <_ZNK8touchgfx13TextureMapper17invalidateContentEv+0x1c>
 8026daa:	4601      	mov	r1, r0
 8026dac:	4668      	mov	r0, sp
 8026dae:	f7ff ff4c 	bl	8026c4a <_ZNK8touchgfx13TextureMapper15getBoundingRectEv>
 8026db2:	6823      	ldr	r3, [r4, #0]
 8026db4:	4669      	mov	r1, sp
 8026db6:	4620      	mov	r0, r4
 8026db8:	691b      	ldr	r3, [r3, #16]
 8026dba:	4798      	blx	r3
 8026dbc:	b002      	add	sp, #8
 8026dbe:	bd10      	pop	{r4, pc}

08026dc0 <_ZNK8touchgfx13TextureMapper19lookupRenderVariantEv>:
 8026dc0:	4603      	mov	r3, r0
 8026dc2:	3026      	adds	r0, #38	@ 0x26
 8026dc4:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 8026dc8:	b90b      	cbnz	r3, 8026dce <_ZNK8touchgfx13TextureMapper19lookupRenderVariantEv+0xe>
 8026dca:	f7f2 bd89 	b.w	80198e0 <_ZN8touchgfx34lookupNearestNeighborRenderVariantERKNS_6BitmapE>
 8026dce:	f7f2 bd97 	b.w	8019900 <_ZN8touchgfx27lookupBilinearRenderVariantERKNS_6BitmapE>
	...

08026dd4 <_ZNK8touchgfx13TextureMapper8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_>:
 8026dd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026dd8:	4604      	mov	r4, r0
 8026dda:	469b      	mov	fp, r3
 8026ddc:	ed2d 8b04 	vpush	{d8-d9}
 8026de0:	f9b0 c008 	ldrsh.w	ip, [r0, #8]
 8026de4:	b0b3      	sub	sp, #204	@ 0xcc
 8026de6:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 8026dea:	f9b1 6000 	ldrsh.w	r6, [r1]
 8026dee:	8888      	ldrh	r0, [r1, #4]
 8026df0:	9206      	str	r2, [sp, #24]
 8026df2:	2200      	movs	r2, #0
 8026df4:	4430      	add	r0, r6
 8026df6:	f8dd a100 	ldr.w	sl, [sp, #256]	@ 0x100
 8026dfa:	f8dd 9104 	ldr.w	r9, [sp, #260]	@ 0x104
 8026dfe:	b280      	uxth	r0, r0
 8026e00:	f8dd 8108 	ldr.w	r8, [sp, #264]	@ 0x108
 8026e04:	9f43      	ldr	r7, [sp, #268]	@ 0x10c
 8026e06:	fa0f fe80 	sxth.w	lr, r0
 8026e0a:	9211      	str	r2, [sp, #68]	@ 0x44
 8026e0c:	4596      	cmp	lr, r2
 8026e0e:	f340 8129 	ble.w	8027064 <_ZNK8touchgfx13TextureMapper8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x290>
 8026e12:	45b4      	cmp	ip, r6
 8026e14:	f340 8126 	ble.w	8027064 <_ZNK8touchgfx13TextureMapper8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x290>
 8026e18:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 8026e1c:	88ca      	ldrh	r2, [r1, #6]
 8026e1e:	442a      	add	r2, r5
 8026e20:	b292      	uxth	r2, r2
 8026e22:	b211      	sxth	r1, r2
 8026e24:	2900      	cmp	r1, #0
 8026e26:	f340 811d 	ble.w	8027064 <_ZNK8touchgfx13TextureMapper8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x290>
 8026e2a:	42ab      	cmp	r3, r5
 8026e2c:	f340 811a 	ble.w	8027064 <_ZNK8touchgfx13TextureMapper8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x290>
 8026e30:	45f4      	cmp	ip, lr
 8026e32:	ea26 76e6 	bic.w	r6, r6, r6, asr #31
 8026e36:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 8026e3a:	bfb8      	it	lt
 8026e3c:	fa1f f08c 	uxthlt.w	r0, ip
 8026e40:	428b      	cmp	r3, r1
 8026e42:	f8ad 6044 	strh.w	r6, [sp, #68]	@ 0x44
 8026e46:	bfb8      	it	lt
 8026e48:	b29a      	uxthlt	r2, r3
 8026e4a:	1b80      	subs	r0, r0, r6
 8026e4c:	f8ad 5046 	strh.w	r5, [sp, #70]	@ 0x46
 8026e50:	1b52      	subs	r2, r2, r5
 8026e52:	f8ad 0048 	strh.w	r0, [sp, #72]	@ 0x48
 8026e56:	f8ad 204a 	strh.w	r2, [sp, #74]	@ 0x4a
 8026e5a:	ab11      	add	r3, sp, #68	@ 0x44
 8026e5c:	ad13      	add	r5, sp, #76	@ 0x4c
 8026e5e:	6822      	ldr	r2, [r4, #0]
 8026e60:	1d26      	adds	r6, r4, #4
 8026e62:	9307      	str	r3, [sp, #28]
 8026e64:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8026e66:	e893 0003 	ldmia.w	r3, {r0, r1}
 8026e6a:	e885 0003 	stmia.w	r5, {r0, r1}
 8026e6e:	4629      	mov	r1, r5
 8026e70:	4620      	mov	r0, r4
 8026e72:	4790      	blx	r2
 8026e74:	4621      	mov	r1, r4
 8026e76:	a815      	add	r0, sp, #84	@ 0x54
 8026e78:	f7f2 f96a 	bl	8019150 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8026e7c:	a815      	add	r0, sp, #84	@ 0x54
 8026e7e:	f7f0 fe2d 	bl	8017adc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8026e82:	9b07      	ldr	r3, [sp, #28]
 8026e84:	4631      	mov	r1, r6
 8026e86:	4618      	mov	r0, r3
 8026e88:	f7f0 fe6c 	bl	8017b64 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8026e8c:	4628      	mov	r0, r5
 8026e8e:	f104 0526 	add.w	r5, r4, #38	@ 0x26
 8026e92:	f7f0 fe23 	bl	8017adc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8026e96:	4628      	mov	r0, r5
 8026e98:	f7f4 ff06 	bl	801bca8 <_ZNK8touchgfx6Bitmap7getDataEv>
 8026e9c:	9007      	str	r0, [sp, #28]
 8026e9e:	2800      	cmp	r0, #0
 8026ea0:	f000 80db 	beq.w	802705a <_ZNK8touchgfx13TextureMapper8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x286>
 8026ea4:	f8db 2000 	ldr.w	r2, [fp]
 8026ea8:	a90d      	add	r1, sp, #52	@ 0x34
 8026eaa:	a809      	add	r0, sp, #36	@ 0x24
 8026eac:	9209      	str	r2, [sp, #36]	@ 0x24
 8026eae:	f8db 2004 	ldr.w	r2, [fp, #4]
 8026eb2:	920a      	str	r2, [sp, #40]	@ 0x28
 8026eb4:	f8db 2008 	ldr.w	r2, [fp, #8]
 8026eb8:	920b      	str	r2, [sp, #44]	@ 0x2c
 8026eba:	f8db 200c 	ldr.w	r2, [fp, #12]
 8026ebe:	920c      	str	r2, [sp, #48]	@ 0x30
 8026ec0:	f8da 2000 	ldr.w	r2, [sl]
 8026ec4:	920d      	str	r2, [sp, #52]	@ 0x34
 8026ec6:	f8da 2004 	ldr.w	r2, [sl, #4]
 8026eca:	920e      	str	r2, [sp, #56]	@ 0x38
 8026ecc:	f8da 2008 	ldr.w	r2, [sl, #8]
 8026ed0:	920f      	str	r2, [sp, #60]	@ 0x3c
 8026ed2:	f8da 200c 	ldr.w	r2, [sl, #12]
 8026ed6:	9210      	str	r2, [sp, #64]	@ 0x40
 8026ed8:	4632      	mov	r2, r6
 8026eda:	f7f0 fe27 	bl	8017b2c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE>
 8026ede:	4632      	mov	r2, r6
 8026ee0:	a90e      	add	r1, sp, #56	@ 0x38
 8026ee2:	a80a      	add	r0, sp, #40	@ 0x28
 8026ee4:	f7f0 fe22 	bl	8017b2c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE>
 8026ee8:	4632      	mov	r2, r6
 8026eea:	a90f      	add	r1, sp, #60	@ 0x3c
 8026eec:	a80b      	add	r0, sp, #44	@ 0x2c
 8026eee:	f7f0 fe1d 	bl	8017b2c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE>
 8026ef2:	4632      	mov	r2, r6
 8026ef4:	a910      	add	r1, sp, #64	@ 0x40
 8026ef6:	a80c      	add	r0, sp, #48	@ 0x30
 8026ef8:	f7f0 fe18 	bl	8017b2c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE>
 8026efc:	eddd 7a0d 	vldr	s15, [sp, #52]	@ 0x34
 8026f00:	edd7 4a00 	vldr	s9, [r7]
 8026f04:	eef0 6a67 	vmov.f32	s13, s15
 8026f08:	eddd 7a0a 	vldr	s15, [sp, #40]	@ 0x28
 8026f0c:	edd7 5a01 	vldr	s11, [r7, #4]
 8026f10:	eeb0 7a67 	vmov.f32	s14, s15
 8026f14:	eddd 7a0e 	vldr	s15, [sp, #56]	@ 0x38
 8026f18:	eefe 6ace 	vcvt.s32.f32	s13, s13, #4
 8026f1c:	ed98 4a00 	vldr	s8, [r8]
 8026f20:	eeb0 6a67 	vmov.f32	s12, s15
 8026f24:	eddd 7a0b 	vldr	s15, [sp, #44]	@ 0x2c
 8026f28:	eebe 7ace 	vcvt.s32.f32	s14, s14, #4
 8026f2c:	ed98 5a01 	vldr	s10, [r8, #4]
 8026f30:	ed99 9a00 	vldr	s18, [r9]
 8026f34:	eebe 6ace 	vcvt.s32.f32	s12, s12, #4
 8026f38:	ed99 8a01 	vldr	s16, [r9, #4]
 8026f3c:	edd9 8a02 	vldr	s17, [r9, #8]
 8026f40:	f8d9 e00c 	ldr.w	lr, [r9, #12]
 8026f44:	ee16 6a10 	vmov	r6, s12
 8026f48:	eeb0 6a67 	vmov.f32	s12, s15
 8026f4c:	eddd 7a0f 	vldr	s15, [sp, #60]	@ 0x3c
 8026f50:	f8d8 c00c 	ldr.w	ip, [r8, #12]
 8026f54:	eebe 6ace 	vcvt.s32.f32	s12, s12, #4
 8026f58:	edcd 6a1f 	vstr	s13, [sp, #124]	@ 0x7c
 8026f5c:	ed8d 4a21 	vstr	s8, [sp, #132]	@ 0x84
 8026f60:	edcd 4a22 	vstr	s9, [sp, #136]	@ 0x88
 8026f64:	ee16 0a10 	vmov	r0, s12
 8026f68:	eeb0 6a67 	vmov.f32	s12, s15
 8026f6c:	eddd 7a0c 	vldr	s15, [sp, #48]	@ 0x30
 8026f70:	ed8d 7a23 	vstr	s14, [sp, #140]	@ 0x8c
 8026f74:	eebe 6ace 	vcvt.s32.f32	s12, s12, #4
 8026f78:	ed8d 5a26 	vstr	s10, [sp, #152]	@ 0x98
 8026f7c:	edcd 5a27 	vstr	s11, [sp, #156]	@ 0x9c
 8026f80:	f8d7 a008 	ldr.w	sl, [r7, #8]
 8026f84:	ee16 1a10 	vmov	r1, s12
 8026f88:	eeb0 6a67 	vmov.f32	s12, s15
 8026f8c:	eddd 7a10 	vldr	s15, [sp, #64]	@ 0x40
 8026f90:	f8d8 b008 	ldr.w	fp, [r8, #8]
 8026f94:	eebe 6ace 	vcvt.s32.f32	s12, s12, #4
 8026f98:	68ff      	ldr	r7, [r7, #12]
 8026f9a:	9624      	str	r6, [sp, #144]	@ 0x90
 8026f9c:	eefe 7ace 	vcvt.s32.f32	s15, s15, #4
 8026fa0:	ed8d 9a20 	vstr	s18, [sp, #128]	@ 0x80
 8026fa4:	ee16 2a10 	vmov	r2, s12
 8026fa8:	ed9d 6a09 	vldr	s12, [sp, #36]	@ 0x24
 8026fac:	ed8d 8a25 	vstr	s16, [sp, #148]	@ 0x94
 8026fb0:	eebe 6ace 	vcvt.s32.f32	s12, s12, #4
 8026fb4:	e9cd 0128 	strd	r0, r1, [sp, #160]	@ 0xa0
 8026fb8:	ed8d 6a1e 	vstr	s12, [sp, #120]	@ 0x78
 8026fbc:	4628      	mov	r0, r5
 8026fbe:	edcd 8a2a 	vstr	s17, [sp, #168]	@ 0xa8
 8026fc2:	9b06      	ldr	r3, [sp, #24]
 8026fc4:	922d      	str	r2, [sp, #180]	@ 0xb4
 8026fc6:	4a29      	ldr	r2, [pc, #164]	@ (802706c <_ZNK8touchgfx13TextureMapper8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x298>)
 8026fc8:	9317      	str	r3, [sp, #92]	@ 0x5c
 8026fca:	8812      	ldrh	r2, [r2, #0]
 8026fcc:	9b07      	ldr	r3, [sp, #28]
 8026fce:	edcd 7a2e 	vstr	s15, [sp, #184]	@ 0xb8
 8026fd2:	f8cd e0bc 	str.w	lr, [sp, #188]	@ 0xbc
 8026fd6:	f8cd c0c0 	str.w	ip, [sp, #192]	@ 0xc0
 8026fda:	9218      	str	r2, [sp, #96]	@ 0x60
 8026fdc:	9319      	str	r3, [sp, #100]	@ 0x64
 8026fde:	f8cd b0ac 	str.w	fp, [sp, #172]	@ 0xac
 8026fe2:	f8cd a0b0 	str.w	sl, [sp, #176]	@ 0xb0
 8026fe6:	9731      	str	r7, [sp, #196]	@ 0xc4
 8026fe8:	f7f4 fe8e 	bl	801bd08 <_ZNK8touchgfx6Bitmap12getExtraDataEv>
 8026fec:	901a      	str	r0, [sp, #104]	@ 0x68
 8026fee:	4628      	mov	r0, r5
 8026ff0:	f7f4 fd68 	bl	801bac4 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8026ff4:	901b      	str	r0, [sp, #108]	@ 0x6c
 8026ff6:	4628      	mov	r0, r5
 8026ff8:	f7f4 fd98 	bl	801bb2c <_ZNK8touchgfx6Bitmap9getHeightEv>
 8026ffc:	901c      	str	r0, [sp, #112]	@ 0x70
 8026ffe:	4628      	mov	r0, r5
 8027000:	f7f4 fd60 	bl	801bac4 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8027004:	eeb4 9a48 	vcmp.f32	s18, s16
 8027008:	901d      	str	r0, [sp, #116]	@ 0x74
 802700a:	f8b4 608c 	ldrh.w	r6, [r4, #140]	@ 0x8c
 802700e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8027012:	d107      	bne.n	8027024 <_ZNK8touchgfx13TextureMapper8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x250>
 8027014:	eeb4 8a68 	vcmp.f32	s16, s17
 8027018:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 802701c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8027020:	bf08      	it	eq
 8027022:	461e      	moveq	r6, r3
 8027024:	4b12      	ldr	r3, [pc, #72]	@ (8027070 <_ZNK8touchgfx13TextureMapper8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x29c>)
 8027026:	681b      	ldr	r3, [r3, #0]
 8027028:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 802702c:	b10a      	cbz	r2, 8027032 <_ZNK8touchgfx13TextureMapper8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x25e>
 802702e:	6cdd      	ldr	r5, [r3, #76]	@ 0x4c
 8027030:	b905      	cbnz	r5, 8027034 <_ZNK8touchgfx13TextureMapper8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x260>
 8027032:	689d      	ldr	r5, [r3, #8]
 8027034:	682b      	ldr	r3, [r5, #0]
 8027036:	4620      	mov	r0, r4
 8027038:	6c1f      	ldr	r7, [r3, #64]	@ 0x40
 802703a:	f7ff fec1 	bl	8026dc0 <_ZNK8touchgfx13TextureMapper19lookupRenderVariantEv>
 802703e:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 8027042:	aa1e      	add	r2, sp, #120	@ 0x78
 8027044:	9604      	str	r6, [sp, #16]
 8027046:	a917      	add	r1, sp, #92	@ 0x5c
 8027048:	e9cd 0302 	strd	r0, r3, [sp, #8]
 802704c:	ab13      	add	r3, sp, #76	@ 0x4c
 802704e:	4628      	mov	r0, r5
 8027050:	9301      	str	r3, [sp, #4]
 8027052:	ab15      	add	r3, sp, #84	@ 0x54
 8027054:	9300      	str	r3, [sp, #0]
 8027056:	ab19      	add	r3, sp, #100	@ 0x64
 8027058:	47b8      	blx	r7
 802705a:	b033      	add	sp, #204	@ 0xcc
 802705c:	ecbd 8b04 	vpop	{d8-d9}
 8027060:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8027064:	2300      	movs	r3, #0
 8027066:	9312      	str	r3, [sp, #72]	@ 0x48
 8027068:	e6f7      	b.n	8026e5a <_ZNK8touchgfx13TextureMapper8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x86>
 802706a:	bf00      	nop
 802706c:	24028e1a 	.word	0x24028e1a
 8027070:	24028e20 	.word	0x24028e20

08027074 <_ZNK8touchgfx13TextureMapper4drawERKNS_4RectE>:
 8027074:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8027078:	ed2d 8b02 	vpush	{d8}
 802707c:	f890 3028 	ldrb.w	r3, [r0, #40]	@ 0x28
 8027080:	b098      	sub	sp, #96	@ 0x60
 8027082:	4604      	mov	r4, r0
 8027084:	4688      	mov	r8, r1
 8027086:	2b00      	cmp	r3, #0
 8027088:	d077      	beq.n	802717a <_ZNK8touchgfx13TextureMapper4drawERKNS_4RectE+0x106>
 802708a:	f100 0526 	add.w	r5, r0, #38	@ 0x26
 802708e:	4628      	mov	r0, r5
 8027090:	f7f4 fd18 	bl	801bac4 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8027094:	ee07 0a90 	vmov	s15, r0
 8027098:	4628      	mov	r0, r5
 802709a:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 802709e:	f7f4 fd45 	bl	801bb2c <_ZNK8touchgfx6Bitmap9getHeightEv>
 80270a2:	4b4e      	ldr	r3, [pc, #312]	@ (80271dc <_ZNK8touchgfx13TextureMapper4drawERKNS_4RectE+0x168>)
 80270a4:	ee07 0a90 	vmov	s15, r0
 80270a8:	781b      	ldrb	r3, [r3, #0]
 80270aa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80270ae:	eeff 7a00 	vmov.f32	s15, #240	@ 0xbf800000 -1.0
 80270b2:	2b01      	cmp	r3, #1
 80270b4:	d066      	beq.n	8027184 <_ZNK8touchgfx13TextureMapper4drawERKNS_4RectE+0x110>
 80270b6:	eeb0 6a47 	vmov.f32	s12, s14
 80270ba:	ee17 3a10 	vmov	r3, s14
 80270be:	eeb0 4a48 	vmov.f32	s8, s16
 80270c2:	eeb0 7a48 	vmov.f32	s14, s16
 80270c6:	eef0 4a67 	vmov.f32	s9, s15
 80270ca:	eeb0 8a67 	vmov.f32	s16, s15
 80270ce:	ed94 5a17 	vldr	s10, [r4, #92]	@ 0x5c
 80270d2:	edd4 5a18 	vldr	s11, [r4, #96]	@ 0x60
 80270d6:	ed94 3a1b 	vldr	s6, [r4, #108]	@ 0x6c
 80270da:	edd4 2a1d 	vldr	s5, [r4, #116]	@ 0x74
 80270de:	ee73 1a65 	vsub.f32	s3, s6, s11
 80270e2:	ed94 2a1a 	vldr	s4, [r4, #104]	@ 0x68
 80270e6:	ee72 6ac5 	vsub.f32	s13, s5, s10
 80270ea:	edd4 3a1e 	vldr	s7, [r4, #120]	@ 0x78
 80270ee:	ee32 1a45 	vsub.f32	s2, s4, s10
 80270f2:	6f25      	ldr	r5, [r4, #112]	@ 0x70
 80270f4:	6e66      	ldr	r6, [r4, #100]	@ 0x64
 80270f6:	ee66 6ae1 	vnmul.f32	s13, s13, s3
 80270fa:	6fe2      	ldr	r2, [r4, #124]	@ 0x7c
 80270fc:	ee73 1ae5 	vsub.f32	s3, s7, s11
 8027100:	f8d4 c080 	ldr.w	ip, [r4, #128]	@ 0x80
 8027104:	f8d4 7084 	ldr.w	r7, [r4, #132]	@ 0x84
 8027108:	f8d4 0088 	ldr.w	r0, [r4, #136]	@ 0x88
 802710c:	eee1 6a21 	vfma.f32	s13, s2, s3
 8027110:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 8027114:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8027118:	dd3d      	ble.n	8027196 <_ZNK8touchgfx13TextureMapper4drawERKNS_4RectE+0x122>
 802711a:	ed8d 5a04 	vstr	s10, [sp, #16]
 802711e:	ed8d 2a05 	vstr	s4, [sp, #20]
 8027122:	edcd 2a06 	vstr	s5, [sp, #24]
 8027126:	f8cd c01c 	str.w	ip, [sp, #28]
 802712a:	edcd 5a08 	vstr	s11, [sp, #32]
 802712e:	ed8d 3a09 	vstr	s6, [sp, #36]	@ 0x24
 8027132:	edcd 3a0a 	vstr	s7, [sp, #40]	@ 0x28
 8027136:	970b      	str	r7, [sp, #44]	@ 0x2c
 8027138:	960c      	str	r6, [sp, #48]	@ 0x30
 802713a:	950d      	str	r5, [sp, #52]	@ 0x34
 802713c:	920e      	str	r2, [sp, #56]	@ 0x38
 802713e:	900f      	str	r0, [sp, #60]	@ 0x3c
 8027140:	edcd 7a10 	vstr	s15, [sp, #64]	@ 0x40
 8027144:	ed8d 4a11 	vstr	s8, [sp, #68]	@ 0x44
 8027148:	ed8d 7a12 	vstr	s14, [sp, #72]	@ 0x48
 802714c:	edcd 4a13 	vstr	s9, [sp, #76]	@ 0x4c
 8027150:	ed8d 8a14 	vstr	s16, [sp, #80]	@ 0x50
 8027154:	edcd 7a15 	vstr	s15, [sp, #84]	@ 0x54
 8027158:	9316      	str	r3, [sp, #88]	@ 0x58
 802715a:	ed8d 6a17 	vstr	s12, [sp, #92]	@ 0x5c
 802715e:	ab14      	add	r3, sp, #80	@ 0x50
 8027160:	2200      	movs	r2, #0
 8027162:	4641      	mov	r1, r8
 8027164:	4620      	mov	r0, r4
 8027166:	9303      	str	r3, [sp, #12]
 8027168:	ab10      	add	r3, sp, #64	@ 0x40
 802716a:	9302      	str	r3, [sp, #8]
 802716c:	ab0c      	add	r3, sp, #48	@ 0x30
 802716e:	9301      	str	r3, [sp, #4]
 8027170:	ab08      	add	r3, sp, #32
 8027172:	9300      	str	r3, [sp, #0]
 8027174:	ab04      	add	r3, sp, #16
 8027176:	f7ff fe2d 	bl	8026dd4 <_ZNK8touchgfx13TextureMapper8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_>
 802717a:	b018      	add	sp, #96	@ 0x60
 802717c:	ecbd 8b02 	vpop	{d8}
 8027180:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8027184:	eeb0 6a48 	vmov.f32	s12, s16
 8027188:	ee17 3a90 	vmov	r3, s15
 802718c:	eef0 4a47 	vmov.f32	s9, s14
 8027190:	eeb0 4a67 	vmov.f32	s8, s15
 8027194:	e79b      	b.n	80270ce <_ZNK8touchgfx13TextureMapper4drawERKNS_4RectE+0x5a>
 8027196:	ed8d 5a05 	vstr	s10, [sp, #20]
 802719a:	ed8d 2a04 	vstr	s4, [sp, #16]
 802719e:	f8cd c018 	str.w	ip, [sp, #24]
 80271a2:	edcd 2a07 	vstr	s5, [sp, #28]
 80271a6:	edcd 5a09 	vstr	s11, [sp, #36]	@ 0x24
 80271aa:	ed8d 3a08 	vstr	s6, [sp, #32]
 80271ae:	970a      	str	r7, [sp, #40]	@ 0x28
 80271b0:	edcd 3a0b 	vstr	s7, [sp, #44]	@ 0x2c
 80271b4:	960d      	str	r6, [sp, #52]	@ 0x34
 80271b6:	950c      	str	r5, [sp, #48]	@ 0x30
 80271b8:	900e      	str	r0, [sp, #56]	@ 0x38
 80271ba:	920f      	str	r2, [sp, #60]	@ 0x3c
 80271bc:	edcd 7a11 	vstr	s15, [sp, #68]	@ 0x44
 80271c0:	ed8d 4a10 	vstr	s8, [sp, #64]	@ 0x40
 80271c4:	edcd 4a12 	vstr	s9, [sp, #72]	@ 0x48
 80271c8:	ed8d 7a13 	vstr	s14, [sp, #76]	@ 0x4c
 80271cc:	ed8d 8a15 	vstr	s16, [sp, #84]	@ 0x54
 80271d0:	edcd 7a14 	vstr	s15, [sp, #80]	@ 0x50
 80271d4:	ed8d 6a16 	vstr	s12, [sp, #88]	@ 0x58
 80271d8:	9317      	str	r3, [sp, #92]	@ 0x5c
 80271da:	e7c0      	b.n	802715e <_ZNK8touchgfx13TextureMapper4drawERKNS_4RectE+0xea>
 80271dc:	24028e18 	.word	0x24028e18

080271e0 <_ZN8touchgfxmlERKNS_9Matrix4x4ERKNS_6Point4E>:
 80271e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80271e2:	2300      	movs	r3, #0
 80271e4:	b08d      	sub	sp, #52	@ 0x34
 80271e6:	f100 0640 	add.w	r6, r0, #64	@ 0x40
 80271ea:	f101 0710 	add.w	r7, r1, #16
 80271ee:	9304      	str	r3, [sp, #16]
 80271f0:	aa04      	add	r2, sp, #16
 80271f2:	9305      	str	r3, [sp, #20]
 80271f4:	9306      	str	r3, [sp, #24]
 80271f6:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 80271fa:	9307      	str	r3, [sp, #28]
 80271fc:	4613      	mov	r3, r2
 80271fe:	460c      	mov	r4, r1
 8027200:	4605      	mov	r5, r0
 8027202:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 802723c <_ZN8touchgfxmlERKNS_9Matrix4x4ERKNS_6Point4E+0x5c>
 8027206:	ecb4 7a01 	vldmia	r4!, {s14}
 802720a:	ecf5 6a01 	vldmia	r5!, {s13}
 802720e:	42bc      	cmp	r4, r7
 8027210:	eee6 7a87 	vfma.f32	s15, s13, s14
 8027214:	d1f7      	bne.n	8027206 <_ZN8touchgfxmlERKNS_9Matrix4x4ERKNS_6Point4E+0x26>
 8027216:	3010      	adds	r0, #16
 8027218:	ece2 7a01 	vstmia	r2!, {s15}
 802721c:	42b0      	cmp	r0, r6
 802721e:	d1ee      	bne.n	80271fe <_ZN8touchgfxmlERKNS_9Matrix4x4ERKNS_6Point4E+0x1e>
 8027220:	ac0c      	add	r4, sp, #48	@ 0x30
 8027222:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8027224:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
 8027228:	ed9d 0a08 	vldr	s0, [sp, #32]
 802722c:	eddd 0a09 	vldr	s1, [sp, #36]	@ 0x24
 8027230:	ed9d 1a0a 	vldr	s2, [sp, #40]	@ 0x28
 8027234:	eddd 1a0b 	vldr	s3, [sp, #44]	@ 0x2c
 8027238:	b00d      	add	sp, #52	@ 0x34
 802723a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802723c:	00000000 	.word	0x00000000

08027240 <_ZN8touchgfx9Matrix4x4C1Ev>:
 8027240:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8027244:	2300      	movs	r3, #0
 8027246:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 802726c <_ZN8touchgfx9Matrix4x4C1Ev+0x2c>
 802724a:	eb00 1103 	add.w	r1, r0, r3, lsl #4
 802724e:	2200      	movs	r2, #0
 8027250:	4293      	cmp	r3, r2
 8027252:	f102 0201 	add.w	r2, r2, #1
 8027256:	fe47 6a87 	vseleq.f32	s13, s15, s14
 802725a:	2a04      	cmp	r2, #4
 802725c:	ece1 6a01 	vstmia	r1!, {s13}
 8027260:	d1f6      	bne.n	8027250 <_ZN8touchgfx9Matrix4x4C1Ev+0x10>
 8027262:	3301      	adds	r3, #1
 8027264:	2b04      	cmp	r3, #4
 8027266:	d1f0      	bne.n	802724a <_ZN8touchgfx9Matrix4x4C1Ev+0xa>
 8027268:	4770      	bx	lr
 802726a:	bf00      	nop
 802726c:	00000000 	.word	0x00000000

08027270 <_ZN8touchgfxmlERKNS_9Matrix4x4ES2_>:
 8027270:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8027274:	460c      	mov	r4, r1
 8027276:	4605      	mov	r5, r0
 8027278:	4690      	mov	r8, r2
 802727a:	f7ff ffe1 	bl	8027240 <_ZN8touchgfx9Matrix4x4C1Ev>
 802727e:	4628      	mov	r0, r5
 8027280:	4621      	mov	r1, r4
 8027282:	f104 0c40 	add.w	ip, r4, #64	@ 0x40
 8027286:	2300      	movs	r3, #0
 8027288:	eb08 0603 	add.w	r6, r8, r3
 802728c:	460f      	mov	r7, r1
 802728e:	2400      	movs	r4, #0
 8027290:	eddf 7a0c 	vldr	s15, [pc, #48]	@ 80272c4 <_ZN8touchgfxmlERKNS_9Matrix4x4ES2_+0x54>
 8027294:	4632      	mov	r2, r6
 8027296:	3401      	adds	r4, #1
 8027298:	ecf7 6a01 	vldmia	r7!, {s13}
 802729c:	3610      	adds	r6, #16
 802729e:	ed92 7a00 	vldr	s14, [r2]
 80272a2:	2c04      	cmp	r4, #4
 80272a4:	eee6 7a87 	vfma.f32	s15, s13, s14
 80272a8:	d1f4      	bne.n	8027294 <_ZN8touchgfxmlERKNS_9Matrix4x4ES2_+0x24>
 80272aa:	18c2      	adds	r2, r0, r3
 80272ac:	3304      	adds	r3, #4
 80272ae:	2b10      	cmp	r3, #16
 80272b0:	edc2 7a00 	vstr	s15, [r2]
 80272b4:	d1e8      	bne.n	8027288 <_ZN8touchgfxmlERKNS_9Matrix4x4ES2_+0x18>
 80272b6:	3110      	adds	r1, #16
 80272b8:	3010      	adds	r0, #16
 80272ba:	4561      	cmp	r1, ip
 80272bc:	d1e3      	bne.n	8027286 <_ZN8touchgfxmlERKNS_9Matrix4x4ES2_+0x16>
 80272be:	4628      	mov	r0, r5
 80272c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80272c4:	00000000 	.word	0x00000000

080272c8 <_ZN8touchgfx9Matrix4x415setViewDistanceEf>:
 80272c8:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 80272cc:	f100 0320 	add.w	r3, r0, #32
 80272d0:	3030      	adds	r0, #48	@ 0x30
 80272d2:	ee87 0a80 	vdiv.f32	s0, s15, s0
 80272d6:	ecf3 7a01 	vldmia	r3!, {s15}
 80272da:	4283      	cmp	r3, r0
 80272dc:	ee60 7a27 	vmul.f32	s15, s0, s15
 80272e0:	edc3 7a03 	vstr	s15, [r3, #12]
 80272e4:	d1f7      	bne.n	80272d6 <_ZN8touchgfx9Matrix4x415setViewDistanceEf+0xe>
 80272e6:	4770      	bx	lr

080272e8 <_ZN8touchgfx9Matrix4x420concatenateXRotationEf>:
 80272e8:	b510      	push	{r4, lr}
 80272ea:	ed2d 8b02 	vpush	{d8}
 80272ee:	eef0 8a40 	vmov.f32	s17, s0
 80272f2:	4604      	mov	r4, r0
 80272f4:	f000 f940 	bl	8027578 <sinf>
 80272f8:	eeb0 8a40 	vmov.f32	s16, s0
 80272fc:	eeb0 0a68 	vmov.f32	s0, s17
 8027300:	f000 f9fe 	bl	8027700 <cosf>
 8027304:	eeb1 6a48 	vneg.f32	s12, s16
 8027308:	f104 0310 	add.w	r3, r4, #16
 802730c:	f104 0220 	add.w	r2, r4, #32
 8027310:	edd3 7a04 	vldr	s15, [r3, #16]
 8027314:	edd3 6a00 	vldr	s13, [r3]
 8027318:	ee26 7a27 	vmul.f32	s14, s12, s15
 802731c:	ee67 7a80 	vmul.f32	s15, s15, s0
 8027320:	eea6 7a80 	vfma.f32	s14, s13, s0
 8027324:	eee6 7a88 	vfma.f32	s15, s13, s16
 8027328:	eca3 7a01 	vstmia	r3!, {s14}
 802732c:	429a      	cmp	r2, r3
 802732e:	edc3 7a03 	vstr	s15, [r3, #12]
 8027332:	d1ed      	bne.n	8027310 <_ZN8touchgfx9Matrix4x420concatenateXRotationEf+0x28>
 8027334:	4620      	mov	r0, r4
 8027336:	ecbd 8b02 	vpop	{d8}
 802733a:	bd10      	pop	{r4, pc}

0802733c <_ZN8touchgfx9Matrix4x420concatenateYRotationEf>:
 802733c:	b510      	push	{r4, lr}
 802733e:	ed2d 8b02 	vpush	{d8}
 8027342:	eef0 8a40 	vmov.f32	s17, s0
 8027346:	4604      	mov	r4, r0
 8027348:	f000 f916 	bl	8027578 <sinf>
 802734c:	eeb0 8a40 	vmov.f32	s16, s0
 8027350:	eeb0 0a68 	vmov.f32	s0, s17
 8027354:	f000 f9d4 	bl	8027700 <cosf>
 8027358:	eeb1 6a48 	vneg.f32	s12, s16
 802735c:	4623      	mov	r3, r4
 802735e:	f104 0210 	add.w	r2, r4, #16
 8027362:	edd3 7a08 	vldr	s15, [r3, #32]
 8027366:	edd3 6a00 	vldr	s13, [r3]
 802736a:	ee27 7a88 	vmul.f32	s14, s15, s16
 802736e:	ee67 7a80 	vmul.f32	s15, s15, s0
 8027372:	eea6 7a80 	vfma.f32	s14, s13, s0
 8027376:	eee6 7a26 	vfma.f32	s15, s12, s13
 802737a:	eca3 7a01 	vstmia	r3!, {s14}
 802737e:	429a      	cmp	r2, r3
 8027380:	edc3 7a07 	vstr	s15, [r3, #28]
 8027384:	d1ed      	bne.n	8027362 <_ZN8touchgfx9Matrix4x420concatenateYRotationEf+0x26>
 8027386:	4620      	mov	r0, r4
 8027388:	ecbd 8b02 	vpop	{d8}
 802738c:	bd10      	pop	{r4, pc}

0802738e <_ZN8touchgfx9Matrix4x420concatenateZRotationEf>:
 802738e:	b510      	push	{r4, lr}
 8027390:	ed2d 8b02 	vpush	{d8}
 8027394:	eef0 8a40 	vmov.f32	s17, s0
 8027398:	4604      	mov	r4, r0
 802739a:	f000 f8ed 	bl	8027578 <sinf>
 802739e:	eeb0 8a40 	vmov.f32	s16, s0
 80273a2:	eeb0 0a68 	vmov.f32	s0, s17
 80273a6:	f000 f9ab 	bl	8027700 <cosf>
 80273aa:	eeb1 6a48 	vneg.f32	s12, s16
 80273ae:	4623      	mov	r3, r4
 80273b0:	f104 0210 	add.w	r2, r4, #16
 80273b4:	edd3 7a04 	vldr	s15, [r3, #16]
 80273b8:	edd3 6a00 	vldr	s13, [r3]
 80273bc:	ee26 7a27 	vmul.f32	s14, s12, s15
 80273c0:	ee67 7a80 	vmul.f32	s15, s15, s0
 80273c4:	eea6 7a80 	vfma.f32	s14, s13, s0
 80273c8:	eee6 7a88 	vfma.f32	s15, s13, s16
 80273cc:	eca3 7a01 	vstmia	r3!, {s14}
 80273d0:	429a      	cmp	r2, r3
 80273d2:	edc3 7a03 	vstr	s15, [r3, #12]
 80273d6:	d1ed      	bne.n	80273b4 <_ZN8touchgfx9Matrix4x420concatenateZRotationEf+0x26>
 80273d8:	4620      	mov	r0, r4
 80273da:	ecbd 8b02 	vpop	{d8}
 80273de:	bd10      	pop	{r4, pc}

080273e0 <_ZN8touchgfx9Matrix4x423concatenateXTranslationEf>:
 80273e0:	4603      	mov	r3, r0
 80273e2:	f100 0210 	add.w	r2, r0, #16
 80273e6:	ed93 7a0c 	vldr	s14, [r3, #48]	@ 0x30
 80273ea:	edd3 7a00 	vldr	s15, [r3]
 80273ee:	eee7 7a00 	vfma.f32	s15, s14, s0
 80273f2:	ece3 7a01 	vstmia	r3!, {s15}
 80273f6:	4293      	cmp	r3, r2
 80273f8:	d1f5      	bne.n	80273e6 <_ZN8touchgfx9Matrix4x423concatenateXTranslationEf+0x6>
 80273fa:	4770      	bx	lr

080273fc <_ZN8touchgfx9Matrix4x423concatenateYTranslationEf>:
 80273fc:	f100 0310 	add.w	r3, r0, #16
 8027400:	f100 0220 	add.w	r2, r0, #32
 8027404:	ed93 7a08 	vldr	s14, [r3, #32]
 8027408:	edd3 7a00 	vldr	s15, [r3]
 802740c:	eee7 7a00 	vfma.f32	s15, s14, s0
 8027410:	ece3 7a01 	vstmia	r3!, {s15}
 8027414:	4293      	cmp	r3, r2
 8027416:	d1f5      	bne.n	8027404 <_ZN8touchgfx9Matrix4x423concatenateYTranslationEf+0x8>
 8027418:	4770      	bx	lr

0802741a <_ZN8touchgfx9Matrix4x423concatenateZTranslationEf>:
 802741a:	f100 0320 	add.w	r3, r0, #32
 802741e:	f100 0230 	add.w	r2, r0, #48	@ 0x30
 8027422:	ed93 7a04 	vldr	s14, [r3, #16]
 8027426:	edd3 7a00 	vldr	s15, [r3]
 802742a:	eee7 7a00 	vfma.f32	s15, s14, s0
 802742e:	ece3 7a01 	vstmia	r3!, {s15}
 8027432:	4293      	cmp	r3, r2
 8027434:	d1f5      	bne.n	8027422 <_ZN8touchgfx9Matrix4x423concatenateZTranslationEf+0x8>
 8027436:	4770      	bx	lr

08027438 <_ZN8touchgfx9Matrix4x417concatenateXScaleEf>:
 8027438:	4603      	mov	r3, r0
 802743a:	f100 0210 	add.w	r2, r0, #16
 802743e:	edd3 7a00 	vldr	s15, [r3]
 8027442:	ee67 7a80 	vmul.f32	s15, s15, s0
 8027446:	ece3 7a01 	vstmia	r3!, {s15}
 802744a:	4293      	cmp	r3, r2
 802744c:	d1f7      	bne.n	802743e <_ZN8touchgfx9Matrix4x417concatenateXScaleEf+0x6>
 802744e:	4770      	bx	lr

08027450 <_ZN8touchgfx9Matrix4x417concatenateYScaleEf>:
 8027450:	f100 0310 	add.w	r3, r0, #16
 8027454:	f100 0220 	add.w	r2, r0, #32
 8027458:	edd3 7a00 	vldr	s15, [r3]
 802745c:	ee67 7a80 	vmul.f32	s15, s15, s0
 8027460:	ece3 7a01 	vstmia	r3!, {s15}
 8027464:	4293      	cmp	r3, r2
 8027466:	d1f7      	bne.n	8027458 <_ZN8touchgfx9Matrix4x417concatenateYScaleEf+0x8>
 8027468:	4770      	bx	lr

0802746a <_ZN8touchgfx9Matrix4x417concatenateZScaleEf>:
 802746a:	f100 0320 	add.w	r3, r0, #32
 802746e:	f100 0230 	add.w	r2, r0, #48	@ 0x30
 8027472:	edd3 7a00 	vldr	s15, [r3]
 8027476:	ee67 7a80 	vmul.f32	s15, s15, s0
 802747a:	ece3 7a01 	vstmia	r3!, {s15}
 802747e:	4293      	cmp	r3, r2
 8027480:	d1f7      	bne.n	8027472 <_ZN8touchgfx9Matrix4x417concatenateZScaleEf+0x8>
 8027482:	4770      	bx	lr

08027484 <__aeabi_atexit>:
 8027484:	460b      	mov	r3, r1
 8027486:	4601      	mov	r1, r0
 8027488:	4618      	mov	r0, r3
 802748a:	f000 bc5b 	b.w	8027d44 <__cxa_atexit>

0802748e <_ZdlPvj>:
 802748e:	f000 b812 	b.w	80274b6 <_ZdlPv>

08027492 <__cxa_guard_acquire>:
 8027492:	6802      	ldr	r2, [r0, #0]
 8027494:	07d2      	lsls	r2, r2, #31
 8027496:	4603      	mov	r3, r0
 8027498:	d405      	bmi.n	80274a6 <__cxa_guard_acquire+0x14>
 802749a:	7842      	ldrb	r2, [r0, #1]
 802749c:	b102      	cbz	r2, 80274a0 <__cxa_guard_acquire+0xe>
 802749e:	deff      	udf	#255	@ 0xff
 80274a0:	2001      	movs	r0, #1
 80274a2:	7058      	strb	r0, [r3, #1]
 80274a4:	4770      	bx	lr
 80274a6:	2000      	movs	r0, #0
 80274a8:	4770      	bx	lr

080274aa <__cxa_guard_release>:
 80274aa:	2301      	movs	r3, #1
 80274ac:	6003      	str	r3, [r0, #0]
 80274ae:	4770      	bx	lr

080274b0 <__cxa_pure_virtual>:
 80274b0:	b508      	push	{r3, lr}
 80274b2:	f000 f80f 	bl	80274d4 <_ZSt9terminatev>

080274b6 <_ZdlPv>:
 80274b6:	f000 bb8f 	b.w	8027bd8 <free>

080274ba <_ZN10__cxxabiv111__terminateEPFvvE>:
 80274ba:	b508      	push	{r3, lr}
 80274bc:	4780      	blx	r0
 80274be:	f000 fb58 	bl	8027b72 <abort>
	...

080274c4 <_ZSt13get_terminatev>:
 80274c4:	4b02      	ldr	r3, [pc, #8]	@ (80274d0 <_ZSt13get_terminatev+0xc>)
 80274c6:	6818      	ldr	r0, [r3, #0]
 80274c8:	f3bf 8f5b 	dmb	ish
 80274cc:	4770      	bx	lr
 80274ce:	bf00      	nop
 80274d0:	240000d8 	.word	0x240000d8

080274d4 <_ZSt9terminatev>:
 80274d4:	b508      	push	{r3, lr}
 80274d6:	f7ff fff5 	bl	80274c4 <_ZSt13get_terminatev>
 80274da:	f7ff ffee 	bl	80274ba <_ZN10__cxxabiv111__terminateEPFvvE>

080274de <atan2f>:
 80274de:	f000 b9cf 	b.w	8027880 <__ieee754_atan2f>
	...

080274e4 <sqrtf>:
 80274e4:	b508      	push	{r3, lr}
 80274e6:	ed2d 8b02 	vpush	{d8}
 80274ea:	eeb0 8a40 	vmov.f32	s16, s0
 80274ee:	f000 f9c4 	bl	802787a <__ieee754_sqrtf>
 80274f2:	eeb4 8a48 	vcmp.f32	s16, s16
 80274f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80274fa:	d60c      	bvs.n	8027516 <sqrtf+0x32>
 80274fc:	eddf 8a07 	vldr	s17, [pc, #28]	@ 802751c <sqrtf+0x38>
 8027500:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8027504:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8027508:	d505      	bpl.n	8027516 <sqrtf+0x32>
 802750a:	f000 fe89 	bl	8028220 <__errno>
 802750e:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8027512:	2321      	movs	r3, #33	@ 0x21
 8027514:	6003      	str	r3, [r0, #0]
 8027516:	ecbd 8b02 	vpop	{d8}
 802751a:	bd08      	pop	{r3, pc}
 802751c:	00000000 	.word	0x00000000

08027520 <sinf_poly>:
 8027520:	07cb      	lsls	r3, r1, #31
 8027522:	d412      	bmi.n	802754a <sinf_poly+0x2a>
 8027524:	ee21 5b00 	vmul.f64	d5, d1, d0
 8027528:	ed90 6b1a 	vldr	d6, [r0, #104]	@ 0x68
 802752c:	ed90 7b18 	vldr	d7, [r0, #96]	@ 0x60
 8027530:	eea6 7b01 	vfma.f64	d7, d6, d1
 8027534:	ed90 6b16 	vldr	d6, [r0, #88]	@ 0x58
 8027538:	ee21 1b05 	vmul.f64	d1, d1, d5
 802753c:	eea6 0b05 	vfma.f64	d0, d6, d5
 8027540:	eea7 0b01 	vfma.f64	d0, d7, d1
 8027544:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8027548:	4770      	bx	lr
 802754a:	ed90 6b14 	vldr	d6, [r0, #80]	@ 0x50
 802754e:	ee21 5b01 	vmul.f64	d5, d1, d1
 8027552:	ed90 7b12 	vldr	d7, [r0, #72]	@ 0x48
 8027556:	ed90 0b0c 	vldr	d0, [r0, #48]	@ 0x30
 802755a:	eea1 7b06 	vfma.f64	d7, d1, d6
 802755e:	ed90 6b0e 	vldr	d6, [r0, #56]	@ 0x38
 8027562:	eea1 0b06 	vfma.f64	d0, d1, d6
 8027566:	ed90 6b10 	vldr	d6, [r0, #64]	@ 0x40
 802756a:	ee21 1b05 	vmul.f64	d1, d1, d5
 802756e:	eea5 0b06 	vfma.f64	d0, d5, d6
 8027572:	e7e5      	b.n	8027540 <sinf_poly+0x20>
 8027574:	0000      	movs	r0, r0
	...

08027578 <sinf>:
 8027578:	b537      	push	{r0, r1, r2, r4, r5, lr}
 802757a:	ee10 4a10 	vmov	r4, s0
 802757e:	f3c4 530a 	ubfx	r3, r4, #20, #11
 8027582:	f5b3 7f7d 	cmp.w	r3, #1012	@ 0x3f4
 8027586:	eeb7 6ac0 	vcvt.f64.f32	d6, s0
 802758a:	eef0 7a40 	vmov.f32	s15, s0
 802758e:	ea4f 5214 	mov.w	r2, r4, lsr #20
 8027592:	d218      	bcs.n	80275c6 <sinf+0x4e>
 8027594:	ee26 1b06 	vmul.f64	d1, d6, d6
 8027598:	f5b3 7f66 	cmp.w	r3, #920	@ 0x398
 802759c:	d20a      	bcs.n	80275b4 <sinf+0x3c>
 802759e:	f412 6fff 	tst.w	r2, #2040	@ 0x7f8
 80275a2:	d103      	bne.n	80275ac <sinf+0x34>
 80275a4:	eeb7 1bc1 	vcvt.f32.f64	s2, d1
 80275a8:	ed8d 1a01 	vstr	s2, [sp, #4]
 80275ac:	eeb0 0a67 	vmov.f32	s0, s15
 80275b0:	b003      	add	sp, #12
 80275b2:	bd30      	pop	{r4, r5, pc}
 80275b4:	483a      	ldr	r0, [pc, #232]	@ (80276a0 <sinf+0x128>)
 80275b6:	eeb0 0b46 	vmov.f64	d0, d6
 80275ba:	2100      	movs	r1, #0
 80275bc:	b003      	add	sp, #12
 80275be:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80275c2:	f7ff bfad 	b.w	8027520 <sinf_poly>
 80275c6:	f240 422e 	movw	r2, #1070	@ 0x42e
 80275ca:	4293      	cmp	r3, r2
 80275cc:	d824      	bhi.n	8027618 <sinf+0xa0>
 80275ce:	4b34      	ldr	r3, [pc, #208]	@ (80276a0 <sinf+0x128>)
 80275d0:	ed93 7b08 	vldr	d7, [r3, #32]
 80275d4:	ee26 7b07 	vmul.f64	d7, d6, d7
 80275d8:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80275dc:	f103 0070 	add.w	r0, r3, #112	@ 0x70
 80275e0:	ee17 1a90 	vmov	r1, s15
 80275e4:	f501 0100 	add.w	r1, r1, #8388608	@ 0x800000
 80275e8:	1609      	asrs	r1, r1, #24
 80275ea:	ee07 1a90 	vmov	s15, r1
 80275ee:	f001 0203 	and.w	r2, r1, #3
 80275f2:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 80275f6:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 80275fa:	ed92 0b00 	vldr	d0, [r2]
 80275fe:	ed93 7b0a 	vldr	d7, [r3, #40]	@ 0x28
 8027602:	f011 0f02 	tst.w	r1, #2
 8027606:	eea5 6b47 	vfms.f64	d6, d5, d7
 802760a:	bf08      	it	eq
 802760c:	4618      	moveq	r0, r3
 802760e:	ee26 1b06 	vmul.f64	d1, d6, d6
 8027612:	ee20 0b06 	vmul.f64	d0, d0, d6
 8027616:	e7d1      	b.n	80275bc <sinf+0x44>
 8027618:	f5b3 6fff 	cmp.w	r3, #2040	@ 0x7f8
 802761c:	d237      	bcs.n	802768e <sinf+0x116>
 802761e:	4921      	ldr	r1, [pc, #132]	@ (80276a4 <sinf+0x12c>)
 8027620:	f3c4 6083 	ubfx	r0, r4, #26, #4
 8027624:	eb01 0280 	add.w	r2, r1, r0, lsl #2
 8027628:	f3c4 0316 	ubfx	r3, r4, #0, #23
 802762c:	f3c4 55c2 	ubfx	r5, r4, #23, #3
 8027630:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 8027634:	6a10      	ldr	r0, [r2, #32]
 8027636:	6912      	ldr	r2, [r2, #16]
 8027638:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 802763c:	40ab      	lsls	r3, r5
 802763e:	fba0 5003 	umull	r5, r0, r0, r3
 8027642:	4359      	muls	r1, r3
 8027644:	fbe3 0102 	umlal	r0, r1, r3, r2
 8027648:	f101 5300 	add.w	r3, r1, #536870912	@ 0x20000000
 802764c:	0f9d      	lsrs	r5, r3, #30
 802764e:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8027652:	1ac9      	subs	r1, r1, r3
 8027654:	f7d9 f822 	bl	800069c <__aeabi_l2d>
 8027658:	eb05 74d4 	add.w	r4, r5, r4, lsr #31
 802765c:	4b10      	ldr	r3, [pc, #64]	@ (80276a0 <sinf+0x128>)
 802765e:	f004 0203 	and.w	r2, r4, #3
 8027662:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 8027666:	ed9f 6b0c 	vldr	d6, [pc, #48]	@ 8027698 <sinf+0x120>
 802766a:	ed92 0b00 	vldr	d0, [r2]
 802766e:	ec41 0b17 	vmov	d7, r0, r1
 8027672:	f014 0f02 	tst.w	r4, #2
 8027676:	ee27 7b06 	vmul.f64	d7, d7, d6
 802767a:	f103 0070 	add.w	r0, r3, #112	@ 0x70
 802767e:	4629      	mov	r1, r5
 8027680:	bf08      	it	eq
 8027682:	4618      	moveq	r0, r3
 8027684:	ee27 1b07 	vmul.f64	d1, d7, d7
 8027688:	ee20 0b07 	vmul.f64	d0, d0, d7
 802768c:	e796      	b.n	80275bc <sinf+0x44>
 802768e:	b003      	add	sp, #12
 8027690:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8027694:	f000 b8e2 	b.w	802785c <__math_invalidf>
 8027698:	54442d18 	.word	0x54442d18
 802769c:	3c1921fb 	.word	0x3c1921fb
 80276a0:	0802d668 	.word	0x0802d668
 80276a4:	0802d604 	.word	0x0802d604

080276a8 <sinf_poly>:
 80276a8:	07cb      	lsls	r3, r1, #31
 80276aa:	d412      	bmi.n	80276d2 <sinf_poly+0x2a>
 80276ac:	ee21 5b00 	vmul.f64	d5, d1, d0
 80276b0:	ed90 6b1a 	vldr	d6, [r0, #104]	@ 0x68
 80276b4:	ed90 7b18 	vldr	d7, [r0, #96]	@ 0x60
 80276b8:	eea6 7b01 	vfma.f64	d7, d6, d1
 80276bc:	ed90 6b16 	vldr	d6, [r0, #88]	@ 0x58
 80276c0:	ee21 1b05 	vmul.f64	d1, d1, d5
 80276c4:	eea6 0b05 	vfma.f64	d0, d6, d5
 80276c8:	eea7 0b01 	vfma.f64	d0, d7, d1
 80276cc:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 80276d0:	4770      	bx	lr
 80276d2:	ed90 6b14 	vldr	d6, [r0, #80]	@ 0x50
 80276d6:	ee21 5b01 	vmul.f64	d5, d1, d1
 80276da:	ed90 7b12 	vldr	d7, [r0, #72]	@ 0x48
 80276de:	ed90 0b0c 	vldr	d0, [r0, #48]	@ 0x30
 80276e2:	eea1 7b06 	vfma.f64	d7, d1, d6
 80276e6:	ed90 6b0e 	vldr	d6, [r0, #56]	@ 0x38
 80276ea:	eea1 0b06 	vfma.f64	d0, d1, d6
 80276ee:	ed90 6b10 	vldr	d6, [r0, #64]	@ 0x40
 80276f2:	ee21 1b05 	vmul.f64	d1, d1, d5
 80276f6:	eea5 0b06 	vfma.f64	d0, d5, d6
 80276fa:	e7e5      	b.n	80276c8 <sinf_poly+0x20>
 80276fc:	0000      	movs	r0, r0
	...

08027700 <cosf>:
 8027700:	b538      	push	{r3, r4, r5, lr}
 8027702:	ee10 4a10 	vmov	r4, s0
 8027706:	f3c4 530a 	ubfx	r3, r4, #20, #11
 802770a:	f5b3 7f7d 	cmp.w	r3, #1012	@ 0x3f4
 802770e:	eeb7 7ac0 	vcvt.f64.f32	d7, s0
 8027712:	d21f      	bcs.n	8027754 <cosf+0x54>
 8027714:	ee27 7b07 	vmul.f64	d7, d7, d7
 8027718:	f5b3 7f66 	cmp.w	r3, #920	@ 0x398
 802771c:	f0c0 8082 	bcc.w	8027824 <cosf+0x124>
 8027720:	ee27 4b07 	vmul.f64	d4, d7, d7
 8027724:	4b44      	ldr	r3, [pc, #272]	@ (8027838 <cosf+0x138>)
 8027726:	ed93 5b14 	vldr	d5, [r3, #80]	@ 0x50
 802772a:	ed93 6b12 	vldr	d6, [r3, #72]	@ 0x48
 802772e:	ed93 0b0c 	vldr	d0, [r3, #48]	@ 0x30
 8027732:	eea7 6b05 	vfma.f64	d6, d7, d5
 8027736:	ed93 5b0e 	vldr	d5, [r3, #56]	@ 0x38
 802773a:	eea7 0b05 	vfma.f64	d0, d7, d5
 802773e:	ed93 5b10 	vldr	d5, [r3, #64]	@ 0x40
 8027742:	ee27 7b04 	vmul.f64	d7, d7, d4
 8027746:	eea4 0b05 	vfma.f64	d0, d4, d5
 802774a:	eea6 0b07 	vfma.f64	d0, d6, d7
 802774e:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8027752:	bd38      	pop	{r3, r4, r5, pc}
 8027754:	f240 422e 	movw	r2, #1070	@ 0x42e
 8027758:	4293      	cmp	r3, r2
 802775a:	d829      	bhi.n	80277b0 <cosf+0xb0>
 802775c:	4b36      	ldr	r3, [pc, #216]	@ (8027838 <cosf+0x138>)
 802775e:	ed93 6b08 	vldr	d6, [r3, #32]
 8027762:	ee27 6b06 	vmul.f64	d6, d7, d6
 8027766:	eefd 6bc6 	vcvt.s32.f64	s13, d6
 802776a:	f103 0070 	add.w	r0, r3, #112	@ 0x70
 802776e:	ee16 1a90 	vmov	r1, s13
 8027772:	f501 0100 	add.w	r1, r1, #8388608	@ 0x800000
 8027776:	1609      	asrs	r1, r1, #24
 8027778:	ee06 1a90 	vmov	s13, r1
 802777c:	f001 0203 	and.w	r2, r1, #3
 8027780:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 8027784:	eeb8 5be6 	vcvt.f64.s32	d5, s13
 8027788:	ed92 0b00 	vldr	d0, [r2]
 802778c:	ed93 6b0a 	vldr	d6, [r3, #40]	@ 0x28
 8027790:	f011 0f02 	tst.w	r1, #2
 8027794:	f081 0101 	eor.w	r1, r1, #1
 8027798:	eea5 7b46 	vfms.f64	d7, d5, d6
 802779c:	bf08      	it	eq
 802779e:	4618      	moveq	r0, r3
 80277a0:	ee27 1b07 	vmul.f64	d1, d7, d7
 80277a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80277a8:	ee20 0b07 	vmul.f64	d0, d0, d7
 80277ac:	f7ff bf7c 	b.w	80276a8 <sinf_poly>
 80277b0:	f5b3 6fff 	cmp.w	r3, #2040	@ 0x7f8
 80277b4:	d232      	bcs.n	802781c <cosf+0x11c>
 80277b6:	4921      	ldr	r1, [pc, #132]	@ (802783c <cosf+0x13c>)
 80277b8:	f3c4 6083 	ubfx	r0, r4, #26, #4
 80277bc:	eb01 0280 	add.w	r2, r1, r0, lsl #2
 80277c0:	f3c4 0316 	ubfx	r3, r4, #0, #23
 80277c4:	f3c4 55c2 	ubfx	r5, r4, #23, #3
 80277c8:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 80277cc:	6a10      	ldr	r0, [r2, #32]
 80277ce:	6912      	ldr	r2, [r2, #16]
 80277d0:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80277d4:	40ab      	lsls	r3, r5
 80277d6:	fba0 5003 	umull	r5, r0, r0, r3
 80277da:	4359      	muls	r1, r3
 80277dc:	fbe3 0102 	umlal	r0, r1, r3, r2
 80277e0:	f101 5300 	add.w	r3, r1, #536870912	@ 0x20000000
 80277e4:	0f9d      	lsrs	r5, r3, #30
 80277e6:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 80277ea:	1ac9      	subs	r1, r1, r3
 80277ec:	f7d8 ff56 	bl	800069c <__aeabi_l2d>
 80277f0:	eb05 74d4 	add.w	r4, r5, r4, lsr #31
 80277f4:	4b10      	ldr	r3, [pc, #64]	@ (8027838 <cosf+0x138>)
 80277f6:	ed9f 6b0e 	vldr	d6, [pc, #56]	@ 8027830 <cosf+0x130>
 80277fa:	ec41 0b17 	vmov	d7, r0, r1
 80277fe:	f004 0203 	and.w	r2, r4, #3
 8027802:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 8027806:	ed92 0b00 	vldr	d0, [r2]
 802780a:	ee27 7b06 	vmul.f64	d7, d7, d6
 802780e:	f103 0070 	add.w	r0, r3, #112	@ 0x70
 8027812:	f014 0f02 	tst.w	r4, #2
 8027816:	f085 0101 	eor.w	r1, r5, #1
 802781a:	e7bf      	b.n	802779c <cosf+0x9c>
 802781c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8027820:	f000 b81c 	b.w	802785c <__math_invalidf>
 8027824:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8027828:	e793      	b.n	8027752 <cosf+0x52>
 802782a:	bf00      	nop
 802782c:	f3af 8000 	nop.w
 8027830:	54442d18 	.word	0x54442d18
 8027834:	3c1921fb 	.word	0x3c1921fb
 8027838:	0802d668 	.word	0x0802d668
 802783c:	0802d604 	.word	0x0802d604

08027840 <with_errnof>:
 8027840:	b510      	push	{r4, lr}
 8027842:	ed2d 8b02 	vpush	{d8}
 8027846:	eeb0 8a40 	vmov.f32	s16, s0
 802784a:	4604      	mov	r4, r0
 802784c:	f000 fce8 	bl	8028220 <__errno>
 8027850:	eeb0 0a48 	vmov.f32	s0, s16
 8027854:	ecbd 8b02 	vpop	{d8}
 8027858:	6004      	str	r4, [r0, #0]
 802785a:	bd10      	pop	{r4, pc}

0802785c <__math_invalidf>:
 802785c:	eef0 7a40 	vmov.f32	s15, s0
 8027860:	ee30 7a40 	vsub.f32	s14, s0, s0
 8027864:	eef4 7a67 	vcmp.f32	s15, s15
 8027868:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802786c:	ee87 0a07 	vdiv.f32	s0, s14, s14
 8027870:	d602      	bvs.n	8027878 <__math_invalidf+0x1c>
 8027872:	2021      	movs	r0, #33	@ 0x21
 8027874:	f7ff bfe4 	b.w	8027840 <with_errnof>
 8027878:	4770      	bx	lr

0802787a <__ieee754_sqrtf>:
 802787a:	eeb1 0ac0 	vsqrt.f32	s0, s0
 802787e:	4770      	bx	lr

08027880 <__ieee754_atan2f>:
 8027880:	ee10 2a90 	vmov	r2, s1
 8027884:	f022 4100 	bic.w	r1, r2, #2147483648	@ 0x80000000
 8027888:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 802788c:	b510      	push	{r4, lr}
 802788e:	eef0 7a40 	vmov.f32	s15, s0
 8027892:	d806      	bhi.n	80278a2 <__ieee754_atan2f+0x22>
 8027894:	ee10 0a10 	vmov	r0, s0
 8027898:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 802789c:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 80278a0:	d904      	bls.n	80278ac <__ieee754_atan2f+0x2c>
 80278a2:	ee77 7aa0 	vadd.f32	s15, s15, s1
 80278a6:	eeb0 0a67 	vmov.f32	s0, s15
 80278aa:	bd10      	pop	{r4, pc}
 80278ac:	f1b2 5f7e 	cmp.w	r2, #1065353216	@ 0x3f800000
 80278b0:	d103      	bne.n	80278ba <__ieee754_atan2f+0x3a>
 80278b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80278b6:	f000 b881 	b.w	80279bc <atanf>
 80278ba:	1794      	asrs	r4, r2, #30
 80278bc:	f004 0402 	and.w	r4, r4, #2
 80278c0:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 80278c4:	b93b      	cbnz	r3, 80278d6 <__ieee754_atan2f+0x56>
 80278c6:	2c02      	cmp	r4, #2
 80278c8:	d05c      	beq.n	8027984 <__ieee754_atan2f+0x104>
 80278ca:	ed9f 7a33 	vldr	s14, [pc, #204]	@ 8027998 <__ieee754_atan2f+0x118>
 80278ce:	2c03      	cmp	r4, #3
 80278d0:	fe47 7a00 	vseleq.f32	s15, s14, s0
 80278d4:	e7e7      	b.n	80278a6 <__ieee754_atan2f+0x26>
 80278d6:	b939      	cbnz	r1, 80278e8 <__ieee754_atan2f+0x68>
 80278d8:	eddf 7a30 	vldr	s15, [pc, #192]	@ 802799c <__ieee754_atan2f+0x11c>
 80278dc:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 80279a0 <__ieee754_atan2f+0x120>
 80278e0:	2800      	cmp	r0, #0
 80278e2:	fe67 7a87 	vselge.f32	s15, s15, s14
 80278e6:	e7de      	b.n	80278a6 <__ieee754_atan2f+0x26>
 80278e8:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 80278ec:	d110      	bne.n	8027910 <__ieee754_atan2f+0x90>
 80278ee:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 80278f2:	f104 34ff 	add.w	r4, r4, #4294967295
 80278f6:	d107      	bne.n	8027908 <__ieee754_atan2f+0x88>
 80278f8:	2c02      	cmp	r4, #2
 80278fa:	d846      	bhi.n	802798a <__ieee754_atan2f+0x10a>
 80278fc:	4b29      	ldr	r3, [pc, #164]	@ (80279a4 <__ieee754_atan2f+0x124>)
 80278fe:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8027902:	edd3 7a00 	vldr	s15, [r3]
 8027906:	e7ce      	b.n	80278a6 <__ieee754_atan2f+0x26>
 8027908:	2c02      	cmp	r4, #2
 802790a:	d841      	bhi.n	8027990 <__ieee754_atan2f+0x110>
 802790c:	4b26      	ldr	r3, [pc, #152]	@ (80279a8 <__ieee754_atan2f+0x128>)
 802790e:	e7f6      	b.n	80278fe <__ieee754_atan2f+0x7e>
 8027910:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8027914:	d0e0      	beq.n	80278d8 <__ieee754_atan2f+0x58>
 8027916:	1a5b      	subs	r3, r3, r1
 8027918:	f1b3 5ff4 	cmp.w	r3, #511705088	@ 0x1e800000
 802791c:	ea4f 51e3 	mov.w	r1, r3, asr #23
 8027920:	da1a      	bge.n	8027958 <__ieee754_atan2f+0xd8>
 8027922:	2a00      	cmp	r2, #0
 8027924:	da01      	bge.n	802792a <__ieee754_atan2f+0xaa>
 8027926:	313c      	adds	r1, #60	@ 0x3c
 8027928:	db19      	blt.n	802795e <__ieee754_atan2f+0xde>
 802792a:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 802792e:	f000 f919 	bl	8027b64 <fabsf>
 8027932:	f000 f843 	bl	80279bc <atanf>
 8027936:	eef0 7a40 	vmov.f32	s15, s0
 802793a:	2c01      	cmp	r4, #1
 802793c:	d012      	beq.n	8027964 <__ieee754_atan2f+0xe4>
 802793e:	2c02      	cmp	r4, #2
 8027940:	d017      	beq.n	8027972 <__ieee754_atan2f+0xf2>
 8027942:	2c00      	cmp	r4, #0
 8027944:	d0af      	beq.n	80278a6 <__ieee754_atan2f+0x26>
 8027946:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 80279ac <__ieee754_atan2f+0x12c>
 802794a:	ee77 7a87 	vadd.f32	s15, s15, s14
 802794e:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 80279b0 <__ieee754_atan2f+0x130>
 8027952:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8027956:	e7a6      	b.n	80278a6 <__ieee754_atan2f+0x26>
 8027958:	eddf 7a10 	vldr	s15, [pc, #64]	@ 802799c <__ieee754_atan2f+0x11c>
 802795c:	e7ed      	b.n	802793a <__ieee754_atan2f+0xba>
 802795e:	eddf 7a15 	vldr	s15, [pc, #84]	@ 80279b4 <__ieee754_atan2f+0x134>
 8027962:	e7ea      	b.n	802793a <__ieee754_atan2f+0xba>
 8027964:	ee17 3a90 	vmov	r3, s15
 8027968:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 802796c:	ee07 3a90 	vmov	s15, r3
 8027970:	e799      	b.n	80278a6 <__ieee754_atan2f+0x26>
 8027972:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 80279ac <__ieee754_atan2f+0x12c>
 8027976:	ee77 7a87 	vadd.f32	s15, s15, s14
 802797a:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 80279b0 <__ieee754_atan2f+0x130>
 802797e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8027982:	e790      	b.n	80278a6 <__ieee754_atan2f+0x26>
 8027984:	eddf 7a0a 	vldr	s15, [pc, #40]	@ 80279b0 <__ieee754_atan2f+0x130>
 8027988:	e78d      	b.n	80278a6 <__ieee754_atan2f+0x26>
 802798a:	eddf 7a0b 	vldr	s15, [pc, #44]	@ 80279b8 <__ieee754_atan2f+0x138>
 802798e:	e78a      	b.n	80278a6 <__ieee754_atan2f+0x26>
 8027990:	eddf 7a08 	vldr	s15, [pc, #32]	@ 80279b4 <__ieee754_atan2f+0x134>
 8027994:	e787      	b.n	80278a6 <__ieee754_atan2f+0x26>
 8027996:	bf00      	nop
 8027998:	c0490fdb 	.word	0xc0490fdb
 802799c:	3fc90fdb 	.word	0x3fc90fdb
 80279a0:	bfc90fdb 	.word	0xbfc90fdb
 80279a4:	0802d754 	.word	0x0802d754
 80279a8:	0802d748 	.word	0x0802d748
 80279ac:	33bbbd2e 	.word	0x33bbbd2e
 80279b0:	40490fdb 	.word	0x40490fdb
 80279b4:	00000000 	.word	0x00000000
 80279b8:	3f490fdb 	.word	0x3f490fdb

080279bc <atanf>:
 80279bc:	b538      	push	{r3, r4, r5, lr}
 80279be:	ee10 5a10 	vmov	r5, s0
 80279c2:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 80279c6:	f1b4 4fa1 	cmp.w	r4, #1350565888	@ 0x50800000
 80279ca:	eef0 7a40 	vmov.f32	s15, s0
 80279ce:	d30f      	bcc.n	80279f0 <atanf+0x34>
 80279d0:	f1b4 4fff 	cmp.w	r4, #2139095040	@ 0x7f800000
 80279d4:	d904      	bls.n	80279e0 <atanf+0x24>
 80279d6:	ee70 7a00 	vadd.f32	s15, s0, s0
 80279da:	eeb0 0a67 	vmov.f32	s0, s15
 80279de:	bd38      	pop	{r3, r4, r5, pc}
 80279e0:	eddf 7a4d 	vldr	s15, [pc, #308]	@ 8027b18 <atanf+0x15c>
 80279e4:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 8027b1c <atanf+0x160>
 80279e8:	2d00      	cmp	r5, #0
 80279ea:	fe77 7a27 	vselgt.f32	s15, s14, s15
 80279ee:	e7f4      	b.n	80279da <atanf+0x1e>
 80279f0:	4b4b      	ldr	r3, [pc, #300]	@ (8027b20 <atanf+0x164>)
 80279f2:	429c      	cmp	r4, r3
 80279f4:	d810      	bhi.n	8027a18 <atanf+0x5c>
 80279f6:	f1b4 5f44 	cmp.w	r4, #822083584	@ 0x31000000
 80279fa:	d20a      	bcs.n	8027a12 <atanf+0x56>
 80279fc:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 8027b24 <atanf+0x168>
 8027a00:	ee30 7a07 	vadd.f32	s14, s0, s14
 8027a04:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8027a08:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8027a0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8027a10:	dce3      	bgt.n	80279da <atanf+0x1e>
 8027a12:	f04f 33ff 	mov.w	r3, #4294967295
 8027a16:	e013      	b.n	8027a40 <atanf+0x84>
 8027a18:	f000 f8a4 	bl	8027b64 <fabsf>
 8027a1c:	4b42      	ldr	r3, [pc, #264]	@ (8027b28 <atanf+0x16c>)
 8027a1e:	429c      	cmp	r4, r3
 8027a20:	d84f      	bhi.n	8027ac2 <atanf+0x106>
 8027a22:	f5a3 03d0 	sub.w	r3, r3, #6815744	@ 0x680000
 8027a26:	429c      	cmp	r4, r3
 8027a28:	d841      	bhi.n	8027aae <atanf+0xf2>
 8027a2a:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
 8027a2e:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8027a32:	eea0 7a27 	vfma.f32	s14, s0, s15
 8027a36:	2300      	movs	r3, #0
 8027a38:	ee30 0a27 	vadd.f32	s0, s0, s15
 8027a3c:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8027a40:	1c5a      	adds	r2, r3, #1
 8027a42:	ee27 6aa7 	vmul.f32	s12, s15, s15
 8027a46:	ed9f 7a39 	vldr	s14, [pc, #228]	@ 8027b2c <atanf+0x170>
 8027a4a:	eddf 5a39 	vldr	s11, [pc, #228]	@ 8027b30 <atanf+0x174>
 8027a4e:	ed9f 5a39 	vldr	s10, [pc, #228]	@ 8027b34 <atanf+0x178>
 8027a52:	ee66 6a06 	vmul.f32	s13, s12, s12
 8027a56:	eee6 5a87 	vfma.f32	s11, s13, s14
 8027a5a:	ed9f 7a37 	vldr	s14, [pc, #220]	@ 8027b38 <atanf+0x17c>
 8027a5e:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8027a62:	eddf 5a36 	vldr	s11, [pc, #216]	@ 8027b3c <atanf+0x180>
 8027a66:	eee7 5a26 	vfma.f32	s11, s14, s13
 8027a6a:	ed9f 7a35 	vldr	s14, [pc, #212]	@ 8027b40 <atanf+0x184>
 8027a6e:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8027a72:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8027b44 <atanf+0x188>
 8027a76:	eee7 5a26 	vfma.f32	s11, s14, s13
 8027a7a:	ed9f 7a33 	vldr	s14, [pc, #204]	@ 8027b48 <atanf+0x18c>
 8027a7e:	eea6 5a87 	vfma.f32	s10, s13, s14
 8027a82:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 8027b4c <atanf+0x190>
 8027a86:	eea5 7a26 	vfma.f32	s14, s10, s13
 8027a8a:	ed9f 5a31 	vldr	s10, [pc, #196]	@ 8027b50 <atanf+0x194>
 8027a8e:	eea7 5a26 	vfma.f32	s10, s14, s13
 8027a92:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 8027b54 <atanf+0x198>
 8027a96:	eea5 7a26 	vfma.f32	s14, s10, s13
 8027a9a:	ee27 7a26 	vmul.f32	s14, s14, s13
 8027a9e:	eea5 7a86 	vfma.f32	s14, s11, s12
 8027aa2:	ee27 7a87 	vmul.f32	s14, s15, s14
 8027aa6:	d121      	bne.n	8027aec <atanf+0x130>
 8027aa8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8027aac:	e795      	b.n	80279da <atanf+0x1e>
 8027aae:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8027ab2:	ee30 7a67 	vsub.f32	s14, s0, s15
 8027ab6:	ee30 0a27 	vadd.f32	s0, s0, s15
 8027aba:	2301      	movs	r3, #1
 8027abc:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8027ac0:	e7be      	b.n	8027a40 <atanf+0x84>
 8027ac2:	4b25      	ldr	r3, [pc, #148]	@ (8027b58 <atanf+0x19c>)
 8027ac4:	429c      	cmp	r4, r3
 8027ac6:	d80b      	bhi.n	8027ae0 <atanf+0x124>
 8027ac8:	eef7 7a08 	vmov.f32	s15, #120	@ 0x3fc00000  1.5
 8027acc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8027ad0:	eea0 7a27 	vfma.f32	s14, s0, s15
 8027ad4:	2302      	movs	r3, #2
 8027ad6:	ee70 6a67 	vsub.f32	s13, s0, s15
 8027ada:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8027ade:	e7af      	b.n	8027a40 <atanf+0x84>
 8027ae0:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8027ae4:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8027ae8:	2303      	movs	r3, #3
 8027aea:	e7a9      	b.n	8027a40 <atanf+0x84>
 8027aec:	4a1b      	ldr	r2, [pc, #108]	@ (8027b5c <atanf+0x1a0>)
 8027aee:	491c      	ldr	r1, [pc, #112]	@ (8027b60 <atanf+0x1a4>)
 8027af0:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8027af4:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8027af8:	edd3 6a00 	vldr	s13, [r3]
 8027afc:	ee37 7a66 	vsub.f32	s14, s14, s13
 8027b00:	2d00      	cmp	r5, #0
 8027b02:	ee37 7a67 	vsub.f32	s14, s14, s15
 8027b06:	edd2 7a00 	vldr	s15, [r2]
 8027b0a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8027b0e:	bfb8      	it	lt
 8027b10:	eef1 7a67 	vneglt.f32	s15, s15
 8027b14:	e761      	b.n	80279da <atanf+0x1e>
 8027b16:	bf00      	nop
 8027b18:	bfc90fdb 	.word	0xbfc90fdb
 8027b1c:	3fc90fdb 	.word	0x3fc90fdb
 8027b20:	3edfffff 	.word	0x3edfffff
 8027b24:	7149f2ca 	.word	0x7149f2ca
 8027b28:	3f97ffff 	.word	0x3f97ffff
 8027b2c:	3c8569d7 	.word	0x3c8569d7
 8027b30:	3d4bda59 	.word	0x3d4bda59
 8027b34:	bd6ef16b 	.word	0xbd6ef16b
 8027b38:	3d886b35 	.word	0x3d886b35
 8027b3c:	3dba2e6e 	.word	0x3dba2e6e
 8027b40:	3e124925 	.word	0x3e124925
 8027b44:	3eaaaaab 	.word	0x3eaaaaab
 8027b48:	bd15a221 	.word	0xbd15a221
 8027b4c:	bd9d8795 	.word	0xbd9d8795
 8027b50:	bde38e38 	.word	0xbde38e38
 8027b54:	be4ccccd 	.word	0xbe4ccccd
 8027b58:	401bffff 	.word	0x401bffff
 8027b5c:	0802d770 	.word	0x0802d770
 8027b60:	0802d760 	.word	0x0802d760

08027b64 <fabsf>:
 8027b64:	ee10 3a10 	vmov	r3, s0
 8027b68:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8027b6c:	ee00 3a10 	vmov	s0, r3
 8027b70:	4770      	bx	lr

08027b72 <abort>:
 8027b72:	b508      	push	{r3, lr}
 8027b74:	2006      	movs	r0, #6
 8027b76:	f000 fae1 	bl	802813c <raise>
 8027b7a:	2001      	movs	r0, #1
 8027b7c:	f7d9 fd7c 	bl	8001678 <_exit>

08027b80 <__assert_func>:
 8027b80:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8027b82:	4614      	mov	r4, r2
 8027b84:	461a      	mov	r2, r3
 8027b86:	4b09      	ldr	r3, [pc, #36]	@ (8027bac <__assert_func+0x2c>)
 8027b88:	681b      	ldr	r3, [r3, #0]
 8027b8a:	4605      	mov	r5, r0
 8027b8c:	68d8      	ldr	r0, [r3, #12]
 8027b8e:	b954      	cbnz	r4, 8027ba6 <__assert_func+0x26>
 8027b90:	4b07      	ldr	r3, [pc, #28]	@ (8027bb0 <__assert_func+0x30>)
 8027b92:	461c      	mov	r4, r3
 8027b94:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8027b98:	9100      	str	r1, [sp, #0]
 8027b9a:	462b      	mov	r3, r5
 8027b9c:	4905      	ldr	r1, [pc, #20]	@ (8027bb4 <__assert_func+0x34>)
 8027b9e:	f000 f983 	bl	8027ea8 <fiprintf>
 8027ba2:	f7ff ffe6 	bl	8027b72 <abort>
 8027ba6:	4b04      	ldr	r3, [pc, #16]	@ (8027bb8 <__assert_func+0x38>)
 8027ba8:	e7f4      	b.n	8027b94 <__assert_func+0x14>
 8027baa:	bf00      	nop
 8027bac:	240000e8 	.word	0x240000e8
 8027bb0:	0802d7bb 	.word	0x0802d7bb
 8027bb4:	0802d78d 	.word	0x0802d78d
 8027bb8:	0802d780 	.word	0x0802d780

08027bbc <atexit>:
 8027bbc:	2300      	movs	r3, #0
 8027bbe:	4601      	mov	r1, r0
 8027bc0:	461a      	mov	r2, r3
 8027bc2:	4618      	mov	r0, r3
 8027bc4:	f000 bb68 	b.w	8028298 <__register_exitproc>

08027bc8 <malloc>:
 8027bc8:	4b02      	ldr	r3, [pc, #8]	@ (8027bd4 <malloc+0xc>)
 8027bca:	4601      	mov	r1, r0
 8027bcc:	6818      	ldr	r0, [r3, #0]
 8027bce:	f000 b82d 	b.w	8027c2c <_malloc_r>
 8027bd2:	bf00      	nop
 8027bd4:	240000e8 	.word	0x240000e8

08027bd8 <free>:
 8027bd8:	4b02      	ldr	r3, [pc, #8]	@ (8027be4 <free+0xc>)
 8027bda:	4601      	mov	r1, r0
 8027bdc:	6818      	ldr	r0, [r3, #0]
 8027bde:	f000 bbb7 	b.w	8028350 <_free_r>
 8027be2:	bf00      	nop
 8027be4:	240000e8 	.word	0x240000e8

08027be8 <sbrk_aligned>:
 8027be8:	b570      	push	{r4, r5, r6, lr}
 8027bea:	4e0f      	ldr	r6, [pc, #60]	@ (8027c28 <sbrk_aligned+0x40>)
 8027bec:	460c      	mov	r4, r1
 8027bee:	6831      	ldr	r1, [r6, #0]
 8027bf0:	4605      	mov	r5, r0
 8027bf2:	b911      	cbnz	r1, 8027bfa <sbrk_aligned+0x12>
 8027bf4:	f000 faf2 	bl	80281dc <_sbrk_r>
 8027bf8:	6030      	str	r0, [r6, #0]
 8027bfa:	4621      	mov	r1, r4
 8027bfc:	4628      	mov	r0, r5
 8027bfe:	f000 faed 	bl	80281dc <_sbrk_r>
 8027c02:	1c43      	adds	r3, r0, #1
 8027c04:	d103      	bne.n	8027c0e <sbrk_aligned+0x26>
 8027c06:	f04f 34ff 	mov.w	r4, #4294967295
 8027c0a:	4620      	mov	r0, r4
 8027c0c:	bd70      	pop	{r4, r5, r6, pc}
 8027c0e:	1cc4      	adds	r4, r0, #3
 8027c10:	f024 0403 	bic.w	r4, r4, #3
 8027c14:	42a0      	cmp	r0, r4
 8027c16:	d0f8      	beq.n	8027c0a <sbrk_aligned+0x22>
 8027c18:	1a21      	subs	r1, r4, r0
 8027c1a:	4628      	mov	r0, r5
 8027c1c:	f000 fade 	bl	80281dc <_sbrk_r>
 8027c20:	3001      	adds	r0, #1
 8027c22:	d1f2      	bne.n	8027c0a <sbrk_aligned+0x22>
 8027c24:	e7ef      	b.n	8027c06 <sbrk_aligned+0x1e>
 8027c26:	bf00      	nop
 8027c28:	2402985c 	.word	0x2402985c

08027c2c <_malloc_r>:
 8027c2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8027c30:	1ccd      	adds	r5, r1, #3
 8027c32:	f025 0503 	bic.w	r5, r5, #3
 8027c36:	3508      	adds	r5, #8
 8027c38:	2d0c      	cmp	r5, #12
 8027c3a:	bf38      	it	cc
 8027c3c:	250c      	movcc	r5, #12
 8027c3e:	2d00      	cmp	r5, #0
 8027c40:	4606      	mov	r6, r0
 8027c42:	db01      	blt.n	8027c48 <_malloc_r+0x1c>
 8027c44:	42a9      	cmp	r1, r5
 8027c46:	d904      	bls.n	8027c52 <_malloc_r+0x26>
 8027c48:	230c      	movs	r3, #12
 8027c4a:	6033      	str	r3, [r6, #0]
 8027c4c:	2000      	movs	r0, #0
 8027c4e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8027c52:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8027d28 <_malloc_r+0xfc>
 8027c56:	f000 f869 	bl	8027d2c <__malloc_lock>
 8027c5a:	f8d8 3000 	ldr.w	r3, [r8]
 8027c5e:	461c      	mov	r4, r3
 8027c60:	bb44      	cbnz	r4, 8027cb4 <_malloc_r+0x88>
 8027c62:	4629      	mov	r1, r5
 8027c64:	4630      	mov	r0, r6
 8027c66:	f7ff ffbf 	bl	8027be8 <sbrk_aligned>
 8027c6a:	1c43      	adds	r3, r0, #1
 8027c6c:	4604      	mov	r4, r0
 8027c6e:	d158      	bne.n	8027d22 <_malloc_r+0xf6>
 8027c70:	f8d8 4000 	ldr.w	r4, [r8]
 8027c74:	4627      	mov	r7, r4
 8027c76:	2f00      	cmp	r7, #0
 8027c78:	d143      	bne.n	8027d02 <_malloc_r+0xd6>
 8027c7a:	2c00      	cmp	r4, #0
 8027c7c:	d04b      	beq.n	8027d16 <_malloc_r+0xea>
 8027c7e:	6823      	ldr	r3, [r4, #0]
 8027c80:	4639      	mov	r1, r7
 8027c82:	4630      	mov	r0, r6
 8027c84:	eb04 0903 	add.w	r9, r4, r3
 8027c88:	f000 faa8 	bl	80281dc <_sbrk_r>
 8027c8c:	4581      	cmp	r9, r0
 8027c8e:	d142      	bne.n	8027d16 <_malloc_r+0xea>
 8027c90:	6821      	ldr	r1, [r4, #0]
 8027c92:	1a6d      	subs	r5, r5, r1
 8027c94:	4629      	mov	r1, r5
 8027c96:	4630      	mov	r0, r6
 8027c98:	f7ff ffa6 	bl	8027be8 <sbrk_aligned>
 8027c9c:	3001      	adds	r0, #1
 8027c9e:	d03a      	beq.n	8027d16 <_malloc_r+0xea>
 8027ca0:	6823      	ldr	r3, [r4, #0]
 8027ca2:	442b      	add	r3, r5
 8027ca4:	6023      	str	r3, [r4, #0]
 8027ca6:	f8d8 3000 	ldr.w	r3, [r8]
 8027caa:	685a      	ldr	r2, [r3, #4]
 8027cac:	bb62      	cbnz	r2, 8027d08 <_malloc_r+0xdc>
 8027cae:	f8c8 7000 	str.w	r7, [r8]
 8027cb2:	e00f      	b.n	8027cd4 <_malloc_r+0xa8>
 8027cb4:	6822      	ldr	r2, [r4, #0]
 8027cb6:	1b52      	subs	r2, r2, r5
 8027cb8:	d420      	bmi.n	8027cfc <_malloc_r+0xd0>
 8027cba:	2a0b      	cmp	r2, #11
 8027cbc:	d917      	bls.n	8027cee <_malloc_r+0xc2>
 8027cbe:	1961      	adds	r1, r4, r5
 8027cc0:	42a3      	cmp	r3, r4
 8027cc2:	6025      	str	r5, [r4, #0]
 8027cc4:	bf18      	it	ne
 8027cc6:	6059      	strne	r1, [r3, #4]
 8027cc8:	6863      	ldr	r3, [r4, #4]
 8027cca:	bf08      	it	eq
 8027ccc:	f8c8 1000 	streq.w	r1, [r8]
 8027cd0:	5162      	str	r2, [r4, r5]
 8027cd2:	604b      	str	r3, [r1, #4]
 8027cd4:	4630      	mov	r0, r6
 8027cd6:	f000 f82f 	bl	8027d38 <__malloc_unlock>
 8027cda:	f104 000b 	add.w	r0, r4, #11
 8027cde:	1d23      	adds	r3, r4, #4
 8027ce0:	f020 0007 	bic.w	r0, r0, #7
 8027ce4:	1ac2      	subs	r2, r0, r3
 8027ce6:	bf1c      	itt	ne
 8027ce8:	1a1b      	subne	r3, r3, r0
 8027cea:	50a3      	strne	r3, [r4, r2]
 8027cec:	e7af      	b.n	8027c4e <_malloc_r+0x22>
 8027cee:	6862      	ldr	r2, [r4, #4]
 8027cf0:	42a3      	cmp	r3, r4
 8027cf2:	bf0c      	ite	eq
 8027cf4:	f8c8 2000 	streq.w	r2, [r8]
 8027cf8:	605a      	strne	r2, [r3, #4]
 8027cfa:	e7eb      	b.n	8027cd4 <_malloc_r+0xa8>
 8027cfc:	4623      	mov	r3, r4
 8027cfe:	6864      	ldr	r4, [r4, #4]
 8027d00:	e7ae      	b.n	8027c60 <_malloc_r+0x34>
 8027d02:	463c      	mov	r4, r7
 8027d04:	687f      	ldr	r7, [r7, #4]
 8027d06:	e7b6      	b.n	8027c76 <_malloc_r+0x4a>
 8027d08:	461a      	mov	r2, r3
 8027d0a:	685b      	ldr	r3, [r3, #4]
 8027d0c:	42a3      	cmp	r3, r4
 8027d0e:	d1fb      	bne.n	8027d08 <_malloc_r+0xdc>
 8027d10:	2300      	movs	r3, #0
 8027d12:	6053      	str	r3, [r2, #4]
 8027d14:	e7de      	b.n	8027cd4 <_malloc_r+0xa8>
 8027d16:	230c      	movs	r3, #12
 8027d18:	6033      	str	r3, [r6, #0]
 8027d1a:	4630      	mov	r0, r6
 8027d1c:	f000 f80c 	bl	8027d38 <__malloc_unlock>
 8027d20:	e794      	b.n	8027c4c <_malloc_r+0x20>
 8027d22:	6005      	str	r5, [r0, #0]
 8027d24:	e7d6      	b.n	8027cd4 <_malloc_r+0xa8>
 8027d26:	bf00      	nop
 8027d28:	24029860 	.word	0x24029860

08027d2c <__malloc_lock>:
 8027d2c:	4801      	ldr	r0, [pc, #4]	@ (8027d34 <__malloc_lock+0x8>)
 8027d2e:	f000 baa2 	b.w	8028276 <__retarget_lock_acquire_recursive>
 8027d32:	bf00      	nop
 8027d34:	240299a4 	.word	0x240299a4

08027d38 <__malloc_unlock>:
 8027d38:	4801      	ldr	r0, [pc, #4]	@ (8027d40 <__malloc_unlock+0x8>)
 8027d3a:	f000 ba9d 	b.w	8028278 <__retarget_lock_release_recursive>
 8027d3e:	bf00      	nop
 8027d40:	240299a4 	.word	0x240299a4

08027d44 <__cxa_atexit>:
 8027d44:	b510      	push	{r4, lr}
 8027d46:	4604      	mov	r4, r0
 8027d48:	4804      	ldr	r0, [pc, #16]	@ (8027d5c <__cxa_atexit+0x18>)
 8027d4a:	4613      	mov	r3, r2
 8027d4c:	b120      	cbz	r0, 8027d58 <__cxa_atexit+0x14>
 8027d4e:	460a      	mov	r2, r1
 8027d50:	2002      	movs	r0, #2
 8027d52:	4621      	mov	r1, r4
 8027d54:	f000 faa0 	bl	8028298 <__register_exitproc>
 8027d58:	bd10      	pop	{r4, pc}
 8027d5a:	bf00      	nop
 8027d5c:	08028299 	.word	0x08028299

08027d60 <std>:
 8027d60:	2300      	movs	r3, #0
 8027d62:	b510      	push	{r4, lr}
 8027d64:	4604      	mov	r4, r0
 8027d66:	e9c0 3300 	strd	r3, r3, [r0]
 8027d6a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8027d6e:	6083      	str	r3, [r0, #8]
 8027d70:	8181      	strh	r1, [r0, #12]
 8027d72:	6643      	str	r3, [r0, #100]	@ 0x64
 8027d74:	81c2      	strh	r2, [r0, #14]
 8027d76:	6183      	str	r3, [r0, #24]
 8027d78:	4619      	mov	r1, r3
 8027d7a:	2208      	movs	r2, #8
 8027d7c:	305c      	adds	r0, #92	@ 0x5c
 8027d7e:	f000 f99b 	bl	80280b8 <memset>
 8027d82:	4b0d      	ldr	r3, [pc, #52]	@ (8027db8 <std+0x58>)
 8027d84:	6263      	str	r3, [r4, #36]	@ 0x24
 8027d86:	4b0d      	ldr	r3, [pc, #52]	@ (8027dbc <std+0x5c>)
 8027d88:	62a3      	str	r3, [r4, #40]	@ 0x28
 8027d8a:	4b0d      	ldr	r3, [pc, #52]	@ (8027dc0 <std+0x60>)
 8027d8c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8027d8e:	4b0d      	ldr	r3, [pc, #52]	@ (8027dc4 <std+0x64>)
 8027d90:	6323      	str	r3, [r4, #48]	@ 0x30
 8027d92:	4b0d      	ldr	r3, [pc, #52]	@ (8027dc8 <std+0x68>)
 8027d94:	6224      	str	r4, [r4, #32]
 8027d96:	429c      	cmp	r4, r3
 8027d98:	d006      	beq.n	8027da8 <std+0x48>
 8027d9a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8027d9e:	4294      	cmp	r4, r2
 8027da0:	d002      	beq.n	8027da8 <std+0x48>
 8027da2:	33d0      	adds	r3, #208	@ 0xd0
 8027da4:	429c      	cmp	r4, r3
 8027da6:	d105      	bne.n	8027db4 <std+0x54>
 8027da8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8027dac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8027db0:	f000 ba60 	b.w	8028274 <__retarget_lock_init_recursive>
 8027db4:	bd10      	pop	{r4, pc}
 8027db6:	bf00      	nop
 8027db8:	08027f09 	.word	0x08027f09
 8027dbc:	08027f2b 	.word	0x08027f2b
 8027dc0:	08027f63 	.word	0x08027f63
 8027dc4:	08027f87 	.word	0x08027f87
 8027dc8:	24029864 	.word	0x24029864

08027dcc <stdio_exit_handler>:
 8027dcc:	4a02      	ldr	r2, [pc, #8]	@ (8027dd8 <stdio_exit_handler+0xc>)
 8027dce:	4903      	ldr	r1, [pc, #12]	@ (8027ddc <stdio_exit_handler+0x10>)
 8027dd0:	4803      	ldr	r0, [pc, #12]	@ (8027de0 <stdio_exit_handler+0x14>)
 8027dd2:	f000 b87b 	b.w	8027ecc <_fwalk_sglue>
 8027dd6:	bf00      	nop
 8027dd8:	240000dc 	.word	0x240000dc
 8027ddc:	08028a8d 	.word	0x08028a8d
 8027de0:	240000ec 	.word	0x240000ec

08027de4 <cleanup_stdio>:
 8027de4:	6841      	ldr	r1, [r0, #4]
 8027de6:	4b0c      	ldr	r3, [pc, #48]	@ (8027e18 <cleanup_stdio+0x34>)
 8027de8:	4299      	cmp	r1, r3
 8027dea:	b510      	push	{r4, lr}
 8027dec:	4604      	mov	r4, r0
 8027dee:	d001      	beq.n	8027df4 <cleanup_stdio+0x10>
 8027df0:	f000 fe4c 	bl	8028a8c <_fflush_r>
 8027df4:	68a1      	ldr	r1, [r4, #8]
 8027df6:	4b09      	ldr	r3, [pc, #36]	@ (8027e1c <cleanup_stdio+0x38>)
 8027df8:	4299      	cmp	r1, r3
 8027dfa:	d002      	beq.n	8027e02 <cleanup_stdio+0x1e>
 8027dfc:	4620      	mov	r0, r4
 8027dfe:	f000 fe45 	bl	8028a8c <_fflush_r>
 8027e02:	68e1      	ldr	r1, [r4, #12]
 8027e04:	4b06      	ldr	r3, [pc, #24]	@ (8027e20 <cleanup_stdio+0x3c>)
 8027e06:	4299      	cmp	r1, r3
 8027e08:	d004      	beq.n	8027e14 <cleanup_stdio+0x30>
 8027e0a:	4620      	mov	r0, r4
 8027e0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8027e10:	f000 be3c 	b.w	8028a8c <_fflush_r>
 8027e14:	bd10      	pop	{r4, pc}
 8027e16:	bf00      	nop
 8027e18:	24029864 	.word	0x24029864
 8027e1c:	240298cc 	.word	0x240298cc
 8027e20:	24029934 	.word	0x24029934

08027e24 <global_stdio_init.part.0>:
 8027e24:	b510      	push	{r4, lr}
 8027e26:	4b0b      	ldr	r3, [pc, #44]	@ (8027e54 <global_stdio_init.part.0+0x30>)
 8027e28:	4c0b      	ldr	r4, [pc, #44]	@ (8027e58 <global_stdio_init.part.0+0x34>)
 8027e2a:	4a0c      	ldr	r2, [pc, #48]	@ (8027e5c <global_stdio_init.part.0+0x38>)
 8027e2c:	601a      	str	r2, [r3, #0]
 8027e2e:	4620      	mov	r0, r4
 8027e30:	2200      	movs	r2, #0
 8027e32:	2104      	movs	r1, #4
 8027e34:	f7ff ff94 	bl	8027d60 <std>
 8027e38:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8027e3c:	2201      	movs	r2, #1
 8027e3e:	2109      	movs	r1, #9
 8027e40:	f7ff ff8e 	bl	8027d60 <std>
 8027e44:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8027e48:	2202      	movs	r2, #2
 8027e4a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8027e4e:	2112      	movs	r1, #18
 8027e50:	f7ff bf86 	b.w	8027d60 <std>
 8027e54:	2402999c 	.word	0x2402999c
 8027e58:	24029864 	.word	0x24029864
 8027e5c:	08027dcd 	.word	0x08027dcd

08027e60 <__sfp_lock_acquire>:
 8027e60:	4801      	ldr	r0, [pc, #4]	@ (8027e68 <__sfp_lock_acquire+0x8>)
 8027e62:	f000 ba08 	b.w	8028276 <__retarget_lock_acquire_recursive>
 8027e66:	bf00      	nop
 8027e68:	240299a6 	.word	0x240299a6

08027e6c <__sfp_lock_release>:
 8027e6c:	4801      	ldr	r0, [pc, #4]	@ (8027e74 <__sfp_lock_release+0x8>)
 8027e6e:	f000 ba03 	b.w	8028278 <__retarget_lock_release_recursive>
 8027e72:	bf00      	nop
 8027e74:	240299a6 	.word	0x240299a6

08027e78 <__sinit>:
 8027e78:	b510      	push	{r4, lr}
 8027e7a:	4604      	mov	r4, r0
 8027e7c:	f7ff fff0 	bl	8027e60 <__sfp_lock_acquire>
 8027e80:	6a23      	ldr	r3, [r4, #32]
 8027e82:	b11b      	cbz	r3, 8027e8c <__sinit+0x14>
 8027e84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8027e88:	f7ff bff0 	b.w	8027e6c <__sfp_lock_release>
 8027e8c:	4b04      	ldr	r3, [pc, #16]	@ (8027ea0 <__sinit+0x28>)
 8027e8e:	6223      	str	r3, [r4, #32]
 8027e90:	4b04      	ldr	r3, [pc, #16]	@ (8027ea4 <__sinit+0x2c>)
 8027e92:	681b      	ldr	r3, [r3, #0]
 8027e94:	2b00      	cmp	r3, #0
 8027e96:	d1f5      	bne.n	8027e84 <__sinit+0xc>
 8027e98:	f7ff ffc4 	bl	8027e24 <global_stdio_init.part.0>
 8027e9c:	e7f2      	b.n	8027e84 <__sinit+0xc>
 8027e9e:	bf00      	nop
 8027ea0:	08027de5 	.word	0x08027de5
 8027ea4:	2402999c 	.word	0x2402999c

08027ea8 <fiprintf>:
 8027ea8:	b40e      	push	{r1, r2, r3}
 8027eaa:	b503      	push	{r0, r1, lr}
 8027eac:	4601      	mov	r1, r0
 8027eae:	ab03      	add	r3, sp, #12
 8027eb0:	4805      	ldr	r0, [pc, #20]	@ (8027ec8 <fiprintf+0x20>)
 8027eb2:	f853 2b04 	ldr.w	r2, [r3], #4
 8027eb6:	6800      	ldr	r0, [r0, #0]
 8027eb8:	9301      	str	r3, [sp, #4]
 8027eba:	f000 fabd 	bl	8028438 <_vfiprintf_r>
 8027ebe:	b002      	add	sp, #8
 8027ec0:	f85d eb04 	ldr.w	lr, [sp], #4
 8027ec4:	b003      	add	sp, #12
 8027ec6:	4770      	bx	lr
 8027ec8:	240000e8 	.word	0x240000e8

08027ecc <_fwalk_sglue>:
 8027ecc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8027ed0:	4607      	mov	r7, r0
 8027ed2:	4688      	mov	r8, r1
 8027ed4:	4614      	mov	r4, r2
 8027ed6:	2600      	movs	r6, #0
 8027ed8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8027edc:	f1b9 0901 	subs.w	r9, r9, #1
 8027ee0:	d505      	bpl.n	8027eee <_fwalk_sglue+0x22>
 8027ee2:	6824      	ldr	r4, [r4, #0]
 8027ee4:	2c00      	cmp	r4, #0
 8027ee6:	d1f7      	bne.n	8027ed8 <_fwalk_sglue+0xc>
 8027ee8:	4630      	mov	r0, r6
 8027eea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8027eee:	89ab      	ldrh	r3, [r5, #12]
 8027ef0:	2b01      	cmp	r3, #1
 8027ef2:	d907      	bls.n	8027f04 <_fwalk_sglue+0x38>
 8027ef4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8027ef8:	3301      	adds	r3, #1
 8027efa:	d003      	beq.n	8027f04 <_fwalk_sglue+0x38>
 8027efc:	4629      	mov	r1, r5
 8027efe:	4638      	mov	r0, r7
 8027f00:	47c0      	blx	r8
 8027f02:	4306      	orrs	r6, r0
 8027f04:	3568      	adds	r5, #104	@ 0x68
 8027f06:	e7e9      	b.n	8027edc <_fwalk_sglue+0x10>

08027f08 <__sread>:
 8027f08:	b510      	push	{r4, lr}
 8027f0a:	460c      	mov	r4, r1
 8027f0c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8027f10:	f000 f93e 	bl	8028190 <_read_r>
 8027f14:	2800      	cmp	r0, #0
 8027f16:	bfab      	itete	ge
 8027f18:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8027f1a:	89a3      	ldrhlt	r3, [r4, #12]
 8027f1c:	181b      	addge	r3, r3, r0
 8027f1e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8027f22:	bfac      	ite	ge
 8027f24:	6563      	strge	r3, [r4, #84]	@ 0x54
 8027f26:	81a3      	strhlt	r3, [r4, #12]
 8027f28:	bd10      	pop	{r4, pc}

08027f2a <__swrite>:
 8027f2a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8027f2e:	461f      	mov	r7, r3
 8027f30:	898b      	ldrh	r3, [r1, #12]
 8027f32:	05db      	lsls	r3, r3, #23
 8027f34:	4605      	mov	r5, r0
 8027f36:	460c      	mov	r4, r1
 8027f38:	4616      	mov	r6, r2
 8027f3a:	d505      	bpl.n	8027f48 <__swrite+0x1e>
 8027f3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8027f40:	2302      	movs	r3, #2
 8027f42:	2200      	movs	r2, #0
 8027f44:	f000 f912 	bl	802816c <_lseek_r>
 8027f48:	89a3      	ldrh	r3, [r4, #12]
 8027f4a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8027f4e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8027f52:	81a3      	strh	r3, [r4, #12]
 8027f54:	4632      	mov	r2, r6
 8027f56:	463b      	mov	r3, r7
 8027f58:	4628      	mov	r0, r5
 8027f5a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8027f5e:	f000 b94d 	b.w	80281fc <_write_r>

08027f62 <__sseek>:
 8027f62:	b510      	push	{r4, lr}
 8027f64:	460c      	mov	r4, r1
 8027f66:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8027f6a:	f000 f8ff 	bl	802816c <_lseek_r>
 8027f6e:	1c43      	adds	r3, r0, #1
 8027f70:	89a3      	ldrh	r3, [r4, #12]
 8027f72:	bf15      	itete	ne
 8027f74:	6560      	strne	r0, [r4, #84]	@ 0x54
 8027f76:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8027f7a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8027f7e:	81a3      	strheq	r3, [r4, #12]
 8027f80:	bf18      	it	ne
 8027f82:	81a3      	strhne	r3, [r4, #12]
 8027f84:	bd10      	pop	{r4, pc}

08027f86 <__sclose>:
 8027f86:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8027f8a:	f000 b8df 	b.w	802814c <_close_r>

08027f8e <__swbuf_r>:
 8027f8e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8027f90:	460e      	mov	r6, r1
 8027f92:	4614      	mov	r4, r2
 8027f94:	4605      	mov	r5, r0
 8027f96:	b118      	cbz	r0, 8027fa0 <__swbuf_r+0x12>
 8027f98:	6a03      	ldr	r3, [r0, #32]
 8027f9a:	b90b      	cbnz	r3, 8027fa0 <__swbuf_r+0x12>
 8027f9c:	f7ff ff6c 	bl	8027e78 <__sinit>
 8027fa0:	69a3      	ldr	r3, [r4, #24]
 8027fa2:	60a3      	str	r3, [r4, #8]
 8027fa4:	89a3      	ldrh	r3, [r4, #12]
 8027fa6:	071a      	lsls	r2, r3, #28
 8027fa8:	d501      	bpl.n	8027fae <__swbuf_r+0x20>
 8027faa:	6923      	ldr	r3, [r4, #16]
 8027fac:	b943      	cbnz	r3, 8027fc0 <__swbuf_r+0x32>
 8027fae:	4621      	mov	r1, r4
 8027fb0:	4628      	mov	r0, r5
 8027fb2:	f000 f82b 	bl	802800c <__swsetup_r>
 8027fb6:	b118      	cbz	r0, 8027fc0 <__swbuf_r+0x32>
 8027fb8:	f04f 37ff 	mov.w	r7, #4294967295
 8027fbc:	4638      	mov	r0, r7
 8027fbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8027fc0:	6823      	ldr	r3, [r4, #0]
 8027fc2:	6922      	ldr	r2, [r4, #16]
 8027fc4:	1a98      	subs	r0, r3, r2
 8027fc6:	6963      	ldr	r3, [r4, #20]
 8027fc8:	b2f6      	uxtb	r6, r6
 8027fca:	4283      	cmp	r3, r0
 8027fcc:	4637      	mov	r7, r6
 8027fce:	dc05      	bgt.n	8027fdc <__swbuf_r+0x4e>
 8027fd0:	4621      	mov	r1, r4
 8027fd2:	4628      	mov	r0, r5
 8027fd4:	f000 fd5a 	bl	8028a8c <_fflush_r>
 8027fd8:	2800      	cmp	r0, #0
 8027fda:	d1ed      	bne.n	8027fb8 <__swbuf_r+0x2a>
 8027fdc:	68a3      	ldr	r3, [r4, #8]
 8027fde:	3b01      	subs	r3, #1
 8027fe0:	60a3      	str	r3, [r4, #8]
 8027fe2:	6823      	ldr	r3, [r4, #0]
 8027fe4:	1c5a      	adds	r2, r3, #1
 8027fe6:	6022      	str	r2, [r4, #0]
 8027fe8:	701e      	strb	r6, [r3, #0]
 8027fea:	6962      	ldr	r2, [r4, #20]
 8027fec:	1c43      	adds	r3, r0, #1
 8027fee:	429a      	cmp	r2, r3
 8027ff0:	d004      	beq.n	8027ffc <__swbuf_r+0x6e>
 8027ff2:	89a3      	ldrh	r3, [r4, #12]
 8027ff4:	07db      	lsls	r3, r3, #31
 8027ff6:	d5e1      	bpl.n	8027fbc <__swbuf_r+0x2e>
 8027ff8:	2e0a      	cmp	r6, #10
 8027ffa:	d1df      	bne.n	8027fbc <__swbuf_r+0x2e>
 8027ffc:	4621      	mov	r1, r4
 8027ffe:	4628      	mov	r0, r5
 8028000:	f000 fd44 	bl	8028a8c <_fflush_r>
 8028004:	2800      	cmp	r0, #0
 8028006:	d0d9      	beq.n	8027fbc <__swbuf_r+0x2e>
 8028008:	e7d6      	b.n	8027fb8 <__swbuf_r+0x2a>
	...

0802800c <__swsetup_r>:
 802800c:	b538      	push	{r3, r4, r5, lr}
 802800e:	4b29      	ldr	r3, [pc, #164]	@ (80280b4 <__swsetup_r+0xa8>)
 8028010:	4605      	mov	r5, r0
 8028012:	6818      	ldr	r0, [r3, #0]
 8028014:	460c      	mov	r4, r1
 8028016:	b118      	cbz	r0, 8028020 <__swsetup_r+0x14>
 8028018:	6a03      	ldr	r3, [r0, #32]
 802801a:	b90b      	cbnz	r3, 8028020 <__swsetup_r+0x14>
 802801c:	f7ff ff2c 	bl	8027e78 <__sinit>
 8028020:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8028024:	0719      	lsls	r1, r3, #28
 8028026:	d422      	bmi.n	802806e <__swsetup_r+0x62>
 8028028:	06da      	lsls	r2, r3, #27
 802802a:	d407      	bmi.n	802803c <__swsetup_r+0x30>
 802802c:	2209      	movs	r2, #9
 802802e:	602a      	str	r2, [r5, #0]
 8028030:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8028034:	81a3      	strh	r3, [r4, #12]
 8028036:	f04f 30ff 	mov.w	r0, #4294967295
 802803a:	e033      	b.n	80280a4 <__swsetup_r+0x98>
 802803c:	0758      	lsls	r0, r3, #29
 802803e:	d512      	bpl.n	8028066 <__swsetup_r+0x5a>
 8028040:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8028042:	b141      	cbz	r1, 8028056 <__swsetup_r+0x4a>
 8028044:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8028048:	4299      	cmp	r1, r3
 802804a:	d002      	beq.n	8028052 <__swsetup_r+0x46>
 802804c:	4628      	mov	r0, r5
 802804e:	f000 f97f 	bl	8028350 <_free_r>
 8028052:	2300      	movs	r3, #0
 8028054:	6363      	str	r3, [r4, #52]	@ 0x34
 8028056:	89a3      	ldrh	r3, [r4, #12]
 8028058:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 802805c:	81a3      	strh	r3, [r4, #12]
 802805e:	2300      	movs	r3, #0
 8028060:	6063      	str	r3, [r4, #4]
 8028062:	6923      	ldr	r3, [r4, #16]
 8028064:	6023      	str	r3, [r4, #0]
 8028066:	89a3      	ldrh	r3, [r4, #12]
 8028068:	f043 0308 	orr.w	r3, r3, #8
 802806c:	81a3      	strh	r3, [r4, #12]
 802806e:	6923      	ldr	r3, [r4, #16]
 8028070:	b94b      	cbnz	r3, 8028086 <__swsetup_r+0x7a>
 8028072:	89a3      	ldrh	r3, [r4, #12]
 8028074:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8028078:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 802807c:	d003      	beq.n	8028086 <__swsetup_r+0x7a>
 802807e:	4621      	mov	r1, r4
 8028080:	4628      	mov	r0, r5
 8028082:	f000 fd51 	bl	8028b28 <__smakebuf_r>
 8028086:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802808a:	f013 0201 	ands.w	r2, r3, #1
 802808e:	d00a      	beq.n	80280a6 <__swsetup_r+0x9a>
 8028090:	2200      	movs	r2, #0
 8028092:	60a2      	str	r2, [r4, #8]
 8028094:	6962      	ldr	r2, [r4, #20]
 8028096:	4252      	negs	r2, r2
 8028098:	61a2      	str	r2, [r4, #24]
 802809a:	6922      	ldr	r2, [r4, #16]
 802809c:	b942      	cbnz	r2, 80280b0 <__swsetup_r+0xa4>
 802809e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80280a2:	d1c5      	bne.n	8028030 <__swsetup_r+0x24>
 80280a4:	bd38      	pop	{r3, r4, r5, pc}
 80280a6:	0799      	lsls	r1, r3, #30
 80280a8:	bf58      	it	pl
 80280aa:	6962      	ldrpl	r2, [r4, #20]
 80280ac:	60a2      	str	r2, [r4, #8]
 80280ae:	e7f4      	b.n	802809a <__swsetup_r+0x8e>
 80280b0:	2000      	movs	r0, #0
 80280b2:	e7f7      	b.n	80280a4 <__swsetup_r+0x98>
 80280b4:	240000e8 	.word	0x240000e8

080280b8 <memset>:
 80280b8:	4402      	add	r2, r0
 80280ba:	4603      	mov	r3, r0
 80280bc:	4293      	cmp	r3, r2
 80280be:	d100      	bne.n	80280c2 <memset+0xa>
 80280c0:	4770      	bx	lr
 80280c2:	f803 1b01 	strb.w	r1, [r3], #1
 80280c6:	e7f9      	b.n	80280bc <memset+0x4>

080280c8 <strncmp>:
 80280c8:	b510      	push	{r4, lr}
 80280ca:	b16a      	cbz	r2, 80280e8 <strncmp+0x20>
 80280cc:	3901      	subs	r1, #1
 80280ce:	1884      	adds	r4, r0, r2
 80280d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80280d4:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80280d8:	429a      	cmp	r2, r3
 80280da:	d103      	bne.n	80280e4 <strncmp+0x1c>
 80280dc:	42a0      	cmp	r0, r4
 80280de:	d001      	beq.n	80280e4 <strncmp+0x1c>
 80280e0:	2a00      	cmp	r2, #0
 80280e2:	d1f5      	bne.n	80280d0 <strncmp+0x8>
 80280e4:	1ad0      	subs	r0, r2, r3
 80280e6:	bd10      	pop	{r4, pc}
 80280e8:	4610      	mov	r0, r2
 80280ea:	e7fc      	b.n	80280e6 <strncmp+0x1e>

080280ec <_raise_r>:
 80280ec:	291f      	cmp	r1, #31
 80280ee:	b538      	push	{r3, r4, r5, lr}
 80280f0:	4605      	mov	r5, r0
 80280f2:	460c      	mov	r4, r1
 80280f4:	d904      	bls.n	8028100 <_raise_r+0x14>
 80280f6:	2316      	movs	r3, #22
 80280f8:	6003      	str	r3, [r0, #0]
 80280fa:	f04f 30ff 	mov.w	r0, #4294967295
 80280fe:	bd38      	pop	{r3, r4, r5, pc}
 8028100:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8028102:	b112      	cbz	r2, 802810a <_raise_r+0x1e>
 8028104:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8028108:	b94b      	cbnz	r3, 802811e <_raise_r+0x32>
 802810a:	4628      	mov	r0, r5
 802810c:	f000 f864 	bl	80281d8 <_getpid_r>
 8028110:	4622      	mov	r2, r4
 8028112:	4601      	mov	r1, r0
 8028114:	4628      	mov	r0, r5
 8028116:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 802811a:	f000 b84b 	b.w	80281b4 <_kill_r>
 802811e:	2b01      	cmp	r3, #1
 8028120:	d00a      	beq.n	8028138 <_raise_r+0x4c>
 8028122:	1c59      	adds	r1, r3, #1
 8028124:	d103      	bne.n	802812e <_raise_r+0x42>
 8028126:	2316      	movs	r3, #22
 8028128:	6003      	str	r3, [r0, #0]
 802812a:	2001      	movs	r0, #1
 802812c:	e7e7      	b.n	80280fe <_raise_r+0x12>
 802812e:	2100      	movs	r1, #0
 8028130:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8028134:	4620      	mov	r0, r4
 8028136:	4798      	blx	r3
 8028138:	2000      	movs	r0, #0
 802813a:	e7e0      	b.n	80280fe <_raise_r+0x12>

0802813c <raise>:
 802813c:	4b02      	ldr	r3, [pc, #8]	@ (8028148 <raise+0xc>)
 802813e:	4601      	mov	r1, r0
 8028140:	6818      	ldr	r0, [r3, #0]
 8028142:	f7ff bfd3 	b.w	80280ec <_raise_r>
 8028146:	bf00      	nop
 8028148:	240000e8 	.word	0x240000e8

0802814c <_close_r>:
 802814c:	b538      	push	{r3, r4, r5, lr}
 802814e:	4d06      	ldr	r5, [pc, #24]	@ (8028168 <_close_r+0x1c>)
 8028150:	2300      	movs	r3, #0
 8028152:	4604      	mov	r4, r0
 8028154:	4608      	mov	r0, r1
 8028156:	602b      	str	r3, [r5, #0]
 8028158:	f7d9 fab0 	bl	80016bc <_close>
 802815c:	1c43      	adds	r3, r0, #1
 802815e:	d102      	bne.n	8028166 <_close_r+0x1a>
 8028160:	682b      	ldr	r3, [r5, #0]
 8028162:	b103      	cbz	r3, 8028166 <_close_r+0x1a>
 8028164:	6023      	str	r3, [r4, #0]
 8028166:	bd38      	pop	{r3, r4, r5, pc}
 8028168:	240299a0 	.word	0x240299a0

0802816c <_lseek_r>:
 802816c:	b538      	push	{r3, r4, r5, lr}
 802816e:	4d07      	ldr	r5, [pc, #28]	@ (802818c <_lseek_r+0x20>)
 8028170:	4604      	mov	r4, r0
 8028172:	4608      	mov	r0, r1
 8028174:	4611      	mov	r1, r2
 8028176:	2200      	movs	r2, #0
 8028178:	602a      	str	r2, [r5, #0]
 802817a:	461a      	mov	r2, r3
 802817c:	f7d9 faa8 	bl	80016d0 <_lseek>
 8028180:	1c43      	adds	r3, r0, #1
 8028182:	d102      	bne.n	802818a <_lseek_r+0x1e>
 8028184:	682b      	ldr	r3, [r5, #0]
 8028186:	b103      	cbz	r3, 802818a <_lseek_r+0x1e>
 8028188:	6023      	str	r3, [r4, #0]
 802818a:	bd38      	pop	{r3, r4, r5, pc}
 802818c:	240299a0 	.word	0x240299a0

08028190 <_read_r>:
 8028190:	b538      	push	{r3, r4, r5, lr}
 8028192:	4d07      	ldr	r5, [pc, #28]	@ (80281b0 <_read_r+0x20>)
 8028194:	4604      	mov	r4, r0
 8028196:	4608      	mov	r0, r1
 8028198:	4611      	mov	r1, r2
 802819a:	2200      	movs	r2, #0
 802819c:	602a      	str	r2, [r5, #0]
 802819e:	461a      	mov	r2, r3
 80281a0:	f7d9 fa70 	bl	8001684 <_read>
 80281a4:	1c43      	adds	r3, r0, #1
 80281a6:	d102      	bne.n	80281ae <_read_r+0x1e>
 80281a8:	682b      	ldr	r3, [r5, #0]
 80281aa:	b103      	cbz	r3, 80281ae <_read_r+0x1e>
 80281ac:	6023      	str	r3, [r4, #0]
 80281ae:	bd38      	pop	{r3, r4, r5, pc}
 80281b0:	240299a0 	.word	0x240299a0

080281b4 <_kill_r>:
 80281b4:	b538      	push	{r3, r4, r5, lr}
 80281b6:	4d07      	ldr	r5, [pc, #28]	@ (80281d4 <_kill_r+0x20>)
 80281b8:	2300      	movs	r3, #0
 80281ba:	4604      	mov	r4, r0
 80281bc:	4608      	mov	r0, r1
 80281be:	4611      	mov	r1, r2
 80281c0:	602b      	str	r3, [r5, #0]
 80281c2:	f7d9 fa51 	bl	8001668 <_kill>
 80281c6:	1c43      	adds	r3, r0, #1
 80281c8:	d102      	bne.n	80281d0 <_kill_r+0x1c>
 80281ca:	682b      	ldr	r3, [r5, #0]
 80281cc:	b103      	cbz	r3, 80281d0 <_kill_r+0x1c>
 80281ce:	6023      	str	r3, [r4, #0]
 80281d0:	bd38      	pop	{r3, r4, r5, pc}
 80281d2:	bf00      	nop
 80281d4:	240299a0 	.word	0x240299a0

080281d8 <_getpid_r>:
 80281d8:	f7d9 ba44 	b.w	8001664 <_getpid>

080281dc <_sbrk_r>:
 80281dc:	b538      	push	{r3, r4, r5, lr}
 80281de:	4d06      	ldr	r5, [pc, #24]	@ (80281f8 <_sbrk_r+0x1c>)
 80281e0:	2300      	movs	r3, #0
 80281e2:	4604      	mov	r4, r0
 80281e4:	4608      	mov	r0, r1
 80281e6:	602b      	str	r3, [r5, #0]
 80281e8:	f7d9 fa74 	bl	80016d4 <_sbrk>
 80281ec:	1c43      	adds	r3, r0, #1
 80281ee:	d102      	bne.n	80281f6 <_sbrk_r+0x1a>
 80281f0:	682b      	ldr	r3, [r5, #0]
 80281f2:	b103      	cbz	r3, 80281f6 <_sbrk_r+0x1a>
 80281f4:	6023      	str	r3, [r4, #0]
 80281f6:	bd38      	pop	{r3, r4, r5, pc}
 80281f8:	240299a0 	.word	0x240299a0

080281fc <_write_r>:
 80281fc:	b538      	push	{r3, r4, r5, lr}
 80281fe:	4d07      	ldr	r5, [pc, #28]	@ (802821c <_write_r+0x20>)
 8028200:	4604      	mov	r4, r0
 8028202:	4608      	mov	r0, r1
 8028204:	4611      	mov	r1, r2
 8028206:	2200      	movs	r2, #0
 8028208:	602a      	str	r2, [r5, #0]
 802820a:	461a      	mov	r2, r3
 802820c:	f7d9 fa48 	bl	80016a0 <_write>
 8028210:	1c43      	adds	r3, r0, #1
 8028212:	d102      	bne.n	802821a <_write_r+0x1e>
 8028214:	682b      	ldr	r3, [r5, #0]
 8028216:	b103      	cbz	r3, 802821a <_write_r+0x1e>
 8028218:	6023      	str	r3, [r4, #0]
 802821a:	bd38      	pop	{r3, r4, r5, pc}
 802821c:	240299a0 	.word	0x240299a0

08028220 <__errno>:
 8028220:	4b01      	ldr	r3, [pc, #4]	@ (8028228 <__errno+0x8>)
 8028222:	6818      	ldr	r0, [r3, #0]
 8028224:	4770      	bx	lr
 8028226:	bf00      	nop
 8028228:	240000e8 	.word	0x240000e8

0802822c <__libc_init_array>:
 802822c:	b570      	push	{r4, r5, r6, lr}
 802822e:	4d0d      	ldr	r5, [pc, #52]	@ (8028264 <__libc_init_array+0x38>)
 8028230:	4c0d      	ldr	r4, [pc, #52]	@ (8028268 <__libc_init_array+0x3c>)
 8028232:	1b64      	subs	r4, r4, r5
 8028234:	10a4      	asrs	r4, r4, #2
 8028236:	2600      	movs	r6, #0
 8028238:	42a6      	cmp	r6, r4
 802823a:	d109      	bne.n	8028250 <__libc_init_array+0x24>
 802823c:	4d0b      	ldr	r5, [pc, #44]	@ (802826c <__libc_init_array+0x40>)
 802823e:	4c0c      	ldr	r4, [pc, #48]	@ (8028270 <__libc_init_array+0x44>)
 8028240:	f000 fcd0 	bl	8028be4 <_init>
 8028244:	1b64      	subs	r4, r4, r5
 8028246:	10a4      	asrs	r4, r4, #2
 8028248:	2600      	movs	r6, #0
 802824a:	42a6      	cmp	r6, r4
 802824c:	d105      	bne.n	802825a <__libc_init_array+0x2e>
 802824e:	bd70      	pop	{r4, r5, r6, pc}
 8028250:	f855 3b04 	ldr.w	r3, [r5], #4
 8028254:	4798      	blx	r3
 8028256:	3601      	adds	r6, #1
 8028258:	e7ee      	b.n	8028238 <__libc_init_array+0xc>
 802825a:	f855 3b04 	ldr.w	r3, [r5], #4
 802825e:	4798      	blx	r3
 8028260:	3601      	adds	r6, #1
 8028262:	e7f2      	b.n	802824a <__libc_init_array+0x1e>
 8028264:	08037134 	.word	0x08037134
 8028268:	08037134 	.word	0x08037134
 802826c:	08037134 	.word	0x08037134
 8028270:	08037150 	.word	0x08037150

08028274 <__retarget_lock_init_recursive>:
 8028274:	4770      	bx	lr

08028276 <__retarget_lock_acquire_recursive>:
 8028276:	4770      	bx	lr

08028278 <__retarget_lock_release_recursive>:
 8028278:	4770      	bx	lr

0802827a <memcpy>:
 802827a:	440a      	add	r2, r1
 802827c:	4291      	cmp	r1, r2
 802827e:	f100 33ff 	add.w	r3, r0, #4294967295
 8028282:	d100      	bne.n	8028286 <memcpy+0xc>
 8028284:	4770      	bx	lr
 8028286:	b510      	push	{r4, lr}
 8028288:	f811 4b01 	ldrb.w	r4, [r1], #1
 802828c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8028290:	4291      	cmp	r1, r2
 8028292:	d1f9      	bne.n	8028288 <memcpy+0xe>
 8028294:	bd10      	pop	{r4, pc}
	...

08028298 <__register_exitproc>:
 8028298:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802829c:	4d27      	ldr	r5, [pc, #156]	@ (802833c <__register_exitproc+0xa4>)
 802829e:	4607      	mov	r7, r0
 80282a0:	6828      	ldr	r0, [r5, #0]
 80282a2:	4691      	mov	r9, r2
 80282a4:	460e      	mov	r6, r1
 80282a6:	4698      	mov	r8, r3
 80282a8:	f7ff ffe5 	bl	8028276 <__retarget_lock_acquire_recursive>
 80282ac:	4a24      	ldr	r2, [pc, #144]	@ (8028340 <__register_exitproc+0xa8>)
 80282ae:	6814      	ldr	r4, [r2, #0]
 80282b0:	b93c      	cbnz	r4, 80282c2 <__register_exitproc+0x2a>
 80282b2:	4b24      	ldr	r3, [pc, #144]	@ (8028344 <__register_exitproc+0xac>)
 80282b4:	6013      	str	r3, [r2, #0]
 80282b6:	4a24      	ldr	r2, [pc, #144]	@ (8028348 <__register_exitproc+0xb0>)
 80282b8:	b112      	cbz	r2, 80282c0 <__register_exitproc+0x28>
 80282ba:	6812      	ldr	r2, [r2, #0]
 80282bc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
 80282c0:	4c20      	ldr	r4, [pc, #128]	@ (8028344 <__register_exitproc+0xac>)
 80282c2:	6863      	ldr	r3, [r4, #4]
 80282c4:	2b1f      	cmp	r3, #31
 80282c6:	dd06      	ble.n	80282d6 <__register_exitproc+0x3e>
 80282c8:	6828      	ldr	r0, [r5, #0]
 80282ca:	f7ff ffd5 	bl	8028278 <__retarget_lock_release_recursive>
 80282ce:	f04f 30ff 	mov.w	r0, #4294967295
 80282d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80282d6:	b32f      	cbz	r7, 8028324 <__register_exitproc+0x8c>
 80282d8:	f8d4 0088 	ldr.w	r0, [r4, #136]	@ 0x88
 80282dc:	b968      	cbnz	r0, 80282fa <__register_exitproc+0x62>
 80282de:	4b1b      	ldr	r3, [pc, #108]	@ (802834c <__register_exitproc+0xb4>)
 80282e0:	2b00      	cmp	r3, #0
 80282e2:	d0f1      	beq.n	80282c8 <__register_exitproc+0x30>
 80282e4:	f44f 7084 	mov.w	r0, #264	@ 0x108
 80282e8:	f7ff fc6e 	bl	8027bc8 <malloc>
 80282ec:	2800      	cmp	r0, #0
 80282ee:	d0eb      	beq.n	80282c8 <__register_exitproc+0x30>
 80282f0:	2300      	movs	r3, #0
 80282f2:	e9c0 3340 	strd	r3, r3, [r0, #256]	@ 0x100
 80282f6:	f8c4 0088 	str.w	r0, [r4, #136]	@ 0x88
 80282fa:	6863      	ldr	r3, [r4, #4]
 80282fc:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 8028300:	2201      	movs	r2, #1
 8028302:	409a      	lsls	r2, r3
 8028304:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 8028308:	f8d0 3100 	ldr.w	r3, [r0, #256]	@ 0x100
 802830c:	4313      	orrs	r3, r2
 802830e:	f8c0 3100 	str.w	r3, [r0, #256]	@ 0x100
 8028312:	2f02      	cmp	r7, #2
 8028314:	f8c1 8080 	str.w	r8, [r1, #128]	@ 0x80
 8028318:	bf02      	ittt	eq
 802831a:	f8d0 3104 	ldreq.w	r3, [r0, #260]	@ 0x104
 802831e:	4313      	orreq	r3, r2
 8028320:	f8c0 3104 	streq.w	r3, [r0, #260]	@ 0x104
 8028324:	6863      	ldr	r3, [r4, #4]
 8028326:	6828      	ldr	r0, [r5, #0]
 8028328:	1c5a      	adds	r2, r3, #1
 802832a:	3302      	adds	r3, #2
 802832c:	6062      	str	r2, [r4, #4]
 802832e:	f844 6023 	str.w	r6, [r4, r3, lsl #2]
 8028332:	f7ff ffa1 	bl	8028278 <__retarget_lock_release_recursive>
 8028336:	2000      	movs	r0, #0
 8028338:	e7cb      	b.n	80282d2 <__register_exitproc+0x3a>
 802833a:	bf00      	nop
 802833c:	24000138 	.word	0x24000138
 8028340:	24029a34 	.word	0x24029a34
 8028344:	240299a8 	.word	0x240299a8
 8028348:	0802d7bc 	.word	0x0802d7bc
 802834c:	08027bc9 	.word	0x08027bc9

08028350 <_free_r>:
 8028350:	b538      	push	{r3, r4, r5, lr}
 8028352:	4605      	mov	r5, r0
 8028354:	2900      	cmp	r1, #0
 8028356:	d041      	beq.n	80283dc <_free_r+0x8c>
 8028358:	f851 3c04 	ldr.w	r3, [r1, #-4]
 802835c:	1f0c      	subs	r4, r1, #4
 802835e:	2b00      	cmp	r3, #0
 8028360:	bfb8      	it	lt
 8028362:	18e4      	addlt	r4, r4, r3
 8028364:	f7ff fce2 	bl	8027d2c <__malloc_lock>
 8028368:	4a1d      	ldr	r2, [pc, #116]	@ (80283e0 <_free_r+0x90>)
 802836a:	6813      	ldr	r3, [r2, #0]
 802836c:	b933      	cbnz	r3, 802837c <_free_r+0x2c>
 802836e:	6063      	str	r3, [r4, #4]
 8028370:	6014      	str	r4, [r2, #0]
 8028372:	4628      	mov	r0, r5
 8028374:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8028378:	f7ff bcde 	b.w	8027d38 <__malloc_unlock>
 802837c:	42a3      	cmp	r3, r4
 802837e:	d908      	bls.n	8028392 <_free_r+0x42>
 8028380:	6820      	ldr	r0, [r4, #0]
 8028382:	1821      	adds	r1, r4, r0
 8028384:	428b      	cmp	r3, r1
 8028386:	bf01      	itttt	eq
 8028388:	6819      	ldreq	r1, [r3, #0]
 802838a:	685b      	ldreq	r3, [r3, #4]
 802838c:	1809      	addeq	r1, r1, r0
 802838e:	6021      	streq	r1, [r4, #0]
 8028390:	e7ed      	b.n	802836e <_free_r+0x1e>
 8028392:	461a      	mov	r2, r3
 8028394:	685b      	ldr	r3, [r3, #4]
 8028396:	b10b      	cbz	r3, 802839c <_free_r+0x4c>
 8028398:	42a3      	cmp	r3, r4
 802839a:	d9fa      	bls.n	8028392 <_free_r+0x42>
 802839c:	6811      	ldr	r1, [r2, #0]
 802839e:	1850      	adds	r0, r2, r1
 80283a0:	42a0      	cmp	r0, r4
 80283a2:	d10b      	bne.n	80283bc <_free_r+0x6c>
 80283a4:	6820      	ldr	r0, [r4, #0]
 80283a6:	4401      	add	r1, r0
 80283a8:	1850      	adds	r0, r2, r1
 80283aa:	4283      	cmp	r3, r0
 80283ac:	6011      	str	r1, [r2, #0]
 80283ae:	d1e0      	bne.n	8028372 <_free_r+0x22>
 80283b0:	6818      	ldr	r0, [r3, #0]
 80283b2:	685b      	ldr	r3, [r3, #4]
 80283b4:	6053      	str	r3, [r2, #4]
 80283b6:	4408      	add	r0, r1
 80283b8:	6010      	str	r0, [r2, #0]
 80283ba:	e7da      	b.n	8028372 <_free_r+0x22>
 80283bc:	d902      	bls.n	80283c4 <_free_r+0x74>
 80283be:	230c      	movs	r3, #12
 80283c0:	602b      	str	r3, [r5, #0]
 80283c2:	e7d6      	b.n	8028372 <_free_r+0x22>
 80283c4:	6820      	ldr	r0, [r4, #0]
 80283c6:	1821      	adds	r1, r4, r0
 80283c8:	428b      	cmp	r3, r1
 80283ca:	bf04      	itt	eq
 80283cc:	6819      	ldreq	r1, [r3, #0]
 80283ce:	685b      	ldreq	r3, [r3, #4]
 80283d0:	6063      	str	r3, [r4, #4]
 80283d2:	bf04      	itt	eq
 80283d4:	1809      	addeq	r1, r1, r0
 80283d6:	6021      	streq	r1, [r4, #0]
 80283d8:	6054      	str	r4, [r2, #4]
 80283da:	e7ca      	b.n	8028372 <_free_r+0x22>
 80283dc:	bd38      	pop	{r3, r4, r5, pc}
 80283de:	bf00      	nop
 80283e0:	24029860 	.word	0x24029860

080283e4 <__sfputc_r>:
 80283e4:	6893      	ldr	r3, [r2, #8]
 80283e6:	3b01      	subs	r3, #1
 80283e8:	2b00      	cmp	r3, #0
 80283ea:	b410      	push	{r4}
 80283ec:	6093      	str	r3, [r2, #8]
 80283ee:	da08      	bge.n	8028402 <__sfputc_r+0x1e>
 80283f0:	6994      	ldr	r4, [r2, #24]
 80283f2:	42a3      	cmp	r3, r4
 80283f4:	db01      	blt.n	80283fa <__sfputc_r+0x16>
 80283f6:	290a      	cmp	r1, #10
 80283f8:	d103      	bne.n	8028402 <__sfputc_r+0x1e>
 80283fa:	f85d 4b04 	ldr.w	r4, [sp], #4
 80283fe:	f7ff bdc6 	b.w	8027f8e <__swbuf_r>
 8028402:	6813      	ldr	r3, [r2, #0]
 8028404:	1c58      	adds	r0, r3, #1
 8028406:	6010      	str	r0, [r2, #0]
 8028408:	7019      	strb	r1, [r3, #0]
 802840a:	4608      	mov	r0, r1
 802840c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8028410:	4770      	bx	lr

08028412 <__sfputs_r>:
 8028412:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8028414:	4606      	mov	r6, r0
 8028416:	460f      	mov	r7, r1
 8028418:	4614      	mov	r4, r2
 802841a:	18d5      	adds	r5, r2, r3
 802841c:	42ac      	cmp	r4, r5
 802841e:	d101      	bne.n	8028424 <__sfputs_r+0x12>
 8028420:	2000      	movs	r0, #0
 8028422:	e007      	b.n	8028434 <__sfputs_r+0x22>
 8028424:	f814 1b01 	ldrb.w	r1, [r4], #1
 8028428:	463a      	mov	r2, r7
 802842a:	4630      	mov	r0, r6
 802842c:	f7ff ffda 	bl	80283e4 <__sfputc_r>
 8028430:	1c43      	adds	r3, r0, #1
 8028432:	d1f3      	bne.n	802841c <__sfputs_r+0xa>
 8028434:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08028438 <_vfiprintf_r>:
 8028438:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802843c:	460d      	mov	r5, r1
 802843e:	b09d      	sub	sp, #116	@ 0x74
 8028440:	4614      	mov	r4, r2
 8028442:	4698      	mov	r8, r3
 8028444:	4606      	mov	r6, r0
 8028446:	b118      	cbz	r0, 8028450 <_vfiprintf_r+0x18>
 8028448:	6a03      	ldr	r3, [r0, #32]
 802844a:	b90b      	cbnz	r3, 8028450 <_vfiprintf_r+0x18>
 802844c:	f7ff fd14 	bl	8027e78 <__sinit>
 8028450:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8028452:	07d9      	lsls	r1, r3, #31
 8028454:	d405      	bmi.n	8028462 <_vfiprintf_r+0x2a>
 8028456:	89ab      	ldrh	r3, [r5, #12]
 8028458:	059a      	lsls	r2, r3, #22
 802845a:	d402      	bmi.n	8028462 <_vfiprintf_r+0x2a>
 802845c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 802845e:	f7ff ff0a 	bl	8028276 <__retarget_lock_acquire_recursive>
 8028462:	89ab      	ldrh	r3, [r5, #12]
 8028464:	071b      	lsls	r3, r3, #28
 8028466:	d501      	bpl.n	802846c <_vfiprintf_r+0x34>
 8028468:	692b      	ldr	r3, [r5, #16]
 802846a:	b99b      	cbnz	r3, 8028494 <_vfiprintf_r+0x5c>
 802846c:	4629      	mov	r1, r5
 802846e:	4630      	mov	r0, r6
 8028470:	f7ff fdcc 	bl	802800c <__swsetup_r>
 8028474:	b170      	cbz	r0, 8028494 <_vfiprintf_r+0x5c>
 8028476:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8028478:	07dc      	lsls	r4, r3, #31
 802847a:	d504      	bpl.n	8028486 <_vfiprintf_r+0x4e>
 802847c:	f04f 30ff 	mov.w	r0, #4294967295
 8028480:	b01d      	add	sp, #116	@ 0x74
 8028482:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8028486:	89ab      	ldrh	r3, [r5, #12]
 8028488:	0598      	lsls	r0, r3, #22
 802848a:	d4f7      	bmi.n	802847c <_vfiprintf_r+0x44>
 802848c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 802848e:	f7ff fef3 	bl	8028278 <__retarget_lock_release_recursive>
 8028492:	e7f3      	b.n	802847c <_vfiprintf_r+0x44>
 8028494:	2300      	movs	r3, #0
 8028496:	9309      	str	r3, [sp, #36]	@ 0x24
 8028498:	2320      	movs	r3, #32
 802849a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 802849e:	f8cd 800c 	str.w	r8, [sp, #12]
 80284a2:	2330      	movs	r3, #48	@ 0x30
 80284a4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8028654 <_vfiprintf_r+0x21c>
 80284a8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80284ac:	f04f 0901 	mov.w	r9, #1
 80284b0:	4623      	mov	r3, r4
 80284b2:	469a      	mov	sl, r3
 80284b4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80284b8:	b10a      	cbz	r2, 80284be <_vfiprintf_r+0x86>
 80284ba:	2a25      	cmp	r2, #37	@ 0x25
 80284bc:	d1f9      	bne.n	80284b2 <_vfiprintf_r+0x7a>
 80284be:	ebba 0b04 	subs.w	fp, sl, r4
 80284c2:	d00b      	beq.n	80284dc <_vfiprintf_r+0xa4>
 80284c4:	465b      	mov	r3, fp
 80284c6:	4622      	mov	r2, r4
 80284c8:	4629      	mov	r1, r5
 80284ca:	4630      	mov	r0, r6
 80284cc:	f7ff ffa1 	bl	8028412 <__sfputs_r>
 80284d0:	3001      	adds	r0, #1
 80284d2:	f000 80a7 	beq.w	8028624 <_vfiprintf_r+0x1ec>
 80284d6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80284d8:	445a      	add	r2, fp
 80284da:	9209      	str	r2, [sp, #36]	@ 0x24
 80284dc:	f89a 3000 	ldrb.w	r3, [sl]
 80284e0:	2b00      	cmp	r3, #0
 80284e2:	f000 809f 	beq.w	8028624 <_vfiprintf_r+0x1ec>
 80284e6:	2300      	movs	r3, #0
 80284e8:	f04f 32ff 	mov.w	r2, #4294967295
 80284ec:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80284f0:	f10a 0a01 	add.w	sl, sl, #1
 80284f4:	9304      	str	r3, [sp, #16]
 80284f6:	9307      	str	r3, [sp, #28]
 80284f8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80284fc:	931a      	str	r3, [sp, #104]	@ 0x68
 80284fe:	4654      	mov	r4, sl
 8028500:	2205      	movs	r2, #5
 8028502:	f814 1b01 	ldrb.w	r1, [r4], #1
 8028506:	4853      	ldr	r0, [pc, #332]	@ (8028654 <_vfiprintf_r+0x21c>)
 8028508:	f7d7 feea 	bl	80002e0 <memchr>
 802850c:	9a04      	ldr	r2, [sp, #16]
 802850e:	b9d8      	cbnz	r0, 8028548 <_vfiprintf_r+0x110>
 8028510:	06d1      	lsls	r1, r2, #27
 8028512:	bf44      	itt	mi
 8028514:	2320      	movmi	r3, #32
 8028516:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 802851a:	0713      	lsls	r3, r2, #28
 802851c:	bf44      	itt	mi
 802851e:	232b      	movmi	r3, #43	@ 0x2b
 8028520:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8028524:	f89a 3000 	ldrb.w	r3, [sl]
 8028528:	2b2a      	cmp	r3, #42	@ 0x2a
 802852a:	d015      	beq.n	8028558 <_vfiprintf_r+0x120>
 802852c:	9a07      	ldr	r2, [sp, #28]
 802852e:	4654      	mov	r4, sl
 8028530:	2000      	movs	r0, #0
 8028532:	f04f 0c0a 	mov.w	ip, #10
 8028536:	4621      	mov	r1, r4
 8028538:	f811 3b01 	ldrb.w	r3, [r1], #1
 802853c:	3b30      	subs	r3, #48	@ 0x30
 802853e:	2b09      	cmp	r3, #9
 8028540:	d94b      	bls.n	80285da <_vfiprintf_r+0x1a2>
 8028542:	b1b0      	cbz	r0, 8028572 <_vfiprintf_r+0x13a>
 8028544:	9207      	str	r2, [sp, #28]
 8028546:	e014      	b.n	8028572 <_vfiprintf_r+0x13a>
 8028548:	eba0 0308 	sub.w	r3, r0, r8
 802854c:	fa09 f303 	lsl.w	r3, r9, r3
 8028550:	4313      	orrs	r3, r2
 8028552:	9304      	str	r3, [sp, #16]
 8028554:	46a2      	mov	sl, r4
 8028556:	e7d2      	b.n	80284fe <_vfiprintf_r+0xc6>
 8028558:	9b03      	ldr	r3, [sp, #12]
 802855a:	1d19      	adds	r1, r3, #4
 802855c:	681b      	ldr	r3, [r3, #0]
 802855e:	9103      	str	r1, [sp, #12]
 8028560:	2b00      	cmp	r3, #0
 8028562:	bfbb      	ittet	lt
 8028564:	425b      	neglt	r3, r3
 8028566:	f042 0202 	orrlt.w	r2, r2, #2
 802856a:	9307      	strge	r3, [sp, #28]
 802856c:	9307      	strlt	r3, [sp, #28]
 802856e:	bfb8      	it	lt
 8028570:	9204      	strlt	r2, [sp, #16]
 8028572:	7823      	ldrb	r3, [r4, #0]
 8028574:	2b2e      	cmp	r3, #46	@ 0x2e
 8028576:	d10a      	bne.n	802858e <_vfiprintf_r+0x156>
 8028578:	7863      	ldrb	r3, [r4, #1]
 802857a:	2b2a      	cmp	r3, #42	@ 0x2a
 802857c:	d132      	bne.n	80285e4 <_vfiprintf_r+0x1ac>
 802857e:	9b03      	ldr	r3, [sp, #12]
 8028580:	1d1a      	adds	r2, r3, #4
 8028582:	681b      	ldr	r3, [r3, #0]
 8028584:	9203      	str	r2, [sp, #12]
 8028586:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 802858a:	3402      	adds	r4, #2
 802858c:	9305      	str	r3, [sp, #20]
 802858e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8028664 <_vfiprintf_r+0x22c>
 8028592:	7821      	ldrb	r1, [r4, #0]
 8028594:	2203      	movs	r2, #3
 8028596:	4650      	mov	r0, sl
 8028598:	f7d7 fea2 	bl	80002e0 <memchr>
 802859c:	b138      	cbz	r0, 80285ae <_vfiprintf_r+0x176>
 802859e:	9b04      	ldr	r3, [sp, #16]
 80285a0:	eba0 000a 	sub.w	r0, r0, sl
 80285a4:	2240      	movs	r2, #64	@ 0x40
 80285a6:	4082      	lsls	r2, r0
 80285a8:	4313      	orrs	r3, r2
 80285aa:	3401      	adds	r4, #1
 80285ac:	9304      	str	r3, [sp, #16]
 80285ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 80285b2:	4829      	ldr	r0, [pc, #164]	@ (8028658 <_vfiprintf_r+0x220>)
 80285b4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80285b8:	2206      	movs	r2, #6
 80285ba:	f7d7 fe91 	bl	80002e0 <memchr>
 80285be:	2800      	cmp	r0, #0
 80285c0:	d03f      	beq.n	8028642 <_vfiprintf_r+0x20a>
 80285c2:	4b26      	ldr	r3, [pc, #152]	@ (802865c <_vfiprintf_r+0x224>)
 80285c4:	bb1b      	cbnz	r3, 802860e <_vfiprintf_r+0x1d6>
 80285c6:	9b03      	ldr	r3, [sp, #12]
 80285c8:	3307      	adds	r3, #7
 80285ca:	f023 0307 	bic.w	r3, r3, #7
 80285ce:	3308      	adds	r3, #8
 80285d0:	9303      	str	r3, [sp, #12]
 80285d2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80285d4:	443b      	add	r3, r7
 80285d6:	9309      	str	r3, [sp, #36]	@ 0x24
 80285d8:	e76a      	b.n	80284b0 <_vfiprintf_r+0x78>
 80285da:	fb0c 3202 	mla	r2, ip, r2, r3
 80285de:	460c      	mov	r4, r1
 80285e0:	2001      	movs	r0, #1
 80285e2:	e7a8      	b.n	8028536 <_vfiprintf_r+0xfe>
 80285e4:	2300      	movs	r3, #0
 80285e6:	3401      	adds	r4, #1
 80285e8:	9305      	str	r3, [sp, #20]
 80285ea:	4619      	mov	r1, r3
 80285ec:	f04f 0c0a 	mov.w	ip, #10
 80285f0:	4620      	mov	r0, r4
 80285f2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80285f6:	3a30      	subs	r2, #48	@ 0x30
 80285f8:	2a09      	cmp	r2, #9
 80285fa:	d903      	bls.n	8028604 <_vfiprintf_r+0x1cc>
 80285fc:	2b00      	cmp	r3, #0
 80285fe:	d0c6      	beq.n	802858e <_vfiprintf_r+0x156>
 8028600:	9105      	str	r1, [sp, #20]
 8028602:	e7c4      	b.n	802858e <_vfiprintf_r+0x156>
 8028604:	fb0c 2101 	mla	r1, ip, r1, r2
 8028608:	4604      	mov	r4, r0
 802860a:	2301      	movs	r3, #1
 802860c:	e7f0      	b.n	80285f0 <_vfiprintf_r+0x1b8>
 802860e:	ab03      	add	r3, sp, #12
 8028610:	9300      	str	r3, [sp, #0]
 8028612:	462a      	mov	r2, r5
 8028614:	4b12      	ldr	r3, [pc, #72]	@ (8028660 <_vfiprintf_r+0x228>)
 8028616:	a904      	add	r1, sp, #16
 8028618:	4630      	mov	r0, r6
 802861a:	f3af 8000 	nop.w
 802861e:	4607      	mov	r7, r0
 8028620:	1c78      	adds	r0, r7, #1
 8028622:	d1d6      	bne.n	80285d2 <_vfiprintf_r+0x19a>
 8028624:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8028626:	07d9      	lsls	r1, r3, #31
 8028628:	d405      	bmi.n	8028636 <_vfiprintf_r+0x1fe>
 802862a:	89ab      	ldrh	r3, [r5, #12]
 802862c:	059a      	lsls	r2, r3, #22
 802862e:	d402      	bmi.n	8028636 <_vfiprintf_r+0x1fe>
 8028630:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8028632:	f7ff fe21 	bl	8028278 <__retarget_lock_release_recursive>
 8028636:	89ab      	ldrh	r3, [r5, #12]
 8028638:	065b      	lsls	r3, r3, #25
 802863a:	f53f af1f 	bmi.w	802847c <_vfiprintf_r+0x44>
 802863e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8028640:	e71e      	b.n	8028480 <_vfiprintf_r+0x48>
 8028642:	ab03      	add	r3, sp, #12
 8028644:	9300      	str	r3, [sp, #0]
 8028646:	462a      	mov	r2, r5
 8028648:	4b05      	ldr	r3, [pc, #20]	@ (8028660 <_vfiprintf_r+0x228>)
 802864a:	a904      	add	r1, sp, #16
 802864c:	4630      	mov	r0, r6
 802864e:	f000 f879 	bl	8028744 <_printf_i>
 8028652:	e7e4      	b.n	802861e <_vfiprintf_r+0x1e6>
 8028654:	0802d7c0 	.word	0x0802d7c0
 8028658:	0802d7ca 	.word	0x0802d7ca
 802865c:	00000000 	.word	0x00000000
 8028660:	08028413 	.word	0x08028413
 8028664:	0802d7c6 	.word	0x0802d7c6

08028668 <_printf_common>:
 8028668:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802866c:	4616      	mov	r6, r2
 802866e:	4698      	mov	r8, r3
 8028670:	688a      	ldr	r2, [r1, #8]
 8028672:	690b      	ldr	r3, [r1, #16]
 8028674:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8028678:	4293      	cmp	r3, r2
 802867a:	bfb8      	it	lt
 802867c:	4613      	movlt	r3, r2
 802867e:	6033      	str	r3, [r6, #0]
 8028680:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8028684:	4607      	mov	r7, r0
 8028686:	460c      	mov	r4, r1
 8028688:	b10a      	cbz	r2, 802868e <_printf_common+0x26>
 802868a:	3301      	adds	r3, #1
 802868c:	6033      	str	r3, [r6, #0]
 802868e:	6823      	ldr	r3, [r4, #0]
 8028690:	0699      	lsls	r1, r3, #26
 8028692:	bf42      	ittt	mi
 8028694:	6833      	ldrmi	r3, [r6, #0]
 8028696:	3302      	addmi	r3, #2
 8028698:	6033      	strmi	r3, [r6, #0]
 802869a:	6825      	ldr	r5, [r4, #0]
 802869c:	f015 0506 	ands.w	r5, r5, #6
 80286a0:	d106      	bne.n	80286b0 <_printf_common+0x48>
 80286a2:	f104 0a19 	add.w	sl, r4, #25
 80286a6:	68e3      	ldr	r3, [r4, #12]
 80286a8:	6832      	ldr	r2, [r6, #0]
 80286aa:	1a9b      	subs	r3, r3, r2
 80286ac:	42ab      	cmp	r3, r5
 80286ae:	dc26      	bgt.n	80286fe <_printf_common+0x96>
 80286b0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80286b4:	6822      	ldr	r2, [r4, #0]
 80286b6:	3b00      	subs	r3, #0
 80286b8:	bf18      	it	ne
 80286ba:	2301      	movne	r3, #1
 80286bc:	0692      	lsls	r2, r2, #26
 80286be:	d42b      	bmi.n	8028718 <_printf_common+0xb0>
 80286c0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80286c4:	4641      	mov	r1, r8
 80286c6:	4638      	mov	r0, r7
 80286c8:	47c8      	blx	r9
 80286ca:	3001      	adds	r0, #1
 80286cc:	d01e      	beq.n	802870c <_printf_common+0xa4>
 80286ce:	6823      	ldr	r3, [r4, #0]
 80286d0:	6922      	ldr	r2, [r4, #16]
 80286d2:	f003 0306 	and.w	r3, r3, #6
 80286d6:	2b04      	cmp	r3, #4
 80286d8:	bf02      	ittt	eq
 80286da:	68e5      	ldreq	r5, [r4, #12]
 80286dc:	6833      	ldreq	r3, [r6, #0]
 80286de:	1aed      	subeq	r5, r5, r3
 80286e0:	68a3      	ldr	r3, [r4, #8]
 80286e2:	bf0c      	ite	eq
 80286e4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80286e8:	2500      	movne	r5, #0
 80286ea:	4293      	cmp	r3, r2
 80286ec:	bfc4      	itt	gt
 80286ee:	1a9b      	subgt	r3, r3, r2
 80286f0:	18ed      	addgt	r5, r5, r3
 80286f2:	2600      	movs	r6, #0
 80286f4:	341a      	adds	r4, #26
 80286f6:	42b5      	cmp	r5, r6
 80286f8:	d11a      	bne.n	8028730 <_printf_common+0xc8>
 80286fa:	2000      	movs	r0, #0
 80286fc:	e008      	b.n	8028710 <_printf_common+0xa8>
 80286fe:	2301      	movs	r3, #1
 8028700:	4652      	mov	r2, sl
 8028702:	4641      	mov	r1, r8
 8028704:	4638      	mov	r0, r7
 8028706:	47c8      	blx	r9
 8028708:	3001      	adds	r0, #1
 802870a:	d103      	bne.n	8028714 <_printf_common+0xac>
 802870c:	f04f 30ff 	mov.w	r0, #4294967295
 8028710:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8028714:	3501      	adds	r5, #1
 8028716:	e7c6      	b.n	80286a6 <_printf_common+0x3e>
 8028718:	18e1      	adds	r1, r4, r3
 802871a:	1c5a      	adds	r2, r3, #1
 802871c:	2030      	movs	r0, #48	@ 0x30
 802871e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8028722:	4422      	add	r2, r4
 8028724:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8028728:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 802872c:	3302      	adds	r3, #2
 802872e:	e7c7      	b.n	80286c0 <_printf_common+0x58>
 8028730:	2301      	movs	r3, #1
 8028732:	4622      	mov	r2, r4
 8028734:	4641      	mov	r1, r8
 8028736:	4638      	mov	r0, r7
 8028738:	47c8      	blx	r9
 802873a:	3001      	adds	r0, #1
 802873c:	d0e6      	beq.n	802870c <_printf_common+0xa4>
 802873e:	3601      	adds	r6, #1
 8028740:	e7d9      	b.n	80286f6 <_printf_common+0x8e>
	...

08028744 <_printf_i>:
 8028744:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8028748:	7e0f      	ldrb	r7, [r1, #24]
 802874a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 802874c:	2f78      	cmp	r7, #120	@ 0x78
 802874e:	4691      	mov	r9, r2
 8028750:	4680      	mov	r8, r0
 8028752:	460c      	mov	r4, r1
 8028754:	469a      	mov	sl, r3
 8028756:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 802875a:	d807      	bhi.n	802876c <_printf_i+0x28>
 802875c:	2f62      	cmp	r7, #98	@ 0x62
 802875e:	d80a      	bhi.n	8028776 <_printf_i+0x32>
 8028760:	2f00      	cmp	r7, #0
 8028762:	f000 80d2 	beq.w	802890a <_printf_i+0x1c6>
 8028766:	2f58      	cmp	r7, #88	@ 0x58
 8028768:	f000 80b9 	beq.w	80288de <_printf_i+0x19a>
 802876c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8028770:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8028774:	e03a      	b.n	80287ec <_printf_i+0xa8>
 8028776:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 802877a:	2b15      	cmp	r3, #21
 802877c:	d8f6      	bhi.n	802876c <_printf_i+0x28>
 802877e:	a101      	add	r1, pc, #4	@ (adr r1, 8028784 <_printf_i+0x40>)
 8028780:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8028784:	080287dd 	.word	0x080287dd
 8028788:	080287f1 	.word	0x080287f1
 802878c:	0802876d 	.word	0x0802876d
 8028790:	0802876d 	.word	0x0802876d
 8028794:	0802876d 	.word	0x0802876d
 8028798:	0802876d 	.word	0x0802876d
 802879c:	080287f1 	.word	0x080287f1
 80287a0:	0802876d 	.word	0x0802876d
 80287a4:	0802876d 	.word	0x0802876d
 80287a8:	0802876d 	.word	0x0802876d
 80287ac:	0802876d 	.word	0x0802876d
 80287b0:	080288f1 	.word	0x080288f1
 80287b4:	0802881b 	.word	0x0802881b
 80287b8:	080288ab 	.word	0x080288ab
 80287bc:	0802876d 	.word	0x0802876d
 80287c0:	0802876d 	.word	0x0802876d
 80287c4:	08028913 	.word	0x08028913
 80287c8:	0802876d 	.word	0x0802876d
 80287cc:	0802881b 	.word	0x0802881b
 80287d0:	0802876d 	.word	0x0802876d
 80287d4:	0802876d 	.word	0x0802876d
 80287d8:	080288b3 	.word	0x080288b3
 80287dc:	6833      	ldr	r3, [r6, #0]
 80287de:	1d1a      	adds	r2, r3, #4
 80287e0:	681b      	ldr	r3, [r3, #0]
 80287e2:	6032      	str	r2, [r6, #0]
 80287e4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80287e8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80287ec:	2301      	movs	r3, #1
 80287ee:	e09d      	b.n	802892c <_printf_i+0x1e8>
 80287f0:	6833      	ldr	r3, [r6, #0]
 80287f2:	6820      	ldr	r0, [r4, #0]
 80287f4:	1d19      	adds	r1, r3, #4
 80287f6:	6031      	str	r1, [r6, #0]
 80287f8:	0606      	lsls	r6, r0, #24
 80287fa:	d501      	bpl.n	8028800 <_printf_i+0xbc>
 80287fc:	681d      	ldr	r5, [r3, #0]
 80287fe:	e003      	b.n	8028808 <_printf_i+0xc4>
 8028800:	0645      	lsls	r5, r0, #25
 8028802:	d5fb      	bpl.n	80287fc <_printf_i+0xb8>
 8028804:	f9b3 5000 	ldrsh.w	r5, [r3]
 8028808:	2d00      	cmp	r5, #0
 802880a:	da03      	bge.n	8028814 <_printf_i+0xd0>
 802880c:	232d      	movs	r3, #45	@ 0x2d
 802880e:	426d      	negs	r5, r5
 8028810:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8028814:	4859      	ldr	r0, [pc, #356]	@ (802897c <_printf_i+0x238>)
 8028816:	230a      	movs	r3, #10
 8028818:	e011      	b.n	802883e <_printf_i+0xfa>
 802881a:	6821      	ldr	r1, [r4, #0]
 802881c:	6833      	ldr	r3, [r6, #0]
 802881e:	0608      	lsls	r0, r1, #24
 8028820:	f853 5b04 	ldr.w	r5, [r3], #4
 8028824:	d402      	bmi.n	802882c <_printf_i+0xe8>
 8028826:	0649      	lsls	r1, r1, #25
 8028828:	bf48      	it	mi
 802882a:	b2ad      	uxthmi	r5, r5
 802882c:	2f6f      	cmp	r7, #111	@ 0x6f
 802882e:	4853      	ldr	r0, [pc, #332]	@ (802897c <_printf_i+0x238>)
 8028830:	6033      	str	r3, [r6, #0]
 8028832:	bf14      	ite	ne
 8028834:	230a      	movne	r3, #10
 8028836:	2308      	moveq	r3, #8
 8028838:	2100      	movs	r1, #0
 802883a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 802883e:	6866      	ldr	r6, [r4, #4]
 8028840:	60a6      	str	r6, [r4, #8]
 8028842:	2e00      	cmp	r6, #0
 8028844:	bfa2      	ittt	ge
 8028846:	6821      	ldrge	r1, [r4, #0]
 8028848:	f021 0104 	bicge.w	r1, r1, #4
 802884c:	6021      	strge	r1, [r4, #0]
 802884e:	b90d      	cbnz	r5, 8028854 <_printf_i+0x110>
 8028850:	2e00      	cmp	r6, #0
 8028852:	d04b      	beq.n	80288ec <_printf_i+0x1a8>
 8028854:	4616      	mov	r6, r2
 8028856:	fbb5 f1f3 	udiv	r1, r5, r3
 802885a:	fb03 5711 	mls	r7, r3, r1, r5
 802885e:	5dc7      	ldrb	r7, [r0, r7]
 8028860:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8028864:	462f      	mov	r7, r5
 8028866:	42bb      	cmp	r3, r7
 8028868:	460d      	mov	r5, r1
 802886a:	d9f4      	bls.n	8028856 <_printf_i+0x112>
 802886c:	2b08      	cmp	r3, #8
 802886e:	d10b      	bne.n	8028888 <_printf_i+0x144>
 8028870:	6823      	ldr	r3, [r4, #0]
 8028872:	07df      	lsls	r7, r3, #31
 8028874:	d508      	bpl.n	8028888 <_printf_i+0x144>
 8028876:	6923      	ldr	r3, [r4, #16]
 8028878:	6861      	ldr	r1, [r4, #4]
 802887a:	4299      	cmp	r1, r3
 802887c:	bfde      	ittt	le
 802887e:	2330      	movle	r3, #48	@ 0x30
 8028880:	f806 3c01 	strble.w	r3, [r6, #-1]
 8028884:	f106 36ff 	addle.w	r6, r6, #4294967295
 8028888:	1b92      	subs	r2, r2, r6
 802888a:	6122      	str	r2, [r4, #16]
 802888c:	f8cd a000 	str.w	sl, [sp]
 8028890:	464b      	mov	r3, r9
 8028892:	aa03      	add	r2, sp, #12
 8028894:	4621      	mov	r1, r4
 8028896:	4640      	mov	r0, r8
 8028898:	f7ff fee6 	bl	8028668 <_printf_common>
 802889c:	3001      	adds	r0, #1
 802889e:	d14a      	bne.n	8028936 <_printf_i+0x1f2>
 80288a0:	f04f 30ff 	mov.w	r0, #4294967295
 80288a4:	b004      	add	sp, #16
 80288a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80288aa:	6823      	ldr	r3, [r4, #0]
 80288ac:	f043 0320 	orr.w	r3, r3, #32
 80288b0:	6023      	str	r3, [r4, #0]
 80288b2:	4833      	ldr	r0, [pc, #204]	@ (8028980 <_printf_i+0x23c>)
 80288b4:	2778      	movs	r7, #120	@ 0x78
 80288b6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80288ba:	6823      	ldr	r3, [r4, #0]
 80288bc:	6831      	ldr	r1, [r6, #0]
 80288be:	061f      	lsls	r7, r3, #24
 80288c0:	f851 5b04 	ldr.w	r5, [r1], #4
 80288c4:	d402      	bmi.n	80288cc <_printf_i+0x188>
 80288c6:	065f      	lsls	r7, r3, #25
 80288c8:	bf48      	it	mi
 80288ca:	b2ad      	uxthmi	r5, r5
 80288cc:	6031      	str	r1, [r6, #0]
 80288ce:	07d9      	lsls	r1, r3, #31
 80288d0:	bf44      	itt	mi
 80288d2:	f043 0320 	orrmi.w	r3, r3, #32
 80288d6:	6023      	strmi	r3, [r4, #0]
 80288d8:	b11d      	cbz	r5, 80288e2 <_printf_i+0x19e>
 80288da:	2310      	movs	r3, #16
 80288dc:	e7ac      	b.n	8028838 <_printf_i+0xf4>
 80288de:	4827      	ldr	r0, [pc, #156]	@ (802897c <_printf_i+0x238>)
 80288e0:	e7e9      	b.n	80288b6 <_printf_i+0x172>
 80288e2:	6823      	ldr	r3, [r4, #0]
 80288e4:	f023 0320 	bic.w	r3, r3, #32
 80288e8:	6023      	str	r3, [r4, #0]
 80288ea:	e7f6      	b.n	80288da <_printf_i+0x196>
 80288ec:	4616      	mov	r6, r2
 80288ee:	e7bd      	b.n	802886c <_printf_i+0x128>
 80288f0:	6833      	ldr	r3, [r6, #0]
 80288f2:	6825      	ldr	r5, [r4, #0]
 80288f4:	6961      	ldr	r1, [r4, #20]
 80288f6:	1d18      	adds	r0, r3, #4
 80288f8:	6030      	str	r0, [r6, #0]
 80288fa:	062e      	lsls	r6, r5, #24
 80288fc:	681b      	ldr	r3, [r3, #0]
 80288fe:	d501      	bpl.n	8028904 <_printf_i+0x1c0>
 8028900:	6019      	str	r1, [r3, #0]
 8028902:	e002      	b.n	802890a <_printf_i+0x1c6>
 8028904:	0668      	lsls	r0, r5, #25
 8028906:	d5fb      	bpl.n	8028900 <_printf_i+0x1bc>
 8028908:	8019      	strh	r1, [r3, #0]
 802890a:	2300      	movs	r3, #0
 802890c:	6123      	str	r3, [r4, #16]
 802890e:	4616      	mov	r6, r2
 8028910:	e7bc      	b.n	802888c <_printf_i+0x148>
 8028912:	6833      	ldr	r3, [r6, #0]
 8028914:	1d1a      	adds	r2, r3, #4
 8028916:	6032      	str	r2, [r6, #0]
 8028918:	681e      	ldr	r6, [r3, #0]
 802891a:	6862      	ldr	r2, [r4, #4]
 802891c:	2100      	movs	r1, #0
 802891e:	4630      	mov	r0, r6
 8028920:	f7d7 fcde 	bl	80002e0 <memchr>
 8028924:	b108      	cbz	r0, 802892a <_printf_i+0x1e6>
 8028926:	1b80      	subs	r0, r0, r6
 8028928:	6060      	str	r0, [r4, #4]
 802892a:	6863      	ldr	r3, [r4, #4]
 802892c:	6123      	str	r3, [r4, #16]
 802892e:	2300      	movs	r3, #0
 8028930:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8028934:	e7aa      	b.n	802888c <_printf_i+0x148>
 8028936:	6923      	ldr	r3, [r4, #16]
 8028938:	4632      	mov	r2, r6
 802893a:	4649      	mov	r1, r9
 802893c:	4640      	mov	r0, r8
 802893e:	47d0      	blx	sl
 8028940:	3001      	adds	r0, #1
 8028942:	d0ad      	beq.n	80288a0 <_printf_i+0x15c>
 8028944:	6823      	ldr	r3, [r4, #0]
 8028946:	079b      	lsls	r3, r3, #30
 8028948:	d413      	bmi.n	8028972 <_printf_i+0x22e>
 802894a:	68e0      	ldr	r0, [r4, #12]
 802894c:	9b03      	ldr	r3, [sp, #12]
 802894e:	4298      	cmp	r0, r3
 8028950:	bfb8      	it	lt
 8028952:	4618      	movlt	r0, r3
 8028954:	e7a6      	b.n	80288a4 <_printf_i+0x160>
 8028956:	2301      	movs	r3, #1
 8028958:	4632      	mov	r2, r6
 802895a:	4649      	mov	r1, r9
 802895c:	4640      	mov	r0, r8
 802895e:	47d0      	blx	sl
 8028960:	3001      	adds	r0, #1
 8028962:	d09d      	beq.n	80288a0 <_printf_i+0x15c>
 8028964:	3501      	adds	r5, #1
 8028966:	68e3      	ldr	r3, [r4, #12]
 8028968:	9903      	ldr	r1, [sp, #12]
 802896a:	1a5b      	subs	r3, r3, r1
 802896c:	42ab      	cmp	r3, r5
 802896e:	dcf2      	bgt.n	8028956 <_printf_i+0x212>
 8028970:	e7eb      	b.n	802894a <_printf_i+0x206>
 8028972:	2500      	movs	r5, #0
 8028974:	f104 0619 	add.w	r6, r4, #25
 8028978:	e7f5      	b.n	8028966 <_printf_i+0x222>
 802897a:	bf00      	nop
 802897c:	0802d7d1 	.word	0x0802d7d1
 8028980:	0802d7e2 	.word	0x0802d7e2

08028984 <__sflush_r>:
 8028984:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8028988:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802898c:	0716      	lsls	r6, r2, #28
 802898e:	4605      	mov	r5, r0
 8028990:	460c      	mov	r4, r1
 8028992:	d454      	bmi.n	8028a3e <__sflush_r+0xba>
 8028994:	684b      	ldr	r3, [r1, #4]
 8028996:	2b00      	cmp	r3, #0
 8028998:	dc02      	bgt.n	80289a0 <__sflush_r+0x1c>
 802899a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 802899c:	2b00      	cmp	r3, #0
 802899e:	dd48      	ble.n	8028a32 <__sflush_r+0xae>
 80289a0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80289a2:	2e00      	cmp	r6, #0
 80289a4:	d045      	beq.n	8028a32 <__sflush_r+0xae>
 80289a6:	2300      	movs	r3, #0
 80289a8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80289ac:	682f      	ldr	r7, [r5, #0]
 80289ae:	6a21      	ldr	r1, [r4, #32]
 80289b0:	602b      	str	r3, [r5, #0]
 80289b2:	d030      	beq.n	8028a16 <__sflush_r+0x92>
 80289b4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80289b6:	89a3      	ldrh	r3, [r4, #12]
 80289b8:	0759      	lsls	r1, r3, #29
 80289ba:	d505      	bpl.n	80289c8 <__sflush_r+0x44>
 80289bc:	6863      	ldr	r3, [r4, #4]
 80289be:	1ad2      	subs	r2, r2, r3
 80289c0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80289c2:	b10b      	cbz	r3, 80289c8 <__sflush_r+0x44>
 80289c4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80289c6:	1ad2      	subs	r2, r2, r3
 80289c8:	2300      	movs	r3, #0
 80289ca:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80289cc:	6a21      	ldr	r1, [r4, #32]
 80289ce:	4628      	mov	r0, r5
 80289d0:	47b0      	blx	r6
 80289d2:	1c43      	adds	r3, r0, #1
 80289d4:	89a3      	ldrh	r3, [r4, #12]
 80289d6:	d106      	bne.n	80289e6 <__sflush_r+0x62>
 80289d8:	6829      	ldr	r1, [r5, #0]
 80289da:	291d      	cmp	r1, #29
 80289dc:	d82b      	bhi.n	8028a36 <__sflush_r+0xb2>
 80289de:	4a2a      	ldr	r2, [pc, #168]	@ (8028a88 <__sflush_r+0x104>)
 80289e0:	410a      	asrs	r2, r1
 80289e2:	07d6      	lsls	r6, r2, #31
 80289e4:	d427      	bmi.n	8028a36 <__sflush_r+0xb2>
 80289e6:	2200      	movs	r2, #0
 80289e8:	6062      	str	r2, [r4, #4]
 80289ea:	04d9      	lsls	r1, r3, #19
 80289ec:	6922      	ldr	r2, [r4, #16]
 80289ee:	6022      	str	r2, [r4, #0]
 80289f0:	d504      	bpl.n	80289fc <__sflush_r+0x78>
 80289f2:	1c42      	adds	r2, r0, #1
 80289f4:	d101      	bne.n	80289fa <__sflush_r+0x76>
 80289f6:	682b      	ldr	r3, [r5, #0]
 80289f8:	b903      	cbnz	r3, 80289fc <__sflush_r+0x78>
 80289fa:	6560      	str	r0, [r4, #84]	@ 0x54
 80289fc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80289fe:	602f      	str	r7, [r5, #0]
 8028a00:	b1b9      	cbz	r1, 8028a32 <__sflush_r+0xae>
 8028a02:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8028a06:	4299      	cmp	r1, r3
 8028a08:	d002      	beq.n	8028a10 <__sflush_r+0x8c>
 8028a0a:	4628      	mov	r0, r5
 8028a0c:	f7ff fca0 	bl	8028350 <_free_r>
 8028a10:	2300      	movs	r3, #0
 8028a12:	6363      	str	r3, [r4, #52]	@ 0x34
 8028a14:	e00d      	b.n	8028a32 <__sflush_r+0xae>
 8028a16:	2301      	movs	r3, #1
 8028a18:	4628      	mov	r0, r5
 8028a1a:	47b0      	blx	r6
 8028a1c:	4602      	mov	r2, r0
 8028a1e:	1c50      	adds	r0, r2, #1
 8028a20:	d1c9      	bne.n	80289b6 <__sflush_r+0x32>
 8028a22:	682b      	ldr	r3, [r5, #0]
 8028a24:	2b00      	cmp	r3, #0
 8028a26:	d0c6      	beq.n	80289b6 <__sflush_r+0x32>
 8028a28:	2b1d      	cmp	r3, #29
 8028a2a:	d001      	beq.n	8028a30 <__sflush_r+0xac>
 8028a2c:	2b16      	cmp	r3, #22
 8028a2e:	d11e      	bne.n	8028a6e <__sflush_r+0xea>
 8028a30:	602f      	str	r7, [r5, #0]
 8028a32:	2000      	movs	r0, #0
 8028a34:	e022      	b.n	8028a7c <__sflush_r+0xf8>
 8028a36:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8028a3a:	b21b      	sxth	r3, r3
 8028a3c:	e01b      	b.n	8028a76 <__sflush_r+0xf2>
 8028a3e:	690f      	ldr	r7, [r1, #16]
 8028a40:	2f00      	cmp	r7, #0
 8028a42:	d0f6      	beq.n	8028a32 <__sflush_r+0xae>
 8028a44:	0793      	lsls	r3, r2, #30
 8028a46:	680e      	ldr	r6, [r1, #0]
 8028a48:	bf08      	it	eq
 8028a4a:	694b      	ldreq	r3, [r1, #20]
 8028a4c:	600f      	str	r7, [r1, #0]
 8028a4e:	bf18      	it	ne
 8028a50:	2300      	movne	r3, #0
 8028a52:	eba6 0807 	sub.w	r8, r6, r7
 8028a56:	608b      	str	r3, [r1, #8]
 8028a58:	f1b8 0f00 	cmp.w	r8, #0
 8028a5c:	dde9      	ble.n	8028a32 <__sflush_r+0xae>
 8028a5e:	6a21      	ldr	r1, [r4, #32]
 8028a60:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8028a62:	4643      	mov	r3, r8
 8028a64:	463a      	mov	r2, r7
 8028a66:	4628      	mov	r0, r5
 8028a68:	47b0      	blx	r6
 8028a6a:	2800      	cmp	r0, #0
 8028a6c:	dc08      	bgt.n	8028a80 <__sflush_r+0xfc>
 8028a6e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8028a72:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8028a76:	81a3      	strh	r3, [r4, #12]
 8028a78:	f04f 30ff 	mov.w	r0, #4294967295
 8028a7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8028a80:	4407      	add	r7, r0
 8028a82:	eba8 0800 	sub.w	r8, r8, r0
 8028a86:	e7e7      	b.n	8028a58 <__sflush_r+0xd4>
 8028a88:	dfbffffe 	.word	0xdfbffffe

08028a8c <_fflush_r>:
 8028a8c:	b538      	push	{r3, r4, r5, lr}
 8028a8e:	690b      	ldr	r3, [r1, #16]
 8028a90:	4605      	mov	r5, r0
 8028a92:	460c      	mov	r4, r1
 8028a94:	b913      	cbnz	r3, 8028a9c <_fflush_r+0x10>
 8028a96:	2500      	movs	r5, #0
 8028a98:	4628      	mov	r0, r5
 8028a9a:	bd38      	pop	{r3, r4, r5, pc}
 8028a9c:	b118      	cbz	r0, 8028aa6 <_fflush_r+0x1a>
 8028a9e:	6a03      	ldr	r3, [r0, #32]
 8028aa0:	b90b      	cbnz	r3, 8028aa6 <_fflush_r+0x1a>
 8028aa2:	f7ff f9e9 	bl	8027e78 <__sinit>
 8028aa6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8028aaa:	2b00      	cmp	r3, #0
 8028aac:	d0f3      	beq.n	8028a96 <_fflush_r+0xa>
 8028aae:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8028ab0:	07d0      	lsls	r0, r2, #31
 8028ab2:	d404      	bmi.n	8028abe <_fflush_r+0x32>
 8028ab4:	0599      	lsls	r1, r3, #22
 8028ab6:	d402      	bmi.n	8028abe <_fflush_r+0x32>
 8028ab8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8028aba:	f7ff fbdc 	bl	8028276 <__retarget_lock_acquire_recursive>
 8028abe:	4628      	mov	r0, r5
 8028ac0:	4621      	mov	r1, r4
 8028ac2:	f7ff ff5f 	bl	8028984 <__sflush_r>
 8028ac6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8028ac8:	07da      	lsls	r2, r3, #31
 8028aca:	4605      	mov	r5, r0
 8028acc:	d4e4      	bmi.n	8028a98 <_fflush_r+0xc>
 8028ace:	89a3      	ldrh	r3, [r4, #12]
 8028ad0:	059b      	lsls	r3, r3, #22
 8028ad2:	d4e1      	bmi.n	8028a98 <_fflush_r+0xc>
 8028ad4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8028ad6:	f7ff fbcf 	bl	8028278 <__retarget_lock_release_recursive>
 8028ada:	e7dd      	b.n	8028a98 <_fflush_r+0xc>

08028adc <__swhatbuf_r>:
 8028adc:	b570      	push	{r4, r5, r6, lr}
 8028ade:	460c      	mov	r4, r1
 8028ae0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8028ae4:	2900      	cmp	r1, #0
 8028ae6:	b096      	sub	sp, #88	@ 0x58
 8028ae8:	4615      	mov	r5, r2
 8028aea:	461e      	mov	r6, r3
 8028aec:	da0d      	bge.n	8028b0a <__swhatbuf_r+0x2e>
 8028aee:	89a3      	ldrh	r3, [r4, #12]
 8028af0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8028af4:	f04f 0100 	mov.w	r1, #0
 8028af8:	bf14      	ite	ne
 8028afa:	2340      	movne	r3, #64	@ 0x40
 8028afc:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8028b00:	2000      	movs	r0, #0
 8028b02:	6031      	str	r1, [r6, #0]
 8028b04:	602b      	str	r3, [r5, #0]
 8028b06:	b016      	add	sp, #88	@ 0x58
 8028b08:	bd70      	pop	{r4, r5, r6, pc}
 8028b0a:	466a      	mov	r2, sp
 8028b0c:	f000 f848 	bl	8028ba0 <_fstat_r>
 8028b10:	2800      	cmp	r0, #0
 8028b12:	dbec      	blt.n	8028aee <__swhatbuf_r+0x12>
 8028b14:	9901      	ldr	r1, [sp, #4]
 8028b16:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8028b1a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8028b1e:	4259      	negs	r1, r3
 8028b20:	4159      	adcs	r1, r3
 8028b22:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8028b26:	e7eb      	b.n	8028b00 <__swhatbuf_r+0x24>

08028b28 <__smakebuf_r>:
 8028b28:	898b      	ldrh	r3, [r1, #12]
 8028b2a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8028b2c:	079d      	lsls	r5, r3, #30
 8028b2e:	4606      	mov	r6, r0
 8028b30:	460c      	mov	r4, r1
 8028b32:	d507      	bpl.n	8028b44 <__smakebuf_r+0x1c>
 8028b34:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8028b38:	6023      	str	r3, [r4, #0]
 8028b3a:	6123      	str	r3, [r4, #16]
 8028b3c:	2301      	movs	r3, #1
 8028b3e:	6163      	str	r3, [r4, #20]
 8028b40:	b003      	add	sp, #12
 8028b42:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8028b44:	ab01      	add	r3, sp, #4
 8028b46:	466a      	mov	r2, sp
 8028b48:	f7ff ffc8 	bl	8028adc <__swhatbuf_r>
 8028b4c:	9f00      	ldr	r7, [sp, #0]
 8028b4e:	4605      	mov	r5, r0
 8028b50:	4639      	mov	r1, r7
 8028b52:	4630      	mov	r0, r6
 8028b54:	f7ff f86a 	bl	8027c2c <_malloc_r>
 8028b58:	b948      	cbnz	r0, 8028b6e <__smakebuf_r+0x46>
 8028b5a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8028b5e:	059a      	lsls	r2, r3, #22
 8028b60:	d4ee      	bmi.n	8028b40 <__smakebuf_r+0x18>
 8028b62:	f023 0303 	bic.w	r3, r3, #3
 8028b66:	f043 0302 	orr.w	r3, r3, #2
 8028b6a:	81a3      	strh	r3, [r4, #12]
 8028b6c:	e7e2      	b.n	8028b34 <__smakebuf_r+0xc>
 8028b6e:	89a3      	ldrh	r3, [r4, #12]
 8028b70:	6020      	str	r0, [r4, #0]
 8028b72:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8028b76:	81a3      	strh	r3, [r4, #12]
 8028b78:	9b01      	ldr	r3, [sp, #4]
 8028b7a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8028b7e:	b15b      	cbz	r3, 8028b98 <__smakebuf_r+0x70>
 8028b80:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8028b84:	4630      	mov	r0, r6
 8028b86:	f000 f81d 	bl	8028bc4 <_isatty_r>
 8028b8a:	b128      	cbz	r0, 8028b98 <__smakebuf_r+0x70>
 8028b8c:	89a3      	ldrh	r3, [r4, #12]
 8028b8e:	f023 0303 	bic.w	r3, r3, #3
 8028b92:	f043 0301 	orr.w	r3, r3, #1
 8028b96:	81a3      	strh	r3, [r4, #12]
 8028b98:	89a3      	ldrh	r3, [r4, #12]
 8028b9a:	431d      	orrs	r5, r3
 8028b9c:	81a5      	strh	r5, [r4, #12]
 8028b9e:	e7cf      	b.n	8028b40 <__smakebuf_r+0x18>

08028ba0 <_fstat_r>:
 8028ba0:	b538      	push	{r3, r4, r5, lr}
 8028ba2:	4d07      	ldr	r5, [pc, #28]	@ (8028bc0 <_fstat_r+0x20>)
 8028ba4:	2300      	movs	r3, #0
 8028ba6:	4604      	mov	r4, r0
 8028ba8:	4608      	mov	r0, r1
 8028baa:	4611      	mov	r1, r2
 8028bac:	602b      	str	r3, [r5, #0]
 8028bae:	f7d8 fd88 	bl	80016c2 <_fstat>
 8028bb2:	1c43      	adds	r3, r0, #1
 8028bb4:	d102      	bne.n	8028bbc <_fstat_r+0x1c>
 8028bb6:	682b      	ldr	r3, [r5, #0]
 8028bb8:	b103      	cbz	r3, 8028bbc <_fstat_r+0x1c>
 8028bba:	6023      	str	r3, [r4, #0]
 8028bbc:	bd38      	pop	{r3, r4, r5, pc}
 8028bbe:	bf00      	nop
 8028bc0:	240299a0 	.word	0x240299a0

08028bc4 <_isatty_r>:
 8028bc4:	b538      	push	{r3, r4, r5, lr}
 8028bc6:	4d06      	ldr	r5, [pc, #24]	@ (8028be0 <_isatty_r+0x1c>)
 8028bc8:	2300      	movs	r3, #0
 8028bca:	4604      	mov	r4, r0
 8028bcc:	4608      	mov	r0, r1
 8028bce:	602b      	str	r3, [r5, #0]
 8028bd0:	f7d8 fd7c 	bl	80016cc <_isatty>
 8028bd4:	1c43      	adds	r3, r0, #1
 8028bd6:	d102      	bne.n	8028bde <_isatty_r+0x1a>
 8028bd8:	682b      	ldr	r3, [r5, #0]
 8028bda:	b103      	cbz	r3, 8028bde <_isatty_r+0x1a>
 8028bdc:	6023      	str	r3, [r4, #0]
 8028bde:	bd38      	pop	{r3, r4, r5, pc}
 8028be0:	240299a0 	.word	0x240299a0

08028be4 <_init>:
 8028be4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8028be6:	bf00      	nop
 8028be8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8028bea:	bc08      	pop	{r3}
 8028bec:	469e      	mov	lr, r3
 8028bee:	4770      	bx	lr

08028bf0 <_fini>:
 8028bf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8028bf2:	bf00      	nop
 8028bf4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8028bf6:	bc08      	pop	{r3}
 8028bf8:	469e      	mov	lr, r3
 8028bfa:	4770      	bx	lr
