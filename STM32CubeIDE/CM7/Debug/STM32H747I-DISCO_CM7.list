
STM32H747I-DISCO_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0002805c  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00004a5c  08028300  08028300  00029300  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 FontFlashSection 00004876  0802cd5c  0802cd5c  0002dd5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 FontSearchFlashSection 00000040  080315d4  080315d4  000325d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 ExtFlashSection 0104efe0  90000000  90000000  00034000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 TextFlashSection 0000009a  9104efe0  9104efe0  01082fe0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .ARM.extab    00000000  08031614  08031614  0108307a  2**0
                  CONTENTS
  8 .ARM          00000008  08031614  08031614  00032614  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .preinit_array 00000000  0803161c  0803161c  0108307a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 10 .init_array   0000001c  0803161c  0803161c  0003261c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .fini_array   00000008  08031638  08031638  00032638  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .data         0000013c  24000000  08031640  00033000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 13 TouchGFX_ScratchbufferA 00000100  24000140  0803177c  00033140  2**5
                  CONTENTS, ALLOC, LOAD, DATA
 14 TouchGFX_ScratchbufferB 00000100  24000240  0803187c  00033240  2**5
                  CONTENTS, ALLOC, LOAD, DATA
 15 .bss          00029800  24000340  0803197c  00033340  2**2
                  ALLOC
 16 ._user_heap_stack 00002000  24029b40  0803197c  00033b40  2**0
                  ALLOC
 17 .ARM.attributes 0000002e  00000000  00000000  0108307a  2**0
                  CONTENTS, READONLY
 18 BufferSection 00232800  d0000000  d0000000  01084000  2**2
                  ALLOC
 19 .debug_info   00113cb4  00000000  00000000  010830a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_abbrev 0001b55e  00000000  00000000  01196d5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_aranges 00004798  00000000  00000000  011b22c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_rnglists 00004876  00000000  00000000  011b6a58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_macro  00054406  00000000  00000000  011bb2ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_line   00074392  00000000  00000000  0120f6d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 25 .debug_str    001ebdf1  00000000  00000000  01283a66  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 26 .comment      000000c2  00000000  00000000  0146f857  2**0
                  CONTENTS, READONLY
 27 .debug_frame  0000b390  00000000  00000000  0146f91c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 28 .debug_loclists 00023dfd  00000000  00000000  0147acac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 29 .debug_line_str 0000006c  00000000  00000000  0149eaa9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000340 	.word	0x24000340
 80002bc:	00000000 	.word	0x00000000
 80002c0:	080282e4 	.word	0x080282e4

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000344 	.word	0x24000344
 80002dc:	080282e4 	.word	0x080282e4

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_drsub>:
 8000380:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000384:	e002      	b.n	800038c <__adddf3>
 8000386:	bf00      	nop

08000388 <__aeabi_dsub>:
 8000388:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800038c <__adddf3>:
 800038c:	b530      	push	{r4, r5, lr}
 800038e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000392:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000396:	ea94 0f05 	teq	r4, r5
 800039a:	bf08      	it	eq
 800039c:	ea90 0f02 	teqeq	r0, r2
 80003a0:	bf1f      	itttt	ne
 80003a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003b2:	f000 80e2 	beq.w	800057a <__adddf3+0x1ee>
 80003b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003be:	bfb8      	it	lt
 80003c0:	426d      	neglt	r5, r5
 80003c2:	dd0c      	ble.n	80003de <__adddf3+0x52>
 80003c4:	442c      	add	r4, r5
 80003c6:	ea80 0202 	eor.w	r2, r0, r2
 80003ca:	ea81 0303 	eor.w	r3, r1, r3
 80003ce:	ea82 0000 	eor.w	r0, r2, r0
 80003d2:	ea83 0101 	eor.w	r1, r3, r1
 80003d6:	ea80 0202 	eor.w	r2, r0, r2
 80003da:	ea81 0303 	eor.w	r3, r1, r3
 80003de:	2d36      	cmp	r5, #54	@ 0x36
 80003e0:	bf88      	it	hi
 80003e2:	bd30      	pophi	{r4, r5, pc}
 80003e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80003e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80003ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80003f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80003f4:	d002      	beq.n	80003fc <__adddf3+0x70>
 80003f6:	4240      	negs	r0, r0
 80003f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80003fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000400:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000404:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000408:	d002      	beq.n	8000410 <__adddf3+0x84>
 800040a:	4252      	negs	r2, r2
 800040c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000410:	ea94 0f05 	teq	r4, r5
 8000414:	f000 80a7 	beq.w	8000566 <__adddf3+0x1da>
 8000418:	f1a4 0401 	sub.w	r4, r4, #1
 800041c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000420:	db0d      	blt.n	800043e <__adddf3+0xb2>
 8000422:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000426:	fa22 f205 	lsr.w	r2, r2, r5
 800042a:	1880      	adds	r0, r0, r2
 800042c:	f141 0100 	adc.w	r1, r1, #0
 8000430:	fa03 f20e 	lsl.w	r2, r3, lr
 8000434:	1880      	adds	r0, r0, r2
 8000436:	fa43 f305 	asr.w	r3, r3, r5
 800043a:	4159      	adcs	r1, r3
 800043c:	e00e      	b.n	800045c <__adddf3+0xd0>
 800043e:	f1a5 0520 	sub.w	r5, r5, #32
 8000442:	f10e 0e20 	add.w	lr, lr, #32
 8000446:	2a01      	cmp	r2, #1
 8000448:	fa03 fc0e 	lsl.w	ip, r3, lr
 800044c:	bf28      	it	cs
 800044e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000452:	fa43 f305 	asr.w	r3, r3, r5
 8000456:	18c0      	adds	r0, r0, r3
 8000458:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800045c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000460:	d507      	bpl.n	8000472 <__adddf3+0xe6>
 8000462:	f04f 0e00 	mov.w	lr, #0
 8000466:	f1dc 0c00 	rsbs	ip, ip, #0
 800046a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800046e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000472:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000476:	d31b      	bcc.n	80004b0 <__adddf3+0x124>
 8000478:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800047c:	d30c      	bcc.n	8000498 <__adddf3+0x10c>
 800047e:	0849      	lsrs	r1, r1, #1
 8000480:	ea5f 0030 	movs.w	r0, r0, rrx
 8000484:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000488:	f104 0401 	add.w	r4, r4, #1
 800048c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000490:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000494:	f080 809a 	bcs.w	80005cc <__adddf3+0x240>
 8000498:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800049c:	bf08      	it	eq
 800049e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004a2:	f150 0000 	adcs.w	r0, r0, #0
 80004a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004aa:	ea41 0105 	orr.w	r1, r1, r5
 80004ae:	bd30      	pop	{r4, r5, pc}
 80004b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004b4:	4140      	adcs	r0, r0
 80004b6:	eb41 0101 	adc.w	r1, r1, r1
 80004ba:	3c01      	subs	r4, #1
 80004bc:	bf28      	it	cs
 80004be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80004c2:	d2e9      	bcs.n	8000498 <__adddf3+0x10c>
 80004c4:	f091 0f00 	teq	r1, #0
 80004c8:	bf04      	itt	eq
 80004ca:	4601      	moveq	r1, r0
 80004cc:	2000      	moveq	r0, #0
 80004ce:	fab1 f381 	clz	r3, r1
 80004d2:	bf08      	it	eq
 80004d4:	3320      	addeq	r3, #32
 80004d6:	f1a3 030b 	sub.w	r3, r3, #11
 80004da:	f1b3 0220 	subs.w	r2, r3, #32
 80004de:	da0c      	bge.n	80004fa <__adddf3+0x16e>
 80004e0:	320c      	adds	r2, #12
 80004e2:	dd08      	ble.n	80004f6 <__adddf3+0x16a>
 80004e4:	f102 0c14 	add.w	ip, r2, #20
 80004e8:	f1c2 020c 	rsb	r2, r2, #12
 80004ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80004f0:	fa21 f102 	lsr.w	r1, r1, r2
 80004f4:	e00c      	b.n	8000510 <__adddf3+0x184>
 80004f6:	f102 0214 	add.w	r2, r2, #20
 80004fa:	bfd8      	it	le
 80004fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000500:	fa01 f102 	lsl.w	r1, r1, r2
 8000504:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000508:	bfdc      	itt	le
 800050a:	ea41 010c 	orrle.w	r1, r1, ip
 800050e:	4090      	lslle	r0, r2
 8000510:	1ae4      	subs	r4, r4, r3
 8000512:	bfa2      	ittt	ge
 8000514:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000518:	4329      	orrge	r1, r5
 800051a:	bd30      	popge	{r4, r5, pc}
 800051c:	ea6f 0404 	mvn.w	r4, r4
 8000520:	3c1f      	subs	r4, #31
 8000522:	da1c      	bge.n	800055e <__adddf3+0x1d2>
 8000524:	340c      	adds	r4, #12
 8000526:	dc0e      	bgt.n	8000546 <__adddf3+0x1ba>
 8000528:	f104 0414 	add.w	r4, r4, #20
 800052c:	f1c4 0220 	rsb	r2, r4, #32
 8000530:	fa20 f004 	lsr.w	r0, r0, r4
 8000534:	fa01 f302 	lsl.w	r3, r1, r2
 8000538:	ea40 0003 	orr.w	r0, r0, r3
 800053c:	fa21 f304 	lsr.w	r3, r1, r4
 8000540:	ea45 0103 	orr.w	r1, r5, r3
 8000544:	bd30      	pop	{r4, r5, pc}
 8000546:	f1c4 040c 	rsb	r4, r4, #12
 800054a:	f1c4 0220 	rsb	r2, r4, #32
 800054e:	fa20 f002 	lsr.w	r0, r0, r2
 8000552:	fa01 f304 	lsl.w	r3, r1, r4
 8000556:	ea40 0003 	orr.w	r0, r0, r3
 800055a:	4629      	mov	r1, r5
 800055c:	bd30      	pop	{r4, r5, pc}
 800055e:	fa21 f004 	lsr.w	r0, r1, r4
 8000562:	4629      	mov	r1, r5
 8000564:	bd30      	pop	{r4, r5, pc}
 8000566:	f094 0f00 	teq	r4, #0
 800056a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800056e:	bf06      	itte	eq
 8000570:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000574:	3401      	addeq	r4, #1
 8000576:	3d01      	subne	r5, #1
 8000578:	e74e      	b.n	8000418 <__adddf3+0x8c>
 800057a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800057e:	bf18      	it	ne
 8000580:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000584:	d029      	beq.n	80005da <__adddf3+0x24e>
 8000586:	ea94 0f05 	teq	r4, r5
 800058a:	bf08      	it	eq
 800058c:	ea90 0f02 	teqeq	r0, r2
 8000590:	d005      	beq.n	800059e <__adddf3+0x212>
 8000592:	ea54 0c00 	orrs.w	ip, r4, r0
 8000596:	bf04      	itt	eq
 8000598:	4619      	moveq	r1, r3
 800059a:	4610      	moveq	r0, r2
 800059c:	bd30      	pop	{r4, r5, pc}
 800059e:	ea91 0f03 	teq	r1, r3
 80005a2:	bf1e      	ittt	ne
 80005a4:	2100      	movne	r1, #0
 80005a6:	2000      	movne	r0, #0
 80005a8:	bd30      	popne	{r4, r5, pc}
 80005aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005ae:	d105      	bne.n	80005bc <__adddf3+0x230>
 80005b0:	0040      	lsls	r0, r0, #1
 80005b2:	4149      	adcs	r1, r1
 80005b4:	bf28      	it	cs
 80005b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80005ba:	bd30      	pop	{r4, r5, pc}
 80005bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80005c0:	bf3c      	itt	cc
 80005c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80005c6:	bd30      	popcc	{r4, r5, pc}
 80005c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80005d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80005d4:	f04f 0000 	mov.w	r0, #0
 80005d8:	bd30      	pop	{r4, r5, pc}
 80005da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005de:	bf1a      	itte	ne
 80005e0:	4619      	movne	r1, r3
 80005e2:	4610      	movne	r0, r2
 80005e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80005e8:	bf1c      	itt	ne
 80005ea:	460b      	movne	r3, r1
 80005ec:	4602      	movne	r2, r0
 80005ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80005f2:	bf06      	itte	eq
 80005f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80005f8:	ea91 0f03 	teqeq	r1, r3
 80005fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000600:	bd30      	pop	{r4, r5, pc}
 8000602:	bf00      	nop

08000604 <__aeabi_ui2d>:
 8000604:	f090 0f00 	teq	r0, #0
 8000608:	bf04      	itt	eq
 800060a:	2100      	moveq	r1, #0
 800060c:	4770      	bxeq	lr
 800060e:	b530      	push	{r4, r5, lr}
 8000610:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000614:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000618:	f04f 0500 	mov.w	r5, #0
 800061c:	f04f 0100 	mov.w	r1, #0
 8000620:	e750      	b.n	80004c4 <__adddf3+0x138>
 8000622:	bf00      	nop

08000624 <__aeabi_i2d>:
 8000624:	f090 0f00 	teq	r0, #0
 8000628:	bf04      	itt	eq
 800062a:	2100      	moveq	r1, #0
 800062c:	4770      	bxeq	lr
 800062e:	b530      	push	{r4, r5, lr}
 8000630:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000634:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000638:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800063c:	bf48      	it	mi
 800063e:	4240      	negmi	r0, r0
 8000640:	f04f 0100 	mov.w	r1, #0
 8000644:	e73e      	b.n	80004c4 <__adddf3+0x138>
 8000646:	bf00      	nop

08000648 <__aeabi_f2d>:
 8000648:	0042      	lsls	r2, r0, #1
 800064a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800064e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000652:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000656:	bf1f      	itttt	ne
 8000658:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800065c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000660:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000664:	4770      	bxne	lr
 8000666:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800066a:	bf08      	it	eq
 800066c:	4770      	bxeq	lr
 800066e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000672:	bf04      	itt	eq
 8000674:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000678:	4770      	bxeq	lr
 800067a:	b530      	push	{r4, r5, lr}
 800067c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000680:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000684:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000688:	e71c      	b.n	80004c4 <__adddf3+0x138>
 800068a:	bf00      	nop

0800068c <__aeabi_ul2d>:
 800068c:	ea50 0201 	orrs.w	r2, r0, r1
 8000690:	bf08      	it	eq
 8000692:	4770      	bxeq	lr
 8000694:	b530      	push	{r4, r5, lr}
 8000696:	f04f 0500 	mov.w	r5, #0
 800069a:	e00a      	b.n	80006b2 <__aeabi_l2d+0x16>

0800069c <__aeabi_l2d>:
 800069c:	ea50 0201 	orrs.w	r2, r0, r1
 80006a0:	bf08      	it	eq
 80006a2:	4770      	bxeq	lr
 80006a4:	b530      	push	{r4, r5, lr}
 80006a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80006aa:	d502      	bpl.n	80006b2 <__aeabi_l2d+0x16>
 80006ac:	4240      	negs	r0, r0
 80006ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006be:	f43f aed8 	beq.w	8000472 <__adddf3+0xe6>
 80006c2:	f04f 0203 	mov.w	r2, #3
 80006c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006ca:	bf18      	it	ne
 80006cc:	3203      	addne	r2, #3
 80006ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006d2:	bf18      	it	ne
 80006d4:	3203      	addne	r2, #3
 80006d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006da:	f1c2 0320 	rsb	r3, r2, #32
 80006de:	fa00 fc03 	lsl.w	ip, r0, r3
 80006e2:	fa20 f002 	lsr.w	r0, r0, r2
 80006e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80006ea:	ea40 000e 	orr.w	r0, r0, lr
 80006ee:	fa21 f102 	lsr.w	r1, r1, r2
 80006f2:	4414      	add	r4, r2
 80006f4:	e6bd      	b.n	8000472 <__adddf3+0xe6>
 80006f6:	bf00      	nop

080006f8 <vApplicationIdleHook>:
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
vTaskSetApplicationTaskTag(NULL, IdleTaskHook);
 80006f8:	4901      	ldr	r1, [pc, #4]	@ (8000700 <vApplicationIdleHook+0x8>)
 80006fa:	2000      	movs	r0, #0
 80006fc:	f00d bdb8 	b.w	800e270 <vTaskSetApplicationTaskTag>
 8000700:	08002011 	.word	0x08002011

08000704 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000704:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000706:	b09d      	sub	sp, #116	@ 0x74
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000708:	224c      	movs	r2, #76	@ 0x4c
 800070a:	2100      	movs	r1, #0
 800070c:	a809      	add	r0, sp, #36	@ 0x24
 800070e:	f027 f853 	bl	80277b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000712:	2220      	movs	r2, #32
 8000714:	2100      	movs	r1, #0
 8000716:	a801      	add	r0, sp, #4
 8000718:	f027 f84e 	bl	80277b8 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 800071c:	2004      	movs	r0, #4
 800071e:	f009 ff4f 	bl	800a5c0 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000722:	2300      	movs	r3, #0
 8000724:	9300      	str	r3, [sp, #0]
 8000726:	4b26      	ldr	r3, [pc, #152]	@ (80007c0 <SystemClock_Config+0xbc>)
 8000728:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800072a:	f022 0201 	bic.w	r2, r2, #1
 800072e:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000730:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000732:	f003 0301 	and.w	r3, r3, #1
 8000736:	9300      	str	r3, [sp, #0]
 8000738:	4b22      	ldr	r3, [pc, #136]	@ (80007c4 <SystemClock_Config+0xc0>)
 800073a:	699a      	ldr	r2, [r3, #24]
 800073c:	f442 4240 	orr.w	r2, r2, #49152	@ 0xc000
 8000740:	619a      	str	r2, [r3, #24]
 8000742:	699a      	ldr	r2, [r3, #24]
 8000744:	f402 4240 	and.w	r2, r2, #49152	@ 0xc000
 8000748:	9200      	str	r2, [sp, #0]
 800074a:	9a00      	ldr	r2, [sp, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800074c:	699a      	ldr	r2, [r3, #24]
 800074e:	0491      	lsls	r1, r2, #18
 8000750:	d5fc      	bpl.n	800074c <SystemClock_Config+0x48>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000752:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000756:	2703      	movs	r7, #3
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000758:	2540      	movs	r5, #64	@ 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLM = 5;
  RCC_OscInitStruct.PLL.PLLN = 160;
 800075a:	2205      	movs	r2, #5
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800075c:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PLLP = 2;
  RCC_OscInitStruct.PLL.PLLQ = 2;
  RCC_OscInitStruct.PLL.PLLR = 2;
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800075e:	2608      	movs	r6, #8
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000760:	a809      	add	r0, sp, #36	@ 0x24
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000762:	9418      	str	r4, [sp, #96]	@ 0x60
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000764:	e9cd 7309 	strd	r7, r3, [sp, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000768:	2301      	movs	r3, #1
 800076a:	e9cd 350c 	strd	r3, r5, [sp, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLN = 160;
 800076e:	23a0      	movs	r3, #160	@ 0xa0
 8000770:	e9cd 2314 	strd	r2, r3, [sp, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000774:	2300      	movs	r3, #0
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000776:	e9cd 4412 	strd	r4, r4, [sp, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800077a:	e9cd 4416 	strd	r4, r4, [sp, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800077e:	e9cd 6319 	strd	r6, r3, [sp, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000782:	931b      	str	r3, [sp, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000784:	f00a fa1a 	bl	800abbc <HAL_RCC_OscConfig>
 8000788:	b108      	cbz	r0, 800078e <SystemClock_Config+0x8a>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800078a:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800078c:	e7fe      	b.n	800078c <SystemClock_Config+0x88>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800078e:	233f      	movs	r3, #63	@ 0x3f
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000790:	4621      	mov	r1, r4
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000792:	e9cd 3701 	strd	r3, r7, [sp, #4]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000796:	f44f 6380 	mov.w	r3, #1024	@ 0x400
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800079a:	e9cd 0603 	strd	r0, r6, [sp, #12]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800079e:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80007a0:	e9cd 5505 	strd	r5, r5, [sp, #20]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80007a4:	e9cd 3507 	strd	r3, r5, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80007a8:	f00a fda4 	bl	800b2f4 <HAL_RCC_ClockConfig>
 80007ac:	4601      	mov	r1, r0
 80007ae:	b108      	cbz	r0, 80007b4 <SystemClock_Config+0xb0>
 80007b0:	b672      	cpsid	i
  while (1)
 80007b2:	e7fe      	b.n	80007b2 <SystemClock_Config+0xae>
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI, RCC_MCODIV_1);
 80007b4:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80007b8:	f00a fcac 	bl	800b114 <HAL_RCC_MCOConfig>
}
 80007bc:	b01d      	add	sp, #116	@ 0x74
 80007be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80007c0:	58000400 	.word	0x58000400
 80007c4:	58024800 	.word	0x58024800

080007c8 <main>:
{
 80007c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80007cc:	b0ba      	sub	sp, #232	@ 0xe8
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 80007ce:	2210      	movs	r2, #16
 80007d0:	2100      	movs	r1, #0
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80007d2:	2401      	movs	r4, #1
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 80007d4:	a82d      	add	r0, sp, #180	@ 0xb4
  MPU_InitStruct.Number = MPU_REGION_NUMBER4;
 80007d6:	2504      	movs	r5, #4
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 80007d8:	f026 ffee 	bl	80277b8 <memset>
  HAL_MPU_Disable();
 80007dc:	f007 f8c0 	bl	8007960 <HAL_MPU_Disable>
  MPU_InitStruct.Size = MPU_REGION_SIZE_256MB;
 80007e0:	f04f 4110 	mov.w	r1, #2415919104	@ 0x90000000
 80007e4:	4bbe      	ldr	r3, [pc, #760]	@ (8000ae0 <main+0x318>)
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80007e6:	a82d      	add	r0, sp, #180	@ 0xb4
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80007e8:	f8ad 40b4 	strh.w	r4, [sp, #180]	@ 0xb4
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 80007ec:	9430      	str	r4, [sp, #192]	@ 0xc0
  MPU_InitStruct.Size = MPU_REGION_SIZE_256MB;
 80007ee:	e9cd 132e 	strd	r1, r3, [sp, #184]	@ 0xb8
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80007f2:	f007 f8d3 	bl	800799c <HAL_MPU_ConfigRegion>
  MPU_InitStruct.Size = MPU_REGION_SIZE_128MB;
 80007f6:	231a      	movs	r3, #26
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80007f8:	a82d      	add	r0, sp, #180	@ 0xb4
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 80007fa:	f88d 40b5 	strb.w	r4, [sp, #181]	@ 0xb5
  MPU_InitStruct.Size = MPU_REGION_SIZE_128MB;
 80007fe:	f88d 30bc 	strb.w	r3, [sp, #188]	@ 0xbc
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000802:	f007 f8cb 	bl	800799c <HAL_MPU_ConfigRegion>
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
 8000806:	2302      	movs	r3, #2
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000808:	a82d      	add	r0, sp, #180	@ 0xb4
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 800080a:	f88d 40c2 	strb.w	r4, [sp, #194]	@ 0xc2
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
 800080e:	f88d 30b5 	strb.w	r3, [sp, #181]	@ 0xb5
  MPU_InitStruct.BaseAddress = 0xD0000000;
 8000812:	f04f 4350 	mov.w	r3, #3489660928	@ 0xd0000000
 8000816:	932e      	str	r3, [sp, #184]	@ 0xb8
  MPU_InitStruct.Size = MPU_REGION_SIZE_32MB;
 8000818:	2318      	movs	r3, #24
 800081a:	f88d 30bc 	strb.w	r3, [sp, #188]	@ 0xbc
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800081e:	f007 f8bd 	bl	800799c <HAL_MPU_ConfigRegion>
  MPU_InitStruct.Number = MPU_REGION_NUMBER3;
 8000822:	2303      	movs	r3, #3
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000824:	a82d      	add	r0, sp, #180	@ 0xb4
  MPU_InitStruct.Number = MPU_REGION_NUMBER3;
 8000826:	f88d 30b5 	strb.w	r3, [sp, #181]	@ 0xb5
  MPU_InitStruct.BaseAddress = 0x24000000;
 800082a:	f04f 5310 	mov.w	r3, #603979776	@ 0x24000000
 800082e:	932e      	str	r3, [sp, #184]	@ 0xb8
  MPU_InitStruct.Size = MPU_REGION_SIZE_512KB;
 8000830:	2312      	movs	r3, #18
 8000832:	f88d 30bc 	strb.w	r3, [sp, #188]	@ 0xbc
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8000836:	2300      	movs	r3, #0
 8000838:	f88d 30c0 	strb.w	r3, [sp, #192]	@ 0xc0
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800083c:	f007 f8ae 	bl	800799c <HAL_MPU_ConfigRegion>
  MPU_InitStruct.BaseAddress = 0x10000000;
 8000840:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000844:	a82d      	add	r0, sp, #180	@ 0xb4
  MPU_InitStruct.Number = MPU_REGION_NUMBER4;
 8000846:	f88d 50b5 	strb.w	r5, [sp, #181]	@ 0xb5
  MPU_InitStruct.BaseAddress = 0x10000000;
 800084a:	932e      	str	r3, [sp, #184]	@ 0xb8
  MPU_InitStruct.Size = MPU_REGION_SIZE_256KB;
 800084c:	2311      	movs	r3, #17
 800084e:	f88d 30bc 	strb.w	r3, [sp, #188]	@ 0xbc
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000852:	f007 f8a3 	bl	800799c <HAL_MPU_ConfigRegion>
  MPU_InitStruct.Number = MPU_REGION_NUMBER5;
 8000856:	2305      	movs	r3, #5
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000858:	a82d      	add	r0, sp, #180	@ 0xb4
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 800085a:	f88d 40c0 	strb.w	r4, [sp, #192]	@ 0xc0
  MPU_InitStruct.Number = MPU_REGION_NUMBER5;
 800085e:	f88d 30b5 	strb.w	r3, [sp, #181]	@ 0xb5
  MPU_InitStruct.BaseAddress = 0x10040000;
 8000862:	4ba0      	ldr	r3, [pc, #640]	@ (8000ae4 <main+0x31c>)
 8000864:	932e      	str	r3, [sp, #184]	@ 0xb8
  MPU_InitStruct.Size = MPU_REGION_SIZE_32KB;
 8000866:	230e      	movs	r3, #14
 8000868:	f88d 30bc 	strb.w	r3, [sp, #188]	@ 0xbc
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800086c:	f007 f896 	bl	800799c <HAL_MPU_ConfigRegion>
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000870:	4628      	mov	r0, r5
 8000872:	f007 f883 	bl	800797c <HAL_MPU_Enable>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000876:	4b9c      	ldr	r3, [pc, #624]	@ (8000ae8 <main+0x320>)
 8000878:	695a      	ldr	r2, [r3, #20]
 800087a:	f412 3200 	ands.w	r2, r2, #131072	@ 0x20000
 800087e:	d111      	bne.n	80008a4 <main+0xdc>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000880:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000884:	f3bf 8f6f 	isb	sy

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000888:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800088c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000890:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000894:	695a      	ldr	r2, [r3, #20]
 8000896:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800089a:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800089c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80008a0:	f3bf 8f6f 	isb	sy
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 80008a4:	4a90      	ldr	r2, [pc, #576]	@ (8000ae8 <main+0x320>)
 80008a6:	6953      	ldr	r3, [r2, #20]
 80008a8:	f413 3380 	ands.w	r3, r3, #65536	@ 0x10000
 80008ac:	d123      	bne.n	80008f6 <main+0x12e>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 80008ae:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80008b2:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 80008b6:	f8d2 3080 	ldr.w	r3, [r2, #128]	@ 0x80
                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80008ba:	f643 74e0 	movw	r4, #16352	@ 0x3fe0
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80008be:	f3c3 00c9 	ubfx	r0, r3, #3, #10
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80008c2:	f3c3 334e 	ubfx	r3, r3, #13, #15
 80008c6:	015b      	lsls	r3, r3, #5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80008c8:	ea03 0604 	and.w	r6, r3, r4
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80008cc:	4601      	mov	r1, r0
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80008ce:	ea46 7581 	orr.w	r5, r6, r1, lsl #30
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 80008d2:	3901      	subs	r1, #1
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80008d4:	f8c2 5260 	str.w	r5, [r2, #608]	@ 0x260
      } while (ways-- != 0U);
 80008d8:	d2f9      	bcs.n	80008ce <main+0x106>
    } while(sets-- != 0U);
 80008da:	3b20      	subs	r3, #32
 80008dc:	f113 0f20 	cmn.w	r3, #32
 80008e0:	d1f2      	bne.n	80008c8 <main+0x100>
 80008e2:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 80008e6:	6953      	ldr	r3, [r2, #20]
 80008e8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80008ec:	6153      	str	r3, [r2, #20]
 80008ee:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80008f2:	f3bf 8f6f 	isb	sy
  timeout = 0xFFFF;
 80008f6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 80008fa:	4d7c      	ldr	r5, [pc, #496]	@ (8000aec <main+0x324>)
 80008fc:	682c      	ldr	r4, [r5, #0]
 80008fe:	f414 4400 	ands.w	r4, r4, #32768	@ 0x8000
 8000902:	f000 82e3 	beq.w	8000ecc <main+0x704>
 8000906:	3b01      	subs	r3, #1
 8000908:	d2f8      	bcs.n	80008fc <main+0x134>
  __ASM volatile ("cpsid i" : : : "memory");
 800090a:	b672      	cpsid	i
  while (1)
 800090c:	e7fe      	b.n	800090c <main+0x144>
 800090e:	b672      	cpsid	i
 8000910:	e7fe      	b.n	8000910 <main+0x148>
  hqspi.Instance = QUADSPI;
 8000912:	4877      	ldr	r0, [pc, #476]	@ (8000af0 <main+0x328>)
 8000914:	4a77      	ldr	r2, [pc, #476]	@ (8000af4 <main+0x32c>)
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8000916:	6183      	str	r3, [r0, #24]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_ENABLE;
 8000918:	6204      	str	r4, [r0, #32]
  hqspi.Init.ClockPrescaler = 3;
 800091a:	e9c0 2600 	strd	r2, r6, [r0]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 800091e:	e9c0 5302 	strd	r5, r3, [r0, #8]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8000922:	e9c0 5304 	strd	r5, r3, [r0, #16]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8000926:	f009 ff69 	bl	800a7fc <HAL_QSPI_Init>
 800092a:	b108      	cbz	r0, 8000930 <main+0x168>
 800092c:	b672      	cpsid	i
  while (1)
 800092e:	e7fe      	b.n	800092e <main+0x166>
  init.InterfaceMode=MT25TL01G_QPI_MODE;
 8000930:	f240 1303 	movw	r3, #259	@ 0x103
  if (BSP_QSPI_Init(0,&init) != BSP_ERROR_NONE)
 8000934:	a92d      	add	r1, sp, #180	@ 0xb4
  init.DualFlashMode= MT25TL01G_DUALFLASH_ENABLE;
 8000936:	f88d 40b6 	strb.w	r4, [sp, #182]	@ 0xb6
  init.InterfaceMode=MT25TL01G_QPI_MODE;
 800093a:	f8ad 30b4 	strh.w	r3, [sp, #180]	@ 0xb4
  if (BSP_QSPI_Init(0,&init) != BSP_ERROR_NONE)
 800093e:	f006 faef 	bl	8006f20 <BSP_QSPI_Init>
 8000942:	b108      	cbz	r0, 8000948 <main+0x180>
 8000944:	b672      	cpsid	i
  while (1)
 8000946:	e7fe      	b.n	8000946 <main+0x17e>
  if (BSP_QSPI_EnableMemoryMappedMode(0) != BSP_ERROR_NONE)
 8000948:	f006 fa96 	bl	8006e78 <BSP_QSPI_EnableMemoryMappedMode>
 800094c:	4603      	mov	r3, r0
 800094e:	b108      	cbz	r0, 8000954 <main+0x18c>
 8000950:	b672      	cpsid	i
  while (1)
 8000952:	e7fe      	b.n	8000952 <main+0x18a>
  hdma2d.Instance = DMA2D;
 8000954:	4868      	ldr	r0, [pc, #416]	@ (8000af8 <main+0x330>)
  hdma2d.Init.Mode = DMA2D_R2M;
 8000956:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 800095a:	f8df c1a8 	ldr.w	ip, [pc, #424]	@ 8000b04 <main+0x33c>
  hdma2d.Init.OutputOffset = 0;
 800095e:	e9c0 5302 	strd	r5, r3, [r0, #8]
  hdma2d.Init.Mode = DMA2D_R2M;
 8000962:	e9c0 c200 	strd	ip, r2, [r0]
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8000966:	f007 f8a6 	bl	8007ab6 <HAL_DMA2D_Init>
 800096a:	4604      	mov	r4, r0
 800096c:	b108      	cbz	r0, 8000972 <main+0x1aa>
 800096e:	b672      	cpsid	i
  while (1)
 8000970:	e7fe      	b.n	8000970 <main+0x1a8>
  HAL_GPIO_WritePin(GPIOG , GPIO_PIN_3 , GPIO_PIN_RESET);
 8000972:	4602      	mov	r2, r0
 8000974:	4639      	mov	r1, r7
 8000976:	4861      	ldr	r0, [pc, #388]	@ (8000afc <main+0x334>)
 8000978:	f007 ff80 	bl	800887c <HAL_GPIO_WritePin>
  HAL_Delay(20);/* wait 20 ms */
 800097c:	2014      	movs	r0, #20
 800097e:	f006 ff73 	bl	8007868 <HAL_Delay>
  HAL_GPIO_WritePin(GPIOG , GPIO_PIN_3, GPIO_PIN_SET);/* Deactivate XRES */
 8000982:	4639      	mov	r1, r7
 8000984:	462a      	mov	r2, r5
 8000986:	485d      	ldr	r0, [pc, #372]	@ (8000afc <main+0x334>)
 8000988:	f007 ff78 	bl	800887c <HAL_GPIO_WritePin>
  HAL_Delay(10);/* Wait for 10ms after releasing XRES before sending commands */
 800098c:	200a      	movs	r0, #10
 800098e:	f006 ff6b 	bl	8007868 <HAL_Delay>
  DSI_HOST_TimeoutTypeDef HostTimeouts = {0};
 8000992:	2224      	movs	r2, #36	@ 0x24
 8000994:	4621      	mov	r1, r4
 8000996:	a817      	add	r0, sp, #92	@ 0x5c
 8000998:	f026 ff0e 	bl	80277b8 <memset>
  DSI_PHY_TimerTypeDef PhyTimings = {0};
 800099c:	2218      	movs	r2, #24
 800099e:	4621      	mov	r1, r4
 80009a0:	a811      	add	r0, sp, #68	@ 0x44
 80009a2:	f026 ff09 	bl	80277b8 <memset>
  DSI_LPCmdTypeDef LPCmd = {0};
 80009a6:	2234      	movs	r2, #52	@ 0x34
 80009a8:	4621      	mov	r1, r4
 80009aa:	a82d      	add	r0, sp, #180	@ 0xb4
 80009ac:	f026 ff04 	bl	80277b8 <memset>
  DSI_CmdCfgTypeDef CmdCfg = {0};
 80009b0:	4621      	mov	r1, r4
 80009b2:	222c      	movs	r2, #44	@ 0x2c
 80009b4:	a820      	add	r0, sp, #128	@ 0x80
 80009b6:	f026 feff 	bl	80277b8 <memset>
  hdsi.Instance = DSI;
 80009ba:	4f51      	ldr	r7, [pc, #324]	@ (8000b00 <main+0x338>)
 80009bc:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
  if (HAL_DSI_Init(&hdsi, &PLLInit) != HAL_OK)
 80009c0:	a90e      	add	r1, sp, #56	@ 0x38
 80009c2:	4638      	mov	r0, r7
  PLLInit.PLLODF = DSI_PLL_OUT_DIV2;
 80009c4:	9510      	str	r5, [sp, #64]	@ 0x40
  hdsi.Init.AutomaticClockLaneControl = DSI_AUTO_CLK_LANE_CTRL_DISABLE;
 80009c6:	e9c7 3400 	strd	r3, r4, [r7]
  PLLInit.PLLNDIV = 119;
 80009ca:	2377      	movs	r3, #119	@ 0x77
  hdsi.Init.NumberOfLanes = DSI_TWO_DATA_LANES;
 80009cc:	e9c7 8502 	strd	r8, r5, [r7, #8]
  PLLInit.PLLIDF = DSI_PLL_IN_DIV3;
 80009d0:	e9cd 360e 	strd	r3, r6, [sp, #56]	@ 0x38
  if (HAL_DSI_Init(&hdsi, &PLLInit) != HAL_OK)
 80009d4:	f007 f9bc 	bl	8007d50 <HAL_DSI_Init>
 80009d8:	b108      	cbz	r0, 80009de <main+0x216>
 80009da:	b672      	cpsid	i
  while (1)
 80009dc:	e7fe      	b.n	80009dc <main+0x214>
  HostTimeouts.HighSpeedTransmissionTimeout = 0;
 80009de:	e9cd 5017 	strd	r5, r0, [sp, #92]	@ 0x5c
  HostTimeouts.HighSpeedReadTimeout = 0;
 80009e2:	e9cd 0019 	strd	r0, r0, [sp, #100]	@ 0x64
  HostTimeouts.HighSpeedWriteTimeout = 0;
 80009e6:	e9cd 001b 	strd	r0, r0, [sp, #108]	@ 0x6c
  HostTimeouts.LowPowerWriteTimeout = 0;
 80009ea:	e9cd 001d 	strd	r0, r0, [sp, #116]	@ 0x74
  HostTimeouts.BTATimeout = 0;
 80009ee:	901f      	str	r0, [sp, #124]	@ 0x7c
  if (HAL_DSI_ConfigHostTimeouts(&hdsi, &HostTimeouts) != HAL_OK)
 80009f0:	a917      	add	r1, sp, #92	@ 0x5c
 80009f2:	4638      	mov	r0, r7
 80009f4:	f007 fc18 	bl	8008228 <HAL_DSI_ConfigHostTimeouts>
 80009f8:	b108      	cbz	r0, 80009fe <main+0x236>
 80009fa:	b672      	cpsid	i
  while (1)
 80009fc:	e7fe      	b.n	80009fc <main+0x234>
  PhyTimings.ClockLaneLP2HSTime = 33;
 80009fe:	2321      	movs	r3, #33	@ 0x21
 8000a00:	251c      	movs	r5, #28
  PhyTimings.DataLaneLP2HSTime = 25;
 8000a02:	260f      	movs	r6, #15
  if (HAL_DSI_ConfigPhyTimer(&hdsi, &PhyTimings) != HAL_OK)
 8000a04:	a911      	add	r1, sp, #68	@ 0x44
  PhyTimings.ClockLaneLP2HSTime = 33;
 8000a06:	e9cd 5311 	strd	r5, r3, [sp, #68]	@ 0x44
  PhyTimings.DataLaneLP2HSTime = 25;
 8000a0a:	2319      	movs	r3, #25
  PhyTimings.StopWaitTime = 0;
 8000a0c:	e9cd 0015 	strd	r0, r0, [sp, #84]	@ 0x54
  if (HAL_DSI_ConfigPhyTimer(&hdsi, &PhyTimings) != HAL_OK)
 8000a10:	4638      	mov	r0, r7
  PhyTimings.DataLaneLP2HSTime = 25;
 8000a12:	e9cd 6313 	strd	r6, r3, [sp, #76]	@ 0x4c
  if (HAL_DSI_ConfigPhyTimer(&hdsi, &PhyTimings) != HAL_OK)
 8000a16:	f007 fbca 	bl	80081ae <HAL_DSI_ConfigPhyTimer>
 8000a1a:	b108      	cbz	r0, 8000a20 <main+0x258>
 8000a1c:	b672      	cpsid	i
  while (1)
 8000a1e:	e7fe      	b.n	8000a1e <main+0x256>
  if (HAL_DSI_ConfigFlowControl(&hdsi, DSI_FLOW_CONTROL_BTA) != HAL_OK)
 8000a20:	2104      	movs	r1, #4
 8000a22:	4837      	ldr	r0, [pc, #220]	@ (8000b00 <main+0x338>)
 8000a24:	f007 fbb2 	bl	800818c <HAL_DSI_ConfigFlowControl>
 8000a28:	b108      	cbz	r0, 8000a2e <main+0x266>
 8000a2a:	b672      	cpsid	i
  while (1)
 8000a2c:	e7fe      	b.n	8000a2c <main+0x264>
  if (HAL_DSI_SetLowPowerRXFilter(&hdsi, 10000) != HAL_OK)
 8000a2e:	f242 7110 	movw	r1, #10000	@ 0x2710
 8000a32:	4833      	ldr	r0, [pc, #204]	@ (8000b00 <main+0x338>)
 8000a34:	f007 fd81 	bl	800853a <HAL_DSI_SetLowPowerRXFilter>
 8000a38:	4601      	mov	r1, r0
 8000a3a:	b108      	cbz	r0, 8000a40 <main+0x278>
 8000a3c:	b672      	cpsid	i
  while (1)
 8000a3e:	e7fe      	b.n	8000a3e <main+0x276>
  if (HAL_DSI_ConfigErrorMonitor(&hdsi, HAL_DSI_ERROR_NONE) != HAL_OK)
 8000a40:	482f      	ldr	r0, [pc, #188]	@ (8000b00 <main+0x338>)
 8000a42:	f007 f922 	bl	8007c8a <HAL_DSI_ConfigErrorMonitor>
 8000a46:	b108      	cbz	r0, 8000a4c <main+0x284>
 8000a48:	b672      	cpsid	i
  while (1)
 8000a4a:	e7fe      	b.n	8000a4a <main+0x282>
  LPCmd.LPGenShortWriteOneP = DSI_LP_GSW1P_ENABLE;
 8000a4c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000a50:	f44f 7980 	mov.w	r9, #256	@ 0x100
  LPCmd.LPGenShortReadNoP = DSI_LP_GSR0P_ENABLE;
 8000a54:	f44f 6a80 	mov.w	sl, #1024	@ 0x400
  LPCmd.LPGenShortReadTwoP = DSI_LP_GSR2P_ENABLE;
 8000a58:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
  LPCmd.LPDcsShortWriteNoP = DSI_LP_DSW0P_ENABLE;
 8000a5c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
  LPCmd.LPDcsShortReadNoP = DSI_LP_DSR0P_ENABLE;
 8000a60:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
  LPCmd.LPMaxReadPacket = DSI_LP_MRDP_ENABLE;
 8000a64:	f44f 2400 	mov.w	r4, #524288	@ 0x80000
  LPCmd.AcknowledgeRequest = DSI_ACKNOWLEDGE_ENABLE;
 8000a68:	f04f 0802 	mov.w	r8, #2
  LPCmd.LPGenShortWriteOneP = DSI_LP_GSW1P_ENABLE;
 8000a6c:	e9cd 932d 	strd	r9, r3, [sp, #180]	@ 0xb4
  LPCmd.LPGenShortReadNoP = DSI_LP_GSR0P_ENABLE;
 8000a70:	f44f 6300 	mov.w	r3, #2048	@ 0x800
  LPCmd.AcknowledgeRequest = DSI_ACKNOWLEDGE_ENABLE;
 8000a74:	f8cd 80e4 	str.w	r8, [sp, #228]	@ 0xe4
  LPCmd.LPGenShortReadNoP = DSI_LP_GSR0P_ENABLE;
 8000a78:	e9cd a32f 	strd	sl, r3, [sp, #188]	@ 0xbc
  LPCmd.LPGenShortReadTwoP = DSI_LP_GSR2P_ENABLE;
 8000a7c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000a80:	e9cd 2331 	strd	r2, r3, [sp, #196]	@ 0xc4
  LPCmd.LPDcsShortWriteNoP = DSI_LP_DSW0P_ENABLE;
 8000a84:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000a88:	e9cd 1333 	strd	r1, r3, [sp, #204]	@ 0xcc
  LPCmd.LPDcsShortReadNoP = DSI_LP_DSR0P_ENABLE;
 8000a8c:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
  if (HAL_DSI_ConfigCommand(&hdsi, &LPCmd) != HAL_OK)
 8000a90:	a92d      	add	r1, sp, #180	@ 0xb4
  LPCmd.LPDcsShortReadNoP = DSI_LP_DSR0P_ENABLE;
 8000a92:	e9cd 0335 	strd	r0, r3, [sp, #212]	@ 0xd4
  LPCmd.LPMaxReadPacket = DSI_LP_MRDP_ENABLE;
 8000a96:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
  if (HAL_DSI_ConfigCommand(&hdsi, &LPCmd) != HAL_OK)
 8000a9a:	4819      	ldr	r0, [pc, #100]	@ (8000b00 <main+0x338>)
  LPCmd.LPMaxReadPacket = DSI_LP_MRDP_ENABLE;
 8000a9c:	e9cd 4337 	strd	r4, r3, [sp, #220]	@ 0xdc
  if (HAL_DSI_ConfigCommand(&hdsi, &LPCmd) != HAL_OK)
 8000aa0:	f007 fb40 	bl	8008124 <HAL_DSI_ConfigCommand>
 8000aa4:	b108      	cbz	r0, 8000aaa <main+0x2e2>
 8000aa6:	b672      	cpsid	i
  while (1)
 8000aa8:	e7fe      	b.n	8000aa8 <main+0x2e0>
  CmdCfg.CommandSize = 400;
 8000aaa:	2305      	movs	r3, #5
 8000aac:	f44f 77c8 	mov.w	r7, #400	@ 0x190
  CmdCfg.TEAcknowledgeRequest = DSI_TE_ACKNOWLEDGE_ENABLE;
 8000ab0:	2601      	movs	r6, #1
  CmdCfg.VirtualChannelID = 0;
 8000ab2:	9020      	str	r0, [sp, #128]	@ 0x80
  CmdCfg.DEPolarity = DSI_DATA_ENABLE_ACTIVE_HIGH;
 8000ab4:	9027      	str	r0, [sp, #156]	@ 0x9c
  CmdCfg.TEAcknowledgeRequest = DSI_TE_ACKNOWLEDGE_ENABLE;
 8000ab6:	962a      	str	r6, [sp, #168]	@ 0xa8
  CmdCfg.CommandSize = 400;
 8000ab8:	e9cd 3721 	strd	r3, r7, [sp, #132]	@ 0x84
  CmdCfg.TearingEffectSource = DSI_TE_EXTERNAL;
 8000abc:	2310      	movs	r3, #16
  CmdCfg.TearingEffectPolarity = DSI_TE_RISING_EDGE;
 8000abe:	e9cd 3023 	strd	r3, r0, [sp, #140]	@ 0x8c
  CmdCfg.VSyncPol = DSI_VSYNC_RISING;
 8000ac2:	2380      	movs	r3, #128	@ 0x80
  CmdCfg.VSPolarity = DSI_VSYNC_ACTIVE_HIGH;
 8000ac4:	e9cd 0025 	strd	r0, r0, [sp, #148]	@ 0x94
  if (HAL_DSI_ConfigAdaptedCommandMode(&hdsi, &CmdCfg) != HAL_OK)
 8000ac8:	eb0d 0103 	add.w	r1, sp, r3
  CmdCfg.AutomaticRefresh = DSI_AR_DISABLE;
 8000acc:	e9cd 3028 	strd	r3, r0, [sp, #160]	@ 0xa0
  if (HAL_DSI_ConfigAdaptedCommandMode(&hdsi, &CmdCfg) != HAL_OK)
 8000ad0:	480b      	ldr	r0, [pc, #44]	@ (8000b00 <main+0x338>)
 8000ad2:	f007 fab5 	bl	8008040 <HAL_DSI_ConfigAdaptedCommandMode>
 8000ad6:	4601      	mov	r1, r0
 8000ad8:	b1b0      	cbz	r0, 8000b08 <main+0x340>
 8000ada:	b672      	cpsid	i
  while (1)
 8000adc:	e7fe      	b.n	8000adc <main+0x314>
 8000ade:	bf00      	nop
 8000ae0:	0300001b 	.word	0x0300001b
 8000ae4:	10040000 	.word	0x10040000
 8000ae8:	e000ed00 	.word	0xe000ed00
 8000aec:	58024400 	.word	0x58024400
 8000af0:	240003c8 	.word	0x240003c8
 8000af4:	52005000 	.word	0x52005000
 8000af8:	24000608 	.word	0x24000608
 8000afc:	58021800 	.word	0x58021800
 8000b00:	240005ec 	.word	0x240005ec
 8000b04:	52001000 	.word	0x52001000
  if (HAL_DSI_SetGenericVCID(&hdsi, 0) != HAL_OK)
 8000b08:	485b      	ldr	r0, [pc, #364]	@ (8000c78 <main+0x4b0>)
 8000b0a:	f007 fa88 	bl	800801e <HAL_DSI_SetGenericVCID>
 8000b0e:	4604      	mov	r4, r0
 8000b10:	b108      	cbz	r0, 8000b16 <main+0x34e>
 8000b12:	b672      	cpsid	i
  while (1)
 8000b14:	e7fe      	b.n	8000b14 <main+0x34c>
  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8000b16:	2234      	movs	r2, #52	@ 0x34
 8000b18:	4601      	mov	r1, r0
 8000b1a:	a820      	add	r0, sp, #128	@ 0x80
  hltdc.Instance = LTDC;
 8000b1c:	4d57      	ldr	r5, [pc, #348]	@ (8000c7c <main+0x4b4>)
  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8000b1e:	f026 fe4b 	bl	80277b8 <memset>
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AH;
 8000b22:	f8df c198 	ldr.w	ip, [pc, #408]	@ 8000cbc <main+0x4f4>
 8000b26:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
  hltdc.Init.AccumulatedActiveH = 482;
 8000b2a:	f44f 7ec9 	mov.w	lr, #402	@ 0x192
  hltdc.Init.AccumulatedVBP = 2;
 8000b2e:	f8c5 8020 	str.w	r8, [r5, #32]
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000b32:	4628      	mov	r0, r5
  hltdc.Init.Backcolor.Blue = 0;
 8000b34:	86ac      	strh	r4, [r5, #52]	@ 0x34
  hltdc.Init.Backcolor.Red = 0;
 8000b36:	f885 4036 	strb.w	r4, [r5, #54]	@ 0x36
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AH;
 8000b3a:	e9c5 c300 	strd	ip, r3, [r5]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AH;
 8000b3e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000b42:	e9c5 3402 	strd	r3, r4, [r5, #8]
  hltdc.Init.AccumulatedActiveH = 482;
 8000b46:	f44f 73f1 	mov.w	r3, #482	@ 0x1e2
  hltdc.Init.AccumulatedHBP = 2;
 8000b4a:	e9c5 4806 	strd	r4, r8, [r5, #24]
  hltdc.Init.AccumulatedActiveH = 482;
 8000b4e:	e9c5 e309 	strd	lr, r3, [r5, #36]	@ 0x24
  hltdc.Init.TotalHeigh = 483;
 8000b52:	f240 1893 	movw	r8, #403	@ 0x193
 8000b56:	f240 13e3 	movw	r3, #483	@ 0x1e3
  hltdc.Init.HorizontalSync = 0;
 8000b5a:	e9c5 4404 	strd	r4, r4, [r5, #16]
  hltdc.Init.TotalHeigh = 483;
 8000b5e:	e9c5 830b 	strd	r8, r3, [r5, #44]	@ 0x2c
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000b62:	f009 f9fd 	bl	8009f60 <HAL_LTDC_Init>
 8000b66:	4602      	mov	r2, r0
 8000b68:	b108      	cbz	r0, 8000b6e <main+0x3a6>
 8000b6a:	b672      	cpsid	i
  while (1)
 8000b6c:	e7fe      	b.n	8000b6c <main+0x3a4>
  pLayerCfg.Alpha = 255;
 8000b6e:	21ff      	movs	r1, #255	@ 0xff
  pLayerCfg.WindowY0 = 0;
 8000b70:	9022      	str	r0, [sp, #136]	@ 0x88
  pLayerCfg.WindowY1 = 480;
 8000b72:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
  pLayerCfg.Backcolor.Blue = 0;
 8000b76:	f8ad 20b0 	strh.w	r2, [sp, #176]	@ 0xb0
  pLayerCfg.Backcolor.Red = 0;
 8000b7a:	f88d 20b2 	strb.w	r2, [sp, #178]	@ 0xb2
  pLayerCfg.ImageHeight = 480;
 8000b7e:	932b      	str	r3, [sp, #172]	@ 0xac
  pLayerCfg.Alpha0 = 0;
 8000b80:	e9cd 1025 	strd	r1, r0, [sp, #148]	@ 0x94
  pLayerCfg.WindowX1 = 400;
 8000b84:	e9cd 0720 	strd	r0, r7, [sp, #128]	@ 0x80
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8000b88:	2107      	movs	r1, #7
 8000b8a:	f44f 60c0 	mov.w	r0, #1536	@ 0x600
 8000b8e:	e9cd 0127 	strd	r0, r1, [sp, #156]	@ 0x9c
  pLayerCfg.FBStartAdress = 0xD0000000;
 8000b92:	f04f 4150 	mov.w	r1, #3489660928	@ 0xd0000000
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000b96:	4628      	mov	r0, r5
  pLayerCfg.ImageWidth = 400;
 8000b98:	e9cd 1729 	strd	r1, r7, [sp, #164]	@ 0xa4
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000b9c:	a920      	add	r1, sp, #128	@ 0x80
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB888;
 8000b9e:	e9cd 3623 	strd	r3, r6, [sp, #140]	@ 0x8c
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000ba2:	f009 faa9 	bl	800a0f8 <HAL_LTDC_ConfigLayer>
 8000ba6:	4604      	mov	r4, r0
 8000ba8:	b108      	cbz	r0, 8000bae <main+0x3e6>
 8000baa:	b672      	cpsid	i
  while (1)
 8000bac:	e7fe      	b.n	8000bac <main+0x3e4>
  __HAL_LTDC_DISABLE(&hltdc);
 8000bae:	682a      	ldr	r2, [r5, #0]
  HAL_DSI_Start(&hdsi);
 8000bb0:	4831      	ldr	r0, [pc, #196]	@ (8000c78 <main+0x4b0>)
  __HAL_LTDC_DISABLE(&hltdc);
 8000bb2:	6993      	ldr	r3, [r2, #24]
 8000bb4:	f023 0301 	bic.w	r3, r3, #1
 8000bb8:	6193      	str	r3, [r2, #24]
  HAL_DSI_Start(&hdsi);
 8000bba:	f007 fb9b 	bl	80082f4 <HAL_DSI_Start>
  IOCtx.Address     = 0;
 8000bbe:	4930      	ldr	r1, [pc, #192]	@ (8000c80 <main+0x4b8>)
  IOCtx.GetTick     = BSP_GetTick;
 8000bc0:	4b30      	ldr	r3, [pc, #192]	@ (8000c84 <main+0x4bc>)
  OTM8009A_RegisterBusIO(&OTM8009AObj, &IOCtx);
 8000bc2:	4831      	ldr	r0, [pc, #196]	@ (8000c88 <main+0x4c0>)
  IOCtx.GetTick     = BSP_GetTick;
 8000bc4:	60cb      	str	r3, [r1, #12]
  IOCtx.WriteReg    = DSI_IO_Write;
 8000bc6:	4b31      	ldr	r3, [pc, #196]	@ (8000c8c <main+0x4c4>)
  IOCtx.Address     = 0;
 8000bc8:	800c      	strh	r4, [r1, #0]
  IOCtx.WriteReg    = DSI_IO_Write;
 8000bca:	604b      	str	r3, [r1, #4]
  IOCtx.ReadReg     = DSI_IO_Read;
 8000bcc:	4b30      	ldr	r3, [pc, #192]	@ (8000c90 <main+0x4c8>)
 8000bce:	608b      	str	r3, [r1, #8]
  OTM8009A_RegisterBusIO(&OTM8009AObj, &IOCtx);
 8000bd0:	f005 ff4a 	bl	8006a68 <OTM8009A_RegisterBusIO>
  OTM8009A_Init(&OTM8009AObj ,OTM8009A_FORMAT_RGB888, OTM8009A_ORIENTATION_LANDSCAPE);
 8000bd4:	4632      	mov	r2, r6
 8000bd6:	4621      	mov	r1, r4
 8000bd8:	482b      	ldr	r0, [pc, #172]	@ (8000c88 <main+0x4c0>)
 8000bda:	f005 fbb5 	bl	8006348 <OTM8009A_Init>
  HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P1, OTM8009A_CMD_DISPOFF, 0x00);
 8000bde:	2328      	movs	r3, #40	@ 0x28
 8000be0:	2215      	movs	r2, #21
 8000be2:	4621      	mov	r1, r4
 8000be4:	4824      	ldr	r0, [pc, #144]	@ (8000c78 <main+0x4b0>)
 8000be6:	9400      	str	r4, [sp, #0]
 8000be8:	f007 fbb7 	bl	800835a <HAL_DSI_ShortWrite>
  HAL_DSI_ConfigCommand(&hdsi, &LPCmd);
 8000bec:	a92d      	add	r1, sp, #180	@ 0xb4
 8000bee:	4822      	ldr	r0, [pc, #136]	@ (8000c78 <main+0x4b0>)
  LPCmd.LPDcsLongWrite = DSI_LP_DLW_DISABLE;
 8000bf0:	9437      	str	r4, [sp, #220]	@ 0xdc
  LPCmd.LPGenShortWriteOneP = DSI_LP_GSW1P_DISABLE;
 8000bf2:	e9cd 442d 	strd	r4, r4, [sp, #180]	@ 0xb4
  LPCmd.LPGenShortReadNoP = DSI_LP_GSR0P_DISABLE;
 8000bf6:	e9cd 442f 	strd	r4, r4, [sp, #188]	@ 0xbc
  LPCmd.LPGenShortReadTwoP = DSI_LP_GSR2P_DISABLE;
 8000bfa:	e9cd 4431 	strd	r4, r4, [sp, #196]	@ 0xc4
  LPCmd.LPDcsShortWriteNoP = DSI_LP_DSW0P_DISABLE;
 8000bfe:	e9cd 4433 	strd	r4, r4, [sp, #204]	@ 0xcc
  LPCmd.LPDcsShortReadNoP = DSI_LP_DSR0P_DISABLE;
 8000c02:	e9cd 4435 	strd	r4, r4, [sp, #212]	@ 0xd4
  HAL_DSI_ConfigCommand(&hdsi, &LPCmd);
 8000c06:	f007 fa8d 	bl	8008124 <HAL_DSI_ConfigCommand>
  HAL_LTDC_SetPitch(&hltdc, 800, 0);
 8000c0a:	4622      	mov	r2, r4
 8000c0c:	f44f 7148 	mov.w	r1, #800	@ 0x320
 8000c10:	4628      	mov	r0, r5
 8000c12:	f009 fa9f 	bl	800a154 <HAL_LTDC_SetPitch>
  __HAL_LTDC_ENABLE(&hltdc);
 8000c16:	682a      	ldr	r2, [r5, #0]
  hcrc.Instance = CRC;
 8000c18:	481e      	ldr	r0, [pc, #120]	@ (8000c94 <main+0x4cc>)
  __HAL_LTDC_ENABLE(&hltdc);
 8000c1a:	6993      	ldr	r3, [r2, #24]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8000c1c:	8084      	strh	r4, [r0, #4]
  __HAL_LTDC_ENABLE(&hltdc);
 8000c1e:	f043 0301 	orr.w	r3, r3, #1
 8000c22:	6193      	str	r3, [r2, #24]
  hcrc.Instance = CRC;
 8000c24:	4b1c      	ldr	r3, [pc, #112]	@ (8000c98 <main+0x4d0>)
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8000c26:	6206      	str	r6, [r0, #32]
  hcrc.Instance = CRC;
 8000c28:	6003      	str	r3, [r0, #0]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000c2a:	e9c0 4405 	strd	r4, r4, [r0, #20]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000c2e:	f006 fee1 	bl	80079f4 <HAL_CRC_Init>
 8000c32:	b108      	cbz	r0, 8000c38 <main+0x470>
 8000c34:	b672      	cpsid	i
  while (1)
 8000c36:	e7fe      	b.n	8000c36 <main+0x46e>
  hjpeg.Instance = JPEG;
 8000c38:	4818      	ldr	r0, [pc, #96]	@ (8000c9c <main+0x4d4>)
 8000c3a:	4b19      	ldr	r3, [pc, #100]	@ (8000ca0 <main+0x4d8>)
 8000c3c:	6003      	str	r3, [r0, #0]
  if (HAL_JPEG_Init(&hjpeg) != HAL_OK)
 8000c3e:	f008 fb77 	bl	8009330 <HAL_JPEG_Init>
 8000c42:	b108      	cbz	r0, 8000c48 <main+0x480>
 8000c44:	b672      	cpsid	i
  while (1)
 8000c46:	e7fe      	b.n	8000c46 <main+0x47e>
  MX_TouchGFX_Init();
 8000c48:	f000 fd8e 	bl	8001768 <MX_TouchGFX_Init>
  MX_TouchGFX_PreOSInit();
 8000c4c:	f000 fd8b 	bl	8001766 <MX_TouchGFX_PreOSInit>
  osKernelInitialize();
 8000c50:	f00b fdb4 	bl	800c7bc <osKernelInitialize>
  TouchGFXTaskHandle = osThreadNew(TouchGFX_Task, NULL, &TouchGFXTask_attributes);
 8000c54:	4a13      	ldr	r2, [pc, #76]	@ (8000ca4 <main+0x4dc>)
 8000c56:	2100      	movs	r1, #0
 8000c58:	4813      	ldr	r0, [pc, #76]	@ (8000ca8 <main+0x4e0>)
 8000c5a:	f00b fddb 	bl	800c814 <osThreadNew>
 8000c5e:	4b13      	ldr	r3, [pc, #76]	@ (8000cac <main+0x4e4>)
  videoTaskHandle = osThreadNew(videoTaskFunc, NULL, &videoTask_attributes);
 8000c60:	4a13      	ldr	r2, [pc, #76]	@ (8000cb0 <main+0x4e8>)
 8000c62:	2100      	movs	r1, #0
  TouchGFXTaskHandle = osThreadNew(TouchGFX_Task, NULL, &TouchGFXTask_attributes);
 8000c64:	6018      	str	r0, [r3, #0]
  videoTaskHandle = osThreadNew(videoTaskFunc, NULL, &videoTask_attributes);
 8000c66:	4813      	ldr	r0, [pc, #76]	@ (8000cb4 <main+0x4ec>)
 8000c68:	f00b fdd4 	bl	800c814 <osThreadNew>
 8000c6c:	4b12      	ldr	r3, [pc, #72]	@ (8000cb8 <main+0x4f0>)
 8000c6e:	6018      	str	r0, [r3, #0]
  osKernelStart();
 8000c70:	f00b fdb6 	bl	800c7e0 <osKernelStart>
  while (1)
 8000c74:	e7fe      	b.n	8000c74 <main+0x4ac>
 8000c76:	bf00      	nop
 8000c78:	240005ec 	.word	0x240005ec
 8000c7c:	24000414 	.word	0x24000414
 8000c80:	2400035c 	.word	0x2400035c
 8000c84:	08006e49 	.word	0x08006e49
 8000c88:	2400036c 	.word	0x2400036c
 8000c8c:	08001d11 	.word	0x08001d11
 8000c90:	08001d49 	.word	0x08001d49
 8000c94:	24000670 	.word	0x24000670
 8000c98:	58024c00 	.word	0x58024c00
 8000c9c:	24000594 	.word	0x24000594
 8000ca0:	52003000 	.word	0x52003000
 8000ca4:	0802837c 	.word	0x0802837c
 8000ca8:	08001777 	.word	0x08001777
 8000cac:	24000390 	.word	0x24000390
 8000cb0:	08028358 	.word	0x08028358
 8000cb4:	080038b5 	.word	0x080038b5
 8000cb8:	2400038c 	.word	0x2400038c
 8000cbc:	50001000 	.word	0x50001000
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cc0:	2214      	movs	r2, #20
 8000cc2:	2100      	movs	r1, #0
 8000cc4:	a82d      	add	r0, sp, #180	@ 0xb4
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cc6:	2501      	movs	r5, #1
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cc8:	f026 fd76 	bl	80277b8 <memset>
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000ccc:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
  HAL_GPIO_WritePin(GPIOJ, LCD_BL_Pin|FRAME_RATE_Pin|RENDER_TIME_Pin|VSYNC_FREQ_Pin, GPIO_PIN_RESET);
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	f241 3108 	movw	r1, #4872	@ 0x1308
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000cd6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
  HAL_GPIO_WritePin(GPIOJ, LCD_BL_Pin|FRAME_RATE_Pin|RENDER_TIME_Pin|VSYNC_FREQ_Pin, GPIO_PIN_RESET);
 8000cda:	488d      	ldr	r0, [pc, #564]	@ (8000f10 <main+0x748>)
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cdc:	f04f 0900 	mov.w	r9, #0
 8000ce0:	2603      	movs	r6, #3
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000ce2:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ce6:	f44f 7880 	mov.w	r8, #256	@ 0x100
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000cea:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cee:	f04f 0a02 	mov.w	sl, #2
  GPIO_InitStruct.Pin = LCD_RESET_Pin;
 8000cf2:	2708      	movs	r7, #8
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000cf4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000cf8:	9304      	str	r3, [sp, #16]
 8000cfa:	9b04      	ldr	r3, [sp, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cfc:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8000d00:	f043 0302 	orr.w	r3, r3, #2
 8000d04:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
 8000d08:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8000d0c:	f003 0302 	and.w	r3, r3, #2
 8000d10:	9305      	str	r3, [sp, #20]
 8000d12:	9b05      	ldr	r3, [sp, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000d14:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8000d18:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000d1c:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
 8000d20:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8000d24:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000d28:	9306      	str	r3, [sp, #24]
 8000d2a:	9b06      	ldr	r3, [sp, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000d2c:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8000d30:	f043 0310 	orr.w	r3, r3, #16
 8000d34:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
 8000d38:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8000d3c:	f003 0310 	and.w	r3, r3, #16
 8000d40:	9307      	str	r3, [sp, #28]
 8000d42:	9b07      	ldr	r3, [sp, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d44:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8000d48:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000d4c:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
 8000d50:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8000d54:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000d58:	9308      	str	r3, [sp, #32]
 8000d5a:	9b08      	ldr	r3, [sp, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d5c:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8000d60:	f043 0304 	orr.w	r3, r3, #4
 8000d64:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
 8000d68:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8000d6c:	f003 0304 	and.w	r3, r3, #4
 8000d70:	9309      	str	r3, [sp, #36]	@ 0x24
 8000d72:	9b09      	ldr	r3, [sp, #36]	@ 0x24
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000d74:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8000d78:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000d7c:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
 8000d80:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8000d84:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000d88:	930a      	str	r3, [sp, #40]	@ 0x28
 8000d8a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d8c:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8000d90:	f043 0308 	orr.w	r3, r3, #8
 8000d94:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
 8000d98:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8000d9c:	f003 0308 	and.w	r3, r3, #8
 8000da0:	930b      	str	r3, [sp, #44]	@ 0x2c
 8000da2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000da4:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8000da8:	f043 0301 	orr.w	r3, r3, #1
 8000dac:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
 8000db0:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8000db4:	f003 0301 	and.w	r3, r3, #1
 8000db8:	930c      	str	r3, [sp, #48]	@ 0x30
 8000dba:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000dbc:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8000dc0:	f043 0320 	orr.w	r3, r3, #32
 8000dc4:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
 8000dc8:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8000dcc:	f003 0320 	and.w	r3, r3, #32
 8000dd0:	930d      	str	r3, [sp, #52]	@ 0x34
 8000dd2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
  HAL_GPIO_WritePin(GPIOJ, LCD_BL_Pin|FRAME_RATE_Pin|RENDER_TIME_Pin|VSYNC_FREQ_Pin, GPIO_PIN_RESET);
 8000dd4:	f007 fd52 	bl	800887c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_RESET_GPIO_Port, LCD_RESET_Pin, GPIO_PIN_RESET);
 8000dd8:	2200      	movs	r2, #0
 8000dda:	2108      	movs	r1, #8
 8000ddc:	484d      	ldr	r0, [pc, #308]	@ (8000f14 <main+0x74c>)
 8000dde:	f007 fd4d 	bl	800887c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, GPIO_PIN_RESET);
 8000de2:	2200      	movs	r2, #0
 8000de4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000de8:	484b      	ldr	r0, [pc, #300]	@ (8000f18 <main+0x750>)
 8000dea:	f007 fd47 	bl	800887c <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dee:	f241 3308 	movw	r3, #4872	@ 0x1308
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8000df2:	a92d      	add	r1, sp, #180	@ 0xb4
 8000df4:	4846      	ldr	r0, [pc, #280]	@ (8000f10 <main+0x748>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000df6:	e9cd 352d 	strd	r3, r5, [sp, #180]	@ 0xb4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dfa:	e9cd 962f 	strd	r9, r6, [sp, #188]	@ 0xbc
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8000dfe:	f007 fbb3 	bl	8008568 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e02:	a92d      	add	r1, sp, #180	@ 0xb4
 8000e04:	4845      	ldr	r0, [pc, #276]	@ (8000f1c <main+0x754>)
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8000e06:	f8cd 90c4 	str.w	r9, [sp, #196]	@ 0xc4
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e0a:	e9cd 8a2d 	strd	r8, sl, [sp, #180]	@ 0xb4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e0e:	e9cd 992f 	strd	r9, r9, [sp, #188]	@ 0xbc
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e12:	f007 fba9 	bl	8008568 <HAL_GPIO_Init>
  HAL_GPIO_Init(LCD_RESET_GPIO_Port, &GPIO_InitStruct);
 8000e16:	a92d      	add	r1, sp, #180	@ 0xb4
 8000e18:	483e      	ldr	r0, [pc, #248]	@ (8000f14 <main+0x74c>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e1a:	e9cd 752d 	strd	r7, r5, [sp, #180]	@ 0xb4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e1e:	e9cd 562f 	strd	r5, r6, [sp, #188]	@ 0xbc
  HAL_GPIO_Init(LCD_RESET_GPIO_Port, &GPIO_InitStruct);
 8000e22:	f007 fba1 	bl	8008568 <HAL_GPIO_Init>
  HAL_GPIO_Init(MCU_ACTIVE_GPIO_Port, &GPIO_InitStruct);
 8000e26:	a92d      	add	r1, sp, #180	@ 0xb4
 8000e28:	483b      	ldr	r0, [pc, #236]	@ (8000f18 <main+0x750>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e2a:	e9cd 852d 	strd	r8, r5, [sp, #180]	@ 0xb4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e2e:	e9cd 962f 	strd	r9, r6, [sp, #188]	@ 0xbc
  HAL_GPIO_Init(MCU_ACTIVE_GPIO_Port, &GPIO_InitStruct);
 8000e32:	f007 fb99 	bl	8008568 <HAL_GPIO_Init>
  __HAL_RCC_MDMA_CLK_ENABLE();
 8000e36:	f8d4 30d4 	ldr.w	r3, [r4, #212]	@ 0xd4
  HAL_NVIC_SetPriority(MDMA_IRQn, 5, 0);
 8000e3a:	464a      	mov	r2, r9
 8000e3c:	2105      	movs	r1, #5
  __HAL_RCC_MDMA_CLK_ENABLE();
 8000e3e:	432b      	orrs	r3, r5
  HAL_NVIC_SetPriority(MDMA_IRQn, 5, 0);
 8000e40:	207a      	movs	r0, #122	@ 0x7a
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_32;
 8000e42:	f04f 0804 	mov.w	r8, #4
  __HAL_RCC_MDMA_CLK_ENABLE();
 8000e46:	f8c4 30d4 	str.w	r3, [r4, #212]	@ 0xd4
 8000e4a:	f8d4 30d4 	ldr.w	r3, [r4, #212]	@ 0xd4
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8000e4e:	2440      	movs	r4, #64	@ 0x40
  __HAL_RCC_MDMA_CLK_ENABLE();
 8000e50:	402b      	ands	r3, r5
 8000e52:	9303      	str	r3, [sp, #12]
 8000e54:	9b03      	ldr	r3, [sp, #12]
  HAL_NVIC_SetPriority(MDMA_IRQn, 5, 0);
 8000e56:	f006 fd31 	bl	80078bc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(MDMA_IRQn);
 8000e5a:	207a      	movs	r0, #122	@ 0x7a
 8000e5c:	f006 fd60 	bl	8007920 <HAL_NVIC_EnableIRQ>
  FMC_Bank1_R->BTCR[0] &= ~FMC_BCRx_MBKEN;
 8000e60:	4a2f      	ldr	r2, [pc, #188]	@ (8000f20 <main+0x758>)
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8000e62:	4830      	ldr	r0, [pc, #192]	@ (8000f24 <main+0x75c>)
  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8000e64:	a92d      	add	r1, sp, #180	@ 0xb4
  FMC_Bank1_R->BTCR[0] &= ~FMC_BCRx_MBKEN;
 8000e66:	6813      	ldr	r3, [r2, #0]
 8000e68:	f023 0301 	bic.w	r3, r3, #1
 8000e6c:	6013      	str	r3, [r2, #0]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 8000e6e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8000e72:	4b2d      	ldr	r3, [pc, #180]	@ (8000f28 <main+0x760>)
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8000e74:	f8c0 901c 	str.w	r9, [r0, #28]
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8000e78:	f8c0 9028 	str.w	r9, [r0, #40]	@ 0x28
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_9;
 8000e7c:	6085      	str	r5, [r0, #8]
  SdramTiming.LoadToActiveDelay = 2;
 8000e7e:	f8cd a0b4 	str.w	sl, [sp, #180]	@ 0xb4
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 8000e82:	e9c0 3500 	strd	r3, r5, [r0]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_32;
 8000e86:	2320      	movs	r3, #32
 8000e88:	e9c0 8303 	strd	r8, r3, [r0, #12]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8000e8c:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8000e90:	e9c0 4305 	strd	r4, r3, [r0, #20]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 8000e94:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000e98:	e9c0 2308 	strd	r2, r3, [r0, #32]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8000e9c:	2307      	movs	r3, #7
  SdramTiming.RCDDelay = 2;
 8000e9e:	e9cd aa32 	strd	sl, sl, [sp, #200]	@ 0xc8
  SdramTiming.SelfRefreshTime = 4;
 8000ea2:	e9cd 382e 	strd	r3, r8, [sp, #184]	@ 0xb8
  SdramTiming.WriteRecoveryTime = 3;
 8000ea6:	e9cd 3630 	strd	r3, r6, [sp, #192]	@ 0xc0
  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8000eaa:	f00b f9b7 	bl	800c21c <HAL_SDRAM_Init>
 8000eae:	4681      	mov	r9, r0
 8000eb0:	2800      	cmp	r0, #0
 8000eb2:	f47f ad2c 	bne.w	800090e <main+0x146>
  BSP_SDRAM_DeInit(0);
 8000eb6:	f006 f9ed 	bl	8007294 <BSP_SDRAM_DeInit>
  if(BSP_SDRAM_Init(0) != BSP_ERROR_NONE)
 8000eba:	4648      	mov	r0, r9
 8000ebc:	f006 fa38 	bl	8007330 <BSP_SDRAM_Init>
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	2800      	cmp	r0, #0
 8000ec4:	f43f ad25 	beq.w	8000912 <main+0x14a>
 8000ec8:	b672      	cpsid	i
  while (1)
 8000eca:	e7fe      	b.n	8000eca <main+0x702>
  HAL_Init();
 8000ecc:	f006 fc8c 	bl	80077e8 <HAL_Init>
  SystemClock_Config();
 8000ed0:	f7ff fc18 	bl	8000704 <SystemClock_Config>
__HAL_RCC_HSEM_CLK_ENABLE();
 8000ed4:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
HAL_HSEM_FastTake(HSEM_ID_0);
 8000ed8:	4620      	mov	r0, r4
__HAL_RCC_HSEM_CLK_ENABLE();
 8000eda:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000ede:	f8c5 30e0 	str.w	r3, [r5, #224]	@ 0xe0
 8000ee2:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
 8000ee6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000eea:	9302      	str	r3, [sp, #8]
 8000eec:	9b02      	ldr	r3, [sp, #8]
HAL_HSEM_FastTake(HSEM_ID_0);
 8000eee:	f007 fcd3 	bl	8008898 <HAL_HSEM_FastTake>
HAL_HSEM_Release(HSEM_ID_0,0);
 8000ef2:	4621      	mov	r1, r4
 8000ef4:	4620      	mov	r0, r4
 8000ef6:	f007 fcdd 	bl	80088b4 <HAL_HSEM_Release>
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000efa:	4c0c      	ldr	r4, [pc, #48]	@ (8000f2c <main+0x764>)
timeout = 0xFFFF;
 8000efc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000f00:	6822      	ldr	r2, [r4, #0]
 8000f02:	0412      	lsls	r2, r2, #16
 8000f04:	f53f aedc 	bmi.w	8000cc0 <main+0x4f8>
 8000f08:	3b01      	subs	r3, #1
 8000f0a:	d2f9      	bcs.n	8000f00 <main+0x738>
 8000f0c:	b672      	cpsid	i
  while (1)
 8000f0e:	e7fe      	b.n	8000f0e <main+0x746>
 8000f10:	58022400 	.word	0x58022400
 8000f14:	58021800 	.word	0x58021800
 8000f18:	58021400 	.word	0x58021400
 8000f1c:	58020000 	.word	0x58020000
 8000f20:	52004000 	.word	0x52004000
 8000f24:	24000394 	.word	0x24000394
 8000f28:	52004140 	.word	0x52004140
 8000f2c:	58024400 	.word	0x58024400

08000f30 <HAL_TIM_PeriodElapsedCallback>:
  if (htim->Instance == TIM6) {
 8000f30:	6802      	ldr	r2, [r0, #0]
 8000f32:	4b03      	ldr	r3, [pc, #12]	@ (8000f40 <HAL_TIM_PeriodElapsedCallback+0x10>)
 8000f34:	429a      	cmp	r2, r3
 8000f36:	d101      	bne.n	8000f3c <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
 8000f38:	f006 bc84 	b.w	8007844 <HAL_IncTick>
}
 8000f3c:	4770      	bx	lr
 8000f3e:	bf00      	nop
 8000f40:	40001000 	.word	0x40001000

08000f44 <Error_Handler>:
 8000f44:	b672      	cpsid	i
  while (1)
 8000f46:	e7fe      	b.n	8000f46 <Error_Handler+0x2>

08000f48 <HAL_MspInit>:

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f48:	4b0a      	ldr	r3, [pc, #40]	@ (8000f74 <HAL_MspInit+0x2c>)
{
 8000f4a:	b082      	sub	sp, #8

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000f4c:	210f      	movs	r1, #15
 8000f4e:	f06f 0001 	mvn.w	r0, #1
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f52:	f8d3 20f4 	ldr.w	r2, [r3, #244]	@ 0xf4
 8000f56:	f042 0202 	orr.w	r2, r2, #2
 8000f5a:	f8c3 20f4 	str.w	r2, [r3, #244]	@ 0xf4
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000f5e:	2200      	movs	r2, #0
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f60:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000f64:	f003 0302 	and.w	r3, r3, #2
 8000f68:	9301      	str	r3, [sp, #4]
 8000f6a:	9b01      	ldr	r3, [sp, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f6c:	b002      	add	sp, #8
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000f6e:	f006 bca5 	b.w	80078bc <HAL_NVIC_SetPriority>
 8000f72:	bf00      	nop
 8000f74:	58024400 	.word	0x58024400

08000f78 <HAL_CRC_MspInit>:
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
  if(hcrc->Instance==CRC)
 8000f78:	6802      	ldr	r2, [r0, #0]
{
 8000f7a:	b082      	sub	sp, #8
  if(hcrc->Instance==CRC)
 8000f7c:	4b09      	ldr	r3, [pc, #36]	@ (8000fa4 <HAL_CRC_MspInit+0x2c>)
 8000f7e:	429a      	cmp	r2, r3
 8000f80:	d10d      	bne.n	8000f9e <HAL_CRC_MspInit+0x26>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000f82:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
 8000f86:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8000f8a:	f442 2200 	orr.w	r2, r2, #524288	@ 0x80000
 8000f8e:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8000f92:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f96:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8000f9a:	9301      	str	r3, [sp, #4]
 8000f9c:	9b01      	ldr	r3, [sp, #4]

  /* USER CODE END CRC_MspInit 1 */

  }

}
 8000f9e:	b002      	add	sp, #8
 8000fa0:	4770      	bx	lr
 8000fa2:	bf00      	nop
 8000fa4:	58024c00 	.word	0x58024c00

08000fa8 <HAL_DMA2D_MspInit>:
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
  if(hdma2d->Instance==DMA2D)
 8000fa8:	4b0f      	ldr	r3, [pc, #60]	@ (8000fe8 <HAL_DMA2D_MspInit+0x40>)
{
 8000faa:	b507      	push	{r0, r1, r2, lr}
  if(hdma2d->Instance==DMA2D)
 8000fac:	6802      	ldr	r2, [r0, #0]
 8000fae:	429a      	cmp	r2, r3
 8000fb0:	d117      	bne.n	8000fe2 <HAL_DMA2D_MspInit+0x3a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8000fb2:	4b0e      	ldr	r3, [pc, #56]	@ (8000fec <HAL_DMA2D_MspInit+0x44>)
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 7, 0);
 8000fb4:	2107      	movs	r1, #7
 8000fb6:	205a      	movs	r0, #90	@ 0x5a
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8000fb8:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 8000fbc:	f042 0210 	orr.w	r2, r2, #16
 8000fc0:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
    HAL_NVIC_SetPriority(DMA2D_IRQn, 7, 0);
 8000fc4:	2200      	movs	r2, #0
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8000fc6:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000fca:	f003 0310 	and.w	r3, r3, #16
 8000fce:	9301      	str	r3, [sp, #4]
 8000fd0:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(DMA2D_IRQn, 7, 0);
 8000fd2:	f006 fc73 	bl	80078bc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8000fd6:	205a      	movs	r0, #90	@ 0x5a

  /* USER CODE END DMA2D_MspInit 1 */

  }

}
 8000fd8:	b003      	add	sp, #12
 8000fda:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8000fde:	f006 bc9f 	b.w	8007920 <HAL_NVIC_EnableIRQ>
}
 8000fe2:	b003      	add	sp, #12
 8000fe4:	f85d fb04 	ldr.w	pc, [sp], #4
 8000fe8:	52001000 	.word	0x52001000
 8000fec:	58024400 	.word	0x58024400

08000ff0 <HAL_DSI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdsi: DSI handle pointer
* @retval None
*/
void HAL_DSI_MspInit(DSI_HandleTypeDef* hdsi)
{
 8000ff0:	b510      	push	{r4, lr}
 8000ff2:	b0ba      	sub	sp, #232	@ 0xe8
 8000ff4:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ff6:	2214      	movs	r2, #20
 8000ff8:	2100      	movs	r1, #0
 8000ffa:	a803      	add	r0, sp, #12
 8000ffc:	f026 fbdc 	bl	80277b8 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001000:	22c8      	movs	r2, #200	@ 0xc8
 8001002:	2100      	movs	r1, #0
 8001004:	a808      	add	r0, sp, #32
 8001006:	f026 fbd7 	bl	80277b8 <memset>
  if(hdsi->Instance==DSI)
 800100a:	6823      	ldr	r3, [r4, #0]
 800100c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001010:	d138      	bne.n	8001084 <HAL_DSI_MspInit+0x94>

  /* USER CODE END DSI_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_DSI;
 8001012:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001016:	2300      	movs	r3, #0
    PeriphClkInitStruct.DsiClockSelection = RCC_DSICLKSOURCE_PHY;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001018:	a808      	add	r0, sp, #32
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_DSI;
 800101a:	e9cd 2308 	strd	r2, r3, [sp, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800101e:	f00a fbef 	bl	800b800 <HAL_RCCEx_PeriphCLKConfig>
 8001022:	b108      	cbz	r0, 8001028 <HAL_DSI_MspInit+0x38>
    {
      Error_Handler();
 8001024:	f7ff ff8e 	bl	8000f44 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_DSI_CLK_ENABLE();
 8001028:	4b17      	ldr	r3, [pc, #92]	@ (8001088 <HAL_DSI_MspInit+0x98>)
    DSI_D0N     ------> DSIHOST_D0N
    PJ2     ------> DSIHOST_TE
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800102a:	2400      	movs	r4, #0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF13_DSI;
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 800102c:	a903      	add	r1, sp, #12
 800102e:	4817      	ldr	r0, [pc, #92]	@ (800108c <HAL_DSI_MspInit+0x9c>)
    __HAL_RCC_DSI_CLK_ENABLE();
 8001030:	f8d3 20e4 	ldr.w	r2, [r3, #228]	@ 0xe4
 8001034:	f042 0210 	orr.w	r2, r2, #16
 8001038:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4
 800103c:	f8d3 20e4 	ldr.w	r2, [r3, #228]	@ 0xe4
 8001040:	f002 0210 	and.w	r2, r2, #16
 8001044:	9201      	str	r2, [sp, #4]
 8001046:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8001048:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800104c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001050:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001054:	2204      	movs	r2, #4
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8001056:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800105a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800105e:	9302      	str	r3, [sp, #8]
 8001060:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001062:	2302      	movs	r3, #2
 8001064:	e9cd 2303 	strd	r2, r3, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF13_DSI;
 8001068:	230d      	movs	r3, #13
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800106a:	e9cd 4405 	strd	r4, r4, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF13_DSI;
 800106e:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8001070:	f007 fa7a 	bl	8008568 <HAL_GPIO_Init>

    /* DSI interrupt Init */
    HAL_NVIC_SetPriority(DSI_IRQn, 7, 0);
 8001074:	207b      	movs	r0, #123	@ 0x7b
 8001076:	4622      	mov	r2, r4
 8001078:	2107      	movs	r1, #7
 800107a:	f006 fc1f 	bl	80078bc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DSI_IRQn);
 800107e:	207b      	movs	r0, #123	@ 0x7b
 8001080:	f006 fc4e 	bl	8007920 <HAL_NVIC_EnableIRQ>

  /* USER CODE END DSI_MspInit 1 */

  }

}
 8001084:	b03a      	add	sp, #232	@ 0xe8
 8001086:	bd10      	pop	{r4, pc}
 8001088:	58024400 	.word	0x58024400
 800108c:	58022400 	.word	0x58022400

08001090 <HAL_JPEG_MspInit>:
* This function configures the hardware resources used in this example
* @param hjpeg: JPEG handle pointer
* @retval None
*/
void HAL_JPEG_MspInit(JPEG_HandleTypeDef* hjpeg)
{
 8001090:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if(hjpeg->Instance==JPEG)
 8001092:	4b3c      	ldr	r3, [pc, #240]	@ (8001184 <HAL_JPEG_MspInit+0xf4>)
{
 8001094:	4605      	mov	r5, r0
  if(hjpeg->Instance==JPEG)
 8001096:	6802      	ldr	r2, [r0, #0]
 8001098:	429a      	cmp	r2, r3
 800109a:	d170      	bne.n	800117e <HAL_JPEG_MspInit+0xee>
  {
  /* USER CODE BEGIN JPEG_MspInit 0 */

  /* USER CODE END JPEG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_JPEG_CLK_ENABLE();
 800109c:	4b3a      	ldr	r3, [pc, #232]	@ (8001188 <HAL_JPEG_MspInit+0xf8>)
    hmdma_jpeg_infifo_th.Instance = MDMA_Channel7;
    hmdma_jpeg_infifo_th.Init.Request = MDMA_REQUEST_JPEG_INFIFO_TH;
    hmdma_jpeg_infifo_th.Init.TransferTriggerMode = MDMA_BUFFER_TRANSFER;
    hmdma_jpeg_infifo_th.Init.Priority = MDMA_PRIORITY_HIGH;
    hmdma_jpeg_infifo_th.Init.Endianness = MDMA_LITTLE_ENDIANNESS_PRESERVE;
    hmdma_jpeg_infifo_th.Init.SourceInc = MDMA_SRC_INC_BYTE;
 800109e:	2102      	movs	r1, #2
    hmdma_jpeg_infifo_th.Instance = MDMA_Channel7;
 80010a0:	4c3a      	ldr	r4, [pc, #232]	@ (800118c <HAL_JPEG_MspInit+0xfc>)
    hmdma_jpeg_infifo_th.Init.DestinationInc = MDMA_DEST_INC_DISABLE;
    hmdma_jpeg_infifo_th.Init.SourceDataSize = MDMA_SRC_DATASIZE_BYTE;
    hmdma_jpeg_infifo_th.Init.DestDataSize = MDMA_DEST_DATASIZE_WORD;
    hmdma_jpeg_infifo_th.Init.DataAlignment = MDMA_DATAALIGN_PACKENABLE;
    hmdma_jpeg_infifo_th.Init.BufferTransferLength = 32;
 80010a2:	f04f 7e00 	mov.w	lr, #33554432	@ 0x2000000
    __HAL_RCC_JPEG_CLK_ENABLE();
 80010a6:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
    hmdma_jpeg_infifo_th.Init.Request = MDMA_REQUEST_JPEG_INFIFO_TH;
 80010aa:	f8df c0ec 	ldr.w	ip, [pc, #236]	@ 8001198 <HAL_JPEG_MspInit+0x108>
    hmdma_jpeg_infifo_th.Init.SourceBurst = MDMA_SOURCE_BURST_32BEATS;
    hmdma_jpeg_infifo_th.Init.DestBurst = MDMA_DEST_BURST_16BEATS;
    hmdma_jpeg_infifo_th.Init.SourceBlockAddressOffset = 0;
    hmdma_jpeg_infifo_th.Init.DestBlockAddressOffset = 0;
    if (HAL_MDMA_Init(&hmdma_jpeg_infifo_th) != HAL_OK)
 80010ae:	4620      	mov	r0, r4
    __HAL_RCC_JPEG_CLK_ENABLE();
 80010b0:	f042 0220 	orr.w	r2, r2, #32
 80010b4:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
    hmdma_jpeg_infifo_th.Init.Priority = MDMA_PRIORITY_HIGH;
 80010b8:	2280      	movs	r2, #128	@ 0x80
    __HAL_RCC_JPEG_CLK_ENABLE();
 80010ba:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80010be:	f003 0320 	and.w	r3, r3, #32
 80010c2:	9301      	str	r3, [sp, #4]
 80010c4:	9b01      	ldr	r3, [sp, #4]
    hmdma_jpeg_infifo_th.Init.Request = MDMA_REQUEST_JPEG_INFIFO_TH;
 80010c6:	2311      	movs	r3, #17
 80010c8:	e9c4 c300 	strd	ip, r3, [r4]
    hmdma_jpeg_infifo_th.Init.Priority = MDMA_PRIORITY_HIGH;
 80010cc:	2300      	movs	r3, #0
 80010ce:	e9c4 3202 	strd	r3, r2, [r4, #8]
    hmdma_jpeg_infifo_th.Init.DestDataSize = MDMA_DEST_DATASIZE_WORD;
 80010d2:	e9c4 3207 	strd	r3, r2, [r4, #28]
    hmdma_jpeg_infifo_th.Init.BufferTransferLength = 32;
 80010d6:	2220      	movs	r2, #32
    hmdma_jpeg_infifo_th.Init.Endianness = MDMA_LITTLE_ENDIANNESS_PRESERVE;
 80010d8:	6123      	str	r3, [r4, #16]
    hmdma_jpeg_infifo_th.Init.DestinationInc = MDMA_DEST_INC_DISABLE;
 80010da:	e9c4 1305 	strd	r1, r3, [r4, #20]
    hmdma_jpeg_infifo_th.Init.BufferTransferLength = 32;
 80010de:	e9c4 e209 	strd	lr, r2, [r4, #36]	@ 0x24
    hmdma_jpeg_infifo_th.Init.DestBurst = MDMA_DEST_BURST_16BEATS;
 80010e2:	f44f 41a0 	mov.w	r1, #20480	@ 0x5000
 80010e6:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
    hmdma_jpeg_infifo_th.Init.DestBlockAddressOffset = 0;
 80010ea:	e9c4 330d 	strd	r3, r3, [r4, #52]	@ 0x34
    hmdma_jpeg_infifo_th.Init.DestBurst = MDMA_DEST_BURST_16BEATS;
 80010ee:	e9c4 120b 	strd	r1, r2, [r4, #44]	@ 0x2c
    if (HAL_MDMA_Init(&hmdma_jpeg_infifo_th) != HAL_OK)
 80010f2:	f009 f89a 	bl	800a22a <HAL_MDMA_Init>
 80010f6:	b108      	cbz	r0, 80010fc <HAL_JPEG_MspInit+0x6c>
    {
      Error_Handler();
 80010f8:	f7ff ff24 	bl	8000f44 <Error_Handler>
    }

    if (HAL_MDMA_ConfigPostRequestMask(&hmdma_jpeg_infifo_th, 0, 0) != HAL_OK)
 80010fc:	2200      	movs	r2, #0
 80010fe:	4823      	ldr	r0, [pc, #140]	@ (800118c <HAL_JPEG_MspInit+0xfc>)
 8001100:	4611      	mov	r1, r2
 8001102:	f009 f920 	bl	800a346 <HAL_MDMA_ConfigPostRequestMask>
 8001106:	b108      	cbz	r0, 800110c <HAL_JPEG_MspInit+0x7c>
    {
      Error_Handler();
 8001108:	f7ff ff1c 	bl	8000f44 <Error_Handler>
    }

    __HAL_LINKDMA(hjpeg,hdmain,hmdma_jpeg_infifo_th);
 800110c:	632c      	str	r4, [r5, #48]	@ 0x30

    /* JPEG_OUTFIFO_TH Init */
    hmdma_jpeg_outfifo_th.Instance = MDMA_Channel6;
    hmdma_jpeg_outfifo_th.Init.Request = MDMA_REQUEST_JPEG_OUTFIFO_TH;
 800110e:	2313      	movs	r3, #19
 8001110:	4a1f      	ldr	r2, [pc, #124]	@ (8001190 <HAL_JPEG_MspInit+0x100>)
    hmdma_jpeg_outfifo_th.Init.TransferTriggerMode = MDMA_BUFFER_TRANSFER;
    hmdma_jpeg_outfifo_th.Init.Priority = MDMA_PRIORITY_VERY_HIGH;
    hmdma_jpeg_outfifo_th.Init.Endianness = MDMA_LITTLE_ENDIANNESS_PRESERVE;
    hmdma_jpeg_outfifo_th.Init.SourceInc = MDMA_SRC_INC_DISABLE;
    hmdma_jpeg_outfifo_th.Init.DestinationInc = MDMA_DEST_INC_BYTE;
    hmdma_jpeg_outfifo_th.Init.SourceDataSize = MDMA_SRC_DATASIZE_WORD;
 8001112:	2108      	movs	r1, #8
    __HAL_LINKDMA(hjpeg,hdmain,hmdma_jpeg_infifo_th);
 8001114:	6425      	str	r5, [r4, #64]	@ 0x40
    hmdma_jpeg_outfifo_th.Init.DestDataSize = MDMA_DEST_DATASIZE_BYTE;
    hmdma_jpeg_outfifo_th.Init.DataAlignment = MDMA_DATAALIGN_PACKENABLE;
    hmdma_jpeg_outfifo_th.Init.BufferTransferLength = 32;
    hmdma_jpeg_outfifo_th.Init.SourceBurst = MDMA_SOURCE_BURST_32BEATS;
    hmdma_jpeg_outfifo_th.Init.DestBurst = MDMA_DEST_BURST_32BEATS;
 8001116:	f44f 40a0 	mov.w	r0, #20480	@ 0x5000
    hmdma_jpeg_outfifo_th.Instance = MDMA_Channel6;
 800111a:	4c1e      	ldr	r4, [pc, #120]	@ (8001194 <HAL_JPEG_MspInit+0x104>)
    hmdma_jpeg_outfifo_th.Init.Request = MDMA_REQUEST_JPEG_OUTFIFO_TH;
 800111c:	e9c4 2300 	strd	r2, r3, [r4]
    hmdma_jpeg_outfifo_th.Init.Priority = MDMA_PRIORITY_VERY_HIGH;
 8001120:	2300      	movs	r3, #0
 8001122:	22c0      	movs	r2, #192	@ 0xc0
 8001124:	e9c4 3202 	strd	r3, r2, [r4, #8]
    hmdma_jpeg_outfifo_th.Init.SourceDataSize = MDMA_SRC_DATASIZE_WORD;
 8001128:	2220      	movs	r2, #32
    hmdma_jpeg_outfifo_th.Init.DestDataSize = MDMA_DEST_DATASIZE_BYTE;
 800112a:	6223      	str	r3, [r4, #32]
    hmdma_jpeg_outfifo_th.Init.SourceDataSize = MDMA_SRC_DATASIZE_WORD;
 800112c:	e9c4 1206 	strd	r1, r2, [r4, #24]
    hmdma_jpeg_outfifo_th.Init.DataAlignment = MDMA_DATAALIGN_PACKENABLE;
 8001130:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
    hmdma_jpeg_outfifo_th.Init.BufferTransferLength = 32;
 8001134:	e9c4 1209 	strd	r1, r2, [r4, #36]	@ 0x24
    hmdma_jpeg_outfifo_th.Init.DestBurst = MDMA_DEST_BURST_32BEATS;
 8001138:	f44f 3220 	mov.w	r2, #163840	@ 0x28000
 800113c:	e9c4 020b 	strd	r0, r2, [r4, #44]	@ 0x2c
    hmdma_jpeg_outfifo_th.Init.SourceBlockAddressOffset = 0;
    hmdma_jpeg_outfifo_th.Init.DestBlockAddressOffset = 0;
    if (HAL_MDMA_Init(&hmdma_jpeg_outfifo_th) != HAL_OK)
 8001140:	4620      	mov	r0, r4
    hmdma_jpeg_outfifo_th.Init.SourceInc = MDMA_SRC_INC_DISABLE;
 8001142:	e9c4 3304 	strd	r3, r3, [r4, #16]
    hmdma_jpeg_outfifo_th.Init.DestBlockAddressOffset = 0;
 8001146:	e9c4 330d 	strd	r3, r3, [r4, #52]	@ 0x34
    if (HAL_MDMA_Init(&hmdma_jpeg_outfifo_th) != HAL_OK)
 800114a:	f009 f86e 	bl	800a22a <HAL_MDMA_Init>
 800114e:	b108      	cbz	r0, 8001154 <HAL_JPEG_MspInit+0xc4>
    {
      Error_Handler();
 8001150:	f7ff fef8 	bl	8000f44 <Error_Handler>
    }

    if (HAL_MDMA_ConfigPostRequestMask(&hmdma_jpeg_outfifo_th, 0, 0) != HAL_OK)
 8001154:	2200      	movs	r2, #0
 8001156:	480f      	ldr	r0, [pc, #60]	@ (8001194 <HAL_JPEG_MspInit+0x104>)
 8001158:	4611      	mov	r1, r2
 800115a:	f009 f8f4 	bl	800a346 <HAL_MDMA_ConfigPostRequestMask>
 800115e:	b108      	cbz	r0, 8001164 <HAL_JPEG_MspInit+0xd4>
    {
      Error_Handler();
 8001160:	f7ff fef0 	bl	8000f44 <Error_Handler>
    }

    __HAL_LINKDMA(hjpeg,hdmaout,hmdma_jpeg_outfifo_th);
 8001164:	636c      	str	r4, [r5, #52]	@ 0x34

    /* JPEG interrupt Init */
    HAL_NVIC_SetPriority(JPEG_IRQn, 5, 0);
 8001166:	2200      	movs	r2, #0
 8001168:	2105      	movs	r1, #5
 800116a:	2079      	movs	r0, #121	@ 0x79
    __HAL_LINKDMA(hjpeg,hdmaout,hmdma_jpeg_outfifo_th);
 800116c:	6425      	str	r5, [r4, #64]	@ 0x40
    HAL_NVIC_SetPriority(JPEG_IRQn, 5, 0);
 800116e:	f006 fba5 	bl	80078bc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(JPEG_IRQn);
 8001172:	2079      	movs	r0, #121	@ 0x79

  /* USER CODE END JPEG_MspInit 1 */

  }

}
 8001174:	b003      	add	sp, #12
 8001176:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    HAL_NVIC_EnableIRQ(JPEG_IRQn);
 800117a:	f006 bbd1 	b.w	8007920 <HAL_NVIC_EnableIRQ>
}
 800117e:	b003      	add	sp, #12
 8001180:	bd30      	pop	{r4, r5, pc}
 8001182:	bf00      	nop
 8001184:	52003000 	.word	0x52003000
 8001188:	58024400 	.word	0x58024400
 800118c:	24000528 	.word	0x24000528
 8001190:	520001c0 	.word	0x520001c0
 8001194:	240004bc 	.word	0x240004bc
 8001198:	52000200 	.word	0x52000200

0800119c <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 800119c:	b510      	push	{r4, lr}
 800119e:	b0b4      	sub	sp, #208	@ 0xd0
 80011a0:	4604      	mov	r4, r0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80011a2:	22c8      	movs	r2, #200	@ 0xc8
 80011a4:	2100      	movs	r1, #0
 80011a6:	a802      	add	r0, sp, #8
 80011a8:	f026 fb06 	bl	80277b8 <memset>
  if(hltdc->Instance==LTDC)
 80011ac:	6822      	ldr	r2, [r4, #0]
 80011ae:	4b18      	ldr	r3, [pc, #96]	@ (8001210 <HAL_LTDC_MspInit+0x74>)
 80011b0:	429a      	cmp	r2, r3
 80011b2:	d12b      	bne.n	800120c <HAL_LTDC_MspInit+0x70>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80011b4:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 80011b8:	2300      	movs	r3, #0
    PeriphClkInitStruct.PLL3.PLL3M = 5;
    PeriphClkInitStruct.PLL3.PLL3N = 161;
    PeriphClkInitStruct.PLL3.PLL3P = 2;
    PeriphClkInitStruct.PLL3.PLL3Q = 2;
    PeriphClkInitStruct.PLL3.PLL3R = 21;
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_2;
 80011ba:	2115      	movs	r1, #21
    PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
    PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80011bc:	a802      	add	r0, sp, #8
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80011be:	e9cd 2302 	strd	r2, r3, [sp, #8]
    PeriphClkInitStruct.PLL3.PLL3N = 161;
 80011c2:	23a1      	movs	r3, #161	@ 0xa1
 80011c4:	2205      	movs	r2, #5
 80011c6:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 80011ca:	2302      	movs	r3, #2
    PeriphClkInitStruct.PLL3.PLL3Q = 2;
 80011cc:	e9cd 330e 	strd	r3, r3, [sp, #56]	@ 0x38
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_2;
 80011d0:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80011d4:	e9cd 1310 	strd	r1, r3, [sp, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80011d8:	f00a fb12 	bl	800b800 <HAL_RCCEx_PeriphCLKConfig>
 80011dc:	b108      	cbz	r0, 80011e2 <HAL_LTDC_MspInit+0x46>
    {
      Error_Handler();
 80011de:	f7ff feb1 	bl	8000f44 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 80011e2:	4b0c      	ldr	r3, [pc, #48]	@ (8001214 <HAL_LTDC_MspInit+0x78>)
    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 7, 0);
 80011e4:	2058      	movs	r0, #88	@ 0x58
 80011e6:	2107      	movs	r1, #7
    __HAL_RCC_LTDC_CLK_ENABLE();
 80011e8:	f8d3 20e4 	ldr.w	r2, [r3, #228]	@ 0xe4
 80011ec:	f042 0208 	orr.w	r2, r2, #8
 80011f0:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4
    HAL_NVIC_SetPriority(LTDC_IRQn, 7, 0);
 80011f4:	2200      	movs	r2, #0
    __HAL_RCC_LTDC_CLK_ENABLE();
 80011f6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80011fa:	f003 0308 	and.w	r3, r3, #8
 80011fe:	9301      	str	r3, [sp, #4]
 8001200:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(LTDC_IRQn, 7, 0);
 8001202:	f006 fb5b 	bl	80078bc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8001206:	2058      	movs	r0, #88	@ 0x58
 8001208:	f006 fb8a 	bl	8007920 <HAL_NVIC_EnableIRQ>

  /* USER CODE END LTDC_MspInit 1 */

  }

}
 800120c:	b034      	add	sp, #208	@ 0xd0
 800120e:	bd10      	pop	{r4, pc}
 8001210:	50001000 	.word	0x50001000
 8001214:	58024400 	.word	0x58024400

08001218 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8001218:	b5f0      	push	{r4, r5, r6, r7, lr}
 800121a:	b0bf      	sub	sp, #252	@ 0xfc
 800121c:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800121e:	2214      	movs	r2, #20
 8001220:	2100      	movs	r1, #0
 8001222:	a807      	add	r0, sp, #28
 8001224:	f026 fac8 	bl	80277b8 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001228:	22c8      	movs	r2, #200	@ 0xc8
 800122a:	2100      	movs	r1, #0
 800122c:	a80c      	add	r0, sp, #48	@ 0x30
 800122e:	f026 fac3 	bl	80277b8 <memset>
  if(hqspi->Instance==QUADSPI)
 8001232:	6822      	ldr	r2, [r4, #0]
 8001234:	4b53      	ldr	r3, [pc, #332]	@ (8001384 <HAL_QSPI_MspInit+0x16c>)
 8001236:	429a      	cmp	r2, r3
 8001238:	f040 80a1 	bne.w	800137e <HAL_QSPI_MspInit+0x166>

  /* USER CODE END QUADSPI_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_QSPI;
 800123c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001240:	2300      	movs	r3, #0
    PeriphClkInitStruct.QspiClockSelection = RCC_QSPICLKSOURCE_D1HCLK;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001242:	a80c      	add	r0, sp, #48	@ 0x30
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_QSPI;
 8001244:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001248:	f00a fada 	bl	800b800 <HAL_RCCEx_PeriphCLKConfig>
 800124c:	b108      	cbz	r0, 8001252 <HAL_QSPI_MspInit+0x3a>
    {
      Error_Handler();
 800124e:	f7ff fe79 	bl	8000f44 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8001252:	4b4d      	ldr	r3, [pc, #308]	@ (8001388 <HAL_QSPI_MspInit+0x170>)
    PH3     ------> QUADSPI_BK2_IO1
    PB2     ------> QUADSPI_CLK
    PD11     ------> QUADSPI_BK1_IO0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_14;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001254:	2502      	movs	r5, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001256:	2400      	movs	r4, #0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001258:	2609      	movs	r6, #9
    __HAL_RCC_QSPI_CLK_ENABLE();
 800125a:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800125e:	a907      	add	r1, sp, #28
 8001260:	484a      	ldr	r0, [pc, #296]	@ (800138c <HAL_QSPI_MspInit+0x174>)

    GPIO_InitStruct.Pin = GPIO_PIN_6;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001262:	270a      	movs	r7, #10
    __HAL_RCC_QSPI_CLK_ENABLE();
 8001264:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001268:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
 800126c:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 8001270:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 8001274:	9201      	str	r2, [sp, #4]
 8001276:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001278:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800127c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001280:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8001284:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8001288:	f002 0240 	and.w	r2, r2, #64	@ 0x40
 800128c:	9202      	str	r2, [sp, #8]
 800128e:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001290:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8001294:	f042 0220 	orr.w	r2, r2, #32
 8001298:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 800129c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80012a0:	f002 0220 	and.w	r2, r2, #32
 80012a4:	9203      	str	r2, [sp, #12]
 80012a6:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 80012a8:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80012ac:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80012b0:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 80012b4:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80012b8:	f002 0280 	and.w	r2, r2, #128	@ 0x80
 80012bc:	9204      	str	r2, [sp, #16]
 80012be:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012c0:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80012c4:	f042 0202 	orr.w	r2, r2, #2
 80012c8:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 80012cc:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80012d0:	f002 0202 	and.w	r2, r2, #2
 80012d4:	9205      	str	r2, [sp, #20]
 80012d6:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80012d8:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80012dc:	f042 0208 	orr.w	r2, r2, #8
 80012e0:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 80012e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012e8:	f003 0308 	and.w	r3, r3, #8
 80012ec:	9306      	str	r3, [sp, #24]
 80012ee:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012f0:	f44f 4384 	mov.w	r3, #16896	@ 0x4200
 80012f4:	e9cd 3507 	strd	r3, r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012f8:	e9cd 4409 	strd	r4, r4, [sp, #36]	@ 0x24
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80012fc:	960b      	str	r6, [sp, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80012fe:	f007 f933 	bl	8008568 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001302:	2340      	movs	r3, #64	@ 0x40
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001304:	a907      	add	r1, sp, #28
 8001306:	4821      	ldr	r0, [pc, #132]	@ (800138c <HAL_QSPI_MspInit+0x174>)
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001308:	970b      	str	r7, [sp, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800130a:	e9cd 3507 	strd	r3, r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800130e:	e9cd 4409 	strd	r4, r4, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001312:	f007 f929 	bl	8008568 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001316:	23c0      	movs	r3, #192	@ 0xc0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001318:	a907      	add	r1, sp, #28
 800131a:	481d      	ldr	r0, [pc, #116]	@ (8001390 <HAL_QSPI_MspInit+0x178>)
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800131c:	960b      	str	r6, [sp, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800131e:	e9cd 3507 	strd	r3, r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001322:	e9cd 4409 	strd	r4, r4, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001326:	f007 f91f 	bl	8008568 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800132a:	f44f 7300 	mov.w	r3, #512	@ 0x200
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800132e:	a907      	add	r1, sp, #28
 8001330:	4817      	ldr	r0, [pc, #92]	@ (8001390 <HAL_QSPI_MspInit+0x178>)
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001332:	970b      	str	r7, [sp, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001334:	e9cd 3507 	strd	r3, r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001338:	e9cd 4409 	strd	r4, r4, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800133c:	f007 f914 	bl	8008568 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001340:	230c      	movs	r3, #12
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001342:	a907      	add	r1, sp, #28
 8001344:	4813      	ldr	r0, [pc, #76]	@ (8001394 <HAL_QSPI_MspInit+0x17c>)
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001346:	960b      	str	r6, [sp, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001348:	e9cd 3507 	strd	r3, r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800134c:	e9cd 4409 	strd	r4, r4, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001350:	f007 f90a 	bl	8008568 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001354:	2304      	movs	r3, #4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001356:	a907      	add	r1, sp, #28
 8001358:	480f      	ldr	r0, [pc, #60]	@ (8001398 <HAL_QSPI_MspInit+0x180>)
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800135a:	960b      	str	r6, [sp, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800135c:	e9cd 3507 	strd	r3, r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001360:	e9cd 4409 	strd	r4, r4, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001364:	f007 f900 	bl	8008568 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001368:	f44f 6300 	mov.w	r3, #2048	@ 0x800
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800136c:	a907      	add	r1, sp, #28
 800136e:	480b      	ldr	r0, [pc, #44]	@ (800139c <HAL_QSPI_MspInit+0x184>)
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001370:	960b      	str	r6, [sp, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001372:	e9cd 3507 	strd	r3, r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001376:	e9cd 4409 	strd	r4, r4, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800137a:	f007 f8f5 	bl	8008568 <HAL_GPIO_Init>

  /* USER CODE END QUADSPI_MspInit 1 */

  }

}
 800137e:	b03f      	add	sp, #252	@ 0xfc
 8001380:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001382:	bf00      	nop
 8001384:	52005000 	.word	0x52005000
 8001388:	58024400 	.word	0x58024400
 800138c:	58021800 	.word	0x58021800
 8001390:	58021400 	.word	0x58021400
 8001394:	58021c00 	.word	0x58021c00
 8001398:	58020400 	.word	0x58020400
 800139c:	58020c00 	.word	0x58020c00

080013a0 <HAL_SDRAM_MspInit>:
  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 80013a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80013a2:	b0b9      	sub	sp, #228	@ 0xe4
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 80013a4:	2100      	movs	r1, #0
 80013a6:	2214      	movs	r2, #20
 80013a8:	a801      	add	r0, sp, #4
 80013aa:	f026 fa05 	bl	80277b8 <memset>
  if (FMC_Initialized) {
 80013ae:	4b3f      	ldr	r3, [pc, #252]	@ (80014ac <HAL_SDRAM_MspInit+0x10c>)
 80013b0:	6819      	ldr	r1, [r3, #0]
 80013b2:	2900      	cmp	r1, #0
 80013b4:	d177      	bne.n	80014a6 <HAL_SDRAM_MspInit+0x106>
  FMC_Initialized = 1;
 80013b6:	2201      	movs	r2, #1
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80013b8:	a808      	add	r0, sp, #32
  FMC_Initialized = 1;
 80013ba:	601a      	str	r2, [r3, #0]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80013bc:	22c0      	movs	r2, #192	@ 0xc0
 80013be:	f026 f9fb 	bl	80277b8 <memset>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FMC;
 80013c2:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80013c6:	2300      	movs	r3, #0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80013c8:	a806      	add	r0, sp, #24
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FMC;
 80013ca:	e9cd 2306 	strd	r2, r3, [sp, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80013ce:	f00a fa17 	bl	800b800 <HAL_RCCEx_PeriphCLKConfig>
 80013d2:	b108      	cbz	r0, 80013d8 <HAL_SDRAM_MspInit+0x38>
      Error_Handler();
 80013d4:	f7ff fdb6 	bl	8000f44 <Error_Handler>
  __HAL_RCC_FMC_CLK_ENABLE();
 80013d8:	4b35      	ldr	r3, [pc, #212]	@ (80014b0 <HAL_SDRAM_MspInit+0x110>)
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013da:	2702      	movs	r7, #2
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013dc:	2600      	movs	r6, #0
 80013de:	2503      	movs	r5, #3
  __HAL_RCC_FMC_CLK_ENABLE();
 80013e0:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80013e4:	240c      	movs	r4, #12
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80013e6:	a901      	add	r1, sp, #4
 80013e8:	4832      	ldr	r0, [pc, #200]	@ (80014b4 <HAL_SDRAM_MspInit+0x114>)
  __HAL_RCC_FMC_CLK_ENABLE();
 80013ea:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80013ee:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
 80013f2:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80013f6:	9405      	str	r4, [sp, #20]
  __HAL_RCC_FMC_CLK_ENABLE();
 80013f8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80013fc:	9300      	str	r3, [sp, #0]
 80013fe:	9b00      	ldr	r3, [sp, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001400:	f240 63ff 	movw	r3, #1791	@ 0x6ff
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001404:	e9cd 6503 	strd	r6, r5, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001408:	e9cd 3701 	strd	r3, r7, [sp, #4]
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800140c:	f007 f8ac 	bl	8008568 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8001410:	2360      	movs	r3, #96	@ 0x60
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001412:	a901      	add	r1, sp, #4
 8001414:	4828      	ldr	r0, [pc, #160]	@ (80014b8 <HAL_SDRAM_MspInit+0x118>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001416:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001418:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800141c:	e9cd 6503 	strd	r6, r5, [sp, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001420:	f007 f8a2 	bl	8008568 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_10|GPIO_PIN_9
 8001424:	f64f 7383 	movw	r3, #65411	@ 0xff83
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001428:	a901      	add	r1, sp, #4
 800142a:	4824      	ldr	r0, [pc, #144]	@ (80014bc <HAL_SDRAM_MspInit+0x11c>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800142c:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800142e:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001432:	e9cd 6503 	strd	r6, r5, [sp, #12]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001436:	f007 f897 	bl	8008568 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_14|GPIO_PIN_13|GPIO_PIN_10
 800143a:	f44f 437f 	mov.w	r3, #65280	@ 0xff00
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800143e:	a901      	add	r1, sp, #4
 8001440:	481f      	ldr	r0, [pc, #124]	@ (80014c0 <HAL_SDRAM_MspInit+0x120>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001442:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001444:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001448:	e9cd 6503 	strd	r6, r5, [sp, #12]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800144c:	f007 f88c 	bl	8008568 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_5|GPIO_PIN_4
 8001450:	f248 1333 	movw	r3, #33075	@ 0x8133
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001454:	a901      	add	r1, sp, #4
 8001456:	481b      	ldr	r0, [pc, #108]	@ (80014c4 <HAL_SDRAM_MspInit+0x124>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001458:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800145a:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800145e:	e9cd 6503 	strd	r6, r5, [sp, #12]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001462:	f007 f881 	bl	8008568 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15|GPIO_PIN_14
 8001466:	f24c 7303 	movw	r3, #50947	@ 0xc703
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800146a:	a901      	add	r1, sp, #4
 800146c:	4816      	ldr	r0, [pc, #88]	@ (80014c8 <HAL_SDRAM_MspInit+0x128>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800146e:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001470:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001474:	e9cd 6503 	strd	r6, r5, [sp, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001478:	f007 f876 	bl	8008568 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_3
 800147c:	f64f 033f 	movw	r3, #63551	@ 0xf83f
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001480:	a901      	add	r1, sp, #4
 8001482:	4812      	ldr	r0, [pc, #72]	@ (80014cc <HAL_SDRAM_MspInit+0x12c>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001484:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001486:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800148a:	e9cd 6503 	strd	r6, r5, [sp, #12]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800148e:	f007 f86b 	bl	8008568 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001492:	2301      	movs	r3, #1
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001494:	a901      	add	r1, sp, #4
 8001496:	480e      	ldr	r0, [pc, #56]	@ (80014d0 <HAL_SDRAM_MspInit+0x130>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001498:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800149a:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800149e:	e9cd 6503 	strd	r6, r5, [sp, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014a2:	f007 f861 	bl	8008568 <HAL_GPIO_Init>
  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 80014a6:	b039      	add	sp, #228	@ 0xe4
 80014a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80014aa:	bf00      	nop
 80014ac:	24000698 	.word	0x24000698
 80014b0:	58024400 	.word	0x58024400
 80014b4:	58022000 	.word	0x58022000
 80014b8:	58020400 	.word	0x58020400
 80014bc:	58021000 	.word	0x58021000
 80014c0:	58021c00 	.word	0x58021c00
 80014c4:	58021800 	.word	0x58021800
 80014c8:	58020c00 	.word	0x58020c00
 80014cc:	58021400 	.word	0x58021400
 80014d0:	58020800 	.word	0x58020800

080014d4 <HAL_SDRAM_MspDeInit>:

static void HAL_FMC_MspDeInit(void){
  /* USER CODE BEGIN FMC_MspDeInit 0 */

  /* USER CODE END FMC_MspDeInit 0 */
  if (FMC_DeInitialized) {
 80014d4:	4b1a      	ldr	r3, [pc, #104]	@ (8001540 <HAL_SDRAM_MspDeInit+0x6c>)
 80014d6:	681a      	ldr	r2, [r3, #0]
  /* USER CODE BEGIN FMC_MspDeInit 1 */

  /* USER CODE END FMC_MspDeInit 1 */
}

void HAL_SDRAM_MspDeInit(SDRAM_HandleTypeDef* hsdram){
 80014d8:	b510      	push	{r4, lr}
  if (FMC_DeInitialized) {
 80014da:	bb82      	cbnz	r2, 800153e <HAL_SDRAM_MspDeInit+0x6a>
  __HAL_RCC_FMC_CLK_DISABLE();
 80014dc:	4a19      	ldr	r2, [pc, #100]	@ (8001544 <HAL_SDRAM_MspDeInit+0x70>)
  FMC_DeInitialized = 1;
 80014de:	2401      	movs	r4, #1
  HAL_GPIO_DeInit(GPIOI, GPIO_PIN_6|GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_1
 80014e0:	f240 61ff 	movw	r1, #1791	@ 0x6ff
 80014e4:	4818      	ldr	r0, [pc, #96]	@ (8001548 <HAL_SDRAM_MspDeInit+0x74>)
  FMC_DeInitialized = 1;
 80014e6:	601c      	str	r4, [r3, #0]
  __HAL_RCC_FMC_CLK_DISABLE();
 80014e8:	f8d2 30d4 	ldr.w	r3, [r2, #212]	@ 0xd4
 80014ec:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80014f0:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
  HAL_GPIO_DeInit(GPIOI, GPIO_PIN_6|GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_1
 80014f4:	f007 f920 	bl	8008738 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(GPIOB, GPIO_PIN_5|GPIO_PIN_6);
 80014f8:	2160      	movs	r1, #96	@ 0x60
 80014fa:	4814      	ldr	r0, [pc, #80]	@ (800154c <HAL_SDRAM_MspDeInit+0x78>)
 80014fc:	f007 f91c 	bl	8008738 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(GPIOE, GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_10|GPIO_PIN_9
 8001500:	f64f 7183 	movw	r1, #65411	@ 0xff83
 8001504:	4812      	ldr	r0, [pc, #72]	@ (8001550 <HAL_SDRAM_MspDeInit+0x7c>)
 8001506:	f007 f917 	bl	8008738 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(GPIOH, GPIO_PIN_15|GPIO_PIN_14|GPIO_PIN_13|GPIO_PIN_10
 800150a:	f44f 417f 	mov.w	r1, #65280	@ 0xff00
 800150e:	4811      	ldr	r0, [pc, #68]	@ (8001554 <HAL_SDRAM_MspDeInit+0x80>)
 8001510:	f007 f912 	bl	8008738 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(GPIOG, GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_5|GPIO_PIN_4
 8001514:	f248 1133 	movw	r1, #33075	@ 0x8133
 8001518:	480f      	ldr	r0, [pc, #60]	@ (8001558 <HAL_SDRAM_MspDeInit+0x84>)
 800151a:	f007 f90d 	bl	8008738 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(GPIOD, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15|GPIO_PIN_14
 800151e:	f24c 7103 	movw	r1, #50947	@ 0xc703
 8001522:	480e      	ldr	r0, [pc, #56]	@ (800155c <HAL_SDRAM_MspDeInit+0x88>)
 8001524:	f007 f908 	bl	8008738 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(GPIOF, GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_3
 8001528:	f64f 013f 	movw	r1, #63551	@ 0xf83f
 800152c:	480c      	ldr	r0, [pc, #48]	@ (8001560 <HAL_SDRAM_MspDeInit+0x8c>)
 800152e:	f007 f903 	bl	8008738 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(GPIOC, GPIO_PIN_0);
 8001532:	4621      	mov	r1, r4
 8001534:	480b      	ldr	r0, [pc, #44]	@ (8001564 <HAL_SDRAM_MspDeInit+0x90>)
  /* USER CODE END SDRAM_MspDeInit 0 */
  HAL_FMC_MspDeInit();
  /* USER CODE BEGIN SDRAM_MspDeInit 1 */

  /* USER CODE END SDRAM_MspDeInit 1 */
}
 8001536:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  HAL_GPIO_DeInit(GPIOC, GPIO_PIN_0);
 800153a:	f007 b8fd 	b.w	8008738 <HAL_GPIO_DeInit>
}
 800153e:	bd10      	pop	{r4, pc}
 8001540:	24000694 	.word	0x24000694
 8001544:	58024400 	.word	0x58024400
 8001548:	58022000 	.word	0x58022000
 800154c:	58020400 	.word	0x58020400
 8001550:	58021000 	.word	0x58021000
 8001554:	58021c00 	.word	0x58021c00
 8001558:	58021800 	.word	0x58021800
 800155c:	58020c00 	.word	0x58020c00
 8001560:	58021400 	.word	0x58021400
 8001564:	58020800 	.word	0x58020800

08001568 <HAL_InitTick>:
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001568:	280f      	cmp	r0, #15
{
 800156a:	b510      	push	{r4, lr}
 800156c:	4604      	mov	r4, r0
 800156e:	b08a      	sub	sp, #40	@ 0x28
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001570:	d902      	bls.n	8001578 <HAL_InitTick+0x10>
     HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
     uwTickPrio = TickPriority;
    }
  else
  {
    return HAL_ERROR;
 8001572:	2001      	movs	r0, #1
    return HAL_TIM_Base_Start_IT(&htim6);
  }

  /* Return function status */
  return HAL_ERROR;
}
 8001574:	b00a      	add	sp, #40	@ 0x28
 8001576:	bd10      	pop	{r4, pc}
     HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8001578:	4601      	mov	r1, r0
 800157a:	2200      	movs	r2, #0
 800157c:	2036      	movs	r0, #54	@ 0x36
 800157e:	f006 f99d 	bl	80078bc <HAL_NVIC_SetPriority>
     HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001582:	2036      	movs	r0, #54	@ 0x36
 8001584:	f006 f9cc 	bl	8007920 <HAL_NVIC_EnableIRQ>
     uwTickPrio = TickPriority;
 8001588:	4b18      	ldr	r3, [pc, #96]	@ (80015ec <HAL_InitTick+0x84>)
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800158a:	4669      	mov	r1, sp
 800158c:	a802      	add	r0, sp, #8
     uwTickPrio = TickPriority;
 800158e:	601c      	str	r4, [r3, #0]
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001590:	4b17      	ldr	r3, [pc, #92]	@ (80015f0 <HAL_InitTick+0x88>)
 8001592:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
 8001596:	f042 0210 	orr.w	r2, r2, #16
 800159a:	f8c3 20e8 	str.w	r2, [r3, #232]	@ 0xe8
 800159e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80015a2:	f003 0310 	and.w	r3, r3, #16
 80015a6:	9301      	str	r3, [sp, #4]
 80015a8:	9b01      	ldr	r3, [sp, #4]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80015aa:	f00a f80f 	bl	800b5cc <HAL_RCC_GetClockConfig>
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80015ae:	9b07      	ldr	r3, [sp, #28]
 80015b0:	b9c3      	cbnz	r3, 80015e4 <HAL_InitTick+0x7c>
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80015b2:	f009 ffe7 	bl	800b584 <HAL_RCC_GetPCLK1Freq>
  htim6.Instance = TIM6;
 80015b6:	4c0f      	ldr	r4, [pc, #60]	@ (80015f4 <HAL_InitTick+0x8c>)
 80015b8:	4b0f      	ldr	r3, [pc, #60]	@ (80015f8 <HAL_InitTick+0x90>)
 80015ba:	6023      	str	r3, [r4, #0]
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80015bc:	f240 33e7 	movw	r3, #999	@ 0x3e7
 80015c0:	60e3      	str	r3, [r4, #12]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80015c2:	4b0e      	ldr	r3, [pc, #56]	@ (80015fc <HAL_InitTick+0x94>)
 80015c4:	fbb0 f0f3 	udiv	r0, r0, r3
 80015c8:	3801      	subs	r0, #1
  htim6.Init.ClockDivision = 0;
 80015ca:	2300      	movs	r3, #0
  htim6.Init.Prescaler = uwPrescalerValue;
 80015cc:	6060      	str	r0, [r4, #4]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80015ce:	4620      	mov	r0, r4
  htim6.Init.ClockDivision = 0;
 80015d0:	6123      	str	r3, [r4, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015d2:	60a3      	str	r3, [r4, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80015d4:	f00b f818 	bl	800c608 <HAL_TIM_Base_Init>
 80015d8:	2800      	cmp	r0, #0
 80015da:	d1ca      	bne.n	8001572 <HAL_InitTick+0xa>
    return HAL_TIM_Base_Start_IT(&htim6);
 80015dc:	4620      	mov	r0, r4
 80015de:	f00a fec5 	bl	800c36c <HAL_TIM_Base_Start_IT>
 80015e2:	e7c7      	b.n	8001574 <HAL_InitTick+0xc>
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80015e4:	f009 ffce 	bl	800b584 <HAL_RCC_GetPCLK1Freq>
 80015e8:	0040      	lsls	r0, r0, #1
 80015ea:	e7e4      	b.n	80015b6 <HAL_InitTick+0x4e>
 80015ec:	24000074 	.word	0x24000074
 80015f0:	58024400 	.word	0x58024400
 80015f4:	2400069c 	.word	0x2400069c
 80015f8:	40001000 	.word	0x40001000
 80015fc:	000f4240 	.word	0x000f4240

08001600 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001600:	e7fe      	b.n	8001600 <NMI_Handler>

08001602 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001602:	e7fe      	b.n	8001602 <HardFault_Handler>

08001604 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001604:	e7fe      	b.n	8001604 <MemManage_Handler>

08001606 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001606:	e7fe      	b.n	8001606 <BusFault_Handler>

08001608 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001608:	e7fe      	b.n	8001608 <UsageFault_Handler>

0800160a <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800160a:	4770      	bx	lr

0800160c <TIM6_DAC_IRQHandler>:
void TIM6_DAC_IRQHandler(void)
{
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800160c:	4801      	ldr	r0, [pc, #4]	@ (8001614 <TIM6_DAC_IRQHandler+0x8>)
 800160e:	f00a beef 	b.w	800c3f0 <HAL_TIM_IRQHandler>
 8001612:	bf00      	nop
 8001614:	2400069c 	.word	0x2400069c

08001618 <LTDC_IRQHandler>:
void LTDC_IRQHandler(void)
{
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8001618:	4801      	ldr	r0, [pc, #4]	@ (8001620 <LTDC_IRQHandler+0x8>)
 800161a:	f008 bd10 	b.w	800a03e <HAL_LTDC_IRQHandler>
 800161e:	bf00      	nop
 8001620:	24000414 	.word	0x24000414

08001624 <DMA2D_IRQHandler>:
void DMA2D_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8001624:	4801      	ldr	r0, [pc, #4]	@ (800162c <DMA2D_IRQHandler+0x8>)
 8001626:	f006 ba85 	b.w	8007b34 <HAL_DMA2D_IRQHandler>
 800162a:	bf00      	nop
 800162c:	24000608 	.word	0x24000608

08001630 <JPEG_IRQHandler>:
void JPEG_IRQHandler(void)
{
  /* USER CODE BEGIN JPEG_IRQn 0 */

  /* USER CODE END JPEG_IRQn 0 */
  HAL_JPEG_IRQHandler(&hjpeg);
 8001630:	4801      	ldr	r0, [pc, #4]	@ (8001638 <JPEG_IRQHandler+0x8>)
 8001632:	f008 bbb5 	b.w	8009da0 <HAL_JPEG_IRQHandler>
 8001636:	bf00      	nop
 8001638:	24000594 	.word	0x24000594

0800163c <MDMA_IRQHandler>:
void MDMA_IRQHandler(void)
{
  /* USER CODE BEGIN MDMA_IRQn 0 */

  /* USER CODE END MDMA_IRQn 0 */
  HAL_MDMA_IRQHandler(&hmdma_jpeg_outfifo_th);
 800163c:	4804      	ldr	r0, [pc, #16]	@ (8001650 <MDMA_IRQHandler+0x14>)
{
 800163e:	b508      	push	{r3, lr}
  HAL_MDMA_IRQHandler(&hmdma_jpeg_outfifo_th);
 8001640:	f008 ff06 	bl	800a450 <HAL_MDMA_IRQHandler>
  HAL_MDMA_IRQHandler(&hmdma_jpeg_infifo_th);
 8001644:	4803      	ldr	r0, [pc, #12]	@ (8001654 <MDMA_IRQHandler+0x18>)
  /* USER CODE BEGIN MDMA_IRQn 1 */

  /* USER CODE END MDMA_IRQn 1 */
}
 8001646:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_MDMA_IRQHandler(&hmdma_jpeg_infifo_th);
 800164a:	f008 bf01 	b.w	800a450 <HAL_MDMA_IRQHandler>
 800164e:	bf00      	nop
 8001650:	240004bc 	.word	0x240004bc
 8001654:	24000528 	.word	0x24000528

08001658 <DSI_IRQHandler>:
void DSI_IRQHandler(void)
{
  /* USER CODE BEGIN DSI_IRQn 0 */

  /* USER CODE END DSI_IRQn 0 */
  HAL_DSI_IRQHandler(&hdsi);
 8001658:	4801      	ldr	r0, [pc, #4]	@ (8001660 <DSI_IRQHandler+0x8>)
 800165a:	f006 bc6e 	b.w	8007f3a <HAL_DSI_IRQHandler>
 800165e:	bf00      	nop
 8001660:	240005ec 	.word	0x240005ec

08001664 <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 8001664:	2001      	movs	r0, #1
 8001666:	4770      	bx	lr

08001668 <_kill>:

int _kill(int pid, int sig)
{
 8001668:	b508      	push	{r3, lr}
	errno = EINVAL;
 800166a:	f026 f959 	bl	8027920 <__errno>
 800166e:	2316      	movs	r3, #22
 8001670:	6003      	str	r3, [r0, #0]
	return -1;
}
 8001672:	f04f 30ff 	mov.w	r0, #4294967295
 8001676:	bd08      	pop	{r3, pc}

08001678 <_exit>:

void _exit (int status)
{
 8001678:	b508      	push	{r3, lr}
	errno = EINVAL;
 800167a:	f026 f951 	bl	8027920 <__errno>
 800167e:	2316      	movs	r3, #22
 8001680:	6003      	str	r3, [r0, #0]
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
 8001682:	e7fe      	b.n	8001682 <_exit+0xa>

08001684 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001684:	b570      	push	{r4, r5, r6, lr}
 8001686:	460d      	mov	r5, r1
 8001688:	4614      	mov	r4, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800168a:	460e      	mov	r6, r1
 800168c:	1b73      	subs	r3, r6, r5
 800168e:	429c      	cmp	r4, r3
 8001690:	dc01      	bgt.n	8001696 <_read+0x12>
	{
		*ptr++ = __io_getchar();
	}

return len;
}
 8001692:	4620      	mov	r0, r4
 8001694:	bd70      	pop	{r4, r5, r6, pc}
		*ptr++ = __io_getchar();
 8001696:	f3af 8000 	nop.w
 800169a:	f806 0b01 	strb.w	r0, [r6], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800169e:	e7f5      	b.n	800168c <_read+0x8>

080016a0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80016a0:	b570      	push	{r4, r5, r6, lr}
 80016a2:	460d      	mov	r5, r1
 80016a4:	4614      	mov	r4, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016a6:	460e      	mov	r6, r1
 80016a8:	1b73      	subs	r3, r6, r5
 80016aa:	429c      	cmp	r4, r3
 80016ac:	dc01      	bgt.n	80016b2 <_write+0x12>
	{
		__io_putchar(*ptr++);
	}
	return len;
}
 80016ae:	4620      	mov	r0, r4
 80016b0:	bd70      	pop	{r4, r5, r6, pc}
		__io_putchar(*ptr++);
 80016b2:	f816 0b01 	ldrb.w	r0, [r6], #1
 80016b6:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016ba:	e7f5      	b.n	80016a8 <_write+0x8>

080016bc <_close>:

int _close(int file)
{
	return -1;
}
 80016bc:	f04f 30ff 	mov.w	r0, #4294967295
 80016c0:	4770      	bx	lr

080016c2 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 80016c2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
	return 0;
}
 80016c6:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
 80016c8:	604b      	str	r3, [r1, #4]
}
 80016ca:	4770      	bx	lr

080016cc <_isatty>:

int _isatty(int file)
{
	return 1;
}
 80016cc:	2001      	movs	r0, #1
 80016ce:	4770      	bx	lr

080016d0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 80016d0:	2000      	movs	r0, #0
 80016d2:	4770      	bx	lr

080016d4 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80016d4:	4a0b      	ldr	r2, [pc, #44]	@ (8001704 <_sbrk+0x30>)
{
 80016d6:	4603      	mov	r3, r0
  if (NULL == __sbrk_heap_end)
 80016d8:	6811      	ldr	r1, [r2, #0]
{
 80016da:	b510      	push	{r4, lr}
  if (NULL == __sbrk_heap_end)
 80016dc:	b909      	cbnz	r1, 80016e2 <_sbrk+0xe>
  {
    __sbrk_heap_end = &_end;
 80016de:	490a      	ldr	r1, [pc, #40]	@ (8001708 <_sbrk+0x34>)
 80016e0:	6011      	str	r1, [r2, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80016e2:	6810      	ldr	r0, [r2, #0]
 80016e4:	4909      	ldr	r1, [pc, #36]	@ (800170c <_sbrk+0x38>)
 80016e6:	4c0a      	ldr	r4, [pc, #40]	@ (8001710 <_sbrk+0x3c>)
 80016e8:	4403      	add	r3, r0
 80016ea:	1b09      	subs	r1, r1, r4
 80016ec:	428b      	cmp	r3, r1
 80016ee:	d906      	bls.n	80016fe <_sbrk+0x2a>
  {
    errno = ENOMEM;
 80016f0:	f026 f916 	bl	8027920 <__errno>
 80016f4:	230c      	movs	r3, #12
 80016f6:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 80016f8:	f04f 30ff 	mov.w	r0, #4294967295

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 80016fc:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 80016fe:	6013      	str	r3, [r2, #0]
  return (void *)prev_heap_end;
 8001700:	e7fc      	b.n	80016fc <_sbrk+0x28>
 8001702:	bf00      	nop
 8001704:	240006e8 	.word	0x240006e8
 8001708:	24029b40 	.word	0x24029b40
 800170c:	24080000 	.word	0x24080000
 8001710:	00001000 	.word	0x00001000

08001714 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001714:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800174c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001718:	f005 fff6 	bl	8007708 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800171c:	480c      	ldr	r0, [pc, #48]	@ (8001750 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800171e:	490d      	ldr	r1, [pc, #52]	@ (8001754 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001720:	4a0d      	ldr	r2, [pc, #52]	@ (8001758 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001722:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001724:	e002      	b.n	800172c <LoopCopyDataInit>

08001726 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001726:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001728:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800172a:	3304      	adds	r3, #4

0800172c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800172c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800172e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001730:	d3f9      	bcc.n	8001726 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001732:	4a0a      	ldr	r2, [pc, #40]	@ (800175c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001734:	4c0a      	ldr	r4, [pc, #40]	@ (8001760 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001736:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001738:	e001      	b.n	800173e <LoopFillZerobss>

0800173a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800173a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800173c:	3204      	adds	r2, #4

0800173e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800173e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001740:	d3fb      	bcc.n	800173a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001742:	f026 f8f3 	bl	802792c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001746:	f7ff f83f 	bl	80007c8 <main>
  bx  lr
 800174a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800174c:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001750:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001754:	2400013c 	.word	0x2400013c
  ldr r2, =_sidata
 8001758:	08031640 	.word	0x08031640
  ldr r2, =_sbss
 800175c:	24000340 	.word	0x24000340
  ldr r4, =_ebss
 8001760:	24029b40 	.word	0x24029b40

08001764 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001764:	e7fe      	b.n	8001764 <ADC3_IRQHandler>

08001766 <MX_TouchGFX_PreOSInit>:
/**
 * PreOS Initialization function
 */
void MX_TouchGFX_PreOSInit(void)
{
}
 8001766:	4770      	bx	lr

08001768 <MX_TouchGFX_Init>:

/**
 * Initialize TouchGFX application
 */
void MX_TouchGFX_Init(void)
{
 8001768:	b508      	push	{r3, lr}
    // Calling forward to touchgfx_init in C++ domain
    touchgfx_components_init();
 800176a:	f001 fd19 	bl	80031a0 <touchgfx_components_init>
    touchgfx_init();
}
 800176e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    touchgfx_init();
 8001772:	f001 bc9b 	b.w	80030ac <touchgfx_init>

08001776 <TouchGFX_Task>:
 * TouchGFX application thread
 */
void TouchGFX_Task(void* argument)
{
    // Calling forward to touchgfx_taskEntry in C++ domain
    touchgfx_taskEntry();
 8001776:	f001 bd15 	b.w	80031a4 <touchgfx_taskEntry>

0800177a <_ZN8touchgfx18MCUInstrumentation13getCCConsumedEv>:
     *
     * @return clock cycles.
     */
    virtual uint32_t getCCConsumed()
    {
        return cc_consumed;
 800177a:	6840      	ldr	r0, [r0, #4]
    }
 800177c:	4770      	bx	lr

0800177e <_ZN8touchgfx18MCUInstrumentation13setCCConsumedEm>:
     *
     * @param  val number of clock cycles.
     */
    virtual void setCCConsumed(uint32_t val)
    {
        cc_consumed = val;
 800177e:	6041      	str	r1, [r0, #4]
    }
 8001780:	4770      	bx	lr

08001782 <_ZN8touchgfx22STM32H7Instrumentation12getElapsedUSEjjj>:
    HAL_TIM_Base_Start(&tim);
}

unsigned int STM32H7Instrumentation::getElapsedUS(unsigned int start, unsigned int now, unsigned int clockfrequency)
{
    return ((now - start) + (clockfrequency / 2)) / clockfrequency;
 8001782:	1a52      	subs	r2, r2, r1
 8001784:	eb02 0253 	add.w	r2, r2, r3, lsr #1
}
 8001788:	fbb2 f0f3 	udiv	r0, r2, r3
 800178c:	4770      	bx	lr
	...

08001790 <_ZN8touchgfx22STM32H7Instrumentation12getCPUCyclesEv>:

unsigned int STM32H7Instrumentation::getCPUCycles()
{
    return __HAL_TIM_GET_COUNTER(&tim) * m_sysclkRatio;
 8001790:	4b02      	ldr	r3, [pc, #8]	@ (800179c <_ZN8touchgfx22STM32H7Instrumentation12getCPUCyclesEv+0xc>)
 8001792:	68c0      	ldr	r0, [r0, #12]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
}
 8001798:	4358      	muls	r0, r3
 800179a:	4770      	bx	lr
 800179c:	240006ec 	.word	0x240006ec

080017a0 <_ZN8touchgfx22STM32H7InstrumentationD1Ev>:
#include <platform/core/MCUInstrumentation.hpp>
#include <stdint.h>

namespace touchgfx
{
class STM32H7Instrumentation: public MCUInstrumentation
 80017a0:	4770      	bx	lr
	...

080017a4 <_ZN8touchgfx22STM32H7Instrumentation4initEv>:
{
 80017a4:	b537      	push	{r0, r1, r2, r4, r5, lr}
    __HAL_RCC_TIM2_CLK_ENABLE();
 80017a6:	4a1e      	ldr	r2, [pc, #120]	@ (8001820 <_ZN8touchgfx22STM32H7Instrumentation4initEv+0x7c>)
    tim.Instance = TIM2;
 80017a8:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
{
 80017ac:	4605      	mov	r5, r0
    tim.Init.Period = 0xFFFFFFFF;
 80017ae:	f04f 30ff 	mov.w	r0, #4294967295
    __HAL_RCC_TIM2_CLK_ENABLE();
 80017b2:	f8d2 30e8 	ldr.w	r3, [r2, #232]	@ 0xe8
 80017b6:	f043 0301 	orr.w	r3, r3, #1
 80017ba:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80017be:	f8d2 30e8 	ldr.w	r3, [r2, #232]	@ 0xe8
 80017c2:	f003 0301 	and.w	r3, r3, #1
 80017c6:	9301      	str	r3, [sp, #4]
 80017c8:	9b01      	ldr	r3, [sp, #4]
    tim.Instance = TIM2;
 80017ca:	4b16      	ldr	r3, [pc, #88]	@ (8001824 <_ZN8touchgfx22STM32H7Instrumentation4initEv+0x80>)
 80017cc:	6019      	str	r1, [r3, #0]
    tim.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017ce:	2100      	movs	r1, #0
    tim.Init.Period = 0xFFFFFFFF;
 80017d0:	60d8      	str	r0, [r3, #12]
    tim.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017d2:	6119      	str	r1, [r3, #16]
    tim.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017d4:	6099      	str	r1, [r3, #8]
    tim.Init.Prescaler = 0;
 80017d6:	6059      	str	r1, [r3, #4]
    tim.Init.RepetitionCounter = 1;
 80017d8:	2101      	movs	r1, #1
 80017da:	6159      	str	r1, [r3, #20]
    uwD2Prescaler = D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> POSITION_VAL(RCC_D2CFGR_D2PPRE1_0)];
 80017dc:	69d3      	ldr	r3, [r2, #28]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017de:	2210      	movs	r2, #16
 80017e0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80017e4:	fa92 f2a2 	rbit	r2, r2
   */
  if (value == 0U)
  {
    return 32U;
  }
  return __builtin_clz(value);
 80017e8:	fab2 f282 	clz	r2, r2
 80017ec:	40d3      	lsrs	r3, r2
    if (!uwD2Prescaler)
 80017ee:	4a0e      	ldr	r2, [pc, #56]	@ (8001828 <_ZN8touchgfx22STM32H7Instrumentation4initEv+0x84>)
 80017f0:	5cd3      	ldrb	r3, [r2, r3]
 80017f2:	b983      	cbnz	r3, 8001816 <_ZN8touchgfx22STM32H7Instrumentation4initEv+0x72>
        uwTimclock = HAL_RCC_GetHCLKFreq();
 80017f4:	f009 fea4 	bl	800b540 <HAL_RCC_GetHCLKFreq>
 80017f8:	4604      	mov	r4, r0
    m_sysclkRatio = HAL_RCC_GetSysClockFreq() / uwTimclock;
 80017fa:	f009 fcd9 	bl	800b1b0 <HAL_RCC_GetSysClockFreq>
 80017fe:	fbb0 f0f4 	udiv	r0, r0, r4
 8001802:	60e8      	str	r0, [r5, #12]
    HAL_TIM_Base_Init(&tim);
 8001804:	4807      	ldr	r0, [pc, #28]	@ (8001824 <_ZN8touchgfx22STM32H7Instrumentation4initEv+0x80>)
 8001806:	f00a feff 	bl	800c608 <HAL_TIM_Base_Init>
    HAL_TIM_Base_Start(&tim);
 800180a:	4806      	ldr	r0, [pc, #24]	@ (8001824 <_ZN8touchgfx22STM32H7Instrumentation4initEv+0x80>)
}
 800180c:	b003      	add	sp, #12
 800180e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    HAL_TIM_Base_Start(&tim);
 8001812:	f00a bd71 	b.w	800c2f8 <HAL_TIM_Base_Start>
        uwTimclock = 2 * HAL_RCC_GetPCLK1Freq();
 8001816:	f009 feb5 	bl	800b584 <HAL_RCC_GetPCLK1Freq>
 800181a:	0044      	lsls	r4, r0, #1
 800181c:	e7ed      	b.n	80017fa <_ZN8touchgfx22STM32H7Instrumentation4initEv+0x56>
 800181e:	bf00      	nop
 8001820:	58024400 	.word	0x58024400
 8001824:	240006ec 	.word	0x240006ec
 8001828:	0802b5e0 	.word	0x0802b5e0

0800182c <_ZN8touchgfx22STM32H7InstrumentationD0Ev>:
 800182c:	b510      	push	{r4, lr}
 800182e:	4604      	mov	r4, r0
 8001830:	2110      	movs	r1, #16
 8001832:	f025 f9ac 	bl	8026b8e <_ZdlPvj>
 8001836:	4620      	mov	r0, r4
 8001838:	bd10      	pop	{r4, pc}

0800183a <_ZN8touchgfx22STM32H7Instrumentation12setMCUActiveEb>:

void STM32H7Instrumentation::setMCUActive(bool active)
{
 800183a:	b538      	push	{r3, r4, r5, lr}
    if (active) //idle task sched out
    {
        uint32_t current_cc = cc_in;
        cc_consumed += getCPUCycles() - current_cc;
 800183c:	6803      	ldr	r3, [r0, #0]
{
 800183e:	4604      	mov	r4, r0
        cc_consumed += getCPUCycles() - current_cc;
 8001840:	691b      	ldr	r3, [r3, #16]
    if (active) //idle task sched out
 8001842:	b131      	cbz	r1, 8001852 <_ZN8touchgfx22STM32H7Instrumentation12setMCUActiveEb+0x18>
        uint32_t current_cc = cc_in;
 8001844:	6885      	ldr	r5, [r0, #8]
        cc_consumed += getCPUCycles() - current_cc;
 8001846:	4798      	blx	r3
 8001848:	6863      	ldr	r3, [r4, #4]
 800184a:	1b5b      	subs	r3, r3, r5
 800184c:	4403      	add	r3, r0
 800184e:	6063      	str	r3, [r4, #4]
    }
    else //idle task sched in
    {
        cc_in = getCPUCycles();
    }
}
 8001850:	bd38      	pop	{r3, r4, r5, pc}
        cc_in = getCPUCycles();
 8001852:	4798      	blx	r3
 8001854:	60a0      	str	r0, [r4, #8]
}
 8001856:	e7fb      	b.n	8001850 <_ZN8touchgfx22STM32H7Instrumentation12setMCUActiveEb+0x16>

08001858 <_ZN20STM32TouchControllerD1Ev>:
 * @brief This class specializes TouchController Interface.
 *
 * @sa touchgfx::TouchController
 */

class STM32TouchController : public touchgfx::TouchController
 8001858:	4770      	bx	lr
	...

0800185c <_ZN20STM32TouchController11sampleTouchERlS0_>:

    assert(bsp_ts_initialized);
}

bool STM32TouchController::sampleTouch(int32_t& x, int32_t& y)
{
 800185c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     *
     * This function is called by the TouchGFX framework.
     * By default sampleTouch is called every tick, this can be adjusted by HAL::setTouchSampleRate(int8_t);
     *
     */
    if (bsp_ts_initialized)
 800185e:	4b0a      	ldr	r3, [pc, #40]	@ (8001888 <_ZN20STM32TouchController11sampleTouchERlS0_+0x2c>)
{
 8001860:	460f      	mov	r7, r1
 8001862:	4616      	mov	r6, r2
    if (bsp_ts_initialized)
 8001864:	781d      	ldrb	r5, [r3, #0]
 8001866:	b915      	cbnz	r5, 800186e <_ZN20STM32TouchController11sampleTouchERlS0_+0x12>
            x = TS_State.TouchX;
            y = TS_State.TouchY;
            return true;
        }
    }
    return false;
 8001868:	2500      	movs	r5, #0
}
 800186a:	4628      	mov	r0, r5
 800186c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        BSP_TS_GetState(0, &TS_State);
 800186e:	4c07      	ldr	r4, [pc, #28]	@ (800188c <_ZN20STM32TouchController11sampleTouchERlS0_+0x30>)
 8001870:	2000      	movs	r0, #0
 8001872:	4621      	mov	r1, r4
 8001874:	f005 feec 	bl	8007650 <BSP_TS_GetState>
        if (TS_State.TouchDetected)
 8001878:	6823      	ldr	r3, [r4, #0]
 800187a:	2b00      	cmp	r3, #0
 800187c:	d0f4      	beq.n	8001868 <_ZN20STM32TouchController11sampleTouchERlS0_+0xc>
            x = TS_State.TouchX;
 800187e:	6863      	ldr	r3, [r4, #4]
 8001880:	603b      	str	r3, [r7, #0]
            y = TS_State.TouchY;
 8001882:	68a3      	ldr	r3, [r4, #8]
 8001884:	6033      	str	r3, [r6, #0]
            return true;
 8001886:	e7f0      	b.n	800186a <_ZN20STM32TouchController11sampleTouchERlS0_+0xe>
 8001888:	24000748 	.word	0x24000748
 800188c:	24000738 	.word	0x24000738

08001890 <_ZN20STM32TouchControllerD0Ev>:
 8001890:	b510      	push	{r4, lr}
 8001892:	4604      	mov	r4, r0
 8001894:	2104      	movs	r1, #4
 8001896:	f025 f97a 	bl	8026b8e <_ZdlPvj>
 800189a:	4620      	mov	r0, r4
 800189c:	bd10      	pop	{r4, pc}
	...

080018a0 <_ZN20STM32TouchController4initEv>:
{
 80018a0:	b508      	push	{r3, lr}
    hTS->Width = 800;
 80018a2:	4b0e      	ldr	r3, [pc, #56]	@ (80018dc <_ZN20STM32TouchController4initEv+0x3c>)
    hTS->Height = 480;
 80018a4:	f44f 7248 	mov.w	r2, #800	@ 0x320
    hTS->Accuracy = 0;
 80018a8:	2000      	movs	r0, #0
    hTS->Width = 800;
 80018aa:	6819      	ldr	r1, [r3, #0]
    hTS->Height = 480;
 80018ac:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 80018b0:	e9c1 2300 	strd	r2, r3, [r1]
    hTS->Accuracy = 0;
 80018b4:	230c      	movs	r3, #12
 80018b6:	e9c1 3002 	strd	r3, r0, [r1, #8]
    if (BSP_TS_Init(0, hTS) == BSP_ERROR_NONE)
 80018ba:	f005 fe39 	bl	8007530 <BSP_TS_Init>
 80018be:	4b08      	ldr	r3, [pc, #32]	@ (80018e0 <_ZN20STM32TouchController4initEv+0x40>)
 80018c0:	b910      	cbnz	r0, 80018c8 <_ZN20STM32TouchController4initEv+0x28>
        bsp_ts_initialized = true;
 80018c2:	2201      	movs	r2, #1
 80018c4:	701a      	strb	r2, [r3, #0]
}
 80018c6:	bd08      	pop	{r3, pc}
    assert(bsp_ts_initialized);
 80018c8:	781b      	ldrb	r3, [r3, #0]
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d1fb      	bne.n	80018c6 <_ZN20STM32TouchController4initEv+0x26>
 80018ce:	4b05      	ldr	r3, [pc, #20]	@ (80018e4 <_ZN20STM32TouchController4initEv+0x44>)
 80018d0:	212e      	movs	r1, #46	@ 0x2e
 80018d2:	4a05      	ldr	r2, [pc, #20]	@ (80018e8 <_ZN20STM32TouchController4initEv+0x48>)
 80018d4:	4805      	ldr	r0, [pc, #20]	@ (80018ec <_ZN20STM32TouchController4initEv+0x4c>)
 80018d6:	f025 fcd3 	bl	8027280 <__assert_func>
 80018da:	bf00      	nop
 80018dc:	24000744 	.word	0x24000744
 80018e0:	24000748 	.word	0x24000748
 80018e4:	080283c8 	.word	0x080283c8
 80018e8:	080283db 	.word	0x080283db
 80018ec:	08028405 	.word	0x08028405

080018f0 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>:
/*
 * Sets a pin high.
 */
void GPIO::set(GPIO_ID id)
{
    switch (id)
 80018f0:	2803      	cmp	r0, #3
 80018f2:	d825      	bhi.n	8001940 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x50>
 80018f4:	e8df f000 	tbb	[pc, r0]
 80018f8:	1b130b02 	.word	0x1b130b02
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, M_GPIO_PIN_SET(id));
 80018fc:	4b11      	ldr	r3, [pc, #68]	@ (8001944 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x54>)
 80018fe:	2108      	movs	r1, #8
 8001900:	681a      	ldr	r2, [r3, #0]
 8001902:	fab2 f282 	clz	r2, r2
 8001906:	0952      	lsrs	r2, r2, #5
#endif
        break;
    case GPIO::RENDER_TIME:
#if defined(RENDER_TIME_GPIO_Port) && defined(RENDER_TIME_Pin)
        HAL_GPIO_WritePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin, M_GPIO_PIN_SET(id));
 8001908:	480f      	ldr	r0, [pc, #60]	@ (8001948 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x58>)
        HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, M_GPIO_PIN_SET(id));
#endif
        break;
    case GPIO::MCU_ACTIVE:
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_SET(id));
 800190a:	f006 bfb7 	b.w	800887c <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin, M_GPIO_PIN_SET(id));
 800190e:	4b0d      	ldr	r3, [pc, #52]	@ (8001944 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x54>)
 8001910:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001914:	685a      	ldr	r2, [r3, #4]
 8001916:	fab2 f282 	clz	r2, r2
 800191a:	0952      	lsrs	r2, r2, #5
 800191c:	e7f4      	b.n	8001908 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x18>
        HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, M_GPIO_PIN_SET(id));
 800191e:	4b09      	ldr	r3, [pc, #36]	@ (8001944 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x54>)
 8001920:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001924:	689a      	ldr	r2, [r3, #8]
 8001926:	fab2 f282 	clz	r2, r2
 800192a:	0952      	lsrs	r2, r2, #5
 800192c:	e7ec      	b.n	8001908 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x18>
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_SET(id));
 800192e:	4b05      	ldr	r3, [pc, #20]	@ (8001944 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x54>)
 8001930:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001934:	4805      	ldr	r0, [pc, #20]	@ (800194c <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x5c>)
 8001936:	68da      	ldr	r2, [r3, #12]
 8001938:	fab2 f282 	clz	r2, r2
 800193c:	0952      	lsrs	r2, r2, #5
 800193e:	e7e4      	b.n	800190a <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x1a>
#endif
        break;
    }
}
 8001940:	4770      	bx	lr
 8001942:	bf00      	nop
 8001944:	2400074c 	.word	0x2400074c
 8001948:	58022400 	.word	0x58022400
 800194c:	58021400 	.word	0x58021400

08001950 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>:
/*
 * Sets a pin low.
 */
void GPIO::clear(GPIO_ID id)
{
    switch (id)
 8001950:	2803      	cmp	r0, #3
 8001952:	d825      	bhi.n	80019a0 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x50>
 8001954:	e8df f000 	tbb	[pc, r0]
 8001958:	1b130b02 	.word	0x1b130b02
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, M_GPIO_PIN_RESET(id));
 800195c:	4b11      	ldr	r3, [pc, #68]	@ (80019a4 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x54>)
 800195e:	2108      	movs	r1, #8
 8001960:	681a      	ldr	r2, [r3, #0]
 8001962:	3a00      	subs	r2, #0
 8001964:	bf18      	it	ne
 8001966:	2201      	movne	r2, #1
#endif
        break;
    case GPIO::RENDER_TIME:
#if defined(RENDER_TIME_GPIO_Port) && defined(RENDER_TIME_Pin)
        HAL_GPIO_WritePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin, M_GPIO_PIN_RESET(id));
 8001968:	480f      	ldr	r0, [pc, #60]	@ (80019a8 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x58>)
        HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, M_GPIO_PIN_RESET(id));
#endif
        break;
    case GPIO::MCU_ACTIVE:
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_RESET(id));
 800196a:	f006 bf87 	b.w	800887c <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin, M_GPIO_PIN_RESET(id));
 800196e:	4b0d      	ldr	r3, [pc, #52]	@ (80019a4 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x54>)
 8001970:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001974:	685a      	ldr	r2, [r3, #4]
 8001976:	3a00      	subs	r2, #0
 8001978:	bf18      	it	ne
 800197a:	2201      	movne	r2, #1
 800197c:	e7f4      	b.n	8001968 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x18>
        HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, M_GPIO_PIN_RESET(id));
 800197e:	4b09      	ldr	r3, [pc, #36]	@ (80019a4 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x54>)
 8001980:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001984:	689a      	ldr	r2, [r3, #8]
 8001986:	3a00      	subs	r2, #0
 8001988:	bf18      	it	ne
 800198a:	2201      	movne	r2, #1
 800198c:	e7ec      	b.n	8001968 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x18>
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_RESET(id));
 800198e:	4b05      	ldr	r3, [pc, #20]	@ (80019a4 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x54>)
 8001990:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001994:	4805      	ldr	r0, [pc, #20]	@ (80019ac <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x5c>)
 8001996:	68da      	ldr	r2, [r3, #12]
 8001998:	3a00      	subs	r2, #0
 800199a:	bf18      	it	ne
 800199c:	2201      	movne	r2, #1
 800199e:	e7e4      	b.n	800196a <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x1a>
#endif
        break;
    }
}
 80019a0:	4770      	bx	lr
 80019a2:	bf00      	nop
 80019a4:	2400074c 	.word	0x2400074c
 80019a8:	58022400 	.word	0x58022400
 80019ac:	58021400 	.word	0x58021400

080019b0 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>:
/*
 * Toggles a pin.
 */
void GPIO::toggle(GPIO_ID id)
{
    switch (id)
 80019b0:	2803      	cmp	r0, #3
 80019b2:	d811      	bhi.n	80019d8 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x28>
 80019b4:	e8df f000 	tbb	[pc, r0]
 80019b8:	0c090602 	.word	0x0c090602
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_TogglePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin);
 80019bc:	2108      	movs	r1, #8
#endif
        break;
    case GPIO::RENDER_TIME:
#if defined(RENDER_TIME_GPIO_Port) && defined(RENDER_TIME_Pin)
        HAL_GPIO_TogglePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin);
 80019be:	4807      	ldr	r0, [pc, #28]	@ (80019dc <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x2c>)
        HAL_GPIO_TogglePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin);
#endif
        break;
    case GPIO::MCU_ACTIVE:
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_TogglePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
 80019c0:	f006 bf61 	b.w	8008886 <HAL_GPIO_TogglePin>
        HAL_GPIO_TogglePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin);
 80019c4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80019c8:	e7f9      	b.n	80019be <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0xe>
        HAL_GPIO_TogglePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin);
 80019ca:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80019ce:	e7f6      	b.n	80019be <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0xe>
        HAL_GPIO_TogglePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
 80019d0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80019d4:	4802      	ldr	r0, [pc, #8]	@ (80019e0 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x30>)
 80019d6:	e7f3      	b.n	80019c0 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x10>
#endif
        break;
    }
}
 80019d8:	4770      	bx	lr
 80019da:	bf00      	nop
 80019dc:	58022400 	.word	0x58022400
 80019e0:	58021400 	.word	0x58021400

080019e4 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE>:

/*
 * Gets the state of a pin.
 */
bool GPIO::get(GPIO_ID id)
{
 80019e4:	b508      	push	{r3, lr}
    GPIO_PinState bitstatus = GPIO_PIN_RESET;
    switch (id)
 80019e6:	2803      	cmp	r0, #3
 80019e8:	d815      	bhi.n	8001a16 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x32>
 80019ea:	e8df f000 	tbb	[pc, r0]
 80019ee:	0a02      	.short	0x0a02
 80019f0:	100d      	.short	0x100d
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        bitstatus = HAL_GPIO_ReadPin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin);
 80019f2:	2108      	movs	r1, #8
        bitstatus = HAL_GPIO_ReadPin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin);
#endif
        break;
    case GPIO::FRAME_RATE:
#if defined(FRAME_RATE_GPIO_Port) && defined(FRAME_RATE_Pin)
        bitstatus = HAL_GPIO_ReadPin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin);
 80019f4:	4809      	ldr	r0, [pc, #36]	@ (8001a1c <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x38>)
#endif
        break;
    case GPIO::MCU_ACTIVE:
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        bitstatus = HAL_GPIO_ReadPin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
 80019f6:	f006 ff3b 	bl	8008870 <HAL_GPIO_ReadPin>
#endif
        break;
    }
    return (bitstatus == GPIO_PIN_SET);
}
 80019fa:	1e43      	subs	r3, r0, #1
 80019fc:	4258      	negs	r0, r3
 80019fe:	4158      	adcs	r0, r3
 8001a00:	bd08      	pop	{r3, pc}
        bitstatus = HAL_GPIO_ReadPin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin);
 8001a02:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001a06:	e7f5      	b.n	80019f4 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x10>
        bitstatus = HAL_GPIO_ReadPin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin);
 8001a08:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001a0c:	e7f2      	b.n	80019f4 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x10>
        bitstatus = HAL_GPIO_ReadPin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
 8001a0e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001a12:	4803      	ldr	r0, [pc, #12]	@ (8001a20 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x3c>)
 8001a14:	e7ef      	b.n	80019f6 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x12>
    switch (id)
 8001a16:	2000      	movs	r0, #0
 8001a18:	e7ef      	b.n	80019fa <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x16>
 8001a1a:	bf00      	nop
 8001a1c:	58022400 	.word	0x58022400
 8001a20:	58021400 	.word	0x58021400

08001a24 <_ZN8touchgfx4GPIO4initEv>:
{
 8001a24:	b570      	push	{r4, r5, r6, lr}
 8001a26:	4d08      	ldr	r5, [pc, #32]	@ (8001a48 <_ZN8touchgfx4GPIO4initEv+0x24>)
    for (int id = 0; id <= 4; id++)
 8001a28:	2400      	movs	r4, #0
                GPIO_InvertedLevels[id] = 1;
 8001a2a:	2601      	movs	r6, #1
        if (GPIO::get(static_cast<GPIO_ID>(id)))
 8001a2c:	b2e0      	uxtb	r0, r4
 8001a2e:	f7ff ffd9 	bl	80019e4 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE>
 8001a32:	b118      	cbz	r0, 8001a3c <_ZN8touchgfx4GPIO4initEv+0x18>
            if (GPIO_InvertedLevels[id] != 1)
 8001a34:	682b      	ldr	r3, [r5, #0]
 8001a36:	2b01      	cmp	r3, #1
                GPIO_InvertedLevels[id] = 1;
 8001a38:	bf18      	it	ne
 8001a3a:	602e      	strne	r6, [r5, #0]
    for (int id = 0; id <= 4; id++)
 8001a3c:	3401      	adds	r4, #1
 8001a3e:	3504      	adds	r5, #4
 8001a40:	2c05      	cmp	r4, #5
 8001a42:	d1f3      	bne.n	8001a2c <_ZN8touchgfx4GPIO4initEv+0x8>
}
 8001a44:	bd70      	pop	{r4, r5, r6, pc}
 8001a46:	bf00      	nop
 8001a48:	2400074c 	.word	0x2400074c

08001a4c <_ZN8touchgfx3HAL21setDisplayOrientationENS_18DisplayOrientationE>:
     * @note A screen transition must occur before this takes effect!
     */
    virtual void setDisplayOrientation(DisplayOrientation orientation)
    {
        requestedOrientation = orientation;
        displayOrientationChangeRequested = true;
 8001a4c:	2301      	movs	r3, #1
        requestedOrientation = orientation;
 8001a4e:	f880 1078 	strb.w	r1, [r0, #120]	@ 0x78
        displayOrientationChangeRequested = true;
 8001a52:	f880 3079 	strb.w	r3, [r0, #121]	@ 0x79
    }
 8001a56:	4770      	bx	lr

08001a58 <_ZN8touchgfx3HAL9sampleKeyERh>:
     */
    virtual bool sampleKey(uint8_t& key)
    {
        (void)key; // Unused variable
        return false;
    }
 8001a58:	2000      	movs	r0, #0
 8001a5a:	4770      	bx	lr

08001a5c <_ZN8touchgfx3HAL19setAnimationStorageEPv>:
     *
     * @see setFrameBufferStartAddresses
     */
    virtual void setAnimationStorage(void* animationStorage)
    {
        frameBuffer2 = reinterpret_cast<uint16_t*>(animationStorage);
 8001a5c:	6441      	str	r1, [r0, #68]	@ 0x44
        USE_ANIMATION_STORAGE = animationStorage != 0;
 8001a5e:	3900      	subs	r1, #0
 8001a60:	4b02      	ldr	r3, [pc, #8]	@ (8001a6c <_ZN8touchgfx3HAL19setAnimationStorageEPv+0x10>)
 8001a62:	bf18      	it	ne
 8001a64:	2101      	movne	r1, #1
 8001a66:	7019      	strb	r1, [r3, #0]
    }
 8001a68:	4770      	bx	lr
 8001a6a:	bf00      	nop
 8001a6c:	24028e1f 	.word	0x24028e1f

08001a70 <_ZNK8touchgfx3HAL18getFlashDataReaderEv>:
     * @return the FlashDataReader.
     */
    virtual FlashDataReader* getFlashDataReader() const
    {
        return 0;
    }
 8001a70:	2000      	movs	r0, #0
 8001a72:	4770      	bx	lr

08001a74 <_ZN8touchgfx3HAL9taskDelayEt>:
     *
     * @see registerTaskDelayFunction
     */
    virtual void taskDelay(uint16_t ms)
    {
        if (taskDelayFunc)
 8001a74:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 8001a76:	b10b      	cbz	r3, 8001a7c <_ZN8touchgfx3HAL9taskDelayEt+0x8>
        {
            taskDelayFunc(ms);
 8001a78:	4608      	mov	r0, r1
 8001a7a:	4718      	bx	r3
        }
    }
 8001a7c:	4770      	bx	lr

08001a7e <_ZN8touchgfx3HAL17getTFTCurrentLineEv>:
     *         implemented".
     */
    virtual uint16_t getTFTCurrentLine()
    {
        return 0xFFFFu;
    }
 8001a7e:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8001a82:	4770      	bx	lr

08001a84 <_ZN8touchgfx3HAL10getDMATypeEv>:
     *
     * @return a DMAType value of the concrete DMA implementation.
     */
    virtual DMAType getDMAType()
    {
        return dma.getDMAType();
 8001a84:	6840      	ldr	r0, [r0, #4]
 8001a86:	6803      	ldr	r3, [r0, #0]
 8001a88:	699b      	ldr	r3, [r3, #24]
 8001a8a:	4718      	bx	r3

08001a8c <_ZNK11TouchGFXHAL17getTFTFrameBufferEv>:
    // and implemented needed functionality here.

    /* USER CODE BEGIN getTFTFrameBuffer */
    return currFbBase;
    /* USER CODE END getTFTFrameBuffer */
}
 8001a8c:	4b01      	ldr	r3, [pc, #4]	@ (8001a94 <_ZNK11TouchGFXHAL17getTFTFrameBufferEv+0x8>)
 8001a8e:	6818      	ldr	r0, [r3, #0]
 8001a90:	4770      	bx	lr
 8001a92:	bf00      	nop
 8001a94:	24000770 	.word	0x24000770

08001a98 <_ZN11TouchGFXHALD1Ev>:
 *
 * @brief HAL implementation for TouchGFX.
 *
 * @sa HAL
 */
class TouchGFXHAL : public TouchGFXGeneratedHAL
 8001a98:	4770      	bx	lr

08001a9a <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE>:
    // and implemented needed functionality here.
    // Please note, HAL::flushFrameBuffer(const touchgfx::Rect& rect) must
    // be called to notify the touchgfx framework that flush has been performed.

    /* USER CODE BEGIN flushFrameBuffer step 1 */
    TouchGFXGeneratedHAL::flushFrameBuffer(rect);
 8001a9a:	f001 bc80 	b.w	800339e <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>

08001a9e <_ZN11TouchGFXHAL19configureInterruptsEv>:
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    /* USER CODE BEGIN configureInterrupts */
    TouchGFXGeneratedHAL::configureInterrupts();
 8001a9e:	f001 bc0f 	b.w	80032c0 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>

08001aa2 <_ZN11TouchGFXHAL16enableInterruptsEv>:
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    /* USER CODE BEGIN enableInterrupts */
    TouchGFXGeneratedHAL::enableInterrupts();
 8001aa2:	f001 bde1 	b.w	8003668 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>

08001aa6 <_ZN11TouchGFXHAL17disableInterruptsEv>:
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    /* USER CODE BEGIN disableInterrupts */
    TouchGFXGeneratedHAL::disableInterrupts();
 8001aa6:	f001 bdd3 	b.w	8003650 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>
	...

08001aac <_ZN11TouchGFXHAL8endFrameEv>:
    refreshRequested = false;
    return HAL::beginFrame();
}

void TouchGFXHAL::endFrame()
{
 8001aac:	b510      	push	{r4, lr}
 8001aae:	4604      	mov	r4, r0
    TouchGFXGeneratedHAL::endFrame();
 8001ab0:	f001 fd96 	bl	80035e0 <_ZN20TouchGFXGeneratedHAL8endFrameEv>
    if (frameBufferUpdatedThisFrame)
 8001ab4:	f894 304b 	ldrb.w	r3, [r4, #75]	@ 0x4b
 8001ab8:	b113      	cbz	r3, 8001ac0 <_ZN11TouchGFXHAL8endFrameEv+0x14>
    {
        refreshRequested = true;
 8001aba:	4b02      	ldr	r3, [pc, #8]	@ (8001ac4 <_ZN11TouchGFXHAL8endFrameEv+0x18>)
 8001abc:	2201      	movs	r2, #1
 8001abe:	701a      	strb	r2, [r3, #0]
    }
}
 8001ac0:	bd10      	pop	{r4, pc}
 8001ac2:	bf00      	nop
 8001ac4:	2400000c 	.word	0x2400000c

08001ac8 <_ZN11TouchGFXHAL17setTFTFrameBufferEPt>:
    TouchGFXGeneratedHAL::setTFTFrameBuffer(address);
 8001ac8:	f001 bc02 	b.w	80032d0 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>

08001acc <_ZN8touchgfx3HAL15backPorchExitedEv>:
    virtual void backPorchExited()
 8001acc:	b510      	push	{r4, lr}
 8001ace:	4604      	mov	r4, r0
        swapFrameBuffers();
 8001ad0:	f00f fdc2 	bl	8011658 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
        tick();
 8001ad4:	6823      	ldr	r3, [r4, #0]
 8001ad6:	4620      	mov	r0, r4
 8001ad8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
    }
 8001adc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        tick();
 8001ae0:	4718      	bx	r3

08001ae2 <_ZN20TouchGFXGeneratedHAL17unlockFrameBufferEv>:
     * @brief Unlocks the framebuffer.
     *
     * This specialization is marks DMA2D as un-reserved by the framwork.
     * @see HAL::unlockFrameBuffer
     */
    virtual void unlockFrameBuffer()
 8001ae2:	b510      	push	{r4, lr}
 8001ae4:	4604      	mov	r4, r0
    {
        HAL::unlockFrameBuffer();
 8001ae6:	f00f f94d 	bl	8010d84 <_ZN8touchgfx3HAL17unlockFrameBufferEv>
        dma.start();
 8001aea:	6860      	ldr	r0, [r4, #4]
 8001aec:	6803      	ldr	r3, [r0, #0]
    }
 8001aee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        dma.start();
 8001af2:	691b      	ldr	r3, [r3, #16]
 8001af4:	4718      	bx	r3

08001af6 <_ZN11TouchGFXHAL16flushFrameBufferEv>:
        HAL::flushFrameBuffer();
 8001af6:	f00f b81a 	b.w	8010b2e <_ZN8touchgfx3HAL16flushFrameBufferEv>

08001afa <_ZN11TouchGFXHALD0Ev>:
 8001afa:	b510      	push	{r4, lr}
 8001afc:	4604      	mov	r4, r0
 8001afe:	217c      	movs	r1, #124	@ 0x7c
 8001b00:	f025 f845 	bl	8026b8e <_ZdlPvj>
 8001b04:	4620      	mov	r0, r4
 8001b06:	bd10      	pop	{r4, pc}

08001b08 <_ZN11TouchGFXHAL10beginFrameEv>:
    refreshRequested = false;
 8001b08:	4b02      	ldr	r3, [pc, #8]	@ (8001b14 <_ZN11TouchGFXHAL10beginFrameEv+0xc>)
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	701a      	strb	r2, [r3, #0]
    return HAL::beginFrame();
 8001b0e:	f00f b84b 	b.w	8010ba8 <_ZN8touchgfx3HAL10beginFrameEv>
 8001b12:	bf00      	nop
 8001b14:	2400000c 	.word	0x2400000c

08001b18 <_ZN11TouchGFXHAL10initializeEv>:
{
 8001b18:	b538      	push	{r3, r4, r5, lr}
 8001b1a:	4604      	mov	r4, r0
    mcuInstr.init();
 8001b1c:	4d06      	ldr	r5, [pc, #24]	@ (8001b38 <_ZN11TouchGFXHAL10initializeEv+0x20>)
    TouchGFXGeneratedHAL::initialize();
 8001b1e:	f001 fbff 	bl	8003320 <_ZN20TouchGFXGeneratedHAL10initializeEv>
        lockDMAToPorch = enableLock;
 8001b22:	2300      	movs	r3, #0
    mcuInstr.init();
 8001b24:	4628      	mov	r0, r5
 8001b26:	f884 304a 	strb.w	r3, [r4, #74]	@ 0x4a
 8001b2a:	f7ff fe3b 	bl	80017a4 <_ZN8touchgfx22STM32H7Instrumentation4initEv>
        updateMCULoad = enabled;
 8001b2e:	2301      	movs	r3, #1
        mcuInstrumentation = mcuInstr;
 8001b30:	6125      	str	r5, [r4, #16]
        updateMCULoad = enabled;
 8001b32:	f884 3070 	strb.w	r3, [r4, #112]	@ 0x70
}
 8001b36:	bd38      	pop	{r3, r4, r5, pc}
 8001b38:	24000760 	.word	0x24000760

08001b3c <_ZN11TouchGFXHAL9taskEntryEv>:
    enableLCDControllerInterrupt();
 8001b3c:	6803      	ldr	r3, [r0, #0]
{
 8001b3e:	4604      	mov	r4, r0
 8001b40:	b507      	push	{r0, r1, r2, lr}
    enableLCDControllerInterrupt();
 8001b42:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001b46:	4798      	blx	r3
    enableInterrupts();
 8001b48:	6823      	ldr	r3, [r4, #0]
 8001b4a:	4620      	mov	r0, r4
 8001b4c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8001b4e:	4798      	blx	r3
    OSWrappers::waitForVSync();
 8001b50:	f000 ff5c 	bl	8002a0c <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
    backPorchExited();
 8001b54:	6823      	ldr	r3, [r4, #0]
 8001b56:	4620      	mov	r0, r4
 8001b58:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b5a:	4798      	blx	r3
    HAL_DSI_ShortWrite(&hdsi, LCD_OTM8009A_ID, DSI_DCS_SHORT_PKT_WRITE_P1, OTM8009A_CMD_DISPON, 0x00);
 8001b5c:	2100      	movs	r1, #0
 8001b5e:	2329      	movs	r3, #41	@ 0x29
 8001b60:	2215      	movs	r2, #21
 8001b62:	4805      	ldr	r0, [pc, #20]	@ (8001b78 <_ZN11TouchGFXHAL9taskEntryEv+0x3c>)
 8001b64:	9100      	str	r1, [sp, #0]
 8001b66:	f006 fbf8 	bl	800835a <HAL_DSI_ShortWrite>
        OSWrappers::waitForVSync();
 8001b6a:	f000 ff4f 	bl	8002a0c <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
        backPorchExited();
 8001b6e:	6823      	ldr	r3, [r4, #0]
 8001b70:	4620      	mov	r0, r4
 8001b72:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b74:	4798      	blx	r3
    for (;;)
 8001b76:	e7f8      	b.n	8001b6a <_ZN11TouchGFXHAL9taskEntryEv+0x2e>
 8001b78:	240005ec 	.word	0x240005ec

08001b7c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv>:
    virtual void noTouch();

    /** Perform the actual display orientation change. */
    virtual void performDisplayOrientationChange()
    {
        if (requestedOrientation != nativeDisplayOrientation)
 8001b7c:	f890 1034 	ldrb.w	r1, [r0, #52]	@ 0x34
        {
            if (DISPLAY_ROTATION == rotate0)
 8001b80:	4b0d      	ldr	r3, [pc, #52]	@ (8001bb8 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x3c>)
    virtual void performDisplayOrientationChange()
 8001b82:	b510      	push	{r4, lr}
        if (requestedOrientation != nativeDisplayOrientation)
 8001b84:	f890 4078 	ldrb.w	r4, [r0, #120]	@ 0x78
            if (DISPLAY_ROTATION == rotate0)
 8001b88:	781a      	ldrb	r2, [r3, #0]
        if (requestedOrientation != nativeDisplayOrientation)
 8001b8a:	428c      	cmp	r4, r1
 8001b8c:	d009      	beq.n	8001ba2 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x26>
            if (DISPLAY_ROTATION == rotate0)
 8001b8e:	b93a      	cbnz	r2, 8001ba0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x24>
            {
                const uint16_t tmp = DISPLAY_HEIGHT;
 8001b90:	490a      	ldr	r1, [pc, #40]	@ (8001bbc <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x40>)
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8001b92:	4a0b      	ldr	r2, [pc, #44]	@ (8001bc0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x44>)
                const uint16_t tmp = DISPLAY_HEIGHT;
 8001b94:	8808      	ldrh	r0, [r1, #0]
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8001b96:	8814      	ldrh	r4, [r2, #0]
                DISPLAY_WIDTH = tmp;
 8001b98:	8010      	strh	r0, [r2, #0]
                DISPLAY_ROTATION = rotate90;
 8001b9a:	2201      	movs	r2, #1
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8001b9c:	800c      	strh	r4, [r1, #0]
        else if (DISPLAY_ROTATION != rotate0)
        {
            const uint16_t tmp = DISPLAY_HEIGHT;
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
            DISPLAY_WIDTH = tmp;
            DISPLAY_ROTATION = rotate0;
 8001b9e:	701a      	strb	r2, [r3, #0]
        }
    }
 8001ba0:	bd10      	pop	{r4, pc}
        else if (DISPLAY_ROTATION != rotate0)
 8001ba2:	2a00      	cmp	r2, #0
 8001ba4:	d0fc      	beq.n	8001ba0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x24>
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8001ba6:	4a06      	ldr	r2, [pc, #24]	@ (8001bc0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x44>)
            const uint16_t tmp = DISPLAY_HEIGHT;
 8001ba8:	4904      	ldr	r1, [pc, #16]	@ (8001bbc <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x40>)
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8001baa:	8814      	ldrh	r4, [r2, #0]
            const uint16_t tmp = DISPLAY_HEIGHT;
 8001bac:	8808      	ldrh	r0, [r1, #0]
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8001bae:	800c      	strh	r4, [r1, #0]
            DISPLAY_WIDTH = tmp;
 8001bb0:	8010      	strh	r0, [r2, #0]
            DISPLAY_ROTATION = rotate0;
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	e7f3      	b.n	8001b9e <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x22>
 8001bb6:	bf00      	nop
 8001bb8:	24028e18 	.word	0x24028e18
 8001bbc:	24028e16 	.word	0x24028e16
 8001bc0:	24028e14 	.word	0x24028e14

08001bc4 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt>:
    virtual void setFrameBufferSize(uint16_t width, uint16_t height)
 8001bc4:	b508      	push	{r3, lr}
        assert(width >= DISPLAY_WIDTH && height >= DISPLAY_HEIGHT && "Framebuffer cannot be smaller than display");
 8001bc6:	4b09      	ldr	r3, [pc, #36]	@ (8001bec <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x28>)
 8001bc8:	881b      	ldrh	r3, [r3, #0]
 8001bca:	428b      	cmp	r3, r1
 8001bcc:	d803      	bhi.n	8001bd6 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x12>
 8001bce:	4b08      	ldr	r3, [pc, #32]	@ (8001bf0 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x2c>)
 8001bd0:	881b      	ldrh	r3, [r3, #0]
 8001bd2:	4293      	cmp	r3, r2
 8001bd4:	d905      	bls.n	8001be2 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x1e>
 8001bd6:	4b07      	ldr	r3, [pc, #28]	@ (8001bf4 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x30>)
 8001bd8:	219e      	movs	r1, #158	@ 0x9e
 8001bda:	4a07      	ldr	r2, [pc, #28]	@ (8001bf8 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x34>)
 8001bdc:	4807      	ldr	r0, [pc, #28]	@ (8001bfc <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x38>)
 8001bde:	f025 fb4f 	bl	8027280 <__assert_func>
        FRAME_BUFFER_WIDTH = width;
 8001be2:	4b07      	ldr	r3, [pc, #28]	@ (8001c00 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x3c>)
 8001be4:	8019      	strh	r1, [r3, #0]
        FRAME_BUFFER_HEIGHT = height;
 8001be6:	4b07      	ldr	r3, [pc, #28]	@ (8001c04 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x40>)
 8001be8:	801a      	strh	r2, [r3, #0]
    }
 8001bea:	bd08      	pop	{r3, pc}
 8001bec:	24028e14 	.word	0x24028e14
 8001bf0:	24028e16 	.word	0x24028e16
 8001bf4:	0802846c 	.word	0x0802846c
 8001bf8:	080284cf 	.word	0x080284cf
 8001bfc:	08028512 	.word	0x08028512
 8001c00:	24028e1a 	.word	0x24028e1a
 8001c04:	24028e1c 	.word	0x24028e1c

08001c08 <_ZN8touchgfx3HAL11getBlitCapsEv>:
    virtual BlitOperations getBlitCaps()
 8001c08:	4603      	mov	r3, r0
        if (useDMAAcceleration)
 8001c0a:	f890 007a 	ldrb.w	r0, [r0, #122]	@ 0x7a
 8001c0e:	b118      	cbz	r0, 8001c18 <_ZN8touchgfx3HAL11getBlitCapsEv+0x10>
 8001c10:	6858      	ldr	r0, [r3, #4]
            return dma.getBlitCaps();
 8001c12:	6803      	ldr	r3, [r0, #0]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	4718      	bx	r3
    }
 8001c18:	4770      	bx	lr
	...

08001c1c <_ZN11TouchGFXHAL28setFrameBufferStartAddressesEPvS0_S0_>:
{
 8001c1c:	b570      	push	{r4, r5, r6, lr}
 8001c1e:	460d      	mov	r5, r1
 8001c20:	4619      	mov	r1, r3
    currFbBase = (uint16_t*)frameBuffer;
 8001c22:	4b0b      	ldr	r3, [pc, #44]	@ (8001c50 <_ZN11TouchGFXHAL28setFrameBufferStartAddressesEPvS0_S0_+0x34>)
 8001c24:	601d      	str	r5, [r3, #0]
        assert(frameBuffer != 0 && "A framebuffer address must be set");
 8001c26:	b935      	cbnz	r5, 8001c36 <_ZN11TouchGFXHAL28setFrameBufferStartAddressesEPvS0_S0_+0x1a>
 8001c28:	4b0a      	ldr	r3, [pc, #40]	@ (8001c54 <_ZN11TouchGFXHAL28setFrameBufferStartAddressesEPvS0_S0_+0x38>)
 8001c2a:	f240 21d2 	movw	r1, #722	@ 0x2d2
 8001c2e:	4a0a      	ldr	r2, [pc, #40]	@ (8001c58 <_ZN11TouchGFXHAL28setFrameBufferStartAddressesEPvS0_S0_+0x3c>)
 8001c30:	480a      	ldr	r0, [pc, #40]	@ (8001c5c <_ZN11TouchGFXHAL28setFrameBufferStartAddressesEPvS0_S0_+0x40>)
 8001c32:	f025 fb25 	bl	8027280 <__assert_func>
        frameBuffer1 = reinterpret_cast<uint16_t*>(doubleBuffer);
 8001c36:	e9c0 520f 	strd	r5, r2, [r0, #60]	@ 0x3c
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
 8001c3a:	3a00      	subs	r2, #0
 8001c3c:	4b08      	ldr	r3, [pc, #32]	@ (8001c60 <_ZN11TouchGFXHAL28setFrameBufferStartAddressesEPvS0_S0_+0x44>)
 8001c3e:	bf18      	it	ne
 8001c40:	2201      	movne	r2, #1
 8001c42:	701a      	strb	r2, [r3, #0]
        setAnimationStorage(animationStorage);
 8001c44:	6803      	ldr	r3, [r0, #0]
}
 8001c46:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8001c4a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001c4e:	4718      	bx	r3
 8001c50:	24000770 	.word	0x24000770
 8001c54:	08028565 	.word	0x08028565
 8001c58:	0802859d 	.word	0x0802859d
 8001c5c:	08028512 	.word	0x08028512
 8001c60:	24028e1e 	.word	0x24028e1e

08001c64 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>:
          lcdRef(display),
 8001c64:	e9c0 1201 	strd	r1, r2, [r0, #4]
          touchController(touchCtrl),
 8001c68:	60c3      	str	r3, [r0, #12]
          refreshStrategy(REFRESH_STRATEGY_DEFAULT),
 8001c6a:	f44f 7280 	mov.w	r2, #256	@ 0x100
          mcuInstrumentation(0),
 8001c6e:	2300      	movs	r3, #0
          auxiliaryLCD(0),
 8001c70:	e9c0 2312 	strd	r2, r3, [r0, #72]	@ 0x48
          touchSampleRate(1),
 8001c74:	4a1d      	ldr	r2, [pc, #116]	@ (8001cec <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x88>)
              startY(0),
              downX(0),
              downY(0),
              tickCount(0),
              velocityX(0),
              velocityY(0),
 8001c76:	8503      	strh	r3, [r0, #40]	@ 0x28
              inProgress(false)
 8001c78:	f880 302a 	strb.w	r3, [r0, #42]	@ 0x2a
    };

public:
    /** Default constructor. Does nothing. */
    Gestures()
        : drag(), listener(0), dragThresholdValue(0)
 8001c7c:	62c3      	str	r3, [r0, #44]	@ 0x2c
 8001c7e:	8603      	strh	r3, [r0, #48]	@ 0x30
          useAuxiliaryLCD(false),
 8001c80:	f880 3058 	strb.w	r3, [r0, #88]	@ 0x58
          lastY(0),
 8001c84:	6643      	str	r3, [r0, #100]	@ 0x64
          updateMCULoad(0),
 8001c86:	f880 3070 	strb.w	r3, [r0, #112]	@ 0x70
          cc_begin(0),
 8001c8a:	6743      	str	r3, [r0, #116]	@ 0x74
TouchGFXHAL::TouchGFXHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height)
 8001c8c:	b570      	push	{r4, r5, r6, lr}
          vSyncCompensationEnabled(false),
 8001c8e:	e9c0 231a 	strd	r2, r3, [r0, #104]	@ 0x68
                           height)
 8001c92:	f8bd 5010 	ldrh.w	r5, [sp, #16]
          requestedOrientation(ORIENTATION_LANDSCAPE),
 8001c96:	4a16      	ldr	r2, [pc, #88]	@ (8001cf0 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x8c>)
TouchGFXHAL::TouchGFXHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height)
 8001c98:	f8bd 6014 	ldrh.w	r6, [sp, #20]
                           height)
 8001c9c:	3520      	adds	r5, #32
          buttonController(0),
 8001c9e:	e9c0 3304 	strd	r3, r3, [r0, #16]
            : startX(0),
 8001ca2:	e9c0 3306 	strd	r3, r3, [r0, #24]
              tickCount(0),
 8001ca6:	e9c0 3308 	strd	r3, r3, [r0, #32]
          frameBuffer0(0),
 8001caa:	e9c0 330e 	strd	r3, r3, [r0, #56]	@ 0x38
          frameBuffer2(0),
 8001cae:	e9c0 3310 	strd	r3, r3, [r0, #64]	@ 0x40
class Rect
{
public:
    /** Default constructor. Resulting in an empty Rect with coordinates 0,0. */
    Rect()
        : x(0), y(0), width(0), height(0)
 8001cb2:	e9c0 3314 	strd	r3, r3, [r0, #80]	@ 0x50
          lastX(0),
 8001cb6:	e9c0 3317 	strd	r3, r3, [r0, #92]	@ 0x5c
          requestedOrientation(ORIENTATION_LANDSCAPE),
 8001cba:	6782      	str	r2, [r0, #120]	@ 0x78
 8001cbc:	b2ad      	uxth	r5, r5
        instance = this;
 8001cbe:	4a0d      	ldr	r2, [pc, #52]	@ (8001cf4 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x90>)
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 8001cc0:	42b5      	cmp	r5, r6
        instance = this;
 8001cc2:	6010      	str	r0, [r2, #0]
        FRAME_BUFFER_WIDTH = DISPLAY_WIDTH = width;
 8001cc4:	4a0c      	ldr	r2, [pc, #48]	@ (8001cf8 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x94>)
 8001cc6:	8015      	strh	r5, [r2, #0]
 8001cc8:	4a0c      	ldr	r2, [pc, #48]	@ (8001cfc <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x98>)
 8001cca:	8015      	strh	r5, [r2, #0]
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 8001ccc:	bf28      	it	cs
 8001cce:	2500      	movcs	r5, #0
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT = height;
 8001cd0:	4a0b      	ldr	r2, [pc, #44]	@ (8001d00 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x9c>)
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 8001cd2:	bf38      	it	cc
 8001cd4:	2501      	movcc	r5, #1
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT = height;
 8001cd6:	8016      	strh	r6, [r2, #0]
 8001cd8:	4a0a      	ldr	r2, [pc, #40]	@ (8001d04 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0xa0>)
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 8001cda:	f880 5034 	strb.w	r5, [r0, #52]	@ 0x34
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT = height;
 8001cde:	8016      	strh	r6, [r2, #0]
        DISPLAY_ROTATION = rotate0;
 8001ce0:	4a09      	ldr	r2, [pc, #36]	@ (8001d08 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0xa4>)
 8001ce2:	7013      	strb	r3, [r2, #0]
 8001ce4:	4b09      	ldr	r3, [pc, #36]	@ (8001d0c <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0xa8>)
 8001ce6:	6003      	str	r3, [r0, #0]
}
 8001ce8:	bd70      	pop	{r4, r5, r6, pc}
 8001cea:	bf00      	nop
 8001cec:	01000001 	.word	0x01000001
 8001cf0:	01010000 	.word	0x01010000
 8001cf4:	24028e20 	.word	0x24028e20
 8001cf8:	24028e14 	.word	0x24028e14
 8001cfc:	24028e1a 	.word	0x24028e1a
 8001d00:	24028e16 	.word	0x24028e16
 8001d04:	24028e1c 	.word	0x24028e1c
 8001d08:	24028e18 	.word	0x24028e18
 8001d0c:	080285f4 	.word	0x080285f4

08001d10 <DSI_IO_Write>:
      */
    int32_t DSI_IO_Write(uint16_t ChannelNbr, uint16_t Reg, uint8_t* pData, uint16_t Size)
    {
        int32_t ret = BSP_ERROR_NONE;

        if (Size <= 1U)
 8001d10:	2b01      	cmp	r3, #1
    {
 8001d12:	b513      	push	{r0, r1, r4, lr}
        if (Size <= 1U)
 8001d14:	d80e      	bhi.n	8001d34 <DSI_IO_Write+0x24>
        {
            if (HAL_DSI_ShortWrite(&hdsi, ChannelNbr, DSI_DCS_SHORT_PKT_WRITE_P1, Reg, (uint32_t)pData[Size]) != HAL_OK)
 8001d16:	5cd3      	ldrb	r3, [r2, r3]
 8001d18:	2215      	movs	r2, #21
 8001d1a:	9300      	str	r3, [sp, #0]
 8001d1c:	460b      	mov	r3, r1
 8001d1e:	4601      	mov	r1, r0
 8001d20:	4808      	ldr	r0, [pc, #32]	@ (8001d44 <DSI_IO_Write+0x34>)
 8001d22:	f006 fb1a 	bl	800835a <HAL_DSI_ShortWrite>
 8001d26:	b118      	cbz	r0, 8001d30 <DSI_IO_Write+0x20>
            {
                ret = BSP_ERROR_BUS_FAILURE;
 8001d28:	f06f 0007 	mvn.w	r0, #7
                ret = BSP_ERROR_BUS_FAILURE;
            }
        }

        return ret;
    }
 8001d2c:	b002      	add	sp, #8
 8001d2e:	bd10      	pop	{r4, pc}
        int32_t ret = BSP_ERROR_NONE;
 8001d30:	2000      	movs	r0, #0
 8001d32:	e7fb      	b.n	8001d2c <DSI_IO_Write+0x1c>
            if (HAL_DSI_LongWrite(&hdsi, ChannelNbr, DSI_DCS_LONG_PKT_WRITE, Size, (uint32_t)Reg, pData) != HAL_OK)
 8001d34:	e9cd 1200 	strd	r1, r2, [sp]
 8001d38:	4601      	mov	r1, r0
 8001d3a:	2239      	movs	r2, #57	@ 0x39
 8001d3c:	4801      	ldr	r0, [pc, #4]	@ (8001d44 <DSI_IO_Write+0x34>)
 8001d3e:	f006 fb1d 	bl	800837c <HAL_DSI_LongWrite>
 8001d42:	e7f0      	b.n	8001d26 <DSI_IO_Write+0x16>
 8001d44:	240005ec 	.word	0x240005ec

08001d48 <DSI_IO_Read>:
      * @param  pData pointer to a buffer to store the payload of a read back operation.
      * @param  Size  Data size to be read (in byte).
      * @retval BSP status
      */
    int32_t DSI_IO_Read(uint16_t ChannelNbr, uint16_t Reg, uint8_t* pData, uint16_t Size)
    {
 8001d48:	b51f      	push	{r0, r1, r2, r3, r4, lr}
        int32_t ret = BSP_ERROR_NONE;

        if (HAL_DSI_Read(&hdsi, ChannelNbr, pData, Size, DSI_DCS_SHORT_PKT_READ, Reg, pData) != HAL_OK)
 8001d4a:	e9cd 1201 	strd	r1, r2, [sp, #4]
 8001d4e:	2106      	movs	r1, #6
 8001d50:	9100      	str	r1, [sp, #0]
 8001d52:	4601      	mov	r1, r0
 8001d54:	4805      	ldr	r0, [pc, #20]	@ (8001d6c <DSI_IO_Read+0x24>)
 8001d56:	f006 fb71 	bl	800843c <HAL_DSI_Read>
        int32_t ret = BSP_ERROR_NONE;
 8001d5a:	2800      	cmp	r0, #0
        {
            ret = BSP_ERROR_BUS_FAILURE;
        }

        return ret;
    }
 8001d5c:	bf14      	ite	ne
 8001d5e:	f06f 0007 	mvnne.w	r0, #7
 8001d62:	2000      	moveq	r0, #0
 8001d64:	b005      	add	sp, #20
 8001d66:	f85d fb04 	ldr.w	pc, [sp], #4
 8001d6a:	bf00      	nop
 8001d6c:	240005ec 	.word	0x240005ec

08001d70 <LCD_ReqTear>:

    /**
     * Request TE at scanline.
     */
    void LCD_ReqTear(void)
    {
 8001d70:	b51f      	push	{r0, r1, r2, r3, r4, lr}
        uint8_t ScanLineParams[2];
        uint16_t scanline = 500;

        ScanLineParams[0] = scanline >> 8;
 8001d72:	f24f 4301 	movw	r3, #62465	@ 0xf401
        ScanLineParams[1] = scanline & 0x00FF;

        HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 2, 0x44, ScanLineParams);
 8001d76:	4c0b      	ldr	r4, [pc, #44]	@ (8001da4 <LCD_ReqTear+0x34>)
 8001d78:	2239      	movs	r2, #57	@ 0x39
 8001d7a:	2100      	movs	r1, #0
        ScanLineParams[0] = scanline >> 8;
 8001d7c:	f8ad 300c 	strh.w	r3, [sp, #12]
        HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 2, 0x44, ScanLineParams);
 8001d80:	ab03      	add	r3, sp, #12
 8001d82:	4620      	mov	r0, r4
 8001d84:	9301      	str	r3, [sp, #4]
 8001d86:	2344      	movs	r3, #68	@ 0x44
 8001d88:	9300      	str	r3, [sp, #0]
 8001d8a:	2302      	movs	r3, #2
 8001d8c:	f006 faf6 	bl	800837c <HAL_DSI_LongWrite>
        HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P1, OTM8009A_CMD_TEEON, 0x00);
 8001d90:	2100      	movs	r1, #0
 8001d92:	2335      	movs	r3, #53	@ 0x35
 8001d94:	2215      	movs	r2, #21
 8001d96:	4620      	mov	r0, r4
 8001d98:	9100      	str	r1, [sp, #0]
 8001d9a:	f006 fade 	bl	800835a <HAL_DSI_ShortWrite>
    }
 8001d9e:	b004      	add	sp, #16
 8001da0:	bd10      	pop	{r4, pc}
 8001da2:	bf00      	nop
 8001da4:	240005ec 	.word	0x240005ec

08001da8 <_ZN11TouchGFXHAL28enableLCDControllerInterruptEv>:
{
 8001da8:	b508      	push	{r3, lr}
    LCD_ReqTear();
 8001daa:	f7ff ffe1 	bl	8001d70 <LCD_ReqTear>
    __HAL_DSI_CLEAR_FLAG(&hdsi, DSI_IT_ER);
 8001dae:	4b0c      	ldr	r3, [pc, #48]	@ (8001de0 <_ZN11TouchGFXHAL28enableLCDControllerInterruptEv+0x38>)
 8001db0:	2202      	movs	r2, #2
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f8c3 2410 	str.w	r2, [r3, #1040]	@ 0x410
    __HAL_DSI_CLEAR_FLAG(&hdsi, DSI_IT_TE);
 8001db8:	2201      	movs	r2, #1
 8001dba:	f8c3 2410 	str.w	r2, [r3, #1040]	@ 0x410
    __HAL_DSI_ENABLE_IT(&hdsi, DSI_IT_TE);
 8001dbe:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 8001dc2:	f042 0201 	orr.w	r2, r2, #1
 8001dc6:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408
    __HAL_DSI_ENABLE_IT(&hdsi, DSI_IT_ER);
 8001dca:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 8001dce:	f042 0202 	orr.w	r2, r2, #2
 8001dd2:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408
    LTDC->IER = 3; /* Enable line and FIFO underrun interrupts */
 8001dd6:	2203      	movs	r2, #3
 8001dd8:	4b02      	ldr	r3, [pc, #8]	@ (8001de4 <_ZN11TouchGFXHAL28enableLCDControllerInterruptEv+0x3c>)
 8001dda:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8001ddc:	bd08      	pop	{r3, pc}
 8001dde:	bf00      	nop
 8001de0:	240005ec 	.word	0x240005ec
 8001de4:	50001000 	.word	0x50001000

08001de8 <LCD_ReqEnable>:
    void LCD_ReqEnable(void)
    {
        static bool firstRefreshRequested = false;

        // Enable DSI interface once the very first framebuffer is ready for display
        if (!firstRefreshRequested)
 8001de8:	4b07      	ldr	r3, [pc, #28]	@ (8001e08 <LCD_ReqEnable+0x20>)
    {
 8001dea:	b507      	push	{r0, r1, r2, lr}
        if (!firstRefreshRequested)
 8001dec:	7819      	ldrb	r1, [r3, #0]
 8001dee:	b939      	cbnz	r1, 8001e00 <LCD_ReqEnable+0x18>
        {
            firstRefreshRequested = true;
 8001df0:	2201      	movs	r2, #1

            /* Send Display on DCS Command to display */
            HAL_DSI_ShortWrite(&(hdsi),
 8001df2:	4806      	ldr	r0, [pc, #24]	@ (8001e0c <LCD_ReqEnable+0x24>)
            firstRefreshRequested = true;
 8001df4:	701a      	strb	r2, [r3, #0]
            HAL_DSI_ShortWrite(&(hdsi),
 8001df6:	2329      	movs	r3, #41	@ 0x29
 8001df8:	2215      	movs	r2, #21
 8001dfa:	9100      	str	r1, [sp, #0]
 8001dfc:	f006 faad 	bl	800835a <HAL_DSI_ShortWrite>
                               0,
                               DSI_DCS_SHORT_PKT_WRITE_P1,
                               OTM8009A_CMD_DISPON,
                               0x00);
        }
    }
 8001e00:	b003      	add	sp, #12
 8001e02:	f85d fb04 	ldr.w	pc, [sp], #4
 8001e06:	bf00      	nop
 8001e08:	2400075c 	.word	0x2400075c
 8001e0c:	240005ec 	.word	0x240005ec

08001e10 <LCD_SetUpdateRegionLeft>:
        HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 4, OTM8009A_CMD_CASET, pCols[idx]);
    }

    void LCD_SetUpdateRegionLeft()
    {
        HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 4, OTM8009A_CMD_CASET, pColLeft);
 8001e10:	4b06      	ldr	r3, [pc, #24]	@ (8001e2c <LCD_SetUpdateRegionLeft+0x1c>)
    {
 8001e12:	b507      	push	{r0, r1, r2, lr}
        HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 4, OTM8009A_CMD_CASET, pColLeft);
 8001e14:	9301      	str	r3, [sp, #4]
 8001e16:	232a      	movs	r3, #42	@ 0x2a
 8001e18:	2239      	movs	r2, #57	@ 0x39
 8001e1a:	2100      	movs	r1, #0
 8001e1c:	9300      	str	r3, [sp, #0]
 8001e1e:	2304      	movs	r3, #4
 8001e20:	4803      	ldr	r0, [pc, #12]	@ (8001e30 <LCD_SetUpdateRegionLeft+0x20>)
 8001e22:	f006 faab 	bl	800837c <HAL_DSI_LongWrite>
    }
 8001e26:	b003      	add	sp, #12
 8001e28:	f85d fb04 	ldr.w	pc, [sp], #4
 8001e2c:	24000008 	.word	0x24000008
 8001e30:	240005ec 	.word	0x240005ec

08001e34 <LCD_SetUpdateRegionRight>:

    void LCD_SetUpdateRegionRight()
    {
        HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 4, OTM8009A_CMD_CASET, pColRight);
 8001e34:	4b06      	ldr	r3, [pc, #24]	@ (8001e50 <LCD_SetUpdateRegionRight+0x1c>)
    {
 8001e36:	b507      	push	{r0, r1, r2, lr}
        HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 4, OTM8009A_CMD_CASET, pColRight);
 8001e38:	9301      	str	r3, [sp, #4]
 8001e3a:	232a      	movs	r3, #42	@ 0x2a
 8001e3c:	2239      	movs	r2, #57	@ 0x39
 8001e3e:	2100      	movs	r1, #0
 8001e40:	9300      	str	r3, [sp, #0]
 8001e42:	2304      	movs	r3, #4
 8001e44:	4803      	ldr	r0, [pc, #12]	@ (8001e54 <LCD_SetUpdateRegionRight+0x20>)
 8001e46:	f006 fa99 	bl	800837c <HAL_DSI_LongWrite>
    }
 8001e4a:	b003      	add	sp, #12
 8001e4c:	f85d fb04 	ldr.w	pc, [sp], #4
 8001e50:	24000004 	.word	0x24000004
 8001e54:	240005ec 	.word	0x240005ec

08001e58 <HAL_DSI_TearingEffectCallback>:
                           0, DSI_DCS_SHORT_PKT_WRITE_P1,
                           OTM8009A_CMD_WRDISBV, (uint16_t)(value * 255) / 100);
    }

    void HAL_DSI_TearingEffectCallback(DSI_HandleTypeDef* hdsi)
    {
 8001e58:	b538      	push	{r3, r4, r5, lr}
        return instance;
 8001e5a:	4d14      	ldr	r5, [pc, #80]	@ (8001eac <HAL_DSI_TearingEffectCallback+0x54>)
 8001e5c:	4604      	mov	r4, r0
        GPIO::set(GPIO::VSYNC_FREQ);
 8001e5e:	2000      	movs	r0, #0
 8001e60:	f7ff fd46 	bl	80018f0 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 8001e64:	682a      	ldr	r2, [r5, #0]
        vSyncCnt++;
 8001e66:	f892 306a 	ldrb.w	r3, [r2, #106]	@ 0x6a
 8001e6a:	3301      	adds	r3, #1
 8001e6c:	f882 306a 	strb.w	r3, [r2, #106]	@ 0x6a

        HAL::getInstance()->vSync();
        OSWrappers::signalVSync();
 8001e70:	f000 fdc0 	bl	80029f4 <_ZN8touchgfx10OSWrappers11signalVSyncEv>

        // In single buffering, only require that the system waits for display update to be finished if we
        // actually intend to update the display in this frame.
        HAL::getInstance()->lockDMAToFrontPorch(refreshRequested);
 8001e74:	4b0e      	ldr	r3, [pc, #56]	@ (8001eb0 <HAL_DSI_TearingEffectCallback+0x58>)
        lockDMAToPorch = enableLock;
 8001e76:	682a      	ldr	r2, [r5, #0]
 8001e78:	7819      	ldrb	r1, [r3, #0]

        if (refreshRequested && !displayRefreshing)
 8001e7a:	781b      	ldrb	r3, [r3, #0]
 8001e7c:	f882 104a 	strb.w	r1, [r2, #74]	@ 0x4a
 8001e80:	b173      	cbz	r3, 8001ea0 <HAL_DSI_TearingEffectCallback+0x48>
 8001e82:	4d0c      	ldr	r5, [pc, #48]	@ (8001eb4 <HAL_DSI_TearingEffectCallback+0x5c>)
 8001e84:	782b      	ldrb	r3, [r5, #0]
 8001e86:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8001e8a:	b94b      	cbnz	r3, 8001ea0 <HAL_DSI_TearingEffectCallback+0x48>
        {

            // Update region 0 = first area of display (First quarter for 16bpp, first half for 24bpp)
            updateRegion = 0;
 8001e8c:	4b0a      	ldr	r3, [pc, #40]	@ (8001eb8 <HAL_DSI_TearingEffectCallback+0x60>)
 8001e8e:	601a      	str	r2, [r3, #0]
            LCD_SetUpdateRegionLeft();
 8001e90:	f7ff ffbe 	bl	8001e10 <LCD_SetUpdateRegionLeft>

            // Transfer a quarter screen of pixel data.
            HAL_DSI_Refresh(hdsi);
 8001e94:	4620      	mov	r0, r4
 8001e96:	f006 fa50 	bl	800833a <HAL_DSI_Refresh>
            displayRefreshing = true;
 8001e9a:	2301      	movs	r3, #1
 8001e9c:	702b      	strb	r3, [r5, #0]
        }
        else
        {
            GPIO::clear(GPIO::VSYNC_FREQ);
        }
    }
 8001e9e:	bd38      	pop	{r3, r4, r5, pc}
            GPIO::clear(GPIO::VSYNC_FREQ);
 8001ea0:	2000      	movs	r0, #0
    }
 8001ea2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
            GPIO::clear(GPIO::VSYNC_FREQ);
 8001ea6:	f7ff bd53 	b.w	8001950 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 8001eaa:	bf00      	nop
 8001eac:	24028e20 	.word	0x24028e20
 8001eb0:	2400000c 	.word	0x2400000c
 8001eb4:	24000778 	.word	0x24000778
 8001eb8:	24000774 	.word	0x24000774

08001ebc <HAL_DSI_EndOfRefreshCallback>:

    void HAL_DSI_EndOfRefreshCallback(DSI_HandleTypeDef* hdsi)
    {
 8001ebc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
        if (displayRefreshing)
 8001ec0:	4e48      	ldr	r6, [pc, #288]	@ (8001fe4 <HAL_DSI_EndOfRefreshCallback+0x128>)
    {
 8001ec2:	b085      	sub	sp, #20
 8001ec4:	4604      	mov	r4, r0
        if (displayRefreshing)
 8001ec6:	7833      	ldrb	r3, [r6, #0]
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	f000 8088 	beq.w	8001fde <HAL_DSI_EndOfRefreshCallback+0x122>
        {
            if (updateRegion == 0)
 8001ece:	f8df 9138 	ldr.w	r9, [pc, #312]	@ 8002008 <HAL_DSI_EndOfRefreshCallback+0x14c>
 8001ed2:	f8df 8138 	ldr.w	r8, [pc, #312]	@ 800200c <HAL_DSI_EndOfRefreshCallback+0x150>
 8001ed6:	f8d9 5000 	ldr.w	r5, [r9]
 8001eda:	4f43      	ldr	r7, [pc, #268]	@ (8001fe8 <HAL_DSI_EndOfRefreshCallback+0x12c>)
 8001edc:	2d00      	cmp	r5, #0
 8001ede:	d13e      	bne.n	8001f5e <HAL_DSI_EndOfRefreshCallback+0xa2>
            {
                HAL_Delay(1);
 8001ee0:	2001      	movs	r0, #1
                // If we transferred the left half, also transfer right half.
                __HAL_DSI_WRAPPER_DISABLE(hdsi);
                LTDC_LAYER(&hltdc, 0)->CFBAR = ((uint32_t)currFbBase) + 400 * 3;
                uint16_t ADJUSTED_WIDTH = 432; //64-byte aligned width
                uint16_t REAL_WIDTH = 400; //we only actually have this amount of pixels on display
                LTDC->AWCR = ((ADJUSTED_WIDTH + 2) << 16) | 0x1E2;
 8001ee2:	4e42      	ldr	r6, [pc, #264]	@ (8001fec <HAL_DSI_EndOfRefreshCallback+0x130>)
                HAL_Delay(1);
 8001ee4:	f005 fcc0 	bl	8007868 <HAL_Delay>
                __HAL_DSI_WRAPPER_DISABLE(hdsi);
 8001ee8:	6823      	ldr	r3, [r4, #0]
 8001eea:	9500      	str	r5, [sp, #0]
 8001eec:	f8d3 2404 	ldr.w	r2, [r3, #1028]	@ 0x404
                LTDC_LAYER(&hltdc, 0)->CFBAR = ((uint32_t)currFbBase) + 400 * 3;
 8001ef0:	6838      	ldr	r0, [r7, #0]
                __HAL_DSI_WRAPPER_DISABLE(hdsi);
 8001ef2:	f022 0208 	bic.w	r2, r2, #8
                LTDC_LAYER(&hltdc, 0)->CFBAR = ((uint32_t)currFbBase) + 400 * 3;
 8001ef6:	f500 6096 	add.w	r0, r0, #1200	@ 0x4b0
                __HAL_DSI_WRAPPER_DISABLE(hdsi);
 8001efa:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404
 8001efe:	f8d3 2404 	ldr.w	r2, [r3, #1028]	@ 0x404
 8001f02:	f002 0208 	and.w	r2, r2, #8
 8001f06:	9200      	str	r2, [sp, #0]
 8001f08:	9a00      	ldr	r2, [sp, #0]
                LTDC_LAYER(&hltdc, 0)->CFBAR = ((uint32_t)currFbBase) + 400 * 3;
 8001f0a:	f8d8 2000 	ldr.w	r2, [r8]
 8001f0e:	f8c2 00ac 	str.w	r0, [r2, #172]	@ 0xac
                LTDC->AWCR = ((ADJUSTED_WIDTH + 2) << 16) | 0x1E2;
 8001f12:	4837      	ldr	r0, [pc, #220]	@ (8001ff0 <HAL_DSI_EndOfRefreshCallback+0x134>)
 8001f14:	6106      	str	r6, [r0, #16]
                LTDC->TWCR = ((REAL_WIDTH + 2 + 1 - 1) << 16) | 0x1E3;
 8001f16:	4e37      	ldr	r6, [pc, #220]	@ (8001ff4 <HAL_DSI_EndOfRefreshCallback+0x138>)
 8001f18:	6146      	str	r6, [r0, #20]
                LTDC_LAYER(&hltdc, 0)->WHPCR = ((REAL_WIDTH + 2) << 16) | 3;
 8001f1a:	4837      	ldr	r0, [pc, #220]	@ (8001ff8 <HAL_DSI_EndOfRefreshCallback+0x13c>)
 8001f1c:	f8c2 0088 	str.w	r0, [r2, #136]	@ 0x88
                LTDC_LAYER(&hltdc, 0)->CFBLR = ((832 * 3) << 16) | ((REAL_WIDTH) * 3 + 3);
 8001f20:	4836      	ldr	r0, [pc, #216]	@ (8001ffc <HAL_DSI_EndOfRefreshCallback+0x140>)
 8001f22:	f8c2 00b0 	str.w	r0, [r2, #176]	@ 0xb0
                __HAL_LTDC_RELOAD_IMMEDIATE_CONFIG(&hltdc);
 8001f26:	6a51      	ldr	r1, [r2, #36]	@ 0x24
 8001f28:	f041 0101 	orr.w	r1, r1, #1
 8001f2c:	6251      	str	r1, [r2, #36]	@ 0x24
                __HAL_DSI_WRAPPER_ENABLE(hdsi);
 8001f2e:	9501      	str	r5, [sp, #4]
 8001f30:	f8d3 2404 	ldr.w	r2, [r3, #1028]	@ 0x404
 8001f34:	f042 0208 	orr.w	r2, r2, #8
 8001f38:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404
 8001f3c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 8001f40:	f003 0308 	and.w	r3, r3, #8
 8001f44:	9301      	str	r3, [sp, #4]
 8001f46:	9b01      	ldr	r3, [sp, #4]

                LCD_SetUpdateRegionRight(); //Set display column to 448-799
 8001f48:	f7ff ff74 	bl	8001e34 <LCD_SetUpdateRegionRight>
                updateRegion = 1;
 8001f4c:	2301      	movs	r3, #1

                HAL_DSI_Refresh(hdsi);
 8001f4e:	4620      	mov	r0, r4
                updateRegion = 1;
 8001f50:	f8c9 3000 	str.w	r3, [r9]
                    // Signal to the framework that display update has finished.
                    HAL::getInstance()->frontPorchEntered();
                }
            }
        }
    }
 8001f54:	b005      	add	sp, #20
 8001f56:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
                HAL_DSI_Refresh(hdsi);
 8001f5a:	f006 b9ee 	b.w	800833a <HAL_DSI_Refresh>
                __HAL_DSI_WRAPPER_DISABLE(hdsi);
 8001f5e:	6803      	ldr	r3, [r0, #0]
 8001f60:	2500      	movs	r5, #0
                LTDC_LAYER(&hltdc, 0)->CFBAR = (uint32_t)currFbBase;
 8001f62:	6838      	ldr	r0, [r7, #0]
                __HAL_DSI_WRAPPER_DISABLE(hdsi);
 8001f64:	9502      	str	r5, [sp, #8]
 8001f66:	f8d3 2404 	ldr.w	r2, [r3, #1028]	@ 0x404
                LTDC->AWCR = ((WIDTH + 2) << 16) | 0x1E2;
 8001f6a:	4c25      	ldr	r4, [pc, #148]	@ (8002000 <HAL_DSI_EndOfRefreshCallback+0x144>)
                __HAL_DSI_WRAPPER_DISABLE(hdsi);
 8001f6c:	f022 0208 	bic.w	r2, r2, #8
 8001f70:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404
 8001f74:	f8d3 2404 	ldr.w	r2, [r3, #1028]	@ 0x404
 8001f78:	f002 0208 	and.w	r2, r2, #8
 8001f7c:	9202      	str	r2, [sp, #8]
 8001f7e:	9a02      	ldr	r2, [sp, #8]
                LTDC_LAYER(&hltdc, 0)->CFBAR = (uint32_t)currFbBase;
 8001f80:	f8d8 2000 	ldr.w	r2, [r8]
 8001f84:	f8c2 00ac 	str.w	r0, [r2, #172]	@ 0xac
                LTDC->AWCR = ((WIDTH + 2) << 16) | 0x1E2;
 8001f88:	4819      	ldr	r0, [pc, #100]	@ (8001ff0 <HAL_DSI_EndOfRefreshCallback+0x134>)
 8001f8a:	6104      	str	r4, [r0, #16]
                LTDC->TWCR = ((WIDTH + 2 + 1) << 16) | 0x1E3;
 8001f8c:	f104 1401 	add.w	r4, r4, #65537	@ 0x10001
 8001f90:	6144      	str	r4, [r0, #20]
                LTDC_LAYER(&hltdc, 0)->WHPCR = ((WIDTH + 2) << 16) | 3;
 8001f92:	4819      	ldr	r0, [pc, #100]	@ (8001ff8 <HAL_DSI_EndOfRefreshCallback+0x13c>)
 8001f94:	f8c2 0088 	str.w	r0, [r2, #136]	@ 0x88
                LTDC_LAYER(&hltdc, 0)->CFBLR = (((832 * 3) << 16) | ((WIDTH * 3) + 3));
 8001f98:	4818      	ldr	r0, [pc, #96]	@ (8001ffc <HAL_DSI_EndOfRefreshCallback+0x140>)
 8001f9a:	f8c2 00b0 	str.w	r0, [r2, #176]	@ 0xb0
                GPIO::clear(GPIO::VSYNC_FREQ);
 8001f9e:	4628      	mov	r0, r5
                __HAL_LTDC_RELOAD_IMMEDIATE_CONFIG(&hltdc);
 8001fa0:	6a51      	ldr	r1, [r2, #36]	@ 0x24
 8001fa2:	f041 0101 	orr.w	r1, r1, #1
 8001fa6:	6251      	str	r1, [r2, #36]	@ 0x24
                __HAL_DSI_WRAPPER_ENABLE(hdsi);
 8001fa8:	9503      	str	r5, [sp, #12]
 8001faa:	f8d3 2404 	ldr.w	r2, [r3, #1028]	@ 0x404
 8001fae:	f042 0208 	orr.w	r2, r2, #8
 8001fb2:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404
 8001fb6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 8001fba:	f003 0308 	and.w	r3, r3, #8
 8001fbe:	9303      	str	r3, [sp, #12]
 8001fc0:	9b03      	ldr	r3, [sp, #12]
                GPIO::clear(GPIO::VSYNC_FREQ);
 8001fc2:	f7ff fcc5 	bl	8001950 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
                LCD_ReqEnable();
 8001fc6:	f7ff ff0f 	bl	8001de8 <LCD_ReqEnable>
        return instance;
 8001fca:	4b0e      	ldr	r3, [pc, #56]	@ (8002004 <HAL_DSI_EndOfRefreshCallback+0x148>)
                displayRefreshing = false;
 8001fcc:	7035      	strb	r5, [r6, #0]
 8001fce:	6818      	ldr	r0, [r3, #0]
                if (HAL::getInstance())
 8001fd0:	b128      	cbz	r0, 8001fde <HAL_DSI_EndOfRefreshCallback+0x122>
        allowDMATransfers();
 8001fd2:	6803      	ldr	r3, [r0, #0]
 8001fd4:	6a1b      	ldr	r3, [r3, #32]
    }
 8001fd6:	b005      	add	sp, #20
 8001fd8:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001fdc:	4718      	bx	r3
 8001fde:	b005      	add	sp, #20
 8001fe0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001fe4:	24000778 	.word	0x24000778
 8001fe8:	24000770 	.word	0x24000770
 8001fec:	01b201e2 	.word	0x01b201e2
 8001ff0:	50001000 	.word	0x50001000
 8001ff4:	019201e3 	.word	0x019201e3
 8001ff8:	01920003 	.word	0x01920003
 8001ffc:	09c004b3 	.word	0x09c004b3
 8002000:	019201e2 	.word	0x019201e2
 8002004:	24028e20 	.word	0x24028e20
 8002008:	24000774 	.word	0x24000774
 800200c:	24000414 	.word	0x24000414

08002010 <IdleTaskHook>:

    portBASE_TYPE IdleTaskHook(void* p)
    {
 8002010:	4601      	mov	r1, r0
 8002012:	b508      	push	{r3, lr}
        return instance;
 8002014:	4b03      	ldr	r3, [pc, #12]	@ (8002024 <IdleTaskHook+0x14>)
 8002016:	6818      	ldr	r0, [r3, #0]
        if ((int)p) //idle task sched out
 8002018:	b101      	cbz	r1, 800201c <IdleTaskHook+0xc>
        {
            touchgfx::HAL::getInstance()->setMCUActive(true);
 800201a:	2101      	movs	r1, #1
        }
        else //idle task sched in
        {
            touchgfx::HAL::getInstance()->setMCUActive(false);
 800201c:	f00f fb36 	bl	801168c <_ZN8touchgfx3HAL12setMCUActiveEb>
        }
        return pdTRUE;
    }
 8002020:	2001      	movs	r0, #1
 8002022:	bd08      	pop	{r3, pc}
 8002024:	24028e20 	.word	0x24028e20

08002028 <_GLOBAL__sub_I_displayRefreshing>:
        : cc_consumed(0),
 8002028:	4b03      	ldr	r3, [pc, #12]	@ (8002038 <_GLOBAL__sub_I_displayRefreshing+0x10>)
 800202a:	2200      	movs	r2, #0
 800202c:	605a      	str	r2, [r3, #4]
          cc_in(0)
 800202e:	609a      	str	r2, [r3, #8]
 8002030:	4a02      	ldr	r2, [pc, #8]	@ (800203c <_GLOBAL__sub_I_displayRefreshing+0x14>)
 8002032:	601a      	str	r2, [r3, #0]

}
 8002034:	4770      	bx	lr
 8002036:	bf00      	nop
 8002038:	24000760 	.word	0x24000760
 800203c:	080283a8 	.word	0x080283a8

08002040 <_ZNK20HardwareMJPEGDecoder21getCurrentFrameNumberEv>:
    virtual bool decodeThumbnail(uint32_t frameno, uint8_t* buffer, uint16_t width, uint16_t height);
    virtual void gotoFrame(uint32_t frameno);
    virtual uint32_t getCurrentFrameNumber() const
    {
        return frameNumber;
    }
 8002040:	6940      	ldr	r0, [r0, #20]
 8002042:	4770      	bx	lr

08002044 <_ZN20HardwareMJPEGDecoder12getLastErrorEv>:
    }

    virtual AVIErrors getLastError()
    {
        return lastError;
    }
 8002044:	f890 0040 	ldrb.w	r0, [r0, #64]	@ 0x40
 8002048:	4770      	bx	lr

0800204a <_ZN20HardwareMJPEGDecoder8hasVideoEv>:
    readVideoHeader();
}

bool HardwareMJPEGDecoder::hasVideo()
{
    return (reader != 0) || (movieData != 0);
 800204a:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800204c:	b923      	cbnz	r3, 8002058 <_ZN20HardwareMJPEGDecoder8hasVideoEv+0xe>
 800204e:	6ac0      	ldr	r0, [r0, #44]	@ 0x2c
 8002050:	3800      	subs	r0, #0
 8002052:	bf18      	it	ne
 8002054:	2001      	movne	r0, #1
 8002056:	4770      	bx	lr
 8002058:	2001      	movs	r0, #1
}
 800205a:	4770      	bx	lr

0800205c <_ZN20HardwareMJPEGDecoder17getNumberOfFramesEv>:
}

uint32_t HardwareMJPEGDecoder::getNumberOfFrames()
{
    return videoInfo.number_of_frames;
}
 800205c:	6880      	ldr	r0, [r0, #8]
 800205e:	4770      	bx	lr

08002060 <_ZN20HardwareMJPEGDecoder14setRepeatVideoEb>:

void HardwareMJPEGDecoder::setRepeatVideo(bool repeat)
{

}
 8002060:	4770      	bx	lr

08002062 <_ZN20HardwareMJPEGDecoder12getVideoInfoEPN8touchgfx16VideoInformationE>:

void HardwareMJPEGDecoder::getVideoInfo(touchgfx::VideoInformation* data)
{
    *data = videoInfo;
 8002062:	3004      	adds	r0, #4
{
 8002064:	b510      	push	{r4, lr}
 8002066:	460c      	mov	r4, r1
    *data = videoInfo;
 8002068:	c80f      	ldmia	r0, {r0, r1, r2, r3}
 800206a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 800206e:	bd10      	pop	{r4, pc}

08002070 <_ZN20HardwareMJPEGDecoderD1Ev>:
class HardwareMJPEGDecoder : public MJPEGDecoder
 8002070:	4770      	bx	lr
	...

08002074 <_ZN20HardwareMJPEGDecoder15decodeThumbnailEmPhtt>:
{
 8002074:	b508      	push	{r3, lr}
    assert(0);
 8002076:	4a03      	ldr	r2, [pc, #12]	@ (8002084 <_ZN20HardwareMJPEGDecoder15decodeThumbnailEmPhtt+0x10>)
 8002078:	f44f 71e2 	mov.w	r1, #452	@ 0x1c4
 800207c:	4b02      	ldr	r3, [pc, #8]	@ (8002088 <_ZN20HardwareMJPEGDecoder15decodeThumbnailEmPhtt+0x14>)
 800207e:	4803      	ldr	r0, [pc, #12]	@ (800208c <_ZN20HardwareMJPEGDecoder15decodeThumbnailEmPhtt+0x18>)
 8002080:	f025 f8fe 	bl	8027280 <__assert_func>
 8002084:	080286c4 	.word	0x080286c4
 8002088:	0802aacb 	.word	0x0802aacb
 800208c:	0802871f 	.word	0x0802871f

08002090 <_ZN20HardwareMJPEGDecoderD0Ev>:
 8002090:	b510      	push	{r4, lr}
 8002092:	4604      	mov	r4, r0
 8002094:	2148      	movs	r1, #72	@ 0x48
 8002096:	f024 fd7a 	bl	8026b8e <_ZdlPvj>
 800209a:	4620      	mov	r0, r4
 800209c:	bd10      	pop	{r4, pc}
	...

080020a0 <_ZN20HardwareMJPEGDecoderC1Ev>:
    : frameNumber(0), currentMovieOffset(0), indexOffset(0), firstFrameOffset(0), lastFrameEnd(0), movieLength(0), movieData(0),
 80020a0:	2200      	movs	r2, #0
      reader(0), aviBuffer(0), aviBufferLength(0), aviBufferStartOffset(0), lastError(AVI_NO_ERROR)
 80020a2:	4b0e      	ldr	r3, [pc, #56]	@ (80020dc <_ZN20HardwareMJPEGDecoderC1Ev+0x3c>)
HardwareMJPEGDecoder::HardwareMJPEGDecoder()
 80020a4:	b510      	push	{r4, lr}
    semDecodingDone = SEM_CREATE();
 80020a6:	4611      	mov	r1, r2
HardwareMJPEGDecoder::HardwareMJPEGDecoder()
 80020a8:	4604      	mov	r4, r0
      reader(0), aviBuffer(0), aviBufferLength(0), aviBufferStartOffset(0), lastError(AVI_NO_ERROR)
 80020aa:	6003      	str	r3, [r0, #0]
 80020ac:	63c2      	str	r2, [r0, #60]	@ 0x3c
 80020ae:	f880 2040 	strb.w	r2, [r0, #64]	@ 0x40
    : frameNumber(0), currentMovieOffset(0), indexOffset(0), firstFrameOffset(0), lastFrameEnd(0), movieLength(0), movieData(0),
 80020b2:	e9c0 2205 	strd	r2, r2, [r0, #20]
 80020b6:	e9c0 2207 	strd	r2, r2, [r0, #28]
 80020ba:	e9c0 2209 	strd	r2, r2, [r0, #36]	@ 0x24
      reader(0), aviBuffer(0), aviBufferLength(0), aviBufferStartOffset(0), lastError(AVI_NO_ERROR)
 80020be:	e9c0 220b 	strd	r2, r2, [r0, #44]	@ 0x2c
 80020c2:	e9c0 220d 	strd	r2, r2, [r0, #52]	@ 0x34
    videoInfo.frame_width = 0;
 80020c6:	e9c0 2203 	strd	r2, r2, [r0, #12]
    videoInfo.number_of_frames = 0;
 80020ca:	e9c0 2201 	strd	r2, r2, [r0, #4]
    semDecodingDone = SEM_CREATE();
 80020ce:	2001      	movs	r0, #1
 80020d0:	f00a fc5e 	bl	800c990 <osSemaphoreNew>
 80020d4:	4b02      	ldr	r3, [pc, #8]	@ (80020e0 <_ZN20HardwareMJPEGDecoderC1Ev+0x40>)
 80020d6:	6018      	str	r0, [r3, #0]
}
 80020d8:	4620      	mov	r0, r4
 80020da:	bd10      	pop	{r4, pc}
 80020dc:	08028950 	.word	0x08028950
 80020e0:	24000798 	.word	0x24000798

080020e4 <_ZN20HardwareMJPEGDecoder7compareEmPKcm>:
{
 80020e4:	b410      	push	{r4}
 80020e6:	460c      	mov	r4, r1
 80020e8:	4611      	mov	r1, r2
 80020ea:	461a      	mov	r2, r3
    if (reader != 0)
 80020ec:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 80020ee:	b13b      	cbz	r3, 8002100 <_ZN20HardwareMJPEGDecoder7compareEmPKcm+0x1c>
        src = reinterpret_cast<const char*>(aviBuffer + (offset - aviBufferStartOffset));
 80020f0:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 80020f2:	6b40      	ldr	r0, [r0, #52]	@ 0x34
 80020f4:	1ae4      	subs	r4, r4, r3
        src = (const char*)movieData + offset;
 80020f6:	4420      	add	r0, r4
}
 80020f8:	f85d 4b04 	ldr.w	r4, [sp], #4
    return strncmp(src, str, num);
 80020fc:	f025 bb64 	b.w	80277c8 <strncmp>
        src = (const char*)movieData + offset;
 8002100:	6ac0      	ldr	r0, [r0, #44]	@ 0x2c
 8002102:	e7f8      	b.n	80020f6 <_ZN20HardwareMJPEGDecoder7compareEmPKcm+0x12>

08002104 <_ZN20HardwareMJPEGDecoder6getU32Em>:
    if (reader != 0)
 8002104:	6b03      	ldr	r3, [r0, #48]	@ 0x30
{
 8002106:	b510      	push	{r4, lr}
    if (reader != 0)
 8002108:	b173      	cbz	r3, 8002128 <_ZN20HardwareMJPEGDecoder6getU32Em+0x24>
        const uint32_t index = offset - aviBufferStartOffset;
 800210a:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
        return aviBuffer[index + 0] | (aviBuffer[index + 1] << 8) | (aviBuffer[index + 2] << 16) | (aviBuffer[index + 3] << 24);
 800210c:	6b42      	ldr	r2, [r0, #52]	@ 0x34
        const uint32_t index = offset - aviBufferStartOffset;
 800210e:	1ac9      	subs	r1, r1, r3
        return aviBuffer[index + 0] | (aviBuffer[index + 1] << 8) | (aviBuffer[index + 2] << 16) | (aviBuffer[index + 3] << 24);
 8002110:	1853      	adds	r3, r2, r1
 8002112:	5c52      	ldrb	r2, [r2, r1]
 8002114:	7898      	ldrb	r0, [r3, #2]
 8002116:	785c      	ldrb	r4, [r3, #1]
 8002118:	0400      	lsls	r0, r0, #16
 800211a:	ea40 2004 	orr.w	r0, r0, r4, lsl #8
        val |= d[2] << 16;
 800211e:	4310      	orrs	r0, r2
        val |= d[3] << 24;
 8002120:	78db      	ldrb	r3, [r3, #3]
 8002122:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
}
 8002126:	bd10      	pop	{r4, pc}
        volatile const uint8_t* const d = movieData + offset;
 8002128:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
 800212a:	1853      	adds	r3, r2, r1
        val |= d[0];
 800212c:	5c52      	ldrb	r2, [r2, r1]
        val |= d[1] << 8;
 800212e:	7859      	ldrb	r1, [r3, #1]
        val |= d[2] << 16;
 8002130:	7898      	ldrb	r0, [r3, #2]
 8002132:	0400      	lsls	r0, r0, #16
 8002134:	ea40 2001 	orr.w	r0, r0, r1, lsl #8
 8002138:	e7f1      	b.n	800211e <_ZN20HardwareMJPEGDecoder6getU32Em+0x1a>

0800213a <_ZN20HardwareMJPEGDecoder6getU16Em>:
    if (reader != 0)
 800213a:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800213c:	b143      	cbz	r3, 8002150 <_ZN20HardwareMJPEGDecoder6getU16Em+0x16>
        const uint32_t index = offset - aviBufferStartOffset;
 800213e:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 8002140:	1ac9      	subs	r1, r1, r3
        return aviBuffer[index + 0] | (aviBuffer[index + 1] << 8);
 8002142:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8002144:	185a      	adds	r2, r3, r1
 8002146:	5c58      	ldrb	r0, [r3, r1]
 8002148:	7852      	ldrb	r2, [r2, #1]
 800214a:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
 800214e:	4770      	bx	lr
        volatile const uint8_t* const d = movieData + offset;
 8002150:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8002152:	185a      	adds	r2, r3, r1
        val |= d[0];
 8002154:	5c58      	ldrb	r0, [r3, r1]
        val |= d[1] << 8;
 8002156:	7853      	ldrb	r3, [r2, #1]
 8002158:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
}
 800215c:	4770      	bx	lr
	...

08002160 <_ZN20HardwareMJPEGDecoder8readDataEmm>:
{
 8002160:	b570      	push	{r4, r5, r6, lr}
 8002162:	4604      	mov	r4, r0
    if (reader != 0)
 8002164:	6b00      	ldr	r0, [r0, #48]	@ 0x30
{
 8002166:	460d      	mov	r5, r1
 8002168:	4616      	mov	r6, r2
    if (reader != 0)
 800216a:	b1d8      	cbz	r0, 80021a4 <_ZN20HardwareMJPEGDecoder8readDataEmm+0x44>
        if (length > aviBufferLength)
 800216c:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800216e:	4293      	cmp	r3, r2
 8002170:	d208      	bcs.n	8002184 <_ZN20HardwareMJPEGDecoder8readDataEmm+0x24>
            lastError = AVI_ERROR_FILE_BUFFER_TO_SMALL;
 8002172:	2309      	movs	r3, #9
            assert(!"Buffer to small");
 8002174:	4a0d      	ldr	r2, [pc, #52]	@ (80021ac <_ZN20HardwareMJPEGDecoder8readDataEmm+0x4c>)
 8002176:	219e      	movs	r1, #158	@ 0x9e
 8002178:	480d      	ldr	r0, [pc, #52]	@ (80021b0 <_ZN20HardwareMJPEGDecoder8readDataEmm+0x50>)
            lastError = AVI_ERROR_FILE_BUFFER_TO_SMALL;
 800217a:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
            assert(!"Buffer to small");
 800217e:	4b0d      	ldr	r3, [pc, #52]	@ (80021b4 <_ZN20HardwareMJPEGDecoder8readDataEmm+0x54>)
 8002180:	f025 f87e 	bl	8027280 <__assert_func>
        reader->seek(offset);
 8002184:	6803      	ldr	r3, [r0, #0]
 8002186:	68db      	ldr	r3, [r3, #12]
 8002188:	4798      	blx	r3
        if (!reader->readData(aviBuffer, length))
 800218a:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 800218c:	4632      	mov	r2, r6
 800218e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8002190:	6803      	ldr	r3, [r0, #0]
 8002192:	691b      	ldr	r3, [r3, #16]
 8002194:	4798      	blx	r3
 8002196:	b910      	cbnz	r0, 800219e <_ZN20HardwareMJPEGDecoder8readDataEmm+0x3e>
            lastError = AVI_ERROR_EOF_REACHED;
 8002198:	230d      	movs	r3, #13
 800219a:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
        return aviBuffer;
 800219e:	6b60      	ldr	r0, [r4, #52]	@ 0x34
        aviBufferStartOffset = offset;
 80021a0:	63e5      	str	r5, [r4, #60]	@ 0x3c
}
 80021a2:	bd70      	pop	{r4, r5, r6, pc}
    return movieData + offset;
 80021a4:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 80021a6:	4408      	add	r0, r1
 80021a8:	e7fb      	b.n	80021a2 <_ZN20HardwareMJPEGDecoder8readDataEmm+0x42>
 80021aa:	bf00      	nop
 80021ac:	0802878a 	.word	0x0802878a
 80021b0:	0802871f 	.word	0x0802871f
 80021b4:	08028777 	.word	0x08028777

080021b8 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv>:
{
 80021b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    assert((frameNumber > 0) && "HardwareMJPEGDecoder decoding without frame data!");
 80021bc:	6943      	ldr	r3, [r0, #20]
{
 80021be:	4604      	mov	r4, r0
    assert((frameNumber > 0) && "HardwareMJPEGDecoder decoding without frame data!");
 80021c0:	b92b      	cbnz	r3, 80021ce <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x16>
 80021c2:	4b22      	ldr	r3, [pc, #136]	@ (800224c <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x94>)
 80021c4:	21e4      	movs	r1, #228	@ 0xe4
 80021c6:	4a22      	ldr	r2, [pc, #136]	@ (8002250 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x98>)
 80021c8:	4822      	ldr	r0, [pc, #136]	@ (8002254 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x9c>)
 80021ca:	f025 f859 	bl	8027280 <__assert_func>
    readData(currentMovieOffset, 8);
 80021ce:	2208      	movs	r2, #8
 80021d0:	6981      	ldr	r1, [r0, #24]
 80021d2:	f7ff ffc5 	bl	8002160 <_ZN20HardwareMJPEGDecoder8readDataEmm>
    uint32_t chunkSize = getU32(currentMovieOffset + 4);
 80021d6:	69a1      	ldr	r1, [r4, #24]
        if (streamNo == STREAM0 && chunkType == TYPEDC)
 80021d8:	f243 0630 	movw	r6, #12336	@ 0x3030
 80021dc:	f246 3764 	movw	r7, #25444	@ 0x6364
    uint32_t chunkSize = getU32(currentMovieOffset + 4);
 80021e0:	3104      	adds	r1, #4
 80021e2:	4620      	mov	r0, r4
 80021e4:	f7ff ff8e 	bl	8002104 <_ZN20HardwareMJPEGDecoder6getU32Em>
    while (currentMovieOffset + 8 + chunkSize < movieLength)
 80021e8:	69a3      	ldr	r3, [r4, #24]
 80021ea:	4418      	add	r0, r3
 80021ec:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80021ee:	f100 0208 	add.w	r2, r0, #8
 80021f2:	429a      	cmp	r2, r3
 80021f4:	d306      	bcc.n	8002204 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x4c>
    frameNumber = 1;
 80021f6:	2301      	movs	r3, #1
    return false;
 80021f8:	2000      	movs	r0, #0
    frameNumber = 1;
 80021fa:	6163      	str	r3, [r4, #20]
    currentMovieOffset = firstFrameOffset; /* start over */
 80021fc:	6a23      	ldr	r3, [r4, #32]
 80021fe:	61a3      	str	r3, [r4, #24]
}
 8002200:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        frameNumber++;
 8002204:	6963      	ldr	r3, [r4, #20]
        currentMovieOffset = (currentMovieOffset + 1) & 0xFFFFFFFE; /* pad to next word */
 8002206:	f100 0109 	add.w	r1, r0, #9
        readData(currentMovieOffset, 8);
 800220a:	2208      	movs	r2, #8
 800220c:	4620      	mov	r0, r4
        frameNumber++;
 800220e:	3301      	adds	r3, #1
        currentMovieOffset = (currentMovieOffset + 1) & 0xFFFFFFFE; /* pad to next word */
 8002210:	f021 0101 	bic.w	r1, r1, #1
        frameNumber++;
 8002214:	6163      	str	r3, [r4, #20]
        currentMovieOffset = (currentMovieOffset + 1) & 0xFFFFFFFE; /* pad to next word */
 8002216:	61a1      	str	r1, [r4, #24]
        readData(currentMovieOffset, 8);
 8002218:	f7ff ffa2 	bl	8002160 <_ZN20HardwareMJPEGDecoder8readDataEmm>
        uint32_t streamNo  = getU16(currentMovieOffset);
 800221c:	f8d4 9018 	ldr.w	r9, [r4, #24]
 8002220:	4620      	mov	r0, r4
 8002222:	4649      	mov	r1, r9
 8002224:	f7ff ff89 	bl	800213a <_ZN20HardwareMJPEGDecoder6getU16Em>
        uint32_t chunkType = getU16(currentMovieOffset + 2);
 8002228:	f109 0102 	add.w	r1, r9, #2
        uint32_t streamNo  = getU16(currentMovieOffset);
 800222c:	4680      	mov	r8, r0
        uint32_t chunkType = getU16(currentMovieOffset + 2);
 800222e:	4620      	mov	r0, r4
 8002230:	f7ff ff83 	bl	800213a <_ZN20HardwareMJPEGDecoder6getU16Em>
        chunkSize = getU32(currentMovieOffset + 4);
 8002234:	f109 0104 	add.w	r1, r9, #4
        uint32_t chunkType = getU16(currentMovieOffset + 2);
 8002238:	4605      	mov	r5, r0
        chunkSize = getU32(currentMovieOffset + 4);
 800223a:	4620      	mov	r0, r4
 800223c:	f7ff ff62 	bl	8002104 <_ZN20HardwareMJPEGDecoder6getU32Em>
        if (streamNo == STREAM0 && chunkType == TYPEDC)
 8002240:	45b0      	cmp	r8, r6
 8002242:	d1d1      	bne.n	80021e8 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x30>
 8002244:	42bd      	cmp	r5, r7
 8002246:	d1cf      	bne.n	80021e8 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x30>
            return true;
 8002248:	2001      	movs	r0, #1
 800224a:	e7d9      	b.n	8002200 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x48>
 800224c:	080287cc 	.word	0x080287cc
 8002250:	08028815 	.word	0x08028815
 8002254:	0802871f 	.word	0x0802871f

08002258 <_ZN20HardwareMJPEGDecoder9gotoFrameEm>:
    if (frameNumber == 0)
 8002258:	2901      	cmp	r1, #1
    if (frameNumber > getNumberOfFrames())
 800225a:	6803      	ldr	r3, [r0, #0]
 800225c:	bf38      	it	cc
 800225e:	2101      	movcc	r1, #1
 8002260:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
{
 8002262:	b570      	push	{r4, r5, r6, lr}
 8002264:	460d      	mov	r5, r1
 8002266:	4604      	mov	r4, r0
    if (frameNumber > getNumberOfFrames())
 8002268:	4798      	blx	r3
 800226a:	42a8      	cmp	r0, r5
 800226c:	d204      	bcs.n	8002278 <_ZN20HardwareMJPEGDecoder9gotoFrameEm+0x20>
        frameNumber = getNumberOfFrames();
 800226e:	6823      	ldr	r3, [r4, #0]
 8002270:	4620      	mov	r0, r4
 8002272:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002274:	4798      	blx	r3
 8002276:	4605      	mov	r5, r0
    uint32_t offset = indexOffset + 8 + (frameNumber - 1) * 16;
 8002278:	1e6b      	subs	r3, r5, #1
 800227a:	69e6      	ldr	r6, [r4, #28]
    readData(offset, 16);
 800227c:	2210      	movs	r2, #16
 800227e:	4620      	mov	r0, r4
    uint32_t offset = indexOffset + 8 + (frameNumber - 1) * 16;
 8002280:	eb06 1603 	add.w	r6, r6, r3, lsl #4
    readData(offset, 16);
 8002284:	f106 0108 	add.w	r1, r6, #8
 8002288:	f7ff ff6a 	bl	8002160 <_ZN20HardwareMJPEGDecoder8readDataEmm>
    currentMovieOffset = getU32(offset + 8) + firstFrameOffset - 4;
 800228c:	f106 0110 	add.w	r1, r6, #16
 8002290:	4620      	mov	r0, r4
 8002292:	f7ff ff37 	bl	8002104 <_ZN20HardwareMJPEGDecoder6getU32Em>
 8002296:	6a23      	ldr	r3, [r4, #32]
 8002298:	3b04      	subs	r3, #4
 800229a:	4403      	add	r3, r0
    this->frameNumber = frameNumber;
 800229c:	e9c4 5305 	strd	r5, r3, [r4, #20]
}
 80022a0:	bd70      	pop	{r4, r5, r6, pc}
	...

080022a4 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv>:
    currentMovieOffset = 0;
 80022a4:	2100      	movs	r1, #0
    readData(0, 72);
 80022a6:	2248      	movs	r2, #72	@ 0x48
{
 80022a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80022ac:	4604      	mov	r4, r0
    currentMovieOffset = 0;
 80022ae:	6181      	str	r1, [r0, #24]
    lastError = AVI_NO_ERROR;
 80022b0:	f880 1040 	strb.w	r1, [r0, #64]	@ 0x40
    readData(0, 72);
 80022b4:	f7ff ff54 	bl	8002160 <_ZN20HardwareMJPEGDecoder8readDataEmm>
    if (compare(currentMovieOffset, "RIFF", 4))
 80022b8:	69a6      	ldr	r6, [r4, #24]
 80022ba:	2304      	movs	r3, #4
 80022bc:	4a63      	ldr	r2, [pc, #396]	@ (800244c <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1a8>)
 80022be:	4631      	mov	r1, r6
 80022c0:	4620      	mov	r0, r4
 80022c2:	f7ff ff0f 	bl	80020e4 <_ZN20HardwareMJPEGDecoder7compareEmPKcm>
 80022c6:	b148      	cbz	r0, 80022dc <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x38>
        lastError = AVI_ERROR_NOT_RIFF;
 80022c8:	2303      	movs	r3, #3
        assert(!"RIFF header not found");
 80022ca:	4a61      	ldr	r2, [pc, #388]	@ (8002450 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1ac>)
 80022cc:	f44f 7196 	mov.w	r1, #300	@ 0x12c
        lastError = AVI_ERROR_NOT_RIFF;
 80022d0:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
        assert(!"RIFF header not found");
 80022d4:	4b5f      	ldr	r3, [pc, #380]	@ (8002454 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1b0>)
        assert(!"AVI header not found");
 80022d6:	4860      	ldr	r0, [pc, #384]	@ (8002458 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1b4>)
 80022d8:	f024 ffd2 	bl	8027280 <__assert_func>
    currentMovieOffset += 8;
 80022dc:	f106 0108 	add.w	r1, r6, #8
    if (compare(currentMovieOffset, "AVI ", 4))
 80022e0:	2304      	movs	r3, #4
 80022e2:	4a5e      	ldr	r2, [pc, #376]	@ (800245c <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1b8>)
 80022e4:	4620      	mov	r0, r4
    currentMovieOffset += 8;
 80022e6:	61a1      	str	r1, [r4, #24]
    if (compare(currentMovieOffset, "AVI ", 4))
 80022e8:	f7ff fefc 	bl	80020e4 <_ZN20HardwareMJPEGDecoder7compareEmPKcm>
 80022ec:	b138      	cbz	r0, 80022fe <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x5a>
        lastError = AVI_ERROR_AVI_HEADER_NOT_FOUND;
 80022ee:	2304      	movs	r3, #4
        assert(!"AVI header not found");
 80022f0:	4a57      	ldr	r2, [pc, #348]	@ (8002450 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1ac>)
 80022f2:	f44f 719a 	mov.w	r1, #308	@ 0x134
        lastError = AVI_ERROR_AVI_HEADER_NOT_FOUND;
 80022f6:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
        assert(!"AVI header not found");
 80022fa:	4b59      	ldr	r3, [pc, #356]	@ (8002460 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1bc>)
 80022fc:	e7eb      	b.n	80022d6 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x32>
    currentMovieOffset += 4;
 80022fe:	f106 010c 	add.w	r1, r6, #12
    if (compare(currentMovieOffset, "LIST", 4))
 8002302:	2304      	movs	r3, #4
 8002304:	4a57      	ldr	r2, [pc, #348]	@ (8002464 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1c0>)
 8002306:	4620      	mov	r0, r4
    currentMovieOffset += 4;
 8002308:	61a1      	str	r1, [r4, #24]
    if (compare(currentMovieOffset, "LIST", 4))
 800230a:	f7ff feeb 	bl	80020e4 <_ZN20HardwareMJPEGDecoder7compareEmPKcm>
 800230e:	4607      	mov	r7, r0
 8002310:	b138      	cbz	r0, 8002322 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x7e>
        lastError = AVI_ERROR_AVI_LIST_NOT_FOUND;
 8002312:	2305      	movs	r3, #5
        assert(!"AVI LIST not found");
 8002314:	4a4e      	ldr	r2, [pc, #312]	@ (8002450 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1ac>)
 8002316:	f240 113b 	movw	r1, #315	@ 0x13b
        lastError = AVI_ERROR_AVI_LIST_NOT_FOUND;
 800231a:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
        assert(!"AVI LIST not found");
 800231e:	4b52      	ldr	r3, [pc, #328]	@ (8002468 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1c4>)
 8002320:	e7d9      	b.n	80022d6 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x32>
    const uint32_t aviListSize = getU32(currentMovieOffset + 4);
 8002322:	f106 0110 	add.w	r1, r6, #16
 8002326:	4620      	mov	r0, r4
 8002328:	f7ff feec 	bl	8002104 <_ZN20HardwareMJPEGDecoder6getU32Em>
    assert(aviListSize);
 800232c:	4605      	mov	r5, r0
 800232e:	b920      	cbnz	r0, 800233a <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x96>
 8002330:	4b4e      	ldr	r3, [pc, #312]	@ (800246c <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1c8>)
 8002332:	f240 1141 	movw	r1, #321	@ 0x141
 8002336:	4a46      	ldr	r2, [pc, #280]	@ (8002450 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1ac>)
 8002338:	e7cd      	b.n	80022d6 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x32>
    uint32_t offset =  currentMovieOffset + 8;
 800233a:	f106 0814 	add.w	r8, r6, #20
    if (compare(offset, "hdrl", 4))
 800233e:	2304      	movs	r3, #4
 8002340:	4a4b      	ldr	r2, [pc, #300]	@ (8002470 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1cc>)
 8002342:	4620      	mov	r0, r4
 8002344:	4641      	mov	r1, r8
 8002346:	f7ff fecd 	bl	80020e4 <_ZN20HardwareMJPEGDecoder7compareEmPKcm>
 800234a:	2800      	cmp	r0, #0
 800234c:	d049      	beq.n	80023e2 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x13e>
        lastError = AVI_ERROR_AVI_HDRL_NOT_FOUND;
 800234e:	2306      	movs	r3, #6
 8002350:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
    if (compare(offset, "avih", 4))
 8002354:	2304      	movs	r3, #4
 8002356:	4a47      	ldr	r2, [pc, #284]	@ (8002474 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1d0>)
 8002358:	f106 0118 	add.w	r1, r6, #24
 800235c:	4620      	mov	r0, r4
 800235e:	f7ff fec1 	bl	80020e4 <_ZN20HardwareMJPEGDecoder7compareEmPKcm>
 8002362:	2800      	cmp	r0, #0
 8002364:	d03f      	beq.n	80023e6 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x142>
        lastError = AVI_ERROR_AVI_AVIH_NOT_FOUND;
 8002366:	2307      	movs	r3, #7
 8002368:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
    uint32_t listOffset = aviListOffset + aviListSize + 8;
 800236c:	4445      	add	r5, r8
    while (compare(listOffset + 8, "movi", 4) && (lastError == AVI_NO_ERROR) && listOffset < movieLength)
 800236e:	4f42      	ldr	r7, [pc, #264]	@ (8002478 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1d4>)
    readData(listOffset, 12);
 8002370:	220c      	movs	r2, #12
 8002372:	4620      	mov	r0, r4
 8002374:	4629      	mov	r1, r5
 8002376:	f7ff fef3 	bl	8002160 <_ZN20HardwareMJPEGDecoder8readDataEmm>
    while (compare(listOffset + 8, "movi", 4) && (lastError == AVI_NO_ERROR) && listOffset < movieLength)
 800237a:	f105 0608 	add.w	r6, r5, #8
 800237e:	2304      	movs	r3, #4
 8002380:	463a      	mov	r2, r7
 8002382:	4620      	mov	r0, r4
 8002384:	4631      	mov	r1, r6
 8002386:	f7ff fead 	bl	80020e4 <_ZN20HardwareMJPEGDecoder7compareEmPKcm>
 800238a:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 800238e:	2800      	cmp	r0, #0
 8002390:	d048      	beq.n	8002424 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x180>
 8002392:	2b00      	cmp	r3, #0
 8002394:	d148      	bne.n	8002428 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x184>
 8002396:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8002398:	42ab      	cmp	r3, r5
 800239a:	d849      	bhi.n	8002430 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x18c>
    currentMovieOffset = listOffset + 8 + 4; /* skip LIST and 'movi' */
 800239c:	f105 030c 	add.w	r3, r5, #12
    lastFrameEnd = listOffset + 8 + getU32(listOffset + 4);
 80023a0:	3504      	adds	r5, #4
 80023a2:	4620      	mov	r0, r4
    currentMovieOffset = listOffset + 8 + 4; /* skip LIST and 'movi' */
 80023a4:	61a3      	str	r3, [r4, #24]
    lastFrameEnd = listOffset + 8 + getU32(listOffset + 4);
 80023a6:	4629      	mov	r1, r5
 80023a8:	f7ff feac 	bl	8002104 <_ZN20HardwareMJPEGDecoder6getU32Em>
 80023ac:	4430      	add	r0, r6
    const uint32_t listSize = getU32(listOffset + 4) + 8;
 80023ae:	4629      	mov	r1, r5
    lastFrameEnd = listOffset + 8 + getU32(listOffset + 4);
 80023b0:	6260      	str	r0, [r4, #36]	@ 0x24
    const uint32_t listSize = getU32(listOffset + 4) + 8;
 80023b2:	4620      	mov	r0, r4
 80023b4:	f7ff fea6 	bl	8002104 <_ZN20HardwareMJPEGDecoder6getU32Em>
    listOffset += listSize;
 80023b8:	4406      	add	r6, r0
    readData(listOffset, 4);
 80023ba:	2204      	movs	r2, #4
 80023bc:	4620      	mov	r0, r4
 80023be:	4631      	mov	r1, r6
 80023c0:	f7ff fece 	bl	8002160 <_ZN20HardwareMJPEGDecoder8readDataEmm>
    if (!compare(listOffset, "idx1", 4))
 80023c4:	2304      	movs	r3, #4
 80023c6:	4a2d      	ldr	r2, [pc, #180]	@ (800247c <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1d8>)
 80023c8:	4631      	mov	r1, r6
 80023ca:	4620      	mov	r0, r4
 80023cc:	f7ff fe8a 	bl	80020e4 <_ZN20HardwareMJPEGDecoder7compareEmPKcm>
 80023d0:	2800      	cmp	r0, #0
 80023d2:	d138      	bne.n	8002446 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1a2>
    frameNumber = 1; /* next frame number is 1 */
 80023d4:	2301      	movs	r3, #1
        indexOffset = listOffset;
 80023d6:	61e6      	str	r6, [r4, #28]
    frameNumber = 1; /* next frame number is 1 */
 80023d8:	6163      	str	r3, [r4, #20]
    firstFrameOffset = currentMovieOffset;
 80023da:	69a3      	ldr	r3, [r4, #24]
 80023dc:	6223      	str	r3, [r4, #32]
}
 80023de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    bool foundFrame = true;
 80023e2:	2701      	movs	r7, #1
 80023e4:	e7b6      	b.n	8002354 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0xb0>
    if (foundFrame)
 80023e6:	2f00      	cmp	r7, #0
 80023e8:	d0c0      	beq.n	800236c <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0xc8>
        videoInfo.ms_between_frames = getU32(offset) / 1000;
 80023ea:	f106 0120 	add.w	r1, r6, #32
 80023ee:	4620      	mov	r0, r4
 80023f0:	f7ff fe88 	bl	8002104 <_ZN20HardwareMJPEGDecoder6getU32Em>
 80023f4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
        videoInfo.number_of_frames = getU32(offset + 16);
 80023f8:	f106 0130 	add.w	r1, r6, #48	@ 0x30
        videoInfo.ms_between_frames = getU32(offset) / 1000;
 80023fc:	fbb0 f0f3 	udiv	r0, r0, r3
 8002400:	6060      	str	r0, [r4, #4]
        videoInfo.number_of_frames = getU32(offset + 16);
 8002402:	4620      	mov	r0, r4
 8002404:	f7ff fe7e 	bl	8002104 <_ZN20HardwareMJPEGDecoder6getU32Em>
        videoInfo.frame_width = getU32(offset + 32);
 8002408:	f106 0140 	add.w	r1, r6, #64	@ 0x40
        videoInfo.number_of_frames = getU32(offset + 16);
 800240c:	60a0      	str	r0, [r4, #8]
        videoInfo.frame_width = getU32(offset + 32);
 800240e:	4620      	mov	r0, r4
 8002410:	f7ff fe78 	bl	8002104 <_ZN20HardwareMJPEGDecoder6getU32Em>
        videoInfo.frame_height = getU32(offset + 36);
 8002414:	f106 0144 	add.w	r1, r6, #68	@ 0x44
        videoInfo.frame_width = getU32(offset + 32);
 8002418:	60e0      	str	r0, [r4, #12]
        videoInfo.frame_height = getU32(offset + 36);
 800241a:	4620      	mov	r0, r4
 800241c:	f7ff fe72 	bl	8002104 <_ZN20HardwareMJPEGDecoder6getU32Em>
 8002420:	6120      	str	r0, [r4, #16]
 8002422:	e7a3      	b.n	800236c <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0xc8>
    if (lastError != AVI_NO_ERROR)
 8002424:	2b00      	cmp	r3, #0
 8002426:	d0b9      	beq.n	800239c <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0xf8>
        lastError = AVI_ERROR_MOVI_NOT_FOUND;
 8002428:	230a      	movs	r3, #10
        lastError = AVI_ERROR_IDX1_NOT_FOUND;
 800242a:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
        return;
 800242e:	e7d6      	b.n	80023de <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x13a>
        const uint32_t listSize = getU32(listOffset + 4) + 8;
 8002430:	1d29      	adds	r1, r5, #4
 8002432:	4620      	mov	r0, r4
 8002434:	f7ff fe66 	bl	8002104 <_ZN20HardwareMJPEGDecoder6getU32Em>
        listOffset += listSize;
 8002438:	1985      	adds	r5, r0, r6
        readData(listOffset, 12);
 800243a:	220c      	movs	r2, #12
 800243c:	4620      	mov	r0, r4
 800243e:	4629      	mov	r1, r5
 8002440:	f7ff fe8e 	bl	8002160 <_ZN20HardwareMJPEGDecoder8readDataEmm>
 8002444:	e799      	b.n	800237a <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0xd6>
        lastError = AVI_ERROR_IDX1_NOT_FOUND;
 8002446:	230b      	movs	r3, #11
 8002448:	e7ef      	b.n	800242a <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x186>
 800244a:	bf00      	nop
 800244c:	08028848 	.word	0x08028848
 8002450:	08028866 	.word	0x08028866
 8002454:	0802884d 	.word	0x0802884d
 8002458:	0802871f 	.word	0x0802871f
 800245c:	08028893 	.word	0x08028893
 8002460:	08028898 	.word	0x08028898
 8002464:	080288b0 	.word	0x080288b0
 8002468:	080288b5 	.word	0x080288b5
 800246c:	080288cb 	.word	0x080288cb
 8002470:	080288d7 	.word	0x080288d7
 8002474:	080288dc 	.word	0x080288dc
 8002478:	080288e1 	.word	0x080288e1
 800247c:	080288e6 	.word	0x080288e6

08002480 <_ZN20HardwareMJPEGDecoder12setVideoDataEPKhm>:
    movieLength = length;
 8002480:	e9c0 210a 	strd	r2, r1, [r0, #40]	@ 0x28
    reader = 0; /* not using reader */
 8002484:	2200      	movs	r2, #0
 8002486:	6302      	str	r2, [r0, #48]	@ 0x30
    readVideoHeader();
 8002488:	f7ff bf0c 	b.w	80022a4 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv>

0800248c <_ZN20HardwareMJPEGDecoder12setVideoDataERN8touchgfx15VideoDataReaderE>:
{
 800248c:	b510      	push	{r4, lr}
    movieData = 0;
 800248e:	2300      	movs	r3, #0
{
 8002490:	4604      	mov	r4, r0
 8002492:	4608      	mov	r0, r1
    movieData = 0;
 8002494:	62e3      	str	r3, [r4, #44]	@ 0x2c
    movieLength = reader.getDataLength();
 8002496:	680b      	ldr	r3, [r1, #0]
    this->reader = &reader;
 8002498:	6321      	str	r1, [r4, #48]	@ 0x30
    movieLength = reader.getDataLength();
 800249a:	689b      	ldr	r3, [r3, #8]
 800249c:	4798      	blx	r3
 800249e:	62a0      	str	r0, [r4, #40]	@ 0x28
    readVideoHeader();
 80024a0:	4620      	mov	r0, r4
}
 80024a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    readVideoHeader();
 80024a6:	f7ff befd 	b.w	80022a4 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv>
	...

080024ac <JPEG_Decode_DMA>:
     * @param  JPEGImageSize_Bytes    : jpg image size in bytes.
     * @param  DestAddress : ARGB8888 destination Frame Buffer Address.
     * @retval None
     */
    uint32_t JPEG_Decode_DMA(JPEG_HandleTypeDef* hjpeg, uint8_t* input, uint32_t chunkSizeIn /* length */, uint8_t* output)
    {
 80024ac:	b537      	push	{r0, r1, r2, r4, r5, lr}
        FrameBufferAddress = output;
 80024ae:	4c14      	ldr	r4, [pc, #80]	@ (8002500 <JPEG_Decode_DMA+0x54>)
        JPEG_output_is_paused = 0;
        JPEG_OUT_Read_BufferIndex = 0;
        JPEG_OUT_Write_BufferIndex = 0;
 80024b0:	4d14      	ldr	r5, [pc, #80]	@ (8002504 <JPEG_Decode_DMA+0x58>)
        FrameBufferAddress = output;
 80024b2:	6023      	str	r3, [r4, #0]
        JPEG_output_is_paused = 0;
 80024b4:	2400      	movs	r4, #0
 80024b6:	4b14      	ldr	r3, [pc, #80]	@ (8002508 <JPEG_Decode_DMA+0x5c>)
 80024b8:	601c      	str	r4, [r3, #0]
        JPEG_OUT_Read_BufferIndex = 0;
 80024ba:	4b14      	ldr	r3, [pc, #80]	@ (800250c <JPEG_Decode_DMA+0x60>)
 80024bc:	601c      	str	r4, [r3, #0]
        JPEG_InputImageIndex = 0;
 80024be:	4b14      	ldr	r3, [pc, #80]	@ (8002510 <JPEG_Decode_DMA+0x64>)
        JPEG_OUT_Write_BufferIndex = 0;
 80024c0:	602c      	str	r4, [r5, #0]
        JPEG_InputImageIndex = 0;
 80024c2:	601c      	str	r4, [r3, #0]
        JPEG_InputImageAddress = (uint32_t)input;
 80024c4:	4b13      	ldr	r3, [pc, #76]	@ (8002514 <JPEG_Decode_DMA+0x68>)
 80024c6:	6019      	str	r1, [r3, #0]
        JPEG_InputImageSize_Bytes = chunkSizeIn;
 80024c8:	4b13      	ldr	r3, [pc, #76]	@ (8002518 <JPEG_Decode_DMA+0x6c>)
 80024ca:	601a      	str	r2, [r3, #0]
        MCU_BlockIndex = 0;
 80024cc:	4b13      	ldr	r3, [pc, #76]	@ (800251c <JPEG_Decode_DMA+0x70>)
 80024ce:	601c      	str	r4, [r3, #0]

        /* Init buffers */
        for (uint32_t i = 0; i < NB_OUTPUT_DATA_BUFFERS; ++i)
        {
            Jpeg_OUT_BufferTab[i].State = JPEG_BUFFER_EMPTY;
 80024d0:	4b13      	ldr	r3, [pc, #76]	@ (8002520 <JPEG_Decode_DMA+0x74>)
            Jpeg_OUT_BufferTab[i].DataBufferSize = 0;
            Jpeg_OUT_BufferTab[i].MCU_index = 0;
        }

        /* Do not return from this function until done with decoding all chunks. */
        HAL_JPEG_Decode_DMA(hjpeg, input, CHUNK_SIZE_IN, Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBuffer, MCU_CHROMA_420_SIZE_BYTES * JPEG_ConvertorParams.MCU_pr_line);
 80024d2:	682a      	ldr	r2, [r5, #0]
 80024d4:	f44f 75c0 	mov.w	r5, #384	@ 0x180
            Jpeg_OUT_BufferTab[i].State = JPEG_BUFFER_EMPTY;
 80024d8:	701c      	strb	r4, [r3, #0]
 80024da:	741c      	strb	r4, [r3, #16]
            Jpeg_OUT_BufferTab[i].MCU_index = 0;
 80024dc:	e9c3 4402 	strd	r4, r4, [r3, #8]
 80024e0:	e9c3 4406 	strd	r4, r4, [r3, #24]
        HAL_JPEG_Decode_DMA(hjpeg, input, CHUNK_SIZE_IN, Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBuffer, MCU_CHROMA_420_SIZE_BYTES * JPEG_ConvertorParams.MCU_pr_line);
 80024e4:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 80024e8:	4a0e      	ldr	r2, [pc, #56]	@ (8002524 <JPEG_Decode_DMA+0x78>)
 80024ea:	68d2      	ldr	r2, [r2, #12]
 80024ec:	436a      	muls	r2, r5
 80024ee:	9200      	str	r2, [sp, #0]
 80024f0:	f44f 4250 	mov.w	r2, #53248	@ 0xd000
 80024f4:	685b      	ldr	r3, [r3, #4]
 80024f6:	f007 f8c9 	bl	800968c <HAL_JPEG_Decode_DMA>

        return 0;
    }
 80024fa:	4620      	mov	r0, r4
 80024fc:	b003      	add	sp, #12
 80024fe:	bd30      	pop	{r4, r5, pc}
 8002500:	24009dc4 	.word	0x24009dc4
 8002504:	24009da0 	.word	0x24009da0
 8002508:	24009db0 	.word	0x24009db0
 800250c:	24000794 	.word	0x24000794
 8002510:	24009dc0 	.word	0x24009dc0
 8002514:	24009db8 	.word	0x24009db8
 8002518:	24009dbc 	.word	0x24009dbc
 800251c:	2400079c 	.word	0x2400079c
 8002520:	24000010 	.word	0x24000010
 8002524:	2400077c 	.word	0x2400077c

08002528 <HAL_JPEG_InfoReadyCallback>:
     */
    void HAL_JPEG_InfoReadyCallback(JPEG_HandleTypeDef* hjpeg, JPEG_ConfTypeDef* pInfo)
    {
        uint32_t hMCU, vMCU;

        if (pInfo->ChromaSubsampling == JPEG_420_SUBSAMPLING)
 8002528:	684b      	ldr	r3, [r1, #4]
 800252a:	2b01      	cmp	r3, #1
 800252c:	d115      	bne.n	800255a <HAL_JPEG_InfoReadyCallback+0x32>
        {
            if ((pInfo->ImageWidth % 16) != 0)
 800252e:	68cb      	ldr	r3, [r1, #12]
 8002530:	071a      	lsls	r2, r3, #28
            {
                pInfo->ImageWidth += (16 - (pInfo->ImageWidth % 16));
 8002532:	bf1e      	ittt	ne
 8002534:	f023 030f 	bicne.w	r3, r3, #15
 8002538:	3310      	addne	r3, #16
 800253a:	60cb      	strne	r3, [r1, #12]
            }

            if ((pInfo->ImageHeight % 16) != 0)
 800253c:	688b      	ldr	r3, [r1, #8]
 800253e:	0718      	lsls	r0, r3, #28
            {
                pInfo->ImageHeight += (16 - (pInfo->ImageHeight % 16));
 8002540:	bf1e      	ittt	ne
 8002542:	f023 030f 	bicne.w	r3, r3, #15
 8002546:	3310      	addne	r3, #16
 8002548:	608b      	strne	r3, [r1, #8]
            }

            hMCU = (pInfo->ImageWidth / MCU_WIDTH_PIXELS);
 800254a:	68cb      	ldr	r3, [r1, #12]
            vMCU = (pInfo->ImageHeight / MCU_HEIGHT_PIXELS);
 800254c:	688a      	ldr	r2, [r1, #8]
            hMCU = (pInfo->ImageWidth / MCU_WIDTH_PIXELS);
 800254e:	091b      	lsrs	r3, r3, #4
            vMCU = (pInfo->ImageHeight / MCU_HEIGHT_PIXELS);
 8002550:	0912      	lsrs	r2, r2, #4
            MCU_TotalNb = (hMCU * vMCU);
 8002552:	4353      	muls	r3, r2
 8002554:	4a0e      	ldr	r2, [pc, #56]	@ (8002590 <HAL_JPEG_InfoReadyCallback+0x68>)
 8002556:	6013      	str	r3, [r2, #0]
 8002558:	4770      	bx	lr
        }
        else
        {
            if (pInfo->ChromaSubsampling == JPEG_422_SUBSAMPLING)
 800255a:	2b02      	cmp	r3, #2
 800255c:	d10e      	bne.n	800257c <HAL_JPEG_InfoReadyCallback+0x54>
            {
                if ((pInfo->ImageWidth % 16) != 0)
 800255e:	68cb      	ldr	r3, [r1, #12]
 8002560:	071a      	lsls	r2, r3, #28
 8002562:	d003      	beq.n	800256c <HAL_JPEG_InfoReadyCallback+0x44>
                {
                    pInfo->ImageWidth += (16 - (pInfo->ImageWidth % 16));
 8002564:	f023 030f 	bic.w	r3, r3, #15
 8002568:	3310      	adds	r3, #16

            if (pInfo->ChromaSubsampling == JPEG_444_SUBSAMPLING)
            {
                if ((pInfo->ImageWidth % 8) != 0)
                {
                    pInfo->ImageWidth += (8 - (pInfo->ImageWidth % 8));
 800256a:	60cb      	str	r3, [r1, #12]
                }

                if ((pInfo->ImageHeight % 8) != 0)
 800256c:	688b      	ldr	r3, [r1, #8]
 800256e:	075a      	lsls	r2, r3, #29
                {
                    pInfo->ImageHeight += (8 - (pInfo->ImageHeight % 8));
 8002570:	bf1e      	ittt	ne
 8002572:	f023 0307 	bicne.w	r3, r3, #7
 8002576:	3308      	addne	r3, #8
 8002578:	608b      	strne	r3, [r1, #8]
                }
            }
        }
    }
 800257a:	4770      	bx	lr
            if (pInfo->ChromaSubsampling == JPEG_444_SUBSAMPLING)
 800257c:	2b00      	cmp	r3, #0
 800257e:	d1fc      	bne.n	800257a <HAL_JPEG_InfoReadyCallback+0x52>
                if ((pInfo->ImageWidth % 8) != 0)
 8002580:	68cb      	ldr	r3, [r1, #12]
 8002582:	0758      	lsls	r0, r3, #29
 8002584:	d0f2      	beq.n	800256c <HAL_JPEG_InfoReadyCallback+0x44>
                    pInfo->ImageWidth += (8 - (pInfo->ImageWidth % 8));
 8002586:	f023 0307 	bic.w	r3, r3, #7
 800258a:	3308      	adds	r3, #8
 800258c:	e7ed      	b.n	800256a <HAL_JPEG_InfoReadyCallback+0x42>
 800258e:	bf00      	nop
 8002590:	24009da8 	.word	0x24009da8

08002594 <HAL_JPEG_GetDataCallback>:
     * @retval None
     */
    void HAL_JPEG_GetDataCallback(JPEG_HandleTypeDef* hjpeg, uint32_t NbDecodedData)
    {
        /* Input buffer has been consumed by the peripheral and to ask for a new data chunk if the operation (encoding/decoding) has not been complete yet. */
        JPEG_InputImageIndex += NbDecodedData;
 8002594:	4a0b      	ldr	r2, [pc, #44]	@ (80025c4 <HAL_JPEG_GetDataCallback+0x30>)
 8002596:	6813      	ldr	r3, [r2, #0]
 8002598:	440b      	add	r3, r1
    {
 800259a:	b430      	push	{r4, r5}
        JPEG_InputImageIndex += NbDecodedData;
 800259c:	6013      	str	r3, [r2, #0]
        if (JPEG_InputImageIndex < JPEG_InputImageSize_Bytes)
 800259e:	4a0a      	ldr	r2, [pc, #40]	@ (80025c8 <HAL_JPEG_GetDataCallback+0x34>)
 80025a0:	6812      	ldr	r2, [r2, #0]
 80025a2:	4293      	cmp	r3, r2
 80025a4:	d20c      	bcs.n	80025c0 <HAL_JPEG_GetDataCallback+0x2c>
        {
            JPEG_InputImageAddress = JPEG_InputImageAddress + NbDecodedData;
 80025a6:	4c09      	ldr	r4, [pc, #36]	@ (80025cc <HAL_JPEG_GetDataCallback+0x38>)
            uint32_t inDataLength = JPEG_InputImageSize_Bytes - JPEG_InputImageIndex;
 80025a8:	1ad2      	subs	r2, r2, r3
            JPEG_InputImageAddress = JPEG_InputImageAddress + NbDecodedData;
 80025aa:	6825      	ldr	r5, [r4, #0]
            HAL_JPEG_ConfigInputBuffer(hjpeg, (uint8_t*)JPEG_InputImageAddress, inDataLength >= CHUNK_SIZE_IN ? CHUNK_SIZE_IN : inDataLength);
 80025ac:	f5b2 4f50 	cmp.w	r2, #53248	@ 0xd000
            JPEG_InputImageAddress = JPEG_InputImageAddress + NbDecodedData;
 80025b0:	4429      	add	r1, r5
            HAL_JPEG_ConfigInputBuffer(hjpeg, (uint8_t*)JPEG_InputImageAddress, inDataLength >= CHUNK_SIZE_IN ? CHUNK_SIZE_IN : inDataLength);
 80025b2:	bf28      	it	cs
 80025b4:	f44f 4250 	movcs.w	r2, #53248	@ 0xd000
            JPEG_InputImageAddress = JPEG_InputImageAddress + NbDecodedData;
 80025b8:	6021      	str	r1, [r4, #0]
        }
    }
 80025ba:	bc30      	pop	{r4, r5}
            HAL_JPEG_ConfigInputBuffer(hjpeg, (uint8_t*)JPEG_InputImageAddress, inDataLength >= CHUNK_SIZE_IN ? CHUNK_SIZE_IN : inDataLength);
 80025bc:	f007 b8c8 	b.w	8009750 <HAL_JPEG_ConfigInputBuffer>
    }
 80025c0:	bc30      	pop	{r4, r5}
 80025c2:	4770      	bx	lr
 80025c4:	24009dc0 	.word	0x24009dc0
 80025c8:	24009dbc 	.word	0x24009dbc
 80025cc:	24009db8 	.word	0x24009db8

080025d0 <HAL_JPEG_DataReadyCallback>:
     * @param pDataOut: pointer to the output data buffer
     * @param OutDataLength: length of output buffer in bytes
     * @retval None
     */
    void HAL_JPEG_DataReadyCallback(JPEG_HandleTypeDef* hjpeg, uint8_t* pDataOut, uint32_t OutDataLength)
    {
 80025d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].State = JPEG_BUFFER_FULL;
 80025d2:	4c20      	ldr	r4, [pc, #128]	@ (8002654 <HAL_JPEG_DataReadyCallback+0x84>)
 80025d4:	2101      	movs	r1, #1
 80025d6:	4d20      	ldr	r5, [pc, #128]	@ (8002658 <HAL_JPEG_DataReadyCallback+0x88>)
    {
 80025d8:	4606      	mov	r6, r0
        Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].State = JPEG_BUFFER_FULL;
 80025da:	6823      	ldr	r3, [r4, #0]
        Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBufferSize = OutDataLength;
        const uint32_t MCU = MCU_BlockIndex;
        Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].MCU_index = MCU;

        MCU_BlockIndex += JPEG_ConvertorParams.MCU_pr_line;
 80025dc:	4f1f      	ldr	r7, [pc, #124]	@ (800265c <HAL_JPEG_DataReadyCallback+0x8c>)
        Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].State = JPEG_BUFFER_FULL;
 80025de:	011b      	lsls	r3, r3, #4
 80025e0:	54e9      	strb	r1, [r5, r3]
        Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBufferSize = OutDataLength;
 80025e2:	6823      	ldr	r3, [r4, #0]
 80025e4:	eb05 1303 	add.w	r3, r5, r3, lsl #4
 80025e8:	609a      	str	r2, [r3, #8]
        const uint32_t MCU = MCU_BlockIndex;
 80025ea:	4b1d      	ldr	r3, [pc, #116]	@ (8002660 <HAL_JPEG_DataReadyCallback+0x90>)
 80025ec:	6819      	ldr	r1, [r3, #0]
        Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].MCU_index = MCU;
 80025ee:	6822      	ldr	r2, [r4, #0]
 80025f0:	eb05 1202 	add.w	r2, r5, r2, lsl #4
 80025f4:	60d1      	str	r1, [r2, #12]
        MCU_BlockIndex += JPEG_ConvertorParams.MCU_pr_line;
 80025f6:	681a      	ldr	r2, [r3, #0]
 80025f8:	68f9      	ldr	r1, [r7, #12]
 80025fa:	440a      	add	r2, r1
 80025fc:	601a      	str	r2, [r3, #0]

        JPEG_OUT_Write_BufferIndex++;
 80025fe:	6823      	ldr	r3, [r4, #0]
 8002600:	3301      	adds	r3, #1
 8002602:	6023      	str	r3, [r4, #0]
        if (JPEG_OUT_Write_BufferIndex >= NB_OUTPUT_DATA_BUFFERS)
 8002604:	6823      	ldr	r3, [r4, #0]
 8002606:	2b01      	cmp	r3, #1
 8002608:	d901      	bls.n	800260e <HAL_JPEG_DataReadyCallback+0x3e>
        {
            JPEG_OUT_Write_BufferIndex = 0;
 800260a:	2300      	movs	r3, #0
 800260c:	6023      	str	r3, [r4, #0]
        }

        /* if the other buffer is full, then ui thread might be converting it */
        if (Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].State != JPEG_BUFFER_EMPTY)
 800260e:	6823      	ldr	r3, [r4, #0]
 8002610:	011b      	lsls	r3, r3, #4
 8002612:	5ceb      	ldrb	r3, [r5, r3]
 8002614:	b133      	cbz	r3, 8002624 <HAL_JPEG_DataReadyCallback+0x54>
        {
            HAL_JPEG_Pause(hjpeg, JPEG_PAUSE_RESUME_OUTPUT);
 8002616:	2102      	movs	r1, #2
 8002618:	4630      	mov	r0, r6
 800261a:	f007 f86b 	bl	80096f4 <HAL_JPEG_Pause>
            JPEG_output_is_paused = 1;
 800261e:	4b11      	ldr	r3, [pc, #68]	@ (8002664 <HAL_JPEG_DataReadyCallback+0x94>)
 8002620:	2201      	movs	r2, #1
 8002622:	601a      	str	r2, [r3, #0]
        }
        HAL_JPEG_ConfigOutputBuffer(hjpeg, Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBuffer, MCU_CHROMA_420_SIZE_BYTES * JPEG_ConvertorParams.MCU_pr_line);
 8002624:	6822      	ldr	r2, [r4, #0]
 8002626:	4630      	mov	r0, r6
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	eb05 1502 	add.w	r5, r5, r2, lsl #4
 800262e:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8002632:	6869      	ldr	r1, [r5, #4]
 8002634:	435a      	muls	r2, r3
 8002636:	f007 f88e 	bl	8009756 <HAL_JPEG_ConfigOutputBuffer>

        /* Signal Hardware Decoding to wake up */
        if (!DMA2D_reference->isDMARunning() && !DMA2D_reference->getReserved())
 800263a:	4b0b      	ldr	r3, [pc, #44]	@ (8002668 <HAL_JPEG_DataReadyCallback+0x98>)
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	7a1a      	ldrb	r2, [r3, #8]
 8002640:	b93a      	cbnz	r2, 8002652 <HAL_JPEG_DataReadyCallback+0x82>
     *
     * @return true if DMA is reserved by rendering, false if not.
     */
    bool getReserved() const
    {
        return isReserved;
 8002642:	7a9b      	ldrb	r3, [r3, #10]
 8002644:	b92b      	cbnz	r3, 8002652 <HAL_JPEG_DataReadyCallback+0x82>
        {
            SEM_POST(semDecodingDone);
 8002646:	4b09      	ldr	r3, [pc, #36]	@ (800266c <HAL_JPEG_DataReadyCallback+0x9c>)
 8002648:	6818      	ldr	r0, [r3, #0]
        }
    }
 800264a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
            SEM_POST(semDecodingDone);
 800264e:	f00a ba15 	b.w	800ca7c <osSemaphoreRelease>
    }
 8002652:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002654:	24009da0 	.word	0x24009da0
 8002658:	24000010 	.word	0x24000010
 800265c:	2400077c 	.word	0x2400077c
 8002660:	2400079c 	.word	0x2400079c
 8002664:	24009db0 	.word	0x24009db0
 8002668:	24009da4 	.word	0x24009da4
 800266c:	24000798 	.word	0x24000798

08002670 <HAL_JPEG_ErrorCallback>:
  __ASM volatile ("cpsid i" : : : "memory");
 8002670:	b672      	cpsid	i
     * @retval None
     */
    void HAL_JPEG_ErrorCallback(JPEG_HandleTypeDef* hjpeg)
    {
        __disable_irq();
        while (1)
 8002672:	e7fe      	b.n	8002672 <HAL_JPEG_ErrorCallback+0x2>

08002674 <HAL_JPEG_DecodeCpltCallback>:
     * @param hjpeg: JPEG handle pointer
     * @retval None
     */
    void HAL_JPEG_DecodeCpltCallback(JPEG_HandleTypeDef* hjpeg)
    {
        Jpeg_HWDecodingEnd = 1;
 8002674:	4b01      	ldr	r3, [pc, #4]	@ (800267c <HAL_JPEG_DecodeCpltCallback+0x8>)
 8002676:	2201      	movs	r2, #1
 8002678:	601a      	str	r2, [r3, #0]
    }
 800267a:	4770      	bx	lr
 800267c:	24009db4 	.word	0x24009db4

08002680 <JPEG_OutputHandler>:
 * @brief  JPEG Ouput Data BackGround Postprocessing .
 * @param hjpeg: JPEG handle pointer
 * @retval 1 : if JPEG processing has finished, 0 : if JPEG processing still ongoing
 */
uint32_t JPEG_OutputHandler(JPEG_HandleTypeDef* hjpeg)
{
 8002680:	b538      	push	{r3, r4, r5, lr}
    /* Decode frame complete */
    if (Jpeg_HWDecodingEnd && DMA2D_CopyBufferEnd)
 8002682:	4d16      	ldr	r5, [pc, #88]	@ (80026dc <JPEG_OutputHandler+0x5c>)
{
 8002684:	4604      	mov	r4, r0
    if (Jpeg_HWDecodingEnd && DMA2D_CopyBufferEnd)
 8002686:	682b      	ldr	r3, [r5, #0]
 8002688:	b113      	cbz	r3, 8002690 <JPEG_OutputHandler+0x10>
 800268a:	4b15      	ldr	r3, [pc, #84]	@ (80026e0 <JPEG_OutputHandler+0x60>)
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	bb1b      	cbnz	r3, 80026d8 <JPEG_OutputHandler+0x58>
    {
        return 1;
    }

    /* Try to start DMA2D video transfer if next buffer if full */
    if (!DMA2D_reference->isDMARunning() && (Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex].State == JPEG_BUFFER_FULL) && (DMA2D_CopyBufferEnd == 0))
 8002690:	4b14      	ldr	r3, [pc, #80]	@ (80026e4 <JPEG_OutputHandler+0x64>)
 8002692:	6818      	ldr	r0, [r3, #0]
 8002694:	7a03      	ldrb	r3, [r0, #8]
 8002696:	b963      	cbnz	r3, 80026b2 <JPEG_OutputHandler+0x32>
 8002698:	4b13      	ldr	r3, [pc, #76]	@ (80026e8 <JPEG_OutputHandler+0x68>)
 800269a:	4a14      	ldr	r2, [pc, #80]	@ (80026ec <JPEG_OutputHandler+0x6c>)
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	011b      	lsls	r3, r3, #4
 80026a0:	5cd3      	ldrb	r3, [r2, r3]
 80026a2:	2b01      	cmp	r3, #1
 80026a4:	d105      	bne.n	80026b2 <JPEG_OutputHandler+0x32>
 80026a6:	4b0e      	ldr	r3, [pc, #56]	@ (80026e0 <JPEG_OutputHandler+0x60>)
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	b913      	cbnz	r3, 80026b2 <JPEG_OutputHandler+0x32>
    {
        DMA2D_reference->start();
 80026ac:	6803      	ldr	r3, [r0, #0]
 80026ae:	691b      	ldr	r3, [r3, #16]
 80026b0:	4798      	blx	r3
    }

    /* Start JPEG IP if paused and next buffer is empty */
    if ((JPEG_output_is_paused == 1) && (Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].State == JPEG_BUFFER_EMPTY) && (Jpeg_HWDecodingEnd == 0))
 80026b2:	4a0f      	ldr	r2, [pc, #60]	@ (80026f0 <JPEG_OutputHandler+0x70>)
 80026b4:	6813      	ldr	r3, [r2, #0]
 80026b6:	2b01      	cmp	r3, #1
 80026b8:	d10c      	bne.n	80026d4 <JPEG_OutputHandler+0x54>
 80026ba:	4b0e      	ldr	r3, [pc, #56]	@ (80026f4 <JPEG_OutputHandler+0x74>)
 80026bc:	490b      	ldr	r1, [pc, #44]	@ (80026ec <JPEG_OutputHandler+0x6c>)
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	011b      	lsls	r3, r3, #4
 80026c2:	5ccb      	ldrb	r3, [r1, r3]
 80026c4:	b933      	cbnz	r3, 80026d4 <JPEG_OutputHandler+0x54>
 80026c6:	682b      	ldr	r3, [r5, #0]
 80026c8:	b923      	cbnz	r3, 80026d4 <JPEG_OutputHandler+0x54>
    {
        JPEG_output_is_paused = 0;
        HAL_JPEG_Resume(hjpeg, JPEG_PAUSE_RESUME_OUTPUT);
 80026ca:	2102      	movs	r1, #2
 80026cc:	4620      	mov	r0, r4
        JPEG_output_is_paused = 0;
 80026ce:	6013      	str	r3, [r2, #0]
        HAL_JPEG_Resume(hjpeg, JPEG_PAUSE_RESUME_OUTPUT);
 80026d0:	f007 fa6f 	bl	8009bb2 <HAL_JPEG_Resume>
        return 1;
 80026d4:	2002      	movs	r0, #2
    }

    return 2;
}
 80026d6:	bd38      	pop	{r3, r4, r5, pc}
        return 1;
 80026d8:	2001      	movs	r0, #1
 80026da:	e7fc      	b.n	80026d6 <JPEG_OutputHandler+0x56>
 80026dc:	24009db4 	.word	0x24009db4
 80026e0:	24000790 	.word	0x24000790
 80026e4:	24009da4 	.word	0x24009da4
 80026e8:	24000794 	.word	0x24000794
 80026ec:	24000010 	.word	0x24000010
 80026f0:	24009db0 	.word	0x24009db0
 80026f4:	24009da0 	.word	0x24009da0

080026f8 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm>:
{
 80026f8:	b570      	push	{r4, r5, r6, lr}
 80026fa:	4605      	mov	r5, r0
    if (length == 0)
 80026fc:	2a00      	cmp	r2, #0
 80026fe:	d035      	beq.n	800276c <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x74>
    if (outputBuffer) /* only decode if buffers are assigned. */
 8002700:	2b00      	cmp	r3, #0
 8002702:	d033      	beq.n	800276c <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x74>
        JPEG_ConvertorParams.bytes_pr_pixel = 3;
 8002704:	481a      	ldr	r0, [pc, #104]	@ (8002770 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x78>)
 8002706:	2403      	movs	r4, #3
 8002708:	6104      	str	r4, [r0, #16]
        JPEG_ConvertorParams.WidthExtend = videoInfo.frame_width;
 800270a:	68ec      	ldr	r4, [r5, #12]
        if ((JPEG_ConvertorParams.WidthExtend % 16) != 0)
 800270c:	0726      	lsls	r6, r4, #28
        JPEG_ConvertorParams.ScaledWidth = 800 * JPEG_ConvertorParams.bytes_pr_pixel;
 800270e:	f44f 6616 	mov.w	r6, #2400	@ 0x960
            JPEG_ConvertorParams.WidthExtend += 16 - (JPEG_ConvertorParams.WidthExtend % 16);
 8002712:	bf18      	it	ne
 8002714:	f024 040f 	bicne.w	r4, r4, #15
        JPEG_ConvertorParams.ScaledWidth = 800 * JPEG_ConvertorParams.bytes_pr_pixel;
 8002718:	6046      	str	r6, [r0, #4]
            JPEG_ConvertorParams.WidthExtend += 16 - (JPEG_ConvertorParams.WidthExtend % 16);
 800271a:	bf18      	it	ne
 800271c:	3410      	addne	r4, #16
        JPEG_ConvertorParams.WidthExtend = videoInfo.frame_width;
 800271e:	6004      	str	r4, [r0, #0]
        JPEG_ConvertorParams.MCU_pr_line = JPEG_ConvertorParams.WidthExtend / MCU_WIDTH_PIXELS;
 8002720:	0924      	lsrs	r4, r4, #4
 8002722:	60c4      	str	r4, [r0, #12]
        JPEG_ConvertorParams.LastLineHeight = (videoInfo.frame_height % MCU_HEIGHT_PIXELS) == 0 ? 0 : MCU_HEIGHT_PIXELS - (videoInfo.frame_height % MCU_HEIGHT_PIXELS);
 8002724:	692c      	ldr	r4, [r5, #16]
 8002726:	f014 040f 	ands.w	r4, r4, #15
 800272a:	bf18      	it	ne
 800272c:	f1c4 0410 	rsbne	r4, r4, #16
 8002730:	6084      	str	r4, [r0, #8]
        JPEG_Decode_DMA(&hjpeg, const_cast<uint8_t*>(mjpgdata), length, outputBuffer);
 8002732:	4810      	ldr	r0, [pc, #64]	@ (8002774 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x7c>)
 8002734:	f7ff feba 	bl	80024ac <JPEG_Decode_DMA>
            JpegProcessing_End = JPEG_OutputHandler(&hjpeg);
 8002738:	4c0f      	ldr	r4, [pc, #60]	@ (8002778 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x80>)
        DMA2D_reference = dma;
 800273a:	6c6a      	ldr	r2, [r5, #68]	@ 0x44
 800273c:	4b0f      	ldr	r3, [pc, #60]	@ (800277c <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x84>)
            JpegProcessing_End = JPEG_OutputHandler(&hjpeg);
 800273e:	4d0d      	ldr	r5, [pc, #52]	@ (8002774 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x7c>)
        DMA2D_reference = dma;
 8002740:	601a      	str	r2, [r3, #0]
            JpegProcessing_End = JPEG_OutputHandler(&hjpeg);
 8002742:	4628      	mov	r0, r5
 8002744:	f7ff ff9c 	bl	8002680 <JPEG_OutputHandler>
 8002748:	6020      	str	r0, [r4, #0]
            if (JpegProcessing_End == 2)
 800274a:	6823      	ldr	r3, [r4, #0]
 800274c:	2b02      	cmp	r3, #2
 800274e:	d105      	bne.n	800275c <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x64>
                SEM_WAIT(semDecodingDone);
 8002750:	4b0b      	ldr	r3, [pc, #44]	@ (8002780 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x88>)
 8002752:	f04f 31ff 	mov.w	r1, #4294967295
 8002756:	6818      	ldr	r0, [r3, #0]
 8002758:	f00a f964 	bl	800ca24 <osSemaphoreAcquire>
        } while (JpegProcessing_End != 1);
 800275c:	6823      	ldr	r3, [r4, #0]
 800275e:	2b01      	cmp	r3, #1
 8002760:	d1ef      	bne.n	8002742 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x4a>
        Jpeg_HWDecodingEnd = 0;
 8002762:	2300      	movs	r3, #0
 8002764:	4a07      	ldr	r2, [pc, #28]	@ (8002784 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x8c>)
 8002766:	6013      	str	r3, [r2, #0]
        DMA2D_CopyBufferEnd = 0;
 8002768:	4a07      	ldr	r2, [pc, #28]	@ (8002788 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x90>)
 800276a:	6013      	str	r3, [r2, #0]
}
 800276c:	bd70      	pop	{r4, r5, r6, pc}
 800276e:	bf00      	nop
 8002770:	2400077c 	.word	0x2400077c
 8002774:	24000594 	.word	0x24000594
 8002778:	24009dac 	.word	0x24009dac
 800277c:	24009da4 	.word	0x24009da4
 8002780:	24000798 	.word	0x24000798
 8002784:	24009db4 	.word	0x24009db4
 8002788:	24000790 	.word	0x24000790

0800278c <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm>:
{
 800278c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002790:	4699      	mov	r9, r3
    assert((frameNumber > 0) && "HardwareMJPEGDecoder decoding without frame data!");
 8002792:	6943      	ldr	r3, [r0, #20]
{
 8002794:	b085      	sub	sp, #20
 8002796:	4604      	mov	r4, r0
 8002798:	460f      	mov	r7, r1
 800279a:	4690      	mov	r8, r2
    assert((frameNumber > 0) && "HardwareMJPEGDecoder decoding without frame data!");
 800279c:	b92b      	cbnz	r3, 80027aa <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x1e>
 800279e:	4b29      	ldr	r3, [pc, #164]	@ (8002844 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0xb8>)
 80027a0:	21b0      	movs	r1, #176	@ 0xb0
 80027a2:	4a29      	ldr	r2, [pc, #164]	@ (8002848 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0xbc>)
 80027a4:	4829      	ldr	r0, [pc, #164]	@ (800284c <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0xc0>)
 80027a6:	f024 fd6b 	bl	8027280 <__assert_func>
    readData(currentMovieOffset, 8);
 80027aa:	2208      	movs	r2, #8
 80027ac:	6981      	ldr	r1, [r0, #24]
 80027ae:	f7ff fcd7 	bl	8002160 <_ZN20HardwareMJPEGDecoder8readDataEmm>
    uint32_t streamNo  = getU16(currentMovieOffset);
 80027b2:	69a6      	ldr	r6, [r4, #24]
 80027b4:	4620      	mov	r0, r4
 80027b6:	4631      	mov	r1, r6
 80027b8:	f7ff fcbf 	bl	800213a <_ZN20HardwareMJPEGDecoder6getU16Em>
    uint32_t chunkType = getU16(currentMovieOffset + 2);
 80027bc:	1cb1      	adds	r1, r6, #2
    uint32_t streamNo  = getU16(currentMovieOffset);
 80027be:	4683      	mov	fp, r0
    uint32_t chunkType = getU16(currentMovieOffset + 2);
 80027c0:	4620      	mov	r0, r4
 80027c2:	f7ff fcba 	bl	800213a <_ZN20HardwareMJPEGDecoder6getU16Em>
    uint32_t chunkSize = getU32(currentMovieOffset + 4);
 80027c6:	1d31      	adds	r1, r6, #4
    uint32_t chunkType = getU16(currentMovieOffset + 2);
 80027c8:	4682      	mov	sl, r0
    uint32_t chunkSize = getU32(currentMovieOffset + 4);
 80027ca:	4620      	mov	r0, r4
 80027cc:	f7ff fc9a 	bl	8002104 <_ZN20HardwareMJPEGDecoder6getU32Em>
 80027d0:	f106 0108 	add.w	r1, r6, #8
    if (currentMovieOffset + 8 + chunkSize < movieLength)
 80027d4:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
    uint32_t chunkSize = getU32(currentMovieOffset + 4);
 80027d6:	4605      	mov	r5, r0
    if (currentMovieOffset + 8 + chunkSize < movieLength)
 80027d8:	1842      	adds	r2, r0, r1
 80027da:	429a      	cmp	r2, r3
 80027dc:	d226      	bcs.n	800282c <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0xa0>
        if (streamNo == STREAM0 && chunkType == TYPEDC && chunkSize > 0)
 80027de:	f243 0330 	movw	r3, #12336	@ 0x3030
 80027e2:	459b      	cmp	fp, r3
 80027e4:	d117      	bne.n	8002816 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x8a>
 80027e6:	f246 3364 	movw	r3, #25444	@ 0x6364
 80027ea:	459a      	cmp	sl, r3
 80027ec:	d113      	bne.n	8002816 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x8a>
 80027ee:	b190      	cbz	r0, 8002816 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x8a>
            const uint8_t* chunk = readData(currentMovieOffset, chunkSize);
 80027f0:	4602      	mov	r2, r0
            currentMovieOffset += 8;
 80027f2:	61a1      	str	r1, [r4, #24]
            const uint8_t* chunk = readData(currentMovieOffset, chunkSize);
 80027f4:	4620      	mov	r0, r4
 80027f6:	f7ff fcb3 	bl	8002160 <_ZN20HardwareMJPEGDecoder8readDataEmm>
            decodeMJPEGFrame(chunk, chunkSize, buffer, buffer_width, buffer_height, buffer_stride);
 80027fa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
            const uint8_t* chunk = readData(currentMovieOffset, chunkSize);
 80027fc:	4601      	mov	r1, r0
            decodeMJPEGFrame(chunk, chunkSize, buffer, buffer_width, buffer_height, buffer_stride);
 80027fe:	462a      	mov	r2, r5
 8002800:	4620      	mov	r0, r4
 8002802:	f8cd 8000 	str.w	r8, [sp]
 8002806:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800280a:	463b      	mov	r3, r7
 800280c:	f7ff ff74 	bl	80026f8 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm>
            frameNumber++;
 8002810:	6963      	ldr	r3, [r4, #20]
 8002812:	3301      	adds	r3, #1
 8002814:	6163      	str	r3, [r4, #20]
        currentMovieOffset += chunkSize;
 8002816:	69a3      	ldr	r3, [r4, #24]
 8002818:	442b      	add	r3, r5
        if (chunkSize == 0) /* Empty frame - Skip */
 800281a:	b905      	cbnz	r5, 800281e <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x92>
            currentMovieOffset += 8;
 800281c:	3308      	adds	r3, #8
        currentMovieOffset = (currentMovieOffset + 1) & 0xFFFFFFFE; /* pad to next word */
 800281e:	3301      	adds	r3, #1
        if (currentMovieOffset == lastFrameEnd)
 8002820:	6a62      	ldr	r2, [r4, #36]	@ 0x24
        currentMovieOffset = (currentMovieOffset + 1) & 0xFFFFFFFE; /* pad to next word */
 8002822:	f023 0301 	bic.w	r3, r3, #1
        if (currentMovieOffset == lastFrameEnd)
 8002826:	4293      	cmp	r3, r2
        currentMovieOffset = (currentMovieOffset + 1) & 0xFFFFFFFE; /* pad to next word */
 8002828:	61a3      	str	r3, [r4, #24]
        if (currentMovieOffset == lastFrameEnd)
 800282a:	d109      	bne.n	8002840 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0xb4>
        frameNumber = 1;
 800282c:	2301      	movs	r3, #1
            isCurrentFrameLast = true;
 800282e:	2001      	movs	r0, #1
        frameNumber = 1;
 8002830:	6163      	str	r3, [r4, #20]
        currentMovieOffset = firstFrameOffset; /* start over */
 8002832:	6a23      	ldr	r3, [r4, #32]
 8002834:	61a3      	str	r3, [r4, #24]
}
 8002836:	f080 0001 	eor.w	r0, r0, #1
 800283a:	b005      	add	sp, #20
 800283c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        isCurrentFrameLast = false;
 8002840:	2000      	movs	r0, #0
 8002842:	e7f8      	b.n	8002836 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0xaa>
 8002844:	080287cc 	.word	0x080287cc
 8002848:	080288eb 	.word	0x080288eb
 800284c:	0802871f 	.word	0x0802871f

08002850 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm>:
{
 8002850:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002852:	4604      	mov	r4, r0
    readData(currentMovieOffset, 8);
 8002854:	6981      	ldr	r1, [r0, #24]
{
 8002856:	4616      	mov	r6, r2
    readData(currentMovieOffset, 8);
 8002858:	2208      	movs	r2, #8
 800285a:	f7ff fc81 	bl	8002160 <_ZN20HardwareMJPEGDecoder8readDataEmm>
    const uint32_t length = getU32(currentMovieOffset + 4);
 800285e:	69a7      	ldr	r7, [r4, #24]
 8002860:	4620      	mov	r0, r4
 8002862:	1d39      	adds	r1, r7, #4
 8002864:	f7ff fc4e 	bl	8002104 <_ZN20HardwareMJPEGDecoder6getU32Em>
    const uint8_t* mjpgdata = readData(currentMovieOffset + 8, length);
 8002868:	f107 0108 	add.w	r1, r7, #8
 800286c:	4602      	mov	r2, r0
    const uint32_t length = getU32(currentMovieOffset + 4);
 800286e:	4605      	mov	r5, r0
    const uint8_t* mjpgdata = readData(currentMovieOffset + 8, length);
 8002870:	4620      	mov	r0, r4
 8002872:	f7ff fc75 	bl	8002160 <_ZN20HardwareMJPEGDecoder8readDataEmm>
 8002876:	4601      	mov	r1, r0
    if (frameBuffer) /* only decode if buffers are assigned. */
 8002878:	b16e      	cbz	r6, 8002896 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x46>
        JPEG_Decode_DMA(&hjpeg, const_cast<uint8_t*>(mjpgdata), length, frameBuffer);
 800287a:	462a      	mov	r2, r5
            JpegProcessing_End = JPEG_OutputHandler(&hjpeg);
 800287c:	4c07      	ldr	r4, [pc, #28]	@ (800289c <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x4c>)
 800287e:	4d08      	ldr	r5, [pc, #32]	@ (80028a0 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x50>)
        JPEG_Decode_DMA(&hjpeg, const_cast<uint8_t*>(mjpgdata), length, frameBuffer);
 8002880:	4633      	mov	r3, r6
 8002882:	4807      	ldr	r0, [pc, #28]	@ (80028a0 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x50>)
 8002884:	f7ff fe12 	bl	80024ac <JPEG_Decode_DMA>
            JpegProcessing_End = JPEG_OutputHandler(&hjpeg);
 8002888:	4628      	mov	r0, r5
 800288a:	f7ff fef9 	bl	8002680 <JPEG_OutputHandler>
 800288e:	6020      	str	r0, [r4, #0]
        } while (JpegProcessing_End == 0);
 8002890:	6823      	ldr	r3, [r4, #0]
 8002892:	2b00      	cmp	r3, #0
 8002894:	d0f8      	beq.n	8002888 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x38>
}
 8002896:	2001      	movs	r0, #1
 8002898:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800289a:	bf00      	nop
 800289c:	24009dac 	.word	0x24009dac
 80028a0:	24000594 	.word	0x24000594

080028a4 <DMA2D_CopyBuffer>:
 */
void DMA2D_CopyBuffer(JPEG_Data_BufferTypeDef& job)
{
    uint32_t xRef, yRef, refline;

    yRef = ((job.MCU_index * MCU_WIDTH_PIXELS) / JPEG_ConvertorParams.WidthExtend) * MCU_WIDTH_PIXELS;
 80028a4:	4a1b      	ldr	r2, [pc, #108]	@ (8002914 <DMA2D_CopyBuffer+0x70>)
 80028a6:	f8d0 c00c 	ldr.w	ip, [r0, #12]
{
 80028aa:	b5f0      	push	{r4, r5, r6, r7, lr}
    yRef = ((job.MCU_index * MCU_WIDTH_PIXELS) / JPEG_ConvertorParams.WidthExtend) * MCU_WIDTH_PIXELS;
 80028ac:	ea4f 130c 	mov.w	r3, ip, lsl #4
 80028b0:	6814      	ldr	r4, [r2, #0]
    xRef = ((job.MCU_index * MCU_WIDTH_PIXELS) % JPEG_ConvertorParams.WidthExtend);

    refline = (JPEG_ConvertorParams.ScaledWidth) * yRef + (JPEG_ConvertorParams.bytes_pr_pixel * xRef);
 80028b2:	6855      	ldr	r5, [r2, #4]

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB888);
 80028b4:	4e18      	ldr	r6, [pc, #96]	@ (8002918 <DMA2D_CopyBuffer+0x74>)

    /* Configure DMA2D data size */
    if (job.MCU_index >= (MCU_TotalNb - JPEG_ConvertorParams.MCU_pr_line))  /*  Last line of frame */
 80028b6:	4f19      	ldr	r7, [pc, #100]	@ (800291c <DMA2D_CopyBuffer+0x78>)
    yRef = ((job.MCU_index * MCU_WIDTH_PIXELS) / JPEG_ConvertorParams.WidthExtend) * MCU_WIDTH_PIXELS;
 80028b8:	fbb3 f1f4 	udiv	r1, r3, r4
    xRef = ((job.MCU_index * MCU_WIDTH_PIXELS) % JPEG_ConvertorParams.WidthExtend);
 80028bc:	fb04 3311 	mls	r3, r4, r1, r3
    refline = (JPEG_ConvertorParams.ScaledWidth) * yRef + (JPEG_ConvertorParams.bytes_pr_pixel * xRef);
 80028c0:	434d      	muls	r5, r1
 80028c2:	6911      	ldr	r1, [r2, #16]
 80028c4:	fb01 f403 	mul.w	r4, r1, r3
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB888);
 80028c8:	2301      	movs	r3, #1
    refline = (JPEG_ConvertorParams.ScaledWidth) * yRef + (JPEG_ConvertorParams.bytes_pr_pixel * xRef);
 80028ca:	012d      	lsls	r5, r5, #4
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB888);
 80028cc:	6373      	str	r3, [r6, #52]	@ 0x34
    if (job.MCU_index >= (MCU_TotalNb - JPEG_ConvertorParams.MCU_pr_line))  /*  Last line of frame */
 80028ce:	683f      	ldr	r7, [r7, #0]
 80028d0:	68d3      	ldr	r3, [r2, #12]
 80028d2:	1aff      	subs	r7, r7, r3
    {
        WRITE_REG(DMA2D->NLR, (MCU_HEIGHT_PIXELS - JPEG_ConvertorParams.LastLineHeight | ((MCU_WIDTH_PIXELS * JPEG_ConvertorParams.MCU_pr_line) << DMA2D_NLR_PL_Pos)));
 80028d4:	0519      	lsls	r1, r3, #20
    if (job.MCU_index >= (MCU_TotalNb - JPEG_ConvertorParams.MCU_pr_line))  /*  Last line of frame */
 80028d6:	45bc      	cmp	ip, r7
 80028d8:	d317      	bcc.n	800290a <DMA2D_CopyBuffer+0x66>
        WRITE_REG(DMA2D->NLR, (MCU_HEIGHT_PIXELS - JPEG_ConvertorParams.LastLineHeight | ((MCU_WIDTH_PIXELS * JPEG_ConvertorParams.MCU_pr_line) << DMA2D_NLR_PL_Pos)));
 80028da:	6892      	ldr	r2, [r2, #8]
 80028dc:	f1c2 0210 	rsb	r2, r2, #16
 80028e0:	430a      	orrs	r2, r1
 80028e2:	6472      	str	r2, [r6, #68]	@ 0x44
    {
        WRITE_REG(DMA2D->NLR, (MCU_HEIGHT_PIXELS | ((MCU_WIDTH_PIXELS * JPEG_ConvertorParams.MCU_pr_line) << DMA2D_NLR_PL_Pos)));
    }

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, (reinterpret_cast<uint32_t>(FrameBufferAddress) + refline));
 80028e4:	4a0e      	ldr	r2, [pc, #56]	@ (8002920 <DMA2D_CopyBuffer+0x7c>)

    /* DMA2D OOR register configuration */
    WRITE_REG(DMA2D->OOR, 800 - (MCU_WIDTH_PIXELS * JPEG_ConvertorParams.MCU_pr_line));
 80028e6:	f1c3 0332 	rsb	r3, r3, #50	@ 0x32
    WRITE_REG(DMA2D->OMAR, (reinterpret_cast<uint32_t>(FrameBufferAddress) + refline));
 80028ea:	6811      	ldr	r1, [r2, #0]
    WRITE_REG(DMA2D->OOR, 800 - (MCU_WIDTH_PIXELS * JPEG_ConvertorParams.MCU_pr_line));
 80028ec:	011b      	lsls	r3, r3, #4
    WRITE_REG(DMA2D->OMAR, (reinterpret_cast<uint32_t>(FrameBufferAddress) + refline));
 80028ee:	4a0a      	ldr	r2, [pc, #40]	@ (8002918 <DMA2D_CopyBuffer+0x74>)
 80028f0:	4421      	add	r1, r4
 80028f2:	4429      	add	r1, r5
 80028f4:	63d1      	str	r1, [r2, #60]	@ 0x3c
    WRITE_REG(DMA2D->OOR, 800 - (MCU_WIDTH_PIXELS * JPEG_ConvertorParams.MCU_pr_line));
 80028f6:	6413      	str	r3, [r2, #64]	@ 0x40

    /* DMA2D FGOR register configuration */
    WRITE_REG(DMA2D->FGOR, 0);
 80028f8:	2300      	movs	r3, #0
 80028fa:	6113      	str	r3, [r2, #16]

    /* DMA2D FGPFCCR register configuration */
    WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_YCBCR | (DMA2D_CSS_420 << DMA2D_FGPFCCR_CSS_Pos) | (DMA2D_REPLACE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (0xFFU << DMA2D_FGPFCCR_ALPHA_Pos));
 80028fc:	4b09      	ldr	r3, [pc, #36]	@ (8002924 <DMA2D_CopyBuffer+0x80>)
 80028fe:	61d3      	str	r3, [r2, #28]

    /* Configure DMA2D source address */
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(job.DataBuffer));
 8002900:	6843      	ldr	r3, [r0, #4]
 8002902:	60d3      	str	r3, [r2, #12]

    /* Configure DMA2D contol register */
    WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START | DMA2D_IT_CE | DMA2D_IT_TE);
 8002904:	4b08      	ldr	r3, [pc, #32]	@ (8002928 <DMA2D_CopyBuffer+0x84>)
 8002906:	6013      	str	r3, [r2, #0]
}
 8002908:	bdf0      	pop	{r4, r5, r6, r7, pc}
        WRITE_REG(DMA2D->NLR, (MCU_HEIGHT_PIXELS | ((MCU_WIDTH_PIXELS * JPEG_ConvertorParams.MCU_pr_line) << DMA2D_NLR_PL_Pos)));
 800290a:	f041 0110 	orr.w	r1, r1, #16
 800290e:	6471      	str	r1, [r6, #68]	@ 0x44
 8002910:	e7e8      	b.n	80028e4 <DMA2D_CopyBuffer+0x40>
 8002912:	bf00      	nop
 8002914:	2400077c 	.word	0x2400077c
 8002918:	52001000 	.word	0x52001000
 800291c:	24009da8 	.word	0x24009da8
 8002920:	24009dc4 	.word	0x24009dc4
 8002924:	ff09000b 	.word	0xff09000b
 8002928:	00012301 	.word	0x00012301

0800292c <DMA2D_ExternalJobCompleted>:
void DMA2D_ExternalJobCompleted(JPEG_Data_BufferTypeDef& job)
{
    job.State = JPEG_BUFFER_EMPTY;
    job.DataBufferSize = 0;

    JPEG_OUT_Read_BufferIndex++;
 800292c:	4b0c      	ldr	r3, [pc, #48]	@ (8002960 <DMA2D_ExternalJobCompleted+0x34>)
    job.State = JPEG_BUFFER_EMPTY;
 800292e:	2200      	movs	r2, #0
 8002930:	7002      	strb	r2, [r0, #0]
    JPEG_OUT_Read_BufferIndex++;
 8002932:	6819      	ldr	r1, [r3, #0]
    job.DataBufferSize = 0;
 8002934:	6082      	str	r2, [r0, #8]
    JPEG_OUT_Read_BufferIndex++;
 8002936:	3101      	adds	r1, #1
 8002938:	6019      	str	r1, [r3, #0]
    if (JPEG_OUT_Read_BufferIndex >= NB_OUTPUT_DATA_BUFFERS)
 800293a:	6819      	ldr	r1, [r3, #0]
 800293c:	2901      	cmp	r1, #1
 800293e:	d900      	bls.n	8002942 <DMA2D_ExternalJobCompleted+0x16>
    {
        JPEG_OUT_Read_BufferIndex = 0;
 8002940:	601a      	str	r2, [r3, #0]
    }

    /* Check if last line */
    if (job.MCU_index >= (MCU_TotalNb - JPEG_ConvertorParams.MCU_pr_line))
 8002942:	4b08      	ldr	r3, [pc, #32]	@ (8002964 <DMA2D_ExternalJobCompleted+0x38>)
 8002944:	4a08      	ldr	r2, [pc, #32]	@ (8002968 <DMA2D_ExternalJobCompleted+0x3c>)
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	68d2      	ldr	r2, [r2, #12]
 800294a:	1a9b      	subs	r3, r3, r2
 800294c:	68c2      	ldr	r2, [r0, #12]
 800294e:	429a      	cmp	r2, r3
 8002950:	d302      	bcc.n	8002958 <DMA2D_ExternalJobCompleted+0x2c>
    {
        DMA2D_CopyBufferEnd = 1;
 8002952:	4b06      	ldr	r3, [pc, #24]	@ (800296c <DMA2D_ExternalJobCompleted+0x40>)
 8002954:	2201      	movs	r2, #1
 8002956:	601a      	str	r2, [r3, #0]
    }

    /* Signal decoder thread to wake up and continue decoding */
    SEM_POST(semDecodingDone);
 8002958:	4b05      	ldr	r3, [pc, #20]	@ (8002970 <DMA2D_ExternalJobCompleted+0x44>)
 800295a:	6818      	ldr	r0, [r3, #0]
 800295c:	f00a b88e 	b.w	800ca7c <osSemaphoreRelease>
 8002960:	24000794 	.word	0x24000794
 8002964:	24009da8 	.word	0x24009da8
 8002968:	2400077c 	.word	0x2400077c
 800296c:	24000790 	.word	0x24000790
 8002970:	24000798 	.word	0x24000798

08002974 <_ZN8touchgfx10OSWrappers10initializeEv>:
 * Initialize frame buffer semaphore and queue/mutex for VSYNC signal.
 */
void OSWrappers::initialize()
{
    // Create a queue of length 1
    frame_buffer_sem = osSemaphoreNew(1, 1, NULL); // Binary semaphore
 8002974:	2101      	movs	r1, #1
 8002976:	2200      	movs	r2, #0
{
 8002978:	b508      	push	{r3, lr}
    frame_buffer_sem = osSemaphoreNew(1, 1, NULL); // Binary semaphore
 800297a:	4608      	mov	r0, r1
 800297c:	f00a f808 	bl	800c990 <osSemaphoreNew>
 8002980:	4b0a      	ldr	r3, [pc, #40]	@ (80029ac <_ZN8touchgfx10OSWrappers10initializeEv+0x38>)
 8002982:	6018      	str	r0, [r3, #0]
    assert((frame_buffer_sem != NULL) && "Creation of framebuffer semaphore failed");
 8002984:	b928      	cbnz	r0, 8002992 <_ZN8touchgfx10OSWrappers10initializeEv+0x1e>
 8002986:	4b0a      	ldr	r3, [pc, #40]	@ (80029b0 <_ZN8touchgfx10OSWrappers10initializeEv+0x3c>)
 8002988:	2128      	movs	r1, #40	@ 0x28
 800298a:	4a0a      	ldr	r2, [pc, #40]	@ (80029b4 <_ZN8touchgfx10OSWrappers10initializeEv+0x40>)

    // Create a queue of length 1
    vsync_queue = osMessageQueueNew(1, 4, NULL);
    assert((vsync_queue != NULL) && "Creation of vsync message queue failed");
 800298c:	480a      	ldr	r0, [pc, #40]	@ (80029b8 <_ZN8touchgfx10OSWrappers10initializeEv+0x44>)
 800298e:	f024 fc77 	bl	8027280 <__assert_func>
    vsync_queue = osMessageQueueNew(1, 4, NULL);
 8002992:	2200      	movs	r2, #0
 8002994:	2104      	movs	r1, #4
 8002996:	2001      	movs	r0, #1
 8002998:	f00a f899 	bl	800cace <osMessageQueueNew>
 800299c:	4b07      	ldr	r3, [pc, #28]	@ (80029bc <_ZN8touchgfx10OSWrappers10initializeEv+0x48>)
 800299e:	6018      	str	r0, [r3, #0]
    assert((vsync_queue != NULL) && "Creation of vsync message queue failed");
 80029a0:	b918      	cbnz	r0, 80029aa <_ZN8touchgfx10OSWrappers10initializeEv+0x36>
 80029a2:	4b07      	ldr	r3, [pc, #28]	@ (80029c0 <_ZN8touchgfx10OSWrappers10initializeEv+0x4c>)
 80029a4:	212c      	movs	r1, #44	@ 0x2c
 80029a6:	4a03      	ldr	r2, [pc, #12]	@ (80029b4 <_ZN8touchgfx10OSWrappers10initializeEv+0x40>)
 80029a8:	e7f0      	b.n	800298c <_ZN8touchgfx10OSWrappers10initializeEv+0x18>
}
 80029aa:	bd08      	pop	{r3, pc}
 80029ac:	24009dcc 	.word	0x24009dcc
 80029b0:	0802898c 	.word	0x0802898c
 80029b4:	080289d5 	.word	0x080289d5
 80029b8:	08028a04 	.word	0x08028a04
 80029bc:	24009dc8 	.word	0x24009dc8
 80029c0:	08028a52 	.word	0x08028a52

080029c4 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>:
/*
 * Take the frame buffer semaphore. Blocks until semaphore is available.
 */
void OSWrappers::takeFrameBufferSemaphore()
{
    osSemaphoreAcquire(frame_buffer_sem, osWaitForever);
 80029c4:	4b02      	ldr	r3, [pc, #8]	@ (80029d0 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0xc>)
 80029c6:	f04f 31ff 	mov.w	r1, #4294967295
 80029ca:	6818      	ldr	r0, [r3, #0]
 80029cc:	f00a b82a 	b.w	800ca24 <osSemaphoreAcquire>
 80029d0:	24009dcc 	.word	0x24009dcc

080029d4 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>:
/*
 * Release the frame buffer semaphore.
 */
void OSWrappers::giveFrameBufferSemaphore()
{
    osSemaphoreRelease(frame_buffer_sem);
 80029d4:	4b01      	ldr	r3, [pc, #4]	@ (80029dc <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0x8>)
 80029d6:	6818      	ldr	r0, [r3, #0]
 80029d8:	f00a b850 	b.w	800ca7c <osSemaphoreRelease>
 80029dc:	24009dcc 	.word	0x24009dcc

080029e0 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>:
 * Note must return immediately! This function does not care who has the taken the semaphore,
 * it only serves to make sure that the semaphore is taken by someone.
 */
void OSWrappers::tryTakeFrameBufferSemaphore()
{
    osSemaphoreAcquire(frame_buffer_sem, 0);
 80029e0:	4b02      	ldr	r3, [pc, #8]	@ (80029ec <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv+0xc>)
 80029e2:	2100      	movs	r1, #0
 80029e4:	6818      	ldr	r0, [r3, #0]
 80029e6:	f00a b81d 	b.w	800ca24 <osSemaphoreAcquire>
 80029ea:	bf00      	nop
 80029ec:	24009dcc 	.word	0x24009dcc

080029f0 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>:
 * from ISR.
 *
 * Release the frame buffer semaphore in a way that is safe in interrupt context.
 * Called from ISR.
 */
void OSWrappers::giveFrameBufferSemaphoreFromISR()
 80029f0:	f7ff bff0 	b.w	80029d4 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

080029f4 <_ZN8touchgfx10OSWrappers11signalVSyncEv>:
 * Note This function is called from an ISR, and should (depending on OS) trigger a
 * scheduling.
 */
void OSWrappers::signalVSync()
{
    osMessageQueuePut(vsync_queue, &dummy, 0, 0);
 80029f4:	2300      	movs	r3, #0
 80029f6:	4803      	ldr	r0, [pc, #12]	@ (8002a04 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x10>)
 80029f8:	4903      	ldr	r1, [pc, #12]	@ (8002a08 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x14>)
 80029fa:	461a      	mov	r2, r3
 80029fc:	6800      	ldr	r0, [r0, #0]
 80029fe:	f00a b8a1 	b.w	800cb44 <osMessageQueuePut>
 8002a02:	bf00      	nop
 8002a04:	24009dc8 	.word	0x24009dc8
 8002a08:	24000030 	.word	0x24000030

08002a0c <_ZN8touchgfx10OSWrappers12waitForVSyncEv>:
 *
 * Note This function must first clear the mutex/queue and then wait for the next one to
 * occur.
 */
void OSWrappers::waitForVSync()
{
 8002a0c:	b513      	push	{r0, r1, r4, lr}
    uint32_t dummyGet;
    // First make sure the queue is empty, by trying to remove an element with 0 timeout.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, 0);
 8002a0e:	2300      	movs	r3, #0
 8002a10:	4c07      	ldr	r4, [pc, #28]	@ (8002a30 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x24>)
 8002a12:	a901      	add	r1, sp, #4
 8002a14:	461a      	mov	r2, r3
 8002a16:	6820      	ldr	r0, [r4, #0]
 8002a18:	f00a f8c5 	bl	800cba6 <osMessageQueueGet>

    // Then, wait for next VSYNC to occur.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, osWaitForever);
 8002a1c:	f04f 33ff 	mov.w	r3, #4294967295
 8002a20:	2200      	movs	r2, #0
 8002a22:	a901      	add	r1, sp, #4
 8002a24:	6820      	ldr	r0, [r4, #0]
 8002a26:	f00a f8be 	bl	800cba6 <osMessageQueueGet>
}
 8002a2a:	b002      	add	sp, #8
 8002a2c:	bd10      	pop	{r4, pc}
 8002a2e:	bf00      	nop
 8002a30:	24009dc8 	.word	0x24009dc8

08002a34 <_ZN8touchgfx13DMA_Interface5flushEv>:
        waitForFrameBufferSemaphore();
 8002a34:	6803      	ldr	r3, [r0, #0]
 8002a36:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a38:	4718      	bx	r3

08002a3a <_ZN8STM32DMA10getDMATypeEv>:
     * @return a DMAType value of the concrete DMA_Interface implementation.
     */
    virtual touchgfx::DMAType getDMAType(void)
    {
        return touchgfx::DMA_TYPE_CHROMART;
    }
 8002a3a:	2001      	movs	r0, #1
 8002a3c:	4770      	bx	lr

08002a3e <DMA2D_XferErrorCallback>:
    }

    static void DMA2D_XferErrorCallback(DMA2D_HandleTypeDef* handle)
    {
        (void)handle; // Unused argument
        while (1)
 8002a3e:	e7fe      	b.n	8002a3e <DMA2D_XferErrorCallback>

08002a40 <_ZN8STM32DMA11getBlitCapsEv>:
                                       | BLIT_OP_COPY_WITH_ALPHA
                                       | BLIT_OP_COPY_ARGB8888
                                       | BLIT_OP_COPY_ARGB8888_WITH_ALPHA
                                       | BLIT_OP_COPY_A4
                                       | BLIT_OP_COPY_A8);
}
 8002a40:	f240 30ef 	movw	r0, #1007	@ 0x3ef
 8002a44:	4770      	bx	lr
	...

08002a48 <_ZN8STM32DMA5startEv>:
                execute();
            }
        }
    }

    virtual void start()
 8002a48:	b510      	push	{r4, lr}
 8002a4a:	4604      	mov	r4, r0
    {
        MUTEX_LOCK(mutexIsRunning);
 8002a4c:	f04f 31ff 	mov.w	r1, #4294967295
 8002a50:	f8d0 0da4 	ldr.w	r0, [r0, #3492]	@ 0xda4
 8002a54:	f009 ff5a 	bl	800c90c <osMutexAcquire>
        if (!queue.isEmpty() && isAllowed && !isRunning)
 8002a58:	6860      	ldr	r0, [r4, #4]
 8002a5a:	6803      	ldr	r3, [r0, #0]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	4798      	blx	r3
 8002a60:	b978      	cbnz	r0, 8002a82 <_ZN8STM32DMA5startEv+0x3a>
 8002a62:	7a63      	ldrb	r3, [r4, #9]
 8002a64:	b16b      	cbz	r3, 8002a82 <_ZN8STM32DMA5startEv+0x3a>
 8002a66:	7a23      	ldrb	r3, [r4, #8]
 8002a68:	b95b      	cbnz	r3, 8002a82 <_ZN8STM32DMA5startEv+0x3a>
        {
            started_by_external_job = false;
 8002a6a:	f884 3da0 	strb.w	r3, [r4, #3488]	@ 0xda0
            execute();
 8002a6e:	4620      	mov	r0, r4
 8002a70:	6823      	ldr	r3, [r4, #0]
 8002a72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a74:	4798      	blx	r3
        else if ((Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex].State == JPEG_BUFFER_FULL) && !isRunning && !isReserved)
        {
            started_by_external_job = true;
            externalJobExecute();
        }
        MUTEX_UNLOCK(mutexIsRunning);
 8002a76:	f8d4 0da4 	ldr.w	r0, [r4, #3492]	@ 0xda4
    }
 8002a7a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        MUTEX_UNLOCK(mutexIsRunning);
 8002a7e:	f009 bf68 	b.w	800c952 <osMutexRelease>
        else if ((Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex].State == JPEG_BUFFER_FULL) && !isRunning && !isReserved)
 8002a82:	490b      	ldr	r1, [pc, #44]	@ (8002ab0 <_ZN8STM32DMA5startEv+0x68>)
 8002a84:	4a0b      	ldr	r2, [pc, #44]	@ (8002ab4 <_ZN8STM32DMA5startEv+0x6c>)
 8002a86:	680b      	ldr	r3, [r1, #0]
 8002a88:	011b      	lsls	r3, r3, #4
 8002a8a:	5cd3      	ldrb	r3, [r2, r3]
 8002a8c:	2b01      	cmp	r3, #1
 8002a8e:	d1f2      	bne.n	8002a76 <_ZN8STM32DMA5startEv+0x2e>
 8002a90:	7a20      	ldrb	r0, [r4, #8]
 8002a92:	2800      	cmp	r0, #0
 8002a94:	d1ef      	bne.n	8002a76 <_ZN8STM32DMA5startEv+0x2e>
 8002a96:	7aa0      	ldrb	r0, [r4, #10]
 8002a98:	2800      	cmp	r0, #0
 8002a9a:	d1ec      	bne.n	8002a76 <_ZN8STM32DMA5startEv+0x2e>
     * @param None
     */
    void externalJobExecute()
    {
        isRunning = true;
        DMA2D_CopyBuffer(Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex]);
 8002a9c:	6808      	ldr	r0, [r1, #0]
            started_by_external_job = true;
 8002a9e:	f884 3da0 	strb.w	r3, [r4, #3488]	@ 0xda0
        DMA2D_CopyBuffer(Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex]);
 8002aa2:	eb02 1000 	add.w	r0, r2, r0, lsl #4
        isRunning = true;
 8002aa6:	7223      	strb	r3, [r4, #8]
        DMA2D_CopyBuffer(Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex]);
 8002aa8:	f7ff fefc 	bl	80028a4 <DMA2D_CopyBuffer>
    }
 8002aac:	e7e3      	b.n	8002a76 <_ZN8STM32DMA5startEv+0x2e>
 8002aae:	bf00      	nop
 8002ab0:	24000794 	.word	0x24000794
 8002ab4:	24000010 	.word	0x24000010

08002ab8 <_ZN8STM32DMAD1Ev>:
STM32DMA::~STM32DMA()
 8002ab8:	4b05      	ldr	r3, [pc, #20]	@ (8002ad0 <_ZN8STM32DMAD1Ev+0x18>)
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002aba:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8002abe:	6003      	str	r3, [r0, #0]
 8002ac0:	4b04      	ldr	r3, [pc, #16]	@ (8002ad4 <_ZN8STM32DMAD1Ev+0x1c>)
 8002ac2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  __ASM volatile ("dsb 0xF":::"memory");
 8002ac6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8002aca:	f3bf 8f6f 	isb	sy
}
 8002ace:	4770      	bx	lr
 8002ad0:	08028bf0 	.word	0x08028bf0
 8002ad4:	e000e100 	.word	0xe000e100

08002ad8 <_ZN8STM32DMAD0Ev>:
STM32DMA::~STM32DMA()
 8002ad8:	b510      	push	{r4, lr}
 8002ada:	4604      	mov	r4, r0
}
 8002adc:	f640 51a8 	movw	r1, #3496	@ 0xda8
 8002ae0:	f7ff ffea 	bl	8002ab8 <_ZN8STM32DMAD1Ev>
 8002ae4:	4620      	mov	r0, r4
 8002ae6:	f024 f852 	bl	8026b8e <_ZdlPvj>
 8002aea:	4620      	mov	r0, r4
 8002aec:	bd10      	pop	{r4, pc}
	...

08002af0 <_ZN8STM32DMA10initializeEv>:
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8002af0:	4b10      	ldr	r3, [pc, #64]	@ (8002b34 <_ZN8STM32DMA10initializeEv+0x44>)
{
 8002af2:	b082      	sub	sp, #8
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8002af4:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 8002af8:	f042 0210 	orr.w	r2, r2, #16
 8002afc:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
 8002b00:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 8002b04:	f002 0210 	and.w	r2, r2, #16
 8002b08:	9201      	str	r2, [sp, #4]
 8002b0a:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_DMA2D_FORCE_RESET();
 8002b0c:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 8002b0e:	f042 0210 	orr.w	r2, r2, #16
 8002b12:	67da      	str	r2, [r3, #124]	@ 0x7c
    __HAL_RCC_DMA2D_RELEASE_RESET();
 8002b14:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 8002b16:	f022 0210 	bic.w	r2, r2, #16
 8002b1a:	67da      	str	r2, [r3, #124]	@ 0x7c
    hdma2d.XferCpltCallback = DMA2D_XferCpltCallback;
 8002b1c:	4b06      	ldr	r3, [pc, #24]	@ (8002b38 <_ZN8STM32DMA10initializeEv+0x48>)
 8002b1e:	4a07      	ldr	r2, [pc, #28]	@ (8002b3c <_ZN8STM32DMA10initializeEv+0x4c>)
 8002b20:	621a      	str	r2, [r3, #32]
    hdma2d.XferErrorCallback = DMA2D_XferErrorCallback;
 8002b22:	4a07      	ldr	r2, [pc, #28]	@ (8002b40 <_ZN8STM32DMA10initializeEv+0x50>)
 8002b24:	625a      	str	r2, [r3, #36]	@ 0x24
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b26:	4b07      	ldr	r3, [pc, #28]	@ (8002b44 <_ZN8STM32DMA10initializeEv+0x54>)
 8002b28:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8002b2c:	609a      	str	r2, [r3, #8]
}
 8002b2e:	b002      	add	sp, #8
 8002b30:	4770      	bx	lr
 8002b32:	bf00      	nop
 8002b34:	58024400 	.word	0x58024400
 8002b38:	24000608 	.word	0x24000608
 8002b3c:	08002d8d 	.word	0x08002d8d
 8002b40:	08002a3f 	.word	0x08002a3f
 8002b44:	e000e100 	.word	0xe000e100

08002b48 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0>:
inline uint32_t STM32DMA::getChromARTOutputFormat(Bitmap::BitmapFormat format)
 8002b48:	b508      	push	{r3, lr}
    switch (format)
 8002b4a:	280a      	cmp	r0, #10
 8002b4c:	d809      	bhi.n	8002b62 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x1a>
 8002b4e:	e8df f000 	tbb	[pc, r0]
 8002b52:	1006      	.short	0x1006
 8002b54:	0808080e 	.word	0x0808080e
 8002b58:	10101008 	.word	0x10101008
 8002b5c:	10          	.byte	0x10
 8002b5d:	00          	.byte	0x00
        dma2dColorMode = DMA2D_OUTPUT_RGB565;
 8002b5e:	2002      	movs	r0, #2
}
 8002b60:	bd08      	pop	{r3, pc}
        assert(0 && "Unsupported Format!");
 8002b62:	4b05      	ldr	r3, [pc, #20]	@ (8002b78 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x30>)
 8002b64:	2191      	movs	r1, #145	@ 0x91
 8002b66:	4a05      	ldr	r2, [pc, #20]	@ (8002b7c <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x34>)
 8002b68:	4805      	ldr	r0, [pc, #20]	@ (8002b80 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x38>)
 8002b6a:	f024 fb89 	bl	8027280 <__assert_func>
        dma2dColorMode = DMA2D_OUTPUT_ARGB8888;
 8002b6e:	2000      	movs	r0, #0
 8002b70:	e7f6      	b.n	8002b60 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x18>
    switch (format)
 8002b72:	2001      	movs	r0, #1
    return dma2dColorMode;
 8002b74:	e7f4      	b.n	8002b60 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x18>
 8002b76:	bf00      	nop
 8002b78:	08028a94 	.word	0x08028a94
 8002b7c:	08028aaf 	.word	0x08028aaf
 8002b80:	08028afa 	.word	0x08028afa

08002b84 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE>:
 * void STM32DMA::setupDataFill(const BlitOp& blitOp) handles blit operation of
 * BLIT_OP_FILL
 * BLIT_OP_FILL_WITH_ALPHA
 */
void STM32DMA::setupDataFill(const BlitOp& blitOp)
{
 8002b84:	b538      	push	{r3, r4, r5, lr}
 8002b86:	460c      	mov	r4, r1
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8002b88:	7f88      	ldrb	r0, [r1, #30]
 8002b8a:	f7ff ffdd 	bl	8002b48 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0>

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 8002b8e:	4b12      	ldr	r3, [pc, #72]	@ (8002bd8 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x54>)

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8002b90:	8aa5      	ldrh	r5, [r4, #20]
 8002b92:	8ae2      	ldrh	r2, [r4, #22]
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 8002b94:	6358      	str	r0, [r3, #52]	@ 0x34
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8002b96:	ea42 4205 	orr.w	r2, r2, r5, lsl #16

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8002b9a:	6921      	ldr	r1, [r4, #16]
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8002b9c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* DMA2D OOR register configuration */
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 8002b9e:	8b62      	ldrh	r2, [r4, #26]
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8002ba0:	63d9      	str	r1, [r3, #60]	@ 0x3c
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 8002ba2:	1b52      	subs	r2, r2, r5
 8002ba4:	641a      	str	r2, [r3, #64]	@ 0x40

    if (blitOp.operation == BLIT_OP_FILL_WITH_ALPHA)
 8002ba6:	6825      	ldr	r5, [r4, #0]
 8002ba8:	2d08      	cmp	r5, #8
 8002baa:	d10e      	bne.n	8002bca <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x46>
    {
        /* DMA2D BGOR register configuration */
        WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 8002bac:	619a      	str	r2, [r3, #24]

        /* DMA2D FGOR register configuration */
        WRITE_REG(DMA2D->FGOR, blitOp.dstLoopStride - blitOp.nSteps);
 8002bae:	611a      	str	r2, [r3, #16]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8002bb0:	6258      	str	r0, [r3, #36]	@ 0x24

        /* Write DMA2D FGPFCCR register */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_REPLACE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | ((blitOp.alpha << 24) & DMA2D_FGPFCCR_ALPHA));
 8002bb2:	4a0a      	ldr	r2, [pc, #40]	@ (8002bdc <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x58>)
 8002bb4:	7f20      	ldrb	r0, [r4, #28]
 8002bb6:	ea42 6200 	orr.w	r2, r2, r0, lsl #24
 8002bba:	61da      	str	r2, [r3, #28]
        return color;
 8002bbc:	68e2      	ldr	r2, [r4, #12]

        /* DMA2D FGCOLR register configuration */
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 8002bbe:	621a      	str	r2, [r3, #32]

        /* Configure DMA2D source address */
        WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_M2M_BLEND | DMA2D_IT_CE | DMA2D_IT_TE));
 8002bc0:	4a07      	ldr	r2, [pc, #28]	@ (8002be0 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x5c>)
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8002bc2:	6159      	str	r1, [r3, #20]
        WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8002bc4:	60d9      	str	r1, [r3, #12]

        /* Set color */
        WRITE_REG(DMA2D->OCOLR, blitOp.color);

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M | DMA2D_IT_CE | DMA2D_IT_TE));
 8002bc6:	601a      	str	r2, [r3, #0]
    }
}
 8002bc8:	bd38      	pop	{r3, r4, r5, pc}
        WRITE_REG(DMA2D->FGOR, 0);
 8002bca:	2200      	movs	r2, #0
        WRITE_REG(DMA2D->FGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_FGPFCCR_AM_Pos));
 8002bcc:	61d8      	str	r0, [r3, #28]
        WRITE_REG(DMA2D->FGOR, 0);
 8002bce:	611a      	str	r2, [r3, #16]
 8002bd0:	68e2      	ldr	r2, [r4, #12]
        WRITE_REG(DMA2D->OCOLR, blitOp.color);
 8002bd2:	639a      	str	r2, [r3, #56]	@ 0x38
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M | DMA2D_IT_CE | DMA2D_IT_TE));
 8002bd4:	4a03      	ldr	r2, [pc, #12]	@ (8002be4 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x60>)
 8002bd6:	e7f6      	b.n	8002bc6 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x42>
 8002bd8:	52001000 	.word	0x52001000
 8002bdc:	00010009 	.word	0x00010009
 8002be0:	00022301 	.word	0x00022301
 8002be4:	00032301 	.word	0x00032301

08002be8 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0>:
inline uint32_t STM32DMA::getChromARTInputFormat(Bitmap::BitmapFormat format)
 8002be8:	b508      	push	{r3, lr}
    switch (format)
 8002bea:	280b      	cmp	r0, #11
 8002bec:	d80b      	bhi.n	8002c06 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x1e>
 8002bee:	e8df f000 	tbb	[pc, r0]
 8002bf2:	1206      	.short	0x1206
 8002bf4:	0a0a0a10 	.word	0x0a0a0a10
 8002bf8:	0808080a 	.word	0x0808080a
 8002bfc:	0808      	.short	0x0808
        dma2dColorMode = DMA2D_INPUT_RGB565;
 8002bfe:	2002      	movs	r0, #2
}
 8002c00:	bd08      	pop	{r3, pc}
        dma2dColorMode = DMA2D_INPUT_L8;
 8002c02:	2005      	movs	r0, #5
        break;
 8002c04:	e7fc      	b.n	8002c00 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x18>
        assert(0 && "Unsupported Format!");
 8002c06:	4b05      	ldr	r3, [pc, #20]	@ (8002c1c <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x34>)
 8002c08:	2170      	movs	r1, #112	@ 0x70
 8002c0a:	4a05      	ldr	r2, [pc, #20]	@ (8002c20 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x38>)
 8002c0c:	4805      	ldr	r0, [pc, #20]	@ (8002c24 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x3c>)
 8002c0e:	f024 fb37 	bl	8027280 <__assert_func>
        dma2dColorMode = DMA2D_INPUT_ARGB8888;
 8002c12:	2000      	movs	r0, #0
 8002c14:	e7f4      	b.n	8002c00 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x18>
    switch (format)
 8002c16:	2001      	movs	r0, #1
    return dma2dColorMode;
 8002c18:	e7f2      	b.n	8002c00 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x18>
 8002c1a:	bf00      	nop
 8002c1c:	08028a94 	.word	0x08028a94
 8002c20:	08028b46 	.word	0x08028b46
 8002c24:	08028afa 	.word	0x08028afa

08002c28 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE>:
{
 8002c28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
 8002c2c:	7f4f      	ldrb	r7, [r1, #29]
{
 8002c2e:	4689      	mov	r9, r1
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
 8002c30:	4638      	mov	r0, r7
 8002c32:	f7ff ffd9 	bl	8002be8 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0>
    uint32_t dma2dBackgroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8002c36:	f899 501e 	ldrb.w	r5, [r9, #30]
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
 8002c3a:	4680      	mov	r8, r0
    uint32_t dma2dBackgroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8002c3c:	4628      	mov	r0, r5
 8002c3e:	f7ff ffd3 	bl	8002be8 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0>
 8002c42:	4606      	mov	r6, r0
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8002c44:	4628      	mov	r0, r5
 8002c46:	f7ff ff7f 	bl	8002b48 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0>
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 8002c4a:	f8b9 1014 	ldrh.w	r1, [r9, #20]
 8002c4e:	f8b9 401a 	ldrh.w	r4, [r9, #26]
    WRITE_REG(DMA2D->FGOR, blitOp.srcLoopStride - blitOp.nSteps);
 8002c52:	f8b9 2018 	ldrh.w	r2, [r9, #24]
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 8002c56:	4b45      	ldr	r3, [pc, #276]	@ (8002d6c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x144>)
 8002c58:	1a64      	subs	r4, r4, r1
    WRITE_REG(DMA2D->FGOR, blitOp.srcLoopStride - blitOp.nSteps);
 8002c5a:	1a52      	subs	r2, r2, r1
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 8002c5c:	641c      	str	r4, [r3, #64]	@ 0x40
    WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 8002c5e:	619c      	str	r4, [r3, #24]
    WRITE_REG(DMA2D->FGOR, blitOp.srcLoopStride - blitOp.nSteps);
 8002c60:	611a      	str	r2, [r3, #16]
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8002c62:	f8b9 2016 	ldrh.w	r2, [r9, #22]
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 8002c66:	6358      	str	r0, [r3, #52]	@ 0x34
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8002c68:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8002c6c:	f8d9 1010 	ldr.w	r1, [r9, #16]
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8002c70:	645a      	str	r2, [r3, #68]	@ 0x44
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pSrc));
 8002c72:	f8d9 2004 	ldr.w	r2, [r9, #4]
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8002c76:	63d9      	str	r1, [r3, #60]	@ 0x3c
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pSrc));
 8002c78:	60da      	str	r2, [r3, #12]
    switch (blitOp.operation)
 8002c7a:	f8d9 4000 	ldr.w	r4, [r9]
 8002c7e:	f899 201c 	ldrb.w	r2, [r9, #28]
 8002c82:	2c80      	cmp	r4, #128	@ 0x80
 8002c84:	d022      	beq.n	8002ccc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xa4>
 8002c86:	d80f      	bhi.n	8002ca8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x80>
 8002c88:	2c20      	cmp	r4, #32
 8002c8a:	d066      	beq.n	8002d5a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x132>
 8002c8c:	2c40      	cmp	r4, #64	@ 0x40
 8002c8e:	d064      	beq.n	8002d5a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x132>
 8002c90:	2c04      	cmp	r4, #4
 8002c92:	d05c      	beq.n	8002d4e <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x126>
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8002c94:	ea48 6002 	orr.w	r0, r8, r2, lsl #24
 8002c98:	4b34      	ldr	r3, [pc, #208]	@ (8002d6c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x144>)
        if (blitOp.srcFormat != blitOp.dstFormat)
 8002c9a:	42af      	cmp	r7, r5
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8002c9c:	f440 3000 	orr.w	r0, r0, #131072	@ 0x20000
 8002ca0:	61d8      	str	r0, [r3, #28]
        if (blitOp.srcFormat != blitOp.dstFormat)
 8002ca2:	d060      	beq.n	8002d66 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x13e>
            WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START | DMA2D_IT_CE | DMA2D_IT_TE);
 8002ca4:	4a32      	ldr	r2, [pc, #200]	@ (8002d70 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x148>)
 8002ca6:	e03f      	b.n	8002d28 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x100>
    switch (blitOp.operation)
 8002ca8:	f5b4 7f80 	cmp.w	r4, #256	@ 0x100
 8002cac:	d004      	beq.n	8002cb8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x90>
 8002cae:	f5b4 7f00 	cmp.w	r4, #512	@ 0x200
 8002cb2:	d1ef      	bne.n	8002c94 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x6c>
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8002cb4:	482f      	ldr	r0, [pc, #188]	@ (8002d74 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x14c>)
 8002cb6:	e000      	b.n	8002cba <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x92>
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A4 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8002cb8:	482f      	ldr	r0, [pc, #188]	@ (8002d78 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x150>)
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8002cba:	ea40 6202 	orr.w	r2, r0, r2, lsl #24
 8002cbe:	61da      	str	r2, [r3, #28]
 8002cc0:	f8d9 200c 	ldr.w	r2, [r9, #12]
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 8002cc4:	621a      	str	r2, [r3, #32]
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8002cc6:	625e      	str	r6, [r3, #36]	@ 0x24
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8002cc8:	6159      	str	r1, [r3, #20]
 8002cca:	e02c      	b.n	8002d26 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xfe>
            WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8002ccc:	ea48 6002 	orr.w	r0, r8, r2, lsl #24
            const clutData_t* const palette = reinterpret_cast<const clutData_t*>(blitOp.pClut);
 8002cd0:	f8d9 4008 	ldr.w	r4, [r9, #8]
            WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8002cd4:	f440 3000 	orr.w	r0, r0, #131072	@ 0x20000
 8002cd8:	61d8      	str	r0, [r3, #28]
            WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8002cda:	625e      	str	r6, [r3, #36]	@ 0x24
            WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8002cdc:	6159      	str	r1, [r3, #20]
            WRITE_REG(DMA2D->FGCMAR, reinterpret_cast<uint32_t>(&palette->data));
 8002cde:	1d21      	adds	r1, r4, #4
 8002ce0:	62d9      	str	r1, [r3, #44]	@ 0x2c
            switch ((Bitmap::ClutFormat)palette->format)
 8002ce2:	7821      	ldrb	r1, [r4, #0]
 8002ce4:	b141      	cbz	r1, 8002cf8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xd0>
 8002ce6:	2901      	cmp	r1, #1
 8002ce8:	d021      	beq.n	8002d2e <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x106>
                assert(0 && "Unsupported format");
 8002cea:	4b24      	ldr	r3, [pc, #144]	@ (8002d7c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x154>)
 8002cec:	f240 110b 	movw	r1, #267	@ 0x10b
 8002cf0:	4a23      	ldr	r2, [pc, #140]	@ (8002d80 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x158>)
 8002cf2:	4824      	ldr	r0, [pc, #144]	@ (8002d84 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x15c>)
 8002cf4:	f024 fac4 	bl	8027280 <__assert_func>
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_ARGB8888 << DMA2D_FGPFCCR_CCM_Pos)));
 8002cf8:	69da      	ldr	r2, [r3, #28]
 8002cfa:	8861      	ldrh	r1, [r4, #2]
 8002cfc:	f422 427f 	bic.w	r2, r2, #65280	@ 0xff00
 8002d00:	3901      	subs	r1, #1
 8002d02:	f022 0210 	bic.w	r2, r2, #16
 8002d06:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002d0a:	61da      	str	r2, [r3, #28]
            bool blend = true;
 8002d0c:	2201      	movs	r2, #1
            SET_BIT(DMA2D->FGPFCCR, DMA2D_FGPFCCR_START);
 8002d0e:	4b17      	ldr	r3, [pc, #92]	@ (8002d6c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x144>)
 8002d10:	69d9      	ldr	r1, [r3, #28]
 8002d12:	f041 0120 	orr.w	r1, r1, #32
 8002d16:	61d9      	str	r1, [r3, #28]
            while ((READ_REG(DMA2D->FGPFCCR) & DMA2D_FGPFCCR_START) != 0U)
 8002d18:	69d9      	ldr	r1, [r3, #28]
 8002d1a:	0689      	lsls	r1, r1, #26
 8002d1c:	d4fc      	bmi.n	8002d18 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xf0>
            DMA2D->IFCR = (DMA2D_FLAG_CTC);
 8002d1e:	2110      	movs	r1, #16
 8002d20:	6099      	str	r1, [r3, #8]
            if (blend)
 8002d22:	2a00      	cmp	r2, #0
 8002d24:	d0be      	beq.n	8002ca4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x7c>
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START | DMA2D_IT_CE | DMA2D_IT_TE);
 8002d26:	4a18      	ldr	r2, [pc, #96]	@ (8002d88 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x160>)
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START | DMA2D_IT_CE | DMA2D_IT_TE);
 8002d28:	601a      	str	r2, [r3, #0]
}
 8002d2a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
 8002d2e:	69d9      	ldr	r1, [r3, #28]
                if (blitOp.alpha == 255)
 8002d30:	3aff      	subs	r2, #255	@ 0xff
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
 8002d32:	8860      	ldrh	r0, [r4, #2]
 8002d34:	f421 417f 	bic.w	r1, r1, #65280	@ 0xff00
                if (blitOp.alpha == 255)
 8002d38:	bf18      	it	ne
 8002d3a:	2201      	movne	r2, #1
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
 8002d3c:	3801      	subs	r0, #1
 8002d3e:	f021 0110 	bic.w	r1, r1, #16
 8002d42:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
 8002d46:	f041 0110 	orr.w	r1, r1, #16
 8002d4a:	61d9      	str	r1, [r3, #28]
                break;
 8002d4c:	e7df      	b.n	8002d0e <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xe6>
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8002d4e:	ea48 6202 	orr.w	r2, r8, r2, lsl #24
 8002d52:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8002d56:	61da      	str	r2, [r3, #28]
 8002d58:	e7b5      	b.n	8002cc6 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x9e>
 8002d5a:	ea48 6202 	orr.w	r2, r8, r2, lsl #24
 8002d5e:	4b03      	ldr	r3, [pc, #12]	@ (8002d6c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x144>)
 8002d60:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8002d64:	e7f7      	b.n	8002d56 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x12e>
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START | DMA2D_IT_CE | DMA2D_IT_TE);
 8002d66:	f242 3201 	movw	r2, #8961	@ 0x2301
 8002d6a:	e7dd      	b.n	8002d28 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x100>
 8002d6c:	52001000 	.word	0x52001000
 8002d70:	00012301 	.word	0x00012301
 8002d74:	00020009 	.word	0x00020009
 8002d78:	0002000a 	.word	0x0002000a
 8002d7c:	08028b90 	.word	0x08028b90
 8002d80:	08028baa 	.word	0x08028baa
 8002d84:	08028afa 	.word	0x08028afa
 8002d88:	00022301 	.word	0x00022301

08002d8c <DMA2D_XferCpltCallback>:
 8002d8c:	4b02      	ldr	r3, [pc, #8]	@ (8002d98 <DMA2D_XferCpltCallback+0xc>)
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	6858      	ldr	r0, [r3, #4]
        dma.signalDMAInterrupt();
 8002d92:	6803      	ldr	r3, [r0, #0]
 8002d94:	695b      	ldr	r3, [r3, #20]
 8002d96:	4718      	bx	r3
 8002d98:	24028e20 	.word	0x24028e20

08002d9c <_ZN8STM32DMA18signalDMAInterruptEv>:
        if (!started_by_external_job)
 8002d9c:	f890 3da0 	ldrb.w	r3, [r0, #3488]	@ 0xda0
    virtual void signalDMAInterrupt()
 8002da0:	b510      	push	{r4, lr}
 8002da2:	4604      	mov	r4, r0
        if (!started_by_external_job)
 8002da4:	b9d3      	cbnz	r3, 8002ddc <_ZN8STM32DMA18signalDMAInterruptEv+0x40>
            executeCompleted();
 8002da6:	6803      	ldr	r3, [r0, #0]
 8002da8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002daa:	4798      	blx	r3
            if (Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex].State == JPEG_BUFFER_FULL && !DMA2D_CopyBufferEnd && !isRunning && !isReserved)
 8002dac:	4919      	ldr	r1, [pc, #100]	@ (8002e14 <_ZN8STM32DMA18signalDMAInterruptEv+0x78>)
 8002dae:	4a1a      	ldr	r2, [pc, #104]	@ (8002e18 <_ZN8STM32DMA18signalDMAInterruptEv+0x7c>)
 8002db0:	680b      	ldr	r3, [r1, #0]
 8002db2:	011b      	lsls	r3, r3, #4
 8002db4:	5cd3      	ldrb	r3, [r2, r3]
 8002db6:	2b01      	cmp	r3, #1
 8002db8:	d12a      	bne.n	8002e10 <_ZN8STM32DMA18signalDMAInterruptEv+0x74>
 8002dba:	4818      	ldr	r0, [pc, #96]	@ (8002e1c <_ZN8STM32DMA18signalDMAInterruptEv+0x80>)
 8002dbc:	6800      	ldr	r0, [r0, #0]
 8002dbe:	bb38      	cbnz	r0, 8002e10 <_ZN8STM32DMA18signalDMAInterruptEv+0x74>
 8002dc0:	7a20      	ldrb	r0, [r4, #8]
 8002dc2:	bb28      	cbnz	r0, 8002e10 <_ZN8STM32DMA18signalDMAInterruptEv+0x74>
 8002dc4:	7aa0      	ldrb	r0, [r4, #10]
 8002dc6:	bb18      	cbnz	r0, 8002e10 <_ZN8STM32DMA18signalDMAInterruptEv+0x74>
        DMA2D_CopyBuffer(Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex]);
 8002dc8:	6808      	ldr	r0, [r1, #0]
                started_by_external_job = true;
 8002dca:	f884 3da0 	strb.w	r3, [r4, #3488]	@ 0xda0
        isRunning = true;
 8002dce:	7223      	strb	r3, [r4, #8]
        DMA2D_CopyBuffer(Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex]);
 8002dd0:	eb02 1000 	add.w	r0, r2, r0, lsl #4
    }
 8002dd4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        DMA2D_CopyBuffer(Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex]);
 8002dd8:	f7ff bd64 	b.w	80028a4 <DMA2D_CopyBuffer>
        if (isRunning)
 8002ddc:	7a03      	ldrb	r3, [r0, #8]
 8002dde:	b143      	cbz	r3, 8002df2 <_ZN8STM32DMA18signalDMAInterruptEv+0x56>
            isRunning = false;
 8002de0:	2300      	movs	r3, #0
 8002de2:	7203      	strb	r3, [r0, #8]
            DMA2D_ExternalJobCompleted(Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex]);
 8002de4:	4b0b      	ldr	r3, [pc, #44]	@ (8002e14 <_ZN8STM32DMA18signalDMAInterruptEv+0x78>)
 8002de6:	6818      	ldr	r0, [r3, #0]
 8002de8:	4b0b      	ldr	r3, [pc, #44]	@ (8002e18 <_ZN8STM32DMA18signalDMAInterruptEv+0x7c>)
 8002dea:	eb03 1000 	add.w	r0, r3, r0, lsl #4
 8002dee:	f7ff fd9d 	bl	800292c <DMA2D_ExternalJobCompleted>
            if (!queue.isEmpty() && isAllowed)
 8002df2:	6860      	ldr	r0, [r4, #4]
 8002df4:	6803      	ldr	r3, [r0, #0]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	4798      	blx	r3
 8002dfa:	b948      	cbnz	r0, 8002e10 <_ZN8STM32DMA18signalDMAInterruptEv+0x74>
 8002dfc:	7a63      	ldrb	r3, [r4, #9]
 8002dfe:	b13b      	cbz	r3, 8002e10 <_ZN8STM32DMA18signalDMAInterruptEv+0x74>
                execute();
 8002e00:	6823      	ldr	r3, [r4, #0]
                started_by_external_job = false;
 8002e02:	f884 0da0 	strb.w	r0, [r4, #3488]	@ 0xda0
                execute();
 8002e06:	4620      	mov	r0, r4
 8002e08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
    }
 8002e0a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
                execute();
 8002e0e:	4718      	bx	r3
    }
 8002e10:	bd10      	pop	{r4, pc}
 8002e12:	bf00      	nop
 8002e14:	24000794 	.word	0x24000794
 8002e18:	24000010 	.word	0x24000010
 8002e1c:	24000790 	.word	0x24000790

08002e20 <_ZN8STM32DMAC1Ev>:
STM32DMA::STM32DMA()
 8002e20:	b570      	push	{r4, r5, r6, lr}
 8002e22:	4604      	mov	r4, r0
    : DMA_Interface(dma_queue), dma_queue(queue_storage, sizeof(queue_storage) / sizeof(queue_storage[0])), started_by_external_job(false), mutexIsRunning(0)
 8002e24:	4b0e      	ldr	r3, [pc, #56]	@ (8002e60 <_ZN8STM32DMAC1Ev+0x40>)
 8002e26:	300c      	adds	r0, #12
     * Constructs a DMA Interface object.
     *
     * @param [in] dmaQueue Reference to the queue of DMA operations.
     */
    DMA_Interface(DMA_Queue& dmaQueue)
        : queue(dmaQueue), isRunning(false), isAllowed(false)
 8002e28:	2600      	movs	r6, #0
 8002e2a:	4625      	mov	r5, r4
 8002e2c:	2260      	movs	r2, #96	@ 0x60
 8002e2e:	6060      	str	r0, [r4, #4]
 8002e30:	7226      	strb	r6, [r4, #8]
 8002e32:	7266      	strb	r6, [r4, #9]
 8002e34:	f845 3b20 	str.w	r3, [r5], #32
 8002e38:	4629      	mov	r1, r5
 8002e3a:	f00e fd6b 	bl	8011914 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>
 8002e3e:	f504 635a 	add.w	r3, r4, #3488	@ 0xda0
        : color(0)
 8002e42:	60ee      	str	r6, [r5, #12]
 8002e44:	3524      	adds	r5, #36	@ 0x24
 8002e46:	429d      	cmp	r5, r3
 8002e48:	d1fb      	bne.n	8002e42 <_ZN8STM32DMAC1Ev+0x22>
 8002e4a:	f884 6da0 	strb.w	r6, [r4, #3488]	@ 0xda0
    mutexIsRunning = MUTEX_CREATE();
 8002e4e:	2000      	movs	r0, #0
    : DMA_Interface(dma_queue), dma_queue(queue_storage, sizeof(queue_storage) / sizeof(queue_storage[0])), started_by_external_job(false), mutexIsRunning(0)
 8002e50:	f8c4 6da4 	str.w	r6, [r4, #3492]	@ 0xda4
    mutexIsRunning = MUTEX_CREATE();
 8002e54:	f009 fd25 	bl	800c8a2 <osMutexNew>
 8002e58:	f8c4 0da4 	str.w	r0, [r4, #3492]	@ 0xda4
}
 8002e5c:	4620      	mov	r0, r4
 8002e5e:	bd70      	pop	{r4, r5, r6, pc}
 8002e60:	08028bf0 	.word	0x08028bf0

08002e64 <_ZN8touchgfx5paint8tearDownEv>:
 * @brief Waits until previous DMA drawing operation has finished
 */
void tearDown()
{
    /* Wait for DMA2D to finish last run */
    while ((READ_REG(DMA2D->CR) & DMA2D_CR_START) != 0U);
 8002e64:	4b03      	ldr	r3, [pc, #12]	@ (8002e74 <_ZN8touchgfx5paint8tearDownEv+0x10>)
 8002e66:	681a      	ldr	r2, [r3, #0]
 8002e68:	07d2      	lsls	r2, r2, #31
 8002e6a:	d4fc      	bmi.n	8002e66 <_ZN8touchgfx5paint8tearDownEv+0x2>

    /* Clear transfer flags */
    WRITE_REG(DMA2D->IFCR, DMA2D_FLAG_TC | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8002e6c:	2223      	movs	r2, #35	@ 0x23
 8002e6e:	609a      	str	r2, [r3, #8]
}
 8002e70:	4770      	bx	lr
 8002e72:	bf00      	nop
 8002e74:	52001000 	.word	0x52001000

08002e78 <_ZN8touchgfx5paint9flushLineEPmi>:
void flushLine(uint32_t* addr, int sizebytes)
{
    // This funciton is used when decompressing RGB images to flush
    // the currently decoded pixels in the cache to allow the DMA2D
    // to blend the pixels correcly.
    if (SCB->CCR & SCB_CCR_DC_Msk)
 8002e78:	4a0b      	ldr	r2, [pc, #44]	@ (8002ea8 <_ZN8touchgfx5paint9flushLineEPmi+0x30>)
 8002e7a:	6953      	ldr	r3, [r2, #20]
 8002e7c:	03db      	lsls	r3, r3, #15
 8002e7e:	d511      	bpl.n	8002ea4 <_ZN8touchgfx5paint9flushLineEPmi+0x2c>
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_FORCEINLINE void SCB_CleanDCache_by_Addr (uint32_t *addr, int32_t dsize)
{
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    if ( dsize > 0 ) { 
 8002e80:	2900      	cmp	r1, #0
 8002e82:	dd0f      	ble.n	8002ea4 <_ZN8touchgfx5paint9flushLineEPmi+0x2c>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8002e84:	f000 031f 	and.w	r3, r0, #31
 8002e88:	4419      	add	r1, r3
  __ASM volatile ("dsb 0xF":::"memory");
 8002e8a:	f3bf 8f4f 	dsb	sy

      do {
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
        op_addr += __SCB_DCACHE_LINE_SIZE;
        op_size -= __SCB_DCACHE_LINE_SIZE;
      } while ( op_size > 0 );
 8002e8e:	4401      	add	r1, r0
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8002e90:	f8c2 0268 	str.w	r0, [r2, #616]	@ 0x268
        op_addr += __SCB_DCACHE_LINE_SIZE;
 8002e94:	3020      	adds	r0, #32
      } while ( op_size > 0 );
 8002e96:	1a0b      	subs	r3, r1, r0
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	dcf9      	bgt.n	8002e90 <_ZN8touchgfx5paint9flushLineEPmi+0x18>
 8002e9c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8002ea0:	f3bf 8f6f 	isb	sy
    {
        SCB_CleanDCache_by_Addr(addr, sizebytes);
    }
}
 8002ea4:	4770      	bx	lr
 8002ea6:	bf00      	nop
 8002ea8:	e000ed00 	.word	0xe000ed00

08002eac <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh>:
 *
 * @brief Renders Canvas Widget chunks using DMA.
 * This functions will not generate an interrupt, and will not affect the DMA queue.
 */
void lineFromColor(uint8_t* const ptr, const unsigned count, const uint32_t color, const uint8_t alpha)
{
 8002eac:	b530      	push	{r4, r5, lr}
    /* Wait for DMA2D to finish last run */
    while ((READ_REG(DMA2D->CR) & DMA2D_CR_START) != 0U);
 8002eae:	4c10      	ldr	r4, [pc, #64]	@ (8002ef0 <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh+0x44>)
 8002eb0:	6825      	ldr	r5, [r4, #0]
 8002eb2:	07ed      	lsls	r5, r5, #31
 8002eb4:	d4fc      	bmi.n	8002eb0 <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh+0x4>

    /* Clear transfer flags */
    WRITE_REG(DMA2D->IFCR, DMA2D_FLAG_TC | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8002eb6:	2523      	movs	r5, #35	@ 0x23

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB888);

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (1 | (count << DMA2D_NLR_PL_Pos)));
 8002eb8:	0409      	lsls	r1, r1, #16

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(ptr));

    if (alpha < 0xFF)
 8002eba:	2bff      	cmp	r3, #255	@ 0xff
    WRITE_REG(DMA2D->IFCR, DMA2D_FLAG_TC | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8002ebc:	60a5      	str	r5, [r4, #8]
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB888);
 8002ebe:	f04f 0501 	mov.w	r5, #1
    WRITE_REG(DMA2D->NLR, (1 | (count << DMA2D_NLR_PL_Pos)));
 8002ec2:	ea41 0105 	orr.w	r1, r1, r5
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB888);
 8002ec6:	6365      	str	r5, [r4, #52]	@ 0x34
    WRITE_REG(DMA2D->NLR, (1 | (count << DMA2D_NLR_PL_Pos)));
 8002ec8:	6461      	str	r1, [r4, #68]	@ 0x44
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(ptr));
 8002eca:	63e0      	str	r0, [r4, #60]	@ 0x3c
    if (alpha < 0xFF)
 8002ecc:	d00c      	beq.n	8002ee8 <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh+0x3c>
    {
        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, DMA2D_OUTPUT_RGB888 | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));

        /* Write DMA2D FGPFCCR register */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_REPLACE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (alpha << DMA2D_FGPFCCR_ALPHA_Pos));
 8002ece:	4909      	ldr	r1, [pc, #36]	@ (8002ef4 <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh+0x48>)

        /* DMA2D FGCOLR register configuration */
        WRITE_REG(DMA2D->FGCOLR, color & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | DMA2D_FGCOLR_RED));
 8002ed0:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
        WRITE_REG(DMA2D->BGPFCCR, DMA2D_OUTPUT_RGB888 | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8002ed4:	6265      	str	r5, [r4, #36]	@ 0x24
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_REPLACE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (alpha << DMA2D_FGPFCCR_ALPHA_Pos));
 8002ed6:	ea41 6303 	orr.w	r3, r1, r3, lsl #24
 8002eda:	61e3      	str	r3, [r4, #28]

        /* Configure DMA2D source address */
        WRITE_REG(DMA2D->FGMAR, (uint32_t)ptr);

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_CR_START | DMA2D_M2M_BLEND));
 8002edc:	4b06      	ldr	r3, [pc, #24]	@ (8002ef8 <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh+0x4c>)
        WRITE_REG(DMA2D->FGCOLR, color & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | DMA2D_FGCOLR_RED));
 8002ede:	6222      	str	r2, [r4, #32]
        WRITE_REG(DMA2D->BGMAR, (uint32_t)ptr);
 8002ee0:	6160      	str	r0, [r4, #20]
        WRITE_REG(DMA2D->FGMAR, (uint32_t)ptr);
 8002ee2:	60e0      	str	r0, [r4, #12]

        /* Set Output Color */
        WRITE_REG(DMA2D->OCOLR, color);

        /* Start DMA2D */
        WRITE_REG(DMA2D->CR, (DMA2D_CR_START | DMA2D_R2M));
 8002ee4:	6023      	str	r3, [r4, #0]
    }
}
 8002ee6:	bd30      	pop	{r4, r5, pc}
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_OUTPUT_RGB888 | (DMA2D_NO_MODIF_ALPHA << DMA2D_FGPFCCR_AM_Pos));
 8002ee8:	61e5      	str	r5, [r4, #28]
        WRITE_REG(DMA2D->CR, (DMA2D_CR_START | DMA2D_R2M));
 8002eea:	4b04      	ldr	r3, [pc, #16]	@ (8002efc <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh+0x50>)
        WRITE_REG(DMA2D->OCOLR, color);
 8002eec:	63a2      	str	r2, [r4, #56]	@ 0x38
        WRITE_REG(DMA2D->CR, (DMA2D_CR_START | DMA2D_R2M));
 8002eee:	e7f9      	b.n	8002ee4 <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh+0x38>
 8002ef0:	52001000 	.word	0x52001000
 8002ef4:	00010009 	.word	0x00010009
 8002ef8:	00020001 	.word	0x00020001
 8002efc:	00030001 	.word	0x00030001

08002f00 <_ZN8touchgfx5paint6rgb88814lineFromRGB888EPhPKhjh>:

void lineFromRGB888(uint8_t* const ptr, const uint8_t* const data, const unsigned count, const uint8_t alpha)
{
 8002f00:	b530      	push	{r4, r5, lr}
    /* Wait for DMA2D to finish last run */
    while ((READ_REG(DMA2D->CR) & DMA2D_CR_START) != 0U);
 8002f02:	4c0e      	ldr	r4, [pc, #56]	@ (8002f3c <_ZN8touchgfx5paint6rgb88814lineFromRGB888EPhPKhjh+0x3c>)
 8002f04:	6825      	ldr	r5, [r4, #0]
 8002f06:	07ed      	lsls	r5, r5, #31
 8002f08:	d4fc      	bmi.n	8002f04 <_ZN8touchgfx5paint6rgb88814lineFromRGB888EPhPKhjh+0x4>

    /* Clear transfer flags */
    WRITE_REG(DMA2D->IFCR, DMA2D_FLAG_TC | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8002f0a:	2523      	movs	r5, #35	@ 0x23

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB888);

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (1 | (count << DMA2D_NLR_PL_Pos)));
 8002f0c:	0412      	lsls	r2, r2, #16
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(ptr));

    /* Configure DMA2D source address */
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(data));

    if (alpha < 0xFF)
 8002f0e:	2bff      	cmp	r3, #255	@ 0xff
    WRITE_REG(DMA2D->IFCR, DMA2D_FLAG_TC | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8002f10:	60a5      	str	r5, [r4, #8]
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB888);
 8002f12:	f04f 0501 	mov.w	r5, #1
    WRITE_REG(DMA2D->NLR, (1 | (count << DMA2D_NLR_PL_Pos)));
 8002f16:	ea42 0205 	orr.w	r2, r2, r5
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB888);
 8002f1a:	6365      	str	r5, [r4, #52]	@ 0x34
    WRITE_REG(DMA2D->NLR, (1 | (count << DMA2D_NLR_PL_Pos)));
 8002f1c:	6462      	str	r2, [r4, #68]	@ 0x44
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(ptr));
 8002f1e:	63e0      	str	r0, [r4, #60]	@ 0x3c
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(data));
 8002f20:	60e1      	str	r1, [r4, #12]
    if (alpha < 0xFF)
 8002f22:	d007      	beq.n	8002f34 <_ZN8touchgfx5paint6rgb88814lineFromRGB888EPhPKhjh+0x34>
    {
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_RGB888 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (alpha << DMA2D_FGPFCCR_ALPHA_Pos));
 8002f24:	4a06      	ldr	r2, [pc, #24]	@ (8002f40 <_ZN8touchgfx5paint6rgb88814lineFromRGB888EPhPKhjh+0x40>)
 8002f26:	ea42 6303 	orr.w	r3, r2, r3, lsl #24
 8002f2a:	61e3      	str	r3, [r4, #28]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, DMA2D_INPUT_RGB888 | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8002f2c:	6265      	str	r5, [r4, #36]	@ 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(ptr));
 8002f2e:	6160      	str	r0, [r4, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_CR_START);
 8002f30:	6022      	str	r2, [r4, #0]
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_RGB888 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (alpha << DMA2D_FGPFCCR_ALPHA_Pos));

        /* Start DMA2D : M2M Mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_CR_START);
    }
}
 8002f32:	bd30      	pop	{r4, r5, pc}
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_RGB888 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (alpha << DMA2D_FGPFCCR_ALPHA_Pos));
 8002f34:	4b03      	ldr	r3, [pc, #12]	@ (8002f44 <_ZN8touchgfx5paint6rgb88814lineFromRGB888EPhPKhjh+0x44>)
 8002f36:	61e3      	str	r3, [r4, #28]
        WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_CR_START);
 8002f38:	6025      	str	r5, [r4, #0]
}
 8002f3a:	e7fa      	b.n	8002f32 <_ZN8touchgfx5paint6rgb88814lineFromRGB888EPhPKhjh+0x32>
 8002f3c:	52001000 	.word	0x52001000
 8002f40:	00020001 	.word	0x00020001
 8002f44:	ff020001 	.word	0xff020001

08002f48 <_ZN8touchgfx5paint6rgb88816lineFromARGB8888EPhPKmjh>:

void lineFromARGB8888(uint8_t* const ptr, const uint32_t* const data, const unsigned count, const uint8_t alpha)
{
 8002f48:	b530      	push	{r4, r5, lr}
    /* Wait for DMA2D to finish last run */
    while ((READ_REG(DMA2D->CR) & DMA2D_CR_START) != 0U);
 8002f4a:	4c0b      	ldr	r4, [pc, #44]	@ (8002f78 <_ZN8touchgfx5paint6rgb88816lineFromARGB8888EPhPKmjh+0x30>)
 8002f4c:	6825      	ldr	r5, [r4, #0]
 8002f4e:	07ed      	lsls	r5, r5, #31
 8002f50:	d4fc      	bmi.n	8002f4c <_ZN8touchgfx5paint6rgb88816lineFromARGB8888EPhPKmjh+0x4>
    /* Clear transfer flags */
    WRITE_REG(DMA2D->IFCR, DMA2D_FLAG_TC | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8002f52:	2523      	movs	r5, #35	@ 0x23

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB888);

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (1 | (count << DMA2D_NLR_PL_Pos)));
 8002f54:	0412      	lsls	r2, r2, #16

    /* Configure DMA2D source address */
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(data));

    /* Set DMA2D color mode and alpha mode */
    WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_ARGB8888 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (alpha << DMA2D_FGPFCCR_ALPHA_Pos));
 8002f56:	061b      	lsls	r3, r3, #24
    WRITE_REG(DMA2D->IFCR, DMA2D_FLAG_TC | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8002f58:	60a5      	str	r5, [r4, #8]
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB888);
 8002f5a:	2501      	movs	r5, #1
    WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_ARGB8888 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (alpha << DMA2D_FGPFCCR_ALPHA_Pos));
 8002f5c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
    WRITE_REG(DMA2D->NLR, (1 | (count << DMA2D_NLR_PL_Pos)));
 8002f60:	432a      	orrs	r2, r5
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB888);
 8002f62:	6365      	str	r5, [r4, #52]	@ 0x34
    WRITE_REG(DMA2D->NLR, (1 | (count << DMA2D_NLR_PL_Pos)));
 8002f64:	6462      	str	r2, [r4, #68]	@ 0x44
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(ptr));
 8002f66:	63e0      	str	r0, [r4, #60]	@ 0x3c
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(data));
 8002f68:	60e1      	str	r1, [r4, #12]
    WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_ARGB8888 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (alpha << DMA2D_FGPFCCR_ALPHA_Pos));
 8002f6a:	61e3      	str	r3, [r4, #28]

    /* Configure DMA2D Stream source2 address */
    WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(ptr));

    /* Set DMA2D mode */
    WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_CR_START);
 8002f6c:	4b03      	ldr	r3, [pc, #12]	@ (8002f7c <_ZN8touchgfx5paint6rgb88816lineFromARGB8888EPhPKmjh+0x34>)
    WRITE_REG(DMA2D->BGPFCCR, DMA2D_INPUT_RGB888 | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8002f6e:	6265      	str	r5, [r4, #36]	@ 0x24
    WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(ptr));
 8002f70:	6160      	str	r0, [r4, #20]
    WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_CR_START);
 8002f72:	6023      	str	r3, [r4, #0]
}
 8002f74:	bd30      	pop	{r4, r5, pc}
 8002f76:	bf00      	nop
 8002f78:	52001000 	.word	0x52001000
 8002f7c:	00020001 	.word	0x00020001

08002f80 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_14WipeTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EE8capacityEv>:
    };

    virtual uint16_t capacity() const
    {
        return NUMBER_OF_ELEMENTS;
    }
 8002f80:	2001      	movs	r0, #1
 8002f82:	4770      	bx	lr

08002f84 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_14WipeTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EE12element_sizeEv>:

    virtual uint32_t element_size()
    {
        return sizeof(stBlocks[0]);
    }
 8002f84:	2038      	movs	r0, #56	@ 0x38
 8002f86:	4770      	bx	lr

08002f88 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_14WipeTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EE7elementEt>:

protected:
    virtual void* element(uint16_t index)
    {
        return &stBlocks[index];
 8002f88:	2338      	movs	r3, #56	@ 0x38
 8002f8a:	fb03 0001 	mla	r0, r3, r1, r0
    }
 8002f8e:	3008      	adds	r0, #8
 8002f90:	4770      	bx	lr

08002f92 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_14WipeTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EE7elementEt>:

    virtual const void* element(uint16_t index) const
    {
        return &stBlocks[index];
 8002f92:	2338      	movs	r3, #56	@ 0x38
 8002f94:	fb03 0001 	mla	r0, r3, r1, r0
    }
 8002f98:	3008      	adds	r0, #8
 8002f9a:	4770      	bx	lr

08002f9c <_ZNK8touchgfx9PartitionINS_4meta8TypeListI19graphing_ScreenViewNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    }
 8002f9c:	2001      	movs	r0, #1
 8002f9e:	4770      	bx	lr

08002fa0 <_ZN8touchgfx9PartitionINS_4meta8TypeListI19graphing_ScreenViewNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    }
 8002fa0:	f643 5084 	movw	r0, #15748	@ 0x3d84
 8002fa4:	4770      	bx	lr

08002fa6 <_ZN8touchgfx9PartitionINS_4meta8TypeListI19graphing_ScreenViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 8002fa6:	f643 5384 	movw	r3, #15748	@ 0x3d84
 8002faa:	fb03 0001 	mla	r0, r3, r1, r0
    }
 8002fae:	3008      	adds	r0, #8
 8002fb0:	4770      	bx	lr

08002fb2 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI19graphing_ScreenViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 8002fb2:	f643 5384 	movw	r3, #15748	@ 0x3d84
 8002fb6:	fb03 0001 	mla	r0, r3, r1, r0
    }
 8002fba:	3008      	adds	r0, #8
 8002fbc:	4770      	bx	lr

08002fbe <_ZNK8touchgfx9PartitionINS_4meta8TypeListI24graphing_ScreenPresenterNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    }
 8002fbe:	2001      	movs	r0, #1
 8002fc0:	4770      	bx	lr

08002fc2 <_ZN8touchgfx9PartitionINS_4meta8TypeListI24graphing_ScreenPresenterNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    }
 8002fc2:	2010      	movs	r0, #16
 8002fc4:	4770      	bx	lr

08002fc6 <_ZN8touchgfx9PartitionINS_4meta8TypeListI24graphing_ScreenPresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 8002fc6:	eb00 1001 	add.w	r0, r0, r1, lsl #4
    }
 8002fca:	3008      	adds	r0, #8
 8002fcc:	4770      	bx	lr

08002fce <_ZNK8touchgfx9PartitionINS_4meta8TypeListI24graphing_ScreenPresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 8002fce:	eb00 1001 	add.w	r0, r0, r1, lsl #4
    }
 8002fd2:	3008      	adds	r0, #8
 8002fd4:	4770      	bx	lr

08002fd6 <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>:
     */
    typedef touchgfx::meta::select_type_maxsize< GeneratedTransitionTypes >::type MaxGeneratedTransitionType;

    virtual void gotoStartScreen(FrontendApplication& app)
    {
        app.gotographing_ScreenScreenNoTransition();
 8002fd6:	4608      	mov	r0, r1
 8002fd8:	f000 be4e 	b.w	8003c78 <_ZN23FrontendApplicationBase37gotographing_ScreenScreenNoTransitionEv>

08002fdc <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_14WipeTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EED1Ev>:
class Partition : public AbstractPartition
 8002fdc:	4b03      	ldr	r3, [pc, #12]	@ (8002fec <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_14WipeTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EED1Ev+0x10>)
 8002fde:	b510      	push	{r4, lr}
 8002fe0:	4604      	mov	r4, r0
 8002fe2:	6003      	str	r3, [r0, #0]
 8002fe4:	f00b fdb3 	bl	800eb4e <_ZN8touchgfx17AbstractPartitionD1Ev>
 8002fe8:	4620      	mov	r0, r4
 8002fea:	bd10      	pop	{r4, pc}
 8002fec:	08028ca8 	.word	0x08028ca8

08002ff0 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_14WipeTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EED0Ev>:
 8002ff0:	b510      	push	{r4, lr}
 8002ff2:	4604      	mov	r4, r0
 8002ff4:	f7ff fff2 	bl	8002fdc <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_14WipeTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EED1Ev>
 8002ff8:	2140      	movs	r1, #64	@ 0x40
 8002ffa:	4620      	mov	r0, r4
 8002ffc:	f023 fdc7 	bl	8026b8e <_ZdlPvj>
 8003000:	4620      	mov	r0, r4
 8003002:	bd10      	pop	{r4, pc}

08003004 <_ZN8touchgfx9PartitionINS_4meta8TypeListI19graphing_ScreenViewNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 8003004:	4b03      	ldr	r3, [pc, #12]	@ (8003014 <_ZN8touchgfx9PartitionINS_4meta8TypeListI19graphing_ScreenViewNS2_INS1_3NilES4_EEEELt1EED1Ev+0x10>)
 8003006:	b510      	push	{r4, lr}
 8003008:	4604      	mov	r4, r0
 800300a:	6003      	str	r3, [r0, #0]
 800300c:	f00b fd9f 	bl	800eb4e <_ZN8touchgfx17AbstractPartitionD1Ev>
 8003010:	4620      	mov	r0, r4
 8003012:	bd10      	pop	{r4, pc}
 8003014:	08028c74 	.word	0x08028c74

08003018 <_ZN8touchgfx9PartitionINS_4meta8TypeListI19graphing_ScreenViewNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 8003018:	b510      	push	{r4, lr}
 800301a:	4604      	mov	r4, r0
 800301c:	f7ff fff2 	bl	8003004 <_ZN8touchgfx9PartitionINS_4meta8TypeListI19graphing_ScreenViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8003020:	f643 518c 	movw	r1, #15756	@ 0x3d8c
 8003024:	4620      	mov	r0, r4
 8003026:	f023 fdb2 	bl	8026b8e <_ZdlPvj>
 800302a:	4620      	mov	r0, r4
 800302c:	bd10      	pop	{r4, pc}
	...

08003030 <_ZN8touchgfx9PartitionINS_4meta8TypeListI24graphing_ScreenPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 8003030:	4b03      	ldr	r3, [pc, #12]	@ (8003040 <_ZN8touchgfx9PartitionINS_4meta8TypeListI24graphing_ScreenPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev+0x10>)
 8003032:	b510      	push	{r4, lr}
 8003034:	4604      	mov	r4, r0
 8003036:	6003      	str	r3, [r0, #0]
 8003038:	f00b fd89 	bl	800eb4e <_ZN8touchgfx17AbstractPartitionD1Ev>
 800303c:	4620      	mov	r0, r4
 800303e:	bd10      	pop	{r4, pc}
 8003040:	08028c40 	.word	0x08028c40

08003044 <_ZN8touchgfx9PartitionINS_4meta8TypeListI24graphing_ScreenPresenterNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 8003044:	b510      	push	{r4, lr}
 8003046:	4604      	mov	r4, r0
 8003048:	f7ff fff2 	bl	8003030 <_ZN8touchgfx9PartitionINS_4meta8TypeListI24graphing_ScreenPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 800304c:	2118      	movs	r1, #24
 800304e:	4620      	mov	r0, r4
 8003050:	f023 fd9d 	bl	8026b8e <_ZdlPvj>
 8003054:	4620      	mov	r0, r4
 8003056:	bd10      	pop	{r4, pc}

08003058 <_ZN12FrontendHeapD1Ev>:
#ifndef FRONTENDHEAP_HPP
#define FRONTENDHEAP_HPP

#include <gui_generated/common/FrontendHeapBase.hpp>

class FrontendHeap : public FrontendHeapBase
 8003058:	4b09      	ldr	r3, [pc, #36]	@ (8003080 <_ZN12FrontendHeapD1Ev+0x28>)
 800305a:	b510      	push	{r4, lr}
 800305c:	4604      	mov	r4, r0
 800305e:	6003      	str	r3, [r0, #0]
 8003060:	f500 5076 	add.w	r0, r0, #15744	@ 0x3d80
 8003064:	3038      	adds	r0, #56	@ 0x38
 8003066:	f7ff ffb9 	bl	8002fdc <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_14WipeTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EED1Ev>
 800306a:	f104 002c 	add.w	r0, r4, #44	@ 0x2c
 800306e:	f7ff ffc9 	bl	8003004 <_ZN8touchgfx9PartitionINS_4meta8TypeListI19graphing_ScreenViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8003072:	f104 0014 	add.w	r0, r4, #20
 8003076:	f7ff ffdb 	bl	8003030 <_ZN8touchgfx9PartitionINS_4meta8TypeListI24graphing_ScreenPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 800307a:	4620      	mov	r0, r4
 800307c:	bd10      	pop	{r4, pc}
 800307e:	bf00      	nop
 8003080:	08028cdc 	.word	0x08028cdc

08003084 <__tcf_0>:
                            > > CombinedTransitionTypes;
    typedef touchgfx::meta::select_type_maxsize< CombinedTransitionTypes >::type MaxTransitionType;

    static FrontendHeap& getInstance()
    {
        static FrontendHeap instance;
 8003084:	b508      	push	{r3, lr}
 8003086:	4802      	ldr	r0, [pc, #8]	@ (8003090 <__tcf_0+0xc>)
 8003088:	f7ff ffe6 	bl	8003058 <_ZN12FrontendHeapD1Ev>
 800308c:	bd08      	pop	{r3, pc}
 800308e:	bf00      	nop
 8003090:	2400ac88 	.word	0x2400ac88

08003094 <_ZN12FrontendHeapD0Ev>:
class FrontendHeap : public FrontendHeapBase
 8003094:	b510      	push	{r4, lr}
 8003096:	4604      	mov	r4, r0
 8003098:	f7ff ffde 	bl	8003058 <_ZN12FrontendHeapD1Ev>
 800309c:	f643 7158 	movw	r1, #16216	@ 0x3f58
 80030a0:	4620      	mov	r0, r4
 80030a2:	f023 fd74 	bl	8026b8e <_ZdlPvj>
 80030a6:	4620      	mov	r0, r4
 80030a8:	bd10      	pop	{r4, pc}
	...

080030ac <touchgfx_init>:
static ApplicationFontProvider fontProvider;
static Texts texts;
static TouchGFXHAL hal(dma, display, tc, 800, 480);

void touchgfx_init()
{
 80030ac:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    Bitmap::registerBitmapDatabase(BitmapDatabase::getInstance(), BitmapDatabase::getInstanceSize());
 80030b0:	f000 fc58 	bl	8003964 <_ZN14BitmapDatabase11getInstanceEv>
 80030b4:	2400      	movs	r4, #0
 80030b6:	4605      	mov	r5, r0
 80030b8:	f000 fc58 	bl	800396c <_ZN14BitmapDatabase15getInstanceSizeEv>
 80030bc:	4623      	mov	r3, r4
 80030be:	4601      	mov	r1, r0
 80030c0:	4622      	mov	r2, r4
 80030c2:	4628      	mov	r0, r5
 80030c4:	9400      	str	r4, [sp, #0]
 80030c6:	f018 f887 	bl	801b1d8 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>
     *
     * @param  t The array of texts.
     */
    static void registerTexts(const Texts* t)
    {
        texts = t;
 80030ca:	4b27      	ldr	r3, [pc, #156]	@ (8003168 <touchgfx_init+0xbc>)
 80030cc:	4a27      	ldr	r2, [pc, #156]	@ (800316c <touchgfx_init+0xc0>)
    TypedText::registerTexts(&texts);
    Texts::setLanguage(0);
 80030ce:	4620      	mov	r0, r4
        static FrontendHeap instance;
 80030d0:	4d27      	ldr	r5, [pc, #156]	@ (8003170 <touchgfx_init+0xc4>)
 80030d2:	601a      	str	r2, [r3, #0]
 80030d4:	f000 ffe8 	bl	80040a8 <_ZN8touchgfx5Texts11setLanguageEt>
     *
     * @param renderer  The renderer to be used by LCD when dealing with vector fonts.
     */
    void setVectorFontRenderer(VectorFontRenderer* renderer)
    {
        vectorFontRenderer = renderer;
 80030d8:	4b26      	ldr	r3, [pc, #152]	@ (8003174 <touchgfx_init+0xc8>)
 80030da:	4a27      	ldr	r2, [pc, #156]	@ (8003178 <touchgfx_init+0xcc>)

    display.setVectorFontRenderer(&vectorFontRenderer);

    FontManager::setFontProvider(&fontProvider);
 80030dc:	4827      	ldr	r0, [pc, #156]	@ (800317c <touchgfx_init+0xd0>)
 80030de:	609a      	str	r2, [r3, #8]
 80030e0:	f017 ff26 	bl	801af30 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>
 80030e4:	682b      	ldr	r3, [r5, #0]
 80030e6:	f3bf 8f5b 	dmb	ish
 80030ea:	07db      	lsls	r3, r3, #31
 80030ec:	d436      	bmi.n	800315c <touchgfx_init+0xb0>
 80030ee:	4628      	mov	r0, r5
 80030f0:	f023 fd4f 	bl	8026b92 <__cxa_guard_acquire>
 80030f4:	b390      	cbz	r0, 800315c <touchgfx_init+0xb0>
     */
    MVPHeap(AbstractPartition& pres,
            AbstractPartition& scr,
            AbstractPartition& tra,
            MVPApplication& app)
        : presenterStorage(pres),
 80030f6:	4c22      	ldr	r4, [pc, #136]	@ (8003180 <touchgfx_init+0xd4>)
          screenStorage(scr),
          transitionStorage(tra),
 80030f8:	4f22      	ldr	r7, [pc, #136]	@ (8003184 <touchgfx_init+0xd8>)
    Model model;
    FrontendApplication app;

private:
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
                     app(model, *this)
 80030fa:	4b23      	ldr	r3, [pc, #140]	@ (8003188 <touchgfx_init+0xdc>)
        : presenterStorage(pres),
 80030fc:	f104 0014 	add.w	r0, r4, #20
          frontendApplication(app)
 8003100:	f107 0644 	add.w	r6, r7, #68	@ 0x44
          screenStorage(scr),
 8003104:	f104 082c 	add.w	r8, r4, #44	@ 0x2c
 8003108:	6023      	str	r3, [r4, #0]
        : presenterStorage(pres),
 800310a:	6060      	str	r0, [r4, #4]
          screenStorage(scr),
 800310c:	f8c4 8008 	str.w	r8, [r4, #8]
          transitionStorage(tra),
 8003110:	60e7      	str	r7, [r4, #12]
          frontendApplication(app)
 8003112:	6126      	str	r6, [r4, #16]
 8003114:	f00b fd1c 	bl	800eb50 <_ZN8touchgfx17AbstractPartitionC1Ev>
 8003118:	4b1c      	ldr	r3, [pc, #112]	@ (800318c <touchgfx_init+0xe0>)
 800311a:	4640      	mov	r0, r8
 800311c:	6163      	str	r3, [r4, #20]
 800311e:	f00b fd17 	bl	800eb50 <_ZN8touchgfx17AbstractPartitionC1Ev>
 8003122:	4b1b      	ldr	r3, [pc, #108]	@ (8003190 <touchgfx_init+0xe4>)
 8003124:	4638      	mov	r0, r7
 8003126:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8003128:	f00b fd12 	bl	800eb50 <_ZN8touchgfx17AbstractPartitionC1Ev>
 800312c:	f504 5340 	add.w	r3, r4, #12288	@ 0x3000
 8003130:	4a18      	ldr	r2, [pc, #96]	@ (8003194 <touchgfx_init+0xe8>)
 8003132:	f603 50f8 	addw	r0, r3, #3576	@ 0xdf8
 8003136:	f8c3 2db8 	str.w	r2, [r3, #3512]	@ 0xdb8
 800313a:	f002 fae1 	bl	8005700 <_ZN5ModelC1Ev>
 800313e:	4622      	mov	r2, r4
 8003140:	f107 0140 	add.w	r1, r7, #64	@ 0x40
 8003144:	4630      	mov	r0, r6
 8003146:	f002 fad1 	bl	80056ec <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>
 800314a:	4630      	mov	r0, r6
 800314c:	f000 fd94 	bl	8003c78 <_ZN23FrontendApplicationBase37gotographing_ScreenScreenNoTransitionEv>
        static FrontendHeap instance;
 8003150:	4811      	ldr	r0, [pc, #68]	@ (8003198 <touchgfx_init+0xec>)
 8003152:	f024 f8b3 	bl	80272bc <atexit>
 8003156:	4628      	mov	r0, r5
 8003158:	f023 fd27 	bl	8026baa <__cxa_guard_release>
    (void)heap;

    /*
     * Initialize TouchGFX
     */
    hal.initialize();
 800315c:	480f      	ldr	r0, [pc, #60]	@ (800319c <touchgfx_init+0xf0>)
}
 800315e:	b002      	add	sp, #8
 8003160:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    hal.initialize();
 8003164:	f7fe bcd8 	b.w	8001b18 <_ZN11TouchGFXHAL10initializeEv>
 8003168:	24028e84 	.word	0x24028e84
 800316c:	24009e4c 	.word	0x24009e4c
 8003170:	2400ac84 	.word	0x2400ac84
 8003174:	24009e6c 	.word	0x24009e6c
 8003178:	24009e50 	.word	0x24009e50
 800317c:	24000034 	.word	0x24000034
 8003180:	2400ac88 	.word	0x2400ac88
 8003184:	2400ea40 	.word	0x2400ea40
 8003188:	08028cdc 	.word	0x08028cdc
 800318c:	08028c40 	.word	0x08028c40
 8003190:	08028c74 	.word	0x08028c74
 8003194:	08028ca8 	.word	0x08028ca8
 8003198:	08003085 	.word	0x08003085
 800319c:	24009dd0 	.word	0x24009dd0

080031a0 <touchgfx_components_init>:

void touchgfx_components_init()
{
}
 80031a0:	4770      	bx	lr
	...

080031a4 <touchgfx_taskEntry>:
     * Main event loop. Will wait for VSYNC signal, and then process next frame. Call
     * this function from your GUI task.
     *
     * Note This function never returns
     */
    hal.taskEntry();
 80031a4:	4801      	ldr	r0, [pc, #4]	@ (80031ac <touchgfx_taskEntry+0x8>)
 80031a6:	f7fe bcc9 	b.w	8001b3c <_ZN11TouchGFXHAL9taskEntryEv>
 80031aa:	bf00      	nop
 80031ac:	24009dd0 	.word	0x24009dd0

080031b0 <_GLOBAL__sub_I_touchgfx_init>:
}
 80031b0:	b573      	push	{r0, r1, r4, r5, r6, lr}
static STM32DMA dma;
 80031b2:	4c0e      	ldr	r4, [pc, #56]	@ (80031ec <_GLOBAL__sub_I_touchgfx_init+0x3c>)
{
public:

    STM32TouchController() {}
 80031b4:	4b0e      	ldr	r3, [pc, #56]	@ (80031f0 <_GLOBAL__sub_I_touchgfx_init+0x40>)
 80031b6:	4e0f      	ldr	r6, [pc, #60]	@ (80031f4 <_GLOBAL__sub_I_touchgfx_init+0x44>)
 80031b8:	4620      	mov	r0, r4
static LCD24bpp display;
 80031ba:	4d0f      	ldr	r5, [pc, #60]	@ (80031f8 <_GLOBAL__sub_I_touchgfx_init+0x48>)
 80031bc:	6033      	str	r3, [r6, #0]
static STM32DMA dma;
 80031be:	f7ff fe2f 	bl	8002e20 <_ZN8STM32DMAC1Ev>
static LCD24bpp display;
 80031c2:	4628      	mov	r0, r5
 80031c4:	f01b feaa 	bl	801ef1c <_ZN8touchgfx8LCD24bppC1Ev>
static VectorFontRendererImpl vectorFontRenderer;
 80031c8:	480c      	ldr	r0, [pc, #48]	@ (80031fc <_GLOBAL__sub_I_touchgfx_init+0x4c>)
 80031ca:	f015 fb79 	bl	80188c0 <_ZN8touchgfx22VectorFontRendererImplC1Ev>
static TouchGFXHAL hal(dma, display, tc, 800, 480);
 80031ce:	f44f 7348 	mov.w	r3, #800	@ 0x320
 80031d2:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 80031d6:	4621      	mov	r1, r4
 80031d8:	4809      	ldr	r0, [pc, #36]	@ (8003200 <_GLOBAL__sub_I_touchgfx_init+0x50>)
 80031da:	e9cd 3200 	strd	r3, r2, [sp]
 80031de:	4633      	mov	r3, r6
 80031e0:	462a      	mov	r2, r5
 80031e2:	f7fe fd3f 	bl	8001c64 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>
}
 80031e6:	b002      	add	sp, #8
 80031e8:	bd70      	pop	{r4, r5, r6, pc}
 80031ea:	bf00      	nop
 80031ec:	24009ed8 	.word	0x24009ed8
 80031f0:	0802845c 	.word	0x0802845c
 80031f4:	2400ac80 	.word	0x2400ac80
 80031f8:	24009e6c 	.word	0x24009e6c
 80031fc:	24009e50 	.word	0x24009e50
 8003200:	24009dd0 	.word	0x24009dd0

08003204 <_GLOBAL__sub_D_touchgfx_init>:
static STM32DMA dma;
 8003204:	4801      	ldr	r0, [pc, #4]	@ (800320c <_GLOBAL__sub_D_touchgfx_init+0x8>)
 8003206:	f7ff bc57 	b.w	8002ab8 <_ZN8STM32DMAD1Ev>
 800320a:	bf00      	nop
 800320c:	24009ed8 	.word	0x24009ed8

08003210 <_ZN8touchgfx8Drawable13getFirstChildEv>:
     * @see Container::getFirstChild
     */
    virtual Drawable* getFirstChild()
    {
        return 0;
    }
 8003210:	2000      	movs	r0, #0
 8003212:	4770      	bx	lr

08003214 <_ZN8touchgfx8Drawable4setXEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setX(int16_t x)
    {
        rect.x = x;
 8003214:	8081      	strh	r1, [r0, #4]
    }
 8003216:	4770      	bx	lr

08003218 <_ZN8touchgfx8Drawable4setYEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setY(int16_t y)
    {
        rect.y = y;
 8003218:	80c1      	strh	r1, [r0, #6]
    }
 800321a:	4770      	bx	lr

0800321c <_ZN8touchgfx8Drawable8setWidthEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setWidth(int16_t width)
    {
        rect.width = width;
 800321c:	8101      	strh	r1, [r0, #8]
    }
 800321e:	4770      	bx	lr

08003220 <_ZN8touchgfx8Drawable9setHeightEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setHeight(int16_t height)
    {
        rect.height = height;
 8003220:	8141      	strh	r1, [r0, #10]
    }
 8003222:	4770      	bx	lr

08003224 <_ZN8touchgfx8Drawable20childGeometryChangedEv>:
     * one or more of its children has changed. Currently only used in ScrollableContainer
     * to redraw scrollbars when the size of the scrolling contents changes.
     */
    virtual void childGeometryChanged()
    {
    }
 8003224:	4770      	bx	lr

08003226 <_ZN8touchgfx8Drawable16handleClickEventERKNS_10ClickEventE>:
     * @param  event The ClickEvent received from the HAL.
     */
    virtual void handleClickEvent(const ClickEvent& event)
    {
        (void)event; // Unused variable
    }
 8003226:	4770      	bx	lr

08003228 <_ZN8touchgfx8Drawable18handleGestureEventERKNS_12GestureEventE>:
     * @param  event The GestureEvent received from the HAL.
     */
    virtual void handleGestureEvent(const GestureEvent& event)
    {
        (void)event; // Unused variable
    }
 8003228:	4770      	bx	lr

0800322a <_ZN8touchgfx8Drawable15handleDragEventERKNS_9DragEventE>:
     * @param  event The DragEvent received from the HAL.
     */
    virtual void handleDragEvent(const DragEvent& event)
    {
        (void)event; // Unused variable
    }
 800322a:	4770      	bx	lr

0800322c <_ZN8touchgfx8Drawable15handleTickEventEv>:
     *
     * @see Application::registerTimerWidget
     */
    virtual void handleTickEvent()
    {
    }
 800322c:	4770      	bx	lr

0800322e <_ZN8touchgfx8Drawable6moveToEss>:
     *
     * @see moveRelative, setXY
     *
     * @note Will redraw the appropriate areas of the screen.
     */
    virtual void moveTo(int16_t x, int16_t y)
 800322e:	b410      	push	{r4}
    {
        moveRelative(x - rect.x, y - rect.y);
 8003230:	88c4      	ldrh	r4, [r0, #6]
 8003232:	6803      	ldr	r3, [r0, #0]
 8003234:	1b12      	subs	r2, r2, r4
 8003236:	8884      	ldrh	r4, [r0, #4]
 8003238:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800323a:	1b09      	subs	r1, r1, r4
 800323c:	b212      	sxth	r2, r2
    }
 800323e:	f85d 4b04 	ldr.w	r4, [sp], #4
        moveRelative(x - rect.x, y - rect.y);
 8003242:	b209      	sxth	r1, r1
 8003244:	4718      	bx	r3

08003246 <_ZN8touchgfx8Drawable14setupDrawChainERKNS_4RectEPPS0_>:
     * @note For TouchGFX internal use only.
     */
    void resetDrawChainCache()
    {
        // Resetting the cached indicators
        cachedVisibleRect.x = UNCACHED_INDICATOR;
 8003246:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800324a:	8183      	strh	r3, [r0, #12]
        cachedAbsX = UNCACHED_INDICATOR;
 800324c:	f04f 33ff 	mov.w	r3, #4294967295
 8003250:	6203      	str	r3, [r0, #32]
     */
    virtual void setupDrawChain(const Rect& invalidatedArea, Drawable** nextPreviousElement)
    {
        (void)invalidatedArea; // Unused variable
        resetDrawChainCache();
        nextDrawChainElement = *nextPreviousElement;
 8003252:	6813      	ldr	r3, [r2, #0]
 8003254:	61c3      	str	r3, [r0, #28]
        *nextPreviousElement = this;
 8003256:	6010      	str	r0, [r2, #0]
    }
 8003258:	4770      	bx	lr

0800325a <_ZNK8touchgfx15AbstractPainter18getRenderingMethodEv>:
     * @return HARDWARE if painter uses hardware based drawing, SOFTWARE otherwise.
     */
    virtual HAL::RenderingMethod getRenderingMethod() const
    {
        return HAL::SOFTWARE;
    }
 800325a:	2000      	movs	r0, #0
 800325c:	4770      	bx	lr

0800325e <_ZNK8touchgfx15AbstractPainter5setupERKNS_4RectE>:
     *
     * @see AbstractPainter::paint, AbstractPainter::tearDown
     */
    virtual bool setup(const Rect& widgetRect) const
    {
        widgetWidth = widgetRect.width;
 800325e:	888b      	ldrh	r3, [r1, #4]
 8003260:	8083      	strh	r3, [r0, #4]
        return true;
    }
 8003262:	2001      	movs	r0, #1
 8003264:	4770      	bx	lr

08003266 <_ZNK8touchgfx15AbstractPainter8tearDownEv>:
     * @see AbstractPainter::paint, AbstractPainter::setup
     */
    virtual void tearDown() const
    {
        return;
    }
 8003266:	4770      	bx	lr

08003268 <_ZN8touchgfx12CanvasWidget8setAlphaEh>:
    }

    /** @copydoc Image::setAlpha */
    virtual void setAlpha(uint8_t newAlpha)
    {
        alpha = newAlpha;
 8003268:	f880 1026 	strb.w	r1, [r0, #38]	@ 0x26
    }
 800326c:	4770      	bx	lr

0800326e <_ZNK8touchgfx12CanvasWidget8getAlphaEv>:

    /** @copydoc Image::getAlpha() */
    virtual uint8_t getAlpha() const
    {
        return alpha;
    }
 800326e:	f890 0026 	ldrb.w	r0, [r0, #38]	@ 0x26
 8003272:	4770      	bx	lr

08003274 <_ZNK8touchgfx12CanvasWidget14getMinimalRectEv>:
     * @param  rectY      The y coordinate.
     * @param  rectWidth  The width.
     * @param  rectHeight The height.
     */
    Rect(int16_t rectX, int16_t rectY, int16_t rectWidth, int16_t rectHeight)
        : x(rectX), y(rectY), width(rectWidth), height(rectHeight)
 8003274:	2200      	movs	r2, #0
     * overwritten in subclasses and return the minimal rectangle containing the shape. See
     * classes such as Circle for example implementations.
     *
     * @return The minimal rectangle containing the shape drawn.
     */
    virtual Rect getMinimalRect() const
 8003276:	b510      	push	{r4, lr}
        return rect.width;
 8003278:	f9b1 4008 	ldrsh.w	r4, [r1, #8]
        return rect.height;
 800327c:	f9b1 100a 	ldrsh.w	r1, [r1, #10]
 8003280:	8002      	strh	r2, [r0, #0]
 8003282:	8042      	strh	r2, [r0, #2]
 8003284:	8084      	strh	r4, [r0, #4]
 8003286:	80c1      	strh	r1, [r0, #6]
    {
        return Rect(0, 0, getWidth(), getHeight());
    }
 8003288:	bd10      	pop	{r4, pc}

0800328a <_ZNK8touchgfx12CanvasWidget12getSolidRectEv>:
        : x(0), y(0), width(0), height(0)
 800328a:	2200      	movs	r2, #0
 800328c:	8002      	strh	r2, [r0, #0]
 800328e:	8042      	strh	r2, [r0, #2]
 8003290:	8082      	strh	r2, [r0, #4]
 8003292:	80c2      	strh	r2, [r0, #6]
     *       lines will not be drawn and may cause strange display artifacts.
     */
    virtual Rect getSolidRect() const
    {
        return Rect();
    }
 8003294:	4770      	bx	lr

08003296 <_ZN8touchgfx17CWRVectorRenderer7setModeENS_14VectorRenderer8DrawModeE>:
     *
     * @param mode The filling mode.
     */
    virtual void setMode(DrawMode mode)
    {
        drawMode = mode;
 8003296:	7701      	strb	r1, [r0, #28]
    }
 8003298:	4770      	bx	lr

0800329a <_ZN8touchgfx17CWRVectorRenderer19setStrokeMiterLimitEf>:

    virtual void setStrokeMiterLimit(float miterLimit)
    {
        strokeMiterLimit = miterLimit;
 800329a:	ed80 0a08 	vstr	s0, [r0, #32]
    }
 800329e:	4770      	bx	lr

080032a0 <_ZN8touchgfx17CWRVectorRenderer17setStrokeLineJoinENS_16VGStrokeLineJoinE>:

    virtual void setStrokeLineJoin(VGStrokeLineJoin lineJoin)
    {
        strokeLineJoin = lineJoin;
 80032a0:	f880 1024 	strb.w	r1, [r0, #36]	@ 0x24
    }
 80032a4:	4770      	bx	lr

080032a6 <_ZN8touchgfx17CWRVectorRenderer16setStrokeLineCapENS_15VGStrokeLineCapE>:

    virtual void setStrokeLineCap(VGStrokeLineCap lineCap)
    {
        strokeLineCap = lineCap;
 80032a6:	f880 1025 	strb.w	r1, [r0, #37]	@ 0x25
    }
 80032aa:	4770      	bx	lr

080032ac <_ZNK8touchgfx17CWRVectorRenderer17CanvasWidgetProxy16drawCanvasWidgetERKNS_4RectE>:
    class CanvasWidgetProxy : public CanvasWidget
    {
        virtual bool drawCanvasWidget(const Rect& invalidatedArea) const
        {
            return true;
        }
 80032ac:	2001      	movs	r0, #1
 80032ae:	4770      	bx	lr

080032b0 <_ZN8touchgfx23CWRVectorRendererRGB88816getLinearPainterEv>:
class CWRVectorRendererRGB888 : public CWRVectorRenderer
{
    virtual AbstractPainterLinearGradient& getLinearPainter()
    {
        return linearPainter;
    }
 80032b0:	3098      	adds	r0, #152	@ 0x98
 80032b2:	4770      	bx	lr

080032b4 <_ZN8touchgfx23CWRVectorRendererRGB88820getColorPainterColorEv>:

    virtual AbstractPainterColor& getColorPainterColor()
    {
        return colorPainter;
    }
 80032b4:	308c      	adds	r0, #140	@ 0x8c
 80032b6:	4770      	bx	lr

080032b8 <_ZN8touchgfx23CWRVectorRendererRGB88815getColorPainterEv>:

    virtual AbstractPainter& getColorPainter()
    {
        return colorPainter;
    }
 80032b8:	3084      	adds	r0, #132	@ 0x84
 80032ba:	4770      	bx	lr

080032bc <__tcf_1>:

namespace touchgfx
{
VectorRenderer* VectorRenderer::getInstance()
{
    static CWRVectorRendererRGB888 renderer;
 80032bc:	4770      	bx	lr
	...

080032c0 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>:
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80032c0:	4b02      	ldr	r3, [pc, #8]	@ (80032cc <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv+0xc>)
 80032c2:	2290      	movs	r2, #144	@ 0x90
 80032c4:	f883 235a 	strb.w	r2, [r3, #858]	@ 0x35a
}

void TouchGFXGeneratedHAL::configureInterrupts()
{
    NVIC_SetPriority(DMA2D_IRQn, 9);
}
 80032c8:	4770      	bx	lr
 80032ca:	bf00      	nop
 80032cc:	e000e100 	.word	0xe000e100

080032d0 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>:
}

void TouchGFXGeneratedHAL::setTFTFrameBuffer(uint16_t* adr)
{
    //setTFTFrameBuffer() not used for selected display interface
}
 80032d0:	4770      	bx	lr

080032d2 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12setRGBBufferEPhj>:

    virtual void setRGBBuffer(uint8_t* buffer, size_t sizeOfBuffer)
    {
        // Running in UI thread / main

        bufferRGB = buffer;
 80032d2:	6301      	str	r1, [r0, #48]	@ 0x30
        topBufferRGB = bufferRGB;
        sizeBufferRGB = sizeOfBuffer;
 80032d4:	e9c0 210d 	strd	r2, r1, [r0, #52]	@ 0x34
    }
 80032d8:	4770      	bx	lr

080032da <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EED1Ev>:
class DedicatedBufferController : public touchgfx::VideoController
 80032da:	4770      	bx	lr

080032dc <_ZN8touchgfx23CWRVectorRendererRGB888D1Ev>:
class CWRVectorRendererRGB888 : public CWRVectorRenderer
 80032dc:	4770      	bx	lr

080032de <_ZN8touchgfx17CWRVectorRenderer17CanvasWidgetProxyD1Ev>:
    class CanvasWidgetProxy : public CanvasWidget
 80032de:	4770      	bx	lr

080032e0 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12setVideoDataEmRNS0_15VideoDataReaderE>:
        mjpegDecoders[handle]->setVideoData(reader);
 80032e0:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 80032e4:	4611      	mov	r1, r2
 80032e6:	6840      	ldr	r0, [r0, #4]
 80032e8:	6803      	ldr	r3, [r0, #0]
 80032ea:	68db      	ldr	r3, [r3, #12]
 80032ec:	4718      	bx	r3

080032ee <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE29setVideoFrameRateCompensationEb>:
        return stream.isPlaying;
    }

    virtual void setVideoFrameRateCompensation(bool allow)
    {
        allowSkipFrames = allow;
 80032ee:	f880 103c 	strb.w	r1, [r0, #60]	@ 0x3c
    }
 80032f2:	4770      	bx	lr

080032f4 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EED0Ev>:
class DedicatedBufferController : public touchgfx::VideoController
 80032f4:	b510      	push	{r4, lr}
 80032f6:	4604      	mov	r4, r0
 80032f8:	2148      	movs	r1, #72	@ 0x48
 80032fa:	f023 fc48 	bl	8026b8e <_ZdlPvj>
 80032fe:	4620      	mov	r0, r4
 8003300:	bd10      	pop	{r4, pc}

08003302 <_ZN8touchgfx17CWRVectorRenderer17CanvasWidgetProxyD0Ev>:
 8003302:	b510      	push	{r4, lr}
 8003304:	4604      	mov	r4, r0
 8003306:	212c      	movs	r1, #44	@ 0x2c
 8003308:	f023 fc41 	bl	8026b8e <_ZdlPvj>
 800330c:	4620      	mov	r0, r4
 800330e:	bd10      	pop	{r4, pc}

08003310 <_ZN8touchgfx23CWRVectorRendererRGB888D0Ev>:
class CWRVectorRendererRGB888 : public CWRVectorRenderer
 8003310:	b510      	push	{r4, lr}
 8003312:	4604      	mov	r4, r0
 8003314:	21bc      	movs	r1, #188	@ 0xbc
 8003316:	f023 fc3a 	bl	8026b8e <_ZdlPvj>
 800331a:	4620      	mov	r0, r4
 800331c:	bd10      	pop	{r4, pc}
	...

08003320 <_ZN20TouchGFXGeneratedHAL10initializeEv>:
{
 8003320:	b538      	push	{r3, r4, r5, lr}
 8003322:	4604      	mov	r4, r0
    HAL::initialize();
 8003324:	f00d fc59 	bl	8010bda <_ZN8touchgfx3HAL10initializeEv>
    registerEventListener(*(Application::getInstance()));
 8003328:	6823      	ldr	r3, [r4, #0]
 800332a:	6e5d      	ldr	r5, [r3, #100]	@ 0x64
 800332c:	f014 f950 	bl	80175d0 <_ZN8touchgfx11Application11getInstanceEv>
 8003330:	4601      	mov	r1, r0
 8003332:	4620      	mov	r0, r4
 8003334:	47a8      	blx	r5
    setFrameBufferStartAddresses((void*)frameBuf, (void*)0, (void*)0);
 8003336:	6823      	ldr	r3, [r4, #0]
 8003338:	4908      	ldr	r1, [pc, #32]	@ (800335c <_ZN20TouchGFXGeneratedHAL10initializeEv+0x3c>)
 800333a:	4620      	mov	r0, r4
 800333c:	f8d3 5088 	ldr.w	r5, [r3, #136]	@ 0x88
 8003340:	2300      	movs	r3, #0
 8003342:	461a      	mov	r2, r3
 8003344:	47a8      	blx	r5
    void addDMA(touchgfx::DMA_Interface& dma)
    {
        this->dma = &dma;
 8003346:	6863      	ldr	r3, [r4, #4]
 8003348:	4a05      	ldr	r2, [pc, #20]	@ (8003360 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x40>)
 800334a:	6453      	str	r3, [r2, #68]	@ 0x44
        mjpegDecoders[index] = &decoder;
 800334c:	4b05      	ldr	r3, [pc, #20]	@ (8003364 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x44>)
 800334e:	605a      	str	r2, [r3, #4]
        bufferRGB = buffer;
 8003350:	4a05      	ldr	r2, [pc, #20]	@ (8003368 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x48>)
 8003352:	631a      	str	r2, [r3, #48]	@ 0x30
        topBufferRGB = bufferRGB;
 8003354:	639a      	str	r2, [r3, #56]	@ 0x38
        sizeBufferRGB = sizeOfBuffer;
 8003356:	4a05      	ldr	r2, [pc, #20]	@ (800336c <_ZN20TouchGFXGeneratedHAL10initializeEv+0x4c>)
 8003358:	635a      	str	r2, [r3, #52]	@ 0x34
}
 800335a:	bd38      	pop	{r3, r4, r5, pc}
 800335c:	d0119400 	.word	0xd0119400
 8003360:	2400ece8 	.word	0x2400ece8
 8003364:	2400eca0 	.word	0x2400eca0
 8003368:	d0000000 	.word	0xd0000000
 800336c:	00119400 	.word	0x00119400

08003370 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE21unregisterVideoWidgetEm>:
    virtual void unregisterVideoWidget(const Handle handle)
 8003370:	b538      	push	{r3, r4, r5, lr}
 8003372:	4604      	mov	r4, r0
 8003374:	460d      	mov	r5, r1
        MUTEX_LOCK(mutexBuffers);
 8003376:	6c40      	ldr	r0, [r0, #68]	@ 0x44
 8003378:	f04f 31ff 	mov.w	r1, #4294967295
 800337c:	f009 fac6 	bl	800c90c <osMutexAcquire>
        MUTEX_UNLOCK(mutexBuffers);
 8003380:	6c60      	ldr	r0, [r4, #68]	@ 0x44
 8003382:	f009 fae6 	bl	800c952 <osMutexRelease>
        streams[handle].isActive = false;
 8003386:	2324      	movs	r3, #36	@ 0x24
 8003388:	fb03 4505 	mla	r5, r3, r5, r4
 800338c:	2300      	movs	r3, #0
 800338e:	f885 3028 	strb.w	r3, [r5, #40]	@ 0x28
        if (oneIsActive == false)
 8003392:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 8003396:	b90b      	cbnz	r3, 800339c <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE21unregisterVideoWidgetEm+0x2c>
            topBufferRGB = bufferRGB;
 8003398:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800339a:	63a3      	str	r3, [r4, #56]	@ 0x38
    }
 800339c:	bd38      	pop	{r3, r4, r5, pc}

0800339e <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>:

void TouchGFXGeneratedHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
    HAL::flushFrameBuffer(rect);
 800339e:	f00d bbcc 	b.w	8010b3a <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>

080033a2 <_ZN20TouchGFXGeneratedHAL9blockCopyEPvPKvm>:
}

bool TouchGFXGeneratedHAL::blockCopy(void* RESTRICT dest, const void* RESTRICT src, uint32_t numBytes)
{
    return HAL::blockCopy(dest, src, numBytes);
 80033a2:	f00d bd2e 	b.w	8010e02 <_ZN8touchgfx3HAL9blockCopyEPvPKvm>

080033a6 <_ZNK8touchgfx8Drawable17invalidateContentEv>:
        if (visible)
 80033a6:	f890 2025 	ldrb.w	r2, [r0, #37]	@ 0x25
 80033aa:	b112      	cbz	r2, 80033b2 <_ZNK8touchgfx8Drawable17invalidateContentEv+0xc>
            invalidate();
 80033ac:	6803      	ldr	r3, [r0, #0]
 80033ae:	695b      	ldr	r3, [r3, #20]
 80033b0:	4718      	bx	r3
    }
 80033b2:	4770      	bx	lr

080033b4 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv>:
    // Because DMA2D access main memory directly, the DCache must be invalidated
    // becuase it could hold a wrong image of the framebuffer. That's done
    // using the function SCB_CleanInvalidateDCache(). Remember to enable
    // "CPU Cache" in the "System Core" settings for "Cortex M7" in CubeMX
    // in order for this function call to work.
    if (SCB->CCR & SCB_CCR_DC_Msk)
 80033b4:	4a12      	ldr	r2, [pc, #72]	@ (8003400 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x4c>)
 80033b6:	6953      	ldr	r3, [r2, #20]
 80033b8:	03db      	lsls	r3, r3, #15
{
 80033ba:	b570      	push	{r4, r5, r6, lr}
    if (SCB->CCR & SCB_CCR_DC_Msk)
 80033bc:	d51e      	bpl.n	80033fc <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x48>
    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 80033be:	2300      	movs	r3, #0
 80033c0:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80033c4:	f3bf 8f4f 	dsb	sy
    ccsidr = SCB->CCSIDR;
 80033c8:	f8d2 3080 	ldr.w	r3, [r2, #128]	@ 0x80
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 80033cc:	f643 74e0 	movw	r4, #16352	@ 0x3fe0
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80033d0:	f3c3 00c9 	ubfx	r0, r3, #3, #10
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80033d4:	f3c3 334e 	ubfx	r3, r3, #13, #15
 80033d8:	015b      	lsls	r3, r3, #5
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 80033da:	ea03 0604 	and.w	r6, r3, r4
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80033de:	4601      	mov	r1, r0
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 80033e0:	ea46 7581 	orr.w	r5, r6, r1, lsl #30
      } while (ways-- != 0U);
 80033e4:	3901      	subs	r1, #1
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 80033e6:	f8c2 5274 	str.w	r5, [r2, #628]	@ 0x274
      } while (ways-- != 0U);
 80033ea:	d2f9      	bcs.n	80033e0 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x2c>
    } while(sets-- != 0U);
 80033ec:	3b20      	subs	r3, #32
 80033ee:	f113 0f20 	cmn.w	r3, #32
 80033f2:	d1f2      	bne.n	80033da <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x26>
 80033f4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80033f8:	f3bf 8f6f 	isb	sy
    {
        SCB_CleanInvalidateDCache();
    }
}
 80033fc:	bd70      	pop	{r4, r5, r6, pc}
 80033fe:	bf00      	nop
 8003400:	e000ed00 	.word	0xe000ed00

08003404 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12getIsPlayingEm>:
    virtual bool getIsPlaying(const Handle handle)
 8003404:	b508      	push	{r3, lr}
        assert(handle < no_streams);
 8003406:	b131      	cbz	r1, 8003416 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12getIsPlayingEm+0x12>
 8003408:	4b04      	ldr	r3, [pc, #16]	@ (800341c <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12getIsPlayingEm+0x18>)
 800340a:	f44f 71b8 	mov.w	r1, #368	@ 0x170
 800340e:	4a04      	ldr	r2, [pc, #16]	@ (8003420 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12getIsPlayingEm+0x1c>)
 8003410:	4804      	ldr	r0, [pc, #16]	@ (8003424 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12getIsPlayingEm+0x20>)
 8003412:	f023 ff35 	bl	8027280 <__assert_func>
    }
 8003416:	f890 0029 	ldrb.w	r0, [r0, #41]	@ 0x29
 800341a:	bd08      	pop	{r3, pc}
 800341c:	08028ce8 	.word	0x08028ce8
 8003420:	08028cfc 	.word	0x08028cfc
 8003424:	08028e86 	.word	0x08028e86

08003428 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE19getVideoInformationEmPNS0_16VideoInformationE>:
    virtual void getVideoInformation(const Handle handle, touchgfx::VideoInformation* data)
 8003428:	b510      	push	{r4, lr}
        assert(handle < no_streams);
 800342a:	b131      	cbz	r1, 800343a <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE19getVideoInformationEmPNS0_16VideoInformationE+0x12>
 800342c:	4b06      	ldr	r3, [pc, #24]	@ (8003448 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE19getVideoInformationEmPNS0_16VideoInformationE+0x20>)
 800342e:	f44f 71b5 	mov.w	r1, #362	@ 0x16a
 8003432:	4a06      	ldr	r2, [pc, #24]	@ (800344c <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE19getVideoInformationEmPNS0_16VideoInformationE+0x24>)
 8003434:	4806      	ldr	r0, [pc, #24]	@ (8003450 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE19getVideoInformationEmPNS0_16VideoInformationE+0x28>)
 8003436:	f023 ff23 	bl	8027280 <__assert_func>
        mjpegDecoders[handle]->getVideoInfo(data);
 800343a:	6840      	ldr	r0, [r0, #4]
 800343c:	4611      	mov	r1, r2
 800343e:	6803      	ldr	r3, [r0, #0]
    }
 8003440:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        mjpegDecoders[handle]->getVideoInfo(data);
 8003444:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003446:	4718      	bx	r3
 8003448:	08028ce8 	.word	0x08028ce8
 800344c:	08028ed0 	.word	0x08028ed0
 8003450:	08028e86 	.word	0x08028e86

08003454 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE21getCurrentFrameNumberEm>:
    virtual uint32_t getCurrentFrameNumber(const Handle handle)
 8003454:	b508      	push	{r3, lr}
        assert(handle < no_streams);
 8003456:	b129      	cbz	r1, 8003464 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE21getCurrentFrameNumberEm+0x10>
 8003458:	4b03      	ldr	r3, [pc, #12]	@ (8003468 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE21getCurrentFrameNumberEm+0x14>)
 800345a:	2179      	movs	r1, #121	@ 0x79
 800345c:	4a03      	ldr	r2, [pc, #12]	@ (800346c <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE21getCurrentFrameNumberEm+0x18>)
 800345e:	4804      	ldr	r0, [pc, #16]	@ (8003470 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE21getCurrentFrameNumberEm+0x1c>)
 8003460:	f023 ff0e 	bl	8027280 <__assert_func>
    }
 8003464:	68c0      	ldr	r0, [r0, #12]
 8003466:	bd08      	pop	{r3, pc}
 8003468:	08028ce8 	.word	0x08028ce8
 800346c:	0802907e 	.word	0x0802907e
 8003470:	08028e86 	.word	0x08028e86

08003474 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm>:
    virtual void setCommand(const Handle handle, Command cmd, uint32_t param)
 8003474:	b510      	push	{r4, lr}
 8003476:	4604      	mov	r4, r0
        assert(handle < no_streams);
 8003478:	b129      	cbz	r1, 8003486 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm+0x12>
 800347a:	4b19      	ldr	r3, [pc, #100]	@ (80034e0 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm+0x6c>)
 800347c:	21a2      	movs	r1, #162	@ 0xa2
 800347e:	4a19      	ldr	r2, [pc, #100]	@ (80034e4 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm+0x70>)
 8003480:	4819      	ldr	r0, [pc, #100]	@ (80034e8 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm+0x74>)
 8003482:	f023 fefd 	bl	8027280 <__assert_func>
        switch (cmd)
 8003486:	2a05      	cmp	r2, #5
 8003488:	d815      	bhi.n	80034b6 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm+0x42>
 800348a:	e8df f002 	tbb	[pc, r2]
 800348e:	1103      	.short	0x1103
 8003490:	221c1715 	.word	0x221c1715
            if (mjpegDecoders[handle]->hasVideo())
 8003494:	6840      	ldr	r0, [r0, #4]
 8003496:	6803      	ldr	r3, [r0, #0]
 8003498:	691b      	ldr	r3, [r3, #16]
 800349a:	4798      	blx	r3
 800349c:	b158      	cbz	r0, 80034b6 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm+0x42>
                stream.isPlaying = true;
 800349e:	2301      	movs	r3, #1
 80034a0:	f884 3029 	strb.w	r3, [r4, #41]	@ 0x29
                stream.hasMoreFrames = true; // Assume more frames, lowered on end
 80034a4:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
            stream.frameCount = 0;
 80034a8:	2300      	movs	r3, #0
            stream.tickCount = 0;
 80034aa:	e9c4 3304 	strd	r3, r3, [r4, #16]
            break;
 80034ae:	e002      	b.n	80034b6 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm+0x42>
            stream.isPlaying = false;
 80034b0:	2300      	movs	r3, #0
 80034b2:	f880 3029 	strb.w	r3, [r0, #41]	@ 0x29
    }
 80034b6:	bd10      	pop	{r4, pc}
            stream.seek_to_frame = param;
 80034b8:	6203      	str	r3, [r0, #32]
 80034ba:	e7f5      	b.n	80034a8 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm+0x34>
            stream.seek_to_frame = param;
 80034bc:	6203      	str	r3, [r0, #32]
            stream.isShowingOneFrame = true;
 80034be:	2301      	movs	r3, #1
 80034c0:	f880 302a 	strb.w	r3, [r0, #42]	@ 0x2a
 80034c4:	e7f0      	b.n	80034a8 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm+0x34>
            stream.isPlaying = false;
 80034c6:	2300      	movs	r3, #0
 80034c8:	f880 3029 	strb.w	r3, [r0, #41]	@ 0x29
            stream.seek_to_frame = 1;
 80034cc:	2301      	movs	r3, #1
 80034ce:	6203      	str	r3, [r0, #32]
            break;
 80034d0:	e7f1      	b.n	80034b6 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm+0x42>
            stream.repeat = (param > 0);
 80034d2:	3b00      	subs	r3, #0
 80034d4:	bf18      	it	ne
 80034d6:	2301      	movne	r3, #1
 80034d8:	f880 302d 	strb.w	r3, [r0, #45]	@ 0x2d
    }
 80034dc:	e7eb      	b.n	80034b6 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm+0x42>
 80034de:	bf00      	nop
 80034e0:	08028ce8 	.word	0x08028ce8
 80034e4:	08029233 	.word	0x08029233
 80034e8:	08028e86 	.word	0x08028e86

080034ec <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12setVideoDataEmPKhm>:
    virtual void setVideoData(const Handle handle, const uint8_t* movie, const uint32_t length)
 80034ec:	b510      	push	{r4, lr}
 80034ee:	460c      	mov	r4, r1
 80034f0:	4611      	mov	r1, r2
 80034f2:	461a      	mov	r2, r3
        assert(handle < no_streams);
 80034f4:	b12c      	cbz	r4, 8003502 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12setVideoDataEmPKhm+0x16>
 80034f6:	4b06      	ldr	r3, [pc, #24]	@ (8003510 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12setVideoDataEmPKhm+0x24>)
 80034f8:	2190      	movs	r1, #144	@ 0x90
 80034fa:	4a06      	ldr	r2, [pc, #24]	@ (8003514 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12setVideoDataEmPKhm+0x28>)
 80034fc:	4806      	ldr	r0, [pc, #24]	@ (8003518 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12setVideoDataEmPKhm+0x2c>)
 80034fe:	f023 febf 	bl	8027280 <__assert_func>
        stream.frameNumber = 0;
 8003502:	60c4      	str	r4, [r0, #12]
        mjpegDecoders[handle]->setVideoData(movie, length);
 8003504:	6840      	ldr	r0, [r0, #4]
 8003506:	6803      	ldr	r3, [r0, #0]
    }
 8003508:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        mjpegDecoders[handle]->setVideoData(movie, length);
 800350c:	689b      	ldr	r3, [r3, #8]
 800350e:	4718      	bx	r3
 8003510:	08028ce8 	.word	0x08028ce8
 8003514:	08029407 	.word	0x08029407
 8003518:	08028e86 	.word	0x08028e86

0800351c <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12setFrameRateEmmm>:
    virtual void setFrameRate(const Handle handle, uint32_t ui_frames, uint32_t video_frames)
 800351c:	b508      	push	{r3, lr}
        assert(handle < no_streams);
 800351e:	b129      	cbz	r1, 800352c <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12setFrameRateEmmm+0x10>
 8003520:	4b05      	ldr	r3, [pc, #20]	@ (8003538 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12setFrameRateEmmm+0x1c>)
 8003522:	2182      	movs	r1, #130	@ 0x82
 8003524:	4a05      	ldr	r2, [pc, #20]	@ (800353c <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12setFrameRateEmmm+0x20>)
 8003526:	4806      	ldr	r0, [pc, #24]	@ (8003540 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12setFrameRateEmmm+0x24>)
 8003528:	f023 feaa 	bl	8027280 <__assert_func>
        stream.tickCount = 0;
 800352c:	e9c0 1104 	strd	r1, r1, [r0, #16]
        stream.frame_rate_video = video_frames;
 8003530:	e9c0 3206 	strd	r3, r2, [r0, #24]
    }
 8003534:	bd08      	pop	{r3, pc}
 8003536:	bf00      	nop
 8003538:	08028ce8 	.word	0x08028ce8
 800353c:	080295e2 	.word	0x080295e2
 8003540:	08028e86 	.word	0x08028e86

08003544 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE4drawEmRKNS0_4RectERKNS0_11VideoWidgetE>:
        if (firstDrawThisFrame)
 8003544:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
    virtual void draw(const Handle handle, const touchgfx::Rect& invalidatedArea, const touchgfx::VideoWidget& widget)
 8003548:	b510      	push	{r4, lr}
 800354a:	4604      	mov	r4, r0
        if (firstDrawThisFrame)
 800354c:	b153      	cbz	r3, 8003564 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE4drawEmRKNS0_4RectERKNS0_11VideoWidgetE+0x20>
            MUTEX_LOCK(mutexBuffers);
 800354e:	f04f 31ff 	mov.w	r1, #4294967295
 8003552:	6c40      	ldr	r0, [r0, #68]	@ 0x44
 8003554:	f009 f9da 	bl	800c90c <osMutexAcquire>
            firstDrawThisFrame = false;
 8003558:	2300      	movs	r3, #0
 800355a:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
            uiHasMutex = true;
 800355e:	2301      	movs	r3, #1
 8003560:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
    }
 8003564:	bd10      	pop	{r4, pc}

08003566 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE>:
     *
     * @param [out] last Result, the address of the actual instance of the Widget.
     */
    virtual void getLastChild(int16_t /*x*/, int16_t /*y*/, Drawable** last)
    {
        if (isVisible() && isTouchable())
 8003566:	f890 2025 	ldrb.w	r2, [r0, #37]	@ 0x25
 800356a:	b11a      	cbz	r2, 8003574 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0xe>
 800356c:	f890 2024 	ldrb.w	r2, [r0, #36]	@ 0x24
 8003570:	b102      	cbz	r2, 8003574 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0xe>
        {
            *last = this;
 8003572:	6018      	str	r0, [r3, #0]
        }
    }
 8003574:	4770      	bx	lr
	...

08003578 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE11updateFrameEmRNS0_11VideoWidgetE>:
    virtual bool updateFrame(const Handle handle, touchgfx::VideoWidget& widget)
 8003578:	b510      	push	{r4, lr}
 800357a:	4604      	mov	r4, r0
 800357c:	4610      	mov	r0, r2
        assert(handle < no_streams);
 800357e:	b129      	cbz	r1, 800358c <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE11updateFrameEmRNS0_11VideoWidgetE+0x14>
 8003580:	4b13      	ldr	r3, [pc, #76]	@ (80035d0 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE11updateFrameEmRNS0_11VideoWidgetE+0x58>)
 8003582:	21d0      	movs	r1, #208	@ 0xd0
 8003584:	4a13      	ldr	r2, [pc, #76]	@ (80035d4 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE11updateFrameEmRNS0_11VideoWidgetE+0x5c>)
 8003586:	4814      	ldr	r0, [pc, #80]	@ (80035d8 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE11updateFrameEmRNS0_11VideoWidgetE+0x60>)
 8003588:	f023 fe7a 	bl	8027280 <__assert_func>
        if (stream.isPlaying)
 800358c:	f894 3029 	ldrb.w	r3, [r4, #41]	@ 0x29
 8003590:	b133      	cbz	r3, 80035a0 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE11updateFrameEmRNS0_11VideoWidgetE+0x28>
        return vSyncForFrame;
 8003592:	4b12      	ldr	r3, [pc, #72]	@ (80035dc <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE11updateFrameEmRNS0_11VideoWidgetE+0x64>)
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f893 206b 	ldrb.w	r2, [r3, #107]	@ 0x6b
            stream.tickCount += HAL::getInstance()->getLCDRefreshCount();
 800359a:	6963      	ldr	r3, [r4, #20]
 800359c:	4413      	add	r3, r2
 800359e:	6163      	str	r3, [r4, #20]
        if (stream.doInvalidateOnNextTick)
 80035a0:	f894 302b 	ldrb.w	r3, [r4, #43]	@ 0x2b
 80035a4:	b90b      	cbnz	r3, 80035aa <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE11updateFrameEmRNS0_11VideoWidgetE+0x32>
        return true;
 80035a6:	2001      	movs	r0, #1
    }
 80035a8:	bd10      	pop	{r4, pc}
     *
     * @param [in] videoBuffer Video buffer.
     */
    void setVideoBuffer(uint8_t* const videoBuffer)
    {
        buffer = videoBuffer;
 80035aa:	68a3      	ldr	r3, [r4, #8]
 80035ac:	6303      	str	r3, [r0, #48]	@ 0x30
            widget.invalidate();
 80035ae:	6803      	ldr	r3, [r0, #0]
 80035b0:	695b      	ldr	r3, [r3, #20]
 80035b2:	4798      	blx	r3
            stream.doInvalidateOnNextTick = false;
 80035b4:	2300      	movs	r3, #0
            if (!stream.hasMoreFrames && !stream.repeat)
 80035b6:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
            stream.doInvalidateOnNextTick = false;
 80035ba:	f884 302b 	strb.w	r3, [r4, #43]	@ 0x2b
            if (!stream.hasMoreFrames && !stream.repeat)
 80035be:	2800      	cmp	r0, #0
 80035c0:	d1f1      	bne.n	80035a6 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE11updateFrameEmRNS0_11VideoWidgetE+0x2e>
 80035c2:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d1ee      	bne.n	80035a8 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE11updateFrameEmRNS0_11VideoWidgetE+0x30>
                stream.isPlaying = false;
 80035ca:	f884 0029 	strb.w	r0, [r4, #41]	@ 0x29
 80035ce:	e7eb      	b.n	80035a8 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE11updateFrameEmRNS0_11VideoWidgetE+0x30>
 80035d0:	08028ce8 	.word	0x08028ce8
 80035d4:	0802979e 	.word	0x0802979e
 80035d8:	08028e86 	.word	0x08028e86
 80035dc:	24028e20 	.word	0x24028e20

080035e0 <_ZN20TouchGFXGeneratedHAL8endFrameEv>:
{
 80035e0:	b570      	push	{r4, r5, r6, lr}
            if (stream.isPlaying || stream.isShowingOneFrame)
 80035e2:	4c1a      	ldr	r4, [pc, #104]	@ (800364c <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x6c>)
 80035e4:	4605      	mov	r5, r0
    HAL::endFrame();
 80035e6:	f00d faeb 	bl	8010bc0 <_ZN8touchgfx3HAL8endFrameEv>
 80035ea:	f894 3029 	ldrb.w	r3, [r4, #41]	@ 0x29
 80035ee:	b913      	cbnz	r3, 80035f6 <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x16>
 80035f0:	f894 302a 	ldrb.w	r3, [r4, #42]	@ 0x2a
 80035f4:	b1ab      	cbz	r3, 8003622 <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x42>
    bool decodeForNextTick(Stream& stream)
    {
        // Running in UI thread

        // Compare tickCount/frameCount to frame_rate_ticks/frame_rate_video
        if ((stream.tickCount * stream.frame_rate_video) >= (stream.frame_rate_ticks * stream.frameCount))
 80035f6:	69e1      	ldr	r1, [r4, #28]
 80035f8:	e9d4 3205 	ldrd	r3, r2, [r4, #20]
 80035fc:	4353      	muls	r3, r2
 80035fe:	6922      	ldr	r2, [r4, #16]
 8003600:	434a      	muls	r2, r1
 8003602:	4293      	cmp	r3, r2
 8003604:	d30d      	bcc.n	8003622 <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x42>
        {
            if (allowSkipFrames)
 8003606:	f894 003c 	ldrb.w	r0, [r4, #60]	@ 0x3c
 800360a:	b138      	cbz	r0, 800361c <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x3c>
            {
                stream.skip_frames = (stream.tickCount * stream.frame_rate_video - stream.frame_rate_ticks * stream.frameCount) / stream.frame_rate_ticks;
 800360c:	1a9b      	subs	r3, r3, r2
 800360e:	fbb3 f2f1 	udiv	r2, r3, r1
                if (stream.skip_frames > 0)
 8003612:	4299      	cmp	r1, r3
                {
                    stream.skip_frames--;
 8003614:	bf98      	it	ls
 8003616:	f102 32ff 	addls.w	r2, r2, #4294967295
 800361a:	6262      	str	r2, [r4, #36]	@ 0x24
                    stream.doDecode = true;
 800361c:	2301      	movs	r3, #1
 800361e:	f884 302e 	strb.w	r3, [r4, #46]	@ 0x2e
        firstDrawThisFrame = true;
 8003622:	2301      	movs	r3, #1
        SEM_POST(semDecode);
 8003624:	6c20      	ldr	r0, [r4, #64]	@ 0x40
        firstDrawThisFrame = true;
 8003626:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
        SEM_POST(semDecode);
 800362a:	f009 fa27 	bl	800ca7c <osSemaphoreRelease>
        if (uiHasMutex)
 800362e:	f894 303e 	ldrb.w	r3, [r4, #62]	@ 0x3e
 8003632:	b12b      	cbz	r3, 8003640 <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x60>
            MUTEX_UNLOCK(mutexBuffers);
 8003634:	6c60      	ldr	r0, [r4, #68]	@ 0x44
 8003636:	f009 f98c 	bl	800c952 <osMutexRelease>
            uiHasMutex = false;
 800363a:	2300      	movs	r3, #0
 800363c:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
    dma.start();
 8003640:	6868      	ldr	r0, [r5, #4]
 8003642:	6803      	ldr	r3, [r0, #0]
}
 8003644:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    dma.start();
 8003648:	691b      	ldr	r3, [r3, #16]
 800364a:	4718      	bx	r3
 800364c:	2400eca0 	.word	0x2400eca0

08003650 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>:
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003650:	4b04      	ldr	r3, [pc, #16]	@ (8003664 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv+0x14>)
 8003652:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8003656:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  __ASM volatile ("dsb 0xF":::"memory");
 800365a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800365e:	f3bf 8f6f 	isb	sy
}
 8003662:	4770      	bx	lr
 8003664:	e000e100 	.word	0xe000e100

08003668 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>:
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003668:	4b02      	ldr	r3, [pc, #8]	@ (8003674 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv+0xc>)
 800366a:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 800366e:	609a      	str	r2, [r3, #8]
}
 8003670:	4770      	bx	lr
 8003672:	bf00      	nop
 8003674:	e000e100 	.word	0xe000e100

08003678 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE19registerVideoWidgetERNS0_11VideoWidgetE>:
    virtual Handle registerVideoWidget(touchgfx::VideoWidget& widget)
 8003678:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800367a:	4603      	mov	r3, r0
    {
        // Running in UI thread

        for (uint32_t i = 0; i < no_streams; i++)
        {
            if (streams[i].isActive == false)
 800367c:	f890 0028 	ldrb.w	r0, [r0, #40]	@ 0x28
 8003680:	b9d8      	cbnz	r0, 80036ba <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE19registerVideoWidgetERNS0_11VideoWidgetE+0x42>
            {
                // Reset stream parameters
                streams[i] = Stream();
 8003682:	f44f 7280 	mov.w	r2, #256	@ 0x100
        if (topBufferRGB + sizeOfOneDecodeBuffer > (bufferRGB + sizeBufferRGB))
 8003686:	6b9e      	ldr	r6, [r3, #56]	@ 0x38
        streams[handle].isActive = true;
 8003688:	2501      	movs	r5, #1
                streams[i] = Stream();
 800368a:	60d8      	str	r0, [r3, #12]
 800368c:	859a      	strh	r2, [r3, #44]	@ 0x2c
        if (topBufferRGB + sizeOfOneDecodeBuffer > (bufferRGB + sizeBufferRGB))
 800368e:	f506 128c 	add.w	r2, r6, #1146880	@ 0x118000
                streams[i] = Stream();
 8003692:	6118      	str	r0, [r3, #16]
        if (topBufferRGB + sizeOfOneDecodeBuffer > (bufferRGB + sizeBufferRGB))
 8003694:	f502 52a0 	add.w	r2, r2, #5120	@ 0x1400
                streams[i] = Stream();
 8003698:	6158      	str	r0, [r3, #20]
 800369a:	6198      	str	r0, [r3, #24]
 800369c:	61d8      	str	r0, [r3, #28]
 800369e:	6218      	str	r0, [r3, #32]
 80036a0:	6258      	str	r0, [r3, #36]	@ 0x24
        streams[handle].isActive = true;
 80036a2:	629d      	str	r5, [r3, #40]	@ 0x28
                streams[i] = Stream();
 80036a4:	f883 002e 	strb.w	r0, [r3, #46]	@ 0x2e
        if (topBufferRGB + sizeOfOneDecodeBuffer > (bufferRGB + sizeBufferRGB))
 80036a8:	e9d3 470c 	ldrd	r4, r7, [r3, #48]	@ 0x30
 80036ac:	443c      	add	r4, r7
 80036ae:	42a2      	cmp	r2, r4
 80036b0:	d90a      	bls.n	80036c8 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE19registerVideoWidgetERNS0_11VideoWidgetE+0x50>
            assert(0 && "registerVideoWidget: Unable to allocate RGB buffer!");
 80036b2:	4b0b      	ldr	r3, [pc, #44]	@ (80036e0 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE19registerVideoWidgetERNS0_11VideoWidgetE+0x68>)
 80036b4:	2152      	movs	r1, #82	@ 0x52
 80036b6:	4a0b      	ldr	r2, [pc, #44]	@ (80036e4 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE19registerVideoWidgetERNS0_11VideoWidgetE+0x6c>)
 80036b8:	e003      	b.n	80036c2 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE19registerVideoWidgetERNS0_11VideoWidgetE+0x4a>

                return static_cast<VideoController::Handle>(i);
            }
        }

        assert(0 && "Unable to find free video stream handle!");
 80036ba:	4b0b      	ldr	r3, [pc, #44]	@ (80036e8 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE19registerVideoWidgetERNS0_11VideoWidgetE+0x70>)
 80036bc:	f240 11c5 	movw	r1, #453	@ 0x1c5
 80036c0:	4a0a      	ldr	r2, [pc, #40]	@ (80036ec <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE19registerVideoWidgetERNS0_11VideoWidgetE+0x74>)
            assert(0 && "registerVideoWidget: Unable to allocate RGB buffer!");
 80036c2:	480b      	ldr	r0, [pc, #44]	@ (80036f0 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE19registerVideoWidgetERNS0_11VideoWidgetE+0x78>)
 80036c4:	f023 fddc 	bl	8027280 <__assert_func>
        decodeBuffers[handle] = (uint32_t*)topBufferRGB;
 80036c8:	609e      	str	r6, [r3, #8]
        topBufferRGB += sizeOfOneDecodeBuffer;
 80036ca:	639a      	str	r2, [r3, #56]	@ 0x38
     * @param height Height of the videoBuffer in pixels
     */
    void setVideoBufferFormat(Bitmap::BitmapFormat bufferFormat, int16_t width, int16_t height)
    {
        format = bufferFormat;
        bufferWidth = width;
 80036cc:	f44f 7348 	mov.w	r3, #800	@ 0x320
        format = bufferFormat;
 80036d0:	f881 5034 	strb.w	r5, [r1, #52]	@ 0x34
        bufferWidth = width;
 80036d4:	86cb      	strh	r3, [r1, #54]	@ 0x36
        bufferHeight = height;
 80036d6:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
        buffer = videoBuffer;
 80036da:	6308      	str	r0, [r1, #48]	@ 0x30
        bufferHeight = height;
 80036dc:	870b      	strh	r3, [r1, #56]	@ 0x38
    }
 80036de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80036e0:	08029af6 	.word	0x08029af6
 80036e4:	08029b31 	.word	0x08029b31
 80036e8:	0802993f 	.word	0x0802993f
 80036ec:	0802996f 	.word	0x0802996f
 80036f0:	08028e86 	.word	0x08028e86

080036f4 <_ZN8touchgfx21AbstractPainterRGB888C1Ev>:
        : widgetWidth(0)
 80036f4:	2300      	movs	r3, #0
 * @see AbstractPainter
 */
class AbstractPainterRGB888 : public AbstractPainter
{
public:
    AbstractPainterRGB888()
 80036f6:	b570      	push	{r4, r5, r6, lr}
        if (instance->useAuxiliaryLCD && instance->auxiliaryLCD)
 80036f8:	4e12      	ldr	r6, [pc, #72]	@ (8003744 <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0x50>)
 80036fa:	4604      	mov	r4, r0
 80036fc:	8083      	strh	r3, [r0, #4]
        : AbstractPainter()
 80036fe:	4b12      	ldr	r3, [pc, #72]	@ (8003748 <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0x54>)
 8003700:	6003      	str	r3, [r0, #0]
 8003702:	6833      	ldr	r3, [r6, #0]
 8003704:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 8003708:	b10a      	cbz	r2, 800370e <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0x1a>
 800370a:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 800370c:	b900      	cbnz	r0, 8003710 <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0x1c>
        return instance->lcdRef;
 800370e:	6898      	ldr	r0, [r3, #8]
     *
     * @return True if the format matches the framebuffer format, false otherwise.
     */
    FORCE_INLINE_FUNCTION static bool compatibleFramebuffer(Bitmap::BitmapFormat format)
    {
        bool compat = HAL::lcd().framebufferFormat() == format;
 8003710:	6803      	ldr	r3, [r0, #0]
 8003712:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003714:	4798      	blx	r3
 8003716:	1e43      	subs	r3, r0, #1
 8003718:	425d      	negs	r5, r3
 800371a:	415d      	adcs	r5, r3
        return auxiliaryLCD;
 800371c:	6833      	ldr	r3, [r6, #0]
 800371e:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
        if (HAL::getInstance()->getAuxiliaryLCD())
 8003720:	b130      	cbz	r0, 8003730 <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0x3c>
        {
            compat |= HAL::getInstance()->getAuxiliaryLCD()->framebufferFormat() == format;
 8003722:	6803      	ldr	r3, [r0, #0]
 8003724:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003726:	4798      	blx	r3
 8003728:	2801      	cmp	r0, #1
 800372a:	bf08      	it	eq
 800372c:	f045 0501 	orreq.w	r5, r5, #1
    {
        assert(compatibleFramebuffer(Bitmap::RGB888) && "The chosen painter only works with RGB888 displays");
 8003730:	b92d      	cbnz	r5, 800373e <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0x4a>
 8003732:	4b06      	ldr	r3, [pc, #24]	@ (800374c <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0x58>)
 8003734:	2127      	movs	r1, #39	@ 0x27
 8003736:	4a06      	ldr	r2, [pc, #24]	@ (8003750 <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0x5c>)
 8003738:	4806      	ldr	r0, [pc, #24]	@ (8003754 <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0x60>)
 800373a:	f023 fda1 	bl	8027280 <__assert_func>
    }
 800373e:	4620      	mov	r0, r4
 8003740:	bd70      	pop	{r4, r5, r6, pc}
 8003742:	bf00      	nop
 8003744:	24028e20 	.word	0x24028e20
 8003748:	08029de4 	.word	0x08029de4
 800374c:	08029cd4 	.word	0x08029cd4
 8003750:	08029d32 	.word	0x08029d32
 8003754:	08029d6b 	.word	0x08029d6b

08003758 <_ZN8touchgfx14VectorRenderer11getInstanceEv>:
{
 8003758:	b570      	push	{r4, r5, r6, lr}
    static CWRVectorRendererRGB888 renderer;
 800375a:	4e24      	ldr	r6, [pc, #144]	@ (80037ec <_ZN8touchgfx14VectorRenderer11getInstanceEv+0x94>)
 800375c:	6835      	ldr	r5, [r6, #0]
 800375e:	f3bf 8f5b 	dmb	ish
 8003762:	f015 0501 	ands.w	r5, r5, #1
 8003766:	d13f      	bne.n	80037e8 <_ZN8touchgfx14VectorRenderer11getInstanceEv+0x90>
 8003768:	4630      	mov	r0, r6
 800376a:	f023 fa12 	bl	8026b92 <__cxa_guard_acquire>
 800376e:	2800      	cmp	r0, #0
 8003770:	d03a      	beq.n	80037e8 <_ZN8touchgfx14VectorRenderer11getInstanceEv+0x90>
class CWRVectorRenderer : public VectorRenderer
 8003772:	4c1f      	ldr	r4, [pc, #124]	@ (80037f0 <_ZN8touchgfx14VectorRenderer11getInstanceEv+0x98>)
 8003774:	4b1f      	ldr	r3, [pc, #124]	@ (80037f4 <_ZN8touchgfx14VectorRenderer11getInstanceEv+0x9c>)
 8003776:	f104 0034 	add.w	r0, r4, #52	@ 0x34
 800377a:	6125      	str	r5, [r4, #16]
 800377c:	84e5      	strh	r5, [r4, #38]	@ 0x26
 800377e:	62a5      	str	r5, [r4, #40]	@ 0x28
 8003780:	85a5      	strh	r5, [r4, #44]	@ 0x2c
 8003782:	e9c4 3500 	strd	r3, r5, [r4]
 8003786:	e9c4 5502 	strd	r5, r5, [r4, #8]
 800378a:	f015 faf8 	bl	8018d7e <_ZN8touchgfx9Matrix3x3C1Ev>
    class CanvasWidgetProxy : public CanvasWidget
 800378e:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8003792:	f010 fa63 	bl	8013c5c <_ZN8touchgfx12CanvasWidgetC1Ev>
 8003796:	4b18      	ldr	r3, [pc, #96]	@ (80037f8 <_ZN8touchgfx14VectorRenderer11getInstanceEv+0xa0>)
class CWRVectorRendererRGB888 : public CWRVectorRenderer
 8003798:	4620      	mov	r0, r4
    class CanvasWidgetProxy : public CanvasWidget
 800379a:	65a3      	str	r3, [r4, #88]	@ 0x58
class CWRVectorRendererRGB888 : public CWRVectorRenderer
 800379c:	4b17      	ldr	r3, [pc, #92]	@ (80037fc <_ZN8touchgfx14VectorRenderer11getInstanceEv+0xa4>)
 800379e:	f840 3b84 	str.w	r3, [r0], #132
     * Initializes a new instance of the PainterRGB888 class.
     *
     * @param  color (Optional) the color, default is black.
     */
    PainterRGB888(colortype color = 0)
        : AbstractPainterRGB888(), AbstractPainterColor(color)
 80037a2:	f7ff ffa7 	bl	80036f4 <_ZN8touchgfx21AbstractPainterRGB888C1Ev>
 80037a6:	4b16      	ldr	r3, [pc, #88]	@ (8003800 <_ZN8touchgfx14VectorRenderer11getInstanceEv+0xa8>)
 80037a8:	4816      	ldr	r0, [pc, #88]	@ (8003804 <_ZN8touchgfx14VectorRenderer11getInstanceEv+0xac>)
 80037aa:	f8c4 3084 	str.w	r3, [r4, #132]	@ 0x84
 80037ae:	3324      	adds	r3, #36	@ 0x24
     *
     * @param  color The color.
     */
    virtual void setColor(colortype color)
    {
        painterColor = color;
 80037b0:	f8c4 5090 	str.w	r5, [r4, #144]	@ 0x90
 80037b4:	f8c4 308c 	str.w	r3, [r4, #140]	@ 0x8c
class AbstractPainterLinearGradient : public AbstractPainter
{
public:
    /** Constructor. */
    AbstractPainterLinearGradient()
        : AbstractPainter(),
 80037b8:	2364      	movs	r3, #100	@ 0x64
 80037ba:	f8c4 509c 	str.w	r5, [r4, #156]	@ 0x9c
 80037be:	f8c4 50a8 	str.w	r5, [r4, #168]	@ 0xa8
          coord0(0), coord1(100), texture(0), isSolid(false), isVertical(false), isHorizontal(false), clSlope(0.0f), clOffset(0.0f), horizontalDistance(0.0f), deltaColor(0.0f)
 80037c2:	e9c4 3528 	strd	r3, r5, [r4, #160]	@ 0xa0
 80037c6:	2300      	movs	r3, #0
 80037c8:	f8c4 30ac 	str.w	r3, [r4, #172]	@ 0xac
 80037cc:	f8c4 30b0 	str.w	r3, [r4, #176]	@ 0xb0
 80037d0:	f8c4 30b4 	str.w	r3, [r4, #180]	@ 0xb4
 80037d4:	f8c4 30b8 	str.w	r3, [r4, #184]	@ 0xb8
 * An abstract class for creating painter classes for drawing canvas widgets. All canvas widgets
 * need a painter to fill the shape drawn with a CanvasWidgetRenderer. The painter must provide
 * the color of a pixel on a given coordinate, which will the be blended into the framebuffer
 * depending on the position of the canvas widget and the transparency of the given pixel.
 */
class PainterRGB888LinearGradient : public AbstractPainterLinearGradient
 80037d8:	4b0b      	ldr	r3, [pc, #44]	@ (8003808 <_ZN8touchgfx14VectorRenderer11getInstanceEv+0xb0>)
 80037da:	f8c4 3098 	str.w	r3, [r4, #152]	@ 0x98
 80037de:	f023 fd6d 	bl	80272bc <atexit>
 80037e2:	4630      	mov	r0, r6
 80037e4:	f023 f9e1 	bl	8026baa <__cxa_guard_release>
}
 80037e8:	4801      	ldr	r0, [pc, #4]	@ (80037f0 <_ZN8touchgfx14VectorRenderer11getInstanceEv+0x98>)
 80037ea:	bd70      	pop	{r4, r5, r6, pc}
 80037ec:	2400ebe0 	.word	0x2400ebe0
 80037f0:	2400ebe4 	.word	0x2400ebe4
 80037f4:	0802c074 	.word	0x0802c074
 80037f8:	08029e04 	.word	0x08029e04
 80037fc:	08029e7c 	.word	0x08029e7c
 8003800:	0802c0c0 	.word	0x0802c0c0
 8003804:	080032bd 	.word	0x080032bd
 8003808:	0802c0f8 	.word	0x0802c0f8

0800380c <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE16decoderTaskEntryEv>:
    void decoderTaskEntry()
 800380c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8003810:	4604      	mov	r4, r0
                    stream.doInvalidateOnNextTick = true;
 8003812:	2601      	movs	r6, #1
                    stream.hasMoreFrames = decoder->decodeNextFrame((uint8_t*)decodeBuffers[i], width, height, stride);
 8003814:	f44f 6716 	mov.w	r7, #2400	@ 0x960
            SEM_WAIT(semDecode);
 8003818:	f04f 31ff 	mov.w	r1, #4294967295
 800381c:	6c20      	ldr	r0, [r4, #64]	@ 0x40
 800381e:	f009 f901 	bl	800ca24 <osSemaphoreAcquire>
            MUTEX_LOCK(mutexBuffers);
 8003822:	f04f 31ff 	mov.w	r1, #4294967295
 8003826:	6c60      	ldr	r0, [r4, #68]	@ 0x44
 8003828:	f009 f870 	bl	800c90c <osMutexAcquire>
                if (stream.doDecode)
 800382c:	f894 302e 	ldrb.w	r3, [r4, #46]	@ 0x2e
 8003830:	b343      	cbz	r3, 8003884 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE16decoderTaskEntryEv+0x78>
                    MJPEGDecoder* const decoder = mjpegDecoders[i];
 8003832:	6865      	ldr	r5, [r4, #4]
                    if (stream.seek_to_frame > 0)
 8003834:	f8d4 8020 	ldr.w	r8, [r4, #32]
                        decoder->gotoFrame(stream.seek_to_frame);
 8003838:	682b      	ldr	r3, [r5, #0]
                    stream.doInvalidateOnNextTick = true;
 800383a:	f884 602b 	strb.w	r6, [r4, #43]	@ 0x2b
                    if (stream.seek_to_frame > 0)
 800383e:	f1b8 0f00 	cmp.w	r8, #0
 8003842:	d023      	beq.n	800388c <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE16decoderTaskEntryEv+0x80>
                        decoder->gotoFrame(stream.seek_to_frame);
 8003844:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003846:	4641      	mov	r1, r8
 8003848:	4628      	mov	r0, r5
 800384a:	4798      	blx	r3
                        stream.seek_to_frame = 0;
 800384c:	2300      	movs	r3, #0
 800384e:	6223      	str	r3, [r4, #32]
                    stream.hasMoreFrames = decoder->decodeNextFrame((uint8_t*)decodeBuffers[i], width, height, stride);
 8003850:	682b      	ldr	r3, [r5, #0]
 8003852:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8003856:	9700      	str	r7, [sp, #0]
 8003858:	4628      	mov	r0, r5
 800385a:	f8d3 8014 	ldr.w	r8, [r3, #20]
 800385e:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 8003862:	68a1      	ldr	r1, [r4, #8]
 8003864:	47c0      	blx	r8
                    stream.frameCount++;
 8003866:	6923      	ldr	r3, [r4, #16]
                    stream.hasMoreFrames = decoder->decodeNextFrame((uint8_t*)decodeBuffers[i], width, height, stride);
 8003868:	f884 002c 	strb.w	r0, [r4, #44]	@ 0x2c
                    stream.frameCount++;
 800386c:	3301      	adds	r3, #1
 800386e:	6123      	str	r3, [r4, #16]
                    if (stream.hasMoreFrames)
 8003870:	b1f0      	cbz	r0, 80038b0 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE16decoderTaskEntryEv+0xa4>
                        stream.frameNumber = decoder->getCurrentFrameNumber() - 1; // Points to frame after this
 8003872:	682b      	ldr	r3, [r5, #0]
 8003874:	4628      	mov	r0, r5
 8003876:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003878:	4798      	blx	r3
 800387a:	3801      	subs	r0, #1
                    stream.doDecode = false;
 800387c:	2300      	movs	r3, #0
                        stream.frameNumber = decoder->getCurrentFrameNumber() - 1; // Points to frame after this
 800387e:	60e0      	str	r0, [r4, #12]
                    stream.doDecode = false;
 8003880:	f884 302e 	strb.w	r3, [r4, #46]	@ 0x2e
            MUTEX_UNLOCK(mutexBuffers);
 8003884:	6c60      	ldr	r0, [r4, #68]	@ 0x44
 8003886:	f009 f864 	bl	800c952 <osMutexRelease>
        while (1)
 800388a:	e7c5      	b.n	8003818 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE16decoderTaskEntryEv+0xc>
                        if (stream.skip_frames > 0)
 800388c:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800388e:	2a00      	cmp	r2, #0
 8003890:	d0de      	beq.n	8003850 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE16decoderTaskEntryEv+0x44>
                            decoder->gotoFrame(decoder->getCurrentFrameNumber() + stream.skip_frames);
 8003892:	4628      	mov	r0, r5
 8003894:	e9d3 9309 	ldrd	r9, r3, [r3, #36]	@ 0x24
 8003898:	4798      	blx	r3
 800389a:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 800389c:	4401      	add	r1, r0
 800389e:	4628      	mov	r0, r5
 80038a0:	47c8      	blx	r9
                            stream.frameCount += stream.skip_frames;
 80038a2:	6923      	ldr	r3, [r4, #16]
 80038a4:	6a62      	ldr	r2, [r4, #36]	@ 0x24
                            stream.skip_frames = 0;
 80038a6:	f8c4 8024 	str.w	r8, [r4, #36]	@ 0x24
                            stream.frameCount += stream.skip_frames;
 80038aa:	4413      	add	r3, r2
 80038ac:	6123      	str	r3, [r4, #16]
 80038ae:	e7cf      	b.n	8003850 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE16decoderTaskEntryEv+0x44>
 80038b0:	2001      	movs	r0, #1
 80038b2:	e7e3      	b.n	800387c <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE16decoderTaskEntryEv+0x70>

080038b4 <videoTaskFunc>:
    }
}

extern "C" void videoTaskFunc(void* argument)
{
    videoController.decoderTaskEntry();
 80038b4:	4801      	ldr	r0, [pc, #4]	@ (80038bc <videoTaskFunc+0x8>)
{
 80038b6:	b508      	push	{r3, lr}
    videoController.decoderTaskEntry();
 80038b8:	f7ff ffa8 	bl	800380c <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE16decoderTaskEntryEv>
 80038bc:	2400eca0 	.word	0x2400eca0

080038c0 <_GLOBAL__sub_I_mjpegdecoder1>:
}
 80038c0:	b538      	push	{r3, r4, r5, lr}
HardwareMJPEGDecoder mjpegdecoder1;
 80038c2:	4814      	ldr	r0, [pc, #80]	@ (8003914 <_GLOBAL__sub_I_mjpegdecoder1+0x54>)
        : VideoController(), bufferRGB(0), sizeBufferRGB(0), topBufferRGB(0),
 80038c4:	2500      	movs	r5, #0
 80038c6:	f7fe fbeb 	bl	80020a0 <_ZN20HardwareMJPEGDecoderC1Ev>
          allowSkipFrames(false), firstDrawThisFrame(true), uiHasMutex(false), semDecode(0), mutexBuffers(0)
 80038ca:	4c13      	ldr	r4, [pc, #76]	@ (8003918 <_GLOBAL__sub_I_mjpegdecoder1+0x58>)
 80038cc:	4b13      	ldr	r3, [pc, #76]	@ (800391c <_GLOBAL__sub_I_mjpegdecoder1+0x5c>)
        semDecode = SEM_CREATE(); // Binary semaphore
 80038ce:	462a      	mov	r2, r5
 80038d0:	4629      	mov	r1, r5
 80038d2:	2001      	movs	r0, #1
          allowSkipFrames(false), firstDrawThisFrame(true), uiHasMutex(false), semDecode(0), mutexBuffers(0)
 80038d4:	6023      	str	r3, [r4, #0]
 80038d6:	f44f 7380 	mov.w	r3, #256	@ 0x100
        : VideoController(), bufferRGB(0), sizeBufferRGB(0), topBufferRGB(0),
 80038da:	63a5      	str	r5, [r4, #56]	@ 0x38
          allowSkipFrames(false), firstDrawThisFrame(true), uiHasMutex(false), semDecode(0), mutexBuffers(0)
 80038dc:	87a3      	strh	r3, [r4, #60]	@ 0x3c
        Stream() : frameNumber(0), frameCount(0), tickCount(0), frame_rate_video(0), frame_rate_ticks(0),
 80038de:	85a3      	strh	r3, [r4, #44]	@ 0x2c
          allowSkipFrames(false), firstDrawThisFrame(true), uiHasMutex(false), semDecode(0), mutexBuffers(0)
 80038e0:	f884 503e 	strb.w	r5, [r4, #62]	@ 0x3e
            doInvalidateOnNextTick(false), hasMoreFrames(false), repeat(true), doDecode(false) {}
 80038e4:	f884 502e 	strb.w	r5, [r4, #46]	@ 0x2e
        : VideoController(), bufferRGB(0), sizeBufferRGB(0), topBufferRGB(0),
 80038e8:	e9c4 550c 	strd	r5, r5, [r4, #48]	@ 0x30
          allowSkipFrames(false), firstDrawThisFrame(true), uiHasMutex(false), semDecode(0), mutexBuffers(0)
 80038ec:	e9c4 5510 	strd	r5, r5, [r4, #64]	@ 0x40
        memset(decodeBuffers, 0, sizeof(decodeBuffers));
 80038f0:	e9c4 5501 	strd	r5, r5, [r4, #4]
        Stream() : frameNumber(0), frameCount(0), tickCount(0), frame_rate_video(0), frame_rate_ticks(0),
 80038f4:	e9c4 5503 	strd	r5, r5, [r4, #12]
 80038f8:	e9c4 5505 	strd	r5, r5, [r4, #20]
            seek_to_frame(0), skip_frames(0),
 80038fc:	e9c4 5507 	strd	r5, r5, [r4, #28]
        Stream() : frameNumber(0), frameCount(0), tickCount(0), frame_rate_video(0), frame_rate_ticks(0),
 8003900:	e9c4 5509 	strd	r5, r5, [r4, #36]	@ 0x24
        semDecode = SEM_CREATE(); // Binary semaphore
 8003904:	f009 f844 	bl	800c990 <osSemaphoreNew>
 8003908:	6420      	str	r0, [r4, #64]	@ 0x40
        mutexBuffers = MUTEX_CREATE();
 800390a:	4628      	mov	r0, r5
 800390c:	f008 ffc9 	bl	800c8a2 <osMutexNew>
 8003910:	6460      	str	r0, [r4, #68]	@ 0x44
}
 8003912:	bd38      	pop	{r3, r4, r5, pc}
 8003914:	2400ece8 	.word	0x2400ece8
 8003918:	2400eca0 	.word	0x2400eca0
 800391c:	08029ec8 	.word	0x08029ec8

08003920 <_ZN23ApplicationFontProviderD1Ev>:
    static const touchgfx::FontId SMALL = 2;   // verdana_10_4bpp
    static const touchgfx::FontId MPH = 3;     // verdana_85_4bpp
    static const uint16_t NUMBER_OF_FONTS = 4;
};

class ApplicationFontProvider : public touchgfx::FontProvider
 8003920:	4770      	bx	lr

08003922 <_ZN23ApplicationFontProviderD0Ev>:
 8003922:	b510      	push	{r4, lr}
 8003924:	4604      	mov	r4, r0
 8003926:	2104      	movs	r1, #4
 8003928:	f023 f931 	bl	8026b8e <_ZdlPvj>
 800392c:	4620      	mov	r0, r4
 800392e:	bd10      	pop	{r4, pc}

08003930 <_ZN23ApplicationFontProvider7getFontEt>:
#include <fonts/ApplicationFontProvider.hpp>
#include <fonts/GeneratedFont.hpp>
#include <texts/TypedTextDatabase.hpp>

touchgfx::Font* ApplicationFontProvider::getFont(touchgfx::FontId typography)
{
 8003930:	b508      	push	{r3, lr}
    switch (typography)
 8003932:	2903      	cmp	r1, #3
 8003934:	d813      	bhi.n	800395e <_ZN23ApplicationFontProvider7getFontEt+0x2e>
 8003936:	e8df f001 	tbb	[pc, r1]
 800393a:	0602      	.short	0x0602
 800393c:	0e0a      	.short	0x0e0a
    {
    case Typography::DEFAULT:
        // verdana_20_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[0]);
 800393e:	f000 fbff 	bl	8004140 <_ZN17TypedTextDatabase8getFontsEv>
 8003942:	6800      	ldr	r0, [r0, #0]
        // verdana_85_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[3]);
    default:
        return 0;
    }
}
 8003944:	bd08      	pop	{r3, pc}
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[1]);
 8003946:	f000 fbfb 	bl	8004140 <_ZN17TypedTextDatabase8getFontsEv>
 800394a:	6840      	ldr	r0, [r0, #4]
 800394c:	e7fa      	b.n	8003944 <_ZN23ApplicationFontProvider7getFontEt+0x14>
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[2]);
 800394e:	f000 fbf7 	bl	8004140 <_ZN17TypedTextDatabase8getFontsEv>
 8003952:	6880      	ldr	r0, [r0, #8]
 8003954:	e7f6      	b.n	8003944 <_ZN23ApplicationFontProvider7getFontEt+0x14>
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[3]);
 8003956:	f000 fbf3 	bl	8004140 <_ZN17TypedTextDatabase8getFontsEv>
 800395a:	68c0      	ldr	r0, [r0, #12]
 800395c:	e7f2      	b.n	8003944 <_ZN23ApplicationFontProvider7getFontEt+0x14>
    switch (typography)
 800395e:	2000      	movs	r0, #0
 8003960:	e7f0      	b.n	8003944 <_ZN23ApplicationFontProvider7getFontEt+0x14>
	...

08003964 <_ZN14BitmapDatabase11getInstanceEv>:
namespace BitmapDatabase
{
const touchgfx::Bitmap::BitmapData* getInstance()
{
    return bitmap_database;
}
 8003964:	4800      	ldr	r0, [pc, #0]	@ (8003968 <_ZN14BitmapDatabase11getInstanceEv+0x4>)
 8003966:	4770      	bx	lr
 8003968:	08029f18 	.word	0x08029f18

0800396c <_ZN14BitmapDatabase15getInstanceSizeEv>:

uint16_t getInstanceSize()
{
    return (uint16_t)(sizeof(bitmap_database) / sizeof(touchgfx::Bitmap::BitmapData));
}
 800396c:	2055      	movs	r0, #85	@ 0x55
 800396e:	4770      	bx	lr

08003970 <_ZNK8touchgfx4Font8getGlyphEt>:
     *
     * @return A pointer to the glyph node or null if the glyph was not found.
     *
     * @see TextProvider::getNextLigature
     */
    virtual const GlyphNode* getGlyph(Unicode::UnicodeChar unicode) const
 8003970:	b513      	push	{r0, r1, r4, lr}
 8003972:	2400      	movs	r4, #0
    {
        if (unicode == 0)
 8003974:	b151      	cbz	r1, 800398c <_ZNK8touchgfx4Font8getGlyphEt+0x1c>
        {
            return 0;
        }
        const uint8_t* dummyPixelDataPointer = 0;
        uint8_t bitsPerPixelDummy = 0;
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
 8003976:	6803      	ldr	r3, [r0, #0]
 8003978:	aa01      	add	r2, sp, #4
        const uint8_t* dummyPixelDataPointer = 0;
 800397a:	9401      	str	r4, [sp, #4]
        uint8_t bitsPerPixelDummy = 0;
 800397c:	f88d 4003 	strb.w	r4, [sp, #3]
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
 8003980:	689c      	ldr	r4, [r3, #8]
 8003982:	f10d 0303 	add.w	r3, sp, #3
 8003986:	47a0      	blx	r4
        return glyph;
    }
 8003988:	b002      	add	sp, #8
 800398a:	bd10      	pop	{r4, pc}
            return 0;
 800398c:	4608      	mov	r0, r1
 800398e:	e7fb      	b.n	8003988 <_ZNK8touchgfx4Font8getGlyphEt+0x18>

08003990 <_ZNK8touchgfx4Font15getFallbackCharEv>:
     * @return The default character for the typography in case no glyph is available.
     */
    virtual Unicode::UnicodeChar getFallbackChar() const
    {
        return fallbackCharacter;
    }
 8003990:	89c0      	ldrh	r0, [r0, #14]
 8003992:	4770      	bx	lr

08003994 <_ZNK8touchgfx4Font15getEllipsisCharEv>:
     * @see TextArea::setWideTextAction
     */
    virtual Unicode::UnicodeChar getEllipsisChar() const
    {
        return ellipsisCharacter;
    }
 8003994:	8a00      	ldrh	r0, [r0, #16]
 8003996:	4770      	bx	lr

08003998 <_ZNK8touchgfx4Font11getBaselineEv>:
     *       getHeight for this.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getBaseline() const
    {
        return baselineHeight;
    }
 8003998:	88c0      	ldrh	r0, [r0, #6]
 800399a:	4770      	bx	lr

0800399c <_ZNK8touchgfx4Font9getHeightEv>:
     * @return The font height.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getHeight() const
    {
        return fontHeight;
    }
 800399c:	8880      	ldrh	r0, [r0, #4]
 800399e:	4770      	bx	lr

080039a0 <_ZNK8touchgfx4Font15getBitsPerPixelEv>:
     *
     * @return The number of bits used per pixel in this font.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getBitsPerPixel() const
    {
        return bPerPixel;
 80039a0:	7a80      	ldrb	r0, [r0, #10]
    }
 80039a2:	f000 007f 	and.w	r0, r0, #127	@ 0x7f
 80039a6:	4770      	bx	lr

080039a8 <_ZNK8touchgfx4Font15getByteAlignRowEv>:
     *
     * @return True if each glyph row is stored byte aligned, false otherwise.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getByteAlignRow() const
    {
        return bAlignRow;
 80039a8:	7a80      	ldrb	r0, [r0, #10]
    }
 80039aa:	09c0      	lsrs	r0, r0, #7
 80039ac:	4770      	bx	lr

080039ae <_ZNK8touchgfx4Font17isVectorBasedFontEv>:
     * @return True if this Font is vector based.
     */
    virtual bool isVectorBasedFont() const
    {
        return false;
    }
 80039ae:	2000      	movs	r0, #0
 80039b0:	4770      	bx	lr
	...

080039b4 <_ZNK8touchgfx4Font14getScaleFactorEv>:
     * @return The scale factor
     */
    virtual float getScaleFactor() const
    {
        return 0;
    }
 80039b4:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 80039bc <_ZNK8touchgfx4Font14getScaleFactorEv+0x8>
 80039b8:	4770      	bx	lr
 80039ba:	bf00      	nop
 80039bc:	00000000 	.word	0x00000000

080039c0 <_ZN8touchgfx9TypedTextD1Ev>:
    }
 80039c0:	4770      	bx	lr

080039c2 <_ZN8touchgfx9TypedTextD0Ev>:
    virtual ~TypedText()
 80039c2:	b510      	push	{r4, lr}
 80039c4:	4604      	mov	r4, r0
    }
 80039c6:	2108      	movs	r1, #8
 80039c8:	f023 f8e1 	bl	8026b8e <_ZdlPvj>
 80039cc:	4620      	mov	r0, r4
 80039ce:	bd10      	pop	{r4, pc}

080039d0 <_ZN8touchgfx11Application19changeToStartScreenEv>:
     *       this is explicitly done in your
     *       FrontendApplication::changeToStartScreen().
     */
    virtual void changeToStartScreen()
    {
    }
 80039d0:	4770      	bx	lr

080039d2 <_ZN8touchgfx11Application15appSwitchScreenEh>:
     * @param screenId An id that maps to the desired screen.
     */
    virtual void appSwitchScreen(uint8_t screenId)
    {
        (void)screenId; // Unused variable
    }
 80039d2:	4770      	bx	lr

080039d4 <_ZN8touchgfx11Application13requestRedrawERNS_4RectE>:
     *
     * @param [in,out] rect The Rect that must be redrawn.
     */
    virtual void requestRedraw(Rect& rect)
    {
        redraw = rect;
 80039d4:	f500 7398 	add.w	r3, r0, #304	@ 0x130
 80039d8:	6808      	ldr	r0, [r1, #0]
 80039da:	6849      	ldr	r1, [r1, #4]
 80039dc:	c303      	stmia	r3!, {r0, r1}
    }
 80039de:	4770      	bx	lr

080039e0 <_ZN8touchgfx10Transition8tearDownEv>:
     * Tears down the Animation. Called before the destructor is called, when the
     * application changes the transition.
     */
    virtual void tearDown()
    {
    }
 80039e0:	4770      	bx	lr

080039e2 <_ZN8touchgfx10Transition4initEv>:
     * Initializes the transition. Called after the constructor is called, when the
     * application changes the transition.
     */
    virtual void init()
    {
    }
 80039e2:	4770      	bx	lr

080039e4 <_ZN8touchgfx10Transition18setScreenContainerERNS_9ContainerE>:
     *
     * @param [in] cont The Container the transition should have access to.
     */
    virtual void setScreenContainer(Container& cont)
    {
        screenContainer = &cont;
 80039e4:	6041      	str	r1, [r0, #4]
    }
 80039e6:	4770      	bx	lr

080039e8 <_ZN23FrontendApplicationBaseD1Ev>:

class FrontendApplicationBase : public touchgfx::MVPApplication
{
public:
    FrontendApplicationBase(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplicationBase() { }
 80039e8:	4770      	bx	lr
	...

080039ec <_ZN23FrontendApplicationBase19changeToStartScreenEv>:
 *
 * @note The member function to call must return void. The function can have zero, one, two or
 *       three arguments of any type.
 */
template <class dest_type>
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 80039ec:	4b06      	ldr	r3, [pc, #24]	@ (8003a08 <_ZN23FrontendApplicationBase19changeToStartScreenEv+0x1c>)
 80039ee:	f8c0 0148 	str.w	r0, [r0, #328]	@ 0x148
 80039f2:	f8c0 314c 	str.w	r3, [r0, #332]	@ 0x14c
 80039f6:	2300      	movs	r3, #0
 80039f8:	f8c0 3150 	str.w	r3, [r0, #336]	@ 0x150
// graphing_Screen

void FrontendApplicationBase::gotographing_ScreenScreenNoTransition()
{
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplicationBase::gotographing_ScreenScreenNoTransitionImpl);
    pendingScreenTransitionCallback = &transitionCallback;
 80039fc:	f500 73a2 	add.w	r3, r0, #324	@ 0x144
 8003a00:	f8c0 3140 	str.w	r3, [r0, #320]	@ 0x140

    virtual void changeToStartScreen()
    {
        gotographing_ScreenScreenNoTransition();
    }
 8003a04:	4770      	bx	lr
 8003a06:	bf00      	nop
 8003a08:	08003aad 	.word	0x08003aad

08003a0c <_ZN8touchgfx12NoTransition15handleTickEventEv>:
{
public:
    /** Indicates that the transition is done after the first tick. */
    virtual void handleTickEvent()
    {
        done = true;
 8003a0c:	2301      	movs	r3, #1
 8003a0e:	7203      	strb	r3, [r0, #8]
    }
 8003a10:	4770      	bx	lr

08003a12 <_ZN8touchgfx12NoTransitionD1Ev>:
class NoTransition : public Transition
 8003a12:	4770      	bx	lr

08003a14 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>:
 8003a14:	4770      	bx	lr

08003a16 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv>:

    /**
     * Calls the member function. Do not call execute unless isValid() returns true (ie. a
     * pointer to the object and the function has been set).
     */
    virtual void execute()
 8003a16:	b410      	push	{r4}
    {
        (pobject->*pmemfun)();
 8003a18:	6841      	ldr	r1, [r0, #4]
    virtual void execute()
 8003a1a:	4603      	mov	r3, r0
        (pobject->*pmemfun)();
 8003a1c:	68c2      	ldr	r2, [r0, #12]
 8003a1e:	689b      	ldr	r3, [r3, #8]
 8003a20:	1054      	asrs	r4, r2, #1
 8003a22:	eb01 0062 	add.w	r0, r1, r2, asr #1
 8003a26:	07d2      	lsls	r2, r2, #31
 8003a28:	bf48      	it	mi
 8003a2a:	590a      	ldrmi	r2, [r1, r4]
    }
 8003a2c:	f85d 4b04 	ldr.w	r4, [sp], #4
        (pobject->*pmemfun)();
 8003a30:	bf48      	it	mi
 8003a32:	58d3      	ldrmi	r3, [r2, r3]
 8003a34:	4718      	bx	r3

08003a36 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv>:
    /**
     * Function to check whether the Callback has been initialized with values.
     *
     * @return true If the callback is valid (i.e. safe to call execute).
     */
    virtual bool isValid() const
 8003a36:	4603      	mov	r3, r0
    {
        return (pobject != 0) && (pmemfun != 0);
 8003a38:	6840      	ldr	r0, [r0, #4]
 8003a3a:	b130      	cbz	r0, 8003a4a <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x14>
 8003a3c:	689a      	ldr	r2, [r3, #8]
 8003a3e:	b91a      	cbnz	r2, 8003a48 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x12>
 8003a40:	68d8      	ldr	r0, [r3, #12]
 8003a42:	f000 0001 	and.w	r0, r0, #1
 8003a46:	4770      	bx	lr
 8003a48:	2001      	movs	r0, #1
    }
 8003a4a:	4770      	bx	lr

08003a4c <_ZN8touchgfx12NoTransitionD0Ev>:
 8003a4c:	b510      	push	{r4, lr}
 8003a4e:	4604      	mov	r4, r0
 8003a50:	210c      	movs	r1, #12
 8003a52:	f023 f89c 	bl	8026b8e <_ZdlPvj>
 8003a56:	4620      	mov	r0, r4
 8003a58:	bd10      	pop	{r4, pc}

08003a5a <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED0Ev>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8003a5a:	b510      	push	{r4, lr}
 8003a5c:	4604      	mov	r4, r0
 8003a5e:	2110      	movs	r1, #16
 8003a60:	f023 f895 	bl	8026b8e <_ZdlPvj>
 8003a64:	4620      	mov	r0, r4
 8003a66:	bd10      	pop	{r4, pc}

08003a68 <_ZN23FrontendApplicationBaseD0Ev>:
    virtual ~FrontendApplicationBase() { }
 8003a68:	b510      	push	{r4, lr}
 8003a6a:	4604      	mov	r4, r0
 8003a6c:	f44f 71ae 	mov.w	r1, #348	@ 0x15c
 8003a70:	f023 f88d 	bl	8026b8e <_ZdlPvj>
 8003a74:	4620      	mov	r0, r4
 8003a76:	bd10      	pop	{r4, pc}

08003a78 <_ZN8touchgfx10Transition10invalidateEv>:
    virtual void invalidate()
 8003a78:	b510      	push	{r4, lr}
        Application::getInstance()->invalidate();
 8003a7a:	f013 fda9 	bl	80175d0 <_ZN8touchgfx11Application11getInstanceEv>
 8003a7e:	6803      	ldr	r3, [r0, #0]
    }
 8003a80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        Application::getInstance()->invalidate();
 8003a84:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a86:	4718      	bx	r3

08003a88 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv>:
    /**
     * Handles the pending screen transition.
     *
     * Delegates the work to evaluatePendingScreenTransition()
     */
    virtual void handlePendingScreenTransition()
 8003a88:	b510      	push	{r4, lr}
 8003a8a:	4604      	mov	r4, r0
     * Evaluates the pending Callback instances. If a callback is valid, it is executed and
     * a Screen transition is executed.
     */
    void evaluatePendingScreenTransition()
    {
        if (pendingScreenTransitionCallback && pendingScreenTransitionCallback->isValid())
 8003a8c:	f8d0 0140 	ldr.w	r0, [r0, #320]	@ 0x140
 8003a90:	b158      	cbz	r0, 8003aaa <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x22>
 8003a92:	6803      	ldr	r3, [r0, #0]
 8003a94:	68db      	ldr	r3, [r3, #12]
 8003a96:	4798      	blx	r3
 8003a98:	b138      	cbz	r0, 8003aaa <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x22>
        {
            pendingScreenTransitionCallback->execute();
 8003a9a:	f8d4 0140 	ldr.w	r0, [r4, #320]	@ 0x140
 8003a9e:	6803      	ldr	r3, [r0, #0]
 8003aa0:	689b      	ldr	r3, [r3, #8]
 8003aa2:	4798      	blx	r3
            pendingScreenTransitionCallback = 0;
 8003aa4:	2300      	movs	r3, #0
 8003aa6:	f8c4 3140 	str.w	r3, [r4, #320]	@ 0x140
    }
 8003aaa:	bd10      	pop	{r4, pc}

08003aac <_ZN23FrontendApplicationBase41gotographing_ScreenScreenNoTransitionImplEv>:
}

void FrontendApplicationBase::gotographing_ScreenScreenNoTransitionImpl()
{
 8003aac:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    touchgfx::makeTransition<graphing_ScreenView, graphing_ScreenPresenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 8003ab0:	e9d0 6a55 	ldrd	r6, sl, [r0, #340]	@ 0x154
{
 8003ab4:	4607      	mov	r7, r0
 *         value as the old presenter due to memory reuse.
 */
template <class ScreenType, class PresenterType, class TransType, class ModelType>
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
{
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 8003ab6:	68b0      	ldr	r0, [r6, #8]
 8003ab8:	6803      	ldr	r3, [r0, #0]
 8003aba:	6a1b      	ldr	r3, [r3, #32]
 8003abc:	4798      	blx	r3
 8003abe:	f643 5383 	movw	r3, #15747	@ 0x3d83
 8003ac2:	4298      	cmp	r0, r3
 8003ac4:	d805      	bhi.n	8003ad2 <_ZN23FrontendApplicationBase41gotographing_ScreenScreenNoTransitionImplEv+0x26>
 8003ac6:	4b44      	ldr	r3, [pc, #272]	@ (8003bd8 <_ZN23FrontendApplicationBase41gotographing_ScreenScreenNoTransitionImplEv+0x12c>)
 8003ac8:	21a3      	movs	r1, #163	@ 0xa3
 8003aca:	4a44      	ldr	r2, [pc, #272]	@ (8003bdc <_ZN23FrontendApplicationBase41gotographing_ScreenScreenNoTransitionImplEv+0x130>)
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 8003acc:	4844      	ldr	r0, [pc, #272]	@ (8003be0 <_ZN23FrontendApplicationBase41gotographing_ScreenScreenNoTransitionImplEv+0x134>)
 8003ace:	f023 fbd7 	bl	8027280 <__assert_func>
 8003ad2:	6870      	ldr	r0, [r6, #4]
 8003ad4:	6803      	ldr	r3, [r0, #0]
 8003ad6:	6a1b      	ldr	r3, [r3, #32]
 8003ad8:	4798      	blx	r3
 8003ada:	280f      	cmp	r0, #15
 8003adc:	d803      	bhi.n	8003ae6 <_ZN23FrontendApplicationBase41gotographing_ScreenScreenNoTransitionImplEv+0x3a>
 8003ade:	4b41      	ldr	r3, [pc, #260]	@ (8003be4 <_ZN23FrontendApplicationBase41gotographing_ScreenScreenNoTransitionImplEv+0x138>)
 8003ae0:	21a4      	movs	r1, #164	@ 0xa4
 8003ae2:	4a3e      	ldr	r2, [pc, #248]	@ (8003bdc <_ZN23FrontendApplicationBase41gotographing_ScreenScreenNoTransitionImplEv+0x130>)
 8003ae4:	e7f2      	b.n	8003acc <_ZN23FrontendApplicationBase41gotographing_ScreenScreenNoTransitionImplEv+0x20>
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 8003ae6:	68f0      	ldr	r0, [r6, #12]
 8003ae8:	6803      	ldr	r3, [r0, #0]
 8003aea:	6a1b      	ldr	r3, [r3, #32]
 8003aec:	4798      	blx	r3
 8003aee:	280b      	cmp	r0, #11
 8003af0:	d803      	bhi.n	8003afa <_ZN23FrontendApplicationBase41gotographing_ScreenScreenNoTransitionImplEv+0x4e>
 8003af2:	4b3d      	ldr	r3, [pc, #244]	@ (8003be8 <_ZN23FrontendApplicationBase41gotographing_ScreenScreenNoTransitionImplEv+0x13c>)
 8003af4:	21a5      	movs	r1, #165	@ 0xa5
 8003af6:	4a39      	ldr	r2, [pc, #228]	@ (8003bdc <_ZN23FrontendApplicationBase41gotographing_ScreenScreenNoTransitionImplEv+0x130>)
 8003af8:	e7e8      	b.n	8003acc <_ZN23FrontendApplicationBase41gotographing_ScreenScreenNoTransitionImplEv+0x20>
    if (*currentTrans)
 8003afa:	f8df 90f4 	ldr.w	r9, [pc, #244]	@ 8003bf0 <_ZN23FrontendApplicationBase41gotographing_ScreenScreenNoTransitionImplEv+0x144>
    Application::getInstance()->clearAllTimerWidgets();
 8003afe:	f013 fd67 	bl	80175d0 <_ZN8touchgfx11Application11getInstanceEv>

    /** Clears all currently registered timer widgets. */

    void clearAllTimerWidgets()
    {
        timerWidgets.clear();
 8003b02:	3004      	adds	r0, #4
 8003b04:	f013 fda2 	bl	801764c <_ZN8touchgfx11Application12TimerWidgets5clearEv>
    if (*currentTrans)
 8003b08:	f8d9 0000 	ldr.w	r0, [r9]
 8003b0c:	b110      	cbz	r0, 8003b14 <_ZN23FrontendApplicationBase41gotographing_ScreenScreenNoTransitionImplEv+0x68>
        (*currentTrans)->tearDown();
 8003b0e:	6803      	ldr	r3, [r0, #0]
 8003b10:	68db      	ldr	r3, [r3, #12]
 8003b12:	4798      	blx	r3
    if (*currentTrans)
 8003b14:	f8d9 0000 	ldr.w	r0, [r9]
 8003b18:	b110      	cbz	r0, 8003b20 <_ZN23FrontendApplicationBase41gotographing_ScreenScreenNoTransitionImplEv+0x74>
        (*currentTrans)->~Transition();
 8003b1a:	6803      	ldr	r3, [r0, #0]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	4798      	blx	r3
    if (*currentScreen)
 8003b20:	f8df 80d0 	ldr.w	r8, [pc, #208]	@ 8003bf4 <_ZN23FrontendApplicationBase41gotographing_ScreenScreenNoTransitionImplEv+0x148>
 8003b24:	f8d8 0000 	ldr.w	r0, [r8]
 8003b28:	b110      	cbz	r0, 8003b30 <_ZN23FrontendApplicationBase41gotographing_ScreenScreenNoTransitionImplEv+0x84>
        (*currentScreen)->tearDownScreen();
 8003b2a:	6803      	ldr	r3, [r0, #0]
 8003b2c:	695b      	ldr	r3, [r3, #20]
 8003b2e:	4798      	blx	r3
    if (*currentPresenter)
 8003b30:	f8d7 013c 	ldr.w	r0, [r7, #316]	@ 0x13c
 8003b34:	b110      	cbz	r0, 8003b3c <_ZN23FrontendApplicationBase41gotographing_ScreenScreenNoTransitionImplEv+0x90>
        (*currentPresenter)->deactivate();
 8003b36:	6803      	ldr	r3, [r0, #0]
 8003b38:	685b      	ldr	r3, [r3, #4]
 8003b3a:	4798      	blx	r3
    if (*currentScreen)
 8003b3c:	f8d8 0000 	ldr.w	r0, [r8]
 8003b40:	b110      	cbz	r0, 8003b48 <_ZN23FrontendApplicationBase41gotographing_ScreenScreenNoTransitionImplEv+0x9c>
        (*currentScreen)->~Screen();
 8003b42:	6803      	ldr	r3, [r0, #0]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	4798      	blx	r3
    if (*currentPresenter)
 8003b48:	f8d7 013c 	ldr.w	r0, [r7, #316]	@ 0x13c
 8003b4c:	b110      	cbz	r0, 8003b54 <_ZN23FrontendApplicationBase41gotographing_ScreenScreenNoTransitionImplEv+0xa8>
        (*currentPresenter)->~Presenter();
 8003b4e:	6803      	ldr	r3, [r0, #0]
 8003b50:	689b      	ldr	r3, [r3, #8]
 8003b52:	4798      	blx	r3

    prepareTransition(currentScreen, currentPresenter, currentTrans);

    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 8003b54:	68f0      	ldr	r0, [r6, #12]
     * @return A typed reference to the object at the specified index.
     */
    template <typename T>
    T& at(const uint16_t index)
    {
        return *static_cast<T*>(element(index));
 8003b56:	2100      	movs	r1, #0
        : screenContainer(0), done(false)
 8003b58:	f04f 0b00 	mov.w	fp, #0
 8003b5c:	6803      	ldr	r3, [r0, #0]
 8003b5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b60:	4798      	blx	r3
 8003b62:	4b22      	ldr	r3, [pc, #136]	@ (8003bec <_ZN23FrontendApplicationBase41gotographing_ScreenScreenNoTransitionImplEv+0x140>)
 8003b64:	4604      	mov	r4, r0
 8003b66:	f8c0 b004 	str.w	fp, [r0, #4]
 8003b6a:	f880 b008 	strb.w	fp, [r0, #8]
 8003b6e:	4659      	mov	r1, fp
 8003b70:	6003      	str	r3, [r0, #0]
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 8003b72:	68b0      	ldr	r0, [r6, #8]
 8003b74:	6803      	ldr	r3, [r0, #0]
 8003b76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b78:	4798      	blx	r3
 8003b7a:	4605      	mov	r5, r0
 8003b7c:	f001 fe1c 	bl	80057b8 <_ZN19graphing_ScreenViewC1Ev>
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 8003b80:	6870      	ldr	r0, [r6, #4]
 8003b82:	4659      	mov	r1, fp
 8003b84:	6803      	ldr	r3, [r0, #0]
 8003b86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b88:	4798      	blx	r3
 8003b8a:	4606      	mov	r6, r0
 8003b8c:	4629      	mov	r1, r5
 8003b8e:	f001 fdc9 	bl	8005724 <_ZN24graphing_ScreenPresenterC1ER19graphing_ScreenView>
    *currentTrans = newTransition;
    *currentPresenter = newPresenter;
    *currentScreen = newScreen;
    model->bind(newPresenter);
 8003b92:	1d33      	adds	r3, r6, #4
    *currentPresenter = newPresenter;
 8003b94:	f8c7 613c 	str.w	r6, [r7, #316]	@ 0x13c
    newScreen->setupScreen();
 8003b98:	4628      	mov	r0, r5
    *currentTrans = newTransition;
 8003b9a:	f8c9 4000 	str.w	r4, [r9]
    *currentScreen = newScreen;
 8003b9e:	f8c8 5000 	str.w	r5, [r8]
public:
    Model();

    void bind(ModelListener* listener)
    {
        modelListener = listener;
 8003ba2:	f8ca 3000 	str.w	r3, [sl]
    newScreen->setupScreen();
 8003ba6:	682b      	ldr	r3, [r5, #0]
    
    virtual ~ModelListener() {}

    void bind(Model* m)
    {
        model = m;
 8003ba8:	f8c6 a008 	str.w	sl, [r6, #8]
 8003bac:	68db      	ldr	r3, [r3, #12]
     *
     * @param [in] newPresenter The specific Presenter to be associated with the View.
     */
    void bind(T& newPresenter)
    {
        presenter = &newPresenter;
 8003bae:	63ee      	str	r6, [r5, #60]	@ 0x3c
 8003bb0:	4798      	blx	r3
    newPresenter->activate();
 8003bb2:	6833      	ldr	r3, [r6, #0]
 8003bb4:	4630      	mov	r0, r6
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 8003bba:	4621      	mov	r1, r4
 8003bbc:	4628      	mov	r0, r5
 8003bbe:	f015 fe31 	bl	8019824 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 8003bc2:	6823      	ldr	r3, [r4, #0]
 8003bc4:	4620      	mov	r0, r4
 8003bc6:	691b      	ldr	r3, [r3, #16]
 8003bc8:	4798      	blx	r3
    newTransition->invalidate();
 8003bca:	6823      	ldr	r3, [r4, #0]
 8003bcc:	4620      	mov	r0, r4
 8003bce:	695b      	ldr	r3, [r3, #20]
}
 8003bd0:	b001      	add	sp, #4
 8003bd2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003bd6:	4718      	bx	r3
 8003bd8:	0802a5cc 	.word	0x0802a5cc
 8003bdc:	0802a8e9 	.word	0x0802a8e9
 8003be0:	0802a74e 	.word	0x0802a74e
 8003be4:	0802a7a3 	.word	0x0802a7a3
 8003be8:	0802a846 	.word	0x0802a846
 8003bec:	0802aa40 	.word	0x0802aa40
 8003bf0:	24028e68 	.word	0x24028e68
 8003bf4:	24028e64 	.word	0x24028e64

08003bf8 <_ZN8touchgfx3HAL3lcdEv>:
        if (instance->useAuxiliaryLCD && instance->auxiliaryLCD)
 8003bf8:	4b04      	ldr	r3, [pc, #16]	@ (8003c0c <_ZN8touchgfx3HAL3lcdEv+0x14>)
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 8003c00:	b10a      	cbz	r2, 8003c06 <_ZN8touchgfx3HAL3lcdEv+0xe>
 8003c02:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8003c04:	b900      	cbnz	r0, 8003c08 <_ZN8touchgfx3HAL3lcdEv+0x10>
        return instance->lcdRef;
 8003c06:	6898      	ldr	r0, [r3, #8]
    }
 8003c08:	4770      	bx	lr
 8003c0a:	bf00      	nop
 8003c0c:	24028e20 	.word	0x24028e20

08003c10 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>:
FrontendApplicationBase::FrontendApplicationBase(Model& m, FrontendHeap& heap)
 8003c10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c12:	4617      	mov	r7, r2
 8003c14:	4604      	mov	r4, r0
 8003c16:	460e      	mov	r6, r1
          pendingScreenTransitionCallback(0)
 8003c18:	f013 fdea 	bl	80177f0 <_ZN8touchgfx11ApplicationC1Ev>
        instance = this;
 8003c1c:	4b12      	ldr	r3, [pc, #72]	@ (8003c68 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x58>)
        : currentPresenter(0),
 8003c1e:	2500      	movs	r5, #0
        instance = this;
 8003c20:	601c      	str	r4, [r3, #0]
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_LANDSCAPE);
 8003c22:	4629      	mov	r1, r5
      model(m)
 8003c24:	4b11      	ldr	r3, [pc, #68]	@ (8003c6c <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x5c>)
 8003c26:	6023      	str	r3, [r4, #0]
        : pobject(0), pmemfun(0)
 8003c28:	4b11      	ldr	r3, [pc, #68]	@ (8003c70 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x60>)
 8003c2a:	e9c4 3551 	strd	r3, r5, [r4, #324]	@ 0x144
        return instance;
 8003c2e:	4b11      	ldr	r3, [pc, #68]	@ (8003c74 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x64>)
 8003c30:	6818      	ldr	r0, [r3, #0]
 8003c32:	e9c4 5553 	strd	r5, r5, [r4, #332]	@ 0x14c
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_LANDSCAPE);
 8003c36:	6803      	ldr	r3, [r0, #0]
          pendingScreenTransitionCallback(0)
 8003c38:	e9c4 554f 	strd	r5, r5, [r4, #316]	@ 0x13c
 8003c3c:	689b      	ldr	r3, [r3, #8]
      model(m)
 8003c3e:	e9c4 7655 	strd	r7, r6, [r4, #340]	@ 0x154
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_LANDSCAPE);
 8003c42:	4798      	blx	r3
    touchgfx::Texts::setLanguage(GB);
 8003c44:	4628      	mov	r0, r5
 8003c46:	f000 fa2f 	bl	80040a8 <_ZN8touchgfx5Texts11setLanguageEt>
    reinterpret_cast<touchgfx::LCD24bpp&>(touchgfx::HAL::lcd()).enableTextureMapperAll();
 8003c4a:	f7ff ffd5 	bl	8003bf8 <_ZN8touchgfx3HAL3lcdEv>
 8003c4e:	f01c fa66 	bl	802011e <_ZN8touchgfx8LCD24bpp22enableTextureMapperAllEv>
    reinterpret_cast<touchgfx::LCD24bpp&>(touchgfx::HAL::lcd()).enableDecompressorL8_All();
 8003c52:	f7ff ffd1 	bl	8003bf8 <_ZN8touchgfx3HAL3lcdEv>
 8003c56:	f01c fad9 	bl	802020c <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_AllEv>
    reinterpret_cast<touchgfx::LCD24bpp&>(touchgfx::HAL::lcd()).enableDecompressorRGB();
 8003c5a:	f7ff ffcd 	bl	8003bf8 <_ZN8touchgfx3HAL3lcdEv>
 8003c5e:	f01c fae1 	bl	8020224 <_ZN8touchgfx8LCD24bpp21enableDecompressorRGBEv>
}
 8003c62:	4620      	mov	r0, r4
 8003c64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003c66:	bf00      	nop
 8003c68:	24028e74 	.word	0x24028e74
 8003c6c:	0802a9ec 	.word	0x0802a9ec
 8003c70:	0802a9d4 	.word	0x0802a9d4
 8003c74:	24028e20 	.word	0x24028e20

08003c78 <_ZN23FrontendApplicationBase37gotographing_ScreenScreenNoTransitionEv>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8003c78:	4b06      	ldr	r3, [pc, #24]	@ (8003c94 <_ZN23FrontendApplicationBase37gotographing_ScreenScreenNoTransitionEv+0x1c>)
 8003c7a:	f8c0 0148 	str.w	r0, [r0, #328]	@ 0x148
 8003c7e:	f8c0 314c 	str.w	r3, [r0, #332]	@ 0x14c
 8003c82:	2300      	movs	r3, #0
 8003c84:	f8c0 3150 	str.w	r3, [r0, #336]	@ 0x150
    pendingScreenTransitionCallback = &transitionCallback;
 8003c88:	f500 73a2 	add.w	r3, r0, #324	@ 0x144
 8003c8c:	f8c0 3140 	str.w	r3, [r0, #320]	@ 0x140
}
 8003c90:	4770      	bx	lr
 8003c92:	bf00      	nop
 8003c94:	08003aad 	.word	0x08003aad

08003c98 <_ZNK8touchgfx13GeneratedFont12getGSUBTableEv>:
    virtual int8_t getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const;

    virtual const uint16_t* getGSUBTable() const
    {
        return gsubTable;
    }
 8003c98:	6a40      	ldr	r0, [r0, #36]	@ 0x24
 8003c9a:	4770      	bx	lr

08003c9c <_ZNK8touchgfx13GeneratedFont23getContextualFormsTableEv>:

    virtual const FontContextualFormsTable* getContextualFormsTable() const
    {
        return arabicTable;
    }
 8003c9c:	6a80      	ldr	r0, [r0, #40]	@ 0x28
 8003c9e:	4770      	bx	lr

08003ca0 <_ZN8touchgfx13GeneratedFontD1Ev>:
class GeneratedFont : public ConstFont
 8003ca0:	4770      	bx	lr

08003ca2 <_ZNK8touchgfx13GeneratedFont12getPixelDataEPKNS_9GlyphNodeE>:
}

const uint8_t* GeneratedFont::getPixelData(const GlyphNode* glyph) const
{
    const uint8_t* const* table = (const uint8_t* const*)glyphData;
    return &(table[glyph->unicode / 2048][glyph->dataOffset]);
 8003ca2:	888b      	ldrh	r3, [r1, #4]
 8003ca4:	69c0      	ldr	r0, [r0, #28]
 8003ca6:	0adb      	lsrs	r3, r3, #11
 8003ca8:	680a      	ldr	r2, [r1, #0]
 8003caa:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
}
 8003cae:	4410      	add	r0, r2
 8003cb0:	4770      	bx	lr

08003cb2 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE>:

int8_t GeneratedFont::getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
{
 8003cb2:	b510      	push	{r4, lr}
 8003cb4:	4604      	mov	r4, r0
    if (!glyph || glyph->kerningTableSize == 0)
 8003cb6:	b1ba      	cbz	r2, 8003ce8 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x36>
 8003cb8:	7b10      	ldrb	r0, [r2, #12]
 8003cba:	b168      	cbz	r0, 8003cd8 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x26>
        return ((flags & GLYPH_DATA_KERNINGTABLEPOS_BIT8_10) << 8) | _kerningTablePos;
 8003cbc:	7b53      	ldrb	r3, [r2, #13]
 8003cbe:	7ad2      	ldrb	r2, [r2, #11]
 8003cc0:	021b      	lsls	r3, r3, #8
 8003cc2:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
    {
        return 0;
    }

    const KerningNode* kerndata = kerningData + glyph->kerningTablePos();
 8003cc6:	431a      	orrs	r2, r3
 8003cc8:	6a23      	ldr	r3, [r4, #32]
 8003cca:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
    {
        if (prevChar == kerndata->unicodePrevChar)
 8003cce:	881a      	ldrh	r2, [r3, #0]
 8003cd0:	428a      	cmp	r2, r1
 8003cd2:	d102      	bne.n	8003cda <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x28>
        {
            return kerndata->distance;
 8003cd4:	f993 0002 	ldrsb.w	r0, [r3, #2]
        {
            break;
        }
    }
    return 0;
}
 8003cd8:	bd10      	pop	{r4, pc}
        if (prevChar < kerndata->unicodePrevChar)
 8003cda:	d805      	bhi.n	8003ce8 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x36>
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 8003cdc:	3801      	subs	r0, #1
 8003cde:	3304      	adds	r3, #4
 8003ce0:	b280      	uxth	r0, r0
 8003ce2:	2800      	cmp	r0, #0
 8003ce4:	d1f3      	bne.n	8003cce <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x1c>
 8003ce6:	e7f7      	b.n	8003cd8 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x26>
        return 0;
 8003ce8:	2000      	movs	r0, #0
 8003cea:	e7f5      	b.n	8003cd8 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x26>

08003cec <_ZN8touchgfx13GeneratedFontD0Ev>:
 8003cec:	b510      	push	{r4, lr}
 8003cee:	4604      	mov	r4, r0
 8003cf0:	212c      	movs	r1, #44	@ 0x2c
 8003cf2:	f022 ff4c 	bl	8026b8e <_ZdlPvj>
 8003cf6:	4620      	mov	r0, r4
 8003cf8:	bd10      	pop	{r4, pc}
	...

08003cfc <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>:
GeneratedFont::GeneratedFont(const GlyphNode* glyphs, uint16_t numGlyphs, uint16_t height, uint16_t baseline, uint8_t pixAboveTop, uint8_t pixBelowBottom, uint8_t bitsPerPixel, uint8_t byteAlignRow, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData, const FontContextualFormsTable* formsTable)
 8003cfc:	b530      	push	{r4, r5, lr}
 8003cfe:	b08b      	sub	sp, #44	@ 0x2c
 8003d00:	4604      	mov	r4, r0
      arabicTable(formsTable)
 8003d02:	f8bd 5060 	ldrh.w	r5, [sp, #96]	@ 0x60
 8003d06:	9508      	str	r5, [sp, #32]
 8003d08:	f8bd 505c 	ldrh.w	r5, [sp, #92]	@ 0x5c
 8003d0c:	9507      	str	r5, [sp, #28]
 8003d0e:	f89d 5050 	ldrb.w	r5, [sp, #80]	@ 0x50
 8003d12:	9506      	str	r5, [sp, #24]
 8003d14:	f89d 504c 	ldrb.w	r5, [sp, #76]	@ 0x4c
 8003d18:	9505      	str	r5, [sp, #20]
 8003d1a:	f89d 5048 	ldrb.w	r5, [sp, #72]	@ 0x48
 8003d1e:	9504      	str	r5, [sp, #16]
 8003d20:	f89d 5044 	ldrb.w	r5, [sp, #68]	@ 0x44
 8003d24:	9503      	str	r5, [sp, #12]
 8003d26:	f89d 5040 	ldrb.w	r5, [sp, #64]	@ 0x40
 8003d2a:	9502      	str	r5, [sp, #8]
 8003d2c:	f89d 503c 	ldrb.w	r5, [sp, #60]	@ 0x3c
 8003d30:	9501      	str	r5, [sp, #4]
 8003d32:	f8bd 5038 	ldrh.w	r5, [sp, #56]	@ 0x38
 8003d36:	9500      	str	r5, [sp, #0]
 8003d38:	f015 f8de 	bl	8018ef8 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt>
 8003d3c:	4b06      	ldr	r3, [pc, #24]	@ (8003d58 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE+0x5c>)
}
 8003d3e:	4620      	mov	r0, r4
      arabicTable(formsTable)
 8003d40:	6023      	str	r3, [r4, #0]
      glyphData(glyphDataInternalFlash),
 8003d42:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8003d44:	61e3      	str	r3, [r4, #28]
      kerningData(kerningList),
 8003d46:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8003d48:	6223      	str	r3, [r4, #32]
      gsubTable(gsubData),
 8003d4a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8003d4c:	6263      	str	r3, [r4, #36]	@ 0x24
      arabicTable(formsTable)
 8003d4e:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 8003d50:	62a3      	str	r3, [r4, #40]	@ 0x28
}
 8003d52:	b00b      	add	sp, #44	@ 0x2c
 8003d54:	bd30      	pop	{r4, r5, pc}
 8003d56:	bf00      	nop
 8003d58:	0802aa64 	.word	0x0802aa64

08003d5c <_ZN8touchgfx6Screen11setupScreenEv>:
     *
     * @see Application::switchScreen
     */
    virtual void setupScreen()
    {
    }
 8003d5c:	4770      	bx	lr

08003d5e <_ZN8touchgfx6Screen15afterTransitionEv>:
     *
     * @see Application::handleTickEvent
     */
    virtual void afterTransition()
    {
    }
 8003d5e:	4770      	bx	lr

08003d60 <_ZN8touchgfx6Screen14tearDownScreenEv>:
     *
     * @see Application::switchScreen
     */
    virtual void tearDownScreen()
    {
    }
 8003d60:	4770      	bx	lr

08003d62 <_ZN8touchgfx6Screen15handleTickEventEv>:
     * Called by the Application on the current screen with a frequency of
     * Application::TICK_INTERVAL_MS.
     */
    virtual void handleTickEvent()
    {
    }
 8003d62:	4770      	bx	lr

08003d64 <_ZN8touchgfx6Screen14handleKeyEventEh>:
     * @param  key The key to handle.
     */
    virtual void handleKeyEvent(uint8_t key)
    {
        (void)key; // Unused variable
    }
 8003d64:	4770      	bx	lr

08003d66 <_ZN8touchgfx8Drawable5setXYEss>:
        setX(x);
 8003d66:	6803      	ldr	r3, [r0, #0]
    void setXY(int16_t x, int16_t y)
 8003d68:	b570      	push	{r4, r5, r6, lr}
 8003d6a:	4604      	mov	r4, r0
        setX(x);
 8003d6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
    void setXY(int16_t x, int16_t y)
 8003d6e:	4615      	mov	r5, r2
        setX(x);
 8003d70:	4798      	blx	r3
        setY(y);
 8003d72:	6823      	ldr	r3, [r4, #0]
 8003d74:	4620      	mov	r0, r4
 8003d76:	4629      	mov	r1, r5
 8003d78:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    }
 8003d7a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        setY(y);
 8003d7e:	4718      	bx	r3

08003d80 <_ZN8touchgfx8Drawable11setPositionEssss>:
    void setPosition(int16_t x, int16_t y, int16_t width, int16_t height)
 8003d80:	b570      	push	{r4, r5, r6, lr}
 8003d82:	4604      	mov	r4, r0
 8003d84:	461d      	mov	r5, r3
 8003d86:	f9bd 6010 	ldrsh.w	r6, [sp, #16]
        setXY(x, y);
 8003d8a:	f7ff ffec 	bl	8003d66 <_ZN8touchgfx8Drawable5setXYEss>
        setWidth(width);
 8003d8e:	6823      	ldr	r3, [r4, #0]
 8003d90:	4629      	mov	r1, r5
 8003d92:	4620      	mov	r0, r4
 8003d94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d96:	4798      	blx	r3
        setHeight(height);
 8003d98:	6823      	ldr	r3, [r4, #0]
 8003d9a:	4631      	mov	r1, r6
 8003d9c:	4620      	mov	r0, r4
 8003d9e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    }
 8003da0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        setHeight(height);
 8003da4:	4718      	bx	r3
	...

08003da8 <_ZN8touchgfx3BoxC1Ev>:
class Box : public Widget
{
public:
    /** Construct a new Box with a default alpha value of 255 (solid) */
    Box()
        : Widget(), alpha(255), color(0)
 8003da8:	4a09      	ldr	r2, [pc, #36]	@ (8003dd0 <_ZN8touchgfx3BoxC1Ev+0x28>)
          touchable(false),
 8003daa:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003dae:	6002      	str	r2, [r0, #0]
 8003db0:	2200      	movs	r2, #0
 8003db2:	8481      	strh	r1, [r0, #36]	@ 0x24
 8003db4:	21ff      	movs	r1, #255	@ 0xff
        : color(col)
 8003db6:	6282      	str	r2, [r0, #40]	@ 0x28
 8003db8:	f880 1026 	strb.w	r1, [r0, #38]	@ 0x26
        : x(0), y(0), width(0), height(0)
 8003dbc:	e9c0 2201 	strd	r2, r2, [r0, #4]
 8003dc0:	e9c0 2203 	strd	r2, r2, [r0, #12]
          nextSibling(0),
 8003dc4:	e9c0 2205 	strd	r2, r2, [r0, #20]
          cachedAbsX(0),
 8003dc8:	e9c0 2207 	strd	r2, r2, [r0, #28]
    {
    }
 8003dcc:	4770      	bx	lr
 8003dce:	bf00      	nop
 8003dd0:	0802c40c 	.word	0x0802c40c

08003dd4 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_10_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_10_4bpp();

touchgfx::GeneratedFont& getFont_verdana_10_4bpp()
{
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 10, 0, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 8003dd4:	4770      	bx	lr
	...

08003dd8 <_Z23getFont_verdana_10_4bppv>:
{
 8003dd8:	b530      	push	{r4, r5, lr}
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 10, 0, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 8003dda:	4d16      	ldr	r5, [pc, #88]	@ (8003e34 <_Z23getFont_verdana_10_4bppv+0x5c>)
{
 8003ddc:	b08f      	sub	sp, #60	@ 0x3c
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 10, 0, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 8003dde:	682c      	ldr	r4, [r5, #0]
 8003de0:	f3bf 8f5b 	dmb	ish
 8003de4:	f014 0401 	ands.w	r4, r4, #1
 8003de8:	d120      	bne.n	8003e2c <_Z23getFont_verdana_10_4bppv+0x54>
 8003dea:	4628      	mov	r0, r5
 8003dec:	f022 fed1 	bl	8026b92 <__cxa_guard_acquire>
 8003df0:	b1e0      	cbz	r0, 8003e2c <_Z23getFont_verdana_10_4bppv+0x54>
 8003df2:	233f      	movs	r3, #63	@ 0x3f
 8003df4:	2201      	movs	r2, #1
 8003df6:	4910      	ldr	r1, [pc, #64]	@ (8003e38 <_Z23getFont_verdana_10_4bppv+0x60>)
 8003df8:	9309      	str	r3, [sp, #36]	@ 0x24
 8003dfa:	4b10      	ldr	r3, [pc, #64]	@ (8003e3c <_Z23getFont_verdana_10_4bppv+0x64>)
 8003dfc:	4810      	ldr	r0, [pc, #64]	@ (8003e40 <_Z23getFont_verdana_10_4bppv+0x68>)
 8003dfe:	9308      	str	r3, [sp, #32]
 8003e00:	4b10      	ldr	r3, [pc, #64]	@ (8003e44 <_Z23getFont_verdana_10_4bppv+0x6c>)
 8003e02:	940a      	str	r4, [sp, #40]	@ 0x28
 8003e04:	9405      	str	r4, [sp, #20]
 8003e06:	e9cd 4306 	strd	r4, r3, [sp, #24]
 8003e0a:	2304      	movs	r3, #4
 8003e0c:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8003e10:	230a      	movs	r3, #10
 8003e12:	e9cd 440b 	strd	r4, r4, [sp, #44]	@ 0x2c
 8003e16:	9300      	str	r3, [sp, #0]
 8003e18:	e9cd 4401 	strd	r4, r4, [sp, #4]
 8003e1c:	f7ff ff6e 	bl	8003cfc <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 8003e20:	4809      	ldr	r0, [pc, #36]	@ (8003e48 <_Z23getFont_verdana_10_4bppv+0x70>)
 8003e22:	f023 fa4b 	bl	80272bc <atexit>
 8003e26:	4628      	mov	r0, r5
 8003e28:	f022 febf 	bl	8026baa <__cxa_guard_release>
    return verdana_10_4bpp;
}
 8003e2c:	4804      	ldr	r0, [pc, #16]	@ (8003e40 <_Z23getFont_verdana_10_4bppv+0x68>)
 8003e2e:	b00f      	add	sp, #60	@ 0x3c
 8003e30:	bd30      	pop	{r4, r5, pc}
 8003e32:	bf00      	nop
 8003e34:	2400ed30 	.word	0x2400ed30
 8003e38:	08031390 	.word	0x08031390
 8003e3c:	080315d4 	.word	0x080315d4
 8003e40:	2400ed34 	.word	0x2400ed34
 8003e44:	08031604 	.word	0x08031604
 8003e48:	08003dd5 	.word	0x08003dd5

08003e4c <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_20_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_20_4bpp();

touchgfx::GeneratedFont& getFont_verdana_20_4bpp()
{
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 26, 20, 20, 0, 0, 4, 1, 0, 1, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 8003e4c:	4770      	bx	lr
	...

08003e50 <_Z23getFont_verdana_20_4bppv>:
{
 8003e50:	b530      	push	{r4, r5, lr}
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 26, 20, 20, 0, 0, 4, 1, 0, 1, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 8003e52:	4d16      	ldr	r5, [pc, #88]	@ (8003eac <_Z23getFont_verdana_20_4bppv+0x5c>)
{
 8003e54:	b08f      	sub	sp, #60	@ 0x3c
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 26, 20, 20, 0, 0, 4, 1, 0, 1, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 8003e56:	682c      	ldr	r4, [r5, #0]
 8003e58:	f3bf 8f5b 	dmb	ish
 8003e5c:	f014 0401 	ands.w	r4, r4, #1
 8003e60:	d121      	bne.n	8003ea6 <_Z23getFont_verdana_20_4bppv+0x56>
 8003e62:	4628      	mov	r0, r5
 8003e64:	f022 fe95 	bl	8026b92 <__cxa_guard_acquire>
 8003e68:	b1e8      	cbz	r0, 8003ea6 <_Z23getFont_verdana_20_4bppv+0x56>
 8003e6a:	233f      	movs	r3, #63	@ 0x3f
 8003e6c:	221a      	movs	r2, #26
 8003e6e:	4910      	ldr	r1, [pc, #64]	@ (8003eb0 <_Z23getFont_verdana_20_4bppv+0x60>)
 8003e70:	9309      	str	r3, [sp, #36]	@ 0x24
 8003e72:	4b10      	ldr	r3, [pc, #64]	@ (8003eb4 <_Z23getFont_verdana_20_4bppv+0x64>)
 8003e74:	4810      	ldr	r0, [pc, #64]	@ (8003eb8 <_Z23getFont_verdana_20_4bppv+0x68>)
 8003e76:	9308      	str	r3, [sp, #32]
 8003e78:	4b10      	ldr	r3, [pc, #64]	@ (8003ebc <_Z23getFont_verdana_20_4bppv+0x6c>)
 8003e7a:	940a      	str	r4, [sp, #40]	@ 0x28
 8003e7c:	9307      	str	r3, [sp, #28]
 8003e7e:	2301      	movs	r3, #1
 8003e80:	9401      	str	r4, [sp, #4]
 8003e82:	9304      	str	r3, [sp, #16]
 8003e84:	e9cd 4305 	strd	r4, r3, [sp, #20]
 8003e88:	2304      	movs	r3, #4
 8003e8a:	e9cd 4302 	strd	r4, r3, [sp, #8]
 8003e8e:	2314      	movs	r3, #20
 8003e90:	e9cd 440b 	strd	r4, r4, [sp, #44]	@ 0x2c
 8003e94:	9300      	str	r3, [sp, #0]
 8003e96:	f7ff ff31 	bl	8003cfc <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 8003e9a:	4809      	ldr	r0, [pc, #36]	@ (8003ec0 <_Z23getFont_verdana_20_4bppv+0x70>)
 8003e9c:	f023 fa0e 	bl	80272bc <atexit>
 8003ea0:	4628      	mov	r0, r5
 8003ea2:	f022 fe82 	bl	8026baa <__cxa_guard_release>
    return verdana_20_4bpp;
}
 8003ea6:	4804      	ldr	r0, [pc, #16]	@ (8003eb8 <_Z23getFont_verdana_20_4bppv+0x68>)
 8003ea8:	b00f      	add	sp, #60	@ 0x3c
 8003eaa:	bd30      	pop	{r4, r5, pc}
 8003eac:	2400ed60 	.word	0x2400ed60
 8003eb0:	080313a0 	.word	0x080313a0
 8003eb4:	080315d8 	.word	0x080315d8
 8003eb8:	2400ed64 	.word	0x2400ed64
 8003ebc:	08031608 	.word	0x08031608
 8003ec0:	08003e4d 	.word	0x08003e4d

08003ec4 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_41_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_41_4bpp();

touchgfx::GeneratedFont& getFont_verdana_41_4bpp()
{
    static touchgfx::GeneratedFont verdana_41_4bpp(glyphs_verdana_41_4bpp, 3, 42, 41, 0, 0, 4, 1, 0, 0, unicodes_verdana_41_4bpp, kerning_verdana_41_4bpp, 63, 0, 0, 0);
 8003ec4:	4770      	bx	lr
	...

08003ec8 <_Z23getFont_verdana_41_4bppv>:
{
 8003ec8:	b530      	push	{r4, r5, lr}
    static touchgfx::GeneratedFont verdana_41_4bpp(glyphs_verdana_41_4bpp, 3, 42, 41, 0, 0, 4, 1, 0, 0, unicodes_verdana_41_4bpp, kerning_verdana_41_4bpp, 63, 0, 0, 0);
 8003eca:	4d17      	ldr	r5, [pc, #92]	@ (8003f28 <_Z23getFont_verdana_41_4bppv+0x60>)
{
 8003ecc:	b08f      	sub	sp, #60	@ 0x3c
    static touchgfx::GeneratedFont verdana_41_4bpp(glyphs_verdana_41_4bpp, 3, 42, 41, 0, 0, 4, 1, 0, 0, unicodes_verdana_41_4bpp, kerning_verdana_41_4bpp, 63, 0, 0, 0);
 8003ece:	682c      	ldr	r4, [r5, #0]
 8003ed0:	f3bf 8f5b 	dmb	ish
 8003ed4:	f014 0401 	ands.w	r4, r4, #1
 8003ed8:	d122      	bne.n	8003f20 <_Z23getFont_verdana_41_4bppv+0x58>
 8003eda:	4628      	mov	r0, r5
 8003edc:	f022 fe59 	bl	8026b92 <__cxa_guard_acquire>
 8003ee0:	b1f0      	cbz	r0, 8003f20 <_Z23getFont_verdana_41_4bppv+0x58>
 8003ee2:	233f      	movs	r3, #63	@ 0x3f
 8003ee4:	2201      	movs	r2, #1
 8003ee6:	4911      	ldr	r1, [pc, #68]	@ (8003f2c <_Z23getFont_verdana_41_4bppv+0x64>)
 8003ee8:	9309      	str	r3, [sp, #36]	@ 0x24
 8003eea:	4b11      	ldr	r3, [pc, #68]	@ (8003f30 <_Z23getFont_verdana_41_4bppv+0x68>)
 8003eec:	4811      	ldr	r0, [pc, #68]	@ (8003f34 <_Z23getFont_verdana_41_4bppv+0x6c>)
 8003eee:	9308      	str	r3, [sp, #32]
 8003ef0:	4b11      	ldr	r3, [pc, #68]	@ (8003f38 <_Z23getFont_verdana_41_4bppv+0x70>)
 8003ef2:	940a      	str	r4, [sp, #40]	@ 0x28
 8003ef4:	9405      	str	r4, [sp, #20]
 8003ef6:	e9cd 4306 	strd	r4, r3, [sp, #24]
 8003efa:	2304      	movs	r3, #4
 8003efc:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8003f00:	2329      	movs	r3, #41	@ 0x29
 8003f02:	2203      	movs	r2, #3
 8003f04:	9300      	str	r3, [sp, #0]
 8003f06:	232a      	movs	r3, #42	@ 0x2a
 8003f08:	e9cd 440b 	strd	r4, r4, [sp, #44]	@ 0x2c
 8003f0c:	e9cd 4401 	strd	r4, r4, [sp, #4]
 8003f10:	f7ff fef4 	bl	8003cfc <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 8003f14:	4809      	ldr	r0, [pc, #36]	@ (8003f3c <_Z23getFont_verdana_41_4bppv+0x74>)
 8003f16:	f023 f9d1 	bl	80272bc <atexit>
 8003f1a:	4628      	mov	r0, r5
 8003f1c:	f022 fe45 	bl	8026baa <__cxa_guard_release>
    return verdana_41_4bpp;
}
 8003f20:	4804      	ldr	r0, [pc, #16]	@ (8003f34 <_Z23getFont_verdana_41_4bppv+0x6c>)
 8003f22:	b00f      	add	sp, #60	@ 0x3c
 8003f24:	bd30      	pop	{r4, r5, pc}
 8003f26:	bf00      	nop
 8003f28:	2400ed90 	.word	0x2400ed90
 8003f2c:	0803150c 	.word	0x0803150c
 8003f30:	080315fc 	.word	0x080315fc
 8003f34:	2400ed94 	.word	0x2400ed94
 8003f38:	0803160c 	.word	0x0803160c
 8003f3c:	08003ec5 	.word	0x08003ec5

08003f40 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_85_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_85_4bpp();

touchgfx::GeneratedFont& getFont_verdana_85_4bpp()
{
    static touchgfx::GeneratedFont verdana_85_4bpp(glyphs_verdana_85_4bpp, 11, 86, 85, 0, 0, 4, 1, 0, 0, unicodes_verdana_85_4bpp, kerning_verdana_85_4bpp, 63, 0, 0, 0);
 8003f40:	4770      	bx	lr
	...

08003f44 <_Z23getFont_verdana_85_4bppv>:
{
 8003f44:	b530      	push	{r4, r5, lr}
    static touchgfx::GeneratedFont verdana_85_4bpp(glyphs_verdana_85_4bpp, 11, 86, 85, 0, 0, 4, 1, 0, 0, unicodes_verdana_85_4bpp, kerning_verdana_85_4bpp, 63, 0, 0, 0);
 8003f46:	4d17      	ldr	r5, [pc, #92]	@ (8003fa4 <_Z23getFont_verdana_85_4bppv+0x60>)
{
 8003f48:	b08f      	sub	sp, #60	@ 0x3c
    static touchgfx::GeneratedFont verdana_85_4bpp(glyphs_verdana_85_4bpp, 11, 86, 85, 0, 0, 4, 1, 0, 0, unicodes_verdana_85_4bpp, kerning_verdana_85_4bpp, 63, 0, 0, 0);
 8003f4a:	682c      	ldr	r4, [r5, #0]
 8003f4c:	f3bf 8f5b 	dmb	ish
 8003f50:	f014 0401 	ands.w	r4, r4, #1
 8003f54:	d122      	bne.n	8003f9c <_Z23getFont_verdana_85_4bppv+0x58>
 8003f56:	4628      	mov	r0, r5
 8003f58:	f022 fe1b 	bl	8026b92 <__cxa_guard_acquire>
 8003f5c:	b1f0      	cbz	r0, 8003f9c <_Z23getFont_verdana_85_4bppv+0x58>
 8003f5e:	233f      	movs	r3, #63	@ 0x3f
 8003f60:	2201      	movs	r2, #1
 8003f62:	4911      	ldr	r1, [pc, #68]	@ (8003fa8 <_Z23getFont_verdana_85_4bppv+0x64>)
 8003f64:	9309      	str	r3, [sp, #36]	@ 0x24
 8003f66:	4b11      	ldr	r3, [pc, #68]	@ (8003fac <_Z23getFont_verdana_85_4bppv+0x68>)
 8003f68:	4811      	ldr	r0, [pc, #68]	@ (8003fb0 <_Z23getFont_verdana_85_4bppv+0x6c>)
 8003f6a:	9308      	str	r3, [sp, #32]
 8003f6c:	4b11      	ldr	r3, [pc, #68]	@ (8003fb4 <_Z23getFont_verdana_85_4bppv+0x70>)
 8003f6e:	940a      	str	r4, [sp, #40]	@ 0x28
 8003f70:	9405      	str	r4, [sp, #20]
 8003f72:	e9cd 4306 	strd	r4, r3, [sp, #24]
 8003f76:	2304      	movs	r3, #4
 8003f78:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8003f7c:	2355      	movs	r3, #85	@ 0x55
 8003f7e:	220b      	movs	r2, #11
 8003f80:	9300      	str	r3, [sp, #0]
 8003f82:	2356      	movs	r3, #86	@ 0x56
 8003f84:	e9cd 440b 	strd	r4, r4, [sp, #44]	@ 0x2c
 8003f88:	e9cd 4401 	strd	r4, r4, [sp, #4]
 8003f8c:	f7ff feb6 	bl	8003cfc <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 8003f90:	4809      	ldr	r0, [pc, #36]	@ (8003fb8 <_Z23getFont_verdana_85_4bppv+0x74>)
 8003f92:	f023 f993 	bl	80272bc <atexit>
 8003f96:	4628      	mov	r0, r5
 8003f98:	f022 fe07 	bl	8026baa <__cxa_guard_release>
    return verdana_85_4bpp;
}
 8003f9c:	4804      	ldr	r0, [pc, #16]	@ (8003fb0 <_Z23getFont_verdana_85_4bppv+0x6c>)
 8003f9e:	b00f      	add	sp, #60	@ 0x3c
 8003fa0:	bd30      	pop	{r4, r5, pc}
 8003fa2:	bf00      	nop
 8003fa4:	2400edc0 	.word	0x2400edc0
 8003fa8:	08031538 	.word	0x08031538
 8003fac:	08031600 	.word	0x08031600
 8003fb0:	2400edc4 	.word	0x2400edc4
 8003fb4:	08031610 	.word	0x08031610
 8003fb8:	08003f41 	.word	0x08003f41

08003fbc <_ZNK8touchgfx4Font12getGSUBTableEv>:
    }
 8003fbc:	2000      	movs	r0, #0
 8003fbe:	4770      	bx	lr

08003fc0 <_ZNK8touchgfx4Font23getContextualFormsTableEv>:
    }
 8003fc0:	2000      	movs	r0, #0
 8003fc2:	4770      	bx	lr

08003fc4 <_ZNK8touchgfx4Font14getStringWidthEPKtz>:
#include <touchgfx/hal/HAL.hpp>
#include <touchgfx/lcd/LCD.hpp>
#include <texts/TypedTextDatabase.hpp>

uint16_t touchgfx::Font::getStringWidth(const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 8003fc4:	b40e      	push	{r1, r2, r3}
 8003fc6:	b503      	push	{r0, r1, lr}
 8003fc8:	ab03      	add	r3, sp, #12
    va_list pArg;
    va_start(pArg, text);
    uint16_t width = getStringWidthLTR(TEXT_DIRECTION_LTR, text, pArg);
 8003fca:	2100      	movs	r1, #0
{
 8003fcc:	f853 2b04 	ldr.w	r2, [r3], #4
    va_start(pArg, text);
 8003fd0:	9301      	str	r3, [sp, #4]
    uint16_t width = getStringWidthLTR(TEXT_DIRECTION_LTR, text, pArg);
 8003fd2:	f014 fa95 	bl	8018500 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
    va_end(pArg);
    return width;
}
 8003fd6:	b002      	add	sp, #8
 8003fd8:	f85d eb04 	ldr.w	lr, [sp], #4
 8003fdc:	b003      	add	sp, #12
 8003fde:	4770      	bx	lr

08003fe0 <_ZNK8touchgfx4Font14getStringWidthEhPKtz>:

uint16_t touchgfx::Font::getStringWidth(touchgfx::TextDirection textDirection, const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 8003fe0:	b40c      	push	{r2, r3}
 8003fe2:	b507      	push	{r0, r1, r2, lr}
 8003fe4:	ab04      	add	r3, sp, #16
 8003fe6:	f853 2b04 	ldr.w	r2, [r3], #4
    va_list pArg;
    va_start(pArg, text);
 8003fea:	9301      	str	r3, [sp, #4]
    uint16_t width = getStringWidthLTR(textDirection, text, pArg);
 8003fec:	f014 fa88 	bl	8018500 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
    va_end(pArg);
    return width;
}
 8003ff0:	b003      	add	sp, #12
 8003ff2:	f85d eb04 	ldr.w	lr, [sp], #4
 8003ff6:	b002      	add	sp, #8
 8003ff8:	4770      	bx	lr
	...

08003ffc <_ZN8touchgfx12TextProvider15getNextLigatureEh>:

touchgfx::Unicode::UnicodeChar touchgfx::TextProvider::getNextLigature(TextDirection direction)
{
    if (fontGsubTable && nextCharacters.peekChar())
 8003ffc:	6c43      	ldr	r3, [r0, #68]	@ 0x44
{
 8003ffe:	b510      	push	{r4, lr}
 8004000:	4604      	mov	r4, r0
    if (fontGsubTable && nextCharacters.peekChar())
 8004002:	b373      	cbz	r3, 8004062 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x66>
            return used == size;
        }

        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar()
        {
            assert(used > 0);
 8004004:	8f03      	ldrh	r3, [r0, #56]	@ 0x38
 8004006:	b92b      	cbnz	r3, 8004014 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x18>
 8004008:	4b18      	ldr	r3, [pc, #96]	@ (800406c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x70>)
 800400a:	21c5      	movs	r1, #197	@ 0xc5
 800400c:	4a18      	ldr	r2, [pc, #96]	@ (8004070 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x74>)
            return buffer[pos];
        }

        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar(uint16_t offset)
        {
            assert(offset < used);
 800400e:	4819      	ldr	r0, [pc, #100]	@ (8004074 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x78>)
 8004010:	f023 f936 	bl	8027280 <__assert_func>
            return buffer[pos];
 8004014:	8ec3      	ldrh	r3, [r0, #54]	@ 0x36
 8004016:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 800401a:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 800401c:	b30b      	cbz	r3, 8004062 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x66>
    {
        substituteGlyphs();
 800401e:	f016 f9d1 	bl	801a3c4 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>
            assert(offset < used);
 8004022:	8f23      	ldrh	r3, [r4, #56]	@ 0x38
 8004024:	2b01      	cmp	r3, #1
 8004026:	d803      	bhi.n	8004030 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x34>
 8004028:	4b13      	ldr	r3, [pc, #76]	@ (8004078 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x7c>)
 800402a:	21cb      	movs	r1, #203	@ 0xcb
 800402c:	4a13      	ldr	r2, [pc, #76]	@ (800407c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x80>)
 800402e:	e7ee      	b.n	800400e <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x12>
            const uint16_t index = pos + offset;
 8004030:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
        if (nextCharacters.peekChar(1) == 0x093F) // Hindi I-matra
 8004032:	f640 103f 	movw	r0, #2367	@ 0x93f
 8004036:	1c53      	adds	r3, r2, #1
 8004038:	b29b      	uxth	r3, r3
            return buffer[index < size ? index : index - size];
 800403a:	2b09      	cmp	r3, #9
 800403c:	4619      	mov	r1, r3
 800403e:	bf88      	it	hi
 8004040:	f1a3 010a 	subhi.w	r1, r3, #10
 8004044:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 8004048:	8c49      	ldrh	r1, [r1, #34]	@ 0x22
 800404a:	4281      	cmp	r1, r0
 800404c:	d109      	bne.n	8004062 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x66>
        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar()
 800404e:	2b0a      	cmp	r3, #10
 8004050:	eb04 0242 	add.w	r2, r4, r2, lsl #1
 8004054:	bf28      	it	cs
 8004056:	2300      	movcs	r3, #0
            return buffer[pos];
 8004058:	8c50      	ldrh	r0, [r2, #34]	@ 0x22

        FORCE_INLINE_FUNCTION void replaceAt1(Unicode::UnicodeChar newChar)
        {
            assert(used > 1);
            const uint16_t index = pos + 1;
            buffer[index < size ? index : 0] = newChar;
 800405a:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 800405e:	8458      	strh	r0, [r3, #34]	@ 0x22
            buffer[pos] = newChar;
 8004060:	8451      	strh	r1, [r2, #34]	@ 0x22
        {
            nextCharacters.replaceAt1(nextCharacters.peekChar());
            nextCharacters.replaceAt0(0x093F);
        }
    }
    return getNextChar();
 8004062:	4620      	mov	r0, r4
}
 8004064:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return getNextChar();
 8004068:	f016 b8ae 	b.w	801a1c8 <_ZN8touchgfx12TextProvider11getNextCharEv>
 800406c:	0802aac4 	.word	0x0802aac4
 8004070:	0802aacd 	.word	0x0802aacd
 8004074:	0802ab78 	.word	0x0802ab78
 8004078:	0802abd0 	.word	0x0802abd0
 800407c:	0802abde 	.word	0x0802abde

08004080 <_ZN8touchgfx12TextProvider18initializeInternalEv>:

void touchgfx::TextProvider::initializeInternal()
{
    fillInputBuffer();
 8004080:	f016 b86b 	b.w	801a15a <_ZN8touchgfx12TextProvider15fillInputBufferEv>

08004084 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>:
}

void touchgfx::LCD::drawString(touchgfx::Rect widgetArea, const touchgfx::Rect& invalidatedArea, const touchgfx::LCD::StringVisuals& stringVisuals, const touchgfx::Unicode::UnicodeChar* format, ...)
{
 8004084:	b510      	push	{r4, lr}
 8004086:	b086      	sub	sp, #24
 8004088:	ac02      	add	r4, sp, #8
 800408a:	e884 0006 	stmia.w	r4, {r1, r2}
 800408e:	461a      	mov	r2, r3
    va_list pArg;
    va_start(pArg, format);
 8004090:	ab0a      	add	r3, sp, #40	@ 0x28
    drawStringLTR(widgetArea, invalidatedArea, stringVisuals, format, pArg);
 8004092:	4621      	mov	r1, r4
    va_start(pArg, format);
 8004094:	9305      	str	r3, [sp, #20]
    drawStringLTR(widgetArea, invalidatedArea, stringVisuals, format, pArg);
 8004096:	9301      	str	r3, [sp, #4]
 8004098:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800409a:	9300      	str	r3, [sp, #0]
 800409c:	9b08      	ldr	r3, [sp, #32]
 800409e:	f012 fe19 	bl	8016cd4 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>
    va_end(pArg);
}
 80040a2:	b006      	add	sp, #24
 80040a4:	bd10      	pop	{r4, pc}
	...

080040a8 <_ZN8touchgfx5Texts11setLanguageEt>:
touchgfx::LanguageId touchgfx::Texts::currentLanguage = static_cast<touchgfx::LanguageId>(0);
static const touchgfx::Unicode::UnicodeChar* currentLanguagePtr = 0;
static const uint32_t* currentLanguageIndices = 0;

void touchgfx::Texts::setLanguage(touchgfx::LanguageId id)
{
 80040a8:	b538      	push	{r3, r4, r5, lr}
    const touchgfx::TypedText::TypedTextData* currentLanguageTypedText = 0;
    if (id < 1)
 80040aa:	bb18      	cbnz	r0, 80040f4 <_ZN8touchgfx5Texts11setLanguageEt+0x4c>
    {
        if (languagesArray[id] != 0)
 80040ac:	4b12      	ldr	r3, [pc, #72]	@ (80040f8 <_ZN8touchgfx5Texts11setLanguageEt+0x50>)
 80040ae:	4813      	ldr	r0, [pc, #76]	@ (80040fc <_ZN8touchgfx5Texts11setLanguageEt+0x54>)
 80040b0:	681c      	ldr	r4, [r3, #0]
 80040b2:	4913      	ldr	r1, [pc, #76]	@ (8004100 <_ZN8touchgfx5Texts11setLanguageEt+0x58>)
 80040b4:	b1b4      	cbz	r4, 80040e4 <_ZN8touchgfx5Texts11setLanguageEt+0x3c>
        {
            // Dynamic translation is added
            const TranslationHeader* translation = languagesArray[id];
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
 80040b6:	6822      	ldr	r2, [r4, #0]
 80040b8:	4422      	add	r2, r4
 80040ba:	6002      	str	r2, [r0, #0]
            currentLanguageIndices = (const uint32_t*)(((const uint8_t*)translation) + translation->offset_to_indices);
 80040bc:	6862      	ldr	r2, [r4, #4]
 80040be:	4422      	add	r2, r4
 80040c0:	600a      	str	r2, [r1, #0]
            currentLanguageTypedText = (const touchgfx::TypedText::TypedTextData*)(((const uint8_t*)translation) + translation->offset_to_typedtext);
 80040c2:	68a2      	ldr	r2, [r4, #8]
 80040c4:	4414      	add	r4, r2
        }
    }

    if (currentLanguageTypedText)
    {
        currentLanguage = id;
 80040c6:	4b0f      	ldr	r3, [pc, #60]	@ (8004104 <_ZN8touchgfx5Texts11setLanguageEt+0x5c>)
 80040c8:	2200      	movs	r2, #0
 80040ca:	801a      	strh	r2, [r3, #0]
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
                                                       TypedTextDatabase::getFonts(), TypedTextDatabase::getInstanceSize());
 80040cc:	f000 f838 	bl	8004140 <_ZN17TypedTextDatabase8getFontsEv>
 80040d0:	4605      	mov	r5, r0
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
 80040d2:	f000 f833 	bl	800413c <_ZN17TypedTextDatabase15getInstanceSizeEv>
        typedTexts = data;
 80040d6:	4b0c      	ldr	r3, [pc, #48]	@ (8004108 <_ZN8touchgfx5Texts11setLanguageEt+0x60>)
 80040d8:	601c      	str	r4, [r3, #0]
        fonts = f;
 80040da:	4b0c      	ldr	r3, [pc, #48]	@ (800410c <_ZN8touchgfx5Texts11setLanguageEt+0x64>)
 80040dc:	601d      	str	r5, [r3, #0]
        numberOfTypedTexts = n;
 80040de:	4b0c      	ldr	r3, [pc, #48]	@ (8004110 <_ZN8touchgfx5Texts11setLanguageEt+0x68>)
 80040e0:	8018      	strh	r0, [r3, #0]
    }
}
 80040e2:	e007      	b.n	80040f4 <_ZN8touchgfx5Texts11setLanguageEt+0x4c>
            currentLanguagePtr = texts_all_languages;
 80040e4:	4b0b      	ldr	r3, [pc, #44]	@ (8004114 <_ZN8touchgfx5Texts11setLanguageEt+0x6c>)
 80040e6:	6003      	str	r3, [r0, #0]
            currentLanguageIndices = staticLanguageIndices[id];
 80040e8:	4b0b      	ldr	r3, [pc, #44]	@ (8004118 <_ZN8touchgfx5Texts11setLanguageEt+0x70>)
 80040ea:	600b      	str	r3, [r1, #0]
            currentLanguageTypedText = typedTextDatabaseArray[id];
 80040ec:	4b0b      	ldr	r3, [pc, #44]	@ (800411c <_ZN8touchgfx5Texts11setLanguageEt+0x74>)
 80040ee:	681c      	ldr	r4, [r3, #0]
    if (currentLanguageTypedText)
 80040f0:	2c00      	cmp	r4, #0
 80040f2:	d1e8      	bne.n	80040c6 <_ZN8touchgfx5Texts11setLanguageEt+0x1e>
}
 80040f4:	bd38      	pop	{r3, r4, r5, pc}
 80040f6:	bf00      	nop
 80040f8:	2400edfc 	.word	0x2400edfc
 80040fc:	2400edf4 	.word	0x2400edf4
 8004100:	2400edf0 	.word	0x2400edf0
 8004104:	2400edf8 	.word	0x2400edf8
 8004108:	24028e78 	.word	0x24028e78
 800410c:	24028e80 	.word	0x24028e80
 8004110:	24028e7c 	.word	0x24028e7c
 8004114:	9104f01c 	.word	0x9104f01c
 8004118:	9104efe0 	.word	0x9104efe0
 800411c:	9104f058 	.word	0x9104f058

08004120 <_ZNK8touchgfx5Texts7getTextEt>:
    languagesArray[id] = (const TranslationHeader*)translation;
}

const touchgfx::Unicode::UnicodeChar* touchgfx::Texts::getText(TypedTextId id) const
{
    return &currentLanguagePtr[currentLanguageIndices[id]];
 8004120:	4b04      	ldr	r3, [pc, #16]	@ (8004134 <_ZNK8touchgfx5Texts7getTextEt+0x14>)
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 8004128:	4b03      	ldr	r3, [pc, #12]	@ (8004138 <_ZNK8touchgfx5Texts7getTextEt+0x18>)
 800412a:	681b      	ldr	r3, [r3, #0]
}
 800412c:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 8004130:	4770      	bx	lr
 8004132:	bf00      	nop
 8004134:	2400edf0 	.word	0x2400edf0
 8004138:	2400edf4 	.word	0x2400edf4

0800413c <_ZN17TypedTextDatabase15getInstanceSizeEv>:
}

uint16_t getInstanceSize()
{
    return sizeof(typedText_database_DEFAULT) / sizeof(touchgfx::TypedText::TypedTextData);
}
 800413c:	200f      	movs	r0, #15
 800413e:	4770      	bx	lr

08004140 <_ZN17TypedTextDatabase8getFontsEv>:

const touchgfx::Font** getFonts()
{
    return touchgfx_fonts;
}
 8004140:	4800      	ldr	r0, [pc, #0]	@ (8004144 <_ZN17TypedTextDatabase8getFontsEv+0x4>)
 8004142:	4770      	bx	lr
 8004144:	2400ee00 	.word	0x2400ee00

08004148 <_GLOBAL__sub_I_touchgfx_fonts>:
    case 3:
        touchgfx_fonts[3] = &(getFont_verdana_85_4bpp());
        break;
    }
}
} // namespace TypedTextDatabase
 8004148:	b510      	push	{r4, lr}
};
 800414a:	4c07      	ldr	r4, [pc, #28]	@ (8004168 <_GLOBAL__sub_I_touchgfx_fonts+0x20>)
    &(getFont_verdana_20_4bpp()),
 800414c:	f7ff fe80 	bl	8003e50 <_Z23getFont_verdana_20_4bppv>
};
 8004150:	6020      	str	r0, [r4, #0]
    &(getFont_verdana_41_4bpp()),
 8004152:	f7ff feb9 	bl	8003ec8 <_Z23getFont_verdana_41_4bppv>
};
 8004156:	6060      	str	r0, [r4, #4]
    &(getFont_verdana_10_4bpp()),
 8004158:	f7ff fe3e 	bl	8003dd8 <_Z23getFont_verdana_10_4bppv>
};
 800415c:	60a0      	str	r0, [r4, #8]
    &(getFont_verdana_85_4bpp())
 800415e:	f7ff fef1 	bl	8003f44 <_Z23getFont_verdana_85_4bppv>
};
 8004162:	60e0      	str	r0, [r4, #12]
} // namespace TypedTextDatabase
 8004164:	bd10      	pop	{r4, pc}
 8004166:	bf00      	nop
 8004168:	2400ee00 	.word	0x2400ee00

0800416c <_ZN8touchgfx22VectorFontRendererImpl20getVectorFontBuffersERPfRiRPhS3_>:
/* DO NOT EDIT THIS FILE */
/* This file is autogenerated by the text-database code generator */
#include <touchgfx/VectorFontRendererImpl.hpp>

void touchgfx::VectorFontRendererImpl::getVectorFontBuffers(float*& pointArray, int& pointArraySize, uint8_t*& commandArray, int& commandArraySize)
{
 800416c:	b510      	push	{r4, lr}
    pointArray = 0;
 800416e:	2400      	movs	r4, #0
 8004170:	6004      	str	r4, [r0, #0]
    pointArraySize = 0;
 8004172:	600c      	str	r4, [r1, #0]
    commandArray = 0;
 8004174:	6014      	str	r4, [r2, #0]
    commandArraySize = 0;
 8004176:	601c      	str	r4, [r3, #0]
}
 8004178:	bd10      	pop	{r4, pc}

0800417a <_ZN8touchgfx9Container13getFirstChildEv>:
     * @see getNextSibling
     */
    virtual Drawable* getFirstChild()
    {
        return firstChild;
    }
 800417a:	6a80      	ldr	r0, [r0, #40]	@ 0x28
 800417c:	4770      	bx	lr

0800417e <_ZN8touchgfx8TextArea8setWidthEs>:
    TextArea()
        : Widget(), typedText(TYPED_TEXT_INVALID), color(0), linespace(0), alpha(255), indentation(0), rotation(TEXT_ROTATE_0), wideTextAction(WIDE_TEXT_NONE), boundingArea()
    {
    }

    virtual void setWidth(int16_t width)
 800417e:	b530      	push	{r4, r5, lr}
 8004180:	b085      	sub	sp, #20
    {
        Widget::setWidth(width);
        boundingArea = calculateBoundingArea();
 8004182:	6803      	ldr	r3, [r0, #0]
    virtual void setWidth(int16_t width)
 8004184:	4604      	mov	r4, r0
        rect.width = width;
 8004186:	8101      	strh	r1, [r0, #8]
        boundingArea = calculateBoundingArea();
 8004188:	466d      	mov	r5, sp
 800418a:	4601      	mov	r1, r0
 800418c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004190:	343c      	adds	r4, #60	@ 0x3c
 8004192:	4628      	mov	r0, r5
 8004194:	4798      	blx	r3
 8004196:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800419a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    }
 800419e:	b005      	add	sp, #20
 80041a0:	bd30      	pop	{r4, r5, pc}

080041a2 <_ZN8touchgfx8TextArea9setHeightEs>:

    virtual void setHeight(int16_t height)
 80041a2:	b530      	push	{r4, r5, lr}
 80041a4:	b085      	sub	sp, #20
    {
        Widget::setHeight(height);
        boundingArea = calculateBoundingArea();
 80041a6:	6803      	ldr	r3, [r0, #0]
    virtual void setHeight(int16_t height)
 80041a8:	4604      	mov	r4, r0
        rect.height = height;
 80041aa:	8141      	strh	r1, [r0, #10]
        boundingArea = calculateBoundingArea();
 80041ac:	466d      	mov	r5, sp
 80041ae:	4601      	mov	r1, r0
 80041b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80041b4:	343c      	adds	r4, #60	@ 0x3c
 80041b6:	4628      	mov	r0, r5
 80041b8:	4798      	blx	r3
 80041ba:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80041be:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    }
 80041c2:	b005      	add	sp, #20
 80041c4:	bd30      	pop	{r4, r5, pc}

080041c6 <_ZNK8touchgfx8TextArea12getSolidRectEv>:
 80041c6:	2200      	movs	r2, #0
 80041c8:	8002      	strh	r2, [r0, #0]
 80041ca:	8042      	strh	r2, [r0, #2]
 80041cc:	8082      	strh	r2, [r0, #4]
 80041ce:	80c2      	strh	r2, [r0, #6]

    virtual Rect getSolidRect() const
    {
        return Rect();
    }
 80041d0:	4770      	bx	lr

080041d2 <_ZN8touchgfx8TextArea8setAlphaEh>:
    /**
     * @copydoc Image::setAlpha
     */
    virtual void setAlpha(uint8_t newAlpha)
    {
        alpha = newAlpha;
 80041d2:	f880 1036 	strb.w	r1, [r0, #54]	@ 0x36
    }
 80041d6:	4770      	bx	lr

080041d8 <_ZN8touchgfx8TextArea13setXBaselineYEss>:
     *
     * @note setTypedText() must be called prior to setting the baseline.
     */
    virtual void setXBaselineY(int16_t x, int16_t baselineY)
    {
        setX(x);
 80041d8:	6803      	ldr	r3, [r0, #0]
    virtual void setXBaselineY(int16_t x, int16_t baselineY)
 80041da:	b570      	push	{r4, r5, r6, lr}
 80041dc:	4604      	mov	r4, r0
        setX(x);
 80041de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
    virtual void setXBaselineY(int16_t x, int16_t baselineY)
 80041e0:	4615      	mov	r5, r2
        setX(x);
 80041e2:	4798      	blx	r3
        setBaselineY(baselineY);
 80041e4:	6823      	ldr	r3, [r4, #0]
 80041e6:	4620      	mov	r0, r4
 80041e8:	4629      	mov	r1, r5
 80041ea:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
    }
 80041ec:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        setBaselineY(baselineY);
 80041f0:	4718      	bx	r3

080041f2 <_ZNK8touchgfx8TextArea12getWildcard2Ev>:
     * @see TextAreaWithOneWildcard, TextAreaWithTwoWildcards
     */
    virtual const Unicode::UnicodeChar* getWildcard2() const
    {
        return 0;
    }
 80041f2:	2000      	movs	r0, #0
 80041f4:	4770      	bx	lr

080041f6 <_ZNK8touchgfx23TextAreaWithOneWildcard12getWildcard1Ev>:
    }

    virtual const Unicode::UnicodeChar* getWildcard1() const
    {
        return wc1;
    }
 80041f6:	6c80      	ldr	r0, [r0, #72]	@ 0x48
 80041f8:	4770      	bx	lr

080041fa <_ZNK8touchgfx5Gauge9getCenterERiS1_>:
     *
     * @see setCenter
     */
    virtual void getCenter(int& x, int& y) const
    {
        x = gaugeCenterX;
 80041fa:	f9b0 3150 	ldrsh.w	r3, [r0, #336]	@ 0x150
 80041fe:	600b      	str	r3, [r1, #0]
        y = gaugeCenterY;
 8004200:	f9b0 3152 	ldrsh.w	r3, [r0, #338]	@ 0x152
 8004204:	6013      	str	r3, [r2, #0]
    }
 8004206:	4770      	bx	lr

08004208 <_ZN8touchgfx21AbstractPainterBitmapD1Ev>:
    }

    /** Destructor */
    virtual ~AbstractPainterBitmap()
    {
    }
 8004208:	4770      	bx	lr

0800420a <_ZN8touchgfx21AbstractPainterBitmap8setTiledEb>:
     *
     * @see setOffset
     */
    virtual void setTiled(bool tiled)
    {
        isTiled = tiled;
 800420a:	7601      	strb	r1, [r0, #24]
    }
 800420c:	4770      	bx	lr

0800420e <_ZN8touchgfx21AbstractPainterBitmap9setOffsetEss>:
     *
     * @see setTiled
     */
    virtual void setOffset(int16_t x, int16_t y)
    {
        xOffset = x;
 800420e:	8281      	strh	r1, [r0, #20]
        yOffset = y;
 8004210:	82c2      	strh	r2, [r0, #22]
    }
 8004212:	4770      	bx	lr

08004214 <_ZN23graphing_ScreenViewBase23backGroundAnimationDoneEv>:
     * Virtual Action Handlers
     */
    virtual void backGroundAnimationDone()
    {
        // Override and implement this function in graphing_Screen
    }
 8004214:	4770      	bx	lr

08004216 <_ZN23graphing_ScreenViewBase18sliderValueChangedEi>:
    virtual void sliderValueChanged(int value)
    {
        // Override and implement this function in graphing_Screen
    }
 8004216:	4770      	bx	lr

08004218 <_ZN23graphing_ScreenViewBase32interaction3EndedCallbackHandlerERKN8touchgfx12FadeAnimatorINS0_5ImageEEE>:
void graphing_ScreenViewBase::interaction3EndedCallbackHandler(const touchgfx::FadeAnimator<touchgfx::Image>& comp)
{
    //Interaction5
    //When Interaction3 completed call virtual function
    //Call backGroundAnimationDone
    backGroundAnimationDone();
 8004218:	6803      	ldr	r3, [r0, #0]
 800421a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800421c:	4718      	bx	r3

0800421e <_ZN8touchgfx8CallbackI23graphing_ScreenViewBaseRKNS_6SliderEivED1Ev>:
struct Callback<dest_type, T1, T2, void> : public GenericCallback<T1, T2>
 800421e:	4770      	bx	lr

08004220 <_ZN8touchgfx8CallbackI23graphing_ScreenViewBaseRKNS_12FadeAnimatorINS_5ImageEEEvvED1Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 8004220:	4770      	bx	lr

08004222 <_ZN8touchgfx8CallbackI23graphing_ScreenViewBaseRKNS_12FadeAnimatorINS_5GaugeEEEvvED1Ev>:
 8004222:	4770      	bx	lr

08004224 <_ZN8touchgfx8CallbackI23graphing_ScreenViewBaseRKNS_13AnimatedImageEvvED1Ev>:
 8004224:	4770      	bx	lr

08004226 <_ZN8touchgfx12FadeAnimatorINS_5GaugeEED1Ev>:
 * 'uint8_t getAlpha()' method.
 *
 * @tparam T specifies the type to extend with the FadeAnimator behavior.
 */
template <class T>
class FadeAnimator : public T
 8004226:	4770      	bx	lr

08004228 <_ZN8touchgfx12FadeAnimatorINS_12MoveAnimatorINS_5ImageEEEED1Ev>:
 8004228:	4770      	bx	lr

0800422a <_ZN8touchgfx12FadeAnimatorINS_5ImageEED1Ev>:
 800422a:	4770      	bx	lr

0800422c <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>:
class TextAreaWithOneWildcard : public TextAreaWithWildcardBase
 800422c:	4770      	bx	lr

0800422e <_ZN8touchgfx8CallbackI23graphing_ScreenViewBaseRKNS_6SliderEivE7executeES4_i>:
    virtual void execute(T1 t1, T2 t2)
 800422e:	b470      	push	{r4, r5, r6}
        (pobject->*pmemfun)(t1, t2);
 8004230:	6845      	ldr	r5, [r0, #4]
    virtual void execute(T1 t1, T2 t2)
 8004232:	4603      	mov	r3, r0
        (pobject->*pmemfun)(t1, t2);
 8004234:	68c4      	ldr	r4, [r0, #12]
 8004236:	689b      	ldr	r3, [r3, #8]
 8004238:	1066      	asrs	r6, r4, #1
 800423a:	eb05 0064 	add.w	r0, r5, r4, asr #1
 800423e:	07e4      	lsls	r4, r4, #31
 8004240:	bf44      	itt	mi
 8004242:	59ac      	ldrmi	r4, [r5, r6]
 8004244:	58e3      	ldrmi	r3, [r4, r3]
    }
 8004246:	bc70      	pop	{r4, r5, r6}
        (pobject->*pmemfun)(t1, t2);
 8004248:	4718      	bx	r3

0800424a <_ZNK8touchgfx8CallbackI23graphing_ScreenViewBaseRKNS_6SliderEivE7isValidEv>:
    virtual bool isValid() const
 800424a:	4603      	mov	r3, r0
        return (pobject != 0) && (pmemfun != 0);
 800424c:	6840      	ldr	r0, [r0, #4]
 800424e:	b130      	cbz	r0, 800425e <_ZNK8touchgfx8CallbackI23graphing_ScreenViewBaseRKNS_6SliderEivE7isValidEv+0x14>
 8004250:	689a      	ldr	r2, [r3, #8]
 8004252:	b91a      	cbnz	r2, 800425c <_ZNK8touchgfx8CallbackI23graphing_ScreenViewBaseRKNS_6SliderEivE7isValidEv+0x12>
 8004254:	68d8      	ldr	r0, [r3, #12]
 8004256:	f000 0001 	and.w	r0, r0, #1
 800425a:	4770      	bx	lr
 800425c:	2001      	movs	r0, #1
    }
 800425e:	4770      	bx	lr

08004260 <_ZN8touchgfx8CallbackI23graphing_ScreenViewBaseRKNS_12FadeAnimatorINS_5ImageEEEvvE7executeES6_>:
    virtual void execute(T1 t1)
 8004260:	b430      	push	{r4, r5}
        (pobject->*pmemfun)(t1);
 8004262:	6844      	ldr	r4, [r0, #4]
    virtual void execute(T1 t1)
 8004264:	4603      	mov	r3, r0
        (pobject->*pmemfun)(t1);
 8004266:	68c2      	ldr	r2, [r0, #12]
 8004268:	689b      	ldr	r3, [r3, #8]
 800426a:	1055      	asrs	r5, r2, #1
 800426c:	eb04 0062 	add.w	r0, r4, r2, asr #1
 8004270:	07d2      	lsls	r2, r2, #31
 8004272:	bf48      	it	mi
 8004274:	5962      	ldrmi	r2, [r4, r5]
    }
 8004276:	bc30      	pop	{r4, r5}
        (pobject->*pmemfun)(t1);
 8004278:	bf48      	it	mi
 800427a:	58d3      	ldrmi	r3, [r2, r3]
 800427c:	4718      	bx	r3

0800427e <_ZNK8touchgfx8CallbackI23graphing_ScreenViewBaseRKNS_12FadeAnimatorINS_5ImageEEEvvE7isValidEv>:
    virtual bool isValid() const
 800427e:	4603      	mov	r3, r0
        return (pobject != 0) && (pmemfun != 0);
 8004280:	6840      	ldr	r0, [r0, #4]
 8004282:	b130      	cbz	r0, 8004292 <_ZNK8touchgfx8CallbackI23graphing_ScreenViewBaseRKNS_12FadeAnimatorINS_5ImageEEEvvE7isValidEv+0x14>
 8004284:	689a      	ldr	r2, [r3, #8]
 8004286:	b91a      	cbnz	r2, 8004290 <_ZNK8touchgfx8CallbackI23graphing_ScreenViewBaseRKNS_12FadeAnimatorINS_5ImageEEEvvE7isValidEv+0x12>
 8004288:	68d8      	ldr	r0, [r3, #12]
 800428a:	f000 0001 	and.w	r0, r0, #1
 800428e:	4770      	bx	lr
 8004290:	2001      	movs	r0, #1
    }
 8004292:	4770      	bx	lr

08004294 <_ZN8touchgfx8CallbackI23graphing_ScreenViewBaseRKNS_12FadeAnimatorINS_5GaugeEEEvvE7executeES6_>:
    virtual void execute(T1 t1)
 8004294:	b430      	push	{r4, r5}
        (pobject->*pmemfun)(t1);
 8004296:	6844      	ldr	r4, [r0, #4]
    virtual void execute(T1 t1)
 8004298:	4603      	mov	r3, r0
        (pobject->*pmemfun)(t1);
 800429a:	68c2      	ldr	r2, [r0, #12]
 800429c:	689b      	ldr	r3, [r3, #8]
 800429e:	1055      	asrs	r5, r2, #1
 80042a0:	eb04 0062 	add.w	r0, r4, r2, asr #1
 80042a4:	07d2      	lsls	r2, r2, #31
 80042a6:	bf48      	it	mi
 80042a8:	5962      	ldrmi	r2, [r4, r5]
    }
 80042aa:	bc30      	pop	{r4, r5}
        (pobject->*pmemfun)(t1);
 80042ac:	bf48      	it	mi
 80042ae:	58d3      	ldrmi	r3, [r2, r3]
 80042b0:	4718      	bx	r3

080042b2 <_ZNK8touchgfx8CallbackI23graphing_ScreenViewBaseRKNS_12FadeAnimatorINS_5GaugeEEEvvE7isValidEv>:
    virtual bool isValid() const
 80042b2:	4603      	mov	r3, r0
        return (pobject != 0) && (pmemfun != 0);
 80042b4:	6840      	ldr	r0, [r0, #4]
 80042b6:	b130      	cbz	r0, 80042c6 <_ZNK8touchgfx8CallbackI23graphing_ScreenViewBaseRKNS_12FadeAnimatorINS_5GaugeEEEvvE7isValidEv+0x14>
 80042b8:	689a      	ldr	r2, [r3, #8]
 80042ba:	b91a      	cbnz	r2, 80042c4 <_ZNK8touchgfx8CallbackI23graphing_ScreenViewBaseRKNS_12FadeAnimatorINS_5GaugeEEEvvE7isValidEv+0x12>
 80042bc:	68d8      	ldr	r0, [r3, #12]
 80042be:	f000 0001 	and.w	r0, r0, #1
 80042c2:	4770      	bx	lr
 80042c4:	2001      	movs	r0, #1
    }
 80042c6:	4770      	bx	lr

080042c8 <_ZN8touchgfx8CallbackI23graphing_ScreenViewBaseRKNS_13AnimatedImageEvvE7executeES4_>:
    virtual void execute(T1 t1)
 80042c8:	b430      	push	{r4, r5}
        (pobject->*pmemfun)(t1);
 80042ca:	6844      	ldr	r4, [r0, #4]
    virtual void execute(T1 t1)
 80042cc:	4603      	mov	r3, r0
        (pobject->*pmemfun)(t1);
 80042ce:	68c2      	ldr	r2, [r0, #12]
 80042d0:	689b      	ldr	r3, [r3, #8]
 80042d2:	1055      	asrs	r5, r2, #1
 80042d4:	eb04 0062 	add.w	r0, r4, r2, asr #1
 80042d8:	07d2      	lsls	r2, r2, #31
 80042da:	bf48      	it	mi
 80042dc:	5962      	ldrmi	r2, [r4, r5]
    }
 80042de:	bc30      	pop	{r4, r5}
        (pobject->*pmemfun)(t1);
 80042e0:	bf48      	it	mi
 80042e2:	58d3      	ldrmi	r3, [r2, r3]
 80042e4:	4718      	bx	r3

080042e6 <_ZNK8touchgfx8CallbackI23graphing_ScreenViewBaseRKNS_13AnimatedImageEvvE7isValidEv>:
    virtual bool isValid() const
 80042e6:	4603      	mov	r3, r0
        return (pobject != 0) && (pmemfun != 0);
 80042e8:	6840      	ldr	r0, [r0, #4]
 80042ea:	b130      	cbz	r0, 80042fa <_ZNK8touchgfx8CallbackI23graphing_ScreenViewBaseRKNS_13AnimatedImageEvvE7isValidEv+0x14>
 80042ec:	689a      	ldr	r2, [r3, #8]
 80042ee:	b91a      	cbnz	r2, 80042f8 <_ZNK8touchgfx8CallbackI23graphing_ScreenViewBaseRKNS_13AnimatedImageEvvE7isValidEv+0x12>
 80042f0:	68d8      	ldr	r0, [r3, #12]
 80042f2:	f000 0001 	and.w	r0, r0, #1
 80042f6:	4770      	bx	lr
 80042f8:	2001      	movs	r0, #1
    }
 80042fa:	4770      	bx	lr

080042fc <_ZN8touchgfx12FadeAnimatorINS_5GaugeEE21setFadeAnimationDelayEt>:
     *
     * @see getFadeAnimationDelay
     */
    virtual void setFadeAnimationDelay(uint16_t delay)
    {
        fadeAnimationDelay = delay;
 80042fc:	f8a0 11a4 	strh.w	r1, [r0, #420]	@ 0x1a4
    }
 8004300:	4770      	bx	lr

08004302 <_ZNK8touchgfx12FadeAnimatorINS_5GaugeEE21getFadeAnimationDelayEv>:
     * @see setFadeAnimationDelay
     */
    virtual uint16_t getFadeAnimationDelay() const
    {
        return fadeAnimationDelay;
    }
 8004302:	f8b0 01a4 	ldrh.w	r0, [r0, #420]	@ 0x1a4
 8004306:	4770      	bx	lr

08004308 <_ZN8touchgfx12MoveAnimatorINS_5ImageEE21setMoveAnimationDelayEt>:
     *
     * @see getMoveAnimationDelay
     */
    virtual void setMoveAnimationDelay(uint16_t delay)
    {
        moveAnimationDelay = delay;
 8004308:	8581      	strh	r1, [r0, #44]	@ 0x2c
    }
 800430a:	4770      	bx	lr

0800430c <_ZNK8touchgfx12MoveAnimatorINS_5ImageEE21getMoveAnimationDelayEv>:
     * @see setMoveAnimationDelay
     */
    virtual uint16_t getMoveAnimationDelay() const
    {
        return moveAnimationDelay;
    }
 800430c:	8d80      	ldrh	r0, [r0, #44]	@ 0x2c
 800430e:	4770      	bx	lr

08004310 <_ZN8touchgfx12FadeAnimatorINS_12MoveAnimatorINS_5ImageEEEE21setFadeAnimationDelayEt>:
        fadeAnimationDelay = delay;
 8004310:	f8a0 1048 	strh.w	r1, [r0, #72]	@ 0x48
    }
 8004314:	4770      	bx	lr

08004316 <_ZNK8touchgfx12FadeAnimatorINS_12MoveAnimatorINS_5ImageEEEE21getFadeAnimationDelayEv>:
    }
 8004316:	f8b0 0048 	ldrh.w	r0, [r0, #72]	@ 0x48
 800431a:	4770      	bx	lr

0800431c <_ZN8touchgfx12FadeAnimatorINS_5ImageEE21setFadeAnimationDelayEt>:
        fadeAnimationDelay = delay;
 800431c:	8581      	strh	r1, [r0, #44]	@ 0x2c
    }
 800431e:	4770      	bx	lr

08004320 <_ZNK8touchgfx12FadeAnimatorINS_5ImageEE21getFadeAnimationDelayEv>:
    }
 8004320:	8d80      	ldrh	r0, [r0, #44]	@ 0x2c
 8004322:	4770      	bx	lr

08004324 <_ZN8touchgfx21AbstractPainterBitmapD0Ev>:
    virtual ~AbstractPainterBitmap()
 8004324:	b510      	push	{r4, lr}
 8004326:	4604      	mov	r4, r0
    }
 8004328:	2120      	movs	r1, #32
 800432a:	f022 fc30 	bl	8026b8e <_ZdlPvj>
 800432e:	4620      	mov	r0, r4
 8004330:	bd10      	pop	{r4, pc}

08004332 <_ZN8touchgfx12FadeAnimatorINS_5ImageEED0Ev>:
class FadeAnimator : public T
 8004332:	b510      	push	{r4, lr}
 8004334:	4604      	mov	r4, r0
 8004336:	213c      	movs	r1, #60	@ 0x3c
 8004338:	f022 fc29 	bl	8026b8e <_ZdlPvj>
 800433c:	4620      	mov	r0, r4
 800433e:	bd10      	pop	{r4, pc}

08004340 <_ZN8touchgfx12FadeAnimatorINS_12MoveAnimatorINS_5ImageEEEED0Ev>:
 8004340:	b510      	push	{r4, lr}
 8004342:	4604      	mov	r4, r0
 8004344:	2158      	movs	r1, #88	@ 0x58
 8004346:	f022 fc22 	bl	8026b8e <_ZdlPvj>
 800434a:	4620      	mov	r0, r4
 800434c:	bd10      	pop	{r4, pc}

0800434e <_ZN8touchgfx23TextAreaWithOneWildcardD0Ev>:
 800434e:	b510      	push	{r4, lr}
 8004350:	4604      	mov	r4, r0
 8004352:	214c      	movs	r1, #76	@ 0x4c
 8004354:	f022 fc1b 	bl	8026b8e <_ZdlPvj>
 8004358:	4620      	mov	r0, r4
 800435a:	bd10      	pop	{r4, pc}

0800435c <_ZN8touchgfx12FadeAnimatorINS_5GaugeEED0Ev>:
 800435c:	b510      	push	{r4, lr}
 800435e:	4604      	mov	r4, r0
 8004360:	f44f 71da 	mov.w	r1, #436	@ 0x1b4
 8004364:	f022 fc13 	bl	8026b8e <_ZdlPvj>
 8004368:	4620      	mov	r0, r4
 800436a:	bd10      	pop	{r4, pc}

0800436c <_ZN8touchgfx8CallbackI23graphing_ScreenViewBaseRKNS_13AnimatedImageEvvED0Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 800436c:	b510      	push	{r4, lr}
 800436e:	4604      	mov	r4, r0
 8004370:	2110      	movs	r1, #16
 8004372:	f022 fc0c 	bl	8026b8e <_ZdlPvj>
 8004376:	4620      	mov	r0, r4
 8004378:	bd10      	pop	{r4, pc}

0800437a <_ZN8touchgfx8CallbackI23graphing_ScreenViewBaseRKNS_12FadeAnimatorINS_5GaugeEEEvvED0Ev>:
 800437a:	b510      	push	{r4, lr}
 800437c:	4604      	mov	r4, r0
 800437e:	2110      	movs	r1, #16
 8004380:	f022 fc05 	bl	8026b8e <_ZdlPvj>
 8004384:	4620      	mov	r0, r4
 8004386:	bd10      	pop	{r4, pc}

08004388 <_ZN8touchgfx8CallbackI23graphing_ScreenViewBaseRKNS_12FadeAnimatorINS_5ImageEEEvvED0Ev>:
 8004388:	b510      	push	{r4, lr}
 800438a:	4604      	mov	r4, r0
 800438c:	2110      	movs	r1, #16
 800438e:	f022 fbfe 	bl	8026b8e <_ZdlPvj>
 8004392:	4620      	mov	r0, r4
 8004394:	bd10      	pop	{r4, pc}

08004396 <_ZN8touchgfx8CallbackI23graphing_ScreenViewBaseRKNS_6SliderEivED0Ev>:
struct Callback<dest_type, T1, T2, void> : public GenericCallback<T1, T2>
 8004396:	b510      	push	{r4, lr}
 8004398:	4604      	mov	r4, r0
 800439a:	2110      	movs	r1, #16
 800439c:	f022 fbf7 	bl	8026b8e <_ZdlPvj>
 80043a0:	4620      	mov	r0, r4
 80043a2:	bd10      	pop	{r4, pc}

080043a4 <_ZN8touchgfx21AbstractPainterBitmap9setBitmapERKNS_6BitmapE>:
    virtual void setBitmap(const Bitmap& bmp)
 80043a4:	b570      	push	{r4, r5, r6, lr}
        bitmap = bmp;
 80043a6:	880b      	ldrh	r3, [r1, #0]
 80043a8:	4605      	mov	r5, r0
    virtual void setBitmap(const Bitmap& bmp)
 80043aa:	4604      	mov	r4, r0
        bitmap = bmp;
 80043ac:	f825 3f04 	strh.w	r3, [r5, #4]!
        bitmapFormat = bitmap.getFormat();
 80043b0:	4628      	mov	r0, r5
 80043b2:	f017 f89b 	bl	801b4ec <_ZNK8touchgfx6Bitmap9getFormatEv>
 80043b6:	71a0      	strb	r0, [r4, #6]
     *
     * @return a Rect describing the dimensions of this Bitmap.
     */
    Rect getRect() const
    {
        return Rect(0, 0, getWidth(), getHeight());
 80043b8:	4628      	mov	r0, r5
 80043ba:	f016 ff21 	bl	801b200 <_ZNK8touchgfx6Bitmap8getWidthEv>
 80043be:	4606      	mov	r6, r0
 80043c0:	4628      	mov	r0, r5
 80043c2:	f016 ff51 	bl	801b268 <_ZNK8touchgfx6Bitmap9getHeightEv>
        bitmapRect = bitmap.getRect();
 80043c6:	2300      	movs	r3, #0
 80043c8:	81e0      	strh	r0, [r4, #14]
        DisplayTransformation::transformDisplayToFrameBuffer(bitmapRect);
 80043ca:	f104 0008 	add.w	r0, r4, #8
        bitmapRect = bitmap.getRect();
 80043ce:	60a3      	str	r3, [r4, #8]
 80043d0:	81a6      	strh	r6, [r4, #12]
        DisplayTransformation::transformDisplayToFrameBuffer(bitmapRect);
 80043d2:	f012 ff49 	bl	8017268 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
        bitmapData = bitmap.getData();
 80043d6:	4628      	mov	r0, r5
 80043d8:	f017 f804 	bl	801b3e4 <_ZNK8touchgfx6Bitmap7getDataEv>
 80043dc:	6120      	str	r0, [r4, #16]
    }
 80043de:	bd70      	pop	{r4, r5, r6, pc}

080043e0 <_ZN23graphing_ScreenViewBase11setupScreenEv>:
    right_container1.initialize();
 80043e0:	f600 10d8 	addw	r0, r0, #2520	@ 0x9d8
 80043e4:	f001 bb8a 	b.w	8005afc <_ZN15right_container10initializeEv>

080043e8 <_ZNK8touchgfx5Image17invalidateContentEv>:
        return alpha;
    }

    virtual Rect getSolidRect() const;

    virtual void invalidateContent() const
 80043e8:	b508      	push	{r3, lr}
    {
        if (alpha > 0)
 80043ea:	f890 3028 	ldrb.w	r3, [r0, #40]	@ 0x28
 80043ee:	b10b      	cbz	r3, 80043f4 <_ZNK8touchgfx5Image17invalidateContentEv+0xc>
        {
            Widget::invalidateContent();
 80043f0:	f7fe ffd9 	bl	80033a6 <_ZNK8touchgfx8Drawable17invalidateContentEv>
        }
    }
 80043f4:	bd08      	pop	{r3, pc}

080043f6 <_ZNK8touchgfx24TextAreaWithWildcardBase17invalidateContentEv>:
    virtual void invalidateContent() const
 80043f6:	b508      	push	{r3, lr}
        Widget::invalidateContent();
 80043f8:	f7fe ffd5 	bl	80033a6 <_ZNK8touchgfx8Drawable17invalidateContentEv>
    }
 80043fc:	bd08      	pop	{r3, pc}

080043fe <_ZN23graphing_ScreenViewBase33sliderValueChangedCallbackHandlerERKN8touchgfx6SliderEi>:
{
 80043fe:	b410      	push	{r4}
    if (&src == &slider1)
 8004400:	f200 7434 	addw	r4, r0, #1844	@ 0x734
 8004404:	428c      	cmp	r4, r1
 8004406:	d105      	bne.n	8004414 <_ZN23graphing_ScreenViewBase33sliderValueChangedCallbackHandlerERKN8touchgfx6SliderEi+0x16>
        sliderValueChanged(value);
 8004408:	6803      	ldr	r3, [r0, #0]
 800440a:	4611      	mov	r1, r2
}
 800440c:	f85d 4b04 	ldr.w	r4, [sp], #4
        sliderValueChanged(value);
 8004410:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004412:	4718      	bx	r3
}
 8004414:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004418:	4770      	bx	lr
	...

0800441c <_ZN8touchgfx8TextArea12setBaselineYEs>:
        setY(baselineY - getTypedText().getFont()->getBaseline());
 800441c:	6803      	ldr	r3, [r0, #0]
    virtual void setBaselineY(int16_t baselineY)
 800441e:	b570      	push	{r4, r5, r6, lr}
        setY(baselineY - getTypedText().getFont()->getBaseline());
 8004420:	6b5e      	ldr	r6, [r3, #52]	@ 0x34
    virtual void setBaselineY(int16_t baselineY)
 8004422:	4604      	mov	r4, r0
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 8004424:	4b11      	ldr	r3, [pc, #68]	@ (800446c <_ZN8touchgfx8TextArea12setBaselineYEs+0x50>)
        setY(baselineY - getTypedText().getFont()->getBaseline());
 8004426:	b28d      	uxth	r5, r1
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	b92b      	cbnz	r3, 8004438 <_ZN8touchgfx8TextArea12setBaselineYEs+0x1c>
 800442c:	4b10      	ldr	r3, [pc, #64]	@ (8004470 <_ZN8touchgfx8TextArea12setBaselineYEs+0x54>)
 800442e:	216c      	movs	r1, #108	@ 0x6c
 8004430:	4a10      	ldr	r2, [pc, #64]	@ (8004474 <_ZN8touchgfx8TextArea12setBaselineYEs+0x58>)
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
 8004432:	4811      	ldr	r0, [pc, #68]	@ (8004478 <_ZN8touchgfx8TextArea12setBaselineYEs+0x5c>)
 8004434:	f022 ff24 	bl	8027280 <__assert_func>
        return typedTextId < numberOfTypedTexts;
 8004438:	4910      	ldr	r1, [pc, #64]	@ (800447c <_ZN8touchgfx8TextArea12setBaselineYEs+0x60>)
 800443a:	8d82      	ldrh	r2, [r0, #44]	@ 0x2c
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
 800443c:	8809      	ldrh	r1, [r1, #0]
 800443e:	4291      	cmp	r1, r2
 8004440:	d803      	bhi.n	800444a <_ZN8touchgfx8TextArea12setBaselineYEs+0x2e>
 8004442:	4b0f      	ldr	r3, [pc, #60]	@ (8004480 <_ZN8touchgfx8TextArea12setBaselineYEs+0x64>)
 8004444:	216d      	movs	r1, #109	@ 0x6d
 8004446:	4a0b      	ldr	r2, [pc, #44]	@ (8004474 <_ZN8touchgfx8TextArea12setBaselineYEs+0x58>)
 8004448:	e7f3      	b.n	8004432 <_ZN8touchgfx8TextArea12setBaselineYEs+0x16>
        return fonts[typedTexts[typedTextId].fontIdx];
 800444a:	f813 2012 	ldrb.w	r2, [r3, r2, lsl #1]
 800444e:	4b0d      	ldr	r3, [pc, #52]	@ (8004484 <_ZN8touchgfx8TextArea12setBaselineYEs+0x68>)
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8004456:	6803      	ldr	r3, [r0, #0]
 8004458:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800445a:	4798      	blx	r3
 800445c:	1a29      	subs	r1, r5, r0
 800445e:	4633      	mov	r3, r6
 8004460:	4620      	mov	r0, r4
 8004462:	b209      	sxth	r1, r1
    }
 8004464:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        setY(baselineY - getTypedText().getFont()->getBaseline());
 8004468:	4718      	bx	r3
 800446a:	bf00      	nop
 800446c:	24028e78 	.word	0x24028e78
 8004470:	0802acb0 	.word	0x0802acb0
 8004474:	0802acf2 	.word	0x0802acf2
 8004478:	0802ad2d 	.word	0x0802ad2d
 800447c:	24028e7c 	.word	0x24028e7c
 8004480:	0802ad82 	.word	0x0802ad82
 8004484:	24028e80 	.word	0x24028e80

08004488 <_ZNK8touchgfx5Gauge17invalidateContentEv>:
     */
    virtual void setAlpha(uint8_t newAlpha);

    virtual void invalidateContent() const
    {
        if (getAlpha() > 0)
 8004488:	6803      	ldr	r3, [r0, #0]
    virtual void invalidateContent() const
 800448a:	b510      	push	{r4, lr}
        if (getAlpha() > 0)
 800448c:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
    virtual void invalidateContent() const
 8004490:	4604      	mov	r4, r0
        if (getAlpha() > 0)
 8004492:	4798      	blx	r3
 8004494:	b140      	cbz	r0, 80044a8 <_ZNK8touchgfx5Gauge17invalidateContentEv+0x20>

    virtual void handleTickEvent();

    virtual void invalidateContent() const
    {
        if (getAlpha() > 0)
 8004496:	6823      	ldr	r3, [r4, #0]
 8004498:	4620      	mov	r0, r4
 800449a:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 800449e:	4798      	blx	r3
 80044a0:	b110      	cbz	r0, 80044a8 <_ZNK8touchgfx5Gauge17invalidateContentEv+0x20>
        {
            Container::invalidateContent();
 80044a2:	4620      	mov	r0, r4
 80044a4:	f7fe ff7f 	bl	80033a6 <_ZNK8touchgfx8Drawable17invalidateContentEv>
        {
            AbstractProgressIndicator::invalidateContent();
        }
    }
 80044a8:	bd10      	pop	{r4, pc}

080044aa <_ZNK8touchgfx24TextAreaWithWildcardBase21calculateBoundingAreaEv>:

        /**
         * Initializes a new instance of the BoundingArea class which is invalid by default.
         */
        BoundingArea()
            : rect(Rect(0, 0, -1, -1)), // Negative width and height means invalid rectangle
 80044aa:	2200      	movs	r2, #0
 80044ac:	f04f 31ff 	mov.w	r1, #4294967295
              text(0)
 80044b0:	6082      	str	r2, [r0, #8]
            : rect(Rect(0, 0, -1, -1)), // Negative width and height means invalid rectangle
 80044b2:	e9c0 2100 	strd	r2, r1, [r0]
    }
 80044b6:	4770      	bx	lr

080044b8 <_ZN8touchgfx9ContainerC1Ev>:
          touchable(false),
 80044b8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80044bc:	2200      	movs	r2, #0
 80044be:	8481      	strh	r1, [r0, #36]	@ 0x24
          firstChild(0)
 80044c0:	4905      	ldr	r1, [pc, #20]	@ (80044d8 <_ZN8touchgfx9ContainerC1Ev+0x20>)
 80044c2:	6282      	str	r2, [r0, #40]	@ 0x28
 80044c4:	6001      	str	r1, [r0, #0]
 80044c6:	e9c0 2201 	strd	r2, r2, [r0, #4]
 80044ca:	e9c0 2203 	strd	r2, r2, [r0, #12]
          nextSibling(0),
 80044ce:	e9c0 2205 	strd	r2, r2, [r0, #20]
          cachedAbsX(0),
 80044d2:	e9c0 2207 	strd	r2, r2, [r0, #28]
    }
 80044d6:	4770      	bx	lr
 80044d8:	0802bce8 	.word	0x0802bce8

080044dc <_ZN8touchgfx6WidgetC1Ev>:
 80044dc:	2200      	movs	r2, #0
 80044de:	e9c0 2201 	strd	r2, r2, [r0, #4]
 80044e2:	e9c0 2203 	strd	r2, r2, [r0, #12]
          nextSibling(0),
 80044e6:	e9c0 2205 	strd	r2, r2, [r0, #20]
          cachedAbsX(0),
 80044ea:	e9c0 2207 	strd	r2, r2, [r0, #28]
          touchable(false),
 80044ee:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80044f2:	8482      	strh	r2, [r0, #36]	@ 0x24
class Widget : public Drawable
 80044f4:	4a01      	ldr	r2, [pc, #4]	@ (80044fc <_ZN8touchgfx6WidgetC1Ev+0x20>)
 80044f6:	6002      	str	r2, [r0, #0]
 80044f8:	4770      	bx	lr
 80044fa:	bf00      	nop
 80044fc:	0802ae18 	.word	0x0802ae18

08004500 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>:
    Image(const Bitmap& bmp = Bitmap())
 8004500:	b538      	push	{r3, r4, r5, lr}
 8004502:	4604      	mov	r4, r0
 8004504:	460d      	mov	r5, r1
        : Widget(), bitmap(bmp), alpha(255)
 8004506:	2226      	movs	r2, #38	@ 0x26
 8004508:	2100      	movs	r1, #0
 800450a:	f023 f955 	bl	80277b8 <memset>
 800450e:	4620      	mov	r0, r4
 8004510:	f7ff ffe4 	bl	80044dc <_ZN8touchgfx6WidgetC1Ev>
 8004514:	4b06      	ldr	r3, [pc, #24]	@ (8004530 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE+0x30>)
        Image::setBitmap(bmp);
 8004516:	4620      	mov	r0, r4
 8004518:	4629      	mov	r1, r5
        : Widget(), bitmap(bmp), alpha(255)
 800451a:	6023      	str	r3, [r4, #0]
 800451c:	882b      	ldrh	r3, [r5, #0]
 800451e:	84e3      	strh	r3, [r4, #38]	@ 0x26
 8004520:	23ff      	movs	r3, #255	@ 0xff
 8004522:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
        Image::setBitmap(bmp);
 8004526:	f010 fc44 	bl	8014db2 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
    }
 800452a:	4620      	mov	r0, r4
 800452c:	bd38      	pop	{r3, r4, r5, pc}
 800452e:	bf00      	nop
 8004530:	0802c5e0 	.word	0x0802c5e0

08004534 <_ZN8touchgfx8TextAreaC1Ev>:
    TextArea()
 8004534:	b510      	push	{r4, lr}
 8004536:	4604      	mov	r4, r0
        : Widget(), typedText(TYPED_TEXT_INVALID), color(0), linespace(0), alpha(255), indentation(0), rotation(TEXT_ROTATE_0), wideTextAction(WIDE_TEXT_NONE), boundingArea()
 8004538:	2226      	movs	r2, #38	@ 0x26
 800453a:	2100      	movs	r1, #0
 800453c:	f023 f93c 	bl	80277b8 <memset>
 8004540:	4620      	mov	r0, r4
 8004542:	f7ff ffcb 	bl	80044dc <_ZN8touchgfx6WidgetC1Ev>
 8004546:	4b0a      	ldr	r3, [pc, #40]	@ (8004570 <_ZN8touchgfx8TextAreaC1Ev+0x3c>)
 8004548:	f44f 027f 	mov.w	r2, #16711680	@ 0xff0000
    }
 800454c:	4620      	mov	r0, r4
        : Widget(), typedText(TYPED_TEXT_INVALID), color(0), linespace(0), alpha(255), indentation(0), rotation(TEXT_ROTATE_0), wideTextAction(WIDE_TEXT_NONE), boundingArea()
 800454e:	6023      	str	r3, [r4, #0]
        : typedTextId(id)
 8004550:	4b08      	ldr	r3, [pc, #32]	@ (8004574 <_ZN8touchgfx8TextAreaC1Ev+0x40>)
 8004552:	62a3      	str	r3, [r4, #40]	@ 0x28
 8004554:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8004558:	85a3      	strh	r3, [r4, #44]	@ 0x2c
 800455a:	2300      	movs	r3, #0
 800455c:	e9c4 320c 	strd	r3, r2, [r4, #48]	@ 0x30
        : x(rectX), y(rectY), width(rectWidth), height(rectHeight)
 8004560:	f04f 32ff 	mov.w	r2, #4294967295
 8004564:	8723      	strh	r3, [r4, #56]	@ 0x38
 8004566:	63e3      	str	r3, [r4, #60]	@ 0x3c
              text(0)
 8004568:	e9c4 2310 	strd	r2, r3, [r4, #64]	@ 0x40
    }
 800456c:	bd10      	pop	{r4, pc}
 800456e:	bf00      	nop
 8004570:	0802c37c 	.word	0x0802c37c
 8004574:	0802a5c4 	.word	0x0802a5c4

08004578 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>:
    TextAreaWithOneWildcard()
 8004578:	b510      	push	{r4, lr}
 800457a:	4604      	mov	r4, r0
        : TextArea()
 800457c:	f7ff ffda 	bl	8004534 <_ZN8touchgfx8TextAreaC1Ev>
        : TextAreaWithWildcardBase(), wc1(0)
 8004580:	4b02      	ldr	r3, [pc, #8]	@ (800458c <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev+0x14>)
    }
 8004582:	4620      	mov	r0, r4
        : TextAreaWithWildcardBase(), wc1(0)
 8004584:	6023      	str	r3, [r4, #0]
 8004586:	2300      	movs	r3, #0
 8004588:	64a3      	str	r3, [r4, #72]	@ 0x48
    }
 800458a:	bd10      	pop	{r4, pc}
 800458c:	0802ae80 	.word	0x0802ae80

08004590 <_ZN8touchgfx12FadeAnimatorINS_5GaugeEE21nextFadeAnimationStepEv>:

protected:
    /** Execute next step in fade animation and stop the timer if necessary. */
    void nextFadeAnimationStep()
    {
        if (fadeAnimationRunning)
 8004590:	f890 31a0 	ldrb.w	r3, [r0, #416]	@ 0x1a0
    void nextFadeAnimationStep()
 8004594:	b570      	push	{r4, r5, r6, lr}
 8004596:	4604      	mov	r4, r0
        if (fadeAnimationRunning)
 8004598:	2b00      	cmp	r3, #0
 800459a:	d052      	beq.n	8004642 <_ZN8touchgfx12FadeAnimatorINS_5GaugeEE21nextFadeAnimationStepEv+0xb2>
        {
            fadeAnimationCounter++;
 800459c:	f8b0 01a2 	ldrh.w	r0, [r0, #418]	@ 0x1a2
            if (fadeAnimationCounter >= fadeAnimationDelay)
 80045a0:	f8b4 31a4 	ldrh.w	r3, [r4, #420]	@ 0x1a4
            fadeAnimationCounter++;
 80045a4:	3001      	adds	r0, #1
 80045a6:	b280      	uxth	r0, r0
            if (fadeAnimationCounter >= fadeAnimationDelay)
 80045a8:	4298      	cmp	r0, r3
            fadeAnimationCounter++;
 80045aa:	f8a4 01a2 	strh.w	r0, [r4, #418]	@ 0x1a2
            if (fadeAnimationCounter >= fadeAnimationDelay)
 80045ae:	d348      	bcc.n	8004642 <_ZN8touchgfx12FadeAnimatorINS_5GaugeEE21nextFadeAnimationStepEv+0xb2>
            {
                // Adjust the used animationCounter for the startup delay
                uint32_t actualAnimationCounter = fadeAnimationCounter - fadeAnimationDelay;

                int16_t newAlpha = fadeAnimationStartAlpha + (int16_t)fadeAnimationAlphaEquation(actualAnimationCounter, 0, fadeAnimationEndAlpha - fadeAnimationStartAlpha, fadeAnimationDuration);
 80045b0:	f8b4 51a8 	ldrh.w	r5, [r4, #424]	@ 0x1a8
 80045b4:	1ac0      	subs	r0, r0, r3
 80045b6:	f8b4 21aa 	ldrh.w	r2, [r4, #426]	@ 0x1aa
 80045ba:	2100      	movs	r1, #0
 80045bc:	f8d4 61ac 	ldr.w	r6, [r4, #428]	@ 0x1ac
 80045c0:	b280      	uxth	r0, r0
 80045c2:	1b52      	subs	r2, r2, r5
 80045c4:	f8b4 31a6 	ldrh.w	r3, [r4, #422]	@ 0x1a6
 80045c8:	b212      	sxth	r2, r2
 80045ca:	47b0      	blx	r6
 80045cc:	4405      	add	r5, r0

                if (T::getAlpha() != newAlpha)
 80045ce:	4620      	mov	r0, r4
                int16_t newAlpha = fadeAnimationStartAlpha + (int16_t)fadeAnimationAlphaEquation(actualAnimationCounter, 0, fadeAnimationEndAlpha - fadeAnimationStartAlpha, fadeAnimationDuration);
 80045d0:	b2ae      	uxth	r6, r5
 80045d2:	b22d      	sxth	r5, r5
                if (T::getAlpha() != newAlpha)
 80045d4:	f00a fd43 	bl	800f05e <_ZNK8touchgfx25AbstractProgressIndicator8getAlphaEv>
 80045d8:	42a8      	cmp	r0, r5
 80045da:	d007      	beq.n	80045ec <_ZN8touchgfx12FadeAnimatorINS_5GaugeEE21nextFadeAnimationStepEv+0x5c>
                {
                    if (newAlpha == 0)
 80045dc:	bb4d      	cbnz	r5, 8004632 <_ZN8touchgfx12FadeAnimatorINS_5GaugeEE21nextFadeAnimationStepEv+0xa2>
                    {
                        // InvalidateContent before it becomes invisible
                        T::invalidateContent();
 80045de:	4620      	mov	r0, r4
 80045e0:	f7ff ff52 	bl	8004488 <_ZNK8touchgfx5Gauge17invalidateContentEv>
                        T::setAlpha((uint8_t)newAlpha);
 80045e4:	4629      	mov	r1, r5
 80045e6:	4620      	mov	r0, r4
 80045e8:	f010 f9ec 	bl	80149c4 <_ZN8touchgfx5Gauge8setAlphaEh>
                        T::setAlpha((uint8_t)newAlpha);
                        T::invalidateContent();
                    }
                }

                if (fadeAnimationCounter >= (uint32_t)(fadeAnimationDelay + fadeAnimationDuration))
 80045ec:	f8b4 31a4 	ldrh.w	r3, [r4, #420]	@ 0x1a4
 80045f0:	f8b4 11a6 	ldrh.w	r1, [r4, #422]	@ 0x1a6
 80045f4:	f8b4 21a2 	ldrh.w	r2, [r4, #418]	@ 0x1a2
 80045f8:	440b      	add	r3, r1
 80045fa:	429a      	cmp	r2, r3
 80045fc:	d321      	bcc.n	8004642 <_ZN8touchgfx12FadeAnimatorINS_5GaugeEE21nextFadeAnimationStepEv+0xb2>
                {
                    // End of animation
                    fadeAnimationRunning = false;
 80045fe:	2300      	movs	r3, #0
 8004600:	f884 31a0 	strb.w	r3, [r4, #416]	@ 0x1a0
                    fadeAnimationDuration = 0;
 8004604:	f8a4 31a6 	strh.w	r3, [r4, #422]	@ 0x1a6
                    Application::getInstance()->unregisterTimerWidget(this);
 8004608:	f012 ffe2 	bl	80175d0 <_ZN8touchgfx11Application11getInstanceEv>
     * @note If widget has been registered multiple times, an equal number of calls to unregister
     *       are required to stop widget from receiving tick events.
     */
    void unregisterTimerWidget(const Drawable* w)
    {
        timerWidgets.remove(w);
 800460c:	4621      	mov	r1, r4
 800460e:	3004      	adds	r0, #4
 8004610:	f013 f803 	bl	801761a <_ZN8touchgfx11Application12TimerWidgets6removeEPKNS_8DrawableE>

                    if (fadeAnimationEndedCallback && fadeAnimationEndedCallback->isValid())
 8004614:	f8d4 01b0 	ldr.w	r0, [r4, #432]	@ 0x1b0
 8004618:	b198      	cbz	r0, 8004642 <_ZN8touchgfx12FadeAnimatorINS_5GaugeEE21nextFadeAnimationStepEv+0xb2>
 800461a:	6803      	ldr	r3, [r0, #0]
 800461c:	68db      	ldr	r3, [r3, #12]
 800461e:	4798      	blx	r3
 8004620:	b178      	cbz	r0, 8004642 <_ZN8touchgfx12FadeAnimatorINS_5GaugeEE21nextFadeAnimationStepEv+0xb2>
                    {
                        fadeAnimationEndedCallback->execute(*this);
 8004622:	f8d4 01b0 	ldr.w	r0, [r4, #432]	@ 0x1b0
 8004626:	4621      	mov	r1, r4
 8004628:	6803      	ldr	r3, [r0, #0]
                    }
                }
            }
        }
    }
 800462a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
                        fadeAnimationEndedCallback->execute(*this);
 800462e:	689b      	ldr	r3, [r3, #8]
 8004630:	4718      	bx	r3
                        T::setAlpha((uint8_t)newAlpha);
 8004632:	4620      	mov	r0, r4
 8004634:	b2f1      	uxtb	r1, r6
 8004636:	f010 f9c5 	bl	80149c4 <_ZN8touchgfx5Gauge8setAlphaEh>
                        T::invalidateContent();
 800463a:	4620      	mov	r0, r4
 800463c:	f7ff ff24 	bl	8004488 <_ZNK8touchgfx5Gauge17invalidateContentEv>
 8004640:	e7d4      	b.n	80045ec <_ZN8touchgfx12FadeAnimatorINS_5GaugeEE21nextFadeAnimationStepEv+0x5c>
    }
 8004642:	bd70      	pop	{r4, r5, r6, pc}

08004644 <_ZN8touchgfx12FadeAnimatorINS_5GaugeEE15handleTickEventEv>:
    virtual void handleTickEvent()
 8004644:	b510      	push	{r4, lr}
 8004646:	4604      	mov	r4, r0
        T::handleTickEvent();
 8004648:	f00a fd98 	bl	800f17c <_ZN8touchgfx25AbstractProgressIndicator15handleTickEventEv>
        nextFadeAnimationStep();
 800464c:	4620      	mov	r0, r4
 800464e:	f7ff ff9f 	bl	8004590 <_ZN8touchgfx12FadeAnimatorINS_5GaugeEE21nextFadeAnimationStepEv>
    }
 8004652:	bd10      	pop	{r4, pc}

08004654 <_ZN23graphing_ScreenViewBase29animationEndedCallbackHandlerERKN8touchgfx13AnimatedImageE>:
{
 8004654:	b538      	push	{r3, r4, r5, lr}
    if (&src == &car)
 8004656:	f500 7314 	add.w	r3, r0, #592	@ 0x250
{
 800465a:	4604      	mov	r4, r0
    if (&src == &car)
 800465c:	428b      	cmp	r3, r1
 800465e:	d12c      	bne.n	80046ba <_ZN23graphing_ScreenViewBase29animationEndedCallbackHandlerERKN8touchgfx13AnimatedImageE+0x66>
        fadeAnimationEndedCallback = 0;
 8004660:	2300      	movs	r3, #0
        gauge1.startFadeAnimation(255, 30, touchgfx::EasingEquations::linearEaseIn);
 8004662:	f500 7574 	add.w	r5, r0, #976	@ 0x3d0
 8004666:	f8c0 3580 	str.w	r3, [r0, #1408]	@ 0x580
        if (!fadeAnimationRunning)
 800466a:	f890 3570 	ldrb.w	r3, [r0, #1392]	@ 0x570
 800466e:	b92b      	cbnz	r3, 800467c <_ZN23graphing_ScreenViewBase29animationEndedCallbackHandlerERKN8touchgfx13AnimatedImageE+0x28>
            Application::getInstance()->registerTimerWidget(this);
 8004670:	f012 ffae 	bl	80175d0 <_ZN8touchgfx11Application11getInstanceEv>
        timerWidgets.add(w);
 8004674:	4629      	mov	r1, r5
 8004676:	3004      	adds	r0, #4
 8004678:	f013 f878 	bl	801776c <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE>
        fadeAnimationCounter = 0;
 800467c:	2300      	movs	r3, #0
        fadeAnimationStartAlpha = T::getAlpha();
 800467e:	4628      	mov	r0, r5
        fadeAnimationCounter = 0;
 8004680:	f8a4 3572 	strh.w	r3, [r4, #1394]	@ 0x572
        fadeAnimationStartAlpha = T::getAlpha();
 8004684:	f00a fceb 	bl	800f05e <_ZNK8touchgfx25AbstractProgressIndicator8getAlphaEv>
        fadeAnimationEndAlpha = endAlpha;
 8004688:	23ff      	movs	r3, #255	@ 0xff
        fadeAnimationStartAlpha = T::getAlpha();
 800468a:	f8a4 0578 	strh.w	r0, [r4, #1400]	@ 0x578
        fadeAnimationEndAlpha = endAlpha;
 800468e:	f8a4 357a 	strh.w	r3, [r4, #1402]	@ 0x57a
        fadeAnimationDuration = duration;
 8004692:	231e      	movs	r3, #30
 8004694:	f8a4 3576 	strh.w	r3, [r4, #1398]	@ 0x576
        fadeAnimationAlphaEquation = alphaProgressionEquation;
 8004698:	4b08      	ldr	r3, [pc, #32]	@ (80046bc <_ZN23graphing_ScreenViewBase29animationEndedCallbackHandlerERKN8touchgfx13AnimatedImageE+0x68>)
 800469a:	f8c4 357c 	str.w	r3, [r4, #1404]	@ 0x57c
        fadeAnimationRunning = true;
 800469e:	2301      	movs	r3, #1
 80046a0:	f884 3570 	strb.w	r3, [r4, #1392]	@ 0x570
        if (fadeAnimationDelay == 0 && fadeAnimationDuration == 0)
 80046a4:	f8d4 3574 	ldr.w	r3, [r4, #1396]	@ 0x574
 80046a8:	b913      	cbnz	r3, 80046b0 <_ZN23graphing_ScreenViewBase29animationEndedCallbackHandlerERKN8touchgfx13AnimatedImageE+0x5c>
            nextFadeAnimationStep(); // Set end alpha and shut down
 80046aa:	4628      	mov	r0, r5
 80046ac:	f7ff ff70 	bl	8004590 <_ZN8touchgfx12FadeAnimatorINS_5GaugeEE21nextFadeAnimationStepEv>
        gauge1.setFadeAnimationEndedAction(interaction2EndedCallback);
 80046b0:	f504 5374 	add.w	r3, r4, #15616	@ 0x3d00
 80046b4:	333c      	adds	r3, #60	@ 0x3c
        fadeAnimationEndedCallback = &callback;
 80046b6:	f8c4 3580 	str.w	r3, [r4, #1408]	@ 0x580
}
 80046ba:	bd38      	pop	{r3, r4, r5, pc}
 80046bc:	0801996d 	.word	0x0801996d

080046c0 <_ZN8touchgfx12FadeAnimatorINS_5ImageEE21nextFadeAnimationStepEv>:
        if (fadeAnimationRunning)
 80046c0:	f890 3029 	ldrb.w	r3, [r0, #41]	@ 0x29
    void nextFadeAnimationStep()
 80046c4:	b570      	push	{r4, r5, r6, lr}
 80046c6:	4604      	mov	r4, r0
        if (fadeAnimationRunning)
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d040      	beq.n	800474e <_ZN8touchgfx12FadeAnimatorINS_5ImageEE21nextFadeAnimationStepEv+0x8e>
            fadeAnimationCounter++;
 80046cc:	8d40      	ldrh	r0, [r0, #42]	@ 0x2a
            if (fadeAnimationCounter >= fadeAnimationDelay)
 80046ce:	8da3      	ldrh	r3, [r4, #44]	@ 0x2c
            fadeAnimationCounter++;
 80046d0:	3001      	adds	r0, #1
 80046d2:	b280      	uxth	r0, r0
            if (fadeAnimationCounter >= fadeAnimationDelay)
 80046d4:	4298      	cmp	r0, r3
            fadeAnimationCounter++;
 80046d6:	8560      	strh	r0, [r4, #42]	@ 0x2a
            if (fadeAnimationCounter >= fadeAnimationDelay)
 80046d8:	d339      	bcc.n	800474e <_ZN8touchgfx12FadeAnimatorINS_5ImageEE21nextFadeAnimationStepEv+0x8e>
                int16_t newAlpha = fadeAnimationStartAlpha + (int16_t)fadeAnimationAlphaEquation(actualAnimationCounter, 0, fadeAnimationEndAlpha - fadeAnimationStartAlpha, fadeAnimationDuration);
 80046da:	8e25      	ldrh	r5, [r4, #48]	@ 0x30
 80046dc:	1ac0      	subs	r0, r0, r3
 80046de:	8e62      	ldrh	r2, [r4, #50]	@ 0x32
 80046e0:	2100      	movs	r1, #0
 80046e2:	8de3      	ldrh	r3, [r4, #46]	@ 0x2e
 80046e4:	b280      	uxth	r0, r0
 80046e6:	1b52      	subs	r2, r2, r5
 80046e8:	6b66      	ldr	r6, [r4, #52]	@ 0x34
 80046ea:	b212      	sxth	r2, r2
 80046ec:	47b0      	blx	r6
 80046ee:	4405      	add	r5, r0
                if (T::getAlpha() != newAlpha)
 80046f0:	f894 2028 	ldrb.w	r2, [r4, #40]	@ 0x28
                int16_t newAlpha = fadeAnimationStartAlpha + (int16_t)fadeAnimationAlphaEquation(actualAnimationCounter, 0, fadeAnimationEndAlpha - fadeAnimationStartAlpha, fadeAnimationDuration);
 80046f4:	b2ab      	uxth	r3, r5
 80046f6:	b22d      	sxth	r5, r5
                if (T::getAlpha() != newAlpha)
 80046f8:	42aa      	cmp	r2, r5
 80046fa:	d005      	beq.n	8004708 <_ZN8touchgfx12FadeAnimatorINS_5ImageEE21nextFadeAnimationStepEv+0x48>
                    if (newAlpha == 0)
 80046fc:	bb0d      	cbnz	r5, 8004742 <_ZN8touchgfx12FadeAnimatorINS_5ImageEE21nextFadeAnimationStepEv+0x82>
                        T::invalidateContent();
 80046fe:	4620      	mov	r0, r4
 8004700:	f7ff fe72 	bl	80043e8 <_ZNK8touchgfx5Image17invalidateContentEv>
        alpha = newAlpha;
 8004704:	f884 5028 	strb.w	r5, [r4, #40]	@ 0x28
                if (fadeAnimationCounter >= (uint32_t)(fadeAnimationDelay + fadeAnimationDuration))
 8004708:	8da3      	ldrh	r3, [r4, #44]	@ 0x2c
 800470a:	8de1      	ldrh	r1, [r4, #46]	@ 0x2e
 800470c:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 800470e:	440b      	add	r3, r1
 8004710:	429a      	cmp	r2, r3
 8004712:	d31c      	bcc.n	800474e <_ZN8touchgfx12FadeAnimatorINS_5ImageEE21nextFadeAnimationStepEv+0x8e>
                    fadeAnimationRunning = false;
 8004714:	2300      	movs	r3, #0
 8004716:	f884 3029 	strb.w	r3, [r4, #41]	@ 0x29
                    fadeAnimationDuration = 0;
 800471a:	85e3      	strh	r3, [r4, #46]	@ 0x2e
                    Application::getInstance()->unregisterTimerWidget(this);
 800471c:	f012 ff58 	bl	80175d0 <_ZN8touchgfx11Application11getInstanceEv>
        timerWidgets.remove(w);
 8004720:	4621      	mov	r1, r4
 8004722:	3004      	adds	r0, #4
 8004724:	f012 ff79 	bl	801761a <_ZN8touchgfx11Application12TimerWidgets6removeEPKNS_8DrawableE>
                    if (fadeAnimationEndedCallback && fadeAnimationEndedCallback->isValid())
 8004728:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 800472a:	b180      	cbz	r0, 800474e <_ZN8touchgfx12FadeAnimatorINS_5ImageEE21nextFadeAnimationStepEv+0x8e>
 800472c:	6803      	ldr	r3, [r0, #0]
 800472e:	68db      	ldr	r3, [r3, #12]
 8004730:	4798      	blx	r3
 8004732:	b160      	cbz	r0, 800474e <_ZN8touchgfx12FadeAnimatorINS_5ImageEE21nextFadeAnimationStepEv+0x8e>
                        fadeAnimationEndedCallback->execute(*this);
 8004734:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8004736:	4621      	mov	r1, r4
 8004738:	6803      	ldr	r3, [r0, #0]
    }
 800473a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
                        fadeAnimationEndedCallback->execute(*this);
 800473e:	689b      	ldr	r3, [r3, #8]
 8004740:	4718      	bx	r3
                        T::invalidateContent();
 8004742:	4620      	mov	r0, r4
                        T::setAlpha((uint8_t)newAlpha);
 8004744:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
                        T::invalidateContent();
 8004748:	f7ff fe4e 	bl	80043e8 <_ZNK8touchgfx5Image17invalidateContentEv>
 800474c:	e7dc      	b.n	8004708 <_ZN8touchgfx12FadeAnimatorINS_5ImageEE21nextFadeAnimationStepEv+0x48>
    }
 800474e:	bd70      	pop	{r4, r5, r6, pc}

08004750 <_ZN8touchgfx12FadeAnimatorINS_5ImageEE15handleTickEventEv>:
    virtual void handleTickEvent()
 8004750:	b508      	push	{r3, lr}
        nextFadeAnimationStep();
 8004752:	f7ff ffb5 	bl	80046c0 <_ZN8touchgfx12FadeAnimatorINS_5ImageEE21nextFadeAnimationStepEv>
    }
 8004756:	bd08      	pop	{r3, pc}

08004758 <_ZN23graphing_ScreenViewBase32interaction2EndedCallbackHandlerERKN8touchgfx12FadeAnimatorINS0_5GaugeEEE>:
{
 8004758:	b538      	push	{r3, r4, r5, lr}
        fadeAnimationEndedCallback = 0;
 800475a:	2300      	movs	r3, #0
 800475c:	4604      	mov	r4, r0
    background.startFadeAnimation(255, 15, touchgfx::EasingEquations::linearEaseIn);
 800475e:	f100 05f0 	add.w	r5, r0, #240	@ 0xf0
 8004762:	f8c0 3128 	str.w	r3, [r0, #296]	@ 0x128
        if (!fadeAnimationRunning)
 8004766:	f890 3119 	ldrb.w	r3, [r0, #281]	@ 0x119
 800476a:	b92b      	cbnz	r3, 8004778 <_ZN23graphing_ScreenViewBase32interaction2EndedCallbackHandlerERKN8touchgfx12FadeAnimatorINS0_5GaugeEEE+0x20>
            Application::getInstance()->registerTimerWidget(this);
 800476c:	f012 ff30 	bl	80175d0 <_ZN8touchgfx11Application11getInstanceEv>
        timerWidgets.add(w);
 8004770:	4629      	mov	r1, r5
 8004772:	3004      	adds	r0, #4
 8004774:	f012 fffa 	bl	801776c <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE>
        fadeAnimationCounter = 0;
 8004778:	2300      	movs	r3, #0
 800477a:	f8a4 311a 	strh.w	r3, [r4, #282]	@ 0x11a
        fadeAnimationStartAlpha = T::getAlpha();
 800477e:	f894 3118 	ldrb.w	r3, [r4, #280]	@ 0x118
 8004782:	f8a4 3120 	strh.w	r3, [r4, #288]	@ 0x120
        fadeAnimationEndAlpha = endAlpha;
 8004786:	23ff      	movs	r3, #255	@ 0xff
 8004788:	f8a4 3122 	strh.w	r3, [r4, #290]	@ 0x122
        fadeAnimationDuration = duration;
 800478c:	230f      	movs	r3, #15
 800478e:	f8a4 311e 	strh.w	r3, [r4, #286]	@ 0x11e
        fadeAnimationAlphaEquation = alphaProgressionEquation;
 8004792:	4b09      	ldr	r3, [pc, #36]	@ (80047b8 <_ZN23graphing_ScreenViewBase32interaction2EndedCallbackHandlerERKN8touchgfx12FadeAnimatorINS0_5GaugeEEE+0x60>)
 8004794:	f8c4 3124 	str.w	r3, [r4, #292]	@ 0x124
        fadeAnimationRunning = true;
 8004798:	2301      	movs	r3, #1
 800479a:	f884 3119 	strb.w	r3, [r4, #281]	@ 0x119
        if (fadeAnimationDelay == 0 && fadeAnimationDuration == 0)
 800479e:	f8d4 311c 	ldr.w	r3, [r4, #284]	@ 0x11c
 80047a2:	b913      	cbnz	r3, 80047aa <_ZN23graphing_ScreenViewBase32interaction2EndedCallbackHandlerERKN8touchgfx12FadeAnimatorINS0_5GaugeEEE+0x52>
            nextFadeAnimationStep(); // Set end alpha and shut down
 80047a4:	4628      	mov	r0, r5
 80047a6:	f7ff ff8b 	bl	80046c0 <_ZN8touchgfx12FadeAnimatorINS_5ImageEE21nextFadeAnimationStepEv>
    background.setFadeAnimationEndedAction(interaction3EndedCallback);
 80047aa:	f504 5375 	add.w	r3, r4, #15680	@ 0x3d40
 80047ae:	330c      	adds	r3, #12
        fadeAnimationEndedCallback = &callback;
 80047b0:	f8c4 3128 	str.w	r3, [r4, #296]	@ 0x128
}
 80047b4:	bd38      	pop	{r3, r4, r5, pc}
 80047b6:	bf00      	nop
 80047b8:	0801996d 	.word	0x0801996d

080047bc <_ZN8touchgfx12MoveAnimatorINS_5ImageEE21nextMoveAnimationStepEv>:

protected:
    /** Execute next step in move animation and stop the timer if the animation has finished. */
    void nextMoveAnimationStep()
    {
        if (moveAnimationRunning)
 80047bc:	f890 3029 	ldrb.w	r3, [r0, #41]	@ 0x29
    void nextMoveAnimationStep()
 80047c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80047c4:	4604      	mov	r4, r0
        if (moveAnimationRunning)
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d041      	beq.n	800484e <_ZN8touchgfx12MoveAnimatorINS_5ImageEE21nextMoveAnimationStepEv+0x92>
        {
            moveAnimationCounter++;
 80047ca:	8d43      	ldrh	r3, [r0, #42]	@ 0x2a
            if (moveAnimationCounter >= moveAnimationDelay)
 80047cc:	8d82      	ldrh	r2, [r0, #44]	@ 0x2c
            moveAnimationCounter++;
 80047ce:	3301      	adds	r3, #1
 80047d0:	b29b      	uxth	r3, r3
            if (moveAnimationCounter >= moveAnimationDelay)
 80047d2:	4293      	cmp	r3, r2
            moveAnimationCounter++;
 80047d4:	8543      	strh	r3, [r0, #42]	@ 0x2a
            if (moveAnimationCounter >= moveAnimationDelay)
 80047d6:	d33a      	bcc.n	800484e <_ZN8touchgfx12MoveAnimatorINS_5ImageEE21nextMoveAnimationStepEv+0x92>
            {
                // Adjust the used animationCounter for the startup delay
                uint32_t actualAnimationCounter = moveAnimationCounter - moveAnimationDelay;

                int16_t deltaX = moveAnimationXEquation(actualAnimationCounter, 0, moveAnimationEndX - moveAnimationStartX, moveAnimationDuration);
 80047d8:	1a9b      	subs	r3, r3, r2
 80047da:	8e82      	ldrh	r2, [r0, #52]	@ 0x34
 80047dc:	6b86      	ldr	r6, [r0, #56]	@ 0x38
 80047de:	2100      	movs	r1, #0
 80047e0:	b29d      	uxth	r5, r3
 80047e2:	8e03      	ldrh	r3, [r0, #48]	@ 0x30
 80047e4:	1ad2      	subs	r2, r2, r3
 80047e6:	8dc3      	ldrh	r3, [r0, #46]	@ 0x2e
 80047e8:	4628      	mov	r0, r5
 80047ea:	b212      	sxth	r2, r2
 80047ec:	47b0      	blx	r6
                int16_t deltaY = moveAnimationYEquation(actualAnimationCounter, 0, moveAnimationEndY - moveAnimationStartY, moveAnimationDuration);
 80047ee:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 80047f0:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
                int16_t deltaX = moveAnimationXEquation(actualAnimationCounter, 0, moveAnimationEndX - moveAnimationStartX, moveAnimationDuration);
 80047f2:	4606      	mov	r6, r0
                int16_t deltaY = moveAnimationYEquation(actualAnimationCounter, 0, moveAnimationEndY - moveAnimationStartY, moveAnimationDuration);
 80047f4:	2100      	movs	r1, #0
 80047f6:	6be7      	ldr	r7, [r4, #60]	@ 0x3c
 80047f8:	1ad2      	subs	r2, r2, r3
 80047fa:	4628      	mov	r0, r5
 80047fc:	8de3      	ldrh	r3, [r4, #46]	@ 0x2e
 80047fe:	b212      	sxth	r2, r2
 8004800:	47b8      	blx	r7

                T::moveTo(moveAnimationStartX + deltaX, moveAnimationStartY + deltaY);
 8004802:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 8004804:	18c2      	adds	r2, r0, r3
 8004806:	8e23      	ldrh	r3, [r4, #48]	@ 0x30
 8004808:	4620      	mov	r0, r4
 800480a:	18f1      	adds	r1, r6, r3
 800480c:	b212      	sxth	r2, r2
 800480e:	b209      	sxth	r1, r1
 8004810:	f7fe fd0d 	bl	800322e <_ZN8touchgfx8Drawable6moveToEss>

                if (moveAnimationCounter >= (uint32_t)(moveAnimationDelay + moveAnimationDuration))
 8004814:	8da3      	ldrh	r3, [r4, #44]	@ 0x2c
 8004816:	8de1      	ldrh	r1, [r4, #46]	@ 0x2e
 8004818:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 800481a:	440b      	add	r3, r1
 800481c:	429a      	cmp	r2, r3
 800481e:	d316      	bcc.n	800484e <_ZN8touchgfx12MoveAnimatorINS_5ImageEE21nextMoveAnimationStepEv+0x92>
                {
                    // End of animation
                    moveAnimationRunning = false;
 8004820:	2300      	movs	r3, #0
 8004822:	f884 3029 	strb.w	r3, [r4, #41]	@ 0x29
                    moveAnimationCounter = 0;
 8004826:	8563      	strh	r3, [r4, #42]	@ 0x2a
                    Application::getInstance()->unregisterTimerWidget(this);
 8004828:	f012 fed2 	bl	80175d0 <_ZN8touchgfx11Application11getInstanceEv>
        timerWidgets.remove(w);
 800482c:	4621      	mov	r1, r4
 800482e:	3004      	adds	r0, #4
 8004830:	f012 fef3 	bl	801761a <_ZN8touchgfx11Application12TimerWidgets6removeEPKNS_8DrawableE>

                    if (moveAnimationEndedCallback && moveAnimationEndedCallback->isValid())
 8004834:	6c20      	ldr	r0, [r4, #64]	@ 0x40
 8004836:	b150      	cbz	r0, 800484e <_ZN8touchgfx12MoveAnimatorINS_5ImageEE21nextMoveAnimationStepEv+0x92>
 8004838:	6803      	ldr	r3, [r0, #0]
 800483a:	68db      	ldr	r3, [r3, #12]
 800483c:	4798      	blx	r3
 800483e:	b130      	cbz	r0, 800484e <_ZN8touchgfx12MoveAnimatorINS_5ImageEE21nextMoveAnimationStepEv+0x92>
                    {
                        moveAnimationEndedCallback->execute(*this);
 8004840:	6c20      	ldr	r0, [r4, #64]	@ 0x40
 8004842:	4621      	mov	r1, r4
 8004844:	6803      	ldr	r3, [r0, #0]
                    }
                }
            }
        }
    }
 8004846:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
                        moveAnimationEndedCallback->execute(*this);
 800484a:	689b      	ldr	r3, [r3, #8]
 800484c:	4718      	bx	r3
    }
 800484e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08004852 <_ZN8touchgfx12FadeAnimatorINS_12MoveAnimatorINS_5ImageEEEE15handleTickEventEv>:
    virtual void handleTickEvent()
 8004852:	b570      	push	{r4, r5, r6, lr}
 8004854:	4604      	mov	r4, r0
        nextMoveAnimationStep();
 8004856:	f7ff ffb1 	bl	80047bc <_ZN8touchgfx12MoveAnimatorINS_5ImageEE21nextMoveAnimationStepEv>
        if (fadeAnimationRunning)
 800485a:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800485e:	2b00      	cmp	r3, #0
 8004860:	d04a      	beq.n	80048f8 <_ZN8touchgfx12FadeAnimatorINS_12MoveAnimatorINS_5ImageEEEE15handleTickEventEv+0xa6>
            fadeAnimationCounter++;
 8004862:	f8b4 0046 	ldrh.w	r0, [r4, #70]	@ 0x46
            if (fadeAnimationCounter >= fadeAnimationDelay)
 8004866:	f8b4 3048 	ldrh.w	r3, [r4, #72]	@ 0x48
            fadeAnimationCounter++;
 800486a:	3001      	adds	r0, #1
 800486c:	b280      	uxth	r0, r0
            if (fadeAnimationCounter >= fadeAnimationDelay)
 800486e:	4298      	cmp	r0, r3
            fadeAnimationCounter++;
 8004870:	f8a4 0046 	strh.w	r0, [r4, #70]	@ 0x46
            if (fadeAnimationCounter >= fadeAnimationDelay)
 8004874:	d340      	bcc.n	80048f8 <_ZN8touchgfx12FadeAnimatorINS_12MoveAnimatorINS_5ImageEEEE15handleTickEventEv+0xa6>
                int16_t newAlpha = fadeAnimationStartAlpha + (int16_t)fadeAnimationAlphaEquation(actualAnimationCounter, 0, fadeAnimationEndAlpha - fadeAnimationStartAlpha, fadeAnimationDuration);
 8004876:	f8b4 504c 	ldrh.w	r5, [r4, #76]	@ 0x4c
 800487a:	1ac0      	subs	r0, r0, r3
 800487c:	f8b4 204e 	ldrh.w	r2, [r4, #78]	@ 0x4e
 8004880:	2100      	movs	r1, #0
 8004882:	f8b4 304a 	ldrh.w	r3, [r4, #74]	@ 0x4a
 8004886:	b280      	uxth	r0, r0
 8004888:	1b52      	subs	r2, r2, r5
 800488a:	6d26      	ldr	r6, [r4, #80]	@ 0x50
 800488c:	b212      	sxth	r2, r2
 800488e:	47b0      	blx	r6
 8004890:	4405      	add	r5, r0
                if (T::getAlpha() != newAlpha)
 8004892:	f894 2028 	ldrb.w	r2, [r4, #40]	@ 0x28
                int16_t newAlpha = fadeAnimationStartAlpha + (int16_t)fadeAnimationAlphaEquation(actualAnimationCounter, 0, fadeAnimationEndAlpha - fadeAnimationStartAlpha, fadeAnimationDuration);
 8004896:	b2ab      	uxth	r3, r5
 8004898:	b22d      	sxth	r5, r5
                if (T::getAlpha() != newAlpha)
 800489a:	42aa      	cmp	r2, r5
 800489c:	d005      	beq.n	80048aa <_ZN8touchgfx12FadeAnimatorINS_12MoveAnimatorINS_5ImageEEEE15handleTickEventEv+0x58>
                    if (newAlpha == 0)
 800489e:	bb2d      	cbnz	r5, 80048ec <_ZN8touchgfx12FadeAnimatorINS_12MoveAnimatorINS_5ImageEEEE15handleTickEventEv+0x9a>
                        T::invalidateContent();
 80048a0:	4620      	mov	r0, r4
 80048a2:	f7ff fda1 	bl	80043e8 <_ZNK8touchgfx5Image17invalidateContentEv>
 80048a6:	f884 5028 	strb.w	r5, [r4, #40]	@ 0x28
                if (fadeAnimationCounter >= (uint32_t)(fadeAnimationDelay + fadeAnimationDuration))
 80048aa:	f8b4 3048 	ldrh.w	r3, [r4, #72]	@ 0x48
 80048ae:	f8b4 104a 	ldrh.w	r1, [r4, #74]	@ 0x4a
 80048b2:	f8b4 2046 	ldrh.w	r2, [r4, #70]	@ 0x46
 80048b6:	440b      	add	r3, r1
 80048b8:	429a      	cmp	r2, r3
 80048ba:	d31d      	bcc.n	80048f8 <_ZN8touchgfx12FadeAnimatorINS_12MoveAnimatorINS_5ImageEEEE15handleTickEventEv+0xa6>
                    fadeAnimationRunning = false;
 80048bc:	2300      	movs	r3, #0
 80048be:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
                    fadeAnimationDuration = 0;
 80048c2:	f8a4 304a 	strh.w	r3, [r4, #74]	@ 0x4a
                    Application::getInstance()->unregisterTimerWidget(this);
 80048c6:	f012 fe83 	bl	80175d0 <_ZN8touchgfx11Application11getInstanceEv>
 80048ca:	4621      	mov	r1, r4
 80048cc:	3004      	adds	r0, #4
 80048ce:	f012 fea4 	bl	801761a <_ZN8touchgfx11Application12TimerWidgets6removeEPKNS_8DrawableE>
                    if (fadeAnimationEndedCallback && fadeAnimationEndedCallback->isValid())
 80048d2:	6d60      	ldr	r0, [r4, #84]	@ 0x54
 80048d4:	b180      	cbz	r0, 80048f8 <_ZN8touchgfx12FadeAnimatorINS_12MoveAnimatorINS_5ImageEEEE15handleTickEventEv+0xa6>
 80048d6:	6803      	ldr	r3, [r0, #0]
 80048d8:	68db      	ldr	r3, [r3, #12]
 80048da:	4798      	blx	r3
 80048dc:	b160      	cbz	r0, 80048f8 <_ZN8touchgfx12FadeAnimatorINS_12MoveAnimatorINS_5ImageEEEE15handleTickEventEv+0xa6>
                        fadeAnimationEndedCallback->execute(*this);
 80048de:	6d60      	ldr	r0, [r4, #84]	@ 0x54
 80048e0:	4621      	mov	r1, r4
 80048e2:	6803      	ldr	r3, [r0, #0]
    }
 80048e4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
                        fadeAnimationEndedCallback->execute(*this);
 80048e8:	689b      	ldr	r3, [r3, #8]
 80048ea:	4718      	bx	r3
                        T::invalidateContent();
 80048ec:	4620      	mov	r0, r4
                        T::setAlpha((uint8_t)newAlpha);
 80048ee:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
                        T::invalidateContent();
 80048f2:	f7ff fd79 	bl	80043e8 <_ZNK8touchgfx5Image17invalidateContentEv>
 80048f6:	e7d8      	b.n	80048aa <_ZN8touchgfx12FadeAnimatorINS_12MoveAnimatorINS_5ImageEEEE15handleTickEventEv+0x58>
    }
 80048f8:	bd70      	pop	{r4, r5, r6, pc}
	...

080048fc <_ZN23graphing_ScreenViewBaseC1Ev>:
graphing_ScreenViewBase::graphing_ScreenViewBase() :
 80048fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004900:	4604      	mov	r4, r0
 8004902:	b0a1      	sub	sp, #132	@ 0x84
        : presenter(0)
 8004904:	2500      	movs	r5, #0
 8004906:	f014 fde1 	bl	80194cc <_ZN8touchgfx6ScreenC1Ev>
    sliderValueChangedCallback(this, &graphing_ScreenViewBase::sliderValueChangedCallbackHandler)
 800490a:	46a0      	mov	r8, r4
 800490c:	4bdd      	ldr	r3, [pc, #884]	@ (8004c84 <_ZN23graphing_ScreenViewBaseC1Ev+0x388>)
 800490e:	63e5      	str	r5, [r4, #60]	@ 0x3c
        : bitmapId(id)
 8004910:	f64f 79ff 	movw	r9, #65535	@ 0xffff
 8004914:	f848 3b40 	str.w	r3, [r8], #64
 8004918:	4640      	mov	r0, r8
 800491a:	f7ff fa45 	bl	8003da8 <_ZN8touchgfx3BoxC1Ev>
 800491e:	f104 036c 	add.w	r3, r4, #108	@ 0x6c
 8004922:	f504 7a09 	add.w	sl, r4, #548	@ 0x224
 8004926:	f504 7714 	add.w	r7, r4, #592	@ 0x250
 800492a:	4618      	mov	r0, r3
 800492c:	9313      	str	r3, [sp, #76]	@ 0x4c
 800492e:	f7ff fdc3 	bl	80044b8 <_ZN8touchgfx9ContainerC1Ev>
 8004932:	f104 0398 	add.w	r3, r4, #152	@ 0x98
 8004936:	f504 7674 	add.w	r6, r4, #976	@ 0x3d0
     * @note Must not be called with a Drawable that was already added to the screen. If in doubt,
     *       call remove() first.
     */
    void add(Drawable& d)
    {
        container.add(d);
 800493a:	f104 0b04 	add.w	fp, r4, #4
 800493e:	4618      	mov	r0, r3
 8004940:	9314      	str	r3, [sp, #80]	@ 0x50
 8004942:	f7ff fa31 	bl	8003da8 <_ZN8touchgfx3BoxC1Ev>
 8004946:	f104 03c4 	add.w	r3, r4, #196	@ 0xc4
 800494a:	4618      	mov	r0, r3
 800494c:	9315      	str	r3, [sp, #84]	@ 0x54
 800494e:	f7ff fa2b 	bl	8003da8 <_ZN8touchgfx3BoxC1Ev>
 8004952:	f104 03f0 	add.w	r3, r4, #240	@ 0xf0
          fadeAnimationEndedCallback(0)
 8004956:	a91e      	add	r1, sp, #120	@ 0x78
 8004958:	f8ad 9078 	strh.w	r9, [sp, #120]	@ 0x78
 800495c:	4618      	mov	r0, r3
 800495e:	930e      	str	r3, [sp, #56]	@ 0x38
 8004960:	f7ff fdce 	bl	8004500 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 8004964:	4bc8      	ldr	r3, [pc, #800]	@ (8004c88 <_ZN23graphing_ScreenViewBaseC1Ev+0x38c>)
          fadeAnimationRunning(false),
 8004966:	f884 5119 	strb.w	r5, [r4, #281]	@ 0x119
          fadeAnimationEndedCallback(0)
 800496a:	f8c4 30f0 	str.w	r3, [r4, #240]	@ 0xf0
 800496e:	f504 7396 	add.w	r3, r4, #300	@ 0x12c
          fadeAnimationCounter(0),
 8004972:	f8a4 511a 	strh.w	r5, [r4, #282]	@ 0x11a
 8004976:	4618      	mov	r0, r3
          fadeAnimationDelay(0),
 8004978:	f8a4 511c 	strh.w	r5, [r4, #284]	@ 0x11c
          fadeAnimationEndedCallback(0)
 800497c:	f8c4 5128 	str.w	r5, [r4, #296]	@ 0x128
 8004980:	9303      	str	r3, [sp, #12]
 8004982:	f00b fcfb 	bl	801037c <_ZN8touchgfx14SwipeContainerC1Ev>
 8004986:	4650      	mov	r0, sl
 8004988:	f7ff fd96 	bl	80044b8 <_ZN8touchgfx9ContainerC1Ev>
          endId(BITMAP_INVALID),
          updateTicksInterval(updateInterval),
          ticksSinceUpdate(0),
          reverse(false),
          loopAnimation(false),
          running(false)
 800498c:	a91e      	add	r1, sp, #120	@ 0x78
 800498e:	4638      	mov	r0, r7
 8004990:	f8ad 9078 	strh.w	r9, [sp, #120]	@ 0x78
 8004994:	f7ff fdb4 	bl	8004500 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 8004998:	4bbc      	ldr	r3, [pc, #752]	@ (8004c8c <_ZN23graphing_ScreenViewBaseC1Ev+0x390>)
          updateTicksInterval(updateInterval),
 800499a:	f04f 32ff 	mov.w	r2, #4294967295
          moveAnimationEndedCallback(0)
 800499e:	a91e      	add	r1, sp, #120	@ 0x78
          running(false)
 80049a0:	f8c4 3250 	str.w	r3, [r4, #592]	@ 0x250
          updateTicksInterval(updateInterval),
 80049a4:	2301      	movs	r3, #1
        : animationDoneAction(0),
 80049a6:	f8c4 527c 	str.w	r5, [r4, #636]	@ 0x27c
          running(false)
 80049aa:	f884 5288 	strb.w	r5, [r4, #648]	@ 0x288
          updateTicksInterval(updateInterval),
 80049ae:	e9c4 23a0 	strd	r2, r3, [r4, #640]	@ 0x280
 80049b2:	f504 7323 	add.w	r3, r4, #652	@ 0x28c
 80049b6:	930f      	str	r3, [sp, #60]	@ 0x3c
 80049b8:	f04f 33ff 	mov.w	r3, #4294967295
 80049bc:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 80049be:	f8ad 3078 	strh.w	r3, [sp, #120]	@ 0x78
 80049c2:	f7ff fd9d 	bl	8004500 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 80049c6:	4bb2      	ldr	r3, [pc, #712]	@ (8004c90 <_ZN23graphing_ScreenViewBaseC1Ev+0x394>)
 80049c8:	a91e      	add	r1, sp, #120	@ 0x78
          moveAnimationRunning(false),
 80049ca:	f884 52b5 	strb.w	r5, [r4, #693]	@ 0x2b5
 80049ce:	f8c4 328c 	str.w	r3, [r4, #652]	@ 0x28c
 80049d2:	f504 7339 	add.w	r3, r4, #740	@ 0x2e4
          moveAnimationCounter(0),
 80049d6:	f8a4 52b6 	strh.w	r5, [r4, #694]	@ 0x2b6
 80049da:	4618      	mov	r0, r3
          fadeAnimationRunning(false),
 80049dc:	f884 52d0 	strb.w	r5, [r4, #720]	@ 0x2d0
          fadeAnimationCounter(0),
 80049e0:	f8a4 52d2 	strh.w	r5, [r4, #722]	@ 0x2d2
          fadeAnimationDelay(0),
 80049e4:	f8a4 52d4 	strh.w	r5, [r4, #724]	@ 0x2d4
          fadeAnimationEndedCallback(0)
 80049e8:	f8c4 52e0 	str.w	r5, [r4, #736]	@ 0x2e0
 80049ec:	9310      	str	r3, [sp, #64]	@ 0x40
 80049ee:	f8ad 9078 	strh.w	r9, [sp, #120]	@ 0x78
          moveAnimationStartX(0),
 80049f2:	e9c4 55ae 	strd	r5, r5, [r4, #696]	@ 0x2b8
          moveAnimationXEquation(),
 80049f6:	e9c4 55b0 	strd	r5, r5, [r4, #704]	@ 0x2c0
          moveAnimationEndedCallback(0)
 80049fa:	e9c4 55b2 	strd	r5, r5, [r4, #712]	@ 0x2c8
 80049fe:	f7ff fd7f 	bl	8004500 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 8004a02:	f504 7344 	add.w	r3, r4, #784	@ 0x310
 8004a06:	a91e      	add	r1, sp, #120	@ 0x78
 8004a08:	f8ad 9078 	strh.w	r9, [sp, #120]	@ 0x78
 8004a0c:	4618      	mov	r0, r3
 8004a0e:	9311      	str	r3, [sp, #68]	@ 0x44
 8004a10:	f7ff fd76 	bl	8004500 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 8004a14:	f504 734f 	add.w	r3, r4, #828	@ 0x33c
 8004a18:	4618      	mov	r0, r3
 8004a1a:	9308      	str	r3, [sp, #32]
 8004a1c:	f7ff fd8a 	bl	8004534 <_ZN8touchgfx8TextAreaC1Ev>
 8004a20:	f504 7361 	add.w	r3, r4, #900	@ 0x384
 8004a24:	4618      	mov	r0, r3
 8004a26:	9309      	str	r3, [sp, #36]	@ 0x24
 8004a28:	f7ff fda6 	bl	8004578 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8004a2c:	4630      	mov	r0, r6
 8004a2e:	f00f ffdb 	bl	80149e8 <_ZN8touchgfx5GaugeC1Ev>
 8004a32:	4b98      	ldr	r3, [pc, #608]	@ (8004c94 <_ZN23graphing_ScreenViewBaseC1Ev+0x398>)
          fadeAnimationRunning(false),
 8004a34:	f884 5570 	strb.w	r5, [r4, #1392]	@ 0x570
          fadeAnimationEndedCallback(0)
 8004a38:	f8c4 33d0 	str.w	r3, [r4, #976]	@ 0x3d0
 8004a3c:	f204 5384 	addw	r3, r4, #1412	@ 0x584
          fadeAnimationCounter(0),
 8004a40:	f8a4 5572 	strh.w	r5, [r4, #1394]	@ 0x572
     * Constructor.
     *
     * @param  bmp (Optional) The bitmap to use in the painter.
     */
    PainterRGB888Bitmap(const Bitmap& bmp = Bitmap(BITMAP_INVALID))
        : AbstractPainterRGB888(), AbstractPainterBitmap(bmp)
 8004a44:	4618      	mov	r0, r3
          fadeAnimationDelay(0),
 8004a46:	f8a4 5574 	strh.w	r5, [r4, #1396]	@ 0x574
          fadeAnimationEndedCallback(0)
 8004a4a:	f8c4 5580 	str.w	r5, [r4, #1408]	@ 0x580
 8004a4e:	9316      	str	r3, [sp, #88]	@ 0x58
 8004a50:	f8ad 9078 	strh.w	r9, [sp, #120]	@ 0x78
 8004a54:	f7fe fe4e 	bl	80036f4 <_ZN8touchgfx21AbstractPainterRGB888C1Ev>
        : bitmap(bmp), bitmapFormat(), bitmapRect(), bitmapData(0), xOffset(0), yOffset(0), isTiled(false)
 8004a58:	4b8f      	ldr	r3, [pc, #572]	@ (8004c98 <_ZN23graphing_ScreenViewBaseC1Ev+0x39c>)
        setBitmap(bmp);
 8004a5a:	a91e      	add	r1, sp, #120	@ 0x78
 8004a5c:	f204 508c 	addw	r0, r4, #1420	@ 0x58c
        : bitmap(bmp), bitmapFormat(), bitmapRect(), bitmapData(0), xOffset(0), yOffset(0), isTiled(false)
 8004a60:	f884 5592 	strb.w	r5, [r4, #1426]	@ 0x592
 8004a64:	f8c4 358c 	str.w	r3, [r4, #1420]	@ 0x58c
 8004a68:	f8bd 3078 	ldrh.w	r3, [sp, #120]	@ 0x78
        : x(0), y(0), width(0), height(0)
 8004a6c:	f8c4 5594 	str.w	r5, [r4, #1428]	@ 0x594
 8004a70:	f8a4 3590 	strh.w	r3, [r4, #1424]	@ 0x590
 8004a74:	f8c4 5598 	str.w	r5, [r4, #1432]	@ 0x598
 8004a78:	f8c4 559c 	str.w	r5, [r4, #1436]	@ 0x59c
 8004a7c:	f8c4 55a0 	str.w	r5, [r4, #1440]	@ 0x5a0
 8004a80:	f884 55a4 	strb.w	r5, [r4, #1444]	@ 0x5a4
        setBitmap(bmp);
 8004a84:	f7ff fc8e 	bl	80043a4 <_ZN8touchgfx21AbstractPainterBitmap9setBitmapERKNS_6BitmapE>
 8004a88:	4b84      	ldr	r3, [pc, #528]	@ (8004c9c <_ZN23graphing_ScreenViewBaseC1Ev+0x3a0>)
 8004a8a:	f8c4 3584 	str.w	r3, [r4, #1412]	@ 0x584
 8004a8e:	3324      	adds	r3, #36	@ 0x24
 8004a90:	f8c4 358c 	str.w	r3, [r4, #1420]	@ 0x58c
 8004a94:	f204 53ac 	addw	r3, r4, #1452	@ 0x5ac
 8004a98:	4618      	mov	r0, r3
 8004a9a:	9305      	str	r3, [sp, #20]
 8004a9c:	f7ff fd0c 	bl	80044b8 <_ZN8touchgfx9ContainerC1Ev>
 8004aa0:	f504 63bb 	add.w	r3, r4, #1496	@ 0x5d8
 8004aa4:	a91e      	add	r1, sp, #120	@ 0x78
 8004aa6:	f8ad 9078 	strh.w	r9, [sp, #120]	@ 0x78
 8004aaa:	4618      	mov	r0, r3
 8004aac:	9312      	str	r3, [sp, #72]	@ 0x48
 8004aae:	f7ff fd27 	bl	8004500 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 8004ab2:	f204 6304 	addw	r3, r4, #1540	@ 0x604
    __background.setPosition(0, 0, 800, 480);
 8004ab6:	f44f 79f0 	mov.w	r9, #480	@ 0x1e0
    sliderValueChangedCallback(this, &graphing_ScreenViewBase::sliderValueChangedCallbackHandler)
 8004aba:	4618      	mov	r0, r3
 8004abc:	930a      	str	r3, [sp, #40]	@ 0x28
 8004abe:	f7ff fd5b 	bl	8004578 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8004ac2:	f504 63ca 	add.w	r3, r4, #1616	@ 0x650
 8004ac6:	4618      	mov	r0, r3
 8004ac8:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004aca:	f7ff fd55 	bl	8004578 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8004ace:	f204 639c 	addw	r3, r4, #1692	@ 0x69c
 8004ad2:	4618      	mov	r0, r3
 8004ad4:	930c      	str	r3, [sp, #48]	@ 0x30
 8004ad6:	f7ff fd4f 	bl	8004578 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8004ada:	f504 63dd 	add.w	r3, r4, #1768	@ 0x6e8
 8004ade:	4618      	mov	r0, r3
 8004ae0:	930d      	str	r3, [sp, #52]	@ 0x34
 8004ae2:	f7ff fd49 	bl	8004578 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8004ae6:	f204 7334 	addw	r3, r4, #1844	@ 0x734
 8004aea:	4618      	mov	r0, r3
 8004aec:	9306      	str	r3, [sp, #24]
 8004aee:	f00b fa97 	bl	8010020 <_ZN8touchgfx6SliderC1Ev>
 8004af2:	f604 0328 	addw	r3, r4, #2088	@ 0x828
 8004af6:	4618      	mov	r0, r3
 8004af8:	9307      	str	r3, [sp, #28]
 8004afa:	f00a fd37 	bl	800f56c <_ZN8touchgfx12DigitalClockC1Ev>
 8004afe:	f504 630c 	add.w	r3, r4, #2240	@ 0x8c0
 8004b02:	4618      	mov	r0, r3
 8004b04:	9304      	str	r3, [sp, #16]
 8004b06:	f00a f9e3 	bl	800eed0 <_ZN8touchgfx13ImageProgressC1Ev>
 8004b0a:	f604 13d8 	addw	r3, r4, #2520	@ 0x9d8
 8004b0e:	4618      	mov	r0, r3
 8004b10:	9317      	str	r3, [sp, #92]	@ 0x5c
 8004b12:	f000 ffe9 	bl	8005ae8 <_ZN15right_containerC1Ev>
        : pobject(pObject), pmemfun(pmemfun_1)
 8004b16:	f504 5340 	add.w	r3, r4, #12288	@ 0x3000
 8004b1a:	4a61      	ldr	r2, [pc, #388]	@ (8004ca0 <_ZN23graphing_ScreenViewBaseC1Ev+0x3a4>)
    touchgfx::CanvasWidgetRenderer::setupBuffer(canvasBuffer, CANVAS_BUFFER_SIZE);
 8004b1c:	f642 61e0 	movw	r1, #12000	@ 0x2ee0
 8004b20:	f604 604c 	addw	r0, r4, #3660	@ 0xe4c
 8004b24:	f8c3 4d30 	str.w	r4, [r3, #3376]	@ 0xd30
 8004b28:	f8c3 2d2c 	str.w	r2, [r3, #3372]	@ 0xd2c
 8004b2c:	4a5d      	ldr	r2, [pc, #372]	@ (8004ca4 <_ZN23graphing_ScreenViewBaseC1Ev+0x3a8>)
 8004b2e:	f8c3 5d38 	str.w	r5, [r3, #3384]	@ 0xd38
 8004b32:	f8c3 2d34 	str.w	r2, [r3, #3380]	@ 0xd34
 8004b36:	4a5c      	ldr	r2, [pc, #368]	@ (8004ca8 <_ZN23graphing_ScreenViewBaseC1Ev+0x3ac>)
 8004b38:	f8c3 4d40 	str.w	r4, [r3, #3392]	@ 0xd40
 8004b3c:	f8c3 2d3c 	str.w	r2, [r3, #3388]	@ 0xd3c
 8004b40:	4a5a      	ldr	r2, [pc, #360]	@ (8004cac <_ZN23graphing_ScreenViewBaseC1Ev+0x3b0>)
 8004b42:	f8c3 5d48 	str.w	r5, [r3, #3400]	@ 0xd48
 8004b46:	f8c3 2d44 	str.w	r2, [r3, #3396]	@ 0xd44
 8004b4a:	4a59      	ldr	r2, [pc, #356]	@ (8004cb0 <_ZN23graphing_ScreenViewBaseC1Ev+0x3b4>)
 8004b4c:	f8c3 4d50 	str.w	r4, [r3, #3408]	@ 0xd50
 8004b50:	f8c3 2d4c 	str.w	r2, [r3, #3404]	@ 0xd4c
 8004b54:	4a57      	ldr	r2, [pc, #348]	@ (8004cb4 <_ZN23graphing_ScreenViewBaseC1Ev+0x3b8>)
 8004b56:	f8c3 5d58 	str.w	r5, [r3, #3416]	@ 0xd58
 8004b5a:	f8c3 2d54 	str.w	r2, [r3, #3412]	@ 0xd54
        : pobject(pObject), pmemfun(pmemfun_2)
 8004b5e:	4a56      	ldr	r2, [pc, #344]	@ (8004cb8 <_ZN23graphing_ScreenViewBaseC1Ev+0x3bc>)
 8004b60:	f8c3 4d60 	str.w	r4, [r3, #3424]	@ 0xd60
 8004b64:	f8c3 2d5c 	str.w	r2, [r3, #3420]	@ 0xd5c
 8004b68:	4a54      	ldr	r2, [pc, #336]	@ (8004cbc <_ZN23graphing_ScreenViewBaseC1Ev+0x3c0>)
 8004b6a:	f8c3 5d68 	str.w	r5, [r3, #3432]	@ 0xd68
 8004b6e:	f8c3 2d64 	str.w	r2, [r3, #3428]	@ 0xd64
 8004b72:	f011 f80f 	bl	8015b94 <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj>
    __background.setPosition(0, 0, 800, 480);
 8004b76:	462a      	mov	r2, r5
 8004b78:	4640      	mov	r0, r8
 8004b7a:	f44f 7348 	mov.w	r3, #800	@ 0x320
 8004b7e:	4629      	mov	r1, r5
 8004b80:	f8cd 9000 	str.w	r9, [sp]
 8004b84:	f7ff f8fc 	bl	8003d80 <_ZN8touchgfx8Drawable11setPositionEssss>
     *
     * @see getColor, Color::getColorFromRGB
     */
    void setColor(colortype newColor)
    {
        color = newColor;
 8004b88:	f04f 437f 	mov.w	r3, #4278190080	@ 0xff000000
 8004b8c:	4641      	mov	r1, r8
 8004b8e:	4658      	mov	r0, fp
 8004b90:	66a3      	str	r3, [r4, #104]	@ 0x68
 8004b92:	f00a fdb0 	bl	800f6f6 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    container1.setPosition(0, 0, 800, 480);
 8004b96:	f44f 7348 	mov.w	r3, #800	@ 0x320
 8004b9a:	462a      	mov	r2, r5
 8004b9c:	4629      	mov	r1, r5
 8004b9e:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 8004ba0:	f8cd 9000 	str.w	r9, [sp]
 8004ba4:	f7ff f8ec 	bl	8003d80 <_ZN8touchgfx8Drawable11setPositionEssss>
 8004ba8:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8004baa:	4658      	mov	r0, fp
        color = newColor;
 8004bac:	f8df 8118 	ldr.w	r8, [pc, #280]	@ 8004cc8 <_ZN23graphing_ScreenViewBaseC1Ev+0x3cc>
 8004bb0:	f00a fda1 	bl	800f6f6 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    box1.setPosition(0, 0, 800, 480);
 8004bb4:	462a      	mov	r2, r5
 8004bb6:	f44f 7348 	mov.w	r3, #800	@ 0x320
 8004bba:	4629      	mov	r1, r5
 8004bbc:	9814      	ldr	r0, [sp, #80]	@ 0x50
 8004bbe:	f8cd 9000 	str.w	r9, [sp]
 8004bc2:	f7ff f8dd 	bl	8003d80 <_ZN8touchgfx8Drawable11setPositionEssss>
 8004bc6:	4b3e      	ldr	r3, [pc, #248]	@ (8004cc0 <_ZN23graphing_ScreenViewBaseC1Ev+0x3c4>)
 8004bc8:	9914      	ldr	r1, [sp, #80]	@ 0x50
 8004bca:	4658      	mov	r0, fp
 8004bcc:	f8c4 30c0 	str.w	r3, [r4, #192]	@ 0xc0
 8004bd0:	f00a fd91 	bl	800f6f6 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    box2.setPosition(0, 0, 800, 480);
 8004bd4:	462a      	mov	r2, r5
 8004bd6:	f44f 7348 	mov.w	r3, #800	@ 0x320
 8004bda:	4629      	mov	r1, r5
 8004bdc:	9815      	ldr	r0, [sp, #84]	@ 0x54
 8004bde:	f8cd 9000 	str.w	r9, [sp]
 8004be2:	f04f 0903 	mov.w	r9, #3
 8004be6:	f7ff f8cb 	bl	8003d80 <_ZN8touchgfx8Drawable11setPositionEssss>
 8004bea:	f04f 437f 	mov.w	r3, #4278190080	@ 0xff000000
 8004bee:	9915      	ldr	r1, [sp, #84]	@ 0x54
 8004bf0:	4658      	mov	r0, fp
 8004bf2:	f8c4 30ec 	str.w	r3, [r4, #236]	@ 0xec
 8004bf6:	f00a fd7e 	bl	800f6f6 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    background.setXY(-2, 0);
 8004bfa:	462a      	mov	r2, r5
 8004bfc:	f06f 0101 	mvn.w	r1, #1
 8004c00:	980e      	ldr	r0, [sp, #56]	@ 0x38
 8004c02:	f7ff f8b0 	bl	8003d66 <_ZN8touchgfx8Drawable5setXYEss>
    background.setBitmap(touchgfx::Bitmap(BITMAP_BACKGROUND_ID));
 8004c06:	a91e      	add	r1, sp, #120	@ 0x78
 8004c08:	980e      	ldr	r0, [sp, #56]	@ 0x38
 8004c0a:	f8ad 9078 	strh.w	r9, [sp, #120]	@ 0x78
 8004c0e:	f010 f8d0 	bl	8014db2 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 8004c12:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8004c14:	4658      	mov	r0, fp
 8004c16:	f00a fd6e 	bl	800f6f6 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    swipeContainer1.setXY(216, 1);
 8004c1a:	2201      	movs	r2, #1
 8004c1c:	21d8      	movs	r1, #216	@ 0xd8
 8004c1e:	9803      	ldr	r0, [sp, #12]
 8004c20:	f7ff f8a1 	bl	8003d66 <_ZN8touchgfx8Drawable5setXYEss>
 8004c24:	2346      	movs	r3, #70	@ 0x46
    swipeContainer1.setPageIndicatorBitmaps(touchgfx::Bitmap(BITMAP_SWIPE_CONTAINER_PAGER_ID), touchgfx::Bitmap(BITMAP_SWIPE_CONTAINER_PAGER_ID));
 8004c26:	aa1e      	add	r2, sp, #120	@ 0x78
 8004c28:	a91d      	add	r1, sp, #116	@ 0x74
 8004c2a:	9803      	ldr	r0, [sp, #12]
 8004c2c:	f8ad 3074 	strh.w	r3, [sp, #116]	@ 0x74
 8004c30:	f8ad 3078 	strh.w	r3, [sp, #120]	@ 0x78
 8004c34:	f00b fc44 	bl	80104c0 <_ZN8touchgfx14SwipeContainer23setPageIndicatorBitmapsERKNS_6BitmapES3_>
    swipeContainer1.setPageIndicatorXY(0, 0);
 8004c38:	462a      	mov	r2, r5
 8004c3a:	4629      	mov	r1, r5
 8004c3c:	9803      	ldr	r0, [sp, #12]
 8004c3e:	f00b fae9 	bl	8010214 <_ZN8touchgfx14SwipeContainer18setPageIndicatorXYEss>
    swipeContainer1.setSwipeCutoff(50);
 8004c42:	2132      	movs	r1, #50	@ 0x32
 8004c44:	9803      	ldr	r0, [sp, #12]
 8004c46:	f00b fa79 	bl	801013c <_ZN8touchgfx14SwipeContainer14setSwipeCutoffEt>
    swipeContainer1.setEndSwipeElasticWidth(50);
 8004c4a:	2132      	movs	r1, #50	@ 0x32
 8004c4c:	9803      	ldr	r0, [sp, #12]
 8004c4e:	f00b fadf 	bl	8010210 <_ZN8touchgfx14SwipeContainer23setEndSwipeElasticWidthEt>
        rect.width = width;
 8004c52:	4b1c      	ldr	r3, [pc, #112]	@ (8004cc4 <_ZN23graphing_ScreenViewBaseC1Ev+0x3c8>)
    car.setXY(59, 307);
 8004c54:	4638      	mov	r0, r7
 8004c56:	f240 1233 	movw	r2, #307	@ 0x133
 8004c5a:	f8c4 322c 	str.w	r3, [r4, #556]	@ 0x22c
 8004c5e:	213b      	movs	r1, #59	@ 0x3b
 8004c60:	f7ff f881 	bl	8003d66 <_ZN8touchgfx8Drawable5setXYEss>
    car.setBitmaps(BITMAP_CAR_00_ID, BITMAP_CAR_55_ID);
 8004c64:	223d      	movs	r2, #61	@ 0x3d
 8004c66:	4638      	mov	r0, r7
 8004c68:	2106      	movs	r1, #6
 8004c6a:	f00f f8d9 	bl	8013e20 <_ZN8touchgfx13AnimatedImage10setBitmapsEtt>
    car.setUpdateTicksInterval(2);
 8004c6e:	4638      	mov	r0, r7
 8004c70:	2102      	movs	r1, #2
 8004c72:	f00f f8e8 	bl	8013e46 <_ZN8touchgfx13AnimatedImage22setUpdateTicksIntervalEh>
    car.startAnimation(false, true, false);
 8004c76:	2201      	movs	r2, #1
 8004c78:	4638      	mov	r0, r7
 8004c7a:	462b      	mov	r3, r5
 8004c7c:	4629      	mov	r1, r5
 8004c7e:	f00f f831 	bl	8013ce4 <_ZN8touchgfx13AnimatedImage14startAnimationEbbb>
 8004c82:	e023      	b.n	8004ccc <_ZN23graphing_ScreenViewBaseC1Ev+0x3d0>
 8004c84:	0802b16c 	.word	0x0802b16c
 8004c88:	0802af2c 	.word	0x0802af2c
 8004c8c:	0802c300 	.word	0x0802c300
 8004c90:	0802afa0 	.word	0x0802afa0
 8004c94:	0802b01c 	.word	0x0802b01c
 8004c98:	0802af10 	.word	0x0802af10
 8004c9c:	0802c118 	.word	0x0802c118
 8004ca0:	0802b10c 	.word	0x0802b10c
 8004ca4:	08004655 	.word	0x08004655
 8004ca8:	0802b124 	.word	0x0802b124
 8004cac:	08004759 	.word	0x08004759
 8004cb0:	0802b13c 	.word	0x0802b13c
 8004cb4:	08004219 	.word	0x08004219
 8004cb8:	0802b154 	.word	0x0802b154
 8004cbc:	080043ff 	.word	0x080043ff
 8004cc0:	ff36353b 	.word	0xff36353b
 8004cc4:	01e1016c 	.word	0x01e1016c
 8004cc8:	ff666666 	.word	0xff666666
    car.setDoneAction(animationEndedCallback);
 8004ccc:	f504 5374 	add.w	r3, r4, #15616	@ 0x3d00
    car_container.add(car);
 8004cd0:	4639      	mov	r1, r7
 8004cd2:	4650      	mov	r0, sl
    car.setDoneAction(animationEndedCallback);
 8004cd4:	332c      	adds	r3, #44	@ 0x2c
        boundingArea = calculateBoundingArea();
 8004cd6:	af18      	add	r7, sp, #96	@ 0x60
     * @param  callback The callback is executed when done. The callback is given the
     *                  animated image.
     */
    void setDoneAction(GenericCallback<const AnimatedImage&>& callback)
    {
        animationDoneAction = &callback;
 8004cd8:	f8c4 327c 	str.w	r3, [r4, #636]	@ 0x27c
    car_container.add(car);
 8004cdc:	f00a fd0b 	bl	800f6f6 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    circle.setXY(57, 308);
 8004ce0:	f44f 729a 	mov.w	r2, #308	@ 0x134
 8004ce4:	2139      	movs	r1, #57	@ 0x39
 8004ce6:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 8004ce8:	f7ff f83d 	bl	8003d66 <_ZN8touchgfx8Drawable5setXYEss>
 8004cec:	233e      	movs	r3, #62	@ 0x3e
    circle.setBitmap(touchgfx::Bitmap(BITMAP_CIRCLE_ID));
 8004cee:	a91e      	add	r1, sp, #120	@ 0x78
 8004cf0:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 8004cf2:	f8ad 3078 	strh.w	r3, [sp, #120]	@ 0x78
 8004cf6:	f010 f85c 	bl	8014db2 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
    car_container.add(circle);
 8004cfa:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8004cfc:	4650      	mov	r0, sl
 8004cfe:	f00a fcfa 	bl	800f6f6 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    Image4.setXY(228, 146);
 8004d02:	2292      	movs	r2, #146	@ 0x92
 8004d04:	21e4      	movs	r1, #228	@ 0xe4
 8004d06:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8004d08:	f7ff f82d 	bl	8003d66 <_ZN8touchgfx8Drawable5setXYEss>
 8004d0c:	2351      	movs	r3, #81	@ 0x51
    Image4.setBitmap(touchgfx::Bitmap(BITMAP_VECTOR_19_ID));
 8004d0e:	a91e      	add	r1, sp, #120	@ 0x78
 8004d10:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8004d12:	f8ad 3078 	strh.w	r3, [sp, #120]	@ 0x78
 8004d16:	f010 f84c 	bl	8014db2 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
    car_container.add(Image4);
 8004d1a:	9910      	ldr	r1, [sp, #64]	@ 0x40
 8004d1c:	4650      	mov	r0, sl
 8004d1e:	f00a fcea 	bl	800f6f6 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    image5.setXY(-11, 144);
 8004d22:	2290      	movs	r2, #144	@ 0x90
 8004d24:	f06f 010a 	mvn.w	r1, #10
 8004d28:	9811      	ldr	r0, [sp, #68]	@ 0x44
 8004d2a:	f7ff f81c 	bl	8003d66 <_ZN8touchgfx8Drawable5setXYEss>
 8004d2e:	2352      	movs	r3, #82	@ 0x52
    image5.setBitmap(touchgfx::Bitmap(BITMAP_VECTOR_20_ID));
 8004d30:	a91e      	add	r1, sp, #120	@ 0x78
 8004d32:	9811      	ldr	r0, [sp, #68]	@ 0x44
 8004d34:	f8ad 3078 	strh.w	r3, [sp, #120]	@ 0x78
 8004d38:	f010 f83b 	bl	8014db2 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
    car_container.add(image5);
 8004d3c:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8004d3e:	4650      	mov	r0, sl
 8004d40:	f00a fcd9 	bl	800f6f6 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    mph_lable.setPosition(110, 268, 151, 28);
 8004d44:	231c      	movs	r3, #28
 8004d46:	f44f 7286 	mov.w	r2, #268	@ 0x10c
 8004d4a:	216e      	movs	r1, #110	@ 0x6e
 8004d4c:	9808      	ldr	r0, [sp, #32]
 8004d4e:	9300      	str	r3, [sp, #0]
 8004d50:	2397      	movs	r3, #151	@ 0x97
 8004d52:	f7ff f815 	bl	8003d80 <_ZN8touchgfx8Drawable11setPositionEssss>
 8004d56:	9908      	ldr	r1, [sp, #32]
 8004d58:	4638      	mov	r0, r7
        color = newColor;
 8004d5a:	f8c4 836c 	str.w	r8, [r4, #876]	@ 0x36c
        linespace = space;
 8004d5e:	f8a4 5370 	strh.w	r5, [r4, #880]	@ 0x370
        boundingArea = calculateBoundingArea();
 8004d62:	f00f f959 	bl	8014018 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>
 8004d66:	f504 735e 	add.w	r3, r4, #888	@ 0x378
 8004d6a:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 8004d6e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8004d72:	4b1d      	ldr	r3, [pc, #116]	@ (8004de8 <_ZN23graphing_ScreenViewBaseC1Ev+0x4ec>)
    mph_lable.setTypedText(touchgfx::TypedText(T___SINGLEUSE_Z0UY));
 8004d74:	a91e      	add	r1, sp, #120	@ 0x78
 8004d76:	9808      	ldr	r0, [sp, #32]
 8004d78:	931e      	str	r3, [sp, #120]	@ 0x78
 8004d7a:	f8ad 907c 	strh.w	r9, [sp, #124]	@ 0x7c
 8004d7e:	f00f fbe5 	bl	801454c <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
    car_container.add(mph_lable);
 8004d82:	9908      	ldr	r1, [sp, #32]
 8004d84:	4650      	mov	r0, sl
 8004d86:	f00a fcb6 	bl	800f6f6 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    mph.setPosition(109, 178, 151, 85);
 8004d8a:	2355      	movs	r3, #85	@ 0x55
 8004d8c:	22b2      	movs	r2, #178	@ 0xb2
 8004d8e:	216d      	movs	r1, #109	@ 0x6d
 8004d90:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004d92:	9300      	str	r3, [sp, #0]
 8004d94:	2397      	movs	r3, #151	@ 0x97
 8004d96:	f7fe fff3 	bl	8003d80 <_ZN8touchgfx8Drawable11setPositionEssss>
 8004d9a:	f8d4 3384 	ldr.w	r3, [r4, #900]	@ 0x384
 8004d9e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8004da0:	4638      	mov	r0, r7
 8004da2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
        color = newColor;
 8004da6:	f8c4 83b4 	str.w	r8, [r4, #948]	@ 0x3b4
        linespace = space;
 8004daa:	f8a4 53b8 	strh.w	r5, [r4, #952]	@ 0x3b8
        boundingArea = calculateBoundingArea();
 8004dae:	4798      	blx	r3
 8004db0:	f504 7370 	add.w	r3, r4, #960	@ 0x3c0
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 8004db4:	f8df 8048 	ldr.w	r8, [pc, #72]	@ 8004e00 <_ZN23graphing_ScreenViewBaseC1Ev+0x504>
 8004db8:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 8004dbc:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    Unicode::snprintf(mphBuffer, MPH_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_49UH).getText());
 8004dc0:	f504 6362 	add.w	r3, r4, #3616	@ 0xe20
 8004dc4:	9308      	str	r3, [sp, #32]
 8004dc6:	f8d8 3000 	ldr.w	r3, [r8]
 8004dca:	b92b      	cbnz	r3, 8004dd8 <_ZN23graphing_ScreenViewBaseC1Ev+0x4dc>
 8004dcc:	4b07      	ldr	r3, [pc, #28]	@ (8004dec <_ZN23graphing_ScreenViewBaseC1Ev+0x4f0>)
 8004dce:	2160      	movs	r1, #96	@ 0x60
 8004dd0:	4a07      	ldr	r2, [pc, #28]	@ (8004df0 <_ZN23graphing_ScreenViewBaseC1Ev+0x4f4>)
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
 8004dd2:	4808      	ldr	r0, [pc, #32]	@ (8004df4 <_ZN23graphing_ScreenViewBaseC1Ev+0x4f8>)
 8004dd4:	f022 fa54 	bl	8027280 <__assert_func>
        return typedTextId < numberOfTypedTexts;
 8004dd8:	4f07      	ldr	r7, [pc, #28]	@ (8004df8 <_ZN23graphing_ScreenViewBaseC1Ev+0x4fc>)
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
 8004dda:	883b      	ldrh	r3, [r7, #0]
 8004ddc:	2b04      	cmp	r3, #4
 8004dde:	d811      	bhi.n	8004e04 <_ZN23graphing_ScreenViewBaseC1Ev+0x508>
 8004de0:	4b06      	ldr	r3, [pc, #24]	@ (8004dfc <_ZN23graphing_ScreenViewBaseC1Ev+0x500>)
 8004de2:	2161      	movs	r1, #97	@ 0x61
 8004de4:	4a02      	ldr	r2, [pc, #8]	@ (8004df0 <_ZN23graphing_ScreenViewBaseC1Ev+0x4f4>)
 8004de6:	e7f4      	b.n	8004dd2 <_ZN23graphing_ScreenViewBaseC1Ev+0x4d6>
 8004de8:	0802a5c4 	.word	0x0802a5c4
 8004dec:	0802acb0 	.word	0x0802acb0
 8004df0:	0802adc0 	.word	0x0802adc0
 8004df4:	0802ad2d 	.word	0x0802ad2d
 8004df8:	24028e7c 	.word	0x24028e7c
 8004dfc:	0802ad82 	.word	0x0802ad82
 8004e00:	24028e78 	.word	0x24028e78
        return texts->getText(typedTextId);
 8004e04:	4bd1      	ldr	r3, [pc, #836]	@ (800514c <_ZN23graphing_ScreenViewBaseC1Ev+0x850>)
 8004e06:	2104      	movs	r1, #4
 8004e08:	6818      	ldr	r0, [r3, #0]
 8004e0a:	f7ff f989 	bl	8004120 <_ZNK8touchgfx5Texts7getTextEt>
 8004e0e:	4ad0      	ldr	r2, [pc, #832]	@ (8005150 <_ZN23graphing_ScreenViewBaseC1Ev+0x854>)
 8004e10:	4603      	mov	r3, r0
 8004e12:	210a      	movs	r1, #10
 8004e14:	9808      	ldr	r0, [sp, #32]
 8004e16:	f016 f87d 	bl	801af14 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
        wc1 = value;
 8004e1a:	9a08      	ldr	r2, [sp, #32]
        : typedTextId(id)
 8004e1c:	2305      	movs	r3, #5
    mph.setTypedText(touchgfx::TypedText(T___SINGLEUSE_UE0S));
 8004e1e:	a91e      	add	r1, sp, #120	@ 0x78
 8004e20:	f8c4 23cc 	str.w	r2, [r4, #972]	@ 0x3cc
 8004e24:	4acb      	ldr	r2, [pc, #812]	@ (8005154 <_ZN23graphing_ScreenViewBaseC1Ev+0x858>)
 8004e26:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004e28:	921e      	str	r2, [sp, #120]	@ 0x78
 8004e2a:	f8ad 307c 	strh.w	r3, [sp, #124]	@ 0x7c
 8004e2e:	f00f fb8d 	bl	801454c <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
    car_container.add(mph);
 8004e32:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8004e34:	4650      	mov	r0, sl
 8004e36:	f00a fc5e 	bl	800f6f6 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8004e3a:	2341      	movs	r3, #65	@ 0x41
    gauge1.setBackground(touchgfx::Bitmap(BITMAP_GAUGE_ID));
 8004e3c:	4630      	mov	r0, r6
 8004e3e:	a91e      	add	r1, sp, #120	@ 0x78
 8004e40:	f8ad 3078 	strh.w	r3, [sp, #120]	@ 0x78
 8004e44:	f00a fa1c 	bl	800f280 <_ZN8touchgfx25AbstractProgressIndicator13setBackgroundERKNS_6BitmapE>
    gauge1.setBackgroundOffset(0, -45);
 8004e48:	4630      	mov	r0, r6
 8004e4a:	f06f 022c 	mvn.w	r2, #44	@ 0x2c
 8004e4e:	4629      	mov	r1, r5
 8004e50:	f00f fe02 	bl	8014a58 <_ZN8touchgfx5Gauge19setBackgroundOffsetEss>
    gauge1.setPosition(18, -8, 336, 336);
 8004e54:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8004e58:	4630      	mov	r0, r6
 8004e5a:	f06f 0207 	mvn.w	r2, #7
 8004e5e:	9300      	str	r3, [sp, #0]
 8004e60:	2112      	movs	r1, #18
 8004e62:	f7fe ff8d 	bl	8003d80 <_ZN8touchgfx8Drawable11setPositionEssss>
    gauge1.setCenter(168, 168);
 8004e66:	22a8      	movs	r2, #168	@ 0xa8
 8004e68:	4630      	mov	r0, r6
 8004e6a:	4611      	mov	r1, r2
 8004e6c:	f00f fe9b 	bl	8014ba6 <_ZN8touchgfx5Gauge9setCenterEii>
    gauge1.setStartEndAngle(-117, 121);
 8004e70:	4630      	mov	r0, r6
 8004e72:	2279      	movs	r2, #121	@ 0x79
 8004e74:	f06f 0174 	mvn.w	r1, #116	@ 0x74
 8004e78:	f00f ff1a 	bl	8014cb0 <_ZN8touchgfx5Gauge16setStartEndAngleEii>
    gauge1.setRange(10, 100);
 8004e7c:	462b      	mov	r3, r5
 8004e7e:	2264      	movs	r2, #100	@ 0x64
 8004e80:	4630      	mov	r0, r6
 8004e82:	210a      	movs	r1, #10
 8004e84:	9500      	str	r5, [sp, #0]
 8004e86:	f00a f8a7 	bl	800efd8 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEiitt>
    gauge1.setValue(92);
 8004e8a:	4630      	mov	r0, r6
 8004e8c:	215c      	movs	r1, #92	@ 0x5c
 8004e8e:	f00f feb9 	bl	8014c04 <_ZN8touchgfx5Gauge8setValueEi>
    gauge1.setNeedle(BITMAP_NEEDLE_3_ID, 39.1f, 103.6f);
 8004e92:	2227      	movs	r2, #39	@ 0x27
 8004e94:	2367      	movs	r3, #103	@ 0x67
 8004e96:	4630      	mov	r0, r6
 8004e98:	2144      	movs	r1, #68	@ 0x44
 8004e9a:	f00f fe6f 	bl	8014b7c <_ZN8touchgfx5Gauge9setNeedleEtss>
    gauge1.setMovingNeedleRenderingAlgorithm(touchgfx::TextureMapper::BILINEAR_INTERPOLATION);
 8004e9e:	4630      	mov	r0, r6
 8004ea0:	2101      	movs	r1, #1
 8004ea2:	f00f fe06 	bl	8014ab2 <_ZN8touchgfx5Gauge33setMovingNeedleRenderingAlgorithmENS_13TextureMapper18RenderingAlgorithmE>
    gauge1.setSteadyNeedleRenderingAlgorithm(touchgfx::TextureMapper::BILINEAR_INTERPOLATION);
 8004ea6:	4630      	mov	r0, r6
 8004ea8:	2101      	movs	r1, #1
 8004eaa:	f00f fe05 	bl	8014ab8 <_ZN8touchgfx5Gauge33setSteadyNeedleRenderingAlgorithmENS_13TextureMapper18RenderingAlgorithmE>
    gauge1.setArcVisible();
 8004eae:	4630      	mov	r0, r6
 8004eb0:	2101      	movs	r1, #1
 8004eb2:	f00f fe04 	bl	8014abe <_ZN8touchgfx5Gauge13setArcVisibleEb>
 8004eb6:	2347      	movs	r3, #71	@ 0x47
    gauge1Painter.setBitmap(touchgfx::Bitmap(BITMAP_SWOOP_ID));
 8004eb8:	a91e      	add	r1, sp, #120	@ 0x78
 8004eba:	9816      	ldr	r0, [sp, #88]	@ 0x58
 8004ebc:	f8ad 3078 	strh.w	r3, [sp, #120]	@ 0x78
 8004ec0:	f00e f8e3 	bl	801308a <_ZN8touchgfx19PainterRGB888Bitmap9setBitmapERKNS_6BitmapE>
    gauge1.getArc().setPainter(gauge1Painter);
 8004ec4:	4630      	mov	r0, r6
 8004ec6:	f00f fdfd 	bl	8014ac4 <_ZN8touchgfx5Gauge6getArcEv>
        canvasPainter = &painter;
 8004eca:	9916      	ldr	r1, [sp, #88]	@ 0x58
 8004ecc:	6281      	str	r1, [r0, #40]	@ 0x28
    gauge1.getArc().setRadius(137);
 8004ece:	4630      	mov	r0, r6
 8004ed0:	f00f fdf8 	bl	8014ac4 <_ZN8touchgfx5Gauge6getArcEv>
     * @note The area containing the Circle is not invalidated.
     */
    template <typename T>
    void setRadius(const T r)
    {
        this->circleRadius = CWRUtil::toQ5(r);
 8004ed4:	f44f 5389 	mov.w	r3, #4384	@ 0x1120
 8004ed8:	6343      	str	r3, [r0, #52]	@ 0x34
    gauge1.getArc().setLineWidth(136);
 8004eda:	4630      	mov	r0, r6
 8004edc:	f00f fdf2 	bl	8014ac4 <_ZN8touchgfx5Gauge6getArcEv>
     *       before updating the width to ensure that the old circle is completely erased.
     */
    template <typename T>
    void setLineWidth(const T width)
    {
        this->circleLineWidth = CWRUtil::toQ5(width);
 8004ee0:	f44f 5388 	mov.w	r3, #4352	@ 0x1100
 8004ee4:	6403      	str	r3, [r0, #64]	@ 0x40
    gauge1.getArc().setCapPrecision(180);
 8004ee6:	4630      	mov	r0, r6
 8004ee8:	f00f fdec 	bl	8014ac4 <_ZN8touchgfx5Gauge6getArcEv>
 8004eec:	21b4      	movs	r1, #180	@ 0xb4
 8004eee:	f00e f95f 	bl	80131b0 <_ZN8touchgfx6Circle15setCapPrecisionEi>
    gauge1.setArcPosition(33, 33, 270, 198);
 8004ef2:	2221      	movs	r2, #33	@ 0x21
 8004ef4:	23c6      	movs	r3, #198	@ 0xc6
 8004ef6:	4630      	mov	r0, r6
 8004ef8:	4611      	mov	r1, r2
 8004efa:	9300      	str	r3, [sp, #0]
 8004efc:	f44f 7387 	mov.w	r3, #270	@ 0x10e
 8004f00:	f00f fdaf 	bl	8014a62 <_ZN8touchgfx5Gauge14setArcPositionEssss>
    car_container.add(gauge1);
 8004f04:	4631      	mov	r1, r6
 8004f06:	4650      	mov	r0, sl
    Unicode::snprintf(pres_flBuffer, PRES_FL_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_P78H).getText());
 8004f08:	f604 6634 	addw	r6, r4, #3636	@ 0xe34
    car_container.add(gauge1);
 8004f0c:	f00a fbf3 	bl	800f6f6 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    swipeContainer1.add(car_container);
 8004f10:	4651      	mov	r1, sl
 8004f12:	9803      	ldr	r0, [sp, #12]
 8004f14:	f00b fb4b 	bl	80105ae <_ZN8touchgfx14SwipeContainer3addERNS_8DrawableE>
 8004f18:	498f      	ldr	r1, [pc, #572]	@ (8005158 <_ZN23graphing_ScreenViewBaseC1Ev+0x85c>)
    tire_pre.setXY(4, 146);
 8004f1a:	2292      	movs	r2, #146	@ 0x92
 8004f1c:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8004f1e:	f8c4 15b4 	str.w	r1, [r4, #1460]	@ 0x5b4
 8004f22:	2104      	movs	r1, #4
 8004f24:	f7fe ff1f 	bl	8003d66 <_ZN8touchgfx8Drawable5setXYEss>
 8004f28:	234d      	movs	r3, #77	@ 0x4d
    tire_pre.setBitmap(touchgfx::Bitmap(BITMAP_TIRE_PRESSURE_1_ID));
 8004f2a:	a91e      	add	r1, sp, #120	@ 0x78
 8004f2c:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8004f2e:	f8ad 3078 	strh.w	r3, [sp, #120]	@ 0x78
 8004f32:	f00f ff3e 	bl	8014db2 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
    tire_pres_pg.add(tire_pre);
 8004f36:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8004f38:	9805      	ldr	r0, [sp, #20]
 8004f3a:	f00a fbdc 	bl	800f6f6 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    pres_fl.setXY(97, 275);
 8004f3e:	2161      	movs	r1, #97	@ 0x61
 8004f40:	f240 1213 	movw	r2, #275	@ 0x113
 8004f44:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8004f46:	f7fe ff0e 	bl	8003d66 <_ZN8touchgfx8Drawable5setXYEss>
        color = newColor;
 8004f4a:	4b84      	ldr	r3, [pc, #528]	@ (800515c <_ZN23graphing_ScreenViewBaseC1Ev+0x860>)
        boundingArea = calculateBoundingArea();
 8004f4c:	f04f 31ff 	mov.w	r1, #4294967295
        linespace = space;
 8004f50:	f8a4 5638 	strh.w	r5, [r4, #1592]	@ 0x638
        color = newColor;
 8004f54:	f8c4 3634 	str.w	r3, [r4, #1588]	@ 0x634
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 8004f58:	f8d8 3000 	ldr.w	r3, [r8]
        boundingArea = calculateBoundingArea();
 8004f5c:	f8c4 5640 	str.w	r5, [r4, #1600]	@ 0x640
 8004f60:	f8c4 1644 	str.w	r1, [r4, #1604]	@ 0x644
 8004f64:	f8c4 5648 	str.w	r5, [r4, #1608]	@ 0x648
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	f43f af2f 	beq.w	8004dcc <_ZN23graphing_ScreenViewBaseC1Ev+0x4d0>
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
 8004f6e:	883b      	ldrh	r3, [r7, #0]
 8004f70:	2b09      	cmp	r3, #9
 8004f72:	f67f af35 	bls.w	8004de0 <_ZN23graphing_ScreenViewBaseC1Ev+0x4e4>
        return texts->getText(typedTextId);
 8004f76:	4b75      	ldr	r3, [pc, #468]	@ (800514c <_ZN23graphing_ScreenViewBaseC1Ev+0x850>)
 8004f78:	2109      	movs	r1, #9
    Unicode::snprintf(pres_frBuffer, PRES_FR_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_ONR6).getText());
 8004f7a:	f604 6a3a 	addw	sl, r4, #3642	@ 0xe3a
 8004f7e:	6818      	ldr	r0, [r3, #0]
 8004f80:	f7ff f8ce 	bl	8004120 <_ZNK8touchgfx5Texts7getTextEt>
    Unicode::snprintf(pres_flBuffer, PRES_FL_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_P78H).getText());
 8004f84:	4a72      	ldr	r2, [pc, #456]	@ (8005150 <_ZN23graphing_ScreenViewBaseC1Ev+0x854>)
 8004f86:	4603      	mov	r3, r0
 8004f88:	4649      	mov	r1, r9
 8004f8a:	4630      	mov	r0, r6
 8004f8c:	f015 ffc2 	bl	801af14 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    pres_fl.resizeToCurrentText();
 8004f90:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8004f92:	f8c4 664c 	str.w	r6, [r4, #1612]	@ 0x64c
 8004f96:	f00f fab9 	bl	801450c <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
        : typedTextId(id)
 8004f9a:	230d      	movs	r3, #13
 8004f9c:	4a6d      	ldr	r2, [pc, #436]	@ (8005154 <_ZN23graphing_ScreenViewBaseC1Ev+0x858>)
    pres_fl.setTypedText(touchgfx::TypedText(T___SINGLEUSE_ED0G));
 8004f9e:	a91e      	add	r1, sp, #120	@ 0x78
 8004fa0:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8004fa2:	f8ad 307c 	strh.w	r3, [sp, #124]	@ 0x7c
 8004fa6:	921e      	str	r2, [sp, #120]	@ 0x78
 8004fa8:	f00f fad0 	bl	801454c <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
    tire_pres_pg.add(pres_fl);
 8004fac:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8004fae:	9805      	ldr	r0, [sp, #20]
 8004fb0:	f00a fba1 	bl	800f6f6 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    pres_fr.setXY(245, 275);
 8004fb4:	21f5      	movs	r1, #245	@ 0xf5
 8004fb6:	f240 1213 	movw	r2, #275	@ 0x113
 8004fba:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8004fbc:	f7fe fed3 	bl	8003d66 <_ZN8touchgfx8Drawable5setXYEss>
        color = newColor;
 8004fc0:	4e67      	ldr	r6, [pc, #412]	@ (8005160 <_ZN23graphing_ScreenViewBaseC1Ev+0x864>)
        boundingArea = calculateBoundingArea();
 8004fc2:	f04f 31ff 	mov.w	r1, #4294967295
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 8004fc6:	f8d8 3000 	ldr.w	r3, [r8]
        color = newColor;
 8004fca:	f8c4 6680 	str.w	r6, [r4, #1664]	@ 0x680
        linespace = space;
 8004fce:	f8a4 5684 	strh.w	r5, [r4, #1668]	@ 0x684
        boundingArea = calculateBoundingArea();
 8004fd2:	f8c4 568c 	str.w	r5, [r4, #1676]	@ 0x68c
 8004fd6:	f8c4 1690 	str.w	r1, [r4, #1680]	@ 0x690
 8004fda:	f8c4 5694 	str.w	r5, [r4, #1684]	@ 0x694
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	f43f aef4 	beq.w	8004dcc <_ZN23graphing_ScreenViewBaseC1Ev+0x4d0>
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
 8004fe4:	883b      	ldrh	r3, [r7, #0]
 8004fe6:	2b08      	cmp	r3, #8
 8004fe8:	f67f aefa 	bls.w	8004de0 <_ZN23graphing_ScreenViewBaseC1Ev+0x4e4>
        return texts->getText(typedTextId);
 8004fec:	4b57      	ldr	r3, [pc, #348]	@ (800514c <_ZN23graphing_ScreenViewBaseC1Ev+0x850>)
 8004fee:	2108      	movs	r1, #8
 8004ff0:	6818      	ldr	r0, [r3, #0]
 8004ff2:	f7ff f895 	bl	8004120 <_ZNK8touchgfx5Texts7getTextEt>
    Unicode::snprintf(pres_frBuffer, PRES_FR_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_ONR6).getText());
 8004ff6:	4a56      	ldr	r2, [pc, #344]	@ (8005150 <_ZN23graphing_ScreenViewBaseC1Ev+0x854>)
 8004ff8:	4603      	mov	r3, r0
 8004ffa:	4649      	mov	r1, r9
 8004ffc:	4650      	mov	r0, sl
 8004ffe:	f015 ff89 	bl	801af14 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    pres_fr.resizeToCurrentText();
 8005002:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8005004:	f8c4 a698 	str.w	sl, [r4, #1688]	@ 0x698
    Unicode::snprintf(pres_rrBuffer, PRES_RR_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_DATJ).getText());
 8005008:	f504 6a64 	add.w	sl, r4, #3648	@ 0xe40
    pres_fr.resizeToCurrentText();
 800500c:	f00f fa7e 	bl	801450c <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
        : typedTextId(id)
 8005010:	230c      	movs	r3, #12
 8005012:	4a50      	ldr	r2, [pc, #320]	@ (8005154 <_ZN23graphing_ScreenViewBaseC1Ev+0x858>)
    pres_fr.setTypedText(touchgfx::TypedText(T___SINGLEUSE_4JZO));
 8005014:	a91e      	add	r1, sp, #120	@ 0x78
 8005016:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8005018:	f8ad 307c 	strh.w	r3, [sp, #124]	@ 0x7c
 800501c:	921e      	str	r2, [sp, #120]	@ 0x78
 800501e:	f00f fa95 	bl	801454c <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
    tire_pres_pg.add(pres_fr);
 8005022:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8005024:	9805      	ldr	r0, [sp, #20]
 8005026:	f00a fb66 	bl	800f6f6 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    pres_rr.setXY(246, 383);
 800502a:	21f6      	movs	r1, #246	@ 0xf6
 800502c:	f240 127f 	movw	r2, #383	@ 0x17f
 8005030:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8005032:	f7fe fe98 	bl	8003d66 <_ZN8touchgfx8Drawable5setXYEss>
 8005036:	f04f 31ff 	mov.w	r1, #4294967295
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 800503a:	f8d8 3000 	ldr.w	r3, [r8]
        color = newColor;
 800503e:	f8c4 66cc 	str.w	r6, [r4, #1740]	@ 0x6cc
        linespace = space;
 8005042:	f8a4 56d0 	strh.w	r5, [r4, #1744]	@ 0x6d0
        boundingArea = calculateBoundingArea();
 8005046:	f8c4 56d8 	str.w	r5, [r4, #1752]	@ 0x6d8
 800504a:	f8c4 16dc 	str.w	r1, [r4, #1756]	@ 0x6dc
 800504e:	f8c4 56e0 	str.w	r5, [r4, #1760]	@ 0x6e0
 8005052:	2b00      	cmp	r3, #0
 8005054:	f43f aeba 	beq.w	8004dcc <_ZN23graphing_ScreenViewBaseC1Ev+0x4d0>
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
 8005058:	883b      	ldrh	r3, [r7, #0]
 800505a:	2b06      	cmp	r3, #6
 800505c:	f67f aec0 	bls.w	8004de0 <_ZN23graphing_ScreenViewBaseC1Ev+0x4e4>
        return texts->getText(typedTextId);
 8005060:	4b3a      	ldr	r3, [pc, #232]	@ (800514c <_ZN23graphing_ScreenViewBaseC1Ev+0x850>)
 8005062:	2106      	movs	r1, #6
 8005064:	6818      	ldr	r0, [r3, #0]
 8005066:	f7ff f85b 	bl	8004120 <_ZNK8touchgfx5Texts7getTextEt>
    Unicode::snprintf(pres_rrBuffer, PRES_RR_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_DATJ).getText());
 800506a:	4a39      	ldr	r2, [pc, #228]	@ (8005150 <_ZN23graphing_ScreenViewBaseC1Ev+0x854>)
 800506c:	4603      	mov	r3, r0
 800506e:	4649      	mov	r1, r9
 8005070:	4650      	mov	r0, sl
 8005072:	f015 ff4f 	bl	801af14 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    pres_rr.resizeToCurrentText();
 8005076:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8005078:	f8c4 a6e4 	str.w	sl, [r4, #1764]	@ 0x6e4
 800507c:	f00f fa46 	bl	801450c <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
        : typedTextId(id)
 8005080:	230b      	movs	r3, #11
 8005082:	4a34      	ldr	r2, [pc, #208]	@ (8005154 <_ZN23graphing_ScreenViewBaseC1Ev+0x858>)
    pres_rr.setTypedText(touchgfx::TypedText(T___SINGLEUSE_BWD6));
 8005084:	a91e      	add	r1, sp, #120	@ 0x78
 8005086:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8005088:	f8ad 307c 	strh.w	r3, [sp, #124]	@ 0x7c
 800508c:	921e      	str	r2, [sp, #120]	@ 0x78
 800508e:	f00f fa5d 	bl	801454c <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
    tire_pres_pg.add(pres_rr);
 8005092:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8005094:	9805      	ldr	r0, [sp, #20]
 8005096:	f00a fb2e 	bl	800f6f6 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    pres_rl.setXY(96, 383);
 800509a:	f240 127f 	movw	r2, #383	@ 0x17f
 800509e:	2160      	movs	r1, #96	@ 0x60
 80050a0:	980d      	ldr	r0, [sp, #52]	@ 0x34
 80050a2:	f7fe fe60 	bl	8003d66 <_ZN8touchgfx8Drawable5setXYEss>
 80050a6:	f04f 33ff 	mov.w	r3, #4294967295
        linespace = space;
 80050aa:	f8a4 571c 	strh.w	r5, [r4, #1820]	@ 0x71c
        boundingArea = calculateBoundingArea();
 80050ae:	f8c4 3728 	str.w	r3, [r4, #1832]	@ 0x728
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 80050b2:	f8d8 3000 	ldr.w	r3, [r8]
 80050b6:	f8c4 5724 	str.w	r5, [r4, #1828]	@ 0x724
 80050ba:	f8c4 572c 	str.w	r5, [r4, #1836]	@ 0x72c
    Unicode::snprintf(pres_rlBuffer, PRES_RL_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_JSZ2).getText());
 80050be:	f604 6546 	addw	r5, r4, #3654	@ 0xe46
        color = newColor;
 80050c2:	f8c4 6718 	str.w	r6, [r4, #1816]	@ 0x718
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	f43f ae80 	beq.w	8004dcc <_ZN23graphing_ScreenViewBaseC1Ev+0x4d0>
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
 80050cc:	883b      	ldrh	r3, [r7, #0]
 80050ce:	2b07      	cmp	r3, #7
 80050d0:	f67f ae86 	bls.w	8004de0 <_ZN23graphing_ScreenViewBaseC1Ev+0x4e4>
        return texts->getText(typedTextId);
 80050d4:	4b1d      	ldr	r3, [pc, #116]	@ (800514c <_ZN23graphing_ScreenViewBaseC1Ev+0x850>)
 80050d6:	2107      	movs	r1, #7
        : typedTextId(id)
 80050d8:	f04f 080a 	mov.w	r8, #10
 80050dc:	f8df 9074 	ldr.w	r9, [pc, #116]	@ 8005154 <_ZN23graphing_ScreenViewBaseC1Ev+0x858>
        return texts->getText(typedTextId);
 80050e0:	6818      	ldr	r0, [r3, #0]
 80050e2:	2602      	movs	r6, #2
 80050e4:	f7ff f81c 	bl	8004120 <_ZNK8touchgfx5Texts7getTextEt>
 80050e8:	4a19      	ldr	r2, [pc, #100]	@ (8005150 <_ZN23graphing_ScreenViewBaseC1Ev+0x854>)
 80050ea:	4603      	mov	r3, r0
 80050ec:	2103      	movs	r1, #3
 80050ee:	4628      	mov	r0, r5
 80050f0:	2701      	movs	r7, #1
 80050f2:	f015 ff0f 	bl	801af14 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    pres_rl.resizeToCurrentText();
 80050f6:	980d      	ldr	r0, [sp, #52]	@ 0x34
 80050f8:	f8c4 5730 	str.w	r5, [r4, #1840]	@ 0x730
    slider1.setupHorizontalSlider(16, 11, 0, 0, 200);
 80050fc:	f04f 0ac8 	mov.w	sl, #200	@ 0xc8
    pres_rl.resizeToCurrentText();
 8005100:	f00f fa04 	bl	801450c <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
    pres_rl.setTypedText(touchgfx::TypedText(T___SINGLEUSE_9P52));
 8005104:	a91e      	add	r1, sp, #120	@ 0x78
 8005106:	980d      	ldr	r0, [sp, #52]	@ 0x34
    slider1.setupHorizontalSlider(16, 11, 0, 0, 200);
 8005108:	2500      	movs	r5, #0
        : typedTextId(id)
 800510a:	f8cd 9078 	str.w	r9, [sp, #120]	@ 0x78
 800510e:	f8ad 807c 	strh.w	r8, [sp, #124]	@ 0x7c
    pres_rl.setTypedText(touchgfx::TypedText(T___SINGLEUSE_9P52));
 8005112:	f00f fa1b 	bl	801454c <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
    tire_pres_pg.add(pres_rl);
 8005116:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8005118:	9805      	ldr	r0, [sp, #20]
 800511a:	f00a faec 	bl	800f6f6 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    swipeContainer1.add(tire_pres_pg);
 800511e:	9905      	ldr	r1, [sp, #20]
 8005120:	9803      	ldr	r0, [sp, #12]
 8005122:	f00b fa44 	bl	80105ae <_ZN8touchgfx14SwipeContainer3addERNS_8DrawableE>
    swipeContainer1.setSelectedPage(0);
 8005126:	9803      	ldr	r0, [sp, #12]
 8005128:	2100      	movs	r1, #0
 800512a:	f00b fa31 	bl	8010590 <_ZN8touchgfx14SwipeContainer15setSelectedPageEh>
 800512e:	9903      	ldr	r1, [sp, #12]
 8005130:	4658      	mov	r0, fp
 8005132:	f00a fae0 	bl	800f6f6 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    slider1.setXY(570, 448);
 8005136:	9806      	ldr	r0, [sp, #24]
 8005138:	f44f 72e0 	mov.w	r2, #448	@ 0x1c0
 800513c:	f240 213a 	movw	r1, #570	@ 0x23a
 8005140:	f7fe fe11 	bl	8003d66 <_ZN8touchgfx8Drawable5setXYEss>
    slider1.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_SLIDER_HORIZONTAL_THICK_TRACK_SMALL_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_SLIDER_HORIZONTAL_THICK_TRACK_SMALL_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_SLIDER_HORIZONTAL_THICK_ROUND_LIGHT_ID));
 8005144:	ab1e      	add	r3, sp, #120	@ 0x78
 8005146:	aa1d      	add	r2, sp, #116	@ 0x74
 8005148:	e00c      	b.n	8005164 <_ZN23graphing_ScreenViewBaseC1Ev+0x868>
 800514a:	bf00      	nop
 800514c:	24028e84 	.word	0x24028e84
 8005150:	0802ae0b 	.word	0x0802ae0b
 8005154:	0802a5c4 	.word	0x0802a5c4
 8005158:	01e1016c 	.word	0x01e1016c
 800515c:	ffff0000 	.word	0xffff0000
 8005160:	ff424cff 	.word	0xff424cff
 8005164:	a91c      	add	r1, sp, #112	@ 0x70
 8005166:	9806      	ldr	r0, [sp, #24]
 8005168:	f8ad 6070 	strh.w	r6, [sp, #112]	@ 0x70
 800516c:	f8ad 6074 	strh.w	r6, [sp, #116]	@ 0x74
 8005170:	f8ad 7078 	strh.w	r7, [sp, #120]	@ 0x78
 8005174:	f00a ffae 	bl	80100d4 <_ZN8touchgfx6Slider10setBitmapsERKNS_6BitmapES3_S3_>
    slider1.setupHorizontalSlider(16, 11, 0, 0, 200);
 8005178:	462b      	mov	r3, r5
 800517a:	9806      	ldr	r0, [sp, #24]
 800517c:	220b      	movs	r2, #11
 800517e:	2110      	movs	r1, #16
 8005180:	e9cd 5a00 	strd	r5, sl, [sp]
 8005184:	f00a fec7 	bl	800ff16 <_ZN8touchgfx6Slider21setupHorizontalSliderEsssss>
    slider1.setValueRange(0, 200);
 8005188:	4652      	mov	r2, sl
 800518a:	4629      	mov	r1, r5
 800518c:	9806      	ldr	r0, [sp, #24]
 800518e:	f00a fd80 	bl	800fc92 <_ZN8touchgfx6Slider13setValueRangeEss>
    slider1.setValue(0);
 8005192:	4629      	mov	r1, r5
 8005194:	9806      	ldr	r0, [sp, #24]
 8005196:	f00a fd44 	bl	800fc22 <_ZN8touchgfx6Slider8setValueEs>
    slider1.setNewValueCallback(sliderValueChangedCallback);
 800519a:	f504 5375 	add.w	r3, r4, #15680	@ 0x3d40
 800519e:	9906      	ldr	r1, [sp, #24]
 80051a0:	4658      	mov	r0, fp
 80051a2:	331c      	adds	r3, #28
     *
     * @see GenericCallback
     */
    void setNewValueCallback(GenericCallback<const Slider&, int>& callback)
    {
        newValueCallback = &callback;
 80051a4:	f8c4 3824 	str.w	r3, [r4, #2084]	@ 0x824
 80051a8:	f00a faa5 	bl	800f6f6 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    digitalClock1.setPosition(277, 10, 250, 30);
 80051ac:	231e      	movs	r3, #30
 80051ae:	4642      	mov	r2, r8
 80051b0:	9807      	ldr	r0, [sp, #28]
 80051b2:	9300      	str	r3, [sp, #0]
 80051b4:	f240 1115 	movw	r1, #277	@ 0x115
 80051b8:	23fa      	movs	r3, #250	@ 0xfa
 80051ba:	f7fe fde1 	bl	8003d80 <_ZN8touchgfx8Drawable11setPositionEssss>
    digitalClock1.setColor(touchgfx::Color::getColorFromRGB(102, 102, 102));
 80051be:	9807      	ldr	r0, [sp, #28]
 80051c0:	492c      	ldr	r1, [pc, #176]	@ (8005274 <_ZN23graphing_ScreenViewBaseC1Ev+0x978>)
 80051c2:	f00a f911 	bl	800f3e8 <_ZN8touchgfx12DigitalClock8setColorENS_9colortypeE>
    digitalClock1.setTypedText(touchgfx::TypedText(T___SINGLEUSE_9ZRH));
 80051c6:	a91e      	add	r1, sp, #120	@ 0x78
 80051c8:	9807      	ldr	r0, [sp, #28]
 80051ca:	f8cd 9078 	str.w	r9, [sp, #120]	@ 0x78
 80051ce:	f8ad 607c 	strh.w	r6, [sp, #124]	@ 0x7c
 80051d2:	f00a f91c 	bl	800f40e <_ZN8touchgfx12DigitalClock12setTypedTextENS_9TypedTextE>
    digitalClock1.displayLeadingZeroForHourIndicator(true);
 80051d6:	4639      	mov	r1, r7
 80051d8:	9807      	ldr	r0, [sp, #28]
 80051da:	f00a fa15 	bl	800f608 <_ZN8touchgfx12DigitalClock34displayLeadingZeroForHourIndicatorEb>
    digitalClock1.setTime12Hour(10, 10, 0, true);
 80051de:	462b      	mov	r3, r5
 80051e0:	4642      	mov	r2, r8
 80051e2:	4641      	mov	r1, r8
 80051e4:	9807      	ldr	r0, [sp, #28]
     *
     * @see DisplayMode, getDisplayMode
     */
    virtual void setDisplayMode(DisplayMode dm)
    {
        displayMode = dm;
 80051e6:	f884 6857 	strb.w	r6, [r4, #2135]	@ 0x857
 80051ea:	9700      	str	r7, [sp, #0]
 80051ec:	f00a fa29 	bl	800f642 <_ZN8touchgfx13AbstractClock13setTime12HourEhhhb>
 80051f0:	9907      	ldr	r1, [sp, #28]
 80051f2:	4658      	mov	r0, fp
 80051f4:	f00a fa7f 	bl	800f6f6 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    battery_level.setXY(619, 13);
 80051f8:	9804      	ldr	r0, [sp, #16]
 80051fa:	220d      	movs	r2, #13
 80051fc:	f240 216b 	movw	r1, #619	@ 0x26b
 8005200:	f7fe fdb1 	bl	8003d66 <_ZN8touchgfx8Drawable5setXYEss>
    battery_level.setProgressIndicatorPosition(0, 0, 163, 388);
 8005204:	f44f 73c2 	mov.w	r3, #388	@ 0x184
 8005208:	462a      	mov	r2, r5
 800520a:	4629      	mov	r1, r5
 800520c:	9804      	ldr	r0, [sp, #16]
 800520e:	9300      	str	r3, [sp, #0]
 8005210:	23a3      	movs	r3, #163	@ 0xa3
 8005212:	f009 fd0b 	bl	800ec2c <_ZN8touchgfx13ImageProgress28setProgressIndicatorPositionEssss>
    battery_level.setRange(0, 100);
 8005216:	2264      	movs	r2, #100	@ 0x64
 8005218:	462b      	mov	r3, r5
 800521a:	4629      	mov	r1, r5
 800521c:	9804      	ldr	r0, [sp, #16]
 800521e:	9500      	str	r5, [sp, #0]
 8005220:	f009 feda 	bl	800efd8 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEiitt>
    battery_level.setDirection(touchgfx::AbstractDirectionProgress::UP);
 8005224:	9804      	ldr	r0, [sp, #16]
 8005226:	2103      	movs	r1, #3
 8005228:	f009 fcb9 	bl	800eb9e <_ZN8touchgfx25AbstractDirectionProgress12setDirectionENS0_13DirectionTypeE>
 800522c:	2304      	movs	r3, #4
    battery_level.setBackground(touchgfx::Bitmap(BITMAP_BATTERY_BG_ID));
 800522e:	a91e      	add	r1, sp, #120	@ 0x78
 8005230:	9804      	ldr	r0, [sp, #16]
 8005232:	f8ad 3078 	strh.w	r3, [sp, #120]	@ 0x78
 8005236:	f00a f823 	bl	800f280 <_ZN8touchgfx25AbstractProgressIndicator13setBackgroundERKNS_6BitmapE>
    battery_level.setBitmap(BITMAP_BATTERY_FILL_ID);
 800523a:	9804      	ldr	r0, [sp, #16]
 800523c:	2105      	movs	r1, #5
 800523e:	f009 fce2 	bl	800ec06 <_ZN8touchgfx13ImageProgress9setBitmapEt>
    battery_level.setValue(60);
 8005242:	9804      	ldr	r0, [sp, #16]
 8005244:	213c      	movs	r1, #60	@ 0x3c
 8005246:	f009 fd09 	bl	800ec5c <_ZN8touchgfx13ImageProgress8setValueEi>
    battery_level.setAnchorAtZero(true);
 800524a:	4639      	mov	r1, r7
 800524c:	9804      	ldr	r0, [sp, #16]
 800524e:	f009 fcbb 	bl	800ebc8 <_ZN8touchgfx13ImageProgress15setAnchorAtZeroEb>
 8005252:	9904      	ldr	r1, [sp, #16]
 8005254:	4658      	mov	r0, fp
 8005256:	f00a fa4e 	bl	800f6f6 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    right_container1.setXY(2, 1);
 800525a:	463a      	mov	r2, r7
 800525c:	4631      	mov	r1, r6
 800525e:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 8005260:	f7fe fd81 	bl	8003d66 <_ZN8touchgfx8Drawable5setXYEss>
 8005264:	4658      	mov	r0, fp
 8005266:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 8005268:	f00a fa45 	bl	800f6f6 <_ZN8touchgfx9Container3addERNS_8DrawableE>
}
 800526c:	4620      	mov	r0, r4
 800526e:	b021      	add	sp, #132	@ 0x84
 8005270:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005274:	ff666666 	.word	0xff666666

08005278 <_ZN23graphing_ScreenViewBaseD1Ev>:
graphing_ScreenViewBase::~graphing_ScreenViewBase()
 8005278:	4b09      	ldr	r3, [pc, #36]	@ (80052a0 <_ZN23graphing_ScreenViewBaseD1Ev+0x28>)
 800527a:	b510      	push	{r4, lr}
 800527c:	6003      	str	r3, [r0, #0]
 800527e:	4604      	mov	r4, r0
    touchgfx::CanvasWidgetRenderer::resetBuffer();
 8005280:	f010 fc92 	bl	8015ba8 <_ZN8touchgfx20CanvasWidgetRenderer11resetBufferEv>

class right_container : public right_containerBase
{
public:
    right_container();
    virtual ~right_container() {}
 8005284:	4b07      	ldr	r3, [pc, #28]	@ (80052a4 <_ZN23graphing_ScreenViewBaseD1Ev+0x2c>)
 8005286:	f604 10d8 	addw	r0, r4, #2520	@ 0x9d8
 800528a:	f8c4 39d8 	str.w	r3, [r4, #2520]	@ 0x9d8
 800528e:	f000 fa01 	bl	8005694 <_ZN19right_containerBaseD1Ev>
}
 8005292:	f504 7096 	add.w	r0, r4, #300	@ 0x12c
 8005296:	f00a ff5b 	bl	8010150 <_ZN8touchgfx14SwipeContainerD1Ev>
 800529a:	4620      	mov	r0, r4
 800529c:	bd10      	pop	{r4, pc}
 800529e:	bf00      	nop
 80052a0:	0802b16c 	.word	0x0802b16c
 80052a4:	0802b3f8 	.word	0x0802b3f8

080052a8 <_ZN23graphing_ScreenViewBaseD0Ev>:
graphing_ScreenViewBase::~graphing_ScreenViewBase()
 80052a8:	b510      	push	{r4, lr}
 80052aa:	4604      	mov	r4, r0
}
 80052ac:	f7ff ffe4 	bl	8005278 <_ZN23graphing_ScreenViewBaseD1Ev>
 80052b0:	f643 516c 	movw	r1, #15724	@ 0x3d6c
 80052b4:	4620      	mov	r0, r4
 80052b6:	f021 fc6a 	bl	8026b8e <_ZdlPvj>
 80052ba:	4620      	mov	r0, r4
 80052bc:	bd10      	pop	{r4, pc}

080052be <_ZN19right_containerBase10initializeEv>:
}

void right_containerBase::initialize()
{

}
 80052be:	4770      	bx	lr

080052c0 <_ZN8touchgfx12FadeAnimatorINS_13ImageProgressEED1Ev>:
class FadeAnimator : public T
 80052c0:	4770      	bx	lr

080052c2 <_ZN8touchgfx12FadeAnimatorINS_13ImageProgressEE21setFadeAnimationDelayEt>:
        fadeAnimationDelay = delay;
 80052c2:	f8a0 1118 	strh.w	r1, [r0, #280]	@ 0x118
    }
 80052c6:	4770      	bx	lr

080052c8 <_ZNK8touchgfx12FadeAnimatorINS_13ImageProgressEE21getFadeAnimationDelayEv>:
    }
 80052c8:	f8b0 0118 	ldrh.w	r0, [r0, #280]	@ 0x118
 80052cc:	4770      	bx	lr

080052ce <_ZN8touchgfx12FadeAnimatorINS_13ImageProgressEED0Ev>:
class FadeAnimator : public T
 80052ce:	b510      	push	{r4, lr}
 80052d0:	4604      	mov	r4, r0
 80052d2:	f44f 7194 	mov.w	r1, #296	@ 0x128
 80052d6:	f021 fc5a 	bl	8026b8e <_ZdlPvj>
 80052da:	4620      	mov	r0, r4
 80052dc:	bd10      	pop	{r4, pc}

080052de <_ZNK8touchgfx25AbstractProgressIndicator17invalidateContentEv>:
        if (getAlpha() > 0)
 80052de:	6803      	ldr	r3, [r0, #0]
    virtual void invalidateContent() const
 80052e0:	b510      	push	{r4, lr}
        if (getAlpha() > 0)
 80052e2:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
    virtual void invalidateContent() const
 80052e6:	4604      	mov	r4, r0
        if (getAlpha() > 0)
 80052e8:	4798      	blx	r3
 80052ea:	b110      	cbz	r0, 80052f2 <_ZNK8touchgfx25AbstractProgressIndicator17invalidateContentEv+0x14>
            Container::invalidateContent();
 80052ec:	4620      	mov	r0, r4
 80052ee:	f7fe f85a 	bl	80033a6 <_ZNK8touchgfx8Drawable17invalidateContentEv>
        }
    }
 80052f2:	bd10      	pop	{r4, pc}

080052f4 <_ZN8touchgfx12FadeAnimatorINS_13ImageProgressEE21nextFadeAnimationStepEv>:
        if (fadeAnimationRunning)
 80052f4:	f890 3115 	ldrb.w	r3, [r0, #277]	@ 0x115
    void nextFadeAnimationStep()
 80052f8:	b570      	push	{r4, r5, r6, lr}
 80052fa:	4604      	mov	r4, r0
        if (fadeAnimationRunning)
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d052      	beq.n	80053a6 <_ZN8touchgfx12FadeAnimatorINS_13ImageProgressEE21nextFadeAnimationStepEv+0xb2>
            fadeAnimationCounter++;
 8005300:	f8b0 0116 	ldrh.w	r0, [r0, #278]	@ 0x116
            if (fadeAnimationCounter >= fadeAnimationDelay)
 8005304:	f8b4 3118 	ldrh.w	r3, [r4, #280]	@ 0x118
            fadeAnimationCounter++;
 8005308:	3001      	adds	r0, #1
 800530a:	b280      	uxth	r0, r0
            if (fadeAnimationCounter >= fadeAnimationDelay)
 800530c:	4298      	cmp	r0, r3
            fadeAnimationCounter++;
 800530e:	f8a4 0116 	strh.w	r0, [r4, #278]	@ 0x116
            if (fadeAnimationCounter >= fadeAnimationDelay)
 8005312:	d348      	bcc.n	80053a6 <_ZN8touchgfx12FadeAnimatorINS_13ImageProgressEE21nextFadeAnimationStepEv+0xb2>
                int16_t newAlpha = fadeAnimationStartAlpha + (int16_t)fadeAnimationAlphaEquation(actualAnimationCounter, 0, fadeAnimationEndAlpha - fadeAnimationStartAlpha, fadeAnimationDuration);
 8005314:	f8b4 511c 	ldrh.w	r5, [r4, #284]	@ 0x11c
 8005318:	1ac0      	subs	r0, r0, r3
 800531a:	f8b4 211e 	ldrh.w	r2, [r4, #286]	@ 0x11e
 800531e:	2100      	movs	r1, #0
 8005320:	f8d4 6120 	ldr.w	r6, [r4, #288]	@ 0x120
 8005324:	b280      	uxth	r0, r0
 8005326:	1b52      	subs	r2, r2, r5
 8005328:	f8b4 311a 	ldrh.w	r3, [r4, #282]	@ 0x11a
 800532c:	b212      	sxth	r2, r2
 800532e:	47b0      	blx	r6
 8005330:	4405      	add	r5, r0
                if (T::getAlpha() != newAlpha)
 8005332:	4620      	mov	r0, r4
                int16_t newAlpha = fadeAnimationStartAlpha + (int16_t)fadeAnimationAlphaEquation(actualAnimationCounter, 0, fadeAnimationEndAlpha - fadeAnimationStartAlpha, fadeAnimationDuration);
 8005334:	b2ae      	uxth	r6, r5
 8005336:	b22d      	sxth	r5, r5
                if (T::getAlpha() != newAlpha)
 8005338:	f009 fe91 	bl	800f05e <_ZNK8touchgfx25AbstractProgressIndicator8getAlphaEv>
 800533c:	42a8      	cmp	r0, r5
 800533e:	d007      	beq.n	8005350 <_ZN8touchgfx12FadeAnimatorINS_13ImageProgressEE21nextFadeAnimationStepEv+0x5c>
                    if (newAlpha == 0)
 8005340:	bb4d      	cbnz	r5, 8005396 <_ZN8touchgfx12FadeAnimatorINS_13ImageProgressEE21nextFadeAnimationStepEv+0xa2>
                        T::invalidateContent();
 8005342:	4620      	mov	r0, r4
 8005344:	f7ff ffcb 	bl	80052de <_ZNK8touchgfx25AbstractProgressIndicator17invalidateContentEv>
                        T::setAlpha((uint8_t)newAlpha);
 8005348:	4629      	mov	r1, r5
 800534a:	4620      	mov	r0, r4
 800534c:	f009 fc66 	bl	800ec1c <_ZN8touchgfx13ImageProgress8setAlphaEh>
                if (fadeAnimationCounter >= (uint32_t)(fadeAnimationDelay + fadeAnimationDuration))
 8005350:	f8b4 3118 	ldrh.w	r3, [r4, #280]	@ 0x118
 8005354:	f8b4 111a 	ldrh.w	r1, [r4, #282]	@ 0x11a
 8005358:	f8b4 2116 	ldrh.w	r2, [r4, #278]	@ 0x116
 800535c:	440b      	add	r3, r1
 800535e:	429a      	cmp	r2, r3
 8005360:	d321      	bcc.n	80053a6 <_ZN8touchgfx12FadeAnimatorINS_13ImageProgressEE21nextFadeAnimationStepEv+0xb2>
                    fadeAnimationRunning = false;
 8005362:	2300      	movs	r3, #0
 8005364:	f884 3115 	strb.w	r3, [r4, #277]	@ 0x115
                    fadeAnimationDuration = 0;
 8005368:	f8a4 311a 	strh.w	r3, [r4, #282]	@ 0x11a
                    Application::getInstance()->unregisterTimerWidget(this);
 800536c:	f012 f930 	bl	80175d0 <_ZN8touchgfx11Application11getInstanceEv>
 8005370:	4621      	mov	r1, r4
 8005372:	3004      	adds	r0, #4
 8005374:	f012 f951 	bl	801761a <_ZN8touchgfx11Application12TimerWidgets6removeEPKNS_8DrawableE>
                    if (fadeAnimationEndedCallback && fadeAnimationEndedCallback->isValid())
 8005378:	f8d4 0124 	ldr.w	r0, [r4, #292]	@ 0x124
 800537c:	b198      	cbz	r0, 80053a6 <_ZN8touchgfx12FadeAnimatorINS_13ImageProgressEE21nextFadeAnimationStepEv+0xb2>
 800537e:	6803      	ldr	r3, [r0, #0]
 8005380:	68db      	ldr	r3, [r3, #12]
 8005382:	4798      	blx	r3
 8005384:	b178      	cbz	r0, 80053a6 <_ZN8touchgfx12FadeAnimatorINS_13ImageProgressEE21nextFadeAnimationStepEv+0xb2>
                        fadeAnimationEndedCallback->execute(*this);
 8005386:	f8d4 0124 	ldr.w	r0, [r4, #292]	@ 0x124
 800538a:	4621      	mov	r1, r4
 800538c:	6803      	ldr	r3, [r0, #0]
    }
 800538e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
                        fadeAnimationEndedCallback->execute(*this);
 8005392:	689b      	ldr	r3, [r3, #8]
 8005394:	4718      	bx	r3
                        T::setAlpha((uint8_t)newAlpha);
 8005396:	4620      	mov	r0, r4
 8005398:	b2f1      	uxtb	r1, r6
 800539a:	f009 fc3f 	bl	800ec1c <_ZN8touchgfx13ImageProgress8setAlphaEh>
                        T::invalidateContent();
 800539e:	4620      	mov	r0, r4
 80053a0:	f7ff ff9d 	bl	80052de <_ZNK8touchgfx25AbstractProgressIndicator17invalidateContentEv>
 80053a4:	e7d4      	b.n	8005350 <_ZN8touchgfx12FadeAnimatorINS_13ImageProgressEE21nextFadeAnimationStepEv+0x5c>
    }
 80053a6:	bd70      	pop	{r4, r5, r6, pc}

080053a8 <_ZN8touchgfx12FadeAnimatorINS_13ImageProgressEE15handleTickEventEv>:
    virtual void handleTickEvent()
 80053a8:	b510      	push	{r4, lr}
 80053aa:	4604      	mov	r4, r0
        T::handleTickEvent();
 80053ac:	f009 fee6 	bl	800f17c <_ZN8touchgfx25AbstractProgressIndicator15handleTickEventEv>
        nextFadeAnimationStep();
 80053b0:	4620      	mov	r0, r4
 80053b2:	f7ff ff9f 	bl	80052f4 <_ZN8touchgfx12FadeAnimatorINS_13ImageProgressEE21nextFadeAnimationStepEv>
    }
 80053b6:	bd10      	pop	{r4, pc}

080053b8 <_ZN19right_containerBaseC1Ev>:
right_containerBase::right_containerBase()
 80053b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80053bc:	4604      	mov	r4, r0
 80053be:	b08d      	sub	sp, #52	@ 0x34
 80053c0:	f7ff f87a 	bl	80044b8 <_ZN8touchgfx9ContainerC1Ev>
 80053c4:	4ba5      	ldr	r3, [pc, #660]	@ (800565c <_ZN19right_containerBaseC1Ev+0x2a4>)
 80053c6:	4626      	mov	r6, r4
 80053c8:	f504 7b92 	add.w	fp, r4, #292	@ 0x124
 80053cc:	f504 78a8 	add.w	r8, r4, #336	@ 0x150
          fadeAnimationRunning(false),
 80053d0:	2500      	movs	r5, #0
 80053d2:	f846 3b2c 	str.w	r3, [r6], #44
 80053d6:	4630      	mov	r0, r6
 80053d8:	f00a ffd0 	bl	801037c <_ZN8touchgfx14SwipeContainerC1Ev>
 80053dc:	4658      	mov	r0, fp
 80053de:	f7ff f86b 	bl	80044b8 <_ZN8touchgfx9ContainerC1Ev>
          fadeAnimationEndedCallback(0)
 80053e2:	4640      	mov	r0, r8
 80053e4:	f009 fd74 	bl	800eed0 <_ZN8touchgfx13ImageProgressC1Ev>
 80053e8:	4b9d      	ldr	r3, [pc, #628]	@ (8005660 <_ZN19right_containerBaseC1Ev+0x2a8>)
 80053ea:	f504 773c 	add.w	r7, r4, #752	@ 0x2f0
 80053ee:	f504 6981 	add.w	r9, r4, #1032	@ 0x408
 80053f2:	f8c4 3150 	str.w	r3, [r4, #336]	@ 0x150
          touchable(false),
 80053f6:	f44f 7380 	mov.w	r3, #256	@ 0x100
          fadeAnimationRunning(false),
 80053fa:	f884 5265 	strb.w	r5, [r4, #613]	@ 0x265
 80053fe:	f504 7a1e 	add.w	sl, r4, #632	@ 0x278
 8005402:	f8a4 329c 	strh.w	r3, [r4, #668]	@ 0x29c
 8005406:	4b97      	ldr	r3, [pc, #604]	@ (8005664 <_ZN19right_containerBaseC1Ev+0x2ac>)
          fadeAnimationCounter(0),
 8005408:	f8a4 5266 	strh.w	r5, [r4, #614]	@ 0x266
 800540c:	f8c4 32a0 	str.w	r3, [r4, #672]	@ 0x2a0
 8005410:	f64f 73ff 	movw	r3, #65535	@ 0xffff
          fadeAnimationDelay(0),
 8005414:	f8a4 5268 	strh.w	r5, [r4, #616]	@ 0x268
 8005418:	f8a4 32a4 	strh.w	r3, [r4, #676]	@ 0x2a4
        : Widget(), typedText(TYPED_TEXT_INVALID), color(0), linespace(0), alpha(255), indentation(0), rotation(TEXT_ROTATE_0), wideTextAction(WIDE_TEXT_NONE), boundingArea()
 800541c:	f44f 037f 	mov.w	r3, #16711680	@ 0xff0000
          fadeAnimationEndedCallback(0)
 8005420:	f8c4 5274 	str.w	r5, [r4, #628]	@ 0x274
 8005424:	f8c4 32ac 	str.w	r3, [r4, #684]	@ 0x2ac
        : TextAreaWithWildcardBase(), wc1(0)
 8005428:	4b8f      	ldr	r3, [pc, #572]	@ (8005668 <_ZN19right_containerBaseC1Ev+0x2b0>)
        : color(col)
 800542a:	f8c4 52a8 	str.w	r5, [r4, #680]	@ 0x2a8
 800542e:	f8c4 3278 	str.w	r3, [r4, #632]	@ 0x278
        : x(rectX), y(rectY), width(rectWidth), height(rectHeight)
 8005432:	f04f 33ff 	mov.w	r3, #4294967295
 8005436:	f8a4 52b0 	strh.w	r5, [r4, #688]	@ 0x2b0
 800543a:	f8c4 52b4 	str.w	r5, [r4, #692]	@ 0x2b4
 800543e:	f8c4 52c0 	str.w	r5, [r4, #704]	@ 0x2c0
              text(0)
 8005442:	e9c4 35ae 	strd	r3, r5, [r4, #696]	@ 0x2b8
 8005446:	f504 7331 	add.w	r3, r4, #708	@ 0x2c4
        : x(0), y(0), width(0), height(0)
 800544a:	e9c4 559f 	strd	r5, r5, [r4, #636]	@ 0x27c
 800544e:	4618      	mov	r0, r3
 8005450:	9303      	str	r3, [sp, #12]
 8005452:	e9c4 55a1 	strd	r5, r5, [r4, #644]	@ 0x284
          nextSibling(0),
 8005456:	e9c4 55a3 	strd	r5, r5, [r4, #652]	@ 0x28c
          cachedAbsX(0),
 800545a:	e9c4 55a5 	strd	r5, r5, [r4, #660]	@ 0x294
 800545e:	f7ff f82b 	bl	80044b8 <_ZN8touchgfx9ContainerC1Ev>
 8005462:	4638      	mov	r0, r7
 8005464:	f009 fd34 	bl	800eed0 <_ZN8touchgfx13ImageProgressC1Ev>
 8005468:	4648      	mov	r0, r9
 800546a:	f7ff f825 	bl	80044b8 <_ZN8touchgfx9ContainerC1Ev>
        rect.width = width;
 800546e:	4b7f      	ldr	r3, [pc, #508]	@ (800566c <_ZN19right_containerBaseC1Ev+0x2b4>)
    page1.setXY(0, 0);
 8005470:	462a      	mov	r2, r5
 8005472:	4629      	mov	r1, r5
 8005474:	4630      	mov	r0, r6
 8005476:	60a3      	str	r3, [r4, #8]
 8005478:	f7fe fc75 	bl	8003d66 <_ZN8touchgfx8Drawable5setXYEss>
 800547c:	2346      	movs	r3, #70	@ 0x46
    page1.setPageIndicatorBitmaps(touchgfx::Bitmap(BITMAP_SWIPE_CONTAINER_PAGER_ID), touchgfx::Bitmap(BITMAP_SWIPE_CONTAINER_PAGER_ID));
 800547e:	aa0a      	add	r2, sp, #40	@ 0x28
 8005480:	a909      	add	r1, sp, #36	@ 0x24
 8005482:	4630      	mov	r0, r6
 8005484:	f8ad 3024 	strh.w	r3, [sp, #36]	@ 0x24
 8005488:	f8ad 3028 	strh.w	r3, [sp, #40]	@ 0x28
 800548c:	f00b f818 	bl	80104c0 <_ZN8touchgfx14SwipeContainer23setPageIndicatorBitmapsERKNS_6BitmapES3_>
    page1.setPageIndicatorXY(0, 0);
 8005490:	462a      	mov	r2, r5
 8005492:	4629      	mov	r1, r5
 8005494:	4630      	mov	r0, r6
 8005496:	f00a febd 	bl	8010214 <_ZN8touchgfx14SwipeContainer18setPageIndicatorXYEss>
    page1.setSwipeCutoff(50);
 800549a:	2132      	movs	r1, #50	@ 0x32
 800549c:	4630      	mov	r0, r6
 800549e:	f00a fe4d 	bl	801013c <_ZN8touchgfx14SwipeContainer14setSwipeCutoffEt>
    page1.setEndSwipeElasticWidth(50);
 80054a2:	2132      	movs	r1, #50	@ 0x32
 80054a4:	4630      	mov	r0, r6
 80054a6:	f00a feb3 	bl	8010210 <_ZN8touchgfx14SwipeContainer23setEndSwipeElasticWidthEt>
 80054aa:	4b70      	ldr	r3, [pc, #448]	@ (800566c <_ZN19right_containerBaseC1Ev+0x2b4>)
    temp_progress.setXY(4, 0);
 80054ac:	4640      	mov	r0, r8
 80054ae:	462a      	mov	r2, r5
 80054b0:	2104      	movs	r1, #4
 80054b2:	f8c4 312c 	str.w	r3, [r4, #300]	@ 0x12c
 80054b6:	f7fe fc56 	bl	8003d66 <_ZN8touchgfx8Drawable5setXYEss>
    temp_progress.setProgressIndicatorPosition(0, 0, 163, 388);
 80054ba:	f44f 73c2 	mov.w	r3, #388	@ 0x184
 80054be:	4640      	mov	r0, r8
 80054c0:	462a      	mov	r2, r5
 80054c2:	4629      	mov	r1, r5
 80054c4:	9300      	str	r3, [sp, #0]
 80054c6:	23a3      	movs	r3, #163	@ 0xa3
 80054c8:	f009 fbb0 	bl	800ec2c <_ZN8touchgfx13ImageProgress28setProgressIndicatorPositionEssss>
    temp_progress.setRange(0, 100);
 80054cc:	2264      	movs	r2, #100	@ 0x64
 80054ce:	462b      	mov	r3, r5
 80054d0:	4640      	mov	r0, r8
 80054d2:	4629      	mov	r1, r5
 80054d4:	9500      	str	r5, [sp, #0]
 80054d6:	f009 fd7f 	bl	800efd8 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEiitt>
    temp_progress.setDirection(touchgfx::AbstractDirectionProgress::UP);
 80054da:	4640      	mov	r0, r8
 80054dc:	2103      	movs	r1, #3
 80054de:	f009 fb5e 	bl	800eb9e <_ZN8touchgfx25AbstractDirectionProgress12setDirectionENS0_13DirectionTypeE>
 80054e2:	2348      	movs	r3, #72	@ 0x48
    temp_progress.setBackground(touchgfx::Bitmap(BITMAP_TEMP_BG_ID));
 80054e4:	4640      	mov	r0, r8
 80054e6:	a90a      	add	r1, sp, #40	@ 0x28
 80054e8:	f8ad 3028 	strh.w	r3, [sp, #40]	@ 0x28
 80054ec:	f009 fec8 	bl	800f280 <_ZN8touchgfx25AbstractProgressIndicator13setBackgroundERKNS_6BitmapE>
    temp_progress.setBitmap(BITMAP_TEMP_COLOR_ID);
 80054f0:	4640      	mov	r0, r8
 80054f2:	214a      	movs	r1, #74	@ 0x4a
 80054f4:	f009 fb87 	bl	800ec06 <_ZN8touchgfx13ImageProgress9setBitmapEt>
    temp_progress.setValue(63);
 80054f8:	4640      	mov	r0, r8
 80054fa:	213f      	movs	r1, #63	@ 0x3f
 80054fc:	f009 fbae 	bl	800ec5c <_ZN8touchgfx13ImageProgress8setValueEi>
    temp_progress.setAnchorAtZero(true);
 8005500:	4640      	mov	r0, r8
 8005502:	2101      	movs	r1, #1
 8005504:	f009 fb60 	bl	800ebc8 <_ZN8touchgfx13ImageProgress15setAnchorAtZeroEb>
    right_temp_page.add(temp_progress);
 8005508:	4641      	mov	r1, r8
 800550a:	4658      	mov	r0, fp
        boundingArea = calculateBoundingArea();
 800550c:	f10d 0810 	add.w	r8, sp, #16
 8005510:	f00a f8f1 	bl	800f6f6 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    temp_text_area.setXY(84, 203);
 8005514:	22cb      	movs	r2, #203	@ 0xcb
 8005516:	2154      	movs	r1, #84	@ 0x54
 8005518:	4650      	mov	r0, sl
 800551a:	f7fe fc24 	bl	8003d66 <_ZN8touchgfx8Drawable5setXYEss>
        color = newColor;
 800551e:	4b54      	ldr	r3, [pc, #336]	@ (8005670 <_ZN19right_containerBaseC1Ev+0x2b8>)
        boundingArea = calculateBoundingArea();
 8005520:	4640      	mov	r0, r8
 8005522:	4651      	mov	r1, sl
        color = newColor;
 8005524:	f8c4 32a8 	str.w	r3, [r4, #680]	@ 0x2a8
        boundingArea = calculateBoundingArea();
 8005528:	f8d4 3278 	ldr.w	r3, [r4, #632]	@ 0x278
        linespace = space;
 800552c:	f8a4 52ac 	strh.w	r5, [r4, #684]	@ 0x2ac
        boundingArea = calculateBoundingArea();
 8005530:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005534:	4798      	blx	r3
 8005536:	f504 732d 	add.w	r3, r4, #692	@ 0x2b4
 800553a:	e898 0007 	ldmia.w	r8, {r0, r1, r2}
 800553e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 8005542:	4b4c      	ldr	r3, [pc, #304]	@ (8005674 <_ZN19right_containerBaseC1Ev+0x2bc>)
    Unicode::snprintf(temp_text_areaBuffer, TEMP_TEXT_AREA_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_QW5T).getText());
 8005544:	f204 4834 	addw	r8, r4, #1076	@ 0x434
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	b92b      	cbnz	r3, 8005558 <_ZN19right_containerBaseC1Ev+0x1a0>
 800554c:	4b4a      	ldr	r3, [pc, #296]	@ (8005678 <_ZN19right_containerBaseC1Ev+0x2c0>)
 800554e:	2160      	movs	r1, #96	@ 0x60
 8005550:	4a4a      	ldr	r2, [pc, #296]	@ (800567c <_ZN19right_containerBaseC1Ev+0x2c4>)
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
 8005552:	484b      	ldr	r0, [pc, #300]	@ (8005680 <_ZN19right_containerBaseC1Ev+0x2c8>)
 8005554:	f021 fe94 	bl	8027280 <__assert_func>
        return typedTextId < numberOfTypedTexts;
 8005558:	4b4a      	ldr	r3, [pc, #296]	@ (8005684 <_ZN19right_containerBaseC1Ev+0x2cc>)
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
 800555a:	881b      	ldrh	r3, [r3, #0]
 800555c:	b91b      	cbnz	r3, 8005566 <_ZN19right_containerBaseC1Ev+0x1ae>
 800555e:	4b4a      	ldr	r3, [pc, #296]	@ (8005688 <_ZN19right_containerBaseC1Ev+0x2d0>)
 8005560:	2161      	movs	r1, #97	@ 0x61
 8005562:	4a46      	ldr	r2, [pc, #280]	@ (800567c <_ZN19right_containerBaseC1Ev+0x2c4>)
 8005564:	e7f5      	b.n	8005552 <_ZN19right_containerBaseC1Ev+0x19a>
        return texts->getText(typedTextId);
 8005566:	4b49      	ldr	r3, [pc, #292]	@ (800568c <_ZN19right_containerBaseC1Ev+0x2d4>)
 8005568:	4629      	mov	r1, r5
 800556a:	6818      	ldr	r0, [r3, #0]
 800556c:	f7fe fdd8 	bl	8004120 <_ZNK8touchgfx5Texts7getTextEt>
 8005570:	4a47      	ldr	r2, [pc, #284]	@ (8005690 <_ZN19right_containerBaseC1Ev+0x2d8>)
 8005572:	4603      	mov	r3, r0
 8005574:	210a      	movs	r1, #10
 8005576:	4640      	mov	r0, r8
 8005578:	f015 fccc 	bl	801af14 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    temp_text_area.resizeToCurrentText();
 800557c:	4650      	mov	r0, sl
        wc1 = value;
 800557e:	f8c4 82c0 	str.w	r8, [r4, #704]	@ 0x2c0
        : typedTextId(id)
 8005582:	f04f 0801 	mov.w	r8, #1
 8005586:	f00e ffc1 	bl	801450c <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
 800558a:	4b36      	ldr	r3, [pc, #216]	@ (8005664 <_ZN19right_containerBaseC1Ev+0x2ac>)
    temp_text_area.setTypedText(touchgfx::TypedText(T___SINGLEUSE_3MX6));
 800558c:	a90a      	add	r1, sp, #40	@ 0x28
 800558e:	4650      	mov	r0, sl
 8005590:	930a      	str	r3, [sp, #40]	@ 0x28
 8005592:	f8ad 802c 	strh.w	r8, [sp, #44]	@ 0x2c
 8005596:	f00e ffd9 	bl	801454c <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
    right_temp_page.add(temp_text_area);
 800559a:	4651      	mov	r1, sl
 800559c:	4658      	mov	r0, fp
 800559e:	f00a f8aa 	bl	800f6f6 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    page1.add(right_temp_page);
 80055a2:	4659      	mov	r1, fp
 80055a4:	4630      	mov	r0, r6
    gauge_left_progress.setProgressIndicatorPosition(0, 0, 256, 396);
 80055a6:	f44f 7ac6 	mov.w	sl, #396	@ 0x18c
    page1.add(right_temp_page);
 80055aa:	f00b f800 	bl	80105ae <_ZN8touchgfx14SwipeContainer3addERNS_8DrawableE>
 80055ae:	4b2f      	ldr	r3, [pc, #188]	@ (800566c <_ZN19right_containerBaseC1Ev+0x2b4>)
    gauge_left_progress.setXY(2, -4);
 80055b0:	4638      	mov	r0, r7
 80055b2:	f06f 0203 	mvn.w	r2, #3
 80055b6:	f8c4 32cc 	str.w	r3, [r4, #716]	@ 0x2cc
 80055ba:	2102      	movs	r1, #2
 80055bc:	f7fe fbd3 	bl	8003d66 <_ZN8touchgfx8Drawable5setXYEss>
    gauge_left_progress.setProgressIndicatorPosition(0, 0, 256, 396);
 80055c0:	462a      	mov	r2, r5
 80055c2:	4629      	mov	r1, r5
 80055c4:	4638      	mov	r0, r7
 80055c6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80055ca:	f8cd a000 	str.w	sl, [sp]
 80055ce:	f009 fb2d 	bl	800ec2c <_ZN8touchgfx13ImageProgress28setProgressIndicatorPositionEssss>
    gauge_left_progress.setRange(0, 200);
 80055d2:	22c8      	movs	r2, #200	@ 0xc8
 80055d4:	462b      	mov	r3, r5
 80055d6:	4629      	mov	r1, r5
 80055d8:	4638      	mov	r0, r7
 80055da:	9500      	str	r5, [sp, #0]
 80055dc:	f009 fcfc 	bl	800efd8 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEiitt>
    gauge_left_progress.setDirection(touchgfx::AbstractDirectionProgress::UP);
 80055e0:	4638      	mov	r0, r7
 80055e2:	2103      	movs	r1, #3
 80055e4:	f009 fadb 	bl	800eb9e <_ZN8touchgfx25AbstractDirectionProgress12setDirectionENS0_13DirectionTypeE>
 80055e8:	2342      	movs	r3, #66	@ 0x42
    gauge_left_progress.setBackground(touchgfx::Bitmap(BITMAP_LEFT_GAUGE_BG_ID));
 80055ea:	a90a      	add	r1, sp, #40	@ 0x28
 80055ec:	4638      	mov	r0, r7
 80055ee:	f8ad 3028 	strh.w	r3, [sp, #40]	@ 0x28
 80055f2:	f009 fe45 	bl	800f280 <_ZN8touchgfx25AbstractProgressIndicator13setBackgroundERKNS_6BitmapE>
    gauge_left_progress.setBitmap(BITMAP_LEFT_GAUGE_FILL_ID);
 80055f6:	4638      	mov	r0, r7
 80055f8:	2143      	movs	r1, #67	@ 0x43
 80055fa:	f009 fb04 	bl	800ec06 <_ZN8touchgfx13ImageProgress9setBitmapEt>
    gauge_left_progress.setValue(100);
 80055fe:	4638      	mov	r0, r7
 8005600:	2164      	movs	r1, #100	@ 0x64
 8005602:	f009 fb2b 	bl	800ec5c <_ZN8touchgfx13ImageProgress8setValueEi>
    gauge_left_progress.setAnchorAtZero(true);
 8005606:	4641      	mov	r1, r8
 8005608:	4638      	mov	r0, r7
 800560a:	f009 fadd 	bl	800ebc8 <_ZN8touchgfx13ImageProgress15setAnchorAtZeroEb>
    left_gauge_page.add(gauge_left_progress);
 800560e:	4639      	mov	r1, r7
 8005610:	9803      	ldr	r0, [sp, #12]
 8005612:	f00a f870 	bl	800f6f6 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    page1.add(left_gauge_page);
 8005616:	9903      	ldr	r1, [sp, #12]
 8005618:	4630      	mov	r0, r6
 800561a:	f00a ffc8 	bl	80105ae <_ZN8touchgfx14SwipeContainer3addERNS_8DrawableE>
    page1.setSelectedPage(0);
 800561e:	4629      	mov	r1, r5
 8005620:	4630      	mov	r0, r6
 8005622:	f00a ffb5 	bl	8010590 <_ZN8touchgfx14SwipeContainer15setSelectedPageEh>
    add(page1);
 8005626:	4631      	mov	r1, r6
 8005628:	4620      	mov	r0, r4
 800562a:	f00a f864 	bl	800f6f6 <_ZN8touchgfx9Container3addERNS_8DrawableE>
        setXY(x, y);
 800562e:	462a      	mov	r2, r5
 8005630:	4629      	mov	r1, r5
 8005632:	4648      	mov	r0, r9
 8005634:	f7fe fb97 	bl	8003d66 <_ZN8touchgfx8Drawable5setXYEss>
        setWidth(width);
 8005638:	4648      	mov	r0, r9
 800563a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800563e:	f7fd fded 	bl	800321c <_ZN8touchgfx8Drawable8setWidthEs>
        setHeight(height);
 8005642:	4651      	mov	r1, sl
 8005644:	4648      	mov	r0, r9
 8005646:	f7fd fdeb 	bl	8003220 <_ZN8touchgfx8Drawable9setHeightEs>
    add(gauge_left);
 800564a:	4620      	mov	r0, r4
 800564c:	4649      	mov	r1, r9
 800564e:	f00a f852 	bl	800f6f6 <_ZN8touchgfx9Container3addERNS_8DrawableE>
}
 8005652:	4620      	mov	r0, r4
 8005654:	b00d      	add	sp, #52	@ 0x34
 8005656:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800565a:	bf00      	nop
 800565c:	0802b29c 	.word	0x0802b29c
 8005660:	0802b1a8 	.word	0x0802b1a8
 8005664:	0802a5c4 	.word	0x0802a5c4
 8005668:	0802ae80 	.word	0x0802ae80
 800566c:	018c0100 	.word	0x018c0100
 8005670:	ff6b6b6b 	.word	0xff6b6b6b
 8005674:	24028e78 	.word	0x24028e78
 8005678:	0802acb0 	.word	0x0802acb0
 800567c:	0802adc0 	.word	0x0802adc0
 8005680:	0802ad2d 	.word	0x0802ad2d
 8005684:	24028e7c 	.word	0x24028e7c
 8005688:	0802ad82 	.word	0x0802ad82
 800568c:	24028e84 	.word	0x24028e84
 8005690:	0802ae0b 	.word	0x0802ae0b

08005694 <_ZN19right_containerBaseD1Ev>:
right_containerBase::~right_containerBase()
 8005694:	4b04      	ldr	r3, [pc, #16]	@ (80056a8 <_ZN19right_containerBaseD1Ev+0x14>)
 8005696:	b510      	push	{r4, lr}
 8005698:	4604      	mov	r4, r0
 800569a:	f840 3b2c 	str.w	r3, [r0], #44
}
 800569e:	f00a fd57 	bl	8010150 <_ZN8touchgfx14SwipeContainerD1Ev>
 80056a2:	4620      	mov	r0, r4
 80056a4:	bd10      	pop	{r4, pc}
 80056a6:	bf00      	nop
 80056a8:	0802b29c 	.word	0x0802b29c

080056ac <_ZN19right_containerBaseD0Ev>:
right_containerBase::~right_containerBase()
 80056ac:	b510      	push	{r4, lr}
 80056ae:	4604      	mov	r4, r0
}
 80056b0:	f7ff fff0 	bl	8005694 <_ZN19right_containerBaseD1Ev>
 80056b4:	f44f 6189 	mov.w	r1, #1096	@ 0x448
 80056b8:	4620      	mov	r0, r4
 80056ba:	f021 fa68 	bl	8026b8e <_ZdlPvj>
 80056be:	4620      	mov	r0, r4
 80056c0:	bd10      	pop	{r4, pc}

080056c2 <_ZN19FrontendApplicationD1Ev>:

class FrontendApplication : public FrontendApplicationBase
{
public:
    FrontendApplication(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplication() { }
 80056c2:	4770      	bx	lr

080056c4 <_ZN19FrontendApplicationD0Ev>:
 80056c4:	b510      	push	{r4, lr}
 80056c6:	4604      	mov	r4, r0
 80056c8:	f44f 71ae 	mov.w	r1, #348	@ 0x15c
 80056cc:	f021 fa5f 	bl	8026b8e <_ZdlPvj>
 80056d0:	4620      	mov	r0, r4
 80056d2:	bd10      	pop	{r4, pc}

080056d4 <_ZN19FrontendApplication15handleTickEventEv>:

    virtual void handleTickEvent()
 80056d4:	b510      	push	{r4, lr}
 80056d6:	4604      	mov	r4, r0
    {
        model.tick();
 80056d8:	f8d0 0158 	ldr.w	r0, [r0, #344]	@ 0x158
 80056dc:	f000 f813 	bl	8005706 <_ZN5Model4tickEv>
        FrontendApplicationBase::handleTickEvent();
 80056e0:	4620      	mov	r0, r4
    }
 80056e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        FrontendApplicationBase::handleTickEvent();
 80056e6:	f012 b80f 	b.w	8017708 <_ZN8touchgfx11Application15handleTickEventEv>
	...

080056ec <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>:
#include <gui/common/FrontendApplication.hpp>

FrontendApplication::FrontendApplication(Model& m, FrontendHeap& heap)
 80056ec:	b510      	push	{r4, lr}
 80056ee:	4604      	mov	r4, r0
    : FrontendApplicationBase(m, heap)
 80056f0:	f7fe fa8e 	bl	8003c10 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>
 80056f4:	4b01      	ldr	r3, [pc, #4]	@ (80056fc <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap+0x10>)
{

}
 80056f6:	4620      	mov	r0, r4
    : FrontendApplicationBase(m, heap)
 80056f8:	6023      	str	r3, [r4, #0]
}
 80056fa:	bd10      	pop	{r4, pc}
 80056fc:	0802b330 	.word	0x0802b330

08005700 <_ZN5ModelC1Ev>:
#include <gui/model/Model.hpp>
#include <gui/model/ModelListener.hpp>

Model::Model() : modelListener(0)
 8005700:	2200      	movs	r2, #0
 8005702:	6002      	str	r2, [r0, #0]
{

}
 8005704:	4770      	bx	lr

08005706 <_ZN5Model4tickEv>:

void Model::tick()
{

}
 8005706:	4770      	bx	lr

08005708 <_ZN24graphing_ScreenPresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~graphing_ScreenPresenter() {}
 8005708:	4770      	bx	lr

0800570a <_ZThn4_N24graphing_ScreenPresenterD1Ev>:
 800570a:	3804      	subs	r0, #4
 800570c:	4770      	bx	lr

0800570e <_ZN24graphing_ScreenPresenter10deactivateEv>:
}

void graphing_ScreenPresenter::activate()
{

}
 800570e:	4770      	bx	lr

08005710 <_ZN24graphing_ScreenPresenterD0Ev>:
 8005710:	b510      	push	{r4, lr}
 8005712:	4604      	mov	r4, r0
 8005714:	2110      	movs	r1, #16
 8005716:	f021 fa3a 	bl	8026b8e <_ZdlPvj>
 800571a:	4620      	mov	r0, r4
 800571c:	bd10      	pop	{r4, pc}

0800571e <_ZThn4_N24graphing_ScreenPresenterD0Ev>:
 800571e:	f1a0 0004 	sub.w	r0, r0, #4
 8005722:	e7f5      	b.n	8005710 <_ZN24graphing_ScreenPresenterD0Ev>

08005724 <_ZN24graphing_ScreenPresenterC1ER19graphing_ScreenView>:
    ModelListener() : model(0) {}
 8005724:	2200      	movs	r2, #0
    : view(v)
 8005726:	60c1      	str	r1, [r0, #12]
 8005728:	6082      	str	r2, [r0, #8]
 800572a:	4a02      	ldr	r2, [pc, #8]	@ (8005734 <_ZN24graphing_ScreenPresenterC1ER19graphing_ScreenView+0x10>)
 800572c:	6002      	str	r2, [r0, #0]
 800572e:	3218      	adds	r2, #24
 8005730:	6042      	str	r2, [r0, #4]
}
 8005732:	4770      	bx	lr
 8005734:	0802b384 	.word	0x0802b384

08005738 <_ZN19graphing_ScreenView14tearDownScreenEv>:
}
//------------------------------------------------------------------------------------------------
void graphing_ScreenView::tearDownScreen()
{
    graphing_ScreenViewBase::tearDownScreen();
}
 8005738:	4770      	bx	lr

0800573a <_ZN19graphing_ScreenView9map_floatEfffff>:
//------------------------------------------------------------------------------------------------
float graphing_ScreenView::map_float(float x, float in_min, float in_max, float out_min, float out_max) {
    return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 800573a:	ee70 7a60 	vsub.f32	s15, s0, s1
 800573e:	ee32 2a61 	vsub.f32	s4, s4, s3
 8005742:	ee31 1a60 	vsub.f32	s2, s2, s1
 8005746:	ee67 7a82 	vmul.f32	s15, s15, s4
 800574a:	ee87 0a81 	vdiv.f32	s0, s15, s2
}
 800574e:	ee30 0a21 	vadd.f32	s0, s0, s3
 8005752:	4770      	bx	lr

08005754 <_ZN19graphing_ScreenView15handleTickEventEv>:
 
}
//------------------------------------------------------------------------------------------------
void graphing_ScreenView::handleTickEvent()
{
	tickCounter++;
 8005754:	f500 5340 	add.w	r3, r0, #12288	@ 0x3000
 8005758:	f8d3 2d6c 	ldr.w	r2, [r3, #3436]	@ 0xd6c
 800575c:	3201      	adds	r2, #1
{
 800575e:	b510      	push	{r4, lr}
	tickCounter++;
 8005760:	f8c3 2d6c 	str.w	r2, [r3, #3436]	@ 0xd6c
{
 8005764:	4604      	mov	r4, r0
    if(currentIntro != INTRO_NONE){
 8005766:	f893 3d80 	ldrb.w	r3, [r3, #3456]	@ 0xd80
 800576a:	2b03      	cmp	r3, #3
 800576c:	d002      	beq.n	8005774 <_ZN19graphing_ScreenView15handleTickEventEv+0x20>
        runIntros();
 800576e:	6803      	ldr	r3, [r0, #0]
 8005770:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005772:	4798      	blx	r3
    }
    updateClock();
 8005774:	6823      	ldr	r3, [r4, #0]
 8005776:	4620      	mov	r0, r4
 8005778:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
}
 800577a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    updateClock();
 800577e:	4718      	bx	r3

08005780 <_ZN19graphing_ScreenView23backGroundAnimationDoneEv>:
}
//------------------------------------------------------------------------------------------------
void graphing_ScreenView::backGroundAnimationDone()
{
    // run the intro animation
    currentIntro = INTRO_ELEMENTS;
 8005780:	f500 5040 	add.w	r0, r0, #12288	@ 0x3000
 8005784:	2300      	movs	r3, #0
 8005786:	f880 3d80 	strb.w	r3, [r0, #3456]	@ 0xd80
}
 800578a:	4770      	bx	lr

0800578c <_ZN19graphing_ScreenViewD1Ev>:
    int digitalHours;
    int digitalMinutes;
    int digitalSeconds;
    IntroType currentIntro = INTRO_NONE;
    graphing_ScreenView();
    virtual ~graphing_ScreenView() {}
 800578c:	4b03      	ldr	r3, [pc, #12]	@ (800579c <_ZN19graphing_ScreenViewD1Ev+0x10>)
 800578e:	b510      	push	{r4, lr}
 8005790:	4604      	mov	r4, r0
 8005792:	6003      	str	r3, [r0, #0]
 8005794:	f7ff fd70 	bl	8005278 <_ZN23graphing_ScreenViewBaseD1Ev>
 8005798:	4620      	mov	r0, r4
 800579a:	bd10      	pop	{r4, pc}
 800579c:	0802b3b0 	.word	0x0802b3b0

080057a0 <_ZN19graphing_ScreenViewD0Ev>:
 80057a0:	b510      	push	{r4, lr}
 80057a2:	4604      	mov	r4, r0
 80057a4:	f7ff fff2 	bl	800578c <_ZN19graphing_ScreenViewD1Ev>
 80057a8:	f643 5184 	movw	r1, #15748	@ 0x3d84
 80057ac:	4620      	mov	r0, r4
 80057ae:	f021 f9ee 	bl	8026b8e <_ZdlPvj>
 80057b2:	4620      	mov	r0, r4
 80057b4:	bd10      	pop	{r4, pc}
	...

080057b8 <_ZN19graphing_ScreenViewC1Ev>:
graphing_ScreenView::graphing_ScreenView()
 80057b8:	b510      	push	{r4, lr}
 80057ba:	4604      	mov	r4, r0
 80057bc:	f7ff f89e 	bl	80048fc <_ZN23graphing_ScreenViewBaseC1Ev>
 80057c0:	4b05      	ldr	r3, [pc, #20]	@ (80057d8 <_ZN19graphing_ScreenViewC1Ev+0x20>)
 80057c2:	2200      	movs	r2, #0
}
 80057c4:	4620      	mov	r0, r4
graphing_ScreenView::graphing_ScreenView()
 80057c6:	6023      	str	r3, [r4, #0]
 80057c8:	f504 5340 	add.w	r3, r4, #12288	@ 0x3000
 80057cc:	f883 2d70 	strb.w	r2, [r3, #3440]	@ 0xd70
 80057d0:	2203      	movs	r2, #3
 80057d2:	f883 2d80 	strb.w	r2, [r3, #3456]	@ 0xd80
}
 80057d6:	bd10      	pop	{r4, pc}
 80057d8:	0802b3b0 	.word	0x0802b3b0

080057dc <_ZN19graphing_ScreenView11setupScreenEv>:
{
 80057dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80057e0:	4604      	mov	r4, r0
    graphing_ScreenViewBase::setupScreen();
 80057e2:	f7fe fdfd 	bl	80043e0 <_ZN23graphing_ScreenViewBase11setupScreenEv>
    currentIntro = INTRO_NONE;
 80057e6:	2303      	movs	r3, #3
    gauge1.setValue(map_float(0,0.0,200.0,16.0,92.0)); 
 80057e8:	eddf 0a29 	vldr	s1, [pc, #164]	@ 8005890 <_ZN19graphing_ScreenView11setupScreenEv+0xb4>
    currentIntro = INTRO_NONE;
 80057ec:	f504 5540 	add.w	r5, r4, #12288	@ 0x3000
    gauge1.setValue(map_float(0,0.0,200.0,16.0,92.0)); 
 80057f0:	eef3 1a00 	vmov.f32	s3, #48	@ 0x41800000  16.0
 80057f4:	eeb0 0a60 	vmov.f32	s0, s1
 80057f8:	ed9f 2a26 	vldr	s4, [pc, #152]	@ 8005894 <_ZN19graphing_ScreenView11setupScreenEv+0xb8>
    currentIntro = INTRO_NONE;
 80057fc:	f885 3d80 	strb.w	r3, [r5, #3456]	@ 0xd80
    gauge1.setValue(map_float(0,0.0,200.0,16.0,92.0)); 
 8005800:	4620      	mov	r0, r4
 8005802:	6823      	ldr	r3, [r4, #0]
 8005804:	f504 7674 	add.w	r6, r4, #976	@ 0x3d0
 8005808:	ed9f 1a23 	vldr	s2, [pc, #140]	@ 8005898 <_ZN19graphing_ScreenView11setupScreenEv+0xbc>
    right_container1.setAlpha(0);
 800580c:	f604 17d8 	addw	r7, r4, #2520	@ 0x9d8
    gauge1.setValue(map_float(0,0.0,200.0,16.0,92.0)); 
 8005810:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    battery_level.setAlpha(0);
 8005812:	f504 680c 	add.w	r8, r4, #2240	@ 0x8c0
    gauge1.setValue(map_float(0,0.0,200.0,16.0,92.0)); 
 8005816:	4798      	blx	r3
 8005818:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800581c:	4630      	mov	r0, r6
 800581e:	ee17 1a90 	vmov	r1, s15
 8005822:	f00f f9ef 	bl	8014c04 <_ZN8touchgfx5Gauge8setValueEi>
    gauge1.setAlpha(0);
 8005826:	2100      	movs	r1, #0
 8005828:	4630      	mov	r0, r6
 800582a:	f00f f8cb 	bl	80149c4 <_ZN8touchgfx5Gauge8setAlphaEh>
    right_container1.setAlpha(0);
 800582e:	2100      	movs	r1, #0
 8005830:	4638      	mov	r0, r7
 8005832:	f000 f97b 	bl	8005b2c <_ZN15right_container8setAlphaEh>
    battery_level.setAlpha(0);
 8005836:	2100      	movs	r1, #0
 8005838:	4640      	mov	r0, r8
 800583a:	f009 f9ef 	bl	800ec1c <_ZN8touchgfx13ImageProgress8setAlphaEh>
 800583e:	2300      	movs	r3, #0
    gauge1.invalidate();
 8005840:	4630      	mov	r0, r6
 8005842:	f884 32b4 	strb.w	r3, [r4, #692]	@ 0x2b4
 8005846:	f884 3118 	strb.w	r3, [r4, #280]	@ 0x118
 800584a:	f012 ff84 	bl	8018756 <_ZNK8touchgfx8Drawable10invalidateEv>
    circle.invalidate();
 800584e:	f504 7023 	add.w	r0, r4, #652	@ 0x28c
 8005852:	f012 ff80 	bl	8018756 <_ZNK8touchgfx8Drawable10invalidateEv>
    background.invalidate();
 8005856:	f104 00f0 	add.w	r0, r4, #240	@ 0xf0
 800585a:	f012 ff7c 	bl	8018756 <_ZNK8touchgfx8Drawable10invalidateEv>
    digitalHours = digitalClock1.getCurrentHour();
 800585e:	f604 0428 	addw	r4, r4, #2088	@ 0x828
    battery_level.invalidate();
 8005862:	4640      	mov	r0, r8
 8005864:	f012 ff77 	bl	8018756 <_ZNK8touchgfx8Drawable10invalidateEv>
    right_container1.invalidate();
 8005868:	4638      	mov	r0, r7
 800586a:	f012 ff74 	bl	8018756 <_ZNK8touchgfx8Drawable10invalidateEv>
    digitalHours = digitalClock1.getCurrentHour();
 800586e:	4620      	mov	r0, r4
 8005870:	f009 ff18 	bl	800f6a4 <_ZNK8touchgfx13AbstractClock14getCurrentHourEv>
 8005874:	f8c5 0d74 	str.w	r0, [r5, #3444]	@ 0xd74
    digitalMinutes = digitalClock1.getCurrentMinute();
 8005878:	4620      	mov	r0, r4
 800587a:	f009 ff2c 	bl	800f6d6 <_ZNK8touchgfx13AbstractClock16getCurrentMinuteEv>
 800587e:	f8c5 0d78 	str.w	r0, [r5, #3448]	@ 0xd78
    digitalSeconds = digitalClock1.getCurrentSecond();
 8005882:	4620      	mov	r0, r4
 8005884:	f009 ff2a 	bl	800f6dc <_ZNK8touchgfx13AbstractClock16getCurrentSecondEv>
 8005888:	f8c5 0d7c 	str.w	r0, [r5, #3452]	@ 0xd7c
}
 800588c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005890:	00000000 	.word	0x00000000
 8005894:	42b80000 	.word	0x42b80000
 8005898:	43480000 	.word	0x43480000

0800589c <_ZN19graphing_ScreenView9runIntrosEv>:

void graphing_ScreenView::runIntros()
{
 800589c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    static int incr = 0;
    // run the intro animation
    switch (currentIntro)
 800589e:	f500 5640 	add.w	r6, r0, #12288	@ 0x3000
{
 80058a2:	4604      	mov	r4, r0
    switch (currentIntro)
 80058a4:	f896 3d80 	ldrb.w	r3, [r6, #3456]	@ 0xd80
 80058a8:	2b01      	cmp	r3, #1
 80058aa:	d028      	beq.n	80058fe <_ZN19graphing_ScreenView9runIntrosEv+0x62>
 80058ac:	2b02      	cmp	r3, #2
 80058ae:	d048      	beq.n	8005942 <_ZN19graphing_ScreenView9runIntrosEv+0xa6>
 80058b0:	b9fb      	cbnz	r3, 80058f2 <_ZN19graphing_ScreenView9runIntrosEv+0x56>
    {

    case INTRO_ELEMENTS:
        if(incr <=255)
 80058b2:	4d39      	ldr	r5, [pc, #228]	@ (8005998 <_ZN19graphing_ScreenView9runIntrosEv+0xfc>)
 80058b4:	6829      	ldr	r1, [r5, #0]
 80058b6:	29ff      	cmp	r1, #255	@ 0xff
 80058b8:	dc1c      	bgt.n	80058f4 <_ZN19graphing_ScreenView9runIntrosEv+0x58>
        {
            right_container1.setAlpha(incr);
 80058ba:	f600 17d8 	addw	r7, r0, #2520	@ 0x9d8
            battery_level.setAlpha(incr);
 80058be:	f504 660c 	add.w	r6, r4, #2240	@ 0x8c0
            right_container1.setAlpha(incr);
 80058c2:	b2c9      	uxtb	r1, r1
 80058c4:	4638      	mov	r0, r7
 80058c6:	f000 f931 	bl	8005b2c <_ZN15right_container8setAlphaEh>
            battery_level.setAlpha(incr);
 80058ca:	7829      	ldrb	r1, [r5, #0]
 80058cc:	4630      	mov	r0, r6
 80058ce:	f009 f9a5 	bl	800ec1c <_ZN8touchgfx13ImageProgress8setAlphaEh>
            circle.setAlpha(incr);
 80058d2:	682b      	ldr	r3, [r5, #0]
            right_container1.invalidate();
 80058d4:	4638      	mov	r0, r7
            circle.setAlpha(incr);
 80058d6:	f884 32b4 	strb.w	r3, [r4, #692]	@ 0x2b4
            right_container1.invalidate();
 80058da:	f012 ff3c 	bl	8018756 <_ZNK8touchgfx8Drawable10invalidateEv>
            battery_level.invalidate();
 80058de:	4630      	mov	r0, r6
 80058e0:	f012 ff39 	bl	8018756 <_ZNK8touchgfx8Drawable10invalidateEv>
            circle.invalidate();
 80058e4:	f504 7023 	add.w	r0, r4, #652	@ 0x28c
 80058e8:	f012 ff35 	bl	8018756 <_ZNK8touchgfx8Drawable10invalidateEv>
            incr+=5;
 80058ec:	682b      	ldr	r3, [r5, #0]
 80058ee:	3305      	adds	r3, #5
    case INTRO_GAUGE_DOWN:
        if((incr > 0))
        {
            //gauge1.setValue(gaugeVal);
            gauge1.setValue(map_float((float)incr,0.0,200.0,16.0,92.0));
            incr-=10;
 80058f0:	602b      	str	r3, [r5, #0]
        break;
    
    default:
        break;
    }
 80058f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            incr = 0;
 80058f4:	602b      	str	r3, [r5, #0]
            currentIntro = INTRO_GAUGE_UP;
 80058f6:	2301      	movs	r3, #1
            currentIntro = INTRO_NONE;
 80058f8:	f886 3d80 	strb.w	r3, [r6, #3456]	@ 0xd80
 80058fc:	e7f9      	b.n	80058f2 <_ZN19graphing_ScreenView9runIntrosEv+0x56>
        if((incr < 210))
 80058fe:	4d26      	ldr	r5, [pc, #152]	@ (8005998 <_ZN19graphing_ScreenView9runIntrosEv+0xfc>)
 8005900:	682b      	ldr	r3, [r5, #0]
 8005902:	2bd1      	cmp	r3, #209	@ 0xd1
 8005904:	dc19      	bgt.n	800593a <_ZN19graphing_ScreenView9runIntrosEv+0x9e>
            gauge1.setValue(map_float((float)incr,0.0,200.0,16.0,92.0));
 8005906:	ee07 3a90 	vmov	s15, r3
 800590a:	6802      	ldr	r2, [r0, #0]
 800590c:	eef3 1a00 	vmov.f32	s3, #48	@ 0x41800000  16.0
 8005910:	ed9f 2a22 	vldr	s4, [pc, #136]	@ 800599c <_ZN19graphing_ScreenView9runIntrosEv+0x100>
 8005914:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 8005918:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800591a:	ed9f 1a21 	vldr	s2, [pc, #132]	@ 80059a0 <_ZN19graphing_ScreenView9runIntrosEv+0x104>
 800591e:	eddf 0a21 	vldr	s1, [pc, #132]	@ 80059a4 <_ZN19graphing_ScreenView9runIntrosEv+0x108>
 8005922:	4790      	blx	r2
 8005924:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8005928:	f504 7074 	add.w	r0, r4, #976	@ 0x3d0
 800592c:	ee17 1a90 	vmov	r1, s15
 8005930:	f00f f968 	bl	8014c04 <_ZN8touchgfx5Gauge8setValueEi>
            incr+=10;
 8005934:	682b      	ldr	r3, [r5, #0]
 8005936:	330a      	adds	r3, #10
 8005938:	e7da      	b.n	80058f0 <_ZN19graphing_ScreenView9runIntrosEv+0x54>
            incr = 200;
 800593a:	23c8      	movs	r3, #200	@ 0xc8
 800593c:	602b      	str	r3, [r5, #0]
            currentIntro = INTRO_GAUGE_DOWN;
 800593e:	2302      	movs	r3, #2
 8005940:	e7da      	b.n	80058f8 <_ZN19graphing_ScreenView9runIntrosEv+0x5c>
        if((incr > 0))
 8005942:	4d15      	ldr	r5, [pc, #84]	@ (8005998 <_ZN19graphing_ScreenView9runIntrosEv+0xfc>)
            gauge1.setValue(map_float((float)incr,0.0,200.0,16.0,92.0));
 8005944:	eef3 1a00 	vmov.f32	s3, #48	@ 0x41800000  16.0
            gauge1.setValue(map_float((float)incr,0.0,200.0,16.0,92.0));
 8005948:	6803      	ldr	r3, [r0, #0]
 800594a:	f500 7774 	add.w	r7, r0, #976	@ 0x3d0
        if((incr > 0))
 800594e:	682a      	ldr	r2, [r5, #0]
            gauge1.setValue(map_float((float)incr,0.0,200.0,16.0,92.0));
 8005950:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
        if((incr > 0))
 8005952:	2a00      	cmp	r2, #0
            gauge1.setValue(map_float((float)incr,0.0,200.0,16.0,92.0));
 8005954:	ed9f 2a11 	vldr	s4, [pc, #68]	@ 800599c <_ZN19graphing_ScreenView9runIntrosEv+0x100>
 8005958:	ed9f 1a11 	vldr	s2, [pc, #68]	@ 80059a0 <_ZN19graphing_ScreenView9runIntrosEv+0x104>
 800595c:	eddf 0a11 	vldr	s1, [pc, #68]	@ 80059a4 <_ZN19graphing_ScreenView9runIntrosEv+0x108>
        if((incr > 0))
 8005960:	dd0e      	ble.n	8005980 <_ZN19graphing_ScreenView9runIntrosEv+0xe4>
            gauge1.setValue(map_float((float)incr,0.0,200.0,16.0,92.0));
 8005962:	ee07 2a90 	vmov	s15, r2
 8005966:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 800596a:	4798      	blx	r3
 800596c:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8005970:	4638      	mov	r0, r7
 8005972:	ee17 1a90 	vmov	r1, s15
 8005976:	f00f f945 	bl	8014c04 <_ZN8touchgfx5Gauge8setValueEi>
            incr-=10;
 800597a:	682b      	ldr	r3, [r5, #0]
 800597c:	3b0a      	subs	r3, #10
 800597e:	e7b7      	b.n	80058f0 <_ZN19graphing_ScreenView9runIntrosEv+0x54>
            gauge1.setValue(map_float(0.0,0.0,200.0,16.0,92.0));
 8005980:	eeb0 0a60 	vmov.f32	s0, s1
 8005984:	4798      	blx	r3
 8005986:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800598a:	4638      	mov	r0, r7
 800598c:	ee17 1a90 	vmov	r1, s15
 8005990:	f00f f938 	bl	8014c04 <_ZN8touchgfx5Gauge8setValueEi>
            currentIntro = INTRO_NONE;
 8005994:	2303      	movs	r3, #3
 8005996:	e7af      	b.n	80058f8 <_ZN19graphing_ScreenView9runIntrosEv+0x5c>
 8005998:	2400ee10 	.word	0x2400ee10
 800599c:	42b80000 	.word	0x42b80000
 80059a0:	43480000 	.word	0x43480000
 80059a4:	00000000 	.word	0x00000000

080059a8 <_ZN19graphing_ScreenView18sliderValueChangedEi>:
{
 80059a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    uint16_t speed = value;
 80059ac:	b28e      	uxth	r6, r1
{
 80059ae:	4604      	mov	r4, r0
    Unicode::snprintf(mphBuffer, 10, "%d", (int)speed);
 80059b0:	4a21      	ldr	r2, [pc, #132]	@ (8005a38 <_ZN19graphing_ScreenView18sliderValueChangedEi+0x90>)
 80059b2:	210a      	movs	r1, #10
 80059b4:	4633      	mov	r3, r6
 80059b6:	f500 6062 	add.w	r0, r0, #3616	@ 0xe20
 80059ba:	f015 faab 	bl	801af14 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    gauge1.setValue(map_float(speed,0.0,210.0,16.0,92.0)); 
 80059be:	ee07 6a90 	vmov	s15, r6
 80059c2:	6823      	ldr	r3, [r4, #0]
 80059c4:	eef3 1a00 	vmov.f32	s3, #48	@ 0x41800000  16.0
 80059c8:	ed9f 2a1c 	vldr	s4, [pc, #112]	@ 8005a3c <_ZN19graphing_ScreenView18sliderValueChangedEi+0x94>
 80059cc:	eeb8 0a67 	vcvt.f32.u32	s0, s15
 80059d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80059d2:	4620      	mov	r0, r4
 80059d4:	ed9f 1a1a 	vldr	s2, [pc, #104]	@ 8005a40 <_ZN19graphing_ScreenView18sliderValueChangedEi+0x98>
 80059d8:	f504 7774 	add.w	r7, r4, #976	@ 0x3d0
 80059dc:	eddf 0a19 	vldr	s1, [pc, #100]	@ 8005a44 <_ZN19graphing_ScreenView18sliderValueChangedEi+0x9c>
    right_container1.setTempProgressValue(speed);
 80059e0:	f604 18d8 	addw	r8, r4, #2520	@ 0x9d8
    gauge1.setValue(map_float(speed,0.0,210.0,16.0,92.0)); 
 80059e4:	4798      	blx	r3
 80059e6:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 80059ea:	4638      	mov	r0, r7
 80059ec:	ee17 1a90 	vmov	r1, s15
 80059f0:	f00f f908 	bl	8014c04 <_ZN8touchgfx5Gauge8setValueEi>
    battery_level.setValue(speed);
 80059f4:	4631      	mov	r1, r6
 80059f6:	f504 600c 	add.w	r0, r4, #2240	@ 0x8c0
 80059fa:	f009 f92f 	bl	800ec5c <_ZN8touchgfx13ImageProgress8setValueEi>
    right_container1.setTempProgressValue(speed);
 80059fe:	4631      	mov	r1, r6
 8005a00:	4640      	mov	r0, r8
 8005a02:	f000 f87d 	bl	8005b00 <_ZN15right_container20setTempProgressValueEi>
    right_container1.setLeftGaugeValue(speed);
 8005a06:	4631      	mov	r1, r6
 8005a08:	4640      	mov	r0, r8
 8005a0a:	f000 f884 	bl	8005b16 <_ZN15right_container17setLeftGaugeValueEi>
    if(speed < 80){
 8005a0e:	2e4f      	cmp	r6, #79	@ 0x4f
 8005a10:	d90f      	bls.n	8005a32 <_ZN19graphing_ScreenView18sliderValueChangedEi+0x8a>
    else if(speed < 145){
 8005a12:	4b0d      	ldr	r3, [pc, #52]	@ (8005a48 <_ZN19graphing_ScreenView18sliderValueChangedEi+0xa0>)
 8005a14:	4a0d      	ldr	r2, [pc, #52]	@ (8005a4c <_ZN19graphing_ScreenView18sliderValueChangedEi+0xa4>)
 8005a16:	2e90      	cmp	r6, #144	@ 0x90
 8005a18:	bf88      	it	hi
 8005a1a:	4613      	movhi	r3, r2
    mph.invalidate();
 8005a1c:	f504 7061 	add.w	r0, r4, #900	@ 0x384
        color = newColor;
 8005a20:	f8c4 33b4 	str.w	r3, [r4, #948]	@ 0x3b4
 8005a24:	f012 fe97 	bl	8018756 <_ZNK8touchgfx8Drawable10invalidateEv>
    gauge1.invalidate();
 8005a28:	4638      	mov	r0, r7
}
 8005a2a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    gauge1.invalidate();
 8005a2e:	f012 be92 	b.w	8018756 <_ZNK8touchgfx8Drawable10invalidateEv>
 8005a32:	4b07      	ldr	r3, [pc, #28]	@ (8005a50 <_ZN19graphing_ScreenView18sliderValueChangedEi+0xa8>)
 8005a34:	e7f2      	b.n	8005a1c <_ZN19graphing_ScreenView18sliderValueChangedEi+0x74>
 8005a36:	bf00      	nop
 8005a38:	0802b3a4 	.word	0x0802b3a4
 8005a3c:	42b80000 	.word	0x42b80000
 8005a40:	43520000 	.word	0x43520000
 8005a44:	00000000 	.word	0x00000000
 8005a48:	ff007e00 	.word	0xff007e00
 8005a4c:	ffc80000 	.word	0xffc80000
 8005a50:	ff666666 	.word	0xff666666

08005a54 <_ZN19graphing_ScreenView11updateClockEv>:
    if (tickCounter % 60 == 0)
 8005a54:	f500 5140 	add.w	r1, r0, #12288	@ 0x3000
{
 8005a58:	223c      	movs	r2, #60	@ 0x3c
 8005a5a:	f8d1 3d6c 	ldr.w	r3, [r1, #3436]	@ 0xd6c
 8005a5e:	b430      	push	{r4, r5}
 8005a60:	fbb3 f4f2 	udiv	r4, r3, r2
 8005a64:	fb02 3314 	mls	r3, r2, r4, r3
    if (tickCounter % 60 == 0)
 8005a68:	bb2b      	cbnz	r3, 8005ab6 <_ZN19graphing_ScreenView11updateClockEv+0x62>
        if (++digitalSeconds >= 60){
 8005a6a:	f8d1 5d7c 	ldr.w	r5, [r1, #3452]	@ 0xd7c
            if (++digitalMinutes >= 60)
 8005a6e:	f8d1 4d78 	ldr.w	r4, [r1, #3448]	@ 0xd78
        if (++digitalSeconds >= 60){
 8005a72:	3501      	adds	r5, #1
                if (++digitalHours >= 24)
 8005a74:	f8d1 2d74 	ldr.w	r2, [r1, #3444]	@ 0xd74
        if (++digitalSeconds >= 60){
 8005a78:	2d3b      	cmp	r5, #59	@ 0x3b
 8005a7a:	f8c1 5d7c 	str.w	r5, [r1, #3452]	@ 0xd7c
 8005a7e:	dd06      	ble.n	8005a8e <_ZN19graphing_ScreenView11updateClockEv+0x3a>
            if (++digitalMinutes >= 60)
 8005a80:	3401      	adds	r4, #1
            digitalSeconds = 0;
 8005a82:	f8c1 3d7c 	str.w	r3, [r1, #3452]	@ 0xd7c
            if (++digitalMinutes >= 60)
 8005a86:	2c3b      	cmp	r4, #59	@ 0x3b
 8005a88:	dc0c      	bgt.n	8005aa4 <_ZN19graphing_ScreenView11updateClockEv+0x50>
 8005a8a:	f8c1 4d78 	str.w	r4, [r1, #3448]	@ 0xd78
        digitalClock1.setTime24Hour(digitalHours, digitalMinutes, digitalSeconds);
 8005a8e:	f891 3d7c 	ldrb.w	r3, [r1, #3452]	@ 0xd7c
 8005a92:	f600 0028 	addw	r0, r0, #2088	@ 0x828
 8005a96:	f891 2d78 	ldrb.w	r2, [r1, #3448]	@ 0xd78
 8005a9a:	f891 1d74 	ldrb.w	r1, [r1, #3444]	@ 0xd74
}
 8005a9e:	bc30      	pop	{r4, r5}
        digitalClock1.setTime24Hour(digitalHours, digitalMinutes, digitalSeconds);
 8005aa0:	f009 bdb5 	b.w	800f60e <_ZN8touchgfx13AbstractClock13setTime24HourEhhh>
                if (++digitalHours >= 24)
 8005aa4:	3201      	adds	r2, #1
                digitalMinutes = 0;
 8005aa6:	f8c1 3d78 	str.w	r3, [r1, #3448]	@ 0xd78
                if (++digitalHours >= 24)
 8005aaa:	2a17      	cmp	r2, #23
 8005aac:	bfd8      	it	le
 8005aae:	4613      	movle	r3, r2
 8005ab0:	f8c1 3d74 	str.w	r3, [r1, #3444]	@ 0xd74
 8005ab4:	e7eb      	b.n	8005a8e <_ZN19graphing_ScreenView11updateClockEv+0x3a>
}
 8005ab6:	bc30      	pop	{r4, r5}
 8005ab8:	4770      	bx	lr
	...

08005abc <_ZN15right_containerD1Ev>:
 8005abc:	4b03      	ldr	r3, [pc, #12]	@ (8005acc <_ZN15right_containerD1Ev+0x10>)
 8005abe:	b510      	push	{r4, lr}
 8005ac0:	4604      	mov	r4, r0
 8005ac2:	6003      	str	r3, [r0, #0]
 8005ac4:	f7ff fde6 	bl	8005694 <_ZN19right_containerBaseD1Ev>
 8005ac8:	4620      	mov	r0, r4
 8005aca:	bd10      	pop	{r4, pc}
 8005acc:	0802b3f8 	.word	0x0802b3f8

08005ad0 <_ZN15right_containerD0Ev>:
 8005ad0:	b510      	push	{r4, lr}
 8005ad2:	4604      	mov	r4, r0
 8005ad4:	f7ff fff2 	bl	8005abc <_ZN15right_containerD1Ev>
 8005ad8:	f44f 6189 	mov.w	r1, #1096	@ 0x448
 8005adc:	4620      	mov	r0, r4
 8005ade:	f021 f856 	bl	8026b8e <_ZdlPvj>
 8005ae2:	4620      	mov	r0, r4
 8005ae4:	bd10      	pop	{r4, pc}
	...

08005ae8 <_ZN15right_containerC1Ev>:
#include <gui/containers/right_container.hpp>

right_container::right_container()
 8005ae8:	b510      	push	{r4, lr}
 8005aea:	4604      	mov	r4, r0
 8005aec:	f7ff fc64 	bl	80053b8 <_ZN19right_containerBaseC1Ev>
 8005af0:	4b01      	ldr	r3, [pc, #4]	@ (8005af8 <_ZN15right_containerC1Ev+0x10>)
{

}
 8005af2:	4620      	mov	r0, r4
right_container::right_container()
 8005af4:	6023      	str	r3, [r4, #0]
}
 8005af6:	bd10      	pop	{r4, pc}
 8005af8:	0802b3f8 	.word	0x0802b3f8

08005afc <_ZN15right_container10initializeEv>:

void right_container::initialize()
{
    right_containerBase::initialize();
 8005afc:	f7ff bbdf 	b.w	80052be <_ZN19right_containerBase10initializeEv>

08005b00 <_ZN15right_container20setTempProgressValueEi>:
}

void right_container::setTempProgressValue(int value) {
 8005b00:	b510      	push	{r4, lr}
        temp_progress.setValue(value);
 8005b02:	f500 74a8 	add.w	r4, r0, #336	@ 0x150
 8005b06:	4620      	mov	r0, r4
 8005b08:	f009 f8a8 	bl	800ec5c <_ZN8touchgfx13ImageProgress8setValueEi>
        temp_progress.invalidate();
 8005b0c:	4620      	mov	r0, r4
    }
 8005b0e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        temp_progress.invalidate();
 8005b12:	f012 be20 	b.w	8018756 <_ZNK8touchgfx8Drawable10invalidateEv>

08005b16 <_ZN15right_container17setLeftGaugeValueEi>:

void right_container::setLeftGaugeValue(int value) {
 8005b16:	b510      	push	{r4, lr}
    gauge_left_progress.setValue(value);
 8005b18:	f500 743c 	add.w	r4, r0, #752	@ 0x2f0
 8005b1c:	4620      	mov	r0, r4
 8005b1e:	f009 f89d 	bl	800ec5c <_ZN8touchgfx13ImageProgress8setValueEi>
    gauge_left_progress.invalidate();
 8005b22:	4620      	mov	r0, r4
}
 8005b24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    gauge_left_progress.invalidate();
 8005b28:	f012 be15 	b.w	8018756 <_ZNK8touchgfx8Drawable10invalidateEv>

08005b2c <_ZN15right_container8setAlphaEh>:

void right_container::setAlpha(uint8_t alpha) {
 8005b2c:	b570      	push	{r4, r5, r6, lr}
    temp_progress.setAlpha(alpha);
 8005b2e:	f500 76a8 	add.w	r6, r0, #336	@ 0x150
void right_container::setAlpha(uint8_t alpha) {
 8005b32:	4604      	mov	r4, r0
 8005b34:	460d      	mov	r5, r1
    temp_progress.setAlpha(alpha);
 8005b36:	4630      	mov	r0, r6
 8005b38:	f009 f870 	bl	800ec1c <_ZN8touchgfx13ImageProgress8setAlphaEh>
    temp_text_area.setAlpha(alpha);
    temp_progress.invalidate();
 8005b3c:	4630      	mov	r0, r6
        alpha = newAlpha;
 8005b3e:	f884 52ae 	strb.w	r5, [r4, #686]	@ 0x2ae
 8005b42:	f012 fe08 	bl	8018756 <_ZNK8touchgfx8Drawable10invalidateEv>
    temp_text_area.invalidate();
 8005b46:	f504 701e 	add.w	r0, r4, #632	@ 0x278
}
 8005b4a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    temp_text_area.invalidate();
 8005b4e:	f012 be02 	b.w	8018756 <_ZNK8touchgfx8Drawable10invalidateEv>

08005b52 <FT6X06_GetCapabilities>:
{
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  /* Store component's capabilities */
  Capabilities->MultiTouch = 1;
 8005b52:	2301      	movs	r3, #1
  Capabilities->Gesture    = 0;  /* Gesture feature is currently not activated on FW chipset */
  Capabilities->MaxTouch   = FT6X06_MAX_NB_TOUCH;
  Capabilities->MaxXl      = FT6X06_MAX_X_LENGTH;
  Capabilities->MaxYl      = FT6X06_MAX_Y_LENGTH;
 8005b54:	f44f 7248 	mov.w	r2, #800	@ 0x320
  
  return FT6X06_OK;
}
 8005b58:	2000      	movs	r0, #0
  Capabilities->MultiTouch = 1;
 8005b5a:	800b      	strh	r3, [r1, #0]
  Capabilities->MaxTouch   = FT6X06_MAX_NB_TOUCH;
 8005b5c:	2302      	movs	r3, #2
 8005b5e:	708b      	strb	r3, [r1, #2]
  Capabilities->MaxYl      = FT6X06_MAX_Y_LENGTH;
 8005b60:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 8005b64:	e9c1 2301 	strd	r2, r3, [r1, #4]
}
 8005b68:	4770      	bx	lr

08005b6a <FT6X06_DeInit>:
  * @param  pObj Component object pointer
  * @retval Component status
  */
int32_t FT6X06_DeInit(FT6X06_Object_t *pObj)
{
  if(pObj->IsInitialized == 1U)
 8005b6a:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
 8005b6e:	2b01      	cmp	r3, #1
  {
    pObj->IsInitialized = 0;
 8005b70:	bf04      	itt	eq
 8005b72:	2300      	moveq	r3, #0
 8005b74:	f880 3024 	strbeq.w	r3, [r0, #36]	@ 0x24
  }
  
  return FT6X06_OK;
}
 8005b78:	2000      	movs	r0, #0
 8005b7a:	4770      	bx	lr

08005b7c <FT6X06_ITStatus>:
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  /* Always return FT6X06_OK as feature not supported by FT6X06 */
  return FT6X06_OK;
}
 8005b7c:	2000      	movs	r0, #0
 8005b7e:	4770      	bx	lr

08005b80 <ReadRegWrap>:
  * @param  pData The target register value to be read
  * @param  Length buffer size to be read
  * @retval Component status.
  */
static int32_t ReadRegWrap(void *handle, uint8_t Reg, uint8_t* pData, uint16_t Length)
{
 8005b80:	b410      	push	{r4}
  FT6X06_Object_t *pObj = (FT6X06_Object_t *)handle;

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8005b82:	6904      	ldr	r4, [r0, #16]
 8005b84:	8900      	ldrh	r0, [r0, #8]
 8005b86:	46a4      	mov	ip, r4
}
 8005b88:	f85d 4b04 	ldr.w	r4, [sp], #4
  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8005b8c:	4760      	bx	ip

08005b8e <WriteRegWrap>:
  * @param  pData The target register value to be written
  * @param  Length buffer size to be written
  * @retval Component status.
  */
static int32_t WriteRegWrap(void *handle, uint8_t Reg, uint8_t* pData, uint16_t Length)
{
 8005b8e:	b410      	push	{r4}
  FT6X06_Object_t *pObj = (FT6X06_Object_t *)handle;

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8005b90:	68c4      	ldr	r4, [r0, #12]
 8005b92:	8900      	ldrh	r0, [r0, #8]
 8005b94:	46a4      	mov	ip, r4
}
 8005b96:	f85d 4b04 	ldr.w	r4, [sp], #4
  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8005b9a:	4760      	bx	ip

08005b9c <FT6X06_GestureConfig>:
{
 8005b9c:	b570      	push	{r4, r5, r6, lr}
  ret = ft6x06_radian_value(&pObj->Ctx, (uint8_t)GestureInit->Radian);
 8005b9e:	f100 0518 	add.w	r5, r0, #24
{
 8005ba2:	460e      	mov	r6, r1
  ret = ft6x06_radian_value(&pObj->Ctx, (uint8_t)GestureInit->Radian);
 8005ba4:	7809      	ldrb	r1, [r1, #0]
 8005ba6:	4628      	mov	r0, r5
 8005ba8:	f000 f912 	bl	8005dd0 <ft6x06_radian_value>
 8005bac:	4604      	mov	r4, r0
  ret += ft6x06_offset_left_right(&pObj->Ctx, (uint8_t)GestureInit->OffsetLeftRight);
 8005bae:	7931      	ldrb	r1, [r6, #4]
 8005bb0:	4628      	mov	r0, r5
 8005bb2:	f000 f919 	bl	8005de8 <ft6x06_offset_left_right>
 8005bb6:	4404      	add	r4, r0
  ret += ft6x06_offset_up_down(&pObj->Ctx, (uint8_t)GestureInit->OffsetUpDown);
 8005bb8:	7a31      	ldrb	r1, [r6, #8]
 8005bba:	4628      	mov	r0, r5
 8005bbc:	f000 f920 	bl	8005e00 <ft6x06_offset_up_down>
 8005bc0:	4404      	add	r4, r0
  ret += ft6x06_disatnce_left_right(&pObj->Ctx, (uint8_t)GestureInit->DistanceLeftRight);
 8005bc2:	7b31      	ldrb	r1, [r6, #12]
 8005bc4:	4628      	mov	r0, r5
 8005bc6:	f000 f927 	bl	8005e18 <ft6x06_disatnce_left_right>
 8005bca:	4404      	add	r4, r0
  ret += ft6x06_distance_up_down(&pObj->Ctx, (uint8_t)GestureInit->DistanceUpDown);
 8005bcc:	7c31      	ldrb	r1, [r6, #16]
 8005bce:	4628      	mov	r0, r5
 8005bd0:	f000 f92e 	bl	8005e30 <ft6x06_distance_up_down>
 8005bd4:	4404      	add	r4, r0
  ret += ft6x06_distance_zoom(&pObj->Ctx, (uint8_t)GestureInit->DistanceZoom);
 8005bd6:	7d31      	ldrb	r1, [r6, #20]
 8005bd8:	4628      	mov	r0, r5
 8005bda:	f000 f935 	bl	8005e48 <ft6x06_distance_zoom>
  if(ret != FT6X06_OK)
 8005bde:	42c4      	cmn	r4, r0
}
 8005be0:	bf14      	ite	ne
 8005be2:	f04f 30ff 	movne.w	r0, #4294967295
 8005be6:	2000      	moveq	r0, #0
 8005be8:	bd70      	pop	{r4, r5, r6, pc}

08005bea <FT6X06_ReadID>:
{
 8005bea:	b513      	push	{r0, r1, r4, lr}
 8005bec:	460c      	mov	r4, r1
  ret = ft6x06_chip_id(&pObj->Ctx, &ft6x06_id);
 8005bee:	3018      	adds	r0, #24
 8005bf0:	f10d 0107 	add.w	r1, sp, #7
 8005bf4:	f000 f940 	bl	8005e78 <ft6x06_chip_id>
  *Id = (uint32_t) ft6x06_id;
 8005bf8:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8005bfc:	6023      	str	r3, [r4, #0]
}
 8005bfe:	b002      	add	sp, #8
 8005c00:	bd10      	pop	{r4, pc}

08005c02 <FT6X06_GetState>:
{
 8005c02:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if(ft6x06_td_status(&pObj->Ctx, &nb_touch) != FT6X06_OK)
 8005c04:	f100 0518 	add.w	r5, r0, #24
{
 8005c08:	460c      	mov	r4, r1
  if(ft6x06_td_status(&pObj->Ctx, &nb_touch) != FT6X06_OK)
 8005c0a:	a901      	add	r1, sp, #4
 8005c0c:	4628      	mov	r0, r5
 8005c0e:	f000 f8d2 	bl	8005db6 <ft6x06_td_status>
 8005c12:	bb08      	cbnz	r0, 8005c58 <FT6X06_GetState+0x56>
    if(nb_touch > FT6X06_MAX_NB_TOUCH)
 8005c14:	f89d 3004 	ldrb.w	r3, [sp, #4]
      ret = (int32_t)nb_touch;
 8005c18:	2b02      	cmp	r3, #2
 8005c1a:	bf98      	it	ls
 8005c1c:	4618      	movls	r0, r3
  if(ft6x06_read_reg(&pObj->Ctx, FT6X06_P1_XH_REG, data, (uint16_t)sizeof(data)) != FT6X06_OK)
 8005c1e:	2304      	movs	r3, #4
  State->TouchDetected = (uint32_t)FT6X06_DetectTouch(pObj);
 8005c20:	6020      	str	r0, [r4, #0]
  if(ft6x06_read_reg(&pObj->Ctx, FT6X06_P1_XH_REG, data, (uint16_t)sizeof(data)) != FT6X06_OK)
 8005c22:	2103      	movs	r1, #3
 8005c24:	4628      	mov	r0, r5
 8005c26:	eb0d 0203 	add.w	r2, sp, r3
 8005c2a:	f000 f8b1 	bl	8005d90 <ft6x06_read_reg>
 8005c2e:	b9b0      	cbnz	r0, 8005c5e <FT6X06_GetState+0x5c>
    State->TouchX = (((uint32_t)data[0] & FT6X06_P1_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[1] & FT6X06_P1_XL_TP_BIT_MASK);
 8005c30:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8005c34:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8005c38:	021b      	lsls	r3, r3, #8
 8005c3a:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8005c3e:	4313      	orrs	r3, r2
    State->TouchY = (((uint32_t)data[2] & FT6X06_P1_YH_TP_BIT_MASK) << 8) | ((uint32_t)data[3] & FT6X06_P1_YL_TP_BIT_MASK);
 8005c40:	f89d 2007 	ldrb.w	r2, [sp, #7]
    State->TouchX = (((uint32_t)data[0] & FT6X06_P1_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[1] & FT6X06_P1_XL_TP_BIT_MASK);
 8005c44:	6063      	str	r3, [r4, #4]
    State->TouchY = (((uint32_t)data[2] & FT6X06_P1_YH_TP_BIT_MASK) << 8) | ((uint32_t)data[3] & FT6X06_P1_YL_TP_BIT_MASK);
 8005c46:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8005c4a:	021b      	lsls	r3, r3, #8
 8005c4c:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8005c50:	4313      	orrs	r3, r2
 8005c52:	60a3      	str	r3, [r4, #8]
}
 8005c54:	b003      	add	sp, #12
 8005c56:	bd30      	pop	{r4, r5, pc}
    ret = FT6X06_ERROR;
 8005c58:	f04f 30ff 	mov.w	r0, #4294967295
 8005c5c:	e7df      	b.n	8005c1e <FT6X06_GetState+0x1c>
    ret = FT6X06_ERROR;
 8005c5e:	f04f 30ff 	mov.w	r0, #4294967295
  return ret;
 8005c62:	e7f7      	b.n	8005c54 <FT6X06_GetState+0x52>

08005c64 <FT6X06_GetGesture>:
  return ft6x06_gest_id(&pObj->Ctx, GestureId);
 8005c64:	3018      	adds	r0, #24
 8005c66:	f000 b8a1 	b.w	8005dac <ft6x06_gest_id>

08005c6a <FT6X06_EnableIT>:
  return ft6x06_g_mode(&pObj->Ctx, FT6X06_G_MODE_INTERRUPT_TRIGGER);
 8005c6a:	2101      	movs	r1, #1
 8005c6c:	3018      	adds	r0, #24
 8005c6e:	f000 b8f7 	b.w	8005e60 <ft6x06_g_mode>

08005c72 <FT6X06_DisableIT>:
  return ft6x06_g_mode(&pObj->Ctx, FT6X06_G_MODE_INTERRUPT_POLLING);
 8005c72:	2100      	movs	r1, #0
 8005c74:	3018      	adds	r0, #24
 8005c76:	f000 b8f3 	b.w	8005e60 <ft6x06_g_mode>

08005c7a <FT6X06_Init>:
{
 8005c7a:	b510      	push	{r4, lr}
  if(pObj->IsInitialized == 0U)
 8005c7c:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
{
 8005c80:	4604      	mov	r4, r0
  if(pObj->IsInitialized == 0U)
 8005c82:	b96b      	cbnz	r3, 8005ca0 <FT6X06_Init+0x26>
    pObj->IO.Init();
 8005c84:	6803      	ldr	r3, [r0, #0]
 8005c86:	4798      	blx	r3
    ret += FT6X06_DisableIT(pObj);
 8005c88:	4620      	mov	r0, r4
 8005c8a:	f7ff fff2 	bl	8005c72 <FT6X06_DisableIT>
  if(ret != FT6X06_OK)
 8005c8e:	3800      	subs	r0, #0
    pObj->IsInitialized = 1;
 8005c90:	f04f 0301 	mov.w	r3, #1
  if(ret != FT6X06_OK)
 8005c94:	bf18      	it	ne
 8005c96:	2001      	movne	r0, #1
    pObj->IsInitialized = 1;
 8005c98:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
  if(ret != FT6X06_OK)
 8005c9c:	4240      	negs	r0, r0
}
 8005c9e:	bd10      	pop	{r4, pc}
    ret += FT6X06_DisableIT(pObj);
 8005ca0:	2000      	movs	r0, #0
  return ret;
 8005ca2:	e7fc      	b.n	8005c9e <FT6X06_Init+0x24>

08005ca4 <FT6X06_ClearIT>:
int32_t FT6X06_ClearIT(FT6X06_Object_t *pObj)
 8005ca4:	2000      	movs	r0, #0
 8005ca6:	4770      	bx	lr

08005ca8 <FT6X06_GetMultiTouchState>:
{
 8005ca8:	b530      	push	{r4, r5, lr}
  if(ft6x06_td_status(&pObj->Ctx, &nb_touch) != FT6X06_OK)
 8005caa:	f100 0518 	add.w	r5, r0, #24
{
 8005cae:	b085      	sub	sp, #20
 8005cb0:	460c      	mov	r4, r1
  if(ft6x06_td_status(&pObj->Ctx, &nb_touch) != FT6X06_OK)
 8005cb2:	4628      	mov	r0, r5
 8005cb4:	a901      	add	r1, sp, #4
 8005cb6:	f000 f87e 	bl	8005db6 <ft6x06_td_status>
 8005cba:	2800      	cmp	r0, #0
 8005cbc:	d145      	bne.n	8005d4a <FT6X06_GetMultiTouchState+0xa2>
    if(nb_touch > FT6X06_MAX_NB_TOUCH)
 8005cbe:	f89d 3004 	ldrb.w	r3, [sp, #4]
      ret = (int32_t)nb_touch;
 8005cc2:	2b02      	cmp	r3, #2
 8005cc4:	bf98      	it	ls
 8005cc6:	4618      	movls	r0, r3
  State->TouchDetected = (uint32_t)FT6X06_DetectTouch(pObj);
 8005cc8:	6020      	str	r0, [r4, #0]
  if(ft6x06_read_reg(&pObj->Ctx, FT6X06_P1_XH_REG, data, (uint16_t)sizeof(data)) != FT6X06_OK)
 8005cca:	230c      	movs	r3, #12
 8005ccc:	aa01      	add	r2, sp, #4
 8005cce:	2103      	movs	r1, #3
 8005cd0:	4628      	mov	r0, r5
 8005cd2:	f000 f85d 	bl	8005d90 <ft6x06_read_reg>
 8005cd6:	2800      	cmp	r0, #0
 8005cd8:	d13a      	bne.n	8005d50 <FT6X06_GetMultiTouchState+0xa8>
    State->TouchX[0] = (((uint32_t)data[0] & FT6X06_P1_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[1] & FT6X06_P1_XL_TP_BIT_MASK);
 8005cda:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8005cde:	f89d 1005 	ldrb.w	r1, [sp, #5]
 8005ce2:	0213      	lsls	r3, r2, #8
    State->TouchEvent[0] = (((uint32_t)data[0] & FT6X06_P1_XH_EF_BIT_MASK) >> FT6X06_P1_XH_EF_BIT_POSITION);
 8005ce4:	0992      	lsrs	r2, r2, #6
    State->TouchX[0] = (((uint32_t)data[0] & FT6X06_P1_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[1] & FT6X06_P1_XL_TP_BIT_MASK);
 8005ce6:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
    State->TouchEvent[0] = (((uint32_t)data[0] & FT6X06_P1_XH_EF_BIT_MASK) >> FT6X06_P1_XH_EF_BIT_POSITION);
 8005cea:	61e2      	str	r2, [r4, #28]
    State->TouchX[0] = (((uint32_t)data[0] & FT6X06_P1_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[1] & FT6X06_P1_XL_TP_BIT_MASK);
 8005cec:	430b      	orrs	r3, r1
    State->TouchY[0] = (((uint32_t)data[2] & FT6X06_P1_YH_TP_BIT_MASK) << 8) | ((uint32_t)data[3] & FT6X06_P1_YL_TP_BIT_MASK);
 8005cee:	f89d 1007 	ldrb.w	r1, [sp, #7]
    State->TouchX[1] = (((uint32_t)data[6] & FT6X06_P2_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[7] & FT6X06_P2_XL_TP_BIT_MASK);
 8005cf2:	f89d 200a 	ldrb.w	r2, [sp, #10]
    State->TouchX[0] = (((uint32_t)data[0] & FT6X06_P1_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[1] & FT6X06_P1_XL_TP_BIT_MASK);
 8005cf6:	6063      	str	r3, [r4, #4]
    State->TouchY[0] = (((uint32_t)data[2] & FT6X06_P1_YH_TP_BIT_MASK) << 8) | ((uint32_t)data[3] & FT6X06_P1_YL_TP_BIT_MASK);
 8005cf8:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8005cfc:	021b      	lsls	r3, r3, #8
 8005cfe:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8005d02:	430b      	orrs	r3, r1
    State->TouchX[1] = (((uint32_t)data[6] & FT6X06_P2_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[7] & FT6X06_P2_XL_TP_BIT_MASK);
 8005d04:	f89d 100b 	ldrb.w	r1, [sp, #11]
    State->TouchY[0] = (((uint32_t)data[2] & FT6X06_P1_YH_TP_BIT_MASK) << 8) | ((uint32_t)data[3] & FT6X06_P1_YL_TP_BIT_MASK);
 8005d08:	60e3      	str	r3, [r4, #12]
    State->TouchWeight[0] = ((uint32_t)data[4] & FT6X06_P1_WEIGHT_BIT_MASK);
 8005d0a:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8005d0e:	6163      	str	r3, [r4, #20]
    State->TouchArea[0] = ((uint32_t)data[5] & FT6X06_P1_MISC_BIT_MASK) >> FT6X06_P1_MISC_BIT_POSITION;
 8005d10:	f89d 3009 	ldrb.w	r3, [sp, #9]
 8005d14:	091b      	lsrs	r3, r3, #4
 8005d16:	6263      	str	r3, [r4, #36]	@ 0x24
    State->TouchX[1] = (((uint32_t)data[6] & FT6X06_P2_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[7] & FT6X06_P2_XL_TP_BIT_MASK);
 8005d18:	0213      	lsls	r3, r2, #8
    State->TouchEvent[1] = (((uint32_t)data[6] & FT6X06_P2_XH_EF_BIT_MASK) >> FT6X06_P2_XH_EF_BIT_POSITION);
 8005d1a:	0992      	lsrs	r2, r2, #6
    State->TouchX[1] = (((uint32_t)data[6] & FT6X06_P2_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[7] & FT6X06_P2_XL_TP_BIT_MASK);
 8005d1c:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
    State->TouchEvent[1] = (((uint32_t)data[6] & FT6X06_P2_XH_EF_BIT_MASK) >> FT6X06_P2_XH_EF_BIT_POSITION);
 8005d20:	6222      	str	r2, [r4, #32]
    State->TouchX[1] = (((uint32_t)data[6] & FT6X06_P2_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[7] & FT6X06_P2_XL_TP_BIT_MASK);
 8005d22:	430b      	orrs	r3, r1
    State->TouchY[1] = (((uint32_t)data[8] & FT6X06_P2_YH_TP_BIT_MASK) << 8) | ((uint32_t)data[9] & FT6X06_P2_YL_TP_BIT_MASK);
 8005d24:	f89d 100d 	ldrb.w	r1, [sp, #13]
    State->TouchX[1] = (((uint32_t)data[6] & FT6X06_P2_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[7] & FT6X06_P2_XL_TP_BIT_MASK);
 8005d28:	60a3      	str	r3, [r4, #8]
    State->TouchY[1] = (((uint32_t)data[8] & FT6X06_P2_YH_TP_BIT_MASK) << 8) | ((uint32_t)data[9] & FT6X06_P2_YL_TP_BIT_MASK);
 8005d2a:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8005d2e:	021b      	lsls	r3, r3, #8
 8005d30:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8005d34:	430b      	orrs	r3, r1
 8005d36:	6123      	str	r3, [r4, #16]
    State->TouchWeight[1] = ((uint32_t)data[10] & FT6X06_P2_WEIGHT_BIT_MASK);
 8005d38:	f89d 300e 	ldrb.w	r3, [sp, #14]
 8005d3c:	61a3      	str	r3, [r4, #24]
    State->TouchArea[1] = ((uint32_t)data[11] & FT6X06_P2_MISC_BIT_MASK) >> FT6X06_P2_MISC_BIT_POSITION;
 8005d3e:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8005d42:	091b      	lsrs	r3, r3, #4
 8005d44:	62a3      	str	r3, [r4, #40]	@ 0x28
}
 8005d46:	b005      	add	sp, #20
 8005d48:	bd30      	pop	{r4, r5, pc}
    ret = FT6X06_ERROR;
 8005d4a:	f04f 30ff 	mov.w	r0, #4294967295
 8005d4e:	e7bb      	b.n	8005cc8 <FT6X06_GetMultiTouchState+0x20>
    ret = FT6X06_ERROR;
 8005d50:	f04f 30ff 	mov.w	r0, #4294967295
  return ret;  
 8005d54:	e7f7      	b.n	8005d46 <FT6X06_GetMultiTouchState+0x9e>
	...

08005d58 <FT6X06_RegisterBusIO>:
  if (pObj == NULL)
 8005d58:	b190      	cbz	r0, 8005d80 <FT6X06_RegisterBusIO+0x28>
    pObj->IO.DeInit    = pIO->DeInit;
 8005d5a:	684a      	ldr	r2, [r1, #4]
    pObj->IO.Init      = pIO->Init;
 8005d5c:	680b      	ldr	r3, [r1, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8005d5e:	6042      	str	r2, [r0, #4]
    pObj->IO.Address   = pIO->Address;
 8005d60:	890a      	ldrh	r2, [r1, #8]
    pObj->IO.Init      = pIO->Init;
 8005d62:	6003      	str	r3, [r0, #0]
    pObj->IO.Address   = pIO->Address;
 8005d64:	8102      	strh	r2, [r0, #8]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8005d66:	68ca      	ldr	r2, [r1, #12]
 8005d68:	60c2      	str	r2, [r0, #12]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8005d6a:	690a      	ldr	r2, [r1, #16]
 8005d6c:	6102      	str	r2, [r0, #16]
    pObj->IO.GetTick   = pIO->GetTick;
 8005d6e:	694a      	ldr	r2, [r1, #20]
    pObj->Ctx.handle   = pObj;
 8005d70:	6200      	str	r0, [r0, #32]
    pObj->IO.GetTick   = pIO->GetTick;
 8005d72:	6142      	str	r2, [r0, #20]
    pObj->Ctx.ReadReg  = ReadRegWrap;
 8005d74:	4a04      	ldr	r2, [pc, #16]	@ (8005d88 <FT6X06_RegisterBusIO+0x30>)
 8005d76:	61c2      	str	r2, [r0, #28]
    pObj->Ctx.WriteReg = WriteRegWrap;
 8005d78:	4a04      	ldr	r2, [pc, #16]	@ (8005d8c <FT6X06_RegisterBusIO+0x34>)
 8005d7a:	6182      	str	r2, [r0, #24]
    if(pObj->IO.Init != NULL)
 8005d7c:	b103      	cbz	r3, 8005d80 <FT6X06_RegisterBusIO+0x28>
      ret = pObj->IO.Init();
 8005d7e:	4718      	bx	r3
}
 8005d80:	f04f 30ff 	mov.w	r0, #4294967295
 8005d84:	4770      	bx	lr
 8005d86:	bf00      	nop
 8005d88:	08005b81 	.word	0x08005b81
 8005d8c:	08005b8f 	.word	0x08005b8f

08005d90 <ft6x06_read_reg>:
*                 I2C or SPI reading functions
* Input         : Register Address, length of buffer
* Output        : pdata Read
*******************************************************************************/
int32_t ft6x06_read_reg(ft6x06_ctx_t *ctx, uint8_t reg, uint8_t* pdata, uint16_t length)
{
 8005d90:	b410      	push	{r4}
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
 8005d92:	e9d0 4001 	ldrd	r4, r0, [r0, #4]
 8005d96:	46a4      	mov	ip, r4
}
 8005d98:	f85d 4b04 	ldr.w	r4, [sp], #4
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
 8005d9c:	4760      	bx	ip

08005d9e <ft6x06_write_reg>:
*                 I2C or SPI writing function
* Input         : Register Address, pdata to be written, length of buffer
* Output        : None
*******************************************************************************/
int32_t ft6x06_write_reg(ft6x06_ctx_t *ctx, uint8_t reg, uint8_t *pdata, uint16_t length)
{
 8005d9e:	b410      	push	{r4}
  return ctx->WriteReg(ctx->handle, reg, pdata, length);
 8005da0:	6804      	ldr	r4, [r0, #0]
 8005da2:	6880      	ldr	r0, [r0, #8]
 8005da4:	46a4      	mov	ip, r4
}
 8005da6:	f85d 4b04 	ldr.w	r4, [sp], #4
  return ctx->WriteReg(ctx->handle, reg, pdata, length);
 8005daa:	4760      	bx	ip

08005dac <ft6x06_gest_id>:
* Output         : Status of GEST_ID register
* Return         : Status [FT6X06_ERROR, FT6X06_OK]
*******************************************************************************/
int32_t  ft6x06_gest_id(ft6x06_ctx_t *ctx, uint8_t *value)
{
  return ft6x06_read_reg(ctx, FT6X06_GEST_ID_REG, (uint8_t *)value, 1);
 8005dac:	2301      	movs	r3, #1
{
 8005dae:	460a      	mov	r2, r1
  return ft6x06_read_reg(ctx, FT6X06_GEST_ID_REG, (uint8_t *)value, 1);
 8005db0:	4619      	mov	r1, r3
 8005db2:	f7ff bfed 	b.w	8005d90 <ft6x06_read_reg>

08005db6 <ft6x06_td_status>:
* Input          : Pointer to uint8_t
* Output         : Status of TD_STATUS register
* Return         : Status [FT6X06_ERROR, FT6X06_OK]
*******************************************************************************/
int32_t  ft6x06_td_status(ft6x06_ctx_t *ctx, uint8_t *value)
{
 8005db6:	b510      	push	{r4, lr}
  int32_t ret;
  
  ret = ft6x06_read_reg(ctx, FT6X06_TD_STAT_REG, (uint8_t *)value, 1);
 8005db8:	460a      	mov	r2, r1
{
 8005dba:	460c      	mov	r4, r1
  ret = ft6x06_read_reg(ctx, FT6X06_TD_STAT_REG, (uint8_t *)value, 1);
 8005dbc:	2301      	movs	r3, #1
 8005dbe:	2102      	movs	r1, #2
 8005dc0:	f7ff ffe6 	bl	8005d90 <ft6x06_read_reg>
  
  if(ret == 0)
 8005dc4:	b918      	cbnz	r0, 8005dce <ft6x06_td_status+0x18>
  {
    *value &= FT6X06_TD_STATUS_BIT_MASK; 
 8005dc6:	7823      	ldrb	r3, [r4, #0]
 8005dc8:	f003 030f 	and.w	r3, r3, #15
 8005dcc:	7023      	strb	r3, [r4, #0]
    *value = *value >> FT6X06_TD_STATUS_BIT_POSITION; 
  }
  
  return ret;
}
 8005dce:	bd10      	pop	{r4, pc}

08005dd0 <ft6x06_radian_value>:
* Input          : uint8_t
* Output         : None
* Return         : Status [FT6X06_ERROR, FT6X06_OK]
*******************************************************************************/
int32_t  ft6x06_radian_value(ft6x06_ctx_t *ctx, uint8_t value)
{
 8005dd0:	b507      	push	{r0, r1, r2, lr}
  return ft6x06_write_reg(ctx, FT6X06_RADIAN_VALUE_REG, &value, 1);
 8005dd2:	2301      	movs	r3, #1
{
 8005dd4:	f88d 1007 	strb.w	r1, [sp, #7]
  return ft6x06_write_reg(ctx, FT6X06_RADIAN_VALUE_REG, &value, 1);
 8005dd8:	f10d 0207 	add.w	r2, sp, #7
 8005ddc:	2191      	movs	r1, #145	@ 0x91
 8005dde:	f7ff ffde 	bl	8005d9e <ft6x06_write_reg>
}
 8005de2:	b003      	add	sp, #12
 8005de4:	f85d fb04 	ldr.w	pc, [sp], #4

08005de8 <ft6x06_offset_left_right>:
* Input          : uint8_t
* Output         : None
* Return         : Status [FT6X06_ERROR, FT6X06_OK]
*******************************************************************************/
int32_t  ft6x06_offset_left_right(ft6x06_ctx_t *ctx, uint8_t value)
{
 8005de8:	b507      	push	{r0, r1, r2, lr}
  return ft6x06_write_reg(ctx, FT6X06_OFFSET_LR_REG, &value, 1);
 8005dea:	2301      	movs	r3, #1
{
 8005dec:	f88d 1007 	strb.w	r1, [sp, #7]
  return ft6x06_write_reg(ctx, FT6X06_OFFSET_LR_REG, &value, 1);
 8005df0:	f10d 0207 	add.w	r2, sp, #7
 8005df4:	2192      	movs	r1, #146	@ 0x92
 8005df6:	f7ff ffd2 	bl	8005d9e <ft6x06_write_reg>
}
 8005dfa:	b003      	add	sp, #12
 8005dfc:	f85d fb04 	ldr.w	pc, [sp], #4

08005e00 <ft6x06_offset_up_down>:
* Input          : uint8_t
* Output         : None
* Return         : Status [FT6X06_ERROR, FT6X06_OK]
*******************************************************************************/
int32_t  ft6x06_offset_up_down(ft6x06_ctx_t *ctx, uint8_t value)
{
 8005e00:	b507      	push	{r0, r1, r2, lr}
  return ft6x06_write_reg(ctx, FT6X06_OFFSET_UD_REG, &value, 1);
 8005e02:	2301      	movs	r3, #1
{
 8005e04:	f88d 1007 	strb.w	r1, [sp, #7]
  return ft6x06_write_reg(ctx, FT6X06_OFFSET_UD_REG, &value, 1);
 8005e08:	f10d 0207 	add.w	r2, sp, #7
 8005e0c:	2193      	movs	r1, #147	@ 0x93
 8005e0e:	f7ff ffc6 	bl	8005d9e <ft6x06_write_reg>
}
 8005e12:	b003      	add	sp, #12
 8005e14:	f85d fb04 	ldr.w	pc, [sp], #4

08005e18 <ft6x06_disatnce_left_right>:
* Input          : uint8_t
* Output         : None
* Return         : Status [FT6X06_ERROR, FT6X06_OK]
*******************************************************************************/
int32_t  ft6x06_disatnce_left_right(ft6x06_ctx_t *ctx, uint8_t value)
{
 8005e18:	b507      	push	{r0, r1, r2, lr}
  return ft6x06_write_reg(ctx, FT6X06_DISTANCE_LR_REG, &value, 1);
 8005e1a:	2301      	movs	r3, #1
{
 8005e1c:	f88d 1007 	strb.w	r1, [sp, #7]
  return ft6x06_write_reg(ctx, FT6X06_DISTANCE_LR_REG, &value, 1);
 8005e20:	f10d 0207 	add.w	r2, sp, #7
 8005e24:	2194      	movs	r1, #148	@ 0x94
 8005e26:	f7ff ffba 	bl	8005d9e <ft6x06_write_reg>
}
 8005e2a:	b003      	add	sp, #12
 8005e2c:	f85d fb04 	ldr.w	pc, [sp], #4

08005e30 <ft6x06_distance_up_down>:
* Input          : uint8_t
* Output         : None
* Return         : Status [FT6X06_ERROR, FT6X06_OK]
*******************************************************************************/
int32_t  ft6x06_distance_up_down(ft6x06_ctx_t *ctx, uint8_t value)
{
 8005e30:	b507      	push	{r0, r1, r2, lr}
  return ft6x06_write_reg(ctx, FT6X06_DISTANCE_UD_REG, &value, 1);
 8005e32:	2301      	movs	r3, #1
{
 8005e34:	f88d 1007 	strb.w	r1, [sp, #7]
  return ft6x06_write_reg(ctx, FT6X06_DISTANCE_UD_REG, &value, 1);
 8005e38:	f10d 0207 	add.w	r2, sp, #7
 8005e3c:	2195      	movs	r1, #149	@ 0x95
 8005e3e:	f7ff ffae 	bl	8005d9e <ft6x06_write_reg>
}
 8005e42:	b003      	add	sp, #12
 8005e44:	f85d fb04 	ldr.w	pc, [sp], #4

08005e48 <ft6x06_distance_zoom>:
* Input          : uint8_t
* Output         : None
* Return         : Status [FT6X06_ERROR, FT6X06_OK]
*******************************************************************************/
int32_t  ft6x06_distance_zoom(ft6x06_ctx_t *ctx, uint8_t value)
{
 8005e48:	b507      	push	{r0, r1, r2, lr}
  return ft6x06_write_reg(ctx, FT6X06_DISTANCE_ZOOM_REG, &value, 1);
 8005e4a:	2301      	movs	r3, #1
{
 8005e4c:	f88d 1007 	strb.w	r1, [sp, #7]
  return ft6x06_write_reg(ctx, FT6X06_DISTANCE_ZOOM_REG, &value, 1);
 8005e50:	f10d 0207 	add.w	r2, sp, #7
 8005e54:	2196      	movs	r1, #150	@ 0x96
 8005e56:	f7ff ffa2 	bl	8005d9e <ft6x06_write_reg>
}
 8005e5a:	b003      	add	sp, #12
 8005e5c:	f85d fb04 	ldr.w	pc, [sp], #4

08005e60 <ft6x06_g_mode>:
* Input          : uint8_t
* Output         : None
* Return         : Status [FT6X06_ERROR, FT6X06_OK]
*******************************************************************************/
int32_t  ft6x06_g_mode(ft6x06_ctx_t *ctx, uint8_t value)
{
 8005e60:	b507      	push	{r0, r1, r2, lr}
  return ft6x06_write_reg(ctx, FT6X06_GMODE_REG, &value, 1);
 8005e62:	2301      	movs	r3, #1
{
 8005e64:	f88d 1007 	strb.w	r1, [sp, #7]
  return ft6x06_write_reg(ctx, FT6X06_GMODE_REG, &value, 1);
 8005e68:	f10d 0207 	add.w	r2, sp, #7
 8005e6c:	21a4      	movs	r1, #164	@ 0xa4
 8005e6e:	f7ff ff96 	bl	8005d9e <ft6x06_write_reg>
}
 8005e72:	b003      	add	sp, #12
 8005e74:	f85d fb04 	ldr.w	pc, [sp], #4

08005e78 <ft6x06_chip_id>:
* Input          : Pointer to uint8_t
* Output         : Status of FT6X06_CHIP_ID register
* Return         : Status [FT6X06_ERROR, FT6X06_OK]
*******************************************************************************/
int32_t  ft6x06_chip_id(ft6x06_ctx_t *ctx, uint8_t *value)
{
 8005e78:	460a      	mov	r2, r1
  int32_t ret;
  
  ret = ft6x06_read_reg(ctx, FT6X06_CHIP_ID_REG, (uint8_t *)value, 1);
 8005e7a:	2301      	movs	r3, #1
 8005e7c:	21a8      	movs	r1, #168	@ 0xa8
 8005e7e:	f7ff bf87 	b.w	8005d90 <ft6x06_read_reg>
	...

08005e84 <IS42S32800J_ClockEnable>:
  * @param  Ctx Component object pointer
  * @param  Interface Could be FMC_SDRAM_CMD_TARGET_BANK1 or FMC_SDRAM_CMD_TARGET_BANK2
  * @retval error status
  */
int32_t IS42S32800J_ClockEnable(SDRAM_HandleTypeDef *Ctx, uint32_t Interface) 
{
 8005e84:	b508      	push	{r3, lr}
  Command.CommandMode            = IS42S32800J_CLK_ENABLE_CMD;
 8005e86:	2201      	movs	r2, #1
 8005e88:	4b07      	ldr	r3, [pc, #28]	@ (8005ea8 <IS42S32800J_ClockEnable+0x24>)
  Command.CommandTarget          = Interface;
 8005e8a:	e9c3 2100 	strd	r2, r1, [r3]
  Command.AutoRefreshNumber      = 1;
 8005e8e:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8005e90:	2200      	movs	r2, #0

  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800J_TIMEOUT) != HAL_OK)
 8005e92:	4619      	mov	r1, r3
  Command.ModeRegisterDefinition = 0;
 8005e94:	60da      	str	r2, [r3, #12]
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800J_TIMEOUT) != HAL_OK)
 8005e96:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005e9a:	f006 f9f5 	bl	800c288 <HAL_SDRAM_SendCommand>
 8005e9e:	3800      	subs	r0, #0
 8005ea0:	bf18      	it	ne
 8005ea2:	2001      	movne	r0, #1
  }
  else
  {
    return IS42S32800J_OK;
  }
}
 8005ea4:	4240      	negs	r0, r0
 8005ea6:	bd08      	pop	{r3, pc}
 8005ea8:	2400ee14 	.word	0x2400ee14

08005eac <IS42S32800J_Precharge>:
  * @param  Ctx Component object pointer
  * @param  Interface Could be FMC_SDRAM_CMD_TARGET_BANK1 or FMC_SDRAM_CMD_TARGET_BANK2
  * @retval error status
  */
int32_t IS42S32800J_Precharge(SDRAM_HandleTypeDef *Ctx, uint32_t Interface) 
{
 8005eac:	b508      	push	{r3, lr}
  Command.CommandMode            = IS42S32800J_PALL_CMD;
 8005eae:	2202      	movs	r2, #2
 8005eb0:	4b08      	ldr	r3, [pc, #32]	@ (8005ed4 <IS42S32800J_Precharge+0x28>)
  Command.CommandTarget          = Interface;
 8005eb2:	e9c3 2100 	strd	r2, r1, [r3]
  Command.AutoRefreshNumber      = 1;
  Command.ModeRegisterDefinition = 0;
 8005eb6:	2101      	movs	r1, #1
 8005eb8:	2200      	movs	r2, #0
 8005eba:	e9c3 1202 	strd	r1, r2, [r3, #8]

  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800J_TIMEOUT) != HAL_OK)
 8005ebe:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005ec2:	4619      	mov	r1, r3
 8005ec4:	f006 f9e0 	bl	800c288 <HAL_SDRAM_SendCommand>
 8005ec8:	3800      	subs	r0, #0
 8005eca:	bf18      	it	ne
 8005ecc:	2001      	movne	r0, #1
  }
  else
  {
    return IS42S32800J_OK;
  }
}
 8005ece:	4240      	negs	r0, r0
 8005ed0:	bd08      	pop	{r3, pc}
 8005ed2:	bf00      	nop
 8005ed4:	2400ee14 	.word	0x2400ee14

08005ed8 <IS42S32800J_ModeRegConfig>:
  * @param  Ctx Component object pointer
  * @param  pRegMode : Pointer to Register Mode structure
  * @retval error status
  */
int32_t IS42S32800J_ModeRegConfig(SDRAM_HandleTypeDef *Ctx, IS42S32800J_Context_t *pRegMode) 
{
 8005ed8:	460a      	mov	r2, r1
  uint32_t tmpmrd;

  /* Program the external memory mode register */
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
 8005eda:	e9d1 3103 	ldrd	r3, r1, [r1, #12]
{
 8005ede:	b510      	push	{r4, lr}
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
 8005ee0:	430b      	orrs	r3, r1
                     pRegMode->BurstType     |\
 8005ee2:	6951      	ldr	r1, [r2, #20]
                     pRegMode->CASLatency    |\
                     pRegMode->OperationMode |\
                     pRegMode->WriteBurstMode;
  
  Command.CommandMode            = IS42S32800J_LOAD_MODE_CMD;
 8005ee4:	2404      	movs	r4, #4
                     pRegMode->BurstType     |\
 8005ee6:	430b      	orrs	r3, r1
                     pRegMode->CASLatency    |\
 8005ee8:	6991      	ldr	r1, [r2, #24]
 8005eea:	430b      	orrs	r3, r1
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
 8005eec:	69d1      	ldr	r1, [r2, #28]
  Command.CommandTarget          = pRegMode->TargetBank;
 8005eee:	6812      	ldr	r2, [r2, #0]
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
 8005ef0:	430b      	orrs	r3, r1
  Command.CommandMode            = IS42S32800J_LOAD_MODE_CMD;
 8005ef2:	4907      	ldr	r1, [pc, #28]	@ (8005f10 <IS42S32800J_ModeRegConfig+0x38>)
  Command.CommandTarget          = pRegMode->TargetBank;
 8005ef4:	604a      	str	r2, [r1, #4]
  Command.AutoRefreshNumber      = 1;
 8005ef6:	2201      	movs	r2, #1
  Command.CommandMode            = IS42S32800J_LOAD_MODE_CMD;
 8005ef8:	600c      	str	r4, [r1, #0]
  Command.ModeRegisterDefinition = tmpmrd;
 8005efa:	e9c1 2302 	strd	r2, r3, [r1, #8]
  
  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800J_TIMEOUT) != HAL_OK)
 8005efe:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005f02:	f006 f9c1 	bl	800c288 <HAL_SDRAM_SendCommand>
 8005f06:	3800      	subs	r0, #0
 8005f08:	bf18      	it	ne
 8005f0a:	2001      	movne	r0, #1
  }
  else
  {
    return IS42S32800J_OK;
  }
}
 8005f0c:	4240      	negs	r0, r0
 8005f0e:	bd10      	pop	{r4, pc}
 8005f10:	2400ee14 	.word	0x2400ee14

08005f14 <IS42S32800J_RefreshMode>:
  * @param  RefreshMode Could be IS42S32800J_CMD_AUTOREFRESH_MODE or
  *                      IS42S32800J_CMD_SELFREFRESH_MODE
  * @retval error status
  */
int32_t IS42S32800J_RefreshMode(SDRAM_HandleTypeDef *Ctx, uint32_t Interface, uint32_t RefreshMode) 
{
 8005f14:	b508      	push	{r3, lr}
  Command.CommandMode            = RefreshMode;
 8005f16:	4b08      	ldr	r3, [pc, #32]	@ (8005f38 <IS42S32800J_RefreshMode+0x24>)
  Command.CommandTarget          = Interface;
 8005f18:	e9c3 2100 	strd	r2, r1, [r3]
  Command.AutoRefreshNumber      = 8;
  Command.ModeRegisterDefinition = 0;
 8005f1c:	2108      	movs	r1, #8
 8005f1e:	2200      	movs	r2, #0
 8005f20:	e9c3 1202 	strd	r1, r2, [r3, #8]

  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800J_TIMEOUT) != HAL_OK)
 8005f24:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005f28:	4619      	mov	r1, r3
 8005f2a:	f006 f9ad 	bl	800c288 <HAL_SDRAM_SendCommand>
 8005f2e:	3800      	subs	r0, #0
 8005f30:	bf18      	it	ne
 8005f32:	2001      	movne	r0, #1
  }
  else
  {
    return IS42S32800J_OK;
  }
}
 8005f34:	4240      	negs	r0, r0
 8005f36:	bd08      	pop	{r3, pc}
 8005f38:	2400ee14 	.word	0x2400ee14

08005f3c <IS42S32800J_RefreshRate>:
  * @param  Ctx Component object pointer
  * @param  RefreshCount The refresh rate to be programmed
  * @retval error status
  */
int32_t IS42S32800J_RefreshRate(SDRAM_HandleTypeDef *Ctx, uint32_t RefreshCount) 
{
 8005f3c:	b508      	push	{r3, lr}
  /* Set the device refresh rate */
  if(HAL_SDRAM_ProgramRefreshRate(Ctx, RefreshCount) != HAL_OK)
 8005f3e:	f006 f9c2 	bl	800c2c6 <HAL_SDRAM_ProgramRefreshRate>
 8005f42:	3800      	subs	r0, #0
 8005f44:	bf18      	it	ne
 8005f46:	2001      	movne	r0, #1
  }
  else
  {
    return IS42S32800J_OK;
  }
}
 8005f48:	4240      	negs	r0, r0
 8005f4a:	bd08      	pop	{r3, pc}

08005f4c <IS42S32800J_Init>:
{
 8005f4c:	b570      	push	{r4, r5, r6, lr}
 8005f4e:	460c      	mov	r4, r1
  if(IS42S32800J_ClockEnable(Ctx, pRegMode->TargetBank) == IS42S32800J_OK)
 8005f50:	6809      	ldr	r1, [r1, #0]
{
 8005f52:	4605      	mov	r5, r0
  if(IS42S32800J_ClockEnable(Ctx, pRegMode->TargetBank) == IS42S32800J_OK)
 8005f54:	f7ff ff96 	bl	8005e84 <IS42S32800J_ClockEnable>
 8005f58:	b110      	cbz	r0, 8005f60 <IS42S32800J_Init+0x14>
  int32_t ret = IS42S32800J_ERROR;
 8005f5a:	f04f 30ff 	mov.w	r0, #4294967295
}
 8005f5e:	bd70      	pop	{r4, r5, r6, pc}
  * @retval IS42S32800J_OK
  */
static int32_t IS42S32800J_Delay(uint32_t Delay)
{  
  uint32_t tickstart;
  tickstart = HAL_GetTick();
 8005f60:	f001 fc7c 	bl	800785c <HAL_GetTick>
 8005f64:	4606      	mov	r6, r0
  while((HAL_GetTick() - tickstart) < Delay)
 8005f66:	f001 fc79 	bl	800785c <HAL_GetTick>
 8005f6a:	4286      	cmp	r6, r0
 8005f6c:	d0fb      	beq.n	8005f66 <IS42S32800J_Init+0x1a>
    if(IS42S32800J_Precharge(Ctx, pRegMode->TargetBank) == IS42S32800J_OK)
 8005f6e:	6821      	ldr	r1, [r4, #0]
 8005f70:	4628      	mov	r0, r5
 8005f72:	f7ff ff9b 	bl	8005eac <IS42S32800J_Precharge>
 8005f76:	2800      	cmp	r0, #0
 8005f78:	d1ef      	bne.n	8005f5a <IS42S32800J_Init+0xe>
      if(IS42S32800J_RefreshMode(Ctx, pRegMode->TargetBank, pRegMode->RefreshMode) == IS42S32800J_OK)
 8005f7a:	4628      	mov	r0, r5
 8005f7c:	e9d4 1200 	ldrd	r1, r2, [r4]
 8005f80:	f7ff ffc8 	bl	8005f14 <IS42S32800J_RefreshMode>
 8005f84:	2800      	cmp	r0, #0
 8005f86:	d1e8      	bne.n	8005f5a <IS42S32800J_Init+0xe>
        if(IS42S32800J_ModeRegConfig(Ctx, pRegMode) == IS42S32800J_OK)
 8005f88:	4621      	mov	r1, r4
 8005f8a:	4628      	mov	r0, r5
 8005f8c:	f7ff ffa4 	bl	8005ed8 <IS42S32800J_ModeRegConfig>
 8005f90:	2800      	cmp	r0, #0
 8005f92:	d1e2      	bne.n	8005f5a <IS42S32800J_Init+0xe>
          if(IS42S32800J_RefreshRate(Ctx, pRegMode->RefreshRate) == IS42S32800J_OK)
 8005f94:	68a1      	ldr	r1, [r4, #8]
 8005f96:	4628      	mov	r0, r5
 8005f98:	f7ff ffd0 	bl	8005f3c <IS42S32800J_RefreshRate>
 8005f9c:	3800      	subs	r0, #0
 8005f9e:	bf18      	it	ne
 8005fa0:	2001      	movne	r0, #1
 8005fa2:	4240      	negs	r0, r0
  return ret;
 8005fa4:	e7db      	b.n	8005f5e <IS42S32800J_Init+0x12>

08005fa6 <MT25TL01G_GetFlashInfo>:
  * @retval QSPI memory status
  */
int32_t MT25TL01G_GetFlashInfo(MT25TL01G_Info_t *pInfo)
{
  pInfo->FlashSize          = MT25TL01G_FLASH_SIZE;
  pInfo->EraseSectorSize    = (2 * MT25TL01G_SUBSECTOR_SIZE);
 8005fa6:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8005faa:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
  pInfo->ProgPageSize       = MT25TL01G_PAGE_SIZE;
  pInfo->EraseSectorsNumber = (MT25TL01G_FLASH_SIZE/pInfo->EraseSectorSize);
 8005fae:	f44f 7180 	mov.w	r1, #256	@ 0x100
  pInfo->EraseSectorSize    = (2 * MT25TL01G_SUBSECTOR_SIZE);
 8005fb2:	e9c0 2300 	strd	r2, r3, [r0]
  pInfo->EraseSectorsNumber = (MT25TL01G_FLASH_SIZE/pInfo->EraseSectorSize);
 8005fb6:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8005fba:	e9c0 3102 	strd	r3, r1, [r0, #8]
  pInfo->ProgPagesNumber    = (MT25TL01G_FLASH_SIZE/pInfo->ProgPageSize);
 8005fbe:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8005fc2:	6103      	str	r3, [r0, #16]
  return MT25TL01G_OK;
}
 8005fc4:	2000      	movs	r0, #0
 8005fc6:	4770      	bx	lr

08005fc8 <MT25TL01G_AutoPollingMemReady>:
  * @param  Ctx Component object pointer
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */
int32_t MT25TL01G_AutoPollingMemReady(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode)
{
 8005fc8:	b500      	push	{lr}

  QSPI_CommandTypeDef     s_command;
  QSPI_AutoPollingTypeDef s_config;

  /* Configure automatic polling mode to wait for memory ready */
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 8005fca:	f44f 7340 	mov.w	r3, #768	@ 0x300
{
 8005fce:	b095      	sub	sp, #84	@ 0x54
  s_command.Instruction       = MT25TL01G_READ_STATUS_REG_CMD;
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
  s_command.DataMode          = QSPI_DATA_4_LINES;
 8005fd0:	f04f 7240 	mov.w	r2, #50331648	@ 0x3000000
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 8005fd4:	930c      	str	r3, [sp, #48]	@ 0x30
  s_command.Instruction       = MT25TL01G_READ_STATUS_REG_CMD;
 8005fd6:	2305      	movs	r3, #5
  s_command.DataMode          = QSPI_DATA_4_LINES;
 8005fd8:	920f      	str	r2, [sp, #60]	@ 0x3c
  s_command.DummyCycles       = 2;
 8005fda:	2202      	movs	r2, #2
  s_command.Instruction       = MT25TL01G_READ_STATUS_REG_CMD;
 8005fdc:	9306      	str	r3, [sp, #24]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8005fde:	2300      	movs	r3, #0
  s_command.DummyCycles       = 2;
 8005fe0:	920b      	str	r2, [sp, #44]	@ 0x2c
  s_config.Interval        = 0x10;
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
  s_config.Mask            = MT25TL01G_SR_WIP | (MT25TL01G_SR_WIP <<8);
  s_config.StatusBytesSize = 2;

  if (HAL_QSPI_AutoPolling(Ctx, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8005fe2:	a906      	add	r1, sp, #24
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8005fe4:	9313      	str	r3, [sp, #76]	@ 0x4c
  s_config.Match           = 0;
 8005fe6:	9300      	str	r3, [sp, #0]
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
 8005fe8:	9304      	str	r3, [sp, #16]
  s_config.StatusBytesSize = 2;
 8005fea:	9203      	str	r2, [sp, #12]
  if (HAL_QSPI_AutoPolling(Ctx, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8005fec:	466a      	mov	r2, sp
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8005fee:	e9cd 330d 	strd	r3, r3, [sp, #52]	@ 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8005ff2:	e9cd 3311 	strd	r3, r3, [sp, #68]	@ 0x44
  s_config.Interval        = 0x10;
 8005ff6:	2310      	movs	r3, #16
 8005ff8:	9302      	str	r3, [sp, #8]
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 8005ffa:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8005ffe:	9305      	str	r3, [sp, #20]
  s_config.Mask            = MT25TL01G_SR_WIP | (MT25TL01G_SR_WIP <<8);
 8006000:	f240 1301 	movw	r3, #257	@ 0x101
 8006004:	9301      	str	r3, [sp, #4]
  if (HAL_QSPI_AutoPolling(Ctx, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8006006:	f241 3388 	movw	r3, #5000	@ 0x1388
 800600a:	f004 fd44 	bl	800aa96 <HAL_QSPI_AutoPolling>
  {
    return MT25TL01G_ERROR_AUTOPOLLING;
  }

  return MT25TL01G_OK;
 800600e:	2800      	cmp	r0, #0

}
 8006010:	bf14      	ite	ne
 8006012:	f06f 0004 	mvnne.w	r0, #4
 8006016:	2000      	moveq	r0, #0
 8006018:	b015      	add	sp, #84	@ 0x54
 800601a:	f85d fb04 	ldr.w	pc, [sp], #4

0800601e <MT25TL01G_WriteEnable>:
{
  QSPI_CommandTypeDef     s_command;
  QSPI_AutoPollingTypeDef s_config;

  /* Enable write operations */
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 800601e:	2903      	cmp	r1, #3
  s_command.DummyCycles       = 0;
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;

  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8006020:	f241 3288 	movw	r2, #5000	@ 0x1388
{
 8006024:	b530      	push	{r4, r5, lr}
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8006026:	bf08      	it	eq
 8006028:	f44f 7340 	moveq.w	r3, #768	@ 0x300
{
 800602c:	b095      	sub	sp, #84	@ 0x54
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 800602e:	bf18      	it	ne
 8006030:	f44f 7380 	movne.w	r3, #256	@ 0x100
{
 8006034:	460c      	mov	r4, r1
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8006036:	a906      	add	r1, sp, #24
{
 8006038:	4605      	mov	r5, r0
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 800603a:	930c      	str	r3, [sp, #48]	@ 0x30
  s_command.Instruction       = MT25TL01G_WRITE_ENABLE_CMD;
 800603c:	2306      	movs	r3, #6
 800603e:	9306      	str	r3, [sp, #24]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8006040:	2300      	movs	r3, #0
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8006042:	e9cd 330d 	strd	r3, r3, [sp, #52]	@ 0x34
  s_command.DataMode          = QSPI_DATA_NONE;
 8006046:	930f      	str	r3, [sp, #60]	@ 0x3c
  s_command.DummyCycles       = 0;
 8006048:	930b      	str	r3, [sp, #44]	@ 0x2c
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800604a:	9313      	str	r3, [sp, #76]	@ 0x4c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 800604c:	e9cd 3311 	strd	r3, r3, [sp, #68]	@ 0x44
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8006050:	f004 fc20 	bl	800a894 <HAL_QSPI_Command>
 8006054:	bb20      	cbnz	r0, 80060a0 <MT25TL01G_WriteEnable+0x82>
  {
    return MT25TL01G_ERROR_COMMAND;
  }

  /* Configure automatic polling mode to wait for write enabling */
  s_config.Match           = MT25TL01G_SR_WREN | (MT25TL01G_SR_WREN << 8);
 8006056:	f240 2302 	movw	r3, #514	@ 0x202
  s_config.Mask            = MT25TL01G_SR_WREN | (MT25TL01G_SR_WREN << 8);
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
  s_config.StatusBytesSize = 2;
  s_config.Interval        = 0x10;
 800605a:	2202      	movs	r2, #2
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;

  s_command.Instruction    = MT25TL01G_READ_STATUS_REG_CMD;
  s_command.DataMode       = (Mode == MT25TL01G_QPI_MODE) ? QSPI_DATA_4_LINES : QSPI_DATA_1_LINE;
 800605c:	2c03      	cmp	r4, #3
  s_command.Instruction    = MT25TL01G_READ_STATUS_REG_CMD;
 800605e:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
 8006062:	9004      	str	r0, [sp, #16]


  if (HAL_QSPI_AutoPolling(Ctx, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8006064:	4628      	mov	r0, r5
  s_config.Mask            = MT25TL01G_SR_WREN | (MT25TL01G_SR_WREN << 8);
 8006066:	e9cd 3300 	strd	r3, r3, [sp]
  s_config.Interval        = 0x10;
 800606a:	f04f 0310 	mov.w	r3, #16
 800606e:	e9cd 3202 	strd	r3, r2, [sp, #8]
  s_command.Instruction    = MT25TL01G_READ_STATUS_REG_CMD;
 8006072:	f04f 0305 	mov.w	r3, #5
  if (HAL_QSPI_AutoPolling(Ctx, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8006076:	466a      	mov	r2, sp
  s_command.Instruction    = MT25TL01G_READ_STATUS_REG_CMD;
 8006078:	e9cd 1305 	strd	r1, r3, [sp, #20]
  s_command.DataMode       = (Mode == MT25TL01G_QPI_MODE) ? QSPI_DATA_4_LINES : QSPI_DATA_1_LINE;
 800607c:	bf14      	ite	ne
 800607e:	f04f 7380 	movne.w	r3, #16777216	@ 0x1000000
 8006082:	f04f 7340 	moveq.w	r3, #50331648	@ 0x3000000
  if (HAL_QSPI_AutoPolling(Ctx, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8006086:	a906      	add	r1, sp, #24
  s_command.DataMode       = (Mode == MT25TL01G_QPI_MODE) ? QSPI_DATA_4_LINES : QSPI_DATA_1_LINE;
 8006088:	930f      	str	r3, [sp, #60]	@ 0x3c
  if (HAL_QSPI_AutoPolling(Ctx, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800608a:	f241 3388 	movw	r3, #5000	@ 0x1388
 800608e:	f004 fd02 	bl	800aa96 <HAL_QSPI_AutoPolling>
  {
    return MT25TL01G_ERROR_AUTOPOLLING;
  }

  return MT25TL01G_OK;
 8006092:	2800      	cmp	r0, #0
 8006094:	bf14      	ite	ne
 8006096:	f06f 0004 	mvnne.w	r0, #4
 800609a:	2000      	moveq	r0, #0
}
 800609c:	b015      	add	sp, #84	@ 0x54
 800609e:	bd30      	pop	{r4, r5, pc}
    return MT25TL01G_ERROR_COMMAND;
 80060a0:	f06f 0001 	mvn.w	r0, #1
 80060a4:	e7fa      	b.n	800609c <MT25TL01G_WriteEnable+0x7e>

080060a6 <MT25TL01G_Enter4BytesAddressMode>:
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 80060a6:	2903      	cmp	r1, #3
{
 80060a8:	b530      	push	{r4, r5, lr}
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 80060aa:	bf08      	it	eq
 80060ac:	f44f 7340 	moveq.w	r3, #768	@ 0x300
{
 80060b0:	b08f      	sub	sp, #60	@ 0x3c
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 80060b2:	bf18      	it	ne
 80060b4:	f44f 7380 	movne.w	r3, #256	@ 0x100
{
 80060b8:	4604      	mov	r4, r0
 80060ba:	460d      	mov	r5, r1
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 80060bc:	9306      	str	r3, [sp, #24]
  s_command.Instruction       = MT25TL01G_ENTER_4_BYTE_ADDR_MODE_CMD;
 80060be:	23b7      	movs	r3, #183	@ 0xb7
 80060c0:	9300      	str	r3, [sp, #0]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 80060c2:	2300      	movs	r3, #0
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80060c4:	e9cd 3307 	strd	r3, r3, [sp, #28]
  s_command.DataMode          = QSPI_DATA_NONE;
 80060c8:	9309      	str	r3, [sp, #36]	@ 0x24
  s_command.DummyCycles       = 0;
 80060ca:	9305      	str	r3, [sp, #20]
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 80060cc:	930d      	str	r3, [sp, #52]	@ 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 80060ce:	e9cd 330b 	strd	r3, r3, [sp, #44]	@ 0x2c
  if( MT25TL01G_WriteEnable(Ctx,Mode)!=MT25TL01G_OK)
 80060d2:	f7ff ffa4 	bl	800601e <MT25TL01G_WriteEnable>
 80060d6:	b118      	cbz	r0, 80060e0 <MT25TL01G_Enter4BytesAddressMode+0x3a>
    return MT25TL01G_ERROR_COMMAND;
 80060d8:	f06f 0001 	mvn.w	r0, #1
}
 80060dc:	b00f      	add	sp, #60	@ 0x3c
 80060de:	bd30      	pop	{r4, r5, pc}
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80060e0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80060e4:	4669      	mov	r1, sp
 80060e6:	4620      	mov	r0, r4
 80060e8:	f004 fbd4 	bl	800a894 <HAL_QSPI_Command>
 80060ec:	2800      	cmp	r0, #0
 80060ee:	d1f3      	bne.n	80060d8 <MT25TL01G_Enter4BytesAddressMode+0x32>
  else if(MT25TL01G_AutoPollingMemReady(Ctx,Mode)!=MT25TL01G_OK)
 80060f0:	4629      	mov	r1, r5
 80060f2:	4620      	mov	r0, r4
 80060f4:	f7ff ff68 	bl	8005fc8 <MT25TL01G_AutoPollingMemReady>
 80060f8:	2800      	cmp	r0, #0
 80060fa:	d0ef      	beq.n	80060dc <MT25TL01G_Enter4BytesAddressMode+0x36>
 80060fc:	e7ec      	b.n	80060d8 <MT25TL01G_Enter4BytesAddressMode+0x32>

080060fe <MT25TL01G_EnterQPIMode>:
  * @param  Ctx Component object pointer
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */
int32_t MT25TL01G_EnterQPIMode(QSPI_HandleTypeDef *Ctx)
{
 80060fe:	b500      	push	{lr}
  QSPI_CommandTypeDef s_command;

  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8006100:	f44f 7380 	mov.w	r3, #256	@ 0x100
{
 8006104:	b08f      	sub	sp, #60	@ 0x3c
  s_command.DummyCycles       = 0;
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;

  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8006106:	f241 3288 	movw	r2, #5000	@ 0x1388
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 800610a:	9306      	str	r3, [sp, #24]
  s_command.Instruction       = MT25TL01G_ENTER_QUAD_CMD;
 800610c:	2335      	movs	r3, #53	@ 0x35
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800610e:	4669      	mov	r1, sp
  s_command.Instruction       = MT25TL01G_ENTER_QUAD_CMD;
 8006110:	9300      	str	r3, [sp, #0]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8006112:	2300      	movs	r3, #0
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8006114:	e9cd 3307 	strd	r3, r3, [sp, #28]
  s_command.DataMode          = QSPI_DATA_NONE;
 8006118:	9309      	str	r3, [sp, #36]	@ 0x24
  s_command.DummyCycles       = 0;
 800611a:	9305      	str	r3, [sp, #20]
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800611c:	930d      	str	r3, [sp, #52]	@ 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 800611e:	e9cd 330b 	strd	r3, r3, [sp, #44]	@ 0x2c
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8006122:	f004 fbb7 	bl	800a894 <HAL_QSPI_Command>
  {
    return MT25TL01G_ERROR_COMMAND;
  }

  return MT25TL01G_OK;
 8006126:	2800      	cmp	r0, #0
}
 8006128:	bf14      	ite	ne
 800612a:	f06f 0001 	mvnne.w	r0, #1
 800612e:	2000      	moveq	r0, #0
 8006130:	b00f      	add	sp, #60	@ 0x3c
 8006132:	f85d fb04 	ldr.w	pc, [sp], #4

08006136 <MT25TL01G_ExitQPIMode>:
  * @param  Ctx Component object pointer
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */
int32_t MT25TL01G_ExitQPIMode(QSPI_HandleTypeDef *Ctx)
{
 8006136:	b500      	push	{lr}
  QSPI_CommandTypeDef s_command;

  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8006138:	f44f 7380 	mov.w	r3, #256	@ 0x100
{
 800613c:	b08f      	sub	sp, #60	@ 0x3c
  s_command.DummyCycles       = 0;
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;

  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800613e:	f241 3288 	movw	r2, #5000	@ 0x1388
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8006142:	9306      	str	r3, [sp, #24]
  s_command.Instruction       = MT25TL01G_EXIT_QUAD_CMD;
 8006144:	23f5      	movs	r3, #245	@ 0xf5
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8006146:	4669      	mov	r1, sp
  s_command.Instruction       = MT25TL01G_EXIT_QUAD_CMD;
 8006148:	9300      	str	r3, [sp, #0]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 800614a:	2300      	movs	r3, #0
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800614c:	e9cd 3307 	strd	r3, r3, [sp, #28]
  s_command.DataMode          = QSPI_DATA_NONE;
 8006150:	9309      	str	r3, [sp, #36]	@ 0x24
  s_command.DummyCycles       = 0;
 8006152:	9305      	str	r3, [sp, #20]
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8006154:	930d      	str	r3, [sp, #52]	@ 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8006156:	e9cd 330b 	strd	r3, r3, [sp, #44]	@ 0x2c
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800615a:	f004 fb9b 	bl	800a894 <HAL_QSPI_Command>
  {
    return MT25TL01G_ERROR_COMMAND;
  }

  return MT25TL01G_OK;
 800615e:	2800      	cmp	r0, #0
}
 8006160:	bf14      	ite	ne
 8006162:	f06f 0001 	mvnne.w	r0, #1
 8006166:	2000      	moveq	r0, #0
 8006168:	b00f      	add	sp, #60	@ 0x3c
 800616a:	f85d fb04 	ldr.w	pc, [sp], #4

0800616e <MT25TL01G_EnableMemoryMappedModeDTR>:
  * @param  Ctx Component object pointer
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */
int32_t MT25TL01G_EnableMemoryMappedModeDTR(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode)
{
 800616e:	b500      	push	{lr}
 8006170:	b091      	sub	sp, #68	@ 0x44
  QSPI_CommandTypeDef      s_command;
  QSPI_MemoryMappedTypeDef s_mem_mapped_cfg;
  switch(Mode)
 8006172:	2903      	cmp	r1, #3
 8006174:	d80e      	bhi.n	8006194 <MT25TL01G_EnableMemoryMappedModeDTR+0x26>
 8006176:	e8df f001 	tbb	[pc, r1]
 800617a:	2902      	.short	0x2902
 800617c:	3f34      	.short	0x3f34
  {
  case MT25TL01G_SPI_MODE:                /* 1-1-1 commands, Power on H/W default setting */
    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 800617e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8006182:	9308      	str	r3, [sp, #32]
    s_command.Instruction       = MT25TL01G_FAST_READ_4_BYTE_DTR_CMD;
 8006184:	230e      	movs	r3, #14
 8006186:	9302      	str	r3, [sp, #8]
    s_command.AddressMode       = QSPI_ADDRESS_1_LINE;
 8006188:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800618c:	9309      	str	r3, [sp, #36]	@ 0x24
    s_command.DataMode          = QSPI_DATA_1_LINE;
 800618e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
    break;
  case MT25TL01G_QPI_MODE:                 /* 4-4-4 commands */
    s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_DTR_CMD;
    s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
    s_command.DataMode          = QSPI_DATA_4_LINES;
 8006192:	930b      	str	r3, [sp, #44]	@ 0x2c
    break;
  }
  /* Configure the command for the read instruction */
  s_command.AddressSize       = QSPI_ADDRESS_32_BITS;
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
  s_command.DummyCycles       = MT25TL01G_DUMMY_CYCLES_READ_QUAD_DTR;
 8006194:	2208      	movs	r2, #8
  s_command.AddressSize       = QSPI_ADDRESS_32_BITS;
 8006196:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
  s_command.DdrMode           = QSPI_DDR_MODE_ENABLE;
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_HALF_CLK_DELAY;
 800619a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000

  /* Configure the memory mapped mode */
  s_mem_mapped_cfg.TimeOutActivation = QSPI_TIMEOUT_COUNTER_DISABLE;
  s_mem_mapped_cfg.TimeOutPeriod     = 0;

  if (HAL_QSPI_MemoryMapped(Ctx, &s_command, &s_mem_mapped_cfg) != HAL_OK)
 800619e:	a902      	add	r1, sp, #8
  s_command.DummyCycles       = MT25TL01G_DUMMY_CYCLES_READ_QUAD_DTR;
 80061a0:	9207      	str	r2, [sp, #28]
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_HALF_CLK_DELAY;
 80061a2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
  s_command.AddressSize       = QSPI_ADDRESS_32_BITS;
 80061a6:	9305      	str	r3, [sp, #20]
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80061a8:	2300      	movs	r3, #0
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_HALF_CLK_DELAY;
 80061aa:	e9cd c20d 	strd	ip, r2, [sp, #52]	@ 0x34
  if (HAL_QSPI_MemoryMapped(Ctx, &s_command, &s_mem_mapped_cfg) != HAL_OK)
 80061ae:	466a      	mov	r2, sp
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80061b0:	930a      	str	r3, [sp, #40]	@ 0x28
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 80061b2:	930f      	str	r3, [sp, #60]	@ 0x3c
  s_mem_mapped_cfg.TimeOutPeriod     = 0;
 80061b4:	e9cd 3300 	strd	r3, r3, [sp]
  if (HAL_QSPI_MemoryMapped(Ctx, &s_command, &s_mem_mapped_cfg) != HAL_OK)
 80061b8:	f004 fcbe 	bl	800ab38 <HAL_QSPI_MemoryMapped>
  {
    return MT25TL01G_ERROR_MEMORYMAPPED;
  }

  return MT25TL01G_OK;
 80061bc:	2800      	cmp	r0, #0
}
 80061be:	bf14      	ite	ne
 80061c0:	f06f 0005 	mvnne.w	r0, #5
 80061c4:	2000      	moveq	r0, #0
 80061c6:	b011      	add	sp, #68	@ 0x44
 80061c8:	f85d fb04 	ldr.w	pc, [sp], #4
    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 80061cc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80061d0:	9308      	str	r3, [sp, #32]
    s_command.Instruction       = MT25TL01G_DUAL_OUT_FAST_READ_DTR_CMD;
 80061d2:	233d      	movs	r3, #61	@ 0x3d
 80061d4:	9302      	str	r3, [sp, #8]
    s_command.AddressMode       = QSPI_ADDRESS_1_LINE;
 80061d6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80061da:	9309      	str	r3, [sp, #36]	@ 0x24
    s_command.DataMode          = QSPI_DATA_2_LINES;
 80061dc:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80061e0:	e7d7      	b.n	8006192 <MT25TL01G_EnableMemoryMappedModeDTR+0x24>
    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 80061e2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80061e6:	9308      	str	r3, [sp, #32]
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_4_BYTE_DTR_CMD;
 80061e8:	23ee      	movs	r3, #238	@ 0xee
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_DTR_CMD;
 80061ea:	9302      	str	r3, [sp, #8]
    s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
 80061ec:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80061f0:	9309      	str	r3, [sp, #36]	@ 0x24
    s_command.DataMode          = QSPI_DATA_4_LINES;
 80061f2:	f04f 7340 	mov.w	r3, #50331648	@ 0x3000000
 80061f6:	e7cc      	b.n	8006192 <MT25TL01G_EnableMemoryMappedModeDTR+0x24>
    s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 80061f8:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80061fc:	9308      	str	r3, [sp, #32]
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_DTR_CMD;
 80061fe:	23ed      	movs	r3, #237	@ 0xed
 8006200:	e7f3      	b.n	80061ea <MT25TL01G_EnableMemoryMappedModeDTR+0x7c>

08006202 <MT25TL01G_EnableMemoryMappedModeSTR>:
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */

int32_t MT25TL01G_EnableMemoryMappedModeSTR(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode)
{
 8006202:	b500      	push	{lr}
 8006204:	b091      	sub	sp, #68	@ 0x44
  QSPI_CommandTypeDef      s_command;
  QSPI_MemoryMappedTypeDef s_mem_mapped_cfg;
  switch(Mode)
 8006206:	2903      	cmp	r1, #3
 8006208:	d80e      	bhi.n	8006228 <MT25TL01G_EnableMemoryMappedModeSTR+0x26>
 800620a:	e8df f001 	tbb	[pc, r1]
 800620e:	2502      	.short	0x2502
 8006210:	3b30      	.short	0x3b30
  {
  case MT25TL01G_SPI_MODE:           /* 1-1-1 read commands */
    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8006212:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8006216:	9308      	str	r3, [sp, #32]
    s_command.Instruction       = MT25TL01G_FAST_READ_4_BYTE_ADDR_CMD;
 8006218:	230c      	movs	r3, #12
 800621a:	9302      	str	r3, [sp, #8]
    s_command.AddressMode       = QSPI_ADDRESS_1_LINE;
 800621c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006220:	9309      	str	r3, [sp, #36]	@ 0x24
    s_command.DataMode          = QSPI_DATA_1_LINE;
 8006222:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000

  case MT25TL01G_QPI_MODE:                 /* 4-4-4 commands */
    s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_CMD;
    s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
    s_command.DataMode          = QSPI_DATA_4_LINES;
 8006226:	930b      	str	r3, [sp, #44]	@ 0x2c

    break;

  }
  /* Configure the command for the read instruction */
  s_command.DummyCycles       = MT25TL01G_DUMMY_CYCLES_READ;
 8006228:	2308      	movs	r3, #8

  /* Configure the memory mapped mode */
  s_mem_mapped_cfg.TimeOutActivation = QSPI_TIMEOUT_COUNTER_DISABLE;
  s_mem_mapped_cfg.TimeOutPeriod     = 0;

  if (HAL_QSPI_MemoryMapped(Ctx, &s_command, &s_mem_mapped_cfg) != HAL_OK)
 800622a:	466a      	mov	r2, sp
 800622c:	a902      	add	r1, sp, #8
  s_command.DummyCycles       = MT25TL01G_DUMMY_CYCLES_READ;
 800622e:	9307      	str	r3, [sp, #28]
  s_command.AddressSize       = QSPI_ADDRESS_32_BITS;
 8006230:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8006234:	9305      	str	r3, [sp, #20]
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8006236:	2300      	movs	r3, #0
 8006238:	930a      	str	r3, [sp, #40]	@ 0x28
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800623a:	930f      	str	r3, [sp, #60]	@ 0x3c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 800623c:	e9cd 330d 	strd	r3, r3, [sp, #52]	@ 0x34
  s_mem_mapped_cfg.TimeOutPeriod     = 0;
 8006240:	e9cd 3300 	strd	r3, r3, [sp]
  if (HAL_QSPI_MemoryMapped(Ctx, &s_command, &s_mem_mapped_cfg) != HAL_OK)
 8006244:	f004 fc78 	bl	800ab38 <HAL_QSPI_MemoryMapped>
  {
    return MT25TL01G_ERROR_MEMORYMAPPED;
  }

  return MT25TL01G_OK;
 8006248:	2800      	cmp	r0, #0
}
 800624a:	bf14      	ite	ne
 800624c:	f06f 0005 	mvnne.w	r0, #5
 8006250:	2000      	moveq	r0, #0
 8006252:	b011      	add	sp, #68	@ 0x44
 8006254:	f85d fb04 	ldr.w	pc, [sp], #4
    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8006258:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800625c:	9308      	str	r3, [sp, #32]
    s_command.Instruction       = MT25TL01G_DUAL_INOUT_FAST_READ_4_BYTE_ADDR_CMD;
 800625e:	23bc      	movs	r3, #188	@ 0xbc
 8006260:	9302      	str	r3, [sp, #8]
    s_command.AddressMode       = QSPI_ADDRESS_2_LINES;
 8006262:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8006266:	9309      	str	r3, [sp, #36]	@ 0x24
    s_command.DataMode          = QSPI_DATA_2_LINES;
 8006268:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800626c:	e7db      	b.n	8006226 <MT25TL01G_EnableMemoryMappedModeSTR+0x24>
    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 800626e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8006272:	9308      	str	r3, [sp, #32]
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_4_BYTE_ADDR_CMD;
 8006274:	23ec      	movs	r3, #236	@ 0xec
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_CMD;
 8006276:	9302      	str	r3, [sp, #8]
    s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
 8006278:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800627c:	9309      	str	r3, [sp, #36]	@ 0x24
    s_command.DataMode          = QSPI_DATA_4_LINES;
 800627e:	f04f 7340 	mov.w	r3, #50331648	@ 0x3000000
 8006282:	e7d0      	b.n	8006226 <MT25TL01G_EnableMemoryMappedModeSTR+0x24>
    s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 8006284:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8006288:	9308      	str	r3, [sp, #32]
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_CMD;
 800628a:	23eb      	movs	r3, #235	@ 0xeb
 800628c:	e7f3      	b.n	8006276 <MT25TL01G_EnableMemoryMappedModeSTR+0x74>

0800628e <MT25TL01G_ResetEnable>:
int32_t MT25TL01G_ResetEnable(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode)
{
  QSPI_CommandTypeDef s_command;

  /* Initialize the reset enable command */
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 800628e:	2903      	cmp	r1, #3
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;

  /* Send the command */
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8006290:	f241 3288 	movw	r2, #5000	@ 0x1388
{
 8006294:	b500      	push	{lr}
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8006296:	bf18      	it	ne
 8006298:	f44f 7380 	movne.w	r3, #256	@ 0x100
{
 800629c:	b08f      	sub	sp, #60	@ 0x3c
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 800629e:	bf08      	it	eq
 80062a0:	f44f 7340 	moveq.w	r3, #768	@ 0x300
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80062a4:	4669      	mov	r1, sp
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 80062a6:	9306      	str	r3, [sp, #24]
  s_command.Instruction       = MT25TL01G_RESET_ENABLE_CMD;
 80062a8:	2366      	movs	r3, #102	@ 0x66
 80062aa:	9300      	str	r3, [sp, #0]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 80062ac:	2300      	movs	r3, #0
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80062ae:	e9cd 3307 	strd	r3, r3, [sp, #28]
  s_command.DataMode          = QSPI_DATA_NONE;
 80062b2:	9309      	str	r3, [sp, #36]	@ 0x24
  s_command.DummyCycles       = 0;
 80062b4:	9305      	str	r3, [sp, #20]
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 80062b6:	930d      	str	r3, [sp, #52]	@ 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 80062b8:	e9cd 330b 	strd	r3, r3, [sp, #44]	@ 0x2c
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80062bc:	f004 faea 	bl	800a894 <HAL_QSPI_Command>
  {
    return MT25TL01G_ERROR_COMMAND;
  }

  return MT25TL01G_OK;
 80062c0:	2800      	cmp	r0, #0
}
 80062c2:	bf14      	ite	ne
 80062c4:	f06f 0001 	mvnne.w	r0, #1
 80062c8:	2000      	moveq	r0, #0
 80062ca:	b00f      	add	sp, #60	@ 0x3c
 80062cc:	f85d fb04 	ldr.w	pc, [sp], #4

080062d0 <MT25TL01G_ResetMemory>:
int32_t MT25TL01G_ResetMemory(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode)
{
  QSPI_CommandTypeDef s_command;

  /* Initialize the reset enable command */
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 80062d0:	2903      	cmp	r1, #3
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;

  /* Send the command */
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80062d2:	f241 3288 	movw	r2, #5000	@ 0x1388
{
 80062d6:	b500      	push	{lr}
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 80062d8:	bf18      	it	ne
 80062da:	f44f 7380 	movne.w	r3, #256	@ 0x100
{
 80062de:	b08f      	sub	sp, #60	@ 0x3c
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 80062e0:	bf08      	it	eq
 80062e2:	f44f 7340 	moveq.w	r3, #768	@ 0x300
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80062e6:	4669      	mov	r1, sp
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 80062e8:	9306      	str	r3, [sp, #24]
  s_command.Instruction       = MT25TL01G_RESET_MEMORY_CMD ;
 80062ea:	2399      	movs	r3, #153	@ 0x99
 80062ec:	9300      	str	r3, [sp, #0]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 80062ee:	2300      	movs	r3, #0
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80062f0:	e9cd 3307 	strd	r3, r3, [sp, #28]
  s_command.DataMode          = QSPI_DATA_NONE;
 80062f4:	9309      	str	r3, [sp, #36]	@ 0x24
  s_command.DummyCycles       = 0;
 80062f6:	9305      	str	r3, [sp, #20]
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 80062f8:	930d      	str	r3, [sp, #52]	@ 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 80062fa:	e9cd 330b 	strd	r3, r3, [sp, #44]	@ 0x2c
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80062fe:	f004 fac9 	bl	800a894 <HAL_QSPI_Command>
  {
    return MT25TL01G_ERROR_COMMAND;
  }

  return MT25TL01G_OK;
 8006302:	2800      	cmp	r0, #0
}
 8006304:	bf14      	ite	ne
 8006306:	f06f 0001 	mvnne.w	r0, #1
 800630a:	2000      	moveq	r0, #0
 800630c:	b00f      	add	sp, #60	@ 0x3c
 800630e:	f85d fb04 	ldr.w	pc, [sp], #4

08006312 <OTM8009A_ReadRegWrap>:
  * @param  pData  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval error status
  */
static int32_t OTM8009A_ReadRegWrap(void *Handle, uint16_t Reg, uint8_t* pData, uint16_t Length)
{
 8006312:	b410      	push	{r4}
  OTM8009A_Object_t *pObj = (OTM8009A_Object_t *)Handle;

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8006314:	6884      	ldr	r4, [r0, #8]
 8006316:	8800      	ldrh	r0, [r0, #0]
 8006318:	46a4      	mov	ip, r4
}
 800631a:	f85d 4b04 	ldr.w	r4, [sp], #4
  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 800631e:	4760      	bx	ip

08006320 <OTM8009A_WriteRegWrap>:
  * @param  pData  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval error status
  */
static int32_t OTM8009A_WriteRegWrap(void *Handle, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8006320:	b410      	push	{r4}
  OTM8009A_Object_t *pObj = (OTM8009A_Object_t *)Handle;

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8006322:	6844      	ldr	r4, [r0, #4]
 8006324:	8800      	ldrh	r0, [r0, #0]
 8006326:	46a4      	mov	ip, r4
}
 8006328:	f85d 4b04 	ldr.w	r4, [sp], #4
  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 800632c:	4760      	bx	ip

0800632e <OTM8009A_IO_Delay.isra.0>:

/**
  * @brief  OTM8009A delay
  * @param  Delay  Delay in ms
  */
static int32_t OTM8009A_IO_Delay(OTM8009A_Object_t *pObj, uint32_t Delay)
 800632e:	b570      	push	{r4, r5, r6, lr}
{
  uint32_t tickstart;
  tickstart = pObj->IO.GetTick();
 8006330:	68c3      	ldr	r3, [r0, #12]
static int32_t OTM8009A_IO_Delay(OTM8009A_Object_t *pObj, uint32_t Delay)
 8006332:	4604      	mov	r4, r0
 8006334:	460d      	mov	r5, r1
  tickstart = pObj->IO.GetTick();
 8006336:	4798      	blx	r3
 8006338:	4606      	mov	r6, r0
  while((pObj->IO.GetTick() - tickstart) < Delay)
 800633a:	68e3      	ldr	r3, [r4, #12]
 800633c:	4798      	blx	r3
 800633e:	1b83      	subs	r3, r0, r6
 8006340:	42ab      	cmp	r3, r5
 8006342:	d3fa      	bcc.n	800633a <OTM8009A_IO_Delay.isra.0+0xc>
  {
  }
  return OTM8009A_OK;
}
 8006344:	bd70      	pop	{r4, r5, r6, pc}
	...

08006348 <OTM8009A_Init>:
{
 8006348:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  ret = otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 800634c:	2300      	movs	r3, #0
 800634e:	f100 0510 	add.w	r5, r0, #16
{
 8006352:	4607      	mov	r7, r0
 8006354:	460e      	mov	r6, r1
 8006356:	4690      	mov	r8, r2
  ret = otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8006358:	4619      	mov	r1, r3
 800635a:	4ade      	ldr	r2, [pc, #888]	@ (80066d4 <OTM8009A_Init+0x38c>)
 800635c:	4628      	mov	r0, r5
 800635e:	f000 fb99 	bl	8006a94 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data1, 3);
 8006362:	2303      	movs	r3, #3
  ret = otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8006364:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data1, 3);
 8006366:	4adc      	ldr	r2, [pc, #880]	@ (80066d8 <OTM8009A_Init+0x390>)
 8006368:	21ff      	movs	r1, #255	@ 0xff
 800636a:	4628      	mov	r0, r5
 800636c:	f000 fb92 	bl	8006a94 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8006370:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data1, 3);
 8006372:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8006374:	4ad9      	ldr	r2, [pc, #868]	@ (80066dc <OTM8009A_Init+0x394>)
 8006376:	4619      	mov	r1, r3
 8006378:	4628      	mov	r0, r5
 800637a:	f000 fb8b 	bl	8006a94 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data2, 2);
 800637e:	2302      	movs	r3, #2
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8006380:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data2, 2);
 8006382:	4ad7      	ldr	r2, [pc, #860]	@ (80066e0 <OTM8009A_Init+0x398>)
 8006384:	21ff      	movs	r1, #255	@ 0xff
 8006386:	4628      	mov	r0, r5
 8006388:	f000 fb84 	bl	8006a94 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 800638c:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data2, 2);
 800638e:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8006390:	4ad2      	ldr	r2, [pc, #840]	@ (80066dc <OTM8009A_Init+0x394>)
 8006392:	4619      	mov	r1, r3
 8006394:	4628      	mov	r0, r5
 8006396:	f000 fb7d 	bl	8006a94 <otm8009a_write_reg>
 800639a:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[3], 0);
 800639c:	2300      	movs	r3, #0
 800639e:	4ad1      	ldr	r2, [pc, #836]	@ (80066e4 <OTM8009A_Init+0x39c>)
 80063a0:	21c4      	movs	r1, #196	@ 0xc4
 80063a2:	4628      	mov	r0, r5
 80063a4:	f000 fb76 	bl	8006a94 <otm8009a_write_reg>
  (void)OTM8009A_IO_Delay(pObj, 10);
 80063a8:	210a      	movs	r1, #10
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[3], 0);
 80063aa:	4404      	add	r4, r0
  (void)OTM8009A_IO_Delay(pObj, 10);
 80063ac:	4638      	mov	r0, r7
 80063ae:	f7ff ffbe 	bl	800632e <OTM8009A_IO_Delay.isra.0>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[4], 0);
 80063b2:	2300      	movs	r3, #0
 80063b4:	4acc      	ldr	r2, [pc, #816]	@ (80066e8 <OTM8009A_Init+0x3a0>)
 80063b6:	4628      	mov	r0, r5
 80063b8:	4619      	mov	r1, r3
 80063ba:	f000 fb6b 	bl	8006a94 <otm8009a_write_reg>
 80063be:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[5], 0);
 80063c0:	2300      	movs	r3, #0
 80063c2:	4aca      	ldr	r2, [pc, #808]	@ (80066ec <OTM8009A_Init+0x3a4>)
 80063c4:	21c4      	movs	r1, #196	@ 0xc4
 80063c6:	4628      	mov	r0, r5
 80063c8:	f000 fb64 	bl	8006a94 <otm8009a_write_reg>
  (void)OTM8009A_IO_Delay(pObj, 10);
 80063cc:	210a      	movs	r1, #10
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[5], 0);
 80063ce:	4404      	add	r4, r0
  (void)OTM8009A_IO_Delay(pObj, 10);
 80063d0:	4638      	mov	r0, r7
 80063d2:	f7ff ffac 	bl	800632e <OTM8009A_IO_Delay.isra.0>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[6], 0);
 80063d6:	2300      	movs	r3, #0
 80063d8:	4ac5      	ldr	r2, [pc, #788]	@ (80066f0 <OTM8009A_Init+0x3a8>)
 80063da:	4628      	mov	r0, r5
 80063dc:	4619      	mov	r1, r3
 80063de:	f000 fb59 	bl	8006a94 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[7], 0);
 80063e2:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[6], 0);
 80063e4:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[7], 0);
 80063e6:	4ac3      	ldr	r2, [pc, #780]	@ (80066f4 <OTM8009A_Init+0x3ac>)
 80063e8:	21c5      	movs	r1, #197	@ 0xc5
 80063ea:	4628      	mov	r0, r5
 80063ec:	f000 fb52 	bl	8006a94 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[8], 0);
 80063f0:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[7], 0);
 80063f2:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[8], 0);
 80063f4:	4ac0      	ldr	r2, [pc, #768]	@ (80066f8 <OTM8009A_Init+0x3b0>)
 80063f6:	4619      	mov	r1, r3
 80063f8:	4628      	mov	r0, r5
 80063fa:	f000 fb4b 	bl	8006a94 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[9], 0);
 80063fe:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[8], 0);
 8006400:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[9], 0);
 8006402:	4abe      	ldr	r2, [pc, #760]	@ (80066fc <OTM8009A_Init+0x3b4>)
 8006404:	21c5      	movs	r1, #197	@ 0xc5
 8006406:	4628      	mov	r0, r5
 8006408:	f000 fb44 	bl	8006a94 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[10], 0);
 800640c:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[9], 0);
 800640e:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[10], 0);
 8006410:	4abb      	ldr	r2, [pc, #748]	@ (8006700 <OTM8009A_Init+0x3b8>)
 8006412:	4619      	mov	r1, r3
 8006414:	4628      	mov	r0, r5
 8006416:	f000 fb3d 	bl	8006a94 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC0, &short_reg_data[11], 0);
 800641a:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[10], 0);
 800641c:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC0, &short_reg_data[11], 0);
 800641e:	4ab9      	ldr	r2, [pc, #740]	@ (8006704 <OTM8009A_Init+0x3bc>)
 8006420:	21c0      	movs	r1, #192	@ 0xc0
 8006422:	4628      	mov	r0, r5
 8006424:	f000 fb36 	bl	8006a94 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8006428:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC0, &short_reg_data[11], 0);
 800642a:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 800642c:	4aa9      	ldr	r2, [pc, #676]	@ (80066d4 <OTM8009A_Init+0x38c>)
 800642e:	4619      	mov	r1, r3
 8006430:	4628      	mov	r0, r5
 8006432:	f000 fb2f 	bl	8006a94 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xD9, &short_reg_data[12], 0);
 8006436:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8006438:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xD9, &short_reg_data[12], 0);
 800643a:	4ab3      	ldr	r2, [pc, #716]	@ (8006708 <OTM8009A_Init+0x3c0>)
 800643c:	21d9      	movs	r1, #217	@ 0xd9
 800643e:	4628      	mov	r0, r5
 8006440:	f000 fb28 	bl	8006a94 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 8006444:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xD9, &short_reg_data[12], 0);
 8006446:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 8006448:	4ab0      	ldr	r2, [pc, #704]	@ (800670c <OTM8009A_Init+0x3c4>)
 800644a:	4619      	mov	r1, r3
 800644c:	4628      	mov	r0, r5
 800644e:	f000 fb21 	bl	8006a94 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[16], 0);
 8006452:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 8006454:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[16], 0);
 8006456:	4aae      	ldr	r2, [pc, #696]	@ (8006710 <OTM8009A_Init+0x3c8>)
 8006458:	21c1      	movs	r1, #193	@ 0xc1
 800645a:	4628      	mov	r0, r5
 800645c:	f000 fb1a 	bl	8006a94 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[17], 0);
 8006460:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[16], 0);
 8006462:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[17], 0);
 8006464:	4aab      	ldr	r2, [pc, #684]	@ (8006714 <OTM8009A_Init+0x3cc>)
 8006466:	4619      	mov	r1, r3
 8006468:	4628      	mov	r0, r5
 800646a:	f000 fb13 	bl	8006a94 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[18], 0);
 800646e:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[17], 0);
 8006470:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[18], 0);
 8006472:	4aa9      	ldr	r2, [pc, #676]	@ (8006718 <OTM8009A_Init+0x3d0>)
 8006474:	21c5      	movs	r1, #197	@ 0xc5
 8006476:	4628      	mov	r0, r5
 8006478:	f000 fb0c 	bl	8006a94 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[19], 0);
 800647c:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[18], 0);
 800647e:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[19], 0);
 8006480:	4aa6      	ldr	r2, [pc, #664]	@ (800671c <OTM8009A_Init+0x3d4>)
 8006482:	4619      	mov	r1, r3
 8006484:	4628      	mov	r0, r5
 8006486:	f000 fb05 	bl	8006a94 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[9], 0);
 800648a:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[19], 0);
 800648c:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[9], 0);
 800648e:	4a9b      	ldr	r2, [pc, #620]	@ (80066fc <OTM8009A_Init+0x3b4>)
 8006490:	21c5      	movs	r1, #197	@ 0xc5
 8006492:	4628      	mov	r0, r5
 8006494:	f000 fafe 	bl	8006a94 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8006498:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[9], 0);
 800649a:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 800649c:	4a8d      	ldr	r2, [pc, #564]	@ (80066d4 <OTM8009A_Init+0x38c>)
 800649e:	4619      	mov	r1, r3
 80064a0:	4628      	mov	r0, r5
 80064a2:	f000 faf7 	bl	8006a94 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xD8, lcd_reg_data5, 2);
 80064a6:	2302      	movs	r3, #2
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 80064a8:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xD8, lcd_reg_data5, 2);
 80064aa:	4a9d      	ldr	r2, [pc, #628]	@ (8006720 <OTM8009A_Init+0x3d8>)
 80064ac:	21d8      	movs	r1, #216	@ 0xd8
 80064ae:	4628      	mov	r0, r5
 80064b0:	f000 faf0 	bl	8006a94 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[20], 0);
 80064b4:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xD8, lcd_reg_data5, 2);
 80064b6:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[20], 0);
 80064b8:	4a9a      	ldr	r2, [pc, #616]	@ (8006724 <OTM8009A_Init+0x3dc>)
 80064ba:	4619      	mov	r1, r3
 80064bc:	4628      	mov	r0, r5
 80064be:	f000 fae9 	bl	8006a94 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[21], 0);
 80064c2:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[20], 0);
 80064c4:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[21], 0);
 80064c6:	4a98      	ldr	r2, [pc, #608]	@ (8006728 <OTM8009A_Init+0x3e0>)
 80064c8:	21c5      	movs	r1, #197	@ 0xc5
 80064ca:	4628      	mov	r0, r5
 80064cc:	f000 fae2 	bl	8006a94 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[22], 0);
 80064d0:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[21], 0);
 80064d2:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[22], 0);
 80064d4:	4a95      	ldr	r2, [pc, #596]	@ (800672c <OTM8009A_Init+0x3e4>)
 80064d6:	4619      	mov	r1, r3
 80064d8:	4628      	mov	r0, r5
 80064da:	f000 fadb 	bl	8006a94 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC0, &short_reg_data[23], 0);
 80064de:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[22], 0);
 80064e0:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC0, &short_reg_data[23], 0);
 80064e2:	4a93      	ldr	r2, [pc, #588]	@ (8006730 <OTM8009A_Init+0x3e8>)
 80064e4:	21c0      	movs	r1, #192	@ 0xc0
 80064e6:	4628      	mov	r0, r5
 80064e8:	f000 fad4 	bl	8006a94 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[24], 0);
 80064ec:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC0, &short_reg_data[23], 0);
 80064ee:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[24], 0);
 80064f0:	4a90      	ldr	r2, [pc, #576]	@ (8006734 <OTM8009A_Init+0x3ec>)
 80064f2:	4619      	mov	r1, r3
 80064f4:	4628      	mov	r0, r5
 80064f6:	f000 facd 	bl	8006a94 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[25], 0);
 80064fa:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[24], 0);
 80064fc:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[25], 0);
 80064fe:	4a8e      	ldr	r2, [pc, #568]	@ (8006738 <OTM8009A_Init+0x3f0>)
 8006500:	21c5      	movs	r1, #197	@ 0xc5
 8006502:	4628      	mov	r0, r5
 8006504:	f000 fac6 	bl	8006a94 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 8006508:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[25], 0);
 800650a:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 800650c:	4a8b      	ldr	r2, [pc, #556]	@ (800673c <OTM8009A_Init+0x3f4>)
 800650e:	4619      	mov	r1, r3
 8006510:	4628      	mov	r0, r5
 8006512:	f000 fabf 	bl	8006a94 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[26], 0);
 8006516:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 8006518:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[26], 0);
 800651a:	4a89      	ldr	r2, [pc, #548]	@ (8006740 <OTM8009A_Init+0x3f8>)
 800651c:	21c4      	movs	r1, #196	@ 0xc4
 800651e:	4628      	mov	r0, r5
 8006520:	f000 fab8 	bl	8006a94 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 8006524:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[26], 0);
 8006526:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 8006528:	4a78      	ldr	r2, [pc, #480]	@ (800670c <OTM8009A_Init+0x3c4>)
 800652a:	4619      	mov	r1, r3
 800652c:	4628      	mov	r0, r5
 800652e:	f000 fab1 	bl	8006a94 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[27], 0);
 8006532:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 8006534:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[27], 0);
 8006536:	4a83      	ldr	r2, [pc, #524]	@ (8006744 <OTM8009A_Init+0x3fc>)
 8006538:	21c1      	movs	r1, #193	@ 0xc1
 800653a:	4628      	mov	r0, r5
 800653c:	f000 faaa 	bl	8006a94 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[28], 0);
 8006540:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[27], 0);
 8006542:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[28], 0);
 8006544:	4a80      	ldr	r2, [pc, #512]	@ (8006748 <OTM8009A_Init+0x400>)
 8006546:	4619      	mov	r1, r3
 8006548:	4628      	mov	r0, r5
 800654a:	f000 faa3 	bl	8006a94 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xB3, lcd_reg_data6, 2);
 800654e:	2302      	movs	r3, #2
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[28], 0);
 8006550:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xB3, lcd_reg_data6, 2);
 8006552:	4a7e      	ldr	r2, [pc, #504]	@ (800674c <OTM8009A_Init+0x404>)
 8006554:	21b3      	movs	r1, #179	@ 0xb3
 8006556:	4628      	mov	r0, r5
 8006558:	f000 fa9c 	bl	8006a94 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 800655c:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xB3, lcd_reg_data6, 2);
 800655e:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8006560:	4a5e      	ldr	r2, [pc, #376]	@ (80066dc <OTM8009A_Init+0x394>)
 8006562:	4619      	mov	r1, r3
 8006564:	4628      	mov	r0, r5
 8006566:	f000 fa95 	bl	8006a94 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data7, 6);
 800656a:	2306      	movs	r3, #6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 800656c:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data7, 6);
 800656e:	4a78      	ldr	r2, [pc, #480]	@ (8006750 <OTM8009A_Init+0x408>)
 8006570:	21ce      	movs	r1, #206	@ 0xce
 8006572:	4628      	mov	r0, r5
 8006574:	f000 fa8e 	bl	8006a94 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 8006578:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data7, 6);
 800657a:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 800657c:	4a75      	ldr	r2, [pc, #468]	@ (8006754 <OTM8009A_Init+0x40c>)
 800657e:	4619      	mov	r1, r3
 8006580:	4628      	mov	r0, r5
 8006582:	f000 fa87 	bl	8006a94 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data8, 14);
 8006586:	230e      	movs	r3, #14
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 8006588:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data8, 14);
 800658a:	4a73      	ldr	r2, [pc, #460]	@ (8006758 <OTM8009A_Init+0x410>)
 800658c:	21ce      	movs	r1, #206	@ 0xce
 800658e:	4628      	mov	r0, r5
 8006590:	f000 fa80 	bl	8006a94 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 8006594:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data8, 14);
 8006596:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 8006598:	4a70      	ldr	r2, [pc, #448]	@ (800675c <OTM8009A_Init+0x414>)
 800659a:	4619      	mov	r1, r3
 800659c:	4628      	mov	r0, r5
 800659e:	f000 fa79 	bl	8006a94 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data9, 14);
 80065a2:	230e      	movs	r3, #14
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 80065a4:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data9, 14);
 80065a6:	4a6e      	ldr	r2, [pc, #440]	@ (8006760 <OTM8009A_Init+0x418>)
 80065a8:	21ce      	movs	r1, #206	@ 0xce
 80065aa:	4628      	mov	r0, r5
 80065ac:	f000 fa72 	bl	8006a94 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 80065b0:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data9, 14);
 80065b2:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 80065b4:	4a6b      	ldr	r2, [pc, #428]	@ (8006764 <OTM8009A_Init+0x41c>)
 80065b6:	4619      	mov	r1, r3
 80065b8:	4628      	mov	r0, r5
 80065ba:	f000 fa6b 	bl	8006a94 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCF, lcd_reg_data10, 10);
 80065be:	230a      	movs	r3, #10
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 80065c0:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCF, lcd_reg_data10, 10);
 80065c2:	4a69      	ldr	r2, [pc, #420]	@ (8006768 <OTM8009A_Init+0x420>)
 80065c4:	21cf      	movs	r1, #207	@ 0xcf
 80065c6:	4628      	mov	r0, r5
 80065c8:	f000 fa64 	bl	8006a94 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 80065cc:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCF, lcd_reg_data10, 10);
 80065ce:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 80065d0:	4a66      	ldr	r2, [pc, #408]	@ (800676c <OTM8009A_Init+0x424>)
 80065d2:	4619      	mov	r1, r3
 80065d4:	4628      	mov	r0, r5
 80065d6:	f000 fa5d 	bl	8006a94 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCF, &short_reg_data[45], 0);
 80065da:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 80065dc:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCF, &short_reg_data[45], 0);
 80065de:	4a64      	ldr	r2, [pc, #400]	@ (8006770 <OTM8009A_Init+0x428>)
 80065e0:	21cf      	movs	r1, #207	@ 0xcf
 80065e2:	4628      	mov	r0, r5
 80065e4:	f000 fa56 	bl	8006a94 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 80065e8:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCF, &short_reg_data[45], 0);
 80065ea:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 80065ec:	4a3b      	ldr	r2, [pc, #236]	@ (80066dc <OTM8009A_Init+0x394>)
 80065ee:	4619      	mov	r1, r3
 80065f0:	4628      	mov	r0, r5
 80065f2:	f000 fa4f 	bl	8006a94 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data11, 10);
 80065f6:	230a      	movs	r3, #10
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 80065f8:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data11, 10);
 80065fa:	4a5e      	ldr	r2, [pc, #376]	@ (8006774 <OTM8009A_Init+0x42c>)
 80065fc:	21cb      	movs	r1, #203	@ 0xcb
 80065fe:	4628      	mov	r0, r5
 8006600:	f000 fa48 	bl	8006a94 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 8006604:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data11, 10);
 8006606:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 8006608:	4a5b      	ldr	r2, [pc, #364]	@ (8006778 <OTM8009A_Init+0x430>)
 800660a:	4619      	mov	r1, r3
 800660c:	4628      	mov	r0, r5
 800660e:	f000 fa41 	bl	8006a94 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data12, 15);
 8006612:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 8006614:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data12, 15);
 8006616:	4a59      	ldr	r2, [pc, #356]	@ (800677c <OTM8009A_Init+0x434>)
 8006618:	21cb      	movs	r1, #203	@ 0xcb
 800661a:	4628      	mov	r0, r5
 800661c:	f000 fa3a 	bl	8006a94 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 8006620:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data12, 15);
 8006622:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 8006624:	4a4b      	ldr	r2, [pc, #300]	@ (8006754 <OTM8009A_Init+0x40c>)
 8006626:	4619      	mov	r1, r3
 8006628:	4628      	mov	r0, r5
 800662a:	f000 fa33 	bl	8006a94 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data13, 15);
 800662e:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 8006630:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data13, 15);
 8006632:	4a53      	ldr	r2, [pc, #332]	@ (8006780 <OTM8009A_Init+0x438>)
 8006634:	21cb      	movs	r1, #203	@ 0xcb
 8006636:	4628      	mov	r0, r5
 8006638:	f000 fa2c 	bl	8006a94 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 800663c:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data13, 15);
 800663e:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 8006640:	4a46      	ldr	r2, [pc, #280]	@ (800675c <OTM8009A_Init+0x414>)
 8006642:	4619      	mov	r1, r3
 8006644:	4628      	mov	r0, r5
 8006646:	f000 fa25 	bl	8006a94 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data14, 10);
 800664a:	230a      	movs	r3, #10
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 800664c:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data14, 10);
 800664e:	4a4d      	ldr	r2, [pc, #308]	@ (8006784 <OTM8009A_Init+0x43c>)
 8006650:	21cb      	movs	r1, #203	@ 0xcb
 8006652:	4628      	mov	r0, r5
 8006654:	f000 fa1e 	bl	8006a94 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 8006658:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data14, 10);
 800665a:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 800665c:	4a41      	ldr	r2, [pc, #260]	@ (8006764 <OTM8009A_Init+0x41c>)
 800665e:	4619      	mov	r1, r3
 8006660:	4628      	mov	r0, r5
 8006662:	f000 fa17 	bl	8006a94 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data15, 15);
 8006666:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 8006668:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data15, 15);
 800666a:	4a47      	ldr	r2, [pc, #284]	@ (8006788 <OTM8009A_Init+0x440>)
 800666c:	21cb      	movs	r1, #203	@ 0xcb
 800666e:	4628      	mov	r0, r5
 8006670:	f000 fa10 	bl	8006a94 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 8006674:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data15, 15);
 8006676:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 8006678:	4a3c      	ldr	r2, [pc, #240]	@ (800676c <OTM8009A_Init+0x424>)
 800667a:	4619      	mov	r1, r3
 800667c:	4628      	mov	r0, r5
 800667e:	f000 fa09 	bl	8006a94 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data16, 15);
 8006682:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 8006684:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data16, 15);
 8006686:	4a41      	ldr	r2, [pc, #260]	@ (800678c <OTM8009A_Init+0x444>)
 8006688:	21cb      	movs	r1, #203	@ 0xcb
 800668a:	4628      	mov	r0, r5
 800668c:	f000 fa02 	bl	8006a94 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[34], 0);
 8006690:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data16, 15);
 8006692:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[34], 0);
 8006694:	4a3e      	ldr	r2, [pc, #248]	@ (8006790 <OTM8009A_Init+0x448>)
 8006696:	4619      	mov	r1, r3
 8006698:	4628      	mov	r0, r5
 800669a:	f000 f9fb 	bl	8006a94 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data17, 10);
 800669e:	230a      	movs	r3, #10
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[34], 0);
 80066a0:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data17, 10);
 80066a2:	4a3c      	ldr	r2, [pc, #240]	@ (8006794 <OTM8009A_Init+0x44c>)
 80066a4:	21cb      	movs	r1, #203	@ 0xcb
 80066a6:	4628      	mov	r0, r5
 80066a8:	f000 f9f4 	bl	8006a94 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[35], 0);
 80066ac:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data17, 10);
 80066ae:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[35], 0);
 80066b0:	4a39      	ldr	r2, [pc, #228]	@ (8006798 <OTM8009A_Init+0x450>)
 80066b2:	4619      	mov	r1, r3
 80066b4:	4628      	mov	r0, r5
 80066b6:	f000 f9ed 	bl	8006a94 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data18, 10);
 80066ba:	230a      	movs	r3, #10
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[35], 0);
 80066bc:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data18, 10);
 80066be:	4a37      	ldr	r2, [pc, #220]	@ (800679c <OTM8009A_Init+0x454>)
 80066c0:	21cb      	movs	r1, #203	@ 0xcb
 80066c2:	4628      	mov	r0, r5
 80066c4:	f000 f9e6 	bl	8006a94 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 80066c8:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data18, 10);
 80066ca:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 80066cc:	4a03      	ldr	r2, [pc, #12]	@ (80066dc <OTM8009A_Init+0x394>)
 80066ce:	4619      	mov	r1, r3
 80066d0:	4628      	mov	r0, r5
 80066d2:	e065      	b.n	80067a0 <OTM8009A_Init+0x458>
 80066d4:	0802b59d 	.word	0x0802b59d
 80066d8:	0802b599 	.word	0x0802b599
 80066dc:	0802b59e 	.word	0x0802b59e
 80066e0:	0802b597 	.word	0x0802b597
 80066e4:	0802b59f 	.word	0x0802b59f
 80066e8:	0802b5a0 	.word	0x0802b5a0
 80066ec:	0802b5a1 	.word	0x0802b5a1
 80066f0:	0802b5a2 	.word	0x0802b5a2
 80066f4:	0802b5a3 	.word	0x0802b5a3
 80066f8:	0802b5a4 	.word	0x0802b5a4
 80066fc:	0802b5a5 	.word	0x0802b5a5
 8006700:	0802b5a6 	.word	0x0802b5a6
 8006704:	0802b5a7 	.word	0x0802b5a7
 8006708:	0802b5a8 	.word	0x0802b5a8
 800670c:	0802b5ab 	.word	0x0802b5ab
 8006710:	0802b5ac 	.word	0x0802b5ac
 8006714:	0802b5ad 	.word	0x0802b5ad
 8006718:	0802b5ae 	.word	0x0802b5ae
 800671c:	0802b5af 	.word	0x0802b5af
 8006720:	0802b595 	.word	0x0802b595
 8006724:	0802b5b0 	.word	0x0802b5b0
 8006728:	0802b5b1 	.word	0x0802b5b1
 800672c:	0802b5b2 	.word	0x0802b5b2
 8006730:	0802b5b3 	.word	0x0802b5b3
 8006734:	0802b5b4 	.word	0x0802b5b4
 8006738:	0802b5b5 	.word	0x0802b5b5
 800673c:	0802b5a9 	.word	0x0802b5a9
 8006740:	0802b5b6 	.word	0x0802b5b6
 8006744:	0802b5b7 	.word	0x0802b5b7
 8006748:	0802b5b8 	.word	0x0802b5b8
 800674c:	0802b593 	.word	0x0802b593
 8006750:	0802b58d 	.word	0x0802b58d
 8006754:	0802b5b9 	.word	0x0802b5b9
 8006758:	0802b57f 	.word	0x0802b57f
 800675c:	0802b5ba 	.word	0x0802b5ba
 8006760:	0802b571 	.word	0x0802b571
 8006764:	0802b5bb 	.word	0x0802b5bb
 8006768:	0802b567 	.word	0x0802b567
 800676c:	0802b5bc 	.word	0x0802b5bc
 8006770:	0802b5c9 	.word	0x0802b5c9
 8006774:	0802b55d 	.word	0x0802b55d
 8006778:	0802b5bd 	.word	0x0802b5bd
 800677c:	0802b54e 	.word	0x0802b54e
 8006780:	0802b53f 	.word	0x0802b53f
 8006784:	0802b535 	.word	0x0802b535
 8006788:	0802b526 	.word	0x0802b526
 800678c:	0802b517 	.word	0x0802b517
 8006790:	0802b5be 	.word	0x0802b5be
 8006794:	0802b50d 	.word	0x0802b50d
 8006798:	0802b5bf 	.word	0x0802b5bf
 800679c:	0802b503 	.word	0x0802b503
 80067a0:	f000 f978 	bl	8006a94 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data19, 10);
 80067a4:	230a      	movs	r3, #10
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 80067a6:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data19, 10);
 80067a8:	4a8e      	ldr	r2, [pc, #568]	@ (80069e4 <OTM8009A_Init+0x69c>)
 80067aa:	21cc      	movs	r1, #204	@ 0xcc
 80067ac:	4628      	mov	r0, r5
 80067ae:	f000 f971 	bl	8006a94 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 80067b2:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data19, 10);
 80067b4:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 80067b6:	4a8c      	ldr	r2, [pc, #560]	@ (80069e8 <OTM8009A_Init+0x6a0>)
 80067b8:	4619      	mov	r1, r3
 80067ba:	4628      	mov	r0, r5
 80067bc:	f000 f96a 	bl	8006a94 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data20, 15);
 80067c0:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 80067c2:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data20, 15);
 80067c4:	4a89      	ldr	r2, [pc, #548]	@ (80069ec <OTM8009A_Init+0x6a4>)
 80067c6:	21cc      	movs	r1, #204	@ 0xcc
 80067c8:	4628      	mov	r0, r5
 80067ca:	f000 f963 	bl	8006a94 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 80067ce:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data20, 15);
 80067d0:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 80067d2:	4a87      	ldr	r2, [pc, #540]	@ (80069f0 <OTM8009A_Init+0x6a8>)
 80067d4:	4619      	mov	r1, r3
 80067d6:	4628      	mov	r0, r5
 80067d8:	f000 f95c 	bl	8006a94 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data21, 15);
 80067dc:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 80067de:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data21, 15);
 80067e0:	4a84      	ldr	r2, [pc, #528]	@ (80069f4 <OTM8009A_Init+0x6ac>)
 80067e2:	21cc      	movs	r1, #204	@ 0xcc
 80067e4:	4628      	mov	r0, r5
 80067e6:	f000 f955 	bl	8006a94 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 80067ea:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data21, 15);
 80067ec:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 80067ee:	4a82      	ldr	r2, [pc, #520]	@ (80069f8 <OTM8009A_Init+0x6b0>)
 80067f0:	4619      	mov	r1, r3
 80067f2:	4628      	mov	r0, r5
 80067f4:	f000 f94e 	bl	8006a94 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data22, 10);
 80067f8:	230a      	movs	r3, #10
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 80067fa:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data22, 10);
 80067fc:	4a7f      	ldr	r2, [pc, #508]	@ (80069fc <OTM8009A_Init+0x6b4>)
 80067fe:	21cc      	movs	r1, #204	@ 0xcc
 8006800:	4628      	mov	r0, r5
 8006802:	f000 f947 	bl	8006a94 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 8006806:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data22, 10);
 8006808:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 800680a:	4a7d      	ldr	r2, [pc, #500]	@ (8006a00 <OTM8009A_Init+0x6b8>)
 800680c:	4619      	mov	r1, r3
 800680e:	4628      	mov	r0, r5
 8006810:	f000 f940 	bl	8006a94 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data23, 15);
 8006814:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 8006816:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data23, 15);
 8006818:	4a7a      	ldr	r2, [pc, #488]	@ (8006a04 <OTM8009A_Init+0x6bc>)
 800681a:	21cc      	movs	r1, #204	@ 0xcc
 800681c:	4628      	mov	r0, r5
 800681e:	f000 f939 	bl	8006a94 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 8006822:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data23, 15);
 8006824:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 8006826:	4a78      	ldr	r2, [pc, #480]	@ (8006a08 <OTM8009A_Init+0x6c0>)
 8006828:	4619      	mov	r1, r3
 800682a:	4628      	mov	r0, r5
 800682c:	f000 f932 	bl	8006a94 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data24, 15);
 8006830:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 8006832:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data24, 15);
 8006834:	4a75      	ldr	r2, [pc, #468]	@ (8006a0c <OTM8009A_Init+0x6c4>)
 8006836:	21cc      	movs	r1, #204	@ 0xcc
 8006838:	4628      	mov	r0, r5
 800683a:	f000 f92b 	bl	8006a94 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 800683e:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data24, 15);
 8006840:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 8006842:	4a73      	ldr	r2, [pc, #460]	@ (8006a10 <OTM8009A_Init+0x6c8>)
 8006844:	4619      	mov	r1, r3
 8006846:	4628      	mov	r0, r5
 8006848:	f000 f924 	bl	8006a94 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[46], 0);
 800684c:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 800684e:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[46], 0);
 8006850:	4a70      	ldr	r2, [pc, #448]	@ (8006a14 <OTM8009A_Init+0x6cc>)
 8006852:	21c5      	movs	r1, #197	@ 0xc5
 8006854:	4628      	mov	r0, r5
 8006856:	f000 f91d 	bl	8006a94 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[47], 0);
 800685a:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[46], 0);
 800685c:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[47], 0);
 800685e:	4a6e      	ldr	r2, [pc, #440]	@ (8006a18 <OTM8009A_Init+0x6d0>)
 8006860:	4619      	mov	r1, r3
 8006862:	4628      	mov	r0, r5
 8006864:	f000 f916 	bl	8006a94 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xF5, &short_reg_data[48], 0);
 8006868:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[47], 0);
 800686a:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xF5, &short_reg_data[48], 0);
 800686c:	4a6b      	ldr	r2, [pc, #428]	@ (8006a1c <OTM8009A_Init+0x6d4>)
 800686e:	21f5      	movs	r1, #245	@ 0xf5
 8006870:	4628      	mov	r0, r5
 8006872:	f000 f90f 	bl	8006a94 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[49], 0);
 8006876:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xF5, &short_reg_data[48], 0);
 8006878:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[49], 0);
 800687a:	4a69      	ldr	r2, [pc, #420]	@ (8006a20 <OTM8009A_Init+0x6d8>)
 800687c:	4619      	mov	r1, r3
 800687e:	4628      	mov	r0, r5
 8006880:	f000 f908 	bl	8006a94 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC6, &short_reg_data[50], 0);
 8006884:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[49], 0);
 8006886:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC6, &short_reg_data[50], 0);
 8006888:	4a66      	ldr	r2, [pc, #408]	@ (8006a24 <OTM8009A_Init+0x6dc>)
 800688a:	21c6      	movs	r1, #198	@ 0xc6
 800688c:	4628      	mov	r0, r5
 800688e:	f000 f901 	bl	8006a94 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8006892:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC6, &short_reg_data[50], 0);
 8006894:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8006896:	4a64      	ldr	r2, [pc, #400]	@ (8006a28 <OTM8009A_Init+0x6e0>)
 8006898:	4619      	mov	r1, r3
 800689a:	4628      	mov	r0, r5
 800689c:	f000 f8fa 	bl	8006a94 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data25, 3);
 80068a0:	2303      	movs	r3, #3
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 80068a2:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data25, 3);
 80068a4:	4a61      	ldr	r2, [pc, #388]	@ (8006a2c <OTM8009A_Init+0x6e4>)
 80068a6:	21ff      	movs	r1, #255	@ 0xff
 80068a8:	4628      	mov	r0, r5
 80068aa:	f000 f8f3 	bl	8006a94 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 80068ae:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data25, 3);
 80068b0:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 80068b2:	4a5d      	ldr	r2, [pc, #372]	@ (8006a28 <OTM8009A_Init+0x6e0>)
 80068b4:	4619      	mov	r1, r3
 80068b6:	4628      	mov	r0, r5
 80068b8:	f000 f8ec 	bl	8006a94 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 80068bc:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 80068be:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 80068c0:	4a59      	ldr	r2, [pc, #356]	@ (8006a28 <OTM8009A_Init+0x6e0>)
 80068c2:	4619      	mov	r1, r3
 80068c4:	4628      	mov	r0, r5
 80068c6:	f000 f8e5 	bl	8006a94 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xE1, lcd_reg_data3, 16);
 80068ca:	2310      	movs	r3, #16
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 80068cc:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xE1, lcd_reg_data3, 16);
 80068ce:	4a58      	ldr	r2, [pc, #352]	@ (8006a30 <OTM8009A_Init+0x6e8>)
 80068d0:	21e1      	movs	r1, #225	@ 0xe1
 80068d2:	4628      	mov	r0, r5
 80068d4:	f000 f8de 	bl	8006a94 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 80068d8:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xE1, lcd_reg_data3, 16);
 80068da:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 80068dc:	4a52      	ldr	r2, [pc, #328]	@ (8006a28 <OTM8009A_Init+0x6e0>)
 80068de:	4619      	mov	r1, r3
 80068e0:	4628      	mov	r0, r5
 80068e2:	f000 f8d7 	bl	8006a94 <otm8009a_write_reg>
 80068e6:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xE2, lcd_reg_data4, 16);
 80068e8:	2310      	movs	r3, #16
 80068ea:	4a52      	ldr	r2, [pc, #328]	@ (8006a34 <OTM8009A_Init+0x6ec>)
 80068ec:	21e2      	movs	r1, #226	@ 0xe2
 80068ee:	4628      	mov	r0, r5
 80068f0:	f000 f8d0 	bl	8006a94 <otm8009a_write_reg>
 80068f4:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_SLPOUT, &short_reg_data[36], 0);
 80068f6:	2300      	movs	r3, #0
 80068f8:	4a4f      	ldr	r2, [pc, #316]	@ (8006a38 <OTM8009A_Init+0x6f0>)
 80068fa:	2111      	movs	r1, #17
 80068fc:	4628      	mov	r0, r5
 80068fe:	f000 f8c9 	bl	8006a94 <otm8009a_write_reg>
  (void)OTM8009A_IO_Delay(pObj, 120);
 8006902:	2178      	movs	r1, #120	@ 0x78
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_SLPOUT, &short_reg_data[36], 0);
 8006904:	4404      	add	r4, r0
  (void)OTM8009A_IO_Delay(pObj, 120);
 8006906:	4638      	mov	r0, r7
 8006908:	f7ff fd11 	bl	800632e <OTM8009A_IO_Delay.isra.0>
  switch(ColorCoding)
 800690c:	4f4b      	ldr	r7, [pc, #300]	@ (8006a3c <OTM8009A_Init+0x6f4>)
 800690e:	2e00      	cmp	r6, #0
 8006910:	d061      	beq.n	80069d6 <OTM8009A_Init+0x68e>
 8006912:	2e02      	cmp	r6, #2
 8006914:	d107      	bne.n	8006926 <OTM8009A_Init+0x5de>
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_COLMOD, &short_reg_data[37], 0);
 8006916:	2300      	movs	r3, #0
 8006918:	4a49      	ldr	r2, [pc, #292]	@ (8006a40 <OTM8009A_Init+0x6f8>)
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_COLMOD, &short_reg_data[38], 0);
 800691a:	213a      	movs	r1, #58	@ 0x3a
 800691c:	4628      	mov	r0, r5
 800691e:	f000 f8b9 	bl	8006a94 <otm8009a_write_reg>
 8006922:	4404      	add	r4, r0
    OTM8009ACtx.ColorCode = OTM8009A_FORMAT_RGB888;
 8006924:	607e      	str	r6, [r7, #4]
  if(Orientation == OTM8009A_ORIENTATION_LANDSCAPE)
 8006926:	f1b8 0f01 	cmp.w	r8, #1
 800692a:	d157      	bne.n	80069dc <OTM8009A_Init+0x694>
	uint8_t tmp = OTM8009A_MADCTR_MODE_LANDSCAPE;
 800692c:	2360      	movs	r3, #96	@ 0x60
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_MADCTR, &tmp, 0);
 800692e:	f10d 0207 	add.w	r2, sp, #7
 8006932:	2136      	movs	r1, #54	@ 0x36
 8006934:	4628      	mov	r0, r5
	uint8_t tmp = OTM8009A_MADCTR_MODE_LANDSCAPE;
 8006936:	f88d 3007 	strb.w	r3, [sp, #7]
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_MADCTR, &tmp, 0);
 800693a:	2300      	movs	r3, #0
 800693c:	f000 f8aa 	bl	8006a94 <otm8009a_write_reg>
 8006940:	1826      	adds	r6, r4, r0
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_CASET, LcdRegData27, 4);
 8006942:	2304      	movs	r3, #4
 8006944:	4a3f      	ldr	r2, [pc, #252]	@ (8006a44 <OTM8009A_Init+0x6fc>)
 8006946:	212a      	movs	r1, #42	@ 0x2a
 8006948:	4628      	mov	r0, r5
 800694a:	f000 f8a3 	bl	8006a94 <otm8009a_write_reg>
 800694e:	4406      	add	r6, r0
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_PASET, LcdRegData28, 4);
 8006950:	2304      	movs	r3, #4
 8006952:	4a3d      	ldr	r2, [pc, #244]	@ (8006a48 <OTM8009A_Init+0x700>)
 8006954:	212b      	movs	r1, #43	@ 0x2b
 8006956:	4628      	mov	r0, r5
 8006958:	f000 f89c 	bl	8006a94 <otm8009a_write_reg>
 800695c:	1834      	adds	r4, r6, r0
    OTM8009ACtx.Orientation = OTM8009A_ORIENTATION_LANDSCAPE;
 800695e:	f8c7 8000 	str.w	r8, [r7]
  OTM8009ACtx.Brightness = ((uint32_t)short_reg_data[39] / 0xFFU) * 100U;
 8006962:	2600      	movs	r6, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRDISBV, &short_reg_data[39], 0);
 8006964:	2300      	movs	r3, #0
 8006966:	4a39      	ldr	r2, [pc, #228]	@ (8006a4c <OTM8009A_Init+0x704>)
 8006968:	2151      	movs	r1, #81	@ 0x51
 800696a:	4628      	mov	r0, r5
 800696c:	f000 f892 	bl	8006a94 <otm8009a_write_reg>
 8006970:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRCTRLD, &short_reg_data[40], 0);
 8006972:	4633      	mov	r3, r6
 8006974:	4a36      	ldr	r2, [pc, #216]	@ (8006a50 <OTM8009A_Init+0x708>)
 8006976:	2153      	movs	r1, #83	@ 0x53
 8006978:	4628      	mov	r0, r5
  OTM8009ACtx.Brightness = ((uint32_t)short_reg_data[39] / 0xFFU) * 100U;
 800697a:	60be      	str	r6, [r7, #8]
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRCTRLD, &short_reg_data[40], 0);
 800697c:	f000 f88a 	bl	8006a94 <otm8009a_write_reg>
 8006980:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRCABC, &short_reg_data[41], 0);
 8006982:	4633      	mov	r3, r6
 8006984:	4a33      	ldr	r2, [pc, #204]	@ (8006a54 <OTM8009A_Init+0x70c>)
 8006986:	2155      	movs	r1, #85	@ 0x55
 8006988:	4628      	mov	r0, r5
 800698a:	f000 f883 	bl	8006a94 <otm8009a_write_reg>
 800698e:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRCABCMB, &short_reg_data[42], 0);
 8006990:	4633      	mov	r3, r6
 8006992:	4a31      	ldr	r2, [pc, #196]	@ (8006a58 <OTM8009A_Init+0x710>)
 8006994:	215e      	movs	r1, #94	@ 0x5e
 8006996:	4628      	mov	r0, r5
 8006998:	f000 f87c 	bl	8006a94 <otm8009a_write_reg>
 800699c:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_DISPON, &short_reg_data[43], 0);
 800699e:	4633      	mov	r3, r6
 80069a0:	4a2e      	ldr	r2, [pc, #184]	@ (8006a5c <OTM8009A_Init+0x714>)
 80069a2:	2129      	movs	r1, #41	@ 0x29
 80069a4:	4628      	mov	r0, r5
 80069a6:	f000 f875 	bl	8006a94 <otm8009a_write_reg>
 80069aa:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 80069ac:	4633      	mov	r3, r6
 80069ae:	4631      	mov	r1, r6
 80069b0:	4a1d      	ldr	r2, [pc, #116]	@ (8006a28 <OTM8009A_Init+0x6e0>)
 80069b2:	4628      	mov	r0, r5
 80069b4:	f000 f86e 	bl	8006a94 <otm8009a_write_reg>
 80069b8:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_RAMWR, &short_reg_data[44], 0);
 80069ba:	4633      	mov	r3, r6
 80069bc:	4a28      	ldr	r2, [pc, #160]	@ (8006a60 <OTM8009A_Init+0x718>)
 80069be:	212c      	movs	r1, #44	@ 0x2c
 80069c0:	4628      	mov	r0, r5
 80069c2:	f000 f867 	bl	8006a94 <otm8009a_write_reg>
  if(ret != OTM8009A_OK)
 80069c6:	42c4      	cmn	r4, r0
}
 80069c8:	bf14      	ite	ne
 80069ca:	f04f 30ff 	movne.w	r0, #4294967295
 80069ce:	4630      	moveq	r0, r6
 80069d0:	b002      	add	sp, #8
 80069d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_COLMOD, &short_reg_data[38], 0);
 80069d6:	4633      	mov	r3, r6
 80069d8:	4a22      	ldr	r2, [pc, #136]	@ (8006a64 <OTM8009A_Init+0x71c>)
 80069da:	e79e      	b.n	800691a <OTM8009A_Init+0x5d2>
    OTM8009ACtx.Orientation = OTM8009A_ORIENTATION_PORTRAIT;
 80069dc:	2300      	movs	r3, #0
 80069de:	603b      	str	r3, [r7, #0]
 80069e0:	e7bf      	b.n	8006962 <OTM8009A_Init+0x61a>
 80069e2:	bf00      	nop
 80069e4:	0802b4f9 	.word	0x0802b4f9
 80069e8:	0802b5bd 	.word	0x0802b5bd
 80069ec:	0802b4ea 	.word	0x0802b4ea
 80069f0:	0802b5b9 	.word	0x0802b5b9
 80069f4:	0802b4db 	.word	0x0802b4db
 80069f8:	0802b5ba 	.word	0x0802b5ba
 80069fc:	0802b4d1 	.word	0x0802b4d1
 8006a00:	0802b5bb 	.word	0x0802b5bb
 8006a04:	0802b4c2 	.word	0x0802b4c2
 8006a08:	0802b5bc 	.word	0x0802b5bc
 8006a0c:	0802b4b3 	.word	0x0802b4b3
 8006a10:	0802b5a9 	.word	0x0802b5a9
 8006a14:	0802b5ca 	.word	0x0802b5ca
 8006a18:	0802b5cb 	.word	0x0802b5cb
 8006a1c:	0802b5cc 	.word	0x0802b5cc
 8006a20:	0802b5cd 	.word	0x0802b5cd
 8006a24:	0802b5ce 	.word	0x0802b5ce
 8006a28:	0802b59d 	.word	0x0802b59d
 8006a2c:	0802b4b0 	.word	0x0802b4b0
 8006a30:	0802b4a0 	.word	0x0802b4a0
 8006a34:	0802b490 	.word	0x0802b490
 8006a38:	0802b5c0 	.word	0x0802b5c0
 8006a3c:	2400ee24 	.word	0x2400ee24
 8006a40:	0802b5c1 	.word	0x0802b5c1
 8006a44:	0802b5d3 	.word	0x0802b5d3
 8006a48:	0802b5cf 	.word	0x0802b5cf
 8006a4c:	0802b5c3 	.word	0x0802b5c3
 8006a50:	0802b5c4 	.word	0x0802b5c4
 8006a54:	0802b5c5 	.word	0x0802b5c5
 8006a58:	0802b5c6 	.word	0x0802b5c6
 8006a5c:	0802b5c7 	.word	0x0802b5c7
 8006a60:	0802b5c8 	.word	0x0802b5c8
 8006a64:	0802b5c2 	.word	0x0802b5c2

08006a68 <OTM8009A_RegisterBusIO>:
  if(pObj == NULL)
 8006a68:	b160      	cbz	r0, 8006a84 <OTM8009A_RegisterBusIO+0x1c>
    pObj->IO.WriteReg  = pIO->WriteReg;
 8006a6a:	684b      	ldr	r3, [r1, #4]
 8006a6c:	6043      	str	r3, [r0, #4]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8006a6e:	688b      	ldr	r3, [r1, #8]
 8006a70:	6083      	str	r3, [r0, #8]
    pObj->IO.GetTick   = pIO->GetTick;
 8006a72:	68cb      	ldr	r3, [r1, #12]
    pObj->Ctx.handle   = pObj;
 8006a74:	6180      	str	r0, [r0, #24]
    pObj->IO.GetTick   = pIO->GetTick;
 8006a76:	60c3      	str	r3, [r0, #12]
    pObj->Ctx.ReadReg  = OTM8009A_ReadRegWrap;
 8006a78:	4b04      	ldr	r3, [pc, #16]	@ (8006a8c <OTM8009A_RegisterBusIO+0x24>)
 8006a7a:	6143      	str	r3, [r0, #20]
    pObj->Ctx.WriteReg = OTM8009A_WriteRegWrap;
 8006a7c:	4b04      	ldr	r3, [pc, #16]	@ (8006a90 <OTM8009A_RegisterBusIO+0x28>)
 8006a7e:	6103      	str	r3, [r0, #16]
  int32_t ret = OTM8009A_OK;
 8006a80:	2000      	movs	r0, #0
 8006a82:	4770      	bx	lr
    ret = OTM8009A_ERROR;
 8006a84:	f04f 30ff 	mov.w	r0, #4294967295
}
 8006a88:	4770      	bx	lr
 8006a8a:	bf00      	nop
 8006a8c:	08006313 	.word	0x08006313
 8006a90:	08006321 	.word	0x08006321

08006a94 <otm8009a_write_reg>:
*                 I2C or SPI writing function
* Input         : Register Address, Data to be written, length of buffer
* Output        : None
*******************************************************************************/
int32_t otm8009a_write_reg(otm8009a_ctx_t *ctx, uint16_t reg, const uint8_t *pdata, uint16_t length)
{
 8006a94:	b410      	push	{r4}
  return ctx->WriteReg(ctx->handle, reg, (uint8_t *)pdata, length);
 8006a96:	6804      	ldr	r4, [r0, #0]
 8006a98:	6880      	ldr	r0, [r0, #8]
 8006a9a:	46a4      	mov	ip, r4
}
 8006a9c:	f85d 4b04 	ldr.w	r4, [sp], #4
  return ctx->WriteReg(ctx->handle, reg, (uint8_t *)pdata, length);
 8006aa0:	4760      	bx	ip
	...

08006aa4 <BSP_I2C4_DeInit>:
  */
int32_t BSP_I2C4_DeInit(void)
{
  int32_t ret  = BSP_ERROR_NONE;

  I2c4InitCounter--;
 8006aa4:	4a10      	ldr	r2, [pc, #64]	@ (8006ae8 <BSP_I2C4_DeInit+0x44>)
{
 8006aa6:	b508      	push	{r3, lr}
  I2c4InitCounter--;
 8006aa8:	6813      	ldr	r3, [r2, #0]
 8006aaa:	3b01      	subs	r3, #1
 8006aac:	6013      	str	r3, [r2, #0]
  if (I2c4InitCounter == 0U)
 8006aae:	b10b      	cbz	r3, 8006ab4 <BSP_I2C4_DeInit+0x10>
  int32_t ret  = BSP_ERROR_NONE;
 8006ab0:	2000      	movs	r0, #0
      ret = BSP_ERROR_BUS_FAILURE;
    }
  }

  return ret;
}
 8006ab2:	bd08      	pop	{r3, pc}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phi2c);

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = BUS_I2C4_SCL_PIN;
  HAL_GPIO_DeInit(BUS_I2C4_SCL_GPIO_PORT, gpio_init_structure.Pin );
 8006ab4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8006ab8:	480c      	ldr	r0, [pc, #48]	@ (8006aec <BSP_I2C4_DeInit+0x48>)
 8006aba:	f001 fe3d 	bl	8008738 <HAL_GPIO_DeInit>
  gpio_init_structure.Pin = BUS_I2C4_SDA_PIN;
  HAL_GPIO_DeInit(BUS_I2C4_SDA_GPIO_PORT, gpio_init_structure.Pin);
 8006abe:	480b      	ldr	r0, [pc, #44]	@ (8006aec <BSP_I2C4_DeInit+0x48>)
 8006ac0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8006ac4:	f001 fe38 	bl	8008738 <HAL_GPIO_DeInit>

  /* Disable I2C clock */
  BUS_I2C4_CLK_DISABLE();
 8006ac8:	4a09      	ldr	r2, [pc, #36]	@ (8006af0 <BSP_I2C4_DeInit+0x4c>)
    if (HAL_I2C_DeInit(&hbus_i2c4) != HAL_OK)
 8006aca:	480a      	ldr	r0, [pc, #40]	@ (8006af4 <BSP_I2C4_DeInit+0x50>)
  BUS_I2C4_CLK_DISABLE();
 8006acc:	f8d2 30f4 	ldr.w	r3, [r2, #244]	@ 0xf4
 8006ad0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006ad4:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
    if (HAL_I2C_DeInit(&hbus_i2c4) != HAL_OK)
 8006ad8:	f002 f87e 	bl	8008bd8 <HAL_I2C_DeInit>
 8006adc:	2800      	cmp	r0, #0
 8006ade:	d0e7      	beq.n	8006ab0 <BSP_I2C4_DeInit+0xc>
      ret = BSP_ERROR_BUS_FAILURE;
 8006ae0:	f06f 0007 	mvn.w	r0, #7
  return ret;
 8006ae4:	e7e5      	b.n	8006ab2 <BSP_I2C4_DeInit+0xe>
 8006ae6:	bf00      	nop
 8006ae8:	2400f888 	.word	0x2400f888
 8006aec:	58020c00 	.word	0x58020c00
 8006af0:	58024400 	.word	0x58024400
 8006af4:	2400ee30 	.word	0x2400ee30

08006af8 <MX_I2C4_Init>:
  hI2c->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8006af8:	2300      	movs	r3, #0
 8006afa:	2201      	movs	r2, #1
{
 8006afc:	b510      	push	{r4, lr}
  hI2c->Init.Timing           = timing;
 8006afe:	6041      	str	r1, [r0, #4]
{
 8006b00:	4604      	mov	r4, r0
  hI2c->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8006b02:	6203      	str	r3, [r0, #32]
  hI2c->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8006b04:	e9c0 3202 	strd	r3, r2, [r0, #8]
  hI2c->Init.OwnAddress2      = 0;
 8006b08:	e9c0 3304 	strd	r3, r3, [r0, #16]
  hI2c->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8006b0c:	e9c0 3306 	strd	r3, r3, [r0, #24]
  if (HAL_I2C_Init(hI2c) != HAL_OK)
 8006b10:	f002 f80c 	bl	8008b2c <HAL_I2C_Init>
 8006b14:	4601      	mov	r1, r0
 8006b16:	b108      	cbz	r0, 8006b1c <MX_I2C4_Init+0x24>
    status = HAL_ERROR;
 8006b18:	2001      	movs	r0, #1
}
 8006b1a:	bd10      	pop	{r4, pc}
    if (HAL_I2CEx_ConfigAnalogFilter(hI2c, analog_filter) != HAL_OK)
 8006b1c:	4620      	mov	r0, r4
 8006b1e:	f002 fa32 	bl	8008f86 <HAL_I2CEx_ConfigAnalogFilter>
 8006b22:	4601      	mov	r1, r0
 8006b24:	2800      	cmp	r0, #0
 8006b26:	d1f7      	bne.n	8006b18 <MX_I2C4_Init+0x20>
      if (HAL_I2CEx_ConfigDigitalFilter(hI2c, I2C_DIGITAL_FILTER_COEF) != HAL_OK)
 8006b28:	4620      	mov	r0, r4
 8006b2a:	f002 fa52 	bl	8008fd2 <HAL_I2CEx_ConfigDigitalFilter>
 8006b2e:	3800      	subs	r0, #0
 8006b30:	bf18      	it	ne
 8006b32:	2001      	movne	r0, #1
 8006b34:	e7f1      	b.n	8006b1a <MX_I2C4_Init+0x22>
	...

08006b38 <BSP_I2C4_Init>:
  hbus_i2c4.Instance = BUS_I2C4;
 8006b38:	4ba1      	ldr	r3, [pc, #644]	@ (8006dc0 <BSP_I2C4_Init+0x288>)
 8006b3a:	48a2      	ldr	r0, [pc, #648]	@ (8006dc4 <BSP_I2C4_Init+0x28c>)
{
 8006b3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  hbus_i2c4.Instance = BUS_I2C4;
 8006b40:	6003      	str	r3, [r0, #0]
{
 8006b42:	b093      	sub	sp, #76	@ 0x4c
  if (I2c4InitCounter == 0U)
 8006b44:	4ba0      	ldr	r3, [pc, #640]	@ (8006dc8 <BSP_I2C4_Init+0x290>)
 8006b46:	681c      	ldr	r4, [r3, #0]
 8006b48:	b11c      	cbz	r4, 8006b52 <BSP_I2C4_Init+0x1a>
  int32_t ret = BSP_ERROR_NONE;
 8006b4a:	2000      	movs	r0, #0
}
 8006b4c:	b013      	add	sp, #76	@ 0x4c
 8006b4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    I2c4InitCounter++;
 8006b52:	2201      	movs	r2, #1
 8006b54:	601a      	str	r2, [r3, #0]
    if (HAL_I2C_GetState(&hbus_i2c4) == HAL_I2C_STATE_RESET)
 8006b56:	f002 fa11 	bl	8008f7c <HAL_I2C_GetState>
 8006b5a:	2800      	cmp	r0, #0
 8006b5c:	d1f5      	bne.n	8006b4a <BSP_I2C4_Init+0x12>
  BUS_I2C4_SCL_GPIO_CLK_ENABLE();
 8006b5e:	4d9b      	ldr	r5, [pc, #620]	@ (8006dcc <BSP_I2C4_Init+0x294>)
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
 8006b60:	f04f 0812 	mov.w	r8, #18
  gpio_init_structure.Alternate = BUS_I2C4_SCL_AF;
 8006b64:	2702      	movs	r7, #2
 8006b66:	2604      	movs	r6, #4
  BUS_I2C4_SCL_GPIO_CLK_ENABLE();
 8006b68:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
  HAL_GPIO_Init(BUS_I2C4_SCL_GPIO_PORT, &gpio_init_structure);
 8006b6c:	a90d      	add	r1, sp, #52	@ 0x34
 8006b6e:	4898      	ldr	r0, [pc, #608]	@ (8006dd0 <BSP_I2C4_Init+0x298>)
  BUS_I2C4_SCL_GPIO_CLK_ENABLE();
 8006b70:	f043 0308 	orr.w	r3, r3, #8
 8006b74:	f8c5 30e0 	str.w	r3, [r5, #224]	@ 0xe0
 8006b78:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
 8006b7c:	f003 0308 	and.w	r3, r3, #8
 8006b80:	930a      	str	r3, [sp, #40]	@ 0x28
 8006b82:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
  BUS_I2C4_SDA_GPIO_CLK_ENABLE();
 8006b84:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
 8006b88:	f043 0308 	orr.w	r3, r3, #8
 8006b8c:	f8c5 30e0 	str.w	r3, [r5, #224]	@ 0xe0
 8006b90:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
  gpio_init_structure.Pull      = GPIO_NOPULL;
 8006b94:	940f      	str	r4, [sp, #60]	@ 0x3c
  BUS_I2C4_SDA_GPIO_CLK_ENABLE();
 8006b96:	f003 0308 	and.w	r3, r3, #8
 8006b9a:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006b9c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
 8006b9e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
  gpio_init_structure.Alternate = BUS_I2C4_SCL_AF;
 8006ba2:	e9cd 7610 	strd	r7, r6, [sp, #64]	@ 0x40
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
 8006ba6:	e9cd 380d 	strd	r3, r8, [sp, #52]	@ 0x34
  HAL_GPIO_Init(BUS_I2C4_SCL_GPIO_PORT, &gpio_init_structure);
 8006baa:	f001 fcdd 	bl	8008568 <HAL_GPIO_Init>
  gpio_init_structure.Pin       = BUS_I2C4_SDA_PIN;
 8006bae:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
  HAL_GPIO_Init(BUS_I2C4_SDA_GPIO_PORT, &gpio_init_structure);
 8006bb2:	a90d      	add	r1, sp, #52	@ 0x34
 8006bb4:	4886      	ldr	r0, [pc, #536]	@ (8006dd0 <BSP_I2C4_Init+0x298>)
  gpio_init_structure.Alternate = BUS_I2C4_SDA_AF;
 8006bb6:	9611      	str	r6, [sp, #68]	@ 0x44
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
 8006bb8:	e9cd 380d 	strd	r3, r8, [sp, #52]	@ 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 8006bbc:	e9cd 470f 	strd	r4, r7, [sp, #60]	@ 0x3c
  HAL_GPIO_Init(BUS_I2C4_SDA_GPIO_PORT, &gpio_init_structure);
 8006bc0:	f001 fcd2 	bl	8008568 <HAL_GPIO_Init>
  BUS_I2C4_CLK_ENABLE();
 8006bc4:	f8d5 30f4 	ldr.w	r3, [r5, #244]	@ 0xf4
 8006bc8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006bcc:	f8c5 30f4 	str.w	r3, [r5, #244]	@ 0xf4
 8006bd0:	f8d5 30f4 	ldr.w	r3, [r5, #244]	@ 0xf4
 8006bd4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006bd8:	930c      	str	r3, [sp, #48]	@ 0x30
 8006bda:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
  BUS_I2C4_FORCE_RESET();
 8006bdc:	f8d5 309c 	ldr.w	r3, [r5, #156]	@ 0x9c
 8006be0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006be4:	f8c5 309c 	str.w	r3, [r5, #156]	@ 0x9c
  BUS_I2C4_RELEASE_RESET();
 8006be8:	f8d5 309c 	ldr.w	r3, [r5, #156]	@ 0x9c
 8006bec:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006bf0:	f8c5 309c 	str.w	r3, [r5, #156]	@ 0x9c
        if (MX_I2C4_Init(&hbus_i2c4, I2C_GetTiming(HAL_RCC_GetPCLK2Freq(), BUS_I2C4_FREQUENCY)) != HAL_OK)
 8006bf4:	f004 fcd8 	bl	800b5a8 <HAL_RCC_GetPCLK2Freq>
  if((clock_src_freq != 0U) && (i2c_freq != 0U))
 8006bf8:	2800      	cmp	r0, #0
 8006bfa:	d06f      	beq.n	8006cdc <BSP_I2C4_Init+0x1a4>
  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 8006bfc:	4b75      	ldr	r3, [pc, #468]	@ (8006dd4 <BSP_I2C4_Init+0x29c>)
  if (tsdadel_max <= 0)
 8006bfe:	4622      	mov	r2, r4
 8006c00:	46a2      	mov	sl, r4
  uint32_t prev_presc = I2C_PRESC_MAX;
 8006c02:	f04f 0910 	mov.w	r9, #16
  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 8006c06:	eb03 0350 	add.w	r3, r3, r0, lsr #1
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 8006c0a:	f8df b1d0 	ldr.w	fp, [pc, #464]	@ 8006ddc <BSP_I2C4_Init+0x2a4>
  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 8006c0e:	fbb3 f0f0 	udiv	r0, r3, r0
    (int32_t)tafdel_min - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 3) * (int32_t)ti2cclk);
 8006c12:	eb00 0540 	add.w	r5, r0, r0, lsl #1
    (int32_t)tafdel_max - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 4) * (int32_t)ti2cclk);
 8006c16:	fa00 f607 	lsl.w	r6, r0, r7
  if (tsdadel_max <= 0)
 8006c1a:	4601      	mov	r1, r0
  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 8006c1c:	f1c5 0332 	rsb	r3, r5, #50	@ 0x32
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 8006c20:	f5c6 76c3 	rsb	r6, r6, #390	@ 0x186
  if (tsdadel_min <= 0)
 8006c24:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  if (tsdadel_max <= 0)
 8006c28:	ea26 76e6 	bic.w	r6, r6, r6, asr #31
  if (tsdadel_min <= 0)
 8006c2c:	9300      	str	r3, [sp, #0]
  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
 8006c2e:	4b6a      	ldr	r3, [pc, #424]	@ (8006dd8 <BSP_I2C4_Init+0x2a0>)
 8006c30:	681b      	ldr	r3, [r3, #0]
{
 8006c32:	4688      	mov	r8, r1
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
 8006c34:	f04f 0c00 	mov.w	ip, #0
      if (tscldel >= (uint32_t)tscldel_min)
 8006c38:	f5b8 7faf 	cmp.w	r8, #350	@ 0x15e
 8006c3c:	f8cd c004 	str.w	ip, [sp, #4]
      uint32_t tscldel = (scldel + 1U) * (presc + 1U) * ti2cclk;
 8006c40:	f10c 0c01 	add.w	ip, ip, #1
      if (tscldel >= (uint32_t)tscldel_min)
 8006c44:	d35d      	bcc.n	8006d02 <BSP_I2C4_Init+0x1ca>
 8006c46:	2700      	movs	r7, #0
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
 8006c48:	46be      	mov	lr, r7
          if ((tsdadel >= (uint32_t)tsdadel_min) && (tsdadel <= (uint32_t)tsdadel_max))
 8006c4a:	9d00      	ldr	r5, [sp, #0]
 8006c4c:	42bd      	cmp	r5, r7
 8006c4e:	d852      	bhi.n	8006cf6 <BSP_I2C4_Init+0x1be>
 8006c50:	42be      	cmp	r6, r7
 8006c52:	d350      	bcc.n	8006cf6 <BSP_I2C4_Init+0x1be>
            if(presc != prev_presc)
 8006c54:	4591      	cmp	r9, r2
 8006c56:	d04e      	beq.n	8006cf6 <BSP_I2C4_Init+0x1be>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 8006c58:	2514      	movs	r5, #20
 8006c5a:	fb05 fa03 	mul.w	sl, r5, r3
              I2c_valid_timing_nbr ++;
 8006c5e:	3301      	adds	r3, #1
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
 8006c60:	9d01      	ldr	r5, [sp, #4]
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 8006c62:	eb0b 090a 	add.w	r9, fp, sl
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 8006c66:	2b7f      	cmp	r3, #127	@ 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 8006c68:	f84b 200a 	str.w	r2, [fp, sl]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 8006c6c:	e9c9 5e01 	strd	r5, lr, [r9, #4]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 8006c70:	d93e      	bls.n	8006cf0 <BSP_I2C4_Init+0x1b8>
 8006c72:	4a59      	ldr	r2, [pc, #356]	@ (8006dd8 <BSP_I2C4_Init+0x2a0>)
 8006c74:	6013      	str	r3, [r2, #0]
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 8006c76:	4b58      	ldr	r3, [pc, #352]	@ (8006dd8 <BSP_I2C4_Init+0x2a0>)
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
 8006c78:	f640 15c4 	movw	r5, #2500	@ 0x9c4
 8006c7c:	f04f 32ff 	mov.w	r2, #4294967295
 8006c80:	4956      	ldr	r1, [pc, #344]	@ (8006ddc <BSP_I2C4_Init+0x2a4>)
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 8006c82:	681b      	ldr	r3, [r3, #0]
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
 8006c84:	2700      	movs	r7, #0
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 8006c86:	9305      	str	r3, [sp, #20]
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
 8006c88:	0043      	lsls	r3, r0, #1
 8006c8a:	f5c3 6b80 	rsb	fp, r3, #1024	@ 0x400
 8006c8e:	e9cd 2501 	strd	r2, r5, [sp, #4]
 8006c92:	f10b 0b01 	add.w	fp, fp, #1
 8006c96:	f103 0532 	add.w	r5, r3, #50	@ 0x32
 8006c9a:	f6a3 0334 	subw	r3, r3, #2100	@ 0x834
 8006c9e:	9508      	str	r5, [sp, #32]
 8006ca0:	9309      	str	r3, [sp, #36]	@ 0x24
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 8006ca2:	9b05      	ldr	r3, [sp, #20]
 8006ca4:	429f      	cmp	r7, r3
 8006ca6:	d138      	bne.n	8006d1a <BSP_I2C4_Init+0x1e2>
        if (idx < I2C_VALID_TIMING_NBR)
 8006ca8:	9b01      	ldr	r3, [sp, #4]
 8006caa:	2b7f      	cmp	r3, #127	@ 0x7f
 8006cac:	d816      	bhi.n	8006cdc <BSP_I2C4_Init+0x1a4>
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 8006cae:	2114      	movs	r1, #20
 8006cb0:	9a01      	ldr	r2, [sp, #4]
 8006cb2:	4b4a      	ldr	r3, [pc, #296]	@ (8006ddc <BSP_I2C4_Init+0x2a4>)
 8006cb4:	434a      	muls	r2, r1
 8006cb6:	1899      	adds	r1, r3, r2
 8006cb8:	589b      	ldr	r3, [r3, r2]
                ((I2c_valid_timing[idx].scll & 0xFFU) << 0);
 8006cba:	7c0c      	ldrb	r4, [r1, #16]
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 8006cbc:	ea44 7403 	orr.w	r4, r4, r3, lsl #28
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) |\
 8006cc0:	684b      	ldr	r3, [r1, #4]
 8006cc2:	051b      	lsls	r3, r3, #20
 8006cc4:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 8006cc8:	431c      	orrs	r4, r3
                ((I2c_valid_timing[idx].tsdadel & 0x0FU) << 16) |\
 8006cca:	688b      	ldr	r3, [r1, #8]
 8006ccc:	041b      	lsls	r3, r3, #16
 8006cce:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 8006cd2:	431c      	orrs	r4, r3
                ((I2c_valid_timing[idx].sclh & 0xFFU) << 8) |\
 8006cd4:	68cb      	ldr	r3, [r1, #12]
 8006cd6:	021b      	lsls	r3, r3, #8
 8006cd8:	b29b      	uxth	r3, r3
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 8006cda:	431c      	orrs	r4, r3
        if (MX_I2C4_Init(&hbus_i2c4, I2C_GetTiming(HAL_RCC_GetPCLK2Freq(), BUS_I2C4_FREQUENCY)) != HAL_OK)
 8006cdc:	4621      	mov	r1, r4
 8006cde:	4839      	ldr	r0, [pc, #228]	@ (8006dc4 <BSP_I2C4_Init+0x28c>)
 8006ce0:	f7ff ff0a 	bl	8006af8 <MX_I2C4_Init>
 8006ce4:	2800      	cmp	r0, #0
 8006ce6:	f43f af30 	beq.w	8006b4a <BSP_I2C4_Init+0x12>
          ret = BSP_ERROR_BUS_FAILURE;
 8006cea:	f06f 0007 	mvn.w	r0, #7
  return ret;
 8006cee:	e72d      	b.n	8006b4c <BSP_I2C4_Init+0x14>
 8006cf0:	4691      	mov	r9, r2
 8006cf2:	f04f 0a01 	mov.w	sl, #1
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
 8006cf6:	f10e 0e01 	add.w	lr, lr, #1
 8006cfa:	440f      	add	r7, r1
 8006cfc:	f1be 0f10 	cmp.w	lr, #16
 8006d00:	d1a3      	bne.n	8006c4a <BSP_I2C4_Init+0x112>
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
 8006d02:	f1bc 0f10 	cmp.w	ip, #16
 8006d06:	4488      	add	r8, r1
 8006d08:	d196      	bne.n	8006c38 <BSP_I2C4_Init+0x100>
  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
 8006d0a:	3201      	adds	r2, #1
 8006d0c:	4401      	add	r1, r0
 8006d0e:	2a10      	cmp	r2, #16
 8006d10:	d18f      	bne.n	8006c32 <BSP_I2C4_Init+0xfa>
 8006d12:	f1ba 0f00 	cmp.w	sl, #0
 8006d16:	d1ac      	bne.n	8006c72 <BSP_I2C4_Init+0x13a>
 8006d18:	e7ad      	b.n	8006c76 <BSP_I2C4_Init+0x13e>
    uint32_t tpresc = (I2c_valid_timing[count].presc + 1U) * ti2cclk;
 8006d1a:	680b      	ldr	r3, [r1, #0]
    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 8006d1c:	f04f 0c00 	mov.w	ip, #0
 8006d20:	9d08      	ldr	r5, [sp, #32]
    uint32_t tpresc = (I2c_valid_timing[count].presc + 1U) * ti2cclk;
 8006d22:	fb03 0300 	mla	r3, r3, r0, r0
    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 8006d26:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 8006d28:	441d      	add	r5, r3
 8006d2a:	441e      	add	r6, r3
 8006d2c:	9503      	str	r5, [sp, #12]
 8006d2e:	ebab 0503 	sub.w	r5, fp, r3
 8006d32:	9607      	str	r6, [sp, #28]
 8006d34:	006d      	lsls	r5, r5, #1
 8006d36:	9500      	str	r5, [sp, #0]
    uint32_t tpresc = (I2c_valid_timing[count].presc + 1U) * ti2cclk;
 8006d38:	9d03      	ldr	r5, [sp, #12]
      if ((tscl_l > I2C_Charac[I2C_speed].lscl_min) && (ti2cclk < ((tscl_l - tafdel_min - dnf_delay) / 4U)))
 8006d3a:	f240 5214 	movw	r2, #1300	@ 0x514
 8006d3e:	f8cd c010 	str.w	ip, [sp, #16]
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
 8006d42:	f10c 0c01 	add.w	ip, ip, #1
      if ((tscl_l > I2C_Charac[I2C_speed].lscl_min) && (ti2cclk < ((tscl_l - tafdel_min - dnf_delay) / 4U)))
 8006d46:	4295      	cmp	r5, r2
 8006d48:	d92f      	bls.n	8006daa <BSP_I2C4_Init+0x272>
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
 8006d4a:	f1a5 0632 	sub.w	r6, r5, #50	@ 0x32
      if ((tscl_l > I2C_Charac[I2C_speed].lscl_min) && (ti2cclk < ((tscl_l - tafdel_min - dnf_delay) / 4U)))
 8006d4e:	ebb0 0f96 	cmp.w	r0, r6, lsr #2
 8006d52:	d22a      	bcs.n	8006daa <BSP_I2C4_Init+0x272>
 8006d54:	9e07      	ldr	r6, [sp, #28]
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
 8006d56:	f04f 0e00 	mov.w	lr, #0
      if ((tscl_l > I2C_Charac[I2C_speed].lscl_min) && (ti2cclk < ((tscl_l - tafdel_min - dnf_delay) / 4U)))
 8006d5a:	f8dd 9000 	ldr.w	r9, [sp]
 8006d5e:	442e      	add	r6, r5
 8006d60:	f8dd 800c 	ldr.w	r8, [sp, #12]
          if ((tscl >= clk_min) && (tscl <= clk_max) && (tscl_h >= I2C_Charac[I2C_speed].hscl_min) && (ti2cclk < tscl_h))
 8006d64:	f206 1aa1 	addw	sl, r6, #417	@ 0x1a1
 8006d68:	f240 4212 	movw	r2, #1042	@ 0x412
 8006d6c:	f8cd e018 	str.w	lr, [sp, #24]
          uint32_t tscl_h = tafdel_min + dnf_delay + (2U * ti2cclk) + ((sclh + 1U) * tpresc);
 8006d70:	f10e 0e01 	add.w	lr, lr, #1
          if ((tscl >= clk_min) && (tscl <= clk_max) && (tscl_h >= I2C_Charac[I2C_speed].hscl_min) && (ti2cclk < tscl_h))
 8006d74:	4592      	cmp	sl, r2
 8006d76:	d811      	bhi.n	8006d9c <BSP_I2C4_Init+0x264>
 8006d78:	f5b8 7f16 	cmp.w	r8, #600	@ 0x258
 8006d7c:	d30e      	bcc.n	8006d9c <BSP_I2C4_Init+0x264>
 8006d7e:	4580      	cmp	r8, r0
 8006d80:	d90c      	bls.n	8006d9c <BSP_I2C4_Init+0x264>
              error = -error;
 8006d82:	ea36 0a26 	bics.w	sl, r6, r6, asr #32
 8006d86:	bf28      	it	cs
 8006d88:	46ca      	movcs	sl, r9
            if ((uint32_t)error < prev_error)
 8006d8a:	9a02      	ldr	r2, [sp, #8]
 8006d8c:	4592      	cmp	sl, r2
 8006d8e:	d205      	bcs.n	8006d9c <BSP_I2C4_Init+0x264>
              I2c_valid_timing[count].scll = scll;
 8006d90:	9a04      	ldr	r2, [sp, #16]
 8006d92:	610a      	str	r2, [r1, #16]
              I2c_valid_timing[count].sclh = sclh;
 8006d94:	9a06      	ldr	r2, [sp, #24]
 8006d96:	e9cd 7a01 	strd	r7, sl, [sp, #4]
 8006d9a:	60ca      	str	r2, [r1, #12]
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
 8006d9c:	f5be 7f80 	cmp.w	lr, #256	@ 0x100
 8006da0:	4498      	add	r8, r3
 8006da2:	441e      	add	r6, r3
 8006da4:	eba9 0903 	sub.w	r9, r9, r3
 8006da8:	d1dc      	bne.n	8006d64 <BSP_I2C4_Init+0x22c>
    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 8006daa:	9a00      	ldr	r2, [sp, #0]
 8006dac:	f5bc 7f80 	cmp.w	ip, #256	@ 0x100
 8006db0:	441d      	add	r5, r3
 8006db2:	eba2 0203 	sub.w	r2, r2, r3
 8006db6:	9200      	str	r2, [sp, #0]
 8006db8:	d1bf      	bne.n	8006d3a <BSP_I2C4_Init+0x202>
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 8006dba:	3701      	adds	r7, #1
 8006dbc:	3114      	adds	r1, #20
 8006dbe:	e770      	b.n	8006ca2 <BSP_I2C4_Init+0x16a>
 8006dc0:	58001c00 	.word	0x58001c00
 8006dc4:	2400ee30 	.word	0x2400ee30
 8006dc8:	2400f888 	.word	0x2400f888
 8006dcc:	58024400 	.word	0x58024400
 8006dd0:	58020c00 	.word	0x58020c00
 8006dd4:	3b9aca00 	.word	0x3b9aca00
 8006dd8:	2400ee84 	.word	0x2400ee84
 8006ddc:	2400ee88 	.word	0x2400ee88

08006de0 <BSP_I2C4_WriteReg>:
{
 8006de0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C4_WriteReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
  if(HAL_I2C_Mem_Write(&hbus_i2c4, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
 8006de2:	f44f 747a 	mov.w	r4, #1000	@ 0x3e8
 8006de6:	9200      	str	r2, [sp, #0]
 8006de8:	460a      	mov	r2, r1
 8006dea:	4601      	mov	r1, r0
 8006dec:	4808      	ldr	r0, [pc, #32]	@ (8006e10 <BSP_I2C4_WriteReg+0x30>)
 8006dee:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006df2:	2301      	movs	r3, #1
 8006df4:	f001 ff0a 	bl	8008c0c <HAL_I2C_Mem_Write>
 8006df8:	b140      	cbz	r0, 8006e0c <BSP_I2C4_WriteReg+0x2c>
    if( HAL_I2C_GetError(&hbus_i2c4) == HAL_I2C_ERROR_AF)
 8006dfa:	4805      	ldr	r0, [pc, #20]	@ (8006e10 <BSP_I2C4_WriteReg+0x30>)
 8006dfc:	f002 f8c1 	bl	8008f82 <HAL_I2C_GetError>
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8006e00:	2804      	cmp	r0, #4
 8006e02:	bf14      	ite	ne
 8006e04:	f06f 0003 	mvnne.w	r0, #3
 8006e08:	f06f 0065 	mvneq.w	r0, #101	@ 0x65
}
 8006e0c:	b004      	add	sp, #16
 8006e0e:	bd10      	pop	{r4, pc}
 8006e10:	2400ee30 	.word	0x2400ee30

08006e14 <BSP_I2C4_ReadReg>:
{
 8006e14:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C4_ReadReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
  if (HAL_I2C_Mem_Read(&hbus_i2c4, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
 8006e16:	f44f 747a 	mov.w	r4, #1000	@ 0x3e8
 8006e1a:	9200      	str	r2, [sp, #0]
 8006e1c:	460a      	mov	r2, r1
 8006e1e:	4601      	mov	r1, r0
 8006e20:	4808      	ldr	r0, [pc, #32]	@ (8006e44 <BSP_I2C4_ReadReg+0x30>)
 8006e22:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006e26:	2301      	movs	r3, #1
 8006e28:	f001 ffca 	bl	8008dc0 <HAL_I2C_Mem_Read>
 8006e2c:	b140      	cbz	r0, 8006e40 <BSP_I2C4_ReadReg+0x2c>
    if( HAL_I2C_GetError(&hbus_i2c4) == HAL_I2C_ERROR_AF)
 8006e2e:	4805      	ldr	r0, [pc, #20]	@ (8006e44 <BSP_I2C4_ReadReg+0x30>)
 8006e30:	f002 f8a7 	bl	8008f82 <HAL_I2C_GetError>
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8006e34:	2804      	cmp	r0, #4
 8006e36:	bf14      	ite	ne
 8006e38:	f06f 0003 	mvnne.w	r0, #3
 8006e3c:	f06f 0065 	mvneq.w	r0, #101	@ 0x65
}
 8006e40:	b004      	add	sp, #16
 8006e42:	bd10      	pop	{r4, pc}
 8006e44:	2400ee30 	.word	0x2400ee30

08006e48 <BSP_GetTick>:
  return (int32_t)HAL_GetTick();
 8006e48:	f000 bd08 	b.w	800785c <HAL_GetTick>

08006e4c <MX_QSPI_Init>:
  */
__weak HAL_StatusTypeDef MX_QSPI_Init(QSPI_HandleTypeDef *hQspi, MX_QSPI_Init_t *Config)
{
  /* QSPI initialization */
  /* QSPI freq = SYSCLK /(1 + ClockPrescaler) Mhz */
  hQspi->Instance                = QUADSPI;
 8006e4c:	4a09      	ldr	r2, [pc, #36]	@ (8006e74 <MX_QSPI_Init+0x28>)
  hQspi->Init.ClockPrescaler     = Config->ClockPrescaler;
  hQspi->Init.FifoThreshold      = 1;
  hQspi->Init.SampleShifting     = Config->SampleShifting;
  hQspi->Init.FlashSize          = Config->FlashSize;
  hQspi->Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_4_CYCLE; /* Min 50ns for nonRead */
  hQspi->Init.ClockMode          = QSPI_CLOCK_MODE_0;
 8006e4e:	f44f 7c40 	mov.w	ip, #768	@ 0x300
  hQspi->Instance                = QUADSPI;
 8006e52:	6002      	str	r2, [r0, #0]
  hQspi->Init.ClockPrescaler     = Config->ClockPrescaler;
 8006e54:	684a      	ldr	r2, [r1, #4]
 8006e56:	6042      	str	r2, [r0, #4]
  hQspi->Init.FifoThreshold      = 1;
 8006e58:	2201      	movs	r2, #1
 8006e5a:	6082      	str	r2, [r0, #8]
  hQspi->Init.SampleShifting     = Config->SampleShifting;
 8006e5c:	688a      	ldr	r2, [r1, #8]
 8006e5e:	60c2      	str	r2, [r0, #12]
  hQspi->Init.FlashSize          = Config->FlashSize;
 8006e60:	680a      	ldr	r2, [r1, #0]
 8006e62:	6102      	str	r2, [r0, #16]
  hQspi->Init.ClockMode          = QSPI_CLOCK_MODE_0;
 8006e64:	2200      	movs	r2, #0
 8006e66:	e9c0 c205 	strd	ip, r2, [r0, #20]
  hQspi->Init.FlashID            = QSPI_FLASH_ID_1;
 8006e6a:	61c2      	str	r2, [r0, #28]
  hQspi->Init.DualFlash          = Config->DualFlashMode;
 8006e6c:	68ca      	ldr	r2, [r1, #12]
 8006e6e:	6202      	str	r2, [r0, #32]

  return HAL_QSPI_Init(hQspi);
 8006e70:	f003 bcc4 	b.w	800a7fc <HAL_QSPI_Init>
 8006e74:	52005000 	.word	0x52005000

08006e78 <BSP_QSPI_EnableMemoryMappedMode>:
  *         Only 1 Instance can running MMP mode. And it will lock system at this mode.
  * @param  Instance  QSPI instance
  * @retval BSP status
  */
int32_t BSP_QSPI_EnableMemoryMappedMode(uint32_t Instance)
{
 8006e78:	b510      	push	{r4, lr}
  int32_t ret = BSP_ERROR_NONE;

  /* Check if the instance is supported */
  if(Instance >= QSPI_INSTANCES_NUMBER)
 8006e7a:	b988      	cbnz	r0, 8006ea0 <BSP_QSPI_EnableMemoryMappedMode+0x28>
  }
  else
  {
    if(QSPI_Ctx[Instance].TransferRate == BSP_QSPI_STR_TRANSFER)
    {
      if(MT25TL01G_EnableMemoryMappedModeSTR(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 8006e7c:	4c0a      	ldr	r4, [pc, #40]	@ (8006ea8 <BSP_QSPI_EnableMemoryMappedMode+0x30>)
 8006e7e:	480b      	ldr	r0, [pc, #44]	@ (8006eac <BSP_QSPI_EnableMemoryMappedMode+0x34>)
    if(QSPI_Ctx[Instance].TransferRate == BSP_QSPI_STR_TRANSFER)
 8006e80:	78a3      	ldrb	r3, [r4, #2]
      if(MT25TL01G_EnableMemoryMappedModeSTR(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 8006e82:	7861      	ldrb	r1, [r4, #1]
    if(QSPI_Ctx[Instance].TransferRate == BSP_QSPI_STR_TRANSFER)
 8006e84:	b94b      	cbnz	r3, 8006e9a <BSP_QSPI_EnableMemoryMappedMode+0x22>
      if(MT25TL01G_EnableMemoryMappedModeSTR(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 8006e86:	f7ff f9bc 	bl	8006202 <MT25TL01G_EnableMemoryMappedModeSTR>
 8006e8a:	b110      	cbz	r0, 8006e92 <BSP_QSPI_EnableMemoryMappedMode+0x1a>
    }
    else
    {
      if(MT25TL01G_EnableMemoryMappedModeDTR(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8006e8c:	f06f 0004 	mvn.w	r0, #4
    }
  }

  /* Return BSP status */
  return ret;
}
 8006e90:	bd10      	pop	{r4, pc}
        QSPI_Ctx[Instance].IsInitialized = QSPI_ACCESS_MMP;
 8006e92:	2302      	movs	r3, #2
  int32_t ret = BSP_ERROR_NONE;
 8006e94:	2000      	movs	r0, #0
        QSPI_Ctx[Instance].IsInitialized = QSPI_ACCESS_MMP;
 8006e96:	7023      	strb	r3, [r4, #0]
 8006e98:	e7fa      	b.n	8006e90 <BSP_QSPI_EnableMemoryMappedMode+0x18>
      if(MT25TL01G_EnableMemoryMappedModeDTR(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 8006e9a:	f7ff f968 	bl	800616e <MT25TL01G_EnableMemoryMappedModeDTR>
 8006e9e:	e7f4      	b.n	8006e8a <BSP_QSPI_EnableMemoryMappedMode+0x12>
    ret = BSP_ERROR_WRONG_PARAM;
 8006ea0:	f06f 0001 	mvn.w	r0, #1
  return ret;
 8006ea4:	e7f4      	b.n	8006e90 <BSP_QSPI_EnableMemoryMappedMode+0x18>
 8006ea6:	bf00      	nop
 8006ea8:	2400f88c 	.word	0x2400f88c
 8006eac:	240003c8 	.word	0x240003c8

08006eb0 <BSP_QSPI_ConfigFlash>:
  * @param  Mode      QSPI mode
  * @param  Rate      QSPI transfer rate
  * @retval BSP status
  */
int32_t BSP_QSPI_ConfigFlash(uint32_t Instance, BSP_QSPI_Interface_t Mode, BSP_QSPI_Transfer_t Rate)
{
 8006eb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006eb2:	460c      	mov	r4, r1
 8006eb4:	4617      	mov	r7, r2
  int32_t ret = BSP_ERROR_NONE;

  /* Check if the instance is supported */
  if(Instance >= QSPI_INSTANCES_NUMBER)
 8006eb6:	bb30      	cbnz	r0, 8006f06 <BSP_QSPI_ConfigFlash+0x56>
    ret = BSP_ERROR_WRONG_PARAM;
  }
  else
  {
    /* Check if MMP mode locked ************************************************/
    if(QSPI_Ctx[Instance].IsInitialized == QSPI_ACCESS_MMP)
 8006eb8:	4d17      	ldr	r5, [pc, #92]	@ (8006f18 <BSP_QSPI_ConfigFlash+0x68>)
 8006eba:	782b      	ldrb	r3, [r5, #0]
 8006ebc:	2b02      	cmp	r3, #2
 8006ebe:	d025      	beq.n	8006f0c <BSP_QSPI_ConfigFlash+0x5c>
      ret = BSP_ERROR_QSPI_MMP_LOCK_FAILURE;
    }
    else
    {
      /* Setup MCU transfer rate setting ***************************************************/
      hqspi.Init.SampleShifting = (Rate == BSP_QSPI_STR_TRANSFER) ? QSPI_SAMPLE_SHIFTING_HALFCYCLE : QSPI_SAMPLE_SHIFTING_NONE;
 8006ec0:	fab2 f382 	clz	r3, r2
 8006ec4:	4e15      	ldr	r6, [pc, #84]	@ (8006f1c <BSP_QSPI_ConfigFlash+0x6c>)
 8006ec6:	095b      	lsrs	r3, r3, #5

      if(HAL_QSPI_Init(&hqspi)!= HAL_OK)
 8006ec8:	4630      	mov	r0, r6
      hqspi.Init.SampleShifting = (Rate == BSP_QSPI_STR_TRANSFER) ? QSPI_SAMPLE_SHIFTING_HALFCYCLE : QSPI_SAMPLE_SHIFTING_NONE;
 8006eca:	011b      	lsls	r3, r3, #4
 8006ecc:	60f3      	str	r3, [r6, #12]
      if(HAL_QSPI_Init(&hqspi)!= HAL_OK)
 8006ece:	f003 fc95 	bl	800a7fc <HAL_QSPI_Init>
 8006ed2:	b9f0      	cbnz	r0, 8006f12 <BSP_QSPI_ConfigFlash+0x62>
        ret = BSP_ERROR_PERIPH_FAILURE;
      }
      else
      {
        /* Setup Flash interface ***************************************************/
        switch(QSPI_Ctx[Instance].InterfaceMode)
 8006ed4:	786b      	ldrb	r3, [r5, #1]
 8006ed6:	2b03      	cmp	r3, #3
 8006ed8:	d10f      	bne.n	8006efa <BSP_QSPI_ConfigFlash+0x4a>
        {
        case MT25TL01G_QPI_MODE :               /* 4-4-4 commands */
          if(Mode != MT25TL01G_QPI_MODE)
 8006eda:	2c03      	cmp	r4, #3
 8006edc:	d105      	bne.n	8006eea <BSP_QSPI_ConfigFlash+0x3a>

        /* Update QSPI context if all operations are well done */
        if(ret == BSP_ERROR_NONE)
        {
          /* Update current status parameter *****************************************/
          QSPI_Ctx[Instance].IsInitialized = QSPI_ACCESS_INDIRECT;
 8006ede:	2301      	movs	r3, #1
          QSPI_Ctx[Instance].InterfaceMode = Mode;
          QSPI_Ctx[Instance].TransferRate  = Rate;
 8006ee0:	2000      	movs	r0, #0
          QSPI_Ctx[Instance].InterfaceMode = Mode;
 8006ee2:	706c      	strb	r4, [r5, #1]
          QSPI_Ctx[Instance].IsInitialized = QSPI_ACCESS_INDIRECT;
 8006ee4:	702b      	strb	r3, [r5, #0]
          QSPI_Ctx[Instance].TransferRate  = Rate;
 8006ee6:	70af      	strb	r7, [r5, #2]
    }
  }

  /* Return BSP status */
  return ret;
}
 8006ee8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            if(MT25TL01G_ExitQPIMode(&hqspi) != MT25TL01G_OK)
 8006eea:	4630      	mov	r0, r6
 8006eec:	f7ff f923 	bl	8006136 <MT25TL01G_ExitQPIMode>
 8006ef0:	2800      	cmp	r0, #0
 8006ef2:	d0f4      	beq.n	8006ede <BSP_QSPI_ConfigFlash+0x2e>
              ret = BSP_ERROR_COMPONENT_FAILURE;
 8006ef4:	f06f 0004 	mvn.w	r0, #4
 8006ef8:	e7f6      	b.n	8006ee8 <BSP_QSPI_ConfigFlash+0x38>
          if(Mode == MT25TL01G_QPI_MODE)
 8006efa:	2c03      	cmp	r4, #3
 8006efc:	d1ef      	bne.n	8006ede <BSP_QSPI_ConfigFlash+0x2e>
            if(MT25TL01G_EnterQPIMode(&hqspi) != MT25TL01G_OK)
 8006efe:	4630      	mov	r0, r6
 8006f00:	f7ff f8fd 	bl	80060fe <MT25TL01G_EnterQPIMode>
 8006f04:	e7f4      	b.n	8006ef0 <BSP_QSPI_ConfigFlash+0x40>
    ret = BSP_ERROR_WRONG_PARAM;
 8006f06:	f06f 0001 	mvn.w	r0, #1
 8006f0a:	e7ed      	b.n	8006ee8 <BSP_QSPI_ConfigFlash+0x38>
      ret = BSP_ERROR_QSPI_MMP_LOCK_FAILURE;
 8006f0c:	f06f 0019 	mvn.w	r0, #25
 8006f10:	e7ea      	b.n	8006ee8 <BSP_QSPI_ConfigFlash+0x38>
        ret = BSP_ERROR_PERIPH_FAILURE;
 8006f12:	f06f 0003 	mvn.w	r0, #3
  return ret;
 8006f16:	e7e7      	b.n	8006ee8 <BSP_QSPI_ConfigFlash+0x38>
 8006f18:	2400f88c 	.word	0x2400f88c
 8006f1c:	240003c8 	.word	0x240003c8

08006f20 <BSP_QSPI_Init>:
{
 8006f20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006f24:	460c      	mov	r4, r1
 8006f26:	b0a4      	sub	sp, #144	@ 0x90
  if(Instance >= QSPI_INSTANCES_NUMBER)
 8006f28:	2800      	cmp	r0, #0
 8006f2a:	f040 81ac 	bne.w	8007286 <BSP_QSPI_Init+0x366>
    if(QSPI_Ctx[Instance].IsInitialized == QSPI_ACCESS_NONE)
 8006f2e:	4d03      	ldr	r5, [pc, #12]	@ (8006f3c <BSP_QSPI_Init+0x1c>)
 8006f30:	782f      	ldrb	r7, [r5, #0]
 8006f32:	b12f      	cbz	r7, 8006f40 <BSP_QSPI_Init+0x20>
  int32_t ret = BSP_ERROR_NONE;
 8006f34:	2000      	movs	r0, #0
}
 8006f36:	b024      	add	sp, #144	@ 0x90
 8006f38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006f3c:	2400f88c 	.word	0x2400f88c
{
  GPIO_InitTypeDef gpio_init_structure;

  /*##-1- Enable peripherals and GPIO Clocks #################################*/
  /* Enable the QuadSPI memory interface clock */
  QSPI_CLK_ENABLE();
 8006f40:	4bc3      	ldr	r3, [pc, #780]	@ (8007250 <BSP_QSPI_Init+0x330>)
  QSPI_BK2_D3_GPIO_CLK_ENABLE();

  /*##-2- Configure peripheral GPIO ##########################################*/
  /* QSPI CLK GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_CLK_PIN;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8006f42:	f04f 0904 	mov.w	r9, #4
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
  gpio_init_structure.Pull      = GPIO_NOPULL;
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 8006f46:	2609      	movs	r6, #9
  HAL_GPIO_Init(QSPI_CLK_GPIO_PORT, &gpio_init_structure);
 8006f48:	a916      	add	r1, sp, #88	@ 0x58
  QSPI_CLK_ENABLE();
 8006f4a:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4

  /* QSPI CS GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_BK1_CS_PIN;
 8006f4e:	f04f 0840 	mov.w	r8, #64	@ 0x40
  HAL_GPIO_Init(QSPI_CLK_GPIO_PORT, &gpio_init_structure);
 8006f52:	48c0      	ldr	r0, [pc, #768]	@ (8007254 <BSP_QSPI_Init+0x334>)
  gpio_init_structure.Pull      = GPIO_PULLUP;
  gpio_init_structure.Alternate = GPIO_AF10_QUADSPI;
 8006f54:	f04f 0a0a 	mov.w	sl, #10
  QSPI_CLK_ENABLE();
 8006f58:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006f5c:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
 8006f60:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 8006f64:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 8006f68:	9201      	str	r2, [sp, #4]
 8006f6a:	9a01      	ldr	r2, [sp, #4]
  QSPI_FORCE_RESET();
 8006f6c:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 8006f6e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006f72:	67da      	str	r2, [r3, #124]	@ 0x7c
  QSPI_RELEASE_RESET();
 8006f74:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 8006f76:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8006f7a:	67da      	str	r2, [r3, #124]	@ 0x7c
  QSPI_CLK_GPIO_CLK_ENABLE();
 8006f7c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8006f80:	f042 0202 	orr.w	r2, r2, #2
 8006f84:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8006f88:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8006f8c:	f002 0202 	and.w	r2, r2, #2
 8006f90:	9202      	str	r2, [sp, #8]
 8006f92:	9a02      	ldr	r2, [sp, #8]
  QSPI_BK1_CS_GPIO_CLK_ENABLE();
 8006f94:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8006f98:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006f9c:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8006fa0:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8006fa4:	f002 0240 	and.w	r2, r2, #64	@ 0x40
 8006fa8:	9203      	str	r2, [sp, #12]
 8006faa:	9a03      	ldr	r2, [sp, #12]
  QSPI_BK1_D0_GPIO_CLK_ENABLE();
 8006fac:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8006fb0:	f042 0208 	orr.w	r2, r2, #8
 8006fb4:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8006fb8:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8006fbc:	f002 0208 	and.w	r2, r2, #8
 8006fc0:	9204      	str	r2, [sp, #16]
 8006fc2:	9a04      	ldr	r2, [sp, #16]
  QSPI_BK1_D1_GPIO_CLK_ENABLE();
 8006fc4:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8006fc8:	f042 0220 	orr.w	r2, r2, #32
 8006fcc:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8006fd0:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8006fd4:	f002 0220 	and.w	r2, r2, #32
 8006fd8:	9205      	str	r2, [sp, #20]
 8006fda:	9a05      	ldr	r2, [sp, #20]
  QSPI_BK1_D2_GPIO_CLK_ENABLE();
 8006fdc:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8006fe0:	f042 0220 	orr.w	r2, r2, #32
 8006fe4:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8006fe8:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8006fec:	f002 0220 	and.w	r2, r2, #32
 8006ff0:	9206      	str	r2, [sp, #24]
 8006ff2:	9a06      	ldr	r2, [sp, #24]
  QSPI_BK1_D3_GPIO_CLK_ENABLE();
 8006ff4:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8006ff8:	f042 0220 	orr.w	r2, r2, #32
 8006ffc:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8007000:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8007004:	f002 0220 	and.w	r2, r2, #32
 8007008:	9207      	str	r2, [sp, #28]
 800700a:	9a07      	ldr	r2, [sp, #28]
  QSPI_BK2_CS_GPIO_CLK_ENABLE();
 800700c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8007010:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007014:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8007018:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800701c:	f002 0240 	and.w	r2, r2, #64	@ 0x40
 8007020:	9208      	str	r2, [sp, #32]
 8007022:	9a08      	ldr	r2, [sp, #32]
  QSPI_BK2_D0_GPIO_CLK_ENABLE();
 8007024:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8007028:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800702c:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8007030:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8007034:	f002 0280 	and.w	r2, r2, #128	@ 0x80
 8007038:	9209      	str	r2, [sp, #36]	@ 0x24
 800703a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
  QSPI_BK2_D1_GPIO_CLK_ENABLE();
 800703c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8007040:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8007044:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8007048:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800704c:	f002 0280 	and.w	r2, r2, #128	@ 0x80
 8007050:	920a      	str	r2, [sp, #40]	@ 0x28
 8007052:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
  QSPI_BK2_D2_GPIO_CLK_ENABLE();
 8007054:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8007058:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800705c:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8007060:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8007064:	f002 0240 	and.w	r2, r2, #64	@ 0x40
 8007068:	920b      	str	r2, [sp, #44]	@ 0x2c
 800706a:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
  QSPI_BK2_D3_GPIO_CLK_ENABLE();
 800706c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8007070:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007074:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8007078:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800707c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007080:	930c      	str	r3, [sp, #48]	@ 0x30
 8007082:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8007084:	2302      	movs	r3, #2
 8007086:	e9cd 9316 	strd	r9, r3, [sp, #88]	@ 0x58
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 800708a:	2303      	movs	r3, #3
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 800708c:	961a      	str	r6, [sp, #104]	@ 0x68
  gpio_init_structure.Pull      = GPIO_NOPULL;
 800708e:	e9cd 7318 	strd	r7, r3, [sp, #96]	@ 0x60
  HAL_GPIO_Init(QSPI_CLK_GPIO_PORT, &gpio_init_structure);
 8007092:	f001 fa69 	bl	8008568 <HAL_GPIO_Init>
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8007096:	2301      	movs	r3, #1
  HAL_GPIO_Init(QSPI_BK1_CS_GPIO_PORT, &gpio_init_structure);
 8007098:	a916      	add	r1, sp, #88	@ 0x58
 800709a:	486f      	ldr	r0, [pc, #444]	@ (8007258 <BSP_QSPI_Init+0x338>)
  gpio_init_structure.Pull      = GPIO_PULLUP;
 800709c:	9318      	str	r3, [sp, #96]	@ 0x60
  gpio_init_structure.Pin       = QSPI_BK1_CS_PIN;
 800709e:	f8cd 8058 	str.w	r8, [sp, #88]	@ 0x58
  gpio_init_structure.Alternate = GPIO_AF10_QUADSPI;
 80070a2:	f8cd a068 	str.w	sl, [sp, #104]	@ 0x68
  HAL_GPIO_Init(QSPI_BK1_CS_GPIO_PORT, &gpio_init_structure);
 80070a6:	f001 fa5f 	bl	8008568 <HAL_GPIO_Init>

  /* QSPI D0 GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_BK1_D0_PIN;
 80070aa:	f44f 6300 	mov.w	r3, #2048	@ 0x800
  gpio_init_structure.Pull      = GPIO_NOPULL;
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
  HAL_GPIO_Init(QSPI_BK1_D0_GPIO_PORT, &gpio_init_structure);
 80070ae:	a916      	add	r1, sp, #88	@ 0x58
 80070b0:	486a      	ldr	r0, [pc, #424]	@ (800725c <BSP_QSPI_Init+0x33c>)
  gpio_init_structure.Pin       = QSPI_BK1_D0_PIN;
 80070b2:	9316      	str	r3, [sp, #88]	@ 0x58
  gpio_init_structure.Pull      = GPIO_NOPULL;
 80070b4:	9718      	str	r7, [sp, #96]	@ 0x60
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 80070b6:	961a      	str	r6, [sp, #104]	@ 0x68
  HAL_GPIO_Init(QSPI_BK1_D0_GPIO_PORT, &gpio_init_structure);
 80070b8:	f001 fa56 	bl	8008568 <HAL_GPIO_Init>

  gpio_init_structure.Pin       = QSPI_BK2_D0_PIN;
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
  HAL_GPIO_Init(QSPI_BK2_D0_GPIO_PORT, &gpio_init_structure);
 80070bc:	a916      	add	r1, sp, #88	@ 0x58
  gpio_init_structure.Pin       = QSPI_BK2_D0_PIN;
 80070be:	f8cd 9058 	str.w	r9, [sp, #88]	@ 0x58
  HAL_GPIO_Init(QSPI_BK2_D0_GPIO_PORT, &gpio_init_structure);
 80070c2:	4867      	ldr	r0, [pc, #412]	@ (8007260 <BSP_QSPI_Init+0x340>)

  /* QSPI D1 GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_BK1_D1_PIN;
 80070c4:	f44f 7900 	mov.w	r9, #512	@ 0x200
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 80070c8:	961a      	str	r6, [sp, #104]	@ 0x68
  HAL_GPIO_Init(QSPI_BK2_D0_GPIO_PORT, &gpio_init_structure);
 80070ca:	f001 fa4d 	bl	8008568 <HAL_GPIO_Init>
  gpio_init_structure.Alternate = GPIO_AF10_QUADSPI;
  HAL_GPIO_Init(QSPI_BK1_D1_GPIO_PORT, &gpio_init_structure);
 80070ce:	a916      	add	r1, sp, #88	@ 0x58
 80070d0:	4864      	ldr	r0, [pc, #400]	@ (8007264 <BSP_QSPI_Init+0x344>)
  gpio_init_structure.Pin       = QSPI_BK1_D1_PIN;
 80070d2:	f8cd 9058 	str.w	r9, [sp, #88]	@ 0x58
  gpio_init_structure.Alternate = GPIO_AF10_QUADSPI;
 80070d6:	f8cd a068 	str.w	sl, [sp, #104]	@ 0x68
  HAL_GPIO_Init(QSPI_BK1_D1_GPIO_PORT, &gpio_init_structure);
 80070da:	f001 fa45 	bl	8008568 <HAL_GPIO_Init>

  gpio_init_structure.Pin       = QSPI_BK2_D1_PIN;
 80070de:	2308      	movs	r3, #8
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
  HAL_GPIO_Init(QSPI_BK2_D1_GPIO_PORT, &gpio_init_structure);
 80070e0:	a916      	add	r1, sp, #88	@ 0x58
 80070e2:	485f      	ldr	r0, [pc, #380]	@ (8007260 <BSP_QSPI_Init+0x340>)
  gpio_init_structure.Pin       = QSPI_BK2_D1_PIN;
 80070e4:	9316      	str	r3, [sp, #88]	@ 0x58
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 80070e6:	961a      	str	r6, [sp, #104]	@ 0x68
  HAL_GPIO_Init(QSPI_BK2_D1_GPIO_PORT, &gpio_init_structure);
 80070e8:	f001 fa3e 	bl	8008568 <HAL_GPIO_Init>

  /* QSPI D2 GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_BK1_D2_PIN;
 80070ec:	2380      	movs	r3, #128	@ 0x80
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
  HAL_GPIO_Init(QSPI_BK1_D2_GPIO_PORT, &gpio_init_structure);
 80070ee:	a916      	add	r1, sp, #88	@ 0x58
 80070f0:	485c      	ldr	r0, [pc, #368]	@ (8007264 <BSP_QSPI_Init+0x344>)
  gpio_init_structure.Pin       = QSPI_BK1_D2_PIN;
 80070f2:	9316      	str	r3, [sp, #88]	@ 0x58
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 80070f4:	961a      	str	r6, [sp, #104]	@ 0x68
  HAL_GPIO_Init(QSPI_BK1_D2_GPIO_PORT, &gpio_init_structure);
 80070f6:	f001 fa37 	bl	8008568 <HAL_GPIO_Init>

  gpio_init_structure.Pin       = QSPI_BK2_D2_PIN;
  HAL_GPIO_Init(QSPI_BK2_D2_GPIO_PORT, &gpio_init_structure);
 80070fa:	a916      	add	r1, sp, #88	@ 0x58
 80070fc:	4856      	ldr	r0, [pc, #344]	@ (8007258 <BSP_QSPI_Init+0x338>)
  gpio_init_structure.Pin       = QSPI_BK2_D2_PIN;
 80070fe:	f8cd 9058 	str.w	r9, [sp, #88]	@ 0x58
  HAL_GPIO_Init(QSPI_BK2_D2_GPIO_PORT, &gpio_init_structure);
 8007102:	f001 fa31 	bl	8008568 <HAL_GPIO_Init>

  /* QSPI D3 GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_BK1_D3_PIN;
  HAL_GPIO_Init(QSPI_BK1_D3_GPIO_PORT, &gpio_init_structure);
 8007106:	a916      	add	r1, sp, #88	@ 0x58
 8007108:	4856      	ldr	r0, [pc, #344]	@ (8007264 <BSP_QSPI_Init+0x344>)
  gpio_init_structure.Pin       = QSPI_BK1_D3_PIN;
 800710a:	f8cd 8058 	str.w	r8, [sp, #88]	@ 0x58
  HAL_GPIO_Init(QSPI_BK1_D3_GPIO_PORT, &gpio_init_structure);
 800710e:	f001 fa2b 	bl	8008568 <HAL_GPIO_Init>

  gpio_init_structure.Pin       = QSPI_BK2_D3_PIN;
 8007112:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
  HAL_GPIO_Init(QSPI_BK2_D3_GPIO_PORT, &gpio_init_structure);
 8007116:	a916      	add	r1, sp, #88	@ 0x58
 8007118:	484f      	ldr	r0, [pc, #316]	@ (8007258 <BSP_QSPI_Init+0x338>)
  gpio_init_structure.Pin       = QSPI_BK2_D3_PIN;
 800711a:	9316      	str	r3, [sp, #88]	@ 0x58
  HAL_GPIO_Init(QSPI_BK2_D3_GPIO_PORT, &gpio_init_structure);
 800711c:	f001 fa24 	bl	8008568 <HAL_GPIO_Init>

  /*##-3- Configure the NVIC for QSPI #########################################*/
  /* NVIC configuration for QSPI interrupt */
  HAL_NVIC_SetPriority(QUADSPI_IRQn, 0x0F, 0);
 8007120:	463a      	mov	r2, r7
 8007122:	210f      	movs	r1, #15
 8007124:	205c      	movs	r0, #92	@ 0x5c
 8007126:	f000 fbc9 	bl	80078bc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(QUADSPI_IRQn);
 800712a:	205c      	movs	r0, #92	@ 0x5c
 800712c:	f000 fbf8 	bl	8007920 <HAL_NVIC_EnableIRQ>
        (void)MT25TL01G_GetFlashInfo(&pInfo);
 8007130:	a811      	add	r0, sp, #68	@ 0x44
 8007132:	f7fe ff38 	bl	8005fa6 <MT25TL01G_GetFlashInfo>
        qspi_init.ClockPrescaler = PrescalerTab[Init->TransferRate];
 8007136:	7863      	ldrb	r3, [r4, #1]
 8007138:	4a4b      	ldr	r2, [pc, #300]	@ (8007268 <BSP_QSPI_Init+0x348>)
        qspi_init.DualFlashMode  = QSPI_DUALFLASH_ENABLE;
 800713a:	f8cd 8040 	str.w	r8, [sp, #64]	@ 0x40
        qspi_init.ClockPrescaler = PrescalerTab[Init->TransferRate];
 800713e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8007142:	920e      	str	r2, [sp, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007144:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8007146:	fa92 f2a2 	rbit	r2, r2
        qspi_init.SampleShifting = (Init->TransferRate == BSP_QSPI_STR_TRANSFER) ? QSPI_SAMPLE_SHIFTING_HALFCYCLE : QSPI_SAMPLE_SHIFTING_NONE;
 800714a:	fab3 f383 	clz	r3, r3
  return __builtin_clz(value);
 800714e:	fab2 f282 	clz	r2, r2
        if(MX_QSPI_Init(&hqspi, &qspi_init) != HAL_OK)
 8007152:	a90d      	add	r1, sp, #52	@ 0x34
 8007154:	4845      	ldr	r0, [pc, #276]	@ (800726c <BSP_QSPI_Init+0x34c>)
        qspi_init.SampleShifting = (Init->TransferRate == BSP_QSPI_STR_TRANSFER) ? QSPI_SAMPLE_SHIFTING_HALFCYCLE : QSPI_SAMPLE_SHIFTING_NONE;
 8007156:	095b      	lsrs	r3, r3, #5
        qspi_init.FlashSize      = (uint32_t)POSITION_VAL((uint32_t)pInfo.FlashSize) - 1U;
 8007158:	3a01      	subs	r2, #1
        qspi_init.SampleShifting = (Init->TransferRate == BSP_QSPI_STR_TRANSFER) ? QSPI_SAMPLE_SHIFTING_HALFCYCLE : QSPI_SAMPLE_SHIFTING_NONE;
 800715a:	011b      	lsls	r3, r3, #4
        qspi_init.FlashSize      = (uint32_t)POSITION_VAL((uint32_t)pInfo.FlashSize) - 1U;
 800715c:	920d      	str	r2, [sp, #52]	@ 0x34
        qspi_init.SampleShifting = (Init->TransferRate == BSP_QSPI_STR_TRANSFER) ? QSPI_SAMPLE_SHIFTING_HALFCYCLE : QSPI_SAMPLE_SHIFTING_NONE;
 800715e:	930f      	str	r3, [sp, #60]	@ 0x3c
        if(MX_QSPI_Init(&hqspi, &qspi_init) != HAL_OK)
 8007160:	f7ff fe74 	bl	8006e4c <MX_QSPI_Init>
 8007164:	2800      	cmp	r0, #0
 8007166:	f040 8091 	bne.w	800728c <BSP_QSPI_Init+0x36c>
static int32_t QSPI_ResetMemory(uint32_t Instance)
{
  int32_t ret = BSP_ERROR_NONE;

  /* Send RESET ENABLE command in QPI mode (QUAD I/Os, 4-4-4) */
  if(MT25TL01G_ResetEnable(&hqspi, MT25TL01G_QPI_MODE) != MT25TL01G_OK)
 800716a:	2103      	movs	r1, #3
 800716c:	483f      	ldr	r0, [pc, #252]	@ (800726c <BSP_QSPI_Init+0x34c>)
 800716e:	f7ff f88e 	bl	800628e <MT25TL01G_ResetEnable>
 8007172:	2800      	cmp	r0, #0
 8007174:	f040 8084 	bne.w	8007280 <BSP_QSPI_Init+0x360>
  {
    ret =BSP_ERROR_COMPONENT_FAILURE;
  }/* Send RESET memory command in QPI mode (QUAD I/Os, 4-4-4) */
  else if(MT25TL01G_ResetMemory(&hqspi, MT25TL01G_QPI_MODE) != MT25TL01G_OK)
 8007178:	2103      	movs	r1, #3
 800717a:	483c      	ldr	r0, [pc, #240]	@ (800726c <BSP_QSPI_Init+0x34c>)
 800717c:	f7ff f8a8 	bl	80062d0 <MT25TL01G_ResetMemory>
 8007180:	2800      	cmp	r0, #0
 8007182:	d17d      	bne.n	8007280 <BSP_QSPI_Init+0x360>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
  }/* Wait Flash ready */
  else if(MT25TL01G_AutoPollingMemReady(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 8007184:	7869      	ldrb	r1, [r5, #1]
 8007186:	4839      	ldr	r0, [pc, #228]	@ (800726c <BSP_QSPI_Init+0x34c>)
 8007188:	f7fe ff1e 	bl	8005fc8 <MT25TL01G_AutoPollingMemReady>
 800718c:	4601      	mov	r1, r0
 800718e:	2800      	cmp	r0, #0
 8007190:	d176      	bne.n	8007280 <BSP_QSPI_Init+0x360>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
  }/* Send RESET ENABLE command in SPI mode (1-1-1) */
  else if(MT25TL01G_ResetEnable(&hqspi, BSP_QSPI_SPI_MODE) != MT25TL01G_OK)
 8007192:	4836      	ldr	r0, [pc, #216]	@ (800726c <BSP_QSPI_Init+0x34c>)
 8007194:	f7ff f87b 	bl	800628e <MT25TL01G_ResetEnable>
 8007198:	4601      	mov	r1, r0
 800719a:	2800      	cmp	r0, #0
 800719c:	d170      	bne.n	8007280 <BSP_QSPI_Init+0x360>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
  }/* Send RESET memory command in SPI mode (1-1-1) */
  else if(MT25TL01G_ResetMemory(&hqspi, BSP_QSPI_SPI_MODE) != MT25TL01G_OK)
 800719e:	4833      	ldr	r0, [pc, #204]	@ (800726c <BSP_QSPI_Init+0x34c>)
 80071a0:	f7ff f896 	bl	80062d0 <MT25TL01G_ResetMemory>
 80071a4:	4601      	mov	r1, r0
 80071a6:	2800      	cmp	r0, #0
 80071a8:	d16a      	bne.n	8007280 <BSP_QSPI_Init+0x360>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
  }
  else
  {
    QSPI_Ctx[Instance].IsInitialized = QSPI_ACCESS_INDIRECT;  /* After reset S/W setting to indirect access   */
 80071aa:	2301      	movs	r3, #1
    QSPI_Ctx[Instance].InterfaceMode = BSP_QSPI_SPI_MODE;     /* After reset H/W back to SPI mode by default  */
    QSPI_Ctx[Instance].TransferRate  = BSP_QSPI_STR_TRANSFER; /* After reset S/W setting to STR mode          */
 80071ac:	70a8      	strb	r0, [r5, #2]
        else if(MT25TL01G_AutoPollingMemReady(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 80071ae:	482f      	ldr	r0, [pc, #188]	@ (800726c <BSP_QSPI_Init+0x34c>)
    QSPI_Ctx[Instance].IsInitialized = QSPI_ACCESS_INDIRECT;  /* After reset S/W setting to indirect access   */
 80071b0:	802b      	strh	r3, [r5, #0]
        else if(MT25TL01G_AutoPollingMemReady(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 80071b2:	f7fe ff09 	bl	8005fc8 <MT25TL01G_AutoPollingMemReady>
 80071b6:	2800      	cmp	r0, #0
 80071b8:	d162      	bne.n	8007280 <BSP_QSPI_Init+0x360>
        else if(MT25TL01G_Enter4BytesAddressMode(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 80071ba:	7869      	ldrb	r1, [r5, #1]
 80071bc:	482b      	ldr	r0, [pc, #172]	@ (800726c <BSP_QSPI_Init+0x34c>)
 80071be:	f7fe ff72 	bl	80060a6 <MT25TL01G_Enter4BytesAddressMode>
 80071c2:	2800      	cmp	r0, #0
 80071c4:	d15c      	bne.n	8007280 <BSP_QSPI_Init+0x360>
    int32_t ret= BSP_ERROR_NONE;
    QSPI_CommandTypeDef s_command;
  uint16_t reg=0;

  /* Initialize the read volatile configuration register command */
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 80071c6:	f44f 7340 	mov.w	r3, #768	@ 0x300
  uint16_t reg=0;
 80071ca:	f8ad 0002 	strh.w	r0, [sp, #2]
  s_command.Instruction       = MT25TL01G_READ_VOL_CFG_REG_CMD;
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
  s_command.DataMode          = QSPI_DATA_4_LINES;
  s_command.DummyCycles       = 0;
 80071ce:	901b      	str	r0, [sp, #108]	@ 0x6c
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;

  /* Configure the command */
  if (HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80071d0:	f241 3288 	movw	r2, #5000	@ 0x1388
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 80071d4:	931c      	str	r3, [sp, #112]	@ 0x70
  s_command.Instruction       = MT25TL01G_READ_VOL_CFG_REG_CMD;
 80071d6:	2385      	movs	r3, #133	@ 0x85
  if (HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80071d8:	a916      	add	r1, sp, #88	@ 0x58
  s_command.Instruction       = MT25TL01G_READ_VOL_CFG_REG_CMD;
 80071da:	9316      	str	r3, [sp, #88]	@ 0x58
  s_command.DataMode          = QSPI_DATA_4_LINES;
 80071dc:	f04f 7340 	mov.w	r3, #50331648	@ 0x3000000
 80071e0:	931f      	str	r3, [sp, #124]	@ 0x7c
  s_command.NbData            = 2;
 80071e2:	2302      	movs	r3, #2
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80071e4:	e9cd 001d 	strd	r0, r0, [sp, #116]	@ 0x74
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 80071e8:	e9cd 3020 	strd	r3, r0, [sp, #128]	@ 0x80
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 80071ec:	e9cd 0022 	strd	r0, r0, [sp, #136]	@ 0x88
  if (HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80071f0:	481e      	ldr	r0, [pc, #120]	@ (800726c <BSP_QSPI_Init+0x34c>)
 80071f2:	f003 fb4f 	bl	800a894 <HAL_QSPI_Command>
 80071f6:	2800      	cmp	r0, #0
 80071f8:	d142      	bne.n	8007280 <BSP_QSPI_Init+0x360>
  {
    return BSP_ERROR_COMPONENT_FAILURE;
  }

  /* Reception of the data */
  if (HAL_QSPI_Receive(&hqspi, (uint8_t *)(&reg), HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80071fa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80071fe:	f10d 0102 	add.w	r1, sp, #2
 8007202:	481a      	ldr	r0, [pc, #104]	@ (800726c <BSP_QSPI_Init+0x34c>)
 8007204:	f003 fbe7 	bl	800a9d6 <HAL_QSPI_Receive>
 8007208:	2800      	cmp	r0, #0
 800720a:	d139      	bne.n	8007280 <BSP_QSPI_Init+0x360>
  {
    return BSP_ERROR_COMPONENT_FAILURE;
  }

  /* Enable write operations */
  if (MT25TL01G_WriteEnable(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 800720c:	7869      	ldrb	r1, [r5, #1]
 800720e:	4817      	ldr	r0, [pc, #92]	@ (800726c <BSP_QSPI_Init+0x34c>)
 8007210:	f7fe ff05 	bl	800601e <MT25TL01G_WriteEnable>
 8007214:	bba0      	cbnz	r0, 8007280 <BSP_QSPI_Init+0x360>
  {
    return BSP_ERROR_COMPONENT_FAILURE;
  }

  /* Update volatile configuration register (with new dummy cycles) */
  s_command.Instruction = MT25TL01G_WRITE_VOL_CFG_REG_CMD;
 8007216:	2381      	movs	r3, #129	@ 0x81
  MODIFY_REG(reg, 0xF0F0, ((MT25TL01G_DUMMY_CYCLES_READ_QUAD << 4) |
                               (MT25TL01G_DUMMY_CYCLES_READ_QUAD << 12)));

  /* Configure the write volatile configuration register command */
  if (HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8007218:	f241 3288 	movw	r2, #5000	@ 0x1388
 800721c:	a916      	add	r1, sp, #88	@ 0x58
 800721e:	4813      	ldr	r0, [pc, #76]	@ (800726c <BSP_QSPI_Init+0x34c>)
  s_command.Instruction = MT25TL01G_WRITE_VOL_CFG_REG_CMD;
 8007220:	9316      	str	r3, [sp, #88]	@ 0x58
  MODIFY_REG(reg, 0xF0F0, ((MT25TL01G_DUMMY_CYCLES_READ_QUAD << 4) |
 8007222:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8007226:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800722a:	051b      	lsls	r3, r3, #20
 800722c:	0d1b      	lsrs	r3, r3, #20
 800722e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007232:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007236:	f8ad 3002 	strh.w	r3, [sp, #2]
  if (HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800723a:	f003 fb2b 	bl	800a894 <HAL_QSPI_Command>
 800723e:	b9f8      	cbnz	r0, 8007280 <BSP_QSPI_Init+0x360>
  {
    return BSP_ERROR_COMPONENT_FAILURE;
  }

  /* Transmission of the data */
  if (HAL_QSPI_Transmit(&hqspi, (uint8_t *)(&reg), HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8007240:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007244:	f10d 0102 	add.w	r1, sp, #2
 8007248:	4808      	ldr	r0, [pc, #32]	@ (800726c <BSP_QSPI_Init+0x34c>)
 800724a:	f003 fb68 	bl	800a91e <HAL_QSPI_Transmit>
 800724e:	e00f      	b.n	8007270 <BSP_QSPI_Init+0x350>
 8007250:	58024400 	.word	0x58024400
 8007254:	58020400 	.word	0x58020400
 8007258:	58021800 	.word	0x58021800
 800725c:	58020c00 	.word	0x58020c00
 8007260:	58021c00 	.word	0x58021c00
 8007264:	58021400 	.word	0x58021400
 8007268:	0802b5d8 	.word	0x0802b5d8
 800726c:	240003c8 	.word	0x240003c8
 8007270:	b930      	cbnz	r0, 8007280 <BSP_QSPI_Init+0x360>
          if(BSP_QSPI_ConfigFlash(Instance, Init->InterfaceMode, Init->TransferRate) != BSP_ERROR_NONE)
 8007272:	7862      	ldrb	r2, [r4, #1]
 8007274:	7821      	ldrb	r1, [r4, #0]
 8007276:	f7ff fe1b 	bl	8006eb0 <BSP_QSPI_ConfigFlash>
 800727a:	2800      	cmp	r0, #0
 800727c:	f43f ae5a 	beq.w	8006f34 <BSP_QSPI_Init+0x14>
            ret = BSP_ERROR_COMPONENT_FAILURE;
 8007280:	f06f 0004 	mvn.w	r0, #4
 8007284:	e657      	b.n	8006f36 <BSP_QSPI_Init+0x16>
    ret = BSP_ERROR_WRONG_PARAM;
 8007286:	f06f 0001 	mvn.w	r0, #1
 800728a:	e654      	b.n	8006f36 <BSP_QSPI_Init+0x16>
          ret = BSP_ERROR_PERIPH_FAILURE;
 800728c:	f06f 0003 	mvn.w	r0, #3
  return ret;
 8007290:	e651      	b.n	8006f36 <BSP_QSPI_Init+0x16>
 8007292:	bf00      	nop

08007294 <BSP_SDRAM_DeInit>:
  * @brief  DeInitializes the SDRAM device.
  * @param Instance  SDRAM Instance
  * @retval BSP status
  */
int32_t BSP_SDRAM_DeInit(uint32_t Instance)
{
 8007294:	b510      	push	{r4, lr}
  int32_t ret = BSP_ERROR_NONE;

  if(Instance >=SDRAM_INSTANCES_NBR)
 8007296:	4604      	mov	r4, r0
 8007298:	b970      	cbnz	r0, 80072b8 <BSP_SDRAM_DeInit+0x24>
    ret =  BSP_ERROR_WRONG_PARAM;
  }
  else
  {
    /* SDRAM device de-initialization */
    hsdram[Instance].Instance = FMC_SDRAM_DEVICE;
 800729a:	4b09      	ldr	r3, [pc, #36]	@ (80072c0 <BSP_SDRAM_DeInit+0x2c>)
 800729c:	4809      	ldr	r0, [pc, #36]	@ (80072c4 <BSP_SDRAM_DeInit+0x30>)
 800729e:	6003      	str	r3, [r0, #0]

    (void)HAL_SDRAM_DeInit(&hsdram[Instance]);
 80072a0:	f004 ffe4 	bl	800c26c <HAL_SDRAM_DeInit>
  static MDMA_HandleTypeDef mdma_handle;

  /* Prevent unused argument(s) compilation warning */
  UNUSED(hsdram);
  /* Disable NVIC configuration for MDMA interrupt */
  HAL_NVIC_DisableIRQ(SDRAM_MDMAx_IRQn);
 80072a4:	207a      	movs	r0, #122	@ 0x7a
 80072a6:	f000 fb49 	bl	800793c <HAL_NVIC_DisableIRQ>

  /* Deinitialize the stream for new transfer */
  mdma_handle.Instance = SDRAM_MDMAx_CHANNEL;
 80072aa:	4807      	ldr	r0, [pc, #28]	@ (80072c8 <BSP_SDRAM_DeInit+0x34>)
 80072ac:	4b07      	ldr	r3, [pc, #28]	@ (80072cc <BSP_SDRAM_DeInit+0x38>)
 80072ae:	6003      	str	r3, [r0, #0]
  (void)HAL_MDMA_DeInit(&mdma_handle);
 80072b0:	f003 f82a 	bl	800a308 <HAL_MDMA_DeInit>
    ret = BSP_ERROR_NONE;
 80072b4:	4620      	mov	r0, r4
}
 80072b6:	bd10      	pop	{r4, pc}
    ret =  BSP_ERROR_WRONG_PARAM;
 80072b8:	f06f 0001 	mvn.w	r0, #1
  return ret;
 80072bc:	e7fb      	b.n	80072b6 <BSP_SDRAM_DeInit+0x22>
 80072be:	bf00      	nop
 80072c0:	52004140 	.word	0x52004140
 80072c4:	2400f990 	.word	0x2400f990
 80072c8:	2400f898 	.word	0x2400f898
 80072cc:	52000040 	.word	0x52000040

080072d0 <MX_SDRAM_Init>:
  hSdram->Init.SDBank             = FMC_SDRAM_BANK2;
 80072d0:	2201      	movs	r2, #1
 80072d2:	4915      	ldr	r1, [pc, #84]	@ (8007328 <MX_SDRAM_Init+0x58>)
  hsdram->Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 80072d4:	4b15      	ldr	r3, [pc, #84]	@ (800732c <MX_SDRAM_Init+0x5c>)
{
 80072d6:	b510      	push	{r4, lr}
  hSdram->Init.SDBank             = FMC_SDRAM_BANK2;
 80072d8:	e9c0 1200 	strd	r1, r2, [r0]
  hSdram->Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_9;
 80072dc:	6082      	str	r2, [r0, #8]
  hSdram->Init.MemoryDataWidth    = FMC_SDRAM_MEM_BUS_WIDTH_32;
 80072de:	2104      	movs	r1, #4
 80072e0:	2220      	movs	r2, #32
  hSdram->Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_3;
 80072e2:	2440      	movs	r4, #64	@ 0x40
{
 80072e4:	b088      	sub	sp, #32
  hSdram->Init.MemoryDataWidth    = FMC_SDRAM_MEM_BUS_WIDTH_32;
 80072e6:	e9c0 1203 	strd	r1, r2, [r0, #12]
  hSdram->Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_3;
 80072ea:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 80072ee:	e9c0 4205 	strd	r4, r2, [r0, #20]
  hSdram->Init.SDClockPeriod      = FMC_SDRAM_CLOCK_PERIOD_2;
 80072f2:	2200      	movs	r2, #0
 80072f4:	f44f 6400 	mov.w	r4, #2048	@ 0x800
 80072f8:	e9c0 2407 	strd	r2, r4, [r0, #28]
  hSdram->Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 80072fc:	f44f 5480 	mov.w	r4, #4096	@ 0x1000
 8007300:	6244      	str	r4, [r0, #36]	@ 0x24
  hsdram->Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 8007302:	629a      	str	r2, [r3, #40]	@ 0x28
  sdram_timing.ExitSelfRefreshDelay = 7;
 8007304:	2207      	movs	r2, #7
 8007306:	2302      	movs	r3, #2
  sdram_timing.RowCycleDelay        = 7;
 8007308:	e9cd 1203 	strd	r1, r2, [sp, #12]
  if(HAL_SDRAM_Init(hSdram, &sdram_timing) != HAL_OK)
 800730c:	4469      	add	r1, sp
  sdram_timing.RCDDelay             = 2;
 800730e:	9307      	str	r3, [sp, #28]
  sdram_timing.ExitSelfRefreshDelay = 7;
 8007310:	e9cd 3201 	strd	r3, r2, [sp, #4]
  sdram_timing.RPDelay              = 2;
 8007314:	e9cd 3305 	strd	r3, r3, [sp, #20]
  if(HAL_SDRAM_Init(hSdram, &sdram_timing) != HAL_OK)
 8007318:	f004 ff80 	bl	800c21c <HAL_SDRAM_Init>
}
 800731c:	3800      	subs	r0, #0
 800731e:	bf18      	it	ne
 8007320:	2001      	movne	r0, #1
 8007322:	b008      	add	sp, #32
 8007324:	bd10      	pop	{r4, pc}
 8007326:	bf00      	nop
 8007328:	52004140 	.word	0x52004140
 800732c:	2400f990 	.word	0x2400f990

08007330 <BSP_SDRAM_Init>:
{
 8007330:	b5f0      	push	{r4, r5, r6, r7, lr}
  if(Instance >=SDRAM_INSTANCES_NBR)
 8007332:	4605      	mov	r5, r0
{
 8007334:	b08f      	sub	sp, #60	@ 0x3c
  if(Instance >=SDRAM_INSTANCES_NBR)
 8007336:	2800      	cmp	r0, #0
 8007338:	f040 80dd 	bne.w	80074f6 <BSP_SDRAM_Init+0x1c6>
  __HAL_RCC_FMC_CLK_ENABLE();
 800733c:	4b71      	ldr	r3, [pc, #452]	@ (8007504 <BSP_SDRAM_Init+0x1d4>)
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 800733e:	2703      	movs	r7, #3
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8007340:	a909      	add	r1, sp, #36	@ 0x24
 8007342:	4871      	ldr	r0, [pc, #452]	@ (8007508 <BSP_SDRAM_Init+0x1d8>)
  __HAL_RCC_FMC_CLK_ENABLE();
 8007344:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
  mdma_handle.Init.Request                  = MDMA_REQUEST_SW;
 8007348:	4c70      	ldr	r4, [pc, #448]	@ (800750c <BSP_SDRAM_Init+0x1dc>)
  __HAL_RCC_FMC_CLK_ENABLE();
 800734a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
  __HAL_LINKDMA(hsdram, hmdma, mdma_handle);
 800734e:	4e70      	ldr	r6, [pc, #448]	@ (8007510 <BSP_SDRAM_Init+0x1e0>)
  __HAL_RCC_FMC_CLK_ENABLE();
 8007350:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
 8007354:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 8007358:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 800735c:	9201      	str	r2, [sp, #4]
 800735e:	9a01      	ldr	r2, [sp, #4]
  SDRAM_MDMAx_CLK_ENABLE();
 8007360:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 8007364:	f042 0201 	orr.w	r2, r2, #1
 8007368:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
 800736c:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 8007370:	f002 0201 	and.w	r2, r2, #1
 8007374:	9202      	str	r2, [sp, #8]
 8007376:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8007378:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800737c:	f042 0208 	orr.w	r2, r2, #8
 8007380:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8007384:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8007388:	f002 0208 	and.w	r2, r2, #8
 800738c:	9203      	str	r2, [sp, #12]
 800738e:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8007390:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8007394:	f042 0210 	orr.w	r2, r2, #16
 8007398:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 800739c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80073a0:	f002 0210 	and.w	r2, r2, #16
 80073a4:	9204      	str	r2, [sp, #16]
 80073a6:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80073a8:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80073ac:	f042 0220 	orr.w	r2, r2, #32
 80073b0:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 80073b4:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80073b8:	f002 0220 	and.w	r2, r2, #32
 80073bc:	9205      	str	r2, [sp, #20]
 80073be:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80073c0:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80073c4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80073c8:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 80073cc:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80073d0:	f002 0240 	and.w	r2, r2, #64	@ 0x40
 80073d4:	9206      	str	r2, [sp, #24]
 80073d6:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80073d8:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80073dc:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80073e0:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 80073e4:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80073e8:	f002 0280 	and.w	r2, r2, #128	@ 0x80
 80073ec:	9207      	str	r2, [sp, #28]
 80073ee:	9a07      	ldr	r2, [sp, #28]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80073f0:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80073f4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80073f8:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
  gpio_init_structure.Pull      = GPIO_PULLUP;
 80073fc:	2202      	movs	r2, #2
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80073fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007402:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007406:	9308      	str	r3, [sp, #32]
 8007408:	9b08      	ldr	r3, [sp, #32]
  gpio_init_structure.Pull      = GPIO_PULLUP;
 800740a:	2301      	movs	r3, #1
 800740c:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 8007410:	230c      	movs	r3, #12
 8007412:	e9cd 730c 	strd	r7, r3, [sp, #48]	@ 0x30
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8| GPIO_PIN_9 | GPIO_PIN_10 |\
 8007416:	f24c 7303 	movw	r3, #50947	@ 0xc703
 800741a:	9309      	str	r3, [sp, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 800741c:	f001 f8a4 	bl	8008568 <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 8007420:	f64f 7383 	movw	r3, #65411	@ 0xff83
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8007424:	a909      	add	r1, sp, #36	@ 0x24
 8007426:	483b      	ldr	r0, [pc, #236]	@ (8007514 <BSP_SDRAM_Init+0x1e4>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 8007428:	9309      	str	r3, [sp, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 800742a:	f001 f89d 	bl	8008568 <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 800742e:	f64f 033f 	movw	r3, #63551	@ 0xf83f
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 8007432:	a909      	add	r1, sp, #36	@ 0x24
 8007434:	4838      	ldr	r0, [pc, #224]	@ (8007518 <BSP_SDRAM_Init+0x1e8>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 8007436:	9309      	str	r3, [sp, #36]	@ 0x24
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 8007438:	f001 f896 	bl	8008568 <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 /*| GPIO_PIN_3 */|\
 800743c:	f248 1337 	movw	r3, #33079	@ 0x8137
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8007440:	a909      	add	r1, sp, #36	@ 0x24
 8007442:	4836      	ldr	r0, [pc, #216]	@ (800751c <BSP_SDRAM_Init+0x1ec>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 /*| GPIO_PIN_3 */|\
 8007444:	9309      	str	r3, [sp, #36]	@ 0x24
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8007446:	f001 f88f 	bl	8008568 <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9 |\
 800744a:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
  HAL_GPIO_Init(GPIOH, &gpio_init_structure);
 800744e:	a909      	add	r1, sp, #36	@ 0x24
 8007450:	4833      	ldr	r0, [pc, #204]	@ (8007520 <BSP_SDRAM_Init+0x1f0>)
  gpio_init_structure.Pin   = GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9 |\
 8007452:	9309      	str	r3, [sp, #36]	@ 0x24
  HAL_GPIO_Init(GPIOH, &gpio_init_structure);
 8007454:	f001 f888 	bl	8008568 <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 |\
 8007458:	f240 63ff 	movw	r3, #1791	@ 0x6ff
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 800745c:	a909      	add	r1, sp, #36	@ 0x24
 800745e:	4831      	ldr	r0, [pc, #196]	@ (8007524 <BSP_SDRAM_Init+0x1f4>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 |\
 8007460:	9309      	str	r3, [sp, #36]	@ 0x24
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 8007462:	f001 f881 	bl	8008568 <HAL_GPIO_Init>
  mdma_handle.Init.TransferTriggerMode      = MDMA_BLOCK_TRANSFER;
 8007466:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 800746a:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
  mdma_handle.Init.DestinationInc           = MDMA_DEST_INC_WORD;
 800746e:	f240 2002 	movw	r0, #514	@ 0x202
 8007472:	f640 0208 	movw	r2, #2056	@ 0x808
  __HAL_LINKDMA(hsdram, hmdma, mdma_handle);
 8007476:	6334      	str	r4, [r6, #48]	@ 0x30
 8007478:	6426      	str	r6, [r4, #64]	@ 0x40
  mdma_handle.Init.TransferTriggerMode      = MDMA_BLOCK_TRANSFER;
 800747a:	e9c4 1301 	strd	r1, r3, [r4, #4]
  mdma_handle.Init.DestinationInc           = MDMA_DEST_INC_WORD;
 800747e:	e9c4 0205 	strd	r0, r2, [r4, #20]
  mdma_handle.Init.Priority                 = MDMA_PRIORITY_HIGH;
 8007482:	2380      	movs	r3, #128	@ 0x80
  mdma_handle.Init.SourceDataSize           = MDMA_SRC_DATASIZE_WORD;
 8007484:	2220      	movs	r2, #32
  (void)HAL_MDMA_DeInit(&mdma_handle);
 8007486:	4620      	mov	r0, r4
  mdma_handle.Init.BufferTransferLength     = 128;
 8007488:	62a3      	str	r3, [r4, #40]	@ 0x28
  mdma_handle.Init.DestDataSize             = MDMA_DEST_DATASIZE_WORD;
 800748a:	e9c4 2307 	strd	r2, r3, [r4, #28]
  mdma_handle.Init.Endianness               = MDMA_LITTLE_ENDIANNESS_PRESERVE;
 800748e:	e9c4 3503 	strd	r3, r5, [r4, #12]
  mdma_handle.Init.DataAlignment            = MDMA_DATAALIGN_PACKENABLE;
 8007492:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
  mdma_handle.Instance                      = SDRAM_MDMAx_CHANNEL;
 8007496:	4b24      	ldr	r3, [pc, #144]	@ (8007528 <BSP_SDRAM_Init+0x1f8>)
  mdma_handle.Init.DataAlignment            = MDMA_DATAALIGN_PACKENABLE;
 8007498:	6262      	str	r2, [r4, #36]	@ 0x24
  mdma_handle.Instance                      = SDRAM_MDMAx_CHANNEL;
 800749a:	6023      	str	r3, [r4, #0]
  mdma_handle.Init.DestBurst                = MDMA_DEST_BURST_SINGLE;
 800749c:	e9c4 550b 	strd	r5, r5, [r4, #44]	@ 0x2c
  mdma_handle.Init.DestBlockAddressOffset   = 0;
 80074a0:	e9c4 550d 	strd	r5, r5, [r4, #52]	@ 0x34
  (void)HAL_MDMA_DeInit(&mdma_handle);
 80074a4:	f002 ff30 	bl	800a308 <HAL_MDMA_DeInit>
  (void)HAL_MDMA_Init(&mdma_handle);
 80074a8:	4620      	mov	r0, r4
 80074aa:	f002 febe 	bl	800a22a <HAL_MDMA_Init>
  HAL_NVIC_SetPriority(SDRAM_MDMAx_IRQn, BSP_SDRAM_IT_PRIORITY, 0);
 80074ae:	462a      	mov	r2, r5
 80074b0:	210f      	movs	r1, #15
 80074b2:	207a      	movs	r0, #122	@ 0x7a
 80074b4:	f000 fa02 	bl	80078bc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_MDMAx_IRQn);
 80074b8:	207a      	movs	r0, #122	@ 0x7a
 80074ba:	f000 fa31 	bl	8007920 <HAL_NVIC_EnableIRQ>
    if(MX_SDRAM_Init(&hsdram[0]) != HAL_OK)
 80074be:	4630      	mov	r0, r6
 80074c0:	f7ff ff06 	bl	80072d0 <MX_SDRAM_Init>
 80074c4:	b9d0      	cbnz	r0, 80074fc <BSP_SDRAM_Init+0x1cc>
      pRegMode.TargetBank      = FMC_SDRAM_CMD_TARGET_BANK2;
 80074c6:	4919      	ldr	r1, [pc, #100]	@ (800752c <BSP_SDRAM_Init+0x1fc>)
 80074c8:	2308      	movs	r3, #8
      pRegMode.RefreshMode     = IS42S32800J_AUTOREFRESH_MODE_CMD;
 80074ca:	e9c1 3700 	strd	r3, r7, [r1]
      pRegMode.RefreshRate     = REFRESH_COUNT;
 80074ce:	f240 6303 	movw	r3, #1539	@ 0x603
      pRegMode.BurstType       = IS42S32800J_BURST_TYPE_SEQUENTIAL;
 80074d2:	6108      	str	r0, [r1, #16]
      pRegMode.BurstLength     = IS42S32800J_BURST_LENGTH_1;
 80074d4:	e9c1 3002 	strd	r3, r0, [r1, #8]
      pRegMode.CASLatency      = IS42S32800J_CAS_LATENCY_3;
 80074d8:	2330      	movs	r3, #48	@ 0x30
      pRegMode.OperationMode   = IS42S32800J_OPERATING_MODE_STANDARD;
 80074da:	e9c1 3005 	strd	r3, r0, [r1, #20]
      pRegMode.WriteBurstMode  = IS42S32800J_WRITEBURST_MODE_SINGLE;
 80074de:	f44f 7300 	mov.w	r3, #512	@ 0x200
      if(IS42S32800J_Init(&hsdram[0], &pRegMode) != IS42S32800J_OK)
 80074e2:	4630      	mov	r0, r6
      pRegMode.WriteBurstMode  = IS42S32800J_WRITEBURST_MODE_SINGLE;
 80074e4:	61cb      	str	r3, [r1, #28]
      if(IS42S32800J_Init(&hsdram[0], &pRegMode) != IS42S32800J_OK)
 80074e6:	f7fe fd31 	bl	8005f4c <IS42S32800J_Init>
        ret =  BSP_ERROR_COMPONENT_FAILURE;
 80074ea:	2800      	cmp	r0, #0
 80074ec:	bf18      	it	ne
 80074ee:	f06f 0004 	mvnne.w	r0, #4
}
 80074f2:	b00f      	add	sp, #60	@ 0x3c
 80074f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ret =  BSP_ERROR_WRONG_PARAM;
 80074f6:	f06f 0001 	mvn.w	r0, #1
 80074fa:	e7fa      	b.n	80074f2 <BSP_SDRAM_Init+0x1c2>
      ret = BSP_ERROR_NO_INIT;
 80074fc:	f04f 30ff 	mov.w	r0, #4294967295
  return ret;
 8007500:	e7f7      	b.n	80074f2 <BSP_SDRAM_Init+0x1c2>
 8007502:	bf00      	nop
 8007504:	58024400 	.word	0x58024400
 8007508:	58020c00 	.word	0x58020c00
 800750c:	2400f904 	.word	0x2400f904
 8007510:	2400f990 	.word	0x2400f990
 8007514:	58021000 	.word	0x58021000
 8007518:	58021400 	.word	0x58021400
 800751c:	58021800 	.word	0x58021800
 8007520:	58021c00 	.word	0x58021c00
 8007524:	58022000 	.word	0x58022000
 8007528:	52000040 	.word	0x52000040
 800752c:	2400f970 	.word	0x2400f970

08007530 <BSP_TS_Init>:
  * @param  Instance TS instance. Could be only 0.
  * @param  TS_Init  TS Init structure
  * @retval BSP status
  */
int32_t BSP_TS_Init(uint32_t Instance, TS_Init_t *TS_Init)
{
 8007530:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007534:	460c      	mov	r4, r1
 8007536:	b08c      	sub	sp, #48	@ 0x30
  int32_t ret = BSP_ERROR_NONE;

  if((Instance >=TS_INSTANCES_NBR) || (TS_Init->Width == 0U) ||( TS_Init->Width > TS_MAX_WIDTH) ||\
 8007538:	4606      	mov	r6, r0
 800753a:	2800      	cmp	r0, #0
 800753c:	d15c      	bne.n	80075f8 <BSP_TS_Init+0xc8>
 800753e:	680b      	ldr	r3, [r1, #0]
 8007540:	1e5a      	subs	r2, r3, #1
 8007542:	f5b2 7f48 	cmp.w	r2, #800	@ 0x320
 8007546:	d257      	bcs.n	80075f8 <BSP_TS_Init+0xc8>
                         (TS_Init->Height == 0U) ||( TS_Init->Height > TS_MAX_HEIGHT) ||\
 8007548:	684a      	ldr	r2, [r1, #4]
  if((Instance >=TS_INSTANCES_NBR) || (TS_Init->Width == 0U) ||( TS_Init->Width > TS_MAX_WIDTH) ||\
 800754a:	1e51      	subs	r1, r2, #1
 800754c:	f5b1 7ff0 	cmp.w	r1, #480	@ 0x1e0
 8007550:	d252      	bcs.n	80075f8 <BSP_TS_Init+0xc8>
                         (TS_Init->Accuracy > TS_MIN((TS_Init->Width), (TS_Init->Height))))
 8007552:	4293      	cmp	r3, r2
 8007554:	bf28      	it	cs
 8007556:	4613      	movcs	r3, r2
                         (TS_Init->Height == 0U) ||( TS_Init->Height > TS_MAX_HEIGHT) ||\
 8007558:	68e2      	ldr	r2, [r4, #12]
 800755a:	429a      	cmp	r2, r3
 800755c:	d84c      	bhi.n	80075f8 <BSP_TS_Init+0xc8>
  int32_t ret;
  FT6X06_IO_t              IOCtx;
  static FT6X06_Object_t   FT6X06Obj;
  FT6X06_Capabilities_t    Cap;
  uint32_t id, i;
  uint32_t const i2c_address[] = {TS_I2C_ADDRESS, TS_I2C_ADDRESS_A02};
 800755e:	2370      	movs	r3, #112	@ 0x70
 8007560:	2254      	movs	r2, #84	@ 0x54
 8007562:	f10d 0904 	add.w	r9, sp, #4

  for(i = 0; i < 2UL; i++)
  {
    IOCtx.Address     = (uint16_t)i2c_address[i];

    if(FT6X06_RegisterBusIO (&FT6X06Obj, &IOCtx) != FT6X06_OK)
 8007566:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800763c <BSP_TS_Init+0x10c>
  uint32_t const i2c_address[] = {TS_I2C_ADDRESS, TS_I2C_ADDRESS_A02};
 800756a:	e9cd 2301 	strd	r2, r3, [sp, #4]
  IOCtx.Init        = BSP_I2C4_Init;
 800756e:	4b2e      	ldr	r3, [pc, #184]	@ (8007628 <BSP_TS_Init+0xf8>)
 8007570:	9306      	str	r3, [sp, #24]
  IOCtx.DeInit      = BSP_I2C4_DeInit;
 8007572:	4b2e      	ldr	r3, [pc, #184]	@ (800762c <BSP_TS_Init+0xfc>)
 8007574:	9307      	str	r3, [sp, #28]
  IOCtx.ReadReg     = BSP_I2C4_ReadReg;
 8007576:	4b2e      	ldr	r3, [pc, #184]	@ (8007630 <BSP_TS_Init+0x100>)
 8007578:	930a      	str	r3, [sp, #40]	@ 0x28
  IOCtx.WriteReg    = BSP_I2C4_WriteReg;
 800757a:	4b2e      	ldr	r3, [pc, #184]	@ (8007634 <BSP_TS_Init+0x104>)
 800757c:	9309      	str	r3, [sp, #36]	@ 0x24
  IOCtx.GetTick     = BSP_GetTick;
 800757e:	4b2e      	ldr	r3, [pc, #184]	@ (8007638 <BSP_TS_Init+0x108>)
 8007580:	930b      	str	r3, [sp, #44]	@ 0x2c
    IOCtx.Address     = (uint16_t)i2c_address[i];
 8007582:	f859 3b04 	ldr.w	r3, [r9], #4
    if(FT6X06_RegisterBusIO (&FT6X06Obj, &IOCtx) != FT6X06_OK)
 8007586:	a906      	add	r1, sp, #24
 8007588:	482c      	ldr	r0, [pc, #176]	@ (800763c <BSP_TS_Init+0x10c>)
    IOCtx.Address     = (uint16_t)i2c_address[i];
 800758a:	f8ad 3020 	strh.w	r3, [sp, #32]
    if(FT6X06_RegisterBusIO (&FT6X06Obj, &IOCtx) != FT6X06_OK)
 800758e:	f7fe fbe3 	bl	8005d58 <FT6X06_RegisterBusIO>
 8007592:	b9c0      	cbnz	r0, 80075c6 <BSP_TS_Init+0x96>
    {
      ret = BSP_ERROR_BUS_FAILURE;
    }
    else if(FT6X06_ReadID(&FT6X06Obj, &id) != FT6X06_OK)
 8007594:	4669      	mov	r1, sp
 8007596:	4829      	ldr	r0, [pc, #164]	@ (800763c <BSP_TS_Init+0x10c>)
 8007598:	f7fe fb27 	bl	8005bea <FT6X06_ReadID>
 800759c:	b998      	cbnz	r0, 80075c6 <BSP_TS_Init+0x96>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
    }
    else if(id != FT6X06_ID)
 800759e:	9b00      	ldr	r3, [sp, #0]
 80075a0:	2b11      	cmp	r3, #17
 80075a2:	d110      	bne.n	80075c6 <BSP_TS_Init+0x96>
      ret = BSP_ERROR_UNKNOWN_COMPONENT;
    }
    else
    {

      (void)FT6X06_GetCapabilities(&FT6X06Obj, &Cap);
 80075a4:	a903      	add	r1, sp, #12
 80075a6:	4825      	ldr	r0, [pc, #148]	@ (800763c <BSP_TS_Init+0x10c>)
 80075a8:	f7fe fad3 	bl	8005b52 <FT6X06_GetCapabilities>
      Ts_CompObj[Instance] = &FT6X06Obj;
 80075ac:	4f24      	ldr	r7, [pc, #144]	@ (8007640 <BSP_TS_Init+0x110>)
      Ts_Drv = (TS_Drv_t *) &FT6X06_TS_Driver;
 80075ae:	4b25      	ldr	r3, [pc, #148]	@ (8007644 <BSP_TS_Init+0x114>)
 80075b0:	f8df 8098 	ldr.w	r8, [pc, #152]	@ 800764c <BSP_TS_Init+0x11c>

      if(Ts_Drv->Init(Ts_CompObj[Instance]) != FT6X06_OK)
 80075b4:	4821      	ldr	r0, [pc, #132]	@ (800763c <BSP_TS_Init+0x10c>)
      Ts_Drv = (TS_Drv_t *) &FT6X06_TS_Driver;
 80075b6:	f8c8 3000 	str.w	r3, [r8]
      Ts_CompObj[Instance] = &FT6X06Obj;
 80075ba:	f8c7 a000 	str.w	sl, [r7]
      if(Ts_Drv->Init(Ts_CompObj[Instance]) != FT6X06_OK)
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	4798      	blx	r3
 80075c2:	4605      	mov	r5, r0
 80075c4:	b1d8      	cbz	r0, 80075fe <BSP_TS_Init+0xce>
  for(i = 0; i < 2UL; i++)
 80075c6:	b116      	cbz	r6, 80075ce <BSP_TS_Init+0x9e>
      ret = BSP_ERROR_NO_INIT;
 80075c8:	f04f 35ff 	mov.w	r5, #4294967295
 80075cc:	e010      	b.n	80075f0 <BSP_TS_Init+0xc0>
  for(i = 0; i < 2UL; i++)
 80075ce:	2601      	movs	r6, #1
 80075d0:	e7d7      	b.n	8007582 <BSP_TS_Init+0x52>
        Ts_Ctx[Instance].MaxX = Capabilities.MaxXl;
 80075d2:	9b07      	ldr	r3, [sp, #28]
          Ts_Ctx[Instance].PreviousX[i] = TS_Init->Width + TS_Init->Accuracy + 1U;
 80075d4:	6822      	ldr	r2, [r4, #0]
        Ts_Ctx[Instance].MaxX = Capabilities.MaxXl;
 80075d6:	6133      	str	r3, [r6, #16]
        Ts_Ctx[Instance].MaxY = Capabilities.MaxYl;
 80075d8:	9b08      	ldr	r3, [sp, #32]
          Ts_Ctx[Instance].PreviousY[i] = TS_Init->Height + TS_Init->Accuracy + 1U;
 80075da:	6861      	ldr	r1, [r4, #4]
        Ts_Ctx[Instance].MaxY = Capabilities.MaxYl;
 80075dc:	6173      	str	r3, [r6, #20]
          Ts_Ctx[Instance].PreviousX[i] = TS_Init->Width + TS_Init->Accuracy + 1U;
 80075de:	68e3      	ldr	r3, [r4, #12]
 80075e0:	441a      	add	r2, r3
          Ts_Ctx[Instance].PreviousY[i] = TS_Init->Height + TS_Init->Accuracy + 1U;
 80075e2:	440b      	add	r3, r1
          Ts_Ctx[Instance].PreviousX[i] = TS_Init->Width + TS_Init->Accuracy + 1U;
 80075e4:	3201      	adds	r2, #1
          Ts_Ctx[Instance].PreviousY[i] = TS_Init->Height + TS_Init->Accuracy + 1U;
 80075e6:	3301      	adds	r3, #1
          Ts_Ctx[Instance].PreviousX[i] = TS_Init->Width + TS_Init->Accuracy + 1U;
 80075e8:	61b2      	str	r2, [r6, #24]
          Ts_Ctx[Instance].PreviousY[i] = TS_Init->Height + TS_Init->Accuracy + 1U;
 80075ea:	6273      	str	r3, [r6, #36]	@ 0x24
          Ts_Ctx[Instance].PreviousX[i] = TS_Init->Width + TS_Init->Accuracy + 1U;
 80075ec:	e9c6 2307 	strd	r2, r3, [r6, #28]
}
 80075f0:	4628      	mov	r0, r5
 80075f2:	b00c      	add	sp, #48	@ 0x30
 80075f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    ret = BSP_ERROR_WRONG_PARAM;
 80075f8:	f06f 0501 	mvn.w	r5, #1
  return ret;
 80075fc:	e7f8      	b.n	80075f0 <BSP_TS_Init+0xc0>
      Ts_Ctx[Instance].Width             = TS_Init->Width;
 80075fe:	6823      	ldr	r3, [r4, #0]
      if (Ts_Drv->GetCapabilities(Ts_CompObj[Instance], &Capabilities) < 0)
 8007600:	a906      	add	r1, sp, #24
      Ts_Ctx[Instance].Width             = TS_Init->Width;
 8007602:	4e11      	ldr	r6, [pc, #68]	@ (8007648 <BSP_TS_Init+0x118>)
      if (Ts_Drv->GetCapabilities(Ts_CompObj[Instance], &Capabilities) < 0)
 8007604:	6838      	ldr	r0, [r7, #0]
      Ts_Ctx[Instance].Width             = TS_Init->Width;
 8007606:	6033      	str	r3, [r6, #0]
      Ts_Ctx[Instance].Height            = TS_Init->Height;
 8007608:	6863      	ldr	r3, [r4, #4]
 800760a:	6073      	str	r3, [r6, #4]
      Ts_Ctx[Instance].Orientation       = TS_Init->Orientation;
 800760c:	68a3      	ldr	r3, [r4, #8]
 800760e:	60b3      	str	r3, [r6, #8]
      Ts_Ctx[Instance].Accuracy          = TS_Init->Accuracy;
 8007610:	68e3      	ldr	r3, [r4, #12]
 8007612:	60f3      	str	r3, [r6, #12]
      if (Ts_Drv->GetCapabilities(Ts_CompObj[Instance], &Capabilities) < 0)
 8007614:	f8d8 3000 	ldr.w	r3, [r8]
 8007618:	69db      	ldr	r3, [r3, #28]
 800761a:	4798      	blx	r3
 800761c:	2800      	cmp	r0, #0
 800761e:	dad8      	bge.n	80075d2 <BSP_TS_Init+0xa2>
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8007620:	f06f 0504 	mvn.w	r5, #4
 8007624:	e7e4      	b.n	80075f0 <BSP_TS_Init+0xc0>
 8007626:	bf00      	nop
 8007628:	08006b39 	.word	0x08006b39
 800762c:	08006aa5 	.word	0x08006aa5
 8007630:	08006e15 	.word	0x08006e15
 8007634:	08006de1 	.word	0x08006de1
 8007638:	08006e49 	.word	0x08006e49
 800763c:	2400f9c4 	.word	0x2400f9c4
 8007640:	2400f9ec 	.word	0x2400f9ec
 8007644:	24000038 	.word	0x24000038
 8007648:	2400f9f0 	.word	0x2400f9f0
 800764c:	2400fa18 	.word	0x2400fa18

08007650 <BSP_TS_GetState>:
{
 8007650:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007652:	460c      	mov	r4, r1
 8007654:	b085      	sub	sp, #20
  if(Instance >= TS_INSTANCES_NBR)
 8007656:	2800      	cmp	r0, #0
 8007658:	d14d      	bne.n	80076f6 <BSP_TS_GetState+0xa6>
    if(Ts_Drv->GetState(Ts_CompObj[Instance], &state) < 0)
 800765a:	4b28      	ldr	r3, [pc, #160]	@ (80076fc <BSP_TS_GetState+0xac>)
 800765c:	a901      	add	r1, sp, #4
 800765e:	4a28      	ldr	r2, [pc, #160]	@ (8007700 <BSP_TS_GetState+0xb0>)
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	6810      	ldr	r0, [r2, #0]
 8007664:	691b      	ldr	r3, [r3, #16]
 8007666:	4798      	blx	r3
 8007668:	2800      	cmp	r0, #0
 800766a:	db41      	blt.n	80076f0 <BSP_TS_GetState+0xa0>
      x_diff = (TS_State->TouchX > Ts_Ctx[Instance].PreviousX[0])?
 800766c:	4925      	ldr	r1, [pc, #148]	@ (8007704 <BSP_TS_GetState+0xb4>)
    else if(state.TouchDetected != 0U)
 800766e:	9e01      	ldr	r6, [sp, #4]
      x_diff = (TS_State->TouchX > Ts_Ctx[Instance].PreviousX[0])?
 8007670:	698d      	ldr	r5, [r1, #24]
      y_diff = (TS_State->TouchY > Ts_Ctx[Instance].PreviousY[0])?
 8007672:	6a08      	ldr	r0, [r1, #32]
    else if(state.TouchDetected != 0U)
 8007674:	2e00      	cmp	r6, #0
 8007676:	d037      	beq.n	80076e8 <BSP_TS_GetState+0x98>
      if((Ts_Ctx[Instance].Orientation & TS_SWAP_XY) == TS_SWAP_XY)
 8007678:	688f      	ldr	r7, [r1, #8]
        x_oriented = Ts_Ctx[Instance].MaxX - x_oriented - 1UL;
 800767a:	f8d1 e010 	ldr.w	lr, [r1, #16]
      if((Ts_Ctx[Instance].Orientation & TS_SWAP_XY) == TS_SWAP_XY)
 800767e:	f017 0f08 	tst.w	r7, #8
      y_oriented = state.TouchY;
 8007682:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
      if((Ts_Ctx[Instance].Orientation & TS_SWAP_XY) == TS_SWAP_XY)
 8007686:	bf1e      	ittt	ne
 8007688:	4694      	movne	ip, r2
        x_oriented = state.TouchY;
 800768a:	461a      	movne	r2, r3
        y_oriented = state.TouchX;
 800768c:	4663      	movne	r3, ip
      if((Ts_Ctx[Instance].Orientation & TS_SWAP_X) == TS_SWAP_X)
 800768e:	f017 0f02 	tst.w	r7, #2
        x_oriented = Ts_Ctx[Instance].MaxX - x_oriented - 1UL;
 8007692:	bf1c      	itt	ne
 8007694:	f10e 3cff 	addne.w	ip, lr, #4294967295
 8007698:	ebac 0202 	subne.w	r2, ip, r2
        y_oriented = Ts_Ctx[Instance].MaxY - y_oriented - 1UL;
 800769c:	f8d1 c014 	ldr.w	ip, [r1, #20]
      if((Ts_Ctx[Instance].Orientation & TS_SWAP_Y) == TS_SWAP_Y)
 80076a0:	077f      	lsls	r7, r7, #29
        y_oriented = Ts_Ctx[Instance].MaxY - y_oriented - 1UL;
 80076a2:	bf44      	itt	mi
 80076a4:	f10c 37ff 	addmi.w	r7, ip, #4294967295
 80076a8:	1afb      	submi	r3, r7, r3
      TS_State->TouchX = (x_oriented * Ts_Ctx[Instance].Width) / Ts_Ctx[Instance].MaxX;
 80076aa:	680f      	ldr	r7, [r1, #0]
 80076ac:	437a      	muls	r2, r7
      TS_State->TouchY = (y_oriented * Ts_Ctx[Instance].Height) / Ts_Ctx[Instance].MaxY;
 80076ae:	684f      	ldr	r7, [r1, #4]
      TS_State->TouchDetected = state.TouchDetected;
 80076b0:	6026      	str	r6, [r4, #0]
      TS_State->TouchY = (y_oriented * Ts_Ctx[Instance].Height) / Ts_Ctx[Instance].MaxY;
 80076b2:	437b      	muls	r3, r7
      if ((x_diff > Ts_Ctx[Instance].Accuracy) || (y_diff > Ts_Ctx[Instance].Accuracy))
 80076b4:	68cf      	ldr	r7, [r1, #12]
      TS_State->TouchX = (x_oriented * Ts_Ctx[Instance].Width) / Ts_Ctx[Instance].MaxX;
 80076b6:	fbb2 f2fe 	udiv	r2, r2, lr
      TS_State->TouchY = (y_oriented * Ts_Ctx[Instance].Height) / Ts_Ctx[Instance].MaxY;
 80076ba:	fbb3 f3fc 	udiv	r3, r3, ip
               (TS_State->TouchX - Ts_Ctx[Instance].PreviousX[0]):
 80076be:	42aa      	cmp	r2, r5
      TS_State->TouchX = (x_oriented * Ts_Ctx[Instance].Width) / Ts_Ctx[Instance].MaxX;
 80076c0:	6062      	str	r2, [r4, #4]
      TS_State->TouchY = (y_oriented * Ts_Ctx[Instance].Height) / Ts_Ctx[Instance].MaxY;
 80076c2:	60a3      	str	r3, [r4, #8]
               (TS_State->TouchX - Ts_Ctx[Instance].PreviousX[0]):
 80076c4:	bf8c      	ite	hi
 80076c6:	eba2 0c05 	subhi.w	ip, r2, r5
 80076ca:	eba5 0c02 	subls.w	ip, r5, r2
               (TS_State->TouchY - Ts_Ctx[Instance].PreviousY[0]):
 80076ce:	4283      	cmp	r3, r0
 80076d0:	bf8c      	ite	hi
 80076d2:	1a1e      	subhi	r6, r3, r0
 80076d4:	1ac6      	subls	r6, r0, r3
      if ((x_diff > Ts_Ctx[Instance].Accuracy) || (y_diff > Ts_Ctx[Instance].Accuracy))
 80076d6:	4567      	cmp	r7, ip
 80076d8:	d301      	bcc.n	80076de <BSP_TS_GetState+0x8e>
 80076da:	42b7      	cmp	r7, r6
 80076dc:	d205      	bcs.n	80076ea <BSP_TS_GetState+0x9a>
        Ts_Ctx[Instance].PreviousX[0] = TS_State->TouchX;
 80076de:	618a      	str	r2, [r1, #24]
        Ts_Ctx[Instance].PreviousY[0] = TS_State->TouchY;
 80076e0:	620b      	str	r3, [r1, #32]
  int32_t ret = BSP_ERROR_NONE;
 80076e2:	2000      	movs	r0, #0
}
 80076e4:	b005      	add	sp, #20
 80076e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
      TS_State->TouchDetected = 0U;
 80076e8:	6026      	str	r6, [r4, #0]
      TS_State->TouchY = Ts_Ctx[Instance].PreviousY[0];
 80076ea:	e9c4 5001 	strd	r5, r0, [r4, #4]
 80076ee:	e7f8      	b.n	80076e2 <BSP_TS_GetState+0x92>
      ret = BSP_ERROR_COMPONENT_FAILURE;
 80076f0:	f06f 0004 	mvn.w	r0, #4
 80076f4:	e7f6      	b.n	80076e4 <BSP_TS_GetState+0x94>
    ret = BSP_ERROR_WRONG_PARAM;
 80076f6:	f06f 0001 	mvn.w	r0, #1
  return ret;
 80076fa:	e7f3      	b.n	80076e4 <BSP_TS_GetState+0x94>
 80076fc:	2400fa18 	.word	0x2400fa18
 8007700:	2400f9ec 	.word	0x2400f9ec
 8007704:	2400f9f0 	.word	0x2400f9f0

08007708 <SystemInit>:
  */
void SystemInit (void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8007708:	4b2d      	ldr	r3, [pc, #180]	@ (80077c0 <SystemInit+0xb8>)
 800770a:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800770e:	f442 0270 	orr.w	r2, r2, #15728640	@ 0xf00000
 8007712:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8007716:	691a      	ldr	r2, [r3, #16]
 8007718:	f042 0210 	orr.w	r2, r2, #16
 800771c:	611a      	str	r2, [r3, #16]

#ifdef CORE_CM7
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800771e:	4a29      	ldr	r2, [pc, #164]	@ (80077c4 <SystemInit+0xbc>)
 8007720:	6813      	ldr	r3, [r2, #0]
 8007722:	f003 030f 	and.w	r3, r3, #15
 8007726:	2b06      	cmp	r3, #6
 8007728:	d805      	bhi.n	8007736 <SystemInit+0x2e>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800772a:	6813      	ldr	r3, [r2, #0]
 800772c:	f023 030f 	bic.w	r3, r3, #15
 8007730:	f043 0307 	orr.w	r3, r3, #7
 8007734:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8007736:	4b24      	ldr	r3, [pc, #144]	@ (80077c8 <SystemInit+0xc0>)
 8007738:	681a      	ldr	r2, [r3, #0]
 800773a:	f042 0201 	orr.w	r2, r2, #1
 800773e:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8007740:	2200      	movs	r2, #0
 8007742:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, RC48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8007744:	4a21      	ldr	r2, [pc, #132]	@ (80077cc <SystemInit+0xc4>)
 8007746:	6819      	ldr	r1, [r3, #0]
 8007748:	400a      	ands	r2, r1

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800774a:	491e      	ldr	r1, [pc, #120]	@ (80077c4 <SystemInit+0xbc>)
  RCC->CR &= 0xEAF6ED7FU;
 800774c:	601a      	str	r2, [r3, #0]
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800774e:	680a      	ldr	r2, [r1, #0]
 8007750:	0712      	lsls	r2, r2, #28
 8007752:	d505      	bpl.n	8007760 <SystemInit+0x58>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8007754:	680a      	ldr	r2, [r1, #0]
 8007756:	f022 020f 	bic.w	r2, r2, #15
 800775a:	f042 0207 	orr.w	r2, r2, #7
 800775e:	600a      	str	r2, [r1, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8007760:	2200      	movs	r2, #0

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8007762:	491b      	ldr	r1, [pc, #108]	@ (80077d0 <SystemInit+0xc8>)
  RCC->D1CFGR = 0x00000000;
 8007764:	619a      	str	r2, [r3, #24]
  RCC->D2CFGR = 0x00000000;
 8007766:	61da      	str	r2, [r3, #28]
  RCC->D3CFGR = 0x00000000;
 8007768:	621a      	str	r2, [r3, #32]
  RCC->PLLCKSELR = 0x02020200;
 800776a:	6299      	str	r1, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800776c:	4919      	ldr	r1, [pc, #100]	@ (80077d4 <SystemInit+0xcc>)
 800776e:	62d9      	str	r1, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8007770:	4919      	ldr	r1, [pc, #100]	@ (80077d8 <SystemInit+0xd0>)
 8007772:	6319      	str	r1, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8007774:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8007776:	6399      	str	r1, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8007778:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800777a:	6419      	str	r1, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800777c:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800777e:	6819      	ldr	r1, [r3, #0]
 8007780:	f421 2180 	bic.w	r1, r1, #262144	@ 0x40000
 8007784:	6019      	str	r1, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8007786:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 8007788:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800778c:	f8d2 30e4 	ldr.w	r3, [r2, #228]	@ 0xe4
 8007790:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8007794:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4


  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8007798:	4b10      	ldr	r3, [pc, #64]	@ (80077dc <SystemInit+0xd4>)
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	0c1b      	lsrs	r3, r3, #16
 800779e:	041b      	lsls	r3, r3, #16
 80077a0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80077a4:	d203      	bcs.n	80077ae <SystemInit+0xa6>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80077a6:	4b0e      	ldr	r3, [pc, #56]	@ (80077e0 <SystemInit+0xd8>)
 80077a8:	2201      	movs	r2, #1
 80077aa:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80077ae:	4b0d      	ldr	r3, [pc, #52]	@ (80077e4 <SystemInit+0xdc>)
 80077b0:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80077b4:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 80077b6:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80077ba:	4b01      	ldr	r3, [pc, #4]	@ (80077c0 <SystemInit+0xb8>)
 80077bc:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 80077be:	4770      	bx	lr
 80077c0:	e000ed00 	.word	0xe000ed00
 80077c4:	52002000 	.word	0x52002000
 80077c8:	58024400 	.word	0x58024400
 80077cc:	eaf6ed7f 	.word	0xeaf6ed7f
 80077d0:	02020200 	.word	0x02020200
 80077d4:	01ff0000 	.word	0x01ff0000
 80077d8:	01010280 	.word	0x01010280
 80077dc:	5c001000 	.word	0x5c001000
 80077e0:	51008000 	.word	0x51008000
 80077e4:	52004000 	.word	0x52004000

080077e8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80077e8:	b510      	push	{r4, lr}
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80077ea:	2003      	movs	r0, #3
 80077ec:	f000 f854 	bl	8007898 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80077f0:	f003 fcde 	bl	800b1b0 <HAL_RCC_GetSysClockFreq>
 80077f4:	490f      	ldr	r1, [pc, #60]	@ (8007834 <HAL_Init+0x4c>)
 80077f6:	4a10      	ldr	r2, [pc, #64]	@ (8007838 <HAL_Init+0x50>)
 80077f8:	698b      	ldr	r3, [r1, #24]
 80077fa:	f3c3 2303 	ubfx	r3, r3, #8, #4
 80077fe:	5cd3      	ldrb	r3, [r2, r3]
 8007800:	f003 031f 	and.w	r3, r3, #31
 8007804:	40d8      	lsrs	r0, r3
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007806:	698b      	ldr	r3, [r1, #24]
 8007808:	f003 030f 	and.w	r3, r3, #15
 800780c:	5cd3      	ldrb	r3, [r2, r3]
 800780e:	4a0b      	ldr	r2, [pc, #44]	@ (800783c <HAL_Init+0x54>)
 8007810:	f003 031f 	and.w	r3, r3, #31
 8007814:	fa20 f303 	lsr.w	r3, r0, r3
 8007818:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800781a:	4b09      	ldr	r3, [pc, #36]	@ (8007840 <HAL_Init+0x58>)
 800781c:	6018      	str	r0, [r3, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800781e:	2000      	movs	r0, #0
 8007820:	f7f9 fea2 	bl	8001568 <HAL_InitTick>
 8007824:	4604      	mov	r4, r0
 8007826:	b918      	cbnz	r0, 8007830 <HAL_Init+0x48>
  {
    return HAL_ERROR;
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8007828:	f7f9 fb8e 	bl	8000f48 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 800782c:	4620      	mov	r0, r4
 800782e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8007830:	2401      	movs	r4, #1
 8007832:	e7fb      	b.n	800782c <HAL_Init+0x44>
 8007834:	58024400 	.word	0x58024400
 8007838:	0802b5e0 	.word	0x0802b5e0
 800783c:	24000068 	.word	0x24000068
 8007840:	2400006c 	.word	0x2400006c

08007844 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8007844:	4a03      	ldr	r2, [pc, #12]	@ (8007854 <HAL_IncTick+0x10>)
 8007846:	4b04      	ldr	r3, [pc, #16]	@ (8007858 <HAL_IncTick+0x14>)
 8007848:	6811      	ldr	r1, [r2, #0]
 800784a:	781b      	ldrb	r3, [r3, #0]
 800784c:	440b      	add	r3, r1
 800784e:	6013      	str	r3, [r2, #0]
}
 8007850:	4770      	bx	lr
 8007852:	bf00      	nop
 8007854:	2400fa1c 	.word	0x2400fa1c
 8007858:	24000070 	.word	0x24000070

0800785c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800785c:	4b01      	ldr	r3, [pc, #4]	@ (8007864 <HAL_GetTick+0x8>)
 800785e:	6818      	ldr	r0, [r3, #0]
}
 8007860:	4770      	bx	lr
 8007862:	bf00      	nop
 8007864:	2400fa1c 	.word	0x2400fa1c

08007868 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8007868:	b538      	push	{r3, r4, r5, lr}
 800786a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800786c:	f7ff fff6 	bl	800785c <HAL_GetTick>
 8007870:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8007872:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8007874:	bf1e      	ittt	ne
 8007876:	4b04      	ldrne	r3, [pc, #16]	@ (8007888 <HAL_Delay+0x20>)
 8007878:	781b      	ldrbne	r3, [r3, #0]
 800787a:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800787c:	f7ff ffee 	bl	800785c <HAL_GetTick>
 8007880:	1b43      	subs	r3, r0, r5
 8007882:	42a3      	cmp	r3, r4
 8007884:	d3fa      	bcc.n	800787c <HAL_Delay+0x14>
  {
  }
}
 8007886:	bd38      	pop	{r3, r4, r5, pc}
 8007888:	24000070 	.word	0x24000070

0800788c <HAL_GetREVID>:
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
   return((DBGMCU->IDCODE) >> 16);
 800788c:	4b01      	ldr	r3, [pc, #4]	@ (8007894 <HAL_GetREVID+0x8>)
 800788e:	6818      	ldr	r0, [r3, #0]
}
 8007890:	0c00      	lsrs	r0, r0, #16
 8007892:	4770      	bx	lr
 8007894:	5c001000 	.word	0x5c001000

08007898 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007898:	4907      	ldr	r1, [pc, #28]	@ (80078b8 <HAL_NVIC_SetPriorityGrouping+0x20>)
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800789a:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800789c:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800789e:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80078a2:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80078a6:	0412      	lsls	r2, r2, #16
 80078a8:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80078aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80078ac:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80078b0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 80078b4:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80078b6:	4770      	bx	lr
 80078b8:	e000ed00 	.word	0xe000ed00

080078bc <HAL_NVIC_SetPriority>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80078bc:	4b16      	ldr	r3, [pc, #88]	@ (8007918 <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80078be:	b530      	push	{r4, r5, lr}
 80078c0:	68dc      	ldr	r4, [r3, #12]
 80078c2:	f3c4 2402 	ubfx	r4, r4, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80078c6:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80078ca:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80078cc:	2b04      	cmp	r3, #4
 80078ce:	bf28      	it	cs
 80078d0:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80078d2:	2d06      	cmp	r5, #6
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80078d4:	f04f 35ff 	mov.w	r5, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80078d8:	bf8c      	ite	hi
 80078da:	3c03      	subhi	r4, #3
 80078dc:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80078de:	fa05 f303 	lsl.w	r3, r5, r3
  if ((int32_t)(IRQn) >= 0)
 80078e2:	2800      	cmp	r0, #0
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80078e4:	fa05 f504 	lsl.w	r5, r5, r4
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80078e8:	ea21 0303 	bic.w	r3, r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80078ec:	ea22 0205 	bic.w	r2, r2, r5
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80078f0:	fa03 f304 	lsl.w	r3, r3, r4
 80078f4:	ea43 0302 	orr.w	r3, r3, r2
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80078f8:	ea4f 1303 	mov.w	r3, r3, lsl #4
 80078fc:	b2db      	uxtb	r3, r3
  if ((int32_t)(IRQn) >= 0)
 80078fe:	db06      	blt.n	800790e <HAL_NVIC_SetPriority+0x52>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007900:	f100 4060 	add.w	r0, r0, #3758096384	@ 0xe0000000
 8007904:	f500 4061 	add.w	r0, r0, #57600	@ 0xe100
 8007908:	f880 3300 	strb.w	r3, [r0, #768]	@ 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 800790c:	bd30      	pop	{r4, r5, pc}
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800790e:	f000 000f 	and.w	r0, r0, #15
 8007912:	4a02      	ldr	r2, [pc, #8]	@ (800791c <HAL_NVIC_SetPriority+0x60>)
 8007914:	5413      	strb	r3, [r2, r0]
 8007916:	e7f9      	b.n	800790c <HAL_NVIC_SetPriority+0x50>
 8007918:	e000ed00 	.word	0xe000ed00
 800791c:	e000ed14 	.word	0xe000ed14

08007920 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8007920:	2800      	cmp	r0, #0
 8007922:	db07      	blt.n	8007934 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007924:	2301      	movs	r3, #1
 8007926:	0941      	lsrs	r1, r0, #5
 8007928:	f000 001f 	and.w	r0, r0, #31
 800792c:	4a02      	ldr	r2, [pc, #8]	@ (8007938 <HAL_NVIC_EnableIRQ+0x18>)
 800792e:	4083      	lsls	r3, r0
 8007930:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8007934:	4770      	bx	lr
 8007936:	bf00      	nop
 8007938:	e000e100 	.word	0xe000e100

0800793c <HAL_NVIC_DisableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 800793c:	2800      	cmp	r0, #0
 800793e:	db0c      	blt.n	800795a <HAL_NVIC_DisableIRQ+0x1e>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007940:	0943      	lsrs	r3, r0, #5
 8007942:	2201      	movs	r2, #1
 8007944:	f000 001f 	and.w	r0, r0, #31
 8007948:	4904      	ldr	r1, [pc, #16]	@ (800795c <HAL_NVIC_DisableIRQ+0x20>)
 800794a:	3320      	adds	r3, #32
 800794c:	4082      	lsls	r2, r0
 800794e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8007952:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8007956:	f3bf 8f6f 	isb	sy
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 800795a:	4770      	bx	lr
 800795c:	e000e100 	.word	0xe000e100

08007960 <HAL_MPU_Disable>:
  __ASM volatile ("dmb 0xF":::"memory");
 8007960:	f3bf 8f5f 	dmb	sy
{
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8007964:	4b04      	ldr	r3, [pc, #16]	@ (8007978 <HAL_MPU_Disable+0x18>)
 8007966:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007968:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800796c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 800796e:	2200      	movs	r2, #0
 8007970:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
}
 8007974:	4770      	bx	lr
 8007976:	bf00      	nop
 8007978:	e000ed00 	.word	0xe000ed00

0800797c <HAL_MPU_Enable>:
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 800797c:	4b06      	ldr	r3, [pc, #24]	@ (8007998 <HAL_MPU_Enable+0x1c>)
 800797e:	f040 0001 	orr.w	r0, r0, #1
 8007982:	f8c3 0094 	str.w	r0, [r3, #148]	@ 0x94

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8007986:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007988:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800798c:	625a      	str	r2, [r3, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 800798e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8007992:	f3bf 8f6f 	isb	sy

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8007996:	4770      	bx	lr
 8007998:	e000ed00 	.word	0xe000ed00

0800799c <HAL_MPU_ConfigRegion>:
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 800799c:	7843      	ldrb	r3, [r0, #1]
 800799e:	4a14      	ldr	r2, [pc, #80]	@ (80079f0 <HAL_MPU_ConfigRegion+0x54>)
 80079a0:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 80079a4:	f8d2 30a0 	ldr.w	r3, [r2, #160]	@ 0xa0
 80079a8:	f023 0301 	bic.w	r3, r3, #1
 80079ac:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 80079b0:	6843      	ldr	r3, [r0, #4]
 80079b2:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80079b6:	7ac3      	ldrb	r3, [r0, #11]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80079b8:	7b01      	ldrb	r1, [r0, #12]
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80079ba:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80079bc:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 80079c0:	7801      	ldrb	r1, [r0, #0]
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80079c2:	430b      	orrs	r3, r1
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80079c4:	7a81      	ldrb	r1, [r0, #10]
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80079c6:	ea43 43c1 	orr.w	r3, r3, r1, lsl #19
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80079ca:	7b41      	ldrb	r1, [r0, #13]
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80079cc:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80079d0:	7b81      	ldrb	r1, [r0, #14]
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80079d2:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80079d6:	7bc1      	ldrb	r1, [r0, #15]
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80079d8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80079dc:	7a41      	ldrb	r1, [r0, #9]
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80079de:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80079e2:	7a01      	ldrb	r1, [r0, #8]
 80079e4:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80079e8:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0
}
 80079ec:	4770      	bx	lr
 80079ee:	bf00      	nop
 80079f0:	e000ed00 	.word	0xe000ed00

080079f4 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80079f4:	b510      	push	{r4, lr}
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80079f6:	4604      	mov	r4, r0
 80079f8:	b908      	cbnz	r0, 80079fe <HAL_CRC_Init+0xa>
  {
    return HAL_ERROR;
 80079fa:	2001      	movs	r0, #1
  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;

  /* Return function status */
  return HAL_OK;
}
 80079fc:	bd10      	pop	{r4, pc}
  if (hcrc->State == HAL_CRC_STATE_RESET)
 80079fe:	7f43      	ldrb	r3, [r0, #29]
 8007a00:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8007a04:	b913      	cbnz	r3, 8007a0c <HAL_CRC_Init+0x18>
    hcrc->Lock = HAL_UNLOCKED;
 8007a06:	7702      	strb	r2, [r0, #28]
    HAL_CRC_MspInit(hcrc);
 8007a08:	f7f9 fab6 	bl	8000f78 <HAL_CRC_MspInit>
  hcrc->State = HAL_CRC_STATE_BUSY;
 8007a0c:	2302      	movs	r3, #2
 8007a0e:	7763      	strb	r3, [r4, #29]
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8007a10:	7923      	ldrb	r3, [r4, #4]
 8007a12:	b9e3      	cbnz	r3, 8007a4e <HAL_CRC_Init+0x5a>
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8007a14:	6823      	ldr	r3, [r4, #0]
 8007a16:	4a13      	ldr	r2, [pc, #76]	@ (8007a64 <HAL_CRC_Init+0x70>)
 8007a18:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8007a1a:	689a      	ldr	r2, [r3, #8]
 8007a1c:	f022 0218 	bic.w	r2, r2, #24
 8007a20:	609a      	str	r2, [r3, #8]
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8007a22:	7962      	ldrb	r2, [r4, #5]
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8007a24:	6823      	ldr	r3, [r4, #0]
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8007a26:	b9d2      	cbnz	r2, 8007a5e <HAL_CRC_Init+0x6a>
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8007a28:	f04f 32ff 	mov.w	r2, #4294967295
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8007a2c:	611a      	str	r2, [r3, #16]
  return HAL_OK;
 8007a2e:	2000      	movs	r0, #0
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8007a30:	689a      	ldr	r2, [r3, #8]
 8007a32:	6961      	ldr	r1, [r4, #20]
 8007a34:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8007a38:	430a      	orrs	r2, r1
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8007a3a:	69a1      	ldr	r1, [r4, #24]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8007a3c:	609a      	str	r2, [r3, #8]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8007a3e:	689a      	ldr	r2, [r3, #8]
 8007a40:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8007a44:	430a      	orrs	r2, r1
 8007a46:	609a      	str	r2, [r3, #8]
  hcrc->State = HAL_CRC_STATE_READY;
 8007a48:	2301      	movs	r3, #1
 8007a4a:	7763      	strb	r3, [r4, #29]
  return HAL_OK;
 8007a4c:	e7d6      	b.n	80079fc <HAL_CRC_Init+0x8>
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8007a4e:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
 8007a52:	4620      	mov	r0, r4
 8007a54:	f000 f808 	bl	8007a68 <HAL_CRCEx_Polynomial_Set>
 8007a58:	2800      	cmp	r0, #0
 8007a5a:	d0e2      	beq.n	8007a22 <HAL_CRC_Init+0x2e>
 8007a5c:	e7cd      	b.n	80079fa <HAL_CRC_Init+0x6>
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8007a5e:	6922      	ldr	r2, [r4, #16]
 8007a60:	e7e4      	b.n	8007a2c <HAL_CRC_Init+0x38>
 8007a62:	bf00      	nop
 8007a64:	04c11db7 	.word	0x04c11db7

08007a68 <HAL_CRCEx_Polynomial_Set>:

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 8007a68:	07cb      	lsls	r3, r1, #31
{
 8007a6a:	b510      	push	{r4, lr}
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 8007a6c:	d50d      	bpl.n	8007a8a <HAL_CRCEx_Polynomial_Set+0x22>
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8007a6e:	231f      	movs	r3, #31
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8007a70:	3b01      	subs	r3, #1
 8007a72:	d31d      	bcc.n	8007ab0 <HAL_CRCEx_Polynomial_Set+0x48>
 8007a74:	fa21 f403 	lsr.w	r4, r1, r3
 8007a78:	07e4      	lsls	r4, r4, #31
 8007a7a:	d5f9      	bpl.n	8007a70 <HAL_CRCEx_Polynomial_Set+0x8>
    {
    }

    switch (PolyLength)
 8007a7c:	2a10      	cmp	r2, #16
 8007a7e:	d013      	beq.n	8007aa8 <HAL_CRCEx_Polynomial_Set+0x40>
 8007a80:	2a10      	cmp	r2, #16
 8007a82:	d804      	bhi.n	8007a8e <HAL_CRCEx_Polynomial_Set+0x26>
 8007a84:	b13a      	cbz	r2, 8007a96 <HAL_CRCEx_Polynomial_Set+0x2e>
 8007a86:	2a08      	cmp	r2, #8
 8007a88:	d010      	beq.n	8007aac <HAL_CRCEx_Polynomial_Set+0x44>
 8007a8a:	2001      	movs	r0, #1

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
  }
  /* Return function status */
  return status;
 8007a8c:	e00b      	b.n	8007aa6 <HAL_CRCEx_Polynomial_Set+0x3e>
    switch (PolyLength)
 8007a8e:	2a18      	cmp	r2, #24
 8007a90:	d1fb      	bne.n	8007a8a <HAL_CRCEx_Polynomial_Set+0x22>
        if (msb >= HAL_CRC_LENGTH_7B)
 8007a92:	2b06      	cmp	r3, #6
        if (msb >= HAL_CRC_LENGTH_16B)
 8007a94:	d8f9      	bhi.n	8007a8a <HAL_CRCEx_Polynomial_Set+0x22>
    WRITE_REG(hcrc->Instance->POL, Pol);
 8007a96:	6800      	ldr	r0, [r0, #0]
 8007a98:	6141      	str	r1, [r0, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8007a9a:	6883      	ldr	r3, [r0, #8]
 8007a9c:	f023 0318 	bic.w	r3, r3, #24
 8007aa0:	4313      	orrs	r3, r2
 8007aa2:	6083      	str	r3, [r0, #8]
 8007aa4:	2000      	movs	r0, #0
}
 8007aa6:	bd10      	pop	{r4, pc}
        if (msb >= HAL_CRC_LENGTH_8B)
 8007aa8:	2b07      	cmp	r3, #7
 8007aaa:	e7f3      	b.n	8007a94 <HAL_CRCEx_Polynomial_Set+0x2c>
        if (msb >= HAL_CRC_LENGTH_16B)
 8007aac:	2b0f      	cmp	r3, #15
 8007aae:	e7f1      	b.n	8007a94 <HAL_CRCEx_Polynomial_Set+0x2c>
    switch (PolyLength)
 8007ab0:	2a10      	cmp	r2, #16
 8007ab2:	d1e5      	bne.n	8007a80 <HAL_CRCEx_Polynomial_Set+0x18>
 8007ab4:	e7e9      	b.n	8007a8a <HAL_CRCEx_Polynomial_Set+0x22>

08007ab6 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8007ab6:	b510      	push	{r4, lr}
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8007ab8:	4604      	mov	r4, r0
 8007aba:	2800      	cmp	r0, #0
 8007abc:	d036      	beq.n	8007b2c <HAL_DMA2D_Init+0x76>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8007abe:	f890 3061 	ldrb.w	r3, [r0, #97]	@ 0x61
 8007ac2:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8007ac6:	b91b      	cbnz	r3, 8007ad0 <HAL_DMA2D_Init+0x1a>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8007ac8:	f880 2060 	strb.w	r2, [r0, #96]	@ 0x60
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8007acc:	f7f9 fa6c 	bl	8000fa8 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8007ad0:	2302      	movs	r3, #2

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 8007ad2:	69e0      	ldr	r0, [r4, #28]
 8007ad4:	6862      	ldr	r2, [r4, #4]
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8007ad6:	f884 3061 	strb.w	r3, [r4, #97]	@ 0x61
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 8007ada:	6823      	ldr	r3, [r4, #0]
 8007adc:	4302      	orrs	r2, r0

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 8007ade:	69a0      	ldr	r0, [r4, #24]
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 8007ae0:	6819      	ldr	r1, [r3, #0]
 8007ae2:	f421 21e0 	bic.w	r1, r1, #458752	@ 0x70000
 8007ae6:	f021 0140 	bic.w	r1, r1, #64	@ 0x40
 8007aea:	430a      	orrs	r2, r1
 8007aec:	601a      	str	r2, [r3, #0]
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 8007aee:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8007af0:	68a2      	ldr	r2, [r4, #8]
 8007af2:	f421 7183 	bic.w	r1, r1, #262	@ 0x106
 8007af6:	4302      	orrs	r2, r0
 8007af8:	f021 0101 	bic.w	r1, r1, #1
 8007afc:	430a      	orrs	r2, r1
             hdma2d->Init.ColorMode | hdma2d->Init.BytesSwap);

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8007afe:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 8007b00:	635a      	str	r2, [r3, #52]	@ 0x34
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8007b02:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007b04:	0c12      	lsrs	r2, r2, #16
 8007b06:	0412      	lsls	r2, r2, #16
 8007b08:	430a      	orrs	r2, r1
 8007b0a:	641a      	str	r2, [r3, #64]	@ 0x40
  /* DMA2D OPFCCR AI and RBS fields setting (Output Alpha Inversion)*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 8007b0c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8007b0e:	e9d4 0204 	ldrd	r0, r2, [r4, #16]
 8007b12:	f421 1140 	bic.w	r1, r1, #3145728	@ 0x300000
 8007b16:	0552      	lsls	r2, r2, #21
 8007b18:	ea42 5200 	orr.w	r2, r2, r0, lsl #20
             ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | \
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8007b1c:	2000      	movs	r0, #0
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 8007b1e:	430a      	orrs	r2, r1
 8007b20:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8007b22:	2301      	movs	r3, #1
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8007b24:	6660      	str	r0, [r4, #100]	@ 0x64
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8007b26:	f884 3061 	strb.w	r3, [r4, #97]	@ 0x61

  return HAL_OK;
}
 8007b2a:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8007b2c:	2001      	movs	r0, #1
 8007b2e:	e7fc      	b.n	8007b2a <HAL_DMA2D_Init+0x74>

08007b30 <HAL_DMA2D_LineEventCallback>:
  * @brief  Transfer watermark callback.
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
 8007b30:	4770      	bx	lr

08007b32 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @brief  CLUT Transfer Complete callback.
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
 8007b32:	4770      	bx	lr

08007b34 <HAL_DMA2D_IRQHandler>:
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8007b34:	6803      	ldr	r3, [r0, #0]
{
 8007b36:	b570      	push	{r4, r5, r6, lr}
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8007b38:	685e      	ldr	r6, [r3, #4]
{
 8007b3a:	4604      	mov	r4, r0
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8007b3c:	681d      	ldr	r5, [r3, #0]
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8007b3e:	07f2      	lsls	r2, r6, #31
 8007b40:	d514      	bpl.n	8007b6c <HAL_DMA2D_IRQHandler+0x38>
    if ((crflags & DMA2D_IT_TE) != 0U)
 8007b42:	05e9      	lsls	r1, r5, #23
 8007b44:	d512      	bpl.n	8007b6c <HAL_DMA2D_IRQHandler+0x38>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8007b46:	681a      	ldr	r2, [r3, #0]
 8007b48:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007b4c:	601a      	str	r2, [r3, #0]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8007b4e:	6e42      	ldr	r2, [r0, #100]	@ 0x64
 8007b50:	f042 0201 	orr.w	r2, r2, #1
 8007b54:	6642      	str	r2, [r0, #100]	@ 0x64
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8007b56:	2201      	movs	r2, #1
 8007b58:	609a      	str	r2, [r3, #8]
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8007b5a:	2304      	movs	r3, #4
 8007b5c:	f880 3061 	strb.w	r3, [r0, #97]	@ 0x61
      __HAL_UNLOCK(hdma2d);
 8007b60:	2300      	movs	r3, #0
 8007b62:	f880 3060 	strb.w	r3, [r0, #96]	@ 0x60
      if (hdma2d->XferErrorCallback != NULL)
 8007b66:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8007b68:	b103      	cbz	r3, 8007b6c <HAL_DMA2D_IRQHandler+0x38>
        hdma2d->XferErrorCallback(hdma2d);
 8007b6a:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8007b6c:	06b2      	lsls	r2, r6, #26
 8007b6e:	d516      	bpl.n	8007b9e <HAL_DMA2D_IRQHandler+0x6a>
    if ((crflags & DMA2D_IT_CE) != 0U)
 8007b70:	04ab      	lsls	r3, r5, #18
 8007b72:	d514      	bpl.n	8007b9e <HAL_DMA2D_IRQHandler+0x6a>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8007b74:	6823      	ldr	r3, [r4, #0]
 8007b76:	681a      	ldr	r2, [r3, #0]
 8007b78:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007b7c:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8007b7e:	2220      	movs	r2, #32
 8007b80:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8007b82:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007b84:	f043 0302 	orr.w	r3, r3, #2
 8007b88:	6663      	str	r3, [r4, #100]	@ 0x64
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8007b8a:	2304      	movs	r3, #4
 8007b8c:	f884 3061 	strb.w	r3, [r4, #97]	@ 0x61
      __HAL_UNLOCK(hdma2d);
 8007b90:	2300      	movs	r3, #0
 8007b92:	f884 3060 	strb.w	r3, [r4, #96]	@ 0x60
      if (hdma2d->XferErrorCallback != NULL)
 8007b96:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8007b98:	b10b      	cbz	r3, 8007b9e <HAL_DMA2D_IRQHandler+0x6a>
        hdma2d->XferErrorCallback(hdma2d);
 8007b9a:	4620      	mov	r0, r4
 8007b9c:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8007b9e:	0730      	lsls	r0, r6, #28
 8007ba0:	d516      	bpl.n	8007bd0 <HAL_DMA2D_IRQHandler+0x9c>
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8007ba2:	0529      	lsls	r1, r5, #20
 8007ba4:	d514      	bpl.n	8007bd0 <HAL_DMA2D_IRQHandler+0x9c>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8007ba6:	6823      	ldr	r3, [r4, #0]
 8007ba8:	681a      	ldr	r2, [r3, #0]
 8007baa:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007bae:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8007bb0:	2208      	movs	r2, #8
 8007bb2:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8007bb4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007bb6:	f043 0304 	orr.w	r3, r3, #4
 8007bba:	6663      	str	r3, [r4, #100]	@ 0x64
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8007bbc:	2304      	movs	r3, #4
 8007bbe:	f884 3061 	strb.w	r3, [r4, #97]	@ 0x61
      __HAL_UNLOCK(hdma2d);
 8007bc2:	2300      	movs	r3, #0
 8007bc4:	f884 3060 	strb.w	r3, [r4, #96]	@ 0x60
      if (hdma2d->XferErrorCallback != NULL)
 8007bc8:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8007bca:	b10b      	cbz	r3, 8007bd0 <HAL_DMA2D_IRQHandler+0x9c>
        hdma2d->XferErrorCallback(hdma2d);
 8007bcc:	4620      	mov	r0, r4
 8007bce:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8007bd0:	0772      	lsls	r2, r6, #29
 8007bd2:	d50b      	bpl.n	8007bec <HAL_DMA2D_IRQHandler+0xb8>
    if ((crflags & DMA2D_IT_TW) != 0U)
 8007bd4:	056b      	lsls	r3, r5, #21
 8007bd6:	d509      	bpl.n	8007bec <HAL_DMA2D_IRQHandler+0xb8>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8007bd8:	6823      	ldr	r3, [r4, #0]
      HAL_DMA2D_LineEventCallback(hdma2d);
 8007bda:	4620      	mov	r0, r4
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8007bdc:	681a      	ldr	r2, [r3, #0]
 8007bde:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007be2:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8007be4:	2204      	movs	r2, #4
 8007be6:	609a      	str	r2, [r3, #8]
      HAL_DMA2D_LineEventCallback(hdma2d);
 8007be8:	f7ff ffa2 	bl	8007b30 <HAL_DMA2D_LineEventCallback>
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8007bec:	07b0      	lsls	r0, r6, #30
 8007bee:	d514      	bpl.n	8007c1a <HAL_DMA2D_IRQHandler+0xe6>
    if ((crflags & DMA2D_IT_TC) != 0U)
 8007bf0:	05a9      	lsls	r1, r5, #22
 8007bf2:	d512      	bpl.n	8007c1a <HAL_DMA2D_IRQHandler+0xe6>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8007bf4:	6823      	ldr	r3, [r4, #0]
 8007bf6:	681a      	ldr	r2, [r3, #0]
 8007bf8:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8007bfc:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8007bfe:	2202      	movs	r2, #2
 8007c00:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8007c02:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007c04:	6663      	str	r3, [r4, #100]	@ 0x64
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8007c06:	2301      	movs	r3, #1
 8007c08:	f884 3061 	strb.w	r3, [r4, #97]	@ 0x61
      __HAL_UNLOCK(hdma2d);
 8007c0c:	2300      	movs	r3, #0
 8007c0e:	f884 3060 	strb.w	r3, [r4, #96]	@ 0x60
      if (hdma2d->XferCpltCallback != NULL)
 8007c12:	6a23      	ldr	r3, [r4, #32]
 8007c14:	b10b      	cbz	r3, 8007c1a <HAL_DMA2D_IRQHandler+0xe6>
        hdma2d->XferCpltCallback(hdma2d);
 8007c16:	4620      	mov	r0, r4
 8007c18:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8007c1a:	06f2      	lsls	r2, r6, #27
 8007c1c:	d513      	bpl.n	8007c46 <HAL_DMA2D_IRQHandler+0x112>
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8007c1e:	04eb      	lsls	r3, r5, #19
 8007c20:	d511      	bpl.n	8007c46 <HAL_DMA2D_IRQHandler+0x112>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8007c22:	6823      	ldr	r3, [r4, #0]
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8007c24:	4620      	mov	r0, r4
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8007c26:	681a      	ldr	r2, [r3, #0]
 8007c28:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8007c2c:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8007c2e:	2210      	movs	r2, #16
 8007c30:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8007c32:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007c34:	6663      	str	r3, [r4, #100]	@ 0x64
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8007c36:	2301      	movs	r3, #1
 8007c38:	f884 3061 	strb.w	r3, [r4, #97]	@ 0x61
      __HAL_UNLOCK(hdma2d);
 8007c3c:	2300      	movs	r3, #0
 8007c3e:	f884 3060 	strb.w	r3, [r4, #96]	@ 0x60
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8007c42:	f7ff ff76 	bl	8007b32 <HAL_DMA2D_CLUTLoadingCpltCallback>
}
 8007c46:	bd70      	pop	{r4, r5, r6, pc}

08007c48 <DSI_ShortWrite.constprop.0>:
  *                 This parameter can be any value of @arg DSI_DCS_Command or a
  *                 generic command code.
  * @param  Param2  DSC parameter or second generic parameter.
  * @retval HAL status
  */
static HAL_StatusTypeDef DSI_ShortWrite(DSI_HandleTypeDef *hdsi,
 8007c48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007c4c:	4607      	mov	r7, r0
 8007c4e:	460d      	mov	r5, r1
 8007c50:	4614      	mov	r4, r2
 8007c52:	461e      	mov	r6, r3
                                        uint32_t Param2)
{
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 8007c54:	f7ff fe02 	bl	800785c <HAL_GetTick>
 8007c58:	4680      	mov	r8, r0

  /* Wait for Command FIFO Empty */
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 8007c5a:	683b      	ldr	r3, [r7, #0]
 8007c5c:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
 8007c5e:	07d2      	lsls	r2, r2, #31
 8007c60:	d50a      	bpl.n	8007c78 <DSI_ShortWrite.constprop.0+0x30>
    }
  }

  /* Configure the packet to send a short DCS command with 0 or 1 parameter */
  /* Update the DSI packet header with new information */
  hdsi->Instance->GHCR = (Mode | (ChannelID << 6U) | (Param1 << 8U) | (Param2 << 16U));
 8007c62:	ea44 2406 	orr.w	r4, r4, r6, lsl #8
 8007c66:	9a06      	ldr	r2, [sp, #24]

  return HAL_OK;
 8007c68:	2000      	movs	r0, #0
  hdsi->Instance->GHCR = (Mode | (ChannelID << 6U) | (Param1 << 8U) | (Param2 << 16U));
 8007c6a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8007c6e:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
 8007c72:	66dc      	str	r4, [r3, #108]	@ 0x6c
}
 8007c74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8007c78:	f7ff fdf0 	bl	800785c <HAL_GetTick>
 8007c7c:	eba0 0008 	sub.w	r0, r0, r8
 8007c80:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 8007c84:	d9e9      	bls.n	8007c5a <DSI_ShortWrite.constprop.0+0x12>
      return HAL_TIMEOUT;
 8007c86:	2003      	movs	r0, #3
 8007c88:	e7f4      	b.n	8007c74 <DSI_ShortWrite.constprop.0+0x2c>

08007c8a <HAL_DSI_ConfigErrorMonitor>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigErrorMonitor(DSI_HandleTypeDef *hdsi, uint32_t ActiveErrors)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 8007c8a:	7c03      	ldrb	r3, [r0, #16]
{
 8007c8c:	4602      	mov	r2, r0
  __HAL_LOCK(hdsi);
 8007c8e:	2b01      	cmp	r3, #1
 8007c90:	d05b      	beq.n	8007d4a <HAL_DSI_ConfigErrorMonitor+0xc0>

  hdsi->Instance->IER[0U] = 0U;
 8007c92:	6803      	ldr	r3, [r0, #0]
 8007c94:	2000      	movs	r0, #0
 8007c96:	f8c3 00c4 	str.w	r0, [r3, #196]	@ 0xc4
  hdsi->Instance->IER[1U] = 0U;
 8007c9a:	f8c3 00c8 	str.w	r0, [r3, #200]	@ 0xc8

  /* Store active errors to the handle */
  hdsi->ErrorMsk = ActiveErrors;

  if ((ActiveErrors & HAL_DSI_ERROR_ACK) != 0U)
 8007c9e:	07c8      	lsls	r0, r1, #31
  hdsi->ErrorMsk = ActiveErrors;
 8007ca0:	6191      	str	r1, [r2, #24]
  if ((ActiveErrors & HAL_DSI_ERROR_ACK) != 0U)
 8007ca2:	d507      	bpl.n	8007cb4 <HAL_DSI_ConfigErrorMonitor+0x2a>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[0U] |= DSI_ERROR_ACK_MASK;
 8007ca4:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 8007ca8:	ea6f 4010 	mvn.w	r0, r0, lsr #16
 8007cac:	ea6f 4000 	mvn.w	r0, r0, lsl #16
 8007cb0:	f8c3 00c4 	str.w	r0, [r3, #196]	@ 0xc4
  }

  if ((ActiveErrors & HAL_DSI_ERROR_PHY) != 0U)
 8007cb4:	0788      	lsls	r0, r1, #30
 8007cb6:	d505      	bpl.n	8007cc4 <HAL_DSI_ConfigErrorMonitor+0x3a>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[0U] |= DSI_ERROR_PHY_MASK;
 8007cb8:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 8007cbc:	f440 10f8 	orr.w	r0, r0, #2031616	@ 0x1f0000
 8007cc0:	f8c3 00c4 	str.w	r0, [r3, #196]	@ 0xc4
  }

  if ((ActiveErrors & HAL_DSI_ERROR_TX) != 0U)
 8007cc4:	0748      	lsls	r0, r1, #29
 8007cc6:	d505      	bpl.n	8007cd4 <HAL_DSI_ConfigErrorMonitor+0x4a>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_TX_MASK;
 8007cc8:	f8d3 00c8 	ldr.w	r0, [r3, #200]	@ 0xc8
 8007ccc:	f040 0001 	orr.w	r0, r0, #1
 8007cd0:	f8c3 00c8 	str.w	r0, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_RX) != 0U)
 8007cd4:	0708      	lsls	r0, r1, #28
 8007cd6:	d505      	bpl.n	8007ce4 <HAL_DSI_ConfigErrorMonitor+0x5a>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_RX_MASK;
 8007cd8:	f8d3 00c8 	ldr.w	r0, [r3, #200]	@ 0xc8
 8007cdc:	f040 0002 	orr.w	r0, r0, #2
 8007ce0:	f8c3 00c8 	str.w	r0, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_ECC) != 0U)
 8007ce4:	06c8      	lsls	r0, r1, #27
 8007ce6:	d505      	bpl.n	8007cf4 <HAL_DSI_ConfigErrorMonitor+0x6a>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_ECC_MASK;
 8007ce8:	f8d3 00c8 	ldr.w	r0, [r3, #200]	@ 0xc8
 8007cec:	f040 000c 	orr.w	r0, r0, #12
 8007cf0:	f8c3 00c8 	str.w	r0, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_CRC) != 0U)
 8007cf4:	0688      	lsls	r0, r1, #26
 8007cf6:	d505      	bpl.n	8007d04 <HAL_DSI_ConfigErrorMonitor+0x7a>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_CRC_MASK;
 8007cf8:	f8d3 00c8 	ldr.w	r0, [r3, #200]	@ 0xc8
 8007cfc:	f040 0010 	orr.w	r0, r0, #16
 8007d00:	f8c3 00c8 	str.w	r0, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_PSE) != 0U)
 8007d04:	0648      	lsls	r0, r1, #25
 8007d06:	d505      	bpl.n	8007d14 <HAL_DSI_ConfigErrorMonitor+0x8a>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_PSE_MASK;
 8007d08:	f8d3 00c8 	ldr.w	r0, [r3, #200]	@ 0xc8
 8007d0c:	f040 0020 	orr.w	r0, r0, #32
 8007d10:	f8c3 00c8 	str.w	r0, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_EOT) != 0U)
 8007d14:	0608      	lsls	r0, r1, #24
 8007d16:	d505      	bpl.n	8007d24 <HAL_DSI_ConfigErrorMonitor+0x9a>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_EOT_MASK;
 8007d18:	f8d3 00c8 	ldr.w	r0, [r3, #200]	@ 0xc8
 8007d1c:	f040 0040 	orr.w	r0, r0, #64	@ 0x40
 8007d20:	f8c3 00c8 	str.w	r0, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_OVF) != 0U)
 8007d24:	05c8      	lsls	r0, r1, #23
 8007d26:	d505      	bpl.n	8007d34 <HAL_DSI_ConfigErrorMonitor+0xaa>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_OVF_MASK;
 8007d28:	f8d3 00c8 	ldr.w	r0, [r3, #200]	@ 0xc8
 8007d2c:	f040 0080 	orr.w	r0, r0, #128	@ 0x80
 8007d30:	f8c3 00c8 	str.w	r0, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_GEN) != 0U)
 8007d34:	0589      	lsls	r1, r1, #22
 8007d36:	d505      	bpl.n	8007d44 <HAL_DSI_ConfigErrorMonitor+0xba>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_GEN_MASK;
 8007d38:	f8d3 10c8 	ldr.w	r1, [r3, #200]	@ 0xc8
 8007d3c:	f441 51f8 	orr.w	r1, r1, #7936	@ 0x1f00
 8007d40:	f8c3 10c8 	str.w	r1, [r3, #200]	@ 0xc8
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdsi);
 8007d44:	2000      	movs	r0, #0
 8007d46:	7410      	strb	r0, [r2, #16]

  return HAL_OK;
 8007d48:	4770      	bx	lr
  __HAL_LOCK(hdsi);
 8007d4a:	2002      	movs	r0, #2
}
 8007d4c:	4770      	bx	lr
	...

08007d50 <HAL_DSI_Init>:
{
 8007d50:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8007d52:	460d      	mov	r5, r1
  if (hdsi == NULL)
 8007d54:	4604      	mov	r4, r0
 8007d56:	2800      	cmp	r0, #0
 8007d58:	f000 80ea 	beq.w	8007f30 <HAL_DSI_Init+0x1e0>
  if (hdsi->State == HAL_DSI_STATE_RESET)
 8007d5c:	7c43      	ldrb	r3, [r0, #17]
 8007d5e:	b90b      	cbnz	r3, 8007d64 <HAL_DSI_Init+0x14>
    HAL_DSI_MspInit(hdsi);
 8007d60:	f7f9 f946 	bl	8000ff0 <HAL_DSI_MspInit>
  hdsi->State = HAL_DSI_STATE_BUSY;
 8007d64:	2303      	movs	r3, #3
 8007d66:	7463      	strb	r3, [r4, #17]
  __HAL_DSI_REG_ENABLE(hdsi);
 8007d68:	2300      	movs	r3, #0
 8007d6a:	9300      	str	r3, [sp, #0]
 8007d6c:	6823      	ldr	r3, [r4, #0]
 8007d6e:	f8d3 2430 	ldr.w	r2, [r3, #1072]	@ 0x430
 8007d72:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 8007d76:	f8c3 2430 	str.w	r2, [r3, #1072]	@ 0x430
 8007d7a:	f8d3 3430 	ldr.w	r3, [r3, #1072]	@ 0x430
 8007d7e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007d82:	9300      	str	r3, [sp, #0]
 8007d84:	9b00      	ldr	r3, [sp, #0]
  tickstart = HAL_GetTick();
 8007d86:	f7ff fd69 	bl	800785c <HAL_GetTick>
 8007d8a:	4606      	mov	r6, r0
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_RRS) == 0U)
 8007d8c:	6822      	ldr	r2, [r4, #0]
 8007d8e:	f8d2 340c 	ldr.w	r3, [r2, #1036]	@ 0x40c
 8007d92:	04d9      	lsls	r1, r3, #19
 8007d94:	d56e      	bpl.n	8007e74 <HAL_DSI_Init+0x124>
  hdsi->Instance->WRPCR &= ~(DSI_WRPCR_PLL_NDIV | DSI_WRPCR_PLL_IDF | DSI_WRPCR_PLL_ODF);
 8007d96:	f8d2 3430 	ldr.w	r3, [r2, #1072]	@ 0x430
 8007d9a:	f423 335e 	bic.w	r3, r3, #227328	@ 0x37800
 8007d9e:	f423 73fe 	bic.w	r3, r3, #508	@ 0x1fc
 8007da2:	f8c2 3430 	str.w	r3, [r2, #1072]	@ 0x430
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 8007da6:	f8d2 1430 	ldr.w	r1, [r2, #1072]	@ 0x430
                            ((PLLInit->PLLIDF) << DSI_WRPCR_PLL_IDF_Pos) | \
 8007daa:	e9d5 0300 	ldrd	r0, r3, [r5]
 8007dae:	02db      	lsls	r3, r3, #11
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 8007db0:	ea43 0380 	orr.w	r3, r3, r0, lsl #2
                            ((PLLInit->PLLODF) << DSI_WRPCR_PLL_ODF_Pos));
 8007db4:	68a8      	ldr	r0, [r5, #8]
                            ((PLLInit->PLLIDF) << DSI_WRPCR_PLL_IDF_Pos) | \
 8007db6:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
  HAL_Delay(1);
 8007dba:	2001      	movs	r0, #1
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 8007dbc:	430b      	orrs	r3, r1
 8007dbe:	f8c2 3430 	str.w	r3, [r2, #1072]	@ 0x430
  __HAL_DSI_PLL_ENABLE(hdsi);
 8007dc2:	2300      	movs	r3, #0
 8007dc4:	9301      	str	r3, [sp, #4]
 8007dc6:	f8d2 3430 	ldr.w	r3, [r2, #1072]	@ 0x430
 8007dca:	f043 0301 	orr.w	r3, r3, #1
 8007dce:	f8c2 3430 	str.w	r3, [r2, #1072]	@ 0x430
 8007dd2:	f8d2 3430 	ldr.w	r3, [r2, #1072]	@ 0x430
 8007dd6:	f003 0301 	and.w	r3, r3, #1
 8007dda:	9301      	str	r3, [sp, #4]
 8007ddc:	9b01      	ldr	r3, [sp, #4]
  HAL_Delay(1);
 8007dde:	f7ff fd43 	bl	8007868 <HAL_Delay>
  tickstart = HAL_GetTick();
 8007de2:	f7ff fd3b 	bl	800785c <HAL_GetTick>
 8007de6:	4606      	mov	r6, r0
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 8007de8:	6823      	ldr	r3, [r4, #0]
 8007dea:	f8d3 240c 	ldr.w	r2, [r3, #1036]	@ 0x40c
 8007dee:	05d2      	lsls	r2, r2, #23
 8007df0:	d548      	bpl.n	8007e84 <HAL_DSI_Init+0x134>
  __HAL_DSI_ENABLE(hdsi);
 8007df2:	2200      	movs	r2, #0
  hdsi->Instance->CCR |= hdsi->Init.TXEscapeCkdiv;
 8007df4:	68a1      	ldr	r1, [r4, #8]
  __HAL_DSI_ENABLE(hdsi);
 8007df6:	9202      	str	r2, [sp, #8]
 8007df8:	685a      	ldr	r2, [r3, #4]
 8007dfa:	f042 0201 	orr.w	r2, r2, #1
 8007dfe:	605a      	str	r2, [r3, #4]
 8007e00:	685a      	ldr	r2, [r3, #4]
 8007e02:	f002 0201 	and.w	r2, r2, #1
 8007e06:	9202      	str	r2, [sp, #8]
 8007e08:	9a02      	ldr	r2, [sp, #8]
  hdsi->Instance->CCR &= ~DSI_CCR_TXECKDIV;
 8007e0a:	689a      	ldr	r2, [r3, #8]
 8007e0c:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8007e10:	609a      	str	r2, [r3, #8]
  hdsi->Instance->CCR |= hdsi->Init.TXEscapeCkdiv;
 8007e12:	689a      	ldr	r2, [r3, #8]
 8007e14:	430a      	orrs	r2, r1
  hdsi->Instance->PCONFR |= hdsi->Init.NumberOfLanes;
 8007e16:	68e1      	ldr	r1, [r4, #12]
  hdsi->Instance->CCR |= hdsi->Init.TXEscapeCkdiv;
 8007e18:	609a      	str	r2, [r3, #8]
  hdsi->Instance->PCTLR |= DSI_PCTLR_DEN;
 8007e1a:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 8007e1e:	f042 0202 	orr.w	r2, r2, #2
 8007e22:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  hdsi->Instance->PCTLR |= DSI_PCTLR_CKE;
 8007e26:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 8007e2a:	f042 0204 	orr.w	r2, r2, #4
 8007e2e:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_NL;
 8007e32:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 8007e36:	f022 0203 	bic.w	r2, r2, #3
 8007e3a:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  hdsi->Instance->PCONFR |= hdsi->Init.NumberOfLanes;
 8007e3e:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 8007e42:	430a      	orrs	r2, r1
 8007e44:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  tickstart = HAL_GetTick();
 8007e48:	f7ff fd08 	bl	800785c <HAL_GetTick>
  if ((hdsi->Instance->PCONFR & DSI_PCONFR_NL) == DSI_ONE_DATA_LANE)
 8007e4c:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 8007e4e:	4606      	mov	r6, r0
  if ((hdsi->Instance->PCONFR & DSI_PCONFR_NL) == DSI_ONE_DATA_LANE)
 8007e50:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8007e54:	079b      	lsls	r3, r3, #30
 8007e56:	d025      	beq.n	8007ea4 <HAL_DSI_Init+0x154>
    while ((hdsi->Instance->PSR & (DSI_PSR_PSS0 | DSI_PSR_PSS1 | DSI_PSR_PSSC)) != (DSI_PSR_PSS0 | \
 8007e58:	6823      	ldr	r3, [r4, #0]
 8007e5a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8007e5e:	f003 0394 	and.w	r3, r3, #148	@ 0x94
 8007e62:	2b94      	cmp	r3, #148	@ 0x94
 8007e64:	d025      	beq.n	8007eb2 <HAL_DSI_Init+0x162>
      if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8007e66:	f7ff fcf9 	bl	800785c <HAL_GetTick>
 8007e6a:	1b80      	subs	r0, r0, r6
 8007e6c:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 8007e70:	d9f2      	bls.n	8007e58 <HAL_DSI_Init+0x108>
 8007e72:	e014      	b.n	8007e9e <HAL_DSI_Init+0x14e>
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8007e74:	f7ff fcf2 	bl	800785c <HAL_GetTick>
 8007e78:	1b80      	subs	r0, r0, r6
 8007e7a:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 8007e7e:	d985      	bls.n	8007d8c <HAL_DSI_Init+0x3c>
      return HAL_TIMEOUT;
 8007e80:	2003      	movs	r0, #3
 8007e82:	e053      	b.n	8007f2c <HAL_DSI_Init+0x1dc>
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8007e84:	f7ff fcea 	bl	800785c <HAL_GetTick>
 8007e88:	1b80      	subs	r0, r0, r6
 8007e8a:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 8007e8e:	d9ab      	bls.n	8007de8 <HAL_DSI_Init+0x98>
 8007e90:	e7f6      	b.n	8007e80 <HAL_DSI_Init+0x130>
      if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8007e92:	f7ff fce3 	bl	800785c <HAL_GetTick>
 8007e96:	1b80      	subs	r0, r0, r6
 8007e98:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 8007e9c:	d902      	bls.n	8007ea4 <HAL_DSI_Init+0x154>
        __HAL_UNLOCK(hdsi);
 8007e9e:	2300      	movs	r3, #0
 8007ea0:	7423      	strb	r3, [r4, #16]
        return HAL_TIMEOUT;
 8007ea2:	e7ed      	b.n	8007e80 <HAL_DSI_Init+0x130>
    while ((hdsi->Instance->PSR & (DSI_PSR_PSS0 | DSI_PSR_PSSC)) != (DSI_PSR_PSS0 | DSI_PSR_PSSC))
 8007ea4:	6823      	ldr	r3, [r4, #0]
 8007ea6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8007eaa:	f003 0314 	and.w	r3, r3, #20
 8007eae:	2b14      	cmp	r3, #20
 8007eb0:	d1ef      	bne.n	8007e92 <HAL_DSI_Init+0x142>
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 8007eb2:	686b      	ldr	r3, [r5, #4]
 8007eb4:	f246 11a8 	movw	r1, #25000	@ 0x61a8
 8007eb8:	4a1e      	ldr	r2, [pc, #120]	@ (8007f34 <HAL_DSI_Init+0x1e4>)
  hdsi->Instance->IER[0U] = 0U;
 8007eba:	2000      	movs	r0, #0
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 8007ebc:	2b01      	cmp	r3, #1
 8007ebe:	bf38      	it	cc
 8007ec0:	2301      	movcc	r3, #1
 8007ec2:	435a      	muls	r2, r3
 8007ec4:	68ab      	ldr	r3, [r5, #8]
 8007ec6:	f003 0303 	and.w	r3, r3, #3
 8007eca:	409a      	lsls	r2, r3
 8007ecc:	682b      	ldr	r3, [r5, #0]
 8007ece:	434b      	muls	r3, r1
 8007ed0:	fbb2 f2f3 	udiv	r2, r2, r3
  hdsi->Instance->WPCR[0U] &= ~DSI_WPCR0_UIX4;
 8007ed4:	6823      	ldr	r3, [r4, #0]
 8007ed6:	f8d3 1418 	ldr.w	r1, [r3, #1048]	@ 0x418
 8007eda:	f021 013f 	bic.w	r1, r1, #63	@ 0x3f
 8007ede:	f8c3 1418 	str.w	r1, [r3, #1048]	@ 0x418
  hdsi->Instance->WPCR[0U] |= unitIntervalx4;
 8007ee2:	f8d3 1418 	ldr.w	r1, [r3, #1048]	@ 0x418
 8007ee6:	430a      	orrs	r2, r1
  hdsi->Instance->CLCR |= (DSI_CLCR_DPCC | hdsi->Init.AutomaticClockLaneControl);
 8007ee8:	6861      	ldr	r1, [r4, #4]
  hdsi->Instance->WPCR[0U] |= unitIntervalx4;
 8007eea:	f8c3 2418 	str.w	r2, [r3, #1048]	@ 0x418
  hdsi->Instance->IER[0U] = 0U;
 8007eee:	f8c3 00c4 	str.w	r0, [r3, #196]	@ 0xc4
  hdsi->Instance->IER[1U] = 0U;
 8007ef2:	f8c3 00c8 	str.w	r0, [r3, #200]	@ 0xc8
  __HAL_DSI_DISABLE(hdsi);
 8007ef6:	9003      	str	r0, [sp, #12]
 8007ef8:	685a      	ldr	r2, [r3, #4]
  hdsi->ErrorMsk = 0U;
 8007efa:	61a0      	str	r0, [r4, #24]
  __HAL_DSI_DISABLE(hdsi);
 8007efc:	f022 0201 	bic.w	r2, r2, #1
 8007f00:	605a      	str	r2, [r3, #4]
 8007f02:	685a      	ldr	r2, [r3, #4]
 8007f04:	f002 0201 	and.w	r2, r2, #1
 8007f08:	9203      	str	r2, [sp, #12]
 8007f0a:	9a03      	ldr	r2, [sp, #12]
  hdsi->Instance->CLCR &= ~(DSI_CLCR_DPCC | DSI_CLCR_ACR);
 8007f0c:	f8d3 2094 	ldr.w	r2, [r3, #148]	@ 0x94
 8007f10:	f022 0203 	bic.w	r2, r2, #3
 8007f14:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  hdsi->Instance->CLCR |= (DSI_CLCR_DPCC | hdsi->Init.AutomaticClockLaneControl);
 8007f18:	f8d3 2094 	ldr.w	r2, [r3, #148]	@ 0x94
 8007f1c:	430a      	orrs	r2, r1
 8007f1e:	f042 0201 	orr.w	r2, r2, #1
 8007f22:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  hdsi->State = HAL_DSI_STATE_READY;
 8007f26:	2301      	movs	r3, #1
  hdsi->ErrorCode = HAL_DSI_ERROR_NONE;
 8007f28:	6160      	str	r0, [r4, #20]
  hdsi->State = HAL_DSI_STATE_READY;
 8007f2a:	7463      	strb	r3, [r4, #17]
}
 8007f2c:	b004      	add	sp, #16
 8007f2e:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8007f30:	2001      	movs	r0, #1
 8007f32:	e7fb      	b.n	8007f2c <HAL_DSI_Init+0x1dc>
 8007f34:	003d0900 	.word	0x003d0900

08007f38 <HAL_DSI_ErrorCallback>:
  * @brief  Operation Error DSI callback.
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval None
  */
__weak void HAL_DSI_ErrorCallback(DSI_HandleTypeDef *hdsi)
 8007f38:	4770      	bx	lr

08007f3a <HAL_DSI_IRQHandler>:
  if (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_TE) != 0U)
 8007f3a:	6803      	ldr	r3, [r0, #0]
 8007f3c:	f8d3 240c 	ldr.w	r2, [r3, #1036]	@ 0x40c
 8007f40:	07d1      	lsls	r1, r2, #31
{
 8007f42:	b510      	push	{r4, lr}
 8007f44:	4604      	mov	r4, r0
  if (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_TE) != 0U)
 8007f46:	d508      	bpl.n	8007f5a <HAL_DSI_IRQHandler+0x20>
    if (__HAL_DSI_GET_IT_SOURCE(hdsi, DSI_IT_TE) != 0U)
 8007f48:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 8007f4c:	07d2      	lsls	r2, r2, #31
 8007f4e:	d504      	bpl.n	8007f5a <HAL_DSI_IRQHandler+0x20>
      __HAL_DSI_CLEAR_FLAG(hdsi, DSI_FLAG_TE);
 8007f50:	2201      	movs	r2, #1
 8007f52:	f8c3 2410 	str.w	r2, [r3, #1040]	@ 0x410
      HAL_DSI_TearingEffectCallback(hdsi);
 8007f56:	f7f9 ff7f 	bl	8001e58 <HAL_DSI_TearingEffectCallback>
  if (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_ER) != 0U)
 8007f5a:	6823      	ldr	r3, [r4, #0]
 8007f5c:	f8d3 240c 	ldr.w	r2, [r3, #1036]	@ 0x40c
 8007f60:	0791      	lsls	r1, r2, #30
 8007f62:	d509      	bpl.n	8007f78 <HAL_DSI_IRQHandler+0x3e>
    if (__HAL_DSI_GET_IT_SOURCE(hdsi, DSI_IT_ER) != 0U)
 8007f64:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 8007f68:	0792      	lsls	r2, r2, #30
 8007f6a:	d505      	bpl.n	8007f78 <HAL_DSI_IRQHandler+0x3e>
      __HAL_DSI_CLEAR_FLAG(hdsi, DSI_FLAG_ER);
 8007f6c:	2202      	movs	r2, #2
      HAL_DSI_EndOfRefreshCallback(hdsi);
 8007f6e:	4620      	mov	r0, r4
      __HAL_DSI_CLEAR_FLAG(hdsi, DSI_FLAG_ER);
 8007f70:	f8c3 2410 	str.w	r2, [r3, #1040]	@ 0x410
      HAL_DSI_EndOfRefreshCallback(hdsi);
 8007f74:	f7f9 ffa2 	bl	8001ebc <HAL_DSI_EndOfRefreshCallback>
  if (hdsi->ErrorMsk != 0U)
 8007f78:	69a3      	ldr	r3, [r4, #24]
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d04e      	beq.n	800801c <HAL_DSI_IRQHandler+0xe2>
    ErrorStatus0 = hdsi->Instance->ISR[0U];
 8007f7e:	6821      	ldr	r1, [r4, #0]
 8007f80:	f8d1 20bc 	ldr.w	r2, [r1, #188]	@ 0xbc
    ErrorStatus0 &= hdsi->Instance->IER[0U];
 8007f84:	f8d1 30c4 	ldr.w	r3, [r1, #196]	@ 0xc4
 8007f88:	401a      	ands	r2, r3
    ErrorStatus1 = hdsi->Instance->ISR[1U];
 8007f8a:	f8d1 30c0 	ldr.w	r3, [r1, #192]	@ 0xc0
    ErrorStatus1 &= hdsi->Instance->IER[1U];
 8007f8e:	f8d1 10c8 	ldr.w	r1, [r1, #200]	@ 0xc8
 8007f92:	400b      	ands	r3, r1
    if ((ErrorStatus0 & DSI_ERROR_ACK_MASK) != 0U)
 8007f94:	b291      	uxth	r1, r2
 8007f96:	b119      	cbz	r1, 8007fa0 <HAL_DSI_IRQHandler+0x66>
      hdsi->ErrorCode |= HAL_DSI_ERROR_ACK;
 8007f98:	6961      	ldr	r1, [r4, #20]
 8007f9a:	f041 0101 	orr.w	r1, r1, #1
 8007f9e:	6161      	str	r1, [r4, #20]
    if ((ErrorStatus0 & DSI_ERROR_PHY_MASK) != 0U)
 8007fa0:	f412 1ff8 	tst.w	r2, #2031616	@ 0x1f0000
 8007fa4:	d003      	beq.n	8007fae <HAL_DSI_IRQHandler+0x74>
      hdsi->ErrorCode |= HAL_DSI_ERROR_PHY;
 8007fa6:	6962      	ldr	r2, [r4, #20]
 8007fa8:	f042 0202 	orr.w	r2, r2, #2
 8007fac:	6162      	str	r2, [r4, #20]
    if ((ErrorStatus1 & DSI_ERROR_TX_MASK) != 0U)
 8007fae:	07d8      	lsls	r0, r3, #31
 8007fb0:	d503      	bpl.n	8007fba <HAL_DSI_IRQHandler+0x80>
      hdsi->ErrorCode |= HAL_DSI_ERROR_TX;
 8007fb2:	6962      	ldr	r2, [r4, #20]
 8007fb4:	f042 0204 	orr.w	r2, r2, #4
 8007fb8:	6162      	str	r2, [r4, #20]
    if ((ErrorStatus1 & DSI_ERROR_RX_MASK) != 0U)
 8007fba:	0799      	lsls	r1, r3, #30
 8007fbc:	d503      	bpl.n	8007fc6 <HAL_DSI_IRQHandler+0x8c>
      hdsi->ErrorCode |= HAL_DSI_ERROR_RX;
 8007fbe:	6962      	ldr	r2, [r4, #20]
 8007fc0:	f042 0208 	orr.w	r2, r2, #8
 8007fc4:	6162      	str	r2, [r4, #20]
    if ((ErrorStatus1 & DSI_ERROR_ECC_MASK) != 0U)
 8007fc6:	f013 0f0c 	tst.w	r3, #12
 8007fca:	d003      	beq.n	8007fd4 <HAL_DSI_IRQHandler+0x9a>
      hdsi->ErrorCode |= HAL_DSI_ERROR_ECC;
 8007fcc:	6962      	ldr	r2, [r4, #20]
 8007fce:	f042 0210 	orr.w	r2, r2, #16
 8007fd2:	6162      	str	r2, [r4, #20]
    if ((ErrorStatus1 & DSI_ERROR_CRC_MASK) != 0U)
 8007fd4:	06da      	lsls	r2, r3, #27
 8007fd6:	d503      	bpl.n	8007fe0 <HAL_DSI_IRQHandler+0xa6>
      hdsi->ErrorCode |= HAL_DSI_ERROR_CRC;
 8007fd8:	6962      	ldr	r2, [r4, #20]
 8007fda:	f042 0220 	orr.w	r2, r2, #32
 8007fde:	6162      	str	r2, [r4, #20]
    if ((ErrorStatus1 & DSI_ERROR_PSE_MASK) != 0U)
 8007fe0:	0698      	lsls	r0, r3, #26
 8007fe2:	d503      	bpl.n	8007fec <HAL_DSI_IRQHandler+0xb2>
      hdsi->ErrorCode |= HAL_DSI_ERROR_PSE;
 8007fe4:	6962      	ldr	r2, [r4, #20]
 8007fe6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007fea:	6162      	str	r2, [r4, #20]
    if ((ErrorStatus1 & DSI_ERROR_EOT_MASK) != 0U)
 8007fec:	0659      	lsls	r1, r3, #25
 8007fee:	d503      	bpl.n	8007ff8 <HAL_DSI_IRQHandler+0xbe>
      hdsi->ErrorCode |= HAL_DSI_ERROR_EOT;
 8007ff0:	6962      	ldr	r2, [r4, #20]
 8007ff2:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8007ff6:	6162      	str	r2, [r4, #20]
    if ((ErrorStatus1 & DSI_ERROR_OVF_MASK) != 0U)
 8007ff8:	061a      	lsls	r2, r3, #24
 8007ffa:	d503      	bpl.n	8008004 <HAL_DSI_IRQHandler+0xca>
      hdsi->ErrorCode |= HAL_DSI_ERROR_OVF;
 8007ffc:	6962      	ldr	r2, [r4, #20]
 8007ffe:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008002:	6162      	str	r2, [r4, #20]
    if ((ErrorStatus1 & DSI_ERROR_GEN_MASK) != 0U)
 8008004:	f413 5ff8 	tst.w	r3, #7936	@ 0x1f00
 8008008:	d003      	beq.n	8008012 <HAL_DSI_IRQHandler+0xd8>
      hdsi->ErrorCode |= HAL_DSI_ERROR_GEN;
 800800a:	6963      	ldr	r3, [r4, #20]
 800800c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8008010:	6163      	str	r3, [r4, #20]
    if (hdsi->ErrorCode != HAL_DSI_ERROR_NONE)
 8008012:	6963      	ldr	r3, [r4, #20]
 8008014:	b113      	cbz	r3, 800801c <HAL_DSI_IRQHandler+0xe2>
      HAL_DSI_ErrorCallback(hdsi);
 8008016:	4620      	mov	r0, r4
 8008018:	f7ff ff8e 	bl	8007f38 <HAL_DSI_ErrorCallback>
}
 800801c:	bd10      	pop	{r4, pc}

0800801e <HAL_DSI_SetGenericVCID>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_SetGenericVCID(DSI_HandleTypeDef *hdsi, uint32_t VirtualChannelID)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 800801e:	7c02      	ldrb	r2, [r0, #16]
{
 8008020:	4603      	mov	r3, r0
  __HAL_LOCK(hdsi);
 8008022:	2a01      	cmp	r2, #1
 8008024:	d00a      	beq.n	800803c <HAL_DSI_SetGenericVCID+0x1e>

  /* Update the GVCID register */
  hdsi->Instance->GVCIDR &= ~DSI_GVCIDR_VCID;
 8008026:	6802      	ldr	r2, [r0, #0]
 8008028:	6b10      	ldr	r0, [r2, #48]	@ 0x30
 800802a:	f020 0003 	bic.w	r0, r0, #3
 800802e:	6310      	str	r0, [r2, #48]	@ 0x30
  hdsi->Instance->GVCIDR |= VirtualChannelID;
 8008030:	6b10      	ldr	r0, [r2, #48]	@ 0x30
 8008032:	4301      	orrs	r1, r0

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8008034:	2000      	movs	r0, #0
  hdsi->Instance->GVCIDR |= VirtualChannelID;
 8008036:	6311      	str	r1, [r2, #48]	@ 0x30
  __HAL_UNLOCK(hdsi);
 8008038:	7418      	strb	r0, [r3, #16]

  return HAL_OK;
 800803a:	4770      	bx	lr
  __HAL_LOCK(hdsi);
 800803c:	2002      	movs	r0, #2
}
 800803e:	4770      	bx	lr

08008040 <HAL_DSI_ConfigAdaptedCommandMode>:
  * @param  CmdCfg  pointer to a DSI_CmdCfgTypeDef structure that contains
  *                 the DSI command mode configuration parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigAdaptedCommandMode(DSI_HandleTypeDef *hdsi, DSI_CmdCfgTypeDef *CmdCfg)
{
 8008040:	b530      	push	{r4, r5, lr}
  /* Process locked */
  __HAL_LOCK(hdsi);
 8008042:	7c03      	ldrb	r3, [r0, #16]
{
 8008044:	4604      	mov	r4, r0
  __HAL_LOCK(hdsi);
 8008046:	2b01      	cmp	r3, #1
 8008048:	d069      	beq.n	800811e <HAL_DSI_ConfigAdaptedCommandMode+0xde>
  assert_param(IS_DSI_DE_POLARITY(CmdCfg->DEPolarity));
  assert_param(IS_DSI_VSYNC_POLARITY(CmdCfg->VSPolarity));
  assert_param(IS_DSI_HSYNC_POLARITY(CmdCfg->HSPolarity));

  /* Select command mode by setting CMDM and DSIM bits */
  hdsi->Instance->MCR |= DSI_MCR_CMDM;
 800804a:	6803      	ldr	r3, [r0, #0]
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_DSIM;
  hdsi->Instance->WCFGR |= DSI_WCFGR_DSIM;

  /* Select the virtual channel for the LTDC interface traffic */
  hdsi->Instance->LVCIDR &= ~DSI_LVCIDR_VCID;
  hdsi->Instance->LVCIDR |= CmdCfg->VirtualChannelID;
 800804c:	6808      	ldr	r0, [r1, #0]
  hdsi->Instance->MCR |= DSI_MCR_CMDM;
 800804e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008050:	f042 0201 	orr.w	r2, r2, #1
 8008054:	635a      	str	r2, [r3, #52]	@ 0x34
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_DSIM;
 8008056:	f8d3 2400 	ldr.w	r2, [r3, #1024]	@ 0x400
 800805a:	f022 0201 	bic.w	r2, r2, #1
 800805e:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
  hdsi->Instance->WCFGR |= DSI_WCFGR_DSIM;
 8008062:	f8d3 2400 	ldr.w	r2, [r3, #1024]	@ 0x400
 8008066:	f042 0201 	orr.w	r2, r2, #1
 800806a:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
  hdsi->Instance->LVCIDR &= ~DSI_LVCIDR_VCID;
 800806e:	68da      	ldr	r2, [r3, #12]
 8008070:	f022 0203 	bic.w	r2, r2, #3
 8008074:	60da      	str	r2, [r3, #12]
  hdsi->Instance->LVCIDR |= CmdCfg->VirtualChannelID;
 8008076:	68da      	ldr	r2, [r3, #12]
 8008078:	4302      	orrs	r2, r0
 800807a:	60da      	str	r2, [r3, #12]

  /* Configure the polarity of control signals */
  hdsi->Instance->LPCR &= ~(DSI_LPCR_DEP | DSI_LPCR_VSP | DSI_LPCR_HSP);
 800807c:	695a      	ldr	r2, [r3, #20]
 800807e:	f022 0207 	bic.w	r2, r2, #7
 8008082:	615a      	str	r2, [r3, #20]
  hdsi->Instance->LPCR |= (CmdCfg->DEPolarity | CmdCfg->VSPolarity | CmdCfg->HSPolarity);
 8008084:	6958      	ldr	r0, [r3, #20]
 8008086:	e9d1 5206 	ldrd	r5, r2, [r1, #24]
 800808a:	432a      	orrs	r2, r5
 800808c:	694d      	ldr	r5, [r1, #20]
 800808e:	432a      	orrs	r2, r5
 8008090:	4302      	orrs	r2, r0

  /* Select the color coding for the host */
  hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_COLC;
  hdsi->Instance->LCOLCR |= CmdCfg->ColorCoding;
 8008092:	6848      	ldr	r0, [r1, #4]
  hdsi->Instance->LPCR |= (CmdCfg->DEPolarity | CmdCfg->VSPolarity | CmdCfg->HSPolarity);
 8008094:	615a      	str	r2, [r3, #20]
  hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_COLC;
 8008096:	691a      	ldr	r2, [r3, #16]
 8008098:	f022 020f 	bic.w	r2, r2, #15
 800809c:	611a      	str	r2, [r3, #16]
  hdsi->Instance->LCOLCR |= CmdCfg->ColorCoding;
 800809e:	691a      	ldr	r2, [r3, #16]
 80080a0:	4302      	orrs	r2, r0
 80080a2:	611a      	str	r2, [r3, #16]

  /* Select the color coding for the wrapper */
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_COLMUX;
 80080a4:	f8d3 2400 	ldr.w	r2, [r3, #1024]	@ 0x400
 80080a8:	f022 020e 	bic.w	r2, r2, #14
 80080ac:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
  hdsi->Instance->WCFGR |= ((CmdCfg->ColorCoding) << 1U);
 80080b0:	f8d3 2400 	ldr.w	r2, [r3, #1024]	@ 0x400
 80080b4:	ea42 0240 	orr.w	r2, r2, r0, lsl #1

  /* Configure the maximum allowed size for write memory command */
  hdsi->Instance->LCCR &= ~DSI_LCCR_CMDSIZE;
  hdsi->Instance->LCCR |= CmdCfg->CommandSize;
 80080b8:	6888      	ldr	r0, [r1, #8]
  hdsi->Instance->WCFGR |= ((CmdCfg->ColorCoding) << 1U);
 80080ba:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
  hdsi->Instance->LCCR &= ~DSI_LCCR_CMDSIZE;
 80080be:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80080c0:	0c12      	lsrs	r2, r2, #16
 80080c2:	0412      	lsls	r2, r2, #16
 80080c4:	665a      	str	r2, [r3, #100]	@ 0x64
  hdsi->Instance->LCCR |= CmdCfg->CommandSize;
 80080c6:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80080c8:	4302      	orrs	r2, r0
 80080ca:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Configure the tearing effect source and polarity and select the refresh mode */
  hdsi->Instance->WCFGR &= ~(DSI_WCFGR_TESRC | DSI_WCFGR_TEPOL | DSI_WCFGR_AR | DSI_WCFGR_VSPOL);
 80080cc:	f8d3 2400 	ldr.w	r2, [r3, #1024]	@ 0x400
 80080d0:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 80080d4:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
  hdsi->Instance->WCFGR |= (CmdCfg->TearingEffectSource | CmdCfg->TearingEffectPolarity | CmdCfg->AutomaticRefresh |
 80080d8:	f8d3 0400 	ldr.w	r0, [r3, #1024]	@ 0x400
 80080dc:	e9d1 2503 	ldrd	r2, r5, [r1, #12]
 80080e0:	432a      	orrs	r2, r5
 80080e2:	6a4d      	ldr	r5, [r1, #36]	@ 0x24
 80080e4:	432a      	orrs	r2, r5
 80080e6:	6a0d      	ldr	r5, [r1, #32]
                            CmdCfg->VSyncPol);

  /* Configure the tearing effect acknowledge request */
  hdsi->Instance->CMCR &= ~DSI_CMCR_TEARE;
  hdsi->Instance->CMCR |= CmdCfg->TEAcknowledgeRequest;
 80080e8:	6a89      	ldr	r1, [r1, #40]	@ 0x28
  hdsi->Instance->WCFGR |= (CmdCfg->TearingEffectSource | CmdCfg->TearingEffectPolarity | CmdCfg->AutomaticRefresh |
 80080ea:	432a      	orrs	r2, r5
 80080ec:	4302      	orrs	r2, r0

  /* Enable the End of Refresh interrupt */
  __HAL_DSI_ENABLE_IT(hdsi, DSI_IT_ER);

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80080ee:	2000      	movs	r0, #0
  hdsi->Instance->WCFGR |= (CmdCfg->TearingEffectSource | CmdCfg->TearingEffectPolarity | CmdCfg->AutomaticRefresh |
 80080f0:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
  hdsi->Instance->CMCR &= ~DSI_CMCR_TEARE;
 80080f4:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 80080f6:	f022 0201 	bic.w	r2, r2, #1
 80080fa:	669a      	str	r2, [r3, #104]	@ 0x68
  hdsi->Instance->CMCR |= CmdCfg->TEAcknowledgeRequest;
 80080fc:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 80080fe:	430a      	orrs	r2, r1
 8008100:	669a      	str	r2, [r3, #104]	@ 0x68
  __HAL_DSI_ENABLE_IT(hdsi, DSI_IT_TE);
 8008102:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 8008106:	f042 0201 	orr.w	r2, r2, #1
 800810a:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408
  __HAL_DSI_ENABLE_IT(hdsi, DSI_IT_ER);
 800810e:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 8008112:	f042 0202 	orr.w	r2, r2, #2
 8008116:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408
  __HAL_UNLOCK(hdsi);
 800811a:	7420      	strb	r0, [r4, #16]

  return HAL_OK;
}
 800811c:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(hdsi);
 800811e:	2002      	movs	r0, #2
 8008120:	e7fc      	b.n	800811c <HAL_DSI_ConfigAdaptedCommandMode+0xdc>
	...

08008124 <HAL_DSI_ConfigCommand>:
  * @param  LPCmd  pointer to a DSI_LPCmdTypeDef structure that contains
  *                the DSI command transmission mode configuration parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigCommand(DSI_HandleTypeDef *hdsi, DSI_LPCmdTypeDef *LPCmd)
{
 8008124:	b530      	push	{r4, r5, lr}
  /* Process locked */
  __HAL_LOCK(hdsi);
 8008126:	7c03      	ldrb	r3, [r0, #16]
{
 8008128:	4602      	mov	r2, r0
  __HAL_LOCK(hdsi);
 800812a:	2b01      	cmp	r3, #1
 800812c:	d029      	beq.n	8008182 <HAL_DSI_ConfigCommand+0x5e>
  assert_param(IS_DSI_LP_DLW(LPCmd->LPDcsLongWrite));
  assert_param(IS_DSI_LP_MRDP(LPCmd->LPMaxReadPacket));
  assert_param(IS_DSI_ACK_REQUEST(LPCmd->AcknowledgeRequest));

  /* Select High-speed or Low-power for command transmission */
  hdsi->Instance->CMCR &= ~(DSI_CMCR_GSW0TX | \
 800812e:	6800      	ldr	r0, [r0, #0]
 8008130:	4b15      	ldr	r3, [pc, #84]	@ (8008188 <HAL_DSI_ConfigCommand+0x64>)
 8008132:	6e84      	ldr	r4, [r0, #104]	@ 0x68
 8008134:	4023      	ands	r3, r4
 8008136:	6683      	str	r3, [r0, #104]	@ 0x68
                            DSI_CMCR_DSW0TX | \
                            DSI_CMCR_DSW1TX | \
                            DSI_CMCR_DSR0TX | \
                            DSI_CMCR_DLWTX  | \
                            DSI_CMCR_MRDPS);
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  | \
 8008138:	6e84      	ldr	r4, [r0, #104]	@ 0x68
 800813a:	e9d1 3500 	ldrd	r3, r5, [r1]
 800813e:	432b      	orrs	r3, r5
                           LPCmd->LPGenShortWriteOneP | \
 8008140:	688d      	ldr	r5, [r1, #8]
 8008142:	432b      	orrs	r3, r5
                           LPCmd->LPGenShortWriteTwoP | \
 8008144:	68cd      	ldr	r5, [r1, #12]
 8008146:	432b      	orrs	r3, r5
                           LPCmd->LPGenShortReadNoP   | \
 8008148:	690d      	ldr	r5, [r1, #16]
 800814a:	432b      	orrs	r3, r5
                           LPCmd->LPGenShortReadOneP  | \
 800814c:	694d      	ldr	r5, [r1, #20]
 800814e:	432b      	orrs	r3, r5
                           LPCmd->LPGenShortReadTwoP  | \
 8008150:	698d      	ldr	r5, [r1, #24]
 8008152:	432b      	orrs	r3, r5
                           LPCmd->LPGenLongWrite      | \
 8008154:	69cd      	ldr	r5, [r1, #28]
 8008156:	432b      	orrs	r3, r5
                           LPCmd->LPDcsShortWriteNoP  | \
 8008158:	6a0d      	ldr	r5, [r1, #32]
 800815a:	432b      	orrs	r3, r5
                           LPCmd->LPDcsShortWriteOneP | \
 800815c:	6a4d      	ldr	r5, [r1, #36]	@ 0x24
 800815e:	432b      	orrs	r3, r5
                           LPCmd->LPDcsShortReadNoP   | \
 8008160:	6a8d      	ldr	r5, [r1, #40]	@ 0x28
 8008162:	432b      	orrs	r3, r5
                           LPCmd->LPDcsLongWrite      | \
 8008164:	6acd      	ldr	r5, [r1, #44]	@ 0x2c
                           LPCmd->LPMaxReadPacket);

  /* Configure the acknowledge request after each packet transmission */
  hdsi->Instance->CMCR &= ~DSI_CMCR_ARE;
  hdsi->Instance->CMCR |= LPCmd->AcknowledgeRequest;
 8008166:	6b09      	ldr	r1, [r1, #48]	@ 0x30
                           LPCmd->LPDcsLongWrite      | \
 8008168:	432b      	orrs	r3, r5
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  | \
 800816a:	4323      	orrs	r3, r4
 800816c:	6683      	str	r3, [r0, #104]	@ 0x68
  hdsi->Instance->CMCR &= ~DSI_CMCR_ARE;
 800816e:	6e83      	ldr	r3, [r0, #104]	@ 0x68
 8008170:	f023 0302 	bic.w	r3, r3, #2
 8008174:	6683      	str	r3, [r0, #104]	@ 0x68
  hdsi->Instance->CMCR |= LPCmd->AcknowledgeRequest;
 8008176:	6e83      	ldr	r3, [r0, #104]	@ 0x68
 8008178:	430b      	orrs	r3, r1
 800817a:	6683      	str	r3, [r0, #104]	@ 0x68

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800817c:	2000      	movs	r0, #0
 800817e:	7410      	strb	r0, [r2, #16]

  return HAL_OK;
}
 8008180:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(hdsi);
 8008182:	2002      	movs	r0, #2
 8008184:	e7fc      	b.n	8008180 <HAL_DSI_ConfigCommand+0x5c>
 8008186:	bf00      	nop
 8008188:	fef080ff 	.word	0xfef080ff

0800818c <HAL_DSI_ConfigFlowControl>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigFlowControl(DSI_HandleTypeDef *hdsi, uint32_t FlowControl)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 800818c:	7c02      	ldrb	r2, [r0, #16]
{
 800818e:	4603      	mov	r3, r0
  __HAL_LOCK(hdsi);
 8008190:	2a01      	cmp	r2, #1
 8008192:	d00a      	beq.n	80081aa <HAL_DSI_ConfigFlowControl+0x1e>

  /* Check the parameters */
  assert_param(IS_DSI_FLOW_CONTROL(FlowControl));

  /* Set the DSI Host Protocol Configuration Register */
  hdsi->Instance->PCR &= ~DSI_FLOW_CONTROL_ALL;
 8008194:	6802      	ldr	r2, [r0, #0]
 8008196:	6ad0      	ldr	r0, [r2, #44]	@ 0x2c
 8008198:	f020 001f 	bic.w	r0, r0, #31
 800819c:	62d0      	str	r0, [r2, #44]	@ 0x2c
  hdsi->Instance->PCR |= FlowControl;
 800819e:	6ad0      	ldr	r0, [r2, #44]	@ 0x2c
 80081a0:	4301      	orrs	r1, r0

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80081a2:	2000      	movs	r0, #0
  hdsi->Instance->PCR |= FlowControl;
 80081a4:	62d1      	str	r1, [r2, #44]	@ 0x2c
  __HAL_UNLOCK(hdsi);
 80081a6:	7418      	strb	r0, [r3, #16]

  return HAL_OK;
 80081a8:	4770      	bx	lr
  __HAL_LOCK(hdsi);
 80081aa:	2002      	movs	r0, #2
}
 80081ac:	4770      	bx	lr

080081ae <HAL_DSI_ConfigPhyTimer>:
  * @param  PhyTimers  DSI_PHY_TimerTypeDef structure that contains
  *                    the DSI PHY timing parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigPhyTimer(DSI_HandleTypeDef *hdsi, DSI_PHY_TimerTypeDef *PhyTimers)
{
 80081ae:	b530      	push	{r4, r5, lr}
  uint32_t maxTime;
  /* Process locked */
  __HAL_LOCK(hdsi);
 80081b0:	7c03      	ldrb	r3, [r0, #16]
{
 80081b2:	4604      	mov	r4, r0
  __HAL_LOCK(hdsi);
 80081b4:	2b01      	cmp	r3, #1
 80081b6:	d034      	beq.n	8008222 <HAL_DSI_ConfigPhyTimer+0x74>

  maxTime = (PhyTimers->ClockLaneLP2HSTime > PhyTimers->ClockLaneHS2LPTime) ? PhyTimers->ClockLaneLP2HSTime :
 80081b8:	e9d1 0300 	ldrd	r0, r3, [r1]
 80081bc:	4298      	cmp	r0, r3
 80081be:	bf38      	it	cc
 80081c0:	4618      	movcc	r0, r3
     Register (DSI_CLTCR).
     But the DSI Host is not calculating LP2HS_TIME + HS2LP_TIME but 2 x HS2LP_TIME.

     Workaround : Configure HS2LP_TIME and LP2HS_TIME with the same value being the max of HS2LP_TIME or LP2HS_TIME.
    */
  hdsi->Instance->CLTCR &= ~(DSI_CLTCR_LP2HS_TIME | DSI_CLTCR_HS2LP_TIME);
 80081c2:	6823      	ldr	r3, [r4, #0]
 80081c4:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 80081c8:	f002 22fc 	and.w	r2, r2, #4227922944	@ 0xfc00fc00
 80081cc:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  hdsi->Instance->CLTCR |= (maxTime | ((maxTime) << 16U));
 80081d0:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 80081d4:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80081d8:	4302      	orrs	r2, r0
 80081da:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98

  /* Data lane timer configuration */
  hdsi->Instance->DLTCR &= ~(DSI_DLTCR_MRD_TIME | DSI_DLTCR_LP2HS_TIME | DSI_DLTCR_HS2LP_TIME);
 80081de:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 80081e2:	f402 4200 	and.w	r2, r2, #32768	@ 0x8000
 80081e6:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 80081ea:	f8d3 009c 	ldr.w	r0, [r3, #156]	@ 0x9c
                              PhyTimers->DataLaneHS2LPTime) << 24U));
 80081ee:	e9d1 2502 	ldrd	r2, r5, [r1, #8]
 80081f2:	0612      	lsls	r2, r2, #24
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 80081f4:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
 80081f8:	690d      	ldr	r5, [r1, #16]

  /* Configure the wait period to request HS transmission after a stop state */
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_SW_TIME;
  hdsi->Instance->PCONFR |= ((PhyTimers->StopWaitTime) << 8U);
 80081fa:	6949      	ldr	r1, [r1, #20]
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 80081fc:	432a      	orrs	r2, r5
 80081fe:	4302      	orrs	r2, r0

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8008200:	2000      	movs	r0, #0
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 8008202:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_SW_TIME;
 8008206:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 800820a:	f422 427f 	bic.w	r2, r2, #65280	@ 0xff00
 800820e:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  hdsi->Instance->PCONFR |= ((PhyTimers->StopWaitTime) << 8U);
 8008212:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 8008216:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800821a:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  __HAL_UNLOCK(hdsi);
 800821e:	7420      	strb	r0, [r4, #16]

  return HAL_OK;
}
 8008220:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(hdsi);
 8008222:	2002      	movs	r0, #2
 8008224:	e7fc      	b.n	8008220 <HAL_DSI_ConfigPhyTimer+0x72>
	...

08008228 <HAL_DSI_ConfigHostTimeouts>:
  * @param  HostTimeouts  DSI_HOST_TimeoutTypeDef structure that contains
  *                       the DSI host timeout parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigHostTimeouts(DSI_HandleTypeDef *hdsi, DSI_HOST_TimeoutTypeDef *HostTimeouts)
{
 8008228:	b530      	push	{r4, r5, lr}
  /* Process locked */
  __HAL_LOCK(hdsi);
 800822a:	7c03      	ldrb	r3, [r0, #16]
{
 800822c:	4604      	mov	r4, r0
  __HAL_LOCK(hdsi);
 800822e:	2b01      	cmp	r3, #1
 8008230:	d05b      	beq.n	80082ea <HAL_DSI_ConfigHostTimeouts+0xc2>

  /* Set the timeout clock division factor */
  hdsi->Instance->CCR &= ~DSI_CCR_TOCKDIV;
 8008232:	6803      	ldr	r3, [r0, #0]
  hdsi->Instance->CCR |= ((HostTimeouts->TimeoutCkdiv) << 8U);
 8008234:	6808      	ldr	r0, [r1, #0]
  hdsi->Instance->CCR &= ~DSI_CCR_TOCKDIV;
 8008236:	689a      	ldr	r2, [r3, #8]
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_HSTX_TOCNT;
  hdsi->Instance->TCCR[0U] |= ((HostTimeouts->HighSpeedTransmissionTimeout) << 16U);

  /* Low-power reception timeout */
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_LPRX_TOCNT;
  hdsi->Instance->TCCR[0U] |= HostTimeouts->LowPowerReceptionTimeout;
 8008238:	688d      	ldr	r5, [r1, #8]
  hdsi->Instance->CCR &= ~DSI_CCR_TOCKDIV;
 800823a:	f422 427f 	bic.w	r2, r2, #65280	@ 0xff00
 800823e:	609a      	str	r2, [r3, #8]
  hdsi->Instance->CCR |= ((HostTimeouts->TimeoutCkdiv) << 8U);
 8008240:	689a      	ldr	r2, [r3, #8]
 8008242:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
  hdsi->Instance->TCCR[0U] |= ((HostTimeouts->HighSpeedTransmissionTimeout) << 16U);
 8008246:	6848      	ldr	r0, [r1, #4]
  hdsi->Instance->CCR |= ((HostTimeouts->TimeoutCkdiv) << 8U);
 8008248:	609a      	str	r2, [r3, #8]
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_HSTX_TOCNT;
 800824a:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
 800824c:	b292      	uxth	r2, r2
 800824e:	679a      	str	r2, [r3, #120]	@ 0x78
  hdsi->Instance->TCCR[0U] |= ((HostTimeouts->HighSpeedTransmissionTimeout) << 16U);
 8008250:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
 8008252:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8008256:	679a      	str	r2, [r3, #120]	@ 0x78
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_LPRX_TOCNT;
 8008258:	4a25      	ldr	r2, [pc, #148]	@ (80082f0 <HAL_DSI_ConfigHostTimeouts+0xc8>)
 800825a:	6f98      	ldr	r0, [r3, #120]	@ 0x78
 800825c:	4010      	ands	r0, r2
 800825e:	6798      	str	r0, [r3, #120]	@ 0x78
  hdsi->Instance->TCCR[0U] |= HostTimeouts->LowPowerReceptionTimeout;
 8008260:	6f98      	ldr	r0, [r3, #120]	@ 0x78
 8008262:	4328      	orrs	r0, r5

  /* High-speed read timeout */
  hdsi->Instance->TCCR[1U] &= ~DSI_TCCR1_HSRD_TOCNT;
  hdsi->Instance->TCCR[1U] |= HostTimeouts->HighSpeedReadTimeout;
 8008264:	68cd      	ldr	r5, [r1, #12]
  hdsi->Instance->TCCR[0U] |= HostTimeouts->LowPowerReceptionTimeout;
 8008266:	6798      	str	r0, [r3, #120]	@ 0x78
  hdsi->Instance->TCCR[1U] &= ~DSI_TCCR1_HSRD_TOCNT;
 8008268:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 800826a:	4010      	ands	r0, r2
 800826c:	67d8      	str	r0, [r3, #124]	@ 0x7c
  hdsi->Instance->TCCR[1U] |= HostTimeouts->HighSpeedReadTimeout;
 800826e:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 8008270:	4328      	orrs	r0, r5

  /* Low-power read timeout */
  hdsi->Instance->TCCR[2U] &= ~DSI_TCCR2_LPRD_TOCNT;
  hdsi->Instance->TCCR[2U] |= HostTimeouts->LowPowerReadTimeout;
 8008272:	690d      	ldr	r5, [r1, #16]
  hdsi->Instance->TCCR[1U] |= HostTimeouts->HighSpeedReadTimeout;
 8008274:	67d8      	str	r0, [r3, #124]	@ 0x7c
  hdsi->Instance->TCCR[2U] &= ~DSI_TCCR2_LPRD_TOCNT;
 8008276:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 800827a:	4010      	ands	r0, r2
 800827c:	f8c3 0080 	str.w	r0, [r3, #128]	@ 0x80
  hdsi->Instance->TCCR[2U] |= HostTimeouts->LowPowerReadTimeout;
 8008280:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 8008284:	4328      	orrs	r0, r5

  /* High-speed write timeout */
  hdsi->Instance->TCCR[3U] &= ~DSI_TCCR3_HSWR_TOCNT;
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWriteTimeout;
 8008286:	694d      	ldr	r5, [r1, #20]
  hdsi->Instance->TCCR[2U] |= HostTimeouts->LowPowerReadTimeout;
 8008288:	f8c3 0080 	str.w	r0, [r3, #128]	@ 0x80
  hdsi->Instance->TCCR[3U] &= ~DSI_TCCR3_HSWR_TOCNT;
 800828c:	f8d3 0084 	ldr.w	r0, [r3, #132]	@ 0x84
 8008290:	4010      	ands	r0, r2
 8008292:	f8c3 0084 	str.w	r0, [r3, #132]	@ 0x84
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWriteTimeout;
 8008296:	f8d3 0084 	ldr.w	r0, [r3, #132]	@ 0x84
 800829a:	4328      	orrs	r0, r5
 800829c:	f8c3 0084 	str.w	r0, [r3, #132]	@ 0x84

  /* High-speed write presp mode */
  hdsi->Instance->TCCR[3U] &= ~DSI_TCCR3_PM;
 80082a0:	f8d3 0084 	ldr.w	r0, [r3, #132]	@ 0x84
 80082a4:	f020 7080 	bic.w	r0, r0, #16777216	@ 0x1000000
 80082a8:	f8c3 0084 	str.w	r0, [r3, #132]	@ 0x84
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWritePrespMode;
 80082ac:	f8d3 0084 	ldr.w	r0, [r3, #132]	@ 0x84
 80082b0:	698d      	ldr	r5, [r1, #24]
 80082b2:	4328      	orrs	r0, r5

  /* Low-speed write timeout */
  hdsi->Instance->TCCR[4U] &= ~DSI_TCCR4_LPWR_TOCNT;
  hdsi->Instance->TCCR[4U] |= HostTimeouts->LowPowerWriteTimeout;
 80082b4:	69cd      	ldr	r5, [r1, #28]

  /* BTA timeout */
  hdsi->Instance->TCCR[5U] &= ~DSI_TCCR5_BTA_TOCNT;
  hdsi->Instance->TCCR[5U] |= HostTimeouts->BTATimeout;
 80082b6:	6a09      	ldr	r1, [r1, #32]
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWritePrespMode;
 80082b8:	f8c3 0084 	str.w	r0, [r3, #132]	@ 0x84
  hdsi->Instance->TCCR[4U] &= ~DSI_TCCR4_LPWR_TOCNT;
 80082bc:	f8d3 0088 	ldr.w	r0, [r3, #136]	@ 0x88
 80082c0:	4010      	ands	r0, r2
 80082c2:	f8c3 0088 	str.w	r0, [r3, #136]	@ 0x88
  hdsi->Instance->TCCR[4U] |= HostTimeouts->LowPowerWriteTimeout;
 80082c6:	f8d3 0088 	ldr.w	r0, [r3, #136]	@ 0x88
 80082ca:	4328      	orrs	r0, r5
 80082cc:	f8c3 0088 	str.w	r0, [r3, #136]	@ 0x88
  hdsi->Instance->TCCR[5U] &= ~DSI_TCCR5_BTA_TOCNT;
 80082d0:	f8d3 008c 	ldr.w	r0, [r3, #140]	@ 0x8c
 80082d4:	4002      	ands	r2, r0

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80082d6:	2000      	movs	r0, #0
  hdsi->Instance->TCCR[5U] &= ~DSI_TCCR5_BTA_TOCNT;
 80082d8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  hdsi->Instance->TCCR[5U] |= HostTimeouts->BTATimeout;
 80082dc:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 80082e0:	430a      	orrs	r2, r1
 80082e2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  __HAL_UNLOCK(hdsi);
 80082e6:	7420      	strb	r0, [r4, #16]

  return HAL_OK;
}
 80082e8:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(hdsi);
 80082ea:	2002      	movs	r0, #2
 80082ec:	e7fc      	b.n	80082e8 <HAL_DSI_ConfigHostTimeouts+0xc0>
 80082ee:	bf00      	nop
 80082f0:	ffff0000 	.word	0xffff0000

080082f4 <HAL_DSI_Start>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Start(DSI_HandleTypeDef *hdsi)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 80082f4:	7c03      	ldrb	r3, [r0, #16]
{
 80082f6:	b082      	sub	sp, #8
  __HAL_LOCK(hdsi);
 80082f8:	2b01      	cmp	r3, #1
 80082fa:	d01c      	beq.n	8008336 <HAL_DSI_Start+0x42>

  /* Enable the DSI host */
  __HAL_DSI_ENABLE(hdsi);
 80082fc:	6802      	ldr	r2, [r0, #0]
 80082fe:	2300      	movs	r3, #0
 8008300:	9300      	str	r3, [sp, #0]
 8008302:	6851      	ldr	r1, [r2, #4]
 8008304:	f041 0101 	orr.w	r1, r1, #1
 8008308:	6051      	str	r1, [r2, #4]
 800830a:	6851      	ldr	r1, [r2, #4]
 800830c:	f001 0101 	and.w	r1, r1, #1
 8008310:	9100      	str	r1, [sp, #0]
 8008312:	9900      	ldr	r1, [sp, #0]

  /* Enable the DSI wrapper */
  __HAL_DSI_WRAPPER_ENABLE(hdsi);
 8008314:	9301      	str	r3, [sp, #4]
 8008316:	f8d2 1404 	ldr.w	r1, [r2, #1028]	@ 0x404
 800831a:	f041 0108 	orr.w	r1, r1, #8
 800831e:	f8c2 1404 	str.w	r1, [r2, #1028]	@ 0x404
 8008322:	f8d2 2404 	ldr.w	r2, [r2, #1028]	@ 0x404

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8008326:	7403      	strb	r3, [r0, #16]

  return HAL_OK;
 8008328:	4618      	mov	r0, r3
  __HAL_DSI_WRAPPER_ENABLE(hdsi);
 800832a:	f002 0208 	and.w	r2, r2, #8
 800832e:	9201      	str	r2, [sp, #4]
 8008330:	9a01      	ldr	r2, [sp, #4]
}
 8008332:	b002      	add	sp, #8
 8008334:	4770      	bx	lr
  __HAL_LOCK(hdsi);
 8008336:	2002      	movs	r0, #2
 8008338:	e7fb      	b.n	8008332 <HAL_DSI_Start+0x3e>

0800833a <HAL_DSI_Refresh>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Refresh(DSI_HandleTypeDef *hdsi)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 800833a:	7c02      	ldrb	r2, [r0, #16]
{
 800833c:	4603      	mov	r3, r0
  __HAL_LOCK(hdsi);
 800833e:	2a01      	cmp	r2, #1
 8008340:	d009      	beq.n	8008356 <HAL_DSI_Refresh+0x1c>

  /* Update the display */
  hdsi->Instance->WCR |= DSI_WCR_LTDCEN;
 8008342:	6801      	ldr	r1, [r0, #0]

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8008344:	2000      	movs	r0, #0
  hdsi->Instance->WCR |= DSI_WCR_LTDCEN;
 8008346:	f8d1 2404 	ldr.w	r2, [r1, #1028]	@ 0x404
 800834a:	f042 0204 	orr.w	r2, r2, #4
 800834e:	f8c1 2404 	str.w	r2, [r1, #1028]	@ 0x404
  __HAL_UNLOCK(hdsi);
 8008352:	7418      	strb	r0, [r3, #16]

  return HAL_OK;
 8008354:	4770      	bx	lr
  __HAL_LOCK(hdsi);
 8008356:	2002      	movs	r0, #2
}
 8008358:	4770      	bx	lr

0800835a <HAL_DSI_ShortWrite>:
HAL_StatusTypeDef HAL_DSI_ShortWrite(DSI_HandleTypeDef *hdsi,
                                     uint32_t ChannelID,
                                     uint32_t Mode,
                                     uint32_t Param1,
                                     uint32_t Param2)
{
 800835a:	b537      	push	{r0, r1, r2, r4, r5, lr}
  HAL_StatusTypeDef status;
  /* Check the parameters */
  assert_param(IS_DSI_SHORT_WRITE_PACKET_TYPE(Mode));

  /* Process locked */
  __HAL_LOCK(hdsi);
 800835c:	7c05      	ldrb	r5, [r0, #16]
{
 800835e:	4604      	mov	r4, r0
  __HAL_LOCK(hdsi);
 8008360:	2d01      	cmp	r5, #1
 8008362:	d009      	beq.n	8008378 <HAL_DSI_ShortWrite+0x1e>
 8008364:	2501      	movs	r5, #1
 8008366:	7405      	strb	r5, [r0, #16]

  status = DSI_ShortWrite(hdsi, ChannelID, Mode, Param1, Param2);
 8008368:	9d06      	ldr	r5, [sp, #24]
 800836a:	9500      	str	r5, [sp, #0]
 800836c:	f7ff fc6c 	bl	8007c48 <DSI_ShortWrite.constprop.0>

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8008370:	2300      	movs	r3, #0
 8008372:	7423      	strb	r3, [r4, #16]

  return status;
}
 8008374:	b003      	add	sp, #12
 8008376:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(hdsi);
 8008378:	2002      	movs	r0, #2
 800837a:	e7fb      	b.n	8008374 <HAL_DSI_ShortWrite+0x1a>

0800837c <HAL_DSI_LongWrite>:
                                    uint32_t ChannelID,
                                    uint32_t Mode,
                                    uint32_t NbParams,
                                    uint32_t Param1,
                                    const uint8_t *ParametersTable)
{
 800837c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008380:	461c      	mov	r4, r3
  uint32_t tickstart;
  uint32_t fifoword;
  const uint8_t *pparams = ParametersTable;

  /* Process locked */
  __HAL_LOCK(hdsi);
 8008382:	7c03      	ldrb	r3, [r0, #16]
{
 8008384:	4606      	mov	r6, r0
 8008386:	460f      	mov	r7, r1
  __HAL_LOCK(hdsi);
 8008388:	2b01      	cmp	r3, #1
{
 800838a:	4615      	mov	r5, r2
 800838c:	e9dd 980a 	ldrd	r9, r8, [sp, #40]	@ 0x28
  __HAL_LOCK(hdsi);
 8008390:	d052      	beq.n	8008438 <HAL_DSI_LongWrite+0xbc>
 8008392:	2301      	movs	r3, #1
 8008394:	7403      	strb	r3, [r0, #16]

  /* Check the parameters */
  assert_param(IS_DSI_LONG_WRITE_PACKET_TYPE(Mode));

  /* Get tick */
  tickstart = HAL_GetTick();
 8008396:	f7ff fa61 	bl	800785c <HAL_GetTick>
 800839a:	4683      	mov	fp, r0

  /* Wait for Command FIFO Empty */
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 800839c:	6832      	ldr	r2, [r6, #0]
 800839e:	6f53      	ldr	r3, [r2, #116]	@ 0x74
 80083a0:	f013 0a01 	ands.w	sl, r3, #1
 80083a4:	d019      	beq.n	80083da <HAL_DSI_LongWrite+0x5e>
    }
  }

  /* Set the DCS code on payload byte 1, and the other parameters on the write FIFO command*/
  fifoword = Param1;
  nbBytes = (NbParams < 3U) ? NbParams : 3U;
 80083a6:	2c03      	cmp	r4, #3
 80083a8:	4620      	mov	r0, r4

  for (count = 0U; count < nbBytes; count++)
 80083aa:	f04f 0300 	mov.w	r3, #0
  nbBytes = (NbParams < 3U) ? NbParams : 3U;
 80083ae:	bf28      	it	cs
 80083b0:	2003      	movcs	r0, #3
  for (count = 0U; count < nbBytes; count++)
 80083b2:	4283      	cmp	r3, r0
 80083b4:	d11d      	bne.n	80083f2 <HAL_DSI_LongWrite+0x76>
  {
    fifoword |= (((uint32_t)(*(pparams + count))) << (8U + (8U * count)));
  }
  hdsi->Instance->GPDR = fifoword;

  uicounter = NbParams - nbBytes;
 80083b6:	1ae0      	subs	r0, r4, r3
  pparams += nbBytes;
 80083b8:	4443      	add	r3, r8
  hdsi->Instance->GPDR = fifoword;
 80083ba:	f8c2 9070 	str.w	r9, [r2, #112]	@ 0x70
  /* Set the Next parameters on the write FIFO command*/
  while (uicounter != 0U)
 80083be:	bb10      	cbnz	r0, 8008406 <HAL_DSI_LongWrite+0x8a>

  /* Configure the packet to send a long DCS command */
  DSI_ConfigPacketHeader(hdsi->Instance,
                         ChannelID,
                         Mode,
                         ((NbParams + 1U) & 0x00FFU),
 80083c0:	3401      	adds	r4, #1
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 80083c2:	ea45 1587 	orr.w	r5, r5, r7, lsl #6
 80083c6:	0223      	lsls	r3, r4, #8
 80083c8:	0224      	lsls	r4, r4, #8
 80083ca:	b29b      	uxth	r3, r3
 80083cc:	f404 047f 	and.w	r4, r4, #16711680	@ 0xff0000
 80083d0:	431d      	orrs	r5, r3
 80083d2:	4325      	orrs	r5, r4
 80083d4:	66d5      	str	r5, [r2, #108]	@ 0x6c
                         (((NbParams + 1U) & 0xFF00U) >> 8U));

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80083d6:	7430      	strb	r0, [r6, #16]

  return HAL_OK;
 80083d8:	e009      	b.n	80083ee <HAL_DSI_LongWrite+0x72>
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 80083da:	f7ff fa3f 	bl	800785c <HAL_GetTick>
 80083de:	eba0 000b 	sub.w	r0, r0, fp
 80083e2:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 80083e6:	d9d9      	bls.n	800839c <HAL_DSI_LongWrite+0x20>
      return HAL_TIMEOUT;
 80083e8:	2003      	movs	r0, #3
      __HAL_UNLOCK(hdsi);
 80083ea:	f886 a010 	strb.w	sl, [r6, #16]
}
 80083ee:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    fifoword |= (((uint32_t)(*(pparams + count))) << (8U + (8U * count)));
 80083f2:	f818 1003 	ldrb.w	r1, [r8, r3]
 80083f6:	3301      	adds	r3, #1
 80083f8:	ea4f 0cc3 	mov.w	ip, r3, lsl #3
 80083fc:	fa01 f10c 	lsl.w	r1, r1, ip
 8008400:	ea49 0901 	orr.w	r9, r9, r1
  for (count = 0U; count < nbBytes; count++)
 8008404:	e7d5      	b.n	80083b2 <HAL_DSI_LongWrite+0x36>
    nbBytes = (uicounter < 4U) ? uicounter : 4U;
 8008406:	2804      	cmp	r0, #4
    fifoword = 0U;
 8008408:	f04f 0c00 	mov.w	ip, #0
    nbBytes = (uicounter < 4U) ? uicounter : 4U;
 800840c:	4686      	mov	lr, r0
    for (count = 0U; count < nbBytes; count++)
 800840e:	4661      	mov	r1, ip
    nbBytes = (uicounter < 4U) ? uicounter : 4U;
 8008410:	bf28      	it	cs
 8008412:	f04f 0e04 	movcs.w	lr, #4
      fifoword |= (((uint32_t)(*(pparams + count))) << (8U * count));
 8008416:	f813 8001 	ldrb.w	r8, [r3, r1]
 800841a:	ea4f 09c1 	mov.w	r9, r1, lsl #3
    for (count = 0U; count < nbBytes; count++)
 800841e:	3101      	adds	r1, #1
      fifoword |= (((uint32_t)(*(pparams + count))) << (8U * count));
 8008420:	fa08 f809 	lsl.w	r8, r8, r9
    for (count = 0U; count < nbBytes; count++)
 8008424:	458e      	cmp	lr, r1
      fifoword |= (((uint32_t)(*(pparams + count))) << (8U * count));
 8008426:	ea4c 0c08 	orr.w	ip, ip, r8
    for (count = 0U; count < nbBytes; count++)
 800842a:	d1f4      	bne.n	8008416 <HAL_DSI_LongWrite+0x9a>
    uicounter -= nbBytes;
 800842c:	eba0 000e 	sub.w	r0, r0, lr
    pparams += nbBytes;
 8008430:	4473      	add	r3, lr
    hdsi->Instance->GPDR = fifoword;
 8008432:	f8c2 c070 	str.w	ip, [r2, #112]	@ 0x70
    pparams += nbBytes;
 8008436:	e7c2      	b.n	80083be <HAL_DSI_LongWrite+0x42>
  __HAL_LOCK(hdsi);
 8008438:	2002      	movs	r0, #2
 800843a:	e7d8      	b.n	80083ee <HAL_DSI_LongWrite+0x72>

0800843c <HAL_DSI_Read>:
                               uint8_t *Array,
                               uint32_t Size,
                               uint32_t Mode,
                               uint32_t DCSCmd,
                               uint8_t *ParametersTable)
{
 800843c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008440:	461e      	mov	r6, r3
  uint32_t fifoword;
  uint32_t nbbytes;
  uint32_t count;

  /* Process locked */
  __HAL_LOCK(hdsi);
 8008442:	7c03      	ldrb	r3, [r0, #16]
{
 8008444:	4605      	mov	r5, r0
 8008446:	460c      	mov	r4, r1
  __HAL_LOCK(hdsi);
 8008448:	2b01      	cmp	r3, #1
{
 800844a:	4617      	mov	r7, r2
 800844c:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 8008450:	f8dd 8030 	ldr.w	r8, [sp, #48]	@ 0x30
  __HAL_LOCK(hdsi);
 8008454:	d06f      	beq.n	8008536 <HAL_DSI_Read+0xfa>
 8008456:	2301      	movs	r3, #1

  /* Check the parameters */
  assert_param(IS_DSI_READ_PACKET_TYPE(Mode));

  if (datasize > 2U)
 8008458:	2e02      	cmp	r6, #2
  __HAL_LOCK(hdsi);
 800845a:	7403      	strb	r3, [r0, #16]
  if (datasize > 2U)
 800845c:	d90d      	bls.n	800847a <HAL_DSI_Read+0x3e>
  {
    /* set max return packet size */
    if (DSI_ShortWrite(hdsi, ChannelNbr, DSI_MAX_RETURN_PKT_SIZE, ((datasize) & 0xFFU),
 800845e:	f3c6 2307 	ubfx	r3, r6, #8, #8
 8008462:	2237      	movs	r2, #55	@ 0x37
 8008464:	9300      	str	r3, [sp, #0]
 8008466:	b2f3      	uxtb	r3, r6
 8008468:	f7ff fbee 	bl	8007c48 <DSI_ShortWrite.constprop.0>
 800846c:	b128      	cbz	r0, 800847a <HAL_DSI_Read+0x3e>
                       (((datasize) >> 8U) & 0xFFU)) != HAL_OK)
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hdsi);
 800846e:	2300      	movs	r3, #0

      return HAL_ERROR;
 8008470:	2001      	movs	r0, #1
      __HAL_UNLOCK(hdsi);
 8008472:	742b      	strb	r3, [r5, #16]

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);

  return HAL_OK;
}
 8008474:	b003      	add	sp, #12
 8008476:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  if (Mode == DSI_DCS_SHORT_PKT_READ)
 800847a:	f1b9 0f06 	cmp.w	r9, #6
 800847e:	d10f      	bne.n	80084a0 <HAL_DSI_Read+0x64>
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 8008480:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, DCSCmd, 0U);
 8008482:	682a      	ldr	r2, [r5, #0]
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 8008484:	021b      	lsls	r3, r3, #8
 8008486:	ea43 1384 	orr.w	r3, r3, r4, lsl #6
 800848a:	f043 0306 	orr.w	r3, r3, #6
 800848e:	66d3      	str	r3, [r2, #108]	@ 0x6c
  tickstart = HAL_GetTick();
 8008490:	f7ff f9e4 	bl	800785c <HAL_GetTick>
 8008494:	4604      	mov	r4, r0
  while (((int32_t)(datasize)) > 0)
 8008496:	2e00      	cmp	r6, #0
 8008498:	dc27      	bgt.n	80084ea <HAL_DSI_Read+0xae>
  __HAL_UNLOCK(hdsi);
 800849a:	2000      	movs	r0, #0
 800849c:	7428      	strb	r0, [r5, #16]
  return HAL_OK;
 800849e:	e7e9      	b.n	8008474 <HAL_DSI_Read+0x38>
  else if (Mode == DSI_GEN_SHORT_PKT_READ_P0)
 80084a0:	f1b9 0f04 	cmp.w	r9, #4
 80084a4:	d105      	bne.n	80084b2 <HAL_DSI_Read+0x76>
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 80084a6:	01a4      	lsls	r4, r4, #6
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, 0U, 0U);
 80084a8:	682b      	ldr	r3, [r5, #0]
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 80084aa:	f044 0404 	orr.w	r4, r4, #4
 80084ae:	66dc      	str	r4, [r3, #108]	@ 0x6c
}
 80084b0:	e7ee      	b.n	8008490 <HAL_DSI_Read+0x54>
  else if (Mode == DSI_GEN_SHORT_PKT_READ_P1)
 80084b2:	f1b9 0f14 	cmp.w	r9, #20
 80084b6:	d108      	bne.n	80084ca <HAL_DSI_Read+0x8e>
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, ParametersTable[0U], 0U);
 80084b8:	f898 2000 	ldrb.w	r2, [r8]
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 80084bc:	01a4      	lsls	r4, r4, #6
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, ParametersTable[0U], 0U);
 80084be:	682b      	ldr	r3, [r5, #0]
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 80084c0:	ea44 2402 	orr.w	r4, r4, r2, lsl #8
 80084c4:	f044 0414 	orr.w	r4, r4, #20
 80084c8:	e7f1      	b.n	80084ae <HAL_DSI_Read+0x72>
  else if (Mode == DSI_GEN_SHORT_PKT_READ_P2)
 80084ca:	f1b9 0f24 	cmp.w	r9, #36	@ 0x24
 80084ce:	d1ce      	bne.n	800846e <HAL_DSI_Read+0x32>
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, ParametersTable[0U], ParametersTable[1U]);
 80084d0:	f898 2001 	ldrb.w	r2, [r8, #1]
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 80084d4:	01a4      	lsls	r4, r4, #6
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, ParametersTable[0U], ParametersTable[1U]);
 80084d6:	682b      	ldr	r3, [r5, #0]
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 80084d8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, ParametersTable[0U], ParametersTable[1U]);
 80084dc:	f898 2000 	ldrb.w	r2, [r8]
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 80084e0:	ea44 2402 	orr.w	r4, r4, r2, lsl #8
 80084e4:	f044 0424 	orr.w	r4, r4, #36	@ 0x24
 80084e8:	e7e1      	b.n	80084ae <HAL_DSI_Read+0x72>
    if ((hdsi->Instance->GPSR & DSI_GPSR_PRDFE) == 0U)
 80084ea:	682a      	ldr	r2, [r5, #0]
 80084ec:	6f53      	ldr	r3, [r2, #116]	@ 0x74
 80084ee:	f013 0310 	ands.w	r3, r3, #16
 80084f2:	d10d      	bne.n	8008510 <HAL_DSI_Read+0xd4>
      nbbytes = (datasize < 4U) ? datasize : 4U;
 80084f4:	2e04      	cmp	r6, #4
      fifoword = hdsi->Instance->GPDR;
 80084f6:	6f10      	ldr	r0, [r2, #112]	@ 0x70
      nbbytes = (datasize < 4U) ? datasize : 4U;
 80084f8:	4632      	mov	r2, r6
 80084fa:	bf28      	it	cs
 80084fc:	2204      	movcs	r2, #4
        *pdata = (uint8_t)(fifoword >> (8U * count));
 80084fe:	00d9      	lsls	r1, r3, #3
 8008500:	fa20 f101 	lsr.w	r1, r0, r1
 8008504:	54f9      	strb	r1, [r7, r3]
      for (count = 0U; count < nbbytes; count++)
 8008506:	3301      	adds	r3, #1
 8008508:	429a      	cmp	r2, r3
 800850a:	d1f8      	bne.n	80084fe <HAL_DSI_Read+0xc2>
        pdata++;
 800850c:	4417      	add	r7, r2
        datasize--;
 800850e:	1ab6      	subs	r6, r6, r2
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8008510:	f7ff f9a4 	bl	800785c <HAL_GetTick>
 8008514:	1b00      	subs	r0, r0, r4
 8008516:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 800851a:	d903      	bls.n	8008524 <HAL_DSI_Read+0xe8>
      __HAL_UNLOCK(hdsi);
 800851c:	2300      	movs	r3, #0
      return HAL_TIMEOUT;
 800851e:	2003      	movs	r0, #3
      __HAL_UNLOCK(hdsi);
 8008520:	742b      	strb	r3, [r5, #16]
      return HAL_TIMEOUT;
 8008522:	e7a7      	b.n	8008474 <HAL_DSI_Read+0x38>
    if ((hdsi->Instance->GPSR & DSI_GPSR_RCB) == 0U)
 8008524:	682b      	ldr	r3, [r5, #0]
 8008526:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
 8008528:	0652      	lsls	r2, r2, #25
 800852a:	d4b4      	bmi.n	8008496 <HAL_DSI_Read+0x5a>
      if ((hdsi->Instance->ISR[1U] & DSI_ISR1_PSE) == DSI_ISR1_PSE)
 800852c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8008530:	069b      	lsls	r3, r3, #26
 8008532:	d49c      	bmi.n	800846e <HAL_DSI_Read+0x32>
 8008534:	e7af      	b.n	8008496 <HAL_DSI_Read+0x5a>
  __HAL_LOCK(hdsi);
 8008536:	2002      	movs	r0, #2
 8008538:	e79c      	b.n	8008474 <HAL_DSI_Read+0x38>

0800853a <HAL_DSI_SetLowPowerRXFilter>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_SetLowPowerRXFilter(DSI_HandleTypeDef *hdsi, uint32_t Frequency)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 800853a:	7c02      	ldrb	r2, [r0, #16]
{
 800853c:	4603      	mov	r3, r0
  __HAL_LOCK(hdsi);
 800853e:	2a01      	cmp	r2, #1
 8008540:	d00f      	beq.n	8008562 <HAL_DSI_SetLowPowerRXFilter+0x28>

  /* Low-Power RX low-pass Filtering Tuning */
  hdsi->Instance->WPCR[1U] &= ~DSI_WPCR1_LPRXFT;
 8008542:	6802      	ldr	r2, [r0, #0]
 8008544:	f8d2 041c 	ldr.w	r0, [r2, #1052]	@ 0x41c
 8008548:	f020 60c0 	bic.w	r0, r0, #100663296	@ 0x6000000
 800854c:	f8c2 041c 	str.w	r0, [r2, #1052]	@ 0x41c
  hdsi->Instance->WPCR[1U] |= Frequency << 25U;
 8008550:	f8d2 041c 	ldr.w	r0, [r2, #1052]	@ 0x41c
 8008554:	ea40 6141 	orr.w	r1, r0, r1, lsl #25

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8008558:	2000      	movs	r0, #0
  hdsi->Instance->WPCR[1U] |= Frequency << 25U;
 800855a:	f8c2 141c 	str.w	r1, [r2, #1052]	@ 0x41c
  __HAL_UNLOCK(hdsi);
 800855e:	7418      	strb	r0, [r3, #16]

  return HAL_OK;
 8008560:	4770      	bx	lr
  __HAL_LOCK(hdsi);
 8008562:	2002      	movs	r0, #2
}
 8008564:	4770      	bx	lr
	...

08008568 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008568:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00U;
 800856c:	2300      	movs	r3, #0
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800856e:	f8df 91c4 	ldr.w	r9, [pc, #452]	@ 8008734 <HAL_GPIO_Init+0x1cc>
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8008572:	f04f 44b0 	mov.w	r4, #1476395008	@ 0x58000000
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8008576:	680a      	ldr	r2, [r1, #0]
 8008578:	fa32 f503 	lsrs.w	r5, r2, r3
 800857c:	d102      	bne.n	8008584 <HAL_GPIO_Init+0x1c>
      }
    }

    position++;
  }
}
 800857e:	b003      	add	sp, #12
 8008580:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8008584:	2501      	movs	r5, #1
 8008586:	fa05 f803 	lsl.w	r8, r5, r3
    if (iocurrent != 0x00U)
 800858a:	ea18 0202 	ands.w	r2, r8, r2
 800858e:	f000 80bb 	beq.w	8008708 <HAL_GPIO_Init+0x1a0>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8008592:	684e      	ldr	r6, [r1, #4]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8008594:	2703      	movs	r7, #3
 8008596:	ea4f 0e43 	mov.w	lr, r3, lsl #1
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800859a:	f006 0503 	and.w	r5, r6, #3
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800859e:	fa07 fc0e 	lsl.w	ip, r7, lr
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80085a2:	1e6f      	subs	r7, r5, #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80085a4:	ea6f 0c0c 	mvn.w	ip, ip
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80085a8:	2f01      	cmp	r7, #1
 80085aa:	d834      	bhi.n	8008616 <HAL_GPIO_Init+0xae>
        temp = GPIOx->OSPEEDR;
 80085ac:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80085ae:	ea07 0a0c 	and.w	sl, r7, ip
        temp |= (GPIO_Init->Speed << (position * 2U));
 80085b2:	68cf      	ldr	r7, [r1, #12]
 80085b4:	fa07 f70e 	lsl.w	r7, r7, lr
 80085b8:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->OSPEEDR = temp;
 80085bc:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 80085be:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80085c0:	ea27 0808 	bic.w	r8, r7, r8
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80085c4:	f3c6 1700 	ubfx	r7, r6, #4, #1
 80085c8:	409f      	lsls	r7, r3
 80085ca:	ea47 0708 	orr.w	r7, r7, r8
        GPIOx->OTYPER = temp;
 80085ce:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 80085d0:	68c7      	ldr	r7, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80085d2:	2d02      	cmp	r5, #2
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80085d4:	ea07 080c 	and.w	r8, r7, ip
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80085d8:	688f      	ldr	r7, [r1, #8]
 80085da:	fa07 f70e 	lsl.w	r7, r7, lr
 80085de:	ea47 0708 	orr.w	r7, r7, r8
      GPIOx->PUPDR = temp;
 80085e2:	60c7      	str	r7, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80085e4:	d119      	bne.n	800861a <HAL_GPIO_Init+0xb2>
        temp = GPIOx->AFR[position >> 3U];
 80085e6:	ea4f 08d3 	mov.w	r8, r3, lsr #3
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80085ea:	f003 0a07 	and.w	sl, r3, #7
 80085ee:	f04f 0b0f 	mov.w	fp, #15
 80085f2:	eb00 0888 	add.w	r8, r0, r8, lsl #2
 80085f6:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
        temp = GPIOx->AFR[position >> 3U];
 80085fa:	f8d8 7020 	ldr.w	r7, [r8, #32]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80085fe:	fa0b fb0a 	lsl.w	fp, fp, sl
 8008602:	ea27 0b0b 	bic.w	fp, r7, fp
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8008606:	690f      	ldr	r7, [r1, #16]
 8008608:	fa07 f70a 	lsl.w	r7, r7, sl
 800860c:	ea47 070b 	orr.w	r7, r7, fp
        GPIOx->AFR[position >> 3U] = temp;
 8008610:	f8c8 7020 	str.w	r7, [r8, #32]
 8008614:	e001      	b.n	800861a <HAL_GPIO_Init+0xb2>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8008616:	2d03      	cmp	r5, #3
 8008618:	d1da      	bne.n	80085d0 <HAL_GPIO_Init+0x68>
      temp = GPIOx->MODER;
 800861a:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800861c:	fa05 f50e 	lsl.w	r5, r5, lr
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8008620:	f416 3f40 	tst.w	r6, #196608	@ 0x30000
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8008624:	ea07 070c 	and.w	r7, r7, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8008628:	ea45 0507 	orr.w	r5, r5, r7
      GPIOx->MODER = temp;
 800862c:	6005      	str	r5, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800862e:	d06b      	beq.n	8008708 <HAL_GPIO_Init+0x1a0>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008630:	f8d9 50f4 	ldr.w	r5, [r9, #244]	@ 0xf4
 8008634:	f023 0703 	bic.w	r7, r3, #3
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8008638:	f003 0c03 	and.w	ip, r3, #3
 800863c:	f04f 0e0f 	mov.w	lr, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008640:	f045 0502 	orr.w	r5, r5, #2
 8008644:	f107 47b0 	add.w	r7, r7, #1476395008	@ 0x58000000
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8008648:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800864c:	f8c9 50f4 	str.w	r5, [r9, #244]	@ 0xf4
 8008650:	f507 6780 	add.w	r7, r7, #1024	@ 0x400
 8008654:	f8d9 50f4 	ldr.w	r5, [r9, #244]	@ 0xf4
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8008658:	fa0e fe0c 	lsl.w	lr, lr, ip
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800865c:	f005 0502 	and.w	r5, r5, #2
 8008660:	9501      	str	r5, [sp, #4]
 8008662:	9d01      	ldr	r5, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8008664:	68bd      	ldr	r5, [r7, #8]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8008666:	ea25 0e0e 	bic.w	lr, r5, lr
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800866a:	4d31      	ldr	r5, [pc, #196]	@ (8008730 <HAL_GPIO_Init+0x1c8>)
 800866c:	42a8      	cmp	r0, r5
 800866e:	d04d      	beq.n	800870c <HAL_GPIO_Init+0x1a4>
 8008670:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8008674:	42a8      	cmp	r0, r5
 8008676:	d04b      	beq.n	8008710 <HAL_GPIO_Init+0x1a8>
 8008678:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 800867c:	42a8      	cmp	r0, r5
 800867e:	d049      	beq.n	8008714 <HAL_GPIO_Init+0x1ac>
 8008680:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8008684:	42a8      	cmp	r0, r5
 8008686:	d047      	beq.n	8008718 <HAL_GPIO_Init+0x1b0>
 8008688:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 800868c:	42a8      	cmp	r0, r5
 800868e:	d045      	beq.n	800871c <HAL_GPIO_Init+0x1b4>
 8008690:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8008694:	42a8      	cmp	r0, r5
 8008696:	d043      	beq.n	8008720 <HAL_GPIO_Init+0x1b8>
 8008698:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 800869c:	42a8      	cmp	r0, r5
 800869e:	d041      	beq.n	8008724 <HAL_GPIO_Init+0x1bc>
 80086a0:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 80086a4:	42a8      	cmp	r0, r5
 80086a6:	d03f      	beq.n	8008728 <HAL_GPIO_Init+0x1c0>
 80086a8:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 80086ac:	42a8      	cmp	r0, r5
 80086ae:	d03d      	beq.n	800872c <HAL_GPIO_Init+0x1c4>
 80086b0:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 80086b4:	42a8      	cmp	r0, r5
 80086b6:	bf14      	ite	ne
 80086b8:	250a      	movne	r5, #10
 80086ba:	2509      	moveq	r5, #9
 80086bc:	fa05 f50c 	lsl.w	r5, r5, ip
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80086c0:	f416 1f80 	tst.w	r6, #1048576	@ 0x100000
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80086c4:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 80086c8:	60bd      	str	r5, [r7, #8]
        temp &= ~(iocurrent);
 80086ca:	ea6f 0702 	mvn.w	r7, r2
        temp = EXTI->RTSR1;
 80086ce:	6825      	ldr	r5, [r4, #0]
        temp &= ~(iocurrent);
 80086d0:	bf0c      	ite	eq
 80086d2:	403d      	andeq	r5, r7
          temp |= iocurrent;
 80086d4:	4315      	orrne	r5, r2
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80086d6:	f416 1f00 	tst.w	r6, #2097152	@ 0x200000
        EXTI->RTSR1 = temp;
 80086da:	6025      	str	r5, [r4, #0]
        temp = EXTI->FTSR1;
 80086dc:	6865      	ldr	r5, [r4, #4]
        temp &= ~(iocurrent);
 80086de:	bf0c      	ite	eq
 80086e0:	403d      	andeq	r5, r7
          temp |= iocurrent;
 80086e2:	4315      	orrne	r5, r2
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80086e4:	f416 3f00 	tst.w	r6, #131072	@ 0x20000
        EXTI->FTSR1 = temp;
 80086e8:	6065      	str	r5, [r4, #4]
        temp = EXTI_CurrentCPU->EMR1;
 80086ea:	f8d4 5084 	ldr.w	r5, [r4, #132]	@ 0x84
        temp &= ~(iocurrent);
 80086ee:	bf0c      	ite	eq
 80086f0:	403d      	andeq	r5, r7
          temp |= iocurrent;
 80086f2:	4315      	orrne	r5, r2
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80086f4:	03f6      	lsls	r6, r6, #15
        EXTI_CurrentCPU->EMR1 = temp;
 80086f6:	f8c4 5084 	str.w	r5, [r4, #132]	@ 0x84
        temp = EXTI_CurrentCPU->IMR1;
 80086fa:	f8d4 5080 	ldr.w	r5, [r4, #128]	@ 0x80
        temp &= ~(iocurrent);
 80086fe:	bf54      	ite	pl
 8008700:	403d      	andpl	r5, r7
          temp |= iocurrent;
 8008702:	4315      	orrmi	r5, r2
        EXTI_CurrentCPU->IMR1 = temp;
 8008704:	f8c4 5080 	str.w	r5, [r4, #128]	@ 0x80
    position++;
 8008708:	3301      	adds	r3, #1
 800870a:	e734      	b.n	8008576 <HAL_GPIO_Init+0xe>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800870c:	2500      	movs	r5, #0
 800870e:	e7d5      	b.n	80086bc <HAL_GPIO_Init+0x154>
 8008710:	2501      	movs	r5, #1
 8008712:	e7d3      	b.n	80086bc <HAL_GPIO_Init+0x154>
 8008714:	2502      	movs	r5, #2
 8008716:	e7d1      	b.n	80086bc <HAL_GPIO_Init+0x154>
 8008718:	2503      	movs	r5, #3
 800871a:	e7cf      	b.n	80086bc <HAL_GPIO_Init+0x154>
 800871c:	2504      	movs	r5, #4
 800871e:	e7cd      	b.n	80086bc <HAL_GPIO_Init+0x154>
 8008720:	2505      	movs	r5, #5
 8008722:	e7cb      	b.n	80086bc <HAL_GPIO_Init+0x154>
 8008724:	2506      	movs	r5, #6
 8008726:	e7c9      	b.n	80086bc <HAL_GPIO_Init+0x154>
 8008728:	2507      	movs	r5, #7
 800872a:	e7c7      	b.n	80086bc <HAL_GPIO_Init+0x154>
 800872c:	2508      	movs	r5, #8
 800872e:	e7c5      	b.n	80086bc <HAL_GPIO_Init+0x154>
 8008730:	58020000 	.word	0x58020000
 8008734:	58024400 	.word	0x58024400

08008738 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8008738:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00U;
 800873c:	2200      	movs	r2, #0

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00U)
  {
    /* Get current io position */
    iocurrent = GPIO_Pin & (1UL << position) ;
 800873e:	f04f 0a01 	mov.w	sl, #1
    if (iocurrent != 0x00U)
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      tmp = SYSCFG->EXTICR[position >> 2U];
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 8008742:	f04f 080f 	mov.w	r8, #15
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8008746:	f04f 0b03 	mov.w	fp, #3
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
 800874a:	f04f 44b0 	mov.w	r4, #1476395008	@ 0x58000000
  while ((GPIO_Pin >> position) != 0x00U)
 800874e:	fa31 f302 	lsrs.w	r3, r1, r2
 8008752:	d101      	bne.n	8008758 <HAL_GPIO_DeInit+0x20>
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
    }

    position++;
  }
}
 8008754:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = GPIO_Pin & (1UL << position) ;
 8008758:	fa0a fc02 	lsl.w	ip, sl, r2
    if (iocurrent != 0x00U)
 800875c:	ea1c 0601 	ands.w	r6, ip, r1
 8008760:	d070      	beq.n	8008844 <HAL_GPIO_DeInit+0x10c>
      tmp = SYSCFG->EXTICR[position >> 2U];
 8008762:	f022 0503 	bic.w	r5, r2, #3
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 8008766:	f002 0703 	and.w	r7, r2, #3
 800876a:	f105 45b0 	add.w	r5, r5, #1476395008	@ 0x58000000
 800876e:	00bf      	lsls	r7, r7, #2
      tmp = SYSCFG->EXTICR[position >> 2U];
 8008770:	f8d5 3408 	ldr.w	r3, [r5, #1032]	@ 0x408
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 8008774:	fa08 f907 	lsl.w	r9, r8, r7
 8008778:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 800877c:	ea09 0e03 	and.w	lr, r9, r3
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8008780:	4b3a      	ldr	r3, [pc, #232]	@ (800886c <HAL_GPIO_DeInit+0x134>)
 8008782:	4298      	cmp	r0, r3
 8008784:	d060      	beq.n	8008848 <HAL_GPIO_DeInit+0x110>
 8008786:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800878a:	4298      	cmp	r0, r3
 800878c:	d05e      	beq.n	800884c <HAL_GPIO_DeInit+0x114>
 800878e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008792:	4298      	cmp	r0, r3
 8008794:	d05c      	beq.n	8008850 <HAL_GPIO_DeInit+0x118>
 8008796:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800879a:	4298      	cmp	r0, r3
 800879c:	d05a      	beq.n	8008854 <HAL_GPIO_DeInit+0x11c>
 800879e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80087a2:	4298      	cmp	r0, r3
 80087a4:	d058      	beq.n	8008858 <HAL_GPIO_DeInit+0x120>
 80087a6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80087aa:	4298      	cmp	r0, r3
 80087ac:	d056      	beq.n	800885c <HAL_GPIO_DeInit+0x124>
 80087ae:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80087b2:	4298      	cmp	r0, r3
 80087b4:	d054      	beq.n	8008860 <HAL_GPIO_DeInit+0x128>
 80087b6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80087ba:	4298      	cmp	r0, r3
 80087bc:	d052      	beq.n	8008864 <HAL_GPIO_DeInit+0x12c>
 80087be:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80087c2:	4298      	cmp	r0, r3
 80087c4:	d050      	beq.n	8008868 <HAL_GPIO_DeInit+0x130>
 80087c6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80087ca:	4298      	cmp	r0, r3
 80087cc:	bf0c      	ite	eq
 80087ce:	2309      	moveq	r3, #9
 80087d0:	230a      	movne	r3, #10
 80087d2:	40bb      	lsls	r3, r7
 80087d4:	4573      	cmp	r3, lr
 80087d6:	d117      	bne.n	8008808 <HAL_GPIO_DeInit+0xd0>
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
 80087d8:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 80087dc:	ea23 0306 	bic.w	r3, r3, r6
 80087e0:	f8c4 3080 	str.w	r3, [r4, #128]	@ 0x80
        EXTI_CurrentCPU->EMR1 &= ~(iocurrent);
 80087e4:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 80087e8:	ea23 0306 	bic.w	r3, r3, r6
 80087ec:	f8c4 3084 	str.w	r3, [r4, #132]	@ 0x84
        EXTI->FTSR1 &= ~(iocurrent);
 80087f0:	6863      	ldr	r3, [r4, #4]
 80087f2:	ea23 0306 	bic.w	r3, r3, r6
 80087f6:	6063      	str	r3, [r4, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 80087f8:	6823      	ldr	r3, [r4, #0]
 80087fa:	ea23 0306 	bic.w	r3, r3, r6
 80087fe:	6023      	str	r3, [r4, #0]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8008800:	68ab      	ldr	r3, [r5, #8]
 8008802:	ea23 0309 	bic.w	r3, r3, r9
 8008806:	60ab      	str	r3, [r5, #8]
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8008808:	0053      	lsls	r3, r2, #1
 800880a:	6805      	ldr	r5, [r0, #0]
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 800880c:	08d6      	lsrs	r6, r2, #3
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 800880e:	fa0b f303 	lsl.w	r3, fp, r3
 8008812:	eb00 0686 	add.w	r6, r0, r6, lsl #2
 8008816:	431d      	orrs	r5, r3
 8008818:	6005      	str	r5, [r0, #0]
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 800881a:	f002 0507 	and.w	r5, r2, #7
 800881e:	6a37      	ldr	r7, [r6, #32]
 8008820:	00ad      	lsls	r5, r5, #2
 8008822:	fa08 f505 	lsl.w	r5, r8, r5
 8008826:	ea27 0705 	bic.w	r7, r7, r5
 800882a:	6237      	str	r7, [r6, #32]
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800882c:	68c5      	ldr	r5, [r0, #12]
 800882e:	ea25 0503 	bic.w	r5, r5, r3
 8008832:	60c5      	str	r5, [r0, #12]
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8008834:	6845      	ldr	r5, [r0, #4]
 8008836:	ea25 050c 	bic.w	r5, r5, ip
 800883a:	6045      	str	r5, [r0, #4]
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800883c:	6885      	ldr	r5, [r0, #8]
 800883e:	ea25 0303 	bic.w	r3, r5, r3
 8008842:	6083      	str	r3, [r0, #8]
    position++;
 8008844:	3201      	adds	r2, #1
 8008846:	e782      	b.n	800874e <HAL_GPIO_DeInit+0x16>
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8008848:	2300      	movs	r3, #0
 800884a:	e7c2      	b.n	80087d2 <HAL_GPIO_DeInit+0x9a>
 800884c:	2301      	movs	r3, #1
 800884e:	e7c0      	b.n	80087d2 <HAL_GPIO_DeInit+0x9a>
 8008850:	2302      	movs	r3, #2
 8008852:	e7be      	b.n	80087d2 <HAL_GPIO_DeInit+0x9a>
 8008854:	2303      	movs	r3, #3
 8008856:	e7bc      	b.n	80087d2 <HAL_GPIO_DeInit+0x9a>
 8008858:	2304      	movs	r3, #4
 800885a:	e7ba      	b.n	80087d2 <HAL_GPIO_DeInit+0x9a>
 800885c:	2305      	movs	r3, #5
 800885e:	e7b8      	b.n	80087d2 <HAL_GPIO_DeInit+0x9a>
 8008860:	2306      	movs	r3, #6
 8008862:	e7b6      	b.n	80087d2 <HAL_GPIO_DeInit+0x9a>
 8008864:	2307      	movs	r3, #7
 8008866:	e7b4      	b.n	80087d2 <HAL_GPIO_DeInit+0x9a>
 8008868:	2308      	movs	r3, #8
 800886a:	e7b2      	b.n	80087d2 <HAL_GPIO_DeInit+0x9a>
 800886c:	58020000 	.word	0x58020000

08008870 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8008870:	6903      	ldr	r3, [r0, #16]
 8008872:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8008874:	bf14      	ite	ne
 8008876:	2001      	movne	r0, #1
 8008878:	2000      	moveq	r0, #0
 800887a:	4770      	bx	lr

0800887c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800887c:	b10a      	cbz	r2, 8008882 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800887e:	6181      	str	r1, [r0, #24]
  }
}
 8008880:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8008882:	0409      	lsls	r1, r1, #16
 8008884:	e7fb      	b.n	800887e <HAL_GPIO_WritePin+0x2>

08008886 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8008886:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8008888:	ea01 0203 	and.w	r2, r1, r3
 800888c:	ea21 0103 	bic.w	r1, r1, r3
 8008890:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008894:	6181      	str	r1, [r0, #24]
}
 8008896:	4770      	bx	lr

08008898 <HAL_HSEM_FastTake>:
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8008898:	4b04      	ldr	r3, [pc, #16]	@ (80088ac <HAL_HSEM_FastTake+0x14>)
 800889a:	3020      	adds	r0, #32
 800889c:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
}
 80088a0:	4b03      	ldr	r3, [pc, #12]	@ (80088b0 <HAL_HSEM_FastTake+0x18>)
 80088a2:	1ac0      	subs	r0, r0, r3
 80088a4:	bf18      	it	ne
 80088a6:	2001      	movne	r0, #1
 80088a8:	4770      	bx	lr
 80088aa:	bf00      	nop
 80088ac:	58026400 	.word	0x58026400
 80088b0:	80000300 	.word	0x80000300

080088b4 <HAL_HSEM_Release>:

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 80088b4:	f441 7140 	orr.w	r1, r1, #768	@ 0x300
 80088b8:	4b01      	ldr	r3, [pc, #4]	@ (80088c0 <HAL_HSEM_Release+0xc>)
 80088ba:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
#endif

}
 80088be:	4770      	bx	lr
 80088c0:	58026400 	.word	0x58026400

080088c4 <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80088c4:	6803      	ldr	r3, [r0, #0]
 80088c6:	699a      	ldr	r2, [r3, #24]
 80088c8:	0791      	lsls	r1, r2, #30
 80088ca:	d501      	bpl.n	80088d0 <I2C_Flush_TXDR+0xc>
  {
    hi2c->Instance->TXDR = 0x00U;
 80088cc:	2200      	movs	r2, #0
 80088ce:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80088d0:	699a      	ldr	r2, [r3, #24]
 80088d2:	07d2      	lsls	r2, r2, #31
 80088d4:	d403      	bmi.n	80088de <I2C_Flush_TXDR+0x1a>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80088d6:	699a      	ldr	r2, [r3, #24]
 80088d8:	f042 0201 	orr.w	r2, r2, #1
 80088dc:	619a      	str	r2, [r3, #24]
  }
}
 80088de:	4770      	bx	lr

080088e0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80088e0:	b530      	push	{r4, r5, lr}
 80088e2:	9d03      	ldr	r5, [sp, #12]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80088e4:	f3c1 0109 	ubfx	r1, r1, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80088e8:	6804      	ldr	r4, [r0, #0]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80088ea:	432b      	orrs	r3, r5
  MODIFY_REG(hi2c->Instance->CR2, \
 80088ec:	6860      	ldr	r0, [r4, #4]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80088ee:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  MODIFY_REG(hi2c->Instance->CR2, \
 80088f2:	4a05      	ldr	r2, [pc, #20]	@ (8008908 <I2C_TransferConfig+0x28>)
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80088f4:	430b      	orrs	r3, r1
  MODIFY_REG(hi2c->Instance->CR2, \
 80088f6:	ea42 5255 	orr.w	r2, r2, r5, lsr #21
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80088fa:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
  MODIFY_REG(hi2c->Instance->CR2, \
 80088fe:	ea20 0002 	bic.w	r0, r0, r2
 8008902:	4303      	orrs	r3, r0
 8008904:	6063      	str	r3, [r4, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8008906:	bd30      	pop	{r4, r5, pc}
 8008908:	03ff63ff 	.word	0x03ff63ff

0800890c <I2C_IsErrorOccurred>:
  uint32_t itflag   = hi2c->Instance->ISR;
 800890c:	6803      	ldr	r3, [r0, #0]
{
 800890e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t itflag   = hi2c->Instance->ISR;
 8008912:	699c      	ldr	r4, [r3, #24]
{
 8008914:	4605      	mov	r5, r0
 8008916:	460f      	mov	r7, r1
 8008918:	4616      	mov	r6, r2
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800891a:	f014 0410 	ands.w	r4, r4, #16
 800891e:	d06f      	beq.n	8008a00 <I2C_IsErrorOccurred+0xf4>
  uint32_t error_code = 0;
 8008920:	2400      	movs	r4, #0
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008922:	2210      	movs	r2, #16
  HAL_StatusTypeDef status = HAL_OK;
 8008924:	46a0      	mov	r8, r4
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008926:	61da      	str	r2, [r3, #28]
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8008928:	682b      	ldr	r3, [r5, #0]
 800892a:	699a      	ldr	r2, [r3, #24]
 800892c:	0690      	lsls	r0, r2, #26
 800892e:	d461      	bmi.n	80089f4 <I2C_IsErrorOccurred+0xe8>
 8008930:	f1b8 0f00 	cmp.w	r8, #0
 8008934:	d035      	beq.n	80089a2 <I2C_IsErrorOccurred+0x96>
    error_code |= HAL_I2C_ERROR_AF;
 8008936:	f044 0404 	orr.w	r4, r4, #4
    status = HAL_ERROR;
 800893a:	2001      	movs	r0, #1
  itflag = hi2c->Instance->ISR;
 800893c:	682e      	ldr	r6, [r5, #0]
 800893e:	69b3      	ldr	r3, [r6, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8008940:	05d9      	lsls	r1, r3, #23
 8008942:	d505      	bpl.n	8008950 <I2C_IsErrorOccurred+0x44>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8008944:	f44f 7280 	mov.w	r2, #256	@ 0x100
    error_code |= HAL_I2C_ERROR_BERR;
 8008948:	f044 0401 	orr.w	r4, r4, #1
    status = HAL_ERROR;
 800894c:	2001      	movs	r0, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800894e:	61f2      	str	r2, [r6, #28]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8008950:	055a      	lsls	r2, r3, #21
 8008952:	d505      	bpl.n	8008960 <I2C_IsErrorOccurred+0x54>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8008954:	f44f 6280 	mov.w	r2, #1024	@ 0x400
    error_code |= HAL_I2C_ERROR_OVR;
 8008958:	f044 0408 	orr.w	r4, r4, #8
    status = HAL_ERROR;
 800895c:	2001      	movs	r0, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800895e:	61f2      	str	r2, [r6, #28]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8008960:	059b      	lsls	r3, r3, #22
 8008962:	d54f      	bpl.n	8008a04 <I2C_IsErrorOccurred+0xf8>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8008964:	f44f 7300 	mov.w	r3, #512	@ 0x200
    error_code |= HAL_I2C_ERROR_ARLO;
 8008968:	f044 0402 	orr.w	r4, r4, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800896c:	61f3      	str	r3, [r6, #28]
    I2C_Flush_TXDR(hi2c);
 800896e:	4628      	mov	r0, r5
 8008970:	f7ff ffa8 	bl	80088c4 <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 8008974:	6873      	ldr	r3, [r6, #4]
    __HAL_UNLOCK(hi2c);
 8008976:	2001      	movs	r0, #1
    I2C_RESET_CR2(hi2c);
 8008978:	f023 73ff 	bic.w	r3, r3, #33423360	@ 0x1fe0000
 800897c:	f423 338b 	bic.w	r3, r3, #71168	@ 0x11600
 8008980:	f423 73ff 	bic.w	r3, r3, #510	@ 0x1fe
 8008984:	f023 0301 	bic.w	r3, r3, #1
 8008988:	6073      	str	r3, [r6, #4]
    hi2c->ErrorCode |= error_code;
 800898a:	6c6b      	ldr	r3, [r5, #68]	@ 0x44
 800898c:	4323      	orrs	r3, r4
 800898e:	646b      	str	r3, [r5, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8008990:	2320      	movs	r3, #32
 8008992:	f885 3041 	strb.w	r3, [r5, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008996:	2300      	movs	r3, #0
 8008998:	f885 3042 	strb.w	r3, [r5, #66]	@ 0x42
    __HAL_UNLOCK(hi2c);
 800899c:	f885 3040 	strb.w	r3, [r5, #64]	@ 0x40
 80089a0:	e032      	b.n	8008a08 <I2C_IsErrorOccurred+0xfc>
      if (Timeout != HAL_MAX_DELAY)
 80089a2:	1c7a      	adds	r2, r7, #1
 80089a4:	d0c1      	beq.n	800892a <I2C_IsErrorOccurred+0x1e>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80089a6:	f7fe ff59 	bl	800785c <HAL_GetTick>
 80089aa:	1b80      	subs	r0, r0, r6
 80089ac:	42b8      	cmp	r0, r7
 80089ae:	d801      	bhi.n	80089b4 <I2C_IsErrorOccurred+0xa8>
 80089b0:	2f00      	cmp	r7, #0
 80089b2:	d1b9      	bne.n	8008928 <I2C_IsErrorOccurred+0x1c>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80089b4:	682b      	ldr	r3, [r5, #0]
 80089b6:	6859      	ldr	r1, [r3, #4]
          tmp2 = hi2c->Mode;
 80089b8:	f895 2042 	ldrb.w	r2, [r5, #66]	@ 0x42
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80089bc:	6998      	ldr	r0, [r3, #24]
          tmp2 = hi2c->Mode;
 80089be:	b2d2      	uxtb	r2, r2
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80089c0:	0400      	lsls	r0, r0, #16
 80089c2:	d50a      	bpl.n	80089da <I2C_IsErrorOccurred+0xce>
 80089c4:	0449      	lsls	r1, r1, #17
 80089c6:	d408      	bmi.n	80089da <I2C_IsErrorOccurred+0xce>
              (tmp1 != I2C_CR2_STOP) && \
 80089c8:	2a20      	cmp	r2, #32
 80089ca:	d006      	beq.n	80089da <I2C_IsErrorOccurred+0xce>
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80089cc:	685a      	ldr	r2, [r3, #4]
 80089ce:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80089d2:	605a      	str	r2, [r3, #4]
            tickstart = HAL_GetTick();
 80089d4:	f7fe ff42 	bl	800785c <HAL_GetTick>
 80089d8:	4606      	mov	r6, r0
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80089da:	682b      	ldr	r3, [r5, #0]
 80089dc:	699b      	ldr	r3, [r3, #24]
 80089de:	069b      	lsls	r3, r3, #26
 80089e0:	d4a2      	bmi.n	8008928 <I2C_IsErrorOccurred+0x1c>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80089e2:	f7fe ff3b 	bl	800785c <HAL_GetTick>
 80089e6:	1b80      	subs	r0, r0, r6
 80089e8:	2819      	cmp	r0, #25
 80089ea:	d9f6      	bls.n	80089da <I2C_IsErrorOccurred+0xce>
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80089ec:	2420      	movs	r4, #32
              status = HAL_ERROR;
 80089ee:	f04f 0801 	mov.w	r8, #1
 80089f2:	e799      	b.n	8008928 <I2C_IsErrorOccurred+0x1c>
    if (status == HAL_OK)
 80089f4:	f1b8 0f00 	cmp.w	r8, #0
 80089f8:	d19d      	bne.n	8008936 <I2C_IsErrorOccurred+0x2a>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80089fa:	2220      	movs	r2, #32
 80089fc:	61da      	str	r2, [r3, #28]
 80089fe:	e79a      	b.n	8008936 <I2C_IsErrorOccurred+0x2a>
  HAL_StatusTypeDef status = HAL_OK;
 8008a00:	4620      	mov	r0, r4
 8008a02:	e79b      	b.n	800893c <I2C_IsErrorOccurred+0x30>
  if (status != HAL_OK)
 8008a04:	2800      	cmp	r0, #0
 8008a06:	d1b2      	bne.n	800896e <I2C_IsErrorOccurred+0x62>
}
 8008a08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08008a0c <I2C_WaitOnTXISFlagUntilTimeout>:
{
 8008a0c:	b570      	push	{r4, r5, r6, lr}
 8008a0e:	4604      	mov	r4, r0
 8008a10:	460d      	mov	r5, r1
 8008a12:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8008a14:	6823      	ldr	r3, [r4, #0]
 8008a16:	699b      	ldr	r3, [r3, #24]
 8008a18:	079b      	lsls	r3, r3, #30
 8008a1a:	d501      	bpl.n	8008a20 <I2C_WaitOnTXISFlagUntilTimeout+0x14>
  return HAL_OK;
 8008a1c:	2000      	movs	r0, #0
 8008a1e:	e01f      	b.n	8008a60 <I2C_WaitOnTXISFlagUntilTimeout+0x54>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8008a20:	4632      	mov	r2, r6
 8008a22:	4629      	mov	r1, r5
 8008a24:	4620      	mov	r0, r4
 8008a26:	f7ff ff71 	bl	800890c <I2C_IsErrorOccurred>
 8008a2a:	b9c0      	cbnz	r0, 8008a5e <I2C_WaitOnTXISFlagUntilTimeout+0x52>
    if (Timeout != HAL_MAX_DELAY)
 8008a2c:	1c6a      	adds	r2, r5, #1
 8008a2e:	d0f1      	beq.n	8008a14 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008a30:	f7fe ff14 	bl	800785c <HAL_GetTick>
 8008a34:	1b80      	subs	r0, r0, r6
 8008a36:	42a8      	cmp	r0, r5
 8008a38:	d801      	bhi.n	8008a3e <I2C_WaitOnTXISFlagUntilTimeout+0x32>
 8008a3a:	2d00      	cmp	r5, #0
 8008a3c:	d1ea      	bne.n	8008a14 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8008a3e:	6823      	ldr	r3, [r4, #0]
 8008a40:	699b      	ldr	r3, [r3, #24]
 8008a42:	f013 0302 	ands.w	r3, r3, #2
 8008a46:	d1e5      	bne.n	8008a14 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008a48:	6c62      	ldr	r2, [r4, #68]	@ 0x44
          __HAL_UNLOCK(hi2c);
 8008a4a:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008a4e:	f042 0220 	orr.w	r2, r2, #32
 8008a52:	6462      	str	r2, [r4, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8008a54:	2220      	movs	r2, #32
 8008a56:	f884 2041 	strb.w	r2, [r4, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8008a5a:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
      return HAL_ERROR;
 8008a5e:	2001      	movs	r0, #1
}
 8008a60:	bd70      	pop	{r4, r5, r6, pc}

08008a62 <I2C_WaitOnFlagUntilTimeout>:
{
 8008a62:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008a66:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8008a6a:	4604      	mov	r4, r0
 8008a6c:	460f      	mov	r7, r1
 8008a6e:	4616      	mov	r6, r2
 8008a70:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008a72:	6823      	ldr	r3, [r4, #0]
 8008a74:	699b      	ldr	r3, [r3, #24]
 8008a76:	ea37 0303 	bics.w	r3, r7, r3
 8008a7a:	bf0c      	ite	eq
 8008a7c:	2301      	moveq	r3, #1
 8008a7e:	2300      	movne	r3, #0
 8008a80:	42b3      	cmp	r3, r6
 8008a82:	d001      	beq.n	8008a88 <I2C_WaitOnFlagUntilTimeout+0x26>
  return HAL_OK;
 8008a84:	2000      	movs	r0, #0
 8008a86:	e025      	b.n	8008ad4 <I2C_WaitOnFlagUntilTimeout+0x72>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8008a88:	4642      	mov	r2, r8
 8008a8a:	4629      	mov	r1, r5
 8008a8c:	4620      	mov	r0, r4
 8008a8e:	f7ff ff3d 	bl	800890c <I2C_IsErrorOccurred>
 8008a92:	b9f0      	cbnz	r0, 8008ad2 <I2C_WaitOnFlagUntilTimeout+0x70>
    if (Timeout != HAL_MAX_DELAY)
 8008a94:	1c6b      	adds	r3, r5, #1
 8008a96:	d0ec      	beq.n	8008a72 <I2C_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008a98:	f7fe fee0 	bl	800785c <HAL_GetTick>
 8008a9c:	eba0 0008 	sub.w	r0, r0, r8
 8008aa0:	42a8      	cmp	r0, r5
 8008aa2:	d801      	bhi.n	8008aa8 <I2C_WaitOnFlagUntilTimeout+0x46>
 8008aa4:	2d00      	cmp	r5, #0
 8008aa6:	d1e4      	bne.n	8008a72 <I2C_WaitOnFlagUntilTimeout+0x10>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8008aa8:	6823      	ldr	r3, [r4, #0]
 8008aaa:	699b      	ldr	r3, [r3, #24]
 8008aac:	ea37 0303 	bics.w	r3, r7, r3
 8008ab0:	bf0c      	ite	eq
 8008ab2:	2301      	moveq	r3, #1
 8008ab4:	2300      	movne	r3, #0
 8008ab6:	42b3      	cmp	r3, r6
 8008ab8:	d1db      	bne.n	8008a72 <I2C_WaitOnFlagUntilTimeout+0x10>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008aba:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8008abc:	f043 0320 	orr.w	r3, r3, #32
 8008ac0:	6463      	str	r3, [r4, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8008ac2:	2320      	movs	r3, #32
 8008ac4:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8008ac8:	2300      	movs	r3, #0
 8008aca:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
          __HAL_UNLOCK(hi2c);
 8008ace:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
      return HAL_ERROR;
 8008ad2:	2001      	movs	r0, #1
}
 8008ad4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08008ad8 <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 8008ad8:	b570      	push	{r4, r5, r6, lr}
 8008ada:	4604      	mov	r4, r0
 8008adc:	460d      	mov	r5, r1
 8008ade:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008ae0:	6823      	ldr	r3, [r4, #0]
 8008ae2:	699b      	ldr	r3, [r3, #24]
 8008ae4:	069b      	lsls	r3, r3, #26
 8008ae6:	d501      	bpl.n	8008aec <I2C_WaitOnSTOPFlagUntilTimeout+0x14>
  return HAL_OK;
 8008ae8:	2000      	movs	r0, #0
 8008aea:	e01d      	b.n	8008b28 <I2C_WaitOnSTOPFlagUntilTimeout+0x50>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8008aec:	4632      	mov	r2, r6
 8008aee:	4629      	mov	r1, r5
 8008af0:	4620      	mov	r0, r4
 8008af2:	f7ff ff0b 	bl	800890c <I2C_IsErrorOccurred>
 8008af6:	b9b0      	cbnz	r0, 8008b26 <I2C_WaitOnSTOPFlagUntilTimeout+0x4e>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008af8:	f7fe feb0 	bl	800785c <HAL_GetTick>
 8008afc:	1b80      	subs	r0, r0, r6
 8008afe:	42a8      	cmp	r0, r5
 8008b00:	d801      	bhi.n	8008b06 <I2C_WaitOnSTOPFlagUntilTimeout+0x2e>
 8008b02:	2d00      	cmp	r5, #0
 8008b04:	d1ec      	bne.n	8008ae0 <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8008b06:	6823      	ldr	r3, [r4, #0]
 8008b08:	699b      	ldr	r3, [r3, #24]
 8008b0a:	f013 0320 	ands.w	r3, r3, #32
 8008b0e:	d1e7      	bne.n	8008ae0 <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008b10:	6c62      	ldr	r2, [r4, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 8008b12:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008b16:	f042 0220 	orr.w	r2, r2, #32
 8008b1a:	6462      	str	r2, [r4, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8008b1c:	2220      	movs	r2, #32
 8008b1e:	f884 2041 	strb.w	r2, [r4, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008b22:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
      return HAL_ERROR;
 8008b26:	2001      	movs	r0, #1
}
 8008b28:	bd70      	pop	{r4, r5, r6, pc}

08008b2a <HAL_I2C_MspInit>:
}
 8008b2a:	4770      	bx	lr

08008b2c <HAL_I2C_Init>:
{
 8008b2c:	b510      	push	{r4, lr}
  if (hi2c == NULL)
 8008b2e:	4604      	mov	r4, r0
 8008b30:	2800      	cmp	r0, #0
 8008b32:	d04e      	beq.n	8008bd2 <HAL_I2C_Init+0xa6>
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8008b34:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 8008b38:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8008b3c:	b91b      	cbnz	r3, 8008b46 <HAL_I2C_Init+0x1a>
    hi2c->Lock = HAL_UNLOCKED;
 8008b3e:	f880 2040 	strb.w	r2, [r0, #64]	@ 0x40
    HAL_I2C_MspInit(hi2c);
 8008b42:	f7ff fff2 	bl	8008b2a <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8008b46:	2324      	movs	r3, #36	@ 0x24
 8008b48:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  __HAL_I2C_DISABLE(hi2c);
 8008b4c:	6823      	ldr	r3, [r4, #0]
 8008b4e:	681a      	ldr	r2, [r3, #0]
 8008b50:	f022 0201 	bic.w	r2, r2, #1
 8008b54:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8008b56:	6862      	ldr	r2, [r4, #4]
 8008b58:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8008b5c:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8008b5e:	689a      	ldr	r2, [r3, #8]
 8008b60:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8008b64:	609a      	str	r2, [r3, #8]
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8008b66:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8008b6a:	2901      	cmp	r1, #1
 8008b6c:	d106      	bne.n	8008b7c <HAL_I2C_Init+0x50>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8008b6e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008b72:	609a      	str	r2, [r3, #8]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8008b74:	685a      	ldr	r2, [r3, #4]
 8008b76:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8008b7a:	e007      	b.n	8008b8c <HAL_I2C_Init+0x60>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8008b7c:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8008b80:	2902      	cmp	r1, #2
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8008b82:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8008b84:	d1f6      	bne.n	8008b74 <HAL_I2C_Init+0x48>
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8008b86:	685a      	ldr	r2, [r3, #4]
 8008b88:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8008b8c:	605a      	str	r2, [r3, #4]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008b8e:	2000      	movs	r0, #0
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8008b90:	685a      	ldr	r2, [r3, #4]
 8008b92:	f042 7200 	orr.w	r2, r2, #33554432	@ 0x2000000
 8008b96:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008b9a:	605a      	str	r2, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8008b9c:	68da      	ldr	r2, [r3, #12]
 8008b9e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8008ba2:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8008ba4:	e9d4 2104 	ldrd	r2, r1, [r4, #16]
 8008ba8:	430a      	orrs	r2, r1
                          (hi2c->Init.OwnAddress2Masks << 8));
 8008baa:	69a1      	ldr	r1, [r4, #24]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8008bac:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8008bb0:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8008bb2:	e9d4 2107 	ldrd	r2, r1, [r4, #28]
 8008bb6:	430a      	orrs	r2, r1
 8008bb8:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 8008bba:	681a      	ldr	r2, [r3, #0]
 8008bbc:	f042 0201 	orr.w	r2, r2, #1
 8008bc0:	601a      	str	r2, [r3, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 8008bc2:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008bc4:	6460      	str	r0, [r4, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8008bc6:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8008bca:	6320      	str	r0, [r4, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008bcc:	f884 0042 	strb.w	r0, [r4, #66]	@ 0x42
}
 8008bd0:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8008bd2:	2001      	movs	r0, #1
 8008bd4:	e7fc      	b.n	8008bd0 <HAL_I2C_Init+0xa4>

08008bd6 <HAL_I2C_MspDeInit>:
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
 8008bd6:	4770      	bx	lr

08008bd8 <HAL_I2C_DeInit>:
{
 8008bd8:	b510      	push	{r4, lr}
  if (hi2c == NULL)
 8008bda:	4604      	mov	r4, r0
 8008bdc:	b198      	cbz	r0, 8008c06 <HAL_I2C_DeInit+0x2e>
  __HAL_I2C_DISABLE(hi2c);
 8008bde:	6802      	ldr	r2, [r0, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 8008be0:	2324      	movs	r3, #36	@ 0x24
 8008be2:	f880 3041 	strb.w	r3, [r0, #65]	@ 0x41
  __HAL_I2C_DISABLE(hi2c);
 8008be6:	6813      	ldr	r3, [r2, #0]
 8008be8:	f023 0301 	bic.w	r3, r3, #1
 8008bec:	6013      	str	r3, [r2, #0]
  HAL_I2C_MspDeInit(hi2c);
 8008bee:	f7ff fff2 	bl	8008bd6 <HAL_I2C_MspDeInit>
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008bf2:	2000      	movs	r0, #0
 8008bf4:	6460      	str	r0, [r4, #68]	@ 0x44
  __HAL_UNLOCK(hi2c);
 8008bf6:	f884 0040 	strb.w	r0, [r4, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_RESET;
 8008bfa:	f884 0041 	strb.w	r0, [r4, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8008bfe:	6320      	str	r0, [r4, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008c00:	f884 0042 	strb.w	r0, [r4, #66]	@ 0x42
}
 8008c04:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8008c06:	2001      	movs	r0, #1
 8008c08:	e7fc      	b.n	8008c04 <HAL_I2C_DeInit+0x2c>
	...

08008c0c <HAL_I2C_Mem_Write>:
{
 8008c0c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c10:	4699      	mov	r9, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 8008c12:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
{
 8008c16:	4604      	mov	r4, r0
 8008c18:	460f      	mov	r7, r1
  if (hi2c->State == HAL_I2C_STATE_READY)
 8008c1a:	2b20      	cmp	r3, #32
{
 8008c1c:	4616      	mov	r6, r2
 8008c1e:	f8bd a034 	ldrh.w	sl, [sp, #52]	@ 0x34
 8008c22:	f8dd 8038 	ldr.w	r8, [sp, #56]	@ 0x38
  if (hi2c->State == HAL_I2C_STATE_READY)
 8008c26:	f040 80c6 	bne.w	8008db6 <HAL_I2C_Mem_Write+0x1aa>
    if ((pData == NULL) || (Size == 0U))
 8008c2a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008c2c:	b113      	cbz	r3, 8008c34 <HAL_I2C_Mem_Write+0x28>
 8008c2e:	f1ba 0f00 	cmp.w	sl, #0
 8008c32:	d106      	bne.n	8008c42 <HAL_I2C_Mem_Write+0x36>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8008c34:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008c38:	6463      	str	r3, [r4, #68]	@ 0x44
      return  HAL_ERROR;
 8008c3a:	2001      	movs	r0, #1
}
 8008c3c:	b003      	add	sp, #12
 8008c3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 8008c42:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 8008c46:	2b01      	cmp	r3, #1
 8008c48:	f000 80b5 	beq.w	8008db6 <HAL_I2C_Mem_Write+0x1aa>
 8008c4c:	f04f 0b01 	mov.w	fp, #1
 8008c50:	f880 b040 	strb.w	fp, [r0, #64]	@ 0x40
    tickstart = HAL_GetTick();
 8008c54:	f7fe fe02 	bl	800785c <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8008c58:	2319      	movs	r3, #25
    tickstart = HAL_GetTick();
 8008c5a:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8008c5c:	9000      	str	r0, [sp, #0]
 8008c5e:	465a      	mov	r2, fp
 8008c60:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8008c64:	4620      	mov	r0, r4
 8008c66:	f7ff fefc 	bl	8008a62 <I2C_WaitOnFlagUntilTimeout>
 8008c6a:	2800      	cmp	r0, #0
 8008c6c:	d1e5      	bne.n	8008c3a <HAL_I2C_Mem_Write+0x2e>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8008c6e:	2321      	movs	r3, #33	@ 0x21
    hi2c->XferISR   = NULL;
 8008c70:	6360      	str	r0, [r4, #52]	@ 0x34
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8008c72:	fa5f f289 	uxtb.w	r2, r9
 8008c76:	4639      	mov	r1, r7
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8008c78:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8008c7c:	2340      	movs	r3, #64	@ 0x40
 8008c7e:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
    hi2c->pBuffPtr  = pData;
 8008c82:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008c84:	6460      	str	r0, [r4, #68]	@ 0x44
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8008c86:	4620      	mov	r0, r4
    hi2c->pBuffPtr  = pData;
 8008c88:	6263      	str	r3, [r4, #36]	@ 0x24
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8008c8a:	4b4c      	ldr	r3, [pc, #304]	@ (8008dbc <HAL_I2C_Mem_Write+0x1b0>)
    hi2c->XferCount = Size;
 8008c8c:	f8a4 a02a 	strh.w	sl, [r4, #42]	@ 0x2a
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8008c90:	9300      	str	r3, [sp, #0]
 8008c92:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8008c96:	f7ff fe23 	bl	80088e0 <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008c9a:	462a      	mov	r2, r5
 8008c9c:	4641      	mov	r1, r8
 8008c9e:	4620      	mov	r0, r4
 8008ca0:	f7ff feb4 	bl	8008a0c <I2C_WaitOnTXISFlagUntilTimeout>
 8008ca4:	bb18      	cbnz	r0, 8008cee <HAL_I2C_Mem_Write+0xe2>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8008ca6:	f1b9 0f01 	cmp.w	r9, #1
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8008caa:	6823      	ldr	r3, [r4, #0]
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8008cac:	d115      	bne.n	8008cda <HAL_I2C_Mem_Write+0xce>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8008cae:	b2f6      	uxtb	r6, r6
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8008cb0:	2200      	movs	r2, #0
 8008cb2:	2180      	movs	r1, #128	@ 0x80
 8008cb4:	4620      	mov	r0, r4
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8008cb6:	629e      	str	r6, [r3, #40]	@ 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8008cb8:	4643      	mov	r3, r8
 8008cba:	9500      	str	r5, [sp, #0]
 8008cbc:	f7ff fed1 	bl	8008a62 <I2C_WaitOnFlagUntilTimeout>
 8008cc0:	b9a8      	cbnz	r0, 8008cee <HAL_I2C_Mem_Write+0xe2>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008cc2:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8008cc4:	b29b      	uxth	r3, r3
 8008cc6:	2bff      	cmp	r3, #255	@ 0xff
 8008cc8:	d815      	bhi.n	8008cf6 <HAL_I2C_Mem_Write+0xea>
      hi2c->XferSize = hi2c->XferCount;
 8008cca:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8008ccc:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
      hi2c->XferSize = hi2c->XferCount;
 8008cd0:	b292      	uxth	r2, r2
 8008cd2:	8522      	strh	r2, [r4, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8008cd4:	b2d2      	uxtb	r2, r2
 8008cd6:	9000      	str	r0, [sp, #0]
 8008cd8:	e012      	b.n	8008d00 <HAL_I2C_Mem_Write+0xf4>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8008cda:	0a32      	lsrs	r2, r6, #8
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008cdc:	4641      	mov	r1, r8
 8008cde:	4620      	mov	r0, r4
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8008ce0:	629a      	str	r2, [r3, #40]	@ 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008ce2:	462a      	mov	r2, r5
 8008ce4:	f7ff fe92 	bl	8008a0c <I2C_WaitOnTXISFlagUntilTimeout>
 8008ce8:	b908      	cbnz	r0, 8008cee <HAL_I2C_Mem_Write+0xe2>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8008cea:	6823      	ldr	r3, [r4, #0]
 8008cec:	e7df      	b.n	8008cae <HAL_I2C_Mem_Write+0xa2>
      __HAL_UNLOCK(hi2c);
 8008cee:	2300      	movs	r3, #0
 8008cf0:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
      return HAL_ERROR;
 8008cf4:	e7a1      	b.n	8008c3a <HAL_I2C_Mem_Write+0x2e>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8008cf6:	22ff      	movs	r2, #255	@ 0xff
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8008cf8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8008cfc:	8522      	strh	r2, [r4, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8008cfe:	9000      	str	r0, [sp, #0]
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8008d00:	4639      	mov	r1, r7
 8008d02:	4620      	mov	r0, r4
 8008d04:	f7ff fdec 	bl	80088e0 <I2C_TransferConfig>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008d08:	462a      	mov	r2, r5
 8008d0a:	4641      	mov	r1, r8
 8008d0c:	4620      	mov	r0, r4
 8008d0e:	f7ff fe7d 	bl	8008a0c <I2C_WaitOnTXISFlagUntilTimeout>
 8008d12:	2800      	cmp	r0, #0
 8008d14:	d191      	bne.n	8008c3a <HAL_I2C_Mem_Write+0x2e>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8008d16:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8008d18:	6822      	ldr	r2, [r4, #0]
 8008d1a:	f813 1b01 	ldrb.w	r1, [r3], #1
 8008d1e:	6291      	str	r1, [r2, #40]	@ 0x28
      hi2c->pBuffPtr++;
 8008d20:	6263      	str	r3, [r4, #36]	@ 0x24
      hi2c->XferCount--;
 8008d22:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 8008d24:	8d22      	ldrh	r2, [r4, #40]	@ 0x28
      hi2c->XferCount--;
 8008d26:	3b01      	subs	r3, #1
      hi2c->XferSize--;
 8008d28:	3a01      	subs	r2, #1
      hi2c->XferCount--;
 8008d2a:	b29b      	uxth	r3, r3
      hi2c->XferSize--;
 8008d2c:	b292      	uxth	r2, r2
      hi2c->XferCount--;
 8008d2e:	8563      	strh	r3, [r4, #42]	@ 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8008d30:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 8008d32:	8522      	strh	r2, [r4, #40]	@ 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8008d34:	b29b      	uxth	r3, r3
 8008d36:	b1b3      	cbz	r3, 8008d66 <HAL_I2C_Mem_Write+0x15a>
 8008d38:	b9aa      	cbnz	r2, 8008d66 <HAL_I2C_Mem_Write+0x15a>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8008d3a:	4643      	mov	r3, r8
 8008d3c:	2180      	movs	r1, #128	@ 0x80
 8008d3e:	4620      	mov	r0, r4
 8008d40:	9500      	str	r5, [sp, #0]
 8008d42:	f7ff fe8e 	bl	8008a62 <I2C_WaitOnFlagUntilTimeout>
 8008d46:	2800      	cmp	r0, #0
 8008d48:	f47f af77 	bne.w	8008c3a <HAL_I2C_Mem_Write+0x2e>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008d4c:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8008d4e:	b29b      	uxth	r3, r3
 8008d50:	2bff      	cmp	r3, #255	@ 0xff
 8008d52:	d928      	bls.n	8008da6 <HAL_I2C_Mem_Write+0x19a>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8008d54:	22ff      	movs	r2, #255	@ 0xff
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8008d56:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8008d5a:	8522      	strh	r2, [r4, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8008d5c:	9000      	str	r0, [sp, #0]
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8008d5e:	4639      	mov	r1, r7
 8008d60:	4620      	mov	r0, r4
 8008d62:	f7ff fdbd 	bl	80088e0 <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
 8008d66:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8008d68:	b29b      	uxth	r3, r3
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	d1cc      	bne.n	8008d08 <HAL_I2C_Mem_Write+0xfc>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008d6e:	462a      	mov	r2, r5
 8008d70:	4641      	mov	r1, r8
 8008d72:	4620      	mov	r0, r4
 8008d74:	f7ff feb0 	bl	8008ad8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8008d78:	2800      	cmp	r0, #0
 8008d7a:	f47f af5e 	bne.w	8008c3a <HAL_I2C_Mem_Write+0x2e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008d7e:	6823      	ldr	r3, [r4, #0]
 8008d80:	2120      	movs	r1, #32
 8008d82:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8008d84:	685a      	ldr	r2, [r3, #4]
 8008d86:	f022 72ff 	bic.w	r2, r2, #33423360	@ 0x1fe0000
 8008d8a:	f422 328b 	bic.w	r2, r2, #71168	@ 0x11600
 8008d8e:	f422 72ff 	bic.w	r2, r2, #510	@ 0x1fe
 8008d92:	f022 0201 	bic.w	r2, r2, #1
 8008d96:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8008d98:	f884 1041 	strb.w	r1, [r4, #65]	@ 0x41
    __HAL_UNLOCK(hi2c);
 8008d9c:	f884 0040 	strb.w	r0, [r4, #64]	@ 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8008da0:	f884 0042 	strb.w	r0, [r4, #66]	@ 0x42
    return HAL_OK;
 8008da4:	e74a      	b.n	8008c3c <HAL_I2C_Mem_Write+0x30>
          hi2c->XferSize = hi2c->XferCount;
 8008da6:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8008da8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
          hi2c->XferSize = hi2c->XferCount;
 8008dac:	b292      	uxth	r2, r2
 8008dae:	8522      	strh	r2, [r4, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8008db0:	b2d2      	uxtb	r2, r2
 8008db2:	9000      	str	r0, [sp, #0]
 8008db4:	e7d3      	b.n	8008d5e <HAL_I2C_Mem_Write+0x152>
    __HAL_LOCK(hi2c);
 8008db6:	2002      	movs	r0, #2
 8008db8:	e740      	b.n	8008c3c <HAL_I2C_Mem_Write+0x30>
 8008dba:	bf00      	nop
 8008dbc:	80002000 	.word	0x80002000

08008dc0 <HAL_I2C_Mem_Read>:
{
 8008dc0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008dc4:	4699      	mov	r9, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 8008dc6:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
{
 8008dca:	4604      	mov	r4, r0
 8008dcc:	460f      	mov	r7, r1
  if (hi2c->State == HAL_I2C_STATE_READY)
 8008dce:	2b20      	cmp	r3, #32
{
 8008dd0:	4616      	mov	r6, r2
 8008dd2:	f8bd a034 	ldrh.w	sl, [sp, #52]	@ 0x34
 8008dd6:	f8dd 8038 	ldr.w	r8, [sp, #56]	@ 0x38
  if (hi2c->State == HAL_I2C_STATE_READY)
 8008dda:	f040 80c9 	bne.w	8008f70 <HAL_I2C_Mem_Read+0x1b0>
    if ((pData == NULL) || (Size == 0U))
 8008dde:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008de0:	b113      	cbz	r3, 8008de8 <HAL_I2C_Mem_Read+0x28>
 8008de2:	f1ba 0f00 	cmp.w	sl, #0
 8008de6:	d106      	bne.n	8008df6 <HAL_I2C_Mem_Read+0x36>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8008de8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008dec:	6463      	str	r3, [r4, #68]	@ 0x44
      return  HAL_ERROR;
 8008dee:	2001      	movs	r0, #1
}
 8008df0:	b003      	add	sp, #12
 8008df2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 8008df6:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 8008dfa:	2b01      	cmp	r3, #1
 8008dfc:	f000 80b8 	beq.w	8008f70 <HAL_I2C_Mem_Read+0x1b0>
 8008e00:	f04f 0b01 	mov.w	fp, #1
 8008e04:	f880 b040 	strb.w	fp, [r0, #64]	@ 0x40
    tickstart = HAL_GetTick();
 8008e08:	f7fe fd28 	bl	800785c <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8008e0c:	2319      	movs	r3, #25
 8008e0e:	9000      	str	r0, [sp, #0]
    tickstart = HAL_GetTick();
 8008e10:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8008e12:	465a      	mov	r2, fp
 8008e14:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8008e18:	4620      	mov	r0, r4
 8008e1a:	f7ff fe22 	bl	8008a62 <I2C_WaitOnFlagUntilTimeout>
 8008e1e:	4603      	mov	r3, r0
 8008e20:	2800      	cmp	r0, #0
 8008e22:	d1e4      	bne.n	8008dee <HAL_I2C_Mem_Read+0x2e>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8008e24:	2222      	movs	r2, #34	@ 0x22
    hi2c->XferISR   = NULL;
 8008e26:	6360      	str	r0, [r4, #52]	@ 0x34
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8008e28:	4639      	mov	r1, r7
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8008e2a:	f884 2041 	strb.w	r2, [r4, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8008e2e:	2240      	movs	r2, #64	@ 0x40
 8008e30:	f884 2042 	strb.w	r2, [r4, #66]	@ 0x42
    hi2c->pBuffPtr  = pData;
 8008e34:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008e36:	6460      	str	r0, [r4, #68]	@ 0x44
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8008e38:	4620      	mov	r0, r4
    hi2c->pBuffPtr  = pData;
 8008e3a:	6262      	str	r2, [r4, #36]	@ 0x24
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8008e3c:	4a4d      	ldr	r2, [pc, #308]	@ (8008f74 <HAL_I2C_Mem_Read+0x1b4>)
    hi2c->XferCount = Size;
 8008e3e:	f8a4 a02a 	strh.w	sl, [r4, #42]	@ 0x2a
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8008e42:	9200      	str	r2, [sp, #0]
 8008e44:	fa5f f289 	uxtb.w	r2, r9
 8008e48:	f7ff fd4a 	bl	80088e0 <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008e4c:	462a      	mov	r2, r5
 8008e4e:	4641      	mov	r1, r8
 8008e50:	4620      	mov	r0, r4
 8008e52:	f7ff fddb 	bl	8008a0c <I2C_WaitOnTXISFlagUntilTimeout>
 8008e56:	bb20      	cbnz	r0, 8008ea2 <HAL_I2C_Mem_Read+0xe2>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8008e58:	f1b9 0f01 	cmp.w	r9, #1
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8008e5c:	6823      	ldr	r3, [r4, #0]
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8008e5e:	d116      	bne.n	8008e8e <HAL_I2C_Mem_Read+0xce>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8008e60:	b2f6      	uxtb	r6, r6
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8008e62:	2200      	movs	r2, #0
 8008e64:	2140      	movs	r1, #64	@ 0x40
 8008e66:	4620      	mov	r0, r4
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8008e68:	629e      	str	r6, [r3, #40]	@ 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8008e6a:	4643      	mov	r3, r8
 8008e6c:	9500      	str	r5, [sp, #0]
 8008e6e:	f7ff fdf8 	bl	8008a62 <I2C_WaitOnFlagUntilTimeout>
 8008e72:	b9b0      	cbnz	r0, 8008ea2 <HAL_I2C_Mem_Read+0xe2>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008e74:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8008e76:	b29b      	uxth	r3, r3
 8008e78:	2bff      	cmp	r3, #255	@ 0xff
 8008e7a:	4b3f      	ldr	r3, [pc, #252]	@ (8008f78 <HAL_I2C_Mem_Read+0x1b8>)
 8008e7c:	d815      	bhi.n	8008eaa <HAL_I2C_Mem_Read+0xea>
      hi2c->XferSize = hi2c->XferCount;
 8008e7e:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 8008e80:	b292      	uxth	r2, r2
 8008e82:	8522      	strh	r2, [r4, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8008e84:	b2d2      	uxtb	r2, r2
 8008e86:	9300      	str	r3, [sp, #0]
 8008e88:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8008e8c:	e012      	b.n	8008eb4 <HAL_I2C_Mem_Read+0xf4>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8008e8e:	0a32      	lsrs	r2, r6, #8
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008e90:	4641      	mov	r1, r8
 8008e92:	4620      	mov	r0, r4
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8008e94:	629a      	str	r2, [r3, #40]	@ 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008e96:	462a      	mov	r2, r5
 8008e98:	f7ff fdb8 	bl	8008a0c <I2C_WaitOnTXISFlagUntilTimeout>
 8008e9c:	b908      	cbnz	r0, 8008ea2 <HAL_I2C_Mem_Read+0xe2>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8008e9e:	6823      	ldr	r3, [r4, #0]
 8008ea0:	e7de      	b.n	8008e60 <HAL_I2C_Mem_Read+0xa0>
      __HAL_UNLOCK(hi2c);
 8008ea2:	2300      	movs	r3, #0
 8008ea4:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
      return HAL_ERROR;
 8008ea8:	e7a1      	b.n	8008dee <HAL_I2C_Mem_Read+0x2e>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8008eaa:	22ff      	movs	r2, #255	@ 0xff
 8008eac:	8522      	strh	r2, [r4, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8008eae:	9300      	str	r3, [sp, #0]
 8008eb0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8008eb4:	4639      	mov	r1, r7
 8008eb6:	4620      	mov	r0, r4
 8008eb8:	f7ff fd12 	bl	80088e0 <I2C_TransferConfig>
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8008ebc:	4643      	mov	r3, r8
 8008ebe:	2200      	movs	r2, #0
 8008ec0:	2104      	movs	r1, #4
 8008ec2:	4620      	mov	r0, r4
 8008ec4:	9500      	str	r5, [sp, #0]
 8008ec6:	f7ff fdcc 	bl	8008a62 <I2C_WaitOnFlagUntilTimeout>
 8008eca:	2800      	cmp	r0, #0
 8008ecc:	d18f      	bne.n	8008dee <HAL_I2C_Mem_Read+0x2e>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8008ece:	6823      	ldr	r3, [r4, #0]
 8008ed0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008ed2:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8008ed4:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8008ed6:	6a63      	ldr	r3, [r4, #36]	@ 0x24
      hi2c->XferSize--;
 8008ed8:	8d22      	ldrh	r2, [r4, #40]	@ 0x28
      hi2c->pBuffPtr++;
 8008eda:	3301      	adds	r3, #1
      hi2c->XferSize--;
 8008edc:	3a01      	subs	r2, #1
      hi2c->pBuffPtr++;
 8008ede:	6263      	str	r3, [r4, #36]	@ 0x24
      hi2c->XferCount--;
 8008ee0:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 8008ee2:	b292      	uxth	r2, r2
      hi2c->XferCount--;
 8008ee4:	3b01      	subs	r3, #1
      hi2c->XferSize--;
 8008ee6:	8522      	strh	r2, [r4, #40]	@ 0x28
      hi2c->XferCount--;
 8008ee8:	b29b      	uxth	r3, r3
 8008eea:	8563      	strh	r3, [r4, #42]	@ 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8008eec:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8008eee:	b29b      	uxth	r3, r3
 8008ef0:	b1b3      	cbz	r3, 8008f20 <HAL_I2C_Mem_Read+0x160>
 8008ef2:	b9aa      	cbnz	r2, 8008f20 <HAL_I2C_Mem_Read+0x160>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8008ef4:	4643      	mov	r3, r8
 8008ef6:	2180      	movs	r1, #128	@ 0x80
 8008ef8:	4620      	mov	r0, r4
 8008efa:	9500      	str	r5, [sp, #0]
 8008efc:	f7ff fdb1 	bl	8008a62 <I2C_WaitOnFlagUntilTimeout>
 8008f00:	2800      	cmp	r0, #0
 8008f02:	f47f af74 	bne.w	8008dee <HAL_I2C_Mem_Read+0x2e>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008f06:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8008f08:	b29b      	uxth	r3, r3
 8008f0a:	2bff      	cmp	r3, #255	@ 0xff
 8008f0c:	d928      	bls.n	8008f60 <HAL_I2C_Mem_Read+0x1a0>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8008f0e:	22ff      	movs	r2, #255	@ 0xff
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8008f10:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8008f14:	8522      	strh	r2, [r4, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8008f16:	9000      	str	r0, [sp, #0]
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8008f18:	4639      	mov	r1, r7
 8008f1a:	4620      	mov	r0, r4
 8008f1c:	f7ff fce0 	bl	80088e0 <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
 8008f20:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8008f22:	b29b      	uxth	r3, r3
 8008f24:	2b00      	cmp	r3, #0
 8008f26:	d1c9      	bne.n	8008ebc <HAL_I2C_Mem_Read+0xfc>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008f28:	462a      	mov	r2, r5
 8008f2a:	4641      	mov	r1, r8
 8008f2c:	4620      	mov	r0, r4
 8008f2e:	f7ff fdd3 	bl	8008ad8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8008f32:	2800      	cmp	r0, #0
 8008f34:	f47f af5b 	bne.w	8008dee <HAL_I2C_Mem_Read+0x2e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008f38:	6823      	ldr	r3, [r4, #0]
 8008f3a:	2120      	movs	r1, #32
 8008f3c:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8008f3e:	685a      	ldr	r2, [r3, #4]
 8008f40:	f022 72ff 	bic.w	r2, r2, #33423360	@ 0x1fe0000
 8008f44:	f422 328b 	bic.w	r2, r2, #71168	@ 0x11600
 8008f48:	f422 72ff 	bic.w	r2, r2, #510	@ 0x1fe
 8008f4c:	f022 0201 	bic.w	r2, r2, #1
 8008f50:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8008f52:	f884 1041 	strb.w	r1, [r4, #65]	@ 0x41
    __HAL_UNLOCK(hi2c);
 8008f56:	f884 0040 	strb.w	r0, [r4, #64]	@ 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8008f5a:	f884 0042 	strb.w	r0, [r4, #66]	@ 0x42
    return HAL_OK;
 8008f5e:	e747      	b.n	8008df0 <HAL_I2C_Mem_Read+0x30>
          hi2c->XferSize = hi2c->XferCount;
 8008f60:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8008f62:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
          hi2c->XferSize = hi2c->XferCount;
 8008f66:	b292      	uxth	r2, r2
 8008f68:	8522      	strh	r2, [r4, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8008f6a:	b2d2      	uxtb	r2, r2
 8008f6c:	9000      	str	r0, [sp, #0]
 8008f6e:	e7d3      	b.n	8008f18 <HAL_I2C_Mem_Read+0x158>
    __HAL_LOCK(hi2c);
 8008f70:	2002      	movs	r0, #2
 8008f72:	e73d      	b.n	8008df0 <HAL_I2C_Mem_Read+0x30>
 8008f74:	80002000 	.word	0x80002000
 8008f78:	80002400 	.word	0x80002400

08008f7c <HAL_I2C_GetState>:
  return hi2c->State;
 8008f7c:	f890 0041 	ldrb.w	r0, [r0, #65]	@ 0x41
}
 8008f80:	4770      	bx	lr

08008f82 <HAL_I2C_GetError>:
  return hi2c->ErrorCode;
 8008f82:	6c40      	ldr	r0, [r0, #68]	@ 0x44
}
 8008f84:	4770      	bx	lr

08008f86 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8008f86:	b510      	push	{r4, lr}
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008f88:	f890 2041 	ldrb.w	r2, [r0, #65]	@ 0x41
{
 8008f8c:	4603      	mov	r3, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8008f8e:	2a20      	cmp	r2, #32
 8008f90:	b2d4      	uxtb	r4, r2
 8008f92:	d11c      	bne.n	8008fce <HAL_I2CEx_ConfigAnalogFilter+0x48>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008f94:	f890 2040 	ldrb.w	r2, [r0, #64]	@ 0x40
 8008f98:	2a01      	cmp	r2, #1
 8008f9a:	d018      	beq.n	8008fce <HAL_I2CEx_ConfigAnalogFilter+0x48>

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008f9c:	2224      	movs	r2, #36	@ 0x24
 8008f9e:	f880 2041 	strb.w	r2, [r0, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008fa2:	6802      	ldr	r2, [r0, #0]
 8008fa4:	6810      	ldr	r0, [r2, #0]
 8008fa6:	f020 0001 	bic.w	r0, r0, #1
 8008faa:	6010      	str	r0, [r2, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8008fac:	6810      	ldr	r0, [r2, #0]
 8008fae:	f420 5080 	bic.w	r0, r0, #4096	@ 0x1000
 8008fb2:	6010      	str	r0, [r2, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8008fb4:	6810      	ldr	r0, [r2, #0]
 8008fb6:	4301      	orrs	r1, r0
    __HAL_I2C_ENABLE(hi2c);

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008fb8:	2000      	movs	r0, #0
    hi2c->Instance->CR1 |= AnalogFilter;
 8008fba:	6011      	str	r1, [r2, #0]
    __HAL_I2C_ENABLE(hi2c);
 8008fbc:	6811      	ldr	r1, [r2, #0]
 8008fbe:	f041 0101 	orr.w	r1, r1, #1
 8008fc2:	6011      	str	r1, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8008fc4:	f883 4041 	strb.w	r4, [r3, #65]	@ 0x41
    __HAL_UNLOCK(hi2c);
 8008fc8:	f883 0040 	strb.w	r0, [r3, #64]	@ 0x40
  }
  else
  {
    return HAL_BUSY;
  }
}
 8008fcc:	bd10      	pop	{r4, pc}
    __HAL_LOCK(hi2c);
 8008fce:	2002      	movs	r0, #2
 8008fd0:	e7fc      	b.n	8008fcc <HAL_I2CEx_ConfigAnalogFilter+0x46>

08008fd2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8008fd2:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008fd4:	f890 2041 	ldrb.w	r2, [r0, #65]	@ 0x41
{
 8008fd8:	4603      	mov	r3, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8008fda:	2a20      	cmp	r2, #32
 8008fdc:	b2d4      	uxtb	r4, r2
 8008fde:	d11b      	bne.n	8009018 <HAL_I2CEx_ConfigDigitalFilter+0x46>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008fe0:	f890 2040 	ldrb.w	r2, [r0, #64]	@ 0x40
 8008fe4:	2a01      	cmp	r2, #1
 8008fe6:	d017      	beq.n	8009018 <HAL_I2CEx_ConfigDigitalFilter+0x46>

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008fe8:	2224      	movs	r2, #36	@ 0x24
 8008fea:	f880 2041 	strb.w	r2, [r0, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008fee:	6802      	ldr	r2, [r0, #0]
 8008ff0:	6810      	ldr	r0, [r2, #0]
 8008ff2:	f020 0001 	bic.w	r0, r0, #1
 8008ff6:	6010      	str	r0, [r2, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8008ff8:	6810      	ldr	r0, [r2, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8008ffa:	f420 6070 	bic.w	r0, r0, #3840	@ 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8008ffe:	ea40 2101 	orr.w	r1, r0, r1, lsl #8
    __HAL_I2C_ENABLE(hi2c);

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009002:	2000      	movs	r0, #0
    hi2c->Instance->CR1 = tmpreg;
 8009004:	6011      	str	r1, [r2, #0]
    __HAL_I2C_ENABLE(hi2c);
 8009006:	6811      	ldr	r1, [r2, #0]
 8009008:	f041 0101 	orr.w	r1, r1, #1
 800900c:	6011      	str	r1, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 800900e:	f883 4041 	strb.w	r4, [r3, #65]	@ 0x41
    __HAL_UNLOCK(hi2c);
 8009012:	f883 0040 	strb.w	r0, [r3, #64]	@ 0x40
  }
  else
  {
    return HAL_BUSY;
  }
}
 8009016:	bd10      	pop	{r4, pc}
    __HAL_LOCK(hi2c);
 8009018:	2002      	movs	r0, #2
 800901a:	e7fc      	b.n	8009016 <HAL_I2CEx_ConfigDigitalFilter+0x44>

0800901c <JPEG_Bits_To_SizeCodes>:
  * @param  Huffcode pointer to codes table
  * @param  LastK pointer to last Coeff (table dimension)
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_Bits_To_SizeCodes(uint8_t *Bits, uint8_t *Huffsize, uint32_t *Huffcode, uint32_t *LastK)
{
 800901c:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Figure C.1: Generation of table of Huffman code sizes */
  p = 0;
  for (l = 0; l < 16UL; l++)
  {
    i = (uint32_t)Bits[l];
 800901e:	2401      	movs	r4, #1
 8009020:	7807      	ldrb	r7, [r0, #0]
  p = 0;
 8009022:	2500      	movs	r5, #0
 8009024:	194e      	adds	r6, r1, r5
 8009026:	443d      	add	r5, r7
 8009028:	194f      	adds	r7, r1, r5
    if ((p + i) > 256UL)
    {
      /* check for table overflow */
      return HAL_ERROR;
    }
    while (i != 0UL)
 800902a:	42be      	cmp	r6, r7
 800902c:	d112      	bne.n	8009054 <JPEG_Bits_To_SizeCodes+0x38>
  for (l = 0; l < 16UL; l++)
 800902e:	2c10      	cmp	r4, #16
 8009030:	d108      	bne.n	8009044 <JPEG_Bits_To_SizeCodes+0x28>
      Huffsize[p] = (uint8_t) l + 1U;
      p++;
      i--;
    }
  }
  Huffsize[p] = 0;
 8009032:	2400      	movs	r4, #0
    /* code must fit in "size" bits (si), no code is allowed to be all ones*/
    if(si > 31UL)
    {
      return HAL_ERROR;
    }
    if (((uint32_t) code) >= (((uint32_t) 1) << si))
 8009034:	2601      	movs	r6, #1
  Huffsize[p] = 0;
 8009036:	554c      	strb	r4, [r1, r5]
  *LastK = p;
 8009038:	601d      	str	r5, [r3, #0]
  p = 0;
 800903a:	4623      	mov	r3, r4
  si = Huffsize[0];
 800903c:	780d      	ldrb	r5, [r1, #0]
  while (Huffsize[p] != 0U)
 800903e:	5cc8      	ldrb	r0, [r1, r3]
 8009040:	b9d8      	cbnz	r0, 800907a <JPEG_Bits_To_SizeCodes+0x5e>
    code <<= 1;
    si++;
  }
  /* Return function status */
  return HAL_OK;
}
 8009042:	bdf0      	pop	{r4, r5, r6, r7, pc}
    i = (uint32_t)Bits[l];
 8009044:	5d07      	ldrb	r7, [r0, r4]
    if ((p + i) > 256UL)
 8009046:	3401      	adds	r4, #1
 8009048:	19ee      	adds	r6, r5, r7
 800904a:	f5b6 7f80 	cmp.w	r6, #256	@ 0x100
 800904e:	d9e9      	bls.n	8009024 <JPEG_Bits_To_SizeCodes+0x8>
      return HAL_ERROR;
 8009050:	2001      	movs	r0, #1
 8009052:	e7f6      	b.n	8009042 <JPEG_Bits_To_SizeCodes+0x26>
      Huffsize[p] = (uint8_t) l + 1U;
 8009054:	f806 4b01 	strb.w	r4, [r6], #1
      i--;
 8009058:	e7e7      	b.n	800902a <JPEG_Bits_To_SizeCodes+0xe>
      Huffcode[p] = code;
 800905a:	f842 4023 	str.w	r4, [r2, r3, lsl #2]
      p++;
 800905e:	3301      	adds	r3, #1
    while (((uint32_t) Huffsize[p]) == si)
 8009060:	5cc8      	ldrb	r0, [r1, r3]
 8009062:	19dc      	adds	r4, r3, r7
 8009064:	42a8      	cmp	r0, r5
 8009066:	d0f8      	beq.n	800905a <JPEG_Bits_To_SizeCodes+0x3e>
    if(si > 31UL)
 8009068:	2d1f      	cmp	r5, #31
 800906a:	d8f1      	bhi.n	8009050 <JPEG_Bits_To_SizeCodes+0x34>
    if (((uint32_t) code) >= (((uint32_t) 1) << si))
 800906c:	fa06 f005 	lsl.w	r0, r6, r5
 8009070:	42a0      	cmp	r0, r4
 8009072:	d9ed      	bls.n	8009050 <JPEG_Bits_To_SizeCodes+0x34>
    code <<= 1;
 8009074:	0064      	lsls	r4, r4, #1
    si++;
 8009076:	3501      	adds	r5, #1
 8009078:	e7e1      	b.n	800903e <JPEG_Bits_To_SizeCodes+0x22>
 800907a:	1ae7      	subs	r7, r4, r3
 800907c:	e7f0      	b.n	8009060 <JPEG_Bits_To_SizeCodes+0x44>

0800907e <JPEG_DCHuff_BitsVals_To_SizeCodes>:
  * @param  DC_SizeCodesTable pointer to DC huffman Sizes/Codes table
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_DCHuff_BitsVals_To_SizeCodes(JPEG_DCHuffTableTypeDef *DC_BitsValsTable,
                                                           JPEG_DC_HuffCodeTableTypeDef *DC_SizeCodesTable)
{
 800907e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009080:	f2ad 5d14 	subw	sp, sp, #1300	@ 0x514
 8009084:	460d      	mov	r5, r1
 8009086:	4604      	mov	r4, r0
  uint32_t k;
  uint32_t l;
  uint32_t lastK;
  uint8_t huffsize[257];
  uint32_t huffcode[257];
  error = JPEG_Bits_To_SizeCodes(DC_BitsValsTable->Bits, huffsize, huffcode, &lastK);
 8009088:	ab01      	add	r3, sp, #4
 800908a:	aa43      	add	r2, sp, #268	@ 0x10c
 800908c:	a902      	add	r1, sp, #8
 800908e:	f7ff ffc5 	bl	800901c <JPEG_Bits_To_SizeCodes>
  if (error != HAL_OK)
 8009092:	b938      	cbnz	r0, 80090a4 <JPEG_DCHuff_BitsVals_To_SizeCodes+0x26>
 8009094:	9e01      	ldr	r6, [sp, #4]
 8009096:	460b      	mov	r3, r1
 8009098:	f104 010f 	add.w	r1, r4, #15
 800909c:	360f      	adds	r6, #15
 800909e:	4434      	add	r4, r6
    return  error;
  }
  /* Figure C.3: ordering procedure for encoding procedure code tables */
  k = 0;

  while (k < lastK)
 80090a0:	42a1      	cmp	r1, r4
 80090a2:	d102      	bne.n	80090aa <JPEG_DCHuff_BitsVals_To_SizeCodes+0x2c>
    }
  }

  /* Return function status */
  return HAL_OK;
}
 80090a4:	f20d 5d14 	addw	sp, sp, #1300	@ 0x514
 80090a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    l = DC_BitsValsTable->HuffVal[k];
 80090aa:	f811 6f01 	ldrb.w	r6, [r1, #1]!
    if (l >= JPEG_DC_HUFF_TABLE_SIZE)
 80090ae:	2e0b      	cmp	r6, #11
 80090b0:	d80a      	bhi.n	80090c8 <JPEG_DCHuff_BitsVals_To_SizeCodes+0x4a>
      DC_SizeCodesTable->HuffmanCode[l] = huffcode[k];
 80090b2:	eb05 0786 	add.w	r7, r5, r6, lsl #2
 80090b6:	f852 cb04 	ldr.w	ip, [r2], #4
 80090ba:	f8c7 c00c 	str.w	ip, [r7, #12]
      DC_SizeCodesTable->CodeLength[l] = huffsize[k] - 1U;
 80090be:	f813 7b01 	ldrb.w	r7, [r3], #1
 80090c2:	3f01      	subs	r7, #1
 80090c4:	55af      	strb	r7, [r5, r6]
      k++;
 80090c6:	e7eb      	b.n	80090a0 <JPEG_DCHuff_BitsVals_To_SizeCodes+0x22>
      return HAL_ERROR; /* Huffman Table overflow error*/
 80090c8:	2001      	movs	r0, #1
 80090ca:	e7eb      	b.n	80090a4 <JPEG_DCHuff_BitsVals_To_SizeCodes+0x26>

080090cc <JPEG_Set_HuffDC_Mem>:
  * @param  DCTableAddress Encoder DC huffman table address it could be HUFFENC_DC0 or HUFFENC_DC1.
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_Set_HuffDC_Mem(JPEG_HandleTypeDef *hjpeg, JPEG_DCHuffTableTypeDef *HuffTableDC,
                                             const __IO uint32_t *DCTableAddress)
{
 80090cc:	4603      	mov	r3, r0
 80090ce:	4608      	mov	r0, r1
 80090d0:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t i;
  uint32_t lsb;
  uint32_t msb;
  __IO uint32_t *address, *addressDef;

  if (DCTableAddress == (hjpeg->Instance->HUFFENC_DC0))
 80090d2:	681c      	ldr	r4, [r3, #0]
{
 80090d4:	b091      	sub	sp, #68	@ 0x44
  if (DCTableAddress == (hjpeg->Instance->HUFFENC_DC0))
 80090d6:	f504 63f8 	add.w	r3, r4, #1984	@ 0x7c0
 80090da:	429a      	cmp	r2, r3
 80090dc:	d125      	bne.n	800912a <JPEG_Set_HuffDC_Mem+0x5e>
  {
    address = (hjpeg->Instance->HUFFENC_DC0 + (JPEG_DC_HUFF_TABLE_SIZE / 2UL));
 80090de:	f504 64fb 	add.w	r4, r4, #2008	@ 0x7d8
    return HAL_ERROR;
  }

  if (HuffTableDC != NULL)
  {
    error = JPEG_DCHuff_BitsVals_To_SizeCodes(HuffTableDC, &dcSizeCodesTable);
 80090e2:	a901      	add	r1, sp, #4
 80090e4:	f7ff ffcb 	bl	800907e <JPEG_DCHuff_BitsVals_To_SizeCodes>
    if (error != HAL_OK)
 80090e8:	b9e8      	cbnz	r0, 8009126 <JPEG_Set_HuffDC_Mem+0x5a>
    {
      return  error;
    }
    addressDef = address;
    *addressDef = 0x0FFF0FFF;
 80090ea:	aa01      	add	r2, sp, #4
 80090ec:	f06f 23f0 	mvn.w	r3, #4026593280	@ 0xf000f000
 80090f0:	f1a4 0618 	sub.w	r6, r4, #24
    addressDef++;
    *addressDef = 0x0FFF0FFF;
 80090f4:	4615      	mov	r5, r2
    *addressDef = 0x0FFF0FFF;
 80090f6:	6023      	str	r3, [r4, #0]
    *addressDef = 0x0FFF0FFF;
 80090f8:	6063      	str	r3, [r4, #4]
    i = JPEG_DC_HUFF_TABLE_SIZE;
    while (i > 1UL)
    {
      i--;
      address --;
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 80090fa:	7ad1      	ldrb	r1, [r2, #11]
    while (i > 1UL)
 80090fc:	3d08      	subs	r5, #8
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 80090fe:	f895 3040 	ldrb.w	r3, [r5, #64]	@ 0x40
    while (i > 1UL)
 8009102:	3a02      	subs	r2, #2
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 8009104:	0209      	lsls	r1, r1, #8
                                                                                   0xFFUL);
      i--;
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 8009106:	f895 703c 	ldrb.w	r7, [r5, #60]	@ 0x3c
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 800910a:	f401 6170 	and.w	r1, r1, #3840	@ 0xf00
 800910e:	4319      	orrs	r1, r3
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 8009110:	7b13      	ldrb	r3, [r2, #12]
 8009112:	021b      	lsls	r3, r3, #8
 8009114:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8009118:	433b      	orrs	r3, r7
                                                                                   0xFFUL);

      *address = lsb | (msb << 16);
 800911a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800911e:	f844 3d04 	str.w	r3, [r4, #-4]!
    while (i > 1UL)
 8009122:	42b4      	cmp	r4, r6
 8009124:	d1e9      	bne.n	80090fa <JPEG_Set_HuffDC_Mem+0x2e>
    }
  }

  /* Return function status */
  return HAL_OK;
}
 8009126:	b011      	add	sp, #68	@ 0x44
 8009128:	bdf0      	pop	{r4, r5, r6, r7, pc}
  else if (DCTableAddress == (hjpeg->Instance->HUFFENC_DC1))
 800912a:	f504 63fc 	add.w	r3, r4, #2016	@ 0x7e0
 800912e:	429a      	cmp	r2, r3
 8009130:	d102      	bne.n	8009138 <JPEG_Set_HuffDC_Mem+0x6c>
    address = (hjpeg->Instance->HUFFENC_DC1 + (JPEG_DC_HUFF_TABLE_SIZE / 2UL));
 8009132:	f504 64ff 	add.w	r4, r4, #2040	@ 0x7f8
  if (HuffTableDC != NULL)
 8009136:	e7d4      	b.n	80090e2 <JPEG_Set_HuffDC_Mem+0x16>
    return HAL_ERROR;
 8009138:	2001      	movs	r0, #1
 800913a:	e7f4      	b.n	8009126 <JPEG_Set_HuffDC_Mem+0x5a>

0800913c <JPEG_Set_HuffAC_Mem>:
  * @param  ACTableAddress Encoder AC huffman table address it could be HUFFENC_AC0 or HUFFENC_AC1.
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_Set_HuffAC_Mem(JPEG_HandleTypeDef *hjpeg, JPEG_ACHuffTableTypeDef *HuffTableAC,
                                             const __IO uint32_t *ACTableAddress)
{
 800913c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  HAL_StatusTypeDef error;
  JPEG_AC_HuffCodeTableTypeDef acSizeCodesTable;
  uint32_t i, lsb, msb;
  __IO uint32_t *address, *addressDef;

  if (ACTableAddress == (hjpeg->Instance->HUFFENC_AC0))
 8009140:	6804      	ldr	r4, [r0, #0]
{
 8009142:	f6ad 0d38 	subw	sp, sp, #2104	@ 0x838
 8009146:	460e      	mov	r6, r1
  if (ACTableAddress == (hjpeg->Instance->HUFFENC_AC0))
 8009148:	f504 63a0 	add.w	r3, r4, #1280	@ 0x500
 800914c:	429a      	cmp	r2, r3
 800914e:	d149      	bne.n	80091e4 <JPEG_Set_HuffAC_Mem+0xa8>
  {
    address = (hjpeg->Instance->HUFFENC_AC0 + (JPEG_AC_HUFF_TABLE_SIZE / 2UL));
 8009150:	f204 6444 	addw	r4, r4, #1604	@ 0x644
  error = JPEG_Bits_To_SizeCodes(AC_BitsValsTable->Bits, huffsize, huffcode, &lastK);
 8009154:	466b      	mov	r3, sp
 8009156:	f20d 4234 	addw	r2, sp, #1076	@ 0x434
 800915a:	a901      	add	r1, sp, #4
 800915c:	4630      	mov	r0, r6
 800915e:	f7ff ff5d 	bl	800901c <JPEG_Bits_To_SizeCodes>
  if (error != HAL_OK)
 8009162:	2800      	cmp	r0, #0
 8009164:	d13a      	bne.n	80091dc <JPEG_Set_HuffAC_Mem+0xa0>
 8009166:	9b00      	ldr	r3, [sp, #0]
 8009168:	460d      	mov	r5, r1
 800916a:	f106 0c0f 	add.w	ip, r6, #15
 800916e:	4617      	mov	r7, r2
 8009170:	330f      	adds	r3, #15
      l = (msb * 10UL) + lsb - 1UL;
 8009172:	f04f 0e0a 	mov.w	lr, #10
 8009176:	18f1      	adds	r1, r6, r3
      AC_SizeCodesTable->HuffmanCode[l] = huffcode[k];
 8009178:	ae42      	add	r6, sp, #264	@ 0x108
  while (k < lastK)
 800917a:	4561      	cmp	r1, ip
 800917c:	d139      	bne.n	80091f2 <JPEG_Set_HuffAC_Mem+0xb6>
    /* Locations 162:175 of each AC table contain information used internally by the core */

    addressDef = address;
    for (i = 0; i < 3UL; i++)
    {
      *addressDef = 0x0FFF0FFF;
 800917e:	f06f 23f0 	mvn.w	r3, #4026593280	@ 0xf000f000
 8009182:	a942      	add	r1, sp, #264	@ 0x108
 8009184:	f5a4 76a2 	sub.w	r6, r4, #324	@ 0x144
 8009188:	6023      	str	r3, [r4, #0]
    addressDef++;
    *addressDef = 0x0FD30FD2;
    addressDef++;
    *addressDef = 0x0FD50FD4;
    addressDef++;
    *addressDef = 0x0FD70FD6;
 800918a:	460d      	mov	r5, r1
      *addressDef = 0x0FFF0FFF;
 800918c:	6063      	str	r3, [r4, #4]
 800918e:	60a3      	str	r3, [r4, #8]
    *addressDef = 0x0FD10FD0;
 8009190:	f103 33d1 	add.w	r3, r3, #3520188881	@ 0xd1d1d1d1
 8009194:	f103 232e 	add.w	r3, r3, #771763712	@ 0x2e002e00
 8009198:	60e3      	str	r3, [r4, #12]
    *addressDef = 0x0FD30FD2;
 800919a:	f103 1302 	add.w	r3, r3, #131074	@ 0x20002
 800919e:	6123      	str	r3, [r4, #16]
    *addressDef = 0x0FD50FD4;
 80091a0:	f103 1302 	add.w	r3, r3, #131074	@ 0x20002
 80091a4:	6163      	str	r3, [r4, #20]
    *addressDef = 0x0FD70FD6;
 80091a6:	f103 1302 	add.w	r3, r3, #131074	@ 0x20002
 80091aa:	61a3      	str	r3, [r4, #24]
    i = JPEG_AC_HUFF_TABLE_SIZE;
    while (i > 1UL)
    {
      i--;
      address--;
      msb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 80091ac:	f891 20a1 	ldrb.w	r2, [r1, #161]	@ 0xa1
    while (i > 1UL)
 80091b0:	3d08      	subs	r5, #8
      msb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 80091b2:	f895 3330 	ldrb.w	r3, [r5, #816]	@ 0x330
    while (i > 1UL)
 80091b6:	3902      	subs	r1, #2
      msb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 80091b8:	0212      	lsls	r2, r2, #8
                                                                                   0xFFUL);
      i--;
      lsb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 80091ba:	f895 732c 	ldrb.w	r7, [r5, #812]	@ 0x32c
      msb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 80091be:	f402 6270 	and.w	r2, r2, #3840	@ 0xf00
 80091c2:	431a      	orrs	r2, r3
      lsb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 80091c4:	f891 30a2 	ldrb.w	r3, [r1, #162]	@ 0xa2
 80091c8:	021b      	lsls	r3, r3, #8
 80091ca:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80091ce:	433b      	orrs	r3, r7
                                                                                   0xFFUL);

      *address = lsb | (msb << 16);
 80091d0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80091d4:	f844 3d04 	str.w	r3, [r4, #-4]!
    while (i > 1UL)
 80091d8:	42b4      	cmp	r4, r6
 80091da:	d1e7      	bne.n	80091ac <JPEG_Set_HuffAC_Mem+0x70>
    }
  }

  /* Return function status */
  return HAL_OK;
}
 80091dc:	f60d 0d38 	addw	sp, sp, #2104	@ 0x838
 80091e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  else if (ACTableAddress == (hjpeg->Instance->HUFFENC_AC1))
 80091e4:	f504 63cc 	add.w	r3, r4, #1632	@ 0x660
 80091e8:	429a      	cmp	r2, r3
 80091ea:	d10f      	bne.n	800920c <JPEG_Set_HuffAC_Mem+0xd0>
    address = (hjpeg->Instance->HUFFENC_AC1 + (JPEG_AC_HUFF_TABLE_SIZE / 2UL));
 80091ec:	f204 74a4 	addw	r4, r4, #1956	@ 0x7a4
  if (HuffTableAC != NULL)
 80091f0:	e7b0      	b.n	8009154 <JPEG_Set_HuffAC_Mem+0x18>
    l = AC_BitsValsTable->HuffVal[k];
 80091f2:	f81c 3f01 	ldrb.w	r3, [ip, #1]!
    if (l == 0UL)
 80091f6:	b15b      	cbz	r3, 8009210 <JPEG_Set_HuffAC_Mem+0xd4>
    else if (l == 0xF0UL) /* l = 0xF0 ZRL code*/
 80091f8:	2bf0      	cmp	r3, #240	@ 0xf0
 80091fa:	d015      	beq.n	8009228 <JPEG_Set_HuffAC_Mem+0xec>
      msb = (l & 0xF0UL) >> 4;
 80091fc:	091a      	lsrs	r2, r3, #4
      lsb = (l & 0x0FUL);
 80091fe:	f003 030f 	and.w	r3, r3, #15
      l = (msb * 10UL) + lsb - 1UL;
 8009202:	3b01      	subs	r3, #1
 8009204:	fb0e 3302 	mla	r3, lr, r2, r3
    if (l >= JPEG_AC_HUFF_TABLE_SIZE)
 8009208:	2ba1      	cmp	r3, #161	@ 0xa1
 800920a:	d902      	bls.n	8009212 <JPEG_Set_HuffAC_Mem+0xd6>
    return HAL_ERROR;
 800920c:	2001      	movs	r0, #1
 800920e:	e7e5      	b.n	80091dc <JPEG_Set_HuffAC_Mem+0xa0>
      l = 160; /*l = 0x00 EOB code*/
 8009210:	23a0      	movs	r3, #160	@ 0xa0
      AC_SizeCodesTable->HuffmanCode[l] = huffcode[k];
 8009212:	eb06 0283 	add.w	r2, r6, r3, lsl #2
 8009216:	f857 8b04 	ldr.w	r8, [r7], #4
 800921a:	f8c2 80a4 	str.w	r8, [r2, #164]	@ 0xa4
      AC_SizeCodesTable->CodeLength[l] = huffsize[k] - 1U;
 800921e:	f815 2b01 	ldrb.w	r2, [r5], #1
 8009222:	3a01      	subs	r2, #1
 8009224:	54f2      	strb	r2, [r6, r3]
      k++;
 8009226:	e7a8      	b.n	800917a <JPEG_Set_HuffAC_Mem+0x3e>
      l = 161;
 8009228:	23a1      	movs	r3, #161	@ 0xa1
 800922a:	e7f2      	b.n	8009212 <JPEG_Set_HuffAC_Mem+0xd6>

0800922c <JPEG_Init_Process>:
  * @retval None
  */
static void JPEG_Init_Process(JPEG_HandleTypeDef *hjpeg)
{
  /*Reset pause*/
  hjpeg->Context &= (~(JPEG_CONTEXT_PAUSE_INPUT | JPEG_CONTEXT_PAUSE_OUTPUT));
 800922c:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 800922e:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8009232:	6543      	str	r3, [r0, #84]	@ 0x54

  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 8009234:	6d42      	ldr	r2, [r0, #84]	@ 0x54
  {
    /*Set JPEG Codec to Decoding mode */
    hjpeg->Instance->CONFR1 |= JPEG_CONFR1_DE;
 8009236:	6803      	ldr	r3, [r0, #0]
  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 8009238:	f002 0203 	and.w	r2, r2, #3
 800923c:	2a02      	cmp	r2, #2
    hjpeg->Instance->CONFR1 |= JPEG_CONFR1_DE;
 800923e:	685a      	ldr	r2, [r3, #4]
 8009240:	bf0c      	ite	eq
 8009242:	f042 0208 	orreq.w	r2, r2, #8
  }
  else /* JPEG_CONTEXT_ENCODE */
  {
    /*Set JPEG Codec to Encoding mode */
    hjpeg->Instance->CONFR1 &= ~JPEG_CONFR1_DE;
 8009246:	f022 0208 	bicne.w	r2, r2, #8
 800924a:	605a      	str	r2, [r3, #4]
  }

  /*Stop JPEG processing */
  hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 800924c:	681a      	ldr	r2, [r3, #0]
 800924e:	f022 0201 	bic.w	r2, r2, #1
 8009252:	601a      	str	r2, [r3, #0]

  /* Disable All Interrupts */
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 8009254:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009256:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 800925a:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Flush input and output FIFOs*/
  hjpeg->Instance->CR |= JPEG_CR_IFF;
 800925c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800925e:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8009262:	631a      	str	r2, [r3, #48]	@ 0x30
  hjpeg->Instance->CR |= JPEG_CR_OFF;
 8009264:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009266:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800926a:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Clear all flags */
  __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 800926c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800926e:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 8009272:	639a      	str	r2, [r3, #56]	@ 0x38

  /*Start Encoding/Decoding*/
  hjpeg->Instance->CONFR0 |=  JPEG_CONFR0_START;
 8009274:	681a      	ldr	r2, [r3, #0]
 8009276:	f042 0201 	orr.w	r2, r2, #1
 800927a:	601a      	str	r2, [r3, #0]

  if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 800927c:	6d42      	ldr	r2, [r0, #84]	@ 0x54
 800927e:	f002 020c 	and.w	r2, r2, #12
 8009282:	2a08      	cmp	r2, #8
 8009284:	d104      	bne.n	8009290 <JPEG_Init_Process+0x64>
  {
    /*Enable IN/OUT, end of Conversation, and end of header parsing interruptions*/
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_IFT | JPEG_IT_IFNF | JPEG_IT_OFT | JPEG_IT_OFNE | JPEG_IT_EOC | JPEG_IT_HPD);
 8009286:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009288:	f042 026e 	orr.w	r2, r2, #110	@ 0x6e
  }
  else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
  {
    /*Enable End Of Conversation, and End Of Header parsing interruptions*/
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_EOC | JPEG_IT_HPD);
 800928c:	631a      	str	r2, [r3, #48]	@ 0x30
  }
  else
  {
    /* Nothing to do */
  }
}
 800928e:	4770      	bx	lr
  else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
 8009290:	6d42      	ldr	r2, [r0, #84]	@ 0x54
 8009292:	f002 020c 	and.w	r2, r2, #12
 8009296:	2a0c      	cmp	r2, #12
 8009298:	d1f9      	bne.n	800928e <JPEG_Init_Process+0x62>
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_EOC | JPEG_IT_HPD);
 800929a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800929c:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 80092a0:	e7f4      	b.n	800928c <JPEG_Init_Process+0x60>
	...

080092a4 <JPEG_DMA_StartProcess>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval JPEG_PROCESS_DONE if process ends else JPEG_PROCESS_ONGOING
  */
static HAL_StatusTypeDef JPEG_DMA_StartProcess(JPEG_HandleTypeDef *hjpeg)
{
 80092a4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  /*if the MDMA In is triggred with JPEG In FIFO Threshold flag
      then MDMA In buffer size is 32 bytes
    else (MDMA In is triggred with JPEG In FIFO not full flag)
      then MDMA In buffer size is 4 bytes
    */
  inXfrSize = hjpeg->hdmain->Init.BufferTransferLength;
 80092a6:	6b06      	ldr	r6, [r0, #48]	@ 0x30
{
 80092a8:	4604      	mov	r4, r0
    else (MDMA Out is triggred with JPEG Out FIFO not empty flag)
      then MDMA buffer size is 4 bytes
    */
  outXfrSize = hjpeg->hdmaout->Init.BufferTransferLength;

  if ((hjpeg->InDataLength < inXfrSize) || (hjpeg->OutDataLength < outXfrSize))
 80092aa:	6a82      	ldr	r2, [r0, #40]	@ 0x28
  inXfrSize = hjpeg->hdmain->Init.BufferTransferLength;
 80092ac:	6ab5      	ldr	r5, [r6, #40]	@ 0x28
  if ((hjpeg->InDataLength < inXfrSize) || (hjpeg->OutDataLength < outXfrSize))
 80092ae:	42aa      	cmp	r2, r5
 80092b0:	d313      	bcc.n	80092da <JPEG_DMA_StartProcess+0x36>
  outXfrSize = hjpeg->hdmaout->Init.BufferTransferLength;
 80092b2:	6b40      	ldr	r0, [r0, #52]	@ 0x34
  if ((hjpeg->InDataLength < inXfrSize) || (hjpeg->OutDataLength < outXfrSize))
 80092b4:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
  outXfrSize = hjpeg->hdmaout->Init.BufferTransferLength;
 80092b6:	6a81      	ldr	r1, [r0, #40]	@ 0x28
  if ((hjpeg->InDataLength < inXfrSize) || (hjpeg->OutDataLength < outXfrSize))
 80092b8:	428b      	cmp	r3, r1
 80092ba:	d30e      	bcc.n	80092da <JPEG_DMA_StartProcess+0x36>
  {
    return HAL_ERROR;
  }
  /* Set the JPEG MDMA In transfer complete callback */
  hjpeg->hdmain->XferCpltCallback = JPEG_MDMAInCpltCallback;
 80092bc:	4f18      	ldr	r7, [pc, #96]	@ (8009320 <JPEG_DMA_StartProcess+0x7c>)
 80092be:	6477      	str	r7, [r6, #68]	@ 0x44
  /* Set the MDMA In error callback */
  hjpeg->hdmain->XferErrorCallback = JPEG_MDMAErrorCallback;
 80092c0:	4f18      	ldr	r7, [pc, #96]	@ (8009324 <JPEG_DMA_StartProcess+0x80>)
 80092c2:	6577      	str	r7, [r6, #84]	@ 0x54

  /* Set the JPEG MDMA Out transfer complete callback */
  hjpeg->hdmaout->XferCpltCallback = JPEG_MDMAOutCpltCallback;
 80092c4:	4e18      	ldr	r6, [pc, #96]	@ (8009328 <JPEG_DMA_StartProcess+0x84>)
  /* Set the MDMA In error callback */
  hjpeg->hdmaout->XferErrorCallback = JPEG_MDMAErrorCallback;
 80092c6:	6547      	str	r7, [r0, #84]	@ 0x54
  hjpeg->hdmaout->XferCpltCallback = JPEG_MDMAOutCpltCallback;
 80092c8:	6446      	str	r6, [r0, #68]	@ 0x44
  /* Set the MDMA Out Abort callback */
  hjpeg->hdmaout->XferAbortCallback = JPEG_MDMAOutAbortCallback;
 80092ca:	4e18      	ldr	r6, [pc, #96]	@ (800932c <JPEG_DMA_StartProcess+0x88>)
 80092cc:	6586      	str	r6, [r0, #88]	@ 0x58

  if ((inXfrSize == 0UL) || (outXfrSize == 0UL))
 80092ce:	b105      	cbz	r5, 80092d2 <JPEG_DMA_StartProcess+0x2e>
 80092d0:	b931      	cbnz	r1, 80092e0 <JPEG_DMA_StartProcess+0x3c>
  {
    hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 80092d2:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 80092d4:	f043 0304 	orr.w	r3, r3, #4
 80092d8:	6523      	str	r3, [r4, #80]	@ 0x50
    return HAL_ERROR;
 80092da:	2001      	movs	r0, #1
    hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
    return HAL_ERROR;
  }

  return HAL_OK;
}
 80092dc:	b003      	add	sp, #12
 80092de:	bdf0      	pop	{r4, r5, r6, r7, pc}
  hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % inXfrSize);
 80092e0:	fbb2 f6f5 	udiv	r6, r2, r5
 80092e4:	fb05 2516 	mls	r5, r5, r6, r2
 80092e8:	1b52      	subs	r2, r2, r5
  if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
 80092ea:	2501      	movs	r5, #1
  hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % inXfrSize);
 80092ec:	62a2      	str	r2, [r4, #40]	@ 0x28
  hjpeg->OutDataLength = hjpeg->OutDataLength - (hjpeg->OutDataLength % outXfrSize);
 80092ee:	fbb3 f2f1 	udiv	r2, r3, r1
 80092f2:	fb01 3212 	mls	r2, r1, r2, r3
  if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
 80092f6:	6821      	ldr	r1, [r4, #0]
  hjpeg->OutDataLength = hjpeg->OutDataLength - (hjpeg->OutDataLength % outXfrSize);
 80092f8:	1a9b      	subs	r3, r3, r2
  if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
 80092fa:	3144      	adds	r1, #68	@ 0x44
  hjpeg->OutDataLength = hjpeg->OutDataLength - (hjpeg->OutDataLength % outXfrSize);
 80092fc:	62e3      	str	r3, [r4, #44]	@ 0x2c
  if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
 80092fe:	9500      	str	r5, [sp, #0]
 8009300:	69e2      	ldr	r2, [r4, #28]
 8009302:	f001 f848 	bl	800a396 <HAL_MDMA_Start_IT>
 8009306:	2800      	cmp	r0, #0
 8009308:	d1e3      	bne.n	80092d2 <JPEG_DMA_StartProcess+0x2e>
  if (HAL_MDMA_Start_IT(hjpeg->hdmain, (uint32_t)hjpeg->pJpegInBuffPtr, (uint32_t)&hjpeg->Instance->DIR,
 800930a:	6822      	ldr	r2, [r4, #0]
 800930c:	9500      	str	r5, [sp, #0]
 800930e:	3240      	adds	r2, #64	@ 0x40
 8009310:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8009312:	69a1      	ldr	r1, [r4, #24]
 8009314:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8009316:	f001 f83e 	bl	800a396 <HAL_MDMA_Start_IT>
 800931a:	2800      	cmp	r0, #0
 800931c:	d0de      	beq.n	80092dc <JPEG_DMA_StartProcess+0x38>
 800931e:	e7d8      	b.n	80092d2 <JPEG_DMA_StartProcess+0x2e>
 8009320:	08009867 	.word	0x08009867
 8009324:	0800975f 	.word	0x0800975f
 8009328:	08009d25 	.word	0x08009d25
 800932c:	08009d17 	.word	0x08009d17

08009330 <HAL_JPEG_Init>:
{
 8009330:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (hjpeg == NULL)
 8009332:	4605      	mov	r5, r0
 8009334:	2800      	cmp	r0, #0
 8009336:	f000 80f2 	beq.w	800951e <HAL_JPEG_Init+0x1ee>
  if (hjpeg->State == HAL_JPEG_STATE_RESET)
 800933a:	f890 304d 	ldrb.w	r3, [r0, #77]	@ 0x4d
 800933e:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8009342:	b91b      	cbnz	r3, 800934c <HAL_JPEG_Init+0x1c>
    hjpeg->Lock = HAL_UNLOCKED;
 8009344:	f880 204c 	strb.w	r2, [r0, #76]	@ 0x4c
    HAL_JPEG_MspInit(hjpeg);
 8009348:	f7f7 fea2 	bl	8001090 <HAL_JPEG_MspInit>
  __HAL_JPEG_ENABLE(hjpeg);
 800934c:	682c      	ldr	r4, [r5, #0]
  hjpeg->State = HAL_JPEG_STATE_BUSY;
 800934e:	2302      	movs	r3, #2
 8009350:	4a86      	ldr	r2, [pc, #536]	@ (800956c <HAL_JPEG_Init+0x23c>)
 8009352:	f885 304d 	strb.w	r3, [r5, #77]	@ 0x4d
  address = (hjpeg->Instance->DHTMEM + 3);
 8009356:	f504 715b 	add.w	r1, r4, #876	@ 0x36c
  __HAL_JPEG_ENABLE(hjpeg);
 800935a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800935c:	f504 7057 	add.w	r0, r4, #860	@ 0x35c
 8009360:	f043 0301 	orr.w	r3, r3, #1
 8009364:	6323      	str	r3, [r4, #48]	@ 0x30
  hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 8009366:	6823      	ldr	r3, [r4, #0]
 8009368:	f023 0301 	bic.w	r3, r3, #1
 800936c:	6023      	str	r3, [r4, #0]
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 800936e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8009370:	f023 037e 	bic.w	r3, r3, #126	@ 0x7e
 8009374:	6323      	str	r3, [r4, #48]	@ 0x30
  hjpeg->Instance->CR |= JPEG_CR_IFF;
 8009376:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8009378:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800937c:	6323      	str	r3, [r4, #48]	@ 0x30
  hjpeg->Instance->CR |= JPEG_CR_OFF;
 800937e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8009380:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8009384:	6323      	str	r3, [r4, #48]	@ 0x30
  __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 8009386:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8009388:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800938c:	63a3      	str	r3, [r4, #56]	@ 0x38
  hjpeg->QuantTable0 = (uint8_t *)((uint32_t)JPEG_LUM_QuantTable);
 800938e:	4b78      	ldr	r3, [pc, #480]	@ (8009570 <HAL_JPEG_Init+0x240>)
 8009390:	63eb      	str	r3, [r5, #60]	@ 0x3c
  hjpeg->QuantTable1 = (uint8_t *)((uint32_t)JPEG_CHROM_QuantTable);
 8009392:	4b78      	ldr	r3, [pc, #480]	@ (8009574 <HAL_JPEG_Init+0x244>)
 8009394:	642b      	str	r3, [r5, #64]	@ 0x40
  hjpeg->QuantTable2 = NULL;
 8009396:	2300      	movs	r3, #0
  hjpeg->QuantTable3 = NULL;
 8009398:	e9c5 3311 	strd	r3, r3, [r5, #68]	@ 0x44
               (((uint32_t)HuffTableDC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 800939c:	7b93      	ldrb	r3, [r2, #14]
  while (index > 3UL)
 800939e:	3a04      	subs	r2, #4
    *address = (((uint32_t)HuffTableDC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 80093a0:	7cd6      	ldrb	r6, [r2, #19]
               (((uint32_t)HuffTableDC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 80093a2:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableDC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 80093a4:	ea43 6306 	orr.w	r3, r3, r6, lsl #24
               ((uint32_t)HuffTableDC0->Bits[index - 4UL] & 0xFFUL);
 80093a8:	7c16      	ldrb	r6, [r2, #16]
               (((uint32_t)HuffTableDC0->Bits[index - 3UL] & 0xFFUL) << 8) |
 80093aa:	4333      	orrs	r3, r6
 80093ac:	7c56      	ldrb	r6, [r2, #17]
 80093ae:	ea43 2306 	orr.w	r3, r3, r6, lsl #8
    *address = (((uint32_t)HuffTableDC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 80093b2:	f841 3904 	str.w	r3, [r1], #-4
  while (index > 3UL)
 80093b6:	4281      	cmp	r1, r0
 80093b8:	d1f0      	bne.n	800939c <HAL_JPEG_Init+0x6c>
    *address = (((uint32_t)HuffTableDC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 80093ba:	4b6f      	ldr	r3, [pc, #444]	@ (8009578 <HAL_JPEG_Init+0x248>)
  address = (hjpeg->Instance->DHTMEM + 10UL);
 80093bc:	f504 7162 	add.w	r1, r4, #904	@ 0x388
 80093c0:	4a6e      	ldr	r2, [pc, #440]	@ (800957c <HAL_JPEG_Init+0x24c>)
 80093c2:	f504 775e 	add.w	r7, r4, #888	@ 0x378
    *address = (((uint32_t)HuffTableDC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 80093c6:	f8c4 3378 	str.w	r3, [r4, #888]	@ 0x378
 80093ca:	f1a3 3304 	sub.w	r3, r3, #67372036	@ 0x4040404
  address = (hjpeg->Instance->DHTMEM + 10UL);
 80093ce:	4610      	mov	r0, r2
 80093d0:	460e      	mov	r6, r1
    *address = (((uint32_t)HuffTableDC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 80093d2:	f8c4 3374 	str.w	r3, [r4, #884]	@ 0x374
 80093d6:	f1a3 3304 	sub.w	r3, r3, #67372036	@ 0x4040404
 80093da:	f8c4 3370 	str.w	r3, [r4, #880]	@ 0x370
               (((uint32_t)HuffTableAC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 80093de:	7b83      	ldrb	r3, [r0, #14]
  while (index > 3UL)
 80093e0:	3804      	subs	r0, #4
    *address = (((uint32_t)HuffTableAC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 80093e2:	f890 c013 	ldrb.w	ip, [r0, #19]
               (((uint32_t)HuffTableAC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 80093e6:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableAC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 80093e8:	ea43 630c 	orr.w	r3, r3, ip, lsl #24
               ((uint32_t)HuffTableAC0->Bits[index - 4UL] & 0xFFUL);
 80093ec:	f890 c010 	ldrb.w	ip, [r0, #16]
               (((uint32_t)HuffTableAC0->Bits[index - 3UL] & 0xFFUL) << 8) |
 80093f0:	ea43 030c 	orr.w	r3, r3, ip
 80093f4:	f890 c011 	ldrb.w	ip, [r0, #17]
 80093f8:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
    *address = (((uint32_t)HuffTableAC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 80093fc:	f846 3904 	str.w	r3, [r6], #-4
  while (index > 3UL)
 8009400:	42be      	cmp	r6, r7
 8009402:	d1ec      	bne.n	80093de <HAL_JPEG_Init+0xae>
  value = *address & 0xFFFF0000U;
 8009404:	f8d4 342c 	ldr.w	r3, [r4, #1068]	@ 0x42c
  address--; /* address = hjpeg->Instance->DHTMEM + 50*/
 8009408:	f504 6085 	add.w	r0, r4, #1064	@ 0x428
  value = *address & 0xFFFF0000U;
 800940c:	0c1b      	lsrs	r3, r3, #16
 800940e:	041b      	lsls	r3, r3, #16
  value = value | (((uint32_t)HuffTableAC0->HuffVal[161] & 0xFFUL) << 8) | ((uint32_t)HuffTableAC0->HuffVal[160] & 0xFFUL);
 8009410:	f443 437a 	orr.w	r3, r3, #64000	@ 0xfa00
 8009414:	f043 03f9 	orr.w	r3, r3, #249	@ 0xf9
  *address = value;
 8009418:	f8c4 342c 	str.w	r3, [r4, #1068]	@ 0x42c
               (((uint32_t)HuffTableAC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
 800941c:	f892 30ae 	ldrb.w	r3, [r2, #174]	@ 0xae
  while (index > 3UL)
 8009420:	3a04      	subs	r2, #4
    *address = (((uint32_t)HuffTableAC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 8009422:	f892 60b3 	ldrb.w	r6, [r2, #179]	@ 0xb3
               (((uint32_t)HuffTableAC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
 8009426:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableAC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 8009428:	ea43 6306 	orr.w	r3, r3, r6, lsl #24
               ((uint32_t)HuffTableAC0->HuffVal[index - 4UL] & 0xFFUL);
 800942c:	f892 60b0 	ldrb.w	r6, [r2, #176]	@ 0xb0
               (((uint32_t)HuffTableAC0->HuffVal[index - 3UL] & 0xFFUL) << 8) |
 8009430:	4333      	orrs	r3, r6
 8009432:	f892 60b1 	ldrb.w	r6, [r2, #177]	@ 0xb1
 8009436:	ea43 2306 	orr.w	r3, r3, r6, lsl #8
    *address = (((uint32_t)HuffTableAC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 800943a:	f840 3904 	str.w	r3, [r0], #-4
  while (index > 3UL)
 800943e:	4281      	cmp	r1, r0
 8009440:	d1ec      	bne.n	800941c <HAL_JPEG_Init+0xec>
  value = *address & 0x0000FFFFU;
 8009442:	f8d4 342c 	ldr.w	r3, [r4, #1068]	@ 0x42c
  address = (hjpeg->Instance->DHTMEM + 102);
 8009446:	f504 619f 	add.w	r1, r4, #1272	@ 0x4f8
  value = *address & 0xFFFF0000U;
 800944a:	4a4d      	ldr	r2, [pc, #308]	@ (8009580 <HAL_JPEG_Init+0x250>)
 800944c:	f504 608b 	add.w	r0, r4, #1112	@ 0x458
  value = *address & 0x0000FFFFU;
 8009450:	b29b      	uxth	r3, r3
  value = value | (((uint32_t)HuffTableDC1->Bits[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableDC1->Bits[0] & 0xFFUL) << 16);
 8009452:	f043 7340 	orr.w	r3, r3, #50331648	@ 0x3000000
  *address = value;
 8009456:	f8c4 342c 	str.w	r3, [r4, #1068]	@ 0x42c
  value = *address & 0xFFFF0000U;
 800945a:	f8d4 343c 	ldr.w	r3, [r4, #1084]	@ 0x43c
 800945e:	4013      	ands	r3, r2
  *address = value;
 8009460:	f8c4 343c 	str.w	r3, [r4, #1084]	@ 0x43c
    *address = (((uint32_t)HuffTableDC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 8009464:	2301      	movs	r3, #1
 8009466:	f8c4 3438 	str.w	r3, [r4, #1080]	@ 0x438
 800946a:	f04f 3301 	mov.w	r3, #16843009	@ 0x1010101
 800946e:	f8c4 3434 	str.w	r3, [r4, #1076]	@ 0x434
 8009472:	f8c4 3430 	str.w	r3, [r4, #1072]	@ 0x430
  value = *address & 0x0000FFFFUL;
 8009476:	f8d4 343c 	ldr.w	r3, [r4, #1084]	@ 0x43c
 800947a:	b29b      	uxth	r3, r3
  value = value | (((uint32_t)HuffTableDC1->HuffVal[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableDC1->HuffVal[0] & 0xFFUL) <<
 800947c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
  *address = value;
 8009480:	f8c4 343c 	str.w	r3, [r4, #1084]	@ 0x43c
  value = *address & 0xFFFF0000UL;
 8009484:	f8d4 3448 	ldr.w	r3, [r4, #1096]	@ 0x448
 8009488:	4013      	ands	r3, r2
  value = value | (((uint32_t)HuffTableDC1->HuffVal[11] & 0xFFUL) << 8) | ((uint32_t)HuffTableDC1->HuffVal[10] & 0xFFUL);
 800948a:	f443 6330 	orr.w	r3, r3, #2816	@ 0xb00
 800948e:	f043 030a 	orr.w	r3, r3, #10
  *address = value;
 8009492:	f8c4 3448 	str.w	r3, [r4, #1096]	@ 0x448
    *address = (((uint32_t)HuffTableDC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 8009496:	4b3b      	ldr	r3, [pc, #236]	@ (8009584 <HAL_JPEG_Init+0x254>)
 8009498:	f8c4 3444 	str.w	r3, [r4, #1092]	@ 0x444
 800949c:	f1a3 3304 	sub.w	r3, r3, #67372036	@ 0x4040404
 80094a0:	f8c4 3440 	str.w	r3, [r4, #1088]	@ 0x440
  value = *address & 0x0000FFFFU;
 80094a4:	f8d4 3448 	ldr.w	r3, [r4, #1096]	@ 0x448
 80094a8:	b29b      	uxth	r3, r3
  value = value | (((uint32_t)HuffTableAC1->Bits[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableAC1->Bits[0] & 0xFFUL) << 16);
 80094aa:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
  *address = value;
 80094ae:	f8c4 3448 	str.w	r3, [r4, #1096]	@ 0x448
  value = *address & 0xFFFF0000U;
 80094b2:	f8d4 3458 	ldr.w	r3, [r4, #1112]	@ 0x458
 80094b6:	4013      	ands	r3, r2
  value = value | (((uint32_t)HuffTableAC1->Bits[15] & 0xFFUL) << 8) | ((uint32_t)HuffTableAC1->Bits[14] & 0xFFUL);
 80094b8:	4a33      	ldr	r2, [pc, #204]	@ (8009588 <HAL_JPEG_Init+0x258>)
 80094ba:	f443 43ee 	orr.w	r3, r3, #30464	@ 0x7700
 80094be:	f043 0302 	orr.w	r3, r3, #2
  *address = value;
 80094c2:	f8c4 3458 	str.w	r3, [r4, #1112]	@ 0x458
    *address = (((uint32_t)HuffTableAC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 80094c6:	4b31      	ldr	r3, [pc, #196]	@ (800958c <HAL_JPEG_Init+0x25c>)
 80094c8:	f8c4 3454 	str.w	r3, [r4, #1108]	@ 0x454
 80094cc:	4b30      	ldr	r3, [pc, #192]	@ (8009590 <HAL_JPEG_Init+0x260>)
 80094ce:	f8c4 3450 	str.w	r3, [r4, #1104]	@ 0x450
 80094d2:	4b30      	ldr	r3, [pc, #192]	@ (8009594 <HAL_JPEG_Init+0x264>)
 80094d4:	f8c4 344c 	str.w	r3, [r4, #1100]	@ 0x44c
  value = *address & 0x0000FFFFUL;
 80094d8:	f8d4 3458 	ldr.w	r3, [r4, #1112]	@ 0x458
 80094dc:	b29b      	uxth	r3, r3
  value = value | (((uint32_t)HuffTableAC1->HuffVal[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableAC1->HuffVal[0] & 0xFFUL) <<
 80094de:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
  *address = value;
 80094e2:	f8c4 3458 	str.w	r3, [r4, #1112]	@ 0x458
               (((uint32_t)HuffTableAC1->HuffVal[index] & 0xFFUL) << 16) |
 80094e6:	f892 30b0 	ldrb.w	r3, [r2, #176]	@ 0xb0
  while (index > 3UL)
 80094ea:	3a04      	subs	r2, #4
    *address = (((uint32_t)HuffTableAC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 80094ec:	f892 60b5 	ldrb.w	r6, [r2, #181]	@ 0xb5
               (((uint32_t)HuffTableAC1->HuffVal[index] & 0xFFUL) << 16) |
 80094f0:	041b      	lsls	r3, r3, #16
               (((uint32_t)HuffTableAC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
 80094f2:	ea43 6306 	orr.w	r3, r3, r6, lsl #24
               ((uint32_t)HuffTableAC1->HuffVal[index - 2UL] & 0xFFUL);
 80094f6:	f892 60b2 	ldrb.w	r6, [r2, #178]	@ 0xb2
               (((uint32_t)HuffTableAC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
 80094fa:	4333      	orrs	r3, r6
 80094fc:	f892 60b3 	ldrb.w	r6, [r2, #179]	@ 0xb3
 8009500:	ea43 2306 	orr.w	r3, r3, r6, lsl #8
    *address = (((uint32_t)HuffTableAC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 8009504:	f841 3904 	str.w	r3, [r1], #-4
  while (index > 3UL)
 8009508:	4281      	cmp	r1, r0
 800950a:	d1ec      	bne.n	80094e6 <HAL_JPEG_Init+0x1b6>
  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACLUM_HuffTable,
 800950c:	f504 62a0 	add.w	r2, r4, #1280	@ 0x500
 8009510:	491a      	ldr	r1, [pc, #104]	@ (800957c <HAL_JPEG_Init+0x24c>)
 8009512:	4628      	mov	r0, r5
 8009514:	f7ff fe12 	bl	800913c <JPEG_Set_HuffAC_Mem>
  if (error != HAL_OK)
 8009518:	b118      	cbz	r0, 8009522 <HAL_JPEG_Init+0x1f2>
    hjpeg->ErrorCode = HAL_JPEG_ERROR_HUFF_TABLE;
 800951a:	2301      	movs	r3, #1
 800951c:	652b      	str	r3, [r5, #80]	@ 0x50
    return HAL_ERROR;
 800951e:	2001      	movs	r0, #1
}
 8009520:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACCHROM_HuffTable,
 8009522:	f504 62cc 	add.w	r2, r4, #1632	@ 0x660
 8009526:	4918      	ldr	r1, [pc, #96]	@ (8009588 <HAL_JPEG_Init+0x258>)
 8009528:	4628      	mov	r0, r5
 800952a:	f7ff fe07 	bl	800913c <JPEG_Set_HuffAC_Mem>
  if (error != HAL_OK)
 800952e:	2800      	cmp	r0, #0
 8009530:	d1f3      	bne.n	800951a <HAL_JPEG_Init+0x1ea>
  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCLUM_HuffTable,
 8009532:	f504 62f8 	add.w	r2, r4, #1984	@ 0x7c0
 8009536:	490d      	ldr	r1, [pc, #52]	@ (800956c <HAL_JPEG_Init+0x23c>)
 8009538:	4628      	mov	r0, r5
 800953a:	f7ff fdc7 	bl	80090cc <JPEG_Set_HuffDC_Mem>
  if (error != HAL_OK)
 800953e:	2800      	cmp	r0, #0
 8009540:	d1eb      	bne.n	800951a <HAL_JPEG_Init+0x1ea>
  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCCHROM_HuffTable,
 8009542:	f504 62fc 	add.w	r2, r4, #2016	@ 0x7e0
 8009546:	4914      	ldr	r1, [pc, #80]	@ (8009598 <HAL_JPEG_Init+0x268>)
 8009548:	4628      	mov	r0, r5
 800954a:	f7ff fdbf 	bl	80090cc <JPEG_Set_HuffDC_Mem>
  if (JPEG_Set_HuffEnc_Mem(hjpeg) != HAL_OK)
 800954e:	2800      	cmp	r0, #0
 8009550:	d1e3      	bne.n	800951a <HAL_JPEG_Init+0x1ea>
  hjpeg->Instance->CONFR1 |= JPEG_CONFR1_HDR;
 8009552:	6863      	ldr	r3, [r4, #4]
 8009554:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009558:	6063      	str	r3, [r4, #4]
  hjpeg->State = HAL_JPEG_STATE_READY;
 800955a:	2301      	movs	r3, #1
  hjpeg->JpegInCount = 0;
 800955c:	6228      	str	r0, [r5, #32]
  hjpeg->JpegOutCount = 0;
 800955e:	6268      	str	r0, [r5, #36]	@ 0x24
  hjpeg->State = HAL_JPEG_STATE_READY;
 8009560:	f885 304d 	strb.w	r3, [r5, #77]	@ 0x4d
  hjpeg->ErrorCode = HAL_JPEG_ERROR_NONE;
 8009564:	6528      	str	r0, [r5, #80]	@ 0x50
  hjpeg->Context = 0;
 8009566:	6568      	str	r0, [r5, #84]	@ 0x54
  return HAL_OK;
 8009568:	e7da      	b.n	8009520 <HAL_JPEG_Init+0x1f0>
 800956a:	bf00      	nop
 800956c:	0802b830 	.word	0x0802b830
 8009570:	0802b630 	.word	0x0802b630
 8009574:	0802b5f0 	.word	0x0802b5f0
 8009578:	0b0a0908 	.word	0x0b0a0908
 800957c:	0802b762 	.word	0x0802b762
 8009580:	ffff0000 	.word	0xffff0000
 8009584:	09080706 	.word	0x09080706
 8009588:	0802b6b0 	.word	0x0802b6b0
 800958c:	01000404 	.word	0x01000404
 8009590:	05070403 	.word	0x05070403
 8009594:	04040201 	.word	0x04040201
 8009598:	0802b814 	.word	0x0802b814

0800959c <HAL_JPEG_GetInfo>:
{
 800959c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if ((hjpeg == NULL) || (pInfo == NULL))
 80095a0:	2800      	cmp	r0, #0
 80095a2:	d06f      	beq.n	8009684 <HAL_JPEG_GetInfo+0xe8>
 80095a4:	2900      	cmp	r1, #0
 80095a6:	d06d      	beq.n	8009684 <HAL_JPEG_GetInfo+0xe8>
  if ((hjpeg->Instance->CONFR1 & JPEG_CONFR1_NF) == JPEG_CONFR1_NF_1)
 80095a8:	6804      	ldr	r4, [r0, #0]
 80095aa:	6863      	ldr	r3, [r4, #4]
 80095ac:	f003 0303 	and.w	r3, r3, #3
 80095b0:	2b02      	cmp	r3, #2
 80095b2:	d047      	beq.n	8009644 <HAL_JPEG_GetInfo+0xa8>
  else if ((hjpeg->Instance->CONFR1 & JPEG_CONFR1_NF) == 0UL)
 80095b4:	6863      	ldr	r3, [r4, #4]
 80095b6:	f013 0303 	ands.w	r3, r3, #3
 80095ba:	d005      	beq.n	80095c8 <HAL_JPEG_GetInfo+0x2c>
  else if ((hjpeg->Instance->CONFR1 & JPEG_CONFR1_NF) == JPEG_CONFR1_NF)
 80095bc:	6863      	ldr	r3, [r4, #4]
 80095be:	f003 0303 	and.w	r3, r3, #3
 80095c2:	2b03      	cmp	r3, #3
 80095c4:	d15e      	bne.n	8009684 <HAL_JPEG_GetInfo+0xe8>
 80095c6:	2330      	movs	r3, #48	@ 0x30
  pInfo->ImageHeight = (hjpeg->Instance->CONFR1 & 0xFFFF0000UL) >> 16;
 80095c8:	6862      	ldr	r2, [r4, #4]
    pInfo->ColorSpace = JPEG_YCBCR_COLORSPACE;
 80095ca:	600b      	str	r3, [r1, #0]
  if ((pInfo->ColorSpace == JPEG_YCBCR_COLORSPACE) || (pInfo->ColorSpace == JPEG_CMYK_COLORSPACE))
 80095cc:	f023 0320 	bic.w	r3, r3, #32
  pInfo->ImageHeight = (hjpeg->Instance->CONFR1 & 0xFFFF0000UL) >> 16;
 80095d0:	0c12      	lsrs	r2, r2, #16
  if ((pInfo->ColorSpace == JPEG_YCBCR_COLORSPACE) || (pInfo->ColorSpace == JPEG_CMYK_COLORSPACE))
 80095d2:	2b10      	cmp	r3, #16
  pInfo->ImageHeight = (hjpeg->Instance->CONFR1 & 0xFFFF0000UL) >> 16;
 80095d4:	608a      	str	r2, [r1, #8]
  pInfo->ImageWidth  = (hjpeg->Instance->CONFR3 & 0xFFFF0000UL) >> 16;
 80095d6:	68e2      	ldr	r2, [r4, #12]
 80095d8:	ea4f 4212 	mov.w	r2, r2, lsr #16
 80095dc:	60ca      	str	r2, [r1, #12]
  if ((pInfo->ColorSpace == JPEG_YCBCR_COLORSPACE) || (pInfo->ColorSpace == JPEG_CMYK_COLORSPACE))
 80095de:	d13c      	bne.n	800965a <HAL_JPEG_GetInfo+0xbe>
    yblockNb  = (hjpeg->Instance->CONFR4 & JPEG_CONFR4_NB) >> 4;
 80095e0:	6925      	ldr	r5, [r4, #16]
    cBblockNb = (hjpeg->Instance->CONFR5 & JPEG_CONFR5_NB) >> 4;
 80095e2:	6963      	ldr	r3, [r4, #20]
    yblockNb  = (hjpeg->Instance->CONFR4 & JPEG_CONFR4_NB) >> 4;
 80095e4:	f3c5 1503 	ubfx	r5, r5, #4, #4
    cRblockNb = (hjpeg->Instance->CONFR6 & JPEG_CONFR6_NB) >> 4;
 80095e8:	69a2      	ldr	r2, [r4, #24]
    cBblockNb = (hjpeg->Instance->CONFR5 & JPEG_CONFR5_NB) >> 4;
 80095ea:	091b      	lsrs	r3, r3, #4
    if ((yblockNb == 1UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 80095ec:	2d01      	cmp	r5, #1
    cRblockNb = (hjpeg->Instance->CONFR6 & JPEG_CONFR6_NB) >> 4;
 80095ee:	ea4f 1212 	mov.w	r2, r2, lsr #4
    if ((yblockNb == 1UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 80095f2:	d129      	bne.n	8009648 <HAL_JPEG_GetInfo+0xac>
 80095f4:	4313      	orrs	r3, r2
 80095f6:	f013 0f0f 	tst.w	r3, #15
 80095fa:	bf0c      	ite	eq
 80095fc:	2301      	moveq	r3, #1
 80095fe:	2300      	movne	r3, #0
 8009600:	005b      	lsls	r3, r3, #1
      pInfo->ChromaSubsampling = JPEG_422_SUBSAMPLING; /*16x8 block*/
 8009602:	604b      	str	r3, [r1, #4]
  *         the configuration information for JPEG module
  * @retval JPEG image quality from 1 to 100.
  */
static uint32_t JPEG_GetQuality(JPEG_HandleTypeDef *hjpeg)
{
  uint32_t quality = 0;
 8009604:	2300      	movs	r3, #0
 8009606:	3450      	adds	r4, #80	@ 0x50
 8009608:	f8df c07c 	ldr.w	ip, [pc, #124]	@ 8009688 <HAL_JPEG_GetInfo+0xec>
  uint32_t quantRow, quantVal, scale, i, j;
  __IO uint32_t *tableAddress = hjpeg->Instance->QMEM0;

  i = 0;
 800960c:	461d      	mov	r5, r3
        quality += 100UL;
      }
      else
      {
        /* Note that the quantization coefficients must be specified in the table in zigzag order */
        scale = (quantVal * 100UL) / ((uint32_t) hjpeg->QuantTable0[JPEG_ZIGZAG_ORDER[i + j]]);
 800960e:	f04f 0e64 	mov.w	lr, #100	@ 0x64
        {
          quality += (200UL - scale) / 2UL;
        }
        else
        {
          quality += 5000UL / scale;
 8009612:	f241 3888 	movw	r8, #5000	@ 0x1388
    quantRow = *tableAddress;
 8009616:	f854 9005 	ldr.w	r9, [r4, r5]
    for (j = 0; j < 4UL; j++)
 800961a:	eb05 070c 	add.w	r7, r5, ip
    quantRow = *tableAddress;
 800961e:	2600      	movs	r6, #0
      quantVal = (quantRow >> (8UL * j)) & 0xFFUL;
 8009620:	fa29 f206 	lsr.w	r2, r9, r6
 8009624:	b2d2      	uxtb	r2, r2
      if (quantVal == 1UL)
 8009626:	2a01      	cmp	r2, #1
 8009628:	d119      	bne.n	800965e <HAL_JPEG_GetInfo+0xc2>
        quality += 100UL;
 800962a:	3364      	adds	r3, #100	@ 0x64
    for (j = 0; j < 4UL; j++)
 800962c:	3608      	adds	r6, #8
 800962e:	3701      	adds	r7, #1
 8009630:	2e20      	cmp	r6, #32
 8009632:	d1f5      	bne.n	8009620 <HAL_JPEG_GetInfo+0x84>
        }
      }
    }

    i += 4UL;
 8009634:	3504      	adds	r5, #4
  while (i < (JPEG_QUANT_TABLE_SIZE - 3UL))
 8009636:	2d40      	cmp	r5, #64	@ 0x40
 8009638:	d1ed      	bne.n	8009616 <HAL_JPEG_GetInfo+0x7a>
    tableAddress ++;
  }

  return (quality / 64UL);
 800963a:	099b      	lsrs	r3, r3, #6
  return HAL_OK;
 800963c:	2000      	movs	r0, #0
  pInfo->ImageQuality = JPEG_GetQuality(hjpeg);
 800963e:	610b      	str	r3, [r1, #16]
}
 8009640:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009644:	2310      	movs	r3, #16
 8009646:	e7bf      	b.n	80095c8 <HAL_JPEG_GetInfo+0x2c>
    else if ((yblockNb == 0UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 8009648:	2d03      	cmp	r5, #3
 800964a:	d106      	bne.n	800965a <HAL_JPEG_GetInfo+0xbe>
    else if ((yblockNb == 3UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 800964c:	4313      	orrs	r3, r2
 800964e:	f013 0f0f 	tst.w	r3, #15
 8009652:	bf0c      	ite	eq
 8009654:	2301      	moveq	r3, #1
 8009656:	2300      	movne	r3, #0
 8009658:	e7d3      	b.n	8009602 <HAL_JPEG_GetInfo+0x66>
 800965a:	2300      	movs	r3, #0
 800965c:	e7d1      	b.n	8009602 <HAL_JPEG_GetInfo+0x66>
        scale = (quantVal * 100UL) / ((uint32_t) hjpeg->QuantTable0[JPEG_ZIGZAG_ORDER[i + j]]);
 800965e:	fb0e fb02 	mul.w	fp, lr, r2
 8009662:	f897 a000 	ldrb.w	sl, [r7]
 8009666:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8009668:	f812 a00a 	ldrb.w	sl, [r2, sl]
 800966c:	fbbb f2fa 	udiv	r2, fp, sl
        if (scale <= 100UL)
 8009670:	2a64      	cmp	r2, #100	@ 0x64
          quality += 5000UL / scale;
 8009672:	bf8b      	itete	hi
 8009674:	fbb8 f2f2 	udivhi	r2, r8, r2
          quality += (200UL - scale) / 2UL;
 8009678:	f1c2 02c8 	rsbls	r2, r2, #200	@ 0xc8
          quality += 5000UL / scale;
 800967c:	189b      	addhi	r3, r3, r2
          quality += (200UL - scale) / 2UL;
 800967e:	eb03 0352 	addls.w	r3, r3, r2, lsr #1
          quality += 5000UL / scale;
 8009682:	e7d3      	b.n	800962c <HAL_JPEG_GetInfo+0x90>
    return HAL_ERROR;
 8009684:	2001      	movs	r0, #1
 8009686:	e7db      	b.n	8009640 <HAL_JPEG_GetInfo+0xa4>
 8009688:	0802b670 	.word	0x0802b670

0800968c <HAL_JPEG_Decode_DMA>:
{
 800968c:	b538      	push	{r3, r4, r5, lr}
  if ((hjpeg == NULL) || (pDataIn == NULL) || (pDataOutMCU == NULL))
 800968e:	4604      	mov	r4, r0
 8009690:	b348      	cbz	r0, 80096e6 <HAL_JPEG_Decode_DMA+0x5a>
 8009692:	b341      	cbz	r1, 80096e6 <HAL_JPEG_Decode_DMA+0x5a>
 8009694:	b33b      	cbz	r3, 80096e6 <HAL_JPEG_Decode_DMA+0x5a>
  __HAL_LOCK(hjpeg);
 8009696:	f890 504c 	ldrb.w	r5, [r0, #76]	@ 0x4c
 800969a:	2d01      	cmp	r5, #1
 800969c:	d028      	beq.n	80096f0 <HAL_JPEG_Decode_DMA+0x64>
 800969e:	2501      	movs	r5, #1
 80096a0:	f880 504c 	strb.w	r5, [r0, #76]	@ 0x4c
  if (hjpeg->State == HAL_JPEG_STATE_READY)
 80096a4:	f890 504d 	ldrb.w	r5, [r0, #77]	@ 0x4d
 80096a8:	2d01      	cmp	r5, #1
 80096aa:	d11e      	bne.n	80096ea <HAL_JPEG_Decode_DMA+0x5e>
    hjpeg->State = HAL_JPEG_STATE_BUSY_DECODING;
 80096ac:	2504      	movs	r5, #4
    hjpeg->InDataLength = InDataLength;
 80096ae:	6282      	str	r2, [r0, #40]	@ 0x28
    hjpeg->State = HAL_JPEG_STATE_BUSY_DECODING;
 80096b0:	f880 504d 	strb.w	r5, [r0, #77]	@ 0x4d
    hjpeg->Context &= ~(JPEG_CONTEXT_OPERATION_MASK | JPEG_CONTEXT_METHOD_MASK);
 80096b4:	6d45      	ldr	r5, [r0, #84]	@ 0x54
 80096b6:	f025 050f 	bic.w	r5, r5, #15
 80096ba:	6545      	str	r5, [r0, #84]	@ 0x54
    hjpeg->Context |= (JPEG_CONTEXT_DECODE | JPEG_CONTEXT_DMA);
 80096bc:	6d45      	ldr	r5, [r0, #84]	@ 0x54
 80096be:	f045 050e 	orr.w	r5, r5, #14
    hjpeg->pJpegOutBuffPtr = pDataOutMCU;
 80096c2:	e9c0 1306 	strd	r1, r3, [r0, #24]
    hjpeg->Context |= (JPEG_CONTEXT_DECODE | JPEG_CONTEXT_DMA);
 80096c6:	6545      	str	r5, [r0, #84]	@ 0x54
    hjpeg->JpegInCount = 0;
 80096c8:	2500      	movs	r5, #0
    hjpeg->OutDataLength = OutDataLength;
 80096ca:	9b04      	ldr	r3, [sp, #16]
    hjpeg->JpegInCount = 0;
 80096cc:	6205      	str	r5, [r0, #32]
    hjpeg->OutDataLength = OutDataLength;
 80096ce:	62c3      	str	r3, [r0, #44]	@ 0x2c
    hjpeg->JpegOutCount = 0;
 80096d0:	6245      	str	r5, [r0, #36]	@ 0x24
    JPEG_Init_Process(hjpeg);
 80096d2:	f7ff fdab 	bl	800922c <JPEG_Init_Process>
    if (JPEG_DMA_StartProcess(hjpeg) != HAL_OK)
 80096d6:	f7ff fde5 	bl	80092a4 <JPEG_DMA_StartProcess>
 80096da:	b128      	cbz	r0, 80096e8 <HAL_JPEG_Decode_DMA+0x5c>
      hjpeg->State = HAL_JPEG_STATE_ERROR;
 80096dc:	2306      	movs	r3, #6
      __HAL_UNLOCK(hjpeg);
 80096de:	f884 504c 	strb.w	r5, [r4, #76]	@ 0x4c
      hjpeg->State = HAL_JPEG_STATE_ERROR;
 80096e2:	f884 304d 	strb.w	r3, [r4, #77]	@ 0x4d
    return HAL_ERROR;
 80096e6:	2001      	movs	r0, #1
}
 80096e8:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_UNLOCK(hjpeg);
 80096ea:	2300      	movs	r3, #0
 80096ec:	f880 304c 	strb.w	r3, [r0, #76]	@ 0x4c
  __HAL_LOCK(hjpeg);
 80096f0:	2002      	movs	r0, #2
 80096f2:	e7f9      	b.n	80096e8 <HAL_JPEG_Decode_DMA+0x5c>

080096f4 <HAL_JPEG_Pause>:
  if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
 80096f4:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 80096f6:	f003 030c 	and.w	r3, r3, #12
 80096fa:	2b0c      	cmp	r3, #12
 80096fc:	d10d      	bne.n	800971a <HAL_JPEG_Pause+0x26>
    if ((XferSelection & JPEG_PAUSE_RESUME_INPUT) == JPEG_PAUSE_RESUME_INPUT)
 80096fe:	07cb      	lsls	r3, r1, #31
 8009700:	d503      	bpl.n	800970a <HAL_JPEG_Pause+0x16>
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_INPUT;
 8009702:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 8009704:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8009708:	6543      	str	r3, [r0, #84]	@ 0x54
    if ((XferSelection & JPEG_PAUSE_RESUME_OUTPUT) == JPEG_PAUSE_RESUME_OUTPUT)
 800970a:	0789      	lsls	r1, r1, #30
 800970c:	d503      	bpl.n	8009716 <HAL_JPEG_Pause+0x22>
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_OUTPUT;
 800970e:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 8009710:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8009714:	6543      	str	r3, [r0, #84]	@ 0x54
}
 8009716:	2000      	movs	r0, #0
 8009718:	4770      	bx	lr
  else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 800971a:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 800971c:	f003 030c 	and.w	r3, r3, #12
 8009720:	2b08      	cmp	r3, #8
 8009722:	d1f8      	bne.n	8009716 <HAL_JPEG_Pause+0x22>
    if ((XferSelection & JPEG_PAUSE_RESUME_INPUT) == JPEG_PAUSE_RESUME_INPUT)
 8009724:	f011 0301 	ands.w	r3, r1, #1
 8009728:	d004      	beq.n	8009734 <HAL_JPEG_Pause+0x40>
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_INPUT;
 800972a:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 800972c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8009730:	6543      	str	r3, [r0, #84]	@ 0x54
      mask |= (JPEG_IT_IFT | JPEG_IT_IFNF);
 8009732:	2306      	movs	r3, #6
    if ((XferSelection & JPEG_PAUSE_RESUME_OUTPUT) == JPEG_PAUSE_RESUME_OUTPUT)
 8009734:	078a      	lsls	r2, r1, #30
 8009736:	d505      	bpl.n	8009744 <HAL_JPEG_Pause+0x50>
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_OUTPUT;
 8009738:	6d42      	ldr	r2, [r0, #84]	@ 0x54
      mask |= (JPEG_IT_OFT | JPEG_IT_OFNE | JPEG_IT_EOC);
 800973a:	f043 0328 	orr.w	r3, r3, #40	@ 0x28
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_OUTPUT;
 800973e:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8009742:	6542      	str	r2, [r0, #84]	@ 0x54
    __HAL_JPEG_DISABLE_IT(hjpeg, mask);
 8009744:	6801      	ldr	r1, [r0, #0]
 8009746:	6b0a      	ldr	r2, [r1, #48]	@ 0x30
 8009748:	ea22 0303 	bic.w	r3, r2, r3
 800974c:	630b      	str	r3, [r1, #48]	@ 0x30
 800974e:	e7e2      	b.n	8009716 <HAL_JPEG_Pause+0x22>

08009750 <HAL_JPEG_ConfigInputBuffer>:
  hjpeg->pJpegInBuffPtr =  pNewInputBuffer;
 8009750:	6181      	str	r1, [r0, #24]
  hjpeg->InDataLength = InDataLength;
 8009752:	6282      	str	r2, [r0, #40]	@ 0x28
}
 8009754:	4770      	bx	lr

08009756 <HAL_JPEG_ConfigOutputBuffer>:
  hjpeg->pJpegOutBuffPtr = pNewOutputBuffer;
 8009756:	61c1      	str	r1, [r0, #28]
  hjpeg->OutDataLength = OutDataLength;
 8009758:	62c2      	str	r2, [r0, #44]	@ 0x2c
}
 800975a:	4770      	bx	lr

0800975c <HAL_JPEG_EncodeCpltCallback>:
__weak void HAL_JPEG_EncodeCpltCallback(JPEG_HandleTypeDef *hjpeg)
 800975c:	4770      	bx	lr

0800975e <JPEG_MDMAErrorCallback>:
  JPEG_HandleTypeDef *hjpeg = (JPEG_HandleTypeDef *)((MDMA_HandleTypeDef *)hmdma)->Parent;
 800975e:	6c00      	ldr	r0, [r0, #64]	@ 0x40
{
 8009760:	b508      	push	{r3, lr}
  hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 8009762:	6803      	ldr	r3, [r0, #0]
 8009764:	681a      	ldr	r2, [r3, #0]
 8009766:	f022 0201 	bic.w	r2, r2, #1
 800976a:	601a      	str	r2, [r3, #0]
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 800976c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800976e:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 8009772:	631a      	str	r2, [r3, #48]	@ 0x30
  hjpeg->State = HAL_JPEG_STATE_READY;
 8009774:	2301      	movs	r3, #1
 8009776:	f880 304d 	strb.w	r3, [r0, #77]	@ 0x4d
  hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 800977a:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 800977c:	f043 0304 	orr.w	r3, r3, #4
 8009780:	6503      	str	r3, [r0, #80]	@ 0x50
  HAL_JPEG_ErrorCallback(hjpeg);
 8009782:	f7f8 ff75 	bl	8002670 <HAL_JPEG_ErrorCallback>
}
 8009786:	bd08      	pop	{r3, pc}

08009788 <JPEG_ReadInputData>:
  if ((hjpeg->InDataLength == 0UL) || (nbRequestWords == 0UL))
 8009788:	6a82      	ldr	r2, [r0, #40]	@ 0x28
{
 800978a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800978c:	4604      	mov	r4, r0
 800978e:	460d      	mov	r5, r1
  if ((hjpeg->InDataLength == 0UL) || (nbRequestWords == 0UL))
 8009790:	b922      	cbnz	r2, 800979c <JPEG_ReadInputData+0x14>
    (void) HAL_JPEG_Pause(hjpeg, JPEG_PAUSE_RESUME_INPUT);
 8009792:	2101      	movs	r1, #1
 8009794:	f7ff ffae 	bl	80096f4 <HAL_JPEG_Pause>
  uint32_t nb_bytes = 0;
 8009798:	2200      	movs	r2, #0
 800979a:	e004      	b.n	80097a6 <JPEG_ReadInputData+0x1e>
  else if (hjpeg->InDataLength > hjpeg->JpegInCount)
 800979c:	6a03      	ldr	r3, [r0, #32]
 800979e:	429a      	cmp	r2, r3
    nb_bytes = hjpeg->InDataLength - hjpeg->JpegInCount;
 80097a0:	6a03      	ldr	r3, [r0, #32]
  else if (hjpeg->InDataLength > hjpeg->JpegInCount)
 80097a2:	d924      	bls.n	80097ee <JPEG_ReadInputData+0x66>
    nb_bytes = hjpeg->InDataLength - hjpeg->JpegInCount;
 80097a4:	1ad2      	subs	r2, r2, r3
  if (((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL) && (nb_bytes > 0UL))
 80097a6:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80097a8:	f413 5380 	ands.w	r3, r3, #4096	@ 0x1000
 80097ac:	d11e      	bne.n	80097ec <JPEG_ReadInputData+0x64>
 80097ae:	b1ea      	cbz	r2, 80097ec <JPEG_ReadInputData+0x64>
    if (nb_words >= nbRequestWords)
 80097b0:	ebb5 0f92 	cmp.w	r5, r2, lsr #2
 80097b4:	69a1      	ldr	r1, [r4, #24]
    nb_words = nb_bytes / 4UL;
 80097b6:	ea4f 0692 	mov.w	r6, r2, lsr #2
    if (nb_words >= nbRequestWords)
 80097ba:	d827      	bhi.n	800980c <JPEG_ReadInputData+0x84>
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 80097bc:	6827      	ldr	r7, [r4, #0]
        input_count = hjpeg->JpegInCount;
 80097be:	6a26      	ldr	r6, [r4, #32]
      for (index = 0; index < nbRequestWords; index++)
 80097c0:	3301      	adds	r3, #1
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 80097c2:	1988      	adds	r0, r1, r6
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 80097c4:	5d8e      	ldrb	r6, [r1, r6]
      for (index = 0; index < nbRequestWords; index++)
 80097c6:	429d      	cmp	r5, r3
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 80097c8:	7882      	ldrb	r2, [r0, #2]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 80097ca:	f890 c001 	ldrb.w	ip, [r0, #1]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 80097ce:	ea4f 4202 	mov.w	r2, r2, lsl #16
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
 80097d2:	78c0      	ldrb	r0, [r0, #3]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 80097d4:	ea42 220c 	orr.w	r2, r2, ip, lsl #8
 80097d8:	ea42 0206 	orr.w	r2, r2, r6
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 80097dc:	ea42 6200 	orr.w	r2, r2, r0, lsl #24
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 80097e0:	643a      	str	r2, [r7, #64]	@ 0x40
        hjpeg->JpegInCount += 4UL;
 80097e2:	6a22      	ldr	r2, [r4, #32]
 80097e4:	f102 0204 	add.w	r2, r2, #4
 80097e8:	6222      	str	r2, [r4, #32]
      for (index = 0; index < nbRequestWords; index++)
 80097ea:	d1e8      	bne.n	80097be <JPEG_ReadInputData+0x36>
}
 80097ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if (hjpeg->InDataLength == hjpeg->JpegInCount)
 80097ee:	429a      	cmp	r2, r3
 80097f0:	d1d2      	bne.n	8009798 <JPEG_ReadInputData+0x10>
    HAL_JPEG_GetDataCallback(hjpeg, hjpeg->JpegInCount);
 80097f2:	6a01      	ldr	r1, [r0, #32]
 80097f4:	f7f8 fece 	bl	8002594 <HAL_JPEG_GetDataCallback>
    if (hjpeg->InDataLength > 4UL)
 80097f8:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80097fa:	2b04      	cmp	r3, #4
      hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % 4UL);
 80097fc:	bf84      	itt	hi
 80097fe:	f023 0303 	bichi.w	r3, r3, #3
 8009802:	62a3      	strhi	r3, [r4, #40]	@ 0x28
    hjpeg->JpegInCount = 0;
 8009804:	2300      	movs	r3, #0
    nb_bytes = hjpeg->InDataLength;
 8009806:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
    hjpeg->JpegInCount = 0;
 8009808:	6223      	str	r3, [r4, #32]
    nb_bytes = hjpeg->InDataLength;
 800980a:	e7cc      	b.n	80097a6 <JPEG_ReadInputData+0x1e>
      if (nb_words > 0UL)
 800980c:	2a03      	cmp	r2, #3
 800980e:	d918      	bls.n	8009842 <JPEG_ReadInputData+0xba>
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 8009810:	6827      	ldr	r7, [r4, #0]
          input_count = hjpeg->JpegInCount;
 8009812:	6a25      	ldr	r5, [r4, #32]
        for (index = 0; index < nb_words; index++)
 8009814:	3301      	adds	r3, #1
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 8009816:	1948      	adds	r0, r1, r5
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 8009818:	5d4d      	ldrb	r5, [r1, r5]
        for (index = 0; index < nb_words; index++)
 800981a:	429e      	cmp	r6, r3
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 800981c:	7882      	ldrb	r2, [r0, #2]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 800981e:	f890 c001 	ldrb.w	ip, [r0, #1]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 8009822:	ea4f 4202 	mov.w	r2, r2, lsl #16
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
 8009826:	78c0      	ldrb	r0, [r0, #3]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 8009828:	ea42 220c 	orr.w	r2, r2, ip, lsl #8
 800982c:	ea42 0205 	orr.w	r2, r2, r5
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 8009830:	ea42 6200 	orr.w	r2, r2, r0, lsl #24
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 8009834:	643a      	str	r2, [r7, #64]	@ 0x40
          hjpeg->JpegInCount += 4UL;
 8009836:	6a22      	ldr	r2, [r4, #32]
 8009838:	f102 0204 	add.w	r2, r2, #4
 800983c:	6222      	str	r2, [r4, #32]
        for (index = 0; index < nb_words; index++)
 800983e:	d1e8      	bne.n	8009812 <JPEG_ReadInputData+0x8a>
 8009840:	e7d4      	b.n	80097ec <JPEG_ReadInputData+0x64>
        for (index = 0; index < nb_bytes; index++)
 8009842:	4618      	mov	r0, r3
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
 8009844:	6a25      	ldr	r5, [r4, #32]
 8009846:	00c6      	lsls	r6, r0, #3
        for (index = 0; index < nb_bytes; index++)
 8009848:	3001      	adds	r0, #1
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
 800984a:	5d4d      	ldrb	r5, [r1, r5]
        for (index = 0; index < nb_bytes; index++)
 800984c:	4282      	cmp	r2, r0
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
 800984e:	fa05 f506 	lsl.w	r5, r5, r6
 8009852:	ea43 0305 	orr.w	r3, r3, r5
          hjpeg->JpegInCount++;
 8009856:	6a25      	ldr	r5, [r4, #32]
 8009858:	f105 0501 	add.w	r5, r5, #1
 800985c:	6225      	str	r5, [r4, #32]
        for (index = 0; index < nb_bytes; index++)
 800985e:	d1f1      	bne.n	8009844 <JPEG_ReadInputData+0xbc>
        hjpeg->Instance->DIR = dataword;
 8009860:	6822      	ldr	r2, [r4, #0]
 8009862:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8009864:	e7c2      	b.n	80097ec <JPEG_ReadInputData+0x64>

08009866 <JPEG_MDMAInCpltCallback>:
{
 8009866:	b537      	push	{r0, r1, r2, r4, r5, lr}
  JPEG_HandleTypeDef *hjpeg = (JPEG_HandleTypeDef *)((MDMA_HandleTypeDef *)hmdma)->Parent;
 8009868:	6c04      	ldr	r4, [r0, #64]	@ 0x40
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 800986a:	6822      	ldr	r2, [r4, #0]
 800986c:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 800986e:	f023 037e 	bic.w	r3, r3, #126	@ 0x7e
 8009872:	6313      	str	r3, [r2, #48]	@ 0x30
  if ((hjpeg->Context & (JPEG_CONTEXT_METHOD_MASK | JPEG_CONTEXT_ENDING_DMA)) == JPEG_CONTEXT_DMA)
 8009874:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8009876:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800987a:	f023 0373 	bic.w	r3, r3, #115	@ 0x73
 800987e:	041b      	lsls	r3, r3, #16
 8009880:	0c1b      	lsrs	r3, r3, #16
 8009882:	2b0c      	cmp	r3, #12
 8009884:	d11a      	bne.n	80098bc <JPEG_MDMAInCpltCallback+0x56>
    inXfrSize = hjpeg->hdmain->Init.BufferTransferLength;
 8009886:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8009888:	6a9d      	ldr	r5, [r3, #40]	@ 0x28
    hjpeg->JpegInCount = hjpeg->InDataLength - (hmdma->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
 800988a:	6803      	ldr	r3, [r0, #0]
    HAL_JPEG_GetDataCallback(hjpeg, hjpeg->JpegInCount);
 800988c:	4620      	mov	r0, r4
    hjpeg->JpegInCount = hjpeg->InDataLength - (hmdma->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
 800988e:	695a      	ldr	r2, [r3, #20]
 8009890:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8009892:	f3c2 0210 	ubfx	r2, r2, #0, #17
 8009896:	1a9b      	subs	r3, r3, r2
 8009898:	6223      	str	r3, [r4, #32]
    HAL_JPEG_GetDataCallback(hjpeg, hjpeg->JpegInCount);
 800989a:	6a21      	ldr	r1, [r4, #32]
 800989c:	f7f8 fe7a 	bl	8002594 <HAL_JPEG_GetDataCallback>
    if (hjpeg->InDataLength >= inXfrSize)
 80098a0:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80098a2:	42ab      	cmp	r3, r5
 80098a4:	d327      	bcc.n	80098f6 <JPEG_MDMAInCpltCallback+0x90>
      if (inXfrSize == 0UL)
 80098a6:	b95d      	cbnz	r5, 80098c0 <JPEG_MDMAInCpltCallback+0x5a>
        hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 80098a8:	6d23      	ldr	r3, [r4, #80]	@ 0x50
        HAL_JPEG_ErrorCallback(hjpeg);
 80098aa:	4620      	mov	r0, r4
        hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 80098ac:	f043 0304 	orr.w	r3, r3, #4
 80098b0:	6523      	str	r3, [r4, #80]	@ 0x50
        hjpeg->State = HAL_JPEG_STATE_ERROR;
 80098b2:	2306      	movs	r3, #6
 80098b4:	f884 304d 	strb.w	r3, [r4, #77]	@ 0x4d
        HAL_JPEG_ErrorCallback(hjpeg);
 80098b8:	f7f8 feda 	bl	8002670 <HAL_JPEG_ErrorCallback>
}
 80098bc:	b003      	add	sp, #12
 80098be:	bd30      	pop	{r4, r5, pc}
      hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % inXfrSize);
 80098c0:	fbb3 f2f5 	udiv	r2, r3, r5
 80098c4:	fb05 3212 	mls	r2, r5, r2, r3
 80098c8:	1a9b      	subs	r3, r3, r2
        hjpeg->InDataLength = ((hjpeg->InDataLength / 4UL) + 1UL) * 4UL;
 80098ca:	62a3      	str	r3, [r4, #40]	@ 0x28
    if (((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL) && (hjpeg->InDataLength > 0UL))
 80098cc:	6d63      	ldr	r3, [r4, #84]	@ 0x54
      if (HAL_MDMA_Start_IT(hjpeg->hdmain, (uint32_t)hjpeg->pJpegInBuffPtr, (uint32_t)&hjpeg->Instance->DIR,
 80098ce:	6822      	ldr	r2, [r4, #0]
    if (((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL) && (hjpeg->InDataLength > 0UL))
 80098d0:	04db      	lsls	r3, r3, #19
 80098d2:	d40a      	bmi.n	80098ea <JPEG_MDMAInCpltCallback+0x84>
 80098d4:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80098d6:	b143      	cbz	r3, 80098ea <JPEG_MDMAInCpltCallback+0x84>
      if (HAL_MDMA_Start_IT(hjpeg->hdmain, (uint32_t)hjpeg->pJpegInBuffPtr, (uint32_t)&hjpeg->Instance->DIR,
 80098d8:	2101      	movs	r1, #1
 80098da:	3240      	adds	r2, #64	@ 0x40
 80098dc:	9100      	str	r1, [sp, #0]
 80098de:	69a1      	ldr	r1, [r4, #24]
 80098e0:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 80098e2:	f000 fd58 	bl	800a396 <HAL_MDMA_Start_IT>
 80098e6:	2800      	cmp	r0, #0
 80098e8:	d1de      	bne.n	80098a8 <JPEG_MDMAInCpltCallback+0x42>
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_EOC | JPEG_IT_HPD);
 80098ea:	6822      	ldr	r2, [r4, #0]
 80098ec:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 80098ee:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80098f2:	6313      	str	r3, [r2, #48]	@ 0x30
 80098f4:	e7e2      	b.n	80098bc <JPEG_MDMAInCpltCallback+0x56>
    else if (hjpeg->InDataLength > 0UL)
 80098f6:	2b00      	cmp	r3, #0
 80098f8:	d0e8      	beq.n	80098cc <JPEG_MDMAInCpltCallback+0x66>
      if ((hjpeg->InDataLength % 4UL) != 0UL)
 80098fa:	079a      	lsls	r2, r3, #30
 80098fc:	d0e6      	beq.n	80098cc <JPEG_MDMAInCpltCallback+0x66>
        hjpeg->InDataLength = ((hjpeg->InDataLength / 4UL) + 1UL) * 4UL;
 80098fe:	f023 0303 	bic.w	r3, r3, #3
 8009902:	3304      	adds	r3, #4
 8009904:	e7e1      	b.n	80098ca <JPEG_MDMAInCpltCallback+0x64>

08009906 <JPEG_StoreOutputData>:
  if (hjpeg->OutDataLength >= (hjpeg->JpegOutCount + (nbOutputWords * 4UL)))
 8009906:	6a42      	ldr	r2, [r0, #36]	@ 0x24
{
 8009908:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (hjpeg->OutDataLength >= (hjpeg->JpegOutCount + (nbOutputWords * 4UL)))
 800990a:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 800990e:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
{
 8009910:	4604      	mov	r4, r0
  if (hjpeg->OutDataLength >= (hjpeg->JpegOutCount + (nbOutputWords * 4UL)))
 8009912:	4293      	cmp	r3, r2
 8009914:	d32a      	bcc.n	800996c <JPEG_StoreOutputData+0x66>
    for (index = 0; index < nbOutputWords; index++)
 8009916:	2200      	movs	r2, #0
      dataword = hjpeg->Instance->DOR;
 8009918:	6823      	ldr	r3, [r4, #0]
    for (index = 0; index < nbOutputWords; index++)
 800991a:	3201      	adds	r2, #1
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
 800991c:	69e5      	ldr	r5, [r4, #28]
      dataword = hjpeg->Instance->DOR;
 800991e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
    for (index = 0; index < nbOutputWords; index++)
 8009920:	4291      	cmp	r1, r2
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
 8009922:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 8009924:	542b      	strb	r3, [r5, r0]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataword & 0x0000FF00UL) >> 8);
 8009926:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 8009928:	69e0      	ldr	r0, [r4, #28]
 800992a:	4428      	add	r0, r5
 800992c:	ea4f 2513 	mov.w	r5, r3, lsr #8
 8009930:	7045      	strb	r5, [r0, #1]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
 8009932:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 8009934:	69e0      	ldr	r0, [r4, #28]
 8009936:	4428      	add	r0, r5
 8009938:	ea4f 4513 	mov.w	r5, r3, lsr #16
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
 800993c:	ea4f 6313 	mov.w	r3, r3, lsr #24
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
 8009940:	7085      	strb	r5, [r0, #2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
 8009942:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 8009944:	69e0      	ldr	r0, [r4, #28]
 8009946:	4428      	add	r0, r5
 8009948:	70c3      	strb	r3, [r0, #3]
      hjpeg->JpegOutCount += 4UL;
 800994a:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800994c:	f103 0304 	add.w	r3, r3, #4
 8009950:	6263      	str	r3, [r4, #36]	@ 0x24
    for (index = 0; index < nbOutputWords; index++)
 8009952:	d1e1      	bne.n	8009918 <JPEG_StoreOutputData+0x12>
    if (hjpeg->OutDataLength == hjpeg->JpegOutCount)
 8009954:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8009956:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8009958:	429a      	cmp	r2, r3
 800995a:	d106      	bne.n	800996a <JPEG_StoreOutputData+0x64>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800995c:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800995e:	69e1      	ldr	r1, [r4, #28]
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8009960:	4620      	mov	r0, r4
 8009962:	f7f8 fe35 	bl	80025d0 <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
 8009966:	2300      	movs	r3, #0
 8009968:	6263      	str	r3, [r4, #36]	@ 0x24
}
 800996a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if (hjpeg->OutDataLength > hjpeg->JpegOutCount)
 800996c:	6a42      	ldr	r2, [r0, #36]	@ 0x24
 800996e:	4293      	cmp	r3, r2
 8009970:	d9fb      	bls.n	800996a <JPEG_StoreOutputData+0x64>
    nb_words = (hjpeg->OutDataLength - hjpeg->JpegOutCount) / 4UL;
 8009972:	6a42      	ldr	r2, [r0, #36]	@ 0x24
    for (index = 0; index < nb_words; index++)
 8009974:	2000      	movs	r0, #0
    nb_words = (hjpeg->OutDataLength - hjpeg->JpegOutCount) / 4UL;
 8009976:	1a9b      	subs	r3, r3, r2
 8009978:	089a      	lsrs	r2, r3, #2
    for (index = 0; index < nb_words; index++)
 800997a:	4290      	cmp	r0, r2
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
 800997c:	69e1      	ldr	r1, [r4, #28]
    for (index = 0; index < nb_words; index++)
 800997e:	d105      	bne.n	800998c <JPEG_StoreOutputData+0x86>
    if (hjpeg->OutDataLength == hjpeg->JpegOutCount)
 8009980:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8009982:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8009984:	429f      	cmp	r7, r3
 8009986:	d119      	bne.n	80099bc <JPEG_StoreOutputData+0xb6>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8009988:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800998a:	e7e9      	b.n	8009960 <JPEG_StoreOutputData+0x5a>
      dataword = hjpeg->Instance->DOR;
 800998c:	6823      	ldr	r3, [r4, #0]
    for (index = 0; index < nb_words; index++)
 800998e:	3001      	adds	r0, #1
      dataword = hjpeg->Instance->DOR;
 8009990:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
 8009992:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 8009994:	554b      	strb	r3, [r1, r5]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataword & 0x0000FF00UL) >> 8);
 8009996:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 8009998:	69e1      	ldr	r1, [r4, #28]
 800999a:	4429      	add	r1, r5
 800999c:	0a1d      	lsrs	r5, r3, #8
 800999e:	704d      	strb	r5, [r1, #1]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
 80099a0:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 80099a2:	69e1      	ldr	r1, [r4, #28]
 80099a4:	4429      	add	r1, r5
 80099a6:	0c1d      	lsrs	r5, r3, #16
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
 80099a8:	0e1b      	lsrs	r3, r3, #24
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
 80099aa:	708d      	strb	r5, [r1, #2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
 80099ac:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 80099ae:	69e1      	ldr	r1, [r4, #28]
 80099b0:	4429      	add	r1, r5
 80099b2:	70cb      	strb	r3, [r1, #3]
      hjpeg->JpegOutCount += 4UL;
 80099b4:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80099b6:	3304      	adds	r3, #4
 80099b8:	6263      	str	r3, [r4, #36]	@ 0x24
    for (index = 0; index < nb_words; index++)
 80099ba:	e7de      	b.n	800997a <JPEG_StoreOutputData+0x74>
      nb_bytes = hjpeg->OutDataLength - hjpeg->JpegOutCount;
 80099bc:	6a65      	ldr	r5, [r4, #36]	@ 0x24
      for (index = 0; index < nb_bytes; index++)
 80099be:	2200      	movs	r2, #0
      dataword = hjpeg->Instance->DOR;
 80099c0:	6823      	ldr	r3, [r4, #0]
      nb_bytes = hjpeg->OutDataLength - hjpeg->JpegOutCount;
 80099c2:	1b78      	subs	r0, r7, r5
      dataword = hjpeg->Instance->DOR;
 80099c4:	6c5e      	ldr	r6, [r3, #68]	@ 0x44
      for (index = 0; index < nb_bytes; index++)
 80099c6:	4282      	cmp	r2, r0
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * (index & 0x3UL))) & 0xFFUL);
 80099c8:	69e1      	ldr	r1, [r4, #28]
      for (index = 0; index < nb_bytes; index++)
 80099ca:	d114      	bne.n	80099f6 <JPEG_StoreOutputData+0xf0>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 80099cc:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 80099ce:	4620      	mov	r0, r4
 80099d0:	f7f8 fdfe 	bl	80025d0 <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
 80099d4:	2300      	movs	r3, #0
 80099d6:	6263      	str	r3, [r4, #36]	@ 0x24
      nb_bytes = 4UL - nb_bytes;
 80099d8:	1d2b      	adds	r3, r5, #4
 80099da:	1bdb      	subs	r3, r3, r7
      for (index = nb_bytes; index < 4UL; index++)
 80099dc:	2b03      	cmp	r3, #3
 80099de:	d8c4      	bhi.n	800996a <JPEG_StoreOutputData+0x64>
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * index)) & 0xFFUL);
 80099e0:	00da      	lsls	r2, r3, #3
 80099e2:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 80099e4:	69e0      	ldr	r0, [r4, #28]
      for (index = nb_bytes; index < 4UL; index++)
 80099e6:	3301      	adds	r3, #1
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * index)) & 0xFFUL);
 80099e8:	fa26 f202 	lsr.w	r2, r6, r2
 80099ec:	5442      	strb	r2, [r0, r1]
        hjpeg->JpegOutCount++;
 80099ee:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 80099f0:	3201      	adds	r2, #1
 80099f2:	6262      	str	r2, [r4, #36]	@ 0x24
      for (index = nb_bytes; index < 4UL; index++)
 80099f4:	e7f2      	b.n	80099dc <JPEG_StoreOutputData+0xd6>
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * (index & 0x3UL))) & 0xFFUL);
 80099f6:	f002 0303 	and.w	r3, r2, #3
 80099fa:	f8d4 c024 	ldr.w	ip, [r4, #36]	@ 0x24
      for (index = 0; index < nb_bytes; index++)
 80099fe:	3201      	adds	r2, #1
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * (index & 0x3UL))) & 0xFFUL);
 8009a00:	00db      	lsls	r3, r3, #3
 8009a02:	fa26 f303 	lsr.w	r3, r6, r3
 8009a06:	f801 300c 	strb.w	r3, [r1, ip]
        hjpeg->JpegOutCount++;
 8009a0a:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8009a0c:	3301      	adds	r3, #1
 8009a0e:	6263      	str	r3, [r4, #36]	@ 0x24
      for (index = 0; index < nb_bytes; index++)
 8009a10:	e7d9      	b.n	80099c6 <JPEG_StoreOutputData+0xc0>

08009a12 <JPEG_Process>:
  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 8009a12:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 8009a14:	f003 0303 	and.w	r3, r3, #3
 8009a18:	2b02      	cmp	r3, #2
{
 8009a1a:	b510      	push	{r4, lr}
 8009a1c:	4604      	mov	r4, r0
  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 8009a1e:	d114      	bne.n	8009a4a <JPEG_Process+0x38>
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_HPDF) != 0UL)
 8009a20:	6803      	ldr	r3, [r0, #0]
 8009a22:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009a24:	065b      	lsls	r3, r3, #25
 8009a26:	d510      	bpl.n	8009a4a <JPEG_Process+0x38>
      (void) HAL_JPEG_GetInfo(hjpeg, &hjpeg->Conf);
 8009a28:	1d01      	adds	r1, r0, #4
 8009a2a:	f7ff fdb7 	bl	800959c <HAL_JPEG_GetInfo>
      hjpeg->Conf.ImageQuality = 0;
 8009a2e:	2300      	movs	r3, #0
      HAL_JPEG_InfoReadyCallback(hjpeg, &hjpeg->Conf);
 8009a30:	4620      	mov	r0, r4
      hjpeg->Conf.ImageQuality = 0;
 8009a32:	6163      	str	r3, [r4, #20]
      HAL_JPEG_InfoReadyCallback(hjpeg, &hjpeg->Conf);
 8009a34:	f7f8 fd78 	bl	8002528 <HAL_JPEG_InfoReadyCallback>
      __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_IT_HPD);
 8009a38:	6823      	ldr	r3, [r4, #0]
 8009a3a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009a3c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009a40:	631a      	str	r2, [r3, #48]	@ 0x30
      __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_HPDF);
 8009a42:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009a44:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009a48:	639a      	str	r2, [r3, #56]	@ 0x38
  if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL)
 8009a4a:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8009a4c:	04d9      	lsls	r1, r3, #19
 8009a4e:	d407      	bmi.n	8009a60 <JPEG_Process+0x4e>
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_IFTF) != 0UL)
 8009a50:	6823      	ldr	r3, [r4, #0]
 8009a52:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009a54:	0792      	lsls	r2, r2, #30
 8009a56:	d544      	bpl.n	8009ae2 <JPEG_Process+0xd0>
      JPEG_ReadInputData(hjpeg, JPEG_FIFO_TH_SIZE);
 8009a58:	2108      	movs	r1, #8
      JPEG_ReadInputData(hjpeg, 1);
 8009a5a:	4620      	mov	r0, r4
 8009a5c:	f7ff fe94 	bl	8009788 <JPEG_ReadInputData>
  if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 8009a60:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8009a62:	0499      	lsls	r1, r3, #18
 8009a64:	d407      	bmi.n	8009a76 <JPEG_Process+0x64>
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFTF) != 0UL)
 8009a66:	6823      	ldr	r3, [r4, #0]
 8009a68:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009a6a:	0712      	lsls	r2, r2, #28
 8009a6c:	d53e      	bpl.n	8009aec <JPEG_Process+0xda>
      JPEG_StoreOutputData(hjpeg, JPEG_FIFO_TH_SIZE);
 8009a6e:	2108      	movs	r1, #8
      JPEG_StoreOutputData(hjpeg, 1);
 8009a70:	4620      	mov	r0, r4
 8009a72:	f7ff ff48 	bl	8009906 <JPEG_StoreOutputData>
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF | JPEG_FLAG_OFTF | JPEG_FLAG_OFNEF) == JPEG_FLAG_EOCF)
 8009a76:	6823      	ldr	r3, [r4, #0]
 8009a78:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009a7a:	f002 0238 	and.w	r2, r2, #56	@ 0x38
 8009a7e:	2a20      	cmp	r2, #32
 8009a80:	d13c      	bne.n	8009afc <JPEG_Process+0xea>
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 8009a82:	681a      	ldr	r2, [r3, #0]
 8009a84:	f022 0201 	bic.w	r2, r2, #1
 8009a88:	601a      	str	r2, [r3, #0]
    if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 8009a8a:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8009a8c:	f002 020c 	and.w	r2, r2, #12
 8009a90:	2a08      	cmp	r2, #8
 8009a92:	d103      	bne.n	8009a9c <JPEG_Process+0x8a>
      __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 8009a94:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009a96:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 8009a9a:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 8009a9c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009a9e:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 8009aa2:	639a      	str	r2, [r3, #56]	@ 0x38
    if (hjpeg->JpegOutCount > 0UL)
 8009aa4:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8009aa6:	b133      	cbz	r3, 8009ab6 <JPEG_Process+0xa4>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8009aa8:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8009aaa:	4620      	mov	r0, r4
 8009aac:	69e1      	ldr	r1, [r4, #28]
 8009aae:	f7f8 fd8f 	bl	80025d0 <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
 8009ab2:	2300      	movs	r3, #0
 8009ab4:	6263      	str	r3, [r4, #36]	@ 0x24
    tmpContext = hjpeg->Context;
 8009ab6:	6d63      	ldr	r3, [r4, #84]	@ 0x54
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 8009ab8:	4620      	mov	r0, r4
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 8009aba:	6d62      	ldr	r2, [r4, #84]	@ 0x54
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 8009abc:	f003 0303 	and.w	r3, r3, #3
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 8009ac0:	f402 4282 	and.w	r2, r2, #16640	@ 0x4100
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 8009ac4:	2b02      	cmp	r3, #2
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 8009ac6:	6562      	str	r2, [r4, #84]	@ 0x54
    __HAL_UNLOCK(hjpeg);
 8009ac8:	f04f 0200 	mov.w	r2, #0
 8009acc:	f884 204c 	strb.w	r2, [r4, #76]	@ 0x4c
    hjpeg->State = HAL_JPEG_STATE_READY;
 8009ad0:	f04f 0201 	mov.w	r2, #1
 8009ad4:	f884 204d 	strb.w	r2, [r4, #77]	@ 0x4d
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 8009ad8:	d10d      	bne.n	8009af6 <JPEG_Process+0xe4>
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 8009ada:	f7f8 fdcb 	bl	8002674 <HAL_JPEG_DecodeCpltCallback>
    return JPEG_PROCESS_DONE;
 8009ade:	2001      	movs	r0, #1
}
 8009ae0:	bd10      	pop	{r4, pc}
    else if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_IFNFF) != 0UL)
 8009ae2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009ae4:	0758      	lsls	r0, r3, #29
 8009ae6:	d5bb      	bpl.n	8009a60 <JPEG_Process+0x4e>
      JPEG_ReadInputData(hjpeg, 1);
 8009ae8:	2101      	movs	r1, #1
 8009aea:	e7b6      	b.n	8009a5a <JPEG_Process+0x48>
    else if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) != 0UL)
 8009aec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009aee:	06db      	lsls	r3, r3, #27
 8009af0:	d5c1      	bpl.n	8009a76 <JPEG_Process+0x64>
      JPEG_StoreOutputData(hjpeg, 1);
 8009af2:	2101      	movs	r1, #1
 8009af4:	e7bc      	b.n	8009a70 <JPEG_Process+0x5e>
      HAL_JPEG_EncodeCpltCallback(hjpeg);
 8009af6:	f7ff fe31 	bl	800975c <HAL_JPEG_EncodeCpltCallback>
 8009afa:	e7f0      	b.n	8009ade <JPEG_Process+0xcc>
  return JPEG_PROCESS_ONGOING;
 8009afc:	2000      	movs	r0, #0
 8009afe:	e7ef      	b.n	8009ae0 <JPEG_Process+0xce>

08009b00 <JPEG_DMA_PollResidualData>:
{
 8009b00:	b570      	push	{r4, r5, r6, lr}
 8009b02:	4604      	mov	r4, r0
 8009b04:	2610      	movs	r6, #16
    if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 8009b06:	6d65      	ldr	r5, [r4, #84]	@ 0x54
      if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) != 0UL)
 8009b08:	6823      	ldr	r3, [r4, #0]
    if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 8009b0a:	f415 5500 	ands.w	r5, r5, #8192	@ 0x2000
 8009b0e:	d122      	bne.n	8009b56 <JPEG_DMA_PollResidualData+0x56>
      if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) != 0UL)
 8009b10:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009b12:	06d0      	lsls	r0, r2, #27
 8009b14:	d51f      	bpl.n	8009b56 <JPEG_DMA_PollResidualData+0x56>
        dataOut = hjpeg->Instance->DOR;
 8009b16:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataOut & 0x000000FFUL);
 8009b18:	69e1      	ldr	r1, [r4, #28]
 8009b1a:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8009b1c:	548b      	strb	r3, [r1, r2]
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataOut & 0x0000FF00UL) >> 8);
 8009b1e:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8009b20:	69e2      	ldr	r2, [r4, #28]
 8009b22:	440a      	add	r2, r1
 8009b24:	0a19      	lsrs	r1, r3, #8
 8009b26:	7051      	strb	r1, [r2, #1]
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataOut & 0x00FF0000UL) >> 16);
 8009b28:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8009b2a:	69e2      	ldr	r2, [r4, #28]
 8009b2c:	440a      	add	r2, r1
 8009b2e:	0c19      	lsrs	r1, r3, #16
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataOut & 0xFF000000UL) >> 24);
 8009b30:	0e1b      	lsrs	r3, r3, #24
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataOut & 0x00FF0000UL) >> 16);
 8009b32:	7091      	strb	r1, [r2, #2]
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataOut & 0xFF000000UL) >> 24);
 8009b34:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8009b36:	69e2      	ldr	r2, [r4, #28]
 8009b38:	440a      	add	r2, r1
 8009b3a:	70d3      	strb	r3, [r2, #3]
        hjpeg->JpegOutCount += 4UL;
 8009b3c:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8009b3e:	3304      	adds	r3, #4
 8009b40:	6263      	str	r3, [r4, #36]	@ 0x24
        if (hjpeg->JpegOutCount == hjpeg->OutDataLength)
 8009b42:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8009b44:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8009b46:	429a      	cmp	r2, r3
 8009b48:	d105      	bne.n	8009b56 <JPEG_DMA_PollResidualData+0x56>
          HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8009b4a:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8009b4c:	4620      	mov	r0, r4
 8009b4e:	69e1      	ldr	r1, [r4, #28]
 8009b50:	f7f8 fd3e 	bl	80025d0 <HAL_JPEG_DataReadyCallback>
          hjpeg->JpegOutCount = 0;
 8009b54:	6265      	str	r5, [r4, #36]	@ 0x24
  for (count = JPEG_FIFO_SIZE; count > 0UL; count--)
 8009b56:	3e01      	subs	r6, #1
 8009b58:	d1d5      	bne.n	8009b06 <JPEG_DMA_PollResidualData+0x6>
  if ((__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) == 0UL) || ((tmpContext & JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL))
 8009b5a:	6823      	ldr	r3, [r4, #0]
  tmpContext = hjpeg->Context;
 8009b5c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
  if ((__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) == 0UL) || ((tmpContext & JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL))
 8009b5e:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8009b60:	06c9      	lsls	r1, r1, #27
 8009b62:	d501      	bpl.n	8009b68 <JPEG_DMA_PollResidualData+0x68>
 8009b64:	0492      	lsls	r2, r2, #18
 8009b66:	d420      	bmi.n	8009baa <JPEG_DMA_PollResidualData+0xaa>
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 8009b68:	681a      	ldr	r2, [r3, #0]
 8009b6a:	f022 0201 	bic.w	r2, r2, #1
 8009b6e:	601a      	str	r2, [r3, #0]
    if (hjpeg->JpegOutCount > 0UL)
 8009b70:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8009b72:	b133      	cbz	r3, 8009b82 <JPEG_DMA_PollResidualData+0x82>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8009b74:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8009b76:	4620      	mov	r0, r4
 8009b78:	69e1      	ldr	r1, [r4, #28]
 8009b7a:	f7f8 fd29 	bl	80025d0 <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
 8009b7e:	2300      	movs	r3, #0
 8009b80:	6263      	str	r3, [r4, #36]	@ 0x24
    tmpContext = hjpeg->Context;
 8009b82:	6d63      	ldr	r3, [r4, #84]	@ 0x54
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 8009b84:	4620      	mov	r0, r4
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 8009b86:	6d62      	ldr	r2, [r4, #84]	@ 0x54
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 8009b88:	f003 0303 	and.w	r3, r3, #3
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 8009b8c:	f402 4282 	and.w	r2, r2, #16640	@ 0x4100
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 8009b90:	2b02      	cmp	r3, #2
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 8009b92:	6562      	str	r2, [r4, #84]	@ 0x54
    __HAL_UNLOCK(hjpeg);
 8009b94:	f04f 0200 	mov.w	r2, #0
 8009b98:	f884 204c 	strb.w	r2, [r4, #76]	@ 0x4c
    hjpeg->State = HAL_JPEG_STATE_READY;
 8009b9c:	f04f 0201 	mov.w	r2, #1
 8009ba0:	f884 204d 	strb.w	r2, [r4, #77]	@ 0x4d
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 8009ba4:	d102      	bne.n	8009bac <JPEG_DMA_PollResidualData+0xac>
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 8009ba6:	f7f8 fd65 	bl	8002674 <HAL_JPEG_DecodeCpltCallback>
}
 8009baa:	bd70      	pop	{r4, r5, r6, pc}
      HAL_JPEG_EncodeCpltCallback(hjpeg);
 8009bac:	f7ff fdd6 	bl	800975c <HAL_JPEG_EncodeCpltCallback>
}
 8009bb0:	e7fb      	b.n	8009baa <JPEG_DMA_PollResidualData+0xaa>

08009bb2 <HAL_JPEG_Resume>:
  if ((hjpeg->Context & (JPEG_CONTEXT_PAUSE_INPUT | JPEG_CONTEXT_PAUSE_OUTPUT)) == 0UL)
 8009bb2:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 8009bb4:	f413 5f40 	tst.w	r3, #12288	@ 0x3000
{
 8009bb8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009bba:	4604      	mov	r4, r0
 8009bbc:	460d      	mov	r5, r1
  if ((hjpeg->Context & (JPEG_CONTEXT_PAUSE_INPUT | JPEG_CONTEXT_PAUSE_OUTPUT)) == 0UL)
 8009bbe:	d014      	beq.n	8009bea <HAL_JPEG_Resume+0x38>
  if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
 8009bc0:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 8009bc2:	f003 030c 	and.w	r3, r3, #12
 8009bc6:	2b0c      	cmp	r3, #12
 8009bc8:	d146      	bne.n	8009c58 <HAL_JPEG_Resume+0xa6>
    if ((XferSelection & JPEG_PAUSE_RESUME_INPUT) == JPEG_PAUSE_RESUME_INPUT)
 8009bca:	07cb      	lsls	r3, r1, #31
 8009bcc:	d520      	bpl.n	8009c10 <HAL_JPEG_Resume+0x5e>
      hjpeg->Context &= (~JPEG_CONTEXT_PAUSE_INPUT);
 8009bce:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 8009bd0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009bd4:	6543      	str	r3, [r0, #84]	@ 0x54
      xfrSize = hjpeg->hdmain->Init.BufferTransferLength;
 8009bd6:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 8009bd8:	6a81      	ldr	r1, [r0, #40]	@ 0x28
      if (xfrSize == 0UL)
 8009bda:	b941      	cbnz	r1, 8009bee <HAL_JPEG_Resume+0x3c>
          hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 8009bdc:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8009bde:	f043 0304 	orr.w	r3, r3, #4
 8009be2:	6523      	str	r3, [r4, #80]	@ 0x50
          hjpeg->State = HAL_JPEG_STATE_ERROR;
 8009be4:	2306      	movs	r3, #6
 8009be6:	f884 304d 	strb.w	r3, [r4, #77]	@ 0x4d
    return HAL_ERROR;
 8009bea:	2001      	movs	r0, #1
 8009bec:	e01d      	b.n	8009c2a <HAL_JPEG_Resume+0x78>
      hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % xfrSize);
 8009bee:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8009bf0:	fbb3 f2f1 	udiv	r2, r3, r1
 8009bf4:	fb01 3212 	mls	r2, r1, r2, r3
 8009bf8:	1a9b      	subs	r3, r3, r2
 8009bfa:	62a3      	str	r3, [r4, #40]	@ 0x28
      if (hjpeg->InDataLength > 0UL)
 8009bfc:	b143      	cbz	r3, 8009c10 <HAL_JPEG_Resume+0x5e>
        if (HAL_MDMA_Start_IT(hjpeg->hdmain, (uint32_t)hjpeg->pJpegInBuffPtr, (uint32_t)&hjpeg->Instance->DIR,
 8009bfe:	6822      	ldr	r2, [r4, #0]
 8009c00:	2101      	movs	r1, #1
 8009c02:	3240      	adds	r2, #64	@ 0x40
 8009c04:	9100      	str	r1, [sp, #0]
 8009c06:	69a1      	ldr	r1, [r4, #24]
 8009c08:	f000 fbc5 	bl	800a396 <HAL_MDMA_Start_IT>
 8009c0c:	2800      	cmp	r0, #0
 8009c0e:	d1e5      	bne.n	8009bdc <HAL_JPEG_Resume+0x2a>
    if ((XferSelection & JPEG_PAUSE_RESUME_OUTPUT) == JPEG_PAUSE_RESUME_OUTPUT)
 8009c10:	07a8      	lsls	r0, r5, #30
 8009c12:	d509      	bpl.n	8009c28 <HAL_JPEG_Resume+0x76>
      hjpeg->Context &= (~JPEG_CONTEXT_PAUSE_OUTPUT);
 8009c14:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8009c16:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8009c1a:	6563      	str	r3, [r4, #84]	@ 0x54
      if ((hjpeg->Context & JPEG_CONTEXT_ENDING_DMA) != 0UL)
 8009c1c:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8009c1e:	0419      	lsls	r1, r3, #16
 8009c20:	d505      	bpl.n	8009c2e <HAL_JPEG_Resume+0x7c>
        JPEG_DMA_PollResidualData(hjpeg);
 8009c22:	4620      	mov	r0, r4
 8009c24:	f7ff ff6c 	bl	8009b00 <JPEG_DMA_PollResidualData>
  return HAL_OK;
 8009c28:	2000      	movs	r0, #0
}
 8009c2a:	b003      	add	sp, #12
 8009c2c:	bd30      	pop	{r4, r5, pc}
        xfrSize = hjpeg->hdmaout->Init.BufferTransferLength;
 8009c2e:	6b60      	ldr	r0, [r4, #52]	@ 0x34
 8009c30:	6a81      	ldr	r1, [r0, #40]	@ 0x28
        if (xfrSize == 0UL)
 8009c32:	2900      	cmp	r1, #0
 8009c34:	d0d2      	beq.n	8009bdc <HAL_JPEG_Resume+0x2a>
        hjpeg->OutDataLength = hjpeg->OutDataLength - (hjpeg->OutDataLength % xfrSize);
 8009c36:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8009c38:	fbb3 f2f1 	udiv	r2, r3, r1
 8009c3c:	fb01 3212 	mls	r2, r1, r2, r3
        if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
 8009c40:	6821      	ldr	r1, [r4, #0]
        hjpeg->OutDataLength = hjpeg->OutDataLength - (hjpeg->OutDataLength % xfrSize);
 8009c42:	1a9b      	subs	r3, r3, r2
        if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
 8009c44:	2201      	movs	r2, #1
 8009c46:	3144      	adds	r1, #68	@ 0x44
        hjpeg->OutDataLength = hjpeg->OutDataLength - (hjpeg->OutDataLength % xfrSize);
 8009c48:	62e3      	str	r3, [r4, #44]	@ 0x2c
        if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
 8009c4a:	9200      	str	r2, [sp, #0]
 8009c4c:	69e2      	ldr	r2, [r4, #28]
 8009c4e:	f000 fba2 	bl	800a396 <HAL_MDMA_Start_IT>
 8009c52:	2800      	cmp	r0, #0
 8009c54:	d0e8      	beq.n	8009c28 <HAL_JPEG_Resume+0x76>
 8009c56:	e7c1      	b.n	8009bdc <HAL_JPEG_Resume+0x2a>
  else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 8009c58:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 8009c5a:	f003 030c 	and.w	r3, r3, #12
 8009c5e:	2b08      	cmp	r3, #8
 8009c60:	d1e2      	bne.n	8009c28 <HAL_JPEG_Resume+0x76>
    if ((XferSelection & JPEG_PAUSE_RESUME_INPUT) == JPEG_PAUSE_RESUME_INPUT)
 8009c62:	f011 0301 	ands.w	r3, r1, #1
 8009c66:	d004      	beq.n	8009c72 <HAL_JPEG_Resume+0xc0>
      hjpeg->Context &= (~JPEG_CONTEXT_PAUSE_INPUT);
 8009c68:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 8009c6a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009c6e:	6543      	str	r3, [r0, #84]	@ 0x54
      mask |= (JPEG_IT_IFT | JPEG_IT_IFNF);
 8009c70:	2306      	movs	r3, #6
    if ((XferSelection & JPEG_PAUSE_RESUME_OUTPUT) == JPEG_PAUSE_RESUME_OUTPUT)
 8009c72:	07aa      	lsls	r2, r5, #30
 8009c74:	d505      	bpl.n	8009c82 <HAL_JPEG_Resume+0xd0>
      hjpeg->Context &= (~JPEG_CONTEXT_PAUSE_OUTPUT);
 8009c76:	6d62      	ldr	r2, [r4, #84]	@ 0x54
      mask |= (JPEG_IT_OFT | JPEG_IT_OFNE | JPEG_IT_EOC);
 8009c78:	f043 0328 	orr.w	r3, r3, #40	@ 0x28
      hjpeg->Context &= (~JPEG_CONTEXT_PAUSE_OUTPUT);
 8009c7c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8009c80:	6562      	str	r2, [r4, #84]	@ 0x54
    __HAL_JPEG_ENABLE_IT(hjpeg, mask);
 8009c82:	6821      	ldr	r1, [r4, #0]
 8009c84:	6b0a      	ldr	r2, [r1, #48]	@ 0x30
 8009c86:	4313      	orrs	r3, r2
 8009c88:	630b      	str	r3, [r1, #48]	@ 0x30
 8009c8a:	e7cd      	b.n	8009c28 <HAL_JPEG_Resume+0x76>

08009c8c <JPEG_DMA_EndProcess>:
{
 8009c8c:	b538      	push	{r3, r4, r5, lr}
  hjpeg->JpegOutCount = hjpeg->OutDataLength - (hjpeg->hdmaout->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
 8009c8e:	6b43      	ldr	r3, [r0, #52]	@ 0x34
{
 8009c90:	4604      	mov	r4, r0
  hjpeg->JpegOutCount = hjpeg->OutDataLength - (hjpeg->hdmaout->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
 8009c92:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
 8009c94:	681b      	ldr	r3, [r3, #0]
 8009c96:	695b      	ldr	r3, [r3, #20]
 8009c98:	f3c3 0310 	ubfx	r3, r3, #0, #17
 8009c9c:	1ad3      	subs	r3, r2, r3
 8009c9e:	6243      	str	r3, [r0, #36]	@ 0x24
  if (hjpeg->JpegOutCount == hjpeg->OutDataLength)
 8009ca0:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8009ca2:	429a      	cmp	r2, r3
 8009ca4:	d105      	bne.n	8009cb2 <JPEG_DMA_EndProcess+0x26>
    HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8009ca6:	6a42      	ldr	r2, [r0, #36]	@ 0x24
 8009ca8:	69c1      	ldr	r1, [r0, #28]
 8009caa:	f7f8 fc91 	bl	80025d0 <HAL_JPEG_DataReadyCallback>
    hjpeg->JpegOutCount = 0;
 8009cae:	2300      	movs	r3, #0
 8009cb0:	6263      	str	r3, [r4, #36]	@ 0x24
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) == 0UL)
 8009cb2:	6823      	ldr	r3, [r4, #0]
 8009cb4:	6b5d      	ldr	r5, [r3, #52]	@ 0x34
 8009cb6:	f015 0510 	ands.w	r5, r5, #16
 8009cba:	d124      	bne.n	8009d06 <JPEG_DMA_EndProcess+0x7a>
    if (hjpeg->JpegOutCount > 0UL)
 8009cbc:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8009cbe:	b12b      	cbz	r3, 8009ccc <JPEG_DMA_EndProcess+0x40>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8009cc0:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8009cc2:	4620      	mov	r0, r4
 8009cc4:	69e1      	ldr	r1, [r4, #28]
 8009cc6:	f7f8 fc83 	bl	80025d0 <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
 8009cca:	6265      	str	r5, [r4, #36]	@ 0x24
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 8009ccc:	6822      	ldr	r2, [r4, #0]
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 8009cce:	4620      	mov	r0, r4
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 8009cd0:	6813      	ldr	r3, [r2, #0]
 8009cd2:	f023 0301 	bic.w	r3, r3, #1
 8009cd6:	6013      	str	r3, [r2, #0]
    tmpContext = hjpeg->Context;
 8009cd8:	6d63      	ldr	r3, [r4, #84]	@ 0x54
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 8009cda:	6d62      	ldr	r2, [r4, #84]	@ 0x54
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 8009cdc:	f003 0303 	and.w	r3, r3, #3
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 8009ce0:	f402 4282 	and.w	r2, r2, #16640	@ 0x4100
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 8009ce4:	2b02      	cmp	r3, #2
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 8009ce6:	6562      	str	r2, [r4, #84]	@ 0x54
    __HAL_UNLOCK(hjpeg);
 8009ce8:	f04f 0200 	mov.w	r2, #0
 8009cec:	f884 204c 	strb.w	r2, [r4, #76]	@ 0x4c
    hjpeg->State = HAL_JPEG_STATE_READY;
 8009cf0:	f04f 0201 	mov.w	r2, #1
 8009cf4:	f884 204d 	strb.w	r2, [r4, #77]	@ 0x4d
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 8009cf8:	d102      	bne.n	8009d00 <JPEG_DMA_EndProcess+0x74>
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 8009cfa:	f7f8 fcbb 	bl	8002674 <HAL_JPEG_DecodeCpltCallback>
}
 8009cfe:	bd38      	pop	{r3, r4, r5, pc}
      HAL_JPEG_EncodeCpltCallback(hjpeg);
 8009d00:	f7ff fd2c 	bl	800975c <HAL_JPEG_EncodeCpltCallback>
 8009d04:	e7fb      	b.n	8009cfe <JPEG_DMA_EndProcess+0x72>
  else if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 8009d06:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8009d08:	049b      	lsls	r3, r3, #18
 8009d0a:	d4f8      	bmi.n	8009cfe <JPEG_DMA_EndProcess+0x72>
    JPEG_DMA_PollResidualData(hjpeg);
 8009d0c:	4620      	mov	r0, r4
}
 8009d0e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    JPEG_DMA_PollResidualData(hjpeg);
 8009d12:	f7ff bef5 	b.w	8009b00 <JPEG_DMA_PollResidualData>

08009d16 <JPEG_MDMAOutAbortCallback>:
  JPEG_HandleTypeDef *hjpeg = (JPEG_HandleTypeDef *)((MDMA_HandleTypeDef *)hmdma)->Parent;
 8009d16:	6c00      	ldr	r0, [r0, #64]	@ 0x40
  if ((hjpeg->Context & JPEG_CONTEXT_ENDING_DMA) != 0UL)
 8009d18:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 8009d1a:	041b      	lsls	r3, r3, #16
 8009d1c:	d501      	bpl.n	8009d22 <JPEG_MDMAOutAbortCallback+0xc>
    JPEG_DMA_EndProcess(hjpeg);
 8009d1e:	f7ff bfb5 	b.w	8009c8c <JPEG_DMA_EndProcess>
}
 8009d22:	4770      	bx	lr

08009d24 <JPEG_MDMAOutCpltCallback>:
{
 8009d24:	b513      	push	{r0, r1, r4, lr}
  JPEG_HandleTypeDef *hjpeg = (JPEG_HandleTypeDef *)((MDMA_HandleTypeDef *)hmdma)->Parent;
 8009d26:	6c04      	ldr	r4, [r0, #64]	@ 0x40
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 8009d28:	6823      	ldr	r3, [r4, #0]
 8009d2a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009d2c:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 8009d30:	631a      	str	r2, [r3, #48]	@ 0x30
  if ((hjpeg->Context & (JPEG_CONTEXT_METHOD_MASK | JPEG_CONTEXT_ENDING_DMA)) ==
 8009d32:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8009d34:	f422 42ff 	bic.w	r2, r2, #32640	@ 0x7f80
 8009d38:	f022 0273 	bic.w	r2, r2, #115	@ 0x73
 8009d3c:	0412      	lsls	r2, r2, #16
 8009d3e:	0c12      	lsrs	r2, r2, #16
 8009d40:	2a0c      	cmp	r2, #12
 8009d42:	d125      	bne.n	8009d90 <JPEG_MDMAOutCpltCallback+0x6c>
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF) == 0UL)
 8009d44:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009d46:	069a      	lsls	r2, r3, #26
 8009d48:	d424      	bmi.n	8009d94 <JPEG_MDMAOutCpltCallback+0x70>
      hjpeg->JpegOutCount = hjpeg->OutDataLength - (hmdma->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
 8009d4a:	6803      	ldr	r3, [r0, #0]
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8009d4c:	4620      	mov	r0, r4
 8009d4e:	69e1      	ldr	r1, [r4, #28]
      hjpeg->JpegOutCount = hjpeg->OutDataLength - (hmdma->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
 8009d50:	695a      	ldr	r2, [r3, #20]
 8009d52:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8009d54:	f3c2 0210 	ubfx	r2, r2, #0, #17
 8009d58:	1a9b      	subs	r3, r3, r2
 8009d5a:	6263      	str	r3, [r4, #36]	@ 0x24
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8009d5c:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8009d5e:	f7f8 fc37 	bl	80025d0 <HAL_JPEG_DataReadyCallback>
      if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 8009d62:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8009d64:	049b      	lsls	r3, r3, #18
 8009d66:	d415      	bmi.n	8009d94 <JPEG_MDMAOutCpltCallback+0x70>
        if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
 8009d68:	6821      	ldr	r1, [r4, #0]
 8009d6a:	2301      	movs	r3, #1
 8009d6c:	3144      	adds	r1, #68	@ 0x44
 8009d6e:	9300      	str	r3, [sp, #0]
 8009d70:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8009d72:	69e2      	ldr	r2, [r4, #28]
 8009d74:	6b60      	ldr	r0, [r4, #52]	@ 0x34
 8009d76:	f000 fb0e 	bl	800a396 <HAL_MDMA_Start_IT>
 8009d7a:	b158      	cbz	r0, 8009d94 <JPEG_MDMAOutCpltCallback+0x70>
          hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 8009d7c:	6d23      	ldr	r3, [r4, #80]	@ 0x50
          HAL_JPEG_ErrorCallback(hjpeg);
 8009d7e:	4620      	mov	r0, r4
          hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 8009d80:	f043 0304 	orr.w	r3, r3, #4
 8009d84:	6523      	str	r3, [r4, #80]	@ 0x50
          hjpeg->State = HAL_JPEG_STATE_ERROR;
 8009d86:	2306      	movs	r3, #6
 8009d88:	f884 304d 	strb.w	r3, [r4, #77]	@ 0x4d
          HAL_JPEG_ErrorCallback(hjpeg);
 8009d8c:	f7f8 fc70 	bl	8002670 <HAL_JPEG_ErrorCallback>
}
 8009d90:	b002      	add	sp, #8
 8009d92:	bd10      	pop	{r4, pc}
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_EOC | JPEG_IT_HPD);
 8009d94:	6822      	ldr	r2, [r4, #0]
 8009d96:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 8009d98:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8009d9c:	6313      	str	r3, [r2, #48]	@ 0x30
 8009d9e:	e7f7      	b.n	8009d90 <JPEG_MDMAOutCpltCallback+0x6c>

08009da0 <HAL_JPEG_IRQHandler>:
{
 8009da0:	b510      	push	{r4, lr}
  switch (hjpeg->State)
 8009da2:	f890 304d 	ldrb.w	r3, [r0, #77]	@ 0x4d
{
 8009da6:	4604      	mov	r4, r0
  switch (hjpeg->State)
 8009da8:	3b03      	subs	r3, #3
 8009daa:	2b01      	cmp	r3, #1
 8009dac:	d850      	bhi.n	8009e50 <HAL_JPEG_IRQHandler+0xb0>
      if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 8009dae:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 8009db0:	f003 030c 	and.w	r3, r3, #12
 8009db4:	2b08      	cmp	r3, #8
 8009db6:	d103      	bne.n	8009dc0 <HAL_JPEG_IRQHandler+0x20>
}
 8009db8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        (void) JPEG_Process(hjpeg);
 8009dbc:	f7ff be29 	b.w	8009a12 <JPEG_Process>
      else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
 8009dc0:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 8009dc2:	f003 030c 	and.w	r3, r3, #12
 8009dc6:	2b0c      	cmp	r3, #12
 8009dc8:	d142      	bne.n	8009e50 <HAL_JPEG_IRQHandler+0xb0>
  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 8009dca:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 8009dcc:	f003 0303 	and.w	r3, r3, #3
 8009dd0:	2b02      	cmp	r3, #2
 8009dd2:	d114      	bne.n	8009dfe <HAL_JPEG_IRQHandler+0x5e>
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_HPDF) != 0UL)
 8009dd4:	6803      	ldr	r3, [r0, #0]
 8009dd6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009dd8:	0659      	lsls	r1, r3, #25
 8009dda:	d510      	bpl.n	8009dfe <HAL_JPEG_IRQHandler+0x5e>
      (void) HAL_JPEG_GetInfo(hjpeg, &hjpeg->Conf);
 8009ddc:	1d01      	adds	r1, r0, #4
 8009dde:	f7ff fbdd 	bl	800959c <HAL_JPEG_GetInfo>
      hjpeg->Conf.ImageQuality = 0;
 8009de2:	2300      	movs	r3, #0
      HAL_JPEG_InfoReadyCallback(hjpeg, &hjpeg->Conf);
 8009de4:	4620      	mov	r0, r4
      hjpeg->Conf.ImageQuality = 0;
 8009de6:	6163      	str	r3, [r4, #20]
      HAL_JPEG_InfoReadyCallback(hjpeg, &hjpeg->Conf);
 8009de8:	f7f8 fb9e 	bl	8002528 <HAL_JPEG_InfoReadyCallback>
      __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_IT_HPD);
 8009dec:	6823      	ldr	r3, [r4, #0]
 8009dee:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009df0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009df4:	631a      	str	r2, [r3, #48]	@ 0x30
      __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_HPDF);
 8009df6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009df8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009dfc:	639a      	str	r2, [r3, #56]	@ 0x38
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF) != 0UL)
 8009dfe:	6823      	ldr	r3, [r4, #0]
 8009e00:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009e02:	0692      	lsls	r2, r2, #26
 8009e04:	d524      	bpl.n	8009e50 <HAL_JPEG_IRQHandler+0xb0>
    hjpeg->Context |= JPEG_CONTEXT_ENDING_DMA;
 8009e06:	6d62      	ldr	r2, [r4, #84]	@ 0x54
    if (hjpeg->hdmain->State == HAL_MDMA_STATE_BUSY)
 8009e08:	6b20      	ldr	r0, [r4, #48]	@ 0x30
    hjpeg->Context |= JPEG_CONTEXT_ENDING_DMA;
 8009e0a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8009e0e:	6562      	str	r2, [r4, #84]	@ 0x54
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 8009e10:	681a      	ldr	r2, [r3, #0]
 8009e12:	f022 0201 	bic.w	r2, r2, #1
 8009e16:	601a      	str	r2, [r3, #0]
    __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 8009e18:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009e1a:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 8009e1e:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 8009e20:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009e22:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 8009e26:	639a      	str	r2, [r3, #56]	@ 0x38
    if (hjpeg->hdmain->State == HAL_MDMA_STATE_BUSY)
 8009e28:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8009e2c:	2b02      	cmp	r3, #2
 8009e2e:	d101      	bne.n	8009e34 <HAL_JPEG_IRQHandler+0x94>
      (void) HAL_MDMA_Abort_IT(hjpeg->hdmain);
 8009e30:	f000 fafa 	bl	800a428 <HAL_MDMA_Abort_IT>
    if (hjpeg->hdmaout->State == HAL_MDMA_STATE_BUSY)
 8009e34:	6b60      	ldr	r0, [r4, #52]	@ 0x34
 8009e36:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8009e3a:	2b02      	cmp	r3, #2
 8009e3c:	d103      	bne.n	8009e46 <HAL_JPEG_IRQHandler+0xa6>
}
 8009e3e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      (void) HAL_MDMA_Abort_IT(hjpeg->hdmaout);
 8009e42:	f000 baf1 	b.w	800a428 <HAL_MDMA_Abort_IT>
      JPEG_DMA_EndProcess(hjpeg);
 8009e46:	4620      	mov	r0, r4
}
 8009e48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      JPEG_DMA_EndProcess(hjpeg);
 8009e4c:	f7ff bf1e 	b.w	8009c8c <JPEG_DMA_EndProcess>
}
 8009e50:	bd10      	pop	{r4, pc}

08009e52 <LTDC_SetConfig>:
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8009e52:	01d2      	lsls	r2, r2, #7
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8009e54:	6800      	ldr	r0, [r0, #0]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8009e56:	f8d1 c000 	ldr.w	ip, [r1]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8009e5a:	3284      	adds	r2, #132	@ 0x84
 8009e5c:	1883      	adds	r3, r0, r2
{
 8009e5e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8009e62:	68c6      	ldr	r6, [r0, #12]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8009e64:	f10c 0701 	add.w	r7, ip, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8009e68:	685d      	ldr	r5, [r3, #4]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
  tmp2 = (pLayerCfg->Alpha0 << 24U);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8009e6a:	f04f 0e00 	mov.w	lr, #0
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8009e6e:	684c      	ldr	r4, [r1, #4]
 8009e70:	f3c6 460b 	ubfx	r6, r6, #16, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8009e74:	f405 4570 	and.w	r5, r5, #61440	@ 0xf000
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8009e78:	f8d1 9018 	ldr.w	r9, [r1, #24]
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8009e7c:	4426      	add	r6, r4
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8009e7e:	605d      	str	r5, [r3, #4]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8009e80:	68c5      	ldr	r5, [r0, #12]
 8009e82:	f3c5 450b 	ubfx	r5, r5, #16, #12
 8009e86:	443d      	add	r5, r7
 8009e88:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8009e8c:	605d      	str	r5, [r3, #4]
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8009e8e:	68c6      	ldr	r6, [r0, #12]
 8009e90:	68cd      	ldr	r5, [r1, #12]
 8009e92:	f3c6 060a 	ubfx	r6, r6, #0, #11
 8009e96:	442e      	add	r6, r5
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8009e98:	689d      	ldr	r5, [r3, #8]
 8009e9a:	f405 4570 	and.w	r5, r5, #61440	@ 0xf000
 8009e9e:	609d      	str	r5, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8009ea0:	688d      	ldr	r5, [r1, #8]
 8009ea2:	68c7      	ldr	r7, [r0, #12]
 8009ea4:	3501      	adds	r5, #1
 8009ea6:	f3c7 070a 	ubfx	r7, r7, #0, #11
 8009eaa:	443d      	add	r5, r7
 8009eac:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8009eb0:	690e      	ldr	r6, [r1, #16]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8009eb2:	609d      	str	r5, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8009eb4:	691d      	ldr	r5, [r3, #16]
 8009eb6:	f025 0507 	bic.w	r5, r5, #7
 8009eba:	611d      	str	r5, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8009ebc:	611e      	str	r6, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8009ebe:	699d      	ldr	r5, [r3, #24]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8009ec0:	f891 7032 	ldrb.w	r7, [r1, #50]	@ 0x32
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8009ec4:	f891 8031 	ldrb.w	r8, [r1, #49]	@ 0x31
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8009ec8:	f8c3 e018 	str.w	lr, [r3, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8009ecc:	f891 5030 	ldrb.w	r5, [r1, #48]	@ 0x30
 8009ed0:	ea45 6509 	orr.w	r5, r5, r9, lsl #24
 8009ed4:	ea45 2508 	orr.w	r5, r5, r8, lsl #8
 8009ed8:	ea45 4507 	orr.w	r5, r5, r7, lsl #16
 8009edc:	619d      	str	r5, [r3, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8009ede:	695d      	ldr	r5, [r3, #20]
 8009ee0:	f025 05ff 	bic.w	r5, r5, #255	@ 0xff
 8009ee4:	615d      	str	r5, [r3, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8009ee6:	694d      	ldr	r5, [r1, #20]
 8009ee8:	615d      	str	r5, [r3, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8009eea:	69dd      	ldr	r5, [r3, #28]
 8009eec:	f425 65e0 	bic.w	r5, r5, #1792	@ 0x700
 8009ef0:	f025 0507 	bic.w	r5, r5, #7
 8009ef4:	61dd      	str	r5, [r3, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8009ef6:	e9d1 5707 	ldrd	r5, r7, [r1, #28]
 8009efa:	433d      	orrs	r5, r7
 8009efc:	61dd      	str	r5, [r3, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8009efe:	6a9d      	ldr	r5, [r3, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8009f00:	6a4d      	ldr	r5, [r1, #36]	@ 0x24
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8009f02:	f8c3 e028 	str.w	lr, [r3, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8009f06:	629d      	str	r5, [r3, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8009f08:	b31e      	cbz	r6, 8009f52 <LTDC_SetConfig+0x100>
  {
    tmp = 4U;
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8009f0a:	2e01      	cmp	r6, #1
 8009f0c:	d023      	beq.n	8009f56 <LTDC_SetConfig+0x104>
  {
    tmp = 3U;
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8009f0e:	1eb5      	subs	r5, r6, #2
 8009f10:	2d02      	cmp	r5, #2
 8009f12:	d922      	bls.n	8009f5a <LTDC_SetConfig+0x108>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
  {
    tmp = 2U;
 8009f14:	2e07      	cmp	r6, #7
 8009f16:	bf14      	ite	ne
 8009f18:	2501      	movne	r5, #1
 8009f1a:	2502      	moveq	r5, #2
  {
    tmp = 1U;
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8009f1c:	6ade      	ldr	r6, [r3, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) |
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 8009f1e:	eba4 040c 	sub.w	r4, r4, ip
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8009f22:	f006 26e0 	and.w	r6, r6, #3758153728	@ 0xe000e000
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 8009f26:	436c      	muls	r4, r5
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8009f28:	62de      	str	r6, [r3, #44]	@ 0x2c
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 8009f2a:	3407      	adds	r4, #7
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) |
 8009f2c:	6a8e      	ldr	r6, [r1, #40]	@ 0x28
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8009f2e:	6ac9      	ldr	r1, [r1, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) |
 8009f30:	436e      	muls	r6, r5
 8009f32:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
 8009f36:	62dc      	str	r4, [r3, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8009f38:	6b1c      	ldr	r4, [r3, #48]	@ 0x30
 8009f3a:	f424 64ff 	bic.w	r4, r4, #2040	@ 0x7f8
 8009f3e:	f024 0407 	bic.w	r4, r4, #7
 8009f42:	631c      	str	r4, [r3, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8009f44:	6319      	str	r1, [r3, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8009f46:	5883      	ldr	r3, [r0, r2]
 8009f48:	f043 0301 	orr.w	r3, r3, #1
 8009f4c:	5083      	str	r3, [r0, r2]
}
 8009f4e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    tmp = 4U;
 8009f52:	2504      	movs	r5, #4
 8009f54:	e7e2      	b.n	8009f1c <LTDC_SetConfig+0xca>
    tmp = 3U;
 8009f56:	2503      	movs	r5, #3
 8009f58:	e7e0      	b.n	8009f1c <LTDC_SetConfig+0xca>
    tmp = 2U;
 8009f5a:	2502      	movs	r5, #2
 8009f5c:	e7de      	b.n	8009f1c <LTDC_SetConfig+0xca>
	...

08009f60 <HAL_LTDC_Init>:
{
 8009f60:	b538      	push	{r3, r4, r5, lr}
  if (hltdc == NULL)
 8009f62:	4604      	mov	r4, r0
 8009f64:	2800      	cmp	r0, #0
 8009f66:	d063      	beq.n	800a030 <HAL_LTDC_Init+0xd0>
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8009f68:	f890 30a1 	ldrb.w	r3, [r0, #161]	@ 0xa1
 8009f6c:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8009f70:	b91b      	cbnz	r3, 8009f7a <HAL_LTDC_Init+0x1a>
    hltdc->Lock = HAL_UNLOCKED;
 8009f72:	f880 20a0 	strb.w	r2, [r0, #160]	@ 0xa0
    HAL_LTDC_MspInit(hltdc);
 8009f76:	f7f7 f911 	bl	800119c <HAL_LTDC_MspInit>
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8009f7a:	2302      	movs	r3, #2
 8009f7c:	f884 30a1 	strb.w	r3, [r4, #161]	@ 0xa1
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8009f80:	6823      	ldr	r3, [r4, #0]
 8009f82:	699a      	ldr	r2, [r3, #24]
 8009f84:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 8009f88:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8009f8a:	6999      	ldr	r1, [r3, #24]
 8009f8c:	e9d4 2001 	ldrd	r2, r0, [r4, #4]
 8009f90:	4302      	orrs	r2, r0
 8009f92:	68e0      	ldr	r0, [r4, #12]
 8009f94:	4302      	orrs	r2, r0
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8009f96:	6920      	ldr	r0, [r4, #16]
 8009f98:	4302      	orrs	r2, r0
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8009f9a:	6960      	ldr	r0, [r4, #20]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8009f9c:	430a      	orrs	r2, r1
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8009f9e:	4925      	ldr	r1, [pc, #148]	@ (800a034 <HAL_LTDC_Init+0xd4>)
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8009fa0:	619a      	str	r2, [r3, #24]
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8009fa2:	689a      	ldr	r2, [r3, #8]
 8009fa4:	400a      	ands	r2, r1
 8009fa6:	609a      	str	r2, [r3, #8]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8009fa8:	689a      	ldr	r2, [r3, #8]
 8009faa:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8009fae:	69a0      	ldr	r0, [r4, #24]
 8009fb0:	4302      	orrs	r2, r0
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8009fb2:	69e0      	ldr	r0, [r4, #28]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8009fb4:	609a      	str	r2, [r3, #8]
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8009fb6:	68da      	ldr	r2, [r3, #12]
 8009fb8:	400a      	ands	r2, r1
 8009fba:	60da      	str	r2, [r3, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8009fbc:	68da      	ldr	r2, [r3, #12]
 8009fbe:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8009fc2:	6a20      	ldr	r0, [r4, #32]
 8009fc4:	4302      	orrs	r2, r0
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8009fc6:	6a60      	ldr	r0, [r4, #36]	@ 0x24
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8009fc8:	60da      	str	r2, [r3, #12]
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8009fca:	691a      	ldr	r2, [r3, #16]
 8009fcc:	400a      	ands	r2, r1
 8009fce:	611a      	str	r2, [r3, #16]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8009fd0:	691a      	ldr	r2, [r3, #16]
 8009fd2:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8009fd6:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8009fd8:	4302      	orrs	r2, r0
 8009fda:	611a      	str	r2, [r3, #16]
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8009fdc:	695a      	ldr	r2, [r3, #20]
 8009fde:	400a      	ands	r2, r1
  tmp = (hltdc->Init.TotalWidth << 16U);
 8009fe0:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8009fe2:	615a      	str	r2, [r3, #20]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8009fe4:	695a      	ldr	r2, [r3, #20]
 8009fe6:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8009fea:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8009fec:	430a      	orrs	r2, r1
 8009fee:	615a      	str	r2, [r3, #20]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8009ff0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8009ff2:	f894 0035 	ldrb.w	r0, [r4, #53]	@ 0x35
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8009ff6:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8009ffa:	f894 1036 	ldrb.w	r1, [r4, #54]	@ 0x36
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8009ffe:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 800a000:	6add      	ldr	r5, [r3, #44]	@ 0x2c
 800a002:	f894 2034 	ldrb.w	r2, [r4, #52]	@ 0x34
 800a006:	432a      	orrs	r2, r5
 800a008:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 800a00c:	2000      	movs	r0, #0
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 800a00e:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800a012:	62da      	str	r2, [r3, #44]	@ 0x2c
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 800a014:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a016:	f042 0206 	orr.w	r2, r2, #6
 800a01a:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_LTDC_ENABLE(hltdc);
 800a01c:	699a      	ldr	r2, [r3, #24]
 800a01e:	f042 0201 	orr.w	r2, r2, #1
 800a022:	619a      	str	r2, [r3, #24]
  hltdc->State = HAL_LTDC_STATE_READY;
 800a024:	2301      	movs	r3, #1
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 800a026:	f8c4 00a4 	str.w	r0, [r4, #164]	@ 0xa4
  hltdc->State = HAL_LTDC_STATE_READY;
 800a02a:	f884 30a1 	strb.w	r3, [r4, #161]	@ 0xa1
}
 800a02e:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800a030:	2001      	movs	r0, #1
 800a032:	e7fc      	b.n	800a02e <HAL_LTDC_Init+0xce>
 800a034:	f000f800 	.word	0xf000f800

0800a038 <HAL_LTDC_ErrorCallback>:
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
 800a038:	4770      	bx	lr

0800a03a <HAL_LTDC_LineEventCallback>:
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
 800a03a:	4770      	bx	lr

0800a03c <HAL_LTDC_ReloadEventCallback>:
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
 800a03c:	4770      	bx	lr

0800a03e <HAL_LTDC_IRQHandler>:
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 800a03e:	6803      	ldr	r3, [r0, #0]
{
 800a040:	b570      	push	{r4, r5, r6, lr}
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 800a042:	6b9e      	ldr	r6, [r3, #56]	@ 0x38
{
 800a044:	4604      	mov	r4, r0
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 800a046:	6b5d      	ldr	r5, [r3, #52]	@ 0x34
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 800a048:	0772      	lsls	r2, r6, #29
 800a04a:	d514      	bpl.n	800a076 <HAL_LTDC_IRQHandler+0x38>
 800a04c:	0769      	lsls	r1, r5, #29
 800a04e:	d512      	bpl.n	800a076 <HAL_LTDC_IRQHandler+0x38>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 800a050:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a052:	f022 0204 	bic.w	r2, r2, #4
 800a056:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 800a058:	2204      	movs	r2, #4
 800a05a:	63da      	str	r2, [r3, #60]	@ 0x3c
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 800a05c:	f8d0 30a4 	ldr.w	r3, [r0, #164]	@ 0xa4
 800a060:	f043 0301 	orr.w	r3, r3, #1
 800a064:	f8c0 30a4 	str.w	r3, [r0, #164]	@ 0xa4
    __HAL_UNLOCK(hltdc);
 800a068:	2300      	movs	r3, #0
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800a06a:	f880 20a1 	strb.w	r2, [r0, #161]	@ 0xa1
    __HAL_UNLOCK(hltdc);
 800a06e:	f880 30a0 	strb.w	r3, [r0, #160]	@ 0xa0
    HAL_LTDC_ErrorCallback(hltdc);
 800a072:	f7ff ffe1 	bl	800a038 <HAL_LTDC_ErrorCallback>
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 800a076:	07b2      	lsls	r2, r6, #30
 800a078:	d516      	bpl.n	800a0a8 <HAL_LTDC_IRQHandler+0x6a>
 800a07a:	07ab      	lsls	r3, r5, #30
 800a07c:	d514      	bpl.n	800a0a8 <HAL_LTDC_IRQHandler+0x6a>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 800a07e:	6823      	ldr	r3, [r4, #0]
    HAL_LTDC_ErrorCallback(hltdc);
 800a080:	4620      	mov	r0, r4
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 800a082:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a084:	f022 0202 	bic.w	r2, r2, #2
 800a088:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 800a08a:	2202      	movs	r2, #2
 800a08c:	63da      	str	r2, [r3, #60]	@ 0x3c
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 800a08e:	f8d4 30a4 	ldr.w	r3, [r4, #164]	@ 0xa4
 800a092:	4313      	orrs	r3, r2
 800a094:	f8c4 30a4 	str.w	r3, [r4, #164]	@ 0xa4
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800a098:	2304      	movs	r3, #4
 800a09a:	f884 30a1 	strb.w	r3, [r4, #161]	@ 0xa1
    __HAL_UNLOCK(hltdc);
 800a09e:	2300      	movs	r3, #0
 800a0a0:	f884 30a0 	strb.w	r3, [r4, #160]	@ 0xa0
    HAL_LTDC_ErrorCallback(hltdc);
 800a0a4:	f7ff ffc8 	bl	800a038 <HAL_LTDC_ErrorCallback>
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 800a0a8:	07f0      	lsls	r0, r6, #31
 800a0aa:	d510      	bpl.n	800a0ce <HAL_LTDC_IRQHandler+0x90>
 800a0ac:	07e9      	lsls	r1, r5, #31
 800a0ae:	d50e      	bpl.n	800a0ce <HAL_LTDC_IRQHandler+0x90>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 800a0b0:	6823      	ldr	r3, [r4, #0]
    HAL_LTDC_LineEventCallback(hltdc);
 800a0b2:	4620      	mov	r0, r4
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 800a0b4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a0b6:	f022 0201 	bic.w	r2, r2, #1
 800a0ba:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 800a0bc:	2201      	movs	r2, #1
 800a0be:	63da      	str	r2, [r3, #60]	@ 0x3c
    __HAL_UNLOCK(hltdc);
 800a0c0:	2300      	movs	r3, #0
    hltdc->State = HAL_LTDC_STATE_READY;
 800a0c2:	f884 20a1 	strb.w	r2, [r4, #161]	@ 0xa1
    __HAL_UNLOCK(hltdc);
 800a0c6:	f884 30a0 	strb.w	r3, [r4, #160]	@ 0xa0
    HAL_LTDC_LineEventCallback(hltdc);
 800a0ca:	f7ff ffb6 	bl	800a03a <HAL_LTDC_LineEventCallback>
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 800a0ce:	0732      	lsls	r2, r6, #28
 800a0d0:	d511      	bpl.n	800a0f6 <HAL_LTDC_IRQHandler+0xb8>
 800a0d2:	072b      	lsls	r3, r5, #28
 800a0d4:	d50f      	bpl.n	800a0f6 <HAL_LTDC_IRQHandler+0xb8>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 800a0d6:	6823      	ldr	r3, [r4, #0]
    HAL_LTDC_ReloadEventCallback(hltdc);
 800a0d8:	4620      	mov	r0, r4
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 800a0da:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a0dc:	f022 0208 	bic.w	r2, r2, #8
 800a0e0:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 800a0e2:	2208      	movs	r2, #8
 800a0e4:	63da      	str	r2, [r3, #60]	@ 0x3c
    hltdc->State = HAL_LTDC_STATE_READY;
 800a0e6:	2301      	movs	r3, #1
 800a0e8:	f884 30a1 	strb.w	r3, [r4, #161]	@ 0xa1
    __HAL_UNLOCK(hltdc);
 800a0ec:	2300      	movs	r3, #0
 800a0ee:	f884 30a0 	strb.w	r3, [r4, #160]	@ 0xa0
    HAL_LTDC_ReloadEventCallback(hltdc);
 800a0f2:	f7ff ffa3 	bl	800a03c <HAL_LTDC_ReloadEventCallback>
}
 800a0f6:	bd70      	pop	{r4, r5, r6, pc}

0800a0f8 <HAL_LTDC_ConfigLayer>:
{
 800a0f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(hltdc);
 800a0fc:	f890 30a0 	ldrb.w	r3, [r0, #160]	@ 0xa0
{
 800a100:	4606      	mov	r6, r0
 800a102:	460f      	mov	r7, r1
 800a104:	4694      	mov	ip, r2
  __HAL_LOCK(hltdc);
 800a106:	2b01      	cmp	r3, #1
 800a108:	f04f 0002 	mov.w	r0, #2
 800a10c:	d01f      	beq.n	800a14e <HAL_LTDC_ConfigLayer+0x56>
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800a10e:	2434      	movs	r4, #52	@ 0x34
  __HAL_LOCK(hltdc);
 800a110:	f04f 0801 	mov.w	r8, #1
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800a114:	460d      	mov	r5, r1
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800a116:	f886 00a1 	strb.w	r0, [r6, #161]	@ 0xa1
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800a11a:	fb04 6402 	mla	r4, r4, r2, r6
  __HAL_LOCK(hltdc);
 800a11e:	f886 80a0 	strb.w	r8, [r6, #160]	@ 0xa0
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800a122:	3438      	adds	r4, #56	@ 0x38
 800a124:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a126:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a128:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a12a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a12c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a12e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a130:	682b      	ldr	r3, [r5, #0]
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 800a132:	4630      	mov	r0, r6
 800a134:	4662      	mov	r2, ip
 800a136:	4639      	mov	r1, r7
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800a138:	6023      	str	r3, [r4, #0]
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 800a13a:	f7ff fe8a 	bl	8009e52 <LTDC_SetConfig>
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800a13e:	6833      	ldr	r3, [r6, #0]
  __HAL_UNLOCK(hltdc);
 800a140:	2000      	movs	r0, #0
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800a142:	f8c3 8024 	str.w	r8, [r3, #36]	@ 0x24
  hltdc->State  = HAL_LTDC_STATE_READY;
 800a146:	f886 80a1 	strb.w	r8, [r6, #161]	@ 0xa1
  __HAL_UNLOCK(hltdc);
 800a14a:	f886 00a0 	strb.w	r0, [r6, #160]	@ 0xa0
}
 800a14e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

0800a154 <HAL_LTDC_SetPitch>:
{
 800a154:	b530      	push	{r4, r5, lr}
  __HAL_LOCK(hltdc);
 800a156:	f890 30a0 	ldrb.w	r3, [r0, #160]	@ 0xa0
 800a15a:	2b01      	cmp	r3, #1
 800a15c:	f04f 0302 	mov.w	r3, #2
 800a160:	d02c      	beq.n	800a1bc <HAL_LTDC_SetPitch+0x68>
  pixelFormat = hltdc->LayerCfg[LayerIdx].PixelFormat;
 800a162:	2434      	movs	r4, #52	@ 0x34
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800a164:	f880 30a1 	strb.w	r3, [r0, #161]	@ 0xa1
  pixelFormat = hltdc->LayerCfg[LayerIdx].PixelFormat;
 800a168:	fb04 0402 	mla	r4, r4, r2, r0
 800a16c:	6ca4      	ldr	r4, [r4, #72]	@ 0x48
  if (pixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800a16e:	b33c      	cbz	r4, 800a1c0 <HAL_LTDC_SetPitch+0x6c>
  else if (pixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 800a170:	2c01      	cmp	r4, #1
 800a172:	d027      	beq.n	800a1c4 <HAL_LTDC_SetPitch+0x70>
  else if ((pixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800a174:	1ea5      	subs	r5, r4, #2
 800a176:	429d      	cmp	r5, r3
 800a178:	d902      	bls.n	800a180 <HAL_LTDC_SetPitch+0x2c>
    tmp = 2U;
 800a17a:	2c07      	cmp	r4, #7
 800a17c:	bf18      	it	ne
 800a17e:	2301      	movne	r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR &= ~LTDC_LxCFBLR_CFBP;
 800a180:	01d2      	lsls	r2, r2, #7
 800a182:	6804      	ldr	r4, [r0, #0]
  pitchUpdate = ((LinePitchInPixels * tmp) << 16U);
 800a184:	434b      	muls	r3, r1
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR &= ~LTDC_LxCFBLR_CFBP;
 800a186:	3284      	adds	r2, #132	@ 0x84
 800a188:	4422      	add	r2, r4
 800a18a:	6ad4      	ldr	r4, [r2, #44]	@ 0x2c
 800a18c:	f024 54ff 	bic.w	r4, r4, #534773760	@ 0x1fe00000
 800a190:	f424 14f8 	bic.w	r4, r4, #2031616	@ 0x1f0000
 800a194:	62d4      	str	r4, [r2, #44]	@ 0x2c
  LTDC->SRCR |= LTDC_SRCR_IMR;
 800a196:	4c0c      	ldr	r4, [pc, #48]	@ (800a1c8 <HAL_LTDC_SetPitch+0x74>)
 800a198:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 800a19a:	f045 0501 	orr.w	r5, r5, #1
 800a19e:	6265      	str	r5, [r4, #36]	@ 0x24
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR |= pitchUpdate;
 800a1a0:	6ad5      	ldr	r5, [r2, #44]	@ 0x2c
 800a1a2:	ea45 4303 	orr.w	r3, r5, r3, lsl #16
 800a1a6:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC->SRCR |= LTDC_SRCR_IMR;
 800a1a8:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800a1aa:	f043 0301 	orr.w	r3, r3, #1
 800a1ae:	6263      	str	r3, [r4, #36]	@ 0x24
  hltdc->State = HAL_LTDC_STATE_READY;
 800a1b0:	2301      	movs	r3, #1
 800a1b2:	f880 30a1 	strb.w	r3, [r0, #161]	@ 0xa1
  __HAL_UNLOCK(hltdc);
 800a1b6:	2300      	movs	r3, #0
 800a1b8:	f880 30a0 	strb.w	r3, [r0, #160]	@ 0xa0
}
 800a1bc:	4618      	mov	r0, r3
 800a1be:	bd30      	pop	{r4, r5, pc}
    tmp = 4U;
 800a1c0:	2304      	movs	r3, #4
 800a1c2:	e7dd      	b.n	800a180 <HAL_LTDC_SetPitch+0x2c>
    tmp = 3U;
 800a1c4:	2303      	movs	r3, #3
 800a1c6:	e7db      	b.n	800a180 <HAL_LTDC_SetPitch+0x2c>
 800a1c8:	50001000 	.word	0x50001000

0800a1cc <MDMA_SetConfig>:
  * @param  BlockDataLength : The length of a block transfer in bytes
  * @param  BlockCount: The number of blocks to be transferred
  * @retval HAL status
  */
static void MDMA_SetConfig(MDMA_HandleTypeDef *hmdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t BlockDataLength, uint32_t BlockCount)
{
 800a1cc:	b530      	push	{r4, r5, lr}
  uint32_t addressMask;

  /* Configure the MDMA Channel data length */
  MODIFY_REG(hmdma->Instance->CBNDTR ,MDMA_CBNDTR_BNDT, (BlockDataLength & MDMA_CBNDTR_BNDT));
 800a1ce:	6804      	ldr	r4, [r0, #0]
 800a1d0:	f3c3 0310 	ubfx	r3, r3, #0, #17

  /* Configure MDMA Channel Source address */
  hmdma->Instance->CSAR = SrcAddress;

  addressMask = SrcAddress & 0xFF000000U;
  if((addressMask == 0x20000000U) || (addressMask == 0x00000000U))
 800a1d4:	f011 4f5f 	tst.w	r1, #3741319168	@ 0xdf000000
  MODIFY_REG(hmdma->Instance->CBNDTR ,MDMA_CBNDTR_BNDT, (BlockDataLength & MDMA_CBNDTR_BNDT));
 800a1d8:	6965      	ldr	r5, [r4, #20]
 800a1da:	ea4f 4555 	mov.w	r5, r5, lsr #17
 800a1de:	ea4f 4545 	mov.w	r5, r5, lsl #17
 800a1e2:	ea45 0503 	orr.w	r5, r5, r3
 800a1e6:	6165      	str	r5, [r4, #20]
  MODIFY_REG(hmdma->Instance->CBNDTR , MDMA_CBNDTR_BRC , ((BlockCount - 1U) << MDMA_CBNDTR_BRC_Pos) & MDMA_CBNDTR_BRC);
 800a1e8:	9d03      	ldr	r5, [sp, #12]
 800a1ea:	6963      	ldr	r3, [r4, #20]
 800a1ec:	f105 35ff 	add.w	r5, r5, #4294967295
 800a1f0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a1f4:	ea43 5305 	orr.w	r3, r3, r5, lsl #20
 800a1f8:	6163      	str	r3, [r4, #20]
  __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_CISR_BRTIF | MDMA_CISR_BTIF | MDMA_CISR_TCIF);
 800a1fa:	f04f 031f 	mov.w	r3, #31
 800a1fe:	6063      	str	r3, [r4, #4]
  hmdma->Instance->CDAR = DstAddress;
 800a200:	61e2      	str	r2, [r4, #28]
  hmdma->Instance->CSAR = SrcAddress;
 800a202:	61a1      	str	r1, [r4, #24]
  {
    /*The AHBSbus is used as source (read operation) on channel x */
    hmdma->Instance->CTBR |= MDMA_CTBR_SBUS;
 800a204:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800a206:	bf0c      	ite	eq
 800a208:	f443 3380 	orreq.w	r3, r3, #65536	@ 0x10000
  }
  else
  {
    /*The AXI bus is used as source (read operation) on channel x */
    hmdma->Instance->CTBR &= (~MDMA_CTBR_SBUS);
 800a20c:	f423 3380 	bicne.w	r3, r3, #65536	@ 0x10000
  }

  addressMask = DstAddress & 0xFF000000U;
  if((addressMask == 0x20000000U) || (addressMask == 0x00000000U))
 800a210:	f012 4f5f 	tst.w	r2, #3741319168	@ 0xdf000000
    hmdma->Instance->CTBR &= (~MDMA_CTBR_SBUS);
 800a214:	62a3      	str	r3, [r4, #40]	@ 0x28
  {
    /*The AHB bus is used as destination (write operation) on channel x */
    hmdma->Instance->CTBR |= MDMA_CTBR_DBUS;
 800a216:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800a218:	bf0c      	ite	eq
 800a21a:	f443 3300 	orreq.w	r3, r3, #131072	@ 0x20000
  }
  else
  {
    /*The AXI bus is used as destination (write operation) on channel x */
    hmdma->Instance->CTBR &= (~MDMA_CTBR_DBUS);
 800a21e:	f423 3300 	bicne.w	r3, r3, #131072	@ 0x20000
 800a222:	62a3      	str	r3, [r4, #40]	@ 0x28
  }

  /* Set the linked list register to the first node of the list */
  hmdma->Instance->CLAR = (uint32_t)hmdma->FirstLinkedListNodeAddress;
 800a224:	6dc3      	ldr	r3, [r0, #92]	@ 0x5c
 800a226:	6263      	str	r3, [r4, #36]	@ 0x24
}
 800a228:	bd30      	pop	{r4, r5, pc}

0800a22a <HAL_MDMA_Init>:
{
 800a22a:	b538      	push	{r3, r4, r5, lr}
 800a22c:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800a22e:	f7fd fb15 	bl	800785c <HAL_GetTick>
 800a232:	4605      	mov	r5, r0
  if(hmdma == NULL)
 800a234:	2c00      	cmp	r4, #0
 800a236:	d061      	beq.n	800a2fc <HAL_MDMA_Init+0xd2>
  __HAL_UNLOCK(hmdma);
 800a238:	2300      	movs	r3, #0
  __HAL_MDMA_DISABLE(hmdma);
 800a23a:	6822      	ldr	r2, [r4, #0]
  __HAL_UNLOCK(hmdma);
 800a23c:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
  hmdma->State = HAL_MDMA_STATE_BUSY;
 800a240:	2302      	movs	r3, #2
 800a242:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  __HAL_MDMA_DISABLE(hmdma);
 800a246:	68d3      	ldr	r3, [r2, #12]
 800a248:	f023 0301 	bic.w	r3, r3, #1
 800a24c:	60d3      	str	r3, [r2, #12]
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 800a24e:	6823      	ldr	r3, [r4, #0]
 800a250:	68da      	ldr	r2, [r3, #12]
 800a252:	07d2      	lsls	r2, r2, #31
 800a254:	d448      	bmi.n	800a2e8 <HAL_MDMA_Init+0xbe>
static void MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
  uint32_t blockoffset;

  /* Prepare the MDMA Channel configuration */
  hmdma->Instance->CCR = hmdma->Init.Priority  | hmdma->Init.Endianness;
 800a256:	e9d4 2103 	ldrd	r2, r1, [r4, #12]
 800a25a:	430a      	orrs	r2, r1
 800a25c:	60da      	str	r2, [r3, #12]
  /* Write new CTCR Register value */
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
                           hmdma->Init.DestBurst                                   | \
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
 800a25e:	e9d4 2105 	ldrd	r2, r1, [r4, #20]
 800a262:	430a      	orrs	r2, r1
 800a264:	69e1      	ldr	r1, [r4, #28]
 800a266:	430a      	orrs	r2, r1
 800a268:	6a21      	ldr	r1, [r4, #32]
 800a26a:	430a      	orrs	r2, r1
 800a26c:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 800a26e:	430a      	orrs	r2, r1
 800a270:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800a272:	430a      	orrs	r2, r1
 800a274:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800a276:	430a      	orrs	r2, r1
 800a278:	68a1      	ldr	r1, [r4, #8]
 800a27a:	430a      	orrs	r2, r1
 800a27c:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 800a27e:	3901      	subs	r1, #1
 800a280:	ea42 4281 	orr.w	r2, r2, r1, lsl #18
                           hmdma->Init.TransferTriggerMode;

  /* If SW request set the CTCR register to SW Request Mode */
  if(hmdma->Init.Request == MDMA_REQUEST_SW)
 800a284:	6861      	ldr	r1, [r4, #4]
 800a286:	f1b1 4f80 	cmp.w	r1, #1073741824	@ 0x40000000
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 800a28a:	611a      	str	r2, [r3, #16]
  if(hmdma->Init.Request == MDMA_REQUEST_SW)
 800a28c:	d103      	bne.n	800a296 <HAL_MDMA_Init+0x6c>
    -If the request is done by SW : BWM could be set to 1 or 0.
    -If the request is done by a peripheral :
    If mask address not set (0) => BWM must be set to 0
    If mask address set (different than 0) => BWM could be set to 1 or 0
    */
    hmdma->Instance->CTCR |= (MDMA_CTCR_SWRM | MDMA_CTCR_BWM);
 800a28e:	691a      	ldr	r2, [r3, #16]
 800a290:	f042 4240 	orr.w	r2, r2, #3221225472	@ 0xc0000000
 800a294:	611a      	str	r2, [r3, #16]
  }

  /* Reset CBNDTR Register */
  hmdma->Instance->CBNDTR = 0;
 800a296:	2200      	movs	r2, #0
 800a298:	615a      	str	r2, [r3, #20]

  /* if block source address offset is negative set the Block Repeat Source address Update Mode to decrement */
  if(hmdma->Init.SourceBlockAddressOffset < 0)
 800a29a:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 800a29c:	2a00      	cmp	r2, #0
 800a29e:	da04      	bge.n	800a2aa <HAL_MDMA_Init+0x80>
  {
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRSUM;
 800a2a0:	6958      	ldr	r0, [r3, #20]
    /* Write new CBRUR Register value : source repeat block offset */
    blockoffset = (uint32_t)(- hmdma->Init.SourceBlockAddressOffset);
 800a2a2:	4252      	negs	r2, r2
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRSUM;
 800a2a4:	f440 2080 	orr.w	r0, r0, #262144	@ 0x40000
 800a2a8:	6158      	str	r0, [r3, #20]
    hmdma->Instance->CBRUR = (blockoffset & 0x0000FFFFU);
  }
  else
  {
    /* Write new CBRUR Register value : source repeat block offset */
    hmdma->Instance->CBRUR = (((uint32_t)hmdma->Init.SourceBlockAddressOffset) & 0x0000FFFFU);
 800a2aa:	b292      	uxth	r2, r2
 800a2ac:	621a      	str	r2, [r3, #32]
  }

  /* If block destination address offset is negative set the Block Repeat destination address Update Mode to decrement */
  if(hmdma->Init.DestBlockAddressOffset < 0)
 800a2ae:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800a2b0:	2a00      	cmp	r2, #0
 800a2b2:	da25      	bge.n	800a300 <HAL_MDMA_Init+0xd6>
  {
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRDUM;
 800a2b4:	6958      	ldr	r0, [r3, #20]
    /* Write new CBRUR Register value : destination repeat block offset */
    blockoffset = (uint32_t)(- hmdma->Init.DestBlockAddressOffset);
 800a2b6:	4252      	negs	r2, r2
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRDUM;
 800a2b8:	f440 2000 	orr.w	r0, r0, #524288	@ 0x80000
 800a2bc:	6158      	str	r0, [r3, #20]
    hmdma->Instance->CBRUR |= ((blockoffset & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 800a2be:	6a18      	ldr	r0, [r3, #32]
  }
  else
  {
    /*write new CBRUR Register value : destination repeat block offset */
    hmdma->Instance->CBRUR |= ((((uint32_t)hmdma->Init.DestBlockAddressOffset) & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 800a2c0:	ea40 4202 	orr.w	r2, r0, r2, lsl #16
  }

  /* if HW request set the HW request and the requet CleraMask and ClearData MaskData, */
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
 800a2c4:	f1b1 4f80 	cmp.w	r1, #1073741824	@ 0x40000000
    hmdma->Instance->CBRUR |= ((((uint32_t)hmdma->Init.DestBlockAddressOffset) & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 800a2c8:	621a      	str	r2, [r3, #32]
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
 800a2ca:	f04f 0200 	mov.w	r2, #0
 800a2ce:	d019      	beq.n	800a304 <HAL_MDMA_Init+0xda>
  {
    /* Set the HW request in CTRB register  */
    hmdma->Instance->CTBR = hmdma->Init.Request & MDMA_CTBR_TSEL;
 800a2d0:	b2c9      	uxtb	r1, r1
 800a2d2:	6299      	str	r1, [r3, #40]	@ 0x28
  {
    hmdma->Instance->CTBR = 0;
  }

  /* Write Link Address Register */
  hmdma->Instance->CLAR =  0;
 800a2d4:	625a      	str	r2, [r3, #36]	@ 0x24
  hmdma->State = HAL_MDMA_STATE_READY;
 800a2d6:	2301      	movs	r3, #1
  hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 800a2d8:	66a2      	str	r2, [r4, #104]	@ 0x68
  return HAL_OK;
 800a2da:	2000      	movs	r0, #0
  hmdma->LinkedListNodeCounter  = 0;
 800a2dc:	6662      	str	r2, [r4, #100]	@ 0x64
  hmdma->State = HAL_MDMA_STATE_READY;
 800a2de:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  hmdma->LastLinkedListNodeAddress   = 0;
 800a2e2:	e9c4 2217 	strd	r2, r2, [r4, #92]	@ 0x5c
  return HAL_OK;
 800a2e6:	e00a      	b.n	800a2fe <HAL_MDMA_Init+0xd4>
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_MDMA_ABORT)
 800a2e8:	f7fd fab8 	bl	800785c <HAL_GetTick>
 800a2ec:	1b40      	subs	r0, r0, r5
 800a2ee:	2805      	cmp	r0, #5
 800a2f0:	d9ad      	bls.n	800a24e <HAL_MDMA_Init+0x24>
      hmdma->ErrorCode = HAL_MDMA_ERROR_TIMEOUT;
 800a2f2:	2340      	movs	r3, #64	@ 0x40
 800a2f4:	66a3      	str	r3, [r4, #104]	@ 0x68
      hmdma->State = HAL_MDMA_STATE_ERROR;
 800a2f6:	2303      	movs	r3, #3
 800a2f8:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
    return HAL_ERROR;
 800a2fc:	2001      	movs	r0, #1
}
 800a2fe:	bd38      	pop	{r3, r4, r5, pc}
    hmdma->Instance->CBRUR |= ((((uint32_t)hmdma->Init.DestBlockAddressOffset) & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 800a300:	6a18      	ldr	r0, [r3, #32]
 800a302:	e7dd      	b.n	800a2c0 <HAL_MDMA_Init+0x96>
    hmdma->Instance->CTBR = 0;
 800a304:	629a      	str	r2, [r3, #40]	@ 0x28
 800a306:	e7e5      	b.n	800a2d4 <HAL_MDMA_Init+0xaa>

0800a308 <HAL_MDMA_DeInit>:
  if(hmdma == NULL)
 800a308:	b1d8      	cbz	r0, 800a342 <HAL_MDMA_DeInit+0x3a>
  __HAL_MDMA_DISABLE(hmdma);
 800a30a:	6802      	ldr	r2, [r0, #0]
  __HAL_MDMA_CLEAR_FLAG(hmdma,(MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_FLAG_BRT | MDMA_FLAG_BT | MDMA_FLAG_BFTC));
 800a30c:	211f      	movs	r1, #31
  __HAL_MDMA_DISABLE(hmdma);
 800a30e:	68d3      	ldr	r3, [r2, #12]
 800a310:	f023 0301 	bic.w	r3, r3, #1
 800a314:	60d3      	str	r3, [r2, #12]
  hmdma->Instance->CCR  = 0;
 800a316:	2300      	movs	r3, #0
 800a318:	60d3      	str	r3, [r2, #12]
  hmdma->Instance->CTCR = 0;
 800a31a:	6113      	str	r3, [r2, #16]
  hmdma->Instance->CBNDTR = 0;
 800a31c:	6153      	str	r3, [r2, #20]
  hmdma->Instance->CSAR = 0;
 800a31e:	6193      	str	r3, [r2, #24]
  hmdma->Instance->CDAR = 0;
 800a320:	61d3      	str	r3, [r2, #28]
  hmdma->Instance->CBRUR = 0;
 800a322:	6213      	str	r3, [r2, #32]
  hmdma->Instance->CLAR = 0;
 800a324:	6253      	str	r3, [r2, #36]	@ 0x24
  hmdma->Instance->CTBR = 0;
 800a326:	6293      	str	r3, [r2, #40]	@ 0x28
  hmdma->Instance->CMAR = 0;
 800a328:	6313      	str	r3, [r2, #48]	@ 0x30
  hmdma->Instance->CMDR = 0;
 800a32a:	6353      	str	r3, [r2, #52]	@ 0x34
  __HAL_MDMA_CLEAR_FLAG(hmdma,(MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_FLAG_BRT | MDMA_FLAG_BT | MDMA_FLAG_BFTC));
 800a32c:	6051      	str	r1, [r2, #4]
  hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 800a32e:	6683      	str	r3, [r0, #104]	@ 0x68
  hmdma->LinkedListNodeCounter  = 0;
 800a330:	6643      	str	r3, [r0, #100]	@ 0x64
  hmdma->State = HAL_MDMA_STATE_RESET;
 800a332:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
  __HAL_UNLOCK(hmdma);
 800a336:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
  hmdma->LastLinkedListNodeAddress   = 0;
 800a33a:	e9c0 3317 	strd	r3, r3, [r0, #92]	@ 0x5c
  return HAL_OK;
 800a33e:	4618      	mov	r0, r3
 800a340:	4770      	bx	lr
    return HAL_ERROR;
 800a342:	2001      	movs	r0, #1
}
 800a344:	4770      	bx	lr

0800a346 <HAL_MDMA_ConfigPostRequestMask>:
  if(hmdma == NULL)
 800a346:	4603      	mov	r3, r0
{
 800a348:	b530      	push	{r4, r5, lr}
  if(hmdma == NULL)
 800a34a:	b300      	cbz	r0, 800a38e <HAL_MDMA_ConfigPostRequestMask+0x48>
  __HAL_LOCK(hmdma);
 800a34c:	f890 003c 	ldrb.w	r0, [r0, #60]	@ 0x3c
 800a350:	2801      	cmp	r0, #1
 800a352:	d01e      	beq.n	800a392 <HAL_MDMA_ConfigPostRequestMask+0x4c>
 800a354:	2401      	movs	r4, #1
  if(HAL_MDMA_STATE_READY == hmdma->State)
 800a356:	f893 503d 	ldrb.w	r5, [r3, #61]	@ 0x3d
 800a35a:	42a5      	cmp	r5, r4
 800a35c:	b2e8      	uxtb	r0, r5
  __HAL_LOCK(hmdma);
 800a35e:	f883 403c 	strb.w	r4, [r3, #60]	@ 0x3c
  if(HAL_MDMA_STATE_READY == hmdma->State)
 800a362:	d112      	bne.n	800a38a <HAL_MDMA_ConfigPostRequestMask+0x44>
    if((hmdma->Instance->CTCR & MDMA_CTCR_SWRM) == 0U)
 800a364:	681c      	ldr	r4, [r3, #0]
 800a366:	6925      	ldr	r5, [r4, #16]
 800a368:	006d      	lsls	r5, r5, #1
 800a36a:	d407      	bmi.n	800a37c <HAL_MDMA_ConfigPostRequestMask+0x36>
      hmdma->Instance->CMAR = MaskAddress;
 800a36c:	6321      	str	r1, [r4, #48]	@ 0x30
      hmdma->Instance->CMDR = MaskData;
 800a36e:	6362      	str	r2, [r4, #52]	@ 0x34
        hmdma->Instance->CTCR &=  ~MDMA_CTCR_BWM;
 800a370:	6922      	ldr	r2, [r4, #16]
      if(MaskAddress == 0U)
 800a372:	b939      	cbnz	r1, 800a384 <HAL_MDMA_ConfigPostRequestMask+0x3e>
        hmdma->Instance->CTCR &=  ~MDMA_CTCR_BWM;
 800a374:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
  HAL_StatusTypeDef  status = HAL_OK;
 800a378:	2000      	movs	r0, #0
        hmdma->Instance->CTCR &=  ~MDMA_CTCR_BWM;
 800a37a:	6122      	str	r2, [r4, #16]
  __HAL_UNLOCK(hmdma);
 800a37c:	2200      	movs	r2, #0
 800a37e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 800a382:	bd30      	pop	{r4, r5, pc}
        hmdma->Instance->CTCR |=  MDMA_CTCR_BWM;
 800a384:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800a388:	e7f6      	b.n	800a378 <HAL_MDMA_ConfigPostRequestMask+0x32>
      status =  HAL_ERROR;
 800a38a:	4620      	mov	r0, r4
 800a38c:	e7f6      	b.n	800a37c <HAL_MDMA_ConfigPostRequestMask+0x36>
    return HAL_ERROR;
 800a38e:	2001      	movs	r0, #1
 800a390:	e7f7      	b.n	800a382 <HAL_MDMA_ConfigPostRequestMask+0x3c>
  __HAL_LOCK(hmdma);
 800a392:	2002      	movs	r0, #2
 800a394:	e7f5      	b.n	800a382 <HAL_MDMA_ConfigPostRequestMask+0x3c>

0800a396 <HAL_MDMA_Start_IT>:
{
 800a396:	b573      	push	{r0, r1, r4, r5, r6, lr}
  if(hmdma == NULL)
 800a398:	4604      	mov	r4, r0
 800a39a:	2800      	cmp	r0, #0
 800a39c:	d042      	beq.n	800a424 <HAL_MDMA_Start_IT+0x8e>
  __HAL_LOCK(hmdma);
 800a39e:	f890 503c 	ldrb.w	r5, [r0, #60]	@ 0x3c
 800a3a2:	2d01      	cmp	r5, #1
 800a3a4:	d03c      	beq.n	800a420 <HAL_MDMA_Start_IT+0x8a>
 800a3a6:	2501      	movs	r5, #1
 800a3a8:	f880 503c 	strb.w	r5, [r0, #60]	@ 0x3c
  if(HAL_MDMA_STATE_READY == hmdma->State)
 800a3ac:	f890 503d 	ldrb.w	r5, [r0, #61]	@ 0x3d
 800a3b0:	2d01      	cmp	r5, #1
 800a3b2:	f04f 0500 	mov.w	r5, #0
 800a3b6:	d131      	bne.n	800a41c <HAL_MDMA_Start_IT+0x86>
    hmdma->State = HAL_MDMA_STATE_BUSY;
 800a3b8:	2602      	movs	r6, #2
 800a3ba:	f880 603d 	strb.w	r6, [r0, #61]	@ 0x3d
    hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 800a3be:	6685      	str	r5, [r0, #104]	@ 0x68
    __HAL_MDMA_DISABLE(hmdma);
 800a3c0:	6805      	ldr	r5, [r0, #0]
 800a3c2:	68ee      	ldr	r6, [r5, #12]
 800a3c4:	f026 0601 	bic.w	r6, r6, #1
 800a3c8:	60ee      	str	r6, [r5, #12]
    MDMA_SetConfig(hmdma, SrcAddress, DstAddress, BlockDataLength, BlockCount);
 800a3ca:	9e06      	ldr	r6, [sp, #24]
 800a3cc:	9600      	str	r6, [sp, #0]
 800a3ce:	f7ff fefd 	bl	800a1cc <MDMA_SetConfig>
    __HAL_MDMA_ENABLE_IT(hmdma, (MDMA_IT_TE | MDMA_IT_CTC));
 800a3d2:	68eb      	ldr	r3, [r5, #12]
 800a3d4:	f043 0306 	orr.w	r3, r3, #6
 800a3d8:	60eb      	str	r3, [r5, #12]
    if(hmdma->XferBlockCpltCallback != NULL)
 800a3da:	6cc3      	ldr	r3, [r0, #76]	@ 0x4c
 800a3dc:	b11b      	cbz	r3, 800a3e6 <HAL_MDMA_Start_IT+0x50>
      __HAL_MDMA_ENABLE_IT(hmdma, MDMA_IT_BT);
 800a3de:	68eb      	ldr	r3, [r5, #12]
 800a3e0:	f043 0310 	orr.w	r3, r3, #16
 800a3e4:	60eb      	str	r3, [r5, #12]
    if(hmdma->XferRepeatBlockCpltCallback != NULL)
 800a3e6:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 800a3e8:	b11b      	cbz	r3, 800a3f2 <HAL_MDMA_Start_IT+0x5c>
      __HAL_MDMA_ENABLE_IT(hmdma, MDMA_IT_BRT);
 800a3ea:	68eb      	ldr	r3, [r5, #12]
 800a3ec:	f043 0308 	orr.w	r3, r3, #8
 800a3f0:	60eb      	str	r3, [r5, #12]
    if(hmdma->XferBufferCpltCallback != NULL)
 800a3f2:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 800a3f4:	b11b      	cbz	r3, 800a3fe <HAL_MDMA_Start_IT+0x68>
      __HAL_MDMA_ENABLE_IT(hmdma, MDMA_IT_BFTC);
 800a3f6:	68eb      	ldr	r3, [r5, #12]
 800a3f8:	f043 0320 	orr.w	r3, r3, #32
 800a3fc:	60eb      	str	r3, [r5, #12]
    __HAL_MDMA_ENABLE(hmdma);
 800a3fe:	68eb      	ldr	r3, [r5, #12]
 800a400:	f043 0301 	orr.w	r3, r3, #1
 800a404:	60eb      	str	r3, [r5, #12]
    if(hmdma->Init.Request == MDMA_REQUEST_SW)
 800a406:	6863      	ldr	r3, [r4, #4]
 800a408:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a40c:	d103      	bne.n	800a416 <HAL_MDMA_Start_IT+0x80>
      hmdma->Instance->CCR |=  MDMA_CCR_SWRQ;
 800a40e:	68eb      	ldr	r3, [r5, #12]
 800a410:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a414:	60eb      	str	r3, [r5, #12]
  return HAL_OK;
 800a416:	2000      	movs	r0, #0
}
 800a418:	b002      	add	sp, #8
 800a41a:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_UNLOCK(hmdma);
 800a41c:	f880 503c 	strb.w	r5, [r0, #60]	@ 0x3c
  __HAL_LOCK(hmdma);
 800a420:	2002      	movs	r0, #2
 800a422:	e7f9      	b.n	800a418 <HAL_MDMA_Start_IT+0x82>
    return HAL_ERROR;
 800a424:	2001      	movs	r0, #1
 800a426:	e7f7      	b.n	800a418 <HAL_MDMA_Start_IT+0x82>

0800a428 <HAL_MDMA_Abort_IT>:
  if(hmdma == NULL)
 800a428:	b128      	cbz	r0, 800a436 <HAL_MDMA_Abort_IT+0xe>
  if(HAL_MDMA_STATE_BUSY != hmdma->State)
 800a42a:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 800a42e:	2b02      	cmp	r3, #2
 800a430:	d003      	beq.n	800a43a <HAL_MDMA_Abort_IT+0x12>
    hmdma->ErrorCode = HAL_MDMA_ERROR_NO_XFER;
 800a432:	2380      	movs	r3, #128	@ 0x80
 800a434:	6683      	str	r3, [r0, #104]	@ 0x68
    return HAL_ERROR;
 800a436:	2001      	movs	r0, #1
 800a438:	4770      	bx	lr
    __HAL_MDMA_DISABLE(hmdma);
 800a43a:	6802      	ldr	r2, [r0, #0]
    hmdma->State = HAL_MDMA_STATE_ABORT;
 800a43c:	2304      	movs	r3, #4
 800a43e:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
  return HAL_OK;
 800a442:	2000      	movs	r0, #0
    __HAL_MDMA_DISABLE(hmdma);
 800a444:	68d3      	ldr	r3, [r2, #12]
 800a446:	f023 0301 	bic.w	r3, r3, #1
 800a44a:	60d3      	str	r3, [r2, #12]
}
 800a44c:	4770      	bx	lr
	...

0800a450 <HAL_MDMA_IRQHandler>:
  __IO uint32_t count = 0;
 800a450:	2300      	movs	r3, #0
{
 800a452:	b537      	push	{r0, r1, r2, r4, r5, lr}
  __IO uint32_t count = 0;
 800a454:	9301      	str	r3, [sp, #4]
  if((MDMA->GISR0 & generalIntFlag) == 0U)
 800a456:	f04f 42a4 	mov.w	r2, #1375731712	@ 0x52000000
  uint32_t timeout = SystemCoreClock / 9600U;
 800a45a:	4b58      	ldr	r3, [pc, #352]	@ (800a5bc <HAL_MDMA_IRQHandler+0x16c>)
{
 800a45c:	4604      	mov	r4, r0
  generalIntFlag =  1UL << ((((uint32_t)hmdma->Instance - (uint32_t)(MDMA_Channel0))/HAL_MDMA_CHANNEL_SIZE) & 0x1FU);
 800a45e:	2101      	movs	r1, #1
  uint32_t timeout = SystemCoreClock / 9600U;
 800a460:	681d      	ldr	r5, [r3, #0]
  generalIntFlag =  1UL << ((((uint32_t)hmdma->Instance - (uint32_t)(MDMA_Channel0))/HAL_MDMA_CHANNEL_SIZE) & 0x1FU);
 800a462:	6803      	ldr	r3, [r0, #0]
  if((MDMA->GISR0 & generalIntFlag) == 0U)
 800a464:	6810      	ldr	r0, [r2, #0]
  generalIntFlag =  1UL << ((((uint32_t)hmdma->Instance - (uint32_t)(MDMA_Channel0))/HAL_MDMA_CHANNEL_SIZE) & 0x1FU);
 800a466:	f103 422e 	add.w	r2, r3, #2919235584	@ 0xae000000
 800a46a:	3a40      	subs	r2, #64	@ 0x40
 800a46c:	f3c2 1284 	ubfx	r2, r2, #6, #5
 800a470:	fa01 f202 	lsl.w	r2, r1, r2
  if((MDMA->GISR0 & generalIntFlag) == 0U)
 800a474:	4202      	tst	r2, r0
 800a476:	f000 809e 	beq.w	800a5b6 <HAL_MDMA_IRQHandler+0x166>
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_TE) != 0U))
 800a47a:	681a      	ldr	r2, [r3, #0]
 800a47c:	07d1      	lsls	r1, r2, #31
 800a47e:	d529      	bpl.n	800a4d4 <HAL_MDMA_IRQHandler+0x84>
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_TE) != 0U)
 800a480:	68da      	ldr	r2, [r3, #12]
 800a482:	0792      	lsls	r2, r2, #30
 800a484:	d526      	bpl.n	800a4d4 <HAL_MDMA_IRQHandler+0x84>
      __HAL_MDMA_DISABLE_IT(hmdma, MDMA_IT_TE);
 800a486:	68da      	ldr	r2, [r3, #12]
 800a488:	f022 0202 	bic.w	r2, r2, #2
 800a48c:	60da      	str	r2, [r3, #12]
      errorFlag = hmdma->Instance->CESR;
 800a48e:	689a      	ldr	r2, [r3, #8]
        hmdma->ErrorCode |= HAL_MDMA_ERROR_READ_XFER;
 800a490:	6ea1      	ldr	r1, [r4, #104]	@ 0x68
      if((errorFlag & MDMA_CESR_TED) == 0U)
 800a492:	0610      	lsls	r0, r2, #24
        hmdma->ErrorCode |= HAL_MDMA_ERROR_READ_XFER;
 800a494:	bf54      	ite	pl
 800a496:	f041 0101 	orrpl.w	r1, r1, #1
        hmdma->ErrorCode |= HAL_MDMA_ERROR_WRITE_XFER;
 800a49a:	f041 0102 	orrmi.w	r1, r1, #2
 800a49e:	66a1      	str	r1, [r4, #104]	@ 0x68
      if((errorFlag & MDMA_CESR_TEMD) != 0U)
 800a4a0:	0591      	lsls	r1, r2, #22
 800a4a2:	d503      	bpl.n	800a4ac <HAL_MDMA_IRQHandler+0x5c>
        hmdma->ErrorCode |= HAL_MDMA_ERROR_MASK_DATA;
 800a4a4:	6ea1      	ldr	r1, [r4, #104]	@ 0x68
 800a4a6:	f041 0104 	orr.w	r1, r1, #4
 800a4aa:	66a1      	str	r1, [r4, #104]	@ 0x68
      if((errorFlag & MDMA_CESR_TELD) != 0U)
 800a4ac:	05d0      	lsls	r0, r2, #23
 800a4ae:	d503      	bpl.n	800a4b8 <HAL_MDMA_IRQHandler+0x68>
        hmdma->ErrorCode |= HAL_MDMA_ERROR_LINKED_LIST;
 800a4b0:	6ea1      	ldr	r1, [r4, #104]	@ 0x68
 800a4b2:	f041 0108 	orr.w	r1, r1, #8
 800a4b6:	66a1      	str	r1, [r4, #104]	@ 0x68
      if((errorFlag & MDMA_CESR_ASE) != 0U)
 800a4b8:	0551      	lsls	r1, r2, #21
 800a4ba:	d503      	bpl.n	800a4c4 <HAL_MDMA_IRQHandler+0x74>
        hmdma->ErrorCode |= HAL_MDMA_ERROR_ALIGNMENT;
 800a4bc:	6ea1      	ldr	r1, [r4, #104]	@ 0x68
 800a4be:	f041 0110 	orr.w	r1, r1, #16
 800a4c2:	66a1      	str	r1, [r4, #104]	@ 0x68
      if((errorFlag & MDMA_CESR_BSE) != 0U)
 800a4c4:	0512      	lsls	r2, r2, #20
 800a4c6:	d503      	bpl.n	800a4d0 <HAL_MDMA_IRQHandler+0x80>
        hmdma->ErrorCode |= HAL_MDMA_ERROR_BLOCK_SIZE;
 800a4c8:	6ea2      	ldr	r2, [r4, #104]	@ 0x68
 800a4ca:	f042 0220 	orr.w	r2, r2, #32
 800a4ce:	66a2      	str	r2, [r4, #104]	@ 0x68
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_TE);
 800a4d0:	2201      	movs	r2, #1
 800a4d2:	605a      	str	r2, [r3, #4]
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BFTC) != 0U))
 800a4d4:	681a      	ldr	r2, [r3, #0]
 800a4d6:	06d0      	lsls	r0, r2, #27
 800a4d8:	d508      	bpl.n	800a4ec <HAL_MDMA_IRQHandler+0x9c>
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BFTC) != 0U)
 800a4da:	68da      	ldr	r2, [r3, #12]
 800a4dc:	0691      	lsls	r1, r2, #26
 800a4de:	d505      	bpl.n	800a4ec <HAL_MDMA_IRQHandler+0x9c>
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BFTC);
 800a4e0:	2210      	movs	r2, #16
 800a4e2:	605a      	str	r2, [r3, #4]
      if(hmdma->XferBufferCpltCallback != NULL)
 800a4e4:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 800a4e6:	b10b      	cbz	r3, 800a4ec <HAL_MDMA_IRQHandler+0x9c>
        hmdma->XferBufferCpltCallback(hmdma);
 800a4e8:	4620      	mov	r0, r4
 800a4ea:	4798      	blx	r3
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BT) != 0U))
 800a4ec:	6823      	ldr	r3, [r4, #0]
 800a4ee:	681a      	ldr	r2, [r3, #0]
 800a4f0:	0712      	lsls	r2, r2, #28
 800a4f2:	d508      	bpl.n	800a506 <HAL_MDMA_IRQHandler+0xb6>
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BT) != 0U)
 800a4f4:	68da      	ldr	r2, [r3, #12]
 800a4f6:	06d0      	lsls	r0, r2, #27
 800a4f8:	d505      	bpl.n	800a506 <HAL_MDMA_IRQHandler+0xb6>
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BT);
 800a4fa:	2208      	movs	r2, #8
 800a4fc:	605a      	str	r2, [r3, #4]
      if(hmdma->XferBlockCpltCallback != NULL)
 800a4fe:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 800a500:	b10b      	cbz	r3, 800a506 <HAL_MDMA_IRQHandler+0xb6>
        hmdma->XferBlockCpltCallback(hmdma);
 800a502:	4620      	mov	r0, r4
 800a504:	4798      	blx	r3
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BRT) != 0U))
 800a506:	6823      	ldr	r3, [r4, #0]
 800a508:	681a      	ldr	r2, [r3, #0]
 800a50a:	0751      	lsls	r1, r2, #29
 800a50c:	d508      	bpl.n	800a520 <HAL_MDMA_IRQHandler+0xd0>
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BRT) != 0U)
 800a50e:	68da      	ldr	r2, [r3, #12]
 800a510:	0712      	lsls	r2, r2, #28
 800a512:	d505      	bpl.n	800a520 <HAL_MDMA_IRQHandler+0xd0>
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BRT);
 800a514:	2204      	movs	r2, #4
 800a516:	605a      	str	r2, [r3, #4]
      if(hmdma->XferRepeatBlockCpltCallback != NULL)
 800a518:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 800a51a:	b10b      	cbz	r3, 800a520 <HAL_MDMA_IRQHandler+0xd0>
        hmdma->XferRepeatBlockCpltCallback(hmdma);
 800a51c:	4620      	mov	r0, r4
 800a51e:	4798      	blx	r3
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_CTC) != 0U))
 800a520:	6823      	ldr	r3, [r4, #0]
 800a522:	681a      	ldr	r2, [r3, #0]
 800a524:	0790      	lsls	r0, r2, #30
 800a526:	d524      	bpl.n	800a572 <HAL_MDMA_IRQHandler+0x122>
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_CTC) != 0U)
 800a528:	68da      	ldr	r2, [r3, #12]
 800a52a:	0751      	lsls	r1, r2, #29
 800a52c:	d521      	bpl.n	800a572 <HAL_MDMA_IRQHandler+0x122>
      __HAL_MDMA_DISABLE_IT(hmdma, (MDMA_IT_TE | MDMA_IT_CTC | MDMA_IT_BT | MDMA_IT_BRT | MDMA_IT_BFTC));
 800a52e:	68da      	ldr	r2, [r3, #12]
 800a530:	f022 023e 	bic.w	r2, r2, #62	@ 0x3e
 800a534:	60da      	str	r2, [r3, #12]
      if(HAL_MDMA_STATE_ABORT == hmdma->State)
 800a536:	f894 203d 	ldrb.w	r2, [r4, #61]	@ 0x3d
 800a53a:	2a04      	cmp	r2, #4
 800a53c:	f04f 0200 	mov.w	r2, #0
 800a540:	d10c      	bne.n	800a55c <HAL_MDMA_IRQHandler+0x10c>
        hmdma->State = HAL_MDMA_STATE_READY;
 800a542:	2301      	movs	r3, #1
        __HAL_UNLOCK(hmdma);
 800a544:	f884 203c 	strb.w	r2, [r4, #60]	@ 0x3c
        hmdma->State = HAL_MDMA_STATE_READY;
 800a548:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
        if(hmdma->XferAbortCallback != NULL)
 800a54c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
    if (hmdma->XferErrorCallback != NULL)
 800a54e:	2b00      	cmp	r3, #0
 800a550:	d031      	beq.n	800a5b6 <HAL_MDMA_IRQHandler+0x166>
      hmdma->XferErrorCallback(hmdma);
 800a552:	4620      	mov	r0, r4
}
 800a554:	b003      	add	sp, #12
 800a556:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
      hmdma->XferErrorCallback(hmdma);
 800a55a:	4718      	bx	r3
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_CTC);
 800a55c:	2102      	movs	r1, #2
 800a55e:	6059      	str	r1, [r3, #4]
      hmdma->State = HAL_MDMA_STATE_READY;
 800a560:	2301      	movs	r3, #1
      __HAL_UNLOCK(hmdma);
 800a562:	f884 203c 	strb.w	r2, [r4, #60]	@ 0x3c
      hmdma->State = HAL_MDMA_STATE_READY;
 800a566:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
      if(hmdma->XferCpltCallback != NULL)
 800a56a:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 800a56c:	b10b      	cbz	r3, 800a572 <HAL_MDMA_IRQHandler+0x122>
        hmdma->XferCpltCallback(hmdma);
 800a56e:	4620      	mov	r0, r4
 800a570:	4798      	blx	r3
  if(hmdma->ErrorCode != HAL_MDMA_ERROR_NONE)
 800a572:	6ea3      	ldr	r3, [r4, #104]	@ 0x68
 800a574:	b1fb      	cbz	r3, 800a5b6 <HAL_MDMA_IRQHandler+0x166>
  uint32_t timeout = SystemCoreClock / 9600U;
 800a576:	f44f 5316 	mov.w	r3, #9600	@ 0x2580
 800a57a:	fbb5 f5f3 	udiv	r5, r5, r3
    hmdma->State = HAL_MDMA_STATE_ABORT;
 800a57e:	2304      	movs	r3, #4
 800a580:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
    __HAL_MDMA_DISABLE(hmdma);
 800a584:	6823      	ldr	r3, [r4, #0]
 800a586:	68da      	ldr	r2, [r3, #12]
 800a588:	f022 0201 	bic.w	r2, r2, #1
 800a58c:	60da      	str	r2, [r3, #12]
      if (++count > timeout)
 800a58e:	9a01      	ldr	r2, [sp, #4]
 800a590:	3201      	adds	r2, #1
 800a592:	42aa      	cmp	r2, r5
 800a594:	9201      	str	r2, [sp, #4]
 800a596:	d802      	bhi.n	800a59e <HAL_MDMA_IRQHandler+0x14e>
    while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U);
 800a598:	68da      	ldr	r2, [r3, #12]
 800a59a:	07d2      	lsls	r2, r2, #31
 800a59c:	d4f7      	bmi.n	800a58e <HAL_MDMA_IRQHandler+0x13e>
    __HAL_UNLOCK(hmdma);
 800a59e:	2200      	movs	r2, #0
 800a5a0:	f884 203c 	strb.w	r2, [r4, #60]	@ 0x3c
    if((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 800a5a4:	68db      	ldr	r3, [r3, #12]
 800a5a6:	07db      	lsls	r3, r3, #31
      hmdma->State = HAL_MDMA_STATE_ERROR;
 800a5a8:	bf4c      	ite	mi
 800a5aa:	2303      	movmi	r3, #3
      hmdma->State = HAL_MDMA_STATE_READY;
 800a5ac:	2301      	movpl	r3, #1
 800a5ae:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
    if (hmdma->XferErrorCallback != NULL)
 800a5b2:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800a5b4:	e7cb      	b.n	800a54e <HAL_MDMA_IRQHandler+0xfe>
}
 800a5b6:	b003      	add	sp, #12
 800a5b8:	bd30      	pop	{r4, r5, pc}
 800a5ba:	bf00      	nop
 800a5bc:	2400006c 	.word	0x2400006c

0800a5c0 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800a5c0:	b570      	push	{r4, r5, r6, lr}

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 800a5c2:	4d1c      	ldr	r5, [pc, #112]	@ (800a634 <HAL_PWREx_ConfigSupply+0x74>)
{
 800a5c4:	4604      	mov	r4, r0
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 800a5c6:	68eb      	ldr	r3, [r5, #12]
 800a5c8:	f003 0307 	and.w	r3, r3, #7
 800a5cc:	2b06      	cmp	r3, #6
 800a5ce:	d006      	beq.n	800a5de <HAL_PWREx_ConfigSupply+0x1e>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800a5d0:	68e8      	ldr	r0, [r5, #12]
 800a5d2:	f000 003f 	and.w	r0, r0, #63	@ 0x3f
 800a5d6:	1b00      	subs	r0, r0, r4
 800a5d8:	bf18      	it	ne
 800a5da:	2001      	movne	r0, #1
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
}
 800a5dc:	bd70      	pop	{r4, r5, r6, pc}
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800a5de:	68eb      	ldr	r3, [r5, #12]
 800a5e0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800a5e4:	4303      	orrs	r3, r0
 800a5e6:	60eb      	str	r3, [r5, #12]
  tickstart = HAL_GetTick ();
 800a5e8:	f7fd f938 	bl	800785c <HAL_GetTick>
 800a5ec:	4606      	mov	r6, r0
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800a5ee:	686b      	ldr	r3, [r5, #4]
 800a5f0:	049a      	lsls	r2, r3, #18
 800a5f2:	d508      	bpl.n	800a606 <HAL_PWREx_ConfigSupply+0x46>
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 800a5f4:	f1a4 031d 	sub.w	r3, r4, #29
 800a5f8:	2b01      	cmp	r3, #1
 800a5fa:	d90c      	bls.n	800a616 <HAL_PWREx_ConfigSupply+0x56>
 800a5fc:	3c2d      	subs	r4, #45	@ 0x2d
 800a5fe:	2c01      	cmp	r4, #1
 800a600:	d909      	bls.n	800a616 <HAL_PWREx_ConfigSupply+0x56>
      return HAL_OK;
 800a602:	2000      	movs	r0, #0
 800a604:	e7ea      	b.n	800a5dc <HAL_PWREx_ConfigSupply+0x1c>
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800a606:	f7fd f929 	bl	800785c <HAL_GetTick>
 800a60a:	1b80      	subs	r0, r0, r6
 800a60c:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 800a610:	d9ed      	bls.n	800a5ee <HAL_PWREx_ConfigSupply+0x2e>
      return HAL_ERROR;
 800a612:	2001      	movs	r0, #1
 800a614:	e7e2      	b.n	800a5dc <HAL_PWREx_ConfigSupply+0x1c>
    tickstart = HAL_GetTick ();
 800a616:	f7fd f921 	bl	800785c <HAL_GetTick>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800a61a:	4d06      	ldr	r5, [pc, #24]	@ (800a634 <HAL_PWREx_ConfigSupply+0x74>)
    tickstart = HAL_GetTick ();
 800a61c:	4604      	mov	r4, r0
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800a61e:	68eb      	ldr	r3, [r5, #12]
 800a620:	03db      	lsls	r3, r3, #15
 800a622:	d4ee      	bmi.n	800a602 <HAL_PWREx_ConfigSupply+0x42>
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800a624:	f7fd f91a 	bl	800785c <HAL_GetTick>
 800a628:	1b00      	subs	r0, r0, r4
 800a62a:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 800a62e:	d9f6      	bls.n	800a61e <HAL_PWREx_ConfigSupply+0x5e>
 800a630:	e7ef      	b.n	800a612 <HAL_PWREx_ConfigSupply+0x52>
 800a632:	bf00      	nop
 800a634:	58024800 	.word	0x58024800

0800a638 <QSPI_Config>:
  *            @arg QSPI_FUNCTIONAL_MODE_AUTO_POLLING: Automatic polling mode
  *            @arg QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED: Memory-mapped mode
  * @retval None
  */
static void QSPI_Config(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t FunctionalMode)
{
 800a638:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  assert_param(IS_QSPI_FUNCTIONAL_MODE(FunctionalMode));

  if ((cmd->DataMode != QSPI_DATA_NONE) && (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED))
 800a63c:	6a4e      	ldr	r6, [r1, #36]	@ 0x24
 800a63e:	b136      	cbz	r6, 800a64e <QSPI_Config+0x16>
 800a640:	f1b2 6f40 	cmp.w	r2, #201326592	@ 0xc000000
 800a644:	d003      	beq.n	800a64e <QSPI_Config+0x16>
  {
    /* Configure QSPI: DLR register with the number of data to read or write */
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
 800a646:	6a8b      	ldr	r3, [r1, #40]	@ 0x28
 800a648:	6804      	ldr	r4, [r0, #0]
 800a64a:	3b01      	subs	r3, #1
 800a64c:	6123      	str	r3, [r4, #16]
  }

  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
 800a64e:	f8d1 a018 	ldr.w	sl, [r1, #24]
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
    {
      /* Configure QSPI: ABR register with alternate bytes value */
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);

      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800a652:	e9d1 7e07 	ldrd	r7, lr, [r1, #28]
  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
 800a656:	f1ba 0f00 	cmp.w	sl, #0
 800a65a:	d04c      	beq.n	800a6f6 <QSPI_Config+0xbe>
      {
        /*---- Command with instruction, address and alternate bytes ----*/
        /* Configure QSPI: CCR register with all communications parameters */
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800a65c:	694c      	ldr	r4, [r1, #20]
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
 800a65e:	6805      	ldr	r5, [r0, #0]
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800a660:	ea4f 4c84 	mov.w	ip, r4, lsl #18
 800a664:	ea4a 0406 	orr.w	r4, sl, r6
 800a668:	680b      	ldr	r3, [r1, #0]
 800a66a:	f8d1 8034 	ldr.w	r8, [r1, #52]	@ 0x34
 800a66e:	ea44 0a02 	orr.w	sl, r4, r2
 800a672:	e9d1 090b 	ldrd	r0, r9, [r1, #44]	@ 0x2c
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 800a676:	f1be 0f00 	cmp.w	lr, #0
 800a67a:	d024      	beq.n	800a6c6 <QSPI_Config+0x8e>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 800a67c:	688e      	ldr	r6, [r1, #8]
 800a67e:	ea4a 040e 	orr.w	r4, sl, lr
 800a682:	61ee      	str	r6, [r5, #28]
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800a684:	690e      	ldr	r6, [r1, #16]
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800a686:	b19f      	cbz	r7, 800a6b0 <QSPI_Config+0x78>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800a688:	433b      	orrs	r3, r7
 800a68a:	4303      	orrs	r3, r0
 800a68c:	68c8      	ldr	r0, [r1, #12]
 800a68e:	ea43 0309 	orr.w	r3, r3, r9
 800a692:	ea43 0308 	orr.w	r3, r3, r8
 800a696:	4333      	orrs	r3, r6
 800a698:	4303      	orrs	r3, r0
 800a69a:	ea43 030c 	orr.w	r3, r3, ip
 800a69e:	4323      	orrs	r3, r4
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
                                         cmd->DataMode | (cmd->DummyCycles << QUADSPI_CCR_DCYC_Pos) |
                                         cmd->AlternateByteMode | cmd->AddressSize | cmd->AddressMode |
                                         cmd->InstructionMode | cmd->Instruction | FunctionalMode));

        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800a6a0:	f1b2 6f40 	cmp.w	r2, #201326592	@ 0xc000000
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800a6a4:	616b      	str	r3, [r5, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800a6a6:	d001      	beq.n	800a6ac <QSPI_Config+0x74>
        {
          /* Configure QSPI: AR register with address value */
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800a6a8:	684b      	ldr	r3, [r1, #4]
 800a6aa:	61ab      	str	r3, [r5, #24]
                                           cmd->InstructionMode | FunctionalMode));
        }
      }
    }
  }
}
 800a6ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800a6b0:	4303      	orrs	r3, r0
 800a6b2:	ea43 0309 	orr.w	r3, r3, r9
 800a6b6:	ea43 0308 	orr.w	r3, r3, r8
 800a6ba:	4333      	orrs	r3, r6
 800a6bc:	ea43 030c 	orr.w	r3, r3, ip
 800a6c0:	4323      	orrs	r3, r4
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800a6c2:	616b      	str	r3, [r5, #20]
 800a6c4:	e7f2      	b.n	800a6ac <QSPI_Config+0x74>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800a6c6:	b167      	cbz	r7, 800a6e2 <QSPI_Config+0xaa>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800a6c8:	433b      	orrs	r3, r7
 800a6ca:	4303      	orrs	r3, r0
 800a6cc:	68c8      	ldr	r0, [r1, #12]
 800a6ce:	ea43 0309 	orr.w	r3, r3, r9
 800a6d2:	ea43 0308 	orr.w	r3, r3, r8
 800a6d6:	4303      	orrs	r3, r0
 800a6d8:	ea43 030c 	orr.w	r3, r3, ip
 800a6dc:	ea43 030a 	orr.w	r3, r3, sl
 800a6e0:	e7de      	b.n	800a6a0 <QSPI_Config+0x68>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800a6e2:	4303      	orrs	r3, r0
 800a6e4:	ea43 0309 	orr.w	r3, r3, r9
 800a6e8:	ea43 0408 	orr.w	r4, r3, r8
 800a6ec:	ea44 030c 	orr.w	r3, r4, ip
 800a6f0:	ea43 030a 	orr.w	r3, r3, sl
 800a6f4:	e7e5      	b.n	800a6c2 <QSPI_Config+0x8a>
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 800a6f6:	f1be 0f00 	cmp.w	lr, #0
 800a6fa:	d02c      	beq.n	800a756 <QSPI_Config+0x11e>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 800a6fc:	ea46 050e 	orr.w	r5, r6, lr
 800a700:	688b      	ldr	r3, [r1, #8]
 800a702:	6804      	ldr	r4, [r0, #0]
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800a704:	694e      	ldr	r6, [r1, #20]
 800a706:	4315      	orrs	r5, r2
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 800a708:	61e3      	str	r3, [r4, #28]
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800a70a:	f8d1 c034 	ldr.w	ip, [r1, #52]	@ 0x34
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800a70e:	04b6      	lsls	r6, r6, #18
 800a710:	690b      	ldr	r3, [r1, #16]
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800a712:	e9d1 8e0b 	ldrd	r8, lr, [r1, #44]	@ 0x2c
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800a716:	b1a7      	cbz	r7, 800a742 <QSPI_Config+0x10a>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800a718:	433b      	orrs	r3, r7
 800a71a:	68c8      	ldr	r0, [r1, #12]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800a71c:	f1b2 6f40 	cmp.w	r2, #201326592	@ 0xc000000
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800a720:	ea43 0308 	orr.w	r3, r3, r8
 800a724:	ea43 030e 	orr.w	r3, r3, lr
 800a728:	ea43 030c 	orr.w	r3, r3, ip
 800a72c:	ea43 0300 	orr.w	r3, r3, r0
 800a730:	ea43 0306 	orr.w	r3, r3, r6
 800a734:	ea43 0305 	orr.w	r3, r3, r5
 800a738:	6163      	str	r3, [r4, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800a73a:	d0b7      	beq.n	800a6ac <QSPI_Config+0x74>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800a73c:	684b      	ldr	r3, [r1, #4]
 800a73e:	61a3      	str	r3, [r4, #24]
 800a740:	e7b4      	b.n	800a6ac <QSPI_Config+0x74>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800a742:	ea43 0308 	orr.w	r3, r3, r8
 800a746:	ea43 030e 	orr.w	r3, r3, lr
 800a74a:	ea43 030c 	orr.w	r3, r3, ip
 800a74e:	4333      	orrs	r3, r6
 800a750:	432b      	orrs	r3, r5
 800a752:	6163      	str	r3, [r4, #20]
 800a754:	e7aa      	b.n	800a6ac <QSPI_Config+0x74>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800a756:	b1d7      	cbz	r7, 800a78e <QSPI_Config+0x156>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800a758:	ea46 0307 	orr.w	r3, r6, r7
 800a75c:	6acc      	ldr	r4, [r1, #44]	@ 0x2c
 800a75e:	6800      	ldr	r0, [r0, #0]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800a760:	f1b2 6f40 	cmp.w	r2, #201326592	@ 0xc000000
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800a764:	ea43 0302 	orr.w	r3, r3, r2
 800a768:	ea43 0304 	orr.w	r3, r3, r4
 800a76c:	6b0c      	ldr	r4, [r1, #48]	@ 0x30
 800a76e:	ea43 0304 	orr.w	r3, r3, r4
 800a772:	6b4c      	ldr	r4, [r1, #52]	@ 0x34
 800a774:	ea43 0304 	orr.w	r3, r3, r4
 800a778:	68cc      	ldr	r4, [r1, #12]
 800a77a:	ea43 0304 	orr.w	r3, r3, r4
 800a77e:	694c      	ldr	r4, [r1, #20]
 800a780:	ea43 4384 	orr.w	r3, r3, r4, lsl #18
 800a784:	6143      	str	r3, [r0, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800a786:	d091      	beq.n	800a6ac <QSPI_Config+0x74>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800a788:	684b      	ldr	r3, [r1, #4]
 800a78a:	6183      	str	r3, [r0, #24]
 800a78c:	e78e      	b.n	800a6ac <QSPI_Config+0x74>
        if (cmd->DataMode != QSPI_DATA_NONE)
 800a78e:	2e00      	cmp	r6, #0
 800a790:	d08c      	beq.n	800a6ac <QSPI_Config+0x74>
          WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800a792:	6acb      	ldr	r3, [r1, #44]	@ 0x2c
 800a794:	6800      	ldr	r0, [r0, #0]
 800a796:	4333      	orrs	r3, r6
 800a798:	4313      	orrs	r3, r2
 800a79a:	6b0a      	ldr	r2, [r1, #48]	@ 0x30
 800a79c:	4313      	orrs	r3, r2
 800a79e:	6b4a      	ldr	r2, [r1, #52]	@ 0x34
 800a7a0:	4313      	orrs	r3, r2
 800a7a2:	694a      	ldr	r2, [r1, #20]
 800a7a4:	ea43 4382 	orr.w	r3, r3, r2, lsl #18
 800a7a8:	6143      	str	r3, [r0, #20]
}
 800a7aa:	e77f      	b.n	800a6ac <QSPI_Config+0x74>

0800a7ac <QSPI_WaitFlagStateUntilTimeout>:
{
 800a7ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a7b0:	f8dd 8018 	ldr.w	r8, [sp, #24]
 800a7b4:	4604      	mov	r4, r0
 800a7b6:	460e      	mov	r6, r1
 800a7b8:	4615      	mov	r5, r2
 800a7ba:	461f      	mov	r7, r3
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800a7bc:	6822      	ldr	r2, [r4, #0]
 800a7be:	6893      	ldr	r3, [r2, #8]
 800a7c0:	4233      	tst	r3, r6
 800a7c2:	bf14      	ite	ne
 800a7c4:	2301      	movne	r3, #1
 800a7c6:	2300      	moveq	r3, #0
 800a7c8:	42ab      	cmp	r3, r5
 800a7ca:	d101      	bne.n	800a7d0 <QSPI_WaitFlagStateUntilTimeout+0x24>
  return HAL_OK;
 800a7cc:	2000      	movs	r0, #0
 800a7ce:	e012      	b.n	800a7f6 <QSPI_WaitFlagStateUntilTimeout+0x4a>
    if (Timeout != HAL_MAX_DELAY)
 800a7d0:	f1b8 3fff 	cmp.w	r8, #4294967295
 800a7d4:	d0f3      	beq.n	800a7be <QSPI_WaitFlagStateUntilTimeout+0x12>
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a7d6:	f7fd f841 	bl	800785c <HAL_GetTick>
 800a7da:	1bc0      	subs	r0, r0, r7
 800a7dc:	4540      	cmp	r0, r8
 800a7de:	d802      	bhi.n	800a7e6 <QSPI_WaitFlagStateUntilTimeout+0x3a>
 800a7e0:	f1b8 0f00 	cmp.w	r8, #0
 800a7e4:	d1ea      	bne.n	800a7bc <QSPI_WaitFlagStateUntilTimeout+0x10>
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 800a7e6:	2304      	movs	r3, #4
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 800a7e8:	2001      	movs	r0, #1
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 800a7ea:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 800a7ee:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 800a7f0:	f043 0301 	orr.w	r3, r3, #1
 800a7f4:	6463      	str	r3, [r4, #68]	@ 0x44
}
 800a7f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

0800a7fc <HAL_QSPI_Init>:
{
 800a7fc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a7fe:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800a800:	f7fd f82c 	bl	800785c <HAL_GetTick>
 800a804:	4605      	mov	r5, r0
  if(hqspi == NULL)
 800a806:	2c00      	cmp	r4, #0
 800a808:	d03f      	beq.n	800a88a <HAL_QSPI_Init+0x8e>
  if(hqspi->State == HAL_QSPI_STATE_RESET)
 800a80a:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 800a80e:	b92b      	cbnz	r3, 800a81c <HAL_QSPI_Init+0x20>
    HAL_QSPI_MspInit(hqspi);
 800a810:	4620      	mov	r0, r4
 800a812:	f7f6 fd01 	bl	8001218 <HAL_QSPI_MspInit>
  hqspi->Timeout = Timeout;
 800a816:	f241 3388 	movw	r3, #5000	@ 0x1388
 800a81a:	64a3      	str	r3, [r4, #72]	@ 0x48
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 800a81c:	6821      	ldr	r1, [r4, #0]
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800a81e:	4620      	mov	r0, r4
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 800a820:	68a3      	ldr	r3, [r4, #8]
 800a822:	680a      	ldr	r2, [r1, #0]
 800a824:	3b01      	subs	r3, #1
 800a826:	f422 52f8 	bic.w	r2, r2, #7936	@ 0x1f00
 800a82a:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800a82e:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 800a830:	600a      	str	r2, [r1, #0]
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800a832:	2200      	movs	r2, #0
 800a834:	9300      	str	r3, [sp, #0]
 800a836:	2120      	movs	r1, #32
 800a838:	462b      	mov	r3, r5
 800a83a:	f7ff ffb7 	bl	800a7ac <QSPI_WaitFlagStateUntilTimeout>
  if(status == HAL_OK)
 800a83e:	bb10      	cbnz	r0, 800a886 <HAL_QSPI_Init+0x8a>
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 800a840:	6822      	ldr	r2, [r4, #0]
 800a842:	69e5      	ldr	r5, [r4, #28]
 800a844:	68e3      	ldr	r3, [r4, #12]
 800a846:	6811      	ldr	r1, [r2, #0]
 800a848:	432b      	orrs	r3, r5
 800a84a:	6a25      	ldr	r5, [r4, #32]
 800a84c:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 800a850:	432b      	orrs	r3, r5
 800a852:	6865      	ldr	r5, [r4, #4]
 800a854:	f021 01d0 	bic.w	r1, r1, #208	@ 0xd0
 800a858:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
 800a85c:	430b      	orrs	r3, r1
 800a85e:	6013      	str	r3, [r2, #0]
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 800a860:	6855      	ldr	r5, [r2, #4]
 800a862:	e9d4 3105 	ldrd	r3, r1, [r4, #20]
 800a866:	430b      	orrs	r3, r1
 800a868:	6921      	ldr	r1, [r4, #16]
 800a86a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800a86e:	4908      	ldr	r1, [pc, #32]	@ (800a890 <HAL_QSPI_Init+0x94>)
 800a870:	4029      	ands	r1, r5
 800a872:	430b      	orrs	r3, r1
 800a874:	6053      	str	r3, [r2, #4]
    __HAL_QSPI_ENABLE(hqspi);
 800a876:	6813      	ldr	r3, [r2, #0]
 800a878:	f043 0301 	orr.w	r3, r3, #1
 800a87c:	6013      	str	r3, [r2, #0]
    hqspi->State = HAL_QSPI_STATE_READY;
 800a87e:	2301      	movs	r3, #1
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800a880:	6460      	str	r0, [r4, #68]	@ 0x44
    hqspi->State = HAL_QSPI_STATE_READY;
 800a882:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
}
 800a886:	b003      	add	sp, #12
 800a888:	bd30      	pop	{r4, r5, pc}
    return HAL_ERROR;
 800a88a:	2001      	movs	r0, #1
 800a88c:	e7fb      	b.n	800a886 <HAL_QSPI_Init+0x8a>
 800a88e:	bf00      	nop
 800a890:	ffe0f8fe 	.word	0xffe0f8fe

0800a894 <HAL_QSPI_Command>:
{
 800a894:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 800a898:	4604      	mov	r4, r0
 800a89a:	468a      	mov	sl, r1
 800a89c:	4690      	mov	r8, r2
  uint32_t tickstart = HAL_GetTick();
 800a89e:	f7fc ffdd 	bl	800785c <HAL_GetTick>
  __HAL_LOCK(hqspi);
 800a8a2:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
  uint32_t tickstart = HAL_GetTick();
 800a8a6:	4607      	mov	r7, r0
  __HAL_LOCK(hqspi);
 800a8a8:	2b01      	cmp	r3, #1
 800a8aa:	d036      	beq.n	800a91a <HAL_QSPI_Command+0x86>
 800a8ac:	2301      	movs	r3, #1
 800a8ae:	2602      	movs	r6, #2
 800a8b0:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 800a8b4:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 800a8b8:	2b01      	cmp	r3, #1
 800a8ba:	fa5f f983 	uxtb.w	r9, r3
 800a8be:	d128      	bne.n	800a912 <HAL_QSPI_Command+0x7e>
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800a8c0:	2200      	movs	r2, #0
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 800a8c2:	4603      	mov	r3, r0
 800a8c4:	2120      	movs	r1, #32
 800a8c6:	4620      	mov	r0, r4
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800a8c8:	6462      	str	r2, [r4, #68]	@ 0x44
    hqspi->State = HAL_QSPI_STATE_BUSY;
 800a8ca:	f884 6041 	strb.w	r6, [r4, #65]	@ 0x41
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 800a8ce:	f8cd 8000 	str.w	r8, [sp]
 800a8d2:	f7ff ff6b 	bl	800a7ac <QSPI_WaitFlagStateUntilTimeout>
    if (status == HAL_OK)
 800a8d6:	4605      	mov	r5, r0
 800a8d8:	b9a0      	cbnz	r0, 800a904 <HAL_QSPI_Command+0x70>
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 800a8da:	4602      	mov	r2, r0
 800a8dc:	4651      	mov	r1, sl
 800a8de:	4620      	mov	r0, r4
 800a8e0:	f7ff feaa 	bl	800a638 <QSPI_Config>
      if (cmd->DataMode == QSPI_DATA_NONE)
 800a8e4:	f8da 3024 	ldr.w	r3, [sl, #36]	@ 0x24
 800a8e8:	b953      	cbnz	r3, 800a900 <HAL_QSPI_Command+0x6c>
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 800a8ea:	463b      	mov	r3, r7
 800a8ec:	464a      	mov	r2, r9
 800a8ee:	4631      	mov	r1, r6
 800a8f0:	4620      	mov	r0, r4
 800a8f2:	f8cd 8000 	str.w	r8, [sp]
 800a8f6:	f7ff ff59 	bl	800a7ac <QSPI_WaitFlagStateUntilTimeout>
        if (status == HAL_OK)
 800a8fa:	b960      	cbnz	r0, 800a916 <HAL_QSPI_Command+0x82>
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800a8fc:	6823      	ldr	r3, [r4, #0]
 800a8fe:	60de      	str	r6, [r3, #12]
        hqspi->State = HAL_QSPI_STATE_READY;
 800a900:	f884 9041 	strb.w	r9, [r4, #65]	@ 0x41
  __HAL_UNLOCK(hqspi);
 800a904:	2300      	movs	r3, #0
 800a906:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
}
 800a90a:	4628      	mov	r0, r5
 800a90c:	b002      	add	sp, #8
 800a90e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    status = HAL_BUSY;
 800a912:	4635      	mov	r5, r6
 800a914:	e7f6      	b.n	800a904 <HAL_QSPI_Command+0x70>
 800a916:	4605      	mov	r5, r0
 800a918:	e7f4      	b.n	800a904 <HAL_QSPI_Command+0x70>
  __HAL_LOCK(hqspi);
 800a91a:	2502      	movs	r5, #2
 800a91c:	e7f5      	b.n	800a90a <HAL_QSPI_Command+0x76>

0800a91e <HAL_QSPI_Transmit>:
{
 800a91e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800a922:	4604      	mov	r4, r0
 800a924:	4688      	mov	r8, r1
 800a926:	4617      	mov	r7, r2
  uint32_t tickstart = HAL_GetTick();
 800a928:	f7fc ff98 	bl	800785c <HAL_GetTick>
  __HAL_LOCK(hqspi);
 800a92c:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
  uint32_t tickstart = HAL_GetTick();
 800a930:	4606      	mov	r6, r0
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 800a932:	6825      	ldr	r5, [r4, #0]
  __HAL_LOCK(hqspi);
 800a934:	2b01      	cmp	r3, #1
 800a936:	d04c      	beq.n	800a9d2 <HAL_QSPI_Transmit+0xb4>
 800a938:	2301      	movs	r3, #1
 800a93a:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 800a93e:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 800a942:	2b01      	cmp	r3, #1
 800a944:	b2d8      	uxtb	r0, r3
 800a946:	d142      	bne.n	800a9ce <HAL_QSPI_Transmit+0xb0>
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800a948:	2300      	movs	r3, #0
 800a94a:	6463      	str	r3, [r4, #68]	@ 0x44
    if(pData != NULL )
 800a94c:	f1b8 0f00 	cmp.w	r8, #0
 800a950:	d038      	beq.n	800a9c4 <HAL_QSPI_Transmit+0xa6>
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_TX;
 800a952:	2312      	movs	r3, #18
 800a954:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
      hqspi->TxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 800a958:	692b      	ldr	r3, [r5, #16]
 800a95a:	3301      	adds	r3, #1
 800a95c:	62e3      	str	r3, [r4, #44]	@ 0x2c
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 800a95e:	692b      	ldr	r3, [r5, #16]
      hqspi->pTxBuffPtr = pData;
 800a960:	f8c4 8024 	str.w	r8, [r4, #36]	@ 0x24
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 800a964:	3301      	adds	r3, #1
 800a966:	62a3      	str	r3, [r4, #40]	@ 0x28
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 800a968:	696b      	ldr	r3, [r5, #20]
 800a96a:	f023 6340 	bic.w	r3, r3, #201326592	@ 0xc000000
 800a96e:	616b      	str	r3, [r5, #20]
      while(hqspi->TxXferCount > 0U)
 800a970:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800a972:	b99b      	cbnz	r3, 800a99c <HAL_QSPI_Transmit+0x7e>
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 800a974:	4633      	mov	r3, r6
 800a976:	2201      	movs	r2, #1
 800a978:	2102      	movs	r1, #2
 800a97a:	4620      	mov	r0, r4
 800a97c:	9700      	str	r7, [sp, #0]
 800a97e:	f7ff ff15 	bl	800a7ac <QSPI_WaitFlagStateUntilTimeout>
        if (status == HAL_OK)
 800a982:	b910      	cbnz	r0, 800a98a <HAL_QSPI_Transmit+0x6c>
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800a984:	6823      	ldr	r3, [r4, #0]
 800a986:	2202      	movs	r2, #2
 800a988:	60da      	str	r2, [r3, #12]
      hqspi->State = HAL_QSPI_STATE_READY;
 800a98a:	2301      	movs	r3, #1
 800a98c:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  __HAL_UNLOCK(hqspi);
 800a990:	2300      	movs	r3, #0
 800a992:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
}
 800a996:	b002      	add	sp, #8
 800a998:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_FT, SET, tickstart, Timeout);
 800a99c:	4633      	mov	r3, r6
 800a99e:	2201      	movs	r2, #1
 800a9a0:	2104      	movs	r1, #4
 800a9a2:	4620      	mov	r0, r4
 800a9a4:	9700      	str	r7, [sp, #0]
 800a9a6:	f7ff ff01 	bl	800a7ac <QSPI_WaitFlagStateUntilTimeout>
        if (status != HAL_OK)
 800a9aa:	2800      	cmp	r0, #0
 800a9ac:	d1ed      	bne.n	800a98a <HAL_QSPI_Transmit+0x6c>
        *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 800a9ae:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800a9b0:	781b      	ldrb	r3, [r3, #0]
 800a9b2:	f885 3020 	strb.w	r3, [r5, #32]
        hqspi->pTxBuffPtr++;
 800a9b6:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800a9b8:	3301      	adds	r3, #1
 800a9ba:	6263      	str	r3, [r4, #36]	@ 0x24
        hqspi->TxXferCount--;
 800a9bc:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800a9be:	3b01      	subs	r3, #1
 800a9c0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800a9c2:	e7d5      	b.n	800a970 <HAL_QSPI_Transmit+0x52>
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 800a9c4:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 800a9c6:	f043 0308 	orr.w	r3, r3, #8
 800a9ca:	6463      	str	r3, [r4, #68]	@ 0x44
      status = HAL_ERROR;
 800a9cc:	e7e0      	b.n	800a990 <HAL_QSPI_Transmit+0x72>
    status = HAL_BUSY;
 800a9ce:	2002      	movs	r0, #2
 800a9d0:	e7de      	b.n	800a990 <HAL_QSPI_Transmit+0x72>
  __HAL_LOCK(hqspi);
 800a9d2:	2002      	movs	r0, #2
 800a9d4:	e7df      	b.n	800a996 <HAL_QSPI_Transmit+0x78>

0800a9d6 <HAL_QSPI_Receive>:
{
 800a9d6:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800a9da:	4604      	mov	r4, r0
 800a9dc:	4617      	mov	r7, r2
 800a9de:	4688      	mov	r8, r1
  uint32_t tickstart = HAL_GetTick();
 800a9e0:	f7fc ff3c 	bl	800785c <HAL_GetTick>
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
 800a9e4:	6825      	ldr	r5, [r4, #0]
  uint32_t tickstart = HAL_GetTick();
 800a9e6:	4606      	mov	r6, r0
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
 800a9e8:	69aa      	ldr	r2, [r5, #24]
  __HAL_LOCK(hqspi);
 800a9ea:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 800a9ee:	2b01      	cmp	r3, #1
 800a9f0:	d04f      	beq.n	800aa92 <HAL_QSPI_Receive+0xbc>
 800a9f2:	2301      	movs	r3, #1
 800a9f4:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 800a9f8:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 800a9fc:	2b01      	cmp	r3, #1
 800a9fe:	b2d8      	uxtb	r0, r3
 800aa00:	d145      	bne.n	800aa8e <HAL_QSPI_Receive+0xb8>
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800aa02:	2300      	movs	r3, #0
 800aa04:	6463      	str	r3, [r4, #68]	@ 0x44
    if(pData != NULL )
 800aa06:	f1b8 0f00 	cmp.w	r8, #0
 800aa0a:	d03b      	beq.n	800aa84 <HAL_QSPI_Receive+0xae>
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_RX;
 800aa0c:	2322      	movs	r3, #34	@ 0x22
 800aa0e:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
      hqspi->RxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 800aa12:	692b      	ldr	r3, [r5, #16]
 800aa14:	3301      	adds	r3, #1
 800aa16:	63a3      	str	r3, [r4, #56]	@ 0x38
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 800aa18:	692b      	ldr	r3, [r5, #16]
      hqspi->pRxBuffPtr = pData;
 800aa1a:	f8c4 8030 	str.w	r8, [r4, #48]	@ 0x30
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 800aa1e:	3301      	adds	r3, #1
 800aa20:	6363      	str	r3, [r4, #52]	@ 0x34
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 800aa22:	6969      	ldr	r1, [r5, #20]
 800aa24:	f021 6140 	bic.w	r1, r1, #201326592	@ 0xc000000
 800aa28:	f041 6180 	orr.w	r1, r1, #67108864	@ 0x4000000
 800aa2c:	6169      	str	r1, [r5, #20]
      WRITE_REG(hqspi->Instance->AR, addr_reg);
 800aa2e:	61aa      	str	r2, [r5, #24]
      while(hqspi->RxXferCount > 0U)
 800aa30:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800aa32:	b99b      	cbnz	r3, 800aa5c <HAL_QSPI_Receive+0x86>
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 800aa34:	4633      	mov	r3, r6
 800aa36:	2201      	movs	r2, #1
 800aa38:	2102      	movs	r1, #2
 800aa3a:	4620      	mov	r0, r4
 800aa3c:	9700      	str	r7, [sp, #0]
 800aa3e:	f7ff feb5 	bl	800a7ac <QSPI_WaitFlagStateUntilTimeout>
        if  (status == HAL_OK)
 800aa42:	b910      	cbnz	r0, 800aa4a <HAL_QSPI_Receive+0x74>
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800aa44:	6823      	ldr	r3, [r4, #0]
 800aa46:	2202      	movs	r2, #2
 800aa48:	60da      	str	r2, [r3, #12]
      hqspi->State = HAL_QSPI_STATE_READY;
 800aa4a:	2301      	movs	r3, #1
 800aa4c:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  __HAL_UNLOCK(hqspi);
 800aa50:	2300      	movs	r3, #0
 800aa52:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
}
 800aa56:	b002      	add	sp, #8
 800aa58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, (QSPI_FLAG_FT | QSPI_FLAG_TC), SET, tickstart, Timeout);
 800aa5c:	4633      	mov	r3, r6
 800aa5e:	2201      	movs	r2, #1
 800aa60:	2106      	movs	r1, #6
 800aa62:	4620      	mov	r0, r4
 800aa64:	9700      	str	r7, [sp, #0]
 800aa66:	f7ff fea1 	bl	800a7ac <QSPI_WaitFlagStateUntilTimeout>
        if  (status != HAL_OK)
 800aa6a:	2800      	cmp	r0, #0
 800aa6c:	d1ed      	bne.n	800aa4a <HAL_QSPI_Receive+0x74>
        *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 800aa6e:	f895 2020 	ldrb.w	r2, [r5, #32]
 800aa72:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800aa74:	701a      	strb	r2, [r3, #0]
        hqspi->pRxBuffPtr++;
 800aa76:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800aa78:	3301      	adds	r3, #1
 800aa7a:	6323      	str	r3, [r4, #48]	@ 0x30
        hqspi->RxXferCount--;
 800aa7c:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800aa7e:	3b01      	subs	r3, #1
 800aa80:	63a3      	str	r3, [r4, #56]	@ 0x38
 800aa82:	e7d5      	b.n	800aa30 <HAL_QSPI_Receive+0x5a>
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 800aa84:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 800aa86:	f043 0308 	orr.w	r3, r3, #8
 800aa8a:	6463      	str	r3, [r4, #68]	@ 0x44
      status = HAL_ERROR;
 800aa8c:	e7e0      	b.n	800aa50 <HAL_QSPI_Receive+0x7a>
    status = HAL_BUSY;
 800aa8e:	2002      	movs	r0, #2
 800aa90:	e7de      	b.n	800aa50 <HAL_QSPI_Receive+0x7a>
  __HAL_LOCK(hqspi);
 800aa92:	2002      	movs	r0, #2
 800aa94:	e7df      	b.n	800aa56 <HAL_QSPI_Receive+0x80>

0800aa96 <HAL_QSPI_AutoPolling>:
{
 800aa96:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800aa9a:	4604      	mov	r4, r0
 800aa9c:	461f      	mov	r7, r3
 800aa9e:	4689      	mov	r9, r1
 800aaa0:	4615      	mov	r5, r2
  uint32_t tickstart = HAL_GetTick();
 800aaa2:	f7fc fedb 	bl	800785c <HAL_GetTick>
  __HAL_LOCK(hqspi);
 800aaa6:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
  uint32_t tickstart = HAL_GetTick();
 800aaaa:	4606      	mov	r6, r0
  __HAL_LOCK(hqspi);
 800aaac:	2b01      	cmp	r3, #1
 800aaae:	d041      	beq.n	800ab34 <HAL_QSPI_AutoPolling+0x9e>
 800aab0:	2301      	movs	r3, #1
 800aab2:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 800aab6:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 800aaba:	2b01      	cmp	r3, #1
 800aabc:	fa5f f883 	uxtb.w	r8, r3
 800aac0:	d136      	bne.n	800ab30 <HAL_QSPI_AutoPolling+0x9a>
    hqspi->State = HAL_QSPI_STATE_BUSY_AUTO_POLLING;
 800aac2:	2342      	movs	r3, #66	@ 0x42
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800aac4:	2200      	movs	r2, #0
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 800aac6:	2120      	movs	r1, #32
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800aac8:	6462      	str	r2, [r4, #68]	@ 0x44
    hqspi->State = HAL_QSPI_STATE_BUSY_AUTO_POLLING;
 800aaca:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 800aace:	4603      	mov	r3, r0
 800aad0:	9700      	str	r7, [sp, #0]
 800aad2:	4620      	mov	r0, r4
 800aad4:	f7ff fe6a 	bl	800a7ac <QSPI_WaitFlagStateUntilTimeout>
    if (status == HAL_OK)
 800aad8:	bb20      	cbnz	r0, 800ab24 <HAL_QSPI_AutoPolling+0x8e>
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 800aada:	6822      	ldr	r2, [r4, #0]
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 800aadc:	4620      	mov	r0, r4
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 800aade:	682b      	ldr	r3, [r5, #0]
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 800aae0:	6929      	ldr	r1, [r5, #16]
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 800aae2:	6293      	str	r3, [r2, #40]	@ 0x28
      WRITE_REG(hqspi->Instance->PSMKR, cfg->Mask);
 800aae4:	686b      	ldr	r3, [r5, #4]
 800aae6:	6253      	str	r3, [r2, #36]	@ 0x24
      WRITE_REG(hqspi->Instance->PIR, cfg->Interval);
 800aae8:	68ab      	ldr	r3, [r5, #8]
 800aaea:	62d3      	str	r3, [r2, #44]	@ 0x2c
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 800aaec:	6813      	ldr	r3, [r2, #0]
 800aaee:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 800aaf2:	430b      	orrs	r3, r1
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 800aaf4:	4649      	mov	r1, r9
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 800aaf6:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800aafa:	6013      	str	r3, [r2, #0]
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 800aafc:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
      cmd->NbData = cfg->StatusBytesSize;
 800ab00:	68eb      	ldr	r3, [r5, #12]
 800ab02:	f8c9 3028 	str.w	r3, [r9, #40]	@ 0x28
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 800ab06:	f7ff fd97 	bl	800a638 <QSPI_Config>
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_SM, SET, tickstart, Timeout);
 800ab0a:	4633      	mov	r3, r6
 800ab0c:	4642      	mov	r2, r8
 800ab0e:	2108      	movs	r1, #8
 800ab10:	4620      	mov	r0, r4
 800ab12:	9700      	str	r7, [sp, #0]
 800ab14:	f7ff fe4a 	bl	800a7ac <QSPI_WaitFlagStateUntilTimeout>
      if (status == HAL_OK)
 800ab18:	b920      	cbnz	r0, 800ab24 <HAL_QSPI_AutoPolling+0x8e>
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_SM);
 800ab1a:	6823      	ldr	r3, [r4, #0]
 800ab1c:	2208      	movs	r2, #8
 800ab1e:	60da      	str	r2, [r3, #12]
        hqspi->State = HAL_QSPI_STATE_READY;
 800ab20:	f884 8041 	strb.w	r8, [r4, #65]	@ 0x41
  __HAL_UNLOCK(hqspi);
 800ab24:	2300      	movs	r3, #0
 800ab26:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
}
 800ab2a:	b003      	add	sp, #12
 800ab2c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    status = HAL_BUSY;
 800ab30:	2002      	movs	r0, #2
 800ab32:	e7f7      	b.n	800ab24 <HAL_QSPI_AutoPolling+0x8e>
  __HAL_LOCK(hqspi);
 800ab34:	2002      	movs	r0, #2
 800ab36:	e7f8      	b.n	800ab2a <HAL_QSPI_AutoPolling+0x94>

0800ab38 <HAL_QSPI_MemoryMapped>:
{
 800ab38:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ab3a:	4604      	mov	r4, r0
 800ab3c:	4616      	mov	r6, r2
 800ab3e:	460f      	mov	r7, r1
  uint32_t tickstart = HAL_GetTick();
 800ab40:	f7fc fe8c 	bl	800785c <HAL_GetTick>
  __HAL_LOCK(hqspi);
 800ab44:	f894 2040 	ldrb.w	r2, [r4, #64]	@ 0x40
  uint32_t tickstart = HAL_GetTick();
 800ab48:	4603      	mov	r3, r0
  __HAL_LOCK(hqspi);
 800ab4a:	2a01      	cmp	r2, #1
 800ab4c:	d033      	beq.n	800abb6 <HAL_QSPI_MemoryMapped+0x7e>
 800ab4e:	2201      	movs	r2, #1
 800ab50:	f884 2040 	strb.w	r2, [r4, #64]	@ 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 800ab54:	f894 2041 	ldrb.w	r2, [r4, #65]	@ 0x41
 800ab58:	2a01      	cmp	r2, #1
 800ab5a:	d12a      	bne.n	800abb2 <HAL_QSPI_MemoryMapped+0x7a>
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800ab5c:	2200      	movs	r2, #0
    hqspi->State = HAL_QSPI_STATE_BUSY_MEM_MAPPED;
 800ab5e:	2182      	movs	r1, #130	@ 0x82
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800ab60:	4620      	mov	r0, r4
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800ab62:	6462      	str	r2, [r4, #68]	@ 0x44
    hqspi->State = HAL_QSPI_STATE_BUSY_MEM_MAPPED;
 800ab64:	f884 1041 	strb.w	r1, [r4, #65]	@ 0x41
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800ab68:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800ab6a:	9100      	str	r1, [sp, #0]
 800ab6c:	2120      	movs	r1, #32
 800ab6e:	f7ff fe1d 	bl	800a7ac <QSPI_WaitFlagStateUntilTimeout>
    if (status == HAL_OK)
 800ab72:	4605      	mov	r5, r0
 800ab74:	b9b8      	cbnz	r0, 800aba6 <HAL_QSPI_MemoryMapped+0x6e>
    MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_TCEN, cfg->TimeOutActivation);
 800ab76:	6823      	ldr	r3, [r4, #0]
 800ab78:	6872      	ldr	r2, [r6, #4]
 800ab7a:	6818      	ldr	r0, [r3, #0]
    if (cfg->TimeOutActivation == QSPI_TIMEOUT_COUNTER_ENABLE)
 800ab7c:	2a08      	cmp	r2, #8
    MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_TCEN, cfg->TimeOutActivation);
 800ab7e:	f020 0008 	bic.w	r0, r0, #8
 800ab82:	ea40 0002 	orr.w	r0, r0, r2
 800ab86:	6018      	str	r0, [r3, #0]
    if (cfg->TimeOutActivation == QSPI_TIMEOUT_COUNTER_ENABLE)
 800ab88:	d107      	bne.n	800ab9a <HAL_QSPI_MemoryMapped+0x62>
        WRITE_REG(hqspi->Instance->LPTR, cfg->TimeOutPeriod);
 800ab8a:	6832      	ldr	r2, [r6, #0]
 800ab8c:	631a      	str	r2, [r3, #48]	@ 0x30
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TO);
 800ab8e:	2210      	movs	r2, #16
 800ab90:	60da      	str	r2, [r3, #12]
        __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TO);
 800ab92:	681a      	ldr	r2, [r3, #0]
 800ab94:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 800ab98:	601a      	str	r2, [r3, #0]
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED);
 800ab9a:	f04f 6240 	mov.w	r2, #201326592	@ 0xc000000
 800ab9e:	4639      	mov	r1, r7
 800aba0:	4620      	mov	r0, r4
 800aba2:	f7ff fd49 	bl	800a638 <QSPI_Config>
  __HAL_UNLOCK(hqspi);
 800aba6:	2300      	movs	r3, #0
 800aba8:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
}
 800abac:	4628      	mov	r0, r5
 800abae:	b003      	add	sp, #12
 800abb0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    status = HAL_BUSY;
 800abb2:	2502      	movs	r5, #2
 800abb4:	e7f7      	b.n	800aba6 <HAL_QSPI_MemoryMapped+0x6e>
  __HAL_LOCK(hqspi);
 800abb6:	2502      	movs	r5, #2
 800abb8:	e7f8      	b.n	800abac <HAL_QSPI_MemoryMapped+0x74>
	...

0800abbc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800abbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800abbe:	4604      	mov	r4, r0
 800abc0:	2800      	cmp	r0, #0
 800abc2:	d074      	beq.n	800acae <HAL_RCC_OscConfig+0xf2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800abc4:	6803      	ldr	r3, [r0, #0]
 800abc6:	07d8      	lsls	r0, r3, #31
 800abc8:	d45e      	bmi.n	800ac88 <HAL_RCC_OscConfig+0xcc>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800abca:	6823      	ldr	r3, [r4, #0]
 800abcc:	0799      	lsls	r1, r3, #30
 800abce:	f100 80ad 	bmi.w	800ad2c <HAL_RCC_OscConfig+0x170>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800abd2:	6823      	ldr	r3, [r4, #0]
 800abd4:	06da      	lsls	r2, r3, #27
 800abd6:	d527      	bpl.n	800ac28 <HAL_RCC_OscConfig+0x6c>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800abd8:	4a9c      	ldr	r2, [pc, #624]	@ (800ae4c <HAL_RCC_OscConfig+0x290>)
 800abda:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800abdc:	6a91      	ldr	r1, [r2, #40]	@ 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800abde:	f003 0338 	and.w	r3, r3, #56	@ 0x38
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800abe2:	2b08      	cmp	r3, #8
 800abe4:	d007      	beq.n	800abf6 <HAL_RCC_OscConfig+0x3a>
 800abe6:	2b18      	cmp	r3, #24
 800abe8:	f040 8103 	bne.w	800adf2 <HAL_RCC_OscConfig+0x236>
 800abec:	f001 0303 	and.w	r3, r1, #3
 800abf0:	2b01      	cmp	r3, #1
 800abf2:	f040 80fe 	bne.w	800adf2 <HAL_RCC_OscConfig+0x236>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800abf6:	6813      	ldr	r3, [r2, #0]
 800abf8:	05db      	lsls	r3, r3, #23
 800abfa:	d502      	bpl.n	800ac02 <HAL_RCC_OscConfig+0x46>
 800abfc:	69e3      	ldr	r3, [r4, #28]
 800abfe:	2b80      	cmp	r3, #128	@ 0x80
 800ac00:	d155      	bne.n	800acae <HAL_RCC_OscConfig+0xf2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800ac02:	f7fc fe43 	bl	800788c <HAL_GetREVID>
 800ac06:	f241 0303 	movw	r3, #4099	@ 0x1003
 800ac0a:	6a21      	ldr	r1, [r4, #32]
 800ac0c:	4298      	cmp	r0, r3
 800ac0e:	4b8f      	ldr	r3, [pc, #572]	@ (800ae4c <HAL_RCC_OscConfig+0x290>)
 800ac10:	f200 80e8 	bhi.w	800ade4 <HAL_RCC_OscConfig+0x228>
 800ac14:	685a      	ldr	r2, [r3, #4]
 800ac16:	2920      	cmp	r1, #32
 800ac18:	f022 42f8 	bic.w	r2, r2, #2080374784	@ 0x7c000000
 800ac1c:	bf0c      	ite	eq
 800ac1e:	f042 4280 	orreq.w	r2, r2, #1073741824	@ 0x40000000
 800ac22:	ea42 6281 	orrne.w	r2, r2, r1, lsl #26
 800ac26:	605a      	str	r2, [r3, #4]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800ac28:	6823      	ldr	r3, [r4, #0]
 800ac2a:	0719      	lsls	r1, r3, #28
 800ac2c:	f100 8123 	bmi.w	800ae76 <HAL_RCC_OscConfig+0x2ba>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800ac30:	6823      	ldr	r3, [r4, #0]
 800ac32:	069a      	lsls	r2, r3, #26
 800ac34:	f100 8144 	bmi.w	800aec0 <HAL_RCC_OscConfig+0x304>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800ac38:	6823      	ldr	r3, [r4, #0]
 800ac3a:	075d      	lsls	r5, r3, #29
 800ac3c:	d51e      	bpl.n	800ac7c <HAL_RCC_OscConfig+0xc0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800ac3e:	4d84      	ldr	r5, [pc, #528]	@ (800ae50 <HAL_RCC_OscConfig+0x294>)
 800ac40:	682b      	ldr	r3, [r5, #0]
 800ac42:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800ac46:	602b      	str	r3, [r5, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800ac48:	f7fc fe08 	bl	800785c <HAL_GetTick>
 800ac4c:	4606      	mov	r6, r0

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800ac4e:	682b      	ldr	r3, [r5, #0]
 800ac50:	05da      	lsls	r2, r3, #23
 800ac52:	f140 815a 	bpl.w	800af0a <HAL_RCC_OscConfig+0x34e>
        return HAL_TIMEOUT;
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800ac56:	68a3      	ldr	r3, [r4, #8]
 800ac58:	4d7c      	ldr	r5, [pc, #496]	@ (800ae4c <HAL_RCC_OscConfig+0x290>)
 800ac5a:	2b01      	cmp	r3, #1
 800ac5c:	f040 815c 	bne.w	800af18 <HAL_RCC_OscConfig+0x35c>
 800ac60:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 800ac62:	f043 0301 	orr.w	r3, r3, #1
 800ac66:	672b      	str	r3, [r5, #112]	@ 0x70
      tickstart = HAL_GetTick();

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ac68:	f241 3788 	movw	r7, #5000	@ 0x1388
      tickstart = HAL_GetTick();
 800ac6c:	f7fc fdf6 	bl	800785c <HAL_GetTick>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800ac70:	4e76      	ldr	r6, [pc, #472]	@ (800ae4c <HAL_RCC_OscConfig+0x290>)
      tickstart = HAL_GetTick();
 800ac72:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800ac74:	6f33      	ldr	r3, [r6, #112]	@ 0x70
 800ac76:	079b      	lsls	r3, r3, #30
 800ac78:	f140 8174 	bpl.w	800af64 <HAL_RCC_OscConfig+0x3a8>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800ac7c:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 800ac7e:	2900      	cmp	r1, #0
 800ac80:	f040 8177 	bne.w	800af72 <HAL_RCC_OscConfig+0x3b6>
          __HAL_RCC_PLLFRACN_ENABLE();
        }
      }
    }
  }
  return HAL_OK;
 800ac84:	2000      	movs	r0, #0
 800ac86:	e02b      	b.n	800ace0 <HAL_RCC_OscConfig+0x124>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800ac88:	4a70      	ldr	r2, [pc, #448]	@ (800ae4c <HAL_RCC_OscConfig+0x290>)
 800ac8a:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800ac8c:	6a91      	ldr	r1, [r2, #40]	@ 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800ac8e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800ac92:	2b10      	cmp	r3, #16
 800ac94:	d005      	beq.n	800aca2 <HAL_RCC_OscConfig+0xe6>
 800ac96:	2b18      	cmp	r3, #24
 800ac98:	d10b      	bne.n	800acb2 <HAL_RCC_OscConfig+0xf6>
 800ac9a:	f001 0303 	and.w	r3, r1, #3
 800ac9e:	2b02      	cmp	r3, #2
 800aca0:	d107      	bne.n	800acb2 <HAL_RCC_OscConfig+0xf6>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800aca2:	6813      	ldr	r3, [r2, #0]
 800aca4:	039a      	lsls	r2, r3, #14
 800aca6:	d590      	bpl.n	800abca <HAL_RCC_OscConfig+0xe>
 800aca8:	6863      	ldr	r3, [r4, #4]
 800acaa:	2b00      	cmp	r3, #0
 800acac:	d18d      	bne.n	800abca <HAL_RCC_OscConfig+0xe>
    return HAL_ERROR;
 800acae:	2001      	movs	r0, #1
 800acb0:	e016      	b.n	800ace0 <HAL_RCC_OscConfig+0x124>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800acb2:	6863      	ldr	r3, [r4, #4]
 800acb4:	4d65      	ldr	r5, [pc, #404]	@ (800ae4c <HAL_RCC_OscConfig+0x290>)
 800acb6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800acba:	d112      	bne.n	800ace2 <HAL_RCC_OscConfig+0x126>
 800acbc:	682b      	ldr	r3, [r5, #0]
 800acbe:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800acc2:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800acc4:	f7fc fdca 	bl	800785c <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800acc8:	4e60      	ldr	r6, [pc, #384]	@ (800ae4c <HAL_RCC_OscConfig+0x290>)
        tickstart = HAL_GetTick();
 800acca:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800accc:	6833      	ldr	r3, [r6, #0]
 800acce:	039b      	lsls	r3, r3, #14
 800acd0:	f53f af7b 	bmi.w	800abca <HAL_RCC_OscConfig+0xe>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800acd4:	f7fc fdc2 	bl	800785c <HAL_GetTick>
 800acd8:	1b40      	subs	r0, r0, r5
 800acda:	2864      	cmp	r0, #100	@ 0x64
 800acdc:	d9f6      	bls.n	800accc <HAL_RCC_OscConfig+0x110>
            return HAL_TIMEOUT;
 800acde:	2003      	movs	r0, #3
}
 800ace0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800ace2:	b9a3      	cbnz	r3, 800ad0e <HAL_RCC_OscConfig+0x152>
 800ace4:	682b      	ldr	r3, [r5, #0]
 800ace6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800acea:	602b      	str	r3, [r5, #0]
 800acec:	682b      	ldr	r3, [r5, #0]
 800acee:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800acf2:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800acf4:	f7fc fdb2 	bl	800785c <HAL_GetTick>
 800acf8:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800acfa:	682b      	ldr	r3, [r5, #0]
 800acfc:	039f      	lsls	r7, r3, #14
 800acfe:	f57f af64 	bpl.w	800abca <HAL_RCC_OscConfig+0xe>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800ad02:	f7fc fdab 	bl	800785c <HAL_GetTick>
 800ad06:	1b80      	subs	r0, r0, r6
 800ad08:	2864      	cmp	r0, #100	@ 0x64
 800ad0a:	d9f6      	bls.n	800acfa <HAL_RCC_OscConfig+0x13e>
 800ad0c:	e7e7      	b.n	800acde <HAL_RCC_OscConfig+0x122>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800ad0e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800ad12:	682b      	ldr	r3, [r5, #0]
 800ad14:	d103      	bne.n	800ad1e <HAL_RCC_OscConfig+0x162>
 800ad16:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800ad1a:	602b      	str	r3, [r5, #0]
 800ad1c:	e7ce      	b.n	800acbc <HAL_RCC_OscConfig+0x100>
 800ad1e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800ad22:	602b      	str	r3, [r5, #0]
 800ad24:	682b      	ldr	r3, [r5, #0]
 800ad26:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800ad2a:	e7ca      	b.n	800acc2 <HAL_RCC_OscConfig+0x106>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800ad2c:	4947      	ldr	r1, [pc, #284]	@ (800ae4c <HAL_RCC_OscConfig+0x290>)
 800ad2e:	68e2      	ldr	r2, [r4, #12]
 800ad30:	690b      	ldr	r3, [r1, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800ad32:	6a88      	ldr	r0, [r1, #40]	@ 0x28
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800ad34:	f013 0338 	ands.w	r3, r3, #56	@ 0x38
 800ad38:	d003      	beq.n	800ad42 <HAL_RCC_OscConfig+0x186>
 800ad3a:	2b18      	cmp	r3, #24
 800ad3c:	d12a      	bne.n	800ad94 <HAL_RCC_OscConfig+0x1d8>
 800ad3e:	0780      	lsls	r0, r0, #30
 800ad40:	d128      	bne.n	800ad94 <HAL_RCC_OscConfig+0x1d8>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800ad42:	680b      	ldr	r3, [r1, #0]
 800ad44:	075b      	lsls	r3, r3, #29
 800ad46:	d501      	bpl.n	800ad4c <HAL_RCC_OscConfig+0x190>
 800ad48:	2a00      	cmp	r2, #0
 800ad4a:	d0b0      	beq.n	800acae <HAL_RCC_OscConfig+0xf2>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800ad4c:	4d3f      	ldr	r5, [pc, #252]	@ (800ae4c <HAL_RCC_OscConfig+0x290>)
 800ad4e:	682b      	ldr	r3, [r5, #0]
 800ad50:	f023 0319 	bic.w	r3, r3, #25
 800ad54:	4313      	orrs	r3, r2
 800ad56:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800ad58:	f7fc fd80 	bl	800785c <HAL_GetTick>
 800ad5c:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800ad5e:	682b      	ldr	r3, [r5, #0]
 800ad60:	075f      	lsls	r7, r3, #29
 800ad62:	d511      	bpl.n	800ad88 <HAL_RCC_OscConfig+0x1cc>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800ad64:	f7fc fd92 	bl	800788c <HAL_GetREVID>
 800ad68:	f241 0303 	movw	r3, #4099	@ 0x1003
 800ad6c:	6922      	ldr	r2, [r4, #16]
 800ad6e:	4298      	cmp	r0, r3
 800ad70:	686b      	ldr	r3, [r5, #4]
 800ad72:	d822      	bhi.n	800adba <HAL_RCC_OscConfig+0x1fe>
 800ad74:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 800ad78:	2a40      	cmp	r2, #64	@ 0x40
 800ad7a:	bf0c      	ite	eq
 800ad7c:	f443 3300 	orreq.w	r3, r3, #131072	@ 0x20000
 800ad80:	ea43 3302 	orrne.w	r3, r3, r2, lsl #12
 800ad84:	606b      	str	r3, [r5, #4]
 800ad86:	e724      	b.n	800abd2 <HAL_RCC_OscConfig+0x16>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800ad88:	f7fc fd68 	bl	800785c <HAL_GetTick>
 800ad8c:	1b80      	subs	r0, r0, r6
 800ad8e:	2802      	cmp	r0, #2
 800ad90:	d9e5      	bls.n	800ad5e <HAL_RCC_OscConfig+0x1a2>
 800ad92:	e7a4      	b.n	800acde <HAL_RCC_OscConfig+0x122>
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800ad94:	4d2d      	ldr	r5, [pc, #180]	@ (800ae4c <HAL_RCC_OscConfig+0x290>)
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800ad96:	682b      	ldr	r3, [r5, #0]
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800ad98:	b1a2      	cbz	r2, 800adc4 <HAL_RCC_OscConfig+0x208>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800ad9a:	f023 0319 	bic.w	r3, r3, #25
 800ad9e:	4313      	orrs	r3, r2
 800ada0:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800ada2:	f7fc fd5b 	bl	800785c <HAL_GetTick>
 800ada6:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800ada8:	682b      	ldr	r3, [r5, #0]
 800adaa:	0758      	lsls	r0, r3, #29
 800adac:	d4da      	bmi.n	800ad64 <HAL_RCC_OscConfig+0x1a8>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800adae:	f7fc fd55 	bl	800785c <HAL_GetTick>
 800adb2:	1b80      	subs	r0, r0, r6
 800adb4:	2802      	cmp	r0, #2
 800adb6:	d9f7      	bls.n	800ada8 <HAL_RCC_OscConfig+0x1ec>
 800adb8:	e791      	b.n	800acde <HAL_RCC_OscConfig+0x122>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800adba:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 800adbe:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800adc2:	e7df      	b.n	800ad84 <HAL_RCC_OscConfig+0x1c8>
        __HAL_RCC_HSI_DISABLE();
 800adc4:	f023 0301 	bic.w	r3, r3, #1
 800adc8:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800adca:	f7fc fd47 	bl	800785c <HAL_GetTick>
 800adce:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800add0:	682b      	ldr	r3, [r5, #0]
 800add2:	0759      	lsls	r1, r3, #29
 800add4:	f57f aefd 	bpl.w	800abd2 <HAL_RCC_OscConfig+0x16>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800add8:	f7fc fd40 	bl	800785c <HAL_GetTick>
 800addc:	1b80      	subs	r0, r0, r6
 800adde:	2802      	cmp	r0, #2
 800ade0:	d9f6      	bls.n	800add0 <HAL_RCC_OscConfig+0x214>
 800ade2:	e77c      	b.n	800acde <HAL_RCC_OscConfig+0x122>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800ade4:	68da      	ldr	r2, [r3, #12]
 800ade6:	f022 527c 	bic.w	r2, r2, #1056964608	@ 0x3f000000
 800adea:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800adee:	60da      	str	r2, [r3, #12]
 800adf0:	e71a      	b.n	800ac28 <HAL_RCC_OscConfig+0x6c>
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800adf2:	69e3      	ldr	r3, [r4, #28]
 800adf4:	4d15      	ldr	r5, [pc, #84]	@ (800ae4c <HAL_RCC_OscConfig+0x290>)
 800adf6:	b36b      	cbz	r3, 800ae54 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_CSI_ENABLE();
 800adf8:	682b      	ldr	r3, [r5, #0]
 800adfa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800adfe:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800ae00:	f7fc fd2c 	bl	800785c <HAL_GetTick>
 800ae04:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800ae06:	682b      	ldr	r3, [r5, #0]
 800ae08:	05df      	lsls	r7, r3, #23
 800ae0a:	d511      	bpl.n	800ae30 <HAL_RCC_OscConfig+0x274>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800ae0c:	f7fc fd3e 	bl	800788c <HAL_GetREVID>
 800ae10:	f241 0303 	movw	r3, #4099	@ 0x1003
 800ae14:	6a22      	ldr	r2, [r4, #32]
 800ae16:	4298      	cmp	r0, r3
 800ae18:	d810      	bhi.n	800ae3c <HAL_RCC_OscConfig+0x280>
 800ae1a:	686b      	ldr	r3, [r5, #4]
 800ae1c:	2a20      	cmp	r2, #32
 800ae1e:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 800ae22:	bf0c      	ite	eq
 800ae24:	f043 4380 	orreq.w	r3, r3, #1073741824	@ 0x40000000
 800ae28:	ea43 6382 	orrne.w	r3, r3, r2, lsl #26
 800ae2c:	606b      	str	r3, [r5, #4]
 800ae2e:	e6fb      	b.n	800ac28 <HAL_RCC_OscConfig+0x6c>
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800ae30:	f7fc fd14 	bl	800785c <HAL_GetTick>
 800ae34:	1b80      	subs	r0, r0, r6
 800ae36:	2802      	cmp	r0, #2
 800ae38:	d9e5      	bls.n	800ae06 <HAL_RCC_OscConfig+0x24a>
 800ae3a:	e750      	b.n	800acde <HAL_RCC_OscConfig+0x122>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800ae3c:	68eb      	ldr	r3, [r5, #12]
 800ae3e:	f023 537c 	bic.w	r3, r3, #1056964608	@ 0x3f000000
 800ae42:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800ae46:	60eb      	str	r3, [r5, #12]
 800ae48:	e6ee      	b.n	800ac28 <HAL_RCC_OscConfig+0x6c>
 800ae4a:	bf00      	nop
 800ae4c:	58024400 	.word	0x58024400
 800ae50:	58024800 	.word	0x58024800
        __HAL_RCC_CSI_DISABLE();
 800ae54:	682b      	ldr	r3, [r5, #0]
 800ae56:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800ae5a:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800ae5c:	f7fc fcfe 	bl	800785c <HAL_GetTick>
 800ae60:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800ae62:	682b      	ldr	r3, [r5, #0]
 800ae64:	05d8      	lsls	r0, r3, #23
 800ae66:	f57f aedf 	bpl.w	800ac28 <HAL_RCC_OscConfig+0x6c>
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800ae6a:	f7fc fcf7 	bl	800785c <HAL_GetTick>
 800ae6e:	1b80      	subs	r0, r0, r6
 800ae70:	2802      	cmp	r0, #2
 800ae72:	d9f6      	bls.n	800ae62 <HAL_RCC_OscConfig+0x2a6>
 800ae74:	e733      	b.n	800acde <HAL_RCC_OscConfig+0x122>
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800ae76:	6963      	ldr	r3, [r4, #20]
 800ae78:	4da5      	ldr	r5, [pc, #660]	@ (800b110 <HAL_RCC_OscConfig+0x554>)
 800ae7a:	b183      	cbz	r3, 800ae9e <HAL_RCC_OscConfig+0x2e2>
      __HAL_RCC_LSI_ENABLE();
 800ae7c:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 800ae7e:	f043 0301 	orr.w	r3, r3, #1
 800ae82:	676b      	str	r3, [r5, #116]	@ 0x74
      tickstart = HAL_GetTick();
 800ae84:	f7fc fcea 	bl	800785c <HAL_GetTick>
 800ae88:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800ae8a:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 800ae8c:	079b      	lsls	r3, r3, #30
 800ae8e:	f53f aecf 	bmi.w	800ac30 <HAL_RCC_OscConfig+0x74>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800ae92:	f7fc fce3 	bl	800785c <HAL_GetTick>
 800ae96:	1b80      	subs	r0, r0, r6
 800ae98:	2802      	cmp	r0, #2
 800ae9a:	d9f6      	bls.n	800ae8a <HAL_RCC_OscConfig+0x2ce>
 800ae9c:	e71f      	b.n	800acde <HAL_RCC_OscConfig+0x122>
      __HAL_RCC_LSI_DISABLE();
 800ae9e:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 800aea0:	f023 0301 	bic.w	r3, r3, #1
 800aea4:	676b      	str	r3, [r5, #116]	@ 0x74
      tickstart = HAL_GetTick();
 800aea6:	f7fc fcd9 	bl	800785c <HAL_GetTick>
 800aeaa:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800aeac:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 800aeae:	079f      	lsls	r7, r3, #30
 800aeb0:	f57f aebe 	bpl.w	800ac30 <HAL_RCC_OscConfig+0x74>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800aeb4:	f7fc fcd2 	bl	800785c <HAL_GetTick>
 800aeb8:	1b80      	subs	r0, r0, r6
 800aeba:	2802      	cmp	r0, #2
 800aebc:	d9f6      	bls.n	800aeac <HAL_RCC_OscConfig+0x2f0>
 800aebe:	e70e      	b.n	800acde <HAL_RCC_OscConfig+0x122>
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800aec0:	69a3      	ldr	r3, [r4, #24]
 800aec2:	4d93      	ldr	r5, [pc, #588]	@ (800b110 <HAL_RCC_OscConfig+0x554>)
 800aec4:	b183      	cbz	r3, 800aee8 <HAL_RCC_OscConfig+0x32c>
      __HAL_RCC_HSI48_ENABLE();
 800aec6:	682b      	ldr	r3, [r5, #0]
 800aec8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800aecc:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 800aece:	f7fc fcc5 	bl	800785c <HAL_GetTick>
 800aed2:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800aed4:	682b      	ldr	r3, [r5, #0]
 800aed6:	0498      	lsls	r0, r3, #18
 800aed8:	f53f aeae 	bmi.w	800ac38 <HAL_RCC_OscConfig+0x7c>
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800aedc:	f7fc fcbe 	bl	800785c <HAL_GetTick>
 800aee0:	1b80      	subs	r0, r0, r6
 800aee2:	2802      	cmp	r0, #2
 800aee4:	d9f6      	bls.n	800aed4 <HAL_RCC_OscConfig+0x318>
 800aee6:	e6fa      	b.n	800acde <HAL_RCC_OscConfig+0x122>
      __HAL_RCC_HSI48_DISABLE();
 800aee8:	682b      	ldr	r3, [r5, #0]
 800aeea:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800aeee:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 800aef0:	f7fc fcb4 	bl	800785c <HAL_GetTick>
 800aef4:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800aef6:	682b      	ldr	r3, [r5, #0]
 800aef8:	0499      	lsls	r1, r3, #18
 800aefa:	f57f ae9d 	bpl.w	800ac38 <HAL_RCC_OscConfig+0x7c>
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800aefe:	f7fc fcad 	bl	800785c <HAL_GetTick>
 800af02:	1b80      	subs	r0, r0, r6
 800af04:	2802      	cmp	r0, #2
 800af06:	d9f6      	bls.n	800aef6 <HAL_RCC_OscConfig+0x33a>
 800af08:	e6e9      	b.n	800acde <HAL_RCC_OscConfig+0x122>
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800af0a:	f7fc fca7 	bl	800785c <HAL_GetTick>
 800af0e:	1b80      	subs	r0, r0, r6
 800af10:	2864      	cmp	r0, #100	@ 0x64
 800af12:	f67f ae9c 	bls.w	800ac4e <HAL_RCC_OscConfig+0x92>
 800af16:	e6e2      	b.n	800acde <HAL_RCC_OscConfig+0x122>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800af18:	b9b3      	cbnz	r3, 800af48 <HAL_RCC_OscConfig+0x38c>
 800af1a:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800af1c:	f241 3788 	movw	r7, #5000	@ 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800af20:	f023 0301 	bic.w	r3, r3, #1
 800af24:	672b      	str	r3, [r5, #112]	@ 0x70
 800af26:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 800af28:	f023 0304 	bic.w	r3, r3, #4
 800af2c:	672b      	str	r3, [r5, #112]	@ 0x70
      tickstart = HAL_GetTick();
 800af2e:	f7fc fc95 	bl	800785c <HAL_GetTick>
 800af32:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800af34:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 800af36:	0798      	lsls	r0, r3, #30
 800af38:	f57f aea0 	bpl.w	800ac7c <HAL_RCC_OscConfig+0xc0>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800af3c:	f7fc fc8e 	bl	800785c <HAL_GetTick>
 800af40:	1b80      	subs	r0, r0, r6
 800af42:	42b8      	cmp	r0, r7
 800af44:	d9f6      	bls.n	800af34 <HAL_RCC_OscConfig+0x378>
 800af46:	e6ca      	b.n	800acde <HAL_RCC_OscConfig+0x122>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800af48:	2b05      	cmp	r3, #5
 800af4a:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 800af4c:	d103      	bne.n	800af56 <HAL_RCC_OscConfig+0x39a>
 800af4e:	f043 0304 	orr.w	r3, r3, #4
 800af52:	672b      	str	r3, [r5, #112]	@ 0x70
 800af54:	e684      	b.n	800ac60 <HAL_RCC_OscConfig+0xa4>
 800af56:	f023 0301 	bic.w	r3, r3, #1
 800af5a:	672b      	str	r3, [r5, #112]	@ 0x70
 800af5c:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 800af5e:	f023 0304 	bic.w	r3, r3, #4
 800af62:	e680      	b.n	800ac66 <HAL_RCC_OscConfig+0xaa>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800af64:	f7fc fc7a 	bl	800785c <HAL_GetTick>
 800af68:	1b40      	subs	r0, r0, r5
 800af6a:	42b8      	cmp	r0, r7
 800af6c:	f67f ae82 	bls.w	800ac74 <HAL_RCC_OscConfig+0xb8>
 800af70:	e6b5      	b.n	800acde <HAL_RCC_OscConfig+0x122>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800af72:	4d67      	ldr	r5, [pc, #412]	@ (800b110 <HAL_RCC_OscConfig+0x554>)
 800af74:	692b      	ldr	r3, [r5, #16]
 800af76:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800af7a:	2b18      	cmp	r3, #24
 800af7c:	d07a      	beq.n	800b074 <HAL_RCC_OscConfig+0x4b8>
        __HAL_RCC_PLL_DISABLE();
 800af7e:	682b      	ldr	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800af80:	2902      	cmp	r1, #2
        __HAL_RCC_PLL_DISABLE();
 800af82:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800af86:	602b      	str	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800af88:	d167      	bne.n	800b05a <HAL_RCC_OscConfig+0x49e>
        tickstart = HAL_GetTick();
 800af8a:	f7fc fc67 	bl	800785c <HAL_GetTick>
 800af8e:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800af90:	682b      	ldr	r3, [r5, #0]
 800af92:	0199      	lsls	r1, r3, #6
 800af94:	d45b      	bmi.n	800b04e <HAL_RCC_OscConfig+0x492>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800af96:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 800af98:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 800af9a:	f423 737c 	bic.w	r3, r3, #1008	@ 0x3f0
 800af9e:	f023 0303 	bic.w	r3, r3, #3
 800afa2:	4313      	orrs	r3, r2
 800afa4:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800afa6:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 800afaa:	62ab      	str	r3, [r5, #40]	@ 0x28
 800afac:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800afae:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800afb0:	3b01      	subs	r3, #1
 800afb2:	3a01      	subs	r2, #1
 800afb4:	025b      	lsls	r3, r3, #9
 800afb6:	0412      	lsls	r2, r2, #16
 800afb8:	b29b      	uxth	r3, r3
 800afba:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 800afbe:	4313      	orrs	r3, r2
 800afc0:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 800afc2:	3a01      	subs	r2, #1
 800afc4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800afc8:	4313      	orrs	r3, r2
 800afca:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 800afcc:	3a01      	subs	r2, #1
 800afce:	0612      	lsls	r2, r2, #24
 800afd0:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 800afd4:	4313      	orrs	r3, r2
 800afd6:	632b      	str	r3, [r5, #48]	@ 0x30
        __HAL_RCC_PLLFRACN_DISABLE();
 800afd8:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 800afda:	f023 0301 	bic.w	r3, r3, #1
 800afde:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800afe0:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 800afe2:	6ca2      	ldr	r2, [r4, #72]	@ 0x48
 800afe4:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800afe8:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800afec:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800aff0:	636b      	str	r3, [r5, #52]	@ 0x34
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800aff2:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 800aff4:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 800aff6:	f023 030c 	bic.w	r3, r3, #12
 800affa:	4313      	orrs	r3, r2
 800affc:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800affe:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 800b000:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 800b002:	f023 0302 	bic.w	r3, r3, #2
 800b006:	4313      	orrs	r3, r2
 800b008:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800b00a:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 800b00c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800b010:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b012:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 800b014:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b018:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800b01a:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 800b01c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800b020:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLLFRACN_ENABLE();
 800b022:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 800b024:	f043 0301 	orr.w	r3, r3, #1
 800b028:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLL_ENABLE();
 800b02a:	682b      	ldr	r3, [r5, #0]
 800b02c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800b030:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800b032:	f7fc fc13 	bl	800785c <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800b036:	4d36      	ldr	r5, [pc, #216]	@ (800b110 <HAL_RCC_OscConfig+0x554>)
        tickstart = HAL_GetTick();
 800b038:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800b03a:	682b      	ldr	r3, [r5, #0]
 800b03c:	019a      	lsls	r2, r3, #6
 800b03e:	f53f ae21 	bmi.w	800ac84 <HAL_RCC_OscConfig+0xc8>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b042:	f7fc fc0b 	bl	800785c <HAL_GetTick>
 800b046:	1b00      	subs	r0, r0, r4
 800b048:	2802      	cmp	r0, #2
 800b04a:	d9f6      	bls.n	800b03a <HAL_RCC_OscConfig+0x47e>
 800b04c:	e647      	b.n	800acde <HAL_RCC_OscConfig+0x122>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b04e:	f7fc fc05 	bl	800785c <HAL_GetTick>
 800b052:	1b80      	subs	r0, r0, r6
 800b054:	2802      	cmp	r0, #2
 800b056:	d99b      	bls.n	800af90 <HAL_RCC_OscConfig+0x3d4>
 800b058:	e641      	b.n	800acde <HAL_RCC_OscConfig+0x122>
        tickstart = HAL_GetTick();
 800b05a:	f7fc fbff 	bl	800785c <HAL_GetTick>
 800b05e:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800b060:	682b      	ldr	r3, [r5, #0]
 800b062:	019b      	lsls	r3, r3, #6
 800b064:	f57f ae0e 	bpl.w	800ac84 <HAL_RCC_OscConfig+0xc8>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b068:	f7fc fbf8 	bl	800785c <HAL_GetTick>
 800b06c:	1b00      	subs	r0, r0, r4
 800b06e:	2802      	cmp	r0, #2
 800b070:	d9f6      	bls.n	800b060 <HAL_RCC_OscConfig+0x4a4>
 800b072:	e634      	b.n	800acde <HAL_RCC_OscConfig+0x122>
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800b074:	2901      	cmp	r1, #1
      temp1_pllckcfg = RCC->PLLCKSELR;
 800b076:	6aaa      	ldr	r2, [r5, #40]	@ 0x28
      temp2_pllckcfg = RCC->PLL1DIVR;
 800b078:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800b07a:	f43f ae18 	beq.w	800acae <HAL_RCC_OscConfig+0xf2>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b07e:	f002 0103 	and.w	r1, r2, #3
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800b082:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 800b084:	4281      	cmp	r1, r0
 800b086:	f47f ae12 	bne.w	800acae <HAL_RCC_OscConfig+0xf2>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800b08a:	f3c2 1205 	ubfx	r2, r2, #4, #6
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b08e:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800b090:	428a      	cmp	r2, r1
 800b092:	f47f ae0c 	bne.w	800acae <HAL_RCC_OscConfig+0xf2>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800b096:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 800b098:	f3c3 0108 	ubfx	r1, r3, #0, #9
 800b09c:	3a01      	subs	r2, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800b09e:	4291      	cmp	r1, r2
 800b0a0:	f47f ae05 	bne.w	800acae <HAL_RCC_OscConfig+0xf2>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800b0a4:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 800b0a6:	f3c3 2146 	ubfx	r1, r3, #9, #7
 800b0aa:	3a01      	subs	r2, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800b0ac:	4291      	cmp	r1, r2
 800b0ae:	f47f adfe 	bne.w	800acae <HAL_RCC_OscConfig+0xf2>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800b0b2:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800b0b4:	f3c3 4106 	ubfx	r1, r3, #16, #7
 800b0b8:	3a01      	subs	r2, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800b0ba:	4291      	cmp	r1, r2
 800b0bc:	f47f adf7 	bne.w	800acae <HAL_RCC_OscConfig+0xf2>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800b0c0:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 800b0c2:	f3c3 6306 	ubfx	r3, r3, #24, #7
 800b0c6:	3a01      	subs	r2, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800b0c8:	4293      	cmp	r3, r2
 800b0ca:	f47f adf0 	bne.w	800acae <HAL_RCC_OscConfig+0xf2>
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800b0ce:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800b0d0:	6ca2      	ldr	r2, [r4, #72]	@ 0x48
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800b0d2:	f3c3 03cc 	ubfx	r3, r3, #3, #13
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800b0d6:	429a      	cmp	r2, r3
 800b0d8:	f43f add4 	beq.w	800ac84 <HAL_RCC_OscConfig+0xc8>
          __HAL_RCC_PLLFRACN_DISABLE();
 800b0dc:	4d0c      	ldr	r5, [pc, #48]	@ (800b110 <HAL_RCC_OscConfig+0x554>)
 800b0de:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 800b0e0:	f023 0301 	bic.w	r3, r3, #1
 800b0e4:	62eb      	str	r3, [r5, #44]	@ 0x2c
          tickstart = HAL_GetTick();
 800b0e6:	f7fc fbb9 	bl	800785c <HAL_GetTick>
 800b0ea:	4606      	mov	r6, r0
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800b0ec:	f7fc fbb6 	bl	800785c <HAL_GetTick>
 800b0f0:	42b0      	cmp	r0, r6
 800b0f2:	d0fb      	beq.n	800b0ec <HAL_RCC_OscConfig+0x530>
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800b0f4:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 800b0f6:	6ca2      	ldr	r2, [r4, #72]	@ 0x48
 800b0f8:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800b0fc:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800b100:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800b104:	636b      	str	r3, [r5, #52]	@ 0x34
          __HAL_RCC_PLLFRACN_ENABLE();
 800b106:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 800b108:	f043 0301 	orr.w	r3, r3, #1
 800b10c:	62eb      	str	r3, [r5, #44]	@ 0x2c
 800b10e:	e5b9      	b.n	800ac84 <HAL_RCC_OscConfig+0xc8>
 800b110:	58024400 	.word	0x58024400

0800b114 <HAL_RCC_MCOConfig>:
  *          This parameter can be one of the following values:
  *            @arg RCC_MCODIV_1 up to RCC_MCODIV_15  : divider applied to MCOx clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 800b114:	b570      	push	{r4, r5, r6, lr}
 800b116:	4c23      	ldr	r4, [pc, #140]	@ (800b1a4 <HAL_RCC_MCOConfig+0x90>)
 800b118:	b088      	sub	sp, #32
 800b11a:	460e      	mov	r6, r1
 800b11c:	4615      	mov	r5, r2
  if (RCC_MCOx == RCC_MCO1)
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    MCO1_CLK_ENABLE();
 800b11e:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
  if (RCC_MCOx == RCC_MCO1)
 800b122:	b9f8      	cbnz	r0, 800b164 <HAL_RCC_MCOConfig+0x50>
    MCO1_CLK_ENABLE();
 800b124:	f043 0301 	orr.w	r3, r3, #1

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b128:	f44f 7c80 	mov.w	ip, #256	@ 0x100
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 800b12c:	a903      	add	r1, sp, #12
    MCO1_CLK_ENABLE();
 800b12e:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
 800b132:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800b136:	9007      	str	r0, [sp, #28]
    MCO1_CLK_ENABLE();
 800b138:	f003 0301 	and.w	r3, r3, #1
 800b13c:	9301      	str	r3, [sp, #4]
 800b13e:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b140:	2302      	movs	r3, #2
 800b142:	e9cd c303 	strd	ip, r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b146:	2303      	movs	r3, #3
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b148:	e9cd 0305 	strd	r0, r3, [sp, #20]
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 800b14c:	4816      	ldr	r0, [pc, #88]	@ (800b1a8 <HAL_RCC_MCOConfig+0x94>)
 800b14e:	f7fd fa0b 	bl	8008568 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[3:0] bits then Select MCO1 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 800b152:	6923      	ldr	r3, [r4, #16]
 800b154:	f023 73fe 	bic.w	r3, r3, #33292288	@ 0x1fc0000
 800b158:	ea43 0106 	orr.w	r1, r3, r6
 800b15c:	4329      	orrs	r1, r5
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);

    /* Mask MCO2 and MCO2PRE[3:0] bits then Select MCO2 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
 800b15e:	6121      	str	r1, [r4, #16]
  }
}
 800b160:	b008      	add	sp, #32
 800b162:	bd70      	pop	{r4, r5, r6, pc}
    MCO2_CLK_ENABLE();
 800b164:	f043 0304 	orr.w	r3, r3, #4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b168:	f44f 7200 	mov.w	r2, #512	@ 0x200
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b16c:	2103      	movs	r1, #3
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 800b16e:	480f      	ldr	r0, [pc, #60]	@ (800b1ac <HAL_RCC_MCOConfig+0x98>)
    MCO2_CLK_ENABLE();
 800b170:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
 800b174:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 800b178:	f003 0304 	and.w	r3, r3, #4
 800b17c:	9302      	str	r3, [sp, #8]
 800b17e:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b180:	2302      	movs	r3, #2
 800b182:	e9cd 2303 	strd	r2, r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b186:	2300      	movs	r3, #0
 800b188:	e9cd 3105 	strd	r3, r1, [sp, #20]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 800b18c:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800b18e:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 800b190:	f7fd f9ea 	bl	8008568 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
 800b194:	6923      	ldr	r3, [r4, #16]
 800b196:	f023 437e 	bic.w	r3, r3, #4261412864	@ 0xfe000000
 800b19a:	ea43 0106 	orr.w	r1, r3, r6
 800b19e:	ea41 11c5 	orr.w	r1, r1, r5, lsl #7
 800b1a2:	e7dc      	b.n	800b15e <HAL_RCC_MCOConfig+0x4a>
 800b1a4:	58024400 	.word	0x58024400
 800b1a8:	58020000 	.word	0x58020000
 800b1ac:	58020800 	.word	0x58020800

0800b1b0 <HAL_RCC_GetSysClockFreq>:
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800b1b0:	4b49      	ldr	r3, [pc, #292]	@ (800b2d8 <HAL_RCC_GetSysClockFreq+0x128>)
 800b1b2:	691a      	ldr	r2, [r3, #16]
 800b1b4:	f002 0238 	and.w	r2, r2, #56	@ 0x38
 800b1b8:	2a10      	cmp	r2, #16
{
 800b1ba:	b530      	push	{r4, r5, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800b1bc:	f000 8088 	beq.w	800b2d0 <HAL_RCC_GetSysClockFreq+0x120>
 800b1c0:	2a18      	cmp	r2, #24
 800b1c2:	d00c      	beq.n	800b1de <HAL_RCC_GetSysClockFreq+0x2e>
 800b1c4:	2a00      	cmp	r2, #0
 800b1c6:	f040 8085 	bne.w	800b2d4 <HAL_RCC_GetSysClockFreq+0x124>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b1ca:	681a      	ldr	r2, [r3, #0]
 800b1cc:	4843      	ldr	r0, [pc, #268]	@ (800b2dc <HAL_RCC_GetSysClockFreq+0x12c>)
 800b1ce:	f012 0f20 	tst.w	r2, #32
 800b1d2:	d003      	beq.n	800b1dc <HAL_RCC_GetSysClockFreq+0x2c>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b1d4:	681b      	ldr	r3, [r3, #0]
 800b1d6:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800b1da:	40d8      	lsrs	r0, r3
      sysclockfreq = CSI_VALUE;
      break;
  }

  return sysclockfreq;
}
 800b1dc:	bd30      	pop	{r4, r5, pc}
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b1de:	6a99      	ldr	r1, [r3, #40]	@ 0x28
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800b1e0:	6a9d      	ldr	r5, [r3, #40]	@ 0x28
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800b1e2:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
      if (pllm != 0U)
 800b1e4:	f415 7f7c 	tst.w	r5, #1008	@ 0x3f0
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800b1e8:	f3c5 1005 	ubfx	r0, r5, #4, #6
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800b1ec:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
      if (pllm != 0U)
 800b1ee:	d0f5      	beq.n	800b1dc <HAL_RCC_GetSysClockFreq+0x2c>
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800b1f0:	f3c2 02cc 	ubfx	r2, r2, #3, #13
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800b1f4:	f004 0401 	and.w	r4, r4, #1
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b1f8:	f001 0103 	and.w	r1, r1, #3
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b1fc:	ee07 0a90 	vmov	s15, r0
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800b200:	4362      	muls	r2, r4
 800b202:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 800b206:	2901      	cmp	r1, #1
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b208:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800b20c:	ee06 2a90 	vmov	s13, r2
 800b210:	eefa 6ae9 	vcvt.f32.s32	s13, s13, #13
 800b214:	d04e      	beq.n	800b2b4 <HAL_RCC_GetSysClockFreq+0x104>
 800b216:	2902      	cmp	r1, #2
 800b218:	d03e      	beq.n	800b298 <HAL_RCC_GetSysClockFreq+0xe8>
 800b21a:	2900      	cmp	r1, #0
 800b21c:	d14a      	bne.n	800b2b4 <HAL_RCC_GetSysClockFreq+0x104>
            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b21e:	681a      	ldr	r2, [r3, #0]
 800b220:	0692      	lsls	r2, r2, #26
 800b222:	d527      	bpl.n	800b274 <HAL_RCC_GetSysClockFreq+0xc4>
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b224:	6819      	ldr	r1, [r3, #0]
 800b226:	4a2d      	ldr	r2, [pc, #180]	@ (800b2dc <HAL_RCC_GetSysClockFreq+0x12c>)
 800b228:	f3c1 01c1 	ubfx	r1, r1, #3, #2
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b22c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b22e:	40ca      	lsrs	r2, r1
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b230:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b234:	ee07 2a90 	vmov	s15, r2
 800b238:	eef8 5ae7 	vcvt.f32.s32	s11, s15
 800b23c:	eec5 7a87 	vdiv.f32	s15, s11, s14
 800b240:	ee07 3a10 	vmov	s14, r3
 800b244:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800b248:	ee37 7a26 	vadd.f32	s14, s14, s13
 800b24c:	ee37 7a06 	vadd.f32	s14, s14, s12
 800b250:	ee67 7a87 	vmul.f32	s15, s15, s14
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800b254:	4b20      	ldr	r3, [pc, #128]	@ (800b2d8 <HAL_RCC_GetSysClockFreq+0x128>)
 800b256:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b258:	f3c3 2346 	ubfx	r3, r3, #9, #7
 800b25c:	3301      	adds	r3, #1
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800b25e:	ee07 3a10 	vmov	s14, r3
 800b262:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 800b266:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800b26a:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 800b26e:	ee17 0a90 	vmov	r0, s15
 800b272:	e7b3      	b.n	800b1dc <HAL_RCC_GetSysClockFreq+0x2c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b274:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b276:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b27a:	ee07 3a90 	vmov	s15, r3
 800b27e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b282:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b286:	ee77 7a86 	vadd.f32	s15, s15, s12
 800b28a:	ed9f 6a15 	vldr	s12, [pc, #84]	@ 800b2e0 <HAL_RCC_GetSysClockFreq+0x130>
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b28e:	eec6 6a07 	vdiv.f32	s13, s12, s14
 800b292:	ee67 7aa6 	vmul.f32	s15, s15, s13
            break;
 800b296:	e7dd      	b.n	800b254 <HAL_RCC_GetSysClockFreq+0xa4>
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b298:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b29a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b29e:	ee07 3a90 	vmov	s15, r3
 800b2a2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b2a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b2aa:	ee77 7a86 	vadd.f32	s15, s15, s12
 800b2ae:	ed9f 6a0d 	vldr	s12, [pc, #52]	@ 800b2e4 <HAL_RCC_GetSysClockFreq+0x134>
 800b2b2:	e7ec      	b.n	800b28e <HAL_RCC_GetSysClockFreq+0xde>
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b2b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b2b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b2ba:	ee07 3a90 	vmov	s15, r3
 800b2be:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b2c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b2c6:	ee77 7a86 	vadd.f32	s15, s15, s12
 800b2ca:	ed9f 6a07 	vldr	s12, [pc, #28]	@ 800b2e8 <HAL_RCC_GetSysClockFreq+0x138>
 800b2ce:	e7de      	b.n	800b28e <HAL_RCC_GetSysClockFreq+0xde>
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800b2d0:	4806      	ldr	r0, [pc, #24]	@ (800b2ec <HAL_RCC_GetSysClockFreq+0x13c>)
 800b2d2:	e783      	b.n	800b1dc <HAL_RCC_GetSysClockFreq+0x2c>
      sysclockfreq = CSI_VALUE;
 800b2d4:	4806      	ldr	r0, [pc, #24]	@ (800b2f0 <HAL_RCC_GetSysClockFreq+0x140>)
 800b2d6:	e781      	b.n	800b1dc <HAL_RCC_GetSysClockFreq+0x2c>
 800b2d8:	58024400 	.word	0x58024400
 800b2dc:	03d09000 	.word	0x03d09000
 800b2e0:	4c742400 	.word	0x4c742400
 800b2e4:	4bbebc20 	.word	0x4bbebc20
 800b2e8:	4a742400 	.word	0x4a742400
 800b2ec:	017d7840 	.word	0x017d7840
 800b2f0:	003d0900 	.word	0x003d0900

0800b2f4 <HAL_RCC_ClockConfig>:
{
 800b2f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b2f8:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 800b2fa:	4604      	mov	r4, r0
 800b2fc:	b910      	cbnz	r0, 800b304 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 800b2fe:	2001      	movs	r0, #1
}
 800b300:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800b304:	4a88      	ldr	r2, [pc, #544]	@ (800b528 <HAL_RCC_ClockConfig+0x234>)
 800b306:	6813      	ldr	r3, [r2, #0]
 800b308:	f003 030f 	and.w	r3, r3, #15
 800b30c:	428b      	cmp	r3, r1
 800b30e:	f0c0 8093 	bcc.w	800b438 <HAL_RCC_ClockConfig+0x144>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800b312:	6823      	ldr	r3, [r4, #0]
 800b314:	075f      	lsls	r7, r3, #29
 800b316:	f100 809b 	bmi.w	800b450 <HAL_RCC_ClockConfig+0x15c>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b31a:	071e      	lsls	r6, r3, #28
 800b31c:	d50b      	bpl.n	800b336 <HAL_RCC_ClockConfig+0x42>
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800b31e:	4983      	ldr	r1, [pc, #524]	@ (800b52c <HAL_RCC_ClockConfig+0x238>)
 800b320:	6960      	ldr	r0, [r4, #20]
 800b322:	69ca      	ldr	r2, [r1, #28]
 800b324:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 800b328:	4290      	cmp	r0, r2
 800b32a:	d904      	bls.n	800b336 <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800b32c:	69ca      	ldr	r2, [r1, #28]
 800b32e:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 800b332:	4302      	orrs	r2, r0
 800b334:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b336:	06d8      	lsls	r0, r3, #27
 800b338:	d50b      	bpl.n	800b352 <HAL_RCC_ClockConfig+0x5e>
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800b33a:	497c      	ldr	r1, [pc, #496]	@ (800b52c <HAL_RCC_ClockConfig+0x238>)
 800b33c:	69a0      	ldr	r0, [r4, #24]
 800b33e:	69ca      	ldr	r2, [r1, #28]
 800b340:	f402 62e0 	and.w	r2, r2, #1792	@ 0x700
 800b344:	4290      	cmp	r0, r2
 800b346:	d904      	bls.n	800b352 <HAL_RCC_ClockConfig+0x5e>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800b348:	69ca      	ldr	r2, [r1, #28]
 800b34a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800b34e:	4302      	orrs	r2, r0
 800b350:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800b352:	0699      	lsls	r1, r3, #26
 800b354:	d50b      	bpl.n	800b36e <HAL_RCC_ClockConfig+0x7a>
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800b356:	4975      	ldr	r1, [pc, #468]	@ (800b52c <HAL_RCC_ClockConfig+0x238>)
 800b358:	69e0      	ldr	r0, [r4, #28]
 800b35a:	6a0a      	ldr	r2, [r1, #32]
 800b35c:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 800b360:	4290      	cmp	r0, r2
 800b362:	d904      	bls.n	800b36e <HAL_RCC_ClockConfig+0x7a>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800b364:	6a0a      	ldr	r2, [r1, #32]
 800b366:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 800b36a:	4302      	orrs	r2, r0
 800b36c:	620a      	str	r2, [r1, #32]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b36e:	079a      	lsls	r2, r3, #30
 800b370:	d50b      	bpl.n	800b38a <HAL_RCC_ClockConfig+0x96>
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800b372:	496e      	ldr	r1, [pc, #440]	@ (800b52c <HAL_RCC_ClockConfig+0x238>)
 800b374:	68e0      	ldr	r0, [r4, #12]
 800b376:	698a      	ldr	r2, [r1, #24]
 800b378:	f002 020f 	and.w	r2, r2, #15
 800b37c:	4290      	cmp	r0, r2
 800b37e:	d904      	bls.n	800b38a <HAL_RCC_ClockConfig+0x96>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800b380:	698a      	ldr	r2, [r1, #24]
 800b382:	f022 020f 	bic.w	r2, r2, #15
 800b386:	4302      	orrs	r2, r0
 800b388:	618a      	str	r2, [r1, #24]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800b38a:	07df      	lsls	r7, r3, #31
 800b38c:	d46e      	bmi.n	800b46c <HAL_RCC_ClockConfig+0x178>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b38e:	6823      	ldr	r3, [r4, #0]
 800b390:	079e      	lsls	r6, r3, #30
 800b392:	f100 80a1 	bmi.w	800b4d8 <HAL_RCC_ClockConfig+0x1e4>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800b396:	4964      	ldr	r1, [pc, #400]	@ (800b528 <HAL_RCC_ClockConfig+0x234>)
 800b398:	680a      	ldr	r2, [r1, #0]
 800b39a:	f002 020f 	and.w	r2, r2, #15
 800b39e:	42aa      	cmp	r2, r5
 800b3a0:	f200 80a8 	bhi.w	800b4f4 <HAL_RCC_ClockConfig+0x200>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800b3a4:	0758      	lsls	r0, r3, #29
 800b3a6:	f100 80b1 	bmi.w	800b50c <HAL_RCC_ClockConfig+0x218>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b3aa:	0719      	lsls	r1, r3, #28
 800b3ac:	d50b      	bpl.n	800b3c6 <HAL_RCC_ClockConfig+0xd2>
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800b3ae:	495f      	ldr	r1, [pc, #380]	@ (800b52c <HAL_RCC_ClockConfig+0x238>)
 800b3b0:	6960      	ldr	r0, [r4, #20]
 800b3b2:	69ca      	ldr	r2, [r1, #28]
 800b3b4:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 800b3b8:	4290      	cmp	r0, r2
 800b3ba:	d204      	bcs.n	800b3c6 <HAL_RCC_ClockConfig+0xd2>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800b3bc:	69ca      	ldr	r2, [r1, #28]
 800b3be:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 800b3c2:	4302      	orrs	r2, r0
 800b3c4:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b3c6:	06da      	lsls	r2, r3, #27
 800b3c8:	d50b      	bpl.n	800b3e2 <HAL_RCC_ClockConfig+0xee>
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800b3ca:	4958      	ldr	r1, [pc, #352]	@ (800b52c <HAL_RCC_ClockConfig+0x238>)
 800b3cc:	69a0      	ldr	r0, [r4, #24]
 800b3ce:	69ca      	ldr	r2, [r1, #28]
 800b3d0:	f402 62e0 	and.w	r2, r2, #1792	@ 0x700
 800b3d4:	4290      	cmp	r0, r2
 800b3d6:	d204      	bcs.n	800b3e2 <HAL_RCC_ClockConfig+0xee>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800b3d8:	69ca      	ldr	r2, [r1, #28]
 800b3da:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800b3de:	4302      	orrs	r2, r0
 800b3e0:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800b3e2:	069b      	lsls	r3, r3, #26
 800b3e4:	d50b      	bpl.n	800b3fe <HAL_RCC_ClockConfig+0x10a>
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800b3e6:	4a51      	ldr	r2, [pc, #324]	@ (800b52c <HAL_RCC_ClockConfig+0x238>)
 800b3e8:	69e1      	ldr	r1, [r4, #28]
 800b3ea:	6a13      	ldr	r3, [r2, #32]
 800b3ec:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800b3f0:	4299      	cmp	r1, r3
 800b3f2:	d204      	bcs.n	800b3fe <HAL_RCC_ClockConfig+0x10a>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800b3f4:	6a13      	ldr	r3, [r2, #32]
 800b3f6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b3fa:	430b      	orrs	r3, r1
 800b3fc:	6213      	str	r3, [r2, #32]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800b3fe:	f7ff fed7 	bl	800b1b0 <HAL_RCC_GetSysClockFreq>
 800b402:	494a      	ldr	r1, [pc, #296]	@ (800b52c <HAL_RCC_ClockConfig+0x238>)
 800b404:	4a4a      	ldr	r2, [pc, #296]	@ (800b530 <HAL_RCC_ClockConfig+0x23c>)
 800b406:	698b      	ldr	r3, [r1, #24]
 800b408:	f3c3 2303 	ubfx	r3, r3, #8, #4
 800b40c:	5cd3      	ldrb	r3, [r2, r3]
 800b40e:	f003 031f 	and.w	r3, r3, #31
 800b412:	40d8      	lsrs	r0, r3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800b414:	698b      	ldr	r3, [r1, #24]
 800b416:	f003 030f 	and.w	r3, r3, #15
 800b41a:	5cd3      	ldrb	r3, [r2, r3]
 800b41c:	4a45      	ldr	r2, [pc, #276]	@ (800b534 <HAL_RCC_ClockConfig+0x240>)
 800b41e:	f003 031f 	and.w	r3, r3, #31
 800b422:	fa20 f303 	lsr.w	r3, r0, r3
 800b426:	6013      	str	r3, [r2, #0]
  SystemCoreClock = common_system_clock;
 800b428:	4b43      	ldr	r3, [pc, #268]	@ (800b538 <HAL_RCC_ClockConfig+0x244>)
 800b42a:	6018      	str	r0, [r3, #0]
  halstatus = HAL_InitTick(uwTickPrio);
 800b42c:	4b43      	ldr	r3, [pc, #268]	@ (800b53c <HAL_RCC_ClockConfig+0x248>)
}
 800b42e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  halstatus = HAL_InitTick(uwTickPrio);
 800b432:	6818      	ldr	r0, [r3, #0]
 800b434:	f7f6 b898 	b.w	8001568 <HAL_InitTick>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b438:	6813      	ldr	r3, [r2, #0]
 800b43a:	f023 030f 	bic.w	r3, r3, #15
 800b43e:	430b      	orrs	r3, r1
 800b440:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b442:	6813      	ldr	r3, [r2, #0]
 800b444:	f003 030f 	and.w	r3, r3, #15
 800b448:	428b      	cmp	r3, r1
 800b44a:	f47f af58 	bne.w	800b2fe <HAL_RCC_ClockConfig+0xa>
 800b44e:	e760      	b.n	800b312 <HAL_RCC_ClockConfig+0x1e>
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800b450:	4936      	ldr	r1, [pc, #216]	@ (800b52c <HAL_RCC_ClockConfig+0x238>)
 800b452:	6920      	ldr	r0, [r4, #16]
 800b454:	698a      	ldr	r2, [r1, #24]
 800b456:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 800b45a:	4290      	cmp	r0, r2
 800b45c:	f67f af5d 	bls.w	800b31a <HAL_RCC_ClockConfig+0x26>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800b460:	698a      	ldr	r2, [r1, #24]
 800b462:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 800b466:	4302      	orrs	r2, r0
 800b468:	618a      	str	r2, [r1, #24]
 800b46a:	e756      	b.n	800b31a <HAL_RCC_ClockConfig+0x26>
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800b46c:	4b2f      	ldr	r3, [pc, #188]	@ (800b52c <HAL_RCC_ClockConfig+0x238>)
 800b46e:	68a1      	ldr	r1, [r4, #8]
 800b470:	699a      	ldr	r2, [r3, #24]
 800b472:	f422 6270 	bic.w	r2, r2, #3840	@ 0xf00
 800b476:	430a      	orrs	r2, r1
 800b478:	619a      	str	r2, [r3, #24]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800b47a:	6861      	ldr	r1, [r4, #4]
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800b47c:	681a      	ldr	r2, [r3, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800b47e:	2902      	cmp	r1, #2
 800b480:	d11d      	bne.n	800b4be <HAL_RCC_ClockConfig+0x1ca>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800b482:	f412 3f00 	tst.w	r2, #131072	@ 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800b486:	f43f af3a 	beq.w	800b2fe <HAL_RCC_ClockConfig+0xa>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800b48a:	691a      	ldr	r2, [r3, #16]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b48c:	f241 3888 	movw	r8, #5000	@ 0x1388
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b490:	4f26      	ldr	r7, [pc, #152]	@ (800b52c <HAL_RCC_ClockConfig+0x238>)
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800b492:	f022 0207 	bic.w	r2, r2, #7
 800b496:	430a      	orrs	r2, r1
 800b498:	611a      	str	r2, [r3, #16]
    tickstart = HAL_GetTick();
 800b49a:	f7fc f9df 	bl	800785c <HAL_GetTick>
 800b49e:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b4a0:	693b      	ldr	r3, [r7, #16]
 800b4a2:	6862      	ldr	r2, [r4, #4]
 800b4a4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800b4a8:	ebb3 0fc2 	cmp.w	r3, r2, lsl #3
 800b4ac:	f43f af6f 	beq.w	800b38e <HAL_RCC_ClockConfig+0x9a>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b4b0:	f7fc f9d4 	bl	800785c <HAL_GetTick>
 800b4b4:	1b80      	subs	r0, r0, r6
 800b4b6:	4540      	cmp	r0, r8
 800b4b8:	d9f2      	bls.n	800b4a0 <HAL_RCC_ClockConfig+0x1ac>
        return HAL_TIMEOUT;
 800b4ba:	2003      	movs	r0, #3
 800b4bc:	e720      	b.n	800b300 <HAL_RCC_ClockConfig+0xc>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800b4be:	2903      	cmp	r1, #3
 800b4c0:	d102      	bne.n	800b4c8 <HAL_RCC_ClockConfig+0x1d4>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800b4c2:	f012 7f00 	tst.w	r2, #33554432	@ 0x2000000
 800b4c6:	e7de      	b.n	800b486 <HAL_RCC_ClockConfig+0x192>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800b4c8:	2901      	cmp	r1, #1
 800b4ca:	d102      	bne.n	800b4d2 <HAL_RCC_ClockConfig+0x1de>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800b4cc:	f412 7f80 	tst.w	r2, #256	@ 0x100
 800b4d0:	e7d9      	b.n	800b486 <HAL_RCC_ClockConfig+0x192>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800b4d2:	f012 0f04 	tst.w	r2, #4
 800b4d6:	e7d6      	b.n	800b486 <HAL_RCC_ClockConfig+0x192>
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800b4d8:	4914      	ldr	r1, [pc, #80]	@ (800b52c <HAL_RCC_ClockConfig+0x238>)
 800b4da:	68e0      	ldr	r0, [r4, #12]
 800b4dc:	698a      	ldr	r2, [r1, #24]
 800b4de:	f002 020f 	and.w	r2, r2, #15
 800b4e2:	4290      	cmp	r0, r2
 800b4e4:	f4bf af57 	bcs.w	800b396 <HAL_RCC_ClockConfig+0xa2>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800b4e8:	698a      	ldr	r2, [r1, #24]
 800b4ea:	f022 020f 	bic.w	r2, r2, #15
 800b4ee:	4302      	orrs	r2, r0
 800b4f0:	618a      	str	r2, [r1, #24]
 800b4f2:	e750      	b.n	800b396 <HAL_RCC_ClockConfig+0xa2>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b4f4:	680a      	ldr	r2, [r1, #0]
 800b4f6:	f022 020f 	bic.w	r2, r2, #15
 800b4fa:	432a      	orrs	r2, r5
 800b4fc:	600a      	str	r2, [r1, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b4fe:	680a      	ldr	r2, [r1, #0]
 800b500:	f002 020f 	and.w	r2, r2, #15
 800b504:	42aa      	cmp	r2, r5
 800b506:	f47f aefa 	bne.w	800b2fe <HAL_RCC_ClockConfig+0xa>
 800b50a:	e74b      	b.n	800b3a4 <HAL_RCC_ClockConfig+0xb0>
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800b50c:	4907      	ldr	r1, [pc, #28]	@ (800b52c <HAL_RCC_ClockConfig+0x238>)
 800b50e:	6920      	ldr	r0, [r4, #16]
 800b510:	698a      	ldr	r2, [r1, #24]
 800b512:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 800b516:	4290      	cmp	r0, r2
 800b518:	f4bf af47 	bcs.w	800b3aa <HAL_RCC_ClockConfig+0xb6>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800b51c:	698a      	ldr	r2, [r1, #24]
 800b51e:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 800b522:	4302      	orrs	r2, r0
 800b524:	618a      	str	r2, [r1, #24]
 800b526:	e740      	b.n	800b3aa <HAL_RCC_ClockConfig+0xb6>
 800b528:	52002000 	.word	0x52002000
 800b52c:	58024400 	.word	0x58024400
 800b530:	0802b5e0 	.word	0x0802b5e0
 800b534:	24000068 	.word	0x24000068
 800b538:	2400006c 	.word	0x2400006c
 800b53c:	24000074 	.word	0x24000074

0800b540 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800b540:	b508      	push	{r3, lr}
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800b542:	f7ff fe35 	bl	800b1b0 <HAL_RCC_GetSysClockFreq>
 800b546:	4a0b      	ldr	r2, [pc, #44]	@ (800b574 <HAL_RCC_GetHCLKFreq+0x34>)
 800b548:	490b      	ldr	r1, [pc, #44]	@ (800b578 <HAL_RCC_GetHCLKFreq+0x38>)
 800b54a:	6993      	ldr	r3, [r2, #24]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800b54c:	6992      	ldr	r2, [r2, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800b54e:	f3c3 2303 	ubfx	r3, r3, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800b552:	f002 020f 	and.w	r2, r2, #15
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800b556:	5ccb      	ldrb	r3, [r1, r3]
 800b558:	f003 031f 	and.w	r3, r3, #31
 800b55c:	fa20 f303 	lsr.w	r3, r0, r3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800b560:	5c88      	ldrb	r0, [r1, r2]
 800b562:	4a06      	ldr	r2, [pc, #24]	@ (800b57c <HAL_RCC_GetHCLKFreq+0x3c>)
 800b564:	f000 001f 	and.w	r0, r0, #31
 800b568:	fa23 f000 	lsr.w	r0, r3, r0
 800b56c:	6010      	str	r0, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800b56e:	4a04      	ldr	r2, [pc, #16]	@ (800b580 <HAL_RCC_GetHCLKFreq+0x40>)
 800b570:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
}
 800b572:	bd08      	pop	{r3, pc}
 800b574:	58024400 	.word	0x58024400
 800b578:	0802b5e0 	.word	0x0802b5e0
 800b57c:	24000068 	.word	0x24000068
 800b580:	2400006c 	.word	0x2400006c

0800b584 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800b584:	b508      	push	{r3, lr}
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800b586:	f7ff ffdb 	bl	800b540 <HAL_RCC_GetHCLKFreq>
 800b58a:	4b05      	ldr	r3, [pc, #20]	@ (800b5a0 <HAL_RCC_GetPCLK1Freq+0x1c>)
 800b58c:	4a05      	ldr	r2, [pc, #20]	@ (800b5a4 <HAL_RCC_GetPCLK1Freq+0x20>)
 800b58e:	69db      	ldr	r3, [r3, #28]
 800b590:	f3c3 1302 	ubfx	r3, r3, #4, #3
 800b594:	5cd3      	ldrb	r3, [r2, r3]
 800b596:	f003 031f 	and.w	r3, r3, #31
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800b59a:	40d8      	lsrs	r0, r3
 800b59c:	bd08      	pop	{r3, pc}
 800b59e:	bf00      	nop
 800b5a0:	58024400 	.word	0x58024400
 800b5a4:	0802b5e0 	.word	0x0802b5e0

0800b5a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800b5a8:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800b5aa:	f7ff ffc9 	bl	800b540 <HAL_RCC_GetHCLKFreq>
 800b5ae:	4b05      	ldr	r3, [pc, #20]	@ (800b5c4 <HAL_RCC_GetPCLK2Freq+0x1c>)
 800b5b0:	4a05      	ldr	r2, [pc, #20]	@ (800b5c8 <HAL_RCC_GetPCLK2Freq+0x20>)
 800b5b2:	69db      	ldr	r3, [r3, #28]
 800b5b4:	f3c3 2302 	ubfx	r3, r3, #8, #3
 800b5b8:	5cd3      	ldrb	r3, [r2, r3]
 800b5ba:	f003 031f 	and.w	r3, r3, #31
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800b5be:	40d8      	lsrs	r0, r3
 800b5c0:	bd08      	pop	{r3, pc}
 800b5c2:	bf00      	nop
 800b5c4:	58024400 	.word	0x58024400
 800b5c8:	0802b5e0 	.word	0x0802b5e0

0800b5cc <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 800b5cc:	233f      	movs	r3, #63	@ 0x3f
 800b5ce:	6003      	str	r3, [r0, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800b5d0:	4b11      	ldr	r3, [pc, #68]	@ (800b618 <HAL_RCC_GetClockConfig+0x4c>)
 800b5d2:	691a      	ldr	r2, [r3, #16]
 800b5d4:	f002 0207 	and.w	r2, r2, #7
 800b5d8:	6042      	str	r2, [r0, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 800b5da:	699a      	ldr	r2, [r3, #24]
 800b5dc:	f402 6270 	and.w	r2, r2, #3840	@ 0xf00
 800b5e0:	6082      	str	r2, [r0, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 800b5e2:	699a      	ldr	r2, [r3, #24]
 800b5e4:	f002 020f 	and.w	r2, r2, #15
 800b5e8:	60c2      	str	r2, [r0, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 800b5ea:	699a      	ldr	r2, [r3, #24]
 800b5ec:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 800b5f0:	6102      	str	r2, [r0, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 800b5f2:	69da      	ldr	r2, [r3, #28]
 800b5f4:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 800b5f8:	6142      	str	r2, [r0, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 800b5fa:	69da      	ldr	r2, [r3, #28]
 800b5fc:	f402 62e0 	and.w	r2, r2, #1792	@ 0x700
 800b600:	6182      	str	r2, [r0, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 800b602:	6a1b      	ldr	r3, [r3, #32]
 800b604:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800b608:	61c3      	str	r3, [r0, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800b60a:	4b04      	ldr	r3, [pc, #16]	@ (800b61c <HAL_RCC_GetClockConfig+0x50>)
 800b60c:	681b      	ldr	r3, [r3, #0]
 800b60e:	f003 030f 	and.w	r3, r3, #15
 800b612:	600b      	str	r3, [r1, #0]
}
 800b614:	4770      	bx	lr
 800b616:	bf00      	nop
 800b618:	58024400 	.word	0x58024400
 800b61c:	52002000 	.word	0x52002000

0800b620 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800b620:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800b622:	4c3a      	ldr	r4, [pc, #232]	@ (800b70c <RCCEx_PLL2_Config+0xec>)
{
 800b624:	4606      	mov	r6, r0
 800b626:	460d      	mov	r5, r1
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800b628:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800b62a:	f003 0303 	and.w	r3, r3, #3
 800b62e:	2b03      	cmp	r3, #3
 800b630:	d069      	beq.n	800b706 <RCCEx_PLL2_Config+0xe6>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800b632:	6823      	ldr	r3, [r4, #0]
 800b634:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800b638:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b63a:	f7fc f90f 	bl	800785c <HAL_GetTick>
 800b63e:	4607      	mov	r7, r0

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800b640:	6823      	ldr	r3, [r4, #0]
 800b642:	011a      	lsls	r2, r3, #4
 800b644:	d44b      	bmi.n	800b6de <RCCEx_PLL2_Config+0xbe>
        return HAL_TIMEOUT;
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800b646:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800b648:	6832      	ldr	r2, [r6, #0]
 800b64a:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 800b64e:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 800b652:	62a3      	str	r3, [r4, #40]	@ 0x28
 800b654:	68b3      	ldr	r3, [r6, #8]
 800b656:	68f2      	ldr	r2, [r6, #12]
 800b658:	3b01      	subs	r3, #1
 800b65a:	3a01      	subs	r2, #1
 800b65c:	025b      	lsls	r3, r3, #9
 800b65e:	0412      	lsls	r2, r2, #16
 800b660:	b29b      	uxth	r3, r3
 800b662:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 800b666:	4313      	orrs	r3, r2
 800b668:	6872      	ldr	r2, [r6, #4]
 800b66a:	3a01      	subs	r2, #1
 800b66c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b670:	4313      	orrs	r3, r2
 800b672:	6932      	ldr	r2, [r6, #16]
 800b674:	3a01      	subs	r2, #1
 800b676:	0612      	lsls	r2, r2, #24
 800b678:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 800b67c:	4313      	orrs	r3, r2
 800b67e:	63a3      	str	r3, [r4, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800b680:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800b682:	6972      	ldr	r2, [r6, #20]
 800b684:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800b688:	4313      	orrs	r3, r2
 800b68a:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800b68c:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800b68e:	69b2      	ldr	r2, [r6, #24]
 800b690:	f023 0320 	bic.w	r3, r3, #32
 800b694:	4313      	orrs	r3, r2
 800b696:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800b698:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800b69a:	f023 0310 	bic.w	r3, r3, #16
 800b69e:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800b6a0:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800b6a2:	69f2      	ldr	r2, [r6, #28]
 800b6a4:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800b6a8:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800b6ac:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800b6b0:	63e3      	str	r3, [r4, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800b6b2:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800b6b4:	f043 0310 	orr.w	r3, r3, #16
 800b6b8:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800b6ba:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
    if (Divider == DIVIDER_P_UPDATE)
 800b6bc:	b9b5      	cbnz	r5, 800b6ec <RCCEx_PLL2_Config+0xcc>
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800b6be:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800b6c2:	62e3      	str	r3, [r4, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800b6c4:	4c11      	ldr	r4, [pc, #68]	@ (800b70c <RCCEx_PLL2_Config+0xec>)
 800b6c6:	6823      	ldr	r3, [r4, #0]
 800b6c8:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800b6cc:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b6ce:	f7fc f8c5 	bl	800785c <HAL_GetTick>
 800b6d2:	4605      	mov	r5, r0

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800b6d4:	6823      	ldr	r3, [r4, #0]
 800b6d6:	011b      	lsls	r3, r3, #4
 800b6d8:	d50f      	bpl.n	800b6fa <RCCEx_PLL2_Config+0xda>
    }

  }


  return status;
 800b6da:	2000      	movs	r0, #0
 800b6dc:	e005      	b.n	800b6ea <RCCEx_PLL2_Config+0xca>
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800b6de:	f7fc f8bd 	bl	800785c <HAL_GetTick>
 800b6e2:	1bc0      	subs	r0, r0, r7
 800b6e4:	2802      	cmp	r0, #2
 800b6e6:	d9ab      	bls.n	800b640 <RCCEx_PLL2_Config+0x20>
        return HAL_TIMEOUT;
 800b6e8:	2003      	movs	r0, #3
}
 800b6ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    else if (Divider == DIVIDER_Q_UPDATE)
 800b6ec:	2d01      	cmp	r5, #1
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800b6ee:	bf0c      	ite	eq
 800b6f0:	f443 1380 	orreq.w	r3, r3, #1048576	@ 0x100000
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800b6f4:	f443 1300 	orrne.w	r3, r3, #2097152	@ 0x200000
 800b6f8:	e7e3      	b.n	800b6c2 <RCCEx_PLL2_Config+0xa2>
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800b6fa:	f7fc f8af 	bl	800785c <HAL_GetTick>
 800b6fe:	1b40      	subs	r0, r0, r5
 800b700:	2802      	cmp	r0, #2
 800b702:	d9e7      	bls.n	800b6d4 <RCCEx_PLL2_Config+0xb4>
 800b704:	e7f0      	b.n	800b6e8 <RCCEx_PLL2_Config+0xc8>
    return HAL_ERROR;
 800b706:	2001      	movs	r0, #1
 800b708:	e7ef      	b.n	800b6ea <RCCEx_PLL2_Config+0xca>
 800b70a:	bf00      	nop
 800b70c:	58024400 	.word	0x58024400

0800b710 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800b710:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800b712:	4c3a      	ldr	r4, [pc, #232]	@ (800b7fc <RCCEx_PLL3_Config+0xec>)
{
 800b714:	4606      	mov	r6, r0
 800b716:	460d      	mov	r5, r1
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800b718:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800b71a:	f003 0303 	and.w	r3, r3, #3
 800b71e:	2b03      	cmp	r3, #3
 800b720:	d069      	beq.n	800b7f6 <RCCEx_PLL3_Config+0xe6>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800b722:	6823      	ldr	r3, [r4, #0]
 800b724:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800b728:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b72a:	f7fc f897 	bl	800785c <HAL_GetTick>
 800b72e:	4607      	mov	r7, r0
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800b730:	6823      	ldr	r3, [r4, #0]
 800b732:	009a      	lsls	r2, r3, #2
 800b734:	d44b      	bmi.n	800b7ce <RCCEx_PLL3_Config+0xbe>
        return HAL_TIMEOUT;
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800b736:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800b738:	6832      	ldr	r2, [r6, #0]
 800b73a:	f023 737c 	bic.w	r3, r3, #66060288	@ 0x3f00000
 800b73e:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 800b742:	62a3      	str	r3, [r4, #40]	@ 0x28
 800b744:	68b3      	ldr	r3, [r6, #8]
 800b746:	68f2      	ldr	r2, [r6, #12]
 800b748:	3b01      	subs	r3, #1
 800b74a:	3a01      	subs	r2, #1
 800b74c:	025b      	lsls	r3, r3, #9
 800b74e:	0412      	lsls	r2, r2, #16
 800b750:	b29b      	uxth	r3, r3
 800b752:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 800b756:	4313      	orrs	r3, r2
 800b758:	6872      	ldr	r2, [r6, #4]
 800b75a:	3a01      	subs	r2, #1
 800b75c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b760:	4313      	orrs	r3, r2
 800b762:	6932      	ldr	r2, [r6, #16]
 800b764:	3a01      	subs	r2, #1
 800b766:	0612      	lsls	r2, r2, #24
 800b768:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 800b76c:	4313      	orrs	r3, r2
 800b76e:	6423      	str	r3, [r4, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800b770:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800b772:	6972      	ldr	r2, [r6, #20]
 800b774:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 800b778:	4313      	orrs	r3, r2
 800b77a:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800b77c:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800b77e:	69b2      	ldr	r2, [r6, #24]
 800b780:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800b784:	4313      	orrs	r3, r2
 800b786:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800b788:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800b78a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b78e:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800b790:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 800b792:	69f2      	ldr	r2, [r6, #28]
 800b794:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800b798:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800b79c:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800b7a0:	6463      	str	r3, [r4, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800b7a2:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800b7a4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b7a8:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800b7aa:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
    if (Divider == DIVIDER_P_UPDATE)
 800b7ac:	b9b5      	cbnz	r5, 800b7dc <RCCEx_PLL3_Config+0xcc>
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800b7ae:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800b7b2:	62e3      	str	r3, [r4, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800b7b4:	4c11      	ldr	r4, [pc, #68]	@ (800b7fc <RCCEx_PLL3_Config+0xec>)
 800b7b6:	6823      	ldr	r3, [r4, #0]
 800b7b8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b7bc:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b7be:	f7fc f84d 	bl	800785c <HAL_GetTick>
 800b7c2:	4605      	mov	r5, r0

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800b7c4:	6823      	ldr	r3, [r4, #0]
 800b7c6:	009b      	lsls	r3, r3, #2
 800b7c8:	d50f      	bpl.n	800b7ea <RCCEx_PLL3_Config+0xda>
    }

  }


  return status;
 800b7ca:	2000      	movs	r0, #0
 800b7cc:	e005      	b.n	800b7da <RCCEx_PLL3_Config+0xca>
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800b7ce:	f7fc f845 	bl	800785c <HAL_GetTick>
 800b7d2:	1bc0      	subs	r0, r0, r7
 800b7d4:	2802      	cmp	r0, #2
 800b7d6:	d9ab      	bls.n	800b730 <RCCEx_PLL3_Config+0x20>
        return HAL_TIMEOUT;
 800b7d8:	2003      	movs	r0, #3
}
 800b7da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    else if (Divider == DIVIDER_Q_UPDATE)
 800b7dc:	2d01      	cmp	r5, #1
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800b7de:	bf0c      	ite	eq
 800b7e0:	f443 0300 	orreq.w	r3, r3, #8388608	@ 0x800000
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800b7e4:	f043 7380 	orrne.w	r3, r3, #16777216	@ 0x1000000
 800b7e8:	e7e3      	b.n	800b7b2 <RCCEx_PLL3_Config+0xa2>
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800b7ea:	f7fc f837 	bl	800785c <HAL_GetTick>
 800b7ee:	1b40      	subs	r0, r0, r5
 800b7f0:	2802      	cmp	r0, #2
 800b7f2:	d9e7      	bls.n	800b7c4 <RCCEx_PLL3_Config+0xb4>
 800b7f4:	e7f0      	b.n	800b7d8 <RCCEx_PLL3_Config+0xc8>
    return HAL_ERROR;
 800b7f6:	2001      	movs	r0, #1
 800b7f8:	e7ef      	b.n	800b7da <RCCEx_PLL3_Config+0xca>
 800b7fa:	bf00      	nop
 800b7fc:	58024400 	.word	0x58024400

0800b800 <HAL_RCCEx_PeriphCLKConfig>:
{
 800b800:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800b804:	6803      	ldr	r3, [r0, #0]
{
 800b806:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800b808:	011c      	lsls	r4, r3, #4
 800b80a:	d51e      	bpl.n	800b84a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    switch (PeriphClkInit->SpdifrxClockSelection)
 800b80c:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
 800b80e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800b812:	d02a      	beq.n	800b86a <HAL_RCCEx_PeriphCLKConfig+0x6a>
 800b814:	d80f      	bhi.n	800b836 <HAL_RCCEx_PeriphCLKConfig+0x36>
 800b816:	b1d3      	cbz	r3, 800b84e <HAL_RCCEx_PeriphCLKConfig+0x4e>
 800b818:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b81c:	d01d      	beq.n	800b85a <HAL_RCCEx_PeriphCLKConfig+0x5a>
 800b81e:	2601      	movs	r6, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800b820:	682b      	ldr	r3, [r5, #0]
 800b822:	05d8      	lsls	r0, r3, #23
 800b824:	d54f      	bpl.n	800b8c6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    switch (PeriphClkInit->Sai1ClockSelection)
 800b826:	6deb      	ldr	r3, [r5, #92]	@ 0x5c
 800b828:	2b04      	cmp	r3, #4
 800b82a:	d84b      	bhi.n	800b8c4 <HAL_RCCEx_PeriphCLKConfig+0xc4>
 800b82c:	e8df f003 	tbb	[pc, r3]
 800b830:	27443d22 	.word	0x27443d22
 800b834:	27          	.byte	0x27
 800b835:	00          	.byte	0x00
    switch (PeriphClkInit->SpdifrxClockSelection)
 800b836:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800b83a:	d1f0      	bne.n	800b81e <HAL_RCCEx_PeriphCLKConfig+0x1e>
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800b83c:	4a86      	ldr	r2, [pc, #536]	@ (800ba58 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800b83e:	6ee9      	ldr	r1, [r5, #108]	@ 0x6c
 800b840:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 800b842:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800b846:	430b      	orrs	r3, r1
 800b848:	6513      	str	r3, [r2, #80]	@ 0x50
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800b84a:	2600      	movs	r6, #0
 800b84c:	e7e8      	b.n	800b820 <HAL_RCCEx_PeriphCLKConfig+0x20>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b84e:	4a82      	ldr	r2, [pc, #520]	@ (800ba58 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800b850:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800b852:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b856:	62d3      	str	r3, [r2, #44]	@ 0x2c
    if (ret == HAL_OK)
 800b858:	e7f0      	b.n	800b83c <HAL_RCCEx_PeriphCLKConfig+0x3c>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800b85a:	2102      	movs	r1, #2
 800b85c:	3008      	adds	r0, #8
 800b85e:	f7ff fedf 	bl	800b620 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b862:	4606      	mov	r6, r0
    if (ret == HAL_OK)
 800b864:	2800      	cmp	r0, #0
 800b866:	d1db      	bne.n	800b820 <HAL_RCCEx_PeriphCLKConfig+0x20>
 800b868:	e7e8      	b.n	800b83c <HAL_RCCEx_PeriphCLKConfig+0x3c>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b86a:	2102      	movs	r1, #2
 800b86c:	3028      	adds	r0, #40	@ 0x28
 800b86e:	f7ff ff4f 	bl	800b710 <RCCEx_PLL3_Config>
 800b872:	e7f6      	b.n	800b862 <HAL_RCCEx_PeriphCLKConfig+0x62>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b874:	4a78      	ldr	r2, [pc, #480]	@ (800ba58 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800b876:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800b878:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b87c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    switch (PeriphClkInit->SpdifrxClockSelection)
 800b87e:	4634      	mov	r4, r6
    if (ret == HAL_OK)
 800b880:	bb1c      	cbnz	r4, 800b8ca <HAL_RCCEx_PeriphCLKConfig+0xca>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800b882:	4a75      	ldr	r2, [pc, #468]	@ (800ba58 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800b884:	6de9      	ldr	r1, [r5, #92]	@ 0x5c
 800b886:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 800b888:	f023 0307 	bic.w	r3, r3, #7
 800b88c:	430b      	orrs	r3, r1
 800b88e:	6513      	str	r3, [r2, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800b890:	682b      	ldr	r3, [r5, #0]
 800b892:	0599      	lsls	r1, r3, #22
 800b894:	d528      	bpl.n	800b8e8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
    switch (PeriphClkInit->Sai23ClockSelection)
 800b896:	6e2b      	ldr	r3, [r5, #96]	@ 0x60
 800b898:	2b80      	cmp	r3, #128	@ 0x80
 800b89a:	d043      	beq.n	800b924 <HAL_RCCEx_PeriphCLKConfig+0x124>
 800b89c:	d817      	bhi.n	800b8ce <HAL_RCCEx_PeriphCLKConfig+0xce>
 800b89e:	b3a3      	cbz	r3, 800b90a <HAL_RCCEx_PeriphCLKConfig+0x10a>
 800b8a0:	2b40      	cmp	r3, #64	@ 0x40
 800b8a2:	d038      	beq.n	800b916 <HAL_RCCEx_PeriphCLKConfig+0x116>
 800b8a4:	2601      	movs	r6, #1
 800b8a6:	4634      	mov	r4, r6
 800b8a8:	e01e      	b.n	800b8e8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b8aa:	2100      	movs	r1, #0
 800b8ac:	f105 0008 	add.w	r0, r5, #8
 800b8b0:	f7ff feb6 	bl	800b620 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b8b4:	4604      	mov	r4, r0
        break;
 800b8b6:	e7e3      	b.n	800b880 <HAL_RCCEx_PeriphCLKConfig+0x80>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b8b8:	2100      	movs	r1, #0
 800b8ba:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800b8be:	f7ff ff27 	bl	800b710 <RCCEx_PLL3_Config>
 800b8c2:	e7f7      	b.n	800b8b4 <HAL_RCCEx_PeriphCLKConfig+0xb4>
    switch (PeriphClkInit->Sai1ClockSelection)
 800b8c4:	2601      	movs	r6, #1
 800b8c6:	4634      	mov	r4, r6
 800b8c8:	e7e2      	b.n	800b890 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800b8ca:	4626      	mov	r6, r4
 800b8cc:	e7e0      	b.n	800b890 <HAL_RCCEx_PeriphCLKConfig+0x90>
    switch (PeriphClkInit->Sai23ClockSelection)
 800b8ce:	2bc0      	cmp	r3, #192	@ 0xc0
 800b8d0:	d002      	beq.n	800b8d8 <HAL_RCCEx_PeriphCLKConfig+0xd8>
 800b8d2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b8d6:	d1e5      	bne.n	800b8a4 <HAL_RCCEx_PeriphCLKConfig+0xa4>
    if (ret == HAL_OK)
 800b8d8:	bb54      	cbnz	r4, 800b930 <HAL_RCCEx_PeriphCLKConfig+0x130>
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800b8da:	4a5f      	ldr	r2, [pc, #380]	@ (800ba58 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800b8dc:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 800b8de:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 800b8e0:	f423 73e0 	bic.w	r3, r3, #448	@ 0x1c0
 800b8e4:	430b      	orrs	r3, r1
 800b8e6:	6513      	str	r3, [r2, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800b8e8:	682b      	ldr	r3, [r5, #0]
 800b8ea:	055a      	lsls	r2, r3, #21
 800b8ec:	d531      	bpl.n	800b952 <HAL_RCCEx_PeriphCLKConfig+0x152>
    switch (PeriphClkInit->Sai4AClockSelection)
 800b8ee:	f8d5 30ac 	ldr.w	r3, [r5, #172]	@ 0xac
 800b8f2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800b8f6:	d049      	beq.n	800b98c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800b8f8:	d81c      	bhi.n	800b934 <HAL_RCCEx_PeriphCLKConfig+0x134>
 800b8fa:	2b00      	cmp	r3, #0
 800b8fc:	d039      	beq.n	800b972 <HAL_RCCEx_PeriphCLKConfig+0x172>
 800b8fe:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800b902:	d03c      	beq.n	800b97e <HAL_RCCEx_PeriphCLKConfig+0x17e>
 800b904:	2601      	movs	r6, #1
 800b906:	4634      	mov	r4, r6
 800b908:	e023      	b.n	800b952 <HAL_RCCEx_PeriphCLKConfig+0x152>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b90a:	4a53      	ldr	r2, [pc, #332]	@ (800ba58 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800b90c:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800b90e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b912:	62d3      	str	r3, [r2, #44]	@ 0x2c
        break;
 800b914:	e7e0      	b.n	800b8d8 <HAL_RCCEx_PeriphCLKConfig+0xd8>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b916:	2100      	movs	r1, #0
 800b918:	f105 0008 	add.w	r0, r5, #8
 800b91c:	f7ff fe80 	bl	800b620 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b920:	4604      	mov	r4, r0
        break;
 800b922:	e7d9      	b.n	800b8d8 <HAL_RCCEx_PeriphCLKConfig+0xd8>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b924:	2100      	movs	r1, #0
 800b926:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800b92a:	f7ff fef1 	bl	800b710 <RCCEx_PLL3_Config>
 800b92e:	e7f7      	b.n	800b920 <HAL_RCCEx_PeriphCLKConfig+0x120>
 800b930:	4626      	mov	r6, r4
 800b932:	e7d9      	b.n	800b8e8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
    switch (PeriphClkInit->Sai4AClockSelection)
 800b934:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800b938:	d002      	beq.n	800b940 <HAL_RCCEx_PeriphCLKConfig+0x140>
 800b93a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800b93e:	d1e1      	bne.n	800b904 <HAL_RCCEx_PeriphCLKConfig+0x104>
    if (ret == HAL_OK)
 800b940:	bb54      	cbnz	r4, 800b998 <HAL_RCCEx_PeriphCLKConfig+0x198>
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800b942:	4a45      	ldr	r2, [pc, #276]	@ (800ba58 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800b944:	f8d5 10ac 	ldr.w	r1, [r5, #172]	@ 0xac
 800b948:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 800b94a:	f423 0360 	bic.w	r3, r3, #14680064	@ 0xe00000
 800b94e:	430b      	orrs	r3, r1
 800b950:	6593      	str	r3, [r2, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800b952:	682b      	ldr	r3, [r5, #0]
 800b954:	051b      	lsls	r3, r3, #20
 800b956:	d530      	bpl.n	800b9ba <HAL_RCCEx_PeriphCLKConfig+0x1ba>
    switch (PeriphClkInit->Sai4BClockSelection)
 800b958:	f8d5 30b0 	ldr.w	r3, [r5, #176]	@ 0xb0
 800b95c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800b960:	d045      	beq.n	800b9ee <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800b962:	d81b      	bhi.n	800b99c <HAL_RCCEx_PeriphCLKConfig+0x19c>
 800b964:	b3b3      	cbz	r3, 800b9d4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 800b966:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800b96a:	d039      	beq.n	800b9e0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>
 800b96c:	2601      	movs	r6, #1
 800b96e:	4634      	mov	r4, r6
 800b970:	e023      	b.n	800b9ba <HAL_RCCEx_PeriphCLKConfig+0x1ba>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b972:	4a39      	ldr	r2, [pc, #228]	@ (800ba58 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800b974:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800b976:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b97a:	62d3      	str	r3, [r2, #44]	@ 0x2c
        break;
 800b97c:	e7e0      	b.n	800b940 <HAL_RCCEx_PeriphCLKConfig+0x140>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b97e:	2100      	movs	r1, #0
 800b980:	f105 0008 	add.w	r0, r5, #8
 800b984:	f7ff fe4c 	bl	800b620 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b988:	4604      	mov	r4, r0
        break;
 800b98a:	e7d9      	b.n	800b940 <HAL_RCCEx_PeriphCLKConfig+0x140>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b98c:	2100      	movs	r1, #0
 800b98e:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800b992:	f7ff febd 	bl	800b710 <RCCEx_PLL3_Config>
 800b996:	e7f7      	b.n	800b988 <HAL_RCCEx_PeriphCLKConfig+0x188>
 800b998:	4626      	mov	r6, r4
 800b99a:	e7da      	b.n	800b952 <HAL_RCCEx_PeriphCLKConfig+0x152>
    switch (PeriphClkInit->Sai4BClockSelection)
 800b99c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800b9a0:	d002      	beq.n	800b9a8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800b9a2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800b9a6:	d1e1      	bne.n	800b96c <HAL_RCCEx_PeriphCLKConfig+0x16c>
    if (ret == HAL_OK)
 800b9a8:	bb3c      	cbnz	r4, 800b9fa <HAL_RCCEx_PeriphCLKConfig+0x1fa>
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800b9aa:	4a2b      	ldr	r2, [pc, #172]	@ (800ba58 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800b9ac:	f8d5 10b0 	ldr.w	r1, [r5, #176]	@ 0xb0
 800b9b0:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 800b9b2:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800b9b6:	430b      	orrs	r3, r1
 800b9b8:	6593      	str	r3, [r2, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800b9ba:	682b      	ldr	r3, [r5, #0]
 800b9bc:	019f      	lsls	r7, r3, #6
 800b9be:	d528      	bpl.n	800ba12 <HAL_RCCEx_PeriphCLKConfig+0x212>
    switch (PeriphClkInit->QspiClockSelection)
 800b9c0:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 800b9c2:	2b20      	cmp	r3, #32
 800b9c4:	d03e      	beq.n	800ba44 <HAL_RCCEx_PeriphCLKConfig+0x244>
 800b9c6:	d81a      	bhi.n	800b9fe <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 800b9c8:	b1db      	cbz	r3, 800ba02 <HAL_RCCEx_PeriphCLKConfig+0x202>
 800b9ca:	2b10      	cmp	r3, #16
 800b9cc:	d034      	beq.n	800ba38 <HAL_RCCEx_PeriphCLKConfig+0x238>
 800b9ce:	2601      	movs	r6, #1
 800b9d0:	4634      	mov	r4, r6
 800b9d2:	e01e      	b.n	800ba12 <HAL_RCCEx_PeriphCLKConfig+0x212>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b9d4:	4a20      	ldr	r2, [pc, #128]	@ (800ba58 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800b9d6:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800b9d8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b9dc:	62d3      	str	r3, [r2, #44]	@ 0x2c
        break;
 800b9de:	e7e3      	b.n	800b9a8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b9e0:	2100      	movs	r1, #0
 800b9e2:	f105 0008 	add.w	r0, r5, #8
 800b9e6:	f7ff fe1b 	bl	800b620 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b9ea:	4604      	mov	r4, r0
        break;
 800b9ec:	e7dc      	b.n	800b9a8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b9ee:	2100      	movs	r1, #0
 800b9f0:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800b9f4:	f7ff fe8c 	bl	800b710 <RCCEx_PLL3_Config>
 800b9f8:	e7f7      	b.n	800b9ea <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 800b9fa:	4626      	mov	r6, r4
 800b9fc:	e7dd      	b.n	800b9ba <HAL_RCCEx_PeriphCLKConfig+0x1ba>
    switch (PeriphClkInit->QspiClockSelection)
 800b9fe:	2b30      	cmp	r3, #48	@ 0x30
 800ba00:	d1e5      	bne.n	800b9ce <HAL_RCCEx_PeriphCLKConfig+0x1ce>
    if (ret == HAL_OK)
 800ba02:	bb34      	cbnz	r4, 800ba52 <HAL_RCCEx_PeriphCLKConfig+0x252>
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800ba04:	4a14      	ldr	r2, [pc, #80]	@ (800ba58 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800ba06:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 800ba08:	6cd3      	ldr	r3, [r2, #76]	@ 0x4c
 800ba0a:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 800ba0e:	430b      	orrs	r3, r1
 800ba10:	64d3      	str	r3, [r2, #76]	@ 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800ba12:	682b      	ldr	r3, [r5, #0]
 800ba14:	04d8      	lsls	r0, r3, #19
 800ba16:	d530      	bpl.n	800ba7a <HAL_RCCEx_PeriphCLKConfig+0x27a>
    switch (PeriphClkInit->Spi123ClockSelection)
 800ba18:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ba1a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800ba1e:	f000 8097 	beq.w	800bb50 <HAL_RCCEx_PeriphCLKConfig+0x350>
 800ba22:	d81b      	bhi.n	800ba5c <HAL_RCCEx_PeriphCLKConfig+0x25c>
 800ba24:	2b00      	cmp	r3, #0
 800ba26:	f000 8086 	beq.w	800bb36 <HAL_RCCEx_PeriphCLKConfig+0x336>
 800ba2a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ba2e:	f000 8088 	beq.w	800bb42 <HAL_RCCEx_PeriphCLKConfig+0x342>
 800ba32:	2601      	movs	r6, #1
 800ba34:	4634      	mov	r4, r6
 800ba36:	e020      	b.n	800ba7a <HAL_RCCEx_PeriphCLKConfig+0x27a>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ba38:	4a07      	ldr	r2, [pc, #28]	@ (800ba58 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800ba3a:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800ba3c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800ba40:	62d3      	str	r3, [r2, #44]	@ 0x2c
        break;
 800ba42:	e7de      	b.n	800ba02 <HAL_RCCEx_PeriphCLKConfig+0x202>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800ba44:	2102      	movs	r1, #2
 800ba46:	f105 0008 	add.w	r0, r5, #8
 800ba4a:	f7ff fde9 	bl	800b620 <RCCEx_PLL2_Config>
 800ba4e:	4604      	mov	r4, r0
        break;
 800ba50:	e7d7      	b.n	800ba02 <HAL_RCCEx_PeriphCLKConfig+0x202>
 800ba52:	4626      	mov	r6, r4
 800ba54:	e7dd      	b.n	800ba12 <HAL_RCCEx_PeriphCLKConfig+0x212>
 800ba56:	bf00      	nop
 800ba58:	58024400 	.word	0x58024400
    switch (PeriphClkInit->Spi123ClockSelection)
 800ba5c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800ba60:	d002      	beq.n	800ba68 <HAL_RCCEx_PeriphCLKConfig+0x268>
 800ba62:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800ba66:	d1e4      	bne.n	800ba32 <HAL_RCCEx_PeriphCLKConfig+0x232>
    if (ret == HAL_OK)
 800ba68:	2c00      	cmp	r4, #0
 800ba6a:	d177      	bne.n	800bb5c <HAL_RCCEx_PeriphCLKConfig+0x35c>
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800ba6c:	4a9e      	ldr	r2, [pc, #632]	@ (800bce8 <HAL_RCCEx_PeriphCLKConfig+0x4e8>)
 800ba6e:	6e69      	ldr	r1, [r5, #100]	@ 0x64
 800ba70:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 800ba72:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800ba76:	430b      	orrs	r3, r1
 800ba78:	6513      	str	r3, [r2, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800ba7a:	682b      	ldr	r3, [r5, #0]
 800ba7c:	0499      	lsls	r1, r3, #18
 800ba7e:	d50c      	bpl.n	800ba9a <HAL_RCCEx_PeriphCLKConfig+0x29a>
    switch (PeriphClkInit->Spi45ClockSelection)
 800ba80:	6eab      	ldr	r3, [r5, #104]	@ 0x68
 800ba82:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ba86:	f000 8083 	beq.w	800bb90 <HAL_RCCEx_PeriphCLKConfig+0x390>
 800ba8a:	d869      	bhi.n	800bb60 <HAL_RCCEx_PeriphCLKConfig+0x360>
 800ba8c:	2b00      	cmp	r3, #0
 800ba8e:	d06f      	beq.n	800bb70 <HAL_RCCEx_PeriphCLKConfig+0x370>
 800ba90:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ba94:	d075      	beq.n	800bb82 <HAL_RCCEx_PeriphCLKConfig+0x382>
 800ba96:	2601      	movs	r6, #1
 800ba98:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800ba9a:	682b      	ldr	r3, [r5, #0]
 800ba9c:	045a      	lsls	r2, r3, #17
 800ba9e:	d50e      	bpl.n	800babe <HAL_RCCEx_PeriphCLKConfig+0x2be>
    switch (PeriphClkInit->Spi6ClockSelection)
 800baa0:	f8d5 30b4 	ldr.w	r3, [r5, #180]	@ 0xb4
 800baa4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800baa8:	f000 8093 	beq.w	800bbd2 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
 800baac:	d878      	bhi.n	800bba0 <HAL_RCCEx_PeriphCLKConfig+0x3a0>
 800baae:	2b00      	cmp	r3, #0
 800bab0:	d07e      	beq.n	800bbb0 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
 800bab2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800bab6:	f000 8085 	beq.w	800bbc4 <HAL_RCCEx_PeriphCLKConfig+0x3c4>
 800baba:	2601      	movs	r6, #1
 800babc:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 800babe:	682b      	ldr	r3, [r5, #0]
 800bac0:	015b      	lsls	r3, r3, #5
 800bac2:	d515      	bpl.n	800baf0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    switch (PeriphClkInit->DsiClockSelection)
 800bac4:	6d2b      	ldr	r3, [r5, #80]	@ 0x50
 800bac6:	b14b      	cbz	r3, 800badc <HAL_RCCEx_PeriphCLKConfig+0x2dc>
 800bac8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800bacc:	f040 8089 	bne.w	800bbe2 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800bad0:	2101      	movs	r1, #1
 800bad2:	f105 0008 	add.w	r0, r5, #8
 800bad6:	f7ff fda3 	bl	800b620 <RCCEx_PLL2_Config>
 800bada:	4604      	mov	r4, r0
    if (ret == HAL_OK)
 800badc:	2c00      	cmp	r4, #0
 800bade:	f040 8083 	bne.w	800bbe8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
      __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 800bae2:	4a81      	ldr	r2, [pc, #516]	@ (800bce8 <HAL_RCCEx_PeriphCLKConfig+0x4e8>)
 800bae4:	6d29      	ldr	r1, [r5, #80]	@ 0x50
 800bae6:	6cd3      	ldr	r3, [r2, #76]	@ 0x4c
 800bae8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800baec:	430b      	orrs	r3, r1
 800baee:	64d3      	str	r3, [r2, #76]	@ 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800baf0:	682b      	ldr	r3, [r5, #0]
 800baf2:	041f      	lsls	r7, r3, #16
 800baf4:	d511      	bpl.n	800bb1a <HAL_RCCEx_PeriphCLKConfig+0x31a>
    switch (PeriphClkInit->FdcanClockSelection)
 800baf6:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 800baf8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800bafc:	d076      	beq.n	800bbec <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 800bafe:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800bb02:	d079      	beq.n	800bbf8 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800bb04:	2b00      	cmp	r3, #0
 800bb06:	d17e      	bne.n	800bc06 <HAL_RCCEx_PeriphCLKConfig+0x406>
    if (ret == HAL_OK)
 800bb08:	2c00      	cmp	r4, #0
 800bb0a:	d17f      	bne.n	800bc0c <HAL_RCCEx_PeriphCLKConfig+0x40c>
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800bb0c:	4a76      	ldr	r2, [pc, #472]	@ (800bce8 <HAL_RCCEx_PeriphCLKConfig+0x4e8>)
 800bb0e:	6f69      	ldr	r1, [r5, #116]	@ 0x74
 800bb10:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 800bb12:	f023 5340 	bic.w	r3, r3, #805306368	@ 0x30000000
 800bb16:	430b      	orrs	r3, r1
 800bb18:	6513      	str	r3, [r2, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800bb1a:	682b      	ldr	r3, [r5, #0]
 800bb1c:	01d8      	lsls	r0, r3, #7
 800bb1e:	f140 8085 	bpl.w	800bc2c <HAL_RCCEx_PeriphCLKConfig+0x42c>
    switch (PeriphClkInit->FmcClockSelection)
 800bb22:	6cab      	ldr	r3, [r5, #72]	@ 0x48
 800bb24:	2b03      	cmp	r3, #3
 800bb26:	f200 80e5 	bhi.w	800bcf4 <HAL_RCCEx_PeriphCLKConfig+0x4f4>
 800bb2a:	e8df f013 	tbh	[pc, r3, lsl #1]
 800bb2e:	0076      	.short	0x0076
 800bb30:	00d50071 	.word	0x00d50071
 800bb34:	0076      	.short	0x0076
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bb36:	4a6c      	ldr	r2, [pc, #432]	@ (800bce8 <HAL_RCCEx_PeriphCLKConfig+0x4e8>)
 800bb38:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800bb3a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800bb3e:	62d3      	str	r3, [r2, #44]	@ 0x2c
        break;
 800bb40:	e792      	b.n	800ba68 <HAL_RCCEx_PeriphCLKConfig+0x268>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800bb42:	2100      	movs	r1, #0
 800bb44:	f105 0008 	add.w	r0, r5, #8
 800bb48:	f7ff fd6a 	bl	800b620 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800bb4c:	4604      	mov	r4, r0
        break;
 800bb4e:	e78b      	b.n	800ba68 <HAL_RCCEx_PeriphCLKConfig+0x268>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800bb50:	2100      	movs	r1, #0
 800bb52:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800bb56:	f7ff fddb 	bl	800b710 <RCCEx_PLL3_Config>
 800bb5a:	e7f7      	b.n	800bb4c <HAL_RCCEx_PeriphCLKConfig+0x34c>
 800bb5c:	4626      	mov	r6, r4
 800bb5e:	e78c      	b.n	800ba7a <HAL_RCCEx_PeriphCLKConfig+0x27a>
    switch (PeriphClkInit->Spi45ClockSelection)
 800bb60:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800bb64:	f5b2 2f80 	cmp.w	r2, #262144	@ 0x40000
 800bb68:	d002      	beq.n	800bb70 <HAL_RCCEx_PeriphCLKConfig+0x370>
 800bb6a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800bb6e:	d192      	bne.n	800ba96 <HAL_RCCEx_PeriphCLKConfig+0x296>
    if (ret == HAL_OK)
 800bb70:	b9a4      	cbnz	r4, 800bb9c <HAL_RCCEx_PeriphCLKConfig+0x39c>
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800bb72:	4a5d      	ldr	r2, [pc, #372]	@ (800bce8 <HAL_RCCEx_PeriphCLKConfig+0x4e8>)
 800bb74:	6ea9      	ldr	r1, [r5, #104]	@ 0x68
 800bb76:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 800bb78:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 800bb7c:	430b      	orrs	r3, r1
 800bb7e:	6513      	str	r3, [r2, #80]	@ 0x50
 800bb80:	e78b      	b.n	800ba9a <HAL_RCCEx_PeriphCLKConfig+0x29a>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800bb82:	2101      	movs	r1, #1
 800bb84:	f105 0008 	add.w	r0, r5, #8
 800bb88:	f7ff fd4a 	bl	800b620 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800bb8c:	4604      	mov	r4, r0
        break;
 800bb8e:	e7ef      	b.n	800bb70 <HAL_RCCEx_PeriphCLKConfig+0x370>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800bb90:	2101      	movs	r1, #1
 800bb92:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800bb96:	f7ff fdbb 	bl	800b710 <RCCEx_PLL3_Config>
 800bb9a:	e7f7      	b.n	800bb8c <HAL_RCCEx_PeriphCLKConfig+0x38c>
 800bb9c:	4626      	mov	r6, r4
 800bb9e:	e77c      	b.n	800ba9a <HAL_RCCEx_PeriphCLKConfig+0x29a>
    switch (PeriphClkInit->Spi6ClockSelection)
 800bba0:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800bba4:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 800bba8:	d002      	beq.n	800bbb0 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
 800bbaa:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800bbae:	d184      	bne.n	800baba <HAL_RCCEx_PeriphCLKConfig+0x2ba>
    if (ret == HAL_OK)
 800bbb0:	b9ac      	cbnz	r4, 800bbde <HAL_RCCEx_PeriphCLKConfig+0x3de>
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800bbb2:	4a4d      	ldr	r2, [pc, #308]	@ (800bce8 <HAL_RCCEx_PeriphCLKConfig+0x4e8>)
 800bbb4:	f8d5 10b4 	ldr.w	r1, [r5, #180]	@ 0xb4
 800bbb8:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 800bbba:	f023 43e0 	bic.w	r3, r3, #1879048192	@ 0x70000000
 800bbbe:	430b      	orrs	r3, r1
 800bbc0:	6593      	str	r3, [r2, #88]	@ 0x58
 800bbc2:	e77c      	b.n	800babe <HAL_RCCEx_PeriphCLKConfig+0x2be>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800bbc4:	2101      	movs	r1, #1
 800bbc6:	f105 0008 	add.w	r0, r5, #8
 800bbca:	f7ff fd29 	bl	800b620 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800bbce:	4604      	mov	r4, r0
        break;
 800bbd0:	e7ee      	b.n	800bbb0 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800bbd2:	2101      	movs	r1, #1
 800bbd4:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800bbd8:	f7ff fd9a 	bl	800b710 <RCCEx_PLL3_Config>
 800bbdc:	e7f7      	b.n	800bbce <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 800bbde:	4626      	mov	r6, r4
 800bbe0:	e76d      	b.n	800babe <HAL_RCCEx_PeriphCLKConfig+0x2be>
    switch (PeriphClkInit->DsiClockSelection)
 800bbe2:	2601      	movs	r6, #1
 800bbe4:	4634      	mov	r4, r6
 800bbe6:	e783      	b.n	800baf0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
 800bbe8:	4626      	mov	r6, r4
 800bbea:	e781      	b.n	800baf0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bbec:	4a3e      	ldr	r2, [pc, #248]	@ (800bce8 <HAL_RCCEx_PeriphCLKConfig+0x4e8>)
 800bbee:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800bbf0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800bbf4:	62d3      	str	r3, [r2, #44]	@ 0x2c
        break;
 800bbf6:	e787      	b.n	800bb08 <HAL_RCCEx_PeriphCLKConfig+0x308>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800bbf8:	2101      	movs	r1, #1
 800bbfa:	f105 0008 	add.w	r0, r5, #8
 800bbfe:	f7ff fd0f 	bl	800b620 <RCCEx_PLL2_Config>
 800bc02:	4604      	mov	r4, r0
        break;
 800bc04:	e780      	b.n	800bb08 <HAL_RCCEx_PeriphCLKConfig+0x308>
    switch (PeriphClkInit->FdcanClockSelection)
 800bc06:	2601      	movs	r6, #1
 800bc08:	4634      	mov	r4, r6
 800bc0a:	e786      	b.n	800bb1a <HAL_RCCEx_PeriphCLKConfig+0x31a>
 800bc0c:	4626      	mov	r6, r4
 800bc0e:	e784      	b.n	800bb1a <HAL_RCCEx_PeriphCLKConfig+0x31a>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bc10:	4a35      	ldr	r2, [pc, #212]	@ (800bce8 <HAL_RCCEx_PeriphCLKConfig+0x4e8>)
 800bc12:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800bc14:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800bc18:	62d3      	str	r3, [r2, #44]	@ 0x2c
    if (ret == HAL_OK)
 800bc1a:	2c00      	cmp	r4, #0
 800bc1c:	d16d      	bne.n	800bcfa <HAL_RCCEx_PeriphCLKConfig+0x4fa>
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800bc1e:	4a32      	ldr	r2, [pc, #200]	@ (800bce8 <HAL_RCCEx_PeriphCLKConfig+0x4e8>)
 800bc20:	6ca9      	ldr	r1, [r5, #72]	@ 0x48
 800bc22:	6cd3      	ldr	r3, [r2, #76]	@ 0x4c
 800bc24:	f023 0303 	bic.w	r3, r3, #3
 800bc28:	430b      	orrs	r3, r1
 800bc2a:	64d3      	str	r3, [r2, #76]	@ 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800bc2c:	682b      	ldr	r3, [r5, #0]
 800bc2e:	0259      	lsls	r1, r3, #9
 800bc30:	d539      	bpl.n	800bca6 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800bc32:	4f2e      	ldr	r7, [pc, #184]	@ (800bcec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800bc34:	683b      	ldr	r3, [r7, #0]
 800bc36:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800bc3a:	603b      	str	r3, [r7, #0]
    tickstart = HAL_GetTick();
 800bc3c:	f7fb fe0e 	bl	800785c <HAL_GetTick>
 800bc40:	4680      	mov	r8, r0
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800bc42:	683b      	ldr	r3, [r7, #0]
 800bc44:	05da      	lsls	r2, r3, #23
 800bc46:	d55a      	bpl.n	800bcfe <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    if (ret == HAL_OK)
 800bc48:	2c00      	cmp	r4, #0
 800bc4a:	d176      	bne.n	800bd3a <HAL_RCCEx_PeriphCLKConfig+0x53a>
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800bc4c:	4b26      	ldr	r3, [pc, #152]	@ (800bce8 <HAL_RCCEx_PeriphCLKConfig+0x4e8>)
 800bc4e:	f8d5 00b8 	ldr.w	r0, [r5, #184]	@ 0xb8
 800bc52:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800bc54:	4042      	eors	r2, r0
 800bc56:	f412 7f40 	tst.w	r2, #768	@ 0x300
 800bc5a:	d00b      	beq.n	800bc74 <HAL_RCCEx_PeriphCLKConfig+0x474>
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800bc5c:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_FORCE();
 800bc5e:	6f19      	ldr	r1, [r3, #112]	@ 0x70
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800bc60:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
        __HAL_RCC_BACKUPRESET_FORCE();
 800bc64:	f441 3180 	orr.w	r1, r1, #65536	@ 0x10000
 800bc68:	6719      	str	r1, [r3, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800bc6a:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800bc6c:	f421 3180 	bic.w	r1, r1, #65536	@ 0x10000
 800bc70:	6719      	str	r1, [r3, #112]	@ 0x70
        RCC->BDCR = tmpreg;
 800bc72:	671a      	str	r2, [r3, #112]	@ 0x70
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800bc74:	f5b0 7f80 	cmp.w	r0, #256	@ 0x100
 800bc78:	d04a      	beq.n	800bd10 <HAL_RCCEx_PeriphCLKConfig+0x510>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800bc7a:	f8d5 30b8 	ldr.w	r3, [r5, #184]	@ 0xb8
 800bc7e:	491a      	ldr	r1, [pc, #104]	@ (800bce8 <HAL_RCCEx_PeriphCLKConfig+0x4e8>)
 800bc80:	f403 7240 	and.w	r2, r3, #768	@ 0x300
 800bc84:	f5b2 7f40 	cmp.w	r2, #768	@ 0x300
 800bc88:	d153      	bne.n	800bd32 <HAL_RCCEx_PeriphCLKConfig+0x532>
 800bc8a:	6908      	ldr	r0, [r1, #16]
 800bc8c:	4a18      	ldr	r2, [pc, #96]	@ (800bcf0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>)
 800bc8e:	f420 507c 	bic.w	r0, r0, #16128	@ 0x3f00
 800bc92:	ea02 1213 	and.w	r2, r2, r3, lsr #4
 800bc96:	4302      	orrs	r2, r0
 800bc98:	610a      	str	r2, [r1, #16]
 800bc9a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800bc9e:	4a12      	ldr	r2, [pc, #72]	@ (800bce8 <HAL_RCCEx_PeriphCLKConfig+0x4e8>)
 800bca0:	6f11      	ldr	r1, [r2, #112]	@ 0x70
 800bca2:	430b      	orrs	r3, r1
 800bca4:	6713      	str	r3, [r2, #112]	@ 0x70
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800bca6:	682b      	ldr	r3, [r5, #0]
 800bca8:	07d8      	lsls	r0, r3, #31
 800bcaa:	d50a      	bpl.n	800bcc2 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
    switch (PeriphClkInit->Usart16ClockSelection)
 800bcac:	f8d5 3080 	ldr.w	r3, [r5, #128]	@ 0x80
 800bcb0:	2b10      	cmp	r3, #16
 800bcb2:	d05b      	beq.n	800bd6c <HAL_RCCEx_PeriphCLKConfig+0x56c>
 800bcb4:	d843      	bhi.n	800bd3e <HAL_RCCEx_PeriphCLKConfig+0x53e>
 800bcb6:	2b00      	cmp	r3, #0
 800bcb8:	d047      	beq.n	800bd4a <HAL_RCCEx_PeriphCLKConfig+0x54a>
 800bcba:	2b08      	cmp	r3, #8
 800bcbc:	d04f      	beq.n	800bd5e <HAL_RCCEx_PeriphCLKConfig+0x55e>
 800bcbe:	2601      	movs	r6, #1
 800bcc0:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800bcc2:	682b      	ldr	r3, [r5, #0]
 800bcc4:	0799      	lsls	r1, r3, #30
 800bcc6:	d567      	bpl.n	800bd98 <HAL_RCCEx_PeriphCLKConfig+0x598>
    switch (PeriphClkInit->Usart234578ClockSelection)
 800bcc8:	6feb      	ldr	r3, [r5, #124]	@ 0x7c
 800bcca:	2b05      	cmp	r3, #5
 800bccc:	d87a      	bhi.n	800bdc4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
 800bcce:	e8df f003 	tbb	[pc, r3]
 800bcd2:	555b      	.short	0x555b
 800bcd4:	5b5b5b73 	.word	0x5b5b5b73
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800bcd8:	2102      	movs	r1, #2
 800bcda:	f105 0008 	add.w	r0, r5, #8
 800bcde:	f7ff fc9f 	bl	800b620 <RCCEx_PLL2_Config>
 800bce2:	4604      	mov	r4, r0
        break;
 800bce4:	e799      	b.n	800bc1a <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800bce6:	bf00      	nop
 800bce8:	58024400 	.word	0x58024400
 800bcec:	58024800 	.word	0x58024800
 800bcf0:	00ffffcf 	.word	0x00ffffcf
    switch (PeriphClkInit->FmcClockSelection)
 800bcf4:	2601      	movs	r6, #1
 800bcf6:	4634      	mov	r4, r6
 800bcf8:	e798      	b.n	800bc2c <HAL_RCCEx_PeriphCLKConfig+0x42c>
 800bcfa:	4626      	mov	r6, r4
 800bcfc:	e796      	b.n	800bc2c <HAL_RCCEx_PeriphCLKConfig+0x42c>
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800bcfe:	f7fb fdad 	bl	800785c <HAL_GetTick>
 800bd02:	eba0 0008 	sub.w	r0, r0, r8
 800bd06:	2864      	cmp	r0, #100	@ 0x64
 800bd08:	d99b      	bls.n	800bc42 <HAL_RCCEx_PeriphCLKConfig+0x442>
        ret = HAL_TIMEOUT;
 800bd0a:	2603      	movs	r6, #3
 800bd0c:	4634      	mov	r4, r6
 800bd0e:	e7ca      	b.n	800bca6 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
        tickstart = HAL_GetTick();
 800bd10:	f7fb fda4 	bl	800785c <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800bd14:	f8df 80b8 	ldr.w	r8, [pc, #184]	@ 800bdd0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
        tickstart = HAL_GetTick();
 800bd18:	4607      	mov	r7, r0
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800bd1a:	f241 3988 	movw	r9, #5000	@ 0x1388
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800bd1e:	f8d8 3070 	ldr.w	r3, [r8, #112]	@ 0x70
 800bd22:	079b      	lsls	r3, r3, #30
 800bd24:	d4a9      	bmi.n	800bc7a <HAL_RCCEx_PeriphCLKConfig+0x47a>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800bd26:	f7fb fd99 	bl	800785c <HAL_GetTick>
 800bd2a:	1bc0      	subs	r0, r0, r7
 800bd2c:	4548      	cmp	r0, r9
 800bd2e:	d9f6      	bls.n	800bd1e <HAL_RCCEx_PeriphCLKConfig+0x51e>
 800bd30:	e7eb      	b.n	800bd0a <HAL_RCCEx_PeriphCLKConfig+0x50a>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800bd32:	690a      	ldr	r2, [r1, #16]
 800bd34:	f422 527c 	bic.w	r2, r2, #16128	@ 0x3f00
 800bd38:	e7ae      	b.n	800bc98 <HAL_RCCEx_PeriphCLKConfig+0x498>
 800bd3a:	4626      	mov	r6, r4
 800bd3c:	e7b3      	b.n	800bca6 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    switch (PeriphClkInit->Usart16ClockSelection)
 800bd3e:	f023 0208 	bic.w	r2, r3, #8
 800bd42:	2a20      	cmp	r2, #32
 800bd44:	d001      	beq.n	800bd4a <HAL_RCCEx_PeriphCLKConfig+0x54a>
 800bd46:	2b18      	cmp	r3, #24
 800bd48:	d1b9      	bne.n	800bcbe <HAL_RCCEx_PeriphCLKConfig+0x4be>
    if (ret == HAL_OK)
 800bd4a:	b9ac      	cbnz	r4, 800bd78 <HAL_RCCEx_PeriphCLKConfig+0x578>
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800bd4c:	4a20      	ldr	r2, [pc, #128]	@ (800bdd0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800bd4e:	f8d5 1080 	ldr.w	r1, [r5, #128]	@ 0x80
 800bd52:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 800bd54:	f023 0338 	bic.w	r3, r3, #56	@ 0x38
 800bd58:	430b      	orrs	r3, r1
 800bd5a:	6553      	str	r3, [r2, #84]	@ 0x54
 800bd5c:	e7b1      	b.n	800bcc2 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800bd5e:	2101      	movs	r1, #1
 800bd60:	f105 0008 	add.w	r0, r5, #8
 800bd64:	f7ff fc5c 	bl	800b620 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800bd68:	4604      	mov	r4, r0
        break;
 800bd6a:	e7ee      	b.n	800bd4a <HAL_RCCEx_PeriphCLKConfig+0x54a>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800bd6c:	2101      	movs	r1, #1
 800bd6e:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800bd72:	f7ff fccd 	bl	800b710 <RCCEx_PLL3_Config>
 800bd76:	e7f7      	b.n	800bd68 <HAL_RCCEx_PeriphCLKConfig+0x568>
 800bd78:	4626      	mov	r6, r4
 800bd7a:	e7a2      	b.n	800bcc2 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800bd7c:	2101      	movs	r1, #1
 800bd7e:	f105 0008 	add.w	r0, r5, #8
 800bd82:	f7ff fc4d 	bl	800b620 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800bd86:	4604      	mov	r4, r0
    if (ret == HAL_OK)
 800bd88:	b9fc      	cbnz	r4, 800bdca <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800bd8a:	4a11      	ldr	r2, [pc, #68]	@ (800bdd0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800bd8c:	6fe9      	ldr	r1, [r5, #124]	@ 0x7c
 800bd8e:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 800bd90:	f023 0307 	bic.w	r3, r3, #7
 800bd94:	430b      	orrs	r3, r1
 800bd96:	6553      	str	r3, [r2, #84]	@ 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800bd98:	682b      	ldr	r3, [r5, #0]
 800bd9a:	075a      	lsls	r2, r3, #29
 800bd9c:	d52b      	bpl.n	800bdf6 <HAL_RCCEx_PeriphCLKConfig+0x5f6>
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800bd9e:	f8d5 3098 	ldr.w	r3, [r5, #152]	@ 0x98
 800bda2:	2b05      	cmp	r3, #5
 800bda4:	f200 816e 	bhi.w	800c084 <HAL_RCCEx_PeriphCLKConfig+0x884>
 800bda8:	e8df f013 	tbh	[pc, r3, lsl #1]
 800bdac:	0014001a 	.word	0x0014001a
 800bdb0:	001a0166 	.word	0x001a0166
 800bdb4:	001a001a 	.word	0x001a001a
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800bdb8:	2101      	movs	r1, #1
 800bdba:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800bdbe:	f7ff fca7 	bl	800b710 <RCCEx_PLL3_Config>
 800bdc2:	e7e0      	b.n	800bd86 <HAL_RCCEx_PeriphCLKConfig+0x586>
    switch (PeriphClkInit->Usart234578ClockSelection)
 800bdc4:	2601      	movs	r6, #1
 800bdc6:	4634      	mov	r4, r6
 800bdc8:	e7e6      	b.n	800bd98 <HAL_RCCEx_PeriphCLKConfig+0x598>
 800bdca:	4626      	mov	r6, r4
 800bdcc:	e7e4      	b.n	800bd98 <HAL_RCCEx_PeriphCLKConfig+0x598>
 800bdce:	bf00      	nop
 800bdd0:	58024400 	.word	0x58024400
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800bdd4:	2101      	movs	r1, #1
 800bdd6:	f105 0008 	add.w	r0, r5, #8
 800bdda:	f7ff fc21 	bl	800b620 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800bdde:	4604      	mov	r4, r0
    if (ret == HAL_OK)
 800bde0:	2c00      	cmp	r4, #0
 800bde2:	f040 8152 	bne.w	800c08a <HAL_RCCEx_PeriphCLKConfig+0x88a>
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800bde6:	4aaa      	ldr	r2, [pc, #680]	@ (800c090 <HAL_RCCEx_PeriphCLKConfig+0x890>)
 800bde8:	f8d5 1098 	ldr.w	r1, [r5, #152]	@ 0x98
 800bdec:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 800bdee:	f023 0307 	bic.w	r3, r3, #7
 800bdf2:	430b      	orrs	r3, r1
 800bdf4:	6593      	str	r3, [r2, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800bdf6:	682b      	ldr	r3, [r5, #0]
 800bdf8:	069b      	lsls	r3, r3, #26
 800bdfa:	d510      	bpl.n	800be1e <HAL_RCCEx_PeriphCLKConfig+0x61e>
    switch (PeriphClkInit->Lptim1ClockSelection)
 800bdfc:	f8d5 3094 	ldr.w	r3, [r5, #148]	@ 0x94
 800be00:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800be04:	f000 8160 	beq.w	800c0c8 <HAL_RCCEx_PeriphCLKConfig+0x8c8>
 800be08:	f200 8144 	bhi.w	800c094 <HAL_RCCEx_PeriphCLKConfig+0x894>
 800be0c:	2b00      	cmp	r3, #0
 800be0e:	f000 814a 	beq.w	800c0a6 <HAL_RCCEx_PeriphCLKConfig+0x8a6>
 800be12:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800be16:	f000 8150 	beq.w	800c0ba <HAL_RCCEx_PeriphCLKConfig+0x8ba>
 800be1a:	2601      	movs	r6, #1
 800be1c:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800be1e:	682b      	ldr	r3, [r5, #0]
 800be20:	065f      	lsls	r7, r3, #25
 800be22:	d510      	bpl.n	800be46 <HAL_RCCEx_PeriphCLKConfig+0x646>
    switch (PeriphClkInit->Lptim2ClockSelection)
 800be24:	f8d5 30a0 	ldr.w	r3, [r5, #160]	@ 0xa0
 800be28:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800be2c:	f000 816e 	beq.w	800c10c <HAL_RCCEx_PeriphCLKConfig+0x90c>
 800be30:	f200 8152 	bhi.w	800c0d8 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
 800be34:	2b00      	cmp	r3, #0
 800be36:	f000 8158 	beq.w	800c0ea <HAL_RCCEx_PeriphCLKConfig+0x8ea>
 800be3a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800be3e:	f000 815e 	beq.w	800c0fe <HAL_RCCEx_PeriphCLKConfig+0x8fe>
 800be42:	2601      	movs	r6, #1
 800be44:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800be46:	682b      	ldr	r3, [r5, #0]
 800be48:	0618      	lsls	r0, r3, #24
 800be4a:	d510      	bpl.n	800be6e <HAL_RCCEx_PeriphCLKConfig+0x66e>
    switch (PeriphClkInit->Lptim345ClockSelection)
 800be4c:	f8d5 30a4 	ldr.w	r3, [r5, #164]	@ 0xa4
 800be50:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800be54:	f000 817c 	beq.w	800c150 <HAL_RCCEx_PeriphCLKConfig+0x950>
 800be58:	f200 8160 	bhi.w	800c11c <HAL_RCCEx_PeriphCLKConfig+0x91c>
 800be5c:	2b00      	cmp	r3, #0
 800be5e:	f000 8166 	beq.w	800c12e <HAL_RCCEx_PeriphCLKConfig+0x92e>
 800be62:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800be66:	f000 816c 	beq.w	800c142 <HAL_RCCEx_PeriphCLKConfig+0x942>
 800be6a:	2601      	movs	r6, #1
 800be6c:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800be6e:	682b      	ldr	r3, [r5, #0]
 800be70:	0719      	lsls	r1, r3, #28
 800be72:	d514      	bpl.n	800be9e <HAL_RCCEx_PeriphCLKConfig+0x69e>
    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800be74:	f8d5 3088 	ldr.w	r3, [r5, #136]	@ 0x88
 800be78:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800be7c:	d107      	bne.n	800be8e <HAL_RCCEx_PeriphCLKConfig+0x68e>
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800be7e:	2102      	movs	r1, #2
 800be80:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800be84:	f7ff fc44 	bl	800b710 <RCCEx_PLL3_Config>
        status = HAL_ERROR;
 800be88:	2800      	cmp	r0, #0
 800be8a:	bf18      	it	ne
 800be8c:	2601      	movne	r6, #1
    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800be8e:	4a80      	ldr	r2, [pc, #512]	@ (800c090 <HAL_RCCEx_PeriphCLKConfig+0x890>)
 800be90:	f8d5 1088 	ldr.w	r1, [r5, #136]	@ 0x88
 800be94:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 800be96:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800be9a:	430b      	orrs	r3, r1
 800be9c:	6553      	str	r3, [r2, #84]	@ 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800be9e:	682b      	ldr	r3, [r5, #0]
 800bea0:	06da      	lsls	r2, r3, #27
 800bea2:	d514      	bpl.n	800bece <HAL_RCCEx_PeriphCLKConfig+0x6ce>
    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800bea4:	f8d5 309c 	ldr.w	r3, [r5, #156]	@ 0x9c
 800bea8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800beac:	d107      	bne.n	800bebe <HAL_RCCEx_PeriphCLKConfig+0x6be>
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800beae:	2102      	movs	r1, #2
 800beb0:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800beb4:	f7ff fc2c 	bl	800b710 <RCCEx_PLL3_Config>
        status = HAL_ERROR;
 800beb8:	2800      	cmp	r0, #0
 800beba:	bf18      	it	ne
 800bebc:	2601      	movne	r6, #1
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800bebe:	4a74      	ldr	r2, [pc, #464]	@ (800c090 <HAL_RCCEx_PeriphCLKConfig+0x890>)
 800bec0:	f8d5 109c 	ldr.w	r1, [r5, #156]	@ 0x9c
 800bec4:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 800bec6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800beca:	430b      	orrs	r3, r1
 800becc:	6593      	str	r3, [r2, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800bece:	682b      	ldr	r3, [r5, #0]
 800bed0:	031b      	lsls	r3, r3, #12
 800bed2:	d51b      	bpl.n	800bf0c <HAL_RCCEx_PeriphCLKConfig+0x70c>
    switch (PeriphClkInit->AdcClockSelection)
 800bed4:	f8d5 10a8 	ldr.w	r1, [r5, #168]	@ 0xa8
 800bed8:	f5b1 3f80 	cmp.w	r1, #65536	@ 0x10000
 800bedc:	f000 8140 	beq.w	800c160 <HAL_RCCEx_PeriphCLKConfig+0x960>
 800bee0:	f5b1 3f00 	cmp.w	r1, #131072	@ 0x20000
 800bee4:	d007      	beq.n	800bef6 <HAL_RCCEx_PeriphCLKConfig+0x6f6>
 800bee6:	2900      	cmp	r1, #0
 800bee8:	f040 8140 	bne.w	800c16c <HAL_RCCEx_PeriphCLKConfig+0x96c>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800beec:	f105 0008 	add.w	r0, r5, #8
 800bef0:	f7ff fb96 	bl	800b620 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800bef4:	4604      	mov	r4, r0
    if (ret == HAL_OK)
 800bef6:	2c00      	cmp	r4, #0
 800bef8:	f040 813b 	bne.w	800c172 <HAL_RCCEx_PeriphCLKConfig+0x972>
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800befc:	4a64      	ldr	r2, [pc, #400]	@ (800c090 <HAL_RCCEx_PeriphCLKConfig+0x890>)
 800befe:	f8d5 10a8 	ldr.w	r1, [r5, #168]	@ 0xa8
 800bf02:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 800bf04:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 800bf08:	430b      	orrs	r3, r1
 800bf0a:	6593      	str	r3, [r2, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800bf0c:	682b      	ldr	r3, [r5, #0]
 800bf0e:	035f      	lsls	r7, r3, #13
 800bf10:	d50f      	bpl.n	800bf32 <HAL_RCCEx_PeriphCLKConfig+0x732>
    switch (PeriphClkInit->UsbClockSelection)
 800bf12:	f8d5 308c 	ldr.w	r3, [r5, #140]	@ 0x8c
 800bf16:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800bf1a:	f000 813b 	beq.w	800c194 <HAL_RCCEx_PeriphCLKConfig+0x994>
 800bf1e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800bf22:	f000 812d 	beq.w	800c180 <HAL_RCCEx_PeriphCLKConfig+0x980>
 800bf26:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800bf2a:	f000 8124 	beq.w	800c176 <HAL_RCCEx_PeriphCLKConfig+0x976>
 800bf2e:	2601      	movs	r6, #1
 800bf30:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800bf32:	682b      	ldr	r3, [r5, #0]
 800bf34:	03d8      	lsls	r0, r3, #15
 800bf36:	d509      	bpl.n	800bf4c <HAL_RCCEx_PeriphCLKConfig+0x74c>
    switch (PeriphClkInit->SdmmcClockSelection)
 800bf38:	6d6b      	ldr	r3, [r5, #84]	@ 0x54
 800bf3a:	2b00      	cmp	r3, #0
 800bf3c:	f000 8133 	beq.w	800c1a6 <HAL_RCCEx_PeriphCLKConfig+0x9a6>
 800bf40:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800bf44:	f000 813d 	beq.w	800c1c2 <HAL_RCCEx_PeriphCLKConfig+0x9c2>
 800bf48:	2601      	movs	r6, #1
 800bf4a:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800bf4c:	682b      	ldr	r3, [r5, #0]
 800bf4e:	0099      	lsls	r1, r3, #2
 800bf50:	d507      	bpl.n	800bf62 <HAL_RCCEx_PeriphCLKConfig+0x762>
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800bf52:	2102      	movs	r1, #2
 800bf54:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800bf58:	f7ff fbda 	bl	800b710 <RCCEx_PLL3_Config>
      status = HAL_ERROR;
 800bf5c:	2800      	cmp	r0, #0
 800bf5e:	bf18      	it	ne
 800bf60:	2601      	movne	r6, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800bf62:	e9d5 3100 	ldrd	r3, r1, [r5]
 800bf66:	039a      	lsls	r2, r3, #14
 800bf68:	f140 8143 	bpl.w	800c1f2 <HAL_RCCEx_PeriphCLKConfig+0x9f2>
    switch (PeriphClkInit->RngClockSelection)
 800bf6c:	f8d5 0084 	ldr.w	r0, [r5, #132]	@ 0x84
 800bf70:	f5b0 7f80 	cmp.w	r0, #256	@ 0x100
 800bf74:	f000 813f 	beq.w	800c1f6 <HAL_RCCEx_PeriphCLKConfig+0x9f6>
 800bf78:	f200 812c 	bhi.w	800c1d4 <HAL_RCCEx_PeriphCLKConfig+0x9d4>
 800bf7c:	2800      	cmp	r0, #0
 800bf7e:	f000 812f 	beq.w	800c1e0 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
 800bf82:	2401      	movs	r4, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800bf84:	02df      	lsls	r7, r3, #11
 800bf86:	d506      	bpl.n	800bf96 <HAL_RCCEx_PeriphCLKConfig+0x796>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800bf88:	4841      	ldr	r0, [pc, #260]	@ (800c090 <HAL_RCCEx_PeriphCLKConfig+0x890>)
 800bf8a:	6fae      	ldr	r6, [r5, #120]	@ 0x78
 800bf8c:	6d02      	ldr	r2, [r0, #80]	@ 0x50
 800bf8e:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800bf92:	4332      	orrs	r2, r6
 800bf94:	6502      	str	r2, [r0, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800bf96:	00de      	lsls	r6, r3, #3
 800bf98:	d507      	bpl.n	800bfaa <HAL_RCCEx_PeriphCLKConfig+0x7aa>
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800bf9a:	483d      	ldr	r0, [pc, #244]	@ (800c090 <HAL_RCCEx_PeriphCLKConfig+0x890>)
 800bf9c:	f8d5 60bc 	ldr.w	r6, [r5, #188]	@ 0xbc
 800bfa0:	6902      	ldr	r2, [r0, #16]
 800bfa2:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800bfa6:	4332      	orrs	r2, r6
 800bfa8:	6102      	str	r2, [r0, #16]
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800bfaa:	0298      	lsls	r0, r3, #10
 800bfac:	d506      	bpl.n	800bfbc <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800bfae:	4838      	ldr	r0, [pc, #224]	@ (800c090 <HAL_RCCEx_PeriphCLKConfig+0x890>)
 800bfb0:	6f2e      	ldr	r6, [r5, #112]	@ 0x70
 800bfb2:	6d02      	ldr	r2, [r0, #80]	@ 0x50
 800bfb4:	f022 7280 	bic.w	r2, r2, #16777216	@ 0x1000000
 800bfb8:	4332      	orrs	r2, r6
 800bfba:	6502      	str	r2, [r0, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800bfbc:	005a      	lsls	r2, r3, #1
 800bfbe:	d509      	bpl.n	800bfd4 <HAL_RCCEx_PeriphCLKConfig+0x7d4>
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800bfc0:	4a33      	ldr	r2, [pc, #204]	@ (800c090 <HAL_RCCEx_PeriphCLKConfig+0x890>)
 800bfc2:	6910      	ldr	r0, [r2, #16]
 800bfc4:	f420 4000 	bic.w	r0, r0, #32768	@ 0x8000
 800bfc8:	6110      	str	r0, [r2, #16]
 800bfca:	6910      	ldr	r0, [r2, #16]
 800bfcc:	f8d5 60c0 	ldr.w	r6, [r5, #192]	@ 0xc0
 800bfd0:	4330      	orrs	r0, r6
 800bfd2:	6110      	str	r0, [r2, #16]
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800bfd4:	2b00      	cmp	r3, #0
 800bfd6:	da06      	bge.n	800bfe6 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800bfd8:	482d      	ldr	r0, [pc, #180]	@ (800c090 <HAL_RCCEx_PeriphCLKConfig+0x890>)
 800bfda:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 800bfdc:	6cc2      	ldr	r2, [r0, #76]	@ 0x4c
 800bfde:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800bfe2:	4332      	orrs	r2, r6
 800bfe4:	64c2      	str	r2, [r0, #76]	@ 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800bfe6:	021f      	lsls	r7, r3, #8
 800bfe8:	d507      	bpl.n	800bffa <HAL_RCCEx_PeriphCLKConfig+0x7fa>
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800bfea:	4a29      	ldr	r2, [pc, #164]	@ (800c090 <HAL_RCCEx_PeriphCLKConfig+0x890>)
 800bfec:	f8d5 0090 	ldr.w	r0, [r5, #144]	@ 0x90
 800bff0:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 800bff2:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 800bff6:	4303      	orrs	r3, r0
 800bff8:	6553      	str	r3, [r2, #84]	@ 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800bffa:	07ce      	lsls	r6, r1, #31
 800bffc:	d506      	bpl.n	800c00c <HAL_RCCEx_PeriphCLKConfig+0x80c>
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800bffe:	2100      	movs	r1, #0
 800c000:	f105 0008 	add.w	r0, r5, #8
 800c004:	f7ff fb0c 	bl	800b620 <RCCEx_PLL2_Config>
    if (ret == HAL_OK)
 800c008:	4607      	mov	r7, r0
 800c00a:	b900      	cbnz	r0, 800c00e <HAL_RCCEx_PeriphCLKConfig+0x80e>
    switch (PeriphClkInit->RngClockSelection)
 800c00c:	4627      	mov	r7, r4
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800c00e:	686b      	ldr	r3, [r5, #4]
 800c010:	079c      	lsls	r4, r3, #30
 800c012:	d506      	bpl.n	800c022 <HAL_RCCEx_PeriphCLKConfig+0x822>
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800c014:	2101      	movs	r1, #1
 800c016:	f105 0008 	add.w	r0, r5, #8
 800c01a:	f7ff fb01 	bl	800b620 <RCCEx_PLL2_Config>
    if (ret == HAL_OK)
 800c01e:	4606      	mov	r6, r0
 800c020:	b900      	cbnz	r0, 800c024 <HAL_RCCEx_PeriphCLKConfig+0x824>
    switch (PeriphClkInit->RngClockSelection)
 800c022:	463e      	mov	r6, r7
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800c024:	686b      	ldr	r3, [r5, #4]
 800c026:	0758      	lsls	r0, r3, #29
 800c028:	d506      	bpl.n	800c038 <HAL_RCCEx_PeriphCLKConfig+0x838>
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800c02a:	2102      	movs	r1, #2
 800c02c:	f105 0008 	add.w	r0, r5, #8
 800c030:	f7ff faf6 	bl	800b620 <RCCEx_PLL2_Config>
    if (ret == HAL_OK)
 800c034:	4604      	mov	r4, r0
 800c036:	b900      	cbnz	r0, 800c03a <HAL_RCCEx_PeriphCLKConfig+0x83a>
    switch (PeriphClkInit->RngClockSelection)
 800c038:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800c03a:	686b      	ldr	r3, [r5, #4]
 800c03c:	0719      	lsls	r1, r3, #28
 800c03e:	d506      	bpl.n	800c04e <HAL_RCCEx_PeriphCLKConfig+0x84e>
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800c040:	2100      	movs	r1, #0
 800c042:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800c046:	f7ff fb63 	bl	800b710 <RCCEx_PLL3_Config>
    if (ret == HAL_OK)
 800c04a:	4606      	mov	r6, r0
 800c04c:	b900      	cbnz	r0, 800c050 <HAL_RCCEx_PeriphCLKConfig+0x850>
    switch (PeriphClkInit->RngClockSelection)
 800c04e:	4626      	mov	r6, r4
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800c050:	686b      	ldr	r3, [r5, #4]
 800c052:	06da      	lsls	r2, r3, #27
 800c054:	d506      	bpl.n	800c064 <HAL_RCCEx_PeriphCLKConfig+0x864>
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800c056:	2101      	movs	r1, #1
 800c058:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800c05c:	f7ff fb58 	bl	800b710 <RCCEx_PLL3_Config>
    if (ret == HAL_OK)
 800c060:	4604      	mov	r4, r0
 800c062:	b900      	cbnz	r0, 800c066 <HAL_RCCEx_PeriphCLKConfig+0x866>
    switch (PeriphClkInit->RngClockSelection)
 800c064:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800c066:	686b      	ldr	r3, [r5, #4]
 800c068:	069b      	lsls	r3, r3, #26
 800c06a:	f100 80ca 	bmi.w	800c202 <HAL_RCCEx_PeriphCLKConfig+0xa02>
  if (status == HAL_OK)
 800c06e:	1e20      	subs	r0, r4, #0
 800c070:	bf18      	it	ne
 800c072:	2001      	movne	r0, #1
}
 800c074:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800c078:	2101      	movs	r1, #1
 800c07a:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800c07e:	f7ff fb47 	bl	800b710 <RCCEx_PLL3_Config>
 800c082:	e6ac      	b.n	800bdde <HAL_RCCEx_PeriphCLKConfig+0x5de>
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800c084:	2601      	movs	r6, #1
 800c086:	4634      	mov	r4, r6
 800c088:	e6b5      	b.n	800bdf6 <HAL_RCCEx_PeriphCLKConfig+0x5f6>
 800c08a:	4626      	mov	r6, r4
 800c08c:	e6b3      	b.n	800bdf6 <HAL_RCCEx_PeriphCLKConfig+0x5f6>
 800c08e:	bf00      	nop
 800c090:	58024400 	.word	0x58024400
    switch (PeriphClkInit->Lptim1ClockSelection)
 800c094:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800c098:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 800c09c:	d003      	beq.n	800c0a6 <HAL_RCCEx_PeriphCLKConfig+0x8a6>
 800c09e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800c0a2:	f47f aeba 	bne.w	800be1a <HAL_RCCEx_PeriphCLKConfig+0x61a>
    if (ret == HAL_OK)
 800c0a6:	b9ac      	cbnz	r4, 800c0d4 <HAL_RCCEx_PeriphCLKConfig+0x8d4>
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800c0a8:	4a5b      	ldr	r2, [pc, #364]	@ (800c218 <HAL_RCCEx_PeriphCLKConfig+0xa18>)
 800c0aa:	f8d5 1094 	ldr.w	r1, [r5, #148]	@ 0x94
 800c0ae:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 800c0b0:	f023 43e0 	bic.w	r3, r3, #1879048192	@ 0x70000000
 800c0b4:	430b      	orrs	r3, r1
 800c0b6:	6553      	str	r3, [r2, #84]	@ 0x54
 800c0b8:	e6b1      	b.n	800be1e <HAL_RCCEx_PeriphCLKConfig+0x61e>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c0ba:	2100      	movs	r1, #0
 800c0bc:	f105 0008 	add.w	r0, r5, #8
 800c0c0:	f7ff faae 	bl	800b620 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c0c4:	4604      	mov	r4, r0
        break;
 800c0c6:	e7ee      	b.n	800c0a6 <HAL_RCCEx_PeriphCLKConfig+0x8a6>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c0c8:	2102      	movs	r1, #2
 800c0ca:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800c0ce:	f7ff fb1f 	bl	800b710 <RCCEx_PLL3_Config>
 800c0d2:	e7f7      	b.n	800c0c4 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
 800c0d4:	4626      	mov	r6, r4
 800c0d6:	e6a2      	b.n	800be1e <HAL_RCCEx_PeriphCLKConfig+0x61e>
    switch (PeriphClkInit->Lptim2ClockSelection)
 800c0d8:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800c0dc:	f5b2 5f80 	cmp.w	r2, #4096	@ 0x1000
 800c0e0:	d003      	beq.n	800c0ea <HAL_RCCEx_PeriphCLKConfig+0x8ea>
 800c0e2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800c0e6:	f47f aeac 	bne.w	800be42 <HAL_RCCEx_PeriphCLKConfig+0x642>
    if (ret == HAL_OK)
 800c0ea:	b9ac      	cbnz	r4, 800c118 <HAL_RCCEx_PeriphCLKConfig+0x918>
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800c0ec:	4a4a      	ldr	r2, [pc, #296]	@ (800c218 <HAL_RCCEx_PeriphCLKConfig+0xa18>)
 800c0ee:	f8d5 10a0 	ldr.w	r1, [r5, #160]	@ 0xa0
 800c0f2:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 800c0f4:	f423 53e0 	bic.w	r3, r3, #7168	@ 0x1c00
 800c0f8:	430b      	orrs	r3, r1
 800c0fa:	6593      	str	r3, [r2, #88]	@ 0x58
 800c0fc:	e6a3      	b.n	800be46 <HAL_RCCEx_PeriphCLKConfig+0x646>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c0fe:	2100      	movs	r1, #0
 800c100:	f105 0008 	add.w	r0, r5, #8
 800c104:	f7ff fa8c 	bl	800b620 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c108:	4604      	mov	r4, r0
        break;
 800c10a:	e7ee      	b.n	800c0ea <HAL_RCCEx_PeriphCLKConfig+0x8ea>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c10c:	2102      	movs	r1, #2
 800c10e:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800c112:	f7ff fafd 	bl	800b710 <RCCEx_PLL3_Config>
 800c116:	e7f7      	b.n	800c108 <HAL_RCCEx_PeriphCLKConfig+0x908>
 800c118:	4626      	mov	r6, r4
 800c11a:	e694      	b.n	800be46 <HAL_RCCEx_PeriphCLKConfig+0x646>
    switch (PeriphClkInit->Lptim345ClockSelection)
 800c11c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800c120:	f5b2 4f00 	cmp.w	r2, #32768	@ 0x8000
 800c124:	d003      	beq.n	800c12e <HAL_RCCEx_PeriphCLKConfig+0x92e>
 800c126:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800c12a:	f47f ae9e 	bne.w	800be6a <HAL_RCCEx_PeriphCLKConfig+0x66a>
    if (ret == HAL_OK)
 800c12e:	b9ac      	cbnz	r4, 800c15c <HAL_RCCEx_PeriphCLKConfig+0x95c>
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800c130:	4a39      	ldr	r2, [pc, #228]	@ (800c218 <HAL_RCCEx_PeriphCLKConfig+0xa18>)
 800c132:	f8d5 10a4 	ldr.w	r1, [r5, #164]	@ 0xa4
 800c136:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 800c138:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 800c13c:	430b      	orrs	r3, r1
 800c13e:	6593      	str	r3, [r2, #88]	@ 0x58
 800c140:	e695      	b.n	800be6e <HAL_RCCEx_PeriphCLKConfig+0x66e>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c142:	2100      	movs	r1, #0
 800c144:	f105 0008 	add.w	r0, r5, #8
 800c148:	f7ff fa6a 	bl	800b620 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c14c:	4604      	mov	r4, r0
        break;
 800c14e:	e7ee      	b.n	800c12e <HAL_RCCEx_PeriphCLKConfig+0x92e>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c150:	2102      	movs	r1, #2
 800c152:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800c156:	f7ff fadb 	bl	800b710 <RCCEx_PLL3_Config>
 800c15a:	e7f7      	b.n	800c14c <HAL_RCCEx_PeriphCLKConfig+0x94c>
 800c15c:	4626      	mov	r6, r4
 800c15e:	e686      	b.n	800be6e <HAL_RCCEx_PeriphCLKConfig+0x66e>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c160:	2102      	movs	r1, #2
 800c162:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800c166:	f7ff fad3 	bl	800b710 <RCCEx_PLL3_Config>
 800c16a:	e6c3      	b.n	800bef4 <HAL_RCCEx_PeriphCLKConfig+0x6f4>
    switch (PeriphClkInit->AdcClockSelection)
 800c16c:	2601      	movs	r6, #1
 800c16e:	4634      	mov	r4, r6
 800c170:	e6cc      	b.n	800bf0c <HAL_RCCEx_PeriphCLKConfig+0x70c>
 800c172:	4626      	mov	r6, r4
 800c174:	e6ca      	b.n	800bf0c <HAL_RCCEx_PeriphCLKConfig+0x70c>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c176:	4a28      	ldr	r2, [pc, #160]	@ (800c218 <HAL_RCCEx_PeriphCLKConfig+0xa18>)
 800c178:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800c17a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800c17e:	62d3      	str	r3, [r2, #44]	@ 0x2c
    if (ret == HAL_OK)
 800c180:	b97c      	cbnz	r4, 800c1a2 <HAL_RCCEx_PeriphCLKConfig+0x9a2>
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800c182:	4a25      	ldr	r2, [pc, #148]	@ (800c218 <HAL_RCCEx_PeriphCLKConfig+0xa18>)
 800c184:	f8d5 108c 	ldr.w	r1, [r5, #140]	@ 0x8c
 800c188:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 800c18a:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800c18e:	430b      	orrs	r3, r1
 800c190:	6553      	str	r3, [r2, #84]	@ 0x54
 800c192:	e6ce      	b.n	800bf32 <HAL_RCCEx_PeriphCLKConfig+0x732>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800c194:	2101      	movs	r1, #1
 800c196:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800c19a:	f7ff fab9 	bl	800b710 <RCCEx_PLL3_Config>
 800c19e:	4604      	mov	r4, r0
        break;
 800c1a0:	e7ee      	b.n	800c180 <HAL_RCCEx_PeriphCLKConfig+0x980>
 800c1a2:	4626      	mov	r6, r4
 800c1a4:	e6c5      	b.n	800bf32 <HAL_RCCEx_PeriphCLKConfig+0x732>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c1a6:	4a1c      	ldr	r2, [pc, #112]	@ (800c218 <HAL_RCCEx_PeriphCLKConfig+0xa18>)
 800c1a8:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800c1aa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800c1ae:	62d3      	str	r3, [r2, #44]	@ 0x2c
    if (ret == HAL_OK)
 800c1b0:	b974      	cbnz	r4, 800c1d0 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800c1b2:	4a19      	ldr	r2, [pc, #100]	@ (800c218 <HAL_RCCEx_PeriphCLKConfig+0xa18>)
 800c1b4:	6d69      	ldr	r1, [r5, #84]	@ 0x54
 800c1b6:	6cd3      	ldr	r3, [r2, #76]	@ 0x4c
 800c1b8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800c1bc:	430b      	orrs	r3, r1
 800c1be:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800c1c0:	e6c4      	b.n	800bf4c <HAL_RCCEx_PeriphCLKConfig+0x74c>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800c1c2:	2102      	movs	r1, #2
 800c1c4:	f105 0008 	add.w	r0, r5, #8
 800c1c8:	f7ff fa2a 	bl	800b620 <RCCEx_PLL2_Config>
 800c1cc:	4604      	mov	r4, r0
        break;
 800c1ce:	e7ef      	b.n	800c1b0 <HAL_RCCEx_PeriphCLKConfig+0x9b0>
 800c1d0:	4626      	mov	r6, r4
 800c1d2:	e6bb      	b.n	800bf4c <HAL_RCCEx_PeriphCLKConfig+0x74c>
    switch (PeriphClkInit->RngClockSelection)
 800c1d4:	f420 7280 	bic.w	r2, r0, #256	@ 0x100
 800c1d8:	f5b2 7f00 	cmp.w	r2, #512	@ 0x200
 800c1dc:	f47f aed1 	bne.w	800bf82 <HAL_RCCEx_PeriphCLKConfig+0x782>
    if (ret == HAL_OK)
 800c1e0:	2c00      	cmp	r4, #0
 800c1e2:	f47f aecf 	bne.w	800bf84 <HAL_RCCEx_PeriphCLKConfig+0x784>
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800c1e6:	4c0c      	ldr	r4, [pc, #48]	@ (800c218 <HAL_RCCEx_PeriphCLKConfig+0xa18>)
 800c1e8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800c1ea:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 800c1ee:	4302      	orrs	r2, r0
 800c1f0:	6562      	str	r2, [r4, #84]	@ 0x54
      status = HAL_ERROR;
 800c1f2:	4634      	mov	r4, r6
 800c1f4:	e6c6      	b.n	800bf84 <HAL_RCCEx_PeriphCLKConfig+0x784>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c1f6:	4f08      	ldr	r7, [pc, #32]	@ (800c218 <HAL_RCCEx_PeriphCLKConfig+0xa18>)
 800c1f8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c1fa:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800c1fe:	62fa      	str	r2, [r7, #44]	@ 0x2c
        break;
 800c200:	e7ee      	b.n	800c1e0 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c202:	2102      	movs	r1, #2
 800c204:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800c208:	f7ff fa82 	bl	800b710 <RCCEx_PLL3_Config>
    if (ret == HAL_OK)
 800c20c:	2800      	cmp	r0, #0
 800c20e:	f43f af2e 	beq.w	800c06e <HAL_RCCEx_PeriphCLKConfig+0x86e>
  return HAL_ERROR;
 800c212:	2001      	movs	r0, #1
 800c214:	e72e      	b.n	800c074 <HAL_RCCEx_PeriphCLKConfig+0x874>
 800c216:	bf00      	nop
 800c218:	58024400 	.word	0x58024400

0800c21c <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 800c21c:	b538      	push	{r3, r4, r5, lr}
 800c21e:	460d      	mov	r5, r1
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 800c220:	4604      	mov	r4, r0
 800c222:	b1f0      	cbz	r0, 800c262 <HAL_SDRAM_Init+0x46>
  {
    return HAL_ERROR;
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 800c224:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
 800c228:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 800c22c:	b91b      	cbnz	r3, 800c236 <HAL_SDRAM_Init+0x1a>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 800c22e:	f880 202d 	strb.w	r2, [r0, #45]	@ 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 800c232:	f7f5 f8b5 	bl	80013a0 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800c236:	2302      	movs	r3, #2

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800c238:	1d21      	adds	r1, r4, #4
 800c23a:	6820      	ldr	r0, [r4, #0]
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800c23c:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800c240:	f000 fa15 	bl	800c66e <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 800c244:	6862      	ldr	r2, [r4, #4]
 800c246:	4629      	mov	r1, r5
 800c248:	6820      	ldr	r0, [r4, #0]
 800c24a:	f000 fa48 	bl	800c6de <FMC_SDRAM_Timing_Init>

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
 800c24e:	4a06      	ldr	r2, [pc, #24]	@ (800c268 <HAL_SDRAM_Init+0x4c>)
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;

  return HAL_OK;
 800c250:	2000      	movs	r0, #0
  __FMC_ENABLE();
 800c252:	6813      	ldr	r3, [r2, #0]
 800c254:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800c258:	6013      	str	r3, [r2, #0]
  hsdram->State = HAL_SDRAM_STATE_READY;
 800c25a:	2301      	movs	r3, #1
 800c25c:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
}
 800c260:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800c262:	2001      	movs	r0, #1
 800c264:	e7fc      	b.n	800c260 <HAL_SDRAM_Init+0x44>
 800c266:	bf00      	nop
 800c268:	52004000 	.word	0x52004000

0800c26c <HAL_SDRAM_DeInit>:
  * @param  hsdram pointer to a SDRAM_HandleTypeDef structure that contains
  *                the configuration information for SDRAM module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_DeInit(SDRAM_HandleTypeDef *hsdram)
{
 800c26c:	b510      	push	{r4, lr}
 800c26e:	4604      	mov	r4, r0

  /* DeInit the low level hardware */
  hsdram->MspDeInitCallback(hsdram);
#else
  /* Initialize the low level hardware (MSP) */
  HAL_SDRAM_MspDeInit(hsdram);
 800c270:	f7f5 f930 	bl	80014d4 <HAL_SDRAM_MspDeInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */

  /* Configure the SDRAM registers with their reset values */
  (void)FMC_SDRAM_DeInit(hsdram->Instance, hsdram->Init.SDBank);
 800c274:	e9d4 0100 	ldrd	r0, r1, [r4]
 800c278:	f000 fa67 	bl	800c74a <FMC_SDRAM_DeInit>

  /* Reset the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_RESET;
 800c27c:	2000      	movs	r0, #0
 800c27e:	f884 002c 	strb.w	r0, [r4, #44]	@ 0x2c

  /* Release Lock */
  __HAL_UNLOCK(hsdram);
 800c282:	f884 002d 	strb.w	r0, [r4, #45]	@ 0x2d

  return HAL_OK;
}
 800c286:	bd10      	pop	{r4, pc}

0800c288 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 800c288:	b570      	push	{r4, r5, r6, lr}
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 800c28a:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
{
 800c28e:	4605      	mov	r5, r0
 800c290:	460e      	mov	r6, r1

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 800c292:	2b02      	cmp	r3, #2
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 800c294:	b2d8      	uxtb	r0, r3
  if (state == HAL_SDRAM_STATE_BUSY)
 800c296:	d010      	beq.n	800c2ba <HAL_SDRAM_SendCommand+0x32>
  {
    return HAL_BUSY;
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 800c298:	f000 04fb 	and.w	r4, r0, #251	@ 0xfb
 800c29c:	2c01      	cmp	r4, #1
 800c29e:	d110      	bne.n	800c2c2 <HAL_SDRAM_SendCommand+0x3a>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800c2a0:	2302      	movs	r3, #2

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 800c2a2:	6828      	ldr	r0, [r5, #0]
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800c2a4:	f885 302c 	strb.w	r3, [r5, #44]	@ 0x2c
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 800c2a8:	f000 fa5e 	bl	800c768 <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800c2ac:	6833      	ldr	r3, [r6, #0]
 800c2ae:	2b02      	cmp	r3, #2
 800c2b0:	d104      	bne.n	800c2bc <HAL_SDRAM_SendCommand+0x34>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 800c2b2:	2305      	movs	r3, #5
 800c2b4:	f885 302c 	strb.w	r3, [r5, #44]	@ 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 800c2b8:	2000      	movs	r0, #0
}
 800c2ba:	bd70      	pop	{r4, r5, r6, pc}
      hsdram->State = HAL_SDRAM_STATE_READY;
 800c2bc:	f885 402c 	strb.w	r4, [r5, #44]	@ 0x2c
 800c2c0:	e7fa      	b.n	800c2b8 <HAL_SDRAM_SendCommand+0x30>
    return HAL_ERROR;
 800c2c2:	2001      	movs	r0, #1
 800c2c4:	e7f9      	b.n	800c2ba <HAL_SDRAM_SendCommand+0x32>

0800c2c6 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 800c2c6:	b538      	push	{r3, r4, r5, lr}
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 800c2c8:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
{
 800c2cc:	4604      	mov	r4, r0
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 800c2ce:	2b02      	cmp	r3, #2
 800c2d0:	b2d8      	uxtb	r0, r3
 800c2d2:	d00d      	beq.n	800c2f0 <HAL_SDRAM_ProgramRefreshRate+0x2a>
  {
    return HAL_BUSY;
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 800c2d4:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 800c2d8:	2b01      	cmp	r3, #1
 800c2da:	b2dd      	uxtb	r5, r3
 800c2dc:	d109      	bne.n	800c2f2 <HAL_SDRAM_ProgramRefreshRate+0x2c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800c2de:	2302      	movs	r3, #2

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 800c2e0:	6820      	ldr	r0, [r4, #0]
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800c2e2:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 800c2e6:	f000 fa51 	bl	800c78c <FMC_SDRAM_ProgramRefreshRate>
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 800c2ea:	2000      	movs	r0, #0
    hsdram->State = HAL_SDRAM_STATE_READY;
 800c2ec:	f884 502c 	strb.w	r5, [r4, #44]	@ 0x2c
}
 800c2f0:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800c2f2:	2001      	movs	r0, #1
 800c2f4:	e7fc      	b.n	800c2f0 <HAL_SDRAM_ProgramRefreshRate+0x2a>

0800c2f6 <HAL_TIM_Base_MspInit>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800c2f6:	4770      	bx	lr

0800c2f8 <HAL_TIM_Base_Start>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800c2f8:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 800c2fc:	2b01      	cmp	r3, #1
 800c2fe:	d12f      	bne.n	800c360 <HAL_TIM_Base_Start+0x68>
  {
    return HAL_ERROR;
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c300:	2302      	movs	r3, #2

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c302:	4a18      	ldr	r2, [pc, #96]	@ (800c364 <HAL_TIM_Base_Start+0x6c>)
  htim->State = HAL_TIM_STATE_BUSY;
 800c304:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c308:	6803      	ldr	r3, [r0, #0]
 800c30a:	4293      	cmp	r3, r2
 800c30c:	d01a      	beq.n	800c344 <HAL_TIM_Base_Start+0x4c>
 800c30e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c312:	d017      	beq.n	800c344 <HAL_TIM_Base_Start+0x4c>
 800c314:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 800c318:	4293      	cmp	r3, r2
 800c31a:	d013      	beq.n	800c344 <HAL_TIM_Base_Start+0x4c>
 800c31c:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800c320:	4293      	cmp	r3, r2
 800c322:	d00f      	beq.n	800c344 <HAL_TIM_Base_Start+0x4c>
 800c324:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800c328:	4293      	cmp	r3, r2
 800c32a:	d00b      	beq.n	800c344 <HAL_TIM_Base_Start+0x4c>
 800c32c:	f502 4278 	add.w	r2, r2, #63488	@ 0xf800
 800c330:	4293      	cmp	r3, r2
 800c332:	d007      	beq.n	800c344 <HAL_TIM_Base_Start+0x4c>
 800c334:	f5a2 426c 	sub.w	r2, r2, #60416	@ 0xec00
 800c338:	4293      	cmp	r3, r2
 800c33a:	d003      	beq.n	800c344 <HAL_TIM_Base_Start+0x4c>
 800c33c:	f502 3294 	add.w	r2, r2, #75776	@ 0x12800
 800c340:	4293      	cmp	r3, r2
 800c342:	d107      	bne.n	800c354 <HAL_TIM_Base_Start+0x5c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c344:	6899      	ldr	r1, [r3, #8]
 800c346:	4a08      	ldr	r2, [pc, #32]	@ (800c368 <HAL_TIM_Base_Start+0x70>)
 800c348:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c34a:	2a06      	cmp	r2, #6
 800c34c:	d006      	beq.n	800c35c <HAL_TIM_Base_Start+0x64>
 800c34e:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 800c352:	d003      	beq.n	800c35c <HAL_TIM_Base_Start+0x64>
    {
      __HAL_TIM_ENABLE(htim);
 800c354:	681a      	ldr	r2, [r3, #0]
 800c356:	f042 0201 	orr.w	r2, r2, #1
 800c35a:	601a      	str	r2, [r3, #0]
  {
    __HAL_TIM_ENABLE(htim);
  }

  /* Return function status */
  return HAL_OK;
 800c35c:	2000      	movs	r0, #0
 800c35e:	4770      	bx	lr
    return HAL_ERROR;
 800c360:	2001      	movs	r0, #1
}
 800c362:	4770      	bx	lr
 800c364:	40010000 	.word	0x40010000
 800c368:	00010007 	.word	0x00010007

0800c36c <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800c36c:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 800c370:	2b01      	cmp	r3, #1
 800c372:	d133      	bne.n	800c3dc <HAL_TIM_Base_Start_IT+0x70>
  {
    return HAL_ERROR;
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c374:	2302      	movs	r3, #2
 800c376:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800c37a:	6803      	ldr	r3, [r0, #0]
 800c37c:	68da      	ldr	r2, [r3, #12]
 800c37e:	f042 0201 	orr.w	r2, r2, #1
 800c382:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c384:	4a16      	ldr	r2, [pc, #88]	@ (800c3e0 <HAL_TIM_Base_Start_IT+0x74>)
 800c386:	4293      	cmp	r3, r2
 800c388:	d01a      	beq.n	800c3c0 <HAL_TIM_Base_Start_IT+0x54>
 800c38a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c38e:	d017      	beq.n	800c3c0 <HAL_TIM_Base_Start_IT+0x54>
 800c390:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 800c394:	4293      	cmp	r3, r2
 800c396:	d013      	beq.n	800c3c0 <HAL_TIM_Base_Start_IT+0x54>
 800c398:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800c39c:	4293      	cmp	r3, r2
 800c39e:	d00f      	beq.n	800c3c0 <HAL_TIM_Base_Start_IT+0x54>
 800c3a0:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800c3a4:	4293      	cmp	r3, r2
 800c3a6:	d00b      	beq.n	800c3c0 <HAL_TIM_Base_Start_IT+0x54>
 800c3a8:	f502 4278 	add.w	r2, r2, #63488	@ 0xf800
 800c3ac:	4293      	cmp	r3, r2
 800c3ae:	d007      	beq.n	800c3c0 <HAL_TIM_Base_Start_IT+0x54>
 800c3b0:	f5a2 426c 	sub.w	r2, r2, #60416	@ 0xec00
 800c3b4:	4293      	cmp	r3, r2
 800c3b6:	d003      	beq.n	800c3c0 <HAL_TIM_Base_Start_IT+0x54>
 800c3b8:	f502 3294 	add.w	r2, r2, #75776	@ 0x12800
 800c3bc:	4293      	cmp	r3, r2
 800c3be:	d107      	bne.n	800c3d0 <HAL_TIM_Base_Start_IT+0x64>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c3c0:	6899      	ldr	r1, [r3, #8]
 800c3c2:	4a08      	ldr	r2, [pc, #32]	@ (800c3e4 <HAL_TIM_Base_Start_IT+0x78>)
 800c3c4:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c3c6:	2a06      	cmp	r2, #6
 800c3c8:	d006      	beq.n	800c3d8 <HAL_TIM_Base_Start_IT+0x6c>
 800c3ca:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 800c3ce:	d003      	beq.n	800c3d8 <HAL_TIM_Base_Start_IT+0x6c>
    {
      __HAL_TIM_ENABLE(htim);
 800c3d0:	681a      	ldr	r2, [r3, #0]
 800c3d2:	f042 0201 	orr.w	r2, r2, #1
 800c3d6:	601a      	str	r2, [r3, #0]
  {
    __HAL_TIM_ENABLE(htim);
  }

  /* Return function status */
  return HAL_OK;
 800c3d8:	2000      	movs	r0, #0
 800c3da:	4770      	bx	lr
    return HAL_ERROR;
 800c3dc:	2001      	movs	r0, #1
}
 800c3de:	4770      	bx	lr
 800c3e0:	40010000 	.word	0x40010000
 800c3e4:	00010007 	.word	0x00010007

0800c3e8 <HAL_TIM_OC_DelayElapsedCallback>:
/**
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
 800c3e8:	4770      	bx	lr

0800c3ea <HAL_TIM_IC_CaptureCallback>:
/**
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
 800c3ea:	4770      	bx	lr

0800c3ec <HAL_TIM_PWM_PulseFinishedCallback>:
/**
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
 800c3ec:	4770      	bx	lr

0800c3ee <HAL_TIM_TriggerCallback>:
/**
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
 800c3ee:	4770      	bx	lr

0800c3f0 <HAL_TIM_IRQHandler>:
  uint32_t itsource = htim->Instance->DIER;
 800c3f0:	6803      	ldr	r3, [r0, #0]
{
 800c3f2:	b570      	push	{r4, r5, r6, lr}
  uint32_t itsource = htim->Instance->DIER;
 800c3f4:	68dd      	ldr	r5, [r3, #12]
{
 800c3f6:	4604      	mov	r4, r0
  uint32_t itflag   = htim->Instance->SR;
 800c3f8:	691e      	ldr	r6, [r3, #16]
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800c3fa:	07b2      	lsls	r2, r6, #30
 800c3fc:	d50d      	bpl.n	800c41a <HAL_TIM_IRQHandler+0x2a>
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800c3fe:	07a9      	lsls	r1, r5, #30
 800c400:	d50b      	bpl.n	800c41a <HAL_TIM_IRQHandler+0x2a>
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800c402:	f06f 0202 	mvn.w	r2, #2
 800c406:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800c408:	2201      	movs	r2, #1
 800c40a:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800c40c:	699b      	ldr	r3, [r3, #24]
 800c40e:	079a      	lsls	r2, r3, #30
 800c410:	d075      	beq.n	800c4fe <HAL_TIM_IRQHandler+0x10e>
          HAL_TIM_IC_CaptureCallback(htim);
 800c412:	f7ff ffea 	bl	800c3ea <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c416:	2300      	movs	r3, #0
 800c418:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800c41a:	0773      	lsls	r3, r6, #29
 800c41c:	d510      	bpl.n	800c440 <HAL_TIM_IRQHandler+0x50>
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800c41e:	0768      	lsls	r0, r5, #29
 800c420:	d50e      	bpl.n	800c440 <HAL_TIM_IRQHandler+0x50>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800c422:	6823      	ldr	r3, [r4, #0]
 800c424:	f06f 0204 	mvn.w	r2, #4
        HAL_TIM_IC_CaptureCallback(htim);
 800c428:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800c42a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800c42c:	2202      	movs	r2, #2
 800c42e:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800c430:	699b      	ldr	r3, [r3, #24]
 800c432:	f413 7f40 	tst.w	r3, #768	@ 0x300
 800c436:	d068      	beq.n	800c50a <HAL_TIM_IRQHandler+0x11a>
        HAL_TIM_IC_CaptureCallback(htim);
 800c438:	f7ff ffd7 	bl	800c3ea <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c43c:	2300      	movs	r3, #0
 800c43e:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800c440:	0731      	lsls	r1, r6, #28
 800c442:	d50f      	bpl.n	800c464 <HAL_TIM_IRQHandler+0x74>
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800c444:	072a      	lsls	r2, r5, #28
 800c446:	d50d      	bpl.n	800c464 <HAL_TIM_IRQHandler+0x74>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800c448:	6823      	ldr	r3, [r4, #0]
 800c44a:	f06f 0208 	mvn.w	r2, #8
        HAL_TIM_IC_CaptureCallback(htim);
 800c44e:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800c450:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800c452:	2204      	movs	r2, #4
 800c454:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800c456:	69db      	ldr	r3, [r3, #28]
 800c458:	079b      	lsls	r3, r3, #30
 800c45a:	d05c      	beq.n	800c516 <HAL_TIM_IRQHandler+0x126>
        HAL_TIM_IC_CaptureCallback(htim);
 800c45c:	f7ff ffc5 	bl	800c3ea <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c460:	2300      	movs	r3, #0
 800c462:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800c464:	06f1      	lsls	r1, r6, #27
 800c466:	d510      	bpl.n	800c48a <HAL_TIM_IRQHandler+0x9a>
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800c468:	06ea      	lsls	r2, r5, #27
 800c46a:	d50e      	bpl.n	800c48a <HAL_TIM_IRQHandler+0x9a>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800c46c:	6823      	ldr	r3, [r4, #0]
 800c46e:	f06f 0210 	mvn.w	r2, #16
        HAL_TIM_IC_CaptureCallback(htim);
 800c472:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800c474:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800c476:	2208      	movs	r2, #8
 800c478:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800c47a:	69db      	ldr	r3, [r3, #28]
 800c47c:	f413 7f40 	tst.w	r3, #768	@ 0x300
 800c480:	d04f      	beq.n	800c522 <HAL_TIM_IRQHandler+0x132>
        HAL_TIM_IC_CaptureCallback(htim);
 800c482:	f7ff ffb2 	bl	800c3ea <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c486:	2300      	movs	r3, #0
 800c488:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800c48a:	07f3      	lsls	r3, r6, #31
 800c48c:	d508      	bpl.n	800c4a0 <HAL_TIM_IRQHandler+0xb0>
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800c48e:	07e8      	lsls	r0, r5, #31
 800c490:	d506      	bpl.n	800c4a0 <HAL_TIM_IRQHandler+0xb0>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800c492:	6823      	ldr	r3, [r4, #0]
 800c494:	f06f 0201 	mvn.w	r2, #1
      HAL_TIM_PeriodElapsedCallback(htim);
 800c498:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800c49a:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 800c49c:	f7f4 fd48 	bl	8000f30 <HAL_TIM_PeriodElapsedCallback>
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800c4a0:	f416 5f02 	tst.w	r6, #8320	@ 0x2080
 800c4a4:	d008      	beq.n	800c4b8 <HAL_TIM_IRQHandler+0xc8>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800c4a6:	0629      	lsls	r1, r5, #24
 800c4a8:	d506      	bpl.n	800c4b8 <HAL_TIM_IRQHandler+0xc8>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800c4aa:	6823      	ldr	r3, [r4, #0]
 800c4ac:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
      HAL_TIMEx_BreakCallback(htim);
 800c4b0:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800c4b2:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 800c4b4:	f000 f8d9 	bl	800c66a <HAL_TIMEx_BreakCallback>
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800c4b8:	05f2      	lsls	r2, r6, #23
 800c4ba:	d508      	bpl.n	800c4ce <HAL_TIM_IRQHandler+0xde>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800c4bc:	062b      	lsls	r3, r5, #24
 800c4be:	d506      	bpl.n	800c4ce <HAL_TIM_IRQHandler+0xde>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800c4c0:	6823      	ldr	r3, [r4, #0]
 800c4c2:	f46f 7280 	mvn.w	r2, #256	@ 0x100
      HAL_TIMEx_Break2Callback(htim);
 800c4c6:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800c4c8:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 800c4ca:	f000 f8cf 	bl	800c66c <HAL_TIMEx_Break2Callback>
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800c4ce:	0670      	lsls	r0, r6, #25
 800c4d0:	d508      	bpl.n	800c4e4 <HAL_TIM_IRQHandler+0xf4>
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800c4d2:	0669      	lsls	r1, r5, #25
 800c4d4:	d506      	bpl.n	800c4e4 <HAL_TIM_IRQHandler+0xf4>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800c4d6:	6823      	ldr	r3, [r4, #0]
 800c4d8:	f06f 0240 	mvn.w	r2, #64	@ 0x40
      HAL_TIM_TriggerCallback(htim);
 800c4dc:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800c4de:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 800c4e0:	f7ff ff85 	bl	800c3ee <HAL_TIM_TriggerCallback>
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800c4e4:	06b2      	lsls	r2, r6, #26
 800c4e6:	d522      	bpl.n	800c52e <HAL_TIM_IRQHandler+0x13e>
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800c4e8:	06ab      	lsls	r3, r5, #26
 800c4ea:	d520      	bpl.n	800c52e <HAL_TIM_IRQHandler+0x13e>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800c4ec:	6823      	ldr	r3, [r4, #0]
 800c4ee:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 800c4f2:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800c4f4:	611a      	str	r2, [r3, #16]
}
 800c4f6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      HAL_TIMEx_CommutCallback(htim);
 800c4fa:	f000 b8b5 	b.w	800c668 <HAL_TIMEx_CommutCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800c4fe:	f7ff ff73 	bl	800c3e8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c502:	4620      	mov	r0, r4
 800c504:	f7ff ff72 	bl	800c3ec <HAL_TIM_PWM_PulseFinishedCallback>
 800c508:	e785      	b.n	800c416 <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c50a:	f7ff ff6d 	bl	800c3e8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c50e:	4620      	mov	r0, r4
 800c510:	f7ff ff6c 	bl	800c3ec <HAL_TIM_PWM_PulseFinishedCallback>
 800c514:	e792      	b.n	800c43c <HAL_TIM_IRQHandler+0x4c>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c516:	f7ff ff67 	bl	800c3e8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c51a:	4620      	mov	r0, r4
 800c51c:	f7ff ff66 	bl	800c3ec <HAL_TIM_PWM_PulseFinishedCallback>
 800c520:	e79e      	b.n	800c460 <HAL_TIM_IRQHandler+0x70>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c522:	f7ff ff61 	bl	800c3e8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c526:	4620      	mov	r0, r4
 800c528:	f7ff ff60 	bl	800c3ec <HAL_TIM_PWM_PulseFinishedCallback>
 800c52c:	e7ab      	b.n	800c486 <HAL_TIM_IRQHandler+0x96>
}
 800c52e:	bd70      	pop	{r4, r5, r6, pc}

0800c530 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c530:	4a33      	ldr	r2, [pc, #204]	@ (800c600 <TIM_Base_SetConfig+0xd0>)
  tmpcr1 = TIMx->CR1;
 800c532:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c534:	4290      	cmp	r0, r2
 800c536:	d012      	beq.n	800c55e <TIM_Base_SetConfig+0x2e>
 800c538:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 800c53c:	d00f      	beq.n	800c55e <TIM_Base_SetConfig+0x2e>
 800c53e:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 800c542:	4290      	cmp	r0, r2
 800c544:	d00b      	beq.n	800c55e <TIM_Base_SetConfig+0x2e>
 800c546:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800c54a:	4290      	cmp	r0, r2
 800c54c:	d007      	beq.n	800c55e <TIM_Base_SetConfig+0x2e>
 800c54e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800c552:	4290      	cmp	r0, r2
 800c554:	d003      	beq.n	800c55e <TIM_Base_SetConfig+0x2e>
 800c556:	f502 4278 	add.w	r2, r2, #63488	@ 0xf800
 800c55a:	4290      	cmp	r0, r2
 800c55c:	d119      	bne.n	800c592 <TIM_Base_SetConfig+0x62>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 800c55e:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c560:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 800c564:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c566:	4a26      	ldr	r2, [pc, #152]	@ (800c600 <TIM_Base_SetConfig+0xd0>)
 800c568:	4290      	cmp	r0, r2
 800c56a:	d01d      	beq.n	800c5a8 <TIM_Base_SetConfig+0x78>
 800c56c:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 800c570:	d01a      	beq.n	800c5a8 <TIM_Base_SetConfig+0x78>
 800c572:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 800c576:	4290      	cmp	r0, r2
 800c578:	d016      	beq.n	800c5a8 <TIM_Base_SetConfig+0x78>
 800c57a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800c57e:	4290      	cmp	r0, r2
 800c580:	d012      	beq.n	800c5a8 <TIM_Base_SetConfig+0x78>
 800c582:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800c586:	4290      	cmp	r0, r2
 800c588:	d00e      	beq.n	800c5a8 <TIM_Base_SetConfig+0x78>
 800c58a:	f502 4278 	add.w	r2, r2, #63488	@ 0xf800
 800c58e:	4290      	cmp	r0, r2
 800c590:	d00a      	beq.n	800c5a8 <TIM_Base_SetConfig+0x78>
 800c592:	4a1c      	ldr	r2, [pc, #112]	@ (800c604 <TIM_Base_SetConfig+0xd4>)
 800c594:	4290      	cmp	r0, r2
 800c596:	d007      	beq.n	800c5a8 <TIM_Base_SetConfig+0x78>
 800c598:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800c59c:	4290      	cmp	r0, r2
 800c59e:	d003      	beq.n	800c5a8 <TIM_Base_SetConfig+0x78>
 800c5a0:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800c5a4:	4290      	cmp	r0, r2
 800c5a6:	d103      	bne.n	800c5b0 <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800c5a8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c5ac:	68ca      	ldr	r2, [r1, #12]
 800c5ae:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c5b0:	694a      	ldr	r2, [r1, #20]
 800c5b2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c5b6:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 800c5b8:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c5ba:	688b      	ldr	r3, [r1, #8]
 800c5bc:	62c3      	str	r3, [r0, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800c5be:	680b      	ldr	r3, [r1, #0]
 800c5c0:	6283      	str	r3, [r0, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800c5c2:	4b0f      	ldr	r3, [pc, #60]	@ (800c600 <TIM_Base_SetConfig+0xd0>)
 800c5c4:	4298      	cmp	r0, r3
 800c5c6:	d00f      	beq.n	800c5e8 <TIM_Base_SetConfig+0xb8>
 800c5c8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800c5cc:	4298      	cmp	r0, r3
 800c5ce:	d00b      	beq.n	800c5e8 <TIM_Base_SetConfig+0xb8>
 800c5d0:	f503 5370 	add.w	r3, r3, #15360	@ 0x3c00
 800c5d4:	4298      	cmp	r0, r3
 800c5d6:	d007      	beq.n	800c5e8 <TIM_Base_SetConfig+0xb8>
 800c5d8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800c5dc:	4298      	cmp	r0, r3
 800c5de:	d003      	beq.n	800c5e8 <TIM_Base_SetConfig+0xb8>
 800c5e0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800c5e4:	4298      	cmp	r0, r3
 800c5e6:	d101      	bne.n	800c5ec <TIM_Base_SetConfig+0xbc>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800c5e8:	690b      	ldr	r3, [r1, #16]
 800c5ea:	6303      	str	r3, [r0, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800c5ec:	2301      	movs	r3, #1
 800c5ee:	6143      	str	r3, [r0, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800c5f0:	6903      	ldr	r3, [r0, #16]
 800c5f2:	07db      	lsls	r3, r3, #31
 800c5f4:	d503      	bpl.n	800c5fe <TIM_Base_SetConfig+0xce>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800c5f6:	6903      	ldr	r3, [r0, #16]
 800c5f8:	f023 0301 	bic.w	r3, r3, #1
 800c5fc:	6103      	str	r3, [r0, #16]
  }
}
 800c5fe:	4770      	bx	lr
 800c600:	40010000 	.word	0x40010000
 800c604:	40014000 	.word	0x40014000

0800c608 <HAL_TIM_Base_Init>:
{
 800c608:	b510      	push	{r4, lr}
  if (htim == NULL)
 800c60a:	4604      	mov	r4, r0
 800c60c:	b350      	cbz	r0, 800c664 <HAL_TIM_Base_Init+0x5c>
  if (htim->State == HAL_TIM_STATE_RESET)
 800c60e:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 800c612:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 800c616:	b91b      	cbnz	r3, 800c620 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 800c618:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    HAL_TIM_Base_MspInit(htim);
 800c61c:	f7ff fe6b 	bl	800c2f6 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 800c620:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c622:	6820      	ldr	r0, [r4, #0]
 800c624:	1d21      	adds	r1, r4, #4
  htim->State = HAL_TIM_STATE_BUSY;
 800c626:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c62a:	f7ff ff81 	bl	800c530 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c62e:	2301      	movs	r3, #1
  return HAL_OK;
 800c630:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c632:	f884 3048 	strb.w	r3, [r4, #72]	@ 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c636:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 800c63a:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 800c63e:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 800c642:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
 800c646:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800c64a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c64e:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 800c652:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 800c656:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
 800c65a:	f884 3047 	strb.w	r3, [r4, #71]	@ 0x47
  htim->State = HAL_TIM_STATE_READY;
 800c65e:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
}
 800c662:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800c664:	2001      	movs	r0, #1
 800c666:	e7fc      	b.n	800c662 <HAL_TIM_Base_Init+0x5a>

0800c668 <HAL_TIMEx_CommutCallback>:
/**
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
 800c668:	4770      	bx	lr

0800c66a <HAL_TIMEx_BreakCallback>:
/**
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
 800c66a:	4770      	bx	lr

0800c66c <HAL_TIMEx_Break2Callback>:
/**
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
 800c66c:	4770      	bx	lr

0800c66e <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800c66e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800c672:	e9d1 2c01 	ldrd	r2, ip, [r1, #4]
 800c676:	e9d1 3807 	ldrd	r3, r8, [r1, #28]
 800c67a:	f8d1 e024 	ldr.w	lr, [r1, #36]	@ 0x24
 800c67e:	ea43 0308 	orr.w	r3, r3, r8
 800c682:	e9d1 7603 	ldrd	r7, r6, [r1, #12]
 800c686:	e9d1 5405 	ldrd	r5, r4, [r1, #20]
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800c68a:	6809      	ldr	r1, [r1, #0]
 800c68c:	b991      	cbnz	r1, 800c6b4 <FMC_SDRAM_Init+0x46>
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800c68e:	ea43 030e 	orr.w	r3, r3, lr
 800c692:	6801      	ldr	r1, [r0, #0]
 800c694:	4313      	orrs	r3, r2
 800c696:	f421 41ff 	bic.w	r1, r1, #32640	@ 0x7f80
 800c69a:	ea43 030c 	orr.w	r3, r3, ip
 800c69e:	f021 017f 	bic.w	r1, r1, #127	@ 0x7f
 800c6a2:	433b      	orrs	r3, r7
 800c6a4:	4333      	orrs	r3, r6
 800c6a6:	432b      	orrs	r3, r5
 800c6a8:	4323      	orrs	r3, r4
 800c6aa:	430b      	orrs	r3, r1
 800c6ac:	6003      	str	r3, [r0, #0]
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
}
 800c6ae:	2000      	movs	r0, #0
 800c6b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800c6b4:	6801      	ldr	r1, [r0, #0]
 800c6b6:	ea43 030e 	orr.w	r3, r3, lr
 800c6ba:	f421 41f8 	bic.w	r1, r1, #31744	@ 0x7c00
 800c6be:	430b      	orrs	r3, r1
 800c6c0:	6003      	str	r3, [r0, #0]
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 800c6c2:	ea42 030c 	orr.w	r3, r2, ip
 800c6c6:	6841      	ldr	r1, [r0, #4]
 800c6c8:	433b      	orrs	r3, r7
 800c6ca:	f421 42ff 	bic.w	r2, r1, #32640	@ 0x7f80
 800c6ce:	4333      	orrs	r3, r6
 800c6d0:	f022 027f 	bic.w	r2, r2, #127	@ 0x7f
 800c6d4:	432b      	orrs	r3, r5
 800c6d6:	4323      	orrs	r3, r4
 800c6d8:	4313      	orrs	r3, r2
 800c6da:	6043      	str	r3, [r0, #4]
 800c6dc:	e7e7      	b.n	800c6ae <FMC_SDRAM_Init+0x40>

0800c6de <FMC_SDRAM_Timing_Init>:
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800c6de:	68cb      	ldr	r3, [r1, #12]
 800c6e0:	f103 3cff 	add.w	ip, r3, #4294967295
 800c6e4:	694b      	ldr	r3, [r1, #20]
{
 800c6e6:	b5f0      	push	{r4, r5, r6, r7, lr}
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800c6e8:	3b01      	subs	r3, #1
 800c6ea:	680f      	ldr	r7, [r1, #0]
 800c6ec:	684c      	ldr	r4, [r1, #4]
 800c6ee:	688e      	ldr	r6, [r1, #8]
 800c6f0:	051b      	lsls	r3, r3, #20
 800c6f2:	690d      	ldr	r5, [r1, #16]
 800c6f4:	3c01      	subs	r4, #1
 800c6f6:	6989      	ldr	r1, [r1, #24]
 800c6f8:	3e01      	subs	r6, #1
 800c6fa:	3d01      	subs	r5, #1
 800c6fc:	3f01      	subs	r7, #1
 800c6fe:	3901      	subs	r1, #1
 800c700:	0124      	lsls	r4, r4, #4
 800c702:	0236      	lsls	r6, r6, #8
 800c704:	042d      	lsls	r5, r5, #16
 800c706:	0609      	lsls	r1, r1, #24
 800c708:	ea43 330c 	orr.w	r3, r3, ip, lsl #12
  if (Bank == FMC_SDRAM_BANK1)
 800c70c:	b95a      	cbnz	r2, 800c726 <FMC_SDRAM_Timing_Init+0x48>
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800c70e:	433b      	orrs	r3, r7
 800c710:	6882      	ldr	r2, [r0, #8]
 800c712:	4323      	orrs	r3, r4
 800c714:	f002 4270 	and.w	r2, r2, #4026531840	@ 0xf0000000
 800c718:	4333      	orrs	r3, r6
 800c71a:	432b      	orrs	r3, r5
 800c71c:	430b      	orrs	r3, r1
 800c71e:	4313      	orrs	r3, r2
 800c720:	6083      	str	r3, [r0, #8]
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTRx_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }

  return HAL_OK;
}
 800c722:	2000      	movs	r0, #0
 800c724:	bdf0      	pop	{r4, r5, r6, r7, pc}
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800c726:	6882      	ldr	r2, [r0, #8]
 800c728:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800c72c:	f422 4270 	bic.w	r2, r2, #61440	@ 0xf000
 800c730:	431a      	orrs	r2, r3
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800c732:	ea44 0306 	orr.w	r3, r4, r6
 800c736:	433b      	orrs	r3, r7
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800c738:	6082      	str	r2, [r0, #8]
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800c73a:	68c2      	ldr	r2, [r0, #12]
 800c73c:	432b      	orrs	r3, r5
 800c73e:	f002 4270 	and.w	r2, r2, #4026531840	@ 0xf0000000
 800c742:	430b      	orrs	r3, r1
 800c744:	4313      	orrs	r3, r2
 800c746:	60c3      	str	r3, [r0, #12]
 800c748:	e7eb      	b.n	800c722 <FMC_SDRAM_Timing_Init+0x44>

0800c74a <FMC_SDRAM_DeInit>:
  * @brief  DeInitializes the FMC_SDRAM peripheral
  * @param  Device Pointer to SDRAM device instance
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_DeInit(FMC_SDRAM_TypeDef *Device, uint32_t Bank)
{
 800c74a:	4603      	mov	r3, r0
 800c74c:	eb00 0281 	add.w	r2, r0, r1, lsl #2
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* De-initialize the SDRAM device */
  Device->SDCR[Bank] = 0x000002D0U;
 800c750:	f44f 7034 	mov.w	r0, #720	@ 0x2d0
 800c754:	f843 0021 	str.w	r0, [r3, r1, lsl #2]
  Device->SDTR[Bank] = 0x0FFFFFFFU;
  Device->SDCMR      = 0x00000000U;
 800c758:	2000      	movs	r0, #0
  Device->SDTR[Bank] = 0x0FFFFFFFU;
 800c75a:	f06f 4170 	mvn.w	r1, #4026531840	@ 0xf0000000
 800c75e:	6091      	str	r1, [r2, #8]
  Device->SDCMR      = 0x00000000U;
 800c760:	6118      	str	r0, [r3, #16]
  Device->SDRTR      = 0x00000000U;
 800c762:	6158      	str	r0, [r3, #20]
  Device->SDSR       = 0x00000000U;
 800c764:	6198      	str	r0, [r3, #24]

  return HAL_OK;
}
 800c766:	4770      	bx	lr

0800c768 <FMC_SDRAM_SendCommand>:
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 800c768:	6902      	ldr	r2, [r0, #16]
{
 800c76a:	b510      	push	{r4, lr}
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 800c76c:	e9d1 3400 	ldrd	r3, r4, [r1]
 800c770:	0d92      	lsrs	r2, r2, #22
 800c772:	4323      	orrs	r3, r4
 800c774:	68cc      	ldr	r4, [r1, #12]
 800c776:	0592      	lsls	r2, r2, #22
 800c778:	ea43 2344 	orr.w	r3, r3, r4, lsl #9
 800c77c:	4313      	orrs	r3, r2
 800c77e:	688a      	ldr	r2, [r1, #8]
 800c780:	3a01      	subs	r2, #1
 800c782:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
 800c786:	6103      	str	r3, [r0, #16]
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
}
 800c788:	2000      	movs	r0, #0
 800c78a:	bd10      	pop	{r4, pc}

0800c78c <FMC_SDRAM_ProgramRefreshRate>:
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 800c78c:	6943      	ldr	r3, [r0, #20]
 800c78e:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 800c792:	f023 033e 	bic.w	r3, r3, #62	@ 0x3e
 800c796:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
 800c79a:	6143      	str	r3, [r0, #20]

  return HAL_OK;
}
 800c79c:	2000      	movs	r0, #0
 800c79e:	4770      	bx	lr

0800c7a0 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800c7a0:	b508      	push	{r3, lr}
  /* Clear overflow flag */
  SysTick->CTRL;
 800c7a2:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800c7a6:	691b      	ldr	r3, [r3, #16]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800c7a8:	f001 fede 	bl	800e568 <xTaskGetSchedulerState>
 800c7ac:	2801      	cmp	r0, #1
 800c7ae:	d003      	beq.n	800c7b8 <SysTick_Handler+0x18>
    /* Call tick handler */
    xPortSysTickHandler();
  }
}
 800c7b0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    xPortSysTickHandler();
 800c7b4:	f000 bc46 	b.w	800d044 <xPortSysTickHandler>
}
 800c7b8:	bd08      	pop	{r3, pc}
	...

0800c7bc <osKernelInitialize>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c7bc:	f3ef 8305 	mrs	r3, IPSR
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
  osStatus_t stat;

  if (IS_IRQ()) {
 800c7c0:	b92b      	cbnz	r3, 800c7ce <osKernelInitialize+0x12>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelInactive) {
 800c7c2:	4b06      	ldr	r3, [pc, #24]	@ (800c7dc <osKernelInitialize+0x20>)
 800c7c4:	6818      	ldr	r0, [r3, #0]
 800c7c6:	b928      	cbnz	r0, 800c7d4 <osKernelInitialize+0x18>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800c7c8:	2201      	movs	r2, #1
 800c7ca:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800c7cc:	4770      	bx	lr
    stat = osErrorISR;
 800c7ce:	f06f 0005 	mvn.w	r0, #5
 800c7d2:	4770      	bx	lr
    } else {
      stat = osError;
 800c7d4:	f04f 30ff 	mov.w	r0, #4294967295
    }
  }

  return (stat);
}
 800c7d8:	4770      	bx	lr
 800c7da:	bf00      	nop
 800c7dc:	240100e0 	.word	0x240100e0

0800c7e0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800c7e0:	b510      	push	{r4, lr}
 800c7e2:	f3ef 8405 	mrs	r4, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
 800c7e6:	b95c      	cbnz	r4, 800c800 <osKernelStart+0x20>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelReady) {
 800c7e8:	4b08      	ldr	r3, [pc, #32]	@ (800c80c <osKernelStart+0x2c>)
 800c7ea:	681a      	ldr	r2, [r3, #0]
 800c7ec:	2a01      	cmp	r2, #1
 800c7ee:	d10a      	bne.n	800c806 <osKernelStart+0x26>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c7f0:	4a07      	ldr	r2, [pc, #28]	@ (800c810 <osKernelStart+0x30>)
 800c7f2:	77d4      	strb	r4, [r2, #31]
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800c7f4:	2202      	movs	r2, #2
 800c7f6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800c7f8:	f001 fd56 	bl	800e2a8 <vTaskStartScheduler>
      stat = osOK;
 800c7fc:	4620      	mov	r0, r4
      stat = osError;
    }
  }

  return (stat);
}
 800c7fe:	bd10      	pop	{r4, pc}
    stat = osErrorISR;
 800c800:	f06f 0005 	mvn.w	r0, #5
 800c804:	e7fb      	b.n	800c7fe <osKernelStart+0x1e>
      stat = osError;
 800c806:	f04f 30ff 	mov.w	r0, #4294967295
  return (stat);
 800c80a:	e7f8      	b.n	800c7fe <osKernelStart+0x1e>
 800c80c:	240100e0 	.word	0x240100e0
 800c810:	e000ed00 	.word	0xe000ed00

0800c814 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800c814:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c816:	4614      	mov	r4, r2
 800c818:	b087      	sub	sp, #28
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800c81a:	2200      	movs	r2, #0
osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800c81c:	460b      	mov	r3, r1
  hTask = NULL;
 800c81e:	9205      	str	r2, [sp, #20]
 800c820:	f3ef 8205 	mrs	r2, IPSR

  if (!IS_IRQ() && (func != NULL)) {
 800c824:	b9ca      	cbnz	r2, 800c85a <osThreadNew+0x46>
 800c826:	b1c0      	cbz	r0, 800c85a <osThreadNew+0x46>
    prio  = (UBaseType_t)osPriorityNormal;

    name = NULL;
    mem  = -1;

    if (attr != NULL) {
 800c828:	b36c      	cbz	r4, 800c886 <osThreadNew+0x72>
      if (attr->name != NULL) {
        name = attr->name;
      }
      if (attr->priority != osPriorityNone) {
 800c82a:	69a5      	ldr	r5, [r4, #24]
 800c82c:	2d00      	cmp	r5, #0
 800c82e:	bf08      	it	eq
 800c830:	2518      	moveq	r5, #24
        prio = (UBaseType_t)attr->priority;
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800c832:	1e69      	subs	r1, r5, #1
 800c834:	46ac      	mov	ip, r5
 800c836:	2937      	cmp	r1, #55	@ 0x37
 800c838:	d82a      	bhi.n	800c890 <osThreadNew+0x7c>
 800c83a:	6861      	ldr	r1, [r4, #4]
 800c83c:	07c9      	lsls	r1, r1, #31
 800c83e:	d427      	bmi.n	800c890 <osThreadNew+0x7c>
        return (NULL);
      }

      if (attr->stack_size > 0U) {
 800c840:	6966      	ldr	r6, [r4, #20]
 800c842:	b16e      	cbz	r6, 800c860 <osThreadNew+0x4c>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800c844:	08b2      	lsrs	r2, r6, #2
      if (attr->name != NULL) {
 800c846:	6821      	ldr	r1, [r4, #0]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800c848:	e9d4 7e02 	ldrd	r7, lr, [r4, #8]
 800c84c:	b157      	cbz	r7, 800c864 <osThreadNew+0x50>
 800c84e:	f1be 0f5f 	cmp.w	lr, #95	@ 0x5f
 800c852:	d902      	bls.n	800c85a <osThreadNew+0x46>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800c854:	6924      	ldr	r4, [r4, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800c856:	b104      	cbz	r4, 800c85a <osThreadNew+0x46>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800c858:	b9e6      	cbnz	r6, 800c894 <osThreadNew+0x80>
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800c85a:	9805      	ldr	r0, [sp, #20]
}
 800c85c:	b007      	add	sp, #28
 800c85e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    stack = configMINIMAL_STACK_SIZE;
 800c860:	2280      	movs	r2, #128	@ 0x80
 800c862:	e7f0      	b.n	800c846 <osThreadNew+0x32>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800c864:	f1be 0f00 	cmp.w	lr, #0
 800c868:	d1f7      	bne.n	800c85a <osThreadNew+0x46>
      if (mem == 0) {
 800c86a:	6924      	ldr	r4, [r4, #16]
 800c86c:	2c00      	cmp	r4, #0
 800c86e:	d1f4      	bne.n	800c85a <osThreadNew+0x46>
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800c870:	ac05      	add	r4, sp, #20
 800c872:	b292      	uxth	r2, r2
 800c874:	e9cd c400 	strd	ip, r4, [sp]
 800c878:	f001 fbb3 	bl	800dfe2 <xTaskCreate>
 800c87c:	2801      	cmp	r0, #1
            hTask = NULL;
 800c87e:	bf1c      	itt	ne
 800c880:	2300      	movne	r3, #0
 800c882:	9305      	strne	r3, [sp, #20]
 800c884:	e7e9      	b.n	800c85a <osThreadNew+0x46>
    name = NULL;
 800c886:	4621      	mov	r1, r4
    prio  = (UBaseType_t)osPriorityNormal;
 800c888:	f04f 0c18 	mov.w	ip, #24
    stack = configMINIMAL_STACK_SIZE;
 800c88c:	2280      	movs	r2, #128	@ 0x80
 800c88e:	e7ef      	b.n	800c870 <osThreadNew+0x5c>
        return (NULL);
 800c890:	4610      	mov	r0, r2
 800c892:	e7e3      	b.n	800c85c <osThreadNew+0x48>
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800c894:	e9cd 4701 	strd	r4, r7, [sp, #4]
 800c898:	9500      	str	r5, [sp, #0]
 800c89a:	f001 fb6a 	bl	800df72 <xTaskCreateStatic>
 800c89e:	9005      	str	r0, [sp, #20]
 800c8a0:	e7db      	b.n	800c85a <osThreadNew+0x46>

0800c8a2 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 800c8a2:	b570      	push	{r4, r5, r6, lr}
 800c8a4:	4605      	mov	r5, r0
 800c8a6:	f3ef 8605 	mrs	r6, IPSR
  const char *name;
  #endif

  hMutex = NULL;

  if (!IS_IRQ()) {
 800c8aa:	b116      	cbz	r6, 800c8b2 <osMutexNew+0x10>
  hMutex = NULL;
 800c8ac:	2400      	movs	r4, #0
      }
    }
  }

  return ((osMutexId_t)hMutex);
}
 800c8ae:	4620      	mov	r0, r4
 800c8b0:	bd70      	pop	{r4, r5, r6, pc}
    if (attr != NULL) {
 800c8b2:	b110      	cbz	r0, 800c8ba <osMutexNew+0x18>
      type = attr->attr_bits;
 800c8b4:	6846      	ldr	r6, [r0, #4]
    if ((type & osMutexRobust) != osMutexRobust) {
 800c8b6:	0733      	lsls	r3, r6, #28
 800c8b8:	d4f8      	bmi.n	800c8ac <osMutexNew+0xa>
    if ((type & osMutexRecursive) == osMutexRecursive) {
 800c8ba:	f006 0601 	and.w	r6, r6, #1
      if (attr != NULL) {
 800c8be:	b17d      	cbz	r5, 800c8e0 <osMutexNew+0x3e>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800c8c0:	e9d5 1302 	ldrd	r1, r3, [r5, #8]
 800c8c4:	b151      	cbz	r1, 800c8dc <osMutexNew+0x3a>
 800c8c6:	2b4f      	cmp	r3, #79	@ 0x4f
 800c8c8:	d9f0      	bls.n	800c8ac <osMutexNew+0xa>
          if (rmtx != 0U) {
 800c8ca:	b1de      	cbz	r6, 800c904 <osMutexNew+0x62>
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800c8cc:	2004      	movs	r0, #4
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800c8ce:	f000 fec2 	bl	800d656 <xQueueCreateMutexStatic>
 800c8d2:	4604      	mov	r4, r0
      if (hMutex != NULL) {
 800c8d4:	2800      	cmp	r0, #0
 800c8d6:	d0e9      	beq.n	800c8ac <osMutexNew+0xa>
          name = attr->name;
 800c8d8:	682d      	ldr	r5, [r5, #0]
 800c8da:	e00a      	b.n	800c8f2 <osMutexNew+0x50>
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800c8dc:	2b00      	cmp	r3, #0
 800c8de:	d1e5      	bne.n	800c8ac <osMutexNew+0xa>
            if (rmtx != 0U) {
 800c8e0:	b196      	cbz	r6, 800c908 <osMutexNew+0x66>
              hMutex = xSemaphoreCreateRecursiveMutex ();
 800c8e2:	2004      	movs	r0, #4
              hMutex = xSemaphoreCreateMutex ();
 800c8e4:	f000 feeb 	bl	800d6be <xQueueCreateMutex>
 800c8e8:	4604      	mov	r4, r0
      if (hMutex != NULL) {
 800c8ea:	2800      	cmp	r0, #0
 800c8ec:	d0de      	beq.n	800c8ac <osMutexNew+0xa>
        if (attr != NULL) {
 800c8ee:	2d00      	cmp	r5, #0
 800c8f0:	d1f2      	bne.n	800c8d8 <osMutexNew+0x36>
        vQueueAddToRegistry (hMutex, name);
 800c8f2:	4629      	mov	r1, r5
 800c8f4:	4620      	mov	r0, r4
 800c8f6:	f001 f977 	bl	800dbe8 <vQueueAddToRegistry>
      if ((hMutex != NULL) && (rmtx != 0U)) {
 800c8fa:	2e00      	cmp	r6, #0
 800c8fc:	d0d7      	beq.n	800c8ae <osMutexNew+0xc>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 800c8fe:	f044 0401 	orr.w	r4, r4, #1
  return ((osMutexId_t)hMutex);
 800c902:	e7d4      	b.n	800c8ae <osMutexNew+0xc>
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800c904:	2001      	movs	r0, #1
 800c906:	e7e2      	b.n	800c8ce <osMutexNew+0x2c>
              hMutex = xSemaphoreCreateMutex ();
 800c908:	2001      	movs	r0, #1
 800c90a:	e7eb      	b.n	800c8e4 <osMutexNew+0x42>

0800c90c <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 800c90c:	b538      	push	{r3, r4, r5, lr}
 800c90e:	4603      	mov	r3, r0
 800c910:	460c      	mov	r4, r1
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800c912:	f020 0001 	bic.w	r0, r0, #1

  rmtx = (uint32_t)mutex_id & 1U;
 800c916:	f003 0201 	and.w	r2, r3, #1
 800c91a:	f3ef 8505 	mrs	r5, IPSR

  stat = osOK;

  if (IS_IRQ()) {
 800c91e:	b995      	cbnz	r5, 800c946 <osMutexAcquire+0x3a>
    stat = osErrorISR;
  }
  else if (hMutex == NULL) {
 800c920:	2b01      	cmp	r3, #1
 800c922:	d913      	bls.n	800c94c <osMutexAcquire+0x40>
    stat = osErrorParameter;
  }
  else {
    if (rmtx != 0U) {
 800c924:	b162      	cbz	r2, 800c940 <osMutexAcquire+0x34>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 800c926:	f001 f8f0 	bl	800db0a <xQueueTakeMutexRecursive>
 800c92a:	2801      	cmp	r0, #1
 800c92c:	d101      	bne.n	800c932 <osMutexAcquire+0x26>
  stat = osOK;
 800c92e:	2000      	movs	r0, #0
      }
    }
  }

  return (stat);
}
 800c930:	bd38      	pop	{r3, r4, r5, pc}
          stat = osErrorResource;
 800c932:	2c00      	cmp	r4, #0
 800c934:	bf14      	ite	ne
 800c936:	f06f 0001 	mvnne.w	r0, #1
 800c93a:	f06f 0002 	mvneq.w	r0, #2
 800c93e:	e7f7      	b.n	800c930 <osMutexAcquire+0x24>
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 800c940:	f001 f826 	bl	800d990 <xQueueSemaphoreTake>
 800c944:	e7f1      	b.n	800c92a <osMutexAcquire+0x1e>
    stat = osErrorISR;
 800c946:	f06f 0005 	mvn.w	r0, #5
 800c94a:	e7f1      	b.n	800c930 <osMutexAcquire+0x24>
    stat = osErrorParameter;
 800c94c:	f06f 0003 	mvn.w	r0, #3
 800c950:	e7ee      	b.n	800c930 <osMutexAcquire+0x24>

0800c952 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 800c952:	4602      	mov	r2, r0
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800c954:	f020 0001 	bic.w	r0, r0, #1
osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 800c958:	b508      	push	{r3, lr}

  rmtx = (uint32_t)mutex_id & 1U;
 800c95a:	f002 0301 	and.w	r3, r2, #1
 800c95e:	f3ef 8105 	mrs	r1, IPSR

  stat = osOK;

  if (IS_IRQ()) {
 800c962:	b979      	cbnz	r1, 800c984 <osMutexRelease+0x32>
    stat = osErrorISR;
  }
  else if (hMutex == NULL) {
 800c964:	2a01      	cmp	r2, #1
 800c966:	d910      	bls.n	800c98a <osMutexRelease+0x38>
    stat = osErrorParameter;
  }
  else {
    if (rmtx != 0U) {
 800c968:	b13b      	cbz	r3, 800c97a <osMutexRelease+0x28>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 800c96a:	f000 fe89 	bl	800d680 <xQueueGiveMutexRecursive>
 800c96e:	2801      	cmp	r0, #1
  stat = osOK;
 800c970:	bf0c      	ite	eq
 800c972:	2000      	moveq	r0, #0
        stat = osErrorResource;
 800c974:	f06f 0002 	mvnne.w	r0, #2
      }
    }
  }

  return (stat);
}
 800c978:	bd08      	pop	{r3, pc}
      if (xSemaphoreGive (hMutex) != pdPASS) {
 800c97a:	461a      	mov	r2, r3
 800c97c:	4619      	mov	r1, r3
 800c97e:	f000 fdb8 	bl	800d4f2 <xQueueGenericSend>
 800c982:	e7f4      	b.n	800c96e <osMutexRelease+0x1c>
    stat = osErrorISR;
 800c984:	f06f 0005 	mvn.w	r0, #5
 800c988:	e7f6      	b.n	800c978 <osMutexRelease+0x26>
    stat = osErrorParameter;
 800c98a:	f06f 0003 	mvn.w	r0, #3
  return (stat);
 800c98e:	e7f3      	b.n	800c978 <osMutexRelease+0x26>

0800c990 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800c990:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c992:	4604      	mov	r4, r0
 800c994:	460e      	mov	r6, r1
 800c996:	4615      	mov	r5, r2
 800c998:	f3ef 8205 	mrs	r2, IPSR
  const char *name;
  #endif

  hSemaphore = NULL;

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800c99c:	b942      	cbnz	r2, 800c9b0 <osSemaphoreNew+0x20>
 800c99e:	b138      	cbz	r0, 800c9b0 <osSemaphoreNew+0x20>
 800c9a0:	4288      	cmp	r0, r1
 800c9a2:	d305      	bcc.n	800c9b0 <osSemaphoreNew+0x20>
    mem = -1;

    if (attr != NULL) {
 800c9a4:	b155      	cbz	r5, 800c9bc <osSemaphoreNew+0x2c>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800c9a6:	e9d5 3702 	ldrd	r3, r7, [r5, #8]
 800c9aa:	b12b      	cbz	r3, 800c9b8 <osSemaphoreNew+0x28>
 800c9ac:	2f4f      	cmp	r7, #79	@ 0x4f
 800c9ae:	d822      	bhi.n	800c9f6 <osSemaphoreNew+0x66>
  hSemaphore = NULL;
 800c9b0:	2400      	movs	r4, #0
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
}
 800c9b2:	4620      	mov	r0, r4
 800c9b4:	b003      	add	sp, #12
 800c9b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800c9b8:	2f00      	cmp	r7, #0
 800c9ba:	d1f9      	bne.n	800c9b0 <osSemaphoreNew+0x20>
      if (max_count == 1U) {
 800c9bc:	2c01      	cmp	r4, #1
 800c9be:	d00c      	beq.n	800c9da <osSemaphoreNew+0x4a>
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800c9c0:	4620      	mov	r0, r4
 800c9c2:	4631      	mov	r1, r6
 800c9c4:	f000 fd77 	bl	800d4b6 <xQueueCreateCountingSemaphore>
      if (hSemaphore != NULL) {
 800c9c8:	4604      	mov	r4, r0
 800c9ca:	2800      	cmp	r0, #0
 800c9cc:	d0f0      	beq.n	800c9b0 <osSemaphoreNew+0x20>
        if (attr != NULL) {
 800c9ce:	b985      	cbnz	r5, 800c9f2 <osSemaphoreNew+0x62>
        vQueueAddToRegistry (hSemaphore, name);
 800c9d0:	4629      	mov	r1, r5
 800c9d2:	4620      	mov	r0, r4
 800c9d4:	f001 f908 	bl	800dbe8 <vQueueAddToRegistry>
  return ((osSemaphoreId_t)hSemaphore);
 800c9d8:	e7eb      	b.n	800c9b2 <osSemaphoreNew+0x22>
            hSemaphore = xSemaphoreCreateBinary();
 800c9da:	2203      	movs	r2, #3
 800c9dc:	2100      	movs	r1, #0
 800c9de:	2001      	movs	r0, #1
 800c9e0:	f000 fd20 	bl	800d424 <xQueueGenericCreate>
 800c9e4:	e00e      	b.n	800ca04 <osSemaphoreNew+0x74>
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800c9e6:	461a      	mov	r2, r3
 800c9e8:	f000 fd43 	bl	800d472 <xQueueCreateCountingSemaphoreStatic>
      if (hSemaphore != NULL) {
 800c9ec:	4604      	mov	r4, r0
 800c9ee:	2800      	cmp	r0, #0
 800c9f0:	d0de      	beq.n	800c9b0 <osSemaphoreNew+0x20>
          name = attr->name;
 800c9f2:	682d      	ldr	r5, [r5, #0]
 800c9f4:	e7ec      	b.n	800c9d0 <osSemaphoreNew+0x40>
      if (max_count == 1U) {
 800c9f6:	2801      	cmp	r0, #1
 800c9f8:	d1f5      	bne.n	800c9e6 <osSemaphoreNew+0x56>
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800c9fa:	2103      	movs	r1, #3
 800c9fc:	9100      	str	r1, [sp, #0]
 800c9fe:	4611      	mov	r1, r2
 800ca00:	f000 fcc2 	bl	800d388 <xQueueGenericCreateStatic>
            hSemaphore = xSemaphoreCreateBinary();
 800ca04:	4604      	mov	r4, r0
        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800ca06:	2800      	cmp	r0, #0
 800ca08:	d0d2      	beq.n	800c9b0 <osSemaphoreNew+0x20>
 800ca0a:	2e00      	cmp	r6, #0
 800ca0c:	d0df      	beq.n	800c9ce <osSemaphoreNew+0x3e>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800ca0e:	2300      	movs	r3, #0
 800ca10:	461a      	mov	r2, r3
 800ca12:	4619      	mov	r1, r3
 800ca14:	f000 fd6d 	bl	800d4f2 <xQueueGenericSend>
 800ca18:	2801      	cmp	r0, #1
 800ca1a:	d0d8      	beq.n	800c9ce <osSemaphoreNew+0x3e>
            vSemaphoreDelete (hSemaphore);
 800ca1c:	4620      	mov	r0, r4
 800ca1e:	f001 f90d 	bl	800dc3c <vQueueDelete>
      if (hSemaphore != NULL) {
 800ca22:	e7c5      	b.n	800c9b0 <osSemaphoreNew+0x20>

0800ca24 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800ca24:	b513      	push	{r0, r1, r4, lr}
 800ca26:	460c      	mov	r4, r1
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;

  if (hSemaphore == NULL) {
 800ca28:	b328      	cbz	r0, 800ca76 <osSemaphoreAcquire+0x52>
 800ca2a:	f3ef 8305 	mrs	r3, IPSR
    stat = osErrorParameter;
  }
  else if (IS_IRQ()) {
 800ca2e:	b1cb      	cbz	r3, 800ca64 <osSemaphoreAcquire+0x40>
    if (timeout != 0U) {
 800ca30:	bb09      	cbnz	r1, 800ca76 <osSemaphoreAcquire+0x52>
      stat = osErrorParameter;
    }
    else {
      yield = pdFALSE;

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800ca32:	aa01      	add	r2, sp, #4
      yield = pdFALSE;
 800ca34:	9101      	str	r1, [sp, #4]
      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800ca36:	f001 f889 	bl	800db4c <xQueueReceiveFromISR>
 800ca3a:	2801      	cmp	r0, #1
 800ca3c:	d003      	beq.n	800ca46 <osSemaphoreAcquire+0x22>
        stat = osErrorResource;
 800ca3e:	f06f 0002 	mvn.w	r0, #2
      }
    }
  }

  return (stat);
}
 800ca42:	b002      	add	sp, #8
 800ca44:	bd10      	pop	{r4, pc}
        portYIELD_FROM_ISR (yield);
 800ca46:	9b01      	ldr	r3, [sp, #4]
 800ca48:	b90b      	cbnz	r3, 800ca4e <osSemaphoreAcquire+0x2a>
  stat = osOK;
 800ca4a:	2000      	movs	r0, #0
 800ca4c:	e7f9      	b.n	800ca42 <osSemaphoreAcquire+0x1e>
        portYIELD_FROM_ISR (yield);
 800ca4e:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800ca52:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ca56:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800ca5a:	f3bf 8f4f 	dsb	sy
 800ca5e:	f3bf 8f6f 	isb	sy
 800ca62:	e7f2      	b.n	800ca4a <osSemaphoreAcquire+0x26>
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800ca64:	f000 ff94 	bl	800d990 <xQueueSemaphoreTake>
 800ca68:	2801      	cmp	r0, #1
 800ca6a:	d0ee      	beq.n	800ca4a <osSemaphoreAcquire+0x26>
      if (timeout != 0U) {
 800ca6c:	2c00      	cmp	r4, #0
 800ca6e:	d0e6      	beq.n	800ca3e <osSemaphoreAcquire+0x1a>
        stat = osErrorTimeout;
 800ca70:	f06f 0001 	mvn.w	r0, #1
 800ca74:	e7e5      	b.n	800ca42 <osSemaphoreAcquire+0x1e>
    stat = osErrorParameter;
 800ca76:	f06f 0003 	mvn.w	r0, #3
  return (stat);
 800ca7a:	e7e2      	b.n	800ca42 <osSemaphoreAcquire+0x1e>

0800ca7c <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800ca7c:	b507      	push	{r0, r1, r2, lr}
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;

  if (hSemaphore == NULL) {
 800ca7e:	b318      	cbz	r0, 800cac8 <osSemaphoreRelease+0x4c>
 800ca80:	f3ef 8305 	mrs	r3, IPSR
    stat = osErrorParameter;
  }
  else if (IS_IRQ()) {
 800ca84:	b1cb      	cbz	r3, 800caba <osSemaphoreRelease+0x3e>
    yield = pdFALSE;
 800ca86:	2300      	movs	r3, #0

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800ca88:	a901      	add	r1, sp, #4
    yield = pdFALSE;
 800ca8a:	9301      	str	r3, [sp, #4]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800ca8c:	f000 fe91 	bl	800d7b2 <xQueueGiveFromISR>
 800ca90:	2801      	cmp	r0, #1
 800ca92:	d004      	beq.n	800ca9e <osSemaphoreRelease+0x22>
      portYIELD_FROM_ISR (yield);
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
      stat = osErrorResource;
 800ca94:	f06f 0002 	mvn.w	r0, #2
    }
  }

  return (stat);
}
 800ca98:	b003      	add	sp, #12
 800ca9a:	f85d fb04 	ldr.w	pc, [sp], #4
      portYIELD_FROM_ISR (yield);
 800ca9e:	9b01      	ldr	r3, [sp, #4]
 800caa0:	b14b      	cbz	r3, 800cab6 <osSemaphoreRelease+0x3a>
 800caa2:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800caa6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800caaa:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800caae:	f3bf 8f4f 	dsb	sy
 800cab2:	f3bf 8f6f 	isb	sy
  stat = osOK;
 800cab6:	2000      	movs	r0, #0
 800cab8:	e7ee      	b.n	800ca98 <osSemaphoreRelease+0x1c>
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800caba:	461a      	mov	r2, r3
 800cabc:	4619      	mov	r1, r3
 800cabe:	f000 fd18 	bl	800d4f2 <xQueueGenericSend>
 800cac2:	2801      	cmp	r0, #1
 800cac4:	d0f7      	beq.n	800cab6 <osSemaphoreRelease+0x3a>
 800cac6:	e7e5      	b.n	800ca94 <osSemaphoreRelease+0x18>
    stat = osErrorParameter;
 800cac8:	f06f 0003 	mvn.w	r0, #3
  return (stat);
 800cacc:	e7e4      	b.n	800ca98 <osSemaphoreRelease+0x1c>

0800cace <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800cace:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cad0:	4605      	mov	r5, r0
 800cad2:	460e      	mov	r6, r1
 800cad4:	4614      	mov	r4, r2
 800cad6:	f3ef 8705 	mrs	r7, IPSR
  const char *name;
  #endif

  hQueue = NULL;

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800cada:	b11f      	cbz	r7, 800cae4 <osMessageQueueNew+0x16>
  hQueue = NULL;
 800cadc:	2500      	movs	r5, #0
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
}
 800cade:	4628      	mov	r0, r5
 800cae0:	b003      	add	sp, #12
 800cae2:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800cae4:	2800      	cmp	r0, #0
 800cae6:	d0f9      	beq.n	800cadc <osMessageQueueNew+0xe>
 800cae8:	2900      	cmp	r1, #0
 800caea:	d0f7      	beq.n	800cadc <osMessageQueueNew+0xe>
    if (attr != NULL) {
 800caec:	b1da      	cbz	r2, 800cb26 <osMessageQueueNew+0x58>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800caee:	e9d2 3202 	ldrd	r3, r2, [r2, #8]
 800caf2:	b183      	cbz	r3, 800cb16 <osMessageQueueNew+0x48>
 800caf4:	2a4f      	cmp	r2, #79	@ 0x4f
 800caf6:	d9f1      	bls.n	800cadc <osMessageQueueNew+0xe>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800caf8:	6922      	ldr	r2, [r4, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800cafa:	2a00      	cmp	r2, #0
 800cafc:	d0ee      	beq.n	800cadc <osMessageQueueNew+0xe>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800cafe:	434d      	muls	r5, r1
 800cb00:	6966      	ldr	r6, [r4, #20]
 800cb02:	42ae      	cmp	r6, r5
 800cb04:	d3ea      	bcc.n	800cadc <osMessageQueueNew+0xe>
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800cb06:	9700      	str	r7, [sp, #0]
 800cb08:	f000 fc3e 	bl	800d388 <xQueueGenericCreateStatic>
    if (hQueue != NULL) {
 800cb0c:	4605      	mov	r5, r0
 800cb0e:	2800      	cmp	r0, #0
 800cb10:	d0e4      	beq.n	800cadc <osMessageQueueNew+0xe>
        name = attr->name;
 800cb12:	6824      	ldr	r4, [r4, #0]
 800cb14:	e011      	b.n	800cb3a <osMessageQueueNew+0x6c>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800cb16:	2a00      	cmp	r2, #0
 800cb18:	d1e0      	bne.n	800cadc <osMessageQueueNew+0xe>
 800cb1a:	6923      	ldr	r3, [r4, #16]
 800cb1c:	2b00      	cmp	r3, #0
 800cb1e:	d1dd      	bne.n	800cadc <osMessageQueueNew+0xe>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800cb20:	6963      	ldr	r3, [r4, #20]
 800cb22:	2b00      	cmp	r3, #0
 800cb24:	d1da      	bne.n	800cadc <osMessageQueueNew+0xe>
          hQueue = xQueueCreate (msg_count, msg_size);
 800cb26:	4628      	mov	r0, r5
 800cb28:	2200      	movs	r2, #0
 800cb2a:	4631      	mov	r1, r6
 800cb2c:	f000 fc7a 	bl	800d424 <xQueueGenericCreate>
    if (hQueue != NULL) {
 800cb30:	4605      	mov	r5, r0
 800cb32:	2800      	cmp	r0, #0
 800cb34:	d0d2      	beq.n	800cadc <osMessageQueueNew+0xe>
      if (attr != NULL) {
 800cb36:	2c00      	cmp	r4, #0
 800cb38:	d1eb      	bne.n	800cb12 <osMessageQueueNew+0x44>
      vQueueAddToRegistry (hQueue, name);
 800cb3a:	4621      	mov	r1, r4
 800cb3c:	4628      	mov	r0, r5
 800cb3e:	f001 f853 	bl	800dbe8 <vQueueAddToRegistry>
  return ((osMessageQueueId_t)hQueue);
 800cb42:	e7cc      	b.n	800cade <osMessageQueueNew+0x10>

0800cb44 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800cb44:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800cb46:	461c      	mov	r4, r3
 800cb48:	f3ef 8605 	mrs	r6, IPSR

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;

  if (IS_IRQ()) {
 800cb4c:	b1de      	cbz	r6, 800cb86 <osMessageQueuePut+0x42>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800cb4e:	b338      	cbz	r0, 800cba0 <osMessageQueuePut+0x5c>
 800cb50:	b331      	cbz	r1, 800cba0 <osMessageQueuePut+0x5c>
 800cb52:	bb2b      	cbnz	r3, 800cba0 <osMessageQueuePut+0x5c>
      stat = osErrorParameter;
    }
    else {
      yield = pdFALSE;

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800cb54:	aa01      	add	r2, sp, #4
      yield = pdFALSE;
 800cb56:	9301      	str	r3, [sp, #4]
      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800cb58:	f000 fdce 	bl	800d6f8 <xQueueGenericSendFromISR>
 800cb5c:	2801      	cmp	r0, #1
 800cb5e:	d003      	beq.n	800cb68 <osMessageQueuePut+0x24>
        stat = osErrorResource;
 800cb60:	f06f 0002 	mvn.w	r0, #2
      }
    }
  }

  return (stat);
}
 800cb64:	b002      	add	sp, #8
 800cb66:	bd70      	pop	{r4, r5, r6, pc}
        portYIELD_FROM_ISR (yield);
 800cb68:	9b01      	ldr	r3, [sp, #4]
 800cb6a:	b90b      	cbnz	r3, 800cb70 <osMessageQueuePut+0x2c>
  stat = osOK;
 800cb6c:	2000      	movs	r0, #0
 800cb6e:	e7f9      	b.n	800cb64 <osMessageQueuePut+0x20>
        portYIELD_FROM_ISR (yield);
 800cb70:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800cb74:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cb78:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800cb7c:	f3bf 8f4f 	dsb	sy
 800cb80:	f3bf 8f6f 	isb	sy
 800cb84:	e7f2      	b.n	800cb6c <osMessageQueuePut+0x28>
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800cb86:	b158      	cbz	r0, 800cba0 <osMessageQueuePut+0x5c>
 800cb88:	b151      	cbz	r1, 800cba0 <osMessageQueuePut+0x5c>
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800cb8a:	4633      	mov	r3, r6
 800cb8c:	4622      	mov	r2, r4
 800cb8e:	f000 fcb0 	bl	800d4f2 <xQueueGenericSend>
 800cb92:	2801      	cmp	r0, #1
 800cb94:	d0ea      	beq.n	800cb6c <osMessageQueuePut+0x28>
        if (timeout != 0U) {
 800cb96:	2c00      	cmp	r4, #0
 800cb98:	d0e2      	beq.n	800cb60 <osMessageQueuePut+0x1c>
          stat = osErrorTimeout;
 800cb9a:	f06f 0001 	mvn.w	r0, #1
 800cb9e:	e7e1      	b.n	800cb64 <osMessageQueuePut+0x20>
      stat = osErrorParameter;
 800cba0:	f06f 0003 	mvn.w	r0, #3
  return (stat);
 800cba4:	e7de      	b.n	800cb64 <osMessageQueuePut+0x20>

0800cba6 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800cba6:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800cba8:	461c      	mov	r4, r3
 800cbaa:	f3ef 8305 	mrs	r3, IPSR

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;

  if (IS_IRQ()) {
 800cbae:	b1db      	cbz	r3, 800cbe8 <osMessageQueueGet+0x42>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800cbb0:	b330      	cbz	r0, 800cc00 <osMessageQueueGet+0x5a>
 800cbb2:	b329      	cbz	r1, 800cc00 <osMessageQueueGet+0x5a>
 800cbb4:	bb24      	cbnz	r4, 800cc00 <osMessageQueueGet+0x5a>
      stat = osErrorParameter;
    }
    else {
      yield = pdFALSE;

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800cbb6:	aa01      	add	r2, sp, #4
      yield = pdFALSE;
 800cbb8:	9401      	str	r4, [sp, #4]
      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800cbba:	f000 ffc7 	bl	800db4c <xQueueReceiveFromISR>
 800cbbe:	2801      	cmp	r0, #1
 800cbc0:	d003      	beq.n	800cbca <osMessageQueueGet+0x24>
        stat = osErrorResource;
 800cbc2:	f06f 0002 	mvn.w	r0, #2
      }
    }
  }

  return (stat);
}
 800cbc6:	b003      	add	sp, #12
 800cbc8:	bd30      	pop	{r4, r5, pc}
        portYIELD_FROM_ISR (yield);
 800cbca:	9b01      	ldr	r3, [sp, #4]
 800cbcc:	b90b      	cbnz	r3, 800cbd2 <osMessageQueueGet+0x2c>
  stat = osOK;
 800cbce:	2000      	movs	r0, #0
 800cbd0:	e7f9      	b.n	800cbc6 <osMessageQueueGet+0x20>
        portYIELD_FROM_ISR (yield);
 800cbd2:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800cbd6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cbda:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800cbde:	f3bf 8f4f 	dsb	sy
 800cbe2:	f3bf 8f6f 	isb	sy
 800cbe6:	e7f2      	b.n	800cbce <osMessageQueueGet+0x28>
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800cbe8:	b150      	cbz	r0, 800cc00 <osMessageQueueGet+0x5a>
 800cbea:	b149      	cbz	r1, 800cc00 <osMessageQueueGet+0x5a>
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800cbec:	4622      	mov	r2, r4
 800cbee:	f000 fe31 	bl	800d854 <xQueueReceive>
 800cbf2:	2801      	cmp	r0, #1
 800cbf4:	d0eb      	beq.n	800cbce <osMessageQueueGet+0x28>
        if (timeout != 0U) {
 800cbf6:	2c00      	cmp	r4, #0
 800cbf8:	d0e3      	beq.n	800cbc2 <osMessageQueueGet+0x1c>
          stat = osErrorTimeout;
 800cbfa:	f06f 0001 	mvn.w	r0, #1
 800cbfe:	e7e2      	b.n	800cbc6 <osMessageQueueGet+0x20>
      stat = osErrorParameter;
 800cc00:	f06f 0003 	mvn.w	r0, #3
  return (stat);
 800cc04:	e7df      	b.n	800cbc6 <osMessageQueueGet+0x20>
	...

0800cc08 <vApplicationGetIdleTaskMemory>:
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800cc08:	4b03      	ldr	r3, [pc, #12]	@ (800cc18 <vApplicationGetIdleTaskMemory+0x10>)
 800cc0a:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800cc0c:	4b03      	ldr	r3, [pc, #12]	@ (800cc1c <vApplicationGetIdleTaskMemory+0x14>)
 800cc0e:	600b      	str	r3, [r1, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800cc10:	2380      	movs	r3, #128	@ 0x80
 800cc12:	6013      	str	r3, [r2, #0]
}
 800cc14:	4770      	bx	lr
 800cc16:	bf00      	nop
 800cc18:	24010080 	.word	0x24010080
 800cc1c:	2400fe80 	.word	0x2400fe80

0800cc20 <vApplicationGetTimerTaskMemory>:
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800cc20:	4b03      	ldr	r3, [pc, #12]	@ (800cc30 <vApplicationGetTimerTaskMemory+0x10>)
 800cc22:	6003      	str	r3, [r0, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800cc24:	4b03      	ldr	r3, [pc, #12]	@ (800cc34 <vApplicationGetTimerTaskMemory+0x14>)
 800cc26:	600b      	str	r3, [r1, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800cc28:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800cc2c:	6013      	str	r3, [r2, #0]
}
 800cc2e:	4770      	bx	lr
 800cc30:	2400fe20 	.word	0x2400fe20
 800cc34:	2400fa20 	.word	0x2400fa20

0800cc38 <prvInsertBlockIntoFreeList>:
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800cc38:	4b10      	ldr	r3, [pc, #64]	@ (800cc7c <prvInsertBlockIntoFreeList+0x44>)
{
 800cc3a:	b510      	push	{r4, lr}
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800cc3c:	461a      	mov	r2, r3
 800cc3e:	681b      	ldr	r3, [r3, #0]
 800cc40:	4283      	cmp	r3, r0
 800cc42:	d3fb      	bcc.n	800cc3c <prvInsertBlockIntoFreeList+0x4>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800cc44:	6854      	ldr	r4, [r2, #4]
 800cc46:	1911      	adds	r1, r2, r4
 800cc48:	4288      	cmp	r0, r1
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800cc4a:	bf01      	itttt	eq
 800cc4c:	6841      	ldreq	r1, [r0, #4]
 800cc4e:	4610      	moveq	r0, r2
 800cc50:	1909      	addeq	r1, r1, r4
 800cc52:	6051      	streq	r1, [r2, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800cc54:	6844      	ldr	r4, [r0, #4]
 800cc56:	1901      	adds	r1, r0, r4
 800cc58:	428b      	cmp	r3, r1
 800cc5a:	d10c      	bne.n	800cc76 <prvInsertBlockIntoFreeList+0x3e>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800cc5c:	4908      	ldr	r1, [pc, #32]	@ (800cc80 <prvInsertBlockIntoFreeList+0x48>)
 800cc5e:	6809      	ldr	r1, [r1, #0]
 800cc60:	428b      	cmp	r3, r1
 800cc62:	d003      	beq.n	800cc6c <prvInsertBlockIntoFreeList+0x34>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800cc64:	6859      	ldr	r1, [r3, #4]
 800cc66:	4421      	add	r1, r4
 800cc68:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800cc6a:	6819      	ldr	r1, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800cc6c:	4290      	cmp	r0, r2
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800cc6e:	6001      	str	r1, [r0, #0]
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800cc70:	bf18      	it	ne
 800cc72:	6010      	strne	r0, [r2, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800cc74:	bd10      	pop	{r4, pc}
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800cc76:	4619      	mov	r1, r3
 800cc78:	e7f8      	b.n	800cc6c <prvInsertBlockIntoFreeList+0x34>
 800cc7a:	bf00      	nop
 800cc7c:	240100fc 	.word	0x240100fc
 800cc80:	240100f8 	.word	0x240100f8

0800cc84 <pvPortMalloc>:
{
 800cc84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cc88:	4604      	mov	r4, r0
	vTaskSuspendAll();
 800cc8a:	f001 f9d9 	bl	800e040 <vTaskSuspendAll>
		if( pxEnd == NULL )
 800cc8e:	4940      	ldr	r1, [pc, #256]	@ (800cd90 <pvPortMalloc+0x10c>)
 800cc90:	4d40      	ldr	r5, [pc, #256]	@ (800cd94 <pvPortMalloc+0x110>)
 800cc92:	680b      	ldr	r3, [r1, #0]
 800cc94:	b9f3      	cbnz	r3, 800ccd4 <pvPortMalloc+0x50>
	uxAddress = ( size_t ) ucHeap;
 800cc96:	4a40      	ldr	r2, [pc, #256]	@ (800cd98 <pvPortMalloc+0x114>)
	xStart.xBlockSize = ( size_t ) 0;
 800cc98:	2000      	movs	r0, #0
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800cc9a:	0756      	lsls	r6, r2, #29
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800cc9c:	4e3f      	ldr	r6, [pc, #252]	@ (800cd9c <pvPortMalloc+0x118>)
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800cc9e:	bf1b      	ittet	ne
 800cca0:	3207      	addne	r2, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800cca2:	4b3f      	ldrne	r3, [pc, #252]	@ (800cda0 <pvPortMalloc+0x11c>)
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800cca4:	4b3f      	ldreq	r3, [pc, #252]	@ (800cda4 <pvPortMalloc+0x120>)
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800cca6:	f022 0207 	bicne.w	r2, r2, #7
	xStart.xBlockSize = ( size_t ) 0;
 800ccaa:	6070      	str	r0, [r6, #4]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800ccac:	bf18      	it	ne
 800ccae:	1a9b      	subne	r3, r3, r2
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800ccb0:	6032      	str	r2, [r6, #0]
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800ccb2:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
 800ccb4:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ccb6:	f023 0307 	bic.w	r3, r3, #7
	pxEnd->pxNextFreeBlock = NULL;
 800ccba:	e9c3 0000 	strd	r0, r0, [r3]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800ccbe:	1a98      	subs	r0, r3, r2
	pxEnd = ( void * ) uxAddress;
 800ccc0:	600b      	str	r3, [r1, #0]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800ccc2:	e9c2 3000 	strd	r3, r0, [r2]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ccc6:	4b38      	ldr	r3, [pc, #224]	@ (800cda8 <pvPortMalloc+0x124>)
 800ccc8:	6018      	str	r0, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ccca:	4b38      	ldr	r3, [pc, #224]	@ (800cdac <pvPortMalloc+0x128>)
 800cccc:	6018      	str	r0, [r3, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800ccce:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800ccd2:	602b      	str	r3, [r5, #0]
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800ccd4:	682e      	ldr	r6, [r5, #0]
 800ccd6:	4226      	tst	r6, r4
 800ccd8:	d155      	bne.n	800cd86 <pvPortMalloc+0x102>
			if( xWantedSize > 0 )
 800ccda:	2c00      	cmp	r4, #0
 800ccdc:	d046      	beq.n	800cd6c <pvPortMalloc+0xe8>
				xWantedSize += xHeapStructSize;
 800ccde:	f104 0308 	add.w	r3, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800cce2:	0760      	lsls	r0, r4, #29
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800cce4:	bf1c      	itt	ne
 800cce6:	f023 0307 	bicne.w	r3, r3, #7
 800ccea:	3308      	addne	r3, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800ccec:	2b00      	cmp	r3, #0
 800ccee:	d04a      	beq.n	800cd86 <pvPortMalloc+0x102>
 800ccf0:	4f2e      	ldr	r7, [pc, #184]	@ (800cdac <pvPortMalloc+0x128>)
 800ccf2:	683c      	ldr	r4, [r7, #0]
 800ccf4:	429c      	cmp	r4, r3
 800ccf6:	d346      	bcc.n	800cd86 <pvPortMalloc+0x102>
				pxBlock = xStart.pxNextFreeBlock;
 800ccf8:	4a28      	ldr	r2, [pc, #160]	@ (800cd9c <pvPortMalloc+0x118>)
 800ccfa:	6815      	ldr	r5, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ccfc:	6868      	ldr	r0, [r5, #4]
 800ccfe:	4298      	cmp	r0, r3
 800cd00:	d204      	bcs.n	800cd0c <pvPortMalloc+0x88>
 800cd02:	f8d5 c000 	ldr.w	ip, [r5]
 800cd06:	f1bc 0f00 	cmp.w	ip, #0
 800cd0a:	d115      	bne.n	800cd38 <pvPortMalloc+0xb4>
				if( pxBlock != pxEnd )
 800cd0c:	6809      	ldr	r1, [r1, #0]
 800cd0e:	42a9      	cmp	r1, r5
 800cd10:	d039      	beq.n	800cd86 <pvPortMalloc+0x102>
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800cd12:	6829      	ldr	r1, [r5, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800cd14:	f8d2 8000 	ldr.w	r8, [r2]
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800cd18:	6011      	str	r1, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800cd1a:	1ac2      	subs	r2, r0, r3
 800cd1c:	2a10      	cmp	r2, #16
 800cd1e:	d912      	bls.n	800cd46 <pvPortMalloc+0xc2>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800cd20:	18e8      	adds	r0, r5, r3
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800cd22:	0741      	lsls	r1, r0, #29
 800cd24:	d00b      	beq.n	800cd3e <pvPortMalloc+0xba>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800cd26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cd2a:	f383 8811 	msr	BASEPRI, r3
 800cd2e:	f3bf 8f6f 	isb	sy
 800cd32:	f3bf 8f4f 	dsb	sy
 800cd36:	e7fe      	b.n	800cd36 <pvPortMalloc+0xb2>
 800cd38:	462a      	mov	r2, r5
 800cd3a:	4665      	mov	r5, ip
 800cd3c:	e7de      	b.n	800ccfc <pvPortMalloc+0x78>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800cd3e:	6042      	str	r2, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 800cd40:	606b      	str	r3, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800cd42:	f7ff ff79 	bl	800cc38 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800cd46:	686a      	ldr	r2, [r5, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800cd48:	2300      	movs	r3, #0
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800cd4a:	4917      	ldr	r1, [pc, #92]	@ (800cda8 <pvPortMalloc+0x124>)
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800cd4c:	1aa4      	subs	r4, r4, r2
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800cd4e:	4316      	orrs	r6, r2
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800cd50:	6808      	ldr	r0, [r1, #0]
					xNumberOfSuccessfulAllocations++;
 800cd52:	4a17      	ldr	r2, [pc, #92]	@ (800cdb0 <pvPortMalloc+0x12c>)
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800cd54:	4284      	cmp	r4, r0
					pxBlock->pxNextFreeBlock = NULL;
 800cd56:	602b      	str	r3, [r5, #0]
					xNumberOfSuccessfulAllocations++;
 800cd58:	6813      	ldr	r3, [r2, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800cd5a:	603c      	str	r4, [r7, #0]
					xNumberOfSuccessfulAllocations++;
 800cd5c:	f103 0301 	add.w	r3, r3, #1
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800cd60:	bf38      	it	cc
 800cd62:	600c      	strcc	r4, [r1, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800cd64:	f108 0408 	add.w	r4, r8, #8
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800cd68:	606e      	str	r6, [r5, #4]
					xNumberOfSuccessfulAllocations++;
 800cd6a:	6013      	str	r3, [r2, #0]
	( void ) xTaskResumeAll();
 800cd6c:	f001 fa0c 	bl	800e188 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800cd70:	0763      	lsls	r3, r4, #29
 800cd72:	d00a      	beq.n	800cd8a <pvPortMalloc+0x106>
 800cd74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cd78:	f383 8811 	msr	BASEPRI, r3
 800cd7c:	f3bf 8f6f 	isb	sy
 800cd80:	f3bf 8f4f 	dsb	sy
 800cd84:	e7fe      	b.n	800cd84 <pvPortMalloc+0x100>
void *pvReturn = NULL;
 800cd86:	2400      	movs	r4, #0
 800cd88:	e7f0      	b.n	800cd6c <pvPortMalloc+0xe8>
}
 800cd8a:	4620      	mov	r0, r4
 800cd8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cd90:	240100f8 	.word	0x240100f8
 800cd94:	240100e4 	.word	0x240100e4
 800cd98:	24010104 	.word	0x24010104
 800cd9c:	240100fc 	.word	0x240100fc
 800cda0:	240287a4 	.word	0x240287a4
 800cda4:	000186a0 	.word	0x000186a0
 800cda8:	240100f0 	.word	0x240100f0
 800cdac:	240100f4 	.word	0x240100f4
 800cdb0:	240100ec 	.word	0x240100ec

0800cdb4 <vPortFree>:
{
 800cdb4:	b510      	push	{r4, lr}
	if( pv != NULL )
 800cdb6:	4604      	mov	r4, r0
 800cdb8:	b390      	cbz	r0, 800ce20 <vPortFree+0x6c>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800cdba:	4a1a      	ldr	r2, [pc, #104]	@ (800ce24 <vPortFree+0x70>)
 800cdbc:	f850 3c04 	ldr.w	r3, [r0, #-4]
 800cdc0:	6812      	ldr	r2, [r2, #0]
 800cdc2:	4213      	tst	r3, r2
 800cdc4:	d108      	bne.n	800cdd8 <vPortFree+0x24>
 800cdc6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cdca:	f383 8811 	msr	BASEPRI, r3
 800cdce:	f3bf 8f6f 	isb	sy
 800cdd2:	f3bf 8f4f 	dsb	sy
 800cdd6:	e7fe      	b.n	800cdd6 <vPortFree+0x22>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800cdd8:	f850 1c08 	ldr.w	r1, [r0, #-8]
 800cddc:	b141      	cbz	r1, 800cdf0 <vPortFree+0x3c>
 800cdde:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cde2:	f383 8811 	msr	BASEPRI, r3
 800cde6:	f3bf 8f6f 	isb	sy
 800cdea:	f3bf 8f4f 	dsb	sy
 800cdee:	e7fe      	b.n	800cdee <vPortFree+0x3a>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800cdf0:	ea23 0302 	bic.w	r3, r3, r2
 800cdf4:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 800cdf8:	f001 f922 	bl	800e040 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 800cdfc:	4a0a      	ldr	r2, [pc, #40]	@ (800ce28 <vPortFree+0x74>)
 800cdfe:	f854 3c04 	ldr.w	r3, [r4, #-4]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800ce02:	f1a4 0008 	sub.w	r0, r4, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 800ce06:	6811      	ldr	r1, [r2, #0]
 800ce08:	440b      	add	r3, r1
 800ce0a:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800ce0c:	f7ff ff14 	bl	800cc38 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800ce10:	4a06      	ldr	r2, [pc, #24]	@ (800ce2c <vPortFree+0x78>)
 800ce12:	6813      	ldr	r3, [r2, #0]
 800ce14:	3301      	adds	r3, #1
}
 800ce16:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
					xNumberOfSuccessfulFrees++;
 800ce1a:	6013      	str	r3, [r2, #0]
				( void ) xTaskResumeAll();
 800ce1c:	f001 b9b4 	b.w	800e188 <xTaskResumeAll>
}
 800ce20:	bd10      	pop	{r4, pc}
 800ce22:	bf00      	nop
 800ce24:	240100e4 	.word	0x240100e4
 800ce28:	240100f4 	.word	0x240100f4
 800ce2c:	240100e8 	.word	0x240100e8

0800ce30 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ce30:	f100 0308 	add.w	r3, r0, #8

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800ce34:	f04f 32ff 	mov.w	r2, #4294967295
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ce38:	6043      	str	r3, [r0, #4]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ce3a:	6103      	str	r3, [r0, #16]
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ce3c:	e9c0 2302 	strd	r2, r3, [r0, #8]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800ce40:	2300      	movs	r3, #0
 800ce42:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800ce44:	4770      	bx	lr

0800ce46 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800ce46:	2300      	movs	r3, #0
 800ce48:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800ce4a:	4770      	bx	lr

0800ce4c <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 800ce4c:	6843      	ldr	r3, [r0, #4]

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800ce4e:	689a      	ldr	r2, [r3, #8]
	pxNewListItem->pxNext = pxIndex;
 800ce50:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800ce52:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800ce54:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800ce56:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 800ce58:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pxContainer = pxList;
 800ce5a:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 800ce5c:	3301      	adds	r3, #1
 800ce5e:	6003      	str	r3, [r0, #0]
}
 800ce60:	4770      	bx	lr

0800ce62 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800ce62:	b530      	push	{r4, r5, lr}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800ce64:	680c      	ldr	r4, [r1, #0]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800ce66:	1c63      	adds	r3, r4, #1
 800ce68:	d10a      	bne.n	800ce80 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800ce6a:	6903      	ldr	r3, [r0, #16]
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800ce6c:	685a      	ldr	r2, [r3, #4]
 800ce6e:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800ce70:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800ce72:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 800ce74:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 800ce76:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pxContainer = pxList;
 800ce78:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 800ce7a:	3301      	adds	r3, #1
 800ce7c:	6003      	str	r3, [r0, #0]
}
 800ce7e:	bd30      	pop	{r4, r5, pc}
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800ce80:	f100 0208 	add.w	r2, r0, #8
 800ce84:	4613      	mov	r3, r2
 800ce86:	6852      	ldr	r2, [r2, #4]
 800ce88:	6815      	ldr	r5, [r2, #0]
 800ce8a:	42a5      	cmp	r5, r4
 800ce8c:	d9fa      	bls.n	800ce84 <vListInsert+0x22>
 800ce8e:	e7ed      	b.n	800ce6c <vListInsert+0xa>

0800ce90 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800ce90:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800ce92:	e9d0 1201 	ldrd	r1, r2, [r0, #4]
 800ce96:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800ce98:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800ce9a:	6859      	ldr	r1, [r3, #4]
 800ce9c:	4281      	cmp	r1, r0
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800ce9e:	bf08      	it	eq
 800cea0:	605a      	streq	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800cea2:	2200      	movs	r2, #0
 800cea4:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 800cea6:	681a      	ldr	r2, [r3, #0]
 800cea8:	3a01      	subs	r2, #1
 800ceaa:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800ceac:	6818      	ldr	r0, [r3, #0]
}
 800ceae:	4770      	bx	lr

0800ceb0 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800ceb0:	4808      	ldr	r0, [pc, #32]	@ (800ced4 <prvPortStartFirstTask+0x24>)
 800ceb2:	6800      	ldr	r0, [r0, #0]
 800ceb4:	6800      	ldr	r0, [r0, #0]
 800ceb6:	f380 8808 	msr	MSP, r0
 800ceba:	f04f 0000 	mov.w	r0, #0
 800cebe:	f380 8814 	msr	CONTROL, r0
 800cec2:	b662      	cpsie	i
 800cec4:	b661      	cpsie	f
 800cec6:	f3bf 8f4f 	dsb	sy
 800ceca:	f3bf 8f6f 	isb	sy
 800cece:	df00      	svc	0
 800ced0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800ced2:	0000      	.short	0x0000
 800ced4:	e000ed08 	.word	0xe000ed08

0800ced8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800ced8:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800cee8 <vPortEnableVFP+0x10>
 800cedc:	6801      	ldr	r1, [r0, #0]
 800cede:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800cee2:	6001      	str	r1, [r0, #0]
 800cee4:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800cee6:	0000      	.short	0x0000
 800cee8:	e000ed88 	.word	0xe000ed88

0800ceec <prvTaskExitError>:
volatile uint32_t ulDummy = 0;
 800ceec:	2300      	movs	r3, #0
{
 800ceee:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 800cef0:	9301      	str	r3, [sp, #4]
	configASSERT( uxCriticalNesting == ~0UL );
 800cef2:	4b0d      	ldr	r3, [pc, #52]	@ (800cf28 <prvTaskExitError+0x3c>)
 800cef4:	681b      	ldr	r3, [r3, #0]
 800cef6:	3301      	adds	r3, #1
 800cef8:	d008      	beq.n	800cf0c <prvTaskExitError+0x20>
 800cefa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cefe:	f383 8811 	msr	BASEPRI, r3
 800cf02:	f3bf 8f6f 	isb	sy
 800cf06:	f3bf 8f4f 	dsb	sy
 800cf0a:	e7fe      	b.n	800cf0a <prvTaskExitError+0x1e>
 800cf0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cf10:	f383 8811 	msr	BASEPRI, r3
 800cf14:	f3bf 8f6f 	isb	sy
 800cf18:	f3bf 8f4f 	dsb	sy
	while( ulDummy == 0 )
 800cf1c:	9b01      	ldr	r3, [sp, #4]
 800cf1e:	2b00      	cmp	r3, #0
 800cf20:	d0fc      	beq.n	800cf1c <prvTaskExitError+0x30>
}
 800cf22:	b002      	add	sp, #8
 800cf24:	4770      	bx	lr
 800cf26:	bf00      	nop
 800cf28:	24000078 	.word	0x24000078

0800cf2c <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800cf2c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800cf30:	f021 0101 	bic.w	r1, r1, #1
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800cf34:	f840 2c20 	str.w	r2, [r0, #-32]
}
 800cf38:	3844      	subs	r0, #68	@ 0x44
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800cf3a:	6403      	str	r3, [r0, #64]	@ 0x40
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800cf3c:	4b03      	ldr	r3, [pc, #12]	@ (800cf4c <pxPortInitialiseStack+0x20>)
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800cf3e:	63c1      	str	r1, [r0, #60]	@ 0x3c
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800cf40:	6383      	str	r3, [r0, #56]	@ 0x38
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800cf42:	f06f 0302 	mvn.w	r3, #2
 800cf46:	6203      	str	r3, [r0, #32]
}
 800cf48:	4770      	bx	lr
 800cf4a:	bf00      	nop
 800cf4c:	0800ceed 	.word	0x0800ceed

0800cf50 <SVC_Handler>:
	__asm volatile (
 800cf50:	4b07      	ldr	r3, [pc, #28]	@ (800cf70 <pxCurrentTCBConst2>)
 800cf52:	6819      	ldr	r1, [r3, #0]
 800cf54:	6808      	ldr	r0, [r1, #0]
 800cf56:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf5a:	f380 8809 	msr	PSP, r0
 800cf5e:	f3bf 8f6f 	isb	sy
 800cf62:	f04f 0000 	mov.w	r0, #0
 800cf66:	f380 8811 	msr	BASEPRI, r0
 800cf6a:	4770      	bx	lr
 800cf6c:	f3af 8000 	nop.w

0800cf70 <pxCurrentTCBConst2>:
 800cf70:	24028ce4 	.word	0x24028ce4

0800cf74 <vPortEnterCritical>:
 800cf74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cf78:	f383 8811 	msr	BASEPRI, r3
 800cf7c:	f3bf 8f6f 	isb	sy
 800cf80:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 800cf84:	4a0a      	ldr	r2, [pc, #40]	@ (800cfb0 <vPortEnterCritical+0x3c>)
 800cf86:	6813      	ldr	r3, [r2, #0]
 800cf88:	3301      	adds	r3, #1
	if( uxCriticalNesting == 1 )
 800cf8a:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 800cf8c:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 800cf8e:	d10e      	bne.n	800cfae <vPortEnterCritical+0x3a>
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800cf90:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800cf94:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	@ 0xd04
 800cf98:	b2db      	uxtb	r3, r3
 800cf9a:	b143      	cbz	r3, 800cfae <vPortEnterCritical+0x3a>
 800cf9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cfa0:	f383 8811 	msr	BASEPRI, r3
 800cfa4:	f3bf 8f6f 	isb	sy
 800cfa8:	f3bf 8f4f 	dsb	sy
 800cfac:	e7fe      	b.n	800cfac <vPortEnterCritical+0x38>
}
 800cfae:	4770      	bx	lr
 800cfb0:	24000078 	.word	0x24000078

0800cfb4 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 800cfb4:	4a08      	ldr	r2, [pc, #32]	@ (800cfd8 <vPortExitCritical+0x24>)
 800cfb6:	6813      	ldr	r3, [r2, #0]
 800cfb8:	b943      	cbnz	r3, 800cfcc <vPortExitCritical+0x18>
 800cfba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cfbe:	f383 8811 	msr	BASEPRI, r3
 800cfc2:	f3bf 8f6f 	isb	sy
 800cfc6:	f3bf 8f4f 	dsb	sy
 800cfca:	e7fe      	b.n	800cfca <vPortExitCritical+0x16>
	uxCriticalNesting--;
 800cfcc:	3b01      	subs	r3, #1
 800cfce:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800cfd0:	b90b      	cbnz	r3, 800cfd6 <vPortExitCritical+0x22>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800cfd2:	f383 8811 	msr	BASEPRI, r3
}
 800cfd6:	4770      	bx	lr
 800cfd8:	24000078 	.word	0x24000078
 800cfdc:	00000000 	.word	0x00000000

0800cfe0 <PendSV_Handler>:
	__asm volatile
 800cfe0:	f3ef 8009 	mrs	r0, PSP
 800cfe4:	f3bf 8f6f 	isb	sy
 800cfe8:	4b15      	ldr	r3, [pc, #84]	@ (800d040 <pxCurrentTCBConst>)
 800cfea:	681a      	ldr	r2, [r3, #0]
 800cfec:	f01e 0f10 	tst.w	lr, #16
 800cff0:	bf08      	it	eq
 800cff2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800cff6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cffa:	6010      	str	r0, [r2, #0]
 800cffc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800d000:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800d004:	f380 8811 	msr	BASEPRI, r0
 800d008:	f3bf 8f4f 	dsb	sy
 800d00c:	f3bf 8f6f 	isb	sy
 800d010:	f001 f998 	bl	800e344 <vTaskSwitchContext>
 800d014:	f04f 0000 	mov.w	r0, #0
 800d018:	f380 8811 	msr	BASEPRI, r0
 800d01c:	bc09      	pop	{r0, r3}
 800d01e:	6819      	ldr	r1, [r3, #0]
 800d020:	6808      	ldr	r0, [r1, #0]
 800d022:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d026:	f01e 0f10 	tst.w	lr, #16
 800d02a:	bf08      	it	eq
 800d02c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800d030:	f380 8809 	msr	PSP, r0
 800d034:	f3bf 8f6f 	isb	sy
 800d038:	4770      	bx	lr
 800d03a:	bf00      	nop
 800d03c:	f3af 8000 	nop.w

0800d040 <pxCurrentTCBConst>:
 800d040:	24028ce4 	.word	0x24028ce4

0800d044 <xPortSysTickHandler>:
{
 800d044:	b508      	push	{r3, lr}
	__asm volatile
 800d046:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d04a:	f383 8811 	msr	BASEPRI, r3
 800d04e:	f3bf 8f6f 	isb	sy
 800d052:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 800d056:	f001 f801 	bl	800e05c <xTaskIncrementTick>
 800d05a:	b128      	cbz	r0, 800d068 <xPortSysTickHandler+0x24>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800d05c:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800d060:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d064:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
	__asm volatile
 800d068:	2300      	movs	r3, #0
 800d06a:	f383 8811 	msr	BASEPRI, r3
}
 800d06e:	bd08      	pop	{r3, pc}

0800d070 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800d070:	f04f 22e0 	mov.w	r2, #3758153728	@ 0xe000e000
 800d074:	2300      	movs	r3, #0
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800d076:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800d07a:	6113      	str	r3, [r2, #16]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800d07c:	6193      	str	r3, [r2, #24]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800d07e:	4b04      	ldr	r3, [pc, #16]	@ (800d090 <vPortSetupTimerInterrupt+0x20>)
 800d080:	681b      	ldr	r3, [r3, #0]
 800d082:	fbb3 f3f1 	udiv	r3, r3, r1
 800d086:	3b01      	subs	r3, #1
 800d088:	6153      	str	r3, [r2, #20]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800d08a:	2307      	movs	r3, #7
 800d08c:	6113      	str	r3, [r2, #16]
}
 800d08e:	4770      	bx	lr
 800d090:	2400006c 	.word	0x2400006c

0800d094 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800d094:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
{
 800d098:	b537      	push	{r0, r1, r2, r4, r5, lr}
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800d09a:	f8d3 1d00 	ldr.w	r1, [r3, #3328]	@ 0xd00
 800d09e:	4a38      	ldr	r2, [pc, #224]	@ (800d180 <xPortStartScheduler+0xec>)
 800d0a0:	4291      	cmp	r1, r2
 800d0a2:	d108      	bne.n	800d0b6 <xPortStartScheduler+0x22>
	__asm volatile
 800d0a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d0a8:	f383 8811 	msr	BASEPRI, r3
 800d0ac:	f3bf 8f6f 	isb	sy
 800d0b0:	f3bf 8f4f 	dsb	sy
 800d0b4:	e7fe      	b.n	800d0b4 <xPortStartScheduler+0x20>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800d0b6:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	@ 0xd00
 800d0ba:	4b32      	ldr	r3, [pc, #200]	@ (800d184 <xPortStartScheduler+0xf0>)
 800d0bc:	429a      	cmp	r2, r3
 800d0be:	d108      	bne.n	800d0d2 <xPortStartScheduler+0x3e>
 800d0c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d0c4:	f383 8811 	msr	BASEPRI, r3
 800d0c8:	f3bf 8f6f 	isb	sy
 800d0cc:	f3bf 8f4f 	dsb	sy
 800d0d0:	e7fe      	b.n	800d0d0 <xPortStartScheduler+0x3c>
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800d0d2:	4b2d      	ldr	r3, [pc, #180]	@ (800d188 <xPortStartScheduler+0xf4>)
 800d0d4:	781a      	ldrb	r2, [r3, #0]
 800d0d6:	b2d2      	uxtb	r2, r2
 800d0d8:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800d0da:	22ff      	movs	r2, #255	@ 0xff
 800d0dc:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800d0de:	781b      	ldrb	r3, [r3, #0]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800d0e0:	4a2a      	ldr	r2, [pc, #168]	@ (800d18c <xPortStartScheduler+0xf8>)
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800d0e2:	b2db      	uxtb	r3, r3
 800d0e4:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800d0e8:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800d0ec:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800d0f0:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800d0f2:	2307      	movs	r3, #7
 800d0f4:	4a26      	ldr	r2, [pc, #152]	@ (800d190 <xPortStartScheduler+0xfc>)
 800d0f6:	6013      	str	r3, [r2, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d0f8:	f89d 1003 	ldrb.w	r1, [sp, #3]
			ulMaxPRIGROUPValue--;
 800d0fc:	6813      	ldr	r3, [r2, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d0fe:	0609      	lsls	r1, r1, #24
 800d100:	d40a      	bmi.n	800d118 <xPortStartScheduler+0x84>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800d102:	2b03      	cmp	r3, #3
 800d104:	d011      	beq.n	800d12a <xPortStartScheduler+0x96>
 800d106:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d10a:	f383 8811 	msr	BASEPRI, r3
 800d10e:	f3bf 8f6f 	isb	sy
 800d112:	f3bf 8f4f 	dsb	sy
 800d116:	e7fe      	b.n	800d116 <xPortStartScheduler+0x82>
			ulMaxPRIGROUPValue--;
 800d118:	3b01      	subs	r3, #1
 800d11a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800d11c:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800d120:	005b      	lsls	r3, r3, #1
 800d122:	b2db      	uxtb	r3, r3
 800d124:	f88d 3003 	strb.w	r3, [sp, #3]
 800d128:	e7e6      	b.n	800d0f8 <xPortStartScheduler+0x64>
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800d12a:	f44f 7340 	mov.w	r3, #768	@ 0x300
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800d12e:	f04f 24e0 	mov.w	r4, #3758153728	@ 0xe000e000
	uxCriticalNesting = 0;
 800d132:	2500      	movs	r5, #0
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800d134:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800d136:	9b01      	ldr	r3, [sp, #4]
 800d138:	4a13      	ldr	r2, [pc, #76]	@ (800d188 <xPortStartScheduler+0xf4>)
 800d13a:	b2db      	uxtb	r3, r3
 800d13c:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800d13e:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	@ 0xd20
 800d142:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800d146:	f8c4 3d20 	str.w	r3, [r4, #3360]	@ 0xd20
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800d14a:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	@ 0xd20
 800d14e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800d152:	f8c4 3d20 	str.w	r3, [r4, #3360]	@ 0xd20
	vPortSetupTimerInterrupt();
 800d156:	f7ff ff8b 	bl	800d070 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 800d15a:	4b0e      	ldr	r3, [pc, #56]	@ (800d194 <xPortStartScheduler+0x100>)
 800d15c:	601d      	str	r5, [r3, #0]
	vPortEnableVFP();
 800d15e:	f7ff febb 	bl	800ced8 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800d162:	f8d4 3f34 	ldr.w	r3, [r4, #3892]	@ 0xf34
 800d166:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800d16a:	f8c4 3f34 	str.w	r3, [r4, #3892]	@ 0xf34
	prvPortStartFirstTask();
 800d16e:	f7ff fe9f 	bl	800ceb0 <prvPortStartFirstTask>
	vTaskSwitchContext();
 800d172:	f001 f8e7 	bl	800e344 <vTaskSwitchContext>
}
 800d176:	4628      	mov	r0, r5
	prvTaskExitError();
 800d178:	f7ff feb8 	bl	800ceec <prvTaskExitError>
}
 800d17c:	b003      	add	sp, #12
 800d17e:	bd30      	pop	{r4, r5, pc}
 800d180:	410fc271 	.word	0x410fc271
 800d184:	410fc270 	.word	0x410fc270
 800d188:	e000e400 	.word	0xe000e400
 800d18c:	240287a8 	.word	0x240287a8
 800d190:	240287a4 	.word	0x240287a4
 800d194:	24000078 	.word	0x24000078

0800d198 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800d198:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800d19c:	2b0f      	cmp	r3, #15
 800d19e:	d90e      	bls.n	800d1be <vPortValidateInterruptPriority+0x26>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800d1a0:	4a11      	ldr	r2, [pc, #68]	@ (800d1e8 <vPortValidateInterruptPriority+0x50>)
 800d1a2:	5c9b      	ldrb	r3, [r3, r2]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800d1a4:	4a11      	ldr	r2, [pc, #68]	@ (800d1ec <vPortValidateInterruptPriority+0x54>)
 800d1a6:	7812      	ldrb	r2, [r2, #0]
 800d1a8:	429a      	cmp	r2, r3
 800d1aa:	d908      	bls.n	800d1be <vPortValidateInterruptPriority+0x26>
 800d1ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d1b0:	f383 8811 	msr	BASEPRI, r3
 800d1b4:	f3bf 8f6f 	isb	sy
 800d1b8:	f3bf 8f4f 	dsb	sy
 800d1bc:	e7fe      	b.n	800d1bc <vPortValidateInterruptPriority+0x24>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800d1be:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800d1c2:	4a0b      	ldr	r2, [pc, #44]	@ (800d1f0 <vPortValidateInterruptPriority+0x58>)
 800d1c4:	f8d3 3d0c 	ldr.w	r3, [r3, #3340]	@ 0xd0c
 800d1c8:	6812      	ldr	r2, [r2, #0]
 800d1ca:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800d1ce:	4293      	cmp	r3, r2
 800d1d0:	d908      	bls.n	800d1e4 <vPortValidateInterruptPriority+0x4c>
 800d1d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d1d6:	f383 8811 	msr	BASEPRI, r3
 800d1da:	f3bf 8f6f 	isb	sy
 800d1de:	f3bf 8f4f 	dsb	sy
 800d1e2:	e7fe      	b.n	800d1e2 <vPortValidateInterruptPriority+0x4a>
	}
 800d1e4:	4770      	bx	lr
 800d1e6:	bf00      	nop
 800d1e8:	e000e3f0 	.word	0xe000e3f0
 800d1ec:	240287a8 	.word	0x240287a8
 800d1f0:	240287a4 	.word	0x240287a4

0800d1f4 <prvIsQueueEmpty>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800d1f4:	b510      	push	{r4, lr}
 800d1f6:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d1f8:	f7ff febc 	bl	800cf74 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800d1fc:	6ba4      	ldr	r4, [r4, #56]	@ 0x38
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 800d1fe:	f7ff fed9 	bl	800cfb4 <vPortExitCritical>

	return xReturn;
}
 800d202:	fab4 f084 	clz	r0, r4
 800d206:	0940      	lsrs	r0, r0, #5
 800d208:	bd10      	pop	{r4, pc}

0800d20a <prvCopyDataToQueue>:
{
 800d20a:	b570      	push	{r4, r5, r6, lr}
 800d20c:	4616      	mov	r6, r2
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800d20e:	6c02      	ldr	r2, [r0, #64]	@ 0x40
{
 800d210:	4604      	mov	r4, r0
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d212:	6b85      	ldr	r5, [r0, #56]	@ 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800d214:	b942      	cbnz	r2, 800d228 <prvCopyDataToQueue+0x1e>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d216:	6806      	ldr	r6, [r0, #0]
 800d218:	b99e      	cbnz	r6, 800d242 <prvCopyDataToQueue+0x38>
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800d21a:	6880      	ldr	r0, [r0, #8]
 800d21c:	f001 f9f2 	bl	800e604 <xTaskPriorityDisinherit>
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800d220:	60a6      	str	r6, [r4, #8]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800d222:	3501      	adds	r5, #1
 800d224:	63a5      	str	r5, [r4, #56]	@ 0x38
}
 800d226:	bd70      	pop	{r4, r5, r6, pc}
	else if( xPosition == queueSEND_TO_BACK )
 800d228:	b96e      	cbnz	r6, 800d246 <prvCopyDataToQueue+0x3c>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800d22a:	6840      	ldr	r0, [r0, #4]
 800d22c:	f01a fba5 	bl	802797a <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d230:	6863      	ldr	r3, [r4, #4]
 800d232:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 800d234:	4413      	add	r3, r2
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d236:	68a2      	ldr	r2, [r4, #8]
 800d238:	4293      	cmp	r3, r2
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d23a:	6063      	str	r3, [r4, #4]
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800d23c:	bf24      	itt	cs
 800d23e:	6823      	ldrcs	r3, [r4, #0]
 800d240:	6063      	strcs	r3, [r4, #4]
BaseType_t xReturn = pdFALSE;
 800d242:	2000      	movs	r0, #0
 800d244:	e7ed      	b.n	800d222 <prvCopyDataToQueue+0x18>
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800d246:	68c0      	ldr	r0, [r0, #12]
 800d248:	f01a fb97 	bl	802797a <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800d24c:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 800d24e:	68e3      	ldr	r3, [r4, #12]
 800d250:	4251      	negs	r1, r2
 800d252:	1a9b      	subs	r3, r3, r2
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d254:	6822      	ldr	r2, [r4, #0]
 800d256:	4293      	cmp	r3, r2
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800d258:	60e3      	str	r3, [r4, #12]
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800d25a:	bf3e      	ittt	cc
 800d25c:	68a3      	ldrcc	r3, [r4, #8]
 800d25e:	185b      	addcc	r3, r3, r1
 800d260:	60e3      	strcc	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 800d262:	2e02      	cmp	r6, #2
 800d264:	d1ed      	bne.n	800d242 <prvCopyDataToQueue+0x38>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d266:	b10d      	cbz	r5, 800d26c <prvCopyDataToQueue+0x62>
				--uxMessagesWaiting;
 800d268:	3d01      	subs	r5, #1
 800d26a:	e7ea      	b.n	800d242 <prvCopyDataToQueue+0x38>
BaseType_t xReturn = pdFALSE;
 800d26c:	4628      	mov	r0, r5
 800d26e:	e7d8      	b.n	800d222 <prvCopyDataToQueue+0x18>

0800d270 <prvCopyDataFromQueue>:
{
 800d270:	4603      	mov	r3, r0
 800d272:	4608      	mov	r0, r1
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800d274:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
{
 800d276:	b410      	push	{r4}
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800d278:	b162      	cbz	r2, 800d294 <prvCopyDataFromQueue+0x24>
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d27a:	68dc      	ldr	r4, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800d27c:	6899      	ldr	r1, [r3, #8]
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d27e:	4414      	add	r4, r2
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800d280:	428c      	cmp	r4, r1
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d282:	60dc      	str	r4, [r3, #12]
}
 800d284:	f85d 4b04 	ldr.w	r4, [sp], #4
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800d288:	bf24      	itt	cs
 800d28a:	6819      	ldrcs	r1, [r3, #0]
 800d28c:	60d9      	strcs	r1, [r3, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800d28e:	68d9      	ldr	r1, [r3, #12]
 800d290:	f01a bb73 	b.w	802797a <memcpy>
}
 800d294:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d298:	4770      	bx	lr

0800d29a <prvUnlockQueue>:
{
 800d29a:	b570      	push	{r4, r5, r6, lr}
 800d29c:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 800d29e:	f7ff fe69 	bl	800cf74 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 800d2a2:	f894 5045 	ldrb.w	r5, [r4, #69]	@ 0x45
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d2a6:	f104 0624 	add.w	r6, r4, #36	@ 0x24
		int8_t cTxLock = pxQueue->cTxLock;
 800d2aa:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d2ac:	2d00      	cmp	r5, #0
 800d2ae:	dc14      	bgt.n	800d2da <prvUnlockQueue+0x40>
		pxQueue->cTxLock = queueUNLOCKED;
 800d2b0:	23ff      	movs	r3, #255	@ 0xff
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d2b2:	f104 0610 	add.w	r6, r4, #16
		pxQueue->cTxLock = queueUNLOCKED;
 800d2b6:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
	taskEXIT_CRITICAL();
 800d2ba:	f7ff fe7b 	bl	800cfb4 <vPortExitCritical>
	taskENTER_CRITICAL();
 800d2be:	f7ff fe59 	bl	800cf74 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 800d2c2:	f894 5044 	ldrb.w	r5, [r4, #68]	@ 0x44
 800d2c6:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d2c8:	2d00      	cmp	r5, #0
 800d2ca:	dc12      	bgt.n	800d2f2 <prvUnlockQueue+0x58>
		pxQueue->cRxLock = queueUNLOCKED;
 800d2cc:	23ff      	movs	r3, #255	@ 0xff
 800d2ce:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
}
 800d2d2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	taskEXIT_CRITICAL();
 800d2d6:	f7ff be6d 	b.w	800cfb4 <vPortExitCritical>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d2da:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800d2dc:	2b00      	cmp	r3, #0
 800d2de:	d0e7      	beq.n	800d2b0 <prvUnlockQueue+0x16>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d2e0:	4630      	mov	r0, r6
 800d2e2:	f001 f8ab 	bl	800e43c <xTaskRemoveFromEventList>
 800d2e6:	b108      	cbz	r0, 800d2ec <prvUnlockQueue+0x52>
						vTaskMissedYield();
 800d2e8:	f001 f932 	bl	800e550 <vTaskMissedYield>
			--cTxLock;
 800d2ec:	3d01      	subs	r5, #1
 800d2ee:	b26d      	sxtb	r5, r5
 800d2f0:	e7dc      	b.n	800d2ac <prvUnlockQueue+0x12>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d2f2:	6923      	ldr	r3, [r4, #16]
 800d2f4:	2b00      	cmp	r3, #0
 800d2f6:	d0e9      	beq.n	800d2cc <prvUnlockQueue+0x32>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d2f8:	4630      	mov	r0, r6
 800d2fa:	f001 f89f 	bl	800e43c <xTaskRemoveFromEventList>
 800d2fe:	b108      	cbz	r0, 800d304 <prvUnlockQueue+0x6a>
					vTaskMissedYield();
 800d300:	f001 f926 	bl	800e550 <vTaskMissedYield>
				--cRxLock;
 800d304:	3d01      	subs	r5, #1
 800d306:	b26d      	sxtb	r5, r5
 800d308:	e7de      	b.n	800d2c8 <prvUnlockQueue+0x2e>

0800d30a <xQueueGenericReset>:
{
 800d30a:	b538      	push	{r3, r4, r5, lr}
 800d30c:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 800d30e:	4604      	mov	r4, r0
 800d310:	b940      	cbnz	r0, 800d324 <xQueueGenericReset+0x1a>
 800d312:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d316:	f383 8811 	msr	BASEPRI, r3
 800d31a:	f3bf 8f6f 	isb	sy
 800d31e:	f3bf 8f4f 	dsb	sy
 800d322:	e7fe      	b.n	800d322 <xQueueGenericReset+0x18>
	taskENTER_CRITICAL();
 800d324:	f7ff fe26 	bl	800cf74 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d328:	6822      	ldr	r2, [r4, #0]
 800d32a:	e9d4 310f 	ldrd	r3, r1, [r4, #60]	@ 0x3c
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800d32e:	6062      	str	r2, [r4, #4]
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d330:	434b      	muls	r3, r1
 800d332:	18d0      	adds	r0, r2, r3
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d334:	1a5b      	subs	r3, r3, r1
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d336:	60a0      	str	r0, [r4, #8]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d338:	441a      	add	r2, r3
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800d33a:	2000      	movs	r0, #0
		pxQueue->cRxLock = queueUNLOCKED;
 800d33c:	23ff      	movs	r3, #255	@ 0xff
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d33e:	60e2      	str	r2, [r4, #12]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800d340:	63a0      	str	r0, [r4, #56]	@ 0x38
		pxQueue->cRxLock = queueUNLOCKED;
 800d342:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800d346:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
		if( xNewQueue == pdFALSE )
 800d34a:	b9a5      	cbnz	r5, 800d376 <xQueueGenericReset+0x6c>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d34c:	6923      	ldr	r3, [r4, #16]
 800d34e:	b173      	cbz	r3, 800d36e <xQueueGenericReset+0x64>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d350:	f104 0010 	add.w	r0, r4, #16
 800d354:	f001 f872 	bl	800e43c <xTaskRemoveFromEventList>
 800d358:	b148      	cbz	r0, 800d36e <xQueueGenericReset+0x64>
					queueYIELD_IF_USING_PREEMPTION();
 800d35a:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800d35e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d362:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800d366:	f3bf 8f4f 	dsb	sy
 800d36a:	f3bf 8f6f 	isb	sy
	taskEXIT_CRITICAL();
 800d36e:	f7ff fe21 	bl	800cfb4 <vPortExitCritical>
}
 800d372:	2001      	movs	r0, #1
 800d374:	bd38      	pop	{r3, r4, r5, pc}
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800d376:	f104 0010 	add.w	r0, r4, #16
 800d37a:	f7ff fd59 	bl	800ce30 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800d37e:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 800d382:	f7ff fd55 	bl	800ce30 <vListInitialise>
 800d386:	e7f2      	b.n	800d36e <xQueueGenericReset+0x64>

0800d388 <xQueueGenericCreateStatic>:
	{
 800d388:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d38a:	460d      	mov	r5, r1
 800d38c:	461c      	mov	r4, r3
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800d38e:	b940      	cbnz	r0, 800d3a2 <xQueueGenericCreateStatic+0x1a>
 800d390:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d394:	f383 8811 	msr	BASEPRI, r3
 800d398:	f3bf 8f6f 	isb	sy
 800d39c:	f3bf 8f4f 	dsb	sy
 800d3a0:	e7fe      	b.n	800d3a0 <xQueueGenericCreateStatic+0x18>
		configASSERT( pxStaticQueue != NULL );
 800d3a2:	b943      	cbnz	r3, 800d3b6 <xQueueGenericCreateStatic+0x2e>
 800d3a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d3a8:	f383 8811 	msr	BASEPRI, r3
 800d3ac:	f3bf 8f6f 	isb	sy
 800d3b0:	f3bf 8f4f 	dsb	sy
 800d3b4:	e7fe      	b.n	800d3b4 <xQueueGenericCreateStatic+0x2c>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800d3b6:	b14a      	cbz	r2, 800d3cc <xQueueGenericCreateStatic+0x44>
 800d3b8:	b991      	cbnz	r1, 800d3e0 <xQueueGenericCreateStatic+0x58>
 800d3ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d3be:	f383 8811 	msr	BASEPRI, r3
 800d3c2:	f3bf 8f6f 	isb	sy
 800d3c6:	f3bf 8f4f 	dsb	sy
 800d3ca:	e7fe      	b.n	800d3ca <xQueueGenericCreateStatic+0x42>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800d3cc:	b141      	cbz	r1, 800d3e0 <xQueueGenericCreateStatic+0x58>
 800d3ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d3d2:	f383 8811 	msr	BASEPRI, r3
 800d3d6:	f3bf 8f6f 	isb	sy
 800d3da:	f3bf 8f4f 	dsb	sy
 800d3de:	e7fe      	b.n	800d3de <xQueueGenericCreateStatic+0x56>
			volatile size_t xSize = sizeof( StaticQueue_t );
 800d3e0:	2350      	movs	r3, #80	@ 0x50
 800d3e2:	9301      	str	r3, [sp, #4]
			configASSERT( xSize == sizeof( Queue_t ) );
 800d3e4:	9b01      	ldr	r3, [sp, #4]
 800d3e6:	2b50      	cmp	r3, #80	@ 0x50
 800d3e8:	d008      	beq.n	800d3fc <xQueueGenericCreateStatic+0x74>
 800d3ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d3ee:	f383 8811 	msr	BASEPRI, r3
 800d3f2:	f3bf 8f6f 	isb	sy
 800d3f6:	f3bf 8f4f 	dsb	sy
 800d3fa:	e7fe      	b.n	800d3fa <xQueueGenericCreateStatic+0x72>
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800d3fc:	2101      	movs	r1, #1
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800d3fe:	2d00      	cmp	r5, #0
 800d400:	bf08      	it	eq
 800d402:	4622      	moveq	r2, r4
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800d404:	9b01      	ldr	r3, [sp, #4]
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800d406:	f884 1046 	strb.w	r1, [r4, #70]	@ 0x46
	if( uxItemSize == ( UBaseType_t ) 0 )
 800d40a:	6022      	str	r2, [r4, #0]
	pxNewQueue->uxItemSize = uxItemSize;
 800d40c:	e9c4 050f 	strd	r0, r5, [r4, #60]	@ 0x3c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800d410:	4620      	mov	r0, r4
 800d412:	f7ff ff7a 	bl	800d30a <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 800d416:	f89d 3018 	ldrb.w	r3, [sp, #24]
	}
 800d41a:	4620      	mov	r0, r4
		pxNewQueue->ucQueueType = ucQueueType;
 800d41c:	f884 304c 	strb.w	r3, [r4, #76]	@ 0x4c
	}
 800d420:	b003      	add	sp, #12
 800d422:	bd30      	pop	{r4, r5, pc}

0800d424 <xQueueGenericCreate>:
	{
 800d424:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d426:	460d      	mov	r5, r1
 800d428:	4617      	mov	r7, r2
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800d42a:	4606      	mov	r6, r0
 800d42c:	b940      	cbnz	r0, 800d440 <xQueueGenericCreate+0x1c>
 800d42e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d432:	f383 8811 	msr	BASEPRI, r3
 800d436:	f3bf 8f6f 	isb	sy
 800d43a:	f3bf 8f4f 	dsb	sy
 800d43e:	e7fe      	b.n	800d43e <xQueueGenericCreate+0x1a>
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d440:	4348      	muls	r0, r1
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800d442:	3050      	adds	r0, #80	@ 0x50
 800d444:	f7ff fc1e 	bl	800cc84 <pvPortMalloc>
		if( pxNewQueue != NULL )
 800d448:	4604      	mov	r4, r0
 800d44a:	b170      	cbz	r0, 800d46a <xQueueGenericCreate+0x46>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800d44c:	2300      	movs	r3, #0
 800d44e:	f880 3046 	strb.w	r3, [r0, #70]	@ 0x46
	if( uxItemSize == ( UBaseType_t ) 0 )
 800d452:	b165      	cbz	r5, 800d46e <xQueueGenericCreate+0x4a>
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d454:	f100 0350 	add.w	r3, r0, #80	@ 0x50
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800d458:	2101      	movs	r1, #1
 800d45a:	4620      	mov	r0, r4
 800d45c:	6023      	str	r3, [r4, #0]
	pxNewQueue->uxItemSize = uxItemSize;
 800d45e:	e9c4 650f 	strd	r6, r5, [r4, #60]	@ 0x3c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800d462:	f7ff ff52 	bl	800d30a <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 800d466:	f884 704c 	strb.w	r7, [r4, #76]	@ 0x4c
	}
 800d46a:	4620      	mov	r0, r4
 800d46c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800d46e:	4603      	mov	r3, r0
 800d470:	e7f2      	b.n	800d458 <xQueueGenericCreate+0x34>

0800d472 <xQueueCreateCountingSemaphoreStatic>:
	{
 800d472:	b513      	push	{r0, r1, r4, lr}
 800d474:	4613      	mov	r3, r2
 800d476:	460c      	mov	r4, r1
		configASSERT( uxMaxCount != 0 );
 800d478:	b940      	cbnz	r0, 800d48c <xQueueCreateCountingSemaphoreStatic+0x1a>
 800d47a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d47e:	f383 8811 	msr	BASEPRI, r3
 800d482:	f3bf 8f6f 	isb	sy
 800d486:	f3bf 8f4f 	dsb	sy
 800d48a:	e7fe      	b.n	800d48a <xQueueCreateCountingSemaphoreStatic+0x18>
		configASSERT( uxInitialCount <= uxMaxCount );
 800d48c:	4288      	cmp	r0, r1
 800d48e:	d208      	bcs.n	800d4a2 <xQueueCreateCountingSemaphoreStatic+0x30>
 800d490:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d494:	f383 8811 	msr	BASEPRI, r3
 800d498:	f3bf 8f6f 	isb	sy
 800d49c:	f3bf 8f4f 	dsb	sy
 800d4a0:	e7fe      	b.n	800d4a0 <xQueueCreateCountingSemaphoreStatic+0x2e>
		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800d4a2:	2202      	movs	r2, #2
 800d4a4:	9200      	str	r2, [sp, #0]
 800d4a6:	2200      	movs	r2, #0
 800d4a8:	4611      	mov	r1, r2
 800d4aa:	f7ff ff6d 	bl	800d388 <xQueueGenericCreateStatic>
		if( xHandle != NULL )
 800d4ae:	b100      	cbz	r0, 800d4b2 <xQueueCreateCountingSemaphoreStatic+0x40>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800d4b0:	6384      	str	r4, [r0, #56]	@ 0x38
	}
 800d4b2:	b002      	add	sp, #8
 800d4b4:	bd10      	pop	{r4, pc}

0800d4b6 <xQueueCreateCountingSemaphore>:
	{
 800d4b6:	b510      	push	{r4, lr}
 800d4b8:	460c      	mov	r4, r1
		configASSERT( uxMaxCount != 0 );
 800d4ba:	b940      	cbnz	r0, 800d4ce <xQueueCreateCountingSemaphore+0x18>
 800d4bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d4c0:	f383 8811 	msr	BASEPRI, r3
 800d4c4:	f3bf 8f6f 	isb	sy
 800d4c8:	f3bf 8f4f 	dsb	sy
 800d4cc:	e7fe      	b.n	800d4cc <xQueueCreateCountingSemaphore+0x16>
		configASSERT( uxInitialCount <= uxMaxCount );
 800d4ce:	4288      	cmp	r0, r1
 800d4d0:	d208      	bcs.n	800d4e4 <xQueueCreateCountingSemaphore+0x2e>
 800d4d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d4d6:	f383 8811 	msr	BASEPRI, r3
 800d4da:	f3bf 8f6f 	isb	sy
 800d4de:	f3bf 8f4f 	dsb	sy
 800d4e2:	e7fe      	b.n	800d4e2 <xQueueCreateCountingSemaphore+0x2c>
		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800d4e4:	2202      	movs	r2, #2
 800d4e6:	2100      	movs	r1, #0
 800d4e8:	f7ff ff9c 	bl	800d424 <xQueueGenericCreate>
		if( xHandle != NULL )
 800d4ec:	b100      	cbz	r0, 800d4f0 <xQueueCreateCountingSemaphore+0x3a>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800d4ee:	6384      	str	r4, [r0, #56]	@ 0x38
	}
 800d4f0:	bd10      	pop	{r4, pc}

0800d4f2 <xQueueGenericSend>:
{
 800d4f2:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 800d4f6:	460f      	mov	r7, r1
 800d4f8:	461e      	mov	r6, r3
	configASSERT( pxQueue );
 800d4fa:	4604      	mov	r4, r0
{
 800d4fc:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
 800d4fe:	b940      	cbnz	r0, 800d512 <xQueueGenericSend+0x20>
 800d500:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d504:	f383 8811 	msr	BASEPRI, r3
 800d508:	f3bf 8f6f 	isb	sy
 800d50c:	f3bf 8f4f 	dsb	sy
 800d510:	e7fe      	b.n	800d510 <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d512:	b951      	cbnz	r1, 800d52a <xQueueGenericSend+0x38>
 800d514:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 800d516:	b143      	cbz	r3, 800d52a <xQueueGenericSend+0x38>
 800d518:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d51c:	f383 8811 	msr	BASEPRI, r3
 800d520:	f3bf 8f6f 	isb	sy
 800d524:	f3bf 8f4f 	dsb	sy
 800d528:	e7fe      	b.n	800d528 <xQueueGenericSend+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800d52a:	2e02      	cmp	r6, #2
 800d52c:	d10b      	bne.n	800d546 <xQueueGenericSend+0x54>
 800d52e:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800d530:	2b01      	cmp	r3, #1
 800d532:	d008      	beq.n	800d546 <xQueueGenericSend+0x54>
 800d534:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d538:	f383 8811 	msr	BASEPRI, r3
 800d53c:	f3bf 8f6f 	isb	sy
 800d540:	f3bf 8f4f 	dsb	sy
 800d544:	e7fe      	b.n	800d544 <xQueueGenericSend+0x52>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d546:	f001 f80f 	bl	800e568 <xTaskGetSchedulerState>
 800d54a:	4605      	mov	r5, r0
 800d54c:	b330      	cbz	r0, 800d59c <xQueueGenericSend+0xaa>
 800d54e:	2500      	movs	r5, #0
		prvLockQueue( pxQueue );
 800d550:	f04f 0800 	mov.w	r8, #0
		taskENTER_CRITICAL();
 800d554:	f7ff fd0e 	bl	800cf74 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800d558:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800d55a:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800d55c:	429a      	cmp	r2, r3
 800d55e:	d301      	bcc.n	800d564 <xQueueGenericSend+0x72>
 800d560:	2e02      	cmp	r6, #2
 800d562:	d127      	bne.n	800d5b4 <xQueueGenericSend+0xc2>
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800d564:	4632      	mov	r2, r6
 800d566:	4639      	mov	r1, r7
 800d568:	4620      	mov	r0, r4
 800d56a:	f7ff fe4e 	bl	800d20a <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d56e:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800d570:	b11b      	cbz	r3, 800d57a <xQueueGenericSend+0x88>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d572:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 800d576:	f000 ff61 	bl	800e43c <xTaskRemoveFromEventList>
					else if( xYieldRequired != pdFALSE )
 800d57a:	b148      	cbz	r0, 800d590 <xQueueGenericSend+0x9e>
						queueYIELD_IF_USING_PREEMPTION();
 800d57c:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800d580:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d584:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800d588:	f3bf 8f4f 	dsb	sy
 800d58c:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 800d590:	f7ff fd10 	bl	800cfb4 <vPortExitCritical>
				return pdPASS;
 800d594:	2001      	movs	r0, #1
}
 800d596:	b004      	add	sp, #16
 800d598:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d59c:	9b01      	ldr	r3, [sp, #4]
 800d59e:	2b00      	cmp	r3, #0
 800d5a0:	d0d6      	beq.n	800d550 <xQueueGenericSend+0x5e>
 800d5a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d5a6:	f383 8811 	msr	BASEPRI, r3
 800d5aa:	f3bf 8f6f 	isb	sy
 800d5ae:	f3bf 8f4f 	dsb	sy
 800d5b2:	e7fe      	b.n	800d5b2 <xQueueGenericSend+0xc0>
				if( xTicksToWait == ( TickType_t ) 0 )
 800d5b4:	9b01      	ldr	r3, [sp, #4]
 800d5b6:	b91b      	cbnz	r3, 800d5c0 <xQueueGenericSend+0xce>
					taskEXIT_CRITICAL();
 800d5b8:	f7ff fcfc 	bl	800cfb4 <vPortExitCritical>
					return errQUEUE_FULL;
 800d5bc:	2000      	movs	r0, #0
 800d5be:	e7ea      	b.n	800d596 <xQueueGenericSend+0xa4>
				else if( xEntryTimeSet == pdFALSE )
 800d5c0:	b915      	cbnz	r5, 800d5c8 <xQueueGenericSend+0xd6>
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d5c2:	a802      	add	r0, sp, #8
 800d5c4:	f000 ff7c 	bl	800e4c0 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 800d5c8:	f7ff fcf4 	bl	800cfb4 <vPortExitCritical>
		vTaskSuspendAll();
 800d5cc:	f000 fd38 	bl	800e040 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d5d0:	f7ff fcd0 	bl	800cf74 <vPortEnterCritical>
 800d5d4:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800d5d8:	2bff      	cmp	r3, #255	@ 0xff
 800d5da:	d101      	bne.n	800d5e0 <xQueueGenericSend+0xee>
 800d5dc:	f884 8044 	strb.w	r8, [r4, #68]	@ 0x44
 800d5e0:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 800d5e4:	2bff      	cmp	r3, #255	@ 0xff
 800d5e6:	d101      	bne.n	800d5ec <xQueueGenericSend+0xfa>
 800d5e8:	f884 8045 	strb.w	r8, [r4, #69]	@ 0x45
 800d5ec:	f7ff fce2 	bl	800cfb4 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d5f0:	a901      	add	r1, sp, #4
 800d5f2:	a802      	add	r0, sp, #8
 800d5f4:	f000 ff70 	bl	800e4d8 <xTaskCheckForTimeOut>
 800d5f8:	bb38      	cbnz	r0, 800d64a <xQueueGenericSend+0x158>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d5fa:	f7ff fcbb 	bl	800cf74 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800d5fe:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800d600:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800d602:	429a      	cmp	r2, r3
 800d604:	d10e      	bne.n	800d624 <xQueueGenericSend+0x132>
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 800d606:	f7ff fcd5 	bl	800cfb4 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800d60a:	9901      	ldr	r1, [sp, #4]
 800d60c:	f104 0010 	add.w	r0, r4, #16
 800d610:	f000 fedc 	bl	800e3cc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800d614:	4620      	mov	r0, r4
 800d616:	f7ff fe40 	bl	800d29a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800d61a:	f000 fdb5 	bl	800e188 <xTaskResumeAll>
 800d61e:	b148      	cbz	r0, 800d634 <xQueueGenericSend+0x142>
 800d620:	2501      	movs	r5, #1
 800d622:	e797      	b.n	800d554 <xQueueGenericSend+0x62>
	taskEXIT_CRITICAL();
 800d624:	f7ff fcc6 	bl	800cfb4 <vPortExitCritical>
				prvUnlockQueue( pxQueue );
 800d628:	4620      	mov	r0, r4
 800d62a:	f7ff fe36 	bl	800d29a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d62e:	f000 fdab 	bl	800e188 <xTaskResumeAll>
 800d632:	e7f5      	b.n	800d620 <xQueueGenericSend+0x12e>
					portYIELD_WITHIN_API();
 800d634:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800d638:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d63c:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800d640:	f3bf 8f4f 	dsb	sy
 800d644:	f3bf 8f6f 	isb	sy
 800d648:	e7ea      	b.n	800d620 <xQueueGenericSend+0x12e>
			prvUnlockQueue( pxQueue );
 800d64a:	4620      	mov	r0, r4
 800d64c:	f7ff fe25 	bl	800d29a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d650:	f000 fd9a 	bl	800e188 <xTaskResumeAll>
			return errQUEUE_FULL;
 800d654:	e7b2      	b.n	800d5bc <xQueueGenericSend+0xca>

0800d656 <xQueueCreateMutexStatic>:
		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800d656:	2200      	movs	r2, #0
	{
 800d658:	460b      	mov	r3, r1
 800d65a:	b513      	push	{r0, r1, r4, lr}
		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800d65c:	4611      	mov	r1, r2
 800d65e:	9000      	str	r0, [sp, #0]
 800d660:	2001      	movs	r0, #1
 800d662:	f7ff fe91 	bl	800d388 <xQueueGenericCreateStatic>
		if( pxNewQueue != NULL )
 800d666:	4604      	mov	r4, r0
 800d668:	b138      	cbz	r0, 800d67a <xQueueCreateMutexStatic+0x24>
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800d66a:	2300      	movs	r3, #0
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800d66c:	461a      	mov	r2, r3
 800d66e:	4619      	mov	r1, r3
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800d670:	6083      	str	r3, [r0, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800d672:	6003      	str	r3, [r0, #0]
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800d674:	60c3      	str	r3, [r0, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800d676:	f7ff ff3c 	bl	800d4f2 <xQueueGenericSend>
	}
 800d67a:	4620      	mov	r0, r4
 800d67c:	b002      	add	sp, #8
 800d67e:	bd10      	pop	{r4, pc}

0800d680 <xQueueGiveMutexRecursive>:
	{
 800d680:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxMutex );
 800d682:	4604      	mov	r4, r0
 800d684:	b940      	cbnz	r0, 800d698 <xQueueGiveMutexRecursive+0x18>
 800d686:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d68a:	f383 8811 	msr	BASEPRI, r3
 800d68e:	f3bf 8f6f 	isb	sy
 800d692:	f3bf 8f4f 	dsb	sy
 800d696:	e7fe      	b.n	800d696 <xQueueGiveMutexRecursive+0x16>
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800d698:	6885      	ldr	r5, [r0, #8]
 800d69a:	f000 ff5f 	bl	800e55c <xTaskGetCurrentTaskHandle>
 800d69e:	4285      	cmp	r5, r0
 800d6a0:	d10b      	bne.n	800d6ba <xQueueGiveMutexRecursive+0x3a>
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 800d6a2:	68e3      	ldr	r3, [r4, #12]
 800d6a4:	3b01      	subs	r3, #1
 800d6a6:	60e3      	str	r3, [r4, #12]
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 800d6a8:	b10b      	cbz	r3, 800d6ae <xQueueGiveMutexRecursive+0x2e>
			xReturn = pdPASS;
 800d6aa:	2001      	movs	r0, #1
	}
 800d6ac:	bd38      	pop	{r3, r4, r5, pc}
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 800d6ae:	461a      	mov	r2, r3
 800d6b0:	4619      	mov	r1, r3
 800d6b2:	4620      	mov	r0, r4
 800d6b4:	f7ff ff1d 	bl	800d4f2 <xQueueGenericSend>
 800d6b8:	e7f7      	b.n	800d6aa <xQueueGiveMutexRecursive+0x2a>
			xReturn = pdFAIL;
 800d6ba:	2000      	movs	r0, #0
		return xReturn;
 800d6bc:	e7f6      	b.n	800d6ac <xQueueGiveMutexRecursive+0x2c>

0800d6be <xQueueCreateMutex>:
	{
 800d6be:	b570      	push	{r4, r5, r6, lr}
 800d6c0:	4606      	mov	r6, r0
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800d6c2:	2050      	movs	r0, #80	@ 0x50
 800d6c4:	f7ff fade 	bl	800cc84 <pvPortMalloc>
 800d6c8:	4604      	mov	r4, r0
		if( pxNewQueue != NULL )
 800d6ca:	b198      	cbz	r0, 800d6f4 <xQueueCreateMutex+0x36>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800d6cc:	2500      	movs	r5, #0
	pxNewQueue->uxLength = uxQueueLength;
 800d6ce:	2101      	movs	r1, #1
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800d6d0:	6000      	str	r0, [r0, #0]
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800d6d2:	f880 5046 	strb.w	r5, [r0, #70]	@ 0x46
	pxNewQueue->uxItemSize = uxItemSize;
 800d6d6:	e9c0 150f 	strd	r1, r5, [r0, #60]	@ 0x3c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800d6da:	f7ff fe16 	bl	800d30a <xQueueGenericReset>
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800d6de:	462b      	mov	r3, r5
 800d6e0:	462a      	mov	r2, r5
 800d6e2:	4629      	mov	r1, r5
 800d6e4:	4620      	mov	r0, r4
		pxNewQueue->ucQueueType = ucQueueType;
 800d6e6:	f884 604c 	strb.w	r6, [r4, #76]	@ 0x4c
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800d6ea:	60a5      	str	r5, [r4, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800d6ec:	6025      	str	r5, [r4, #0]
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800d6ee:	60e5      	str	r5, [r4, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800d6f0:	f7ff feff 	bl	800d4f2 <xQueueGenericSend>
	}
 800d6f4:	4620      	mov	r0, r4
 800d6f6:	bd70      	pop	{r4, r5, r6, pc}

0800d6f8 <xQueueGenericSendFromISR>:
{
 800d6f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d6fc:	4689      	mov	r9, r1
 800d6fe:	4617      	mov	r7, r2
 800d700:	461e      	mov	r6, r3
	configASSERT( pxQueue );
 800d702:	4604      	mov	r4, r0
 800d704:	b940      	cbnz	r0, 800d718 <xQueueGenericSendFromISR+0x20>
 800d706:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d70a:	f383 8811 	msr	BASEPRI, r3
 800d70e:	f3bf 8f6f 	isb	sy
 800d712:	f3bf 8f4f 	dsb	sy
 800d716:	e7fe      	b.n	800d716 <xQueueGenericSendFromISR+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d718:	b951      	cbnz	r1, 800d730 <xQueueGenericSendFromISR+0x38>
 800d71a:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 800d71c:	b143      	cbz	r3, 800d730 <xQueueGenericSendFromISR+0x38>
 800d71e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d722:	f383 8811 	msr	BASEPRI, r3
 800d726:	f3bf 8f6f 	isb	sy
 800d72a:	f3bf 8f4f 	dsb	sy
 800d72e:	e7fe      	b.n	800d72e <xQueueGenericSendFromISR+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800d730:	2e02      	cmp	r6, #2
 800d732:	d10b      	bne.n	800d74c <xQueueGenericSendFromISR+0x54>
 800d734:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800d736:	2b01      	cmp	r3, #1
 800d738:	d008      	beq.n	800d74c <xQueueGenericSendFromISR+0x54>
 800d73a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d73e:	f383 8811 	msr	BASEPRI, r3
 800d742:	f3bf 8f6f 	isb	sy
 800d746:	f3bf 8f4f 	dsb	sy
 800d74a:	e7fe      	b.n	800d74a <xQueueGenericSendFromISR+0x52>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d74c:	f7ff fd24 	bl	800d198 <vPortValidateInterruptPriority>
	__asm volatile
 800d750:	f3ef 8811 	mrs	r8, BASEPRI
 800d754:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d758:	f383 8811 	msr	BASEPRI, r3
 800d75c:	f3bf 8f6f 	isb	sy
 800d760:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800d764:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800d766:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800d768:	429a      	cmp	r2, r3
 800d76a:	d301      	bcc.n	800d770 <xQueueGenericSendFromISR+0x78>
 800d76c:	2e02      	cmp	r6, #2
 800d76e:	d11e      	bne.n	800d7ae <xQueueGenericSendFromISR+0xb6>
			const int8_t cTxLock = pxQueue->cTxLock;
 800d770:	f894 5045 	ldrb.w	r5, [r4, #69]	@ 0x45
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800d774:	4632      	mov	r2, r6
 800d776:	4649      	mov	r1, r9
 800d778:	4620      	mov	r0, r4
			const int8_t cTxLock = pxQueue->cTxLock;
 800d77a:	b26d      	sxtb	r5, r5
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d77c:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800d77e:	f7ff fd44 	bl	800d20a <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 800d782:	1c6b      	adds	r3, r5, #1
 800d784:	d10e      	bne.n	800d7a4 <xQueueGenericSendFromISR+0xac>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d786:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800d788:	b13b      	cbz	r3, 800d79a <xQueueGenericSendFromISR+0xa2>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d78a:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 800d78e:	f000 fe55 	bl	800e43c <xTaskRemoveFromEventList>
 800d792:	b110      	cbz	r0, 800d79a <xQueueGenericSendFromISR+0xa2>
							if( pxHigherPriorityTaskWoken != NULL )
 800d794:	b10f      	cbz	r7, 800d79a <xQueueGenericSendFromISR+0xa2>
								*pxHigherPriorityTaskWoken = pdTRUE;
 800d796:	2301      	movs	r3, #1
 800d798:	603b      	str	r3, [r7, #0]
			xReturn = pdPASS;
 800d79a:	2001      	movs	r0, #1
	__asm volatile
 800d79c:	f388 8811 	msr	BASEPRI, r8
}
 800d7a0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800d7a4:	3501      	adds	r5, #1
 800d7a6:	b26d      	sxtb	r5, r5
 800d7a8:	f884 5045 	strb.w	r5, [r4, #69]	@ 0x45
 800d7ac:	e7f5      	b.n	800d79a <xQueueGenericSendFromISR+0xa2>
			xReturn = errQUEUE_FULL;
 800d7ae:	2000      	movs	r0, #0
 800d7b0:	e7f4      	b.n	800d79c <xQueueGenericSendFromISR+0xa4>

0800d7b2 <xQueueGiveFromISR>:
{
 800d7b2:	b570      	push	{r4, r5, r6, lr}
 800d7b4:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 800d7b6:	4604      	mov	r4, r0
 800d7b8:	b940      	cbnz	r0, 800d7cc <xQueueGiveFromISR+0x1a>
	__asm volatile
 800d7ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d7be:	f383 8811 	msr	BASEPRI, r3
 800d7c2:	f3bf 8f6f 	isb	sy
 800d7c6:	f3bf 8f4f 	dsb	sy
 800d7ca:	e7fe      	b.n	800d7ca <xQueueGiveFromISR+0x18>
	configASSERT( pxQueue->uxItemSize == 0 );
 800d7cc:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 800d7ce:	b143      	cbz	r3, 800d7e2 <xQueueGiveFromISR+0x30>
 800d7d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d7d4:	f383 8811 	msr	BASEPRI, r3
 800d7d8:	f3bf 8f6f 	isb	sy
 800d7dc:	f3bf 8f4f 	dsb	sy
 800d7e0:	e7fe      	b.n	800d7e0 <xQueueGiveFromISR+0x2e>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800d7e2:	6803      	ldr	r3, [r0, #0]
 800d7e4:	b953      	cbnz	r3, 800d7fc <xQueueGiveFromISR+0x4a>
 800d7e6:	6883      	ldr	r3, [r0, #8]
 800d7e8:	b143      	cbz	r3, 800d7fc <xQueueGiveFromISR+0x4a>
 800d7ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d7ee:	f383 8811 	msr	BASEPRI, r3
 800d7f2:	f3bf 8f6f 	isb	sy
 800d7f6:	f3bf 8f4f 	dsb	sy
 800d7fa:	e7fe      	b.n	800d7fa <xQueueGiveFromISR+0x48>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d7fc:	f7ff fccc 	bl	800d198 <vPortValidateInterruptPriority>
	__asm volatile
 800d800:	f3ef 8611 	mrs	r6, BASEPRI
 800d804:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d808:	f383 8811 	msr	BASEPRI, r3
 800d80c:	f3bf 8f6f 	isb	sy
 800d810:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d814:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
		if( uxMessagesWaiting < pxQueue->uxLength )
 800d816:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800d818:	4293      	cmp	r3, r2
 800d81a:	d919      	bls.n	800d850 <xQueueGiveFromISR+0x9e>
			const int8_t cTxLock = pxQueue->cTxLock;
 800d81c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800d820:	3201      	adds	r2, #1
			if( cTxLock == queueUNLOCKED )
 800d822:	29ff      	cmp	r1, #255	@ 0xff
			const int8_t cTxLock = pxQueue->cTxLock;
 800d824:	b24b      	sxtb	r3, r1
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800d826:	63a2      	str	r2, [r4, #56]	@ 0x38
			if( cTxLock == queueUNLOCKED )
 800d828:	d10d      	bne.n	800d846 <xQueueGiveFromISR+0x94>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d82a:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800d82c:	b13b      	cbz	r3, 800d83e <xQueueGiveFromISR+0x8c>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d82e:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 800d832:	f000 fe03 	bl	800e43c <xTaskRemoveFromEventList>
 800d836:	b110      	cbz	r0, 800d83e <xQueueGiveFromISR+0x8c>
							if( pxHigherPriorityTaskWoken != NULL )
 800d838:	b10d      	cbz	r5, 800d83e <xQueueGiveFromISR+0x8c>
								*pxHigherPriorityTaskWoken = pdTRUE;
 800d83a:	2301      	movs	r3, #1
 800d83c:	602b      	str	r3, [r5, #0]
			xReturn = pdPASS;
 800d83e:	2001      	movs	r0, #1
	__asm volatile
 800d840:	f386 8811 	msr	BASEPRI, r6
}
 800d844:	bd70      	pop	{r4, r5, r6, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800d846:	3301      	adds	r3, #1
 800d848:	b25b      	sxtb	r3, r3
 800d84a:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 800d84e:	e7f6      	b.n	800d83e <xQueueGiveFromISR+0x8c>
			xReturn = errQUEUE_FULL;
 800d850:	2000      	movs	r0, #0
 800d852:	e7f5      	b.n	800d840 <xQueueGiveFromISR+0x8e>

0800d854 <xQueueReceive>:
{
 800d854:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 800d858:	460e      	mov	r6, r1
	configASSERT( ( pxQueue ) );
 800d85a:	4604      	mov	r4, r0
{
 800d85c:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 800d85e:	b940      	cbnz	r0, 800d872 <xQueueReceive+0x1e>
	__asm volatile
 800d860:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d864:	f383 8811 	msr	BASEPRI, r3
 800d868:	f3bf 8f6f 	isb	sy
 800d86c:	f3bf 8f4f 	dsb	sy
 800d870:	e7fe      	b.n	800d870 <xQueueReceive+0x1c>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d872:	b951      	cbnz	r1, 800d88a <xQueueReceive+0x36>
 800d874:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 800d876:	b143      	cbz	r3, 800d88a <xQueueReceive+0x36>
 800d878:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d87c:	f383 8811 	msr	BASEPRI, r3
 800d880:	f3bf 8f6f 	isb	sy
 800d884:	f3bf 8f4f 	dsb	sy
 800d888:	e7fe      	b.n	800d888 <xQueueReceive+0x34>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d88a:	f000 fe6d 	bl	800e568 <xTaskGetSchedulerState>
 800d88e:	4605      	mov	r5, r0
 800d890:	b318      	cbz	r0, 800d8da <xQueueReceive+0x86>
 800d892:	2500      	movs	r5, #0
		prvLockQueue( pxQueue );
 800d894:	f04f 0800 	mov.w	r8, #0
		taskENTER_CRITICAL();
 800d898:	f7ff fb6c 	bl	800cf74 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d89c:	6ba7      	ldr	r7, [r4, #56]	@ 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d89e:	b347      	cbz	r7, 800d8f2 <xQueueReceive+0x9e>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800d8a0:	3f01      	subs	r7, #1
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800d8a2:	4631      	mov	r1, r6
 800d8a4:	4620      	mov	r0, r4
 800d8a6:	f7ff fce3 	bl	800d270 <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800d8aa:	63a7      	str	r7, [r4, #56]	@ 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d8ac:	6923      	ldr	r3, [r4, #16]
 800d8ae:	b173      	cbz	r3, 800d8ce <xQueueReceive+0x7a>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d8b0:	f104 0010 	add.w	r0, r4, #16
 800d8b4:	f000 fdc2 	bl	800e43c <xTaskRemoveFromEventList>
 800d8b8:	b148      	cbz	r0, 800d8ce <xQueueReceive+0x7a>
						queueYIELD_IF_USING_PREEMPTION();
 800d8ba:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800d8be:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d8c2:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800d8c6:	f3bf 8f4f 	dsb	sy
 800d8ca:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 800d8ce:	f7ff fb71 	bl	800cfb4 <vPortExitCritical>
				return pdPASS;
 800d8d2:	2001      	movs	r0, #1
}
 800d8d4:	b004      	add	sp, #16
 800d8d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d8da:	9b01      	ldr	r3, [sp, #4]
 800d8dc:	2b00      	cmp	r3, #0
 800d8de:	d0d9      	beq.n	800d894 <xQueueReceive+0x40>
 800d8e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d8e4:	f383 8811 	msr	BASEPRI, r3
 800d8e8:	f3bf 8f6f 	isb	sy
 800d8ec:	f3bf 8f4f 	dsb	sy
 800d8f0:	e7fe      	b.n	800d8f0 <xQueueReceive+0x9c>
				if( xTicksToWait == ( TickType_t ) 0 )
 800d8f2:	9b01      	ldr	r3, [sp, #4]
 800d8f4:	b91b      	cbnz	r3, 800d8fe <xQueueReceive+0xaa>
					taskEXIT_CRITICAL();
 800d8f6:	f7ff fb5d 	bl	800cfb4 <vPortExitCritical>
					return errQUEUE_EMPTY;
 800d8fa:	2000      	movs	r0, #0
 800d8fc:	e7ea      	b.n	800d8d4 <xQueueReceive+0x80>
				else if( xEntryTimeSet == pdFALSE )
 800d8fe:	b915      	cbnz	r5, 800d906 <xQueueReceive+0xb2>
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d900:	a802      	add	r0, sp, #8
 800d902:	f000 fddd 	bl	800e4c0 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 800d906:	f7ff fb55 	bl	800cfb4 <vPortExitCritical>
		vTaskSuspendAll();
 800d90a:	f000 fb99 	bl	800e040 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d90e:	f7ff fb31 	bl	800cf74 <vPortEnterCritical>
 800d912:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800d916:	2bff      	cmp	r3, #255	@ 0xff
 800d918:	d101      	bne.n	800d91e <xQueueReceive+0xca>
 800d91a:	f884 8044 	strb.w	r8, [r4, #68]	@ 0x44
 800d91e:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 800d922:	2bff      	cmp	r3, #255	@ 0xff
 800d924:	d101      	bne.n	800d92a <xQueueReceive+0xd6>
 800d926:	f884 8045 	strb.w	r8, [r4, #69]	@ 0x45
 800d92a:	f7ff fb43 	bl	800cfb4 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d92e:	a901      	add	r1, sp, #4
 800d930:	a802      	add	r0, sp, #8
 800d932:	f000 fdd1 	bl	800e4d8 <xTaskCheckForTimeOut>
 800d936:	bb00      	cbnz	r0, 800d97a <xQueueReceive+0x126>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d938:	4620      	mov	r0, r4
 800d93a:	f7ff fc5b 	bl	800d1f4 <prvIsQueueEmpty>
 800d93e:	b1b0      	cbz	r0, 800d96e <xQueueReceive+0x11a>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800d940:	9901      	ldr	r1, [sp, #4]
 800d942:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 800d946:	f000 fd41 	bl	800e3cc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800d94a:	4620      	mov	r0, r4
 800d94c:	f7ff fca5 	bl	800d29a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800d950:	f000 fc1a 	bl	800e188 <xTaskResumeAll>
 800d954:	b948      	cbnz	r0, 800d96a <xQueueReceive+0x116>
					portYIELD_WITHIN_API();
 800d956:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800d95a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d95e:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800d962:	f3bf 8f4f 	dsb	sy
 800d966:	f3bf 8f6f 	isb	sy
 800d96a:	2501      	movs	r5, #1
 800d96c:	e794      	b.n	800d898 <xQueueReceive+0x44>
				prvUnlockQueue( pxQueue );
 800d96e:	4620      	mov	r0, r4
 800d970:	f7ff fc93 	bl	800d29a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d974:	f000 fc08 	bl	800e188 <xTaskResumeAll>
 800d978:	e7f7      	b.n	800d96a <xQueueReceive+0x116>
			prvUnlockQueue( pxQueue );
 800d97a:	4620      	mov	r0, r4
 800d97c:	f7ff fc8d 	bl	800d29a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d980:	f000 fc02 	bl	800e188 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d984:	4620      	mov	r0, r4
 800d986:	f7ff fc35 	bl	800d1f4 <prvIsQueueEmpty>
 800d98a:	2800      	cmp	r0, #0
 800d98c:	d0ed      	beq.n	800d96a <xQueueReceive+0x116>
 800d98e:	e7b4      	b.n	800d8fa <xQueueReceive+0xa6>

0800d990 <xQueueSemaphoreTake>:
{
 800d990:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d992:	b085      	sub	sp, #20
	configASSERT( ( pxQueue ) );
 800d994:	4604      	mov	r4, r0
{
 800d996:	9101      	str	r1, [sp, #4]
	configASSERT( ( pxQueue ) );
 800d998:	b940      	cbnz	r0, 800d9ac <xQueueSemaphoreTake+0x1c>
 800d99a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d99e:	f383 8811 	msr	BASEPRI, r3
 800d9a2:	f3bf 8f6f 	isb	sy
 800d9a6:	f3bf 8f4f 	dsb	sy
 800d9aa:	e7fe      	b.n	800d9aa <xQueueSemaphoreTake+0x1a>
	configASSERT( pxQueue->uxItemSize == 0 );
 800d9ac:	6c05      	ldr	r5, [r0, #64]	@ 0x40
 800d9ae:	b145      	cbz	r5, 800d9c2 <xQueueSemaphoreTake+0x32>
 800d9b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d9b4:	f383 8811 	msr	BASEPRI, r3
 800d9b8:	f3bf 8f6f 	isb	sy
 800d9bc:	f3bf 8f4f 	dsb	sy
 800d9c0:	e7fe      	b.n	800d9c0 <xQueueSemaphoreTake+0x30>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d9c2:	f000 fdd1 	bl	800e568 <xTaskGetSchedulerState>
 800d9c6:	4606      	mov	r6, r0
 800d9c8:	b320      	cbz	r0, 800da14 <xQueueSemaphoreTake+0x84>
 800d9ca:	462e      	mov	r6, r5
		prvLockQueue( pxQueue );
 800d9cc:	2700      	movs	r7, #0
		taskENTER_CRITICAL();
 800d9ce:	f7ff fad1 	bl	800cf74 <vPortEnterCritical>
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800d9d2:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800d9d4:	b353      	cbz	r3, 800da2c <xQueueSemaphoreTake+0x9c>
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800d9d6:	3b01      	subs	r3, #1
 800d9d8:	63a3      	str	r3, [r4, #56]	@ 0x38
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d9da:	6823      	ldr	r3, [r4, #0]
 800d9dc:	b913      	cbnz	r3, 800d9e4 <xQueueSemaphoreTake+0x54>
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800d9de:	f000 fea1 	bl	800e724 <pvTaskIncrementMutexHeldCount>
 800d9e2:	60a0      	str	r0, [r4, #8]
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d9e4:	6923      	ldr	r3, [r4, #16]
 800d9e6:	b173      	cbz	r3, 800da06 <xQueueSemaphoreTake+0x76>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d9e8:	f104 0010 	add.w	r0, r4, #16
 800d9ec:	f000 fd26 	bl	800e43c <xTaskRemoveFromEventList>
 800d9f0:	b148      	cbz	r0, 800da06 <xQueueSemaphoreTake+0x76>
						queueYIELD_IF_USING_PREEMPTION();
 800d9f2:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800d9f6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d9fa:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800d9fe:	f3bf 8f4f 	dsb	sy
 800da02:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 800da06:	f7ff fad5 	bl	800cfb4 <vPortExitCritical>
				return pdPASS;
 800da0a:	2001      	movs	r0, #1
}
 800da0c:	b005      	add	sp, #20
 800da0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800da10:	4635      	mov	r5, r6
 800da12:	e7db      	b.n	800d9cc <xQueueSemaphoreTake+0x3c>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800da14:	9b01      	ldr	r3, [sp, #4]
 800da16:	2b00      	cmp	r3, #0
 800da18:	d0fa      	beq.n	800da10 <xQueueSemaphoreTake+0x80>
 800da1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800da1e:	f383 8811 	msr	BASEPRI, r3
 800da22:	f3bf 8f6f 	isb	sy
 800da26:	f3bf 8f4f 	dsb	sy
 800da2a:	e7fe      	b.n	800da2a <xQueueSemaphoreTake+0x9a>
				if( xTicksToWait == ( TickType_t ) 0 )
 800da2c:	9b01      	ldr	r3, [sp, #4]
 800da2e:	b953      	cbnz	r3, 800da46 <xQueueSemaphoreTake+0xb6>
						configASSERT( xInheritanceOccurred == pdFALSE );
 800da30:	2d00      	cmp	r5, #0
 800da32:	d066      	beq.n	800db02 <xQueueSemaphoreTake+0x172>
 800da34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800da38:	f383 8811 	msr	BASEPRI, r3
 800da3c:	f3bf 8f6f 	isb	sy
 800da40:	f3bf 8f4f 	dsb	sy
 800da44:	e7fe      	b.n	800da44 <xQueueSemaphoreTake+0xb4>
				else if( xEntryTimeSet == pdFALSE )
 800da46:	b916      	cbnz	r6, 800da4e <xQueueSemaphoreTake+0xbe>
					vTaskInternalSetTimeOutState( &xTimeOut );
 800da48:	a802      	add	r0, sp, #8
 800da4a:	f000 fd39 	bl	800e4c0 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 800da4e:	f7ff fab1 	bl	800cfb4 <vPortExitCritical>
		vTaskSuspendAll();
 800da52:	f000 faf5 	bl	800e040 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800da56:	f7ff fa8d 	bl	800cf74 <vPortEnterCritical>
 800da5a:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800da5e:	2bff      	cmp	r3, #255	@ 0xff
 800da60:	d101      	bne.n	800da66 <xQueueSemaphoreTake+0xd6>
 800da62:	f884 7044 	strb.w	r7, [r4, #68]	@ 0x44
 800da66:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 800da6a:	2bff      	cmp	r3, #255	@ 0xff
 800da6c:	d101      	bne.n	800da72 <xQueueSemaphoreTake+0xe2>
 800da6e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800da72:	f7ff fa9f 	bl	800cfb4 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800da76:	a901      	add	r1, sp, #4
 800da78:	a802      	add	r0, sp, #8
 800da7a:	f000 fd2d 	bl	800e4d8 <xTaskCheckForTimeOut>
 800da7e:	bb50      	cbnz	r0, 800dad6 <xQueueSemaphoreTake+0x146>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800da80:	4620      	mov	r0, r4
 800da82:	f7ff fbb7 	bl	800d1f4 <prvIsQueueEmpty>
 800da86:	b300      	cbz	r0, 800daca <xQueueSemaphoreTake+0x13a>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800da88:	6823      	ldr	r3, [r4, #0]
 800da8a:	b93b      	cbnz	r3, 800da9c <xQueueSemaphoreTake+0x10c>
						taskENTER_CRITICAL();
 800da8c:	f7ff fa72 	bl	800cf74 <vPortEnterCritical>
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800da90:	68a0      	ldr	r0, [r4, #8]
 800da92:	f000 fd79 	bl	800e588 <xTaskPriorityInherit>
 800da96:	4605      	mov	r5, r0
						taskEXIT_CRITICAL();
 800da98:	f7ff fa8c 	bl	800cfb4 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800da9c:	9901      	ldr	r1, [sp, #4]
 800da9e:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 800daa2:	f000 fc93 	bl	800e3cc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800daa6:	4620      	mov	r0, r4
 800daa8:	f7ff fbf7 	bl	800d29a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800daac:	f000 fb6c 	bl	800e188 <xTaskResumeAll>
 800dab0:	b948      	cbnz	r0, 800dac6 <xQueueSemaphoreTake+0x136>
					portYIELD_WITHIN_API();
 800dab2:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800dab6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800daba:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800dabe:	f3bf 8f4f 	dsb	sy
 800dac2:	f3bf 8f6f 	isb	sy
 800dac6:	2601      	movs	r6, #1
 800dac8:	e781      	b.n	800d9ce <xQueueSemaphoreTake+0x3e>
				prvUnlockQueue( pxQueue );
 800daca:	4620      	mov	r0, r4
 800dacc:	f7ff fbe5 	bl	800d29a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800dad0:	f000 fb5a 	bl	800e188 <xTaskResumeAll>
 800dad4:	e7f7      	b.n	800dac6 <xQueueSemaphoreTake+0x136>
			prvUnlockQueue( pxQueue );
 800dad6:	4620      	mov	r0, r4
 800dad8:	f7ff fbdf 	bl	800d29a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800dadc:	f000 fb54 	bl	800e188 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800dae0:	4620      	mov	r0, r4
 800dae2:	f7ff fb87 	bl	800d1f4 <prvIsQueueEmpty>
 800dae6:	2800      	cmp	r0, #0
 800dae8:	d0ed      	beq.n	800dac6 <xQueueSemaphoreTake+0x136>
					if( xInheritanceOccurred != pdFALSE )
 800daea:	b165      	cbz	r5, 800db06 <xQueueSemaphoreTake+0x176>
						taskENTER_CRITICAL();
 800daec:	f7ff fa42 	bl	800cf74 <vPortEnterCritical>
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800daf0:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 800daf2:	b119      	cbz	r1, 800dafc <xQueueSemaphoreTake+0x16c>
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800daf4:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800daf6:	6819      	ldr	r1, [r3, #0]
 800daf8:	f1c1 0138 	rsb	r1, r1, #56	@ 0x38
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800dafc:	68a0      	ldr	r0, [r4, #8]
 800dafe:	f000 fdc3 	bl	800e688 <vTaskPriorityDisinheritAfterTimeout>
						taskEXIT_CRITICAL();
 800db02:	f7ff fa57 	bl	800cfb4 <vPortExitCritical>
					return errQUEUE_EMPTY;
 800db06:	2000      	movs	r0, #0
 800db08:	e780      	b.n	800da0c <xQueueSemaphoreTake+0x7c>

0800db0a <xQueueTakeMutexRecursive>:
	{
 800db0a:	b570      	push	{r4, r5, r6, lr}
 800db0c:	460d      	mov	r5, r1
		configASSERT( pxMutex );
 800db0e:	4604      	mov	r4, r0
 800db10:	b940      	cbnz	r0, 800db24 <xQueueTakeMutexRecursive+0x1a>
 800db12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800db16:	f383 8811 	msr	BASEPRI, r3
 800db1a:	f3bf 8f6f 	isb	sy
 800db1e:	f3bf 8f4f 	dsb	sy
 800db22:	e7fe      	b.n	800db22 <xQueueTakeMutexRecursive+0x18>
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800db24:	6886      	ldr	r6, [r0, #8]
 800db26:	f000 fd19 	bl	800e55c <xTaskGetCurrentTaskHandle>
 800db2a:	4286      	cmp	r6, r0
 800db2c:	d104      	bne.n	800db38 <xQueueTakeMutexRecursive+0x2e>
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800db2e:	68e3      	ldr	r3, [r4, #12]
			xReturn = pdPASS;
 800db30:	2001      	movs	r0, #1
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800db32:	3301      	adds	r3, #1
 800db34:	60e3      	str	r3, [r4, #12]
	}
 800db36:	bd70      	pop	{r4, r5, r6, pc}
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 800db38:	4629      	mov	r1, r5
 800db3a:	4620      	mov	r0, r4
 800db3c:	f7ff ff28 	bl	800d990 <xQueueSemaphoreTake>
			if( xReturn != pdFAIL )
 800db40:	2800      	cmp	r0, #0
 800db42:	d0f8      	beq.n	800db36 <xQueueTakeMutexRecursive+0x2c>
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800db44:	68e3      	ldr	r3, [r4, #12]
 800db46:	3301      	adds	r3, #1
 800db48:	60e3      	str	r3, [r4, #12]
 800db4a:	e7f4      	b.n	800db36 <xQueueTakeMutexRecursive+0x2c>

0800db4c <xQueueReceiveFromISR>:
{
 800db4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800db50:	4689      	mov	r9, r1
 800db52:	4690      	mov	r8, r2
	configASSERT( pxQueue );
 800db54:	4604      	mov	r4, r0
 800db56:	b940      	cbnz	r0, 800db6a <xQueueReceiveFromISR+0x1e>
 800db58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800db5c:	f383 8811 	msr	BASEPRI, r3
 800db60:	f3bf 8f6f 	isb	sy
 800db64:	f3bf 8f4f 	dsb	sy
 800db68:	e7fe      	b.n	800db68 <xQueueReceiveFromISR+0x1c>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800db6a:	b951      	cbnz	r1, 800db82 <xQueueReceiveFromISR+0x36>
 800db6c:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 800db6e:	b143      	cbz	r3, 800db82 <xQueueReceiveFromISR+0x36>
 800db70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800db74:	f383 8811 	msr	BASEPRI, r3
 800db78:	f3bf 8f6f 	isb	sy
 800db7c:	f3bf 8f4f 	dsb	sy
 800db80:	e7fe      	b.n	800db80 <xQueueReceiveFromISR+0x34>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800db82:	f7ff fb09 	bl	800d198 <vPortValidateInterruptPriority>
	__asm volatile
 800db86:	f3ef 8711 	mrs	r7, BASEPRI
 800db8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800db8e:	f383 8811 	msr	BASEPRI, r3
 800db92:	f3bf 8f6f 	isb	sy
 800db96:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800db9a:	6ba5      	ldr	r5, [r4, #56]	@ 0x38
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800db9c:	b30d      	cbz	r5, 800dbe2 <xQueueReceiveFromISR+0x96>
			const int8_t cRxLock = pxQueue->cRxLock;
 800db9e:	f894 6044 	ldrb.w	r6, [r4, #68]	@ 0x44
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800dba2:	4649      	mov	r1, r9
 800dba4:	4620      	mov	r0, r4
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800dba6:	3d01      	subs	r5, #1
			const int8_t cRxLock = pxQueue->cRxLock;
 800dba8:	b276      	sxtb	r6, r6
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800dbaa:	f7ff fb61 	bl	800d270 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800dbae:	63a5      	str	r5, [r4, #56]	@ 0x38
			if( cRxLock == queueUNLOCKED )
 800dbb0:	1c73      	adds	r3, r6, #1
 800dbb2:	d111      	bne.n	800dbd8 <xQueueReceiveFromISR+0x8c>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800dbb4:	6923      	ldr	r3, [r4, #16]
 800dbb6:	b153      	cbz	r3, 800dbce <xQueueReceiveFromISR+0x82>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800dbb8:	f104 0010 	add.w	r0, r4, #16
 800dbbc:	f000 fc3e 	bl	800e43c <xTaskRemoveFromEventList>
 800dbc0:	b128      	cbz	r0, 800dbce <xQueueReceiveFromISR+0x82>
						if( pxHigherPriorityTaskWoken != NULL )
 800dbc2:	f1b8 0f00 	cmp.w	r8, #0
 800dbc6:	d002      	beq.n	800dbce <xQueueReceiveFromISR+0x82>
							*pxHigherPriorityTaskWoken = pdTRUE;
 800dbc8:	2301      	movs	r3, #1
 800dbca:	f8c8 3000 	str.w	r3, [r8]
			xReturn = pdPASS;
 800dbce:	2001      	movs	r0, #1
	__asm volatile
 800dbd0:	f387 8811 	msr	BASEPRI, r7
}
 800dbd4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800dbd8:	3601      	adds	r6, #1
 800dbda:	b276      	sxtb	r6, r6
 800dbdc:	f884 6044 	strb.w	r6, [r4, #68]	@ 0x44
 800dbe0:	e7f5      	b.n	800dbce <xQueueReceiveFromISR+0x82>
			xReturn = pdFAIL;
 800dbe2:	4628      	mov	r0, r5
 800dbe4:	e7f4      	b.n	800dbd0 <xQueueReceiveFromISR+0x84>
	...

0800dbe8 <vQueueAddToRegistry>:
	{
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800dbe8:	2300      	movs	r3, #0
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800dbea:	4a07      	ldr	r2, [pc, #28]	@ (800dc08 <vQueueAddToRegistry+0x20>)
	{
 800dbec:	b530      	push	{r4, r5, lr}
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800dbee:	f852 5033 	ldr.w	r5, [r2, r3, lsl #3]
 800dbf2:	eb02 04c3 	add.w	r4, r2, r3, lsl #3
 800dbf6:	b91d      	cbnz	r5, 800dc00 <vQueueAddToRegistry+0x18>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800dbf8:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800dbfc:	6060      	str	r0, [r4, #4]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800dbfe:	bd30      	pop	{r4, r5, pc}
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800dc00:	3301      	adds	r3, #1
 800dc02:	2b08      	cmp	r3, #8
 800dc04:	d1f3      	bne.n	800dbee <vQueueAddToRegistry+0x6>
 800dc06:	e7fa      	b.n	800dbfe <vQueueAddToRegistry+0x16>
 800dc08:	240287ac 	.word	0x240287ac

0800dc0c <vQueueUnregisterQueue>:
	{
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800dc0c:	2300      	movs	r3, #0
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800dc0e:	4a09      	ldr	r2, [pc, #36]	@ (800dc34 <vQueueUnregisterQueue+0x28>)
	{
 800dc10:	b510      	push	{r4, lr}
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800dc12:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 800dc16:	00dc      	lsls	r4, r3, #3
 800dc18:	4281      	cmp	r1, r0
 800dc1a:	d106      	bne.n	800dc2a <vQueueUnregisterQueue+0x1e>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800dc1c:	4a06      	ldr	r2, [pc, #24]	@ (800dc38 <vQueueUnregisterQueue+0x2c>)
 800dc1e:	2100      	movs	r1, #0
 800dc20:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800dc24:	4422      	add	r2, r4
 800dc26:	6051      	str	r1, [r2, #4]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800dc28:	bd10      	pop	{r4, pc}
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800dc2a:	3301      	adds	r3, #1
 800dc2c:	2b08      	cmp	r3, #8
 800dc2e:	d1f0      	bne.n	800dc12 <vQueueUnregisterQueue+0x6>
 800dc30:	e7fa      	b.n	800dc28 <vQueueUnregisterQueue+0x1c>
 800dc32:	bf00      	nop
 800dc34:	240287b0 	.word	0x240287b0
 800dc38:	240287ac 	.word	0x240287ac

0800dc3c <vQueueDelete>:
{
 800dc3c:	b510      	push	{r4, lr}
	configASSERT( pxQueue );
 800dc3e:	b940      	cbnz	r0, 800dc52 <vQueueDelete+0x16>
	__asm volatile
 800dc40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dc44:	f383 8811 	msr	BASEPRI, r3
 800dc48:	f3bf 8f6f 	isb	sy
 800dc4c:	f3bf 8f4f 	dsb	sy
 800dc50:	e7fe      	b.n	800dc50 <vQueueDelete+0x14>
		vQueueUnregisterQueue( pxQueue );
 800dc52:	f7ff ffdb 	bl	800dc0c <vQueueUnregisterQueue>
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800dc56:	f890 3046 	ldrb.w	r3, [r0, #70]	@ 0x46
 800dc5a:	b91b      	cbnz	r3, 800dc64 <vQueueDelete+0x28>
}
 800dc5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			vPortFree( pxQueue );
 800dc60:	f7ff b8a8 	b.w	800cdb4 <vPortFree>
}
 800dc64:	bd10      	pop	{r4, pc}

0800dc66 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800dc66:	b570      	push	{r4, r5, r6, lr}
 800dc68:	4604      	mov	r4, r0
 800dc6a:	460d      	mov	r5, r1
 800dc6c:	4616      	mov	r6, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800dc6e:	f7ff f981 	bl	800cf74 <vPortEnterCritical>
 800dc72:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800dc76:	2bff      	cmp	r3, #255	@ 0xff
 800dc78:	d102      	bne.n	800dc80 <vQueueWaitForMessageRestricted+0x1a>
 800dc7a:	2300      	movs	r3, #0
 800dc7c:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 800dc80:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 800dc84:	2bff      	cmp	r3, #255	@ 0xff
 800dc86:	d102      	bne.n	800dc8e <vQueueWaitForMessageRestricted+0x28>
 800dc88:	2300      	movs	r3, #0
 800dc8a:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 800dc8e:	f7ff f991 	bl	800cfb4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800dc92:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800dc94:	b92b      	cbnz	r3, 800dca2 <vQueueWaitForMessageRestricted+0x3c>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800dc96:	4632      	mov	r2, r6
 800dc98:	4629      	mov	r1, r5
 800dc9a:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 800dc9e:	f000 fbaf 	bl	800e400 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800dca2:	4620      	mov	r0, r4
	}
 800dca4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		prvUnlockQueue( pxQueue );
 800dca8:	f7ff baf7 	b.w	800d29a <prvUnlockQueue>

0800dcac <prvAddNewTaskToReadyList>:
	}
}
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800dcac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dcb0:	4604      	mov	r4, r0
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800dcb2:	f7ff f95f 	bl	800cf74 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800dcb6:	4b2f      	ldr	r3, [pc, #188]	@ (800dd74 <prvAddNewTaskToReadyList+0xc8>)
		if( pxCurrentTCB == NULL )
 800dcb8:	4e2f      	ldr	r6, [pc, #188]	@ (800dd78 <prvAddNewTaskToReadyList+0xcc>)
		uxCurrentNumberOfTasks++;
 800dcba:	681a      	ldr	r2, [r3, #0]
 800dcbc:	4f2f      	ldr	r7, [pc, #188]	@ (800dd7c <prvAddNewTaskToReadyList+0xd0>)
 800dcbe:	3201      	adds	r2, #1
 800dcc0:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 800dcc2:	6835      	ldr	r5, [r6, #0]
 800dcc4:	2d00      	cmp	r5, #0
 800dcc6:	d14a      	bne.n	800dd5e <prvAddNewTaskToReadyList+0xb2>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800dcc8:	6034      	str	r4, [r6, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800dcca:	681b      	ldr	r3, [r3, #0]
 800dccc:	2b01      	cmp	r3, #1
 800dcce:	d11f      	bne.n	800dd10 <prvAddNewTaskToReadyList+0x64>
 800dcd0:	46b8      	mov	r8, r7

static void prvInitialiseTaskLists( void )
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800dcd2:	3501      	adds	r5, #1
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800dcd4:	4640      	mov	r0, r8
 800dcd6:	f7ff f8ab 	bl	800ce30 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800dcda:	f108 0814 	add.w	r8, r8, #20
 800dcde:	2d38      	cmp	r5, #56	@ 0x38
 800dce0:	d1f7      	bne.n	800dcd2 <prvAddNewTaskToReadyList+0x26>
	}

	vListInitialise( &xDelayedTaskList1 );
 800dce2:	f8df 80c0 	ldr.w	r8, [pc, #192]	@ 800dda4 <prvAddNewTaskToReadyList+0xf8>
	vListInitialise( &xDelayedTaskList2 );
 800dce6:	4d26      	ldr	r5, [pc, #152]	@ (800dd80 <prvAddNewTaskToReadyList+0xd4>)
	vListInitialise( &xDelayedTaskList1 );
 800dce8:	4640      	mov	r0, r8
 800dcea:	f7ff f8a1 	bl	800ce30 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800dcee:	4628      	mov	r0, r5
 800dcf0:	f7ff f89e 	bl	800ce30 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800dcf4:	4823      	ldr	r0, [pc, #140]	@ (800dd84 <prvAddNewTaskToReadyList+0xd8>)
 800dcf6:	f7ff f89b 	bl	800ce30 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800dcfa:	4823      	ldr	r0, [pc, #140]	@ (800dd88 <prvAddNewTaskToReadyList+0xdc>)
 800dcfc:	f7ff f898 	bl	800ce30 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800dd00:	4822      	ldr	r0, [pc, #136]	@ (800dd8c <prvAddNewTaskToReadyList+0xe0>)
 800dd02:	f7ff f895 	bl	800ce30 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800dd06:	4b22      	ldr	r3, [pc, #136]	@ (800dd90 <prvAddNewTaskToReadyList+0xe4>)
 800dd08:	f8c3 8000 	str.w	r8, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800dd0c:	4b21      	ldr	r3, [pc, #132]	@ (800dd94 <prvAddNewTaskToReadyList+0xe8>)
 800dd0e:	601d      	str	r5, [r3, #0]
		uxTaskNumber++;
 800dd10:	4a21      	ldr	r2, [pc, #132]	@ (800dd98 <prvAddNewTaskToReadyList+0xec>)
 800dd12:	6813      	ldr	r3, [r2, #0]
 800dd14:	3301      	adds	r3, #1
 800dd16:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 800dd18:	4a20      	ldr	r2, [pc, #128]	@ (800dd9c <prvAddNewTaskToReadyList+0xf0>)
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800dd1a:	6463      	str	r3, [r4, #68]	@ 0x44
		prvAddTaskToReadyList( pxNewTCB );
 800dd1c:	6811      	ldr	r1, [r2, #0]
 800dd1e:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800dd20:	428b      	cmp	r3, r1
 800dd22:	d900      	bls.n	800dd26 <prvAddNewTaskToReadyList+0x7a>
 800dd24:	6013      	str	r3, [r2, #0]
 800dd26:	2014      	movs	r0, #20
 800dd28:	1d21      	adds	r1, r4, #4
 800dd2a:	fb00 7003 	mla	r0, r0, r3, r7
 800dd2e:	f7ff f88d 	bl	800ce4c <vListInsertEnd>
	taskEXIT_CRITICAL();
 800dd32:	f7ff f93f 	bl	800cfb4 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 800dd36:	4b1a      	ldr	r3, [pc, #104]	@ (800dda0 <prvAddNewTaskToReadyList+0xf4>)
 800dd38:	681b      	ldr	r3, [r3, #0]
 800dd3a:	b173      	cbz	r3, 800dd5a <prvAddNewTaskToReadyList+0xae>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800dd3c:	6833      	ldr	r3, [r6, #0]
 800dd3e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dd40:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800dd42:	429a      	cmp	r2, r3
 800dd44:	d209      	bcs.n	800dd5a <prvAddNewTaskToReadyList+0xae>
			taskYIELD_IF_USING_PREEMPTION();
 800dd46:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800dd4a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800dd4e:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800dd52:	f3bf 8f4f 	dsb	sy
 800dd56:	f3bf 8f6f 	isb	sy
}
 800dd5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if( xSchedulerRunning == pdFALSE )
 800dd5e:	4b10      	ldr	r3, [pc, #64]	@ (800dda0 <prvAddNewTaskToReadyList+0xf4>)
 800dd60:	681a      	ldr	r2, [r3, #0]
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800dd62:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
			if( xSchedulerRunning == pdFALSE )
 800dd64:	2a00      	cmp	r2, #0
 800dd66:	d1d3      	bne.n	800dd10 <prvAddNewTaskToReadyList+0x64>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800dd68:	6832      	ldr	r2, [r6, #0]
 800dd6a:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800dd6c:	429a      	cmp	r2, r3
 800dd6e:	d8cf      	bhi.n	800dd10 <prvAddNewTaskToReadyList+0x64>
					pxCurrentTCB = pxNewTCB;
 800dd70:	6034      	str	r4, [r6, #0]
 800dd72:	e7cd      	b.n	800dd10 <prvAddNewTaskToReadyList+0x64>
 800dd74:	24028810 	.word	0x24028810
 800dd78:	24028ce4 	.word	0x24028ce4
 800dd7c:	24028884 	.word	0x24028884
 800dd80:	2402885c 	.word	0x2402885c
 800dd84:	24028840 	.word	0x24028840
 800dd88:	2402882c 	.word	0x2402882c
 800dd8c:	24028814 	.word	0x24028814
 800dd90:	24028858 	.word	0x24028858
 800dd94:	24028854 	.word	0x24028854
 800dd98:	240287f4 	.word	0x240287f4
 800dd9c:	24028808 	.word	0x24028808
 800dda0:	24028804 	.word	0x24028804
 800dda4:	24028870 	.word	0x24028870

0800dda8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800dda8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800ddaa:	4b15      	ldr	r3, [pc, #84]	@ (800de00 <prvAddCurrentTaskToDelayedList+0x58>)
{
 800ddac:	4606      	mov	r6, r0
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ddae:	4d15      	ldr	r5, [pc, #84]	@ (800de04 <prvAddCurrentTaskToDelayedList+0x5c>)
{
 800ddb0:	460f      	mov	r7, r1
const TickType_t xConstTickCount = xTickCount;
 800ddb2:	681c      	ldr	r4, [r3, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ddb4:	6828      	ldr	r0, [r5, #0]
 800ddb6:	3004      	adds	r0, #4
 800ddb8:	f7ff f86a 	bl	800ce90 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800ddbc:	1c73      	adds	r3, r6, #1
 800ddbe:	d107      	bne.n	800ddd0 <prvAddCurrentTaskToDelayedList+0x28>
 800ddc0:	b137      	cbz	r7, 800ddd0 <prvAddCurrentTaskToDelayedList+0x28>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ddc2:	6829      	ldr	r1, [r5, #0]
 800ddc4:	4810      	ldr	r0, [pc, #64]	@ (800de08 <prvAddCurrentTaskToDelayedList+0x60>)
 800ddc6:	3104      	adds	r1, #4

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800ddc8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ddcc:	f7ff b83e 	b.w	800ce4c <vListInsertEnd>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800ddd0:	19a4      	adds	r4, r4, r6
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800ddd2:	682b      	ldr	r3, [r5, #0]
 800ddd4:	605c      	str	r4, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800ddd6:	d307      	bcc.n	800dde8 <prvAddCurrentTaskToDelayedList+0x40>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ddd8:	4b0c      	ldr	r3, [pc, #48]	@ (800de0c <prvAddCurrentTaskToDelayedList+0x64>)
 800ddda:	6818      	ldr	r0, [r3, #0]
 800dddc:	6829      	ldr	r1, [r5, #0]
}
 800ddde:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800dde2:	3104      	adds	r1, #4
 800dde4:	f7ff b83d 	b.w	800ce62 <vListInsert>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800dde8:	4b09      	ldr	r3, [pc, #36]	@ (800de10 <prvAddCurrentTaskToDelayedList+0x68>)
 800ddea:	6818      	ldr	r0, [r3, #0]
 800ddec:	6829      	ldr	r1, [r5, #0]
 800ddee:	3104      	adds	r1, #4
 800ddf0:	f7ff f837 	bl	800ce62 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800ddf4:	4b07      	ldr	r3, [pc, #28]	@ (800de14 <prvAddCurrentTaskToDelayedList+0x6c>)
 800ddf6:	681a      	ldr	r2, [r3, #0]
 800ddf8:	42a2      	cmp	r2, r4
 800ddfa:	d900      	bls.n	800ddfe <prvAddCurrentTaskToDelayedList+0x56>
					xNextTaskUnblockTime = xTimeToWake;
 800ddfc:	601c      	str	r4, [r3, #0]
}
 800ddfe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800de00:	2402880c 	.word	0x2402880c
 800de04:	24028ce4 	.word	0x24028ce4
 800de08:	24028814 	.word	0x24028814
 800de0c:	24028854 	.word	0x24028854
 800de10:	24028858 	.word	0x24028858
 800de14:	240287f0 	.word	0x240287f0

0800de18 <prvResetNextTaskUnblockTime>:
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800de18:	4a06      	ldr	r2, [pc, #24]	@ (800de34 <prvResetNextTaskUnblockTime+0x1c>)
 800de1a:	6813      	ldr	r3, [r2, #0]
 800de1c:	6819      	ldr	r1, [r3, #0]
 800de1e:	4b06      	ldr	r3, [pc, #24]	@ (800de38 <prvResetNextTaskUnblockTime+0x20>)
 800de20:	b919      	cbnz	r1, 800de2a <prvResetNextTaskUnblockTime+0x12>
		xNextTaskUnblockTime = portMAX_DELAY;
 800de22:	f04f 32ff 	mov.w	r2, #4294967295
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800de26:	601a      	str	r2, [r3, #0]
}
 800de28:	4770      	bx	lr
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800de2a:	6812      	ldr	r2, [r2, #0]
 800de2c:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800de2e:	68d2      	ldr	r2, [r2, #12]
 800de30:	6852      	ldr	r2, [r2, #4]
 800de32:	e7f8      	b.n	800de26 <prvResetNextTaskUnblockTime+0xe>
 800de34:	24028858 	.word	0x24028858
 800de38:	240287f0 	.word	0x240287f0

0800de3c <prvDeleteTCB>:
	{
 800de3c:	b510      	push	{r4, lr}
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800de3e:	f890 305d 	ldrb.w	r3, [r0, #93]	@ 0x5d
	{
 800de42:	4604      	mov	r4, r0
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800de44:	b93b      	cbnz	r3, 800de56 <prvDeleteTCB+0x1a>
				vPortFree( pxTCB->pxStack );
 800de46:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 800de48:	f7fe ffb4 	bl	800cdb4 <vPortFree>
				vPortFree( pxTCB );
 800de4c:	4620      	mov	r0, r4
	}
 800de4e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				vPortFree( pxTCB );
 800de52:	f7fe bfaf 	b.w	800cdb4 <vPortFree>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800de56:	2b01      	cmp	r3, #1
 800de58:	d0f9      	beq.n	800de4e <prvDeleteTCB+0x12>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800de5a:	2b02      	cmp	r3, #2
 800de5c:	d008      	beq.n	800de70 <prvDeleteTCB+0x34>
 800de5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800de62:	f383 8811 	msr	BASEPRI, r3
 800de66:	f3bf 8f6f 	isb	sy
 800de6a:	f3bf 8f4f 	dsb	sy
 800de6e:	e7fe      	b.n	800de6e <prvDeleteTCB+0x32>
	}
 800de70:	bd10      	pop	{r4, pc}
	...

0800de74 <prvIdleTask>:
{
 800de74:	b580      	push	{r7, lr}
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800de76:	4c14      	ldr	r4, [pc, #80]	@ (800dec8 <prvIdleTask+0x54>)
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800de78:	4f14      	ldr	r7, [pc, #80]	@ (800decc <prvIdleTask+0x58>)
				--uxCurrentNumberOfTasks;
 800de7a:	4d15      	ldr	r5, [pc, #84]	@ (800ded0 <prvIdleTask+0x5c>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800de7c:	6823      	ldr	r3, [r4, #0]
 800de7e:	b983      	cbnz	r3, 800dea2 <prvIdleTask+0x2e>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800de80:	4b14      	ldr	r3, [pc, #80]	@ (800ded4 <prvIdleTask+0x60>)
 800de82:	681b      	ldr	r3, [r3, #0]
 800de84:	2b01      	cmp	r3, #1
 800de86:	d909      	bls.n	800de9c <prvIdleTask+0x28>
				taskYIELD();
 800de88:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800de8c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800de90:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800de94:	f3bf 8f4f 	dsb	sy
 800de98:	f3bf 8f6f 	isb	sy
			vApplicationIdleHook();
 800de9c:	f7f2 fc2c 	bl	80006f8 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 800dea0:	e7eb      	b.n	800de7a <prvIdleTask+0x6>
			taskENTER_CRITICAL();
 800dea2:	f7ff f867 	bl	800cf74 <vPortEnterCritical>
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dea6:	68fb      	ldr	r3, [r7, #12]
 800dea8:	68de      	ldr	r6, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800deaa:	1d30      	adds	r0, r6, #4
 800deac:	f7fe fff0 	bl	800ce90 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800deb0:	682b      	ldr	r3, [r5, #0]
 800deb2:	3b01      	subs	r3, #1
 800deb4:	602b      	str	r3, [r5, #0]
				--uxDeletedTasksWaitingCleanUp;
 800deb6:	6823      	ldr	r3, [r4, #0]
 800deb8:	3b01      	subs	r3, #1
 800deba:	6023      	str	r3, [r4, #0]
			taskEXIT_CRITICAL();
 800debc:	f7ff f87a 	bl	800cfb4 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 800dec0:	4630      	mov	r0, r6
 800dec2:	f7ff ffbb 	bl	800de3c <prvDeleteTCB>
 800dec6:	e7d9      	b.n	800de7c <prvIdleTask+0x8>
 800dec8:	24028828 	.word	0x24028828
 800decc:	2402882c 	.word	0x2402882c
 800ded0:	24028810 	.word	0x24028810
 800ded4:	24028884 	.word	0x24028884

0800ded8 <prvInitialiseNewTask.constprop.0>:
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 800ded8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800dedc:	0096      	lsls	r6, r2, #2
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 800dede:	4607      	mov	r7, r0
 800dee0:	460d      	mov	r5, r1
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800dee2:	21a5      	movs	r1, #165	@ 0xa5
 800dee4:	4632      	mov	r2, r6
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 800dee6:	4698      	mov	r8, r3
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800dee8:	3e04      	subs	r6, #4
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 800deea:	e9dd 9409 	ldrd	r9, r4, [sp, #36]	@ 0x24
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800deee:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 800def0:	f019 fc62 	bl	80277b8 <memset>
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800def4:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800def6:	441e      	add	r6, r3
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800def8:	f026 0607 	bic.w	r6, r6, #7
	if( pcName != NULL )
 800defc:	b3b5      	cbz	r5, 800df6c <prvInitialiseNewTask.constprop.0+0x94>
 800defe:	1e6b      	subs	r3, r5, #1
 800df00:	f104 0233 	add.w	r2, r4, #51	@ 0x33
 800df04:	350f      	adds	r5, #15
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800df06:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 800df0a:	f802 1f01 	strb.w	r1, [r2, #1]!
			if( pcName[ x ] == ( char ) 0x00 )
 800df0e:	b109      	cbz	r1, 800df14 <prvInitialiseNewTask.constprop.0+0x3c>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800df10:	42ab      	cmp	r3, r5
 800df12:	d1f8      	bne.n	800df06 <prvInitialiseNewTask.constprop.0+0x2e>
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800df14:	2300      	movs	r3, #0
 800df16:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800df1a:	9d08      	ldr	r5, [sp, #32]
		pxNewTCB->uxMutexesHeld = 0;
 800df1c:	f04f 0a00 	mov.w	sl, #0
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800df20:	1d20      	adds	r0, r4, #4
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800df22:	2d37      	cmp	r5, #55	@ 0x37
		pxNewTCB->uxMutexesHeld = 0;
 800df24:	f8c4 a050 	str.w	sl, [r4, #80]	@ 0x50
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800df28:	bf28      	it	cs
 800df2a:	2537      	movcs	r5, #55	@ 0x37
	pxNewTCB->uxPriority = uxPriority;
 800df2c:	62e5      	str	r5, [r4, #44]	@ 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 800df2e:	64e5      	str	r5, [r4, #76]	@ 0x4c
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800df30:	f1c5 0538 	rsb	r5, r5, #56	@ 0x38
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800df34:	f7fe ff87 	bl	800ce46 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800df38:	f104 0018 	add.w	r0, r4, #24
 800df3c:	f7fe ff83 	bl	800ce46 <vListInitialiseItem>
		pxNewTCB->ulNotifiedValue = 0;
 800df40:	f8c4 a058 	str.w	sl, [r4, #88]	@ 0x58
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800df44:	4642      	mov	r2, r8
 800df46:	4639      	mov	r1, r7
 800df48:	4630      	mov	r0, r6
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800df4a:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800df4c:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800df4e:	6264      	str	r4, [r4, #36]	@ 0x24
		pxNewTCB->pxTaskTag = NULL;
 800df50:	f8c4 a054 	str.w	sl, [r4, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800df54:	f884 a05c 	strb.w	sl, [r4, #92]	@ 0x5c
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800df58:	f7fe ffe8 	bl	800cf2c <pxPortInitialiseStack>
 800df5c:	6020      	str	r0, [r4, #0]
	if( pxCreatedTask != NULL )
 800df5e:	f1b9 0f00 	cmp.w	r9, #0
 800df62:	d001      	beq.n	800df68 <prvInitialiseNewTask.constprop.0+0x90>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800df64:	f8c9 4000 	str.w	r4, [r9]
}
 800df68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800df6c:	f884 5034 	strb.w	r5, [r4, #52]	@ 0x34
 800df70:	e7d3      	b.n	800df1a <prvInitialiseNewTask.constprop.0+0x42>

0800df72 <xTaskCreateStatic>:
	{
 800df72:	b570      	push	{r4, r5, r6, lr}
 800df74:	b086      	sub	sp, #24
 800df76:	e9dd 540b 	ldrd	r5, r4, [sp, #44]	@ 0x2c
		configASSERT( puxStackBuffer != NULL );
 800df7a:	b945      	cbnz	r5, 800df8e <xTaskCreateStatic+0x1c>
 800df7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800df80:	f383 8811 	msr	BASEPRI, r3
 800df84:	f3bf 8f6f 	isb	sy
 800df88:	f3bf 8f4f 	dsb	sy
 800df8c:	e7fe      	b.n	800df8c <xTaskCreateStatic+0x1a>
		configASSERT( pxTaskBuffer != NULL );
 800df8e:	b944      	cbnz	r4, 800dfa2 <xTaskCreateStatic+0x30>
 800df90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800df94:	f383 8811 	msr	BASEPRI, r3
 800df98:	f3bf 8f6f 	isb	sy
 800df9c:	f3bf 8f4f 	dsb	sy
 800dfa0:	e7fe      	b.n	800dfa0 <xTaskCreateStatic+0x2e>
			volatile size_t xSize = sizeof( StaticTask_t );
 800dfa2:	2660      	movs	r6, #96	@ 0x60
 800dfa4:	9605      	str	r6, [sp, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 800dfa6:	9e05      	ldr	r6, [sp, #20]
 800dfa8:	2e60      	cmp	r6, #96	@ 0x60
 800dfaa:	d008      	beq.n	800dfbe <xTaskCreateStatic+0x4c>
 800dfac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dfb0:	f383 8811 	msr	BASEPRI, r3
 800dfb4:	f3bf 8f6f 	isb	sy
 800dfb8:	f3bf 8f4f 	dsb	sy
 800dfbc:	e7fe      	b.n	800dfbc <xTaskCreateStatic+0x4a>
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800dfbe:	6325      	str	r5, [r4, #48]	@ 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800dfc0:	2502      	movs	r5, #2
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800dfc2:	9e05      	ldr	r6, [sp, #20]
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800dfc4:	f884 505d 	strb.w	r5, [r4, #93]	@ 0x5d
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800dfc8:	ad04      	add	r5, sp, #16
 800dfca:	9402      	str	r4, [sp, #8]
 800dfcc:	9501      	str	r5, [sp, #4]
 800dfce:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 800dfd0:	9500      	str	r5, [sp, #0]
 800dfd2:	f7ff ff81 	bl	800ded8 <prvInitialiseNewTask.constprop.0>
			prvAddNewTaskToReadyList( pxNewTCB );
 800dfd6:	4620      	mov	r0, r4
 800dfd8:	f7ff fe68 	bl	800dcac <prvAddNewTaskToReadyList>
	}
 800dfdc:	9804      	ldr	r0, [sp, #16]
 800dfde:	b006      	add	sp, #24
 800dfe0:	bd70      	pop	{r4, r5, r6, pc}

0800dfe2 <xTaskCreate>:
	{
 800dfe2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800dfe6:	4607      	mov	r7, r0
 800dfe8:	b085      	sub	sp, #20
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800dfea:	0090      	lsls	r0, r2, #2
	{
 800dfec:	4688      	mov	r8, r1
 800dfee:	4616      	mov	r6, r2
 800dff0:	4699      	mov	r9, r3
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800dff2:	f7fe fe47 	bl	800cc84 <pvPortMalloc>
			if( pxStack != NULL )
 800dff6:	4605      	mov	r5, r0
 800dff8:	b920      	cbnz	r0, 800e004 <xTaskCreate+0x22>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800dffa:	f04f 30ff 	mov.w	r0, #4294967295
	}
 800dffe:	b005      	add	sp, #20
 800e000:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800e004:	2060      	movs	r0, #96	@ 0x60
 800e006:	f7fe fe3d 	bl	800cc84 <pvPortMalloc>
				if( pxNewTCB != NULL )
 800e00a:	4604      	mov	r4, r0
 800e00c:	b198      	cbz	r0, 800e036 <xTaskCreate+0x54>
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800e00e:	2300      	movs	r3, #0
					pxNewTCB->pxStack = pxStack;
 800e010:	6305      	str	r5, [r0, #48]	@ 0x30
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800e012:	4632      	mov	r2, r6
 800e014:	4641      	mov	r1, r8
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800e016:	f880 305d 	strb.w	r3, [r0, #93]	@ 0x5d
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800e01a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800e01c:	9002      	str	r0, [sp, #8]
 800e01e:	4638      	mov	r0, r7
 800e020:	9301      	str	r3, [sp, #4]
 800e022:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800e024:	9300      	str	r3, [sp, #0]
 800e026:	464b      	mov	r3, r9
 800e028:	f7ff ff56 	bl	800ded8 <prvInitialiseNewTask.constprop.0>
			prvAddNewTaskToReadyList( pxNewTCB );
 800e02c:	4620      	mov	r0, r4
 800e02e:	f7ff fe3d 	bl	800dcac <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800e032:	2001      	movs	r0, #1
 800e034:	e7e3      	b.n	800dffe <xTaskCreate+0x1c>
					vPortFree( pxStack );
 800e036:	4628      	mov	r0, r5
 800e038:	f7fe febc 	bl	800cdb4 <vPortFree>
		if( pxNewTCB != NULL )
 800e03c:	e7dd      	b.n	800dffa <xTaskCreate+0x18>
	...

0800e040 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 800e040:	4a02      	ldr	r2, [pc, #8]	@ (800e04c <vTaskSuspendAll+0xc>)
 800e042:	6813      	ldr	r3, [r2, #0]
 800e044:	3301      	adds	r3, #1
 800e046:	6013      	str	r3, [r2, #0]
}
 800e048:	4770      	bx	lr
 800e04a:	bf00      	nop
 800e04c:	240287ec 	.word	0x240287ec

0800e050 <xTaskGetTickCount>:
		xTicks = xTickCount;
 800e050:	4b01      	ldr	r3, [pc, #4]	@ (800e058 <xTaskGetTickCount+0x8>)
 800e052:	6818      	ldr	r0, [r3, #0]
}
 800e054:	4770      	bx	lr
 800e056:	bf00      	nop
 800e058:	2402880c 	.word	0x2402880c

0800e05c <xTaskIncrementTick>:
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e05c:	4b3f      	ldr	r3, [pc, #252]	@ (800e15c <xTaskIncrementTick+0x100>)
 800e05e:	681b      	ldr	r3, [r3, #0]
{
 800e060:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e064:	2b00      	cmp	r3, #0
 800e066:	d172      	bne.n	800e14e <xTaskIncrementTick+0xf2>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800e068:	4b3d      	ldr	r3, [pc, #244]	@ (800e160 <xTaskIncrementTick+0x104>)
 800e06a:	681c      	ldr	r4, [r3, #0]
 800e06c:	3401      	adds	r4, #1
		xTickCount = xConstTickCount;
 800e06e:	601c      	str	r4, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800e070:	b9bc      	cbnz	r4, 800e0a2 <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
 800e072:	4b3c      	ldr	r3, [pc, #240]	@ (800e164 <xTaskIncrementTick+0x108>)
 800e074:	681a      	ldr	r2, [r3, #0]
 800e076:	6812      	ldr	r2, [r2, #0]
 800e078:	b142      	cbz	r2, 800e08c <xTaskIncrementTick+0x30>
 800e07a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e07e:	f383 8811 	msr	BASEPRI, r3
 800e082:	f3bf 8f6f 	isb	sy
 800e086:	f3bf 8f4f 	dsb	sy
 800e08a:	e7fe      	b.n	800e08a <xTaskIncrementTick+0x2e>
 800e08c:	4a36      	ldr	r2, [pc, #216]	@ (800e168 <xTaskIncrementTick+0x10c>)
 800e08e:	6819      	ldr	r1, [r3, #0]
 800e090:	6810      	ldr	r0, [r2, #0]
 800e092:	6018      	str	r0, [r3, #0]
 800e094:	6011      	str	r1, [r2, #0]
 800e096:	4a35      	ldr	r2, [pc, #212]	@ (800e16c <xTaskIncrementTick+0x110>)
 800e098:	6813      	ldr	r3, [r2, #0]
 800e09a:	3301      	adds	r3, #1
 800e09c:	6013      	str	r3, [r2, #0]
 800e09e:	f7ff febb 	bl	800de18 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 800e0a2:	4d33      	ldr	r5, [pc, #204]	@ (800e170 <xTaskIncrementTick+0x114>)
BaseType_t xSwitchRequired = pdFALSE;
 800e0a4:	f04f 0b00 	mov.w	fp, #0
 800e0a8:	4e32      	ldr	r6, [pc, #200]	@ (800e174 <xTaskIncrementTick+0x118>)
		if( xConstTickCount >= xNextTaskUnblockTime )
 800e0aa:	682b      	ldr	r3, [r5, #0]
 800e0ac:	4f32      	ldr	r7, [pc, #200]	@ (800e178 <xTaskIncrementTick+0x11c>)
 800e0ae:	429c      	cmp	r4, r3
 800e0b0:	d212      	bcs.n	800e0d8 <xTaskIncrementTick+0x7c>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800e0b2:	683a      	ldr	r2, [r7, #0]
 800e0b4:	2114      	movs	r1, #20
 800e0b6:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800e0b8:	434a      	muls	r2, r1
 800e0ba:	58b2      	ldr	r2, [r6, r2]
				xSwitchRequired = pdTRUE;
 800e0bc:	2a02      	cmp	r2, #2
			if( xYieldPending != pdFALSE )
 800e0be:	4a2f      	ldr	r2, [pc, #188]	@ (800e17c <xTaskIncrementTick+0x120>)
 800e0c0:	6812      	ldr	r2, [r2, #0]
				xSwitchRequired = pdTRUE;
 800e0c2:	bf28      	it	cs
 800e0c4:	f04f 0b01 	movcs.w	fp, #1
				xSwitchRequired = pdTRUE;
 800e0c8:	2a00      	cmp	r2, #0
 800e0ca:	bf18      	it	ne
 800e0cc:	f04f 0b01 	movne.w	fp, #1
}
 800e0d0:	4658      	mov	r0, fp
 800e0d2:	b003      	add	sp, #12
 800e0d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e0d8:	f8df 9088 	ldr.w	r9, [pc, #136]	@ 800e164 <xTaskIncrementTick+0x108>
					prvAddTaskToReadyList( pxTCB );
 800e0dc:	f8df a0a4 	ldr.w	sl, [pc, #164]	@ 800e184 <xTaskIncrementTick+0x128>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e0e0:	f8d9 2000 	ldr.w	r2, [r9]
 800e0e4:	6812      	ldr	r2, [r2, #0]
 800e0e6:	b91a      	cbnz	r2, 800e0f0 <xTaskIncrementTick+0x94>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e0e8:	f04f 32ff 	mov.w	r2, #4294967295
 800e0ec:	602a      	str	r2, [r5, #0]
					break;
 800e0ee:	e7e0      	b.n	800e0b2 <xTaskIncrementTick+0x56>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e0f0:	f8d9 2000 	ldr.w	r2, [r9]
 800e0f4:	68d2      	ldr	r2, [r2, #12]
 800e0f6:	f8d2 800c 	ldr.w	r8, [r2, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800e0fa:	f8d8 1004 	ldr.w	r1, [r8, #4]
					if( xConstTickCount < xItemValue )
 800e0fe:	428c      	cmp	r4, r1
 800e100:	d201      	bcs.n	800e106 <xTaskIncrementTick+0xaa>
						xNextTaskUnblockTime = xItemValue;
 800e102:	6029      	str	r1, [r5, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800e104:	e7d5      	b.n	800e0b2 <xTaskIncrementTick+0x56>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e106:	f108 0304 	add.w	r3, r8, #4
 800e10a:	4618      	mov	r0, r3
 800e10c:	9301      	str	r3, [sp, #4]
 800e10e:	f7fe febf 	bl	800ce90 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800e112:	f8d8 1028 	ldr.w	r1, [r8, #40]	@ 0x28
 800e116:	b119      	cbz	r1, 800e120 <xTaskIncrementTick+0xc4>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e118:	f108 0018 	add.w	r0, r8, #24
 800e11c:	f7fe feb8 	bl	800ce90 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800e120:	f8d8 002c 	ldr.w	r0, [r8, #44]	@ 0x2c
 800e124:	f8da 1000 	ldr.w	r1, [sl]
 800e128:	4288      	cmp	r0, r1
 800e12a:	d901      	bls.n	800e130 <xTaskIncrementTick+0xd4>
 800e12c:	f8ca 0000 	str.w	r0, [sl]
 800e130:	2314      	movs	r3, #20
 800e132:	9901      	ldr	r1, [sp, #4]
 800e134:	fb03 6000 	mla	r0, r3, r0, r6
 800e138:	f7fe fe88 	bl	800ce4c <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e13c:	6838      	ldr	r0, [r7, #0]
 800e13e:	f8d8 102c 	ldr.w	r1, [r8, #44]	@ 0x2c
 800e142:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
							xSwitchRequired = pdTRUE;
 800e144:	4291      	cmp	r1, r2
 800e146:	bf28      	it	cs
 800e148:	f04f 0b01 	movcs.w	fp, #1
 800e14c:	e7c8      	b.n	800e0e0 <xTaskIncrementTick+0x84>
		++xPendedTicks;
 800e14e:	4a0c      	ldr	r2, [pc, #48]	@ (800e180 <xTaskIncrementTick+0x124>)
BaseType_t xSwitchRequired = pdFALSE;
 800e150:	f04f 0b00 	mov.w	fp, #0
		++xPendedTicks;
 800e154:	6813      	ldr	r3, [r2, #0]
 800e156:	3301      	adds	r3, #1
 800e158:	6013      	str	r3, [r2, #0]
 800e15a:	e7b9      	b.n	800e0d0 <xTaskIncrementTick+0x74>
 800e15c:	240287ec 	.word	0x240287ec
 800e160:	2402880c 	.word	0x2402880c
 800e164:	24028858 	.word	0x24028858
 800e168:	24028854 	.word	0x24028854
 800e16c:	240287f8 	.word	0x240287f8
 800e170:	240287f0 	.word	0x240287f0
 800e174:	24028884 	.word	0x24028884
 800e178:	24028ce4 	.word	0x24028ce4
 800e17c:	240287fc 	.word	0x240287fc
 800e180:	24028800 	.word	0x24028800
 800e184:	24028808 	.word	0x24028808

0800e188 <xTaskResumeAll>:
{
 800e188:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	configASSERT( uxSchedulerSuspended );
 800e18c:	4c30      	ldr	r4, [pc, #192]	@ (800e250 <xTaskResumeAll+0xc8>)
 800e18e:	6823      	ldr	r3, [r4, #0]
 800e190:	b943      	cbnz	r3, 800e1a4 <xTaskResumeAll+0x1c>
 800e192:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e196:	f383 8811 	msr	BASEPRI, r3
 800e19a:	f3bf 8f6f 	isb	sy
 800e19e:	f3bf 8f4f 	dsb	sy
 800e1a2:	e7fe      	b.n	800e1a2 <xTaskResumeAll+0x1a>
	taskENTER_CRITICAL();
 800e1a4:	f7fe fee6 	bl	800cf74 <vPortEnterCritical>
		--uxSchedulerSuspended;
 800e1a8:	6823      	ldr	r3, [r4, #0]
 800e1aa:	3b01      	subs	r3, #1
 800e1ac:	6023      	str	r3, [r4, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e1ae:	6824      	ldr	r4, [r4, #0]
 800e1b0:	b12c      	cbz	r4, 800e1be <xTaskResumeAll+0x36>
BaseType_t xAlreadyYielded = pdFALSE;
 800e1b2:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 800e1b4:	f7fe fefe 	bl	800cfb4 <vPortExitCritical>
}
 800e1b8:	4620      	mov	r0, r4
 800e1ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800e1be:	4b25      	ldr	r3, [pc, #148]	@ (800e254 <xTaskResumeAll+0xcc>)
 800e1c0:	681b      	ldr	r3, [r3, #0]
 800e1c2:	2b00      	cmp	r3, #0
 800e1c4:	d0f5      	beq.n	800e1b2 <xTaskResumeAll+0x2a>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800e1c6:	4d24      	ldr	r5, [pc, #144]	@ (800e258 <xTaskResumeAll+0xd0>)
					prvAddTaskToReadyList( pxTCB );
 800e1c8:	4e24      	ldr	r6, [pc, #144]	@ (800e25c <xTaskResumeAll+0xd4>)
 800e1ca:	f8df 80a0 	ldr.w	r8, [pc, #160]	@ 800e26c <xTaskResumeAll+0xe4>
 800e1ce:	e01d      	b.n	800e20c <xTaskResumeAll+0x84>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e1d0:	68eb      	ldr	r3, [r5, #12]
 800e1d2:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e1d4:	1d27      	adds	r7, r4, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e1d6:	f104 0018 	add.w	r0, r4, #24
 800e1da:	f7fe fe59 	bl	800ce90 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e1de:	4638      	mov	r0, r7
 800e1e0:	f7fe fe56 	bl	800ce90 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800e1e4:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800e1e6:	6832      	ldr	r2, [r6, #0]
 800e1e8:	4293      	cmp	r3, r2
 800e1ea:	d900      	bls.n	800e1ee <xTaskResumeAll+0x66>
 800e1ec:	6033      	str	r3, [r6, #0]
 800e1ee:	2014      	movs	r0, #20
 800e1f0:	4639      	mov	r1, r7
 800e1f2:	fb00 8003 	mla	r0, r0, r3, r8
 800e1f6:	f7fe fe29 	bl	800ce4c <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e1fa:	4b19      	ldr	r3, [pc, #100]	@ (800e260 <xTaskResumeAll+0xd8>)
 800e1fc:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800e1fe:	681b      	ldr	r3, [r3, #0]
 800e200:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e202:	429a      	cmp	r2, r3
 800e204:	d302      	bcc.n	800e20c <xTaskResumeAll+0x84>
						xYieldPending = pdTRUE;
 800e206:	4b17      	ldr	r3, [pc, #92]	@ (800e264 <xTaskResumeAll+0xdc>)
 800e208:	2201      	movs	r2, #1
 800e20a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800e20c:	682b      	ldr	r3, [r5, #0]
 800e20e:	2b00      	cmp	r3, #0
 800e210:	d1de      	bne.n	800e1d0 <xTaskResumeAll+0x48>
				if( pxTCB != NULL )
 800e212:	b10c      	cbz	r4, 800e218 <xTaskResumeAll+0x90>
					prvResetNextTaskUnblockTime();
 800e214:	f7ff fe00 	bl	800de18 <prvResetNextTaskUnblockTime>
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800e218:	4d13      	ldr	r5, [pc, #76]	@ (800e268 <xTaskResumeAll+0xe0>)
 800e21a:	682c      	ldr	r4, [r5, #0]
					if( xPendedCounts > ( TickType_t ) 0U )
 800e21c:	b144      	cbz	r4, 800e230 <xTaskResumeAll+0xa8>
								xYieldPending = pdTRUE;
 800e21e:	4e11      	ldr	r6, [pc, #68]	@ (800e264 <xTaskResumeAll+0xdc>)
 800e220:	2701      	movs	r7, #1
							if( xTaskIncrementTick() != pdFALSE )
 800e222:	f7ff ff1b 	bl	800e05c <xTaskIncrementTick>
 800e226:	b100      	cbz	r0, 800e22a <xTaskResumeAll+0xa2>
								xYieldPending = pdTRUE;
 800e228:	6037      	str	r7, [r6, #0]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800e22a:	3c01      	subs	r4, #1
 800e22c:	d1f9      	bne.n	800e222 <xTaskResumeAll+0x9a>
						xPendedTicks = 0;
 800e22e:	602c      	str	r4, [r5, #0]
				if( xYieldPending != pdFALSE )
 800e230:	4b0c      	ldr	r3, [pc, #48]	@ (800e264 <xTaskResumeAll+0xdc>)
 800e232:	681b      	ldr	r3, [r3, #0]
 800e234:	2b00      	cmp	r3, #0
 800e236:	d0bc      	beq.n	800e1b2 <xTaskResumeAll+0x2a>
					taskYIELD_IF_USING_PREEMPTION();
 800e238:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800e23c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e240:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800e244:	f3bf 8f4f 	dsb	sy
 800e248:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 800e24c:	2401      	movs	r4, #1
 800e24e:	e7b1      	b.n	800e1b4 <xTaskResumeAll+0x2c>
 800e250:	240287ec 	.word	0x240287ec
 800e254:	24028810 	.word	0x24028810
 800e258:	24028840 	.word	0x24028840
 800e25c:	24028808 	.word	0x24028808
 800e260:	24028ce4 	.word	0x24028ce4
 800e264:	240287fc 	.word	0x240287fc
 800e268:	24028800 	.word	0x24028800
 800e26c:	24028884 	.word	0x24028884

0800e270 <vTaskSetApplicationTaskTag>:
	{
 800e270:	b538      	push	{r3, r4, r5, lr}
 800e272:	460d      	mov	r5, r1
		if( xTask == NULL )
 800e274:	4604      	mov	r4, r0
 800e276:	b908      	cbnz	r0, 800e27c <vTaskSetApplicationTaskTag+0xc>
			xTCB = ( TCB_t * ) pxCurrentTCB;
 800e278:	4b04      	ldr	r3, [pc, #16]	@ (800e28c <vTaskSetApplicationTaskTag+0x1c>)
 800e27a:	681c      	ldr	r4, [r3, #0]
		taskENTER_CRITICAL();
 800e27c:	f7fe fe7a 	bl	800cf74 <vPortEnterCritical>
			xTCB->pxTaskTag = pxHookFunction;
 800e280:	6565      	str	r5, [r4, #84]	@ 0x54
	}
 800e282:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		taskEXIT_CRITICAL();
 800e286:	f7fe be95 	b.w	800cfb4 <vPortExitCritical>
 800e28a:	bf00      	nop
 800e28c:	24028ce4 	.word	0x24028ce4

0800e290 <xTaskCallApplicationTaskHook>:
	{
 800e290:	4603      	mov	r3, r0
 800e292:	4608      	mov	r0, r1
		if( xTask == NULL )
 800e294:	b90b      	cbnz	r3, 800e29a <xTaskCallApplicationTaskHook+0xa>
			xTCB = pxCurrentTCB;
 800e296:	4b03      	ldr	r3, [pc, #12]	@ (800e2a4 <xTaskCallApplicationTaskHook+0x14>)
 800e298:	681b      	ldr	r3, [r3, #0]
		if( xTCB->pxTaskTag != NULL )
 800e29a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e29c:	b103      	cbz	r3, 800e2a0 <xTaskCallApplicationTaskHook+0x10>
			xReturn = xTCB->pxTaskTag( pvParameter );
 800e29e:	4718      	bx	r3
	}
 800e2a0:	4618      	mov	r0, r3
 800e2a2:	4770      	bx	lr
 800e2a4:	24028ce4 	.word	0x24028ce4

0800e2a8 <vTaskStartScheduler>:
{
 800e2a8:	b510      	push	{r4, lr}
 800e2aa:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800e2ac:	2400      	movs	r4, #0
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800e2ae:	aa07      	add	r2, sp, #28
 800e2b0:	a906      	add	r1, sp, #24
 800e2b2:	a805      	add	r0, sp, #20
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800e2b4:	e9cd 4405 	strd	r4, r4, [sp, #20]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800e2b8:	f7fe fca6 	bl	800cc08 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800e2bc:	9b05      	ldr	r3, [sp, #20]
 800e2be:	9a07      	ldr	r2, [sp, #28]
 800e2c0:	9302      	str	r3, [sp, #8]
 800e2c2:	9b06      	ldr	r3, [sp, #24]
 800e2c4:	4919      	ldr	r1, [pc, #100]	@ (800e32c <vTaskStartScheduler+0x84>)
 800e2c6:	481a      	ldr	r0, [pc, #104]	@ (800e330 <vTaskStartScheduler+0x88>)
 800e2c8:	e9cd 4300 	strd	r4, r3, [sp]
 800e2cc:	4623      	mov	r3, r4
 800e2ce:	f7ff fe50 	bl	800df72 <xTaskCreateStatic>
		if( xIdleTaskHandle != NULL )
 800e2d2:	b340      	cbz	r0, 800e326 <vTaskStartScheduler+0x7e>
			xReturn = xTimerCreateTimerTask();
 800e2d4:	f000 fa84 	bl	800e7e0 <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
 800e2d8:	2801      	cmp	r0, #1
 800e2da:	d119      	bne.n	800e310 <vTaskStartScheduler+0x68>
 800e2dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e2e0:	f383 8811 	msr	BASEPRI, r3
 800e2e4:	f3bf 8f6f 	isb	sy
 800e2e8:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
 800e2ec:	f04f 32ff 	mov.w	r2, #4294967295
 800e2f0:	4b10      	ldr	r3, [pc, #64]	@ (800e334 <vTaskStartScheduler+0x8c>)
		traceTASK_SWITCHED_IN();
 800e2f2:	4621      	mov	r1, r4
		xNextTaskUnblockTime = portMAX_DELAY;
 800e2f4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800e2f6:	4b10      	ldr	r3, [pc, #64]	@ (800e338 <vTaskStartScheduler+0x90>)
 800e2f8:	6018      	str	r0, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800e2fa:	4b10      	ldr	r3, [pc, #64]	@ (800e33c <vTaskStartScheduler+0x94>)
 800e2fc:	601c      	str	r4, [r3, #0]
		traceTASK_SWITCHED_IN();
 800e2fe:	4b10      	ldr	r3, [pc, #64]	@ (800e340 <vTaskStartScheduler+0x98>)
 800e300:	6818      	ldr	r0, [r3, #0]
 800e302:	f7ff ffc5 	bl	800e290 <xTaskCallApplicationTaskHook>
}
 800e306:	b008      	add	sp, #32
 800e308:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		if( xPortStartScheduler() != pdFALSE )
 800e30c:	f7fe bec2 	b.w	800d094 <xPortStartScheduler>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800e310:	3001      	adds	r0, #1
 800e312:	d108      	bne.n	800e326 <vTaskStartScheduler+0x7e>
 800e314:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e318:	f383 8811 	msr	BASEPRI, r3
 800e31c:	f3bf 8f6f 	isb	sy
 800e320:	f3bf 8f4f 	dsb	sy
 800e324:	e7fe      	b.n	800e324 <vTaskStartScheduler+0x7c>
}
 800e326:	b008      	add	sp, #32
 800e328:	bd10      	pop	{r4, pc}
 800e32a:	bf00      	nop
 800e32c:	0802b84c 	.word	0x0802b84c
 800e330:	0800de75 	.word	0x0800de75
 800e334:	240287f0 	.word	0x240287f0
 800e338:	24028804 	.word	0x24028804
 800e33c:	2402880c 	.word	0x2402880c
 800e340:	24028ce4 	.word	0x24028ce4

0800e344 <vTaskSwitchContext>:
{
 800e344:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800e346:	4b1c      	ldr	r3, [pc, #112]	@ (800e3b8 <vTaskSwitchContext+0x74>)
 800e348:	681a      	ldr	r2, [r3, #0]
 800e34a:	4b1c      	ldr	r3, [pc, #112]	@ (800e3bc <vTaskSwitchContext+0x78>)
 800e34c:	b112      	cbz	r2, 800e354 <vTaskSwitchContext+0x10>
		xYieldPending = pdTRUE;
 800e34e:	2201      	movs	r2, #1
 800e350:	601a      	str	r2, [r3, #0]
}
 800e352:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		traceTASK_SWITCHED_OUT();
 800e354:	4c1a      	ldr	r4, [pc, #104]	@ (800e3c0 <vTaskSwitchContext+0x7c>)
 800e356:	2101      	movs	r1, #1
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e358:	4e1a      	ldr	r6, [pc, #104]	@ (800e3c4 <vTaskSwitchContext+0x80>)
 800e35a:	2714      	movs	r7, #20
		xYieldPending = pdFALSE;
 800e35c:	601a      	str	r2, [r3, #0]
		traceTASK_SWITCHED_OUT();
 800e35e:	6820      	ldr	r0, [r4, #0]
 800e360:	f7ff ff96 	bl	800e290 <xTaskCallApplicationTaskHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e364:	6832      	ldr	r2, [r6, #0]
 800e366:	4918      	ldr	r1, [pc, #96]	@ (800e3c8 <vTaskSwitchContext+0x84>)
 800e368:	fb07 f302 	mul.w	r3, r7, r2
 800e36c:	58cd      	ldr	r5, [r1, r3]
 800e36e:	18c8      	adds	r0, r1, r3
 800e370:	b1ad      	cbz	r5, 800e39e <vTaskSwitchContext+0x5a>
 800e372:	6845      	ldr	r5, [r0, #4]
 800e374:	3308      	adds	r3, #8
 800e376:	686d      	ldr	r5, [r5, #4]
 800e378:	440b      	add	r3, r1
 800e37a:	429d      	cmp	r5, r3
 800e37c:	6045      	str	r5, [r0, #4]
 800e37e:	bf04      	itt	eq
 800e380:	686b      	ldreq	r3, [r5, #4]
 800e382:	6043      	streq	r3, [r0, #4]
 800e384:	2314      	movs	r3, #20
 800e386:	fb03 1102 	mla	r1, r3, r2, r1
 800e38a:	684b      	ldr	r3, [r1, #4]
		traceTASK_SWITCHED_IN();
 800e38c:	2100      	movs	r1, #0
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e38e:	68db      	ldr	r3, [r3, #12]
 800e390:	6023      	str	r3, [r4, #0]
 800e392:	6032      	str	r2, [r6, #0]
		traceTASK_SWITCHED_IN();
 800e394:	6820      	ldr	r0, [r4, #0]
}
 800e396:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		traceTASK_SWITCHED_IN();
 800e39a:	f7ff bf79 	b.w	800e290 <xTaskCallApplicationTaskHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e39e:	b942      	cbnz	r2, 800e3b2 <vTaskSwitchContext+0x6e>
 800e3a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e3a4:	f383 8811 	msr	BASEPRI, r3
 800e3a8:	f3bf 8f6f 	isb	sy
 800e3ac:	f3bf 8f4f 	dsb	sy
 800e3b0:	e7fe      	b.n	800e3b0 <vTaskSwitchContext+0x6c>
 800e3b2:	3a01      	subs	r2, #1
 800e3b4:	e7d8      	b.n	800e368 <vTaskSwitchContext+0x24>
 800e3b6:	bf00      	nop
 800e3b8:	240287ec 	.word	0x240287ec
 800e3bc:	240287fc 	.word	0x240287fc
 800e3c0:	24028ce4 	.word	0x24028ce4
 800e3c4:	24028808 	.word	0x24028808
 800e3c8:	24028884 	.word	0x24028884

0800e3cc <vTaskPlaceOnEventList>:
{
 800e3cc:	b510      	push	{r4, lr}
 800e3ce:	460c      	mov	r4, r1
	configASSERT( pxEventList );
 800e3d0:	b940      	cbnz	r0, 800e3e4 <vTaskPlaceOnEventList+0x18>
 800e3d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e3d6:	f383 8811 	msr	BASEPRI, r3
 800e3da:	f3bf 8f6f 	isb	sy
 800e3de:	f3bf 8f4f 	dsb	sy
 800e3e2:	e7fe      	b.n	800e3e2 <vTaskPlaceOnEventList+0x16>
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e3e4:	4b05      	ldr	r3, [pc, #20]	@ (800e3fc <vTaskPlaceOnEventList+0x30>)
 800e3e6:	6819      	ldr	r1, [r3, #0]
 800e3e8:	3118      	adds	r1, #24
 800e3ea:	f7fe fd3a 	bl	800ce62 <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800e3ee:	4620      	mov	r0, r4
 800e3f0:	2101      	movs	r1, #1
}
 800e3f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800e3f6:	f7ff bcd7 	b.w	800dda8 <prvAddCurrentTaskToDelayedList>
 800e3fa:	bf00      	nop
 800e3fc:	24028ce4 	.word	0x24028ce4

0800e400 <vTaskPlaceOnEventListRestricted>:
	{
 800e400:	b538      	push	{r3, r4, r5, lr}
 800e402:	460d      	mov	r5, r1
 800e404:	4614      	mov	r4, r2
		configASSERT( pxEventList );
 800e406:	b940      	cbnz	r0, 800e41a <vTaskPlaceOnEventListRestricted+0x1a>
 800e408:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e40c:	f383 8811 	msr	BASEPRI, r3
 800e410:	f3bf 8f6f 	isb	sy
 800e414:	f3bf 8f4f 	dsb	sy
 800e418:	e7fe      	b.n	800e418 <vTaskPlaceOnEventListRestricted+0x18>
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e41a:	4b07      	ldr	r3, [pc, #28]	@ (800e438 <vTaskPlaceOnEventListRestricted+0x38>)
 800e41c:	6819      	ldr	r1, [r3, #0]
 800e41e:	3118      	adds	r1, #24
 800e420:	f7fe fd14 	bl	800ce4c <vListInsertEnd>
			xTicksToWait = portMAX_DELAY;
 800e424:	2c00      	cmp	r4, #0
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800e426:	4621      	mov	r1, r4
 800e428:	bf0c      	ite	eq
 800e42a:	4628      	moveq	r0, r5
 800e42c:	f04f 30ff 	movne.w	r0, #4294967295
	}
 800e430:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800e434:	f7ff bcb8 	b.w	800dda8 <prvAddCurrentTaskToDelayedList>
 800e438:	24028ce4 	.word	0x24028ce4

0800e43c <xTaskRemoveFromEventList>:
{
 800e43c:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e43e:	68c3      	ldr	r3, [r0, #12]
 800e440:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 800e442:	b944      	cbnz	r4, 800e456 <xTaskRemoveFromEventList+0x1a>
 800e444:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e448:	f383 8811 	msr	BASEPRI, r3
 800e44c:	f3bf 8f6f 	isb	sy
 800e450:	f3bf 8f4f 	dsb	sy
 800e454:	e7fe      	b.n	800e454 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800e456:	f104 0518 	add.w	r5, r4, #24
 800e45a:	4628      	mov	r0, r5
 800e45c:	f7fe fd18 	bl	800ce90 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e460:	4b11      	ldr	r3, [pc, #68]	@ (800e4a8 <xTaskRemoveFromEventList+0x6c>)
 800e462:	681b      	ldr	r3, [r3, #0]
 800e464:	b9d3      	cbnz	r3, 800e49c <xTaskRemoveFromEventList+0x60>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800e466:	1d25      	adds	r5, r4, #4
 800e468:	4628      	mov	r0, r5
 800e46a:	f7fe fd11 	bl	800ce90 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800e46e:	4a0f      	ldr	r2, [pc, #60]	@ (800e4ac <xTaskRemoveFromEventList+0x70>)
 800e470:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800e472:	6811      	ldr	r1, [r2, #0]
 800e474:	428b      	cmp	r3, r1
 800e476:	d900      	bls.n	800e47a <xTaskRemoveFromEventList+0x3e>
 800e478:	6013      	str	r3, [r2, #0]
 800e47a:	2014      	movs	r0, #20
 800e47c:	4a0c      	ldr	r2, [pc, #48]	@ (800e4b0 <xTaskRemoveFromEventList+0x74>)
 800e47e:	4629      	mov	r1, r5
 800e480:	fb00 2003 	mla	r0, r0, r3, r2
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800e484:	f7fe fce2 	bl	800ce4c <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800e488:	4b0a      	ldr	r3, [pc, #40]	@ (800e4b4 <xTaskRemoveFromEventList+0x78>)
 800e48a:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800e48c:	681b      	ldr	r3, [r3, #0]
 800e48e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e490:	429a      	cmp	r2, r3
 800e492:	d906      	bls.n	800e4a2 <xTaskRemoveFromEventList+0x66>
		xYieldPending = pdTRUE;
 800e494:	2001      	movs	r0, #1
 800e496:	4b08      	ldr	r3, [pc, #32]	@ (800e4b8 <xTaskRemoveFromEventList+0x7c>)
 800e498:	6018      	str	r0, [r3, #0]
}
 800e49a:	bd38      	pop	{r3, r4, r5, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800e49c:	4629      	mov	r1, r5
 800e49e:	4807      	ldr	r0, [pc, #28]	@ (800e4bc <xTaskRemoveFromEventList+0x80>)
 800e4a0:	e7f0      	b.n	800e484 <xTaskRemoveFromEventList+0x48>
		xReturn = pdFALSE;
 800e4a2:	2000      	movs	r0, #0
	return xReturn;
 800e4a4:	e7f9      	b.n	800e49a <xTaskRemoveFromEventList+0x5e>
 800e4a6:	bf00      	nop
 800e4a8:	240287ec 	.word	0x240287ec
 800e4ac:	24028808 	.word	0x24028808
 800e4b0:	24028884 	.word	0x24028884
 800e4b4:	24028ce4 	.word	0x24028ce4
 800e4b8:	240287fc 	.word	0x240287fc
 800e4bc:	24028840 	.word	0x24028840

0800e4c0 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800e4c0:	4b03      	ldr	r3, [pc, #12]	@ (800e4d0 <vTaskInternalSetTimeOutState+0x10>)
 800e4c2:	681b      	ldr	r3, [r3, #0]
 800e4c4:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800e4c6:	4b03      	ldr	r3, [pc, #12]	@ (800e4d4 <vTaskInternalSetTimeOutState+0x14>)
 800e4c8:	681b      	ldr	r3, [r3, #0]
 800e4ca:	6043      	str	r3, [r0, #4]
}
 800e4cc:	4770      	bx	lr
 800e4ce:	bf00      	nop
 800e4d0:	240287f8 	.word	0x240287f8
 800e4d4:	2402880c 	.word	0x2402880c

0800e4d8 <xTaskCheckForTimeOut>:
{
 800e4d8:	b570      	push	{r4, r5, r6, lr}
 800e4da:	460c      	mov	r4, r1
	configASSERT( pxTimeOut );
 800e4dc:	4605      	mov	r5, r0
 800e4de:	b940      	cbnz	r0, 800e4f2 <xTaskCheckForTimeOut+0x1a>
 800e4e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e4e4:	f383 8811 	msr	BASEPRI, r3
 800e4e8:	f3bf 8f6f 	isb	sy
 800e4ec:	f3bf 8f4f 	dsb	sy
 800e4f0:	e7fe      	b.n	800e4f0 <xTaskCheckForTimeOut+0x18>
	configASSERT( pxTicksToWait );
 800e4f2:	b941      	cbnz	r1, 800e506 <xTaskCheckForTimeOut+0x2e>
 800e4f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e4f8:	f383 8811 	msr	BASEPRI, r3
 800e4fc:	f3bf 8f6f 	isb	sy
 800e500:	f3bf 8f4f 	dsb	sy
 800e504:	e7fe      	b.n	800e504 <xTaskCheckForTimeOut+0x2c>
	taskENTER_CRITICAL();
 800e506:	f7fe fd35 	bl	800cf74 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 800e50a:	4b0f      	ldr	r3, [pc, #60]	@ (800e548 <xTaskCheckForTimeOut+0x70>)
 800e50c:	6819      	ldr	r1, [r3, #0]
			if( *pxTicksToWait == portMAX_DELAY )
 800e50e:	6823      	ldr	r3, [r4, #0]
 800e510:	1c5a      	adds	r2, r3, #1
 800e512:	d010      	beq.n	800e536 <xTaskCheckForTimeOut+0x5e>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800e514:	480d      	ldr	r0, [pc, #52]	@ (800e54c <xTaskCheckForTimeOut+0x74>)
 800e516:	682e      	ldr	r6, [r5, #0]
 800e518:	6800      	ldr	r0, [r0, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800e51a:	686a      	ldr	r2, [r5, #4]
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800e51c:	4286      	cmp	r6, r0
 800e51e:	d001      	beq.n	800e524 <xTaskCheckForTimeOut+0x4c>
 800e520:	428a      	cmp	r2, r1
 800e522:	d90f      	bls.n	800e544 <xTaskCheckForTimeOut+0x6c>
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800e524:	1a88      	subs	r0, r1, r2
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800e526:	4283      	cmp	r3, r0
 800e528:	d90a      	bls.n	800e540 <xTaskCheckForTimeOut+0x68>
			*pxTicksToWait -= xElapsedTime;
 800e52a:	1a5b      	subs	r3, r3, r1
			vTaskInternalSetTimeOutState( pxTimeOut );
 800e52c:	4628      	mov	r0, r5
			*pxTicksToWait -= xElapsedTime;
 800e52e:	4413      	add	r3, r2
 800e530:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800e532:	f7ff ffc5 	bl	800e4c0 <vTaskInternalSetTimeOutState>
				xReturn = pdFALSE;
 800e536:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 800e538:	f7fe fd3c 	bl	800cfb4 <vPortExitCritical>
}
 800e53c:	4620      	mov	r0, r4
 800e53e:	bd70      	pop	{r4, r5, r6, pc}
			*pxTicksToWait = 0;
 800e540:	2300      	movs	r3, #0
 800e542:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
 800e544:	2401      	movs	r4, #1
 800e546:	e7f7      	b.n	800e538 <xTaskCheckForTimeOut+0x60>
 800e548:	2402880c 	.word	0x2402880c
 800e54c:	240287f8 	.word	0x240287f8

0800e550 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 800e550:	4b01      	ldr	r3, [pc, #4]	@ (800e558 <vTaskMissedYield+0x8>)
 800e552:	2201      	movs	r2, #1
 800e554:	601a      	str	r2, [r3, #0]
}
 800e556:	4770      	bx	lr
 800e558:	240287fc 	.word	0x240287fc

0800e55c <xTaskGetCurrentTaskHandle>:
		xReturn = pxCurrentTCB;
 800e55c:	4b01      	ldr	r3, [pc, #4]	@ (800e564 <xTaskGetCurrentTaskHandle+0x8>)
 800e55e:	6818      	ldr	r0, [r3, #0]
	}
 800e560:	4770      	bx	lr
 800e562:	bf00      	nop
 800e564:	24028ce4 	.word	0x24028ce4

0800e568 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 800e568:	4b05      	ldr	r3, [pc, #20]	@ (800e580 <xTaskGetSchedulerState+0x18>)
 800e56a:	681b      	ldr	r3, [r3, #0]
 800e56c:	b133      	cbz	r3, 800e57c <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e56e:	4b05      	ldr	r3, [pc, #20]	@ (800e584 <xTaskGetSchedulerState+0x1c>)
 800e570:	6818      	ldr	r0, [r3, #0]
 800e572:	fab0 f080 	clz	r0, r0
 800e576:	0940      	lsrs	r0, r0, #5
 800e578:	0040      	lsls	r0, r0, #1
 800e57a:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 800e57c:	2001      	movs	r0, #1
	}
 800e57e:	4770      	bx	lr
 800e580:	24028804 	.word	0x24028804
 800e584:	240287ec 	.word	0x240287ec

0800e588 <xTaskPriorityInherit>:
	{
 800e588:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		if( pxMutexHolder != NULL )
 800e58a:	4604      	mov	r4, r0
 800e58c:	b338      	cbz	r0, 800e5de <xTaskPriorityInherit+0x56>
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800e58e:	4d1a      	ldr	r5, [pc, #104]	@ (800e5f8 <xTaskPriorityInherit+0x70>)
 800e590:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 800e592:	682a      	ldr	r2, [r5, #0]
 800e594:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800e596:	4293      	cmp	r3, r2
 800e598:	d226      	bcs.n	800e5e8 <xTaskPriorityInherit+0x60>
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800e59a:	6982      	ldr	r2, [r0, #24]
 800e59c:	2a00      	cmp	r2, #0
 800e59e:	db04      	blt.n	800e5aa <xTaskPriorityInherit+0x22>
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e5a0:	682a      	ldr	r2, [r5, #0]
 800e5a2:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800e5a4:	f1c2 0238 	rsb	r2, r2, #56	@ 0x38
 800e5a8:	6182      	str	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800e5aa:	2214      	movs	r2, #20
 800e5ac:	4e13      	ldr	r6, [pc, #76]	@ (800e5fc <xTaskPriorityInherit+0x74>)
 800e5ae:	fb02 6303 	mla	r3, r2, r3, r6
 800e5b2:	6962      	ldr	r2, [r4, #20]
 800e5b4:	429a      	cmp	r2, r3
 800e5b6:	d113      	bne.n	800e5e0 <xTaskPriorityInherit+0x58>
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e5b8:	1d27      	adds	r7, r4, #4
 800e5ba:	4638      	mov	r0, r7
 800e5bc:	f7fe fc68 	bl	800ce90 <uxListRemove>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800e5c0:	682b      	ldr	r3, [r5, #0]
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800e5c2:	4a0f      	ldr	r2, [pc, #60]	@ (800e600 <xTaskPriorityInherit+0x78>)
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800e5c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800e5c6:	6811      	ldr	r1, [r2, #0]
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800e5c8:	62e3      	str	r3, [r4, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800e5ca:	428b      	cmp	r3, r1
 800e5cc:	d900      	bls.n	800e5d0 <xTaskPriorityInherit+0x48>
 800e5ce:	6013      	str	r3, [r2, #0]
 800e5d0:	2014      	movs	r0, #20
 800e5d2:	4639      	mov	r1, r7
 800e5d4:	fb00 6003 	mla	r0, r0, r3, r6
 800e5d8:	f7fe fc38 	bl	800ce4c <vListInsertEnd>
				xReturn = pdTRUE;
 800e5dc:	2001      	movs	r0, #1
	}
 800e5de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800e5e0:	682b      	ldr	r3, [r5, #0]
 800e5e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e5e4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800e5e6:	e7f9      	b.n	800e5dc <xTaskPriorityInherit+0x54>
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800e5e8:	682b      	ldr	r3, [r5, #0]
 800e5ea:	6cc0      	ldr	r0, [r0, #76]	@ 0x4c
 800e5ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e5ee:	4298      	cmp	r0, r3
 800e5f0:	bf2c      	ite	cs
 800e5f2:	2000      	movcs	r0, #0
 800e5f4:	2001      	movcc	r0, #1
 800e5f6:	e7f2      	b.n	800e5de <xTaskPriorityInherit+0x56>
 800e5f8:	24028ce4 	.word	0x24028ce4
 800e5fc:	24028884 	.word	0x24028884
 800e600:	24028808 	.word	0x24028808

0800e604 <xTaskPriorityDisinherit>:
	{
 800e604:	b538      	push	{r3, r4, r5, lr}
		if( pxMutexHolder != NULL )
 800e606:	b908      	cbnz	r0, 800e60c <xTaskPriorityDisinherit+0x8>
	BaseType_t xReturn = pdFALSE;
 800e608:	2000      	movs	r0, #0
	}
 800e60a:	bd38      	pop	{r3, r4, r5, pc}
			configASSERT( pxTCB == pxCurrentTCB );
 800e60c:	4b1b      	ldr	r3, [pc, #108]	@ (800e67c <xTaskPriorityDisinherit+0x78>)
 800e60e:	681c      	ldr	r4, [r3, #0]
 800e610:	4284      	cmp	r4, r0
 800e612:	d008      	beq.n	800e626 <xTaskPriorityDisinherit+0x22>
 800e614:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e618:	f383 8811 	msr	BASEPRI, r3
 800e61c:	f3bf 8f6f 	isb	sy
 800e620:	f3bf 8f4f 	dsb	sy
 800e624:	e7fe      	b.n	800e624 <xTaskPriorityDisinherit+0x20>
			configASSERT( pxTCB->uxMutexesHeld );
 800e626:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 800e628:	b943      	cbnz	r3, 800e63c <xTaskPriorityDisinherit+0x38>
 800e62a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e62e:	f383 8811 	msr	BASEPRI, r3
 800e632:	f3bf 8f6f 	isb	sy
 800e636:	f3bf 8f4f 	dsb	sy
 800e63a:	e7fe      	b.n	800e63a <xTaskPriorityDisinherit+0x36>
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800e63c:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
			( pxTCB->uxMutexesHeld )--;
 800e63e:	3b01      	subs	r3, #1
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800e640:	6ce2      	ldr	r2, [r4, #76]	@ 0x4c
			( pxTCB->uxMutexesHeld )--;
 800e642:	6523      	str	r3, [r4, #80]	@ 0x50
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800e644:	4291      	cmp	r1, r2
 800e646:	d0df      	beq.n	800e608 <xTaskPriorityDisinherit+0x4>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800e648:	2b00      	cmp	r3, #0
 800e64a:	d1dd      	bne.n	800e608 <xTaskPriorityDisinherit+0x4>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e64c:	1d25      	adds	r5, r4, #4
 800e64e:	4628      	mov	r0, r5
 800e650:	f7fe fc1e 	bl	800ce90 <uxListRemove>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800e654:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e656:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800e65a:	62e3      	str	r3, [r4, #44]	@ 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e65c:	61a2      	str	r2, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 800e65e:	4a08      	ldr	r2, [pc, #32]	@ (800e680 <xTaskPriorityDisinherit+0x7c>)
 800e660:	6811      	ldr	r1, [r2, #0]
 800e662:	428b      	cmp	r3, r1
 800e664:	d900      	bls.n	800e668 <xTaskPriorityDisinherit+0x64>
 800e666:	6013      	str	r3, [r2, #0]
 800e668:	4a06      	ldr	r2, [pc, #24]	@ (800e684 <xTaskPriorityDisinherit+0x80>)
 800e66a:	2014      	movs	r0, #20
 800e66c:	4629      	mov	r1, r5
 800e66e:	fb00 2003 	mla	r0, r0, r3, r2
 800e672:	f7fe fbeb 	bl	800ce4c <vListInsertEnd>
					xReturn = pdTRUE;
 800e676:	2001      	movs	r0, #1
		return xReturn;
 800e678:	e7c7      	b.n	800e60a <xTaskPriorityDisinherit+0x6>
 800e67a:	bf00      	nop
 800e67c:	24028ce4 	.word	0x24028ce4
 800e680:	24028808 	.word	0x24028808
 800e684:	24028884 	.word	0x24028884

0800e688 <vTaskPriorityDisinheritAfterTimeout>:
	{
 800e688:	b570      	push	{r4, r5, r6, lr}
		if( pxMutexHolder != NULL )
 800e68a:	4604      	mov	r4, r0
 800e68c:	2800      	cmp	r0, #0
 800e68e:	d042      	beq.n	800e716 <vTaskPriorityDisinheritAfterTimeout+0x8e>
			configASSERT( pxTCB->uxMutexesHeld );
 800e690:	6d02      	ldr	r2, [r0, #80]	@ 0x50
 800e692:	b942      	cbnz	r2, 800e6a6 <vTaskPriorityDisinheritAfterTimeout+0x1e>
 800e694:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e698:	f383 8811 	msr	BASEPRI, r3
 800e69c:	f3bf 8f6f 	isb	sy
 800e6a0:	f3bf 8f4f 	dsb	sy
 800e6a4:	e7fe      	b.n	800e6a4 <vTaskPriorityDisinheritAfterTimeout+0x1c>
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800e6a6:	6cc3      	ldr	r3, [r0, #76]	@ 0x4c
 800e6a8:	4299      	cmp	r1, r3
 800e6aa:	bf38      	it	cc
 800e6ac:	4619      	movcc	r1, r3
			if( pxTCB->uxPriority != uxPriorityToUse )
 800e6ae:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 800e6b0:	428b      	cmp	r3, r1
 800e6b2:	d030      	beq.n	800e716 <vTaskPriorityDisinheritAfterTimeout+0x8e>
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800e6b4:	2a01      	cmp	r2, #1
 800e6b6:	d12e      	bne.n	800e716 <vTaskPriorityDisinheritAfterTimeout+0x8e>
					configASSERT( pxTCB != pxCurrentTCB );
 800e6b8:	4a17      	ldr	r2, [pc, #92]	@ (800e718 <vTaskPriorityDisinheritAfterTimeout+0x90>)
 800e6ba:	6812      	ldr	r2, [r2, #0]
 800e6bc:	4282      	cmp	r2, r0
 800e6be:	d108      	bne.n	800e6d2 <vTaskPriorityDisinheritAfterTimeout+0x4a>
 800e6c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e6c4:	f383 8811 	msr	BASEPRI, r3
 800e6c8:	f3bf 8f6f 	isb	sy
 800e6cc:	f3bf 8f4f 	dsb	sy
 800e6d0:	e7fe      	b.n	800e6d0 <vTaskPriorityDisinheritAfterTimeout+0x48>
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800e6d2:	6982      	ldr	r2, [r0, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800e6d4:	4d11      	ldr	r5, [pc, #68]	@ (800e71c <vTaskPriorityDisinheritAfterTimeout+0x94>)
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800e6d6:	2a00      	cmp	r2, #0
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800e6d8:	f04f 0214 	mov.w	r2, #20
					pxTCB->uxPriority = uxPriorityToUse;
 800e6dc:	62c1      	str	r1, [r0, #44]	@ 0x2c
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800e6de:	fb02 5303 	mla	r3, r2, r3, r5
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e6e2:	bfa8      	it	ge
 800e6e4:	f1c1 0138 	rsbge	r1, r1, #56	@ 0x38
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800e6e8:	6942      	ldr	r2, [r0, #20]
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e6ea:	bfa8      	it	ge
 800e6ec:	6181      	strge	r1, [r0, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800e6ee:	429a      	cmp	r2, r3
 800e6f0:	d111      	bne.n	800e716 <vTaskPriorityDisinheritAfterTimeout+0x8e>
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e6f2:	1d06      	adds	r6, r0, #4
 800e6f4:	4630      	mov	r0, r6
 800e6f6:	f7fe fbcb 	bl	800ce90 <uxListRemove>
						prvAddTaskToReadyList( pxTCB );
 800e6fa:	4a09      	ldr	r2, [pc, #36]	@ (800e720 <vTaskPriorityDisinheritAfterTimeout+0x98>)
 800e6fc:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800e6fe:	6811      	ldr	r1, [r2, #0]
 800e700:	428b      	cmp	r3, r1
 800e702:	d900      	bls.n	800e706 <vTaskPriorityDisinheritAfterTimeout+0x7e>
 800e704:	6013      	str	r3, [r2, #0]
 800e706:	2014      	movs	r0, #20
 800e708:	4631      	mov	r1, r6
 800e70a:	fb00 5003 	mla	r0, r0, r3, r5
	}
 800e70e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
						prvAddTaskToReadyList( pxTCB );
 800e712:	f7fe bb9b 	b.w	800ce4c <vListInsertEnd>
	}
 800e716:	bd70      	pop	{r4, r5, r6, pc}
 800e718:	24028ce4 	.word	0x24028ce4
 800e71c:	24028884 	.word	0x24028884
 800e720:	24028808 	.word	0x24028808

0800e724 <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
 800e724:	4b04      	ldr	r3, [pc, #16]	@ (800e738 <pvTaskIncrementMutexHeldCount+0x14>)
 800e726:	681a      	ldr	r2, [r3, #0]
 800e728:	b11a      	cbz	r2, 800e732 <pvTaskIncrementMutexHeldCount+0xe>
			( pxCurrentTCB->uxMutexesHeld )++;
 800e72a:	6819      	ldr	r1, [r3, #0]
 800e72c:	6d0a      	ldr	r2, [r1, #80]	@ 0x50
 800e72e:	3201      	adds	r2, #1
 800e730:	650a      	str	r2, [r1, #80]	@ 0x50
		return pxCurrentTCB;
 800e732:	6818      	ldr	r0, [r3, #0]
	}
 800e734:	4770      	bx	lr
 800e736:	bf00      	nop
 800e738:	24028ce4 	.word	0x24028ce4

0800e73c <prvInsertTimerInActiveList>:
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );

	if( xNextExpiryTime <= xTimeNow )
 800e73c:	4291      	cmp	r1, r2
{
 800e73e:	b508      	push	{r3, lr}
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800e740:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800e742:	6100      	str	r0, [r0, #16]
	if( xNextExpiryTime <= xTimeNow )
 800e744:	d80a      	bhi.n	800e75c <prvInsertTimerInActiveList+0x20>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e746:	1ad2      	subs	r2, r2, r3
 800e748:	6983      	ldr	r3, [r0, #24]
 800e74a:	429a      	cmp	r2, r3
 800e74c:	d20d      	bcs.n	800e76a <prvInsertTimerInActiveList+0x2e>
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800e74e:	1d01      	adds	r1, r0, #4
 800e750:	4b07      	ldr	r3, [pc, #28]	@ (800e770 <prvInsertTimerInActiveList+0x34>)
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800e752:	6818      	ldr	r0, [r3, #0]
 800e754:	f7fe fb85 	bl	800ce62 <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 800e758:	2000      	movs	r0, #0
		}
	}

	return xProcessTimerNow;
}
 800e75a:	bd08      	pop	{r3, pc}
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800e75c:	429a      	cmp	r2, r3
 800e75e:	d201      	bcs.n	800e764 <prvInsertTimerInActiveList+0x28>
 800e760:	4299      	cmp	r1, r3
 800e762:	d202      	bcs.n	800e76a <prvInsertTimerInActiveList+0x2e>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800e764:	1d01      	adds	r1, r0, #4
 800e766:	4b03      	ldr	r3, [pc, #12]	@ (800e774 <prvInsertTimerInActiveList+0x38>)
 800e768:	e7f3      	b.n	800e752 <prvInsertTimerInActiveList+0x16>
			xProcessTimerNow = pdTRUE;
 800e76a:	2001      	movs	r0, #1
	return xProcessTimerNow;
 800e76c:	e7f5      	b.n	800e75a <prvInsertTimerInActiveList+0x1e>
 800e76e:	bf00      	nop
 800e770:	24028de4 	.word	0x24028de4
 800e774:	24028de8 	.word	0x24028de8

0800e778 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800e778:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
	{
		if( xTimerQueue == NULL )
 800e77a:	4c11      	ldr	r4, [pc, #68]	@ (800e7c0 <prvCheckForValidListAndQueue+0x48>)
	taskENTER_CRITICAL();
 800e77c:	f7fe fbfa 	bl	800cf74 <vPortEnterCritical>
		if( xTimerQueue == NULL )
 800e780:	6825      	ldr	r5, [r4, #0]
 800e782:	b9bd      	cbnz	r5, 800e7b4 <prvCheckForValidListAndQueue+0x3c>
		{
			vListInitialise( &xActiveTimerList1 );
 800e784:	4f0f      	ldr	r7, [pc, #60]	@ (800e7c4 <prvCheckForValidListAndQueue+0x4c>)
			vListInitialise( &xActiveTimerList2 );
 800e786:	4e10      	ldr	r6, [pc, #64]	@ (800e7c8 <prvCheckForValidListAndQueue+0x50>)
			vListInitialise( &xActiveTimerList1 );
 800e788:	4638      	mov	r0, r7
 800e78a:	f7fe fb51 	bl	800ce30 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800e78e:	4630      	mov	r0, r6
 800e790:	f7fe fb4e 	bl	800ce30 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800e794:	4b0d      	ldr	r3, [pc, #52]	@ (800e7cc <prvCheckForValidListAndQueue+0x54>)
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800e796:	4a0e      	ldr	r2, [pc, #56]	@ (800e7d0 <prvCheckForValidListAndQueue+0x58>)
 800e798:	2110      	movs	r1, #16
			pxCurrentTimerList = &xActiveTimerList1;
 800e79a:	601f      	str	r7, [r3, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800e79c:	200a      	movs	r0, #10
			pxOverflowTimerList = &xActiveTimerList2;
 800e79e:	4b0d      	ldr	r3, [pc, #52]	@ (800e7d4 <prvCheckForValidListAndQueue+0x5c>)
 800e7a0:	601e      	str	r6, [r3, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800e7a2:	4b0d      	ldr	r3, [pc, #52]	@ (800e7d8 <prvCheckForValidListAndQueue+0x60>)
 800e7a4:	9500      	str	r5, [sp, #0]
 800e7a6:	f7fe fdef 	bl	800d388 <xQueueGenericCreateStatic>
 800e7aa:	6020      	str	r0, [r4, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800e7ac:	b110      	cbz	r0, 800e7b4 <prvCheckForValidListAndQueue+0x3c>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800e7ae:	490b      	ldr	r1, [pc, #44]	@ (800e7dc <prvCheckForValidListAndQueue+0x64>)
 800e7b0:	f7ff fa1a 	bl	800dbe8 <vQueueAddToRegistry>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
}
 800e7b4:	b003      	add	sp, #12
 800e7b6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	taskEXIT_CRITICAL();
 800e7ba:	f7fe bbfb 	b.w	800cfb4 <vPortExitCritical>
 800e7be:	bf00      	nop
 800e7c0:	24028de0 	.word	0x24028de0
 800e7c4:	24028e00 	.word	0x24028e00
 800e7c8:	24028dec 	.word	0x24028dec
 800e7cc:	24028de8 	.word	0x24028de8
 800e7d0:	24028d38 	.word	0x24028d38
 800e7d4:	24028de4 	.word	0x24028de4
 800e7d8:	24028ce8 	.word	0x24028ce8
 800e7dc:	0802b851 	.word	0x0802b851

0800e7e0 <xTimerCreateTimerTask>:
{
 800e7e0:	b510      	push	{r4, lr}
 800e7e2:	b088      	sub	sp, #32
	prvCheckForValidListAndQueue();
 800e7e4:	f7ff ffc8 	bl	800e778 <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
 800e7e8:	4b12      	ldr	r3, [pc, #72]	@ (800e834 <xTimerCreateTimerTask+0x54>)
 800e7ea:	681b      	ldr	r3, [r3, #0]
 800e7ec:	b1b3      	cbz	r3, 800e81c <xTimerCreateTimerTask+0x3c>
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800e7ee:	2400      	movs	r4, #0
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800e7f0:	aa07      	add	r2, sp, #28
 800e7f2:	a906      	add	r1, sp, #24
 800e7f4:	a805      	add	r0, sp, #20
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800e7f6:	e9cd 4405 	strd	r4, r4, [sp, #20]
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800e7fa:	f7fe fa11 	bl	800cc20 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800e7fe:	9b05      	ldr	r3, [sp, #20]
 800e800:	9a07      	ldr	r2, [sp, #28]
 800e802:	9302      	str	r3, [sp, #8]
 800e804:	9b06      	ldr	r3, [sp, #24]
 800e806:	490c      	ldr	r1, [pc, #48]	@ (800e838 <xTimerCreateTimerTask+0x58>)
 800e808:	9301      	str	r3, [sp, #4]
 800e80a:	2302      	movs	r3, #2
 800e80c:	480b      	ldr	r0, [pc, #44]	@ (800e83c <xTimerCreateTimerTask+0x5c>)
 800e80e:	9300      	str	r3, [sp, #0]
 800e810:	4623      	mov	r3, r4
 800e812:	f7ff fbae 	bl	800df72 <xTaskCreateStatic>
 800e816:	4b0a      	ldr	r3, [pc, #40]	@ (800e840 <xTimerCreateTimerTask+0x60>)
 800e818:	6018      	str	r0, [r3, #0]
			if( xTimerTaskHandle != NULL )
 800e81a:	b940      	cbnz	r0, 800e82e <xTimerCreateTimerTask+0x4e>
 800e81c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e820:	f383 8811 	msr	BASEPRI, r3
 800e824:	f3bf 8f6f 	isb	sy
 800e828:	f3bf 8f4f 	dsb	sy
	configASSERT( xReturn );
 800e82c:	e7fe      	b.n	800e82c <xTimerCreateTimerTask+0x4c>
}
 800e82e:	2001      	movs	r0, #1
 800e830:	b008      	add	sp, #32
 800e832:	bd10      	pop	{r4, pc}
 800e834:	24028de0 	.word	0x24028de0
 800e838:	0802b856 	.word	0x0802b856
 800e83c:	0800e93d 	.word	0x0800e93d
 800e840:	24028ddc 	.word	0x24028ddc

0800e844 <xTimerGenericCommand>:
{
 800e844:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800e846:	4616      	mov	r6, r2
	configASSERT( xTimer );
 800e848:	4604      	mov	r4, r0
{
 800e84a:	461a      	mov	r2, r3
	configASSERT( xTimer );
 800e84c:	b940      	cbnz	r0, 800e860 <xTimerGenericCommand+0x1c>
 800e84e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e852:	f383 8811 	msr	BASEPRI, r3
 800e856:	f3bf 8f6f 	isb	sy
 800e85a:	f3bf 8f4f 	dsb	sy
 800e85e:	e7fe      	b.n	800e85e <xTimerGenericCommand+0x1a>
	if( xTimerQueue != NULL )
 800e860:	4d0c      	ldr	r5, [pc, #48]	@ (800e894 <xTimerGenericCommand+0x50>)
 800e862:	6828      	ldr	r0, [r5, #0]
 800e864:	b178      	cbz	r0, 800e886 <xTimerGenericCommand+0x42>
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800e866:	2905      	cmp	r1, #5
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800e868:	9402      	str	r4, [sp, #8]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800e86a:	e9cd 1600 	strd	r1, r6, [sp]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800e86e:	dc0c      	bgt.n	800e88a <xTimerGenericCommand+0x46>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800e870:	f7ff fe7a 	bl	800e568 <xTaskGetSchedulerState>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800e874:	2300      	movs	r3, #0
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800e876:	2802      	cmp	r0, #2
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800e878:	4669      	mov	r1, sp
 800e87a:	6828      	ldr	r0, [r5, #0]
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800e87c:	bf0c      	ite	eq
 800e87e:	9a08      	ldreq	r2, [sp, #32]
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800e880:	461a      	movne	r2, r3
 800e882:	f7fe fe36 	bl	800d4f2 <xQueueGenericSend>
}
 800e886:	b004      	add	sp, #16
 800e888:	bd70      	pop	{r4, r5, r6, pc}
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800e88a:	2300      	movs	r3, #0
 800e88c:	4669      	mov	r1, sp
 800e88e:	f7fe ff33 	bl	800d6f8 <xQueueGenericSendFromISR>
 800e892:	e7f8      	b.n	800e886 <xTimerGenericCommand+0x42>
 800e894:	24028de0 	.word	0x24028de0

0800e898 <prvSampleTimeNow>:
{
 800e898:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
	if( xTimeNow < xLastTime )
 800e89c:	f8df 8098 	ldr.w	r8, [pc, #152]	@ 800e938 <prvSampleTimeNow+0xa0>
{
 800e8a0:	4606      	mov	r6, r0
	xTimeNow = xTaskGetTickCount();
 800e8a2:	f7ff fbd5 	bl	800e050 <xTaskGetTickCount>
 800e8a6:	4605      	mov	r5, r0
	if( xTimeNow < xLastTime )
 800e8a8:	f8d8 3000 	ldr.w	r3, [r8]
 800e8ac:	4283      	cmp	r3, r0
 800e8ae:	d909      	bls.n	800e8c4 <prvSampleTimeNow+0x2c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800e8b0:	4f1f      	ldr	r7, [pc, #124]	@ (800e930 <prvSampleTimeNow+0x98>)
 800e8b2:	683b      	ldr	r3, [r7, #0]
 800e8b4:	681a      	ldr	r2, [r3, #0]
 800e8b6:	b96a      	cbnz	r2, 800e8d4 <prvSampleTimeNow+0x3c>
	pxCurrentTimerList = pxOverflowTimerList;
 800e8b8:	4a1e      	ldr	r2, [pc, #120]	@ (800e934 <prvSampleTimeNow+0x9c>)
 800e8ba:	6811      	ldr	r1, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800e8bc:	6013      	str	r3, [r2, #0]
 800e8be:	2301      	movs	r3, #1
	pxCurrentTimerList = pxOverflowTimerList;
 800e8c0:	6039      	str	r1, [r7, #0]
		*pxTimerListsWereSwitched = pdTRUE;
 800e8c2:	e000      	b.n	800e8c6 <prvSampleTimeNow+0x2e>
 800e8c4:	2300      	movs	r3, #0
}
 800e8c6:	4628      	mov	r0, r5
		*pxTimerListsWereSwitched = pdTRUE;
 800e8c8:	6033      	str	r3, [r6, #0]
	xLastTime = xTimeNow;
 800e8ca:	f8c8 5000 	str.w	r5, [r8]
}
 800e8ce:	b002      	add	sp, #8
 800e8d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800e8d4:	68db      	ldr	r3, [r3, #12]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e8d6:	68dc      	ldr	r4, [r3, #12]
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800e8d8:	f8d3 9000 	ldr.w	r9, [r3]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e8dc:	f104 0a04 	add.w	sl, r4, #4
 800e8e0:	4650      	mov	r0, sl
 800e8e2:	f7fe fad5 	bl	800ce90 <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e8e6:	6a23      	ldr	r3, [r4, #32]
 800e8e8:	4620      	mov	r0, r4
 800e8ea:	4798      	blx	r3
		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e8ec:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 800e8f0:	075b      	lsls	r3, r3, #29
 800e8f2:	d5de      	bpl.n	800e8b2 <prvSampleTimeNow+0x1a>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800e8f4:	69a3      	ldr	r3, [r4, #24]
 800e8f6:	444b      	add	r3, r9
			if( xReloadTime > xNextExpireTime )
 800e8f8:	4599      	cmp	r9, r3
 800e8fa:	d206      	bcs.n	800e90a <prvSampleTimeNow+0x72>
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800e8fc:	4651      	mov	r1, sl
 800e8fe:	6838      	ldr	r0, [r7, #0]
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800e900:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800e902:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800e904:	f7fe faad 	bl	800ce62 <vListInsert>
 800e908:	e7d3      	b.n	800e8b2 <prvSampleTimeNow+0x1a>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800e90a:	2300      	movs	r3, #0
 800e90c:	464a      	mov	r2, r9
 800e90e:	4620      	mov	r0, r4
 800e910:	4619      	mov	r1, r3
 800e912:	9300      	str	r3, [sp, #0]
 800e914:	f7ff ff96 	bl	800e844 <xTimerGenericCommand>
				configASSERT( xResult );
 800e918:	2800      	cmp	r0, #0
 800e91a:	d1ca      	bne.n	800e8b2 <prvSampleTimeNow+0x1a>
 800e91c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e920:	f383 8811 	msr	BASEPRI, r3
 800e924:	f3bf 8f6f 	isb	sy
 800e928:	f3bf 8f4f 	dsb	sy
 800e92c:	e7fe      	b.n	800e92c <prvSampleTimeNow+0x94>
 800e92e:	bf00      	nop
 800e930:	24028de8 	.word	0x24028de8
 800e934:	24028de4 	.word	0x24028de4
 800e938:	24028dd8 	.word	0x24028dd8

0800e93c <prvTimerTask>:
{
 800e93c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800e940:	4d6e      	ldr	r5, [pc, #440]	@ (800eafc <prvTimerTask+0x1c0>)
{
 800e942:	b089      	sub	sp, #36	@ 0x24
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800e944:	4e6e      	ldr	r6, [pc, #440]	@ (800eb00 <prvTimerTask+0x1c4>)
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800e946:	682b      	ldr	r3, [r5, #0]
 800e948:	f8d3 8000 	ldr.w	r8, [r3]
 800e94c:	f1b8 0f00 	cmp.w	r8, #0
 800e950:	d035      	beq.n	800e9be <prvTimerTask+0x82>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800e952:	68db      	ldr	r3, [r3, #12]
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800e954:	2400      	movs	r4, #0
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800e956:	f8d3 8000 	ldr.w	r8, [r3]
	vTaskSuspendAll();
 800e95a:	f7ff fb71 	bl	800e040 <vTaskSuspendAll>
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800e95e:	a804      	add	r0, sp, #16
 800e960:	f7ff ff9a 	bl	800e898 <prvSampleTimeNow>
		if( xTimerListsWereSwitched == pdFALSE )
 800e964:	9b04      	ldr	r3, [sp, #16]
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800e966:	4681      	mov	r9, r0
		if( xTimerListsWereSwitched == pdFALSE )
 800e968:	2b00      	cmp	r3, #0
 800e96a:	d169      	bne.n	800ea40 <prvTimerTask+0x104>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800e96c:	2c00      	cmp	r4, #0
 800e96e:	d14c      	bne.n	800ea0a <prvTimerTask+0xce>
 800e970:	4540      	cmp	r0, r8
 800e972:	d350      	bcc.n	800ea16 <prvTimerTask+0xda>
				( void ) xTaskResumeAll();
 800e974:	f7ff fc08 	bl	800e188 <xTaskResumeAll>
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e978:	682b      	ldr	r3, [r5, #0]
 800e97a:	68db      	ldr	r3, [r3, #12]
 800e97c:	68df      	ldr	r7, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e97e:	1d38      	adds	r0, r7, #4
 800e980:	f7fe fa86 	bl	800ce90 <uxListRemove>
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e984:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800e988:	0758      	lsls	r0, r3, #29
 800e98a:	d51a      	bpl.n	800e9c2 <prvTimerTask+0x86>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800e98c:	69b9      	ldr	r1, [r7, #24]
 800e98e:	4643      	mov	r3, r8
 800e990:	464a      	mov	r2, r9
 800e992:	4638      	mov	r0, r7
 800e994:	4441      	add	r1, r8
 800e996:	f7ff fed1 	bl	800e73c <prvInsertTimerInActiveList>
 800e99a:	b1b0      	cbz	r0, 800e9ca <prvTimerTask+0x8e>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800e99c:	4623      	mov	r3, r4
 800e99e:	4642      	mov	r2, r8
 800e9a0:	4621      	mov	r1, r4
 800e9a2:	4638      	mov	r0, r7
 800e9a4:	9400      	str	r4, [sp, #0]
 800e9a6:	f7ff ff4d 	bl	800e844 <xTimerGenericCommand>
			configASSERT( xResult );
 800e9aa:	b970      	cbnz	r0, 800e9ca <prvTimerTask+0x8e>
 800e9ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e9b0:	f383 8811 	msr	BASEPRI, r3
 800e9b4:	f3bf 8f6f 	isb	sy
 800e9b8:	f3bf 8f4f 	dsb	sy
 800e9bc:	e7fe      	b.n	800e9bc <prvTimerTask+0x80>
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800e9be:	2401      	movs	r4, #1
 800e9c0:	e7cb      	b.n	800e95a <prvTimerTask+0x1e>
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800e9c2:	f023 0301 	bic.w	r3, r3, #1
 800e9c6:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e9ca:	6a3b      	ldr	r3, [r7, #32]
 800e9cc:	4638      	mov	r0, r7
 800e9ce:	4798      	blx	r3
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800e9d0:	2200      	movs	r2, #0
 800e9d2:	a904      	add	r1, sp, #16
 800e9d4:	6830      	ldr	r0, [r6, #0]
 800e9d6:	f7fe ff3d 	bl	800d854 <xQueueReceive>
 800e9da:	2800      	cmp	r0, #0
 800e9dc:	d0b3      	beq.n	800e946 <prvTimerTask+0xa>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800e9de:	9b04      	ldr	r3, [sp, #16]
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800e9e0:	9806      	ldr	r0, [sp, #24]
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800e9e2:	2b00      	cmp	r3, #0
 800e9e4:	db2f      	blt.n	800ea46 <prvTimerTask+0x10a>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800e9e6:	9c06      	ldr	r4, [sp, #24]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800e9e8:	6963      	ldr	r3, [r4, #20]
 800e9ea:	2b00      	cmp	r3, #0
 800e9ec:	d132      	bne.n	800ea54 <prvTimerTask+0x118>
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800e9ee:	a803      	add	r0, sp, #12
 800e9f0:	f7ff ff52 	bl	800e898 <prvSampleTimeNow>
			switch( xMessage.xMessageID )
 800e9f4:	9b04      	ldr	r3, [sp, #16]
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800e9f6:	4602      	mov	r2, r0
			switch( xMessage.xMessageID )
 800e9f8:	2b09      	cmp	r3, #9
 800e9fa:	d8e9      	bhi.n	800e9d0 <prvTimerTask+0x94>
 800e9fc:	e8df f003 	tbb	[pc, r3]
 800ea00:	572e2e2e 	.word	0x572e2e2e
 800ea04:	2e2e765e 	.word	0x2e2e765e
 800ea08:	5e57      	.short	0x5e57
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800ea0a:	4b3e      	ldr	r3, [pc, #248]	@ (800eb04 <prvTimerTask+0x1c8>)
 800ea0c:	681b      	ldr	r3, [r3, #0]
 800ea0e:	681c      	ldr	r4, [r3, #0]
 800ea10:	fab4 f484 	clz	r4, r4
 800ea14:	0964      	lsrs	r4, r4, #5
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800ea16:	4622      	mov	r2, r4
 800ea18:	eba8 0109 	sub.w	r1, r8, r9
 800ea1c:	6830      	ldr	r0, [r6, #0]
 800ea1e:	f7ff f922 	bl	800dc66 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800ea22:	f7ff fbb1 	bl	800e188 <xTaskResumeAll>
 800ea26:	2800      	cmp	r0, #0
 800ea28:	d1d2      	bne.n	800e9d0 <prvTimerTask+0x94>
					portYIELD_WITHIN_API();
 800ea2a:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800ea2e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ea32:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800ea36:	f3bf 8f4f 	dsb	sy
 800ea3a:	f3bf 8f6f 	isb	sy
 800ea3e:	e7c7      	b.n	800e9d0 <prvTimerTask+0x94>
			( void ) xTaskResumeAll();
 800ea40:	f7ff fba2 	bl	800e188 <xTaskResumeAll>
}
 800ea44:	e7c4      	b.n	800e9d0 <prvTimerTask+0x94>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800ea46:	9b05      	ldr	r3, [sp, #20]
 800ea48:	9907      	ldr	r1, [sp, #28]
 800ea4a:	4798      	blx	r3
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800ea4c:	9b04      	ldr	r3, [sp, #16]
 800ea4e:	2b00      	cmp	r3, #0
 800ea50:	dbbe      	blt.n	800e9d0 <prvTimerTask+0x94>
 800ea52:	e7c8      	b.n	800e9e6 <prvTimerTask+0xaa>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ea54:	1d20      	adds	r0, r4, #4
 800ea56:	f7fe fa1b 	bl	800ce90 <uxListRemove>
 800ea5a:	e7c8      	b.n	800e9ee <prvTimerTask+0xb2>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800ea5c:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800ea60:	4620      	mov	r0, r4
 800ea62:	69a1      	ldr	r1, [r4, #24]
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800ea64:	f043 0301 	orr.w	r3, r3, #1
 800ea68:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800ea6c:	9b05      	ldr	r3, [sp, #20]
 800ea6e:	4419      	add	r1, r3
 800ea70:	f7ff fe64 	bl	800e73c <prvInsertTimerInActiveList>
 800ea74:	2800      	cmp	r0, #0
 800ea76:	d0ab      	beq.n	800e9d0 <prvTimerTask+0x94>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ea78:	6a23      	ldr	r3, [r4, #32]
 800ea7a:	4620      	mov	r0, r4
 800ea7c:	4798      	blx	r3
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ea7e:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 800ea82:	0759      	lsls	r1, r3, #29
 800ea84:	d5a4      	bpl.n	800e9d0 <prvTimerTask+0x94>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800ea86:	69a2      	ldr	r2, [r4, #24]
 800ea88:	2300      	movs	r3, #0
 800ea8a:	9905      	ldr	r1, [sp, #20]
 800ea8c:	4620      	mov	r0, r4
 800ea8e:	9300      	str	r3, [sp, #0]
 800ea90:	440a      	add	r2, r1
 800ea92:	4619      	mov	r1, r3
 800ea94:	f7ff fed6 	bl	800e844 <xTimerGenericCommand>
							configASSERT( xResult );
 800ea98:	2800      	cmp	r0, #0
 800ea9a:	d199      	bne.n	800e9d0 <prvTimerTask+0x94>
 800ea9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eaa0:	f383 8811 	msr	BASEPRI, r3
 800eaa4:	f3bf 8f6f 	isb	sy
 800eaa8:	f3bf 8f4f 	dsb	sy
 800eaac:	e7fe      	b.n	800eaac <prvTimerTask+0x170>
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800eaae:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800eab2:	f023 0301 	bic.w	r3, r3, #1
 800eab6:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
 800eaba:	e789      	b.n	800e9d0 <prvTimerTask+0x94>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800eabc:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 800eac0:	f043 0301 	orr.w	r3, r3, #1
 800eac4:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800eac8:	9905      	ldr	r1, [sp, #20]
 800eaca:	61a1      	str	r1, [r4, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800eacc:	b941      	cbnz	r1, 800eae0 <prvTimerTask+0x1a4>
 800eace:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ead2:	f383 8811 	msr	BASEPRI, r3
 800ead6:	f3bf 8f6f 	isb	sy
 800eada:	f3bf 8f4f 	dsb	sy
 800eade:	e7fe      	b.n	800eade <prvTimerTask+0x1a2>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800eae0:	4603      	mov	r3, r0
 800eae2:	4401      	add	r1, r0
 800eae4:	4620      	mov	r0, r4
 800eae6:	f7ff fe29 	bl	800e73c <prvInsertTimerInActiveList>
					break;
 800eaea:	e771      	b.n	800e9d0 <prvTimerTask+0x94>
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800eaec:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 800eaf0:	079a      	lsls	r2, r3, #30
 800eaf2:	d4de      	bmi.n	800eab2 <prvTimerTask+0x176>
							vPortFree( pxTimer );
 800eaf4:	4620      	mov	r0, r4
 800eaf6:	f7fe f95d 	bl	800cdb4 <vPortFree>
 800eafa:	e769      	b.n	800e9d0 <prvTimerTask+0x94>
 800eafc:	24028de8 	.word	0x24028de8
 800eb00:	24028de0 	.word	0x24028de0
 800eb04:	24028de4 	.word	0x24028de4

0800eb08 <_ZNK8touchgfx17AbstractPartition18getAllocationCountEv>:
 800eb08:	8880      	ldrh	r0, [r0, #4]
 800eb0a:	4770      	bx	lr

0800eb0c <_ZN8touchgfx17AbstractPartition7indexOfEPKv>:
 800eb0c:	b570      	push	{r4, r5, r6, lr}
 800eb0e:	6803      	ldr	r3, [r0, #0]
 800eb10:	460c      	mov	r4, r1
 800eb12:	2100      	movs	r1, #0
 800eb14:	4605      	mov	r5, r0
 800eb16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800eb18:	4798      	blx	r3
 800eb1a:	4606      	mov	r6, r0
 800eb1c:	682b      	ldr	r3, [r5, #0]
 800eb1e:	4628      	mov	r0, r5
 800eb20:	1ba4      	subs	r4, r4, r6
 800eb22:	6a1b      	ldr	r3, [r3, #32]
 800eb24:	b2a4      	uxth	r4, r4
 800eb26:	4798      	blx	r3
 800eb28:	fbb4 f0f0 	udiv	r0, r4, r0
 800eb2c:	bd70      	pop	{r4, r5, r6, pc}

0800eb2e <_ZN8touchgfx17AbstractPartition5clearEv>:
 800eb2e:	2300      	movs	r3, #0
 800eb30:	8083      	strh	r3, [r0, #4]
 800eb32:	4770      	bx	lr

0800eb34 <_ZN8touchgfx17AbstractPartition8allocateEt>:
 800eb34:	b510      	push	{r4, lr}
 800eb36:	6803      	ldr	r3, [r0, #0]
 800eb38:	4604      	mov	r4, r0
 800eb3a:	8881      	ldrh	r1, [r0, #4]
 800eb3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800eb3e:	4798      	blx	r3
 800eb40:	88a3      	ldrh	r3, [r4, #4]
 800eb42:	3301      	adds	r3, #1
 800eb44:	80a3      	strh	r3, [r4, #4]
 800eb46:	bd10      	pop	{r4, pc}

0800eb48 <_ZN8touchgfx17AbstractPartition10allocateAtEtt>:
 800eb48:	6803      	ldr	r3, [r0, #0]
 800eb4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800eb4c:	4718      	bx	r3

0800eb4e <_ZN8touchgfx17AbstractPartitionD1Ev>:
 800eb4e:	4770      	bx	lr

0800eb50 <_ZN8touchgfx17AbstractPartitionC1Ev>:
 800eb50:	4a02      	ldr	r2, [pc, #8]	@ (800eb5c <_ZN8touchgfx17AbstractPartitionC1Ev+0xc>)
 800eb52:	6002      	str	r2, [r0, #0]
 800eb54:	2200      	movs	r2, #0
 800eb56:	8082      	strh	r2, [r0, #4]
 800eb58:	4770      	bx	lr
 800eb5a:	bf00      	nop
 800eb5c:	0802b868 	.word	0x0802b868

0800eb60 <_ZNK8touchgfx25AbstractDirectionProgress12getDirectionEv>:
 800eb60:	f890 00b4 	ldrb.w	r0, [r0, #180]	@ 0xb4
 800eb64:	4770      	bx	lr

0800eb66 <_ZN8touchgfx25AbstractDirectionProgressD1Ev>:
 800eb66:	4770      	bx	lr

0800eb68 <_ZN8touchgfx25AbstractDirectionProgressD0Ev>:
 800eb68:	b510      	push	{r4, lr}
 800eb6a:	4604      	mov	r4, r0
 800eb6c:	21b8      	movs	r1, #184	@ 0xb8
 800eb6e:	f018 f80e 	bl	8026b8e <_ZdlPvj>
 800eb72:	4620      	mov	r0, r4
 800eb74:	bd10      	pop	{r4, pc}

0800eb76 <_ZN8touchgfx25AbstractDirectionProgress12setDirectionENS0_13DirectionTypeE.part.0>:
 800eb76:	b570      	push	{r4, r5, r6, lr}
 800eb78:	4604      	mov	r4, r0
 800eb7a:	f880 10b4 	strb.w	r1, [r0, #180]	@ 0xb4
 800eb7e:	3058      	adds	r0, #88	@ 0x58
 800eb80:	f009 fde9 	bl	8018756 <_ZNK8touchgfx8Drawable10invalidateEv>
 800eb84:	6823      	ldr	r3, [r4, #0]
 800eb86:	4620      	mov	r0, r4
 800eb88:	f8d3 50b0 	ldr.w	r5, [r3, #176]	@ 0xb0
 800eb8c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800eb90:	4798      	blx	r3
 800eb92:	462b      	mov	r3, r5
 800eb94:	4601      	mov	r1, r0
 800eb96:	4620      	mov	r0, r4
 800eb98:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800eb9c:	4718      	bx	r3

0800eb9e <_ZN8touchgfx25AbstractDirectionProgress12setDirectionENS0_13DirectionTypeE>:
 800eb9e:	f890 30b4 	ldrb.w	r3, [r0, #180]	@ 0xb4
 800eba2:	428b      	cmp	r3, r1
 800eba4:	d001      	beq.n	800ebaa <_ZN8touchgfx25AbstractDirectionProgress12setDirectionENS0_13DirectionTypeE+0xc>
 800eba6:	f7ff bfe6 	b.w	800eb76 <_ZN8touchgfx25AbstractDirectionProgress12setDirectionENS0_13DirectionTypeE.part.0>
 800ebaa:	4770      	bx	lr

0800ebac <_ZN8touchgfx25AbstractDirectionProgressC1Ev>:
 800ebac:	b510      	push	{r4, lr}
 800ebae:	4604      	mov	r4, r0
 800ebb0:	f000 fb74 	bl	800f29c <_ZN8touchgfx25AbstractProgressIndicatorC1Ev>
 800ebb4:	4b03      	ldr	r3, [pc, #12]	@ (800ebc4 <_ZN8touchgfx25AbstractDirectionProgressC1Ev+0x18>)
 800ebb6:	4620      	mov	r0, r4
 800ebb8:	6023      	str	r3, [r4, #0]
 800ebba:	2300      	movs	r3, #0
 800ebbc:	f884 30b4 	strb.w	r3, [r4, #180]	@ 0xb4
 800ebc0:	bd10      	pop	{r4, pc}
 800ebc2:	bf00      	nop
 800ebc4:	0802b89c 	.word	0x0802b89c

0800ebc8 <_ZN8touchgfx13ImageProgress15setAnchorAtZeroEb>:
 800ebc8:	b570      	push	{r4, r5, r6, lr}
 800ebca:	6803      	ldr	r3, [r0, #0]
 800ebcc:	4604      	mov	r4, r0
 800ebce:	f880 1114 	strb.w	r1, [r0, #276]	@ 0x114
 800ebd2:	f8d3 50b0 	ldr.w	r5, [r3, #176]	@ 0xb0
 800ebd6:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800ebda:	4798      	blx	r3
 800ebdc:	462b      	mov	r3, r5
 800ebde:	4601      	mov	r1, r0
 800ebe0:	4620      	mov	r0, r4
 800ebe2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ebe6:	4718      	bx	r3

0800ebe8 <_ZNK8touchgfx13ImageProgress15getAnchorAtZeroEv>:
 800ebe8:	f890 0114 	ldrb.w	r0, [r0, #276]	@ 0x114
 800ebec:	4770      	bx	lr

0800ebee <_ZNK8touchgfx13ImageProgress9getBitmapEv>:
 800ebee:	f8b0 010a 	ldrh.w	r0, [r0, #266]	@ 0x10a
 800ebf2:	4770      	bx	lr

0800ebf4 <_ZN8touchgfx13ImageProgressD1Ev>:
 800ebf4:	4770      	bx	lr

0800ebf6 <_ZN8touchgfx13ImageProgressD0Ev>:
 800ebf6:	b510      	push	{r4, lr}
 800ebf8:	4604      	mov	r4, r0
 800ebfa:	f44f 718c 	mov.w	r1, #280	@ 0x118
 800ebfe:	f017 ffc6 	bl	8026b8e <_ZdlPvj>
 800ec02:	4620      	mov	r0, r4
 800ec04:	bd10      	pop	{r4, pc}

0800ec06 <_ZN8touchgfx13ImageProgress9setBitmapEt>:
 800ec06:	b507      	push	{r0, r1, r2, lr}
 800ec08:	ab02      	add	r3, sp, #8
 800ec0a:	30e4      	adds	r0, #228	@ 0xe4
 800ec0c:	f823 1d04 	strh.w	r1, [r3, #-4]!
 800ec10:	4619      	mov	r1, r3
 800ec12:	f005 fd17 	bl	8014644 <_ZN8touchgfx10TiledImage9setBitmapERKNS_6BitmapE>
 800ec16:	b003      	add	sp, #12
 800ec18:	f85d fb04 	ldr.w	pc, [sp], #4

0800ec1c <_ZN8touchgfx13ImageProgress8setAlphaEh>:
 800ec1c:	b538      	push	{r3, r4, r5, lr}
 800ec1e:	4604      	mov	r4, r0
 800ec20:	460d      	mov	r5, r1
 800ec22:	f000 fa19 	bl	800f058 <_ZN8touchgfx25AbstractProgressIndicator8setAlphaEh>
 800ec26:	f884 510c 	strb.w	r5, [r4, #268]	@ 0x10c
 800ec2a:	bd38      	pop	{r3, r4, r5, pc}

0800ec2c <_ZN8touchgfx13ImageProgress28setProgressIndicatorPositionEssss>:
 800ec2c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800ec30:	4617      	mov	r7, r2
 800ec32:	f9bd 5020 	ldrsh.w	r5, [sp, #32]
 800ec36:	2200      	movs	r2, #0
 800ec38:	4604      	mov	r4, r0
 800ec3a:	460e      	mov	r6, r1
 800ec3c:	4698      	mov	r8, r3
 800ec3e:	4611      	mov	r1, r2
 800ec40:	9500      	str	r5, [sp, #0]
 800ec42:	30b8      	adds	r0, #184	@ 0xb8
 800ec44:	f7f5 f89c 	bl	8003d80 <_ZN8touchgfx8Drawable11setPositionEssss>
 800ec48:	4643      	mov	r3, r8
 800ec4a:	463a      	mov	r2, r7
 800ec4c:	4631      	mov	r1, r6
 800ec4e:	4620      	mov	r0, r4
 800ec50:	9508      	str	r5, [sp, #32]
 800ec52:	b002      	add	sp, #8
 800ec54:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ec58:	f000 baf3 	b.w	800f242 <_ZN8touchgfx25AbstractProgressIndicator28setProgressIndicatorPositionEssss>

0800ec5c <_ZN8touchgfx13ImageProgress8setValueEi>:
 800ec5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ec5e:	4604      	mov	r4, r0
 800ec60:	b085      	sub	sp, #20
 800ec62:	f000 fa4c 	bl	800f0fe <_ZN8touchgfx25AbstractProgressIndicator8setValueEi>
 800ec66:	f894 30b4 	ldrb.w	r3, [r4, #180]	@ 0xb4
 800ec6a:	4620      	mov	r0, r4
 800ec6c:	2b01      	cmp	r3, #1
 800ec6e:	bf94      	ite	ls
 800ec70:	f8b4 1060 	ldrhls.w	r1, [r4, #96]	@ 0x60
 800ec74:	f8b4 1062 	ldrhhi.w	r1, [r4, #98]	@ 0x62
 800ec78:	f000 fa63 	bl	800f142 <_ZNK8touchgfx25AbstractProgressIndicator11getProgressEt>
 800ec7c:	f894 3114 	ldrb.w	r3, [r4, #276]	@ 0x114
 800ec80:	4606      	mov	r6, r0
 800ec82:	b205      	sxth	r5, r0
 800ec84:	2b00      	cmp	r3, #0
 800ec86:	f000 80ca 	beq.w	800ee1e <_ZN8touchgfx13ImageProgress8setValueEi+0x1c2>
 800ec8a:	f894 30b4 	ldrb.w	r3, [r4, #180]	@ 0xb4
 800ec8e:	2b03      	cmp	r3, #3
 800ec90:	d834      	bhi.n	800ecfc <_ZN8touchgfx13ImageProgress8setValueEi+0xa0>
 800ec92:	e8df f003 	tbb	[pc, r3]
 800ec96:	3502      	.short	0x3502
 800ec98:	9166      	.short	0x9166
 800ec9a:	f9b4 3062 	ldrsh.w	r3, [r4, #98]	@ 0x62
 800ec9e:	2200      	movs	r2, #0
 800eca0:	f104 00b8 	add.w	r0, r4, #184	@ 0xb8
 800eca4:	f9b4 60c0 	ldrsh.w	r6, [r4, #192]	@ 0xc0
 800eca8:	4611      	mov	r1, r2
 800ecaa:	9300      	str	r3, [sp, #0]
 800ecac:	462b      	mov	r3, r5
 800ecae:	f7f5 f867 	bl	8003d80 <_ZN8touchgfx8Drawable11setPositionEssss>
 800ecb2:	f9b4 3062 	ldrsh.w	r3, [r4, #98]	@ 0x62
 800ecb6:	2200      	movs	r2, #0
 800ecb8:	f104 00e4 	add.w	r0, r4, #228	@ 0xe4
 800ecbc:	9300      	str	r3, [sp, #0]
 800ecbe:	462b      	mov	r3, r5
 800ecc0:	4611      	mov	r1, r2
 800ecc2:	f7f5 f85d 	bl	8003d80 <_ZN8touchgfx8Drawable11setPositionEssss>
 800ecc6:	f9b4 30c0 	ldrsh.w	r3, [r4, #192]	@ 0xc0
 800ecca:	4631      	mov	r1, r6
 800eccc:	f9b4 20c2 	ldrsh.w	r2, [r4, #194]	@ 0xc2
 800ecd0:	429e      	cmp	r6, r3
 800ecd2:	eba6 0603 	sub.w	r6, r6, r3
 800ecd6:	bfa8      	it	ge
 800ecd8:	4619      	movge	r1, r3
 800ecda:	2e00      	cmp	r6, #0
 800ecdc:	f8ad 1008 	strh.w	r1, [sp, #8]
 800ece0:	bfb8      	it	lt
 800ece2:	4276      	neglt	r6, r6
 800ece4:	2100      	movs	r1, #0
 800ece6:	f8ad 600c 	strh.w	r6, [sp, #12]
 800ecea:	f8ad 100a 	strh.w	r1, [sp, #10]
 800ecee:	f8ad 200e 	strh.w	r2, [sp, #14]
 800ecf2:	a902      	add	r1, sp, #8
 800ecf4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800ecf8:	f009 fd7e 	bl	80187f8 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE>
 800ecfc:	b005      	add	sp, #20
 800ecfe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ed00:	8921      	ldrh	r1, [r4, #8]
 800ed02:	2200      	movs	r2, #0
 800ed04:	f9b4 3062 	ldrsh.w	r3, [r4, #98]	@ 0x62
 800ed08:	1a09      	subs	r1, r1, r0
 800ed0a:	f104 00b8 	add.w	r0, r4, #184	@ 0xb8
 800ed0e:	9300      	str	r3, [sp, #0]
 800ed10:	462b      	mov	r3, r5
 800ed12:	b209      	sxth	r1, r1
 800ed14:	f9b4 70bc 	ldrsh.w	r7, [r4, #188]	@ 0xbc
 800ed18:	f7f5 f832 	bl	8003d80 <_ZN8touchgfx8Drawable11setPositionEssss>
 800ed1c:	f8b4 10bc 	ldrh.w	r1, [r4, #188]	@ 0xbc
 800ed20:	f9b4 2062 	ldrsh.w	r2, [r4, #98]	@ 0x62
 800ed24:	f104 00e4 	add.w	r0, r4, #228	@ 0xe4
 800ed28:	4249      	negs	r1, r1
 800ed2a:	f9b4 3060 	ldrsh.w	r3, [r4, #96]	@ 0x60
 800ed2e:	9200      	str	r2, [sp, #0]
 800ed30:	2200      	movs	r2, #0
 800ed32:	b209      	sxth	r1, r1
 800ed34:	f7f5 f824 	bl	8003d80 <_ZN8touchgfx8Drawable11setPositionEssss>
 800ed38:	f9b4 30bc 	ldrsh.w	r3, [r4, #188]	@ 0xbc
 800ed3c:	4639      	mov	r1, r7
 800ed3e:	f9b4 20c2 	ldrsh.w	r2, [r4, #194]	@ 0xc2
 800ed42:	429f      	cmp	r7, r3
 800ed44:	eba7 0703 	sub.w	r7, r7, r3
 800ed48:	bfa8      	it	ge
 800ed4a:	4619      	movge	r1, r3
 800ed4c:	2f00      	cmp	r7, #0
 800ed4e:	f8ad 1008 	strh.w	r1, [sp, #8]
 800ed52:	bfb8      	it	lt
 800ed54:	427f      	neglt	r7, r7
 800ed56:	2100      	movs	r1, #0
 800ed58:	f8ad 700c 	strh.w	r7, [sp, #12]
 800ed5c:	f8ad 100a 	strh.w	r1, [sp, #10]
 800ed60:	e7c5      	b.n	800ecee <_ZN8touchgfx13ImageProgress8setValueEi+0x92>
 800ed62:	2200      	movs	r2, #0
 800ed64:	f9b4 3060 	ldrsh.w	r3, [r4, #96]	@ 0x60
 800ed68:	f104 00b8 	add.w	r0, r4, #184	@ 0xb8
 800ed6c:	9500      	str	r5, [sp, #0]
 800ed6e:	4611      	mov	r1, r2
 800ed70:	f9b4 60c2 	ldrsh.w	r6, [r4, #194]	@ 0xc2
 800ed74:	f7f5 f804 	bl	8003d80 <_ZN8touchgfx8Drawable11setPositionEssss>
 800ed78:	2200      	movs	r2, #0
 800ed7a:	f9b4 3060 	ldrsh.w	r3, [r4, #96]	@ 0x60
 800ed7e:	f104 00e4 	add.w	r0, r4, #228	@ 0xe4
 800ed82:	4611      	mov	r1, r2
 800ed84:	9500      	str	r5, [sp, #0]
 800ed86:	f7f4 fffb 	bl	8003d80 <_ZN8touchgfx8Drawable11setPositionEssss>
 800ed8a:	f9b4 30c2 	ldrsh.w	r3, [r4, #194]	@ 0xc2
 800ed8e:	2100      	movs	r1, #0
 800ed90:	f9b4 20c0 	ldrsh.w	r2, [r4, #192]	@ 0xc0
 800ed94:	429e      	cmp	r6, r3
 800ed96:	f8ad 1008 	strh.w	r1, [sp, #8]
 800ed9a:	4631      	mov	r1, r6
 800ed9c:	eba6 0603 	sub.w	r6, r6, r3
 800eda0:	bfa8      	it	ge
 800eda2:	4619      	movge	r1, r3
 800eda4:	f8ad 200c 	strh.w	r2, [sp, #12]
 800eda8:	2e00      	cmp	r6, #0
 800edaa:	f8ad 100a 	strh.w	r1, [sp, #10]
 800edae:	bfb8      	it	lt
 800edb0:	4276      	neglt	r6, r6
 800edb2:	f8ad 600e 	strh.w	r6, [sp, #14]
 800edb6:	e79c      	b.n	800ecf2 <_ZN8touchgfx13ImageProgress8setValueEi+0x96>
 800edb8:	f8b4 2062 	ldrh.w	r2, [r4, #98]	@ 0x62
 800edbc:	2100      	movs	r1, #0
 800edbe:	f9b4 3060 	ldrsh.w	r3, [r4, #96]	@ 0x60
 800edc2:	1a12      	subs	r2, r2, r0
 800edc4:	9500      	str	r5, [sp, #0]
 800edc6:	f104 00b8 	add.w	r0, r4, #184	@ 0xb8
 800edca:	f9b4 70be 	ldrsh.w	r7, [r4, #190]	@ 0xbe
 800edce:	b212      	sxth	r2, r2
 800edd0:	f7f4 ffd6 	bl	8003d80 <_ZN8touchgfx8Drawable11setPositionEssss>
 800edd4:	f8b4 20be 	ldrh.w	r2, [r4, #190]	@ 0xbe
 800edd8:	f9b4 1062 	ldrsh.w	r1, [r4, #98]	@ 0x62
 800eddc:	f104 00e4 	add.w	r0, r4, #228	@ 0xe4
 800ede0:	4252      	negs	r2, r2
 800ede2:	f9b4 3060 	ldrsh.w	r3, [r4, #96]	@ 0x60
 800ede6:	9100      	str	r1, [sp, #0]
 800ede8:	2100      	movs	r1, #0
 800edea:	b212      	sxth	r2, r2
 800edec:	f7f4 ffc8 	bl	8003d80 <_ZN8touchgfx8Drawable11setPositionEssss>
 800edf0:	f9b4 30be 	ldrsh.w	r3, [r4, #190]	@ 0xbe
 800edf4:	2100      	movs	r1, #0
 800edf6:	f9b4 20c0 	ldrsh.w	r2, [r4, #192]	@ 0xc0
 800edfa:	429f      	cmp	r7, r3
 800edfc:	f8ad 1008 	strh.w	r1, [sp, #8]
 800ee00:	4639      	mov	r1, r7
 800ee02:	eba7 0703 	sub.w	r7, r7, r3
 800ee06:	bfa8      	it	ge
 800ee08:	4619      	movge	r1, r3
 800ee0a:	f8ad 200c 	strh.w	r2, [sp, #12]
 800ee0e:	2f00      	cmp	r7, #0
 800ee10:	f8ad 100a 	strh.w	r1, [sp, #10]
 800ee14:	bfb8      	it	lt
 800ee16:	427f      	neglt	r7, r7
 800ee18:	f8ad 700e 	strh.w	r7, [sp, #14]
 800ee1c:	e769      	b.n	800ecf2 <_ZN8touchgfx13ImageProgress8setValueEi+0x96>
 800ee1e:	f104 07b8 	add.w	r7, r4, #184	@ 0xb8
 800ee22:	4638      	mov	r0, r7
 800ee24:	f009 fc97 	bl	8018756 <_ZNK8touchgfx8Drawable10invalidateEv>
 800ee28:	f894 30b4 	ldrb.w	r3, [r4, #180]	@ 0xb4
 800ee2c:	2b03      	cmp	r3, #3
 800ee2e:	d818      	bhi.n	800ee62 <_ZN8touchgfx13ImageProgress8setValueEi+0x206>
 800ee30:	e8df f003 	tbb	[pc, r3]
 800ee34:	3f2e1b02 	.word	0x3f2e1b02
 800ee38:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 800ee3c:	2200      	movs	r2, #0
 800ee3e:	4638      	mov	r0, r7
 800ee40:	4611      	mov	r1, r2
 800ee42:	9300      	str	r3, [sp, #0]
 800ee44:	462b      	mov	r3, r5
 800ee46:	f7f4 ff9b 	bl	8003d80 <_ZN8touchgfx8Drawable11setPositionEssss>
 800ee4a:	f9b4 3060 	ldrsh.w	r3, [r4, #96]	@ 0x60
 800ee4e:	f9b4 200a 	ldrsh.w	r2, [r4, #10]
 800ee52:	1af1      	subs	r1, r6, r3
 800ee54:	9200      	str	r2, [sp, #0]
 800ee56:	2200      	movs	r2, #0
 800ee58:	b209      	sxth	r1, r1
 800ee5a:	f104 00e4 	add.w	r0, r4, #228	@ 0xe4
 800ee5e:	f7f4 ff8f 	bl	8003d80 <_ZN8touchgfx8Drawable11setPositionEssss>
 800ee62:	4638      	mov	r0, r7
 800ee64:	f009 fc77 	bl	8018756 <_ZNK8touchgfx8Drawable10invalidateEv>
 800ee68:	e748      	b.n	800ecfc <_ZN8touchgfx13ImageProgress8setValueEi+0xa0>
 800ee6a:	f8b4 1060 	ldrh.w	r1, [r4, #96]	@ 0x60
 800ee6e:	2200      	movs	r2, #0
 800ee70:	f9b4 3062 	ldrsh.w	r3, [r4, #98]	@ 0x62
 800ee74:	4638      	mov	r0, r7
 800ee76:	1b89      	subs	r1, r1, r6
 800ee78:	9300      	str	r3, [sp, #0]
 800ee7a:	462b      	mov	r3, r5
 800ee7c:	b209      	sxth	r1, r1
 800ee7e:	f7f4 ff7f 	bl	8003d80 <_ZN8touchgfx8Drawable11setPositionEssss>
 800ee82:	f9b4 3062 	ldrsh.w	r3, [r4, #98]	@ 0x62
 800ee86:	9300      	str	r3, [sp, #0]
 800ee88:	462b      	mov	r3, r5
 800ee8a:	2200      	movs	r2, #0
 800ee8c:	4611      	mov	r1, r2
 800ee8e:	e7e4      	b.n	800ee5a <_ZN8touchgfx13ImageProgress8setValueEi+0x1fe>
 800ee90:	2200      	movs	r2, #0
 800ee92:	f9b4 3060 	ldrsh.w	r3, [r4, #96]	@ 0x60
 800ee96:	4638      	mov	r0, r7
 800ee98:	9500      	str	r5, [sp, #0]
 800ee9a:	4611      	mov	r1, r2
 800ee9c:	f7f4 ff70 	bl	8003d80 <_ZN8touchgfx8Drawable11setPositionEssss>
 800eea0:	f9b4 0062 	ldrsh.w	r0, [r4, #98]	@ 0x62
 800eea4:	f9b4 3060 	ldrsh.w	r3, [r4, #96]	@ 0x60
 800eea8:	2100      	movs	r1, #0
 800eeaa:	1a32      	subs	r2, r6, r0
 800eeac:	9000      	str	r0, [sp, #0]
 800eeae:	b212      	sxth	r2, r2
 800eeb0:	e7d3      	b.n	800ee5a <_ZN8touchgfx13ImageProgress8setValueEi+0x1fe>
 800eeb2:	f8b4 2062 	ldrh.w	r2, [r4, #98]	@ 0x62
 800eeb6:	2100      	movs	r1, #0
 800eeb8:	f9b4 3060 	ldrsh.w	r3, [r4, #96]	@ 0x60
 800eebc:	4638      	mov	r0, r7
 800eebe:	1b92      	subs	r2, r2, r6
 800eec0:	9500      	str	r5, [sp, #0]
 800eec2:	b212      	sxth	r2, r2
 800eec4:	f7f4 ff5c 	bl	8003d80 <_ZN8touchgfx8Drawable11setPositionEssss>
 800eec8:	f9b4 3060 	ldrsh.w	r3, [r4, #96]	@ 0x60
 800eecc:	9500      	str	r5, [sp, #0]
 800eece:	e7dc      	b.n	800ee8a <_ZN8touchgfx13ImageProgress8setValueEi+0x22e>

0800eed0 <_ZN8touchgfx13ImageProgressC1Ev>:
 800eed0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800eed4:	4604      	mov	r4, r0
 800eed6:	f7ff fe69 	bl	800ebac <_ZN8touchgfx25AbstractDirectionProgressC1Ev>
 800eeda:	4b35      	ldr	r3, [pc, #212]	@ (800efb0 <_ZN8touchgfx13ImageProgressC1Ev+0xe0>)
 800eedc:	2500      	movs	r5, #0
 800eede:	4626      	mov	r6, r4
 800eee0:	4a34      	ldr	r2, [pc, #208]	@ (800efb4 <_ZN8touchgfx13ImageProgressC1Ev+0xe4>)
 800eee2:	2701      	movs	r7, #1
 800eee4:	a902      	add	r1, sp, #8
 800eee6:	f846 3bb8 	str.w	r3, [r6], #184
 800eeea:	f104 08e4 	add.w	r8, r4, #228	@ 0xe4
 800eeee:	4b32      	ldr	r3, [pc, #200]	@ (800efb8 <_ZN8touchgfx13ImageProgressC1Ev+0xe8>)
 800eef0:	4640      	mov	r0, r8
 800eef2:	f8a4 50bc 	strh.w	r5, [r4, #188]	@ 0xbc
 800eef6:	f8c4 30b8 	str.w	r3, [r4, #184]	@ 0xb8
 800eefa:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800eefe:	f8a4 50be 	strh.w	r5, [r4, #190]	@ 0xbe
 800ef02:	f821 3d04 	strh.w	r3, [r1, #-4]!
 800ef06:	f8a4 50c0 	strh.w	r5, [r4, #192]	@ 0xc0
 800ef0a:	f8a4 50c2 	strh.w	r5, [r4, #194]	@ 0xc2
 800ef0e:	f8a4 50c4 	strh.w	r5, [r4, #196]	@ 0xc4
 800ef12:	f8a4 50c6 	strh.w	r5, [r4, #198]	@ 0xc6
 800ef16:	f8a4 50c8 	strh.w	r5, [r4, #200]	@ 0xc8
 800ef1a:	f8a4 50ca 	strh.w	r5, [r4, #202]	@ 0xca
 800ef1e:	f8c4 50d4 	str.w	r5, [r4, #212]	@ 0xd4
 800ef22:	f8a4 50d8 	strh.w	r5, [r4, #216]	@ 0xd8
 800ef26:	f8a4 50da 	strh.w	r5, [r4, #218]	@ 0xda
 800ef2a:	f884 50dc 	strb.w	r5, [r4, #220]	@ 0xdc
 800ef2e:	f884 70dd 	strb.w	r7, [r4, #221]	@ 0xdd
 800ef32:	f8c4 50e0 	str.w	r5, [r4, #224]	@ 0xe0
 800ef36:	f8a4 50e8 	strh.w	r5, [r4, #232]	@ 0xe8
 800ef3a:	f8a4 50ea 	strh.w	r5, [r4, #234]	@ 0xea
 800ef3e:	f8a4 50ec 	strh.w	r5, [r4, #236]	@ 0xec
 800ef42:	f8a4 50ee 	strh.w	r5, [r4, #238]	@ 0xee
 800ef46:	f8a4 50f0 	strh.w	r5, [r4, #240]	@ 0xf0
 800ef4a:	f8a4 50f2 	strh.w	r5, [r4, #242]	@ 0xf2
 800ef4e:	f8a4 50f4 	strh.w	r5, [r4, #244]	@ 0xf4
 800ef52:	f8a4 50f6 	strh.w	r5, [r4, #246]	@ 0xf6
 800ef56:	f8c4 5100 	str.w	r5, [r4, #256]	@ 0x100
 800ef5a:	f8a4 5104 	strh.w	r5, [r4, #260]	@ 0x104
 800ef5e:	f8a4 5106 	strh.w	r5, [r4, #262]	@ 0x106
 800ef62:	e9c4 5533 	strd	r5, r5, [r4, #204]	@ 0xcc
 800ef66:	e9c4 553e 	strd	r5, r5, [r4, #248]	@ 0xf8
 800ef6a:	f884 5108 	strb.w	r5, [r4, #264]	@ 0x108
 800ef6e:	f8c4 20e4 	str.w	r2, [r4, #228]	@ 0xe4
 800ef72:	f8a4 310a 	strh.w	r3, [r4, #266]	@ 0x10a
 800ef76:	f884 310c 	strb.w	r3, [r4, #268]	@ 0x10c
 800ef7a:	f884 7109 	strb.w	r7, [r4, #265]	@ 0x109
 800ef7e:	f005 ff18 	bl	8014db2 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 800ef82:	4b0e      	ldr	r3, [pc, #56]	@ (800efbc <_ZN8touchgfx13ImageProgressC1Ev+0xec>)
 800ef84:	4641      	mov	r1, r8
 800ef86:	4630      	mov	r0, r6
 800ef88:	f8c4 30e4 	str.w	r3, [r4, #228]	@ 0xe4
 800ef8c:	f8a4 510e 	strh.w	r5, [r4, #270]	@ 0x10e
 800ef90:	f8a4 5110 	strh.w	r5, [r4, #272]	@ 0x110
 800ef94:	f884 7114 	strb.w	r7, [r4, #276]	@ 0x114
 800ef98:	f000 fbad 	bl	800f6f6 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 800ef9c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800efa0:	4631      	mov	r1, r6
 800efa2:	f000 fba8 	bl	800f6f6 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 800efa6:	4620      	mov	r0, r4
 800efa8:	b002      	add	sp, #8
 800efaa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800efae:	bf00      	nop
 800efb0:	0802b978 	.word	0x0802b978
 800efb4:	0802c5e0 	.word	0x0802c5e0
 800efb8:	0802bce8 	.word	0x0802bce8
 800efbc:	0802c474 	.word	0x0802c474

0800efc0 <_ZNK8touchgfx25AbstractProgressIndicator21getProgressIndicatorXEv>:
 800efc0:	f9b0 005c 	ldrsh.w	r0, [r0, #92]	@ 0x5c
 800efc4:	4770      	bx	lr

0800efc6 <_ZNK8touchgfx25AbstractProgressIndicator21getProgressIndicatorYEv>:
 800efc6:	f9b0 005e 	ldrsh.w	r0, [r0, #94]	@ 0x5e
 800efca:	4770      	bx	lr

0800efcc <_ZNK8touchgfx25AbstractProgressIndicator25getProgressIndicatorWidthEv>:
 800efcc:	f9b0 0060 	ldrsh.w	r0, [r0, #96]	@ 0x60
 800efd0:	4770      	bx	lr

0800efd2 <_ZNK8touchgfx25AbstractProgressIndicator26getProgressIndicatorHeightEv>:
 800efd2:	f9b0 0062 	ldrsh.w	r0, [r0, #98]	@ 0x62
 800efd6:	4770      	bx	lr

0800efd8 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEiitt>:
 800efd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800efda:	461e      	mov	r6, r3
 800efdc:	6803      	ldr	r3, [r0, #0]
 800efde:	460f      	mov	r7, r1
 800efe0:	4604      	mov	r4, r0
 800efe2:	4615      	mov	r5, r2
 800efe4:	e9c0 1221 	strd	r1, r2, [r0, #132]	@ 0x84
 800efe8:	f8d0 108c 	ldr.w	r1, [r0, #140]	@ 0x8c
 800efec:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800eff0:	4798      	blx	r3
 800eff2:	b93e      	cbnz	r6, 800f004 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEiitt+0x2c>
 800eff4:	1bed      	subs	r5, r5, r7
 800eff6:	f8a4 5090 	strh.w	r5, [r4, #144]	@ 0x90
 800effa:	f8bd 3018 	ldrh.w	r3, [sp, #24]
 800effe:	f8a4 3092 	strh.w	r3, [r4, #146]	@ 0x92
 800f002:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f004:	f8a4 6090 	strh.w	r6, [r4, #144]	@ 0x90
 800f008:	e7f7      	b.n	800effa <_ZN8touchgfx25AbstractProgressIndicator8setRangeEiitt+0x22>

0800f00a <_ZNK8touchgfx25AbstractProgressIndicator8getRangeERiS1_RtS2_>:
 800f00a:	b510      	push	{r4, lr}
 800f00c:	f8d0 4084 	ldr.w	r4, [r0, #132]	@ 0x84
 800f010:	600c      	str	r4, [r1, #0]
 800f012:	f8d0 1088 	ldr.w	r1, [r0, #136]	@ 0x88
 800f016:	6011      	str	r1, [r2, #0]
 800f018:	f8b0 2090 	ldrh.w	r2, [r0, #144]	@ 0x90
 800f01c:	801a      	strh	r2, [r3, #0]
 800f01e:	9b02      	ldr	r3, [sp, #8]
 800f020:	f8b0 2092 	ldrh.w	r2, [r0, #146]	@ 0x92
 800f024:	801a      	strh	r2, [r3, #0]
 800f026:	bd10      	pop	{r4, pc}

0800f028 <_ZNK8touchgfx25AbstractProgressIndicator8getRangeERiS1_Rt>:
 800f028:	b510      	push	{r4, lr}
 800f02a:	f8d0 4084 	ldr.w	r4, [r0, #132]	@ 0x84
 800f02e:	600c      	str	r4, [r1, #0]
 800f030:	f8d0 1088 	ldr.w	r1, [r0, #136]	@ 0x88
 800f034:	6011      	str	r1, [r2, #0]
 800f036:	f8b0 2090 	ldrh.w	r2, [r0, #144]	@ 0x90
 800f03a:	801a      	strh	r2, [r3, #0]
 800f03c:	bd10      	pop	{r4, pc}

0800f03e <_ZNK8touchgfx25AbstractProgressIndicator8getRangeERiS1_>:
 800f03e:	f8d0 3084 	ldr.w	r3, [r0, #132]	@ 0x84
 800f042:	600b      	str	r3, [r1, #0]
 800f044:	f8d0 3088 	ldr.w	r3, [r0, #136]	@ 0x88
 800f048:	6013      	str	r3, [r2, #0]
 800f04a:	4770      	bx	lr

0800f04c <_ZN8touchgfx25AbstractProgressIndicator17setEasingEquationEPFstsstE>:
 800f04c:	f8c0 1094 	str.w	r1, [r0, #148]	@ 0x94
 800f050:	4770      	bx	lr

0800f052 <_ZNK8touchgfx25AbstractProgressIndicator8getValueEv>:
 800f052:	f8d0 008c 	ldr.w	r0, [r0, #140]	@ 0x8c
 800f056:	4770      	bx	lr

0800f058 <_ZN8touchgfx25AbstractProgressIndicator8setAlphaEh>:
 800f058:	f880 1054 	strb.w	r1, [r0, #84]	@ 0x54
 800f05c:	4770      	bx	lr

0800f05e <_ZNK8touchgfx25AbstractProgressIndicator8getAlphaEv>:
 800f05e:	f890 0054 	ldrb.w	r0, [r0, #84]	@ 0x54
 800f062:	4770      	bx	lr

0800f064 <_ZN8touchgfx25AbstractProgressIndicatorD1Ev>:
 800f064:	4770      	bx	lr

0800f066 <_ZN8touchgfx25AbstractProgressIndicatorD0Ev>:
 800f066:	b510      	push	{r4, lr}
 800f068:	4604      	mov	r4, r0
 800f06a:	21b4      	movs	r1, #180	@ 0xb4
 800f06c:	f017 fd8f 	bl	8026b8e <_ZdlPvj>
 800f070:	4620      	mov	r0, r4
 800f072:	bd10      	pop	{r4, pc}

0800f074 <_ZN8touchgfx25AbstractProgressIndicator11updateValueEit>:
 800f074:	b570      	push	{r4, r5, r6, lr}
 800f076:	f8d0 5084 	ldr.w	r5, [r0, #132]	@ 0x84
 800f07a:	4604      	mov	r4, r0
 800f07c:	4616      	mov	r6, r2
 800f07e:	428d      	cmp	r5, r1
 800f080:	bfb8      	it	lt
 800f082:	460d      	movlt	r5, r1
 800f084:	f8d0 1088 	ldr.w	r1, [r0, #136]	@ 0x88
 800f088:	428d      	cmp	r5, r1
 800f08a:	bfa8      	it	ge
 800f08c:	460d      	movge	r5, r1
 800f08e:	b99a      	cbnz	r2, 800f0b8 <_ZN8touchgfx25AbstractProgressIndicator11updateValueEit+0x44>
 800f090:	6803      	ldr	r3, [r0, #0]
 800f092:	4629      	mov	r1, r5
 800f094:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800f098:	4798      	blx	r3
 800f09a:	f8d4 00b0 	ldr.w	r0, [r4, #176]	@ 0xb0
 800f09e:	b368      	cbz	r0, 800f0fc <_ZN8touchgfx25AbstractProgressIndicator11updateValueEit+0x88>
 800f0a0:	6803      	ldr	r3, [r0, #0]
 800f0a2:	68db      	ldr	r3, [r3, #12]
 800f0a4:	4798      	blx	r3
 800f0a6:	b348      	cbz	r0, 800f0fc <_ZN8touchgfx25AbstractProgressIndicator11updateValueEit+0x88>
 800f0a8:	f8d4 00b0 	ldr.w	r0, [r4, #176]	@ 0xb0
 800f0ac:	4621      	mov	r1, r4
 800f0ae:	6803      	ldr	r3, [r0, #0]
 800f0b0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f0b4:	689b      	ldr	r3, [r3, #8]
 800f0b6:	4718      	bx	r3
 800f0b8:	f8d0 30a4 	ldr.w	r3, [r0, #164]	@ 0xa4
 800f0bc:	2b00      	cmp	r3, #0
 800f0be:	dd08      	ble.n	800f0d2 <_ZN8touchgfx25AbstractProgressIndicator11updateValueEit+0x5e>
 800f0c0:	f008 fa86 	bl	80175d0 <_ZN8touchgfx11Application11getInstanceEv>
 800f0c4:	4621      	mov	r1, r4
 800f0c6:	3004      	adds	r0, #4
 800f0c8:	f008 faa7 	bl	801761a <_ZN8touchgfx11Application12TimerWidgets6removeEPKNS_8DrawableE>
 800f0cc:	2300      	movs	r3, #0
 800f0ce:	f884 3098 	strb.w	r3, [r4, #152]	@ 0x98
 800f0d2:	6823      	ldr	r3, [r4, #0]
 800f0d4:	4620      	mov	r0, r4
 800f0d6:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800f0da:	4798      	blx	r3
 800f0dc:	2300      	movs	r3, #0
 800f0de:	f8c4 60a4 	str.w	r6, [r4, #164]	@ 0xa4
 800f0e2:	f8c4 30a8 	str.w	r3, [r4, #168]	@ 0xa8
 800f0e6:	e9c4 0527 	strd	r0, r5, [r4, #156]	@ 0x9c
 800f0ea:	f008 fa71 	bl	80175d0 <_ZN8touchgfx11Application11getInstanceEv>
 800f0ee:	4621      	mov	r1, r4
 800f0f0:	3004      	adds	r0, #4
 800f0f2:	f008 fb3b 	bl	801776c <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE>
 800f0f6:	2301      	movs	r3, #1
 800f0f8:	f884 3098 	strb.w	r3, [r4, #152]	@ 0x98
 800f0fc:	bd70      	pop	{r4, r5, r6, pc}

0800f0fe <_ZN8touchgfx25AbstractProgressIndicator8setValueEi>:
 800f0fe:	b510      	push	{r4, lr}
 800f100:	f8d0 3084 	ldr.w	r3, [r0, #132]	@ 0x84
 800f104:	4604      	mov	r4, r0
 800f106:	4299      	cmp	r1, r3
 800f108:	bfb8      	it	lt
 800f10a:	4619      	movlt	r1, r3
 800f10c:	f8d0 3088 	ldr.w	r3, [r0, #136]	@ 0x88
 800f110:	4299      	cmp	r1, r3
 800f112:	bfa8      	it	ge
 800f114:	4619      	movge	r1, r3
 800f116:	f8d0 308c 	ldr.w	r3, [r0, #140]	@ 0x8c
 800f11a:	428b      	cmp	r3, r1
 800f11c:	d010      	beq.n	800f140 <_ZN8touchgfx25AbstractProgressIndicator8setValueEi+0x42>
 800f11e:	f8c0 108c 	str.w	r1, [r0, #140]	@ 0x8c
 800f122:	f8d0 00ac 	ldr.w	r0, [r0, #172]	@ 0xac
 800f126:	b158      	cbz	r0, 800f140 <_ZN8touchgfx25AbstractProgressIndicator8setValueEi+0x42>
 800f128:	6803      	ldr	r3, [r0, #0]
 800f12a:	68db      	ldr	r3, [r3, #12]
 800f12c:	4798      	blx	r3
 800f12e:	b138      	cbz	r0, 800f140 <_ZN8touchgfx25AbstractProgressIndicator8setValueEi+0x42>
 800f130:	f8d4 00ac 	ldr.w	r0, [r4, #172]	@ 0xac
 800f134:	4621      	mov	r1, r4
 800f136:	6803      	ldr	r3, [r0, #0]
 800f138:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f13c:	689b      	ldr	r3, [r3, #8]
 800f13e:	4718      	bx	r3
 800f140:	bd10      	pop	{r4, pc}

0800f142 <_ZNK8touchgfx25AbstractProgressIndicator11getProgressEt>:
 800f142:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f144:	4604      	mov	r4, r0
 800f146:	460d      	mov	r5, r1
 800f148:	b1a9      	cbz	r1, 800f176 <_ZNK8touchgfx25AbstractProgressIndicator11getProgressEt+0x34>
 800f14a:	f8b0 6092 	ldrh.w	r6, [r0, #146]	@ 0x92
 800f14e:	ab01      	add	r3, sp, #4
 800f150:	f8b4 1090 	ldrh.w	r1, [r4, #144]	@ 0x90
 800f154:	f8d4 708c 	ldr.w	r7, [r4, #140]	@ 0x8c
 800f158:	1b89      	subs	r1, r1, r6
 800f15a:	e9d0 0221 	ldrd	r0, r2, [r0, #132]	@ 0x84
 800f15e:	1a12      	subs	r2, r2, r0
 800f160:	1a38      	subs	r0, r7, r0
 800f162:	f009 ffe9 	bl	8019138 <_ZN8touchgfx6muldivElllRl>
 800f166:	4629      	mov	r1, r5
 800f168:	ab01      	add	r3, sp, #4
 800f16a:	f8b4 2090 	ldrh.w	r2, [r4, #144]	@ 0x90
 800f16e:	4430      	add	r0, r6
 800f170:	f009 ffe2 	bl	8019138 <_ZN8touchgfx6muldivElllRl>
 800f174:	b285      	uxth	r5, r0
 800f176:	4628      	mov	r0, r5
 800f178:	b003      	add	sp, #12
 800f17a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800f17c <_ZN8touchgfx25AbstractProgressIndicator15handleTickEventEv>:
 800f17c:	b570      	push	{r4, r5, r6, lr}
 800f17e:	f890 3098 	ldrb.w	r3, [r0, #152]	@ 0x98
 800f182:	4604      	mov	r4, r0
 800f184:	2b00      	cmp	r3, #0
 800f186:	d035      	beq.n	800f1f4 <_ZN8touchgfx25AbstractProgressIndicator15handleTickEventEv+0x78>
 800f188:	f8d0 00a8 	ldr.w	r0, [r0, #168]	@ 0xa8
 800f18c:	2100      	movs	r1, #0
 800f18e:	f8d4 5094 	ldr.w	r5, [r4, #148]	@ 0x94
 800f192:	3001      	adds	r0, #1
 800f194:	e9d4 3227 	ldrd	r3, r2, [r4, #156]	@ 0x9c
 800f198:	f8c4 00a8 	str.w	r0, [r4, #168]	@ 0xa8
 800f19c:	b280      	uxth	r0, r0
 800f19e:	1ad2      	subs	r2, r2, r3
 800f1a0:	f8b4 30a4 	ldrh.w	r3, [r4, #164]	@ 0xa4
 800f1a4:	b212      	sxth	r2, r2
 800f1a6:	47a8      	blx	r5
 800f1a8:	f8d4 109c 	ldr.w	r1, [r4, #156]	@ 0x9c
 800f1ac:	6823      	ldr	r3, [r4, #0]
 800f1ae:	4401      	add	r1, r0
 800f1b0:	4620      	mov	r0, r4
 800f1b2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800f1b6:	4798      	blx	r3
 800f1b8:	e9d4 3229 	ldrd	r3, r2, [r4, #164]	@ 0xa4
 800f1bc:	429a      	cmp	r2, r3
 800f1be:	db19      	blt.n	800f1f4 <_ZN8touchgfx25AbstractProgressIndicator15handleTickEventEv+0x78>
 800f1c0:	2500      	movs	r5, #0
 800f1c2:	e9c4 5529 	strd	r5, r5, [r4, #164]	@ 0xa4
 800f1c6:	f008 fa03 	bl	80175d0 <_ZN8touchgfx11Application11getInstanceEv>
 800f1ca:	4621      	mov	r1, r4
 800f1cc:	3004      	adds	r0, #4
 800f1ce:	f008 fa24 	bl	801761a <_ZN8touchgfx11Application12TimerWidgets6removeEPKNS_8DrawableE>
 800f1d2:	f8d4 00b0 	ldr.w	r0, [r4, #176]	@ 0xb0
 800f1d6:	f884 5098 	strb.w	r5, [r4, #152]	@ 0x98
 800f1da:	b158      	cbz	r0, 800f1f4 <_ZN8touchgfx25AbstractProgressIndicator15handleTickEventEv+0x78>
 800f1dc:	6803      	ldr	r3, [r0, #0]
 800f1de:	68db      	ldr	r3, [r3, #12]
 800f1e0:	4798      	blx	r3
 800f1e2:	b138      	cbz	r0, 800f1f4 <_ZN8touchgfx25AbstractProgressIndicator15handleTickEventEv+0x78>
 800f1e4:	f8d4 00b0 	ldr.w	r0, [r4, #176]	@ 0xb0
 800f1e8:	4621      	mov	r1, r4
 800f1ea:	6803      	ldr	r3, [r0, #0]
 800f1ec:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f1f0:	689b      	ldr	r3, [r3, #8]
 800f1f2:	4718      	bx	r3
 800f1f4:	bd70      	pop	{r4, r5, r6, pc}
	...

0800f1f8 <_ZN8touchgfx8DrawableC1Ev>:
 800f1f8:	4a0a      	ldr	r2, [pc, #40]	@ (800f224 <_ZN8touchgfx8DrawableC1Ev+0x2c>)
 800f1fa:	6002      	str	r2, [r0, #0]
 800f1fc:	2200      	movs	r2, #0
 800f1fe:	8082      	strh	r2, [r0, #4]
 800f200:	80c2      	strh	r2, [r0, #6]
 800f202:	8102      	strh	r2, [r0, #8]
 800f204:	8142      	strh	r2, [r0, #10]
 800f206:	8182      	strh	r2, [r0, #12]
 800f208:	81c2      	strh	r2, [r0, #14]
 800f20a:	8202      	strh	r2, [r0, #16]
 800f20c:	8242      	strh	r2, [r0, #18]
 800f20e:	61c2      	str	r2, [r0, #28]
 800f210:	8402      	strh	r2, [r0, #32]
 800f212:	8442      	strh	r2, [r0, #34]	@ 0x22
 800f214:	f880 2024 	strb.w	r2, [r0, #36]	@ 0x24
 800f218:	e9c0 2205 	strd	r2, r2, [r0, #20]
 800f21c:	2201      	movs	r2, #1
 800f21e:	f880 2025 	strb.w	r2, [r0, #37]	@ 0x25
 800f222:	4770      	bx	lr
 800f224:	0802c6b0 	.word	0x0802c6b0

0800f228 <_ZN8touchgfx8Drawable14setWidthHeightEss>:
 800f228:	b570      	push	{r4, r5, r6, lr}
 800f22a:	6803      	ldr	r3, [r0, #0]
 800f22c:	4604      	mov	r4, r0
 800f22e:	4615      	mov	r5, r2
 800f230:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f232:	4798      	blx	r3
 800f234:	6823      	ldr	r3, [r4, #0]
 800f236:	4629      	mov	r1, r5
 800f238:	4620      	mov	r0, r4
 800f23a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f23c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f240:	4718      	bx	r3

0800f242 <_ZN8touchgfx25AbstractProgressIndicator28setProgressIndicatorPositionEssss>:
 800f242:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f246:	4604      	mov	r4, r0
 800f248:	f9bd 7018 	ldrsh.w	r7, [sp, #24]
 800f24c:	4698      	mov	r8, r3
 800f24e:	460e      	mov	r6, r1
 800f250:	4615      	mov	r5, r2
 800f252:	f8a4 105c 	strh.w	r1, [r4, #92]	@ 0x5c
 800f256:	f8a4 205e 	strh.w	r2, [r4, #94]	@ 0x5e
 800f25a:	4619      	mov	r1, r3
 800f25c:	463a      	mov	r2, r7
 800f25e:	3058      	adds	r0, #88	@ 0x58
 800f260:	f7ff ffe2 	bl	800f228 <_ZN8touchgfx8Drawable14setWidthHeightEss>
 800f264:	4446      	add	r6, r8
 800f266:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 800f26a:	443d      	add	r5, r7
 800f26c:	42b3      	cmp	r3, r6
 800f26e:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 800f272:	bfb8      	it	lt
 800f274:	8126      	strhlt	r6, [r4, #8]
 800f276:	42ab      	cmp	r3, r5
 800f278:	bfb8      	it	lt
 800f27a:	8165      	strhlt	r5, [r4, #10]
 800f27c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800f280 <_ZN8touchgfx25AbstractProgressIndicator13setBackgroundERKNS_6BitmapE>:
 800f280:	b510      	push	{r4, lr}
 800f282:	4604      	mov	r4, r0
 800f284:	302c      	adds	r0, #44	@ 0x2c
 800f286:	f005 fd94 	bl	8014db2 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 800f28a:	f9b4 2036 	ldrsh.w	r2, [r4, #54]	@ 0x36
 800f28e:	4620      	mov	r0, r4
 800f290:	f9b4 1034 	ldrsh.w	r1, [r4, #52]	@ 0x34
 800f294:	f7ff ffc8 	bl	800f228 <_ZN8touchgfx8Drawable14setWidthHeightEss>
 800f298:	bd10      	pop	{r4, pc}
	...

0800f29c <_ZN8touchgfx25AbstractProgressIndicatorC1Ev>:
 800f29c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f29e:	4604      	mov	r4, r0
 800f2a0:	2500      	movs	r5, #0
 800f2a2:	f7ff ffa9 	bl	800f1f8 <_ZN8touchgfx8DrawableC1Ev>
 800f2a6:	4b24      	ldr	r3, [pc, #144]	@ (800f338 <_ZN8touchgfx25AbstractProgressIndicatorC1Ev+0x9c>)
 800f2a8:	4626      	mov	r6, r4
 800f2aa:	f64f 77ff 	movw	r7, #65535	@ 0xffff
 800f2ae:	2226      	movs	r2, #38	@ 0x26
 800f2b0:	4629      	mov	r1, r5
 800f2b2:	62a5      	str	r5, [r4, #40]	@ 0x28
 800f2b4:	f846 3b2c 	str.w	r3, [r6], #44
 800f2b8:	4630      	mov	r0, r6
 800f2ba:	f8ad 7004 	strh.w	r7, [sp, #4]
 800f2be:	f018 fa7b 	bl	80277b8 <memset>
 800f2c2:	4630      	mov	r0, r6
 800f2c4:	f7ff ff98 	bl	800f1f8 <_ZN8touchgfx8DrawableC1Ev>
 800f2c8:	a902      	add	r1, sp, #8
 800f2ca:	4b1c      	ldr	r3, [pc, #112]	@ (800f33c <_ZN8touchgfx25AbstractProgressIndicatorC1Ev+0xa0>)
 800f2cc:	4630      	mov	r0, r6
 800f2ce:	f884 7054 	strb.w	r7, [r4, #84]	@ 0x54
 800f2d2:	f104 0758 	add.w	r7, r4, #88	@ 0x58
 800f2d6:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800f2d8:	f831 3d04 	ldrh.w	r3, [r1, #-4]!
 800f2dc:	f8a4 3052 	strh.w	r3, [r4, #82]	@ 0x52
 800f2e0:	f005 fd67 	bl	8014db2 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 800f2e4:	4638      	mov	r0, r7
 800f2e6:	f7ff ff87 	bl	800f1f8 <_ZN8touchgfx8DrawableC1Ev>
 800f2ea:	4b15      	ldr	r3, [pc, #84]	@ (800f340 <_ZN8touchgfx25AbstractProgressIndicatorC1Ev+0xa4>)
 800f2ec:	4629      	mov	r1, r5
 800f2ee:	4630      	mov	r0, r6
 800f2f0:	65a3      	str	r3, [r4, #88]	@ 0x58
 800f2f2:	2364      	movs	r3, #100	@ 0x64
 800f2f4:	f884 5098 	strb.w	r5, [r4, #152]	@ 0x98
 800f2f8:	f8c4 3090 	str.w	r3, [r4, #144]	@ 0x90
 800f2fc:	e9c4 3522 	strd	r3, r5, [r4, #136]	@ 0x88
 800f300:	4b10      	ldr	r3, [pc, #64]	@ (800f344 <_ZN8touchgfx25AbstractProgressIndicatorC1Ev+0xa8>)
 800f302:	e9c4 5520 	strd	r5, r5, [r4, #128]	@ 0x80
 800f306:	f8c4 3094 	str.w	r3, [r4, #148]	@ 0x94
 800f30a:	e9c4 5527 	strd	r5, r5, [r4, #156]	@ 0x9c
 800f30e:	e9c4 5529 	strd	r5, r5, [r4, #164]	@ 0xa4
 800f312:	e9c4 552b 	strd	r5, r5, [r4, #172]	@ 0xac
 800f316:	f7f3 ff7d 	bl	8003214 <_ZN8touchgfx8Drawable4setXEs>
 800f31a:	4629      	mov	r1, r5
 800f31c:	4630      	mov	r0, r6
 800f31e:	f7f3 ff7b 	bl	8003218 <_ZN8touchgfx8Drawable4setYEs>
 800f322:	4631      	mov	r1, r6
 800f324:	4620      	mov	r0, r4
 800f326:	f000 f9e6 	bl	800f6f6 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 800f32a:	4620      	mov	r0, r4
 800f32c:	4639      	mov	r1, r7
 800f32e:	f000 f9e2 	bl	800f6f6 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 800f332:	4620      	mov	r0, r4
 800f334:	b003      	add	sp, #12
 800f336:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f338:	0802ba64 	.word	0x0802ba64
 800f33c:	0802c5e0 	.word	0x0802c5e0
 800f340:	0802bce8 	.word	0x0802bce8
 800f344:	08019913 	.word	0x08019913

0800f348 <_ZN8touchgfx12DigitalClock14setDisplayModeENS0_11DisplayModeE>:
 800f348:	f880 102f 	strb.w	r1, [r0, #47]	@ 0x2f
 800f34c:	4770      	bx	lr

0800f34e <_ZNK8touchgfx12DigitalClock14getDisplayModeEv>:
 800f34e:	f890 002f 	ldrb.w	r0, [r0, #47]	@ 0x2f
 800f352:	4770      	bx	lr

0800f354 <_ZNK8touchgfx12DigitalClock17invalidateContentEv>:
 800f354:	b510      	push	{r4, lr}
 800f356:	6803      	ldr	r3, [r0, #0]
 800f358:	4604      	mov	r4, r0
 800f35a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800f35e:	4798      	blx	r3
 800f360:	b110      	cbz	r0, 800f368 <_ZNK8touchgfx12DigitalClock17invalidateContentEv+0x14>
 800f362:	4620      	mov	r0, r4
 800f364:	f7f4 f81f 	bl	80033a6 <_ZNK8touchgfx8Drawable17invalidateContentEv>
 800f368:	bd10      	pop	{r4, pc}

0800f36a <_ZN8touchgfx12DigitalClock8setWidthEs>:
 800f36a:	b508      	push	{r3, lr}
 800f36c:	3034      	adds	r0, #52	@ 0x34
 800f36e:	f820 1c2c 	strh.w	r1, [r0, #-44]
 800f372:	f7f4 ff04 	bl	800417e <_ZN8touchgfx8TextArea8setWidthEs>
 800f376:	bd08      	pop	{r3, pc}

0800f378 <_ZN8touchgfx12DigitalClock9setHeightEs>:
 800f378:	b508      	push	{r3, lr}
 800f37a:	3034      	adds	r0, #52	@ 0x34
 800f37c:	f820 1c2a 	strh.w	r1, [r0, #-42]
 800f380:	f7f4 ff0f 	bl	80041a2 <_ZN8touchgfx8TextArea9setHeightEs>
 800f384:	bd08      	pop	{r3, pc}
	...

0800f388 <_ZN8touchgfx12DigitalClock12setBaselineYEs>:
 800f388:	4a11      	ldr	r2, [pc, #68]	@ (800f3d0 <_ZN8touchgfx12DigitalClock12setBaselineYEs+0x48>)
 800f38a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f38e:	f8b0 3060 	ldrh.w	r3, [r0, #96]	@ 0x60
 800f392:	4604      	mov	r4, r0
 800f394:	8812      	ldrh	r2, [r2, #0]
 800f396:	460d      	mov	r5, r1
 800f398:	429a      	cmp	r2, r3
 800f39a:	d916      	bls.n	800f3ca <_ZN8touchgfx12DigitalClock12setBaselineYEs+0x42>
 800f39c:	6802      	ldr	r2, [r0, #0]
 800f39e:	f9b0 7004 	ldrsh.w	r7, [r0, #4]
 800f3a2:	6d96      	ldr	r6, [r2, #88]	@ 0x58
 800f3a4:	4a0b      	ldr	r2, [pc, #44]	@ (800f3d4 <_ZN8touchgfx12DigitalClock12setBaselineYEs+0x4c>)
 800f3a6:	6812      	ldr	r2, [r2, #0]
 800f3a8:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 800f3ac:	4b0a      	ldr	r3, [pc, #40]	@ (800f3d8 <_ZN8touchgfx12DigitalClock12setBaselineYEs+0x50>)
 800f3ae:	681b      	ldr	r3, [r3, #0]
 800f3b0:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800f3b4:	6803      	ldr	r3, [r0, #0]
 800f3b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f3b8:	4798      	blx	r3
 800f3ba:	1a2a      	subs	r2, r5, r0
 800f3bc:	4639      	mov	r1, r7
 800f3be:	4620      	mov	r0, r4
 800f3c0:	4633      	mov	r3, r6
 800f3c2:	b212      	sxth	r2, r2
 800f3c4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f3c8:	4718      	bx	r3
 800f3ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f3ce:	bf00      	nop
 800f3d0:	24028e7c 	.word	0x24028e7c
 800f3d4:	24028e78 	.word	0x24028e78
 800f3d8:	24028e80 	.word	0x24028e80

0800f3dc <_ZN8touchgfx12DigitalClock8setAlphaEh>:
 800f3dc:	f880 106a 	strb.w	r1, [r0, #106]	@ 0x6a
 800f3e0:	4770      	bx	lr

0800f3e2 <_ZNK8touchgfx12DigitalClock8getAlphaEv>:
 800f3e2:	f890 006a 	ldrb.w	r0, [r0, #106]	@ 0x6a
 800f3e6:	4770      	bx	lr

0800f3e8 <_ZN8touchgfx12DigitalClock8setColorENS_9colortypeE>:
 800f3e8:	b508      	push	{r3, lr}
 800f3ea:	3034      	adds	r0, #52	@ 0x34
 800f3ec:	6301      	str	r1, [r0, #48]	@ 0x30
 800f3ee:	f7f3 ffda 	bl	80033a6 <_ZNK8touchgfx8Drawable17invalidateContentEv>
 800f3f2:	bd08      	pop	{r3, pc}

0800f3f4 <_ZNK8touchgfx12DigitalClock8getColorEv>:
 800f3f4:	6e40      	ldr	r0, [r0, #100]	@ 0x64
 800f3f6:	4770      	bx	lr

0800f3f8 <_ZN8touchgfx12DigitalClockD1Ev>:
 800f3f8:	4770      	bx	lr

0800f3fa <_ZNK8touchgfx12DigitalClock12getTextWidthEv>:
 800f3fa:	3034      	adds	r0, #52	@ 0x34
 800f3fc:	f004 bd6a 	b.w	8013ed4 <_ZNK8touchgfx8TextArea12getTextWidthEv>

0800f400 <_ZN8touchgfx12DigitalClockD0Ev>:
 800f400:	b510      	push	{r4, lr}
 800f402:	4604      	mov	r4, r0
 800f404:	2198      	movs	r1, #152	@ 0x98
 800f406:	f017 fbc2 	bl	8026b8e <_ZdlPvj>
 800f40a:	4620      	mov	r0, r4
 800f40c:	bd10      	pop	{r4, pc}

0800f40e <_ZN8touchgfx12DigitalClock12setTypedTextENS_9TypedTextE>:
 800f40e:	b538      	push	{r3, r4, r5, lr}
 800f410:	f100 0434 	add.w	r4, r0, #52	@ 0x34
 800f414:	460d      	mov	r5, r1
 800f416:	4620      	mov	r0, r4
 800f418:	f7f3 ffc5 	bl	80033a6 <_ZNK8touchgfx8Drawable17invalidateContentEv>
 800f41c:	4620      	mov	r0, r4
 800f41e:	4629      	mov	r1, r5
 800f420:	f005 f894 	bl	801454c <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 800f424:	4620      	mov	r0, r4
 800f426:	f7f3 ffbe 	bl	80033a6 <_ZNK8touchgfx8Drawable17invalidateContentEv>
 800f42a:	bd38      	pop	{r3, r4, r5, pc}

0800f42c <_ZN8touchgfx12DigitalClock11updateClockEv>:
 800f42c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f430:	f100 0634 	add.w	r6, r0, #52	@ 0x34
 800f434:	4604      	mov	r4, r0
 800f436:	4630      	mov	r0, r6
 800f438:	f7f3 ffb5 	bl	80033a6 <_ZNK8touchgfx8Drawable17invalidateContentEv>
 800f43c:	f894 302f 	ldrb.w	r3, [r4, #47]	@ 0x2f
 800f440:	bb0b      	cbnz	r3, 800f486 <_ZN8touchgfx12DigitalClock11updateClockEv+0x5a>
 800f442:	f894 3030 	ldrb.w	r3, [r4, #48]	@ 0x30
 800f446:	4620      	mov	r0, r4
 800f448:	4a40      	ldr	r2, [pc, #256]	@ (800f54c <_ZN8touchgfx12DigitalClock11updateClockEv+0x120>)
 800f44a:	f104 0780 	add.w	r7, r4, #128	@ 0x80
 800f44e:	4d40      	ldr	r5, [pc, #256]	@ (800f550 <_ZN8touchgfx12DigitalClock11updateClockEv+0x124>)
 800f450:	2b00      	cmp	r3, #0
 800f452:	bf08      	it	eq
 800f454:	4615      	moveq	r5, r2
 800f456:	f000 f92b 	bl	800f6b0 <_ZNK8touchgfx13AbstractClock16getCurrentHour12Ev>
 800f45a:	4680      	mov	r8, r0
 800f45c:	4620      	mov	r0, r4
 800f45e:	f000 f93a 	bl	800f6d6 <_ZNK8touchgfx13AbstractClock16getCurrentMinuteEv>
 800f462:	4681      	mov	r9, r0
 800f464:	4620      	mov	r0, r4
 800f466:	f000 f92f 	bl	800f6c8 <_ZNK8touchgfx13AbstractClock12getCurrentAMEv>
 800f46a:	2800      	cmp	r0, #0
 800f46c:	462a      	mov	r2, r5
 800f46e:	f04f 010c 	mov.w	r1, #12
 800f472:	bf14      	ite	ne
 800f474:	2341      	movne	r3, #65	@ 0x41
 800f476:	2350      	moveq	r3, #80	@ 0x50
 800f478:	4638      	mov	r0, r7
 800f47a:	e9cd 9300 	strd	r9, r3, [sp]
 800f47e:	4643      	mov	r3, r8
 800f480:	f00b fd48 	bl	801af14 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 800f484:	e017      	b.n	800f4b6 <_ZN8touchgfx12DigitalClock11updateClockEv+0x8a>
 800f486:	2b01      	cmp	r3, #1
 800f488:	d11b      	bne.n	800f4c2 <_ZN8touchgfx12DigitalClock11updateClockEv+0x96>
 800f48a:	f894 3030 	ldrb.w	r3, [r4, #48]	@ 0x30
 800f48e:	4620      	mov	r0, r4
 800f490:	4a30      	ldr	r2, [pc, #192]	@ (800f554 <_ZN8touchgfx12DigitalClock11updateClockEv+0x128>)
 800f492:	4d31      	ldr	r5, [pc, #196]	@ (800f558 <_ZN8touchgfx12DigitalClock11updateClockEv+0x12c>)
 800f494:	2b00      	cmp	r3, #0
 800f496:	bf08      	it	eq
 800f498:	4615      	moveq	r5, r2
 800f49a:	f000 f906 	bl	800f6aa <_ZNK8touchgfx13AbstractClock16getCurrentHour24Ev>
 800f49e:	4607      	mov	r7, r0
 800f4a0:	4620      	mov	r0, r4
 800f4a2:	f000 f918 	bl	800f6d6 <_ZNK8touchgfx13AbstractClock16getCurrentMinuteEv>
 800f4a6:	462a      	mov	r2, r5
 800f4a8:	9000      	str	r0, [sp, #0]
 800f4aa:	463b      	mov	r3, r7
 800f4ac:	210c      	movs	r1, #12
 800f4ae:	f104 0080 	add.w	r0, r4, #128	@ 0x80
 800f4b2:	f00b fd2f 	bl	801af14 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 800f4b6:	4630      	mov	r0, r6
 800f4b8:	f7f3 ff75 	bl	80033a6 <_ZNK8touchgfx8Drawable17invalidateContentEv>
 800f4bc:	b004      	add	sp, #16
 800f4be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f4c2:	2b02      	cmp	r3, #2
 800f4c4:	d126      	bne.n	800f514 <_ZN8touchgfx12DigitalClock11updateClockEv+0xe8>
 800f4c6:	f894 3030 	ldrb.w	r3, [r4, #48]	@ 0x30
 800f4ca:	4620      	mov	r0, r4
 800f4cc:	4a23      	ldr	r2, [pc, #140]	@ (800f55c <_ZN8touchgfx12DigitalClock11updateClockEv+0x130>)
 800f4ce:	f104 0780 	add.w	r7, r4, #128	@ 0x80
 800f4d2:	4d23      	ldr	r5, [pc, #140]	@ (800f560 <_ZN8touchgfx12DigitalClock11updateClockEv+0x134>)
 800f4d4:	2b00      	cmp	r3, #0
 800f4d6:	bf08      	it	eq
 800f4d8:	4615      	moveq	r5, r2
 800f4da:	f000 f8e9 	bl	800f6b0 <_ZNK8touchgfx13AbstractClock16getCurrentHour12Ev>
 800f4de:	4680      	mov	r8, r0
 800f4e0:	4620      	mov	r0, r4
 800f4e2:	f000 f8f8 	bl	800f6d6 <_ZNK8touchgfx13AbstractClock16getCurrentMinuteEv>
 800f4e6:	4681      	mov	r9, r0
 800f4e8:	4620      	mov	r0, r4
 800f4ea:	f000 f8f7 	bl	800f6dc <_ZNK8touchgfx13AbstractClock16getCurrentSecondEv>
 800f4ee:	4682      	mov	sl, r0
 800f4f0:	4620      	mov	r0, r4
 800f4f2:	f000 f8e9 	bl	800f6c8 <_ZNK8touchgfx13AbstractClock12getCurrentAMEv>
 800f4f6:	2800      	cmp	r0, #0
 800f4f8:	f8cd 9000 	str.w	r9, [sp]
 800f4fc:	462a      	mov	r2, r5
 800f4fe:	bf14      	ite	ne
 800f500:	2341      	movne	r3, #65	@ 0x41
 800f502:	2350      	moveq	r3, #80	@ 0x50
 800f504:	210c      	movs	r1, #12
 800f506:	4638      	mov	r0, r7
 800f508:	e9cd a301 	strd	sl, r3, [sp, #4]
 800f50c:	4643      	mov	r3, r8
 800f50e:	f00b fd01 	bl	801af14 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 800f512:	e7d0      	b.n	800f4b6 <_ZN8touchgfx12DigitalClock11updateClockEv+0x8a>
 800f514:	2b03      	cmp	r3, #3
 800f516:	d1ce      	bne.n	800f4b6 <_ZN8touchgfx12DigitalClock11updateClockEv+0x8a>
 800f518:	f894 3030 	ldrb.w	r3, [r4, #48]	@ 0x30
 800f51c:	4620      	mov	r0, r4
 800f51e:	4a11      	ldr	r2, [pc, #68]	@ (800f564 <_ZN8touchgfx12DigitalClock11updateClockEv+0x138>)
 800f520:	4d11      	ldr	r5, [pc, #68]	@ (800f568 <_ZN8touchgfx12DigitalClock11updateClockEv+0x13c>)
 800f522:	2b00      	cmp	r3, #0
 800f524:	bf08      	it	eq
 800f526:	4615      	moveq	r5, r2
 800f528:	f000 f8bf 	bl	800f6aa <_ZNK8touchgfx13AbstractClock16getCurrentHour24Ev>
 800f52c:	4607      	mov	r7, r0
 800f52e:	4620      	mov	r0, r4
 800f530:	f000 f8d1 	bl	800f6d6 <_ZNK8touchgfx13AbstractClock16getCurrentMinuteEv>
 800f534:	4680      	mov	r8, r0
 800f536:	4620      	mov	r0, r4
 800f538:	f000 f8d0 	bl	800f6dc <_ZNK8touchgfx13AbstractClock16getCurrentSecondEv>
 800f53c:	463b      	mov	r3, r7
 800f53e:	462a      	mov	r2, r5
 800f540:	210c      	movs	r1, #12
 800f542:	e9cd 8000 	strd	r8, r0, [sp]
 800f546:	f104 0080 	add.w	r0, r4, #128	@ 0x80
 800f54a:	e799      	b.n	800f480 <_ZN8touchgfx12DigitalClock11updateClockEv+0x54>
 800f54c:	0802bb30 	.word	0x0802bb30
 800f550:	0802bb5a 	.word	0x0802bb5a
 800f554:	0802bb3c 	.word	0x0802bb3c
 800f558:	0802bb7a 	.word	0x0802bb7a
 800f55c:	0802bb57 	.word	0x0802bb57
 800f560:	0802bb44 	.word	0x0802bb44
 800f564:	0802bb77 	.word	0x0802bb77
 800f568:	0802bb68 	.word	0x0802bb68

0800f56c <_ZN8touchgfx12DigitalClockC1Ev>:
 800f56c:	b510      	push	{r4, lr}
 800f56e:	4604      	mov	r4, r0
 800f570:	f000 f87c 	bl	800f66c <_ZN8touchgfx13AbstractClockC1Ev>
 800f574:	2201      	movs	r2, #1
 800f576:	4b21      	ldr	r3, [pc, #132]	@ (800f5fc <_ZN8touchgfx12DigitalClockC1Ev+0x90>)
 800f578:	f44f 017f 	mov.w	r1, #16711680	@ 0xff0000
 800f57c:	4620      	mov	r0, r4
 800f57e:	f884 2059 	strb.w	r2, [r4, #89]	@ 0x59
 800f582:	4a1f      	ldr	r2, [pc, #124]	@ (800f600 <_ZN8touchgfx12DigitalClockC1Ev+0x94>)
 800f584:	6023      	str	r3, [r4, #0]
 800f586:	2303      	movs	r3, #3
 800f588:	65e2      	str	r2, [r4, #92]	@ 0x5c
 800f58a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800f58e:	f884 302f 	strb.w	r3, [r4, #47]	@ 0x2f
 800f592:	2300      	movs	r3, #0
 800f594:	f8a4 2060 	strh.w	r2, [r4, #96]	@ 0x60
 800f598:	f8a4 2074 	strh.w	r2, [r4, #116]	@ 0x74
 800f59c:	f8a4 2076 	strh.w	r2, [r4, #118]	@ 0x76
 800f5a0:	4a18      	ldr	r2, [pc, #96]	@ (800f604 <_ZN8touchgfx12DigitalClockC1Ev+0x98>)
 800f5a2:	66a1      	str	r1, [r4, #104]	@ 0x68
 800f5a4:	f104 0134 	add.w	r1, r4, #52	@ 0x34
 800f5a8:	6362      	str	r2, [r4, #52]	@ 0x34
 800f5aa:	4622      	mov	r2, r4
 800f5ac:	f884 3030 	strb.w	r3, [r4, #48]	@ 0x30
 800f5b0:	8723      	strh	r3, [r4, #56]	@ 0x38
 800f5b2:	8763      	strh	r3, [r4, #58]	@ 0x3a
 800f5b4:	87a3      	strh	r3, [r4, #60]	@ 0x3c
 800f5b6:	87e3      	strh	r3, [r4, #62]	@ 0x3e
 800f5b8:	f8a4 3040 	strh.w	r3, [r4, #64]	@ 0x40
 800f5bc:	f8a4 3042 	strh.w	r3, [r4, #66]	@ 0x42
 800f5c0:	f8a4 3044 	strh.w	r3, [r4, #68]	@ 0x44
 800f5c4:	f8a4 3046 	strh.w	r3, [r4, #70]	@ 0x46
 800f5c8:	6523      	str	r3, [r4, #80]	@ 0x50
 800f5ca:	f8a4 3054 	strh.w	r3, [r4, #84]	@ 0x54
 800f5ce:	f8a4 3056 	strh.w	r3, [r4, #86]	@ 0x56
 800f5d2:	f884 3058 	strb.w	r3, [r4, #88]	@ 0x58
 800f5d6:	6663      	str	r3, [r4, #100]	@ 0x64
 800f5d8:	f884 306c 	strb.w	r3, [r4, #108]	@ 0x6c
 800f5dc:	f884 306d 	strb.w	r3, [r4, #109]	@ 0x6d
 800f5e0:	f8a4 3070 	strh.w	r3, [r4, #112]	@ 0x70
 800f5e4:	f8a4 3072 	strh.w	r3, [r4, #114]	@ 0x72
 800f5e8:	67a3      	str	r3, [r4, #120]	@ 0x78
 800f5ea:	e9c4 3312 	strd	r3, r3, [r4, #72]	@ 0x48
 800f5ee:	f822 3f80 	strh.w	r3, [r2, #128]!
 800f5f2:	67e2      	str	r2, [r4, #124]	@ 0x7c
 800f5f4:	f000 f87f 	bl	800f6f6 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 800f5f8:	4620      	mov	r0, r4
 800f5fa:	bd10      	pop	{r4, pc}
 800f5fc:	0802bb8c 	.word	0x0802bb8c
 800f600:	0802a5c4 	.word	0x0802a5c4
 800f604:	0802ae80 	.word	0x0802ae80

0800f608 <_ZN8touchgfx12DigitalClock34displayLeadingZeroForHourIndicatorEb>:
 800f608:	f880 1030 	strb.w	r1, [r0, #48]	@ 0x30
 800f60c:	4770      	bx	lr

0800f60e <_ZN8touchgfx13AbstractClock13setTime24HourEhhh>:
 800f60e:	b470      	push	{r4, r5, r6}
 800f610:	2518      	movs	r5, #24
 800f612:	fbb1 f6f5 	udiv	r6, r1, r5
 800f616:	fb06 1115 	mls	r1, r6, r5, r1
 800f61a:	f880 102c 	strb.w	r1, [r0, #44]	@ 0x2c
 800f61e:	213c      	movs	r1, #60	@ 0x3c
 800f620:	fbb2 f5f1 	udiv	r5, r2, r1
 800f624:	fb05 2211 	mls	r2, r5, r1, r2
 800f628:	f880 202d 	strb.w	r2, [r0, #45]	@ 0x2d
 800f62c:	fbb3 f2f1 	udiv	r2, r3, r1
 800f630:	fb02 3311 	mls	r3, r2, r1, r3
 800f634:	f880 302e 	strb.w	r3, [r0, #46]	@ 0x2e
 800f638:	6803      	ldr	r3, [r0, #0]
 800f63a:	bc70      	pop	{r4, r5, r6}
 800f63c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f640:	4718      	bx	r3

0800f642 <_ZN8touchgfx13AbstractClock13setTime12HourEhhhb>:
 800f642:	b4f0      	push	{r4, r5, r6, r7}
 800f644:	6804      	ldr	r4, [r0, #0]
 800f646:	f89d 6010 	ldrb.w	r6, [sp, #16]
 800f64a:	f8d4 5088 	ldr.w	r5, [r4, #136]	@ 0x88
 800f64e:	240c      	movs	r4, #12
 800f650:	2e00      	cmp	r6, #0
 800f652:	46ac      	mov	ip, r5
 800f654:	fbb1 f7f4 	udiv	r7, r1, r4
 800f658:	fb07 1114 	mls	r1, r7, r4, r1
 800f65c:	bf18      	it	ne
 800f65e:	2400      	movne	r4, #0
 800f660:	fa54 f181 	uxtab	r1, r4, r1
 800f664:	bcf0      	pop	{r4, r5, r6, r7}
 800f666:	b2c9      	uxtb	r1, r1
 800f668:	4760      	bx	ip
	...

0800f66c <_ZN8touchgfx13AbstractClockC1Ev>:
 800f66c:	2101      	movs	r1, #1
 800f66e:	2200      	movs	r2, #0
 800f670:	f880 1025 	strb.w	r1, [r0, #37]	@ 0x25
 800f674:	490a      	ldr	r1, [pc, #40]	@ (800f6a0 <_ZN8touchgfx13AbstractClockC1Ev+0x34>)
 800f676:	8082      	strh	r2, [r0, #4]
 800f678:	80c2      	strh	r2, [r0, #6]
 800f67a:	8102      	strh	r2, [r0, #8]
 800f67c:	8142      	strh	r2, [r0, #10]
 800f67e:	8182      	strh	r2, [r0, #12]
 800f680:	81c2      	strh	r2, [r0, #14]
 800f682:	8202      	strh	r2, [r0, #16]
 800f684:	8242      	strh	r2, [r0, #18]
 800f686:	61c2      	str	r2, [r0, #28]
 800f688:	8402      	strh	r2, [r0, #32]
 800f68a:	8442      	strh	r2, [r0, #34]	@ 0x22
 800f68c:	f880 2024 	strb.w	r2, [r0, #36]	@ 0x24
 800f690:	6001      	str	r1, [r0, #0]
 800f692:	6282      	str	r2, [r0, #40]	@ 0x28
 800f694:	8582      	strh	r2, [r0, #44]	@ 0x2c
 800f696:	f880 202e 	strb.w	r2, [r0, #46]	@ 0x2e
 800f69a:	e9c0 2205 	strd	r2, r2, [r0, #20]
 800f69e:	4770      	bx	lr
 800f6a0:	0802bc4c 	.word	0x0802bc4c

0800f6a4 <_ZNK8touchgfx13AbstractClock14getCurrentHourEv>:
 800f6a4:	f890 002c 	ldrb.w	r0, [r0, #44]	@ 0x2c
 800f6a8:	4770      	bx	lr

0800f6aa <_ZNK8touchgfx13AbstractClock16getCurrentHour24Ev>:
 800f6aa:	f890 002c 	ldrb.w	r0, [r0, #44]	@ 0x2c
 800f6ae:	4770      	bx	lr

0800f6b0 <_ZNK8touchgfx13AbstractClock16getCurrentHour12Ev>:
 800f6b0:	f890 002c 	ldrb.w	r0, [r0, #44]	@ 0x2c
 800f6b4:	220c      	movs	r2, #12
 800f6b6:	f100 030b 	add.w	r3, r0, #11
 800f6ba:	fb93 f0f2 	sdiv	r0, r3, r2
 800f6be:	fb02 3010 	mls	r0, r2, r0, r3
 800f6c2:	3001      	adds	r0, #1
 800f6c4:	b2c0      	uxtb	r0, r0
 800f6c6:	4770      	bx	lr

0800f6c8 <_ZNK8touchgfx13AbstractClock12getCurrentAMEv>:
 800f6c8:	f890 002c 	ldrb.w	r0, [r0, #44]	@ 0x2c
 800f6cc:	280b      	cmp	r0, #11
 800f6ce:	bf8c      	ite	hi
 800f6d0:	2000      	movhi	r0, #0
 800f6d2:	2001      	movls	r0, #1
 800f6d4:	4770      	bx	lr

0800f6d6 <_ZNK8touchgfx13AbstractClock16getCurrentMinuteEv>:
 800f6d6:	f890 002d 	ldrb.w	r0, [r0, #45]	@ 0x2d
 800f6da:	4770      	bx	lr

0800f6dc <_ZNK8touchgfx13AbstractClock16getCurrentSecondEv>:
 800f6dc:	f890 002e 	ldrb.w	r0, [r0, #46]	@ 0x2e
 800f6e0:	4770      	bx	lr

0800f6e2 <_ZN8touchgfx9Container8containsERKNS_8DrawableE>:
 800f6e2:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 800f6e4:	2000      	movs	r0, #0
 800f6e6:	b12b      	cbz	r3, 800f6f4 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 800f6e8:	b920      	cbnz	r0, 800f6f4 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 800f6ea:	1a5a      	subs	r2, r3, r1
 800f6ec:	699b      	ldr	r3, [r3, #24]
 800f6ee:	4250      	negs	r0, r2
 800f6f0:	4150      	adcs	r0, r2
 800f6f2:	e7f8      	b.n	800f6e6 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x4>
 800f6f4:	4770      	bx	lr

0800f6f6 <_ZN8touchgfx9Container3addERNS_8DrawableE>:
 800f6f6:	2300      	movs	r3, #0
 800f6f8:	6148      	str	r0, [r1, #20]
 800f6fa:	618b      	str	r3, [r1, #24]
 800f6fc:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 800f6fe:	b913      	cbnz	r3, 800f706 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x10>
 800f700:	6281      	str	r1, [r0, #40]	@ 0x28
 800f702:	4770      	bx	lr
 800f704:	4613      	mov	r3, r2
 800f706:	699a      	ldr	r2, [r3, #24]
 800f708:	2a00      	cmp	r2, #0
 800f70a:	d1fb      	bne.n	800f704 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xe>
 800f70c:	6199      	str	r1, [r3, #24]
 800f70e:	4770      	bx	lr

0800f710 <_ZN8touchgfx9Container9removeAllEv>:
 800f710:	2200      	movs	r2, #0
 800f712:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 800f714:	b123      	cbz	r3, 800f720 <_ZN8touchgfx9Container9removeAllEv+0x10>
 800f716:	6999      	ldr	r1, [r3, #24]
 800f718:	6281      	str	r1, [r0, #40]	@ 0x28
 800f71a:	e9c3 2205 	strd	r2, r2, [r3, #20]
 800f71e:	e7f8      	b.n	800f712 <_ZN8touchgfx9Container9removeAllEv+0x2>
 800f720:	4770      	bx	lr

0800f722 <_ZN8touchgfx9Container6unlinkEv>:
 800f722:	2300      	movs	r3, #0
 800f724:	6283      	str	r3, [r0, #40]	@ 0x28
 800f726:	4770      	bx	lr

0800f728 <_ZNK8touchgfx9Container12getSolidRectEv>:
 800f728:	2200      	movs	r2, #0
 800f72a:	8002      	strh	r2, [r0, #0]
 800f72c:	8042      	strh	r2, [r0, #2]
 800f72e:	8082      	strh	r2, [r0, #4]
 800f730:	80c2      	strh	r2, [r0, #6]
 800f732:	4770      	bx	lr

0800f734 <_ZN8touchgfx9Container20moveChildrenRelativeEss>:
 800f734:	b570      	push	{r4, r5, r6, lr}
 800f736:	460d      	mov	r5, r1
 800f738:	4616      	mov	r6, r2
 800f73a:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 800f73c:	b13c      	cbz	r4, 800f74e <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x1a>
 800f73e:	6823      	ldr	r3, [r4, #0]
 800f740:	4620      	mov	r0, r4
 800f742:	4632      	mov	r2, r6
 800f744:	4629      	mov	r1, r5
 800f746:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f748:	4798      	blx	r3
 800f74a:	69a4      	ldr	r4, [r4, #24]
 800f74c:	e7f6      	b.n	800f73c <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x8>
 800f74e:	bd70      	pop	{r4, r5, r6, pc}

0800f750 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE>:
 800f750:	b538      	push	{r3, r4, r5, lr}
 800f752:	460d      	mov	r5, r1
 800f754:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 800f756:	b134      	cbz	r4, 800f766 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x16>
 800f758:	682b      	ldr	r3, [r5, #0]
 800f75a:	4621      	mov	r1, r4
 800f75c:	4628      	mov	r0, r5
 800f75e:	689b      	ldr	r3, [r3, #8]
 800f760:	4798      	blx	r3
 800f762:	69a4      	ldr	r4, [r4, #24]
 800f764:	e7f7      	b.n	800f756 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x6>
 800f766:	bd38      	pop	{r3, r4, r5, pc}

0800f768 <_ZN8touchgfx9ContainerD1Ev>:
 800f768:	4770      	bx	lr

0800f76a <_ZN8touchgfx9ContainerD0Ev>:
 800f76a:	b510      	push	{r4, lr}
 800f76c:	4604      	mov	r4, r0
 800f76e:	212c      	movs	r1, #44	@ 0x2c
 800f770:	f017 fa0d 	bl	8026b8e <_ZdlPvj>
 800f774:	4620      	mov	r0, r4
 800f776:	bd10      	pop	{r4, pc}

0800f778 <_ZN8touchgfx9Container6removeERNS_8DrawableE>:
 800f778:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 800f77a:	b19b      	cbz	r3, 800f7a4 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 800f77c:	428b      	cmp	r3, r1
 800f77e:	d109      	bne.n	800f794 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x1c>
 800f780:	699a      	ldr	r2, [r3, #24]
 800f782:	2100      	movs	r1, #0
 800f784:	6159      	str	r1, [r3, #20]
 800f786:	6282      	str	r2, [r0, #40]	@ 0x28
 800f788:	b902      	cbnz	r2, 800f78c <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x14>
 800f78a:	4770      	bx	lr
 800f78c:	6199      	str	r1, [r3, #24]
 800f78e:	4770      	bx	lr
 800f790:	4613      	mov	r3, r2
 800f792:	b13a      	cbz	r2, 800f7a4 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 800f794:	699a      	ldr	r2, [r3, #24]
 800f796:	428a      	cmp	r2, r1
 800f798:	d1fa      	bne.n	800f790 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x18>
 800f79a:	698a      	ldr	r2, [r1, #24]
 800f79c:	619a      	str	r2, [r3, #24]
 800f79e:	2300      	movs	r3, #0
 800f7a0:	e9c1 3305 	strd	r3, r3, [r1, #20]
 800f7a4:	4770      	bx	lr

0800f7a6 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_>:
 800f7a6:	b410      	push	{r4}
 800f7a8:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 800f7aa:	4604      	mov	r4, r0
 800f7ac:	b92b      	cbnz	r3, 800f7ba <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x14>
 800f7ae:	6803      	ldr	r3, [r0, #0]
 800f7b0:	4611      	mov	r1, r2
 800f7b2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f7b6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800f7b8:	4718      	bx	r3
 800f7ba:	b941      	cbnz	r1, 800f7ce <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x28>
 800f7bc:	6193      	str	r3, [r2, #24]
 800f7be:	6282      	str	r2, [r0, #40]	@ 0x28
 800f7c0:	6154      	str	r4, [r2, #20]
 800f7c2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f7c6:	4770      	bx	lr
 800f7c8:	4603      	mov	r3, r0
 800f7ca:	2800      	cmp	r0, #0
 800f7cc:	d0f9      	beq.n	800f7c2 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1c>
 800f7ce:	4299      	cmp	r1, r3
 800f7d0:	6998      	ldr	r0, [r3, #24]
 800f7d2:	d1f9      	bne.n	800f7c8 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x22>
 800f7d4:	6190      	str	r0, [r2, #24]
 800f7d6:	618a      	str	r2, [r1, #24]
 800f7d8:	e7f2      	b.n	800f7c0 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1a>

0800f7da <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>:
 800f7da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f7de:	461f      	mov	r7, r3
 800f7e0:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
 800f7e4:	460d      	mov	r5, r1
 800f7e6:	4616      	mov	r6, r2
 800f7e8:	b103      	cbz	r3, 800f7ec <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x12>
 800f7ea:	6038      	str	r0, [r7, #0]
 800f7ec:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 800f7ee:	b314      	cbz	r4, 800f836 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x5c>
 800f7f0:	f894 3025 	ldrb.w	r3, [r4, #37]	@ 0x25
 800f7f4:	b1eb      	cbz	r3, 800f832 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 800f7f6:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 800f7fa:	428d      	cmp	r5, r1
 800f7fc:	db19      	blt.n	800f832 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 800f7fe:	b289      	uxth	r1, r1
 800f800:	8923      	ldrh	r3, [r4, #8]
 800f802:	440b      	add	r3, r1
 800f804:	b21b      	sxth	r3, r3
 800f806:	429d      	cmp	r5, r3
 800f808:	da13      	bge.n	800f832 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 800f80a:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 800f80e:	4296      	cmp	r6, r2
 800f810:	db0f      	blt.n	800f832 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 800f812:	b292      	uxth	r2, r2
 800f814:	8963      	ldrh	r3, [r4, #10]
 800f816:	4413      	add	r3, r2
 800f818:	b21b      	sxth	r3, r3
 800f81a:	429e      	cmp	r6, r3
 800f81c:	da09      	bge.n	800f832 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 800f81e:	6823      	ldr	r3, [r4, #0]
 800f820:	1ab2      	subs	r2, r6, r2
 800f822:	1a69      	subs	r1, r5, r1
 800f824:	4620      	mov	r0, r4
 800f826:	f8d3 8024 	ldr.w	r8, [r3, #36]	@ 0x24
 800f82a:	b212      	sxth	r2, r2
 800f82c:	463b      	mov	r3, r7
 800f82e:	b209      	sxth	r1, r1
 800f830:	47c0      	blx	r8
 800f832:	69a4      	ldr	r4, [r4, #24]
 800f834:	e7db      	b.n	800f7ee <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x14>
 800f836:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

0800f83c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>:
 800f83c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f840:	4c6d      	ldr	r4, [pc, #436]	@ (800f9f8 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1bc>)
 800f842:	b0a1      	sub	sp, #132	@ 0x84
 800f844:	4606      	mov	r6, r0
 800f846:	6824      	ldr	r4, [r4, #0]
 800f848:	9d2a      	ldr	r5, [sp, #168]	@ 0xa8
 800f84a:	f894 9049 	ldrb.w	r9, [r4, #73]	@ 0x49
 800f84e:	2400      	movs	r4, #0
 800f850:	9303      	str	r3, [sp, #12]
 800f852:	802c      	strh	r4, [r5, #0]
 800f854:	9d2b      	ldr	r5, [sp, #172]	@ 0xac
 800f856:	802c      	strh	r4, [r5, #0]
 800f858:	601c      	str	r4, [r3, #0]
 800f85a:	e9cd 1201 	strd	r1, r2, [sp, #4]
 800f85e:	f7ff ffbc 	bl	800f7da <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 800f862:	f1b9 0f03 	cmp.w	r9, #3
 800f866:	f340 80c1 	ble.w	800f9ec <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b0>
 800f86a:	4631      	mov	r1, r6
 800f86c:	a80c      	add	r0, sp, #48	@ 0x30
 800f86e:	f009 f80d 	bl	801888c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800f872:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	@ 0x30
 800f876:	9306      	str	r3, [sp, #24]
 800f878:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	@ 0x32
 800f87c:	9307      	str	r3, [sp, #28]
 800f87e:	9b03      	ldr	r3, [sp, #12]
 800f880:	f8d3 a000 	ldr.w	sl, [r3]
 800f884:	f1ba 0f00 	cmp.w	sl, #0
 800f888:	f000 80b3 	beq.w	800f9f2 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b6>
 800f88c:	4651      	mov	r1, sl
 800f88e:	a810      	add	r0, sp, #64	@ 0x40
 800f890:	f008 fffc 	bl	801888c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800f894:	2002      	movs	r0, #2
 800f896:	f9bd 1044 	ldrsh.w	r1, [sp, #68]	@ 0x44
 800f89a:	9b01      	ldr	r3, [sp, #4]
 800f89c:	9a06      	ldr	r2, [sp, #24]
 800f89e:	fb91 f1f0 	sdiv	r1, r1, r0
 800f8a2:	189d      	adds	r5, r3, r2
 800f8a4:	f9bd 3040 	ldrsh.w	r3, [sp, #64]	@ 0x40
 800f8a8:	9a07      	ldr	r2, [sp, #28]
 800f8aa:	4419      	add	r1, r3
 800f8ac:	9b02      	ldr	r3, [sp, #8]
 800f8ae:	4413      	add	r3, r2
 800f8b0:	f9bd 2046 	ldrsh.w	r2, [sp, #70]	@ 0x46
 800f8b4:	1a6d      	subs	r5, r5, r1
 800f8b6:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	@ 0x42
 800f8ba:	fb92 f2f0 	sdiv	r2, r2, r0
 800f8be:	440a      	add	r2, r1
 800f8c0:	1a9b      	subs	r3, r3, r2
 800f8c2:	435b      	muls	r3, r3
 800f8c4:	fb05 3505 	mla	r5, r5, r5, r3
 800f8c8:	4f4c      	ldr	r7, [pc, #304]	@ (800f9fc <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1c0>)
 800f8ca:	ac10      	add	r4, sp, #64	@ 0x40
 800f8cc:	f1b9 0f0c 	cmp.w	r9, #12
 800f8d0:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800f8d2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f8d4:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800f8d6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f8d8:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800f8da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f8dc:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
 800f8e0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800f8e4:	f04f 0303 	mov.w	r3, #3
 800f8e8:	bfd8      	it	le
 800f8ea:	f109 32ff 	addle.w	r2, r9, #4294967295
 800f8ee:	f04f 0400 	mov.w	r4, #0
 800f8f2:	f8cd 9000 	str.w	r9, [sp]
 800f8f6:	bfcc      	ite	gt
 800f8f8:	4698      	movgt	r8, r3
 800f8fa:	fb92 f8f3 	sdivle	r8, r2, r3
 800f8fe:	1c63      	adds	r3, r4, #1
 800f900:	aa10      	add	r2, sp, #64	@ 0x40
 800f902:	f004 0401 	and.w	r4, r4, #1
 800f906:	f04f 0b00 	mov.w	fp, #0
 800f90a:	9308      	str	r3, [sp, #32]
 800f90c:	9b00      	ldr	r3, [sp, #0]
 800f90e:	eb02 1444 	add.w	r4, r2, r4, lsl #5
 800f912:	fb93 f3f8 	sdiv	r3, r3, r8
 800f916:	3404      	adds	r4, #4
 800f918:	b29b      	uxth	r3, r3
 800f91a:	9304      	str	r3, [sp, #16]
 800f91c:	9a04      	ldr	r2, [sp, #16]
 800f91e:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800f922:	fb13 f302 	smulbb	r3, r3, r2
 800f926:	9a01      	ldr	r2, [sp, #4]
 800f928:	b29b      	uxth	r3, r3
 800f92a:	1899      	adds	r1, r3, r2
 800f92c:	9305      	str	r3, [sp, #20]
 800f92e:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 800f932:	b209      	sxth	r1, r1
 800f934:	4299      	cmp	r1, r3
 800f936:	db4d      	blt.n	800f9d4 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 800f938:	8932      	ldrh	r2, [r6, #8]
 800f93a:	4413      	add	r3, r2
 800f93c:	b21b      	sxth	r3, r3
 800f93e:	4299      	cmp	r1, r3
 800f940:	da48      	bge.n	800f9d4 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 800f942:	9b04      	ldr	r3, [sp, #16]
 800f944:	6827      	ldr	r7, [r4, #0]
 800f946:	fb17 f703 	smulbb	r7, r7, r3
 800f94a:	9b02      	ldr	r3, [sp, #8]
 800f94c:	b2bf      	uxth	r7, r7
 800f94e:	18fa      	adds	r2, r7, r3
 800f950:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 800f954:	b212      	sxth	r2, r2
 800f956:	429a      	cmp	r2, r3
 800f958:	db3c      	blt.n	800f9d4 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 800f95a:	8970      	ldrh	r0, [r6, #10]
 800f95c:	4403      	add	r3, r0
 800f95e:	b21b      	sxth	r3, r3
 800f960:	429a      	cmp	r2, r3
 800f962:	da37      	bge.n	800f9d4 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 800f964:	2300      	movs	r3, #0
 800f966:	4630      	mov	r0, r6
 800f968:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f96a:	ab0b      	add	r3, sp, #44	@ 0x2c
 800f96c:	f7ff ff35 	bl	800f7da <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 800f970:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800f972:	b37a      	cbz	r2, 800f9d4 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 800f974:	4552      	cmp	r2, sl
 800f976:	d02d      	beq.n	800f9d4 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 800f978:	4611      	mov	r1, r2
 800f97a:	a80e      	add	r0, sp, #56	@ 0x38
 800f97c:	9209      	str	r2, [sp, #36]	@ 0x24
 800f97e:	f008 ff85 	bl	801888c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800f982:	f04f 0e02 	mov.w	lr, #2
 800f986:	f9bd 103c 	ldrsh.w	r1, [sp, #60]	@ 0x3c
 800f98a:	9a06      	ldr	r2, [sp, #24]
 800f98c:	f9bd 0038 	ldrsh.w	r0, [sp, #56]	@ 0x38
 800f990:	9b01      	ldr	r3, [sp, #4]
 800f992:	f9bd c03e 	ldrsh.w	ip, [sp, #62]	@ 0x3e
 800f996:	4413      	add	r3, r2
 800f998:	9a07      	ldr	r2, [sp, #28]
 800f99a:	fb91 f1fe 	sdiv	r1, r1, lr
 800f99e:	fb9c fcfe 	sdiv	ip, ip, lr
 800f9a2:	4401      	add	r1, r0
 800f9a4:	1a58      	subs	r0, r3, r1
 800f9a6:	9b02      	ldr	r3, [sp, #8]
 800f9a8:	f9bd 103a 	ldrsh.w	r1, [sp, #58]	@ 0x3a
 800f9ac:	4413      	add	r3, r2
 800f9ae:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f9b0:	448c      	add	ip, r1
 800f9b2:	eba3 030c 	sub.w	r3, r3, ip
 800f9b6:	435b      	muls	r3, r3
 800f9b8:	fb00 3300 	mla	r3, r0, r0, r3
 800f9bc:	42ab      	cmp	r3, r5
 800f9be:	d208      	bcs.n	800f9d2 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x196>
 800f9c0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800f9c2:	461d      	mov	r5, r3
 800f9c4:	9803      	ldr	r0, [sp, #12]
 800f9c6:	6001      	str	r1, [r0, #0]
 800f9c8:	992a      	ldr	r1, [sp, #168]	@ 0xa8
 800f9ca:	9805      	ldr	r0, [sp, #20]
 800f9cc:	8008      	strh	r0, [r1, #0]
 800f9ce:	992b      	ldr	r1, [sp, #172]	@ 0xac
 800f9d0:	800f      	strh	r7, [r1, #0]
 800f9d2:	4692      	mov	sl, r2
 800f9d4:	f10b 0b01 	add.w	fp, fp, #1
 800f9d8:	3408      	adds	r4, #8
 800f9da:	f1bb 0f04 	cmp.w	fp, #4
 800f9de:	d19d      	bne.n	800f91c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xe0>
 800f9e0:	9b00      	ldr	r3, [sp, #0]
 800f9e2:	9c08      	ldr	r4, [sp, #32]
 800f9e4:	444b      	add	r3, r9
 800f9e6:	4544      	cmp	r4, r8
 800f9e8:	9300      	str	r3, [sp, #0]
 800f9ea:	d188      	bne.n	800f8fe <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xc2>
 800f9ec:	b021      	add	sp, #132	@ 0x84
 800f9ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f9f2:	f04f 35ff 	mov.w	r5, #4294967295
 800f9f6:	e767      	b.n	800f8c8 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x8c>
 800f9f8:	24028e20 	.word	0x24028e20
 800f9fc:	08028300 	.word	0x08028300

0800fa00 <_ZN8touchgfx4RectaNERKS0_>:
 800fa00:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800fa04:	f9b1 7000 	ldrsh.w	r7, [r1]
 800fa08:	888c      	ldrh	r4, [r1, #4]
 800fa0a:	f9b0 9000 	ldrsh.w	r9, [r0]
 800fa0e:	443c      	add	r4, r7
 800fa10:	b2a4      	uxth	r4, r4
 800fa12:	fa0f f884 	sxth.w	r8, r4
 800fa16:	45c1      	cmp	r9, r8
 800fa18:	da2f      	bge.n	800fa7a <_ZN8touchgfx4RectaNERKS0_+0x7a>
 800fa1a:	8882      	ldrh	r2, [r0, #4]
 800fa1c:	444a      	add	r2, r9
 800fa1e:	b292      	uxth	r2, r2
 800fa20:	fa0f fe82 	sxth.w	lr, r2
 800fa24:	4577      	cmp	r7, lr
 800fa26:	da28      	bge.n	800fa7a <_ZN8touchgfx4RectaNERKS0_+0x7a>
 800fa28:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 800fa2c:	88cb      	ldrh	r3, [r1, #6]
 800fa2e:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 800fa32:	442b      	add	r3, r5
 800fa34:	b21b      	sxth	r3, r3
 800fa36:	429e      	cmp	r6, r3
 800fa38:	da1f      	bge.n	800fa7a <_ZN8touchgfx4RectaNERKS0_+0x7a>
 800fa3a:	88c3      	ldrh	r3, [r0, #6]
 800fa3c:	4433      	add	r3, r6
 800fa3e:	b29b      	uxth	r3, r3
 800fa40:	fa0f fc83 	sxth.w	ip, r3
 800fa44:	4565      	cmp	r5, ip
 800fa46:	da18      	bge.n	800fa7a <_ZN8touchgfx4RectaNERKS0_+0x7a>
 800fa48:	454f      	cmp	r7, r9
 800fa4a:	bfb8      	it	lt
 800fa4c:	464f      	movlt	r7, r9
 800fa4e:	42b5      	cmp	r5, r6
 800fa50:	bfb8      	it	lt
 800fa52:	4635      	movlt	r5, r6
 800fa54:	45f0      	cmp	r8, lr
 800fa56:	bfd8      	it	le
 800fa58:	4622      	movle	r2, r4
 800fa5a:	1bd2      	subs	r2, r2, r7
 800fa5c:	8082      	strh	r2, [r0, #4]
 800fa5e:	884a      	ldrh	r2, [r1, #2]
 800fa60:	88c9      	ldrh	r1, [r1, #6]
 800fa62:	8007      	strh	r7, [r0, #0]
 800fa64:	440a      	add	r2, r1
 800fa66:	8045      	strh	r5, [r0, #2]
 800fa68:	b292      	uxth	r2, r2
 800fa6a:	b211      	sxth	r1, r2
 800fa6c:	458c      	cmp	ip, r1
 800fa6e:	bfa8      	it	ge
 800fa70:	4613      	movge	r3, r2
 800fa72:	1b5b      	subs	r3, r3, r5
 800fa74:	80c3      	strh	r3, [r0, #6]
 800fa76:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fa7a:	2300      	movs	r3, #0
 800fa7c:	8003      	strh	r3, [r0, #0]
 800fa7e:	8043      	strh	r3, [r0, #2]
 800fa80:	8083      	strh	r3, [r0, #4]
 800fa82:	80c3      	strh	r3, [r0, #6]
 800fa84:	e7f7      	b.n	800fa76 <_ZN8touchgfx4RectaNERKS0_+0x76>

0800fa86 <_ZNK8touchgfx4Rect7isEmptyEv>:
 800fa86:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 800fa8a:	2b00      	cmp	r3, #0
 800fa8c:	dd06      	ble.n	800fa9c <_ZNK8touchgfx4Rect7isEmptyEv+0x16>
 800fa8e:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 800fa92:	2800      	cmp	r0, #0
 800fa94:	bfcc      	ite	gt
 800fa96:	2000      	movgt	r0, #0
 800fa98:	2001      	movle	r0, #1
 800fa9a:	4770      	bx	lr
 800fa9c:	2001      	movs	r0, #1
 800fa9e:	4770      	bx	lr

0800faa0 <_ZNK8touchgfx9Container16getContainedAreaEv>:
 800faa0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800faa4:	2300      	movs	r3, #0
 800faa6:	4604      	mov	r4, r0
 800faa8:	6a8d      	ldr	r5, [r1, #40]	@ 0x28
 800faaa:	8003      	strh	r3, [r0, #0]
 800faac:	8043      	strh	r3, [r0, #2]
 800faae:	8083      	strh	r3, [r0, #4]
 800fab0:	80c3      	strh	r3, [r0, #6]
 800fab2:	2d00      	cmp	r5, #0
 800fab4:	d040      	beq.n	800fb38 <_ZNK8touchgfx9Container16getContainedAreaEv+0x98>
 800fab6:	1d28      	adds	r0, r5, #4
 800fab8:	f7ff ffe5 	bl	800fa86 <_ZNK8touchgfx4Rect7isEmptyEv>
 800fabc:	b988      	cbnz	r0, 800fae2 <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 800fabe:	4620      	mov	r0, r4
 800fac0:	f7ff ffe1 	bl	800fa86 <_ZNK8touchgfx4Rect7isEmptyEv>
 800fac4:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 800fac8:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 800facc:	f9b5 e008 	ldrsh.w	lr, [r5, #8]
 800fad0:	f9b5 c00a 	ldrsh.w	ip, [r5, #10]
 800fad4:	b138      	cbz	r0, 800fae6 <_ZNK8touchgfx9Container16getContainedAreaEv+0x46>
 800fad6:	8022      	strh	r2, [r4, #0]
 800fad8:	8063      	strh	r3, [r4, #2]
 800fada:	f8a4 e004 	strh.w	lr, [r4, #4]
 800fade:	f8a4 c006 	strh.w	ip, [r4, #6]
 800fae2:	69ad      	ldr	r5, [r5, #24]
 800fae4:	e7e5      	b.n	800fab2 <_ZNK8touchgfx9Container16getContainedAreaEv+0x12>
 800fae6:	f9b4 0000 	ldrsh.w	r0, [r4]
 800faea:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 800faee:	4290      	cmp	r0, r2
 800faf0:	4607      	mov	r7, r0
 800faf2:	f8b4 8004 	ldrh.w	r8, [r4, #4]
 800faf6:	460e      	mov	r6, r1
 800faf8:	bfa8      	it	ge
 800fafa:	4617      	movge	r7, r2
 800fafc:	4299      	cmp	r1, r3
 800fafe:	4472      	add	r2, lr
 800fb00:	f8b4 e006 	ldrh.w	lr, [r4, #6]
 800fb04:	bfa8      	it	ge
 800fb06:	461e      	movge	r6, r3
 800fb08:	4440      	add	r0, r8
 800fb0a:	4471      	add	r1, lr
 800fb0c:	4463      	add	r3, ip
 800fb0e:	b200      	sxth	r0, r0
 800fb10:	8027      	strh	r7, [r4, #0]
 800fb12:	b212      	sxth	r2, r2
 800fb14:	8066      	strh	r6, [r4, #2]
 800fb16:	b209      	sxth	r1, r1
 800fb18:	b21b      	sxth	r3, r3
 800fb1a:	4290      	cmp	r0, r2
 800fb1c:	bfac      	ite	ge
 800fb1e:	ebc7 0200 	rsbge	r2, r7, r0
 800fb22:	ebc7 0202 	rsblt	r2, r7, r2
 800fb26:	4299      	cmp	r1, r3
 800fb28:	bfac      	ite	ge
 800fb2a:	ebc6 0301 	rsbge	r3, r6, r1
 800fb2e:	ebc6 0303 	rsblt	r3, r6, r3
 800fb32:	80a2      	strh	r2, [r4, #4]
 800fb34:	80e3      	strh	r3, [r4, #6]
 800fb36:	e7d4      	b.n	800fae2 <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 800fb38:	4620      	mov	r0, r4
 800fb3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800fb3e <_ZNK8touchgfx9Container4drawERKNS_4RectE>:
 800fb3e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800fb42:	f890 3025 	ldrb.w	r3, [r0, #37]	@ 0x25
 800fb46:	b383      	cbz	r3, 800fbaa <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 800fb48:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 800fb4a:	b374      	cbz	r4, 800fbaa <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 800fb4c:	f9b1 5000 	ldrsh.w	r5, [r1]
 800fb50:	f9b1 6002 	ldrsh.w	r6, [r1, #2]
 800fb54:	f9b1 7004 	ldrsh.w	r7, [r1, #4]
 800fb58:	f9b1 8006 	ldrsh.w	r8, [r1, #6]
 800fb5c:	f894 3025 	ldrb.w	r3, [r4, #37]	@ 0x25
 800fb60:	b303      	cbz	r3, 800fba4 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 800fb62:	4668      	mov	r0, sp
 800fb64:	1d21      	adds	r1, r4, #4
 800fb66:	f8ad 5000 	strh.w	r5, [sp]
 800fb6a:	f8ad 6002 	strh.w	r6, [sp, #2]
 800fb6e:	f8ad 7004 	strh.w	r7, [sp, #4]
 800fb72:	f8ad 8006 	strh.w	r8, [sp, #6]
 800fb76:	f7ff ff43 	bl	800fa00 <_ZN8touchgfx4RectaNERKS0_>
 800fb7a:	4668      	mov	r0, sp
 800fb7c:	f7ff ff83 	bl	800fa86 <_ZNK8touchgfx4Rect7isEmptyEv>
 800fb80:	b980      	cbnz	r0, 800fba4 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 800fb82:	f8bd 3000 	ldrh.w	r3, [sp]
 800fb86:	4669      	mov	r1, sp
 800fb88:	88a2      	ldrh	r2, [r4, #4]
 800fb8a:	4620      	mov	r0, r4
 800fb8c:	1a9b      	subs	r3, r3, r2
 800fb8e:	88e2      	ldrh	r2, [r4, #6]
 800fb90:	f8ad 3000 	strh.w	r3, [sp]
 800fb94:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 800fb98:	1a9b      	subs	r3, r3, r2
 800fb9a:	f8ad 3002 	strh.w	r3, [sp, #2]
 800fb9e:	6823      	ldr	r3, [r4, #0]
 800fba0:	689b      	ldr	r3, [r3, #8]
 800fba2:	4798      	blx	r3
 800fba4:	69a4      	ldr	r4, [r4, #24]
 800fba6:	2c00      	cmp	r4, #0
 800fba8:	d1d8      	bne.n	800fb5c <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x1e>
 800fbaa:	b002      	add	sp, #8
 800fbac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800fbb0 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>:
 800fbb0:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800fbb2:	f890 3025 	ldrb.w	r3, [r0, #37]	@ 0x25
 800fbb6:	460d      	mov	r5, r1
 800fbb8:	4616      	mov	r6, r2
 800fbba:	b323      	cbz	r3, 800fc06 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 800fbbc:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 800fbbe:	b314      	cbz	r4, 800fc06 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 800fbc0:	f894 3025 	ldrb.w	r3, [r4, #37]	@ 0x25
 800fbc4:	b1eb      	cbz	r3, 800fc02 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 800fbc6:	6828      	ldr	r0, [r5, #0]
 800fbc8:	466b      	mov	r3, sp
 800fbca:	6869      	ldr	r1, [r5, #4]
 800fbcc:	c303      	stmia	r3!, {r0, r1}
 800fbce:	4668      	mov	r0, sp
 800fbd0:	1d21      	adds	r1, r4, #4
 800fbd2:	f7ff ff15 	bl	800fa00 <_ZN8touchgfx4RectaNERKS0_>
 800fbd6:	4668      	mov	r0, sp
 800fbd8:	f7ff ff55 	bl	800fa86 <_ZNK8touchgfx4Rect7isEmptyEv>
 800fbdc:	b988      	cbnz	r0, 800fc02 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 800fbde:	f8bd 3000 	ldrh.w	r3, [sp]
 800fbe2:	4669      	mov	r1, sp
 800fbe4:	88a2      	ldrh	r2, [r4, #4]
 800fbe6:	4620      	mov	r0, r4
 800fbe8:	1a9b      	subs	r3, r3, r2
 800fbea:	88e2      	ldrh	r2, [r4, #6]
 800fbec:	f8ad 3000 	strh.w	r3, [sp]
 800fbf0:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 800fbf4:	1a9b      	subs	r3, r3, r2
 800fbf6:	4632      	mov	r2, r6
 800fbf8:	f8ad 3002 	strh.w	r3, [sp, #2]
 800fbfc:	6823      	ldr	r3, [r4, #0]
 800fbfe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800fc00:	4798      	blx	r3
 800fc02:	69a4      	ldr	r4, [r4, #24]
 800fc04:	e7db      	b.n	800fbbe <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0xe>
 800fc06:	b002      	add	sp, #8
 800fc08:	bd70      	pop	{r4, r5, r6, pc}

0800fc0a <_ZNK8touchgfx6Slider15getIndicatorMinEv>:
 800fc0a:	f9b0 00e4 	ldrsh.w	r0, [r0, #228]	@ 0xe4
 800fc0e:	4770      	bx	lr

0800fc10 <_ZNK8touchgfx6Slider15getIndicatorMaxEv>:
 800fc10:	f9b0 00e6 	ldrsh.w	r0, [r0, #230]	@ 0xe6
 800fc14:	4770      	bx	lr

0800fc16 <_ZNK8touchgfx6Slider11getMinValueEv>:
 800fc16:	f9b0 0030 	ldrsh.w	r0, [r0, #48]	@ 0x30
 800fc1a:	4770      	bx	lr

0800fc1c <_ZNK8touchgfx6Slider11getMaxValueEv>:
 800fc1c:	f9b0 0032 	ldrsh.w	r0, [r0, #50]	@ 0x32
 800fc20:	4770      	bx	lr

0800fc22 <_ZN8touchgfx6Slider8setValueEs>:
 800fc22:	b570      	push	{r4, r5, r6, lr}
 800fc24:	6803      	ldr	r3, [r0, #0]
 800fc26:	4604      	mov	r4, r0
 800fc28:	e9d3 532b 	ldrd	r5, r3, [r3, #172]	@ 0xac
 800fc2c:	4798      	blx	r3
 800fc2e:	4601      	mov	r1, r0
 800fc30:	462b      	mov	r3, r5
 800fc32:	4620      	mov	r0, r4
 800fc34:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800fc38:	4718      	bx	r3

0800fc3a <_ZN8touchgfx6Slider15handleDragEventERKNS_9DragEventE>:
 800fc3a:	b570      	push	{r4, r5, r6, lr}
 800fc3c:	6803      	ldr	r3, [r0, #0]
 800fc3e:	4604      	mov	r4, r0
 800fc40:	f890 202c 	ldrb.w	r2, [r0, #44]	@ 0x2c
 800fc44:	f8d3 60ac 	ldr.w	r6, [r3, #172]	@ 0xac
 800fc48:	b95a      	cbnz	r2, 800fc62 <_ZN8touchgfx6Slider15handleDragEventERKNS_9DragEventE+0x28>
 800fc4a:	894d      	ldrh	r5, [r1, #10]
 800fc4c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800fc50:	4620      	mov	r0, r4
 800fc52:	4798      	blx	r3
 800fc54:	1a29      	subs	r1, r5, r0
 800fc56:	4633      	mov	r3, r6
 800fc58:	4620      	mov	r0, r4
 800fc5a:	b209      	sxth	r1, r1
 800fc5c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800fc60:	4718      	bx	r3
 800fc62:	898d      	ldrh	r5, [r1, #12]
 800fc64:	e7f2      	b.n	800fc4c <_ZN8touchgfx6Slider15handleDragEventERKNS_9DragEventE+0x12>

0800fc66 <_ZNK8touchgfx6Slider18getIndicatorRadiusEv>:
 800fc66:	f890 202c 	ldrb.w	r2, [r0, #44]	@ 0x2c
 800fc6a:	2302      	movs	r3, #2
 800fc6c:	b922      	cbnz	r2, 800fc78 <_ZNK8touchgfx6Slider18getIndicatorRadiusEv+0x12>
 800fc6e:	f9b0 0094 	ldrsh.w	r0, [r0, #148]	@ 0x94
 800fc72:	fb90 f0f3 	sdiv	r0, r0, r3
 800fc76:	4770      	bx	lr
 800fc78:	f9b0 0096 	ldrsh.w	r0, [r0, #150]	@ 0x96
 800fc7c:	e7f9      	b.n	800fc72 <_ZNK8touchgfx6Slider18getIndicatorRadiusEv+0xc>

0800fc7e <_ZN8touchgfx6Slider13setValueRangeEsss>:
 800fc7e:	8642      	strh	r2, [r0, #50]	@ 0x32
 800fc80:	6802      	ldr	r2, [r0, #0]
 800fc82:	8601      	strh	r1, [r0, #48]	@ 0x30
 800fc84:	4619      	mov	r1, r3
 800fc86:	b410      	push	{r4}
 800fc88:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fc8c:	f8d2 20a8 	ldr.w	r2, [r2, #168]	@ 0xa8
 800fc90:	4710      	bx	r2

0800fc92 <_ZN8touchgfx6Slider13setValueRangeEss>:
 800fc92:	f9b0 302e 	ldrsh.w	r3, [r0, #46]	@ 0x2e
 800fc96:	428b      	cmp	r3, r1
 800fc98:	b410      	push	{r4}
 800fc9a:	db09      	blt.n	800fcb0 <_ZN8touchgfx6Slider13setValueRangeEss+0x1e>
 800fc9c:	4293      	cmp	r3, r2
 800fc9e:	bfa8      	it	ge
 800fca0:	4613      	movge	r3, r2
 800fca2:	6804      	ldr	r4, [r0, #0]
 800fca4:	f8d4 4098 	ldr.w	r4, [r4, #152]	@ 0x98
 800fca8:	46a4      	mov	ip, r4
 800fcaa:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fcae:	4760      	bx	ip
 800fcb0:	460b      	mov	r3, r1
 800fcb2:	e7f6      	b.n	800fca2 <_ZN8touchgfx6Slider13setValueRangeEss+0x10>

0800fcb4 <_ZNK8touchgfx6Slider29getIndicatorPositionRangeSizeEv>:
 800fcb4:	f9b0 20e6 	ldrsh.w	r2, [r0, #230]	@ 0xe6
 800fcb8:	f9b0 00e4 	ldrsh.w	r0, [r0, #228]	@ 0xe4
 800fcbc:	1a10      	subs	r0, r2, r0
 800fcbe:	4770      	bx	lr

0800fcc0 <_ZNK8touchgfx6Slider17getValueRangeSizeEv>:
 800fcc0:	f9b0 2032 	ldrsh.w	r2, [r0, #50]	@ 0x32
 800fcc4:	f9b0 0030 	ldrsh.w	r0, [r0, #48]	@ 0x30
 800fcc8:	1a10      	subs	r0, r2, r0
 800fcca:	4770      	bx	lr

0800fccc <_ZN8touchgfx6SliderD1Ev>:
 800fccc:	4770      	bx	lr

0800fcce <_ZN8touchgfx6SliderD0Ev>:
 800fcce:	b510      	push	{r4, lr}
 800fcd0:	4604      	mov	r4, r0
 800fcd2:	21f4      	movs	r1, #244	@ 0xf4
 800fcd4:	f016 ff5b 	bl	8026b8e <_ZdlPvj>
 800fcd8:	4620      	mov	r0, r4
 800fcda:	bd10      	pop	{r4, pc}

0800fcdc <_ZNK8touchgfx6Slider15valueToPositionEi>:
 800fcdc:	b570      	push	{r4, r5, r6, lr}
 800fcde:	f9b0 5032 	ldrsh.w	r5, [r0, #50]	@ 0x32
 800fce2:	4604      	mov	r4, r0
 800fce4:	f9b0 3030 	ldrsh.w	r3, [r0, #48]	@ 0x30
 800fce8:	428d      	cmp	r5, r1
 800fcea:	bfa8      	it	ge
 800fcec:	460d      	movge	r5, r1
 800fcee:	429d      	cmp	r5, r3
 800fcf0:	bfac      	ite	ge
 800fcf2:	ebc3 0505 	rsbge	r5, r3, r5
 800fcf6:	ebc3 0503 	rsblt	r5, r3, r3
 800fcfa:	6803      	ldr	r3, [r0, #0]
 800fcfc:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800fd00:	4798      	blx	r3
 800fd02:	6823      	ldr	r3, [r4, #0]
 800fd04:	4606      	mov	r6, r0
 800fd06:	4620      	mov	r0, r4
 800fd08:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800fd0c:	4798      	blx	r3
 800fd0e:	4631      	mov	r1, r6
 800fd10:	4602      	mov	r2, r0
 800fd12:	4628      	mov	r0, r5
 800fd14:	f009 fa2f 	bl	8019176 <_ZN8touchgfx6muldivElll>
 800fd18:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 800fd1c:	2b01      	cmp	r3, #1
 800fd1e:	bf0b      	itete	eq
 800fd20:	f8b4 30e6 	ldrheq.w	r3, [r4, #230]	@ 0xe6
 800fd24:	f8b4 30e4 	ldrhne.w	r3, [r4, #228]	@ 0xe4
 800fd28:	1a18      	subeq	r0, r3, r0
 800fd2a:	18c0      	addne	r0, r0, r3
 800fd2c:	b200      	sxth	r0, r0
 800fd2e:	bd70      	pop	{r4, r5, r6, pc}

0800fd30 <_ZNK8touchgfx6Slider15positionToValueEs>:
 800fd30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fd32:	f9b0 30e6 	ldrsh.w	r3, [r0, #230]	@ 0xe6
 800fd36:	4605      	mov	r5, r0
 800fd38:	f9b0 40e4 	ldrsh.w	r4, [r0, #228]	@ 0xe4
 800fd3c:	4299      	cmp	r1, r3
 800fd3e:	f890 202c 	ldrb.w	r2, [r0, #44]	@ 0x2c
 800fd42:	f9b0 6030 	ldrsh.w	r6, [r0, #48]	@ 0x30
 800fd46:	bfa8      	it	ge
 800fd48:	4619      	movge	r1, r3
 800fd4a:	42a1      	cmp	r1, r4
 800fd4c:	bfb8      	it	lt
 800fd4e:	4621      	movlt	r1, r4
 800fd50:	2a01      	cmp	r2, #1
 800fd52:	b289      	uxth	r1, r1
 800fd54:	bf08      	it	eq
 800fd56:	1a5c      	subeq	r4, r3, r1
 800fd58:	6803      	ldr	r3, [r0, #0]
 800fd5a:	bf18      	it	ne
 800fd5c:	1b0c      	subne	r4, r1, r4
 800fd5e:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800fd62:	4798      	blx	r3
 800fd64:	682b      	ldr	r3, [r5, #0]
 800fd66:	4607      	mov	r7, r0
 800fd68:	b224      	sxth	r4, r4
 800fd6a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800fd6e:	4628      	mov	r0, r5
 800fd70:	4798      	blx	r3
 800fd72:	4639      	mov	r1, r7
 800fd74:	4602      	mov	r2, r0
 800fd76:	4620      	mov	r0, r4
 800fd78:	f009 f9fd 	bl	8019176 <_ZN8touchgfx6muldivElll>
 800fd7c:	4430      	add	r0, r6
 800fd7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800fd80 <_ZN8touchgfx6Slider16handleClickEventERKNS_10ClickEventE>:
 800fd80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fd84:	790b      	ldrb	r3, [r1, #4]
 800fd86:	4604      	mov	r4, r0
 800fd88:	460d      	mov	r5, r1
 800fd8a:	b32b      	cbz	r3, 800fdd8 <_ZN8touchgfx6Slider16handleClickEventERKNS_10ClickEventE+0x58>
 800fd8c:	2b01      	cmp	r3, #1
 800fd8e:	d137      	bne.n	800fe00 <_ZN8touchgfx6Slider16handleClickEventERKNS_10ClickEventE+0x80>
 800fd90:	6823      	ldr	r3, [r4, #0]
 800fd92:	f894 202c 	ldrb.w	r2, [r4, #44]	@ 0x2c
 800fd96:	f8d3 70ac 	ldr.w	r7, [r3, #172]	@ 0xac
 800fd9a:	2a00      	cmp	r2, #0
 800fd9c:	d12e      	bne.n	800fdfc <_ZN8touchgfx6Slider16handleClickEventERKNS_10ClickEventE+0x7c>
 800fd9e:	88ee      	ldrh	r6, [r5, #6]
 800fda0:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800fda4:	4620      	mov	r0, r4
 800fda6:	4798      	blx	r3
 800fda8:	1a31      	subs	r1, r6, r0
 800fdaa:	4620      	mov	r0, r4
 800fdac:	b209      	sxth	r1, r1
 800fdae:	47b8      	blx	r7
 800fdb0:	792b      	ldrb	r3, [r5, #4]
 800fdb2:	2b01      	cmp	r3, #1
 800fdb4:	d124      	bne.n	800fe00 <_ZN8touchgfx6Slider16handleClickEventERKNS_10ClickEventE+0x80>
 800fdb6:	f8d4 00ec 	ldr.w	r0, [r4, #236]	@ 0xec
 800fdba:	b308      	cbz	r0, 800fe00 <_ZN8touchgfx6Slider16handleClickEventERKNS_10ClickEventE+0x80>
 800fdbc:	6803      	ldr	r3, [r0, #0]
 800fdbe:	68db      	ldr	r3, [r3, #12]
 800fdc0:	4798      	blx	r3
 800fdc2:	b1e8      	cbz	r0, 800fe00 <_ZN8touchgfx6Slider16handleClickEventERKNS_10ClickEventE+0x80>
 800fdc4:	f8d4 00ec 	ldr.w	r0, [r4, #236]	@ 0xec
 800fdc8:	4621      	mov	r1, r4
 800fdca:	f9b4 202e 	ldrsh.w	r2, [r4, #46]	@ 0x2e
 800fdce:	6803      	ldr	r3, [r0, #0]
 800fdd0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800fdd4:	689b      	ldr	r3, [r3, #8]
 800fdd6:	4718      	bx	r3
 800fdd8:	f8d0 00e8 	ldr.w	r0, [r0, #232]	@ 0xe8
 800fddc:	2800      	cmp	r0, #0
 800fdde:	d0d7      	beq.n	800fd90 <_ZN8touchgfx6Slider16handleClickEventERKNS_10ClickEventE+0x10>
 800fde0:	6803      	ldr	r3, [r0, #0]
 800fde2:	68db      	ldr	r3, [r3, #12]
 800fde4:	4798      	blx	r3
 800fde6:	2800      	cmp	r0, #0
 800fde8:	d0d2      	beq.n	800fd90 <_ZN8touchgfx6Slider16handleClickEventERKNS_10ClickEventE+0x10>
 800fdea:	f8d4 00e8 	ldr.w	r0, [r4, #232]	@ 0xe8
 800fdee:	4621      	mov	r1, r4
 800fdf0:	f9b4 202e 	ldrsh.w	r2, [r4, #46]	@ 0x2e
 800fdf4:	6803      	ldr	r3, [r0, #0]
 800fdf6:	689b      	ldr	r3, [r3, #8]
 800fdf8:	4798      	blx	r3
 800fdfa:	e7c9      	b.n	800fd90 <_ZN8touchgfx6Slider16handleClickEventERKNS_10ClickEventE+0x10>
 800fdfc:	892e      	ldrh	r6, [r5, #8]
 800fdfe:	e7cf      	b.n	800fda0 <_ZN8touchgfx6Slider16handleClickEventERKNS_10ClickEventE+0x20>
 800fe00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800fe04 <_ZN8touchgfx6Slider23updateIndicatorPositionEs>:
 800fe04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fe08:	f9b0 80e4 	ldrsh.w	r8, [r0, #228]	@ 0xe4
 800fe0c:	4604      	mov	r4, r0
 800fe0e:	308c      	adds	r0, #140	@ 0x8c
 800fe10:	4588      	cmp	r8, r1
 800fe12:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 800fe16:	f104 06b8 	add.w	r6, r4, #184	@ 0xb8
 800fe1a:	bfb8      	it	lt
 800fe1c:	4688      	movlt	r8, r1
 800fe1e:	f9b0 105a 	ldrsh.w	r1, [r0, #90]	@ 0x5a
 800fe22:	4588      	cmp	r8, r1
 800fe24:	bfa8      	it	ge
 800fe26:	4688      	movge	r8, r1
 800fe28:	fa1f f788 	uxth.w	r7, r8
 800fe2c:	2b00      	cmp	r3, #0
 800fe2e:	d130      	bne.n	800fe92 <_ZN8touchgfx6Slider23updateIndicatorPositionEs+0x8e>
 800fe30:	f9b4 2092 	ldrsh.w	r2, [r4, #146]	@ 0x92
 800fe34:	4641      	mov	r1, r8
 800fe36:	f7f3 f9fa 	bl	800322e <_ZN8touchgfx8Drawable6moveToEss>
 800fe3a:	4630      	mov	r0, r6
 800fe3c:	f008 fc8b 	bl	8018756 <_ZNK8touchgfx8Drawable10invalidateEv>
 800fe40:	f8b4 20bc 	ldrh.w	r2, [r4, #188]	@ 0xbc
 800fe44:	6823      	ldr	r3, [r4, #0]
 800fe46:	4620      	mov	r0, r4
 800fe48:	1abf      	subs	r7, r7, r2
 800fe4a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800fe4e:	b2bf      	uxth	r7, r7
 800fe50:	4798      	blx	r3
 800fe52:	4407      	add	r7, r0
 800fe54:	f8a4 70c0 	strh.w	r7, [r4, #192]	@ 0xc0
 800fe58:	4630      	mov	r0, r6
 800fe5a:	f008 fc7c 	bl	8018756 <_ZNK8touchgfx8Drawable10invalidateEv>
 800fe5e:	6823      	ldr	r3, [r4, #0]
 800fe60:	4641      	mov	r1, r8
 800fe62:	4620      	mov	r0, r4
 800fe64:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800fe68:	4798      	blx	r3
 800fe6a:	85e0      	strh	r0, [r4, #46]	@ 0x2e
 800fe6c:	f8d4 00f0 	ldr.w	r0, [r4, #240]	@ 0xf0
 800fe70:	2800      	cmp	r0, #0
 800fe72:	d03c      	beq.n	800feee <_ZN8touchgfx6Slider23updateIndicatorPositionEs+0xea>
 800fe74:	6803      	ldr	r3, [r0, #0]
 800fe76:	68db      	ldr	r3, [r3, #12]
 800fe78:	4798      	blx	r3
 800fe7a:	2800      	cmp	r0, #0
 800fe7c:	d037      	beq.n	800feee <_ZN8touchgfx6Slider23updateIndicatorPositionEs+0xea>
 800fe7e:	f8d4 00f0 	ldr.w	r0, [r4, #240]	@ 0xf0
 800fe82:	4621      	mov	r1, r4
 800fe84:	f9b4 202e 	ldrsh.w	r2, [r4, #46]	@ 0x2e
 800fe88:	6803      	ldr	r3, [r0, #0]
 800fe8a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fe8e:	689b      	ldr	r3, [r3, #8]
 800fe90:	4718      	bx	r3
 800fe92:	4642      	mov	r2, r8
 800fe94:	f9b4 1090 	ldrsh.w	r1, [r4, #144]	@ 0x90
 800fe98:	f7f3 f9c9 	bl	800322e <_ZN8touchgfx8Drawable6moveToEss>
 800fe9c:	4630      	mov	r0, r6
 800fe9e:	f008 fc5a 	bl	8018756 <_ZNK8touchgfx8Drawable10invalidateEv>
 800fea2:	8f60      	ldrh	r0, [r4, #58]	@ 0x3a
 800fea4:	8fe5      	ldrh	r5, [r4, #62]	@ 0x3e
 800fea6:	6823      	ldr	r3, [r4, #0]
 800fea8:	4405      	add	r5, r0
 800feaa:	4620      	mov	r0, r4
 800feac:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800feb0:	b2ad      	uxth	r5, r5
 800feb2:	4798      	blx	r3
 800feb4:	6823      	ldr	r3, [r4, #0]
 800feb6:	1bed      	subs	r5, r5, r7
 800feb8:	f9b4 a0bc 	ldrsh.w	sl, [r4, #188]	@ 0xbc
 800febc:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800fec0:	1a2d      	subs	r5, r5, r0
 800fec2:	4620      	mov	r0, r4
 800fec4:	4798      	blx	r3
 800fec6:	4438      	add	r0, r7
 800fec8:	b2ad      	uxth	r5, r5
 800feca:	f9b4 90c0 	ldrsh.w	r9, [r4, #192]	@ 0xc0
 800fece:	b202      	sxth	r2, r0
 800fed0:	4651      	mov	r1, sl
 800fed2:	4630      	mov	r0, r6
 800fed4:	f7f3 ff47 	bl	8003d66 <_ZN8touchgfx8Drawable5setXYEss>
 800fed8:	4630      	mov	r0, r6
 800feda:	b22a      	sxth	r2, r5
 800fedc:	4649      	mov	r1, r9
 800fede:	f7ff f9a3 	bl	800f228 <_ZN8touchgfx8Drawable14setWidthHeightEss>
 800fee2:	f8b4 006a 	ldrh.w	r0, [r4, #106]	@ 0x6a
 800fee6:	1a2d      	subs	r5, r5, r0
 800fee8:	f8a4 5066 	strh.w	r5, [r4, #102]	@ 0x66
 800feec:	e7b4      	b.n	800fe58 <_ZN8touchgfx6Slider23updateIndicatorPositionEs+0x54>
 800feee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800fef2 <_ZN8touchgfx8Drawable11setPositionERKS0_>:
 800fef2:	b570      	push	{r4, r5, r6, lr}
 800fef4:	4604      	mov	r4, r0
 800fef6:	f9b1 5008 	ldrsh.w	r5, [r1, #8]
 800fefa:	f9b1 600a 	ldrsh.w	r6, [r1, #10]
 800fefe:	f9b1 2006 	ldrsh.w	r2, [r1, #6]
 800ff02:	f9b1 1004 	ldrsh.w	r1, [r1, #4]
 800ff06:	f7f3 ff2e 	bl	8003d66 <_ZN8touchgfx8Drawable5setXYEss>
 800ff0a:	4632      	mov	r2, r6
 800ff0c:	4629      	mov	r1, r5
 800ff0e:	4620      	mov	r0, r4
 800ff10:	f7ff f98a 	bl	800f228 <_ZN8touchgfx8Drawable14setWidthHeightEss>
 800ff14:	bd70      	pop	{r4, r5, r6, pc}

0800ff16 <_ZN8touchgfx6Slider21setupHorizontalSliderEsssss>:
 800ff16:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ff1a:	f04f 0a00 	mov.w	sl, #0
 800ff1e:	f100 0b34 	add.w	fp, r0, #52	@ 0x34
 800ff22:	4604      	mov	r4, r0
 800ff24:	461d      	mov	r5, r3
 800ff26:	f880 a02c 	strb.w	sl, [r0, #44]	@ 0x2c
 800ff2a:	4658      	mov	r0, fp
 800ff2c:	4690      	mov	r8, r2
 800ff2e:	f9bd 602c 	ldrsh.w	r6, [sp, #44]	@ 0x2c
 800ff32:	4689      	mov	r9, r1
 800ff34:	f9bd 7028 	ldrsh.w	r7, [sp, #40]	@ 0x28
 800ff38:	f7f3 ff15 	bl	8003d66 <_ZN8touchgfx8Drawable5setXYEss>
 800ff3c:	4659      	mov	r1, fp
 800ff3e:	f104 00b8 	add.w	r0, r4, #184	@ 0xb8
 800ff42:	f7ff ffd6 	bl	800fef2 <_ZN8touchgfx8Drawable11setPositionERKS0_>
 800ff46:	4652      	mov	r2, sl
 800ff48:	4651      	mov	r1, sl
 800ff4a:	f104 0060 	add.w	r0, r4, #96	@ 0x60
 800ff4e:	f7f3 ff0a 	bl	8003d66 <_ZN8touchgfx8Drawable5setXYEss>
 800ff52:	8fe2      	ldrh	r2, [r4, #62]	@ 0x3e
 800ff54:	8fa1      	ldrh	r1, [r4, #60]	@ 0x3c
 800ff56:	4620      	mov	r0, r4
 800ff58:	4490      	add	r8, r2
 800ff5a:	f8b4 2096 	ldrh.w	r2, [r4, #150]	@ 0x96
 800ff5e:	f8a4 5092 	strh.w	r5, [r4, #146]	@ 0x92
 800ff62:	4489      	add	r9, r1
 800ff64:	4415      	add	r5, r2
 800ff66:	f8b4 1094 	ldrh.w	r1, [r4, #148]	@ 0x94
 800ff6a:	fa0f f288 	sxth.w	r2, r8
 800ff6e:	f8a4 70e4 	strh.w	r7, [r4, #228]	@ 0xe4
 800ff72:	1873      	adds	r3, r6, r1
 800ff74:	b22d      	sxth	r5, r5
 800ff76:	fa0f f989 	sxth.w	r9, r9
 800ff7a:	f8a4 60e6 	strh.w	r6, [r4, #230]	@ 0xe6
 800ff7e:	b219      	sxth	r1, r3
 800ff80:	42aa      	cmp	r2, r5
 800ff82:	bfb8      	it	lt
 800ff84:	462a      	movlt	r2, r5
 800ff86:	4549      	cmp	r1, r9
 800ff88:	bfb8      	it	lt
 800ff8a:	4649      	movlt	r1, r9
 800ff8c:	f7ff f94c 	bl	800f228 <_ZN8touchgfx8Drawable14setWidthHeightEss>
 800ff90:	6823      	ldr	r3, [r4, #0]
 800ff92:	f9b4 102e 	ldrsh.w	r1, [r4, #46]	@ 0x2e
 800ff96:	4620      	mov	r0, r4
 800ff98:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800ff9c:	b001      	add	sp, #4
 800ff9e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ffa2:	4718      	bx	r3

0800ffa4 <_ZN8touchgfx6Slider19setupVerticalSliderEsssss>:
 800ffa4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ffa8:	461d      	mov	r5, r3
 800ffaa:	f100 0a34 	add.w	sl, r0, #52	@ 0x34
 800ffae:	2301      	movs	r3, #1
 800ffb0:	4604      	mov	r4, r0
 800ffb2:	4617      	mov	r7, r2
 800ffb4:	f9bd 8024 	ldrsh.w	r8, [sp, #36]	@ 0x24
 800ffb8:	f880 302c 	strb.w	r3, [r0, #44]	@ 0x2c
 800ffbc:	4650      	mov	r0, sl
 800ffbe:	460e      	mov	r6, r1
 800ffc0:	f9bd 9020 	ldrsh.w	r9, [sp, #32]
 800ffc4:	f7f3 fecf 	bl	8003d66 <_ZN8touchgfx8Drawable5setXYEss>
 800ffc8:	4651      	mov	r1, sl
 800ffca:	f104 00b8 	add.w	r0, r4, #184	@ 0xb8
 800ffce:	f7ff ff90 	bl	800fef2 <_ZN8touchgfx8Drawable11setPositionERKS0_>
 800ffd2:	8fa1      	ldrh	r1, [r4, #60]	@ 0x3c
 800ffd4:	8fe2      	ldrh	r2, [r4, #62]	@ 0x3e
 800ffd6:	4620      	mov	r0, r4
 800ffd8:	f8b4 3096 	ldrh.w	r3, [r4, #150]	@ 0x96
 800ffdc:	440e      	add	r6, r1
 800ffde:	443a      	add	r2, r7
 800ffe0:	f8b4 1094 	ldrh.w	r1, [r4, #148]	@ 0x94
 800ffe4:	4443      	add	r3, r8
 800ffe6:	f8a4 5090 	strh.w	r5, [r4, #144]	@ 0x90
 800ffea:	b212      	sxth	r2, r2
 800ffec:	440d      	add	r5, r1
 800ffee:	b21b      	sxth	r3, r3
 800fff0:	f8a4 90e4 	strh.w	r9, [r4, #228]	@ 0xe4
 800fff4:	b231      	sxth	r1, r6
 800fff6:	f8a4 80e6 	strh.w	r8, [r4, #230]	@ 0xe6
 800fffa:	429a      	cmp	r2, r3
 800fffc:	b22d      	sxth	r5, r5
 800fffe:	bfb8      	it	lt
 8010000:	461a      	movlt	r2, r3
 8010002:	42a9      	cmp	r1, r5
 8010004:	bfb8      	it	lt
 8010006:	4629      	movlt	r1, r5
 8010008:	f7ff f90e 	bl	800f228 <_ZN8touchgfx8Drawable14setWidthHeightEss>
 801000c:	6823      	ldr	r3, [r4, #0]
 801000e:	f9b4 102e 	ldrsh.w	r1, [r4, #46]	@ 0x2e
 8010012:	4620      	mov	r0, r4
 8010014:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8010018:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801001c:	4718      	bx	r3
	...

08010020 <_ZN8touchgfx6SliderC1Ev>:
 8010020:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8010024:	4604      	mov	r4, r0
 8010026:	f7ff f8e7 	bl	800f1f8 <_ZN8touchgfx8DrawableC1Ev>
 801002a:	4b28      	ldr	r3, [pc, #160]	@ (80100cc <_ZN8touchgfx6SliderC1Ev+0xac>)
 801002c:	2500      	movs	r5, #0
 801002e:	ae02      	add	r6, sp, #8
 8010030:	f64f 77ff 	movw	r7, #65535	@ 0xffff
 8010034:	6023      	str	r3, [r4, #0]
 8010036:	f104 0934 	add.w	r9, r4, #52	@ 0x34
 801003a:	2364      	movs	r3, #100	@ 0x64
 801003c:	f104 0a60 	add.w	sl, r4, #96	@ 0x60
 8010040:	f826 7d04 	strh.w	r7, [r6, #-4]!
 8010044:	4648      	mov	r0, r9
 8010046:	8663      	strh	r3, [r4, #50]	@ 0x32
 8010048:	4631      	mov	r1, r6
 801004a:	62a5      	str	r5, [r4, #40]	@ 0x28
 801004c:	f104 088c 	add.w	r8, r4, #140	@ 0x8c
 8010050:	f884 502c 	strb.w	r5, [r4, #44]	@ 0x2c
 8010054:	85e5      	strh	r5, [r4, #46]	@ 0x2e
 8010056:	8625      	strh	r5, [r4, #48]	@ 0x30
 8010058:	f7f4 fa52 	bl	8004500 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 801005c:	4631      	mov	r1, r6
 801005e:	4650      	mov	r0, sl
 8010060:	f8ad 7004 	strh.w	r7, [sp, #4]
 8010064:	f7f4 fa4c 	bl	8004500 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 8010068:	4631      	mov	r1, r6
 801006a:	f104 06b8 	add.w	r6, r4, #184	@ 0xb8
 801006e:	4640      	mov	r0, r8
 8010070:	f8ad 7004 	strh.w	r7, [sp, #4]
 8010074:	f7f4 fa44 	bl	8004500 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 8010078:	4630      	mov	r0, r6
 801007a:	f7ff f8bd 	bl	800f1f8 <_ZN8touchgfx8DrawableC1Ev>
 801007e:	4b14      	ldr	r3, [pc, #80]	@ (80100d0 <_ZN8touchgfx6SliderC1Ev+0xb0>)
 8010080:	4651      	mov	r1, sl
 8010082:	4630      	mov	r0, r6
 8010084:	f8c4 30b8 	str.w	r3, [r4, #184]	@ 0xb8
 8010088:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 801008c:	f8c4 50e0 	str.w	r5, [r4, #224]	@ 0xe0
 8010090:	e9c4 3539 	strd	r3, r5, [r4, #228]	@ 0xe4
 8010094:	2301      	movs	r3, #1
 8010096:	e9c4 553b 	strd	r5, r5, [r4, #236]	@ 0xec
 801009a:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
 801009e:	f7ff fb2a 	bl	800f6f6 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 80100a2:	4649      	mov	r1, r9
 80100a4:	4620      	mov	r0, r4
 80100a6:	f7ff fb26 	bl	800f6f6 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 80100aa:	4631      	mov	r1, r6
 80100ac:	4620      	mov	r0, r4
 80100ae:	f7ff fb22 	bl	800f6f6 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 80100b2:	4641      	mov	r1, r8
 80100b4:	4620      	mov	r0, r4
 80100b6:	f7ff fb1e 	bl	800f6f6 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 80100ba:	4620      	mov	r0, r4
 80100bc:	f9b4 10e4 	ldrsh.w	r1, [r4, #228]	@ 0xe4
 80100c0:	f7ff fea0 	bl	800fe04 <_ZN8touchgfx6Slider23updateIndicatorPositionEs>
 80100c4:	4620      	mov	r0, r4
 80100c6:	b002      	add	sp, #8
 80100c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80100cc:	0802bd78 	.word	0x0802bd78
 80100d0:	0802bce8 	.word	0x0802bce8

080100d4 <_ZN8touchgfx6Slider10setBitmapsERKNS_6BitmapES3_S3_>:
 80100d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80100d8:	4604      	mov	r4, r0
 80100da:	f100 0634 	add.w	r6, r0, #52	@ 0x34
 80100de:	4689      	mov	r9, r1
 80100e0:	461f      	mov	r7, r3
 80100e2:	f104 058c 	add.w	r5, r4, #140	@ 0x8c
 80100e6:	4630      	mov	r0, r6
 80100e8:	4690      	mov	r8, r2
 80100ea:	f008 fb34 	bl	8018756 <_ZNK8touchgfx8Drawable10invalidateEv>
 80100ee:	4628      	mov	r0, r5
 80100f0:	f008 fb31 	bl	8018756 <_ZNK8touchgfx8Drawable10invalidateEv>
 80100f4:	4649      	mov	r1, r9
 80100f6:	4630      	mov	r0, r6
 80100f8:	f004 fe5b 	bl	8014db2 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 80100fc:	4641      	mov	r1, r8
 80100fe:	f104 0060 	add.w	r0, r4, #96	@ 0x60
 8010102:	f004 fe56 	bl	8014db2 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 8010106:	4639      	mov	r1, r7
 8010108:	4628      	mov	r0, r5
 801010a:	f004 fe52 	bl	8014db2 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 801010e:	f9b4 206a 	ldrsh.w	r2, [r4, #106]	@ 0x6a
 8010112:	f9b4 1068 	ldrsh.w	r1, [r4, #104]	@ 0x68
 8010116:	f104 00b8 	add.w	r0, r4, #184	@ 0xb8
 801011a:	f7ff f885 	bl	800f228 <_ZN8touchgfx8Drawable14setWidthHeightEss>
 801011e:	6823      	ldr	r3, [r4, #0]
 8010120:	f9b4 102e 	ldrsh.w	r1, [r4, #46]	@ 0x2e
 8010124:	4620      	mov	r0, r4
 8010126:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 801012a:	4798      	blx	r3
 801012c:	4630      	mov	r0, r6
 801012e:	f008 fb12 	bl	8018756 <_ZNK8touchgfx8Drawable10invalidateEv>
 8010132:	4628      	mov	r0, r5
 8010134:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010138:	f008 bb0d 	b.w	8018756 <_ZNK8touchgfx8Drawable10invalidateEv>

0801013c <_ZN8touchgfx14SwipeContainer14setSwipeCutoffEt>:
 801013c:	85c1      	strh	r1, [r0, #46]	@ 0x2e
 801013e:	4770      	bx	lr

08010140 <_ZN8touchgfx14SwipeContainer13PageIndicatorD1Ev>:
 8010140:	4770      	bx	lr

08010142 <_ZN8touchgfx14SwipeContainer13PageIndicatorD0Ev>:
 8010142:	b510      	push	{r4, lr}
 8010144:	4604      	mov	r4, r0
 8010146:	218c      	movs	r1, #140	@ 0x8c
 8010148:	f016 fd21 	bl	8026b8e <_ZdlPvj>
 801014c:	4620      	mov	r0, r4
 801014e:	bd10      	pop	{r4, pc}

08010150 <_ZN8touchgfx14SwipeContainerD1Ev>:
 8010150:	4b05      	ldr	r3, [pc, #20]	@ (8010168 <_ZN8touchgfx14SwipeContainerD1Ev+0x18>)
 8010152:	b510      	push	{r4, lr}
 8010154:	4604      	mov	r4, r0
 8010156:	6003      	str	r3, [r0, #0]
 8010158:	f007 fa3a 	bl	80175d0 <_ZN8touchgfx11Application11getInstanceEv>
 801015c:	3004      	adds	r0, #4
 801015e:	4621      	mov	r1, r4
 8010160:	f007 fa5b 	bl	801761a <_ZN8touchgfx11Application12TimerWidgets6removeEPKNS_8DrawableE>
 8010164:	4620      	mov	r0, r4
 8010166:	bd10      	pop	{r4, pc}
 8010168:	0802bed4 	.word	0x0802bed4

0801016c <_ZN8touchgfx14SwipeContainerD0Ev>:
 801016c:	b510      	push	{r4, lr}
 801016e:	4604      	mov	r4, r0
 8010170:	f7ff ffee 	bl	8010150 <_ZN8touchgfx14SwipeContainerD1Ev>
 8010174:	21f8      	movs	r1, #248	@ 0xf8
 8010176:	4620      	mov	r0, r4
 8010178:	f016 fd09 	bl	8026b8e <_ZdlPvj>
 801017c:	4620      	mov	r0, r4
 801017e:	bd10      	pop	{r4, pc}

08010180 <_ZN8touchgfx14SwipeContainer16handleClickEventERKNS_10ClickEventE>:
 8010180:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
 8010184:	2b07      	cmp	r3, #7
 8010186:	d118      	bne.n	80101ba <_ZN8touchgfx14SwipeContainer16handleClickEventERKNS_10ClickEventE+0x3a>
 8010188:	790b      	ldrb	r3, [r1, #4]
 801018a:	2b01      	cmp	r3, #1
 801018c:	d115      	bne.n	80101ba <_ZN8touchgfx14SwipeContainer16handleClickEventERKNS_10ClickEventE+0x3a>
 801018e:	f9b0 3030 	ldrsh.w	r3, [r0, #48]	@ 0x30
 8010192:	f8b0 2040 	ldrh.w	r2, [r0, #64]	@ 0x40
 8010196:	2b00      	cmp	r3, #0
 8010198:	8643      	strh	r3, [r0, #50]	@ 0x32
 801019a:	8682      	strh	r2, [r0, #52]	@ 0x34
 801019c:	f890 10f5 	ldrb.w	r1, [r0, #245]	@ 0xf5
 80101a0:	da0e      	bge.n	80101c0 <_ZN8touchgfx14SwipeContainer16handleClickEventERKNS_10ClickEventE+0x40>
 80101a2:	f890 20f4 	ldrb.w	r2, [r0, #244]	@ 0xf4
 80101a6:	3a01      	subs	r2, #1
 80101a8:	4291      	cmp	r1, r2
 80101aa:	d007      	beq.n	80101bc <_ZN8touchgfx14SwipeContainer16handleClickEventERKNS_10ClickEventE+0x3c>
 80101ac:	8dc2      	ldrh	r2, [r0, #46]	@ 0x2e
 80101ae:	4252      	negs	r2, r2
 80101b0:	4293      	cmp	r3, r2
 80101b2:	dc03      	bgt.n	80101bc <_ZN8touchgfx14SwipeContainer16handleClickEventERKNS_10ClickEventE+0x3c>
 80101b4:	2302      	movs	r3, #2
 80101b6:	f880 302c 	strb.w	r3, [r0, #44]	@ 0x2c
 80101ba:	4770      	bx	lr
 80101bc:	2300      	movs	r3, #0
 80101be:	e7fa      	b.n	80101b6 <_ZN8touchgfx14SwipeContainer16handleClickEventERKNS_10ClickEventE+0x36>
 80101c0:	d0fb      	beq.n	80101ba <_ZN8touchgfx14SwipeContainer16handleClickEventERKNS_10ClickEventE+0x3a>
 80101c2:	b111      	cbz	r1, 80101ca <_ZN8touchgfx14SwipeContainer16handleClickEventERKNS_10ClickEventE+0x4a>
 80101c4:	8dc2      	ldrh	r2, [r0, #46]	@ 0x2e
 80101c6:	4293      	cmp	r3, r2
 80101c8:	da01      	bge.n	80101ce <_ZN8touchgfx14SwipeContainer16handleClickEventERKNS_10ClickEventE+0x4e>
 80101ca:	2301      	movs	r3, #1
 80101cc:	e7f3      	b.n	80101b6 <_ZN8touchgfx14SwipeContainer16handleClickEventERKNS_10ClickEventE+0x36>
 80101ce:	2303      	movs	r3, #3
 80101d0:	e7f1      	b.n	80101b6 <_ZN8touchgfx14SwipeContainer16handleClickEventERKNS_10ClickEventE+0x36>

080101d2 <_ZN8touchgfx14SwipeContainer18handleGestureEventERKNS_12GestureEventE>:
 80101d2:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
 80101d6:	2b07      	cmp	r3, #7
 80101d8:	d114      	bne.n	8010204 <_ZN8touchgfx14SwipeContainer18handleGestureEventERKNS_12GestureEventE+0x32>
 80101da:	790b      	ldrb	r3, [r1, #4]
 80101dc:	b993      	cbnz	r3, 8010204 <_ZN8touchgfx14SwipeContainer18handleGestureEventERKNS_12GestureEventE+0x32>
 80101de:	8e03      	ldrh	r3, [r0, #48]	@ 0x30
 80101e0:	f890 20f5 	ldrb.w	r2, [r0, #245]	@ 0xf5
 80101e4:	8643      	strh	r3, [r0, #50]	@ 0x32
 80101e6:	f8b0 3040 	ldrh.w	r3, [r0, #64]	@ 0x40
 80101ea:	8683      	strh	r3, [r0, #52]	@ 0x34
 80101ec:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 80101f0:	2b00      	cmp	r3, #0
 80101f2:	da08      	bge.n	8010206 <_ZN8touchgfx14SwipeContainer18handleGestureEventERKNS_12GestureEventE+0x34>
 80101f4:	f890 30f4 	ldrb.w	r3, [r0, #244]	@ 0xf4
 80101f8:	3b01      	subs	r3, #1
 80101fa:	429a      	cmp	r2, r3
 80101fc:	da02      	bge.n	8010204 <_ZN8touchgfx14SwipeContainer18handleGestureEventERKNS_12GestureEventE+0x32>
 80101fe:	2302      	movs	r3, #2
 8010200:	f880 302c 	strb.w	r3, [r0, #44]	@ 0x2c
 8010204:	4770      	bx	lr
 8010206:	d0fd      	beq.n	8010204 <_ZN8touchgfx14SwipeContainer18handleGestureEventERKNS_12GestureEventE+0x32>
 8010208:	2a00      	cmp	r2, #0
 801020a:	d0fb      	beq.n	8010204 <_ZN8touchgfx14SwipeContainer18handleGestureEventERKNS_12GestureEventE+0x32>
 801020c:	2303      	movs	r3, #3
 801020e:	e7f7      	b.n	8010200 <_ZN8touchgfx14SwipeContainer18handleGestureEventERKNS_12GestureEventE+0x2e>

08010210 <_ZN8touchgfx14SwipeContainer23setEndSwipeElasticWidthEt>:
 8010210:	86c1      	strh	r1, [r0, #54]	@ 0x36
 8010212:	4770      	bx	lr

08010214 <_ZN8touchgfx14SwipeContainer18setPageIndicatorXYEss>:
 8010214:	b508      	push	{r3, lr}
 8010216:	306c      	adds	r0, #108	@ 0x6c
 8010218:	f7f3 fda5 	bl	8003d66 <_ZN8touchgfx8Drawable5setXYEss>
 801021c:	bd08      	pop	{r3, pc}

0801021e <_ZN8touchgfx14SwipeContainer11adjustPagesEv>:
 801021e:	b508      	push	{r3, lr}
 8010220:	8e02      	ldrh	r2, [r0, #48]	@ 0x30
 8010222:	303c      	adds	r0, #60	@ 0x3c
 8010224:	f890 10b9 	ldrb.w	r1, [r0, #185]	@ 0xb9
 8010228:	f930 3c34 	ldrsh.w	r3, [r0, #-52]
 801022c:	fb03 2111 	mls	r1, r3, r1, r2
 8010230:	2200      	movs	r2, #0
 8010232:	b209      	sxth	r1, r1
 8010234:	f7f2 fffb 	bl	800322e <_ZN8touchgfx8Drawable6moveToEss>
 8010238:	bd08      	pop	{r3, pc}

0801023a <_ZN8touchgfx14SwipeContainer15handleDragEventERKNS_9DragEventE>:
 801023a:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
 801023e:	2b07      	cmp	r3, #7
 8010240:	d119      	bne.n	8010276 <_ZN8touchgfx14SwipeContainer15handleDragEventERKNS_9DragEventE+0x3c>
 8010242:	88ca      	ldrh	r2, [r1, #6]
 8010244:	8e03      	ldrh	r3, [r0, #48]	@ 0x30
 8010246:	1a9b      	subs	r3, r3, r2
 8010248:	894a      	ldrh	r2, [r1, #10]
 801024a:	f890 10f5 	ldrb.w	r1, [r0, #245]	@ 0xf5
 801024e:	4413      	add	r3, r2
 8010250:	b21b      	sxth	r3, r3
 8010252:	8603      	strh	r3, [r0, #48]	@ 0x30
 8010254:	b921      	cbnz	r1, 8010260 <_ZN8touchgfx14SwipeContainer15handleDragEventERKNS_9DragEventE+0x26>
 8010256:	8ec2      	ldrh	r2, [r0, #54]	@ 0x36
 8010258:	4293      	cmp	r3, r2
 801025a:	dd01      	ble.n	8010260 <_ZN8touchgfx14SwipeContainer15handleDragEventERKNS_9DragEventE+0x26>
 801025c:	8602      	strh	r2, [r0, #48]	@ 0x30
 801025e:	e008      	b.n	8010272 <_ZN8touchgfx14SwipeContainer15handleDragEventERKNS_9DragEventE+0x38>
 8010260:	f890 20f4 	ldrb.w	r2, [r0, #244]	@ 0xf4
 8010264:	3a01      	subs	r2, #1
 8010266:	4291      	cmp	r1, r2
 8010268:	d103      	bne.n	8010272 <_ZN8touchgfx14SwipeContainer15handleDragEventERKNS_9DragEventE+0x38>
 801026a:	8ec2      	ldrh	r2, [r0, #54]	@ 0x36
 801026c:	4252      	negs	r2, r2
 801026e:	4293      	cmp	r3, r2
 8010270:	dbf4      	blt.n	801025c <_ZN8touchgfx14SwipeContainer15handleDragEventERKNS_9DragEventE+0x22>
 8010272:	f7ff bfd4 	b.w	801021e <_ZN8touchgfx14SwipeContainer11adjustPagesEv>
 8010276:	4770      	bx	lr

08010278 <_ZN8touchgfx14SwipeContainer25animateSwipeCancelledLeftEv>:
 8010278:	b538      	push	{r3, r4, r5, lr}
 801027a:	f890 502d 	ldrb.w	r5, [r0, #45]	@ 0x2d
 801027e:	4604      	mov	r4, r0
 8010280:	2d0e      	cmp	r5, #14
 8010282:	d813      	bhi.n	80102ac <_ZN8touchgfx14SwipeContainer25animateSwipeCancelledLeftEv+0x34>
 8010284:	8e42      	ldrh	r2, [r0, #50]	@ 0x32
 8010286:	230e      	movs	r3, #14
 8010288:	2100      	movs	r1, #0
 801028a:	4628      	mov	r0, r5
 801028c:	4252      	negs	r2, r2
 801028e:	b212      	sxth	r2, r2
 8010290:	f009 face 	bl	8019830 <_ZN8touchgfx15EasingEquations11backEaseOutEtsst>
 8010294:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 8010296:	4418      	add	r0, r3
 8010298:	8620      	strh	r0, [r4, #48]	@ 0x30
 801029a:	4620      	mov	r0, r4
 801029c:	f7ff ffbf 	bl	801021e <_ZN8touchgfx14SwipeContainer11adjustPagesEv>
 80102a0:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 80102a4:	3301      	adds	r3, #1
 80102a6:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 80102aa:	bd38      	pop	{r3, r4, r5, pc}
 80102ac:	2307      	movs	r3, #7
 80102ae:	f880 302c 	strb.w	r3, [r0, #44]	@ 0x2c
 80102b2:	2300      	movs	r3, #0
 80102b4:	f880 302d 	strb.w	r3, [r0, #45]	@ 0x2d
 80102b8:	8603      	strh	r3, [r0, #48]	@ 0x30
 80102ba:	e7ef      	b.n	801029c <_ZN8touchgfx14SwipeContainer25animateSwipeCancelledLeftEv+0x24>

080102bc <_ZN8touchgfx14SwipeContainer26animateSwipeCancelledRightEv>:
 80102bc:	b538      	push	{r3, r4, r5, lr}
 80102be:	f890 502d 	ldrb.w	r5, [r0, #45]	@ 0x2d
 80102c2:	4604      	mov	r4, r0
 80102c4:	2d0e      	cmp	r5, #14
 80102c6:	d812      	bhi.n	80102ee <_ZN8touchgfx14SwipeContainer26animateSwipeCancelledRightEv+0x32>
 80102c8:	230e      	movs	r3, #14
 80102ca:	f9b0 2032 	ldrsh.w	r2, [r0, #50]	@ 0x32
 80102ce:	2100      	movs	r1, #0
 80102d0:	4628      	mov	r0, r5
 80102d2:	f009 faad 	bl	8019830 <_ZN8touchgfx15EasingEquations11backEaseOutEtsst>
 80102d6:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 80102d8:	1a18      	subs	r0, r3, r0
 80102da:	8620      	strh	r0, [r4, #48]	@ 0x30
 80102dc:	4620      	mov	r0, r4
 80102de:	f7ff ff9e 	bl	801021e <_ZN8touchgfx14SwipeContainer11adjustPagesEv>
 80102e2:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 80102e6:	3301      	adds	r3, #1
 80102e8:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 80102ec:	bd38      	pop	{r3, r4, r5, pc}
 80102ee:	2307      	movs	r3, #7
 80102f0:	f880 302c 	strb.w	r3, [r0, #44]	@ 0x2c
 80102f4:	2300      	movs	r3, #0
 80102f6:	f880 302d 	strb.w	r3, [r0, #45]	@ 0x2d
 80102fa:	8603      	strh	r3, [r0, #48]	@ 0x30
 80102fc:	e7ef      	b.n	80102de <_ZN8touchgfx14SwipeContainer26animateSwipeCancelledRightEv+0x22>
	...

08010300 <_ZN8touchgfx14SwipeContainer13PageIndicatorC1Ev>:
 8010300:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8010304:	4604      	mov	r4, r0
 8010306:	2500      	movs	r5, #0
 8010308:	f7fe ff76 	bl	800f1f8 <_ZN8touchgfx8DrawableC1Ev>
 801030c:	af02      	add	r7, sp, #8
 801030e:	4626      	mov	r6, r4
 8010310:	4b18      	ldr	r3, [pc, #96]	@ (8010374 <_ZN8touchgfx14SwipeContainer13PageIndicatorC1Ev+0x74>)
 8010312:	f64f 79ff 	movw	r9, #65535	@ 0xffff
 8010316:	62a5      	str	r5, [r4, #40]	@ 0x28
 8010318:	f846 3b2c 	str.w	r3, [r6], #44
 801031c:	4630      	mov	r0, r6
 801031e:	f827 9d04 	strh.w	r9, [r7, #-4]!
 8010322:	4639      	mov	r1, r7
 8010324:	f7f4 f8ec 	bl	8004500 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 8010328:	f104 085c 	add.w	r8, r4, #92	@ 0x5c
 801032c:	4b12      	ldr	r3, [pc, #72]	@ (8010378 <_ZN8touchgfx14SwipeContainer13PageIndicatorC1Ev+0x78>)
 801032e:	4639      	mov	r1, r7
 8010330:	f8a4 5056 	strh.w	r5, [r4, #86]	@ 0x56
 8010334:	4640      	mov	r0, r8
 8010336:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8010338:	f8a4 5058 	strh.w	r5, [r4, #88]	@ 0x58
 801033c:	f8ad 9004 	strh.w	r9, [sp, #4]
 8010340:	f7f4 f8de 	bl	8004500 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 8010344:	462a      	mov	r2, r5
 8010346:	4629      	mov	r1, r5
 8010348:	4630      	mov	r0, r6
 801034a:	f8a4 5088 	strh.w	r5, [r4, #136]	@ 0x88
 801034e:	f7f3 fd0a 	bl	8003d66 <_ZN8touchgfx8Drawable5setXYEss>
 8010352:	462a      	mov	r2, r5
 8010354:	4629      	mov	r1, r5
 8010356:	4640      	mov	r0, r8
 8010358:	f7f3 fd05 	bl	8003d66 <_ZN8touchgfx8Drawable5setXYEss>
 801035c:	4631      	mov	r1, r6
 801035e:	4620      	mov	r0, r4
 8010360:	f7ff f9c9 	bl	800f6f6 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8010364:	4620      	mov	r0, r4
 8010366:	4641      	mov	r1, r8
 8010368:	f7ff f9c5 	bl	800f6f6 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 801036c:	4620      	mov	r0, r4
 801036e:	b003      	add	sp, #12
 8010370:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010374:	0802be44 	.word	0x0802be44
 8010378:	0802c474 	.word	0x0802c474

0801037c <_ZN8touchgfx14SwipeContainerC1Ev>:
 801037c:	b570      	push	{r4, r5, r6, lr}
 801037e:	4604      	mov	r4, r0
 8010380:	f7fe ff3a 	bl	800f1f8 <_ZN8touchgfx8DrawableC1Ev>
 8010384:	4b1c      	ldr	r3, [pc, #112]	@ (80103f8 <_ZN8touchgfx14SwipeContainerC1Ev+0x7c>)
 8010386:	2500      	movs	r5, #0
 8010388:	f104 063c 	add.w	r6, r4, #60	@ 0x3c
 801038c:	6023      	str	r3, [r4, #0]
 801038e:	2307      	movs	r3, #7
 8010390:	62a5      	str	r5, [r4, #40]	@ 0x28
 8010392:	4630      	mov	r0, r6
 8010394:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
 8010398:	2350      	movs	r3, #80	@ 0x50
 801039a:	f884 502d 	strb.w	r5, [r4, #45]	@ 0x2d
 801039e:	85e3      	strh	r3, [r4, #46]	@ 0x2e
 80103a0:	231e      	movs	r3, #30
 80103a2:	8625      	strh	r5, [r4, #48]	@ 0x30
 80103a4:	86e3      	strh	r3, [r4, #54]	@ 0x36
 80103a6:	2314      	movs	r3, #20
 80103a8:	8665      	strh	r5, [r4, #50]	@ 0x32
 80103aa:	86a5      	strh	r5, [r4, #52]	@ 0x34
 80103ac:	f884 3038 	strb.w	r3, [r4, #56]	@ 0x38
 80103b0:	f884 5039 	strb.w	r5, [r4, #57]	@ 0x39
 80103b4:	f7fe ff20 	bl	800f1f8 <_ZN8touchgfx8DrawableC1Ev>
 80103b8:	4b10      	ldr	r3, [pc, #64]	@ (80103fc <_ZN8touchgfx14SwipeContainerC1Ev+0x80>)
 80103ba:	6665      	str	r5, [r4, #100]	@ 0x64
 80103bc:	63e3      	str	r3, [r4, #60]	@ 0x3c
 80103be:	2302      	movs	r3, #2
 80103c0:	f8a4 506a 	strh.w	r5, [r4, #106]	@ 0x6a
 80103c4:	f104 056c 	add.w	r5, r4, #108	@ 0x6c
 80103c8:	f884 3068 	strb.w	r3, [r4, #104]	@ 0x68
 80103cc:	4628      	mov	r0, r5
 80103ce:	f7ff ff97 	bl	8010300 <_ZN8touchgfx14SwipeContainer13PageIndicatorC1Ev>
 80103d2:	f007 f8fd 	bl	80175d0 <_ZN8touchgfx11Application11getInstanceEv>
 80103d6:	4621      	mov	r1, r4
 80103d8:	3004      	adds	r0, #4
 80103da:	f007 f9c7 	bl	801776c <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE>
 80103de:	2301      	movs	r3, #1
 80103e0:	4631      	mov	r1, r6
 80103e2:	4620      	mov	r0, r4
 80103e4:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
 80103e8:	f7ff f985 	bl	800f6f6 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 80103ec:	4620      	mov	r0, r4
 80103ee:	4629      	mov	r1, r5
 80103f0:	f7ff f981 	bl	800f6f6 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 80103f4:	4620      	mov	r0, r4
 80103f6:	bd70      	pop	{r4, r5, r6, pc}
 80103f8:	0802bed4 	.word	0x0802bed4
 80103fc:	0802bf98 	.word	0x0802bf98

08010400 <_ZN8touchgfx14SwipeContainer13PageIndicator14setCurrentPageEh>:
 8010400:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8010402:	f890 3088 	ldrb.w	r3, [r0, #136]	@ 0x88
 8010406:	4604      	mov	r4, r0
 8010408:	460d      	mov	r5, r1
 801040a:	428b      	cmp	r3, r1
 801040c:	d915      	bls.n	801043a <_ZN8touchgfx14SwipeContainer13PageIndicator14setCurrentPageEh+0x3a>
 801040e:	f890 3089 	ldrb.w	r3, [r0, #137]	@ 0x89
 8010412:	428b      	cmp	r3, r1
 8010414:	d011      	beq.n	801043a <_ZN8touchgfx14SwipeContainer13PageIndicator14setCurrentPageEh+0x3a>
 8010416:	f884 1089 	strb.w	r1, [r4, #137]	@ 0x89
 801041a:	f8b0 3052 	ldrh.w	r3, [r0, #82]	@ 0x52
 801041e:	a802      	add	r0, sp, #8
 8010420:	f820 3d04 	strh.w	r3, [r0, #-4]!
 8010424:	f00a feec 	bl	801b200 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8010428:	fb15 f100 	smulbb	r1, r5, r0
 801042c:	f9b4 2062 	ldrsh.w	r2, [r4, #98]	@ 0x62
 8010430:	f104 005c 	add.w	r0, r4, #92	@ 0x5c
 8010434:	b209      	sxth	r1, r1
 8010436:	f7f2 fefa 	bl	800322e <_ZN8touchgfx8Drawable6moveToEss>
 801043a:	b003      	add	sp, #12
 801043c:	bd30      	pop	{r4, r5, pc}

0801043e <_ZN8touchgfx14SwipeContainer13PageIndicator16setNumberOfPagesEh>:
 801043e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8010440:	4604      	mov	r4, r0
 8010442:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8010446:	460d      	mov	r5, r1
 8010448:	f884 1088 	strb.w	r1, [r4, #136]	@ 0x88
 801044c:	f8b0 3052 	ldrh.w	r3, [r0, #82]	@ 0x52
 8010450:	4293      	cmp	r3, r2
 8010452:	d01e      	beq.n	8010492 <_ZN8touchgfx14SwipeContainer13PageIndicator16setNumberOfPagesEh+0x54>
 8010454:	a802      	add	r0, sp, #8
 8010456:	f820 3d04 	strh.w	r3, [r0, #-4]!
 801045a:	f00a fed1 	bl	801b200 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801045e:	6823      	ldr	r3, [r4, #0]
 8010460:	fb15 f000 	smulbb	r0, r5, r0
 8010464:	86a0      	strh	r0, [r4, #52]	@ 0x34
 8010466:	4620      	mov	r0, r4
 8010468:	695b      	ldr	r3, [r3, #20]
 801046a:	4798      	blx	r3
 801046c:	f9b4 2036 	ldrsh.w	r2, [r4, #54]	@ 0x36
 8010470:	f9b4 1034 	ldrsh.w	r1, [r4, #52]	@ 0x34
 8010474:	4620      	mov	r0, r4
 8010476:	f7fe fed7 	bl	800f228 <_ZN8touchgfx8Drawable14setWidthHeightEss>
 801047a:	f894 1089 	ldrb.w	r1, [r4, #137]	@ 0x89
 801047e:	4620      	mov	r0, r4
 8010480:	42a9      	cmp	r1, r5
 8010482:	bf28      	it	cs
 8010484:	4629      	movcs	r1, r5
 8010486:	f7ff ffbb 	bl	8010400 <_ZN8touchgfx14SwipeContainer13PageIndicator14setCurrentPageEh>
 801048a:	6823      	ldr	r3, [r4, #0]
 801048c:	4620      	mov	r0, r4
 801048e:	695b      	ldr	r3, [r3, #20]
 8010490:	4798      	blx	r3
 8010492:	b003      	add	sp, #12
 8010494:	bd30      	pop	{r4, r5, pc}

08010496 <_ZN8touchgfx14SwipeContainer13PageIndicator10setBitmapsERKNS_6BitmapES4_>:
 8010496:	b538      	push	{r3, r4, r5, lr}
 8010498:	4604      	mov	r4, r0
 801049a:	460d      	mov	r5, r1
 801049c:	305c      	adds	r0, #92	@ 0x5c
 801049e:	4611      	mov	r1, r2
 80104a0:	f004 fc87 	bl	8014db2 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 80104a4:	4629      	mov	r1, r5
 80104a6:	f104 002c 	add.w	r0, r4, #44	@ 0x2c
 80104aa:	f004 f8cb 	bl	8014644 <_ZN8touchgfx10TiledImage9setBitmapERKNS_6BitmapE>
 80104ae:	f894 1088 	ldrb.w	r1, [r4, #136]	@ 0x88
 80104b2:	b121      	cbz	r1, 80104be <_ZN8touchgfx14SwipeContainer13PageIndicator10setBitmapsERKNS_6BitmapES4_+0x28>
 80104b4:	4620      	mov	r0, r4
 80104b6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80104ba:	f7ff bfc0 	b.w	801043e <_ZN8touchgfx14SwipeContainer13PageIndicator16setNumberOfPagesEh>
 80104be:	bd38      	pop	{r3, r4, r5, pc}

080104c0 <_ZN8touchgfx14SwipeContainer23setPageIndicatorBitmapsERKNS_6BitmapES3_>:
 80104c0:	306c      	adds	r0, #108	@ 0x6c
 80104c2:	f7ff bfe8 	b.w	8010496 <_ZN8touchgfx14SwipeContainer13PageIndicator10setBitmapsERKNS_6BitmapES4_>

080104c6 <_ZN8touchgfx14SwipeContainer13PageIndicator7goRightEv>:
 80104c6:	f890 1089 	ldrb.w	r1, [r0, #137]	@ 0x89
 80104ca:	f890 2088 	ldrb.w	r2, [r0, #136]	@ 0x88
 80104ce:	3101      	adds	r1, #1
 80104d0:	fb91 f3f2 	sdiv	r3, r1, r2
 80104d4:	fb02 1113 	mls	r1, r2, r3, r1
 80104d8:	b2c9      	uxtb	r1, r1
 80104da:	f7ff bf91 	b.w	8010400 <_ZN8touchgfx14SwipeContainer13PageIndicator14setCurrentPageEh>

080104de <_ZN8touchgfx14SwipeContainer11animateLeftEv>:
 80104de:	b510      	push	{r4, lr}
 80104e0:	4604      	mov	r4, r0
 80104e2:	f890 002d 	ldrb.w	r0, [r0, #45]	@ 0x2d
 80104e6:	280a      	cmp	r0, #10
 80104e8:	d813      	bhi.n	8010512 <_ZN8touchgfx14SwipeContainer11animateLeftEv+0x34>
 80104ea:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 80104ec:	2100      	movs	r1, #0
 80104ee:	8922      	ldrh	r2, [r4, #8]
 80104f0:	441a      	add	r2, r3
 80104f2:	230a      	movs	r3, #10
 80104f4:	b212      	sxth	r2, r2
 80104f6:	f009 f9d9 	bl	80198ac <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst>
 80104fa:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 80104fc:	1a18      	subs	r0, r3, r0
 80104fe:	8620      	strh	r0, [r4, #48]	@ 0x30
 8010500:	4620      	mov	r0, r4
 8010502:	f7ff fe8c 	bl	801021e <_ZN8touchgfx14SwipeContainer11adjustPagesEv>
 8010506:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 801050a:	3301      	adds	r3, #1
 801050c:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8010510:	bd10      	pop	{r4, pc}
 8010512:	2307      	movs	r3, #7
 8010514:	f104 006c 	add.w	r0, r4, #108	@ 0x6c
 8010518:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
 801051c:	2300      	movs	r3, #0
 801051e:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8010522:	8623      	strh	r3, [r4, #48]	@ 0x30
 8010524:	f7ff ffcf 	bl	80104c6 <_ZN8touchgfx14SwipeContainer13PageIndicator7goRightEv>
 8010528:	e7ea      	b.n	8010500 <_ZN8touchgfx14SwipeContainer11animateLeftEv+0x22>

0801052a <_ZN8touchgfx14SwipeContainer13PageIndicator6goLeftEv>:
 801052a:	f890 2088 	ldrb.w	r2, [r0, #136]	@ 0x88
 801052e:	f890 1089 	ldrb.w	r1, [r0, #137]	@ 0x89
 8010532:	4411      	add	r1, r2
 8010534:	3901      	subs	r1, #1
 8010536:	fb91 f3f2 	sdiv	r3, r1, r2
 801053a:	fb02 1113 	mls	r1, r2, r3, r1
 801053e:	b2c9      	uxtb	r1, r1
 8010540:	f7ff bf5e 	b.w	8010400 <_ZN8touchgfx14SwipeContainer13PageIndicator14setCurrentPageEh>

08010544 <_ZN8touchgfx14SwipeContainer12animateRightEv>:
 8010544:	b510      	push	{r4, lr}
 8010546:	4604      	mov	r4, r0
 8010548:	f890 002d 	ldrb.w	r0, [r0, #45]	@ 0x2d
 801054c:	280a      	cmp	r0, #10
 801054e:	d813      	bhi.n	8010578 <_ZN8touchgfx14SwipeContainer12animateRightEv+0x34>
 8010550:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 8010552:	2100      	movs	r1, #0
 8010554:	8922      	ldrh	r2, [r4, #8]
 8010556:	1ad2      	subs	r2, r2, r3
 8010558:	230a      	movs	r3, #10
 801055a:	b212      	sxth	r2, r2
 801055c:	f009 f9a6 	bl	80198ac <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst>
 8010560:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 8010562:	4418      	add	r0, r3
 8010564:	8620      	strh	r0, [r4, #48]	@ 0x30
 8010566:	4620      	mov	r0, r4
 8010568:	f7ff fe59 	bl	801021e <_ZN8touchgfx14SwipeContainer11adjustPagesEv>
 801056c:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8010570:	3301      	adds	r3, #1
 8010572:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8010576:	bd10      	pop	{r4, pc}
 8010578:	2307      	movs	r3, #7
 801057a:	f104 006c 	add.w	r0, r4, #108	@ 0x6c
 801057e:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
 8010582:	2300      	movs	r3, #0
 8010584:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8010588:	8623      	strh	r3, [r4, #48]	@ 0x30
 801058a:	f7ff ffce 	bl	801052a <_ZN8touchgfx14SwipeContainer13PageIndicator6goLeftEv>
 801058e:	e7ea      	b.n	8010566 <_ZN8touchgfx14SwipeContainer12animateRightEv+0x22>

08010590 <_ZN8touchgfx14SwipeContainer15setSelectedPageEh>:
 8010590:	b510      	push	{r4, lr}
 8010592:	f890 30f4 	ldrb.w	r3, [r0, #244]	@ 0xf4
 8010596:	4604      	mov	r4, r0
 8010598:	428b      	cmp	r3, r1
 801059a:	d907      	bls.n	80105ac <_ZN8touchgfx14SwipeContainer15setSelectedPageEh+0x1c>
 801059c:	306c      	adds	r0, #108	@ 0x6c
 801059e:	f7ff ff2f 	bl	8010400 <_ZN8touchgfx14SwipeContainer13PageIndicator14setCurrentPageEh>
 80105a2:	4620      	mov	r0, r4
 80105a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80105a8:	f7ff be39 	b.w	801021e <_ZN8touchgfx14SwipeContainer11adjustPagesEv>
 80105ac:	bd10      	pop	{r4, pc}

080105ae <_ZN8touchgfx14SwipeContainer3addERNS_8DrawableE>:
 80105ae:	b538      	push	{r3, r4, r5, lr}
 80105b0:	4604      	mov	r4, r0
 80105b2:	303c      	adds	r0, #60	@ 0x3c
 80105b4:	460d      	mov	r5, r1
 80105b6:	f000 f9fd 	bl	80109b4 <_ZN8touchgfx10ListLayout3addERNS_8DrawableE>
 80105ba:	f894 10f4 	ldrb.w	r1, [r4, #244]	@ 0xf4
 80105be:	f104 006c 	add.w	r0, r4, #108	@ 0x6c
 80105c2:	3101      	adds	r1, #1
 80105c4:	b2c9      	uxtb	r1, r1
 80105c6:	f7ff ff3a 	bl	801043e <_ZN8touchgfx14SwipeContainer13PageIndicator16setNumberOfPagesEh>
 80105ca:	f894 10f5 	ldrb.w	r1, [r4, #245]	@ 0xf5
 80105ce:	4620      	mov	r0, r4
 80105d0:	f7ff ffde 	bl	8010590 <_ZN8touchgfx14SwipeContainer15setSelectedPageEh>
 80105d4:	f9b5 200a 	ldrsh.w	r2, [r5, #10]
 80105d8:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 80105dc:	4620      	mov	r0, r4
 80105de:	f7fe fe23 	bl	800f228 <_ZN8touchgfx8Drawable14setWidthHeightEss>
 80105e2:	bd38      	pop	{r3, r4, r5, pc}

080105e4 <_ZN8touchgfx14SwipeContainer6removeERNS_8DrawableE>:
 80105e4:	b538      	push	{r3, r4, r5, lr}
 80105e6:	f890 30f4 	ldrb.w	r3, [r0, #244]	@ 0xf4
 80105ea:	4604      	mov	r4, r0
 80105ec:	b1e3      	cbz	r3, 8010628 <_ZN8touchgfx14SwipeContainer6removeERNS_8DrawableE+0x44>
 80105ee:	6e43      	ldr	r3, [r0, #100]	@ 0x64
 80105f0:	b1d3      	cbz	r3, 8010628 <_ZN8touchgfx14SwipeContainer6removeERNS_8DrawableE+0x44>
 80105f2:	428b      	cmp	r3, r1
 80105f4:	d125      	bne.n	8010642 <_ZN8touchgfx14SwipeContainer6removeERNS_8DrawableE+0x5e>
 80105f6:	4619      	mov	r1, r3
 80105f8:	f104 003c 	add.w	r0, r4, #60	@ 0x3c
 80105fc:	f000 fa5a 	bl	8010ab4 <_ZN8touchgfx10ListLayout6removeERNS_8DrawableE>
 8010600:	f894 10f4 	ldrb.w	r1, [r4, #244]	@ 0xf4
 8010604:	f104 006c 	add.w	r0, r4, #108	@ 0x6c
 8010608:	3901      	subs	r1, #1
 801060a:	b2c9      	uxtb	r1, r1
 801060c:	f7ff ff17 	bl	801043e <_ZN8touchgfx14SwipeContainer13PageIndicator16setNumberOfPagesEh>
 8010610:	f894 50f4 	ldrb.w	r5, [r4, #244]	@ 0xf4
 8010614:	b94d      	cbnz	r5, 801062a <_ZN8touchgfx14SwipeContainer6removeERNS_8DrawableE+0x46>
 8010616:	6823      	ldr	r3, [r4, #0]
 8010618:	4620      	mov	r0, r4
 801061a:	695b      	ldr	r3, [r3, #20]
 801061c:	4798      	blx	r3
 801061e:	462a      	mov	r2, r5
 8010620:	4629      	mov	r1, r5
 8010622:	4620      	mov	r0, r4
 8010624:	f7fe fe00 	bl	800f228 <_ZN8touchgfx8Drawable14setWidthHeightEss>
 8010628:	bd38      	pop	{r3, r4, r5, pc}
 801062a:	f894 10f5 	ldrb.w	r1, [r4, #245]	@ 0xf5
 801062e:	3d01      	subs	r5, #1
 8010630:	4620      	mov	r0, r4
 8010632:	42a9      	cmp	r1, r5
 8010634:	bfa8      	it	ge
 8010636:	4629      	movge	r1, r5
 8010638:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801063c:	b2c9      	uxtb	r1, r1
 801063e:	f7ff bfa7 	b.w	8010590 <_ZN8touchgfx14SwipeContainer15setSelectedPageEh>
 8010642:	699b      	ldr	r3, [r3, #24]
 8010644:	e7d4      	b.n	80105f0 <_ZN8touchgfx14SwipeContainer6removeERNS_8DrawableE+0xc>

08010646 <_ZN8touchgfx14SwipeContainer21animateLeftWithButtonEv>:
 8010646:	b510      	push	{r4, lr}
 8010648:	4604      	mov	r4, r0
 801064a:	f890 002d 	ldrb.w	r0, [r0, #45]	@ 0x2d
 801064e:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 8010652:	4298      	cmp	r0, r3
 8010654:	d812      	bhi.n	801067c <_ZN8touchgfx14SwipeContainer21animateLeftWithButtonEv+0x36>
 8010656:	8e61      	ldrh	r1, [r4, #50]	@ 0x32
 8010658:	8922      	ldrh	r2, [r4, #8]
 801065a:	440a      	add	r2, r1
 801065c:	2100      	movs	r1, #0
 801065e:	b212      	sxth	r2, r2
 8010660:	f009 f924 	bl	80198ac <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst>
 8010664:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 8010666:	1a18      	subs	r0, r3, r0
 8010668:	8620      	strh	r0, [r4, #48]	@ 0x30
 801066a:	4620      	mov	r0, r4
 801066c:	f7ff fdd7 	bl	801021e <_ZN8touchgfx14SwipeContainer11adjustPagesEv>
 8010670:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8010674:	3301      	adds	r3, #1
 8010676:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 801067a:	bd10      	pop	{r4, pc}
 801067c:	2307      	movs	r3, #7
 801067e:	f104 006c 	add.w	r0, r4, #108	@ 0x6c
 8010682:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
 8010686:	2300      	movs	r3, #0
 8010688:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 801068c:	8623      	strh	r3, [r4, #48]	@ 0x30
 801068e:	f7ff ff1a 	bl	80104c6 <_ZN8touchgfx14SwipeContainer13PageIndicator7goRightEv>
 8010692:	e7ea      	b.n	801066a <_ZN8touchgfx14SwipeContainer21animateLeftWithButtonEv+0x24>

08010694 <_ZN8touchgfx14SwipeContainer22animateRightWithButtonEv>:
 8010694:	b510      	push	{r4, lr}
 8010696:	4604      	mov	r4, r0
 8010698:	f890 002d 	ldrb.w	r0, [r0, #45]	@ 0x2d
 801069c:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 80106a0:	4298      	cmp	r0, r3
 80106a2:	d812      	bhi.n	80106ca <_ZN8touchgfx14SwipeContainer22animateRightWithButtonEv+0x36>
 80106a4:	8e61      	ldrh	r1, [r4, #50]	@ 0x32
 80106a6:	8922      	ldrh	r2, [r4, #8]
 80106a8:	1a52      	subs	r2, r2, r1
 80106aa:	2100      	movs	r1, #0
 80106ac:	b212      	sxth	r2, r2
 80106ae:	f009 f8fd 	bl	80198ac <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst>
 80106b2:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 80106b4:	4418      	add	r0, r3
 80106b6:	8620      	strh	r0, [r4, #48]	@ 0x30
 80106b8:	4620      	mov	r0, r4
 80106ba:	f7ff fdb0 	bl	801021e <_ZN8touchgfx14SwipeContainer11adjustPagesEv>
 80106be:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 80106c2:	3301      	adds	r3, #1
 80106c4:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 80106c8:	bd10      	pop	{r4, pc}
 80106ca:	2307      	movs	r3, #7
 80106cc:	f104 006c 	add.w	r0, r4, #108	@ 0x6c
 80106d0:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
 80106d4:	2300      	movs	r3, #0
 80106d6:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 80106da:	8623      	strh	r3, [r4, #48]	@ 0x30
 80106dc:	f7ff ff25 	bl	801052a <_ZN8touchgfx14SwipeContainer13PageIndicator6goLeftEv>
 80106e0:	e7ea      	b.n	80106b8 <_ZN8touchgfx14SwipeContainer22animateRightWithButtonEv+0x24>

080106e2 <_ZN8touchgfx14SwipeContainer13animateToPageEv>:
 80106e2:	b538      	push	{r3, r4, r5, lr}
 80106e4:	4604      	mov	r4, r0
 80106e6:	f890 002d 	ldrb.w	r0, [r0, #45]	@ 0x2d
 80106ea:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 80106ee:	f994 1039 	ldrsb.w	r1, [r4, #57]	@ 0x39
 80106f2:	4298      	cmp	r0, r3
 80106f4:	d814      	bhi.n	8010720 <_ZN8touchgfx14SwipeContainer13animateToPageEv+0x3e>
 80106f6:	f9b4 5008 	ldrsh.w	r5, [r4, #8]
 80106fa:	8e62      	ldrh	r2, [r4, #50]	@ 0x32
 80106fc:	fb05 2201 	mla	r2, r5, r1, r2
 8010700:	2100      	movs	r1, #0
 8010702:	b212      	sxth	r2, r2
 8010704:	f009 f8d2 	bl	80198ac <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst>
 8010708:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 801070a:	1a18      	subs	r0, r3, r0
 801070c:	8620      	strh	r0, [r4, #48]	@ 0x30
 801070e:	4620      	mov	r0, r4
 8010710:	f7ff fd85 	bl	801021e <_ZN8touchgfx14SwipeContainer11adjustPagesEv>
 8010714:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8010718:	3301      	adds	r3, #1
 801071a:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 801071e:	bd38      	pop	{r3, r4, r5, pc}
 8010720:	2307      	movs	r3, #7
 8010722:	f894 20f5 	ldrb.w	r2, [r4, #245]	@ 0xf5
 8010726:	f104 006c 	add.w	r0, r4, #108	@ 0x6c
 801072a:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
 801072e:	4411      	add	r1, r2
 8010730:	2300      	movs	r3, #0
 8010732:	b2c9      	uxtb	r1, r1
 8010734:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8010738:	8623      	strh	r3, [r4, #48]	@ 0x30
 801073a:	f7ff fe61 	bl	8010400 <_ZN8touchgfx14SwipeContainer13PageIndicator14setCurrentPageEh>
 801073e:	e7e6      	b.n	801070e <_ZN8touchgfx14SwipeContainer13animateToPageEv+0x2c>

08010740 <_ZN8touchgfx14SwipeContainer15handleTickEventEv>:
 8010740:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
 8010744:	b90b      	cbnz	r3, 801074a <_ZN8touchgfx14SwipeContainer15handleTickEventEv+0xa>
 8010746:	f7ff bd97 	b.w	8010278 <_ZN8touchgfx14SwipeContainer25animateSwipeCancelledLeftEv>
 801074a:	2b01      	cmp	r3, #1
 801074c:	d101      	bne.n	8010752 <_ZN8touchgfx14SwipeContainer15handleTickEventEv+0x12>
 801074e:	f7ff bdb5 	b.w	80102bc <_ZN8touchgfx14SwipeContainer26animateSwipeCancelledRightEv>
 8010752:	2b02      	cmp	r3, #2
 8010754:	d101      	bne.n	801075a <_ZN8touchgfx14SwipeContainer15handleTickEventEv+0x1a>
 8010756:	f7ff bec2 	b.w	80104de <_ZN8touchgfx14SwipeContainer11animateLeftEv>
 801075a:	2b03      	cmp	r3, #3
 801075c:	d101      	bne.n	8010762 <_ZN8touchgfx14SwipeContainer15handleTickEventEv+0x22>
 801075e:	f7ff bef1 	b.w	8010544 <_ZN8touchgfx14SwipeContainer12animateRightEv>
 8010762:	2b04      	cmp	r3, #4
 8010764:	d101      	bne.n	801076a <_ZN8touchgfx14SwipeContainer15handleTickEventEv+0x2a>
 8010766:	f7ff bf6e 	b.w	8010646 <_ZN8touchgfx14SwipeContainer21animateLeftWithButtonEv>
 801076a:	2b05      	cmp	r3, #5
 801076c:	d101      	bne.n	8010772 <_ZN8touchgfx14SwipeContainer15handleTickEventEv+0x32>
 801076e:	f7ff bf91 	b.w	8010694 <_ZN8touchgfx14SwipeContainer22animateRightWithButtonEv>
 8010772:	2b06      	cmp	r3, #6
 8010774:	d101      	bne.n	801077a <_ZN8touchgfx14SwipeContainer15handleTickEventEv+0x3a>
 8010776:	f7ff bfb4 	b.w	80106e2 <_ZN8touchgfx14SwipeContainer13animateToPageEv>
 801077a:	4770      	bx	lr

0801077c <_ZNK8touchgfx10ListLayout12getDirectionEv>:
 801077c:	f890 002c 	ldrb.w	r0, [r0, #44]	@ 0x2c
 8010780:	4770      	bx	lr

08010782 <_ZN8touchgfx14AdjustElements12handleRemoveERNS_8DrawableE>:
 8010782:	b538      	push	{r3, r4, r5, lr}
 8010784:	7882      	ldrb	r2, [r0, #2]
 8010786:	4604      	mov	r4, r0
 8010788:	460d      	mov	r5, r1
 801078a:	6843      	ldr	r3, [r0, #4]
 801078c:	b98a      	cbnz	r2, 80107b2 <_ZN8touchgfx14AdjustElements12handleRemoveERNS_8DrawableE+0x30>
 801078e:	4299      	cmp	r1, r3
 8010790:	d101      	bne.n	8010796 <_ZN8touchgfx14AdjustElements12handleRemoveERNS_8DrawableE+0x14>
 8010792:	2301      	movs	r3, #1
 8010794:	7083      	strb	r3, [r0, #2]
 8010796:	6863      	ldr	r3, [r4, #4]
 8010798:	42ab      	cmp	r3, r5
 801079a:	d009      	beq.n	80107b0 <_ZN8touchgfx14AdjustElements12handleRemoveERNS_8DrawableE+0x2e>
 801079c:	7a23      	ldrb	r3, [r4, #8]
 801079e:	2b01      	cmp	r3, #1
 80107a0:	d11b      	bne.n	80107da <_ZN8touchgfx14AdjustElements12handleRemoveERNS_8DrawableE+0x58>
 80107a2:	f9b5 3008 	ldrsh.w	r3, [r5, #8]
 80107a6:	f9b4 2000 	ldrsh.w	r2, [r4]
 80107aa:	429a      	cmp	r2, r3
 80107ac:	bfb8      	it	lt
 80107ae:	8023      	strhlt	r3, [r4, #0]
 80107b0:	bd38      	pop	{r3, r4, r5, pc}
 80107b2:	7a02      	ldrb	r2, [r0, #8]
 80107b4:	2a01      	cmp	r2, #1
 80107b6:	d108      	bne.n	80107ca <_ZN8touchgfx14AdjustElements12handleRemoveERNS_8DrawableE+0x48>
 80107b8:	895b      	ldrh	r3, [r3, #10]
 80107ba:	88c9      	ldrh	r1, [r1, #6]
 80107bc:	1ac9      	subs	r1, r1, r3
 80107be:	682b      	ldr	r3, [r5, #0]
 80107c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80107c2:	b209      	sxth	r1, r1
 80107c4:	4628      	mov	r0, r5
 80107c6:	4798      	blx	r3
 80107c8:	e7e5      	b.n	8010796 <_ZN8touchgfx14AdjustElements12handleRemoveERNS_8DrawableE+0x14>
 80107ca:	2a02      	cmp	r2, #2
 80107cc:	d1e3      	bne.n	8010796 <_ZN8touchgfx14AdjustElements12handleRemoveERNS_8DrawableE+0x14>
 80107ce:	891b      	ldrh	r3, [r3, #8]
 80107d0:	8889      	ldrh	r1, [r1, #4]
 80107d2:	1ac9      	subs	r1, r1, r3
 80107d4:	682b      	ldr	r3, [r5, #0]
 80107d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80107d8:	e7f3      	b.n	80107c2 <_ZN8touchgfx14AdjustElements12handleRemoveERNS_8DrawableE+0x40>
 80107da:	2b02      	cmp	r3, #2
 80107dc:	d1e8      	bne.n	80107b0 <_ZN8touchgfx14AdjustElements12handleRemoveERNS_8DrawableE+0x2e>
 80107de:	f9b5 300a 	ldrsh.w	r3, [r5, #10]
 80107e2:	e7e0      	b.n	80107a6 <_ZN8touchgfx14AdjustElements12handleRemoveERNS_8DrawableE+0x24>

080107e4 <_ZN8touchgfx8CallbackINS_14AdjustElementsERNS_8DrawableEvvED1Ev>:
 80107e4:	4770      	bx	lr

080107e6 <_ZN8touchgfx8CallbackINS_10ListLayoutERNS_8DrawableEvvED1Ev>:
 80107e6:	4770      	bx	lr

080107e8 <_ZN8touchgfx10ListLayoutD1Ev>:
 80107e8:	4770      	bx	lr

080107ea <_ZN8touchgfx8CallbackINS_14AdjustElementsERNS_8DrawableEvvE7executeES3_>:
 80107ea:	b430      	push	{r4, r5}
 80107ec:	68c5      	ldr	r5, [r0, #12]
 80107ee:	4603      	mov	r3, r0
 80107f0:	6844      	ldr	r4, [r0, #4]
 80107f2:	106a      	asrs	r2, r5, #1
 80107f4:	07ed      	lsls	r5, r5, #31
 80107f6:	689b      	ldr	r3, [r3, #8]
 80107f8:	eb04 0002 	add.w	r0, r4, r2
 80107fc:	bf48      	it	mi
 80107fe:	58a2      	ldrmi	r2, [r4, r2]
 8010800:	bc30      	pop	{r4, r5}
 8010802:	bf48      	it	mi
 8010804:	58d3      	ldrmi	r3, [r2, r3]
 8010806:	4718      	bx	r3

08010808 <_ZNK8touchgfx8CallbackINS_14AdjustElementsERNS_8DrawableEvvE7isValidEv>:
 8010808:	6843      	ldr	r3, [r0, #4]
 801080a:	b12b      	cbz	r3, 8010818 <_ZNK8touchgfx8CallbackINS_14AdjustElementsERNS_8DrawableEvvE7isValidEv+0x10>
 801080c:	6883      	ldr	r3, [r0, #8]
 801080e:	b92b      	cbnz	r3, 801081c <_ZNK8touchgfx8CallbackINS_14AdjustElementsERNS_8DrawableEvvE7isValidEv+0x14>
 8010810:	68c0      	ldr	r0, [r0, #12]
 8010812:	f000 0001 	and.w	r0, r0, #1
 8010816:	4770      	bx	lr
 8010818:	4618      	mov	r0, r3
 801081a:	4770      	bx	lr
 801081c:	2001      	movs	r0, #1
 801081e:	4770      	bx	lr

08010820 <_ZN8touchgfx8CallbackINS_10ListLayoutERNS_8DrawableEvvE7executeES3_>:
 8010820:	b430      	push	{r4, r5}
 8010822:	68c5      	ldr	r5, [r0, #12]
 8010824:	4603      	mov	r3, r0
 8010826:	6844      	ldr	r4, [r0, #4]
 8010828:	106a      	asrs	r2, r5, #1
 801082a:	07ed      	lsls	r5, r5, #31
 801082c:	689b      	ldr	r3, [r3, #8]
 801082e:	eb04 0002 	add.w	r0, r4, r2
 8010832:	bf48      	it	mi
 8010834:	58a2      	ldrmi	r2, [r4, r2]
 8010836:	bc30      	pop	{r4, r5}
 8010838:	bf48      	it	mi
 801083a:	58d3      	ldrmi	r3, [r2, r3]
 801083c:	4718      	bx	r3

0801083e <_ZNK8touchgfx8CallbackINS_10ListLayoutERNS_8DrawableEvvE7isValidEv>:
 801083e:	6843      	ldr	r3, [r0, #4]
 8010840:	b12b      	cbz	r3, 801084e <_ZNK8touchgfx8CallbackINS_10ListLayoutERNS_8DrawableEvvE7isValidEv+0x10>
 8010842:	6883      	ldr	r3, [r0, #8]
 8010844:	b92b      	cbnz	r3, 8010852 <_ZNK8touchgfx8CallbackINS_10ListLayoutERNS_8DrawableEvvE7isValidEv+0x14>
 8010846:	68c0      	ldr	r0, [r0, #12]
 8010848:	f000 0001 	and.w	r0, r0, #1
 801084c:	4770      	bx	lr
 801084e:	4618      	mov	r0, r3
 8010850:	4770      	bx	lr
 8010852:	2001      	movs	r0, #1
 8010854:	4770      	bx	lr

08010856 <_ZN8touchgfx10ListLayoutD0Ev>:
 8010856:	b510      	push	{r4, lr}
 8010858:	4604      	mov	r4, r0
 801085a:	2130      	movs	r1, #48	@ 0x30
 801085c:	f016 f997 	bl	8026b8e <_ZdlPvj>
 8010860:	4620      	mov	r0, r4
 8010862:	bd10      	pop	{r4, pc}

08010864 <_ZN8touchgfx8CallbackINS_10ListLayoutERNS_8DrawableEvvED0Ev>:
 8010864:	b510      	push	{r4, lr}
 8010866:	4604      	mov	r4, r0
 8010868:	2110      	movs	r1, #16
 801086a:	f016 f990 	bl	8026b8e <_ZdlPvj>
 801086e:	4620      	mov	r0, r4
 8010870:	bd10      	pop	{r4, pc}

08010872 <_ZN8touchgfx8CallbackINS_14AdjustElementsERNS_8DrawableEvvED0Ev>:
 8010872:	b510      	push	{r4, lr}
 8010874:	4604      	mov	r4, r0
 8010876:	2110      	movs	r1, #16
 8010878:	f016 f989 	bl	8026b8e <_ZdlPvj>
 801087c:	4620      	mov	r0, r4
 801087e:	bd10      	pop	{r4, pc}

08010880 <_ZN8touchgfx14AdjustElements12handleInsertERNS_8DrawableE>:
 8010880:	4603      	mov	r3, r0
 8010882:	4608      	mov	r0, r1
 8010884:	789a      	ldrb	r2, [r3, #2]
 8010886:	b992      	cbnz	r2, 80108ae <_ZN8touchgfx14AdjustElements12handleInsertERNS_8DrawableE+0x2e>
 8010888:	685a      	ldr	r2, [r3, #4]
 801088a:	428a      	cmp	r2, r1
 801088c:	d102      	bne.n	8010894 <_ZN8touchgfx14AdjustElements12handleInsertERNS_8DrawableE+0x14>
 801088e:	2201      	movs	r2, #1
 8010890:	709a      	strb	r2, [r3, #2]
 8010892:	4770      	bx	lr
 8010894:	7a1a      	ldrb	r2, [r3, #8]
 8010896:	2a01      	cmp	r2, #1
 8010898:	d104      	bne.n	80108a4 <_ZN8touchgfx14AdjustElements12handleInsertERNS_8DrawableE+0x24>
 801089a:	88ca      	ldrh	r2, [r1, #6]
 801089c:	8949      	ldrh	r1, [r1, #10]
 801089e:	440a      	add	r2, r1
 80108a0:	801a      	strh	r2, [r3, #0]
 80108a2:	4770      	bx	lr
 80108a4:	2a02      	cmp	r2, #2
 80108a6:	d116      	bne.n	80108d6 <_ZN8touchgfx14AdjustElements12handleInsertERNS_8DrawableE+0x56>
 80108a8:	888a      	ldrh	r2, [r1, #4]
 80108aa:	8909      	ldrh	r1, [r1, #8]
 80108ac:	e7f7      	b.n	801089e <_ZN8touchgfx14AdjustElements12handleInsertERNS_8DrawableE+0x1e>
 80108ae:	7a1a      	ldrb	r2, [r3, #8]
 80108b0:	2a01      	cmp	r2, #1
 80108b2:	d107      	bne.n	80108c4 <_ZN8touchgfx14AdjustElements12handleInsertERNS_8DrawableE+0x44>
 80108b4:	685b      	ldr	r3, [r3, #4]
 80108b6:	8959      	ldrh	r1, [r3, #10]
 80108b8:	88c3      	ldrh	r3, [r0, #6]
 80108ba:	4419      	add	r1, r3
 80108bc:	6803      	ldr	r3, [r0, #0]
 80108be:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80108c0:	b209      	sxth	r1, r1
 80108c2:	4718      	bx	r3
 80108c4:	2a02      	cmp	r2, #2
 80108c6:	d106      	bne.n	80108d6 <_ZN8touchgfx14AdjustElements12handleInsertERNS_8DrawableE+0x56>
 80108c8:	685b      	ldr	r3, [r3, #4]
 80108ca:	8919      	ldrh	r1, [r3, #8]
 80108cc:	8883      	ldrh	r3, [r0, #4]
 80108ce:	4419      	add	r1, r3
 80108d0:	6803      	ldr	r3, [r0, #0]
 80108d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80108d4:	e7f4      	b.n	80108c0 <_ZN8touchgfx14AdjustElements12handleInsertERNS_8DrawableE+0x40>
 80108d6:	4770      	bx	lr

080108d8 <_ZN8touchgfx10ListLayout9removeAllEv>:
 80108d8:	2200      	movs	r2, #0
 80108da:	b510      	push	{r4, lr}
 80108dc:	4604      	mov	r4, r0
 80108de:	85c2      	strh	r2, [r0, #46]	@ 0x2e
 80108e0:	4611      	mov	r1, r2
 80108e2:	f7fe fca1 	bl	800f228 <_ZN8touchgfx8Drawable14setWidthHeightEss>
 80108e6:	4620      	mov	r0, r4
 80108e8:	f7fe ff12 	bl	800f710 <_ZN8touchgfx9Container9removeAllEv>
 80108ec:	6960      	ldr	r0, [r4, #20]
 80108ee:	b120      	cbz	r0, 80108fa <_ZN8touchgfx10ListLayout9removeAllEv+0x22>
 80108f0:	6803      	ldr	r3, [r0, #0]
 80108f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80108f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80108f8:	4718      	bx	r3
 80108fa:	bd10      	pop	{r4, pc}

080108fc <_ZN8touchgfx10ListLayout12setDirectionENS_9DirectionE>:
 80108fc:	b530      	push	{r4, r5, lr}
 80108fe:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
 8010902:	b085      	sub	sp, #20
 8010904:	4604      	mov	r4, r0
 8010906:	428b      	cmp	r3, r1
 8010908:	d017      	beq.n	801093a <_ZN8touchgfx10ListLayout12setDirectionENS_9DirectionE+0x3e>
 801090a:	2500      	movs	r5, #0
 801090c:	f880 102c 	strb.w	r1, [r0, #44]	@ 0x2c
 8010910:	85c5      	strh	r5, [r0, #46]	@ 0x2e
 8010912:	462a      	mov	r2, r5
 8010914:	4629      	mov	r1, r5
 8010916:	f7fe fc87 	bl	800f228 <_ZN8touchgfx8Drawable14setWidthHeightEss>
 801091a:	4b09      	ldr	r3, [pc, #36]	@ (8010940 <_ZN8touchgfx10ListLayout12setDirectionENS_9DirectionE+0x44>)
 801091c:	4620      	mov	r0, r4
 801091e:	4669      	mov	r1, sp
 8010920:	e9cd 3400 	strd	r3, r4, [sp]
 8010924:	4b07      	ldr	r3, [pc, #28]	@ (8010944 <_ZN8touchgfx10ListLayout12setDirectionENS_9DirectionE+0x48>)
 8010926:	e9cd 3502 	strd	r3, r5, [sp, #8]
 801092a:	6823      	ldr	r3, [r4, #0]
 801092c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801092e:	4798      	blx	r3
 8010930:	6960      	ldr	r0, [r4, #20]
 8010932:	b110      	cbz	r0, 801093a <_ZN8touchgfx10ListLayout12setDirectionENS_9DirectionE+0x3e>
 8010934:	6803      	ldr	r3, [r0, #0]
 8010936:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010938:	4798      	blx	r3
 801093a:	b005      	add	sp, #20
 801093c:	bd30      	pop	{r4, r5, pc}
 801093e:	bf00      	nop
 8010940:	0802bf68 	.word	0x0802bf68
 8010944:	080109ad 	.word	0x080109ad

08010948 <_ZN8touchgfx10ListLayout20internalAddElementAtERNS_8DrawableEs>:
 8010948:	b538      	push	{r3, r4, r5, lr}
 801094a:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
 801094e:	460d      	mov	r5, r1
 8010950:	4604      	mov	r4, r0
 8010952:	4611      	mov	r1, r2
 8010954:	2b01      	cmp	r3, #1
 8010956:	d002      	beq.n	801095e <_ZN8touchgfx10ListLayout20internalAddElementAtERNS_8DrawableEs+0x16>
 8010958:	2b02      	cmp	r3, #2
 801095a:	d015      	beq.n	8010988 <_ZN8touchgfx10ListLayout20internalAddElementAtERNS_8DrawableEs+0x40>
 801095c:	bd38      	pop	{r3, r4, r5, pc}
 801095e:	f9b5 3008 	ldrsh.w	r3, [r5, #8]
 8010962:	f9b0 2008 	ldrsh.w	r2, [r0, #8]
 8010966:	429a      	cmp	r2, r3
 8010968:	bfb8      	it	lt
 801096a:	8103      	strhlt	r3, [r0, #8]
 801096c:	8943      	ldrh	r3, [r0, #10]
 801096e:	896a      	ldrh	r2, [r5, #10]
 8010970:	4413      	add	r3, r2
 8010972:	460a      	mov	r2, r1
 8010974:	2100      	movs	r1, #0
 8010976:	8143      	strh	r3, [r0, #10]
 8010978:	4628      	mov	r0, r5
 801097a:	f7f3 f9f4 	bl	8003d66 <_ZN8touchgfx8Drawable5setXYEss>
 801097e:	8de3      	ldrh	r3, [r4, #46]	@ 0x2e
 8010980:	896a      	ldrh	r2, [r5, #10]
 8010982:	4413      	add	r3, r2
 8010984:	85e3      	strh	r3, [r4, #46]	@ 0x2e
 8010986:	e7e9      	b.n	801095c <_ZN8touchgfx10ListLayout20internalAddElementAtERNS_8DrawableEs+0x14>
 8010988:	f9b5 300a 	ldrsh.w	r3, [r5, #10]
 801098c:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8010990:	429a      	cmp	r2, r3
 8010992:	bfb8      	it	lt
 8010994:	8143      	strhlt	r3, [r0, #10]
 8010996:	8903      	ldrh	r3, [r0, #8]
 8010998:	892a      	ldrh	r2, [r5, #8]
 801099a:	4413      	add	r3, r2
 801099c:	2200      	movs	r2, #0
 801099e:	8103      	strh	r3, [r0, #8]
 80109a0:	4628      	mov	r0, r5
 80109a2:	f7f3 f9e0 	bl	8003d66 <_ZN8touchgfx8Drawable5setXYEss>
 80109a6:	8de3      	ldrh	r3, [r4, #46]	@ 0x2e
 80109a8:	892a      	ldrh	r2, [r5, #8]
 80109aa:	e7ea      	b.n	8010982 <_ZN8touchgfx10ListLayout20internalAddElementAtERNS_8DrawableEs+0x3a>

080109ac <_ZN8touchgfx10ListLayout18internalAddElementERNS_8DrawableE>:
 80109ac:	f9b0 202e 	ldrsh.w	r2, [r0, #46]	@ 0x2e
 80109b0:	f7ff bfca 	b.w	8010948 <_ZN8touchgfx10ListLayout20internalAddElementAtERNS_8DrawableEs>

080109b4 <_ZN8touchgfx10ListLayout3addERNS_8DrawableE>:
 80109b4:	b570      	push	{r4, r5, r6, lr}
 80109b6:	4604      	mov	r4, r0
 80109b8:	460d      	mov	r5, r1
 80109ba:	f7ff fff7 	bl	80109ac <_ZN8touchgfx10ListLayout18internalAddElementERNS_8DrawableE>
 80109be:	4620      	mov	r0, r4
 80109c0:	4629      	mov	r1, r5
 80109c2:	f7fe fe98 	bl	800f6f6 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 80109c6:	6960      	ldr	r0, [r4, #20]
 80109c8:	b120      	cbz	r0, 80109d4 <_ZN8touchgfx10ListLayout3addERNS_8DrawableE+0x20>
 80109ca:	6803      	ldr	r3, [r0, #0]
 80109cc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80109d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80109d2:	4718      	bx	r3
 80109d4:	bd70      	pop	{r4, r5, r6, pc}
	...

080109d8 <_ZN8touchgfx10ListLayout6insertEPNS_8DrawableERS1_>:
 80109d8:	b530      	push	{r4, r5, lr}
 80109da:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 80109dc:	b089      	sub	sp, #36	@ 0x24
 80109de:	4604      	mov	r4, r0
 80109e0:	4615      	mov	r5, r2
 80109e2:	b92b      	cbnz	r3, 80109f0 <_ZN8touchgfx10ListLayout6insertEPNS_8DrawableERS1_+0x18>
 80109e4:	6803      	ldr	r3, [r0, #0]
 80109e6:	4611      	mov	r1, r2
 80109e8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80109ea:	4798      	blx	r3
 80109ec:	b009      	add	sp, #36	@ 0x24
 80109ee:	bd30      	pop	{r4, r5, pc}
 80109f0:	f7fe fed9 	bl	800f7a6 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_>
 80109f4:	f894 202c 	ldrb.w	r2, [r4, #44]	@ 0x2c
 80109f8:	2300      	movs	r3, #0
 80109fa:	a904      	add	r1, sp, #16
 80109fc:	f88d 200c 	strb.w	r2, [sp, #12]
 8010a00:	4620      	mov	r0, r4
 8010a02:	4a0e      	ldr	r2, [pc, #56]	@ (8010a3c <_ZN8touchgfx10ListLayout6insertEPNS_8DrawableERS1_+0x64>)
 8010a04:	f8ad 3004 	strh.w	r3, [sp, #4]
 8010a08:	9204      	str	r2, [sp, #16]
 8010a0a:	aa01      	add	r2, sp, #4
 8010a0c:	f88d 3006 	strb.w	r3, [sp, #6]
 8010a10:	9205      	str	r2, [sp, #20]
 8010a12:	4a0b      	ldr	r2, [pc, #44]	@ (8010a40 <_ZN8touchgfx10ListLayout6insertEPNS_8DrawableERS1_+0x68>)
 8010a14:	9502      	str	r5, [sp, #8]
 8010a16:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8010a1a:	6823      	ldr	r3, [r4, #0]
 8010a1c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8010a1e:	4798      	blx	r3
 8010a20:	4620      	mov	r0, r4
 8010a22:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
 8010a26:	4629      	mov	r1, r5
 8010a28:	f7ff ff8e 	bl	8010948 <_ZN8touchgfx10ListLayout20internalAddElementAtERNS_8DrawableEs>
 8010a2c:	6960      	ldr	r0, [r4, #20]
 8010a2e:	2800      	cmp	r0, #0
 8010a30:	d0dc      	beq.n	80109ec <_ZN8touchgfx10ListLayout6insertEPNS_8DrawableERS1_+0x14>
 8010a32:	6803      	ldr	r3, [r0, #0]
 8010a34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010a36:	4798      	blx	r3
 8010a38:	e7d8      	b.n	80109ec <_ZN8touchgfx10ListLayout6insertEPNS_8DrawableERS1_+0x14>
 8010a3a:	bf00      	nop
 8010a3c:	0802bf80 	.word	0x0802bf80
 8010a40:	08010881 	.word	0x08010881

08010a44 <_ZN8touchgfx10ListLayout21internalRemoveElementERNS_8DrawableEs>:
 8010a44:	b538      	push	{r3, r4, r5, lr}
 8010a46:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
 8010a4a:	4604      	mov	r4, r0
 8010a4c:	460d      	mov	r5, r1
 8010a4e:	2b01      	cmp	r3, #1
 8010a50:	d002      	beq.n	8010a58 <_ZN8touchgfx10ListLayout21internalRemoveElementERNS_8DrawableEs+0x14>
 8010a52:	2b02      	cmp	r3, #2
 8010a54:	d018      	beq.n	8010a88 <_ZN8touchgfx10ListLayout21internalRemoveElementERNS_8DrawableEs+0x44>
 8010a56:	bd38      	pop	{r3, r4, r5, pc}
 8010a58:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
 8010a5c:	4293      	cmp	r3, r2
 8010a5e:	8943      	ldrh	r3, [r0, #10]
 8010a60:	bfc8      	it	gt
 8010a62:	8102      	strhgt	r2, [r0, #8]
 8010a64:	894a      	ldrh	r2, [r1, #10]
 8010a66:	1a9b      	subs	r3, r3, r2
 8010a68:	8143      	strh	r3, [r0, #10]
 8010a6a:	4628      	mov	r0, r5
 8010a6c:	680b      	ldr	r3, [r1, #0]
 8010a6e:	2100      	movs	r1, #0
 8010a70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010a72:	4798      	blx	r3
 8010a74:	682b      	ldr	r3, [r5, #0]
 8010a76:	2100      	movs	r1, #0
 8010a78:	4628      	mov	r0, r5
 8010a7a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010a7c:	4798      	blx	r3
 8010a7e:	8de3      	ldrh	r3, [r4, #46]	@ 0x2e
 8010a80:	896a      	ldrh	r2, [r5, #10]
 8010a82:	1a9b      	subs	r3, r3, r2
 8010a84:	85e3      	strh	r3, [r4, #46]	@ 0x2e
 8010a86:	e7e6      	b.n	8010a56 <_ZN8touchgfx10ListLayout21internalRemoveElementERNS_8DrawableEs+0x12>
 8010a88:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 8010a8c:	4293      	cmp	r3, r2
 8010a8e:	8903      	ldrh	r3, [r0, #8]
 8010a90:	bfc8      	it	gt
 8010a92:	8142      	strhgt	r2, [r0, #10]
 8010a94:	890a      	ldrh	r2, [r1, #8]
 8010a96:	1a9b      	subs	r3, r3, r2
 8010a98:	8103      	strh	r3, [r0, #8]
 8010a9a:	4628      	mov	r0, r5
 8010a9c:	680b      	ldr	r3, [r1, #0]
 8010a9e:	2100      	movs	r1, #0
 8010aa0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010aa2:	4798      	blx	r3
 8010aa4:	682b      	ldr	r3, [r5, #0]
 8010aa6:	2100      	movs	r1, #0
 8010aa8:	4628      	mov	r0, r5
 8010aaa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010aac:	4798      	blx	r3
 8010aae:	8de3      	ldrh	r3, [r4, #46]	@ 0x2e
 8010ab0:	892a      	ldrh	r2, [r5, #8]
 8010ab2:	e7e6      	b.n	8010a82 <_ZN8touchgfx10ListLayout21internalRemoveElementERNS_8DrawableEs+0x3e>

08010ab4 <_ZN8touchgfx10ListLayout6removeERNS_8DrawableE>:
 8010ab4:	b530      	push	{r4, r5, lr}
 8010ab6:	b089      	sub	sp, #36	@ 0x24
 8010ab8:	f890 202c 	ldrb.w	r2, [r0, #44]	@ 0x2c
 8010abc:	2300      	movs	r3, #0
 8010abe:	460d      	mov	r5, r1
 8010ac0:	f88d 200c 	strb.w	r2, [sp, #12]
 8010ac4:	4604      	mov	r4, r0
 8010ac6:	4a12      	ldr	r2, [pc, #72]	@ (8010b10 <_ZN8touchgfx10ListLayout6removeERNS_8DrawableE+0x5c>)
 8010ac8:	f8ad 3004 	strh.w	r3, [sp, #4]
 8010acc:	9204      	str	r2, [sp, #16]
 8010ace:	aa01      	add	r2, sp, #4
 8010ad0:	f88d 3006 	strb.w	r3, [sp, #6]
 8010ad4:	9205      	str	r2, [sp, #20]
 8010ad6:	4a0f      	ldr	r2, [pc, #60]	@ (8010b14 <_ZN8touchgfx10ListLayout6removeERNS_8DrawableE+0x60>)
 8010ad8:	9102      	str	r1, [sp, #8]
 8010ada:	a904      	add	r1, sp, #16
 8010adc:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8010ae0:	6803      	ldr	r3, [r0, #0]
 8010ae2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8010ae4:	4798      	blx	r3
 8010ae6:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8010aea:	b14b      	cbz	r3, 8010b00 <_ZN8touchgfx10ListLayout6removeERNS_8DrawableE+0x4c>
 8010aec:	4629      	mov	r1, r5
 8010aee:	4620      	mov	r0, r4
 8010af0:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
 8010af4:	f7ff ffa6 	bl	8010a44 <_ZN8touchgfx10ListLayout21internalRemoveElementERNS_8DrawableEs>
 8010af8:	4629      	mov	r1, r5
 8010afa:	4620      	mov	r0, r4
 8010afc:	f7fe fe3c 	bl	800f778 <_ZN8touchgfx9Container6removeERNS_8DrawableE>
 8010b00:	6960      	ldr	r0, [r4, #20]
 8010b02:	b110      	cbz	r0, 8010b0a <_ZN8touchgfx10ListLayout6removeERNS_8DrawableE+0x56>
 8010b04:	6803      	ldr	r3, [r0, #0]
 8010b06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010b08:	4798      	blx	r3
 8010b0a:	b009      	add	sp, #36	@ 0x24
 8010b0c:	bd30      	pop	{r4, r5, pc}
 8010b0e:	bf00      	nop
 8010b10:	0802bf80 	.word	0x0802bf80
 8010b14:	08010783 	.word	0x08010783

08010b18 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEt>:
 8010b18:	6803      	ldr	r3, [r0, #0]
 8010b1a:	b513      	push	{r0, r1, r4, lr}
 8010b1c:	f8d3 40a8 	ldr.w	r4, [r3, #168]	@ 0xa8
 8010b20:	2300      	movs	r3, #0
 8010b22:	e9cd 3300 	strd	r3, r3, [sp]
 8010b26:	466b      	mov	r3, sp
 8010b28:	47a0      	blx	r4
 8010b2a:	b002      	add	sp, #8
 8010b2c:	bd10      	pop	{r4, pc}

08010b2e <_ZN8touchgfx3HAL16flushFrameBufferEv>:
 8010b2e:	2301      	movs	r3, #1
 8010b30:	f880 304b 	strb.w	r3, [r0, #75]	@ 0x4b
 8010b34:	f880 306d 	strb.w	r3, [r0, #109]	@ 0x6d
 8010b38:	4770      	bx	lr

08010b3a <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>:
 8010b3a:	2301      	movs	r3, #1
 8010b3c:	f880 304b 	strb.w	r3, [r0, #75]	@ 0x4b
 8010b40:	f880 306d 	strb.w	r3, [r0, #109]	@ 0x6d
 8010b44:	4770      	bx	lr

08010b46 <_ZN8touchgfx3HAL17allowDMATransfersEv>:
 8010b46:	6843      	ldr	r3, [r0, #4]
 8010b48:	2201      	movs	r2, #1
 8010b4a:	725a      	strb	r2, [r3, #9]
 8010b4c:	6840      	ldr	r0, [r0, #4]
 8010b4e:	6803      	ldr	r3, [r0, #0]
 8010b50:	691b      	ldr	r3, [r3, #16]
 8010b52:	4718      	bx	r3

08010b54 <_ZN8touchgfx3HAL8flushDMAEv>:
 8010b54:	6840      	ldr	r0, [r0, #4]
 8010b56:	6803      	ldr	r3, [r0, #0]
 8010b58:	689b      	ldr	r3, [r3, #8]
 8010b5a:	4718      	bx	r3

08010b5c <_ZN8touchgfx3HAL8blitCopyEPKtttttthbtNS_6Bitmap12BitmapFormatES4_b>:
 8010b5c:	b530      	push	{r4, r5, lr}
 8010b5e:	b08b      	sub	sp, #44	@ 0x2c
 8010b60:	6804      	ldr	r4, [r0, #0]
 8010b62:	f89d 5058 	ldrb.w	r5, [sp, #88]	@ 0x58
 8010b66:	9509      	str	r5, [sp, #36]	@ 0x24
 8010b68:	f89d 5054 	ldrb.w	r5, [sp, #84]	@ 0x54
 8010b6c:	9508      	str	r5, [sp, #32]
 8010b6e:	f89d 5050 	ldrb.w	r5, [sp, #80]	@ 0x50
 8010b72:	9507      	str	r5, [sp, #28]
 8010b74:	f8bd 504c 	ldrh.w	r5, [sp, #76]	@ 0x4c
 8010b78:	9506      	str	r5, [sp, #24]
 8010b7a:	f89d 5048 	ldrb.w	r5, [sp, #72]	@ 0x48
 8010b7e:	9505      	str	r5, [sp, #20]
 8010b80:	f89d 5044 	ldrb.w	r5, [sp, #68]	@ 0x44
 8010b84:	9504      	str	r5, [sp, #16]
 8010b86:	f8bd 5040 	ldrh.w	r5, [sp, #64]	@ 0x40
 8010b8a:	9503      	str	r5, [sp, #12]
 8010b8c:	f8bd 503c 	ldrh.w	r5, [sp, #60]	@ 0x3c
 8010b90:	9502      	str	r5, [sp, #8]
 8010b92:	f8bd 5038 	ldrh.w	r5, [sp, #56]	@ 0x38
 8010b96:	e9cd 3500 	strd	r3, r5, [sp]
 8010b9a:	4613      	mov	r3, r2
 8010b9c:	6be4      	ldr	r4, [r4, #60]	@ 0x3c
 8010b9e:	2200      	movs	r2, #0
 8010ba0:	47a0      	blx	r4
 8010ba2:	b00b      	add	sp, #44	@ 0x2c
 8010ba4:	bd30      	pop	{r4, r5, pc}
	...

08010ba8 <_ZN8touchgfx3HAL10beginFrameEv>:
 8010ba8:	4b04      	ldr	r3, [pc, #16]	@ (8010bbc <_ZN8touchgfx3HAL10beginFrameEv+0x14>)
 8010baa:	781b      	ldrb	r3, [r3, #0]
 8010bac:	b123      	cbz	r3, 8010bb8 <_ZN8touchgfx3HAL10beginFrameEv+0x10>
 8010bae:	f890 006e 	ldrb.w	r0, [r0, #110]	@ 0x6e
 8010bb2:	f080 0001 	eor.w	r0, r0, #1
 8010bb6:	4770      	bx	lr
 8010bb8:	2001      	movs	r0, #1
 8010bba:	4770      	bx	lr
 8010bbc:	24028e1e 	.word	0x24028e1e

08010bc0 <_ZN8touchgfx3HAL8endFrameEv>:
 8010bc0:	b510      	push	{r4, lr}
 8010bc2:	4604      	mov	r4, r0
 8010bc4:	6840      	ldr	r0, [r0, #4]
 8010bc6:	6803      	ldr	r3, [r0, #0]
 8010bc8:	689b      	ldr	r3, [r3, #8]
 8010bca:	4798      	blx	r3
 8010bcc:	f894 306d 	ldrb.w	r3, [r4, #109]	@ 0x6d
 8010bd0:	b113      	cbz	r3, 8010bd8 <_ZN8touchgfx3HAL8endFrameEv+0x18>
 8010bd2:	2301      	movs	r3, #1
 8010bd4:	f884 306e 	strb.w	r3, [r4, #110]	@ 0x6e
 8010bd8:	bd10      	pop	{r4, pc}

08010bda <_ZN8touchgfx3HAL10initializeEv>:
 8010bda:	b510      	push	{r4, lr}
 8010bdc:	4604      	mov	r4, r0
 8010bde:	f7f1 fec9 	bl	8002974 <_ZN8touchgfx10OSWrappers10initializeEv>
 8010be2:	f7f0 ff1f 	bl	8001a24 <_ZN8touchgfx4GPIO4initEv>
 8010be6:	6860      	ldr	r0, [r4, #4]
 8010be8:	6803      	ldr	r3, [r0, #0]
 8010bea:	68db      	ldr	r3, [r3, #12]
 8010bec:	4798      	blx	r3
 8010bee:	68e0      	ldr	r0, [r4, #12]
 8010bf0:	6803      	ldr	r3, [r0, #0]
 8010bf2:	689b      	ldr	r3, [r3, #8]
 8010bf4:	4798      	blx	r3
 8010bf6:	6823      	ldr	r3, [r4, #0]
 8010bf8:	4620      	mov	r0, r4
 8010bfa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010bfc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010c00:	4718      	bx	r3
	...

08010c04 <_ZN8touchgfx3HAL4tickEv>:
 8010c04:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8010c06:	6803      	ldr	r3, [r0, #0]
 8010c08:	4604      	mov	r4, r0
 8010c0a:	4d5b      	ldr	r5, [pc, #364]	@ (8010d78 <_ZN8touchgfx3HAL4tickEv+0x174>)
 8010c0c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8010c10:	4798      	blx	r3
 8010c12:	2800      	cmp	r0, #0
 8010c14:	f000 8095 	beq.w	8010d42 <_ZN8touchgfx3HAL4tickEv+0x13e>
 8010c18:	2001      	movs	r0, #1
 8010c1a:	2600      	movs	r6, #0
 8010c1c:	f7f0 fe68 	bl	80018f0 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 8010c20:	f894 306a 	ldrb.w	r3, [r4, #106]	@ 0x6a
 8010c24:	f884 604b 	strb.w	r6, [r4, #75]	@ 0x4b
 8010c28:	f884 306b 	strb.w	r3, [r4, #107]	@ 0x6b
 8010c2c:	f894 3079 	ldrb.w	r3, [r4, #121]	@ 0x79
 8010c30:	f884 606a 	strb.w	r6, [r4, #106]	@ 0x6a
 8010c34:	b133      	cbz	r3, 8010c44 <_ZN8touchgfx3HAL4tickEv+0x40>
 8010c36:	6823      	ldr	r3, [r4, #0]
 8010c38:	4620      	mov	r0, r4
 8010c3a:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8010c3e:	4798      	blx	r3
 8010c40:	f884 6079 	strb.w	r6, [r4, #121]	@ 0x79
 8010c44:	f894 304a 	ldrb.w	r3, [r4, #74]	@ 0x4a
 8010c48:	2601      	movs	r6, #1
 8010c4a:	6862      	ldr	r2, [r4, #4]
 8010c4c:	f083 0301 	eor.w	r3, r3, #1
 8010c50:	702e      	strb	r6, [r5, #0]
 8010c52:	7253      	strb	r3, [r2, #9]
 8010c54:	f006 fcbc 	bl	80175d0 <_ZN8touchgfx11Application11getInstanceEv>
 8010c58:	6803      	ldr	r3, [r0, #0]
 8010c5a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010c5c:	4798      	blx	r3
 8010c5e:	f894 306b 	ldrb.w	r3, [r4, #107]	@ 0x6b
 8010c62:	b90b      	cbnz	r3, 8010c68 <_ZN8touchgfx3HAL4tickEv+0x64>
 8010c64:	f884 606b 	strb.w	r6, [r4, #107]	@ 0x6b
 8010c68:	f006 fcb2 	bl	80175d0 <_ZN8touchgfx11Application11getInstanceEv>
 8010c6c:	6803      	ldr	r3, [r0, #0]
 8010c6e:	695b      	ldr	r3, [r3, #20]
 8010c70:	4798      	blx	r3
 8010c72:	6de0      	ldr	r0, [r4, #92]	@ 0x5c
 8010c74:	6803      	ldr	r3, [r0, #0]
 8010c76:	691b      	ldr	r3, [r3, #16]
 8010c78:	4798      	blx	r3
 8010c7a:	f894 306b 	ldrb.w	r3, [r4, #107]	@ 0x6b
 8010c7e:	f894 206c 	ldrb.w	r2, [r4, #108]	@ 0x6c
 8010c82:	3b01      	subs	r3, #1
 8010c84:	b2db      	uxtb	r3, r3
 8010c86:	f884 306b 	strb.w	r3, [r4, #107]	@ 0x6b
 8010c8a:	b10a      	cbz	r2, 8010c90 <_ZN8touchgfx3HAL4tickEv+0x8c>
 8010c8c:	2b00      	cmp	r3, #0
 8010c8e:	d1eb      	bne.n	8010c68 <_ZN8touchgfx3HAL4tickEv+0x64>
 8010c90:	4a3a      	ldr	r2, [pc, #232]	@ (8010d7c <_ZN8touchgfx3HAL4tickEv+0x178>)
 8010c92:	f994 1068 	ldrsb.w	r1, [r4, #104]	@ 0x68
 8010c96:	7813      	ldrb	r3, [r2, #0]
 8010c98:	3301      	adds	r3, #1
 8010c9a:	b25b      	sxtb	r3, r3
 8010c9c:	4299      	cmp	r1, r3
 8010c9e:	7013      	strb	r3, [r2, #0]
 8010ca0:	dc10      	bgt.n	8010cc4 <_ZN8touchgfx3HAL4tickEv+0xc0>
 8010ca2:	2300      	movs	r3, #0
 8010ca4:	68e0      	ldr	r0, [r4, #12]
 8010ca6:	a902      	add	r1, sp, #8
 8010ca8:	7013      	strb	r3, [r2, #0]
 8010caa:	aa03      	add	r2, sp, #12
 8010cac:	6803      	ldr	r3, [r0, #0]
 8010cae:	68db      	ldr	r3, [r3, #12]
 8010cb0:	4798      	blx	r3
 8010cb2:	6823      	ldr	r3, [r4, #0]
 8010cb4:	2800      	cmp	r0, #0
 8010cb6:	d050      	beq.n	8010d5a <_ZN8touchgfx3HAL4tickEv+0x156>
 8010cb8:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8010cbc:	4620      	mov	r0, r4
 8010cbe:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8010cc2:	4798      	blx	r3
 8010cc4:	2300      	movs	r3, #0
 8010cc6:	6960      	ldr	r0, [r4, #20]
 8010cc8:	f88d 3007 	strb.w	r3, [sp, #7]
 8010ccc:	b158      	cbz	r0, 8010ce6 <_ZN8touchgfx3HAL4tickEv+0xe2>
 8010cce:	6803      	ldr	r3, [r0, #0]
 8010cd0:	f10d 0107 	add.w	r1, sp, #7
 8010cd4:	68db      	ldr	r3, [r3, #12]
 8010cd6:	4798      	blx	r3
 8010cd8:	b128      	cbz	r0, 8010ce6 <_ZN8touchgfx3HAL4tickEv+0xe2>
 8010cda:	6de0      	ldr	r0, [r4, #92]	@ 0x5c
 8010cdc:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8010ce0:	6803      	ldr	r3, [r0, #0]
 8010ce2:	68db      	ldr	r3, [r3, #12]
 8010ce4:	4798      	blx	r3
 8010ce6:	f104 001c 	add.w	r0, r4, #28
 8010cea:	f014 fa87 	bl	80251fc <_ZN8touchgfx8Gestures4tickEv>
 8010cee:	f894 3070 	ldrb.w	r3, [r4, #112]	@ 0x70
 8010cf2:	b30b      	cbz	r3, 8010d38 <_ZN8touchgfx3HAL4tickEv+0x134>
 8010cf4:	6920      	ldr	r0, [r4, #16]
 8010cf6:	6803      	ldr	r3, [r0, #0]
 8010cf8:	691b      	ldr	r3, [r3, #16]
 8010cfa:	4798      	blx	r3
 8010cfc:	6f63      	ldr	r3, [r4, #116]	@ 0x74
 8010cfe:	4606      	mov	r6, r0
 8010d00:	b903      	cbnz	r3, 8010d04 <_ZN8touchgfx3HAL4tickEv+0x100>
 8010d02:	6760      	str	r0, [r4, #116]	@ 0x74
 8010d04:	6f63      	ldr	r3, [r4, #116]	@ 0x74
 8010d06:	4a1e      	ldr	r2, [pc, #120]	@ (8010d80 <_ZN8touchgfx3HAL4tickEv+0x17c>)
 8010d08:	1af3      	subs	r3, r6, r3
 8010d0a:	4293      	cmp	r3, r2
 8010d0c:	d914      	bls.n	8010d38 <_ZN8touchgfx3HAL4tickEv+0x134>
 8010d0e:	6920      	ldr	r0, [r4, #16]
 8010d10:	6803      	ldr	r3, [r0, #0]
 8010d12:	699b      	ldr	r3, [r3, #24]
 8010d14:	4798      	blx	r3
 8010d16:	6f63      	ldr	r3, [r4, #116]	@ 0x74
 8010d18:	2264      	movs	r2, #100	@ 0x64
 8010d1a:	1af3      	subs	r3, r6, r3
 8010d1c:	fbb3 f3f2 	udiv	r3, r3, r2
 8010d20:	fbb0 f0f3 	udiv	r0, r0, r3
 8010d24:	2800      	cmp	r0, #0
 8010d26:	dc1d      	bgt.n	8010d64 <_ZN8touchgfx3HAL4tickEv+0x160>
 8010d28:	f884 2069 	strb.w	r2, [r4, #105]	@ 0x69
 8010d2c:	6920      	ldr	r0, [r4, #16]
 8010d2e:	2100      	movs	r1, #0
 8010d30:	6803      	ldr	r3, [r0, #0]
 8010d32:	69db      	ldr	r3, [r3, #28]
 8010d34:	4798      	blx	r3
 8010d36:	6766      	str	r6, [r4, #116]	@ 0x74
 8010d38:	f006 fc4a 	bl	80175d0 <_ZN8touchgfx11Application11getInstanceEv>
 8010d3c:	6803      	ldr	r3, [r0, #0]
 8010d3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010d40:	4798      	blx	r3
 8010d42:	6823      	ldr	r3, [r4, #0]
 8010d44:	4620      	mov	r0, r4
 8010d46:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8010d4a:	4798      	blx	r3
 8010d4c:	2001      	movs	r0, #1
 8010d4e:	f7f0 fdff 	bl	8001950 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 8010d52:	2300      	movs	r3, #0
 8010d54:	702b      	strb	r3, [r5, #0]
 8010d56:	b004      	add	sp, #16
 8010d58:	bd70      	pop	{r4, r5, r6, pc}
 8010d5a:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8010d5e:	4620      	mov	r0, r4
 8010d60:	4798      	blx	r3
 8010d62:	e7af      	b.n	8010cc4 <_ZN8touchgfx3HAL4tickEv+0xc0>
 8010d64:	2863      	cmp	r0, #99	@ 0x63
 8010d66:	bfcb      	itete	gt
 8010d68:	2300      	movgt	r3, #0
 8010d6a:	f1c0 0064 	rsble	r0, r0, #100	@ 0x64
 8010d6e:	f884 3069 	strbgt.w	r3, [r4, #105]	@ 0x69
 8010d72:	f884 0069 	strble.w	r0, [r4, #105]	@ 0x69
 8010d76:	e7d9      	b.n	8010d2c <_ZN8touchgfx3HAL4tickEv+0x128>
 8010d78:	24028e24 	.word	0x24028e24
 8010d7c:	24028e25 	.word	0x24028e25
 8010d80:	05f5e100 	.word	0x05f5e100

08010d84 <_ZN8touchgfx3HAL17unlockFrameBufferEv>:
 8010d84:	b510      	push	{r4, lr}
 8010d86:	4604      	mov	r4, r0
 8010d88:	f7f1 fe24 	bl	80029d4 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>
 8010d8c:	2200      	movs	r2, #0
 8010d8e:	6863      	ldr	r3, [r4, #4]
 8010d90:	729a      	strb	r2, [r3, #10]
 8010d92:	bd10      	pop	{r4, pc}

08010d94 <_ZN8touchgfx3HAL21registerEventListenerERNS_15UIEventListenerE>:
 8010d94:	65c1      	str	r1, [r0, #92]	@ 0x5c
 8010d96:	301c      	adds	r0, #28
 8010d98:	f014 ba2e 	b.w	80251f8 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>

08010d9c <_ZN8touchgfx3HAL5touchEll>:
 8010d9c:	b530      	push	{r4, r5, lr}
 8010d9e:	b087      	sub	sp, #28
 8010da0:	4604      	mov	r4, r0
 8010da2:	a804      	add	r0, sp, #16
 8010da4:	e9cd 1204 	strd	r1, r2, [sp, #16]
 8010da8:	f006 f9de 	bl	8017168 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>
 8010dac:	9b04      	ldr	r3, [sp, #16]
 8010dae:	a906      	add	r1, sp, #24
 8010db0:	a803      	add	r0, sp, #12
 8010db2:	f8ad 300c 	strh.w	r3, [sp, #12]
 8010db6:	9b05      	ldr	r3, [sp, #20]
 8010db8:	f821 3d0a 	strh.w	r3, [r1, #-10]!
 8010dbc:	f006 fa26 	bl	801720c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>
 8010dc0:	f894 106f 	ldrb.w	r1, [r4, #111]	@ 0x6f
 8010dc4:	f104 001c 	add.w	r0, r4, #28
 8010dc8:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 8010dcc:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 8010dd0:	b189      	cbz	r1, 8010df6 <_ZN8touchgfx3HAL5touchEll+0x5a>
 8010dd2:	f8b4 5064 	ldrh.w	r5, [r4, #100]	@ 0x64
 8010dd6:	9300      	str	r3, [sp, #0]
 8010dd8:	4613      	mov	r3, r2
 8010dda:	f8b4 1060 	ldrh.w	r1, [r4, #96]	@ 0x60
 8010dde:	462a      	mov	r2, r5
 8010de0:	f014 fa1a 	bl	8025218 <_ZN8touchgfx8Gestures17registerDragEventEtttt>
 8010de4:	b128      	cbz	r0, 8010df2 <_ZN8touchgfx3HAL5touchEll+0x56>
 8010de6:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 8010dea:	6623      	str	r3, [r4, #96]	@ 0x60
 8010dec:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 8010df0:	6663      	str	r3, [r4, #100]	@ 0x64
 8010df2:	b007      	add	sp, #28
 8010df4:	bd30      	pop	{r4, r5, pc}
 8010df6:	f014 fa4f 	bl	8025298 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 8010dfa:	2301      	movs	r3, #1
 8010dfc:	f884 306f 	strb.w	r3, [r4, #111]	@ 0x6f
 8010e00:	e7f1      	b.n	8010de6 <_ZN8touchgfx3HAL5touchEll+0x4a>

08010e02 <_ZN8touchgfx3HAL9blockCopyEPvPKvm>:
 8010e02:	b510      	push	{r4, lr}
 8010e04:	2b00      	cmp	r3, #0
 8010e06:	d046      	beq.n	8010e96 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 8010e08:	ea81 0002 	eor.w	r0, r1, r2
 8010e0c:	07c4      	lsls	r4, r0, #31
 8010e0e:	d508      	bpl.n	8010e22 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x20>
 8010e10:	440b      	add	r3, r1
 8010e12:	3a01      	subs	r2, #1
 8010e14:	428b      	cmp	r3, r1
 8010e16:	d93e      	bls.n	8010e96 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 8010e18:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 8010e1c:	f801 0b01 	strb.w	r0, [r1], #1
 8010e20:	e7f8      	b.n	8010e14 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x12>
 8010e22:	07d0      	lsls	r0, r2, #31
 8010e24:	bf42      	ittt	mi
 8010e26:	f812 0b01 	ldrbmi.w	r0, [r2], #1
 8010e2a:	f103 33ff 	addmi.w	r3, r3, #4294967295
 8010e2e:	f801 0b01 	strbmi.w	r0, [r1], #1
 8010e32:	2b01      	cmp	r3, #1
 8010e34:	d911      	bls.n	8010e5a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 8010e36:	ea81 0402 	eor.w	r4, r1, r2
 8010e3a:	4610      	mov	r0, r2
 8010e3c:	07a4      	lsls	r4, r4, #30
 8010e3e:	d022      	beq.n	8010e86 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x84>
 8010e40:	f023 0401 	bic.w	r4, r3, #1
 8010e44:	440c      	add	r4, r1
 8010e46:	428c      	cmp	r4, r1
 8010e48:	4602      	mov	r2, r0
 8010e4a:	d904      	bls.n	8010e56 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x54>
 8010e4c:	8812      	ldrh	r2, [r2, #0]
 8010e4e:	3002      	adds	r0, #2
 8010e50:	f821 2b02 	strh.w	r2, [r1], #2
 8010e54:	e7f7      	b.n	8010e46 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x44>
 8010e56:	f003 0301 	and.w	r3, r3, #1
 8010e5a:	f023 0003 	bic.w	r0, r3, #3
 8010e5e:	4408      	add	r0, r1
 8010e60:	4288      	cmp	r0, r1
 8010e62:	4614      	mov	r4, r2
 8010e64:	d904      	bls.n	8010e70 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x6e>
 8010e66:	6824      	ldr	r4, [r4, #0]
 8010e68:	3204      	adds	r2, #4
 8010e6a:	f841 4b04 	str.w	r4, [r1], #4
 8010e6e:	e7f7      	b.n	8010e60 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x5e>
 8010e70:	f003 0303 	and.w	r3, r3, #3
 8010e74:	3a01      	subs	r2, #1
 8010e76:	440b      	add	r3, r1
 8010e78:	428b      	cmp	r3, r1
 8010e7a:	d90c      	bls.n	8010e96 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 8010e7c:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 8010e80:	f801 0b01 	strb.w	r0, [r1], #1
 8010e84:	e7f8      	b.n	8010e78 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x76>
 8010e86:	0790      	lsls	r0, r2, #30
 8010e88:	d0e7      	beq.n	8010e5a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 8010e8a:	f832 0b02 	ldrh.w	r0, [r2], #2
 8010e8e:	3b02      	subs	r3, #2
 8010e90:	f821 0b02 	strh.w	r0, [r1], #2
 8010e94:	e7e1      	b.n	8010e5a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 8010e96:	2001      	movs	r0, #1
 8010e98:	bd10      	pop	{r4, pc}

08010e9a <_ZN8touchgfx3HAL7noTouchEv>:
 8010e9a:	b510      	push	{r4, lr}
 8010e9c:	f890 306f 	ldrb.w	r3, [r0, #111]	@ 0x6f
 8010ea0:	4604      	mov	r4, r0
 8010ea2:	b153      	cbz	r3, 8010eba <_ZN8touchgfx3HAL7noTouchEv+0x20>
 8010ea4:	f8b0 3064 	ldrh.w	r3, [r0, #100]	@ 0x64
 8010ea8:	2101      	movs	r1, #1
 8010eaa:	f8b0 2060 	ldrh.w	r2, [r0, #96]	@ 0x60
 8010eae:	301c      	adds	r0, #28
 8010eb0:	f014 f9f2 	bl	8025298 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 8010eb4:	2300      	movs	r3, #0
 8010eb6:	f884 306f 	strb.w	r3, [r4, #111]	@ 0x6f
 8010eba:	bd10      	pop	{r4, pc}

08010ebc <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt>:
 8010ebc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010ec0:	b085      	sub	sp, #20
 8010ec2:	4604      	mov	r4, r0
 8010ec4:	2000      	movs	r0, #0
 8010ec6:	4699      	mov	r9, r3
 8010ec8:	ad04      	add	r5, sp, #16
 8010eca:	460f      	mov	r7, r1
 8010ecc:	4690      	mov	r8, r2
 8010ece:	f845 0d04 	str.w	r0, [r5, #-4]!
 8010ed2:	69a0      	ldr	r0, [r4, #24]
 8010ed4:	6806      	ldr	r6, [r0, #0]
 8010ed6:	9501      	str	r5, [sp, #4]
 8010ed8:	f8bd 5030 	ldrh.w	r5, [sp, #48]	@ 0x30
 8010edc:	9500      	str	r5, [sp, #0]
 8010ede:	6835      	ldr	r5, [r6, #0]
 8010ee0:	47a8      	blx	r5
 8010ee2:	4d10      	ldr	r5, [pc, #64]	@ (8010f24 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x68>)
 8010ee4:	4606      	mov	r6, r0
 8010ee6:	f8a5 9000 	strh.w	r9, [r5]
 8010eea:	f7f2 fe85 	bl	8003bf8 <_ZN8touchgfx3HAL3lcdEv>
 8010eee:	6803      	ldr	r3, [r0, #0]
 8010ef0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010ef2:	4798      	blx	r3
 8010ef4:	b128      	cbz	r0, 8010f02 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x46>
 8010ef6:	2801      	cmp	r0, #1
 8010ef8:	d00b      	beq.n	8010f12 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x56>
 8010efa:	4630      	mov	r0, r6
 8010efc:	b005      	add	sp, #20
 8010efe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010f02:	882b      	ldrh	r3, [r5, #0]
 8010f04:	fb08 7203 	mla	r2, r8, r3, r7
 8010f08:	9b03      	ldr	r3, [sp, #12]
 8010f0a:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
 8010f0e:	63e3      	str	r3, [r4, #60]	@ 0x3c
 8010f10:	e7f3      	b.n	8010efa <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x3e>
 8010f12:	882a      	ldrh	r2, [r5, #0]
 8010f14:	9b03      	ldr	r3, [sp, #12]
 8010f16:	fb08 7202 	mla	r2, r8, r2, r7
 8010f1a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8010f1e:	1a9a      	subs	r2, r3, r2
 8010f20:	63e2      	str	r2, [r4, #60]	@ 0x3c
 8010f22:	e7ea      	b.n	8010efa <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x3e>
 8010f24:	24028e1a 	.word	0x24028e1a

08010f28 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb>:
 8010f28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010f2a:	b08b      	sub	sp, #44	@ 0x2c
 8010f2c:	4617      	mov	r7, r2
 8010f2e:	4604      	mov	r4, r0
 8010f30:	460e      	mov	r6, r1
 8010f32:	461d      	mov	r5, r3
 8010f34:	f7f2 fe60 	bl	8003bf8 <_ZN8touchgfx3HAL3lcdEv>
 8010f38:	6803      	ldr	r3, [r0, #0]
 8010f3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010f3c:	4798      	blx	r3
 8010f3e:	f89d 3054 	ldrb.w	r3, [sp, #84]	@ 0x54
 8010f42:	9007      	str	r0, [sp, #28]
 8010f44:	4631      	mov	r1, r6
 8010f46:	6822      	ldr	r2, [r4, #0]
 8010f48:	e9cd 0308 	strd	r0, r3, [sp, #32]
 8010f4c:	4b0c      	ldr	r3, [pc, #48]	@ (8010f80 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb+0x58>)
 8010f4e:	4620      	mov	r0, r4
 8010f50:	881b      	ldrh	r3, [r3, #0]
 8010f52:	9306      	str	r3, [sp, #24]
 8010f54:	f89d 3050 	ldrb.w	r3, [sp, #80]	@ 0x50
 8010f58:	9305      	str	r3, [sp, #20]
 8010f5a:	f89d 304c 	ldrb.w	r3, [sp, #76]	@ 0x4c
 8010f5e:	9304      	str	r3, [sp, #16]
 8010f60:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 8010f64:	9303      	str	r3, [sp, #12]
 8010f66:	f8bd 3044 	ldrh.w	r3, [sp, #68]	@ 0x44
 8010f6a:	9302      	str	r3, [sp, #8]
 8010f6c:	f8bd 3040 	ldrh.w	r3, [sp, #64]	@ 0x40
 8010f70:	e9cd 5300 	strd	r5, r3, [sp]
 8010f74:	463b      	mov	r3, r7
 8010f76:	6bd5      	ldr	r5, [r2, #60]	@ 0x3c
 8010f78:	2200      	movs	r2, #0
 8010f7a:	47a8      	blx	r5
 8010f7c:	b00b      	add	sp, #44	@ 0x2c
 8010f7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010f80:	24028e1a 	.word	0x24028e1a

08010f84 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb>:
 8010f84:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010f88:	4698      	mov	r8, r3
 8010f8a:	6803      	ldr	r3, [r0, #0]
 8010f8c:	b08b      	sub	sp, #44	@ 0x2c
 8010f8e:	4617      	mov	r7, r2
 8010f90:	6bdd      	ldr	r5, [r3, #60]	@ 0x3c
 8010f92:	460e      	mov	r6, r1
 8010f94:	4b13      	ldr	r3, [pc, #76]	@ (8010fe4 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb+0x60>)
 8010f96:	4604      	mov	r4, r0
 8010f98:	f8b3 9000 	ldrh.w	r9, [r3]
 8010f9c:	f7f2 fe2c 	bl	8003bf8 <_ZN8touchgfx3HAL3lcdEv>
 8010fa0:	6803      	ldr	r3, [r0, #0]
 8010fa2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010fa4:	4798      	blx	r3
 8010fa6:	f89d 3058 	ldrb.w	r3, [sp, #88]	@ 0x58
 8010faa:	2200      	movs	r2, #0
 8010fac:	4631      	mov	r1, r6
 8010fae:	e9cd 0308 	strd	r0, r3, [sp, #32]
 8010fb2:	2302      	movs	r3, #2
 8010fb4:	4620      	mov	r0, r4
 8010fb6:	e9cd 9306 	strd	r9, r3, [sp, #24]
 8010fba:	2301      	movs	r3, #1
 8010fbc:	9305      	str	r3, [sp, #20]
 8010fbe:	f89d 3054 	ldrb.w	r3, [sp, #84]	@ 0x54
 8010fc2:	9304      	str	r3, [sp, #16]
 8010fc4:	f8bd 3050 	ldrh.w	r3, [sp, #80]	@ 0x50
 8010fc8:	9303      	str	r3, [sp, #12]
 8010fca:	f8bd 304c 	ldrh.w	r3, [sp, #76]	@ 0x4c
 8010fce:	9302      	str	r3, [sp, #8]
 8010fd0:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 8010fd4:	e9cd 8300 	strd	r8, r3, [sp]
 8010fd8:	463b      	mov	r3, r7
 8010fda:	47a8      	blx	r5
 8010fdc:	b00b      	add	sp, #44	@ 0x2c
 8010fde:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010fe2:	bf00      	nop
 8010fe4:	24028e1a 	.word	0x24028e1a

08010fe8 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb>:
 8010fe8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010fec:	4698      	mov	r8, r3
 8010fee:	6803      	ldr	r3, [r0, #0]
 8010ff0:	b087      	sub	sp, #28
 8010ff2:	460e      	mov	r6, r1
 8010ff4:	6d9d      	ldr	r5, [r3, #88]	@ 0x58
 8010ff6:	4617      	mov	r7, r2
 8010ff8:	4b0f      	ldr	r3, [pc, #60]	@ (8011038 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb+0x50>)
 8010ffa:	4604      	mov	r4, r0
 8010ffc:	f8b3 9000 	ldrh.w	r9, [r3]
 8011000:	f7f2 fdfa 	bl	8003bf8 <_ZN8touchgfx3HAL3lcdEv>
 8011004:	6803      	ldr	r3, [r0, #0]
 8011006:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011008:	4798      	blx	r3
 801100a:	f89d 3044 	ldrb.w	r3, [sp, #68]	@ 0x44
 801100e:	463a      	mov	r2, r7
 8011010:	4631      	mov	r1, r6
 8011012:	f8cd 900c 	str.w	r9, [sp, #12]
 8011016:	e9cd 0304 	strd	r0, r3, [sp, #16]
 801101a:	f89d 3040 	ldrb.w	r3, [sp, #64]	@ 0x40
 801101e:	4620      	mov	r0, r4
 8011020:	9302      	str	r3, [sp, #8]
 8011022:	f8bd 303c 	ldrh.w	r3, [sp, #60]	@ 0x3c
 8011026:	9301      	str	r3, [sp, #4]
 8011028:	f8bd 3038 	ldrh.w	r3, [sp, #56]	@ 0x38
 801102c:	9300      	str	r3, [sp, #0]
 801102e:	4643      	mov	r3, r8
 8011030:	47a8      	blx	r5
 8011032:	b007      	add	sp, #28
 8011034:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011038:	24028e1a 	.word	0x24028e1a

0801103c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE>:
 801103c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011040:	4604      	mov	r4, r0
 8011042:	b08f      	sub	sp, #60	@ 0x3c
 8011044:	4610      	mov	r0, r2
 8011046:	460d      	mov	r5, r1
 8011048:	4691      	mov	r9, r2
 801104a:	461e      	mov	r6, r3
 801104c:	f009 ff88 	bl	801af60 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 8011050:	2800      	cmp	r0, #0
 8011052:	f000 809d 	beq.w	8011190 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x154>
 8011056:	6823      	ldr	r3, [r4, #0]
 8011058:	4620      	mov	r0, r4
 801105a:	f8df b198 	ldr.w	fp, [pc, #408]	@ 80111f4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>
 801105e:	f10d 0838 	add.w	r8, sp, #56	@ 0x38
 8011062:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011064:	4798      	blx	r3
 8011066:	6823      	ldr	r3, [r4, #0]
 8011068:	4620      	mov	r0, r4
 801106a:	f8df a18c 	ldr.w	sl, [pc, #396]	@ 80111f8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1bc>
 801106e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011070:	4798      	blx	r3
 8011072:	f8bb 3000 	ldrh.w	r3, [fp]
 8011076:	4f5c      	ldr	r7, [pc, #368]	@ (80111e8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 8011078:	9301      	str	r3, [sp, #4]
 801107a:	f8ba 3000 	ldrh.w	r3, [sl]
 801107e:	f828 9d1c 	strh.w	r9, [r8, #-28]!
 8011082:	4640      	mov	r0, r8
 8011084:	9302      	str	r3, [sp, #8]
 8011086:	883b      	ldrh	r3, [r7, #0]
 8011088:	9303      	str	r3, [sp, #12]
 801108a:	4b58      	ldr	r3, [pc, #352]	@ (80111ec <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 801108c:	881a      	ldrh	r2, [r3, #0]
 801108e:	9305      	str	r3, [sp, #20]
 8011090:	9204      	str	r2, [sp, #16]
 8011092:	f00a f8b5 	bl	801b200 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8011096:	8038      	strh	r0, [r7, #0]
 8011098:	4640      	mov	r0, r8
 801109a:	f00a f8e5 	bl	801b268 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801109e:	9b05      	ldr	r3, [sp, #20]
 80110a0:	b280      	uxth	r0, r0
 80110a2:	8018      	strh	r0, [r3, #0]
 80110a4:	4b52      	ldr	r3, [pc, #328]	@ (80111f0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b4>)
 80110a6:	781b      	ldrb	r3, [r3, #0]
 80110a8:	2b00      	cmp	r3, #0
 80110aa:	d174      	bne.n	8011196 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x15a>
 80110ac:	883b      	ldrh	r3, [r7, #0]
 80110ae:	f8aa 0000 	strh.w	r0, [sl]
 80110b2:	f8ab 3000 	strh.w	r3, [fp]
 80110b6:	4648      	mov	r0, r9
 80110b8:	e9d4 870f 	ldrd	r8, r7, [r4, #60]	@ 0x3c
 80110bc:	f009 ff50 	bl	801af60 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 80110c0:	2200      	movs	r2, #0
 80110c2:	e9c4 000f 	strd	r0, r0, [r4, #60]	@ 0x3c
 80110c6:	4611      	mov	r1, r2
 80110c8:	4628      	mov	r0, r5
 80110ca:	f9b5 9004 	ldrsh.w	r9, [r5, #4]
 80110ce:	f9b5 a006 	ldrsh.w	sl, [r5, #6]
 80110d2:	f7f2 fe48 	bl	8003d66 <_ZN8touchgfx8Drawable5setXYEss>
 80110d6:	2301      	movs	r3, #1
 80110d8:	f895 b025 	ldrb.w	fp, [r5, #37]	@ 0x25
 80110dc:	f885 3025 	strb.w	r3, [r5, #37]	@ 0x25
 80110e0:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 80110e4:	2b00      	cmp	r3, #0
 80110e6:	dd5c      	ble.n	80111a2 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x166>
 80110e8:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 80110ec:	2b00      	cmp	r3, #0
 80110ee:	dd58      	ble.n	80111a2 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x166>
 80110f0:	462a      	mov	r2, r5
 80110f2:	ab0a      	add	r3, sp, #40	@ 0x28
 80110f4:	f852 0f04 	ldr.w	r0, [r2, #4]!
 80110f8:	6851      	ldr	r1, [r2, #4]
 80110fa:	c303      	stmia	r3!, {r0, r1}
 80110fc:	4631      	mov	r1, r6
 80110fe:	a80a      	add	r0, sp, #40	@ 0x28
 8011100:	f7fe fc7e 	bl	800fa00 <_ZN8touchgfx4RectaNERKS0_>
 8011104:	4b38      	ldr	r3, [pc, #224]	@ (80111e8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 8011106:	2100      	movs	r1, #0
 8011108:	f9b3 2000 	ldrsh.w	r2, [r3]
 801110c:	4b37      	ldr	r3, [pc, #220]	@ (80111ec <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 801110e:	f8ad 2034 	strh.w	r2, [sp, #52]	@ 0x34
 8011112:	aa0a      	add	r2, sp, #40	@ 0x28
 8011114:	f9b3 3000 	ldrsh.w	r3, [r3]
 8011118:	910c      	str	r1, [sp, #48]	@ 0x30
 801111a:	f8ad 3036 	strh.w	r3, [sp, #54]	@ 0x36
 801111e:	ab08      	add	r3, sp, #32
 8011120:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011124:	e883 0003 	stmia.w	r3, {r0, r1}
 8011128:	4618      	mov	r0, r3
 801112a:	a90c      	add	r1, sp, #48	@ 0x30
 801112c:	f7fe fc68 	bl	800fa00 <_ZN8touchgfx4RectaNERKS0_>
 8011130:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8011132:	2b00      	cmp	r3, #0
 8011134:	d13c      	bne.n	80111b0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x174>
 8011136:	2000      	movs	r0, #0
 8011138:	f884 0058 	strb.w	r0, [r4, #88]	@ 0x58
 801113c:	2600      	movs	r6, #0
 801113e:	696b      	ldr	r3, [r5, #20]
 8011140:	a908      	add	r1, sp, #32
 8011142:	682a      	ldr	r2, [r5, #0]
 8011144:	4628      	mov	r0, r5
 8011146:	9305      	str	r3, [sp, #20]
 8011148:	616e      	str	r6, [r5, #20]
 801114a:	6892      	ldr	r2, [r2, #8]
 801114c:	4790      	blx	r2
 801114e:	9b05      	ldr	r3, [sp, #20]
 8011150:	4652      	mov	r2, sl
 8011152:	4649      	mov	r1, r9
 8011154:	616b      	str	r3, [r5, #20]
 8011156:	4628      	mov	r0, r5
 8011158:	f884 6058 	strb.w	r6, [r4, #88]	@ 0x58
 801115c:	f885 b025 	strb.w	fp, [r5, #37]	@ 0x25
 8011160:	f7f2 fe01 	bl	8003d66 <_ZN8touchgfx8Drawable5setXYEss>
 8011164:	9a01      	ldr	r2, [sp, #4]
 8011166:	4b23      	ldr	r3, [pc, #140]	@ (80111f4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>)
 8011168:	4620      	mov	r0, r4
 801116a:	801a      	strh	r2, [r3, #0]
 801116c:	9a02      	ldr	r2, [sp, #8]
 801116e:	4b22      	ldr	r3, [pc, #136]	@ (80111f8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1bc>)
 8011170:	801a      	strh	r2, [r3, #0]
 8011172:	9a03      	ldr	r2, [sp, #12]
 8011174:	4b1c      	ldr	r3, [pc, #112]	@ (80111e8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 8011176:	801a      	strh	r2, [r3, #0]
 8011178:	4b1c      	ldr	r3, [pc, #112]	@ (80111ec <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 801117a:	9a04      	ldr	r2, [sp, #16]
 801117c:	801a      	strh	r2, [r3, #0]
 801117e:	6823      	ldr	r3, [r4, #0]
 8011180:	e9c4 870f 	strd	r8, r7, [r4, #60]	@ 0x3c
 8011184:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011186:	4798      	blx	r3
 8011188:	6823      	ldr	r3, [r4, #0]
 801118a:	4620      	mov	r0, r4
 801118c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801118e:	4798      	blx	r3
 8011190:	b00f      	add	sp, #60	@ 0x3c
 8011192:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011196:	883b      	ldrh	r3, [r7, #0]
 8011198:	f8ab 0000 	strh.w	r0, [fp]
 801119c:	f8aa 3000 	strh.w	r3, [sl]
 80111a0:	e789      	b.n	80110b6 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x7a>
 80111a2:	462a      	mov	r2, r5
 80111a4:	ab0a      	add	r3, sp, #40	@ 0x28
 80111a6:	f852 0f04 	ldr.w	r0, [r2, #4]!
 80111aa:	6851      	ldr	r1, [r2, #4]
 80111ac:	c303      	stmia	r3!, {r0, r1}
 80111ae:	e7a9      	b.n	8011104 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xc8>
 80111b0:	a807      	add	r0, sp, #28
 80111b2:	f00a f99b 	bl	801b4ec <_ZNK8touchgfx6Bitmap9getFormatEv>
 80111b6:	4606      	mov	r6, r0
 80111b8:	6ce0      	ldr	r0, [r4, #76]	@ 0x4c
 80111ba:	6803      	ldr	r3, [r0, #0]
 80111bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80111be:	4798      	blx	r3
 80111c0:	4286      	cmp	r6, r0
 80111c2:	d1b8      	bne.n	8011136 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xfa>
 80111c4:	f7f2 fd18 	bl	8003bf8 <_ZN8touchgfx3HAL3lcdEv>
 80111c8:	6803      	ldr	r3, [r0, #0]
 80111ca:	4606      	mov	r6, r0
 80111cc:	a807      	add	r0, sp, #28
 80111ce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80111d0:	9305      	str	r3, [sp, #20]
 80111d2:	f00a f98b 	bl	801b4ec <_ZNK8touchgfx6Bitmap9getFormatEv>
 80111d6:	9b05      	ldr	r3, [sp, #20]
 80111d8:	4601      	mov	r1, r0
 80111da:	4630      	mov	r0, r6
 80111dc:	4798      	blx	r3
 80111de:	f080 0001 	eor.w	r0, r0, #1
 80111e2:	b2c0      	uxtb	r0, r0
 80111e4:	e7a8      	b.n	8011138 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xfc>
 80111e6:	bf00      	nop
 80111e8:	24028e14 	.word	0x24028e14
 80111ec:	24028e16 	.word	0x24028e16
 80111f0:	24028e18 	.word	0x24028e18
 80111f4:	24028e1a 	.word	0x24028e1a
 80111f8:	24028e1c 	.word	0x24028e1c

080111fc <_ZN8touchgfx3HAL20getClientFrameBufferEv>:
 80111fc:	4b07      	ldr	r3, [pc, #28]	@ (801121c <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x20>)
 80111fe:	b510      	push	{r4, lr}
 8011200:	781b      	ldrb	r3, [r3, #0]
 8011202:	4604      	mov	r4, r0
 8011204:	b13b      	cbz	r3, 8011216 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 8011206:	6803      	ldr	r3, [r0, #0]
 8011208:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801120a:	4798      	blx	r3
 801120c:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 801120e:	4283      	cmp	r3, r0
 8011210:	d101      	bne.n	8011216 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 8011212:	6c20      	ldr	r0, [r4, #64]	@ 0x40
 8011214:	bd10      	pop	{r4, pc}
 8011216:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8011218:	e7fc      	b.n	8011214 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x18>
 801121a:	bf00      	nop
 801121c:	24028e1e 	.word	0x24028e1e

08011220 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt>:
 8011220:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011224:	461d      	mov	r5, r3
 8011226:	b08a      	sub	sp, #40	@ 0x28
 8011228:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801122c:	4690      	mov	r8, r2
 801122e:	f8bd 604c 	ldrh.w	r6, [sp, #76]	@ 0x4c
 8011232:	2400      	movs	r4, #0
 8011234:	4607      	mov	r7, r0
 8011236:	fb06 8505 	mla	r5, r6, r5, r8
 801123a:	9404      	str	r4, [sp, #16]
 801123c:	f88d 4020 	strb.w	r4, [sp, #32]
 8011240:	e9cd 3101 	strd	r3, r1, [sp, #4]
 8011244:	f8bd 3040 	ldrh.w	r3, [sp, #64]	@ 0x40
 8011248:	f8ad 3018 	strh.w	r3, [sp, #24]
 801124c:	f8bd 3044 	ldrh.w	r3, [sp, #68]	@ 0x44
 8011250:	f8ad 301a 	strh.w	r3, [sp, #26]
 8011254:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 8011258:	f8ad 301c 	strh.w	r3, [sp, #28]
 801125c:	f7ff ffce 	bl	80111fc <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8011260:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 8011264:	6878      	ldr	r0, [r7, #4]
 8011266:	f8ad 601e 	strh.w	r6, [sp, #30]
 801126a:	a901      	add	r1, sp, #4
 801126c:	9505      	str	r5, [sp, #20]
 801126e:	f88d 4022 	strb.w	r4, [sp, #34]	@ 0x22
 8011272:	f88d 4021 	strb.w	r4, [sp, #33]	@ 0x21
 8011276:	f88d 4023 	strb.w	r4, [sp, #35]	@ 0x23
 801127a:	f88d 4024 	strb.w	r4, [sp, #36]	@ 0x24
 801127e:	6803      	ldr	r3, [r0, #0]
 8011280:	685b      	ldr	r3, [r3, #4]
 8011282:	4798      	blx	r3
 8011284:	b00a      	add	sp, #40	@ 0x28
 8011286:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801128a <_ZN8touchgfx3HAL12blitFillWordEtttttt>:
 801128a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801128e:	b08b      	sub	sp, #44	@ 0x2c
 8011290:	2400      	movs	r4, #0
 8011292:	4691      	mov	r9, r2
 8011294:	461d      	mov	r5, r3
 8011296:	f8bd 6050 	ldrh.w	r6, [sp, #80]	@ 0x50
 801129a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 801129e:	4688      	mov	r8, r1
 80112a0:	4607      	mov	r7, r0
 80112a2:	9404      	str	r4, [sp, #16]
 80112a4:	fb06 9505 	mla	r5, r6, r5, r9
 80112a8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80112ac:	f7ff ffa6 	bl	80111fc <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 80112b0:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 80112b4:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 80112b8:	6878      	ldr	r0, [r7, #4]
 80112ba:	f8ad 3018 	strh.w	r3, [sp, #24]
 80112be:	a901      	add	r1, sp, #4
 80112c0:	f8bd 304c 	ldrh.w	r3, [sp, #76]	@ 0x4c
 80112c4:	9505      	str	r5, [sp, #20]
 80112c6:	f8ad 301a 	strh.w	r3, [sp, #26]
 80112ca:	f8ad 401c 	strh.w	r4, [sp, #28]
 80112ce:	f8ad 601e 	strh.w	r6, [sp, #30]
 80112d2:	f8cd 8010 	str.w	r8, [sp, #16]
 80112d6:	f8ad 4020 	strh.w	r4, [sp, #32]
 80112da:	f88d 4022 	strb.w	r4, [sp, #34]	@ 0x22
 80112de:	f88d 4023 	strb.w	r4, [sp, #35]	@ 0x23
 80112e2:	f88d 4024 	strb.w	r4, [sp, #36]	@ 0x24
 80112e6:	6803      	ldr	r3, [r0, #0]
 80112e8:	685b      	ldr	r3, [r3, #4]
 80112ea:	4798      	blx	r3
 80112ec:	b00b      	add	sp, #44	@ 0x2c
 80112ee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

080112f4 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b>:
 80112f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80112f8:	b08a      	sub	sp, #40	@ 0x28
 80112fa:	4698      	mov	r8, r3
 80112fc:	2300      	movs	r3, #0
 80112fe:	4606      	mov	r6, r0
 8011300:	f89d 505c 	ldrb.w	r5, [sp, #92]	@ 0x5c
 8011304:	f89d 0050 	ldrb.w	r0, [sp, #80]	@ 0x50
 8011308:	2d0b      	cmp	r5, #11
 801130a:	f89d c054 	ldrb.w	ip, [sp, #84]	@ 0x54
 801130e:	f8bd 7058 	ldrh.w	r7, [sp, #88]	@ 0x58
 8011312:	f89d 4060 	ldrb.w	r4, [sp, #96]	@ 0x60
 8011316:	9304      	str	r3, [sp, #16]
 8011318:	d137      	bne.n	801138a <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x96>
 801131a:	2380      	movs	r3, #128	@ 0x80
 801131c:	f88d 0020 	strb.w	r0, [sp, #32]
 8011320:	4630      	mov	r0, r6
 8011322:	9203      	str	r2, [sp, #12]
 8011324:	e9cd 3101 	strd	r3, r1, [sp, #4]
 8011328:	f8bd 3044 	ldrh.w	r3, [sp, #68]	@ 0x44
 801132c:	f8ad 3018 	strh.w	r3, [sp, #24]
 8011330:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 8011334:	f8ad 301a 	strh.w	r3, [sp, #26]
 8011338:	f8bd 304c 	ldrh.w	r3, [sp, #76]	@ 0x4c
 801133c:	f8ad 301c 	strh.w	r3, [sp, #28]
 8011340:	f7ff ff5c 	bl	80111fc <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8011344:	2c0b      	cmp	r4, #11
 8011346:	f8bd 2040 	ldrh.w	r2, [sp, #64]	@ 0x40
 801134a:	f8ad 701e 	strh.w	r7, [sp, #30]
 801134e:	bf94      	ite	ls
 8011350:	4b19      	ldrls	r3, [pc, #100]	@ (80113b8 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xc4>)
 8011352:	2100      	movhi	r1, #0
 8011354:	f88d 5021 	strb.w	r5, [sp, #33]	@ 0x21
 8011358:	bf98      	it	ls
 801135a:	5d19      	ldrbls	r1, [r3, r4]
 801135c:	fb02 8307 	mla	r3, r2, r7, r8
 8011360:	f88d 4022 	strb.w	r4, [sp, #34]	@ 0x22
 8011364:	10c9      	asrs	r1, r1, #3
 8011366:	fb01 0003 	mla	r0, r1, r3, r0
 801136a:	f89d 3064 	ldrb.w	r3, [sp, #100]	@ 0x64
 801136e:	a901      	add	r1, sp, #4
 8011370:	9005      	str	r0, [sp, #20]
 8011372:	f88d 3023 	strb.w	r3, [sp, #35]	@ 0x23
 8011376:	2300      	movs	r3, #0
 8011378:	6870      	ldr	r0, [r6, #4]
 801137a:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
 801137e:	6803      	ldr	r3, [r0, #0]
 8011380:	685b      	ldr	r3, [r3, #4]
 8011382:	4798      	blx	r3
 8011384:	b00a      	add	sp, #40	@ 0x28
 8011386:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801138a:	2d02      	cmp	r5, #2
 801138c:	d109      	bne.n	80113a2 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xae>
 801138e:	28ff      	cmp	r0, #255	@ 0xff
 8011390:	d105      	bne.n	801139e <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xaa>
 8011392:	f1bc 0f00 	cmp.w	ip, #0
 8011396:	bf14      	ite	ne
 8011398:	2340      	movne	r3, #64	@ 0x40
 801139a:	2320      	moveq	r3, #32
 801139c:	e7be      	b.n	801131c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 801139e:	2340      	movs	r3, #64	@ 0x40
 80113a0:	e7bc      	b.n	801131c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 80113a2:	28ff      	cmp	r0, #255	@ 0xff
 80113a4:	d105      	bne.n	80113b2 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xbe>
 80113a6:	f1bc 0f00 	cmp.w	ip, #0
 80113aa:	bf14      	ite	ne
 80113ac:	2304      	movne	r3, #4
 80113ae:	2301      	moveq	r3, #1
 80113b0:	e7b4      	b.n	801131c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 80113b2:	2304      	movs	r3, #4
 80113b4:	e7b2      	b.n	801131c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 80113b6:	bf00      	nop
 80113b8:	0802c028 	.word	0x0802c028

080113bc <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb>:
 80113bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80113c0:	b08b      	sub	sp, #44	@ 0x2c
 80113c2:	461d      	mov	r5, r3
 80113c4:	2400      	movs	r4, #0
 80113c6:	4688      	mov	r8, r1
 80113c8:	f89d 9058 	ldrb.w	r9, [sp, #88]	@ 0x58
 80113cc:	4693      	mov	fp, r2
 80113ce:	f89d 6060 	ldrb.w	r6, [sp, #96]	@ 0x60
 80113d2:	4607      	mov	r7, r0
 80113d4:	f1b9 0fff 	cmp.w	r9, #255	@ 0xff
 80113d8:	f8bd a05c 	ldrh.w	sl, [sp, #92]	@ 0x5c
 80113dc:	9404      	str	r4, [sp, #16]
 80113de:	bf14      	ite	ne
 80113e0:	2308      	movne	r3, #8
 80113e2:	2302      	moveq	r3, #2
 80113e4:	fb05 b50a 	mla	r5, r5, sl, fp
 80113e8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80113ec:	f7ff ff06 	bl	80111fc <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 80113f0:	2e0b      	cmp	r6, #11
 80113f2:	f89d 2064 	ldrb.w	r2, [sp, #100]	@ 0x64
 80113f6:	a901      	add	r1, sp, #4
 80113f8:	bf98      	it	ls
 80113fa:	4b13      	ldrls	r3, [pc, #76]	@ (8011448 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb+0x8c>)
 80113fc:	f8ad a01e 	strh.w	sl, [sp, #30]
 8011400:	bf98      	it	ls
 8011402:	5d9c      	ldrbls	r4, [r3, r6]
 8011404:	f8bd 3050 	ldrh.w	r3, [sp, #80]	@ 0x50
 8011408:	10e4      	asrs	r4, r4, #3
 801140a:	f8cd 8010 	str.w	r8, [sp, #16]
 801140e:	f8ad 3018 	strh.w	r3, [sp, #24]
 8011412:	f8bd 3054 	ldrh.w	r3, [sp, #84]	@ 0x54
 8011416:	fb04 0405 	mla	r4, r4, r5, r0
 801141a:	6878      	ldr	r0, [r7, #4]
 801141c:	f8ad 301a 	strh.w	r3, [sp, #26]
 8011420:	2300      	movs	r3, #0
 8011422:	9405      	str	r4, [sp, #20]
 8011424:	f8ad 301c 	strh.w	r3, [sp, #28]
 8011428:	f88d 9020 	strb.w	r9, [sp, #32]
 801142c:	f88d 2023 	strb.w	r2, [sp, #35]	@ 0x23
 8011430:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
 8011434:	f88d 6021 	strb.w	r6, [sp, #33]	@ 0x21
 8011438:	f88d 6022 	strb.w	r6, [sp, #34]	@ 0x22
 801143c:	6803      	ldr	r3, [r0, #0]
 801143e:	685b      	ldr	r3, [r3, #4]
 8011440:	4798      	blx	r3
 8011442:	b00b      	add	sp, #44	@ 0x2c
 8011444:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011448:	0802c028 	.word	0x0802c028

0801144c <_ZNK8touchgfx3HAL13getDstAddressEttPt>:
 801144c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011450:	461e      	mov	r6, r3
 8011452:	4b0a      	ldr	r3, [pc, #40]	@ (801147c <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x30>)
 8011454:	460f      	mov	r7, r1
 8011456:	4690      	mov	r8, r2
 8011458:	881d      	ldrh	r5, [r3, #0]
 801145a:	f7f2 fbcd 	bl	8003bf8 <_ZN8touchgfx3HAL3lcdEv>
 801145e:	6803      	ldr	r3, [r0, #0]
 8011460:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011462:	4798      	blx	r3
 8011464:	280b      	cmp	r0, #11
 8011466:	bf96      	itet	ls
 8011468:	4b05      	ldrls	r3, [pc, #20]	@ (8011480 <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x34>)
 801146a:	2400      	movhi	r4, #0
 801146c:	5c1c      	ldrbls	r4, [r3, r0]
 801146e:	fb08 7005 	mla	r0, r8, r5, r7
 8011472:	10e4      	asrs	r4, r4, #3
 8011474:	fb04 6000 	mla	r0, r4, r0, r6
 8011478:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801147c:	24028e1a 	.word	0x24028e1a
 8011480:	0802c028 	.word	0x0802c028

08011484 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb>:
 8011484:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011486:	b08b      	sub	sp, #44	@ 0x2c
 8011488:	461f      	mov	r7, r3
 801148a:	4604      	mov	r4, r0
 801148c:	4616      	mov	r6, r2
 801148e:	f8bd 3054 	ldrh.w	r3, [sp, #84]	@ 0x54
 8011492:	2500      	movs	r5, #0
 8011494:	e9cd 3101 	strd	r3, r1, [sp, #4]
 8011498:	f8bd 3040 	ldrh.w	r3, [sp, #64]	@ 0x40
 801149c:	9504      	str	r5, [sp, #16]
 801149e:	f8ad 3018 	strh.w	r3, [sp, #24]
 80114a2:	f8bd 3044 	ldrh.w	r3, [sp, #68]	@ 0x44
 80114a6:	f8ad 301a 	strh.w	r3, [sp, #26]
 80114aa:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 80114ae:	f8ad 301c 	strh.w	r3, [sp, #28]
 80114b2:	f89d 3050 	ldrb.w	r3, [sp, #80]	@ 0x50
 80114b6:	f88d 3020 	strb.w	r3, [sp, #32]
 80114ba:	f7ff fe9f 	bl	80111fc <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 80114be:	463a      	mov	r2, r7
 80114c0:	4631      	mov	r1, r6
 80114c2:	4603      	mov	r3, r0
 80114c4:	4620      	mov	r0, r4
 80114c6:	f7ff ffc1 	bl	801144c <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 80114ca:	4b0e      	ldr	r3, [pc, #56]	@ (8011504 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0x80>)
 80114cc:	9005      	str	r0, [sp, #20]
 80114ce:	881b      	ldrh	r3, [r3, #0]
 80114d0:	f8ad 301e 	strh.w	r3, [sp, #30]
 80114d4:	f7f2 fb90 	bl	8003bf8 <_ZN8touchgfx3HAL3lcdEv>
 80114d8:	6803      	ldr	r3, [r0, #0]
 80114da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80114dc:	4798      	blx	r3
 80114de:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80114e0:	f88d 0022 	strb.w	r0, [sp, #34]	@ 0x22
 80114e4:	a901      	add	r1, sp, #4
 80114e6:	f88d 0021 	strb.w	r0, [sp, #33]	@ 0x21
 80114ea:	9304      	str	r3, [sp, #16]
 80114ec:	6860      	ldr	r0, [r4, #4]
 80114ee:	f89d 3058 	ldrb.w	r3, [sp, #88]	@ 0x58
 80114f2:	f88d 5024 	strb.w	r5, [sp, #36]	@ 0x24
 80114f6:	f88d 3023 	strb.w	r3, [sp, #35]	@ 0x23
 80114fa:	6803      	ldr	r3, [r0, #0]
 80114fc:	685b      	ldr	r3, [r3, #4]
 80114fe:	4798      	blx	r3
 8011500:	b00b      	add	sp, #44	@ 0x2c
 8011502:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011504:	24028e1a 	.word	0x24028e1a

08011508 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE>:
 8011508:	b5f0      	push	{r4, r5, r6, r7, lr}
 801150a:	b08d      	sub	sp, #52	@ 0x34
 801150c:	2501      	movs	r5, #1
 801150e:	4604      	mov	r4, r0
 8011510:	466b      	mov	r3, sp
 8011512:	9503      	str	r5, [sp, #12]
 8011514:	e883 0006 	stmia.w	r3, {r1, r2}
 8011518:	2300      	movs	r3, #0
 801151a:	f8bd 6000 	ldrh.w	r6, [sp]
 801151e:	f8bd 7002 	ldrh.w	r7, [sp, #2]
 8011522:	9306      	str	r3, [sp, #24]
 8011524:	6803      	ldr	r3, [r0, #0]
 8011526:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011528:	4798      	blx	r3
 801152a:	463a      	mov	r2, r7
 801152c:	4631      	mov	r1, r6
 801152e:	4603      	mov	r3, r0
 8011530:	4620      	mov	r0, r4
 8011532:	f7ff ff8b 	bl	801144c <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8011536:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8011538:	9004      	str	r0, [sp, #16]
 801153a:	9307      	str	r3, [sp, #28]
 801153c:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8011540:	f8ad 3020 	strh.w	r3, [sp, #32]
 8011544:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8011548:	f8ad 3022 	strh.w	r3, [sp, #34]	@ 0x22
 801154c:	4b0e      	ldr	r3, [pc, #56]	@ (8011588 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x80>)
 801154e:	881b      	ldrh	r3, [r3, #0]
 8011550:	f8ad 3024 	strh.w	r3, [sp, #36]	@ 0x24
 8011554:	f8ad 3026 	strh.w	r3, [sp, #38]	@ 0x26
 8011558:	f7f2 fb4e 	bl	8003bf8 <_ZN8touchgfx3HAL3lcdEv>
 801155c:	6803      	ldr	r3, [r0, #0]
 801155e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011560:	4798      	blx	r3
 8011562:	23ff      	movs	r3, #255	@ 0xff
 8011564:	f88d 0029 	strb.w	r0, [sp, #41]	@ 0x29
 8011568:	a903      	add	r1, sp, #12
 801156a:	f88d 002a 	strb.w	r0, [sp, #42]	@ 0x2a
 801156e:	6860      	ldr	r0, [r4, #4]
 8011570:	f88d 3028 	strb.w	r3, [sp, #40]	@ 0x28
 8011574:	f88d 502b 	strb.w	r5, [sp, #43]	@ 0x2b
 8011578:	f88d 502c 	strb.w	r5, [sp, #44]	@ 0x2c
 801157c:	6803      	ldr	r3, [r0, #0]
 801157e:	685b      	ldr	r3, [r3, #4]
 8011580:	4798      	blx	r3
 8011582:	6c60      	ldr	r0, [r4, #68]	@ 0x44
 8011584:	b00d      	add	sp, #52	@ 0x34
 8011586:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011588:	24028e1a 	.word	0x24028e1a

0801158c <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm>:
 801158c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011590:	b08c      	sub	sp, #48	@ 0x30
 8011592:	461e      	mov	r6, r3
 8011594:	2300      	movs	r3, #0
 8011596:	4604      	mov	r4, r0
 8011598:	466d      	mov	r5, sp
 801159a:	9306      	str	r3, [sp, #24]
 801159c:	6803      	ldr	r3, [r0, #0]
 801159e:	e885 0006 	stmia.w	r5, {r1, r2}
 80115a2:	2501      	movs	r5, #1
 80115a4:	f8bd 7000 	ldrh.w	r7, [sp]
 80115a8:	f8bd 8002 	ldrh.w	r8, [sp, #2]
 80115ac:	9503      	str	r5, [sp, #12]
 80115ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80115b0:	4798      	blx	r3
 80115b2:	4642      	mov	r2, r8
 80115b4:	4639      	mov	r1, r7
 80115b6:	4603      	mov	r3, r0
 80115b8:	4620      	mov	r0, r4
 80115ba:	f7ff ff47 	bl	801144c <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 80115be:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 80115c2:	9004      	str	r0, [sp, #16]
 80115c4:	f8ad 3020 	strh.w	r3, [sp, #32]
 80115c8:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 80115cc:	9607      	str	r6, [sp, #28]
 80115ce:	f8ad 3022 	strh.w	r3, [sp, #34]	@ 0x22
 80115d2:	4b10      	ldr	r3, [pc, #64]	@ (8011614 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm+0x88>)
 80115d4:	881b      	ldrh	r3, [r3, #0]
 80115d6:	f8ad 3024 	strh.w	r3, [sp, #36]	@ 0x24
 80115da:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80115dc:	f8ad 3026 	strh.w	r3, [sp, #38]	@ 0x26
 80115e0:	f7f2 fb0a 	bl	8003bf8 <_ZN8touchgfx3HAL3lcdEv>
 80115e4:	6803      	ldr	r3, [r0, #0]
 80115e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80115e8:	4798      	blx	r3
 80115ea:	23ff      	movs	r3, #255	@ 0xff
 80115ec:	f88d 0029 	strb.w	r0, [sp, #41]	@ 0x29
 80115f0:	a903      	add	r1, sp, #12
 80115f2:	f88d 002a 	strb.w	r0, [sp, #42]	@ 0x2a
 80115f6:	6860      	ldr	r0, [r4, #4]
 80115f8:	f88d 3028 	strb.w	r3, [sp, #40]	@ 0x28
 80115fc:	f88d 502b 	strb.w	r5, [sp, #43]	@ 0x2b
 8011600:	f88d 502c 	strb.w	r5, [sp, #44]	@ 0x2c
 8011604:	6803      	ldr	r3, [r0, #0]
 8011606:	685b      	ldr	r3, [r3, #4]
 8011608:	4798      	blx	r3
 801160a:	4630      	mov	r0, r6
 801160c:	b00c      	add	sp, #48	@ 0x30
 801160e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011612:	bf00      	nop
 8011614:	24028e1a 	.word	0x24028e1a

08011618 <_ZN8touchgfx3HAL25copyFromTFTToClientBufferENS_4RectE>:
 8011618:	b5f0      	push	{r4, r5, r6, r7, lr}
 801161a:	b085      	sub	sp, #20
 801161c:	4605      	mov	r5, r0
 801161e:	ac02      	add	r4, sp, #8
 8011620:	e884 0006 	stmia.w	r4, {r1, r2}
 8011624:	f8bd 6008 	ldrh.w	r6, [sp, #8]
 8011628:	f8bd 700a 	ldrh.w	r7, [sp, #10]
 801162c:	f7ff fde6 	bl	80111fc <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8011630:	4631      	mov	r1, r6
 8011632:	4603      	mov	r3, r0
 8011634:	463a      	mov	r2, r7
 8011636:	4628      	mov	r0, r5
 8011638:	f7ff ff08 	bl	801144c <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 801163c:	4a05      	ldr	r2, [pc, #20]	@ (8011654 <_ZN8touchgfx3HAL25copyFromTFTToClientBufferENS_4RectE+0x3c>)
 801163e:	682b      	ldr	r3, [r5, #0]
 8011640:	8812      	ldrh	r2, [r2, #0]
 8011642:	9200      	str	r2, [sp, #0]
 8011644:	6ede      	ldr	r6, [r3, #108]	@ 0x6c
 8011646:	4603      	mov	r3, r0
 8011648:	4628      	mov	r0, r5
 801164a:	e894 0006 	ldmia.w	r4, {r1, r2}
 801164e:	47b0      	blx	r6
 8011650:	b005      	add	sp, #20
 8011652:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011654:	24028e1a 	.word	0x24028e1a

08011658 <_ZN8touchgfx3HAL16swapFrameBuffersEv>:
 8011658:	b570      	push	{r4, r5, r6, lr}
 801165a:	f890 306e 	ldrb.w	r3, [r0, #110]	@ 0x6e
 801165e:	4604      	mov	r4, r0
 8011660:	b19b      	cbz	r3, 801168a <_ZN8touchgfx3HAL16swapFrameBuffersEv+0x32>
 8011662:	2002      	movs	r0, #2
 8011664:	f7f0 f9a4 	bl	80019b0 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>
 8011668:	2300      	movs	r3, #0
 801166a:	4620      	mov	r0, r4
 801166c:	f884 306e 	strb.w	r3, [r4, #110]	@ 0x6e
 8011670:	f884 306d 	strb.w	r3, [r4, #109]	@ 0x6d
 8011674:	6823      	ldr	r3, [r4, #0]
 8011676:	f8d3 50b8 	ldr.w	r5, [r3, #184]	@ 0xb8
 801167a:	f7ff fdbf 	bl	80111fc <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 801167e:	4601      	mov	r1, r0
 8011680:	4620      	mov	r0, r4
 8011682:	462b      	mov	r3, r5
 8011684:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011688:	4718      	bx	r3
 801168a:	bd70      	pop	{r4, r5, r6, pc}

0801168c <_ZN8touchgfx3HAL12setMCUActiveEb>:
 801168c:	b570      	push	{r4, r5, r6, lr}
 801168e:	4605      	mov	r5, r0
 8011690:	460c      	mov	r4, r1
 8011692:	2003      	movs	r0, #3
 8011694:	b149      	cbz	r1, 80116aa <_ZN8touchgfx3HAL12setMCUActiveEb+0x1e>
 8011696:	f7f0 f92b 	bl	80018f0 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 801169a:	6928      	ldr	r0, [r5, #16]
 801169c:	b168      	cbz	r0, 80116ba <_ZN8touchgfx3HAL12setMCUActiveEb+0x2e>
 801169e:	6803      	ldr	r3, [r0, #0]
 80116a0:	2101      	movs	r1, #1
 80116a2:	695b      	ldr	r3, [r3, #20]
 80116a4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80116a8:	4718      	bx	r3
 80116aa:	f7f0 f951 	bl	8001950 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 80116ae:	6928      	ldr	r0, [r5, #16]
 80116b0:	b118      	cbz	r0, 80116ba <_ZN8touchgfx3HAL12setMCUActiveEb+0x2e>
 80116b2:	6803      	ldr	r3, [r0, #0]
 80116b4:	4621      	mov	r1, r4
 80116b6:	695b      	ldr	r3, [r3, #20]
 80116b8:	e7f4      	b.n	80116a4 <_ZN8touchgfx3HAL12setMCUActiveEb+0x18>
 80116ba:	bd70      	pop	{r4, r5, r6, pc}

080116bc <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>:
 80116bc:	b538      	push	{r3, r4, r5, lr}
 80116be:	f890 307b 	ldrb.w	r3, [r0, #123]	@ 0x7b
 80116c2:	4604      	mov	r4, r0
 80116c4:	460d      	mov	r5, r1
 80116c6:	428b      	cmp	r3, r1
 80116c8:	d006      	beq.n	80116d8 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x1c>
 80116ca:	6803      	ldr	r3, [r0, #0]
 80116cc:	b929      	cbnz	r1, 80116da <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x1e>
 80116ce:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 80116d2:	4798      	blx	r3
 80116d4:	f884 507b 	strb.w	r5, [r4, #123]	@ 0x7b
 80116d8:	bd38      	pop	{r3, r4, r5, pc}
 80116da:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 80116de:	e7f8      	b.n	80116d2 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x16>

080116e0 <_ZN8touchgfx3HAL15lockFrameBufferEv>:
 80116e0:	4b0d      	ldr	r3, [pc, #52]	@ (8011718 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x38>)
 80116e2:	b510      	push	{r4, lr}
 80116e4:	781b      	ldrb	r3, [r3, #0]
 80116e6:	4604      	mov	r4, r0
 80116e8:	b95b      	cbnz	r3, 8011702 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 80116ea:	f890 3048 	ldrb.w	r3, [r0, #72]	@ 0x48
 80116ee:	2b02      	cmp	r3, #2
 80116f0:	d007      	beq.n	8011702 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 80116f2:	6840      	ldr	r0, [r0, #4]
 80116f4:	f000 f91a 	bl	801192c <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>
 80116f8:	b118      	cbz	r0, 8011702 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 80116fa:	6862      	ldr	r2, [r4, #4]
 80116fc:	7a53      	ldrb	r3, [r2, #9]
 80116fe:	2b00      	cmp	r3, #0
 8011700:	d0fc      	beq.n	80116fc <_ZN8touchgfx3HAL15lockFrameBufferEv+0x1c>
 8011702:	f7f1 f95f 	bl	80029c4 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 8011706:	4620      	mov	r0, r4
 8011708:	2100      	movs	r1, #0
 801170a:	f7ff ffd7 	bl	80116bc <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 801170e:	4620      	mov	r0, r4
 8011710:	f7ff fd74 	bl	80111fc <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8011714:	bd10      	pop	{r4, pc}
 8011716:	bf00      	nop
 8011718:	24028e1e 	.word	0x24028e1e

0801171c <_ZN8touchgfx3HAL33lockFrameBufferForRenderingMethodENS0_15RenderingMethodE>:
 801171c:	b570      	push	{r4, r5, r6, lr}
 801171e:	4604      	mov	r4, r0
 8011720:	6803      	ldr	r3, [r0, #0]
 8011722:	b919      	cbnz	r1, 801172c <_ZN8touchgfx3HAL33lockFrameBufferForRenderingMethodENS0_15RenderingMethodE+0x10>
 8011724:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011726:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801172a:	4718      	bx	r3
 801172c:	2200      	movs	r2, #0
 801172e:	f890 607b 	ldrb.w	r6, [r0, #123]	@ 0x7b
 8011732:	f880 207b 	strb.w	r2, [r0, #123]	@ 0x7b
 8011736:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011738:	4798      	blx	r3
 801173a:	6863      	ldr	r3, [r4, #4]
 801173c:	2101      	movs	r1, #1
 801173e:	4605      	mov	r5, r0
 8011740:	4620      	mov	r0, r4
 8011742:	7299      	strb	r1, [r3, #10]
 8011744:	f884 607b 	strb.w	r6, [r4, #123]	@ 0x7b
 8011748:	f7ff ffb8 	bl	80116bc <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 801174c:	4628      	mov	r0, r5
 801174e:	bd70      	pop	{r4, r5, r6, pc}

08011750 <_ZN8touchgfx17LockFreeDMA_Queue7isEmptyEv>:
 8011750:	e9d0 2003 	ldrd	r2, r0, [r0, #12]
 8011754:	1a13      	subs	r3, r2, r0
 8011756:	4258      	negs	r0, r3
 8011758:	4158      	adcs	r0, r3
 801175a:	4770      	bx	lr

0801175c <_ZN8touchgfx17LockFreeDMA_Queue6isFullEv>:
 801175c:	e9d0 2303 	ldrd	r2, r3, [r0, #12]
 8011760:	1a9b      	subs	r3, r3, r2
 8011762:	2b00      	cmp	r3, #0
 8011764:	bfdc      	itt	le
 8011766:	6882      	ldrle	r2, [r0, #8]
 8011768:	189b      	addle	r3, r3, r2
 801176a:	2b01      	cmp	r3, #1
 801176c:	bfcc      	ite	gt
 801176e:	2000      	movgt	r0, #0
 8011770:	2001      	movle	r0, #1
 8011772:	4770      	bx	lr

08011774 <_ZN8touchgfx17LockFreeDMA_Queue5firstEv>:
 8011774:	6902      	ldr	r2, [r0, #16]
 8011776:	6843      	ldr	r3, [r0, #4]
 8011778:	2024      	movs	r0, #36	@ 0x24
 801177a:	fb00 3002 	mla	r0, r0, r2, r3
 801177e:	4770      	bx	lr

08011780 <_ZN8touchgfx13DMA_Interface13seedExecutionEv>:
 8011780:	6803      	ldr	r3, [r0, #0]
 8011782:	691b      	ldr	r3, [r3, #16]
 8011784:	4718      	bx	r3

08011786 <_ZN8touchgfx13DMA_Interface7executeEv>:
 8011786:	2301      	movs	r3, #1
 8011788:	b570      	push	{r4, r5, r6, lr}
 801178a:	7203      	strb	r3, [r0, #8]
 801178c:	4604      	mov	r4, r0
 801178e:	6840      	ldr	r0, [r0, #4]
 8011790:	6803      	ldr	r3, [r0, #0]
 8011792:	699b      	ldr	r3, [r3, #24]
 8011794:	4798      	blx	r3
 8011796:	6803      	ldr	r3, [r0, #0]
 8011798:	4605      	mov	r5, r0
 801179a:	2b40      	cmp	r3, #64	@ 0x40
 801179c:	d00c      	beq.n	80117b8 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 801179e:	d810      	bhi.n	80117c2 <_ZN8touchgfx13DMA_Interface7executeEv+0x3c>
 80117a0:	2b04      	cmp	r3, #4
 80117a2:	d01d      	beq.n	80117e0 <_ZN8touchgfx13DMA_Interface7executeEv+0x5a>
 80117a4:	d804      	bhi.n	80117b0 <_ZN8touchgfx13DMA_Interface7executeEv+0x2a>
 80117a6:	2b01      	cmp	r3, #1
 80117a8:	d006      	beq.n	80117b8 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 80117aa:	2b02      	cmp	r3, #2
 80117ac:	d02c      	beq.n	8011808 <_ZN8touchgfx13DMA_Interface7executeEv+0x82>
 80117ae:	bd70      	pop	{r4, r5, r6, pc}
 80117b0:	2b08      	cmp	r3, #8
 80117b2:	d01d      	beq.n	80117f0 <_ZN8touchgfx13DMA_Interface7executeEv+0x6a>
 80117b4:	2b20      	cmp	r3, #32
 80117b6:	d1fa      	bne.n	80117ae <_ZN8touchgfx13DMA_Interface7executeEv+0x28>
 80117b8:	6823      	ldr	r3, [r4, #0]
 80117ba:	4620      	mov	r0, r4
 80117bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80117be:	4798      	blx	r3
 80117c0:	e013      	b.n	80117ea <_ZN8touchgfx13DMA_Interface7executeEv+0x64>
 80117c2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80117c6:	d0f7      	beq.n	80117b8 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 80117c8:	d804      	bhi.n	80117d4 <_ZN8touchgfx13DMA_Interface7executeEv+0x4e>
 80117ca:	2b80      	cmp	r3, #128	@ 0x80
 80117cc:	d0f4      	beq.n	80117b8 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 80117ce:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80117d2:	e7f0      	b.n	80117b6 <_ZN8touchgfx13DMA_Interface7executeEv+0x30>
 80117d4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80117d8:	d0ee      	beq.n	80117b8 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 80117da:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80117de:	e7e5      	b.n	80117ac <_ZN8touchgfx13DMA_Interface7executeEv+0x26>
 80117e0:	6823      	ldr	r3, [r4, #0]
 80117e2:	7f01      	ldrb	r1, [r0, #28]
 80117e4:	4620      	mov	r0, r4
 80117e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80117e8:	4798      	blx	r3
 80117ea:	6823      	ldr	r3, [r4, #0]
 80117ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80117ee:	e006      	b.n	80117fe <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
 80117f0:	6823      	ldr	r3, [r4, #0]
 80117f2:	7f01      	ldrb	r1, [r0, #28]
 80117f4:	4620      	mov	r0, r4
 80117f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80117f8:	4798      	blx	r3
 80117fa:	6823      	ldr	r3, [r4, #0]
 80117fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80117fe:	4629      	mov	r1, r5
 8011800:	4620      	mov	r0, r4
 8011802:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011806:	4718      	bx	r3
 8011808:	6823      	ldr	r3, [r4, #0]
 801180a:	4620      	mov	r0, r4
 801180c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801180e:	4798      	blx	r3
 8011810:	e7f3      	b.n	80117fa <_ZN8touchgfx13DMA_Interface7executeEv+0x74>

08011812 <_ZN8touchgfx13DMA_Interface11enableAlphaEh>:
 8011812:	4770      	bx	lr

08011814 <_ZN8touchgfx13DMA_Interface12disableAlphaEv>:
 8011814:	4770      	bx	lr

08011816 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>:
 8011816:	4770      	bx	lr

08011818 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE>:
 8011818:	e9d0 3203 	ldrd	r3, r2, [r0, #12]
 801181c:	b510      	push	{r4, lr}
 801181e:	1ad2      	subs	r2, r2, r3
 8011820:	2a00      	cmp	r2, #0
 8011822:	bfdc      	itt	le
 8011824:	6884      	ldrle	r4, [r0, #8]
 8011826:	1912      	addle	r2, r2, r4
 8011828:	2a01      	cmp	r2, #1
 801182a:	dd16      	ble.n	801185a <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x42>
 801182c:	6842      	ldr	r2, [r0, #4]
 801182e:	2424      	movs	r4, #36	@ 0x24
 8011830:	fb04 2303 	mla	r3, r4, r3, r2
 8011834:	f101 0220 	add.w	r2, r1, #32
 8011838:	f851 4b04 	ldr.w	r4, [r1], #4
 801183c:	4291      	cmp	r1, r2
 801183e:	f843 4b04 	str.w	r4, [r3], #4
 8011842:	d1f9      	bne.n	8011838 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x20>
 8011844:	780a      	ldrb	r2, [r1, #0]
 8011846:	701a      	strb	r2, [r3, #0]
 8011848:	68c3      	ldr	r3, [r0, #12]
 801184a:	6882      	ldr	r2, [r0, #8]
 801184c:	f3bf 8f5b 	dmb	ish
 8011850:	3301      	adds	r3, #1
 8011852:	429a      	cmp	r2, r3
 8011854:	bfd8      	it	le
 8011856:	1a9b      	suble	r3, r3, r2
 8011858:	60c3      	str	r3, [r0, #12]
 801185a:	bd10      	pop	{r4, pc}

0801185c <_ZN8touchgfx17LockFreeDMA_Queue3popEv>:
 801185c:	6903      	ldr	r3, [r0, #16]
 801185e:	6882      	ldr	r2, [r0, #8]
 8011860:	f3bf 8f5b 	dmb	ish
 8011864:	3301      	adds	r3, #1
 8011866:	429a      	cmp	r2, r3
 8011868:	bfd8      	it	le
 801186a:	1a9b      	suble	r3, r3, r2
 801186c:	6103      	str	r3, [r0, #16]
 801186e:	4770      	bx	lr

08011870 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE>:
 8011870:	b570      	push	{r4, r5, r6, lr}
 8011872:	4604      	mov	r4, r0
 8011874:	460e      	mov	r6, r1
 8011876:	6860      	ldr	r0, [r4, #4]
 8011878:	6803      	ldr	r3, [r0, #0]
 801187a:	685b      	ldr	r3, [r3, #4]
 801187c:	4798      	blx	r3
 801187e:	2800      	cmp	r0, #0
 8011880:	d1f9      	bne.n	8011876 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x6>
 8011882:	4d0d      	ldr	r5, [pc, #52]	@ (80118b8 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x48>)
 8011884:	6828      	ldr	r0, [r5, #0]
 8011886:	6803      	ldr	r3, [r0, #0]
 8011888:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801188a:	4798      	blx	r3
 801188c:	f7f1 f8a8 	bl	80029e0 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>
 8011890:	6828      	ldr	r0, [r5, #0]
 8011892:	2101      	movs	r1, #1
 8011894:	f7ff ff12 	bl	80116bc <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 8011898:	6860      	ldr	r0, [r4, #4]
 801189a:	4631      	mov	r1, r6
 801189c:	6803      	ldr	r3, [r0, #0]
 801189e:	689b      	ldr	r3, [r3, #8]
 80118a0:	4798      	blx	r3
 80118a2:	6823      	ldr	r3, [r4, #0]
 80118a4:	4620      	mov	r0, r4
 80118a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80118a8:	4798      	blx	r3
 80118aa:	6828      	ldr	r0, [r5, #0]
 80118ac:	6803      	ldr	r3, [r0, #0]
 80118ae:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80118b2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80118b4:	4718      	bx	r3
 80118b6:	bf00      	nop
 80118b8:	24028e20 	.word	0x24028e20

080118bc <_ZN8touchgfx13DMA_Interface27waitForFrameBufferSemaphoreEv>:
 80118bc:	b508      	push	{r3, lr}
 80118be:	f7f1 f881 	bl	80029c4 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 80118c2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80118c6:	f7f1 b885 	b.w	80029d4 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

080118ca <_ZN8touchgfx17LockFreeDMA_QueueD0Ev>:
 80118ca:	b510      	push	{r4, lr}
 80118cc:	4604      	mov	r4, r0
 80118ce:	2114      	movs	r1, #20
 80118d0:	f015 f95d 	bl	8026b8e <_ZdlPvj>
 80118d4:	4620      	mov	r0, r4
 80118d6:	bd10      	pop	{r4, pc}

080118d8 <_ZN8touchgfx13DMA_Interface16executeCompletedEv>:
 80118d8:	b570      	push	{r4, r5, r6, lr}
 80118da:	4604      	mov	r4, r0
 80118dc:	6840      	ldr	r0, [r0, #4]
 80118de:	6803      	ldr	r3, [r0, #0]
 80118e0:	681b      	ldr	r3, [r3, #0]
 80118e2:	4798      	blx	r3
 80118e4:	4605      	mov	r5, r0
 80118e6:	b930      	cbnz	r0, 80118f6 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 80118e8:	7a23      	ldrb	r3, [r4, #8]
 80118ea:	b123      	cbz	r3, 80118f6 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 80118ec:	6860      	ldr	r0, [r4, #4]
 80118ee:	6803      	ldr	r3, [r0, #0]
 80118f0:	695b      	ldr	r3, [r3, #20]
 80118f2:	4798      	blx	r3
 80118f4:	7225      	strb	r5, [r4, #8]
 80118f6:	6860      	ldr	r0, [r4, #4]
 80118f8:	6803      	ldr	r3, [r0, #0]
 80118fa:	681b      	ldr	r3, [r3, #0]
 80118fc:	4798      	blx	r3
 80118fe:	b928      	cbnz	r0, 801190c <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x34>
 8011900:	6823      	ldr	r3, [r4, #0]
 8011902:	4620      	mov	r0, r4
 8011904:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011906:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801190a:	4718      	bx	r3
 801190c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011910:	f7f1 b86e 	b.w	80029f0 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>

08011914 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>:
 8011914:	b510      	push	{r4, lr}
 8011916:	6082      	str	r2, [r0, #8]
 8011918:	2200      	movs	r2, #0
 801191a:	4c03      	ldr	r4, [pc, #12]	@ (8011928 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi+0x14>)
 801191c:	e9c0 2203 	strd	r2, r2, [r0, #12]
 8011920:	e9c0 4100 	strd	r4, r1, [r0]
 8011924:	bd10      	pop	{r4, pc}
 8011926:	bf00      	nop
 8011928:	0802c03c 	.word	0x0802c03c

0801192c <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>:
 801192c:	6840      	ldr	r0, [r0, #4]
 801192e:	6803      	ldr	r3, [r0, #0]
 8011930:	681b      	ldr	r3, [r3, #0]
 8011932:	4718      	bx	r3

08011934 <_ZN8touchgfx17CWRVectorRenderer8tearDownEv>:
 8011934:	2300      	movs	r3, #0
 8011936:	84c3      	strh	r3, [r0, #38]	@ 0x26
 8011938:	8503      	strh	r3, [r0, #40]	@ 0x28
 801193a:	8543      	strh	r3, [r0, #42]	@ 0x2a
 801193c:	8583      	strh	r3, [r0, #44]	@ 0x2c
 801193e:	6980      	ldr	r0, [r0, #24]
 8011940:	b110      	cbz	r0, 8011948 <_ZN8touchgfx17CWRVectorRenderer8tearDownEv+0x14>
 8011942:	6803      	ldr	r3, [r0, #0]
 8011944:	691b      	ldr	r3, [r3, #16]
 8011946:	4718      	bx	r3
 8011948:	4770      	bx	lr

0801194a <_ZN8touchgfx17CWRVectorRenderer14setStrokeWidthEf>:
 801194a:	ed80 0a0c 	vstr	s0, [r0, #48]	@ 0x30
 801194e:	4770      	bx	lr

08011950 <_ZN8touchgfx17CWRVectorRenderer8setColorENS_9colortypeE>:
 8011950:	b538      	push	{r3, r4, r5, lr}
 8011952:	0e0b      	lsrs	r3, r1, #24
 8011954:	4604      	mov	r4, r0
 8011956:	460d      	mov	r5, r1
 8011958:	7783      	strb	r3, [r0, #30]
 801195a:	6803      	ldr	r3, [r0, #0]
 801195c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801195e:	4798      	blx	r3
 8011960:	6803      	ldr	r3, [r0, #0]
 8011962:	4629      	mov	r1, r5
 8011964:	689b      	ldr	r3, [r3, #8]
 8011966:	4798      	blx	r3
 8011968:	6823      	ldr	r3, [r4, #0]
 801196a:	4620      	mov	r0, r4
 801196c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801196e:	4798      	blx	r3
 8011970:	61a0      	str	r0, [r4, #24]
 8011972:	bd38      	pop	{r3, r4, r5, pc}

08011974 <_ZN8touchgfx17CWRVectorRenderer8setAlphaEh>:
 8011974:	7741      	strb	r1, [r0, #29]
 8011976:	4770      	bx	lr

08011978 <_ZN8touchgfx17CWRVectorRenderer23setTransformationMatrixERKNS_9Matrix3x3E>:
 8011978:	b530      	push	{r4, r5, lr}
 801197a:	460d      	mov	r5, r1
 801197c:	f100 0434 	add.w	r4, r0, #52	@ 0x34
 8011980:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011982:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011984:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011986:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011988:	682b      	ldr	r3, [r5, #0]
 801198a:	6023      	str	r3, [r4, #0]
 801198c:	bd30      	pop	{r4, r5, pc}

0801198e <_ZN8touchgfx17CWRVectorRenderer5setupERKNS_4RectES3_>:
 801198e:	b538      	push	{r3, r4, r5, lr}
 8011990:	4604      	mov	r4, r0
 8011992:	1d03      	adds	r3, r0, #4
 8011994:	6808      	ldr	r0, [r1, #0]
 8011996:	2500      	movs	r5, #0
 8011998:	6849      	ldr	r1, [r1, #4]
 801199a:	c303      	stmia	r3!, {r0, r1}
 801199c:	6813      	ldr	r3, [r2, #0]
 801199e:	f104 0034 	add.w	r0, r4, #52	@ 0x34
 80119a2:	f8c4 3026 	str.w	r3, [r4, #38]	@ 0x26
 80119a6:	6853      	ldr	r3, [r2, #4]
 80119a8:	61a5      	str	r5, [r4, #24]
 80119aa:	f8c4 302a 	str.w	r3, [r4, #42]	@ 0x2a
 80119ae:	f007 f9d9 	bl	8018d64 <_ZN8touchgfx9Matrix3x35resetEv>
 80119b2:	23ff      	movs	r3, #255	@ 0xff
 80119b4:	f884 5025 	strb.w	r5, [r4, #37]	@ 0x25
 80119b8:	7763      	strb	r3, [r4, #29]
 80119ba:	77a3      	strb	r3, [r4, #30]
 80119bc:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 80119c0:	6323      	str	r3, [r4, #48]	@ 0x30
 80119c2:	2301      	movs	r3, #1
 80119c4:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
 80119c8:	bd38      	pop	{r3, r4, r5, pc}
	...

080119cc <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_>:
 80119cc:	ee70 7a41 	vsub.f32	s15, s0, s2
 80119d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80119d4:	eef5 7a40 	vcmp.f32	s15, #0.0
 80119d8:	4605      	mov	r5, r0
 80119da:	ed2d 8b0a 	vpush	{d8-d12}
 80119de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80119e2:	b086      	sub	sp, #24
 80119e4:	eeb0 ba40 	vmov.f32	s22, s0
 80119e8:	6802      	ldr	r2, [r0, #0]
 80119ea:	eef0 ba60 	vmov.f32	s23, s1
 80119ee:	f89d 6058 	ldrb.w	r6, [sp, #88]	@ 0x58
 80119f2:	eef0 aa41 	vmov.f32	s21, s2
 80119f6:	9f17      	ldr	r7, [sp, #92]	@ 0x5c
 80119f8:	eeb0 aa61 	vmov.f32	s20, s3
 80119fc:	eeb0 ca42 	vmov.f32	s24, s4
 8011a00:	eef0 ca62 	vmov.f32	s25, s5
 8011a04:	d112      	bne.n	8011a2c <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x60>
 8011a06:	ee70 7ae1 	vsub.f32	s15, s1, s3
 8011a0a:	eef5 7a40 	vcmp.f32	s15, #0.0
 8011a0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011a12:	d10b      	bne.n	8011a2c <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x60>
 8011a14:	f101 4180 	add.w	r1, r1, #1073741824	@ 0x40000000
 8011a18:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8011a1a:	3901      	subs	r1, #1
 8011a1c:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 8011a20:	b006      	add	sp, #24
 8011a22:	ecbd 8b0a 	vpop	{d8-d12}
 8011a26:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011a2a:	4710      	bx	r2
 8011a2c:	23ff      	movs	r3, #255	@ 0xff
 8011a2e:	4628      	mov	r0, r5
 8011a30:	f105 0834 	add.w	r8, r5, #52	@ 0x34
 8011a34:	77ab      	strb	r3, [r5, #30]
 8011a36:	6b93      	ldr	r3, [r2, #56]	@ 0x38
 8011a38:	4798      	blx	r3
 8011a3a:	eeb0 0a4b 	vmov.f32	s0, s22
 8011a3e:	eef0 0a6b 	vmov.f32	s1, s23
 8011a42:	4604      	mov	r4, r0
 8011a44:	4640      	mov	r0, r8
 8011a46:	f007 fa3c 	bl	8018ec2 <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 8011a4a:	eef0 8a40 	vmov.f32	s17, s0
 8011a4e:	ed8d 0a00 	vstr	s0, [sp]
 8011a52:	eeb0 0a6a 	vmov.f32	s0, s21
 8011a56:	eef0 9a60 	vmov.f32	s19, s1
 8011a5a:	edcd 0a01 	vstr	s1, [sp, #4]
 8011a5e:	4640      	mov	r0, r8
 8011a60:	eef0 0a4a 	vmov.f32	s1, s20
 8011a64:	f007 fa2d 	bl	8018ec2 <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 8011a68:	eef4 8a40 	vcmp.f32	s17, s0
 8011a6c:	eeb0 8a40 	vmov.f32	s16, s0
 8011a70:	ed8d 0a02 	vstr	s0, [sp, #8]
 8011a74:	eeb0 9a60 	vmov.f32	s18, s1
 8011a78:	edcd 0a03 	vstr	s1, [sp, #12]
 8011a7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011a80:	eef4 9a60 	vcmp.f32	s19, s1
 8011a84:	bf0c      	ite	eq
 8011a86:	2301      	moveq	r3, #1
 8011a88:	2300      	movne	r3, #0
 8011a8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011a8e:	eef4 8a40 	vcmp.f32	s17, s0
 8011a92:	7463      	strb	r3, [r4, #17]
 8011a94:	bf0c      	ite	eq
 8011a96:	2301      	moveq	r3, #1
 8011a98:	2300      	movne	r3, #0
 8011a9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011a9e:	74a3      	strb	r3, [r4, #18]
 8011aa0:	d024      	beq.n	8011aec <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x120>
 8011aa2:	eef4 9a60 	vcmp.f32	s19, s1
 8011aa6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011aaa:	d01f      	beq.n	8011aec <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x120>
 8011aac:	ee3a aa6b 	vsub.f32	s20, s20, s23
 8011ab0:	4640      	mov	r0, r8
 8011ab2:	ee7a aacb 	vsub.f32	s21, s21, s22
 8011ab6:	eeb0 0a4b 	vmov.f32	s0, s22
 8011aba:	eeca 7a2c 	vdiv.f32	s15, s20, s25
 8011abe:	ee8a 7a8c 	vdiv.f32	s14, s21, s24
 8011ac2:	eef0 0a6b 	vmov.f32	s1, s23
 8011ac6:	eea7 0acc 	vfms.f32	s0, s15, s24
 8011aca:	eeec 0a87 	vfma.f32	s1, s25, s14
 8011ace:	f007 f9f8 	bl	8018ec2 <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 8011ad2:	ed8d 0a04 	vstr	s0, [sp, #16]
 8011ad6:	ee30 0a68 	vsub.f32	s0, s0, s17
 8011ada:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8011ade:	edcd 0a05 	vstr	s1, [sp, #20]
 8011ae2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011ae6:	d121      	bne.n	8011b2c <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x160>
 8011ae8:	2301      	movs	r3, #1
 8011aea:	74a3      	strb	r3, [r4, #18]
 8011aec:	7c63      	ldrb	r3, [r4, #17]
 8011aee:	2b00      	cmp	r3, #0
 8011af0:	d051      	beq.n	8011b96 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x1ca>
 8011af2:	ee39 7a69 	vsub.f32	s14, s18, s19
 8011af6:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8011bec <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x220>
 8011afa:	eef4 9ac9 	vcmpe.f32	s19, s18
 8011afe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8011b02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011b06:	edc4 7a08 	vstr	s15, [r4, #32]
 8011b0a:	eefd 7ac9 	vcvt.s32.f32	s15, s18
 8011b0e:	ee17 3a90 	vmov	r3, s15
 8011b12:	eefd 7ae9 	vcvt.s32.f32	s15, s19
 8011b16:	b21a      	sxth	r2, r3
 8011b18:	ee17 3a90 	vmov	r3, s15
 8011b1c:	bf48      	it	mi
 8011b1e:	8122      	strhmi	r2, [r4, #8]
 8011b20:	b21b      	sxth	r3, r3
 8011b22:	bf56      	itet	pl
 8011b24:	80e2      	strhpl	r2, [r4, #6]
 8011b26:	80e3      	strhmi	r3, [r4, #6]
 8011b28:	8123      	strhpl	r3, [r4, #8]
 8011b2a:	e02c      	b.n	8011b86 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x1ba>
 8011b2c:	ee70 0ae9 	vsub.f32	s1, s1, s19
 8011b30:	eec0 7a80 	vdiv.f32	s15, s1, s0
 8011b34:	eef5 7a40 	vcmp.f32	s15, #0.0
 8011b38:	edc4 7a05 	vstr	s15, [r4, #20]
 8011b3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011b40:	d102      	bne.n	8011b48 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x17c>
 8011b42:	2301      	movs	r3, #1
 8011b44:	7463      	strb	r3, [r4, #17]
 8011b46:	e7d1      	b.n	8011aec <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x120>
 8011b48:	eeb0 7a69 	vmov.f32	s14, s19
 8011b4c:	ee39 9a69 	vsub.f32	s18, s18, s19
 8011b50:	ee38 8a68 	vsub.f32	s16, s16, s17
 8011b54:	eea8 7ae7 	vfms.f32	s14, s17, s15
 8011b58:	ed84 7a06 	vstr	s14, [r4, #24]
 8011b5c:	ee89 7a27 	vdiv.f32	s14, s18, s15
 8011b60:	ee38 8a47 	vsub.f32	s16, s16, s14
 8011b64:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 8011bf0 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x224>
 8011b68:	eec7 7a08 	vdiv.f32	s15, s14, s16
 8011b6c:	ed84 8a07 	vstr	s16, [r4, #28]
 8011b70:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8011b74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011b78:	edc4 7a08 	vstr	s15, [r4, #32]
 8011b7c:	d503      	bpl.n	8011b86 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x1ba>
 8011b7e:	eeb1 8a48 	vneg.f32	s16, s16
 8011b82:	ed84 8a07 	vstr	s16, [r4, #28]
 8011b86:	60e7      	str	r7, [r4, #12]
 8011b88:	7426      	strb	r6, [r4, #16]
 8011b8a:	61ac      	str	r4, [r5, #24]
 8011b8c:	b006      	add	sp, #24
 8011b8e:	ecbd 8b0a 	vpop	{d8-d12}
 8011b92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011b96:	7ca3      	ldrb	r3, [r4, #18]
 8011b98:	2b00      	cmp	r3, #0
 8011b9a:	d0f4      	beq.n	8011b86 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x1ba>
 8011b9c:	ee38 7a68 	vsub.f32	s14, s16, s17
 8011ba0:	eddf 6a12 	vldr	s13, [pc, #72]	@ 8011bec <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x220>
 8011ba4:	eef4 8ac8 	vcmpe.f32	s17, s16
 8011ba8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8011bac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011bb0:	edc4 7a08 	vstr	s15, [r4, #32]
 8011bb4:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 8011bb8:	ee17 3a90 	vmov	r3, s15
 8011bbc:	eefd 7ae8 	vcvt.s32.f32	s15, s17
 8011bc0:	b21a      	sxth	r2, r3
 8011bc2:	ee17 3a90 	vmov	r3, s15
 8011bc6:	bf48      	it	mi
 8011bc8:	8122      	strhmi	r2, [r4, #8]
 8011bca:	b21b      	sxth	r3, r3
 8011bcc:	bf56      	itet	pl
 8011bce:	80e2      	strhpl	r2, [r4, #6]
 8011bd0:	80e3      	strhmi	r3, [r4, #6]
 8011bd2:	8123      	strhpl	r3, [r4, #8]
 8011bd4:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 8011bd8:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 8011bdc:	1a9b      	subs	r3, r3, r2
 8011bde:	ee07 3a90 	vmov	s15, r3
 8011be2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8011be6:	edc4 7a07 	vstr	s15, [r4, #28]
 8011bea:	e7cc      	b.n	8011b86 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x1ba>
 8011bec:	447ffffe 	.word	0x447ffffe
 8011bf0:	44800000 	.word	0x44800000

08011bf4 <_ZN8touchgfx6Canvas17quadraticBezierToEffffff>:
 8011bf4:	b510      	push	{r4, lr}
 8011bf6:	ed2d 8b02 	vpush	{d8}
 8011bfa:	eef0 8a62 	vmov.f32	s17, s5
 8011bfe:	2100      	movs	r1, #0
 8011c00:	4604      	mov	r4, r0
 8011c02:	eeb0 8a42 	vmov.f32	s16, s4
 8011c06:	f013 fe87 	bl	8025918 <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj>
 8011c0a:	eef0 7a68 	vmov.f32	s15, s17
 8011c0e:	6823      	ldr	r3, [r4, #0]
 8011c10:	4620      	mov	r0, r4
 8011c12:	689b      	ldr	r3, [r3, #8]
 8011c14:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 8011c18:	ee17 2a90 	vmov	r2, s15
 8011c1c:	eef0 7a48 	vmov.f32	s15, s16
 8011c20:	ecbd 8b02 	vpop	{d8}
 8011c24:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 8011c28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011c2c:	ee17 1a90 	vmov	r1, s15
 8011c30:	4718      	bx	r3

08011c32 <_ZN8touchgfx6Canvas13cubicBezierToEffffffff>:
 8011c32:	b510      	push	{r4, lr}
 8011c34:	ed2d 8b02 	vpush	{d8}
 8011c38:	eef0 8a63 	vmov.f32	s17, s7
 8011c3c:	2100      	movs	r1, #0
 8011c3e:	4604      	mov	r4, r0
 8011c40:	eeb0 8a43 	vmov.f32	s16, s6
 8011c44:	f013 ff2a 	bl	8025a9c <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj>
 8011c48:	eef0 7a68 	vmov.f32	s15, s17
 8011c4c:	6823      	ldr	r3, [r4, #0]
 8011c4e:	4620      	mov	r0, r4
 8011c50:	689b      	ldr	r3, [r3, #8]
 8011c52:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 8011c56:	ee17 2a90 	vmov	r2, s15
 8011c5a:	eef0 7a48 	vmov.f32	s15, s16
 8011c5e:	ecbd 8b02 	vpop	{d8}
 8011c62:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 8011c66:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011c6a:	ee17 1a90 	vmov	r1, s15
 8011c6e:	4718      	bx	r3

08011c70 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19moveToWithTransformEff>:
 8011c70:	b513      	push	{r0, r1, r4, lr}
 8011c72:	4604      	mov	r4, r0
 8011c74:	6f40      	ldr	r0, [r0, #116]	@ 0x74
 8011c76:	f007 f924 	bl	8018ec2 <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 8011c7a:	eef0 7a60 	vmov.f32	s15, s1
 8011c7e:	4620      	mov	r0, r4
 8011c80:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 8011c84:	ee17 2a90 	vmov	r2, s15
 8011c88:	eef0 7a40 	vmov.f32	s15, s0
 8011c8c:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 8011c90:	ee17 1a90 	vmov	r1, s15
 8011c94:	b002      	add	sp, #8
 8011c96:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011c9a:	f013 bd97 	b.w	80257cc <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_>

08011c9e <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>:
 8011c9e:	b513      	push	{r0, r1, r4, lr}
 8011ca0:	4604      	mov	r4, r0
 8011ca2:	6f40      	ldr	r0, [r0, #116]	@ 0x74
 8011ca4:	f007 f90d 	bl	8018ec2 <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 8011ca8:	eef0 7a60 	vmov.f32	s15, s1
 8011cac:	4620      	mov	r0, r4
 8011cae:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 8011cb2:	ee17 2a90 	vmov	r2, s15
 8011cb6:	eef0 7a40 	vmov.f32	s15, s0
 8011cba:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 8011cbe:	ee17 1a90 	vmov	r1, s15
 8011cc2:	b002      	add	sp, #8
 8011cc4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011cc8:	f013 bdcd 	b.w	8025866 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>

08011ccc <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf>:
 8011ccc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011cce:	2400      	movs	r4, #0
 8011cd0:	9f07      	ldr	r7, [sp, #28]
 8011cd2:	f04f 0e01 	mov.w	lr, #1
 8011cd6:	4626      	mov	r6, r4
 8011cd8:	e9dd 0c05 	ldrd	r0, ip, [sp, #20]
 8011cdc:	4463      	add	r3, ip
 8011cde:	4563      	cmp	r3, ip
 8011ce0:	d02d      	beq.n	8011d3e <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x72>
 8011ce2:	f813 5d01 	ldrb.w	r5, [r3, #-1]!
 8011ce6:	2d06      	cmp	r5, #6
 8011ce8:	d8f9      	bhi.n	8011cde <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x12>
 8011cea:	fa0e f505 	lsl.w	r5, lr, r5
 8011cee:	f015 0f66 	tst.w	r5, #102	@ 0x66
 8011cf2:	d10d      	bne.n	8011d10 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x44>
 8011cf4:	f015 0f10 	tst.w	r5, #16
 8011cf8:	d117      	bne.n	8011d2a <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x5e>
 8011cfa:	072d      	lsls	r5, r5, #28
 8011cfc:	d5ef      	bpl.n	8011cde <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x12>
 8011cfe:	3801      	subs	r0, #1
 8011d00:	b91e      	cbnz	r6, 8011d0a <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x3e>
 8011d02:	eb07 0580 	add.w	r5, r7, r0, lsl #2
 8011d06:	682d      	ldr	r5, [r5, #0]
 8011d08:	600d      	str	r5, [r1, #0]
 8011d0a:	b96c      	cbnz	r4, 8011d28 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x5c>
 8011d0c:	2601      	movs	r6, #1
 8011d0e:	e7e6      	b.n	8011cde <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x12>
 8011d10:	b926      	cbnz	r6, 8011d1c <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x50>
 8011d12:	eb07 0380 	add.w	r3, r7, r0, lsl #2
 8011d16:	f853 3c08 	ldr.w	r3, [r3, #-8]
 8011d1a:	600b      	str	r3, [r1, #0]
 8011d1c:	b924      	cbnz	r4, 8011d28 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x5c>
 8011d1e:	eb07 0080 	add.w	r0, r7, r0, lsl #2
 8011d22:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8011d26:	6013      	str	r3, [r2, #0]
 8011d28:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011d2a:	3801      	subs	r0, #1
 8011d2c:	b91c      	cbnz	r4, 8011d36 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x6a>
 8011d2e:	eb07 0480 	add.w	r4, r7, r0, lsl #2
 8011d32:	6824      	ldr	r4, [r4, #0]
 8011d34:	6014      	str	r4, [r2, #0]
 8011d36:	2e00      	cmp	r6, #0
 8011d38:	d1f6      	bne.n	8011d28 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x5c>
 8011d3a:	2401      	movs	r4, #1
 8011d3c:	e7cf      	b.n	8011cde <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x12>
 8011d3e:	b90e      	cbnz	r6, 8011d44 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x78>
 8011d40:	2300      	movs	r3, #0
 8011d42:	600b      	str	r3, [r1, #0]
 8011d44:	2c00      	cmp	r4, #0
 8011d46:	d1ef      	bne.n	8011d28 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x5c>
 8011d48:	2300      	movs	r3, #0
 8011d4a:	e7ec      	b.n	8011d26 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x5a>

08011d4c <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawLineJoinRoundEffffffi>:
 8011d4c:	b538      	push	{r3, r4, r5, lr}
 8011d4e:	ed2d 8b0a 	vpush	{d8-d12}
 8011d52:	eef0 ba40 	vmov.f32	s23, s0
 8011d56:	4604      	mov	r4, r0
 8011d58:	eeb0 ca60 	vmov.f32	s24, s1
 8011d5c:	460d      	mov	r5, r1
 8011d5e:	eef0 aa41 	vmov.f32	s21, s2
 8011d62:	eeb0 ba61 	vmov.f32	s22, s3
 8011d66:	eeb0 9a42 	vmov.f32	s18, s4
 8011d6a:	eef0 9a62 	vmov.f32	s19, s5
 8011d6e:	eeb6 aa00 	vmov.f32	s20, #96	@ 0x3f000000  0.5
 8011d72:	ee7b 8a29 	vadd.f32	s17, s22, s19
 8011d76:	ee3a 8a89 	vadd.f32	s16, s21, s18
 8011d7a:	ee68 8a8a 	vmul.f32	s17, s17, s20
 8011d7e:	ee28 8a0a 	vmul.f32	s16, s16, s20
 8011d82:	ee3c 0a68 	vsub.f32	s0, s24, s17
 8011d86:	ee7b 7ac8 	vsub.f32	s15, s23, s16
 8011d8a:	ee20 0a00 	vmul.f32	s0, s0, s0
 8011d8e:	eea7 0aa7 	vfma.f32	s0, s15, s15
 8011d92:	f014 ff27 	bl	8026be4 <sqrtf>
 8011d96:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8011d9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011d9e:	d12e      	bne.n	8011dfe <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawLineJoinRoundEffffffi+0xb2>
 8011da0:	ee79 7a6a 	vsub.f32	s15, s18, s21
 8011da4:	ee39 7acb 	vsub.f32	s14, s19, s22
 8011da8:	eeb0 8a6a 	vmov.f32	s16, s21
 8011dac:	eef0 8a4b 	vmov.f32	s17, s22
 8011db0:	eea7 8a8a 	vfma.f32	s16, s15, s20
 8011db4:	eee7 8a0a 	vfma.f32	s17, s14, s20
 8011db8:	eea7 8a0a 	vfma.f32	s16, s14, s20
 8011dbc:	eee7 8aca 	vfms.f32	s17, s15, s20
 8011dc0:	2d02      	cmp	r5, #2
 8011dc2:	dc2f      	bgt.n	8011e24 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawLineJoinRoundEffffffi+0xd8>
 8011dc4:	3501      	adds	r5, #1
 8011dc6:	eef0 1a4b 	vmov.f32	s3, s22
 8011dca:	eeb0 1a6a 	vmov.f32	s2, s21
 8011dce:	4620      	mov	r0, r4
 8011dd0:	4629      	mov	r1, r5
 8011dd2:	eef0 2a68 	vmov.f32	s5, s17
 8011dd6:	eeb0 2a48 	vmov.f32	s4, s16
 8011dda:	eef0 0a4c 	vmov.f32	s1, s24
 8011dde:	eeb0 0a6b 	vmov.f32	s0, s23
 8011de2:	f7ff ffb3 	bl	8011d4c <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawLineJoinRoundEffffffi>
 8011de6:	eef0 0a68 	vmov.f32	s1, s17
 8011dea:	eeb0 0a48 	vmov.f32	s0, s16
 8011dee:	4620      	mov	r0, r4
 8011df0:	f7ff ff55 	bl	8011c9e <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 8011df4:	eeb0 ba68 	vmov.f32	s22, s17
 8011df8:	eef0 aa48 	vmov.f32	s21, s16
 8011dfc:	e7b9      	b.n	8011d72 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawLineJoinRoundEffffffi+0x26>
 8011dfe:	ee38 8a6b 	vsub.f32	s16, s16, s23
 8011e02:	edd4 7a1f 	vldr	s15, [r4, #124]	@ 0x7c
 8011e06:	ee78 8acc 	vsub.f32	s17, s17, s24
 8011e0a:	ee28 7a27 	vmul.f32	s14, s16, s15
 8011e0e:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8011e12:	ee87 8a00 	vdiv.f32	s16, s14, s0
 8011e16:	eec7 8a80 	vdiv.f32	s17, s15, s0
 8011e1a:	ee3b 8a88 	vadd.f32	s16, s23, s16
 8011e1e:	ee7c 8a28 	vadd.f32	s17, s24, s17
 8011e22:	e7cd      	b.n	8011dc0 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawLineJoinRoundEffffffi+0x74>
 8011e24:	eef0 0a68 	vmov.f32	s1, s17
 8011e28:	4620      	mov	r0, r4
 8011e2a:	eeb0 0a48 	vmov.f32	s0, s16
 8011e2e:	f7ff ff36 	bl	8011c9e <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 8011e32:	ecbd 8b0a 	vpop	{d8-d12}
 8011e36:	bd38      	pop	{r3, r4, r5, pc}

08011e38 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas18strokeDrawLineJoinEffffffffff>:
 8011e38:	b510      	push	{r4, lr}
 8011e3a:	ed2d 8b0a 	vpush	{d8-d12}
 8011e3e:	f890 3084 	ldrb.w	r3, [r0, #132]	@ 0x84
 8011e42:	4604      	mov	r4, r0
 8011e44:	eeb0 ca40 	vmov.f32	s24, s0
 8011e48:	2b02      	cmp	r3, #2
 8011e4a:	eeb0 9a60 	vmov.f32	s18, s1
 8011e4e:	eef0 9a41 	vmov.f32	s19, s2
 8011e52:	eef0 8a61 	vmov.f32	s17, s3
 8011e56:	eeb0 ba42 	vmov.f32	s22, s4
 8011e5a:	eef0 ba62 	vmov.f32	s23, s5
 8011e5e:	eeb0 aa43 	vmov.f32	s20, s6
 8011e62:	eef0 aa63 	vmov.f32	s21, s7
 8011e66:	eeb0 8a44 	vmov.f32	s16, s8
 8011e6a:	eef0 ca64 	vmov.f32	s25, s9
 8011e6e:	d12c      	bne.n	8011eca <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas18strokeDrawLineJoinEffffffffff+0x92>
 8011e70:	eef0 0a62 	vmov.f32	s1, s5
 8011e74:	eeb0 0a42 	vmov.f32	s0, s4
 8011e78:	f7ff ff11 	bl	8011c9e <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 8011e7c:	ee79 9acb 	vsub.f32	s19, s19, s22
 8011e80:	ee7a caec 	vsub.f32	s25, s21, s25
 8011e84:	ee78 8aeb 	vsub.f32	s17, s17, s23
 8011e88:	ee3a 8a48 	vsub.f32	s16, s20, s16
 8011e8c:	ee69 9aac 	vmul.f32	s19, s19, s25
 8011e90:	ee28 8a88 	vmul.f32	s16, s17, s16
 8011e94:	eef4 9ac8 	vcmpe.f32	s19, s16
 8011e98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011e9c:	db0f      	blt.n	8011ebe <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas18strokeDrawLineJoinEffffffffff+0x86>
 8011e9e:	2101      	movs	r1, #1
 8011ea0:	eef0 2a6a 	vmov.f32	s5, s21
 8011ea4:	eeb0 2a4a 	vmov.f32	s4, s20
 8011ea8:	4620      	mov	r0, r4
 8011eaa:	eef0 1a6b 	vmov.f32	s3, s23
 8011eae:	eeb0 1a4b 	vmov.f32	s2, s22
 8011eb2:	eef0 0a49 	vmov.f32	s1, s18
 8011eb6:	eeb0 0a4c 	vmov.f32	s0, s24
 8011eba:	f7ff ff47 	bl	8011d4c <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawLineJoinRoundEffffffi>
 8011ebe:	eef0 0a6a 	vmov.f32	s1, s21
 8011ec2:	4620      	mov	r0, r4
 8011ec4:	eeb0 0a4a 	vmov.f32	s0, s20
 8011ec8:	e035      	b.n	8011f36 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas18strokeDrawLineJoinEffffffffff+0xfe>
 8011eca:	2b01      	cmp	r3, #1
 8011ecc:	d138      	bne.n	8011f40 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas18strokeDrawLineJoinEffffffffff+0x108>
 8011ece:	ee31 4ae2 	vsub.f32	s8, s3, s5
 8011ed2:	ee33 6a48 	vsub.f32	s12, s6, s16
 8011ed6:	ee71 7a42 	vsub.f32	s15, s2, s4
 8011eda:	ee73 6ae4 	vsub.f32	s13, s7, s9
 8011ede:	ee26 7a44 	vnmul.f32	s14, s12, s8
 8011ee2:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8011ee6:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8011eea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011eee:	d027      	beq.n	8011f40 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas18strokeDrawLineJoinEffffffffff+0x108>
 8011ef0:	ee28 8a63 	vnmul.f32	s16, s16, s7
 8011ef4:	ee61 8ac2 	vnmul.f32	s17, s3, s4
 8011ef8:	eea4 8a83 	vfma.f32	s16, s9, s6
 8011efc:	eee1 8a22 	vfma.f32	s17, s2, s5
 8011f00:	ee68 7a67 	vnmul.f32	s15, s16, s15
 8011f04:	ee28 8a44 	vnmul.f32	s16, s16, s8
 8011f08:	eee6 7a28 	vfma.f32	s15, s12, s17
 8011f0c:	eea6 8aa8 	vfma.f32	s16, s13, s17
 8011f10:	ee87 0a87 	vdiv.f32	s0, s15, s14
 8011f14:	edd0 7a20 	vldr	s15, [r0, #128]	@ 0x80
 8011f18:	eec8 0a07 	vdiv.f32	s1, s16, s14
 8011f1c:	ee3c ca40 	vsub.f32	s24, s24, s0
 8011f20:	ee39 9a60 	vsub.f32	s18, s18, s1
 8011f24:	ee29 9a09 	vmul.f32	s18, s18, s18
 8011f28:	eeac 9a0c 	vfma.f32	s18, s24, s24
 8011f2c:	eef4 7ac9 	vcmpe.f32	s15, s18
 8011f30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011f34:	db04      	blt.n	8011f40 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas18strokeDrawLineJoinEffffffffff+0x108>
 8011f36:	f7ff feb2 	bl	8011c9e <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 8011f3a:	ecbd 8b0a 	vpop	{d8-d12}
 8011f3e:	bd10      	pop	{r4, pc}
 8011f40:	eef0 0a6b 	vmov.f32	s1, s23
 8011f44:	4620      	mov	r0, r4
 8011f46:	eeb0 0a4b 	vmov.f32	s0, s22
 8011f4a:	f7ff fea8 	bl	8011c9e <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 8011f4e:	e7b6      	b.n	8011ebe <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas18strokeDrawLineJoinEffffffffff+0x86>

08011f50 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff>:
 8011f50:	b510      	push	{r4, lr}
 8011f52:	ed2d 8b0c 	vpush	{d8-d13}
 8011f56:	f890 3085 	ldrb.w	r3, [r0, #133]	@ 0x85
 8011f5a:	4604      	mov	r4, r0
 8011f5c:	eeb0 9a40 	vmov.f32	s18, s0
 8011f60:	eef0 9a60 	vmov.f32	s19, s1
 8011f64:	eef0 aa41 	vmov.f32	s21, s2
 8011f68:	eeb0 ba61 	vmov.f32	s22, s3
 8011f6c:	b933      	cbnz	r3, 8011f7c <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x2c>
 8011f6e:	f7ff fe96 	bl	8011c9e <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 8011f72:	eef0 0a4b 	vmov.f32	s1, s22
 8011f76:	eeb0 0a6a 	vmov.f32	s0, s21
 8011f7a:	e015      	b.n	8011fa8 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x58>
 8011f7c:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8011f80:	2b02      	cmp	r3, #2
 8011f82:	ee71 8a40 	vsub.f32	s17, s2, s0
 8011f86:	ee31 8ae0 	vsub.f32	s16, s3, s1
 8011f8a:	ee68 8aa7 	vmul.f32	s17, s17, s15
 8011f8e:	ee28 8a27 	vmul.f32	s16, s16, s15
 8011f92:	d10f      	bne.n	8011fb4 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x64>
 8011f94:	ee70 0ae8 	vsub.f32	s1, s1, s17
 8011f98:	ee30 0a08 	vadd.f32	s0, s0, s16
 8011f9c:	f7ff fe7f 	bl	8011c9e <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 8011fa0:	ee7b 0a68 	vsub.f32	s1, s22, s17
 8011fa4:	ee3a 0a88 	vadd.f32	s0, s21, s16
 8011fa8:	4620      	mov	r0, r4
 8011faa:	f7ff fe78 	bl	8011c9e <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 8011fae:	ecbd 8b0c 	vpop	{d8-d13}
 8011fb2:	bd10      	pop	{r4, pc}
 8011fb4:	f7ff fe73 	bl	8011c9e <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 8011fb8:	eef0 0a69 	vmov.f32	s1, s19
 8011fbc:	eeb0 0a49 	vmov.f32	s0, s18
 8011fc0:	eddf 7a4b 	vldr	s15, [pc, #300]	@ 80120f0 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1a0>
 8011fc4:	eeb1 aa68 	vneg.f32	s20, s17
 8011fc8:	eddf ba4a 	vldr	s23, [pc, #296]	@ 80120f4 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1a4>
 8011fcc:	eee8 0a27 	vfma.f32	s1, s16, s15
 8011fd0:	4620      	mov	r0, r4
 8011fd2:	eea8 0aa7 	vfma.f32	s0, s17, s15
 8011fd6:	ed9f ca48 	vldr	s24, [pc, #288]	@ 80120f8 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1a8>
 8011fda:	eddf ca48 	vldr	s25, [pc, #288]	@ 80120fc <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1ac>
 8011fde:	ed9f da48 	vldr	s26, [pc, #288]	@ 8012100 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1b0>
 8011fe2:	eeea 0a2b 	vfma.f32	s1, s20, s23
 8011fe6:	eea8 0a2b 	vfma.f32	s0, s16, s23
 8011fea:	f7ff fe58 	bl	8011c9e <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 8011fee:	eef0 0a69 	vmov.f32	s1, s19
 8011ff2:	eeb0 0a49 	vmov.f32	s0, s18
 8011ff6:	eddf 7a43 	vldr	s15, [pc, #268]	@ 8012104 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1b4>
 8011ffa:	4620      	mov	r0, r4
 8011ffc:	eee8 0a27 	vfma.f32	s1, s16, s15
 8012000:	eea8 0aa7 	vfma.f32	s0, s17, s15
 8012004:	eeea 0a0c 	vfma.f32	s1, s20, s24
 8012008:	eea8 0a0c 	vfma.f32	s0, s16, s24
 801200c:	f7ff fe47 	bl	8011c9e <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 8012010:	eef0 0a69 	vmov.f32	s1, s19
 8012014:	eeb0 0a49 	vmov.f32	s0, s18
 8012018:	eddf 7a3b 	vldr	s15, [pc, #236]	@ 8012108 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1b8>
 801201c:	4620      	mov	r0, r4
 801201e:	eee8 0a27 	vfma.f32	s1, s16, s15
 8012022:	eea8 0aa7 	vfma.f32	s0, s17, s15
 8012026:	eeea 0a2c 	vfma.f32	s1, s20, s25
 801202a:	eea8 0a2c 	vfma.f32	s0, s16, s25
 801202e:	f7ff fe36 	bl	8011c9e <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 8012032:	eef0 0a69 	vmov.f32	s1, s19
 8012036:	eeb0 0a49 	vmov.f32	s0, s18
 801203a:	eddf 7a34 	vldr	s15, [pc, #208]	@ 801210c <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1bc>
 801203e:	4620      	mov	r0, r4
 8012040:	eee8 0a27 	vfma.f32	s1, s16, s15
 8012044:	eea8 0aa7 	vfma.f32	s0, s17, s15
 8012048:	eeea 0a0d 	vfma.f32	s1, s20, s26
 801204c:	eea8 0a0d 	vfma.f32	s0, s16, s26
 8012050:	f7ff fe25 	bl	8011c9e <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 8012054:	ee79 0a88 	vadd.f32	s1, s19, s16
 8012058:	ee39 0a28 	vadd.f32	s0, s18, s17
 801205c:	4620      	mov	r0, r4
 801205e:	ee70 0ae8 	vsub.f32	s1, s1, s17
 8012062:	ee30 0a08 	vadd.f32	s0, s0, s16
 8012066:	f7ff fe1a 	bl	8011c9e <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 801206a:	eef0 0a69 	vmov.f32	s1, s19
 801206e:	eeb0 0a49 	vmov.f32	s0, s18
 8012072:	eddf 7a27 	vldr	s15, [pc, #156]	@ 8012110 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1c0>
 8012076:	4620      	mov	r0, r4
 8012078:	eee8 0a27 	vfma.f32	s1, s16, s15
 801207c:	eea8 0aa7 	vfma.f32	s0, s17, s15
 8012080:	eeea 0a0d 	vfma.f32	s1, s20, s26
 8012084:	eea8 0a0d 	vfma.f32	s0, s16, s26
 8012088:	f7ff fe09 	bl	8011c9e <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 801208c:	eef0 0a69 	vmov.f32	s1, s19
 8012090:	eeb0 0a49 	vmov.f32	s0, s18
 8012094:	eddf 7a1f 	vldr	s15, [pc, #124]	@ 8012114 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1c4>
 8012098:	4620      	mov	r0, r4
 801209a:	eee8 0a27 	vfma.f32	s1, s16, s15
 801209e:	eea8 0aa7 	vfma.f32	s0, s17, s15
 80120a2:	eeea 0a2c 	vfma.f32	s1, s20, s25
 80120a6:	eea8 0a2c 	vfma.f32	s0, s16, s25
 80120aa:	f7ff fdf8 	bl	8011c9e <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 80120ae:	eef0 0a69 	vmov.f32	s1, s19
 80120b2:	eeb0 0a49 	vmov.f32	s0, s18
 80120b6:	eddf 7a18 	vldr	s15, [pc, #96]	@ 8012118 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1c8>
 80120ba:	4620      	mov	r0, r4
 80120bc:	eee8 0a27 	vfma.f32	s1, s16, s15
 80120c0:	eea8 0aa7 	vfma.f32	s0, s17, s15
 80120c4:	eeea 0a0c 	vfma.f32	s1, s20, s24
 80120c8:	eea8 0a0c 	vfma.f32	s0, s16, s24
 80120cc:	f7ff fde7 	bl	8011c9e <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 80120d0:	eef0 0a69 	vmov.f32	s1, s19
 80120d4:	eeb0 0a49 	vmov.f32	s0, s18
 80120d8:	eddf 7a10 	vldr	s15, [pc, #64]	@ 801211c <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1cc>
 80120dc:	4620      	mov	r0, r4
 80120de:	eee8 0a27 	vfma.f32	s1, s16, s15
 80120e2:	eea8 0aa7 	vfma.f32	s0, s17, s15
 80120e6:	eeea 0a2b 	vfma.f32	s1, s20, s23
 80120ea:	eea8 0a2b 	vfma.f32	s0, s16, s23
 80120ee:	e73e      	b.n	8011f6e <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1e>
 80120f0:	3d23d70a 	.word	0x3d23d70a
 80120f4:	3e8f5c29 	.word	0x3e8f5c29
 80120f8:	3f19999a 	.word	0x3f19999a
 80120fc:	3f4ccccd 	.word	0x3f4ccccd
 8012100:	3f75c28f 	.word	0x3f75c28f
 8012104:	3e4ccccd 	.word	0x3e4ccccd
 8012108:	3ecccccd 	.word	0x3ecccccd
 801210c:	3f3851ec 	.word	0x3f3851ec
 8012110:	3fa3d70a 	.word	0x3fa3d70a
 8012114:	3fcccccd 	.word	0x3fcccccd
 8012118:	3fe66666 	.word	0x3fe66666
 801211c:	3ffae148 	.word	0x3ffae148

08012120 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff>:
 8012120:	b570      	push	{r4, r5, r6, lr}
 8012122:	ed2d 8b06 	vpush	{d8-d10}
 8012126:	ed90 8a23 	vldr	s16, [r0, #140]	@ 0x8c
 801212a:	eef0 aa40 	vmov.f32	s21, s0
 801212e:	ed90 9a22 	vldr	s18, [r0, #136]	@ 0x88
 8012132:	4604      	mov	r4, r0
 8012134:	ee30 8ac8 	vsub.f32	s16, s1, s16
 8012138:	ee30 9a49 	vsub.f32	s18, s0, s18
 801213c:	eeb0 aa60 	vmov.f32	s20, s1
 8012140:	ee28 0a08 	vmul.f32	s0, s16, s16
 8012144:	eea9 0a09 	vfma.f32	s0, s18, s18
 8012148:	f014 fd4c 	bl	8026be4 <sqrtf>
 801214c:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8012150:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012154:	dd36      	ble.n	80121c4 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff+0xa4>
 8012156:	edd4 7a1f 	vldr	s15, [r4, #124]	@ 0x7c
 801215a:	2600      	movs	r6, #0
 801215c:	edd4 0a23 	vldr	s1, [r4, #140]	@ 0x8c
 8012160:	eec0 6a27 	vdiv.f32	s13, s0, s15
 8012164:	f894 5078 	ldrb.w	r5, [r4, #120]	@ 0x78
 8012168:	ed94 0a22 	vldr	s0, [r4, #136]	@ 0x88
 801216c:	f884 6079 	strb.w	r6, [r4, #121]	@ 0x79
 8012170:	eec8 8a26 	vdiv.f32	s17, s16, s13
 8012174:	ee89 8a26 	vdiv.f32	s16, s18, s13
 8012178:	ee70 9a28 	vadd.f32	s19, s0, s17
 801217c:	ee78 8aaa 	vadd.f32	s17, s17, s21
 8012180:	ee30 9ac8 	vsub.f32	s18, s1, s16
 8012184:	ee3a 8a48 	vsub.f32	s16, s20, s16
 8012188:	b1fd      	cbz	r5, 80121ca <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff+0xaa>
 801218a:	edc4 9a24 	vstr	s19, [r4, #144]	@ 0x90
 801218e:	eef0 0a49 	vmov.f32	s1, s18
 8012192:	ed84 9a25 	vstr	s18, [r4, #148]	@ 0x94
 8012196:	eeb0 0a69 	vmov.f32	s0, s19
 801219a:	edc4 8a26 	vstr	s17, [r4, #152]	@ 0x98
 801219e:	4620      	mov	r0, r4
 80121a0:	ed84 8a27 	vstr	s16, [r4, #156]	@ 0x9c
 80121a4:	f7ff fd64 	bl	8011c70 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19moveToWithTransformEff>
 80121a8:	f884 6078 	strb.w	r6, [r4, #120]	@ 0x78
 80121ac:	edc4 9a28 	vstr	s19, [r4, #160]	@ 0xa0
 80121b0:	ed84 9a29 	vstr	s18, [r4, #164]	@ 0xa4
 80121b4:	edc4 8a2a 	vstr	s17, [r4, #168]	@ 0xa8
 80121b8:	ed84 8a2b 	vstr	s16, [r4, #172]	@ 0xac
 80121bc:	edc4 aa22 	vstr	s21, [r4, #136]	@ 0x88
 80121c0:	ed84 aa23 	vstr	s20, [r4, #140]	@ 0x8c
 80121c4:	ecbd 8b06 	vpop	{d8-d10}
 80121c8:	bd70      	pop	{r4, r5, r6, pc}
 80121ca:	f894 307a 	ldrb.w	r3, [r4, #122]	@ 0x7a
 80121ce:	ed94 2a2a 	vldr	s4, [r4, #168]	@ 0xa8
 80121d2:	edd4 2a2b 	vldr	s5, [r4, #172]	@ 0xac
 80121d6:	b16b      	cbz	r3, 80121f4 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff+0xd4>
 80121d8:	eef0 1a49 	vmov.f32	s3, s18
 80121dc:	4620      	mov	r0, r4
 80121de:	eeb0 1a69 	vmov.f32	s2, s19
 80121e2:	eef0 0a62 	vmov.f32	s1, s5
 80121e6:	eeb0 0a42 	vmov.f32	s0, s4
 80121ea:	f7ff feb1 	bl	8011f50 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff>
 80121ee:	f884 507a 	strb.w	r5, [r4, #122]	@ 0x7a
 80121f2:	e7db      	b.n	80121ac <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff+0x8c>
 80121f4:	eef0 4a48 	vmov.f32	s9, s16
 80121f8:	edd4 1a29 	vldr	s3, [r4, #164]	@ 0xa4
 80121fc:	eeb0 4a68 	vmov.f32	s8, s17
 8012200:	ed94 1a28 	vldr	s2, [r4, #160]	@ 0xa0
 8012204:	eef0 3a49 	vmov.f32	s7, s18
 8012208:	4620      	mov	r0, r4
 801220a:	eeb0 3a69 	vmov.f32	s6, s19
 801220e:	f7ff fe13 	bl	8011e38 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas18strokeDrawLineJoinEffffffffff>
 8012212:	e7cb      	b.n	80121ac <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff+0x8c>

08012214 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas6lineToENS_7CWRUtil2Q5ES3_>:
 8012214:	ee07 2a90 	vmov	s15, r2
 8012218:	ee07 1a10 	vmov	s14, r1
 801221c:	eef8 0ae7 	vcvt.f32.s32	s1, s15
 8012220:	eddf 7a04 	vldr	s15, [pc, #16]	@ 8012234 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas6lineToENS_7CWRUtil2Q5ES3_+0x20>
 8012224:	eeb8 0ac7 	vcvt.f32.s32	s0, s14
 8012228:	ee60 0aa7 	vmul.f32	s1, s1, s15
 801222c:	ee20 0a27 	vmul.f32	s0, s0, s15
 8012230:	f7ff bf76 	b.w	8012120 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff>
 8012234:	3d000000 	.word	0x3d000000

08012238 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawDoubleLineCapEv>:
 8012238:	b538      	push	{r3, r4, r5, lr}
 801223a:	ed2d 8b02 	vpush	{d8}
 801223e:	f890 5079 	ldrb.w	r5, [r0, #121]	@ 0x79
 8012242:	4604      	mov	r4, r0
 8012244:	b31d      	cbz	r5, 801228e <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawDoubleLineCapEv+0x56>
 8012246:	edd0 7a1f 	vldr	s15, [r0, #124]	@ 0x7c
 801224a:	ed90 8a23 	vldr	s16, [r0, #140]	@ 0x8c
 801224e:	ed90 0a22 	vldr	s0, [r0, #136]	@ 0x88
 8012252:	ee78 8a67 	vsub.f32	s17, s16, s15
 8012256:	ee38 8a27 	vadd.f32	s16, s16, s15
 801225a:	eef0 0a68 	vmov.f32	s1, s17
 801225e:	f7ff fd07 	bl	8011c70 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19moveToWithTransformEff>
 8012262:	ed94 1a22 	vldr	s2, [r4, #136]	@ 0x88
 8012266:	eef0 1a48 	vmov.f32	s3, s16
 801226a:	4620      	mov	r0, r4
 801226c:	eeb0 0a41 	vmov.f32	s0, s2
 8012270:	eef0 0a68 	vmov.f32	s1, s17
 8012274:	f7ff fe6c 	bl	8011f50 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff>
 8012278:	ed94 1a22 	vldr	s2, [r4, #136]	@ 0x88
 801227c:	eef0 1a68 	vmov.f32	s3, s17
 8012280:	4620      	mov	r0, r4
 8012282:	eef0 0a48 	vmov.f32	s1, s16
 8012286:	eeb0 0a41 	vmov.f32	s0, s2
 801228a:	f7ff fe61 	bl	8011f50 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff>
 801228e:	4628      	mov	r0, r5
 8012290:	ecbd 8b02 	vpop	{d8}
 8012294:	bd38      	pop	{r3, r4, r5, pc}

08012296 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas11strokeCloseEff>:
 8012296:	b510      	push	{r4, lr}
 8012298:	ed2d 8b02 	vpush	{d8}
 801229c:	4604      	mov	r4, r0
 801229e:	eeb0 8a40 	vmov.f32	s16, s0
 80122a2:	eef0 8a60 	vmov.f32	s17, s1
 80122a6:	f7ff ffc7 	bl	8012238 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawDoubleLineCapEv>
 80122aa:	b9d0      	cbnz	r0, 80122e2 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas11strokeCloseEff+0x4c>
 80122ac:	4620      	mov	r0, r4
 80122ae:	edd4 4a27 	vldr	s9, [r4, #156]	@ 0x9c
 80122b2:	ed94 4a26 	vldr	s8, [r4, #152]	@ 0x98
 80122b6:	eef0 0a68 	vmov.f32	s1, s17
 80122ba:	edd4 3a25 	vldr	s7, [r4, #148]	@ 0x94
 80122be:	eeb0 0a48 	vmov.f32	s0, s16
 80122c2:	ed94 3a24 	vldr	s6, [r4, #144]	@ 0x90
 80122c6:	edd4 2a2b 	vldr	s5, [r4, #172]	@ 0xac
 80122ca:	ed94 2a2a 	vldr	s4, [r4, #168]	@ 0xa8
 80122ce:	edd4 1a29 	vldr	s3, [r4, #164]	@ 0xa4
 80122d2:	ed94 1a28 	vldr	s2, [r4, #160]	@ 0xa0
 80122d6:	f7ff fdaf 	bl	8011e38 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas18strokeDrawLineJoinEffffffffff>
 80122da:	2001      	movs	r0, #1
 80122dc:	ecbd 8b02 	vpop	{d8}
 80122e0:	bd10      	pop	{r4, pc}
 80122e2:	2000      	movs	r0, #0
 80122e4:	e7fa      	b.n	80122dc <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas11strokeCloseEff+0x46>

080122e6 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas16drawFinalLineCapEv>:
 80122e6:	edd0 1a25 	vldr	s3, [r0, #148]	@ 0x94
 80122ea:	ed90 1a24 	vldr	s2, [r0, #144]	@ 0x90
 80122ee:	edd0 0a2b 	vldr	s1, [r0, #172]	@ 0xac
 80122f2:	ed90 0a2a 	vldr	s0, [r0, #168]	@ 0xa8
 80122f6:	f7ff be2b 	b.w	8011f50 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff>
	...

080122fc <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE>:
 80122fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012300:	b089      	sub	sp, #36	@ 0x24
 8012302:	461c      	mov	r4, r3
 8012304:	4682      	mov	sl, r0
 8012306:	4615      	mov	r5, r2
 8012308:	f89d 3050 	ldrb.w	r3, [sp, #80]	@ 0x50
 801230c:	f10d 0820 	add.w	r8, sp, #32
 8012310:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8012312:	9304      	str	r3, [sp, #16]
 8012314:	2300      	movs	r3, #0
 8012316:	9105      	str	r1, [sp, #20]
 8012318:	9306      	str	r3, [sp, #24]
 801231a:	f848 3d04 	str.w	r3, [r8, #-4]!
 801231e:	9b04      	ldr	r3, [sp, #16]
 8012320:	e9dd 9712 	ldrd	r9, r7, [sp, #72]	@ 0x48
 8012324:	f886 307a 	strb.w	r3, [r6, #122]	@ 0x7a
 8012328:	9b05      	ldr	r3, [sp, #20]
 801232a:	429d      	cmp	r5, r3
 801232c:	d96d      	bls.n	801240a <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE+0x10e>
 801232e:	3d01      	subs	r5, #1
 8012330:	f819 3005 	ldrb.w	r3, [r9, r5]
 8012334:	2b06      	cmp	r3, #6
 8012336:	d8f7      	bhi.n	8012328 <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE+0x2c>
 8012338:	a201      	add	r2, pc, #4	@ (adr r2, 8012340 <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE+0x44>)
 801233a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801233e:	bf00      	nop
 8012340:	0801235f 	.word	0x0801235f
 8012344:	08012329 	.word	0x08012329
 8012348:	0801235d 	.word	0x0801235d
 801234c:	08012381 	.word	0x08012381
 8012350:	08012381 	.word	0x08012381
 8012354:	08012385 	.word	0x08012385
 8012358:	080123c5 	.word	0x080123c5
 801235c:	3c02      	subs	r4, #2
 801235e:	4650      	mov	r0, sl
 8012360:	9400      	str	r4, [sp, #0]
 8012362:	462b      	mov	r3, r5
 8012364:	4642      	mov	r2, r8
 8012366:	a906      	add	r1, sp, #24
 8012368:	e9cd 9701 	strd	r9, r7, [sp, #4]
 801236c:	f7ff fcae 	bl	8011ccc <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf>
 8012370:	eddd 0a07 	vldr	s1, [sp, #28]
 8012374:	ed9d 0a06 	vldr	s0, [sp, #24]
 8012378:	4630      	mov	r0, r6
 801237a:	f7ff fed1 	bl	8012120 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff>
 801237e:	e7d3      	b.n	8012328 <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE+0x2c>
 8012380:	3c01      	subs	r4, #1
 8012382:	e7ec      	b.n	801235e <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE+0x62>
 8012384:	f1a4 0b04 	sub.w	fp, r4, #4
 8012388:	3c02      	subs	r4, #2
 801238a:	4650      	mov	r0, sl
 801238c:	462b      	mov	r3, r5
 801238e:	eb07 0484 	add.w	r4, r7, r4, lsl #2
 8012392:	f8cd b000 	str.w	fp, [sp]
 8012396:	4642      	mov	r2, r8
 8012398:	a906      	add	r1, sp, #24
 801239a:	e9cd 9701 	strd	r9, r7, [sp, #4]
 801239e:	f7ff fc95 	bl	8011ccc <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf>
 80123a2:	eddd 2a07 	vldr	s5, [sp, #28]
 80123a6:	ed9d 2a06 	vldr	s4, [sp, #24]
 80123aa:	4630      	mov	r0, r6
 80123ac:	ed54 1a01 	vldr	s3, [r4, #-4]
 80123b0:	ed14 1a02 	vldr	s2, [r4, #-8]
 80123b4:	edd4 0a01 	vldr	s1, [r4, #4]
 80123b8:	ed94 0a00 	vldr	s0, [r4]
 80123bc:	f7ff fc1a 	bl	8011bf4 <_ZN8touchgfx6Canvas17quadraticBezierToEffffff>
 80123c0:	465c      	mov	r4, fp
 80123c2:	e7b1      	b.n	8012328 <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE+0x2c>
 80123c4:	f1a4 0b06 	sub.w	fp, r4, #6
 80123c8:	3c02      	subs	r4, #2
 80123ca:	4650      	mov	r0, sl
 80123cc:	462b      	mov	r3, r5
 80123ce:	eb07 0484 	add.w	r4, r7, r4, lsl #2
 80123d2:	f8cd b000 	str.w	fp, [sp]
 80123d6:	4642      	mov	r2, r8
 80123d8:	a906      	add	r1, sp, #24
 80123da:	e9cd 9701 	strd	r9, r7, [sp, #4]
 80123de:	f7ff fc75 	bl	8011ccc <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf>
 80123e2:	eddd 3a07 	vldr	s7, [sp, #28]
 80123e6:	ed9d 3a06 	vldr	s6, [sp, #24]
 80123ea:	4630      	mov	r0, r6
 80123ec:	ed54 2a03 	vldr	s5, [r4, #-12]
 80123f0:	ed14 2a04 	vldr	s4, [r4, #-16]
 80123f4:	ed54 1a01 	vldr	s3, [r4, #-4]
 80123f8:	ed14 1a02 	vldr	s2, [r4, #-8]
 80123fc:	edd4 0a01 	vldr	s1, [r4, #4]
 8012400:	ed94 0a00 	vldr	s0, [r4]
 8012404:	f7ff fc15 	bl	8011c32 <_ZN8touchgfx6Canvas13cubicBezierToEffffffff>
 8012408:	e7da      	b.n	80123c0 <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE+0xc4>
 801240a:	9b04      	ldr	r3, [sp, #16]
 801240c:	b113      	cbz	r3, 8012414 <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE+0x118>
 801240e:	4630      	mov	r0, r6
 8012410:	f7ff ff69 	bl	80122e6 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas16drawFinalLineCapEv>
 8012414:	b009      	add	sp, #36	@ 0x24
 8012416:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801241a:	bf00      	nop

0801241c <_ZN8touchgfx6Canvas6lineToIfEEvT_S2_>:
 801241c:	eef0 7a60 	vmov.f32	s15, s1
 8012420:	6803      	ldr	r3, [r0, #0]
 8012422:	689b      	ldr	r3, [r3, #8]
 8012424:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 8012428:	ee17 2a90 	vmov	r2, s15
 801242c:	eef0 7a40 	vmov.f32	s15, s0
 8012430:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 8012434:	ee17 1a90 	vmov	r1, s15
 8012438:	4718      	bx	r3
	...

0801243c <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvasD1Ev>:
 801243c:	4b04      	ldr	r3, [pc, #16]	@ (8012450 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvasD1Ev+0x14>)
 801243e:	b510      	push	{r4, lr}
 8012440:	4604      	mov	r4, r0
 8012442:	f840 3b14 	str.w	r3, [r0], #20
 8012446:	f002 fd27 	bl	8014e98 <_ZN8touchgfx7OutlineD1Ev>
 801244a:	4620      	mov	r0, r4
 801244c:	bd10      	pop	{r4, pc}
 801244e:	bf00      	nop
 8012450:	0802ca4c 	.word	0x0802ca4c

08012454 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE>:
 8012454:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012458:	ed2d 8b04 	vpush	{d8-d9}
 801245c:	edd0 7a0c 	vldr	s15, [r0, #48]	@ 0x30
 8012460:	b0b5      	sub	sp, #212	@ 0xd4
 8012462:	4605      	mov	r5, r0
 8012464:	468b      	mov	fp, r1
 8012466:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801246a:	9206      	str	r2, [sp, #24]
 801246c:	461e      	mov	r6, r3
 801246e:	2400      	movs	r4, #0
 8012470:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012474:	f240 814f 	bls.w	8012716 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x2c2>
 8012478:	23ff      	movs	r3, #255	@ 0xff
 801247a:	1d02      	adds	r2, r0, #4
 801247c:	ed9f 9aa7 	vldr	s18, [pc, #668]	@ 801271c <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x2c8>
 8012480:	f04f 0800 	mov.w	r8, #0
 8012484:	9300      	str	r3, [sp, #0]
 8012486:	af08      	add	r7, sp, #32
 8012488:	6981      	ldr	r1, [r0, #24]
 801248a:	a808      	add	r0, sp, #32
 801248c:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 801248e:	eef0 9a49 	vmov.f32	s19, s18
 8012492:	f013 f84f 	bl	8025534 <_ZN8touchgfx6CanvasC1EPKNS_15AbstractPainterERKNS_4RectES6_h>
 8012496:	edd5 7a0c 	vldr	s15, [r5, #48]	@ 0x30
 801249a:	4ba1      	ldr	r3, [pc, #644]	@ (8012720 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x2cc>)
 801249c:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80124a0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80124a4:	2201      	movs	r2, #1
 80124a6:	9308      	str	r3, [sp, #32]
 80124a8:	f105 0334 	add.w	r3, r5, #52	@ 0x34
 80124ac:	edd5 6a08 	vldr	s13, [r5, #32]
 80124b0:	eeb0 8a49 	vmov.f32	s16, s18
 80124b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80124b8:	9325      	str	r3, [sp, #148]	@ 0x94
 80124ba:	f04f 0300 	mov.w	r3, #0
 80124be:	f88d 2099 	strb.w	r2, [sp, #153]	@ 0x99
 80124c2:	7f6a      	ldrb	r2, [r5, #29]
 80124c4:	eef0 8a49 	vmov.f32	s17, s18
 80124c8:	bf48      	it	mi
 80124ca:	eef1 7a67 	vnegmi.f32	s15, s15
 80124ce:	f88d 3098 	strb.w	r3, [sp, #152]	@ 0x98
 80124d2:	f88d 309a 	strb.w	r3, [sp, #154]	@ 0x9a
 80124d6:	46c1      	mov	r9, r8
 80124d8:	f88d 3064 	strb.w	r3, [sp, #100]	@ 0x64
 80124dc:	f04f 0a01 	mov.w	sl, #1
 80124e0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80124e4:	7fab      	ldrb	r3, [r5, #30]
 80124e6:	942a      	str	r4, [sp, #168]	@ 0xa8
 80124e8:	435a      	muls	r2, r3
 80124ea:	f895 0024 	ldrb.w	r0, [r5, #36]	@ 0x24
 80124ee:	ee26 7aa7 	vmul.f32	s14, s13, s15
 80124f2:	edcd 7a27 	vstr	s15, [sp, #156]	@ 0x9c
 80124f6:	1c53      	adds	r3, r2, #1
 80124f8:	942b      	str	r4, [sp, #172]	@ 0xac
 80124fa:	942c      	str	r4, [sp, #176]	@ 0xb0
 80124fc:	ee27 7a26 	vmul.f32	s14, s14, s13
 8012500:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8012504:	942d      	str	r4, [sp, #180]	@ 0xb4
 8012506:	942e      	str	r4, [sp, #184]	@ 0xb8
 8012508:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801250c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8012510:	942f      	str	r4, [sp, #188]	@ 0xbc
 8012512:	9430      	str	r4, [sp, #192]	@ 0xc0
 8012514:	9431      	str	r4, [sp, #196]	@ 0xc4
 8012516:	9432      	str	r4, [sp, #200]	@ 0xc8
 8012518:	9433      	str	r4, [sp, #204]	@ 0xcc
 801251a:	4644      	mov	r4, r8
 801251c:	f895 1025 	ldrb.w	r1, [r5, #37]	@ 0x25
 8012520:	edcd 7a28 	vstr	s15, [sp, #160]	@ 0xa0
 8012524:	f88d 00a4 	strb.w	r0, [sp, #164]	@ 0xa4
 8012528:	f88d 10a5 	strb.w	r1, [sp, #165]	@ 0xa5
 801252c:	f88d 30a6 	strb.w	r3, [sp, #166]	@ 0xa6
 8012530:	9b06      	ldr	r3, [sp, #24]
 8012532:	454b      	cmp	r3, r9
 8012534:	f000 80cc 	beq.w	80126d0 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x27c>
 8012538:	f109 0301 	add.w	r3, r9, #1
 801253c:	9305      	str	r3, [sp, #20]
 801253e:	f81b 3009 	ldrb.w	r3, [fp, r9]
 8012542:	2b06      	cmp	r3, #6
 8012544:	d839      	bhi.n	80125ba <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x166>
 8012546:	e8df f003 	tbb	[pc, r3]
 801254a:	3b04      	.short	0x3b04
 801254c:	817c6f60 	.word	0x817c6f60
 8012550:	a0          	.byte	0xa0
 8012551:	00          	.byte	0x00
 8012552:	45c1      	cmp	r9, r8
 8012554:	d92b      	bls.n	80125ae <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x15a>
 8012556:	eef0 0a49 	vmov.f32	s1, s18
 801255a:	4638      	mov	r0, r7
 801255c:	eeb0 0a69 	vmov.f32	s0, s19
 8012560:	f7ff fdde 	bl	8012120 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff>
 8012564:	4638      	mov	r0, r7
 8012566:	f7ff fe67 	bl	8012238 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawDoubleLineCapEv>
 801256a:	4681      	mov	r9, r0
 801256c:	b9f8      	cbnz	r0, 80125ae <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x15a>
 801256e:	eef0 0a49 	vmov.f32	s1, s18
 8012572:	4638      	mov	r0, r7
 8012574:	eeb0 0a69 	vmov.f32	s0, s19
 8012578:	f7ff fe8d 	bl	8012296 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas11strokeCloseEff>
 801257c:	4628      	mov	r0, r5
 801257e:	4623      	mov	r3, r4
 8012580:	9a05      	ldr	r2, [sp, #20]
 8012582:	4641      	mov	r1, r8
 8012584:	edcd 9a2a 	vstr	s19, [sp, #168]	@ 0xa8
 8012588:	ed8d 9a2b 	vstr	s18, [sp, #172]	@ 0xac
 801258c:	f88d a098 	strb.w	sl, [sp, #152]	@ 0x98
 8012590:	f88d a099 	strb.w	sl, [sp, #153]	@ 0x99
 8012594:	e9cd 9702 	strd	r9, r7, [sp, #8]
 8012598:	e9cd b600 	strd	fp, r6, [sp]
 801259c:	f7ff feae 	bl	80122fc <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE>
 80125a0:	eef0 0a49 	vmov.f32	s1, s18
 80125a4:	eeb0 0a69 	vmov.f32	s0, s19
 80125a8:	4638      	mov	r0, r7
 80125aa:	f7ff fe74 	bl	8012296 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas11strokeCloseEff>
 80125ae:	eeb0 8a49 	vmov.f32	s16, s18
 80125b2:	f8dd 8014 	ldr.w	r8, [sp, #20]
 80125b6:	eef0 8a69 	vmov.f32	s17, s19
 80125ba:	f8dd 9014 	ldr.w	r9, [sp, #20]
 80125be:	e7b7      	b.n	8012530 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0xdc>
 80125c0:	45c1      	cmp	r9, r8
 80125c2:	d90d      	bls.n	80125e0 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x18c>
 80125c4:	4638      	mov	r0, r7
 80125c6:	f7ff fe37 	bl	8012238 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawDoubleLineCapEv>
 80125ca:	b948      	cbnz	r0, 80125e0 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x18c>
 80125cc:	4623      	mov	r3, r4
 80125ce:	464a      	mov	r2, r9
 80125d0:	4641      	mov	r1, r8
 80125d2:	4628      	mov	r0, r5
 80125d4:	e9cd a702 	strd	sl, r7, [sp, #8]
 80125d8:	e9cd b600 	strd	fp, r6, [sp]
 80125dc:	f7ff fe8e 	bl	80122fc <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE>
 80125e0:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 80125e4:	f88d a098 	strb.w	sl, [sp, #152]	@ 0x98
 80125e8:	f88d a099 	strb.w	sl, [sp, #153]	@ 0x99
 80125ec:	3402      	adds	r4, #2
 80125ee:	edd3 8a00 	vldr	s17, [r3]
 80125f2:	46c8      	mov	r8, r9
 80125f4:	ed93 8a01 	vldr	s16, [r3, #4]
 80125f8:	edcd 8a2a 	vstr	s17, [sp, #168]	@ 0xa8
 80125fc:	eef0 9a68 	vmov.f32	s19, s17
 8012600:	ed8d 8a2b 	vstr	s16, [sp, #172]	@ 0xac
 8012604:	eeb0 9a48 	vmov.f32	s18, s16
 8012608:	e7d7      	b.n	80125ba <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x166>
 801260a:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 801260e:	4638      	mov	r0, r7
 8012610:	3402      	adds	r4, #2
 8012612:	edd3 8a00 	vldr	s17, [r3]
 8012616:	ed93 8a01 	vldr	s16, [r3, #4]
 801261a:	eeb0 0a68 	vmov.f32	s0, s17
 801261e:	eef0 0a48 	vmov.f32	s1, s16
 8012622:	f7ff fd7d 	bl	8012120 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff>
 8012626:	e7c8      	b.n	80125ba <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x166>
 8012628:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 801262c:	edd3 8a00 	vldr	s17, [r3]
 8012630:	eef0 0a48 	vmov.f32	s1, s16
 8012634:	4638      	mov	r0, r7
 8012636:	eeb0 0a68 	vmov.f32	s0, s17
 801263a:	3401      	adds	r4, #1
 801263c:	f7ff fd70 	bl	8012120 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff>
 8012640:	e7bb      	b.n	80125ba <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x166>
 8012642:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8012646:	ed93 8a00 	vldr	s16, [r3]
 801264a:	e7f1      	b.n	8012630 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x1dc>
 801264c:	00a3      	lsls	r3, r4, #2
 801264e:	eef0 0a48 	vmov.f32	s1, s16
 8012652:	eeb0 0a68 	vmov.f32	s0, s17
 8012656:	4638      	mov	r0, r7
 8012658:	f103 0208 	add.w	r2, r3, #8
 801265c:	f103 090c 	add.w	r9, r3, #12
 8012660:	4433      	add	r3, r6
 8012662:	3404      	adds	r4, #4
 8012664:	4432      	add	r2, r6
 8012666:	44b1      	add	r9, r6
 8012668:	edd3 1a01 	vldr	s3, [r3, #4]
 801266c:	ed92 2a00 	vldr	s4, [r2]
 8012670:	edd9 2a00 	vldr	s5, [r9]
 8012674:	ed93 1a00 	vldr	s2, [r3]
 8012678:	9207      	str	r2, [sp, #28]
 801267a:	f7ff fabb 	bl	8011bf4 <_ZN8touchgfx6Canvas17quadraticBezierToEffffff>
 801267e:	9a07      	ldr	r2, [sp, #28]
 8012680:	ed99 8a00 	vldr	s16, [r9]
 8012684:	edd2 8a00 	vldr	s17, [r2]
 8012688:	e797      	b.n	80125ba <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x166>
 801268a:	00a3      	lsls	r3, r4, #2
 801268c:	eef0 0a48 	vmov.f32	s1, s16
 8012690:	eeb0 0a68 	vmov.f32	s0, s17
 8012694:	4638      	mov	r0, r7
 8012696:	f103 0210 	add.w	r2, r3, #16
 801269a:	f103 0914 	add.w	r9, r3, #20
 801269e:	4433      	add	r3, r6
 80126a0:	3406      	adds	r4, #6
 80126a2:	4432      	add	r2, r6
 80126a4:	44b1      	add	r9, r6
 80126a6:	edd3 2a03 	vldr	s5, [r3, #12]
 80126aa:	ed92 3a00 	vldr	s6, [r2]
 80126ae:	edd9 3a00 	vldr	s7, [r9]
 80126b2:	ed93 2a02 	vldr	s4, [r3, #8]
 80126b6:	edd3 1a01 	vldr	s3, [r3, #4]
 80126ba:	ed93 1a00 	vldr	s2, [r3]
 80126be:	9207      	str	r2, [sp, #28]
 80126c0:	f7ff fab7 	bl	8011c32 <_ZN8touchgfx6Canvas13cubicBezierToEffffffff>
 80126c4:	9a07      	ldr	r2, [sp, #28]
 80126c6:	ed99 8a00 	vldr	s16, [r9]
 80126ca:	edd2 8a00 	vldr	s17, [r2]
 80126ce:	e774      	b.n	80125ba <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x166>
 80126d0:	9b06      	ldr	r3, [sp, #24]
 80126d2:	af08      	add	r7, sp, #32
 80126d4:	4543      	cmp	r3, r8
 80126d6:	d90f      	bls.n	80126f8 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x2a4>
 80126d8:	4638      	mov	r0, r7
 80126da:	f7ff fdad 	bl	8012238 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawDoubleLineCapEv>
 80126de:	b958      	cbnz	r0, 80126f8 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x2a4>
 80126e0:	2301      	movs	r3, #1
 80126e2:	9703      	str	r7, [sp, #12]
 80126e4:	f8cd b000 	str.w	fp, [sp]
 80126e8:	4641      	mov	r1, r8
 80126ea:	9a06      	ldr	r2, [sp, #24]
 80126ec:	4628      	mov	r0, r5
 80126ee:	e9cd 6301 	strd	r6, r3, [sp, #4]
 80126f2:	4623      	mov	r3, r4
 80126f4:	f7ff fe02 	bl	80122fc <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE>
 80126f8:	f89d 10a6 	ldrb.w	r1, [sp, #166]	@ 0xa6
 80126fc:	4638      	mov	r0, r7
 80126fe:	f012 ffad 	bl	802565c <_ZN8touchgfx6Canvas6renderEh>
 8012702:	4604      	mov	r4, r0
 8012704:	4638      	mov	r0, r7
 8012706:	f7ff fe99 	bl	801243c <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvasD1Ev>
 801270a:	4620      	mov	r0, r4
 801270c:	b035      	add	sp, #212	@ 0xd4
 801270e:	ecbd 8b04 	vpop	{d8-d9}
 8012712:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012716:	2401      	movs	r4, #1
 8012718:	e7f7      	b.n	801270a <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x2b6>
 801271a:	bf00      	nop
 801271c:	00000000 	.word	0x00000000
 8012720:	0802c060 	.word	0x0802c060

08012724 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvasD0Ev>:
 8012724:	b510      	push	{r4, lr}
 8012726:	4604      	mov	r4, r0
 8012728:	f7ff fe88 	bl	801243c <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvasD1Ev>
 801272c:	21b0      	movs	r1, #176	@ 0xb0
 801272e:	4620      	mov	r0, r4
 8012730:	f014 fa2d 	bl	8026b8e <_ZdlPvj>
 8012734:	4620      	mov	r0, r4
 8012736:	bd10      	pop	{r4, pc}

08012738 <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE>:
 8012738:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801273c:	4698      	mov	r8, r3
 801273e:	23ff      	movs	r3, #255	@ 0xff
 8012740:	4607      	mov	r7, r0
 8012742:	4689      	mov	r9, r1
 8012744:	4692      	mov	sl, r2
 8012746:	1d02      	adds	r2, r0, #4
 8012748:	f107 0534 	add.w	r5, r7, #52	@ 0x34
 801274c:	2400      	movs	r4, #0
 801274e:	44ca      	add	sl, r9
 8012750:	ed2d 8b06 	vpush	{d8-d10}
 8012754:	b0aa      	sub	sp, #168	@ 0xa8
 8012756:	ed9f 8a81 	vldr	s16, [pc, #516]	@ 801295c <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0x224>
 801275a:	9300      	str	r3, [sp, #0]
 801275c:	eef0 8a48 	vmov.f32	s17, s16
 8012760:	6981      	ldr	r1, [r0, #24]
 8012762:	a80d      	add	r0, sp, #52	@ 0x34
 8012764:	9b39      	ldr	r3, [sp, #228]	@ 0xe4
 8012766:	f012 fee5 	bl	8025534 <_ZN8touchgfx6CanvasC1EPKNS_15AbstractPainterERKNS_4RectES6_h>
 801276a:	7f3b      	ldrb	r3, [r7, #28]
 801276c:	eddf 0a7b 	vldr	s1, [pc, #492]	@ 801295c <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0x224>
 8012770:	4628      	mov	r0, r5
 8012772:	1e5a      	subs	r2, r3, #1
 8012774:	eeb0 0a60 	vmov.f32	s0, s1
 8012778:	4253      	negs	r3, r2
 801277a:	4153      	adcs	r3, r2
 801277c:	f88d 3078 	strb.w	r3, [sp, #120]	@ 0x78
 8012780:	f006 fb9f 	bl	8018ec2 <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 8012784:	eeb0 9a40 	vmov.f32	s18, s0
 8012788:	eef0 9a60 	vmov.f32	s19, s1
 801278c:	45ca      	cmp	sl, r9
 801278e:	f000 80cd 	beq.w	801292c <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0x1f4>
 8012792:	f819 3b01 	ldrb.w	r3, [r9], #1
 8012796:	2b06      	cmp	r3, #6
 8012798:	d8f8      	bhi.n	801278c <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0x54>
 801279a:	e8df f003 	tbb	[pc, r3]
 801279e:	0804      	.short	0x0804
 80127a0:	58533f2a 	.word	0x58533f2a
 80127a4:	8a          	.byte	0x8a
 80127a5:	00          	.byte	0x00
 80127a6:	a80d      	add	r0, sp, #52	@ 0x34
 80127a8:	f012 ff36 	bl	8025618 <_ZN8touchgfx6Canvas5closeEv>
 80127ac:	e7ee      	b.n	801278c <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0x54>
 80127ae:	eb08 0384 	add.w	r3, r8, r4, lsl #2
 80127b2:	4628      	mov	r0, r5
 80127b4:	ed93 8a01 	vldr	s16, [r3, #4]
 80127b8:	edd3 8a00 	vldr	s17, [r3]
 80127bc:	eef0 0a48 	vmov.f32	s1, s16
 80127c0:	eeb0 0a68 	vmov.f32	s0, s17
 80127c4:	f006 fb7d 	bl	8018ec2 <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 80127c8:	a80d      	add	r0, sp, #52	@ 0x34
 80127ca:	eef0 7a60 	vmov.f32	s15, s1
 80127ce:	eeb0 9a40 	vmov.f32	s18, s0
 80127d2:	eef0 9a60 	vmov.f32	s19, s1
 80127d6:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 80127da:	ee17 2a90 	vmov	r2, s15
 80127de:	eef0 7a40 	vmov.f32	s15, s0
 80127e2:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 80127e6:	ee17 1a90 	vmov	r1, s15
 80127ea:	f012 ffef 	bl	80257cc <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_>
 80127ee:	3402      	adds	r4, #2
 80127f0:	e7cc      	b.n	801278c <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0x54>
 80127f2:	eb08 0384 	add.w	r3, r8, r4, lsl #2
 80127f6:	4628      	mov	r0, r5
 80127f8:	edd3 8a00 	vldr	s17, [r3]
 80127fc:	ed93 8a01 	vldr	s16, [r3, #4]
 8012800:	eeb0 0a68 	vmov.f32	s0, s17
 8012804:	eef0 0a48 	vmov.f32	s1, s16
 8012808:	f006 fb5b 	bl	8018ec2 <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 801280c:	a80d      	add	r0, sp, #52	@ 0x34
 801280e:	eeb0 9a40 	vmov.f32	s18, s0
 8012812:	eef0 9a60 	vmov.f32	s19, s1
 8012816:	f7ff fe01 	bl	801241c <_ZN8touchgfx6Canvas6lineToIfEEvT_S2_>
 801281a:	e7e8      	b.n	80127ee <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0xb6>
 801281c:	eb08 0384 	add.w	r3, r8, r4, lsl #2
 8012820:	edd3 8a00 	vldr	s17, [r3]
 8012824:	eef0 0a48 	vmov.f32	s1, s16
 8012828:	4628      	mov	r0, r5
 801282a:	eeb0 0a68 	vmov.f32	s0, s17
 801282e:	3401      	adds	r4, #1
 8012830:	f006 fb47 	bl	8018ec2 <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 8012834:	a80d      	add	r0, sp, #52	@ 0x34
 8012836:	eef0 9a60 	vmov.f32	s19, s1
 801283a:	eeb0 9a40 	vmov.f32	s18, s0
 801283e:	f7ff fded 	bl	801241c <_ZN8touchgfx6Canvas6lineToIfEEvT_S2_>
 8012842:	e7a3      	b.n	801278c <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0x54>
 8012844:	eb08 0384 	add.w	r3, r8, r4, lsl #2
 8012848:	ed93 8a00 	vldr	s16, [r3]
 801284c:	e7ea      	b.n	8012824 <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0xec>
 801284e:	1ca3      	adds	r3, r4, #2
 8012850:	4628      	mov	r0, r5
 8012852:	3404      	adds	r4, #4
 8012854:	eb08 0383 	add.w	r3, r8, r3, lsl #2
 8012858:	ed53 0a01 	vldr	s1, [r3, #-4]
 801285c:	ed13 0a02 	vldr	s0, [r3, #-8]
 8012860:	edd3 8a00 	vldr	s17, [r3]
 8012864:	ed93 8a01 	vldr	s16, [r3, #4]
 8012868:	f006 fb2b 	bl	8018ec2 <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 801286c:	ed8d 0a09 	vstr	s0, [sp, #36]	@ 0x24
 8012870:	eeb0 0a68 	vmov.f32	s0, s17
 8012874:	edcd 0a0a 	vstr	s1, [sp, #40]	@ 0x28
 8012878:	eef0 0a48 	vmov.f32	s1, s16
 801287c:	4628      	mov	r0, r5
 801287e:	f006 fb20 	bl	8018ec2 <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 8012882:	eddd 1a0a 	vldr	s3, [sp, #40]	@ 0x28
 8012886:	eef0 2a60 	vmov.f32	s5, s1
 801288a:	ed9d 1a09 	vldr	s2, [sp, #36]	@ 0x24
 801288e:	eeb0 2a40 	vmov.f32	s4, s0
 8012892:	a80d      	add	r0, sp, #52	@ 0x34
 8012894:	eeb0 aa40 	vmov.f32	s20, s0
 8012898:	eef0 aa60 	vmov.f32	s21, s1
 801289c:	eeb0 0a49 	vmov.f32	s0, s18
 80128a0:	eef0 0a69 	vmov.f32	s1, s19
 80128a4:	f7ff f9a6 	bl	8011bf4 <_ZN8touchgfx6Canvas17quadraticBezierToEffffff>
 80128a8:	eef0 9a6a 	vmov.f32	s19, s21
 80128ac:	eeb0 9a4a 	vmov.f32	s18, s20
 80128b0:	e76c      	b.n	801278c <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0x54>
 80128b2:	1d26      	adds	r6, r4, #4
 80128b4:	4628      	mov	r0, r5
 80128b6:	3406      	adds	r4, #6
 80128b8:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 80128bc:	ed56 0a03 	vldr	s1, [r6, #-12]
 80128c0:	ed16 0a04 	vldr	s0, [r6, #-16]
 80128c4:	edd6 8a00 	vldr	s17, [r6]
 80128c8:	ed96 8a01 	vldr	s16, [r6, #4]
 80128cc:	f006 faf9 	bl	8018ec2 <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 80128d0:	ed8d 0a07 	vstr	s0, [sp, #28]
 80128d4:	4628      	mov	r0, r5
 80128d6:	ed16 0a02 	vldr	s0, [r6, #-8]
 80128da:	edcd 0a08 	vstr	s1, [sp, #32]
 80128de:	ed56 0a01 	vldr	s1, [r6, #-4]
 80128e2:	f006 faee 	bl	8018ec2 <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 80128e6:	ed8d 0a09 	vstr	s0, [sp, #36]	@ 0x24
 80128ea:	edcd 0a0a 	vstr	s1, [sp, #40]	@ 0x28
 80128ee:	eeb0 0a68 	vmov.f32	s0, s17
 80128f2:	eef0 0a48 	vmov.f32	s1, s16
 80128f6:	4628      	mov	r0, r5
 80128f8:	f006 fae3 	bl	8018ec2 <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 80128fc:	eddd 2a0a 	vldr	s5, [sp, #40]	@ 0x28
 8012900:	eeb0 3a40 	vmov.f32	s6, s0
 8012904:	ed9d 2a09 	vldr	s4, [sp, #36]	@ 0x24
 8012908:	eef0 3a60 	vmov.f32	s7, s1
 801290c:	eddd 1a08 	vldr	s3, [sp, #32]
 8012910:	eeb0 aa40 	vmov.f32	s20, s0
 8012914:	ed9d 1a07 	vldr	s2, [sp, #28]
 8012918:	eef0 aa60 	vmov.f32	s21, s1
 801291c:	a80d      	add	r0, sp, #52	@ 0x34
 801291e:	eef0 0a69 	vmov.f32	s1, s19
 8012922:	eeb0 0a49 	vmov.f32	s0, s18
 8012926:	f7ff f984 	bl	8011c32 <_ZN8touchgfx6Canvas13cubicBezierToEffffffff>
 801292a:	e7bd      	b.n	80128a8 <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0x170>
 801292c:	7f7b      	ldrb	r3, [r7, #29]
 801292e:	a80d      	add	r0, sp, #52	@ 0x34
 8012930:	7fb9      	ldrb	r1, [r7, #30]
 8012932:	4359      	muls	r1, r3
 8012934:	1c4b      	adds	r3, r1, #1
 8012936:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 801293a:	f3c1 2107 	ubfx	r1, r1, #8, #8
 801293e:	f012 fe8d 	bl	802565c <_ZN8touchgfx6Canvas6renderEh>
 8012942:	4b07      	ldr	r3, [pc, #28]	@ (8012960 <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0x228>)
 8012944:	4604      	mov	r4, r0
 8012946:	a812      	add	r0, sp, #72	@ 0x48
 8012948:	930d      	str	r3, [sp, #52]	@ 0x34
 801294a:	f002 faa5 	bl	8014e98 <_ZN8touchgfx7OutlineD1Ev>
 801294e:	4620      	mov	r0, r4
 8012950:	b02a      	add	sp, #168	@ 0xa8
 8012952:	ecbd 8b06 	vpop	{d8-d10}
 8012956:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801295a:	bf00      	nop
 801295c:	00000000 	.word	0x00000000
 8012960:	0802ca4c 	.word	0x0802ca4c

08012964 <_ZNK8touchgfx17CWRVectorRenderer12drawPathAreaEPKhmPKfmRKNS_4RectE>:
 8012964:	b410      	push	{r4}
 8012966:	7f04      	ldrb	r4, [r0, #28]
 8012968:	b11c      	cbz	r4, 8012972 <_ZNK8touchgfx17CWRVectorRenderer12drawPathAreaEPKhmPKfmRKNS_4RectE+0xe>
 801296a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801296e:	f7ff bee3 	b.w	8012738 <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE>
 8012972:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012976:	f7ff bd6d 	b.w	8012454 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE>

0801297a <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_>:
 801297a:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801297e:	4691      	mov	r9, r2
 8012980:	4602      	mov	r2, r0
 8012982:	4606      	mov	r6, r0
 8012984:	4688      	mov	r8, r1
 8012986:	f852 0f26 	ldr.w	r0, [r2, #38]!
 801298a:	469a      	mov	sl, r3
 801298c:	ab02      	add	r3, sp, #8
 801298e:	af02      	add	r7, sp, #8
 8012990:	6851      	ldr	r1, [r2, #4]
 8012992:	c303      	stmia	r3!, {r0, r1}
 8012994:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 8012998:	2b00      	cmp	r3, #0
 801299a:	dd2f      	ble.n	80129fc <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0x82>
 801299c:	f9bd 400e 	ldrsh.w	r4, [sp, #14]
 80129a0:	2c00      	cmp	r4, #0
 80129a2:	dd2b      	ble.n	80129fc <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0x82>
 80129a4:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80129a8:	441c      	add	r4, r3
 80129aa:	b2a4      	uxth	r4, r4
 80129ac:	b225      	sxth	r5, r4
 80129ae:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 80129b2:	42ab      	cmp	r3, r5
 80129b4:	da22      	bge.n	80129fc <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0x82>
 80129b6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80129b8:	464a      	mov	r2, r9
 80129ba:	9701      	str	r7, [sp, #4]
 80129bc:	4641      	mov	r1, r8
 80129be:	9300      	str	r3, [sp, #0]
 80129c0:	4630      	mov	r0, r6
 80129c2:	4653      	mov	r3, sl
 80129c4:	f7ff ffce 	bl	8012964 <_ZNK8touchgfx17CWRVectorRenderer12drawPathAreaEPKhmPKfmRKNS_4RectE>
 80129c8:	b940      	cbnz	r0, 80129dc <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0x62>
 80129ca:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 80129ce:	2b01      	cmp	r3, #1
 80129d0:	d004      	beq.n	80129dc <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0x62>
 80129d2:	3301      	adds	r3, #1
 80129d4:	105b      	asrs	r3, r3, #1
 80129d6:	f8ad 300e 	strh.w	r3, [sp, #14]
 80129da:	e7ec      	b.n	80129b6 <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0x3c>
 80129dc:	f8bd 200e 	ldrh.w	r2, [sp, #14]
 80129e0:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80129e4:	4413      	add	r3, r2
 80129e6:	b29b      	uxth	r3, r3
 80129e8:	441a      	add	r2, r3
 80129ea:	f8ad 300a 	strh.w	r3, [sp, #10]
 80129ee:	b212      	sxth	r2, r2
 80129f0:	4295      	cmp	r5, r2
 80129f2:	dadc      	bge.n	80129ae <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0x34>
 80129f4:	1ae3      	subs	r3, r4, r3
 80129f6:	f8ad 300e 	strh.w	r3, [sp, #14]
 80129fa:	e7d8      	b.n	80129ae <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0x34>
 80129fc:	b004      	add	sp, #16
 80129fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08012a02 <_ZN8touchgfx13PainterRGB8888setColorENS_9colortypeE>:
 8012a02:	0c0b      	lsrs	r3, r1, #16
 8012a04:	60c1      	str	r1, [r0, #12]
 8012a06:	7481      	strb	r1, [r0, #18]
 8012a08:	7403      	strb	r3, [r0, #16]
 8012a0a:	0a0b      	lsrs	r3, r1, #8
 8012a0c:	7443      	strb	r3, [r0, #17]
 8012a0e:	4770      	bx	lr

08012a10 <_ZThn8_N8touchgfx13PainterRGB8888setColorENS_9colortypeE>:
 8012a10:	f1a0 0008 	sub.w	r0, r0, #8
 8012a14:	e7f5      	b.n	8012a02 <_ZN8touchgfx13PainterRGB8888setColorENS_9colortypeE>
	...

08012a18 <_ZNK8touchgfx13PainterRGB88818getRenderingMethodEv>:
 8012a18:	b508      	push	{r3, lr}
 8012a1a:	4b05      	ldr	r3, [pc, #20]	@ (8012a30 <_ZNK8touchgfx13PainterRGB88818getRenderingMethodEv+0x18>)
 8012a1c:	6818      	ldr	r0, [r3, #0]
 8012a1e:	6803      	ldr	r3, [r0, #0]
 8012a20:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8012a24:	4798      	blx	r3
 8012a26:	1e43      	subs	r3, r0, #1
 8012a28:	4258      	negs	r0, r3
 8012a2a:	4158      	adcs	r0, r3
 8012a2c:	bd08      	pop	{r3, pc}
 8012a2e:	bf00      	nop
 8012a30:	24028e20 	.word	0x24028e20

08012a34 <_ZN8touchgfx13PainterRGB888D1Ev>:
 8012a34:	4770      	bx	lr

08012a36 <_ZThn8_N8touchgfx13PainterRGB888D1Ev>:
 8012a36:	3808      	subs	r0, #8
 8012a38:	4770      	bx	lr

08012a3a <_ZNK8touchgfx13PainterRGB8885paintEPhssssh>:
 8012a3a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8012a3e:	b410      	push	{r4}
 8012a40:	188c      	adds	r4, r1, r2
 8012a42:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8012a46:	68c2      	ldr	r2, [r0, #12]
 8012a48:	f9bd 1008 	ldrsh.w	r1, [sp, #8]
 8012a4c:	4620      	mov	r0, r4
 8012a4e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012a52:	f7f0 ba2b 	b.w	8002eac <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh>

08012a56 <_ZNK8touchgfx13PainterRGB8888tearDownEv>:
 8012a56:	f7f0 ba05 	b.w	8002e64 <_ZN8touchgfx5paint8tearDownEv>

08012a5a <_ZN8touchgfx13PainterRGB888D0Ev>:
 8012a5a:	b510      	push	{r4, lr}
 8012a5c:	4604      	mov	r4, r0
 8012a5e:	2114      	movs	r1, #20
 8012a60:	f014 f895 	bl	8026b8e <_ZdlPvj>
 8012a64:	4620      	mov	r0, r4
 8012a66:	bd10      	pop	{r4, pc}

08012a68 <_ZThn8_N8touchgfx13PainterRGB888D0Ev>:
 8012a68:	f1a0 0008 	sub.w	r0, r0, #8
 8012a6c:	e7f5      	b.n	8012a5a <_ZN8touchgfx13PainterRGB888D0Ev>
	...

08012a70 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh>:
 8012a70:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8012a74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012a78:	4411      	add	r1, r2
 8012a7a:	7c42      	ldrb	r2, [r0, #17]
 8012a7c:	f9bd 4020 	ldrsh.w	r4, [sp, #32]
 8012a80:	f9bd 6024 	ldrsh.w	r6, [sp, #36]	@ 0x24
 8012a84:	f89d 5028 	ldrb.w	r5, [sp, #40]	@ 0x28
 8012a88:	2a00      	cmp	r2, #0
 8012a8a:	f000 8084 	beq.w	8012b96 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x126>
 8012a8e:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 8012a92:	ed90 7a08 	vldr	s14, [r0, #32]
 8012a96:	42a2      	cmp	r2, r4
 8012a98:	68c3      	ldr	r3, [r0, #12]
 8012a9a:	db20      	blt.n	8012ade <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x6e>
 8012a9c:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8012aa0:	f640 72fc 	movw	r2, #4092	@ 0xffc
 8012aa4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012aa8:	bfc8      	it	gt
 8012aaa:	2200      	movgt	r2, #0
 8012aac:	589a      	ldr	r2, [r3, r2]
 8012aae:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8012ab2:	7c03      	ldrb	r3, [r0, #16]
 8012ab4:	fa5f fc82 	uxtb.w	ip, r2
 8012ab8:	f3c2 2707 	ubfx	r7, r2, #8, #8
 8012abc:	f3c2 4407 	ubfx	r4, r2, #16, #8
 8012ac0:	440e      	add	r6, r1
 8012ac2:	b36b      	cbz	r3, 8012b20 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0xb0>
 8012ac4:	2dff      	cmp	r5, #255	@ 0xff
 8012ac6:	d12b      	bne.n	8012b20 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0xb0>
 8012ac8:	42b1      	cmp	r1, r6
 8012aca:	f080 8204 	bcs.w	8012ed6 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x466>
 8012ace:	f881 c000 	strb.w	ip, [r1]
 8012ad2:	3103      	adds	r1, #3
 8012ad4:	f801 7c02 	strb.w	r7, [r1, #-2]
 8012ad8:	f801 4c01 	strb.w	r4, [r1, #-1]
 8012adc:	e7f4      	b.n	8012ac8 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x58>
 8012ade:	f9b0 7008 	ldrsh.w	r7, [r0, #8]
 8012ae2:	42a7      	cmp	r7, r4
 8012ae4:	dc08      	bgt.n	8012af8 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x88>
 8012ae6:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8012aea:	f640 72fc 	movw	r2, #4092	@ 0xffc
 8012aee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012af2:	bfd8      	it	le
 8012af4:	2200      	movle	r2, #0
 8012af6:	e7d9      	b.n	8012aac <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x3c>
 8012af8:	1aa2      	subs	r2, r4, r2
 8012afa:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8012afe:	ee07 2a90 	vmov	s15, r2
 8012b02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012b06:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012b0a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8012b0e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8012b12:	ee17 2a90 	vmov	r2, s15
 8012b16:	bfd8      	it	le
 8012b18:	f202 32ff 	addwle	r2, r2, #1023	@ 0x3ff
 8012b1c:	0092      	lsls	r2, r2, #2
 8012b1e:	e7c5      	b.n	8012aac <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x3c>
 8012b20:	0e12      	lsrs	r2, r2, #24
 8012b22:	4355      	muls	r5, r2
 8012b24:	1c6a      	adds	r2, r5, #1
 8012b26:	eb02 2525 	add.w	r5, r2, r5, asr #8
 8012b2a:	122d      	asrs	r5, r5, #8
 8012b2c:	43e8      	mvns	r0, r5
 8012b2e:	b2ad      	uxth	r5, r5
 8012b30:	fb1c fc05 	smulbb	ip, ip, r5
 8012b34:	b2c0      	uxtb	r0, r0
 8012b36:	fb17 f705 	smulbb	r7, r7, r5
 8012b3a:	fb14 f505 	smulbb	r5, r4, r5
 8012b3e:	fa1f fc8c 	uxth.w	ip, ip
 8012b42:	b2bf      	uxth	r7, r7
 8012b44:	b2ad      	uxth	r5, r5
 8012b46:	428e      	cmp	r6, r1
 8012b48:	f101 0303 	add.w	r3, r1, #3
 8012b4c:	f240 81c3 	bls.w	8012ed6 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x466>
 8012b50:	f813 2c03 	ldrb.w	r2, [r3, #-3]
 8012b54:	fb02 c200 	mla	r2, r2, r0, ip
 8012b58:	b292      	uxth	r2, r2
 8012b5a:	1c51      	adds	r1, r2, #1
 8012b5c:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8012b60:	1212      	asrs	r2, r2, #8
 8012b62:	f803 2c03 	strb.w	r2, [r3, #-3]
 8012b66:	f813 2c02 	ldrb.w	r2, [r3, #-2]
 8012b6a:	fb02 7200 	mla	r2, r2, r0, r7
 8012b6e:	b292      	uxth	r2, r2
 8012b70:	1c51      	adds	r1, r2, #1
 8012b72:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8012b76:	1212      	asrs	r2, r2, #8
 8012b78:	f803 2c02 	strb.w	r2, [r3, #-2]
 8012b7c:	f813 2c01 	ldrb.w	r2, [r3, #-1]
 8012b80:	fb02 5200 	mla	r2, r2, r0, r5
 8012b84:	b292      	uxth	r2, r2
 8012b86:	1c51      	adds	r1, r2, #1
 8012b88:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8012b8c:	4619      	mov	r1, r3
 8012b8e:	1212      	asrs	r2, r2, #8
 8012b90:	f803 2c01 	strb.w	r2, [r3, #-1]
 8012b94:	e7d7      	b.n	8012b46 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0xd6>
 8012b96:	7c82      	ldrb	r2, [r0, #18]
 8012b98:	2a00      	cmp	r2, #0
 8012b9a:	d047      	beq.n	8012c2c <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x1bc>
 8012b9c:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 8012ba0:	ee07 2a10 	vmov	s14, r2
 8012ba4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8012ba8:	ee07 3a90 	vmov	s15, r3
 8012bac:	461a      	mov	r2, r3
 8012bae:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8012bb2:	eef4 6ac7 	vcmpe.f32	s13, s14
 8012bb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012bba:	f200 808e 	bhi.w	8012cda <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x26a>
 8012bbe:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8012bc2:	f640 72fc 	movw	r2, #4092	@ 0xffc
 8012bc6:	68c7      	ldr	r7, [r0, #12]
 8012bc8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8012bcc:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8012bd0:	ee06 6a90 	vmov	s13, r6
 8012bd4:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8012bd8:	eef4 7ae6 	vcmpe.f32	s15, s13
 8012bdc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012be0:	bf4a      	itet	mi
 8012be2:	eefd 7ae7 	vcvtmi.s32.f32	s15, s15
 8012be6:	4634      	movpl	r4, r6
 8012be8:	ee17 4a90 	vmovmi	r4, s15
 8012bec:	edd0 7a08 	vldr	s15, [r0, #32]
 8012bf0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8012bf4:	eb04 0e44 	add.w	lr, r4, r4, lsl #1
 8012bf8:	448e      	add	lr, r1
 8012bfa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012bfe:	bfc8      	it	gt
 8012c00:	2200      	movgt	r2, #0
 8012c02:	58bf      	ldr	r7, [r7, r2]
 8012c04:	7c02      	ldrb	r2, [r0, #16]
 8012c06:	fa5f f987 	uxtb.w	r9, r7
 8012c0a:	f3c7 2807 	ubfx	r8, r7, #8, #8
 8012c0e:	f3c7 4c07 	ubfx	ip, r7, #16, #8
 8012c12:	b31a      	cbz	r2, 8012c5c <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x1ec>
 8012c14:	2dff      	cmp	r5, #255	@ 0xff
 8012c16:	d121      	bne.n	8012c5c <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x1ec>
 8012c18:	4571      	cmp	r1, lr
 8012c1a:	d25d      	bcs.n	8012cd8 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x268>
 8012c1c:	f881 9000 	strb.w	r9, [r1]
 8012c20:	3103      	adds	r1, #3
 8012c22:	f801 8c02 	strb.w	r8, [r1, #-2]
 8012c26:	f801 cc01 	strb.w	ip, [r1, #-1]
 8012c2a:	e7f5      	b.n	8012c18 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x1a8>
 8012c2c:	ee07 4a90 	vmov	s15, r4
 8012c30:	ed90 7a06 	vldr	s14, [r0, #24]
 8012c34:	edd0 6a05 	vldr	s13, [r0, #20]
 8012c38:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012c3c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8012c40:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8012c44:	edd0 7a08 	vldr	s15, [r0, #32]
 8012c48:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8012c4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012c50:	bf44      	itt	mi
 8012c52:	edd0 7a07 	vldrmi	s15, [r0, #28]
 8012c56:	ee37 7a67 	vsubmi.f32	s14, s14, s15
 8012c5a:	e7a5      	b.n	8012ba8 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x138>
 8012c5c:	0e3f      	lsrs	r7, r7, #24
 8012c5e:	436f      	muls	r7, r5
 8012c60:	1c7a      	adds	r2, r7, #1
 8012c62:	eb02 2227 	add.w	r2, r2, r7, asr #8
 8012c66:	1212      	asrs	r2, r2, #8
 8012c68:	ea6f 0a02 	mvn.w	sl, r2
 8012c6c:	b292      	uxth	r2, r2
 8012c6e:	fb19 f902 	smulbb	r9, r9, r2
 8012c72:	fa5f fa8a 	uxtb.w	sl, sl
 8012c76:	fb18 f802 	smulbb	r8, r8, r2
 8012c7a:	fb1c fc02 	smulbb	ip, ip, r2
 8012c7e:	fa1f f989 	uxth.w	r9, r9
 8012c82:	fa1f f888 	uxth.w	r8, r8
 8012c86:	fa1f fc8c 	uxth.w	ip, ip
 8012c8a:	458e      	cmp	lr, r1
 8012c8c:	f101 0203 	add.w	r2, r1, #3
 8012c90:	d922      	bls.n	8012cd8 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x268>
 8012c92:	f812 1c03 	ldrb.w	r1, [r2, #-3]
 8012c96:	fb01 910a 	mla	r1, r1, sl, r9
 8012c9a:	b289      	uxth	r1, r1
 8012c9c:	1c4f      	adds	r7, r1, #1
 8012c9e:	eb07 2111 	add.w	r1, r7, r1, lsr #8
 8012ca2:	1209      	asrs	r1, r1, #8
 8012ca4:	f802 1c03 	strb.w	r1, [r2, #-3]
 8012ca8:	f812 1c02 	ldrb.w	r1, [r2, #-2]
 8012cac:	fb01 810a 	mla	r1, r1, sl, r8
 8012cb0:	b289      	uxth	r1, r1
 8012cb2:	1c4f      	adds	r7, r1, #1
 8012cb4:	eb07 2111 	add.w	r1, r7, r1, lsr #8
 8012cb8:	1209      	asrs	r1, r1, #8
 8012cba:	f802 1c02 	strb.w	r1, [r2, #-2]
 8012cbe:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 8012cc2:	fb01 c10a 	mla	r1, r1, sl, ip
 8012cc6:	b289      	uxth	r1, r1
 8012cc8:	1c4f      	adds	r7, r1, #1
 8012cca:	eb07 2111 	add.w	r1, r7, r1, lsr #8
 8012cce:	1209      	asrs	r1, r1, #8
 8012cd0:	f802 1c01 	strb.w	r1, [r2, #-1]
 8012cd4:	4611      	mov	r1, r2
 8012cd6:	e7d8      	b.n	8012c8a <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x21a>
 8012cd8:	191a      	adds	r2, r3, r4
 8012cda:	4433      	add	r3, r6
 8012cdc:	b21b      	sxth	r3, r3
 8012cde:	4293      	cmp	r3, r2
 8012ce0:	f340 80f9 	ble.w	8012ed6 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x466>
 8012ce4:	edd0 7a07 	vldr	s15, [r0, #28]
 8012ce8:	ee06 2a90 	vmov	s13, r2
 8012cec:	ee77 7a27 	vadd.f32	s15, s14, s15
 8012cf0:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8012cf4:	eef4 7ae6 	vcmpe.f32	s15, s13
 8012cf8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012cfc:	f340 80b0 	ble.w	8012e60 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x3f0>
 8012d00:	ee06 3a10 	vmov	s12, r3
 8012d04:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8012d08:	eddf 5a74 	vldr	s11, [pc, #464]	@ 8012edc <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x46c>
 8012d0c:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8012d10:	eef4 7ac6 	vcmpe.f32	s15, s12
 8012d14:	ed90 6a08 	vldr	s12, [r0, #32]
 8012d18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012d1c:	eeb5 6ac0 	vcmpe.f32	s12, #0.0
 8012d20:	bfd6      	itet	le
 8012d22:	eefd 7ae7 	vcvtle.s32.f32	s15, s15
 8012d26:	469c      	movgt	ip, r3
 8012d28:	ee17 ca90 	vmovle	ip, s15
 8012d2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012d30:	eddf 7a6b 	vldr	s15, [pc, #428]	@ 8012ee0 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x470>
 8012d34:	ebac 0202 	sub.w	r2, ip, r2
 8012d38:	fe77 7aa5 	vselgt.f32	s15, s15, s11
 8012d3c:	eee6 7a07 	vfma.f32	s15, s12, s14
 8012d40:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8012d44:	188c      	adds	r4, r1, r2
 8012d46:	7c02      	ldrb	r2, [r0, #16]
 8012d48:	b1d2      	cbz	r2, 8012d80 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x310>
 8012d4a:	2dff      	cmp	r5, #255	@ 0xff
 8012d4c:	d118      	bne.n	8012d80 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x310>
 8012d4e:	42a1      	cmp	r1, r4
 8012d50:	d261      	bcs.n	8012e16 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x3a6>
 8012d52:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8012d56:	68c6      	ldr	r6, [r0, #12]
 8012d58:	3103      	adds	r1, #3
 8012d5a:	ee17 7a10 	vmov	r7, s14
 8012d5e:	eb06 0287 	add.w	r2, r6, r7, lsl #2
 8012d62:	f816 6027 	ldrb.w	r6, [r6, r7, lsl #2]
 8012d66:	f801 6c03 	strb.w	r6, [r1, #-3]
 8012d6a:	7856      	ldrb	r6, [r2, #1]
 8012d6c:	f801 6c02 	strb.w	r6, [r1, #-2]
 8012d70:	7892      	ldrb	r2, [r2, #2]
 8012d72:	f801 2c01 	strb.w	r2, [r1, #-1]
 8012d76:	ed90 7a08 	vldr	s14, [r0, #32]
 8012d7a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8012d7e:	e7e6      	b.n	8012d4e <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x2de>
 8012d80:	68c2      	ldr	r2, [r0, #12]
 8012d82:	428c      	cmp	r4, r1
 8012d84:	f101 0e03 	add.w	lr, r1, #3
 8012d88:	d945      	bls.n	8012e16 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x3a6>
 8012d8a:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8012d8e:	ee17 9a10 	vmov	r9, s14
 8012d92:	eb02 0889 	add.w	r8, r2, r9, lsl #2
 8012d96:	f898 7003 	ldrb.w	r7, [r8, #3]
 8012d9a:	fb07 f605 	mul.w	r6, r7, r5
 8012d9e:	1c77      	adds	r7, r6, #1
 8012da0:	eb07 2716 	add.w	r7, r7, r6, lsr #8
 8012da4:	123f      	asrs	r7, r7, #8
 8012da6:	b2b9      	uxth	r1, r7
 8012da8:	43ff      	mvns	r7, r7
 8012daa:	b2fe      	uxtb	r6, r7
 8012dac:	f812 7029 	ldrb.w	r7, [r2, r9, lsl #2]
 8012db0:	f81e 9c03 	ldrb.w	r9, [lr, #-3]
 8012db4:	fb19 f906 	smulbb	r9, r9, r6
 8012db8:	fb07 9701 	mla	r7, r7, r1, r9
 8012dbc:	b2bf      	uxth	r7, r7
 8012dbe:	f107 0901 	add.w	r9, r7, #1
 8012dc2:	eb09 2717 	add.w	r7, r9, r7, lsr #8
 8012dc6:	f81e 9c02 	ldrb.w	r9, [lr, #-2]
 8012dca:	fb19 f906 	smulbb	r9, r9, r6
 8012dce:	123f      	asrs	r7, r7, #8
 8012dd0:	f80e 7c03 	strb.w	r7, [lr, #-3]
 8012dd4:	f898 7001 	ldrb.w	r7, [r8, #1]
 8012dd8:	fb07 9701 	mla	r7, r7, r1, r9
 8012ddc:	b2bf      	uxth	r7, r7
 8012dde:	f107 0901 	add.w	r9, r7, #1
 8012de2:	eb09 2717 	add.w	r7, r9, r7, lsr #8
 8012de6:	123f      	asrs	r7, r7, #8
 8012de8:	f80e 7c02 	strb.w	r7, [lr, #-2]
 8012dec:	f81e 7c01 	ldrb.w	r7, [lr, #-1]
 8012df0:	f898 8002 	ldrb.w	r8, [r8, #2]
 8012df4:	fb17 f606 	smulbb	r6, r7, r6
 8012df8:	fb08 6601 	mla	r6, r8, r1, r6
 8012dfc:	b2b6      	uxth	r6, r6
 8012dfe:	1c71      	adds	r1, r6, #1
 8012e00:	eb01 2616 	add.w	r6, r1, r6, lsr #8
 8012e04:	4671      	mov	r1, lr
 8012e06:	1236      	asrs	r6, r6, #8
 8012e08:	f80e 6c01 	strb.w	r6, [lr, #-1]
 8012e0c:	ed90 7a08 	vldr	s14, [r0, #32]
 8012e10:	ee77 7a87 	vadd.f32	s15, s15, s14
 8012e14:	e7b5      	b.n	8012d82 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x312>
 8012e16:	4563      	cmp	r3, ip
 8012e18:	dd5d      	ble.n	8012ed6 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x466>
 8012e1a:	edd0 7a08 	vldr	s15, [r0, #32]
 8012e1e:	eba3 030c 	sub.w	r3, r3, ip
 8012e22:	68c4      	ldr	r4, [r0, #12]
 8012e24:	f640 72fc 	movw	r2, #4092	@ 0xffc
 8012e28:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8012e2c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8012e30:	7c00      	ldrb	r0, [r0, #16]
 8012e32:	440b      	add	r3, r1
 8012e34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012e38:	bfd8      	it	le
 8012e3a:	2200      	movle	r2, #0
 8012e3c:	58a2      	ldr	r2, [r4, r2]
 8012e3e:	b2d4      	uxtb	r4, r2
 8012e40:	f3c2 2c07 	ubfx	ip, r2, #8, #8
 8012e44:	f3c2 4707 	ubfx	r7, r2, #16, #8
 8012e48:	b160      	cbz	r0, 8012e64 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x3f4>
 8012e4a:	2dff      	cmp	r5, #255	@ 0xff
 8012e4c:	d10a      	bne.n	8012e64 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x3f4>
 8012e4e:	4299      	cmp	r1, r3
 8012e50:	d241      	bcs.n	8012ed6 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x466>
 8012e52:	700c      	strb	r4, [r1, #0]
 8012e54:	3103      	adds	r1, #3
 8012e56:	f801 cc02 	strb.w	ip, [r1, #-2]
 8012e5a:	f801 7c01 	strb.w	r7, [r1, #-1]
 8012e5e:	e7f6      	b.n	8012e4e <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x3de>
 8012e60:	4694      	mov	ip, r2
 8012e62:	e7da      	b.n	8012e1a <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x3aa>
 8012e64:	0e12      	lsrs	r2, r2, #24
 8012e66:	436a      	muls	r2, r5
 8012e68:	1c55      	adds	r5, r2, #1
 8012e6a:	eb05 2522 	add.w	r5, r5, r2, asr #8
 8012e6e:	122d      	asrs	r5, r5, #8
 8012e70:	43ee      	mvns	r6, r5
 8012e72:	b2ad      	uxth	r5, r5
 8012e74:	fb14 f405 	smulbb	r4, r4, r5
 8012e78:	b2f6      	uxtb	r6, r6
 8012e7a:	fb1c f005 	smulbb	r0, ip, r5
 8012e7e:	fb17 f505 	smulbb	r5, r7, r5
 8012e82:	b2a4      	uxth	r4, r4
 8012e84:	b280      	uxth	r0, r0
 8012e86:	b2ad      	uxth	r5, r5
 8012e88:	428b      	cmp	r3, r1
 8012e8a:	f101 0203 	add.w	r2, r1, #3
 8012e8e:	d922      	bls.n	8012ed6 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x466>
 8012e90:	f812 1c03 	ldrb.w	r1, [r2, #-3]
 8012e94:	fb01 4106 	mla	r1, r1, r6, r4
 8012e98:	b289      	uxth	r1, r1
 8012e9a:	1c4f      	adds	r7, r1, #1
 8012e9c:	eb07 2111 	add.w	r1, r7, r1, lsr #8
 8012ea0:	1209      	asrs	r1, r1, #8
 8012ea2:	f802 1c03 	strb.w	r1, [r2, #-3]
 8012ea6:	f812 1c02 	ldrb.w	r1, [r2, #-2]
 8012eaa:	fb01 0106 	mla	r1, r1, r6, r0
 8012eae:	b289      	uxth	r1, r1
 8012eb0:	1c4f      	adds	r7, r1, #1
 8012eb2:	eb07 2111 	add.w	r1, r7, r1, lsr #8
 8012eb6:	1209      	asrs	r1, r1, #8
 8012eb8:	f802 1c02 	strb.w	r1, [r2, #-2]
 8012ebc:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 8012ec0:	fb01 5106 	mla	r1, r1, r6, r5
 8012ec4:	b289      	uxth	r1, r1
 8012ec6:	1c4f      	adds	r7, r1, #1
 8012ec8:	eb07 2111 	add.w	r1, r7, r1, lsr #8
 8012ecc:	1209      	asrs	r1, r1, #8
 8012ece:	f802 1c01 	strb.w	r1, [r2, #-1]
 8012ed2:	4611      	mov	r1, r2
 8012ed4:	e7d8      	b.n	8012e88 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x418>
 8012ed6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012eda:	bf00      	nop
 8012edc:	447ffffe 	.word	0x447ffffe
 8012ee0:	00000000 	.word	0x00000000

08012ee4 <_ZNK8touchgfx27PainterRGB888LinearGradient8tearDownEv>:
 8012ee4:	4770      	bx	lr

08012ee6 <_ZN8touchgfx27PainterRGB888LinearGradientD1Ev>:
 8012ee6:	4770      	bx	lr

08012ee8 <_ZN8touchgfx27PainterRGB888LinearGradientD0Ev>:
 8012ee8:	b510      	push	{r4, lr}
 8012eea:	4604      	mov	r4, r0
 8012eec:	2124      	movs	r1, #36	@ 0x24
 8012eee:	f013 fe4e 	bl	8026b8e <_ZdlPvj>
 8012ef2:	4620      	mov	r0, r4
 8012ef4:	bd10      	pop	{r4, pc}
	...

08012ef8 <_ZNK8touchgfx19PainterRGB888Bitmap18getRenderingMethodEv>:
 8012ef8:	b508      	push	{r3, lr}
 8012efa:	4b05      	ldr	r3, [pc, #20]	@ (8012f10 <_ZNK8touchgfx19PainterRGB888Bitmap18getRenderingMethodEv+0x18>)
 8012efc:	6818      	ldr	r0, [r3, #0]
 8012efe:	6803      	ldr	r3, [r0, #0]
 8012f00:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8012f04:	4798      	blx	r3
 8012f06:	1e43      	subs	r3, r0, #1
 8012f08:	4258      	negs	r0, r3
 8012f0a:	4158      	adcs	r0, r3
 8012f0c:	bd08      	pop	{r3, pc}
 8012f0e:	bf00      	nop
 8012f10:	24028e20 	.word	0x24028e20

08012f14 <_ZN8touchgfx19PainterRGB888BitmapD1Ev>:
 8012f14:	4770      	bx	lr

08012f16 <_ZThn8_N8touchgfx19PainterRGB888BitmapD1Ev>:
 8012f16:	3808      	subs	r0, #8
 8012f18:	4770      	bx	lr
	...

08012f1c <_ZNK8touchgfx19PainterRGB888Bitmap5setupERKNS_4RectE>:
 8012f1c:	b538      	push	{r3, r4, r5, lr}
 8012f1e:	4b10      	ldr	r3, [pc, #64]	@ (8012f60 <_ZNK8touchgfx19PainterRGB888Bitmap5setupERKNS_4RectE+0x44>)
 8012f20:	4604      	mov	r4, r0
 8012f22:	f9b1 5004 	ldrsh.w	r5, [r1, #4]
 8012f26:	781b      	ldrb	r3, [r3, #0]
 8012f28:	8085      	strh	r5, [r0, #4]
 8012f2a:	b96b      	cbnz	r3, 8012f48 <_ZNK8touchgfx19PainterRGB888Bitmap5setupERKNS_4RectE+0x2c>
 8012f2c:	f9b0 201c 	ldrsh.w	r2, [r0, #28]
 8012f30:	8462      	strh	r2, [r4, #34]	@ 0x22
 8012f32:	b963      	cbnz	r3, 8012f4e <_ZNK8touchgfx19PainterRGB888Bitmap5setupERKNS_4RectE+0x32>
 8012f34:	f9b4 001e 	ldrsh.w	r0, [r4, #30]
 8012f38:	84a0      	strh	r0, [r4, #36]	@ 0x24
 8012f3a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8012f3e:	89a0      	ldrh	r0, [r4, #12]
 8012f40:	1ac0      	subs	r0, r0, r3
 8012f42:	bf18      	it	ne
 8012f44:	2001      	movne	r0, #1
 8012f46:	bd38      	pop	{r3, r4, r5, pc}
 8012f48:	f9b0 201e 	ldrsh.w	r2, [r0, #30]
 8012f4c:	e7f0      	b.n	8012f30 <_ZNK8touchgfx19PainterRGB888Bitmap5setupERKNS_4RectE+0x14>
 8012f4e:	f104 000c 	add.w	r0, r4, #12
 8012f52:	f008 f955 	bl	801b200 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8012f56:	1b40      	subs	r0, r0, r5
 8012f58:	8ba5      	ldrh	r5, [r4, #28]
 8012f5a:	1b40      	subs	r0, r0, r5
 8012f5c:	b200      	sxth	r0, r0
 8012f5e:	e7eb      	b.n	8012f38 <_ZNK8touchgfx19PainterRGB888Bitmap5setupERKNS_4RectE+0x1c>
 8012f60:	24028e18 	.word	0x24028e18

08012f64 <_ZNK8touchgfx19PainterRGB888Bitmap8tearDownEv>:
 8012f64:	f7ef bf7e 	b.w	8002e64 <_ZN8touchgfx5paint8tearDownEv>

08012f68 <_ZN8touchgfx19PainterRGB888BitmapD0Ev>:
 8012f68:	b510      	push	{r4, lr}
 8012f6a:	4604      	mov	r4, r0
 8012f6c:	2128      	movs	r1, #40	@ 0x28
 8012f6e:	f013 fe0e 	bl	8026b8e <_ZdlPvj>
 8012f72:	4620      	mov	r0, r4
 8012f74:	bd10      	pop	{r4, pc}

08012f76 <_ZThn8_N8touchgfx19PainterRGB888BitmapD0Ev>:
 8012f76:	f1a0 0008 	sub.w	r0, r0, #8
 8012f7a:	e7f5      	b.n	8012f68 <_ZN8touchgfx19PainterRGB888BitmapD0Ev>

08012f7c <_ZNK8touchgfx19PainterRGB888Bitmap5paintEPhssssh>:
 8012f7c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012f80:	4607      	mov	r7, r0
 8012f82:	8c40      	ldrh	r0, [r0, #34]	@ 0x22
 8012f84:	f9bd 6028 	ldrsh.w	r6, [sp, #40]	@ 0x28
 8012f88:	4403      	add	r3, r0
 8012f8a:	8cb8      	ldrh	r0, [r7, #36]	@ 0x24
 8012f8c:	f9bd 502c 	ldrsh.w	r5, [sp, #44]	@ 0x2c
 8012f90:	4406      	add	r6, r0
 8012f92:	b29b      	uxth	r3, r3
 8012f94:	f897 0020 	ldrb.w	r0, [r7, #32]
 8012f98:	f89d a030 	ldrb.w	sl, [sp, #48]	@ 0x30
 8012f9c:	b21c      	sxth	r4, r3
 8012f9e:	b236      	sxth	r6, r6
 8012fa0:	b1a0      	cbz	r0, 8012fcc <_ZNK8touchgfx19PainterRGB888Bitmap5paintEPhssssh+0x50>
 8012fa2:	f9b7 0014 	ldrsh.w	r0, [r7, #20]
 8012fa6:	fb94 f3f0 	sdiv	r3, r4, r0
 8012faa:	fb00 4413 	mls	r4, r0, r3, r4
 8012fae:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8012fb2:	2c00      	cmp	r4, #0
 8012fb4:	bfb8      	it	lt
 8012fb6:	1824      	addlt	r4, r4, r0
 8012fb8:	fb96 f0f3 	sdiv	r0, r6, r3
 8012fbc:	fb03 6610 	mls	r6, r3, r0, r6
 8012fc0:	b224      	sxth	r4, r4
 8012fc2:	2e00      	cmp	r6, #0
 8012fc4:	da00      	bge.n	8012fc8 <_ZNK8touchgfx19PainterRGB888Bitmap5paintEPhssssh+0x4c>
 8012fc6:	441e      	add	r6, r3
 8012fc8:	b236      	sxth	r6, r6
 8012fca:	e018      	b.n	8012ffe <_ZNK8touchgfx19PainterRGB888Bitmap5paintEPhssssh+0x82>
 8012fcc:	2c00      	cmp	r4, #0
 8012fce:	da07      	bge.n	8012fe0 <_ZNK8touchgfx19PainterRGB888Bitmap5paintEPhssssh+0x64>
 8012fd0:	442c      	add	r4, r5
 8012fd2:	2c00      	cmp	r4, #0
 8012fd4:	dd3f      	ble.n	8013056 <_ZNK8touchgfx19PainterRGB888Bitmap5paintEPhssssh+0xda>
 8012fd6:	441d      	add	r5, r3
 8012fd8:	1ad3      	subs	r3, r2, r3
 8012fda:	4604      	mov	r4, r0
 8012fdc:	b22d      	sxth	r5, r5
 8012fde:	b21a      	sxth	r2, r3
 8012fe0:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8012fe4:	42a3      	cmp	r3, r4
 8012fe6:	dd36      	ble.n	8013056 <_ZNK8touchgfx19PainterRGB888Bitmap5paintEPhssssh+0xda>
 8012fe8:	2e00      	cmp	r6, #0
 8012fea:	db34      	blt.n	8013056 <_ZNK8touchgfx19PainterRGB888Bitmap5paintEPhssssh+0xda>
 8012fec:	f9b7 0016 	ldrsh.w	r0, [r7, #22]
 8012ff0:	42b0      	cmp	r0, r6
 8012ff2:	dd30      	ble.n	8013056 <_ZNK8touchgfx19PainterRGB888Bitmap5paintEPhssssh+0xda>
 8012ff4:	1960      	adds	r0, r4, r5
 8012ff6:	4298      	cmp	r0, r3
 8012ff8:	dd01      	ble.n	8012ffe <_ZNK8touchgfx19PainterRGB888Bitmap5paintEPhssssh+0x82>
 8012ffa:	1b1d      	subs	r5, r3, r4
 8012ffc:	b22d      	sxth	r5, r5
 8012ffe:	eb02 0342 	add.w	r3, r2, r2, lsl #1
 8013002:	f9b7 b014 	ldrsh.w	fp, [r7, #20]
 8013006:	7bba      	ldrb	r2, [r7, #14]
 8013008:	eb05 0945 	add.w	r9, r5, r5, lsl #1
 801300c:	eb01 0803 	add.w	r8, r1, r3
 8013010:	fb06 f60b 	mul.w	r6, r6, fp
 8013014:	2a01      	cmp	r2, #1
 8013016:	ebab 0b04 	sub.w	fp, fp, r4
 801301a:	44c1      	add	r9, r8
 801301c:	69bb      	ldr	r3, [r7, #24]
 801301e:	fa0f fb8b 	sxth.w	fp, fp
 8013022:	d11a      	bne.n	801305a <_ZNK8touchgfx19PainterRGB888Bitmap5paintEPhssssh+0xde>
 8013024:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8013028:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801302c:	441e      	add	r6, r3
 801302e:	1931      	adds	r1, r6, r4
 8013030:	45ab      	cmp	fp, r5
 8013032:	4640      	mov	r0, r8
 8013034:	4653      	mov	r3, sl
 8013036:	bfa8      	it	ge
 8013038:	46ab      	movge	fp, r5
 801303a:	eba5 050b 	sub.w	r5, r5, fp
 801303e:	465a      	mov	r2, fp
 8013040:	eb0b 0b4b 	add.w	fp, fp, fp, lsl #1
 8013044:	f7ef ff5c 	bl	8002f00 <_ZN8touchgfx5paint6rgb88814lineFromRGB888EPhPKhjh>
 8013048:	4631      	mov	r1, r6
 801304a:	44d8      	add	r8, fp
 801304c:	b22d      	sxth	r5, r5
 801304e:	f9b7 b014 	ldrsh.w	fp, [r7, #20]
 8013052:	45c1      	cmp	r9, r8
 8013054:	d8ec      	bhi.n	8013030 <_ZNK8touchgfx19PainterRGB888Bitmap5paintEPhssssh+0xb4>
 8013056:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801305a:	eb03 0686 	add.w	r6, r3, r6, lsl #2
 801305e:	eb06 0184 	add.w	r1, r6, r4, lsl #2
 8013062:	45ab      	cmp	fp, r5
 8013064:	4640      	mov	r0, r8
 8013066:	4653      	mov	r3, sl
 8013068:	bfa8      	it	ge
 801306a:	46ab      	movge	fp, r5
 801306c:	eba5 050b 	sub.w	r5, r5, fp
 8013070:	465a      	mov	r2, fp
 8013072:	eb0b 0b4b 	add.w	fp, fp, fp, lsl #1
 8013076:	f7ef ff67 	bl	8002f48 <_ZN8touchgfx5paint6rgb88816lineFromARGB8888EPhPKmjh>
 801307a:	4631      	mov	r1, r6
 801307c:	44d8      	add	r8, fp
 801307e:	b22d      	sxth	r5, r5
 8013080:	f9b7 b014 	ldrsh.w	fp, [r7, #20]
 8013084:	45c1      	cmp	r9, r8
 8013086:	d8ec      	bhi.n	8013062 <_ZNK8touchgfx19PainterRGB888Bitmap5paintEPhssssh+0xe6>
 8013088:	e7e5      	b.n	8013056 <_ZNK8touchgfx19PainterRGB888Bitmap5paintEPhssssh+0xda>

0801308a <_ZN8touchgfx19PainterRGB888Bitmap9setBitmapERKNS_6BitmapE>:
 801308a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801308c:	880b      	ldrh	r3, [r1, #0]
 801308e:	f100 050c 	add.w	r5, r0, #12
 8013092:	4604      	mov	r4, r0
 8013094:	8183      	strh	r3, [r0, #12]
 8013096:	4628      	mov	r0, r5
 8013098:	f008 fa28 	bl	801b4ec <_ZNK8touchgfx6Bitmap9getFormatEv>
 801309c:	73a0      	strb	r0, [r4, #14]
 801309e:	4628      	mov	r0, r5
 80130a0:	f008 f8ae 	bl	801b200 <_ZNK8touchgfx6Bitmap8getWidthEv>
 80130a4:	4607      	mov	r7, r0
 80130a6:	4628      	mov	r0, r5
 80130a8:	f008 f8de 	bl	801b268 <_ZNK8touchgfx6Bitmap9getHeightEv>
 80130ac:	2300      	movs	r3, #0
 80130ae:	82e0      	strh	r0, [r4, #22]
 80130b0:	f104 0010 	add.w	r0, r4, #16
 80130b4:	6123      	str	r3, [r4, #16]
 80130b6:	82a7      	strh	r7, [r4, #20]
 80130b8:	f004 f8d6 	bl	8017268 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80130bc:	4628      	mov	r0, r5
 80130be:	f008 f991 	bl	801b3e4 <_ZNK8touchgfx6Bitmap7getDataEv>
 80130c2:	61a0      	str	r0, [r4, #24]
 80130c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080130c6 <_ZThn8_N8touchgfx19PainterRGB888Bitmap9setBitmapERKNS_6BitmapE>:
 80130c6:	f1a0 0008 	sub.w	r0, r0, #8
 80130ca:	f7ff bfde 	b.w	801308a <_ZN8touchgfx19PainterRGB888Bitmap9setBitmapERKNS_6BitmapE>

080130ce <_ZN8touchgfx6CircleD1Ev>:
 80130ce:	4770      	bx	lr

080130d0 <_ZN8touchgfx6CircleD0Ev>:
 80130d0:	b510      	push	{r4, lr}
 80130d2:	4604      	mov	r4, r0
 80130d4:	2148      	movs	r1, #72	@ 0x48
 80130d6:	f013 fd5a 	bl	8026b8e <_ZdlPvj>
 80130da:	4620      	mov	r0, r4
 80130dc:	bd10      	pop	{r4, pc}

080130de <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>:
 80130de:	b507      	push	{r0, r1, r2, lr}
 80130e0:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80130e4:	ab01      	add	r3, sp, #4
 80130e6:	6809      	ldr	r1, [r1, #0]
 80130e8:	6800      	ldr	r0, [r0, #0]
 80130ea:	f006 f825 	bl	8019138 <_ZN8touchgfx6muldivElllRl>
 80130ee:	b003      	add	sp, #12
 80130f0:	f85d fb04 	ldr.w	pc, [sp], #4

080130f4 <_ZN8touchgfx7CWRUtil4sineEi>:
 80130f4:	f44f 73b4 	mov.w	r3, #360	@ 0x168
 80130f8:	fb90 f2f3 	sdiv	r2, r0, r3
 80130fc:	fb02 0013 	mls	r0, r2, r3, r0
 8013100:	2800      	cmp	r0, #0
 8013102:	bfb8      	it	lt
 8013104:	18c0      	addlt	r0, r0, r3
 8013106:	4b0a      	ldr	r3, [pc, #40]	@ (8013130 <_ZN8touchgfx7CWRUtil4sineEi+0x3c>)
 8013108:	285a      	cmp	r0, #90	@ 0x5a
 801310a:	dc02      	bgt.n	8013112 <_ZN8touchgfx7CWRUtil4sineEi+0x1e>
 801310c:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 8013110:	4770      	bx	lr
 8013112:	28b4      	cmp	r0, #180	@ 0xb4
 8013114:	dc02      	bgt.n	801311c <_ZN8touchgfx7CWRUtil4sineEi+0x28>
 8013116:	f1c0 00b4 	rsb	r0, r0, #180	@ 0xb4
 801311a:	e7f7      	b.n	801310c <_ZN8touchgfx7CWRUtil4sineEi+0x18>
 801311c:	f5b0 7f87 	cmp.w	r0, #270	@ 0x10e
 8013120:	bfd4      	ite	le
 8013122:	38b4      	suble	r0, #180	@ 0xb4
 8013124:	f5c0 70b4 	rsbgt	r0, r0, #360	@ 0x168
 8013128:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 801312c:	4240      	negs	r0, r0
 801312e:	4770      	bx	lr
 8013130:	0802c150 	.word	0x0802c150

08013134 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>:
 8013134:	f44f 5334 	mov.w	r3, #11520	@ 0x2d00
 8013138:	fb90 f2f3 	sdiv	r2, r0, r3
 801313c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801313e:	fb02 0013 	mls	r0, r2, r3, r0
 8013142:	2800      	cmp	r0, #0
 8013144:	bfb8      	it	lt
 8013146:	18c0      	addlt	r0, r0, r3
 8013148:	1144      	asrs	r4, r0, #5
 801314a:	f000 061f 	and.w	r6, r0, #31
 801314e:	4620      	mov	r0, r4
 8013150:	f7ff ffd0 	bl	80130f4 <_ZN8touchgfx7CWRUtil4sineEi>
 8013154:	4605      	mov	r5, r0
 8013156:	b90e      	cbnz	r6, 801315c <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E+0x28>
 8013158:	b002      	add	sp, #8
 801315a:	bd70      	pop	{r4, r5, r6, pc}
 801315c:	1c60      	adds	r0, r4, #1
 801315e:	f7ff ffc9 	bl	80130f4 <_ZN8touchgfx7CWRUtil4sineEi>
 8013162:	ab01      	add	r3, sp, #4
 8013164:	2220      	movs	r2, #32
 8013166:	4631      	mov	r1, r6
 8013168:	1b40      	subs	r0, r0, r5
 801316a:	f005 ffe5 	bl	8019138 <_ZN8touchgfx6muldivElllRl>
 801316e:	4428      	add	r0, r5
 8013170:	e7f2      	b.n	8013158 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E+0x24>

08013172 <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>:
 8013172:	b508      	push	{r3, lr}
 8013174:	f5c0 6034 	rsb	r0, r0, #2880	@ 0xb40
 8013178:	f7ff ffdc 	bl	8013134 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 801317c:	bd08      	pop	{r3, pc}
	...

08013180 <_ZN8touchgfx6CircleC1Ev>:
 8013180:	b510      	push	{r4, lr}
 8013182:	4604      	mov	r4, r0
 8013184:	f000 fd6a 	bl	8013c5c <_ZN8touchgfx12CanvasWidgetC1Ev>
 8013188:	4b08      	ldr	r3, [pc, #32]	@ (80131ac <_ZN8touchgfx6CircleC1Ev+0x2c>)
 801318a:	f44f 5234 	mov.w	r2, #11520	@ 0x2d00
 801318e:	4620      	mov	r0, r4
 8013190:	6023      	str	r3, [r4, #0]
 8013192:	2300      	movs	r3, #0
 8013194:	e9c4 230f 	strd	r2, r3, [r4, #60]	@ 0x3c
 8013198:	f24b 4205 	movw	r2, #46085	@ 0xb405
 801319c:	60a3      	str	r3, [r4, #8]
 801319e:	e9c4 330b 	strd	r3, r3, [r4, #44]	@ 0x2c
 80131a2:	e9c4 330d 	strd	r3, r3, [r4, #52]	@ 0x34
 80131a6:	f8a4 2044 	strh.w	r2, [r4, #68]	@ 0x44
 80131aa:	bd10      	pop	{r4, pc}
 80131ac:	0802c210 	.word	0x0802c210

080131b0 <_ZN8touchgfx6Circle15setCapPrecisionEi>:
 80131b0:	29b4      	cmp	r1, #180	@ 0xb4
 80131b2:	bfa8      	it	ge
 80131b4:	21b4      	movge	r1, #180	@ 0xb4
 80131b6:	2901      	cmp	r1, #1
 80131b8:	bfb8      	it	lt
 80131ba:	2101      	movlt	r1, #1
 80131bc:	f880 1045 	strb.w	r1, [r0, #69]	@ 0x45
 80131c0:	4770      	bx	lr

080131c2 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_>:
 80131c2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80131c6:	428a      	cmp	r2, r1
 80131c8:	4680      	mov	r8, r0
 80131ca:	4610      	mov	r0, r2
 80131cc:	4699      	mov	r9, r3
 80131ce:	bfaa      	itet	ge
 80131d0:	460a      	movge	r2, r1
 80131d2:	460b      	movlt	r3, r1
 80131d4:	4603      	movge	r3, r0
 80131d6:	b085      	sub	sp, #20
 80131d8:	f8d8 4040 	ldr.w	r4, [r8, #64]	@ 0x40
 80131dc:	f108 0a34 	add.w	sl, r8, #52	@ 0x34
 80131e0:	1a99      	subs	r1, r3, r2
 80131e2:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 80131e4:	f5b1 5f34 	cmp.w	r1, #11520	@ 0x2d00
 80131e8:	bfa4      	itt	ge
 80131ea:	f44f 5334 	movge.w	r3, #11520	@ 0x2d00
 80131ee:	2200      	movge	r2, #0
 80131f0:	e9dd 760e 	ldrd	r7, r6, [sp, #56]	@ 0x38
 80131f4:	9300      	str	r3, [sp, #0]
 80131f6:	f102 0b01 	add.w	fp, r2, #1
 80131fa:	2c00      	cmp	r4, #0
 80131fc:	f040 80ae 	bne.w	801335c <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x19a>
 8013200:	4610      	mov	r0, r2
 8013202:	9201      	str	r2, [sp, #4]
 8013204:	f7ff ff96 	bl	8013134 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 8013208:	a903      	add	r1, sp, #12
 801320a:	9003      	str	r0, [sp, #12]
 801320c:	4650      	mov	r0, sl
 801320e:	f7ff ff66 	bl	80130de <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8013212:	f8d8 102c 	ldr.w	r1, [r8, #44]	@ 0x2c
 8013216:	9a01      	ldr	r2, [sp, #4]
 8013218:	4408      	add	r0, r1
 801321a:	f8d9 1000 	ldr.w	r1, [r9]
 801321e:	4281      	cmp	r1, r0
 8013220:	bfc8      	it	gt
 8013222:	f8c9 0000 	strgt.w	r0, [r9]
 8013226:	6839      	ldr	r1, [r7, #0]
 8013228:	4288      	cmp	r0, r1
 801322a:	bfc8      	it	gt
 801322c:	6038      	strgt	r0, [r7, #0]
 801322e:	4610      	mov	r0, r2
 8013230:	f7ff ff9f 	bl	8013172 <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 8013234:	a903      	add	r1, sp, #12
 8013236:	9003      	str	r0, [sp, #12]
 8013238:	4650      	mov	r0, sl
 801323a:	f7ff ff50 	bl	80130de <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 801323e:	f8d8 2030 	ldr.w	r2, [r8, #48]	@ 0x30
 8013242:	f44f 6134 	mov.w	r1, #2880	@ 0xb40
 8013246:	1a10      	subs	r0, r2, r0
 8013248:	6832      	ldr	r2, [r6, #0]
 801324a:	4282      	cmp	r2, r0
 801324c:	bfc8      	it	gt
 801324e:	6030      	strgt	r0, [r6, #0]
 8013250:	682a      	ldr	r2, [r5, #0]
 8013252:	4290      	cmp	r0, r2
 8013254:	fb9b f2f1 	sdiv	r2, fp, r1
 8013258:	fb01 b212 	mls	r2, r1, r2, fp
 801325c:	bfc8      	it	gt
 801325e:	6028      	strgt	r0, [r5, #0]
 8013260:	1a8a      	subs	r2, r1, r2
 8013262:	fb92 f0f1 	sdiv	r0, r2, r1
 8013266:	fb01 2210 	mls	r2, r1, r0, r2
 801326a:	4493      	add	fp, r2
 801326c:	9b00      	ldr	r3, [sp, #0]
 801326e:	455b      	cmp	r3, fp
 8013270:	db2a      	blt.n	80132c8 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x106>
 8013272:	4658      	mov	r0, fp
 8013274:	f7ff ff5e 	bl	8013134 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 8013278:	a903      	add	r1, sp, #12
 801327a:	9003      	str	r0, [sp, #12]
 801327c:	4650      	mov	r0, sl
 801327e:	f7ff ff2e 	bl	80130de <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8013282:	f8d8 202c 	ldr.w	r2, [r8, #44]	@ 0x2c
 8013286:	4410      	add	r0, r2
 8013288:	f8d9 2000 	ldr.w	r2, [r9]
 801328c:	4282      	cmp	r2, r0
 801328e:	bfc8      	it	gt
 8013290:	f8c9 0000 	strgt.w	r0, [r9]
 8013294:	683a      	ldr	r2, [r7, #0]
 8013296:	4290      	cmp	r0, r2
 8013298:	bfc8      	it	gt
 801329a:	6038      	strgt	r0, [r7, #0]
 801329c:	4658      	mov	r0, fp
 801329e:	f7ff ff68 	bl	8013172 <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 80132a2:	a903      	add	r1, sp, #12
 80132a4:	9003      	str	r0, [sp, #12]
 80132a6:	4650      	mov	r0, sl
 80132a8:	f7ff ff19 	bl	80130de <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 80132ac:	f8d8 2030 	ldr.w	r2, [r8, #48]	@ 0x30
 80132b0:	f50b 6b34 	add.w	fp, fp, #2880	@ 0xb40
 80132b4:	1a10      	subs	r0, r2, r0
 80132b6:	6832      	ldr	r2, [r6, #0]
 80132b8:	4282      	cmp	r2, r0
 80132ba:	bfc8      	it	gt
 80132bc:	6030      	strgt	r0, [r6, #0]
 80132be:	682a      	ldr	r2, [r5, #0]
 80132c0:	4290      	cmp	r0, r2
 80132c2:	bfc8      	it	gt
 80132c4:	6028      	strgt	r0, [r5, #0]
 80132c6:	e7d1      	b.n	801326c <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0xaa>
 80132c8:	f5ab 6b34 	sub.w	fp, fp, #2880	@ 0xb40
 80132cc:	9b00      	ldr	r3, [sp, #0]
 80132ce:	455b      	cmp	r3, fp
 80132d0:	dd27      	ble.n	8013322 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x160>
 80132d2:	4618      	mov	r0, r3
 80132d4:	f7ff ff2e 	bl	8013134 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 80132d8:	a903      	add	r1, sp, #12
 80132da:	9003      	str	r0, [sp, #12]
 80132dc:	4650      	mov	r0, sl
 80132de:	f7ff fefe 	bl	80130de <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 80132e2:	f8d8 202c 	ldr.w	r2, [r8, #44]	@ 0x2c
 80132e6:	4410      	add	r0, r2
 80132e8:	f8d9 2000 	ldr.w	r2, [r9]
 80132ec:	4282      	cmp	r2, r0
 80132ee:	bfc8      	it	gt
 80132f0:	f8c9 0000 	strgt.w	r0, [r9]
 80132f4:	683a      	ldr	r2, [r7, #0]
 80132f6:	4290      	cmp	r0, r2
 80132f8:	bfc8      	it	gt
 80132fa:	6038      	strgt	r0, [r7, #0]
 80132fc:	9800      	ldr	r0, [sp, #0]
 80132fe:	f7ff ff38 	bl	8013172 <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 8013302:	a903      	add	r1, sp, #12
 8013304:	9003      	str	r0, [sp, #12]
 8013306:	4650      	mov	r0, sl
 8013308:	f7ff fee9 	bl	80130de <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 801330c:	f8d8 2030 	ldr.w	r2, [r8, #48]	@ 0x30
 8013310:	1a10      	subs	r0, r2, r0
 8013312:	6832      	ldr	r2, [r6, #0]
 8013314:	4282      	cmp	r2, r0
 8013316:	bfc8      	it	gt
 8013318:	6030      	strgt	r0, [r6, #0]
 801331a:	682a      	ldr	r2, [r5, #0]
 801331c:	4290      	cmp	r0, r2
 801331e:	bfc8      	it	gt
 8013320:	6028      	strgt	r0, [r5, #0]
 8013322:	f8d8 202c 	ldr.w	r2, [r8, #44]	@ 0x2c
 8013326:	f8d9 1000 	ldr.w	r1, [r9]
 801332a:	4291      	cmp	r1, r2
 801332c:	bfc8      	it	gt
 801332e:	f8c9 2000 	strgt.w	r2, [r9]
 8013332:	683a      	ldr	r2, [r7, #0]
 8013334:	f8d8 302c 	ldr.w	r3, [r8, #44]	@ 0x2c
 8013338:	429a      	cmp	r2, r3
 801333a:	bfb8      	it	lt
 801333c:	603b      	strlt	r3, [r7, #0]
 801333e:	6832      	ldr	r2, [r6, #0]
 8013340:	f8d8 3030 	ldr.w	r3, [r8, #48]	@ 0x30
 8013344:	429a      	cmp	r2, r3
 8013346:	bfc8      	it	gt
 8013348:	6033      	strgt	r3, [r6, #0]
 801334a:	682a      	ldr	r2, [r5, #0]
 801334c:	f8d8 3030 	ldr.w	r3, [r8, #48]	@ 0x30
 8013350:	429a      	cmp	r2, r3
 8013352:	da00      	bge.n	8013356 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x194>
 8013354:	602b      	str	r3, [r5, #0]
 8013356:	b005      	add	sp, #20
 8013358:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801335c:	2002      	movs	r0, #2
 801335e:	3401      	adds	r4, #1
 8013360:	9201      	str	r2, [sp, #4]
 8013362:	fb94 f4f0 	sdiv	r4, r4, r0
 8013366:	4610      	mov	r0, r2
 8013368:	f7ff fee4 	bl	8013134 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 801336c:	a903      	add	r1, sp, #12
 801336e:	9003      	str	r0, [sp, #12]
 8013370:	4650      	mov	r0, sl
 8013372:	f7ff feb4 	bl	80130de <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8013376:	f8d8 102c 	ldr.w	r1, [r8, #44]	@ 0x2c
 801337a:	9a01      	ldr	r2, [sp, #4]
 801337c:	4408      	add	r0, r1
 801337e:	f8d9 1000 	ldr.w	r1, [r9]
 8013382:	1b03      	subs	r3, r0, r4
 8013384:	4420      	add	r0, r4
 8013386:	4299      	cmp	r1, r3
 8013388:	bfc8      	it	gt
 801338a:	f8c9 3000 	strgt.w	r3, [r9]
 801338e:	6839      	ldr	r1, [r7, #0]
 8013390:	428b      	cmp	r3, r1
 8013392:	bfc8      	it	gt
 8013394:	603b      	strgt	r3, [r7, #0]
 8013396:	f8d9 1000 	ldr.w	r1, [r9]
 801339a:	4281      	cmp	r1, r0
 801339c:	bfc8      	it	gt
 801339e:	f8c9 0000 	strgt.w	r0, [r9]
 80133a2:	6839      	ldr	r1, [r7, #0]
 80133a4:	4288      	cmp	r0, r1
 80133a6:	bfc8      	it	gt
 80133a8:	6038      	strgt	r0, [r7, #0]
 80133aa:	4610      	mov	r0, r2
 80133ac:	f7ff fee1 	bl	8013172 <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 80133b0:	a903      	add	r1, sp, #12
 80133b2:	9003      	str	r0, [sp, #12]
 80133b4:	4650      	mov	r0, sl
 80133b6:	f7ff fe92 	bl	80130de <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 80133ba:	f8d8 2030 	ldr.w	r2, [r8, #48]	@ 0x30
 80133be:	1a10      	subs	r0, r2, r0
 80133c0:	6832      	ldr	r2, [r6, #0]
 80133c2:	1b01      	subs	r1, r0, r4
 80133c4:	4420      	add	r0, r4
 80133c6:	428a      	cmp	r2, r1
 80133c8:	bfc8      	it	gt
 80133ca:	6031      	strgt	r1, [r6, #0]
 80133cc:	682a      	ldr	r2, [r5, #0]
 80133ce:	4291      	cmp	r1, r2
 80133d0:	bfc8      	it	gt
 80133d2:	6029      	strgt	r1, [r5, #0]
 80133d4:	f44f 6134 	mov.w	r1, #2880	@ 0xb40
 80133d8:	6832      	ldr	r2, [r6, #0]
 80133da:	4282      	cmp	r2, r0
 80133dc:	bfc8      	it	gt
 80133de:	6030      	strgt	r0, [r6, #0]
 80133e0:	682a      	ldr	r2, [r5, #0]
 80133e2:	4290      	cmp	r0, r2
 80133e4:	fb9b f2f1 	sdiv	r2, fp, r1
 80133e8:	fb01 b212 	mls	r2, r1, r2, fp
 80133ec:	bfc8      	it	gt
 80133ee:	6028      	strgt	r0, [r5, #0]
 80133f0:	1a8a      	subs	r2, r1, r2
 80133f2:	fb92 f0f1 	sdiv	r0, r2, r1
 80133f6:	fb01 2210 	mls	r2, r1, r0, r2
 80133fa:	4493      	add	fp, r2
 80133fc:	9b00      	ldr	r3, [sp, #0]
 80133fe:	455b      	cmp	r3, fp
 8013400:	db40      	blt.n	8013484 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x2c2>
 8013402:	4658      	mov	r0, fp
 8013404:	f7ff fe96 	bl	8013134 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 8013408:	a903      	add	r1, sp, #12
 801340a:	9003      	str	r0, [sp, #12]
 801340c:	4650      	mov	r0, sl
 801340e:	f7ff fe66 	bl	80130de <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8013412:	f8d8 202c 	ldr.w	r2, [r8, #44]	@ 0x2c
 8013416:	4410      	add	r0, r2
 8013418:	f8d9 2000 	ldr.w	r2, [r9]
 801341c:	1b01      	subs	r1, r0, r4
 801341e:	4420      	add	r0, r4
 8013420:	428a      	cmp	r2, r1
 8013422:	bfc8      	it	gt
 8013424:	f8c9 1000 	strgt.w	r1, [r9]
 8013428:	683a      	ldr	r2, [r7, #0]
 801342a:	4291      	cmp	r1, r2
 801342c:	bfc8      	it	gt
 801342e:	6039      	strgt	r1, [r7, #0]
 8013430:	f8d9 2000 	ldr.w	r2, [r9]
 8013434:	4282      	cmp	r2, r0
 8013436:	bfc8      	it	gt
 8013438:	f8c9 0000 	strgt.w	r0, [r9]
 801343c:	683a      	ldr	r2, [r7, #0]
 801343e:	4290      	cmp	r0, r2
 8013440:	bfc8      	it	gt
 8013442:	6038      	strgt	r0, [r7, #0]
 8013444:	4658      	mov	r0, fp
 8013446:	f7ff fe94 	bl	8013172 <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 801344a:	a903      	add	r1, sp, #12
 801344c:	9003      	str	r0, [sp, #12]
 801344e:	4650      	mov	r0, sl
 8013450:	f7ff fe45 	bl	80130de <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8013454:	f8d8 2030 	ldr.w	r2, [r8, #48]	@ 0x30
 8013458:	f50b 6b34 	add.w	fp, fp, #2880	@ 0xb40
 801345c:	1a10      	subs	r0, r2, r0
 801345e:	6832      	ldr	r2, [r6, #0]
 8013460:	1b01      	subs	r1, r0, r4
 8013462:	4420      	add	r0, r4
 8013464:	428a      	cmp	r2, r1
 8013466:	bfc8      	it	gt
 8013468:	6031      	strgt	r1, [r6, #0]
 801346a:	682a      	ldr	r2, [r5, #0]
 801346c:	4291      	cmp	r1, r2
 801346e:	bfc8      	it	gt
 8013470:	6029      	strgt	r1, [r5, #0]
 8013472:	6832      	ldr	r2, [r6, #0]
 8013474:	4282      	cmp	r2, r0
 8013476:	bfc8      	it	gt
 8013478:	6030      	strgt	r0, [r6, #0]
 801347a:	682a      	ldr	r2, [r5, #0]
 801347c:	4290      	cmp	r0, r2
 801347e:	bfc8      	it	gt
 8013480:	6028      	strgt	r0, [r5, #0]
 8013482:	e7bb      	b.n	80133fc <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x23a>
 8013484:	f5ab 6b34 	sub.w	fp, fp, #2880	@ 0xb40
 8013488:	9b00      	ldr	r3, [sp, #0]
 801348a:	455b      	cmp	r3, fp
 801348c:	f77f af63 	ble.w	8013356 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x194>
 8013490:	4618      	mov	r0, r3
 8013492:	f7ff fe4f 	bl	8013134 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 8013496:	a903      	add	r1, sp, #12
 8013498:	9003      	str	r0, [sp, #12]
 801349a:	4650      	mov	r0, sl
 801349c:	f7ff fe1f 	bl	80130de <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 80134a0:	f8d8 202c 	ldr.w	r2, [r8, #44]	@ 0x2c
 80134a4:	4410      	add	r0, r2
 80134a6:	f8d9 2000 	ldr.w	r2, [r9]
 80134aa:	1b01      	subs	r1, r0, r4
 80134ac:	4420      	add	r0, r4
 80134ae:	428a      	cmp	r2, r1
 80134b0:	bfc8      	it	gt
 80134b2:	f8c9 1000 	strgt.w	r1, [r9]
 80134b6:	683a      	ldr	r2, [r7, #0]
 80134b8:	4291      	cmp	r1, r2
 80134ba:	bfc8      	it	gt
 80134bc:	6039      	strgt	r1, [r7, #0]
 80134be:	f8d9 2000 	ldr.w	r2, [r9]
 80134c2:	4282      	cmp	r2, r0
 80134c4:	bfc8      	it	gt
 80134c6:	f8c9 0000 	strgt.w	r0, [r9]
 80134ca:	683b      	ldr	r3, [r7, #0]
 80134cc:	4298      	cmp	r0, r3
 80134ce:	bfc8      	it	gt
 80134d0:	6038      	strgt	r0, [r7, #0]
 80134d2:	9800      	ldr	r0, [sp, #0]
 80134d4:	f7ff fe4d 	bl	8013172 <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 80134d8:	a903      	add	r1, sp, #12
 80134da:	9003      	str	r0, [sp, #12]
 80134dc:	4650      	mov	r0, sl
 80134de:	f7ff fdfe 	bl	80130de <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 80134e2:	f8d8 3030 	ldr.w	r3, [r8, #48]	@ 0x30
 80134e6:	6832      	ldr	r2, [r6, #0]
 80134e8:	1a18      	subs	r0, r3, r0
 80134ea:	1b03      	subs	r3, r0, r4
 80134ec:	4404      	add	r4, r0
 80134ee:	429a      	cmp	r2, r3
 80134f0:	bfc8      	it	gt
 80134f2:	6033      	strgt	r3, [r6, #0]
 80134f4:	682a      	ldr	r2, [r5, #0]
 80134f6:	4293      	cmp	r3, r2
 80134f8:	bfc8      	it	gt
 80134fa:	602b      	strgt	r3, [r5, #0]
 80134fc:	6833      	ldr	r3, [r6, #0]
 80134fe:	42a3      	cmp	r3, r4
 8013500:	bfc8      	it	gt
 8013502:	6034      	strgt	r4, [r6, #0]
 8013504:	682b      	ldr	r3, [r5, #0]
 8013506:	429c      	cmp	r4, r3
 8013508:	bfc8      	it	gt
 801350a:	602c      	strgt	r4, [r5, #0]
 801350c:	e723      	b.n	8013356 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x194>

0801350e <_ZNK8touchgfx6Circle14getMinimalRectENS_7CWRUtil2Q5ES2_>:
 801350e:	b530      	push	{r4, r5, lr}
 8013510:	4604      	mov	r4, r0
 8013512:	4608      	mov	r0, r1
 8013514:	4611      	mov	r1, r2
 8013516:	461a      	mov	r2, r3
 8013518:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
 801351c:	b089      	sub	sp, #36	@ 0x24
 801351e:	2500      	movs	r5, #0
 8013520:	015b      	lsls	r3, r3, #5
 8013522:	9505      	str	r5, [sp, #20]
 8013524:	9304      	str	r3, [sp, #16]
 8013526:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 801352a:	015b      	lsls	r3, r3, #5
 801352c:	e9cd 3506 	strd	r3, r5, [sp, #24]
 8013530:	ab07      	add	r3, sp, #28
 8013532:	2520      	movs	r5, #32
 8013534:	9302      	str	r3, [sp, #8]
 8013536:	ab06      	add	r3, sp, #24
 8013538:	9301      	str	r3, [sp, #4]
 801353a:	ab05      	add	r3, sp, #20
 801353c:	9300      	str	r3, [sp, #0]
 801353e:	ab04      	add	r3, sp, #16
 8013540:	f7ff fe3f 	bl	80131c2 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_>
 8013544:	9a04      	ldr	r2, [sp, #16]
 8013546:	9805      	ldr	r0, [sp, #20]
 8013548:	9b06      	ldr	r3, [sp, #24]
 801354a:	9907      	ldr	r1, [sp, #28]
 801354c:	fb92 f2f5 	sdiv	r2, r2, r5
 8013550:	fb90 f0f5 	sdiv	r0, r0, r5
 8013554:	fb93 f3f5 	sdiv	r3, r3, r5
 8013558:	fb91 f1f5 	sdiv	r1, r1, r5
 801355c:	b292      	uxth	r2, r2
 801355e:	3002      	adds	r0, #2
 8013560:	b29b      	uxth	r3, r3
 8013562:	3102      	adds	r1, #2
 8013564:	1a80      	subs	r0, r0, r2
 8013566:	3a01      	subs	r2, #1
 8013568:	1ac9      	subs	r1, r1, r3
 801356a:	3b01      	subs	r3, #1
 801356c:	80a0      	strh	r0, [r4, #4]
 801356e:	4620      	mov	r0, r4
 8013570:	8022      	strh	r2, [r4, #0]
 8013572:	8063      	strh	r3, [r4, #2]
 8013574:	80e1      	strh	r1, [r4, #6]
 8013576:	b009      	add	sp, #36	@ 0x24
 8013578:	bd30      	pop	{r4, r5, pc}

0801357a <_ZNK8touchgfx6Circle14getMinimalRectEv>:
 801357a:	b510      	push	{r4, lr}
 801357c:	4604      	mov	r4, r0
 801357e:	e9d1 230e 	ldrd	r2, r3, [r1, #56]	@ 0x38
 8013582:	f7ff ffc4 	bl	801350e <_ZNK8touchgfx6Circle14getMinimalRectENS_7CWRUtil2Q5ES2_>
 8013586:	4620      	mov	r0, r4
 8013588:	bd10      	pop	{r4, pc}

0801358a <_ZNK8touchgfx6Circle32getMinimalRectForUpdatedEndAngleERKNS_7CWRUtil2Q5E>:
 801358a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801358c:	e9d1 540e 	ldrd	r5, r4, [r1, #56]	@ 0x38
 8013590:	4606      	mov	r6, r0
 8013592:	f891 0044 	ldrb.w	r0, [r1, #68]	@ 0x44
 8013596:	42a5      	cmp	r5, r4
 8013598:	6813      	ldr	r3, [r2, #0]
 801359a:	ea4f 1040 	mov.w	r0, r0, lsl #5
 801359e:	da2b      	bge.n	80135f8 <_ZNK8touchgfx6Circle32getMinimalRectForUpdatedEndAngleERKNS_7CWRUtil2Q5E+0x6e>
 80135a0:	42a3      	cmp	r3, r4
 80135a2:	dd14      	ble.n	80135ce <_ZNK8touchgfx6Circle32getMinimalRectForUpdatedEndAngleERKNS_7CWRUtil2Q5E+0x44>
 80135a4:	b168      	cbz	r0, 80135c2 <_ZNK8touchgfx6Circle32getMinimalRectForUpdatedEndAngleERKNS_7CWRUtil2Q5E+0x38>
 80135a6:	4267      	negs	r7, r4
 80135a8:	fb97 f2f0 	sdiv	r2, r7, r0
 80135ac:	fb00 7212 	mls	r2, r0, r2, r7
 80135b0:	1a82      	subs	r2, r0, r2
 80135b2:	fb92 f7f0 	sdiv	r7, r2, r0
 80135b6:	fb00 2017 	mls	r0, r0, r7, r2
 80135ba:	1a24      	subs	r4, r4, r0
 80135bc:	42ac      	cmp	r4, r5
 80135be:	bfb8      	it	lt
 80135c0:	462c      	movlt	r4, r5
 80135c2:	4630      	mov	r0, r6
 80135c4:	4622      	mov	r2, r4
 80135c6:	f7ff ffa2 	bl	801350e <_ZNK8touchgfx6Circle14getMinimalRectENS_7CWRUtil2Q5ES2_>
 80135ca:	4630      	mov	r0, r6
 80135cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80135ce:	42ab      	cmp	r3, r5
 80135d0:	dd0e      	ble.n	80135f0 <_ZNK8touchgfx6Circle32getMinimalRectForUpdatedEndAngleERKNS_7CWRUtil2Q5E+0x66>
 80135d2:	b168      	cbz	r0, 80135f0 <_ZNK8touchgfx6Circle32getMinimalRectForUpdatedEndAngleERKNS_7CWRUtil2Q5E+0x66>
 80135d4:	425f      	negs	r7, r3
 80135d6:	fb97 f2f0 	sdiv	r2, r7, r0
 80135da:	fb00 7212 	mls	r2, r0, r2, r7
 80135de:	1a82      	subs	r2, r0, r2
 80135e0:	fb92 f7f0 	sdiv	r7, r2, r0
 80135e4:	fb00 2017 	mls	r0, r0, r7, r2
 80135e8:	1a1b      	subs	r3, r3, r0
 80135ea:	42ab      	cmp	r3, r5
 80135ec:	bfb8      	it	lt
 80135ee:	462b      	movlt	r3, r5
 80135f0:	4622      	mov	r2, r4
 80135f2:	461c      	mov	r4, r3
 80135f4:	4613      	mov	r3, r2
 80135f6:	e7e4      	b.n	80135c2 <_ZNK8touchgfx6Circle32getMinimalRectForUpdatedEndAngleERKNS_7CWRUtil2Q5E+0x38>
 80135f8:	42a3      	cmp	r3, r4
 80135fa:	da10      	bge.n	801361e <_ZNK8touchgfx6Circle32getMinimalRectForUpdatedEndAngleERKNS_7CWRUtil2Q5E+0x94>
 80135fc:	b148      	cbz	r0, 8013612 <_ZNK8touchgfx6Circle32getMinimalRectForUpdatedEndAngleERKNS_7CWRUtil2Q5E+0x88>
 80135fe:	fb94 f2f0 	sdiv	r2, r4, r0
 8013602:	fb00 4212 	mls	r2, r0, r2, r4
 8013606:	1a82      	subs	r2, r0, r2
 8013608:	fb92 f7f0 	sdiv	r7, r2, r0
 801360c:	fb00 2017 	mls	r0, r0, r7, r2
 8013610:	4404      	add	r4, r0
 8013612:	42a5      	cmp	r5, r4
 8013614:	bfa8      	it	ge
 8013616:	4625      	movge	r5, r4
 8013618:	461c      	mov	r4, r3
 801361a:	462b      	mov	r3, r5
 801361c:	e7d1      	b.n	80135c2 <_ZNK8touchgfx6Circle32getMinimalRectForUpdatedEndAngleERKNS_7CWRUtil2Q5E+0x38>
 801361e:	42ab      	cmp	r3, r5
 8013620:	dacf      	bge.n	80135c2 <_ZNK8touchgfx6Circle32getMinimalRectForUpdatedEndAngleERKNS_7CWRUtil2Q5E+0x38>
 8013622:	2800      	cmp	r0, #0
 8013624:	d0cd      	beq.n	80135c2 <_ZNK8touchgfx6Circle32getMinimalRectForUpdatedEndAngleERKNS_7CWRUtil2Q5E+0x38>
 8013626:	fb93 f2f0 	sdiv	r2, r3, r0
 801362a:	fb00 3212 	mls	r2, r0, r2, r3
 801362e:	1a82      	subs	r2, r0, r2
 8013630:	fb92 f7f0 	sdiv	r7, r2, r0
 8013634:	fb00 2017 	mls	r0, r0, r7, r2
 8013638:	4403      	add	r3, r0
 801363a:	42ab      	cmp	r3, r5
 801363c:	bfa8      	it	ge
 801363e:	462b      	movge	r3, r5
 8013640:	e7bf      	b.n	80135c2 <_ZNK8touchgfx6Circle32getMinimalRectForUpdatedEndAngleERKNS_7CWRUtil2Q5E+0x38>
	...

08013644 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE>:
 8013644:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013648:	e9d0 650e 	ldrd	r6, r5, [r0, #56]	@ 0x38
 801364c:	468a      	mov	sl, r1
 801364e:	f9b0 902c 	ldrsh.w	r9, [r0, #44]	@ 0x2c
 8013652:	42b5      	cmp	r5, r6
 8013654:	f9b0 b030 	ldrsh.w	fp, [r0, #48]	@ 0x30
 8013658:	6c01      	ldr	r1, [r0, #64]	@ 0x40
 801365a:	b0af      	sub	sp, #188	@ 0xbc
 801365c:	bfa4      	itt	ge
 801365e:	462b      	movge	r3, r5
 8013660:	4635      	movge	r5, r6
 8013662:	4604      	mov	r4, r0
 8013664:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 8013666:	bfa8      	it	ge
 8013668:	461e      	movge	r6, r3
 801366a:	1b73      	subs	r3, r6, r5
 801366c:	f5b3 5f34 	cmp.w	r3, #11520	@ 0x2d00
 8013670:	f04f 0320 	mov.w	r3, #32
 8013674:	bfa4      	itt	ge
 8013676:	f44f 5634 	movge.w	r6, #11520	@ 0x2d00
 801367a:	2500      	movge	r5, #0
 801367c:	fb99 f9f3 	sdiv	r9, r9, r3
 8013680:	fb9b fbf3 	sdiv	fp, fp, r3
 8013684:	2900      	cmp	r1, #0
 8013686:	f000 80fb 	beq.w	8013880 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x23c>
 801368a:	f9ba 0000 	ldrsh.w	r0, [sl]
 801368e:	f9ba 3002 	ldrsh.w	r3, [sl, #2]
 8013692:	eba9 0700 	sub.w	r7, r9, r0
 8013696:	ebab 0803 	sub.w	r8, fp, r3
 801369a:	ea87 7ce7 	eor.w	ip, r7, r7, asr #31
 801369e:	ebac 7ce7 	sub.w	ip, ip, r7, asr #31
 80136a2:	f8ba 7004 	ldrh.w	r7, [sl, #4]
 80136a6:	4407      	add	r7, r0
 80136a8:	ea88 70e8 	eor.w	r0, r8, r8, asr #31
 80136ac:	eba0 70e8 	sub.w	r0, r0, r8, asr #31
 80136b0:	f8ba 8006 	ldrh.w	r8, [sl, #6]
 80136b4:	b23f      	sxth	r7, r7
 80136b6:	4498      	add	r8, r3
 80136b8:	2302      	movs	r3, #2
 80136ba:	eba9 0707 	sub.w	r7, r9, r7
 80136be:	fa0f f888 	sxth.w	r8, r8
 80136c2:	9303      	str	r3, [sp, #12]
 80136c4:	2f00      	cmp	r7, #0
 80136c6:	ebab 0808 	sub.w	r8, fp, r8
 80136ca:	bfb8      	it	lt
 80136cc:	427f      	neglt	r7, r7
 80136ce:	f1b8 0f00 	cmp.w	r8, #0
 80136d2:	bfb8      	it	lt
 80136d4:	f1c8 0800 	rsblt	r8, r8, #0
 80136d8:	45bc      	cmp	ip, r7
 80136da:	bfcc      	ite	gt
 80136dc:	f10c 0701 	addgt.w	r7, ip, #1
 80136e0:	3701      	addle	r7, #1
 80136e2:	4540      	cmp	r0, r8
 80136e4:	bfc8      	it	gt
 80136e6:	f100 0801 	addgt.w	r8, r0, #1
 80136ea:	f894 0044 	ldrb.w	r0, [r4, #68]	@ 0x44
 80136ee:	bfd8      	it	le
 80136f0:	f108 0801 	addle.w	r8, r8, #1
 80136f4:	3001      	adds	r0, #1
 80136f6:	fb08 f808 	mul.w	r8, r8, r8
 80136fa:	1040      	asrs	r0, r0, #1
 80136fc:	fb07 8707 	mla	r7, r7, r7, r8
 8013700:	f1c0 005a 	rsb	r0, r0, #90	@ 0x5a
 8013704:	fb91 f1f3 	sdiv	r1, r1, r3
 8013708:	1a52      	subs	r2, r2, r1
 801370a:	920f      	str	r2, [sp, #60]	@ 0x3c
 801370c:	f7ff fcf2 	bl	80130f4 <_ZN8touchgfx7CWRUtil4sineEi>
 8013710:	a92e      	add	r1, sp, #184	@ 0xb8
 8013712:	f841 0d74 	str.w	r0, [r1, #-116]!
 8013716:	a80f      	add	r0, sp, #60	@ 0x3c
 8013718:	f7ff fce1 	bl	80130de <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 801371c:	f04f 0c20 	mov.w	ip, #32
 8013720:	9b03      	ldr	r3, [sp, #12]
 8013722:	fb90 f0fc 	sdiv	r0, r0, ip
 8013726:	4340      	muls	r0, r0
 8013728:	4287      	cmp	r7, r0
 801372a:	da04      	bge.n	8013736 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0xf2>
 801372c:	2401      	movs	r4, #1
 801372e:	4620      	mov	r0, r4
 8013730:	b02f      	add	sp, #188	@ 0xbc
 8013732:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013736:	6c21      	ldr	r1, [r4, #64]	@ 0x40
 8013738:	6b60      	ldr	r0, [r4, #52]	@ 0x34
 801373a:	fb91 f2f3 	sdiv	r2, r1, r3
 801373e:	4402      	add	r2, r0
 8013740:	fb92 f2fc 	sdiv	r2, r2, ip
 8013744:	f9ba 1000 	ldrsh.w	r1, [sl]
 8013748:	3201      	adds	r2, #1
 801374a:	f8ba 3004 	ldrh.w	r3, [sl, #4]
 801374e:	4352      	muls	r2, r2
 8013750:	440b      	add	r3, r1
 8013752:	b21b      	sxth	r3, r3
 8013754:	454b      	cmp	r3, r9
 8013756:	bfa8      	it	ge
 8013758:	464b      	movge	r3, r9
 801375a:	428b      	cmp	r3, r1
 801375c:	bfac      	ite	ge
 801375e:	eba9 0903 	subge.w	r9, r9, r3
 8013762:	eba9 0901 	sublt.w	r9, r9, r1
 8013766:	f8ba 3006 	ldrh.w	r3, [sl, #6]
 801376a:	f9ba 1002 	ldrsh.w	r1, [sl, #2]
 801376e:	440b      	add	r3, r1
 8013770:	b21b      	sxth	r3, r3
 8013772:	455b      	cmp	r3, fp
 8013774:	bfa8      	it	ge
 8013776:	465b      	movge	r3, fp
 8013778:	428b      	cmp	r3, r1
 801377a:	bfac      	ite	ge
 801377c:	ebab 0b03 	subge.w	fp, fp, r3
 8013780:	ebab 0b01 	sublt.w	fp, fp, r1
 8013784:	fb0b fb0b 	mul.w	fp, fp, fp
 8013788:	fb09 b909 	mla	r9, r9, r9, fp
 801378c:	4591      	cmp	r9, r2
 801378e:	dccd      	bgt.n	801372c <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0xe8>
 8013790:	f10d 093c 	add.w	r9, sp, #60	@ 0x3c
 8013794:	4621      	mov	r1, r4
 8013796:	6aa7      	ldr	r7, [r4, #40]	@ 0x28
 8013798:	4648      	mov	r0, r9
 801379a:	f005 f877 	bl	801888c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801379e:	6823      	ldr	r3, [r4, #0]
 80137a0:	4620      	mov	r0, r4
 80137a2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80137a4:	4798      	blx	r3
 80137a6:	4653      	mov	r3, sl
 80137a8:	9000      	str	r0, [sp, #0]
 80137aa:	464a      	mov	r2, r9
 80137ac:	4639      	mov	r1, r7
 80137ae:	a811      	add	r0, sp, #68	@ 0x44
 80137b0:	f011 fec0 	bl	8025534 <_ZN8touchgfx6CanvasC1EPKNS_15AbstractPainterERKNS_4RectES6_h>
 80137b4:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 80137b6:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80137b8:	920b      	str	r2, [sp, #44]	@ 0x2c
 80137ba:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
 80137be:	930c      	str	r3, [sp, #48]	@ 0x30
 80137c0:	dd07      	ble.n	80137d2 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x18e>
 80137c2:	2102      	movs	r1, #2
 80137c4:	fb93 f3f1 	sdiv	r3, r3, r1
 80137c8:	4413      	add	r3, r2
 80137ca:	930c      	str	r3, [sp, #48]	@ 0x30
 80137cc:	fb93 f3f1 	sdiv	r3, r3, r1
 80137d0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80137d2:	f04f 0a02 	mov.w	sl, #2
 80137d6:	4628      	mov	r0, r5
 80137d8:	f894 7044 	ldrb.w	r7, [r4, #68]	@ 0x44
 80137dc:	f10d 08b8 	add.w	r8, sp, #184	@ 0xb8
 80137e0:	e9dd 230b 	ldrd	r2, r3, [sp, #44]	@ 0x2c
 80137e4:	017f      	lsls	r7, r7, #5
 80137e6:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 80137ea:	930d      	str	r3, [sp, #52]	@ 0x34
 80137ec:	f7ff fca2 	bl	8013134 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 80137f0:	4649      	mov	r1, r9
 80137f2:	900f      	str	r0, [sp, #60]	@ 0x3c
 80137f4:	a80d      	add	r0, sp, #52	@ 0x34
 80137f6:	f7ff fc72 	bl	80130de <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 80137fa:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 80137fc:	fb90 f0fa 	sdiv	r0, r0, sl
 8013800:	eb00 0b03 	add.w	fp, r0, r3
 8013804:	4628      	mov	r0, r5
 8013806:	f7ff fcb4 	bl	8013172 <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 801380a:	f848 0d80 	str.w	r0, [r8, #-128]!
 801380e:	a80d      	add	r0, sp, #52	@ 0x34
 8013810:	4641      	mov	r1, r8
 8013812:	f7ff fc64 	bl	80130de <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8013816:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8013818:	4659      	mov	r1, fp
 801381a:	fb90 f0fa 	sdiv	r0, r0, sl
 801381e:	1a12      	subs	r2, r2, r0
 8013820:	a811      	add	r0, sp, #68	@ 0x44
 8013822:	f011 ffd3 	bl	80257cc <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_>
 8013826:	f105 0a20 	add.w	sl, r5, #32
 801382a:	bb67      	cbnz	r7, 8013886 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x242>
 801382c:	46ab      	mov	fp, r5
 801382e:	45b2      	cmp	sl, r6
 8013830:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8013832:	dc33      	bgt.n	801389c <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x258>
 8013834:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8013836:	4650      	mov	r0, sl
 8013838:	eb02 0241 	add.w	r2, r2, r1, lsl #1
 801383c:	920d      	str	r2, [sp, #52]	@ 0x34
 801383e:	f7ff fc79 	bl	8013134 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 8013842:	4641      	mov	r1, r8
 8013844:	900e      	str	r0, [sp, #56]	@ 0x38
 8013846:	a80d      	add	r0, sp, #52	@ 0x34
 8013848:	f7ff fc49 	bl	80130de <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 801384c:	2302      	movs	r3, #2
 801384e:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8013850:	fb90 f0f3 	sdiv	r0, r0, r3
 8013854:	eb00 0b02 	add.w	fp, r0, r2
 8013858:	4650      	mov	r0, sl
 801385a:	f7ff fc8a 	bl	8013172 <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 801385e:	4649      	mov	r1, r9
 8013860:	900f      	str	r0, [sp, #60]	@ 0x3c
 8013862:	a80d      	add	r0, sp, #52	@ 0x34
 8013864:	f7ff fc3b 	bl	80130de <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8013868:	2302      	movs	r3, #2
 801386a:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 801386c:	4659      	mov	r1, fp
 801386e:	46d3      	mov	fp, sl
 8013870:	44ba      	add	sl, r7
 8013872:	fb90 f0f3 	sdiv	r0, r0, r3
 8013876:	1a12      	subs	r2, r2, r0
 8013878:	a811      	add	r0, sp, #68	@ 0x44
 801387a:	f011 fff4 	bl	8025866 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 801387e:	e7d6      	b.n	801382e <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x1ea>
 8013880:	fb92 f2f3 	sdiv	r2, r2, r3
 8013884:	e75e      	b.n	8013744 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x100>
 8013886:	fb9a f2f7 	sdiv	r2, sl, r7
 801388a:	fb07 a212 	mls	r2, r7, r2, sl
 801388e:	1aba      	subs	r2, r7, r2
 8013890:	fb92 f1f7 	sdiv	r1, r2, r7
 8013894:	fb07 2211 	mls	r2, r7, r1, r2
 8013898:	4492      	add	sl, r2
 801389a:	e7c7      	b.n	801382c <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x1e8>
 801389c:	455e      	cmp	r6, fp
 801389e:	dd23      	ble.n	80138e8 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x2a4>
 80138a0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80138a2:	f04f 0a02 	mov.w	sl, #2
 80138a6:	4630      	mov	r0, r6
 80138a8:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 80138ac:	920d      	str	r2, [sp, #52]	@ 0x34
 80138ae:	f7ff fc41 	bl	8013134 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 80138b2:	4641      	mov	r1, r8
 80138b4:	900e      	str	r0, [sp, #56]	@ 0x38
 80138b6:	a80d      	add	r0, sp, #52	@ 0x34
 80138b8:	f7ff fc11 	bl	80130de <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 80138bc:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 80138be:	fb90 f0fa 	sdiv	r0, r0, sl
 80138c2:	4403      	add	r3, r0
 80138c4:	4630      	mov	r0, r6
 80138c6:	9303      	str	r3, [sp, #12]
 80138c8:	f7ff fc53 	bl	8013172 <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 80138cc:	4649      	mov	r1, r9
 80138ce:	900f      	str	r0, [sp, #60]	@ 0x3c
 80138d0:	a80d      	add	r0, sp, #52	@ 0x34
 80138d2:	f7ff fc04 	bl	80130de <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 80138d6:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 80138d8:	9b03      	ldr	r3, [sp, #12]
 80138da:	fb90 f0fa 	sdiv	r0, r0, sl
 80138de:	4619      	mov	r1, r3
 80138e0:	1a12      	subs	r2, r2, r0
 80138e2:	a811      	add	r0, sp, #68	@ 0x44
 80138e4:	f011 ffbf 	bl	8025866 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 80138e8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80138ea:	b99b      	cbnz	r3, 8013914 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x2d0>
 80138ec:	1b75      	subs	r5, r6, r5
 80138ee:	f5b5 5f34 	cmp.w	r5, #11520	@ 0x2d00
 80138f2:	da04      	bge.n	80138fe <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x2ba>
 80138f4:	a811      	add	r0, sp, #68	@ 0x44
 80138f6:	e9d4 120b 	ldrd	r1, r2, [r4, #44]	@ 0x2c
 80138fa:	f011 ffb4 	bl	8025866 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 80138fe:	21ff      	movs	r1, #255	@ 0xff
 8013900:	a811      	add	r0, sp, #68	@ 0x44
 8013902:	f011 feab 	bl	802565c <_ZN8touchgfx6Canvas6renderEh>
 8013906:	4604      	mov	r4, r0
 8013908:	4b89      	ldr	r3, [pc, #548]	@ (8013b30 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x4ec>)
 801390a:	a816      	add	r0, sp, #88	@ 0x58
 801390c:	9311      	str	r3, [sp, #68]	@ 0x44
 801390e:	f001 fac3 	bl	8014e98 <_ZN8touchgfx7OutlineD1Ev>
 8013912:	e70c      	b.n	801372e <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0xea>
 8013914:	e9dd 2317 	ldrd	r2, r3, [sp, #92]	@ 0x5c
 8013918:	429a      	cmp	r2, r3
 801391a:	f0c0 8107 	bcc.w	8013b2c <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x4e8>
 801391e:	1b73      	subs	r3, r6, r5
 8013920:	f894 a045 	ldrb.w	sl, [r4, #69]	@ 0x45
 8013924:	f5b3 5f34 	cmp.w	r3, #11520	@ 0x2d00
 8013928:	ea4f 1a4a 	mov.w	sl, sl, lsl #5
 801392c:	9303      	str	r3, [sp, #12]
 801392e:	da43      	bge.n	80139b8 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x374>
 8013930:	4630      	mov	r0, r6
 8013932:	f7ff fbff 	bl	8013134 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 8013936:	4649      	mov	r1, r9
 8013938:	900f      	str	r0, [sp, #60]	@ 0x3c
 801393a:	a80b      	add	r0, sp, #44	@ 0x2c
 801393c:	f7ff fbcf 	bl	80130de <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8013940:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8013942:	18c3      	adds	r3, r0, r3
 8013944:	4630      	mov	r0, r6
 8013946:	9305      	str	r3, [sp, #20]
 8013948:	f7ff fc13 	bl	8013172 <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 801394c:	4649      	mov	r1, r9
 801394e:	900f      	str	r0, [sp, #60]	@ 0x3c
 8013950:	a80b      	add	r0, sp, #44	@ 0x2c
 8013952:	f7ff fbc4 	bl	80130de <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8013956:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8013958:	f506 52b4 	add.w	r2, r6, #5760	@ 0x1680
 801395c:	1a1b      	subs	r3, r3, r0
 801395e:	9206      	str	r2, [sp, #24]
 8013960:	9304      	str	r3, [sp, #16]
 8013962:	eb06 030a 	add.w	r3, r6, sl
 8013966:	9a06      	ldr	r2, [sp, #24]
 8013968:	4293      	cmp	r3, r2
 801396a:	da25      	bge.n	80139b8 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x374>
 801396c:	4618      	mov	r0, r3
 801396e:	9308      	str	r3, [sp, #32]
 8013970:	f7ff fbe0 	bl	8013134 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 8013974:	4649      	mov	r1, r9
 8013976:	900f      	str	r0, [sp, #60]	@ 0x3c
 8013978:	a80c      	add	r0, sp, #48	@ 0x30
 801397a:	f7ff fbb0 	bl	80130de <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 801397e:	2202      	movs	r2, #2
 8013980:	9b05      	ldr	r3, [sp, #20]
 8013982:	9209      	str	r2, [sp, #36]	@ 0x24
 8013984:	fb90 f0f2 	sdiv	r0, r0, r2
 8013988:	18c3      	adds	r3, r0, r3
 801398a:	9307      	str	r3, [sp, #28]
 801398c:	9b08      	ldr	r3, [sp, #32]
 801398e:	4618      	mov	r0, r3
 8013990:	f7ff fbef 	bl	8013172 <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 8013994:	a92e      	add	r1, sp, #184	@ 0xb8
 8013996:	f841 0d80 	str.w	r0, [r1, #-128]!
 801399a:	a80c      	add	r0, sp, #48	@ 0x30
 801399c:	f7ff fb9f 	bl	80130de <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 80139a0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80139a2:	9b04      	ldr	r3, [sp, #16]
 80139a4:	9907      	ldr	r1, [sp, #28]
 80139a6:	fb90 f2f2 	sdiv	r2, r0, r2
 80139aa:	a811      	add	r0, sp, #68	@ 0x44
 80139ac:	1a9a      	subs	r2, r3, r2
 80139ae:	f011 ff5a 	bl	8025866 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 80139b2:	9b08      	ldr	r3, [sp, #32]
 80139b4:	4453      	add	r3, sl
 80139b6:	e7d6      	b.n	8013966 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x322>
 80139b8:	455e      	cmp	r6, fp
 80139ba:	dd25      	ble.n	8013a08 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x3c4>
 80139bc:	4630      	mov	r0, r6
 80139be:	e9dd 230b 	ldrd	r2, r3, [sp, #44]	@ 0x2c
 80139c2:	ebc3 0342 	rsb	r3, r3, r2, lsl #1
 80139c6:	930d      	str	r3, [sp, #52]	@ 0x34
 80139c8:	f7ff fbb4 	bl	8013134 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 80139cc:	4641      	mov	r1, r8
 80139ce:	900e      	str	r0, [sp, #56]	@ 0x38
 80139d0:	a80d      	add	r0, sp, #52	@ 0x34
 80139d2:	f7ff fb84 	bl	80130de <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 80139d6:	2202      	movs	r2, #2
 80139d8:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 80139da:	9204      	str	r2, [sp, #16]
 80139dc:	fb90 f0f2 	sdiv	r0, r0, r2
 80139e0:	eb00 0903 	add.w	r9, r0, r3
 80139e4:	4630      	mov	r0, r6
 80139e6:	f7ff fbc4 	bl	8013172 <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 80139ea:	a92e      	add	r1, sp, #184	@ 0xb8
 80139ec:	f841 0d7c 	str.w	r0, [r1, #-124]!
 80139f0:	a80d      	add	r0, sp, #52	@ 0x34
 80139f2:	f7ff fb74 	bl	80130de <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 80139f6:	9a04      	ldr	r2, [sp, #16]
 80139f8:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80139fa:	4649      	mov	r1, r9
 80139fc:	fb90 f2f2 	sdiv	r2, r0, r2
 8013a00:	a811      	add	r0, sp, #68	@ 0x44
 8013a02:	1a9a      	subs	r2, r3, r2
 8013a04:	f011 ff2f 	bl	8025866 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 8013a08:	46d9      	mov	r9, fp
 8013a0a:	2602      	movs	r6, #2
 8013a0c:	45a9      	cmp	r9, r5
 8013a0e:	db25      	blt.n	8013a5c <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x418>
 8013a10:	4648      	mov	r0, r9
 8013a12:	e9dd 230b 	ldrd	r2, r3, [sp, #44]	@ 0x2c
 8013a16:	ebc3 0342 	rsb	r3, r3, r2, lsl #1
 8013a1a:	930d      	str	r3, [sp, #52]	@ 0x34
 8013a1c:	f7ff fb8a 	bl	8013134 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 8013a20:	4641      	mov	r1, r8
 8013a22:	900e      	str	r0, [sp, #56]	@ 0x38
 8013a24:	a80d      	add	r0, sp, #52	@ 0x34
 8013a26:	f7ff fb5a 	bl	80130de <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8013a2a:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8013a2c:	fb90 f0f6 	sdiv	r0, r0, r6
 8013a30:	eb00 0b03 	add.w	fp, r0, r3
 8013a34:	4648      	mov	r0, r9
 8013a36:	f7ff fb9c 	bl	8013172 <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 8013a3a:	a90f      	add	r1, sp, #60	@ 0x3c
 8013a3c:	900f      	str	r0, [sp, #60]	@ 0x3c
 8013a3e:	a80d      	add	r0, sp, #52	@ 0x34
 8013a40:	f7ff fb4d 	bl	80130de <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8013a44:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8013a46:	4659      	mov	r1, fp
 8013a48:	46cb      	mov	fp, r9
 8013a4a:	eba9 0907 	sub.w	r9, r9, r7
 8013a4e:	fb90 f0f6 	sdiv	r0, r0, r6
 8013a52:	1a12      	subs	r2, r2, r0
 8013a54:	a811      	add	r0, sp, #68	@ 0x44
 8013a56:	f011 ff06 	bl	8025866 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 8013a5a:	e7d7      	b.n	8013a0c <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x3c8>
 8013a5c:	455d      	cmp	r5, fp
 8013a5e:	da22      	bge.n	8013aa6 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x462>
 8013a60:	2602      	movs	r6, #2
 8013a62:	4628      	mov	r0, r5
 8013a64:	e9dd 230b 	ldrd	r2, r3, [sp, #44]	@ 0x2c
 8013a68:	ebc3 0342 	rsb	r3, r3, r2, lsl #1
 8013a6c:	930d      	str	r3, [sp, #52]	@ 0x34
 8013a6e:	f7ff fb61 	bl	8013134 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 8013a72:	4641      	mov	r1, r8
 8013a74:	900e      	str	r0, [sp, #56]	@ 0x38
 8013a76:	a80d      	add	r0, sp, #52	@ 0x34
 8013a78:	f7ff fb31 	bl	80130de <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8013a7c:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8013a7e:	fb90 f0f6 	sdiv	r0, r0, r6
 8013a82:	4407      	add	r7, r0
 8013a84:	4628      	mov	r0, r5
 8013a86:	f7ff fb74 	bl	8013172 <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 8013a8a:	a92e      	add	r1, sp, #184	@ 0xb8
 8013a8c:	f841 0d7c 	str.w	r0, [r1, #-124]!
 8013a90:	a80d      	add	r0, sp, #52	@ 0x34
 8013a92:	f7ff fb24 	bl	80130de <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8013a96:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8013a98:	4639      	mov	r1, r7
 8013a9a:	fb90 f0f6 	sdiv	r0, r0, r6
 8013a9e:	1a12      	subs	r2, r2, r0
 8013aa0:	a811      	add	r0, sp, #68	@ 0x44
 8013aa2:	f011 fee0 	bl	8025866 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 8013aa6:	9b03      	ldr	r3, [sp, #12]
 8013aa8:	f5b3 5f34 	cmp.w	r3, #11520	@ 0x2d00
 8013aac:	f6bf af27 	bge.w	80138fe <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x2ba>
 8013ab0:	ae2e      	add	r6, sp, #184	@ 0xb8
 8013ab2:	4628      	mov	r0, r5
 8013ab4:	f7ff fb3e 	bl	8013134 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 8013ab8:	f04f 0b02 	mov.w	fp, #2
 8013abc:	f846 0d7c 	str.w	r0, [r6, #-124]!
 8013ac0:	a80b      	add	r0, sp, #44	@ 0x2c
 8013ac2:	4631      	mov	r1, r6
 8013ac4:	f7ff fb0b 	bl	80130de <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8013ac8:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8013aca:	eb00 0903 	add.w	r9, r0, r3
 8013ace:	4628      	mov	r0, r5
 8013ad0:	f7ff fb4f 	bl	8013172 <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 8013ad4:	4631      	mov	r1, r6
 8013ad6:	900f      	str	r0, [sp, #60]	@ 0x3c
 8013ad8:	a80b      	add	r0, sp, #44	@ 0x2c
 8013ada:	f7ff fb00 	bl	80130de <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8013ade:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8013ae0:	f5a5 54b4 	sub.w	r4, r5, #5760	@ 0x1680
 8013ae4:	eba3 0800 	sub.w	r8, r3, r0
 8013ae8:	4454      	add	r4, sl
 8013aea:	42a5      	cmp	r5, r4
 8013aec:	f77f af07 	ble.w	80138fe <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x2ba>
 8013af0:	4620      	mov	r0, r4
 8013af2:	f7ff fb1f 	bl	8013134 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 8013af6:	4631      	mov	r1, r6
 8013af8:	900f      	str	r0, [sp, #60]	@ 0x3c
 8013afa:	a80c      	add	r0, sp, #48	@ 0x30
 8013afc:	f7ff faef 	bl	80130de <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8013b00:	fb90 f0fb 	sdiv	r0, r0, fp
 8013b04:	eb00 0709 	add.w	r7, r0, r9
 8013b08:	4620      	mov	r0, r4
 8013b0a:	f7ff fb32 	bl	8013172 <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 8013b0e:	a90e      	add	r1, sp, #56	@ 0x38
 8013b10:	900e      	str	r0, [sp, #56]	@ 0x38
 8013b12:	a80c      	add	r0, sp, #48	@ 0x30
 8013b14:	f7ff fae3 	bl	80130de <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8013b18:	4639      	mov	r1, r7
 8013b1a:	4454      	add	r4, sl
 8013b1c:	fb90 f2fb 	sdiv	r2, r0, fp
 8013b20:	a811      	add	r0, sp, #68	@ 0x44
 8013b22:	eba8 0202 	sub.w	r2, r8, r2
 8013b26:	f011 fe9e 	bl	8025866 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 8013b2a:	e7de      	b.n	8013aea <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x4a6>
 8013b2c:	2400      	movs	r4, #0
 8013b2e:	e6eb      	b.n	8013908 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x2c4>
 8013b30:	0802ca4c 	.word	0x0802ca4c

08013b34 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE>:
 8013b34:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8013b36:	6803      	ldr	r3, [r0, #0]
 8013b38:	460d      	mov	r5, r1
 8013b3a:	4604      	mov	r4, r0
 8013b3c:	4601      	mov	r1, r0
 8013b3e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8013b40:	a802      	add	r0, sp, #8
 8013b42:	4798      	blx	r3
 8013b44:	6828      	ldr	r0, [r5, #0]
 8013b46:	6869      	ldr	r1, [r5, #4]
 8013b48:	466b      	mov	r3, sp
 8013b4a:	c303      	stmia	r3!, {r0, r1}
 8013b4c:	4668      	mov	r0, sp
 8013b4e:	4619      	mov	r1, r3
 8013b50:	f7fb ff56 	bl	800fa00 <_ZN8touchgfx4RectaNERKS0_>
 8013b54:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8013b56:	b188      	cbz	r0, 8013b7c <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
 8013b58:	6803      	ldr	r3, [r0, #0]
 8013b5a:	1d21      	adds	r1, r4, #4
 8013b5c:	68db      	ldr	r3, [r3, #12]
 8013b5e:	4798      	blx	r3
 8013b60:	b160      	cbz	r0, 8013b7c <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
 8013b62:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 8013b66:	2b00      	cmp	r3, #0
 8013b68:	dd08      	ble.n	8013b7c <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
 8013b6a:	f9bd 5006 	ldrsh.w	r5, [sp, #6]
 8013b6e:	2d00      	cmp	r5, #0
 8013b70:	dd04      	ble.n	8013b7c <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
 8013b72:	4a2b      	ldr	r2, [pc, #172]	@ (8013c20 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xec>)
 8013b74:	7812      	ldrb	r2, [r2, #0]
 8013b76:	b11a      	cbz	r2, 8013b80 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x4c>
 8013b78:	2a01      	cmp	r2, #1
 8013b7a:	d029      	beq.n	8013bd0 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x9c>
 8013b7c:	b004      	add	sp, #16
 8013b7e:	bd70      	pop	{r4, r5, r6, pc}
 8013b80:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8013b84:	441d      	add	r5, r3
 8013b86:	b2ad      	uxth	r5, r5
 8013b88:	b22e      	sxth	r6, r5
 8013b8a:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
 8013b8e:	42b3      	cmp	r3, r6
 8013b90:	daf4      	bge.n	8013b7c <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
 8013b92:	6823      	ldr	r3, [r4, #0]
 8013b94:	4669      	mov	r1, sp
 8013b96:	4620      	mov	r0, r4
 8013b98:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8013b9a:	4798      	blx	r3
 8013b9c:	b940      	cbnz	r0, 8013bb0 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x7c>
 8013b9e:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
 8013ba2:	2b01      	cmp	r3, #1
 8013ba4:	d004      	beq.n	8013bb0 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x7c>
 8013ba6:	3301      	adds	r3, #1
 8013ba8:	105b      	asrs	r3, r3, #1
 8013baa:	f8ad 3006 	strh.w	r3, [sp, #6]
 8013bae:	e7f0      	b.n	8013b92 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x5e>
 8013bb0:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8013bb4:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8013bb8:	4413      	add	r3, r2
 8013bba:	b29b      	uxth	r3, r3
 8013bbc:	441a      	add	r2, r3
 8013bbe:	f8ad 3002 	strh.w	r3, [sp, #2]
 8013bc2:	b212      	sxth	r2, r2
 8013bc4:	4296      	cmp	r6, r2
 8013bc6:	dae0      	bge.n	8013b8a <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x56>
 8013bc8:	1aeb      	subs	r3, r5, r3
 8013bca:	f8ad 3006 	strh.w	r3, [sp, #6]
 8013bce:	e7dc      	b.n	8013b8a <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x56>
 8013bd0:	f8bd 5000 	ldrh.w	r5, [sp]
 8013bd4:	441d      	add	r5, r3
 8013bd6:	b2ad      	uxth	r5, r5
 8013bd8:	b22e      	sxth	r6, r5
 8013bda:	f9bd 3000 	ldrsh.w	r3, [sp]
 8013bde:	42b3      	cmp	r3, r6
 8013be0:	dacc      	bge.n	8013b7c <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
 8013be2:	6823      	ldr	r3, [r4, #0]
 8013be4:	4669      	mov	r1, sp
 8013be6:	4620      	mov	r0, r4
 8013be8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8013bea:	4798      	blx	r3
 8013bec:	b940      	cbnz	r0, 8013c00 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xcc>
 8013bee:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 8013bf2:	2b01      	cmp	r3, #1
 8013bf4:	d004      	beq.n	8013c00 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xcc>
 8013bf6:	3301      	adds	r3, #1
 8013bf8:	105b      	asrs	r3, r3, #1
 8013bfa:	f8ad 3004 	strh.w	r3, [sp, #4]
 8013bfe:	e7f0      	b.n	8013be2 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xae>
 8013c00:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 8013c04:	f8bd 3000 	ldrh.w	r3, [sp]
 8013c08:	4413      	add	r3, r2
 8013c0a:	b29b      	uxth	r3, r3
 8013c0c:	441a      	add	r2, r3
 8013c0e:	f8ad 3000 	strh.w	r3, [sp]
 8013c12:	b212      	sxth	r2, r2
 8013c14:	4296      	cmp	r6, r2
 8013c16:	dae0      	bge.n	8013bda <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xa6>
 8013c18:	1aeb      	subs	r3, r5, r3
 8013c1a:	f8ad 3004 	strh.w	r3, [sp, #4]
 8013c1e:	e7dc      	b.n	8013bda <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xa6>
 8013c20:	24028e18 	.word	0x24028e18

08013c24 <_ZNK8touchgfx12CanvasWidget10invalidateEv>:
 8013c24:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8013c26:	6803      	ldr	r3, [r0, #0]
 8013c28:	4604      	mov	r4, r0
 8013c2a:	4601      	mov	r1, r0
 8013c2c:	4668      	mov	r0, sp
 8013c2e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8013c30:	4798      	blx	r3
 8013c32:	2100      	movs	r1, #0
 8013c34:	f9b4 2008 	ldrsh.w	r2, [r4, #8]
 8013c38:	4668      	mov	r0, sp
 8013c3a:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 8013c3e:	9102      	str	r1, [sp, #8]
 8013c40:	a902      	add	r1, sp, #8
 8013c42:	f8ad 200c 	strh.w	r2, [sp, #12]
 8013c46:	f8ad 300e 	strh.w	r3, [sp, #14]
 8013c4a:	f7fb fed9 	bl	800fa00 <_ZN8touchgfx4RectaNERKS0_>
 8013c4e:	6823      	ldr	r3, [r4, #0]
 8013c50:	4669      	mov	r1, sp
 8013c52:	4620      	mov	r0, r4
 8013c54:	691b      	ldr	r3, [r3, #16]
 8013c56:	4798      	blx	r3
 8013c58:	b004      	add	sp, #16
 8013c5a:	bd10      	pop	{r4, pc}

08013c5c <_ZN8touchgfx12CanvasWidgetC1Ev>:
 8013c5c:	2101      	movs	r1, #1
 8013c5e:	2200      	movs	r2, #0
 8013c60:	f880 1025 	strb.w	r1, [r0, #37]	@ 0x25
 8013c64:	490a      	ldr	r1, [pc, #40]	@ (8013c90 <_ZN8touchgfx12CanvasWidgetC1Ev+0x34>)
 8013c66:	8082      	strh	r2, [r0, #4]
 8013c68:	6001      	str	r1, [r0, #0]
 8013c6a:	21ff      	movs	r1, #255	@ 0xff
 8013c6c:	80c2      	strh	r2, [r0, #6]
 8013c6e:	8102      	strh	r2, [r0, #8]
 8013c70:	8142      	strh	r2, [r0, #10]
 8013c72:	8182      	strh	r2, [r0, #12]
 8013c74:	81c2      	strh	r2, [r0, #14]
 8013c76:	8202      	strh	r2, [r0, #16]
 8013c78:	8242      	strh	r2, [r0, #18]
 8013c7a:	61c2      	str	r2, [r0, #28]
 8013c7c:	8402      	strh	r2, [r0, #32]
 8013c7e:	8442      	strh	r2, [r0, #34]	@ 0x22
 8013c80:	f880 2024 	strb.w	r2, [r0, #36]	@ 0x24
 8013c84:	f880 1026 	strb.w	r1, [r0, #38]	@ 0x26
 8013c88:	6282      	str	r2, [r0, #40]	@ 0x28
 8013c8a:	e9c0 2205 	strd	r2, r2, [r0, #20]
 8013c8e:	4770      	bx	lr
 8013c90:	0802c288 	.word	0x0802c288

08013c94 <_ZN8touchgfx13AnimatedImage12setBitmapEndERKNS_6BitmapE>:
 8013c94:	880b      	ldrh	r3, [r1, #0]
 8013c96:	8643      	strh	r3, [r0, #50]	@ 0x32
 8013c98:	4770      	bx	lr

08013c9a <_ZN8touchgfx13AnimatedImageD1Ev>:
 8013c9a:	4770      	bx	lr

08013c9c <_ZN8touchgfx13AnimatedImage9setBitmapERKNS_6BitmapE>:
 8013c9c:	880b      	ldrh	r3, [r1, #0]
 8013c9e:	8603      	strh	r3, [r0, #48]	@ 0x30
 8013ca0:	f001 b887 	b.w	8014db2 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>

08013ca4 <_ZN8touchgfx13AnimatedImage13stopAnimationEv>:
 8013ca4:	b513      	push	{r0, r1, r4, lr}
 8013ca6:	f890 3038 	ldrb.w	r3, [r0, #56]	@ 0x38
 8013caa:	4604      	mov	r4, r0
 8013cac:	b143      	cbz	r3, 8013cc0 <_ZN8touchgfx13AnimatedImage13stopAnimationEv+0x1c>
 8013cae:	f003 fc8f 	bl	80175d0 <_ZN8touchgfx11Application11getInstanceEv>
 8013cb2:	4621      	mov	r1, r4
 8013cb4:	3004      	adds	r0, #4
 8013cb6:	f003 fcb0 	bl	801761a <_ZN8touchgfx11Application12TimerWidgets6removeEPKNS_8DrawableE>
 8013cba:	2300      	movs	r3, #0
 8013cbc:	f884 3038 	strb.w	r3, [r4, #56]	@ 0x38
 8013cc0:	f894 3036 	ldrb.w	r3, [r4, #54]	@ 0x36
 8013cc4:	b163      	cbz	r3, 8013ce0 <_ZN8touchgfx13AnimatedImage13stopAnimationEv+0x3c>
 8013cc6:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 8013cc8:	a901      	add	r1, sp, #4
 8013cca:	4620      	mov	r0, r4
 8013ccc:	f8ad 3004 	strh.w	r3, [sp, #4]
 8013cd0:	f001 f86f 	bl	8014db2 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 8013cd4:	6823      	ldr	r3, [r4, #0]
 8013cd6:	4620      	mov	r0, r4
 8013cd8:	695b      	ldr	r3, [r3, #20]
 8013cda:	4798      	blx	r3
 8013cdc:	b002      	add	sp, #8
 8013cde:	bd10      	pop	{r4, pc}
 8013ce0:	8e23      	ldrh	r3, [r4, #48]	@ 0x30
 8013ce2:	e7f1      	b.n	8013cc8 <_ZN8touchgfx13AnimatedImage13stopAnimationEv+0x24>

08013ce4 <_ZN8touchgfx13AnimatedImage14startAnimationEbbb>:
 8013ce4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8013ce6:	f64f 77ff 	movw	r7, #65535	@ 0xffff
 8013cea:	8e05      	ldrh	r5, [r0, #48]	@ 0x30
 8013cec:	4604      	mov	r4, r0
 8013cee:	42bd      	cmp	r5, r7
 8013cf0:	d01a      	beq.n	8013d28 <_ZN8touchgfx13AnimatedImage14startAnimationEbbb+0x44>
 8013cf2:	8e46      	ldrh	r6, [r0, #50]	@ 0x32
 8013cf4:	42be      	cmp	r6, r7
 8013cf6:	d017      	beq.n	8013d28 <_ZN8touchgfx13AnimatedImage14startAnimationEbbb+0x44>
 8013cf8:	f880 1036 	strb.w	r1, [r0, #54]	@ 0x36
 8013cfc:	f880 3037 	strb.w	r3, [r0, #55]	@ 0x37
 8013d00:	b1a1      	cbz	r1, 8013d2c <_ZN8touchgfx13AnimatedImage14startAnimationEbbb+0x48>
 8013d02:	b142      	cbz	r2, 8013d16 <_ZN8touchgfx13AnimatedImage14startAnimationEbbb+0x32>
 8013d04:	a902      	add	r1, sp, #8
 8013d06:	f821 6d04 	strh.w	r6, [r1, #-4]!
 8013d0a:	f001 f852 	bl	8014db2 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 8013d0e:	6823      	ldr	r3, [r4, #0]
 8013d10:	4620      	mov	r0, r4
 8013d12:	695b      	ldr	r3, [r3, #20]
 8013d14:	4798      	blx	r3
 8013d16:	f003 fc5b 	bl	80175d0 <_ZN8touchgfx11Application11getInstanceEv>
 8013d1a:	4621      	mov	r1, r4
 8013d1c:	3004      	adds	r0, #4
 8013d1e:	f003 fd25 	bl	801776c <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE>
 8013d22:	2301      	movs	r3, #1
 8013d24:	f884 3038 	strb.w	r3, [r4, #56]	@ 0x38
 8013d28:	b003      	add	sp, #12
 8013d2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013d2c:	2a00      	cmp	r2, #0
 8013d2e:	d0f2      	beq.n	8013d16 <_ZN8touchgfx13AnimatedImage14startAnimationEbbb+0x32>
 8013d30:	a902      	add	r1, sp, #8
 8013d32:	f821 5d04 	strh.w	r5, [r1, #-4]!
 8013d36:	e7e8      	b.n	8013d0a <_ZN8touchgfx13AnimatedImage14startAnimationEbbb+0x26>

08013d38 <_ZN8touchgfx13AnimatedImageD0Ev>:
 8013d38:	b510      	push	{r4, lr}
 8013d3a:	4604      	mov	r4, r0
 8013d3c:	213c      	movs	r1, #60	@ 0x3c
 8013d3e:	f012 ff26 	bl	8026b8e <_ZdlPvj>
 8013d42:	4620      	mov	r0, r4
 8013d44:	bd10      	pop	{r4, pc}

08013d46 <_ZN8touchgfx13AnimatedImage14pauseAnimationEv>:
 8013d46:	b510      	push	{r4, lr}
 8013d48:	f890 3038 	ldrb.w	r3, [r0, #56]	@ 0x38
 8013d4c:	4604      	mov	r4, r0
 8013d4e:	b14b      	cbz	r3, 8013d64 <_ZN8touchgfx13AnimatedImage14pauseAnimationEv+0x1e>
 8013d50:	f003 fc3e 	bl	80175d0 <_ZN8touchgfx11Application11getInstanceEv>
 8013d54:	4621      	mov	r1, r4
 8013d56:	3004      	adds	r0, #4
 8013d58:	f003 fc5f 	bl	801761a <_ZN8touchgfx11Application12TimerWidgets6removeEPKNS_8DrawableE>
 8013d5c:	2300      	movs	r3, #0
 8013d5e:	f884 3038 	strb.w	r3, [r4, #56]	@ 0x38
 8013d62:	bd10      	pop	{r4, pc}
 8013d64:	f003 fc34 	bl	80175d0 <_ZN8touchgfx11Application11getInstanceEv>
 8013d68:	4621      	mov	r1, r4
 8013d6a:	3004      	adds	r0, #4
 8013d6c:	f003 fcfe 	bl	801776c <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE>
 8013d70:	2301      	movs	r3, #1
 8013d72:	e7f4      	b.n	8013d5e <_ZN8touchgfx13AnimatedImage14pauseAnimationEv+0x18>

08013d74 <_ZN8touchgfx13AnimatedImage15handleTickEventEv>:
 8013d74:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8013d76:	f890 3038 	ldrb.w	r3, [r0, #56]	@ 0x38
 8013d7a:	4604      	mov	r4, r0
 8013d7c:	2b00      	cmp	r3, #0
 8013d7e:	d042      	beq.n	8013e06 <_ZN8touchgfx13AnimatedImage15handleTickEventEv+0x92>
 8013d80:	f890 3035 	ldrb.w	r3, [r0, #53]	@ 0x35
 8013d84:	f890 2034 	ldrb.w	r2, [r0, #52]	@ 0x34
 8013d88:	3301      	adds	r3, #1
 8013d8a:	b2db      	uxtb	r3, r3
 8013d8c:	429a      	cmp	r2, r3
 8013d8e:	f880 3035 	strb.w	r3, [r0, #53]	@ 0x35
 8013d92:	d138      	bne.n	8013e06 <_ZN8touchgfx13AnimatedImage15handleTickEventEv+0x92>
 8013d94:	2300      	movs	r3, #0
 8013d96:	8e41      	ldrh	r1, [r0, #50]	@ 0x32
 8013d98:	f890 2036 	ldrb.w	r2, [r0, #54]	@ 0x36
 8013d9c:	f880 3035 	strb.w	r3, [r0, #53]	@ 0x35
 8013da0:	8cc3      	ldrh	r3, [r0, #38]	@ 0x26
 8013da2:	4299      	cmp	r1, r3
 8013da4:	d100      	bne.n	8013da8 <_ZN8touchgfx13AnimatedImage15handleTickEventEv+0x34>
 8013da6:	b122      	cbz	r2, 8013db2 <_ZN8touchgfx13AnimatedImage15handleTickEventEv+0x3e>
 8013da8:	8e21      	ldrh	r1, [r4, #48]	@ 0x30
 8013daa:	4299      	cmp	r1, r3
 8013dac:	d12f      	bne.n	8013e0e <_ZN8touchgfx13AnimatedImage15handleTickEventEv+0x9a>
 8013dae:	2a00      	cmp	r2, #0
 8013db0:	d034      	beq.n	8013e1c <_ZN8touchgfx13AnimatedImage15handleTickEventEv+0xa8>
 8013db2:	f894 5037 	ldrb.w	r5, [r4, #55]	@ 0x37
 8013db6:	b93d      	cbnz	r5, 8013dc8 <_ZN8touchgfx13AnimatedImage15handleTickEventEv+0x54>
 8013db8:	f003 fc0a 	bl	80175d0 <_ZN8touchgfx11Application11getInstanceEv>
 8013dbc:	4621      	mov	r1, r4
 8013dbe:	3004      	adds	r0, #4
 8013dc0:	f003 fc2b 	bl	801761a <_ZN8touchgfx11Application12TimerWidgets6removeEPKNS_8DrawableE>
 8013dc4:	f884 5038 	strb.w	r5, [r4, #56]	@ 0x38
 8013dc8:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8013dca:	b140      	cbz	r0, 8013dde <_ZN8touchgfx13AnimatedImage15handleTickEventEv+0x6a>
 8013dcc:	6803      	ldr	r3, [r0, #0]
 8013dce:	68db      	ldr	r3, [r3, #12]
 8013dd0:	4798      	blx	r3
 8013dd2:	b120      	cbz	r0, 8013dde <_ZN8touchgfx13AnimatedImage15handleTickEventEv+0x6a>
 8013dd4:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8013dd6:	4621      	mov	r1, r4
 8013dd8:	6803      	ldr	r3, [r0, #0]
 8013dda:	689b      	ldr	r3, [r3, #8]
 8013ddc:	4798      	blx	r3
 8013dde:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 8013de2:	b183      	cbz	r3, 8013e06 <_ZN8touchgfx13AnimatedImage15handleTickEventEv+0x92>
 8013de4:	f894 3037 	ldrb.w	r3, [r4, #55]	@ 0x37
 8013de8:	b16b      	cbz	r3, 8013e06 <_ZN8touchgfx13AnimatedImage15handleTickEventEv+0x92>
 8013dea:	f894 3036 	ldrb.w	r3, [r4, #54]	@ 0x36
 8013dee:	b163      	cbz	r3, 8013e0a <_ZN8touchgfx13AnimatedImage15handleTickEventEv+0x96>
 8013df0:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 8013df2:	a901      	add	r1, sp, #4
 8013df4:	f8ad 3004 	strh.w	r3, [sp, #4]
 8013df8:	4620      	mov	r0, r4
 8013dfa:	f000 ffda 	bl	8014db2 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 8013dfe:	6823      	ldr	r3, [r4, #0]
 8013e00:	4620      	mov	r0, r4
 8013e02:	695b      	ldr	r3, [r3, #20]
 8013e04:	4798      	blx	r3
 8013e06:	b003      	add	sp, #12
 8013e08:	bd30      	pop	{r4, r5, pc}
 8013e0a:	8e23      	ldrh	r3, [r4, #48]	@ 0x30
 8013e0c:	e7f1      	b.n	8013df2 <_ZN8touchgfx13AnimatedImage15handleTickEventEv+0x7e>
 8013e0e:	b12a      	cbz	r2, 8013e1c <_ZN8touchgfx13AnimatedImage15handleTickEventEv+0xa8>
 8013e10:	3b01      	subs	r3, #1
 8013e12:	b29b      	uxth	r3, r3
 8013e14:	a902      	add	r1, sp, #8
 8013e16:	f821 3d04 	strh.w	r3, [r1, #-4]!
 8013e1a:	e7ed      	b.n	8013df8 <_ZN8touchgfx13AnimatedImage15handleTickEventEv+0x84>
 8013e1c:	3301      	adds	r3, #1
 8013e1e:	e7f8      	b.n	8013e12 <_ZN8touchgfx13AnimatedImage15handleTickEventEv+0x9e>

08013e20 <_ZN8touchgfx13AnimatedImage10setBitmapsEtt>:
 8013e20:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8013e22:	ac02      	add	r4, sp, #8
 8013e24:	6803      	ldr	r3, [r0, #0]
 8013e26:	4605      	mov	r5, r0
 8013e28:	4616      	mov	r6, r2
 8013e2a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8013e2c:	f824 1d04 	strh.w	r1, [r4, #-4]!
 8013e30:	4621      	mov	r1, r4
 8013e32:	4798      	blx	r3
 8013e34:	682b      	ldr	r3, [r5, #0]
 8013e36:	4621      	mov	r1, r4
 8013e38:	4628      	mov	r0, r5
 8013e3a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8013e3c:	f8ad 6004 	strh.w	r6, [sp, #4]
 8013e40:	4798      	blx	r3
 8013e42:	b002      	add	sp, #8
 8013e44:	bd70      	pop	{r4, r5, r6, pc}

08013e46 <_ZN8touchgfx13AnimatedImage22setUpdateTicksIntervalEh>:
 8013e46:	2300      	movs	r3, #0
 8013e48:	f880 1034 	strb.w	r1, [r0, #52]	@ 0x34
 8013e4c:	f880 3035 	strb.w	r3, [r0, #53]	@ 0x35
 8013e50:	4770      	bx	lr

08013e52 <_ZNK8touchgfx8TextArea12getWildcard1Ev>:
 8013e52:	2000      	movs	r0, #0
 8013e54:	4770      	bx	lr
	...

08013e58 <_ZNK8touchgfx8TextArea12getAlignmentEv>:
 8013e58:	4b07      	ldr	r3, [pc, #28]	@ (8013e78 <_ZNK8touchgfx8TextArea12getAlignmentEv+0x20>)
 8013e5a:	8d82      	ldrh	r2, [r0, #44]	@ 0x2c
 8013e5c:	881b      	ldrh	r3, [r3, #0]
 8013e5e:	4293      	cmp	r3, r2
 8013e60:	bf81      	itttt	hi
 8013e62:	4b06      	ldrhi	r3, [pc, #24]	@ (8013e7c <_ZNK8touchgfx8TextArea12getAlignmentEv+0x24>)
 8013e64:	681b      	ldrhi	r3, [r3, #0]
 8013e66:	eb03 0342 	addhi.w	r3, r3, r2, lsl #1
 8013e6a:	7858      	ldrbhi	r0, [r3, #1]
 8013e6c:	bf8c      	ite	hi
 8013e6e:	f000 0003 	andhi.w	r0, r0, #3
 8013e72:	2000      	movls	r0, #0
 8013e74:	4770      	bx	lr
 8013e76:	bf00      	nop
 8013e78:	24028e7c 	.word	0x24028e7c
 8013e7c:	24028e78 	.word	0x24028e78

08013e80 <_ZN8touchgfx8TextAreaD1Ev>:
 8013e80:	4770      	bx	lr
	...

08013e84 <_ZNK8touchgfx8TextArea13getTextHeightEv>:
 8013e84:	4b11      	ldr	r3, [pc, #68]	@ (8013ecc <_ZNK8touchgfx8TextArea13getTextHeightEv+0x48>)
 8013e86:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013e8a:	8d81      	ldrh	r1, [r0, #44]	@ 0x2c
 8013e8c:	4604      	mov	r4, r0
 8013e8e:	881b      	ldrh	r3, [r3, #0]
 8013e90:	428b      	cmp	r3, r1
 8013e92:	d918      	bls.n	8013ec6 <_ZNK8touchgfx8TextArea13getTextHeightEv+0x42>
 8013e94:	6803      	ldr	r3, [r0, #0]
 8013e96:	6f9d      	ldr	r5, [r3, #120]	@ 0x78
 8013e98:	4b0d      	ldr	r3, [pc, #52]	@ (8013ed0 <_ZNK8touchgfx8TextArea13getTextHeightEv+0x4c>)
 8013e9a:	6818      	ldr	r0, [r3, #0]
 8013e9c:	f7f0 f940 	bl	8004120 <_ZNK8touchgfx5Texts7getTextEt>
 8013ea0:	6823      	ldr	r3, [r4, #0]
 8013ea2:	4606      	mov	r6, r0
 8013ea4:	4620      	mov	r0, r4
 8013ea6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8013ea8:	4798      	blx	r3
 8013eaa:	6823      	ldr	r3, [r4, #0]
 8013eac:	4607      	mov	r7, r0
 8013eae:	4620      	mov	r0, r4
 8013eb0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8013eb4:	4798      	blx	r3
 8013eb6:	463a      	mov	r2, r7
 8013eb8:	4603      	mov	r3, r0
 8013eba:	4631      	mov	r1, r6
 8013ebc:	4620      	mov	r0, r4
 8013ebe:	46ac      	mov	ip, r5
 8013ec0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013ec4:	4760      	bx	ip
 8013ec6:	2000      	movs	r0, #0
 8013ec8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013ecc:	24028e7c 	.word	0x24028e7c
 8013ed0:	24028e84 	.word	0x24028e84

08013ed4 <_ZNK8touchgfx8TextArea12getTextWidthEv>:
 8013ed4:	4b18      	ldr	r3, [pc, #96]	@ (8013f38 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x64>)
 8013ed6:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8013eda:	8d81      	ldrh	r1, [r0, #44]	@ 0x2c
 8013edc:	4604      	mov	r4, r0
 8013ede:	881b      	ldrh	r3, [r3, #0]
 8013ee0:	428b      	cmp	r3, r1
 8013ee2:	d926      	bls.n	8013f32 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x5e>
 8013ee4:	4b15      	ldr	r3, [pc, #84]	@ (8013f3c <_ZNK8touchgfx8TextArea12getTextWidthEv+0x68>)
 8013ee6:	681b      	ldr	r3, [r3, #0]
 8013ee8:	eb03 0241 	add.w	r2, r3, r1, lsl #1
 8013eec:	f813 0011 	ldrb.w	r0, [r3, r1, lsl #1]
 8013ef0:	4b13      	ldr	r3, [pc, #76]	@ (8013f40 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x6c>)
 8013ef2:	7855      	ldrb	r5, [r2, #1]
 8013ef4:	681b      	ldr	r3, [r3, #0]
 8013ef6:	f3c5 0581 	ubfx	r5, r5, #2, #2
 8013efa:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
 8013efe:	6833      	ldr	r3, [r6, #0]
 8013f00:	69df      	ldr	r7, [r3, #28]
 8013f02:	4b10      	ldr	r3, [pc, #64]	@ (8013f44 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x70>)
 8013f04:	6818      	ldr	r0, [r3, #0]
 8013f06:	f7f0 f90b 	bl	8004120 <_ZNK8touchgfx5Texts7getTextEt>
 8013f0a:	6823      	ldr	r3, [r4, #0]
 8013f0c:	4680      	mov	r8, r0
 8013f0e:	4620      	mov	r0, r4
 8013f10:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8013f12:	4798      	blx	r3
 8013f14:	6823      	ldr	r3, [r4, #0]
 8013f16:	4681      	mov	r9, r0
 8013f18:	4620      	mov	r0, r4
 8013f1a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8013f1e:	4798      	blx	r3
 8013f20:	464b      	mov	r3, r9
 8013f22:	9000      	str	r0, [sp, #0]
 8013f24:	4642      	mov	r2, r8
 8013f26:	4629      	mov	r1, r5
 8013f28:	4630      	mov	r0, r6
 8013f2a:	47b8      	blx	r7
 8013f2c:	b003      	add	sp, #12
 8013f2e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013f32:	2000      	movs	r0, #0
 8013f34:	e7fa      	b.n	8013f2c <_ZNK8touchgfx8TextArea12getTextWidthEv+0x58>
 8013f36:	bf00      	nop
 8013f38:	24028e7c 	.word	0x24028e7c
 8013f3c:	24028e78 	.word	0x24028e78
 8013f40:	24028e80 	.word	0x24028e80
 8013f44:	24028e84 	.word	0x24028e84

08013f48 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz>:
 8013f48:	b40e      	push	{r1, r2, r3}
 8013f4a:	4b30      	ldr	r3, [pc, #192]	@ (801400c <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xc4>)
 8013f4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013f50:	881a      	ldrh	r2, [r3, #0]
 8013f52:	b09d      	sub	sp, #116	@ 0x74
 8013f54:	8d83      	ldrh	r3, [r0, #44]	@ 0x2c
 8013f56:	4604      	mov	r4, r0
 8013f58:	429a      	cmp	r2, r3
 8013f5a:	d954      	bls.n	8014006 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xbe>
 8013f5c:	aa26      	add	r2, sp, #152	@ 0x98
 8013f5e:	f8df 90b0 	ldr.w	r9, [pc, #176]	@ 8014010 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xc8>
 8013f62:	f8df 80b0 	ldr.w	r8, [pc, #176]	@ 8014014 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xcc>
 8013f66:	9202      	str	r2, [sp, #8]
 8013f68:	f8d9 2000 	ldr.w	r2, [r9]
 8013f6c:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 8013f70:	f8d8 3000 	ldr.w	r3, [r8]
 8013f74:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 8013f78:	682b      	ldr	r3, [r5, #0]
 8013f7a:	4628      	mov	r0, r5
 8013f7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013f7e:	4798      	blx	r3
 8013f80:	4606      	mov	r6, r0
 8013f82:	b207      	sxth	r7, r0
 8013f84:	a803      	add	r0, sp, #12
 8013f86:	f005 fcf3 	bl	8019970 <_ZN8touchgfx12TextProviderC1Ev>
 8013f8a:	682b      	ldr	r3, [r5, #0]
 8013f8c:	4628      	mov	r0, r5
 8013f8e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8013f90:	4798      	blx	r3
 8013f92:	682b      	ldr	r3, [r5, #0]
 8013f94:	4682      	mov	sl, r0
 8013f96:	4628      	mov	r0, r5
 8013f98:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8013f9a:	4798      	blx	r3
 8013f9c:	4653      	mov	r3, sl
 8013f9e:	9000      	str	r0, [sp, #0]
 8013fa0:	a803      	add	r0, sp, #12
 8013fa2:	9a02      	ldr	r2, [sp, #8]
 8013fa4:	9925      	ldr	r1, [sp, #148]	@ 0x94
 8013fa6:	f005 fd3e 	bl	8019a26 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8013faa:	8da2      	ldrh	r2, [r4, #44]	@ 0x2c
 8013fac:	f8d9 3000 	ldr.w	r3, [r9]
 8013fb0:	f894 c037 	ldrb.w	ip, [r4, #55]	@ 0x37
 8013fb4:	8925      	ldrh	r5, [r4, #8]
 8013fb6:	eb03 0142 	add.w	r1, r3, r2, lsl #1
 8013fba:	f813 0012 	ldrb.w	r0, [r3, r2, lsl #1]
 8013fbe:	eba5 050c 	sub.w	r5, r5, ip
 8013fc2:	784a      	ldrb	r2, [r1, #1]
 8013fc4:	f8d8 3000 	ldr.w	r3, [r8]
 8013fc8:	b22d      	sxth	r5, r5
 8013fca:	f894 1039 	ldrb.w	r1, [r4, #57]	@ 0x39
 8013fce:	f3c2 0281 	ubfx	r2, r2, #2, #2
 8013fd2:	9500      	str	r5, [sp, #0]
 8013fd4:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8013fd8:	a803      	add	r0, sp, #12
 8013fda:	f002 fe4b 	bl	8016c74 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>
 8013fde:	f9b4 2034 	ldrsh.w	r2, [r4, #52]	@ 0x34
 8013fe2:	b203      	sxth	r3, r0
 8013fe4:	18b9      	adds	r1, r7, r2
 8013fe6:	2900      	cmp	r1, #0
 8013fe8:	dd0b      	ble.n	8014002 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xba>
 8013fea:	3b01      	subs	r3, #1
 8013fec:	fb13 f302 	smulbb	r3, r3, r2
 8013ff0:	fb16 3300 	smlabb	r3, r6, r0, r3
 8013ff4:	b21f      	sxth	r7, r3
 8013ff6:	4638      	mov	r0, r7
 8013ff8:	b01d      	add	sp, #116	@ 0x74
 8013ffa:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013ffe:	b003      	add	sp, #12
 8014000:	4770      	bx	lr
 8014002:	2b00      	cmp	r3, #0
 8014004:	dcf7      	bgt.n	8013ff6 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xae>
 8014006:	2700      	movs	r7, #0
 8014008:	e7f5      	b.n	8013ff6 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xae>
 801400a:	bf00      	nop
 801400c:	24028e7c 	.word	0x24028e7c
 8014010:	24028e78 	.word	0x24028e78
 8014014:	24028e80 	.word	0x24028e80

08014018 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>:
 8014018:	4bbd      	ldr	r3, [pc, #756]	@ (8014310 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2f8>)
 801401a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801401e:	460c      	mov	r4, r1
 8014020:	881b      	ldrh	r3, [r3, #0]
 8014022:	8d89      	ldrh	r1, [r1, #44]	@ 0x2c
 8014024:	b0a9      	sub	sp, #164	@ 0xa4
 8014026:	4680      	mov	r8, r0
 8014028:	428b      	cmp	r3, r1
 801402a:	d809      	bhi.n	8014040 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x28>
 801402c:	2300      	movs	r3, #0
 801402e:	f04f 32ff 	mov.w	r2, #4294967295
 8014032:	6083      	str	r3, [r0, #8]
 8014034:	e9c0 3200 	strd	r3, r2, [r0]
 8014038:	4640      	mov	r0, r8
 801403a:	b029      	add	sp, #164	@ 0xa4
 801403c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014040:	4eb4      	ldr	r6, [pc, #720]	@ (8014314 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2fc>)
 8014042:	6833      	ldr	r3, [r6, #0]
 8014044:	f813 2011 	ldrb.w	r2, [r3, r1, lsl #1]
 8014048:	4bb3      	ldr	r3, [pc, #716]	@ (8014318 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x300>)
 801404a:	681b      	ldr	r3, [r3, #0]
 801404c:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 8014050:	4bb2      	ldr	r3, [pc, #712]	@ (801431c <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x304>)
 8014052:	6818      	ldr	r0, [r3, #0]
 8014054:	f7f0 f864 	bl	8004120 <_ZNK8touchgfx5Texts7getTextEt>
 8014058:	682b      	ldr	r3, [r5, #0]
 801405a:	4681      	mov	r9, r0
 801405c:	4628      	mov	r0, r5
 801405e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8014060:	4798      	blx	r3
 8014062:	8ea7      	ldrh	r7, [r4, #52]	@ 0x34
 8014064:	b203      	sxth	r3, r0
 8014066:	4682      	mov	sl, r0
 8014068:	4407      	add	r7, r0
 801406a:	a80f      	add	r0, sp, #60	@ 0x3c
 801406c:	9304      	str	r3, [sp, #16]
 801406e:	b2bb      	uxth	r3, r7
 8014070:	9303      	str	r3, [sp, #12]
 8014072:	f894 3039 	ldrb.w	r3, [r4, #57]	@ 0x39
 8014076:	2b00      	cmp	r3, #0
 8014078:	f040 80a5 	bne.w	80141c6 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x1ae>
 801407c:	f005 fc78 	bl	8019970 <_ZN8touchgfx12TextProviderC1Ev>
 8014080:	682b      	ldr	r3, [r5, #0]
 8014082:	4628      	mov	r0, r5
 8014084:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8014086:	4798      	blx	r3
 8014088:	682b      	ldr	r3, [r5, #0]
 801408a:	4606      	mov	r6, r0
 801408c:	4628      	mov	r0, r5
 801408e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8014090:	4798      	blx	r3
 8014092:	6823      	ldr	r3, [r4, #0]
 8014094:	4607      	mov	r7, r0
 8014096:	4620      	mov	r0, r4
 8014098:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801409a:	4798      	blx	r3
 801409c:	6823      	ldr	r3, [r4, #0]
 801409e:	4683      	mov	fp, r0
 80140a0:	4620      	mov	r0, r4
 80140a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80140a6:	4798      	blx	r3
 80140a8:	463b      	mov	r3, r7
 80140aa:	4649      	mov	r1, r9
 80140ac:	4632      	mov	r2, r6
 80140ae:	2600      	movs	r6, #0
 80140b0:	e9cd b000 	strd	fp, r0, [sp]
 80140b4:	a80f      	add	r0, sp, #60	@ 0x3c
 80140b6:	4637      	mov	r7, r6
 80140b8:	f005 fcca 	bl	8019a50 <_ZN8touchgfx12TextProvider10initializeEPKtS2_PKNS_24FontContextualFormsTableEz>
 80140bc:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 80140c0:	f8df b250 	ldr.w	fp, [pc, #592]	@ 8014314 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2fc>
 80140c4:	f013 0ffd 	tst.w	r3, #253	@ 0xfd
 80140c8:	bf0c      	ite	eq
 80140ca:	f9b4 900a 	ldrsheq.w	r9, [r4, #10]
 80140ce:	f9b4 9008 	ldrshne.w	r9, [r4, #8]
 80140d2:	8da2      	ldrh	r2, [r4, #44]	@ 0x2c
 80140d4:	4629      	mov	r1, r5
 80140d6:	f8db 3000 	ldr.w	r3, [fp]
 80140da:	a80f      	add	r0, sp, #60	@ 0x3c
 80140dc:	3701      	adds	r7, #1
 80140de:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 80140e2:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 80140e6:	b2bf      	uxth	r7, r7
 80140e8:	785b      	ldrb	r3, [r3, #1]
 80140ea:	f3c3 0381 	ubfx	r3, r3, #2, #2
 80140ee:	f002 fac8 	bl	8016682 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>
 80140f2:	9b03      	ldr	r3, [sp, #12]
 80140f4:	4286      	cmp	r6, r0
 80140f6:	eba9 0903 	sub.w	r9, r9, r3
 80140fa:	bfb8      	it	lt
 80140fc:	4606      	movlt	r6, r0
 80140fe:	a80f      	add	r0, sp, #60	@ 0x3c
 8014100:	fa0f f989 	sxth.w	r9, r9
 8014104:	b236      	sxth	r6, r6
 8014106:	f005 fc5a 	bl	80199be <_ZN8touchgfx12TextProvider11endOfStringEv>
 801410a:	b918      	cbnz	r0, 8014114 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xfc>
 801410c:	7a2b      	ldrb	r3, [r5, #8]
 801410e:	444b      	add	r3, r9
 8014110:	2b00      	cmp	r3, #0
 8014112:	dcde      	bgt.n	80140d2 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xba>
 8014114:	9b03      	ldr	r3, [sp, #12]
 8014116:	4620      	mov	r0, r4
 8014118:	9a04      	ldr	r2, [sp, #16]
 801411a:	fb13 f707 	smulbb	r7, r3, r7
 801411e:	8ea3      	ldrh	r3, [r4, #52]	@ 0x34
 8014120:	f895 9009 	ldrb.w	r9, [r5, #9]
 8014124:	1aff      	subs	r7, r7, r3
 8014126:	b2bf      	uxth	r7, r7
 8014128:	b23b      	sxth	r3, r7
 801412a:	429a      	cmp	r2, r3
 801412c:	bfa8      	it	ge
 801412e:	4657      	movge	r7, sl
 8014130:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 8014134:	f013 0ffd 	tst.w	r3, #253	@ 0xfd
 8014138:	6823      	ldr	r3, [r4, #0]
 801413a:	444f      	add	r7, r9
 801413c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801413e:	bf08      	it	eq
 8014140:	f9b4 a008 	ldrsheq.w	sl, [r4, #8]
 8014144:	fa1f f987 	uxth.w	r9, r7
 8014148:	bf18      	it	ne
 801414a:	f9b4 a00a 	ldrshne.w	sl, [r4, #10]
 801414e:	4798      	blx	r3
 8014150:	2801      	cmp	r0, #1
 8014152:	fa0f f789 	sxth.w	r7, r9
 8014156:	b2b3      	uxth	r3, r6
 8014158:	f000 80e2 	beq.w	8014320 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x308>
 801415c:	2802      	cmp	r0, #2
 801415e:	f894 6037 	ldrb.w	r6, [r4, #55]	@ 0x37
 8014162:	f000 80e3 	beq.w	801432c <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x314>
 8014166:	7aea      	ldrb	r2, [r5, #11]
 8014168:	b236      	sxth	r6, r6
 801416a:	7b2d      	ldrb	r5, [r5, #12]
 801416c:	1ab6      	subs	r6, r6, r2
 801416e:	442a      	add	r2, r5
 8014170:	fa1f fa86 	uxth.w	sl, r6
 8014174:	4413      	add	r3, r2
 8014176:	f894 2038 	ldrb.w	r2, [r4, #56]	@ 0x38
 801417a:	fa0f fb8a 	sxth.w	fp, sl
 801417e:	b29b      	uxth	r3, r3
 8014180:	2a02      	cmp	r2, #2
 8014182:	b21e      	sxth	r6, r3
 8014184:	f000 80d6 	beq.w	8014334 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x31c>
 8014188:	2a03      	cmp	r2, #3
 801418a:	f000 80de 	beq.w	801434a <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x332>
 801418e:	2a01      	cmp	r2, #1
 8014190:	f040 80e6 	bne.w	8014360 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x348>
 8014194:	8925      	ldrh	r5, [r4, #8]
 8014196:	4633      	mov	r3, r6
 8014198:	463e      	mov	r6, r7
 801419a:	eba5 0909 	sub.w	r9, r5, r9
 801419e:	461f      	mov	r7, r3
 80141a0:	465d      	mov	r5, fp
 80141a2:	fa0f fb89 	sxth.w	fp, r9
 80141a6:	4b5d      	ldr	r3, [pc, #372]	@ (801431c <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x304>)
 80141a8:	8da1      	ldrh	r1, [r4, #44]	@ 0x2c
 80141aa:	6818      	ldr	r0, [r3, #0]
 80141ac:	f7ef ffb8 	bl	8004120 <_ZNK8touchgfx5Texts7getTextEt>
 80141b0:	f8a8 b000 	strh.w	fp, [r8]
 80141b4:	f8a8 5002 	strh.w	r5, [r8, #2]
 80141b8:	f8a8 6004 	strh.w	r6, [r8, #4]
 80141bc:	f8a8 7006 	strh.w	r7, [r8, #6]
 80141c0:	f8c8 0008 	str.w	r0, [r8, #8]
 80141c4:	e738      	b.n	8014038 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x20>
 80141c6:	f005 fbd3 	bl	8019970 <_ZN8touchgfx12TextProviderC1Ev>
 80141ca:	682b      	ldr	r3, [r5, #0]
 80141cc:	4628      	mov	r0, r5
 80141ce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80141d0:	4798      	blx	r3
 80141d2:	682b      	ldr	r3, [r5, #0]
 80141d4:	4607      	mov	r7, r0
 80141d6:	4628      	mov	r0, r5
 80141d8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80141da:	4798      	blx	r3
 80141dc:	6823      	ldr	r3, [r4, #0]
 80141de:	4683      	mov	fp, r0
 80141e0:	4620      	mov	r0, r4
 80141e2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80141e4:	4798      	blx	r3
 80141e6:	6822      	ldr	r2, [r4, #0]
 80141e8:	9005      	str	r0, [sp, #20]
 80141ea:	4620      	mov	r0, r4
 80141ec:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 80141f0:	4790      	blx	r2
 80141f2:	9b05      	ldr	r3, [sp, #20]
 80141f4:	463a      	mov	r2, r7
 80141f6:	4649      	mov	r1, r9
 80141f8:	9001      	str	r0, [sp, #4]
 80141fa:	a80f      	add	r0, sp, #60	@ 0x3c
 80141fc:	9300      	str	r3, [sp, #0]
 80141fe:	465b      	mov	r3, fp
 8014200:	f005 fc26 	bl	8019a50 <_ZN8touchgfx12TextProvider10initializeEPKtS2_PKNS_24FontContextualFormsTableEz>
 8014204:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 8014208:	f9b4 9008 	ldrsh.w	r9, [r4, #8]
 801420c:	af0f      	add	r7, sp, #60	@ 0x3c
 801420e:	f013 0ffd 	tst.w	r3, #253	@ 0xfd
 8014212:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 8014216:	8da1      	ldrh	r1, [r4, #44]	@ 0x2c
 8014218:	bf0a      	itet	eq
 801421a:	464a      	moveq	r2, r9
 801421c:	461a      	movne	r2, r3
 801421e:	4699      	moveq	r9, r3
 8014220:	f894 3037 	ldrb.w	r3, [r4, #55]	@ 0x37
 8014224:	f894 0039 	ldrb.w	r0, [r4, #57]	@ 0x39
 8014228:	1ad2      	subs	r2, r2, r3
 801422a:	6833      	ldr	r3, [r6, #0]
 801422c:	f9b4 6034 	ldrsh.w	r6, [r4, #52]	@ 0x34
 8014230:	eb03 0341 	add.w	r3, r3, r1, lsl #1
 8014234:	7859      	ldrb	r1, [r3, #1]
 8014236:	2300      	movs	r3, #0
 8014238:	9707      	str	r7, [sp, #28]
 801423a:	f3c1 0181 	ubfx	r1, r1, #2, #2
 801423e:	f8ad 3018 	strh.w	r3, [sp, #24]
 8014242:	f88d 0021 	strb.w	r0, [sp, #33]	@ 0x21
 8014246:	f88d 1020 	strb.w	r1, [sp, #32]
 801424a:	9509      	str	r5, [sp, #36]	@ 0x24
 801424c:	f8ad 2028 	strh.w	r2, [sp, #40]	@ 0x28
 8014250:	f8ad 902a 	strh.w	r9, [sp, #42]	@ 0x2a
 8014254:	f8ad 602c 	strh.w	r6, [sp, #44]	@ 0x2c
 8014258:	f8ad 302e 	strh.w	r3, [sp, #46]	@ 0x2e
 801425c:	f8ad 3030 	strh.w	r3, [sp, #48]	@ 0x30
 8014260:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 8014264:	f8ad 3034 	strh.w	r3, [sp, #52]	@ 0x34
 8014268:	f8ad 3036 	strh.w	r3, [sp, #54]	@ 0x36
 801426c:	f8ad 3038 	strh.w	r3, [sp, #56]	@ 0x38
 8014270:	f88d 303a 	strb.w	r3, [sp, #58]	@ 0x3a
 8014274:	b350      	cbz	r0, 80142cc <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2b4>
 8014276:	682b      	ldr	r3, [r5, #0]
 8014278:	4628      	mov	r0, r5
 801427a:	695b      	ldr	r3, [r3, #20]
 801427c:	4798      	blx	r3
 801427e:	4607      	mov	r7, r0
 8014280:	b320      	cbz	r0, 80142cc <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2b4>
 8014282:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8014284:	4639      	mov	r1, r7
 8014286:	6803      	ldr	r3, [r0, #0]
 8014288:	68db      	ldr	r3, [r3, #12]
 801428a:	4798      	blx	r3
 801428c:	4606      	mov	r6, r0
 801428e:	b1e8      	cbz	r0, 80142cc <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2b4>
 8014290:	7b43      	ldrb	r3, [r0, #13]
 8014292:	7a82      	ldrb	r2, [r0, #10]
 8014294:	005b      	lsls	r3, r3, #1
 8014296:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801429a:	4313      	orrs	r3, r2
 801429c:	f8ad 3038 	strh.w	r3, [sp, #56]	@ 0x38
 80142a0:	f89d 3021 	ldrb.w	r3, [sp, #33]	@ 0x21
 80142a4:	2b06      	cmp	r3, #6
 80142a6:	d111      	bne.n	80142cc <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2b4>
 80142a8:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80142aa:	4632      	mov	r2, r6
 80142ac:	4639      	mov	r1, r7
 80142ae:	6803      	ldr	r3, [r0, #0]
 80142b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80142b2:	4798      	blx	r3
 80142b4:	7b73      	ldrb	r3, [r6, #13]
 80142b6:	005b      	lsls	r3, r3, #1
 80142b8:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 80142bc:	7ab3      	ldrb	r3, [r6, #10]
 80142be:	4313      	orrs	r3, r2
 80142c0:	4418      	add	r0, r3
 80142c2:	f8bd 3038 	ldrh.w	r3, [sp, #56]	@ 0x38
 80142c6:	4418      	add	r0, r3
 80142c8:	f8ad 0038 	strh.w	r0, [sp, #56]	@ 0x38
 80142cc:	2600      	movs	r6, #0
 80142ce:	4637      	mov	r7, r6
 80142d0:	a806      	add	r0, sp, #24
 80142d2:	3701      	adds	r7, #1
 80142d4:	f002 fbcb 	bl	8016a6e <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>
 80142d8:	f8bd 0036 	ldrh.w	r0, [sp, #54]	@ 0x36
 80142dc:	9b03      	ldr	r3, [sp, #12]
 80142de:	b2bf      	uxth	r7, r7
 80142e0:	4286      	cmp	r6, r0
 80142e2:	eba9 0903 	sub.w	r9, r9, r3
 80142e6:	f8bd 3018 	ldrh.w	r3, [sp, #24]
 80142ea:	bfb8      	it	lt
 80142ec:	4606      	movlt	r6, r0
 80142ee:	fa0f f989 	sxth.w	r9, r9
 80142f2:	b236      	sxth	r6, r6
 80142f4:	2b00      	cmp	r3, #0
 80142f6:	f43f af0d 	beq.w	8014114 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xfc>
 80142fa:	f89d 303a 	ldrb.w	r3, [sp, #58]	@ 0x3a
 80142fe:	2b00      	cmp	r3, #0
 8014300:	f47f af08 	bne.w	8014114 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xfc>
 8014304:	7a2b      	ldrb	r3, [r5, #8]
 8014306:	444b      	add	r3, r9
 8014308:	2b00      	cmp	r3, #0
 801430a:	dce1      	bgt.n	80142d0 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2b8>
 801430c:	e702      	b.n	8014114 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xfc>
 801430e:	bf00      	nop
 8014310:	24028e7c 	.word	0x24028e7c
 8014314:	24028e78 	.word	0x24028e78
 8014318:	24028e80 	.word	0x24028e80
 801431c:	24028e84 	.word	0x24028e84
 8014320:	ebaa 0606 	sub.w	r6, sl, r6
 8014324:	2002      	movs	r0, #2
 8014326:	fb96 f6f0 	sdiv	r6, r6, r0
 801432a:	e71c      	b.n	8014166 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x14e>
 801432c:	441e      	add	r6, r3
 801432e:	ebaa 0606 	sub.w	r6, sl, r6
 8014332:	e718      	b.n	8014166 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x14e>
 8014334:	8925      	ldrh	r5, [r4, #8]
 8014336:	1aed      	subs	r5, r5, r3
 8014338:	eba5 050a 	sub.w	r5, r5, sl
 801433c:	fa0f fb85 	sxth.w	fp, r5
 8014340:	8965      	ldrh	r5, [r4, #10]
 8014342:	eba5 0509 	sub.w	r5, r5, r9
 8014346:	b22d      	sxth	r5, r5
 8014348:	e72d      	b.n	80141a6 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x18e>
 801434a:	8965      	ldrh	r5, [r4, #10]
 801434c:	f04f 0b00 	mov.w	fp, #0
 8014350:	1aed      	subs	r5, r5, r3
 8014352:	4633      	mov	r3, r6
 8014354:	463e      	mov	r6, r7
 8014356:	eba5 050a 	sub.w	r5, r5, sl
 801435a:	461f      	mov	r7, r3
 801435c:	b22d      	sxth	r5, r5
 801435e:	e722      	b.n	80141a6 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x18e>
 8014360:	2500      	movs	r5, #0
 8014362:	e720      	b.n	80141a6 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x18e>

08014364 <_ZN8touchgfx8TextAreaD0Ev>:
 8014364:	b510      	push	{r4, lr}
 8014366:	4604      	mov	r4, r0
 8014368:	2148      	movs	r1, #72	@ 0x48
 801436a:	f012 fc10 	bl	8026b8e <_ZdlPvj>
 801436e:	4620      	mov	r0, r4
 8014370:	bd10      	pop	{r4, pc}
	...

08014374 <_ZNK8touchgfx8TextArea17invalidateContentEv>:
 8014374:	b513      	push	{r0, r1, r4, lr}
 8014376:	f890 3036 	ldrb.w	r3, [r0, #54]	@ 0x36
 801437a:	4604      	mov	r4, r0
 801437c:	b1fb      	cbz	r3, 80143be <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
 801437e:	4b16      	ldr	r3, [pc, #88]	@ (80143d8 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x64>)
 8014380:	8d81      	ldrh	r1, [r0, #44]	@ 0x2c
 8014382:	881b      	ldrh	r3, [r3, #0]
 8014384:	428b      	cmp	r3, r1
 8014386:	d91a      	bls.n	80143be <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
 8014388:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
 801438c:	2b00      	cmp	r3, #0
 801438e:	dd16      	ble.n	80143be <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
 8014390:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 8014394:	2b00      	cmp	r3, #0
 8014396:	dd12      	ble.n	80143be <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
 8014398:	4b10      	ldr	r3, [pc, #64]	@ (80143dc <_ZNK8touchgfx8TextArea17invalidateContentEv+0x68>)
 801439a:	6818      	ldr	r0, [r3, #0]
 801439c:	f7ef fec0 	bl	8004120 <_ZNK8touchgfx5Texts7getTextEt>
 80143a0:	f9b4 3042 	ldrsh.w	r3, [r4, #66]	@ 0x42
 80143a4:	6822      	ldr	r2, [r4, #0]
 80143a6:	2b00      	cmp	r3, #0
 80143a8:	db06      	blt.n	80143b8 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x44>
 80143aa:	f9b4 3040 	ldrsh.w	r3, [r4, #64]	@ 0x40
 80143ae:	2b00      	cmp	r3, #0
 80143b0:	db02      	blt.n	80143b8 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x44>
 80143b2:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 80143b4:	4298      	cmp	r0, r3
 80143b6:	d004      	beq.n	80143c2 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4e>
 80143b8:	6953      	ldr	r3, [r2, #20]
 80143ba:	4620      	mov	r0, r4
 80143bc:	4798      	blx	r3
 80143be:	b002      	add	sp, #8
 80143c0:	bd10      	pop	{r4, pc}
 80143c2:	f104 013c 	add.w	r1, r4, #60	@ 0x3c
 80143c6:	466b      	mov	r3, sp
 80143c8:	6912      	ldr	r2, [r2, #16]
 80143ca:	c903      	ldmia	r1, {r0, r1}
 80143cc:	e883 0003 	stmia.w	r3, {r0, r1}
 80143d0:	4619      	mov	r1, r3
 80143d2:	4620      	mov	r0, r4
 80143d4:	4790      	blx	r2
 80143d6:	e7f2      	b.n	80143be <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
 80143d8:	24028e7c 	.word	0x24028e7c
 80143dc:	24028e84 	.word	0x24028e84

080143e0 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE>:
 80143e0:	4b45      	ldr	r3, [pc, #276]	@ (80144f8 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x118>)
 80143e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80143e6:	8d82      	ldrh	r2, [r0, #44]	@ 0x2c
 80143e8:	b08e      	sub	sp, #56	@ 0x38
 80143ea:	881b      	ldrh	r3, [r3, #0]
 80143ec:	4604      	mov	r4, r0
 80143ee:	4293      	cmp	r3, r2
 80143f0:	d97e      	bls.n	80144f0 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x110>
 80143f2:	6808      	ldr	r0, [r1, #0]
 80143f4:	ab05      	add	r3, sp, #20
 80143f6:	6849      	ldr	r1, [r1, #4]
 80143f8:	4d40      	ldr	r5, [pc, #256]	@ (80144fc <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x11c>)
 80143fa:	c303      	stmia	r3!, {r0, r1}
 80143fc:	4611      	mov	r1, r2
 80143fe:	6828      	ldr	r0, [r5, #0]
 8014400:	f7ef fe8e 	bl	8004120 <_ZNK8touchgfx5Texts7getTextEt>
 8014404:	f9b4 3042 	ldrsh.w	r3, [r4, #66]	@ 0x42
 8014408:	2b00      	cmp	r3, #0
 801440a:	db11      	blt.n	8014430 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x50>
 801440c:	f9b4 3040 	ldrsh.w	r3, [r4, #64]	@ 0x40
 8014410:	2b00      	cmp	r3, #0
 8014412:	db0d      	blt.n	8014430 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x50>
 8014414:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8014416:	4298      	cmp	r0, r3
 8014418:	d10a      	bne.n	8014430 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x50>
 801441a:	f104 023c 	add.w	r2, r4, #60	@ 0x3c
 801441e:	ab09      	add	r3, sp, #36	@ 0x24
 8014420:	e892 0003 	ldmia.w	r2, {r0, r1}
 8014424:	e883 0003 	stmia.w	r3, {r0, r1}
 8014428:	4619      	mov	r1, r3
 801442a:	a805      	add	r0, sp, #20
 801442c:	f7fb fae8 	bl	800fa00 <_ZN8touchgfx4RectaNERKS0_>
 8014430:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 8014434:	2b00      	cmp	r3, #0
 8014436:	dd5b      	ble.n	80144f0 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x110>
 8014438:	f9bd 301a 	ldrsh.w	r3, [sp, #26]
 801443c:	2b00      	cmp	r3, #0
 801443e:	dd57      	ble.n	80144f0 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x110>
 8014440:	4f2f      	ldr	r7, [pc, #188]	@ (8014500 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x120>)
 8014442:	8da2      	ldrh	r2, [r4, #44]	@ 0x2c
 8014444:	683b      	ldr	r3, [r7, #0]
 8014446:	f813 2012 	ldrb.w	r2, [r3, r2, lsl #1]
 801444a:	4b2e      	ldr	r3, [pc, #184]	@ (8014504 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x124>)
 801444c:	681b      	ldr	r3, [r3, #0]
 801444e:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 8014452:	2e00      	cmp	r6, #0
 8014454:	d04c      	beq.n	80144f0 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x110>
 8014456:	6823      	ldr	r3, [r4, #0]
 8014458:	4620      	mov	r0, r4
 801445a:	f894 8036 	ldrb.w	r8, [r4, #54]	@ 0x36
 801445e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8014460:	4798      	blx	r3
 8014462:	8da2      	ldrh	r2, [r4, #44]	@ 0x2c
 8014464:	683b      	ldr	r3, [r7, #0]
 8014466:	f9b4 c034 	ldrsh.w	ip, [r4, #52]	@ 0x34
 801446a:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 801446e:	f894 e038 	ldrb.w	lr, [r4, #56]	@ 0x38
 8014472:	f894 2039 	ldrb.w	r2, [r4, #57]	@ 0x39
 8014476:	785b      	ldrb	r3, [r3, #1]
 8014478:	f894 7037 	ldrb.w	r7, [r4, #55]	@ 0x37
 801447c:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8014480:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8014482:	9609      	str	r6, [sp, #36]	@ 0x24
 8014484:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8014488:	4b1f      	ldr	r3, [pc, #124]	@ (8014508 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x128>)
 801448a:	f88d 0028 	strb.w	r0, [sp, #40]	@ 0x28
 801448e:	681b      	ldr	r3, [r3, #0]
 8014490:	f88d e02a 	strb.w	lr, [sp, #42]	@ 0x2a
 8014494:	910b      	str	r1, [sp, #44]	@ 0x2c
 8014496:	f8ad c030 	strh.w	ip, [sp, #48]	@ 0x30
 801449a:	f88d 8032 	strb.w	r8, [sp, #50]	@ 0x32
 801449e:	f88d 7033 	strb.w	r7, [sp, #51]	@ 0x33
 80144a2:	f88d 2034 	strb.w	r2, [sp, #52]	@ 0x34
 80144a6:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 80144aa:	b10a      	cbz	r2, 80144b0 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xd0>
 80144ac:	6cde      	ldr	r6, [r3, #76]	@ 0x4c
 80144ae:	b906      	cbnz	r6, 80144b2 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xd2>
 80144b0:	689e      	ldr	r6, [r3, #8]
 80144b2:	af07      	add	r7, sp, #28
 80144b4:	4621      	mov	r1, r4
 80144b6:	4638      	mov	r0, r7
 80144b8:	f004 f9e8 	bl	801888c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80144bc:	8da1      	ldrh	r1, [r4, #44]	@ 0x2c
 80144be:	6828      	ldr	r0, [r5, #0]
 80144c0:	f7ef fe2e 	bl	8004120 <_ZNK8touchgfx5Texts7getTextEt>
 80144c4:	6823      	ldr	r3, [r4, #0]
 80144c6:	4605      	mov	r5, r0
 80144c8:	4620      	mov	r0, r4
 80144ca:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80144cc:	4798      	blx	r3
 80144ce:	6823      	ldr	r3, [r4, #0]
 80144d0:	4680      	mov	r8, r0
 80144d2:	4620      	mov	r0, r4
 80144d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80144d8:	4798      	blx	r3
 80144da:	ab09      	add	r3, sp, #36	@ 0x24
 80144dc:	9501      	str	r5, [sp, #4]
 80144de:	9300      	str	r3, [sp, #0]
 80144e0:	ab05      	add	r3, sp, #20
 80144e2:	e9cd 8002 	strd	r8, r0, [sp, #8]
 80144e6:	4630      	mov	r0, r6
 80144e8:	e897 0006 	ldmia.w	r7, {r1, r2}
 80144ec:	f7ef fdca 	bl	8004084 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 80144f0:	b00e      	add	sp, #56	@ 0x38
 80144f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80144f6:	bf00      	nop
 80144f8:	24028e7c 	.word	0x24028e7c
 80144fc:	24028e84 	.word	0x24028e84
 8014500:	24028e78 	.word	0x24028e78
 8014504:	24028e80 	.word	0x24028e80
 8014508:	24028e20 	.word	0x24028e20

0801450c <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>:
 801450c:	b538      	push	{r3, r4, r5, lr}
 801450e:	4b0e      	ldr	r3, [pc, #56]	@ (8014548 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x3c>)
 8014510:	4604      	mov	r4, r0
 8014512:	8d82      	ldrh	r2, [r0, #44]	@ 0x2c
 8014514:	881b      	ldrh	r3, [r3, #0]
 8014516:	429a      	cmp	r2, r3
 8014518:	d214      	bcs.n	8014544 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x38>
 801451a:	6803      	ldr	r3, [r0, #0]
 801451c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801451e:	4798      	blx	r3
 8014520:	6823      	ldr	r3, [r4, #0]
 8014522:	4605      	mov	r5, r0
 8014524:	4620      	mov	r0, r4
 8014526:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8014528:	4798      	blx	r3
 801452a:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 801452e:	b22d      	sxth	r5, r5
 8014530:	4601      	mov	r1, r0
 8014532:	f013 0ffd 	tst.w	r3, #253	@ 0xfd
 8014536:	bf06      	itte	eq
 8014538:	4602      	moveq	r2, r0
 801453a:	4629      	moveq	r1, r5
 801453c:	462a      	movne	r2, r5
 801453e:	4620      	mov	r0, r4
 8014540:	f7fa fe72 	bl	800f228 <_ZN8touchgfx8Drawable14setWidthHeightEss>
 8014544:	bd38      	pop	{r3, r4, r5, pc}
 8014546:	bf00      	nop
 8014548:	24028e7c 	.word	0x24028e7c

0801454c <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>:
 801454c:	b530      	push	{r4, r5, lr}
 801454e:	888b      	ldrh	r3, [r1, #4]
 8014550:	b085      	sub	sp, #20
 8014552:	4604      	mov	r4, r0
 8014554:	8583      	strh	r3, [r0, #44]	@ 0x2c
 8014556:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
 801455a:	b923      	cbnz	r3, 8014566 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE+0x1a>
 801455c:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 8014560:	b90b      	cbnz	r3, 8014566 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE+0x1a>
 8014562:	f7ff ffd3 	bl	801450c <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
 8014566:	6823      	ldr	r3, [r4, #0]
 8014568:	466d      	mov	r5, sp
 801456a:	4621      	mov	r1, r4
 801456c:	343c      	adds	r4, #60	@ 0x3c
 801456e:	4628      	mov	r0, r5
 8014570:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8014574:	4798      	blx	r3
 8014576:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 801457a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 801457e:	b005      	add	sp, #20
 8014580:	bd30      	pop	{r4, r5, pc}

08014582 <_ZNK8touchgfx3Box12getSolidRectEv>:
 8014582:	2300      	movs	r3, #0
 8014584:	8083      	strh	r3, [r0, #4]
 8014586:	80c3      	strh	r3, [r0, #6]
 8014588:	8003      	strh	r3, [r0, #0]
 801458a:	8043      	strh	r3, [r0, #2]
 801458c:	f891 3026 	ldrb.w	r3, [r1, #38]	@ 0x26
 8014590:	2bff      	cmp	r3, #255	@ 0xff
 8014592:	bf01      	itttt	eq
 8014594:	890b      	ldrheq	r3, [r1, #8]
 8014596:	8083      	strheq	r3, [r0, #4]
 8014598:	894b      	ldrheq	r3, [r1, #10]
 801459a:	80c3      	strheq	r3, [r0, #6]
 801459c:	4770      	bx	lr
	...

080145a0 <_ZNK8touchgfx3Box4drawERKNS_4RectE>:
 80145a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80145a2:	4604      	mov	r4, r0
 80145a4:	466b      	mov	r3, sp
 80145a6:	6808      	ldr	r0, [r1, #0]
 80145a8:	6849      	ldr	r1, [r1, #4]
 80145aa:	c303      	stmia	r3!, {r0, r1}
 80145ac:	6823      	ldr	r3, [r4, #0]
 80145ae:	4669      	mov	r1, sp
 80145b0:	4620      	mov	r0, r4
 80145b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80145b4:	4798      	blx	r3
 80145b6:	4b08      	ldr	r3, [pc, #32]	@ (80145d8 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x38>)
 80145b8:	681b      	ldr	r3, [r3, #0]
 80145ba:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 80145be:	b10a      	cbz	r2, 80145c4 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x24>
 80145c0:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 80145c2:	b900      	cbnz	r0, 80145c6 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x26>
 80145c4:	6898      	ldr	r0, [r3, #8]
 80145c6:	6803      	ldr	r3, [r0, #0]
 80145c8:	4669      	mov	r1, sp
 80145ca:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 80145cc:	6a1d      	ldr	r5, [r3, #32]
 80145ce:	f894 3026 	ldrb.w	r3, [r4, #38]	@ 0x26
 80145d2:	47a8      	blx	r5
 80145d4:	b003      	add	sp, #12
 80145d6:	bd30      	pop	{r4, r5, pc}
 80145d8:	24028e20 	.word	0x24028e20

080145dc <_ZN8touchgfx3BoxD1Ev>:
 80145dc:	4770      	bx	lr

080145de <_ZN8touchgfx3BoxD0Ev>:
 80145de:	b510      	push	{r4, lr}
 80145e0:	4604      	mov	r4, r0
 80145e2:	212c      	movs	r1, #44	@ 0x2c
 80145e4:	f012 fad3 	bl	8026b8e <_ZdlPvj>
 80145e8:	4620      	mov	r0, r4
 80145ea:	bd10      	pop	{r4, pc}

080145ec <_ZNK8touchgfx3Box17invalidateContentEv>:
 80145ec:	f890 2026 	ldrb.w	r2, [r0, #38]	@ 0x26
 80145f0:	b12a      	cbz	r2, 80145fe <_ZNK8touchgfx3Box17invalidateContentEv+0x12>
 80145f2:	f890 2025 	ldrb.w	r2, [r0, #37]	@ 0x25
 80145f6:	b112      	cbz	r2, 80145fe <_ZNK8touchgfx3Box17invalidateContentEv+0x12>
 80145f8:	6803      	ldr	r3, [r0, #0]
 80145fa:	695b      	ldr	r3, [r3, #20]
 80145fc:	4718      	bx	r3
 80145fe:	4770      	bx	lr

08014600 <_ZN8touchgfx10TiledImage9setOffsetEss>:
 8014600:	b570      	push	{r4, r5, r6, lr}
 8014602:	6803      	ldr	r3, [r0, #0]
 8014604:	4604      	mov	r4, r0
 8014606:	4615      	mov	r5, r2
 8014608:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801460a:	4798      	blx	r3
 801460c:	6823      	ldr	r3, [r4, #0]
 801460e:	4629      	mov	r1, r5
 8014610:	4620      	mov	r0, r4
 8014612:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8014614:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014618:	4718      	bx	r3

0801461a <_ZN8touchgfx10TiledImage9getOffsetERsS1_>:
 801461a:	b570      	push	{r4, r5, r6, lr}
 801461c:	6803      	ldr	r3, [r0, #0]
 801461e:	4604      	mov	r4, r0
 8014620:	460e      	mov	r6, r1
 8014622:	4615      	mov	r5, r2
 8014624:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8014626:	4798      	blx	r3
 8014628:	8030      	strh	r0, [r6, #0]
 801462a:	6823      	ldr	r3, [r4, #0]
 801462c:	4620      	mov	r0, r4
 801462e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8014630:	4798      	blx	r3
 8014632:	8028      	strh	r0, [r5, #0]
 8014634:	bd70      	pop	{r4, r5, r6, pc}

08014636 <_ZN8touchgfx10TiledImage10getXOffsetEv>:
 8014636:	f9b0 002a 	ldrsh.w	r0, [r0, #42]	@ 0x2a
 801463a:	4770      	bx	lr

0801463c <_ZN8touchgfx10TiledImage10getYOffsetEv>:
 801463c:	f9b0 002c 	ldrsh.w	r0, [r0, #44]	@ 0x2c
 8014640:	4770      	bx	lr

08014642 <_ZN8touchgfx10TiledImageD1Ev>:
 8014642:	4770      	bx	lr

08014644 <_ZN8touchgfx10TiledImage9setBitmapERKNS_6BitmapE>:
 8014644:	b510      	push	{r4, lr}
 8014646:	4604      	mov	r4, r0
 8014648:	f000 fbb3 	bl	8014db2 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 801464c:	6823      	ldr	r3, [r4, #0]
 801464e:	4620      	mov	r0, r4
 8014650:	f9b4 202c 	ldrsh.w	r2, [r4, #44]	@ 0x2c
 8014654:	f9b4 102a 	ldrsh.w	r1, [r4, #42]	@ 0x2a
 8014658:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801465a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801465e:	4718      	bx	r3

08014660 <_ZN8touchgfx10TiledImage10setXOffsetEs>:
 8014660:	b538      	push	{r3, r4, r5, lr}
 8014662:	f100 0526 	add.w	r5, r0, #38	@ 0x26
 8014666:	4604      	mov	r4, r0
 8014668:	8541      	strh	r1, [r0, #42]	@ 0x2a
 801466a:	4628      	mov	r0, r5
 801466c:	f006 fdc8 	bl	801b200 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8014670:	b188      	cbz	r0, 8014696 <_ZN8touchgfx10TiledImage10setXOffsetEs+0x36>
 8014672:	4628      	mov	r0, r5
 8014674:	f006 fdc4 	bl	801b200 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8014678:	f9b4 202a 	ldrsh.w	r2, [r4, #42]	@ 0x2a
 801467c:	fb92 f3f0 	sdiv	r3, r2, r0
 8014680:	fb03 2010 	mls	r0, r3, r0, r2
 8014684:	2800      	cmp	r0, #0
 8014686:	8560      	strh	r0, [r4, #42]	@ 0x2a
 8014688:	da05      	bge.n	8014696 <_ZN8touchgfx10TiledImage10setXOffsetEs+0x36>
 801468a:	4628      	mov	r0, r5
 801468c:	f006 fdb8 	bl	801b200 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8014690:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8014692:	4418      	add	r0, r3
 8014694:	8560      	strh	r0, [r4, #42]	@ 0x2a
 8014696:	bd38      	pop	{r3, r4, r5, pc}

08014698 <_ZN8touchgfx10TiledImage10setYOffsetEs>:
 8014698:	b538      	push	{r3, r4, r5, lr}
 801469a:	f100 0526 	add.w	r5, r0, #38	@ 0x26
 801469e:	4604      	mov	r4, r0
 80146a0:	8581      	strh	r1, [r0, #44]	@ 0x2c
 80146a2:	4628      	mov	r0, r5
 80146a4:	f006 fde0 	bl	801b268 <_ZNK8touchgfx6Bitmap9getHeightEv>
 80146a8:	b188      	cbz	r0, 80146ce <_ZN8touchgfx10TiledImage10setYOffsetEs+0x36>
 80146aa:	4628      	mov	r0, r5
 80146ac:	f006 fddc 	bl	801b268 <_ZNK8touchgfx6Bitmap9getHeightEv>
 80146b0:	f9b4 202c 	ldrsh.w	r2, [r4, #44]	@ 0x2c
 80146b4:	fb92 f3f0 	sdiv	r3, r2, r0
 80146b8:	fb03 2010 	mls	r0, r3, r0, r2
 80146bc:	2800      	cmp	r0, #0
 80146be:	85a0      	strh	r0, [r4, #44]	@ 0x2c
 80146c0:	da05      	bge.n	80146ce <_ZN8touchgfx10TiledImage10setYOffsetEs+0x36>
 80146c2:	4628      	mov	r0, r5
 80146c4:	f006 fdd0 	bl	801b268 <_ZNK8touchgfx6Bitmap9getHeightEv>
 80146c8:	8da3      	ldrh	r3, [r4, #44]	@ 0x2c
 80146ca:	4418      	add	r0, r3
 80146cc:	85a0      	strh	r0, [r4, #44]	@ 0x2c
 80146ce:	bd38      	pop	{r3, r4, r5, pc}

080146d0 <_ZN8touchgfx10TiledImageD0Ev>:
 80146d0:	b510      	push	{r4, lr}
 80146d2:	4604      	mov	r4, r0
 80146d4:	2130      	movs	r1, #48	@ 0x30
 80146d6:	f012 fa5a 	bl	8026b8e <_ZdlPvj>
 80146da:	4620      	mov	r0, r4
 80146dc:	bd10      	pop	{r4, pc}
	...

080146e0 <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE>:
 80146e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80146e4:	f100 0b26 	add.w	fp, r0, #38	@ 0x26
 80146e8:	b093      	sub	sp, #76	@ 0x4c
 80146ea:	4607      	mov	r7, r0
 80146ec:	460e      	mov	r6, r1
 80146ee:	4658      	mov	r0, fp
 80146f0:	f006 fd86 	bl	801b200 <_ZNK8touchgfx6Bitmap8getWidthEv>
 80146f4:	4681      	mov	r9, r0
 80146f6:	4658      	mov	r0, fp
 80146f8:	f006 fdb6 	bl	801b268 <_ZNK8touchgfx6Bitmap9getHeightEv>
 80146fc:	4605      	mov	r5, r0
 80146fe:	f1b9 0f00 	cmp.w	r9, #0
 8014702:	f000 80c4 	beq.w	801488e <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x1ae>
 8014706:	2800      	cmp	r0, #0
 8014708:	f000 80c1 	beq.w	801488e <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x1ae>
 801470c:	2300      	movs	r3, #0
 801470e:	a90e      	add	r1, sp, #56	@ 0x38
 8014710:	4638      	mov	r0, r7
 8014712:	fa1f f889 	uxth.w	r8, r9
 8014716:	e9cd 330e 	strd	r3, r3, [sp, #56]	@ 0x38
 801471a:	683b      	ldr	r3, [r7, #0]
 801471c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801471e:	4798      	blx	r3
 8014720:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	@ 0x2a
 8014724:	f9b6 3000 	ldrsh.w	r3, [r6]
 8014728:	88b1      	ldrh	r1, [r6, #4]
 801472a:	189c      	adds	r4, r3, r2
 801472c:	440b      	add	r3, r1
 801472e:	f9b7 102c 	ldrsh.w	r1, [r7, #44]	@ 0x2c
 8014732:	fa02 f383 	sxtah	r3, r2, r3
 8014736:	3b01      	subs	r3, #1
 8014738:	fb93 f3f9 	sdiv	r3, r3, r9
 801473c:	fb94 f4f9 	sdiv	r4, r4, r9
 8014740:	fb13 f308 	smulbb	r3, r3, r8
 8014744:	fb14 f408 	smulbb	r4, r4, r8
 8014748:	b21b      	sxth	r3, r3
 801474a:	1aa4      	subs	r4, r4, r2
 801474c:	b2aa      	uxth	r2, r5
 801474e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8014750:	f9b6 3002 	ldrsh.w	r3, [r6, #2]
 8014754:	b2a4      	uxth	r4, r4
 8014756:	9205      	str	r2, [sp, #20]
 8014758:	185a      	adds	r2, r3, r1
 801475a:	9805      	ldr	r0, [sp, #20]
 801475c:	fb92 f2f5 	sdiv	r2, r2, r5
 8014760:	fb12 f200 	smulbb	r2, r2, r0
 8014764:	1a52      	subs	r2, r2, r1
 8014766:	b212      	sxth	r2, r2
 8014768:	920c      	str	r2, [sp, #48]	@ 0x30
 801476a:	88f2      	ldrh	r2, [r6, #6]
 801476c:	4413      	add	r3, r2
 801476e:	fa01 f383 	sxtah	r3, r1, r3
 8014772:	3b01      	subs	r3, #1
 8014774:	fb93 f3f5 	sdiv	r3, r3, r5
 8014778:	fb13 f300 	smulbb	r3, r3, r0
 801477c:	eb08 0504 	add.w	r5, r8, r4
 8014780:	b21b      	sxth	r3, r3
 8014782:	930d      	str	r3, [sp, #52]	@ 0x34
 8014784:	b223      	sxth	r3, r4
 8014786:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8014788:	b2ad      	uxth	r5, r5
 801478a:	4293      	cmp	r3, r2
 801478c:	9306      	str	r3, [sp, #24]
 801478e:	dc7e      	bgt.n	801488e <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x1ae>
 8014790:	b22b      	sxth	r3, r5
 8014792:	f8dd 9030 	ldr.w	r9, [sp, #48]	@ 0x30
 8014796:	930a      	str	r3, [sp, #40]	@ 0x28
 8014798:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801479a:	4599      	cmp	r9, r3
 801479c:	dd03      	ble.n	80147a6 <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0xc6>
 801479e:	4444      	add	r4, r8
 80147a0:	4445      	add	r5, r8
 80147a2:	b2a4      	uxth	r4, r4
 80147a4:	e7ee      	b.n	8014784 <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0xa4>
 80147a6:	f9b6 c000 	ldrsh.w	ip, [r6]
 80147aa:	88b2      	ldrh	r2, [r6, #4]
 80147ac:	9806      	ldr	r0, [sp, #24]
 80147ae:	4462      	add	r2, ip
 80147b0:	9905      	ldr	r1, [sp, #20]
 80147b2:	b292      	uxth	r2, r2
 80147b4:	b213      	sxth	r3, r2
 80147b6:	9308      	str	r3, [sp, #32]
 80147b8:	fa1f f389 	uxth.w	r3, r9
 80147bc:	4419      	add	r1, r3
 80147be:	9307      	str	r3, [sp, #28]
 80147c0:	4603      	mov	r3, r0
 80147c2:	9808      	ldr	r0, [sp, #32]
 80147c4:	b289      	uxth	r1, r1
 80147c6:	4283      	cmp	r3, r0
 80147c8:	fa0f fa81 	sxth.w	sl, r1
 80147cc:	da5b      	bge.n	8014886 <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x1a6>
 80147ce:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80147d0:	4584      	cmp	ip, r0
 80147d2:	da58      	bge.n	8014886 <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x1a6>
 80147d4:	f9b6 0002 	ldrsh.w	r0, [r6, #2]
 80147d8:	f8b6 e006 	ldrh.w	lr, [r6, #6]
 80147dc:	4486      	add	lr, r0
 80147de:	fa1f fe8e 	uxth.w	lr, lr
 80147e2:	fa0f f38e 	sxth.w	r3, lr
 80147e6:	4599      	cmp	r9, r3
 80147e8:	9309      	str	r3, [sp, #36]	@ 0x24
 80147ea:	da4c      	bge.n	8014886 <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x1a6>
 80147ec:	4550      	cmp	r0, sl
 80147ee:	da4a      	bge.n	8014886 <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x1a6>
 80147f0:	9b06      	ldr	r3, [sp, #24]
 80147f2:	459c      	cmp	ip, r3
 80147f4:	bfb8      	it	lt
 80147f6:	469c      	movlt	ip, r3
 80147f8:	4548      	cmp	r0, r9
 80147fa:	9b08      	ldr	r3, [sp, #32]
 80147fc:	bfb8      	it	lt
 80147fe:	4648      	movlt	r0, r9
 8014800:	f8ad c040 	strh.w	ip, [sp, #64]	@ 0x40
 8014804:	4699      	mov	r9, r3
 8014806:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8014808:	f8ad 0042 	strh.w	r0, [sp, #66]	@ 0x42
 801480c:	4599      	cmp	r9, r3
 801480e:	bfc8      	it	gt
 8014810:	462a      	movgt	r2, r5
 8014812:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014814:	4553      	cmp	r3, sl
 8014816:	bfd8      	it	le
 8014818:	4671      	movle	r1, lr
 801481a:	eba2 020c 	sub.w	r2, r2, ip
 801481e:	1a09      	subs	r1, r1, r0
 8014820:	f8ad 2044 	strh.w	r2, [sp, #68]	@ 0x44
 8014824:	f8ad 1046 	strh.w	r1, [sp, #70]	@ 0x46
 8014828:	f8bd 2040 	ldrh.w	r2, [sp, #64]	@ 0x40
 801482c:	9b07      	ldr	r3, [sp, #28]
 801482e:	1b12      	subs	r2, r2, r4
 8014830:	f8ad 2040 	strh.w	r2, [sp, #64]	@ 0x40
 8014834:	f8bd 2042 	ldrh.w	r2, [sp, #66]	@ 0x42
 8014838:	1ad2      	subs	r2, r2, r3
 801483a:	4b16      	ldr	r3, [pc, #88]	@ (8014894 <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x1b4>)
 801483c:	f8ad 2042 	strh.w	r2, [sp, #66]	@ 0x42
 8014840:	681a      	ldr	r2, [r3, #0]
 8014842:	f892 1058 	ldrb.w	r1, [r2, #88]	@ 0x58
 8014846:	b109      	cbz	r1, 801484c <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x16c>
 8014848:	6cd0      	ldr	r0, [r2, #76]	@ 0x4c
 801484a:	b900      	cbnz	r0, 801484e <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x16e>
 801484c:	6890      	ldr	r0, [r2, #8]
 801484e:	f8bd 203a 	ldrh.w	r2, [sp, #58]	@ 0x3a
 8014852:	f04f 0c01 	mov.w	ip, #1
 8014856:	9b07      	ldr	r3, [sp, #28]
 8014858:	6801      	ldr	r1, [r0, #0]
 801485a:	4413      	add	r3, r2
 801485c:	f8cd c008 	str.w	ip, [sp, #8]
 8014860:	f8bd 2038 	ldrh.w	r2, [sp, #56]	@ 0x38
 8014864:	f897 c028 	ldrb.w	ip, [r7, #40]	@ 0x28
 8014868:	b21b      	sxth	r3, r3
 801486a:	4422      	add	r2, r4
 801486c:	f8cd c004 	str.w	ip, [sp, #4]
 8014870:	f10d 0c40 	add.w	ip, sp, #64	@ 0x40
 8014874:	b212      	sxth	r2, r2
 8014876:	f8cd c000 	str.w	ip, [sp]
 801487a:	f8d1 9008 	ldr.w	r9, [r1, #8]
 801487e:	4659      	mov	r1, fp
 8014880:	47c8      	blx	r9
 8014882:	46d1      	mov	r9, sl
 8014884:	e788      	b.n	8014798 <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0xb8>
 8014886:	2300      	movs	r3, #0
 8014888:	e9cd 3310 	strd	r3, r3, [sp, #64]	@ 0x40
 801488c:	e7cc      	b.n	8014828 <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x148>
 801488e:	b013      	add	sp, #76	@ 0x4c
 8014890:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014894:	24028e20 	.word	0x24028e20

08014898 <_ZNK8touchgfx10TiledImage12getSolidRectEv>:
 8014898:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801489c:	f891 3028 	ldrb.w	r3, [r1, #40]	@ 0x28
 80148a0:	4606      	mov	r6, r0
 80148a2:	4689      	mov	r9, r1
 80148a4:	2bff      	cmp	r3, #255	@ 0xff
 80148a6:	d008      	beq.n	80148ba <_ZNK8touchgfx10TiledImage12getSolidRectEv+0x22>
 80148a8:	2300      	movs	r3, #0
 80148aa:	8003      	strh	r3, [r0, #0]
 80148ac:	8043      	strh	r3, [r0, #2]
 80148ae:	8083      	strh	r3, [r0, #4]
 80148b0:	4630      	mov	r0, r6
 80148b2:	80f3      	strh	r3, [r6, #6]
 80148b4:	b003      	add	sp, #12
 80148b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80148ba:	f101 0b26 	add.w	fp, r1, #38	@ 0x26
 80148be:	4668      	mov	r0, sp
 80148c0:	4659      	mov	r1, fp
 80148c2:	f006 fd05 	bl	801b2d0 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 80148c6:	f9bd 4004 	ldrsh.w	r4, [sp, #4]
 80148ca:	4658      	mov	r0, fp
 80148cc:	f9bd 7000 	ldrsh.w	r7, [sp]
 80148d0:	f9bd a002 	ldrsh.w	sl, [sp, #2]
 80148d4:	f9bd 8006 	ldrsh.w	r8, [sp, #6]
 80148d8:	f006 fc92 	bl	801b200 <_ZNK8touchgfx6Bitmap8getWidthEv>
 80148dc:	4284      	cmp	r4, r0
 80148de:	d10d      	bne.n	80148fc <_ZNK8touchgfx10TiledImage12getSolidRectEv+0x64>
 80148e0:	f9b9 5008 	ldrsh.w	r5, [r9, #8]
 80148e4:	4658      	mov	r0, fp
 80148e6:	f006 fcbf 	bl	801b268 <_ZNK8touchgfx6Bitmap9getHeightEv>
 80148ea:	4580      	cmp	r8, r0
 80148ec:	d12a      	bne.n	8014944 <_ZNK8touchgfx10TiledImage12getSolidRectEv+0xac>
 80148ee:	f9b9 300a 	ldrsh.w	r3, [r9, #10]
 80148f2:	8037      	strh	r7, [r6, #0]
 80148f4:	f8a6 a002 	strh.w	sl, [r6, #2]
 80148f8:	80b5      	strh	r5, [r6, #4]
 80148fa:	e7d9      	b.n	80148b0 <_ZNK8touchgfx10TiledImage12getSolidRectEv+0x18>
 80148fc:	f8b9 502a 	ldrh.w	r5, [r9, #42]	@ 0x2a
 8014900:	4658      	mov	r0, fp
 8014902:	f006 fc7d 	bl	801b200 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8014906:	f9b9 2008 	ldrsh.w	r2, [r9, #8]
 801490a:	1b7f      	subs	r7, r7, r5
 801490c:	b2a3      	uxth	r3, r4
 801490e:	b2bd      	uxth	r5, r7
 8014910:	b22f      	sxth	r7, r5
 8014912:	4428      	add	r0, r5
 8014914:	2f00      	cmp	r7, #0
 8014916:	b280      	uxth	r0, r0
 8014918:	bfb8      	it	lt
 801491a:	18ed      	addlt	r5, r5, r3
 801491c:	4403      	add	r3, r0
 801491e:	bfac      	ite	ge
 8014920:	4625      	movge	r5, r4
 8014922:	2700      	movlt	r7, #0
 8014924:	b29b      	uxth	r3, r3
 8014926:	bfb8      	it	lt
 8014928:	b22d      	sxthlt	r5, r5
 801492a:	b219      	sxth	r1, r3
 801492c:	bfb8      	it	lt
 801492e:	ea25 75e5 	biclt.w	r5, r5, r5, asr #31
 8014932:	4291      	cmp	r1, r2
 8014934:	bfc4      	itt	gt
 8014936:	1a9c      	subgt	r4, r3, r2
 8014938:	b224      	sxthgt	r4, r4
 801493a:	42ac      	cmp	r4, r5
 801493c:	bfc4      	itt	gt
 801493e:	b207      	sxthgt	r7, r0
 8014940:	4625      	movgt	r5, r4
 8014942:	e7cf      	b.n	80148e4 <_ZNK8touchgfx10TiledImage12getSolidRectEv+0x4c>
 8014944:	f8b9 402c 	ldrh.w	r4, [r9, #44]	@ 0x2c
 8014948:	4658      	mov	r0, fp
 801494a:	f006 fc8d 	bl	801b268 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801494e:	f9b9 100a 	ldrsh.w	r1, [r9, #10]
 8014952:	ebaa 0404 	sub.w	r4, sl, r4
 8014956:	fa1f f288 	uxth.w	r2, r8
 801495a:	b2a4      	uxth	r4, r4
 801495c:	fa0f fa84 	sxth.w	sl, r4
 8014960:	4420      	add	r0, r4
 8014962:	f1ba 0f00 	cmp.w	sl, #0
 8014966:	b280      	uxth	r0, r0
 8014968:	bfb8      	it	lt
 801496a:	18a3      	addlt	r3, r4, r2
 801496c:	4402      	add	r2, r0
 801496e:	bfac      	ite	ge
 8014970:	4643      	movge	r3, r8
 8014972:	f04f 0a00 	movlt.w	sl, #0
 8014976:	b292      	uxth	r2, r2
 8014978:	bfb8      	it	lt
 801497a:	b21b      	sxthlt	r3, r3
 801497c:	b214      	sxth	r4, r2
 801497e:	bfb8      	it	lt
 8014980:	ea23 73e3 	biclt.w	r3, r3, r3, asr #31
 8014984:	428c      	cmp	r4, r1
 8014986:	bfc4      	itt	gt
 8014988:	eba2 0801 	subgt.w	r8, r2, r1
 801498c:	fa0f f888 	sxthgt.w	r8, r8
 8014990:	4598      	cmp	r8, r3
 8014992:	bfc4      	itt	gt
 8014994:	fa0f fa80 	sxthgt.w	sl, r0
 8014998:	4643      	movgt	r3, r8
 801499a:	e7aa      	b.n	80148f2 <_ZNK8touchgfx10TiledImage12getSolidRectEv+0x5a>

0801499c <_ZN8touchgfx5Gauge8setWidthEs>:
 801499c:	8101      	strh	r1, [r0, #8]
 801499e:	f8a0 10bc 	strh.w	r1, [r0, #188]	@ 0xbc
 80149a2:	f8a0 1160 	strh.w	r1, [r0, #352]	@ 0x160
 80149a6:	4770      	bx	lr

080149a8 <_ZN8touchgfx5Gauge9setHeightEs>:
 80149a8:	8141      	strh	r1, [r0, #10]
 80149aa:	f8a0 10be 	strh.w	r1, [r0, #190]	@ 0xbe
 80149ae:	f8a0 1162 	strh.w	r1, [r0, #354]	@ 0x162
 80149b2:	4770      	bx	lr

080149b4 <_ZNK8touchgfx5Gauge13getStartAngleEv>:
 80149b4:	f8d0 0148 	ldr.w	r0, [r0, #328]	@ 0x148
 80149b8:	4770      	bx	lr

080149ba <_ZNK8touchgfx5Gauge11getEndAngleEv>:
 80149ba:	f8d0 014c 	ldr.w	r0, [r0, #332]	@ 0x14c
 80149be:	4770      	bx	lr

080149c0 <_ZN8touchgfx5Gauge28setProgressIndicatorPositionEssss>:
 80149c0:	4770      	bx	lr

080149c2 <_ZN8touchgfx5GaugeD1Ev>:
 80149c2:	4770      	bx	lr

080149c4 <_ZN8touchgfx5Gauge8setAlphaEh>:
 80149c4:	b538      	push	{r3, r4, r5, lr}
 80149c6:	4604      	mov	r4, r0
 80149c8:	460d      	mov	r5, r1
 80149ca:	f7fa fb45 	bl	800f058 <_ZN8touchgfx25AbstractProgressIndicator8setAlphaEh>
 80149ce:	f884 50dc 	strb.w	r5, [r4, #220]	@ 0xdc
 80149d2:	f884 517e 	strb.w	r5, [r4, #382]	@ 0x17e
 80149d6:	bd38      	pop	{r3, r4, r5, pc}

080149d8 <_ZN8touchgfx5GaugeD0Ev>:
 80149d8:	b510      	push	{r4, lr}
 80149da:	4604      	mov	r4, r0
 80149dc:	f44f 71d0 	mov.w	r1, #416	@ 0x1a0
 80149e0:	f012 f8d5 	bl	8026b8e <_ZdlPvj>
 80149e4:	4620      	mov	r0, r4
 80149e6:	bd10      	pop	{r4, pc}

080149e8 <_ZN8touchgfx5GaugeC1Ev>:
 80149e8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80149ea:	4604      	mov	r4, r0
 80149ec:	f7fa fc56 	bl	800f29c <_ZN8touchgfx25AbstractProgressIndicatorC1Ev>
 80149f0:	4b18      	ldr	r3, [pc, #96]	@ (8014a54 <_ZN8touchgfx5GaugeC1Ev+0x6c>)
 80149f2:	a902      	add	r1, sp, #8
 80149f4:	4626      	mov	r6, r4
 80149f6:	2500      	movs	r5, #0
 80149f8:	f504 77ac 	add.w	r7, r4, #344	@ 0x158
 80149fc:	f846 3bb4 	str.w	r3, [r6], #180
 8014a00:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8014a04:	4630      	mov	r0, r6
 8014a06:	f821 3d04 	strh.w	r3, [r1, #-4]!
 8014a0a:	f011 fac1 	bl	8025f90 <_ZN8touchgfx13TextureMapperC1ERKNS_6BitmapE>
 8014a0e:	2301      	movs	r3, #1
 8014a10:	f8c4 5148 	str.w	r5, [r4, #328]	@ 0x148
 8014a14:	4638      	mov	r0, r7
 8014a16:	f884 3144 	strb.w	r3, [r4, #324]	@ 0x144
 8014a1a:	f884 3145 	strb.w	r3, [r4, #325]	@ 0x145
 8014a1e:	f8c4 514c 	str.w	r5, [r4, #332]	@ 0x14c
 8014a22:	f8c4 5150 	str.w	r5, [r4, #336]	@ 0x150
 8014a26:	f8c4 5154 	str.w	r5, [r4, #340]	@ 0x154
 8014a2a:	f7fe fba9 	bl	8013180 <_ZN8touchgfx6CircleC1Ev>
 8014a2e:	f104 0158 	add.w	r1, r4, #88	@ 0x58
 8014a32:	4620      	mov	r0, r4
 8014a34:	f7fa fea0 	bl	800f778 <_ZN8touchgfx9Container6removeERNS_8DrawableE>
 8014a38:	4639      	mov	r1, r7
 8014a3a:	4620      	mov	r0, r4
 8014a3c:	f7fa fe5b 	bl	800f6f6 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8014a40:	4620      	mov	r0, r4
 8014a42:	4631      	mov	r1, r6
 8014a44:	f7fa fe57 	bl	800f6f6 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8014a48:	4620      	mov	r0, r4
 8014a4a:	f884 517d 	strb.w	r5, [r4, #381]	@ 0x17d
 8014a4e:	b003      	add	sp, #12
 8014a50:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014a52:	bf00      	nop
 8014a54:	0802c4f8 	.word	0x0802c4f8

08014a58 <_ZN8touchgfx5Gauge19setBackgroundOffsetEss>:
 8014a58:	b508      	push	{r3, lr}
 8014a5a:	302c      	adds	r0, #44	@ 0x2c
 8014a5c:	f7ef f983 	bl	8003d66 <_ZN8touchgfx8Drawable5setXYEss>
 8014a60:	bd08      	pop	{r3, pc}

08014a62 <_ZN8touchgfx5Gauge14setArcPositionEssss>:
 8014a62:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014a66:	f500 75ac 	add.w	r5, r0, #344	@ 0x158
 8014a6a:	4604      	mov	r4, r0
 8014a6c:	460e      	mov	r6, r1
 8014a6e:	4617      	mov	r7, r2
 8014a70:	4628      	mov	r0, r5
 8014a72:	4698      	mov	r8, r3
 8014a74:	f7ef f977 	bl	8003d66 <_ZN8touchgfx8Drawable5setXYEss>
 8014a78:	f8d4 3158 	ldr.w	r3, [r4, #344]	@ 0x158
 8014a7c:	4641      	mov	r1, r8
 8014a7e:	4628      	mov	r0, r5
 8014a80:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8014a82:	4790      	blx	r2
 8014a84:	f8d4 3158 	ldr.w	r3, [r4, #344]	@ 0x158
 8014a88:	f9bd 1018 	ldrsh.w	r1, [sp, #24]
 8014a8c:	4628      	mov	r0, r5
 8014a8e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8014a90:	4798      	blx	r3
 8014a92:	f9b4 2152 	ldrsh.w	r2, [r4, #338]	@ 0x152
 8014a96:	f9b4 1150 	ldrsh.w	r1, [r4, #336]	@ 0x150
 8014a9a:	1bd2      	subs	r2, r2, r7
 8014a9c:	1b89      	subs	r1, r1, r6
 8014a9e:	0152      	lsls	r2, r2, #5
 8014aa0:	0149      	lsls	r1, r1, #5
 8014aa2:	3210      	adds	r2, #16
 8014aa4:	3110      	adds	r1, #16
 8014aa6:	f8c4 2188 	str.w	r2, [r4, #392]	@ 0x188
 8014aaa:	f8c4 1184 	str.w	r1, [r4, #388]	@ 0x184
 8014aae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08014ab2 <_ZN8touchgfx5Gauge33setMovingNeedleRenderingAlgorithmENS_13TextureMapper18RenderingAlgorithmE>:
 8014ab2:	f880 1144 	strb.w	r1, [r0, #324]	@ 0x144
 8014ab6:	4770      	bx	lr

08014ab8 <_ZN8touchgfx5Gauge33setSteadyNeedleRenderingAlgorithmENS_13TextureMapper18RenderingAlgorithmE>:
 8014ab8:	f880 1145 	strb.w	r1, [r0, #325]	@ 0x145
 8014abc:	4770      	bx	lr

08014abe <_ZN8touchgfx5Gauge13setArcVisibleEb>:
 8014abe:	f880 117d 	strb.w	r1, [r0, #381]	@ 0x17d
 8014ac2:	4770      	bx	lr

08014ac4 <_ZN8touchgfx5Gauge6getArcEv>:
 8014ac4:	f500 70ac 	add.w	r0, r0, #344	@ 0x158
 8014ac8:	4770      	bx	lr
	...

08014acc <_ZN8touchgfx5Gauge24setupNeedleTextureMapperEv>:
 8014acc:	b538      	push	{r3, r4, r5, lr}
 8014ace:	8902      	ldrh	r2, [r0, #8]
 8014ad0:	f100 05b4 	add.w	r5, r0, #180	@ 0xb4
 8014ad4:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 8014ad8:	4604      	mov	r4, r0
 8014ada:	f8a0 20bc 	strh.w	r2, [r0, #188]	@ 0xbc
 8014ade:	2200      	movs	r2, #0
 8014ae0:	f8a0 30be 	strh.w	r3, [r0, #190]	@ 0xbe
 8014ae4:	4628      	mov	r0, r5
 8014ae6:	4611      	mov	r1, r2
 8014ae8:	f7ef f93d 	bl	8003d66 <_ZN8touchgfx8Drawable5setXYEss>
 8014aec:	f9b4 2156 	ldrsh.w	r2, [r4, #342]	@ 0x156
 8014af0:	f9b4 3152 	ldrsh.w	r3, [r4, #338]	@ 0x152
 8014af4:	4628      	mov	r0, r5
 8014af6:	1a9b      	subs	r3, r3, r2
 8014af8:	f9b4 2154 	ldrsh.w	r2, [r4, #340]	@ 0x154
 8014afc:	ee07 3a90 	vmov	s15, r3
 8014b00:	f9b4 3150 	ldrsh.w	r3, [r4, #336]	@ 0x150
 8014b04:	1a9b      	subs	r3, r3, r2
 8014b06:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8014b0a:	ee07 3a10 	vmov	s14, r3
 8014b0e:	edc4 7a39 	vstr	s15, [r4, #228]	@ 0xe4
 8014b12:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8014b16:	ed84 7a38 	vstr	s14, [r4, #224]	@ 0xe0
 8014b1a:	f011 fa85 	bl	8026028 <_ZN8touchgfx13TextureMapper19applyTransformationEv>
 8014b1e:	4b16      	ldr	r3, [pc, #88]	@ (8014b78 <_ZN8touchgfx5Gauge24setupNeedleTextureMapperEv+0xac>)
 8014b20:	4628      	mov	r0, r5
 8014b22:	f8c4 310c 	str.w	r3, [r4, #268]	@ 0x10c
 8014b26:	f011 fa7f 	bl	8026028 <_ZN8touchgfx13TextureMapper19applyTransformationEv>
 8014b2a:	f9b4 3152 	ldrsh.w	r3, [r4, #338]	@ 0x152
 8014b2e:	f9b4 2150 	ldrsh.w	r2, [r4, #336]	@ 0x150
 8014b32:	4628      	mov	r0, r5
 8014b34:	ee07 3a90 	vmov	s15, r3
 8014b38:	f8d4 310c 	ldr.w	r3, [r4, #268]	@ 0x10c
 8014b3c:	ee07 2a10 	vmov	s14, r2
 8014b40:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8014b44:	f8c4 3100 	str.w	r3, [r4, #256]	@ 0x100
 8014b48:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8014b4c:	edc4 7a3f 	vstr	s15, [r4, #252]	@ 0xfc
 8014b50:	ed84 7a3e 	vstr	s14, [r4, #248]	@ 0xf8
 8014b54:	f011 fa68 	bl	8026028 <_ZN8touchgfx13TextureMapper19applyTransformationEv>
 8014b58:	f8d4 30fc 	ldr.w	r3, [r4, #252]	@ 0xfc
 8014b5c:	f8d4 20f8 	ldr.w	r2, [r4, #248]	@ 0xf8
 8014b60:	4628      	mov	r0, r5
 8014b62:	f8c4 3108 	str.w	r3, [r4, #264]	@ 0x108
 8014b66:	f8c4 2104 	str.w	r2, [r4, #260]	@ 0x104
 8014b6a:	f011 fa5d 	bl	8026028 <_ZN8touchgfx13TextureMapper19applyTransformationEv>
 8014b6e:	2301      	movs	r3, #1
 8014b70:	f884 30dd 	strb.w	r3, [r4, #221]	@ 0xdd
 8014b74:	bd38      	pop	{r3, r4, r5, pc}
 8014b76:	bf00      	nop
 8014b78:	43960000 	.word	0x43960000

08014b7c <_ZN8touchgfx5Gauge9setNeedleEtss>:
 8014b7c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8014b7e:	4604      	mov	r4, r0
 8014b80:	a802      	add	r0, sp, #8
 8014b82:	4616      	mov	r6, r2
 8014b84:	461d      	mov	r5, r3
 8014b86:	f820 1d04 	strh.w	r1, [r0, #-4]!
 8014b8a:	4601      	mov	r1, r0
 8014b8c:	f104 00b4 	add.w	r0, r4, #180	@ 0xb4
 8014b90:	f011 fba0 	bl	80262d4 <_ZN8touchgfx13TextureMapper9setBitmapERKNS_6BitmapE>
 8014b94:	4620      	mov	r0, r4
 8014b96:	f8a4 6154 	strh.w	r6, [r4, #340]	@ 0x154
 8014b9a:	f8a4 5156 	strh.w	r5, [r4, #342]	@ 0x156
 8014b9e:	f7ff ff95 	bl	8014acc <_ZN8touchgfx5Gauge24setupNeedleTextureMapperEv>
 8014ba2:	b002      	add	sp, #8
 8014ba4:	bd70      	pop	{r4, r5, r6, pc}

08014ba6 <_ZN8touchgfx5Gauge9setCenterEii>:
 8014ba6:	b570      	push	{r4, r5, r6, lr}
 8014ba8:	4606      	mov	r6, r0
 8014baa:	460d      	mov	r5, r1
 8014bac:	4614      	mov	r4, r2
 8014bae:	f8a6 1150 	strh.w	r1, [r6, #336]	@ 0x150
 8014bb2:	f8a6 2152 	strh.w	r2, [r6, #338]	@ 0x152
 8014bb6:	f7ff ff89 	bl	8014acc <_ZN8touchgfx5Gauge24setupNeedleTextureMapperEv>
 8014bba:	f9b6 215e 	ldrsh.w	r2, [r6, #350]	@ 0x15e
 8014bbe:	f9b6 115c 	ldrsh.w	r1, [r6, #348]	@ 0x15c
 8014bc2:	1aa4      	subs	r4, r4, r2
 8014bc4:	1a6d      	subs	r5, r5, r1
 8014bc6:	0164      	lsls	r4, r4, #5
 8014bc8:	016d      	lsls	r5, r5, #5
 8014bca:	3410      	adds	r4, #16
 8014bcc:	3510      	adds	r5, #16
 8014bce:	f8c6 4188 	str.w	r4, [r6, #392]	@ 0x188
 8014bd2:	f8c6 5184 	str.w	r5, [r6, #388]	@ 0x184
 8014bd6:	bd70      	pop	{r4, r5, r6, pc}

08014bd8 <_ZN8touchgfx6Circle12updateArcEndIiEEvT_>:
 8014bd8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8014bda:	0149      	lsls	r1, r1, #5
 8014bdc:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 8014bde:	4604      	mov	r4, r0
 8014be0:	4299      	cmp	r1, r3
 8014be2:	9101      	str	r1, [sp, #4]
 8014be4:	d00b      	beq.n	8014bfe <_ZN8touchgfx6Circle12updateArcEndIiEEvT_+0x26>
 8014be6:	4601      	mov	r1, r0
 8014be8:	aa01      	add	r2, sp, #4
 8014bea:	a802      	add	r0, sp, #8
 8014bec:	f7fe fccd 	bl	801358a <_ZNK8touchgfx6Circle32getMinimalRectForUpdatedEndAngleERKNS_7CWRUtil2Q5E>
 8014bf0:	9b01      	ldr	r3, [sp, #4]
 8014bf2:	a902      	add	r1, sp, #8
 8014bf4:	4620      	mov	r0, r4
 8014bf6:	63e3      	str	r3, [r4, #60]	@ 0x3c
 8014bf8:	6823      	ldr	r3, [r4, #0]
 8014bfa:	691b      	ldr	r3, [r3, #16]
 8014bfc:	4798      	blx	r3
 8014bfe:	b004      	add	sp, #16
 8014c00:	bd10      	pop	{r4, pc}
	...

08014c04 <_ZN8touchgfx5Gauge8setValueEi>:
 8014c04:	b570      	push	{r4, r5, r6, lr}
 8014c06:	4604      	mov	r4, r0
 8014c08:	f7fa fa79 	bl	800f0fe <_ZN8touchgfx25AbstractProgressIndicator8setValueEi>
 8014c0c:	e9d4 3229 	ldrd	r3, r2, [r4, #164]	@ 0xa4
 8014c10:	f8d4 114c 	ldr.w	r1, [r4, #332]	@ 0x14c
 8014c14:	4620      	mov	r0, r4
 8014c16:	429a      	cmp	r2, r3
 8014c18:	f504 76ac 	add.w	r6, r4, #344	@ 0x158
 8014c1c:	bfac      	ite	ge
 8014c1e:	f894 3145 	ldrbge.w	r3, [r4, #325]	@ 0x145
 8014c22:	f894 3144 	ldrblt.w	r3, [r4, #324]	@ 0x144
 8014c26:	f884 30dd 	strb.w	r3, [r4, #221]	@ 0xdd
 8014c2a:	f8d4 3148 	ldr.w	r3, [r4, #328]	@ 0x148
 8014c2e:	1ac9      	subs	r1, r1, r3
 8014c30:	2900      	cmp	r1, #0
 8014c32:	bfb8      	it	lt
 8014c34:	4249      	neglt	r1, r1
 8014c36:	b289      	uxth	r1, r1
 8014c38:	f7fa fa83 	bl	800f142 <_ZNK8touchgfx25AbstractProgressIndicator11getProgressEt>
 8014c3c:	f8d4 3148 	ldr.w	r3, [r4, #328]	@ 0x148
 8014c40:	f8d4 214c 	ldr.w	r2, [r4, #332]	@ 0x14c
 8014c44:	4605      	mov	r5, r0
 8014c46:	eddf 6a18 	vldr	s13, [pc, #96]	@ 8014ca8 <_ZN8touchgfx5Gauge8setValueEi+0xa4>
 8014c4a:	f104 00b4 	add.w	r0, r4, #180	@ 0xb4
 8014c4e:	429a      	cmp	r2, r3
 8014c50:	ed9f 7a16 	vldr	s14, [pc, #88]	@ 8014cac <_ZN8touchgfx5Gauge8setValueEi+0xa8>
 8014c54:	da15      	bge.n	8014c82 <_ZN8touchgfx5Gauge8setValueEi+0x7e>
 8014c56:	1b5b      	subs	r3, r3, r5
 8014c58:	edd4 0a3b 	vldr	s1, [r4, #236]	@ 0xec
 8014c5c:	ed94 0a3a 	vldr	s0, [r4, #232]	@ 0xe8
 8014c60:	ee07 3a90 	vmov	s15, r3
 8014c64:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8014c68:	ee87 1aa6 	vdiv.f32	s2, s15, s13
 8014c6c:	ee21 1a07 	vmul.f32	s2, s2, s14
 8014c70:	f011 f948 	bl	8025f04 <_ZN8touchgfx13TextureMapper12updateAnglesEfff>
 8014c74:	f8d4 1148 	ldr.w	r1, [r4, #328]	@ 0x148
 8014c78:	1b49      	subs	r1, r1, r5
 8014c7a:	4630      	mov	r0, r6
 8014c7c:	f7ff ffac 	bl	8014bd8 <_ZN8touchgfx6Circle12updateArcEndIiEEvT_>
 8014c80:	bd70      	pop	{r4, r5, r6, pc}
 8014c82:	442b      	add	r3, r5
 8014c84:	edd4 0a3b 	vldr	s1, [r4, #236]	@ 0xec
 8014c88:	ed94 0a3a 	vldr	s0, [r4, #232]	@ 0xe8
 8014c8c:	ee07 3a90 	vmov	s15, r3
 8014c90:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8014c94:	ee87 1aa6 	vdiv.f32	s2, s15, s13
 8014c98:	ee21 1a07 	vmul.f32	s2, s2, s14
 8014c9c:	f011 f932 	bl	8025f04 <_ZN8touchgfx13TextureMapper12updateAnglesEfff>
 8014ca0:	f8d4 1148 	ldr.w	r1, [r4, #328]	@ 0x148
 8014ca4:	4429      	add	r1, r5
 8014ca6:	e7e8      	b.n	8014c7a <_ZN8touchgfx5Gauge8setValueEi+0x76>
 8014ca8:	43340000 	.word	0x43340000
 8014cac:	40490fdb 	.word	0x40490fdb

08014cb0 <_ZN8touchgfx5Gauge16setStartEndAngleEii>:
 8014cb0:	b510      	push	{r4, lr}
 8014cb2:	f8c0 1148 	str.w	r1, [r0, #328]	@ 0x148
 8014cb6:	0149      	lsls	r1, r1, #5
 8014cb8:	f8c0 214c 	str.w	r2, [r0, #332]	@ 0x14c
 8014cbc:	0152      	lsls	r2, r2, #5
 8014cbe:	4604      	mov	r4, r0
 8014cc0:	f8c0 1190 	str.w	r1, [r0, #400]	@ 0x190
 8014cc4:	f8c0 2194 	str.w	r2, [r0, #404]	@ 0x194
 8014cc8:	f7fa f9c3 	bl	800f052 <_ZNK8touchgfx25AbstractProgressIndicator8getValueEv>
 8014ccc:	4601      	mov	r1, r0
 8014cce:	4620      	mov	r0, r4
 8014cd0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014cd4:	f7ff bf96 	b.w	8014c04 <_ZN8touchgfx5Gauge8setValueEi>

08014cd8 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE>:
 8014cd8:	4b30      	ldr	r3, [pc, #192]	@ (8014d9c <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xc4>)
 8014cda:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014cde:	8d82      	ldrh	r2, [r0, #44]	@ 0x2c
 8014ce0:	b08d      	sub	sp, #52	@ 0x34
 8014ce2:	881b      	ldrh	r3, [r3, #0]
 8014ce4:	4604      	mov	r4, r0
 8014ce6:	460f      	mov	r7, r1
 8014ce8:	4293      	cmp	r3, r2
 8014cea:	d954      	bls.n	8014d96 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xbe>
 8014cec:	4b2c      	ldr	r3, [pc, #176]	@ (8014da0 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xc8>)
 8014cee:	6819      	ldr	r1, [r3, #0]
 8014cf0:	eb01 0342 	add.w	r3, r1, r2, lsl #1
 8014cf4:	f811 1012 	ldrb.w	r1, [r1, r2, lsl #1]
 8014cf8:	4a2a      	ldr	r2, [pc, #168]	@ (8014da4 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xcc>)
 8014cfa:	6812      	ldr	r2, [r2, #0]
 8014cfc:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 8014d00:	2900      	cmp	r1, #0
 8014d02:	d048      	beq.n	8014d96 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xbe>
 8014d04:	785a      	ldrb	r2, [r3, #1]
 8014d06:	f894 3039 	ldrb.w	r3, [r4, #57]	@ 0x39
 8014d0a:	f3c2 0801 	ubfx	r8, r2, #0, #2
 8014d0e:	f3c2 0281 	ubfx	r2, r2, #2, #2
 8014d12:	f88d 302c 	strb.w	r3, [sp, #44]	@ 0x2c
 8014d16:	4b24      	ldr	r3, [pc, #144]	@ (8014da8 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xd0>)
 8014d18:	f88d 2021 	strb.w	r2, [sp, #33]	@ 0x21
 8014d1c:	681a      	ldr	r2, [r3, #0]
 8014d1e:	f890 5036 	ldrb.w	r5, [r0, #54]	@ 0x36
 8014d22:	f9b0 c034 	ldrsh.w	ip, [r0, #52]	@ 0x34
 8014d26:	f890 e038 	ldrb.w	lr, [r0, #56]	@ 0x38
 8014d2a:	6b26      	ldr	r6, [r4, #48]	@ 0x30
 8014d2c:	f890 0037 	ldrb.w	r0, [r0, #55]	@ 0x37
 8014d30:	f892 3058 	ldrb.w	r3, [r2, #88]	@ 0x58
 8014d34:	9107      	str	r1, [sp, #28]
 8014d36:	f88d 8020 	strb.w	r8, [sp, #32]
 8014d3a:	f88d e022 	strb.w	lr, [sp, #34]	@ 0x22
 8014d3e:	9609      	str	r6, [sp, #36]	@ 0x24
 8014d40:	f8ad c028 	strh.w	ip, [sp, #40]	@ 0x28
 8014d44:	f88d 502a 	strb.w	r5, [sp, #42]	@ 0x2a
 8014d48:	f88d 002b 	strb.w	r0, [sp, #43]	@ 0x2b
 8014d4c:	b10b      	cbz	r3, 8014d52 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0x7a>
 8014d4e:	6cd5      	ldr	r5, [r2, #76]	@ 0x4c
 8014d50:	b905      	cbnz	r5, 8014d54 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0x7c>
 8014d52:	6895      	ldr	r5, [r2, #8]
 8014d54:	ae05      	add	r6, sp, #20
 8014d56:	4621      	mov	r1, r4
 8014d58:	4630      	mov	r0, r6
 8014d5a:	f003 fd97 	bl	801888c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8014d5e:	4b13      	ldr	r3, [pc, #76]	@ (8014dac <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xd4>)
 8014d60:	8da1      	ldrh	r1, [r4, #44]	@ 0x2c
 8014d62:	6818      	ldr	r0, [r3, #0]
 8014d64:	f7ef f9dc 	bl	8004120 <_ZNK8touchgfx5Texts7getTextEt>
 8014d68:	6823      	ldr	r3, [r4, #0]
 8014d6a:	4680      	mov	r8, r0
 8014d6c:	4620      	mov	r0, r4
 8014d6e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8014d70:	4798      	blx	r3
 8014d72:	6823      	ldr	r3, [r4, #0]
 8014d74:	4681      	mov	r9, r0
 8014d76:	4620      	mov	r0, r4
 8014d78:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8014d7c:	4798      	blx	r3
 8014d7e:	ab07      	add	r3, sp, #28
 8014d80:	f8cd 8004 	str.w	r8, [sp, #4]
 8014d84:	9300      	str	r3, [sp, #0]
 8014d86:	463b      	mov	r3, r7
 8014d88:	e9cd 9002 	strd	r9, r0, [sp, #8]
 8014d8c:	4628      	mov	r0, r5
 8014d8e:	e896 0006 	ldmia.w	r6, {r1, r2}
 8014d92:	f7ef f977 	bl	8004084 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 8014d96:	b00d      	add	sp, #52	@ 0x34
 8014d98:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014d9c:	24028e7c 	.word	0x24028e7c
 8014da0:	24028e78 	.word	0x24028e78
 8014da4:	24028e80 	.word	0x24028e80
 8014da8:	24028e20 	.word	0x24028e20
 8014dac:	24028e84 	.word	0x24028e84

08014db0 <_ZN8touchgfx5ImageD1Ev>:
 8014db0:	4770      	bx	lr

08014db2 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>:
 8014db2:	b570      	push	{r4, r5, r6, lr}
 8014db4:	880b      	ldrh	r3, [r1, #0]
 8014db6:	460d      	mov	r5, r1
 8014db8:	4604      	mov	r4, r0
 8014dba:	84c3      	strh	r3, [r0, #38]	@ 0x26
 8014dbc:	4608      	mov	r0, r1
 8014dbe:	f006 fa1f 	bl	801b200 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8014dc2:	4606      	mov	r6, r0
 8014dc4:	4628      	mov	r0, r5
 8014dc6:	f006 fa4f 	bl	801b268 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8014dca:	6823      	ldr	r3, [r4, #0]
 8014dcc:	4605      	mov	r5, r0
 8014dce:	4631      	mov	r1, r6
 8014dd0:	4620      	mov	r0, r4
 8014dd2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8014dd4:	4798      	blx	r3
 8014dd6:	6823      	ldr	r3, [r4, #0]
 8014dd8:	4629      	mov	r1, r5
 8014dda:	4620      	mov	r0, r4
 8014ddc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8014dde:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014de2:	4718      	bx	r3

08014de4 <_ZN8touchgfx5ImageD0Ev>:
 8014de4:	b510      	push	{r4, lr}
 8014de6:	4604      	mov	r4, r0
 8014de8:	212c      	movs	r1, #44	@ 0x2c
 8014dea:	f011 fed0 	bl	8026b8e <_ZdlPvj>
 8014dee:	4620      	mov	r0, r4
 8014df0:	bd10      	pop	{r4, pc}

08014df2 <_ZNK8touchgfx5Image12getSolidRectEv>:
 8014df2:	b510      	push	{r4, lr}
 8014df4:	f891 3028 	ldrb.w	r3, [r1, #40]	@ 0x28
 8014df8:	4604      	mov	r4, r0
 8014dfa:	2bff      	cmp	r3, #255	@ 0xff
 8014dfc:	d006      	beq.n	8014e0c <_ZNK8touchgfx5Image12getSolidRectEv+0x1a>
 8014dfe:	2300      	movs	r3, #0
 8014e00:	8003      	strh	r3, [r0, #0]
 8014e02:	8043      	strh	r3, [r0, #2]
 8014e04:	8083      	strh	r3, [r0, #4]
 8014e06:	80c3      	strh	r3, [r0, #6]
 8014e08:	4620      	mov	r0, r4
 8014e0a:	bd10      	pop	{r4, pc}
 8014e0c:	3126      	adds	r1, #38	@ 0x26
 8014e0e:	f006 fa5f 	bl	801b2d0 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 8014e12:	e7f9      	b.n	8014e08 <_ZNK8touchgfx5Image12getSolidRectEv+0x16>

08014e14 <_ZNK8touchgfx5Image4drawERKNS_4RectE>:
 8014e14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014e18:	4604      	mov	r4, r0
 8014e1a:	b088      	sub	sp, #32
 8014e1c:	2500      	movs	r5, #0
 8014e1e:	460f      	mov	r7, r1
 8014e20:	f854 3b26 	ldr.w	r3, [r4], #38
 8014e24:	a904      	add	r1, sp, #16
 8014e26:	4606      	mov	r6, r0
 8014e28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014e2a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8014e2e:	4798      	blx	r3
 8014e30:	4620      	mov	r0, r4
 8014e32:	f006 f9e5 	bl	801b200 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8014e36:	4680      	mov	r8, r0
 8014e38:	4620      	mov	r0, r4
 8014e3a:	f006 fa15 	bl	801b268 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8014e3e:	9506      	str	r5, [sp, #24]
 8014e40:	ad06      	add	r5, sp, #24
 8014e42:	f8ad 001e 	strh.w	r0, [sp, #30]
 8014e46:	4639      	mov	r1, r7
 8014e48:	f8ad 801c 	strh.w	r8, [sp, #28]
 8014e4c:	4628      	mov	r0, r5
 8014e4e:	f7fa fdd7 	bl	800fa00 <_ZN8touchgfx4RectaNERKS0_>
 8014e52:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 8014e56:	2b00      	cmp	r3, #0
 8014e58:	dd19      	ble.n	8014e8e <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x7a>
 8014e5a:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 8014e5e:	2b00      	cmp	r3, #0
 8014e60:	dd15      	ble.n	8014e8e <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x7a>
 8014e62:	4b0c      	ldr	r3, [pc, #48]	@ (8014e94 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x80>)
 8014e64:	681b      	ldr	r3, [r3, #0]
 8014e66:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 8014e6a:	b10a      	cbz	r2, 8014e70 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x5c>
 8014e6c:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8014e6e:	b900      	cbnz	r0, 8014e72 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x5e>
 8014e70:	6898      	ldr	r0, [r3, #8]
 8014e72:	2701      	movs	r7, #1
 8014e74:	6801      	ldr	r1, [r0, #0]
 8014e76:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8014e7a:	9702      	str	r7, [sp, #8]
 8014e7c:	f896 6028 	ldrb.w	r6, [r6, #40]	@ 0x28
 8014e80:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8014e84:	e9cd 5600 	strd	r5, r6, [sp]
 8014e88:	688d      	ldr	r5, [r1, #8]
 8014e8a:	4621      	mov	r1, r4
 8014e8c:	47a8      	blx	r5
 8014e8e:	b008      	add	sp, #32
 8014e90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014e94:	24028e20 	.word	0x24028e20

08014e98 <_ZN8touchgfx7OutlineD1Ev>:
 8014e98:	4770      	bx	lr

08014e9a <_ZN8touchgfx7OutlineD0Ev>:
 8014e9a:	b510      	push	{r4, lr}
 8014e9c:	4604      	mov	r4, r0
 8014e9e:	2130      	movs	r1, #48	@ 0x30
 8014ea0:	f011 fe75 	bl	8026b8e <_ZdlPvj>
 8014ea4:	4620      	mov	r0, r4
 8014ea6:	bd10      	pop	{r4, pc}

08014ea8 <_ZN8touchgfx7Outline5resetEv>:
 8014ea8:	b510      	push	{r4, lr}
 8014eaa:	4604      	mov	r4, r0
 8014eac:	f000 fe86 	bl	8015bbc <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv>
 8014eb0:	60e0      	str	r0, [r4, #12]
 8014eb2:	f000 fe89 	bl	8015bc8 <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv>
 8014eb6:	68e3      	ldr	r3, [r4, #12]
 8014eb8:	08c0      	lsrs	r0, r0, #3
 8014eba:	2200      	movs	r2, #0
 8014ebc:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8014ec0:	6123      	str	r3, [r4, #16]
 8014ec2:	3801      	subs	r0, #1
 8014ec4:	60a2      	str	r2, [r4, #8]
 8014ec6:	6060      	str	r0, [r4, #4]
 8014ec8:	8019      	strh	r1, [r3, #0]
 8014eca:	8059      	strh	r1, [r3, #2]
 8014ecc:	809a      	strh	r2, [r3, #4]
 8014ece:	80da      	strh	r2, [r3, #6]
 8014ed0:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8014ed2:	f023 0301 	bic.w	r3, r3, #1
 8014ed6:	f043 0302 	orr.w	r3, r3, #2
 8014eda:	6263      	str	r3, [r4, #36]	@ 0x24
 8014edc:	bd10      	pop	{r4, pc}
	...

08014ee0 <_ZN8touchgfx7OutlineC1Ev>:
 8014ee0:	4b0a      	ldr	r3, [pc, #40]	@ (8014f0c <_ZN8touchgfx7OutlineC1Ev+0x2c>)
 8014ee2:	b510      	push	{r4, lr}
 8014ee4:	6003      	str	r3, [r0, #0]
 8014ee6:	2300      	movs	r3, #0
 8014ee8:	4604      	mov	r4, r0
 8014eea:	6243      	str	r3, [r0, #36]	@ 0x24
 8014eec:	e9c0 3301 	strd	r3, r3, [r0, #4]
 8014ef0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8014ef4:	e9c0 3305 	strd	r3, r3, [r0, #20]
 8014ef8:	e9c0 3307 	strd	r3, r3, [r0, #28]
 8014efc:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8014f00:	e9c0 330a 	strd	r3, r3, [r0, #40]	@ 0x28
 8014f04:	f7ff ffd0 	bl	8014ea8 <_ZN8touchgfx7Outline5resetEv>
 8014f08:	4620      	mov	r0, r4
 8014f0a:	bd10      	pop	{r4, pc}
 8014f0c:	0802c64c 	.word	0x0802c64c

08014f10 <_ZN8touchgfx7Outline10renderLineEiiii>:
 8014f10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014f14:	b093      	sub	sp, #76	@ 0x4c
 8014f16:	1156      	asrs	r6, r2, #5
 8014f18:	9c1c      	ldr	r4, [sp, #112]	@ 0x70
 8014f1a:	9305      	str	r3, [sp, #20]
 8014f1c:	1153      	asrs	r3, r2, #5
 8014f1e:	f004 051f 	and.w	r5, r4, #31
 8014f22:	9303      	str	r3, [sp, #12]
 8014f24:	1163      	asrs	r3, r4, #5
 8014f26:	9504      	str	r5, [sp, #16]
 8014f28:	1165      	asrs	r5, r4, #5
 8014f2a:	9306      	str	r3, [sp, #24]
 8014f2c:	f002 031f 	and.w	r3, r2, #31
 8014f30:	42ae      	cmp	r6, r5
 8014f32:	f040 80f4 	bne.w	801511e <_ZN8touchgfx7Outline10renderLineEiiii+0x20e>
 8014f36:	9c04      	ldr	r4, [sp, #16]
 8014f38:	9a05      	ldr	r2, [sp, #20]
 8014f3a:	42a3      	cmp	r3, r4
 8014f3c:	ea4f 1e62 	mov.w	lr, r2, asr #5
 8014f40:	6902      	ldr	r2, [r0, #16]
 8014f42:	d125      	bne.n	8014f90 <_ZN8touchgfx7Outline10renderLineEiiii+0x80>
 8014f44:	f9b2 3000 	ldrsh.w	r3, [r2]
 8014f48:	459e      	cmp	lr, r3
 8014f4a:	d103      	bne.n	8014f54 <_ZN8touchgfx7Outline10renderLineEiiii+0x44>
 8014f4c:	f9b2 3002 	ldrsh.w	r3, [r2, #2]
 8014f50:	429e      	cmp	r6, r3
 8014f52:	d035      	beq.n	8014fc0 <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 8014f54:	88d1      	ldrh	r1, [r2, #6]
 8014f56:	8893      	ldrh	r3, [r2, #4]
 8014f58:	430b      	orrs	r3, r1
 8014f5a:	d010      	beq.n	8014f7e <_ZN8touchgfx7Outline10renderLineEiiii+0x6e>
 8014f5c:	f9b2 3002 	ldrsh.w	r3, [r2, #2]
 8014f60:	2b00      	cmp	r3, #0
 8014f62:	db0c      	blt.n	8014f7e <_ZN8touchgfx7Outline10renderLineEiiii+0x6e>
 8014f64:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 8014f66:	428b      	cmp	r3, r1
 8014f68:	da09      	bge.n	8014f7e <_ZN8touchgfx7Outline10renderLineEiiii+0x6e>
 8014f6a:	e9d0 1301 	ldrd	r1, r3, [r0, #4]
 8014f6e:	428b      	cmp	r3, r1
 8014f70:	f103 0301 	add.w	r3, r3, #1
 8014f74:	bf38      	it	cc
 8014f76:	3208      	addcc	r2, #8
 8014f78:	6083      	str	r3, [r0, #8]
 8014f7a:	bf38      	it	cc
 8014f7c:	6102      	strcc	r2, [r0, #16]
 8014f7e:	6903      	ldr	r3, [r0, #16]
 8014f80:	9a03      	ldr	r2, [sp, #12]
 8014f82:	f8a3 e000 	strh.w	lr, [r3]
 8014f86:	805a      	strh	r2, [r3, #2]
 8014f88:	2200      	movs	r2, #0
 8014f8a:	809a      	strh	r2, [r3, #4]
 8014f8c:	80da      	strh	r2, [r3, #6]
 8014f8e:	e017      	b.n	8014fc0 <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 8014f90:	9c05      	ldr	r4, [sp, #20]
 8014f92:	114e      	asrs	r6, r1, #5
 8014f94:	f001 0c1f 	and.w	ip, r1, #31
 8014f98:	f8b2 8004 	ldrh.w	r8, [r2, #4]
 8014f9c:	f004 041f 	and.w	r4, r4, #31
 8014fa0:	4576      	cmp	r6, lr
 8014fa2:	f8b2 a006 	ldrh.w	sl, [r2, #6]
 8014fa6:	9402      	str	r4, [sp, #8]
 8014fa8:	9c04      	ldr	r4, [sp, #16]
 8014faa:	eba4 0403 	sub.w	r4, r4, r3
 8014fae:	d10a      	bne.n	8014fc6 <_ZN8touchgfx7Outline10renderLineEiiii+0xb6>
 8014fb0:	9b02      	ldr	r3, [sp, #8]
 8014fb2:	44a0      	add	r8, r4
 8014fb4:	449c      	add	ip, r3
 8014fb6:	f8a2 8004 	strh.w	r8, [r2, #4]
 8014fba:	fb04 a40c 	mla	r4, r4, ip, sl
 8014fbe:	80d4      	strh	r4, [r2, #6]
 8014fc0:	b013      	add	sp, #76	@ 0x4c
 8014fc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014fc6:	9d05      	ldr	r5, [sp, #20]
 8014fc8:	1a69      	subs	r1, r5, r1
 8014fca:	bf51      	iteee	pl
 8014fcc:	f1cc 0520 	rsbpl	r5, ip, #32
 8014fd0:	fb04 f40c 	mulmi.w	r4, r4, ip
 8014fd4:	4249      	negmi	r1, r1
 8014fd6:	2500      	movmi	r5, #0
 8014fd8:	bf5d      	ittte	pl
 8014fda:	436c      	mulpl	r4, r5
 8014fdc:	2520      	movpl	r5, #32
 8014fde:	f04f 0901 	movpl.w	r9, #1
 8014fe2:	f04f 39ff 	movmi.w	r9, #4294967295
 8014fe6:	9501      	str	r5, [sp, #4]
 8014fe8:	9f01      	ldr	r7, [sp, #4]
 8014fea:	444e      	add	r6, r9
 8014fec:	fb94 f5f1 	sdiv	r5, r4, r1
 8014ff0:	fb01 4415 	mls	r4, r1, r5, r4
 8014ff4:	44bc      	add	ip, r7
 8014ff6:	2c00      	cmp	r4, #0
 8014ff8:	bfbc      	itt	lt
 8014ffa:	f105 35ff 	addlt.w	r5, r5, #4294967295
 8014ffe:	1864      	addlt	r4, r4, r1
 8015000:	44a8      	add	r8, r5
 8015002:	fb05 ac0c 	mla	ip, r5, ip, sl
 8015006:	f8a2 8004 	strh.w	r8, [r2, #4]
 801500a:	f8a2 c006 	strh.w	ip, [r2, #6]
 801500e:	f8d0 c010 	ldr.w	ip, [r0, #16]
 8015012:	f8bc 8006 	ldrh.w	r8, [ip, #6]
 8015016:	f8bc 2004 	ldrh.w	r2, [ip, #4]
 801501a:	ea58 0202 	orrs.w	r2, r8, r2
 801501e:	d011      	beq.n	8015044 <_ZN8touchgfx7Outline10renderLineEiiii+0x134>
 8015020:	f9bc 8002 	ldrsh.w	r8, [ip, #2]
 8015024:	f1b8 0f00 	cmp.w	r8, #0
 8015028:	db0c      	blt.n	8015044 <_ZN8touchgfx7Outline10renderLineEiiii+0x134>
 801502a:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
 801502c:	4590      	cmp	r8, r2
 801502e:	da09      	bge.n	8015044 <_ZN8touchgfx7Outline10renderLineEiiii+0x134>
 8015030:	e9d0 2801 	ldrd	r2, r8, [r0, #4]
 8015034:	4590      	cmp	r8, r2
 8015036:	bf3c      	itt	cc
 8015038:	f10c 0208 	addcc.w	r2, ip, #8
 801503c:	6102      	strcc	r2, [r0, #16]
 801503e:	f108 0201 	add.w	r2, r8, #1
 8015042:	6082      	str	r2, [r0, #8]
 8015044:	f8d0 c010 	ldr.w	ip, [r0, #16]
 8015048:	2700      	movs	r7, #0
 801504a:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 801504e:	45b6      	cmp	lr, r6
 8015050:	f8ac 6000 	strh.w	r6, [ip]
 8015054:	442b      	add	r3, r5
 8015056:	f8ac 2002 	strh.w	r2, [ip, #2]
 801505a:	f8ac 7004 	strh.w	r7, [ip, #4]
 801505e:	f8ac 7006 	strh.w	r7, [ip, #6]
 8015062:	d04b      	beq.n	80150fc <_ZN8touchgfx7Outline10renderLineEiiii+0x1ec>
 8015064:	9f04      	ldr	r7, [sp, #16]
 8015066:	1a64      	subs	r4, r4, r1
 8015068:	f04f 0a00 	mov.w	sl, #0
 801506c:	1aff      	subs	r7, r7, r3
 801506e:	443d      	add	r5, r7
 8015070:	016d      	lsls	r5, r5, #5
 8015072:	fb95 f8f1 	sdiv	r8, r5, r1
 8015076:	fb01 5518 	mls	r5, r1, r8, r5
 801507a:	2d00      	cmp	r5, #0
 801507c:	bfbc      	itt	lt
 801507e:	f108 38ff 	addlt.w	r8, r8, #4294967295
 8015082:	186d      	addlt	r5, r5, r1
 8015084:	f108 0701 	add.w	r7, r8, #1
 8015088:	9703      	str	r7, [sp, #12]
 801508a:	f8d0 c010 	ldr.w	ip, [r0, #16]
 801508e:	1964      	adds	r4, r4, r5
 8015090:	444e      	add	r6, r9
 8015092:	bf54      	ite	pl
 8015094:	9f03      	ldrpl	r7, [sp, #12]
 8015096:	4647      	movmi	r7, r8
 8015098:	f8bc b004 	ldrh.w	fp, [ip, #4]
 801509c:	bf58      	it	pl
 801509e:	1a64      	subpl	r4, r4, r1
 80150a0:	443b      	add	r3, r7
 80150a2:	44bb      	add	fp, r7
 80150a4:	f8ac b004 	strh.w	fp, [ip, #4]
 80150a8:	f8bc b006 	ldrh.w	fp, [ip, #6]
 80150ac:	eb0b 1b47 	add.w	fp, fp, r7, lsl #5
 80150b0:	f8ac b006 	strh.w	fp, [ip, #6]
 80150b4:	f8d0 c010 	ldr.w	ip, [r0, #16]
 80150b8:	f8bc b006 	ldrh.w	fp, [ip, #6]
 80150bc:	f8bc 7004 	ldrh.w	r7, [ip, #4]
 80150c0:	ea5b 0707 	orrs.w	r7, fp, r7
 80150c4:	d011      	beq.n	80150ea <_ZN8touchgfx7Outline10renderLineEiiii+0x1da>
 80150c6:	f9bc b002 	ldrsh.w	fp, [ip, #2]
 80150ca:	f1bb 0f00 	cmp.w	fp, #0
 80150ce:	db0c      	blt.n	80150ea <_ZN8touchgfx7Outline10renderLineEiiii+0x1da>
 80150d0:	6ac7      	ldr	r7, [r0, #44]	@ 0x2c
 80150d2:	45bb      	cmp	fp, r7
 80150d4:	da09      	bge.n	80150ea <_ZN8touchgfx7Outline10renderLineEiiii+0x1da>
 80150d6:	e9d0 7b01 	ldrd	r7, fp, [r0, #4]
 80150da:	45bb      	cmp	fp, r7
 80150dc:	bf3c      	itt	cc
 80150de:	f10c 0708 	addcc.w	r7, ip, #8
 80150e2:	6107      	strcc	r7, [r0, #16]
 80150e4:	f10b 0701 	add.w	r7, fp, #1
 80150e8:	6087      	str	r7, [r0, #8]
 80150ea:	6907      	ldr	r7, [r0, #16]
 80150ec:	45b6      	cmp	lr, r6
 80150ee:	803e      	strh	r6, [r7, #0]
 80150f0:	807a      	strh	r2, [r7, #2]
 80150f2:	f8a7 a004 	strh.w	sl, [r7, #4]
 80150f6:	f8a7 a006 	strh.w	sl, [r7, #6]
 80150fa:	d1c6      	bne.n	801508a <_ZN8touchgfx7Outline10renderLineEiiii+0x17a>
 80150fc:	9a04      	ldr	r2, [sp, #16]
 80150fe:	1ad3      	subs	r3, r2, r3
 8015100:	6902      	ldr	r2, [r0, #16]
 8015102:	8891      	ldrh	r1, [r2, #4]
 8015104:	88d6      	ldrh	r6, [r2, #6]
 8015106:	4419      	add	r1, r3
 8015108:	8091      	strh	r1, [r2, #4]
 801510a:	9902      	ldr	r1, [sp, #8]
 801510c:	f101 0c20 	add.w	ip, r1, #32
 8015110:	9901      	ldr	r1, [sp, #4]
 8015112:	ebac 0c01 	sub.w	ip, ip, r1
 8015116:	fb03 630c 	mla	r3, r3, ip, r6
 801511a:	80d3      	strh	r3, [r2, #6]
 801511c:	e750      	b.n	8014fc0 <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 801511e:	9d05      	ldr	r5, [sp, #20]
 8015120:	1aa2      	subs	r2, r4, r2
 8015122:	eba5 0501 	sub.w	r5, r5, r1
 8015126:	9202      	str	r2, [sp, #8]
 8015128:	9508      	str	r5, [sp, #32]
 801512a:	f140 8128 	bpl.w	801537e <_ZN8touchgfx7Outline10renderLineEiiii+0x46e>
 801512e:	9a03      	ldr	r2, [sp, #12]
 8015130:	2a00      	cmp	r2, #0
 8015132:	f6ff af45 	blt.w	8014fc0 <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 8015136:	9a02      	ldr	r2, [sp, #8]
 8015138:	f04f 34ff 	mov.w	r4, #4294967295
 801513c:	4252      	negs	r2, r2
 801513e:	940b      	str	r4, [sp, #44]	@ 0x2c
 8015140:	2400      	movs	r4, #0
 8015142:	9202      	str	r2, [sp, #8]
 8015144:	9a06      	ldr	r2, [sp, #24]
 8015146:	ea42 72e2 	orr.w	r2, r2, r2, asr #31
 801514a:	9206      	str	r2, [sp, #24]
 801514c:	462a      	mov	r2, r5
 801514e:	435a      	muls	r2, r3
 8015150:	9401      	str	r4, [sp, #4]
 8015152:	9c02      	ldr	r4, [sp, #8]
 8015154:	9d02      	ldr	r5, [sp, #8]
 8015156:	fb92 f4f4 	sdiv	r4, r2, r4
 801515a:	fb05 2214 	mls	r2, r5, r4, r2
 801515e:	2a00      	cmp	r2, #0
 8015160:	9207      	str	r2, [sp, #28]
 8015162:	bfbc      	itt	lt
 8015164:	1952      	addlt	r2, r2, r5
 8015166:	f104 34ff 	addlt.w	r4, r4, #4294967295
 801516a:	6905      	ldr	r5, [r0, #16]
 801516c:	bfb8      	it	lt
 801516e:	9207      	strlt	r2, [sp, #28]
 8015170:	eb04 0901 	add.w	r9, r4, r1
 8015174:	9a01      	ldr	r2, [sp, #4]
 8015176:	ea4f 1669 	mov.w	r6, r9, asr #5
 801517a:	429a      	cmp	r2, r3
 801517c:	f040 8111 	bne.w	80153a2 <_ZN8touchgfx7Outline10renderLineEiiii+0x492>
 8015180:	f9b5 3000 	ldrsh.w	r3, [r5]
 8015184:	429e      	cmp	r6, r3
 8015186:	d104      	bne.n	8015192 <_ZN8touchgfx7Outline10renderLineEiiii+0x282>
 8015188:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 801518c:	9a03      	ldr	r2, [sp, #12]
 801518e:	429a      	cmp	r2, r3
 8015190:	d01b      	beq.n	80151ca <_ZN8touchgfx7Outline10renderLineEiiii+0x2ba>
 8015192:	88ea      	ldrh	r2, [r5, #6]
 8015194:	88ab      	ldrh	r3, [r5, #4]
 8015196:	4313      	orrs	r3, r2
 8015198:	d010      	beq.n	80151bc <_ZN8touchgfx7Outline10renderLineEiiii+0x2ac>
 801519a:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 801519e:	2a00      	cmp	r2, #0
 80151a0:	db0c      	blt.n	80151bc <_ZN8touchgfx7Outline10renderLineEiiii+0x2ac>
 80151a2:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 80151a4:	429a      	cmp	r2, r3
 80151a6:	da09      	bge.n	80151bc <_ZN8touchgfx7Outline10renderLineEiiii+0x2ac>
 80151a8:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
 80151ac:	429a      	cmp	r2, r3
 80151ae:	f102 0201 	add.w	r2, r2, #1
 80151b2:	bf38      	it	cc
 80151b4:	3508      	addcc	r5, #8
 80151b6:	6082      	str	r2, [r0, #8]
 80151b8:	bf38      	it	cc
 80151ba:	6105      	strcc	r5, [r0, #16]
 80151bc:	6903      	ldr	r3, [r0, #16]
 80151be:	9a03      	ldr	r2, [sp, #12]
 80151c0:	801e      	strh	r6, [r3, #0]
 80151c2:	805a      	strh	r2, [r3, #2]
 80151c4:	2200      	movs	r2, #0
 80151c6:	809a      	strh	r2, [r3, #4]
 80151c8:	80da      	strh	r2, [r3, #6]
 80151ca:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80151cc:	9a03      	ldr	r2, [sp, #12]
 80151ce:	6901      	ldr	r1, [r0, #16]
 80151d0:	441a      	add	r2, r3
 80151d2:	f9b1 3000 	ldrsh.w	r3, [r1]
 80151d6:	42b3      	cmp	r3, r6
 80151d8:	d103      	bne.n	80151e2 <_ZN8touchgfx7Outline10renderLineEiiii+0x2d2>
 80151da:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 80151de:	429a      	cmp	r2, r3
 80151e0:	d01a      	beq.n	8015218 <_ZN8touchgfx7Outline10renderLineEiiii+0x308>
 80151e2:	88cc      	ldrh	r4, [r1, #6]
 80151e4:	888b      	ldrh	r3, [r1, #4]
 80151e6:	4323      	orrs	r3, r4
 80151e8:	d010      	beq.n	801520c <_ZN8touchgfx7Outline10renderLineEiiii+0x2fc>
 80151ea:	f9b1 4002 	ldrsh.w	r4, [r1, #2]
 80151ee:	2c00      	cmp	r4, #0
 80151f0:	db0c      	blt.n	801520c <_ZN8touchgfx7Outline10renderLineEiiii+0x2fc>
 80151f2:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 80151f4:	429c      	cmp	r4, r3
 80151f6:	da09      	bge.n	801520c <_ZN8touchgfx7Outline10renderLineEiiii+0x2fc>
 80151f8:	e9d0 3401 	ldrd	r3, r4, [r0, #4]
 80151fc:	429c      	cmp	r4, r3
 80151fe:	f104 0401 	add.w	r4, r4, #1
 8015202:	bf38      	it	cc
 8015204:	3108      	addcc	r1, #8
 8015206:	6084      	str	r4, [r0, #8]
 8015208:	bf38      	it	cc
 801520a:	6101      	strcc	r1, [r0, #16]
 801520c:	6903      	ldr	r3, [r0, #16]
 801520e:	2100      	movs	r1, #0
 8015210:	801e      	strh	r6, [r3, #0]
 8015212:	805a      	strh	r2, [r3, #2]
 8015214:	8099      	strh	r1, [r3, #4]
 8015216:	80d9      	strh	r1, [r3, #6]
 8015218:	9b06      	ldr	r3, [sp, #24]
 801521a:	4293      	cmp	r3, r2
 801521c:	f000 8082 	beq.w	8015324 <_ZN8touchgfx7Outline10renderLineEiiii+0x414>
 8015220:	9b08      	ldr	r3, [sp, #32]
 8015222:	9902      	ldr	r1, [sp, #8]
 8015224:	015b      	lsls	r3, r3, #5
 8015226:	9c02      	ldr	r4, [sp, #8]
 8015228:	fb93 f1f1 	sdiv	r1, r3, r1
 801522c:	fb04 3311 	mls	r3, r4, r1, r3
 8015230:	9103      	str	r1, [sp, #12]
 8015232:	2b00      	cmp	r3, #0
 8015234:	9308      	str	r3, [sp, #32]
 8015236:	da04      	bge.n	8015242 <_ZN8touchgfx7Outline10renderLineEiiii+0x332>
 8015238:	1e4b      	subs	r3, r1, #1
 801523a:	9303      	str	r3, [sp, #12]
 801523c:	9b08      	ldr	r3, [sp, #32]
 801523e:	4423      	add	r3, r4
 8015240:	9308      	str	r3, [sp, #32]
 8015242:	9b07      	ldr	r3, [sp, #28]
 8015244:	464f      	mov	r7, r9
 8015246:	9902      	ldr	r1, [sp, #8]
 8015248:	2600      	movs	r6, #0
 801524a:	1a5b      	subs	r3, r3, r1
 801524c:	9307      	str	r3, [sp, #28]
 801524e:	9b01      	ldr	r3, [sp, #4]
 8015250:	f1c3 0320 	rsb	r3, r3, #32
 8015254:	930e      	str	r3, [sp, #56]	@ 0x38
 8015256:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8015258:	9b01      	ldr	r3, [sp, #4]
 801525a:	1a5b      	subs	r3, r3, r1
 801525c:	930a      	str	r3, [sp, #40]	@ 0x28
 801525e:	e9dd 3107 	ldrd	r3, r1, [sp, #28]
 8015262:	185b      	adds	r3, r3, r1
 8015264:	bf58      	it	pl
 8015266:	9902      	ldrpl	r1, [sp, #8]
 8015268:	9307      	str	r3, [sp, #28]
 801526a:	bf57      	itett	pl
 801526c:	1a5b      	subpl	r3, r3, r1
 801526e:	9903      	ldrmi	r1, [sp, #12]
 8015270:	9307      	strpl	r3, [sp, #28]
 8015272:	9b03      	ldrpl	r3, [sp, #12]
 8015274:	bf58      	it	pl
 8015276:	1c59      	addpl	r1, r3, #1
 8015278:	2a00      	cmp	r2, #0
 801527a:	4489      	add	r9, r1
 801527c:	ea4f 1a69 	mov.w	sl, r9, asr #5
 8015280:	db2e      	blt.n	80152e0 <_ZN8touchgfx7Outline10renderLineEiiii+0x3d0>
 8015282:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8015284:	4293      	cmp	r3, r2
 8015286:	dd2b      	ble.n	80152e0 <_ZN8touchgfx7Outline10renderLineEiiii+0x3d0>
 8015288:	9c01      	ldr	r4, [sp, #4]
 801528a:	6905      	ldr	r5, [r0, #16]
 801528c:	46a0      	mov	r8, r4
 801528e:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 8015290:	f9b5 c004 	ldrsh.w	ip, [r5, #4]
 8015294:	45a0      	cmp	r8, r4
 8015296:	f9b5 e006 	ldrsh.w	lr, [r5, #6]
 801529a:	f040 814c 	bne.w	8015536 <_ZN8touchgfx7Outline10renderLineEiiii+0x626>
 801529e:	f9b5 1000 	ldrsh.w	r1, [r5]
 80152a2:	4551      	cmp	r1, sl
 80152a4:	d103      	bne.n	80152ae <_ZN8touchgfx7Outline10renderLineEiiii+0x39e>
 80152a6:	f9b5 1002 	ldrsh.w	r1, [r5, #2]
 80152aa:	4291      	cmp	r1, r2
 80152ac:	d018      	beq.n	80152e0 <_ZN8touchgfx7Outline10renderLineEiiii+0x3d0>
 80152ae:	ea5c 010e 	orrs.w	r1, ip, lr
 80152b2:	d00f      	beq.n	80152d4 <_ZN8touchgfx7Outline10renderLineEiiii+0x3c4>
 80152b4:	f9b5 1002 	ldrsh.w	r1, [r5, #2]
 80152b8:	2900      	cmp	r1, #0
 80152ba:	db0b      	blt.n	80152d4 <_ZN8touchgfx7Outline10renderLineEiiii+0x3c4>
 80152bc:	428b      	cmp	r3, r1
 80152be:	dd09      	ble.n	80152d4 <_ZN8touchgfx7Outline10renderLineEiiii+0x3c4>
 80152c0:	e9d0 3101 	ldrd	r3, r1, [r0, #4]
 80152c4:	4299      	cmp	r1, r3
 80152c6:	f101 0101 	add.w	r1, r1, #1
 80152ca:	bf38      	it	cc
 80152cc:	3508      	addcc	r5, #8
 80152ce:	6081      	str	r1, [r0, #8]
 80152d0:	bf38      	it	cc
 80152d2:	6105      	strcc	r5, [r0, #16]
 80152d4:	6903      	ldr	r3, [r0, #16]
 80152d6:	f8a3 a000 	strh.w	sl, [r3]
 80152da:	805a      	strh	r2, [r3, #2]
 80152dc:	809e      	strh	r6, [r3, #4]
 80152de:	80de      	strh	r6, [r3, #6]
 80152e0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80152e2:	6901      	ldr	r1, [r0, #16]
 80152e4:	441a      	add	r2, r3
 80152e6:	88cc      	ldrh	r4, [r1, #6]
 80152e8:	888b      	ldrh	r3, [r1, #4]
 80152ea:	4323      	orrs	r3, r4
 80152ec:	d010      	beq.n	8015310 <_ZN8touchgfx7Outline10renderLineEiiii+0x400>
 80152ee:	f9b1 4002 	ldrsh.w	r4, [r1, #2]
 80152f2:	2c00      	cmp	r4, #0
 80152f4:	db0c      	blt.n	8015310 <_ZN8touchgfx7Outline10renderLineEiiii+0x400>
 80152f6:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 80152f8:	429c      	cmp	r4, r3
 80152fa:	da09      	bge.n	8015310 <_ZN8touchgfx7Outline10renderLineEiiii+0x400>
 80152fc:	e9d0 3401 	ldrd	r3, r4, [r0, #4]
 8015300:	429c      	cmp	r4, r3
 8015302:	f104 0401 	add.w	r4, r4, #1
 8015306:	bf38      	it	cc
 8015308:	3108      	addcc	r1, #8
 801530a:	6084      	str	r4, [r0, #8]
 801530c:	bf38      	it	cc
 801530e:	6101      	strcc	r1, [r0, #16]
 8015310:	6903      	ldr	r3, [r0, #16]
 8015312:	464f      	mov	r7, r9
 8015314:	f8a3 a000 	strh.w	sl, [r3]
 8015318:	805a      	strh	r2, [r3, #2]
 801531a:	809e      	strh	r6, [r3, #4]
 801531c:	80de      	strh	r6, [r3, #6]
 801531e:	9b06      	ldr	r3, [sp, #24]
 8015320:	4293      	cmp	r3, r2
 8015322:	d19c      	bne.n	801525e <_ZN8touchgfx7Outline10renderLineEiiii+0x34e>
 8015324:	9b01      	ldr	r3, [sp, #4]
 8015326:	6907      	ldr	r7, [r0, #16]
 8015328:	f1c3 0620 	rsb	r6, r3, #32
 801532c:	9b05      	ldr	r3, [sp, #20]
 801532e:	ea4f 1e63 	mov.w	lr, r3, asr #5
 8015332:	9b04      	ldr	r3, [sp, #16]
 8015334:	429e      	cmp	r6, r3
 8015336:	f040 81c7 	bne.w	80156c8 <_ZN8touchgfx7Outline10renderLineEiiii+0x7b8>
 801533a:	f9b7 3000 	ldrsh.w	r3, [r7]
 801533e:	459e      	cmp	lr, r3
 8015340:	d104      	bne.n	801534c <_ZN8touchgfx7Outline10renderLineEiiii+0x43c>
 8015342:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8015346:	429a      	cmp	r2, r3
 8015348:	f43f ae3a 	beq.w	8014fc0 <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 801534c:	88f9      	ldrh	r1, [r7, #6]
 801534e:	88bb      	ldrh	r3, [r7, #4]
 8015350:	430b      	orrs	r3, r1
 8015352:	d010      	beq.n	8015376 <_ZN8touchgfx7Outline10renderLineEiiii+0x466>
 8015354:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8015358:	2b00      	cmp	r3, #0
 801535a:	db0c      	blt.n	8015376 <_ZN8touchgfx7Outline10renderLineEiiii+0x466>
 801535c:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 801535e:	428b      	cmp	r3, r1
 8015360:	da09      	bge.n	8015376 <_ZN8touchgfx7Outline10renderLineEiiii+0x466>
 8015362:	e9d0 1301 	ldrd	r1, r3, [r0, #4]
 8015366:	428b      	cmp	r3, r1
 8015368:	f103 0301 	add.w	r3, r3, #1
 801536c:	bf38      	it	cc
 801536e:	3708      	addcc	r7, #8
 8015370:	6083      	str	r3, [r0, #8]
 8015372:	bf38      	it	cc
 8015374:	6107      	strcc	r7, [r0, #16]
 8015376:	6903      	ldr	r3, [r0, #16]
 8015378:	f8a3 e000 	strh.w	lr, [r3]
 801537c:	e603      	b.n	8014f86 <_ZN8touchgfx7Outline10renderLineEiiii+0x76>
 801537e:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
 8015380:	9c03      	ldr	r4, [sp, #12]
 8015382:	42a2      	cmp	r2, r4
 8015384:	f6ff ae1c 	blt.w	8014fc0 <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 8015388:	9c06      	ldr	r4, [sp, #24]
 801538a:	42a2      	cmp	r2, r4
 801538c:	9c08      	ldr	r4, [sp, #32]
 801538e:	bfbc      	itt	lt
 8015390:	3201      	addlt	r2, #1
 8015392:	9206      	strlt	r2, [sp, #24]
 8015394:	f1c3 0220 	rsb	r2, r3, #32
 8015398:	4362      	muls	r2, r4
 801539a:	2401      	movs	r4, #1
 801539c:	940b      	str	r4, [sp, #44]	@ 0x2c
 801539e:	2420      	movs	r4, #32
 80153a0:	e6d6      	b.n	8015150 <_ZN8touchgfx7Outline10renderLineEiiii+0x240>
 80153a2:	ea4f 1861 	mov.w	r8, r1, asr #5
 80153a6:	f009 021f 	and.w	r2, r9, #31
 80153aa:	f001 011f 	and.w	r1, r1, #31
 80153ae:	f8b5 e004 	ldrh.w	lr, [r5, #4]
 80153b2:	920c      	str	r2, [sp, #48]	@ 0x30
 80153b4:	45b0      	cmp	r8, r6
 80153b6:	9a01      	ldr	r2, [sp, #4]
 80153b8:	f8b5 a006 	ldrh.w	sl, [r5, #6]
 80153bc:	eba2 0203 	sub.w	r2, r2, r3
 80153c0:	d108      	bne.n	80153d4 <_ZN8touchgfx7Outline10renderLineEiiii+0x4c4>
 80153c2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80153c4:	4496      	add	lr, r2
 80153c6:	4419      	add	r1, r3
 80153c8:	f8a5 e004 	strh.w	lr, [r5, #4]
 80153cc:	fb02 a101 	mla	r1, r2, r1, sl
 80153d0:	80e9      	strh	r1, [r5, #6]
 80153d2:	e6fa      	b.n	80151ca <_ZN8touchgfx7Outline10renderLineEiiii+0x2ba>
 80153d4:	2c00      	cmp	r4, #0
 80153d6:	f2c0 80a7 	blt.w	8015528 <_ZN8touchgfx7Outline10renderLineEiiii+0x618>
 80153da:	2701      	movs	r7, #1
 80153dc:	f1c1 0c20 	rsb	ip, r1, #32
 80153e0:	970a      	str	r7, [sp, #40]	@ 0x28
 80153e2:	2720      	movs	r7, #32
 80153e4:	fb02 f20c 	mul.w	r2, r2, ip
 80153e8:	9709      	str	r7, [sp, #36]	@ 0x24
 80153ea:	9f09      	ldr	r7, [sp, #36]	@ 0x24
 80153ec:	fb92 fcf4 	sdiv	ip, r2, r4
 80153f0:	fb04 221c 	mls	r2, r4, ip, r2
 80153f4:	4439      	add	r1, r7
 80153f6:	2a00      	cmp	r2, #0
 80153f8:	bfbc      	itt	lt
 80153fa:	f10c 3cff 	addlt.w	ip, ip, #4294967295
 80153fe:	1912      	addlt	r2, r2, r4
 8015400:	fb0c a101 	mla	r1, ip, r1, sl
 8015404:	44e6      	add	lr, ip
 8015406:	80e9      	strh	r1, [r5, #6]
 8015408:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801540a:	f8a5 e004 	strh.w	lr, [r5, #4]
 801540e:	eb08 0501 	add.w	r5, r8, r1
 8015412:	6901      	ldr	r1, [r0, #16]
 8015414:	f8b1 8006 	ldrh.w	r8, [r1, #6]
 8015418:	f8b1 e004 	ldrh.w	lr, [r1, #4]
 801541c:	ea58 070e 	orrs.w	r7, r8, lr
 8015420:	d010      	beq.n	8015444 <_ZN8touchgfx7Outline10renderLineEiiii+0x534>
 8015422:	f9b1 e002 	ldrsh.w	lr, [r1, #2]
 8015426:	f1be 0f00 	cmp.w	lr, #0
 801542a:	db0b      	blt.n	8015444 <_ZN8touchgfx7Outline10renderLineEiiii+0x534>
 801542c:	6ac7      	ldr	r7, [r0, #44]	@ 0x2c
 801542e:	45be      	cmp	lr, r7
 8015430:	da08      	bge.n	8015444 <_ZN8touchgfx7Outline10renderLineEiiii+0x534>
 8015432:	e9d0 7e01 	ldrd	r7, lr, [r0, #4]
 8015436:	45be      	cmp	lr, r7
 8015438:	bf3c      	itt	cc
 801543a:	3108      	addcc	r1, #8
 801543c:	6101      	strcc	r1, [r0, #16]
 801543e:	f10e 0101 	add.w	r1, lr, #1
 8015442:	6081      	str	r1, [r0, #8]
 8015444:	6901      	ldr	r1, [r0, #16]
 8015446:	f04f 0e00 	mov.w	lr, #0
 801544a:	f9bd 800c 	ldrsh.w	r8, [sp, #12]
 801544e:	42ae      	cmp	r6, r5
 8015450:	800d      	strh	r5, [r1, #0]
 8015452:	4463      	add	r3, ip
 8015454:	f8a1 8002 	strh.w	r8, [r1, #2]
 8015458:	f8a1 e004 	strh.w	lr, [r1, #4]
 801545c:	f8a1 e006 	strh.w	lr, [r1, #6]
 8015460:	d053      	beq.n	801550a <_ZN8touchgfx7Outline10renderLineEiiii+0x5fa>
 8015462:	9901      	ldr	r1, [sp, #4]
 8015464:	1b12      	subs	r2, r2, r4
 8015466:	1ac9      	subs	r1, r1, r3
 8015468:	4461      	add	r1, ip
 801546a:	0149      	lsls	r1, r1, #5
 801546c:	fb91 fef4 	sdiv	lr, r1, r4
 8015470:	fb04 111e 	mls	r1, r4, lr, r1
 8015474:	2900      	cmp	r1, #0
 8015476:	bfbc      	itt	lt
 8015478:	f10e 3eff 	addlt.w	lr, lr, #4294967295
 801547c:	1909      	addlt	r1, r1, r4
 801547e:	f10e 0701 	add.w	r7, lr, #1
 8015482:	970d      	str	r7, [sp, #52]	@ 0x34
 8015484:	f8d0 a010 	ldr.w	sl, [r0, #16]
 8015488:	1852      	adds	r2, r2, r1
 801548a:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
 801548c:	bf54      	ite	pl
 801548e:	f8dd c034 	ldrpl.w	ip, [sp, #52]	@ 0x34
 8015492:	46f4      	movmi	ip, lr
 8015494:	f8ba b004 	ldrh.w	fp, [sl, #4]
 8015498:	bf58      	it	pl
 801549a:	1b12      	subpl	r2, r2, r4
 801549c:	4463      	add	r3, ip
 801549e:	443d      	add	r5, r7
 80154a0:	44e3      	add	fp, ip
 80154a2:	f8aa b004 	strh.w	fp, [sl, #4]
 80154a6:	f8ba b006 	ldrh.w	fp, [sl, #6]
 80154aa:	eb0b 1b4c 	add.w	fp, fp, ip, lsl #5
 80154ae:	f8aa b006 	strh.w	fp, [sl, #6]
 80154b2:	f8d0 c010 	ldr.w	ip, [r0, #16]
 80154b6:	f8bc b006 	ldrh.w	fp, [ip, #6]
 80154ba:	f8bc a004 	ldrh.w	sl, [ip, #4]
 80154be:	ea5b 070a 	orrs.w	r7, fp, sl
 80154c2:	d014      	beq.n	80154ee <_ZN8touchgfx7Outline10renderLineEiiii+0x5de>
 80154c4:	f9bc a002 	ldrsh.w	sl, [ip, #2]
 80154c8:	f1ba 0f00 	cmp.w	sl, #0
 80154cc:	db0f      	blt.n	80154ee <_ZN8touchgfx7Outline10renderLineEiiii+0x5de>
 80154ce:	6ac7      	ldr	r7, [r0, #44]	@ 0x2c
 80154d0:	45ba      	cmp	sl, r7
 80154d2:	da0c      	bge.n	80154ee <_ZN8touchgfx7Outline10renderLineEiiii+0x5de>
 80154d4:	e9d0 7a01 	ldrd	r7, sl, [r0, #4]
 80154d8:	45ba      	cmp	sl, r7
 80154da:	f10a 0a01 	add.w	sl, sl, #1
 80154de:	bf38      	it	cc
 80154e0:	f10c 0c08 	addcc.w	ip, ip, #8
 80154e4:	f8c0 a008 	str.w	sl, [r0, #8]
 80154e8:	bf38      	it	cc
 80154ea:	f8c0 c010 	strcc.w	ip, [r0, #16]
 80154ee:	f8d0 c010 	ldr.w	ip, [r0, #16]
 80154f2:	f04f 0700 	mov.w	r7, #0
 80154f6:	42ae      	cmp	r6, r5
 80154f8:	f8ac 5000 	strh.w	r5, [ip]
 80154fc:	f8ac 8002 	strh.w	r8, [ip, #2]
 8015500:	f8ac 7004 	strh.w	r7, [ip, #4]
 8015504:	f8ac 7006 	strh.w	r7, [ip, #6]
 8015508:	d1bc      	bne.n	8015484 <_ZN8touchgfx7Outline10renderLineEiiii+0x574>
 801550a:	6904      	ldr	r4, [r0, #16]
 801550c:	9a01      	ldr	r2, [sp, #4]
 801550e:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8015510:	1ad3      	subs	r3, r2, r3
 8015512:	88a2      	ldrh	r2, [r4, #4]
 8015514:	3120      	adds	r1, #32
 8015516:	441a      	add	r2, r3
 8015518:	80a2      	strh	r2, [r4, #4]
 801551a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801551c:	1a89      	subs	r1, r1, r2
 801551e:	88e2      	ldrh	r2, [r4, #6]
 8015520:	fb03 2301 	mla	r3, r3, r1, r2
 8015524:	80e3      	strh	r3, [r4, #6]
 8015526:	e650      	b.n	80151ca <_ZN8touchgfx7Outline10renderLineEiiii+0x2ba>
 8015528:	f04f 37ff 	mov.w	r7, #4294967295
 801552c:	434a      	muls	r2, r1
 801552e:	4264      	negs	r4, r4
 8015530:	970a      	str	r7, [sp, #40]	@ 0x28
 8015532:	2700      	movs	r7, #0
 8015534:	e758      	b.n	80153e8 <_ZN8touchgfx7Outline10renderLineEiiii+0x4d8>
 8015536:	ea4f 1867 	mov.w	r8, r7, asr #5
 801553a:	f009 031f 	and.w	r3, r9, #31
 801553e:	f007 071f 	and.w	r7, r7, #31
 8015542:	fa1f fc8c 	uxth.w	ip, ip
 8015546:	45d0      	cmp	r8, sl
 8015548:	930f      	str	r3, [sp, #60]	@ 0x3c
 801554a:	fa1f fe8e 	uxth.w	lr, lr
 801554e:	d10a      	bne.n	8015566 <_ZN8touchgfx7Outline10renderLineEiiii+0x656>
 8015550:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8015552:	449c      	add	ip, r3
 8015554:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8015556:	441f      	add	r7, r3
 8015558:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801555a:	f8a5 c004 	strh.w	ip, [r5, #4]
 801555e:	fb03 e707 	mla	r7, r3, r7, lr
 8015562:	80ef      	strh	r7, [r5, #6]
 8015564:	e6bc      	b.n	80152e0 <_ZN8touchgfx7Outline10renderLineEiiii+0x3d0>
 8015566:	2900      	cmp	r1, #0
 8015568:	f2c0 80a6 	blt.w	80156b8 <_ZN8touchgfx7Outline10renderLineEiiii+0x7a8>
 801556c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801556e:	f1c7 0320 	rsb	r3, r7, #32
 8015572:	4363      	muls	r3, r4
 8015574:	2401      	movs	r4, #1
 8015576:	940d      	str	r4, [sp, #52]	@ 0x34
 8015578:	2420      	movs	r4, #32
 801557a:	940c      	str	r4, [sp, #48]	@ 0x30
 801557c:	fb93 f4f1 	sdiv	r4, r3, r1
 8015580:	fb01 3b14 	mls	fp, r1, r4, r3
 8015584:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8015586:	f1bb 0f00 	cmp.w	fp, #0
 801558a:	441f      	add	r7, r3
 801558c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801558e:	bfbc      	itt	lt
 8015590:	f104 34ff 	addlt.w	r4, r4, #4294967295
 8015594:	448b      	addlt	fp, r1
 8015596:	fb04 e707 	mla	r7, r4, r7, lr
 801559a:	44a4      	add	ip, r4
 801559c:	80ef      	strh	r7, [r5, #6]
 801559e:	f8a5 c004 	strh.w	ip, [r5, #4]
 80155a2:	eb08 0503 	add.w	r5, r8, r3
 80155a6:	f8d0 c010 	ldr.w	ip, [r0, #16]
 80155aa:	f8bc e006 	ldrh.w	lr, [ip, #6]
 80155ae:	f8bc 7004 	ldrh.w	r7, [ip, #4]
 80155b2:	ea5e 0307 	orrs.w	r3, lr, r7
 80155b6:	d011      	beq.n	80155dc <_ZN8touchgfx7Outline10renderLineEiiii+0x6cc>
 80155b8:	f9bc e002 	ldrsh.w	lr, [ip, #2]
 80155bc:	f1be 0f00 	cmp.w	lr, #0
 80155c0:	db0c      	blt.n	80155dc <_ZN8touchgfx7Outline10renderLineEiiii+0x6cc>
 80155c2:	6ac7      	ldr	r7, [r0, #44]	@ 0x2c
 80155c4:	45be      	cmp	lr, r7
 80155c6:	da09      	bge.n	80155dc <_ZN8touchgfx7Outline10renderLineEiiii+0x6cc>
 80155c8:	e9d0 7e01 	ldrd	r7, lr, [r0, #4]
 80155cc:	45be      	cmp	lr, r7
 80155ce:	bf3c      	itt	cc
 80155d0:	f10c 0708 	addcc.w	r7, ip, #8
 80155d4:	6107      	strcc	r7, [r0, #16]
 80155d6:	f10e 0701 	add.w	r7, lr, #1
 80155da:	6087      	str	r7, [r0, #8]
 80155dc:	6907      	ldr	r7, [r0, #16]
 80155de:	b213      	sxth	r3, r2
 80155e0:	4555      	cmp	r5, sl
 80155e2:	9310      	str	r3, [sp, #64]	@ 0x40
 80155e4:	807b      	strh	r3, [r7, #2]
 80155e6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80155e8:	803d      	strh	r5, [r7, #0]
 80155ea:	80be      	strh	r6, [r7, #4]
 80155ec:	eb04 0c03 	add.w	ip, r4, r3
 80155f0:	80fe      	strh	r6, [r7, #6]
 80155f2:	d050      	beq.n	8015696 <_ZN8touchgfx7Outline10renderLineEiiii+0x786>
 80155f4:	9b01      	ldr	r3, [sp, #4]
 80155f6:	eba3 070c 	sub.w	r7, r3, ip
 80155fa:	ebab 0301 	sub.w	r3, fp, r1
 80155fe:	443c      	add	r4, r7
 8015600:	9309      	str	r3, [sp, #36]	@ 0x24
 8015602:	0164      	lsls	r4, r4, #5
 8015604:	fb94 f8f1 	sdiv	r8, r4, r1
 8015608:	fb01 4418 	mls	r4, r1, r8, r4
 801560c:	2c00      	cmp	r4, #0
 801560e:	bfbc      	itt	lt
 8015610:	f108 38ff 	addlt.w	r8, r8, #4294967295
 8015614:	1864      	addlt	r4, r4, r1
 8015616:	f108 0701 	add.w	r7, r8, #1
 801561a:	9711      	str	r7, [sp, #68]	@ 0x44
 801561c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801561e:	f8d0 e010 	ldr.w	lr, [r0, #16]
 8015622:	191b      	adds	r3, r3, r4
 8015624:	f8be b004 	ldrh.w	fp, [lr, #4]
 8015628:	bf54      	ite	pl
 801562a:	9f11      	ldrpl	r7, [sp, #68]	@ 0x44
 801562c:	4647      	movmi	r7, r8
 801562e:	9309      	str	r3, [sp, #36]	@ 0x24
 8015630:	bf58      	it	pl
 8015632:	1a5b      	subpl	r3, r3, r1
 8015634:	44bb      	add	fp, r7
 8015636:	44bc      	add	ip, r7
 8015638:	bf58      	it	pl
 801563a:	9309      	strpl	r3, [sp, #36]	@ 0x24
 801563c:	f8ae b004 	strh.w	fp, [lr, #4]
 8015640:	f8be b006 	ldrh.w	fp, [lr, #6]
 8015644:	eb0b 1b47 	add.w	fp, fp, r7, lsl #5
 8015648:	9f0d      	ldr	r7, [sp, #52]	@ 0x34
 801564a:	f8ae b006 	strh.w	fp, [lr, #6]
 801564e:	443d      	add	r5, r7
 8015650:	f8d0 e010 	ldr.w	lr, [r0, #16]
 8015654:	f8be b006 	ldrh.w	fp, [lr, #6]
 8015658:	f8be 7004 	ldrh.w	r7, [lr, #4]
 801565c:	ea5b 0307 	orrs.w	r3, fp, r7
 8015660:	d011      	beq.n	8015686 <_ZN8touchgfx7Outline10renderLineEiiii+0x776>
 8015662:	f9be b002 	ldrsh.w	fp, [lr, #2]
 8015666:	f1bb 0f00 	cmp.w	fp, #0
 801566a:	db0c      	blt.n	8015686 <_ZN8touchgfx7Outline10renderLineEiiii+0x776>
 801566c:	6ac7      	ldr	r7, [r0, #44]	@ 0x2c
 801566e:	45bb      	cmp	fp, r7
 8015670:	da09      	bge.n	8015686 <_ZN8touchgfx7Outline10renderLineEiiii+0x776>
 8015672:	e9d0 7b01 	ldrd	r7, fp, [r0, #4]
 8015676:	45bb      	cmp	fp, r7
 8015678:	bf3c      	itt	cc
 801567a:	f10e 0708 	addcc.w	r7, lr, #8
 801567e:	6107      	strcc	r7, [r0, #16]
 8015680:	f10b 0701 	add.w	r7, fp, #1
 8015684:	6087      	str	r7, [r0, #8]
 8015686:	6907      	ldr	r7, [r0, #16]
 8015688:	4555      	cmp	r5, sl
 801568a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801568c:	803d      	strh	r5, [r7, #0]
 801568e:	807b      	strh	r3, [r7, #2]
 8015690:	80be      	strh	r6, [r7, #4]
 8015692:	80fe      	strh	r6, [r7, #6]
 8015694:	d1c2      	bne.n	801561c <_ZN8touchgfx7Outline10renderLineEiiii+0x70c>
 8015696:	9b01      	ldr	r3, [sp, #4]
 8015698:	9f0f      	ldr	r7, [sp, #60]	@ 0x3c
 801569a:	eba3 0c0c 	sub.w	ip, r3, ip
 801569e:	6903      	ldr	r3, [r0, #16]
 80156a0:	3720      	adds	r7, #32
 80156a2:	8899      	ldrh	r1, [r3, #4]
 80156a4:	4461      	add	r1, ip
 80156a6:	8099      	strh	r1, [r3, #4]
 80156a8:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80156aa:	1a7f      	subs	r7, r7, r1
 80156ac:	88d9      	ldrh	r1, [r3, #6]
 80156ae:	fb0c 1c07 	mla	ip, ip, r7, r1
 80156b2:	f8a3 c006 	strh.w	ip, [r3, #6]
 80156b6:	e613      	b.n	80152e0 <_ZN8touchgfx7Outline10renderLineEiiii+0x3d0>
 80156b8:	f04f 34ff 	mov.w	r4, #4294967295
 80156bc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80156be:	4249      	negs	r1, r1
 80156c0:	940d      	str	r4, [sp, #52]	@ 0x34
 80156c2:	2400      	movs	r4, #0
 80156c4:	437b      	muls	r3, r7
 80156c6:	e758      	b.n	801557a <_ZN8touchgfx7Outline10renderLineEiiii+0x66a>
 80156c8:	9905      	ldr	r1, [sp, #20]
 80156ca:	ea4f 1b69 	mov.w	fp, r9, asr #5
 80156ce:	f009 0c1f 	and.w	ip, r9, #31
 80156d2:	f8b7 8004 	ldrh.w	r8, [r7, #4]
 80156d6:	f001 011f 	and.w	r1, r1, #31
 80156da:	45f3      	cmp	fp, lr
 80156dc:	f8b7 a006 	ldrh.w	sl, [r7, #6]
 80156e0:	9102      	str	r1, [sp, #8]
 80156e2:	9904      	ldr	r1, [sp, #16]
 80156e4:	eba1 0406 	sub.w	r4, r1, r6
 80156e8:	d108      	bne.n	80156fc <_ZN8touchgfx7Outline10renderLineEiiii+0x7ec>
 80156ea:	9b02      	ldr	r3, [sp, #8]
 80156ec:	44a0      	add	r8, r4
 80156ee:	449c      	add	ip, r3
 80156f0:	f8a7 8004 	strh.w	r8, [r7, #4]
 80156f4:	fb04 a40c 	mla	r4, r4, ip, sl
 80156f8:	80fc      	strh	r4, [r7, #6]
 80156fa:	e461      	b.n	8014fc0 <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 80156fc:	9905      	ldr	r1, [sp, #20]
 80156fe:	ebb1 0109 	subs.w	r1, r1, r9
 8015702:	bf51      	iteee	pl
 8015704:	f1cc 0520 	rsbpl	r5, ip, #32
 8015708:	fb04 f40c 	mulmi.w	r4, r4, ip
 801570c:	4249      	negmi	r1, r1
 801570e:	2500      	movmi	r5, #0
 8015710:	bf5d      	ittte	pl
 8015712:	436c      	mulpl	r4, r5
 8015714:	2520      	movpl	r5, #32
 8015716:	f04f 0901 	movpl.w	r9, #1
 801571a:	f04f 39ff 	movmi.w	r9, #4294967295
 801571e:	9501      	str	r5, [sp, #4]
 8015720:	9b01      	ldr	r3, [sp, #4]
 8015722:	fb94 f5f1 	sdiv	r5, r4, r1
 8015726:	fb01 4415 	mls	r4, r1, r5, r4
 801572a:	449c      	add	ip, r3
 801572c:	eb0b 0309 	add.w	r3, fp, r9
 8015730:	2c00      	cmp	r4, #0
 8015732:	bfbc      	itt	lt
 8015734:	f105 35ff 	addlt.w	r5, r5, #4294967295
 8015738:	1864      	addlt	r4, r4, r1
 801573a:	44a8      	add	r8, r5
 801573c:	fb05 ac0c 	mla	ip, r5, ip, sl
 8015740:	f8a7 8004 	strh.w	r8, [r7, #4]
 8015744:	f8a7 c006 	strh.w	ip, [r7, #6]
 8015748:	f8d0 c010 	ldr.w	ip, [r0, #16]
 801574c:	f8bc 8006 	ldrh.w	r8, [ip, #6]
 8015750:	f8bc 7004 	ldrh.w	r7, [ip, #4]
 8015754:	ea58 0707 	orrs.w	r7, r8, r7
 8015758:	d011      	beq.n	801577e <_ZN8touchgfx7Outline10renderLineEiiii+0x86e>
 801575a:	f9bc 8002 	ldrsh.w	r8, [ip, #2]
 801575e:	f1b8 0f00 	cmp.w	r8, #0
 8015762:	db0c      	blt.n	801577e <_ZN8touchgfx7Outline10renderLineEiiii+0x86e>
 8015764:	6ac7      	ldr	r7, [r0, #44]	@ 0x2c
 8015766:	45b8      	cmp	r8, r7
 8015768:	da09      	bge.n	801577e <_ZN8touchgfx7Outline10renderLineEiiii+0x86e>
 801576a:	e9d0 7801 	ldrd	r7, r8, [r0, #4]
 801576e:	45b8      	cmp	r8, r7
 8015770:	bf3c      	itt	cc
 8015772:	f10c 0708 	addcc.w	r7, ip, #8
 8015776:	6107      	strcc	r7, [r0, #16]
 8015778:	f108 0701 	add.w	r7, r8, #1
 801577c:	6087      	str	r7, [r0, #8]
 801577e:	6907      	ldr	r7, [r0, #16]
 8015780:	f04f 0c00 	mov.w	ip, #0
 8015784:	b212      	sxth	r2, r2
 8015786:	459e      	cmp	lr, r3
 8015788:	803b      	strh	r3, [r7, #0]
 801578a:	442e      	add	r6, r5
 801578c:	807a      	strh	r2, [r7, #2]
 801578e:	f8a7 c004 	strh.w	ip, [r7, #4]
 8015792:	f8a7 c006 	strh.w	ip, [r7, #6]
 8015796:	d04b      	beq.n	8015830 <_ZN8touchgfx7Outline10renderLineEiiii+0x920>
 8015798:	9f04      	ldr	r7, [sp, #16]
 801579a:	1a64      	subs	r4, r4, r1
 801579c:	f04f 0a00 	mov.w	sl, #0
 80157a0:	1bbf      	subs	r7, r7, r6
 80157a2:	443d      	add	r5, r7
 80157a4:	016d      	lsls	r5, r5, #5
 80157a6:	fb95 f8f1 	sdiv	r8, r5, r1
 80157aa:	fb01 5518 	mls	r5, r1, r8, r5
 80157ae:	4565      	cmp	r5, ip
 80157b0:	bfbc      	itt	lt
 80157b2:	f108 38ff 	addlt.w	r8, r8, #4294967295
 80157b6:	186d      	addlt	r5, r5, r1
 80157b8:	f108 0701 	add.w	r7, r8, #1
 80157bc:	9703      	str	r7, [sp, #12]
 80157be:	f8d0 c010 	ldr.w	ip, [r0, #16]
 80157c2:	1964      	adds	r4, r4, r5
 80157c4:	444b      	add	r3, r9
 80157c6:	bf54      	ite	pl
 80157c8:	9f03      	ldrpl	r7, [sp, #12]
 80157ca:	4647      	movmi	r7, r8
 80157cc:	f8bc b004 	ldrh.w	fp, [ip, #4]
 80157d0:	bf58      	it	pl
 80157d2:	1a64      	subpl	r4, r4, r1
 80157d4:	443e      	add	r6, r7
 80157d6:	44bb      	add	fp, r7
 80157d8:	f8ac b004 	strh.w	fp, [ip, #4]
 80157dc:	f8bc b006 	ldrh.w	fp, [ip, #6]
 80157e0:	eb0b 1b47 	add.w	fp, fp, r7, lsl #5
 80157e4:	f8ac b006 	strh.w	fp, [ip, #6]
 80157e8:	f8d0 c010 	ldr.w	ip, [r0, #16]
 80157ec:	f8bc b006 	ldrh.w	fp, [ip, #6]
 80157f0:	f8bc 7004 	ldrh.w	r7, [ip, #4]
 80157f4:	ea5b 0707 	orrs.w	r7, fp, r7
 80157f8:	d011      	beq.n	801581e <_ZN8touchgfx7Outline10renderLineEiiii+0x90e>
 80157fa:	f9bc b002 	ldrsh.w	fp, [ip, #2]
 80157fe:	f1bb 0f00 	cmp.w	fp, #0
 8015802:	db0c      	blt.n	801581e <_ZN8touchgfx7Outline10renderLineEiiii+0x90e>
 8015804:	6ac7      	ldr	r7, [r0, #44]	@ 0x2c
 8015806:	45bb      	cmp	fp, r7
 8015808:	da09      	bge.n	801581e <_ZN8touchgfx7Outline10renderLineEiiii+0x90e>
 801580a:	e9d0 7b01 	ldrd	r7, fp, [r0, #4]
 801580e:	45bb      	cmp	fp, r7
 8015810:	bf3c      	itt	cc
 8015812:	f10c 0708 	addcc.w	r7, ip, #8
 8015816:	6107      	strcc	r7, [r0, #16]
 8015818:	f10b 0701 	add.w	r7, fp, #1
 801581c:	6087      	str	r7, [r0, #8]
 801581e:	6907      	ldr	r7, [r0, #16]
 8015820:	459e      	cmp	lr, r3
 8015822:	803b      	strh	r3, [r7, #0]
 8015824:	807a      	strh	r2, [r7, #2]
 8015826:	f8a7 a004 	strh.w	sl, [r7, #4]
 801582a:	f8a7 a006 	strh.w	sl, [r7, #6]
 801582e:	d1c6      	bne.n	80157be <_ZN8touchgfx7Outline10renderLineEiiii+0x8ae>
 8015830:	9b04      	ldr	r3, [sp, #16]
 8015832:	1b9e      	subs	r6, r3, r6
 8015834:	6903      	ldr	r3, [r0, #16]
 8015836:	889a      	ldrh	r2, [r3, #4]
 8015838:	4432      	add	r2, r6
 801583a:	809a      	strh	r2, [r3, #4]
 801583c:	9a02      	ldr	r2, [sp, #8]
 801583e:	f102 0c20 	add.w	ip, r2, #32
 8015842:	9a01      	ldr	r2, [sp, #4]
 8015844:	ebac 0c02 	sub.w	ip, ip, r2
 8015848:	88da      	ldrh	r2, [r3, #6]
 801584a:	fb06 260c 	mla	r6, r6, ip, r2
 801584e:	80de      	strh	r6, [r3, #6]
 8015850:	f7ff bbb6 	b.w	8014fc0 <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>

08015854 <_ZN8touchgfx7Outline6lineToEii>:
 8015854:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8015856:	079b      	lsls	r3, r3, #30
 8015858:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801585a:	460e      	mov	r6, r1
 801585c:	4615      	mov	r5, r2
 801585e:	d511      	bpl.n	8015884 <_ZN8touchgfx7Outline6lineToEii+0x30>
 8015860:	e9d0 1205 	ldrd	r1, r2, [r0, #20]
 8015864:	ea86 0701 	eor.w	r7, r6, r1
 8015868:	ea85 0302 	eor.w	r3, r5, r2
 801586c:	433b      	orrs	r3, r7
 801586e:	d009      	beq.n	8015884 <_ZN8touchgfx7Outline6lineToEii+0x30>
 8015870:	4633      	mov	r3, r6
 8015872:	9500      	str	r5, [sp, #0]
 8015874:	f7ff fb4c 	bl	8014f10 <_ZN8touchgfx7Outline10renderLineEiiii>
 8015878:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 801587a:	f043 0301 	orr.w	r3, r3, #1
 801587e:	e9c0 6505 	strd	r6, r5, [r0, #20]
 8015882:	6243      	str	r3, [r0, #36]	@ 0x24
 8015884:	b003      	add	sp, #12
 8015886:	bdf0      	pop	{r4, r5, r6, r7, pc}

08015888 <_ZN8touchgfx7Outline6moveToEii>:
 8015888:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801588a:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 801588c:	4615      	mov	r5, r2
 801588e:	4604      	mov	r4, r0
 8015890:	460e      	mov	r6, r1
 8015892:	079a      	lsls	r2, r3, #30
 8015894:	d401      	bmi.n	801589a <_ZN8touchgfx7Outline6moveToEii+0x12>
 8015896:	f7ff fb07 	bl	8014ea8 <_ZN8touchgfx7Outline5resetEv>
 801589a:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 801589c:	07db      	lsls	r3, r3, #31
 801589e:	d504      	bpl.n	80158aa <_ZN8touchgfx7Outline6moveToEii+0x22>
 80158a0:	4620      	mov	r0, r4
 80158a2:	e9d4 1207 	ldrd	r1, r2, [r4, #28]
 80158a6:	f7ff ffd5 	bl	8015854 <_ZN8touchgfx7Outline6lineToEii>
 80158aa:	6923      	ldr	r3, [r4, #16]
 80158ac:	1170      	asrs	r0, r6, #5
 80158ae:	1169      	asrs	r1, r5, #5
 80158b0:	f9b3 2000 	ldrsh.w	r2, [r3]
 80158b4:	4290      	cmp	r0, r2
 80158b6:	d103      	bne.n	80158c0 <_ZN8touchgfx7Outline6moveToEii+0x38>
 80158b8:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 80158bc:	4291      	cmp	r1, r2
 80158be:	d01a      	beq.n	80158f6 <_ZN8touchgfx7Outline6moveToEii+0x6e>
 80158c0:	88df      	ldrh	r7, [r3, #6]
 80158c2:	889a      	ldrh	r2, [r3, #4]
 80158c4:	433a      	orrs	r2, r7
 80158c6:	d010      	beq.n	80158ea <_ZN8touchgfx7Outline6moveToEii+0x62>
 80158c8:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 80158cc:	2a00      	cmp	r2, #0
 80158ce:	db0c      	blt.n	80158ea <_ZN8touchgfx7Outline6moveToEii+0x62>
 80158d0:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 80158d2:	42ba      	cmp	r2, r7
 80158d4:	da09      	bge.n	80158ea <_ZN8touchgfx7Outline6moveToEii+0x62>
 80158d6:	e9d4 7201 	ldrd	r7, r2, [r4, #4]
 80158da:	42ba      	cmp	r2, r7
 80158dc:	f102 0201 	add.w	r2, r2, #1
 80158e0:	bf38      	it	cc
 80158e2:	3308      	addcc	r3, #8
 80158e4:	60a2      	str	r2, [r4, #8]
 80158e6:	bf38      	it	cc
 80158e8:	6123      	strcc	r3, [r4, #16]
 80158ea:	6923      	ldr	r3, [r4, #16]
 80158ec:	2200      	movs	r2, #0
 80158ee:	8018      	strh	r0, [r3, #0]
 80158f0:	8059      	strh	r1, [r3, #2]
 80158f2:	809a      	strh	r2, [r3, #4]
 80158f4:	80da      	strh	r2, [r3, #6]
 80158f6:	6166      	str	r6, [r4, #20]
 80158f8:	6225      	str	r5, [r4, #32]
 80158fa:	e9c4 5606 	strd	r5, r6, [r4, #24]
 80158fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08015900 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj>:
 8015900:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015904:	b0d0      	sub	sp, #320	@ 0x140
 8015906:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 801590a:	466c      	mov	r4, sp
 801590c:	4627      	mov	r7, r4
 801590e:	1a0d      	subs	r5, r1, r0
 8015910:	f100 0308 	add.w	r3, r0, #8
 8015914:	2d48      	cmp	r5, #72	@ 0x48
 8015916:	f340 80d5 	ble.w	8015ac4 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1c4>
 801591a:	112d      	asrs	r5, r5, #4
 801591c:	f9b0 c006 	ldrsh.w	ip, [r0, #6]
 8015920:	f9b0 9000 	ldrsh.w	r9, [r0]
 8015924:	eb00 02c5 	add.w	r2, r0, r5, lsl #3
 8015928:	f9b0 8002 	ldrsh.w	r8, [r0, #2]
 801592c:	f9b0 e004 	ldrsh.w	lr, [r0, #4]
 8015930:	6816      	ldr	r6, [r2, #0]
 8015932:	6006      	str	r6, [r0, #0]
 8015934:	6856      	ldr	r6, [r2, #4]
 8015936:	6046      	str	r6, [r0, #4]
 8015938:	f820 9035 	strh.w	r9, [r0, r5, lsl #3]
 801593c:	f8a2 8002 	strh.w	r8, [r2, #2]
 8015940:	f8a2 e004 	strh.w	lr, [r2, #4]
 8015944:	f8a2 c006 	strh.w	ip, [r2, #6]
 8015948:	f1a1 0208 	sub.w	r2, r1, #8
 801594c:	f931 5c06 	ldrsh.w	r5, [r1, #-6]
 8015950:	f9b0 c00a 	ldrsh.w	ip, [r0, #10]
 8015954:	4565      	cmp	r5, ip
 8015956:	db06      	blt.n	8015966 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x66>
 8015958:	d119      	bne.n	801598e <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x8e>
 801595a:	f9b0 6008 	ldrsh.w	r6, [r0, #8]
 801595e:	f931 5c08 	ldrsh.w	r5, [r1, #-8]
 8015962:	42ae      	cmp	r6, r5
 8015964:	dd13      	ble.n	801598e <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x8e>
 8015966:	460e      	mov	r6, r1
 8015968:	f9b0 9008 	ldrsh.w	r9, [r0, #8]
 801596c:	f9b0 800c 	ldrsh.w	r8, [r0, #12]
 8015970:	f856 5d08 	ldr.w	r5, [r6, #-8]!
 8015974:	f9b0 e00e 	ldrsh.w	lr, [r0, #14]
 8015978:	601d      	str	r5, [r3, #0]
 801597a:	6875      	ldr	r5, [r6, #4]
 801597c:	605d      	str	r5, [r3, #4]
 801597e:	f821 9c08 	strh.w	r9, [r1, #-8]
 8015982:	f821 cc06 	strh.w	ip, [r1, #-6]
 8015986:	f821 8c04 	strh.w	r8, [r1, #-4]
 801598a:	f821 ec02 	strh.w	lr, [r1, #-2]
 801598e:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 8015992:	f9b0 500a 	ldrsh.w	r5, [r0, #10]
 8015996:	42ae      	cmp	r6, r5
 8015998:	db06      	blt.n	80159a8 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xa8>
 801599a:	d116      	bne.n	80159ca <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xca>
 801599c:	f9b0 c000 	ldrsh.w	ip, [r0]
 80159a0:	f9b0 5008 	ldrsh.w	r5, [r0, #8]
 80159a4:	45ac      	cmp	ip, r5
 80159a6:	da10      	bge.n	80159ca <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xca>
 80159a8:	681d      	ldr	r5, [r3, #0]
 80159aa:	f9b0 8000 	ldrsh.w	r8, [r0]
 80159ae:	f9b0 e004 	ldrsh.w	lr, [r0, #4]
 80159b2:	f9b0 c006 	ldrsh.w	ip, [r0, #6]
 80159b6:	6005      	str	r5, [r0, #0]
 80159b8:	685d      	ldr	r5, [r3, #4]
 80159ba:	f8a0 8008 	strh.w	r8, [r0, #8]
 80159be:	6045      	str	r5, [r0, #4]
 80159c0:	8146      	strh	r6, [r0, #10]
 80159c2:	f8a0 e00c 	strh.w	lr, [r0, #12]
 80159c6:	f8a0 c00e 	strh.w	ip, [r0, #14]
 80159ca:	f931 5c06 	ldrsh.w	r5, [r1, #-6]
 80159ce:	f9b0 c002 	ldrsh.w	ip, [r0, #2]
 80159d2:	4565      	cmp	r5, ip
 80159d4:	db06      	blt.n	80159e4 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xe4>
 80159d6:	d119      	bne.n	8015a0c <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x10c>
 80159d8:	f931 6c08 	ldrsh.w	r6, [r1, #-8]
 80159dc:	f9b0 5000 	ldrsh.w	r5, [r0]
 80159e0:	42ae      	cmp	r6, r5
 80159e2:	da13      	bge.n	8015a0c <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x10c>
 80159e4:	460e      	mov	r6, r1
 80159e6:	f9b0 9000 	ldrsh.w	r9, [r0]
 80159ea:	f9b0 8004 	ldrsh.w	r8, [r0, #4]
 80159ee:	f856 5d08 	ldr.w	r5, [r6, #-8]!
 80159f2:	f9b0 e006 	ldrsh.w	lr, [r0, #6]
 80159f6:	6005      	str	r5, [r0, #0]
 80159f8:	6875      	ldr	r5, [r6, #4]
 80159fa:	6045      	str	r5, [r0, #4]
 80159fc:	f821 9c08 	strh.w	r9, [r1, #-8]
 8015a00:	f821 cc06 	strh.w	ip, [r1, #-6]
 8015a04:	f821 8c04 	strh.w	r8, [r1, #-4]
 8015a08:	f821 ec02 	strh.w	lr, [r1, #-2]
 8015a0c:	3308      	adds	r3, #8
 8015a0e:	f9b0 c002 	ldrsh.w	ip, [r0, #2]
 8015a12:	f9b3 e002 	ldrsh.w	lr, [r3, #2]
 8015a16:	45e6      	cmp	lr, ip
 8015a18:	dbf8      	blt.n	8015a0c <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x10c>
 8015a1a:	d105      	bne.n	8015a28 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x128>
 8015a1c:	f9b3 6000 	ldrsh.w	r6, [r3]
 8015a20:	f9b0 5000 	ldrsh.w	r5, [r0]
 8015a24:	42ae      	cmp	r6, r5
 8015a26:	dbf1      	blt.n	8015a0c <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x10c>
 8015a28:	4615      	mov	r5, r2
 8015a2a:	3a08      	subs	r2, #8
 8015a2c:	f9b2 6002 	ldrsh.w	r6, [r2, #2]
 8015a30:	45b4      	cmp	ip, r6
 8015a32:	dbf9      	blt.n	8015a28 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x128>
 8015a34:	d105      	bne.n	8015a42 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x142>
 8015a36:	f9b0 8000 	ldrsh.w	r8, [r0]
 8015a3a:	f9b2 6000 	ldrsh.w	r6, [r2]
 8015a3e:	45b0      	cmp	r8, r6
 8015a40:	dbf2      	blt.n	8015a28 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x128>
 8015a42:	4293      	cmp	r3, r2
 8015a44:	f1a5 0608 	sub.w	r6, r5, #8
 8015a48:	d816      	bhi.n	8015a78 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x178>
 8015a4a:	f8d6 c000 	ldr.w	ip, [r6]
 8015a4e:	f9b3 a000 	ldrsh.w	sl, [r3]
 8015a52:	f9b3 9004 	ldrsh.w	r9, [r3, #4]
 8015a56:	f9b3 8006 	ldrsh.w	r8, [r3, #6]
 8015a5a:	f8c3 c000 	str.w	ip, [r3]
 8015a5e:	f8d6 c004 	ldr.w	ip, [r6, #4]
 8015a62:	f8c3 c004 	str.w	ip, [r3, #4]
 8015a66:	f825 ac08 	strh.w	sl, [r5, #-8]
 8015a6a:	f825 ec06 	strh.w	lr, [r5, #-6]
 8015a6e:	f825 9c04 	strh.w	r9, [r5, #-4]
 8015a72:	f825 8c02 	strh.w	r8, [r5, #-2]
 8015a76:	e7c9      	b.n	8015a0c <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x10c>
 8015a78:	f8d6 e000 	ldr.w	lr, [r6]
 8015a7c:	f9b0 a000 	ldrsh.w	sl, [r0]
 8015a80:	f9b0 9004 	ldrsh.w	r9, [r0, #4]
 8015a84:	f9b0 8006 	ldrsh.w	r8, [r0, #6]
 8015a88:	f8c0 e000 	str.w	lr, [r0]
 8015a8c:	f8d6 e004 	ldr.w	lr, [r6, #4]
 8015a90:	1a16      	subs	r6, r2, r0
 8015a92:	f8c0 e004 	str.w	lr, [r0, #4]
 8015a96:	f825 ac08 	strh.w	sl, [r5, #-8]
 8015a9a:	f825 cc06 	strh.w	ip, [r5, #-6]
 8015a9e:	f825 9c04 	strh.w	r9, [r5, #-4]
 8015aa2:	f825 8c02 	strh.w	r8, [r5, #-2]
 8015aa6:	1acd      	subs	r5, r1, r3
 8015aa8:	10ed      	asrs	r5, r5, #3
 8015aaa:	ebb5 0fe6 	cmp.w	r5, r6, asr #3
 8015aae:	bfb5      	itete	lt
 8015ab0:	e9c4 0200 	strdlt	r0, r2, [r4]
 8015ab4:	e9c4 3100 	strdge	r3, r1, [r4]
 8015ab8:	460a      	movlt	r2, r1
 8015aba:	4603      	movge	r3, r0
 8015abc:	3408      	adds	r4, #8
 8015abe:	4618      	mov	r0, r3
 8015ac0:	4611      	mov	r1, r2
 8015ac2:	e724      	b.n	801590e <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xe>
 8015ac4:	4299      	cmp	r1, r3
 8015ac6:	d927      	bls.n	8015b18 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x218>
 8015ac8:	f1a3 0210 	sub.w	r2, r3, #16
 8015acc:	f9b2 c012 	ldrsh.w	ip, [r2, #18]
 8015ad0:	f9b2 500a 	ldrsh.w	r5, [r2, #10]
 8015ad4:	45ac      	cmp	ip, r5
 8015ad6:	db06      	blt.n	8015ae6 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1e6>
 8015ad8:	d11c      	bne.n	8015b14 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x214>
 8015ada:	f9b2 6010 	ldrsh.w	r6, [r2, #16]
 8015ade:	f9b2 5008 	ldrsh.w	r5, [r2, #8]
 8015ae2:	42ae      	cmp	r6, r5
 8015ae4:	da16      	bge.n	8015b14 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x214>
 8015ae6:	4615      	mov	r5, r2
 8015ae8:	f9b2 9010 	ldrsh.w	r9, [r2, #16]
 8015aec:	f9b2 8014 	ldrsh.w	r8, [r2, #20]
 8015af0:	3a08      	subs	r2, #8
 8015af2:	f855 6f08 	ldr.w	r6, [r5, #8]!
 8015af6:	f9b2 e01e 	ldrsh.w	lr, [r2, #30]
 8015afa:	6196      	str	r6, [r2, #24]
 8015afc:	42a8      	cmp	r0, r5
 8015afe:	686e      	ldr	r6, [r5, #4]
 8015b00:	f8a2 9010 	strh.w	r9, [r2, #16]
 8015b04:	61d6      	str	r6, [r2, #28]
 8015b06:	f8a2 c012 	strh.w	ip, [r2, #18]
 8015b0a:	f8a2 8014 	strh.w	r8, [r2, #20]
 8015b0e:	f8a2 e016 	strh.w	lr, [r2, #22]
 8015b12:	d1db      	bne.n	8015acc <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1cc>
 8015b14:	3308      	adds	r3, #8
 8015b16:	e7d5      	b.n	8015ac4 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1c4>
 8015b18:	42bc      	cmp	r4, r7
 8015b1a:	d903      	bls.n	8015b24 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x224>
 8015b1c:	e954 0102 	ldrd	r0, r1, [r4, #-8]
 8015b20:	3c08      	subs	r4, #8
 8015b22:	e6f4      	b.n	801590e <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xe>
 8015b24:	b050      	add	sp, #320	@ 0x140
 8015b26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08015b2a <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv>:
 8015b2a:	b510      	push	{r4, lr}
 8015b2c:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8015b2e:	4604      	mov	r4, r0
 8015b30:	07da      	lsls	r2, r3, #31
 8015b32:	d507      	bpl.n	8015b44 <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x1a>
 8015b34:	e9d0 1207 	ldrd	r1, r2, [r0, #28]
 8015b38:	f7ff fe8c 	bl	8015854 <_ZN8touchgfx7Outline6lineToEii>
 8015b3c:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8015b3e:	f023 0301 	bic.w	r3, r3, #1
 8015b42:	6243      	str	r3, [r0, #36]	@ 0x24
 8015b44:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8015b46:	079b      	lsls	r3, r3, #30
 8015b48:	d521      	bpl.n	8015b8e <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x64>
 8015b4a:	6923      	ldr	r3, [r4, #16]
 8015b4c:	88d9      	ldrh	r1, [r3, #6]
 8015b4e:	889a      	ldrh	r2, [r3, #4]
 8015b50:	430a      	orrs	r2, r1
 8015b52:	d010      	beq.n	8015b76 <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x4c>
 8015b54:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8015b58:	2a00      	cmp	r2, #0
 8015b5a:	db0c      	blt.n	8015b76 <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x4c>
 8015b5c:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8015b5e:	428a      	cmp	r2, r1
 8015b60:	da09      	bge.n	8015b76 <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x4c>
 8015b62:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
 8015b66:	4291      	cmp	r1, r2
 8015b68:	f102 0201 	add.w	r2, r2, #1
 8015b6c:	bf88      	it	hi
 8015b6e:	3308      	addhi	r3, #8
 8015b70:	60a2      	str	r2, [r4, #8]
 8015b72:	bf88      	it	hi
 8015b74:	6123      	strhi	r3, [r4, #16]
 8015b76:	68a1      	ldr	r1, [r4, #8]
 8015b78:	b129      	cbz	r1, 8015b86 <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x5c>
 8015b7a:	6863      	ldr	r3, [r4, #4]
 8015b7c:	4299      	cmp	r1, r3
 8015b7e:	d802      	bhi.n	8015b86 <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x5c>
 8015b80:	68e0      	ldr	r0, [r4, #12]
 8015b82:	f7ff febd 	bl	8015900 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj>
 8015b86:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8015b88:	f023 0302 	bic.w	r3, r3, #2
 8015b8c:	6263      	str	r3, [r4, #36]	@ 0x24
 8015b8e:	68e0      	ldr	r0, [r4, #12]
 8015b90:	bd10      	pop	{r4, pc}
	...

08015b94 <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj>:
 8015b94:	4b02      	ldr	r3, [pc, #8]	@ (8015ba0 <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj+0xc>)
 8015b96:	6018      	str	r0, [r3, #0]
 8015b98:	4b02      	ldr	r3, [pc, #8]	@ (8015ba4 <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj+0x10>)
 8015b9a:	6019      	str	r1, [r3, #0]
 8015b9c:	4770      	bx	lr
 8015b9e:	bf00      	nop
 8015ba0:	24028e28 	.word	0x24028e28
 8015ba4:	24028e2c 	.word	0x24028e2c

08015ba8 <_ZN8touchgfx20CanvasWidgetRenderer11resetBufferEv>:
 8015ba8:	2300      	movs	r3, #0
 8015baa:	4a02      	ldr	r2, [pc, #8]	@ (8015bb4 <_ZN8touchgfx20CanvasWidgetRenderer11resetBufferEv+0xc>)
 8015bac:	6013      	str	r3, [r2, #0]
 8015bae:	4a02      	ldr	r2, [pc, #8]	@ (8015bb8 <_ZN8touchgfx20CanvasWidgetRenderer11resetBufferEv+0x10>)
 8015bb0:	6013      	str	r3, [r2, #0]
 8015bb2:	4770      	bx	lr
 8015bb4:	24028e28 	.word	0x24028e28
 8015bb8:	24028e2c 	.word	0x24028e2c

08015bbc <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv>:
 8015bbc:	4b01      	ldr	r3, [pc, #4]	@ (8015bc4 <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv+0x8>)
 8015bbe:	6818      	ldr	r0, [r3, #0]
 8015bc0:	4770      	bx	lr
 8015bc2:	bf00      	nop
 8015bc4:	24028e28 	.word	0x24028e28

08015bc8 <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv>:
 8015bc8:	4b01      	ldr	r3, [pc, #4]	@ (8015bd0 <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv+0x8>)
 8015bca:	6818      	ldr	r0, [r3, #0]
 8015bcc:	4770      	bx	lr
 8015bce:	bf00      	nop
 8015bd0:	24028e2c 	.word	0x24028e2c

08015bd4 <_ZN8touchgfx3LCD27supportDynamicBitmapDrawingENS_6Bitmap12BitmapFormatE>:
 8015bd4:	b510      	push	{r4, lr}
 8015bd6:	6803      	ldr	r3, [r0, #0]
 8015bd8:	460c      	mov	r4, r1
 8015bda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015bdc:	4798      	blx	r3
 8015bde:	1b03      	subs	r3, r0, r4
 8015be0:	4258      	negs	r0, r3
 8015be2:	4158      	adcs	r0, r3
 8015be4:	bd10      	pop	{r4, pc}
	...

08015be8 <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE>:
 8015be8:	4b01      	ldr	r3, [pc, #4]	@ (8015bf0 <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE+0x8>)
 8015bea:	6019      	str	r1, [r3, #0]
 8015bec:	4770      	bx	lr
 8015bee:	bf00      	nop
 8015bf0:	24028e30 	.word	0x24028e30

08015bf4 <_ZN8touchgfx3LCD18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 8015bf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015bf8:	4696      	mov	lr, r2
 8015bfa:	b097      	sub	sp, #92	@ 0x5c
 8015bfc:	4605      	mov	r5, r0
 8015bfe:	4614      	mov	r4, r2
 8015c00:	460e      	mov	r6, r1
 8015c02:	461f      	mov	r7, r3
 8015c04:	f10d 0c1c 	add.w	ip, sp, #28
 8015c08:	f8bd 8088 	ldrh.w	r8, [sp, #136]	@ 0x88
 8015c0c:	f89d 908c 	ldrb.w	r9, [sp, #140]	@ 0x8c
 8015c10:	f8bd a090 	ldrh.w	sl, [sp, #144]	@ 0x90
 8015c14:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8015c18:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8015c1c:	f8de 3000 	ldr.w	r3, [lr]
 8015c20:	f104 0e14 	add.w	lr, r4, #20
 8015c24:	f8cc 3000 	str.w	r3, [ip]
 8015c28:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 8015c2c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8015c30:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8015c34:	f8de 3000 	ldr.w	r3, [lr]
 8015c38:	f104 0e28 	add.w	lr, r4, #40	@ 0x28
 8015c3c:	f8cc 3000 	str.w	r3, [ip]
 8015c40:	f10d 0c44 	add.w	ip, sp, #68	@ 0x44
 8015c44:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8015c48:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8015c4c:	f8de 3000 	ldr.w	r3, [lr]
 8015c50:	4631      	mov	r1, r6
 8015c52:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8015c54:	4628      	mov	r0, r5
 8015c56:	f8cc 3000 	str.w	r3, [ip]
 8015c5a:	682b      	ldr	r3, [r5, #0]
 8015c5c:	9201      	str	r2, [sp, #4]
 8015c5e:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8015c60:	f8cd 8008 	str.w	r8, [sp, #8]
 8015c64:	9200      	str	r2, [sp, #0]
 8015c66:	aa07      	add	r2, sp, #28
 8015c68:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 8015c6c:	f8d3 b03c 	ldr.w	fp, [r3, #60]	@ 0x3c
 8015c70:	463b      	mov	r3, r7
 8015c72:	47d8      	blx	fp
 8015c74:	46a6      	mov	lr, r4
 8015c76:	f10d 0c1c 	add.w	ip, sp, #28
 8015c7a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8015c7e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8015c82:	f8de 3000 	ldr.w	r3, [lr]
 8015c86:	f104 0e28 	add.w	lr, r4, #40	@ 0x28
 8015c8a:	343c      	adds	r4, #60	@ 0x3c
 8015c8c:	f8cc 3000 	str.w	r3, [ip]
 8015c90:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 8015c94:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8015c98:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8015c9c:	f8de 3000 	ldr.w	r3, [lr]
 8015ca0:	f8cc 3000 	str.w	r3, [ip]
 8015ca4:	f10d 0c44 	add.w	ip, sp, #68	@ 0x44
 8015ca8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8015caa:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8015cae:	6823      	ldr	r3, [r4, #0]
 8015cb0:	4631      	mov	r1, r6
 8015cb2:	4628      	mov	r0, r5
 8015cb4:	f8cc 3000 	str.w	r3, [ip]
 8015cb8:	682b      	ldr	r3, [r5, #0]
 8015cba:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 8015cbe:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8015cc0:	f8cd 8008 	str.w	r8, [sp, #8]
 8015cc4:	9201      	str	r2, [sp, #4]
 8015cc6:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8015cc8:	9200      	str	r2, [sp, #0]
 8015cca:	aa07      	add	r2, sp, #28
 8015ccc:	6bdc      	ldr	r4, [r3, #60]	@ 0x3c
 8015cce:	463b      	mov	r3, r7
 8015cd0:	47a0      	blx	r4
 8015cd2:	b017      	add	sp, #92	@ 0x5c
 8015cd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08015cd8 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht>:
 8015cd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015cdc:	b08d      	sub	sp, #52	@ 0x34
 8015cde:	4688      	mov	r8, r1
 8015ce0:	f8d3 c000 	ldr.w	ip, [r3]
 8015ce4:	9916      	ldr	r1, [sp, #88]	@ 0x58
 8015ce6:	f8bd 4070 	ldrh.w	r4, [sp, #112]	@ 0x70
 8015cea:	680f      	ldr	r7, [r1, #0]
 8015cec:	ed92 4a09 	vldr	s8, [r2, #36]	@ 0x24
 8015cf0:	eba7 070c 	sub.w	r7, r7, ip
 8015cf4:	edd2 4a0b 	vldr	s9, [r2, #44]	@ 0x2c
 8015cf8:	edd3 6a07 	vldr	s13, [r3, #28]
 8015cfc:	42bc      	cmp	r4, r7
 8015cfe:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8015d00:	f8dd a064 	ldr.w	sl, [sp, #100]	@ 0x64
 8015d04:	bfa8      	it	ge
 8015d06:	463c      	movge	r4, r7
 8015d08:	f9b1 9000 	ldrsh.w	r9, [r1]
 8015d0c:	f9ba 1000 	ldrsh.w	r1, [sl]
 8015d10:	ee07 4a90 	vmov	s15, r4
 8015d14:	eb09 0e0c 	add.w	lr, r9, ip
 8015d18:	edd3 1a0a 	vldr	s3, [r3, #40]	@ 0x28
 8015d1c:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
 8015d20:	edd2 7a0d 	vldr	s15, [r2, #52]	@ 0x34
 8015d24:	ed93 2a0d 	vldr	s4, [r3, #52]	@ 0x34
 8015d28:	4571      	cmp	r1, lr
 8015d2a:	ee25 4a04 	vmul.f32	s8, s10, s8
 8015d2e:	ee65 4a24 	vmul.f32	s9, s10, s9
 8015d32:	ee25 5a27 	vmul.f32	s10, s10, s15
 8015d36:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8015d3a:	ee71 0aa4 	vadd.f32	s1, s3, s9
 8015d3e:	ee32 1a05 	vadd.f32	s2, s4, s10
 8015d42:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8015d46:	ee36 0a84 	vadd.f32	s0, s13, s8
 8015d4a:	ee61 1a87 	vmul.f32	s3, s3, s14
 8015d4e:	ee22 2a07 	vmul.f32	s4, s4, s14
 8015d52:	f340 808c 	ble.w	8015e6e <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x196>
 8015d56:	eba1 060e 	sub.w	r6, r1, lr
 8015d5a:	fb96 f5f4 	sdiv	r5, r6, r4
 8015d5e:	ee07 5a10 	vmov	s14, r5
 8015d62:	2d00      	cmp	r5, #0
 8015d64:	fb04 6615 	mls	r6, r4, r5, r6
 8015d68:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8015d6c:	eea7 0a04 	vfma.f32	s0, s14, s8
 8015d70:	eee7 0a24 	vfma.f32	s1, s14, s9
 8015d74:	eea7 1a05 	vfma.f32	s2, s14, s10
 8015d78:	dd12      	ble.n	8015da0 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xc8>
 8015d7a:	ee70 6a44 	vsub.f32	s13, s0, s8
 8015d7e:	ee70 1ae4 	vsub.f32	s3, s1, s9
 8015d82:	ee31 2a45 	vsub.f32	s4, s2, s10
 8015d86:	eef5 6a40 	vcmp.f32	s13, #0.0
 8015d8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015d8e:	bf14      	ite	ne
 8015d90:	ee87 7aa6 	vdivne.f32	s14, s15, s13
 8015d94:	eeb0 7a67 	vmoveq.f32	s14, s15
 8015d98:	ee61 1a87 	vmul.f32	s3, s3, s14
 8015d9c:	ee22 2a07 	vmul.f32	s4, s4, s14
 8015da0:	fb05 f204 	mul.w	r2, r5, r4
 8015da4:	1abf      	subs	r7, r7, r2
 8015da6:	4494      	add	ip, r2
 8015da8:	f8ba 2004 	ldrh.w	r2, [sl, #4]
 8015dac:	4411      	add	r1, r2
 8015dae:	eb09 020c 	add.w	r2, r9, ip
 8015db2:	b209      	sxth	r1, r1
 8015db4:	443a      	add	r2, r7
 8015db6:	428a      	cmp	r2, r1
 8015db8:	bfc4      	itt	gt
 8015dba:	eba1 0209 	subgt.w	r2, r1, r9
 8015dbe:	eba2 070c 	subgt.w	r7, r2, ip
 8015dc2:	2f00      	cmp	r7, #0
 8015dc4:	dd50      	ble.n	8015e68 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x190>
 8015dc6:	fb97 f1f4 	sdiv	r1, r7, r4
 8015dca:	fb04 7211 	mls	r2, r4, r1, r7
 8015dce:	b90a      	cbnz	r2, 8015dd4 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xfc>
 8015dd0:	3901      	subs	r1, #1
 8015dd2:	4622      	mov	r2, r4
 8015dd4:	eec7 3a80 	vdiv.f32	s7, s15, s0
 8015dd8:	6840      	ldr	r0, [r0, #4]
 8015dda:	f89d b06c 	ldrb.w	fp, [sp, #108]	@ 0x6c
 8015dde:	44b6      	add	lr, r6
 8015de0:	f8d0 a000 	ldr.w	sl, [r0]
 8015de4:	2900      	cmp	r1, #0
 8015de6:	bfcc      	ite	gt
 8015de8:	46a1      	movgt	r9, r4
 8015dea:	4691      	movle	r9, r2
 8015dec:	900b      	str	r0, [sp, #44]	@ 0x2c
 8015dee:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 8015df0:	fb04 e505 	mla	r5, r4, r5, lr
 8015df4:	eef0 6a42 	vmov.f32	s13, s4
 8015df8:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 8015dfc:	9008      	str	r0, [sp, #32]
 8015dfe:	eeb0 7a61 	vmov.f32	s14, s3
 8015e02:	9818      	ldr	r0, [sp, #96]	@ 0x60
 8015e04:	695b      	ldr	r3, [r3, #20]
 8015e06:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8015e0a:	f9b0 b002 	ldrsh.w	fp, [r0, #2]
 8015e0e:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 8015e12:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8015e14:	445b      	add	r3, fp
 8015e16:	9307      	str	r3, [sp, #28]
 8015e18:	ee16 3a90 	vmov	r3, s13
 8015e1c:	e9cd 8505 	strd	r8, r5, [sp, #20]
 8015e20:	ee60 2aa3 	vmul.f32	s5, s1, s7
 8015e24:	ee21 3a23 	vmul.f32	s6, s2, s7
 8015e28:	ee72 7ae1 	vsub.f32	s15, s5, s3
 8015e2c:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 8015e30:	ee17 7a90 	vmov	r7, s15
 8015e34:	ee73 7a42 	vsub.f32	s15, s6, s4
 8015e38:	fb97 f7f4 	sdiv	r7, r7, r4
 8015e3c:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 8015e40:	ee17 ca90 	vmov	ip, s15
 8015e44:	fb9c fcf4 	sdiv	ip, ip, r4
 8015e48:	fb0c 3306 	mla	r3, ip, r6, r3
 8015e4c:	9302      	str	r3, [sp, #8]
 8015e4e:	ee17 3a10 	vmov	r3, s14
 8015e52:	e9cd 7c03 	strd	r7, ip, [sp, #12]
 8015e56:	fb07 3706 	mla	r7, r7, r6, r3
 8015e5a:	eba9 0306 	sub.w	r3, r9, r6
 8015e5e:	e9cd 4700 	strd	r4, r7, [sp]
 8015e62:	f8da 4008 	ldr.w	r4, [sl, #8]
 8015e66:	47a0      	blx	r4
 8015e68:	b00d      	add	sp, #52	@ 0x34
 8015e6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015e6e:	2500      	movs	r5, #0
 8015e70:	462e      	mov	r6, r5
 8015e72:	e799      	b.n	8015da8 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xd0>

08015e74 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 8015e74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015e78:	b0db      	sub	sp, #364	@ 0x16c
 8015e7a:	461d      	mov	r5, r3
 8015e7c:	4614      	mov	r4, r2
 8015e7e:	f8bd 3198 	ldrh.w	r3, [sp, #408]	@ 0x198
 8015e82:	910f      	str	r1, [sp, #60]	@ 0x3c
 8015e84:	4629      	mov	r1, r5
 8015e86:	930a      	str	r3, [sp, #40]	@ 0x28
 8015e88:	f89d 319c 	ldrb.w	r3, [sp, #412]	@ 0x19c
 8015e8c:	9009      	str	r0, [sp, #36]	@ 0x24
 8015e8e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8015e90:	f8bd 31a0 	ldrh.w	r3, [sp, #416]	@ 0x1a0
 8015e94:	f8dd b194 	ldr.w	fp, [sp, #404]	@ 0x194
 8015e98:	9310      	str	r3, [sp, #64]	@ 0x40
 8015e9a:	6803      	ldr	r3, [r0, #0]
 8015e9c:	6c5f      	ldr	r7, [r3, #68]	@ 0x44
 8015e9e:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	@ 0x28
 8015ea2:	47b8      	blx	r7
 8015ea4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015ea6:	6058      	str	r0, [r3, #4]
 8015ea8:	2800      	cmp	r0, #0
 8015eaa:	f000 83a1 	beq.w	80165f0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8015eae:	682b      	ldr	r3, [r5, #0]
 8015eb0:	eef2 7a04 	vmov.f32	s15, #36	@ 0x41200000  10.0
 8015eb4:	ed94 7a02 	vldr	s14, [r4, #8]
 8015eb8:	9314      	str	r3, [sp, #80]	@ 0x50
 8015eba:	686b      	ldr	r3, [r5, #4]
 8015ebc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8015ec0:	9315      	str	r3, [sp, #84]	@ 0x54
 8015ec2:	4bc1      	ldr	r3, [pc, #772]	@ (80161c8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x354>)
 8015ec4:	7819      	ldrb	r1, [r3, #0]
 8015ec6:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
 8015eca:	2900      	cmp	r1, #0
 8015ecc:	bf16      	itet	ne
 8015ece:	4619      	movne	r1, r3
 8015ed0:	4611      	moveq	r1, r2
 8015ed2:	4613      	movne	r3, r2
 8015ed4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015ed8:	9116      	str	r1, [sp, #88]	@ 0x58
 8015eda:	e9cd 3217 	strd	r3, r2, [sp, #92]	@ 0x5c
 8015ede:	f240 8387 	bls.w	80165f0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8015ee2:	ed94 7a07 	vldr	s14, [r4, #28]
 8015ee6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8015eea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015eee:	f240 837f 	bls.w	80165f0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8015ef2:	ed94 7a0c 	vldr	s14, [r4, #48]	@ 0x30
 8015ef6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8015efa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015efe:	f240 8377 	bls.w	80165f0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8015f02:	6822      	ldr	r2, [r4, #0]
 8015f04:	4bb1      	ldr	r3, [pc, #708]	@ (80161cc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x358>)
 8015f06:	429a      	cmp	r2, r3
 8015f08:	f2c0 8372 	blt.w	80165f0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8015f0c:	49b0      	ldr	r1, [pc, #704]	@ (80161d0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x35c>)
 8015f0e:	6963      	ldr	r3, [r4, #20]
 8015f10:	428a      	cmp	r2, r1
 8015f12:	f300 836d 	bgt.w	80165f0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8015f16:	f503 331c 	add.w	r3, r3, #159744	@ 0x27000
 8015f1a:	48ae      	ldr	r0, [pc, #696]	@ (80161d4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x360>)
 8015f1c:	33ff      	adds	r3, #255	@ 0xff
 8015f1e:	4283      	cmp	r3, r0
 8015f20:	f200 8366 	bhi.w	80165f0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8015f24:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8015f26:	4dac      	ldr	r5, [pc, #688]	@ (80161d8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x364>)
 8015f28:	f503 331c 	add.w	r3, r3, #159744	@ 0x27000
 8015f2c:	33ff      	adds	r3, #255	@ 0xff
 8015f2e:	42ab      	cmp	r3, r5
 8015f30:	f200 835e 	bhi.w	80165f0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8015f34:	6862      	ldr	r2, [r4, #4]
 8015f36:	f502 331c 	add.w	r3, r2, #159744	@ 0x27000
 8015f3a:	33ff      	adds	r3, #255	@ 0xff
 8015f3c:	4283      	cmp	r3, r0
 8015f3e:	f200 8357 	bhi.w	80165f0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8015f42:	69a1      	ldr	r1, [r4, #24]
 8015f44:	f501 331c 	add.w	r3, r1, #159744	@ 0x27000
 8015f48:	33ff      	adds	r3, #255	@ 0xff
 8015f4a:	4283      	cmp	r3, r0
 8015f4c:	f200 8350 	bhi.w	80165f0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8015f50:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8015f52:	f503 301c 	add.w	r0, r3, #159744	@ 0x27000
 8015f56:	30ff      	adds	r0, #255	@ 0xff
 8015f58:	42a8      	cmp	r0, r5
 8015f5a:	f200 8349 	bhi.w	80165f0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8015f5e:	428a      	cmp	r2, r1
 8015f60:	f280 8110 	bge.w	8016184 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x310>
 8015f64:	429a      	cmp	r2, r3
 8015f66:	f300 8119 	bgt.w	801619c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x328>
 8015f6a:	4299      	cmp	r1, r3
 8015f6c:	f280 811d 	bge.w	80161aa <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x336>
 8015f70:	2502      	movs	r5, #2
 8015f72:	2701      	movs	r7, #1
 8015f74:	46a9      	mov	r9, r5
 8015f76:	46b8      	mov	r8, r7
 8015f78:	f04f 0a00 	mov.w	sl, #0
 8015f7c:	4621      	mov	r1, r4
 8015f7e:	a849      	add	r0, sp, #292	@ 0x124
 8015f80:	f004 fa40 	bl	801a404 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>
 8015f84:	4622      	mov	r2, r4
 8015f86:	4653      	mov	r3, sl
 8015f88:	a949      	add	r1, sp, #292	@ 0x124
 8015f8a:	f8cd 9000 	str.w	r9, [sp]
 8015f8e:	a819      	add	r0, sp, #100	@ 0x64
 8015f90:	f004 fb68 	bl	801a664 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 8015f94:	4622      	mov	r2, r4
 8015f96:	4653      	mov	r3, sl
 8015f98:	a949      	add	r1, sp, #292	@ 0x124
 8015f9a:	f8cd 8000 	str.w	r8, [sp]
 8015f9e:	a829      	add	r0, sp, #164	@ 0xa4
 8015fa0:	f004 fb60 	bl	801a664 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 8015fa4:	4643      	mov	r3, r8
 8015fa6:	4622      	mov	r2, r4
 8015fa8:	a949      	add	r1, sp, #292	@ 0x124
 8015faa:	f8cd 9000 	str.w	r9, [sp]
 8015fae:	a839      	add	r0, sp, #228	@ 0xe4
 8015fb0:	f004 fb58 	bl	801a664 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 8015fb4:	42af      	cmp	r7, r5
 8015fb6:	af12      	add	r7, sp, #72	@ 0x48
 8015fb8:	bfb7      	itett	lt
 8015fba:	2300      	movlt	r3, #0
 8015fbc:	2301      	movge	r3, #1
 8015fbe:	ad29      	addlt	r5, sp, #164	@ 0xa4
 8015fc0:	ac19      	addlt	r4, sp, #100	@ 0x64
 8015fc2:	bfb1      	iteee	lt
 8015fc4:	930e      	strlt	r3, [sp, #56]	@ 0x38
 8015fc6:	ad19      	addge	r5, sp, #100	@ 0x64
 8015fc8:	930e      	strge	r3, [sp, #56]	@ 0x38
 8015fca:	ac29      	addge	r4, sp, #164	@ 0xa4
 8015fcc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8015fce:	e893 0003 	ldmia.w	r3, {r0, r1}
 8015fd2:	e887 0003 	stmia.w	r7, {r0, r1}
 8015fd6:	b928      	cbnz	r0, 8015fe4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x170>
 8015fd8:	4b80      	ldr	r3, [pc, #512]	@ (80161dc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x368>)
 8015fda:	6818      	ldr	r0, [r3, #0]
 8015fdc:	6803      	ldr	r3, [r0, #0]
 8015fde:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8015fe0:	4798      	blx	r3
 8015fe2:	6038      	str	r0, [r7, #0]
 8015fe4:	9b64      	ldr	r3, [sp, #400]	@ 0x190
 8015fe6:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 8015fea:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8015fee:	9a2f      	ldr	r2, [sp, #188]	@ 0xbc
 8015ff0:	930c      	str	r3, [sp, #48]	@ 0x30
 8015ff2:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8015ff4:	6963      	ldr	r3, [r4, #20]
 8015ff6:	440b      	add	r3, r1
 8015ff8:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 8015ffc:	4408      	add	r0, r1
 8015ffe:	b200      	sxth	r0, r0
 8016000:	4283      	cmp	r3, r0
 8016002:	900d      	str	r0, [sp, #52]	@ 0x34
 8016004:	f280 80dd 	bge.w	80161c2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x34e>
 8016008:	428b      	cmp	r3, r1
 801600a:	da08      	bge.n	801601e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 801600c:	2a00      	cmp	r2, #0
 801600e:	dd06      	ble.n	801601e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 8016010:	1acb      	subs	r3, r1, r3
 8016012:	429a      	cmp	r2, r3
 8016014:	f2c0 80e4 	blt.w	80161e0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36c>
 8016018:	2b00      	cmp	r3, #0
 801601a:	f300 80e2 	bgt.w	80161e2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36e>
 801601e:	6967      	ldr	r7, [r4, #20]
 8016020:	f10d 0850 	add.w	r8, sp, #80	@ 0x50
 8016024:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8016026:	443b      	add	r3, r7
 8016028:	461f      	mov	r7, r3
 801602a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801602c:	1bdf      	subs	r7, r3, r7
 801602e:	4297      	cmp	r7, r2
 8016030:	bfa8      	it	ge
 8016032:	4617      	movge	r7, r2
 8016034:	2f00      	cmp	r7, #0
 8016036:	f340 8166 	ble.w	8016306 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x492>
 801603a:	9b64      	ldr	r3, [sp, #400]	@ 0x190
 801603c:	6829      	ldr	r1, [r5, #0]
 801603e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8016042:	f9bb 3000 	ldrsh.w	r3, [fp]
 8016046:	4411      	add	r1, r2
 8016048:	6820      	ldr	r0, [r4, #0]
 801604a:	4299      	cmp	r1, r3
 801604c:	dd1a      	ble.n	8016084 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 801604e:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 8016052:	4402      	add	r2, r0
 8016054:	440b      	add	r3, r1
 8016056:	b21b      	sxth	r3, r3
 8016058:	429a      	cmp	r2, r3
 801605a:	dc13      	bgt.n	8016084 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 801605c:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801605e:	a912      	add	r1, sp, #72	@ 0x48
 8016060:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8016062:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8016064:	681b      	ldr	r3, [r3, #0]
 8016066:	9206      	str	r2, [sp, #24]
 8016068:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801606a:	9500      	str	r5, [sp, #0]
 801606c:	9205      	str	r2, [sp, #20]
 801606e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8016070:	e9cd b203 	strd	fp, r2, [sp, #12]
 8016074:	9a64      	ldr	r2, [sp, #400]	@ 0x190
 8016076:	e9cd 8201 	strd	r8, r2, [sp, #4]
 801607a:	aa49      	add	r2, sp, #292	@ 0x124
 801607c:	f8d3 9048 	ldr.w	r9, [r3, #72]	@ 0x48
 8016080:	4623      	mov	r3, r4
 8016082:	47c8      	blx	r9
 8016084:	ed94 7a0a 	vldr	s14, [r4, #40]	@ 0x28
 8016088:	edd4 7a0b 	vldr	s15, [r4, #44]	@ 0x2c
 801608c:	edd4 6a0e 	vldr	s13, [r4, #56]	@ 0x38
 8016090:	ee37 7a27 	vadd.f32	s14, s14, s15
 8016094:	edd4 7a0d 	vldr	s15, [r4, #52]	@ 0x34
 8016098:	68a1      	ldr	r1, [r4, #8]
 801609a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801609e:	ed94 6a08 	vldr	s12, [r4, #32]
 80160a2:	edd4 6a07 	vldr	s13, [r4, #28]
 80160a6:	ed84 7a0a 	vstr	s14, [r4, #40]	@ 0x28
 80160aa:	ee76 6a86 	vadd.f32	s13, s13, s12
 80160ae:	edc4 7a0d 	vstr	s15, [r4, #52]	@ 0x34
 80160b2:	e9d4 2300 	ldrd	r2, r3, [r4]
 80160b6:	edc4 6a07 	vstr	s13, [r4, #28]
 80160ba:	441a      	add	r2, r3
 80160bc:	6963      	ldr	r3, [r4, #20]
 80160be:	3301      	adds	r3, #1
 80160c0:	6022      	str	r2, [r4, #0]
 80160c2:	6163      	str	r3, [r4, #20]
 80160c4:	69a3      	ldr	r3, [r4, #24]
 80160c6:	3b01      	subs	r3, #1
 80160c8:	61a3      	str	r3, [r4, #24]
 80160ca:	6923      	ldr	r3, [r4, #16]
 80160cc:	440b      	add	r3, r1
 80160ce:	68e1      	ldr	r1, [r4, #12]
 80160d0:	428b      	cmp	r3, r1
 80160d2:	6123      	str	r3, [r4, #16]
 80160d4:	db15      	blt.n	8016102 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x28e>
 80160d6:	ed94 6a09 	vldr	s12, [r4, #36]	@ 0x24
 80160da:	3201      	adds	r2, #1
 80160dc:	1a5b      	subs	r3, r3, r1
 80160de:	ee76 6a26 	vadd.f32	s13, s12, s13
 80160e2:	6022      	str	r2, [r4, #0]
 80160e4:	6123      	str	r3, [r4, #16]
 80160e6:	edc4 6a07 	vstr	s13, [r4, #28]
 80160ea:	edd4 6a0c 	vldr	s13, [r4, #48]	@ 0x30
 80160ee:	ee36 7a87 	vadd.f32	s14, s13, s14
 80160f2:	ed84 7a0a 	vstr	s14, [r4, #40]	@ 0x28
 80160f6:	ed94 7a0f 	vldr	s14, [r4, #60]	@ 0x3c
 80160fa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80160fe:	edc4 7a0d 	vstr	s15, [r4, #52]	@ 0x34
 8016102:	ed95 7a0a 	vldr	s14, [r5, #40]	@ 0x28
 8016106:	edd5 7a0b 	vldr	s15, [r5, #44]	@ 0x2c
 801610a:	edd5 6a0e 	vldr	s13, [r5, #56]	@ 0x38
 801610e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8016112:	edd5 7a0d 	vldr	s15, [r5, #52]	@ 0x34
 8016116:	68a9      	ldr	r1, [r5, #8]
 8016118:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801611c:	ed95 6a08 	vldr	s12, [r5, #32]
 8016120:	edd5 6a07 	vldr	s13, [r5, #28]
 8016124:	ed85 7a0a 	vstr	s14, [r5, #40]	@ 0x28
 8016128:	ee76 6a86 	vadd.f32	s13, s13, s12
 801612c:	edc5 7a0d 	vstr	s15, [r5, #52]	@ 0x34
 8016130:	e9d5 2300 	ldrd	r2, r3, [r5]
 8016134:	edc5 6a07 	vstr	s13, [r5, #28]
 8016138:	441a      	add	r2, r3
 801613a:	696b      	ldr	r3, [r5, #20]
 801613c:	3301      	adds	r3, #1
 801613e:	602a      	str	r2, [r5, #0]
 8016140:	616b      	str	r3, [r5, #20]
 8016142:	69ab      	ldr	r3, [r5, #24]
 8016144:	3b01      	subs	r3, #1
 8016146:	61ab      	str	r3, [r5, #24]
 8016148:	692b      	ldr	r3, [r5, #16]
 801614a:	440b      	add	r3, r1
 801614c:	68e9      	ldr	r1, [r5, #12]
 801614e:	428b      	cmp	r3, r1
 8016150:	612b      	str	r3, [r5, #16]
 8016152:	db15      	blt.n	8016180 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x30c>
 8016154:	ed95 6a09 	vldr	s12, [r5, #36]	@ 0x24
 8016158:	3201      	adds	r2, #1
 801615a:	1a5b      	subs	r3, r3, r1
 801615c:	ee76 6a26 	vadd.f32	s13, s12, s13
 8016160:	602a      	str	r2, [r5, #0]
 8016162:	612b      	str	r3, [r5, #16]
 8016164:	edc5 6a07 	vstr	s13, [r5, #28]
 8016168:	edd5 6a0c 	vldr	s13, [r5, #48]	@ 0x30
 801616c:	ee36 7a87 	vadd.f32	s14, s13, s14
 8016170:	ed85 7a0a 	vstr	s14, [r5, #40]	@ 0x28
 8016174:	ed95 7a0f 	vldr	s14, [r5, #60]	@ 0x3c
 8016178:	ee77 7a27 	vadd.f32	s15, s14, s15
 801617c:	edc5 7a0d 	vstr	s15, [r5, #52]	@ 0x34
 8016180:	3f01      	subs	r7, #1
 8016182:	e757      	b.n	8016034 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1c0>
 8016184:	4299      	cmp	r1, r3
 8016186:	dc13      	bgt.n	80161b0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x33c>
 8016188:	429a      	cmp	r2, r3
 801618a:	da14      	bge.n	80161b6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x342>
 801618c:	2502      	movs	r5, #2
 801618e:	2703      	movs	r7, #3
 8016190:	f04f 0800 	mov.w	r8, #0
 8016194:	46a9      	mov	r9, r5
 8016196:	f04f 0a01 	mov.w	sl, #1
 801619a:	e6ef      	b.n	8015f7c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 801619c:	2501      	movs	r5, #1
 801619e:	2700      	movs	r7, #0
 80161a0:	46a9      	mov	r9, r5
 80161a2:	46b8      	mov	r8, r7
 80161a4:	f04f 0a02 	mov.w	sl, #2
 80161a8:	e6e8      	b.n	8015f7c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 80161aa:	2501      	movs	r5, #1
 80161ac:	2702      	movs	r7, #2
 80161ae:	e6e1      	b.n	8015f74 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x100>
 80161b0:	2500      	movs	r5, #0
 80161b2:	2701      	movs	r7, #1
 80161b4:	e7f4      	b.n	80161a0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x32c>
 80161b6:	2702      	movs	r7, #2
 80161b8:	2503      	movs	r5, #3
 80161ba:	f04f 0900 	mov.w	r9, #0
 80161be:	46b8      	mov	r8, r7
 80161c0:	e7e9      	b.n	8016196 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x322>
 80161c2:	4613      	mov	r3, r2
 80161c4:	e728      	b.n	8016018 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1a4>
 80161c6:	bf00      	nop
 80161c8:	24028e18 	.word	0x24028e18
 80161cc:	fffd8f01 	.word	0xfffd8f01
 80161d0:	00027100 	.word	0x00027100
 80161d4:	0004e1ff 	.word	0x0004e1ff
 80161d8:	0004e1fe 	.word	0x0004e1fe
 80161dc:	24028e20 	.word	0x24028e20
 80161e0:	4613      	mov	r3, r2
 80161e2:	992b      	ldr	r1, [sp, #172]	@ 0xac
 80161e4:	469e      	mov	lr, r3
 80161e6:	9f2e      	ldr	r7, [sp, #184]	@ 0xb8
 80161e8:	469c      	mov	ip, r3
 80161ea:	9111      	str	r1, [sp, #68]	@ 0x44
 80161ec:	f04f 0900 	mov.w	r9, #0
 80161f0:	eddd 4a34 	vldr	s9, [sp, #208]	@ 0xd0
 80161f4:	ed9d 7a33 	vldr	s14, [sp, #204]	@ 0xcc
 80161f8:	ed9d 4a37 	vldr	s8, [sp, #220]	@ 0xdc
 80161fc:	eddd 7a36 	vldr	s15, [sp, #216]	@ 0xd8
 8016200:	eddd 3a31 	vldr	s7, [sp, #196]	@ 0xc4
 8016204:	eddd 6a30 	vldr	s13, [sp, #192]	@ 0xc0
 8016208:	ed9d 5a32 	vldr	s10, [sp, #200]	@ 0xc8
 801620c:	eddd 5a35 	vldr	s11, [sp, #212]	@ 0xd4
 8016210:	ed9d 6a38 	vldr	s12, [sp, #224]	@ 0xe0
 8016214:	e9dd 0a29 	ldrd	r0, sl, [sp, #164]	@ 0xa4
 8016218:	e9dd 812c 	ldrd	r8, r1, [sp, #176]	@ 0xb0
 801621c:	f1bc 0f00 	cmp.w	ip, #0
 8016220:	d147      	bne.n	80162b2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x43e>
 8016222:	eb03 0c07 	add.w	ip, r3, r7
 8016226:	1ad7      	subs	r7, r2, r3
 8016228:	f1b9 0f00 	cmp.w	r9, #0
 801622c:	d009      	beq.n	8016242 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3ce>
 801622e:	9029      	str	r0, [sp, #164]	@ 0xa4
 8016230:	ed8d 7a33 	vstr	s14, [sp, #204]	@ 0xcc
 8016234:	edcd 7a36 	vstr	s15, [sp, #216]	@ 0xd8
 8016238:	edcd 6a30 	vstr	s13, [sp, #192]	@ 0xc0
 801623c:	912d      	str	r1, [sp, #180]	@ 0xb4
 801623e:	e9cd c72e 	strd	ip, r7, [sp, #184]	@ 0xb8
 8016242:	991b      	ldr	r1, [sp, #108]	@ 0x6c
 8016244:	f04f 0800 	mov.w	r8, #0
 8016248:	eddd 4a24 	vldr	s9, [sp, #144]	@ 0x90
 801624c:	9111      	str	r1, [sp, #68]	@ 0x44
 801624e:	eddd 6a23 	vldr	s13, [sp, #140]	@ 0x8c
 8016252:	ed9d 4a27 	vldr	s8, [sp, #156]	@ 0x9c
 8016256:	ed9d 7a26 	vldr	s14, [sp, #152]	@ 0x98
 801625a:	eddd 3a21 	vldr	s7, [sp, #132]	@ 0x84
 801625e:	eddd 7a20 	vldr	s15, [sp, #128]	@ 0x80
 8016262:	ed9d 5a22 	vldr	s10, [sp, #136]	@ 0x88
 8016266:	eddd 5a25 	vldr	s11, [sp, #148]	@ 0x94
 801626a:	ed9d 6a28 	vldr	s12, [sp, #160]	@ 0xa0
 801626e:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	@ 0x64
 8016272:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	@ 0x78
 8016276:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	@ 0x70
 801627a:	f1be 0f00 	cmp.w	lr, #0
 801627e:	d031      	beq.n	80162e4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x470>
 8016280:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 8016282:	4450      	add	r0, sl
 8016284:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8016288:	4431      	add	r1, r6
 801628a:	ee37 7a04 	vadd.f32	s14, s14, s8
 801628e:	ee77 7aa3 	vadd.f32	s15, s15, s7
 8016292:	4549      	cmp	r1, r9
 8016294:	db08      	blt.n	80162a8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x434>
 8016296:	ee77 7a85 	vadd.f32	s15, s15, s10
 801629a:	3001      	adds	r0, #1
 801629c:	ee76 6aa5 	vadd.f32	s13, s13, s11
 80162a0:	eba1 0109 	sub.w	r1, r1, r9
 80162a4:	ee37 7a06 	vadd.f32	s14, s14, s12
 80162a8:	f10e 3eff 	add.w	lr, lr, #4294967295
 80162ac:	f04f 0801 	mov.w	r8, #1
 80162b0:	e7e3      	b.n	801627a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x406>
 80162b2:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 80162b4:	4450      	add	r0, sl
 80162b6:	ee37 7a24 	vadd.f32	s14, s14, s9
 80162ba:	4431      	add	r1, r6
 80162bc:	ee77 7a84 	vadd.f32	s15, s15, s8
 80162c0:	ee76 6aa3 	vadd.f32	s13, s13, s7
 80162c4:	4541      	cmp	r1, r8
 80162c6:	db08      	blt.n	80162da <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x466>
 80162c8:	ee76 6a85 	vadd.f32	s13, s13, s10
 80162cc:	3001      	adds	r0, #1
 80162ce:	ee37 7a25 	vadd.f32	s14, s14, s11
 80162d2:	eba1 0108 	sub.w	r1, r1, r8
 80162d6:	ee77 7a86 	vadd.f32	s15, s15, s12
 80162da:	f10c 3cff 	add.w	ip, ip, #4294967295
 80162de:	f04f 0901 	mov.w	r9, #1
 80162e2:	e79b      	b.n	801621c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3a8>
 80162e4:	449c      	add	ip, r3
 80162e6:	1aff      	subs	r7, r7, r3
 80162e8:	f1b8 0f00 	cmp.w	r8, #0
 80162ec:	d009      	beq.n	8016302 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x48e>
 80162ee:	9019      	str	r0, [sp, #100]	@ 0x64
 80162f0:	edcd 6a23 	vstr	s13, [sp, #140]	@ 0x8c
 80162f4:	ed8d 7a26 	vstr	s14, [sp, #152]	@ 0x98
 80162f8:	edcd 7a20 	vstr	s15, [sp, #128]	@ 0x80
 80162fc:	911d      	str	r1, [sp, #116]	@ 0x74
 80162fe:	e9cd c71e 	strd	ip, r7, [sp, #120]	@ 0x78
 8016302:	1ad2      	subs	r2, r2, r3
 8016304:	e68b      	b.n	801601e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 8016306:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8016308:	9a3f      	ldr	r2, [sp, #252]	@ 0xfc
 801630a:	2b00      	cmp	r3, #0
 801630c:	f000 80d1 	beq.w	80164b2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63e>
 8016310:	ad19      	add	r5, sp, #100	@ 0x64
 8016312:	ac39      	add	r4, sp, #228	@ 0xe4
 8016314:	9b64      	ldr	r3, [sp, #400]	@ 0x190
 8016316:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 801631a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801631e:	930c      	str	r3, [sp, #48]	@ 0x30
 8016320:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8016322:	6963      	ldr	r3, [r4, #20]
 8016324:	440b      	add	r3, r1
 8016326:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 801632a:	4408      	add	r0, r1
 801632c:	b200      	sxth	r0, r0
 801632e:	4283      	cmp	r3, r0
 8016330:	900d      	str	r0, [sp, #52]	@ 0x34
 8016332:	f280 80c1 	bge.w	80164b8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x644>
 8016336:	428b      	cmp	r3, r1
 8016338:	da08      	bge.n	801634c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 801633a:	2a00      	cmp	r2, #0
 801633c:	dd06      	ble.n	801634c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 801633e:	1acb      	subs	r3, r1, r3
 8016340:	429a      	cmp	r2, r3
 8016342:	f2c0 80bb 	blt.w	80164bc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x648>
 8016346:	2b00      	cmp	r3, #0
 8016348:	f300 80b9 	bgt.w	80164be <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x64a>
 801634c:	6967      	ldr	r7, [r4, #20]
 801634e:	f10d 0850 	add.w	r8, sp, #80	@ 0x50
 8016352:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8016354:	443b      	add	r3, r7
 8016356:	461f      	mov	r7, r3
 8016358:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801635a:	1bdf      	subs	r7, r3, r7
 801635c:	4297      	cmp	r7, r2
 801635e:	bfa8      	it	ge
 8016360:	4617      	movge	r7, r2
 8016362:	2f00      	cmp	r7, #0
 8016364:	f340 813c 	ble.w	80165e0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x76c>
 8016368:	9b64      	ldr	r3, [sp, #400]	@ 0x190
 801636a:	6829      	ldr	r1, [r5, #0]
 801636c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8016370:	f9bb 3000 	ldrsh.w	r3, [fp]
 8016374:	4411      	add	r1, r2
 8016376:	6820      	ldr	r0, [r4, #0]
 8016378:	4299      	cmp	r1, r3
 801637a:	dd1a      	ble.n	80163b2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 801637c:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 8016380:	4402      	add	r2, r0
 8016382:	440b      	add	r3, r1
 8016384:	b21b      	sxth	r3, r3
 8016386:	429a      	cmp	r2, r3
 8016388:	dc13      	bgt.n	80163b2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 801638a:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801638c:	a912      	add	r1, sp, #72	@ 0x48
 801638e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8016390:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8016392:	681b      	ldr	r3, [r3, #0]
 8016394:	9206      	str	r2, [sp, #24]
 8016396:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8016398:	9500      	str	r5, [sp, #0]
 801639a:	9205      	str	r2, [sp, #20]
 801639c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801639e:	e9cd b203 	strd	fp, r2, [sp, #12]
 80163a2:	9a64      	ldr	r2, [sp, #400]	@ 0x190
 80163a4:	e9cd 8201 	strd	r8, r2, [sp, #4]
 80163a8:	aa49      	add	r2, sp, #292	@ 0x124
 80163aa:	f8d3 9048 	ldr.w	r9, [r3, #72]	@ 0x48
 80163ae:	4623      	mov	r3, r4
 80163b0:	47c8      	blx	r9
 80163b2:	ed94 7a0a 	vldr	s14, [r4, #40]	@ 0x28
 80163b6:	edd4 7a0b 	vldr	s15, [r4, #44]	@ 0x2c
 80163ba:	edd4 6a0e 	vldr	s13, [r4, #56]	@ 0x38
 80163be:	ee37 7a27 	vadd.f32	s14, s14, s15
 80163c2:	edd4 7a0d 	vldr	s15, [r4, #52]	@ 0x34
 80163c6:	68a1      	ldr	r1, [r4, #8]
 80163c8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80163cc:	ed94 6a08 	vldr	s12, [r4, #32]
 80163d0:	edd4 6a07 	vldr	s13, [r4, #28]
 80163d4:	ed84 7a0a 	vstr	s14, [r4, #40]	@ 0x28
 80163d8:	ee76 6a86 	vadd.f32	s13, s13, s12
 80163dc:	edc4 7a0d 	vstr	s15, [r4, #52]	@ 0x34
 80163e0:	e9d4 2300 	ldrd	r2, r3, [r4]
 80163e4:	edc4 6a07 	vstr	s13, [r4, #28]
 80163e8:	441a      	add	r2, r3
 80163ea:	6963      	ldr	r3, [r4, #20]
 80163ec:	3301      	adds	r3, #1
 80163ee:	6022      	str	r2, [r4, #0]
 80163f0:	6163      	str	r3, [r4, #20]
 80163f2:	69a3      	ldr	r3, [r4, #24]
 80163f4:	3b01      	subs	r3, #1
 80163f6:	61a3      	str	r3, [r4, #24]
 80163f8:	6923      	ldr	r3, [r4, #16]
 80163fa:	440b      	add	r3, r1
 80163fc:	68e1      	ldr	r1, [r4, #12]
 80163fe:	428b      	cmp	r3, r1
 8016400:	6123      	str	r3, [r4, #16]
 8016402:	db15      	blt.n	8016430 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x5bc>
 8016404:	ed94 6a09 	vldr	s12, [r4, #36]	@ 0x24
 8016408:	3201      	adds	r2, #1
 801640a:	1a5b      	subs	r3, r3, r1
 801640c:	ee76 6a26 	vadd.f32	s13, s12, s13
 8016410:	6022      	str	r2, [r4, #0]
 8016412:	6123      	str	r3, [r4, #16]
 8016414:	edc4 6a07 	vstr	s13, [r4, #28]
 8016418:	edd4 6a0c 	vldr	s13, [r4, #48]	@ 0x30
 801641c:	ee36 7a87 	vadd.f32	s14, s13, s14
 8016420:	ed84 7a0a 	vstr	s14, [r4, #40]	@ 0x28
 8016424:	ed94 7a0f 	vldr	s14, [r4, #60]	@ 0x3c
 8016428:	ee77 7a27 	vadd.f32	s15, s14, s15
 801642c:	edc4 7a0d 	vstr	s15, [r4, #52]	@ 0x34
 8016430:	ed95 7a0a 	vldr	s14, [r5, #40]	@ 0x28
 8016434:	edd5 7a0b 	vldr	s15, [r5, #44]	@ 0x2c
 8016438:	edd5 6a0e 	vldr	s13, [r5, #56]	@ 0x38
 801643c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8016440:	edd5 7a0d 	vldr	s15, [r5, #52]	@ 0x34
 8016444:	68a9      	ldr	r1, [r5, #8]
 8016446:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801644a:	ed95 6a08 	vldr	s12, [r5, #32]
 801644e:	edd5 6a07 	vldr	s13, [r5, #28]
 8016452:	ed85 7a0a 	vstr	s14, [r5, #40]	@ 0x28
 8016456:	ee76 6a86 	vadd.f32	s13, s13, s12
 801645a:	edc5 7a0d 	vstr	s15, [r5, #52]	@ 0x34
 801645e:	e9d5 2300 	ldrd	r2, r3, [r5]
 8016462:	edc5 6a07 	vstr	s13, [r5, #28]
 8016466:	441a      	add	r2, r3
 8016468:	696b      	ldr	r3, [r5, #20]
 801646a:	3301      	adds	r3, #1
 801646c:	602a      	str	r2, [r5, #0]
 801646e:	616b      	str	r3, [r5, #20]
 8016470:	69ab      	ldr	r3, [r5, #24]
 8016472:	3b01      	subs	r3, #1
 8016474:	61ab      	str	r3, [r5, #24]
 8016476:	692b      	ldr	r3, [r5, #16]
 8016478:	440b      	add	r3, r1
 801647a:	68e9      	ldr	r1, [r5, #12]
 801647c:	428b      	cmp	r3, r1
 801647e:	612b      	str	r3, [r5, #16]
 8016480:	db15      	blt.n	80164ae <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63a>
 8016482:	ed95 6a09 	vldr	s12, [r5, #36]	@ 0x24
 8016486:	3201      	adds	r2, #1
 8016488:	1a5b      	subs	r3, r3, r1
 801648a:	ee76 6a26 	vadd.f32	s13, s12, s13
 801648e:	602a      	str	r2, [r5, #0]
 8016490:	612b      	str	r3, [r5, #16]
 8016492:	edc5 6a07 	vstr	s13, [r5, #28]
 8016496:	edd5 6a0c 	vldr	s13, [r5, #48]	@ 0x30
 801649a:	ee36 7a87 	vadd.f32	s14, s13, s14
 801649e:	ed85 7a0a 	vstr	s14, [r5, #40]	@ 0x28
 80164a2:	ed95 7a0f 	vldr	s14, [r5, #60]	@ 0x3c
 80164a6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80164aa:	edc5 7a0d 	vstr	s15, [r5, #52]	@ 0x34
 80164ae:	3f01      	subs	r7, #1
 80164b0:	e757      	b.n	8016362 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4ee>
 80164b2:	ad39      	add	r5, sp, #228	@ 0xe4
 80164b4:	ac19      	add	r4, sp, #100	@ 0x64
 80164b6:	e72d      	b.n	8016314 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4a0>
 80164b8:	4613      	mov	r3, r2
 80164ba:	e744      	b.n	8016346 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d2>
 80164bc:	4613      	mov	r3, r2
 80164be:	9e3b      	ldr	r6, [sp, #236]	@ 0xec
 80164c0:	469e      	mov	lr, r3
 80164c2:	f8dd c0f8 	ldr.w	ip, [sp, #248]	@ 0xf8
 80164c6:	461f      	mov	r7, r3
 80164c8:	ed9d 7a43 	vldr	s14, [sp, #268]	@ 0x10c
 80164cc:	f04f 0900 	mov.w	r9, #0
 80164d0:	eddd 4a44 	vldr	s9, [sp, #272]	@ 0x110
 80164d4:	eddd 7a46 	vldr	s15, [sp, #280]	@ 0x118
 80164d8:	ed9d 4a47 	vldr	s8, [sp, #284]	@ 0x11c
 80164dc:	eddd 6a40 	vldr	s13, [sp, #256]	@ 0x100
 80164e0:	eddd 3a41 	vldr	s7, [sp, #260]	@ 0x104
 80164e4:	993d      	ldr	r1, [sp, #244]	@ 0xf4
 80164e6:	f8dd 80f0 	ldr.w	r8, [sp, #240]	@ 0xf0
 80164ea:	ed9d 5a42 	vldr	s10, [sp, #264]	@ 0x108
 80164ee:	eddd 5a45 	vldr	s11, [sp, #276]	@ 0x114
 80164f2:	ed9d 6a48 	vldr	s12, [sp, #288]	@ 0x120
 80164f6:	960e      	str	r6, [sp, #56]	@ 0x38
 80164f8:	e9dd 0a39 	ldrd	r0, sl, [sp, #228]	@ 0xe4
 80164fc:	2f00      	cmp	r7, #0
 80164fe:	d146      	bne.n	801658e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x71a>
 8016500:	449c      	add	ip, r3
 8016502:	1ad7      	subs	r7, r2, r3
 8016504:	f1b9 0f00 	cmp.w	r9, #0
 8016508:	d009      	beq.n	801651e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6aa>
 801650a:	9039      	str	r0, [sp, #228]	@ 0xe4
 801650c:	913d      	str	r1, [sp, #244]	@ 0xf4
 801650e:	edcd 6a40 	vstr	s13, [sp, #256]	@ 0x100
 8016512:	ed8d 7a43 	vstr	s14, [sp, #268]	@ 0x10c
 8016516:	edcd 7a46 	vstr	s15, [sp, #280]	@ 0x118
 801651a:	e9cd c73e 	strd	ip, r7, [sp, #248]	@ 0xf8
 801651e:	991b      	ldr	r1, [sp, #108]	@ 0x6c
 8016520:	f04f 0800 	mov.w	r8, #0
 8016524:	eddd 4a24 	vldr	s9, [sp, #144]	@ 0x90
 8016528:	910e      	str	r1, [sp, #56]	@ 0x38
 801652a:	eddd 6a23 	vldr	s13, [sp, #140]	@ 0x8c
 801652e:	ed9d 4a27 	vldr	s8, [sp, #156]	@ 0x9c
 8016532:	ed9d 7a26 	vldr	s14, [sp, #152]	@ 0x98
 8016536:	eddd 3a21 	vldr	s7, [sp, #132]	@ 0x84
 801653a:	eddd 7a20 	vldr	s15, [sp, #128]	@ 0x80
 801653e:	ed9d 5a22 	vldr	s10, [sp, #136]	@ 0x88
 8016542:	eddd 5a25 	vldr	s11, [sp, #148]	@ 0x94
 8016546:	ed9d 6a28 	vldr	s12, [sp, #160]	@ 0xa0
 801654a:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	@ 0x64
 801654e:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	@ 0x78
 8016552:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	@ 0x70
 8016556:	f1be 0f00 	cmp.w	lr, #0
 801655a:	d030      	beq.n	80165be <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x74a>
 801655c:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
 801655e:	4450      	add	r0, sl
 8016560:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8016564:	4431      	add	r1, r6
 8016566:	ee37 7a04 	vadd.f32	s14, s14, s8
 801656a:	ee77 7aa3 	vadd.f32	s15, s15, s7
 801656e:	4549      	cmp	r1, r9
 8016570:	db08      	blt.n	8016584 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x710>
 8016572:	ee77 7a85 	vadd.f32	s15, s15, s10
 8016576:	3001      	adds	r0, #1
 8016578:	ee76 6aa5 	vadd.f32	s13, s13, s11
 801657c:	eba1 0109 	sub.w	r1, r1, r9
 8016580:	ee37 7a06 	vadd.f32	s14, s14, s12
 8016584:	f10e 3eff 	add.w	lr, lr, #4294967295
 8016588:	f04f 0801 	mov.w	r8, #1
 801658c:	e7e3      	b.n	8016556 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6e2>
 801658e:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
 8016590:	4450      	add	r0, sl
 8016592:	ee37 7a24 	vadd.f32	s14, s14, s9
 8016596:	4431      	add	r1, r6
 8016598:	ee77 7a84 	vadd.f32	s15, s15, s8
 801659c:	ee76 6aa3 	vadd.f32	s13, s13, s7
 80165a0:	4541      	cmp	r1, r8
 80165a2:	db08      	blt.n	80165b6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x742>
 80165a4:	ee76 6a85 	vadd.f32	s13, s13, s10
 80165a8:	3001      	adds	r0, #1
 80165aa:	ee37 7a25 	vadd.f32	s14, s14, s11
 80165ae:	eba1 0108 	sub.w	r1, r1, r8
 80165b2:	ee77 7a86 	vadd.f32	s15, s15, s12
 80165b6:	3f01      	subs	r7, #1
 80165b8:	f04f 0901 	mov.w	r9, #1
 80165bc:	e79e      	b.n	80164fc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x688>
 80165be:	449c      	add	ip, r3
 80165c0:	1aff      	subs	r7, r7, r3
 80165c2:	f1b8 0f00 	cmp.w	r8, #0
 80165c6:	d009      	beq.n	80165dc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x768>
 80165c8:	9019      	str	r0, [sp, #100]	@ 0x64
 80165ca:	edcd 6a23 	vstr	s13, [sp, #140]	@ 0x8c
 80165ce:	ed8d 7a26 	vstr	s14, [sp, #152]	@ 0x98
 80165d2:	edcd 7a20 	vstr	s15, [sp, #128]	@ 0x80
 80165d6:	911d      	str	r1, [sp, #116]	@ 0x74
 80165d8:	e9cd c71e 	strd	ip, r7, [sp, #120]	@ 0x78
 80165dc:	1ad2      	subs	r2, r2, r3
 80165de:	e6b5      	b.n	801634c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 80165e0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80165e2:	681b      	ldr	r3, [r3, #0]
 80165e4:	b923      	cbnz	r3, 80165f0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80165e6:	4b04      	ldr	r3, [pc, #16]	@ (80165f8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x784>)
 80165e8:	6818      	ldr	r0, [r3, #0]
 80165ea:	6803      	ldr	r3, [r0, #0]
 80165ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80165ee:	4798      	blx	r3
 80165f0:	b05b      	add	sp, #364	@ 0x16c
 80165f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80165f6:	bf00      	nop
 80165f8:	24028e20 	.word	0x24028e20

080165fc <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE>:
 80165fc:	b570      	push	{r4, r5, r6, lr}
 80165fe:	4604      	mov	r4, r0
 8016600:	2500      	movs	r5, #0
 8016602:	9805      	ldr	r0, [sp, #20]
 8016604:	f89d 601c 	ldrb.w	r6, [sp, #28]
 8016608:	6061      	str	r1, [r4, #4]
 801660a:	8263      	strh	r3, [r4, #18]
 801660c:	f89d 1010 	ldrb.w	r1, [sp, #16]
 8016610:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 8016614:	8025      	strh	r5, [r4, #0]
 8016616:	7221      	strb	r1, [r4, #8]
 8016618:	7266      	strb	r6, [r4, #9]
 801661a:	60e0      	str	r0, [r4, #12]
 801661c:	8222      	strh	r2, [r4, #16]
 801661e:	82a3      	strh	r3, [r4, #20]
 8016620:	82e5      	strh	r5, [r4, #22]
 8016622:	8325      	strh	r5, [r4, #24]
 8016624:	8365      	strh	r5, [r4, #26]
 8016626:	83a5      	strh	r5, [r4, #28]
 8016628:	83e5      	strh	r5, [r4, #30]
 801662a:	8425      	strh	r5, [r4, #32]
 801662c:	f884 5022 	strb.w	r5, [r4, #34]	@ 0x22
 8016630:	b32e      	cbz	r6, 801667e <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE+0x82>
 8016632:	6803      	ldr	r3, [r0, #0]
 8016634:	695b      	ldr	r3, [r3, #20]
 8016636:	4798      	blx	r3
 8016638:	4606      	mov	r6, r0
 801663a:	b300      	cbz	r0, 801667e <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE+0x82>
 801663c:	68e0      	ldr	r0, [r4, #12]
 801663e:	4631      	mov	r1, r6
 8016640:	6803      	ldr	r3, [r0, #0]
 8016642:	68db      	ldr	r3, [r3, #12]
 8016644:	4798      	blx	r3
 8016646:	4605      	mov	r5, r0
 8016648:	b1c8      	cbz	r0, 801667e <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE+0x82>
 801664a:	7b43      	ldrb	r3, [r0, #13]
 801664c:	7a82      	ldrb	r2, [r0, #10]
 801664e:	005b      	lsls	r3, r3, #1
 8016650:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8016654:	4313      	orrs	r3, r2
 8016656:	8423      	strh	r3, [r4, #32]
 8016658:	7a63      	ldrb	r3, [r4, #9]
 801665a:	2b06      	cmp	r3, #6
 801665c:	d10f      	bne.n	801667e <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE+0x82>
 801665e:	68e0      	ldr	r0, [r4, #12]
 8016660:	462a      	mov	r2, r5
 8016662:	4631      	mov	r1, r6
 8016664:	6803      	ldr	r3, [r0, #0]
 8016666:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8016668:	4798      	blx	r3
 801666a:	7b6b      	ldrb	r3, [r5, #13]
 801666c:	005b      	lsls	r3, r3, #1
 801666e:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 8016672:	7aab      	ldrb	r3, [r5, #10]
 8016674:	4313      	orrs	r3, r2
 8016676:	4418      	add	r0, r3
 8016678:	8c23      	ldrh	r3, [r4, #32]
 801667a:	4418      	add	r0, r3
 801667c:	8420      	strh	r0, [r4, #32]
 801667e:	4620      	mov	r0, r4
 8016680:	bd70      	pop	{r4, r5, r6, pc}

08016682 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>:
 8016682:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016686:	2400      	movs	r4, #0
 8016688:	b085      	sub	sp, #20
 801668a:	4681      	mov	r9, r0
 801668c:	4688      	mov	r8, r1
 801668e:	4692      	mov	sl, r2
 8016690:	469b      	mov	fp, r3
 8016692:	4627      	mov	r7, r4
 8016694:	4625      	mov	r5, r4
 8016696:	4626      	mov	r6, r4
 8016698:	4554      	cmp	r4, sl
 801669a:	da2a      	bge.n	80166f2 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 801669c:	2300      	movs	r3, #0
 801669e:	9303      	str	r3, [sp, #12]
 80166a0:	f64f 63ff 	movw	r3, #65279	@ 0xfeff
 80166a4:	429d      	cmp	r5, r3
 80166a6:	d004      	beq.n	80166b2 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x30>
 80166a8:	f242 030b 	movw	r3, #8203	@ 0x200b
 80166ac:	429d      	cmp	r5, r3
 80166ae:	bf18      	it	ne
 80166b0:	462f      	movne	r7, r5
 80166b2:	ab03      	add	r3, sp, #12
 80166b4:	4642      	mov	r2, r8
 80166b6:	4659      	mov	r1, fp
 80166b8:	4648      	mov	r0, r9
 80166ba:	f003 fcb9 	bl	801a030 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 80166be:	4605      	mov	r5, r0
 80166c0:	b1b8      	cbz	r0, 80166f2 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 80166c2:	280a      	cmp	r0, #10
 80166c4:	d015      	beq.n	80166f2 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 80166c6:	9a03      	ldr	r2, [sp, #12]
 80166c8:	b18a      	cbz	r2, 80166ee <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x6c>
 80166ca:	7b50      	ldrb	r0, [r2, #13]
 80166cc:	4639      	mov	r1, r7
 80166ce:	7a93      	ldrb	r3, [r2, #10]
 80166d0:	0040      	lsls	r0, r0, #1
 80166d2:	8895      	ldrh	r5, [r2, #4]
 80166d4:	f400 7080 	and.w	r0, r0, #256	@ 0x100
 80166d8:	4303      	orrs	r3, r0
 80166da:	4640      	mov	r0, r8
 80166dc:	9301      	str	r3, [sp, #4]
 80166de:	f8d8 3000 	ldr.w	r3, [r8]
 80166e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80166e4:	4798      	blx	r3
 80166e6:	9b01      	ldr	r3, [sp, #4]
 80166e8:	4418      	add	r0, r3
 80166ea:	4406      	add	r6, r0
 80166ec:	b2b6      	uxth	r6, r6
 80166ee:	3401      	adds	r4, #1
 80166f0:	e7d2      	b.n	8016698 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x16>
 80166f2:	4630      	mov	r0, r6
 80166f4:	b005      	add	sp, #20
 80166f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080166fa <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>:
 80166fa:	2a02      	cmp	r2, #2
 80166fc:	b530      	push	{r4, r5, lr}
 80166fe:	d011      	beq.n	8016724 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x2a>
 8016700:	2a03      	cmp	r2, #3
 8016702:	d01c      	beq.n	801673e <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x44>
 8016704:	2a01      	cmp	r2, #1
 8016706:	d10c      	bne.n	8016722 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 8016708:	888b      	ldrh	r3, [r1, #4]
 801670a:	8801      	ldrh	r1, [r0, #0]
 801670c:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
 8016710:	1a5b      	subs	r3, r3, r1
 8016712:	8844      	ldrh	r4, [r0, #2]
 8016714:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 8016718:	1a9b      	subs	r3, r3, r2
 801671a:	8004      	strh	r4, [r0, #0]
 801671c:	8081      	strh	r1, [r0, #4]
 801671e:	8043      	strh	r3, [r0, #2]
 8016720:	80c2      	strh	r2, [r0, #6]
 8016722:	bd30      	pop	{r4, r5, pc}
 8016724:	88cb      	ldrh	r3, [r1, #6]
 8016726:	8842      	ldrh	r2, [r0, #2]
 8016728:	1a9b      	subs	r3, r3, r2
 801672a:	88c2      	ldrh	r2, [r0, #6]
 801672c:	1a9b      	subs	r3, r3, r2
 801672e:	888a      	ldrh	r2, [r1, #4]
 8016730:	8801      	ldrh	r1, [r0, #0]
 8016732:	8043      	strh	r3, [r0, #2]
 8016734:	1a52      	subs	r2, r2, r1
 8016736:	8881      	ldrh	r1, [r0, #4]
 8016738:	1a52      	subs	r2, r2, r1
 801673a:	8002      	strh	r2, [r0, #0]
 801673c:	e7f1      	b.n	8016722 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 801673e:	88cb      	ldrh	r3, [r1, #6]
 8016740:	8841      	ldrh	r1, [r0, #2]
 8016742:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 8016746:	1a5b      	subs	r3, r3, r1
 8016748:	f9b0 5000 	ldrsh.w	r5, [r0]
 801674c:	f9b0 4004 	ldrsh.w	r4, [r0, #4]
 8016750:	1a9b      	subs	r3, r3, r2
 8016752:	8045      	strh	r5, [r0, #2]
 8016754:	8082      	strh	r2, [r0, #4]
 8016756:	8003      	strh	r3, [r0, #0]
 8016758:	80c4      	strh	r4, [r0, #6]
 801675a:	e7e2      	b.n	8016722 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>

0801675c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>:
 801675c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016760:	b09f      	sub	sp, #124	@ 0x7c
 8016762:	920f      	str	r2, [sp, #60]	@ 0x3c
 8016764:	9312      	str	r3, [sp, #72]	@ 0x48
 8016766:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 8016768:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 801676a:	8812      	ldrh	r2, [r2, #0]
 801676c:	889b      	ldrh	r3, [r3, #4]
 801676e:	9d2a      	ldr	r5, [sp, #168]	@ 0xa8
 8016770:	4413      	add	r3, r2
 8016772:	900e      	str	r0, [sp, #56]	@ 0x38
 8016774:	6828      	ldr	r0, [r5, #0]
 8016776:	b21b      	sxth	r3, r3
 8016778:	9117      	str	r1, [sp, #92]	@ 0x5c
 801677a:	f89d b0ac 	ldrb.w	fp, [sp, #172]	@ 0xac
 801677e:	9311      	str	r3, [sp, #68]	@ 0x44
 8016780:	6803      	ldr	r3, [r0, #0]
 8016782:	f89d 40b8 	ldrb.w	r4, [sp, #184]	@ 0xb8
 8016786:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8016788:	4798      	blx	r3
 801678a:	682b      	ldr	r3, [r5, #0]
 801678c:	9013      	str	r0, [sp, #76]	@ 0x4c
 801678e:	7b1a      	ldrb	r2, [r3, #12]
 8016790:	7adb      	ldrb	r3, [r3, #11]
 8016792:	9215      	str	r2, [sp, #84]	@ 0x54
 8016794:	9316      	str	r3, [sp, #88]	@ 0x58
 8016796:	f9bd 60a0 	ldrsh.w	r6, [sp, #160]	@ 0xa0
 801679a:	2c00      	cmp	r4, #0
 801679c:	d067      	beq.n	801686e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x112>
 801679e:	7c2b      	ldrb	r3, [r5, #16]
 80167a0:	9a2d      	ldr	r2, [sp, #180]	@ 0xb4
 80167a2:	2b06      	cmp	r3, #6
 80167a4:	bf14      	ite	ne
 80167a6:	2301      	movne	r3, #1
 80167a8:	2302      	moveq	r3, #2
 80167aa:	4413      	add	r3, r2
 80167ac:	f04f 0900 	mov.w	r9, #0
 80167b0:	9310      	str	r3, [sp, #64]	@ 0x40
 80167b2:	464c      	mov	r4, r9
 80167b4:	f8cd 9034 	str.w	r9, [sp, #52]	@ 0x34
 80167b8:	f8cd 9030 	str.w	r9, [sp, #48]	@ 0x30
 80167bc:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80167be:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 80167c0:	4293      	cmp	r3, r2
 80167c2:	f280 808b 	bge.w	80168dc <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x180>
 80167c6:	2300      	movs	r3, #0
 80167c8:	e9cd 331c 	strd	r3, r3, [sp, #112]	@ 0x70
 80167cc:	f88d 306f 	strb.w	r3, [sp, #111]	@ 0x6f
 80167d0:	f64f 63ff 	movw	r3, #65279	@ 0xfeff
 80167d4:	429c      	cmp	r4, r3
 80167d6:	d006      	beq.n	80167e6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x8a>
 80167d8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80167da:	f242 020b 	movw	r2, #8203	@ 0x200b
 80167de:	4294      	cmp	r4, r2
 80167e0:	bf18      	it	ne
 80167e2:	4623      	movne	r3, r4
 80167e4:	930c      	str	r3, [sp, #48]	@ 0x30
 80167e6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80167e8:	992d      	ldr	r1, [sp, #180]	@ 0xb4
 80167ea:	682a      	ldr	r2, [r5, #0]
 80167ec:	428b      	cmp	r3, r1
 80167ee:	db40      	blt.n	8016872 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x116>
 80167f0:	6813      	ldr	r3, [r2, #0]
 80167f2:	4610      	mov	r0, r2
 80167f4:	695b      	ldr	r3, [r3, #20]
 80167f6:	4798      	blx	r3
 80167f8:	4604      	mov	r4, r0
 80167fa:	6828      	ldr	r0, [r5, #0]
 80167fc:	aa1d      	add	r2, sp, #116	@ 0x74
 80167fe:	4621      	mov	r1, r4
 8016800:	6803      	ldr	r3, [r0, #0]
 8016802:	689f      	ldr	r7, [r3, #8]
 8016804:	f10d 036f 	add.w	r3, sp, #111	@ 0x6f
 8016808:	47b8      	blx	r7
 801680a:	901c      	str	r0, [sp, #112]	@ 0x70
 801680c:	f64f 63ff 	movw	r3, #65279	@ 0xfeff
 8016810:	429c      	cmp	r4, r3
 8016812:	f000 80eb 	beq.w	80169ec <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x290>
 8016816:	f242 030b 	movw	r3, #8203	@ 0x200b
 801681a:	429c      	cmp	r4, r3
 801681c:	f000 80e6 	beq.w	80169ec <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x290>
 8016820:	2c00      	cmp	r4, #0
 8016822:	f000 810d 	beq.w	8016a40 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2e4>
 8016826:	2c0a      	cmp	r4, #10
 8016828:	d05e      	beq.n	80168e8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18c>
 801682a:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 801682c:	b36a      	cbz	r2, 801688a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x12e>
 801682e:	8894      	ldrh	r4, [r2, #4]
 8016830:	f1bb 0f00 	cmp.w	fp, #0
 8016834:	d03a      	beq.n	80168ac <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x150>
 8016836:	f892 900d 	ldrb.w	r9, [r2, #13]
 801683a:	f1bb 0f01 	cmp.w	fp, #1
 801683e:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8016842:	f409 7380 	and.w	r3, r9, #256	@ 0x100
 8016846:	f892 900a 	ldrb.w	r9, [r2, #10]
 801684a:	ea49 0903 	orr.w	r9, r9, r3
 801684e:	d133      	bne.n	80168b8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x15c>
 8016850:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8016852:	eba6 0609 	sub.w	r6, r6, r9
 8016856:	2b00      	cmp	r3, #0
 8016858:	d14d      	bne.n	80168f6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x19a>
 801685a:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 801685c:	eb09 0306 	add.w	r3, r9, r6
 8016860:	4413      	add	r3, r2
 8016862:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 8016864:	f9b2 2000 	ldrsh.w	r2, [r2]
 8016868:	4293      	cmp	r3, r2
 801686a:	da4e      	bge.n	801690a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1ae>
 801686c:	e036      	b.n	80168dc <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x180>
 801686e:	9b2d      	ldr	r3, [sp, #180]	@ 0xb4
 8016870:	e79c      	b.n	80167ac <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x50>
 8016872:	f10d 036f 	add.w	r3, sp, #111	@ 0x6f
 8016876:	4659      	mov	r1, fp
 8016878:	982c      	ldr	r0, [sp, #176]	@ 0xb0
 801687a:	9301      	str	r3, [sp, #4]
 801687c:	ab1d      	add	r3, sp, #116	@ 0x74
 801687e:	9300      	str	r3, [sp, #0]
 8016880:	ab1c      	add	r3, sp, #112	@ 0x70
 8016882:	f003 fc1e 	bl	801a0c2 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>
 8016886:	4604      	mov	r4, r0
 8016888:	e7c0      	b.n	801680c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xb0>
 801688a:	6828      	ldr	r0, [r5, #0]
 801688c:	6803      	ldr	r3, [r0, #0]
 801688e:	691b      	ldr	r3, [r3, #16]
 8016890:	4798      	blx	r3
 8016892:	f64f 63ff 	movw	r3, #65279	@ 0xfeff
 8016896:	4298      	cmp	r0, r3
 8016898:	f000 80a8 	beq.w	80169ec <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x290>
 801689c:	f242 030b 	movw	r3, #8203	@ 0x200b
 80168a0:	4298      	cmp	r0, r3
 80168a2:	f000 80a3 	beq.w	80169ec <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x290>
 80168a6:	f1bb 0f00 	cmp.w	fp, #0
 80168aa:	d100      	bne.n	80168ae <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x152>
 80168ac:	444e      	add	r6, r9
 80168ae:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 80168b0:	2a00      	cmp	r2, #0
 80168b2:	d1c0      	bne.n	8016836 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xda>
 80168b4:	4691      	mov	r9, r2
 80168b6:	e099      	b.n	80169ec <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x290>
 80168b8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80168ba:	2b00      	cmp	r3, #0
 80168bc:	f000 80c2 	beq.w	8016a44 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2e8>
 80168c0:	f1bb 0f00 	cmp.w	fp, #0
 80168c4:	d117      	bne.n	80168f6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x19a>
 80168c6:	6828      	ldr	r0, [r5, #0]
 80168c8:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80168ca:	6803      	ldr	r3, [r0, #0]
 80168cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80168ce:	4798      	blx	r3
 80168d0:	4406      	add	r6, r0
 80168d2:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80168d4:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80168d6:	1af3      	subs	r3, r6, r3
 80168d8:	4293      	cmp	r3, r2
 80168da:	dd16      	ble.n	801690a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1ae>
 80168dc:	2c00      	cmp	r4, #0
 80168de:	f000 80af 	beq.w	8016a40 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2e4>
 80168e2:	2c0a      	cmp	r4, #10
 80168e4:	f040 809d 	bne.w	8016a22 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2c6>
 80168e8:	240a      	movs	r4, #10
 80168ea:	fab4 f084 	clz	r0, r4
 80168ee:	0940      	lsrs	r0, r0, #5
 80168f0:	b01f      	add	sp, #124	@ 0x7c
 80168f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80168f6:	6828      	ldr	r0, [r5, #0]
 80168f8:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80168fa:	6803      	ldr	r3, [r0, #0]
 80168fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80168fe:	4798      	blx	r3
 8016900:	f1bb 0f01 	cmp.w	fp, #1
 8016904:	eba6 0600 	sub.w	r6, r6, r0
 8016908:	d0a7      	beq.n	801685a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xfe>
 801690a:	981c      	ldr	r0, [sp, #112]	@ 0x70
 801690c:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 801690e:	f990 1009 	ldrsb.w	r1, [r0, #9]
 8016912:	f9b3 8000 	ldrsh.w	r8, [r3]
 8016916:	7b43      	ldrb	r3, [r0, #13]
 8016918:	4431      	add	r1, r6
 801691a:	015b      	lsls	r3, r3, #5
 801691c:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 8016920:	7983      	ldrb	r3, [r0, #6]
 8016922:	4313      	orrs	r3, r2
 8016924:	440b      	add	r3, r1
 8016926:	4543      	cmp	r3, r8
 8016928:	db60      	blt.n	80169ec <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x290>
 801692a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801692c:	4299      	cmp	r1, r3
 801692e:	da5d      	bge.n	80169ec <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x290>
 8016930:	6828      	ldr	r0, [r5, #0]
 8016932:	45b0      	cmp	r8, r6
 8016934:	6803      	ldr	r3, [r0, #0]
 8016936:	bfcc      	ite	gt
 8016938:	eba8 0806 	subgt.w	r8, r8, r6
 801693c:	f04f 0800 	movle.w	r8, #0
 8016940:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8016942:	bfc8      	it	gt
 8016944:	fa1f f888 	uxthgt.w	r8, r8
 8016948:	4798      	blx	r3
 801694a:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 801694c:	7b53      	ldrb	r3, [r2, #13]
 801694e:	00d9      	lsls	r1, r3, #3
 8016950:	f401 7780 	and.w	r7, r1, #256	@ 0x100
 8016954:	7a11      	ldrb	r1, [r2, #8]
 8016956:	4339      	orrs	r1, r7
 8016958:	065f      	lsls	r7, r3, #25
 801695a:	9f12      	ldr	r7, [sp, #72]	@ 0x48
 801695c:	bf48      	it	mi
 801695e:	f5a1 7100 	submi.w	r1, r1, #512	@ 0x200
 8016962:	4407      	add	r7, r0
 8016964:	bf48      	it	mi
 8016966:	b209      	sxthmi	r1, r1
 8016968:	1a7f      	subs	r7, r7, r1
 801696a:	9929      	ldr	r1, [sp, #164]	@ 0xa4
 801696c:	b2bf      	uxth	r7, r7
 801696e:	f9b1 1002 	ldrsh.w	r1, [r1, #2]
 8016972:	fa0f fa87 	sxth.w	sl, r7
 8016976:	4551      	cmp	r1, sl
 8016978:	dd3c      	ble.n	80169f4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x298>
 801697a:	011b      	lsls	r3, r3, #4
 801697c:	79d0      	ldrb	r0, [r2, #7]
 801697e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8016982:	4303      	orrs	r3, r0
 8016984:	449a      	add	sl, r3
 8016986:	4551      	cmp	r1, sl
 8016988:	dc30      	bgt.n	80169ec <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x290>
 801698a:	1bcf      	subs	r7, r1, r7
 801698c:	468a      	mov	sl, r1
 801698e:	b23f      	sxth	r7, r7
 8016990:	9219      	str	r2, [sp, #100]	@ 0x64
 8016992:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8016994:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8016996:	6828      	ldr	r0, [r5, #0]
 8016998:	2a00      	cmp	r2, #0
 801699a:	d12d      	bne.n	80169f8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x29c>
 801699c:	9318      	str	r3, [sp, #96]	@ 0x60
 801699e:	b2bf      	uxth	r7, r7
 80169a0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80169a2:	6819      	ldr	r1, [r3, #0]
 80169a4:	6ccb      	ldr	r3, [r1, #76]	@ 0x4c
 80169a6:	6801      	ldr	r1, [r0, #0]
 80169a8:	9314      	str	r3, [sp, #80]	@ 0x50
 80169aa:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80169ac:	4788      	blx	r1
 80169ae:	79a9      	ldrb	r1, [r5, #6]
 80169b0:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 80169b2:	910b      	str	r1, [sp, #44]	@ 0x2c
 80169b4:	7ba9      	ldrb	r1, [r5, #14]
 80169b6:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80169b8:	910a      	str	r1, [sp, #40]	@ 0x28
 80169ba:	f89d 106f 	ldrb.w	r1, [sp, #111]	@ 0x6f
 80169be:	9109      	str	r1, [sp, #36]	@ 0x24
 80169c0:	68a9      	ldr	r1, [r5, #8]
 80169c2:	9306      	str	r3, [sp, #24]
 80169c4:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 80169c6:	9205      	str	r2, [sp, #20]
 80169c8:	9304      	str	r3, [sp, #16]
 80169ca:	f8cd a004 	str.w	sl, [sp, #4]
 80169ce:	e9cd 8702 	strd	r8, r7, [sp, #8]
 80169d2:	44b0      	add	r8, r6
 80169d4:	9f14      	ldr	r7, [sp, #80]	@ 0x50
 80169d6:	fa0f f388 	sxth.w	r3, r8
 80169da:	9300      	str	r3, [sp, #0]
 80169dc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80169de:	e9cd 0107 	strd	r0, r1, [sp, #28]
 80169e2:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 80169e4:	681a      	ldr	r2, [r3, #0]
 80169e6:	980e      	ldr	r0, [sp, #56]	@ 0x38
 80169e8:	685b      	ldr	r3, [r3, #4]
 80169ea:	47b8      	blx	r7
 80169ec:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80169ee:	3301      	adds	r3, #1
 80169f0:	930d      	str	r3, [sp, #52]	@ 0x34
 80169f2:	e6e3      	b.n	80167bc <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x60>
 80169f4:	2700      	movs	r7, #0
 80169f6:	e7cb      	b.n	8016990 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x234>
 80169f8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80169fa:	f8d2 c008 	ldr.w	ip, [r2, #8]
 80169fe:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8016a00:	f8dc 1000 	ldr.w	r1, [ip]
 8016a04:	e9cd 6204 	strd	r6, r2, [sp, #16]
 8016a08:	79aa      	ldrb	r2, [r5, #6]
 8016a0a:	9203      	str	r2, [sp, #12]
 8016a0c:	7baa      	ldrb	r2, [r5, #14]
 8016a0e:	9202      	str	r2, [sp, #8]
 8016a10:	68aa      	ldr	r2, [r5, #8]
 8016a12:	e9cd 0200 	strd	r0, r2, [sp]
 8016a16:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 8016a18:	4660      	mov	r0, ip
 8016a1a:	688f      	ldr	r7, [r1, #8]
 8016a1c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8016a1e:	47b8      	blx	r7
 8016a20:	e7e4      	b.n	80169ec <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x290>
 8016a22:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 8016a24:	3501      	adds	r5, #1
 8016a26:	9b2d      	ldr	r3, [sp, #180]	@ 0xb4
 8016a28:	429d      	cmp	r5, r3
 8016a2a:	f6bf af5e 	bge.w	80168ea <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18e>
 8016a2e:	4659      	mov	r1, fp
 8016a30:	982c      	ldr	r0, [sp, #176]	@ 0xb0
 8016a32:	f7ed fae3 	bl	8003ffc <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8016a36:	4604      	mov	r4, r0
 8016a38:	b110      	cbz	r0, 8016a40 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2e4>
 8016a3a:	280a      	cmp	r0, #10
 8016a3c:	d1f2      	bne.n	8016a24 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2c8>
 8016a3e:	e753      	b.n	80168e8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18c>
 8016a40:	2400      	movs	r4, #0
 8016a42:	e752      	b.n	80168ea <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18e>
 8016a44:	f1bb 0f00 	cmp.w	fp, #0
 8016a48:	f43f af43 	beq.w	80168d2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x176>
 8016a4c:	e75d      	b.n	801690a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1ae>

08016a4e <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>:
 8016a4e:	b530      	push	{r4, r5, lr}
 8016a50:	8ac4      	ldrh	r4, [r0, #22]
 8016a52:	8b45      	ldrh	r5, [r0, #26]
 8016a54:	8343      	strh	r3, [r0, #26]
 8016a56:	442c      	add	r4, r5
 8016a58:	1ae4      	subs	r4, r4, r3
 8016a5a:	8b83      	ldrh	r3, [r0, #28]
 8016a5c:	82c4      	strh	r4, [r0, #22]
 8016a5e:	8b04      	ldrh	r4, [r0, #24]
 8016a60:	4422      	add	r2, r4
 8016a62:	440c      	add	r4, r1
 8016a64:	1a59      	subs	r1, r3, r1
 8016a66:	83c2      	strh	r2, [r0, #30]
 8016a68:	8304      	strh	r4, [r0, #24]
 8016a6a:	8381      	strh	r1, [r0, #28]
 8016a6c:	bd30      	pop	{r4, r5, pc}

08016a6e <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>:
 8016a6e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016a72:	4604      	mov	r4, r0
 8016a74:	8a47      	ldrh	r7, [r0, #18]
 8016a76:	68c0      	ldr	r0, [r0, #12]
 8016a78:	b085      	sub	sp, #20
 8016a7a:	6803      	ldr	r3, [r0, #0]
 8016a7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8016a7e:	4798      	blx	r3
 8016a80:	f9b4 6014 	ldrsh.w	r6, [r4, #20]
 8016a84:	7a63      	ldrb	r3, [r4, #9]
 8016a86:	eb06 0640 	add.w	r6, r6, r0, lsl #1
 8016a8a:	3b01      	subs	r3, #1
 8016a8c:	42b7      	cmp	r7, r6
 8016a8e:	bfac      	ite	ge
 8016a90:	f04f 0900 	movge.w	r9, #0
 8016a94:	f04f 0901 	movlt.w	r9, #1
 8016a98:	2b05      	cmp	r3, #5
 8016a9a:	d804      	bhi.n	8016aa6 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x38>
 8016a9c:	e8df f003 	tbb	[pc, r3]
 8016aa0:	470f0854 	.word	0x470f0854
 8016aa4:	4c4c      	.short	0x4c4c
 8016aa6:	2500      	movs	r5, #0
 8016aa8:	46a9      	mov	r9, r5
 8016aaa:	462e      	mov	r6, r5
 8016aac:	462f      	mov	r7, r5
 8016aae:	e00e      	b.n	8016ace <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x60>
 8016ab0:	42b7      	cmp	r7, r6
 8016ab2:	f04f 0500 	mov.w	r5, #0
 8016ab6:	bfb4      	ite	lt
 8016ab8:	2600      	movlt	r6, #0
 8016aba:	2601      	movge	r6, #1
 8016abc:	e7f6      	b.n	8016aac <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x3e>
 8016abe:	42b7      	cmp	r7, r6
 8016ac0:	464d      	mov	r5, r9
 8016ac2:	f04f 0900 	mov.w	r9, #0
 8016ac6:	bfb4      	ite	lt
 8016ac8:	2600      	movlt	r6, #0
 8016aca:	2601      	movge	r6, #1
 8016acc:	464f      	mov	r7, r9
 8016ace:	f04f 0800 	mov.w	r8, #0
 8016ad2:	f8a4 8016 	strh.w	r8, [r4, #22]
 8016ad6:	f8a4 8018 	strh.w	r8, [r4, #24]
 8016ada:	f8cd 8004 	str.w	r8, [sp, #4]
 8016ade:	2300      	movs	r3, #0
 8016ae0:	9303      	str	r3, [sp, #12]
 8016ae2:	8823      	ldrh	r3, [r4, #0]
 8016ae4:	2b20      	cmp	r3, #32
 8016ae6:	d033      	beq.n	8016b50 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xe2>
 8016ae8:	f242 010b 	movw	r1, #8203	@ 0x200b
 8016aec:	1a5a      	subs	r2, r3, r1
 8016aee:	f1d2 0a00 	rsbs	sl, r2, #0
 8016af2:	eb4a 0a02 	adc.w	sl, sl, r2
 8016af6:	f64f 62ff 	movw	r2, #65279	@ 0xfeff
 8016afa:	4293      	cmp	r3, r2
 8016afc:	d008      	beq.n	8016b10 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xa2>
 8016afe:	428b      	cmp	r3, r1
 8016b00:	9a01      	ldr	r2, [sp, #4]
 8016b02:	bf0e      	itee	eq
 8016b04:	f04f 0a01 	moveq.w	sl, #1
 8016b08:	461a      	movne	r2, r3
 8016b0a:	f04f 0a00 	movne.w	sl, #0
 8016b0e:	9201      	str	r2, [sp, #4]
 8016b10:	ab03      	add	r3, sp, #12
 8016b12:	68e2      	ldr	r2, [r4, #12]
 8016b14:	7a21      	ldrb	r1, [r4, #8]
 8016b16:	6860      	ldr	r0, [r4, #4]
 8016b18:	f003 fa8a 	bl	801a030 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8016b1c:	8020      	strh	r0, [r4, #0]
 8016b1e:	b9d8      	cbnz	r0, 8016b58 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xea>
 8016b20:	8ba2      	ldrh	r2, [r4, #28]
 8016b22:	2300      	movs	r3, #0
 8016b24:	4611      	mov	r1, r2
 8016b26:	4620      	mov	r0, r4
 8016b28:	f7ff ff91 	bl	8016a4e <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 8016b2c:	e06e      	b.n	8016c0c <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x19e>
 8016b2e:	2500      	movs	r5, #0
 8016b30:	2701      	movs	r7, #1
 8016b32:	46a9      	mov	r9, r5
 8016b34:	462e      	mov	r6, r5
 8016b36:	e7ca      	b.n	8016ace <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x60>
 8016b38:	42b7      	cmp	r7, r6
 8016b3a:	f04f 0500 	mov.w	r5, #0
 8016b3e:	bfb4      	ite	lt
 8016b40:	2700      	movlt	r7, #0
 8016b42:	2701      	movge	r7, #1
 8016b44:	462e      	mov	r6, r5
 8016b46:	e7c2      	b.n	8016ace <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x60>
 8016b48:	2500      	movs	r5, #0
 8016b4a:	2601      	movs	r6, #1
 8016b4c:	46a9      	mov	r9, r5
 8016b4e:	e7ad      	b.n	8016aac <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x3e>
 8016b50:	9301      	str	r3, [sp, #4]
 8016b52:	f04f 0a01 	mov.w	sl, #1
 8016b56:	e7db      	b.n	8016b10 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xa2>
 8016b58:	8b63      	ldrh	r3, [r4, #26]
 8016b5a:	280a      	cmp	r0, #10
 8016b5c:	f103 0301 	add.w	r3, r3, #1
 8016b60:	8363      	strh	r3, [r4, #26]
 8016b62:	d0dd      	beq.n	8016b20 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xb2>
 8016b64:	9a03      	ldr	r2, [sp, #12]
 8016b66:	bb62      	cbnz	r2, 8016bc2 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x154>
 8016b68:	f64f 63ff 	movw	r3, #65279	@ 0xfeff
 8016b6c:	4298      	cmp	r0, r3
 8016b6e:	d003      	beq.n	8016b78 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x10a>
 8016b70:	f242 030b 	movw	r3, #8203	@ 0x200b
 8016b74:	4298      	cmp	r0, r3
 8016b76:	d1b2      	bne.n	8016ade <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 8016b78:	8823      	ldrh	r3, [r4, #0]
 8016b7a:	8ba1      	ldrh	r1, [r4, #28]
 8016b7c:	2b20      	cmp	r3, #32
 8016b7e:	d003      	beq.n	8016b88 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x11a>
 8016b80:	f242 000b 	movw	r0, #8203	@ 0x200b
 8016b84:	4283      	cmp	r3, r0
 8016b86:	d131      	bne.n	8016bec <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x17e>
 8016b88:	f1ba 0f00 	cmp.w	sl, #0
 8016b8c:	bf0a      	itet	eq
 8016b8e:	4688      	moveq	r8, r1
 8016b90:	4650      	movne	r0, sl
 8016b92:	2001      	moveq	r0, #1
 8016b94:	440a      	add	r2, r1
 8016b96:	8b23      	ldrh	r3, [r4, #24]
 8016b98:	f8b4 c010 	ldrh.w	ip, [r4, #16]
 8016b9c:	b292      	uxth	r2, r2
 8016b9e:	83a2      	strh	r2, [r4, #28]
 8016ba0:	4413      	add	r3, r2
 8016ba2:	f1b9 0f00 	cmp.w	r9, #0
 8016ba6:	d102      	bne.n	8016bae <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x140>
 8016ba8:	2d00      	cmp	r5, #0
 8016baa:	d042      	beq.n	8016c32 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1c4>
 8016bac:	b300      	cbz	r0, 8016bf0 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x182>
 8016bae:	8c21      	ldrh	r1, [r4, #32]
 8016bb0:	4419      	add	r1, r3
 8016bb2:	458c      	cmp	ip, r1
 8016bb4:	da37      	bge.n	8016c26 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1b8>
 8016bb6:	8ae1      	ldrh	r1, [r4, #22]
 8016bb8:	2900      	cmp	r1, #0
 8016bba:	d034      	beq.n	8016c26 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1b8>
 8016bbc:	4563      	cmp	r3, ip
 8016bbe:	dd8e      	ble.n	8016ade <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 8016bc0:	e01d      	b.n	8016bfe <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x190>
 8016bc2:	8893      	ldrh	r3, [r2, #4]
 8016bc4:	9901      	ldr	r1, [sp, #4]
 8016bc6:	8023      	strh	r3, [r4, #0]
 8016bc8:	f892 b00d 	ldrb.w	fp, [r2, #13]
 8016bcc:	ea4f 0b4b 	mov.w	fp, fp, lsl #1
 8016bd0:	f40b 7080 	and.w	r0, fp, #256	@ 0x100
 8016bd4:	f892 b00a 	ldrb.w	fp, [r2, #10]
 8016bd8:	ea4b 0b00 	orr.w	fp, fp, r0
 8016bdc:	68e0      	ldr	r0, [r4, #12]
 8016bde:	6803      	ldr	r3, [r0, #0]
 8016be0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8016be2:	4798      	blx	r3
 8016be4:	eb0b 0200 	add.w	r2, fp, r0
 8016be8:	b292      	uxth	r2, r2
 8016bea:	e7c5      	b.n	8016b78 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x10a>
 8016bec:	2000      	movs	r0, #0
 8016bee:	e7d1      	b.n	8016b94 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x126>
 8016bf0:	4563      	cmp	r3, ip
 8016bf2:	f77f af74 	ble.w	8016ade <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 8016bf6:	8ae3      	ldrh	r3, [r4, #22]
 8016bf8:	2b00      	cmp	r3, #0
 8016bfa:	f43f af70 	beq.w	8016ade <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 8016bfe:	2301      	movs	r3, #1
 8016c00:	8c22      	ldrh	r2, [r4, #32]
 8016c02:	f884 3022 	strb.w	r3, [r4, #34]	@ 0x22
 8016c06:	8be3      	ldrh	r3, [r4, #30]
 8016c08:	4413      	add	r3, r2
 8016c0a:	83e3      	strh	r3, [r4, #30]
 8016c0c:	68e0      	ldr	r0, [r4, #12]
 8016c0e:	6803      	ldr	r3, [r0, #0]
 8016c10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8016c12:	4798      	blx	r3
 8016c14:	f9b4 3014 	ldrsh.w	r3, [r4, #20]
 8016c18:	4418      	add	r0, r3
 8016c1a:	8a63      	ldrh	r3, [r4, #18]
 8016c1c:	1a18      	subs	r0, r3, r0
 8016c1e:	8260      	strh	r0, [r4, #18]
 8016c20:	b005      	add	sp, #20
 8016c22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016c26:	2300      	movs	r3, #0
 8016c28:	4611      	mov	r1, r2
 8016c2a:	4620      	mov	r0, r4
 8016c2c:	f7ff ff0f 	bl	8016a4e <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 8016c30:	e755      	b.n	8016ade <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 8016c32:	4563      	cmp	r3, ip
 8016c34:	dd14      	ble.n	8016c60 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1f2>
 8016c36:	b117      	cbz	r7, 8016c3e <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1d0>
 8016c38:	2301      	movs	r3, #1
 8016c3a:	460a      	mov	r2, r1
 8016c3c:	e772      	b.n	8016b24 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xb6>
 8016c3e:	2e00      	cmp	r6, #0
 8016c40:	f43f af4d 	beq.w	8016ade <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 8016c44:	2800      	cmp	r0, #0
 8016c46:	f47f af4a 	bne.w	8016ade <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 8016c4a:	f1ba 0f00 	cmp.w	sl, #0
 8016c4e:	d002      	beq.n	8016c56 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1e8>
 8016c50:	2301      	movs	r3, #1
 8016c52:	4642      	mov	r2, r8
 8016c54:	e767      	b.n	8016b26 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xb8>
 8016c56:	8ae3      	ldrh	r3, [r4, #22]
 8016c58:	2b00      	cmp	r3, #0
 8016c5a:	f43f af40 	beq.w	8016ade <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 8016c5e:	e7d5      	b.n	8016c0c <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x19e>
 8016c60:	2800      	cmp	r0, #0
 8016c62:	f47f af3c 	bne.w	8016ade <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 8016c66:	f1ba 0f00 	cmp.w	sl, #0
 8016c6a:	f43f af38 	beq.w	8016ade <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 8016c6e:	2301      	movs	r3, #1
 8016c70:	4642      	mov	r2, r8
 8016c72:	e7da      	b.n	8016c2a <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1bc>

08016c74 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>:
 8016c74:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016c76:	4605      	mov	r5, r0
 8016c78:	b08f      	sub	sp, #60	@ 0x3c
 8016c7a:	4617      	mov	r7, r2
 8016c7c:	461c      	mov	r4, r3
 8016c7e:	460e      	mov	r6, r1
 8016c80:	b1d1      	cbz	r1, 8016cb8 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x44>
 8016c82:	681b      	ldr	r3, [r3, #0]
 8016c84:	4620      	mov	r0, r4
 8016c86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8016c88:	4798      	blx	r3
 8016c8a:	4240      	negs	r0, r0
 8016c8c:	9603      	str	r6, [sp, #12]
 8016c8e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8016c92:	b200      	sxth	r0, r0
 8016c94:	9700      	str	r7, [sp, #0]
 8016c96:	f8bd 2050 	ldrh.w	r2, [sp, #80]	@ 0x50
 8016c9a:	4629      	mov	r1, r5
 8016c9c:	e9cd 4001 	strd	r4, r0, [sp, #4]
 8016ca0:	2401      	movs	r4, #1
 8016ca2:	a805      	add	r0, sp, #20
 8016ca4:	f7ff fcaa 	bl	80165fc <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE>
 8016ca8:	a805      	add	r0, sp, #20
 8016caa:	f7ff fee0 	bl	8016a6e <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>
 8016cae:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 8016cb2:	b163      	cbz	r3, 8016cce <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x5a>
 8016cb4:	3401      	adds	r4, #1
 8016cb6:	e7f7      	b.n	8016ca8 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x34>
 8016cb8:	2401      	movs	r4, #1
 8016cba:	f003 fa85 	bl	801a1c8 <_ZN8touchgfx12TextProvider11getNextCharEv>
 8016cbe:	280a      	cmp	r0, #10
 8016cc0:	4628      	mov	r0, r5
 8016cc2:	bf08      	it	eq
 8016cc4:	3401      	addeq	r4, #1
 8016cc6:	f003 fa7f 	bl	801a1c8 <_ZN8touchgfx12TextProvider11getNextCharEv>
 8016cca:	2800      	cmp	r0, #0
 8016ccc:	d1f7      	bne.n	8016cbe <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x4a>
 8016cce:	b2a0      	uxth	r0, r4
 8016cd0:	b00f      	add	sp, #60	@ 0x3c
 8016cd2:	bdf0      	pop	{r4, r5, r6, r7, pc}

08016cd4 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>:
 8016cd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016cd8:	b0e3      	sub	sp, #396	@ 0x18c
 8016cda:	461c      	mov	r4, r3
 8016cdc:	4683      	mov	fp, r0
 8016cde:	4688      	mov	r8, r1
 8016ce0:	9b6c      	ldr	r3, [sp, #432]	@ 0x1b0
 8016ce2:	2b00      	cmp	r3, #0
 8016ce4:	f000 8112 	beq.w	8016f0c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 8016ce8:	6823      	ldr	r3, [r4, #0]
 8016cea:	2b00      	cmp	r3, #0
 8016cec:	f000 810e 	beq.w	8016f0c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 8016cf0:	7ba3      	ldrb	r3, [r4, #14]
 8016cf2:	2b00      	cmp	r3, #0
 8016cf4:	f000 810a 	beq.w	8016f0c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 8016cf8:	ad0a      	add	r5, sp, #40	@ 0x28
 8016cfa:	6810      	ldr	r0, [r2, #0]
 8016cfc:	6851      	ldr	r1, [r2, #4]
 8016cfe:	462b      	mov	r3, r5
 8016d00:	f9b8 2004 	ldrsh.w	r2, [r8, #4]
 8016d04:	c303      	stmia	r3!, {r0, r1}
 8016d06:	2100      	movs	r1, #0
 8016d08:	f9b8 3006 	ldrsh.w	r3, [r8, #6]
 8016d0c:	f8ad 2034 	strh.w	r2, [sp, #52]	@ 0x34
 8016d10:	4628      	mov	r0, r5
 8016d12:	910c      	str	r1, [sp, #48]	@ 0x30
 8016d14:	a90c      	add	r1, sp, #48	@ 0x30
 8016d16:	79a2      	ldrb	r2, [r4, #6]
 8016d18:	f8ad 3036 	strh.w	r3, [sp, #54]	@ 0x36
 8016d1c:	f7ff fced 	bl	80166fa <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 8016d20:	a90c      	add	r1, sp, #48	@ 0x30
 8016d22:	79a2      	ldrb	r2, [r4, #6]
 8016d24:	4608      	mov	r0, r1
 8016d26:	f7ff fce8 	bl	80166fa <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 8016d2a:	a817      	add	r0, sp, #92	@ 0x5c
 8016d2c:	f002 fe20 	bl	8019970 <_ZN8touchgfx12TextProviderC1Ev>
 8016d30:	6820      	ldr	r0, [r4, #0]
 8016d32:	6803      	ldr	r3, [r0, #0]
 8016d34:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8016d36:	4798      	blx	r3
 8016d38:	4606      	mov	r6, r0
 8016d3a:	6820      	ldr	r0, [r4, #0]
 8016d3c:	6803      	ldr	r3, [r0, #0]
 8016d3e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8016d40:	4798      	blx	r3
 8016d42:	4633      	mov	r3, r6
 8016d44:	9a6d      	ldr	r2, [sp, #436]	@ 0x1b4
 8016d46:	996c      	ldr	r1, [sp, #432]	@ 0x1b0
 8016d48:	9000      	str	r0, [sp, #0]
 8016d4a:	a817      	add	r0, sp, #92	@ 0x5c
 8016d4c:	f002 fe6b 	bl	8019a26 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8016d50:	6820      	ldr	r0, [r4, #0]
 8016d52:	f894 a004 	ldrb.w	sl, [r4, #4]
 8016d56:	6803      	ldr	r3, [r0, #0]
 8016d58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8016d5a:	4798      	blx	r3
 8016d5c:	f9b4 600c 	ldrsh.w	r6, [r4, #12]
 8016d60:	6823      	ldr	r3, [r4, #0]
 8016d62:	4607      	mov	r7, r0
 8016d64:	4406      	add	r6, r0
 8016d66:	a830      	add	r0, sp, #192	@ 0xc0
 8016d68:	f893 9009 	ldrb.w	r9, [r3, #9]
 8016d6c:	f002 fe00 	bl	8019970 <_ZN8touchgfx12TextProviderC1Ev>
 8016d70:	7c23      	ldrb	r3, [r4, #16]
 8016d72:	b17b      	cbz	r3, 8016d94 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xc0>
 8016d74:	6820      	ldr	r0, [r4, #0]
 8016d76:	6803      	ldr	r3, [r0, #0]
 8016d78:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8016d7a:	4798      	blx	r3
 8016d7c:	9009      	str	r0, [sp, #36]	@ 0x24
 8016d7e:	6820      	ldr	r0, [r4, #0]
 8016d80:	6802      	ldr	r2, [r0, #0]
 8016d82:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8016d84:	4790      	blx	r2
 8016d86:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8016d88:	9000      	str	r0, [sp, #0]
 8016d8a:	a830      	add	r0, sp, #192	@ 0xc0
 8016d8c:	9a6d      	ldr	r2, [sp, #436]	@ 0x1b4
 8016d8e:	996c      	ldr	r1, [sp, #432]	@ 0x1b0
 8016d90:	f002 fe49 	bl	8019a26 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8016d94:	f8bd 1034 	ldrh.w	r1, [sp, #52]	@ 0x34
 8016d98:	a80e      	add	r0, sp, #56	@ 0x38
 8016d9a:	7be2      	ldrb	r2, [r4, #15]
 8016d9c:	f8bd 3036 	ldrh.w	r3, [sp, #54]	@ 0x36
 8016da0:	1a8a      	subs	r2, r1, r2
 8016da2:	7c21      	ldrb	r1, [r4, #16]
 8016da4:	9103      	str	r1, [sp, #12]
 8016da6:	b292      	uxth	r2, r2
 8016da8:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
 8016dac:	9102      	str	r1, [sp, #8]
 8016dae:	6821      	ldr	r1, [r4, #0]
 8016db0:	9101      	str	r1, [sp, #4]
 8016db2:	7961      	ldrb	r1, [r4, #5]
 8016db4:	9100      	str	r1, [sp, #0]
 8016db6:	a930      	add	r1, sp, #192	@ 0xc0
 8016db8:	f7ff fc20 	bl	80165fc <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE>
 8016dbc:	2e00      	cmp	r6, #0
 8016dbe:	dc5b      	bgt.n	8016e78 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1a4>
 8016dc0:	af17      	add	r7, sp, #92	@ 0x5c
 8016dc2:	f04f 0900 	mov.w	r9, #0
 8016dc6:	7c23      	ldrb	r3, [r4, #16]
 8016dc8:	2b00      	cmp	r3, #0
 8016dca:	f000 80b1 	beq.w	8016f30 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x25c>
 8016dce:	a80e      	add	r0, sp, #56	@ 0x38
 8016dd0:	f7ff fe4d 	bl	8016a6e <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>
 8016dd4:	f1ba 0f00 	cmp.w	sl, #0
 8016dd8:	f000 80a5 	beq.w	8016f26 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x252>
 8016ddc:	7c23      	ldrb	r3, [r4, #16]
 8016dde:	2264      	movs	r2, #100	@ 0x64
 8016de0:	4639      	mov	r1, r7
 8016de2:	a849      	add	r0, sp, #292	@ 0x124
 8016de4:	9309      	str	r3, [sp, #36]	@ 0x24
 8016de6:	f010 fdc8 	bl	802797a <memcpy>
 8016dea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8016dec:	2b00      	cmp	r3, #0
 8016dee:	f000 80a7 	beq.w	8016f40 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x26c>
 8016df2:	f9bd 3056 	ldrsh.w	r3, [sp, #86]	@ 0x56
 8016df6:	7922      	ldrb	r2, [r4, #4]
 8016df8:	2a01      	cmp	r2, #1
 8016dfa:	f040 808a 	bne.w	8016f12 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x23e>
 8016dfe:	f9bd 0034 	ldrsh.w	r0, [sp, #52]	@ 0x34
 8016e02:	1ac0      	subs	r0, r0, r3
 8016e04:	2302      	movs	r3, #2
 8016e06:	fb90 f0f3 	sdiv	r0, r0, r3
 8016e0a:	b200      	sxth	r0, r0
 8016e0c:	7c23      	ldrb	r3, [r4, #16]
 8016e0e:	2b00      	cmp	r3, #0
 8016e10:	f000 808b 	beq.w	8016f2a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x256>
 8016e14:	f8bd 204e 	ldrh.w	r2, [sp, #78]	@ 0x4e
 8016e18:	f89d 105a 	ldrb.w	r1, [sp, #90]	@ 0x5a
 8016e1c:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	@ 0x32
 8016e20:	e9cd 2105 	strd	r2, r1, [sp, #20]
 8016e24:	f8bd 2030 	ldrh.w	r2, [sp, #48]	@ 0x30
 8016e28:	2100      	movs	r1, #0
 8016e2a:	4410      	add	r0, r2
 8016e2c:	4642      	mov	r2, r8
 8016e2e:	b200      	sxth	r0, r0
 8016e30:	e9cd 9703 	strd	r9, r7, [sp, #12]
 8016e34:	9000      	str	r0, [sp, #0]
 8016e36:	4658      	mov	r0, fp
 8016e38:	e9cd 5401 	strd	r5, r4, [sp, #4]
 8016e3c:	f7ff fc8e 	bl	801675c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>
 8016e40:	2800      	cmp	r0, #0
 8016e42:	d163      	bne.n	8016f0c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 8016e44:	b2b2      	uxth	r2, r6
 8016e46:	f8bd 3032 	ldrh.w	r3, [sp, #50]	@ 0x32
 8016e4a:	f8bd 1036 	ldrh.w	r1, [sp, #54]	@ 0x36
 8016e4e:	4413      	add	r3, r2
 8016e50:	1a8a      	subs	r2, r1, r2
 8016e52:	b21b      	sxth	r3, r3
 8016e54:	f8ad 2036 	strh.w	r2, [sp, #54]	@ 0x36
 8016e58:	f89d 205a 	ldrb.w	r2, [sp, #90]	@ 0x5a
 8016e5c:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 8016e60:	2a00      	cmp	r2, #0
 8016e62:	d153      	bne.n	8016f0c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 8016e64:	6822      	ldr	r2, [r4, #0]
 8016e66:	8869      	ldrh	r1, [r5, #2]
 8016e68:	7a12      	ldrb	r2, [r2, #8]
 8016e6a:	1a9b      	subs	r3, r3, r2
 8016e6c:	88ea      	ldrh	r2, [r5, #6]
 8016e6e:	440a      	add	r2, r1
 8016e70:	b212      	sxth	r2, r2
 8016e72:	4293      	cmp	r3, r2
 8016e74:	dda7      	ble.n	8016dc6 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xf2>
 8016e76:	e049      	b.n	8016f0c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 8016e78:	7c23      	ldrb	r3, [r4, #16]
 8016e7a:	444f      	add	r7, r9
 8016e7c:	b1c3      	cbz	r3, 8016eb0 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1dc>
 8016e7e:	f64f 79ff 	movw	r9, #65535	@ 0xffff
 8016e82:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	@ 0x32
 8016e86:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 8016e8a:	443b      	add	r3, r7
 8016e8c:	4293      	cmp	r3, r2
 8016e8e:	da97      	bge.n	8016dc0 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xec>
 8016e90:	a80e      	add	r0, sp, #56	@ 0x38
 8016e92:	f7ff fdec 	bl	8016a6e <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>
 8016e96:	f8bd 304e 	ldrh.w	r3, [sp, #78]	@ 0x4e
 8016e9a:	3b01      	subs	r3, #1
 8016e9c:	b29b      	uxth	r3, r3
 8016e9e:	454b      	cmp	r3, r9
 8016ea0:	9309      	str	r3, [sp, #36]	@ 0x24
 8016ea2:	d021      	beq.n	8016ee8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x214>
 8016ea4:	7961      	ldrb	r1, [r4, #5]
 8016ea6:	a817      	add	r0, sp, #92	@ 0x5c
 8016ea8:	f7ed f8a8 	bl	8003ffc <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8016eac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8016eae:	e7f4      	b.n	8016e9a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1c6>
 8016eb0:	fa1f f986 	uxth.w	r9, r6
 8016eb4:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	@ 0x32
 8016eb8:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 8016ebc:	443b      	add	r3, r7
 8016ebe:	4293      	cmp	r3, r2
 8016ec0:	f6bf af7e 	bge.w	8016dc0 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xec>
 8016ec4:	a817      	add	r0, sp, #92	@ 0x5c
 8016ec6:	f003 f97f 	bl	801a1c8 <_ZN8touchgfx12TextProvider11getNextCharEv>
 8016eca:	b1f8      	cbz	r0, 8016f0c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 8016ecc:	280a      	cmp	r0, #10
 8016ece:	d1f1      	bne.n	8016eb4 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1e0>
 8016ed0:	f8bd 3032 	ldrh.w	r3, [sp, #50]	@ 0x32
 8016ed4:	444b      	add	r3, r9
 8016ed6:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 8016eda:	f8bd 3036 	ldrh.w	r3, [sp, #54]	@ 0x36
 8016ede:	eba3 0309 	sub.w	r3, r3, r9
 8016ee2:	f8ad 3036 	strh.w	r3, [sp, #54]	@ 0x36
 8016ee6:	e7e5      	b.n	8016eb4 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1e0>
 8016ee8:	b2b3      	uxth	r3, r6
 8016eea:	f8bd 2032 	ldrh.w	r2, [sp, #50]	@ 0x32
 8016eee:	441a      	add	r2, r3
 8016ef0:	f8ad 2032 	strh.w	r2, [sp, #50]	@ 0x32
 8016ef4:	f8bd 2036 	ldrh.w	r2, [sp, #54]	@ 0x36
 8016ef8:	1ad3      	subs	r3, r2, r3
 8016efa:	f8ad 3036 	strh.w	r3, [sp, #54]	@ 0x36
 8016efe:	f8bd 3038 	ldrh.w	r3, [sp, #56]	@ 0x38
 8016f02:	b11b      	cbz	r3, 8016f0c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 8016f04:	f89d 305a 	ldrb.w	r3, [sp, #90]	@ 0x5a
 8016f08:	2b00      	cmp	r3, #0
 8016f0a:	d0ba      	beq.n	8016e82 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1ae>
 8016f0c:	b063      	add	sp, #396	@ 0x18c
 8016f0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016f12:	2a02      	cmp	r2, #2
 8016f14:	d105      	bne.n	8016f22 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x24e>
 8016f16:	7be2      	ldrb	r2, [r4, #15]
 8016f18:	f8bd 0034 	ldrh.w	r0, [sp, #52]	@ 0x34
 8016f1c:	1a80      	subs	r0, r0, r2
 8016f1e:	1ac0      	subs	r0, r0, r3
 8016f20:	e773      	b.n	8016e0a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x136>
 8016f22:	2000      	movs	r0, #0
 8016f24:	e772      	b.n	8016e0c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x138>
 8016f26:	7be0      	ldrb	r0, [r4, #15]
 8016f28:	e770      	b.n	8016e0c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x138>
 8016f2a:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8016f2e:	e773      	b.n	8016e18 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x144>
 8016f30:	f1ba 0f00 	cmp.w	sl, #0
 8016f34:	d0f7      	beq.n	8016f26 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x252>
 8016f36:	2264      	movs	r2, #100	@ 0x64
 8016f38:	4639      	mov	r1, r7
 8016f3a:	a849      	add	r0, sp, #292	@ 0x124
 8016f3c:	f010 fd1d 	bl	802797a <memcpy>
 8016f40:	2300      	movs	r3, #0
 8016f42:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8016f46:	6821      	ldr	r1, [r4, #0]
 8016f48:	a849      	add	r0, sp, #292	@ 0x124
 8016f4a:	f7ff fb9a 	bl	8016682 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>
 8016f4e:	b203      	sxth	r3, r0
 8016f50:	e751      	b.n	8016df6 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x122>

08016f52 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>:
 8016f52:	2b03      	cmp	r3, #3
 8016f54:	d818      	bhi.n	8016f88 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x36>
 8016f56:	e8df f003 	tbb	[pc, r3]
 8016f5a:	0602      	.short	0x0602
 8016f5c:	130d      	.short	0x130d
 8016f5e:	f9b0 2000 	ldrsh.w	r2, [r0]
 8016f62:	1850      	adds	r0, r2, r1
 8016f64:	4770      	bx	lr
 8016f66:	8803      	ldrh	r3, [r0, #0]
 8016f68:	8880      	ldrh	r0, [r0, #4]
 8016f6a:	4418      	add	r0, r3
 8016f6c:	b200      	sxth	r0, r0
 8016f6e:	1a80      	subs	r0, r0, r2
 8016f70:	3801      	subs	r0, #1
 8016f72:	4770      	bx	lr
 8016f74:	8803      	ldrh	r3, [r0, #0]
 8016f76:	8880      	ldrh	r0, [r0, #4]
 8016f78:	4418      	add	r0, r3
 8016f7a:	b200      	sxth	r0, r0
 8016f7c:	1a40      	subs	r0, r0, r1
 8016f7e:	e7f7      	b.n	8016f70 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x1e>
 8016f80:	f9b0 0000 	ldrsh.w	r0, [r0]
 8016f84:	4410      	add	r0, r2
 8016f86:	4770      	bx	lr
 8016f88:	2000      	movs	r0, #0
 8016f8a:	4770      	bx	lr

08016f8c <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>:
 8016f8c:	2b03      	cmp	r3, #3
 8016f8e:	d817      	bhi.n	8016fc0 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x34>
 8016f90:	e8df f003 	tbb	[pc, r3]
 8016f94:	10090602 	.word	0x10090602
 8016f98:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
 8016f9c:	1850      	adds	r0, r2, r1
 8016f9e:	4770      	bx	lr
 8016fa0:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 8016fa4:	e7fa      	b.n	8016f9c <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x10>
 8016fa6:	8843      	ldrh	r3, [r0, #2]
 8016fa8:	88c0      	ldrh	r0, [r0, #6]
 8016faa:	4418      	add	r0, r3
 8016fac:	b200      	sxth	r0, r0
 8016fae:	1a80      	subs	r0, r0, r2
 8016fb0:	3801      	subs	r0, #1
 8016fb2:	4770      	bx	lr
 8016fb4:	8843      	ldrh	r3, [r0, #2]
 8016fb6:	88c0      	ldrh	r0, [r0, #6]
 8016fb8:	4418      	add	r0, r3
 8016fba:	b200      	sxth	r0, r0
 8016fbc:	1a40      	subs	r0, r0, r1
 8016fbe:	e7f7      	b.n	8016fb0 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x24>
 8016fc0:	2000      	movs	r0, #0
 8016fc2:	4770      	bx	lr

08016fc4 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE>:
 8016fc4:	4b01      	ldr	r3, [pc, #4]	@ (8016fcc <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE+0x8>)
 8016fc6:	2200      	movs	r2, #0
 8016fc8:	601a      	str	r2, [r3, #0]
 8016fca:	4770      	bx	lr
 8016fcc:	24028e30 	.word	0x24028e30

08016fd0 <_ZN8touchgfx16TouchCalibration4clzuEm>:
 8016fd0:	4603      	mov	r3, r0
 8016fd2:	b1c8      	cbz	r0, 8017008 <_ZN8touchgfx16TouchCalibration4clzuEm+0x38>
 8016fd4:	0c02      	lsrs	r2, r0, #16
 8016fd6:	0412      	lsls	r2, r2, #16
 8016fd8:	b9a2      	cbnz	r2, 8017004 <_ZN8touchgfx16TouchCalibration4clzuEm+0x34>
 8016fda:	0403      	lsls	r3, r0, #16
 8016fdc:	2010      	movs	r0, #16
 8016fde:	f013 4f7f 	tst.w	r3, #4278190080	@ 0xff000000
 8016fe2:	bf04      	itt	eq
 8016fe4:	021b      	lsleq	r3, r3, #8
 8016fe6:	3008      	addeq	r0, #8
 8016fe8:	f013 4f70 	tst.w	r3, #4026531840	@ 0xf0000000
 8016fec:	bf04      	itt	eq
 8016fee:	011b      	lsleq	r3, r3, #4
 8016ff0:	3004      	addeq	r0, #4
 8016ff2:	f013 4f40 	tst.w	r3, #3221225472	@ 0xc0000000
 8016ff6:	bf04      	itt	eq
 8016ff8:	009b      	lsleq	r3, r3, #2
 8016ffa:	3002      	addeq	r0, #2
 8016ffc:	2b00      	cmp	r3, #0
 8016ffe:	db04      	blt.n	801700a <_ZN8touchgfx16TouchCalibration4clzuEm+0x3a>
 8017000:	3001      	adds	r0, #1
 8017002:	4770      	bx	lr
 8017004:	2000      	movs	r0, #0
 8017006:	e7ea      	b.n	8016fde <_ZN8touchgfx16TouchCalibration4clzuEm+0xe>
 8017008:	2020      	movs	r0, #32
 801700a:	4770      	bx	lr

0801700c <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>:
 801700c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017010:	b087      	sub	sp, #28
 8017012:	460d      	mov	r5, r1
 8017014:	4616      	mov	r6, r2
 8017016:	4698      	mov	r8, r3
 8017018:	4601      	mov	r1, r0
 801701a:	e9dd 4710 	ldrd	r4, r7, [sp, #64]	@ 0x40
 801701e:	b120      	cbz	r0, 801702a <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x1e>
 8017020:	b11a      	cbz	r2, 801702a <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x1e>
 8017022:	2d1f      	cmp	r5, #31
 8017024:	d801      	bhi.n	801702a <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x1e>
 8017026:	2b1f      	cmp	r3, #31
 8017028:	d904      	bls.n	8017034 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x28>
 801702a:	2000      	movs	r0, #0
 801702c:	6038      	str	r0, [r7, #0]
 801702e:	b007      	add	sp, #28
 8017030:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017034:	b97d      	cbnz	r5, 8017056 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x4a>
 8017036:	b143      	cbz	r3, 801704a <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x3e>
 8017038:	4602      	mov	r2, r0
 801703a:	462b      	mov	r3, r5
 801703c:	4641      	mov	r1, r8
 801703e:	4630      	mov	r0, r6
 8017040:	e9cd 4700 	strd	r4, r7, [sp]
 8017044:	f7ff ffe2 	bl	801700c <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 8017048:	e7f1      	b.n	801702e <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x22>
 801704a:	f04f 33ff 	mov.w	r3, #4294967295
 801704e:	f06f 4000 	mvn.w	r0, #2147483648	@ 0x80000000
 8017052:	603b      	str	r3, [r7, #0]
 8017054:	e7eb      	b.n	801702e <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x22>
 8017056:	fa32 fa05 	lsrs.w	sl, r2, r5
 801705a:	d106      	bne.n	801706a <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x5e>
 801705c:	4346      	muls	r6, r0
 801705e:	fbb6 f0f4 	udiv	r0, r6, r4
 8017062:	fb04 6610 	mls	r6, r4, r0, r6
 8017066:	603e      	str	r6, [r7, #0]
 8017068:	e7e1      	b.n	801702e <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x22>
 801706a:	2201      	movs	r2, #1
 801706c:	fa00 fb05 	lsl.w	fp, r0, r5
 8017070:	40aa      	lsls	r2, r5
 8017072:	fbbb f9f4 	udiv	r9, fp, r4
 8017076:	3a01      	subs	r2, #1
 8017078:	fb0a f309 	mul.w	r3, sl, r9
 801707c:	fb04 b919 	mls	r9, r4, r9, fp
 8017080:	4016      	ands	r6, r2
 8017082:	9303      	str	r3, [sp, #12]
 8017084:	4630      	mov	r0, r6
 8017086:	f7ff ffa3 	bl	8016fd0 <_ZN8touchgfx16TouchCalibration4clzuEm>
 801708a:	462b      	mov	r3, r5
 801708c:	460a      	mov	r2, r1
 801708e:	4601      	mov	r1, r0
 8017090:	4630      	mov	r0, r6
 8017092:	e9cd 4700 	strd	r4, r7, [sp]
 8017096:	f7ff ffb9 	bl	801700c <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 801709a:	4606      	mov	r6, r0
 801709c:	4648      	mov	r0, r9
 801709e:	eb05 0108 	add.w	r1, r5, r8
 80170a2:	f7ff ff95 	bl	8016fd0 <_ZN8touchgfx16TouchCalibration4clzuEm>
 80170a6:	ab05      	add	r3, sp, #20
 80170a8:	464a      	mov	r2, r9
 80170aa:	e9cd 4300 	strd	r4, r3, [sp]
 80170ae:	4603      	mov	r3, r0
 80170b0:	4650      	mov	r0, sl
 80170b2:	f7ff ffab 	bl	801700c <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 80170b6:	6839      	ldr	r1, [r7, #0]
 80170b8:	9a05      	ldr	r2, [sp, #20]
 80170ba:	9b03      	ldr	r3, [sp, #12]
 80170bc:	4411      	add	r1, r2
 80170be:	fbb1 f2f4 	udiv	r2, r1, r4
 80170c2:	18d3      	adds	r3, r2, r3
 80170c4:	fb04 1412 	mls	r4, r4, r2, r1
 80170c8:	441e      	add	r6, r3
 80170ca:	603c      	str	r4, [r7, #0]
 80170cc:	4430      	add	r0, r6
 80170ce:	e7ae      	b.n	801702e <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x22>

080170d0 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>:
 80170d0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80170d4:	b085      	sub	sp, #20
 80170d6:	f1b0 0900 	subs.w	r9, r0, #0
 80170da:	461d      	mov	r5, r3
 80170dc:	4617      	mov	r7, r2
 80170de:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 80170e0:	bfbb      	ittet	lt
 80170e2:	f1c9 0900 	rsblt	r9, r9, #0
 80170e6:	f04f 36ff 	movlt.w	r6, #4294967295
 80170ea:	2601      	movge	r6, #1
 80170ec:	6823      	ldrlt	r3, [r4, #0]
 80170ee:	bfbc      	itt	lt
 80170f0:	425b      	neglt	r3, r3
 80170f2:	6023      	strlt	r3, [r4, #0]
 80170f4:	2a00      	cmp	r2, #0
 80170f6:	da04      	bge.n	8017102 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x32>
 80170f8:	6823      	ldr	r3, [r4, #0]
 80170fa:	4257      	negs	r7, r2
 80170fc:	4276      	negs	r6, r6
 80170fe:	425b      	negs	r3, r3
 8017100:	6023      	str	r3, [r4, #0]
 8017102:	2d00      	cmp	r5, #0
 8017104:	4638      	mov	r0, r7
 8017106:	bfba      	itte	lt
 8017108:	426d      	neglt	r5, r5
 801710a:	f04f 38ff 	movlt.w	r8, #4294967295
 801710e:	f04f 0801 	movge.w	r8, #1
 8017112:	f7ff ff5d 	bl	8016fd0 <_ZN8touchgfx16TouchCalibration4clzuEm>
 8017116:	ab03      	add	r3, sp, #12
 8017118:	463a      	mov	r2, r7
 801711a:	e9cd 5300 	strd	r5, r3, [sp]
 801711e:	4603      	mov	r3, r0
 8017120:	4648      	mov	r0, r9
 8017122:	f7ff ff73 	bl	801700c <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 8017126:	6823      	ldr	r3, [r4, #0]
 8017128:	9a03      	ldr	r2, [sp, #12]
 801712a:	4546      	cmp	r6, r8
 801712c:	441a      	add	r2, r3
 801712e:	fb92 f3f5 	sdiv	r3, r2, r5
 8017132:	4418      	add	r0, r3
 8017134:	fb05 2313 	mls	r3, r5, r3, r2
 8017138:	bf18      	it	ne
 801713a:	4240      	negne	r0, r0
 801713c:	1c72      	adds	r2, r6, #1
 801713e:	6023      	str	r3, [r4, #0]
 8017140:	d105      	bne.n	801714e <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7e>
 8017142:	2b00      	cmp	r3, #0
 8017144:	f1c3 0200 	rsb	r2, r3, #0
 8017148:	db0b      	blt.n	8017162 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x92>
 801714a:	6022      	str	r2, [r4, #0]
 801714c:	e006      	b.n	801715c <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 801714e:	2e01      	cmp	r6, #1
 8017150:	d104      	bne.n	801715c <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 8017152:	2b00      	cmp	r3, #0
 8017154:	da02      	bge.n	801715c <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 8017156:	442b      	add	r3, r5
 8017158:	3801      	subs	r0, #1
 801715a:	6023      	str	r3, [r4, #0]
 801715c:	b005      	add	sp, #20
 801715e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017162:	3801      	subs	r0, #1
 8017164:	1b52      	subs	r2, r2, r5
 8017166:	e7f0      	b.n	801714a <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7a>

08017168 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>:
 8017168:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 801716c:	4c1c      	ldr	r4, [pc, #112]	@ (80171e0 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x78>)
 801716e:	4605      	mov	r5, r0
 8017170:	6807      	ldr	r7, [r0, #0]
 8017172:	69a3      	ldr	r3, [r4, #24]
 8017174:	b92b      	cbnz	r3, 8017182 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x1a>
 8017176:	6840      	ldr	r0, [r0, #4]
 8017178:	e9c5 7000 	strd	r7, r0, [r5]
 801717c:	b004      	add	sp, #16
 801717e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017182:	f04f 0802 	mov.w	r8, #2
 8017186:	68a2      	ldr	r2, [r4, #8]
 8017188:	ae04      	add	r6, sp, #16
 801718a:	6820      	ldr	r0, [r4, #0]
 801718c:	fb93 f1f8 	sdiv	r1, r3, r8
 8017190:	440a      	add	r2, r1
 8017192:	69e1      	ldr	r1, [r4, #28]
 8017194:	f846 2d04 	str.w	r2, [r6, #-4]!
 8017198:	463a      	mov	r2, r7
 801719a:	9600      	str	r6, [sp, #0]
 801719c:	f7ff ff98 	bl	80170d0 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 80171a0:	69a3      	ldr	r3, [r4, #24]
 80171a2:	4607      	mov	r7, r0
 80171a4:	686a      	ldr	r2, [r5, #4]
 80171a6:	6a21      	ldr	r1, [r4, #32]
 80171a8:	9600      	str	r6, [sp, #0]
 80171aa:	6860      	ldr	r0, [r4, #4]
 80171ac:	f7ff ff90 	bl	80170d0 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 80171b0:	69a3      	ldr	r3, [r4, #24]
 80171b2:	6962      	ldr	r2, [r4, #20]
 80171b4:	4407      	add	r7, r0
 80171b6:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 80171b8:	9600      	str	r6, [sp, #0]
 80171ba:	68e0      	ldr	r0, [r4, #12]
 80171bc:	fb93 f8f8 	sdiv	r8, r3, r8
 80171c0:	4442      	add	r2, r8
 80171c2:	9203      	str	r2, [sp, #12]
 80171c4:	682a      	ldr	r2, [r5, #0]
 80171c6:	f7ff ff83 	bl	80170d0 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 80171ca:	4680      	mov	r8, r0
 80171cc:	9600      	str	r6, [sp, #0]
 80171ce:	69a3      	ldr	r3, [r4, #24]
 80171d0:	686a      	ldr	r2, [r5, #4]
 80171d2:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 80171d4:	6920      	ldr	r0, [r4, #16]
 80171d6:	f7ff ff7b 	bl	80170d0 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 80171da:	4440      	add	r0, r8
 80171dc:	e7cc      	b.n	8017178 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x10>
 80171de:	bf00      	nop
 80171e0:	24028e34 	.word	0x24028e34

080171e4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>:
 80171e4:	4b07      	ldr	r3, [pc, #28]	@ (8017204 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x20>)
 80171e6:	781b      	ldrb	r3, [r3, #0]
 80171e8:	2b01      	cmp	r3, #1
 80171ea:	d109      	bne.n	8017200 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x1c>
 80171ec:	f9b1 3000 	ldrsh.w	r3, [r1]
 80171f0:	f9b0 2000 	ldrsh.w	r2, [r0]
 80171f4:	8003      	strh	r3, [r0, #0]
 80171f6:	4b04      	ldr	r3, [pc, #16]	@ (8017208 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x24>)
 80171f8:	881b      	ldrh	r3, [r3, #0]
 80171fa:	3b01      	subs	r3, #1
 80171fc:	1a9b      	subs	r3, r3, r2
 80171fe:	800b      	strh	r3, [r1, #0]
 8017200:	4770      	bx	lr
 8017202:	bf00      	nop
 8017204:	24028e18 	.word	0x24028e18
 8017208:	24028e14 	.word	0x24028e14

0801720c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>:
 801720c:	4b07      	ldr	r3, [pc, #28]	@ (801722c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x20>)
 801720e:	b510      	push	{r4, lr}
 8017210:	781b      	ldrb	r3, [r3, #0]
 8017212:	2b01      	cmp	r3, #1
 8017214:	d108      	bne.n	8017228 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x1c>
 8017216:	4b06      	ldr	r3, [pc, #24]	@ (8017230 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x24>)
 8017218:	880c      	ldrh	r4, [r1, #0]
 801721a:	881b      	ldrh	r3, [r3, #0]
 801721c:	f9b0 2000 	ldrsh.w	r2, [r0]
 8017220:	3b01      	subs	r3, #1
 8017222:	1b1b      	subs	r3, r3, r4
 8017224:	8003      	strh	r3, [r0, #0]
 8017226:	800a      	strh	r2, [r1, #0]
 8017228:	bd10      	pop	{r4, pc}
 801722a:	bf00      	nop
 801722c:	24028e18 	.word	0x24028e18
 8017230:	24028e14 	.word	0x24028e14

08017234 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>:
 8017234:	4b0a      	ldr	r3, [pc, #40]	@ (8017260 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x2c>)
 8017236:	b510      	push	{r4, lr}
 8017238:	781b      	ldrb	r3, [r3, #0]
 801723a:	2b01      	cmp	r3, #1
 801723c:	d10e      	bne.n	801725c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x28>
 801723e:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 8017242:	8843      	ldrh	r3, [r0, #2]
 8017244:	f9b0 4000 	ldrsh.w	r4, [r0]
 8017248:	18ca      	adds	r2, r1, r3
 801724a:	4b06      	ldr	r3, [pc, #24]	@ (8017264 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x30>)
 801724c:	8044      	strh	r4, [r0, #2]
 801724e:	881b      	ldrh	r3, [r3, #0]
 8017250:	1a9b      	subs	r3, r3, r2
 8017252:	8003      	strh	r3, [r0, #0]
 8017254:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8017258:	8081      	strh	r1, [r0, #4]
 801725a:	80c3      	strh	r3, [r0, #6]
 801725c:	bd10      	pop	{r4, pc}
 801725e:	bf00      	nop
 8017260:	24028e18 	.word	0x24028e18
 8017264:	24028e14 	.word	0x24028e14

08017268 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>:
 8017268:	4b08      	ldr	r3, [pc, #32]	@ (801728c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x24>)
 801726a:	781b      	ldrb	r3, [r3, #0]
 801726c:	2b01      	cmp	r3, #1
 801726e:	d10c      	bne.n	801728a <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x22>
 8017270:	8803      	ldrh	r3, [r0, #0]
 8017272:	f9b0 1004 	ldrsh.w	r1, [r0, #4]
 8017276:	8842      	ldrh	r2, [r0, #2]
 8017278:	8002      	strh	r2, [r0, #0]
 801727a:	185a      	adds	r2, r3, r1
 801727c:	4b04      	ldr	r3, [pc, #16]	@ (8017290 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x28>)
 801727e:	881b      	ldrh	r3, [r3, #0]
 8017280:	1a9b      	subs	r3, r3, r2
 8017282:	8043      	strh	r3, [r0, #2]
 8017284:	88c3      	ldrh	r3, [r0, #6]
 8017286:	80c1      	strh	r1, [r0, #6]
 8017288:	8083      	strh	r3, [r0, #4]
 801728a:	4770      	bx	lr
 801728c:	24028e18 	.word	0x24028e18
 8017290:	24028e14 	.word	0x24028e14

08017294 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>:
 8017294:	4b07      	ldr	r3, [pc, #28]	@ (80172b4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x20>)
 8017296:	b510      	push	{r4, lr}
 8017298:	781b      	ldrb	r3, [r3, #0]
 801729a:	2b01      	cmp	r3, #1
 801729c:	d108      	bne.n	80172b0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x1c>
 801729e:	f9b1 3000 	ldrsh.w	r3, [r1]
 80172a2:	f9b0 4000 	ldrsh.w	r4, [r0]
 80172a6:	8003      	strh	r3, [r0, #0]
 80172a8:	8893      	ldrh	r3, [r2, #4]
 80172aa:	3b01      	subs	r3, #1
 80172ac:	1b1b      	subs	r3, r3, r4
 80172ae:	800b      	strh	r3, [r1, #0]
 80172b0:	bd10      	pop	{r4, pc}
 80172b2:	bf00      	nop
 80172b4:	24028e18 	.word	0x24028e18

080172b8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE>:
 80172b8:	4b0b      	ldr	r3, [pc, #44]	@ (80172e8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE+0x30>)
 80172ba:	781b      	ldrb	r3, [r3, #0]
 80172bc:	2b01      	cmp	r3, #1
 80172be:	d111      	bne.n	80172e4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE+0x2c>
 80172c0:	680b      	ldr	r3, [r1, #0]
 80172c2:	ed90 7a00 	vldr	s14, [r0]
 80172c6:	6003      	str	r3, [r0, #0]
 80172c8:	f9b2 3004 	ldrsh.w	r3, [r2, #4]
 80172cc:	eddf 6a07 	vldr	s13, [pc, #28]	@ 80172ec <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE+0x34>
 80172d0:	ee07 3a90 	vmov	s15, r3
 80172d4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80172d8:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80172dc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80172e0:	edc1 7a00 	vstr	s15, [r1]
 80172e4:	4770      	bx	lr
 80172e6:	bf00      	nop
 80172e8:	24028e18 	.word	0x24028e18
 80172ec:	38d1b717 	.word	0x38d1b717

080172f0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>:
 80172f0:	4b0a      	ldr	r3, [pc, #40]	@ (801731c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x2c>)
 80172f2:	460a      	mov	r2, r1
 80172f4:	b510      	push	{r4, lr}
 80172f6:	781b      	ldrb	r3, [r3, #0]
 80172f8:	2b01      	cmp	r3, #1
 80172fa:	d10d      	bne.n	8017318 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x28>
 80172fc:	8881      	ldrh	r1, [r0, #4]
 80172fe:	8803      	ldrh	r3, [r0, #0]
 8017300:	440b      	add	r3, r1
 8017302:	4601      	mov	r1, r0
 8017304:	3b01      	subs	r3, #1
 8017306:	f821 3b02 	strh.w	r3, [r1], #2
 801730a:	f7ff ffc3 	bl	8017294 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>
 801730e:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8017312:	88c2      	ldrh	r2, [r0, #6]
 8017314:	80c3      	strh	r3, [r0, #6]
 8017316:	8082      	strh	r2, [r0, #4]
 8017318:	bd10      	pop	{r4, pc}
 801731a:	bf00      	nop
 801731c:	24028e18 	.word	0x24028e18

08017320 <_ZN8touchgfx11Application13requestRedrawEv>:
 8017320:	4b06      	ldr	r3, [pc, #24]	@ (801733c <_ZN8touchgfx11Application13requestRedrawEv+0x1c>)
 8017322:	2100      	movs	r1, #0
 8017324:	f9b3 2000 	ldrsh.w	r2, [r3]
 8017328:	4b05      	ldr	r3, [pc, #20]	@ (8017340 <_ZN8touchgfx11Application13requestRedrawEv+0x20>)
 801732a:	f8c0 1130 	str.w	r1, [r0, #304]	@ 0x130
 801732e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8017332:	f8a0 2134 	strh.w	r2, [r0, #308]	@ 0x134
 8017336:	f8a0 3136 	strh.w	r3, [r0, #310]	@ 0x136
 801733a:	4770      	bx	lr
 801733c:	24028e14 	.word	0x24028e14
 8017340:	24028e16 	.word	0x24028e16

08017344 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE>:
 8017344:	4b03      	ldr	r3, [pc, #12]	@ (8017354 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0x10>)
 8017346:	6818      	ldr	r0, [r3, #0]
 8017348:	b110      	cbz	r0, 8017350 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0xc>
 801734a:	6803      	ldr	r3, [r0, #0]
 801734c:	699b      	ldr	r3, [r3, #24]
 801734e:	4718      	bx	r3
 8017350:	4770      	bx	lr
 8017352:	bf00      	nop
 8017354:	24028e64 	.word	0x24028e64

08017358 <_ZN8touchgfx11Application29handlePendingScreenTransitionEv>:
 8017358:	4770      	bx	lr
	...

0801735c <_ZN8touchgfx11Application4drawEv>:
 801735c:	4b09      	ldr	r3, [pc, #36]	@ (8017384 <_ZN8touchgfx11Application4drawEv+0x28>)
 801735e:	b507      	push	{r0, r1, r2, lr}
 8017360:	f9b3 2000 	ldrsh.w	r2, [r3]
 8017364:	2100      	movs	r1, #0
 8017366:	4b08      	ldr	r3, [pc, #32]	@ (8017388 <_ZN8touchgfx11Application4drawEv+0x2c>)
 8017368:	9100      	str	r1, [sp, #0]
 801736a:	4669      	mov	r1, sp
 801736c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8017370:	f8ad 2004 	strh.w	r2, [sp, #4]
 8017374:	f8ad 3006 	strh.w	r3, [sp, #6]
 8017378:	6803      	ldr	r3, [r0, #0]
 801737a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801737c:	4798      	blx	r3
 801737e:	b003      	add	sp, #12
 8017380:	f85d fb04 	ldr.w	pc, [sp], #4
 8017384:	24028e14 	.word	0x24028e14
 8017388:	24028e16 	.word	0x24028e16

0801738c <_ZN8touchgfx11Application10invalidateEv>:
 801738c:	4b09      	ldr	r3, [pc, #36]	@ (80173b4 <_ZN8touchgfx11Application10invalidateEv+0x28>)
 801738e:	b082      	sub	sp, #8
 8017390:	2100      	movs	r1, #0
 8017392:	f9b3 2000 	ldrsh.w	r2, [r3]
 8017396:	4b08      	ldr	r3, [pc, #32]	@ (80173b8 <_ZN8touchgfx11Application10invalidateEv+0x2c>)
 8017398:	f8ad 2004 	strh.w	r2, [sp, #4]
 801739c:	aa02      	add	r2, sp, #8
 801739e:	f9b3 3000 	ldrsh.w	r3, [r3]
 80173a2:	9100      	str	r1, [sp, #0]
 80173a4:	f8ad 3006 	strh.w	r3, [sp, #6]
 80173a8:	6803      	ldr	r3, [r0, #0]
 80173aa:	e912 0006 	ldmdb	r2, {r1, r2}
 80173ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80173b0:	b002      	add	sp, #8
 80173b2:	4718      	bx	r3
 80173b4:	24028e14 	.word	0x24028e14
 80173b8:	24028e16 	.word	0x24028e16

080173bc <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE>:
 80173bc:	4b03      	ldr	r3, [pc, #12]	@ (80173cc <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0x10>)
 80173be:	6818      	ldr	r0, [r3, #0]
 80173c0:	b110      	cbz	r0, 80173c8 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0xc>
 80173c2:	6803      	ldr	r3, [r0, #0]
 80173c4:	69db      	ldr	r3, [r3, #28]
 80173c6:	4718      	bx	r3
 80173c8:	4770      	bx	lr
 80173ca:	bf00      	nop
 80173cc:	24028e64 	.word	0x24028e64

080173d0 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE>:
 80173d0:	4b03      	ldr	r3, [pc, #12]	@ (80173e0 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0x10>)
 80173d2:	6818      	ldr	r0, [r3, #0]
 80173d4:	b110      	cbz	r0, 80173dc <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0xc>
 80173d6:	6803      	ldr	r3, [r0, #0]
 80173d8:	6a1b      	ldr	r3, [r3, #32]
 80173da:	4718      	bx	r3
 80173dc:	4770      	bx	lr
 80173de:	bf00      	nop
 80173e0:	24028e64 	.word	0x24028e64

080173e4 <_ZN8touchgfx11Application16clearCachedAreasEv>:
 80173e4:	2300      	movs	r3, #0
 80173e6:	f8a0 30ec 	strh.w	r3, [r0, #236]	@ 0xec
 80173ea:	4770      	bx	lr

080173ec <_ZN8touchgfx11Application14handleKeyEventEh>:
 80173ec:	4b03      	ldr	r3, [pc, #12]	@ (80173fc <_ZN8touchgfx11Application14handleKeyEventEh+0x10>)
 80173ee:	6818      	ldr	r0, [r3, #0]
 80173f0:	b110      	cbz	r0, 80173f8 <_ZN8touchgfx11Application14handleKeyEventEh+0xc>
 80173f2:	6803      	ldr	r3, [r0, #0]
 80173f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80173f6:	4718      	bx	r3
 80173f8:	4770      	bx	lr
 80173fa:	bf00      	nop
 80173fc:	24028e64 	.word	0x24028e64

08017400 <_ZN8touchgfx11ApplicationD1Ev>:
 8017400:	4770      	bx	lr

08017402 <_ZN8touchgfx11ApplicationD0Ev>:
 8017402:	b510      	push	{r4, lr}
 8017404:	4604      	mov	r4, r0
 8017406:	f44f 719e 	mov.w	r1, #316	@ 0x13c
 801740a:	f00f fbc0 	bl	8026b8e <_ZdlPvj>
 801740e:	4620      	mov	r0, r4
 8017410:	bd10      	pop	{r4, pc}

08017412 <_ZNK8touchgfx4Rect9intersectERKS0_>:
 8017412:	b510      	push	{r4, lr}
 8017414:	f9b1 4000 	ldrsh.w	r4, [r1]
 8017418:	888a      	ldrh	r2, [r1, #4]
 801741a:	f9b0 3000 	ldrsh.w	r3, [r0]
 801741e:	4422      	add	r2, r4
 8017420:	b212      	sxth	r2, r2
 8017422:	4293      	cmp	r3, r2
 8017424:	da15      	bge.n	8017452 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 8017426:	8882      	ldrh	r2, [r0, #4]
 8017428:	4413      	add	r3, r2
 801742a:	b21b      	sxth	r3, r3
 801742c:	429c      	cmp	r4, r3
 801742e:	da10      	bge.n	8017452 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 8017430:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 8017434:	88c9      	ldrh	r1, [r1, #6]
 8017436:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 801743a:	4419      	add	r1, r3
 801743c:	b209      	sxth	r1, r1
 801743e:	428a      	cmp	r2, r1
 8017440:	da07      	bge.n	8017452 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 8017442:	88c0      	ldrh	r0, [r0, #6]
 8017444:	4410      	add	r0, r2
 8017446:	b200      	sxth	r0, r0
 8017448:	4283      	cmp	r3, r0
 801744a:	bfac      	ite	ge
 801744c:	2000      	movge	r0, #0
 801744e:	2001      	movlt	r0, #1
 8017450:	bd10      	pop	{r4, pc}
 8017452:	2000      	movs	r0, #0
 8017454:	e7fc      	b.n	8017450 <_ZNK8touchgfx4Rect9intersectERKS0_+0x3e>

08017456 <_ZN8touchgfx4Rect10restrictToEss>:
 8017456:	f9b0 3000 	ldrsh.w	r3, [r0]
 801745a:	2b00      	cmp	r3, #0
 801745c:	b510      	push	{r4, lr}
 801745e:	da04      	bge.n	801746a <_ZN8touchgfx4Rect10restrictToEss+0x14>
 8017460:	8884      	ldrh	r4, [r0, #4]
 8017462:	4423      	add	r3, r4
 8017464:	8083      	strh	r3, [r0, #4]
 8017466:	2300      	movs	r3, #0
 8017468:	8003      	strh	r3, [r0, #0]
 801746a:	f9b0 4000 	ldrsh.w	r4, [r0]
 801746e:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8017472:	1b09      	subs	r1, r1, r4
 8017474:	428b      	cmp	r3, r1
 8017476:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 801747a:	bfc8      	it	gt
 801747c:	8081      	strhgt	r1, [r0, #4]
 801747e:	2b00      	cmp	r3, #0
 8017480:	da04      	bge.n	801748c <_ZN8touchgfx4Rect10restrictToEss+0x36>
 8017482:	88c1      	ldrh	r1, [r0, #6]
 8017484:	440b      	add	r3, r1
 8017486:	80c3      	strh	r3, [r0, #6]
 8017488:	2300      	movs	r3, #0
 801748a:	8043      	strh	r3, [r0, #2]
 801748c:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
 8017490:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 8017494:	1a52      	subs	r2, r2, r1
 8017496:	4293      	cmp	r3, r2
 8017498:	bfc8      	it	gt
 801749a:	80c2      	strhgt	r2, [r0, #6]
 801749c:	bd10      	pop	{r4, pc}
	...

080174a0 <_ZN8touchgfx11Application4drawERNS_4RectE>:
 80174a0:	4b10      	ldr	r3, [pc, #64]	@ (80174e4 <_ZN8touchgfx11Application4drawERNS_4RectE+0x44>)
 80174a2:	b510      	push	{r4, lr}
 80174a4:	460c      	mov	r4, r1
 80174a6:	f9b3 2000 	ldrsh.w	r2, [r3]
 80174aa:	4b0f      	ldr	r3, [pc, #60]	@ (80174e8 <_ZN8touchgfx11Application4drawERNS_4RectE+0x48>)
 80174ac:	4620      	mov	r0, r4
 80174ae:	f9b3 1000 	ldrsh.w	r1, [r3]
 80174b2:	f7ff ffd0 	bl	8017456 <_ZN8touchgfx4Rect10restrictToEss>
 80174b6:	4b0d      	ldr	r3, [pc, #52]	@ (80174ec <_ZN8touchgfx11Application4drawERNS_4RectE+0x4c>)
 80174b8:	6818      	ldr	r0, [r3, #0]
 80174ba:	b190      	cbz	r0, 80174e2 <_ZN8touchgfx11Application4drawERNS_4RectE+0x42>
 80174bc:	6803      	ldr	r3, [r0, #0]
 80174be:	4621      	mov	r1, r4
 80174c0:	689b      	ldr	r3, [r3, #8]
 80174c2:	4798      	blx	r3
 80174c4:	4b0a      	ldr	r3, [pc, #40]	@ (80174f0 <_ZN8touchgfx11Application4drawERNS_4RectE+0x50>)
 80174c6:	6818      	ldr	r0, [r3, #0]
 80174c8:	b118      	cbz	r0, 80174d2 <_ZN8touchgfx11Application4drawERNS_4RectE+0x32>
 80174ca:	6803      	ldr	r3, [r0, #0]
 80174cc:	4621      	mov	r1, r4
 80174ce:	689b      	ldr	r3, [r3, #8]
 80174d0:	4798      	blx	r3
 80174d2:	4b08      	ldr	r3, [pc, #32]	@ (80174f4 <_ZN8touchgfx11Application4drawERNS_4RectE+0x54>)
 80174d4:	4621      	mov	r1, r4
 80174d6:	6818      	ldr	r0, [r3, #0]
 80174d8:	6803      	ldr	r3, [r0, #0]
 80174da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80174de:	69db      	ldr	r3, [r3, #28]
 80174e0:	4718      	bx	r3
 80174e2:	bd10      	pop	{r4, pc}
 80174e4:	24028e16 	.word	0x24028e16
 80174e8:	24028e14 	.word	0x24028e14
 80174ec:	24028e64 	.word	0x24028e64
 80174f0:	24028e60 	.word	0x24028e60
 80174f4:	24028e20 	.word	0x24028e20

080174f8 <_ZNK8touchgfx4Rect8includesERKS0_>:
 80174f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80174fa:	4606      	mov	r6, r0
 80174fc:	4608      	mov	r0, r1
 80174fe:	460f      	mov	r7, r1
 8017500:	f7f8 fac1 	bl	800fa86 <_ZNK8touchgfx4Rect7isEmptyEv>
 8017504:	b9e8      	cbnz	r0, 8017542 <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 8017506:	f9b7 5000 	ldrsh.w	r5, [r7]
 801750a:	f9b6 4000 	ldrsh.w	r4, [r6]
 801750e:	42a5      	cmp	r5, r4
 8017510:	db17      	blt.n	8017542 <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 8017512:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8017516:	f9b6 3002 	ldrsh.w	r3, [r6, #2]
 801751a:	429a      	cmp	r2, r3
 801751c:	db11      	blt.n	8017542 <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 801751e:	88b9      	ldrh	r1, [r7, #4]
 8017520:	440d      	add	r5, r1
 8017522:	88b1      	ldrh	r1, [r6, #4]
 8017524:	440c      	add	r4, r1
 8017526:	b22d      	sxth	r5, r5
 8017528:	b224      	sxth	r4, r4
 801752a:	42a5      	cmp	r5, r4
 801752c:	dc09      	bgt.n	8017542 <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 801752e:	88f8      	ldrh	r0, [r7, #6]
 8017530:	4410      	add	r0, r2
 8017532:	88f2      	ldrh	r2, [r6, #6]
 8017534:	4413      	add	r3, r2
 8017536:	b200      	sxth	r0, r0
 8017538:	b21b      	sxth	r3, r3
 801753a:	4298      	cmp	r0, r3
 801753c:	bfcc      	ite	gt
 801753e:	2000      	movgt	r0, #0
 8017540:	2001      	movle	r0, #1
 8017542:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08017544 <_ZN8touchgfx4Rect11expandToFitERKS0_>:
 8017544:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017546:	4604      	mov	r4, r0
 8017548:	4608      	mov	r0, r1
 801754a:	460d      	mov	r5, r1
 801754c:	f7f8 fa9b 	bl	800fa86 <_ZNK8touchgfx4Rect7isEmptyEv>
 8017550:	b978      	cbnz	r0, 8017572 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
 8017552:	4620      	mov	r0, r4
 8017554:	f7f8 fa97 	bl	800fa86 <_ZNK8touchgfx4Rect7isEmptyEv>
 8017558:	f9b5 6000 	ldrsh.w	r6, [r5]
 801755c:	b150      	cbz	r0, 8017574 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x30>
 801755e:	8026      	strh	r6, [r4, #0]
 8017560:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 8017564:	8063      	strh	r3, [r4, #2]
 8017566:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 801756a:	80a3      	strh	r3, [r4, #4]
 801756c:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 8017570:	80e3      	strh	r3, [r4, #6]
 8017572:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017574:	f9b4 1000 	ldrsh.w	r1, [r4]
 8017578:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 801757c:	42b1      	cmp	r1, r6
 801757e:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 8017582:	f8b5 c004 	ldrh.w	ip, [r5, #4]
 8017586:	460f      	mov	r7, r1
 8017588:	88ed      	ldrh	r5, [r5, #6]
 801758a:	bfa8      	it	ge
 801758c:	4637      	movge	r7, r6
 801758e:	4293      	cmp	r3, r2
 8017590:	4618      	mov	r0, r3
 8017592:	4466      	add	r6, ip
 8017594:	f8b4 c004 	ldrh.w	ip, [r4, #4]
 8017598:	bfa8      	it	ge
 801759a:	4610      	movge	r0, r2
 801759c:	442a      	add	r2, r5
 801759e:	88e5      	ldrh	r5, [r4, #6]
 80175a0:	4461      	add	r1, ip
 80175a2:	b236      	sxth	r6, r6
 80175a4:	8027      	strh	r7, [r4, #0]
 80175a6:	442b      	add	r3, r5
 80175a8:	b209      	sxth	r1, r1
 80175aa:	b212      	sxth	r2, r2
 80175ac:	8060      	strh	r0, [r4, #2]
 80175ae:	b21b      	sxth	r3, r3
 80175b0:	428e      	cmp	r6, r1
 80175b2:	bfac      	ite	ge
 80175b4:	ebc7 0106 	rsbge	r1, r7, r6
 80175b8:	ebc7 0101 	rsblt	r1, r7, r1
 80175bc:	429a      	cmp	r2, r3
 80175be:	bfac      	ite	ge
 80175c0:	ebc0 0202 	rsbge	r2, r0, r2
 80175c4:	ebc0 0203 	rsblt	r2, r0, r3
 80175c8:	80a1      	strh	r1, [r4, #4]
 80175ca:	80e2      	strh	r2, [r4, #6]
 80175cc:	e7d1      	b.n	8017572 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
	...

080175d0 <_ZN8touchgfx11Application11getInstanceEv>:
 80175d0:	4b01      	ldr	r3, [pc, #4]	@ (80175d8 <_ZN8touchgfx11Application11getInstanceEv+0x8>)
 80175d2:	6818      	ldr	r0, [r3, #0]
 80175d4:	4770      	bx	lr
 80175d6:	bf00      	nop
 80175d8:	24028e74 	.word	0x24028e74

080175dc <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv>:
 80175dc:	2300      	movs	r3, #0
 80175de:	b510      	push	{r4, lr}
 80175e0:	f8a0 30a4 	strh.w	r3, [r0, #164]	@ 0xa4
 80175e4:	4604      	mov	r4, r0
 80175e6:	f8b0 3080 	ldrh.w	r3, [r0, #128]	@ 0x80
 80175ea:	f8a0 30a6 	strh.w	r3, [r0, #166]	@ 0xa6
 80175ee:	f8b4 30a4 	ldrh.w	r3, [r4, #164]	@ 0xa4
 80175f2:	f8b4 20a6 	ldrh.w	r2, [r4, #166]	@ 0xa6
 80175f6:	429a      	cmp	r2, r3
 80175f8:	d90e      	bls.n	8017618 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv+0x3c>
 80175fa:	18e2      	adds	r2, r4, r3
 80175fc:	f892 2084 	ldrb.w	r2, [r2, #132]	@ 0x84
 8017600:	b122      	cbz	r2, 801760c <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv+0x30>
 8017602:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
 8017606:	6803      	ldr	r3, [r0, #0]
 8017608:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801760a:	4798      	blx	r3
 801760c:	f8b4 30a4 	ldrh.w	r3, [r4, #164]	@ 0xa4
 8017610:	3301      	adds	r3, #1
 8017612:	f8a4 30a4 	strh.w	r3, [r4, #164]	@ 0xa4
 8017616:	e7ea      	b.n	80175ee <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv+0x12>
 8017618:	bd10      	pop	{r4, pc}

0801761a <_ZN8touchgfx11Application12TimerWidgets6removeEPKNS_8DrawableE>:
 801761a:	b530      	push	{r4, r5, lr}
 801761c:	2200      	movs	r2, #0
 801761e:	f8b0 5080 	ldrh.w	r5, [r0, #128]	@ 0x80
 8017622:	b293      	uxth	r3, r2
 8017624:	429d      	cmp	r5, r3
 8017626:	d90e      	bls.n	8017646 <_ZN8touchgfx11Application12TimerWidgets6removeEPKNS_8DrawableE+0x2c>
 8017628:	f850 3022 	ldr.w	r3, [r0, r2, lsl #2]
 801762c:	428b      	cmp	r3, r1
 801762e:	d10b      	bne.n	8017648 <_ZN8touchgfx11Application12TimerWidgets6removeEPKNS_8DrawableE+0x2e>
 8017630:	1884      	adds	r4, r0, r2
 8017632:	f894 3084 	ldrb.w	r3, [r4, #132]	@ 0x84
 8017636:	b13b      	cbz	r3, 8017648 <_ZN8touchgfx11Application12TimerWidgets6removeEPKNS_8DrawableE+0x2e>
 8017638:	3b01      	subs	r3, #1
 801763a:	b2db      	uxtb	r3, r3
 801763c:	f884 3084 	strb.w	r3, [r4, #132]	@ 0x84
 8017640:	b90b      	cbnz	r3, 8017646 <_ZN8touchgfx11Application12TimerWidgets6removeEPKNS_8DrawableE+0x2c>
 8017642:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 8017646:	bd30      	pop	{r4, r5, pc}
 8017648:	3201      	adds	r2, #1
 801764a:	e7ea      	b.n	8017622 <_ZN8touchgfx11Application12TimerWidgets6removeEPKNS_8DrawableE+0x8>

0801764c <_ZN8touchgfx11Application12TimerWidgets5clearEv>:
 801764c:	2300      	movs	r3, #0
 801764e:	f100 0284 	add.w	r2, r0, #132	@ 0x84
 8017652:	30a4      	adds	r0, #164	@ 0xa4
 8017654:	f820 3c24 	strh.w	r3, [r0, #-36]
 8017658:	f802 3b01 	strb.w	r3, [r2], #1
 801765c:	4282      	cmp	r2, r0
 801765e:	d1fb      	bne.n	8017658 <_ZN8touchgfx11Application12TimerWidgets5clearEv+0xc>
 8017660:	4770      	bx	lr
	...

08017664 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE>:
 8017664:	b570      	push	{r4, r5, r6, lr}
 8017666:	4c0b      	ldr	r4, [pc, #44]	@ (8017694 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x30>)
 8017668:	4605      	mov	r5, r0
 801766a:	460e      	mov	r6, r1
 801766c:	6820      	ldr	r0, [r4, #0]
 801766e:	b110      	cbz	r0, 8017676 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x12>
 8017670:	6803      	ldr	r3, [r0, #0]
 8017672:	695b      	ldr	r3, [r3, #20]
 8017674:	4798      	blx	r3
 8017676:	1d28      	adds	r0, r5, #4
 8017678:	f7ff ffe8 	bl	801764c <_ZN8touchgfx11Application12TimerWidgets5clearEv>
 801767c:	6026      	str	r6, [r4, #0]
 801767e:	6833      	ldr	r3, [r6, #0]
 8017680:	4630      	mov	r0, r6
 8017682:	68db      	ldr	r3, [r3, #12]
 8017684:	4798      	blx	r3
 8017686:	682b      	ldr	r3, [r5, #0]
 8017688:	4628      	mov	r0, r5
 801768a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801768c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017690:	4718      	bx	r3
 8017692:	bf00      	nop
 8017694:	24028e64 	.word	0x24028e64

08017698 <_ZN8touchgfx11Application12TimerWidgets7compactEv>:
 8017698:	2300      	movs	r3, #0
 801769a:	f8b0 c080 	ldrh.w	ip, [r0, #128]	@ 0x80
 801769e:	f8b0 10a4 	ldrh.w	r1, [r0, #164]	@ 0xa4
 80176a2:	461a      	mov	r2, r3
 80176a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80176a6:	461c      	mov	r4, r3
 80176a8:	461d      	mov	r5, r3
 80176aa:	459c      	cmp	ip, r3
 80176ac:	dd1a      	ble.n	80176e4 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x4c>
 80176ae:	18c6      	adds	r6, r0, r3
 80176b0:	f896 6084 	ldrb.w	r6, [r6, #132]	@ 0x84
 80176b4:	b16e      	cbz	r6, 80176d2 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x3a>
 80176b6:	429a      	cmp	r2, r3
 80176b8:	d008      	beq.n	80176cc <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x34>
 80176ba:	f850 7023 	ldr.w	r7, [r0, r3, lsl #2]
 80176be:	fa1f fe82 	uxth.w	lr, r2
 80176c2:	f840 702e 	str.w	r7, [r0, lr, lsl #2]
 80176c6:	1887      	adds	r7, r0, r2
 80176c8:	f887 6084 	strb.w	r6, [r7, #132]	@ 0x84
 80176cc:	3201      	adds	r2, #1
 80176ce:	3301      	adds	r3, #1
 80176d0:	e7eb      	b.n	80176aa <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x12>
 80176d2:	4299      	cmp	r1, r3
 80176d4:	f8b0 60a6 	ldrh.w	r6, [r0, #166]	@ 0xa6
 80176d8:	bfa8      	it	ge
 80176da:	3501      	addge	r5, #1
 80176dc:	429e      	cmp	r6, r3
 80176de:	bfc8      	it	gt
 80176e0:	3401      	addgt	r4, #1
 80176e2:	e7f4      	b.n	80176ce <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x36>
 80176e4:	f8b0 30a6 	ldrh.w	r3, [r0, #166]	@ 0xa6
 80176e8:	1b49      	subs	r1, r1, r5
 80176ea:	1b1b      	subs	r3, r3, r4
 80176ec:	f8a0 10a4 	strh.w	r1, [r0, #164]	@ 0xa4
 80176f0:	f8a0 30a6 	strh.w	r3, [r0, #166]	@ 0xa6
 80176f4:	f8b0 3080 	ldrh.w	r3, [r0, #128]	@ 0x80
 80176f8:	4293      	cmp	r3, r2
 80176fa:	dd03      	ble.n	8017704 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x6c>
 80176fc:	3b01      	subs	r3, #1
 80176fe:	f8a0 3080 	strh.w	r3, [r0, #128]	@ 0x80
 8017702:	e7f7      	b.n	80176f4 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x5c>
 8017704:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08017708 <_ZN8touchgfx11Application15handleTickEventEv>:
 8017708:	b570      	push	{r4, r5, r6, lr}
 801770a:	4d16      	ldr	r5, [pc, #88]	@ (8017764 <_ZN8touchgfx11Application15handleTickEventEv+0x5c>)
 801770c:	4604      	mov	r4, r0
 801770e:	6828      	ldr	r0, [r5, #0]
 8017710:	b140      	cbz	r0, 8017724 <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 8017712:	7a03      	ldrb	r3, [r0, #8]
 8017714:	b933      	cbnz	r3, 8017724 <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 8017716:	f884 3138 	strb.w	r3, [r4, #312]	@ 0x138
 801771a:	6803      	ldr	r3, [r0, #0]
 801771c:	689b      	ldr	r3, [r3, #8]
 801771e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017722:	4718      	bx	r3
 8017724:	f894 3138 	ldrb.w	r3, [r4, #312]	@ 0x138
 8017728:	4e0f      	ldr	r6, [pc, #60]	@ (8017768 <_ZN8touchgfx11Application15handleTickEventEv+0x60>)
 801772a:	b973      	cbnz	r3, 801774a <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 801772c:	b168      	cbz	r0, 801774a <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 801772e:	7a03      	ldrb	r3, [r0, #8]
 8017730:	b15b      	cbz	r3, 801774a <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 8017732:	6830      	ldr	r0, [r6, #0]
 8017734:	b110      	cbz	r0, 801773c <_ZN8touchgfx11Application15handleTickEventEv+0x34>
 8017736:	6803      	ldr	r3, [r0, #0]
 8017738:	691b      	ldr	r3, [r3, #16]
 801773a:	4798      	blx	r3
 801773c:	6828      	ldr	r0, [r5, #0]
 801773e:	6803      	ldr	r3, [r0, #0]
 8017740:	68db      	ldr	r3, [r3, #12]
 8017742:	4798      	blx	r3
 8017744:	2301      	movs	r3, #1
 8017746:	f884 3138 	strb.w	r3, [r4, #312]	@ 0x138
 801774a:	3404      	adds	r4, #4
 801774c:	4620      	mov	r0, r4
 801774e:	f7ff ff45 	bl	80175dc <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv>
 8017752:	4620      	mov	r0, r4
 8017754:	f7ff ffa0 	bl	8017698 <_ZN8touchgfx11Application12TimerWidgets7compactEv>
 8017758:	6830      	ldr	r0, [r6, #0]
 801775a:	b110      	cbz	r0, 8017762 <_ZN8touchgfx11Application15handleTickEventEv+0x5a>
 801775c:	6803      	ldr	r3, [r0, #0]
 801775e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017760:	e7dd      	b.n	801771e <_ZN8touchgfx11Application15handleTickEventEv+0x16>
 8017762:	bd70      	pop	{r4, r5, r6, pc}
 8017764:	24028e68 	.word	0x24028e68
 8017768:	24028e64 	.word	0x24028e64

0801776c <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE>:
 801776c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801776e:	2300      	movs	r3, #0
 8017770:	4604      	mov	r4, r0
 8017772:	460d      	mov	r5, r1
 8017774:	f8b0 1080 	ldrh.w	r1, [r0, #128]	@ 0x80
 8017778:	4618      	mov	r0, r3
 801777a:	b29a      	uxth	r2, r3
 801777c:	4291      	cmp	r1, r2
 801777e:	d912      	bls.n	80177a6 <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE+0x3a>
 8017780:	f854 7023 	ldr.w	r7, [r4, r3, lsl #2]
 8017784:	18e6      	adds	r6, r4, r3
 8017786:	42af      	cmp	r7, r5
 8017788:	f896 2084 	ldrb.w	r2, [r6, #132]	@ 0x84
 801778c:	d105      	bne.n	801779a <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE+0x2e>
 801778e:	2aff      	cmp	r2, #255	@ 0xff
 8017790:	d002      	beq.n	8017798 <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE+0x2c>
 8017792:	3201      	adds	r2, #1
 8017794:	f886 2084 	strb.w	r2, [r6, #132]	@ 0x84
 8017798:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801779a:	2a00      	cmp	r2, #0
 801779c:	f103 0301 	add.w	r3, r3, #1
 80177a0:	bf08      	it	eq
 80177a2:	2001      	moveq	r0, #1
 80177a4:	e7e9      	b.n	801777a <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE+0xe>
 80177a6:	b120      	cbz	r0, 80177b2 <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE+0x46>
 80177a8:	2920      	cmp	r1, #32
 80177aa:	d102      	bne.n	80177b2 <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE+0x46>
 80177ac:	4620      	mov	r0, r4
 80177ae:	f7ff ff73 	bl	8017698 <_ZN8touchgfx11Application12TimerWidgets7compactEv>
 80177b2:	f8b4 3080 	ldrh.w	r3, [r4, #128]	@ 0x80
 80177b6:	2b1f      	cmp	r3, #31
 80177b8:	d8ee      	bhi.n	8017798 <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE+0x2c>
 80177ba:	18e2      	adds	r2, r4, r3
 80177bc:	2101      	movs	r1, #1
 80177be:	f882 1084 	strb.w	r1, [r2, #132]	@ 0x84
 80177c2:	185a      	adds	r2, r3, r1
 80177c4:	f8a4 2080 	strh.w	r2, [r4, #128]	@ 0x80
 80177c8:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 80177cc:	e7e4      	b.n	8017798 <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE+0x2c>

080177ce <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>:
 80177ce:	4603      	mov	r3, r0
 80177d0:	f100 0140 	add.w	r1, r0, #64	@ 0x40
 80177d4:	2200      	movs	r2, #0
 80177d6:	801a      	strh	r2, [r3, #0]
 80177d8:	3308      	adds	r3, #8
 80177da:	f823 2c06 	strh.w	r2, [r3, #-6]
 80177de:	f823 2c04 	strh.w	r2, [r3, #-4]
 80177e2:	f823 2c02 	strh.w	r2, [r3, #-2]
 80177e6:	428b      	cmp	r3, r1
 80177e8:	d1f5      	bne.n	80177d6 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev+0x8>
 80177ea:	f8a0 2040 	strh.w	r2, [r0, #64]	@ 0x40
 80177ee:	4770      	bx	lr

080177f0 <_ZN8touchgfx11ApplicationC1Ev>:
 80177f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80177f2:	4b1d      	ldr	r3, [pc, #116]	@ (8017868 <_ZN8touchgfx11ApplicationC1Ev+0x78>)
 80177f4:	4606      	mov	r6, r0
 80177f6:	4604      	mov	r4, r0
 80177f8:	2500      	movs	r5, #0
 80177fa:	f846 3b04 	str.w	r3, [r6], #4
 80177fe:	22a8      	movs	r2, #168	@ 0xa8
 8017800:	2100      	movs	r1, #0
 8017802:	4630      	mov	r0, r6
 8017804:	f00f ffd8 	bl	80277b8 <memset>
 8017808:	f8a4 5084 	strh.w	r5, [r4, #132]	@ 0x84
 801780c:	f104 00ac 	add.w	r0, r4, #172	@ 0xac
 8017810:	4f16      	ldr	r7, [pc, #88]	@ (801786c <_ZN8touchgfx11ApplicationC1Ev+0x7c>)
 8017812:	f7ff ffdc 	bl	80177ce <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 8017816:	f104 00ee 	add.w	r0, r4, #238	@ 0xee
 801781a:	f7ff ffd8 	bl	80177ce <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 801781e:	f8a4 5130 	strh.w	r5, [r4, #304]	@ 0x130
 8017822:	f8a4 5132 	strh.w	r5, [r4, #306]	@ 0x132
 8017826:	f8a4 5134 	strh.w	r5, [r4, #308]	@ 0x134
 801782a:	f8a4 5136 	strh.w	r5, [r4, #310]	@ 0x136
 801782e:	f884 5138 	strb.w	r5, [r4, #312]	@ 0x138
 8017832:	490f      	ldr	r1, [pc, #60]	@ (8017870 <_ZN8touchgfx11ApplicationC1Ev+0x80>)
 8017834:	480f      	ldr	r0, [pc, #60]	@ (8017874 <_ZN8touchgfx11ApplicationC1Ev+0x84>)
 8017836:	f00d fc6d 	bl	8025114 <CRC_Lock>
 801783a:	4b0f      	ldr	r3, [pc, #60]	@ (8017878 <_ZN8touchgfx11ApplicationC1Ev+0x88>)
 801783c:	b158      	cbz	r0, 8017856 <_ZN8touchgfx11ApplicationC1Ev+0x66>
 801783e:	801d      	strh	r5, [r3, #0]
 8017840:	2300      	movs	r3, #0
 8017842:	4a0e      	ldr	r2, [pc, #56]	@ (801787c <_ZN8touchgfx11ApplicationC1Ev+0x8c>)
 8017844:	4630      	mov	r0, r6
 8017846:	6013      	str	r3, [r2, #0]
 8017848:	4a0d      	ldr	r2, [pc, #52]	@ (8017880 <_ZN8touchgfx11ApplicationC1Ev+0x90>)
 801784a:	603b      	str	r3, [r7, #0]
 801784c:	6013      	str	r3, [r2, #0]
 801784e:	f7ff fefd 	bl	801764c <_ZN8touchgfx11Application12TimerWidgets5clearEv>
 8017852:	4620      	mov	r0, r4
 8017854:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017856:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 801785a:	2002      	movs	r0, #2
 801785c:	801a      	strh	r2, [r3, #0]
 801785e:	6038      	str	r0, [r7, #0]
 8017860:	f001 fe6c 	bl	801953c <_ZN8touchgfx6Screen4drawEv>
 8017864:	e7ec      	b.n	8017840 <_ZN8touchgfx11ApplicationC1Ev+0x50>
 8017866:	bf00      	nop
 8017868:	0802c65c 	.word	0x0802c65c
 801786c:	24028e64 	.word	0x24028e64
 8017870:	b5e8b5cd 	.word	0xb5e8b5cd
 8017874:	f407a5c2 	.word	0xf407a5c2
 8017878:	2400007c 	.word	0x2400007c
 801787c:	24028e74 	.word	0x24028e74
 8017880:	24028e68 	.word	0x24028e68

08017884 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>:
 8017884:	f8b0 3040 	ldrh.w	r3, [r0, #64]	@ 0x40
 8017888:	3b01      	subs	r3, #1
 801788a:	b29b      	uxth	r3, r3
 801788c:	428b      	cmp	r3, r1
 801788e:	f8a0 3040 	strh.w	r3, [r0, #64]	@ 0x40
 8017892:	b510      	push	{r4, lr}
 8017894:	d908      	bls.n	80178a8 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x24>
 8017896:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 801789a:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
 801789e:	681a      	ldr	r2, [r3, #0]
 80178a0:	f840 2031 	str.w	r2, [r0, r1, lsl #3]
 80178a4:	685a      	ldr	r2, [r3, #4]
 80178a6:	6062      	str	r2, [r4, #4]
 80178a8:	bd10      	pop	{r4, pc}
	...

080178ac <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>:
 80178ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80178b0:	b08f      	sub	sp, #60	@ 0x3c
 80178b2:	4b8f      	ldr	r3, [pc, #572]	@ (8017af0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x244>)
 80178b4:	4683      	mov	fp, r0
 80178b6:	ac0a      	add	r4, sp, #40	@ 0x28
 80178b8:	e884 0006 	stmia.w	r4, {r1, r2}
 80178bc:	f9b3 2000 	ldrsh.w	r2, [r3]
 80178c0:	4620      	mov	r0, r4
 80178c2:	4b8c      	ldr	r3, [pc, #560]	@ (8017af4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x248>)
 80178c4:	f9b3 1000 	ldrsh.w	r1, [r3]
 80178c8:	f7ff fdc5 	bl	8017456 <_ZN8touchgfx4Rect10restrictToEss>
 80178cc:	4620      	mov	r0, r4
 80178ce:	f7f8 f8da 	bl	800fa86 <_ZNK8touchgfx4Rect7isEmptyEv>
 80178d2:	2800      	cmp	r0, #0
 80178d4:	d16a      	bne.n	80179ac <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 80178d6:	9403      	str	r4, [sp, #12]
 80178d8:	f8bb 40ec 	ldrh.w	r4, [fp, #236]	@ 0xec
 80178dc:	f10b 03ac 	add.w	r3, fp, #172	@ 0xac
 80178e0:	eb0b 05c4 	add.w	r5, fp, r4, lsl #3
 80178e4:	9301      	str	r3, [sp, #4]
 80178e6:	35a4      	adds	r5, #164	@ 0xa4
 80178e8:	b15c      	cbz	r4, 8017902 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x56>
 80178ea:	4629      	mov	r1, r5
 80178ec:	9803      	ldr	r0, [sp, #12]
 80178ee:	f7ff fe03 	bl	80174f8 <_ZNK8touchgfx4Rect8includesERKS0_>
 80178f2:	3c01      	subs	r4, #1
 80178f4:	b118      	cbz	r0, 80178fe <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52>
 80178f6:	b2a1      	uxth	r1, r4
 80178f8:	9801      	ldr	r0, [sp, #4]
 80178fa:	f7ff ffc3 	bl	8017884 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 80178fe:	3d08      	subs	r5, #8
 8017900:	e7f2      	b.n	80178e8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3c>
 8017902:	f8bb a0ec 	ldrh.w	sl, [fp, #236]	@ 0xec
 8017906:	f10a 33ff 	add.w	r3, sl, #4294967295
 801790a:	f8cd a010 	str.w	sl, [sp, #16]
 801790e:	9302      	str	r3, [sp, #8]
 8017910:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 8017914:	f103 04a4 	add.w	r4, r3, #164	@ 0xa4
 8017918:	9306      	str	r3, [sp, #24]
 801791a:	445c      	add	r4, fp
 801791c:	2500      	movs	r5, #0
 801791e:	4626      	mov	r6, r4
 8017920:	f8cd a014 	str.w	sl, [sp, #20]
 8017924:	462f      	mov	r7, r5
 8017926:	9b05      	ldr	r3, [sp, #20]
 8017928:	2b00      	cmp	r3, #0
 801792a:	d073      	beq.n	8017a14 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x168>
 801792c:	9903      	ldr	r1, [sp, #12]
 801792e:	4630      	mov	r0, r6
 8017930:	f7ff fd6f 	bl	8017412 <_ZNK8touchgfx4Rect9intersectERKS0_>
 8017934:	b350      	cbz	r0, 801798c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xe0>
 8017936:	f9bd e028 	ldrsh.w	lr, [sp, #40]	@ 0x28
 801793a:	f9b6 c000 	ldrsh.w	ip, [r6]
 801793e:	f9bd 802a 	ldrsh.w	r8, [sp, #42]	@ 0x2a
 8017942:	45e6      	cmp	lr, ip
 8017944:	f9b6 9002 	ldrsh.w	r9, [r6, #2]
 8017948:	db33      	blt.n	80179b2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x106>
 801794a:	f8bd 202c 	ldrh.w	r2, [sp, #44]	@ 0x2c
 801794e:	88b3      	ldrh	r3, [r6, #4]
 8017950:	4472      	add	r2, lr
 8017952:	4463      	add	r3, ip
 8017954:	b212      	sxth	r2, r2
 8017956:	b21b      	sxth	r3, r3
 8017958:	429a      	cmp	r2, r3
 801795a:	dc2a      	bgt.n	80179b2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x106>
 801795c:	fa1f f289 	uxth.w	r2, r9
 8017960:	88f3      	ldrh	r3, [r6, #6]
 8017962:	45c8      	cmp	r8, r9
 8017964:	f8bd 102e 	ldrh.w	r1, [sp, #46]	@ 0x2e
 8017968:	4413      	add	r3, r2
 801796a:	fa1f fc88 	uxth.w	ip, r8
 801796e:	b29b      	uxth	r3, r3
 8017970:	fa0f fe83 	sxth.w	lr, r3
 8017974:	db0f      	blt.n	8017996 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xea>
 8017976:	eba3 030c 	sub.w	r3, r3, ip
 801797a:	1ac9      	subs	r1, r1, r3
 801797c:	b209      	sxth	r1, r1
 801797e:	2900      	cmp	r1, #0
 8017980:	f8ad 102e 	strh.w	r1, [sp, #46]	@ 0x2e
 8017984:	dd12      	ble.n	80179ac <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 8017986:	f8ad e02a 	strh.w	lr, [sp, #42]	@ 0x2a
 801798a:	4605      	mov	r5, r0
 801798c:	9b05      	ldr	r3, [sp, #20]
 801798e:	3e08      	subs	r6, #8
 8017990:	3b01      	subs	r3, #1
 8017992:	9305      	str	r3, [sp, #20]
 8017994:	e7c7      	b.n	8017926 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x7a>
 8017996:	4461      	add	r1, ip
 8017998:	b209      	sxth	r1, r1
 801799a:	4571      	cmp	r1, lr
 801799c:	dc38      	bgt.n	8017a10 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 801799e:	eba2 020c 	sub.w	r2, r2, ip
 80179a2:	b212      	sxth	r2, r2
 80179a4:	f8ad 202e 	strh.w	r2, [sp, #46]	@ 0x2e
 80179a8:	2a00      	cmp	r2, #0
 80179aa:	dcee      	bgt.n	801798a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xde>
 80179ac:	b00f      	add	sp, #60	@ 0x3c
 80179ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80179b2:	45c8      	cmp	r8, r9
 80179b4:	db2c      	blt.n	8017a10 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 80179b6:	88f3      	ldrh	r3, [r6, #6]
 80179b8:	4499      	add	r9, r3
 80179ba:	f8bd 302e 	ldrh.w	r3, [sp, #46]	@ 0x2e
 80179be:	4498      	add	r8, r3
 80179c0:	fa0f f989 	sxth.w	r9, r9
 80179c4:	fa0f f888 	sxth.w	r8, r8
 80179c8:	45c1      	cmp	r9, r8
 80179ca:	db21      	blt.n	8017a10 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 80179cc:	fa1f f28c 	uxth.w	r2, ip
 80179d0:	88b3      	ldrh	r3, [r6, #4]
 80179d2:	45e6      	cmp	lr, ip
 80179d4:	f8bd 102c 	ldrh.w	r1, [sp, #44]	@ 0x2c
 80179d8:	4413      	add	r3, r2
 80179da:	fa1f f88e 	uxth.w	r8, lr
 80179de:	b29b      	uxth	r3, r3
 80179e0:	fa0f f983 	sxth.w	r9, r3
 80179e4:	db0a      	blt.n	80179fc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x150>
 80179e6:	eba3 0308 	sub.w	r3, r3, r8
 80179ea:	1ac9      	subs	r1, r1, r3
 80179ec:	b209      	sxth	r1, r1
 80179ee:	2900      	cmp	r1, #0
 80179f0:	f8ad 102c 	strh.w	r1, [sp, #44]	@ 0x2c
 80179f4:	ddda      	ble.n	80179ac <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 80179f6:	f8ad 9028 	strh.w	r9, [sp, #40]	@ 0x28
 80179fa:	e7c6      	b.n	801798a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xde>
 80179fc:	4441      	add	r1, r8
 80179fe:	b209      	sxth	r1, r1
 8017a00:	4549      	cmp	r1, r9
 8017a02:	dc05      	bgt.n	8017a10 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 8017a04:	eba2 0208 	sub.w	r2, r2, r8
 8017a08:	b212      	sxth	r2, r2
 8017a0a:	f8ad 202c 	strh.w	r2, [sp, #44]	@ 0x2c
 8017a0e:	e7cb      	b.n	80179a8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xfc>
 8017a10:	4607      	mov	r7, r0
 8017a12:	e7bb      	b.n	801798c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xe0>
 8017a14:	2d00      	cmp	r5, #0
 8017a16:	d181      	bne.n	801791c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x70>
 8017a18:	2f00      	cmp	r7, #0
 8017a1a:	f000 81dd 	beq.w	8017dd8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52c>
 8017a1e:	f9bd 6028 	ldrsh.w	r6, [sp, #40]	@ 0x28
 8017a22:	f9bd 702a 	ldrsh.w	r7, [sp, #42]	@ 0x2a
 8017a26:	b2b3      	uxth	r3, r6
 8017a28:	f8bd a02e 	ldrh.w	sl, [sp, #46]	@ 0x2e
 8017a2c:	9305      	str	r3, [sp, #20]
 8017a2e:	9a05      	ldr	r2, [sp, #20]
 8017a30:	f8bd 302c 	ldrh.w	r3, [sp, #44]	@ 0x2c
 8017a34:	4413      	add	r3, r2
 8017a36:	b2ba      	uxth	r2, r7
 8017a38:	4492      	add	sl, r2
 8017a3a:	b29b      	uxth	r3, r3
 8017a3c:	fa1f fa8a 	uxth.w	sl, sl
 8017a40:	fa0f f883 	sxth.w	r8, r3
 8017a44:	fa0f f98a 	sxth.w	r9, sl
 8017a48:	e9cd 2307 	strd	r2, r3, [sp, #28]
 8017a4c:	9b04      	ldr	r3, [sp, #16]
 8017a4e:	2b00      	cmp	r3, #0
 8017a50:	d052      	beq.n	8017af8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x24c>
 8017a52:	9903      	ldr	r1, [sp, #12]
 8017a54:	4620      	mov	r0, r4
 8017a56:	f7ff fcdc 	bl	8017412 <_ZNK8touchgfx4Rect9intersectERKS0_>
 8017a5a:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8017a5e:	b1c0      	cbz	r0, 8017a92 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 8017a60:	f9b4 e000 	ldrsh.w	lr, [r4]
 8017a64:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 8017a68:	4576      	cmp	r6, lr
 8017a6a:	dc22      	bgt.n	8017ab2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x206>
 8017a6c:	f8b4 c004 	ldrh.w	ip, [r4, #4]
 8017a70:	44f4      	add	ip, lr
 8017a72:	fa0f fc8c 	sxth.w	ip, ip
 8017a76:	45e0      	cmp	r8, ip
 8017a78:	db1b      	blt.n	8017ab2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x206>
 8017a7a:	428f      	cmp	r7, r1
 8017a7c:	fa1f fc81 	uxth.w	ip, r1
 8017a80:	88e1      	ldrh	r1, [r4, #6]
 8017a82:	dc0d      	bgt.n	8017aa0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f4>
 8017a84:	ebaa 0c0c 	sub.w	ip, sl, ip
 8017a88:	f8a4 9002 	strh.w	r9, [r4, #2]
 8017a8c:	eba1 010c 	sub.w	r1, r1, ip
 8017a90:	80e1      	strh	r1, [r4, #6]
 8017a92:	4628      	mov	r0, r5
 8017a94:	9904      	ldr	r1, [sp, #16]
 8017a96:	3c08      	subs	r4, #8
 8017a98:	4605      	mov	r5, r0
 8017a9a:	3901      	subs	r1, #1
 8017a9c:	9104      	str	r1, [sp, #16]
 8017a9e:	e7d3      	b.n	8017a48 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x19c>
 8017aa0:	4461      	add	r1, ip
 8017aa2:	b209      	sxth	r1, r1
 8017aa4:	4549      	cmp	r1, r9
 8017aa6:	dcf5      	bgt.n	8017a94 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e8>
 8017aa8:	eba2 0c0c 	sub.w	ip, r2, ip
 8017aac:	f8a4 c006 	strh.w	ip, [r4, #6]
 8017ab0:	e7ef      	b.n	8017a92 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 8017ab2:	428f      	cmp	r7, r1
 8017ab4:	dcee      	bgt.n	8017a94 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e8>
 8017ab6:	f8b4 c006 	ldrh.w	ip, [r4, #6]
 8017aba:	4461      	add	r1, ip
 8017abc:	b209      	sxth	r1, r1
 8017abe:	4589      	cmp	r9, r1
 8017ac0:	dbe8      	blt.n	8017a94 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e8>
 8017ac2:	4576      	cmp	r6, lr
 8017ac4:	fa1f fc8e 	uxth.w	ip, lr
 8017ac8:	88a1      	ldrh	r1, [r4, #4]
 8017aca:	dc07      	bgt.n	8017adc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x230>
 8017acc:	eba3 0c0c 	sub.w	ip, r3, ip
 8017ad0:	f8a4 8000 	strh.w	r8, [r4]
 8017ad4:	eba1 010c 	sub.w	r1, r1, ip
 8017ad8:	80a1      	strh	r1, [r4, #4]
 8017ada:	e7da      	b.n	8017a92 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 8017adc:	4461      	add	r1, ip
 8017ade:	b209      	sxth	r1, r1
 8017ae0:	4588      	cmp	r8, r1
 8017ae2:	dbd7      	blt.n	8017a94 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e8>
 8017ae4:	9905      	ldr	r1, [sp, #20]
 8017ae6:	eba1 0c0c 	sub.w	ip, r1, ip
 8017aea:	f8a4 c004 	strh.w	ip, [r4, #4]
 8017aee:	e7d0      	b.n	8017a92 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 8017af0:	24028e16 	.word	0x24028e16
 8017af4:	24028e14 	.word	0x24028e14
 8017af8:	2d00      	cmp	r5, #0
 8017afa:	f000 816d 	beq.w	8017dd8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52c>
 8017afe:	9b06      	ldr	r3, [sp, #24]
 8017b00:	445b      	add	r3, fp
 8017b02:	461c      	mov	r4, r3
 8017b04:	9b02      	ldr	r3, [sp, #8]
 8017b06:	3301      	adds	r3, #1
 8017b08:	f000 8166 	beq.w	8017dd8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52c>
 8017b0c:	f104 05a4 	add.w	r5, r4, #164	@ 0xa4
 8017b10:	9803      	ldr	r0, [sp, #12]
 8017b12:	4629      	mov	r1, r5
 8017b14:	f7ff fcf0 	bl	80174f8 <_ZNK8touchgfx4Rect8includesERKS0_>
 8017b18:	b120      	cbz	r0, 8017b24 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x278>
 8017b1a:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 8017b1e:	9801      	ldr	r0, [sp, #4]
 8017b20:	f7ff feb0 	bl	8017884 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8017b24:	9903      	ldr	r1, [sp, #12]
 8017b26:	4628      	mov	r0, r5
 8017b28:	f7ff fc73 	bl	8017412 <_ZNK8touchgfx4Rect9intersectERKS0_>
 8017b2c:	2800      	cmp	r0, #0
 8017b2e:	f000 809c 	beq.w	8017c6a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3be>
 8017b32:	f9b4 90a4 	ldrsh.w	r9, [r4, #164]	@ 0xa4
 8017b36:	f9b4 30a8 	ldrsh.w	r3, [r4, #168]	@ 0xa8
 8017b3a:	fa1f f189 	uxth.w	r1, r9
 8017b3e:	f9bd 0028 	ldrsh.w	r0, [sp, #40]	@ 0x28
 8017b42:	9309      	str	r3, [sp, #36]	@ 0x24
 8017b44:	eb01 0c03 	add.w	ip, r1, r3
 8017b48:	b283      	uxth	r3, r0
 8017b4a:	4548      	cmp	r0, r9
 8017b4c:	f9bd e02a 	ldrsh.w	lr, [sp, #42]	@ 0x2a
 8017b50:	fa1f fa8c 	uxth.w	sl, ip
 8017b54:	f8bd c02c 	ldrh.w	ip, [sp, #44]	@ 0x2c
 8017b58:	f9b4 20a6 	ldrsh.w	r2, [r4, #166]	@ 0xa6
 8017b5c:	eb03 050c 	add.w	r5, r3, ip
 8017b60:	b2ad      	uxth	r5, r5
 8017b62:	9505      	str	r5, [sp, #20]
 8017b64:	f9bd 5014 	ldrsh.w	r5, [sp, #20]
 8017b68:	9504      	str	r5, [sp, #16]
 8017b6a:	f8bb 50ec 	ldrh.w	r5, [fp, #236]	@ 0xec
 8017b6e:	f340 8099 	ble.w	8017ca4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3f8>
 8017b72:	1a5b      	subs	r3, r3, r1
 8017b74:	4596      	cmp	lr, r2
 8017b76:	fa0f f08a 	sxth.w	r0, sl
 8017b7a:	b29b      	uxth	r3, r3
 8017b7c:	b21e      	sxth	r6, r3
 8017b7e:	dd2e      	ble.n	8017bde <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x332>
 8017b80:	9f02      	ldr	r7, [sp, #8]
 8017b82:	fa1f fe8e 	uxth.w	lr, lr
 8017b86:	b292      	uxth	r2, r2
 8017b88:	f8bd 402e 	ldrh.w	r4, [sp, #46]	@ 0x2e
 8017b8c:	eb0b 08c7 	add.w	r8, fp, r7, lsl #3
 8017b90:	9f04      	ldr	r7, [sp, #16]
 8017b92:	ebae 0102 	sub.w	r1, lr, r2
 8017b96:	44a6      	add	lr, r4
 8017b98:	1a3f      	subs	r7, r7, r0
 8017b9a:	f8b8 00b2 	ldrh.w	r0, [r8, #178]	@ 0xb2
 8017b9e:	b289      	uxth	r1, r1
 8017ba0:	4402      	add	r2, r0
 8017ba2:	fa0f fe8e 	sxth.w	lr, lr
 8017ba6:	b20d      	sxth	r5, r1
 8017ba8:	b212      	sxth	r2, r2
 8017baa:	436f      	muls	r7, r5
 8017bac:	ebae 0202 	sub.w	r2, lr, r2
 8017bb0:	4372      	muls	r2, r6
 8017bb2:	4297      	cmp	r7, r2
 8017bb4:	db09      	blt.n	8017bca <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x31e>
 8017bb6:	f8b8 20ac 	ldrh.w	r2, [r8, #172]	@ 0xac
 8017bba:	f8a8 50b2 	strh.w	r5, [r8, #178]	@ 0xb2
 8017bbe:	449c      	add	ip, r3
 8017bc0:	f8ad 2028 	strh.w	r2, [sp, #40]	@ 0x28
 8017bc4:	f8ad c02c 	strh.w	ip, [sp, #44]	@ 0x2c
 8017bc8:	e686      	b.n	80178d8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 8017bca:	4421      	add	r1, r4
 8017bcc:	f8b8 30ae 	ldrh.w	r3, [r8, #174]	@ 0xae
 8017bd0:	f8a8 60b0 	strh.w	r6, [r8, #176]	@ 0xb0
 8017bd4:	f8ad 102e 	strh.w	r1, [sp, #46]	@ 0x2e
 8017bd8:	f8ad 302a 	strh.w	r3, [sp, #42]	@ 0x2a
 8017bdc:	e67c      	b.n	80178d8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 8017bde:	9f04      	ldr	r7, [sp, #16]
 8017be0:	42b8      	cmp	r0, r7
 8017be2:	da27      	bge.n	8017c34 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x388>
 8017be4:	9902      	ldr	r1, [sp, #8]
 8017be6:	1a3f      	subs	r7, r7, r0
 8017be8:	f8bd 502e 	ldrh.w	r5, [sp, #46]	@ 0x2e
 8017bec:	eb0b 04c1 	add.w	r4, fp, r1, lsl #3
 8017bf0:	eb05 010e 	add.w	r1, r5, lr
 8017bf4:	fa1f f881 	uxth.w	r8, r1
 8017bf8:	f8b4 10b2 	ldrh.w	r1, [r4, #178]	@ 0xb2
 8017bfc:	4411      	add	r1, r2
 8017bfe:	fa0f f988 	sxth.w	r9, r8
 8017c02:	eba2 020e 	sub.w	r2, r2, lr
 8017c06:	eba1 0108 	sub.w	r1, r1, r8
 8017c0a:	4372      	muls	r2, r6
 8017c0c:	b289      	uxth	r1, r1
 8017c0e:	fa0f f881 	sxth.w	r8, r1
 8017c12:	fb08 f707 	mul.w	r7, r8, r7
 8017c16:	42ba      	cmp	r2, r7
 8017c18:	dc06      	bgt.n	8017c28 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x37c>
 8017c1a:	f8a4 90ae 	strh.w	r9, [r4, #174]	@ 0xae
 8017c1e:	f8a4 80b2 	strh.w	r8, [r4, #178]	@ 0xb2
 8017c22:	f8b4 20ac 	ldrh.w	r2, [r4, #172]	@ 0xac
 8017c26:	e7ca      	b.n	8017bbe <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x312>
 8017c28:	4429      	add	r1, r5
 8017c2a:	f8a4 60b0 	strh.w	r6, [r4, #176]	@ 0xb0
 8017c2e:	f8ad 102e 	strh.w	r1, [sp, #46]	@ 0x2e
 8017c32:	e651      	b.n	80178d8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 8017c34:	9805      	ldr	r0, [sp, #20]
 8017c36:	2d06      	cmp	r5, #6
 8017c38:	ebaa 0000 	sub.w	r0, sl, r0
 8017c3c:	b280      	uxth	r0, r0
 8017c3e:	fa0f fe80 	sxth.w	lr, r0
 8017c42:	d817      	bhi.n	8017c74 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3c8>
 8017c44:	9b04      	ldr	r3, [sp, #16]
 8017c46:	f9b4 10aa 	ldrsh.w	r1, [r4, #170]	@ 0xaa
 8017c4a:	f8a4 30a4 	strh.w	r3, [r4, #164]	@ 0xa4
 8017c4e:	1c6b      	adds	r3, r5, #1
 8017c50:	f8a4 e0a8 	strh.w	lr, [r4, #168]	@ 0xa8
 8017c54:	f8ab 30ec 	strh.w	r3, [fp, #236]	@ 0xec
 8017c58:	9b01      	ldr	r3, [sp, #4]
 8017c5a:	9801      	ldr	r0, [sp, #4]
 8017c5c:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8017c60:	f820 9035 	strh.w	r9, [r0, r5, lsl #3]
 8017c64:	805a      	strh	r2, [r3, #2]
 8017c66:	809e      	strh	r6, [r3, #4]
 8017c68:	80d9      	strh	r1, [r3, #6]
 8017c6a:	9b02      	ldr	r3, [sp, #8]
 8017c6c:	3c08      	subs	r4, #8
 8017c6e:	3b01      	subs	r3, #1
 8017c70:	9302      	str	r3, [sp, #8]
 8017c72:	e747      	b.n	8017b04 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x258>
 8017c74:	9a02      	ldr	r2, [sp, #8]
 8017c76:	45b6      	cmp	lr, r6
 8017c78:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8017c7c:	db0d      	blt.n	8017c9a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3ee>
 8017c7e:	449c      	add	ip, r3
 8017c80:	445a      	add	r2, fp
 8017c82:	f8ad 9028 	strh.w	r9, [sp, #40]	@ 0x28
 8017c86:	fa1f fc8c 	uxth.w	ip, ip
 8017c8a:	f8a2 e0b0 	strh.w	lr, [r2, #176]	@ 0xb0
 8017c8e:	f8ad c02c 	strh.w	ip, [sp, #44]	@ 0x2c
 8017c92:	448c      	add	ip, r1
 8017c94:	f8a2 c0ac 	strh.w	ip, [r2, #172]	@ 0xac
 8017c98:	e61e      	b.n	80178d8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 8017c9a:	445a      	add	r2, fp
 8017c9c:	4484      	add	ip, r0
 8017c9e:	f8a2 60b0 	strh.w	r6, [r2, #176]	@ 0xb0
 8017ca2:	e78f      	b.n	8017bc4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x318>
 8017ca4:	fa1f f18e 	uxth.w	r1, lr
 8017ca8:	f8bd 602e 	ldrh.w	r6, [sp, #46]	@ 0x2e
 8017cac:	b293      	uxth	r3, r2
 8017cae:	4596      	cmp	lr, r2
 8017cb0:	eb01 0806 	add.w	r8, r1, r6
 8017cb4:	9306      	str	r3, [sp, #24]
 8017cb6:	fa1f f888 	uxth.w	r8, r8
 8017cba:	9f06      	ldr	r7, [sp, #24]
 8017cbc:	fa0f f388 	sxth.w	r3, r8
 8017cc0:	9307      	str	r3, [sp, #28]
 8017cc2:	f8b4 30aa 	ldrh.w	r3, [r4, #170]	@ 0xaa
 8017cc6:	443b      	add	r3, r7
 8017cc8:	b29b      	uxth	r3, r3
 8017cca:	9308      	str	r3, [sp, #32]
 8017ccc:	da24      	bge.n	8017d18 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x46c>
 8017cce:	9905      	ldr	r1, [sp, #20]
 8017cd0:	eba3 0308 	sub.w	r3, r3, r8
 8017cd4:	eba2 020e 	sub.w	r2, r2, lr
 8017cd8:	eba9 0000 	sub.w	r0, r9, r0
 8017cdc:	ebaa 0401 	sub.w	r4, sl, r1
 8017ce0:	b29b      	uxth	r3, r3
 8017ce2:	b2a4      	uxth	r4, r4
 8017ce4:	b219      	sxth	r1, r3
 8017ce6:	b225      	sxth	r5, r4
 8017ce8:	4348      	muls	r0, r1
 8017cea:	436a      	muls	r2, r5
 8017cec:	4282      	cmp	r2, r0
 8017cee:	9a02      	ldr	r2, [sp, #8]
 8017cf0:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8017cf4:	445a      	add	r2, fp
 8017cf6:	dc06      	bgt.n	8017d06 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x45a>
 8017cf8:	9b07      	ldr	r3, [sp, #28]
 8017cfa:	44a4      	add	ip, r4
 8017cfc:	f8a2 10b2 	strh.w	r1, [r2, #178]	@ 0xb2
 8017d00:	f8a2 30ae 	strh.w	r3, [r2, #174]	@ 0xae
 8017d04:	e75e      	b.n	8017bc4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x318>
 8017d06:	9904      	ldr	r1, [sp, #16]
 8017d08:	f8a2 50b0 	strh.w	r5, [r2, #176]	@ 0xb0
 8017d0c:	f8a2 10ac 	strh.w	r1, [r2, #172]	@ 0xac
 8017d10:	4433      	add	r3, r6
 8017d12:	f8ad 302e 	strh.w	r3, [sp, #46]	@ 0x2e
 8017d16:	e5df      	b.n	80178d8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 8017d18:	9f06      	ldr	r7, [sp, #24]
 8017d1a:	9b04      	ldr	r3, [sp, #16]
 8017d1c:	1bc9      	subs	r1, r1, r7
 8017d1e:	fa0f f78a 	sxth.w	r7, sl
 8017d22:	b289      	uxth	r1, r1
 8017d24:	429f      	cmp	r7, r3
 8017d26:	fa0f fe81 	sxth.w	lr, r1
 8017d2a:	dd23      	ble.n	8017d74 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4c8>
 8017d2c:	9a05      	ldr	r2, [sp, #20]
 8017d2e:	eba9 0000 	sub.w	r0, r9, r0
 8017d32:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 8017d36:	ebaa 0202 	sub.w	r2, sl, r2
 8017d3a:	9d07      	ldr	r5, [sp, #28]
 8017d3c:	fb0e f000 	mul.w	r0, lr, r0
 8017d40:	b292      	uxth	r2, r2
 8017d42:	eba5 0a03 	sub.w	sl, r5, r3
 8017d46:	9b02      	ldr	r3, [sp, #8]
 8017d48:	b214      	sxth	r4, r2
 8017d4a:	00db      	lsls	r3, r3, #3
 8017d4c:	fb04 fa0a 	mul.w	sl, r4, sl
 8017d50:	445b      	add	r3, fp
 8017d52:	4550      	cmp	r0, sl
 8017d54:	db03      	blt.n	8017d5e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4b2>
 8017d56:	f8a3 e0b2 	strh.w	lr, [r3, #178]	@ 0xb2
 8017d5a:	4494      	add	ip, r2
 8017d5c:	e732      	b.n	8017bc4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x318>
 8017d5e:	9a04      	ldr	r2, [sp, #16]
 8017d60:	4431      	add	r1, r6
 8017d62:	f8a3 40b0 	strh.w	r4, [r3, #176]	@ 0xb0
 8017d66:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
 8017d6a:	f8b3 30ae 	ldrh.w	r3, [r3, #174]	@ 0xae
 8017d6e:	f8ad 302a 	strh.w	r3, [sp, #42]	@ 0x2a
 8017d72:	e75c      	b.n	8017c2e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x382>
 8017d74:	9b08      	ldr	r3, [sp, #32]
 8017d76:	2d06      	cmp	r5, #6
 8017d78:	eba3 0308 	sub.w	r3, r3, r8
 8017d7c:	b29b      	uxth	r3, r3
 8017d7e:	b218      	sxth	r0, r3
 8017d80:	d813      	bhi.n	8017daa <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4fe>
 8017d82:	9b07      	ldr	r3, [sp, #28]
 8017d84:	f8a4 00aa 	strh.w	r0, [r4, #170]	@ 0xaa
 8017d88:	f8a4 30a6 	strh.w	r3, [r4, #166]	@ 0xa6
 8017d8c:	1c6b      	adds	r3, r5, #1
 8017d8e:	9901      	ldr	r1, [sp, #4]
 8017d90:	f8ab 30ec 	strh.w	r3, [fp, #236]	@ 0xec
 8017d94:	9b01      	ldr	r3, [sp, #4]
 8017d96:	f821 9035 	strh.w	r9, [r1, r5, lsl #3]
 8017d9a:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8017d9e:	805a      	strh	r2, [r3, #2]
 8017da0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8017da2:	f8a3 e006 	strh.w	lr, [r3, #6]
 8017da6:	809a      	strh	r2, [r3, #4]
 8017da8:	e75f      	b.n	8017c6a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3be>
 8017daa:	9c02      	ldr	r4, [sp, #8]
 8017dac:	4570      	cmp	r0, lr
 8017dae:	ea4f 04c4 	mov.w	r4, r4, lsl #3
 8017db2:	db0d      	blt.n	8017dd0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x524>
 8017db4:	4431      	add	r1, r6
 8017db6:	9b06      	ldr	r3, [sp, #24]
 8017db8:	445c      	add	r4, fp
 8017dba:	f8ad 202a 	strh.w	r2, [sp, #42]	@ 0x2a
 8017dbe:	b289      	uxth	r1, r1
 8017dc0:	f8a4 00b2 	strh.w	r0, [r4, #178]	@ 0xb2
 8017dc4:	f8ad 102e 	strh.w	r1, [sp, #46]	@ 0x2e
 8017dc8:	4419      	add	r1, r3
 8017dca:	f8a4 10ae 	strh.w	r1, [r4, #174]	@ 0xae
 8017dce:	e583      	b.n	80178d8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 8017dd0:	445c      	add	r4, fp
 8017dd2:	f8a4 e0b2 	strh.w	lr, [r4, #178]	@ 0xb2
 8017dd6:	e79b      	b.n	8017d10 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x464>
 8017dd8:	f8bb 40ec 	ldrh.w	r4, [fp, #236]	@ 0xec
 8017ddc:	f64f 76ff 	movw	r6, #65535	@ 0xffff
 8017de0:	1e65      	subs	r5, r4, #1
 8017de2:	eb0b 04c4 	add.w	r4, fp, r4, lsl #3
 8017de6:	b2ad      	uxth	r5, r5
 8017de8:	42b5      	cmp	r5, r6
 8017dea:	d044      	beq.n	8017e76 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5ca>
 8017dec:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	@ 0x2a
 8017df0:	f9b4 00a6 	ldrsh.w	r0, [r4, #166]	@ 0xa6
 8017df4:	f9bd 1028 	ldrsh.w	r1, [sp, #40]	@ 0x28
 8017df8:	4282      	cmp	r2, r0
 8017dfa:	f9b4 70a4 	ldrsh.w	r7, [r4, #164]	@ 0xa4
 8017dfe:	d11f      	bne.n	8017e40 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x594>
 8017e00:	f9bd c02e 	ldrsh.w	ip, [sp, #46]	@ 0x2e
 8017e04:	f9b4 30aa 	ldrsh.w	r3, [r4, #170]	@ 0xaa
 8017e08:	459c      	cmp	ip, r3
 8017e0a:	d119      	bne.n	8017e40 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x594>
 8017e0c:	f8b4 30a8 	ldrh.w	r3, [r4, #168]	@ 0xa8
 8017e10:	f8bd 202c 	ldrh.w	r2, [sp, #44]	@ 0x2c
 8017e14:	19d8      	adds	r0, r3, r7
 8017e16:	b200      	sxth	r0, r0
 8017e18:	4288      	cmp	r0, r1
 8017e1a:	d109      	bne.n	8017e30 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x584>
 8017e1c:	f8ad 7028 	strh.w	r7, [sp, #40]	@ 0x28
 8017e20:	4413      	add	r3, r2
 8017e22:	f8ad 302c 	strh.w	r3, [sp, #44]	@ 0x2c
 8017e26:	4629      	mov	r1, r5
 8017e28:	9801      	ldr	r0, [sp, #4]
 8017e2a:	f7ff fd2b 	bl	8017884 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8017e2e:	e003      	b.n	8017e38 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x58c>
 8017e30:	4411      	add	r1, r2
 8017e32:	b209      	sxth	r1, r1
 8017e34:	42b9      	cmp	r1, r7
 8017e36:	d0f3      	beq.n	8017e20 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x574>
 8017e38:	3d01      	subs	r5, #1
 8017e3a:	3c08      	subs	r4, #8
 8017e3c:	b2ad      	uxth	r5, r5
 8017e3e:	e7d3      	b.n	8017de8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x53c>
 8017e40:	42b9      	cmp	r1, r7
 8017e42:	d1f9      	bne.n	8017e38 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x58c>
 8017e44:	f9bd 102c 	ldrsh.w	r1, [sp, #44]	@ 0x2c
 8017e48:	f9b4 30a8 	ldrsh.w	r3, [r4, #168]	@ 0xa8
 8017e4c:	4299      	cmp	r1, r3
 8017e4e:	d1f3      	bne.n	8017e38 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x58c>
 8017e50:	f8b4 30aa 	ldrh.w	r3, [r4, #170]	@ 0xaa
 8017e54:	f8bd 102e 	ldrh.w	r1, [sp, #46]	@ 0x2e
 8017e58:	181f      	adds	r7, r3, r0
 8017e5a:	b23f      	sxth	r7, r7
 8017e5c:	42ba      	cmp	r2, r7
 8017e5e:	d105      	bne.n	8017e6c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5c0>
 8017e60:	f8ad 002a 	strh.w	r0, [sp, #42]	@ 0x2a
 8017e64:	440b      	add	r3, r1
 8017e66:	f8ad 302e 	strh.w	r3, [sp, #46]	@ 0x2e
 8017e6a:	e7dc      	b.n	8017e26 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x57a>
 8017e6c:	440a      	add	r2, r1
 8017e6e:	b212      	sxth	r2, r2
 8017e70:	4290      	cmp	r0, r2
 8017e72:	d1e1      	bne.n	8017e38 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x58c>
 8017e74:	e7f6      	b.n	8017e64 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5b8>
 8017e76:	f8bb 60ec 	ldrh.w	r6, [fp, #236]	@ 0xec
 8017e7a:	2e07      	cmp	r6, #7
 8017e7c:	ea4f 04c6 	mov.w	r4, r6, lsl #3
 8017e80:	d812      	bhi.n	8017ea8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5fc>
 8017e82:	1c75      	adds	r5, r6, #1
 8017e84:	f9bd 0028 	ldrsh.w	r0, [sp, #40]	@ 0x28
 8017e88:	f9bd 102a 	ldrsh.w	r1, [sp, #42]	@ 0x2a
 8017e8c:	f8ab 50ec 	strh.w	r5, [fp, #236]	@ 0xec
 8017e90:	9d01      	ldr	r5, [sp, #4]
 8017e92:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	@ 0x2c
 8017e96:	442c      	add	r4, r5
 8017e98:	f9bd 302e 	ldrsh.w	r3, [sp, #46]	@ 0x2e
 8017e9c:	f825 0036 	strh.w	r0, [r5, r6, lsl #3]
 8017ea0:	8061      	strh	r1, [r4, #2]
 8017ea2:	80a2      	strh	r2, [r4, #4]
 8017ea4:	80e3      	strh	r3, [r4, #6]
 8017ea6:	e581      	b.n	80179ac <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 8017ea8:	f10b 03ac 	add.w	r3, fp, #172	@ 0xac
 8017eac:	3e01      	subs	r6, #1
 8017eae:	445c      	add	r4, fp
 8017eb0:	f06f 4a00 	mvn.w	sl, #2147483648	@ 0x80000000
 8017eb4:	f04f 37ff 	mov.w	r7, #4294967295
 8017eb8:	2500      	movs	r5, #0
 8017eba:	9305      	str	r3, [sp, #20]
 8017ebc:	f9b4 30a8 	ldrsh.w	r3, [r4, #168]	@ 0xa8
 8017ec0:	1e72      	subs	r2, r6, #1
 8017ec2:	9302      	str	r3, [sp, #8]
 8017ec4:	4691      	mov	r9, r2
 8017ec6:	f9b4 30aa 	ldrsh.w	r3, [r4, #170]	@ 0xaa
 8017eca:	9304      	str	r3, [sp, #16]
 8017ecc:	f104 03a4 	add.w	r3, r4, #164	@ 0xa4
 8017ed0:	f1b9 3fff 	cmp.w	r9, #4294967295
 8017ed4:	6818      	ldr	r0, [r3, #0]
 8017ed6:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 8017eda:	9207      	str	r2, [sp, #28]
 8017edc:	bf16      	itet	ne
 8017ede:	9905      	ldrne	r1, [sp, #20]
 8017ee0:	f8dd e00c 	ldreq.w	lr, [sp, #12]
 8017ee4:	eb01 0ec9 	addne.w	lr, r1, r9, lsl #3
 8017ee8:	9306      	str	r3, [sp, #24]
 8017eea:	f8be 1006 	ldrh.w	r1, [lr, #6]
 8017eee:	f8be 8004 	ldrh.w	r8, [lr, #4]
 8017ef2:	fb18 f801 	smulbb	r8, r8, r1
 8017ef6:	6859      	ldr	r1, [r3, #4]
 8017ef8:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 8017efc:	4671      	mov	r1, lr
 8017efe:	a80c      	add	r0, sp, #48	@ 0x30
 8017f00:	f7ff fb20 	bl	8017544 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 8017f04:	f8bd 1036 	ldrh.w	r1, [sp, #54]	@ 0x36
 8017f08:	f8bd 0034 	ldrh.w	r0, [sp, #52]	@ 0x34
 8017f0c:	f04f 0c08 	mov.w	ip, #8
 8017f10:	9b04      	ldr	r3, [sp, #16]
 8017f12:	9a02      	ldr	r2, [sp, #8]
 8017f14:	fb10 f001 	smulbb	r0, r0, r1
 8017f18:	fb02 8803 	mla	r8, r2, r3, r8
 8017f1c:	eba0 0108 	sub.w	r1, r0, r8
 8017f20:	fb90 f0fc 	sdiv	r0, r0, ip
 8017f24:	4288      	cmp	r0, r1
 8017f26:	dc20      	bgt.n	8017f6a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6be>
 8017f28:	4551      	cmp	r1, sl
 8017f2a:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8017f2e:	da03      	bge.n	8017f38 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x68c>
 8017f30:	b1d9      	cbz	r1, 8017f6a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6be>
 8017f32:	468a      	mov	sl, r1
 8017f34:	464f      	mov	r7, r9
 8017f36:	4635      	mov	r5, r6
 8017f38:	f109 39ff 	add.w	r9, r9, #4294967295
 8017f3c:	f119 0f02 	cmn.w	r9, #2
 8017f40:	d1c6      	bne.n	8017ed0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x624>
 8017f42:	4616      	mov	r6, r2
 8017f44:	3201      	adds	r2, #1
 8017f46:	f1a4 0408 	sub.w	r4, r4, #8
 8017f4a:	d1b7      	bne.n	8017ebc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x610>
 8017f4c:	9b01      	ldr	r3, [sp, #4]
 8017f4e:	b2ac      	uxth	r4, r5
 8017f50:	00ed      	lsls	r5, r5, #3
 8017f52:	1958      	adds	r0, r3, r5
 8017f54:	1c7b      	adds	r3, r7, #1
 8017f56:	d10b      	bne.n	8017f70 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6c4>
 8017f58:	4601      	mov	r1, r0
 8017f5a:	9803      	ldr	r0, [sp, #12]
 8017f5c:	f7ff faf2 	bl	8017544 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 8017f60:	4621      	mov	r1, r4
 8017f62:	9801      	ldr	r0, [sp, #4]
 8017f64:	f7ff fc8e 	bl	8017884 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8017f68:	e4b6      	b.n	80178d8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 8017f6a:	464f      	mov	r7, r9
 8017f6c:	4635      	mov	r5, r6
 8017f6e:	e7ed      	b.n	8017f4c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6a0>
 8017f70:	9b01      	ldr	r3, [sp, #4]
 8017f72:	00ff      	lsls	r7, r7, #3
 8017f74:	445d      	add	r5, fp
 8017f76:	19d9      	adds	r1, r3, r7
 8017f78:	445f      	add	r7, fp
 8017f7a:	f7ff fae3 	bl	8017544 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 8017f7e:	9b03      	ldr	r3, [sp, #12]
 8017f80:	cb03      	ldmia	r3!, {r0, r1}
 8017f82:	9b03      	ldr	r3, [sp, #12]
 8017f84:	f8c7 00ac 	str.w	r0, [r7, #172]	@ 0xac
 8017f88:	f8c7 10b0 	str.w	r1, [r7, #176]	@ 0xb0
 8017f8c:	f855 0fac 	ldr.w	r0, [r5, #172]!
 8017f90:	6869      	ldr	r1, [r5, #4]
 8017f92:	c303      	stmia	r3!, {r0, r1}
 8017f94:	e7e4      	b.n	8017f60 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6b4>
 8017f96:	bf00      	nop

08017f98 <_ZN8touchgfx11Application15drawCachedAreasEv>:
 8017f98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017f9c:	f500 7698 	add.w	r6, r0, #304	@ 0x130
 8017fa0:	b09b      	sub	sp, #108	@ 0x6c
 8017fa2:	4604      	mov	r4, r0
 8017fa4:	4630      	mov	r0, r6
 8017fa6:	f7f7 fd6e 	bl	800fa86 <_ZNK8touchgfx4Rect7isEmptyEv>
 8017faa:	4605      	mov	r5, r0
 8017fac:	b948      	cbnz	r0, 8017fc2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2a>
 8017fae:	6823      	ldr	r3, [r4, #0]
 8017fb0:	4620      	mov	r0, r4
 8017fb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8017fb4:	e896 0006 	ldmia.w	r6, {r1, r2}
 8017fb8:	4798      	blx	r3
 8017fba:	f8c4 5130 	str.w	r5, [r4, #304]	@ 0x130
 8017fbe:	f8c4 5134 	str.w	r5, [r4, #308]	@ 0x134
 8017fc2:	4bc5      	ldr	r3, [pc, #788]	@ (80182d8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x340>)
 8017fc4:	681b      	ldr	r3, [r3, #0]
 8017fc6:	2b00      	cmp	r3, #0
 8017fc8:	d03f      	beq.n	801804a <_ZN8touchgfx11Application15drawCachedAreasEv+0xb2>
 8017fca:	4dc4      	ldr	r5, [pc, #784]	@ (80182dc <_ZN8touchgfx11Application15drawCachedAreasEv+0x344>)
 8017fcc:	4628      	mov	r0, r5
 8017fce:	f7f7 fd5a 	bl	800fa86 <_ZNK8touchgfx4Rect7isEmptyEv>
 8017fd2:	4606      	mov	r6, r0
 8017fd4:	2800      	cmp	r0, #0
 8017fd6:	d138      	bne.n	801804a <_ZN8touchgfx11Application15drawCachedAreasEv+0xb2>
 8017fd8:	4628      	mov	r0, r5
 8017fda:	f7ff f92b 	bl	8017234 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 8017fde:	6823      	ldr	r3, [r4, #0]
 8017fe0:	6829      	ldr	r1, [r5, #0]
 8017fe2:	4620      	mov	r0, r4
 8017fe4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8017fe6:	686a      	ldr	r2, [r5, #4]
 8017fe8:	4798      	blx	r3
 8017fea:	802e      	strh	r6, [r5, #0]
 8017fec:	806e      	strh	r6, [r5, #2]
 8017fee:	80ae      	strh	r6, [r5, #4]
 8017ff0:	80ee      	strh	r6, [r5, #6]
 8017ff2:	f10d 0824 	add.w	r8, sp, #36	@ 0x24
 8017ff6:	4dba      	ldr	r5, [pc, #744]	@ (80182e0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x348>)
 8017ff8:	4640      	mov	r0, r8
 8017ffa:	f7ff fbe8 	bl	80177ce <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 8017ffe:	882e      	ldrh	r6, [r5, #0]
 8018000:	f8b4 70ec 	ldrh.w	r7, [r4, #236]	@ 0xec
 8018004:	f104 00ac 	add.w	r0, r4, #172	@ 0xac
 8018008:	4633      	mov	r3, r6
 801800a:	42bb      	cmp	r3, r7
 801800c:	d224      	bcs.n	8018058 <_ZN8touchgfx11Application15drawCachedAreasEv+0xc0>
 801800e:	f8bd 1064 	ldrh.w	r1, [sp, #100]	@ 0x64
 8018012:	2907      	cmp	r1, #7
 8018014:	d816      	bhi.n	8018044 <_ZN8touchgfx11Application15drawCachedAreasEv+0xac>
 8018016:	eb00 02c3 	add.w	r2, r0, r3, lsl #3
 801801a:	f930 9033 	ldrsh.w	r9, [r0, r3, lsl #3]
 801801e:	f9b2 a002 	ldrsh.w	sl, [r2, #2]
 8018022:	f9b2 e004 	ldrsh.w	lr, [r2, #4]
 8018026:	f9b2 c006 	ldrsh.w	ip, [r2, #6]
 801802a:	1c4a      	adds	r2, r1, #1
 801802c:	f8ad 2064 	strh.w	r2, [sp, #100]	@ 0x64
 8018030:	eb08 02c1 	add.w	r2, r8, r1, lsl #3
 8018034:	f828 9031 	strh.w	r9, [r8, r1, lsl #3]
 8018038:	f8a2 a002 	strh.w	sl, [r2, #2]
 801803c:	f8a2 e004 	strh.w	lr, [r2, #4]
 8018040:	f8a2 c006 	strh.w	ip, [r2, #6]
 8018044:	3301      	adds	r3, #1
 8018046:	b29b      	uxth	r3, r3
 8018048:	e7df      	b.n	801800a <_ZN8touchgfx11Application15drawCachedAreasEv+0x72>
 801804a:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	@ 0xec
 801804e:	2b00      	cmp	r3, #0
 8018050:	d1cf      	bne.n	8017ff2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x5a>
 8018052:	b01b      	add	sp, #108	@ 0x6c
 8018054:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018058:	f8b4 312e 	ldrh.w	r3, [r4, #302]	@ 0x12e
 801805c:	42b3      	cmp	r3, r6
 801805e:	d90c      	bls.n	801807a <_ZN8touchgfx11Application15drawCachedAreasEv+0xe2>
 8018060:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
 8018064:	6822      	ldr	r2, [r4, #0]
 8018066:	3601      	adds	r6, #1
 8018068:	4620      	mov	r0, r4
 801806a:	6c17      	ldr	r7, [r2, #64]	@ 0x40
 801806c:	f8d3 10ee 	ldr.w	r1, [r3, #238]	@ 0xee
 8018070:	b2b6      	uxth	r6, r6
 8018072:	f8d3 20f2 	ldr.w	r2, [r3, #242]	@ 0xf2
 8018076:	47b8      	blx	r7
 8018078:	e7ee      	b.n	8018058 <_ZN8touchgfx11Application15drawCachedAreasEv+0xc0>
 801807a:	4a9a      	ldr	r2, [pc, #616]	@ (80182e4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x34c>)
 801807c:	6813      	ldr	r3, [r2, #0]
 801807e:	4691      	mov	r9, r2
 8018080:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8018084:	2b01      	cmp	r3, #1
 8018086:	f040 80e0 	bne.w	801824a <_ZN8touchgfx11Application15drawCachedAreasEv+0x2b2>
 801808a:	8829      	ldrh	r1, [r5, #0]
 801808c:	2600      	movs	r6, #0
 801808e:	f8b4 70ec 	ldrh.w	r7, [r4, #236]	@ 0xec
 8018092:	eb04 03c1 	add.w	r3, r4, r1, lsl #3
 8018096:	33ae      	adds	r3, #174	@ 0xae
 8018098:	428f      	cmp	r7, r1
 801809a:	f103 0308 	add.w	r3, r3, #8
 801809e:	dd0a      	ble.n	80180b6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x11e>
 80180a0:	f833 2c04 	ldrh.w	r2, [r3, #-4]
 80180a4:	3101      	adds	r1, #1
 80180a6:	f833 0c08 	ldrh.w	r0, [r3, #-8]
 80180aa:	4402      	add	r2, r0
 80180ac:	b212      	sxth	r2, r2
 80180ae:	4296      	cmp	r6, r2
 80180b0:	bfb8      	it	lt
 80180b2:	4616      	movlt	r6, r2
 80180b4:	e7f0      	b.n	8018098 <_ZN8touchgfx11Application15drawCachedAreasEv+0x100>
 80180b6:	4b8c      	ldr	r3, [pc, #560]	@ (80182e8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x350>)
 80180b8:	f8df 9228 	ldr.w	r9, [pc, #552]	@ 80182e4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x34c>
 80180bc:	881b      	ldrh	r3, [r3, #0]
 80180be:	2b0f      	cmp	r3, #15
 80180c0:	bf8c      	ite	hi
 80180c2:	ea4f 0bd3 	movhi.w	fp, r3, lsr #3
 80180c6:	f04f 0b01 	movls.w	fp, #1
 80180ca:	2300      	movs	r3, #0
 80180cc:	e9cd 3305 	strd	r3, r3, [sp, #20]
 80180d0:	f8bd 7016 	ldrh.w	r7, [sp, #22]
 80180d4:	f8bd 001a 	ldrh.w	r0, [sp, #26]
 80180d8:	4b82      	ldr	r3, [pc, #520]	@ (80182e4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x34c>)
 80180da:	4438      	add	r0, r7
 80180dc:	b207      	sxth	r7, r0
 80180de:	6818      	ldr	r0, [r3, #0]
 80180e0:	42b7      	cmp	r7, r6
 80180e2:	6803      	ldr	r3, [r0, #0]
 80180e4:	f280 8083 	bge.w	80181ee <_ZN8touchgfx11Application15drawCachedAreasEv+0x256>
 80180e8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80180ec:	4798      	blx	r3
 80180ee:	eb07 030b 	add.w	r3, r7, fp
 80180f2:	4298      	cmp	r0, r3
 80180f4:	da07      	bge.n	8018106 <_ZN8touchgfx11Application15drawCachedAreasEv+0x16e>
 80180f6:	42b0      	cmp	r0, r6
 80180f8:	da05      	bge.n	8018106 <_ZN8touchgfx11Application15drawCachedAreasEv+0x16e>
 80180fa:	4287      	cmp	r7, r0
 80180fc:	dd6c      	ble.n	80181d8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x240>
 80180fe:	2f00      	cmp	r7, #0
 8018100:	dd6a      	ble.n	80181d8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x240>
 8018102:	4630      	mov	r0, r6
 8018104:	e004      	b.n	8018110 <_ZN8touchgfx11Application15drawCachedAreasEv+0x178>
 8018106:	4287      	cmp	r7, r0
 8018108:	dcfb      	bgt.n	8018102 <_ZN8touchgfx11Application15drawCachedAreasEv+0x16a>
 801810a:	42b0      	cmp	r0, r6
 801810c:	bfa8      	it	ge
 801810e:	4630      	movge	r0, r6
 8018110:	4b76      	ldr	r3, [pc, #472]	@ (80182ec <_ZN8touchgfx11Application15drawCachedAreasEv+0x354>)
 8018112:	1bc0      	subs	r0, r0, r7
 8018114:	2200      	movs	r2, #0
 8018116:	f8ad 7016 	strh.w	r7, [sp, #22]
 801811a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801811e:	882f      	ldrh	r7, [r5, #0]
 8018120:	f8ad 2014 	strh.w	r2, [sp, #20]
 8018124:	f8ad 3018 	strh.w	r3, [sp, #24]
 8018128:	f8ad 001a 	strh.w	r0, [sp, #26]
 801812c:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	@ 0xec
 8018130:	42bb      	cmp	r3, r7
 8018132:	d9cd      	bls.n	80180d0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x138>
 8018134:	eb04 02c7 	add.w	r2, r4, r7, lsl #3
 8018138:	ab07      	add	r3, sp, #28
 801813a:	f852 0fac 	ldr.w	r0, [r2, #172]!
 801813e:	6851      	ldr	r1, [r2, #4]
 8018140:	c303      	stmia	r3!, {r0, r1}
 8018142:	a905      	add	r1, sp, #20
 8018144:	a807      	add	r0, sp, #28
 8018146:	f7ff f964 	bl	8017412 <_ZNK8touchgfx4Rect9intersectERKS0_>
 801814a:	2800      	cmp	r0, #0
 801814c:	d04c      	beq.n	80181e8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x250>
 801814e:	f9bd 001c 	ldrsh.w	r0, [sp, #28]
 8018152:	f9bd 2014 	ldrsh.w	r2, [sp, #20]
 8018156:	f8bd a020 	ldrh.w	sl, [sp, #32]
 801815a:	4686      	mov	lr, r0
 801815c:	4290      	cmp	r0, r2
 801815e:	f9bd 101e 	ldrsh.w	r1, [sp, #30]
 8018162:	4450      	add	r0, sl
 8018164:	f8bd a018 	ldrh.w	sl, [sp, #24]
 8018168:	bfb8      	it	lt
 801816a:	4696      	movlt	lr, r2
 801816c:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 8018170:	4452      	add	r2, sl
 8018172:	b280      	uxth	r0, r0
 8018174:	4299      	cmp	r1, r3
 8018176:	468c      	mov	ip, r1
 8018178:	b292      	uxth	r2, r2
 801817a:	9302      	str	r3, [sp, #8]
 801817c:	bfb8      	it	lt
 801817e:	469c      	movlt	ip, r3
 8018180:	b203      	sxth	r3, r0
 8018182:	fa0f fa82 	sxth.w	sl, r2
 8018186:	f8ad e01c 	strh.w	lr, [sp, #28]
 801818a:	f8ad c01e 	strh.w	ip, [sp, #30]
 801818e:	4553      	cmp	r3, sl
 8018190:	bfb8      	it	lt
 8018192:	4602      	movlt	r2, r0
 8018194:	9b02      	ldr	r3, [sp, #8]
 8018196:	eba2 020e 	sub.w	r2, r2, lr
 801819a:	f8ad 2020 	strh.w	r2, [sp, #32]
 801819e:	f8bd 2022 	ldrh.w	r2, [sp, #34]	@ 0x22
 80181a2:	4411      	add	r1, r2
 80181a4:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 80181a8:	4413      	add	r3, r2
 80181aa:	b289      	uxth	r1, r1
 80181ac:	b29b      	uxth	r3, r3
 80181ae:	b208      	sxth	r0, r1
 80181b0:	b21a      	sxth	r2, r3
 80181b2:	4290      	cmp	r0, r2
 80181b4:	bfb8      	it	lt
 80181b6:	460b      	movlt	r3, r1
 80181b8:	eba3 030c 	sub.w	r3, r3, ip
 80181bc:	f8ad 3022 	strh.w	r3, [sp, #34]	@ 0x22
 80181c0:	a807      	add	r0, sp, #28
 80181c2:	f7f7 fc60 	bl	800fa86 <_ZNK8touchgfx4Rect7isEmptyEv>
 80181c6:	b920      	cbnz	r0, 80181d2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x23a>
 80181c8:	6823      	ldr	r3, [r4, #0]
 80181ca:	a907      	add	r1, sp, #28
 80181cc:	4620      	mov	r0, r4
 80181ce:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80181d0:	4798      	blx	r3
 80181d2:	3701      	adds	r7, #1
 80181d4:	b2bf      	uxth	r7, r7
 80181d6:	e7a9      	b.n	801812c <_ZN8touchgfx11Application15drawCachedAreasEv+0x194>
 80181d8:	f8d9 0000 	ldr.w	r0, [r9]
 80181dc:	2101      	movs	r1, #1
 80181de:	6803      	ldr	r3, [r0, #0]
 80181e0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80181e4:	4798      	blx	r3
 80181e6:	e773      	b.n	80180d0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x138>
 80181e8:	e9cd 0007 	strd	r0, r0, [sp, #28]
 80181ec:	e7e8      	b.n	80181c0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x228>
 80181ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80181f0:	4798      	blx	r3
 80181f2:	4b3f      	ldr	r3, [pc, #252]	@ (80182f0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x358>)
 80181f4:	781b      	ldrb	r3, [r3, #0]
 80181f6:	2b00      	cmp	r3, #0
 80181f8:	f43f af2b 	beq.w	8018052 <_ZN8touchgfx11Application15drawCachedAreasEv+0xba>
 80181fc:	2300      	movs	r3, #0
 80181fe:	f104 00ee 	add.w	r0, r4, #238	@ 0xee
 8018202:	f8a4 312e 	strh.w	r3, [r4, #302]	@ 0x12e
 8018206:	882b      	ldrh	r3, [r5, #0]
 8018208:	f8bd 5064 	ldrh.w	r5, [sp, #100]	@ 0x64
 801820c:	42ab      	cmp	r3, r5
 801820e:	f4bf af20 	bcs.w	8018052 <_ZN8touchgfx11Application15drawCachedAreasEv+0xba>
 8018212:	f8b4 112e 	ldrh.w	r1, [r4, #302]	@ 0x12e
 8018216:	2907      	cmp	r1, #7
 8018218:	d814      	bhi.n	8018244 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2ac>
 801821a:	eb08 02c3 	add.w	r2, r8, r3, lsl #3
 801821e:	f938 e033 	ldrsh.w	lr, [r8, r3, lsl #3]
 8018222:	f9b2 c002 	ldrsh.w	ip, [r2, #2]
 8018226:	f9b2 7004 	ldrsh.w	r7, [r2, #4]
 801822a:	f9b2 6006 	ldrsh.w	r6, [r2, #6]
 801822e:	1c4a      	adds	r2, r1, #1
 8018230:	f8a4 212e 	strh.w	r2, [r4, #302]	@ 0x12e
 8018234:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
 8018238:	f820 e031 	strh.w	lr, [r0, r1, lsl #3]
 801823c:	f8a2 c002 	strh.w	ip, [r2, #2]
 8018240:	8097      	strh	r7, [r2, #4]
 8018242:	80d6      	strh	r6, [r2, #6]
 8018244:	3301      	adds	r3, #1
 8018246:	b29b      	uxth	r3, r3
 8018248:	e7e0      	b.n	801820c <_ZN8touchgfx11Application15drawCachedAreasEv+0x274>
 801824a:	2b02      	cmp	r3, #2
 801824c:	f040 8133 	bne.w	80184b6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x51e>
 8018250:	4b28      	ldr	r3, [pc, #160]	@ (80182f4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x35c>)
 8018252:	f104 0aac 	add.w	sl, r4, #172	@ 0xac
 8018256:	781b      	ldrb	r3, [r3, #0]
 8018258:	2b01      	cmp	r3, #1
 801825a:	f000 8098 	beq.w	801838e <_ZN8touchgfx11Application15drawCachedAreasEv+0x3f6>
 801825e:	882a      	ldrh	r2, [r5, #0]
 8018260:	f8b4 10ec 	ldrh.w	r1, [r4, #236]	@ 0xec
 8018264:	3201      	adds	r2, #1
 8018266:	b292      	uxth	r2, r2
 8018268:	2900      	cmp	r1, #0
 801826a:	d0c2      	beq.n	80181f2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x25a>
 801826c:	f8b4 60ae 	ldrh.w	r6, [r4, #174]	@ 0xae
 8018270:	4694      	mov	ip, r2
 8018272:	f8b4 30b2 	ldrh.w	r3, [r4, #178]	@ 0xb2
 8018276:	f04f 0900 	mov.w	r9, #0
 801827a:	441e      	add	r6, r3
 801827c:	b236      	sxth	r6, r6
 801827e:	fa1f f38c 	uxth.w	r3, ip
 8018282:	ea4f 07c9 	mov.w	r7, r9, lsl #3
 8018286:	4299      	cmp	r1, r3
 8018288:	f240 80be 	bls.w	8018408 <_ZN8touchgfx11Application15drawCachedAreasEv+0x470>
 801828c:	4427      	add	r7, r4
 801828e:	eb04 0ecc 	add.w	lr, r4, ip, lsl #3
 8018292:	f9b7 30ae 	ldrsh.w	r3, [r7, #174]	@ 0xae
 8018296:	f9be 00ae 	ldrsh.w	r0, [lr, #174]	@ 0xae
 801829a:	4283      	cmp	r3, r0
 801829c:	f340 80a0 	ble.w	80183e0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x448>
 80182a0:	f8be 60b2 	ldrh.w	r6, [lr, #178]	@ 0xb2
 80182a4:	46e1      	mov	r9, ip
 80182a6:	4406      	add	r6, r0
 80182a8:	b236      	sxth	r6, r6
 80182aa:	429e      	cmp	r6, r3
 80182ac:	bfa8      	it	ge
 80182ae:	461e      	movge	r6, r3
 80182b0:	f10c 0c01 	add.w	ip, ip, #1
 80182b4:	e7e3      	b.n	801827e <_ZN8touchgfx11Application15drawCachedAreasEv+0x2e6>
 80182b6:	d10a      	bne.n	80182ce <_ZN8touchgfx11Application15drawCachedAreasEv+0x336>
 80182b8:	4562      	cmp	r2, ip
 80182ba:	f9b6 00b2 	ldrsh.w	r0, [r6, #178]	@ 0xb2
 80182be:	f9be 10b2 	ldrsh.w	r1, [lr, #178]	@ 0xb2
 80182c2:	bfb8      	it	lt
 80182c4:	4662      	movlt	r2, ip
 80182c6:	4288      	cmp	r0, r1
 80182c8:	bfb8      	it	lt
 80182ca:	461f      	movlt	r7, r3
 80182cc:	e086      	b.n	80183dc <_ZN8touchgfx11Application15drawCachedAreasEv+0x444>
 80182ce:	428a      	cmp	r2, r1
 80182d0:	bfb8      	it	lt
 80182d2:	460a      	movlt	r2, r1
 80182d4:	e082      	b.n	80183dc <_ZN8touchgfx11Application15drawCachedAreasEv+0x444>
 80182d6:	bf00      	nop
 80182d8:	24028e60 	.word	0x24028e60
 80182dc:	24028e6c 	.word	0x24028e6c
 80182e0:	2400007c 	.word	0x2400007c
 80182e4:	24028e20 	.word	0x24028e20
 80182e8:	24028e16 	.word	0x24028e16
 80182ec:	24028e14 	.word	0x24028e14
 80182f0:	24028e1e 	.word	0x24028e1e
 80182f4:	24028e18 	.word	0x24028e18
 80182f8:	19a1      	adds	r1, r4, r6
 80182fa:	ab07      	add	r3, sp, #28
 80182fc:	f851 0fac 	ldr.w	r0, [r1, #172]!
 8018300:	6849      	ldr	r1, [r1, #4]
 8018302:	c303      	stmia	r3!, {r0, r1}
 8018304:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 8018308:	a807      	add	r0, sp, #28
 801830a:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 801830e:	2b13      	cmp	r3, #19
 8018310:	440b      	add	r3, r1
 8018312:	bfd8      	it	le
 8018314:	f9bd 201c 	ldrshle.w	r2, [sp, #28]
 8018318:	1a9b      	subs	r3, r3, r2
 801831a:	f8ad 201c 	strh.w	r2, [sp, #28]
 801831e:	f8ad 3020 	strh.w	r3, [sp, #32]
 8018322:	f7fe ffa1 	bl	8017268 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8018326:	a807      	add	r0, sp, #28
 8018328:	f7f7 fbad 	bl	800fa86 <_ZNK8touchgfx4Rect7isEmptyEv>
 801832c:	bb78      	cbnz	r0, 801838e <_ZN8touchgfx11Application15drawCachedAreasEv+0x3f6>
 801832e:	f9bd c022 	ldrsh.w	ip, [sp, #34]	@ 0x22
 8018332:	4426      	add	r6, r4
 8018334:	f8d9 0000 	ldr.w	r0, [r9]
 8018338:	f1bc 0f14 	cmp.w	ip, #20
 801833c:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8018340:	f8d0 e000 	ldr.w	lr, [r0]
 8018344:	bfa8      	it	ge
 8018346:	f04f 0c14 	movge.w	ip, #20
 801834a:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 801834e:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 8018352:	fa1f fc8c 	uxth.w	ip, ip
 8018356:	f8cd c000 	str.w	ip, [sp]
 801835a:	f8de b090 	ldr.w	fp, [lr, #144]	@ 0x90
 801835e:	47d8      	blx	fp
 8018360:	4683      	mov	fp, r0
 8018362:	f8ad 0022 	strh.w	r0, [sp, #34]	@ 0x22
 8018366:	a807      	add	r0, sp, #28
 8018368:	f7fe ff64 	bl	8017234 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 801836c:	6823      	ldr	r3, [r4, #0]
 801836e:	4620      	mov	r0, r4
 8018370:	a907      	add	r1, sp, #28
 8018372:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8018374:	4798      	blx	r3
 8018376:	f8b6 00b0 	ldrh.w	r0, [r6, #176]	@ 0xb0
 801837a:	eba0 000b 	sub.w	r0, r0, fp
 801837e:	b200      	sxth	r0, r0
 8018380:	f8a6 00b0 	strh.w	r0, [r6, #176]	@ 0xb0
 8018384:	b918      	cbnz	r0, 801838e <_ZN8touchgfx11Application15drawCachedAreasEv+0x3f6>
 8018386:	b2b9      	uxth	r1, r7
 8018388:	4650      	mov	r0, sl
 801838a:	f7ff fa7b 	bl	8017884 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801838e:	f8b4 b0ec 	ldrh.w	fp, [r4, #236]	@ 0xec
 8018392:	f1bb 0f00 	cmp.w	fp, #0
 8018396:	f43f af2c 	beq.w	80181f2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x25a>
 801839a:	882b      	ldrh	r3, [r5, #0]
 801839c:	2700      	movs	r7, #0
 801839e:	f9b4 20ac 	ldrsh.w	r2, [r4, #172]	@ 0xac
 80183a2:	3301      	adds	r3, #1
 80183a4:	b29b      	uxth	r3, r3
 80183a6:	b299      	uxth	r1, r3
 80183a8:	00fe      	lsls	r6, r7, #3
 80183aa:	458b      	cmp	fp, r1
 80183ac:	d9a4      	bls.n	80182f8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x360>
 80183ae:	4426      	add	r6, r4
 80183b0:	eb04 0ec3 	add.w	lr, r4, r3, lsl #3
 80183b4:	f8b6 10ac 	ldrh.w	r1, [r6, #172]	@ 0xac
 80183b8:	f8b6 00b0 	ldrh.w	r0, [r6, #176]	@ 0xb0
 80183bc:	f9be c0ac 	ldrsh.w	ip, [lr, #172]	@ 0xac
 80183c0:	4408      	add	r0, r1
 80183c2:	f8be 10b0 	ldrh.w	r1, [lr, #176]	@ 0xb0
 80183c6:	4461      	add	r1, ip
 80183c8:	b200      	sxth	r0, r0
 80183ca:	b209      	sxth	r1, r1
 80183cc:	4288      	cmp	r0, r1
 80183ce:	f6bf af72 	bge.w	80182b6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x31e>
 80183d2:	4584      	cmp	ip, r0
 80183d4:	4662      	mov	r2, ip
 80183d6:	461f      	mov	r7, r3
 80183d8:	bfb8      	it	lt
 80183da:	4602      	movlt	r2, r0
 80183dc:	3301      	adds	r3, #1
 80183de:	e7e2      	b.n	80183a6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x40e>
 80183e0:	d10e      	bne.n	8018400 <_ZN8touchgfx11Application15drawCachedAreasEv+0x468>
 80183e2:	f9be 00b0 	ldrsh.w	r0, [lr, #176]	@ 0xb0
 80183e6:	f8be e0b2 	ldrh.w	lr, [lr, #178]	@ 0xb2
 80183ea:	f9b7 70b0 	ldrsh.w	r7, [r7, #176]	@ 0xb0
 80183ee:	4473      	add	r3, lr
 80183f0:	b21b      	sxth	r3, r3
 80183f2:	429e      	cmp	r6, r3
 80183f4:	bfa8      	it	ge
 80183f6:	461e      	movge	r6, r3
 80183f8:	4287      	cmp	r7, r0
 80183fa:	bfb8      	it	lt
 80183fc:	46e1      	movlt	r9, ip
 80183fe:	e757      	b.n	80182b0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x318>
 8018400:	4286      	cmp	r6, r0
 8018402:	bfa8      	it	ge
 8018404:	4606      	movge	r6, r0
 8018406:	e753      	b.n	80182b0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x318>
 8018408:	eb0a 0007 	add.w	r0, sl, r7
 801840c:	4427      	add	r7, r4
 801840e:	f9b7 b0b2 	ldrsh.w	fp, [r7, #178]	@ 0xb2
 8018412:	f1bb 0f13 	cmp.w	fp, #19
 8018416:	bfdc      	itt	le
 8018418:	f8b7 60ae 	ldrhle.w	r6, [r7, #174]	@ 0xae
 801841c:	445e      	addle	r6, fp
 801841e:	e9cd 2102 	strd	r2, r1, [sp, #8]
 8018422:	bfd8      	it	le
 8018424:	b236      	sxthle	r6, r6
 8018426:	f7f7 fb2e 	bl	800fa86 <_ZNK8touchgfx4Rect7isEmptyEv>
 801842a:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 801842e:	2800      	cmp	r0, #0
 8018430:	f47f af1a 	bne.w	8018268 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2d0>
 8018434:	f9b7 20ae 	ldrsh.w	r2, [r7, #174]	@ 0xae
 8018438:	fa1f fb8b 	uxth.w	fp, fp
 801843c:	f8ad 0022 	strh.w	r0, [sp, #34]	@ 0x22
 8018440:	1ab6      	subs	r6, r6, r2
 8018442:	4829      	ldr	r0, [pc, #164]	@ (80184e8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x550>)
 8018444:	f9b7 10ac 	ldrsh.w	r1, [r7, #172]	@ 0xac
 8018448:	2e14      	cmp	r6, #20
 801844a:	f9b7 30b0 	ldrsh.w	r3, [r7, #176]	@ 0xb0
 801844e:	6800      	ldr	r0, [r0, #0]
 8018450:	bfa8      	it	ge
 8018452:	2614      	movge	r6, #20
 8018454:	f8ad 101c 	strh.w	r1, [sp, #28]
 8018458:	f8ad 201e 	strh.w	r2, [sp, #30]
 801845c:	b289      	uxth	r1, r1
 801845e:	f8ad 3020 	strh.w	r3, [sp, #32]
 8018462:	b2b6      	uxth	r6, r6
 8018464:	f8d0 c000 	ldr.w	ip, [r0]
 8018468:	b292      	uxth	r2, r2
 801846a:	455e      	cmp	r6, fp
 801846c:	bf94      	ite	ls
 801846e:	9600      	strls	r6, [sp, #0]
 8018470:	f8cd b000 	strhi.w	fp, [sp]
 8018474:	b29b      	uxth	r3, r3
 8018476:	f8dc 6090 	ldr.w	r6, [ip, #144]	@ 0x90
 801847a:	47b0      	blx	r6
 801847c:	6823      	ldr	r3, [r4, #0]
 801847e:	f8ad 0022 	strh.w	r0, [sp, #34]	@ 0x22
 8018482:	a907      	add	r1, sp, #28
 8018484:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8018486:	4620      	mov	r0, r4
 8018488:	4798      	blx	r3
 801848a:	f8bd 1022 	ldrh.w	r1, [sp, #34]	@ 0x22
 801848e:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 8018492:	f8b7 20ae 	ldrh.w	r2, [r7, #174]	@ 0xae
 8018496:	1a5b      	subs	r3, r3, r1
 8018498:	440a      	add	r2, r1
 801849a:	b21b      	sxth	r3, r3
 801849c:	f8a7 20ae 	strh.w	r2, [r7, #174]	@ 0xae
 80184a0:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
 80184a4:	2b00      	cmp	r3, #0
 80184a6:	f47f aeda 	bne.w	801825e <_ZN8touchgfx11Application15drawCachedAreasEv+0x2c6>
 80184aa:	fa1f f189 	uxth.w	r1, r9
 80184ae:	4650      	mov	r0, sl
 80184b0:	f7ff f9e8 	bl	8017884 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 80184b4:	e6d3      	b.n	801825e <_ZN8touchgfx11Application15drawCachedAreasEv+0x2c6>
 80184b6:	882e      	ldrh	r6, [r5, #0]
 80184b8:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	@ 0xec
 80184bc:	42b3      	cmp	r3, r6
 80184be:	f67f ae98 	bls.w	80181f2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x25a>
 80184c2:	eb04 02c6 	add.w	r2, r4, r6, lsl #3
 80184c6:	ab07      	add	r3, sp, #28
 80184c8:	f852 0fac 	ldr.w	r0, [r2, #172]!
 80184cc:	6851      	ldr	r1, [r2, #4]
 80184ce:	c303      	stmia	r3!, {r0, r1}
 80184d0:	a807      	add	r0, sp, #28
 80184d2:	f7f7 fad8 	bl	800fa86 <_ZNK8touchgfx4Rect7isEmptyEv>
 80184d6:	b920      	cbnz	r0, 80184e2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x54a>
 80184d8:	6823      	ldr	r3, [r4, #0]
 80184da:	a907      	add	r1, sp, #28
 80184dc:	4620      	mov	r0, r4
 80184de:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80184e0:	4798      	blx	r3
 80184e2:	3601      	adds	r6, #1
 80184e4:	b2b6      	uxth	r6, r6
 80184e6:	e7e7      	b.n	80184b8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x520>
 80184e8:	24028e20 	.word	0x24028e20

080184ec <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE>:
 80184ec:	4b03      	ldr	r3, [pc, #12]	@ (80184fc <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE+0x10>)
 80184ee:	2200      	movs	r2, #0
 80184f0:	801a      	strh	r2, [r3, #0]
 80184f2:	805a      	strh	r2, [r3, #2]
 80184f4:	809a      	strh	r2, [r3, #4]
 80184f6:	80da      	strh	r2, [r3, #6]
 80184f8:	4770      	bx	lr
 80184fa:	bf00      	nop
 80184fc:	24028e6c 	.word	0x24028e6c

08018500 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>:
 8018500:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018504:	b09d      	sub	sp, #116	@ 0x74
 8018506:	4606      	mov	r6, r0
 8018508:	4614      	mov	r4, r2
 801850a:	468a      	mov	sl, r1
 801850c:	a803      	add	r0, sp, #12
 801850e:	461d      	mov	r5, r3
 8018510:	f001 fa2e 	bl	8019970 <_ZN8touchgfx12TextProviderC1Ev>
 8018514:	6833      	ldr	r3, [r6, #0]
 8018516:	4630      	mov	r0, r6
 8018518:	f242 0b0b 	movw	fp, #8203	@ 0x200b
 801851c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801851e:	4798      	blx	r3
 8018520:	6833      	ldr	r3, [r6, #0]
 8018522:	4607      	mov	r7, r0
 8018524:	4630      	mov	r0, r6
 8018526:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8018528:	4798      	blx	r3
 801852a:	462a      	mov	r2, r5
 801852c:	2500      	movs	r5, #0
 801852e:	4621      	mov	r1, r4
 8018530:	9000      	str	r0, [sp, #0]
 8018532:	463b      	mov	r3, r7
 8018534:	462c      	mov	r4, r5
 8018536:	46a9      	mov	r9, r5
 8018538:	46a8      	mov	r8, r5
 801853a:	a803      	add	r0, sp, #12
 801853c:	f001 fa73 	bl	8019a26 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8018540:	2300      	movs	r3, #0
 8018542:	9302      	str	r3, [sp, #8]
 8018544:	f64f 63ff 	movw	r3, #65279	@ 0xfeff
 8018548:	429c      	cmp	r4, r3
 801854a:	d002      	beq.n	8018552 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x52>
 801854c:	455c      	cmp	r4, fp
 801854e:	bf18      	it	ne
 8018550:	4625      	movne	r5, r4
 8018552:	ab02      	add	r3, sp, #8
 8018554:	4632      	mov	r2, r6
 8018556:	4651      	mov	r1, sl
 8018558:	a803      	add	r0, sp, #12
 801855a:	f001 fd69 	bl	801a030 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801855e:	4604      	mov	r4, r0
 8018560:	b108      	cbz	r0, 8018566 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x66>
 8018562:	280a      	cmp	r0, #10
 8018564:	d10a      	bne.n	801857c <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x7c>
 8018566:	45c1      	cmp	r9, r8
 8018568:	bf38      	it	cc
 801856a:	46c1      	movcc	r9, r8
 801856c:	f04f 0800 	mov.w	r8, #0
 8018570:	2c00      	cmp	r4, #0
 8018572:	d1e5      	bne.n	8018540 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 8018574:	4648      	mov	r0, r9
 8018576:	b01d      	add	sp, #116	@ 0x74
 8018578:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801857c:	9a02      	ldr	r2, [sp, #8]
 801857e:	2a00      	cmp	r2, #0
 8018580:	d0de      	beq.n	8018540 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 8018582:	7b57      	ldrb	r7, [r2, #13]
 8018584:	4629      	mov	r1, r5
 8018586:	6833      	ldr	r3, [r6, #0]
 8018588:	007f      	lsls	r7, r7, #1
 801858a:	8894      	ldrh	r4, [r2, #4]
 801858c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801858e:	f407 7080 	and.w	r0, r7, #256	@ 0x100
 8018592:	7a97      	ldrb	r7, [r2, #10]
 8018594:	4307      	orrs	r7, r0
 8018596:	4630      	mov	r0, r6
 8018598:	4798      	blx	r3
 801859a:	4438      	add	r0, r7
 801859c:	4480      	add	r8, r0
 801859e:	fa1f f888 	uxth.w	r8, r8
 80185a2:	e7e5      	b.n	8018570 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x70>

080185a4 <_ZNK8touchgfx4Font12getCharWidthEt>:
 80185a4:	b508      	push	{r3, lr}
 80185a6:	6803      	ldr	r3, [r0, #0]
 80185a8:	68db      	ldr	r3, [r3, #12]
 80185aa:	4798      	blx	r3
 80185ac:	b128      	cbz	r0, 80185ba <_ZNK8touchgfx4Font12getCharWidthEt+0x16>
 80185ae:	7b43      	ldrb	r3, [r0, #13]
 80185b0:	7a80      	ldrb	r0, [r0, #10]
 80185b2:	005b      	lsls	r3, r3, #1
 80185b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80185b8:	4318      	orrs	r0, r3
 80185ba:	bd08      	pop	{r3, pc}

080185bc <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz>:
 80185bc:	b40e      	push	{r1, r2, r3}
 80185be:	b5f0      	push	{r4, r5, r6, r7, lr}
 80185c0:	b09e      	sub	sp, #120	@ 0x78
 80185c2:	4605      	mov	r5, r0
 80185c4:	ab23      	add	r3, sp, #140	@ 0x8c
 80185c6:	a805      	add	r0, sp, #20
 80185c8:	f853 4b04 	ldr.w	r4, [r3], #4
 80185cc:	9303      	str	r3, [sp, #12]
 80185ce:	f001 f9cf 	bl	8019970 <_ZN8touchgfx12TextProviderC1Ev>
 80185d2:	682b      	ldr	r3, [r5, #0]
 80185d4:	4628      	mov	r0, r5
 80185d6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80185d8:	4798      	blx	r3
 80185da:	682b      	ldr	r3, [r5, #0]
 80185dc:	4606      	mov	r6, r0
 80185de:	4628      	mov	r0, r5
 80185e0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80185e2:	4798      	blx	r3
 80185e4:	4633      	mov	r3, r6
 80185e6:	4621      	mov	r1, r4
 80185e8:	ae1e      	add	r6, sp, #120	@ 0x78
 80185ea:	2400      	movs	r4, #0
 80185ec:	9000      	str	r0, [sp, #0]
 80185ee:	9a03      	ldr	r2, [sp, #12]
 80185f0:	a805      	add	r0, sp, #20
 80185f2:	f001 fa18 	bl	8019a26 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 80185f6:	f846 4d68 	str.w	r4, [r6, #-104]!
 80185fa:	462a      	mov	r2, r5
 80185fc:	4633      	mov	r3, r6
 80185fe:	4621      	mov	r1, r4
 8018600:	a805      	add	r0, sp, #20
 8018602:	f001 fd15 	bl	801a030 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8018606:	b300      	cbz	r0, 801864a <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x8e>
 8018608:	280a      	cmp	r0, #10
 801860a:	d01a      	beq.n	8018642 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
 801860c:	9f04      	ldr	r7, [sp, #16]
 801860e:	b1c7      	cbz	r7, 8018642 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
 8018610:	7b78      	ldrb	r0, [r7, #13]
 8018612:	7a3b      	ldrb	r3, [r7, #8]
 8018614:	00c1      	lsls	r1, r0, #3
 8018616:	88ea      	ldrh	r2, [r5, #6]
 8018618:	f401 7180 	and.w	r1, r1, #256	@ 0x100
 801861c:	4319      	orrs	r1, r3
 801861e:	0643      	lsls	r3, r0, #25
 8018620:	ea4f 1000 	mov.w	r0, r0, lsl #4
 8018624:	bf48      	it	mi
 8018626:	f5a1 7300 	submi.w	r3, r1, #512	@ 0x200
 801862a:	f400 7080 	and.w	r0, r0, #256	@ 0x100
 801862e:	bf48      	it	mi
 8018630:	b219      	sxthmi	r1, r3
 8018632:	79fb      	ldrb	r3, [r7, #7]
 8018634:	4303      	orrs	r3, r0
 8018636:	4413      	add	r3, r2
 8018638:	1a5b      	subs	r3, r3, r1
 801863a:	b21b      	sxth	r3, r3
 801863c:	429c      	cmp	r4, r3
 801863e:	bfb8      	it	lt
 8018640:	461c      	movlt	r4, r3
 8018642:	4633      	mov	r3, r6
 8018644:	462a      	mov	r2, r5
 8018646:	2100      	movs	r1, #0
 8018648:	e7da      	b.n	8018600 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x44>
 801864a:	b2a0      	uxth	r0, r4
 801864c:	b01e      	add	sp, #120	@ 0x78
 801864e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8018652:	b003      	add	sp, #12
 8018654:	4770      	bx	lr

08018656 <_ZNK8touchgfx4Font20getMinimumTextHeightEv>:
 8018656:	7a43      	ldrb	r3, [r0, #9]
 8018658:	8880      	ldrh	r0, [r0, #4]
 801865a:	4418      	add	r0, r3
 801865c:	b280      	uxth	r0, r0
 801865e:	4770      	bx	lr

08018660 <_ZNK8touchgfx4Font13getFontHeightEv>:
 8018660:	6803      	ldr	r3, [r0, #0]
 8018662:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8018664:	4718      	bx	r3

08018666 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz>:
 8018666:	b40e      	push	{r1, r2, r3}
 8018668:	b570      	push	{r4, r5, r6, lr}
 801866a:	b09d      	sub	sp, #116	@ 0x74
 801866c:	4604      	mov	r4, r0
 801866e:	ab21      	add	r3, sp, #132	@ 0x84
 8018670:	a803      	add	r0, sp, #12
 8018672:	f853 5b04 	ldr.w	r5, [r3], #4
 8018676:	9302      	str	r3, [sp, #8]
 8018678:	f001 f97a 	bl	8019970 <_ZN8touchgfx12TextProviderC1Ev>
 801867c:	6823      	ldr	r3, [r4, #0]
 801867e:	4620      	mov	r0, r4
 8018680:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8018682:	4798      	blx	r3
 8018684:	6823      	ldr	r3, [r4, #0]
 8018686:	4606      	mov	r6, r0
 8018688:	4620      	mov	r0, r4
 801868a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801868c:	2401      	movs	r4, #1
 801868e:	4798      	blx	r3
 8018690:	4633      	mov	r3, r6
 8018692:	9000      	str	r0, [sp, #0]
 8018694:	4629      	mov	r1, r5
 8018696:	9a02      	ldr	r2, [sp, #8]
 8018698:	a803      	add	r0, sp, #12
 801869a:	f001 f9c4 	bl	8019a26 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801869e:	a803      	add	r0, sp, #12
 80186a0:	f001 fd92 	bl	801a1c8 <_ZN8touchgfx12TextProvider11getNextCharEv>
 80186a4:	b2a3      	uxth	r3, r4
 80186a6:	b138      	cbz	r0, 80186b8 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x52>
 80186a8:	280a      	cmp	r0, #10
 80186aa:	a803      	add	r0, sp, #12
 80186ac:	bf04      	itt	eq
 80186ae:	3301      	addeq	r3, #1
 80186b0:	b21c      	sxtheq	r4, r3
 80186b2:	f001 fd89 	bl	801a1c8 <_ZN8touchgfx12TextProvider11getNextCharEv>
 80186b6:	e7f5      	b.n	80186a4 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x3e>
 80186b8:	4618      	mov	r0, r3
 80186ba:	b01d      	add	sp, #116	@ 0x74
 80186bc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80186c0:	b003      	add	sp, #12
 80186c2:	4770      	bx	lr

080186c4 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz>:
 80186c4:	b40e      	push	{r1, r2, r3}
 80186c6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80186c8:	b09e      	sub	sp, #120	@ 0x78
 80186ca:	4604      	mov	r4, r0
 80186cc:	ab23      	add	r3, sp, #140	@ 0x8c
 80186ce:	a805      	add	r0, sp, #20
 80186d0:	f853 5b04 	ldr.w	r5, [r3], #4
 80186d4:	9303      	str	r3, [sp, #12]
 80186d6:	f001 f94b 	bl	8019970 <_ZN8touchgfx12TextProviderC1Ev>
 80186da:	6823      	ldr	r3, [r4, #0]
 80186dc:	4620      	mov	r0, r4
 80186de:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80186e0:	4798      	blx	r3
 80186e2:	6823      	ldr	r3, [r4, #0]
 80186e4:	4606      	mov	r6, r0
 80186e6:	4620      	mov	r0, r4
 80186e8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80186ea:	4798      	blx	r3
 80186ec:	4633      	mov	r3, r6
 80186ee:	4629      	mov	r1, r5
 80186f0:	9000      	str	r0, [sp, #0]
 80186f2:	9a03      	ldr	r2, [sp, #12]
 80186f4:	a805      	add	r0, sp, #20
 80186f6:	f001 f996 	bl	8019a26 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 80186fa:	ad1e      	add	r5, sp, #120	@ 0x78
 80186fc:	2100      	movs	r1, #0
 80186fe:	f647 76ff 	movw	r6, #32767	@ 0x7fff
 8018702:	4622      	mov	r2, r4
 8018704:	a805      	add	r0, sp, #20
 8018706:	f845 1d68 	str.w	r1, [r5, #-104]!
 801870a:	462b      	mov	r3, r5
 801870c:	f001 fc90 	bl	801a030 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8018710:	b1d8      	cbz	r0, 801874a <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x86>
 8018712:	280a      	cmp	r0, #10
 8018714:	d012      	beq.n	801873c <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x78>
 8018716:	9804      	ldr	r0, [sp, #16]
 8018718:	b180      	cbz	r0, 801873c <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x78>
 801871a:	7b47      	ldrb	r7, [r0, #13]
 801871c:	88e2      	ldrh	r2, [r4, #6]
 801871e:	00fb      	lsls	r3, r7, #3
 8018720:	f403 7180 	and.w	r1, r3, #256	@ 0x100
 8018724:	7a03      	ldrb	r3, [r0, #8]
 8018726:	430b      	orrs	r3, r1
 8018728:	0679      	lsls	r1, r7, #25
 801872a:	bf44      	itt	mi
 801872c:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 8018730:	b21b      	sxthmi	r3, r3
 8018732:	1ad3      	subs	r3, r2, r3
 8018734:	b21b      	sxth	r3, r3
 8018736:	429e      	cmp	r6, r3
 8018738:	bfa8      	it	ge
 801873a:	461e      	movge	r6, r3
 801873c:	462b      	mov	r3, r5
 801873e:	4622      	mov	r2, r4
 8018740:	2100      	movs	r1, #0
 8018742:	a805      	add	r0, sp, #20
 8018744:	f001 fc74 	bl	801a030 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8018748:	e7e2      	b.n	8018710 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x4c>
 801874a:	4630      	mov	r0, r6
 801874c:	b01e      	add	sp, #120	@ 0x78
 801874e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8018752:	b003      	add	sp, #12
 8018754:	4770      	bx	lr

08018756 <_ZNK8touchgfx8Drawable10invalidateEv>:
 8018756:	b513      	push	{r0, r1, r4, lr}
 8018758:	6803      	ldr	r3, [r0, #0]
 801875a:	2400      	movs	r4, #0
 801875c:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 8018760:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8018764:	f8ad 1004 	strh.w	r1, [sp, #4]
 8018768:	4669      	mov	r1, sp
 801876a:	691b      	ldr	r3, [r3, #16]
 801876c:	9400      	str	r4, [sp, #0]
 801876e:	f8ad 2006 	strh.w	r2, [sp, #6]
 8018772:	4798      	blx	r3
 8018774:	b002      	add	sp, #8
 8018776:	bd10      	pop	{r4, pc}

08018778 <_ZN8touchgfx8Drawable20getSolidRectAbsoluteEv>:
 8018778:	b538      	push	{r3, r4, r5, lr}
 801877a:	680b      	ldr	r3, [r1, #0]
 801877c:	460c      	mov	r4, r1
 801877e:	4605      	mov	r5, r0
 8018780:	68db      	ldr	r3, [r3, #12]
 8018782:	4798      	blx	r3
 8018784:	6823      	ldr	r3, [r4, #0]
 8018786:	4620      	mov	r0, r4
 8018788:	4629      	mov	r1, r5
 801878a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801878c:	4798      	blx	r3
 801878e:	4628      	mov	r0, r5
 8018790:	bd38      	pop	{r3, r4, r5, pc}

08018792 <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE>:
 8018792:	b410      	push	{r4}
 8018794:	880a      	ldrh	r2, [r1, #0]
 8018796:	8884      	ldrh	r4, [r0, #4]
 8018798:	4422      	add	r2, r4
 801879a:	800a      	strh	r2, [r1, #0]
 801879c:	884a      	ldrh	r2, [r1, #2]
 801879e:	88c4      	ldrh	r4, [r0, #6]
 80187a0:	4422      	add	r2, r4
 80187a2:	804a      	strh	r2, [r1, #2]
 80187a4:	6940      	ldr	r0, [r0, #20]
 80187a6:	b120      	cbz	r0, 80187b2 <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE+0x20>
 80187a8:	6803      	ldr	r3, [r0, #0]
 80187aa:	f85d 4b04 	ldr.w	r4, [sp], #4
 80187ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80187b0:	4718      	bx	r3
 80187b2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80187b6:	4770      	bx	lr

080187b8 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE>:
 80187b8:	b570      	push	{r4, r5, r6, lr}
 80187ba:	8882      	ldrh	r2, [r0, #4]
 80187bc:	460c      	mov	r4, r1
 80187be:	880b      	ldrh	r3, [r1, #0]
 80187c0:	4605      	mov	r5, r0
 80187c2:	4413      	add	r3, r2
 80187c4:	800b      	strh	r3, [r1, #0]
 80187c6:	884b      	ldrh	r3, [r1, #2]
 80187c8:	88c2      	ldrh	r2, [r0, #6]
 80187ca:	4413      	add	r3, r2
 80187cc:	804b      	strh	r3, [r1, #2]
 80187ce:	1d01      	adds	r1, r0, #4
 80187d0:	4620      	mov	r0, r4
 80187d2:	f7f7 f915 	bl	800fa00 <_ZN8touchgfx4RectaNERKS0_>
 80187d6:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 80187da:	2b00      	cmp	r3, #0
 80187dc:	dd0b      	ble.n	80187f6 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 80187de:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 80187e2:	2b00      	cmp	r3, #0
 80187e4:	dd07      	ble.n	80187f6 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 80187e6:	6968      	ldr	r0, [r5, #20]
 80187e8:	b128      	cbz	r0, 80187f6 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 80187ea:	6803      	ldr	r3, [r0, #0]
 80187ec:	4621      	mov	r1, r4
 80187ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80187f0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80187f4:	4718      	bx	r3
 80187f6:	bd70      	pop	{r4, r5, r6, pc}

080187f8 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE>:
 80187f8:	b570      	push	{r4, r5, r6, lr}
 80187fa:	8882      	ldrh	r2, [r0, #4]
 80187fc:	460c      	mov	r4, r1
 80187fe:	880b      	ldrh	r3, [r1, #0]
 8018800:	4605      	mov	r5, r0
 8018802:	4413      	add	r3, r2
 8018804:	800b      	strh	r3, [r1, #0]
 8018806:	884b      	ldrh	r3, [r1, #2]
 8018808:	88c2      	ldrh	r2, [r0, #6]
 801880a:	4413      	add	r3, r2
 801880c:	804b      	strh	r3, [r1, #2]
 801880e:	1d01      	adds	r1, r0, #4
 8018810:	4620      	mov	r0, r4
 8018812:	f7f7 f8f5 	bl	800fa00 <_ZN8touchgfx4RectaNERKS0_>
 8018816:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 801881a:	2b00      	cmp	r3, #0
 801881c:	dd19      	ble.n	8018852 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5a>
 801881e:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8018822:	2b00      	cmp	r3, #0
 8018824:	dd15      	ble.n	8018852 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5a>
 8018826:	6968      	ldr	r0, [r5, #20]
 8018828:	b128      	cbz	r0, 8018836 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x3e>
 801882a:	6803      	ldr	r3, [r0, #0]
 801882c:	4621      	mov	r1, r4
 801882e:	691b      	ldr	r3, [r3, #16]
 8018830:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8018834:	4718      	bx	r3
 8018836:	4b07      	ldr	r3, [pc, #28]	@ (8018854 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5c>)
 8018838:	681b      	ldr	r3, [r3, #0]
 801883a:	3304      	adds	r3, #4
 801883c:	429d      	cmp	r5, r3
 801883e:	d108      	bne.n	8018852 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5a>
 8018840:	f7fe fec6 	bl	80175d0 <_ZN8touchgfx11Application11getInstanceEv>
 8018844:	6803      	ldr	r3, [r0, #0]
 8018846:	6821      	ldr	r1, [r4, #0]
 8018848:	6862      	ldr	r2, [r4, #4]
 801884a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801884c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8018850:	4718      	bx	r3
 8018852:	bd70      	pop	{r4, r5, r6, pc}
 8018854:	24028e64 	.word	0x24028e64

08018858 <_ZN8touchgfx8Drawable12moveRelativeEss>:
 8018858:	b570      	push	{r4, r5, r6, lr}
 801885a:	4604      	mov	r4, r0
 801885c:	4616      	mov	r6, r2
 801885e:	460d      	mov	r5, r1
 8018860:	b901      	cbnz	r1, 8018864 <_ZN8touchgfx8Drawable12moveRelativeEss+0xc>
 8018862:	b192      	cbz	r2, 801888a <_ZN8touchgfx8Drawable12moveRelativeEss+0x32>
 8018864:	6823      	ldr	r3, [r4, #0]
 8018866:	4620      	mov	r0, r4
 8018868:	699b      	ldr	r3, [r3, #24]
 801886a:	4798      	blx	r3
 801886c:	88e2      	ldrh	r2, [r4, #6]
 801886e:	88a1      	ldrh	r1, [r4, #4]
 8018870:	4620      	mov	r0, r4
 8018872:	4432      	add	r2, r6
 8018874:	4429      	add	r1, r5
 8018876:	b212      	sxth	r2, r2
 8018878:	b209      	sxth	r1, r1
 801887a:	f7eb fa74 	bl	8003d66 <_ZN8touchgfx8Drawable5setXYEss>
 801887e:	6823      	ldr	r3, [r4, #0]
 8018880:	4620      	mov	r0, r4
 8018882:	699b      	ldr	r3, [r3, #24]
 8018884:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8018888:	4718      	bx	r3
 801888a:	bd70      	pop	{r4, r5, r6, pc}

0801888c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>:
 801888c:	b510      	push	{r4, lr}
 801888e:	2300      	movs	r3, #0
 8018890:	4604      	mov	r4, r0
 8018892:	4608      	mov	r0, r1
 8018894:	f9b1 1008 	ldrsh.w	r1, [r1, #8]
 8018898:	8023      	strh	r3, [r4, #0]
 801889a:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 801889e:	8063      	strh	r3, [r4, #2]
 80188a0:	6803      	ldr	r3, [r0, #0]
 80188a2:	80a1      	strh	r1, [r4, #4]
 80188a4:	4621      	mov	r1, r4
 80188a6:	80e2      	strh	r2, [r4, #6]
 80188a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80188aa:	4798      	blx	r3
 80188ac:	4620      	mov	r0, r4
 80188ae:	bd10      	pop	{r4, pc}

080188b0 <_ZN8touchgfx22VectorFontRendererImplD1Ev>:
 80188b0:	4770      	bx	lr

080188b2 <_ZN8touchgfx22VectorFontRendererImplD0Ev>:
 80188b2:	b510      	push	{r4, lr}
 80188b4:	4604      	mov	r4, r0
 80188b6:	211c      	movs	r1, #28
 80188b8:	f00e f969 	bl	8026b8e <_ZdlPvj>
 80188bc:	4620      	mov	r0, r4
 80188be:	bd10      	pop	{r4, pc}

080188c0 <_ZN8touchgfx22VectorFontRendererImplC1Ev>:
 80188c0:	4a04      	ldr	r2, [pc, #16]	@ (80188d4 <_ZN8touchgfx22VectorFontRendererImplC1Ev+0x14>)
 80188c2:	6002      	str	r2, [r0, #0]
 80188c4:	2200      	movs	r2, #0
 80188c6:	e9c0 2201 	strd	r2, r2, [r0, #4]
 80188ca:	e9c0 2203 	strd	r2, r2, [r0, #12]
 80188ce:	e9c0 2205 	strd	r2, r2, [r0, #20]
 80188d2:	4770      	bx	lr
 80188d4:	0802c718 	.word	0x0802c718

080188d8 <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs>:
 80188d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80188dc:	4604      	mov	r4, r0
 80188de:	b087      	sub	sp, #28
 80188e0:	4696      	mov	lr, r2
 80188e2:	6880      	ldr	r0, [r0, #8]
 80188e4:	8b22      	ldrh	r2, [r4, #24]
 80188e6:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 80188ea:	9105      	str	r1, [sp, #20]
 80188ec:	1c51      	adds	r1, r2, #1
 80188ee:	8321      	strh	r1, [r4, #24]
 80188f0:	2101      	movs	r1, #1
 80188f2:	5481      	strb	r1, [r0, r2]
 80188f4:	4689      	mov	r9, r1
 80188f6:	f9b3 2000 	ldrsh.w	r2, [r3]
 80188fa:	8b60      	ldrh	r0, [r4, #26]
 80188fc:	ee06 2a90 	vmov	s13, r2
 8018900:	68e2      	ldr	r2, [r4, #12]
 8018902:	1845      	adds	r5, r0, r1
 8018904:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8018908:	eb02 0280 	add.w	r2, r2, r0, lsl #2
 801890c:	8365      	strh	r5, [r4, #26]
 801890e:	edc2 6a00 	vstr	s13, [r2]
 8018912:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8018916:	8b60      	ldrh	r0, [r4, #26]
 8018918:	ee07 2a10 	vmov	s14, r2
 801891c:	68e2      	ldr	r2, [r4, #12]
 801891e:	1845      	adds	r5, r0, r1
 8018920:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8018924:	eb02 0280 	add.w	r2, r2, r0, lsl #2
 8018928:	8365      	strh	r5, [r4, #26]
 801892a:	1d18      	adds	r0, r3, #4
 801892c:	460d      	mov	r5, r1
 801892e:	ed82 7a00 	vstr	s14, [r2]
 8018932:	f8be 2000 	ldrh.w	r2, [lr]
 8018936:	9203      	str	r2, [sp, #12]
 8018938:	2200      	movs	r2, #0
 801893a:	4613      	mov	r3, r2
 801893c:	4694      	mov	ip, r2
 801893e:	9201      	str	r2, [sp, #4]
 8018940:	9202      	str	r2, [sp, #8]
 8018942:	f8b4 8018 	ldrh.w	r8, [r4, #24]
 8018946:	9e05      	ldr	r6, [sp, #20]
 8018948:	f108 0701 	add.w	r7, r8, #1
 801894c:	f8d4 a008 	ldr.w	sl, [r4, #8]
 8018950:	428e      	cmp	r6, r1
 8018952:	b2bf      	uxth	r7, r7
 8018954:	eb0a 0b08 	add.w	fp, sl, r8
 8018958:	f340 80b6 	ble.w	8018ac8 <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x1f0>
 801895c:	9b03      	ldr	r3, [sp, #12]
 801895e:	f9b0 c000 	ldrsh.w	ip, [r0]
 8018962:	fa43 fb05 	asr.w	fp, r3, r5
 8018966:	f00b 0b01 	and.w	fp, fp, #1
 801896a:	fa5f f38b 	uxtb.w	r3, fp
 801896e:	9304      	str	r3, [sp, #16]
 8018970:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 8018974:	f1bb 0f00 	cmp.w	fp, #0
 8018978:	d057      	beq.n	8018a2a <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x152>
 801897a:	ee07 ca90 	vmov	s15, ip
 801897e:	8327      	strh	r7, [r4, #24]
 8018980:	eef8 5ae7 	vcvt.f32.s32	s11, s15
 8018984:	ee07 3a90 	vmov	s15, r3
 8018988:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801898c:	f1b9 0f00 	cmp.w	r9, #0
 8018990:	d028      	beq.n	80189e4 <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x10c>
 8018992:	f04f 0602 	mov.w	r6, #2
 8018996:	f80a 6008 	strb.w	r6, [sl, r8]
 801899a:	f8b4 801a 	ldrh.w	r8, [r4, #26]
 801899e:	68e7      	ldr	r7, [r4, #12]
 80189a0:	f108 0901 	add.w	r9, r8, #1
 80189a4:	eb07 0788 	add.w	r7, r7, r8, lsl #2
 80189a8:	f8a4 901a 	strh.w	r9, [r4, #26]
 80189ac:	edc7 5a00 	vstr	s11, [r7]
 80189b0:	f8b4 801a 	ldrh.w	r8, [r4, #26]
 80189b4:	68e7      	ldr	r7, [r4, #12]
 80189b6:	f108 0901 	add.w	r9, r8, #1
 80189ba:	eb07 0788 	add.w	r7, r7, r8, lsl #2
 80189be:	f8a4 901a 	strh.w	r9, [r4, #26]
 80189c2:	edc7 7a00 	vstr	s15, [r7]
 80189c6:	3501      	adds	r5, #1
 80189c8:	2d10      	cmp	r5, #16
 80189ca:	d106      	bne.n	80189da <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x102>
 80189cc:	9d02      	ldr	r5, [sp, #8]
 80189ce:	3501      	adds	r5, #1
 80189d0:	9502      	str	r5, [sp, #8]
 80189d2:	f83e 5015 	ldrh.w	r5, [lr, r5, lsl #1]
 80189d6:	9503      	str	r5, [sp, #12]
 80189d8:	2500      	movs	r5, #0
 80189da:	3101      	adds	r1, #1
 80189dc:	3004      	adds	r0, #4
 80189de:	f8dd 9010 	ldr.w	r9, [sp, #16]
 80189e2:	e7ae      	b.n	8018942 <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x6a>
 80189e4:	f04f 0605 	mov.w	r6, #5
 80189e8:	ed9d 5a01 	vldr	s10, [sp, #4]
 80189ec:	f80a 6008 	strb.w	r6, [sl, r8]
 80189f0:	eeb8 5ac5 	vcvt.f32.s32	s10, s10
 80189f4:	f8b4 801a 	ldrh.w	r8, [r4, #26]
 80189f8:	68e7      	ldr	r7, [r4, #12]
 80189fa:	f108 0901 	add.w	r9, r8, #1
 80189fe:	eb07 0788 	add.w	r7, r7, r8, lsl #2
 8018a02:	f8a4 901a 	strh.w	r9, [r4, #26]
 8018a06:	ed87 5a00 	vstr	s10, [r7]
 8018a0a:	ee05 2a10 	vmov	s10, r2
 8018a0e:	f8b4 801a 	ldrh.w	r8, [r4, #26]
 8018a12:	68e7      	ldr	r7, [r4, #12]
 8018a14:	eeb8 5ac5 	vcvt.f32.s32	s10, s10
 8018a18:	f108 0901 	add.w	r9, r8, #1
 8018a1c:	eb07 0788 	add.w	r7, r7, r8, lsl #2
 8018a20:	f8a4 901a 	strh.w	r9, [r4, #26]
 8018a24:	ed87 5a00 	vstr	s10, [r7]
 8018a28:	e7b7      	b.n	801899a <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0xc2>
 8018a2a:	f1b9 0f00 	cmp.w	r9, #0
 8018a2e:	d147      	bne.n	8018ac0 <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x1e8>
 8018a30:	f04f 0605 	mov.w	r6, #5
 8018a34:	eddd 7a01 	vldr	s15, [sp, #4]
 8018a38:	8327      	strh	r7, [r4, #24]
 8018a3a:	f80a 6008 	strb.w	r6, [sl, r8]
 8018a3e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8018a42:	f8b4 801a 	ldrh.w	r8, [r4, #26]
 8018a46:	68e7      	ldr	r7, [r4, #12]
 8018a48:	f108 0901 	add.w	r9, r8, #1
 8018a4c:	9e01      	ldr	r6, [sp, #4]
 8018a4e:	eb07 0788 	add.w	r7, r7, r8, lsl #2
 8018a52:	f8a4 901a 	strh.w	r9, [r4, #26]
 8018a56:	4466      	add	r6, ip
 8018a58:	edc7 7a00 	vstr	s15, [r7]
 8018a5c:	ee07 2a90 	vmov	s15, r2
 8018a60:	f8b4 801a 	ldrh.w	r8, [r4, #26]
 8018a64:	441a      	add	r2, r3
 8018a66:	68e7      	ldr	r7, [r4, #12]
 8018a68:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8018a6c:	f108 0901 	add.w	r9, r8, #1
 8018a70:	eb07 0788 	add.w	r7, r7, r8, lsl #2
 8018a74:	f8a4 901a 	strh.w	r9, [r4, #26]
 8018a78:	edc7 7a00 	vstr	s15, [r7]
 8018a7c:	ee07 6a90 	vmov	s15, r6
 8018a80:	f8b4 801a 	ldrh.w	r8, [r4, #26]
 8018a84:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8018a88:	68e7      	ldr	r7, [r4, #12]
 8018a8a:	f108 0901 	add.w	r9, r8, #1
 8018a8e:	eb07 0788 	add.w	r7, r7, r8, lsl #2
 8018a92:	ee67 7a86 	vmul.f32	s15, s15, s12
 8018a96:	f8a4 901a 	strh.w	r9, [r4, #26]
 8018a9a:	edc7 7a00 	vstr	s15, [r7]
 8018a9e:	ee07 2a90 	vmov	s15, r2
 8018aa2:	f8b4 801a 	ldrh.w	r8, [r4, #26]
 8018aa6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8018aaa:	68e7      	ldr	r7, [r4, #12]
 8018aac:	f108 0901 	add.w	r9, r8, #1
 8018ab0:	eb07 0788 	add.w	r7, r7, r8, lsl #2
 8018ab4:	ee67 7a86 	vmul.f32	s15, s15, s12
 8018ab8:	f8a4 901a 	strh.w	r9, [r4, #26]
 8018abc:	edc7 7a00 	vstr	s15, [r7]
 8018ac0:	461a      	mov	r2, r3
 8018ac2:	f8cd c004 	str.w	ip, [sp, #4]
 8018ac6:	e77e      	b.n	80189c6 <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0xee>
 8018ac8:	f1b9 0f00 	cmp.w	r9, #0
 8018acc:	d028      	beq.n	8018b20 <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x248>
 8018ace:	ee07 ca90 	vmov	s15, ip
 8018ad2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8018ad6:	eef4 6a67 	vcmp.f32	s13, s15
 8018ada:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018ade:	d108      	bne.n	8018af2 <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x21a>
 8018ae0:	ee07 3a90 	vmov	s15, r3
 8018ae4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8018ae8:	eeb4 7a67 	vcmp.f32	s14, s15
 8018aec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018af0:	d016      	beq.n	8018b20 <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x248>
 8018af2:	2302      	movs	r3, #2
 8018af4:	8327      	strh	r7, [r4, #24]
 8018af6:	f88b 3000 	strb.w	r3, [fp]
 8018afa:	8b62      	ldrh	r2, [r4, #26]
 8018afc:	68e3      	ldr	r3, [r4, #12]
 8018afe:	1c51      	adds	r1, r2, #1
 8018b00:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8018b04:	8361      	strh	r1, [r4, #26]
 8018b06:	edc3 6a00 	vstr	s13, [r3]
 8018b0a:	8b62      	ldrh	r2, [r4, #26]
 8018b0c:	68e3      	ldr	r3, [r4, #12]
 8018b0e:	1c51      	adds	r1, r2, #1
 8018b10:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8018b14:	8361      	strh	r1, [r4, #26]
 8018b16:	ed83 7a00 	vstr	s14, [r3]
 8018b1a:	b007      	add	sp, #28
 8018b1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018b20:	2305      	movs	r3, #5
 8018b22:	eddd 7a01 	vldr	s15, [sp, #4]
 8018b26:	8327      	strh	r7, [r4, #24]
 8018b28:	f88b 3000 	strb.w	r3, [fp]
 8018b2c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8018b30:	8b61      	ldrh	r1, [r4, #26]
 8018b32:	68e3      	ldr	r3, [r4, #12]
 8018b34:	1c4d      	adds	r5, r1, #1
 8018b36:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8018b3a:	8365      	strh	r5, [r4, #26]
 8018b3c:	edc3 7a00 	vstr	s15, [r3]
 8018b40:	ee07 2a90 	vmov	s15, r2
 8018b44:	8b61      	ldrh	r1, [r4, #26]
 8018b46:	68e3      	ldr	r3, [r4, #12]
 8018b48:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8018b4c:	1c4d      	adds	r5, r1, #1
 8018b4e:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8018b52:	8365      	strh	r5, [r4, #26]
 8018b54:	edc3 7a00 	vstr	s15, [r3]
 8018b58:	e7cf      	b.n	8018afa <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x222>
	...

08018b5c <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii>:
 8018b5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018b60:	4604      	mov	r4, r0
 8018b62:	b08e      	sub	sp, #56	@ 0x38
 8018b64:	4699      	mov	r9, r3
 8018b66:	4688      	mov	r8, r1
 8018b68:	4615      	mov	r5, r2
 8018b6a:	9e16      	ldr	r6, [sp, #88]	@ 0x58
 8018b6c:	f89d a064 	ldrb.w	sl, [sp, #100]	@ 0x64
 8018b70:	9f1a      	ldr	r7, [sp, #104]	@ 0x68
 8018b72:	f7ea fdf1 	bl	8003758 <_ZN8touchgfx14VectorRenderer11getInstanceEv>
 8018b76:	6060      	str	r0, [r4, #4]
 8018b78:	f1b9 0f00 	cmp.w	r9, #0
 8018b7c:	f000 80e8 	beq.w	8018d50 <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0x1f4>
 8018b80:	2800      	cmp	r0, #0
 8018b82:	f000 80e5 	beq.w	8018d50 <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0x1f4>
 8018b86:	a805      	add	r0, sp, #20
 8018b88:	f000 f8f9 	bl	8018d7e <_ZN8touchgfx9Matrix3x3C1Ev>
 8018b8c:	6833      	ldr	r3, [r6, #0]
 8018b8e:	4630      	mov	r0, r6
 8018b90:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8018b92:	4798      	blx	r3
 8018b94:	a805      	add	r0, sp, #20
 8018b96:	eef0 0a40 	vmov.f32	s1, s0
 8018b9a:	f000 f8f4 	bl	8018d86 <_ZN8touchgfx9Matrix3x35scaleEff>
 8018b9e:	6860      	ldr	r0, [r4, #4]
 8018ba0:	f1ba 0f03 	cmp.w	sl, #3
 8018ba4:	d83b      	bhi.n	8018c1e <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0xc2>
 8018ba6:	e8df f00a 	tbb	[pc, sl]
 8018baa:	1002      	.short	0x1002
 8018bac:	9f71      	.short	0x9f71
 8018bae:	6803      	ldr	r3, [r0, #0]
 8018bb0:	462a      	mov	r2, r5
 8018bb2:	4641      	mov	r1, r8
 8018bb4:	689b      	ldr	r3, [r3, #8]
 8018bb6:	4798      	blx	r3
 8018bb8:	eddd 7a1b 	vldr	s15, [sp, #108]	@ 0x6c
 8018bbc:	eef8 0ae7 	vcvt.f32.s32	s1, s15
 8018bc0:	ee07 7a90 	vmov	s15, r7
 8018bc4:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 8018bc8:	e026      	b.n	8018c18 <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0xbc>
 8018bca:	f9b5 2006 	ldrsh.w	r2, [r5, #6]
 8018bce:	f8b8 3004 	ldrh.w	r3, [r8, #4]
 8018bd2:	8869      	ldrh	r1, [r5, #2]
 8018bd4:	1a9b      	subs	r3, r3, r2
 8018bd6:	f8ad 2010 	strh.w	r2, [sp, #16]
 8018bda:	aa03      	add	r2, sp, #12
 8018bdc:	1a5b      	subs	r3, r3, r1
 8018bde:	4641      	mov	r1, r8
 8018be0:	f8ad 300c 	strh.w	r3, [sp, #12]
 8018be4:	882b      	ldrh	r3, [r5, #0]
 8018be6:	f8ad 300e 	strh.w	r3, [sp, #14]
 8018bea:	88ab      	ldrh	r3, [r5, #4]
 8018bec:	f8ad 3012 	strh.w	r3, [sp, #18]
 8018bf0:	6803      	ldr	r3, [r0, #0]
 8018bf2:	689b      	ldr	r3, [r3, #8]
 8018bf4:	4798      	blx	r3
 8018bf6:	ed9f 0a58 	vldr	s0, [pc, #352]	@ 8018d58 <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0x1fc>
 8018bfa:	a805      	add	r0, sp, #20
 8018bfc:	f000 f8e8 	bl	8018dd0 <_ZN8touchgfx9Matrix3x36rotateEf>
 8018c00:	f9b8 3004 	ldrsh.w	r3, [r8, #4]
 8018c04:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8018c06:	ee07 7a90 	vmov	s15, r7
 8018c0a:	1a9b      	subs	r3, r3, r2
 8018c0c:	eef8 0ae7 	vcvt.f32.s32	s1, s15
 8018c10:	ee00 3a10 	vmov	s0, r3
 8018c14:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 8018c18:	a805      	add	r0, sp, #20
 8018c1a:	f000 f927 	bl	8018e6c <_ZN8touchgfx9Matrix3x39translateEff>
 8018c1e:	6860      	ldr	r0, [r4, #4]
 8018c20:	a905      	add	r1, sp, #20
 8018c22:	2500      	movs	r5, #0
 8018c24:	f109 0602 	add.w	r6, r9, #2
 8018c28:	6803      	ldr	r3, [r0, #0]
 8018c2a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8018c2c:	4798      	blx	r3
 8018c2e:	6860      	ldr	r0, [r4, #4]
 8018c30:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 8018c32:	6803      	ldr	r3, [r0, #0]
 8018c34:	f041 417f 	orr.w	r1, r1, #4278190080	@ 0xff000000
 8018c38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8018c3a:	4798      	blx	r3
 8018c3c:	6860      	ldr	r0, [r4, #4]
 8018c3e:	f89d 1060 	ldrb.w	r1, [sp, #96]	@ 0x60
 8018c42:	6803      	ldr	r3, [r0, #0]
 8018c44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8018c46:	4798      	blx	r3
 8018c48:	6860      	ldr	r0, [r4, #4]
 8018c4a:	2101      	movs	r1, #1
 8018c4c:	6803      	ldr	r3, [r0, #0]
 8018c4e:	68db      	ldr	r3, [r3, #12]
 8018c50:	4798      	blx	r3
 8018c52:	f8b9 7000 	ldrh.w	r7, [r9]
 8018c56:	f104 0310 	add.w	r3, r4, #16
 8018c5a:	61a5      	str	r5, [r4, #24]
 8018c5c:	f104 0208 	add.w	r2, r4, #8
 8018c60:	f104 0114 	add.w	r1, r4, #20
 8018c64:	f104 000c 	add.w	r0, r4, #12
 8018c68:	f7eb fa80 	bl	800416c <_ZN8touchgfx22VectorFontRendererImpl20getVectorFontBuffersERPfRiRPhS3_>
 8018c6c:	42af      	cmp	r7, r5
 8018c6e:	dd60      	ble.n	8018d32 <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0x1d6>
 8018c70:	8831      	ldrh	r1, [r6, #0]
 8018c72:	1cb2      	adds	r2, r6, #2
 8018c74:	4620      	mov	r0, r4
 8018c76:	3501      	adds	r5, #1
 8018c78:	f101 030f 	add.w	r3, r1, #15
 8018c7c:	f3c3 1307 	ubfx	r3, r3, #4, #8
 8018c80:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8018c84:	f7ff fe28 	bl	80188d8 <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs>
 8018c88:	4606      	mov	r6, r0
 8018c8a:	e7ef      	b.n	8018c6c <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0x110>
 8018c8c:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 8018c90:	f8b8 3004 	ldrh.w	r3, [r8, #4]
 8018c94:	8829      	ldrh	r1, [r5, #0]
 8018c96:	1a9b      	subs	r3, r3, r2
 8018c98:	f8ad 2010 	strh.w	r2, [sp, #16]
 8018c9c:	aa03      	add	r2, sp, #12
 8018c9e:	1a5b      	subs	r3, r3, r1
 8018ca0:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 8018ca4:	886d      	ldrh	r5, [r5, #2]
 8018ca6:	f8ad 300c 	strh.w	r3, [sp, #12]
 8018caa:	f8b8 3006 	ldrh.w	r3, [r8, #6]
 8018cae:	f8ad 1012 	strh.w	r1, [sp, #18]
 8018cb2:	1a5b      	subs	r3, r3, r1
 8018cb4:	4641      	mov	r1, r8
 8018cb6:	1b5b      	subs	r3, r3, r5
 8018cb8:	f8ad 300e 	strh.w	r3, [sp, #14]
 8018cbc:	6803      	ldr	r3, [r0, #0]
 8018cbe:	689b      	ldr	r3, [r3, #8]
 8018cc0:	4798      	blx	r3
 8018cc2:	ed9f 0a26 	vldr	s0, [pc, #152]	@ 8018d5c <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0x200>
 8018cc6:	a805      	add	r0, sp, #20
 8018cc8:	f000 f882 	bl	8018dd0 <_ZN8touchgfx9Matrix3x36rotateEf>
 8018ccc:	f9b8 3006 	ldrsh.w	r3, [r8, #6]
 8018cd0:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8018cd2:	1a9b      	subs	r3, r3, r2
 8018cd4:	ee00 3a90 	vmov	s1, r3
 8018cd8:	f9b8 3004 	ldrsh.w	r3, [r8, #4]
 8018cdc:	1bdb      	subs	r3, r3, r7
 8018cde:	eef8 0ae0 	vcvt.f32.s32	s1, s1
 8018ce2:	ee00 3a10 	vmov	s0, r3
 8018ce6:	e795      	b.n	8018c14 <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0xb8>
 8018ce8:	886b      	ldrh	r3, [r5, #2]
 8018cea:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 8018cee:	f8ad 300c 	strh.w	r3, [sp, #12]
 8018cf2:	f8b8 3006 	ldrh.w	r3, [r8, #6]
 8018cf6:	8829      	ldrh	r1, [r5, #0]
 8018cf8:	1a9b      	subs	r3, r3, r2
 8018cfa:	f8ad 2012 	strh.w	r2, [sp, #18]
 8018cfe:	aa03      	add	r2, sp, #12
 8018d00:	1a5b      	subs	r3, r3, r1
 8018d02:	4641      	mov	r1, r8
 8018d04:	f8ad 300e 	strh.w	r3, [sp, #14]
 8018d08:	88eb      	ldrh	r3, [r5, #6]
 8018d0a:	f8ad 3010 	strh.w	r3, [sp, #16]
 8018d0e:	6803      	ldr	r3, [r0, #0]
 8018d10:	689b      	ldr	r3, [r3, #8]
 8018d12:	4798      	blx	r3
 8018d14:	ed9f 0a12 	vldr	s0, [pc, #72]	@ 8018d60 <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0x204>
 8018d18:	a805      	add	r0, sp, #20
 8018d1a:	f000 f859 	bl	8018dd0 <_ZN8touchgfx9Matrix3x36rotateEf>
 8018d1e:	f9b8 3006 	ldrsh.w	r3, [r8, #6]
 8018d22:	eddd 7a1b 	vldr	s15, [sp, #108]	@ 0x6c
 8018d26:	1bdb      	subs	r3, r3, r7
 8018d28:	ee00 3a90 	vmov	s1, r3
 8018d2c:	eef8 0ae0 	vcvt.f32.s32	s1, s1
 8018d30:	e748      	b.n	8018bc4 <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0x68>
 8018d32:	6860      	ldr	r0, [r4, #4]
 8018d34:	2100      	movs	r1, #0
 8018d36:	8b22      	ldrh	r2, [r4, #24]
 8018d38:	6803      	ldr	r3, [r0, #0]
 8018d3a:	9101      	str	r1, [sp, #4]
 8018d3c:	8b61      	ldrh	r1, [r4, #26]
 8018d3e:	9100      	str	r1, [sp, #0]
 8018d40:	6a1d      	ldr	r5, [r3, #32]
 8018d42:	e9d4 1302 	ldrd	r1, r3, [r4, #8]
 8018d46:	47a8      	blx	r5
 8018d48:	6860      	ldr	r0, [r4, #4]
 8018d4a:	6803      	ldr	r3, [r0, #0]
 8018d4c:	69db      	ldr	r3, [r3, #28]
 8018d4e:	4798      	blx	r3
 8018d50:	b00e      	add	sp, #56	@ 0x38
 8018d52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018d56:	bf00      	nop
 8018d58:	42b40000 	.word	0x42b40000
 8018d5c:	43340000 	.word	0x43340000
 8018d60:	43870000 	.word	0x43870000

08018d64 <_ZN8touchgfx9Matrix3x35resetEv>:
 8018d64:	2300      	movs	r3, #0
 8018d66:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8018d6a:	6043      	str	r3, [r0, #4]
 8018d6c:	6002      	str	r2, [r0, #0]
 8018d6e:	6083      	str	r3, [r0, #8]
 8018d70:	60c3      	str	r3, [r0, #12]
 8018d72:	6102      	str	r2, [r0, #16]
 8018d74:	6143      	str	r3, [r0, #20]
 8018d76:	6183      	str	r3, [r0, #24]
 8018d78:	61c3      	str	r3, [r0, #28]
 8018d7a:	6202      	str	r2, [r0, #32]
 8018d7c:	4770      	bx	lr

08018d7e <_ZN8touchgfx9Matrix3x3C1Ev>:
 8018d7e:	b508      	push	{r3, lr}
 8018d80:	f7ff fff0 	bl	8018d64 <_ZN8touchgfx9Matrix3x35resetEv>
 8018d84:	bd08      	pop	{r3, pc}

08018d86 <_ZN8touchgfx9Matrix3x35scaleEff>:
 8018d86:	edd0 7a00 	vldr	s15, [r0]
 8018d8a:	ee67 7a80 	vmul.f32	s15, s15, s0
 8018d8e:	edc0 7a00 	vstr	s15, [r0]
 8018d92:	edd0 7a01 	vldr	s15, [r0, #4]
 8018d96:	ee67 7a80 	vmul.f32	s15, s15, s0
 8018d9a:	edc0 7a01 	vstr	s15, [r0, #4]
 8018d9e:	edd0 7a02 	vldr	s15, [r0, #8]
 8018da2:	ee27 0a80 	vmul.f32	s0, s15, s0
 8018da6:	edd0 7a03 	vldr	s15, [r0, #12]
 8018daa:	ee67 7aa0 	vmul.f32	s15, s15, s1
 8018dae:	ed80 0a02 	vstr	s0, [r0, #8]
 8018db2:	edc0 7a03 	vstr	s15, [r0, #12]
 8018db6:	edd0 7a04 	vldr	s15, [r0, #16]
 8018dba:	ee67 7aa0 	vmul.f32	s15, s15, s1
 8018dbe:	edc0 7a04 	vstr	s15, [r0, #16]
 8018dc2:	edd0 7a05 	vldr	s15, [r0, #20]
 8018dc6:	ee67 0aa0 	vmul.f32	s1, s15, s1
 8018dca:	edc0 0a05 	vstr	s1, [r0, #20]
 8018dce:	4770      	bx	lr

08018dd0 <_ZN8touchgfx9Matrix3x36rotateEf>:
 8018dd0:	eddf 7a24 	vldr	s15, [pc, #144]	@ 8018e64 <_ZN8touchgfx9Matrix3x36rotateEf+0x94>
 8018dd4:	ee20 0a27 	vmul.f32	s0, s0, s15
 8018dd8:	eddf 7a23 	vldr	s15, [pc, #140]	@ 8018e68 <_ZN8touchgfx9Matrix3x36rotateEf+0x98>
 8018ddc:	b510      	push	{r4, lr}
 8018dde:	ed2d 8b02 	vpush	{d8}
 8018de2:	eec0 8a27 	vdiv.f32	s17, s0, s15
 8018de6:	4604      	mov	r4, r0
 8018de8:	eeb0 0a68 	vmov.f32	s0, s17
 8018dec:	f00e f808 	bl	8026e00 <cosf>
 8018df0:	eeb0 8a40 	vmov.f32	s16, s0
 8018df4:	eeb0 0a68 	vmov.f32	s0, s17
 8018df8:	f00d ff3e 	bl	8026c78 <sinf>
 8018dfc:	edd4 6a03 	vldr	s13, [r4, #12]
 8018e00:	edd4 4a00 	vldr	s9, [r4]
 8018e04:	ee60 7a66 	vnmul.f32	s15, s0, s13
 8018e08:	ed94 7a04 	vldr	s14, [r4, #16]
 8018e0c:	ed94 5a01 	vldr	s10, [r4, #4]
 8018e10:	ee66 6a88 	vmul.f32	s13, s13, s16
 8018e14:	edd4 5a02 	vldr	s11, [r4, #8]
 8018e18:	eee8 7a24 	vfma.f32	s15, s16, s9
 8018e1c:	eee0 6a24 	vfma.f32	s13, s0, s9
 8018e20:	edc4 7a00 	vstr	s15, [r4]
 8018e24:	ee60 7a47 	vnmul.f32	s15, s0, s14
 8018e28:	ee27 7a08 	vmul.f32	s14, s14, s16
 8018e2c:	edc4 6a03 	vstr	s13, [r4, #12]
 8018e30:	eee8 7a05 	vfma.f32	s15, s16, s10
 8018e34:	eea0 7a05 	vfma.f32	s14, s0, s10
 8018e38:	edc4 7a01 	vstr	s15, [r4, #4]
 8018e3c:	edd4 7a05 	vldr	s15, [r4, #20]
 8018e40:	ed84 7a04 	vstr	s14, [r4, #16]
 8018e44:	ee20 6a67 	vnmul.f32	s12, s0, s15
 8018e48:	ee67 7a88 	vmul.f32	s15, s15, s16
 8018e4c:	eea8 6a25 	vfma.f32	s12, s16, s11
 8018e50:	eee0 7a25 	vfma.f32	s15, s0, s11
 8018e54:	ecbd 8b02 	vpop	{d8}
 8018e58:	ed84 6a02 	vstr	s12, [r4, #8]
 8018e5c:	edc4 7a05 	vstr	s15, [r4, #20]
 8018e60:	bd10      	pop	{r4, pc}
 8018e62:	bf00      	nop
 8018e64:	40490fdb 	.word	0x40490fdb
 8018e68:	43340000 	.word	0x43340000

08018e6c <_ZN8touchgfx9Matrix3x39translateEff>:
 8018e6c:	ed90 6a06 	vldr	s12, [r0, #24]
 8018e70:	edd0 7a00 	vldr	s15, [r0]
 8018e74:	edd0 6a07 	vldr	s13, [r0, #28]
 8018e78:	eee6 7a00 	vfma.f32	s15, s12, s0
 8018e7c:	ed90 7a08 	vldr	s14, [r0, #32]
 8018e80:	edc0 7a00 	vstr	s15, [r0]
 8018e84:	edd0 7a01 	vldr	s15, [r0, #4]
 8018e88:	eee6 7a80 	vfma.f32	s15, s13, s0
 8018e8c:	edc0 7a01 	vstr	s15, [r0, #4]
 8018e90:	edd0 7a02 	vldr	s15, [r0, #8]
 8018e94:	eee7 7a00 	vfma.f32	s15, s14, s0
 8018e98:	edc0 7a02 	vstr	s15, [r0, #8]
 8018e9c:	edd0 7a03 	vldr	s15, [r0, #12]
 8018ea0:	eee6 7a20 	vfma.f32	s15, s12, s1
 8018ea4:	edc0 7a03 	vstr	s15, [r0, #12]
 8018ea8:	edd0 7a04 	vldr	s15, [r0, #16]
 8018eac:	eee6 7aa0 	vfma.f32	s15, s13, s1
 8018eb0:	edc0 7a04 	vstr	s15, [r0, #16]
 8018eb4:	edd0 7a05 	vldr	s15, [r0, #20]
 8018eb8:	eee7 7a20 	vfma.f32	s15, s14, s1
 8018ebc:	edc0 7a05 	vstr	s15, [r0, #20]
 8018ec0:	4770      	bx	lr

08018ec2 <_ZNK8touchgfx9Matrix3x315affineTransformEff>:
 8018ec2:	edd0 6a01 	vldr	s13, [r0, #4]
 8018ec6:	b084      	sub	sp, #16
 8018ec8:	edd0 7a04 	vldr	s15, [r0, #16]
 8018ecc:	ed90 7a03 	vldr	s14, [r0, #12]
 8018ed0:	ee60 7aa7 	vmul.f32	s15, s1, s15
 8018ed4:	ee60 0aa6 	vmul.f32	s1, s1, s13
 8018ed8:	edd0 6a00 	vldr	s13, [r0]
 8018edc:	eee7 7a00 	vfma.f32	s15, s14, s0
 8018ee0:	ed90 7a05 	vldr	s14, [r0, #20]
 8018ee4:	eee6 0a80 	vfma.f32	s1, s13, s0
 8018ee8:	ed90 0a02 	vldr	s0, [r0, #8]
 8018eec:	ee30 0a80 	vadd.f32	s0, s1, s0
 8018ef0:	ee77 0a87 	vadd.f32	s1, s15, s14
 8018ef4:	b004      	add	sp, #16
 8018ef6:	4770      	bx	lr

08018ef8 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt>:
 8018ef8:	b530      	push	{r4, r5, lr}
 8018efa:	8083      	strh	r3, [r0, #4]
 8018efc:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8018f00:	f89d 5018 	ldrb.w	r5, [sp, #24]
 8018f04:	80c3      	strh	r3, [r0, #6]
 8018f06:	f89d 3010 	ldrb.w	r3, [sp, #16]
 8018f0a:	6141      	str	r1, [r0, #20]
 8018f0c:	7203      	strb	r3, [r0, #8]
 8018f0e:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8018f12:	8302      	strh	r2, [r0, #24]
 8018f14:	7243      	strb	r3, [r0, #9]
 8018f16:	7a83      	ldrb	r3, [r0, #10]
 8018f18:	f365 0306 	bfi	r3, r5, #0, #7
 8018f1c:	f89d 501c 	ldrb.w	r5, [sp, #28]
 8018f20:	f365 13c7 	bfi	r3, r5, #7, #1
 8018f24:	7283      	strb	r3, [r0, #10]
 8018f26:	f89d 3020 	ldrb.w	r3, [sp, #32]
 8018f2a:	72c3      	strb	r3, [r0, #11]
 8018f2c:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 8018f30:	7303      	strb	r3, [r0, #12]
 8018f32:	f8bd 3028 	ldrh.w	r3, [sp, #40]	@ 0x28
 8018f36:	81c3      	strh	r3, [r0, #14]
 8018f38:	f8bd 302c 	ldrh.w	r3, [sp, #44]	@ 0x2c
 8018f3c:	8203      	strh	r3, [r0, #16]
 8018f3e:	4b01      	ldr	r3, [pc, #4]	@ (8018f44 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt+0x4c>)
 8018f40:	6003      	str	r3, [r0, #0]
 8018f42:	bd30      	pop	{r4, r5, pc}
 8018f44:	0802c72c 	.word	0x0802c72c

08018f48 <_ZNK8touchgfx9ConstFont4findEt>:
 8018f48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018f4a:	6944      	ldr	r4, [r0, #20]
 8018f4c:	b3bc      	cbz	r4, 8018fbe <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8018f4e:	88a3      	ldrh	r3, [r4, #4]
 8018f50:	8b02      	ldrh	r2, [r0, #24]
 8018f52:	1acb      	subs	r3, r1, r3
 8018f54:	f102 32ff 	add.w	r2, r2, #4294967295
 8018f58:	d431      	bmi.n	8018fbe <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8018f5a:	4293      	cmp	r3, r2
 8018f5c:	dd0c      	ble.n	8018f78 <_ZNK8touchgfx9ConstFont4findEt+0x30>
 8018f5e:	230e      	movs	r3, #14
 8018f60:	fb03 4302 	mla	r3, r3, r2, r4
 8018f64:	889b      	ldrh	r3, [r3, #4]
 8018f66:	1a5b      	subs	r3, r3, r1
 8018f68:	1ad3      	subs	r3, r2, r3
 8018f6a:	429a      	cmp	r2, r3
 8018f6c:	db27      	blt.n	8018fbe <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8018f6e:	2b00      	cmp	r3, #0
 8018f70:	bfbc      	itt	lt
 8018f72:	2302      	movlt	r3, #2
 8018f74:	fb92 f3f3 	sdivlt	r3, r2, r3
 8018f78:	2500      	movs	r5, #0
 8018f7a:	260e      	movs	r6, #14
 8018f7c:	4295      	cmp	r5, r2
 8018f7e:	dc1e      	bgt.n	8018fbe <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8018f80:	fb06 4003 	mla	r0, r6, r3, r4
 8018f84:	8887      	ldrh	r7, [r0, #4]
 8018f86:	42b9      	cmp	r1, r7
 8018f88:	d01a      	beq.n	8018fc0 <_ZNK8touchgfx9ConstFont4findEt+0x78>
 8018f8a:	d20d      	bcs.n	8018fa8 <_ZNK8touchgfx9ConstFont4findEt+0x60>
 8018f8c:	1e5a      	subs	r2, r3, #1
 8018f8e:	4295      	cmp	r5, r2
 8018f90:	dc15      	bgt.n	8018fbe <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8018f92:	f830 3c0a 	ldrh.w	r3, [r0, #-10]
 8018f96:	1a5b      	subs	r3, r3, r1
 8018f98:	1ad3      	subs	r3, r2, r3
 8018f9a:	429a      	cmp	r2, r3
 8018f9c:	db0f      	blt.n	8018fbe <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8018f9e:	429d      	cmp	r5, r3
 8018fa0:	ddec      	ble.n	8018f7c <_ZNK8touchgfx9ConstFont4findEt+0x34>
 8018fa2:	1953      	adds	r3, r2, r5
 8018fa4:	105b      	asrs	r3, r3, #1
 8018fa6:	e7e9      	b.n	8018f7c <_ZNK8touchgfx9ConstFont4findEt+0x34>
 8018fa8:	1c5d      	adds	r5, r3, #1
 8018faa:	42aa      	cmp	r2, r5
 8018fac:	db07      	blt.n	8018fbe <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8018fae:	8a43      	ldrh	r3, [r0, #18]
 8018fb0:	1acb      	subs	r3, r1, r3
 8018fb2:	442b      	add	r3, r5
 8018fb4:	429d      	cmp	r5, r3
 8018fb6:	dc02      	bgt.n	8018fbe <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8018fb8:	429a      	cmp	r2, r3
 8018fba:	dadf      	bge.n	8018f7c <_ZNK8touchgfx9ConstFont4findEt+0x34>
 8018fbc:	e7f1      	b.n	8018fa2 <_ZNK8touchgfx9ConstFont4findEt+0x5a>
 8018fbe:	2000      	movs	r0, #0
 8018fc0:	bdf0      	pop	{r4, r5, r6, r7, pc}

08018fc2 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh>:
 8018fc2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018fc4:	4604      	mov	r4, r0
 8018fc6:	4617      	mov	r7, r2
 8018fc8:	461e      	mov	r6, r3
 8018fca:	b911      	cbnz	r1, 8018fd2 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x10>
 8018fcc:	2500      	movs	r5, #0
 8018fce:	4628      	mov	r0, r5
 8018fd0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018fd2:	290a      	cmp	r1, #10
 8018fd4:	d0fa      	beq.n	8018fcc <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 8018fd6:	f64f 62ff 	movw	r2, #65279	@ 0xfeff
 8018fda:	4291      	cmp	r1, r2
 8018fdc:	d0f6      	beq.n	8018fcc <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 8018fde:	f242 020b 	movw	r2, #8203	@ 0x200b
 8018fe2:	4291      	cmp	r1, r2
 8018fe4:	d0f2      	beq.n	8018fcc <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 8018fe6:	f7ff ffaf 	bl	8018f48 <_ZNK8touchgfx9ConstFont4findEt>
 8018fea:	4605      	mov	r5, r0
 8018fec:	b950      	cbnz	r0, 8019004 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x42>
 8018fee:	6823      	ldr	r3, [r4, #0]
 8018ff0:	4620      	mov	r0, r4
 8018ff2:	691b      	ldr	r3, [r3, #16]
 8018ff4:	4798      	blx	r3
 8018ff6:	4601      	mov	r1, r0
 8018ff8:	4620      	mov	r0, r4
 8018ffa:	f7ff ffa5 	bl	8018f48 <_ZNK8touchgfx9ConstFont4findEt>
 8018ffe:	4605      	mov	r5, r0
 8019000:	2800      	cmp	r0, #0
 8019002:	d0e3      	beq.n	8018fcc <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 8019004:	6823      	ldr	r3, [r4, #0]
 8019006:	4629      	mov	r1, r5
 8019008:	4620      	mov	r0, r4
 801900a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801900c:	4798      	blx	r3
 801900e:	6038      	str	r0, [r7, #0]
 8019010:	6823      	ldr	r3, [r4, #0]
 8019012:	4620      	mov	r0, r4
 8019014:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8019016:	4798      	blx	r3
 8019018:	7030      	strb	r0, [r6, #0]
 801901a:	e7d8      	b.n	8018fce <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xc>

0801901c <_ZN8touchgfx34lookupNearestNeighborRenderVariantERKNS_6BitmapE>:
 801901c:	b538      	push	{r3, r4, r5, lr}
 801901e:	4605      	mov	r5, r0
 8019020:	f002 fa64 	bl	801b4ec <_ZNK8touchgfx6Bitmap9getFormatEv>
 8019024:	4604      	mov	r4, r0
 8019026:	4628      	mov	r0, r5
 8019028:	f002 f9a4 	bl	801b374 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
 801902c:	2800      	cmp	r0, #0
 801902e:	bf14      	ite	ne
 8019030:	2002      	movne	r0, #2
 8019032:	2000      	moveq	r0, #0
 8019034:	ea40 0084 	orr.w	r0, r0, r4, lsl #2
 8019038:	b280      	uxth	r0, r0
 801903a:	bd38      	pop	{r3, r4, r5, pc}

0801903c <_ZN8touchgfx27lookupBilinearRenderVariantERKNS_6BitmapE>:
 801903c:	b538      	push	{r3, r4, r5, lr}
 801903e:	4605      	mov	r5, r0
 8019040:	f002 fa54 	bl	801b4ec <_ZNK8touchgfx6Bitmap9getFormatEv>
 8019044:	4604      	mov	r4, r0
 8019046:	4628      	mov	r0, r5
 8019048:	f002 f994 	bl	801b374 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
 801904c:	2800      	cmp	r0, #0
 801904e:	bf14      	ite	ne
 8019050:	2002      	movne	r0, #2
 8019052:	2000      	moveq	r0, #0
 8019054:	ea40 0084 	orr.w	r0, r0, r4, lsl #2
 8019058:	f040 0001 	orr.w	r0, r0, #1
 801905c:	b280      	uxth	r0, r0
 801905e:	bd38      	pop	{r3, r4, r5, pc}

08019060 <_ZN8touchgfx4clzuEm>:
 8019060:	4603      	mov	r3, r0
 8019062:	b1c8      	cbz	r0, 8019098 <_ZN8touchgfx4clzuEm+0x38>
 8019064:	0c02      	lsrs	r2, r0, #16
 8019066:	0412      	lsls	r2, r2, #16
 8019068:	b9a2      	cbnz	r2, 8019094 <_ZN8touchgfx4clzuEm+0x34>
 801906a:	0403      	lsls	r3, r0, #16
 801906c:	2010      	movs	r0, #16
 801906e:	f013 4f7f 	tst.w	r3, #4278190080	@ 0xff000000
 8019072:	bf04      	itt	eq
 8019074:	021b      	lsleq	r3, r3, #8
 8019076:	3008      	addeq	r0, #8
 8019078:	f013 4f70 	tst.w	r3, #4026531840	@ 0xf0000000
 801907c:	bf04      	itt	eq
 801907e:	011b      	lsleq	r3, r3, #4
 8019080:	3004      	addeq	r0, #4
 8019082:	f013 4f40 	tst.w	r3, #3221225472	@ 0xc0000000
 8019086:	bf04      	itt	eq
 8019088:	009b      	lsleq	r3, r3, #2
 801908a:	3002      	addeq	r0, #2
 801908c:	2b00      	cmp	r3, #0
 801908e:	db04      	blt.n	801909a <_ZN8touchgfx4clzuEm+0x3a>
 8019090:	3001      	adds	r0, #1
 8019092:	4770      	bx	lr
 8019094:	2000      	movs	r0, #0
 8019096:	e7ea      	b.n	801906e <_ZN8touchgfx4clzuEm+0xe>
 8019098:	2020      	movs	r0, #32
 801909a:	4770      	bx	lr

0801909c <_ZN8touchgfx7muldivuEmmmRm>:
 801909c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 80190a0:	460f      	mov	r7, r1
 80190a2:	4615      	mov	r5, r2
 80190a4:	461e      	mov	r6, r3
 80190a6:	4601      	mov	r1, r0
 80190a8:	b100      	cbz	r0, 80190ac <_ZN8touchgfx7muldivuEmmmRm+0x10>
 80190aa:	b927      	cbnz	r7, 80190b6 <_ZN8touchgfx7muldivuEmmmRm+0x1a>
 80190ac:	2000      	movs	r0, #0
 80190ae:	6030      	str	r0, [r6, #0]
 80190b0:	b002      	add	sp, #8
 80190b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80190b6:	f7ff ffd3 	bl	8019060 <_ZN8touchgfx4clzuEm>
 80190ba:	b980      	cbnz	r0, 80190de <_ZN8touchgfx7muldivuEmmmRm+0x42>
 80190bc:	4638      	mov	r0, r7
 80190be:	f7ff ffcf 	bl	8019060 <_ZN8touchgfx4clzuEm>
 80190c2:	2800      	cmp	r0, #0
 80190c4:	dd05      	ble.n	80190d2 <_ZN8touchgfx7muldivuEmmmRm+0x36>
 80190c6:	4633      	mov	r3, r6
 80190c8:	462a      	mov	r2, r5
 80190ca:	4638      	mov	r0, r7
 80190cc:	f7ff ffe6 	bl	801909c <_ZN8touchgfx7muldivuEmmmRm>
 80190d0:	e7ee      	b.n	80190b0 <_ZN8touchgfx7muldivuEmmmRm+0x14>
 80190d2:	f04f 33ff 	mov.w	r3, #4294967295
 80190d6:	f06f 4000 	mvn.w	r0, #2147483648	@ 0x80000000
 80190da:	6033      	str	r3, [r6, #0]
 80190dc:	e7e8      	b.n	80190b0 <_ZN8touchgfx7muldivuEmmmRm+0x14>
 80190de:	fa37 f800 	lsrs.w	r8, r7, r0
 80190e2:	fb07 f301 	mul.w	r3, r7, r1
 80190e6:	d105      	bne.n	80190f4 <_ZN8touchgfx7muldivuEmmmRm+0x58>
 80190e8:	fbb3 f0f5 	udiv	r0, r3, r5
 80190ec:	fb05 3510 	mls	r5, r5, r0, r3
 80190f0:	6035      	str	r5, [r6, #0]
 80190f2:	e7dd      	b.n	80190b0 <_ZN8touchgfx7muldivuEmmmRm+0x14>
 80190f4:	2301      	movs	r3, #1
 80190f6:	fa01 fa00 	lsl.w	sl, r1, r0
 80190fa:	462a      	mov	r2, r5
 80190fc:	fa03 f000 	lsl.w	r0, r3, r0
 8019100:	4633      	mov	r3, r6
 8019102:	fbba f9f5 	udiv	r9, sl, r5
 8019106:	3801      	subs	r0, #1
 8019108:	fb08 f409 	mul.w	r4, r8, r9
 801910c:	4038      	ands	r0, r7
 801910e:	f7ff ffc5 	bl	801909c <_ZN8touchgfx7muldivuEmmmRm>
 8019112:	462a      	mov	r2, r5
 8019114:	4607      	mov	r7, r0
 8019116:	ab01      	add	r3, sp, #4
 8019118:	fb05 a119 	mls	r1, r5, r9, sl
 801911c:	4640      	mov	r0, r8
 801911e:	f7ff ffbd 	bl	801909c <_ZN8touchgfx7muldivuEmmmRm>
 8019122:	9b01      	ldr	r3, [sp, #4]
 8019124:	6832      	ldr	r2, [r6, #0]
 8019126:	441a      	add	r2, r3
 8019128:	fbb2 f3f5 	udiv	r3, r2, r5
 801912c:	441c      	add	r4, r3
 801912e:	fb05 2513 	mls	r5, r5, r3, r2
 8019132:	443c      	add	r4, r7
 8019134:	4420      	add	r0, r4
 8019136:	e7db      	b.n	80190f0 <_ZN8touchgfx7muldivuEmmmRm+0x54>

08019138 <_ZN8touchgfx6muldivElllRl>:
 8019138:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801913a:	2800      	cmp	r0, #0
 801913c:	461e      	mov	r6, r3
 801913e:	bfba      	itte	lt
 8019140:	4240      	neglt	r0, r0
 8019142:	f04f 34ff 	movlt.w	r4, #4294967295
 8019146:	2401      	movge	r4, #1
 8019148:	2900      	cmp	r1, #0
 801914a:	bfbc      	itt	lt
 801914c:	4249      	neglt	r1, r1
 801914e:	4264      	neglt	r4, r4
 8019150:	2a00      	cmp	r2, #0
 8019152:	bfb6      	itet	lt
 8019154:	4265      	neglt	r5, r4
 8019156:	4625      	movge	r5, r4
 8019158:	4252      	neglt	r2, r2
 801915a:	4288      	cmp	r0, r1
 801915c:	bfc2      	ittt	gt
 801915e:	4603      	movgt	r3, r0
 8019160:	4608      	movgt	r0, r1
 8019162:	4619      	movgt	r1, r3
 8019164:	ab01      	add	r3, sp, #4
 8019166:	f7ff ff99 	bl	801909c <_ZN8touchgfx7muldivuEmmmRm>
 801916a:	9b01      	ldr	r3, [sp, #4]
 801916c:	4368      	muls	r0, r5
 801916e:	435c      	muls	r4, r3
 8019170:	6034      	str	r4, [r6, #0]
 8019172:	b002      	add	sp, #8
 8019174:	bd70      	pop	{r4, r5, r6, pc}

08019176 <_ZN8touchgfx6muldivElll>:
 8019176:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8019178:	4606      	mov	r6, r0
 801917a:	ab01      	add	r3, sp, #4
 801917c:	460d      	mov	r5, r1
 801917e:	4614      	mov	r4, r2
 8019180:	f7ff ffda 	bl	8019138 <_ZN8touchgfx6muldivElllRl>
 8019184:	2e00      	cmp	r6, #0
 8019186:	db20      	blt.n	80191ca <_ZN8touchgfx6muldivElll+0x54>
 8019188:	bf14      	ite	ne
 801918a:	2301      	movne	r3, #1
 801918c:	2300      	moveq	r3, #0
 801918e:	2d00      	cmp	r5, #0
 8019190:	db1e      	blt.n	80191d0 <_ZN8touchgfx6muldivElll+0x5a>
 8019192:	bf14      	ite	ne
 8019194:	2201      	movne	r2, #1
 8019196:	2200      	moveq	r2, #0
 8019198:	2c00      	cmp	r4, #0
 801919a:	fb03 f202 	mul.w	r2, r3, r2
 801919e:	db1a      	blt.n	80191d6 <_ZN8touchgfx6muldivElll+0x60>
 80191a0:	bf14      	ite	ne
 80191a2:	2301      	movne	r3, #1
 80191a4:	2300      	moveq	r3, #0
 80191a6:	4353      	muls	r3, r2
 80191a8:	2b01      	cmp	r3, #1
 80191aa:	d117      	bne.n	80191dc <_ZN8touchgfx6muldivElll+0x66>
 80191ac:	2c00      	cmp	r4, #0
 80191ae:	9b01      	ldr	r3, [sp, #4]
 80191b0:	bfb8      	it	lt
 80191b2:	4264      	neglt	r4, r4
 80191b4:	2b00      	cmp	r3, #0
 80191b6:	f104 0401 	add.w	r4, r4, #1
 80191ba:	bfb8      	it	lt
 80191bc:	425b      	neglt	r3, r3
 80191be:	ebb3 0f64 	cmp.w	r3, r4, asr #1
 80191c2:	db00      	blt.n	80191c6 <_ZN8touchgfx6muldivElll+0x50>
 80191c4:	3001      	adds	r0, #1
 80191c6:	b002      	add	sp, #8
 80191c8:	bd70      	pop	{r4, r5, r6, pc}
 80191ca:	f04f 33ff 	mov.w	r3, #4294967295
 80191ce:	e7de      	b.n	801918e <_ZN8touchgfx6muldivElll+0x18>
 80191d0:	f04f 32ff 	mov.w	r2, #4294967295
 80191d4:	e7e0      	b.n	8019198 <_ZN8touchgfx6muldivElll+0x22>
 80191d6:	f04f 33ff 	mov.w	r3, #4294967295
 80191da:	e7e4      	b.n	80191a6 <_ZN8touchgfx6muldivElll+0x30>
 80191dc:	3301      	adds	r3, #1
 80191de:	d1f2      	bne.n	80191c6 <_ZN8touchgfx6muldivElll+0x50>
 80191e0:	9b01      	ldr	r3, [sp, #4]
 80191e2:	2c00      	cmp	r4, #0
 80191e4:	bfb8      	it	lt
 80191e6:	4264      	neglt	r4, r4
 80191e8:	2b00      	cmp	r3, #0
 80191ea:	bfb8      	it	lt
 80191ec:	425b      	neglt	r3, r3
 80191ee:	ebb3 0f64 	cmp.w	r3, r4, asr #1
 80191f2:	bfc8      	it	gt
 80191f4:	f100 30ff 	addgt.w	r0, r0, #4294967295
 80191f8:	e7e5      	b.n	80191c6 <_ZN8touchgfx6muldivElll+0x50>

080191fa <_ZNK8touchgfx10ClickEvent12getEventTypeEv>:
 80191fa:	2000      	movs	r0, #0
 80191fc:	4770      	bx	lr

080191fe <_ZNK8touchgfx9DragEvent12getEventTypeEv>:
 80191fe:	2001      	movs	r0, #1
 8019200:	4770      	bx	lr

08019202 <_ZNK8touchgfx12GestureEvent12getEventTypeEv>:
 8019202:	2002      	movs	r0, #2
 8019204:	4770      	bx	lr

08019206 <_ZN8touchgfx6ScreenD1Ev>:
 8019206:	4770      	bx	lr

08019208 <_ZN8touchgfx12GestureEventD1Ev>:
 8019208:	4770      	bx	lr

0801920a <_ZN8touchgfx9DragEventD1Ev>:
 801920a:	4770      	bx	lr

0801920c <_ZN8touchgfx10ClickEventD1Ev>:
 801920c:	4770      	bx	lr

0801920e <_ZN8touchgfx10ClickEventD0Ev>:
 801920e:	b510      	push	{r4, lr}
 8019210:	4604      	mov	r4, r0
 8019212:	210c      	movs	r1, #12
 8019214:	f00d fcbb 	bl	8026b8e <_ZdlPvj>
 8019218:	4620      	mov	r0, r4
 801921a:	bd10      	pop	{r4, pc}

0801921c <_ZN8touchgfx9DragEventD0Ev>:
 801921c:	b510      	push	{r4, lr}
 801921e:	4604      	mov	r4, r0
 8019220:	2110      	movs	r1, #16
 8019222:	f00d fcb4 	bl	8026b8e <_ZdlPvj>
 8019226:	4620      	mov	r0, r4
 8019228:	bd10      	pop	{r4, pc}

0801922a <_ZN8touchgfx12GestureEventD0Ev>:
 801922a:	b510      	push	{r4, lr}
 801922c:	4604      	mov	r4, r0
 801922e:	210c      	movs	r1, #12
 8019230:	f00d fcad 	bl	8026b8e <_ZdlPvj>
 8019234:	4620      	mov	r0, r4
 8019236:	bd10      	pop	{r4, pc}

08019238 <_ZN8touchgfx6ScreenD0Ev>:
 8019238:	b510      	push	{r4, lr}
 801923a:	4604      	mov	r4, r0
 801923c:	213c      	movs	r1, #60	@ 0x3c
 801923e:	f00d fca6 	bl	8026b8e <_ZdlPvj>
 8019242:	4620      	mov	r0, r4
 8019244:	bd10      	pop	{r4, pc}
	...

08019248 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE>:
 8019248:	b530      	push	{r4, r5, lr}
 801924a:	460d      	mov	r5, r1
 801924c:	6b01      	ldr	r1, [r0, #48]	@ 0x30
 801924e:	b087      	sub	sp, #28
 8019250:	4604      	mov	r4, r0
 8019252:	b301      	cbz	r1, 8019296 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x4e>
 8019254:	a801      	add	r0, sp, #4
 8019256:	f7ff fb19 	bl	801888c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801925a:	892a      	ldrh	r2, [r5, #8]
 801925c:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8019260:	7928      	ldrb	r0, [r5, #4]
 8019262:	1ad2      	subs	r2, r2, r3
 8019264:	8ea3      	ldrh	r3, [r4, #52]	@ 0x34
 8019266:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 801926a:	441a      	add	r2, r3
 801926c:	896b      	ldrh	r3, [r5, #10]
 801926e:	f8bd 5006 	ldrh.w	r5, [sp, #6]
 8019272:	f88d 0010 	strb.w	r0, [sp, #16]
 8019276:	1b5b      	subs	r3, r3, r5
 8019278:	8ee5      	ldrh	r5, [r4, #54]	@ 0x36
 801927a:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 801927c:	442b      	add	r3, r5
 801927e:	4d07      	ldr	r5, [pc, #28]	@ (801929c <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x54>)
 8019280:	f8ad 1012 	strh.w	r1, [sp, #18]
 8019284:	a903      	add	r1, sp, #12
 8019286:	9503      	str	r5, [sp, #12]
 8019288:	f8ad 2014 	strh.w	r2, [sp, #20]
 801928c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8019290:	6803      	ldr	r3, [r0, #0]
 8019292:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8019294:	4798      	blx	r3
 8019296:	b007      	add	sp, #28
 8019298:	bd30      	pop	{r4, r5, pc}
 801929a:	bf00      	nop
 801929c:	0802c7bc 	.word	0x0802c7bc

080192a0 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE>:
 80192a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80192a4:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 80192a6:	b08a      	sub	sp, #40	@ 0x28
 80192a8:	4604      	mov	r4, r0
 80192aa:	460d      	mov	r5, r1
 80192ac:	b113      	cbz	r3, 80192b4 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x14>
 80192ae:	790b      	ldrb	r3, [r1, #4]
 80192b0:	2b00      	cmp	r3, #0
 80192b2:	d044      	beq.n	801933e <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 80192b4:	f104 0804 	add.w	r8, r4, #4
 80192b8:	a803      	add	r0, sp, #12
 80192ba:	4641      	mov	r1, r8
 80192bc:	f7ff fae6 	bl	801888c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80192c0:	792b      	ldrb	r3, [r5, #4]
 80192c2:	f9bd 700c 	ldrsh.w	r7, [sp, #12]
 80192c6:	f9bd 600e 	ldrsh.w	r6, [sp, #14]
 80192ca:	b983      	cbnz	r3, 80192ee <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x4e>
 80192cc:	f104 0336 	add.w	r3, r4, #54	@ 0x36
 80192d0:	892a      	ldrh	r2, [r5, #8]
 80192d2:	88e9      	ldrh	r1, [r5, #6]
 80192d4:	4640      	mov	r0, r8
 80192d6:	1b92      	subs	r2, r2, r6
 80192d8:	9301      	str	r3, [sp, #4]
 80192da:	1bc9      	subs	r1, r1, r7
 80192dc:	f104 0334 	add.w	r3, r4, #52	@ 0x34
 80192e0:	b212      	sxth	r2, r2
 80192e2:	9300      	str	r3, [sp, #0]
 80192e4:	b209      	sxth	r1, r1
 80192e6:	f104 0330 	add.w	r3, r4, #48	@ 0x30
 80192ea:	f7f6 faa7 	bl	800f83c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>
 80192ee:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80192f0:	b329      	cbz	r1, 801933e <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 80192f2:	a805      	add	r0, sp, #20
 80192f4:	f7ff faca 	bl	801888c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80192f8:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 80192fc:	792b      	ldrb	r3, [r5, #4]
 80192fe:	a907      	add	r1, sp, #28
 8019300:	1abf      	subs	r7, r7, r2
 8019302:	88ea      	ldrh	r2, [r5, #6]
 8019304:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8019306:	4417      	add	r7, r2
 8019308:	8ea2      	ldrh	r2, [r4, #52]	@ 0x34
 801930a:	f88d 3020 	strb.w	r3, [sp, #32]
 801930e:	4417      	add	r7, r2
 8019310:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 8019314:	1ab6      	subs	r6, r6, r2
 8019316:	892a      	ldrh	r2, [r5, #8]
 8019318:	f8ad 7022 	strh.w	r7, [sp, #34]	@ 0x22
 801931c:	4416      	add	r6, r2
 801931e:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
 8019320:	4416      	add	r6, r2
 8019322:	4a08      	ldr	r2, [pc, #32]	@ (8019344 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0xa4>)
 8019324:	f8ad 6024 	strh.w	r6, [sp, #36]	@ 0x24
 8019328:	2600      	movs	r6, #0
 801932a:	9207      	str	r2, [sp, #28]
 801932c:	f8ad 6026 	strh.w	r6, [sp, #38]	@ 0x26
 8019330:	6803      	ldr	r3, [r0, #0]
 8019332:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8019334:	4798      	blx	r3
 8019336:	792b      	ldrb	r3, [r5, #4]
 8019338:	b10b      	cbz	r3, 801933e <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 801933a:	e9c4 660c 	strd	r6, r6, [r4, #48]	@ 0x30
 801933e:	b00a      	add	sp, #40	@ 0x28
 8019340:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019344:	0802c794 	.word	0x0802c794

08019348 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE>:
 8019348:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801934c:	460c      	mov	r4, r1
 801934e:	6b01      	ldr	r1, [r0, #48]	@ 0x30
 8019350:	b088      	sub	sp, #32
 8019352:	4605      	mov	r5, r0
 8019354:	2900      	cmp	r1, #0
 8019356:	d06d      	beq.n	8019434 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xec>
 8019358:	4668      	mov	r0, sp
 801935a:	f7ff fa97 	bl	801888c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801935e:	8ea9      	ldrh	r1, [r5, #52]	@ 0x34
 8019360:	88e3      	ldrh	r3, [r4, #6]
 8019362:	f9bd 8000 	ldrsh.w	r8, [sp]
 8019366:	440b      	add	r3, r1
 8019368:	f9bd 7002 	ldrsh.w	r7, [sp, #2]
 801936c:	b21b      	sxth	r3, r3
 801936e:	4543      	cmp	r3, r8
 8019370:	db31      	blt.n	80193d6 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 8019372:	f8bd c004 	ldrh.w	ip, [sp, #4]
 8019376:	44c4      	add	ip, r8
 8019378:	fa0f fc8c 	sxth.w	ip, ip
 801937c:	4563      	cmp	r3, ip
 801937e:	da2a      	bge.n	80193d6 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 8019380:	8eea      	ldrh	r2, [r5, #54]	@ 0x36
 8019382:	8926      	ldrh	r6, [r4, #8]
 8019384:	4416      	add	r6, r2
 8019386:	b236      	sxth	r6, r6
 8019388:	42be      	cmp	r6, r7
 801938a:	db24      	blt.n	80193d6 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 801938c:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 8019390:	4438      	add	r0, r7
 8019392:	b200      	sxth	r0, r0
 8019394:	4286      	cmp	r6, r0
 8019396:	da1e      	bge.n	80193d6 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 8019398:	8963      	ldrh	r3, [r4, #10]
 801939a:	4419      	add	r1, r3
 801939c:	b209      	sxth	r1, r1
 801939e:	4541      	cmp	r1, r8
 80193a0:	db08      	blt.n	80193b4 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 80193a2:	4561      	cmp	r1, ip
 80193a4:	da06      	bge.n	80193b4 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 80193a6:	89a3      	ldrh	r3, [r4, #12]
 80193a8:	441a      	add	r2, r3
 80193aa:	b212      	sxth	r2, r2
 80193ac:	42ba      	cmp	r2, r7
 80193ae:	db01      	blt.n	80193b4 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 80193b0:	4282      	cmp	r2, r0
 80193b2:	db10      	blt.n	80193d6 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 80193b4:	4b21      	ldr	r3, [pc, #132]	@ (801943c <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf4>)
 80193b6:	a904      	add	r1, sp, #16
 80193b8:	6b28      	ldr	r0, [r5, #48]	@ 0x30
 80193ba:	9304      	str	r3, [sp, #16]
 80193bc:	2302      	movs	r3, #2
 80193be:	f88d 3014 	strb.w	r3, [sp, #20]
 80193c2:	2300      	movs	r3, #0
 80193c4:	f8ad 3016 	strh.w	r3, [sp, #22]
 80193c8:	f8ad 3018 	strh.w	r3, [sp, #24]
 80193cc:	f8ad 301a 	strh.w	r3, [sp, #26]
 80193d0:	6803      	ldr	r3, [r0, #0]
 80193d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80193d4:	4798      	blx	r3
 80193d6:	1d29      	adds	r1, r5, #4
 80193d8:	a802      	add	r0, sp, #8
 80193da:	f7ff fa57 	bl	801888c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80193de:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 80193e2:	88e0      	ldrh	r0, [r4, #6]
 80193e4:	eba3 0808 	sub.w	r8, r3, r8
 80193e8:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80193ec:	7921      	ldrb	r1, [r4, #4]
 80193ee:	fa1f f888 	uxth.w	r8, r8
 80193f2:	1bdf      	subs	r7, r3, r7
 80193f4:	f8b5 c034 	ldrh.w	ip, [r5, #52]	@ 0x34
 80193f8:	b2bb      	uxth	r3, r7
 80193fa:	4440      	add	r0, r8
 80193fc:	8922      	ldrh	r2, [r4, #8]
 80193fe:	8967      	ldrh	r7, [r4, #10]
 8019400:	4460      	add	r0, ip
 8019402:	89a4      	ldrh	r4, [r4, #12]
 8019404:	441a      	add	r2, r3
 8019406:	8eee      	ldrh	r6, [r5, #54]	@ 0x36
 8019408:	44b8      	add	r8, r7
 801940a:	4423      	add	r3, r4
 801940c:	f8ad 0016 	strh.w	r0, [sp, #22]
 8019410:	4432      	add	r2, r6
 8019412:	44e0      	add	r8, ip
 8019414:	4433      	add	r3, r6
 8019416:	4c0a      	ldr	r4, [pc, #40]	@ (8019440 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf8>)
 8019418:	6b28      	ldr	r0, [r5, #48]	@ 0x30
 801941a:	f88d 1014 	strb.w	r1, [sp, #20]
 801941e:	a904      	add	r1, sp, #16
 8019420:	9404      	str	r4, [sp, #16]
 8019422:	f8ad 2018 	strh.w	r2, [sp, #24]
 8019426:	f8ad 801a 	strh.w	r8, [sp, #26]
 801942a:	f8ad 301c 	strh.w	r3, [sp, #28]
 801942e:	6803      	ldr	r3, [r0, #0]
 8019430:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8019432:	4798      	blx	r3
 8019434:	b008      	add	sp, #32
 8019436:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801943a:	bf00      	nop
 801943c:	0802c794 	.word	0x0802c794
 8019440:	0802c7a8 	.word	0x0802c7a8

08019444 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>:
 8019444:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8019446:	4604      	mov	r4, r0
 8019448:	f934 2f0c 	ldrsh.w	r2, [r4, #12]!
 801944c:	3201      	adds	r2, #1
 801944e:	d112      	bne.n	8019476 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv+0x32>
 8019450:	2500      	movs	r5, #0
 8019452:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 8019456:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 801945a:	6803      	ldr	r3, [r0, #0]
 801945c:	9500      	str	r5, [sp, #0]
 801945e:	466d      	mov	r5, sp
 8019460:	f8ad 1004 	strh.w	r1, [sp, #4]
 8019464:	f8ad 2006 	strh.w	r2, [sp, #6]
 8019468:	4629      	mov	r1, r5
 801946a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801946c:	4798      	blx	r3
 801946e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8019472:	e884 0003 	stmia.w	r4, {r0, r1}
 8019476:	4620      	mov	r0, r4
 8019478:	b003      	add	sp, #12
 801947a:	bd30      	pop	{r4, r5, pc}

0801947c <_ZN8touchgfx8Drawable13getCachedAbsXEv>:
 801947c:	b513      	push	{r0, r1, r4, lr}
 801947e:	f9b0 3020 	ldrsh.w	r3, [r0, #32]
 8019482:	4604      	mov	r4, r0
 8019484:	3301      	adds	r3, #1
 8019486:	d109      	bne.n	801949c <_ZN8touchgfx8Drawable13getCachedAbsXEv+0x20>
 8019488:	4601      	mov	r1, r0
 801948a:	4668      	mov	r0, sp
 801948c:	f7ff f9fe 	bl	801888c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8019490:	f8bd 3000 	ldrh.w	r3, [sp]
 8019494:	8423      	strh	r3, [r4, #32]
 8019496:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801949a:	8463      	strh	r3, [r4, #34]	@ 0x22
 801949c:	f9b4 0020 	ldrsh.w	r0, [r4, #32]
 80194a0:	b002      	add	sp, #8
 80194a2:	bd10      	pop	{r4, pc}

080194a4 <_ZN8touchgfx8Drawable13getCachedAbsYEv>:
 80194a4:	b513      	push	{r0, r1, r4, lr}
 80194a6:	f9b0 3022 	ldrsh.w	r3, [r0, #34]	@ 0x22
 80194aa:	4604      	mov	r4, r0
 80194ac:	3301      	adds	r3, #1
 80194ae:	d109      	bne.n	80194c4 <_ZN8touchgfx8Drawable13getCachedAbsYEv+0x20>
 80194b0:	4601      	mov	r1, r0
 80194b2:	4668      	mov	r0, sp
 80194b4:	f7ff f9ea 	bl	801888c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80194b8:	f8bd 3000 	ldrh.w	r3, [sp]
 80194bc:	8423      	strh	r3, [r4, #32]
 80194be:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 80194c2:	8463      	strh	r3, [r4, #34]	@ 0x22
 80194c4:	f9b4 0022 	ldrsh.w	r0, [r4, #34]	@ 0x22
 80194c8:	b002      	add	sp, #8
 80194ca:	bd10      	pop	{r4, pc}

080194cc <_ZN8touchgfx6ScreenC1Ev>:
 80194cc:	b570      	push	{r4, r5, r6, lr}
 80194ce:	4b17      	ldr	r3, [pc, #92]	@ (801952c <_ZN8touchgfx6ScreenC1Ev+0x60>)
 80194d0:	4605      	mov	r5, r0
 80194d2:	4a17      	ldr	r2, [pc, #92]	@ (8019530 <_ZN8touchgfx6ScreenC1Ev+0x64>)
 80194d4:	2101      	movs	r1, #1
 80194d6:	f845 3b04 	str.w	r3, [r5], #4
 80194da:	2300      	movs	r3, #0
 80194dc:	6042      	str	r2, [r0, #4]
 80194de:	4604      	mov	r4, r0
 80194e0:	8103      	strh	r3, [r0, #8]
 80194e2:	8143      	strh	r3, [r0, #10]
 80194e4:	8183      	strh	r3, [r0, #12]
 80194e6:	81c3      	strh	r3, [r0, #14]
 80194e8:	8203      	strh	r3, [r0, #16]
 80194ea:	8243      	strh	r3, [r0, #18]
 80194ec:	8283      	strh	r3, [r0, #20]
 80194ee:	82c3      	strh	r3, [r0, #22]
 80194f0:	6203      	str	r3, [r0, #32]
 80194f2:	8483      	strh	r3, [r0, #36]	@ 0x24
 80194f4:	84c3      	strh	r3, [r0, #38]	@ 0x26
 80194f6:	f880 3028 	strb.w	r3, [r0, #40]	@ 0x28
 80194fa:	6343      	str	r3, [r0, #52]	@ 0x34
 80194fc:	f880 1029 	strb.w	r1, [r0, #41]	@ 0x29
 8019500:	f880 1038 	strb.w	r1, [r0, #56]	@ 0x38
 8019504:	e9c0 3306 	strd	r3, r3, [r0, #24]
 8019508:	e9c0 330b 	strd	r3, r3, [r0, #44]	@ 0x2c
 801950c:	4b09      	ldr	r3, [pc, #36]	@ (8019534 <_ZN8touchgfx6ScreenC1Ev+0x68>)
 801950e:	4628      	mov	r0, r5
 8019510:	f9b3 6000 	ldrsh.w	r6, [r3]
 8019514:	6b93      	ldr	r3, [r2, #56]	@ 0x38
 8019516:	4a08      	ldr	r2, [pc, #32]	@ (8019538 <_ZN8touchgfx6ScreenC1Ev+0x6c>)
 8019518:	f9b2 1000 	ldrsh.w	r1, [r2]
 801951c:	4798      	blx	r3
 801951e:	6863      	ldr	r3, [r4, #4]
 8019520:	4628      	mov	r0, r5
 8019522:	4631      	mov	r1, r6
 8019524:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8019526:	4798      	blx	r3
 8019528:	4620      	mov	r0, r4
 801952a:	bd70      	pop	{r4, r5, r6, pc}
 801952c:	0802c7d0 	.word	0x0802c7d0
 8019530:	0802bce8 	.word	0x0802bce8
 8019534:	24028e16 	.word	0x24028e16
 8019538:	24028e14 	.word	0x24028e14

0801953c <_ZN8touchgfx6Screen4drawEv>:
 801953c:	4b09      	ldr	r3, [pc, #36]	@ (8019564 <_ZN8touchgfx6Screen4drawEv+0x28>)
 801953e:	b507      	push	{r0, r1, r2, lr}
 8019540:	f9b3 2000 	ldrsh.w	r2, [r3]
 8019544:	2100      	movs	r1, #0
 8019546:	4b08      	ldr	r3, [pc, #32]	@ (8019568 <_ZN8touchgfx6Screen4drawEv+0x2c>)
 8019548:	9100      	str	r1, [sp, #0]
 801954a:	4669      	mov	r1, sp
 801954c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8019550:	f8ad 2004 	strh.w	r2, [sp, #4]
 8019554:	f8ad 3006 	strh.w	r3, [sp, #6]
 8019558:	6803      	ldr	r3, [r0, #0]
 801955a:	689b      	ldr	r3, [r3, #8]
 801955c:	4798      	blx	r3
 801955e:	b003      	add	sp, #12
 8019560:	f85d fb04 	ldr.w	pc, [sp], #4
 8019564:	24028e14 	.word	0x24028e14
 8019568:	24028e16 	.word	0x24028e16

0801956c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>:
 801956c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019570:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 8019574:	b089      	sub	sp, #36	@ 0x24
 8019576:	4680      	mov	r8, r0
 8019578:	460c      	mov	r4, r1
 801957a:	2b00      	cmp	r3, #0
 801957c:	4615      	mov	r5, r2
 801957e:	dd0e      	ble.n	801959e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 8019580:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 8019584:	2b00      	cmp	r3, #0
 8019586:	dd0a      	ble.n	801959e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 8019588:	4628      	mov	r0, r5
 801958a:	f7ff ff5b 	bl	8019444 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801958e:	4621      	mov	r1, r4
 8019590:	f7fd ff3f 	bl	8017412 <_ZNK8touchgfx4Rect9intersectERKS0_>
 8019594:	69eb      	ldr	r3, [r5, #28]
 8019596:	b928      	cbnz	r0, 80195a4 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x38>
 8019598:	461d      	mov	r5, r3
 801959a:	2b00      	cmp	r3, #0
 801959c:	d1f4      	bne.n	8019588 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1c>
 801959e:	b009      	add	sp, #36	@ 0x24
 80195a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80195a4:	ae04      	add	r6, sp, #16
 80195a6:	2b00      	cmp	r3, #0
 80195a8:	f000 80b5 	beq.w	8019716 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 80195ac:	682b      	ldr	r3, [r5, #0]
 80195ae:	4629      	mov	r1, r5
 80195b0:	a802      	add	r0, sp, #8
 80195b2:	68db      	ldr	r3, [r3, #12]
 80195b4:	4798      	blx	r3
 80195b6:	4628      	mov	r0, r5
 80195b8:	f7ff ff60 	bl	801947c <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 80195bc:	f8bd 7008 	ldrh.w	r7, [sp, #8]
 80195c0:	4407      	add	r7, r0
 80195c2:	4628      	mov	r0, r5
 80195c4:	f7ff ff6e 	bl	80194a4 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 80195c8:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80195cc:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 80195d0:	b23f      	sxth	r7, r7
 80195d2:	4418      	add	r0, r3
 80195d4:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 80195d8:	4621      	mov	r1, r4
 80195da:	f8ad 2014 	strh.w	r2, [sp, #20]
 80195de:	f8ad 0012 	strh.w	r0, [sp, #18]
 80195e2:	4630      	mov	r0, r6
 80195e4:	f8ad 3016 	strh.w	r3, [sp, #22]
 80195e8:	f8ad 7010 	strh.w	r7, [sp, #16]
 80195ec:	f7f6 fa08 	bl	800fa00 <_ZN8touchgfx4RectaNERKS0_>
 80195f0:	4628      	mov	r0, r5
 80195f2:	f7ff ff27 	bl	8019444 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 80195f6:	ab06      	add	r3, sp, #24
 80195f8:	4602      	mov	r2, r0
 80195fa:	e896 0003 	ldmia.w	r6, {r0, r1}
 80195fe:	e883 0003 	stmia.w	r3, {r0, r1}
 8019602:	4611      	mov	r1, r2
 8019604:	4618      	mov	r0, r3
 8019606:	f7f6 f9fb 	bl	800fa00 <_ZN8touchgfx4RectaNERKS0_>
 801960a:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 801960e:	f9b4 1000 	ldrsh.w	r1, [r4]
 8019612:	f9bd a01a 	ldrsh.w	sl, [sp, #26]
 8019616:	4299      	cmp	r1, r3
 8019618:	f9bd b01c 	ldrsh.w	fp, [sp, #28]
 801961c:	f9bd 901e 	ldrsh.w	r9, [sp, #30]
 8019620:	d10b      	bne.n	801963a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 8019622:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 8019626:	4552      	cmp	r2, sl
 8019628:	d107      	bne.n	801963a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 801962a:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 801962e:	455a      	cmp	r2, fp
 8019630:	d103      	bne.n	801963a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 8019632:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 8019636:	454a      	cmp	r2, r9
 8019638:	d06d      	beq.n	8019716 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 801963a:	f1bb 0f00 	cmp.w	fp, #0
 801963e:	dd65      	ble.n	801970c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 8019640:	f1b9 0f00 	cmp.w	r9, #0
 8019644:	dd62      	ble.n	801970c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 8019646:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 801964a:	fa1f f08a 	uxth.w	r0, sl
 801964e:	4552      	cmp	r2, sl
 8019650:	9000      	str	r0, [sp, #0]
 8019652:	da12      	bge.n	801967a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x10e>
 8019654:	9301      	str	r3, [sp, #4]
 8019656:	9b00      	ldr	r3, [sp, #0]
 8019658:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 801965c:	f8ad 2012 	strh.w	r2, [sp, #18]
 8019660:	1a9a      	subs	r2, r3, r2
 8019662:	f8ad 1010 	strh.w	r1, [sp, #16]
 8019666:	4631      	mov	r1, r6
 8019668:	f8ad 0014 	strh.w	r0, [sp, #20]
 801966c:	4640      	mov	r0, r8
 801966e:	f8ad 2016 	strh.w	r2, [sp, #22]
 8019672:	69ea      	ldr	r2, [r5, #28]
 8019674:	f7ff ff7a 	bl	801956c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8019678:	9b01      	ldr	r3, [sp, #4]
 801967a:	f9b4 2000 	ldrsh.w	r2, [r4]
 801967e:	b29f      	uxth	r7, r3
 8019680:	429a      	cmp	r2, r3
 8019682:	da0d      	bge.n	80196a0 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x134>
 8019684:	f8ad 2010 	strh.w	r2, [sp, #16]
 8019688:	1aba      	subs	r2, r7, r2
 801968a:	f8ad a012 	strh.w	sl, [sp, #18]
 801968e:	4631      	mov	r1, r6
 8019690:	f8ad 2014 	strh.w	r2, [sp, #20]
 8019694:	4640      	mov	r0, r8
 8019696:	f8ad 9016 	strh.w	r9, [sp, #22]
 801969a:	69ea      	ldr	r2, [r5, #28]
 801969c:	f7ff ff66 	bl	801956c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 80196a0:	8822      	ldrh	r2, [r4, #0]
 80196a2:	445f      	add	r7, fp
 80196a4:	88a3      	ldrh	r3, [r4, #4]
 80196a6:	b2bf      	uxth	r7, r7
 80196a8:	4413      	add	r3, r2
 80196aa:	b23a      	sxth	r2, r7
 80196ac:	b29b      	uxth	r3, r3
 80196ae:	b219      	sxth	r1, r3
 80196b0:	4291      	cmp	r1, r2
 80196b2:	dd0d      	ble.n	80196d0 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x164>
 80196b4:	1bdb      	subs	r3, r3, r7
 80196b6:	f8ad 2010 	strh.w	r2, [sp, #16]
 80196ba:	f8ad a012 	strh.w	sl, [sp, #18]
 80196be:	4631      	mov	r1, r6
 80196c0:	f8ad 3014 	strh.w	r3, [sp, #20]
 80196c4:	4640      	mov	r0, r8
 80196c6:	f8ad 9016 	strh.w	r9, [sp, #22]
 80196ca:	69ea      	ldr	r2, [r5, #28]
 80196cc:	f7ff ff4e 	bl	801956c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 80196d0:	88e2      	ldrh	r2, [r4, #6]
 80196d2:	8863      	ldrh	r3, [r4, #2]
 80196d4:	4413      	add	r3, r2
 80196d6:	9a00      	ldr	r2, [sp, #0]
 80196d8:	444a      	add	r2, r9
 80196da:	b29b      	uxth	r3, r3
 80196dc:	fa1f f982 	uxth.w	r9, r2
 80196e0:	b219      	sxth	r1, r3
 80196e2:	fa0f f289 	sxth.w	r2, r9
 80196e6:	428a      	cmp	r2, r1
 80196e8:	da15      	bge.n	8019716 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 80196ea:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 80196ee:	eba3 0309 	sub.w	r3, r3, r9
 80196f2:	f9b4 0000 	ldrsh.w	r0, [r4]
 80196f6:	f8ad 1014 	strh.w	r1, [sp, #20]
 80196fa:	4631      	mov	r1, r6
 80196fc:	f8ad 0010 	strh.w	r0, [sp, #16]
 8019700:	f8ad 2012 	strh.w	r2, [sp, #18]
 8019704:	f8ad 3016 	strh.w	r3, [sp, #22]
 8019708:	69ea      	ldr	r2, [r5, #28]
 801970a:	e001      	b.n	8019710 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a4>
 801970c:	69ea      	ldr	r2, [r5, #28]
 801970e:	4621      	mov	r1, r4
 8019710:	4640      	mov	r0, r8
 8019712:	f7ff ff2b 	bl	801956c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8019716:	4628      	mov	r0, r5
 8019718:	f7ff fe94 	bl	8019444 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801971c:	6861      	ldr	r1, [r4, #4]
 801971e:	4602      	mov	r2, r0
 8019720:	4633      	mov	r3, r6
 8019722:	6820      	ldr	r0, [r4, #0]
 8019724:	c303      	stmia	r3!, {r0, r1}
 8019726:	4611      	mov	r1, r2
 8019728:	4630      	mov	r0, r6
 801972a:	f7f6 f969 	bl	800fa00 <_ZN8touchgfx4RectaNERKS0_>
 801972e:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 8019732:	2b00      	cmp	r3, #0
 8019734:	f77f af33 	ble.w	801959e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 8019738:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 801973c:	2b00      	cmp	r3, #0
 801973e:	f77f af2e 	ble.w	801959e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 8019742:	4628      	mov	r0, r5
 8019744:	f7ff fe9a 	bl	801947c <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 8019748:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 801974c:	1a18      	subs	r0, r3, r0
 801974e:	f8ad 0010 	strh.w	r0, [sp, #16]
 8019752:	4628      	mov	r0, r5
 8019754:	f7ff fea6 	bl	80194a4 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 8019758:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 801975c:	4631      	mov	r1, r6
 801975e:	1a18      	subs	r0, r3, r0
 8019760:	f8ad 0012 	strh.w	r0, [sp, #18]
 8019764:	4628      	mov	r0, r5
 8019766:	682b      	ldr	r3, [r5, #0]
 8019768:	689b      	ldr	r3, [r3, #8]
 801976a:	4798      	blx	r3
 801976c:	e717      	b.n	801959e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>

0801976e <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>:
 801976e:	b570      	push	{r4, r5, r6, lr}
 8019770:	1d06      	adds	r6, r0, #4
 8019772:	b086      	sub	sp, #24
 8019774:	460c      	mov	r4, r1
 8019776:	2300      	movs	r3, #0
 8019778:	4631      	mov	r1, r6
 801977a:	4605      	mov	r5, r0
 801977c:	a802      	add	r0, sp, #8
 801977e:	9301      	str	r3, [sp, #4]
 8019780:	f7ff f884 	bl	801888c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8019784:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 8019788:	8822      	ldrh	r2, [r4, #0]
 801978a:	f8bd 100a 	ldrh.w	r1, [sp, #10]
 801978e:	1ad2      	subs	r2, r2, r3
 8019790:	8863      	ldrh	r3, [r4, #2]
 8019792:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 8019796:	1a5b      	subs	r3, r3, r1
 8019798:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 801979c:	f8ad 2010 	strh.w	r2, [sp, #16]
 80197a0:	aa01      	add	r2, sp, #4
 80197a2:	f8ad 0014 	strh.w	r0, [sp, #20]
 80197a6:	4630      	mov	r0, r6
 80197a8:	f8ad 1016 	strh.w	r1, [sp, #22]
 80197ac:	a904      	add	r1, sp, #16
 80197ae:	f8ad 3012 	strh.w	r3, [sp, #18]
 80197b2:	f7f6 f9fd 	bl	800fbb0 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>
 80197b6:	9a01      	ldr	r2, [sp, #4]
 80197b8:	b11a      	cbz	r2, 80197c2 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE+0x54>
 80197ba:	4621      	mov	r1, r4
 80197bc:	4628      	mov	r0, r5
 80197be:	f7ff fed5 	bl	801956c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 80197c2:	b006      	add	sp, #24
 80197c4:	bd70      	pop	{r4, r5, r6, pc}

080197c6 <_ZN8touchgfx6Screen4drawERNS_4RectE>:
 80197c6:	4602      	mov	r2, r0
 80197c8:	b530      	push	{r4, r5, lr}
 80197ca:	4604      	mov	r4, r0
 80197cc:	b085      	sub	sp, #20
 80197ce:	f852 0f08 	ldr.w	r0, [r2, #8]!
 80197d2:	460d      	mov	r5, r1
 80197d4:	466b      	mov	r3, sp
 80197d6:	6851      	ldr	r1, [r2, #4]
 80197d8:	c303      	stmia	r3!, {r0, r1}
 80197da:	4629      	mov	r1, r5
 80197dc:	4668      	mov	r0, sp
 80197de:	f7f6 f90f 	bl	800fa00 <_ZN8touchgfx4RectaNERKS0_>
 80197e2:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 80197e6:	b12b      	cbz	r3, 80197f4 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2e>
 80197e8:	4669      	mov	r1, sp
 80197ea:	4620      	mov	r0, r4
 80197ec:	f7ff ffbf 	bl	801976e <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>
 80197f0:	b005      	add	sp, #20
 80197f2:	bd30      	pop	{r4, r5, pc}
 80197f4:	3404      	adds	r4, #4
 80197f6:	a802      	add	r0, sp, #8
 80197f8:	4621      	mov	r1, r4
 80197fa:	f7ff f847 	bl	801888c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80197fe:	f8bd 3000 	ldrh.w	r3, [sp]
 8019802:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 8019806:	4669      	mov	r1, sp
 8019808:	4620      	mov	r0, r4
 801980a:	1a9b      	subs	r3, r3, r2
 801980c:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 8019810:	f8ad 3000 	strh.w	r3, [sp]
 8019814:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8019818:	1a9b      	subs	r3, r3, r2
 801981a:	f8ad 3002 	strh.w	r3, [sp, #2]
 801981e:	f7f6 f98e 	bl	800fb3e <_ZNK8touchgfx9Container4drawERKNS_4RectE>
 8019822:	e7e5      	b.n	80197f0 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2a>

08019824 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>:
 8019824:	460b      	mov	r3, r1
 8019826:	680a      	ldr	r2, [r1, #0]
 8019828:	1d01      	adds	r1, r0, #4
 801982a:	6992      	ldr	r2, [r2, #24]
 801982c:	4618      	mov	r0, r3
 801982e:	4710      	bx	r2

08019830 <_ZN8touchgfx15EasingEquations11backEaseOutEtsst>:
 8019830:	4298      	cmp	r0, r3
 8019832:	d200      	bcs.n	8019836 <_ZN8touchgfx15EasingEquations11backEaseOutEtsst+0x6>
 8019834:	b913      	cbnz	r3, 801983c <_ZN8touchgfx15EasingEquations11backEaseOutEtsst+0xc>
 8019836:	440a      	add	r2, r1
 8019838:	b210      	sxth	r0, r2
 801983a:	4770      	bx	lr
 801983c:	ee07 0a90 	vmov	s15, r0
 8019840:	eddf 4a18 	vldr	s9, [pc, #96]	@ 80198a4 <_ZN8touchgfx15EasingEquations11backEaseOutEtsst+0x74>
 8019844:	eddf 5a18 	vldr	s11, [pc, #96]	@ 80198a8 <_ZN8touchgfx15EasingEquations11backEaseOutEtsst+0x78>
 8019848:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801984c:	ee07 3a90 	vmov	s15, r3
 8019850:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8019854:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8019858:	ee07 2a90 	vmov	s15, r2
 801985c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8019860:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 8019864:	ee07 1a90 	vmov	s15, r1
 8019868:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801986c:	ee37 7a66 	vsub.f32	s14, s14, s13
 8019870:	eee7 5a24 	vfma.f32	s11, s14, s9
 8019874:	ee27 5a07 	vmul.f32	s10, s14, s14
 8019878:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 801987c:	eee5 6a25 	vfma.f32	s13, s10, s11
 8019880:	eee6 7a26 	vfma.f32	s15, s12, s13
 8019884:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8019888:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801988c:	bfcc      	ite	gt
 801988e:	ee77 7a87 	vaddgt.f32	s15, s15, s14
 8019892:	ee77 7ac7 	vsuble.f32	s15, s15, s14
 8019896:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801989a:	ee17 3a90 	vmov	r3, s15
 801989e:	b218      	sxth	r0, r3
 80198a0:	4770      	bx	lr
 80198a2:	bf00      	nop
 80198a4:	402ce6b0 	.word	0x402ce6b0
 80198a8:	3fd9cd60 	.word	0x3fd9cd60

080198ac <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst>:
 80198ac:	4298      	cmp	r0, r3
 80198ae:	d200      	bcs.n	80198b2 <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst+0x6>
 80198b0:	b913      	cbnz	r3, 80198b8 <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst+0xc>
 80198b2:	440a      	add	r2, r1
 80198b4:	b210      	sxth	r0, r2
 80198b6:	4770      	bx	lr
 80198b8:	ee07 0a90 	vmov	s15, r0
 80198bc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80198c0:	ee07 3a90 	vmov	s15, r3
 80198c4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80198c8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80198cc:	ee07 2a90 	vmov	s15, r2
 80198d0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80198d4:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 80198d8:	ee07 1a90 	vmov	s15, r1
 80198dc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80198e0:	ee37 7a66 	vsub.f32	s14, s14, s13
 80198e4:	ee67 5a07 	vmul.f32	s11, s14, s14
 80198e8:	eee5 6a87 	vfma.f32	s13, s11, s14
 80198ec:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80198f0:	eee6 7a26 	vfma.f32	s15, s12, s13
 80198f4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80198f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80198fc:	bfcc      	ite	gt
 80198fe:	ee77 7a87 	vaddgt.f32	s15, s15, s14
 8019902:	ee77 7ac7 	vsuble.f32	s15, s15, s14
 8019906:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801990a:	ee17 3a90 	vmov	r3, s15
 801990e:	b218      	sxth	r0, r3
 8019910:	4770      	bx	lr

08019912 <_ZN8touchgfx15EasingEquations14linearEaseNoneEtsst>:
 8019912:	4298      	cmp	r0, r3
 8019914:	d200      	bcs.n	8019918 <_ZN8touchgfx15EasingEquations14linearEaseNoneEtsst+0x6>
 8019916:	b913      	cbnz	r3, 801991e <_ZN8touchgfx15EasingEquations14linearEaseNoneEtsst+0xc>
 8019918:	440a      	add	r2, r1
 801991a:	b210      	sxth	r0, r2
 801991c:	4770      	bx	lr
 801991e:	ee07 2a90 	vmov	s15, r2
 8019922:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8019926:	ee07 0a90 	vmov	s15, r0
 801992a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801992e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8019932:	ee07 3a10 	vmov	s14, r3
 8019936:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 801993a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 801993e:	ee07 1a90 	vmov	s15, r1
 8019942:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8019946:	ee77 7a27 	vadd.f32	s15, s14, s15
 801994a:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 801994e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8019952:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019956:	bfcc      	ite	gt
 8019958:	ee77 7a87 	vaddgt.f32	s15, s15, s14
 801995c:	ee77 7ac7 	vsuble.f32	s15, s15, s14
 8019960:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8019964:	ee17 3a90 	vmov	r3, s15
 8019968:	b218      	sxth	r0, r3
 801996a:	4770      	bx	lr

0801996c <_ZN8touchgfx15EasingEquations12linearEaseInEtsst>:
 801996c:	f7ff bfd1 	b.w	8019912 <_ZN8touchgfx15EasingEquations14linearEaseNoneEtsst>

08019970 <_ZN8touchgfx12TextProviderC1Ev>:
 8019970:	b538      	push	{r3, r4, r5, lr}
 8019972:	2500      	movs	r5, #0
 8019974:	2302      	movs	r3, #2
 8019976:	4604      	mov	r4, r0
 8019978:	220e      	movs	r2, #14
 801997a:	7403      	strb	r3, [r0, #16]
 801997c:	4629      	mov	r1, r5
 801997e:	6145      	str	r5, [r0, #20]
 8019980:	7605      	strb	r5, [r0, #24]
 8019982:	83c5      	strh	r5, [r0, #30]
 8019984:	8405      	strh	r5, [r0, #32]
 8019986:	86c5      	strh	r5, [r0, #54]	@ 0x36
 8019988:	8705      	strh	r5, [r0, #56]	@ 0x38
 801998a:	87c5      	strh	r5, [r0, #62]	@ 0x3e
 801998c:	f8a0 5040 	strh.w	r5, [r0, #64]	@ 0x40
 8019990:	e9c0 5500 	strd	r5, r5, [r0]
 8019994:	e9c0 5511 	strd	r5, r5, [r0, #68]	@ 0x44
 8019998:	304c      	adds	r0, #76	@ 0x4c
 801999a:	f00d ff0d 	bl	80277b8 <memset>
 801999e:	2301      	movs	r3, #1
 80199a0:	4620      	mov	r0, r4
 80199a2:	f8a4 505a 	strh.w	r5, [r4, #90]	@ 0x5a
 80199a6:	f8a4 505c 	strh.w	r5, [r4, #92]	@ 0x5c
 80199aa:	f8a4 505e 	strh.w	r5, [r4, #94]	@ 0x5e
 80199ae:	f884 3060 	strb.w	r3, [r4, #96]	@ 0x60
 80199b2:	f884 5061 	strb.w	r5, [r4, #97]	@ 0x61
 80199b6:	f7ea fb63 	bl	8004080 <_ZN8touchgfx12TextProvider18initializeInternalEv>
 80199ba:	4620      	mov	r0, r4
 80199bc:	bd38      	pop	{r3, r4, r5, pc}

080199be <_ZN8touchgfx12TextProvider11endOfStringEv>:
 80199be:	8ec3      	ldrh	r3, [r0, #54]	@ 0x36
 80199c0:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 80199c4:	8c40      	ldrh	r0, [r0, #34]	@ 0x22
 80199c6:	fab0 f080 	clz	r0, r0
 80199ca:	0940      	lsrs	r0, r0, #5
 80199cc:	4770      	bx	lr

080199ce <_ZN8touchgfx12TextProvider19getNextCharInternalEv>:
 80199ce:	b530      	push	{r4, r5, lr}
 80199d0:	2500      	movs	r5, #0
 80199d2:	2401      	movs	r4, #1
 80199d4:	6843      	ldr	r3, [r0, #4]
 80199d6:	b913      	cbnz	r3, 80199de <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x10>
 80199d8:	6803      	ldr	r3, [r0, #0]
 80199da:	b313      	cbz	r3, 8019a22 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 80199dc:	6043      	str	r3, [r0, #4]
 80199de:	7e03      	ldrb	r3, [r0, #24]
 80199e0:	b143      	cbz	r3, 80199f4 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x26>
 80199e2:	6943      	ldr	r3, [r0, #20]
 80199e4:	b12b      	cbz	r3, 80199f2 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 80199e6:	881a      	ldrh	r2, [r3, #0]
 80199e8:	b11a      	cbz	r2, 80199f2 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 80199ea:	1c9a      	adds	r2, r3, #2
 80199ec:	6142      	str	r2, [r0, #20]
 80199ee:	8818      	ldrh	r0, [r3, #0]
 80199f0:	bd30      	pop	{r4, r5, pc}
 80199f2:	7605      	strb	r5, [r0, #24]
 80199f4:	6843      	ldr	r3, [r0, #4]
 80199f6:	8819      	ldrh	r1, [r3, #0]
 80199f8:	b199      	cbz	r1, 8019a22 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 80199fa:	1c9a      	adds	r2, r3, #2
 80199fc:	2902      	cmp	r1, #2
 80199fe:	6042      	str	r2, [r0, #4]
 8019a00:	d1f5      	bne.n	80199ee <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x20>
 8019a02:	7c03      	ldrb	r3, [r0, #16]
 8019a04:	2b01      	cmp	r3, #1
 8019a06:	d8e5      	bhi.n	80199d4 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 8019a08:	1c5a      	adds	r2, r3, #1
 8019a0a:	3302      	adds	r3, #2
 8019a0c:	7402      	strb	r2, [r0, #16]
 8019a0e:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8019a12:	6143      	str	r3, [r0, #20]
 8019a14:	2b00      	cmp	r3, #0
 8019a16:	d0dd      	beq.n	80199d4 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 8019a18:	881b      	ldrh	r3, [r3, #0]
 8019a1a:	2b00      	cmp	r3, #0
 8019a1c:	d0da      	beq.n	80199d4 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 8019a1e:	7604      	strb	r4, [r0, #24]
 8019a20:	e7d8      	b.n	80199d4 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 8019a22:	2000      	movs	r0, #0
 8019a24:	e7e4      	b.n	80199f0 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x22>

08019a26 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>:
 8019a26:	6001      	str	r1, [r0, #0]
 8019a28:	2100      	movs	r1, #0
 8019a2a:	b430      	push	{r4, r5}
 8019a2c:	6041      	str	r1, [r0, #4]
 8019a2e:	6815      	ldr	r5, [r2, #0]
 8019a30:	6085      	str	r5, [r0, #8]
 8019a32:	6852      	ldr	r2, [r2, #4]
 8019a34:	6443      	str	r3, [r0, #68]	@ 0x44
 8019a36:	9b02      	ldr	r3, [sp, #8]
 8019a38:	60c2      	str	r2, [r0, #12]
 8019a3a:	7401      	strb	r1, [r0, #16]
 8019a3c:	6141      	str	r1, [r0, #20]
 8019a3e:	7601      	strb	r1, [r0, #24]
 8019a40:	8701      	strh	r1, [r0, #56]	@ 0x38
 8019a42:	8401      	strh	r1, [r0, #32]
 8019a44:	f8a0 1040 	strh.w	r1, [r0, #64]	@ 0x40
 8019a48:	6483      	str	r3, [r0, #72]	@ 0x48
 8019a4a:	bc30      	pop	{r4, r5}
 8019a4c:	f7ea bb18 	b.w	8004080 <_ZN8touchgfx12TextProvider18initializeInternalEv>

08019a50 <_ZN8touchgfx12TextProvider10initializeEPKtS2_PKNS_24FontContextualFormsTableEz>:
 8019a50:	b408      	push	{r3}
 8019a52:	b510      	push	{r4, lr}
 8019a54:	b085      	sub	sp, #20
 8019a56:	ac07      	add	r4, sp, #28
 8019a58:	f854 3b04 	ldr.w	r3, [r4], #4
 8019a5c:	9300      	str	r3, [sp, #0]
 8019a5e:	4613      	mov	r3, r2
 8019a60:	4622      	mov	r2, r4
 8019a62:	9403      	str	r4, [sp, #12]
 8019a64:	f7ff ffdf 	bl	8019a26 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8019a68:	b005      	add	sp, #20
 8019a6a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019a6e:	b001      	add	sp, #4
 8019a70:	4770      	bx	lr

08019a72 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>:
 8019a72:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019a74:	4605      	mov	r5, r0
 8019a76:	4608      	mov	r0, r1
 8019a78:	b1f1      	cbz	r1, 8019ab8 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x46>
 8019a7a:	f105 044c 	add.w	r4, r5, #76	@ 0x4c
 8019a7e:	460b      	mov	r3, r1
 8019a80:	f101 0708 	add.w	r7, r1, #8
 8019a84:	4622      	mov	r2, r4
 8019a86:	6818      	ldr	r0, [r3, #0]
 8019a88:	3308      	adds	r3, #8
 8019a8a:	f853 1c04 	ldr.w	r1, [r3, #-4]
 8019a8e:	4626      	mov	r6, r4
 8019a90:	42bb      	cmp	r3, r7
 8019a92:	c603      	stmia	r6!, {r0, r1}
 8019a94:	4634      	mov	r4, r6
 8019a96:	d1f6      	bne.n	8019a86 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x14>
 8019a98:	6818      	ldr	r0, [r3, #0]
 8019a9a:	6030      	str	r0, [r6, #0]
 8019a9c:	4610      	mov	r0, r2
 8019a9e:	889b      	ldrh	r3, [r3, #4]
 8019aa0:	80b3      	strh	r3, [r6, #4]
 8019aa2:	f895 3059 	ldrb.w	r3, [r5, #89]	@ 0x59
 8019aa6:	015b      	lsls	r3, r3, #5
 8019aa8:	f403 7180 	and.w	r1, r3, #256	@ 0x100
 8019aac:	f895 3052 	ldrb.w	r3, [r5, #82]	@ 0x52
 8019ab0:	430b      	orrs	r3, r1
 8019ab2:	425b      	negs	r3, r3
 8019ab4:	f885 3055 	strb.w	r3, [r5, #85]	@ 0x55
 8019ab8:	bdf0      	pop	{r4, r5, r6, r7, pc}

08019aba <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>:
 8019aba:	b538      	push	{r3, r4, r5, lr}
 8019abc:	460c      	mov	r4, r1
 8019abe:	6811      	ldr	r1, [r2, #0]
 8019ac0:	4610      	mov	r0, r2
 8019ac2:	68cd      	ldr	r5, [r1, #12]
 8019ac4:	4619      	mov	r1, r3
 8019ac6:	47a8      	blx	r5
 8019ac8:	2800      	cmp	r0, #0
 8019aca:	bf08      	it	eq
 8019acc:	4620      	moveq	r0, r4
 8019ace:	bd38      	pop	{r3, r4, r5, pc}

08019ad0 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>:
 8019ad0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019ad4:	468c      	mov	ip, r1
 8019ad6:	4604      	mov	r4, r0
 8019ad8:	4615      	mov	r5, r2
 8019ada:	b942      	cbnz	r2, 8019aee <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1e>
 8019adc:	f8a4 205a 	strh.w	r2, [r4, #90]	@ 0x5a
 8019ae0:	f8a4 205c 	strh.w	r2, [r4, #92]	@ 0x5c
 8019ae4:	f8a4 205e 	strh.w	r2, [r4, #94]	@ 0x5e
 8019ae8:	4628      	mov	r0, r5
 8019aea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019aee:	7b50      	ldrb	r0, [r2, #13]
 8019af0:	f46f 6163 	mvn.w	r1, #3632	@ 0xe30
 8019af4:	8893      	ldrh	r3, [r2, #4]
 8019af6:	0106      	lsls	r6, r0, #4
 8019af8:	f406 7280 	and.w	r2, r6, #256	@ 0x100
 8019afc:	79ee      	ldrb	r6, [r5, #7]
 8019afe:	4316      	orrs	r6, r2
 8019b00:	185a      	adds	r2, r3, r1
 8019b02:	b291      	uxth	r1, r2
 8019b04:	b2b7      	uxth	r7, r6
 8019b06:	291d      	cmp	r1, #29
 8019b08:	d87f      	bhi.n	8019c0a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x13a>
 8019b0a:	2201      	movs	r2, #1
 8019b0c:	10f6      	asrs	r6, r6, #3
 8019b0e:	408a      	lsls	r2, r1
 8019b10:	4974      	ldr	r1, [pc, #464]	@ (8019ce4 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x214>)
 8019b12:	420a      	tst	r2, r1
 8019b14:	d12e      	bne.n	8019b74 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xa4>
 8019b16:	f412 7f60 	tst.w	r2, #896	@ 0x380
 8019b1a:	d076      	beq.n	8019c0a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x13a>
 8019b1c:	f104 024c 	add.w	r2, r4, #76	@ 0x4c
 8019b20:	462b      	mov	r3, r5
 8019b22:	f105 0e08 	add.w	lr, r5, #8
 8019b26:	4615      	mov	r5, r2
 8019b28:	6818      	ldr	r0, [r3, #0]
 8019b2a:	3308      	adds	r3, #8
 8019b2c:	f853 1c04 	ldr.w	r1, [r3, #-4]
 8019b30:	4694      	mov	ip, r2
 8019b32:	4573      	cmp	r3, lr
 8019b34:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 8019b38:	4662      	mov	r2, ip
 8019b3a:	d1f5      	bne.n	8019b28 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x58>
 8019b3c:	6818      	ldr	r0, [r3, #0]
 8019b3e:	f8cc 0000 	str.w	r0, [ip]
 8019b42:	889b      	ldrh	r3, [r3, #4]
 8019b44:	f8ac 3004 	strh.w	r3, [ip, #4]
 8019b48:	b2b3      	uxth	r3, r6
 8019b4a:	f8b4 105c 	ldrh.w	r1, [r4, #92]	@ 0x5c
 8019b4e:	f894 0059 	ldrb.w	r0, [r4, #89]	@ 0x59
 8019b52:	1aca      	subs	r2, r1, r3
 8019b54:	1bcf      	subs	r7, r1, r7
 8019b56:	f020 0060 	bic.w	r0, r0, #96	@ 0x60
 8019b5a:	b292      	uxth	r2, r2
 8019b5c:	1afb      	subs	r3, r7, r3
 8019b5e:	f884 2054 	strb.w	r2, [r4, #84]	@ 0x54
 8019b62:	10d2      	asrs	r2, r2, #3
 8019b64:	f002 0260 	and.w	r2, r2, #96	@ 0x60
 8019b68:	4302      	orrs	r2, r0
 8019b6a:	f884 2059 	strb.w	r2, [r4, #89]	@ 0x59
 8019b6e:	f8a4 305c 	strh.w	r3, [r4, #92]	@ 0x5c
 8019b72:	e7b9      	b.n	8019ae8 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x18>
 8019b74:	f104 024c 	add.w	r2, r4, #76	@ 0x4c
 8019b78:	462b      	mov	r3, r5
 8019b7a:	f105 0808 	add.w	r8, r5, #8
 8019b7e:	4615      	mov	r5, r2
 8019b80:	6818      	ldr	r0, [r3, #0]
 8019b82:	3308      	adds	r3, #8
 8019b84:	f853 1c04 	ldr.w	r1, [r3, #-4]
 8019b88:	4696      	mov	lr, r2
 8019b8a:	4543      	cmp	r3, r8
 8019b8c:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 8019b90:	4672      	mov	r2, lr
 8019b92:	d1f5      	bne.n	8019b80 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xb0>
 8019b94:	6818      	ldr	r0, [r3, #0]
 8019b96:	f8ce 0000 	str.w	r0, [lr]
 8019b9a:	889b      	ldrh	r3, [r3, #4]
 8019b9c:	f8ae 3004 	strh.w	r3, [lr, #4]
 8019ba0:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8019ba2:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8019ba6:	8c59      	ldrh	r1, [r3, #34]	@ 0x22
 8019ba8:	f640 6333 	movw	r3, #3635	@ 0xe33
 8019bac:	4299      	cmp	r1, r3
 8019bae:	d111      	bne.n	8019bd4 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x104>
 8019bb0:	f8dc 3000 	ldr.w	r3, [ip]
 8019bb4:	4660      	mov	r0, ip
 8019bb6:	68db      	ldr	r3, [r3, #12]
 8019bb8:	4798      	blx	r3
 8019bba:	7b41      	ldrb	r1, [r0, #13]
 8019bbc:	00cb      	lsls	r3, r1, #3
 8019bbe:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 8019bc2:	7a03      	ldrb	r3, [r0, #8]
 8019bc4:	4313      	orrs	r3, r2
 8019bc6:	064a      	lsls	r2, r1, #25
 8019bc8:	bf44      	itt	mi
 8019bca:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 8019bce:	b21b      	sxthmi	r3, r3
 8019bd0:	f8a4 305a 	strh.w	r3, [r4, #90]	@ 0x5a
 8019bd4:	f8b4 305a 	ldrh.w	r3, [r4, #90]	@ 0x5a
 8019bd8:	f894 2059 	ldrb.w	r2, [r4, #89]	@ 0x59
 8019bdc:	443b      	add	r3, r7
 8019bde:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8019be2:	4433      	add	r3, r6
 8019be4:	b29b      	uxth	r3, r3
 8019be6:	f8a4 305a 	strh.w	r3, [r4, #90]	@ 0x5a
 8019bea:	f884 3054 	strb.w	r3, [r4, #84]	@ 0x54
 8019bee:	10db      	asrs	r3, r3, #3
 8019bf0:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8019bf4:	4313      	orrs	r3, r2
 8019bf6:	f894 205e 	ldrb.w	r2, [r4, #94]	@ 0x5e
 8019bfa:	f884 3059 	strb.w	r3, [r4, #89]	@ 0x59
 8019bfe:	f894 3055 	ldrb.w	r3, [r4, #85]	@ 0x55
 8019c02:	1a9b      	subs	r3, r3, r2
 8019c04:	f884 3055 	strb.w	r3, [r4, #85]	@ 0x55
 8019c08:	e76e      	b.n	8019ae8 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x18>
 8019c0a:	f023 0204 	bic.w	r2, r3, #4
 8019c0e:	f640 611b 	movw	r1, #3611	@ 0xe1b
 8019c12:	428a      	cmp	r2, r1
 8019c14:	d003      	beq.n	8019c1e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x14e>
 8019c16:	f640 621d 	movw	r2, #3613	@ 0xe1d
 8019c1a:	4293      	cmp	r3, r2
 8019c1c:	d120      	bne.n	8019c60 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x190>
 8019c1e:	3b01      	subs	r3, #1
 8019c20:	4662      	mov	r2, ip
 8019c22:	4629      	mov	r1, r5
 8019c24:	4620      	mov	r0, r4
 8019c26:	b29b      	uxth	r3, r3
 8019c28:	f7ff ff47 	bl	8019aba <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 8019c2c:	7b41      	ldrb	r1, [r0, #13]
 8019c2e:	00cb      	lsls	r3, r1, #3
 8019c30:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 8019c34:	7a03      	ldrb	r3, [r0, #8]
 8019c36:	0648      	lsls	r0, r1, #25
 8019c38:	ea43 0302 	orr.w	r3, r3, r2
 8019c3c:	bf44      	itt	mi
 8019c3e:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 8019c42:	b21b      	sxthmi	r3, r3
 8019c44:	f8a4 305a 	strh.w	r3, [r4, #90]	@ 0x5a
 8019c48:	7b6b      	ldrb	r3, [r5, #13]
 8019c4a:	7aaa      	ldrb	r2, [r5, #10]
 8019c4c:	005b      	lsls	r3, r3, #1
 8019c4e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8019c52:	4313      	orrs	r3, r2
 8019c54:	115a      	asrs	r2, r3, #5
 8019c56:	eb02 0393 	add.w	r3, r2, r3, lsr #2
 8019c5a:	f8a4 305e 	strh.w	r3, [r4, #94]	@ 0x5e
 8019c5e:	e032      	b.n	8019cc6 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1f6>
 8019c60:	00c2      	lsls	r2, r0, #3
 8019c62:	f402 7180 	and.w	r1, r2, #256	@ 0x100
 8019c66:	7a2a      	ldrb	r2, [r5, #8]
 8019c68:	430a      	orrs	r2, r1
 8019c6a:	0641      	lsls	r1, r0, #25
 8019c6c:	f640 6109 	movw	r1, #3593	@ 0xe09
 8019c70:	bf44      	itt	mi
 8019c72:	f5a2 7200 	submi.w	r2, r2, #512	@ 0x200
 8019c76:	b212      	sxthmi	r2, r2
 8019c78:	f8a4 205a 	strh.w	r2, [r4, #90]	@ 0x5a
 8019c7c:	f023 0210 	bic.w	r2, r3, #16
 8019c80:	428a      	cmp	r2, r1
 8019c82:	d003      	beq.n	8019c8c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1bc>
 8019c84:	f640 6213 	movw	r2, #3603	@ 0xe13
 8019c88:	4293      	cmp	r3, r2
 8019c8a:	d129      	bne.n	8019ce0 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x210>
 8019c8c:	7b6e      	ldrb	r6, [r5, #13]
 8019c8e:	4629      	mov	r1, r5
 8019c90:	4620      	mov	r0, r4
 8019c92:	0076      	lsls	r6, r6, #1
 8019c94:	f406 7280 	and.w	r2, r6, #256	@ 0x100
 8019c98:	7aae      	ldrb	r6, [r5, #10]
 8019c9a:	4316      	orrs	r6, r2
 8019c9c:	f640 6213 	movw	r2, #3603	@ 0xe13
 8019ca0:	4293      	cmp	r3, r2
 8019ca2:	4662      	mov	r2, ip
 8019ca4:	bf16      	itet	ne
 8019ca6:	f103 33ff 	addne.w	r3, r3, #4294967295
 8019caa:	f640 630c 	movweq	r3, #3596	@ 0xe0c
 8019cae:	b29b      	uxthne	r3, r3
 8019cb0:	f7ff ff03 	bl	8019aba <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 8019cb4:	7b43      	ldrb	r3, [r0, #13]
 8019cb6:	7a82      	ldrb	r2, [r0, #10]
 8019cb8:	005b      	lsls	r3, r3, #1
 8019cba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8019cbe:	4313      	orrs	r3, r2
 8019cc0:	1af6      	subs	r6, r6, r3
 8019cc2:	f8a4 605e 	strh.w	r6, [r4, #94]	@ 0x5e
 8019cc6:	7b69      	ldrb	r1, [r5, #13]
 8019cc8:	00cb      	lsls	r3, r1, #3
 8019cca:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 8019cce:	7a2b      	ldrb	r3, [r5, #8]
 8019cd0:	4313      	orrs	r3, r2
 8019cd2:	064a      	lsls	r2, r1, #25
 8019cd4:	bf44      	itt	mi
 8019cd6:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 8019cda:	b21b      	sxthmi	r3, r3
 8019cdc:	1bdb      	subs	r3, r3, r7
 8019cde:	e746      	b.n	8019b6e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x9e>
 8019ce0:	2300      	movs	r3, #0
 8019ce2:	e7ba      	b.n	8019c5a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x18a>
 8019ce4:	3fc00079 	.word	0x3fc00079

08019ce8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>:
 8019ce8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8019cec:	4604      	mov	r4, r0
 8019cee:	b942      	cbnz	r2, 8019d02 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1a>
 8019cf0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8019cf4:	f8a0 305a 	strh.w	r3, [r0, #90]	@ 0x5a
 8019cf8:	f8a0 305c 	strh.w	r3, [r0, #92]	@ 0x5c
 8019cfc:	f8a4 305e 	strh.w	r3, [r4, #94]	@ 0x5e
 8019d00:	e047      	b.n	8019d92 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xaa>
 8019d02:	7b51      	ldrb	r1, [r2, #13]
 8019d04:	8893      	ldrh	r3, [r2, #4]
 8019d06:	010d      	lsls	r5, r1, #4
 8019d08:	f405 7080 	and.w	r0, r5, #256	@ 0x100
 8019d0c:	79d5      	ldrb	r5, [r2, #7]
 8019d0e:	4305      	orrs	r5, r0
 8019d10:	2d04      	cmp	r5, #4
 8019d12:	bfcc      	ite	gt
 8019d14:	ea4f 0e95 	movgt.w	lr, r5, lsr #2
 8019d18:	f04f 0e01 	movle.w	lr, #1
 8019d1c:	f5b3 6fdd 	cmp.w	r3, #1768	@ 0x6e8
 8019d20:	f200 80ab 	bhi.w	8019e7a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x192>
 8019d24:	f240 60e7 	movw	r0, #1767	@ 0x6e7
 8019d28:	4283      	cmp	r3, r0
 8019d2a:	d216      	bcs.n	8019d5a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8019d2c:	f240 605b 	movw	r0, #1627	@ 0x65b
 8019d30:	4283      	cmp	r3, r0
 8019d32:	d859      	bhi.n	8019de8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x100>
 8019d34:	f240 6057 	movw	r0, #1623	@ 0x657
 8019d38:	4283      	cmp	r3, r0
 8019d3a:	d20e      	bcs.n	8019d5a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8019d3c:	f5b3 6fca 	cmp.w	r3, #1616	@ 0x650
 8019d40:	d24a      	bcs.n	8019dd8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xf0>
 8019d42:	f240 604e 	movw	r0, #1614	@ 0x64e
 8019d46:	4283      	cmp	r3, r0
 8019d48:	d207      	bcs.n	8019d5a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8019d4a:	f240 601a 	movw	r0, #1562	@ 0x61a
 8019d4e:	4283      	cmp	r3, r0
 8019d50:	d02a      	beq.n	8019da8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8019d52:	d821      	bhi.n	8019d98 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xb0>
 8019d54:	f5b3 6fc2 	cmp.w	r3, #1552	@ 0x610
 8019d58:	d35b      	bcc.n	8019e12 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 8019d5a:	f9b4 305a 	ldrsh.w	r3, [r4, #90]	@ 0x5a
 8019d5e:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 8019d62:	f040 80d0 	bne.w	8019f06 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21e>
 8019d66:	f9b4 005c 	ldrsh.w	r0, [r4, #92]	@ 0x5c
 8019d6a:	f510 4f00 	cmn.w	r0, #32768	@ 0x8000
 8019d6e:	f040 80ca 	bne.w	8019f06 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21e>
 8019d72:	00cb      	lsls	r3, r1, #3
 8019d74:	0649      	lsls	r1, r1, #25
 8019d76:	f403 7080 	and.w	r0, r3, #256	@ 0x100
 8019d7a:	7a13      	ldrb	r3, [r2, #8]
 8019d7c:	ea43 0300 	orr.w	r3, r3, r0
 8019d80:	bf44      	itt	mi
 8019d82:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 8019d86:	b21b      	sxthmi	r3, r3
 8019d88:	f8a4 305a 	strh.w	r3, [r4, #90]	@ 0x5a
 8019d8c:	1b5d      	subs	r5, r3, r5
 8019d8e:	f8a4 505c 	strh.w	r5, [r4, #92]	@ 0x5c
 8019d92:	4610      	mov	r0, r2
 8019d94:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8019d98:	f240 604b 	movw	r0, #1611	@ 0x64b
 8019d9c:	4283      	cmp	r3, r0
 8019d9e:	d338      	bcc.n	8019e12 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 8019da0:	f240 604c 	movw	r0, #1612	@ 0x64c
 8019da4:	4283      	cmp	r3, r0
 8019da6:	d9d8      	bls.n	8019d5a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8019da8:	f9b4 005a 	ldrsh.w	r0, [r4, #90]	@ 0x5a
 8019dac:	f9b4 305c 	ldrsh.w	r3, [r4, #92]	@ 0x5c
 8019db0:	f510 4f00 	cmn.w	r0, #32768	@ 0x8000
 8019db4:	f040 80f3 	bne.w	8019f9e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b6>
 8019db8:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 8019dbc:	f040 80ef 	bne.w	8019f9e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b6>
 8019dc0:	00cb      	lsls	r3, r1, #3
 8019dc2:	064e      	lsls	r6, r1, #25
 8019dc4:	f403 7080 	and.w	r0, r3, #256	@ 0x100
 8019dc8:	7a13      	ldrb	r3, [r2, #8]
 8019dca:	ea43 0300 	orr.w	r3, r3, r0
 8019dce:	bf44      	itt	mi
 8019dd0:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 8019dd4:	b21b      	sxthmi	r3, r3
 8019dd6:	e7d9      	b.n	8019d8c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa4>
 8019dd8:	f240 6054 	movw	r0, #1620	@ 0x654
 8019ddc:	4283      	cmp	r3, r0
 8019dde:	d8e3      	bhi.n	8019da8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8019de0:	f5b3 6fca 	cmp.w	r3, #1616	@ 0x650
 8019de4:	d9e0      	bls.n	8019da8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8019de6:	e7b8      	b.n	8019d5a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8019de8:	f240 6074 	movw	r0, #1652	@ 0x674
 8019dec:	4283      	cmp	r3, r0
 8019dee:	d0b4      	beq.n	8019d5a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8019df0:	d82d      	bhi.n	8019e4e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x166>
 8019df2:	f240 605e 	movw	r0, #1630	@ 0x65e
 8019df6:	4283      	cmp	r3, r0
 8019df8:	d804      	bhi.n	8019e04 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x11c>
 8019dfa:	f240 605d 	movw	r0, #1629	@ 0x65d
 8019dfe:	4283      	cmp	r3, r0
 8019e00:	d3d2      	bcc.n	8019da8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8019e02:	e7aa      	b.n	8019d5a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8019e04:	f240 605f 	movw	r0, #1631	@ 0x65f
 8019e08:	4283      	cmp	r3, r0
 8019e0a:	d0cd      	beq.n	8019da8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8019e0c:	f5b3 6fce 	cmp.w	r3, #1648	@ 0x670
 8019e10:	d0a3      	beq.n	8019d5a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8019e12:	00cb      	lsls	r3, r1, #3
 8019e14:	0649      	lsls	r1, r1, #25
 8019e16:	f403 7080 	and.w	r0, r3, #256	@ 0x100
 8019e1a:	7a13      	ldrb	r3, [r2, #8]
 8019e1c:	ea43 0300 	orr.w	r3, r3, r0
 8019e20:	bf44      	itt	mi
 8019e22:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 8019e26:	b21b      	sxthmi	r3, r3
 8019e28:	1b5d      	subs	r5, r3, r5
 8019e2a:	f8a4 305a 	strh.w	r3, [r4, #90]	@ 0x5a
 8019e2e:	f8a4 505c 	strh.w	r5, [r4, #92]	@ 0x5c
 8019e32:	7b53      	ldrb	r3, [r2, #13]
 8019e34:	015b      	lsls	r3, r3, #5
 8019e36:	f403 7180 	and.w	r1, r3, #256	@ 0x100
 8019e3a:	7993      	ldrb	r3, [r2, #6]
 8019e3c:	430b      	orrs	r3, r1
 8019e3e:	2105      	movs	r1, #5
 8019e40:	005b      	lsls	r3, r3, #1
 8019e42:	fb93 f3f1 	sdiv	r3, r3, r1
 8019e46:	f992 1009 	ldrsb.w	r1, [r2, #9]
 8019e4a:	440b      	add	r3, r1
 8019e4c:	e756      	b.n	8019cfc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x14>
 8019e4e:	f240 60e2 	movw	r0, #1762	@ 0x6e2
 8019e52:	4283      	cmp	r3, r0
 8019e54:	d809      	bhi.n	8019e6a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x182>
 8019e56:	f240 60df 	movw	r0, #1759	@ 0x6df
 8019e5a:	4283      	cmp	r3, r0
 8019e5c:	f4bf af7d 	bcs.w	8019d5a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8019e60:	f2a3 63d6 	subw	r3, r3, #1750	@ 0x6d6
 8019e64:	2b05      	cmp	r3, #5
 8019e66:	d8d4      	bhi.n	8019e12 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 8019e68:	e777      	b.n	8019d5a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8019e6a:	f240 60e3 	movw	r0, #1763	@ 0x6e3
 8019e6e:	4283      	cmp	r3, r0
 8019e70:	d09a      	beq.n	8019da8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8019e72:	f240 60e4 	movw	r0, #1764	@ 0x6e4
 8019e76:	4283      	cmp	r3, r0
 8019e78:	e7ca      	b.n	8019e10 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 8019e7a:	f5b3 6f0f 	cmp.w	r3, #2288	@ 0x8f0
 8019e7e:	d22b      	bcs.n	8019ed8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1f0>
 8019e80:	f640 00ed 	movw	r0, #2285	@ 0x8ed
 8019e84:	4283      	cmp	r3, r0
 8019e86:	d28f      	bcs.n	8019da8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8019e88:	f640 00e5 	movw	r0, #2277	@ 0x8e5
 8019e8c:	4283      	cmp	r3, r0
 8019e8e:	d816      	bhi.n	8019ebe <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d6>
 8019e90:	f640 00e4 	movw	r0, #2276	@ 0x8e4
 8019e94:	4283      	cmp	r3, r0
 8019e96:	f4bf af60 	bcs.w	8019d5a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8019e9a:	f240 60ec 	movw	r0, #1772	@ 0x6ec
 8019e9e:	4283      	cmp	r3, r0
 8019ea0:	d80a      	bhi.n	8019eb8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d0>
 8019ea2:	f240 60eb 	movw	r0, #1771	@ 0x6eb
 8019ea6:	4283      	cmp	r3, r0
 8019ea8:	f4bf af57 	bcs.w	8019d5a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8019eac:	f240 60ea 	movw	r0, #1770	@ 0x6ea
 8019eb0:	4283      	cmp	r3, r0
 8019eb2:	f43f af79 	beq.w	8019da8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8019eb6:	e7ac      	b.n	8019e12 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 8019eb8:	f240 60ed 	movw	r0, #1773	@ 0x6ed
 8019ebc:	e7f8      	b.n	8019eb0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1c8>
 8019ebe:	f640 00e8 	movw	r0, #2280	@ 0x8e8
 8019ec2:	4283      	cmp	r3, r0
 8019ec4:	d802      	bhi.n	8019ecc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e4>
 8019ec6:	f640 00e7 	movw	r0, #2279	@ 0x8e7
 8019eca:	e798      	b.n	8019dfe <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x116>
 8019ecc:	f640 00e9 	movw	r0, #2281	@ 0x8e9
 8019ed0:	4283      	cmp	r3, r0
 8019ed2:	f47f af42 	bne.w	8019d5a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8019ed6:	e767      	b.n	8019da8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8019ed8:	f640 00f6 	movw	r0, #2294	@ 0x8f6
 8019edc:	4283      	cmp	r3, r0
 8019ede:	f43f af63 	beq.w	8019da8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8019ee2:	d802      	bhi.n	8019eea <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x202>
 8019ee4:	f640 00f2 	movw	r0, #2290	@ 0x8f2
 8019ee8:	e7f2      	b.n	8019ed0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e8>
 8019eea:	f640 00fa 	movw	r0, #2298	@ 0x8fa
 8019eee:	4283      	cmp	r3, r0
 8019ef0:	d805      	bhi.n	8019efe <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x216>
 8019ef2:	f640 00f9 	movw	r0, #2297	@ 0x8f9
 8019ef6:	4283      	cmp	r3, r0
 8019ef8:	f4ff af2f 	bcc.w	8019d5a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8019efc:	e754      	b.n	8019da8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8019efe:	f640 00fe 	movw	r0, #2302	@ 0x8fe
 8019f02:	4283      	cmp	r3, r0
 8019f04:	e7af      	b.n	8019e66 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x17e>
 8019f06:	f104 0c4c 	add.w	ip, r4, #76	@ 0x4c
 8019f0a:	4617      	mov	r7, r2
 8019f0c:	f102 0808 	add.w	r8, r2, #8
 8019f10:	4666      	mov	r6, ip
 8019f12:	6838      	ldr	r0, [r7, #0]
 8019f14:	3708      	adds	r7, #8
 8019f16:	f857 1c04 	ldr.w	r1, [r7, #-4]
 8019f1a:	46e6      	mov	lr, ip
 8019f1c:	4547      	cmp	r7, r8
 8019f1e:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 8019f22:	46f4      	mov	ip, lr
 8019f24:	d1f5      	bne.n	8019f12 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x22a>
 8019f26:	6838      	ldr	r0, [r7, #0]
 8019f28:	f8ce 0000 	str.w	r0, [lr]
 8019f2c:	88b9      	ldrh	r1, [r7, #4]
 8019f2e:	f8ae 1004 	strh.w	r1, [lr, #4]
 8019f32:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	@ 0x5e
 8019f36:	f510 4f00 	cmn.w	r0, #32768	@ 0x8000
 8019f3a:	d009      	beq.n	8019f50 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x268>
 8019f3c:	7b51      	ldrb	r1, [r2, #13]
 8019f3e:	7992      	ldrb	r2, [r2, #6]
 8019f40:	0149      	lsls	r1, r1, #5
 8019f42:	f401 7180 	and.w	r1, r1, #256	@ 0x100
 8019f46:	4311      	orrs	r1, r2
 8019f48:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 8019f4c:	f884 0055 	strb.w	r0, [r4, #85]	@ 0x55
 8019f50:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 8019f54:	b2ad      	uxth	r5, r5
 8019f56:	d00d      	beq.n	8019f74 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x28c>
 8019f58:	442b      	add	r3, r5
 8019f5a:	f894 2059 	ldrb.w	r2, [r4, #89]	@ 0x59
 8019f5e:	b29b      	uxth	r3, r3
 8019f60:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8019f64:	f884 3054 	strb.w	r3, [r4, #84]	@ 0x54
 8019f68:	10db      	asrs	r3, r3, #3
 8019f6a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8019f6e:	4313      	orrs	r3, r2
 8019f70:	f884 3059 	strb.w	r3, [r4, #89]	@ 0x59
 8019f74:	f894 1059 	ldrb.w	r1, [r4, #89]	@ 0x59
 8019f78:	00cb      	lsls	r3, r1, #3
 8019f7a:	064f      	lsls	r7, r1, #25
 8019f7c:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 8019f80:	f894 3054 	ldrb.w	r3, [r4, #84]	@ 0x54
 8019f84:	ea43 0302 	orr.w	r3, r3, r2
 8019f88:	bf44      	itt	mi
 8019f8a:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 8019f8e:	b21b      	sxthmi	r3, r3
 8019f90:	f8a4 305a 	strh.w	r3, [r4, #90]	@ 0x5a
 8019f94:	1b5b      	subs	r3, r3, r5
 8019f96:	f8a4 305c 	strh.w	r3, [r4, #92]	@ 0x5c
 8019f9a:	4632      	mov	r2, r6
 8019f9c:	e6f9      	b.n	8019d92 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xaa>
 8019f9e:	f104 0c4c 	add.w	ip, r4, #76	@ 0x4c
 8019fa2:	4617      	mov	r7, r2
 8019fa4:	f102 0908 	add.w	r9, r2, #8
 8019fa8:	4666      	mov	r6, ip
 8019faa:	6838      	ldr	r0, [r7, #0]
 8019fac:	3708      	adds	r7, #8
 8019fae:	f857 1c04 	ldr.w	r1, [r7, #-4]
 8019fb2:	46e0      	mov	r8, ip
 8019fb4:	454f      	cmp	r7, r9
 8019fb6:	e8a8 0003 	stmia.w	r8!, {r0, r1}
 8019fba:	46c4      	mov	ip, r8
 8019fbc:	d1f5      	bne.n	8019faa <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2c2>
 8019fbe:	6838      	ldr	r0, [r7, #0]
 8019fc0:	f8c8 0000 	str.w	r0, [r8]
 8019fc4:	88b9      	ldrh	r1, [r7, #4]
 8019fc6:	f8a8 1004 	strh.w	r1, [r8, #4]
 8019fca:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	@ 0x5e
 8019fce:	f510 4f00 	cmn.w	r0, #32768	@ 0x8000
 8019fd2:	d009      	beq.n	8019fe8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x300>
 8019fd4:	7b51      	ldrb	r1, [r2, #13]
 8019fd6:	7992      	ldrb	r2, [r2, #6]
 8019fd8:	0149      	lsls	r1, r1, #5
 8019fda:	f401 7180 	and.w	r1, r1, #256	@ 0x100
 8019fde:	4311      	orrs	r1, r2
 8019fe0:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 8019fe4:	f884 0055 	strb.w	r0, [r4, #85]	@ 0x55
 8019fe8:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 8019fec:	d00e      	beq.n	801a00c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x324>
 8019fee:	eba3 030e 	sub.w	r3, r3, lr
 8019ff2:	f894 2059 	ldrb.w	r2, [r4, #89]	@ 0x59
 8019ff6:	b29b      	uxth	r3, r3
 8019ff8:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8019ffc:	f884 3054 	strb.w	r3, [r4, #84]	@ 0x54
 801a000:	10db      	asrs	r3, r3, #3
 801a002:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 801a006:	4313      	orrs	r3, r2
 801a008:	f884 3059 	strb.w	r3, [r4, #89]	@ 0x59
 801a00c:	f894 1059 	ldrb.w	r1, [r4, #89]	@ 0x59
 801a010:	00cb      	lsls	r3, r1, #3
 801a012:	0648      	lsls	r0, r1, #25
 801a014:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 801a018:	f894 3054 	ldrb.w	r3, [r4, #84]	@ 0x54
 801a01c:	ea43 0302 	orr.w	r3, r3, r2
 801a020:	bf44      	itt	mi
 801a022:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 801a026:	b21b      	sxthmi	r3, r3
 801a028:	1b5d      	subs	r5, r3, r5
 801a02a:	f8a4 505c 	strh.w	r5, [r4, #92]	@ 0x5c
 801a02e:	e7b4      	b.n	8019f9a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b2>

0801a030 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>:
 801a030:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a034:	461e      	mov	r6, r3
 801a036:	8ec3      	ldrh	r3, [r0, #54]	@ 0x36
 801a038:	4604      	mov	r4, r0
 801a03a:	4617      	mov	r7, r2
 801a03c:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801a040:	f8b3 8022 	ldrh.w	r8, [r3, #34]	@ 0x22
 801a044:	f7e9 ffda 	bl	8003ffc <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801a048:	4605      	mov	r5, r0
 801a04a:	b918      	cbnz	r0, 801a054 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x24>
 801a04c:	6030      	str	r0, [r6, #0]
 801a04e:	4628      	mov	r0, r5
 801a050:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a054:	683b      	ldr	r3, [r7, #0]
 801a056:	4601      	mov	r1, r0
 801a058:	4638      	mov	r0, r7
 801a05a:	68db      	ldr	r3, [r3, #12]
 801a05c:	4798      	blx	r3
 801a05e:	f5a8 63c0 	sub.w	r3, r8, #1536	@ 0x600
 801a062:	4602      	mov	r2, r0
 801a064:	6030      	str	r0, [r6, #0]
 801a066:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 801a06a:	d213      	bcs.n	801a094 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x64>
 801a06c:	4643      	mov	r3, r8
 801a06e:	4639      	mov	r1, r7
 801a070:	4620      	mov	r0, r4
 801a072:	f7ff fe39 	bl	8019ce8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 801a076:	6030      	str	r0, [r6, #0]
 801a078:	6833      	ldr	r3, [r6, #0]
 801a07a:	b143      	cbz	r3, 801a08e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x5e>
 801a07c:	7b5a      	ldrb	r2, [r3, #13]
 801a07e:	7a9b      	ldrb	r3, [r3, #10]
 801a080:	0052      	lsls	r2, r2, #1
 801a082:	f402 7280 	and.w	r2, r2, #256	@ 0x100
 801a086:	4313      	orrs	r3, r2
 801a088:	bf0c      	ite	eq
 801a08a:	2301      	moveq	r3, #1
 801a08c:	2300      	movne	r3, #0
 801a08e:	f884 3061 	strb.w	r3, [r4, #97]	@ 0x61
 801a092:	e7dc      	b.n	801a04e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x1e>
 801a094:	f5a5 6360 	sub.w	r3, r5, #3584	@ 0xe00
 801a098:	b29b      	uxth	r3, r3
 801a09a:	2b7f      	cmp	r3, #127	@ 0x7f
 801a09c:	d804      	bhi.n	801a0a8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x78>
 801a09e:	4639      	mov	r1, r7
 801a0a0:	4620      	mov	r0, r4
 801a0a2:	f7ff fd15 	bl	8019ad0 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 801a0a6:	e7e6      	b.n	801a076 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x46>
 801a0a8:	f894 3061 	ldrb.w	r3, [r4, #97]	@ 0x61
 801a0ac:	2b00      	cmp	r3, #0
 801a0ae:	d0e3      	beq.n	801a078 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x48>
 801a0b0:	f640 1302 	movw	r3, #2306	@ 0x902
 801a0b4:	429d      	cmp	r5, r3
 801a0b6:	d1df      	bne.n	801a078 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x48>
 801a0b8:	4601      	mov	r1, r0
 801a0ba:	4620      	mov	r0, r4
 801a0bc:	f7ff fcd9 	bl	8019a72 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 801a0c0:	e7d9      	b.n	801a076 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x46>

0801a0c2 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>:
 801a0c2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801a0c6:	461e      	mov	r6, r3
 801a0c8:	8ec3      	ldrh	r3, [r0, #54]	@ 0x36
 801a0ca:	4604      	mov	r4, r0
 801a0cc:	4617      	mov	r7, r2
 801a0ce:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801a0d2:	f8b3 8022 	ldrh.w	r8, [r3, #34]	@ 0x22
 801a0d6:	f7e9 ff91 	bl	8003ffc <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801a0da:	4605      	mov	r5, r0
 801a0dc:	b918      	cbnz	r0, 801a0e6 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x24>
 801a0de:	6030      	str	r0, [r6, #0]
 801a0e0:	4628      	mov	r0, r5
 801a0e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801a0e6:	683b      	ldr	r3, [r7, #0]
 801a0e8:	4601      	mov	r1, r0
 801a0ea:	4638      	mov	r0, r7
 801a0ec:	f8d3 9008 	ldr.w	r9, [r3, #8]
 801a0f0:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801a0f4:	47c8      	blx	r9
 801a0f6:	f5a8 63c0 	sub.w	r3, r8, #1536	@ 0x600
 801a0fa:	4602      	mov	r2, r0
 801a0fc:	6030      	str	r0, [r6, #0]
 801a0fe:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 801a102:	d213      	bcs.n	801a12c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x6a>
 801a104:	4643      	mov	r3, r8
 801a106:	4639      	mov	r1, r7
 801a108:	4620      	mov	r0, r4
 801a10a:	f7ff fded 	bl	8019ce8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 801a10e:	6030      	str	r0, [r6, #0]
 801a110:	6833      	ldr	r3, [r6, #0]
 801a112:	b143      	cbz	r3, 801a126 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x64>
 801a114:	7b5a      	ldrb	r2, [r3, #13]
 801a116:	7a9b      	ldrb	r3, [r3, #10]
 801a118:	0052      	lsls	r2, r2, #1
 801a11a:	f402 7280 	and.w	r2, r2, #256	@ 0x100
 801a11e:	4313      	orrs	r3, r2
 801a120:	bf0c      	ite	eq
 801a122:	2301      	moveq	r3, #1
 801a124:	2300      	movne	r3, #0
 801a126:	f884 3061 	strb.w	r3, [r4, #97]	@ 0x61
 801a12a:	e7d9      	b.n	801a0e0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x1e>
 801a12c:	f5a5 6360 	sub.w	r3, r5, #3584	@ 0xe00
 801a130:	b29b      	uxth	r3, r3
 801a132:	2b7f      	cmp	r3, #127	@ 0x7f
 801a134:	d804      	bhi.n	801a140 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x7e>
 801a136:	4639      	mov	r1, r7
 801a138:	4620      	mov	r0, r4
 801a13a:	f7ff fcc9 	bl	8019ad0 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 801a13e:	e7e6      	b.n	801a10e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4c>
 801a140:	f894 3061 	ldrb.w	r3, [r4, #97]	@ 0x61
 801a144:	2b00      	cmp	r3, #0
 801a146:	d0e3      	beq.n	801a110 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4e>
 801a148:	f640 1302 	movw	r3, #2306	@ 0x902
 801a14c:	429d      	cmp	r5, r3
 801a14e:	d1df      	bne.n	801a110 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4e>
 801a150:	4601      	mov	r1, r0
 801a152:	4620      	mov	r0, r4
 801a154:	f7ff fc8d 	bl	8019a72 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 801a158:	e7d9      	b.n	801a10e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4c>

0801a15a <_ZN8touchgfx12TextProvider15fillInputBufferEv>:
 801a15a:	b510      	push	{r4, lr}
 801a15c:	4604      	mov	r4, r0
 801a15e:	f8b4 1040 	ldrh.w	r1, [r4, #64]	@ 0x40
 801a162:	8f23      	ldrh	r3, [r4, #56]	@ 0x38
 801a164:	b1e1      	cbz	r1, 801a1a0 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x46>
 801a166:	2b0a      	cmp	r3, #10
 801a168:	d02d      	beq.n	801a1c6 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x6c>
 801a16a:	8fe2      	ldrh	r2, [r4, #62]	@ 0x3e
 801a16c:	3901      	subs	r1, #1
 801a16e:	eb04 0042 	add.w	r0, r4, r2, lsl #1
 801a172:	8f40      	ldrh	r0, [r0, #58]	@ 0x3a
 801a174:	f8a4 1040 	strh.w	r1, [r4, #64]	@ 0x40
 801a178:	1c51      	adds	r1, r2, #1
 801a17a:	b289      	uxth	r1, r1
 801a17c:	2901      	cmp	r1, #1
 801a17e:	bf8a      	itet	hi
 801a180:	f102 32ff 	addhi.w	r2, r2, #4294967295
 801a184:	87e1      	strhls	r1, [r4, #62]	@ 0x3e
 801a186:	87e2      	strhhi	r2, [r4, #62]	@ 0x3e
 801a188:	1c5a      	adds	r2, r3, #1
 801a18a:	8722      	strh	r2, [r4, #56]	@ 0x38
 801a18c:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
 801a18e:	4413      	add	r3, r2
 801a190:	b29b      	uxth	r3, r3
 801a192:	2b09      	cmp	r3, #9
 801a194:	bf88      	it	hi
 801a196:	3b0a      	subhi	r3, #10
 801a198:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801a19c:	8458      	strh	r0, [r3, #34]	@ 0x22
 801a19e:	e7de      	b.n	801a15e <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x4>
 801a1a0:	8f23      	ldrh	r3, [r4, #56]	@ 0x38
 801a1a2:	2b0a      	cmp	r3, #10
 801a1a4:	d00f      	beq.n	801a1c6 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x6c>
 801a1a6:	4620      	mov	r0, r4
 801a1a8:	f7ff fc11 	bl	80199ce <_ZN8touchgfx12TextProvider19getNextCharInternalEv>
 801a1ac:	8f23      	ldrh	r3, [r4, #56]	@ 0x38
 801a1ae:	1c5a      	adds	r2, r3, #1
 801a1b0:	8722      	strh	r2, [r4, #56]	@ 0x38
 801a1b2:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
 801a1b4:	4413      	add	r3, r2
 801a1b6:	b29b      	uxth	r3, r3
 801a1b8:	2b09      	cmp	r3, #9
 801a1ba:	bf88      	it	hi
 801a1bc:	3b0a      	subhi	r3, #10
 801a1be:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801a1c2:	8458      	strh	r0, [r3, #34]	@ 0x22
 801a1c4:	e7ec      	b.n	801a1a0 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x46>
 801a1c6:	bd10      	pop	{r4, pc}

0801a1c8 <_ZN8touchgfx12TextProvider11getNextCharEv>:
 801a1c8:	b538      	push	{r3, r4, r5, lr}
 801a1ca:	8ec3      	ldrh	r3, [r0, #54]	@ 0x36
 801a1cc:	4604      	mov	r4, r0
 801a1ce:	eb00 0243 	add.w	r2, r0, r3, lsl #1
 801a1d2:	8c55      	ldrh	r5, [r2, #34]	@ 0x22
 801a1d4:	8f02      	ldrh	r2, [r0, #56]	@ 0x38
 801a1d6:	3a01      	subs	r2, #1
 801a1d8:	8702      	strh	r2, [r0, #56]	@ 0x38
 801a1da:	1c5a      	adds	r2, r3, #1
 801a1dc:	b292      	uxth	r2, r2
 801a1de:	2a09      	cmp	r2, #9
 801a1e0:	bf8a      	itet	hi
 801a1e2:	3b09      	subhi	r3, #9
 801a1e4:	86c2      	strhls	r2, [r0, #54]	@ 0x36
 801a1e6:	86c3      	strhhi	r3, [r0, #54]	@ 0x36
 801a1e8:	f7ff ffb7 	bl	801a15a <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 801a1ec:	8c23      	ldrh	r3, [r4, #32]
 801a1ee:	2b01      	cmp	r3, #1
 801a1f0:	bf9c      	itt	ls
 801a1f2:	3301      	addls	r3, #1
 801a1f4:	8423      	strhls	r3, [r4, #32]
 801a1f6:	8be3      	ldrh	r3, [r4, #30]
 801a1f8:	b90b      	cbnz	r3, 801a1fe <_ZN8touchgfx12TextProvider11getNextCharEv+0x36>
 801a1fa:	2302      	movs	r3, #2
 801a1fc:	83e3      	strh	r3, [r4, #30]
 801a1fe:	8be3      	ldrh	r3, [r4, #30]
 801a200:	4628      	mov	r0, r5
 801a202:	3b01      	subs	r3, #1
 801a204:	b29b      	uxth	r3, r3
 801a206:	83e3      	strh	r3, [r4, #30]
 801a208:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801a20c:	8365      	strh	r5, [r4, #26]
 801a20e:	bd38      	pop	{r3, r4, r5, pc}

0801a210 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>:
 801a210:	428a      	cmp	r2, r1
 801a212:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a216:	8ec7      	ldrh	r7, [r0, #54]	@ 0x36
 801a218:	d932      	bls.n	801a280 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x70>
 801a21a:	8f05      	ldrh	r5, [r0, #56]	@ 0x38
 801a21c:	1a54      	subs	r4, r2, r1
 801a21e:	f8b0 8040 	ldrh.w	r8, [r0, #64]	@ 0x40
 801a222:	19ee      	adds	r6, r5, r7
 801a224:	fa1f fe84 	uxth.w	lr, r4
 801a228:	f8b0 c03e 	ldrh.w	ip, [r0, #62]	@ 0x3e
 801a22c:	3e01      	subs	r6, #1
 801a22e:	b2b4      	uxth	r4, r6
 801a230:	eba4 090e 	sub.w	r9, r4, lr
 801a234:	fa1f f989 	uxth.w	r9, r9
 801a238:	2c09      	cmp	r4, #9
 801a23a:	4626      	mov	r6, r4
 801a23c:	bf88      	it	hi
 801a23e:	f1a4 060a 	subhi.w	r6, r4, #10
 801a242:	f1bc 0f00 	cmp.w	ip, #0
 801a246:	f104 34ff 	add.w	r4, r4, #4294967295
 801a24a:	bf08      	it	eq
 801a24c:	f04f 0c02 	moveq.w	ip, #2
 801a250:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 801a254:	b2a4      	uxth	r4, r4
 801a256:	f10c 3cff 	add.w	ip, ip, #4294967295
 801a25a:	f8b6 a022 	ldrh.w	sl, [r6, #34]	@ 0x22
 801a25e:	454c      	cmp	r4, r9
 801a260:	fa1f fc8c 	uxth.w	ip, ip
 801a264:	eb00 064c 	add.w	r6, r0, ip, lsl #1
 801a268:	f8a6 a03a 	strh.w	sl, [r6, #58]	@ 0x3a
 801a26c:	d1e4      	bne.n	801a238 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x28>
 801a26e:	eba5 050e 	sub.w	r5, r5, lr
 801a272:	eb0e 0408 	add.w	r4, lr, r8
 801a276:	f8a0 c03e 	strh.w	ip, [r0, #62]	@ 0x3e
 801a27a:	8705      	strh	r5, [r0, #56]	@ 0x38
 801a27c:	f8a0 4040 	strh.w	r4, [r0, #64]	@ 0x40
 801a280:	8f04      	ldrh	r4, [r0, #56]	@ 0x38
 801a282:	250a      	movs	r5, #10
 801a284:	1a64      	subs	r4, r4, r1
 801a286:	4439      	add	r1, r7
 801a288:	b289      	uxth	r1, r1
 801a28a:	8704      	strh	r4, [r0, #56]	@ 0x38
 801a28c:	2909      	cmp	r1, #9
 801a28e:	bf88      	it	hi
 801a290:	390a      	subhi	r1, #10
 801a292:	86c1      	strh	r1, [r0, #54]	@ 0x36
 801a294:	b18a      	cbz	r2, 801a2ba <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xaa>
 801a296:	8f01      	ldrh	r1, [r0, #56]	@ 0x38
 801a298:	3a01      	subs	r2, #1
 801a29a:	3101      	adds	r1, #1
 801a29c:	b292      	uxth	r2, r2
 801a29e:	f833 4012 	ldrh.w	r4, [r3, r2, lsl #1]
 801a2a2:	8701      	strh	r1, [r0, #56]	@ 0x38
 801a2a4:	8ec1      	ldrh	r1, [r0, #54]	@ 0x36
 801a2a6:	b901      	cbnz	r1, 801a2aa <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x9a>
 801a2a8:	86c5      	strh	r5, [r0, #54]	@ 0x36
 801a2aa:	8ec1      	ldrh	r1, [r0, #54]	@ 0x36
 801a2ac:	3901      	subs	r1, #1
 801a2ae:	b289      	uxth	r1, r1
 801a2b0:	86c1      	strh	r1, [r0, #54]	@ 0x36
 801a2b2:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 801a2b6:	844c      	strh	r4, [r1, #34]	@ 0x22
 801a2b8:	e7ec      	b.n	801a294 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x84>
 801a2ba:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a2be:	f7ff bf4c 	b.w	801a15a <_ZN8touchgfx12TextProvider15fillInputBufferEv>

0801a2c2 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>:
 801a2c2:	b570      	push	{r4, r5, r6, lr}
 801a2c4:	2500      	movs	r5, #0
 801a2c6:	4295      	cmp	r5, r2
 801a2c8:	d011      	beq.n	801a2ee <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x2c>
 801a2ca:	8bc4      	ldrh	r4, [r0, #30]
 801a2cc:	f831 6b02 	ldrh.w	r6, [r1], #2
 801a2d0:	4414      	add	r4, r2
 801a2d2:	3c01      	subs	r4, #1
 801a2d4:	1b64      	subs	r4, r4, r5
 801a2d6:	b2a4      	uxth	r4, r4
 801a2d8:	2c01      	cmp	r4, #1
 801a2da:	bf88      	it	hi
 801a2dc:	3c02      	subhi	r4, #2
 801a2de:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 801a2e2:	8b64      	ldrh	r4, [r4, #26]
 801a2e4:	42b4      	cmp	r4, r6
 801a2e6:	d117      	bne.n	801a318 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x56>
 801a2e8:	3501      	adds	r5, #1
 801a2ea:	b2ad      	uxth	r5, r5
 801a2ec:	e7eb      	b.n	801a2c6 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x4>
 801a2ee:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 801a2f2:	2400      	movs	r4, #0
 801a2f4:	4413      	add	r3, r2
 801a2f6:	b2a2      	uxth	r2, r4
 801a2f8:	429a      	cmp	r2, r3
 801a2fa:	da0f      	bge.n	801a31c <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x5a>
 801a2fc:	8ec6      	ldrh	r6, [r0, #54]	@ 0x36
 801a2fe:	f831 5014 	ldrh.w	r5, [r1, r4, lsl #1]
 801a302:	3401      	adds	r4, #1
 801a304:	4432      	add	r2, r6
 801a306:	b292      	uxth	r2, r2
 801a308:	2a09      	cmp	r2, #9
 801a30a:	bf88      	it	hi
 801a30c:	3a0a      	subhi	r2, #10
 801a30e:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 801a312:	8c52      	ldrh	r2, [r2, #34]	@ 0x22
 801a314:	42aa      	cmp	r2, r5
 801a316:	d0ee      	beq.n	801a2f6 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x34>
 801a318:	2000      	movs	r0, #0
 801a31a:	bd70      	pop	{r4, r5, r6, pc}
 801a31c:	2001      	movs	r0, #1
 801a31e:	e7fc      	b.n	801a31a <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x58>

0801a320 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>:
 801a320:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a324:	4605      	mov	r5, r0
 801a326:	4616      	mov	r6, r2
 801a328:	1c8c      	adds	r4, r1, #2
 801a32a:	8809      	ldrh	r1, [r1, #0]
 801a32c:	ea4f 3a11 	mov.w	sl, r1, lsr #12
 801a330:	f834 301a 	ldrh.w	r3, [r4, sl, lsl #1]
 801a334:	42b3      	cmp	r3, r6
 801a336:	d124      	bne.n	801a382 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x62>
 801a338:	f3c1 2903 	ubfx	r9, r1, #8, #4
 801a33c:	f3c1 1803 	ubfx	r8, r1, #4, #4
 801a340:	f001 070f 	and.w	r7, r1, #15
 801a344:	4652      	mov	r2, sl
 801a346:	f8cd 8000 	str.w	r8, [sp]
 801a34a:	464b      	mov	r3, r9
 801a34c:	4621      	mov	r1, r4
 801a34e:	4628      	mov	r0, r5
 801a350:	f7ff ffb7 	bl	801a2c2 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>
 801a354:	4683      	mov	fp, r0
 801a356:	b168      	cbz	r0, 801a374 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x54>
 801a358:	eb0a 0109 	add.w	r1, sl, r9
 801a35c:	463a      	mov	r2, r7
 801a35e:	4628      	mov	r0, r5
 801a360:	4441      	add	r1, r8
 801a362:	eb04 0341 	add.w	r3, r4, r1, lsl #1
 801a366:	4649      	mov	r1, r9
 801a368:	f7ff ff52 	bl	801a210 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>
 801a36c:	4658      	mov	r0, fp
 801a36e:	b003      	add	sp, #12
 801a370:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a374:	eb07 010a 	add.w	r1, r7, sl
 801a378:	4449      	add	r1, r9
 801a37a:	4441      	add	r1, r8
 801a37c:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 801a380:	e7d2      	b.n	801a328 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x8>
 801a382:	f04f 0b00 	mov.w	fp, #0
 801a386:	e7f1      	b.n	801a36c <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x4c>

0801a388 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>:
 801a388:	b570      	push	{r4, r5, r6, lr}
 801a38a:	8810      	ldrh	r0, [r2, #0]
 801a38c:	4298      	cmp	r0, r3
 801a38e:	d817      	bhi.n	801a3c0 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801a390:	1e48      	subs	r0, r1, #1
 801a392:	f832 0020 	ldrh.w	r0, [r2, r0, lsl #2]
 801a396:	4298      	cmp	r0, r3
 801a398:	d312      	bcc.n	801a3c0 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801a39a:	2400      	movs	r4, #0
 801a39c:	428c      	cmp	r4, r1
 801a39e:	d20f      	bcs.n	801a3c0 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801a3a0:	1860      	adds	r0, r4, r1
 801a3a2:	1040      	asrs	r0, r0, #1
 801a3a4:	f832 6020 	ldrh.w	r6, [r2, r0, lsl #2]
 801a3a8:	0085      	lsls	r5, r0, #2
 801a3aa:	42b3      	cmp	r3, r6
 801a3ac:	d902      	bls.n	801a3b4 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x2c>
 801a3ae:	3001      	adds	r0, #1
 801a3b0:	b284      	uxth	r4, r0
 801a3b2:	e7f3      	b.n	801a39c <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 801a3b4:	d201      	bcs.n	801a3ba <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x32>
 801a3b6:	b281      	uxth	r1, r0
 801a3b8:	e7f0      	b.n	801a39c <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 801a3ba:	442a      	add	r2, r5
 801a3bc:	8850      	ldrh	r0, [r2, #2]
 801a3be:	bd70      	pop	{r4, r5, r6, pc}
 801a3c0:	2000      	movs	r0, #0
 801a3c2:	e7fc      	b.n	801a3be <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x36>

0801a3c4 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>:
 801a3c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a3c8:	6c45      	ldr	r5, [r0, #68]	@ 0x44
 801a3ca:	4604      	mov	r4, r0
 801a3cc:	260b      	movs	r6, #11
 801a3ce:	886f      	ldrh	r7, [r5, #2]
 801a3d0:	087f      	lsrs	r7, r7, #1
 801a3d2:	3e01      	subs	r6, #1
 801a3d4:	d013      	beq.n	801a3fe <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3a>
 801a3d6:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 801a3d8:	462a      	mov	r2, r5
 801a3da:	4639      	mov	r1, r7
 801a3dc:	4620      	mov	r0, r4
 801a3de:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801a3e2:	f8b3 8022 	ldrh.w	r8, [r3, #34]	@ 0x22
 801a3e6:	4643      	mov	r3, r8
 801a3e8:	f7ff ffce 	bl	801a388 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>
 801a3ec:	b138      	cbz	r0, 801a3fe <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3a>
 801a3ee:	eb05 0140 	add.w	r1, r5, r0, lsl #1
 801a3f2:	4642      	mov	r2, r8
 801a3f4:	4620      	mov	r0, r4
 801a3f6:	f7ff ff93 	bl	801a320 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>
 801a3fa:	2800      	cmp	r0, #0
 801a3fc:	d1e9      	bne.n	801a3d2 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0xe>
 801a3fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

0801a404 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>:
 801a404:	b570      	push	{r4, r5, r6, lr}
 801a406:	694a      	ldr	r2, [r1, #20]
 801a408:	6a8d      	ldr	r5, [r1, #40]	@ 0x28
 801a40a:	684b      	ldr	r3, [r1, #4]
 801a40c:	1b54      	subs	r4, r2, r5
 801a40e:	6ace      	ldr	r6, [r1, #44]	@ 0x2c
 801a410:	f000 8106 	beq.w	801a620 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x21c>
 801a414:	1b9b      	subs	r3, r3, r6
 801a416:	d003      	beq.n	801a420 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 801a418:	4363      	muls	r3, r4
 801a41a:	2210      	movs	r2, #16
 801a41c:	fb93 f3f2 	sdiv	r3, r3, r2
 801a420:	680c      	ldr	r4, [r1, #0]
 801a422:	698a      	ldr	r2, [r1, #24]
 801a424:	1b65      	subs	r5, r4, r5
 801a426:	f000 80fd 	beq.w	801a624 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x220>
 801a42a:	1b92      	subs	r2, r2, r6
 801a42c:	d003      	beq.n	801a436 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 801a42e:	436a      	muls	r2, r5
 801a430:	2410      	movs	r4, #16
 801a432:	fb92 f2f4 	sdiv	r2, r2, r4
 801a436:	1a9b      	subs	r3, r3, r2
 801a438:	ed9f 4a89 	vldr	s8, [pc, #548]	@ 801a660 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x25c>
 801a43c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801a440:	460a      	mov	r2, r1
 801a442:	ee07 3a90 	vmov	s15, r3
 801a446:	f100 040c 	add.w	r4, r0, #12
 801a44a:	4603      	mov	r3, r0
 801a44c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801a450:	ee67 7a84 	vmul.f32	s15, s15, s8
 801a454:	ee87 3a27 	vdiv.f32	s6, s14, s15
 801a458:	eeb1 6a43 	vneg.f32	s12, s6
 801a45c:	edd2 7a02 	vldr	s15, [r2, #8]
 801a460:	3214      	adds	r2, #20
 801a462:	eec7 6a27 	vdiv.f32	s13, s14, s15
 801a466:	ece3 6a01 	vstmia	r3!, {s13}
 801a46a:	429c      	cmp	r4, r3
 801a46c:	ed52 7a02 	vldr	s15, [r2, #-8]
 801a470:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801a474:	edc3 7a02 	vstr	s15, [r3, #8]
 801a478:	ed52 7a01 	vldr	s15, [r2, #-4]
 801a47c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801a480:	edc3 7a05 	vstr	s15, [r3, #20]
 801a484:	d1ea      	bne.n	801a45c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x58>
 801a486:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 801a488:	698b      	ldr	r3, [r1, #24]
 801a48a:	edd0 4a02 	vldr	s9, [r0, #8]
 801a48e:	1a9b      	subs	r3, r3, r2
 801a490:	edd0 3a00 	vldr	s7, [r0]
 801a494:	edd0 6a01 	vldr	s13, [r0, #4]
 801a498:	ee07 3a90 	vmov	s15, r3
 801a49c:	684b      	ldr	r3, [r1, #4]
 801a49e:	ee76 6ae4 	vsub.f32	s13, s13, s9
 801a4a2:	ed90 5a05 	vldr	s10, [r0, #20]
 801a4a6:	1a9b      	subs	r3, r3, r2
 801a4a8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801a4ac:	ee73 4ae4 	vsub.f32	s9, s7, s9
 801a4b0:	ed90 2a03 	vldr	s4, [r0, #12]
 801a4b4:	ee07 3a10 	vmov	s14, r3
 801a4b8:	edd0 5a04 	vldr	s11, [r0, #16]
 801a4bc:	ee67 7a84 	vmul.f32	s15, s15, s8
 801a4c0:	ed90 1a07 	vldr	s2, [r0, #28]
 801a4c4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801a4c8:	edd0 2a06 	vldr	s5, [r0, #24]
 801a4cc:	ee75 5ac5 	vsub.f32	s11, s11, s10
 801a4d0:	ee64 7ae7 	vnmul.f32	s15, s9, s15
 801a4d4:	ee27 7a04 	vmul.f32	s14, s14, s8
 801a4d8:	ee32 5a45 	vsub.f32	s10, s4, s10
 801a4dc:	eee6 7a87 	vfma.f32	s15, s13, s14
 801a4e0:	ee67 7a83 	vmul.f32	s15, s15, s6
 801a4e4:	edc0 7a09 	vstr	s15, [r0, #36]	@ 0x24
 801a4e8:	6a8c      	ldr	r4, [r1, #40]	@ 0x28
 801a4ea:	694a      	ldr	r2, [r1, #20]
 801a4ec:	1b13      	subs	r3, r2, r4
 801a4ee:	ee07 3a10 	vmov	s14, r3
 801a4f2:	680b      	ldr	r3, [r1, #0]
 801a4f4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801a4f8:	1b1b      	subs	r3, r3, r4
 801a4fa:	ee27 7a04 	vmul.f32	s14, s14, s8
 801a4fe:	ee64 4ac7 	vnmul.f32	s9, s9, s14
 801a502:	ee07 3a10 	vmov	s14, r3
 801a506:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801a50a:	ee27 7a04 	vmul.f32	s14, s14, s8
 801a50e:	eee6 4a87 	vfma.f32	s9, s13, s14
 801a512:	ee64 4a86 	vmul.f32	s9, s9, s12
 801a516:	edc0 4a0a 	vstr	s9, [r0, #40]	@ 0x28
 801a51a:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 801a51c:	698b      	ldr	r3, [r1, #24]
 801a51e:	1a9b      	subs	r3, r3, r2
 801a520:	ee06 3a90 	vmov	s13, r3
 801a524:	684b      	ldr	r3, [r1, #4]
 801a526:	1a9b      	subs	r3, r3, r2
 801a528:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801a52c:	ee07 3a10 	vmov	s14, r3
 801a530:	ee66 6a84 	vmul.f32	s13, s13, s8
 801a534:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801a538:	ee65 6a66 	vnmul.f32	s13, s10, s13
 801a53c:	ee27 7a04 	vmul.f32	s14, s14, s8
 801a540:	eee5 6a87 	vfma.f32	s13, s11, s14
 801a544:	ee66 6a83 	vmul.f32	s13, s13, s6
 801a548:	edc0 6a0b 	vstr	s13, [r0, #44]	@ 0x2c
 801a54c:	6a8c      	ldr	r4, [r1, #40]	@ 0x28
 801a54e:	694a      	ldr	r2, [r1, #20]
 801a550:	1b13      	subs	r3, r2, r4
 801a552:	ee07 3a10 	vmov	s14, r3
 801a556:	680b      	ldr	r3, [r1, #0]
 801a558:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801a55c:	1b1b      	subs	r3, r3, r4
 801a55e:	ee27 7a04 	vmul.f32	s14, s14, s8
 801a562:	ee25 5a47 	vnmul.f32	s10, s10, s14
 801a566:	ee07 3a10 	vmov	s14, r3
 801a56a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801a56e:	ee27 7a04 	vmul.f32	s14, s14, s8
 801a572:	eea5 5a87 	vfma.f32	s10, s11, s14
 801a576:	edd0 5a08 	vldr	s11, [r0, #32]
 801a57a:	ee31 1a65 	vsub.f32	s2, s2, s11
 801a57e:	ee72 5ae5 	vsub.f32	s11, s5, s11
 801a582:	ee25 5a06 	vmul.f32	s10, s10, s12
 801a586:	ed80 5a0c 	vstr	s10, [r0, #48]	@ 0x30
 801a58a:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 801a58c:	698b      	ldr	r3, [r1, #24]
 801a58e:	1a9b      	subs	r3, r3, r2
 801a590:	ee07 3a10 	vmov	s14, r3
 801a594:	684b      	ldr	r3, [r1, #4]
 801a596:	1a9b      	subs	r3, r3, r2
 801a598:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801a59c:	ee01 3a90 	vmov	s3, r3
 801a5a0:	ee27 7a04 	vmul.f32	s14, s14, s8
 801a5a4:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 801a5a8:	ee25 7ac7 	vnmul.f32	s14, s11, s14
 801a5ac:	ee61 1a84 	vmul.f32	s3, s3, s8
 801a5b0:	eea1 7a21 	vfma.f32	s14, s2, s3
 801a5b4:	ee27 7a03 	vmul.f32	s14, s14, s6
 801a5b8:	ed80 7a0d 	vstr	s14, [r0, #52]	@ 0x34
 801a5bc:	6a8c      	ldr	r4, [r1, #40]	@ 0x28
 801a5be:	694a      	ldr	r2, [r1, #20]
 801a5c0:	1b13      	subs	r3, r2, r4
 801a5c2:	ee03 3a10 	vmov	s6, r3
 801a5c6:	680b      	ldr	r3, [r1, #0]
 801a5c8:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 801a5cc:	1b1b      	subs	r3, r3, r4
 801a5ce:	ee23 3a04 	vmul.f32	s6, s6, s8
 801a5d2:	ee65 5ac3 	vnmul.f32	s11, s11, s6
 801a5d6:	ee03 3a10 	vmov	s6, r3
 801a5da:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 801a5de:	ee23 4a04 	vmul.f32	s8, s6, s8
 801a5e2:	eee1 5a04 	vfma.f32	s11, s2, s8
 801a5e6:	ee25 6a86 	vmul.f32	s12, s11, s12
 801a5ea:	ee62 5a67 	vnmul.f32	s11, s4, s15
 801a5ee:	ed80 6a0e 	vstr	s12, [r0, #56]	@ 0x38
 801a5f2:	eee3 5aa6 	vfma.f32	s11, s7, s13
 801a5f6:	eef5 5ac0 	vcmpe.f32	s11, #0.0
 801a5fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a5fe:	dd13      	ble.n	801a628 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x224>
 801a600:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 801a604:	ee62 7ae7 	vnmul.f32	s15, s5, s15
 801a608:	63c3      	str	r3, [r0, #60]	@ 0x3c
 801a60a:	eee3 7a87 	vfma.f32	s15, s7, s14
 801a60e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801a612:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a616:	dd15      	ble.n	801a644 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x240>
 801a618:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 801a61c:	6403      	str	r3, [r0, #64]	@ 0x40
 801a61e:	bd70      	pop	{r4, r5, r6, pc}
 801a620:	4623      	mov	r3, r4
 801a622:	e6fd      	b.n	801a420 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 801a624:	462a      	mov	r2, r5
 801a626:	e706      	b.n	801a436 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 801a628:	d502      	bpl.n	801a630 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x22c>
 801a62a:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 801a62e:	e7e9      	b.n	801a604 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x200>
 801a630:	ee22 2a64 	vnmul.f32	s4, s4, s9
 801a634:	eea3 2a85 	vfma.f32	s4, s7, s10
 801a638:	eeb5 2ac0 	vcmpe.f32	s4, #0.0
 801a63c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a640:	dade      	bge.n	801a600 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1fc>
 801a642:	e7f2      	b.n	801a62a <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x226>
 801a644:	d502      	bpl.n	801a64c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x248>
 801a646:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 801a64a:	e7e7      	b.n	801a61c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x218>
 801a64c:	ee62 4ae4 	vnmul.f32	s9, s5, s9
 801a650:	eee3 4a86 	vfma.f32	s9, s7, s12
 801a654:	eef5 4ac0 	vcmpe.f32	s9, #0.0
 801a658:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a65c:	dadc      	bge.n	801a618 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x214>
 801a65e:	e7f2      	b.n	801a646 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x242>
 801a660:	3d800000 	.word	0x3d800000

0801a664 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>:
 801a664:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a668:	2714      	movs	r7, #20
 801a66a:	435f      	muls	r7, r3
 801a66c:	eb02 0c07 	add.w	ip, r2, r7
 801a670:	f8dc 5004 	ldr.w	r5, [ip, #4]
 801a674:	f115 0e0f 	adds.w	lr, r5, #15
 801a678:	f100 80a2 	bmi.w	801a7c0 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x15c>
 801a67c:	ea4f 1e2e 	mov.w	lr, lr, asr #4
 801a680:	9c08      	ldr	r4, [sp, #32]
 801a682:	2614      	movs	r6, #20
 801a684:	f8c0 e014 	str.w	lr, [r0, #20]
 801a688:	4366      	muls	r6, r4
 801a68a:	eb02 0806 	add.w	r8, r2, r6
 801a68e:	f8d8 5004 	ldr.w	r5, [r8, #4]
 801a692:	f115 040f 	adds.w	r4, r5, #15
 801a696:	f100 809f 	bmi.w	801a7d8 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x174>
 801a69a:	1124      	asrs	r4, r4, #4
 801a69c:	eba4 040e 	sub.w	r4, r4, lr
 801a6a0:	6184      	str	r4, [r0, #24]
 801a6a2:	2c00      	cmp	r4, #0
 801a6a4:	f000 808a 	beq.w	801a7bc <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x158>
 801a6a8:	f8dc 9004 	ldr.w	r9, [ip, #4]
 801a6ac:	f8d8 4004 	ldr.w	r4, [r8, #4]
 801a6b0:	5995      	ldr	r5, [r2, r6]
 801a6b2:	eba4 0809 	sub.w	r8, r4, r9
 801a6b6:	59d4      	ldr	r4, [r2, r7]
 801a6b8:	eba5 0a04 	sub.w	sl, r5, r4
 801a6bc:	ea4f 1608 	mov.w	r6, r8, lsl #4
 801a6c0:	ea4f 150a 	mov.w	r5, sl, lsl #4
 801a6c4:	fb0e fe05 	mul.w	lr, lr, r5
 801a6c8:	fb0a ee19 	mls	lr, sl, r9, lr
 801a6cc:	fb08 e404 	mla	r4, r8, r4, lr
 801a6d0:	3c01      	subs	r4, #1
 801a6d2:	19a4      	adds	r4, r4, r6
 801a6d4:	f100 808c 	bmi.w	801a7f0 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x18c>
 801a6d8:	fb94 fef6 	sdiv	lr, r4, r6
 801a6dc:	fb06 441e 	mls	r4, r6, lr, r4
 801a6e0:	f8c0 e000 	str.w	lr, [r0]
 801a6e4:	6104      	str	r4, [r0, #16]
 801a6e6:	2d00      	cmp	r5, #0
 801a6e8:	f2c0 8095 	blt.w	801a816 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1b2>
 801a6ec:	fb95 f4f6 	sdiv	r4, r5, r6
 801a6f0:	fb06 5514 	mls	r5, r6, r4, r5
 801a6f4:	6044      	str	r4, [r0, #4]
 801a6f6:	6085      	str	r5, [r0, #8]
 801a6f8:	60c6      	str	r6, [r0, #12]
 801a6fa:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 801a6fe:	f8dc 4004 	ldr.w	r4, [ip, #4]
 801a702:	6945      	ldr	r5, [r0, #20]
 801a704:	59d2      	ldr	r2, [r2, r7]
 801a706:	ebc4 1405 	rsb	r4, r4, r5, lsl #4
 801a70a:	eddf 6a4b 	vldr	s13, [pc, #300]	@ 801a838 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1d4>
 801a70e:	ed91 6a0a 	vldr	s12, [r1, #40]	@ 0x28
 801a712:	ee07 4a10 	vmov	s14, r4
 801a716:	6804      	ldr	r4, [r0, #0]
 801a718:	ebc2 1204 	rsb	r2, r2, r4, lsl #4
 801a71c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801a720:	ee07 2a90 	vmov	s15, r2
 801a724:	ee27 7a26 	vmul.f32	s14, s14, s13
 801a728:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801a72c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801a730:	edd3 6a00 	vldr	s13, [r3]
 801a734:	eee6 6a07 	vfma.f32	s13, s12, s14
 801a738:	ed91 6a09 	vldr	s12, [r1, #36]	@ 0x24
 801a73c:	eee6 6a27 	vfma.f32	s13, s12, s15
 801a740:	edc0 6a07 	vstr	s13, [r0, #28]
 801a744:	edd0 6a01 	vldr	s13, [r0, #4]
 801a748:	edd1 5a09 	vldr	s11, [r1, #36]	@ 0x24
 801a74c:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801a750:	ed91 6a0a 	vldr	s12, [r1, #40]	@ 0x28
 801a754:	eea6 6aa5 	vfma.f32	s12, s13, s11
 801a758:	ed80 6a08 	vstr	s12, [r0, #32]
 801a75c:	6a4a      	ldr	r2, [r1, #36]	@ 0x24
 801a75e:	6242      	str	r2, [r0, #36]	@ 0x24
 801a760:	edd1 5a0c 	vldr	s11, [r1, #48]	@ 0x30
 801a764:	ed93 6a03 	vldr	s12, [r3, #12]
 801a768:	eea5 6a87 	vfma.f32	s12, s11, s14
 801a76c:	edd1 5a0b 	vldr	s11, [r1, #44]	@ 0x2c
 801a770:	eea5 6aa7 	vfma.f32	s12, s11, s15
 801a774:	ed80 6a0a 	vstr	s12, [r0, #40]	@ 0x28
 801a778:	edd1 5a0b 	vldr	s11, [r1, #44]	@ 0x2c
 801a77c:	ed91 6a0c 	vldr	s12, [r1, #48]	@ 0x30
 801a780:	eea6 6aa5 	vfma.f32	s12, s13, s11
 801a784:	ed80 6a0b 	vstr	s12, [r0, #44]	@ 0x2c
 801a788:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 801a78a:	6302      	str	r2, [r0, #48]	@ 0x30
 801a78c:	ed93 6a06 	vldr	s12, [r3, #24]
 801a790:	edd1 5a0e 	vldr	s11, [r1, #56]	@ 0x38
 801a794:	eea5 6a87 	vfma.f32	s12, s11, s14
 801a798:	eeb0 7a46 	vmov.f32	s14, s12
 801a79c:	ed91 6a0d 	vldr	s12, [r1, #52]	@ 0x34
 801a7a0:	eea6 7a27 	vfma.f32	s14, s12, s15
 801a7a4:	ed80 7a0d 	vstr	s14, [r0, #52]	@ 0x34
 801a7a8:	ed91 7a0d 	vldr	s14, [r1, #52]	@ 0x34
 801a7ac:	edd1 7a0e 	vldr	s15, [r1, #56]	@ 0x38
 801a7b0:	eee6 7a87 	vfma.f32	s15, s13, s14
 801a7b4:	edc0 7a0e 	vstr	s15, [r0, #56]	@ 0x38
 801a7b8:	6b4b      	ldr	r3, [r1, #52]	@ 0x34
 801a7ba:	63c3      	str	r3, [r0, #60]	@ 0x3c
 801a7bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a7c0:	2410      	movs	r4, #16
 801a7c2:	f1c5 0501 	rsb	r5, r5, #1
 801a7c6:	fb9e fef4 	sdiv	lr, lr, r4
 801a7ca:	f015 050f 	ands.w	r5, r5, #15
 801a7ce:	bf18      	it	ne
 801a7d0:	2501      	movne	r5, #1
 801a7d2:	ebae 0e05 	sub.w	lr, lr, r5
 801a7d6:	e753      	b.n	801a680 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1c>
 801a7d8:	f04f 0910 	mov.w	r9, #16
 801a7dc:	f1c5 0501 	rsb	r5, r5, #1
 801a7e0:	fb94 f4f9 	sdiv	r4, r4, r9
 801a7e4:	f015 050f 	ands.w	r5, r5, #15
 801a7e8:	bf18      	it	ne
 801a7ea:	2501      	movne	r5, #1
 801a7ec:	1b64      	subs	r4, r4, r5
 801a7ee:	e755      	b.n	801a69c <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x38>
 801a7f0:	4264      	negs	r4, r4
 801a7f2:	fb94 fef6 	sdiv	lr, r4, r6
 801a7f6:	f1ce 0800 	rsb	r8, lr, #0
 801a7fa:	fb06 441e 	mls	r4, r6, lr, r4
 801a7fe:	f8c0 8000 	str.w	r8, [r0]
 801a802:	6104      	str	r4, [r0, #16]
 801a804:	2c00      	cmp	r4, #0
 801a806:	f43f af6e 	beq.w	801a6e6 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x82>
 801a80a:	ea6f 0e0e 	mvn.w	lr, lr
 801a80e:	1b34      	subs	r4, r6, r4
 801a810:	f8c0 e000 	str.w	lr, [r0]
 801a814:	e766      	b.n	801a6e4 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x80>
 801a816:	426d      	negs	r5, r5
 801a818:	fb95 f4f6 	sdiv	r4, r5, r6
 801a81c:	f1c4 0e00 	rsb	lr, r4, #0
 801a820:	fb06 5514 	mls	r5, r6, r4, r5
 801a824:	f8c0 e004 	str.w	lr, [r0, #4]
 801a828:	6085      	str	r5, [r0, #8]
 801a82a:	2d00      	cmp	r5, #0
 801a82c:	f43f af64 	beq.w	801a6f8 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x94>
 801a830:	43e4      	mvns	r4, r4
 801a832:	1b75      	subs	r5, r6, r5
 801a834:	6044      	str	r4, [r0, #4]
 801a836:	e75e      	b.n	801a6f6 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x92>
 801a838:	3d800000 	.word	0x3d800000

0801a83c <_ZN8touchgfx7Unicode6strlenEPKt>:
 801a83c:	4602      	mov	r2, r0
 801a83e:	b148      	cbz	r0, 801a854 <_ZN8touchgfx7Unicode6strlenEPKt+0x18>
 801a840:	2300      	movs	r3, #0
 801a842:	b298      	uxth	r0, r3
 801a844:	3301      	adds	r3, #1
 801a846:	eb02 0143 	add.w	r1, r2, r3, lsl #1
 801a84a:	f831 1c02 	ldrh.w	r1, [r1, #-2]
 801a84e:	2900      	cmp	r1, #0
 801a850:	d1f7      	bne.n	801a842 <_ZN8touchgfx7Unicode6strlenEPKt+0x6>
 801a852:	4770      	bx	lr
 801a854:	4770      	bx	lr

0801a856 <_ZN8touchgfx7Unicode7strncpyEPtPKct>:
 801a856:	b530      	push	{r4, r5, lr}
 801a858:	4604      	mov	r4, r0
 801a85a:	b159      	cbz	r1, 801a874 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1e>
 801a85c:	b148      	cbz	r0, 801a872 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>
 801a85e:	2300      	movs	r3, #0
 801a860:	b298      	uxth	r0, r3
 801a862:	4282      	cmp	r2, r0
 801a864:	d905      	bls.n	801a872 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>
 801a866:	5ccd      	ldrb	r5, [r1, r3]
 801a868:	f824 5013 	strh.w	r5, [r4, r3, lsl #1]
 801a86c:	3301      	adds	r3, #1
 801a86e:	2d00      	cmp	r5, #0
 801a870:	d1f6      	bne.n	801a860 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0xa>
 801a872:	bd30      	pop	{r4, r5, pc}
 801a874:	4608      	mov	r0, r1
 801a876:	e7fc      	b.n	801a872 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>

0801a878 <_ZN8touchgfx7Unicode4itoaElPtti.part.2>:
 801a878:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a87a:	b08b      	sub	sp, #44	@ 0x2c
 801a87c:	468c      	mov	ip, r1
 801a87e:	4604      	mov	r4, r0
 801a880:	2100      	movs	r1, #0
 801a882:	261f      	movs	r6, #31
 801a884:	af01      	add	r7, sp, #4
 801a886:	f88d 1024 	strb.w	r1, [sp, #36]	@ 0x24
 801a88a:	1e71      	subs	r1, r6, #1
 801a88c:	fb94 fef3 	sdiv	lr, r4, r3
 801a890:	fb03 441e 	mls	r4, r3, lr, r4
 801a894:	ea84 75e4 	eor.w	r5, r4, r4, asr #31
 801a898:	eba5 75e4 	sub.w	r5, r5, r4, asr #31
 801a89c:	b2ec      	uxtb	r4, r5
 801a89e:	2d09      	cmp	r5, #9
 801a8a0:	bfd4      	ite	le
 801a8a2:	3430      	addle	r4, #48	@ 0x30
 801a8a4:	3457      	addgt	r4, #87	@ 0x57
 801a8a6:	b2e4      	uxtb	r4, r4
 801a8a8:	55bc      	strb	r4, [r7, r6]
 801a8aa:	4674      	mov	r4, lr
 801a8ac:	b974      	cbnz	r4, 801a8cc <_ZN8touchgfx7Unicode4itoaElPtti.part.2+0x54>
 801a8ae:	2800      	cmp	r0, #0
 801a8b0:	da05      	bge.n	801a8be <_ZN8touchgfx7Unicode4itoaElPtti.part.2+0x46>
 801a8b2:	ab0a      	add	r3, sp, #40	@ 0x28
 801a8b4:	4419      	add	r1, r3
 801a8b6:	232d      	movs	r3, #45	@ 0x2d
 801a8b8:	f801 3c24 	strb.w	r3, [r1, #-36]
 801a8bc:	1eb1      	subs	r1, r6, #2
 801a8be:	3101      	adds	r1, #1
 801a8c0:	4660      	mov	r0, ip
 801a8c2:	4439      	add	r1, r7
 801a8c4:	f7ff ffc7 	bl	801a856 <_ZN8touchgfx7Unicode7strncpyEPtPKct>
 801a8c8:	b00b      	add	sp, #44	@ 0x2c
 801a8ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a8cc:	460e      	mov	r6, r1
 801a8ce:	e7dc      	b.n	801a88a <_ZN8touchgfx7Unicode4itoaElPtti.part.2+0x12>

0801a8d0 <_ZN8touchgfx7Unicode4utoaEmPtti.part.3>:
 801a8d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a8d2:	468c      	mov	ip, r1
 801a8d4:	b08b      	sub	sp, #44	@ 0x2c
 801a8d6:	2100      	movs	r1, #0
 801a8d8:	ae01      	add	r6, sp, #4
 801a8da:	f88d 1024 	strb.w	r1, [sp, #36]	@ 0x24
 801a8de:	211f      	movs	r1, #31
 801a8e0:	fbb0 f7f3 	udiv	r7, r0, r3
 801a8e4:	fb03 0517 	mls	r5, r3, r7, r0
 801a8e8:	4638      	mov	r0, r7
 801a8ea:	b2ec      	uxtb	r4, r5
 801a8ec:	2d09      	cmp	r5, #9
 801a8ee:	bfd4      	ite	le
 801a8f0:	3430      	addle	r4, #48	@ 0x30
 801a8f2:	3457      	addgt	r4, #87	@ 0x57
 801a8f4:	b2e4      	uxtb	r4, r4
 801a8f6:	558c      	strb	r4, [r1, r6]
 801a8f8:	1e4c      	subs	r4, r1, #1
 801a8fa:	b92f      	cbnz	r7, 801a908 <_ZN8touchgfx7Unicode4utoaEmPtti.part.3+0x38>
 801a8fc:	4431      	add	r1, r6
 801a8fe:	4660      	mov	r0, ip
 801a900:	f7ff ffa9 	bl	801a856 <_ZN8touchgfx7Unicode7strncpyEPtPKct>
 801a904:	b00b      	add	sp, #44	@ 0x2c
 801a906:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a908:	4621      	mov	r1, r4
 801a90a:	e7e9      	b.n	801a8e0 <_ZN8touchgfx7Unicode4utoaEmPtti.part.3+0x10>

0801a90c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt>:
 801a90c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a910:	b085      	sub	sp, #20
 801a912:	4691      	mov	r9, r2
 801a914:	6802      	ldr	r2, [r0, #0]
 801a916:	4688      	mov	r8, r1
 801a918:	461c      	mov	r4, r3
 801a91a:	f89d 1040 	ldrb.w	r1, [sp, #64]	@ 0x40
 801a91e:	f89d 3048 	ldrb.w	r3, [sp, #72]	@ 0x48
 801a922:	4683      	mov	fp, r0
 801a924:	4610      	mov	r0, r2
 801a926:	9103      	str	r1, [sp, #12]
 801a928:	9302      	str	r3, [sp, #8]
 801a92a:	9201      	str	r2, [sp, #4]
 801a92c:	f7ff ff86 	bl	801a83c <_ZN8touchgfx7Unicode6strlenEPKt>
 801a930:	f1b8 0f00 	cmp.w	r8, #0
 801a934:	bf0c      	ite	eq
 801a936:	4684      	moveq	ip, r0
 801a938:	f100 0c01 	addne.w	ip, r0, #1
 801a93c:	f1b9 0f69 	cmp.w	r9, #105	@ 0x69
 801a940:	f89d 6038 	ldrb.w	r6, [sp, #56]	@ 0x38
 801a944:	9f0f      	ldr	r7, [sp, #60]	@ 0x3c
 801a946:	fa1f fc8c 	uxth.w	ip, ip
 801a94a:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 801a94c:	f8dd a054 	ldr.w	sl, [sp, #84]	@ 0x54
 801a950:	9903      	ldr	r1, [sp, #12]
 801a952:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 801a956:	d041      	beq.n	801a9dc <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xd0>
 801a958:	d834      	bhi.n	801a9c4 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xb8>
 801a95a:	f1b9 0f63 	cmp.w	r9, #99	@ 0x63
 801a95e:	d059      	beq.n	801aa14 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x108>
 801a960:	f1b9 0f64 	cmp.w	r9, #100	@ 0x64
 801a964:	d03a      	beq.n	801a9dc <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xd0>
 801a966:	f1b9 0f58 	cmp.w	r9, #88	@ 0x58
 801a96a:	d034      	beq.n	801a9d6 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xca>
 801a96c:	2400      	movs	r4, #0
 801a96e:	f8bd 2050 	ldrh.w	r2, [sp, #80]	@ 0x50
 801a972:	3a01      	subs	r2, #1
 801a974:	b169      	cbz	r1, 801a992 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 801a976:	9911      	ldr	r1, [sp, #68]	@ 0x44
 801a978:	458c      	cmp	ip, r1
 801a97a:	da09      	bge.n	801a990 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x84>
 801a97c:	eba1 010c 	sub.w	r1, r1, ip
 801a980:	b289      	uxth	r1, r1
 801a982:	b933      	cbnz	r3, 801a992 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 801a984:	2e00      	cmp	r6, #0
 801a986:	d051      	beq.n	801aa2c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x120>
 801a988:	2800      	cmp	r0, #0
 801a98a:	d04f      	beq.n	801aa2c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x120>
 801a98c:	440c      	add	r4, r1
 801a98e:	b2a4      	uxth	r4, r4
 801a990:	2100      	movs	r1, #0
 801a992:	682b      	ldr	r3, [r5, #0]
 801a994:	4293      	cmp	r3, r2
 801a996:	da07      	bge.n	801a9a8 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x9c>
 801a998:	f1b8 0f00 	cmp.w	r8, #0
 801a99c:	d004      	beq.n	801a9a8 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x9c>
 801a99e:	f82a 8013 	strh.w	r8, [sl, r3, lsl #1]
 801a9a2:	682b      	ldr	r3, [r5, #0]
 801a9a4:	3301      	adds	r3, #1
 801a9a6:	602b      	str	r3, [r5, #0]
 801a9a8:	2730      	movs	r7, #48	@ 0x30
 801a9aa:	2c00      	cmp	r4, #0
 801a9ac:	d04e      	beq.n	801aa4c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x140>
 801a9ae:	682e      	ldr	r6, [r5, #0]
 801a9b0:	3c01      	subs	r4, #1
 801a9b2:	42b2      	cmp	r2, r6
 801a9b4:	b2a4      	uxth	r4, r4
 801a9b6:	dd49      	ble.n	801aa4c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x140>
 801a9b8:	f82a 7016 	strh.w	r7, [sl, r6, lsl #1]
 801a9bc:	682b      	ldr	r3, [r5, #0]
 801a9be:	3301      	adds	r3, #1
 801a9c0:	602b      	str	r3, [r5, #0]
 801a9c2:	e7f2      	b.n	801a9aa <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x9e>
 801a9c4:	f1b9 0f73 	cmp.w	r9, #115	@ 0x73
 801a9c8:	d01d      	beq.n	801aa06 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xfa>
 801a9ca:	f1b9 0f78 	cmp.w	r9, #120	@ 0x78
 801a9ce:	d002      	beq.n	801a9d6 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xca>
 801a9d0:	f1b9 0f6f 	cmp.w	r9, #111	@ 0x6f
 801a9d4:	e7c9      	b.n	801a96a <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x5e>
 801a9d6:	4684      	mov	ip, r0
 801a9d8:	f04f 0800 	mov.w	r8, #0
 801a9dc:	2c00      	cmp	r4, #0
 801a9de:	d0c6      	beq.n	801a96e <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 801a9e0:	b947      	cbnz	r7, 801a9f4 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xe8>
 801a9e2:	2801      	cmp	r0, #1
 801a9e4:	d106      	bne.n	801a9f4 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xe8>
 801a9e6:	8814      	ldrh	r4, [r2, #0]
 801a9e8:	2c30      	cmp	r4, #48	@ 0x30
 801a9ea:	bf02      	ittt	eq
 801a9ec:	3202      	addeq	r2, #2
 801a9ee:	4638      	moveq	r0, r7
 801a9f0:	f8cb 2000 	streq.w	r2, [fp]
 801a9f4:	45bc      	cmp	ip, r7
 801a9f6:	da14      	bge.n	801aa22 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x116>
 801a9f8:	b2bf      	uxth	r7, r7
 801a9fa:	eba7 040c 	sub.w	r4, r7, ip
 801a9fe:	46bc      	mov	ip, r7
 801aa00:	b2a4      	uxth	r4, r4
 801aa02:	2600      	movs	r6, #0
 801aa04:	e7b3      	b.n	801a96e <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 801aa06:	4684      	mov	ip, r0
 801aa08:	b16c      	cbz	r4, 801aa26 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x11a>
 801aa0a:	42b8      	cmp	r0, r7
 801aa0c:	dd00      	ble.n	801aa10 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x104>
 801aa0e:	b2b8      	uxth	r0, r7
 801aa10:	2400      	movs	r4, #0
 801aa12:	e003      	b.n	801aa1c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x110>
 801aa14:	f04f 0c01 	mov.w	ip, #1
 801aa18:	2400      	movs	r4, #0
 801aa1a:	4660      	mov	r0, ip
 801aa1c:	4626      	mov	r6, r4
 801aa1e:	46a0      	mov	r8, r4
 801aa20:	e7a5      	b.n	801a96e <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 801aa22:	2400      	movs	r4, #0
 801aa24:	e7ed      	b.n	801aa02 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xf6>
 801aa26:	4626      	mov	r6, r4
 801aa28:	46a0      	mov	r8, r4
 801aa2a:	e7a0      	b.n	801a96e <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 801aa2c:	2900      	cmp	r1, #0
 801aa2e:	d0b0      	beq.n	801a992 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 801aa30:	2720      	movs	r7, #32
 801aa32:	682e      	ldr	r6, [r5, #0]
 801aa34:	2900      	cmp	r1, #0
 801aa36:	d0ac      	beq.n	801a992 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 801aa38:	3901      	subs	r1, #1
 801aa3a:	4296      	cmp	r6, r2
 801aa3c:	b289      	uxth	r1, r1
 801aa3e:	daa7      	bge.n	801a990 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x84>
 801aa40:	f82a 7016 	strh.w	r7, [sl, r6, lsl #1]
 801aa44:	682b      	ldr	r3, [r5, #0]
 801aa46:	3301      	adds	r3, #1
 801aa48:	602b      	str	r3, [r5, #0]
 801aa4a:	e7f2      	b.n	801aa32 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x126>
 801aa4c:	b188      	cbz	r0, 801aa72 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x166>
 801aa4e:	682b      	ldr	r3, [r5, #0]
 801aa50:	3801      	subs	r0, #1
 801aa52:	429a      	cmp	r2, r3
 801aa54:	b280      	uxth	r0, r0
 801aa56:	dd0c      	ble.n	801aa72 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x166>
 801aa58:	f8db 3000 	ldr.w	r3, [fp]
 801aa5c:	1c9c      	adds	r4, r3, #2
 801aa5e:	f8cb 4000 	str.w	r4, [fp]
 801aa62:	881c      	ldrh	r4, [r3, #0]
 801aa64:	682b      	ldr	r3, [r5, #0]
 801aa66:	f82a 4013 	strh.w	r4, [sl, r3, lsl #1]
 801aa6a:	682b      	ldr	r3, [r5, #0]
 801aa6c:	3301      	adds	r3, #1
 801aa6e:	602b      	str	r3, [r5, #0]
 801aa70:	e7ec      	b.n	801aa4c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x140>
 801aa72:	2620      	movs	r6, #32
 801aa74:	b151      	cbz	r1, 801aa8c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x180>
 801aa76:	6828      	ldr	r0, [r5, #0]
 801aa78:	3901      	subs	r1, #1
 801aa7a:	4282      	cmp	r2, r0
 801aa7c:	b289      	uxth	r1, r1
 801aa7e:	dd05      	ble.n	801aa8c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x180>
 801aa80:	f82a 6010 	strh.w	r6, [sl, r0, lsl #1]
 801aa84:	682b      	ldr	r3, [r5, #0]
 801aa86:	3301      	adds	r3, #1
 801aa88:	602b      	str	r3, [r5, #0]
 801aa8a:	e7f3      	b.n	801aa74 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x168>
 801aa8c:	b005      	add	sp, #20
 801aa8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801aa92 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_>:
 801aa92:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801aa96:	2400      	movs	r4, #0
 801aa98:	e9dd 8c07 	ldrd	r8, ip, [sp, #28]
 801aa9c:	e9dd e609 	ldrd	lr, r6, [sp, #36]	@ 0x24
 801aaa0:	e9dd 750b 	ldrd	r7, r5, [sp, #44]	@ 0x2c
 801aaa4:	8014      	strh	r4, [r2, #0]
 801aaa6:	701c      	strb	r4, [r3, #0]
 801aaa8:	f888 4000 	strb.w	r4, [r8]
 801aaac:	f88c 4000 	strb.w	r4, [ip]
 801aab0:	f88e 4000 	strb.w	r4, [lr]
 801aab4:	703c      	strb	r4, [r7, #0]
 801aab6:	6804      	ldr	r4, [r0, #0]
 801aab8:	b1a4      	cbz	r4, 801aae4 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x52>
 801aaba:	8824      	ldrh	r4, [r4, #0]
 801aabc:	f04f 0901 	mov.w	r9, #1
 801aac0:	b314      	cbz	r4, 801ab08 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x76>
 801aac2:	2c2b      	cmp	r4, #43	@ 0x2b
 801aac4:	d001      	beq.n	801aaca <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x38>
 801aac6:	2c20      	cmp	r4, #32
 801aac8:	d110      	bne.n	801aaec <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x5a>
 801aaca:	8014      	strh	r4, [r2, #0]
 801aacc:	6804      	ldr	r4, [r0, #0]
 801aace:	b10c      	cbz	r4, 801aad4 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x42>
 801aad0:	3402      	adds	r4, #2
 801aad2:	6004      	str	r4, [r0, #0]
 801aad4:	680c      	ldr	r4, [r1, #0]
 801aad6:	b10c      	cbz	r4, 801aadc <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x4a>
 801aad8:	3401      	adds	r4, #1
 801aada:	600c      	str	r4, [r1, #0]
 801aadc:	6804      	ldr	r4, [r0, #0]
 801aade:	b17c      	cbz	r4, 801ab00 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x6e>
 801aae0:	8824      	ldrh	r4, [r4, #0]
 801aae2:	e7ed      	b.n	801aac0 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x2e>
 801aae4:	680c      	ldr	r4, [r1, #0]
 801aae6:	b17c      	cbz	r4, 801ab08 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x76>
 801aae8:	7824      	ldrb	r4, [r4, #0]
 801aaea:	e7e7      	b.n	801aabc <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x2a>
 801aaec:	2c2d      	cmp	r4, #45	@ 0x2d
 801aaee:	d102      	bne.n	801aaf6 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x64>
 801aaf0:	f883 9000 	strb.w	r9, [r3]
 801aaf4:	e7ea      	b.n	801aacc <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x3a>
 801aaf6:	2c23      	cmp	r4, #35	@ 0x23
 801aaf8:	d107      	bne.n	801ab0a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x78>
 801aafa:	f888 9000 	strb.w	r9, [r8]
 801aafe:	e7e5      	b.n	801aacc <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x3a>
 801ab00:	680c      	ldr	r4, [r1, #0]
 801ab02:	b10c      	cbz	r4, 801ab08 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x76>
 801ab04:	7824      	ldrb	r4, [r4, #0]
 801ab06:	e7db      	b.n	801aac0 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x2e>
 801ab08:	2400      	movs	r4, #0
 801ab0a:	f1a4 0330 	sub.w	r3, r4, #48	@ 0x30
 801ab0e:	2b09      	cmp	r3, #9
 801ab10:	d901      	bls.n	801ab16 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x84>
 801ab12:	2c2a      	cmp	r4, #42	@ 0x2a
 801ab14:	d122      	bne.n	801ab5c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xca>
 801ab16:	2301      	movs	r3, #1
 801ab18:	2c30      	cmp	r4, #48	@ 0x30
 801ab1a:	f88e 3000 	strb.w	r3, [lr]
 801ab1e:	d10d      	bne.n	801ab3c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xaa>
 801ab20:	f88c 3000 	strb.w	r3, [ip]
 801ab24:	6803      	ldr	r3, [r0, #0]
 801ab26:	b10b      	cbz	r3, 801ab2c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x9a>
 801ab28:	3302      	adds	r3, #2
 801ab2a:	6003      	str	r3, [r0, #0]
 801ab2c:	680b      	ldr	r3, [r1, #0]
 801ab2e:	b10b      	cbz	r3, 801ab34 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xa2>
 801ab30:	3301      	adds	r3, #1
 801ab32:	600b      	str	r3, [r1, #0]
 801ab34:	6803      	ldr	r3, [r0, #0]
 801ab36:	2b00      	cmp	r3, #0
 801ab38:	d02f      	beq.n	801ab9a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x108>
 801ab3a:	881c      	ldrh	r4, [r3, #0]
 801ab3c:	2c2a      	cmp	r4, #42	@ 0x2a
 801ab3e:	d135      	bne.n	801abac <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x11a>
 801ab40:	f04f 33ff 	mov.w	r3, #4294967295
 801ab44:	6033      	str	r3, [r6, #0]
 801ab46:	6803      	ldr	r3, [r0, #0]
 801ab48:	b10b      	cbz	r3, 801ab4e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xbc>
 801ab4a:	3302      	adds	r3, #2
 801ab4c:	6003      	str	r3, [r0, #0]
 801ab4e:	680b      	ldr	r3, [r1, #0]
 801ab50:	b10b      	cbz	r3, 801ab56 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xc4>
 801ab52:	3301      	adds	r3, #1
 801ab54:	600b      	str	r3, [r1, #0]
 801ab56:	6803      	ldr	r3, [r0, #0]
 801ab58:	b31b      	cbz	r3, 801aba2 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x110>
 801ab5a:	881c      	ldrh	r4, [r3, #0]
 801ab5c:	2c2e      	cmp	r4, #46	@ 0x2e
 801ab5e:	d11a      	bne.n	801ab96 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>
 801ab60:	2301      	movs	r3, #1
 801ab62:	703b      	strb	r3, [r7, #0]
 801ab64:	6803      	ldr	r3, [r0, #0]
 801ab66:	b10b      	cbz	r3, 801ab6c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xda>
 801ab68:	3302      	adds	r3, #2
 801ab6a:	6003      	str	r3, [r0, #0]
 801ab6c:	680b      	ldr	r3, [r1, #0]
 801ab6e:	b10b      	cbz	r3, 801ab74 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xe2>
 801ab70:	3301      	adds	r3, #1
 801ab72:	600b      	str	r3, [r1, #0]
 801ab74:	6803      	ldr	r3, [r0, #0]
 801ab76:	2b00      	cmp	r3, #0
 801ab78:	d036      	beq.n	801abe8 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x156>
 801ab7a:	881b      	ldrh	r3, [r3, #0]
 801ab7c:	2b2a      	cmp	r3, #42	@ 0x2a
 801ab7e:	d137      	bne.n	801abf0 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x15e>
 801ab80:	f04f 33ff 	mov.w	r3, #4294967295
 801ab84:	602b      	str	r3, [r5, #0]
 801ab86:	6803      	ldr	r3, [r0, #0]
 801ab88:	b10b      	cbz	r3, 801ab8e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xfc>
 801ab8a:	3302      	adds	r3, #2
 801ab8c:	6003      	str	r3, [r0, #0]
 801ab8e:	680b      	ldr	r3, [r1, #0]
 801ab90:	b10b      	cbz	r3, 801ab96 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>
 801ab92:	3301      	adds	r3, #1
 801ab94:	600b      	str	r3, [r1, #0]
 801ab96:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801ab9a:	680c      	ldr	r4, [r1, #0]
 801ab9c:	b134      	cbz	r4, 801abac <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x11a>
 801ab9e:	7824      	ldrb	r4, [r4, #0]
 801aba0:	e7cc      	b.n	801ab3c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xaa>
 801aba2:	680b      	ldr	r3, [r1, #0]
 801aba4:	2b00      	cmp	r3, #0
 801aba6:	d0f6      	beq.n	801ab96 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>
 801aba8:	781c      	ldrb	r4, [r3, #0]
 801abaa:	e7d7      	b.n	801ab5c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xca>
 801abac:	2300      	movs	r3, #0
 801abae:	220a      	movs	r2, #10
 801abb0:	6033      	str	r3, [r6, #0]
 801abb2:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 801abb6:	fa1f f38c 	uxth.w	r3, ip
 801abba:	2b09      	cmp	r3, #9
 801abbc:	d8ce      	bhi.n	801ab5c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xca>
 801abbe:	6833      	ldr	r3, [r6, #0]
 801abc0:	fb02 c303 	mla	r3, r2, r3, ip
 801abc4:	6033      	str	r3, [r6, #0]
 801abc6:	6803      	ldr	r3, [r0, #0]
 801abc8:	b10b      	cbz	r3, 801abce <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x13c>
 801abca:	3302      	adds	r3, #2
 801abcc:	6003      	str	r3, [r0, #0]
 801abce:	680b      	ldr	r3, [r1, #0]
 801abd0:	b10b      	cbz	r3, 801abd6 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x144>
 801abd2:	3301      	adds	r3, #1
 801abd4:	600b      	str	r3, [r1, #0]
 801abd6:	6803      	ldr	r3, [r0, #0]
 801abd8:	b10b      	cbz	r3, 801abde <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x14c>
 801abda:	881c      	ldrh	r4, [r3, #0]
 801abdc:	e7e9      	b.n	801abb2 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x120>
 801abde:	680c      	ldr	r4, [r1, #0]
 801abe0:	2c00      	cmp	r4, #0
 801abe2:	d0e6      	beq.n	801abb2 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x120>
 801abe4:	7824      	ldrb	r4, [r4, #0]
 801abe6:	e7e4      	b.n	801abb2 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x120>
 801abe8:	680b      	ldr	r3, [r1, #0]
 801abea:	b10b      	cbz	r3, 801abf0 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x15e>
 801abec:	781b      	ldrb	r3, [r3, #0]
 801abee:	e7c5      	b.n	801ab7c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xea>
 801abf0:	2200      	movs	r2, #0
 801abf2:	240a      	movs	r4, #10
 801abf4:	602a      	str	r2, [r5, #0]
 801abf6:	3b30      	subs	r3, #48	@ 0x30
 801abf8:	682a      	ldr	r2, [r5, #0]
 801abfa:	b29e      	uxth	r6, r3
 801abfc:	2e09      	cmp	r6, #9
 801abfe:	d813      	bhi.n	801ac28 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x196>
 801ac00:	fb04 3302 	mla	r3, r4, r2, r3
 801ac04:	602b      	str	r3, [r5, #0]
 801ac06:	6803      	ldr	r3, [r0, #0]
 801ac08:	b10b      	cbz	r3, 801ac0e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x17c>
 801ac0a:	3302      	adds	r3, #2
 801ac0c:	6003      	str	r3, [r0, #0]
 801ac0e:	680b      	ldr	r3, [r1, #0]
 801ac10:	b10b      	cbz	r3, 801ac16 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x184>
 801ac12:	3301      	adds	r3, #1
 801ac14:	600b      	str	r3, [r1, #0]
 801ac16:	6803      	ldr	r3, [r0, #0]
 801ac18:	b10b      	cbz	r3, 801ac1e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x18c>
 801ac1a:	881b      	ldrh	r3, [r3, #0]
 801ac1c:	e7eb      	b.n	801abf6 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x164>
 801ac1e:	680b      	ldr	r3, [r1, #0]
 801ac20:	2b00      	cmp	r3, #0
 801ac22:	d0e8      	beq.n	801abf6 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x164>
 801ac24:	781b      	ldrb	r3, [r3, #0]
 801ac26:	e7e6      	b.n	801abf6 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x164>
 801ac28:	2a06      	cmp	r2, #6
 801ac2a:	bfa8      	it	ge
 801ac2c:	2206      	movge	r2, #6
 801ac2e:	602a      	str	r2, [r5, #0]
 801ac30:	e7b1      	b.n	801ab96 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>

0801ac32 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list>:
 801ac32:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ac36:	b0a3      	sub	sp, #140	@ 0x8c
 801ac38:	2600      	movs	r6, #0
 801ac3a:	4607      	mov	r7, r0
 801ac3c:	4688      	mov	r8, r1
 801ac3e:	f10d 0944 	add.w	r9, sp, #68	@ 0x44
 801ac42:	4631      	mov	r1, r6
 801ac44:	9c2c      	ldr	r4, [sp, #176]	@ 0xb0
 801ac46:	4648      	mov	r0, r9
 801ac48:	960d      	str	r6, [sp, #52]	@ 0x34
 801ac4a:	e9cd 3208 	strd	r3, r2, [sp, #32]
 801ac4e:	2242      	movs	r2, #66	@ 0x42
 801ac50:	f00c fdb2 	bl	80277b8 <memset>
 801ac54:	b15f      	cbz	r7, 801ac6e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x3c>
 801ac56:	f108 3aff 	add.w	sl, r8, #4294967295
 801ac5a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801ac5c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801ac5e:	b152      	cbz	r2, 801ac76 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x44>
 801ac60:	8812      	ldrh	r2, [r2, #0]
 801ac62:	b10a      	cbz	r2, 801ac68 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x36>
 801ac64:	459a      	cmp	sl, r3
 801ac66:	dc2e      	bgt.n	801acc6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x94>
 801ac68:	2200      	movs	r2, #0
 801ac6a:	f827 2013 	strh.w	r2, [r7, r3, lsl #1]
 801ac6e:	4638      	mov	r0, r7
 801ac70:	b023      	add	sp, #140	@ 0x8c
 801ac72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ac76:	9a08      	ldr	r2, [sp, #32]
 801ac78:	2a00      	cmp	r2, #0
 801ac7a:	d0f5      	beq.n	801ac68 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x36>
 801ac7c:	7812      	ldrb	r2, [r2, #0]
 801ac7e:	e7f0      	b.n	801ac62 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x30>
 801ac80:	2d00      	cmp	r5, #0
 801ac82:	d0ea      	beq.n	801ac5a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801ac84:	782a      	ldrb	r2, [r5, #0]
 801ac86:	b142      	cbz	r2, 801ac9a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x68>
 801ac88:	2a25      	cmp	r2, #37	@ 0x25
 801ac8a:	d001      	beq.n	801ac90 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x5e>
 801ac8c:	459a      	cmp	sl, r3
 801ac8e:	dc08      	bgt.n	801aca2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x70>
 801ac90:	f1bb 0f00 	cmp.w	fp, #0
 801ac94:	d121      	bne.n	801acda <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xa8>
 801ac96:	2d00      	cmp	r5, #0
 801ac98:	d0df      	beq.n	801ac5a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801ac9a:	782a      	ldrb	r2, [r5, #0]
 801ac9c:	f04f 0b00 	mov.w	fp, #0
 801aca0:	e01d      	b.n	801acde <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xac>
 801aca2:	f1bb 0f00 	cmp.w	fp, #0
 801aca6:	d077      	beq.n	801ad98 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x166>
 801aca8:	f8bb 2000 	ldrh.w	r2, [fp]
 801acac:	f827 2013 	strh.w	r2, [r7, r3, lsl #1]
 801acb0:	f1bb 0f00 	cmp.w	fp, #0
 801acb4:	d002      	beq.n	801acbc <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x8a>
 801acb6:	f10b 0202 	add.w	r2, fp, #2
 801acba:	9209      	str	r2, [sp, #36]	@ 0x24
 801acbc:	b10d      	cbz	r5, 801acc2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x90>
 801acbe:	3501      	adds	r5, #1
 801acc0:	9508      	str	r5, [sp, #32]
 801acc2:	3301      	adds	r3, #1
 801acc4:	930d      	str	r3, [sp, #52]	@ 0x34
 801acc6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801acc8:	e9dd 5b08 	ldrd	r5, fp, [sp, #32]
 801accc:	f1bb 0f00 	cmp.w	fp, #0
 801acd0:	d0d6      	beq.n	801ac80 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x4e>
 801acd2:	f8bb 2000 	ldrh.w	r2, [fp]
 801acd6:	2a00      	cmp	r2, #0
 801acd8:	d1d6      	bne.n	801ac88 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x56>
 801acda:	f8bb 2000 	ldrh.w	r2, [fp]
 801acde:	2a00      	cmp	r2, #0
 801ace0:	d0bb      	beq.n	801ac5a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801ace2:	459a      	cmp	sl, r3
 801ace4:	ddb9      	ble.n	801ac5a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801ace6:	f8ad 6032 	strh.w	r6, [sp, #50]	@ 0x32
 801acea:	f88d 602d 	strb.w	r6, [sp, #45]	@ 0x2d
 801acee:	f88d 602e 	strb.w	r6, [sp, #46]	@ 0x2e
 801acf2:	f88d 602f 	strb.w	r6, [sp, #47]	@ 0x2f
 801acf6:	f88d 6030 	strb.w	r6, [sp, #48]	@ 0x30
 801acfa:	960e      	str	r6, [sp, #56]	@ 0x38
 801acfc:	f88d 6031 	strb.w	r6, [sp, #49]	@ 0x31
 801ad00:	960f      	str	r6, [sp, #60]	@ 0x3c
 801ad02:	f1bb 0f00 	cmp.w	fp, #0
 801ad06:	d002      	beq.n	801ad0e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xdc>
 801ad08:	f10b 0302 	add.w	r3, fp, #2
 801ad0c:	9309      	str	r3, [sp, #36]	@ 0x24
 801ad0e:	b10d      	cbz	r5, 801ad14 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xe2>
 801ad10:	1c6b      	adds	r3, r5, #1
 801ad12:	9308      	str	r3, [sp, #32]
 801ad14:	ab0f      	add	r3, sp, #60	@ 0x3c
 801ad16:	f10d 0232 	add.w	r2, sp, #50	@ 0x32
 801ad1a:	a908      	add	r1, sp, #32
 801ad1c:	a809      	add	r0, sp, #36	@ 0x24
 801ad1e:	9305      	str	r3, [sp, #20]
 801ad20:	f10d 0331 	add.w	r3, sp, #49	@ 0x31
 801ad24:	9304      	str	r3, [sp, #16]
 801ad26:	ab0e      	add	r3, sp, #56	@ 0x38
 801ad28:	9303      	str	r3, [sp, #12]
 801ad2a:	ab0c      	add	r3, sp, #48	@ 0x30
 801ad2c:	9302      	str	r3, [sp, #8]
 801ad2e:	f10d 032f 	add.w	r3, sp, #47	@ 0x2f
 801ad32:	9301      	str	r3, [sp, #4]
 801ad34:	f10d 032e 	add.w	r3, sp, #46	@ 0x2e
 801ad38:	9300      	str	r3, [sp, #0]
 801ad3a:	f10d 032d 	add.w	r3, sp, #45	@ 0x2d
 801ad3e:	f7ff fea8 	bl	801aa92 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_>
 801ad42:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801ad44:	2b00      	cmp	r3, #0
 801ad46:	bfbf      	itttt	lt
 801ad48:	6823      	ldrlt	r3, [r4, #0]
 801ad4a:	3404      	addlt	r4, #4
 801ad4c:	ea23 73e3 	biclt.w	r3, r3, r3, asr #31
 801ad50:	930e      	strlt	r3, [sp, #56]	@ 0x38
 801ad52:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801ad54:	2b00      	cmp	r3, #0
 801ad56:	bfbe      	ittt	lt
 801ad58:	6823      	ldrlt	r3, [r4, #0]
 801ad5a:	3404      	addlt	r4, #4
 801ad5c:	ea23 73e3 	biclt.w	r3, r3, r3, asr #31
 801ad60:	e9dd 2108 	ldrd	r2, r1, [sp, #32]
 801ad64:	bfb8      	it	lt
 801ad66:	930f      	strlt	r3, [sp, #60]	@ 0x3c
 801ad68:	b1d9      	cbz	r1, 801ada2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x170>
 801ad6a:	880b      	ldrh	r3, [r1, #0]
 801ad6c:	2b69      	cmp	r3, #105	@ 0x69
 801ad6e:	d01f      	beq.n	801adb0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 801ad70:	d82f      	bhi.n	801add2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1a0>
 801ad72:	2b58      	cmp	r3, #88	@ 0x58
 801ad74:	d01c      	beq.n	801adb0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 801ad76:	d818      	bhi.n	801adaa <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x178>
 801ad78:	2b25      	cmp	r3, #37	@ 0x25
 801ad7a:	d034      	beq.n	801ade6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1b4>
 801ad7c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801ad7e:	e9cd 5b08 	strd	r5, fp, [sp, #32]
 801ad82:	f1bb 0f00 	cmp.w	fp, #0
 801ad86:	f000 80b7 	beq.w	801aef8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2c6>
 801ad8a:	f8bb 5000 	ldrh.w	r5, [fp]
 801ad8e:	f827 5013 	strh.w	r5, [r7, r3, lsl #1]
 801ad92:	3301      	adds	r3, #1
 801ad94:	930d      	str	r3, [sp, #52]	@ 0x34
 801ad96:	e029      	b.n	801adec <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ba>
 801ad98:	b10d      	cbz	r5, 801ad9e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x16c>
 801ad9a:	782a      	ldrb	r2, [r5, #0]
 801ad9c:	e786      	b.n	801acac <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x7a>
 801ad9e:	462a      	mov	r2, r5
 801ada0:	e784      	b.n	801acac <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x7a>
 801ada2:	2a00      	cmp	r2, #0
 801ada4:	d0ea      	beq.n	801ad7c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x14a>
 801ada6:	7813      	ldrb	r3, [r2, #0]
 801ada8:	e7e0      	b.n	801ad6c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x13a>
 801adaa:	3b63      	subs	r3, #99	@ 0x63
 801adac:	2b01      	cmp	r3, #1
 801adae:	d8e5      	bhi.n	801ad7c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x14a>
 801adb0:	f8cd 9040 	str.w	r9, [sp, #64]	@ 0x40
 801adb4:	b329      	cbz	r1, 801ae02 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1d0>
 801adb6:	880b      	ldrh	r3, [r1, #0]
 801adb8:	2b69      	cmp	r3, #105	@ 0x69
 801adba:	d063      	beq.n	801ae84 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x252>
 801adbc:	d825      	bhi.n	801ae0a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1d8>
 801adbe:	2b63      	cmp	r3, #99	@ 0x63
 801adc0:	d038      	beq.n	801ae34 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x202>
 801adc2:	2b64      	cmp	r3, #100	@ 0x64
 801adc4:	d05e      	beq.n	801ae84 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x252>
 801adc6:	2b58      	cmp	r3, #88	@ 0x58
 801adc8:	d07a      	beq.n	801aec0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28e>
 801adca:	f8ad 6044 	strh.w	r6, [sp, #68]	@ 0x44
 801adce:	4625      	mov	r5, r4
 801add0:	e036      	b.n	801ae40 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 801add2:	2b73      	cmp	r3, #115	@ 0x73
 801add4:	d0ec      	beq.n	801adb0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 801add6:	d802      	bhi.n	801adde <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ac>
 801add8:	2b6f      	cmp	r3, #111	@ 0x6f
 801adda:	d1cf      	bne.n	801ad7c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x14a>
 801addc:	e7e8      	b.n	801adb0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 801adde:	2b75      	cmp	r3, #117	@ 0x75
 801ade0:	d0e6      	beq.n	801adb0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 801ade2:	2b78      	cmp	r3, #120	@ 0x78
 801ade4:	e7f9      	b.n	801adda <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1a8>
 801ade6:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801ade8:	f827 3012 	strh.w	r3, [r7, r2, lsl #1]
 801adec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801adee:	b10b      	cbz	r3, 801adf4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1c2>
 801adf0:	3302      	adds	r3, #2
 801adf2:	9309      	str	r3, [sp, #36]	@ 0x24
 801adf4:	9b08      	ldr	r3, [sp, #32]
 801adf6:	2b00      	cmp	r3, #0
 801adf8:	f43f af2f 	beq.w	801ac5a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801adfc:	3301      	adds	r3, #1
 801adfe:	9308      	str	r3, [sp, #32]
 801ae00:	e72b      	b.n	801ac5a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801ae02:	2a00      	cmp	r2, #0
 801ae04:	d0e1      	beq.n	801adca <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x198>
 801ae06:	7813      	ldrb	r3, [r2, #0]
 801ae08:	e7d6      	b.n	801adb8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x186>
 801ae0a:	2b73      	cmp	r3, #115	@ 0x73
 801ae0c:	d036      	beq.n	801ae7c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x24a>
 801ae0e:	d807      	bhi.n	801ae20 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ee>
 801ae10:	2b6f      	cmp	r3, #111	@ 0x6f
 801ae12:	d1da      	bne.n	801adca <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x198>
 801ae14:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801ae16:	1d25      	adds	r5, r4, #4
 801ae18:	2308      	movs	r3, #8
 801ae1a:	eba8 0202 	sub.w	r2, r8, r2
 801ae1e:	e049      	b.n	801aeb4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x282>
 801ae20:	2b75      	cmp	r3, #117	@ 0x75
 801ae22:	d042      	beq.n	801aeaa <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x278>
 801ae24:	2b78      	cmp	r3, #120	@ 0x78
 801ae26:	d1d0      	bne.n	801adca <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x198>
 801ae28:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801ae2a:	1d25      	adds	r5, r4, #4
 801ae2c:	2310      	movs	r3, #16
 801ae2e:	eba8 0202 	sub.w	r2, r8, r2
 801ae32:	e03f      	b.n	801aeb4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x282>
 801ae34:	6823      	ldr	r3, [r4, #0]
 801ae36:	1d25      	adds	r5, r4, #4
 801ae38:	f8ad 6046 	strh.w	r6, [sp, #70]	@ 0x46
 801ae3c:	f8ad 3044 	strh.w	r3, [sp, #68]	@ 0x44
 801ae40:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801ae42:	f8bd 1032 	ldrh.w	r1, [sp, #50]	@ 0x32
 801ae46:	2b00      	cmp	r3, #0
 801ae48:	d051      	beq.n	801aeee <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2bc>
 801ae4a:	881a      	ldrh	r2, [r3, #0]
 801ae4c:	a80d      	add	r0, sp, #52	@ 0x34
 801ae4e:	f89d 3031 	ldrb.w	r3, [sp, #49]	@ 0x31
 801ae52:	462c      	mov	r4, r5
 801ae54:	9005      	str	r0, [sp, #20]
 801ae56:	f89d 002d 	ldrb.w	r0, [sp, #45]	@ 0x2d
 801ae5a:	9004      	str	r0, [sp, #16]
 801ae5c:	980e      	ldr	r0, [sp, #56]	@ 0x38
 801ae5e:	9003      	str	r0, [sp, #12]
 801ae60:	f89d 0030 	ldrb.w	r0, [sp, #48]	@ 0x30
 801ae64:	9002      	str	r0, [sp, #8]
 801ae66:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 801ae68:	9001      	str	r0, [sp, #4]
 801ae6a:	f89d 002f 	ldrb.w	r0, [sp, #47]	@ 0x2f
 801ae6e:	e9cd 8706 	strd	r8, r7, [sp, #24]
 801ae72:	9000      	str	r0, [sp, #0]
 801ae74:	a810      	add	r0, sp, #64	@ 0x40
 801ae76:	f7ff fd49 	bl	801a90c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt>
 801ae7a:	e7b7      	b.n	801adec <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ba>
 801ae7c:	1d25      	adds	r5, r4, #4
 801ae7e:	6823      	ldr	r3, [r4, #0]
 801ae80:	9310      	str	r3, [sp, #64]	@ 0x40
 801ae82:	e7dd      	b.n	801ae40 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 801ae84:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801ae86:	230a      	movs	r3, #10
 801ae88:	4649      	mov	r1, r9
 801ae8a:	6820      	ldr	r0, [r4, #0]
 801ae8c:	eba8 0202 	sub.w	r2, r8, r2
 801ae90:	1d25      	adds	r5, r4, #4
 801ae92:	b292      	uxth	r2, r2
 801ae94:	f7ff fcf0 	bl	801a878 <_ZN8touchgfx7Unicode4itoaElPtti.part.2>
 801ae98:	f8bd 3044 	ldrh.w	r3, [sp, #68]	@ 0x44
 801ae9c:	2b2d      	cmp	r3, #45	@ 0x2d
 801ae9e:	d1cf      	bne.n	801ae40 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 801aea0:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 801aea4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801aea6:	3302      	adds	r3, #2
 801aea8:	e7ea      	b.n	801ae80 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x24e>
 801aeaa:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801aeac:	1d25      	adds	r5, r4, #4
 801aeae:	230a      	movs	r3, #10
 801aeb0:	eba8 0202 	sub.w	r2, r8, r2
 801aeb4:	b292      	uxth	r2, r2
 801aeb6:	4649      	mov	r1, r9
 801aeb8:	6820      	ldr	r0, [r4, #0]
 801aeba:	f7ff fd09 	bl	801a8d0 <_ZN8touchgfx7Unicode4utoaEmPtti.part.3>
 801aebe:	e7bf      	b.n	801ae40 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 801aec0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801aec2:	2310      	movs	r3, #16
 801aec4:	4649      	mov	r1, r9
 801aec6:	6820      	ldr	r0, [r4, #0]
 801aec8:	eba8 0202 	sub.w	r2, r8, r2
 801aecc:	1d25      	adds	r5, r4, #4
 801aece:	b292      	uxth	r2, r2
 801aed0:	f7ff fcfe 	bl	801a8d0 <_ZN8touchgfx7Unicode4utoaEmPtti.part.3>
 801aed4:	f10d 0242 	add.w	r2, sp, #66	@ 0x42
 801aed8:	f832 3f02 	ldrh.w	r3, [r2, #2]!
 801aedc:	2b00      	cmp	r3, #0
 801aede:	d0af      	beq.n	801ae40 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 801aee0:	f1a3 0161 	sub.w	r1, r3, #97	@ 0x61
 801aee4:	2919      	cmp	r1, #25
 801aee6:	d8f7      	bhi.n	801aed8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2a6>
 801aee8:	3b20      	subs	r3, #32
 801aeea:	8013      	strh	r3, [r2, #0]
 801aeec:	e7f4      	b.n	801aed8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2a6>
 801aeee:	9a08      	ldr	r2, [sp, #32]
 801aef0:	2a00      	cmp	r2, #0
 801aef2:	d0ab      	beq.n	801ae4c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x21a>
 801aef4:	7812      	ldrb	r2, [r2, #0]
 801aef6:	e7a9      	b.n	801ae4c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x21a>
 801aef8:	2d00      	cmp	r5, #0
 801aefa:	f43f af48 	beq.w	801ad8e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x15c>
 801aefe:	782d      	ldrb	r5, [r5, #0]
 801af00:	e745      	b.n	801ad8e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x15c>

0801af02 <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list>:
 801af02:	b507      	push	{r0, r1, r2, lr}
 801af04:	9300      	str	r3, [sp, #0]
 801af06:	4613      	mov	r3, r2
 801af08:	2200      	movs	r2, #0
 801af0a:	f7ff fe92 	bl	801ac32 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list>
 801af0e:	b003      	add	sp, #12
 801af10:	f85d fb04 	ldr.w	pc, [sp], #4

0801af14 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>:
 801af14:	b40c      	push	{r2, r3}
 801af16:	b507      	push	{r0, r1, r2, lr}
 801af18:	ab04      	add	r3, sp, #16
 801af1a:	f853 2b04 	ldr.w	r2, [r3], #4
 801af1e:	9301      	str	r3, [sp, #4]
 801af20:	f7ff ffef 	bl	801af02 <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list>
 801af24:	b003      	add	sp, #12
 801af26:	f85d eb04 	ldr.w	lr, [sp], #4
 801af2a:	b002      	add	sp, #8
 801af2c:	4770      	bx	lr
	...

0801af30 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>:
 801af30:	4b01      	ldr	r3, [pc, #4]	@ (801af38 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE+0x8>)
 801af32:	6018      	str	r0, [r3, #0]
 801af34:	4770      	bx	lr
 801af36:	bf00      	nop
 801af38:	24028e88 	.word	0x24028e88

0801af3c <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>:
 801af3c:	4b06      	ldr	r3, [pc, #24]	@ (801af58 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x1c>)
 801af3e:	881a      	ldrh	r2, [r3, #0]
 801af40:	4282      	cmp	r2, r0
 801af42:	d807      	bhi.n	801af54 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x18>
 801af44:	4b05      	ldr	r3, [pc, #20]	@ (801af5c <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x20>)
 801af46:	881b      	ldrh	r3, [r3, #0]
 801af48:	4413      	add	r3, r2
 801af4a:	4298      	cmp	r0, r3
 801af4c:	bfac      	ite	ge
 801af4e:	2000      	movge	r0, #0
 801af50:	2001      	movlt	r0, #1
 801af52:	4770      	bx	lr
 801af54:	2000      	movs	r0, #0
 801af56:	4770      	bx	lr
 801af58:	24028ea8 	.word	0x24028ea8
 801af5c:	24028eac 	.word	0x24028eac

0801af60 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>:
 801af60:	b508      	push	{r3, lr}
 801af62:	4601      	mov	r1, r0
 801af64:	f7ff ffea 	bl	801af3c <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>
 801af68:	b118      	cbz	r0, 801af72 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x12>
 801af6a:	4b02      	ldr	r3, [pc, #8]	@ (801af74 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x14>)
 801af6c:	681b      	ldr	r3, [r3, #0]
 801af6e:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 801af72:	bd08      	pop	{r3, pc}
 801af74:	24028e8c 	.word	0x24028e8c

0801af78 <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE>:
 801af78:	b538      	push	{r3, r4, r5, lr}
 801af7a:	4604      	mov	r4, r0
 801af7c:	f7ff ffde 	bl	801af3c <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>
 801af80:	b1d8      	cbz	r0, 801afba <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE+0x42>
 801af82:	4b0f      	ldr	r3, [pc, #60]	@ (801afc0 <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE+0x48>)
 801af84:	881b      	ldrh	r3, [r3, #0]
 801af86:	1ae4      	subs	r4, r4, r3
 801af88:	230e      	movs	r3, #14
 801af8a:	4363      	muls	r3, r4
 801af8c:	4c0d      	ldr	r4, [pc, #52]	@ (801afc4 <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE+0x4c>)
 801af8e:	6825      	ldr	r5, [r4, #0]
 801af90:	18ea      	adds	r2, r5, r3
 801af92:	7b12      	ldrb	r2, [r2, #12]
 801af94:	f012 0220 	ands.w	r2, r2, #32
 801af98:	d010      	beq.n	801afbc <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE+0x44>
 801af9a:	f9b1 2000 	ldrsh.w	r2, [r1]
 801af9e:	52ea      	strh	r2, [r5, r3]
 801afa0:	6822      	ldr	r2, [r4, #0]
 801afa2:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 801afa6:	441a      	add	r2, r3
 801afa8:	8055      	strh	r5, [r2, #2]
 801afaa:	6822      	ldr	r2, [r4, #0]
 801afac:	4413      	add	r3, r2
 801afae:	f9b1 2004 	ldrsh.w	r2, [r1, #4]
 801afb2:	809a      	strh	r2, [r3, #4]
 801afb4:	f9b1 2006 	ldrsh.w	r2, [r1, #6]
 801afb8:	80da      	strh	r2, [r3, #6]
 801afba:	bd38      	pop	{r3, r4, r5, pc}
 801afbc:	4610      	mov	r0, r2
 801afbe:	e7fc      	b.n	801afba <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE+0x42>
 801afc0:	24028ea8 	.word	0x24028ea8
 801afc4:	24028e90 	.word	0x24028e90

0801afc8 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE>:
 801afc8:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 801afcc:	4606      	mov	r6, r0
 801afce:	460c      	mov	r4, r1
 801afd0:	f7ff ffb4 	bl	801af3c <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>
 801afd4:	b918      	cbnz	r0, 801afde <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x16>
 801afd6:	2000      	movs	r0, #0
 801afd8:	b002      	add	sp, #8
 801afda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801afde:	4608      	mov	r0, r1
 801afe0:	f7f4 fd51 	bl	800fa86 <_ZNK8touchgfx4Rect7isEmptyEv>
 801afe4:	2800      	cmp	r0, #0
 801afe6:	d1f6      	bne.n	801afd6 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xe>
 801afe8:	4b3f      	ldr	r3, [pc, #252]	@ (801b0e8 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x120>)
 801afea:	f8df 9100 	ldr.w	r9, [pc, #256]	@ 801b0ec <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x124>
 801afee:	881d      	ldrh	r5, [r3, #0]
 801aff0:	f8d9 a000 	ldr.w	sl, [r9]
 801aff4:	46c8      	mov	r8, r9
 801aff6:	1b73      	subs	r3, r6, r5
 801aff8:	250e      	movs	r5, #14
 801affa:	435d      	muls	r5, r3
 801affc:	eb0a 0705 	add.w	r7, sl, r5
 801b000:	7b3b      	ldrb	r3, [r7, #12]
 801b002:	f013 0f20 	tst.w	r3, #32
 801b006:	d0e6      	beq.n	801afd6 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xe>
 801b008:	4621      	mov	r1, r4
 801b00a:	4638      	mov	r0, r7
 801b00c:	f7fc fa74 	bl	80174f8 <_ZNK8touchgfx4Rect8includesERKS0_>
 801b010:	2800      	cmp	r0, #0
 801b012:	d1e1      	bne.n	801afd8 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x10>
 801b014:	4639      	mov	r1, r7
 801b016:	4620      	mov	r0, r4
 801b018:	f7fc fa6e 	bl	80174f8 <_ZNK8touchgfx4Rect8includesERKS0_>
 801b01c:	b108      	cbz	r0, 801b022 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x5a>
 801b01e:	4621      	mov	r1, r4
 801b020:	e020      	b.n	801b064 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x9c>
 801b022:	f9b4 2000 	ldrsh.w	r2, [r4]
 801b026:	f93a 3005 	ldrsh.w	r3, [sl, r5]
 801b02a:	429a      	cmp	r2, r3
 801b02c:	d11e      	bne.n	801b06c <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xa4>
 801b02e:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 801b032:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 801b036:	429a      	cmp	r2, r3
 801b038:	d118      	bne.n	801b06c <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xa4>
 801b03a:	6820      	ldr	r0, [r4, #0]
 801b03c:	466b      	mov	r3, sp
 801b03e:	6861      	ldr	r1, [r4, #4]
 801b040:	c303      	stmia	r3!, {r0, r1}
 801b042:	4639      	mov	r1, r7
 801b044:	4668      	mov	r0, sp
 801b046:	f7fc fa7d 	bl	8017544 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801b04a:	f8d9 3000 	ldr.w	r3, [r9]
 801b04e:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 801b052:	442b      	add	r3, r5
 801b054:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 801b058:	4413      	add	r3, r2
 801b05a:	f9bd 2006 	ldrsh.w	r2, [sp, #6]
 801b05e:	4293      	cmp	r3, r2
 801b060:	dc04      	bgt.n	801b06c <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xa4>
 801b062:	4669      	mov	r1, sp
 801b064:	4630      	mov	r0, r6
 801b066:	f7ff ff87 	bl	801af78 <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE>
 801b06a:	e7b5      	b.n	801afd8 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x10>
 801b06c:	f8d8 3000 	ldr.w	r3, [r8]
 801b070:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 801b074:	442b      	add	r3, r5
 801b076:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 801b07a:	4291      	cmp	r1, r2
 801b07c:	d119      	bne.n	801b0b2 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xea>
 801b07e:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 801b082:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 801b086:	4291      	cmp	r1, r2
 801b088:	d113      	bne.n	801b0b2 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xea>
 801b08a:	6820      	ldr	r0, [r4, #0]
 801b08c:	466a      	mov	r2, sp
 801b08e:	6861      	ldr	r1, [r4, #4]
 801b090:	c203      	stmia	r2!, {r0, r1}
 801b092:	4619      	mov	r1, r3
 801b094:	4668      	mov	r0, sp
 801b096:	f7fc fa55 	bl	8017544 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801b09a:	f8d8 3000 	ldr.w	r3, [r8]
 801b09e:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 801b0a2:	442b      	add	r3, r5
 801b0a4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801b0a8:	4413      	add	r3, r2
 801b0aa:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
 801b0ae:	4293      	cmp	r3, r2
 801b0b0:	ddd7      	ble.n	801b062 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x9a>
 801b0b2:	4620      	mov	r0, r4
 801b0b4:	f7f4 fce7 	bl	800fa86 <_ZNK8touchgfx4Rect7isEmptyEv>
 801b0b8:	b990      	cbnz	r0, 801b0e0 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x118>
 801b0ba:	88a7      	ldrh	r7, [r4, #4]
 801b0bc:	88e3      	ldrh	r3, [r4, #6]
 801b0be:	fb17 f703 	smulbb	r7, r7, r3
 801b0c2:	f8d8 3000 	ldr.w	r3, [r8]
 801b0c6:	441d      	add	r5, r3
 801b0c8:	4628      	mov	r0, r5
 801b0ca:	f7f4 fcdc 	bl	800fa86 <_ZNK8touchgfx4Rect7isEmptyEv>
 801b0ce:	b948      	cbnz	r0, 801b0e4 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x11c>
 801b0d0:	88ab      	ldrh	r3, [r5, #4]
 801b0d2:	88ea      	ldrh	r2, [r5, #6]
 801b0d4:	fb13 f302 	smulbb	r3, r3, r2
 801b0d8:	42bb      	cmp	r3, r7
 801b0da:	f6bf af7c 	bge.w	801afd6 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xe>
 801b0de:	e79e      	b.n	801b01e <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x56>
 801b0e0:	2700      	movs	r7, #0
 801b0e2:	e7ee      	b.n	801b0c2 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xfa>
 801b0e4:	2300      	movs	r3, #0
 801b0e6:	e7f7      	b.n	801b0d8 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x110>
 801b0e8:	24028ea8 	.word	0x24028ea8
 801b0ec:	24028e90 	.word	0x24028e90

0801b0f0 <_ZN8touchgfx6Bitmap10clearCacheEv>:
 801b0f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b0f2:	4c24      	ldr	r4, [pc, #144]	@ (801b184 <_ZN8touchgfx6Bitmap10clearCacheEv+0x94>)
 801b0f4:	6823      	ldr	r3, [r4, #0]
 801b0f6:	2b00      	cmp	r3, #0
 801b0f8:	d042      	beq.n	801b180 <_ZN8touchgfx6Bitmap10clearCacheEv+0x90>
 801b0fa:	4a23      	ldr	r2, [pc, #140]	@ (801b188 <_ZN8touchgfx6Bitmap10clearCacheEv+0x98>)
 801b0fc:	4d23      	ldr	r5, [pc, #140]	@ (801b18c <_ZN8touchgfx6Bitmap10clearCacheEv+0x9c>)
 801b0fe:	8811      	ldrh	r1, [r2, #0]
 801b100:	f8b5 c000 	ldrh.w	ip, [r5]
 801b104:	4822      	ldr	r0, [pc, #136]	@ (801b190 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa0>)
 801b106:	4461      	add	r1, ip
 801b108:	1c4a      	adds	r2, r1, #1
 801b10a:	008f      	lsls	r7, r1, #2
 801b10c:	f022 0201 	bic.w	r2, r2, #1
 801b110:	19de      	adds	r6, r3, r7
 801b112:	0412      	lsls	r2, r2, #16
 801b114:	6006      	str	r6, [r0, #0]
 801b116:	4e1f      	ldr	r6, [pc, #124]	@ (801b194 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa4>)
 801b118:	0c12      	lsrs	r2, r2, #16
 801b11a:	eb07 0742 	add.w	r7, r7, r2, lsl #1
 801b11e:	19da      	adds	r2, r3, r7
 801b120:	6032      	str	r2, [r6, #0]
 801b122:	220e      	movs	r2, #14
 801b124:	fb02 f20c 	mul.w	r2, r2, ip
 801b128:	3203      	adds	r2, #3
 801b12a:	f022 0203 	bic.w	r2, r2, #3
 801b12e:	443a      	add	r2, r7
 801b130:	4f19      	ldr	r7, [pc, #100]	@ (801b198 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa8>)
 801b132:	4413      	add	r3, r2
 801b134:	603b      	str	r3, [r7, #0]
 801b136:	2300      	movs	r3, #0
 801b138:	4f18      	ldr	r7, [pc, #96]	@ (801b19c <_ZN8touchgfx6Bitmap10clearCacheEv+0xac>)
 801b13a:	469c      	mov	ip, r3
 801b13c:	803b      	strh	r3, [r7, #0]
 801b13e:	4f18      	ldr	r7, [pc, #96]	@ (801b1a0 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb0>)
 801b140:	683f      	ldr	r7, [r7, #0]
 801b142:	1aba      	subs	r2, r7, r2
 801b144:	4f17      	ldr	r7, [pc, #92]	@ (801b1a4 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb4>)
 801b146:	603a      	str	r2, [r7, #0]
 801b148:	f64f 77ff 	movw	r7, #65535	@ 0xffff
 801b14c:	4a16      	ldr	r2, [pc, #88]	@ (801b1a8 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb8>)
 801b14e:	8013      	strh	r3, [r2, #0]
 801b150:	428b      	cmp	r3, r1
 801b152:	d10d      	bne.n	801b170 <_ZN8touchgfx6Bitmap10clearCacheEv+0x80>
 801b154:	882d      	ldrh	r5, [r5, #0]
 801b156:	2300      	movs	r3, #0
 801b158:	6830      	ldr	r0, [r6, #0]
 801b15a:	240e      	movs	r4, #14
 801b15c:	429d      	cmp	r5, r3
 801b15e:	d90f      	bls.n	801b180 <_ZN8touchgfx6Bitmap10clearCacheEv+0x90>
 801b160:	fb04 0203 	mla	r2, r4, r3, r0
 801b164:	3301      	adds	r3, #1
 801b166:	7b11      	ldrb	r1, [r2, #12]
 801b168:	f36f 1145 	bfc	r1, #5, #1
 801b16c:	7311      	strb	r1, [r2, #12]
 801b16e:	e7f5      	b.n	801b15c <_ZN8touchgfx6Bitmap10clearCacheEv+0x6c>
 801b170:	6822      	ldr	r2, [r4, #0]
 801b172:	f842 c023 	str.w	ip, [r2, r3, lsl #2]
 801b176:	6802      	ldr	r2, [r0, #0]
 801b178:	f822 7013 	strh.w	r7, [r2, r3, lsl #1]
 801b17c:	3301      	adds	r3, #1
 801b17e:	e7e7      	b.n	801b150 <_ZN8touchgfx6Bitmap10clearCacheEv+0x60>
 801b180:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801b182:	bf00      	nop
 801b184:	24028e8c 	.word	0x24028e8c
 801b188:	24028ea8 	.word	0x24028ea8
 801b18c:	24028eac 	.word	0x24028eac
 801b190:	24028ea0 	.word	0x24028ea0
 801b194:	24028e90 	.word	0x24028e90
 801b198:	24028e98 	.word	0x24028e98
 801b19c:	24028eaa 	.word	0x24028eaa
 801b1a0:	24028e94 	.word	0x24028e94
 801b1a4:	24028ea4 	.word	0x24028ea4
 801b1a8:	24028e9c 	.word	0x24028e9c

0801b1ac <_ZN8touchgfx6Bitmap8setCacheEPtmm>:
 801b1ac:	4b06      	ldr	r3, [pc, #24]	@ (801b1c8 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x1c>)
 801b1ae:	681b      	ldr	r3, [r3, #0]
 801b1b0:	b943      	cbnz	r3, 801b1c4 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x18>
 801b1b2:	b139      	cbz	r1, 801b1c4 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x18>
 801b1b4:	4b05      	ldr	r3, [pc, #20]	@ (801b1cc <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x20>)
 801b1b6:	801a      	strh	r2, [r3, #0]
 801b1b8:	4b05      	ldr	r3, [pc, #20]	@ (801b1d0 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x24>)
 801b1ba:	6019      	str	r1, [r3, #0]
 801b1bc:	4b05      	ldr	r3, [pc, #20]	@ (801b1d4 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x28>)
 801b1be:	6018      	str	r0, [r3, #0]
 801b1c0:	f7ff bf96 	b.w	801b0f0 <_ZN8touchgfx6Bitmap10clearCacheEv>
 801b1c4:	4770      	bx	lr
 801b1c6:	bf00      	nop
 801b1c8:	24028e98 	.word	0x24028e98
 801b1cc:	24028eac 	.word	0x24028eac
 801b1d0:	24028e94 	.word	0x24028e94
 801b1d4:	24028e8c 	.word	0x24028e8c

0801b1d8 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>:
 801b1d8:	b470      	push	{r4, r5, r6}
 801b1da:	4c07      	ldr	r4, [pc, #28]	@ (801b1f8 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x20>)
 801b1dc:	4605      	mov	r5, r0
 801b1de:	4610      	mov	r0, r2
 801b1e0:	9a03      	ldr	r2, [sp, #12]
 801b1e2:	6826      	ldr	r6, [r4, #0]
 801b1e4:	b936      	cbnz	r6, 801b1f4 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x1c>
 801b1e6:	6025      	str	r5, [r4, #0]
 801b1e8:	4c04      	ldr	r4, [pc, #16]	@ (801b1fc <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x24>)
 801b1ea:	8021      	strh	r1, [r4, #0]
 801b1ec:	4619      	mov	r1, r3
 801b1ee:	bc70      	pop	{r4, r5, r6}
 801b1f0:	f7ff bfdc 	b.w	801b1ac <_ZN8touchgfx6Bitmap8setCacheEPtmm>
 801b1f4:	bc70      	pop	{r4, r5, r6}
 801b1f6:	4770      	bx	lr
 801b1f8:	24028eb0 	.word	0x24028eb0
 801b1fc:	24028ea8 	.word	0x24028ea8

0801b200 <_ZNK8touchgfx6Bitmap8getWidthEv>:
 801b200:	4a12      	ldr	r2, [pc, #72]	@ (801b24c <_ZNK8touchgfx6Bitmap8getWidthEv+0x4c>)
 801b202:	8803      	ldrh	r3, [r0, #0]
 801b204:	8812      	ldrh	r2, [r2, #0]
 801b206:	4293      	cmp	r3, r2
 801b208:	d207      	bcs.n	801b21a <_ZNK8touchgfx6Bitmap8getWidthEv+0x1a>
 801b20a:	4a11      	ldr	r2, [pc, #68]	@ (801b250 <_ZNK8touchgfx6Bitmap8getWidthEv+0x50>)
 801b20c:	2114      	movs	r1, #20
 801b20e:	6812      	ldr	r2, [r2, #0]
 801b210:	fb01 2303 	mla	r3, r1, r3, r2
 801b214:	f9b3 0008 	ldrsh.w	r0, [r3, #8]
 801b218:	4770      	bx	lr
 801b21a:	490e      	ldr	r1, [pc, #56]	@ (801b254 <_ZNK8touchgfx6Bitmap8getWidthEv+0x54>)
 801b21c:	8809      	ldrh	r1, [r1, #0]
 801b21e:	4411      	add	r1, r2
 801b220:	428b      	cmp	r3, r1
 801b222:	da04      	bge.n	801b22e <_ZNK8touchgfx6Bitmap8getWidthEv+0x2e>
 801b224:	1a9b      	subs	r3, r3, r2
 801b226:	4a0c      	ldr	r2, [pc, #48]	@ (801b258 <_ZNK8touchgfx6Bitmap8getWidthEv+0x58>)
 801b228:	210e      	movs	r1, #14
 801b22a:	6812      	ldr	r2, [r2, #0]
 801b22c:	e7f0      	b.n	801b210 <_ZNK8touchgfx6Bitmap8getWidthEv+0x10>
 801b22e:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 801b232:	4293      	cmp	r3, r2
 801b234:	d108      	bne.n	801b248 <_ZNK8touchgfx6Bitmap8getWidthEv+0x48>
 801b236:	4b09      	ldr	r3, [pc, #36]	@ (801b25c <_ZNK8touchgfx6Bitmap8getWidthEv+0x5c>)
 801b238:	781b      	ldrb	r3, [r3, #0]
 801b23a:	b91b      	cbnz	r3, 801b244 <_ZNK8touchgfx6Bitmap8getWidthEv+0x44>
 801b23c:	4b08      	ldr	r3, [pc, #32]	@ (801b260 <_ZNK8touchgfx6Bitmap8getWidthEv+0x60>)
 801b23e:	f9b3 0000 	ldrsh.w	r0, [r3]
 801b242:	4770      	bx	lr
 801b244:	4b07      	ldr	r3, [pc, #28]	@ (801b264 <_ZNK8touchgfx6Bitmap8getWidthEv+0x64>)
 801b246:	e7fa      	b.n	801b23e <_ZNK8touchgfx6Bitmap8getWidthEv+0x3e>
 801b248:	2000      	movs	r0, #0
 801b24a:	4770      	bx	lr
 801b24c:	24028ea8 	.word	0x24028ea8
 801b250:	24028eb0 	.word	0x24028eb0
 801b254:	24028eac 	.word	0x24028eac
 801b258:	24028e90 	.word	0x24028e90
 801b25c:	24028e18 	.word	0x24028e18
 801b260:	24028e1a 	.word	0x24028e1a
 801b264:	24028e1c 	.word	0x24028e1c

0801b268 <_ZNK8touchgfx6Bitmap9getHeightEv>:
 801b268:	4a12      	ldr	r2, [pc, #72]	@ (801b2b4 <_ZNK8touchgfx6Bitmap9getHeightEv+0x4c>)
 801b26a:	8803      	ldrh	r3, [r0, #0]
 801b26c:	8812      	ldrh	r2, [r2, #0]
 801b26e:	4293      	cmp	r3, r2
 801b270:	d207      	bcs.n	801b282 <_ZNK8touchgfx6Bitmap9getHeightEv+0x1a>
 801b272:	4a11      	ldr	r2, [pc, #68]	@ (801b2b8 <_ZNK8touchgfx6Bitmap9getHeightEv+0x50>)
 801b274:	2114      	movs	r1, #20
 801b276:	6812      	ldr	r2, [r2, #0]
 801b278:	fb01 2303 	mla	r3, r1, r3, r2
 801b27c:	f9b3 000a 	ldrsh.w	r0, [r3, #10]
 801b280:	4770      	bx	lr
 801b282:	490e      	ldr	r1, [pc, #56]	@ (801b2bc <_ZNK8touchgfx6Bitmap9getHeightEv+0x54>)
 801b284:	8809      	ldrh	r1, [r1, #0]
 801b286:	4411      	add	r1, r2
 801b288:	428b      	cmp	r3, r1
 801b28a:	da04      	bge.n	801b296 <_ZNK8touchgfx6Bitmap9getHeightEv+0x2e>
 801b28c:	1a9b      	subs	r3, r3, r2
 801b28e:	4a0c      	ldr	r2, [pc, #48]	@ (801b2c0 <_ZNK8touchgfx6Bitmap9getHeightEv+0x58>)
 801b290:	210e      	movs	r1, #14
 801b292:	6812      	ldr	r2, [r2, #0]
 801b294:	e7f0      	b.n	801b278 <_ZNK8touchgfx6Bitmap9getHeightEv+0x10>
 801b296:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 801b29a:	4293      	cmp	r3, r2
 801b29c:	d108      	bne.n	801b2b0 <_ZNK8touchgfx6Bitmap9getHeightEv+0x48>
 801b29e:	4b09      	ldr	r3, [pc, #36]	@ (801b2c4 <_ZNK8touchgfx6Bitmap9getHeightEv+0x5c>)
 801b2a0:	781b      	ldrb	r3, [r3, #0]
 801b2a2:	b91b      	cbnz	r3, 801b2ac <_ZNK8touchgfx6Bitmap9getHeightEv+0x44>
 801b2a4:	4b08      	ldr	r3, [pc, #32]	@ (801b2c8 <_ZNK8touchgfx6Bitmap9getHeightEv+0x60>)
 801b2a6:	f9b3 0000 	ldrsh.w	r0, [r3]
 801b2aa:	4770      	bx	lr
 801b2ac:	4b07      	ldr	r3, [pc, #28]	@ (801b2cc <_ZNK8touchgfx6Bitmap9getHeightEv+0x64>)
 801b2ae:	e7fa      	b.n	801b2a6 <_ZNK8touchgfx6Bitmap9getHeightEv+0x3e>
 801b2b0:	2000      	movs	r0, #0
 801b2b2:	4770      	bx	lr
 801b2b4:	24028ea8 	.word	0x24028ea8
 801b2b8:	24028eb0 	.word	0x24028eb0
 801b2bc:	24028eac 	.word	0x24028eac
 801b2c0:	24028e90 	.word	0x24028e90
 801b2c4:	24028e18 	.word	0x24028e18
 801b2c8:	24028e1c 	.word	0x24028e1c
 801b2cc:	24028e1a 	.word	0x24028e1a

0801b2d0 <_ZNK8touchgfx6Bitmap12getSolidRectEv>:
 801b2d0:	4a22      	ldr	r2, [pc, #136]	@ (801b35c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x8c>)
 801b2d2:	b530      	push	{r4, r5, lr}
 801b2d4:	880b      	ldrh	r3, [r1, #0]
 801b2d6:	8812      	ldrh	r2, [r2, #0]
 801b2d8:	4293      	cmp	r3, r2
 801b2da:	d213      	bcs.n	801b304 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x34>
 801b2dc:	4a20      	ldr	r2, [pc, #128]	@ (801b360 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x90>)
 801b2de:	2114      	movs	r1, #20
 801b2e0:	6812      	ldr	r2, [r2, #0]
 801b2e2:	fb01 2303 	mla	r3, r1, r3, r2
 801b2e6:	f9b3 400c 	ldrsh.w	r4, [r3, #12]
 801b2ea:	f9b3 100e 	ldrsh.w	r1, [r3, #14]
 801b2ee:	8a1a      	ldrh	r2, [r3, #16]
 801b2f0:	8a5b      	ldrh	r3, [r3, #18]
 801b2f2:	f3c2 020c 	ubfx	r2, r2, #0, #13
 801b2f6:	8004      	strh	r4, [r0, #0]
 801b2f8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801b2fc:	8041      	strh	r1, [r0, #2]
 801b2fe:	8082      	strh	r2, [r0, #4]
 801b300:	80c3      	strh	r3, [r0, #6]
 801b302:	e024      	b.n	801b34e <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x7e>
 801b304:	4917      	ldr	r1, [pc, #92]	@ (801b364 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x94>)
 801b306:	8809      	ldrh	r1, [r1, #0]
 801b308:	4411      	add	r1, r2
 801b30a:	428b      	cmp	r3, r1
 801b30c:	da10      	bge.n	801b330 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x60>
 801b30e:	1a9b      	subs	r3, r3, r2
 801b310:	220e      	movs	r2, #14
 801b312:	4353      	muls	r3, r2
 801b314:	4a14      	ldr	r2, [pc, #80]	@ (801b368 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x98>)
 801b316:	6811      	ldr	r1, [r2, #0]
 801b318:	18ca      	adds	r2, r1, r3
 801b31a:	5ecd      	ldrsh	r5, [r1, r3]
 801b31c:	f9b2 4002 	ldrsh.w	r4, [r2, #2]
 801b320:	f9b2 1004 	ldrsh.w	r1, [r2, #4]
 801b324:	f9b2 3006 	ldrsh.w	r3, [r2, #6]
 801b328:	8005      	strh	r5, [r0, #0]
 801b32a:	8044      	strh	r4, [r0, #2]
 801b32c:	8081      	strh	r1, [r0, #4]
 801b32e:	e7e7      	b.n	801b300 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x30>
 801b330:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 801b334:	4293      	cmp	r3, r2
 801b336:	d10b      	bne.n	801b350 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x80>
 801b338:	4b0c      	ldr	r3, [pc, #48]	@ (801b36c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x9c>)
 801b33a:	f9b3 1000 	ldrsh.w	r1, [r3]
 801b33e:	4b0c      	ldr	r3, [pc, #48]	@ (801b370 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa0>)
 801b340:	8081      	strh	r1, [r0, #4]
 801b342:	f9b3 2000 	ldrsh.w	r2, [r3]
 801b346:	2300      	movs	r3, #0
 801b348:	80c2      	strh	r2, [r0, #6]
 801b34a:	8003      	strh	r3, [r0, #0]
 801b34c:	8043      	strh	r3, [r0, #2]
 801b34e:	bd30      	pop	{r4, r5, pc}
 801b350:	2300      	movs	r3, #0
 801b352:	8003      	strh	r3, [r0, #0]
 801b354:	8043      	strh	r3, [r0, #2]
 801b356:	8083      	strh	r3, [r0, #4]
 801b358:	e7d2      	b.n	801b300 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x30>
 801b35a:	bf00      	nop
 801b35c:	24028ea8 	.word	0x24028ea8
 801b360:	24028eb0 	.word	0x24028eb0
 801b364:	24028eac 	.word	0x24028eac
 801b368:	24028e90 	.word	0x24028e90
 801b36c:	24028e14 	.word	0x24028e14
 801b370:	24028e16 	.word	0x24028e16

0801b374 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>:
 801b374:	4a17      	ldr	r2, [pc, #92]	@ (801b3d4 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x60>)
 801b376:	8803      	ldrh	r3, [r0, #0]
 801b378:	8812      	ldrh	r2, [r2, #0]
 801b37a:	4293      	cmp	r3, r2
 801b37c:	d213      	bcs.n	801b3a6 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x32>
 801b37e:	4a16      	ldr	r2, [pc, #88]	@ (801b3d8 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x64>)
 801b380:	2114      	movs	r1, #20
 801b382:	6812      	ldr	r2, [r2, #0]
 801b384:	fb01 2303 	mla	r3, r1, r3, r2
 801b388:	8a1a      	ldrh	r2, [r3, #16]
 801b38a:	8919      	ldrh	r1, [r3, #8]
 801b38c:	f3c2 020c 	ubfx	r2, r2, #0, #13
 801b390:	428a      	cmp	r2, r1
 801b392:	db1d      	blt.n	801b3d0 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5c>
 801b394:	8a58      	ldrh	r0, [r3, #18]
 801b396:	f3c0 000c 	ubfx	r0, r0, #0, #13
 801b39a:	895b      	ldrh	r3, [r3, #10]
 801b39c:	4298      	cmp	r0, r3
 801b39e:	bfac      	ite	ge
 801b3a0:	2000      	movge	r0, #0
 801b3a2:	2001      	movlt	r0, #1
 801b3a4:	4770      	bx	lr
 801b3a6:	490d      	ldr	r1, [pc, #52]	@ (801b3dc <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x68>)
 801b3a8:	8809      	ldrh	r1, [r1, #0]
 801b3aa:	4411      	add	r1, r2
 801b3ac:	428b      	cmp	r3, r1
 801b3ae:	da0d      	bge.n	801b3cc <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x58>
 801b3b0:	1a9b      	subs	r3, r3, r2
 801b3b2:	4a0b      	ldr	r2, [pc, #44]	@ (801b3e0 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x6c>)
 801b3b4:	210e      	movs	r1, #14
 801b3b6:	6812      	ldr	r2, [r2, #0]
 801b3b8:	fb01 2303 	mla	r3, r1, r3, r2
 801b3bc:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
 801b3c0:	891a      	ldrh	r2, [r3, #8]
 801b3c2:	4291      	cmp	r1, r2
 801b3c4:	db04      	blt.n	801b3d0 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5c>
 801b3c6:	f9b3 0006 	ldrsh.w	r0, [r3, #6]
 801b3ca:	e7e6      	b.n	801b39a <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x26>
 801b3cc:	2000      	movs	r0, #0
 801b3ce:	4770      	bx	lr
 801b3d0:	2001      	movs	r0, #1
 801b3d2:	4770      	bx	lr
 801b3d4:	24028ea8 	.word	0x24028ea8
 801b3d8:	24028eb0 	.word	0x24028eb0
 801b3dc:	24028eac 	.word	0x24028eac
 801b3e0:	24028e90 	.word	0x24028e90

0801b3e4 <_ZNK8touchgfx6Bitmap7getDataEv>:
 801b3e4:	4a12      	ldr	r2, [pc, #72]	@ (801b430 <_ZNK8touchgfx6Bitmap7getDataEv+0x4c>)
 801b3e6:	8803      	ldrh	r3, [r0, #0]
 801b3e8:	8811      	ldrh	r1, [r2, #0]
 801b3ea:	428b      	cmp	r3, r1
 801b3ec:	d20b      	bcs.n	801b406 <_ZNK8touchgfx6Bitmap7getDataEv+0x22>
 801b3ee:	4a11      	ldr	r2, [pc, #68]	@ (801b434 <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 801b3f0:	6812      	ldr	r2, [r2, #0]
 801b3f2:	b112      	cbz	r2, 801b3fa <_ZNK8touchgfx6Bitmap7getDataEv+0x16>
 801b3f4:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 801b3f8:	b9c0      	cbnz	r0, 801b42c <_ZNK8touchgfx6Bitmap7getDataEv+0x48>
 801b3fa:	4a0f      	ldr	r2, [pc, #60]	@ (801b438 <_ZNK8touchgfx6Bitmap7getDataEv+0x54>)
 801b3fc:	6811      	ldr	r1, [r2, #0]
 801b3fe:	2214      	movs	r2, #20
 801b400:	4353      	muls	r3, r2
 801b402:	58c8      	ldr	r0, [r1, r3]
 801b404:	4770      	bx	lr
 801b406:	4a0d      	ldr	r2, [pc, #52]	@ (801b43c <_ZNK8touchgfx6Bitmap7getDataEv+0x58>)
 801b408:	8812      	ldrh	r2, [r2, #0]
 801b40a:	440a      	add	r2, r1
 801b40c:	4293      	cmp	r3, r2
 801b40e:	da04      	bge.n	801b41a <_ZNK8touchgfx6Bitmap7getDataEv+0x36>
 801b410:	4a08      	ldr	r2, [pc, #32]	@ (801b434 <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 801b412:	6812      	ldr	r2, [r2, #0]
 801b414:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 801b418:	4770      	bx	lr
 801b41a:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 801b41e:	4293      	cmp	r3, r2
 801b420:	d103      	bne.n	801b42a <_ZNK8touchgfx6Bitmap7getDataEv+0x46>
 801b422:	4b07      	ldr	r3, [pc, #28]	@ (801b440 <_ZNK8touchgfx6Bitmap7getDataEv+0x5c>)
 801b424:	681b      	ldr	r3, [r3, #0]
 801b426:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 801b428:	4770      	bx	lr
 801b42a:	2000      	movs	r0, #0
 801b42c:	4770      	bx	lr
 801b42e:	bf00      	nop
 801b430:	24028ea8 	.word	0x24028ea8
 801b434:	24028e8c 	.word	0x24028e8c
 801b438:	24028eb0 	.word	0x24028eb0
 801b43c:	24028eac 	.word	0x24028eac
 801b440:	24028e20 	.word	0x24028e20

0801b444 <_ZNK8touchgfx6Bitmap12getExtraDataEv>:
 801b444:	4b24      	ldr	r3, [pc, #144]	@ (801b4d8 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x94>)
 801b446:	8802      	ldrh	r2, [r0, #0]
 801b448:	8818      	ldrh	r0, [r3, #0]
 801b44a:	4282      	cmp	r2, r0
 801b44c:	d221      	bcs.n	801b492 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x4e>
 801b44e:	4b23      	ldr	r3, [pc, #140]	@ (801b4dc <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>)
 801b450:	6819      	ldr	r1, [r3, #0]
 801b452:	2314      	movs	r3, #20
 801b454:	fb03 1302 	mla	r3, r3, r2, r1
 801b458:	6858      	ldr	r0, [r3, #4]
 801b45a:	2800      	cmp	r0, #0
 801b45c:	d03a      	beq.n	801b4d4 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 801b45e:	4920      	ldr	r1, [pc, #128]	@ (801b4e0 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 801b460:	6809      	ldr	r1, [r1, #0]
 801b462:	2900      	cmp	r1, #0
 801b464:	d036      	beq.n	801b4d4 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 801b466:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801b46a:	2900      	cmp	r1, #0
 801b46c:	d032      	beq.n	801b4d4 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 801b46e:	891a      	ldrh	r2, [r3, #8]
 801b470:	8958      	ldrh	r0, [r3, #10]
 801b472:	4350      	muls	r0, r2
 801b474:	7c5a      	ldrb	r2, [r3, #17]
 801b476:	7cdb      	ldrb	r3, [r3, #19]
 801b478:	0952      	lsrs	r2, r2, #5
 801b47a:	f3c3 1342 	ubfx	r3, r3, #5, #3
 801b47e:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 801b482:	2b0b      	cmp	r3, #11
 801b484:	bf18      	it	ne
 801b486:	0040      	lslne	r0, r0, #1
 801b488:	3003      	adds	r0, #3
 801b48a:	f020 0003 	bic.w	r0, r0, #3
 801b48e:	4408      	add	r0, r1
 801b490:	4770      	bx	lr
 801b492:	4b14      	ldr	r3, [pc, #80]	@ (801b4e4 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa0>)
 801b494:	881b      	ldrh	r3, [r3, #0]
 801b496:	4403      	add	r3, r0
 801b498:	429a      	cmp	r2, r3
 801b49a:	da1a      	bge.n	801b4d2 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 801b49c:	4b12      	ldr	r3, [pc, #72]	@ (801b4e8 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa4>)
 801b49e:	1a10      	subs	r0, r2, r0
 801b4a0:	210e      	movs	r1, #14
 801b4a2:	681b      	ldr	r3, [r3, #0]
 801b4a4:	fb01 3000 	mla	r0, r1, r0, r3
 801b4a8:	7b03      	ldrb	r3, [r0, #12]
 801b4aa:	f003 031f 	and.w	r3, r3, #31
 801b4ae:	2b0b      	cmp	r3, #11
 801b4b0:	d10b      	bne.n	801b4ca <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x86>
 801b4b2:	8903      	ldrh	r3, [r0, #8]
 801b4b4:	8940      	ldrh	r0, [r0, #10]
 801b4b6:	4358      	muls	r0, r3
 801b4b8:	4b09      	ldr	r3, [pc, #36]	@ (801b4e0 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 801b4ba:	3003      	adds	r0, #3
 801b4bc:	6819      	ldr	r1, [r3, #0]
 801b4be:	f020 0303 	bic.w	r3, r0, #3
 801b4c2:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 801b4c6:	4418      	add	r0, r3
 801b4c8:	4770      	bx	lr
 801b4ca:	2b0d      	cmp	r3, #13
 801b4cc:	d101      	bne.n	801b4d2 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 801b4ce:	300d      	adds	r0, #13
 801b4d0:	4770      	bx	lr
 801b4d2:	2000      	movs	r0, #0
 801b4d4:	4770      	bx	lr
 801b4d6:	bf00      	nop
 801b4d8:	24028ea8 	.word	0x24028ea8
 801b4dc:	24028eb0 	.word	0x24028eb0
 801b4e0:	24028e8c 	.word	0x24028e8c
 801b4e4:	24028eac 	.word	0x24028eac
 801b4e8:	24028e90 	.word	0x24028e90

0801b4ec <_ZNK8touchgfx6Bitmap9getFormatEv>:
 801b4ec:	4b1f      	ldr	r3, [pc, #124]	@ (801b56c <_ZNK8touchgfx6Bitmap9getFormatEv+0x80>)
 801b4ee:	b510      	push	{r4, lr}
 801b4f0:	8802      	ldrh	r2, [r0, #0]
 801b4f2:	881b      	ldrh	r3, [r3, #0]
 801b4f4:	429a      	cmp	r2, r3
 801b4f6:	d21a      	bcs.n	801b52e <_ZNK8touchgfx6Bitmap9getFormatEv+0x42>
 801b4f8:	4b1d      	ldr	r3, [pc, #116]	@ (801b570 <_ZNK8touchgfx6Bitmap9getFormatEv+0x84>)
 801b4fa:	2114      	movs	r1, #20
 801b4fc:	681b      	ldr	r3, [r3, #0]
 801b4fe:	fb01 3102 	mla	r1, r1, r2, r3
 801b502:	7c4b      	ldrb	r3, [r1, #17]
 801b504:	0958      	lsrs	r0, r3, #5
 801b506:	7ccb      	ldrb	r3, [r1, #19]
 801b508:	491a      	ldr	r1, [pc, #104]	@ (801b574 <_ZNK8touchgfx6Bitmap9getFormatEv+0x88>)
 801b50a:	f3c3 1342 	ubfx	r3, r3, #5, #3
 801b50e:	6809      	ldr	r1, [r1, #0]
 801b510:	ea43 03c0 	orr.w	r3, r3, r0, lsl #3
 801b514:	b2d8      	uxtb	r0, r3
 801b516:	b149      	cbz	r1, 801b52c <_ZNK8touchgfx6Bitmap9getFormatEv+0x40>
 801b518:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 801b51c:	b132      	cbz	r2, 801b52c <_ZNK8touchgfx6Bitmap9getFormatEv+0x40>
 801b51e:	2b0e      	cmp	r3, #14
 801b520:	d021      	beq.n	801b566 <_ZNK8touchgfx6Bitmap9getFormatEv+0x7a>
 801b522:	280f      	cmp	r0, #15
 801b524:	d01d      	beq.n	801b562 <_ZNK8touchgfx6Bitmap9getFormatEv+0x76>
 801b526:	2810      	cmp	r0, #16
 801b528:	bf08      	it	eq
 801b52a:	2002      	moveq	r0, #2
 801b52c:	bd10      	pop	{r4, pc}
 801b52e:	4912      	ldr	r1, [pc, #72]	@ (801b578 <_ZNK8touchgfx6Bitmap9getFormatEv+0x8c>)
 801b530:	8809      	ldrh	r1, [r1, #0]
 801b532:	4419      	add	r1, r3
 801b534:	428a      	cmp	r2, r1
 801b536:	da09      	bge.n	801b54c <_ZNK8touchgfx6Bitmap9getFormatEv+0x60>
 801b538:	1ad3      	subs	r3, r2, r3
 801b53a:	4a10      	ldr	r2, [pc, #64]	@ (801b57c <_ZNK8touchgfx6Bitmap9getFormatEv+0x90>)
 801b53c:	210e      	movs	r1, #14
 801b53e:	6812      	ldr	r2, [r2, #0]
 801b540:	fb01 2303 	mla	r3, r1, r3, r2
 801b544:	7b18      	ldrb	r0, [r3, #12]
 801b546:	f000 001f 	and.w	r0, r0, #31
 801b54a:	e7ef      	b.n	801b52c <_ZNK8touchgfx6Bitmap9getFormatEv+0x40>
 801b54c:	f64f 73fe 	movw	r3, #65534	@ 0xfffe
 801b550:	429a      	cmp	r2, r3
 801b552:	d108      	bne.n	801b566 <_ZNK8touchgfx6Bitmap9getFormatEv+0x7a>
 801b554:	f7e8 fb50 	bl	8003bf8 <_ZN8touchgfx3HAL3lcdEv>
 801b558:	6803      	ldr	r3, [r0, #0]
 801b55a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b55e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801b560:	4718      	bx	r3
 801b562:	2001      	movs	r0, #1
 801b564:	e7e2      	b.n	801b52c <_ZNK8touchgfx6Bitmap9getFormatEv+0x40>
 801b566:	2000      	movs	r0, #0
 801b568:	e7e0      	b.n	801b52c <_ZNK8touchgfx6Bitmap9getFormatEv+0x40>
 801b56a:	bf00      	nop
 801b56c:	24028ea8 	.word	0x24028ea8
 801b570:	24028eb0 	.word	0x24028eb0
 801b574:	24028e8c 	.word	0x24028e8c
 801b578:	24028eac 	.word	0x24028eac
 801b57c:	24028e90 	.word	0x24028e90

0801b580 <_ZNK8touchgfx8LCD24bpp8bitDepthEv>:
 801b580:	2018      	movs	r0, #24
 801b582:	4770      	bx	lr

0801b584 <_ZNK8touchgfx8LCD24bpp17framebufferFormatEv>:
 801b584:	2001      	movs	r0, #1
 801b586:	4770      	bx	lr

0801b588 <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv>:
 801b588:	4b02      	ldr	r3, [pc, #8]	@ (801b594 <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv+0xc>)
 801b58a:	8818      	ldrh	r0, [r3, #0]
 801b58c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801b590:	b280      	uxth	r0, r0
 801b592:	4770      	bx	lr
 801b594:	24028e1a 	.word	0x24028e1a

0801b598 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 801b598:	2bff      	cmp	r3, #255	@ 0xff
 801b59a:	d04c      	beq.n	801b636 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
 801b59c:	2a2c      	cmp	r2, #44	@ 0x2c
 801b59e:	d030      	beq.n	801b602 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6a>
 801b5a0:	d80f      	bhi.n	801b5c2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x2a>
 801b5a2:	2a08      	cmp	r2, #8
 801b5a4:	d043      	beq.n	801b62e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x96>
 801b5a6:	d805      	bhi.n	801b5b4 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1c>
 801b5a8:	2a04      	cmp	r2, #4
 801b5aa:	d03e      	beq.n	801b62a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x92>
 801b5ac:	2a05      	cmp	r2, #5
 801b5ae:	d03a      	beq.n	801b626 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8e>
 801b5b0:	2300      	movs	r3, #0
 801b5b2:	e024      	b.n	801b5fe <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801b5b4:	2a0a      	cmp	r2, #10
 801b5b6:	d03a      	beq.n	801b62e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x96>
 801b5b8:	d301      	bcc.n	801b5be <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x26>
 801b5ba:	2a0b      	cmp	r2, #11
 801b5bc:	d1f8      	bne.n	801b5b0 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801b5be:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 801b5c0:	e01d      	b.n	801b5fe <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801b5c2:	2a30      	cmp	r2, #48	@ 0x30
 801b5c4:	d035      	beq.n	801b632 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9a>
 801b5c6:	d80a      	bhi.n	801b5de <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x46>
 801b5c8:	2a2e      	cmp	r2, #46	@ 0x2e
 801b5ca:	684b      	ldr	r3, [r1, #4]
 801b5cc:	d023      	beq.n	801b616 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801b5ce:	d90d      	bls.n	801b5ec <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x54>
 801b5d0:	781a      	ldrb	r2, [r3, #0]
 801b5d2:	785b      	ldrb	r3, [r3, #1]
 801b5d4:	2b00      	cmp	r3, #0
 801b5d6:	d1eb      	bne.n	801b5b0 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801b5d8:	b98a      	cbnz	r2, 801b5fe <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801b5da:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 801b5dc:	e00f      	b.n	801b5fe <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801b5de:	2a32      	cmp	r2, #50	@ 0x32
 801b5e0:	d027      	beq.n	801b632 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9a>
 801b5e2:	d301      	bcc.n	801b5e8 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x50>
 801b5e4:	2a33      	cmp	r2, #51	@ 0x33
 801b5e6:	d1e3      	bne.n	801b5b0 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801b5e8:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 801b5ea:	e008      	b.n	801b5fe <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801b5ec:	781a      	ldrb	r2, [r3, #0]
 801b5ee:	785b      	ldrb	r3, [r3, #1]
 801b5f0:	2b00      	cmp	r3, #0
 801b5f2:	d1dd      	bne.n	801b5b0 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801b5f4:	2a00      	cmp	r2, #0
 801b5f6:	d0f0      	beq.n	801b5da <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x42>
 801b5f8:	2a01      	cmp	r2, #1
 801b5fa:	d1d9      	bne.n	801b5b0 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801b5fc:	6943      	ldr	r3, [r0, #20]
 801b5fe:	4618      	mov	r0, r3
 801b600:	4770      	bx	lr
 801b602:	684b      	ldr	r3, [r1, #4]
 801b604:	781a      	ldrb	r2, [r3, #0]
 801b606:	785b      	ldrb	r3, [r3, #1]
 801b608:	2b00      	cmp	r3, #0
 801b60a:	d1d1      	bne.n	801b5b0 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801b60c:	b14a      	cbz	r2, 801b622 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8a>
 801b60e:	2a01      	cmp	r2, #1
 801b610:	bf08      	it	eq
 801b612:	68c3      	ldreq	r3, [r0, #12]
 801b614:	e7f3      	b.n	801b5fe <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801b616:	781a      	ldrb	r2, [r3, #0]
 801b618:	785b      	ldrb	r3, [r3, #1]
 801b61a:	2b00      	cmp	r3, #0
 801b61c:	d1c8      	bne.n	801b5b0 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801b61e:	2a00      	cmp	r2, #0
 801b620:	d1ed      	bne.n	801b5fe <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801b622:	69c3      	ldr	r3, [r0, #28]
 801b624:	e7eb      	b.n	801b5fe <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801b626:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 801b628:	e7e9      	b.n	801b5fe <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801b62a:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 801b62c:	e7e7      	b.n	801b5fe <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801b62e:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 801b630:	e7e5      	b.n	801b5fe <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801b632:	6cc3      	ldr	r3, [r0, #76]	@ 0x4c
 801b634:	e7e3      	b.n	801b5fe <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801b636:	2a2c      	cmp	r2, #44	@ 0x2c
 801b638:	d030      	beq.n	801b69c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x104>
 801b63a:	d80f      	bhi.n	801b65c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xc4>
 801b63c:	2a08      	cmp	r2, #8
 801b63e:	d042      	beq.n	801b6c6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x12e>
 801b640:	d805      	bhi.n	801b64e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xb6>
 801b642:	2a04      	cmp	r2, #4
 801b644:	d03d      	beq.n	801b6c2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x12a>
 801b646:	2a05      	cmp	r2, #5
 801b648:	d1b2      	bne.n	801b5b0 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801b64a:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 801b64c:	e7d7      	b.n	801b5fe <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801b64e:	2a0a      	cmp	r2, #10
 801b650:	d039      	beq.n	801b6c6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x12e>
 801b652:	d301      	bcc.n	801b658 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xc0>
 801b654:	2a0b      	cmp	r2, #11
 801b656:	d1ab      	bne.n	801b5b0 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801b658:	6c83      	ldr	r3, [r0, #72]	@ 0x48
 801b65a:	e7d0      	b.n	801b5fe <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801b65c:	2a30      	cmp	r2, #48	@ 0x30
 801b65e:	d034      	beq.n	801b6ca <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x132>
 801b660:	d80b      	bhi.n	801b67a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xe2>
 801b662:	2a2e      	cmp	r2, #46	@ 0x2e
 801b664:	684b      	ldr	r3, [r1, #4]
 801b666:	d023      	beq.n	801b6b0 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x118>
 801b668:	d90e      	bls.n	801b688 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xf0>
 801b66a:	781a      	ldrb	r2, [r3, #0]
 801b66c:	785b      	ldrb	r3, [r3, #1]
 801b66e:	2b00      	cmp	r3, #0
 801b670:	d19e      	bne.n	801b5b0 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801b672:	2a00      	cmp	r2, #0
 801b674:	d1c3      	bne.n	801b5fe <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801b676:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 801b678:	e7c1      	b.n	801b5fe <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801b67a:	2a32      	cmp	r2, #50	@ 0x32
 801b67c:	d025      	beq.n	801b6ca <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x132>
 801b67e:	d301      	bcc.n	801b684 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xec>
 801b680:	2a33      	cmp	r2, #51	@ 0x33
 801b682:	d195      	bne.n	801b5b0 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801b684:	6d83      	ldr	r3, [r0, #88]	@ 0x58
 801b686:	e7ba      	b.n	801b5fe <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801b688:	781a      	ldrb	r2, [r3, #0]
 801b68a:	785b      	ldrb	r3, [r3, #1]
 801b68c:	2b00      	cmp	r3, #0
 801b68e:	d18f      	bne.n	801b5b0 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801b690:	2a00      	cmp	r2, #0
 801b692:	d0f0      	beq.n	801b676 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xde>
 801b694:	2a01      	cmp	r2, #1
 801b696:	d18b      	bne.n	801b5b0 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801b698:	6983      	ldr	r3, [r0, #24]
 801b69a:	e7b0      	b.n	801b5fe <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801b69c:	684b      	ldr	r3, [r1, #4]
 801b69e:	781a      	ldrb	r2, [r3, #0]
 801b6a0:	785b      	ldrb	r3, [r3, #1]
 801b6a2:	2b00      	cmp	r3, #0
 801b6a4:	d184      	bne.n	801b5b0 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801b6a6:	b152      	cbz	r2, 801b6be <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x126>
 801b6a8:	2a01      	cmp	r2, #1
 801b6aa:	bf08      	it	eq
 801b6ac:	6903      	ldreq	r3, [r0, #16]
 801b6ae:	e7a6      	b.n	801b5fe <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801b6b0:	781a      	ldrb	r2, [r3, #0]
 801b6b2:	785b      	ldrb	r3, [r3, #1]
 801b6b4:	2b00      	cmp	r3, #0
 801b6b6:	f47f af7b 	bne.w	801b5b0 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801b6ba:	2a00      	cmp	r2, #0
 801b6bc:	d19f      	bne.n	801b5fe <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801b6be:	6a03      	ldr	r3, [r0, #32]
 801b6c0:	e79d      	b.n	801b5fe <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801b6c2:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 801b6c4:	e79b      	b.n	801b5fe <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801b6c6:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 801b6c8:	e799      	b.n	801b5fe <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801b6ca:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 801b6cc:	e797      	b.n	801b5fe <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>

0801b6ce <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801b6ce:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b6d2:	b085      	sub	sp, #20
 801b6d4:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 801b6d6:	9203      	str	r2, [sp, #12]
 801b6d8:	6870      	ldr	r0, [r6, #4]
 801b6da:	f8dd c058 	ldr.w	ip, [sp, #88]	@ 0x58
 801b6de:	f89d 505c 	ldrb.w	r5, [sp, #92]	@ 0x5c
 801b6e2:	9101      	str	r1, [sp, #4]
 801b6e4:	fa1f f885 	uxth.w	r8, r5
 801b6e8:	43ed      	mvns	r5, r5
 801b6ea:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	@ 0x50
 801b6ee:	b2ed      	uxtb	r5, r5
 801b6f0:	fb00 2404 	mla	r4, r0, r4, r2
 801b6f4:	6832      	ldr	r2, [r6, #0]
 801b6f6:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801b6fa:	4414      	add	r4, r2
 801b6fc:	f8dc 2000 	ldr.w	r2, [ip]
 801b700:	9202      	str	r2, [sp, #8]
 801b702:	f8dc 2004 	ldr.w	r2, [ip, #4]
 801b706:	f102 0e04 	add.w	lr, r2, #4
 801b70a:	9a01      	ldr	r2, [sp, #4]
 801b70c:	2a00      	cmp	r2, #0
 801b70e:	dc03      	bgt.n	801b718 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 801b710:	9a03      	ldr	r2, [sp, #12]
 801b712:	2a00      	cmp	r2, #0
 801b714:	f340 8116 	ble.w	801b944 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 801b718:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801b71a:	f9bc a008 	ldrsh.w	sl, [ip, #8]
 801b71e:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 801b722:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801b724:	f9bc 900c 	ldrsh.w	r9, [ip, #12]
 801b728:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 801b72c:	2b00      	cmp	r3, #0
 801b72e:	dd0e      	ble.n	801b74e <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 801b730:	1406      	asrs	r6, r0, #16
 801b732:	d405      	bmi.n	801b740 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801b734:	4556      	cmp	r6, sl
 801b736:	da03      	bge.n	801b740 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801b738:	1416      	asrs	r6, r2, #16
 801b73a:	d401      	bmi.n	801b740 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801b73c:	454e      	cmp	r6, r9
 801b73e:	db07      	blt.n	801b750 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 801b740:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 801b742:	3b01      	subs	r3, #1
 801b744:	3403      	adds	r4, #3
 801b746:	4430      	add	r0, r6
 801b748:	9e12      	ldr	r6, [sp, #72]	@ 0x48
 801b74a:	4432      	add	r2, r6
 801b74c:	e7ee      	b.n	801b72c <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 801b74e:	d063      	beq.n	801b818 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 801b750:	1e5e      	subs	r6, r3, #1
 801b752:	9f11      	ldr	r7, [sp, #68]	@ 0x44
 801b754:	fb07 0706 	mla	r7, r7, r6, r0
 801b758:	143f      	asrs	r7, r7, #16
 801b75a:	d454      	bmi.n	801b806 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 801b75c:	4557      	cmp	r7, sl
 801b75e:	da52      	bge.n	801b806 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 801b760:	9f12      	ldr	r7, [sp, #72]	@ 0x48
 801b762:	fb07 2606 	mla	r6, r7, r6, r2
 801b766:	1436      	asrs	r6, r6, #16
 801b768:	d44d      	bmi.n	801b806 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 801b76a:	454e      	cmp	r6, r9
 801b76c:	da4b      	bge.n	801b806 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 801b76e:	1ce6      	adds	r6, r4, #3
 801b770:	4699      	mov	r9, r3
 801b772:	f1b9 0f00 	cmp.w	r9, #0
 801b776:	f106 0603 	add.w	r6, r6, #3
 801b77a:	dd48      	ble.n	801b80e <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x140>
 801b77c:	f9bc b008 	ldrsh.w	fp, [ip, #8]
 801b780:	1417      	asrs	r7, r2, #16
 801b782:	9902      	ldr	r1, [sp, #8]
 801b784:	ea4f 4a20 	mov.w	sl, r0, asr #16
 801b788:	f109 39ff 	add.w	r9, r9, #4294967295
 801b78c:	fb0b 1707 	mla	r7, fp, r7, r1
 801b790:	f816 bc06 	ldrb.w	fp, [r6, #-6]
 801b794:	9911      	ldr	r1, [sp, #68]	@ 0x44
 801b796:	f817 700a 	ldrb.w	r7, [r7, sl]
 801b79a:	fb1b fb05 	smulbb	fp, fp, r5
 801b79e:	4408      	add	r0, r1
 801b7a0:	9912      	ldr	r1, [sp, #72]	@ 0x48
 801b7a2:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801b7a6:	440a      	add	r2, r1
 801b7a8:	eb0e 0a07 	add.w	sl, lr, r7
 801b7ac:	f81e 7007 	ldrb.w	r7, [lr, r7]
 801b7b0:	fb07 b708 	mla	r7, r7, r8, fp
 801b7b4:	b2bf      	uxth	r7, r7
 801b7b6:	f107 0b01 	add.w	fp, r7, #1
 801b7ba:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 801b7be:	f816 bc05 	ldrb.w	fp, [r6, #-5]
 801b7c2:	fb1b fb05 	smulbb	fp, fp, r5
 801b7c6:	123f      	asrs	r7, r7, #8
 801b7c8:	f806 7c06 	strb.w	r7, [r6, #-6]
 801b7cc:	f89a 7001 	ldrb.w	r7, [sl, #1]
 801b7d0:	fb07 b708 	mla	r7, r7, r8, fp
 801b7d4:	b2bf      	uxth	r7, r7
 801b7d6:	f107 0b01 	add.w	fp, r7, #1
 801b7da:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 801b7de:	123f      	asrs	r7, r7, #8
 801b7e0:	f806 7c05 	strb.w	r7, [r6, #-5]
 801b7e4:	f89a 7002 	ldrb.w	r7, [sl, #2]
 801b7e8:	f816 ac04 	ldrb.w	sl, [r6, #-4]
 801b7ec:	fb1a fa05 	smulbb	sl, sl, r5
 801b7f0:	fb07 a708 	mla	r7, r7, r8, sl
 801b7f4:	b2bf      	uxth	r7, r7
 801b7f6:	f107 0a01 	add.w	sl, r7, #1
 801b7fa:	eb0a 2717 	add.w	r7, sl, r7, lsr #8
 801b7fe:	123f      	asrs	r7, r7, #8
 801b800:	f806 7c04 	strb.w	r7, [r6, #-4]
 801b804:	e7b5      	b.n	801b772 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa4>
 801b806:	2700      	movs	r7, #0
 801b808:	1bde      	subs	r6, r3, r7
 801b80a:	2e00      	cmp	r6, #0
 801b80c:	dc42      	bgt.n	801b894 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c6>
 801b80e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801b812:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801b816:	441c      	add	r4, r3
 801b818:	9b01      	ldr	r3, [sp, #4]
 801b81a:	2b00      	cmp	r3, #0
 801b81c:	f340 8092 	ble.w	801b944 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 801b820:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801b824:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801b826:	ee30 0a04 	vadd.f32	s0, s0, s8
 801b82a:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801b82e:	eef0 6a62 	vmov.f32	s13, s5
 801b832:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801b836:	ee31 1a05 	vadd.f32	s2, s2, s10
 801b83a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801b83e:	edcd 6a0f 	vstr	s13, [sp, #60]	@ 0x3c
 801b842:	eef0 6a43 	vmov.f32	s13, s6
 801b846:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801b84a:	edcd 6a10 	vstr	s13, [sp, #64]	@ 0x40
 801b84e:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801b852:	ee61 7a27 	vmul.f32	s15, s2, s15
 801b856:	ee77 2a62 	vsub.f32	s5, s14, s5
 801b85a:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801b85e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801b862:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801b866:	ee12 2a90 	vmov	r2, s5
 801b86a:	eef0 2a47 	vmov.f32	s5, s14
 801b86e:	fb92 f3f3 	sdiv	r3, r2, r3
 801b872:	ee13 2a10 	vmov	r2, s6
 801b876:	9311      	str	r3, [sp, #68]	@ 0x44
 801b878:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801b87a:	eeb0 3a67 	vmov.f32	s6, s15
 801b87e:	fb92 f3f3 	sdiv	r3, r2, r3
 801b882:	9312      	str	r3, [sp, #72]	@ 0x48
 801b884:	9b01      	ldr	r3, [sp, #4]
 801b886:	9a03      	ldr	r2, [sp, #12]
 801b888:	3b01      	subs	r3, #1
 801b88a:	9301      	str	r3, [sp, #4]
 801b88c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801b88e:	bf08      	it	eq
 801b890:	4613      	moveq	r3, r2
 801b892:	e73a      	b.n	801b70a <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801b894:	ea5f 4a20 	movs.w	sl, r0, asr #16
 801b898:	d44e      	bmi.n	801b938 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 801b89a:	f8dc 6008 	ldr.w	r6, [ip, #8]
 801b89e:	4556      	cmp	r6, sl
 801b8a0:	dd4a      	ble.n	801b938 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 801b8a2:	ea5f 4b22 	movs.w	fp, r2, asr #16
 801b8a6:	d447      	bmi.n	801b938 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 801b8a8:	f8dc 100c 	ldr.w	r1, [ip, #12]
 801b8ac:	4559      	cmp	r1, fp
 801b8ae:	dd43      	ble.n	801b938 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 801b8b0:	fa0f f986 	sxth.w	r9, r6
 801b8b4:	9902      	ldr	r1, [sp, #8]
 801b8b6:	eb07 0647 	add.w	r6, r7, r7, lsl #1
 801b8ba:	fb0b 1909 	mla	r9, fp, r9, r1
 801b8be:	f814 b006 	ldrb.w	fp, [r4, r6]
 801b8c2:	f819 900a 	ldrb.w	r9, [r9, sl]
 801b8c6:	fb1b fb05 	smulbb	fp, fp, r5
 801b8ca:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 801b8ce:	eb0e 0a09 	add.w	sl, lr, r9
 801b8d2:	f81e 9009 	ldrb.w	r9, [lr, r9]
 801b8d6:	fb09 b908 	mla	r9, r9, r8, fp
 801b8da:	fa1f f989 	uxth.w	r9, r9
 801b8de:	f109 0b01 	add.w	fp, r9, #1
 801b8e2:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801b8e6:	ea4f 2929 	mov.w	r9, r9, asr #8
 801b8ea:	f804 9006 	strb.w	r9, [r4, r6]
 801b8ee:	4426      	add	r6, r4
 801b8f0:	f89a 9001 	ldrb.w	r9, [sl, #1]
 801b8f4:	f896 b001 	ldrb.w	fp, [r6, #1]
 801b8f8:	fb1b fb05 	smulbb	fp, fp, r5
 801b8fc:	fb09 b908 	mla	r9, r9, r8, fp
 801b900:	fa1f f989 	uxth.w	r9, r9
 801b904:	f109 0b01 	add.w	fp, r9, #1
 801b908:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801b90c:	ea4f 2929 	mov.w	r9, r9, asr #8
 801b910:	f886 9001 	strb.w	r9, [r6, #1]
 801b914:	f89a 9002 	ldrb.w	r9, [sl, #2]
 801b918:	f896 a002 	ldrb.w	sl, [r6, #2]
 801b91c:	fb1a fa05 	smulbb	sl, sl, r5
 801b920:	fb09 a908 	mla	r9, r9, r8, sl
 801b924:	fa1f f989 	uxth.w	r9, r9
 801b928:	f109 0a01 	add.w	sl, r9, #1
 801b92c:	eb0a 2919 	add.w	r9, sl, r9, lsr #8
 801b930:	ea4f 2929 	mov.w	r9, r9, asr #8
 801b934:	f886 9002 	strb.w	r9, [r6, #2]
 801b938:	9911      	ldr	r1, [sp, #68]	@ 0x44
 801b93a:	3701      	adds	r7, #1
 801b93c:	4408      	add	r0, r1
 801b93e:	9912      	ldr	r1, [sp, #72]	@ 0x48
 801b940:	440a      	add	r2, r1
 801b942:	e761      	b.n	801b808 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 801b944:	b005      	add	sp, #20
 801b946:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801b94a <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801b94a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b94e:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 801b950:	4693      	mov	fp, r2
 801b952:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 801b954:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801b958:	6868      	ldr	r0, [r5, #4]
 801b95a:	6877      	ldr	r7, [r6, #4]
 801b95c:	9100      	str	r1, [sp, #0]
 801b95e:	3704      	adds	r7, #4
 801b960:	e9dd 2412 	ldrd	r2, r4, [sp, #72]	@ 0x48
 801b964:	e9dd 8e0f 	ldrd	r8, lr, [sp, #60]	@ 0x3c
 801b968:	fb00 2404 	mla	r4, r0, r4, r2
 801b96c:	682a      	ldr	r2, [r5, #0]
 801b96e:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801b972:	4414      	add	r4, r2
 801b974:	6832      	ldr	r2, [r6, #0]
 801b976:	9201      	str	r2, [sp, #4]
 801b978:	9a00      	ldr	r2, [sp, #0]
 801b97a:	2a00      	cmp	r2, #0
 801b97c:	dc03      	bgt.n	801b986 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801b97e:	f1bb 0f00 	cmp.w	fp, #0
 801b982:	f340 80bc 	ble.w	801bafe <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 801b986:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801b988:	f9b6 a008 	ldrsh.w	sl, [r6, #8]
 801b98c:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 801b990:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801b992:	f9b6 900c 	ldrsh.w	r9, [r6, #12]
 801b996:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 801b99a:	2b00      	cmp	r3, #0
 801b99c:	dd0c      	ble.n	801b9b8 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801b99e:	1405      	asrs	r5, r0, #16
 801b9a0:	d405      	bmi.n	801b9ae <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 801b9a2:	4555      	cmp	r5, sl
 801b9a4:	da03      	bge.n	801b9ae <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 801b9a6:	1415      	asrs	r5, r2, #16
 801b9a8:	d401      	bmi.n	801b9ae <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 801b9aa:	454d      	cmp	r5, r9
 801b9ac:	db05      	blt.n	801b9ba <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801b9ae:	4440      	add	r0, r8
 801b9b0:	4472      	add	r2, lr
 801b9b2:	3b01      	subs	r3, #1
 801b9b4:	3403      	adds	r4, #3
 801b9b6:	e7f0      	b.n	801b99a <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50>
 801b9b8:	d03f      	beq.n	801ba3a <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xf0>
 801b9ba:	1e5d      	subs	r5, r3, #1
 801b9bc:	fb08 0c05 	mla	ip, r8, r5, r0
 801b9c0:	ea5f 4c2c 	movs.w	ip, ip, asr #16
 801b9c4:	d42e      	bmi.n	801ba24 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 801b9c6:	45d4      	cmp	ip, sl
 801b9c8:	da2c      	bge.n	801ba24 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 801b9ca:	fb0e 2505 	mla	r5, lr, r5, r2
 801b9ce:	142d      	asrs	r5, r5, #16
 801b9d0:	d428      	bmi.n	801ba24 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 801b9d2:	454d      	cmp	r5, r9
 801b9d4:	da26      	bge.n	801ba24 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 801b9d6:	1ce5      	adds	r5, r4, #3
 801b9d8:	469c      	mov	ip, r3
 801b9da:	f1bc 0f00 	cmp.w	ip, #0
 801b9de:	f105 0503 	add.w	r5, r5, #3
 801b9e2:	dd25      	ble.n	801ba30 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xe6>
 801b9e4:	f9b6 1008 	ldrsh.w	r1, [r6, #8]
 801b9e8:	ea4f 4922 	mov.w	r9, r2, asr #16
 801b9ec:	f10c 3cff 	add.w	ip, ip, #4294967295
 801b9f0:	4472      	add	r2, lr
 801b9f2:	468a      	mov	sl, r1
 801b9f4:	9901      	ldr	r1, [sp, #4]
 801b9f6:	fb0a 1909 	mla	r9, sl, r9, r1
 801b9fa:	1401      	asrs	r1, r0, #16
 801b9fc:	4440      	add	r0, r8
 801b9fe:	f819 9001 	ldrb.w	r9, [r9, r1]
 801ba02:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 801ba06:	eb07 0a09 	add.w	sl, r7, r9
 801ba0a:	f817 9009 	ldrb.w	r9, [r7, r9]
 801ba0e:	f805 9c06 	strb.w	r9, [r5, #-6]
 801ba12:	f89a 9001 	ldrb.w	r9, [sl, #1]
 801ba16:	f805 9c05 	strb.w	r9, [r5, #-5]
 801ba1a:	f89a 9002 	ldrb.w	r9, [sl, #2]
 801ba1e:	f805 9c04 	strb.w	r9, [r5, #-4]
 801ba22:	e7da      	b.n	801b9da <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801ba24:	2500      	movs	r5, #0
 801ba26:	eba3 0c05 	sub.w	ip, r3, r5
 801ba2a:	f1bc 0f00 	cmp.w	ip, #0
 801ba2e:	dc3b      	bgt.n	801baa8 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15e>
 801ba30:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801ba34:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801ba38:	441c      	add	r4, r3
 801ba3a:	9b00      	ldr	r3, [sp, #0]
 801ba3c:	2b00      	cmp	r3, #0
 801ba3e:	dd5e      	ble.n	801bafe <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 801ba40:	ee30 0a04 	vadd.f32	s0, s0, s8
 801ba44:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801ba46:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801ba4a:	eeb0 6a62 	vmov.f32	s12, s5
 801ba4e:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801ba52:	ee31 1a05 	vadd.f32	s2, s2, s10
 801ba56:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801ba5a:	ed8d 6a0d 	vstr	s12, [sp, #52]	@ 0x34
 801ba5e:	eeb0 6a43 	vmov.f32	s12, s6
 801ba62:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801ba66:	ed8d 6a0e 	vstr	s12, [sp, #56]	@ 0x38
 801ba6a:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801ba6e:	ee61 7a27 	vmul.f32	s15, s2, s15
 801ba72:	ee77 2a62 	vsub.f32	s5, s14, s5
 801ba76:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801ba7a:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801ba7e:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801ba82:	ee12 2a90 	vmov	r2, s5
 801ba86:	eef0 2a47 	vmov.f32	s5, s14
 801ba8a:	fb92 f8f3 	sdiv	r8, r2, r3
 801ba8e:	ee13 2a10 	vmov	r2, s6
 801ba92:	eeb0 3a67 	vmov.f32	s6, s15
 801ba96:	fb92 fef3 	sdiv	lr, r2, r3
 801ba9a:	9b00      	ldr	r3, [sp, #0]
 801ba9c:	3b01      	subs	r3, #1
 801ba9e:	9300      	str	r3, [sp, #0]
 801baa0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801baa2:	bf08      	it	eq
 801baa4:	465b      	moveq	r3, fp
 801baa6:	e767      	b.n	801b978 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 801baa8:	ea5f 4920 	movs.w	r9, r0, asr #16
 801baac:	d423      	bmi.n	801baf6 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 801baae:	f8d6 c008 	ldr.w	ip, [r6, #8]
 801bab2:	45cc      	cmp	ip, r9
 801bab4:	dd1f      	ble.n	801baf6 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 801bab6:	ea5f 4a22 	movs.w	sl, r2, asr #16
 801baba:	d41c      	bmi.n	801baf6 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 801babc:	68f1      	ldr	r1, [r6, #12]
 801babe:	4551      	cmp	r1, sl
 801bac0:	dd19      	ble.n	801baf6 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 801bac2:	fa0f fc8c 	sxth.w	ip, ip
 801bac6:	9901      	ldr	r1, [sp, #4]
 801bac8:	fb0a 1c0c 	mla	ip, sl, ip, r1
 801bacc:	f81c c009 	ldrb.w	ip, [ip, r9]
 801bad0:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 801bad4:	f817 a00c 	ldrb.w	sl, [r7, ip]
 801bad8:	eb07 090c 	add.w	r9, r7, ip
 801badc:	eb05 0c45 	add.w	ip, r5, r5, lsl #1
 801bae0:	f804 a00c 	strb.w	sl, [r4, ip]
 801bae4:	44a4      	add	ip, r4
 801bae6:	f899 a001 	ldrb.w	sl, [r9, #1]
 801baea:	f88c a001 	strb.w	sl, [ip, #1]
 801baee:	f899 9002 	ldrb.w	r9, [r9, #2]
 801baf2:	f88c 9002 	strb.w	r9, [ip, #2]
 801baf6:	4440      	add	r0, r8
 801baf8:	4472      	add	r2, lr
 801bafa:	3501      	adds	r5, #1
 801bafc:	e793      	b.n	801ba26 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xdc>
 801bafe:	b003      	add	sp, #12
 801bb00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801bb04 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801bb04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bb08:	b085      	sub	sp, #20
 801bb0a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801bb0e:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801bb10:	9202      	str	r2, [sp, #8]
 801bb12:	f89d 205c 	ldrb.w	r2, [sp, #92]	@ 0x5c
 801bb16:	6860      	ldr	r0, [r4, #4]
 801bb18:	9203      	str	r2, [sp, #12]
 801bb1a:	f8dd c058 	ldr.w	ip, [sp, #88]	@ 0x58
 801bb1e:	f8dd e044 	ldr.w	lr, [sp, #68]	@ 0x44
 801bb22:	e9dd 2514 	ldrd	r2, r5, [sp, #80]	@ 0x50
 801bb26:	fb00 2505 	mla	r5, r0, r5, r2
 801bb2a:	6822      	ldr	r2, [r4, #0]
 801bb2c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801bb30:	4415      	add	r5, r2
 801bb32:	f8dc 2000 	ldr.w	r2, [ip]
 801bb36:	9200      	str	r2, [sp, #0]
 801bb38:	f8dc 2004 	ldr.w	r2, [ip, #4]
 801bb3c:	3204      	adds	r2, #4
 801bb3e:	9201      	str	r2, [sp, #4]
 801bb40:	2900      	cmp	r1, #0
 801bb42:	dc03      	bgt.n	801bb4c <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 801bb44:	9a02      	ldr	r2, [sp, #8]
 801bb46:	2a00      	cmp	r2, #0
 801bb48:	f340 8127 	ble.w	801bd9a <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x296>
 801bb4c:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801bb4e:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 801bb52:	f502 4400 	add.w	r4, r2, #32768	@ 0x8000
 801bb56:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801bb58:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 801bb5c:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 801bb60:	2b00      	cmp	r3, #0
 801bb62:	dd0d      	ble.n	801bb80 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801bb64:	1422      	asrs	r2, r4, #16
 801bb66:	d405      	bmi.n	801bb74 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801bb68:	4542      	cmp	r2, r8
 801bb6a:	da03      	bge.n	801bb74 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801bb6c:	1402      	asrs	r2, r0, #16
 801bb6e:	d401      	bmi.n	801bb74 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801bb70:	42ba      	cmp	r2, r7
 801bb72:	db06      	blt.n	801bb82 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801bb74:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801bb76:	4474      	add	r4, lr
 801bb78:	3b01      	subs	r3, #1
 801bb7a:	3503      	adds	r5, #3
 801bb7c:	4410      	add	r0, r2
 801bb7e:	e7ef      	b.n	801bb60 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801bb80:	d075      	beq.n	801bc6e <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16a>
 801bb82:	1e5a      	subs	r2, r3, #1
 801bb84:	fb0e 4602 	mla	r6, lr, r2, r4
 801bb88:	1436      	asrs	r6, r6, #16
 801bb8a:	d465      	bmi.n	801bc58 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 801bb8c:	4546      	cmp	r6, r8
 801bb8e:	da63      	bge.n	801bc58 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 801bb90:	9e12      	ldr	r6, [sp, #72]	@ 0x48
 801bb92:	fb06 0202 	mla	r2, r6, r2, r0
 801bb96:	1412      	asrs	r2, r2, #16
 801bb98:	d45e      	bmi.n	801bc58 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 801bb9a:	42ba      	cmp	r2, r7
 801bb9c:	da5c      	bge.n	801bc58 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 801bb9e:	1cef      	adds	r7, r5, #3
 801bba0:	4699      	mov	r9, r3
 801bba2:	f1b9 0f00 	cmp.w	r9, #0
 801bba6:	dd5d      	ble.n	801bc64 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x160>
 801bba8:	1402      	asrs	r2, r0, #16
 801bbaa:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 801bbae:	1426      	asrs	r6, r4, #16
 801bbb0:	4692      	mov	sl, r2
 801bbb2:	9a00      	ldr	r2, [sp, #0]
 801bbb4:	fb08 220a 	mla	r2, r8, sl, r2
 801bbb8:	5d92      	ldrb	r2, [r2, r6]
 801bbba:	9e01      	ldr	r6, [sp, #4]
 801bbbc:	f856 6022 	ldr.w	r6, [r6, r2, lsl #2]
 801bbc0:	ea5f 6816 	movs.w	r8, r6, lsr #24
 801bbc4:	d041      	beq.n	801bc4a <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 801bbc6:	9a03      	ldr	r2, [sp, #12]
 801bbc8:	fa5f fb86 	uxtb.w	fp, r6
 801bbcc:	fb02 f808 	mul.w	r8, r2, r8
 801bbd0:	f108 0201 	add.w	r2, r8, #1
 801bbd4:	eb02 2228 	add.w	r2, r2, r8, asr #8
 801bbd8:	f817 8c03 	ldrb.w	r8, [r7, #-3]
 801bbdc:	1212      	asrs	r2, r2, #8
 801bbde:	fa1f fa82 	uxth.w	sl, r2
 801bbe2:	43d2      	mvns	r2, r2
 801bbe4:	fb1b fb0a 	smulbb	fp, fp, sl
 801bbe8:	b2d2      	uxtb	r2, r2
 801bbea:	fb08 b802 	mla	r8, r8, r2, fp
 801bbee:	fa1f f888 	uxth.w	r8, r8
 801bbf2:	f108 0b01 	add.w	fp, r8, #1
 801bbf6:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 801bbfa:	f3c6 2b07 	ubfx	fp, r6, #8, #8
 801bbfe:	f3c6 4607 	ubfx	r6, r6, #16, #8
 801bc02:	fb1b fb0a 	smulbb	fp, fp, sl
 801bc06:	ea4f 2828 	mov.w	r8, r8, asr #8
 801bc0a:	fb16 fa0a 	smulbb	sl, r6, sl
 801bc0e:	f817 6c01 	ldrb.w	r6, [r7, #-1]
 801bc12:	f807 8c03 	strb.w	r8, [r7, #-3]
 801bc16:	f817 8c02 	ldrb.w	r8, [r7, #-2]
 801bc1a:	fb06 aa02 	mla	sl, r6, r2, sl
 801bc1e:	fb08 b802 	mla	r8, r8, r2, fp
 801bc22:	fa1f fa8a 	uxth.w	sl, sl
 801bc26:	fa1f f888 	uxth.w	r8, r8
 801bc2a:	f10a 0601 	add.w	r6, sl, #1
 801bc2e:	f108 0b01 	add.w	fp, r8, #1
 801bc32:	eb06 2a1a 	add.w	sl, r6, sl, lsr #8
 801bc36:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 801bc3a:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801bc3e:	ea4f 2828 	mov.w	r8, r8, asr #8
 801bc42:	f807 ac01 	strb.w	sl, [r7, #-1]
 801bc46:	f807 8c02 	strb.w	r8, [r7, #-2]
 801bc4a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801bc4c:	4474      	add	r4, lr
 801bc4e:	3703      	adds	r7, #3
 801bc50:	f109 39ff 	add.w	r9, r9, #4294967295
 801bc54:	4410      	add	r0, r2
 801bc56:	e7a4      	b.n	801bba2 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801bc58:	f04f 0800 	mov.w	r8, #0
 801bc5c:	eba3 0208 	sub.w	r2, r3, r8
 801bc60:	2a00      	cmp	r2, #0
 801bc62:	dc3b      	bgt.n	801bcdc <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d8>
 801bc64:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801bc68:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801bc6c:	441d      	add	r5, r3
 801bc6e:	2900      	cmp	r1, #0
 801bc70:	f340 8093 	ble.w	801bd9a <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x296>
 801bc74:	ee30 0a04 	vadd.f32	s0, s0, s8
 801bc78:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801bc7a:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801bc7e:	3901      	subs	r1, #1
 801bc80:	eeb0 6a62 	vmov.f32	s12, s5
 801bc84:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801bc88:	ee31 1a05 	vadd.f32	s2, s2, s10
 801bc8c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801bc90:	ed8d 6a0f 	vstr	s12, [sp, #60]	@ 0x3c
 801bc94:	eeb0 6a43 	vmov.f32	s12, s6
 801bc98:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801bc9c:	ed8d 6a10 	vstr	s12, [sp, #64]	@ 0x40
 801bca0:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801bca4:	ee61 7a27 	vmul.f32	s15, s2, s15
 801bca8:	ee77 2a62 	vsub.f32	s5, s14, s5
 801bcac:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801bcb0:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801bcb4:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801bcb8:	ee12 2a90 	vmov	r2, s5
 801bcbc:	eef0 2a47 	vmov.f32	s5, s14
 801bcc0:	fb92 fef3 	sdiv	lr, r2, r3
 801bcc4:	ee13 2a10 	vmov	r2, s6
 801bcc8:	eeb0 3a67 	vmov.f32	s6, s15
 801bccc:	fb92 f3f3 	sdiv	r3, r2, r3
 801bcd0:	9a02      	ldr	r2, [sp, #8]
 801bcd2:	9312      	str	r3, [sp, #72]	@ 0x48
 801bcd4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801bcd6:	bf08      	it	eq
 801bcd8:	4613      	moveq	r3, r2
 801bcda:	e731      	b.n	801bb40 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801bcdc:	1427      	asrs	r7, r4, #16
 801bcde:	d456      	bmi.n	801bd8e <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 801bce0:	f8dc 6008 	ldr.w	r6, [ip, #8]
 801bce4:	42be      	cmp	r6, r7
 801bce6:	dd52      	ble.n	801bd8e <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 801bce8:	ea5f 4920 	movs.w	r9, r0, asr #16
 801bcec:	d44f      	bmi.n	801bd8e <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 801bcee:	f8dc 200c 	ldr.w	r2, [ip, #12]
 801bcf2:	454a      	cmp	r2, r9
 801bcf4:	dd4b      	ble.n	801bd8e <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 801bcf6:	9a00      	ldr	r2, [sp, #0]
 801bcf8:	b236      	sxth	r6, r6
 801bcfa:	fb09 2606 	mla	r6, r9, r6, r2
 801bcfe:	5df2      	ldrb	r2, [r6, r7]
 801bd00:	9e01      	ldr	r6, [sp, #4]
 801bd02:	f856 7022 	ldr.w	r7, [r6, r2, lsl #2]
 801bd06:	0e3a      	lsrs	r2, r7, #24
 801bd08:	d041      	beq.n	801bd8e <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 801bd0a:	9e03      	ldr	r6, [sp, #12]
 801bd0c:	fa5f fb87 	uxtb.w	fp, r7
 801bd10:	4372      	muls	r2, r6
 801bd12:	1c56      	adds	r6, r2, #1
 801bd14:	eb06 2222 	add.w	r2, r6, r2, asr #8
 801bd18:	eb08 0648 	add.w	r6, r8, r8, lsl #1
 801bd1c:	1212      	asrs	r2, r2, #8
 801bd1e:	f815 9006 	ldrb.w	r9, [r5, r6]
 801bd22:	fa1f fa82 	uxth.w	sl, r2
 801bd26:	43d2      	mvns	r2, r2
 801bd28:	fb1b fb0a 	smulbb	fp, fp, sl
 801bd2c:	b2d2      	uxtb	r2, r2
 801bd2e:	fb09 b902 	mla	r9, r9, r2, fp
 801bd32:	fa1f f989 	uxth.w	r9, r9
 801bd36:	f109 0b01 	add.w	fp, r9, #1
 801bd3a:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801bd3e:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 801bd42:	f3c7 4707 	ubfx	r7, r7, #16, #8
 801bd46:	fb1b fb0a 	smulbb	fp, fp, sl
 801bd4a:	ea4f 2929 	mov.w	r9, r9, asr #8
 801bd4e:	fb17 fa0a 	smulbb	sl, r7, sl
 801bd52:	f805 9006 	strb.w	r9, [r5, r6]
 801bd56:	442e      	add	r6, r5
 801bd58:	78b7      	ldrb	r7, [r6, #2]
 801bd5a:	f896 9001 	ldrb.w	r9, [r6, #1]
 801bd5e:	fb07 aa02 	mla	sl, r7, r2, sl
 801bd62:	fb09 b902 	mla	r9, r9, r2, fp
 801bd66:	fa1f fa8a 	uxth.w	sl, sl
 801bd6a:	fa1f f989 	uxth.w	r9, r9
 801bd6e:	f10a 0701 	add.w	r7, sl, #1
 801bd72:	f109 0b01 	add.w	fp, r9, #1
 801bd76:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801bd7a:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801bd7e:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801bd82:	ea4f 2929 	mov.w	r9, r9, asr #8
 801bd86:	f886 a002 	strb.w	sl, [r6, #2]
 801bd8a:	f886 9001 	strb.w	r9, [r6, #1]
 801bd8e:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801bd90:	4474      	add	r4, lr
 801bd92:	f108 0801 	add.w	r8, r8, #1
 801bd96:	4410      	add	r0, r2
 801bd98:	e760      	b.n	801bc5c <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x158>
 801bd9a:	b005      	add	sp, #20
 801bd9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801bda0 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801bda0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bda4:	b085      	sub	sp, #20
 801bda6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801bdaa:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 801bdac:	9203      	str	r2, [sp, #12]
 801bdae:	6868      	ldr	r0, [r5, #4]
 801bdb0:	f8dd c058 	ldr.w	ip, [sp, #88]	@ 0x58
 801bdb4:	f8dd e044 	ldr.w	lr, [sp, #68]	@ 0x44
 801bdb8:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	@ 0x50
 801bdbc:	fb00 2404 	mla	r4, r0, r4, r2
 801bdc0:	682a      	ldr	r2, [r5, #0]
 801bdc2:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801bdc6:	4414      	add	r4, r2
 801bdc8:	f8dc 2000 	ldr.w	r2, [ip]
 801bdcc:	9201      	str	r2, [sp, #4]
 801bdce:	f8dc 2004 	ldr.w	r2, [ip, #4]
 801bdd2:	3204      	adds	r2, #4
 801bdd4:	9202      	str	r2, [sp, #8]
 801bdd6:	2900      	cmp	r1, #0
 801bdd8:	dc03      	bgt.n	801bde2 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42>
 801bdda:	9a03      	ldr	r2, [sp, #12]
 801bddc:	2a00      	cmp	r2, #0
 801bdde:	f340 8137 	ble.w	801c050 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 801bde2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801bde4:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 801bde8:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 801bdec:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801bdee:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 801bdf2:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 801bdf6:	2b00      	cmp	r3, #0
 801bdf8:	dd0d      	ble.n	801be16 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801bdfa:	1405      	asrs	r5, r0, #16
 801bdfc:	d405      	bmi.n	801be0a <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801bdfe:	4545      	cmp	r5, r8
 801be00:	da03      	bge.n	801be0a <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801be02:	1415      	asrs	r5, r2, #16
 801be04:	d401      	bmi.n	801be0a <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801be06:	42bd      	cmp	r5, r7
 801be08:	db06      	blt.n	801be18 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801be0a:	9d12      	ldr	r5, [sp, #72]	@ 0x48
 801be0c:	4470      	add	r0, lr
 801be0e:	3b01      	subs	r3, #1
 801be10:	3403      	adds	r4, #3
 801be12:	442a      	add	r2, r5
 801be14:	e7ef      	b.n	801bdf6 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56>
 801be16:	d070      	beq.n	801befa <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15a>
 801be18:	1e5d      	subs	r5, r3, #1
 801be1a:	fb0e 0605 	mla	r6, lr, r5, r0
 801be1e:	1436      	asrs	r6, r6, #16
 801be20:	d462      	bmi.n	801bee8 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 801be22:	4546      	cmp	r6, r8
 801be24:	da60      	bge.n	801bee8 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 801be26:	9e12      	ldr	r6, [sp, #72]	@ 0x48
 801be28:	fb06 2505 	mla	r5, r6, r5, r2
 801be2c:	142d      	asrs	r5, r5, #16
 801be2e:	d45b      	bmi.n	801bee8 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 801be30:	42bd      	cmp	r5, r7
 801be32:	da59      	bge.n	801bee8 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 801be34:	1ce5      	adds	r5, r4, #3
 801be36:	469a      	mov	sl, r3
 801be38:	f1ba 0f00 	cmp.w	sl, #0
 801be3c:	dd58      	ble.n	801bef0 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x150>
 801be3e:	1416      	asrs	r6, r2, #16
 801be40:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 801be44:	1407      	asrs	r7, r0, #16
 801be46:	46b1      	mov	r9, r6
 801be48:	9e01      	ldr	r6, [sp, #4]
 801be4a:	fb08 6609 	mla	r6, r8, r9, r6
 801be4e:	5df6      	ldrb	r6, [r6, r7]
 801be50:	9f02      	ldr	r7, [sp, #8]
 801be52:	f857 6026 	ldr.w	r6, [r7, r6, lsl #2]
 801be56:	0e37      	lsrs	r7, r6, #24
 801be58:	2fff      	cmp	r7, #255	@ 0xff
 801be5a:	f000 80f0 	beq.w	801c03e <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29e>
 801be5e:	fa5f f887 	uxtb.w	r8, r7
 801be62:	b3d7      	cbz	r7, 801beda <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 801be64:	fa1f f788 	uxth.w	r7, r8
 801be68:	ea6f 0808 	mvn.w	r8, r8
 801be6c:	fa5f fb86 	uxtb.w	fp, r6
 801be70:	f815 9c03 	ldrb.w	r9, [r5, #-3]
 801be74:	fa5f f888 	uxtb.w	r8, r8
 801be78:	fb1b fb07 	smulbb	fp, fp, r7
 801be7c:	fb09 b908 	mla	r9, r9, r8, fp
 801be80:	fa1f f989 	uxth.w	r9, r9
 801be84:	f109 0b01 	add.w	fp, r9, #1
 801be88:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801be8c:	f815 bc02 	ldrb.w	fp, [r5, #-2]
 801be90:	fb1b fb08 	smulbb	fp, fp, r8
 801be94:	ea4f 2929 	mov.w	r9, r9, asr #8
 801be98:	f805 9c03 	strb.w	r9, [r5, #-3]
 801be9c:	f3c6 2907 	ubfx	r9, r6, #8, #8
 801bea0:	f3c6 4607 	ubfx	r6, r6, #16, #8
 801bea4:	fb09 b907 	mla	r9, r9, r7, fp
 801bea8:	fa1f f989 	uxth.w	r9, r9
 801beac:	f109 0b01 	add.w	fp, r9, #1
 801beb0:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801beb4:	ea4f 2929 	mov.w	r9, r9, asr #8
 801beb8:	f805 9c02 	strb.w	r9, [r5, #-2]
 801bebc:	f815 9c01 	ldrb.w	r9, [r5, #-1]
 801bec0:	fb19 f808 	smulbb	r8, r9, r8
 801bec4:	fb06 8607 	mla	r6, r6, r7, r8
 801bec8:	b2b6      	uxth	r6, r6
 801beca:	f106 0801 	add.w	r8, r6, #1
 801bece:	eb08 2816 	add.w	r8, r8, r6, lsr #8
 801bed2:	ea4f 2828 	mov.w	r8, r8, asr #8
 801bed6:	f805 8c01 	strb.w	r8, [r5, #-1]
 801beda:	9e12      	ldr	r6, [sp, #72]	@ 0x48
 801bedc:	4470      	add	r0, lr
 801bede:	3503      	adds	r5, #3
 801bee0:	f10a 3aff 	add.w	sl, sl, #4294967295
 801bee4:	4432      	add	r2, r6
 801bee6:	e7a7      	b.n	801be38 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801bee8:	2600      	movs	r6, #0
 801beea:	1b9d      	subs	r5, r3, r6
 801beec:	2d00      	cmp	r5, #0
 801beee:	dc3b      	bgt.n	801bf68 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 801bef0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801bef4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801bef8:	441c      	add	r4, r3
 801befa:	2900      	cmp	r1, #0
 801befc:	f340 80a8 	ble.w	801c050 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 801bf00:	ee30 0a04 	vadd.f32	s0, s0, s8
 801bf04:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801bf06:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801bf0a:	3901      	subs	r1, #1
 801bf0c:	eeb0 6a62 	vmov.f32	s12, s5
 801bf10:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801bf14:	ee31 1a05 	vadd.f32	s2, s2, s10
 801bf18:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801bf1c:	ed8d 6a0f 	vstr	s12, [sp, #60]	@ 0x3c
 801bf20:	eeb0 6a43 	vmov.f32	s12, s6
 801bf24:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801bf28:	ed8d 6a10 	vstr	s12, [sp, #64]	@ 0x40
 801bf2c:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801bf30:	ee61 7a27 	vmul.f32	s15, s2, s15
 801bf34:	ee77 2a62 	vsub.f32	s5, s14, s5
 801bf38:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801bf3c:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801bf40:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801bf44:	ee12 2a90 	vmov	r2, s5
 801bf48:	eef0 2a47 	vmov.f32	s5, s14
 801bf4c:	fb92 fef3 	sdiv	lr, r2, r3
 801bf50:	ee13 2a10 	vmov	r2, s6
 801bf54:	eeb0 3a67 	vmov.f32	s6, s15
 801bf58:	fb92 f3f3 	sdiv	r3, r2, r3
 801bf5c:	9a03      	ldr	r2, [sp, #12]
 801bf5e:	9312      	str	r3, [sp, #72]	@ 0x48
 801bf60:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801bf62:	bf08      	it	eq
 801bf64:	4613      	moveq	r3, r2
 801bf66:	e736      	b.n	801bdd6 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36>
 801bf68:	ea5f 4820 	movs.w	r8, r0, asr #16
 801bf6c:	d457      	bmi.n	801c01e <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 801bf6e:	f8dc 7008 	ldr.w	r7, [ip, #8]
 801bf72:	4547      	cmp	r7, r8
 801bf74:	dd53      	ble.n	801c01e <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 801bf76:	ea5f 4922 	movs.w	r9, r2, asr #16
 801bf7a:	d450      	bmi.n	801c01e <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 801bf7c:	f8dc 500c 	ldr.w	r5, [ip, #12]
 801bf80:	454d      	cmp	r5, r9
 801bf82:	dd4c      	ble.n	801c01e <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 801bf84:	9d01      	ldr	r5, [sp, #4]
 801bf86:	b23f      	sxth	r7, r7
 801bf88:	fb09 5707 	mla	r7, r9, r7, r5
 801bf8c:	f817 5008 	ldrb.w	r5, [r7, r8]
 801bf90:	9f02      	ldr	r7, [sp, #8]
 801bf92:	f857 5025 	ldr.w	r5, [r7, r5, lsl #2]
 801bf96:	0e2f      	lsrs	r7, r5, #24
 801bf98:	2fff      	cmp	r7, #255	@ 0xff
 801bf9a:	d045      	beq.n	801c028 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x288>
 801bf9c:	fa5f f987 	uxtb.w	r9, r7
 801bfa0:	b3ef      	cbz	r7, 801c01e <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 801bfa2:	fa1f f889 	uxth.w	r8, r9
 801bfa6:	ea6f 0909 	mvn.w	r9, r9
 801bfaa:	eb06 0746 	add.w	r7, r6, r6, lsl #1
 801bfae:	fa5f fb85 	uxtb.w	fp, r5
 801bfb2:	f814 a007 	ldrb.w	sl, [r4, r7]
 801bfb6:	fa5f f989 	uxtb.w	r9, r9
 801bfba:	fb1b fb08 	smulbb	fp, fp, r8
 801bfbe:	fb0a ba09 	mla	sl, sl, r9, fp
 801bfc2:	fa1f fa8a 	uxth.w	sl, sl
 801bfc6:	f10a 0b01 	add.w	fp, sl, #1
 801bfca:	eb0b 2a1a 	add.w	sl, fp, sl, lsr #8
 801bfce:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801bfd2:	f804 a007 	strb.w	sl, [r4, r7]
 801bfd6:	4427      	add	r7, r4
 801bfd8:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 801bfdc:	f3c5 4507 	ubfx	r5, r5, #16, #8
 801bfe0:	f897 b001 	ldrb.w	fp, [r7, #1]
 801bfe4:	fb1b fb09 	smulbb	fp, fp, r9
 801bfe8:	fb0a ba08 	mla	sl, sl, r8, fp
 801bfec:	fa1f fa8a 	uxth.w	sl, sl
 801bff0:	f10a 0b01 	add.w	fp, sl, #1
 801bff4:	eb0b 2a1a 	add.w	sl, fp, sl, lsr #8
 801bff8:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801bffc:	f887 a001 	strb.w	sl, [r7, #1]
 801c000:	f897 a002 	ldrb.w	sl, [r7, #2]
 801c004:	fb1a f909 	smulbb	r9, sl, r9
 801c008:	fb05 9508 	mla	r5, r5, r8, r9
 801c00c:	b2ad      	uxth	r5, r5
 801c00e:	f105 0901 	add.w	r9, r5, #1
 801c012:	eb09 2915 	add.w	r9, r9, r5, lsr #8
 801c016:	ea4f 2929 	mov.w	r9, r9, asr #8
 801c01a:	f887 9002 	strb.w	r9, [r7, #2]
 801c01e:	9d12      	ldr	r5, [sp, #72]	@ 0x48
 801c020:	4470      	add	r0, lr
 801c022:	3601      	adds	r6, #1
 801c024:	442a      	add	r2, r5
 801c026:	e760      	b.n	801beea <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 801c028:	eb06 0746 	add.w	r7, r6, r6, lsl #1
 801c02c:	ea4f 2815 	mov.w	r8, r5, lsr #8
 801c030:	55e5      	strb	r5, [r4, r7]
 801c032:	4427      	add	r7, r4
 801c034:	0c2d      	lsrs	r5, r5, #16
 801c036:	f887 8001 	strb.w	r8, [r7, #1]
 801c03a:	70bd      	strb	r5, [r7, #2]
 801c03c:	e7ef      	b.n	801c01e <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 801c03e:	0a37      	lsrs	r7, r6, #8
 801c040:	f805 6c03 	strb.w	r6, [r5, #-3]
 801c044:	0c36      	lsrs	r6, r6, #16
 801c046:	f805 7c02 	strb.w	r7, [r5, #-2]
 801c04a:	f805 6c01 	strb.w	r6, [r5, #-1]
 801c04e:	e744      	b.n	801beda <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 801c050:	b005      	add	sp, #20
 801c052:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801c056 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801c056:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c05a:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 801c05c:	9201      	str	r2, [sp, #4]
 801c05e:	6870      	ldr	r0, [r6, #4]
 801c060:	f89d 5054 	ldrb.w	r5, [sp, #84]	@ 0x54
 801c064:	f8dd c050 	ldr.w	ip, [sp, #80]	@ 0x50
 801c068:	fa1f fe85 	uxth.w	lr, r5
 801c06c:	43ed      	mvns	r5, r5
 801c06e:	f8dc 8000 	ldr.w	r8, [ip]
 801c072:	b2ed      	uxtb	r5, r5
 801c074:	e9dd 2412 	ldrd	r2, r4, [sp, #72]	@ 0x48
 801c078:	fb00 2404 	mla	r4, r0, r4, r2
 801c07c:	6832      	ldr	r2, [r6, #0]
 801c07e:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801c082:	4414      	add	r4, r2
 801c084:	2900      	cmp	r1, #0
 801c086:	dc03      	bgt.n	801c090 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 801c088:	9a01      	ldr	r2, [sp, #4]
 801c08a:	2a00      	cmp	r2, #0
 801c08c:	f340 810d 	ble.w	801c2aa <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x254>
 801c090:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801c092:	f9bc a008 	ldrsh.w	sl, [ip, #8]
 801c096:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 801c09a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801c09c:	f9bc 900c 	ldrsh.w	r9, [ip, #12]
 801c0a0:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 801c0a4:	2b00      	cmp	r3, #0
 801c0a6:	dd0e      	ble.n	801c0c6 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801c0a8:	1406      	asrs	r6, r0, #16
 801c0aa:	d405      	bmi.n	801c0b8 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 801c0ac:	4556      	cmp	r6, sl
 801c0ae:	da03      	bge.n	801c0b8 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 801c0b0:	1416      	asrs	r6, r2, #16
 801c0b2:	d401      	bmi.n	801c0b8 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 801c0b4:	454e      	cmp	r6, r9
 801c0b6:	db07      	blt.n	801c0c8 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801c0b8:	9e0f      	ldr	r6, [sp, #60]	@ 0x3c
 801c0ba:	3b01      	subs	r3, #1
 801c0bc:	3403      	adds	r4, #3
 801c0be:	4430      	add	r0, r6
 801c0c0:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 801c0c2:	4432      	add	r2, r6
 801c0c4:	e7ee      	b.n	801c0a4 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e>
 801c0c6:	d060      	beq.n	801c18a <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x134>
 801c0c8:	1e5e      	subs	r6, r3, #1
 801c0ca:	9f0f      	ldr	r7, [sp, #60]	@ 0x3c
 801c0cc:	fb07 0706 	mla	r7, r7, r6, r0
 801c0d0:	143f      	asrs	r7, r7, #16
 801c0d2:	d451      	bmi.n	801c178 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 801c0d4:	4557      	cmp	r7, sl
 801c0d6:	da4f      	bge.n	801c178 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 801c0d8:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 801c0da:	fb07 2606 	mla	r6, r7, r6, r2
 801c0de:	1436      	asrs	r6, r6, #16
 801c0e0:	d44a      	bmi.n	801c178 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 801c0e2:	454e      	cmp	r6, r9
 801c0e4:	da48      	bge.n	801c178 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 801c0e6:	1ce6      	adds	r6, r4, #3
 801c0e8:	4699      	mov	r9, r3
 801c0ea:	f1b9 0f00 	cmp.w	r9, #0
 801c0ee:	f106 0603 	add.w	r6, r6, #3
 801c0f2:	dd45      	ble.n	801c180 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x12a>
 801c0f4:	f9bc b008 	ldrsh.w	fp, [ip, #8]
 801c0f8:	ea4f 4a20 	mov.w	sl, r0, asr #16
 801c0fc:	1417      	asrs	r7, r2, #16
 801c0fe:	f109 39ff 	add.w	r9, r9, #4294967295
 801c102:	fb0b a707 	mla	r7, fp, r7, sl
 801c106:	f816 bc06 	ldrb.w	fp, [r6, #-6]
 801c10a:	fb1b fb05 	smulbb	fp, fp, r5
 801c10e:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801c112:	eb08 0a07 	add.w	sl, r8, r7
 801c116:	f818 7007 	ldrb.w	r7, [r8, r7]
 801c11a:	fb07 b70e 	mla	r7, r7, lr, fp
 801c11e:	b2bf      	uxth	r7, r7
 801c120:	f107 0b01 	add.w	fp, r7, #1
 801c124:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 801c128:	f816 bc05 	ldrb.w	fp, [r6, #-5]
 801c12c:	fb1b fb05 	smulbb	fp, fp, r5
 801c130:	123f      	asrs	r7, r7, #8
 801c132:	f806 7c06 	strb.w	r7, [r6, #-6]
 801c136:	f89a 7001 	ldrb.w	r7, [sl, #1]
 801c13a:	fb07 b70e 	mla	r7, r7, lr, fp
 801c13e:	b2bf      	uxth	r7, r7
 801c140:	f107 0b01 	add.w	fp, r7, #1
 801c144:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 801c148:	123f      	asrs	r7, r7, #8
 801c14a:	f806 7c05 	strb.w	r7, [r6, #-5]
 801c14e:	f89a 7002 	ldrb.w	r7, [sl, #2]
 801c152:	f816 ac04 	ldrb.w	sl, [r6, #-4]
 801c156:	fb1a fa05 	smulbb	sl, sl, r5
 801c15a:	fb07 a70e 	mla	r7, r7, lr, sl
 801c15e:	b2bf      	uxth	r7, r7
 801c160:	f107 0a01 	add.w	sl, r7, #1
 801c164:	eb0a 2717 	add.w	r7, sl, r7, lsr #8
 801c168:	123f      	asrs	r7, r7, #8
 801c16a:	f806 7c04 	strb.w	r7, [r6, #-4]
 801c16e:	9f0f      	ldr	r7, [sp, #60]	@ 0x3c
 801c170:	4438      	add	r0, r7
 801c172:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 801c174:	443a      	add	r2, r7
 801c176:	e7b8      	b.n	801c0ea <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801c178:	2700      	movs	r7, #0
 801c17a:	1bde      	subs	r6, r3, r7
 801c17c:	2e00      	cmp	r6, #0
 801c17e:	dc3f      	bgt.n	801c200 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1aa>
 801c180:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801c184:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801c188:	441c      	add	r4, r3
 801c18a:	2900      	cmp	r1, #0
 801c18c:	f340 808d 	ble.w	801c2aa <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x254>
 801c190:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801c194:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801c196:	ee30 0a04 	vadd.f32	s0, s0, s8
 801c19a:	3901      	subs	r1, #1
 801c19c:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801c1a0:	eef0 6a62 	vmov.f32	s13, s5
 801c1a4:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801c1a8:	ee31 1a05 	vadd.f32	s2, s2, s10
 801c1ac:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801c1b0:	edcd 6a0d 	vstr	s13, [sp, #52]	@ 0x34
 801c1b4:	eef0 6a43 	vmov.f32	s13, s6
 801c1b8:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801c1bc:	edcd 6a0e 	vstr	s13, [sp, #56]	@ 0x38
 801c1c0:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801c1c4:	ee61 7a27 	vmul.f32	s15, s2, s15
 801c1c8:	ee77 2a62 	vsub.f32	s5, s14, s5
 801c1cc:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801c1d0:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801c1d4:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801c1d8:	ee12 2a90 	vmov	r2, s5
 801c1dc:	eef0 2a47 	vmov.f32	s5, s14
 801c1e0:	fb92 f3f3 	sdiv	r3, r2, r3
 801c1e4:	ee13 2a10 	vmov	r2, s6
 801c1e8:	930f      	str	r3, [sp, #60]	@ 0x3c
 801c1ea:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801c1ec:	eeb0 3a67 	vmov.f32	s6, s15
 801c1f0:	fb92 f3f3 	sdiv	r3, r2, r3
 801c1f4:	9a01      	ldr	r2, [sp, #4]
 801c1f6:	9310      	str	r3, [sp, #64]	@ 0x40
 801c1f8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801c1fa:	bf08      	it	eq
 801c1fc:	4613      	moveq	r3, r2
 801c1fe:	e741      	b.n	801c084 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 801c200:	ea5f 4920 	movs.w	r9, r0, asr #16
 801c204:	d44b      	bmi.n	801c29e <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 801c206:	f8dc b008 	ldr.w	fp, [ip, #8]
 801c20a:	45cb      	cmp	fp, r9
 801c20c:	dd47      	ble.n	801c29e <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 801c20e:	ea5f 4a22 	movs.w	sl, r2, asr #16
 801c212:	d444      	bmi.n	801c29e <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 801c214:	f8dc 600c 	ldr.w	r6, [ip, #12]
 801c218:	4556      	cmp	r6, sl
 801c21a:	dd40      	ble.n	801c29e <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 801c21c:	fa0f f68b 	sxth.w	r6, fp
 801c220:	fb0a 9906 	mla	r9, sl, r6, r9
 801c224:	eb07 0647 	add.w	r6, r7, r7, lsl #1
 801c228:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 801c22c:	f814 b006 	ldrb.w	fp, [r4, r6]
 801c230:	fb1b fb05 	smulbb	fp, fp, r5
 801c234:	eb08 0a09 	add.w	sl, r8, r9
 801c238:	f818 9009 	ldrb.w	r9, [r8, r9]
 801c23c:	fb09 b90e 	mla	r9, r9, lr, fp
 801c240:	fa1f f989 	uxth.w	r9, r9
 801c244:	f109 0b01 	add.w	fp, r9, #1
 801c248:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801c24c:	ea4f 2929 	mov.w	r9, r9, asr #8
 801c250:	f804 9006 	strb.w	r9, [r4, r6]
 801c254:	4426      	add	r6, r4
 801c256:	f89a 9001 	ldrb.w	r9, [sl, #1]
 801c25a:	f896 b001 	ldrb.w	fp, [r6, #1]
 801c25e:	fb1b fb05 	smulbb	fp, fp, r5
 801c262:	fb09 b90e 	mla	r9, r9, lr, fp
 801c266:	fa1f f989 	uxth.w	r9, r9
 801c26a:	f109 0b01 	add.w	fp, r9, #1
 801c26e:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801c272:	ea4f 2929 	mov.w	r9, r9, asr #8
 801c276:	f886 9001 	strb.w	r9, [r6, #1]
 801c27a:	f89a 9002 	ldrb.w	r9, [sl, #2]
 801c27e:	f896 a002 	ldrb.w	sl, [r6, #2]
 801c282:	fb1a fa05 	smulbb	sl, sl, r5
 801c286:	fb09 a90e 	mla	r9, r9, lr, sl
 801c28a:	fa1f f989 	uxth.w	r9, r9
 801c28e:	f109 0a01 	add.w	sl, r9, #1
 801c292:	eb0a 2919 	add.w	r9, sl, r9, lsr #8
 801c296:	ea4f 2929 	mov.w	r9, r9, asr #8
 801c29a:	f886 9002 	strb.w	r9, [r6, #2]
 801c29e:	9e0f      	ldr	r6, [sp, #60]	@ 0x3c
 801c2a0:	3701      	adds	r7, #1
 801c2a2:	4430      	add	r0, r6
 801c2a4:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 801c2a6:	4432      	add	r2, r6
 801c2a8:	e767      	b.n	801c17a <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x124>
 801c2aa:	b003      	add	sp, #12
 801c2ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801c2b0 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801c2b0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c2b4:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 801c2b6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801c2ba:	9201      	str	r2, [sp, #4]
 801c2bc:	6868      	ldr	r0, [r5, #4]
 801c2be:	9f14      	ldr	r7, [sp, #80]	@ 0x50
 801c2c0:	e9dd 2412 	ldrd	r2, r4, [sp, #72]	@ 0x48
 801c2c4:	e9dd ec0f 	ldrd	lr, ip, [sp, #60]	@ 0x3c
 801c2c8:	fb00 2404 	mla	r4, r0, r4, r2
 801c2cc:	682a      	ldr	r2, [r5, #0]
 801c2ce:	f8d7 8000 	ldr.w	r8, [r7]
 801c2d2:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801c2d6:	4414      	add	r4, r2
 801c2d8:	2900      	cmp	r1, #0
 801c2da:	dc03      	bgt.n	801c2e4 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 801c2dc:	9a01      	ldr	r2, [sp, #4]
 801c2de:	2a00      	cmp	r2, #0
 801c2e0:	f340 80af 	ble.w	801c442 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x192>
 801c2e4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801c2e6:	f9b7 a008 	ldrsh.w	sl, [r7, #8]
 801c2ea:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 801c2ee:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801c2f0:	f9b7 900c 	ldrsh.w	r9, [r7, #12]
 801c2f4:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 801c2f8:	2b00      	cmp	r3, #0
 801c2fa:	dd0c      	ble.n	801c316 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801c2fc:	1405      	asrs	r5, r0, #16
 801c2fe:	d405      	bmi.n	801c30c <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801c300:	4555      	cmp	r5, sl
 801c302:	da03      	bge.n	801c30c <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801c304:	1415      	asrs	r5, r2, #16
 801c306:	d401      	bmi.n	801c30c <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801c308:	454d      	cmp	r5, r9
 801c30a:	db05      	blt.n	801c318 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801c30c:	4470      	add	r0, lr
 801c30e:	4462      	add	r2, ip
 801c310:	3b01      	subs	r3, #1
 801c312:	3403      	adds	r4, #3
 801c314:	e7f0      	b.n	801c2f8 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 801c316:	d038      	beq.n	801c38a <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 801c318:	1e5d      	subs	r5, r3, #1
 801c31a:	fb0e 0605 	mla	r6, lr, r5, r0
 801c31e:	1436      	asrs	r6, r6, #16
 801c320:	d42a      	bmi.n	801c378 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 801c322:	4556      	cmp	r6, sl
 801c324:	da28      	bge.n	801c378 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 801c326:	fb0c 2505 	mla	r5, ip, r5, r2
 801c32a:	142d      	asrs	r5, r5, #16
 801c32c:	d424      	bmi.n	801c378 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 801c32e:	454d      	cmp	r5, r9
 801c330:	da22      	bge.n	801c378 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 801c332:	1ce6      	adds	r6, r4, #3
 801c334:	4699      	mov	r9, r3
 801c336:	f1b9 0f00 	cmp.w	r9, #0
 801c33a:	f106 0603 	add.w	r6, r6, #3
 801c33e:	dd1f      	ble.n	801c380 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xd0>
 801c340:	f9b7 b008 	ldrsh.w	fp, [r7, #8]
 801c344:	ea4f 4a20 	mov.w	sl, r0, asr #16
 801c348:	1415      	asrs	r5, r2, #16
 801c34a:	4470      	add	r0, lr
 801c34c:	4462      	add	r2, ip
 801c34e:	f109 39ff 	add.w	r9, r9, #4294967295
 801c352:	fb0b a505 	mla	r5, fp, r5, sl
 801c356:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801c35a:	eb08 0a05 	add.w	sl, r8, r5
 801c35e:	f818 5005 	ldrb.w	r5, [r8, r5]
 801c362:	f806 5c06 	strb.w	r5, [r6, #-6]
 801c366:	f89a 5001 	ldrb.w	r5, [sl, #1]
 801c36a:	f806 5c05 	strb.w	r5, [r6, #-5]
 801c36e:	f89a 5002 	ldrb.w	r5, [sl, #2]
 801c372:	f806 5c04 	strb.w	r5, [r6, #-4]
 801c376:	e7de      	b.n	801c336 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 801c378:	2600      	movs	r6, #0
 801c37a:	1b9d      	subs	r5, r3, r6
 801c37c:	2d00      	cmp	r5, #0
 801c37e:	dc38      	bgt.n	801c3f2 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 801c380:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801c384:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801c388:	441c      	add	r4, r3
 801c38a:	2900      	cmp	r1, #0
 801c38c:	dd59      	ble.n	801c442 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x192>
 801c38e:	ee30 0a04 	vadd.f32	s0, s0, s8
 801c392:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801c394:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801c398:	3901      	subs	r1, #1
 801c39a:	eeb0 6a62 	vmov.f32	s12, s5
 801c39e:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801c3a2:	ee31 1a05 	vadd.f32	s2, s2, s10
 801c3a6:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801c3aa:	ed8d 6a0d 	vstr	s12, [sp, #52]	@ 0x34
 801c3ae:	eeb0 6a43 	vmov.f32	s12, s6
 801c3b2:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801c3b6:	ed8d 6a0e 	vstr	s12, [sp, #56]	@ 0x38
 801c3ba:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801c3be:	ee61 7a27 	vmul.f32	s15, s2, s15
 801c3c2:	ee77 2a62 	vsub.f32	s5, s14, s5
 801c3c6:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801c3ca:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801c3ce:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801c3d2:	ee12 2a90 	vmov	r2, s5
 801c3d6:	eef0 2a47 	vmov.f32	s5, s14
 801c3da:	fb92 fef3 	sdiv	lr, r2, r3
 801c3de:	ee13 2a10 	vmov	r2, s6
 801c3e2:	eeb0 3a67 	vmov.f32	s6, s15
 801c3e6:	fb92 fcf3 	sdiv	ip, r2, r3
 801c3ea:	9a01      	ldr	r2, [sp, #4]
 801c3ec:	bf08      	it	eq
 801c3ee:	4613      	moveq	r3, r2
 801c3f0:	e772      	b.n	801c2d8 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28>
 801c3f2:	ea5f 4920 	movs.w	r9, r0, asr #16
 801c3f6:	d420      	bmi.n	801c43a <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 801c3f8:	f8d7 b008 	ldr.w	fp, [r7, #8]
 801c3fc:	45cb      	cmp	fp, r9
 801c3fe:	dd1c      	ble.n	801c43a <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 801c400:	ea5f 4a22 	movs.w	sl, r2, asr #16
 801c404:	d419      	bmi.n	801c43a <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 801c406:	68fd      	ldr	r5, [r7, #12]
 801c408:	4555      	cmp	r5, sl
 801c40a:	dd16      	ble.n	801c43a <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 801c40c:	fa0f f58b 	sxth.w	r5, fp
 801c410:	fb0a 9505 	mla	r5, sl, r5, r9
 801c414:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801c418:	f818 9005 	ldrb.w	r9, [r8, r5]
 801c41c:	eb08 0b05 	add.w	fp, r8, r5
 801c420:	eb06 0546 	add.w	r5, r6, r6, lsl #1
 801c424:	f804 9005 	strb.w	r9, [r4, r5]
 801c428:	4425      	add	r5, r4
 801c42a:	f89b 9001 	ldrb.w	r9, [fp, #1]
 801c42e:	f885 9001 	strb.w	r9, [r5, #1]
 801c432:	f89b 9002 	ldrb.w	r9, [fp, #2]
 801c436:	f885 9002 	strb.w	r9, [r5, #2]
 801c43a:	4470      	add	r0, lr
 801c43c:	4462      	add	r2, ip
 801c43e:	3601      	adds	r6, #1
 801c440:	e79b      	b.n	801c37a <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xca>
 801c442:	b003      	add	sp, #12
 801c444:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801c448 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801c448:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c44c:	b085      	sub	sp, #20
 801c44e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801c452:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801c454:	9202      	str	r2, [sp, #8]
 801c456:	f89d 205c 	ldrb.w	r2, [sp, #92]	@ 0x5c
 801c45a:	6860      	ldr	r0, [r4, #4]
 801c45c:	9203      	str	r2, [sp, #12]
 801c45e:	f8dd c058 	ldr.w	ip, [sp, #88]	@ 0x58
 801c462:	f8dd e044 	ldr.w	lr, [sp, #68]	@ 0x44
 801c466:	e9dd 2514 	ldrd	r2, r5, [sp, #80]	@ 0x50
 801c46a:	fb00 2505 	mla	r5, r0, r5, r2
 801c46e:	6822      	ldr	r2, [r4, #0]
 801c470:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801c474:	4415      	add	r5, r2
 801c476:	f8dc 2000 	ldr.w	r2, [ip]
 801c47a:	9201      	str	r2, [sp, #4]
 801c47c:	2900      	cmp	r1, #0
 801c47e:	dc03      	bgt.n	801c488 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
 801c480:	9a02      	ldr	r2, [sp, #8]
 801c482:	2a00      	cmp	r2, #0
 801c484:	f340 8122 	ble.w	801c6cc <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x284>
 801c488:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801c48a:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 801c48e:	f502 4400 	add.w	r4, r2, #32768	@ 0x8000
 801c492:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801c494:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 801c498:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 801c49c:	2b00      	cmp	r3, #0
 801c49e:	dd0d      	ble.n	801c4bc <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 801c4a0:	1422      	asrs	r2, r4, #16
 801c4a2:	d405      	bmi.n	801c4b0 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801c4a4:	4542      	cmp	r2, r8
 801c4a6:	da03      	bge.n	801c4b0 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801c4a8:	1402      	asrs	r2, r0, #16
 801c4aa:	d401      	bmi.n	801c4b0 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801c4ac:	42ba      	cmp	r2, r7
 801c4ae:	db06      	blt.n	801c4be <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801c4b0:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801c4b2:	4474      	add	r4, lr
 801c4b4:	3b01      	subs	r3, #1
 801c4b6:	3503      	adds	r5, #3
 801c4b8:	4410      	add	r0, r2
 801c4ba:	e7ef      	b.n	801c49c <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
 801c4bc:	d072      	beq.n	801c5a4 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15c>
 801c4be:	1e5a      	subs	r2, r3, #1
 801c4c0:	fb0e 4602 	mla	r6, lr, r2, r4
 801c4c4:	1436      	asrs	r6, r6, #16
 801c4c6:	d462      	bmi.n	801c58e <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 801c4c8:	4546      	cmp	r6, r8
 801c4ca:	da60      	bge.n	801c58e <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 801c4cc:	9e12      	ldr	r6, [sp, #72]	@ 0x48
 801c4ce:	fb06 0202 	mla	r2, r6, r2, r0
 801c4d2:	1412      	asrs	r2, r2, #16
 801c4d4:	d45b      	bmi.n	801c58e <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 801c4d6:	42ba      	cmp	r2, r7
 801c4d8:	da59      	bge.n	801c58e <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 801c4da:	1cef      	adds	r7, r5, #3
 801c4dc:	4699      	mov	r9, r3
 801c4de:	f1b9 0f00 	cmp.w	r9, #0
 801c4e2:	dd5a      	ble.n	801c59a <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801c4e4:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 801c4e8:	1426      	asrs	r6, r4, #16
 801c4ea:	1402      	asrs	r2, r0, #16
 801c4ec:	fb08 6202 	mla	r2, r8, r2, r6
 801c4f0:	9e01      	ldr	r6, [sp, #4]
 801c4f2:	f856 6022 	ldr.w	r6, [r6, r2, lsl #2]
 801c4f6:	ea5f 6816 	movs.w	r8, r6, lsr #24
 801c4fa:	d041      	beq.n	801c580 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 801c4fc:	9a03      	ldr	r2, [sp, #12]
 801c4fe:	fa5f fb86 	uxtb.w	fp, r6
 801c502:	fb02 f808 	mul.w	r8, r2, r8
 801c506:	f108 0201 	add.w	r2, r8, #1
 801c50a:	eb02 2228 	add.w	r2, r2, r8, asr #8
 801c50e:	f817 8c03 	ldrb.w	r8, [r7, #-3]
 801c512:	1212      	asrs	r2, r2, #8
 801c514:	fa1f fa82 	uxth.w	sl, r2
 801c518:	43d2      	mvns	r2, r2
 801c51a:	fb1b fb0a 	smulbb	fp, fp, sl
 801c51e:	b2d2      	uxtb	r2, r2
 801c520:	fb08 b802 	mla	r8, r8, r2, fp
 801c524:	fa1f f888 	uxth.w	r8, r8
 801c528:	f108 0b01 	add.w	fp, r8, #1
 801c52c:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 801c530:	f3c6 2b07 	ubfx	fp, r6, #8, #8
 801c534:	f3c6 4607 	ubfx	r6, r6, #16, #8
 801c538:	fb1b fb0a 	smulbb	fp, fp, sl
 801c53c:	ea4f 2828 	mov.w	r8, r8, asr #8
 801c540:	fb16 fa0a 	smulbb	sl, r6, sl
 801c544:	f817 6c01 	ldrb.w	r6, [r7, #-1]
 801c548:	f807 8c03 	strb.w	r8, [r7, #-3]
 801c54c:	f817 8c02 	ldrb.w	r8, [r7, #-2]
 801c550:	fb06 aa02 	mla	sl, r6, r2, sl
 801c554:	fb08 b802 	mla	r8, r8, r2, fp
 801c558:	fa1f fa8a 	uxth.w	sl, sl
 801c55c:	fa1f f888 	uxth.w	r8, r8
 801c560:	f10a 0601 	add.w	r6, sl, #1
 801c564:	f108 0b01 	add.w	fp, r8, #1
 801c568:	eb06 2a1a 	add.w	sl, r6, sl, lsr #8
 801c56c:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 801c570:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801c574:	ea4f 2828 	mov.w	r8, r8, asr #8
 801c578:	f807 ac01 	strb.w	sl, [r7, #-1]
 801c57c:	f807 8c02 	strb.w	r8, [r7, #-2]
 801c580:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801c582:	4474      	add	r4, lr
 801c584:	3703      	adds	r7, #3
 801c586:	f109 39ff 	add.w	r9, r9, #4294967295
 801c58a:	4410      	add	r0, r2
 801c58c:	e7a7      	b.n	801c4de <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801c58e:	f04f 0800 	mov.w	r8, #0
 801c592:	eba3 0208 	sub.w	r2, r3, r8
 801c596:	2a00      	cmp	r2, #0
 801c598:	dc3b      	bgt.n	801c612 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ca>
 801c59a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801c59e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801c5a2:	441d      	add	r5, r3
 801c5a4:	2900      	cmp	r1, #0
 801c5a6:	f340 8091 	ble.w	801c6cc <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x284>
 801c5aa:	ee30 0a04 	vadd.f32	s0, s0, s8
 801c5ae:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801c5b0:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801c5b4:	3901      	subs	r1, #1
 801c5b6:	eeb0 6a62 	vmov.f32	s12, s5
 801c5ba:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801c5be:	ee31 1a05 	vadd.f32	s2, s2, s10
 801c5c2:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801c5c6:	ed8d 6a0f 	vstr	s12, [sp, #60]	@ 0x3c
 801c5ca:	eeb0 6a43 	vmov.f32	s12, s6
 801c5ce:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801c5d2:	ed8d 6a10 	vstr	s12, [sp, #64]	@ 0x40
 801c5d6:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801c5da:	ee61 7a27 	vmul.f32	s15, s2, s15
 801c5de:	ee77 2a62 	vsub.f32	s5, s14, s5
 801c5e2:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801c5e6:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801c5ea:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801c5ee:	ee12 2a90 	vmov	r2, s5
 801c5f2:	eef0 2a47 	vmov.f32	s5, s14
 801c5f6:	fb92 fef3 	sdiv	lr, r2, r3
 801c5fa:	ee13 2a10 	vmov	r2, s6
 801c5fe:	eeb0 3a67 	vmov.f32	s6, s15
 801c602:	fb92 f3f3 	sdiv	r3, r2, r3
 801c606:	9a02      	ldr	r2, [sp, #8]
 801c608:	9312      	str	r3, [sp, #72]	@ 0x48
 801c60a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801c60c:	bf08      	it	eq
 801c60e:	4613      	moveq	r3, r2
 801c610:	e734      	b.n	801c47c <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 801c612:	1427      	asrs	r7, r4, #16
 801c614:	d454      	bmi.n	801c6c0 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 801c616:	f8dc 6008 	ldr.w	r6, [ip, #8]
 801c61a:	42be      	cmp	r6, r7
 801c61c:	dd50      	ble.n	801c6c0 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 801c61e:	ea5f 4920 	movs.w	r9, r0, asr #16
 801c622:	d44d      	bmi.n	801c6c0 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 801c624:	f8dc 200c 	ldr.w	r2, [ip, #12]
 801c628:	454a      	cmp	r2, r9
 801c62a:	dd49      	ble.n	801c6c0 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 801c62c:	b236      	sxth	r6, r6
 801c62e:	9a01      	ldr	r2, [sp, #4]
 801c630:	fb09 7606 	mla	r6, r9, r6, r7
 801c634:	f852 7026 	ldr.w	r7, [r2, r6, lsl #2]
 801c638:	0e3a      	lsrs	r2, r7, #24
 801c63a:	d041      	beq.n	801c6c0 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 801c63c:	9e03      	ldr	r6, [sp, #12]
 801c63e:	fa5f fb87 	uxtb.w	fp, r7
 801c642:	4372      	muls	r2, r6
 801c644:	1c56      	adds	r6, r2, #1
 801c646:	eb06 2222 	add.w	r2, r6, r2, asr #8
 801c64a:	eb08 0648 	add.w	r6, r8, r8, lsl #1
 801c64e:	1212      	asrs	r2, r2, #8
 801c650:	f815 9006 	ldrb.w	r9, [r5, r6]
 801c654:	fa1f fa82 	uxth.w	sl, r2
 801c658:	43d2      	mvns	r2, r2
 801c65a:	fb1b fb0a 	smulbb	fp, fp, sl
 801c65e:	b2d2      	uxtb	r2, r2
 801c660:	fb09 b902 	mla	r9, r9, r2, fp
 801c664:	fa1f f989 	uxth.w	r9, r9
 801c668:	f109 0b01 	add.w	fp, r9, #1
 801c66c:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801c670:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 801c674:	f3c7 4707 	ubfx	r7, r7, #16, #8
 801c678:	fb1b fb0a 	smulbb	fp, fp, sl
 801c67c:	ea4f 2929 	mov.w	r9, r9, asr #8
 801c680:	fb17 fa0a 	smulbb	sl, r7, sl
 801c684:	f805 9006 	strb.w	r9, [r5, r6]
 801c688:	442e      	add	r6, r5
 801c68a:	78b7      	ldrb	r7, [r6, #2]
 801c68c:	f896 9001 	ldrb.w	r9, [r6, #1]
 801c690:	fb07 aa02 	mla	sl, r7, r2, sl
 801c694:	fb09 b902 	mla	r9, r9, r2, fp
 801c698:	fa1f fa8a 	uxth.w	sl, sl
 801c69c:	fa1f f989 	uxth.w	r9, r9
 801c6a0:	f10a 0701 	add.w	r7, sl, #1
 801c6a4:	f109 0b01 	add.w	fp, r9, #1
 801c6a8:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801c6ac:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801c6b0:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801c6b4:	ea4f 2929 	mov.w	r9, r9, asr #8
 801c6b8:	f886 a002 	strb.w	sl, [r6, #2]
 801c6bc:	f886 9001 	strb.w	r9, [r6, #1]
 801c6c0:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801c6c2:	4474      	add	r4, lr
 801c6c4:	f108 0801 	add.w	r8, r8, #1
 801c6c8:	4410      	add	r0, r2
 801c6ca:	e762      	b.n	801c592 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 801c6cc:	b005      	add	sp, #20
 801c6ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801c6d2 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801c6d2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c6d6:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 801c6d8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801c6dc:	9201      	str	r2, [sp, #4]
 801c6de:	6860      	ldr	r0, [r4, #4]
 801c6e0:	f8dd c050 	ldr.w	ip, [sp, #80]	@ 0x50
 801c6e4:	e9dd 2512 	ldrd	r2, r5, [sp, #72]	@ 0x48
 801c6e8:	fb00 2505 	mla	r5, r0, r5, r2
 801c6ec:	6822      	ldr	r2, [r4, #0]
 801c6ee:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801c6f2:	4415      	add	r5, r2
 801c6f4:	f8dc 2000 	ldr.w	r2, [ip]
 801c6f8:	9200      	str	r2, [sp, #0]
 801c6fa:	2900      	cmp	r1, #0
 801c6fc:	dc03      	bgt.n	801c706 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 801c6fe:	9a01      	ldr	r2, [sp, #4]
 801c700:	2a00      	cmp	r2, #0
 801c702:	f340 812b 	ble.w	801c95c <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 801c706:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801c708:	f9bc e008 	ldrsh.w	lr, [ip, #8]
 801c70c:	f502 4400 	add.w	r4, r2, #32768	@ 0x8000
 801c710:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801c712:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 801c716:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 801c71a:	2b00      	cmp	r3, #0
 801c71c:	dd0e      	ble.n	801c73c <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801c71e:	1422      	asrs	r2, r4, #16
 801c720:	d405      	bmi.n	801c72e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801c722:	4572      	cmp	r2, lr
 801c724:	da03      	bge.n	801c72e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801c726:	1402      	asrs	r2, r0, #16
 801c728:	d401      	bmi.n	801c72e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801c72a:	42ba      	cmp	r2, r7
 801c72c:	db07      	blt.n	801c73e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801c72e:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801c730:	3b01      	subs	r3, #1
 801c732:	3503      	adds	r5, #3
 801c734:	4414      	add	r4, r2
 801c736:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801c738:	4410      	add	r0, r2
 801c73a:	e7ee      	b.n	801c71a <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 801c73c:	d06f      	beq.n	801c81e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 801c73e:	1e5a      	subs	r2, r3, #1
 801c740:	9e0f      	ldr	r6, [sp, #60]	@ 0x3c
 801c742:	fb06 4602 	mla	r6, r6, r2, r4
 801c746:	1436      	asrs	r6, r6, #16
 801c748:	d45e      	bmi.n	801c808 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 801c74a:	4576      	cmp	r6, lr
 801c74c:	da5c      	bge.n	801c808 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 801c74e:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 801c750:	fb06 0202 	mla	r2, r6, r2, r0
 801c754:	1412      	asrs	r2, r2, #16
 801c756:	d457      	bmi.n	801c808 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 801c758:	42ba      	cmp	r2, r7
 801c75a:	da55      	bge.n	801c808 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 801c75c:	1cee      	adds	r6, r5, #3
 801c75e:	469a      	mov	sl, r3
 801c760:	f1ba 0f00 	cmp.w	sl, #0
 801c764:	dd56      	ble.n	801c814 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 801c766:	f9bc e008 	ldrsh.w	lr, [ip, #8]
 801c76a:	1427      	asrs	r7, r4, #16
 801c76c:	1402      	asrs	r2, r0, #16
 801c76e:	fb0e 7202 	mla	r2, lr, r2, r7
 801c772:	9f00      	ldr	r7, [sp, #0]
 801c774:	f857 7022 	ldr.w	r7, [r7, r2, lsl #2]
 801c778:	ea5f 6e17 	movs.w	lr, r7, lsr #24
 801c77c:	d03c      	beq.n	801c7f8 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 801c77e:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 801c782:	f3c7 4b07 	ubfx	fp, r7, #16, #8
 801c786:	f3c7 2907 	ubfx	r9, r7, #8, #8
 801c78a:	fa5f f28e 	uxtb.w	r2, lr
 801c78e:	b2ff      	uxtb	r7, r7
 801c790:	f000 80dd 	beq.w	801c94e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 801c794:	fa1f f882 	uxth.w	r8, r2
 801c798:	43d2      	mvns	r2, r2
 801c79a:	f816 ec03 	ldrb.w	lr, [r6, #-3]
 801c79e:	fb17 f708 	smulbb	r7, r7, r8
 801c7a2:	b2d2      	uxtb	r2, r2
 801c7a4:	fb19 f908 	smulbb	r9, r9, r8
 801c7a8:	fb0e 7702 	mla	r7, lr, r2, r7
 801c7ac:	fb1b f808 	smulbb	r8, fp, r8
 801c7b0:	b2bf      	uxth	r7, r7
 801c7b2:	f107 0e01 	add.w	lr, r7, #1
 801c7b6:	eb0e 2717 	add.w	r7, lr, r7, lsr #8
 801c7ba:	123f      	asrs	r7, r7, #8
 801c7bc:	f806 7c03 	strb.w	r7, [r6, #-3]
 801c7c0:	f816 7c02 	ldrb.w	r7, [r6, #-2]
 801c7c4:	fb07 9902 	mla	r9, r7, r2, r9
 801c7c8:	fa1f f989 	uxth.w	r9, r9
 801c7cc:	f109 0701 	add.w	r7, r9, #1
 801c7d0:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 801c7d4:	f816 7c01 	ldrb.w	r7, [r6, #-1]
 801c7d8:	fb07 8802 	mla	r8, r7, r2, r8
 801c7dc:	ea4f 2929 	mov.w	r9, r9, asr #8
 801c7e0:	fa1f f888 	uxth.w	r8, r8
 801c7e4:	f806 9c02 	strb.w	r9, [r6, #-2]
 801c7e8:	f108 0201 	add.w	r2, r8, #1
 801c7ec:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 801c7f0:	ea4f 2828 	mov.w	r8, r8, asr #8
 801c7f4:	f806 8c01 	strb.w	r8, [r6, #-1]
 801c7f8:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801c7fa:	3603      	adds	r6, #3
 801c7fc:	f10a 3aff 	add.w	sl, sl, #4294967295
 801c800:	4414      	add	r4, r2
 801c802:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801c804:	4410      	add	r0, r2
 801c806:	e7ab      	b.n	801c760 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 801c808:	f04f 0e00 	mov.w	lr, #0
 801c80c:	eba3 020e 	sub.w	r2, r3, lr
 801c810:	2a00      	cmp	r2, #0
 801c812:	dc3d      	bgt.n	801c890 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1be>
 801c814:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801c818:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801c81c:	441d      	add	r5, r3
 801c81e:	2900      	cmp	r1, #0
 801c820:	f340 809c 	ble.w	801c95c <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 801c824:	ee30 0a04 	vadd.f32	s0, s0, s8
 801c828:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801c82a:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801c82e:	3901      	subs	r1, #1
 801c830:	eeb0 6a62 	vmov.f32	s12, s5
 801c834:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801c838:	ee31 1a05 	vadd.f32	s2, s2, s10
 801c83c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801c840:	ed8d 6a0d 	vstr	s12, [sp, #52]	@ 0x34
 801c844:	eeb0 6a43 	vmov.f32	s12, s6
 801c848:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801c84c:	ed8d 6a0e 	vstr	s12, [sp, #56]	@ 0x38
 801c850:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801c854:	ee61 7a27 	vmul.f32	s15, s2, s15
 801c858:	ee77 2a62 	vsub.f32	s5, s14, s5
 801c85c:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801c860:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801c864:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801c868:	ee12 2a90 	vmov	r2, s5
 801c86c:	eef0 2a47 	vmov.f32	s5, s14
 801c870:	fb92 f3f3 	sdiv	r3, r2, r3
 801c874:	ee13 2a10 	vmov	r2, s6
 801c878:	930f      	str	r3, [sp, #60]	@ 0x3c
 801c87a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801c87c:	eeb0 3a67 	vmov.f32	s6, s15
 801c880:	fb92 f3f3 	sdiv	r3, r2, r3
 801c884:	9a01      	ldr	r2, [sp, #4]
 801c886:	9310      	str	r3, [sp, #64]	@ 0x40
 801c888:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801c88a:	bf08      	it	eq
 801c88c:	4613      	moveq	r3, r2
 801c88e:	e734      	b.n	801c6fa <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28>
 801c890:	1427      	asrs	r7, r4, #16
 801c892:	d44d      	bmi.n	801c930 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 801c894:	f8dc 6008 	ldr.w	r6, [ip, #8]
 801c898:	42be      	cmp	r6, r7
 801c89a:	dd49      	ble.n	801c930 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 801c89c:	ea5f 4820 	movs.w	r8, r0, asr #16
 801c8a0:	d446      	bmi.n	801c930 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 801c8a2:	f8dc 200c 	ldr.w	r2, [ip, #12]
 801c8a6:	4542      	cmp	r2, r8
 801c8a8:	dd42      	ble.n	801c930 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 801c8aa:	b236      	sxth	r6, r6
 801c8ac:	9a00      	ldr	r2, [sp, #0]
 801c8ae:	fb08 7606 	mla	r6, r8, r6, r7
 801c8b2:	f852 7026 	ldr.w	r7, [r2, r6, lsl #2]
 801c8b6:	0e3a      	lsrs	r2, r7, #24
 801c8b8:	d03a      	beq.n	801c930 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 801c8ba:	2aff      	cmp	r2, #255	@ 0xff
 801c8bc:	b2d6      	uxtb	r6, r2
 801c8be:	f3c7 4b07 	ubfx	fp, r7, #16, #8
 801c8c2:	f3c7 2a07 	ubfx	sl, r7, #8, #8
 801c8c6:	ea4f 024e 	mov.w	r2, lr, lsl #1
 801c8ca:	b2ff      	uxtb	r7, r7
 801c8cc:	d037      	beq.n	801c93e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26c>
 801c8ce:	fa1f f986 	uxth.w	r9, r6
 801c8d2:	4472      	add	r2, lr
 801c8d4:	43f6      	mvns	r6, r6
 801c8d6:	f815 8002 	ldrb.w	r8, [r5, r2]
 801c8da:	fb17 f709 	smulbb	r7, r7, r9
 801c8de:	fb1a fa09 	smulbb	sl, sl, r9
 801c8e2:	b2f6      	uxtb	r6, r6
 801c8e4:	fb1b f909 	smulbb	r9, fp, r9
 801c8e8:	fb08 7706 	mla	r7, r8, r6, r7
 801c8ec:	b2bf      	uxth	r7, r7
 801c8ee:	f107 0801 	add.w	r8, r7, #1
 801c8f2:	eb08 2717 	add.w	r7, r8, r7, lsr #8
 801c8f6:	123f      	asrs	r7, r7, #8
 801c8f8:	54af      	strb	r7, [r5, r2]
 801c8fa:	442a      	add	r2, r5
 801c8fc:	7857      	ldrb	r7, [r2, #1]
 801c8fe:	fb07 aa06 	mla	sl, r7, r6, sl
 801c902:	fa1f fa8a 	uxth.w	sl, sl
 801c906:	f10a 0701 	add.w	r7, sl, #1
 801c90a:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801c90e:	7897      	ldrb	r7, [r2, #2]
 801c910:	fb07 9906 	mla	r9, r7, r6, r9
 801c914:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801c918:	fa1f f989 	uxth.w	r9, r9
 801c91c:	f882 a001 	strb.w	sl, [r2, #1]
 801c920:	f109 0601 	add.w	r6, r9, #1
 801c924:	eb06 2919 	add.w	r9, r6, r9, lsr #8
 801c928:	ea4f 2929 	mov.w	r9, r9, asr #8
 801c92c:	f882 9002 	strb.w	r9, [r2, #2]
 801c930:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801c932:	f10e 0e01 	add.w	lr, lr, #1
 801c936:	4414      	add	r4, r2
 801c938:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801c93a:	4410      	add	r0, r2
 801c93c:	e766      	b.n	801c80c <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 801c93e:	4472      	add	r2, lr
 801c940:	54af      	strb	r7, [r5, r2]
 801c942:	442a      	add	r2, r5
 801c944:	f882 a001 	strb.w	sl, [r2, #1]
 801c948:	f882 b002 	strb.w	fp, [r2, #2]
 801c94c:	e7f0      	b.n	801c930 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 801c94e:	f806 7c03 	strb.w	r7, [r6, #-3]
 801c952:	f806 9c02 	strb.w	r9, [r6, #-2]
 801c956:	f806 bc01 	strb.w	fp, [r6, #-1]
 801c95a:	e74d      	b.n	801c7f8 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 801c95c:	b003      	add	sp, #12
 801c95e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0801c964 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801c964:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c968:	b087      	sub	sp, #28
 801c96a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801c96e:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 801c970:	9204      	str	r2, [sp, #16]
 801c972:	f89d 2064 	ldrb.w	r2, [sp, #100]	@ 0x64
 801c976:	6860      	ldr	r0, [r4, #4]
 801c978:	9205      	str	r2, [sp, #20]
 801c97a:	f8dd c060 	ldr.w	ip, [sp, #96]	@ 0x60
 801c97e:	f8dd e04c 	ldr.w	lr, [sp, #76]	@ 0x4c
 801c982:	9101      	str	r1, [sp, #4]
 801c984:	e9dd 2516 	ldrd	r2, r5, [sp, #88]	@ 0x58
 801c988:	fb00 2505 	mla	r5, r0, r5, r2
 801c98c:	6822      	ldr	r2, [r4, #0]
 801c98e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801c992:	4415      	add	r5, r2
 801c994:	f8dc 2008 	ldr.w	r2, [ip, #8]
 801c998:	3201      	adds	r2, #1
 801c99a:	f022 0201 	bic.w	r2, r2, #1
 801c99e:	9202      	str	r2, [sp, #8]
 801c9a0:	f8dc 2000 	ldr.w	r2, [ip]
 801c9a4:	9203      	str	r2, [sp, #12]
 801c9a6:	9a01      	ldr	r2, [sp, #4]
 801c9a8:	2a00      	cmp	r2, #0
 801c9aa:	dc03      	bgt.n	801c9b4 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50>
 801c9ac:	9a04      	ldr	r2, [sp, #16]
 801c9ae:	2a00      	cmp	r2, #0
 801c9b0:	f340 8135 	ble.w	801cc1e <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ba>
 801c9b4:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801c9b6:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 801c9ba:	f502 4400 	add.w	r4, r2, #32768	@ 0x8000
 801c9be:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801c9c0:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 801c9c4:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 801c9c8:	2b00      	cmp	r3, #0
 801c9ca:	dd0d      	ble.n	801c9e8 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801c9cc:	1422      	asrs	r2, r4, #16
 801c9ce:	d405      	bmi.n	801c9dc <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801c9d0:	4542      	cmp	r2, r8
 801c9d2:	da03      	bge.n	801c9dc <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801c9d4:	1402      	asrs	r2, r0, #16
 801c9d6:	d401      	bmi.n	801c9dc <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801c9d8:	42ba      	cmp	r2, r7
 801c9da:	db06      	blt.n	801c9ea <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 801c9dc:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801c9de:	4474      	add	r4, lr
 801c9e0:	3b01      	subs	r3, #1
 801c9e2:	3503      	adds	r5, #3
 801c9e4:	4410      	add	r0, r2
 801c9e6:	e7ef      	b.n	801c9c8 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 801c9e8:	d077      	beq.n	801cada <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x176>
 801c9ea:	1e5a      	subs	r2, r3, #1
 801c9ec:	fb0e 4602 	mla	r6, lr, r2, r4
 801c9f0:	1436      	asrs	r6, r6, #16
 801c9f2:	d469      	bmi.n	801cac8 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801c9f4:	4546      	cmp	r6, r8
 801c9f6:	da67      	bge.n	801cac8 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801c9f8:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 801c9fa:	fb06 0202 	mla	r2, r6, r2, r0
 801c9fe:	1412      	asrs	r2, r2, #16
 801ca00:	d462      	bmi.n	801cac8 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801ca02:	42ba      	cmp	r2, r7
 801ca04:	da60      	bge.n	801cac8 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801ca06:	1cee      	adds	r6, r5, #3
 801ca08:	4699      	mov	r9, r3
 801ca0a:	f1b9 0f00 	cmp.w	r9, #0
 801ca0e:	dd5f      	ble.n	801cad0 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16c>
 801ca10:	1422      	asrs	r2, r4, #16
 801ca12:	9902      	ldr	r1, [sp, #8]
 801ca14:	1407      	asrs	r7, r0, #16
 801ca16:	fb01 2707 	mla	r7, r1, r7, r2
 801ca1a:	9903      	ldr	r1, [sp, #12]
 801ca1c:	087a      	lsrs	r2, r7, #1
 801ca1e:	5c8a      	ldrb	r2, [r1, r2]
 801ca20:	07f9      	lsls	r1, r7, #31
 801ca22:	bf54      	ite	pl
 801ca24:	f002 020f 	andpl.w	r2, r2, #15
 801ca28:	1112      	asrmi	r2, r2, #4
 801ca2a:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801ca2e:	b2d2      	uxtb	r2, r2
 801ca30:	2a00      	cmp	r2, #0
 801ca32:	d042      	beq.n	801caba <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 801ca34:	497b      	ldr	r1, [pc, #492]	@ (801cc24 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c0>)
 801ca36:	680f      	ldr	r7, [r1, #0]
 801ca38:	9905      	ldr	r1, [sp, #20]
 801ca3a:	fa5f fb87 	uxtb.w	fp, r7
 801ca3e:	434a      	muls	r2, r1
 801ca40:	f102 0801 	add.w	r8, r2, #1
 801ca44:	eb08 2222 	add.w	r2, r8, r2, asr #8
 801ca48:	f816 8c03 	ldrb.w	r8, [r6, #-3]
 801ca4c:	1212      	asrs	r2, r2, #8
 801ca4e:	fa1f fa82 	uxth.w	sl, r2
 801ca52:	43d2      	mvns	r2, r2
 801ca54:	fb1b fb0a 	smulbb	fp, fp, sl
 801ca58:	b2d2      	uxtb	r2, r2
 801ca5a:	fb08 b802 	mla	r8, r8, r2, fp
 801ca5e:	fa1f f888 	uxth.w	r8, r8
 801ca62:	f108 0b01 	add.w	fp, r8, #1
 801ca66:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 801ca6a:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 801ca6e:	f3c7 4707 	ubfx	r7, r7, #16, #8
 801ca72:	fb1b fb0a 	smulbb	fp, fp, sl
 801ca76:	ea4f 2828 	mov.w	r8, r8, asr #8
 801ca7a:	fb17 fa0a 	smulbb	sl, r7, sl
 801ca7e:	f816 7c01 	ldrb.w	r7, [r6, #-1]
 801ca82:	f806 8c03 	strb.w	r8, [r6, #-3]
 801ca86:	f816 8c02 	ldrb.w	r8, [r6, #-2]
 801ca8a:	fb07 aa02 	mla	sl, r7, r2, sl
 801ca8e:	fb08 b802 	mla	r8, r8, r2, fp
 801ca92:	fa1f fa8a 	uxth.w	sl, sl
 801ca96:	fa1f f888 	uxth.w	r8, r8
 801ca9a:	f10a 0701 	add.w	r7, sl, #1
 801ca9e:	f108 0b01 	add.w	fp, r8, #1
 801caa2:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801caa6:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 801caaa:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801caae:	ea4f 2828 	mov.w	r8, r8, asr #8
 801cab2:	f806 ac01 	strb.w	sl, [r6, #-1]
 801cab6:	f806 8c02 	strb.w	r8, [r6, #-2]
 801caba:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801cabc:	4474      	add	r4, lr
 801cabe:	3603      	adds	r6, #3
 801cac0:	f109 39ff 	add.w	r9, r9, #4294967295
 801cac4:	4410      	add	r0, r2
 801cac6:	e7a0      	b.n	801ca0a <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 801cac8:	2700      	movs	r7, #0
 801caca:	1bda      	subs	r2, r3, r7
 801cacc:	2a00      	cmp	r2, #0
 801cace:	dc3e      	bgt.n	801cb4e <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 801cad0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801cad4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801cad8:	441d      	add	r5, r3
 801cada:	9b01      	ldr	r3, [sp, #4]
 801cadc:	2b00      	cmp	r3, #0
 801cade:	f340 809e 	ble.w	801cc1e <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ba>
 801cae2:	ee30 0a04 	vadd.f32	s0, s0, s8
 801cae6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801cae8:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801caec:	eeb0 6a62 	vmov.f32	s12, s5
 801caf0:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801caf4:	ee31 1a05 	vadd.f32	s2, s2, s10
 801caf8:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801cafc:	ed8d 6a11 	vstr	s12, [sp, #68]	@ 0x44
 801cb00:	eeb0 6a43 	vmov.f32	s12, s6
 801cb04:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801cb08:	ed8d 6a12 	vstr	s12, [sp, #72]	@ 0x48
 801cb0c:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801cb10:	ee61 7a27 	vmul.f32	s15, s2, s15
 801cb14:	ee77 2a62 	vsub.f32	s5, s14, s5
 801cb18:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801cb1c:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801cb20:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801cb24:	ee12 2a90 	vmov	r2, s5
 801cb28:	eef0 2a47 	vmov.f32	s5, s14
 801cb2c:	fb92 fef3 	sdiv	lr, r2, r3
 801cb30:	ee13 2a10 	vmov	r2, s6
 801cb34:	eeb0 3a67 	vmov.f32	s6, s15
 801cb38:	fb92 f3f3 	sdiv	r3, r2, r3
 801cb3c:	9314      	str	r3, [sp, #80]	@ 0x50
 801cb3e:	9b01      	ldr	r3, [sp, #4]
 801cb40:	9a04      	ldr	r2, [sp, #16]
 801cb42:	3b01      	subs	r3, #1
 801cb44:	9301      	str	r3, [sp, #4]
 801cb46:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801cb48:	bf08      	it	eq
 801cb4a:	4613      	moveq	r3, r2
 801cb4c:	e72b      	b.n	801c9a6 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42>
 801cb4e:	1426      	asrs	r6, r4, #16
 801cb50:	d460      	bmi.n	801cc14 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 801cb52:	f8dc 2008 	ldr.w	r2, [ip, #8]
 801cb56:	42b2      	cmp	r2, r6
 801cb58:	dd5c      	ble.n	801cc14 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 801cb5a:	ea5f 4820 	movs.w	r8, r0, asr #16
 801cb5e:	d459      	bmi.n	801cc14 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 801cb60:	f8dc 200c 	ldr.w	r2, [ip, #12]
 801cb64:	4542      	cmp	r2, r8
 801cb66:	dd55      	ble.n	801cc14 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 801cb68:	9a02      	ldr	r2, [sp, #8]
 801cb6a:	9903      	ldr	r1, [sp, #12]
 801cb6c:	fb08 6602 	mla	r6, r8, r2, r6
 801cb70:	0872      	lsrs	r2, r6, #1
 801cb72:	07f6      	lsls	r6, r6, #31
 801cb74:	5c8a      	ldrb	r2, [r1, r2]
 801cb76:	bf54      	ite	pl
 801cb78:	f002 020f 	andpl.w	r2, r2, #15
 801cb7c:	1112      	asrmi	r2, r2, #4
 801cb7e:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801cb82:	b2d2      	uxtb	r2, r2
 801cb84:	2a00      	cmp	r2, #0
 801cb86:	d045      	beq.n	801cc14 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 801cb88:	4926      	ldr	r1, [pc, #152]	@ (801cc24 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c0>)
 801cb8a:	f8d1 8000 	ldr.w	r8, [r1]
 801cb8e:	9905      	ldr	r1, [sp, #20]
 801cb90:	fa5f fb88 	uxtb.w	fp, r8
 801cb94:	434a      	muls	r2, r1
 801cb96:	1c56      	adds	r6, r2, #1
 801cb98:	eb06 2222 	add.w	r2, r6, r2, asr #8
 801cb9c:	eb07 0647 	add.w	r6, r7, r7, lsl #1
 801cba0:	1212      	asrs	r2, r2, #8
 801cba2:	f815 9006 	ldrb.w	r9, [r5, r6]
 801cba6:	fa1f fa82 	uxth.w	sl, r2
 801cbaa:	43d2      	mvns	r2, r2
 801cbac:	fb1b fb0a 	smulbb	fp, fp, sl
 801cbb0:	b2d2      	uxtb	r2, r2
 801cbb2:	fb09 b902 	mla	r9, r9, r2, fp
 801cbb6:	fa1f f989 	uxth.w	r9, r9
 801cbba:	f109 0b01 	add.w	fp, r9, #1
 801cbbe:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801cbc2:	f3c8 2b07 	ubfx	fp, r8, #8, #8
 801cbc6:	f3c8 4807 	ubfx	r8, r8, #16, #8
 801cbca:	fb1b fb0a 	smulbb	fp, fp, sl
 801cbce:	ea4f 2929 	mov.w	r9, r9, asr #8
 801cbd2:	fb18 fa0a 	smulbb	sl, r8, sl
 801cbd6:	f805 9006 	strb.w	r9, [r5, r6]
 801cbda:	442e      	add	r6, r5
 801cbdc:	f896 8002 	ldrb.w	r8, [r6, #2]
 801cbe0:	f896 9001 	ldrb.w	r9, [r6, #1]
 801cbe4:	fb08 aa02 	mla	sl, r8, r2, sl
 801cbe8:	fb09 b902 	mla	r9, r9, r2, fp
 801cbec:	fa1f fa8a 	uxth.w	sl, sl
 801cbf0:	fa1f f989 	uxth.w	r9, r9
 801cbf4:	f10a 0801 	add.w	r8, sl, #1
 801cbf8:	f109 0b01 	add.w	fp, r9, #1
 801cbfc:	eb08 2a1a 	add.w	sl, r8, sl, lsr #8
 801cc00:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801cc04:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801cc08:	ea4f 2929 	mov.w	r9, r9, asr #8
 801cc0c:	f886 a002 	strb.w	sl, [r6, #2]
 801cc10:	f886 9001 	strb.w	r9, [r6, #1]
 801cc14:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801cc16:	4474      	add	r4, lr
 801cc18:	3701      	adds	r7, #1
 801cc1a:	4410      	add	r0, r2
 801cc1c:	e755      	b.n	801caca <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x166>
 801cc1e:	b007      	add	sp, #28
 801cc20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cc24:	24028e30 	.word	0x24028e30

0801cc28 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801cc28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cc2c:	b085      	sub	sp, #20
 801cc2e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801cc32:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801cc34:	9203      	str	r2, [sp, #12]
 801cc36:	6860      	ldr	r0, [r4, #4]
 801cc38:	f8dd c058 	ldr.w	ip, [sp, #88]	@ 0x58
 801cc3c:	9100      	str	r1, [sp, #0]
 801cc3e:	e9dd 2614 	ldrd	r2, r6, [sp, #80]	@ 0x50
 801cc42:	fb00 2606 	mla	r6, r0, r6, r2
 801cc46:	6822      	ldr	r2, [r4, #0]
 801cc48:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801cc4c:	4416      	add	r6, r2
 801cc4e:	f8dc 2008 	ldr.w	r2, [ip, #8]
 801cc52:	3201      	adds	r2, #1
 801cc54:	f022 0201 	bic.w	r2, r2, #1
 801cc58:	9201      	str	r2, [sp, #4]
 801cc5a:	f8dc 2000 	ldr.w	r2, [ip]
 801cc5e:	9202      	str	r2, [sp, #8]
 801cc60:	9a00      	ldr	r2, [sp, #0]
 801cc62:	2a00      	cmp	r2, #0
 801cc64:	dc03      	bgt.n	801cc6e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46>
 801cc66:	9a03      	ldr	r2, [sp, #12]
 801cc68:	2a00      	cmp	r2, #0
 801cc6a:	f340 8140 	ble.w	801ceee <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c6>
 801cc6e:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801cc70:	f9bc e008 	ldrsh.w	lr, [ip, #8]
 801cc74:	f502 4500 	add.w	r5, r2, #32768	@ 0x8000
 801cc78:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801cc7a:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 801cc7e:	f502 4400 	add.w	r4, r2, #32768	@ 0x8000
 801cc82:	2b00      	cmp	r3, #0
 801cc84:	dd0e      	ble.n	801cca4 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801cc86:	142a      	asrs	r2, r5, #16
 801cc88:	d405      	bmi.n	801cc96 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801cc8a:	4572      	cmp	r2, lr
 801cc8c:	da03      	bge.n	801cc96 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801cc8e:	1422      	asrs	r2, r4, #16
 801cc90:	d401      	bmi.n	801cc96 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801cc92:	42ba      	cmp	r2, r7
 801cc94:	db07      	blt.n	801cca6 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801cc96:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801cc98:	3b01      	subs	r3, #1
 801cc9a:	3603      	adds	r6, #3
 801cc9c:	4415      	add	r5, r2
 801cc9e:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801cca0:	4414      	add	r4, r2
 801cca2:	e7ee      	b.n	801cc82 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 801cca4:	d072      	beq.n	801cd8c <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801cca6:	1e5a      	subs	r2, r3, #1
 801cca8:	9811      	ldr	r0, [sp, #68]	@ 0x44
 801ccaa:	fb00 5002 	mla	r0, r0, r2, r5
 801ccae:	1400      	asrs	r0, r0, #16
 801ccb0:	d463      	bmi.n	801cd7a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801ccb2:	4570      	cmp	r0, lr
 801ccb4:	da61      	bge.n	801cd7a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801ccb6:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801ccb8:	fb00 4202 	mla	r2, r0, r2, r4
 801ccbc:	1412      	asrs	r2, r2, #16
 801ccbe:	d45c      	bmi.n	801cd7a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801ccc0:	42ba      	cmp	r2, r7
 801ccc2:	da5a      	bge.n	801cd7a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801ccc4:	1cf0      	adds	r0, r6, #3
 801ccc6:	469a      	mov	sl, r3
 801ccc8:	f1ba 0f00 	cmp.w	sl, #0
 801cccc:	dd59      	ble.n	801cd82 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15a>
 801ccce:	142a      	asrs	r2, r5, #16
 801ccd0:	9901      	ldr	r1, [sp, #4]
 801ccd2:	1427      	asrs	r7, r4, #16
 801ccd4:	fb01 2707 	mla	r7, r1, r7, r2
 801ccd8:	9902      	ldr	r1, [sp, #8]
 801ccda:	087a      	lsrs	r2, r7, #1
 801ccdc:	5c8a      	ldrb	r2, [r1, r2]
 801ccde:	07f9      	lsls	r1, r7, #31
 801cce0:	bf54      	ite	pl
 801cce2:	f002 020f 	andpl.w	r2, r2, #15
 801cce6:	1112      	asrmi	r2, r2, #4
 801cce8:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801ccec:	b2d2      	uxtb	r2, r2
 801ccee:	2a00      	cmp	r2, #0
 801ccf0:	d03b      	beq.n	801cd6a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 801ccf2:	4980      	ldr	r1, [pc, #512]	@ (801cef4 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2cc>)
 801ccf4:	2aff      	cmp	r2, #255	@ 0xff
 801ccf6:	680f      	ldr	r7, [r1, #0]
 801ccf8:	f3c7 4b07 	ubfx	fp, r7, #16, #8
 801ccfc:	f3c7 2907 	ubfx	r9, r7, #8, #8
 801cd00:	b2ff      	uxtb	r7, r7
 801cd02:	f000 80ed 	beq.w	801cee0 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b8>
 801cd06:	fa1f f882 	uxth.w	r8, r2
 801cd0a:	43d2      	mvns	r2, r2
 801cd0c:	f810 ec03 	ldrb.w	lr, [r0, #-3]
 801cd10:	fb17 f708 	smulbb	r7, r7, r8
 801cd14:	b2d2      	uxtb	r2, r2
 801cd16:	fb19 f908 	smulbb	r9, r9, r8
 801cd1a:	fb0e 7702 	mla	r7, lr, r2, r7
 801cd1e:	fb1b f808 	smulbb	r8, fp, r8
 801cd22:	b2bf      	uxth	r7, r7
 801cd24:	f107 0e01 	add.w	lr, r7, #1
 801cd28:	eb0e 2717 	add.w	r7, lr, r7, lsr #8
 801cd2c:	123f      	asrs	r7, r7, #8
 801cd2e:	f800 7c03 	strb.w	r7, [r0, #-3]
 801cd32:	f810 7c02 	ldrb.w	r7, [r0, #-2]
 801cd36:	fb07 9902 	mla	r9, r7, r2, r9
 801cd3a:	fa1f f989 	uxth.w	r9, r9
 801cd3e:	f109 0701 	add.w	r7, r9, #1
 801cd42:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 801cd46:	f810 7c01 	ldrb.w	r7, [r0, #-1]
 801cd4a:	fb07 8802 	mla	r8, r7, r2, r8
 801cd4e:	ea4f 2929 	mov.w	r9, r9, asr #8
 801cd52:	fa1f f888 	uxth.w	r8, r8
 801cd56:	f800 9c02 	strb.w	r9, [r0, #-2]
 801cd5a:	f108 0201 	add.w	r2, r8, #1
 801cd5e:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 801cd62:	ea4f 2828 	mov.w	r8, r8, asr #8
 801cd66:	f800 8c01 	strb.w	r8, [r0, #-1]
 801cd6a:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801cd6c:	3003      	adds	r0, #3
 801cd6e:	f10a 3aff 	add.w	sl, sl, #4294967295
 801cd72:	4415      	add	r5, r2
 801cd74:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801cd76:	4414      	add	r4, r2
 801cd78:	e7a6      	b.n	801ccc8 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801cd7a:	2700      	movs	r7, #0
 801cd7c:	1bda      	subs	r2, r3, r7
 801cd7e:	2a00      	cmp	r2, #0
 801cd80:	dc40      	bgt.n	801ce04 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1dc>
 801cd82:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801cd86:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801cd8a:	441e      	add	r6, r3
 801cd8c:	9b00      	ldr	r3, [sp, #0]
 801cd8e:	2b00      	cmp	r3, #0
 801cd90:	f340 80ad 	ble.w	801ceee <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c6>
 801cd94:	ee30 0a04 	vadd.f32	s0, s0, s8
 801cd98:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801cd9a:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801cd9e:	eeb0 6a62 	vmov.f32	s12, s5
 801cda2:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801cda6:	ee31 1a05 	vadd.f32	s2, s2, s10
 801cdaa:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801cdae:	ed8d 6a0f 	vstr	s12, [sp, #60]	@ 0x3c
 801cdb2:	eeb0 6a43 	vmov.f32	s12, s6
 801cdb6:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801cdba:	ed8d 6a10 	vstr	s12, [sp, #64]	@ 0x40
 801cdbe:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801cdc2:	ee61 7a27 	vmul.f32	s15, s2, s15
 801cdc6:	ee77 2a62 	vsub.f32	s5, s14, s5
 801cdca:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801cdce:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801cdd2:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801cdd6:	ee12 2a90 	vmov	r2, s5
 801cdda:	eef0 2a47 	vmov.f32	s5, s14
 801cdde:	fb92 f3f3 	sdiv	r3, r2, r3
 801cde2:	ee13 2a10 	vmov	r2, s6
 801cde6:	9311      	str	r3, [sp, #68]	@ 0x44
 801cde8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801cdea:	eeb0 3a67 	vmov.f32	s6, s15
 801cdee:	fb92 f3f3 	sdiv	r3, r2, r3
 801cdf2:	9312      	str	r3, [sp, #72]	@ 0x48
 801cdf4:	9b00      	ldr	r3, [sp, #0]
 801cdf6:	9a03      	ldr	r2, [sp, #12]
 801cdf8:	3b01      	subs	r3, #1
 801cdfa:	9300      	str	r3, [sp, #0]
 801cdfc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801cdfe:	bf08      	it	eq
 801ce00:	4613      	moveq	r3, r2
 801ce02:	e72d      	b.n	801cc60 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 801ce04:	1428      	asrs	r0, r5, #16
 801ce06:	d45c      	bmi.n	801cec2 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 801ce08:	f8dc 2008 	ldr.w	r2, [ip, #8]
 801ce0c:	4282      	cmp	r2, r0
 801ce0e:	dd58      	ble.n	801cec2 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 801ce10:	ea5f 4e24 	movs.w	lr, r4, asr #16
 801ce14:	d455      	bmi.n	801cec2 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 801ce16:	f8dc 200c 	ldr.w	r2, [ip, #12]
 801ce1a:	4572      	cmp	r2, lr
 801ce1c:	dd51      	ble.n	801cec2 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 801ce1e:	9a01      	ldr	r2, [sp, #4]
 801ce20:	9902      	ldr	r1, [sp, #8]
 801ce22:	fb0e 0002 	mla	r0, lr, r2, r0
 801ce26:	0842      	lsrs	r2, r0, #1
 801ce28:	07c0      	lsls	r0, r0, #31
 801ce2a:	5c8a      	ldrb	r2, [r1, r2]
 801ce2c:	bf54      	ite	pl
 801ce2e:	f002 020f 	andpl.w	r2, r2, #15
 801ce32:	1112      	asrmi	r2, r2, #4
 801ce34:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801ce38:	b2d2      	uxtb	r2, r2
 801ce3a:	2a00      	cmp	r2, #0
 801ce3c:	d041      	beq.n	801cec2 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 801ce3e:	492d      	ldr	r1, [pc, #180]	@ (801cef4 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2cc>)
 801ce40:	2aff      	cmp	r2, #255	@ 0xff
 801ce42:	6808      	ldr	r0, [r1, #0]
 801ce44:	f3c0 4b07 	ubfx	fp, r0, #16, #8
 801ce48:	f3c0 2a07 	ubfx	sl, r0, #8, #8
 801ce4c:	fa5f fe80 	uxtb.w	lr, r0
 801ce50:	ea4f 0047 	mov.w	r0, r7, lsl #1
 801ce54:	d03b      	beq.n	801cece <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
 801ce56:	fa1f f982 	uxth.w	r9, r2
 801ce5a:	4438      	add	r0, r7
 801ce5c:	43d2      	mvns	r2, r2
 801ce5e:	f816 8000 	ldrb.w	r8, [r6, r0]
 801ce62:	fb1e fe09 	smulbb	lr, lr, r9
 801ce66:	fb1a fa09 	smulbb	sl, sl, r9
 801ce6a:	b2d2      	uxtb	r2, r2
 801ce6c:	fb1b f909 	smulbb	r9, fp, r9
 801ce70:	fb08 ee02 	mla	lr, r8, r2, lr
 801ce74:	fa1f fe8e 	uxth.w	lr, lr
 801ce78:	f10e 0801 	add.w	r8, lr, #1
 801ce7c:	eb08 2e1e 	add.w	lr, r8, lr, lsr #8
 801ce80:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801ce84:	f806 e000 	strb.w	lr, [r6, r0]
 801ce88:	4430      	add	r0, r6
 801ce8a:	f890 e001 	ldrb.w	lr, [r0, #1]
 801ce8e:	fb0e aa02 	mla	sl, lr, r2, sl
 801ce92:	fa1f fa8a 	uxth.w	sl, sl
 801ce96:	f10a 0e01 	add.w	lr, sl, #1
 801ce9a:	eb0e 2a1a 	add.w	sl, lr, sl, lsr #8
 801ce9e:	f890 e002 	ldrb.w	lr, [r0, #2]
 801cea2:	fb0e 9902 	mla	r9, lr, r2, r9
 801cea6:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801ceaa:	fa1f f989 	uxth.w	r9, r9
 801ceae:	f880 a001 	strb.w	sl, [r0, #1]
 801ceb2:	f109 0201 	add.w	r2, r9, #1
 801ceb6:	eb02 2919 	add.w	r9, r2, r9, lsr #8
 801ceba:	ea4f 2929 	mov.w	r9, r9, asr #8
 801cebe:	f880 9002 	strb.w	r9, [r0, #2]
 801cec2:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801cec4:	3701      	adds	r7, #1
 801cec6:	4415      	add	r5, r2
 801cec8:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801ceca:	4414      	add	r4, r2
 801cecc:	e756      	b.n	801cd7c <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 801cece:	4438      	add	r0, r7
 801ced0:	f806 e000 	strb.w	lr, [r6, r0]
 801ced4:	4430      	add	r0, r6
 801ced6:	f880 a001 	strb.w	sl, [r0, #1]
 801ceda:	f880 b002 	strb.w	fp, [r0, #2]
 801cede:	e7f0      	b.n	801cec2 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 801cee0:	f800 7c03 	strb.w	r7, [r0, #-3]
 801cee4:	f800 9c02 	strb.w	r9, [r0, #-2]
 801cee8:	f800 bc01 	strb.w	fp, [r0, #-1]
 801ceec:	e73d      	b.n	801cd6a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 801ceee:	b005      	add	sp, #20
 801cef0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cef4:	24028e30 	.word	0x24028e30

0801cef8 <_ZN8touchgfx8LCD24bppD1Ev>:
 801cef8:	4770      	bx	lr

0801cefa <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOID1Ev>:
 801cefa:	4770      	bx	lr

0801cefc <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW9D1Ev>:
 801cefc:	4770      	bx	lr

0801cefe <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLED1Ev>:
 801cefe:	4770      	bx	lr

0801cf00 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L4D1Ev>:
 801cf00:	4770      	bx	lr

0801cf02 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGAD1Ev>:
 801cf02:	4770      	bx	lr

0801cf04 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GAD1Ev>:
 801cf04:	4770      	bx	lr

0801cf06 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGAD1Ev>:
 801cf06:	4770      	bx	lr

0801cf08 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GAD1Ev>:
 801cf08:	4770      	bx	lr

0801cf0a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 801cf0a:	4770      	bx	lr

0801cf0c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 801cf0c:	4770      	bx	lr

0801cf0e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 801cf0e:	4770      	bx	lr

0801cf10 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 801cf10:	4770      	bx	lr

0801cf12 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 801cf12:	4770      	bx	lr

0801cf14 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 801cf14:	4770      	bx	lr

0801cf16 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 801cf16:	4770      	bx	lr

0801cf18 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 801cf18:	4770      	bx	lr

0801cf1a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 801cf1a:	4770      	bx	lr

0801cf1c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 801cf1c:	4770      	bx	lr

0801cf1e <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 801cf1e:	4770      	bx	lr

0801cf20 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 801cf20:	4770      	bx	lr

0801cf22 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 801cf22:	4770      	bx	lr

0801cf24 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 801cf24:	4770      	bx	lr

0801cf26 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 801cf26:	4770      	bx	lr

0801cf28 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 801cf28:	4770      	bx	lr
	...

0801cf2c <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh>:
 801cf2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801cf2e:	4606      	mov	r6, r0
 801cf30:	b087      	sub	sp, #28
 801cf32:	4615      	mov	r5, r2
 801cf34:	461f      	mov	r7, r3
 801cf36:	b353      	cbz	r3, 801cf8e <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 801cf38:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 801cf3c:	2b00      	cmp	r3, #0
 801cf3e:	dd26      	ble.n	801cf8e <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 801cf40:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 801cf44:	2b00      	cmp	r3, #0
 801cf46:	dd22      	ble.n	801cf8e <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 801cf48:	6808      	ldr	r0, [r1, #0]
 801cf4a:	aa04      	add	r2, sp, #16
 801cf4c:	6849      	ldr	r1, [r1, #4]
 801cf4e:	4c1b      	ldr	r4, [pc, #108]	@ (801cfbc <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x90>)
 801cf50:	c203      	stmia	r2!, {r0, r1}
 801cf52:	a804      	add	r0, sp, #16
 801cf54:	f7fa f988 	bl	8017268 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801cf58:	6820      	ldr	r0, [r4, #0]
 801cf5a:	6803      	ldr	r3, [r0, #0]
 801cf5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801cf5e:	4798      	blx	r3
 801cf60:	2fff      	cmp	r7, #255	@ 0xff
 801cf62:	d016      	beq.n	801cf92 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x66>
 801cf64:	f010 0f08 	tst.w	r0, #8
 801cf68:	6820      	ldr	r0, [r4, #0]
 801cf6a:	d015      	beq.n	801cf98 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x6c>
 801cf6c:	2400      	movs	r4, #0
 801cf6e:	6801      	ldr	r1, [r0, #0]
 801cf70:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 801cf74:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 801cf78:	e9cd 7402 	strd	r7, r4, [sp, #8]
 801cf7c:	f8bd 4016 	ldrh.w	r4, [sp, #22]
 801cf80:	9401      	str	r4, [sp, #4]
 801cf82:	f8bd 4014 	ldrh.w	r4, [sp, #20]
 801cf86:	9400      	str	r4, [sp, #0]
 801cf88:	6e0c      	ldr	r4, [r1, #96]	@ 0x60
 801cf8a:	4629      	mov	r1, r5
 801cf8c:	47a0      	blx	r4
 801cf8e:	b007      	add	sp, #28
 801cf90:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801cf92:	f010 0f02 	tst.w	r0, #2
 801cf96:	e7e7      	b.n	801cf68 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x3c>
 801cf98:	6803      	ldr	r3, [r0, #0]
 801cf9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801cf9c:	4798      	blx	r3
 801cf9e:	4b08      	ldr	r3, [pc, #32]	@ (801cfc0 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x94>)
 801cfa0:	4601      	mov	r1, r0
 801cfa2:	4630      	mov	r0, r6
 801cfa4:	881a      	ldrh	r2, [r3, #0]
 801cfa6:	6833      	ldr	r3, [r6, #0]
 801cfa8:	e9cd 5700 	strd	r5, r7, [sp]
 801cfac:	6a5d      	ldr	r5, [r3, #36]	@ 0x24
 801cfae:	ab04      	add	r3, sp, #16
 801cfb0:	47a8      	blx	r5
 801cfb2:	6820      	ldr	r0, [r4, #0]
 801cfb4:	6803      	ldr	r3, [r0, #0]
 801cfb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801cfb8:	4798      	blx	r3
 801cfba:	e7e8      	b.n	801cf8e <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 801cfbc:	24028e20 	.word	0x24028e20
 801cfc0:	24028e1a 	.word	0x24028e1a

0801cfc4 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb>:
 801cfc4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801cfc8:	b08b      	sub	sp, #44	@ 0x2c
 801cfca:	460d      	mov	r5, r1
 801cfcc:	4616      	mov	r6, r2
 801cfce:	f89d 8048 	ldrb.w	r8, [sp, #72]	@ 0x48
 801cfd2:	f1b8 0f00 	cmp.w	r8, #0
 801cfd6:	d047      	beq.n	801d068 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xa4>
 801cfd8:	6810      	ldr	r0, [r2, #0]
 801cfda:	ac06      	add	r4, sp, #24
 801cfdc:	6851      	ldr	r1, [r2, #4]
 801cfde:	4f51      	ldr	r7, [pc, #324]	@ (801d124 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x160>)
 801cfe0:	c403      	stmia	r4!, {r0, r1}
 801cfe2:	6818      	ldr	r0, [r3, #0]
 801cfe4:	ac08      	add	r4, sp, #32
 801cfe6:	6859      	ldr	r1, [r3, #4]
 801cfe8:	c403      	stmia	r4!, {r0, r1}
 801cfea:	a806      	add	r0, sp, #24
 801cfec:	f7fa f93c 	bl	8017268 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801cff0:	4631      	mov	r1, r6
 801cff2:	a808      	add	r0, sp, #32
 801cff4:	f7fa f97c 	bl	80172f0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801cff8:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 801cffc:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	@ 0x22
 801d000:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 801d004:	6838      	ldr	r0, [r7, #0]
 801d006:	fb11 2103 	smlabb	r1, r1, r3, r2
 801d00a:	f9bd 6024 	ldrsh.w	r6, [sp, #36]	@ 0x24
 801d00e:	f9bd 4026 	ldrsh.w	r4, [sp, #38]	@ 0x26
 801d012:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801d016:	440d      	add	r5, r1
 801d018:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 801d01c:	440a      	add	r2, r1
 801d01e:	f8ad 2020 	strh.w	r2, [sp, #32]
 801d022:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 801d026:	4413      	add	r3, r2
 801d028:	f8ad 3022 	strh.w	r3, [sp, #34]	@ 0x22
 801d02c:	6803      	ldr	r3, [r0, #0]
 801d02e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801d030:	4798      	blx	r3
 801d032:	f1b8 0fff 	cmp.w	r8, #255	@ 0xff
 801d036:	d01a      	beq.n	801d06e <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xaa>
 801d038:	f010 0f04 	tst.w	r0, #4
 801d03c:	6838      	ldr	r0, [r7, #0]
 801d03e:	d019      	beq.n	801d074 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xb0>
 801d040:	2100      	movs	r1, #0
 801d042:	6807      	ldr	r7, [r0, #0]
 801d044:	b2a4      	uxth	r4, r4
 801d046:	f8cd 800c 	str.w	r8, [sp, #12]
 801d04a:	b2b6      	uxth	r6, r6
 801d04c:	f8bd 3022 	ldrh.w	r3, [sp, #34]	@ 0x22
 801d050:	9401      	str	r4, [sp, #4]
 801d052:	9600      	str	r6, [sp, #0]
 801d054:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 801d058:	e9cd 1104 	strd	r1, r1, [sp, #16]
 801d05c:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 801d060:	9102      	str	r1, [sp, #8]
 801d062:	4629      	mov	r1, r5
 801d064:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 801d066:	47a0      	blx	r4
 801d068:	b00b      	add	sp, #44	@ 0x2c
 801d06a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801d06e:	f010 0f01 	tst.w	r0, #1
 801d072:	e7e3      	b.n	801d03c <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x78>
 801d074:	6803      	ldr	r3, [r0, #0]
 801d076:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801d078:	4798      	blx	r3
 801d07a:	4a2b      	ldr	r2, [pc, #172]	@ (801d128 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x164>)
 801d07c:	f9bd 1022 	ldrsh.w	r1, [sp, #34]	@ 0x22
 801d080:	f1b8 0fff 	cmp.w	r8, #255	@ 0xff
 801d084:	8813      	ldrh	r3, [r2, #0]
 801d086:	f9bd c020 	ldrsh.w	ip, [sp, #32]
 801d08a:	fb03 f404 	mul.w	r4, r3, r4
 801d08e:	fb03 c101 	mla	r1, r3, r1, ip
 801d092:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801d096:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801d09a:	4408      	add	r0, r1
 801d09c:	eb06 0146 	add.w	r1, r6, r6, lsl #1
 801d0a0:	4404      	add	r4, r0
 801d0a2:	d02e      	beq.n	801d102 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x13e>
 801d0a4:	f9bd 201c 	ldrsh.w	r2, [sp, #28]
 801d0a8:	1b9b      	subs	r3, r3, r6
 801d0aa:	f1c8 0cff 	rsb	ip, r8, #255	@ 0xff
 801d0ae:	1b96      	subs	r6, r2, r6
 801d0b0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801d0b4:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801d0b8:	42a0      	cmp	r0, r4
 801d0ba:	d22d      	bcs.n	801d118 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x154>
 801d0bc:	eb00 0e01 	add.w	lr, r0, r1
 801d0c0:	4570      	cmp	r0, lr
 801d0c2:	d210      	bcs.n	801d0e6 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x122>
 801d0c4:	f890 9000 	ldrb.w	r9, [r0]
 801d0c8:	f815 2b01 	ldrb.w	r2, [r5], #1
 801d0cc:	fb19 f90c 	smulbb	r9, r9, ip
 801d0d0:	fb02 9208 	mla	r2, r2, r8, r9
 801d0d4:	b292      	uxth	r2, r2
 801d0d6:	f102 0901 	add.w	r9, r2, #1
 801d0da:	eb09 2212 	add.w	r2, r9, r2, lsr #8
 801d0de:	1212      	asrs	r2, r2, #8
 801d0e0:	f800 2b01 	strb.w	r2, [r0], #1
 801d0e4:	e7ec      	b.n	801d0c0 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xfc>
 801d0e6:	4418      	add	r0, r3
 801d0e8:	4435      	add	r5, r6
 801d0ea:	e7e5      	b.n	801d0b8 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xf4>
 801d0ec:	8813      	ldrh	r3, [r2, #0]
 801d0ee:	1b9b      	subs	r3, r3, r6
 801d0f0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801d0f4:	4418      	add	r0, r3
 801d0f6:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 801d0fa:	1b9b      	subs	r3, r3, r6
 801d0fc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801d100:	441d      	add	r5, r3
 801d102:	42a0      	cmp	r0, r4
 801d104:	d208      	bcs.n	801d118 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x154>
 801d106:	eb00 0c01 	add.w	ip, r0, r1
 801d10a:	4560      	cmp	r0, ip
 801d10c:	d2ee      	bcs.n	801d0ec <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x128>
 801d10e:	f815 3b01 	ldrb.w	r3, [r5], #1
 801d112:	f800 3b01 	strb.w	r3, [r0], #1
 801d116:	e7f8      	b.n	801d10a <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x146>
 801d118:	6838      	ldr	r0, [r7, #0]
 801d11a:	6803      	ldr	r3, [r0, #0]
 801d11c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801d11e:	4798      	blx	r3
 801d120:	e7a2      	b.n	801d068 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xa4>
 801d122:	bf00      	nop
 801d124:	24028e20 	.word	0x24028e20
 801d128:	24028e1a 	.word	0x24028e1a

0801d12c <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE>:
 801d12c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d12e:	2300      	movs	r3, #0
 801d130:	b085      	sub	sp, #20
 801d132:	9300      	str	r3, [sp, #0]
 801d134:	4b41      	ldr	r3, [pc, #260]	@ (801d23c <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x110>)
 801d136:	781b      	ldrb	r3, [r3, #0]
 801d138:	2b00      	cmp	r3, #0
 801d13a:	d136      	bne.n	801d1aa <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x7e>
 801d13c:	4a40      	ldr	r2, [pc, #256]	@ (801d240 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x114>)
 801d13e:	f9b2 2000 	ldrsh.w	r2, [r2]
 801d142:	f8ad 2004 	strh.w	r2, [sp, #4]
 801d146:	2b00      	cmp	r3, #0
 801d148:	d131      	bne.n	801d1ae <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x82>
 801d14a:	4b3e      	ldr	r3, [pc, #248]	@ (801d244 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x118>)
 801d14c:	f9b3 3000 	ldrsh.w	r3, [r3]
 801d150:	ac02      	add	r4, sp, #8
 801d152:	6808      	ldr	r0, [r1, #0]
 801d154:	f8ad 3006 	strh.w	r3, [sp, #6]
 801d158:	ab02      	add	r3, sp, #8
 801d15a:	6849      	ldr	r1, [r1, #4]
 801d15c:	4d3a      	ldr	r5, [pc, #232]	@ (801d248 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x11c>)
 801d15e:	c303      	stmia	r3!, {r0, r1}
 801d160:	4669      	mov	r1, sp
 801d162:	4620      	mov	r0, r4
 801d164:	f7fa f8c4 	bl	80172f0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801d168:	4668      	mov	r0, sp
 801d16a:	f7fa f87d 	bl	8017268 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801d16e:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 801d172:	f8bd 2000 	ldrh.w	r2, [sp]
 801d176:	462e      	mov	r6, r5
 801d178:	6828      	ldr	r0, [r5, #0]
 801d17a:	4413      	add	r3, r2
 801d17c:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 801d180:	f8ad 3008 	strh.w	r3, [sp, #8]
 801d184:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 801d188:	4413      	add	r3, r2
 801d18a:	f8ad 300a 	strh.w	r3, [sp, #10]
 801d18e:	6803      	ldr	r3, [r0, #0]
 801d190:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801d192:	4798      	blx	r3
 801d194:	f010 0f01 	tst.w	r0, #1
 801d198:	d00b      	beq.n	801d1b2 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x86>
 801d19a:	6828      	ldr	r0, [r5, #0]
 801d19c:	6803      	ldr	r3, [r0, #0]
 801d19e:	e894 0006 	ldmia.w	r4, {r1, r2}
 801d1a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801d1a4:	4798      	blx	r3
 801d1a6:	b005      	add	sp, #20
 801d1a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801d1aa:	4a26      	ldr	r2, [pc, #152]	@ (801d244 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x118>)
 801d1ac:	e7c7      	b.n	801d13e <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x12>
 801d1ae:	4b24      	ldr	r3, [pc, #144]	@ (801d240 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x114>)
 801d1b0:	e7cc      	b.n	801d14c <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x20>
 801d1b2:	6830      	ldr	r0, [r6, #0]
 801d1b4:	f9bd 700e 	ldrsh.w	r7, [sp, #14]
 801d1b8:	6803      	ldr	r3, [r0, #0]
 801d1ba:	f9bd 500c 	ldrsh.w	r5, [sp, #12]
 801d1be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801d1c0:	4798      	blx	r3
 801d1c2:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
 801d1c6:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 801d1ca:	f8bd 4004 	ldrh.w	r4, [sp, #4]
 801d1ce:	fb14 3402 	smlabb	r4, r4, r2, r3
 801d1d2:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801d1d6:	4404      	add	r4, r0
 801d1d8:	6830      	ldr	r0, [r6, #0]
 801d1da:	6803      	ldr	r3, [r0, #0]
 801d1dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801d1de:	4798      	blx	r3
 801d1e0:	4917      	ldr	r1, [pc, #92]	@ (801d240 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x114>)
 801d1e2:	f9bd 200a 	ldrsh.w	r2, [sp, #10]
 801d1e6:	880b      	ldrh	r3, [r1, #0]
 801d1e8:	f9bd c008 	ldrsh.w	ip, [sp, #8]
 801d1ec:	fb03 c202 	mla	r2, r3, r2, ip
 801d1f0:	437b      	muls	r3, r7
 801d1f2:	eb05 0745 	add.w	r7, r5, r5, lsl #1
 801d1f6:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801d1fa:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801d1fe:	4410      	add	r0, r2
 801d200:	18c2      	adds	r2, r0, r3
 801d202:	4290      	cmp	r0, r2
 801d204:	d214      	bcs.n	801d230 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x104>
 801d206:	eb00 0c07 	add.w	ip, r0, r7
 801d20a:	4560      	cmp	r0, ip
 801d20c:	d204      	bcs.n	801d218 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xec>
 801d20e:	f814 3b01 	ldrb.w	r3, [r4], #1
 801d212:	f800 3b01 	strb.w	r3, [r0], #1
 801d216:	e7f8      	b.n	801d20a <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xde>
 801d218:	880b      	ldrh	r3, [r1, #0]
 801d21a:	1b5b      	subs	r3, r3, r5
 801d21c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801d220:	4418      	add	r0, r3
 801d222:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 801d226:	1b5b      	subs	r3, r3, r5
 801d228:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801d22c:	441c      	add	r4, r3
 801d22e:	e7e8      	b.n	801d202 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xd6>
 801d230:	6830      	ldr	r0, [r6, #0]
 801d232:	6803      	ldr	r3, [r0, #0]
 801d234:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801d236:	4798      	blx	r3
 801d238:	e7b5      	b.n	801d1a6 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x7a>
 801d23a:	bf00      	nop
 801d23c:	24028e18 	.word	0x24028e18
 801d240:	24028e1a 	.word	0x24028e1a
 801d244:	24028e1c 	.word	0x24028e1c
 801d248:	24028e20 	.word	0x24028e20

0801d24c <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h>:
 801d24c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d250:	b08f      	sub	sp, #60	@ 0x3c
 801d252:	461c      	mov	r4, r3
 801d254:	9203      	str	r2, [sp, #12]
 801d256:	f89d 2064 	ldrb.w	r2, [sp, #100]	@ 0x64
 801d25a:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 801d25c:	6820      	ldr	r0, [r4, #0]
 801d25e:	9100      	str	r1, [sp, #0]
 801d260:	9204      	str	r2, [sp, #16]
 801d262:	aa0a      	add	r2, sp, #40	@ 0x28
 801d264:	6861      	ldr	r1, [r4, #4]
 801d266:	c203      	stmia	r2!, {r0, r1}
 801d268:	6818      	ldr	r0, [r3, #0]
 801d26a:	aa0c      	add	r2, sp, #48	@ 0x30
 801d26c:	6859      	ldr	r1, [r3, #4]
 801d26e:	c203      	stmia	r2!, {r0, r1}
 801d270:	a80a      	add	r0, sp, #40	@ 0x28
 801d272:	f7f9 fff9 	bl	8017268 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801d276:	4621      	mov	r1, r4
 801d278:	a80c      	add	r0, sp, #48	@ 0x30
 801d27a:	f7fa f839 	bl	80172f0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801d27e:	f9bd 602c 	ldrsh.w	r6, [sp, #44]	@ 0x2c
 801d282:	f9bd 502e 	ldrsh.w	r5, [sp, #46]	@ 0x2e
 801d286:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 801d28a:	f8bd 0030 	ldrh.w	r0, [sp, #48]	@ 0x30
 801d28e:	bfdb      	ittet	le
 801d290:	b2b3      	uxthle	r3, r6
 801d292:	f44f 6280 	movle.w	r2, #1024	@ 0x400
 801d296:	2301      	movgt	r3, #1
 801d298:	fb92 f3f3 	sdivle	r3, r2, r3
 801d29c:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	@ 0x32
 801d2a0:	441d      	add	r5, r3
 801d2a2:	fb92 f1f3 	sdiv	r1, r2, r3
 801d2a6:	fa1f fc81 	uxth.w	ip, r1
 801d2aa:	3d01      	subs	r5, #1
 801d2ac:	fb0c 2413 	mls	r4, ip, r3, r2
 801d2b0:	4661      	mov	r1, ip
 801d2b2:	fb14 f406 	smulbb	r4, r4, r6
 801d2b6:	4404      	add	r4, r0
 801d2b8:	fb95 f5f3 	sdiv	r5, r5, r3
 801d2bc:	b2a4      	uxth	r4, r4
 801d2be:	b131      	cbz	r1, 801d2ce <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x82>
 801d2c0:	9b03      	ldr	r3, [sp, #12]
 801d2c2:	9900      	ldr	r1, [sp, #0]
 801d2c4:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 801d2c8:	ba1b      	rev	r3, r3
 801d2ca:	4419      	add	r1, r3
 801d2cc:	9100      	str	r1, [sp, #0]
 801d2ce:	f8bd 3028 	ldrh.w	r3, [sp, #40]	@ 0x28
 801d2d2:	b2ad      	uxth	r5, r5
 801d2d4:	f9bd 6036 	ldrsh.w	r6, [sp, #54]	@ 0x36
 801d2d8:	4418      	add	r0, r3
 801d2da:	f8bd 302a 	ldrh.w	r3, [sp, #42]	@ 0x2a
 801d2de:	00ad      	lsls	r5, r5, #2
 801d2e0:	441a      	add	r2, r3
 801d2e2:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	@ 0x34
 801d2e6:	f8ad 0030 	strh.w	r0, [sp, #48]	@ 0x30
 801d2ea:	9301      	str	r3, [sp, #4]
 801d2ec:	4b79      	ldr	r3, [pc, #484]	@ (801d4d4 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x288>)
 801d2ee:	f8ad 2032 	strh.w	r2, [sp, #50]	@ 0x32
 801d2f2:	6818      	ldr	r0, [r3, #0]
 801d2f4:	6803      	ldr	r3, [r0, #0]
 801d2f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801d2f8:	4798      	blx	r3
 801d2fa:	4a77      	ldr	r2, [pc, #476]	@ (801d4d8 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x28c>)
 801d2fc:	f9bd 1032 	ldrsh.w	r1, [sp, #50]	@ 0x32
 801d300:	2c00      	cmp	r4, #0
 801d302:	8813      	ldrh	r3, [r2, #0]
 801d304:	f9bd c030 	ldrsh.w	ip, [sp, #48]	@ 0x30
 801d308:	9209      	str	r2, [sp, #36]	@ 0x24
 801d30a:	fb03 c101 	mla	r1, r3, r1, ip
 801d30e:	fb06 f303 	mul.w	r3, r6, r3
 801d312:	bf18      	it	ne
 801d314:	2600      	movne	r6, #0
 801d316:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801d31a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801d31e:	4408      	add	r0, r1
 801d320:	4403      	add	r3, r0
 801d322:	9306      	str	r3, [sp, #24]
 801d324:	f105 0304 	add.w	r3, r5, #4
 801d328:	9305      	str	r3, [sp, #20]
 801d32a:	9b01      	ldr	r3, [sp, #4]
 801d32c:	bf08      	it	eq
 801d32e:	461e      	moveq	r6, r3
 801d330:	2300      	movs	r3, #0
 801d332:	b2b6      	uxth	r6, r6
 801d334:	9302      	str	r3, [sp, #8]
 801d336:	9a06      	ldr	r2, [sp, #24]
 801d338:	4290      	cmp	r0, r2
 801d33a:	f080 80c2 	bcs.w	801d4c2 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x276>
 801d33e:	b963      	cbnz	r3, 801d35a <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x10e>
 801d340:	9b00      	ldr	r3, [sp, #0]
 801d342:	781a      	ldrb	r2, [r3, #0]
 801d344:	0993      	lsrs	r3, r2, #6
 801d346:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 801d34a:	9202      	str	r2, [sp, #8]
 801d34c:	1e5a      	subs	r2, r3, #1
 801d34e:	2a02      	cmp	r2, #2
 801d350:	d815      	bhi.n	801d37e <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x132>
 801d352:	9a00      	ldr	r2, [sp, #0]
 801d354:	b29b      	uxth	r3, r3
 801d356:	3201      	adds	r2, #1
 801d358:	9200      	str	r2, [sp, #0]
 801d35a:	b1b4      	cbz	r4, 801d38a <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x13e>
 801d35c:	429c      	cmp	r4, r3
 801d35e:	bf91      	iteee	ls
 801d360:	1b1c      	subls	r4, r3, r4
 801d362:	1ae4      	subhi	r4, r4, r3
 801d364:	4635      	movhi	r5, r6
 801d366:	f04f 0e00 	movhi.w	lr, #0
 801d36a:	bf9b      	ittet	ls
 801d36c:	fa1f fe84 	uxthls.w	lr, r4
 801d370:	f8bd 5004 	ldrhls.w	r5, [sp, #4]
 801d374:	b2a4      	uxthhi	r4, r4
 801d376:	2400      	movls	r4, #0
 801d378:	4673      	mov	r3, lr
 801d37a:	462e      	mov	r6, r5
 801d37c:	e7db      	b.n	801d336 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xea>
 801d37e:	9a00      	ldr	r2, [sp, #0]
 801d380:	9b00      	ldr	r3, [sp, #0]
 801d382:	3202      	adds	r2, #2
 801d384:	785b      	ldrb	r3, [r3, #1]
 801d386:	9200      	str	r2, [sp, #0]
 801d388:	e7e7      	b.n	801d35a <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x10e>
 801d38a:	2204      	movs	r2, #4
 801d38c:	9905      	ldr	r1, [sp, #20]
 801d38e:	429e      	cmp	r6, r3
 801d390:	4615      	mov	r5, r2
 801d392:	9a02      	ldr	r2, [sp, #8]
 801d394:	bf94      	ite	ls
 801d396:	eba3 0e06 	subls.w	lr, r3, r6
 801d39a:	46a6      	movhi	lr, r4
 801d39c:	fb15 1202 	smlabb	r2, r5, r2, r1
 801d3a0:	9903      	ldr	r1, [sp, #12]
 801d3a2:	bf8c      	ite	hi
 801d3a4:	1af5      	subhi	r5, r6, r3
 801d3a6:	fa1f fe8e 	uxthls.w	lr, lr
 801d3aa:	f851 c002 	ldr.w	ip, [r1, r2]
 801d3ae:	bf9a      	itte	ls
 801d3b0:	4625      	movls	r5, r4
 801d3b2:	4632      	movls	r2, r6
 801d3b4:	b2ad      	uxthhi	r5, r5
 801d3b6:	ea4f 611c 	mov.w	r1, ip, lsr #24
 801d3ba:	bf88      	it	hi
 801d3bc:	461a      	movhi	r2, r3
 801d3be:	b179      	cbz	r1, 801d3e0 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x194>
 801d3c0:	29ff      	cmp	r1, #255	@ 0xff
 801d3c2:	fa5f f98c 	uxtb.w	r9, ip
 801d3c6:	f3cc 2807 	ubfx	r8, ip, #8, #8
 801d3ca:	f3cc 4c07 	ubfx	ip, ip, #16, #8
 801d3ce:	d126      	bne.n	801d41e <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1d2>
 801d3d0:	9f04      	ldr	r7, [sp, #16]
 801d3d2:	2fff      	cmp	r7, #255	@ 0xff
 801d3d4:	d123      	bne.n	801d41e <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1d2>
 801d3d6:	4682      	mov	sl, r0
 801d3d8:	4611      	mov	r1, r2
 801d3da:	f10a 0a03 	add.w	sl, sl, #3
 801d3de:	b9a9      	cbnz	r1, 801d40c <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1c0>
 801d3e0:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801d3e4:	429e      	cmp	r6, r3
 801d3e6:	4410      	add	r0, r2
 801d3e8:	d8c6      	bhi.n	801d378 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x12c>
 801d3ea:	f8bd 5004 	ldrh.w	r5, [sp, #4]
 801d3ee:	f8bd 402c 	ldrh.w	r4, [sp, #44]	@ 0x2c
 801d3f2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801d3f4:	1b64      	subs	r4, r4, r5
 801d3f6:	9a01      	ldr	r2, [sp, #4]
 801d3f8:	881b      	ldrh	r3, [r3, #0]
 801d3fa:	b2a4      	uxth	r4, r4
 801d3fc:	1a9b      	subs	r3, r3, r2
 801d3fe:	2c00      	cmp	r4, #0
 801d400:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801d404:	bf18      	it	ne
 801d406:	2500      	movne	r5, #0
 801d408:	4418      	add	r0, r3
 801d40a:	e7b5      	b.n	801d378 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x12c>
 801d40c:	3901      	subs	r1, #1
 801d40e:	f80a 9c03 	strb.w	r9, [sl, #-3]
 801d412:	f80a 8c02 	strb.w	r8, [sl, #-2]
 801d416:	f80a cc01 	strb.w	ip, [sl, #-1]
 801d41a:	b289      	uxth	r1, r1
 801d41c:	e7dd      	b.n	801d3da <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x18e>
 801d41e:	9f04      	ldr	r7, [sp, #16]
 801d420:	fb07 fa01 	mul.w	sl, r7, r1
 801d424:	f10a 0101 	add.w	r1, sl, #1
 801d428:	eb01 212a 	add.w	r1, r1, sl, asr #8
 801d42c:	1209      	asrs	r1, r1, #8
 801d42e:	ea6f 0a01 	mvn.w	sl, r1
 801d432:	b289      	uxth	r1, r1
 801d434:	fb19 f901 	smulbb	r9, r9, r1
 801d438:	fa5f fa8a 	uxtb.w	sl, sl
 801d43c:	fb18 f801 	smulbb	r8, r8, r1
 801d440:	fb1c f101 	smulbb	r1, ip, r1
 801d444:	fa1f f789 	uxth.w	r7, r9
 801d448:	4684      	mov	ip, r0
 801d44a:	4691      	mov	r9, r2
 801d44c:	9707      	str	r7, [sp, #28]
 801d44e:	b289      	uxth	r1, r1
 801d450:	fa1f f788 	uxth.w	r7, r8
 801d454:	9708      	str	r7, [sp, #32]
 801d456:	f10c 0c03 	add.w	ip, ip, #3
 801d45a:	f1b9 0f00 	cmp.w	r9, #0
 801d45e:	d0bf      	beq.n	801d3e0 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x194>
 801d460:	f81c 8c03 	ldrb.w	r8, [ip, #-3]
 801d464:	f109 39ff 	add.w	r9, r9, #4294967295
 801d468:	9f07      	ldr	r7, [sp, #28]
 801d46a:	fa1f f989 	uxth.w	r9, r9
 801d46e:	fb08 780a 	mla	r8, r8, sl, r7
 801d472:	9f08      	ldr	r7, [sp, #32]
 801d474:	fa1f f888 	uxth.w	r8, r8
 801d478:	f108 0b01 	add.w	fp, r8, #1
 801d47c:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 801d480:	ea4f 2828 	mov.w	r8, r8, asr #8
 801d484:	f80c 8c03 	strb.w	r8, [ip, #-3]
 801d488:	f81c 8c02 	ldrb.w	r8, [ip, #-2]
 801d48c:	fb08 780a 	mla	r8, r8, sl, r7
 801d490:	fa1f f888 	uxth.w	r8, r8
 801d494:	f108 0b01 	add.w	fp, r8, #1
 801d498:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 801d49c:	ea4f 2828 	mov.w	r8, r8, asr #8
 801d4a0:	f80c 8c02 	strb.w	r8, [ip, #-2]
 801d4a4:	f81c 8c01 	ldrb.w	r8, [ip, #-1]
 801d4a8:	fb08 180a 	mla	r8, r8, sl, r1
 801d4ac:	fa1f f888 	uxth.w	r8, r8
 801d4b0:	f108 0b01 	add.w	fp, r8, #1
 801d4b4:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 801d4b8:	ea4f 2828 	mov.w	r8, r8, asr #8
 801d4bc:	f80c 8c01 	strb.w	r8, [ip, #-1]
 801d4c0:	e7c9      	b.n	801d456 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x20a>
 801d4c2:	4b04      	ldr	r3, [pc, #16]	@ (801d4d4 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x288>)
 801d4c4:	6818      	ldr	r0, [r3, #0]
 801d4c6:	6803      	ldr	r3, [r0, #0]
 801d4c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801d4ca:	4798      	blx	r3
 801d4cc:	b00f      	add	sp, #60	@ 0x3c
 801d4ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d4d2:	bf00      	nop
 801d4d4:	24028e20 	.word	0x24028e20
 801d4d8:	24028e1a 	.word	0x24028e1a

0801d4dc <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t>:
 801d4dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d4e0:	b089      	sub	sp, #36	@ 0x24
 801d4e2:	4607      	mov	r7, r0
 801d4e4:	4689      	mov	r9, r1
 801d4e6:	4692      	mov	sl, r2
 801d4e8:	ac08      	add	r4, sp, #32
 801d4ea:	461e      	mov	r6, r3
 801d4ec:	f824 3d0c 	strh.w	r3, [r4, #-12]!
 801d4f0:	4620      	mov	r0, r4
 801d4f2:	f7fd ff77 	bl	801b3e4 <_ZNK8touchgfx6Bitmap7getDataEv>
 801d4f6:	683b      	ldr	r3, [r7, #0]
 801d4f8:	4605      	mov	r5, r0
 801d4fa:	4620      	mov	r0, r4
 801d4fc:	f8d3 8018 	ldr.w	r8, [r3, #24]
 801d500:	f7fd fe7e 	bl	801b200 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801d504:	4683      	mov	fp, r0
 801d506:	4620      	mov	r0, r4
 801d508:	f7fd feae 	bl	801b268 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801d50c:	4653      	mov	r3, sl
 801d50e:	464a      	mov	r2, r9
 801d510:	4639      	mov	r1, r7
 801d512:	9500      	str	r5, [sp, #0]
 801d514:	e9cd b001 	strd	fp, r0, [sp, #4]
 801d518:	a806      	add	r0, sp, #24
 801d51a:	47c0      	blx	r8
 801d51c:	a906      	add	r1, sp, #24
 801d51e:	4630      	mov	r0, r6
 801d520:	f7fd fd52 	bl	801afc8 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE>
 801d524:	4628      	mov	r0, r5
 801d526:	b009      	add	sp, #36	@ 0x24
 801d528:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801d52c <_ZN8touchgfx8LCD24bppD0Ev>:
 801d52c:	b510      	push	{r4, lr}
 801d52e:	4604      	mov	r4, r0
 801d530:	216c      	movs	r1, #108	@ 0x6c
 801d532:	f009 fb2c 	bl	8026b8e <_ZdlPvj>
 801d536:	4620      	mov	r0, r4
 801d538:	bd10      	pop	{r4, pc}

0801d53a <_ZN8touchgfx8LCD24bpp17DecompressorL8_L4D0Ev>:
 801d53a:	b510      	push	{r4, lr}
 801d53c:	4604      	mov	r4, r0
 801d53e:	2104      	movs	r1, #4
 801d540:	f009 fb25 	bl	8026b8e <_ZdlPvj>
 801d544:	4620      	mov	r0, r4
 801d546:	bd10      	pop	{r4, pc}

0801d548 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLED0Ev>:
 801d548:	b510      	push	{r4, lr}
 801d54a:	4604      	mov	r4, r0
 801d54c:	2104      	movs	r1, #4
 801d54e:	f009 fb1e 	bl	8026b8e <_ZdlPvj>
 801d552:	4620      	mov	r0, r4
 801d554:	bd10      	pop	{r4, pc}

0801d556 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW9D0Ev>:
 801d556:	b510      	push	{r4, lr}
 801d558:	4604      	mov	r4, r0
 801d55a:	f640 0144 	movw	r1, #2116	@ 0x844
 801d55e:	f009 fb16 	bl	8026b8e <_ZdlPvj>
 801d562:	4620      	mov	r0, r4
 801d564:	bd10      	pop	{r4, pc}

0801d566 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOID0Ev>:
 801d566:	b510      	push	{r4, lr}
 801d568:	4604      	mov	r4, r0
 801d56a:	f44f 7182 	mov.w	r1, #260	@ 0x104
 801d56e:	f009 fb0e 	bl	8026b8e <_ZdlPvj>
 801d572:	4620      	mov	r0, r4
 801d574:	bd10      	pop	{r4, pc}

0801d576 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 801d576:	b510      	push	{r4, lr}
 801d578:	4604      	mov	r4, r0
 801d57a:	2104      	movs	r1, #4
 801d57c:	f009 fb07 	bl	8026b8e <_ZdlPvj>
 801d580:	4620      	mov	r0, r4
 801d582:	bd10      	pop	{r4, pc}

0801d584 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 801d584:	b510      	push	{r4, lr}
 801d586:	4604      	mov	r4, r0
 801d588:	2104      	movs	r1, #4
 801d58a:	f009 fb00 	bl	8026b8e <_ZdlPvj>
 801d58e:	4620      	mov	r0, r4
 801d590:	bd10      	pop	{r4, pc}

0801d592 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 801d592:	b510      	push	{r4, lr}
 801d594:	4604      	mov	r4, r0
 801d596:	2104      	movs	r1, #4
 801d598:	f009 faf9 	bl	8026b8e <_ZdlPvj>
 801d59c:	4620      	mov	r0, r4
 801d59e:	bd10      	pop	{r4, pc}

0801d5a0 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 801d5a0:	b510      	push	{r4, lr}
 801d5a2:	4604      	mov	r4, r0
 801d5a4:	2104      	movs	r1, #4
 801d5a6:	f009 faf2 	bl	8026b8e <_ZdlPvj>
 801d5aa:	4620      	mov	r0, r4
 801d5ac:	bd10      	pop	{r4, pc}

0801d5ae <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 801d5ae:	b510      	push	{r4, lr}
 801d5b0:	4604      	mov	r4, r0
 801d5b2:	2104      	movs	r1, #4
 801d5b4:	f009 faeb 	bl	8026b8e <_ZdlPvj>
 801d5b8:	4620      	mov	r0, r4
 801d5ba:	bd10      	pop	{r4, pc}

0801d5bc <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 801d5bc:	b510      	push	{r4, lr}
 801d5be:	4604      	mov	r4, r0
 801d5c0:	2104      	movs	r1, #4
 801d5c2:	f009 fae4 	bl	8026b8e <_ZdlPvj>
 801d5c6:	4620      	mov	r0, r4
 801d5c8:	bd10      	pop	{r4, pc}

0801d5ca <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 801d5ca:	b510      	push	{r4, lr}
 801d5cc:	4604      	mov	r4, r0
 801d5ce:	2104      	movs	r1, #4
 801d5d0:	f009 fadd 	bl	8026b8e <_ZdlPvj>
 801d5d4:	4620      	mov	r0, r4
 801d5d6:	bd10      	pop	{r4, pc}

0801d5d8 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 801d5d8:	b510      	push	{r4, lr}
 801d5da:	4604      	mov	r4, r0
 801d5dc:	2104      	movs	r1, #4
 801d5de:	f009 fad6 	bl	8026b8e <_ZdlPvj>
 801d5e2:	4620      	mov	r0, r4
 801d5e4:	bd10      	pop	{r4, pc}

0801d5e6 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 801d5e6:	b510      	push	{r4, lr}
 801d5e8:	4604      	mov	r4, r0
 801d5ea:	2104      	movs	r1, #4
 801d5ec:	f009 facf 	bl	8026b8e <_ZdlPvj>
 801d5f0:	4620      	mov	r0, r4
 801d5f2:	bd10      	pop	{r4, pc}

0801d5f4 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 801d5f4:	b510      	push	{r4, lr}
 801d5f6:	4604      	mov	r4, r0
 801d5f8:	2104      	movs	r1, #4
 801d5fa:	f009 fac8 	bl	8026b8e <_ZdlPvj>
 801d5fe:	4620      	mov	r0, r4
 801d600:	bd10      	pop	{r4, pc}

0801d602 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 801d602:	b510      	push	{r4, lr}
 801d604:	4604      	mov	r4, r0
 801d606:	2104      	movs	r1, #4
 801d608:	f009 fac1 	bl	8026b8e <_ZdlPvj>
 801d60c:	4620      	mov	r0, r4
 801d60e:	bd10      	pop	{r4, pc}

0801d610 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 801d610:	b510      	push	{r4, lr}
 801d612:	4604      	mov	r4, r0
 801d614:	2104      	movs	r1, #4
 801d616:	f009 faba 	bl	8026b8e <_ZdlPvj>
 801d61a:	4620      	mov	r0, r4
 801d61c:	bd10      	pop	{r4, pc}

0801d61e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 801d61e:	b510      	push	{r4, lr}
 801d620:	4604      	mov	r4, r0
 801d622:	2104      	movs	r1, #4
 801d624:	f009 fab3 	bl	8026b8e <_ZdlPvj>
 801d628:	4620      	mov	r0, r4
 801d62a:	bd10      	pop	{r4, pc}

0801d62c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 801d62c:	b510      	push	{r4, lr}
 801d62e:	4604      	mov	r4, r0
 801d630:	2104      	movs	r1, #4
 801d632:	f009 faac 	bl	8026b8e <_ZdlPvj>
 801d636:	4620      	mov	r0, r4
 801d638:	bd10      	pop	{r4, pc}

0801d63a <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 801d63a:	b510      	push	{r4, lr}
 801d63c:	4604      	mov	r4, r0
 801d63e:	2104      	movs	r1, #4
 801d640:	f009 faa5 	bl	8026b8e <_ZdlPvj>
 801d644:	4620      	mov	r0, r4
 801d646:	bd10      	pop	{r4, pc}

0801d648 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 801d648:	b510      	push	{r4, lr}
 801d64a:	4604      	mov	r4, r0
 801d64c:	2104      	movs	r1, #4
 801d64e:	f009 fa9e 	bl	8026b8e <_ZdlPvj>
 801d652:	4620      	mov	r0, r4
 801d654:	bd10      	pop	{r4, pc}

0801d656 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGAD0Ev>:
 801d656:	b510      	push	{r4, lr}
 801d658:	4604      	mov	r4, r0
 801d65a:	2104      	movs	r1, #4
 801d65c:	f009 fa97 	bl	8026b8e <_ZdlPvj>
 801d660:	4620      	mov	r0, r4
 801d662:	bd10      	pop	{r4, pc}

0801d664 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GAD0Ev>:
 801d664:	b510      	push	{r4, lr}
 801d666:	4604      	mov	r4, r0
 801d668:	2104      	movs	r1, #4
 801d66a:	f009 fa90 	bl	8026b8e <_ZdlPvj>
 801d66e:	4620      	mov	r0, r4
 801d670:	bd10      	pop	{r4, pc}

0801d672 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGAD0Ev>:
 801d672:	b510      	push	{r4, lr}
 801d674:	4604      	mov	r4, r0
 801d676:	2104      	movs	r1, #4
 801d678:	f009 fa89 	bl	8026b8e <_ZdlPvj>
 801d67c:	4620      	mov	r0, r4
 801d67e:	bd10      	pop	{r4, pc}

0801d680 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GAD0Ev>:
 801d680:	b510      	push	{r4, lr}
 801d682:	4604      	mov	r4, r0
 801d684:	2104      	movs	r1, #4
 801d686:	f009 fa82 	bl	8026b8e <_ZdlPvj>
 801d68a:	4620      	mov	r0, r4
 801d68c:	bd10      	pop	{r4, pc}
	...

0801d690 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h>:
 801d690:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d694:	b08f      	sub	sp, #60	@ 0x3c
 801d696:	461c      	mov	r4, r3
 801d698:	460e      	mov	r6, r1
 801d69a:	9206      	str	r2, [sp, #24]
 801d69c:	f89d 2064 	ldrb.w	r2, [sp, #100]	@ 0x64
 801d6a0:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 801d6a2:	9202      	str	r2, [sp, #8]
 801d6a4:	2a00      	cmp	r2, #0
 801d6a6:	f000 8128 	beq.w	801d8fa <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x26a>
 801d6aa:	6820      	ldr	r0, [r4, #0]
 801d6ac:	aa0a      	add	r2, sp, #40	@ 0x28
 801d6ae:	6861      	ldr	r1, [r4, #4]
 801d6b0:	c203      	stmia	r2!, {r0, r1}
 801d6b2:	6818      	ldr	r0, [r3, #0]
 801d6b4:	aa0c      	add	r2, sp, #48	@ 0x30
 801d6b6:	6859      	ldr	r1, [r3, #4]
 801d6b8:	c203      	stmia	r2!, {r0, r1}
 801d6ba:	a80a      	add	r0, sp, #40	@ 0x28
 801d6bc:	f7f9 fdd4 	bl	8017268 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801d6c0:	4621      	mov	r1, r4
 801d6c2:	a80c      	add	r0, sp, #48	@ 0x30
 801d6c4:	f7f9 fe14 	bl	80172f0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801d6c8:	f9bd 702c 	ldrsh.w	r7, [sp, #44]	@ 0x2c
 801d6cc:	f9bd 502e 	ldrsh.w	r5, [sp, #46]	@ 0x2e
 801d6d0:	f5b7 6f80 	cmp.w	r7, #1024	@ 0x400
 801d6d4:	f8bd 0030 	ldrh.w	r0, [sp, #48]	@ 0x30
 801d6d8:	bfdb      	ittet	le
 801d6da:	b2bb      	uxthle	r3, r7
 801d6dc:	f44f 6280 	movle.w	r2, #1024	@ 0x400
 801d6e0:	2301      	movgt	r3, #1
 801d6e2:	fb92 f3f3 	sdivle	r3, r2, r3
 801d6e6:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	@ 0x32
 801d6ea:	441d      	add	r5, r3
 801d6ec:	fb92 f1f3 	sdiv	r1, r2, r3
 801d6f0:	fa1f fc81 	uxth.w	ip, r1
 801d6f4:	3d01      	subs	r5, #1
 801d6f6:	fb0c 2413 	mls	r4, ip, r3, r2
 801d6fa:	4661      	mov	r1, ip
 801d6fc:	fb14 f407 	smulbb	r4, r4, r7
 801d700:	4404      	add	r4, r0
 801d702:	fb95 f5f3 	sdiv	r5, r5, r3
 801d706:	b2a4      	uxth	r4, r4
 801d708:	b121      	cbz	r1, 801d714 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x84>
 801d70a:	9b06      	ldr	r3, [sp, #24]
 801d70c:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 801d710:	ba1b      	rev	r3, r3
 801d712:	441e      	add	r6, r3
 801d714:	f8bd 3028 	ldrh.w	r3, [sp, #40]	@ 0x28
 801d718:	b2ad      	uxth	r5, r5
 801d71a:	f9bd 8034 	ldrsh.w	r8, [sp, #52]	@ 0x34
 801d71e:	4418      	add	r0, r3
 801d720:	f8bd 302a 	ldrh.w	r3, [sp, #42]	@ 0x2a
 801d724:	f9bd 7036 	ldrsh.w	r7, [sp, #54]	@ 0x36
 801d728:	00ad      	lsls	r5, r5, #2
 801d72a:	441a      	add	r2, r3
 801d72c:	4b74      	ldr	r3, [pc, #464]	@ (801d900 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x270>)
 801d72e:	f8ad 0030 	strh.w	r0, [sp, #48]	@ 0x30
 801d732:	6818      	ldr	r0, [r3, #0]
 801d734:	f8ad 2032 	strh.w	r2, [sp, #50]	@ 0x32
 801d738:	6803      	ldr	r3, [r0, #0]
 801d73a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801d73c:	4798      	blx	r3
 801d73e:	4a71      	ldr	r2, [pc, #452]	@ (801d904 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x274>)
 801d740:	f9bd 1032 	ldrsh.w	r1, [sp, #50]	@ 0x32
 801d744:	2c00      	cmp	r4, #0
 801d746:	8813      	ldrh	r3, [r2, #0]
 801d748:	f9bd c030 	ldrsh.w	ip, [sp, #48]	@ 0x30
 801d74c:	9209      	str	r2, [sp, #36]	@ 0x24
 801d74e:	fb03 c101 	mla	r1, r3, r1, ip
 801d752:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 801d756:	fb03 f307 	mul.w	r3, r3, r7
 801d75a:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801d75e:	9204      	str	r2, [sp, #16]
 801d760:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801d764:	9a02      	ldr	r2, [sp, #8]
 801d766:	4408      	add	r0, r1
 801d768:	f1c2 02ff 	rsb	r2, r2, #255	@ 0xff
 801d76c:	4403      	add	r3, r0
 801d76e:	b292      	uxth	r2, r2
 801d770:	9307      	str	r3, [sp, #28]
 801d772:	f105 0304 	add.w	r3, r5, #4
 801d776:	bf0c      	ite	eq
 801d778:	4645      	moveq	r5, r8
 801d77a:	2500      	movne	r5, #0
 801d77c:	9308      	str	r3, [sp, #32]
 801d77e:	2300      	movs	r3, #0
 801d780:	b2ad      	uxth	r5, r5
 801d782:	9205      	str	r2, [sp, #20]
 801d784:	9303      	str	r3, [sp, #12]
 801d786:	9a07      	ldr	r2, [sp, #28]
 801d788:	4282      	cmp	r2, r0
 801d78a:	f240 80b1 	bls.w	801d8f0 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x260>
 801d78e:	b95b      	cbnz	r3, 801d7a8 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x118>
 801d790:	7832      	ldrb	r2, [r6, #0]
 801d792:	0993      	lsrs	r3, r2, #6
 801d794:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 801d798:	9203      	str	r2, [sp, #12]
 801d79a:	1e5a      	subs	r2, r3, #1
 801d79c:	2a02      	cmp	r2, #2
 801d79e:	bf8d      	iteet	hi
 801d7a0:	7873      	ldrbhi	r3, [r6, #1]
 801d7a2:	3601      	addls	r6, #1
 801d7a4:	b29b      	uxthls	r3, r3
 801d7a6:	3602      	addhi	r6, #2
 801d7a8:	b184      	cbz	r4, 801d7cc <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x13c>
 801d7aa:	429c      	cmp	r4, r3
 801d7ac:	bf91      	iteee	ls
 801d7ae:	1b1c      	subls	r4, r3, r4
 801d7b0:	1ae4      	subhi	r4, r4, r3
 801d7b2:	4629      	movhi	r1, r5
 801d7b4:	f04f 0e00 	movhi.w	lr, #0
 801d7b8:	bf9b      	ittet	ls
 801d7ba:	fa1f fe84 	uxthls.w	lr, r4
 801d7be:	2400      	movls	r4, #0
 801d7c0:	b2a4      	uxthhi	r4, r4
 801d7c2:	fa1f f188 	uxthls.w	r1, r8
 801d7c6:	4673      	mov	r3, lr
 801d7c8:	460d      	mov	r5, r1
 801d7ca:	e7dc      	b.n	801d786 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0xf6>
 801d7cc:	2203      	movs	r2, #3
 801d7ce:	9908      	ldr	r1, [sp, #32]
 801d7d0:	42ab      	cmp	r3, r5
 801d7d2:	4617      	mov	r7, r2
 801d7d4:	9a03      	ldr	r2, [sp, #12]
 801d7d6:	bf24      	itt	cs
 801d7d8:	eba3 0e05 	subcs.w	lr, r3, r5
 801d7dc:	9501      	strcs	r5, [sp, #4]
 801d7de:	fb17 1702 	smlabb	r7, r7, r2, r1
 801d7e2:	9a06      	ldr	r2, [sp, #24]
 801d7e4:	bf34      	ite	cc
 801d7e6:	1ae9      	subcc	r1, r5, r3
 801d7e8:	fa1f fe8e 	uxthcs.w	lr, lr
 801d7ec:	4417      	add	r7, r2
 801d7ee:	9a02      	ldr	r2, [sp, #8]
 801d7f0:	bf2f      	iteee	cs
 801d7f2:	4621      	movcs	r1, r4
 801d7f4:	b289      	uxthcc	r1, r1
 801d7f6:	9301      	strcc	r3, [sp, #4]
 801d7f8:	46a6      	movcc	lr, r4
 801d7fa:	2aff      	cmp	r2, #255	@ 0xff
 801d7fc:	d11e      	bne.n	801d83c <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1ac>
 801d7fe:	4681      	mov	r9, r0
 801d800:	f8dd c004 	ldr.w	ip, [sp, #4]
 801d804:	f109 0903 	add.w	r9, r9, #3
 801d808:	f1bc 0f00 	cmp.w	ip, #0
 801d80c:	d15f      	bne.n	801d8ce <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x23e>
 801d80e:	9a01      	ldr	r2, [sp, #4]
 801d810:	42ab      	cmp	r3, r5
 801d812:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801d816:	4410      	add	r0, r2
 801d818:	d3d5      	bcc.n	801d7c6 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x136>
 801d81a:	fa1f f188 	uxth.w	r1, r8
 801d81e:	f8bd 402c 	ldrh.w	r4, [sp, #44]	@ 0x2c
 801d822:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801d824:	1a64      	subs	r4, r4, r1
 801d826:	881b      	ldrh	r3, [r3, #0]
 801d828:	b2a4      	uxth	r4, r4
 801d82a:	eba3 0308 	sub.w	r3, r3, r8
 801d82e:	2c00      	cmp	r4, #0
 801d830:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801d834:	bf18      	it	ne
 801d836:	2100      	movne	r1, #0
 801d838:	4418      	add	r0, r3
 801d83a:	e7c4      	b.n	801d7c6 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x136>
 801d83c:	4684      	mov	ip, r0
 801d83e:	f8dd a004 	ldr.w	sl, [sp, #4]
 801d842:	f10c 0c03 	add.w	ip, ip, #3
 801d846:	f1ba 0f00 	cmp.w	sl, #0
 801d84a:	d0e0      	beq.n	801d80e <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x17e>
 801d84c:	f81c bc03 	ldrb.w	fp, [ip, #-3]
 801d850:	f10a 3aff 	add.w	sl, sl, #4294967295
 801d854:	9a05      	ldr	r2, [sp, #20]
 801d856:	f897 9000 	ldrb.w	r9, [r7]
 801d85a:	fa1f fa8a 	uxth.w	sl, sl
 801d85e:	fb1b fb02 	smulbb	fp, fp, r2
 801d862:	9a04      	ldr	r2, [sp, #16]
 801d864:	fb09 b902 	mla	r9, r9, r2, fp
 801d868:	9a05      	ldr	r2, [sp, #20]
 801d86a:	fa1f f989 	uxth.w	r9, r9
 801d86e:	f109 0b01 	add.w	fp, r9, #1
 801d872:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801d876:	f81c bc02 	ldrb.w	fp, [ip, #-2]
 801d87a:	fb1b fb02 	smulbb	fp, fp, r2
 801d87e:	ea4f 2929 	mov.w	r9, r9, asr #8
 801d882:	9a04      	ldr	r2, [sp, #16]
 801d884:	f80c 9c03 	strb.w	r9, [ip, #-3]
 801d888:	f897 9001 	ldrb.w	r9, [r7, #1]
 801d88c:	fb09 b902 	mla	r9, r9, r2, fp
 801d890:	9a05      	ldr	r2, [sp, #20]
 801d892:	fa1f f989 	uxth.w	r9, r9
 801d896:	f109 0b01 	add.w	fp, r9, #1
 801d89a:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801d89e:	f81c bc01 	ldrb.w	fp, [ip, #-1]
 801d8a2:	fb1b fb02 	smulbb	fp, fp, r2
 801d8a6:	ea4f 2929 	mov.w	r9, r9, asr #8
 801d8aa:	9a04      	ldr	r2, [sp, #16]
 801d8ac:	f80c 9c02 	strb.w	r9, [ip, #-2]
 801d8b0:	f897 9002 	ldrb.w	r9, [r7, #2]
 801d8b4:	fb09 b902 	mla	r9, r9, r2, fp
 801d8b8:	fa1f f989 	uxth.w	r9, r9
 801d8bc:	f109 0b01 	add.w	fp, r9, #1
 801d8c0:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801d8c4:	ea4f 2929 	mov.w	r9, r9, asr #8
 801d8c8:	f80c 9c01 	strb.w	r9, [ip, #-1]
 801d8cc:	e7b9      	b.n	801d842 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1b2>
 801d8ce:	f897 a000 	ldrb.w	sl, [r7]
 801d8d2:	f10c 3cff 	add.w	ip, ip, #4294967295
 801d8d6:	f809 ac03 	strb.w	sl, [r9, #-3]
 801d8da:	fa1f fc8c 	uxth.w	ip, ip
 801d8de:	f897 a001 	ldrb.w	sl, [r7, #1]
 801d8e2:	f809 ac02 	strb.w	sl, [r9, #-2]
 801d8e6:	f897 a002 	ldrb.w	sl, [r7, #2]
 801d8ea:	f809 ac01 	strb.w	sl, [r9, #-1]
 801d8ee:	e789      	b.n	801d804 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x174>
 801d8f0:	4b03      	ldr	r3, [pc, #12]	@ (801d900 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x270>)
 801d8f2:	6818      	ldr	r0, [r3, #0]
 801d8f4:	6803      	ldr	r3, [r0, #0]
 801d8f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801d8f8:	4798      	blx	r3
 801d8fa:	b00f      	add	sp, #60	@ 0x3c
 801d8fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d900:	24028e20 	.word	0x24028e20
 801d904:	24028e1a 	.word	0x24028e1a

0801d908 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h>:
 801d908:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d90c:	b09b      	sub	sp, #108	@ 0x6c
 801d90e:	461d      	mov	r5, r3
 801d910:	4604      	mov	r4, r0
 801d912:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801d914:	e9cd 1210 	strd	r1, r2, [sp, #64]	@ 0x40
 801d918:	f89d 2094 	ldrb.w	r2, [sp, #148]	@ 0x94
 801d91c:	9208      	str	r2, [sp, #32]
 801d91e:	2a00      	cmp	r2, #0
 801d920:	f000 81f3 	beq.w	801dd0a <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x402>
 801d924:	6828      	ldr	r0, [r5, #0]
 801d926:	aa16      	add	r2, sp, #88	@ 0x58
 801d928:	6869      	ldr	r1, [r5, #4]
 801d92a:	c203      	stmia	r2!, {r0, r1}
 801d92c:	6818      	ldr	r0, [r3, #0]
 801d92e:	aa18      	add	r2, sp, #96	@ 0x60
 801d930:	6859      	ldr	r1, [r3, #4]
 801d932:	c203      	stmia	r2!, {r0, r1}
 801d934:	a816      	add	r0, sp, #88	@ 0x58
 801d936:	f7f9 fc97 	bl	8017268 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801d93a:	4629      	mov	r1, r5
 801d93c:	a818      	add	r0, sp, #96	@ 0x60
 801d93e:	f7f9 fcd7 	bl	80172f0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801d942:	f9bd 305c 	ldrsh.w	r3, [sp, #92]	@ 0x5c
 801d946:	f9bd 605e 	ldrsh.w	r6, [sp, #94]	@ 0x5e
 801d94a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 801d94e:	f9bd 5066 	ldrsh.w	r5, [sp, #102]	@ 0x66
 801d952:	bfdb      	ittet	le
 801d954:	b29a      	uxthle	r2, r3
 801d956:	f44f 6180 	movle.w	r1, #1024	@ 0x400
 801d95a:	f04f 0a01 	movgt.w	sl, #1
 801d95e:	fb91 faf2 	sdivle	sl, r1, r2
 801d962:	f9bd 2062 	ldrsh.w	r2, [sp, #98]	@ 0x62
 801d966:	4456      	add	r6, sl
 801d968:	f8bd 1060 	ldrh.w	r1, [sp, #96]	@ 0x60
 801d96c:	3e01      	subs	r6, #1
 801d96e:	fb92 f0fa 	sdiv	r0, r2, sl
 801d972:	b280      	uxth	r0, r0
 801d974:	fb00 281a 	mls	r8, r0, sl, r2
 801d978:	900e      	str	r0, [sp, #56]	@ 0x38
 801d97a:	fb18 f803 	smulbb	r8, r8, r3
 801d97e:	f8bd 3058 	ldrh.w	r3, [sp, #88]	@ 0x58
 801d982:	4488      	add	r8, r1
 801d984:	4419      	add	r1, r3
 801d986:	f8bd 305a 	ldrh.w	r3, [sp, #90]	@ 0x5a
 801d98a:	f8ad 1060 	strh.w	r1, [sp, #96]	@ 0x60
 801d98e:	fa1f f888 	uxth.w	r8, r8
 801d992:	441a      	add	r2, r3
 801d994:	f9bd 3064 	ldrsh.w	r3, [sp, #100]	@ 0x64
 801d998:	9303      	str	r3, [sp, #12]
 801d99a:	4b9c      	ldr	r3, [pc, #624]	@ (801dc0c <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x304>)
 801d99c:	f8ad 2062 	strh.w	r2, [sp, #98]	@ 0x62
 801d9a0:	6818      	ldr	r0, [r3, #0]
 801d9a2:	6803      	ldr	r3, [r0, #0]
 801d9a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801d9a6:	4798      	blx	r3
 801d9a8:	4b99      	ldr	r3, [pc, #612]	@ (801dc10 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x308>)
 801d9aa:	f9bd 1062 	ldrsh.w	r1, [sp, #98]	@ 0x62
 801d9ae:	f1b8 0f00 	cmp.w	r8, #0
 801d9b2:	881a      	ldrh	r2, [r3, #0]
 801d9b4:	f9bd 7060 	ldrsh.w	r7, [sp, #96]	@ 0x60
 801d9b8:	fb02 f505 	mul.w	r5, r2, r5
 801d9bc:	fb02 7101 	mla	r1, r2, r1, r7
 801d9c0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801d9c4:	9314      	str	r3, [sp, #80]	@ 0x50
 801d9c6:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801d9ca:	9b08      	ldr	r3, [sp, #32]
 801d9cc:	fb96 f6fa 	sdiv	r6, r6, sl
 801d9d0:	4408      	add	r0, r1
 801d9d2:	f106 0601 	add.w	r6, r6, #1
 801d9d6:	f1c3 03ff 	rsb	r3, r3, #255	@ 0xff
 801d9da:	f04f 0100 	mov.w	r1, #0
 801d9de:	eb00 0205 	add.w	r2, r0, r5
 801d9e2:	b2b6      	uxth	r6, r6
 801d9e4:	b29b      	uxth	r3, r3
 801d9e6:	910b      	str	r1, [sp, #44]	@ 0x2c
 801d9e8:	9209      	str	r2, [sp, #36]	@ 0x24
 801d9ea:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801d9ec:	930d      	str	r3, [sp, #52]	@ 0x34
 801d9ee:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 801d9f2:	4b88      	ldr	r3, [pc, #544]	@ (801dc14 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x30c>)
 801d9f4:	f106 0204 	add.w	r2, r6, #4
 801d9f8:	eba3 0304 	sub.w	r3, r3, r4
 801d9fc:	9205      	str	r2, [sp, #20]
 801d9fe:	9a03      	ldr	r2, [sp, #12]
 801da00:	bf18      	it	ne
 801da02:	2200      	movne	r2, #0
 801da04:	9315      	str	r3, [sp, #84]	@ 0x54
 801da06:	b292      	uxth	r2, r2
 801da08:	990e      	ldr	r1, [sp, #56]	@ 0x38
 801da0a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801da0c:	fa11 f383 	uxtah	r3, r1, r3
 801da10:	9911      	ldr	r1, [sp, #68]	@ 0x44
 801da12:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 801da16:	3304      	adds	r3, #4
 801da18:	9306      	str	r3, [sp, #24]
 801da1a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801da1c:	4283      	cmp	r3, r0
 801da1e:	f240 816f 	bls.w	801dd00 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x3f8>
 801da22:	f8bd 305c 	ldrh.w	r3, [sp, #92]	@ 0x5c
 801da26:	f04f 0900 	mov.w	r9, #0
 801da2a:	9d06      	ldr	r5, [sp, #24]
 801da2c:	fbb8 f3f3 	udiv	r3, r8, r3
 801da30:	ebaa 0303 	sub.w	r3, sl, r3
 801da34:	782d      	ldrb	r5, [r5, #0]
 801da36:	b29b      	uxth	r3, r3
 801da38:	950f      	str	r5, [sp, #60]	@ 0x3c
 801da3a:	3501      	adds	r5, #1
 801da3c:	9312      	str	r3, [sp, #72]	@ 0x48
 801da3e:	9b06      	ldr	r3, [sp, #24]
 801da40:	9504      	str	r5, [sp, #16]
 801da42:	7859      	ldrb	r1, [r3, #1]
 801da44:	789b      	ldrb	r3, [r3, #2]
 801da46:	021b      	lsls	r3, r3, #8
 801da48:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 801da4c:	9906      	ldr	r1, [sp, #24]
 801da4e:	78c9      	ldrb	r1, [r1, #3]
 801da50:	430b      	orrs	r3, r1
 801da52:	9910      	ldr	r1, [sp, #64]	@ 0x40
 801da54:	4419      	add	r1, r3
 801da56:	1c4d      	adds	r5, r1, #1
 801da58:	7849      	ldrb	r1, [r1, #1]
 801da5a:	9502      	str	r5, [sp, #8]
 801da5c:	0209      	lsls	r1, r1, #8
 801da5e:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 801da60:	f401 71ff 	and.w	r1, r1, #510	@ 0x1fe
 801da64:	5ceb      	ldrb	r3, [r5, r3]
 801da66:	4319      	orrs	r1, r3
 801da68:	b28b      	uxth	r3, r1
 801da6a:	f884 1804 	strb.w	r1, [r4, #2052]	@ 0x804
 801da6e:	930a      	str	r3, [sp, #40]	@ 0x28
 801da70:	2300      	movs	r3, #0
 801da72:	9307      	str	r3, [sp, #28]
 801da74:	2301      	movs	r3, #1
 801da76:	e9cd 3300 	strd	r3, r3, [sp]
 801da7a:	469c      	mov	ip, r3
 801da7c:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 801da80:	930c      	str	r3, [sp, #48]	@ 0x30
 801da82:	f1b8 0f00 	cmp.w	r8, #0
 801da86:	f000 8082 	beq.w	801db8e <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x286>
 801da8a:	45c4      	cmp	ip, r8
 801da8c:	d270      	bcs.n	801db70 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x268>
 801da8e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801da90:	eba8 080c 	sub.w	r8, r8, ip
 801da94:	4611      	mov	r1, r2
 801da96:	4283      	cmp	r3, r0
 801da98:	fa1f f888 	uxth.w	r8, r8
 801da9c:	d802      	bhi.n	801daa4 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x19c>
 801da9e:	e074      	b.n	801db8a <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x282>
 801daa0:	2b00      	cmp	r3, #0
 801daa2:	d15f      	bne.n	801db64 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x25c>
 801daa4:	9b02      	ldr	r3, [sp, #8]
 801daa6:	9a01      	ldr	r2, [sp, #4]
 801daa8:	785b      	ldrb	r3, [r3, #1]
 801daaa:	f1c2 0207 	rsb	r2, r2, #7
 801daae:	9d01      	ldr	r5, [sp, #4]
 801dab0:	4093      	lsls	r3, r2
 801dab2:	005b      	lsls	r3, r3, #1
 801dab4:	f403 72ff 	and.w	r2, r3, #510	@ 0x1fe
 801dab8:	9b02      	ldr	r3, [sp, #8]
 801daba:	781b      	ldrb	r3, [r3, #0]
 801dabc:	412b      	asrs	r3, r5
 801dabe:	b2db      	uxtb	r3, r3
 801dac0:	4313      	orrs	r3, r2
 801dac2:	462a      	mov	r2, r5
 801dac4:	3201      	adds	r2, #1
 801dac6:	b29e      	uxth	r6, r3
 801dac8:	b2d2      	uxtb	r2, r2
 801daca:	2a08      	cmp	r2, #8
 801dacc:	9201      	str	r2, [sp, #4]
 801dace:	9a02      	ldr	r2, [sp, #8]
 801dad0:	bf09      	itett	eq
 801dad2:	3202      	addeq	r2, #2
 801dad4:	3201      	addne	r2, #1
 801dad6:	9202      	streq	r2, [sp, #8]
 801dad8:	2200      	moveq	r2, #0
 801dada:	bf14      	ite	ne
 801dadc:	9202      	strne	r2, [sp, #8]
 801dade:	9201      	streq	r2, [sp, #4]
 801dae0:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801dae2:	42b2      	cmp	r2, r6
 801dae4:	d309      	bcc.n	801dafa <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1f2>
 801dae6:	f884 3804 	strb.w	r3, [r4, #2052]	@ 0x804
 801daea:	2301      	movs	r3, #1
 801daec:	9a04      	ldr	r2, [sp, #16]
 801daee:	f5b2 7f00 	cmp.w	r2, #512	@ 0x200
 801daf2:	d30e      	bcc.n	801db12 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x20a>
 801daf4:	9300      	str	r3, [sp, #0]
 801daf6:	2500      	movs	r5, #0
 801daf8:	e035      	b.n	801db66 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x25e>
 801dafa:	9b04      	ldr	r3, [sp, #16]
 801dafc:	429e      	cmp	r6, r3
 801dafe:	d318      	bcc.n	801db32 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x22a>
 801db00:	9b00      	ldr	r3, [sp, #0]
 801db02:	f894 2804 	ldrb.w	r2, [r4, #2052]	@ 0x804
 801db06:	18e3      	adds	r3, r4, r3
 801db08:	f883 2804 	strb.w	r2, [r3, #2052]	@ 0x804
 801db0c:	9b00      	ldr	r3, [sp, #0]
 801db0e:	3301      	adds	r3, #1
 801db10:	b29b      	uxth	r3, r3
 801db12:	9a04      	ldr	r2, [sp, #16]
 801db14:	f894 5804 	ldrb.w	r5, [r4, #2052]	@ 0x804
 801db18:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 801db1c:	9f00      	ldr	r7, [sp, #0]
 801db1e:	7115      	strb	r5, [r2, #4]
 801db20:	3701      	adds	r7, #1
 801db22:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 801db24:	7157      	strb	r7, [r2, #5]
 801db26:	80d5      	strh	r5, [r2, #6]
 801db28:	9a04      	ldr	r2, [sp, #16]
 801db2a:	3201      	adds	r2, #1
 801db2c:	b292      	uxth	r2, r2
 801db2e:	9204      	str	r2, [sp, #16]
 801db30:	e7e0      	b.n	801daf4 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1ec>
 801db32:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 801db36:	4632      	mov	r2, r6
 801db38:	795b      	ldrb	r3, [r3, #5]
 801db3a:	f603 0504 	addw	r5, r3, #2052	@ 0x804
 801db3e:	4425      	add	r5, r4
 801db40:	9f15      	ldr	r7, [sp, #84]	@ 0x54
 801db42:	eb07 0c05 	add.w	ip, r7, r5
 801db46:	f1bc 0f00 	cmp.w	ip, #0
 801db4a:	dd07      	ble.n	801db5c <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x254>
 801db4c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 801db50:	f892 c004 	ldrb.w	ip, [r2, #4]
 801db54:	f805 cd01 	strb.w	ip, [r5, #-1]!
 801db58:	88d2      	ldrh	r2, [r2, #6]
 801db5a:	e7f1      	b.n	801db40 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x238>
 801db5c:	f884 2804 	strb.w	r2, [r4, #2052]	@ 0x804
 801db60:	b29b      	uxth	r3, r3
 801db62:	e7c3      	b.n	801daec <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1e4>
 801db64:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 801db66:	460a      	mov	r2, r1
 801db68:	960a      	str	r6, [sp, #40]	@ 0x28
 801db6a:	46a9      	mov	r9, r5
 801db6c:	469c      	mov	ip, r3
 801db6e:	e788      	b.n	801da82 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x17a>
 801db70:	ebac 0308 	sub.w	r3, ip, r8
 801db74:	eb09 0508 	add.w	r5, r9, r8
 801db78:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 801db7c:	b29b      	uxth	r3, r3
 801db7e:	b2ad      	uxth	r5, r5
 801db80:	f04f 0800 	mov.w	r8, #0
 801db84:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801db86:	4282      	cmp	r2, r0
 801db88:	d88a      	bhi.n	801daa0 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x198>
 801db8a:	460a      	mov	r2, r1
 801db8c:	e745      	b.n	801da1a <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x112>
 801db8e:	4594      	cmp	ip, r2
 801db90:	9d08      	ldr	r5, [sp, #32]
 801db92:	4686      	mov	lr, r0
 801db94:	bf27      	ittee	cs
 801db96:	ebac 0302 	subcs.w	r3, ip, r2
 801db9a:	4616      	movcs	r6, r2
 801db9c:	eba2 010c 	subcc.w	r1, r2, ip
 801dba0:	4666      	movcc	r6, ip
 801dba2:	bf27      	ittee	cs
 801dba4:	b29b      	uxthcs	r3, r3
 801dba6:	4641      	movcs	r1, r8
 801dba8:	b289      	uxthcc	r1, r1
 801dbaa:	4643      	movcc	r3, r8
 801dbac:	2dff      	cmp	r5, #255	@ 0xff
 801dbae:	eb09 0506 	add.w	r5, r9, r6
 801dbb2:	b2ad      	uxth	r5, r5
 801dbb4:	d130      	bne.n	801dc18 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x310>
 801dbb6:	45a9      	cmp	r9, r5
 801dbb8:	f10e 0e03 	add.w	lr, lr, #3
 801dbbc:	d17a      	bne.n	801dcb4 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x3ac>
 801dbbe:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801dbc2:	4594      	cmp	ip, r2
 801dbc4:	4430      	add	r0, r6
 801dbc6:	d3db      	bcc.n	801db80 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x278>
 801dbc8:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801dbca:	9903      	ldr	r1, [sp, #12]
 801dbcc:	8812      	ldrh	r2, [r2, #0]
 801dbce:	1a52      	subs	r2, r2, r1
 801dbd0:	9912      	ldr	r1, [sp, #72]	@ 0x48
 801dbd2:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801dbd6:	4410      	add	r0, r2
 801dbd8:	9a07      	ldr	r2, [sp, #28]
 801dbda:	3201      	adds	r2, #1
 801dbdc:	428a      	cmp	r2, r1
 801dbde:	9207      	str	r2, [sp, #28]
 801dbe0:	f040 8081 	bne.w	801dce6 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x3de>
 801dbe4:	f8bd 8060 	ldrh.w	r8, [sp, #96]	@ 0x60
 801dbe8:	f8bd c058 	ldrh.w	ip, [sp, #88]	@ 0x58
 801dbec:	9b03      	ldr	r3, [sp, #12]
 801dbee:	eba8 080c 	sub.w	r8, r8, ip
 801dbf2:	fa1f f888 	uxth.w	r8, r8
 801dbf6:	f1b8 0f00 	cmp.w	r8, #0
 801dbfa:	bf08      	it	eq
 801dbfc:	461a      	moveq	r2, r3
 801dbfe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801dc00:	bf18      	it	ne
 801dc02:	2200      	movne	r2, #0
 801dc04:	3301      	adds	r3, #1
 801dc06:	b292      	uxth	r2, r2
 801dc08:	930b      	str	r3, [sp, #44]	@ 0x2c
 801dc0a:	e6fd      	b.n	801da08 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x100>
 801dc0c:	24028e20 	.word	0x24028e20
 801dc10:	24028e1a 	.word	0x24028e1a
 801dc14:	fffff7fb 	.word	0xfffff7fb
 801dc18:	45a9      	cmp	r9, r5
 801dc1a:	f10e 0e03 	add.w	lr, lr, #3
 801dc1e:	d0ce      	beq.n	801dbbe <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x2b6>
 801dc20:	f109 0701 	add.w	r7, r9, #1
 801dc24:	44a1      	add	r9, r4
 801dc26:	f81e bc03 	ldrb.w	fp, [lr, #-3]
 801dc2a:	f899 8804 	ldrb.w	r8, [r9, #2052]	@ 0x804
 801dc2e:	9713      	str	r7, [sp, #76]	@ 0x4c
 801dc30:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 801dc34:	9f05      	ldr	r7, [sp, #20]
 801dc36:	eb07 0908 	add.w	r9, r7, r8
 801dc3a:	f817 8008 	ldrb.w	r8, [r7, r8]
 801dc3e:	9f0d      	ldr	r7, [sp, #52]	@ 0x34
 801dc40:	fb1b fb07 	smulbb	fp, fp, r7
 801dc44:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
 801dc46:	fb08 b807 	mla	r8, r8, r7, fp
 801dc4a:	9f0d      	ldr	r7, [sp, #52]	@ 0x34
 801dc4c:	fa1f f888 	uxth.w	r8, r8
 801dc50:	f108 0b01 	add.w	fp, r8, #1
 801dc54:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 801dc58:	f81e bc02 	ldrb.w	fp, [lr, #-2]
 801dc5c:	fb1b fb07 	smulbb	fp, fp, r7
 801dc60:	ea4f 2828 	mov.w	r8, r8, asr #8
 801dc64:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
 801dc66:	f80e 8c03 	strb.w	r8, [lr, #-3]
 801dc6a:	f899 8001 	ldrb.w	r8, [r9, #1]
 801dc6e:	fb08 b807 	mla	r8, r8, r7, fp
 801dc72:	9f0d      	ldr	r7, [sp, #52]	@ 0x34
 801dc74:	fa1f f888 	uxth.w	r8, r8
 801dc78:	f108 0b01 	add.w	fp, r8, #1
 801dc7c:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 801dc80:	ea4f 2828 	mov.w	r8, r8, asr #8
 801dc84:	f80e 8c02 	strb.w	r8, [lr, #-2]
 801dc88:	f899 8002 	ldrb.w	r8, [r9, #2]
 801dc8c:	f81e 9c01 	ldrb.w	r9, [lr, #-1]
 801dc90:	fb19 f907 	smulbb	r9, r9, r7
 801dc94:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
 801dc96:	fb08 9807 	mla	r8, r8, r7, r9
 801dc9a:	fa1f f888 	uxth.w	r8, r8
 801dc9e:	f108 0901 	add.w	r9, r8, #1
 801dca2:	eb09 2818 	add.w	r8, r9, r8, lsr #8
 801dca6:	f8bd 904c 	ldrh.w	r9, [sp, #76]	@ 0x4c
 801dcaa:	ea4f 2828 	mov.w	r8, r8, asr #8
 801dcae:	f80e 8c01 	strb.w	r8, [lr, #-1]
 801dcb2:	e7b1      	b.n	801dc18 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x310>
 801dcb4:	f109 0b01 	add.w	fp, r9, #1
 801dcb8:	44a1      	add	r9, r4
 801dcba:	9f05      	ldr	r7, [sp, #20]
 801dcbc:	f899 8804 	ldrb.w	r8, [r9, #2052]	@ 0x804
 801dcc0:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 801dcc4:	eb07 0908 	add.w	r9, r7, r8
 801dcc8:	f817 8008 	ldrb.w	r8, [r7, r8]
 801dccc:	f80e 8c03 	strb.w	r8, [lr, #-3]
 801dcd0:	f899 8001 	ldrb.w	r8, [r9, #1]
 801dcd4:	f80e 8c02 	strb.w	r8, [lr, #-2]
 801dcd8:	f899 8002 	ldrb.w	r8, [r9, #2]
 801dcdc:	fa1f f98b 	uxth.w	r9, fp
 801dce0:	f80e 8c01 	strb.w	r8, [lr, #-1]
 801dce4:	e767      	b.n	801dbb6 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x2ae>
 801dce6:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 801dcea:	f8bd 805c 	ldrh.w	r8, [sp, #92]	@ 0x5c
 801dcee:	eba8 0801 	sub.w	r8, r8, r1
 801dcf2:	fa1f f888 	uxth.w	r8, r8
 801dcf6:	f1b8 0f00 	cmp.w	r8, #0
 801dcfa:	bf18      	it	ne
 801dcfc:	2100      	movne	r1, #0
 801dcfe:	e741      	b.n	801db84 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x27c>
 801dd00:	4b03      	ldr	r3, [pc, #12]	@ (801dd10 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x408>)
 801dd02:	6818      	ldr	r0, [r3, #0]
 801dd04:	6803      	ldr	r3, [r0, #0]
 801dd06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801dd08:	4798      	blx	r3
 801dd0a:	b01b      	add	sp, #108	@ 0x6c
 801dd0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801dd10:	24028e20 	.word	0x24028e20

0801dd14 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h>:
 801dd14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801dd18:	b09d      	sub	sp, #116	@ 0x74
 801dd1a:	461d      	mov	r5, r3
 801dd1c:	4604      	mov	r4, r0
 801dd1e:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 801dd20:	e9cd 120f 	strd	r1, r2, [sp, #60]	@ 0x3c
 801dd24:	f89d 209c 	ldrb.w	r2, [sp, #156]	@ 0x9c
 801dd28:	920c      	str	r2, [sp, #48]	@ 0x30
 801dd2a:	2a00      	cmp	r2, #0
 801dd2c:	f000 81de 	beq.w	801e0ec <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x3d8>
 801dd30:	6828      	ldr	r0, [r5, #0]
 801dd32:	aa18      	add	r2, sp, #96	@ 0x60
 801dd34:	6869      	ldr	r1, [r5, #4]
 801dd36:	c203      	stmia	r2!, {r0, r1}
 801dd38:	6818      	ldr	r0, [r3, #0]
 801dd3a:	aa1a      	add	r2, sp, #104	@ 0x68
 801dd3c:	6859      	ldr	r1, [r3, #4]
 801dd3e:	c203      	stmia	r2!, {r0, r1}
 801dd40:	a818      	add	r0, sp, #96	@ 0x60
 801dd42:	f7f9 fa91 	bl	8017268 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801dd46:	4629      	mov	r1, r5
 801dd48:	a81a      	add	r0, sp, #104	@ 0x68
 801dd4a:	f7f9 fad1 	bl	80172f0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801dd4e:	f9bd 3064 	ldrsh.w	r3, [sp, #100]	@ 0x64
 801dd52:	f9bd 7066 	ldrsh.w	r7, [sp, #102]	@ 0x66
 801dd56:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 801dd5a:	f9bd 606e 	ldrsh.w	r6, [sp, #110]	@ 0x6e
 801dd5e:	bfdb      	ittet	le
 801dd60:	b29a      	uxthle	r2, r3
 801dd62:	f44f 6180 	movle.w	r1, #1024	@ 0x400
 801dd66:	2201      	movgt	r2, #1
 801dd68:	fb91 f2f2 	sdivle	r2, r1, r2
 801dd6c:	9201      	str	r2, [sp, #4]
 801dd6e:	9801      	ldr	r0, [sp, #4]
 801dd70:	f9bd 206a 	ldrsh.w	r2, [sp, #106]	@ 0x6a
 801dd74:	9901      	ldr	r1, [sp, #4]
 801dd76:	fb92 f0f0 	sdiv	r0, r2, r0
 801dd7a:	b280      	uxth	r0, r0
 801dd7c:	440f      	add	r7, r1
 801dd7e:	900d      	str	r0, [sp, #52]	@ 0x34
 801dd80:	3f01      	subs	r7, #1
 801dd82:	9801      	ldr	r0, [sp, #4]
 801dd84:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 801dd86:	fb05 2510 	mls	r5, r5, r0, r2
 801dd8a:	fb97 f7f1 	sdiv	r7, r7, r1
 801dd8e:	fb15 f503 	smulbb	r5, r5, r3
 801dd92:	f8bd 1068 	ldrh.w	r1, [sp, #104]	@ 0x68
 801dd96:	f8bd 3060 	ldrh.w	r3, [sp, #96]	@ 0x60
 801dd9a:	3701      	adds	r7, #1
 801dd9c:	440d      	add	r5, r1
 801dd9e:	4419      	add	r1, r3
 801dda0:	f8bd 3062 	ldrh.w	r3, [sp, #98]	@ 0x62
 801dda4:	b2bf      	uxth	r7, r7
 801dda6:	441a      	add	r2, r3
 801dda8:	f9bd 306c 	ldrsh.w	r3, [sp, #108]	@ 0x6c
 801ddac:	f8ad 1068 	strh.w	r1, [sp, #104]	@ 0x68
 801ddb0:	00bf      	lsls	r7, r7, #2
 801ddb2:	9304      	str	r3, [sp, #16]
 801ddb4:	b2ad      	uxth	r5, r5
 801ddb6:	4bb0      	ldr	r3, [pc, #704]	@ (801e078 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x364>)
 801ddb8:	f8ad 206a 	strh.w	r2, [sp, #106]	@ 0x6a
 801ddbc:	6818      	ldr	r0, [r3, #0]
 801ddbe:	6803      	ldr	r3, [r0, #0]
 801ddc0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801ddc2:	4798      	blx	r3
 801ddc4:	4bad      	ldr	r3, [pc, #692]	@ (801e07c <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x368>)
 801ddc6:	f9bd 106a 	ldrsh.w	r1, [sp, #106]	@ 0x6a
 801ddca:	2d00      	cmp	r5, #0
 801ddcc:	881a      	ldrh	r2, [r3, #0]
 801ddce:	f9bd c068 	ldrsh.w	ip, [sp, #104]	@ 0x68
 801ddd2:	fb02 f606 	mul.w	r6, r2, r6
 801ddd6:	fb02 c101 	mla	r1, r2, r1, ip
 801ddda:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801ddde:	9316      	str	r3, [sp, #88]	@ 0x58
 801dde0:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801dde4:	4ba6      	ldr	r3, [pc, #664]	@ (801e080 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x36c>)
 801dde6:	eb00 0801 	add.w	r8, r0, r1
 801ddea:	bf18      	it	ne
 801ddec:	2100      	movne	r1, #0
 801ddee:	eba3 0304 	sub.w	r3, r3, r4
 801ddf2:	eb08 0206 	add.w	r2, r8, r6
 801ddf6:	9317      	str	r3, [sp, #92]	@ 0x5c
 801ddf8:	9208      	str	r2, [sp, #32]
 801ddfa:	f107 0204 	add.w	r2, r7, #4
 801ddfe:	9211      	str	r2, [sp, #68]	@ 0x44
 801de00:	9a04      	ldr	r2, [sp, #16]
 801de02:	bf08      	it	eq
 801de04:	4611      	moveq	r1, r2
 801de06:	2200      	movs	r2, #0
 801de08:	b289      	uxth	r1, r1
 801de0a:	920b      	str	r2, [sp, #44]	@ 0x2c
 801de0c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801de0e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801de10:	fa12 f383 	uxtah	r3, r2, r3
 801de14:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801de16:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801de1a:	3304      	adds	r3, #4
 801de1c:	9306      	str	r3, [sp, #24]
 801de1e:	9b08      	ldr	r3, [sp, #32]
 801de20:	4543      	cmp	r3, r8
 801de22:	f240 815e 	bls.w	801e0e2 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x3ce>
 801de26:	f8bd 3064 	ldrh.w	r3, [sp, #100]	@ 0x64
 801de2a:	f04f 0b01 	mov.w	fp, #1
 801de2e:	9a01      	ldr	r2, [sp, #4]
 801de30:	9806      	ldr	r0, [sp, #24]
 801de32:	465e      	mov	r6, fp
 801de34:	f8cd b008 	str.w	fp, [sp, #8]
 801de38:	7800      	ldrb	r0, [r0, #0]
 801de3a:	fbb5 f3f3 	udiv	r3, r5, r3
 801de3e:	1ad3      	subs	r3, r2, r3
 801de40:	900e      	str	r0, [sp, #56]	@ 0x38
 801de42:	3001      	adds	r0, #1
 801de44:	b29b      	uxth	r3, r3
 801de46:	9005      	str	r0, [sp, #20]
 801de48:	9312      	str	r3, [sp, #72]	@ 0x48
 801de4a:	9b06      	ldr	r3, [sp, #24]
 801de4c:	785a      	ldrb	r2, [r3, #1]
 801de4e:	789b      	ldrb	r3, [r3, #2]
 801de50:	021b      	lsls	r3, r3, #8
 801de52:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801de56:	9a06      	ldr	r2, [sp, #24]
 801de58:	78d2      	ldrb	r2, [r2, #3]
 801de5a:	4313      	orrs	r3, r2
 801de5c:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801de5e:	441a      	add	r2, r3
 801de60:	1c50      	adds	r0, r2, #1
 801de62:	7852      	ldrb	r2, [r2, #1]
 801de64:	9003      	str	r0, [sp, #12]
 801de66:	0212      	lsls	r2, r2, #8
 801de68:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 801de6a:	f402 72ff 	and.w	r2, r2, #510	@ 0x1fe
 801de6e:	5cc3      	ldrb	r3, [r0, r3]
 801de70:	431a      	orrs	r2, r3
 801de72:	b293      	uxth	r3, r2
 801de74:	f884 2804 	strb.w	r2, [r4, #2052]	@ 0x804
 801de78:	930a      	str	r3, [sp, #40]	@ 0x28
 801de7a:	2300      	movs	r3, #0
 801de7c:	461a      	mov	r2, r3
 801de7e:	9307      	str	r3, [sp, #28]
 801de80:	2d00      	cmp	r5, #0
 801de82:	d07c      	beq.n	801df7e <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x26a>
 801de84:	42ae      	cmp	r6, r5
 801de86:	d26c      	bcs.n	801df62 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x24e>
 801de88:	9b08      	ldr	r3, [sp, #32]
 801de8a:	1bad      	subs	r5, r5, r6
 801de8c:	4608      	mov	r0, r1
 801de8e:	4543      	cmp	r3, r8
 801de90:	b2ad      	uxth	r5, r5
 801de92:	d802      	bhi.n	801de9a <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x186>
 801de94:	e071      	b.n	801df7a <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x266>
 801de96:	2b00      	cmp	r3, #0
 801de98:	d15d      	bne.n	801df56 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x242>
 801de9a:	9b03      	ldr	r3, [sp, #12]
 801de9c:	9a02      	ldr	r2, [sp, #8]
 801de9e:	785b      	ldrb	r3, [r3, #1]
 801dea0:	f1c2 0207 	rsb	r2, r2, #7
 801dea4:	9902      	ldr	r1, [sp, #8]
 801dea6:	4093      	lsls	r3, r2
 801dea8:	005b      	lsls	r3, r3, #1
 801deaa:	f403 72ff 	and.w	r2, r3, #510	@ 0x1fe
 801deae:	9b03      	ldr	r3, [sp, #12]
 801deb0:	781b      	ldrb	r3, [r3, #0]
 801deb2:	410b      	asrs	r3, r1
 801deb4:	3101      	adds	r1, #1
 801deb6:	b2c9      	uxtb	r1, r1
 801deb8:	b2db      	uxtb	r3, r3
 801deba:	2908      	cmp	r1, #8
 801debc:	9102      	str	r1, [sp, #8]
 801debe:	9903      	ldr	r1, [sp, #12]
 801dec0:	ea43 0302 	orr.w	r3, r3, r2
 801dec4:	bf0c      	ite	eq
 801dec6:	3102      	addeq	r1, #2
 801dec8:	3101      	addne	r1, #1
 801deca:	b29a      	uxth	r2, r3
 801decc:	bf05      	ittet	eq
 801dece:	9103      	streq	r1, [sp, #12]
 801ded0:	2100      	moveq	r1, #0
 801ded2:	9103      	strne	r1, [sp, #12]
 801ded4:	9102      	streq	r1, [sp, #8]
 801ded6:	990e      	ldr	r1, [sp, #56]	@ 0x38
 801ded8:	4291      	cmp	r1, r2
 801deda:	d30a      	bcc.n	801def2 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1de>
 801dedc:	f884 3804 	strb.w	r3, [r4, #2052]	@ 0x804
 801dee0:	2301      	movs	r3, #1
 801dee2:	9905      	ldr	r1, [sp, #20]
 801dee4:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 801dee8:	d30f      	bcc.n	801df0a <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1f6>
 801deea:	469b      	mov	fp, r3
 801deec:	f04f 0c00 	mov.w	ip, #0
 801def0:	e032      	b.n	801df58 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x244>
 801def2:	9b05      	ldr	r3, [sp, #20]
 801def4:	429a      	cmp	r2, r3
 801def6:	d318      	bcc.n	801df2a <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x216>
 801def8:	eb04 030b 	add.w	r3, r4, fp
 801defc:	f894 1804 	ldrb.w	r1, [r4, #2052]	@ 0x804
 801df00:	f883 1804 	strb.w	r1, [r3, #2052]	@ 0x804
 801df04:	f10b 0301 	add.w	r3, fp, #1
 801df08:	b29b      	uxth	r3, r3
 801df0a:	9905      	ldr	r1, [sp, #20]
 801df0c:	f894 6804 	ldrb.w	r6, [r4, #2052]	@ 0x804
 801df10:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 801df14:	710e      	strb	r6, [r1, #4]
 801df16:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 801df18:	80ce      	strh	r6, [r1, #6]
 801df1a:	f10b 0601 	add.w	r6, fp, #1
 801df1e:	714e      	strb	r6, [r1, #5]
 801df20:	9905      	ldr	r1, [sp, #20]
 801df22:	3101      	adds	r1, #1
 801df24:	b289      	uxth	r1, r1
 801df26:	9105      	str	r1, [sp, #20]
 801df28:	e7df      	b.n	801deea <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1d6>
 801df2a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801df2e:	4611      	mov	r1, r2
 801df30:	795b      	ldrb	r3, [r3, #5]
 801df32:	f603 0604 	addw	r6, r3, #2052	@ 0x804
 801df36:	4426      	add	r6, r4
 801df38:	9f17      	ldr	r7, [sp, #92]	@ 0x5c
 801df3a:	4437      	add	r7, r6
 801df3c:	2f00      	cmp	r7, #0
 801df3e:	dd06      	ble.n	801df4e <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x23a>
 801df40:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 801df44:	790f      	ldrb	r7, [r1, #4]
 801df46:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801df4a:	88c9      	ldrh	r1, [r1, #6]
 801df4c:	e7f4      	b.n	801df38 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x224>
 801df4e:	f884 1804 	strb.w	r1, [r4, #2052]	@ 0x804
 801df52:	b29b      	uxth	r3, r3
 801df54:	e7c5      	b.n	801dee2 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1ce>
 801df56:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801df58:	920a      	str	r2, [sp, #40]	@ 0x28
 801df5a:	4601      	mov	r1, r0
 801df5c:	4662      	mov	r2, ip
 801df5e:	461e      	mov	r6, r3
 801df60:	e78e      	b.n	801de80 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x16c>
 801df62:	1b73      	subs	r3, r6, r5
 801df64:	eb02 0c05 	add.w	ip, r2, r5
 801df68:	f8bd 0010 	ldrh.w	r0, [sp, #16]
 801df6c:	b29b      	uxth	r3, r3
 801df6e:	fa1f fc8c 	uxth.w	ip, ip
 801df72:	2500      	movs	r5, #0
 801df74:	9a08      	ldr	r2, [sp, #32]
 801df76:	4542      	cmp	r2, r8
 801df78:	d88d      	bhi.n	801de96 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x182>
 801df7a:	4601      	mov	r1, r0
 801df7c:	e74f      	b.n	801de1e <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x10a>
 801df7e:	428e      	cmp	r6, r1
 801df80:	bf2b      	itete	cs
 801df82:	468e      	movcs	lr, r1
 801df84:	46b6      	movcc	lr, r6
 801df86:	1a73      	subcs	r3, r6, r1
 801df88:	1b88      	subcc	r0, r1, r6
 801df8a:	eb02 0c0e 	add.w	ip, r2, lr
 801df8e:	bf2b      	itete	cs
 801df90:	4628      	movcs	r0, r5
 801df92:	462b      	movcc	r3, r5
 801df94:	b29b      	uxthcs	r3, r3
 801df96:	b280      	uxthcc	r0, r0
 801df98:	f108 0503 	add.w	r5, r8, #3
 801df9c:	fa1f fc8c 	uxth.w	ip, ip
 801dfa0:	4562      	cmp	r2, ip
 801dfa2:	d06f      	beq.n	801e084 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x370>
 801dfa4:	1c57      	adds	r7, r2, #1
 801dfa6:	4422      	add	r2, r4
 801dfa8:	b2bf      	uxth	r7, r7
 801dfaa:	f892 2804 	ldrb.w	r2, [r2, #2052]	@ 0x804
 801dfae:	9713      	str	r7, [sp, #76]	@ 0x4c
 801dfb0:	2704      	movs	r7, #4
 801dfb2:	46b9      	mov	r9, r7
 801dfb4:	9f11      	ldr	r7, [sp, #68]	@ 0x44
 801dfb6:	fb19 7202 	smlabb	r2, r9, r2, r7
 801dfba:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 801dfbc:	58bf      	ldr	r7, [r7, r2]
 801dfbe:	0e3a      	lsrs	r2, r7, #24
 801dfc0:	9209      	str	r2, [sp, #36]	@ 0x24
 801dfc2:	d016      	beq.n	801dff2 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x2de>
 801dfc4:	f3c7 2907 	ubfx	r9, r7, #8, #8
 801dfc8:	fa5f fa87 	uxtb.w	sl, r7
 801dfcc:	f3c7 4707 	ubfx	r7, r7, #16, #8
 801dfd0:	fa5f f289 	uxtb.w	r2, r9
 801dfd4:	9214      	str	r2, [sp, #80]	@ 0x50
 801dfd6:	b2fa      	uxtb	r2, r7
 801dfd8:	9215      	str	r2, [sp, #84]	@ 0x54
 801dfda:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801dfdc:	2aff      	cmp	r2, #255	@ 0xff
 801dfde:	d10b      	bne.n	801dff8 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x2e4>
 801dfe0:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801dfe2:	2aff      	cmp	r2, #255	@ 0xff
 801dfe4:	d108      	bne.n	801dff8 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x2e4>
 801dfe6:	f805 ac03 	strb.w	sl, [r5, #-3]
 801dfea:	f805 9c02 	strb.w	r9, [r5, #-2]
 801dfee:	f805 7c01 	strb.w	r7, [r5, #-1]
 801dff2:	3503      	adds	r5, #3
 801dff4:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801dff6:	e7d3      	b.n	801dfa0 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x28c>
 801dff8:	9f09      	ldr	r7, [sp, #36]	@ 0x24
 801dffa:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801dffc:	437a      	muls	r2, r7
 801dffe:	1c57      	adds	r7, r2, #1
 801e000:	eb07 2222 	add.w	r2, r7, r2, asr #8
 801e004:	f815 7c03 	ldrb.w	r7, [r5, #-3]
 801e008:	1212      	asrs	r2, r2, #8
 801e00a:	fa1f f982 	uxth.w	r9, r2
 801e00e:	43d2      	mvns	r2, r2
 801e010:	fb1a fa09 	smulbb	sl, sl, r9
 801e014:	b2d2      	uxtb	r2, r2
 801e016:	fb07 a702 	mla	r7, r7, r2, sl
 801e01a:	9209      	str	r2, [sp, #36]	@ 0x24
 801e01c:	b2bf      	uxth	r7, r7
 801e01e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801e020:	f107 0a01 	add.w	sl, r7, #1
 801e024:	eb0a 2717 	add.w	r7, sl, r7, lsr #8
 801e028:	fb12 fa09 	smulbb	sl, r2, r9
 801e02c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801e02e:	123f      	asrs	r7, r7, #8
 801e030:	f805 7c03 	strb.w	r7, [r5, #-3]
 801e034:	f815 7c02 	ldrb.w	r7, [r5, #-2]
 801e038:	fb07 aa02 	mla	sl, r7, r2, sl
 801e03c:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 801e03e:	fb12 f909 	smulbb	r9, r2, r9
 801e042:	fa1f fa8a 	uxth.w	sl, sl
 801e046:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801e048:	f10a 0701 	add.w	r7, sl, #1
 801e04c:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801e050:	f815 7c01 	ldrb.w	r7, [r5, #-1]
 801e054:	fb07 9902 	mla	r9, r7, r2, r9
 801e058:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801e05c:	fa1f f989 	uxth.w	r9, r9
 801e060:	f805 ac02 	strb.w	sl, [r5, #-2]
 801e064:	f109 0201 	add.w	r2, r9, #1
 801e068:	eb02 2919 	add.w	r9, r2, r9, lsr #8
 801e06c:	ea4f 2929 	mov.w	r9, r9, asr #8
 801e070:	f805 9c01 	strb.w	r9, [r5, #-1]
 801e074:	e7bd      	b.n	801dff2 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x2de>
 801e076:	bf00      	nop
 801e078:	24028e20 	.word	0x24028e20
 801e07c:	24028e1a 	.word	0x24028e1a
 801e080:	fffff7fb 	.word	0xfffff7fb
 801e084:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801e088:	428e      	cmp	r6, r1
 801e08a:	44f0      	add	r8, lr
 801e08c:	f4ff af71 	bcc.w	801df72 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x25e>
 801e090:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801e092:	9904      	ldr	r1, [sp, #16]
 801e094:	8812      	ldrh	r2, [r2, #0]
 801e096:	1a52      	subs	r2, r2, r1
 801e098:	9912      	ldr	r1, [sp, #72]	@ 0x48
 801e09a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801e09e:	4490      	add	r8, r2
 801e0a0:	9a07      	ldr	r2, [sp, #28]
 801e0a2:	3201      	adds	r2, #1
 801e0a4:	428a      	cmp	r2, r1
 801e0a6:	9207      	str	r2, [sp, #28]
 801e0a8:	d111      	bne.n	801e0ce <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x3ba>
 801e0aa:	f8bd 5068 	ldrh.w	r5, [sp, #104]	@ 0x68
 801e0ae:	f8bd c060 	ldrh.w	ip, [sp, #96]	@ 0x60
 801e0b2:	9b04      	ldr	r3, [sp, #16]
 801e0b4:	eba5 050c 	sub.w	r5, r5, ip
 801e0b8:	b2ad      	uxth	r5, r5
 801e0ba:	2d00      	cmp	r5, #0
 801e0bc:	bf08      	it	eq
 801e0be:	4619      	moveq	r1, r3
 801e0c0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801e0c2:	bf18      	it	ne
 801e0c4:	2100      	movne	r1, #0
 801e0c6:	3301      	adds	r3, #1
 801e0c8:	b289      	uxth	r1, r1
 801e0ca:	930b      	str	r3, [sp, #44]	@ 0x2c
 801e0cc:	e69e      	b.n	801de0c <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xf8>
 801e0ce:	f8bd 0010 	ldrh.w	r0, [sp, #16]
 801e0d2:	f8bd 5064 	ldrh.w	r5, [sp, #100]	@ 0x64
 801e0d6:	1a2d      	subs	r5, r5, r0
 801e0d8:	b2ad      	uxth	r5, r5
 801e0da:	2d00      	cmp	r5, #0
 801e0dc:	bf18      	it	ne
 801e0de:	2000      	movne	r0, #0
 801e0e0:	e748      	b.n	801df74 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x260>
 801e0e2:	4b04      	ldr	r3, [pc, #16]	@ (801e0f4 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x3e0>)
 801e0e4:	6818      	ldr	r0, [r3, #0]
 801e0e6:	6803      	ldr	r3, [r0, #0]
 801e0e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801e0ea:	4798      	blx	r3
 801e0ec:	b01d      	add	sp, #116	@ 0x74
 801e0ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e0f2:	bf00      	nop
 801e0f4:	24028e20 	.word	0x24028e20

0801e0f8 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h>:
 801e0f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e0fc:	b08f      	sub	sp, #60	@ 0x3c
 801e0fe:	4616      	mov	r6, r2
 801e100:	4681      	mov	r9, r0
 801e102:	460d      	mov	r5, r1
 801e104:	f89d 2060 	ldrb.w	r2, [sp, #96]	@ 0x60
 801e108:	9205      	str	r2, [sp, #20]
 801e10a:	2a00      	cmp	r2, #0
 801e10c:	f000 82a8 	beq.w	801e660 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x568>
 801e110:	6830      	ldr	r0, [r6, #0]
 801e112:	ac0a      	add	r4, sp, #40	@ 0x28
 801e114:	6871      	ldr	r1, [r6, #4]
 801e116:	c403      	stmia	r4!, {r0, r1}
 801e118:	6818      	ldr	r0, [r3, #0]
 801e11a:	ac0c      	add	r4, sp, #48	@ 0x30
 801e11c:	6859      	ldr	r1, [r3, #4]
 801e11e:	c403      	stmia	r4!, {r0, r1}
 801e120:	a80a      	add	r0, sp, #40	@ 0x28
 801e122:	f7f9 f8a1 	bl	8017268 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801e126:	4631      	mov	r1, r6
 801e128:	a80c      	add	r0, sp, #48	@ 0x30
 801e12a:	f7f9 f8e1 	bl	80172f0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801e12e:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	@ 0x2c
 801e132:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 801e136:	bfdb      	ittet	le
 801e138:	b293      	uxthle	r3, r2
 801e13a:	f44f 6180 	movle.w	r1, #1024	@ 0x400
 801e13e:	2301      	movgt	r3, #1
 801e140:	fb91 f3f3 	sdivle	r3, r1, r3
 801e144:	9300      	str	r3, [sp, #0]
 801e146:	f105 0308 	add.w	r3, r5, #8
 801e14a:	9900      	ldr	r1, [sp, #0]
 801e14c:	9306      	str	r3, [sp, #24]
 801e14e:	f9bd 302e 	ldrsh.w	r3, [sp, #46]	@ 0x2e
 801e152:	440b      	add	r3, r1
 801e154:	3b01      	subs	r3, #1
 801e156:	fb93 f3f1 	sdiv	r3, r3, r1
 801e15a:	3b01      	subs	r3, #1
 801e15c:	9906      	ldr	r1, [sp, #24]
 801e15e:	b29b      	uxth	r3, r3
 801e160:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 801e164:	9900      	ldr	r1, [sp, #0]
 801e166:	9307      	str	r3, [sp, #28]
 801e168:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	@ 0x32
 801e16c:	fb93 f0f1 	sdiv	r0, r3, r1
 801e170:	b284      	uxth	r4, r0
 801e172:	f8bd 1030 	ldrh.w	r1, [sp, #48]	@ 0x30
 801e176:	b280      	uxth	r0, r0
 801e178:	9402      	str	r4, [sp, #8]
 801e17a:	9d02      	ldr	r5, [sp, #8]
 801e17c:	9c00      	ldr	r4, [sp, #0]
 801e17e:	fb05 3514 	mls	r5, r5, r4, r3
 801e182:	fb15 f502 	smulbb	r5, r5, r2
 801e186:	440d      	add	r5, r1
 801e188:	b2ad      	uxth	r5, r5
 801e18a:	2800      	cmp	r0, #0
 801e18c:	d071      	beq.n	801e272 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x17a>
 801e18e:	1e42      	subs	r2, r0, #1
 801e190:	9806      	ldr	r0, [sp, #24]
 801e192:	f850 8022 	ldr.w	r8, [r0, r2, lsl #2]
 801e196:	9a07      	ldr	r2, [sp, #28]
 801e198:	fa98 f888 	rev.w	r8, r8
 801e19c:	4490      	add	r8, r2
 801e19e:	f8bd 2028 	ldrh.w	r2, [sp, #40]	@ 0x28
 801e1a2:	f9bd 4036 	ldrsh.w	r4, [sp, #54]	@ 0x36
 801e1a6:	4411      	add	r1, r2
 801e1a8:	f8bd 202a 	ldrh.w	r2, [sp, #42]	@ 0x2a
 801e1ac:	f8df b348 	ldr.w	fp, [pc, #840]	@ 801e4f8 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x400>
 801e1b0:	4413      	add	r3, r2
 801e1b2:	f8ad 1030 	strh.w	r1, [sp, #48]	@ 0x30
 801e1b6:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 801e1ba:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	@ 0x34
 801e1be:	9301      	str	r3, [sp, #4]
 801e1c0:	4bcb      	ldr	r3, [pc, #812]	@ (801e4f0 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x3f8>)
 801e1c2:	6818      	ldr	r0, [r3, #0]
 801e1c4:	6803      	ldr	r3, [r0, #0]
 801e1c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801e1c8:	4798      	blx	r3
 801e1ca:	4bca      	ldr	r3, [pc, #808]	@ (801e4f4 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x3fc>)
 801e1cc:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	@ 0x30
 801e1d0:	881b      	ldrh	r3, [r3, #0]
 801e1d2:	f9bd 7032 	ldrsh.w	r7, [sp, #50]	@ 0x32
 801e1d6:	fb03 2707 	mla	r7, r3, r7, r2
 801e1da:	f44f 7280 	mov.w	r2, #256	@ 0x100
 801e1de:	4363      	muls	r3, r4
 801e1e0:	2400      	movs	r4, #0
 801e1e2:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801e1e6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801e1ea:	4621      	mov	r1, r4
 801e1ec:	4407      	add	r7, r0
 801e1ee:	18fb      	adds	r3, r7, r3
 801e1f0:	9309      	str	r3, [sp, #36]	@ 0x24
 801e1f2:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	@ 0x2c
 801e1f6:	fb95 f3f3 	sdiv	r3, r5, r3
 801e1fa:	9304      	str	r3, [sp, #16]
 801e1fc:	f109 0304 	add.w	r3, r9, #4
 801e200:	4618      	mov	r0, r3
 801e202:	9308      	str	r3, [sp, #32]
 801e204:	f009 fad8 	bl	80277b8 <memset>
 801e208:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801e20a:	42bb      	cmp	r3, r7
 801e20c:	f240 8223 	bls.w	801e656 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x55e>
 801e210:	2003      	movs	r0, #3
 801e212:	f04f 0c07 	mov.w	ip, #7
 801e216:	f04f 0e0b 	mov.w	lr, #11
 801e21a:	2d00      	cmp	r5, #0
 801e21c:	f000 813c 	beq.w	801e498 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x3a0>
 801e220:	f898 3000 	ldrb.w	r3, [r8]
 801e224:	b2db      	uxtb	r3, r3
 801e226:	2bfe      	cmp	r3, #254	@ 0xfe
 801e228:	d126      	bne.n	801e278 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x180>
 801e22a:	f898 1001 	ldrb.w	r1, [r8, #1]
 801e22e:	f108 0604 	add.w	r6, r8, #4
 801e232:	f898 2002 	ldrb.w	r2, [r8, #2]
 801e236:	3d01      	subs	r5, #1
 801e238:	b2c9      	uxtb	r1, r1
 801e23a:	f898 8003 	ldrb.w	r8, [r8, #3]
 801e23e:	b2d2      	uxtb	r2, r2
 801e240:	f361 0407 	bfi	r4, r1, #0, #8
 801e244:	fa5f f888 	uxtb.w	r8, r8
 801e248:	b2ad      	uxth	r5, r5
 801e24a:	f362 240f 	bfi	r4, r2, #8, #8
 801e24e:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 801e252:	fb10 2208 	smlabb	r2, r0, r8, r2
 801e256:	f368 4417 	bfi	r4, r8, #16, #8
 801e25a:	fb1c 2201 	smlabb	r2, ip, r1, r2
 801e25e:	0e23      	lsrs	r3, r4, #24
 801e260:	fb1e 2303 	smlabb	r3, lr, r3, r2
 801e264:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801e268:	eb09 0383 	add.w	r3, r9, r3, lsl #2
 801e26c:	605c      	str	r4, [r3, #4]
 801e26e:	46b0      	mov	r8, r6
 801e270:	e7d3      	b.n	801e21a <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x122>
 801e272:	f8dd 801c 	ldr.w	r8, [sp, #28]
 801e276:	e792      	b.n	801e19e <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0xa6>
 801e278:	2bff      	cmp	r3, #255	@ 0xff
 801e27a:	d127      	bne.n	801e2cc <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x1d4>
 801e27c:	f898 2001 	ldrb.w	r2, [r8, #1]
 801e280:	f108 0605 	add.w	r6, r8, #5
 801e284:	f898 3002 	ldrb.w	r3, [r8, #2]
 801e288:	3d01      	subs	r5, #1
 801e28a:	b2d2      	uxtb	r2, r2
 801e28c:	f898 1003 	ldrb.w	r1, [r8, #3]
 801e290:	b2db      	uxtb	r3, r3
 801e292:	f898 8004 	ldrb.w	r8, [r8, #4]
 801e296:	f362 0407 	bfi	r4, r2, #0, #8
 801e29a:	b2c9      	uxtb	r1, r1
 801e29c:	fa5f f888 	uxtb.w	r8, r8
 801e2a0:	f363 240f 	bfi	r4, r3, #8, #8
 801e2a4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 801e2a8:	b2ad      	uxth	r5, r5
 801e2aa:	fb10 3301 	smlabb	r3, r0, r1, r3
 801e2ae:	f361 4417 	bfi	r4, r1, #16, #8
 801e2b2:	fb1c 3302 	smlabb	r3, ip, r2, r3
 801e2b6:	f368 641f 	bfi	r4, r8, #24, #8
 801e2ba:	fb1e 3808 	smlabb	r8, lr, r8, r3
 801e2be:	f008 083f 	and.w	r8, r8, #63	@ 0x3f
 801e2c2:	eb09 0888 	add.w	r8, r9, r8, lsl #2
 801e2c6:	f8c8 4004 	str.w	r4, [r8, #4]
 801e2ca:	e7d0      	b.n	801e26e <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x176>
 801e2cc:	119a      	asrs	r2, r3, #6
 801e2ce:	f108 0601 	add.w	r6, r8, #1
 801e2d2:	d107      	bne.n	801e2e4 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x1ec>
 801e2d4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801e2d8:	eb09 0383 	add.w	r3, r9, r3, lsl #2
 801e2dc:	685c      	ldr	r4, [r3, #4]
 801e2de:	3d01      	subs	r5, #1
 801e2e0:	b2ad      	uxth	r5, r5
 801e2e2:	e7c4      	b.n	801e26e <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x176>
 801e2e4:	2a01      	cmp	r2, #1
 801e2e6:	d129      	bne.n	801e33c <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x244>
 801e2e8:	f003 0203 	and.w	r2, r3, #3
 801e2ec:	1ea1      	subs	r1, r4, #2
 801e2ee:	4411      	add	r1, r2
 801e2f0:	f3c3 0281 	ubfx	r2, r3, #2, #2
 801e2f4:	f3c3 1301 	ubfx	r3, r3, #4, #2
 801e2f8:	b2c9      	uxtb	r1, r1
 801e2fa:	3a02      	subs	r2, #2
 801e2fc:	3b02      	subs	r3, #2
 801e2fe:	f361 0407 	bfi	r4, r1, #0, #8
 801e302:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 801e306:	f002 02ff 	and.w	r2, r2, #255	@ 0xff
 801e30a:	f362 240f 	bfi	r4, r2, #8, #8
 801e30e:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 801e312:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 801e316:	f003 03ff 	and.w	r3, r3, #255	@ 0xff
 801e31a:	fb10 2203 	smlabb	r2, r0, r3, r2
 801e31e:	f363 4417 	bfi	r4, r3, #16, #8
 801e322:	fb1c 2201 	smlabb	r2, ip, r1, r2
 801e326:	ea4f 6814 	mov.w	r8, r4, lsr #24
 801e32a:	fb1e 2808 	smlabb	r8, lr, r8, r2
 801e32e:	f008 083f 	and.w	r8, r8, #63	@ 0x3f
 801e332:	eb09 0888 	add.w	r8, r9, r8, lsl #2
 801e336:	f8c8 4004 	str.w	r4, [r8, #4]
 801e33a:	e7d0      	b.n	801e2de <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x1e6>
 801e33c:	2a02      	cmp	r2, #2
 801e33e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801e342:	d12e      	bne.n	801e3a2 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x2aa>
 801e344:	f898 2001 	ldrb.w	r2, [r8, #1]
 801e348:	f1a3 0a20 	sub.w	sl, r3, #32
 801e34c:	f108 0602 	add.w	r6, r8, #2
 801e350:	b2d2      	uxtb	r2, r2
 801e352:	f002 010f 	and.w	r1, r2, #15
 801e356:	1112      	asrs	r2, r2, #4
 801e358:	3908      	subs	r1, #8
 801e35a:	3a08      	subs	r2, #8
 801e35c:	4451      	add	r1, sl
 801e35e:	4492      	add	sl, r2
 801e360:	4421      	add	r1, r4
 801e362:	b2c9      	uxtb	r1, r1
 801e364:	f361 0407 	bfi	r4, r1, #0, #8
 801e368:	f3c4 2807 	ubfx	r8, r4, #8, #8
 801e36c:	f1a8 0820 	sub.w	r8, r8, #32
 801e370:	4443      	add	r3, r8
 801e372:	b2db      	uxtb	r3, r3
 801e374:	f363 240f 	bfi	r4, r3, #8, #8
 801e378:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 801e37c:	eb0a 4a14 	add.w	sl, sl, r4, lsr #16
 801e380:	f00a 0aff 	and.w	sl, sl, #255	@ 0xff
 801e384:	fb10 330a 	smlabb	r3, r0, sl, r3
 801e388:	f36a 4417 	bfi	r4, sl, #16, #8
 801e38c:	fb1c 3301 	smlabb	r3, ip, r1, r3
 801e390:	0e22      	lsrs	r2, r4, #24
 801e392:	fb1e 3202 	smlabb	r2, lr, r2, r3
 801e396:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 801e39a:	eb09 0282 	add.w	r2, r9, r2, lsl #2
 801e39e:	6054      	str	r4, [r2, #4]
 801e3a0:	e79d      	b.n	801e2de <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x1e6>
 801e3a2:	3301      	adds	r3, #1
 801e3a4:	42ab      	cmp	r3, r5
 801e3a6:	dd59      	ble.n	801e45c <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x364>
 801e3a8:	1b5d      	subs	r5, r3, r5
 801e3aa:	2d00      	cmp	r5, #0
 801e3ac:	dc58      	bgt.n	801e460 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x368>
 801e3ae:	f8dd a004 	ldr.w	sl, [sp, #4]
 801e3b2:	f04f 0800 	mov.w	r8, #0
 801e3b6:	f1ba 0f00 	cmp.w	sl, #0
 801e3ba:	f340 8108 	ble.w	801e5ce <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x4d6>
 801e3be:	1c73      	adds	r3, r6, #1
 801e3c0:	9303      	str	r3, [sp, #12]
 801e3c2:	7833      	ldrb	r3, [r6, #0]
 801e3c4:	b2db      	uxtb	r3, r3
 801e3c6:	2bfe      	cmp	r3, #254	@ 0xfe
 801e3c8:	d16a      	bne.n	801e4a0 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x3a8>
 801e3ca:	7871      	ldrb	r1, [r6, #1]
 801e3cc:	1d33      	adds	r3, r6, #4
 801e3ce:	78b2      	ldrb	r2, [r6, #2]
 801e3d0:	b2c9      	uxtb	r1, r1
 801e3d2:	78f0      	ldrb	r0, [r6, #3]
 801e3d4:	b2d2      	uxtb	r2, r2
 801e3d6:	9303      	str	r3, [sp, #12]
 801e3d8:	f361 0407 	bfi	r4, r1, #0, #8
 801e3dc:	b2c0      	uxtb	r0, r0
 801e3de:	2303      	movs	r3, #3
 801e3e0:	f362 240f 	bfi	r4, r2, #8, #8
 801e3e4:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 801e3e8:	fb13 2200 	smlabb	r2, r3, r0, r2
 801e3ec:	f360 4417 	bfi	r4, r0, #16, #8
 801e3f0:	2307      	movs	r3, #7
 801e3f2:	0e25      	lsrs	r5, r4, #24
 801e3f4:	fb13 2101 	smlabb	r1, r3, r1, r2
 801e3f8:	230b      	movs	r3, #11
 801e3fa:	fb13 1305 	smlabb	r3, r3, r5, r1
 801e3fe:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801e402:	eb09 0383 	add.w	r3, r9, r3, lsl #2
 801e406:	605c      	str	r4, [r3, #4]
 801e408:	2501      	movs	r5, #1
 801e40a:	462e      	mov	r6, r5
 801e40c:	eb06 0308 	add.w	r3, r6, r8
 801e410:	ebaa 0a06 	sub.w	sl, sl, r6
 801e414:	1bad      	subs	r5, r5, r6
 801e416:	2b40      	cmp	r3, #64	@ 0x40
 801e418:	dd16      	ble.n	801e448 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x350>
 801e41a:	4658      	mov	r0, fp
 801e41c:	ea4f 0188 	mov.w	r1, r8, lsl #2
 801e420:	f7e4 fd2a 	bl	8002e78 <_ZN8touchgfx5paint9flushLineEPmi>
 801e424:	4659      	mov	r1, fp
 801e426:	9b05      	ldr	r3, [sp, #20]
 801e428:	4642      	mov	r2, r8
 801e42a:	4638      	mov	r0, r7
 801e42c:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 801e430:	f7e4 fd8a 	bl	8002f48 <_ZN8touchgfx5paint6rgb88816lineFromARGB8888EPhPKmjh>
 801e434:	4b30      	ldr	r3, [pc, #192]	@ (801e4f8 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x400>)
 801e436:	4447      	add	r7, r8
 801e438:	f04f 0800 	mov.w	r8, #0
 801e43c:	459b      	cmp	fp, r3
 801e43e:	bf0c      	ite	eq
 801e440:	f8df b0b8 	ldreq.w	fp, [pc, #184]	@ 801e4fc <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x404>
 801e444:	f8df b0b0 	ldrne.w	fp, [pc, #176]	@ 801e4f8 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x400>
 801e448:	eb0b 0288 	add.w	r2, fp, r8, lsl #2
 801e44c:	4633      	mov	r3, r6
 801e44e:	3b01      	subs	r3, #1
 801e450:	f842 4b04 	str.w	r4, [r2], #4
 801e454:	d1fb      	bne.n	801e44e <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x356>
 801e456:	44b0      	add	r8, r6
 801e458:	9e03      	ldr	r6, [sp, #12]
 801e45a:	e7ac      	b.n	801e3b6 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x2be>
 801e45c:	1aed      	subs	r5, r5, r3
 801e45e:	e73f      	b.n	801e2e0 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x1e8>
 801e460:	9b01      	ldr	r3, [sp, #4]
 801e462:	42ab      	cmp	r3, r5
 801e464:	bfa8      	it	ge
 801e466:	462b      	movge	r3, r5
 801e468:	4698      	mov	r8, r3
 801e46a:	9b01      	ldr	r3, [sp, #4]
 801e46c:	eba3 0a08 	sub.w	sl, r3, r8
 801e470:	0e23      	lsrs	r3, r4, #24
 801e472:	eba5 0508 	sub.w	r5, r5, r8
 801e476:	d00b      	beq.n	801e490 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x398>
 801e478:	9a05      	ldr	r2, [sp, #20]
 801e47a:	4641      	mov	r1, r8
 801e47c:	4638      	mov	r0, r7
 801e47e:	4353      	muls	r3, r2
 801e480:	1c5a      	adds	r2, r3, #1
 801e482:	eb02 2323 	add.w	r3, r2, r3, asr #8
 801e486:	4622      	mov	r2, r4
 801e488:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801e48c:	f7e4 fd0e 	bl	8002eac <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh>
 801e490:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 801e494:	4447      	add	r7, r8
 801e496:	e78c      	b.n	801e3b2 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x2ba>
 801e498:	f8dd a004 	ldr.w	sl, [sp, #4]
 801e49c:	4646      	mov	r6, r8
 801e49e:	e788      	b.n	801e3b2 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x2ba>
 801e4a0:	2bff      	cmp	r3, #255	@ 0xff
 801e4a2:	d11d      	bne.n	801e4e0 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x3e8>
 801e4a4:	7870      	ldrb	r0, [r6, #1]
 801e4a6:	1d73      	adds	r3, r6, #5
 801e4a8:	78b2      	ldrb	r2, [r6, #2]
 801e4aa:	b2c0      	uxtb	r0, r0
 801e4ac:	78f5      	ldrb	r5, [r6, #3]
 801e4ae:	b2d2      	uxtb	r2, r2
 801e4b0:	9303      	str	r3, [sp, #12]
 801e4b2:	f360 0407 	bfi	r4, r0, #0, #8
 801e4b6:	7933      	ldrb	r3, [r6, #4]
 801e4b8:	b2ed      	uxtb	r5, r5
 801e4ba:	b2d9      	uxtb	r1, r3
 801e4bc:	f362 240f 	bfi	r4, r2, #8, #8
 801e4c0:	2303      	movs	r3, #3
 801e4c2:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 801e4c6:	f365 4417 	bfi	r4, r5, #16, #8
 801e4ca:	fb13 2205 	smlabb	r2, r3, r5, r2
 801e4ce:	2307      	movs	r3, #7
 801e4d0:	f361 641f 	bfi	r4, r1, #24, #8
 801e4d4:	fb13 2000 	smlabb	r0, r3, r0, r2
 801e4d8:	230b      	movs	r3, #11
 801e4da:	fb13 0301 	smlabb	r3, r3, r1, r0
 801e4de:	e78e      	b.n	801e3fe <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x306>
 801e4e0:	119d      	asrs	r5, r3, #6
 801e4e2:	d10d      	bne.n	801e500 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x408>
 801e4e4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801e4e8:	eb09 0383 	add.w	r3, r9, r3, lsl #2
 801e4ec:	685c      	ldr	r4, [r3, #4]
 801e4ee:	e78b      	b.n	801e408 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x310>
 801e4f0:	24028e20 	.word	0x24028e20
 801e4f4:	24028e1a 	.word	0x24028e1a
 801e4f8:	24000140 	.word	0x24000140
 801e4fc:	24000240 	.word	0x24000240
 801e500:	2d01      	cmp	r5, #1
 801e502:	d12a      	bne.n	801e55a <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x462>
 801e504:	f003 0203 	and.w	r2, r3, #3
 801e508:	1ea1      	subs	r1, r4, #2
 801e50a:	2603      	movs	r6, #3
 801e50c:	4411      	add	r1, r2
 801e50e:	f3c3 0281 	ubfx	r2, r3, #2, #2
 801e512:	f3c3 1301 	ubfx	r3, r3, #4, #2
 801e516:	b2c9      	uxtb	r1, r1
 801e518:	3a02      	subs	r2, #2
 801e51a:	3b02      	subs	r3, #2
 801e51c:	f361 0407 	bfi	r4, r1, #0, #8
 801e520:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 801e524:	f002 02ff 	and.w	r2, r2, #255	@ 0xff
 801e528:	f362 240f 	bfi	r4, r2, #8, #8
 801e52c:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 801e530:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 801e534:	f003 03ff 	and.w	r3, r3, #255	@ 0xff
 801e538:	fb16 2203 	smlabb	r2, r6, r3, r2
 801e53c:	f363 4417 	bfi	r4, r3, #16, #8
 801e540:	2307      	movs	r3, #7
 801e542:	0e20      	lsrs	r0, r4, #24
 801e544:	fb13 2101 	smlabb	r1, r3, r1, r2
 801e548:	230b      	movs	r3, #11
 801e54a:	fb13 1300 	smlabb	r3, r3, r0, r1
 801e54e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801e552:	eb09 0383 	add.w	r3, r9, r3, lsl #2
 801e556:	605c      	str	r4, [r3, #4]
 801e558:	e757      	b.n	801e40a <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x312>
 801e55a:	2d02      	cmp	r5, #2
 801e55c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801e560:	d12f      	bne.n	801e5c2 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x4ca>
 801e562:	1cb2      	adds	r2, r6, #2
 801e564:	f1a3 0020 	sub.w	r0, r3, #32
 801e568:	9203      	str	r2, [sp, #12]
 801e56a:	7872      	ldrb	r2, [r6, #1]
 801e56c:	b2d2      	uxtb	r2, r2
 801e56e:	f002 010f 	and.w	r1, r2, #15
 801e572:	1112      	asrs	r2, r2, #4
 801e574:	3908      	subs	r1, #8
 801e576:	3a08      	subs	r2, #8
 801e578:	4401      	add	r1, r0
 801e57a:	4402      	add	r2, r0
 801e57c:	4421      	add	r1, r4
 801e57e:	b2c9      	uxtb	r1, r1
 801e580:	f361 0407 	bfi	r4, r1, #0, #8
 801e584:	f3c4 2507 	ubfx	r5, r4, #8, #8
 801e588:	3d20      	subs	r5, #32
 801e58a:	442b      	add	r3, r5
 801e58c:	2503      	movs	r5, #3
 801e58e:	b2db      	uxtb	r3, r3
 801e590:	f363 240f 	bfi	r4, r3, #8, #8
 801e594:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 801e598:	eb02 4214 	add.w	r2, r2, r4, lsr #16
 801e59c:	f002 02ff 	and.w	r2, r2, #255	@ 0xff
 801e5a0:	fb15 3302 	smlabb	r3, r5, r2, r3
 801e5a4:	f362 4417 	bfi	r4, r2, #16, #8
 801e5a8:	2207      	movs	r2, #7
 801e5aa:	0e20      	lsrs	r0, r4, #24
 801e5ac:	fb12 3201 	smlabb	r2, r2, r1, r3
 801e5b0:	210b      	movs	r1, #11
 801e5b2:	fb11 2100 	smlabb	r1, r1, r0, r2
 801e5b6:	f001 013f 	and.w	r1, r1, #63	@ 0x3f
 801e5ba:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 801e5be:	604c      	str	r4, [r1, #4]
 801e5c0:	e722      	b.n	801e408 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x310>
 801e5c2:	1c5d      	adds	r5, r3, #1
 801e5c4:	4656      	mov	r6, sl
 801e5c6:	45aa      	cmp	sl, r5
 801e5c8:	bfa8      	it	ge
 801e5ca:	462e      	movge	r6, r5
 801e5cc:	e71e      	b.n	801e40c <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x314>
 801e5ce:	f1b8 0f00 	cmp.w	r8, #0
 801e5d2:	d00d      	beq.n	801e5f0 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x4f8>
 801e5d4:	ea4f 0188 	mov.w	r1, r8, lsl #2
 801e5d8:	4658      	mov	r0, fp
 801e5da:	f7e4 fc4d 	bl	8002e78 <_ZN8touchgfx5paint9flushLineEPmi>
 801e5de:	4642      	mov	r2, r8
 801e5e0:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 801e5e4:	4638      	mov	r0, r7
 801e5e6:	9b05      	ldr	r3, [sp, #20]
 801e5e8:	4659      	mov	r1, fp
 801e5ea:	4447      	add	r7, r8
 801e5ec:	f7e4 fcac 	bl	8002f48 <_ZN8touchgfx5paint6rgb88816lineFromARGB8888EPhPKmjh>
 801e5f0:	4b1d      	ldr	r3, [pc, #116]	@ (801e668 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x570>)
 801e5f2:	9a01      	ldr	r2, [sp, #4]
 801e5f4:	881b      	ldrh	r3, [r3, #0]
 801e5f6:	1a9b      	subs	r3, r3, r2
 801e5f8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801e5fc:	441f      	add	r7, r3
 801e5fe:	9b04      	ldr	r3, [sp, #16]
 801e600:	3301      	adds	r3, #1
 801e602:	9304      	str	r3, [sp, #16]
 801e604:	9a04      	ldr	r2, [sp, #16]
 801e606:	9b00      	ldr	r3, [sp, #0]
 801e608:	4293      	cmp	r3, r2
 801e60a:	d11d      	bne.n	801e648 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x550>
 801e60c:	9b02      	ldr	r3, [sp, #8]
 801e60e:	2400      	movs	r4, #0
 801e610:	9a02      	ldr	r2, [sp, #8]
 801e612:	f103 0801 	add.w	r8, r3, #1
 801e616:	9b06      	ldr	r3, [sp, #24]
 801e618:	f8bd 5030 	ldrh.w	r5, [sp, #48]	@ 0x30
 801e61c:	4621      	mov	r1, r4
 801e61e:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 801e622:	f44f 7280 	mov.w	r2, #256	@ 0x100
 801e626:	9b07      	ldr	r3, [sp, #28]
 801e628:	ba36      	rev	r6, r6
 801e62a:	9808      	ldr	r0, [sp, #32]
 801e62c:	441e      	add	r6, r3
 801e62e:	f8bd 3028 	ldrh.w	r3, [sp, #40]	@ 0x28
 801e632:	1aed      	subs	r5, r5, r3
 801e634:	f009 f8c0 	bl	80277b8 <memset>
 801e638:	f8cd 8008 	str.w	r8, [sp, #8]
 801e63c:	b2ad      	uxth	r5, r5
 801e63e:	9404      	str	r4, [sp, #16]
 801e640:	f7e4 fc10 	bl	8002e64 <_ZN8touchgfx5paint8tearDownEv>
 801e644:	46b0      	mov	r8, r6
 801e646:	e5df      	b.n	801e208 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x110>
 801e648:	f8bd 302c 	ldrh.w	r3, [sp, #44]	@ 0x2c
 801e64c:	9a01      	ldr	r2, [sp, #4]
 801e64e:	1a9b      	subs	r3, r3, r2
 801e650:	1b5d      	subs	r5, r3, r5
 801e652:	b2ad      	uxth	r5, r5
 801e654:	e7f4      	b.n	801e640 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x548>
 801e656:	4b05      	ldr	r3, [pc, #20]	@ (801e66c <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x574>)
 801e658:	6818      	ldr	r0, [r3, #0]
 801e65a:	6803      	ldr	r3, [r0, #0]
 801e65c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801e65e:	4798      	blx	r3
 801e660:	b00f      	add	sp, #60	@ 0x3c
 801e662:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e666:	bf00      	nop
 801e668:	24028e1a 	.word	0x24028e1a
 801e66c:	24028e20 	.word	0x24028e20

0801e670 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h>:
 801e670:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e674:	b093      	sub	sp, #76	@ 0x4c
 801e676:	460d      	mov	r5, r1
 801e678:	4616      	mov	r6, r2
 801e67a:	f89d b070 	ldrb.w	fp, [sp, #112]	@ 0x70
 801e67e:	9000      	str	r0, [sp, #0]
 801e680:	f1bb 0f00 	cmp.w	fp, #0
 801e684:	f000 82ac 	beq.w	801ebe0 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x570>
 801e688:	6810      	ldr	r0, [r2, #0]
 801e68a:	ac0e      	add	r4, sp, #56	@ 0x38
 801e68c:	6851      	ldr	r1, [r2, #4]
 801e68e:	c403      	stmia	r4!, {r0, r1}
 801e690:	6818      	ldr	r0, [r3, #0]
 801e692:	ac10      	add	r4, sp, #64	@ 0x40
 801e694:	6859      	ldr	r1, [r3, #4]
 801e696:	c403      	stmia	r4!, {r0, r1}
 801e698:	a80e      	add	r0, sp, #56	@ 0x38
 801e69a:	f7f8 fde5 	bl	8017268 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801e69e:	4631      	mov	r1, r6
 801e6a0:	a810      	add	r0, sp, #64	@ 0x40
 801e6a2:	f7f8 fe25 	bl	80172f0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801e6a6:	f9bd 203c 	ldrsh.w	r2, [sp, #60]	@ 0x3c
 801e6aa:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 801e6ae:	bfdb      	ittet	le
 801e6b0:	b293      	uxthle	r3, r2
 801e6b2:	f44f 6180 	movle.w	r1, #1024	@ 0x400
 801e6b6:	2301      	movgt	r3, #1
 801e6b8:	fb91 f3f3 	sdivle	r3, r1, r3
 801e6bc:	9301      	str	r3, [sp, #4]
 801e6be:	f105 0308 	add.w	r3, r5, #8
 801e6c2:	9901      	ldr	r1, [sp, #4]
 801e6c4:	9305      	str	r3, [sp, #20]
 801e6c6:	f9bd 303e 	ldrsh.w	r3, [sp, #62]	@ 0x3e
 801e6ca:	440b      	add	r3, r1
 801e6cc:	3b01      	subs	r3, #1
 801e6ce:	fb93 f3f1 	sdiv	r3, r3, r1
 801e6d2:	3b01      	subs	r3, #1
 801e6d4:	9905      	ldr	r1, [sp, #20]
 801e6d6:	b29b      	uxth	r3, r3
 801e6d8:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 801e6dc:	9901      	ldr	r1, [sp, #4]
 801e6de:	9306      	str	r3, [sp, #24]
 801e6e0:	f9bd 3042 	ldrsh.w	r3, [sp, #66]	@ 0x42
 801e6e4:	fb93 f0f1 	sdiv	r0, r3, r1
 801e6e8:	b284      	uxth	r4, r0
 801e6ea:	f8bd 1040 	ldrh.w	r1, [sp, #64]	@ 0x40
 801e6ee:	9403      	str	r4, [sp, #12]
 801e6f0:	9d03      	ldr	r5, [sp, #12]
 801e6f2:	9c01      	ldr	r4, [sp, #4]
 801e6f4:	fb05 3714 	mls	r7, r5, r4, r3
 801e6f8:	fb17 f702 	smulbb	r7, r7, r2
 801e6fc:	440f      	add	r7, r1
 801e6fe:	b2bf      	uxth	r7, r7
 801e700:	2d00      	cmp	r5, #0
 801e702:	d06b      	beq.n	801e7dc <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x16c>
 801e704:	1e6a      	subs	r2, r5, #1
 801e706:	9805      	ldr	r0, [sp, #20]
 801e708:	f850 9022 	ldr.w	r9, [r0, r2, lsl #2]
 801e70c:	9a06      	ldr	r2, [sp, #24]
 801e70e:	fa99 f989 	rev.w	r9, r9
 801e712:	4491      	add	r9, r2
 801e714:	f8bd 2038 	ldrh.w	r2, [sp, #56]	@ 0x38
 801e718:	f9bd 5046 	ldrsh.w	r5, [sp, #70]	@ 0x46
 801e71c:	4411      	add	r1, r2
 801e71e:	f8bd 203a 	ldrh.w	r2, [sp, #58]	@ 0x3a
 801e722:	f8df a35c 	ldr.w	sl, [pc, #860]	@ 801ea80 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x410>
 801e726:	4413      	add	r3, r2
 801e728:	f8ad 1040 	strh.w	r1, [sp, #64]	@ 0x40
 801e72c:	f8ad 3042 	strh.w	r3, [sp, #66]	@ 0x42
 801e730:	f9bd 3044 	ldrsh.w	r3, [sp, #68]	@ 0x44
 801e734:	9302      	str	r3, [sp, #8]
 801e736:	4bd0      	ldr	r3, [pc, #832]	@ (801ea78 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x408>)
 801e738:	6818      	ldr	r0, [r3, #0]
 801e73a:	6803      	ldr	r3, [r0, #0]
 801e73c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801e73e:	4798      	blx	r3
 801e740:	4bce      	ldr	r3, [pc, #824]	@ (801ea7c <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x40c>)
 801e742:	f9bd 2040 	ldrsh.w	r2, [sp, #64]	@ 0x40
 801e746:	881b      	ldrh	r3, [r3, #0]
 801e748:	f9bd 4042 	ldrsh.w	r4, [sp, #66]	@ 0x42
 801e74c:	fb03 2404 	mla	r4, r3, r4, r2
 801e750:	f44f 7280 	mov.w	r2, #256	@ 0x100
 801e754:	436b      	muls	r3, r5
 801e756:	2500      	movs	r5, #0
 801e758:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801e75c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801e760:	4629      	mov	r1, r5
 801e762:	4404      	add	r4, r0
 801e764:	18e3      	adds	r3, r4, r3
 801e766:	930d      	str	r3, [sp, #52]	@ 0x34
 801e768:	f9bd 303c 	ldrsh.w	r3, [sp, #60]	@ 0x3c
 801e76c:	fb97 f3f3 	sdiv	r3, r7, r3
 801e770:	9304      	str	r3, [sp, #16]
 801e772:	9b00      	ldr	r3, [sp, #0]
 801e774:	3304      	adds	r3, #4
 801e776:	4618      	mov	r0, r3
 801e778:	9309      	str	r3, [sp, #36]	@ 0x24
 801e77a:	f009 f81d 	bl	80277b8 <memset>
 801e77e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801e780:	42a3      	cmp	r3, r4
 801e782:	f240 8228 	bls.w	801ebd6 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x566>
 801e786:	2003      	movs	r0, #3
 801e788:	2607      	movs	r6, #7
 801e78a:	2f00      	cmp	r7, #0
 801e78c:	f000 80cb 	beq.w	801e926 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x2b6>
 801e790:	f899 3000 	ldrb.w	r3, [r9]
 801e794:	b2db      	uxtb	r3, r3
 801e796:	2bfe      	cmp	r3, #254	@ 0xfe
 801e798:	d123      	bne.n	801e7e2 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x172>
 801e79a:	f899 3001 	ldrb.w	r3, [r9, #1]
 801e79e:	3f01      	subs	r7, #1
 801e7a0:	f899 2002 	ldrb.w	r2, [r9, #2]
 801e7a4:	f109 0804 	add.w	r8, r9, #4
 801e7a8:	b2db      	uxtb	r3, r3
 801e7aa:	f899 1003 	ldrb.w	r1, [r9, #3]
 801e7ae:	b2d2      	uxtb	r2, r2
 801e7b0:	f363 0507 	bfi	r5, r3, #0, #8
 801e7b4:	b2c9      	uxtb	r1, r1
 801e7b6:	b2bf      	uxth	r7, r7
 801e7b8:	f362 250f 	bfi	r5, r2, #8, #8
 801e7bc:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 801e7c0:	fb10 2201 	smlabb	r2, r0, r1, r2
 801e7c4:	f361 4517 	bfi	r5, r1, #16, #8
 801e7c8:	fb16 2303 	smlabb	r3, r6, r3, r2
 801e7cc:	9a00      	ldr	r2, [sp, #0]
 801e7ce:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801e7d2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801e7d6:	605d      	str	r5, [r3, #4]
 801e7d8:	46c1      	mov	r9, r8
 801e7da:	e7d6      	b.n	801e78a <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x11a>
 801e7dc:	f8dd 9018 	ldr.w	r9, [sp, #24]
 801e7e0:	e798      	b.n	801e714 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0xa4>
 801e7e2:	119a      	asrs	r2, r3, #6
 801e7e4:	f109 0801 	add.w	r8, r9, #1
 801e7e8:	d108      	bne.n	801e7fc <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x18c>
 801e7ea:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801e7ee:	9a00      	ldr	r2, [sp, #0]
 801e7f0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801e7f4:	685d      	ldr	r5, [r3, #4]
 801e7f6:	3f01      	subs	r7, #1
 801e7f8:	b2bf      	uxth	r7, r7
 801e7fa:	e7ed      	b.n	801e7d8 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x168>
 801e7fc:	2a01      	cmp	r2, #1
 801e7fe:	d125      	bne.n	801e84c <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x1dc>
 801e800:	f003 0103 	and.w	r1, r3, #3
 801e804:	1eaa      	subs	r2, r5, #2
 801e806:	440a      	add	r2, r1
 801e808:	f3c3 0181 	ubfx	r1, r3, #2, #2
 801e80c:	f3c3 1301 	ubfx	r3, r3, #4, #2
 801e810:	b2d2      	uxtb	r2, r2
 801e812:	3902      	subs	r1, #2
 801e814:	3b02      	subs	r3, #2
 801e816:	f362 0507 	bfi	r5, r2, #0, #8
 801e81a:	eb01 2115 	add.w	r1, r1, r5, lsr #8
 801e81e:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 801e822:	f361 250f 	bfi	r5, r1, #8, #8
 801e826:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 801e82a:	eb03 4315 	add.w	r3, r3, r5, lsr #16
 801e82e:	f003 03ff 	and.w	r3, r3, #255	@ 0xff
 801e832:	fb10 1103 	smlabb	r1, r0, r3, r1
 801e836:	f363 4517 	bfi	r5, r3, #16, #8
 801e83a:	9b00      	ldr	r3, [sp, #0]
 801e83c:	fb16 1202 	smlabb	r2, r6, r2, r1
 801e840:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 801e844:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 801e848:	6055      	str	r5, [r2, #4]
 801e84a:	e7d4      	b.n	801e7f6 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x186>
 801e84c:	2a02      	cmp	r2, #2
 801e84e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801e852:	d12c      	bne.n	801e8ae <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x23e>
 801e854:	f899 2001 	ldrb.w	r2, [r9, #1]
 801e858:	f1a3 0c20 	sub.w	ip, r3, #32
 801e85c:	f109 0802 	add.w	r8, r9, #2
 801e860:	b2d2      	uxtb	r2, r2
 801e862:	f002 010f 	and.w	r1, r2, #15
 801e866:	1112      	asrs	r2, r2, #4
 801e868:	3908      	subs	r1, #8
 801e86a:	3a08      	subs	r2, #8
 801e86c:	4461      	add	r1, ip
 801e86e:	4494      	add	ip, r2
 801e870:	4429      	add	r1, r5
 801e872:	b2c9      	uxtb	r1, r1
 801e874:	f361 0507 	bfi	r5, r1, #0, #8
 801e878:	f3c5 2e07 	ubfx	lr, r5, #8, #8
 801e87c:	f1ae 0e20 	sub.w	lr, lr, #32
 801e880:	4473      	add	r3, lr
 801e882:	b2db      	uxtb	r3, r3
 801e884:	f363 250f 	bfi	r5, r3, #8, #8
 801e888:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 801e88c:	eb0c 4c15 	add.w	ip, ip, r5, lsr #16
 801e890:	f00c 0cff 	and.w	ip, ip, #255	@ 0xff
 801e894:	fb10 330c 	smlabb	r3, r0, ip, r3
 801e898:	f36c 4517 	bfi	r5, ip, #16, #8
 801e89c:	fb16 3101 	smlabb	r1, r6, r1, r3
 801e8a0:	9b00      	ldr	r3, [sp, #0]
 801e8a2:	f001 013f 	and.w	r1, r1, #63	@ 0x3f
 801e8a6:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 801e8aa:	604d      	str	r5, [r1, #4]
 801e8ac:	e7a3      	b.n	801e7f6 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x186>
 801e8ae:	3301      	adds	r3, #1
 801e8b0:	42bb      	cmp	r3, r7
 801e8b2:	dd23      	ble.n	801e8fc <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x28c>
 801e8b4:	eba3 0907 	sub.w	r9, r3, r7
 801e8b8:	f1b9 0f00 	cmp.w	r9, #0
 801e8bc:	dc20      	bgt.n	801e900 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x290>
 801e8be:	9e02      	ldr	r6, [sp, #8]
 801e8c0:	2700      	movs	r7, #0
 801e8c2:	2e00      	cmp	r6, #0
 801e8c4:	f340 8142 	ble.w	801eb4c <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x4dc>
 801e8c8:	f108 0301 	add.w	r3, r8, #1
 801e8cc:	9307      	str	r3, [sp, #28]
 801e8ce:	f898 3000 	ldrb.w	r3, [r8]
 801e8d2:	b2db      	uxtb	r3, r3
 801e8d4:	119a      	asrs	r2, r3, #6
 801e8d6:	d12a      	bne.n	801e92e <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x2be>
 801e8d8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801e8dc:	9a00      	ldr	r2, [sp, #0]
 801e8de:	f1bb 0fff 	cmp.w	fp, #255	@ 0xff
 801e8e2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801e8e6:	685d      	ldr	r5, [r3, #4]
 801e8e8:	f040 811f 	bne.w	801eb2a <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x4ba>
 801e8ec:	f3c5 2307 	ubfx	r3, r5, #8, #8
 801e8f0:	7025      	strb	r5, [r4, #0]
 801e8f2:	7063      	strb	r3, [r4, #1]
 801e8f4:	f3c5 4307 	ubfx	r3, r5, #16, #8
 801e8f8:	70a3      	strb	r3, [r4, #2]
 801e8fa:	e04e      	b.n	801e99a <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x32a>
 801e8fc:	1aff      	subs	r7, r7, r3
 801e8fe:	e77b      	b.n	801e7f8 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x188>
 801e900:	9b02      	ldr	r3, [sp, #8]
 801e902:	4620      	mov	r0, r4
 801e904:	462a      	mov	r2, r5
 801e906:	454b      	cmp	r3, r9
 801e908:	bfa8      	it	ge
 801e90a:	464b      	movge	r3, r9
 801e90c:	461f      	mov	r7, r3
 801e90e:	9b02      	ldr	r3, [sp, #8]
 801e910:	4639      	mov	r1, r7
 801e912:	1bde      	subs	r6, r3, r7
 801e914:	eba9 0907 	sub.w	r9, r9, r7
 801e918:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801e91c:	465b      	mov	r3, fp
 801e91e:	f7e4 fac5 	bl	8002eac <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh>
 801e922:	443c      	add	r4, r7
 801e924:	e7cc      	b.n	801e8c0 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x250>
 801e926:	46c8      	mov	r8, r9
 801e928:	9e02      	ldr	r6, [sp, #8]
 801e92a:	46b9      	mov	r9, r7
 801e92c:	e7c8      	b.n	801e8c0 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x250>
 801e92e:	2a01      	cmp	r2, #1
 801e930:	d136      	bne.n	801e9a0 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x330>
 801e932:	f003 0103 	and.w	r1, r3, #3
 801e936:	1ea8      	subs	r0, r5, #2
 801e938:	f1bb 0fff 	cmp.w	fp, #255	@ 0xff
 801e93c:	4408      	add	r0, r1
 801e93e:	f3c3 0181 	ubfx	r1, r3, #2, #2
 801e942:	f3c3 1301 	ubfx	r3, r3, #4, #2
 801e946:	b2c0      	uxtb	r0, r0
 801e948:	f1a1 0102 	sub.w	r1, r1, #2
 801e94c:	f1a3 0302 	sub.w	r3, r3, #2
 801e950:	f360 0507 	bfi	r5, r0, #0, #8
 801e954:	eb01 2115 	add.w	r1, r1, r5, lsr #8
 801e958:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 801e95c:	f361 250f 	bfi	r5, r1, #8, #8
 801e960:	eb01 0c81 	add.w	ip, r1, r1, lsl #2
 801e964:	eb03 4315 	add.w	r3, r3, r5, lsr #16
 801e968:	f003 08ff 	and.w	r8, r3, #255	@ 0xff
 801e96c:	f04f 0303 	mov.w	r3, #3
 801e970:	fb13 ce08 	smlabb	lr, r3, r8, ip
 801e974:	f04f 0c07 	mov.w	ip, #7
 801e978:	9b00      	ldr	r3, [sp, #0]
 801e97a:	f368 4517 	bfi	r5, r8, #16, #8
 801e97e:	fb1c ec00 	smlabb	ip, ip, r0, lr
 801e982:	f00c 0c3f 	and.w	ip, ip, #63	@ 0x3f
 801e986:	eb03 0c8c 	add.w	ip, r3, ip, lsl #2
 801e98a:	f8cc 5004 	str.w	r5, [ip, #4]
 801e98e:	f040 80cd 	bne.w	801eb2c <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x4bc>
 801e992:	7020      	strb	r0, [r4, #0]
 801e994:	7061      	strb	r1, [r4, #1]
 801e996:	f884 8002 	strb.w	r8, [r4, #2]
 801e99a:	3e01      	subs	r6, #1
 801e99c:	3403      	adds	r4, #3
 801e99e:	e0c1      	b.n	801eb24 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x4b4>
 801e9a0:	2a02      	cmp	r2, #2
 801e9a2:	d13d      	bne.n	801ea20 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x3b0>
 801e9a4:	f898 1001 	ldrb.w	r1, [r8, #1]
 801e9a8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801e9ac:	f108 0202 	add.w	r2, r8, #2
 801e9b0:	f1bb 0fff 	cmp.w	fp, #255	@ 0xff
 801e9b4:	b2c9      	uxtb	r1, r1
 801e9b6:	f1a3 0c20 	sub.w	ip, r3, #32
 801e9ba:	9207      	str	r2, [sp, #28]
 801e9bc:	f001 000f 	and.w	r0, r1, #15
 801e9c0:	f1a0 0008 	sub.w	r0, r0, #8
 801e9c4:	4460      	add	r0, ip
 801e9c6:	4428      	add	r0, r5
 801e9c8:	b2c0      	uxtb	r0, r0
 801e9ca:	f360 0507 	bfi	r5, r0, #0, #8
 801e9ce:	f3c5 2207 	ubfx	r2, r5, #8, #8
 801e9d2:	f1a2 0220 	sub.w	r2, r2, #32
 801e9d6:	4413      	add	r3, r2
 801e9d8:	ea4f 1221 	mov.w	r2, r1, asr #4
 801e9dc:	b2db      	uxtb	r3, r3
 801e9de:	f1a2 0208 	sub.w	r2, r2, #8
 801e9e2:	f363 250f 	bfi	r5, r3, #8, #8
 801e9e6:	4462      	add	r2, ip
 801e9e8:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 801e9ec:	f04f 0c03 	mov.w	ip, #3
 801e9f0:	eb02 4215 	add.w	r2, r2, r5, lsr #16
 801e9f4:	f002 02ff 	and.w	r2, r2, #255	@ 0xff
 801e9f8:	fb1c 1c02 	smlabb	ip, ip, r2, r1
 801e9fc:	f04f 0107 	mov.w	r1, #7
 801ea00:	f362 4517 	bfi	r5, r2, #16, #8
 801ea04:	fb11 c100 	smlabb	r1, r1, r0, ip
 801ea08:	f001 0c3f 	and.w	ip, r1, #63	@ 0x3f
 801ea0c:	9900      	ldr	r1, [sp, #0]
 801ea0e:	eb01 018c 	add.w	r1, r1, ip, lsl #2
 801ea12:	604d      	str	r5, [r1, #4]
 801ea14:	f040 8089 	bne.w	801eb2a <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x4ba>
 801ea18:	7020      	strb	r0, [r4, #0]
 801ea1a:	7063      	strb	r3, [r4, #1]
 801ea1c:	70a2      	strb	r2, [r4, #2]
 801ea1e:	e7bc      	b.n	801e99a <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x32a>
 801ea20:	2bfe      	cmp	r3, #254	@ 0xfe
 801ea22:	d12f      	bne.n	801ea84 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x414>
 801ea24:	f898 0001 	ldrb.w	r0, [r8, #1]
 801ea28:	f108 0304 	add.w	r3, r8, #4
 801ea2c:	f898 2002 	ldrb.w	r2, [r8, #2]
 801ea30:	f04f 0c03 	mov.w	ip, #3
 801ea34:	f898 1003 	ldrb.w	r1, [r8, #3]
 801ea38:	b2c0      	uxtb	r0, r0
 801ea3a:	b2d2      	uxtb	r2, r2
 801ea3c:	9307      	str	r3, [sp, #28]
 801ea3e:	b2c9      	uxtb	r1, r1
 801ea40:	f360 0507 	bfi	r5, r0, #0, #8
 801ea44:	eb02 0382 	add.w	r3, r2, r2, lsl #2
 801ea48:	f1bb 0fff 	cmp.w	fp, #255	@ 0xff
 801ea4c:	f362 250f 	bfi	r5, r2, #8, #8
 801ea50:	fb1c 3c01 	smlabb	ip, ip, r1, r3
 801ea54:	f04f 0307 	mov.w	r3, #7
 801ea58:	f361 4517 	bfi	r5, r1, #16, #8
 801ea5c:	fb13 c300 	smlabb	r3, r3, r0, ip
 801ea60:	f003 0c3f 	and.w	ip, r3, #63	@ 0x3f
 801ea64:	9b00      	ldr	r3, [sp, #0]
 801ea66:	eb03 038c 	add.w	r3, r3, ip, lsl #2
 801ea6a:	605d      	str	r5, [r3, #4]
 801ea6c:	d15d      	bne.n	801eb2a <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x4ba>
 801ea6e:	7020      	strb	r0, [r4, #0]
 801ea70:	7062      	strb	r2, [r4, #1]
 801ea72:	70a1      	strb	r1, [r4, #2]
 801ea74:	e791      	b.n	801e99a <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x32a>
 801ea76:	bf00      	nop
 801ea78:	24028e20 	.word	0x24028e20
 801ea7c:	24028e1a 	.word	0x24028e1a
 801ea80:	24000140 	.word	0x24000140
 801ea84:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801ea88:	1c5a      	adds	r2, r3, #1
 801ea8a:	b94b      	cbnz	r3, 801eaa0 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x430>
 801ea8c:	f1bb 0fff 	cmp.w	fp, #255	@ 0xff
 801ea90:	d14c      	bne.n	801eb2c <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x4bc>
 801ea92:	f3c5 2207 	ubfx	r2, r5, #8, #8
 801ea96:	f3c5 4307 	ubfx	r3, r5, #16, #8
 801ea9a:	7025      	strb	r5, [r4, #0]
 801ea9c:	7062      	strb	r2, [r4, #1]
 801ea9e:	e72b      	b.n	801e8f8 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x288>
 801eaa0:	4296      	cmp	r6, r2
 801eaa2:	46b0      	mov	r8, r6
 801eaa4:	bfa8      	it	ge
 801eaa6:	4690      	movge	r8, r2
 801eaa8:	eb08 0348 	add.w	r3, r8, r8, lsl #1
 801eaac:	f1bb 0fff 	cmp.w	fp, #255	@ 0xff
 801eab0:	eba6 0608 	sub.w	r6, r6, r8
 801eab4:	eba2 0908 	sub.w	r9, r2, r8
 801eab8:	9308      	str	r3, [sp, #32]
 801eaba:	b2eb      	uxtb	r3, r5
 801eabc:	930c      	str	r3, [sp, #48]	@ 0x30
 801eabe:	f3c5 2307 	ubfx	r3, r5, #8, #8
 801eac2:	930b      	str	r3, [sp, #44]	@ 0x2c
 801eac4:	f3c5 4307 	ubfx	r3, r5, #16, #8
 801eac8:	930a      	str	r3, [sp, #40]	@ 0x28
 801eaca:	9b08      	ldr	r3, [sp, #32]
 801eacc:	d030      	beq.n	801eb30 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x4c0>
 801eace:	18fb      	adds	r3, r7, r3
 801ead0:	2bc0      	cmp	r3, #192	@ 0xc0
 801ead2:	dd15      	ble.n	801eb00 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x490>
 801ead4:	4650      	mov	r0, sl
 801ead6:	eb07 0147 	add.w	r1, r7, r7, lsl #1
 801eada:	f7e4 f9cd 	bl	8002e78 <_ZN8touchgfx5paint9flushLineEPmi>
 801eade:	2203      	movs	r2, #3
 801eae0:	4651      	mov	r1, sl
 801eae2:	465b      	mov	r3, fp
 801eae4:	4620      	mov	r0, r4
 801eae6:	443c      	add	r4, r7
 801eae8:	fb97 f2f2 	sdiv	r2, r7, r2
 801eaec:	f7e4 fa08 	bl	8002f00 <_ZN8touchgfx5paint6rgb88814lineFromRGB888EPhPKhjh>
 801eaf0:	4b3d      	ldr	r3, [pc, #244]	@ (801ebe8 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x578>)
 801eaf2:	2700      	movs	r7, #0
 801eaf4:	459a      	cmp	sl, r3
 801eaf6:	bf0c      	ite	eq
 801eaf8:	f8df a0f8 	ldreq.w	sl, [pc, #248]	@ 801ebf4 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x584>
 801eafc:	f8df a0e8 	ldrne.w	sl, [pc, #232]	@ 801ebe8 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x578>
 801eb00:	eb0a 0307 	add.w	r3, sl, r7
 801eb04:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801eb06:	f1b8 0801 	subs.w	r8, r8, #1
 801eb0a:	f103 0303 	add.w	r3, r3, #3
 801eb0e:	f803 2c03 	strb.w	r2, [r3, #-3]
 801eb12:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801eb14:	f803 2c02 	strb.w	r2, [r3, #-2]
 801eb18:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801eb1a:	f803 2c01 	strb.w	r2, [r3, #-1]
 801eb1e:	d1f1      	bne.n	801eb04 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x494>
 801eb20:	9b08      	ldr	r3, [sp, #32]
 801eb22:	441f      	add	r7, r3
 801eb24:	f8dd 801c 	ldr.w	r8, [sp, #28]
 801eb28:	e6cb      	b.n	801e8c2 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x252>
 801eb2a:	2201      	movs	r2, #1
 801eb2c:	4690      	mov	r8, r2
 801eb2e:	e7bb      	b.n	801eaa8 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x438>
 801eb30:	4423      	add	r3, r4
 801eb32:	42a3      	cmp	r3, r4
 801eb34:	d9f6      	bls.n	801eb24 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x4b4>
 801eb36:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801eb38:	3403      	adds	r4, #3
 801eb3a:	f804 2c03 	strb.w	r2, [r4, #-3]
 801eb3e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801eb40:	f804 2c02 	strb.w	r2, [r4, #-2]
 801eb44:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801eb46:	f804 2c01 	strb.w	r2, [r4, #-1]
 801eb4a:	e7f2      	b.n	801eb32 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x4c2>
 801eb4c:	f1bb 0fff 	cmp.w	fp, #255	@ 0xff
 801eb50:	d00e      	beq.n	801eb70 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x500>
 801eb52:	b16f      	cbz	r7, 801eb70 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x500>
 801eb54:	eb07 0147 	add.w	r1, r7, r7, lsl #1
 801eb58:	4650      	mov	r0, sl
 801eb5a:	f7e4 f98d 	bl	8002e78 <_ZN8touchgfx5paint9flushLineEPmi>
 801eb5e:	2203      	movs	r2, #3
 801eb60:	4620      	mov	r0, r4
 801eb62:	443c      	add	r4, r7
 801eb64:	465b      	mov	r3, fp
 801eb66:	4651      	mov	r1, sl
 801eb68:	fb97 f2f2 	sdiv	r2, r7, r2
 801eb6c:	f7e4 f9c8 	bl	8002f00 <_ZN8touchgfx5paint6rgb88814lineFromRGB888EPhPKhjh>
 801eb70:	4b1e      	ldr	r3, [pc, #120]	@ (801ebec <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x57c>)
 801eb72:	9a02      	ldr	r2, [sp, #8]
 801eb74:	881b      	ldrh	r3, [r3, #0]
 801eb76:	1a9b      	subs	r3, r3, r2
 801eb78:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801eb7c:	441c      	add	r4, r3
 801eb7e:	9b04      	ldr	r3, [sp, #16]
 801eb80:	3301      	adds	r3, #1
 801eb82:	9304      	str	r3, [sp, #16]
 801eb84:	9a04      	ldr	r2, [sp, #16]
 801eb86:	9b01      	ldr	r3, [sp, #4]
 801eb88:	4293      	cmp	r3, r2
 801eb8a:	d11c      	bne.n	801ebc6 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x556>
 801eb8c:	9b03      	ldr	r3, [sp, #12]
 801eb8e:	2500      	movs	r5, #0
 801eb90:	9a03      	ldr	r2, [sp, #12]
 801eb92:	1c5e      	adds	r6, r3, #1
 801eb94:	9b05      	ldr	r3, [sp, #20]
 801eb96:	f8bd 7040 	ldrh.w	r7, [sp, #64]	@ 0x40
 801eb9a:	4629      	mov	r1, r5
 801eb9c:	f853 8022 	ldr.w	r8, [r3, r2, lsl #2]
 801eba0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 801eba4:	9b06      	ldr	r3, [sp, #24]
 801eba6:	fa98 f888 	rev.w	r8, r8
 801ebaa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801ebac:	4498      	add	r8, r3
 801ebae:	f8bd 3038 	ldrh.w	r3, [sp, #56]	@ 0x38
 801ebb2:	1aff      	subs	r7, r7, r3
 801ebb4:	f008 fe00 	bl	80277b8 <memset>
 801ebb8:	b2bf      	uxth	r7, r7
 801ebba:	e9cd 6503 	strd	r6, r5, [sp, #12]
 801ebbe:	f7e4 f951 	bl	8002e64 <_ZN8touchgfx5paint8tearDownEv>
 801ebc2:	46c1      	mov	r9, r8
 801ebc4:	e5db      	b.n	801e77e <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x10e>
 801ebc6:	f8bd 703c 	ldrh.w	r7, [sp, #60]	@ 0x3c
 801ebca:	9b02      	ldr	r3, [sp, #8]
 801ebcc:	1aff      	subs	r7, r7, r3
 801ebce:	eba7 0709 	sub.w	r7, r7, r9
 801ebd2:	b2bf      	uxth	r7, r7
 801ebd4:	e7f3      	b.n	801ebbe <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x54e>
 801ebd6:	4b06      	ldr	r3, [pc, #24]	@ (801ebf0 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x580>)
 801ebd8:	6818      	ldr	r0, [r3, #0]
 801ebda:	6803      	ldr	r3, [r0, #0]
 801ebdc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801ebde:	4798      	blx	r3
 801ebe0:	b013      	add	sp, #76	@ 0x4c
 801ebe2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ebe6:	bf00      	nop
 801ebe8:	24000140 	.word	0x24000140
 801ebec:	24028e1a 	.word	0x24028e1a
 801ebf0:	24028e20 	.word	0x24028e20
 801ebf4:	24000240 	.word	0x24000240

0801ebf8 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh>:
 801ebf8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ebfc:	f89d 001c 	ldrb.w	r0, [sp, #28]
 801ec00:	9c06      	ldr	r4, [sp, #24]
 801ec02:	2800      	cmp	r0, #0
 801ec04:	d06e      	beq.n	801ece4 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 801ec06:	f9b3 5004 	ldrsh.w	r5, [r3, #4]
 801ec0a:	2d00      	cmp	r5, #0
 801ec0c:	dd6a      	ble.n	801ece4 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 801ec0e:	f9b3 c006 	ldrsh.w	ip, [r3, #6]
 801ec12:	f1bc 0f00 	cmp.w	ip, #0
 801ec16:	dd65      	ble.n	801ece4 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 801ec18:	f9b3 6002 	ldrsh.w	r6, [r3, #2]
 801ec1c:	28ff      	cmp	r0, #255	@ 0xff
 801ec1e:	f9b3 3000 	ldrsh.w	r3, [r3]
 801ec22:	f3c4 2707 	ubfx	r7, r4, #8, #8
 801ec26:	fb02 3306 	mla	r3, r2, r6, r3
 801ec2a:	f3c4 4607 	ubfx	r6, r4, #16, #8
 801ec2e:	b2e4      	uxtb	r4, r4
 801ec30:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801ec34:	4419      	add	r1, r3
 801ec36:	fb02 f30c 	mul.w	r3, r2, ip
 801ec3a:	eba2 0205 	sub.w	r2, r2, r5
 801ec3e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801ec42:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801ec46:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801ec4a:	440b      	add	r3, r1
 801ec4c:	d03e      	beq.n	801eccc <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xd4>
 801ec4e:	fa1f fc80 	uxth.w	ip, r0
 801ec52:	f1c0 00ff 	rsb	r0, r0, #255	@ 0xff
 801ec56:	fb06 f60c 	mul.w	r6, r6, ip
 801ec5a:	b280      	uxth	r0, r0
 801ec5c:	fb07 f70c 	mul.w	r7, r7, ip
 801ec60:	fb04 f40c 	mul.w	r4, r4, ip
 801ec64:	4299      	cmp	r1, r3
 801ec66:	d23d      	bcs.n	801ece4 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 801ec68:	eb01 0c05 	add.w	ip, r1, r5
 801ec6c:	458c      	cmp	ip, r1
 801ec6e:	f101 0e03 	add.w	lr, r1, #3
 801ec72:	d928      	bls.n	801ecc6 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xce>
 801ec74:	f81e 1c03 	ldrb.w	r1, [lr, #-3]
 801ec78:	fb11 f100 	smulbb	r1, r1, r0
 801ec7c:	4421      	add	r1, r4
 801ec7e:	b289      	uxth	r1, r1
 801ec80:	f101 0801 	add.w	r8, r1, #1
 801ec84:	eb08 2111 	add.w	r1, r8, r1, lsr #8
 801ec88:	1209      	asrs	r1, r1, #8
 801ec8a:	f80e 1c03 	strb.w	r1, [lr, #-3]
 801ec8e:	f81e 1c02 	ldrb.w	r1, [lr, #-2]
 801ec92:	fb11 f100 	smulbb	r1, r1, r0
 801ec96:	4439      	add	r1, r7
 801ec98:	b289      	uxth	r1, r1
 801ec9a:	f101 0801 	add.w	r8, r1, #1
 801ec9e:	eb08 2111 	add.w	r1, r8, r1, lsr #8
 801eca2:	1209      	asrs	r1, r1, #8
 801eca4:	f80e 1c02 	strb.w	r1, [lr, #-2]
 801eca8:	f81e 1c01 	ldrb.w	r1, [lr, #-1]
 801ecac:	fb11 f100 	smulbb	r1, r1, r0
 801ecb0:	4431      	add	r1, r6
 801ecb2:	b289      	uxth	r1, r1
 801ecb4:	f101 0801 	add.w	r8, r1, #1
 801ecb8:	eb08 2111 	add.w	r1, r8, r1, lsr #8
 801ecbc:	1209      	asrs	r1, r1, #8
 801ecbe:	f80e 1c01 	strb.w	r1, [lr, #-1]
 801ecc2:	4671      	mov	r1, lr
 801ecc4:	e7d2      	b.n	801ec6c <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x74>
 801ecc6:	4411      	add	r1, r2
 801ecc8:	e7cc      	b.n	801ec64 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x6c>
 801ecca:	4411      	add	r1, r2
 801eccc:	4299      	cmp	r1, r3
 801ecce:	d209      	bcs.n	801ece4 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 801ecd0:	1948      	adds	r0, r1, r5
 801ecd2:	4281      	cmp	r1, r0
 801ecd4:	d2f9      	bcs.n	801ecca <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xd2>
 801ecd6:	700c      	strb	r4, [r1, #0]
 801ecd8:	3103      	adds	r1, #3
 801ecda:	f801 7c02 	strb.w	r7, [r1, #-2]
 801ecde:	f801 6c01 	strb.w	r6, [r1, #-1]
 801ece2:	e7f6      	b.n	801ecd2 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xda>
 801ece4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801ece8 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss>:
 801ece8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ecec:	b093      	sub	sp, #76	@ 0x4c
 801ecee:	4699      	mov	r9, r3
 801ecf0:	4617      	mov	r7, r2
 801ecf2:	f9b3 2000 	ldrsh.w	r2, [r3]
 801ecf6:	f9bd 8074 	ldrsh.w	r8, [sp, #116]	@ 0x74
 801ecfa:	4604      	mov	r4, r0
 801ecfc:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801ed00:	a80c      	add	r0, sp, #48	@ 0x30
 801ed02:	f9bd 6078 	ldrsh.w	r6, [sp, #120]	@ 0x78
 801ed06:	460d      	mov	r5, r1
 801ed08:	4649      	mov	r1, r9
 801ed0a:	f8ad 2030 	strh.w	r2, [sp, #48]	@ 0x30
 801ed0e:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 801ed12:	f8ad 8034 	strh.w	r8, [sp, #52]	@ 0x34
 801ed16:	f8ad 6036 	strh.w	r6, [sp, #54]	@ 0x36
 801ed1a:	f7f0 fe71 	bl	800fa00 <_ZN8touchgfx4RectaNERKS0_>
 801ed1e:	4639      	mov	r1, r7
 801ed20:	a80c      	add	r0, sp, #48	@ 0x30
 801ed22:	f7f0 fe6d 	bl	800fa00 <_ZN8touchgfx4RectaNERKS0_>
 801ed26:	4b78      	ldr	r3, [pc, #480]	@ (801ef08 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x220>)
 801ed28:	8818      	ldrh	r0, [r3, #0]
 801ed2a:	4b78      	ldr	r3, [pc, #480]	@ (801ef0c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x224>)
 801ed2c:	b202      	sxth	r2, r0
 801ed2e:	8819      	ldrh	r1, [r3, #0]
 801ed30:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	@ 0x30
 801ed34:	b20f      	sxth	r7, r1
 801ed36:	2b00      	cmp	r3, #0
 801ed38:	da07      	bge.n	801ed4a <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x62>
 801ed3a:	f8bd c034 	ldrh.w	ip, [sp, #52]	@ 0x34
 801ed3e:	4463      	add	r3, ip
 801ed40:	f8ad 3034 	strh.w	r3, [sp, #52]	@ 0x34
 801ed44:	2300      	movs	r3, #0
 801ed46:	f8ad 3030 	strh.w	r3, [sp, #48]	@ 0x30
 801ed4a:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	@ 0x30
 801ed4e:	f9bd c034 	ldrsh.w	ip, [sp, #52]	@ 0x34
 801ed52:	1ad2      	subs	r2, r2, r3
 801ed54:	4594      	cmp	ip, r2
 801ed56:	bfc4      	itt	gt
 801ed58:	1ac2      	subgt	r2, r0, r3
 801ed5a:	f8ad 2034 	strhgt.w	r2, [sp, #52]	@ 0x34
 801ed5e:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	@ 0x32
 801ed62:	2a00      	cmp	r2, #0
 801ed64:	da07      	bge.n	801ed76 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x8e>
 801ed66:	f8bd c036 	ldrh.w	ip, [sp, #54]	@ 0x36
 801ed6a:	4462      	add	r2, ip
 801ed6c:	f8ad 2036 	strh.w	r2, [sp, #54]	@ 0x36
 801ed70:	2200      	movs	r2, #0
 801ed72:	f8ad 2032 	strh.w	r2, [sp, #50]	@ 0x32
 801ed76:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	@ 0x32
 801ed7a:	f9bd c036 	ldrsh.w	ip, [sp, #54]	@ 0x36
 801ed7e:	1abf      	subs	r7, r7, r2
 801ed80:	45bc      	cmp	ip, r7
 801ed82:	f8df c190 	ldr.w	ip, [pc, #400]	@ 801ef14 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x22c>
 801ed86:	bfc8      	it	gt
 801ed88:	1a8f      	subgt	r7, r1, r2
 801ed8a:	f89c c000 	ldrb.w	ip, [ip]
 801ed8e:	bfc8      	it	gt
 801ed90:	f8ad 7036 	strhgt.w	r7, [sp, #54]	@ 0x36
 801ed94:	f9bd 7034 	ldrsh.w	r7, [sp, #52]	@ 0x34
 801ed98:	f1bc 0f00 	cmp.w	ip, #0
 801ed9c:	d176      	bne.n	801ee8c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1a4>
 801ed9e:	4287      	cmp	r7, r0
 801eda0:	bf14      	ite	ne
 801eda2:	2100      	movne	r1, #0
 801eda4:	2101      	moveq	r1, #1
 801eda6:	2f00      	cmp	r7, #0
 801eda8:	9107      	str	r1, [sp, #28]
 801edaa:	dd73      	ble.n	801ee94 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1ac>
 801edac:	f9bd 1036 	ldrsh.w	r1, [sp, #54]	@ 0x36
 801edb0:	2900      	cmp	r1, #0
 801edb2:	9104      	str	r1, [sp, #16]
 801edb4:	dd6e      	ble.n	801ee94 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1ac>
 801edb6:	f8b9 1000 	ldrh.w	r1, [r9]
 801edba:	a80e      	add	r0, sp, #56	@ 0x38
 801edbc:	f8ad 8044 	strh.w	r8, [sp, #68]	@ 0x44
 801edc0:	f10d 0830 	add.w	r8, sp, #48	@ 0x30
 801edc4:	1a5b      	subs	r3, r3, r1
 801edc6:	a910      	add	r1, sp, #64	@ 0x40
 801edc8:	f8ad 6046 	strh.w	r6, [sp, #70]	@ 0x46
 801edcc:	b21b      	sxth	r3, r3
 801edce:	f8ad 703c 	strh.w	r7, [sp, #60]	@ 0x3c
 801edd2:	f8df a144 	ldr.w	sl, [pc, #324]	@ 801ef18 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x230>
 801edd6:	9305      	str	r3, [sp, #20]
 801edd8:	f8b9 3002 	ldrh.w	r3, [r9, #2]
 801eddc:	1ad2      	subs	r2, r2, r3
 801edde:	b213      	sxth	r3, r2
 801ede0:	9306      	str	r3, [sp, #24]
 801ede2:	9b05      	ldr	r3, [sp, #20]
 801ede4:	f8ad 3038 	strh.w	r3, [sp, #56]	@ 0x38
 801ede8:	9b06      	ldr	r3, [sp, #24]
 801edea:	f8ad 303a 	strh.w	r3, [sp, #58]	@ 0x3a
 801edee:	9b04      	ldr	r3, [sp, #16]
 801edf0:	f8ad 303e 	strh.w	r3, [sp, #62]	@ 0x3e
 801edf4:	2300      	movs	r3, #0
 801edf6:	9310      	str	r3, [sp, #64]	@ 0x40
 801edf8:	f7f8 fa7a 	bl	80172f0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801edfc:	4640      	mov	r0, r8
 801edfe:	f7f8 fa33 	bl	8017268 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801ee02:	a810      	add	r0, sp, #64	@ 0x40
 801ee04:	f7f8 fa30 	bl	8017268 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801ee08:	4b41      	ldr	r3, [pc, #260]	@ (801ef10 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x228>)
 801ee0a:	f9bd b044 	ldrsh.w	fp, [sp, #68]	@ 0x44
 801ee0e:	4628      	mov	r0, r5
 801ee10:	881b      	ldrh	r3, [r3, #0]
 801ee12:	9308      	str	r3, [sp, #32]
 801ee14:	eb0b 034b 	add.w	r3, fp, fp, lsl #1
 801ee18:	b21b      	sxth	r3, r3
 801ee1a:	9303      	str	r3, [sp, #12]
 801ee1c:	682b      	ldr	r3, [r5, #0]
 801ee1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801ee20:	4798      	blx	r3
 801ee22:	9a03      	ldr	r2, [sp, #12]
 801ee24:	f8bd 303a 	ldrh.w	r3, [sp, #58]	@ 0x3a
 801ee28:	4681      	mov	r9, r0
 801ee2a:	f8bd 5038 	ldrh.w	r5, [sp, #56]	@ 0x38
 801ee2e:	fb13 f302 	smulbb	r3, r3, r2
 801ee32:	2203      	movs	r2, #3
 801ee34:	f8da 0000 	ldr.w	r0, [sl]
 801ee38:	fb15 3302 	smlabb	r3, r5, r2, r3
 801ee3c:	9d1c      	ldr	r5, [sp, #112]	@ 0x70
 801ee3e:	920b      	str	r2, [sp, #44]	@ 0x2c
 801ee40:	441d      	add	r5, r3
 801ee42:	6803      	ldr	r3, [r0, #0]
 801ee44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801ee46:	4798      	blx	r3
 801ee48:	9009      	str	r0, [sp, #36]	@ 0x24
 801ee4a:	f8da 0000 	ldr.w	r0, [sl]
 801ee4e:	f9bd 1030 	ldrsh.w	r1, [sp, #48]	@ 0x30
 801ee52:	6803      	ldr	r3, [r0, #0]
 801ee54:	910a      	str	r1, [sp, #40]	@ 0x28
 801ee56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801ee58:	f9bd 6032 	ldrsh.w	r6, [sp, #50]	@ 0x32
 801ee5c:	4798      	blx	r3
 801ee5e:	f010 0f01 	tst.w	r0, #1
 801ee62:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	@ 0x28
 801ee66:	d01e      	beq.n	801eea6 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1be>
 801ee68:	f8da 0000 	ldr.w	r0, [sl]
 801ee6c:	f9bd 203c 	ldrsh.w	r2, [sp, #60]	@ 0x3c
 801ee70:	6803      	ldr	r3, [r0, #0]
 801ee72:	9200      	str	r2, [sp, #0]
 801ee74:	6ede      	ldr	r6, [r3, #108]	@ 0x6c
 801ee76:	462b      	mov	r3, r5
 801ee78:	e898 0006 	ldmia.w	r8, {r1, r2}
 801ee7c:	47b0      	blx	r6
 801ee7e:	9b05      	ldr	r3, [sp, #20]
 801ee80:	80a7      	strh	r7, [r4, #4]
 801ee82:	8023      	strh	r3, [r4, #0]
 801ee84:	9b06      	ldr	r3, [sp, #24]
 801ee86:	8063      	strh	r3, [r4, #2]
 801ee88:	9b04      	ldr	r3, [sp, #16]
 801ee8a:	e007      	b.n	801ee9c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1b4>
 801ee8c:	f9bd 0036 	ldrsh.w	r0, [sp, #54]	@ 0x36
 801ee90:	4288      	cmp	r0, r1
 801ee92:	e785      	b.n	801eda0 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xb8>
 801ee94:	2300      	movs	r3, #0
 801ee96:	8023      	strh	r3, [r4, #0]
 801ee98:	8063      	strh	r3, [r4, #2]
 801ee9a:	80a3      	strh	r3, [r4, #4]
 801ee9c:	4620      	mov	r0, r4
 801ee9e:	80e3      	strh	r3, [r4, #6]
 801eea0:	b013      	add	sp, #76	@ 0x4c
 801eea2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801eea6:	fb09 f606 	mul.w	r6, r9, r6
 801eeaa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801eeac:	fb11 6602 	smlabb	r6, r1, r2, r6
 801eeb0:	9a07      	ldr	r2, [sp, #28]
 801eeb2:	4433      	add	r3, r6
 801eeb4:	461e      	mov	r6, r3
 801eeb6:	f9bd 303e 	ldrsh.w	r3, [sp, #62]	@ 0x3e
 801eeba:	b16a      	cbz	r2, 801eed8 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1f0>
 801eebc:	9a08      	ldr	r2, [sp, #32]
 801eebe:	4593      	cmp	fp, r2
 801eec0:	d10a      	bne.n	801eed8 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1f0>
 801eec2:	f8da 0000 	ldr.w	r0, [sl]
 801eec6:	fb09 f303 	mul.w	r3, r9, r3
 801eeca:	4629      	mov	r1, r5
 801eecc:	6802      	ldr	r2, [r0, #0]
 801eece:	f8d2 a034 	ldr.w	sl, [r2, #52]	@ 0x34
 801eed2:	4632      	mov	r2, r6
 801eed4:	47d0      	blx	sl
 801eed6:	e7d2      	b.n	801ee7e <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x196>
 801eed8:	9a03      	ldr	r2, [sp, #12]
 801eeda:	f8df b03c 	ldr.w	fp, [pc, #60]	@ 801ef18 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x230>
 801eede:	fb02 5803 	mla	r8, r2, r3, r5
 801eee2:	4545      	cmp	r5, r8
 801eee4:	d2cb      	bcs.n	801ee7e <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x196>
 801eee6:	f8db 0000 	ldr.w	r0, [fp]
 801eeea:	4629      	mov	r1, r5
 801eeec:	f9bd 303c 	ldrsh.w	r3, [sp, #60]	@ 0x3c
 801eef0:	6802      	ldr	r2, [r0, #0]
 801eef2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801eef6:	f8d2 a034 	ldr.w	sl, [r2, #52]	@ 0x34
 801eefa:	4632      	mov	r2, r6
 801eefc:	47d0      	blx	sl
 801eefe:	9b03      	ldr	r3, [sp, #12]
 801ef00:	444e      	add	r6, r9
 801ef02:	441d      	add	r5, r3
 801ef04:	e7ed      	b.n	801eee2 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1fa>
 801ef06:	bf00      	nop
 801ef08:	24028e14 	.word	0x24028e14
 801ef0c:	24028e16 	.word	0x24028e16
 801ef10:	24028e1a 	.word	0x24028e1a
 801ef14:	24028e18 	.word	0x24028e18
 801ef18:	24028e20 	.word	0x24028e20

0801ef1c <_ZN8touchgfx8LCD24bppC1Ev>:
 801ef1c:	2200      	movs	r2, #0
 801ef1e:	490e      	ldr	r1, [pc, #56]	@ (801ef58 <_ZN8touchgfx8LCD24bppC1Ev+0x3c>)
 801ef20:	e9c0 2201 	strd	r2, r2, [r0, #4]
 801ef24:	6001      	str	r1, [r0, #0]
 801ef26:	e9c0 2203 	strd	r2, r2, [r0, #12]
 801ef2a:	e9c0 2205 	strd	r2, r2, [r0, #20]
 801ef2e:	e9c0 2207 	strd	r2, r2, [r0, #28]
 801ef32:	e9c0 2209 	strd	r2, r2, [r0, #36]	@ 0x24
 801ef36:	e9c0 220b 	strd	r2, r2, [r0, #44]	@ 0x2c
 801ef3a:	e9c0 220d 	strd	r2, r2, [r0, #52]	@ 0x34
 801ef3e:	e9c0 220f 	strd	r2, r2, [r0, #60]	@ 0x3c
 801ef42:	e9c0 2211 	strd	r2, r2, [r0, #68]	@ 0x44
 801ef46:	e9c0 2213 	strd	r2, r2, [r0, #76]	@ 0x4c
 801ef4a:	e9c0 2215 	strd	r2, r2, [r0, #84]	@ 0x54
 801ef4e:	e9c0 2217 	strd	r2, r2, [r0, #92]	@ 0x5c
 801ef52:	e9c0 2219 	strd	r2, r2, [r0, #100]	@ 0x64
 801ef56:	4770      	bx	lr
 801ef58:	0802c9f4 	.word	0x0802c9f4

0801ef5c <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>:
 801ef5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ef60:	b091      	sub	sp, #68	@ 0x44
 801ef62:	4607      	mov	r7, r0
 801ef64:	4688      	mov	r8, r1
 801ef66:	6810      	ldr	r0, [r2, #0]
 801ef68:	6851      	ldr	r1, [r2, #4]
 801ef6a:	ac0c      	add	r4, sp, #48	@ 0x30
 801ef6c:	4616      	mov	r6, r2
 801ef6e:	f89d 9068 	ldrb.w	r9, [sp, #104]	@ 0x68
 801ef72:	4d64      	ldr	r5, [pc, #400]	@ (801f104 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1a8>)
 801ef74:	f8df a190 	ldr.w	sl, [pc, #400]	@ 801f108 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1ac>
 801ef78:	c403      	stmia	r4!, {r0, r1}
 801ef7a:	6818      	ldr	r0, [r3, #0]
 801ef7c:	ac0e      	add	r4, sp, #56	@ 0x38
 801ef7e:	6859      	ldr	r1, [r3, #4]
 801ef80:	c403      	stmia	r4!, {r0, r1}
 801ef82:	a80c      	add	r0, sp, #48	@ 0x30
 801ef84:	f7f8 f970 	bl	8017268 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801ef88:	4631      	mov	r1, r6
 801ef8a:	a80e      	add	r0, sp, #56	@ 0x38
 801ef8c:	f7f8 f9b0 	bl	80172f0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801ef90:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	@ 0x38
 801ef94:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	@ 0x3a
 801ef98:	f8bd 1034 	ldrh.w	r1, [sp, #52]	@ 0x34
 801ef9c:	6828      	ldr	r0, [r5, #0]
 801ef9e:	fb11 2103 	smlabb	r1, r1, r3, r2
 801efa2:	f9bd 403c 	ldrsh.w	r4, [sp, #60]	@ 0x3c
 801efa6:	f9bd 603e 	ldrsh.w	r6, [sp, #62]	@ 0x3e
 801efaa:	440f      	add	r7, r1
 801efac:	f8bd 1030 	ldrh.w	r1, [sp, #48]	@ 0x30
 801efb0:	440a      	add	r2, r1
 801efb2:	f8ad 2038 	strh.w	r2, [sp, #56]	@ 0x38
 801efb6:	f8bd 2032 	ldrh.w	r2, [sp, #50]	@ 0x32
 801efba:	4413      	add	r3, r2
 801efbc:	f8ad 303a 	strh.w	r3, [sp, #58]	@ 0x3a
 801efc0:	6803      	ldr	r3, [r0, #0]
 801efc2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801efc4:	4798      	blx	r3
 801efc6:	f010 0f80 	tst.w	r0, #128	@ 0x80
 801efca:	6828      	ldr	r0, [r5, #0]
 801efcc:	d01f      	beq.n	801f00e <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xb2>
 801efce:	2201      	movs	r2, #1
 801efd0:	2500      	movs	r5, #0
 801efd2:	6801      	ldr	r1, [r0, #0]
 801efd4:	b2a4      	uxth	r4, r4
 801efd6:	b2b6      	uxth	r6, r6
 801efd8:	f8bd 3038 	ldrh.w	r3, [sp, #56]	@ 0x38
 801efdc:	e9cd 2508 	strd	r2, r5, [sp, #32]
 801efe0:	250b      	movs	r5, #11
 801efe2:	9507      	str	r5, [sp, #28]
 801efe4:	f8ba 5000 	ldrh.w	r5, [sl]
 801efe8:	f8cd 9010 	str.w	r9, [sp, #16]
 801efec:	9602      	str	r6, [sp, #8]
 801efee:	9401      	str	r4, [sp, #4]
 801eff0:	e9cd 2505 	strd	r2, r5, [sp, #20]
 801eff4:	f8bd 2034 	ldrh.w	r2, [sp, #52]	@ 0x34
 801eff8:	9203      	str	r2, [sp, #12]
 801effa:	f8bd 203a 	ldrh.w	r2, [sp, #58]	@ 0x3a
 801effe:	9200      	str	r2, [sp, #0]
 801f000:	4642      	mov	r2, r8
 801f002:	6bcc      	ldr	r4, [r1, #60]	@ 0x3c
 801f004:	4639      	mov	r1, r7
 801f006:	47a0      	blx	r4
 801f008:	b011      	add	sp, #68	@ 0x44
 801f00a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f00e:	6803      	ldr	r3, [r0, #0]
 801f010:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801f012:	4798      	blx	r3
 801f014:	f8ba 5000 	ldrh.w	r5, [sl]
 801f018:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	@ 0x38
 801f01c:	f04f 0e04 	mov.w	lr, #4
 801f020:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	@ 0x3a
 801f024:	436e      	muls	r6, r5
 801f026:	fb05 2303 	mla	r3, r5, r3, r2
 801f02a:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801f02e:	1b2d      	subs	r5, r5, r4
 801f030:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801f034:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801f038:	4418      	add	r0, r3
 801f03a:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	@ 0x34
 801f03e:	1982      	adds	r2, r0, r6
 801f040:	1b1b      	subs	r3, r3, r4
 801f042:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801f046:	930b      	str	r3, [sp, #44]	@ 0x2c
 801f048:	4290      	cmp	r0, r2
 801f04a:	d254      	bcs.n	801f0f6 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x19a>
 801f04c:	eb00 0a04 	add.w	sl, r0, r4
 801f050:	4550      	cmp	r0, sl
 801f052:	d24c      	bcs.n	801f0ee <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x192>
 801f054:	f817 1b01 	ldrb.w	r1, [r7], #1
 801f058:	fb1e e101 	smlabb	r1, lr, r1, lr
 801f05c:	eb08 0c01 	add.w	ip, r8, r1
 801f060:	f89c 3003 	ldrb.w	r3, [ip, #3]
 801f064:	b173      	cbz	r3, 801f084 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x128>
 801f066:	2bff      	cmp	r3, #255	@ 0xff
 801f068:	f818 b001 	ldrb.w	fp, [r8, r1]
 801f06c:	d10c      	bne.n	801f088 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x12c>
 801f06e:	f1b9 0fff 	cmp.w	r9, #255	@ 0xff
 801f072:	d109      	bne.n	801f088 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x12c>
 801f074:	f880 b000 	strb.w	fp, [r0]
 801f078:	f89c 3001 	ldrb.w	r3, [ip, #1]
 801f07c:	7043      	strb	r3, [r0, #1]
 801f07e:	f89c 3002 	ldrb.w	r3, [ip, #2]
 801f082:	7083      	strb	r3, [r0, #2]
 801f084:	3003      	adds	r0, #3
 801f086:	e7e3      	b.n	801f050 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xf4>
 801f088:	fb09 f103 	mul.w	r1, r9, r3
 801f08c:	1c4b      	adds	r3, r1, #1
 801f08e:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 801f092:	7801      	ldrb	r1, [r0, #0]
 801f094:	121b      	asrs	r3, r3, #8
 801f096:	b29e      	uxth	r6, r3
 801f098:	43db      	mvns	r3, r3
 801f09a:	fb1b fb06 	smulbb	fp, fp, r6
 801f09e:	b2db      	uxtb	r3, r3
 801f0a0:	fb01 b103 	mla	r1, r1, r3, fp
 801f0a4:	b289      	uxth	r1, r1
 801f0a6:	f101 0b01 	add.w	fp, r1, #1
 801f0aa:	eb0b 2111 	add.w	r1, fp, r1, lsr #8
 801f0ae:	f890 b001 	ldrb.w	fp, [r0, #1]
 801f0b2:	fb1b fb03 	smulbb	fp, fp, r3
 801f0b6:	1209      	asrs	r1, r1, #8
 801f0b8:	7001      	strb	r1, [r0, #0]
 801f0ba:	f89c 1001 	ldrb.w	r1, [ip, #1]
 801f0be:	fb01 b106 	mla	r1, r1, r6, fp
 801f0c2:	b289      	uxth	r1, r1
 801f0c4:	f101 0b01 	add.w	fp, r1, #1
 801f0c8:	eb0b 2111 	add.w	r1, fp, r1, lsr #8
 801f0cc:	1209      	asrs	r1, r1, #8
 801f0ce:	7041      	strb	r1, [r0, #1]
 801f0d0:	f89c 1002 	ldrb.w	r1, [ip, #2]
 801f0d4:	f890 c002 	ldrb.w	ip, [r0, #2]
 801f0d8:	fb1c f303 	smulbb	r3, ip, r3
 801f0dc:	fb01 3606 	mla	r6, r1, r6, r3
 801f0e0:	b2b6      	uxth	r6, r6
 801f0e2:	1c73      	adds	r3, r6, #1
 801f0e4:	eb03 2616 	add.w	r6, r3, r6, lsr #8
 801f0e8:	1236      	asrs	r6, r6, #8
 801f0ea:	7086      	strb	r6, [r0, #2]
 801f0ec:	e7ca      	b.n	801f084 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x128>
 801f0ee:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801f0f0:	4428      	add	r0, r5
 801f0f2:	441f      	add	r7, r3
 801f0f4:	e7a8      	b.n	801f048 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xec>
 801f0f6:	4b03      	ldr	r3, [pc, #12]	@ (801f104 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1a8>)
 801f0f8:	6818      	ldr	r0, [r3, #0]
 801f0fa:	6803      	ldr	r3, [r0, #0]
 801f0fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801f0fe:	4798      	blx	r3
 801f100:	e782      	b.n	801f008 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xac>
 801f102:	bf00      	nop
 801f104:	24028e20 	.word	0x24028e20
 801f108:	24028e1a 	.word	0x24028e1a

0801f10c <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>:
 801f10c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f110:	b091      	sub	sp, #68	@ 0x44
 801f112:	4680      	mov	r8, r0
 801f114:	460e      	mov	r6, r1
 801f116:	6810      	ldr	r0, [r2, #0]
 801f118:	6851      	ldr	r1, [r2, #4]
 801f11a:	ad0c      	add	r5, sp, #48	@ 0x30
 801f11c:	4614      	mov	r4, r2
 801f11e:	f89d 7068 	ldrb.w	r7, [sp, #104]	@ 0x68
 801f122:	f8df 9198 	ldr.w	r9, [pc, #408]	@ 801f2bc <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1b0>
 801f126:	f8df a198 	ldr.w	sl, [pc, #408]	@ 801f2c0 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1b4>
 801f12a:	c503      	stmia	r5!, {r0, r1}
 801f12c:	6818      	ldr	r0, [r3, #0]
 801f12e:	ad0e      	add	r5, sp, #56	@ 0x38
 801f130:	6859      	ldr	r1, [r3, #4]
 801f132:	c503      	stmia	r5!, {r0, r1}
 801f134:	a80c      	add	r0, sp, #48	@ 0x30
 801f136:	f7f8 f897 	bl	8017268 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801f13a:	4621      	mov	r1, r4
 801f13c:	a80e      	add	r0, sp, #56	@ 0x38
 801f13e:	f7f8 f8d7 	bl	80172f0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801f142:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	@ 0x38
 801f146:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	@ 0x3a
 801f14a:	f8bd 1034 	ldrh.w	r1, [sp, #52]	@ 0x34
 801f14e:	f8d9 0000 	ldr.w	r0, [r9]
 801f152:	fb11 2103 	smlabb	r1, r1, r3, r2
 801f156:	f9bd 503e 	ldrsh.w	r5, [sp, #62]	@ 0x3e
 801f15a:	eb08 0401 	add.w	r4, r8, r1
 801f15e:	f8bd 1030 	ldrh.w	r1, [sp, #48]	@ 0x30
 801f162:	f9bd 803c 	ldrsh.w	r8, [sp, #60]	@ 0x3c
 801f166:	440a      	add	r2, r1
 801f168:	f8ad 2038 	strh.w	r2, [sp, #56]	@ 0x38
 801f16c:	f8bd 2032 	ldrh.w	r2, [sp, #50]	@ 0x32
 801f170:	4413      	add	r3, r2
 801f172:	f8ad 303a 	strh.w	r3, [sp, #58]	@ 0x3a
 801f176:	6803      	ldr	r3, [r0, #0]
 801f178:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801f17a:	4798      	blx	r3
 801f17c:	f010 0f80 	tst.w	r0, #128	@ 0x80
 801f180:	f8d9 0000 	ldr.w	r0, [r9]
 801f184:	d022      	beq.n	801f1cc <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xc0>
 801f186:	2200      	movs	r2, #0
 801f188:	f04f 0c01 	mov.w	ip, #1
 801f18c:	6801      	ldr	r1, [r0, #0]
 801f18e:	b2ad      	uxth	r5, r5
 801f190:	f8bd 3038 	ldrh.w	r3, [sp, #56]	@ 0x38
 801f194:	e9cd c208 	strd	ip, r2, [sp, #32]
 801f198:	f04f 0c0b 	mov.w	ip, #11
 801f19c:	f8cd c01c 	str.w	ip, [sp, #28]
 801f1a0:	f8ba c000 	ldrh.w	ip, [sl]
 801f1a4:	9704      	str	r7, [sp, #16]
 801f1a6:	9502      	str	r5, [sp, #8]
 801f1a8:	e9cd 2c05 	strd	r2, ip, [sp, #20]
 801f1ac:	f8bd 2034 	ldrh.w	r2, [sp, #52]	@ 0x34
 801f1b0:	9203      	str	r2, [sp, #12]
 801f1b2:	fa1f f288 	uxth.w	r2, r8
 801f1b6:	9201      	str	r2, [sp, #4]
 801f1b8:	f8bd 203a 	ldrh.w	r2, [sp, #58]	@ 0x3a
 801f1bc:	9200      	str	r2, [sp, #0]
 801f1be:	4632      	mov	r2, r6
 801f1c0:	6bcd      	ldr	r5, [r1, #60]	@ 0x3c
 801f1c2:	4621      	mov	r1, r4
 801f1c4:	47a8      	blx	r5
 801f1c6:	b011      	add	sp, #68	@ 0x44
 801f1c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f1cc:	6803      	ldr	r3, [r0, #0]
 801f1ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801f1d0:	4798      	blx	r3
 801f1d2:	f8ba 2000 	ldrh.w	r2, [sl]
 801f1d6:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	@ 0x3a
 801f1da:	f04f 0e03 	mov.w	lr, #3
 801f1de:	f9bd 1038 	ldrsh.w	r1, [sp, #56]	@ 0x38
 801f1e2:	4355      	muls	r5, r2
 801f1e4:	fa1f fc87 	uxth.w	ip, r7
 801f1e8:	fb02 1303 	mla	r3, r2, r3, r1
 801f1ec:	eba2 0208 	sub.w	r2, r2, r8
 801f1f0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801f1f4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801f1f8:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801f1fc:	4418      	add	r0, r3
 801f1fe:	920b      	str	r2, [sp, #44]	@ 0x2c
 801f200:	1943      	adds	r3, r0, r5
 801f202:	f9bd 2034 	ldrsh.w	r2, [sp, #52]	@ 0x34
 801f206:	f1c7 05ff 	rsb	r5, r7, #255	@ 0xff
 801f20a:	eba2 0208 	sub.w	r2, r2, r8
 801f20e:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 801f212:	b2ad      	uxth	r5, r5
 801f214:	4298      	cmp	r0, r3
 801f216:	d24a      	bcs.n	801f2ae <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1a2>
 801f218:	eb00 0908 	add.w	r9, r0, r8
 801f21c:	4621      	mov	r1, r4
 801f21e:	4548      	cmp	r0, r9
 801f220:	460c      	mov	r4, r1
 801f222:	d240      	bcs.n	801f2a6 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x19a>
 801f224:	f04f 0a04 	mov.w	sl, #4
 801f228:	7824      	ldrb	r4, [r4, #0]
 801f22a:	2fff      	cmp	r7, #255	@ 0xff
 801f22c:	f101 0101 	add.w	r1, r1, #1
 801f230:	fb1e a404 	smlabb	r4, lr, r4, sl
 801f234:	eb06 0a04 	add.w	sl, r6, r4
 801f238:	f816 b004 	ldrb.w	fp, [r6, r4]
 801f23c:	d02b      	beq.n	801f296 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x18a>
 801f23e:	7804      	ldrb	r4, [r0, #0]
 801f240:	fb14 f405 	smulbb	r4, r4, r5
 801f244:	fb0b 440c 	mla	r4, fp, ip, r4
 801f248:	b2a4      	uxth	r4, r4
 801f24a:	f104 0b01 	add.w	fp, r4, #1
 801f24e:	eb0b 2414 	add.w	r4, fp, r4, lsr #8
 801f252:	f890 b001 	ldrb.w	fp, [r0, #1]
 801f256:	fb1b fb05 	smulbb	fp, fp, r5
 801f25a:	1224      	asrs	r4, r4, #8
 801f25c:	7004      	strb	r4, [r0, #0]
 801f25e:	f89a 4001 	ldrb.w	r4, [sl, #1]
 801f262:	fb04 b40c 	mla	r4, r4, ip, fp
 801f266:	b2a4      	uxth	r4, r4
 801f268:	f104 0b01 	add.w	fp, r4, #1
 801f26c:	eb0b 2414 	add.w	r4, fp, r4, lsr #8
 801f270:	1224      	asrs	r4, r4, #8
 801f272:	7044      	strb	r4, [r0, #1]
 801f274:	f89a 4002 	ldrb.w	r4, [sl, #2]
 801f278:	f890 a002 	ldrb.w	sl, [r0, #2]
 801f27c:	fb1a fa05 	smulbb	sl, sl, r5
 801f280:	fb04 a40c 	mla	r4, r4, ip, sl
 801f284:	b2a4      	uxth	r4, r4
 801f286:	f104 0a01 	add.w	sl, r4, #1
 801f28a:	eb0a 2414 	add.w	r4, sl, r4, lsr #8
 801f28e:	1224      	asrs	r4, r4, #8
 801f290:	7084      	strb	r4, [r0, #2]
 801f292:	3003      	adds	r0, #3
 801f294:	e7c3      	b.n	801f21e <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x112>
 801f296:	f880 b000 	strb.w	fp, [r0]
 801f29a:	f89a 4001 	ldrb.w	r4, [sl, #1]
 801f29e:	7044      	strb	r4, [r0, #1]
 801f2a0:	f89a 4002 	ldrb.w	r4, [sl, #2]
 801f2a4:	e7f4      	b.n	801f290 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x184>
 801f2a6:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801f2a8:	4420      	add	r0, r4
 801f2aa:	188c      	adds	r4, r1, r2
 801f2ac:	e7b2      	b.n	801f214 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x108>
 801f2ae:	4b03      	ldr	r3, [pc, #12]	@ (801f2bc <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1b0>)
 801f2b0:	6818      	ldr	r0, [r3, #0]
 801f2b2:	6803      	ldr	r3, [r0, #0]
 801f2b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801f2b6:	4798      	blx	r3
 801f2b8:	e785      	b.n	801f1c6 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xba>
 801f2ba:	bf00      	nop
 801f2bc:	24028e20 	.word	0x24028e20
 801f2c0:	24028e1a 	.word	0x24028e1a

0801f2c4 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>:
 801f2c4:	b4f0      	push	{r4, r5, r6, r7}
 801f2c6:	460c      	mov	r4, r1
 801f2c8:	4611      	mov	r1, r2
 801f2ca:	f89d 5014 	ldrb.w	r5, [sp, #20]
 801f2ce:	461a      	mov	r2, r3
 801f2d0:	780f      	ldrb	r7, [r1, #0]
 801f2d2:	9b04      	ldr	r3, [sp, #16]
 801f2d4:	784e      	ldrb	r6, [r1, #1]
 801f2d6:	b11f      	cbz	r7, 801f2e0 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x1c>
 801f2d8:	2f01      	cmp	r7, #1
 801f2da:	d01d      	beq.n	801f318 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x54>
 801f2dc:	bcf0      	pop	{r4, r5, r6, r7}
 801f2de:	4770      	bx	lr
 801f2e0:	2e03      	cmp	r6, #3
 801f2e2:	d8fb      	bhi.n	801f2dc <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x18>
 801f2e4:	e8df f006 	tbb	[pc, r6]
 801f2e8:	16140702 	.word	0x16140702
 801f2ec:	9504      	str	r5, [sp, #16]
 801f2ee:	4620      	mov	r0, r4
 801f2f0:	bcf0      	pop	{r4, r5, r6, r7}
 801f2f2:	f7ff be33 	b.w	801ef5c <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>
 801f2f6:	6dc0      	ldr	r0, [r0, #92]	@ 0x5c
 801f2f8:	2800      	cmp	r0, #0
 801f2fa:	d0ef      	beq.n	801f2dc <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x18>
 801f2fc:	6806      	ldr	r6, [r0, #0]
 801f2fe:	e9cd 3504 	strd	r3, r5, [sp, #16]
 801f302:	68f5      	ldr	r5, [r6, #12]
 801f304:	4613      	mov	r3, r2
 801f306:	46ac      	mov	ip, r5
 801f308:	460a      	mov	r2, r1
 801f30a:	4621      	mov	r1, r4
 801f30c:	bcf0      	pop	{r4, r5, r6, r7}
 801f30e:	4760      	bx	ip
 801f310:	6e00      	ldr	r0, [r0, #96]	@ 0x60
 801f312:	e7f1      	b.n	801f2f8 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x34>
 801f314:	6e40      	ldr	r0, [r0, #100]	@ 0x64
 801f316:	e7ef      	b.n	801f2f8 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x34>
 801f318:	2e03      	cmp	r6, #3
 801f31a:	d8df      	bhi.n	801f2dc <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x18>
 801f31c:	e8df f006 	tbb	[pc, r6]
 801f320:	110f0702 	.word	0x110f0702
 801f324:	9504      	str	r5, [sp, #16]
 801f326:	4620      	mov	r0, r4
 801f328:	bcf0      	pop	{r4, r5, r6, r7}
 801f32a:	f7ff beef 	b.w	801f10c <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>
 801f32e:	6dc0      	ldr	r0, [r0, #92]	@ 0x5c
 801f330:	2800      	cmp	r0, #0
 801f332:	d0d3      	beq.n	801f2dc <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x18>
 801f334:	6806      	ldr	r6, [r0, #0]
 801f336:	e9cd 3504 	strd	r3, r5, [sp, #16]
 801f33a:	68b5      	ldr	r5, [r6, #8]
 801f33c:	e7e2      	b.n	801f304 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x40>
 801f33e:	6e00      	ldr	r0, [r0, #96]	@ 0x60
 801f340:	e7f6      	b.n	801f330 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x6c>
 801f342:	6e40      	ldr	r0, [r0, #100]	@ 0x64
 801f344:	e7f4      	b.n	801f330 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x6c>
	...

0801f348 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h>:
 801f348:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801f34c:	4605      	mov	r5, r0
 801f34e:	b08f      	sub	sp, #60	@ 0x3c
 801f350:	460c      	mov	r4, r1
 801f352:	461f      	mov	r7, r3
 801f354:	2b00      	cmp	r3, #0
 801f356:	d052      	beq.n	801f3fe <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xb6>
 801f358:	6808      	ldr	r0, [r1, #0]
 801f35a:	ab0a      	add	r3, sp, #40	@ 0x28
 801f35c:	6849      	ldr	r1, [r1, #4]
 801f35e:	f8df 81c8 	ldr.w	r8, [pc, #456]	@ 801f528 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1e0>
 801f362:	f8df 91c8 	ldr.w	r9, [pc, #456]	@ 801f52c <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1e4>
 801f366:	c303      	stmia	r3!, {r0, r1}
 801f368:	6810      	ldr	r0, [r2, #0]
 801f36a:	ab0c      	add	r3, sp, #48	@ 0x30
 801f36c:	6851      	ldr	r1, [r2, #4]
 801f36e:	c303      	stmia	r3!, {r0, r1}
 801f370:	a80a      	add	r0, sp, #40	@ 0x28
 801f372:	f7f7 ff79 	bl	8017268 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801f376:	4621      	mov	r1, r4
 801f378:	a80c      	add	r0, sp, #48	@ 0x30
 801f37a:	f7f7 ffb9 	bl	80172f0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801f37e:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	@ 0x30
 801f382:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	@ 0x32
 801f386:	f8bd 102c 	ldrh.w	r1, [sp, #44]	@ 0x2c
 801f38a:	f8d8 0000 	ldr.w	r0, [r8]
 801f38e:	fb11 2103 	smlabb	r1, r1, r3, r2
 801f392:	f9bd 6034 	ldrsh.w	r6, [sp, #52]	@ 0x34
 801f396:	f9bd 4036 	ldrsh.w	r4, [sp, #54]	@ 0x36
 801f39a:	eb05 0541 	add.w	r5, r5, r1, lsl #1
 801f39e:	f8bd 1028 	ldrh.w	r1, [sp, #40]	@ 0x28
 801f3a2:	440a      	add	r2, r1
 801f3a4:	f8ad 2030 	strh.w	r2, [sp, #48]	@ 0x30
 801f3a8:	f8bd 202a 	ldrh.w	r2, [sp, #42]	@ 0x2a
 801f3ac:	4413      	add	r3, r2
 801f3ae:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 801f3b2:	6803      	ldr	r3, [r0, #0]
 801f3b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801f3b6:	4798      	blx	r3
 801f3b8:	2fff      	cmp	r7, #255	@ 0xff
 801f3ba:	d023      	beq.n	801f404 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xbc>
 801f3bc:	f010 0f04 	tst.w	r0, #4
 801f3c0:	f8d8 0000 	ldr.w	r0, [r8]
 801f3c4:	d021      	beq.n	801f40a <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xc2>
 801f3c6:	2100      	movs	r1, #0
 801f3c8:	f04f 0e01 	mov.w	lr, #1
 801f3cc:	f8d0 c000 	ldr.w	ip, [r0]
 801f3d0:	b2a4      	uxth	r4, r4
 801f3d2:	9106      	str	r1, [sp, #24]
 801f3d4:	b2b6      	uxth	r6, r6
 801f3d6:	f8bd 3032 	ldrh.w	r3, [sp, #50]	@ 0x32
 801f3da:	f8bd 2030 	ldrh.w	r2, [sp, #48]	@ 0x30
 801f3de:	e9cd e107 	strd	lr, r1, [sp, #28]
 801f3e2:	f8b9 e000 	ldrh.w	lr, [r9]
 801f3e6:	9703      	str	r7, [sp, #12]
 801f3e8:	9401      	str	r4, [sp, #4]
 801f3ea:	9600      	str	r6, [sp, #0]
 801f3ec:	e9cd 1e04 	strd	r1, lr, [sp, #16]
 801f3f0:	f8bd 102c 	ldrh.w	r1, [sp, #44]	@ 0x2c
 801f3f4:	9102      	str	r1, [sp, #8]
 801f3f6:	4629      	mov	r1, r5
 801f3f8:	f8dc 4040 	ldr.w	r4, [ip, #64]	@ 0x40
 801f3fc:	47a0      	blx	r4
 801f3fe:	b00f      	add	sp, #60	@ 0x3c
 801f400:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801f404:	f010 0f01 	tst.w	r0, #1
 801f408:	e7da      	b.n	801f3c0 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x78>
 801f40a:	6803      	ldr	r3, [r0, #0]
 801f40c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801f40e:	4798      	blx	r3
 801f410:	f8b9 1000 	ldrh.w	r1, [r9]
 801f414:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	@ 0x32
 801f418:	eb06 0c46 	add.w	ip, r6, r6, lsl #1
 801f41c:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	@ 0x30
 801f420:	434c      	muls	r4, r1
 801f422:	2fff      	cmp	r7, #255	@ 0xff
 801f424:	fb01 2303 	mla	r3, r1, r3, r2
 801f428:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801f42c:	eba1 0106 	sub.w	r1, r1, r6
 801f430:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801f434:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801f438:	4418      	add	r0, r3
 801f43a:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	@ 0x2c
 801f43e:	eba3 0606 	sub.w	r6, r3, r6
 801f442:	4404      	add	r4, r0
 801f444:	ea4f 0646 	mov.w	r6, r6, lsl #1
 801f448:	d04a      	beq.n	801f4e0 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x198>
 801f44a:	43fa      	mvns	r2, r7
 801f44c:	b2bb      	uxth	r3, r7
 801f44e:	b2d7      	uxtb	r7, r2
 801f450:	42a0      	cmp	r0, r4
 801f452:	d263      	bcs.n	801f51c <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1d4>
 801f454:	eb00 0e0c 	add.w	lr, r0, ip
 801f458:	4586      	cmp	lr, r0
 801f45a:	f100 0803 	add.w	r8, r0, #3
 801f45e:	d93a      	bls.n	801f4d6 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x18e>
 801f460:	f835 2b02 	ldrh.w	r2, [r5], #2
 801f464:	f818 9c03 	ldrb.w	r9, [r8, #-3]
 801f468:	00d0      	lsls	r0, r2, #3
 801f46a:	fb19 f907 	smulbb	r9, r9, r7
 801f46e:	b2c0      	uxtb	r0, r0
 801f470:	ea40 1050 	orr.w	r0, r0, r0, lsr #5
 801f474:	fb00 9003 	mla	r0, r0, r3, r9
 801f478:	b280      	uxth	r0, r0
 801f47a:	f100 0901 	add.w	r9, r0, #1
 801f47e:	eb09 2010 	add.w	r0, r9, r0, lsr #8
 801f482:	f818 9c02 	ldrb.w	r9, [r8, #-2]
 801f486:	fb19 f907 	smulbb	r9, r9, r7
 801f48a:	1200      	asrs	r0, r0, #8
 801f48c:	f808 0c03 	strb.w	r0, [r8, #-3]
 801f490:	10d0      	asrs	r0, r2, #3
 801f492:	1212      	asrs	r2, r2, #8
 801f494:	f000 00fc 	and.w	r0, r0, #252	@ 0xfc
 801f498:	f002 02f8 	and.w	r2, r2, #248	@ 0xf8
 801f49c:	ea40 1090 	orr.w	r0, r0, r0, lsr #6
 801f4a0:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 801f4a4:	fb00 9003 	mla	r0, r0, r3, r9
 801f4a8:	b280      	uxth	r0, r0
 801f4aa:	f100 0901 	add.w	r9, r0, #1
 801f4ae:	eb09 2010 	add.w	r0, r9, r0, lsr #8
 801f4b2:	1200      	asrs	r0, r0, #8
 801f4b4:	f808 0c02 	strb.w	r0, [r8, #-2]
 801f4b8:	f818 0c01 	ldrb.w	r0, [r8, #-1]
 801f4bc:	fb10 f007 	smulbb	r0, r0, r7
 801f4c0:	fb02 0203 	mla	r2, r2, r3, r0
 801f4c4:	b292      	uxth	r2, r2
 801f4c6:	1c50      	adds	r0, r2, #1
 801f4c8:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 801f4cc:	4640      	mov	r0, r8
 801f4ce:	1212      	asrs	r2, r2, #8
 801f4d0:	f808 2c01 	strb.w	r2, [r8, #-1]
 801f4d4:	e7c0      	b.n	801f458 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x110>
 801f4d6:	4408      	add	r0, r1
 801f4d8:	4435      	add	r5, r6
 801f4da:	e7b9      	b.n	801f450 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x108>
 801f4dc:	4408      	add	r0, r1
 801f4de:	4435      	add	r5, r6
 801f4e0:	42a0      	cmp	r0, r4
 801f4e2:	d21b      	bcs.n	801f51c <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1d4>
 801f4e4:	eb00 070c 	add.w	r7, r0, ip
 801f4e8:	42b8      	cmp	r0, r7
 801f4ea:	d2f7      	bcs.n	801f4dc <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x194>
 801f4ec:	f835 3b02 	ldrh.w	r3, [r5], #2
 801f4f0:	3003      	adds	r0, #3
 801f4f2:	00da      	lsls	r2, r3, #3
 801f4f4:	b2d2      	uxtb	r2, r2
 801f4f6:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 801f4fa:	f800 2c03 	strb.w	r2, [r0, #-3]
 801f4fe:	10da      	asrs	r2, r3, #3
 801f500:	121b      	asrs	r3, r3, #8
 801f502:	f002 02fc 	and.w	r2, r2, #252	@ 0xfc
 801f506:	f003 03f8 	and.w	r3, r3, #248	@ 0xf8
 801f50a:	ea42 1292 	orr.w	r2, r2, r2, lsr #6
 801f50e:	ea43 1353 	orr.w	r3, r3, r3, lsr #5
 801f512:	f800 2c02 	strb.w	r2, [r0, #-2]
 801f516:	f800 3c01 	strb.w	r3, [r0, #-1]
 801f51a:	e7e5      	b.n	801f4e8 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1a0>
 801f51c:	4b02      	ldr	r3, [pc, #8]	@ (801f528 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1e0>)
 801f51e:	6818      	ldr	r0, [r3, #0]
 801f520:	6803      	ldr	r3, [r0, #0]
 801f522:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801f524:	4798      	blx	r3
 801f526:	e76a      	b.n	801f3fe <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xb6>
 801f528:	24028e20 	.word	0x24028e20
 801f52c:	24028e1a 	.word	0x24028e1a

0801f530 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>:
 801f530:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801f534:	b08a      	sub	sp, #40	@ 0x28
 801f536:	460d      	mov	r5, r1
 801f538:	4604      	mov	r4, r0
 801f53a:	461e      	mov	r6, r3
 801f53c:	6808      	ldr	r0, [r1, #0]
 801f53e:	ab06      	add	r3, sp, #24
 801f540:	6849      	ldr	r1, [r1, #4]
 801f542:	4f5d      	ldr	r7, [pc, #372]	@ (801f6b8 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x188>)
 801f544:	c303      	stmia	r3!, {r0, r1}
 801f546:	6810      	ldr	r0, [r2, #0]
 801f548:	ab08      	add	r3, sp, #32
 801f54a:	6851      	ldr	r1, [r2, #4]
 801f54c:	c303      	stmia	r3!, {r0, r1}
 801f54e:	a806      	add	r0, sp, #24
 801f550:	f7f7 fe8a 	bl	8017268 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801f554:	4629      	mov	r1, r5
 801f556:	a808      	add	r0, sp, #32
 801f558:	f7f7 feca 	bl	80172f0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801f55c:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 801f560:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	@ 0x22
 801f564:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 801f568:	6838      	ldr	r0, [r7, #0]
 801f56a:	fb11 2103 	smlabb	r1, r1, r3, r2
 801f56e:	f9bd 8024 	ldrsh.w	r8, [sp, #36]	@ 0x24
 801f572:	f9bd 5026 	ldrsh.w	r5, [sp, #38]	@ 0x26
 801f576:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 801f57a:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 801f57e:	440a      	add	r2, r1
 801f580:	f8ad 2020 	strh.w	r2, [sp, #32]
 801f584:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 801f588:	4413      	add	r3, r2
 801f58a:	f8ad 3022 	strh.w	r3, [sp, #34]	@ 0x22
 801f58e:	6803      	ldr	r3, [r0, #0]
 801f590:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801f592:	4798      	blx	r3
 801f594:	2eff      	cmp	r6, #255	@ 0xff
 801f596:	d119      	bne.n	801f5cc <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x9c>
 801f598:	f010 0f20 	tst.w	r0, #32
 801f59c:	6838      	ldr	r0, [r7, #0]
 801f59e:	d018      	beq.n	801f5d2 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xa2>
 801f5a0:	b2ad      	uxth	r5, r5
 801f5a2:	2700      	movs	r7, #0
 801f5a4:	6801      	ldr	r1, [r0, #0]
 801f5a6:	9501      	str	r5, [sp, #4]
 801f5a8:	fa1f f588 	uxth.w	r5, r8
 801f5ac:	f8bd 3022 	ldrh.w	r3, [sp, #34]	@ 0x22
 801f5b0:	9500      	str	r5, [sp, #0]
 801f5b2:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 801f5b6:	e9cd 6703 	strd	r6, r7, [sp, #12]
 801f5ba:	f8bd 601c 	ldrh.w	r6, [sp, #28]
 801f5be:	9602      	str	r6, [sp, #8]
 801f5c0:	6d0d      	ldr	r5, [r1, #80]	@ 0x50
 801f5c2:	4621      	mov	r1, r4
 801f5c4:	47a8      	blx	r5
 801f5c6:	b00a      	add	sp, #40	@ 0x28
 801f5c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801f5cc:	f010 0f40 	tst.w	r0, #64	@ 0x40
 801f5d0:	e7e4      	b.n	801f59c <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x6c>
 801f5d2:	6803      	ldr	r3, [r0, #0]
 801f5d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801f5d6:	4798      	blx	r3
 801f5d8:	4b38      	ldr	r3, [pc, #224]	@ (801f6bc <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x18c>)
 801f5da:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 801f5de:	f8b3 c000 	ldrh.w	ip, [r3]
 801f5e2:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	@ 0x22
 801f5e6:	fb0c f505 	mul.w	r5, ip, r5
 801f5ea:	f9bd e01c 	ldrsh.w	lr, [sp, #28]
 801f5ee:	fb0c 2303 	mla	r3, ip, r3, r2
 801f5f2:	ebac 0c08 	sub.w	ip, ip, r8
 801f5f6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801f5fa:	ebae 0e08 	sub.w	lr, lr, r8
 801f5fe:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801f602:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 801f606:	4418      	add	r0, r3
 801f608:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 801f60c:	eb08 0348 	add.w	r3, r8, r8, lsl #1
 801f610:	4405      	add	r5, r0
 801f612:	42a8      	cmp	r0, r5
 801f614:	d24a      	bcs.n	801f6ac <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x17c>
 801f616:	eb00 0803 	add.w	r8, r0, r3
 801f61a:	4540      	cmp	r0, r8
 801f61c:	d243      	bcs.n	801f6a6 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x176>
 801f61e:	78e2      	ldrb	r2, [r4, #3]
 801f620:	b15a      	cbz	r2, 801f63a <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x10a>
 801f622:	2aff      	cmp	r2, #255	@ 0xff
 801f624:	f894 9000 	ldrb.w	r9, [r4]
 801f628:	d10a      	bne.n	801f640 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x110>
 801f62a:	2eff      	cmp	r6, #255	@ 0xff
 801f62c:	d108      	bne.n	801f640 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x110>
 801f62e:	f880 9000 	strb.w	r9, [r0]
 801f632:	7862      	ldrb	r2, [r4, #1]
 801f634:	7042      	strb	r2, [r0, #1]
 801f636:	78a2      	ldrb	r2, [r4, #2]
 801f638:	7082      	strb	r2, [r0, #2]
 801f63a:	3003      	adds	r0, #3
 801f63c:	3404      	adds	r4, #4
 801f63e:	e7ec      	b.n	801f61a <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xea>
 801f640:	4372      	muls	r2, r6
 801f642:	1c51      	adds	r1, r2, #1
 801f644:	eb01 2112 	add.w	r1, r1, r2, lsr #8
 801f648:	1209      	asrs	r1, r1, #8
 801f64a:	fa1f fa81 	uxth.w	sl, r1
 801f64e:	43c9      	mvns	r1, r1
 801f650:	fb19 f90a 	smulbb	r9, r9, sl
 801f654:	b2ca      	uxtb	r2, r1
 801f656:	7801      	ldrb	r1, [r0, #0]
 801f658:	fb01 9902 	mla	r9, r1, r2, r9
 801f65c:	fa1f f989 	uxth.w	r9, r9
 801f660:	f109 0101 	add.w	r1, r9, #1
 801f664:	eb01 2919 	add.w	r9, r1, r9, lsr #8
 801f668:	ea4f 2929 	mov.w	r9, r9, asr #8
 801f66c:	f880 9000 	strb.w	r9, [r0]
 801f670:	f890 9001 	ldrb.w	r9, [r0, #1]
 801f674:	7861      	ldrb	r1, [r4, #1]
 801f676:	fb19 f902 	smulbb	r9, r9, r2
 801f67a:	fb01 910a 	mla	r1, r1, sl, r9
 801f67e:	b289      	uxth	r1, r1
 801f680:	f101 0901 	add.w	r9, r1, #1
 801f684:	eb09 2111 	add.w	r1, r9, r1, lsr #8
 801f688:	1209      	asrs	r1, r1, #8
 801f68a:	7041      	strb	r1, [r0, #1]
 801f68c:	7881      	ldrb	r1, [r0, #2]
 801f68e:	f894 9002 	ldrb.w	r9, [r4, #2]
 801f692:	fb11 f202 	smulbb	r2, r1, r2
 801f696:	fb09 220a 	mla	r2, r9, sl, r2
 801f69a:	b292      	uxth	r2, r2
 801f69c:	1c51      	adds	r1, r2, #1
 801f69e:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 801f6a2:	1212      	asrs	r2, r2, #8
 801f6a4:	e7c8      	b.n	801f638 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x108>
 801f6a6:	4460      	add	r0, ip
 801f6a8:	4474      	add	r4, lr
 801f6aa:	e7b2      	b.n	801f612 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xe2>
 801f6ac:	6838      	ldr	r0, [r7, #0]
 801f6ae:	6803      	ldr	r3, [r0, #0]
 801f6b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801f6b2:	4798      	blx	r3
 801f6b4:	e787      	b.n	801f5c6 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x96>
 801f6b6:	bf00      	nop
 801f6b8:	24028e20 	.word	0x24028e20
 801f6bc:	24028e1a 	.word	0x24028e1a

0801f6c0 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb>:
 801f6c0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801f6c4:	f89d 5034 	ldrb.w	r5, [sp, #52]	@ 0x34
 801f6c8:	4607      	mov	r7, r0
 801f6ca:	460c      	mov	r4, r1
 801f6cc:	4692      	mov	sl, r2
 801f6ce:	4699      	mov	r9, r3
 801f6d0:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801f6d2:	b335      	cbz	r5, 801f722 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x62>
 801f6d4:	4608      	mov	r0, r1
 801f6d6:	f7fb fd93 	bl	801b200 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801f6da:	4680      	mov	r8, r0
 801f6dc:	4620      	mov	r0, r4
 801f6de:	f7fb fdc3 	bl	801b268 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801f6e2:	f8ad 000e 	strh.w	r0, [sp, #14]
 801f6e6:	4620      	mov	r0, r4
 801f6e8:	f8ad a008 	strh.w	sl, [sp, #8]
 801f6ec:	f8ad 900a 	strh.w	r9, [sp, #10]
 801f6f0:	f8ad 800c 	strh.w	r8, [sp, #12]
 801f6f4:	f7fb fefa 	bl	801b4ec <_ZNK8touchgfx6Bitmap9getFormatEv>
 801f6f8:	2810      	cmp	r0, #16
 801f6fa:	d812      	bhi.n	801f722 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x62>
 801f6fc:	e8df f000 	tbb	[pc, r0]
 801f700:	11092d24 	.word	0x11092d24
 801f704:	11111111 	.word	0x11111111
 801f708:	14111111 	.word	0x14111111
 801f70c:	4c111111 	.word	0x4c111111
 801f710:	3c          	.byte	0x3c
 801f711:	00          	.byte	0x00
 801f712:	4620      	mov	r0, r4
 801f714:	f7fb fe66 	bl	801b3e4 <_ZNK8touchgfx6Bitmap7getDataEv>
 801f718:	462b      	mov	r3, r5
 801f71a:	4632      	mov	r2, r6
 801f71c:	a902      	add	r1, sp, #8
 801f71e:	f7ff ff07 	bl	801f530 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 801f722:	b004      	add	sp, #16
 801f724:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801f728:	4620      	mov	r0, r4
 801f72a:	f7fb fe5b 	bl	801b3e4 <_ZNK8touchgfx6Bitmap7getDataEv>
 801f72e:	4680      	mov	r8, r0
 801f730:	4620      	mov	r0, r4
 801f732:	f7fb fe87 	bl	801b444 <_ZNK8touchgfx6Bitmap12getExtraDataEv>
 801f736:	ab02      	add	r3, sp, #8
 801f738:	4602      	mov	r2, r0
 801f73a:	4641      	mov	r1, r8
 801f73c:	4638      	mov	r0, r7
 801f73e:	e9cd 6500 	strd	r6, r5, [sp]
 801f742:	f7ff fdbf 	bl	801f2c4 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>
 801f746:	e7ec      	b.n	801f722 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x62>
 801f748:	4620      	mov	r0, r4
 801f74a:	f7fb fe4b 	bl	801b3e4 <_ZNK8touchgfx6Bitmap7getDataEv>
 801f74e:	462b      	mov	r3, r5
 801f750:	4632      	mov	r2, r6
 801f752:	a902      	add	r1, sp, #8
 801f754:	f7ff fdf8 	bl	801f348 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h>
 801f758:	e7e3      	b.n	801f722 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x62>
 801f75a:	683b      	ldr	r3, [r7, #0]
 801f75c:	4620      	mov	r0, r4
 801f75e:	f8d3 800c 	ldr.w	r8, [r3, #12]
 801f762:	f7fb fe3f 	bl	801b3e4 <_ZNK8touchgfx6Bitmap7getDataEv>
 801f766:	2300      	movs	r3, #0
 801f768:	4601      	mov	r1, r0
 801f76a:	aa02      	add	r2, sp, #8
 801f76c:	4638      	mov	r0, r7
 801f76e:	e9cd 5300 	strd	r5, r3, [sp]
 801f772:	4633      	mov	r3, r6
 801f774:	47c0      	blx	r8
 801f776:	e7d4      	b.n	801f722 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x62>
 801f778:	6ebf      	ldr	r7, [r7, #104]	@ 0x68
 801f77a:	2f00      	cmp	r7, #0
 801f77c:	d0d1      	beq.n	801f722 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x62>
 801f77e:	683b      	ldr	r3, [r7, #0]
 801f780:	f8d3 8008 	ldr.w	r8, [r3, #8]
 801f784:	4620      	mov	r0, r4
 801f786:	f7fb fe2d 	bl	801b3e4 <_ZNK8touchgfx6Bitmap7getDataEv>
 801f78a:	9500      	str	r5, [sp, #0]
 801f78c:	4601      	mov	r1, r0
 801f78e:	4633      	mov	r3, r6
 801f790:	aa02      	add	r2, sp, #8
 801f792:	4638      	mov	r0, r7
 801f794:	47c0      	blx	r8
 801f796:	e7c4      	b.n	801f722 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x62>
 801f798:	6ebf      	ldr	r7, [r7, #104]	@ 0x68
 801f79a:	2f00      	cmp	r7, #0
 801f79c:	d0c1      	beq.n	801f722 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x62>
 801f79e:	683b      	ldr	r3, [r7, #0]
 801f7a0:	f8d3 800c 	ldr.w	r8, [r3, #12]
 801f7a4:	e7ee      	b.n	801f784 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xc4>

0801f7a6 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb>:
 801f7a6:	b4f0      	push	{r4, r5, r6, r7}
 801f7a8:	4616      	mov	r6, r2
 801f7aa:	461c      	mov	r4, r3
 801f7ac:	460d      	mov	r5, r1
 801f7ae:	9a04      	ldr	r2, [sp, #16]
 801f7b0:	2e01      	cmp	r6, #1
 801f7b2:	f89d 3014 	ldrb.w	r3, [sp, #20]
 801f7b6:	d00e      	beq.n	801f7d6 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x30>
 801f7b8:	d303      	bcc.n	801f7c2 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x1c>
 801f7ba:	2e02      	cmp	r6, #2
 801f7bc:	d006      	beq.n	801f7cc <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x26>
 801f7be:	bcf0      	pop	{r4, r5, r6, r7}
 801f7c0:	4770      	bx	lr
 801f7c2:	4621      	mov	r1, r4
 801f7c4:	4628      	mov	r0, r5
 801f7c6:	bcf0      	pop	{r4, r5, r6, r7}
 801f7c8:	f7ff bdbe 	b.w	801f348 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h>
 801f7cc:	4621      	mov	r1, r4
 801f7ce:	4628      	mov	r0, r5
 801f7d0:	bcf0      	pop	{r4, r5, r6, r7}
 801f7d2:	f7ff bead 	b.w	801f530 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 801f7d6:	6805      	ldr	r5, [r0, #0]
 801f7d8:	2600      	movs	r6, #0
 801f7da:	e9cd 3604 	strd	r3, r6, [sp, #16]
 801f7de:	68ed      	ldr	r5, [r5, #12]
 801f7e0:	4613      	mov	r3, r2
 801f7e2:	4622      	mov	r2, r4
 801f7e4:	46ac      	mov	ip, r5
 801f7e6:	bcf0      	pop	{r4, r5, r6, r7}
 801f7e8:	4760      	bx	ip
	...

0801f7ec <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE>:
 801f7ec:	b160      	cbz	r0, 801f808 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x1c>
 801f7ee:	2903      	cmp	r1, #3
 801f7f0:	d818      	bhi.n	801f824 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x38>
 801f7f2:	e8df f001 	tbb	[pc, r1]
 801f7f6:	1902      	.short	0x1902
 801f7f8:	1b06      	.short	0x1b06
 801f7fa:	4b0e      	ldr	r3, [pc, #56]	@ (801f834 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x48>)
 801f7fc:	8818      	ldrh	r0, [r3, #0]
 801f7fe:	4240      	negs	r0, r0
 801f800:	4770      	bx	lr
 801f802:	4b0c      	ldr	r3, [pc, #48]	@ (801f834 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x48>)
 801f804:	8818      	ldrh	r0, [r3, #0]
 801f806:	4770      	bx	lr
 801f808:	2903      	cmp	r1, #3
 801f80a:	d80b      	bhi.n	801f824 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x38>
 801f80c:	a301      	add	r3, pc, #4	@ (adr r3, 801f814 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x28>)
 801f80e:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
 801f812:	bf00      	nop
 801f814:	0801f829 	.word	0x0801f829
 801f818:	0801f803 	.word	0x0801f803
 801f81c:	0801f82d 	.word	0x0801f82d
 801f820:	0801f7fb 	.word	0x0801f7fb
 801f824:	2000      	movs	r0, #0
 801f826:	4770      	bx	lr
 801f828:	2001      	movs	r0, #1
 801f82a:	4770      	bx	lr
 801f82c:	f04f 30ff 	mov.w	r0, #4294967295
 801f830:	4770      	bx	lr
 801f832:	bf00      	nop
 801f834:	24028e1a 	.word	0x24028e1a

0801f838 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE>:
 801f838:	b160      	cbz	r0, 801f854 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x1c>
 801f83a:	2903      	cmp	r1, #3
 801f83c:	d818      	bhi.n	801f870 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x38>
 801f83e:	e8df f001 	tbb	[pc, r1]
 801f842:	0219      	.short	0x0219
 801f844:	051b      	.short	0x051b
 801f846:	4b0e      	ldr	r3, [pc, #56]	@ (801f880 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x48>)
 801f848:	8818      	ldrh	r0, [r3, #0]
 801f84a:	4770      	bx	lr
 801f84c:	4b0c      	ldr	r3, [pc, #48]	@ (801f880 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x48>)
 801f84e:	8818      	ldrh	r0, [r3, #0]
 801f850:	4240      	negs	r0, r0
 801f852:	4770      	bx	lr
 801f854:	2903      	cmp	r1, #3
 801f856:	d80b      	bhi.n	801f870 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x38>
 801f858:	a301      	add	r3, pc, #4	@ (adr r3, 801f860 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x28>)
 801f85a:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
 801f85e:	bf00      	nop
 801f860:	0801f847 	.word	0x0801f847
 801f864:	0801f879 	.word	0x0801f879
 801f868:	0801f84d 	.word	0x0801f84d
 801f86c:	0801f875 	.word	0x0801f875
 801f870:	2000      	movs	r0, #0
 801f872:	4770      	bx	lr
 801f874:	2001      	movs	r0, #1
 801f876:	4770      	bx	lr
 801f878:	f04f 30ff 	mov.w	r0, #4294967295
 801f87c:	4770      	bx	lr
 801f87e:	bf00      	nop
 801f880:	24028e1a 	.word	0x24028e1a

0801f884 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE>:
 801f884:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f888:	b097      	sub	sp, #92	@ 0x5c
 801f88a:	910b      	str	r1, [sp, #44]	@ 0x2c
 801f88c:	a912      	add	r1, sp, #72	@ 0x48
 801f88e:	f9bd 6080 	ldrsh.w	r6, [sp, #128]	@ 0x80
 801f892:	f8bd 7088 	ldrh.w	r7, [sp, #136]	@ 0x88
 801f896:	f8bd 408c 	ldrh.w	r4, [sp, #140]	@ 0x8c
 801f89a:	f89d 80a4 	ldrb.w	r8, [sp, #164]	@ 0xa4
 801f89e:	f89d 90ac 	ldrb.w	r9, [sp, #172]	@ 0xac
 801f8a2:	e881 000c 	stmia.w	r1, {r2, r3}
 801f8a6:	f9bd 3084 	ldrsh.w	r3, [sp, #132]	@ 0x84
 801f8aa:	930a      	str	r3, [sp, #40]	@ 0x28
 801f8ac:	f89d 309c 	ldrb.w	r3, [sp, #156]	@ 0x9c
 801f8b0:	e9dd 2124 	ldrd	r2, r1, [sp, #144]	@ 0x90
 801f8b4:	9311      	str	r3, [sp, #68]	@ 0x44
 801f8b6:	f89d 30a8 	ldrb.w	r3, [sp, #168]	@ 0xa8
 801f8ba:	798d      	ldrb	r5, [r1, #6]
 801f8bc:	930c      	str	r3, [sp, #48]	@ 0x30
 801f8be:	7b4b      	ldrb	r3, [r1, #13]
 801f8c0:	0158      	lsls	r0, r3, #5
 801f8c2:	f400 7080 	and.w	r0, r0, #256	@ 0x100
 801f8c6:	4328      	orrs	r0, r5
 801f8c8:	9009      	str	r0, [sp, #36]	@ 0x24
 801f8ca:	f000 817c 	beq.w	801fbc6 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 801f8ce:	011b      	lsls	r3, r3, #4
 801f8d0:	79c8      	ldrb	r0, [r1, #7]
 801f8d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801f8d6:	4303      	orrs	r3, r0
 801f8d8:	930e      	str	r3, [sp, #56]	@ 0x38
 801f8da:	f000 8174 	beq.w	801fbc6 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 801f8de:	f991 3009 	ldrsb.w	r3, [r1, #9]
 801f8e2:	b29b      	uxth	r3, r3
 801f8e4:	2f00      	cmp	r7, #0
 801f8e6:	f000 8116 	beq.w	801fb16 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x292>
 801f8ea:	1aff      	subs	r7, r7, r3
 801f8ec:	b2bf      	uxth	r7, r7
 801f8ee:	043b      	lsls	r3, r7, #16
 801f8f0:	d502      	bpl.n	801f8f8 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x74>
 801f8f2:	1bf6      	subs	r6, r6, r7
 801f8f4:	2700      	movs	r7, #0
 801f8f6:	b236      	sxth	r6, r6
 801f8f8:	f9b2 1000 	ldrsh.w	r1, [r2]
 801f8fc:	a812      	add	r0, sp, #72	@ 0x48
 801f8fe:	f8b2 a002 	ldrh.w	sl, [r2, #2]
 801f902:	428e      	cmp	r6, r1
 801f904:	b28b      	uxth	r3, r1
 801f906:	f8bd 5024 	ldrh.w	r5, [sp, #36]	@ 0x24
 801f90a:	bfbf      	itttt	lt
 801f90c:	18ff      	addlt	r7, r7, r3
 801f90e:	1bbe      	sublt	r6, r7, r6
 801f910:	b2b7      	uxthlt	r7, r6
 801f912:	460e      	movlt	r6, r1
 801f914:	8891      	ldrh	r1, [r2, #4]
 801f916:	440b      	add	r3, r1
 801f918:	4631      	mov	r1, r6
 801f91a:	b21b      	sxth	r3, r3
 801f91c:	9310      	str	r3, [sp, #64]	@ 0x40
 801f91e:	88d3      	ldrh	r3, [r2, #6]
 801f920:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801f922:	449a      	add	sl, r3
 801f924:	fa0f f38a 	sxth.w	r3, sl
 801f928:	f8bd a038 	ldrh.w	sl, [sp, #56]	@ 0x38
 801f92c:	930f      	str	r3, [sp, #60]	@ 0x3c
 801f92e:	4bb5      	ldr	r3, [pc, #724]	@ (801fc04 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x380>)
 801f930:	f893 b000 	ldrb.w	fp, [r3]
 801f934:	f10b 3cff 	add.w	ip, fp, #4294967295
 801f938:	f1dc 0300 	rsbs	r3, ip, #0
 801f93c:	eb43 030c 	adc.w	r3, r3, ip
 801f940:	930d      	str	r3, [sp, #52]	@ 0x34
 801f942:	464b      	mov	r3, r9
 801f944:	f7f7 fb05 	bl	8016f52 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>
 801f948:	4631      	mov	r1, r6
 801f94a:	f8ad 0054 	strh.w	r0, [sp, #84]	@ 0x54
 801f94e:	464b      	mov	r3, r9
 801f950:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801f952:	a812      	add	r0, sp, #72	@ 0x48
 801f954:	f7f7 fb1a 	bl	8016f8c <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>
 801f958:	a916      	add	r1, sp, #88	@ 0x58
 801f95a:	f821 0d02 	strh.w	r0, [r1, #-2]!
 801f95e:	a815      	add	r0, sp, #84	@ 0x54
 801f960:	f7f7 fc40 	bl	80171e4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>
 801f964:	f1b9 0f00 	cmp.w	r9, #0
 801f968:	f040 80d8 	bne.w	801fb1c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x298>
 801f96c:	f1bb 0f01 	cmp.w	fp, #1
 801f970:	f040 80dc 	bne.w	801fb2c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2a8>
 801f974:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801f976:	b153      	cbz	r3, 801f98e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x10a>
 801f978:	2508      	movs	r5, #8
 801f97a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801f97c:	fb95 f3f8 	sdiv	r3, r5, r8
 801f980:	1e5d      	subs	r5, r3, #1
 801f982:	4415      	add	r5, r2
 801f984:	fb95 f5f3 	sdiv	r5, r5, r3
 801f988:	fb15 f503 	smulbb	r5, r5, r3
 801f98c:	b2ad      	uxth	r5, r5
 801f98e:	b907      	cbnz	r7, 801f992 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x10e>
 801f990:	b16c      	cbz	r4, 801f9ae <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x12a>
 801f992:	fb04 7305 	mla	r3, r4, r5, r7
 801f996:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 801f998:	ebaa 0a04 	sub.w	sl, sl, r4
 801f99c:	fb08 f303 	mul.w	r3, r8, r3
 801f9a0:	fa1f fa8a 	uxth.w	sl, sl
 801f9a4:	eb02 02d3 	add.w	r2, r2, r3, lsr #3
 801f9a8:	f003 0407 	and.w	r4, r3, #7
 801f9ac:	9226      	str	r2, [sp, #152]	@ 0x98
 801f9ae:	4649      	mov	r1, r9
 801f9b0:	980d      	ldr	r0, [sp, #52]	@ 0x34
 801f9b2:	f7ff ff1b 	bl	801f7ec <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE>
 801f9b6:	4683      	mov	fp, r0
 801f9b8:	980d      	ldr	r0, [sp, #52]	@ 0x34
 801f9ba:	f7ff ff3d 	bl	801f838 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE>
 801f9be:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801f9c0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801f9c2:	4681      	mov	r9, r0
 801f9c4:	1a9b      	subs	r3, r3, r2
 801f9c6:	459a      	cmp	sl, r3
 801f9c8:	bfa8      	it	ge
 801f9ca:	469a      	movge	sl, r3
 801f9cc:	f1ba 0f00 	cmp.w	sl, #0
 801f9d0:	f340 80f9 	ble.w	801fbc6 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 801f9d4:	1bf6      	subs	r6, r6, r7
 801f9d6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801f9d8:	1b9e      	subs	r6, r3, r6
 801f9da:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801f9dc:	429e      	cmp	r6, r3
 801f9de:	bfd4      	ite	le
 801f9e0:	ebc7 0706 	rsble	r7, r7, r6
 801f9e4:	ebc7 0703 	rsbgt	r7, r7, r3
 801f9e8:	2f00      	cmp	r7, #0
 801f9ea:	f340 80ec 	ble.w	801fbc6 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 801f9ee:	1bed      	subs	r5, r5, r7
 801f9f0:	fb08 f305 	mul.w	r3, r8, r5
 801f9f4:	930d      	str	r3, [sp, #52]	@ 0x34
 801f9f6:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801f9f8:	f3c3 4307 	ubfx	r3, r3, #16, #8
 801f9fc:	930e      	str	r3, [sp, #56]	@ 0x38
 801f9fe:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801fa00:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801fa04:	930f      	str	r3, [sp, #60]	@ 0x3c
 801fa06:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801fa08:	b2db      	uxtb	r3, r3
 801fa0a:	9310      	str	r3, [sp, #64]	@ 0x40
 801fa0c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801fa0e:	2b00      	cmp	r3, #0
 801fa10:	f040 80de 	bne.w	801fbd0 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x34c>
 801fa14:	4b7c      	ldr	r3, [pc, #496]	@ (801fc08 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x384>)
 801fa16:	6818      	ldr	r0, [r3, #0]
 801fa18:	6803      	ldr	r3, [r0, #0]
 801fa1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801fa1c:	4798      	blx	r3
 801fa1e:	2301      	movs	r3, #1
 801fa20:	4a7a      	ldr	r2, [pc, #488]	@ (801fc0c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x388>)
 801fa22:	eb0b 064b 	add.w	r6, fp, fp, lsl #1
 801fa26:	fb07 9b1b 	mls	fp, r7, fp, r9
 801fa2a:	fa03 f308 	lsl.w	r3, r3, r8
 801fa2e:	8811      	ldrh	r1, [r2, #0]
 801fa30:	f9bd 2054 	ldrsh.w	r2, [sp, #84]	@ 0x54
 801fa34:	eb0b 0b4b 	add.w	fp, fp, fp, lsl #1
 801fa38:	3b01      	subs	r3, #1
 801fa3a:	fb06 bb07 	mla	fp, r6, r7, fp
 801fa3e:	b2db      	uxtb	r3, r3
 801fa40:	930a      	str	r3, [sp, #40]	@ 0x28
 801fa42:	f9bd 3056 	ldrsh.w	r3, [sp, #86]	@ 0x56
 801fa46:	fb01 2303 	mla	r3, r1, r3, r2
 801fa4a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801fa4e:	18c3      	adds	r3, r0, r3
 801fa50:	9309      	str	r3, [sp, #36]	@ 0x24
 801fa52:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 801fa54:	781a      	ldrb	r2, [r3, #0]
 801fa56:	4122      	asrs	r2, r4
 801fa58:	b2d2      	uxtb	r2, r2
 801fa5a:	f11a 3aff 	adds.w	sl, sl, #4294967295
 801fa5e:	f0c0 80d7 	bcc.w	801fc10 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x38c>
 801fa62:	46be      	mov	lr, r7
 801fa64:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801fa66:	f11e 3eff 	adds.w	lr, lr, #4294967295
 801fa6a:	f0c0 80ba 	bcc.w	801fbe2 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x35e>
 801fa6e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801fa70:	4013      	ands	r3, r2
 801fa72:	d041      	beq.n	801faf8 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x274>
 801fa74:	20ff      	movs	r0, #255	@ 0xff
 801fa76:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 801fa78:	fb90 f5f5 	sdiv	r5, r0, r5
 801fa7c:	436b      	muls	r3, r5
 801fa7e:	2bfe      	cmp	r3, #254	@ 0xfe
 801fa80:	dd03      	ble.n	801fa8a <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x206>
 801fa82:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 801fa84:	4285      	cmp	r5, r0
 801fa86:	f000 80a5 	beq.w	801fbd4 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x350>
 801fa8a:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 801fa8c:	9810      	ldr	r0, [sp, #64]	@ 0x40
 801fa8e:	fb15 f303 	smulbb	r3, r5, r3
 801fa92:	b29b      	uxth	r3, r3
 801fa94:	1c5d      	adds	r5, r3, #1
 801fa96:	eb05 2313 	add.w	r3, r5, r3, lsr #8
 801fa9a:	780d      	ldrb	r5, [r1, #0]
 801fa9c:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801faa0:	fa1f fc83 	uxth.w	ip, r3
 801faa4:	43db      	mvns	r3, r3
 801faa6:	fb10 f90c 	smulbb	r9, r0, ip
 801faaa:	b2db      	uxtb	r3, r3
 801faac:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 801faae:	fb05 9503 	mla	r5, r5, r3, r9
 801fab2:	b2ad      	uxth	r5, r5
 801fab4:	f105 0901 	add.w	r9, r5, #1
 801fab8:	eb09 2515 	add.w	r5, r9, r5, lsr #8
 801fabc:	fb10 f90c 	smulbb	r9, r0, ip
 801fac0:	980e      	ldr	r0, [sp, #56]	@ 0x38
 801fac2:	122d      	asrs	r5, r5, #8
 801fac4:	fb10 fc0c 	smulbb	ip, r0, ip
 801fac8:	700d      	strb	r5, [r1, #0]
 801faca:	784d      	ldrb	r5, [r1, #1]
 801facc:	fb05 9503 	mla	r5, r5, r3, r9
 801fad0:	b2ad      	uxth	r5, r5
 801fad2:	f105 0901 	add.w	r9, r5, #1
 801fad6:	eb09 2515 	add.w	r5, r9, r5, lsr #8
 801fada:	122d      	asrs	r5, r5, #8
 801fadc:	704d      	strb	r5, [r1, #1]
 801fade:	788d      	ldrb	r5, [r1, #2]
 801fae0:	fb05 cc03 	mla	ip, r5, r3, ip
 801fae4:	fa1f fc8c 	uxth.w	ip, ip
 801fae8:	f10c 0301 	add.w	r3, ip, #1
 801faec:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 801faf0:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801faf4:	f881 c002 	strb.w	ip, [r1, #2]
 801faf8:	4444      	add	r4, r8
 801fafa:	4431      	add	r1, r6
 801fafc:	b2a4      	uxth	r4, r4
 801fafe:	2c07      	cmp	r4, #7
 801fb00:	bf89      	itett	hi
 801fb02:	9b26      	ldrhi	r3, [sp, #152]	@ 0x98
 801fb04:	fa42 f208 	asrls.w	r2, r2, r8
 801fb08:	2400      	movhi	r4, #0
 801fb0a:	785a      	ldrbhi	r2, [r3, #1]
 801fb0c:	bf8a      	itet	hi
 801fb0e:	3301      	addhi	r3, #1
 801fb10:	b2d2      	uxtbls	r2, r2
 801fb12:	9326      	strhi	r3, [sp, #152]	@ 0x98
 801fb14:	e7a7      	b.n	801fa66 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1e2>
 801fb16:	441e      	add	r6, r3
 801fb18:	b236      	sxth	r6, r6
 801fb1a:	e6ed      	b.n	801f8f8 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x74>
 801fb1c:	f1b9 0f01 	cmp.w	r9, #1
 801fb20:	f47f af28 	bne.w	801f974 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801fb24:	f1bb 0f01 	cmp.w	fp, #1
 801fb28:	f47f af24 	bne.w	801f974 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801fb2c:	f8df b0d8 	ldr.w	fp, [pc, #216]	@ 801fc08 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x384>
 801fb30:	f8db 0000 	ldr.w	r0, [fp]
 801fb34:	6803      	ldr	r3, [r0, #0]
 801fb36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801fb38:	4798      	blx	r3
 801fb3a:	f410 7380 	ands.w	r3, r0, #256	@ 0x100
 801fb3e:	465a      	mov	r2, fp
 801fb40:	d006      	beq.n	801fb50 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2cc>
 801fb42:	f1b8 0f04 	cmp.w	r8, #4
 801fb46:	d141      	bne.n	801fbcc <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x348>
 801fb48:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801fb4a:	3300      	adds	r3, #0
 801fb4c:	bf18      	it	ne
 801fb4e:	2301      	movne	r3, #1
 801fb50:	0580      	lsls	r0, r0, #22
 801fb52:	d566      	bpl.n	801fc22 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x39e>
 801fb54:	f1b8 0f08 	cmp.w	r8, #8
 801fb58:	d163      	bne.n	801fc22 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x39e>
 801fb5a:	2b00      	cmp	r3, #0
 801fb5c:	bf0c      	ite	eq
 801fb5e:	f44f 7100 	moveq.w	r1, #512	@ 0x200
 801fb62:	f44f 7180 	movne.w	r1, #256	@ 0x100
 801fb66:	2f00      	cmp	r7, #0
 801fb68:	f47f af04 	bne.w	801f974 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801fb6c:	2c00      	cmp	r4, #0
 801fb6e:	f47f af01 	bne.w	801f974 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801fb72:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801fb74:	9810      	ldr	r0, [sp, #64]	@ 0x40
 801fb76:	18f3      	adds	r3, r6, r3
 801fb78:	4283      	cmp	r3, r0
 801fb7a:	f73f aefb 	bgt.w	801f974 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801fb7e:	980a      	ldr	r0, [sp, #40]	@ 0x28
 801fb80:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801fb82:	4403      	add	r3, r0
 801fb84:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 801fb86:	4283      	cmp	r3, r0
 801fb88:	f73f aef4 	bgt.w	801f974 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801fb8c:	f1b8 0f08 	cmp.w	r8, #8
 801fb90:	6810      	ldr	r0, [r2, #0]
 801fb92:	f04f 0600 	mov.w	r6, #0
 801fb96:	f8bd 3056 	ldrh.w	r3, [sp, #86]	@ 0x56
 801fb9a:	bf18      	it	ne
 801fb9c:	3501      	addne	r5, #1
 801fb9e:	6804      	ldr	r4, [r0, #0]
 801fba0:	f8bd 2054 	ldrh.w	r2, [sp, #84]	@ 0x54
 801fba4:	bf18      	it	ne
 801fba6:	f025 0501 	bicne.w	r5, r5, #1
 801fbaa:	e9cd 1605 	strd	r1, r6, [sp, #20]
 801fbae:	990c      	ldr	r1, [sp, #48]	@ 0x30
 801fbb0:	bf18      	it	ne
 801fbb2:	b2ad      	uxthne	r5, r5
 801fbb4:	9104      	str	r1, [sp, #16]
 801fbb6:	9928      	ldr	r1, [sp, #160]	@ 0xa0
 801fbb8:	e9cd 5a00 	strd	r5, sl, [sp]
 801fbbc:	e9cd 5102 	strd	r5, r1, [sp, #8]
 801fbc0:	9926      	ldr	r1, [sp, #152]	@ 0x98
 801fbc2:	6d64      	ldr	r4, [r4, #84]	@ 0x54
 801fbc4:	47a0      	blx	r4
 801fbc6:	b017      	add	sp, #92	@ 0x5c
 801fbc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801fbcc:	2300      	movs	r3, #0
 801fbce:	e7bf      	b.n	801fb50 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2cc>
 801fbd0:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 801fbd2:	e724      	b.n	801fa1e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x19a>
 801fbd4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801fbd6:	700b      	strb	r3, [r1, #0]
 801fbd8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801fbda:	704b      	strb	r3, [r1, #1]
 801fbdc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801fbde:	708b      	strb	r3, [r1, #2]
 801fbe0:	e78a      	b.n	801faf8 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x274>
 801fbe2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801fbe4:	b153      	cbz	r3, 801fbfc <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x378>
 801fbe6:	441c      	add	r4, r3
 801fbe8:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 801fbea:	b2a4      	uxth	r4, r4
 801fbec:	eb03 03d4 	add.w	r3, r3, r4, lsr #3
 801fbf0:	f004 0407 	and.w	r4, r4, #7
 801fbf4:	781a      	ldrb	r2, [r3, #0]
 801fbf6:	9326      	str	r3, [sp, #152]	@ 0x98
 801fbf8:	4122      	asrs	r2, r4
 801fbfa:	b2d2      	uxtb	r2, r2
 801fbfc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801fbfe:	445b      	add	r3, fp
 801fc00:	9309      	str	r3, [sp, #36]	@ 0x24
 801fc02:	e72a      	b.n	801fa5a <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1d6>
 801fc04:	24028e18 	.word	0x24028e18
 801fc08:	24028e20 	.word	0x24028e20
 801fc0c:	24028e1a 	.word	0x24028e1a
 801fc10:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801fc12:	2b00      	cmp	r3, #0
 801fc14:	d1d7      	bne.n	801fbc6 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 801fc16:	4b06      	ldr	r3, [pc, #24]	@ (801fc30 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ac>)
 801fc18:	6818      	ldr	r0, [r3, #0]
 801fc1a:	6803      	ldr	r3, [r0, #0]
 801fc1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801fc1e:	4798      	blx	r3
 801fc20:	e7d1      	b.n	801fbc6 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 801fc22:	2b00      	cmp	r3, #0
 801fc24:	f43f aea6 	beq.w	801f974 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801fc28:	f44f 7180 	mov.w	r1, #256	@ 0x100
 801fc2c:	e79b      	b.n	801fb66 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2e2>
 801fc2e:	bf00      	nop
 801fc30:	24028e20 	.word	0x24028e20

0801fc34 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>:
 801fc34:	b538      	push	{r3, r4, r5, lr}
 801fc36:	4c15      	ldr	r4, [pc, #84]	@ (801fc8c <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x58>)
 801fc38:	4605      	mov	r5, r0
 801fc3a:	7823      	ldrb	r3, [r4, #0]
 801fc3c:	f3bf 8f5b 	dmb	ish
 801fc40:	07da      	lsls	r2, r3, #31
 801fc42:	d40b      	bmi.n	801fc5c <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 801fc44:	4620      	mov	r0, r4
 801fc46:	f006 ffa4 	bl	8026b92 <__cxa_guard_acquire>
 801fc4a:	b138      	cbz	r0, 801fc5c <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 801fc4c:	4620      	mov	r0, r4
 801fc4e:	f006 ffac 	bl	8026baa <__cxa_guard_release>
 801fc52:	4a0f      	ldr	r2, [pc, #60]	@ (801fc90 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 801fc54:	490f      	ldr	r1, [pc, #60]	@ (801fc94 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x60>)
 801fc56:	4810      	ldr	r0, [pc, #64]	@ (801fc98 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 801fc58:	f006 ff94 	bl	8026b84 <__aeabi_atexit>
 801fc5c:	4c0f      	ldr	r4, [pc, #60]	@ (801fc9c <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x68>)
 801fc5e:	7823      	ldrb	r3, [r4, #0]
 801fc60:	f3bf 8f5b 	dmb	ish
 801fc64:	07db      	lsls	r3, r3, #31
 801fc66:	d40b      	bmi.n	801fc80 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 801fc68:	4620      	mov	r0, r4
 801fc6a:	f006 ff92 	bl	8026b92 <__cxa_guard_acquire>
 801fc6e:	b138      	cbz	r0, 801fc80 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 801fc70:	4620      	mov	r0, r4
 801fc72:	f006 ff9a 	bl	8026baa <__cxa_guard_release>
 801fc76:	4a06      	ldr	r2, [pc, #24]	@ (801fc90 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 801fc78:	4909      	ldr	r1, [pc, #36]	@ (801fca0 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x6c>)
 801fc7a:	480a      	ldr	r0, [pc, #40]	@ (801fca4 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 801fc7c:	f006 ff82 	bl	8026b84 <__aeabi_atexit>
 801fc80:	4b05      	ldr	r3, [pc, #20]	@ (801fc98 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 801fc82:	616b      	str	r3, [r5, #20]
 801fc84:	4b07      	ldr	r3, [pc, #28]	@ (801fca4 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 801fc86:	61ab      	str	r3, [r5, #24]
 801fc88:	bd38      	pop	{r3, r4, r5, pc}
 801fc8a:	bf00      	nop
 801fc8c:	24028f04 	.word	0x24028f04
 801fc90:	24000000 	.word	0x24000000
 801fc94:	0801cf25 	.word	0x0801cf25
 801fc98:	240000c8 	.word	0x240000c8
 801fc9c:	24028f08 	.word	0x24028f08
 801fca0:	0801cf23 	.word	0x0801cf23
 801fca4:	240000cc 	.word	0x240000cc

0801fca8 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>:
 801fca8:	b538      	push	{r3, r4, r5, lr}
 801fcaa:	4c15      	ldr	r4, [pc, #84]	@ (801fd00 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x58>)
 801fcac:	4605      	mov	r5, r0
 801fcae:	7823      	ldrb	r3, [r4, #0]
 801fcb0:	f3bf 8f5b 	dmb	ish
 801fcb4:	07da      	lsls	r2, r3, #31
 801fcb6:	d40b      	bmi.n	801fcd0 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 801fcb8:	4620      	mov	r0, r4
 801fcba:	f006 ff6a 	bl	8026b92 <__cxa_guard_acquire>
 801fcbe:	b138      	cbz	r0, 801fcd0 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 801fcc0:	4620      	mov	r0, r4
 801fcc2:	f006 ff72 	bl	8026baa <__cxa_guard_release>
 801fcc6:	4a0f      	ldr	r2, [pc, #60]	@ (801fd04 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 801fcc8:	490f      	ldr	r1, [pc, #60]	@ (801fd08 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x60>)
 801fcca:	4810      	ldr	r0, [pc, #64]	@ (801fd0c <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 801fccc:	f006 ff5a 	bl	8026b84 <__aeabi_atexit>
 801fcd0:	4c0f      	ldr	r4, [pc, #60]	@ (801fd10 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x68>)
 801fcd2:	7823      	ldrb	r3, [r4, #0]
 801fcd4:	f3bf 8f5b 	dmb	ish
 801fcd8:	07db      	lsls	r3, r3, #31
 801fcda:	d40b      	bmi.n	801fcf4 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 801fcdc:	4620      	mov	r0, r4
 801fcde:	f006 ff58 	bl	8026b92 <__cxa_guard_acquire>
 801fce2:	b138      	cbz	r0, 801fcf4 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 801fce4:	4620      	mov	r0, r4
 801fce6:	f006 ff60 	bl	8026baa <__cxa_guard_release>
 801fcea:	4a06      	ldr	r2, [pc, #24]	@ (801fd04 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 801fcec:	4909      	ldr	r1, [pc, #36]	@ (801fd14 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x6c>)
 801fcee:	480a      	ldr	r0, [pc, #40]	@ (801fd18 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 801fcf0:	f006 ff48 	bl	8026b84 <__aeabi_atexit>
 801fcf4:	4b05      	ldr	r3, [pc, #20]	@ (801fd0c <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 801fcf6:	60eb      	str	r3, [r5, #12]
 801fcf8:	4b07      	ldr	r3, [pc, #28]	@ (801fd18 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 801fcfa:	612b      	str	r3, [r5, #16]
 801fcfc:	bd38      	pop	{r3, r4, r5, pc}
 801fcfe:	bf00      	nop
 801fd00:	24028ee4 	.word	0x24028ee4
 801fd04:	24000000 	.word	0x24000000
 801fd08:	0801cf29 	.word	0x0801cf29
 801fd0c:	240000a8 	.word	0x240000a8
 801fd10:	24028ee8 	.word	0x24028ee8
 801fd14:	0801cf27 	.word	0x0801cf27
 801fd18:	240000ac 	.word	0x240000ac

0801fd1c <_ZN8touchgfx8LCD24bpp28enableTextureMapperL8_RGB888Ev>:
 801fd1c:	b510      	push	{r4, lr}
 801fd1e:	4604      	mov	r4, r0
 801fd20:	f7ff ff88 	bl	801fc34 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>
 801fd24:	4620      	mov	r0, r4
 801fd26:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801fd2a:	f7ff bfbd 	b.w	801fca8 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>
	...

0801fd30 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>:
 801fd30:	b538      	push	{r3, r4, r5, lr}
 801fd32:	4c15      	ldr	r4, [pc, #84]	@ (801fd88 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x58>)
 801fd34:	4605      	mov	r5, r0
 801fd36:	7823      	ldrb	r3, [r4, #0]
 801fd38:	f3bf 8f5b 	dmb	ish
 801fd3c:	07da      	lsls	r2, r3, #31
 801fd3e:	d40b      	bmi.n	801fd58 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 801fd40:	4620      	mov	r0, r4
 801fd42:	f006 ff26 	bl	8026b92 <__cxa_guard_acquire>
 801fd46:	b138      	cbz	r0, 801fd58 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 801fd48:	4620      	mov	r0, r4
 801fd4a:	f006 ff2e 	bl	8026baa <__cxa_guard_release>
 801fd4e:	4a0f      	ldr	r2, [pc, #60]	@ (801fd8c <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 801fd50:	490f      	ldr	r1, [pc, #60]	@ (801fd90 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x60>)
 801fd52:	4810      	ldr	r0, [pc, #64]	@ (801fd94 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 801fd54:	f006 ff16 	bl	8026b84 <__aeabi_atexit>
 801fd58:	4c0f      	ldr	r4, [pc, #60]	@ (801fd98 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x68>)
 801fd5a:	7823      	ldrb	r3, [r4, #0]
 801fd5c:	f3bf 8f5b 	dmb	ish
 801fd60:	07db      	lsls	r3, r3, #31
 801fd62:	d40b      	bmi.n	801fd7c <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 801fd64:	4620      	mov	r0, r4
 801fd66:	f006 ff14 	bl	8026b92 <__cxa_guard_acquire>
 801fd6a:	b138      	cbz	r0, 801fd7c <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 801fd6c:	4620      	mov	r0, r4
 801fd6e:	f006 ff1c 	bl	8026baa <__cxa_guard_release>
 801fd72:	4a06      	ldr	r2, [pc, #24]	@ (801fd8c <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 801fd74:	4909      	ldr	r1, [pc, #36]	@ (801fd9c <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x6c>)
 801fd76:	480a      	ldr	r0, [pc, #40]	@ (801fda0 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 801fd78:	f006 ff04 	bl	8026b84 <__aeabi_atexit>
 801fd7c:	4b05      	ldr	r3, [pc, #20]	@ (801fd94 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 801fd7e:	626b      	str	r3, [r5, #36]	@ 0x24
 801fd80:	4b07      	ldr	r3, [pc, #28]	@ (801fda0 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 801fd82:	62ab      	str	r3, [r5, #40]	@ 0x28
 801fd84:	bd38      	pop	{r3, r4, r5, pc}
 801fd86:	bf00      	nop
 801fd88:	24028f0c 	.word	0x24028f0c
 801fd8c:	24000000 	.word	0x24000000
 801fd90:	0801cf1d 	.word	0x0801cf1d
 801fd94:	240000d0 	.word	0x240000d0
 801fd98:	24028f10 	.word	0x24028f10
 801fd9c:	0801cf1b 	.word	0x0801cf1b
 801fda0:	240000d4 	.word	0x240000d4

0801fda4 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>:
 801fda4:	b538      	push	{r3, r4, r5, lr}
 801fda6:	4c15      	ldr	r4, [pc, #84]	@ (801fdfc <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x58>)
 801fda8:	4605      	mov	r5, r0
 801fdaa:	7823      	ldrb	r3, [r4, #0]
 801fdac:	f3bf 8f5b 	dmb	ish
 801fdb0:	07da      	lsls	r2, r3, #31
 801fdb2:	d40b      	bmi.n	801fdcc <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 801fdb4:	4620      	mov	r0, r4
 801fdb6:	f006 feec 	bl	8026b92 <__cxa_guard_acquire>
 801fdba:	b138      	cbz	r0, 801fdcc <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 801fdbc:	4620      	mov	r0, r4
 801fdbe:	f006 fef4 	bl	8026baa <__cxa_guard_release>
 801fdc2:	4a0f      	ldr	r2, [pc, #60]	@ (801fe00 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 801fdc4:	490f      	ldr	r1, [pc, #60]	@ (801fe04 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x60>)
 801fdc6:	4810      	ldr	r0, [pc, #64]	@ (801fe08 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 801fdc8:	f006 fedc 	bl	8026b84 <__aeabi_atexit>
 801fdcc:	4c0f      	ldr	r4, [pc, #60]	@ (801fe0c <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x68>)
 801fdce:	7823      	ldrb	r3, [r4, #0]
 801fdd0:	f3bf 8f5b 	dmb	ish
 801fdd4:	07db      	lsls	r3, r3, #31
 801fdd6:	d40b      	bmi.n	801fdf0 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 801fdd8:	4620      	mov	r0, r4
 801fdda:	f006 feda 	bl	8026b92 <__cxa_guard_acquire>
 801fdde:	b138      	cbz	r0, 801fdf0 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 801fde0:	4620      	mov	r0, r4
 801fde2:	f006 fee2 	bl	8026baa <__cxa_guard_release>
 801fde6:	4a06      	ldr	r2, [pc, #24]	@ (801fe00 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 801fde8:	4909      	ldr	r1, [pc, #36]	@ (801fe10 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x6c>)
 801fdea:	480a      	ldr	r0, [pc, #40]	@ (801fe14 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 801fdec:	f006 feca 	bl	8026b84 <__aeabi_atexit>
 801fdf0:	4b05      	ldr	r3, [pc, #20]	@ (801fe08 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 801fdf2:	61eb      	str	r3, [r5, #28]
 801fdf4:	4b07      	ldr	r3, [pc, #28]	@ (801fe14 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 801fdf6:	622b      	str	r3, [r5, #32]
 801fdf8:	bd38      	pop	{r3, r4, r5, pc}
 801fdfa:	bf00      	nop
 801fdfc:	24028eec 	.word	0x24028eec
 801fe00:	24000000 	.word	0x24000000
 801fe04:	0801cf21 	.word	0x0801cf21
 801fe08:	240000b0 	.word	0x240000b0
 801fe0c:	24028ef0 	.word	0x24028ef0
 801fe10:	0801cf1f 	.word	0x0801cf1f
 801fe14:	240000b4 	.word	0x240000b4

0801fe18 <_ZN8touchgfx8LCD24bpp30enableTextureMapperL8_ARGB8888Ev>:
 801fe18:	b510      	push	{r4, lr}
 801fe1a:	4604      	mov	r4, r0
 801fe1c:	f7ff ff88 	bl	801fd30 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>
 801fe20:	4620      	mov	r0, r4
 801fe22:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801fe26:	f7ff bfbd 	b.w	801fda4 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>
	...

0801fe2c <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv>:
 801fe2c:	b538      	push	{r3, r4, r5, lr}
 801fe2e:	4c15      	ldr	r4, [pc, #84]	@ (801fe84 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x58>)
 801fe30:	4605      	mov	r5, r0
 801fe32:	7823      	ldrb	r3, [r4, #0]
 801fe34:	f3bf 8f5b 	dmb	ish
 801fe38:	07da      	lsls	r2, r3, #31
 801fe3a:	d40b      	bmi.n	801fe54 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x28>
 801fe3c:	4620      	mov	r0, r4
 801fe3e:	f006 fea8 	bl	8026b92 <__cxa_guard_acquire>
 801fe42:	b138      	cbz	r0, 801fe54 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x28>
 801fe44:	4620      	mov	r0, r4
 801fe46:	f006 feb0 	bl	8026baa <__cxa_guard_release>
 801fe4a:	4a0f      	ldr	r2, [pc, #60]	@ (801fe88 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x5c>)
 801fe4c:	490f      	ldr	r1, [pc, #60]	@ (801fe8c <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x60>)
 801fe4e:	4810      	ldr	r0, [pc, #64]	@ (801fe90 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x64>)
 801fe50:	f006 fe98 	bl	8026b84 <__aeabi_atexit>
 801fe54:	4c0f      	ldr	r4, [pc, #60]	@ (801fe94 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x68>)
 801fe56:	7823      	ldrb	r3, [r4, #0]
 801fe58:	f3bf 8f5b 	dmb	ish
 801fe5c:	07db      	lsls	r3, r3, #31
 801fe5e:	d40b      	bmi.n	801fe78 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x4c>
 801fe60:	4620      	mov	r0, r4
 801fe62:	f006 fe96 	bl	8026b92 <__cxa_guard_acquire>
 801fe66:	b138      	cbz	r0, 801fe78 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x4c>
 801fe68:	4620      	mov	r0, r4
 801fe6a:	f006 fe9e 	bl	8026baa <__cxa_guard_release>
 801fe6e:	4a06      	ldr	r2, [pc, #24]	@ (801fe88 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x5c>)
 801fe70:	4909      	ldr	r1, [pc, #36]	@ (801fe98 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x6c>)
 801fe72:	480a      	ldr	r0, [pc, #40]	@ (801fe9c <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x70>)
 801fe74:	f006 fe86 	bl	8026b84 <__aeabi_atexit>
 801fe78:	4b05      	ldr	r3, [pc, #20]	@ (801fe90 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x64>)
 801fe7a:	636b      	str	r3, [r5, #52]	@ 0x34
 801fe7c:	4b07      	ldr	r3, [pc, #28]	@ (801fe9c <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x70>)
 801fe7e:	63ab      	str	r3, [r5, #56]	@ 0x38
 801fe80:	bd38      	pop	{r3, r4, r5, pc}
 801fe82:	bf00      	nop
 801fe84:	24028ef4 	.word	0x24028ef4
 801fe88:	24000000 	.word	0x24000000
 801fe8c:	0801cf15 	.word	0x0801cf15
 801fe90:	240000b8 	.word	0x240000b8
 801fe94:	24028ef8 	.word	0x24028ef8
 801fe98:	0801cf13 	.word	0x0801cf13
 801fe9c:	240000bc 	.word	0x240000bc

0801fea0 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv>:
 801fea0:	b538      	push	{r3, r4, r5, lr}
 801fea2:	4c15      	ldr	r4, [pc, #84]	@ (801fef8 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x58>)
 801fea4:	4605      	mov	r5, r0
 801fea6:	7823      	ldrb	r3, [r4, #0]
 801fea8:	f3bf 8f5b 	dmb	ish
 801feac:	07da      	lsls	r2, r3, #31
 801feae:	d40b      	bmi.n	801fec8 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x28>
 801feb0:	4620      	mov	r0, r4
 801feb2:	f006 fe6e 	bl	8026b92 <__cxa_guard_acquire>
 801feb6:	b138      	cbz	r0, 801fec8 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x28>
 801feb8:	4620      	mov	r0, r4
 801feba:	f006 fe76 	bl	8026baa <__cxa_guard_release>
 801febe:	4a0f      	ldr	r2, [pc, #60]	@ (801fefc <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x5c>)
 801fec0:	490f      	ldr	r1, [pc, #60]	@ (801ff00 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x60>)
 801fec2:	4810      	ldr	r0, [pc, #64]	@ (801ff04 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x64>)
 801fec4:	f006 fe5e 	bl	8026b84 <__aeabi_atexit>
 801fec8:	4c0f      	ldr	r4, [pc, #60]	@ (801ff08 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x68>)
 801feca:	7823      	ldrb	r3, [r4, #0]
 801fecc:	f3bf 8f5b 	dmb	ish
 801fed0:	07db      	lsls	r3, r3, #31
 801fed2:	d40b      	bmi.n	801feec <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x4c>
 801fed4:	4620      	mov	r0, r4
 801fed6:	f006 fe5c 	bl	8026b92 <__cxa_guard_acquire>
 801feda:	b138      	cbz	r0, 801feec <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x4c>
 801fedc:	4620      	mov	r0, r4
 801fede:	f006 fe64 	bl	8026baa <__cxa_guard_release>
 801fee2:	4a06      	ldr	r2, [pc, #24]	@ (801fefc <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x5c>)
 801fee4:	4909      	ldr	r1, [pc, #36]	@ (801ff0c <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x6c>)
 801fee6:	480a      	ldr	r0, [pc, #40]	@ (801ff10 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x70>)
 801fee8:	f006 fe4c 	bl	8026b84 <__aeabi_atexit>
 801feec:	4b05      	ldr	r3, [pc, #20]	@ (801ff04 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x64>)
 801feee:	62eb      	str	r3, [r5, #44]	@ 0x2c
 801fef0:	4b07      	ldr	r3, [pc, #28]	@ (801ff10 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x70>)
 801fef2:	632b      	str	r3, [r5, #48]	@ 0x30
 801fef4:	bd38      	pop	{r3, r4, r5, pc}
 801fef6:	bf00      	nop
 801fef8:	24028ecc 	.word	0x24028ecc
 801fefc:	24000000 	.word	0x24000000
 801ff00:	0801cf19 	.word	0x0801cf19
 801ff04:	24000090 	.word	0x24000090
 801ff08:	24028ed0 	.word	0x24028ed0
 801ff0c:	0801cf17 	.word	0x0801cf17
 801ff10:	24000094 	.word	0x24000094

0801ff14 <_ZN8touchgfx8LCD24bpp25enableTextureMapperRGB888Ev>:
 801ff14:	b510      	push	{r4, lr}
 801ff16:	4604      	mov	r4, r0
 801ff18:	f7ff ff88 	bl	801fe2c <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv>
 801ff1c:	4620      	mov	r0, r4
 801ff1e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801ff22:	f7ff bfbd 	b.w	801fea0 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv>
	...

0801ff28 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>:
 801ff28:	b538      	push	{r3, r4, r5, lr}
 801ff2a:	4c15      	ldr	r4, [pc, #84]	@ (801ff80 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x58>)
 801ff2c:	4605      	mov	r5, r0
 801ff2e:	7823      	ldrb	r3, [r4, #0]
 801ff30:	f3bf 8f5b 	dmb	ish
 801ff34:	07da      	lsls	r2, r3, #31
 801ff36:	d40b      	bmi.n	801ff50 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 801ff38:	4620      	mov	r0, r4
 801ff3a:	f006 fe2a 	bl	8026b92 <__cxa_guard_acquire>
 801ff3e:	b138      	cbz	r0, 801ff50 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 801ff40:	4620      	mov	r0, r4
 801ff42:	f006 fe32 	bl	8026baa <__cxa_guard_release>
 801ff46:	4a0f      	ldr	r2, [pc, #60]	@ (801ff84 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 801ff48:	490f      	ldr	r1, [pc, #60]	@ (801ff88 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x60>)
 801ff4a:	4810      	ldr	r0, [pc, #64]	@ (801ff8c <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 801ff4c:	f006 fe1a 	bl	8026b84 <__aeabi_atexit>
 801ff50:	4c0f      	ldr	r4, [pc, #60]	@ (801ff90 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x68>)
 801ff52:	7823      	ldrb	r3, [r4, #0]
 801ff54:	f3bf 8f5b 	dmb	ish
 801ff58:	07db      	lsls	r3, r3, #31
 801ff5a:	d40b      	bmi.n	801ff74 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 801ff5c:	4620      	mov	r0, r4
 801ff5e:	f006 fe18 	bl	8026b92 <__cxa_guard_acquire>
 801ff62:	b138      	cbz	r0, 801ff74 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 801ff64:	4620      	mov	r0, r4
 801ff66:	f006 fe20 	bl	8026baa <__cxa_guard_release>
 801ff6a:	4a06      	ldr	r2, [pc, #24]	@ (801ff84 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 801ff6c:	4909      	ldr	r1, [pc, #36]	@ (801ff94 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x6c>)
 801ff6e:	480a      	ldr	r0, [pc, #40]	@ (801ff98 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 801ff70:	f006 fe08 	bl	8026b84 <__aeabi_atexit>
 801ff74:	4b05      	ldr	r3, [pc, #20]	@ (801ff8c <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 801ff76:	646b      	str	r3, [r5, #68]	@ 0x44
 801ff78:	4b07      	ldr	r3, [pc, #28]	@ (801ff98 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 801ff7a:	64ab      	str	r3, [r5, #72]	@ 0x48
 801ff7c:	bd38      	pop	{r3, r4, r5, pc}
 801ff7e:	bf00      	nop
 801ff80:	24028efc 	.word	0x24028efc
 801ff84:	24000000 	.word	0x24000000
 801ff88:	0801cf0d 	.word	0x0801cf0d
 801ff8c:	240000c0 	.word	0x240000c0
 801ff90:	24028f00 	.word	0x24028f00
 801ff94:	0801cf0b 	.word	0x0801cf0b
 801ff98:	240000c4 	.word	0x240000c4

0801ff9c <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv>:
 801ff9c:	b538      	push	{r3, r4, r5, lr}
 801ff9e:	4c15      	ldr	r4, [pc, #84]	@ (801fff4 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x58>)
 801ffa0:	4605      	mov	r5, r0
 801ffa2:	7823      	ldrb	r3, [r4, #0]
 801ffa4:	f3bf 8f5b 	dmb	ish
 801ffa8:	07da      	lsls	r2, r3, #31
 801ffaa:	d40b      	bmi.n	801ffc4 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 801ffac:	4620      	mov	r0, r4
 801ffae:	f006 fdf0 	bl	8026b92 <__cxa_guard_acquire>
 801ffb2:	b138      	cbz	r0, 801ffc4 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 801ffb4:	4620      	mov	r0, r4
 801ffb6:	f006 fdf8 	bl	8026baa <__cxa_guard_release>
 801ffba:	4a0f      	ldr	r2, [pc, #60]	@ (801fff8 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 801ffbc:	490f      	ldr	r1, [pc, #60]	@ (801fffc <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x60>)
 801ffbe:	4810      	ldr	r0, [pc, #64]	@ (8020000 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 801ffc0:	f006 fde0 	bl	8026b84 <__aeabi_atexit>
 801ffc4:	4c0f      	ldr	r4, [pc, #60]	@ (8020004 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x68>)
 801ffc6:	7823      	ldrb	r3, [r4, #0]
 801ffc8:	f3bf 8f5b 	dmb	ish
 801ffcc:	07db      	lsls	r3, r3, #31
 801ffce:	d40b      	bmi.n	801ffe8 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 801ffd0:	4620      	mov	r0, r4
 801ffd2:	f006 fdde 	bl	8026b92 <__cxa_guard_acquire>
 801ffd6:	b138      	cbz	r0, 801ffe8 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 801ffd8:	4620      	mov	r0, r4
 801ffda:	f006 fde6 	bl	8026baa <__cxa_guard_release>
 801ffde:	4a06      	ldr	r2, [pc, #24]	@ (801fff8 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 801ffe0:	4909      	ldr	r1, [pc, #36]	@ (8020008 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x6c>)
 801ffe2:	480a      	ldr	r0, [pc, #40]	@ (802000c <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 801ffe4:	f006 fdce 	bl	8026b84 <__aeabi_atexit>
 801ffe8:	4b05      	ldr	r3, [pc, #20]	@ (8020000 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 801ffea:	63eb      	str	r3, [r5, #60]	@ 0x3c
 801ffec:	4b07      	ldr	r3, [pc, #28]	@ (802000c <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 801ffee:	642b      	str	r3, [r5, #64]	@ 0x40
 801fff0:	bd38      	pop	{r3, r4, r5, pc}
 801fff2:	bf00      	nop
 801fff4:	24028edc 	.word	0x24028edc
 801fff8:	24000000 	.word	0x24000000
 801fffc:	0801cf11 	.word	0x0801cf11
 8020000:	240000a0 	.word	0x240000a0
 8020004:	24028ee0 	.word	0x24028ee0
 8020008:	0801cf0f 	.word	0x0801cf0f
 802000c:	240000a4 	.word	0x240000a4

08020010 <_ZN8touchgfx8LCD24bpp27enableTextureMapperARGB8888Ev>:
 8020010:	b510      	push	{r4, lr}
 8020012:	4604      	mov	r4, r0
 8020014:	f7ff ff88 	bl	801ff28 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>
 8020018:	4620      	mov	r0, r4
 802001a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802001e:	f7ff bfbd 	b.w	801ff9c <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv>
	...

08020024 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv>:
 8020024:	b538      	push	{r3, r4, r5, lr}
 8020026:	4c15      	ldr	r4, [pc, #84]	@ (802007c <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x58>)
 8020028:	4605      	mov	r5, r0
 802002a:	7823      	ldrb	r3, [r4, #0]
 802002c:	f3bf 8f5b 	dmb	ish
 8020030:	07da      	lsls	r2, r3, #31
 8020032:	d40b      	bmi.n	802004c <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 8020034:	4620      	mov	r0, r4
 8020036:	f006 fdac 	bl	8026b92 <__cxa_guard_acquire>
 802003a:	b138      	cbz	r0, 802004c <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 802003c:	4620      	mov	r0, r4
 802003e:	f006 fdb4 	bl	8026baa <__cxa_guard_release>
 8020042:	4a0f      	ldr	r2, [pc, #60]	@ (8020080 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 8020044:	490f      	ldr	r1, [pc, #60]	@ (8020084 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x60>)
 8020046:	4810      	ldr	r0, [pc, #64]	@ (8020088 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 8020048:	f006 fd9c 	bl	8026b84 <__aeabi_atexit>
 802004c:	4c0f      	ldr	r4, [pc, #60]	@ (802008c <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x68>)
 802004e:	7823      	ldrb	r3, [r4, #0]
 8020050:	f3bf 8f5b 	dmb	ish
 8020054:	07db      	lsls	r3, r3, #31
 8020056:	d40b      	bmi.n	8020070 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 8020058:	4620      	mov	r0, r4
 802005a:	f006 fd9a 	bl	8026b92 <__cxa_guard_acquire>
 802005e:	b138      	cbz	r0, 8020070 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 8020060:	4620      	mov	r0, r4
 8020062:	f006 fda2 	bl	8026baa <__cxa_guard_release>
 8020066:	4a06      	ldr	r2, [pc, #24]	@ (8020080 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 8020068:	4909      	ldr	r1, [pc, #36]	@ (8020090 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x6c>)
 802006a:	480a      	ldr	r0, [pc, #40]	@ (8020094 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 802006c:	f006 fd8a 	bl	8026b84 <__aeabi_atexit>
 8020070:	4b05      	ldr	r3, [pc, #20]	@ (8020088 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 8020072:	656b      	str	r3, [r5, #84]	@ 0x54
 8020074:	4b07      	ldr	r3, [pc, #28]	@ (8020094 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 8020076:	65ab      	str	r3, [r5, #88]	@ 0x58
 8020078:	bd38      	pop	{r3, r4, r5, pc}
 802007a:	bf00      	nop
 802007c:	24028ed4 	.word	0x24028ed4
 8020080:	24000000 	.word	0x24000000
 8020084:	0801cf05 	.word	0x0801cf05
 8020088:	24000098 	.word	0x24000098
 802008c:	24028ed8 	.word	0x24028ed8
 8020090:	0801cf03 	.word	0x0801cf03
 8020094:	2400009c 	.word	0x2400009c

08020098 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv>:
 8020098:	b538      	push	{r3, r4, r5, lr}
 802009a:	4c15      	ldr	r4, [pc, #84]	@ (80200f0 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x58>)
 802009c:	4605      	mov	r5, r0
 802009e:	7823      	ldrb	r3, [r4, #0]
 80200a0:	f3bf 8f5b 	dmb	ish
 80200a4:	07da      	lsls	r2, r3, #31
 80200a6:	d40b      	bmi.n	80200c0 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 80200a8:	4620      	mov	r0, r4
 80200aa:	f006 fd72 	bl	8026b92 <__cxa_guard_acquire>
 80200ae:	b138      	cbz	r0, 80200c0 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 80200b0:	4620      	mov	r0, r4
 80200b2:	f006 fd7a 	bl	8026baa <__cxa_guard_release>
 80200b6:	4a0f      	ldr	r2, [pc, #60]	@ (80200f4 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 80200b8:	490f      	ldr	r1, [pc, #60]	@ (80200f8 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x60>)
 80200ba:	4810      	ldr	r0, [pc, #64]	@ (80200fc <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 80200bc:	f006 fd62 	bl	8026b84 <__aeabi_atexit>
 80200c0:	4c0f      	ldr	r4, [pc, #60]	@ (8020100 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x68>)
 80200c2:	7823      	ldrb	r3, [r4, #0]
 80200c4:	f3bf 8f5b 	dmb	ish
 80200c8:	07db      	lsls	r3, r3, #31
 80200ca:	d40b      	bmi.n	80200e4 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 80200cc:	4620      	mov	r0, r4
 80200ce:	f006 fd60 	bl	8026b92 <__cxa_guard_acquire>
 80200d2:	b138      	cbz	r0, 80200e4 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 80200d4:	4620      	mov	r0, r4
 80200d6:	f006 fd68 	bl	8026baa <__cxa_guard_release>
 80200da:	4a06      	ldr	r2, [pc, #24]	@ (80200f4 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 80200dc:	4909      	ldr	r1, [pc, #36]	@ (8020104 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x6c>)
 80200de:	480a      	ldr	r0, [pc, #40]	@ (8020108 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 80200e0:	f006 fd50 	bl	8026b84 <__aeabi_atexit>
 80200e4:	4b05      	ldr	r3, [pc, #20]	@ (80200fc <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 80200e6:	64eb      	str	r3, [r5, #76]	@ 0x4c
 80200e8:	4b07      	ldr	r3, [pc, #28]	@ (8020108 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 80200ea:	652b      	str	r3, [r5, #80]	@ 0x50
 80200ec:	bd38      	pop	{r3, r4, r5, pc}
 80200ee:	bf00      	nop
 80200f0:	24028ec4 	.word	0x24028ec4
 80200f4:	24000000 	.word	0x24000000
 80200f8:	0801cf09 	.word	0x0801cf09
 80200fc:	24000088 	.word	0x24000088
 8020100:	24028ec8 	.word	0x24028ec8
 8020104:	0801cf07 	.word	0x0801cf07
 8020108:	2400008c 	.word	0x2400008c

0802010c <_ZN8touchgfx8LCD24bpp21enableTextureMapperA4Ev>:
 802010c:	b510      	push	{r4, lr}
 802010e:	4604      	mov	r4, r0
 8020110:	f7ff ff88 	bl	8020024 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv>
 8020114:	4620      	mov	r0, r4
 8020116:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802011a:	f7ff bfbd 	b.w	8020098 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv>

0802011e <_ZN8touchgfx8LCD24bpp22enableTextureMapperAllEv>:
 802011e:	b510      	push	{r4, lr}
 8020120:	4604      	mov	r4, r0
 8020122:	f7ff fff3 	bl	802010c <_ZN8touchgfx8LCD24bpp21enableTextureMapperA4Ev>
 8020126:	4620      	mov	r0, r4
 8020128:	f7ff ff72 	bl	8020010 <_ZN8touchgfx8LCD24bpp27enableTextureMapperARGB8888Ev>
 802012c:	4620      	mov	r0, r4
 802012e:	f7ff fe73 	bl	801fe18 <_ZN8touchgfx8LCD24bpp30enableTextureMapperL8_ARGB8888Ev>
 8020132:	4620      	mov	r0, r4
 8020134:	f7ff fdf2 	bl	801fd1c <_ZN8touchgfx8LCD24bpp28enableTextureMapperL8_RGB888Ev>
 8020138:	4620      	mov	r0, r4
 802013a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802013e:	f7ff bee9 	b.w	801ff14 <_ZN8touchgfx8LCD24bpp25enableTextureMapperRGB888Ev>
	...

08020144 <_ZN8touchgfx8LCD24bpp23enableDecompressorL8_L4Ev>:
 8020144:	b538      	push	{r3, r4, r5, lr}
 8020146:	4c0b      	ldr	r4, [pc, #44]	@ (8020174 <_ZN8touchgfx8LCD24bpp23enableDecompressorL8_L4Ev+0x30>)
 8020148:	4605      	mov	r5, r0
 802014a:	7823      	ldrb	r3, [r4, #0]
 802014c:	f3bf 8f5b 	dmb	ish
 8020150:	07db      	lsls	r3, r3, #31
 8020152:	d40b      	bmi.n	802016c <_ZN8touchgfx8LCD24bpp23enableDecompressorL8_L4Ev+0x28>
 8020154:	4620      	mov	r0, r4
 8020156:	f006 fd1c 	bl	8026b92 <__cxa_guard_acquire>
 802015a:	b138      	cbz	r0, 802016c <_ZN8touchgfx8LCD24bpp23enableDecompressorL8_L4Ev+0x28>
 802015c:	4620      	mov	r0, r4
 802015e:	f006 fd24 	bl	8026baa <__cxa_guard_release>
 8020162:	4a05      	ldr	r2, [pc, #20]	@ (8020178 <_ZN8touchgfx8LCD24bpp23enableDecompressorL8_L4Ev+0x34>)
 8020164:	4905      	ldr	r1, [pc, #20]	@ (802017c <_ZN8touchgfx8LCD24bpp23enableDecompressorL8_L4Ev+0x38>)
 8020166:	4806      	ldr	r0, [pc, #24]	@ (8020180 <_ZN8touchgfx8LCD24bpp23enableDecompressorL8_L4Ev+0x3c>)
 8020168:	f006 fd0c 	bl	8026b84 <__aeabi_atexit>
 802016c:	4b04      	ldr	r3, [pc, #16]	@ (8020180 <_ZN8touchgfx8LCD24bpp23enableDecompressorL8_L4Ev+0x3c>)
 802016e:	65eb      	str	r3, [r5, #92]	@ 0x5c
 8020170:	bd38      	pop	{r3, r4, r5, pc}
 8020172:	bf00      	nop
 8020174:	24028eb8 	.word	0x24028eb8
 8020178:	24000000 	.word	0x24000000
 802017c:	0801cf01 	.word	0x0801cf01
 8020180:	24000080 	.word	0x24000080

08020184 <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_RLEEv>:
 8020184:	b538      	push	{r3, r4, r5, lr}
 8020186:	4c0b      	ldr	r4, [pc, #44]	@ (80201b4 <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_RLEEv+0x30>)
 8020188:	4605      	mov	r5, r0
 802018a:	7823      	ldrb	r3, [r4, #0]
 802018c:	f3bf 8f5b 	dmb	ish
 8020190:	07db      	lsls	r3, r3, #31
 8020192:	d40b      	bmi.n	80201ac <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_RLEEv+0x28>
 8020194:	4620      	mov	r0, r4
 8020196:	f006 fcfc 	bl	8026b92 <__cxa_guard_acquire>
 802019a:	b138      	cbz	r0, 80201ac <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_RLEEv+0x28>
 802019c:	4620      	mov	r0, r4
 802019e:	f006 fd04 	bl	8026baa <__cxa_guard_release>
 80201a2:	4a05      	ldr	r2, [pc, #20]	@ (80201b8 <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_RLEEv+0x34>)
 80201a4:	4905      	ldr	r1, [pc, #20]	@ (80201bc <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_RLEEv+0x38>)
 80201a6:	4806      	ldr	r0, [pc, #24]	@ (80201c0 <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_RLEEv+0x3c>)
 80201a8:	f006 fcec 	bl	8026b84 <__aeabi_atexit>
 80201ac:	4b04      	ldr	r3, [pc, #16]	@ (80201c0 <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_RLEEv+0x3c>)
 80201ae:	662b      	str	r3, [r5, #96]	@ 0x60
 80201b0:	bd38      	pop	{r3, r4, r5, pc}
 80201b2:	bf00      	nop
 80201b4:	24028ebc 	.word	0x24028ebc
 80201b8:	24000000 	.word	0x24000000
 80201bc:	0801ceff 	.word	0x0801ceff
 80201c0:	24000084 	.word	0x24000084

080201c4 <_ZN8touchgfx8LCD24bpp25enableDecompressorL8_LZW9Ev>:
 80201c4:	b570      	push	{r4, r5, r6, lr}
 80201c6:	4d0c      	ldr	r5, [pc, #48]	@ (80201f8 <_ZN8touchgfx8LCD24bpp25enableDecompressorL8_LZW9Ev+0x34>)
 80201c8:	4606      	mov	r6, r0
 80201ca:	4c0c      	ldr	r4, [pc, #48]	@ (80201fc <_ZN8touchgfx8LCD24bpp25enableDecompressorL8_LZW9Ev+0x38>)
 80201cc:	782b      	ldrb	r3, [r5, #0]
 80201ce:	f3bf 8f5b 	dmb	ish
 80201d2:	f013 0f01 	tst.w	r3, #1
 80201d6:	d10d      	bne.n	80201f4 <_ZN8touchgfx8LCD24bpp25enableDecompressorL8_LZW9Ev+0x30>
 80201d8:	4628      	mov	r0, r5
 80201da:	f006 fcda 	bl	8026b92 <__cxa_guard_acquire>
 80201de:	b148      	cbz	r0, 80201f4 <_ZN8touchgfx8LCD24bpp25enableDecompressorL8_LZW9Ev+0x30>
 80201e0:	4b07      	ldr	r3, [pc, #28]	@ (8020200 <_ZN8touchgfx8LCD24bpp25enableDecompressorL8_LZW9Ev+0x3c>)
 80201e2:	4628      	mov	r0, r5
 80201e4:	6023      	str	r3, [r4, #0]
 80201e6:	f006 fce0 	bl	8026baa <__cxa_guard_release>
 80201ea:	4a06      	ldr	r2, [pc, #24]	@ (8020204 <_ZN8touchgfx8LCD24bpp25enableDecompressorL8_LZW9Ev+0x40>)
 80201ec:	4620      	mov	r0, r4
 80201ee:	4906      	ldr	r1, [pc, #24]	@ (8020208 <_ZN8touchgfx8LCD24bpp25enableDecompressorL8_LZW9Ev+0x44>)
 80201f0:	f006 fcc8 	bl	8026b84 <__aeabi_atexit>
 80201f4:	6674      	str	r4, [r6, #100]	@ 0x64
 80201f6:	bd70      	pop	{r4, r5, r6, pc}
 80201f8:	24028ec0 	.word	0x24028ec0
 80201fc:	24029018 	.word	0x24029018
 8020200:	0802c834 	.word	0x0802c834
 8020204:	24000000 	.word	0x24000000
 8020208:	0801cefd 	.word	0x0801cefd

0802020c <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_AllEv>:
 802020c:	b510      	push	{r4, lr}
 802020e:	4604      	mov	r4, r0
 8020210:	f7ff ff98 	bl	8020144 <_ZN8touchgfx8LCD24bpp23enableDecompressorL8_L4Ev>
 8020214:	4620      	mov	r0, r4
 8020216:	f7ff ffb5 	bl	8020184 <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_RLEEv>
 802021a:	4620      	mov	r0, r4
 802021c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8020220:	f7ff bfd0 	b.w	80201c4 <_ZN8touchgfx8LCD24bpp25enableDecompressorL8_LZW9Ev>

08020224 <_ZN8touchgfx8LCD24bpp21enableDecompressorRGBEv>:
 8020224:	b570      	push	{r4, r5, r6, lr}
 8020226:	4d0c      	ldr	r5, [pc, #48]	@ (8020258 <_ZN8touchgfx8LCD24bpp21enableDecompressorRGBEv+0x34>)
 8020228:	4606      	mov	r6, r0
 802022a:	4c0c      	ldr	r4, [pc, #48]	@ (802025c <_ZN8touchgfx8LCD24bpp21enableDecompressorRGBEv+0x38>)
 802022c:	782b      	ldrb	r3, [r5, #0]
 802022e:	f3bf 8f5b 	dmb	ish
 8020232:	f013 0f01 	tst.w	r3, #1
 8020236:	d10d      	bne.n	8020254 <_ZN8touchgfx8LCD24bpp21enableDecompressorRGBEv+0x30>
 8020238:	4628      	mov	r0, r5
 802023a:	f006 fcaa 	bl	8026b92 <__cxa_guard_acquire>
 802023e:	b148      	cbz	r0, 8020254 <_ZN8touchgfx8LCD24bpp21enableDecompressorRGBEv+0x30>
 8020240:	4b07      	ldr	r3, [pc, #28]	@ (8020260 <_ZN8touchgfx8LCD24bpp21enableDecompressorRGBEv+0x3c>)
 8020242:	4628      	mov	r0, r5
 8020244:	6023      	str	r3, [r4, #0]
 8020246:	f006 fcb0 	bl	8026baa <__cxa_guard_release>
 802024a:	4a06      	ldr	r2, [pc, #24]	@ (8020264 <_ZN8touchgfx8LCD24bpp21enableDecompressorRGBEv+0x40>)
 802024c:	4620      	mov	r0, r4
 802024e:	4906      	ldr	r1, [pc, #24]	@ (8020268 <_ZN8touchgfx8LCD24bpp21enableDecompressorRGBEv+0x44>)
 8020250:	f006 fc98 	bl	8026b84 <__aeabi_atexit>
 8020254:	66b4      	str	r4, [r6, #104]	@ 0x68
 8020256:	bd70      	pop	{r4, r5, r6, pc}
 8020258:	24028eb4 	.word	0x24028eb4
 802025c:	24028f14 	.word	0x24028f14
 8020260:	0802c84c 	.word	0x0802c84c
 8020264:	24000000 	.word	0x24000000
 8020268:	0801cefb 	.word	0x0801cefb

0802026c <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh>:
 802026c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020270:	b087      	sub	sp, #28
 8020272:	788d      	ldrb	r5, [r1, #2]
 8020274:	f891 9000 	ldrb.w	r9, [r1]
 8020278:	f9bd 8040 	ldrsh.w	r8, [sp, #64]	@ 0x40
 802027c:	9501      	str	r5, [sp, #4]
 802027e:	784d      	ldrb	r5, [r1, #1]
 8020280:	9203      	str	r2, [sp, #12]
 8020282:	9502      	str	r5, [sp, #8]
 8020284:	f9bd b044 	ldrsh.w	fp, [sp, #68]	@ 0x44
 8020288:	f89d 4050 	ldrb.w	r4, [sp, #80]	@ 0x50
 802028c:	f89d c054 	ldrb.w	ip, [sp, #84]	@ 0x54
 8020290:	f89d e058 	ldrb.w	lr, [sp, #88]	@ 0x58
 8020294:	e9dd 0612 	ldrd	r0, r6, [sp, #72]	@ 0x48
 8020298:	fb06 0708 	mla	r7, r6, r8, r0
 802029c:	2e00      	cmp	r6, #0
 802029e:	eb02 0a07 	add.w	sl, r2, r7
 80202a2:	ea4f 2205 	mov.w	r2, r5, lsl #8
 80202a6:	9d01      	ldr	r5, [sp, #4]
 80202a8:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
 80202ac:	ea45 0509 	orr.w	r5, r5, r9
 80202b0:	9505      	str	r5, [sp, #20]
 80202b2:	f2c0 80b2 	blt.w	802041a <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1ae>
 80202b6:	45b3      	cmp	fp, r6
 80202b8:	f340 80af 	ble.w	802041a <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1ae>
 80202bc:	2800      	cmp	r0, #0
 80202be:	f2c0 80aa 	blt.w	8020416 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1aa>
 80202c2:	4580      	cmp	r8, r0
 80202c4:	f340 80a7 	ble.w	8020416 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1aa>
 80202c8:	9a03      	ldr	r2, [sp, #12]
 80202ca:	5dd7      	ldrb	r7, [r2, r7]
 80202cc:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 80202d0:	441f      	add	r7, r3
 80202d2:	1c42      	adds	r2, r0, #1
 80202d4:	f100 80a4 	bmi.w	8020420 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1b4>
 80202d8:	4590      	cmp	r8, r2
 80202da:	f340 80a1 	ble.w	8020420 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1b4>
 80202de:	2c00      	cmp	r4, #0
 80202e0:	f000 809e 	beq.w	8020420 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1b4>
 80202e4:	f89a 5001 	ldrb.w	r5, [sl, #1]
 80202e8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80202ec:	441d      	add	r5, r3
 80202ee:	3601      	adds	r6, #1
 80202f0:	f100 809a 	bmi.w	8020428 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1bc>
 80202f4:	45b3      	cmp	fp, r6
 80202f6:	f340 8097 	ble.w	8020428 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1bc>
 80202fa:	f1bc 0f00 	cmp.w	ip, #0
 80202fe:	f000 8093 	beq.w	8020428 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1bc>
 8020302:	2800      	cmp	r0, #0
 8020304:	f2c0 808e 	blt.w	8020424 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1b8>
 8020308:	4580      	cmp	r8, r0
 802030a:	f340 808b 	ble.w	8020424 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1b8>
 802030e:	f81a 6008 	ldrb.w	r6, [sl, r8]
 8020312:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8020316:	441e      	add	r6, r3
 8020318:	3001      	adds	r0, #1
 802031a:	f100 8088 	bmi.w	802042e <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1c2>
 802031e:	4580      	cmp	r8, r0
 8020320:	f340 8085 	ble.w	802042e <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1c2>
 8020324:	2c00      	cmp	r4, #0
 8020326:	f000 8082 	beq.w	802042e <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1c2>
 802032a:	44d0      	add	r8, sl
 802032c:	f898 2001 	ldrb.w	r2, [r8, #1]
 8020330:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8020334:	4413      	add	r3, r2
 8020336:	b2a4      	uxth	r4, r4
 8020338:	f895 a000 	ldrb.w	sl, [r5]
 802033c:	fa1f fc8c 	uxth.w	ip, ip
 8020340:	fb04 fb0c 	mul.w	fp, r4, ip
 8020344:	0124      	lsls	r4, r4, #4
 8020346:	ebcb 1c0c 	rsb	ip, fp, ip, lsl #4
 802034a:	f5c4 7880 	rsb	r8, r4, #256	@ 0x100
 802034e:	eba4 040b 	sub.w	r4, r4, fp
 8020352:	fa1f f08c 	uxth.w	r0, ip
 8020356:	b2a2      	uxth	r2, r4
 8020358:	783c      	ldrb	r4, [r7, #0]
 802035a:	eba8 0800 	sub.w	r8, r8, r0
 802035e:	fa1f fc8e 	uxth.w	ip, lr
 8020362:	fb02 fa0a 	mul.w	sl, r2, sl
 8020366:	ea6f 0e0e 	mvn.w	lr, lr
 802036a:	fa1f f888 	uxth.w	r8, r8
 802036e:	fa5f fe8e 	uxtb.w	lr, lr
 8020372:	fb08 aa04 	mla	sl, r8, r4, sl
 8020376:	7834      	ldrb	r4, [r6, #0]
 8020378:	fb19 f90e 	smulbb	r9, r9, lr
 802037c:	fb00 aa04 	mla	sl, r0, r4, sl
 8020380:	781c      	ldrb	r4, [r3, #0]
 8020382:	fb0b a404 	mla	r4, fp, r4, sl
 8020386:	f3c4 2407 	ubfx	r4, r4, #8, #8
 802038a:	fb04 990c 	mla	r9, r4, ip, r9
 802038e:	fa1f f989 	uxth.w	r9, r9
 8020392:	f109 0401 	add.w	r4, r9, #1
 8020396:	eb04 2919 	add.w	r9, r4, r9, lsr #8
 802039a:	ea4f 2929 	mov.w	r9, r9, asr #8
 802039e:	f881 9000 	strb.w	r9, [r1]
 80203a2:	f895 9001 	ldrb.w	r9, [r5, #1]
 80203a6:	787c      	ldrb	r4, [r7, #1]
 80203a8:	fb02 f909 	mul.w	r9, r2, r9
 80203ac:	fb08 9904 	mla	r9, r8, r4, r9
 80203b0:	7874      	ldrb	r4, [r6, #1]
 80203b2:	fb00 9904 	mla	r9, r0, r4, r9
 80203b6:	785c      	ldrb	r4, [r3, #1]
 80203b8:	fb0b 9404 	mla	r4, fp, r4, r9
 80203bc:	f3c4 2a07 	ubfx	sl, r4, #8, #8
 80203c0:	9c02      	ldr	r4, [sp, #8]
 80203c2:	fb14 f90e 	smulbb	r9, r4, lr
 80203c6:	fb0a 940c 	mla	r4, sl, ip, r9
 80203ca:	b2a4      	uxth	r4, r4
 80203cc:	f104 0901 	add.w	r9, r4, #1
 80203d0:	eb09 2414 	add.w	r4, r9, r4, lsr #8
 80203d4:	1224      	asrs	r4, r4, #8
 80203d6:	704c      	strb	r4, [r1, #1]
 80203d8:	78ad      	ldrb	r5, [r5, #2]
 80203da:	78bc      	ldrb	r4, [r7, #2]
 80203dc:	436a      	muls	r2, r5
 80203de:	789b      	ldrb	r3, [r3, #2]
 80203e0:	fb08 2204 	mla	r2, r8, r4, r2
 80203e4:	78b4      	ldrb	r4, [r6, #2]
 80203e6:	fb00 2004 	mla	r0, r0, r4, r2
 80203ea:	fb0b 0b03 	mla	fp, fp, r3, r0
 80203ee:	9b01      	ldr	r3, [sp, #4]
 80203f0:	fb13 fe0e 	smulbb	lr, r3, lr
 80203f4:	f3cb 2b07 	ubfx	fp, fp, #8, #8
 80203f8:	fb0b ec0c 	mla	ip, fp, ip, lr
 80203fc:	fa1f fc8c 	uxth.w	ip, ip
 8020400:	f10c 0e01 	add.w	lr, ip, #1
 8020404:	eb0e 2c1c 	add.w	ip, lr, ip, lsr #8
 8020408:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 802040c:	f881 c002 	strb.w	ip, [r1, #2]
 8020410:	b007      	add	sp, #28
 8020412:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020416:	af05      	add	r7, sp, #20
 8020418:	e75b      	b.n	80202d2 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x66>
 802041a:	ad05      	add	r5, sp, #20
 802041c:	462f      	mov	r7, r5
 802041e:	e766      	b.n	80202ee <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x82>
 8020420:	ad05      	add	r5, sp, #20
 8020422:	e764      	b.n	80202ee <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x82>
 8020424:	ae05      	add	r6, sp, #20
 8020426:	e777      	b.n	8020318 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xac>
 8020428:	ab05      	add	r3, sp, #20
 802042a:	461e      	mov	r6, r3
 802042c:	e783      	b.n	8020336 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xca>
 802042e:	ab05      	add	r3, sp, #20
 8020430:	e781      	b.n	8020336 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xca>

08020432 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8020432:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020436:	b093      	sub	sp, #76	@ 0x4c
 8020438:	9210      	str	r2, [sp, #64]	@ 0x40
 802043a:	9309      	str	r3, [sp, #36]	@ 0x24
 802043c:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 802043e:	f89d 3094 	ldrb.w	r3, [sp, #148]	@ 0x94
 8020442:	9011      	str	r0, [sp, #68]	@ 0x44
 8020444:	930e      	str	r3, [sp, #56]	@ 0x38
 8020446:	6850      	ldr	r0, [r2, #4]
 8020448:	910d      	str	r1, [sp, #52]	@ 0x34
 802044a:	6812      	ldr	r2, [r2, #0]
 802044c:	e9dd 1322 	ldrd	r1, r3, [sp, #136]	@ 0x88
 8020450:	fb00 1303 	mla	r3, r0, r3, r1
 8020454:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8020458:	18d3      	adds	r3, r2, r3
 802045a:	930a      	str	r3, [sp, #40]	@ 0x28
 802045c:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 802045e:	681b      	ldr	r3, [r3, #0]
 8020460:	930c      	str	r3, [sp, #48]	@ 0x30
 8020462:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8020464:	685c      	ldr	r4, [r3, #4]
 8020466:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8020468:	3404      	adds	r4, #4
 802046a:	43db      	mvns	r3, r3
 802046c:	b2db      	uxtb	r3, r3
 802046e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8020470:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8020472:	2b00      	cmp	r3, #0
 8020474:	dc03      	bgt.n	802047e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 8020476:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8020478:	2b00      	cmp	r3, #0
 802047a:	f340 8250 	ble.w	802091e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ec>
 802047e:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8020480:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8020484:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8020488:	1e48      	subs	r0, r1, #1
 802048a:	1e55      	subs	r5, r2, #1
 802048c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802048e:	2b00      	cmp	r3, #0
 8020490:	f340 80ee 	ble.w	8020670 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23e>
 8020494:	9e1d      	ldr	r6, [sp, #116]	@ 0x74
 8020496:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8020498:	1436      	asrs	r6, r6, #16
 802049a:	ea4f 4323 	mov.w	r3, r3, asr #16
 802049e:	d406      	bmi.n	80204ae <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 80204a0:	4286      	cmp	r6, r0
 80204a2:	da04      	bge.n	80204ae <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 80204a4:	2b00      	cmp	r3, #0
 80204a6:	db02      	blt.n	80204ae <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 80204a8:	42ab      	cmp	r3, r5
 80204aa:	f2c0 80e2 	blt.w	8020672 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x240>
 80204ae:	3601      	adds	r6, #1
 80204b0:	f100 80cf 	bmi.w	8020652 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x220>
 80204b4:	42b1      	cmp	r1, r6
 80204b6:	f2c0 80cc 	blt.w	8020652 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x220>
 80204ba:	3301      	adds	r3, #1
 80204bc:	f100 80c9 	bmi.w	8020652 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x220>
 80204c0:	429a      	cmp	r2, r3
 80204c2:	f2c0 80c6 	blt.w	8020652 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x220>
 80204c6:	e9dd b609 	ldrd	fp, r6, [sp, #36]	@ 0x24
 80204ca:	f1bb 0f00 	cmp.w	fp, #0
 80204ce:	f340 80f1 	ble.w	80206b4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x282>
 80204d2:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 80204d4:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 80204d6:	9824      	ldr	r0, [sp, #144]	@ 0x90
 80204d8:	141d      	asrs	r5, r3, #16
 80204da:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80204dc:	f3c2 3103 	ubfx	r1, r2, #12, #4
 80204e0:	68c7      	ldr	r7, [r0, #12]
 80204e2:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 80204e4:	1418      	asrs	r0, r3, #16
 80204e6:	f3c3 3803 	ubfx	r8, r3, #12, #4
 80204ea:	6892      	ldr	r2, [r2, #8]
 80204ec:	f100 8137 	bmi.w	802075e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32c>
 80204f0:	f102 3cff 	add.w	ip, r2, #4294967295
 80204f4:	4560      	cmp	r0, ip
 80204f6:	f280 8132 	bge.w	802075e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32c>
 80204fa:	2d00      	cmp	r5, #0
 80204fc:	f2c0 812f 	blt.w	802075e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32c>
 8020500:	f107 3cff 	add.w	ip, r7, #4294967295
 8020504:	4565      	cmp	r5, ip
 8020506:	f280 812a 	bge.w	802075e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32c>
 802050a:	b212      	sxth	r2, r2
 802050c:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
 802050e:	fb05 0002 	mla	r0, r5, r2, r0
 8020512:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 8020514:	f817 c000 	ldrb.w	ip, [r7, r0]
 8020518:	4405      	add	r5, r0
 802051a:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 802051e:	eb04 0e0c 	add.w	lr, r4, ip
 8020522:	f1b8 0f00 	cmp.w	r8, #0
 8020526:	f000 810c 	beq.w	8020742 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x310>
 802052a:	786f      	ldrb	r7, [r5, #1]
 802052c:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8020530:	4427      	add	r7, r4
 8020532:	2900      	cmp	r1, #0
 8020534:	f000 810d 	beq.w	8020752 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x320>
 8020538:	18a8      	adds	r0, r5, r2
 802053a:	5caa      	ldrb	r2, [r5, r2]
 802053c:	7840      	ldrb	r0, [r0, #1]
 802053e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8020542:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8020546:	4422      	add	r2, r4
 8020548:	4420      	add	r0, r4
 802054a:	fa1f f388 	uxth.w	r3, r8
 802054e:	f814 a00c 	ldrb.w	sl, [r4, ip]
 8020552:	b289      	uxth	r1, r1
 8020554:	f897 c000 	ldrb.w	ip, [r7]
 8020558:	f8bd 5038 	ldrh.w	r5, [sp, #56]	@ 0x38
 802055c:	fb03 f901 	mul.w	r9, r3, r1
 8020560:	011b      	lsls	r3, r3, #4
 8020562:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 8020566:	f5c3 7880 	rsb	r8, r3, #256	@ 0x100
 802056a:	eba3 0309 	sub.w	r3, r3, r9
 802056e:	b289      	uxth	r1, r1
 8020570:	b29b      	uxth	r3, r3
 8020572:	eba8 0801 	sub.w	r8, r8, r1
 8020576:	fb03 fc0c 	mul.w	ip, r3, ip
 802057a:	fa1f f888 	uxth.w	r8, r8
 802057e:	930f      	str	r3, [sp, #60]	@ 0x3c
 8020580:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8020582:	fb08 cc0a 	mla	ip, r8, sl, ip
 8020586:	f892 a000 	ldrb.w	sl, [r2]
 802058a:	fb01 cc0a 	mla	ip, r1, sl, ip
 802058e:	f890 a000 	ldrb.w	sl, [r0]
 8020592:	fb09 cc0a 	mla	ip, r9, sl, ip
 8020596:	f896 a000 	ldrb.w	sl, [r6]
 802059a:	fb1a fa03 	smulbb	sl, sl, r3
 802059e:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 80205a2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80205a4:	fb0c ac05 	mla	ip, ip, r5, sl
 80205a8:	fa1f fc8c 	uxth.w	ip, ip
 80205ac:	f10c 0a01 	add.w	sl, ip, #1
 80205b0:	eb0a 2a1c 	add.w	sl, sl, ip, lsr #8
 80205b4:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 80205b8:	f886 a000 	strb.w	sl, [r6]
 80205bc:	f897 c001 	ldrb.w	ip, [r7, #1]
 80205c0:	f89e a001 	ldrb.w	sl, [lr, #1]
 80205c4:	fb03 fc0c 	mul.w	ip, r3, ip
 80205c8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80205ca:	fb08 cc0a 	mla	ip, r8, sl, ip
 80205ce:	f892 a001 	ldrb.w	sl, [r2, #1]
 80205d2:	fb01 cc0a 	mla	ip, r1, sl, ip
 80205d6:	f890 a001 	ldrb.w	sl, [r0, #1]
 80205da:	fb09 cc0a 	mla	ip, r9, sl, ip
 80205de:	f896 a001 	ldrb.w	sl, [r6, #1]
 80205e2:	fb1a fa03 	smulbb	sl, sl, r3
 80205e6:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 80205ea:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80205ec:	fb0c ac05 	mla	ip, ip, r5, sl
 80205f0:	fa1f fc8c 	uxth.w	ip, ip
 80205f4:	f10c 0a01 	add.w	sl, ip, #1
 80205f8:	eb0a 2c1c 	add.w	ip, sl, ip, lsr #8
 80205fc:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 8020600:	f886 c001 	strb.w	ip, [r6, #1]
 8020604:	78bf      	ldrb	r7, [r7, #2]
 8020606:	f89e c002 	ldrb.w	ip, [lr, #2]
 802060a:	437b      	muls	r3, r7
 802060c:	fb08 330c 	mla	r3, r8, ip, r3
 8020610:	f892 c002 	ldrb.w	ip, [r2, #2]
 8020614:	7882      	ldrb	r2, [r0, #2]
 8020616:	fb01 310c 	mla	r1, r1, ip, r3
 802061a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 802061c:	fb09 1902 	mla	r9, r9, r2, r1
 8020620:	78b1      	ldrb	r1, [r6, #2]
 8020622:	fb11 f103 	smulbb	r1, r1, r3
 8020626:	f3c9 2907 	ubfx	r9, r9, #8, #8
 802062a:	fb09 1505 	mla	r5, r9, r5, r1
 802062e:	b2ad      	uxth	r5, r5
 8020630:	1c6b      	adds	r3, r5, #1
 8020632:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 8020636:	122d      	asrs	r5, r5, #8
 8020638:	70b5      	strb	r5, [r6, #2]
 802063a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 802063c:	3603      	adds	r6, #3
 802063e:	9a1f      	ldr	r2, [sp, #124]	@ 0x7c
 8020640:	f10b 3bff 	add.w	fp, fp, #4294967295
 8020644:	4413      	add	r3, r2
 8020646:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8020648:	931d      	str	r3, [sp, #116]	@ 0x74
 802064a:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 802064c:	4413      	add	r3, r2
 802064e:	931e      	str	r3, [sp, #120]	@ 0x78
 8020650:	e73b      	b.n	80204ca <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 8020652:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8020654:	9e1f      	ldr	r6, [sp, #124]	@ 0x7c
 8020656:	4433      	add	r3, r6
 8020658:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 802065a:	931d      	str	r3, [sp, #116]	@ 0x74
 802065c:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 802065e:	4433      	add	r3, r6
 8020660:	931e      	str	r3, [sp, #120]	@ 0x78
 8020662:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8020664:	3b01      	subs	r3, #1
 8020666:	9309      	str	r3, [sp, #36]	@ 0x24
 8020668:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802066a:	3303      	adds	r3, #3
 802066c:	930a      	str	r3, [sp, #40]	@ 0x28
 802066e:	e70d      	b.n	802048c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 8020670:	d028      	beq.n	80206c4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x292>
 8020672:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8020674:	981f      	ldr	r0, [sp, #124]	@ 0x7c
 8020676:	3b01      	subs	r3, #1
 8020678:	9d1d      	ldr	r5, [sp, #116]	@ 0x74
 802067a:	fb00 5003 	mla	r0, r0, r3, r5
 802067e:	1400      	asrs	r0, r0, #16
 8020680:	f53f af21 	bmi.w	80204c6 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8020684:	3901      	subs	r1, #1
 8020686:	4288      	cmp	r0, r1
 8020688:	f6bf af1d 	bge.w	80204c6 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 802068c:	9920      	ldr	r1, [sp, #128]	@ 0x80
 802068e:	981e      	ldr	r0, [sp, #120]	@ 0x78
 8020690:	fb01 0303 	mla	r3, r1, r3, r0
 8020694:	141b      	asrs	r3, r3, #16
 8020696:	f53f af16 	bmi.w	80204c6 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 802069a:	3a01      	subs	r2, #1
 802069c:	4293      	cmp	r3, r2
 802069e:	f6bf af12 	bge.w	80204c6 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 80206a2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80206a4:	f8dd 9024 	ldr.w	r9, [sp, #36]	@ 0x24
 80206a8:	1cdf      	adds	r7, r3, #3
 80206aa:	f8bd a038 	ldrh.w	sl, [sp, #56]	@ 0x38
 80206ae:	f1b9 0f00 	cmp.w	r9, #0
 80206b2:	dc73      	bgt.n	802079c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36a>
 80206b4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80206b6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80206b8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80206bc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80206c0:	441a      	add	r2, r3
 80206c2:	920a      	str	r2, [sp, #40]	@ 0x28
 80206c4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80206c6:	2b00      	cmp	r3, #0
 80206c8:	f340 8129 	ble.w	802091e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ec>
 80206cc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80206d0:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 80206d2:	ee30 0a04 	vadd.f32	s0, s0, s8
 80206d6:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80206da:	eef0 6a62 	vmov.f32	s13, s5
 80206de:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80206e2:	ee31 1a05 	vadd.f32	s2, s2, s10
 80206e6:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80206ea:	edcd 6a1d 	vstr	s13, [sp, #116]	@ 0x74
 80206ee:	eef0 6a43 	vmov.f32	s13, s6
 80206f2:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80206f6:	edcd 6a1e 	vstr	s13, [sp, #120]	@ 0x78
 80206fa:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80206fe:	ee61 7a27 	vmul.f32	s15, s2, s15
 8020702:	ee77 2a62 	vsub.f32	s5, s14, s5
 8020706:	ee37 3ac3 	vsub.f32	s6, s15, s6
 802070a:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 802070e:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8020712:	ee12 2a90 	vmov	r2, s5
 8020716:	eef0 2a47 	vmov.f32	s5, s14
 802071a:	fb92 f3f3 	sdiv	r3, r2, r3
 802071e:	ee13 2a10 	vmov	r2, s6
 8020722:	931f      	str	r3, [sp, #124]	@ 0x7c
 8020724:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8020726:	eeb0 3a67 	vmov.f32	s6, s15
 802072a:	fb92 f3f3 	sdiv	r3, r2, r3
 802072e:	9320      	str	r3, [sp, #128]	@ 0x80
 8020730:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8020732:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8020734:	3b01      	subs	r3, #1
 8020736:	930d      	str	r3, [sp, #52]	@ 0x34
 8020738:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 802073a:	bf08      	it	eq
 802073c:	4613      	moveq	r3, r2
 802073e:	9309      	str	r3, [sp, #36]	@ 0x24
 8020740:	e696      	b.n	8020470 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 8020742:	b149      	cbz	r1, 8020758 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x326>
 8020744:	5caa      	ldrb	r2, [r5, r2]
 8020746:	4670      	mov	r0, lr
 8020748:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 802074c:	4422      	add	r2, r4
 802074e:	4677      	mov	r7, lr
 8020750:	e6fb      	b.n	802054a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x118>
 8020752:	4670      	mov	r0, lr
 8020754:	4672      	mov	r2, lr
 8020756:	e6f8      	b.n	802054a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x118>
 8020758:	4670      	mov	r0, lr
 802075a:	4672      	mov	r2, lr
 802075c:	e7f7      	b.n	802074e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31c>
 802075e:	f110 0c01 	adds.w	ip, r0, #1
 8020762:	f53f af6a 	bmi.w	802063a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 8020766:	4562      	cmp	r2, ip
 8020768:	f6ff af67 	blt.w	802063a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 802076c:	f115 0c01 	adds.w	ip, r5, #1
 8020770:	f53f af63 	bmi.w	802063a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 8020774:	4567      	cmp	r7, ip
 8020776:	f6ff af60 	blt.w	802063a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 802077a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802077c:	b23f      	sxth	r7, r7
 802077e:	b212      	sxth	r2, r2
 8020780:	9002      	str	r0, [sp, #8]
 8020782:	9701      	str	r7, [sp, #4]
 8020784:	9200      	str	r2, [sp, #0]
 8020786:	9811      	ldr	r0, [sp, #68]	@ 0x44
 8020788:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 802078a:	e9cd 1305 	strd	r1, r3, [sp, #20]
 802078e:	e9cd 5803 	strd	r5, r8, [sp, #12]
 8020792:	4623      	mov	r3, r4
 8020794:	4631      	mov	r1, r6
 8020796:	f7ff fd69 	bl	802026c <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh>
 802079a:	e74e      	b.n	802063a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 802079c:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 802079e:	981e      	ldr	r0, [sp, #120]	@ 0x78
 80207a0:	f3c2 3103 	ubfx	r1, r2, #12, #4
 80207a4:	9d1d      	ldr	r5, [sp, #116]	@ 0x74
 80207a6:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 80207a8:	1400      	asrs	r0, r0, #16
 80207aa:	142d      	asrs	r5, r5, #16
 80207ac:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80207ae:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 80207b2:	f3c3 3303 	ubfx	r3, r3, #12, #4
 80207b6:	fb02 5000 	mla	r0, r2, r0, r5
 80207ba:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 80207bc:	f815 e000 	ldrb.w	lr, [r5, r0]
 80207c0:	eb05 0c00 	add.w	ip, r5, r0
 80207c4:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 80207c8:	eb04 060e 	add.w	r6, r4, lr
 80207cc:	2b00      	cmp	r3, #0
 80207ce:	f000 8097 	beq.w	8020900 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ce>
 80207d2:	f89c 5001 	ldrb.w	r5, [ip, #1]
 80207d6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80207da:	4425      	add	r5, r4
 80207dc:	2900      	cmp	r1, #0
 80207de:	f000 8098 	beq.w	8020912 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e0>
 80207e2:	eb0c 0002 	add.w	r0, ip, r2
 80207e6:	f81c 2002 	ldrb.w	r2, [ip, r2]
 80207ea:	7840      	ldrb	r0, [r0, #1]
 80207ec:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80207f0:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80207f4:	4422      	add	r2, r4
 80207f6:	4420      	add	r0, r4
 80207f8:	b29b      	uxth	r3, r3
 80207fa:	f814 b00e 	ldrb.w	fp, [r4, lr]
 80207fe:	b289      	uxth	r1, r1
 8020800:	f895 e000 	ldrb.w	lr, [r5]
 8020804:	3703      	adds	r7, #3
 8020806:	f109 39ff 	add.w	r9, r9, #4294967295
 802080a:	fb03 f801 	mul.w	r8, r3, r1
 802080e:	011b      	lsls	r3, r3, #4
 8020810:	ebc8 1101 	rsb	r1, r8, r1, lsl #4
 8020814:	f5c3 7c80 	rsb	ip, r3, #256	@ 0x100
 8020818:	eba3 0308 	sub.w	r3, r3, r8
 802081c:	b289      	uxth	r1, r1
 802081e:	b29b      	uxth	r3, r3
 8020820:	ebac 0c01 	sub.w	ip, ip, r1
 8020824:	fb03 fe0e 	mul.w	lr, r3, lr
 8020828:	fa1f fc8c 	uxth.w	ip, ip
 802082c:	930f      	str	r3, [sp, #60]	@ 0x3c
 802082e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8020830:	fb0c ee0b 	mla	lr, ip, fp, lr
 8020834:	f892 b000 	ldrb.w	fp, [r2]
 8020838:	fb01 ee0b 	mla	lr, r1, fp, lr
 802083c:	f890 b000 	ldrb.w	fp, [r0]
 8020840:	fb08 ee0b 	mla	lr, r8, fp, lr
 8020844:	f817 bc06 	ldrb.w	fp, [r7, #-6]
 8020848:	fb1b fb03 	smulbb	fp, fp, r3
 802084c:	f3ce 2e07 	ubfx	lr, lr, #8, #8
 8020850:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8020852:	fb0e be0a 	mla	lr, lr, sl, fp
 8020856:	fa1f fe8e 	uxth.w	lr, lr
 802085a:	f10e 0b01 	add.w	fp, lr, #1
 802085e:	eb0b 2e1e 	add.w	lr, fp, lr, lsr #8
 8020862:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8020866:	f807 ec06 	strb.w	lr, [r7, #-6]
 802086a:	f895 e001 	ldrb.w	lr, [r5, #1]
 802086e:	f896 b001 	ldrb.w	fp, [r6, #1]
 8020872:	fb03 fe0e 	mul.w	lr, r3, lr
 8020876:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8020878:	fb0c ee0b 	mla	lr, ip, fp, lr
 802087c:	f892 b001 	ldrb.w	fp, [r2, #1]
 8020880:	fb01 ee0b 	mla	lr, r1, fp, lr
 8020884:	f890 b001 	ldrb.w	fp, [r0, #1]
 8020888:	fb08 ee0b 	mla	lr, r8, fp, lr
 802088c:	f817 bc05 	ldrb.w	fp, [r7, #-5]
 8020890:	fb1b fb03 	smulbb	fp, fp, r3
 8020894:	f3ce 2e07 	ubfx	lr, lr, #8, #8
 8020898:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 802089a:	fb0e be0a 	mla	lr, lr, sl, fp
 802089e:	fa1f fe8e 	uxth.w	lr, lr
 80208a2:	f10e 0b01 	add.w	fp, lr, #1
 80208a6:	eb0b 2e1e 	add.w	lr, fp, lr, lsr #8
 80208aa:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 80208ae:	f807 ec05 	strb.w	lr, [r7, #-5]
 80208b2:	78ad      	ldrb	r5, [r5, #2]
 80208b4:	78b6      	ldrb	r6, [r6, #2]
 80208b6:	436b      	muls	r3, r5
 80208b8:	7895      	ldrb	r5, [r2, #2]
 80208ba:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80208bc:	fb0c 3306 	mla	r3, ip, r6, r3
 80208c0:	fb01 3305 	mla	r3, r1, r5, r3
 80208c4:	7885      	ldrb	r5, [r0, #2]
 80208c6:	fb08 3805 	mla	r8, r8, r5, r3
 80208ca:	f817 3c04 	ldrb.w	r3, [r7, #-4]
 80208ce:	fb13 f302 	smulbb	r3, r3, r2
 80208d2:	f3c8 2807 	ubfx	r8, r8, #8, #8
 80208d6:	9a1f      	ldr	r2, [sp, #124]	@ 0x7c
 80208d8:	fb08 380a 	mla	r8, r8, sl, r3
 80208dc:	fa1f f888 	uxth.w	r8, r8
 80208e0:	f108 0301 	add.w	r3, r8, #1
 80208e4:	eb03 2818 	add.w	r8, r3, r8, lsr #8
 80208e8:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80208ea:	4413      	add	r3, r2
 80208ec:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80208ee:	ea4f 2828 	mov.w	r8, r8, asr #8
 80208f2:	931d      	str	r3, [sp, #116]	@ 0x74
 80208f4:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 80208f6:	f807 8c04 	strb.w	r8, [r7, #-4]
 80208fa:	4413      	add	r3, r2
 80208fc:	931e      	str	r3, [sp, #120]	@ 0x78
 80208fe:	e6d6      	b.n	80206ae <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 8020900:	b151      	cbz	r1, 8020918 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e6>
 8020902:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8020906:	4630      	mov	r0, r6
 8020908:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 802090c:	4422      	add	r2, r4
 802090e:	4635      	mov	r5, r6
 8020910:	e772      	b.n	80207f8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c6>
 8020912:	4630      	mov	r0, r6
 8020914:	4632      	mov	r2, r6
 8020916:	e76f      	b.n	80207f8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c6>
 8020918:	4630      	mov	r0, r6
 802091a:	4632      	mov	r2, r6
 802091c:	e7f7      	b.n	802090e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4dc>
 802091e:	b013      	add	sp, #76	@ 0x4c
 8020920:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08020924 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh>:
 8020924:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8020928:	784c      	ldrb	r4, [r1, #1]
 802092a:	f891 a002 	ldrb.w	sl, [r1, #2]
 802092e:	0224      	lsls	r4, r4, #8
 8020930:	f9bd e028 	ldrsh.w	lr, [sp, #40]	@ 0x28
 8020934:	f9bd 902c 	ldrsh.w	r9, [sp, #44]	@ 0x2c
 8020938:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 802093c:	f891 a000 	ldrb.w	sl, [r1]
 8020940:	f89d 0038 	ldrb.w	r0, [sp, #56]	@ 0x38
 8020944:	ea44 040a 	orr.w	r4, r4, sl
 8020948:	f89d 603c 	ldrb.w	r6, [sp, #60]	@ 0x3c
 802094c:	e9dd c50c 	ldrd	ip, r5, [sp, #48]	@ 0x30
 8020950:	9401      	str	r4, [sp, #4]
 8020952:	fb05 c70e 	mla	r7, r5, lr, ip
 8020956:	2d00      	cmp	r5, #0
 8020958:	eb02 0807 	add.w	r8, r2, r7
 802095c:	db72      	blt.n	8020a44 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x120>
 802095e:	45a9      	cmp	r9, r5
 8020960:	dd70      	ble.n	8020a44 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x120>
 8020962:	f1bc 0f00 	cmp.w	ip, #0
 8020966:	db6b      	blt.n	8020a40 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x11c>
 8020968:	45e6      	cmp	lr, ip
 802096a:	dd69      	ble.n	8020a40 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x11c>
 802096c:	5dd7      	ldrb	r7, [r2, r7]
 802096e:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8020972:	441f      	add	r7, r3
 8020974:	f11c 0201 	adds.w	r2, ip, #1
 8020978:	d467      	bmi.n	8020a4a <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x126>
 802097a:	4596      	cmp	lr, r2
 802097c:	dd65      	ble.n	8020a4a <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x126>
 802097e:	2800      	cmp	r0, #0
 8020980:	d063      	beq.n	8020a4a <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x126>
 8020982:	f898 4001 	ldrb.w	r4, [r8, #1]
 8020986:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 802098a:	441c      	add	r4, r3
 802098c:	3501      	adds	r5, #1
 802098e:	d460      	bmi.n	8020a52 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x12e>
 8020990:	45a9      	cmp	r9, r5
 8020992:	dd5e      	ble.n	8020a52 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x12e>
 8020994:	2e00      	cmp	r6, #0
 8020996:	d05c      	beq.n	8020a52 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x12e>
 8020998:	f1bc 0f00 	cmp.w	ip, #0
 802099c:	db57      	blt.n	8020a4e <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x12a>
 802099e:	45e6      	cmp	lr, ip
 80209a0:	dd55      	ble.n	8020a4e <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x12a>
 80209a2:	f818 500e 	ldrb.w	r5, [r8, lr]
 80209a6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80209aa:	441d      	add	r5, r3
 80209ac:	f11c 0201 	adds.w	r2, ip, #1
 80209b0:	d452      	bmi.n	8020a58 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x134>
 80209b2:	4596      	cmp	lr, r2
 80209b4:	dd50      	ble.n	8020a58 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x134>
 80209b6:	2800      	cmp	r0, #0
 80209b8:	d04e      	beq.n	8020a58 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x134>
 80209ba:	44c6      	add	lr, r8
 80209bc:	f89e 2001 	ldrb.w	r2, [lr, #1]
 80209c0:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80209c4:	4413      	add	r3, r2
 80209c6:	b280      	uxth	r0, r0
 80209c8:	f897 8000 	ldrb.w	r8, [r7]
 80209cc:	b2b2      	uxth	r2, r6
 80209ce:	fb00 f602 	mul.w	r6, r0, r2
 80209d2:	0100      	lsls	r0, r0, #4
 80209d4:	ebc6 1202 	rsb	r2, r6, r2, lsl #4
 80209d8:	f5c0 7e80 	rsb	lr, r0, #256	@ 0x100
 80209dc:	1b80      	subs	r0, r0, r6
 80209de:	fa1f fc82 	uxth.w	ip, r2
 80209e2:	b282      	uxth	r2, r0
 80209e4:	7820      	ldrb	r0, [r4, #0]
 80209e6:	ebae 0e0c 	sub.w	lr, lr, ip
 80209ea:	4350      	muls	r0, r2
 80209ec:	fa1f fe8e 	uxth.w	lr, lr
 80209f0:	fb0e 0808 	mla	r8, lr, r8, r0
 80209f4:	7828      	ldrb	r0, [r5, #0]
 80209f6:	fb0c 8800 	mla	r8, ip, r0, r8
 80209fa:	7818      	ldrb	r0, [r3, #0]
 80209fc:	fb06 8000 	mla	r0, r6, r0, r8
 8020a00:	1200      	asrs	r0, r0, #8
 8020a02:	7008      	strb	r0, [r1, #0]
 8020a04:	7860      	ldrb	r0, [r4, #1]
 8020a06:	f897 8001 	ldrb.w	r8, [r7, #1]
 8020a0a:	4350      	muls	r0, r2
 8020a0c:	fb0e 0808 	mla	r8, lr, r8, r0
 8020a10:	7868      	ldrb	r0, [r5, #1]
 8020a12:	fb0c 8800 	mla	r8, ip, r0, r8
 8020a16:	7858      	ldrb	r0, [r3, #1]
 8020a18:	fb06 8000 	mla	r0, r6, r0, r8
 8020a1c:	1200      	asrs	r0, r0, #8
 8020a1e:	7048      	strb	r0, [r1, #1]
 8020a20:	78a0      	ldrb	r0, [r4, #2]
 8020a22:	78bf      	ldrb	r7, [r7, #2]
 8020a24:	4350      	muls	r0, r2
 8020a26:	78aa      	ldrb	r2, [r5, #2]
 8020a28:	fb0e 0007 	mla	r0, lr, r7, r0
 8020a2c:	fb0c 0c02 	mla	ip, ip, r2, r0
 8020a30:	789a      	ldrb	r2, [r3, #2]
 8020a32:	fb06 c202 	mla	r2, r6, r2, ip
 8020a36:	1212      	asrs	r2, r2, #8
 8020a38:	708a      	strb	r2, [r1, #2]
 8020a3a:	b002      	add	sp, #8
 8020a3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8020a40:	af01      	add	r7, sp, #4
 8020a42:	e797      	b.n	8020974 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x50>
 8020a44:	ac01      	add	r4, sp, #4
 8020a46:	4627      	mov	r7, r4
 8020a48:	e7a0      	b.n	802098c <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x68>
 8020a4a:	ac01      	add	r4, sp, #4
 8020a4c:	e79e      	b.n	802098c <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x68>
 8020a4e:	ad01      	add	r5, sp, #4
 8020a50:	e7ac      	b.n	80209ac <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x88>
 8020a52:	ab01      	add	r3, sp, #4
 8020a54:	461d      	mov	r5, r3
 8020a56:	e7b6      	b.n	80209c6 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xa2>
 8020a58:	ab01      	add	r3, sp, #4
 8020a5a:	e7b4      	b.n	80209c6 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xa2>

08020a5c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8020a5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020a60:	b08d      	sub	sp, #52	@ 0x34
 8020a62:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8020a66:	e9cd 1209 	strd	r1, r2, [sp, #36]	@ 0x24
 8020a6a:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8020a6c:	900b      	str	r0, [sp, #44]	@ 0x2c
 8020a6e:	9306      	str	r3, [sp, #24]
 8020a70:	6850      	ldr	r0, [r2, #4]
 8020a72:	6812      	ldr	r2, [r2, #0]
 8020a74:	9c17      	ldr	r4, [sp, #92]	@ 0x5c
 8020a76:	e9dd 131c 	ldrd	r1, r3, [sp, #112]	@ 0x70
 8020a7a:	fb00 1303 	mla	r3, r0, r3, r1
 8020a7e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8020a82:	18d3      	adds	r3, r2, r3
 8020a84:	9307      	str	r3, [sp, #28]
 8020a86:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8020a88:	681b      	ldr	r3, [r3, #0]
 8020a8a:	9308      	str	r3, [sp, #32]
 8020a8c:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8020a8e:	685d      	ldr	r5, [r3, #4]
 8020a90:	3504      	adds	r5, #4
 8020a92:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8020a94:	2b00      	cmp	r3, #0
 8020a96:	dc03      	bgt.n	8020aa0 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44>
 8020a98:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8020a9a:	2b00      	cmp	r3, #0
 8020a9c:	f340 81e6 	ble.w	8020e6c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x410>
 8020aa0:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8020aa2:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8020aa6:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8020aaa:	1e48      	subs	r0, r1, #1
 8020aac:	1e56      	subs	r6, r2, #1
 8020aae:	9b06      	ldr	r3, [sp, #24]
 8020ab0:	2b00      	cmp	r3, #0
 8020ab2:	f340 80bd 	ble.w	8020c30 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d4>
 8020ab6:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8020ab8:	1427      	asrs	r7, r4, #16
 8020aba:	ea4f 4323 	mov.w	r3, r3, asr #16
 8020abe:	d406      	bmi.n	8020ace <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8020ac0:	4287      	cmp	r7, r0
 8020ac2:	da04      	bge.n	8020ace <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8020ac4:	2b00      	cmp	r3, #0
 8020ac6:	db02      	blt.n	8020ace <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8020ac8:	42b3      	cmp	r3, r6
 8020aca:	f2c0 80b2 	blt.w	8020c32 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d6>
 8020ace:	3701      	adds	r7, #1
 8020ad0:	f100 80a1 	bmi.w	8020c16 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 8020ad4:	42b9      	cmp	r1, r7
 8020ad6:	f2c0 809e 	blt.w	8020c16 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 8020ada:	3301      	adds	r3, #1
 8020adc:	f100 809b 	bmi.w	8020c16 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 8020ae0:	429a      	cmp	r2, r3
 8020ae2:	f2c0 8098 	blt.w	8020c16 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 8020ae6:	e9dd b606 	ldrd	fp, r6, [sp, #24]
 8020aea:	f1bb 0f00 	cmp.w	fp, #0
 8020aee:	f340 80bf 	ble.w	8020c70 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 8020af2:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8020af4:	981e      	ldr	r0, [sp, #120]	@ 0x78
 8020af6:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8020af8:	f3c2 3103 	ubfx	r1, r2, #12, #4
 8020afc:	f8d0 c00c 	ldr.w	ip, [r0, #12]
 8020b00:	1420      	asrs	r0, r4, #16
 8020b02:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 8020b04:	ea4f 4723 	mov.w	r7, r3, asr #16
 8020b08:	f3c4 3303 	ubfx	r3, r4, #12, #4
 8020b0c:	6892      	ldr	r2, [r2, #8]
 8020b0e:	f100 8103 	bmi.w	8020d18 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2bc>
 8020b12:	f102 3eff 	add.w	lr, r2, #4294967295
 8020b16:	4570      	cmp	r0, lr
 8020b18:	f280 80fe 	bge.w	8020d18 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2bc>
 8020b1c:	2f00      	cmp	r7, #0
 8020b1e:	f2c0 80fb 	blt.w	8020d18 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2bc>
 8020b22:	f10c 3eff 	add.w	lr, ip, #4294967295
 8020b26:	4577      	cmp	r7, lr
 8020b28:	f280 80f6 	bge.w	8020d18 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2bc>
 8020b2c:	b212      	sxth	r2, r2
 8020b2e:	fb07 0002 	mla	r0, r7, r2, r0
 8020b32:	9f08      	ldr	r7, [sp, #32]
 8020b34:	f817 8000 	ldrb.w	r8, [r7, r0]
 8020b38:	eb07 0e00 	add.w	lr, r7, r0
 8020b3c:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 8020b40:	eb05 0c08 	add.w	ip, r5, r8
 8020b44:	2b00      	cmp	r3, #0
 8020b46:	f000 80d8 	beq.w	8020cfa <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29e>
 8020b4a:	f89e 7001 	ldrb.w	r7, [lr, #1]
 8020b4e:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8020b52:	442f      	add	r7, r5
 8020b54:	2900      	cmp	r1, #0
 8020b56:	f000 80d9 	beq.w	8020d0c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 8020b5a:	eb0e 0002 	add.w	r0, lr, r2
 8020b5e:	f81e 2002 	ldrb.w	r2, [lr, r2]
 8020b62:	7840      	ldrb	r0, [r0, #1]
 8020b64:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8020b68:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8020b6c:	442a      	add	r2, r5
 8020b6e:	4428      	add	r0, r5
 8020b70:	b29b      	uxth	r3, r3
 8020b72:	f815 a008 	ldrb.w	sl, [r5, r8]
 8020b76:	b289      	uxth	r1, r1
 8020b78:	f897 8000 	ldrb.w	r8, [r7]
 8020b7c:	fb03 f901 	mul.w	r9, r3, r1
 8020b80:	011b      	lsls	r3, r3, #4
 8020b82:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 8020b86:	f5c3 7e80 	rsb	lr, r3, #256	@ 0x100
 8020b8a:	eba3 0309 	sub.w	r3, r3, r9
 8020b8e:	b289      	uxth	r1, r1
 8020b90:	b29b      	uxth	r3, r3
 8020b92:	ebae 0e01 	sub.w	lr, lr, r1
 8020b96:	fb03 f808 	mul.w	r8, r3, r8
 8020b9a:	fa1f fe8e 	uxth.w	lr, lr
 8020b9e:	fb0e 880a 	mla	r8, lr, sl, r8
 8020ba2:	f892 a000 	ldrb.w	sl, [r2]
 8020ba6:	fb01 880a 	mla	r8, r1, sl, r8
 8020baa:	f890 a000 	ldrb.w	sl, [r0]
 8020bae:	fb09 880a 	mla	r8, r9, sl, r8
 8020bb2:	ea4f 2828 	mov.w	r8, r8, asr #8
 8020bb6:	f886 8000 	strb.w	r8, [r6]
 8020bba:	f897 8001 	ldrb.w	r8, [r7, #1]
 8020bbe:	f89c a001 	ldrb.w	sl, [ip, #1]
 8020bc2:	fb03 f808 	mul.w	r8, r3, r8
 8020bc6:	fb0e 880a 	mla	r8, lr, sl, r8
 8020bca:	f892 a001 	ldrb.w	sl, [r2, #1]
 8020bce:	fb01 880a 	mla	r8, r1, sl, r8
 8020bd2:	f890 a001 	ldrb.w	sl, [r0, #1]
 8020bd6:	fb09 880a 	mla	r8, r9, sl, r8
 8020bda:	ea4f 2828 	mov.w	r8, r8, asr #8
 8020bde:	f886 8001 	strb.w	r8, [r6, #1]
 8020be2:	78bf      	ldrb	r7, [r7, #2]
 8020be4:	f89c c002 	ldrb.w	ip, [ip, #2]
 8020be8:	437b      	muls	r3, r7
 8020bea:	7892      	ldrb	r2, [r2, #2]
 8020bec:	fb0e 330c 	mla	r3, lr, ip, r3
 8020bf0:	fb01 3102 	mla	r1, r1, r2, r3
 8020bf4:	7882      	ldrb	r2, [r0, #2]
 8020bf6:	fb09 1902 	mla	r9, r9, r2, r1
 8020bfa:	ea4f 2929 	mov.w	r9, r9, asr #8
 8020bfe:	f886 9002 	strb.w	r9, [r6, #2]
 8020c02:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8020c04:	3603      	adds	r6, #3
 8020c06:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8020c08:	f10b 3bff 	add.w	fp, fp, #4294967295
 8020c0c:	441c      	add	r4, r3
 8020c0e:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8020c10:	4413      	add	r3, r2
 8020c12:	9318      	str	r3, [sp, #96]	@ 0x60
 8020c14:	e769      	b.n	8020aea <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8020c16:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8020c18:	9f1a      	ldr	r7, [sp, #104]	@ 0x68
 8020c1a:	441c      	add	r4, r3
 8020c1c:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8020c1e:	443b      	add	r3, r7
 8020c20:	9318      	str	r3, [sp, #96]	@ 0x60
 8020c22:	9b06      	ldr	r3, [sp, #24]
 8020c24:	3b01      	subs	r3, #1
 8020c26:	9306      	str	r3, [sp, #24]
 8020c28:	9b07      	ldr	r3, [sp, #28]
 8020c2a:	3303      	adds	r3, #3
 8020c2c:	9307      	str	r3, [sp, #28]
 8020c2e:	e73e      	b.n	8020aae <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 8020c30:	d026      	beq.n	8020c80 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x224>
 8020c32:	9b06      	ldr	r3, [sp, #24]
 8020c34:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8020c36:	3b01      	subs	r3, #1
 8020c38:	fb00 4003 	mla	r0, r0, r3, r4
 8020c3c:	1400      	asrs	r0, r0, #16
 8020c3e:	f53f af52 	bmi.w	8020ae6 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 8020c42:	3901      	subs	r1, #1
 8020c44:	4288      	cmp	r0, r1
 8020c46:	f6bf af4e 	bge.w	8020ae6 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 8020c4a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8020c4c:	9818      	ldr	r0, [sp, #96]	@ 0x60
 8020c4e:	fb01 0303 	mla	r3, r1, r3, r0
 8020c52:	141b      	asrs	r3, r3, #16
 8020c54:	f53f af47 	bmi.w	8020ae6 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 8020c58:	3a01      	subs	r2, #1
 8020c5a:	4293      	cmp	r3, r2
 8020c5c:	f6bf af43 	bge.w	8020ae6 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 8020c60:	9b07      	ldr	r3, [sp, #28]
 8020c62:	f8dd a018 	ldr.w	sl, [sp, #24]
 8020c66:	f103 0803 	add.w	r8, r3, #3
 8020c6a:	f1ba 0f00 	cmp.w	sl, #0
 8020c6e:	dc71      	bgt.n	8020d54 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f8>
 8020c70:	9b06      	ldr	r3, [sp, #24]
 8020c72:	9a07      	ldr	r2, [sp, #28]
 8020c74:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8020c78:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8020c7c:	441a      	add	r2, r3
 8020c7e:	9207      	str	r2, [sp, #28]
 8020c80:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8020c82:	2b00      	cmp	r3, #0
 8020c84:	f340 80f2 	ble.w	8020e6c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x410>
 8020c88:	ee30 0a04 	vadd.f32	s0, s0, s8
 8020c8c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8020c8e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8020c92:	eeb0 6a62 	vmov.f32	s12, s5
 8020c96:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8020c9a:	ee31 1a05 	vadd.f32	s2, s2, s10
 8020c9e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8020ca2:	ee16 4a10 	vmov	r4, s12
 8020ca6:	eeb0 6a43 	vmov.f32	s12, s6
 8020caa:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8020cae:	ed8d 6a18 	vstr	s12, [sp, #96]	@ 0x60
 8020cb2:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8020cb6:	ee61 7a27 	vmul.f32	s15, s2, s15
 8020cba:	ee77 2a62 	vsub.f32	s5, s14, s5
 8020cbe:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8020cc2:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8020cc6:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8020cca:	ee12 2a90 	vmov	r2, s5
 8020cce:	eef0 2a47 	vmov.f32	s5, s14
 8020cd2:	fb92 f3f3 	sdiv	r3, r2, r3
 8020cd6:	ee13 2a10 	vmov	r2, s6
 8020cda:	9319      	str	r3, [sp, #100]	@ 0x64
 8020cdc:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8020cde:	eeb0 3a67 	vmov.f32	s6, s15
 8020ce2:	fb92 f3f3 	sdiv	r3, r2, r3
 8020ce6:	931a      	str	r3, [sp, #104]	@ 0x68
 8020ce8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8020cea:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8020cec:	3b01      	subs	r3, #1
 8020cee:	9309      	str	r3, [sp, #36]	@ 0x24
 8020cf0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8020cf2:	bf08      	it	eq
 8020cf4:	4613      	moveq	r3, r2
 8020cf6:	9306      	str	r3, [sp, #24]
 8020cf8:	e6cb      	b.n	8020a92 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36>
 8020cfa:	b151      	cbz	r1, 8020d12 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b6>
 8020cfc:	f81e 2002 	ldrb.w	r2, [lr, r2]
 8020d00:	4660      	mov	r0, ip
 8020d02:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8020d06:	442a      	add	r2, r5
 8020d08:	4667      	mov	r7, ip
 8020d0a:	e731      	b.n	8020b70 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x114>
 8020d0c:	4660      	mov	r0, ip
 8020d0e:	4662      	mov	r2, ip
 8020d10:	e72e      	b.n	8020b70 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x114>
 8020d12:	4660      	mov	r0, ip
 8020d14:	4662      	mov	r2, ip
 8020d16:	e7f7      	b.n	8020d08 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ac>
 8020d18:	f110 0e01 	adds.w	lr, r0, #1
 8020d1c:	f53f af71 	bmi.w	8020c02 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 8020d20:	4572      	cmp	r2, lr
 8020d22:	f6ff af6e 	blt.w	8020c02 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 8020d26:	f117 0e01 	adds.w	lr, r7, #1
 8020d2a:	f53f af6a 	bmi.w	8020c02 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 8020d2e:	45f4      	cmp	ip, lr
 8020d30:	f6ff af67 	blt.w	8020c02 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 8020d34:	b212      	sxth	r2, r2
 8020d36:	e9cd 3104 	strd	r3, r1, [sp, #16]
 8020d3a:	fa0f f38c 	sxth.w	r3, ip
 8020d3e:	9200      	str	r2, [sp, #0]
 8020d40:	4631      	mov	r1, r6
 8020d42:	9a08      	ldr	r2, [sp, #32]
 8020d44:	9301      	str	r3, [sp, #4]
 8020d46:	462b      	mov	r3, r5
 8020d48:	e9cd 0702 	strd	r0, r7, [sp, #8]
 8020d4c:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8020d4e:	f7ff fde9 	bl	8020924 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh>
 8020d52:	e756      	b.n	8020c02 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 8020d54:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8020d56:	1426      	asrs	r6, r4, #16
 8020d58:	9818      	ldr	r0, [sp, #96]	@ 0x60
 8020d5a:	f3c4 3303 	ubfx	r3, r4, #12, #4
 8020d5e:	f3c2 3103 	ubfx	r1, r2, #12, #4
 8020d62:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 8020d64:	1400      	asrs	r0, r0, #16
 8020d66:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 8020d6a:	fb02 6000 	mla	r0, r2, r0, r6
 8020d6e:	9e08      	ldr	r6, [sp, #32]
 8020d70:	f816 e000 	ldrb.w	lr, [r6, r0]
 8020d74:	eb06 0c00 	add.w	ip, r6, r0
 8020d78:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 8020d7c:	eb05 070e 	add.w	r7, r5, lr
 8020d80:	2b00      	cmp	r3, #0
 8020d82:	d064      	beq.n	8020e4e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f2>
 8020d84:	f89c 6001 	ldrb.w	r6, [ip, #1]
 8020d88:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8020d8c:	442e      	add	r6, r5
 8020d8e:	2900      	cmp	r1, #0
 8020d90:	d066      	beq.n	8020e60 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x404>
 8020d92:	eb0c 0002 	add.w	r0, ip, r2
 8020d96:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8020d9a:	7840      	ldrb	r0, [r0, #1]
 8020d9c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8020da0:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8020da4:	442a      	add	r2, r5
 8020da6:	4428      	add	r0, r5
 8020da8:	b29b      	uxth	r3, r3
 8020daa:	f815 b00e 	ldrb.w	fp, [r5, lr]
 8020dae:	b289      	uxth	r1, r1
 8020db0:	f896 e000 	ldrb.w	lr, [r6]
 8020db4:	f108 0803 	add.w	r8, r8, #3
 8020db8:	f10a 3aff 	add.w	sl, sl, #4294967295
 8020dbc:	fb03 f901 	mul.w	r9, r3, r1
 8020dc0:	011b      	lsls	r3, r3, #4
 8020dc2:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 8020dc6:	f5c3 7c80 	rsb	ip, r3, #256	@ 0x100
 8020dca:	eba3 0309 	sub.w	r3, r3, r9
 8020dce:	b289      	uxth	r1, r1
 8020dd0:	b29b      	uxth	r3, r3
 8020dd2:	ebac 0c01 	sub.w	ip, ip, r1
 8020dd6:	fb03 fe0e 	mul.w	lr, r3, lr
 8020dda:	fa1f fc8c 	uxth.w	ip, ip
 8020dde:	fb0c ee0b 	mla	lr, ip, fp, lr
 8020de2:	f892 b000 	ldrb.w	fp, [r2]
 8020de6:	fb01 ee0b 	mla	lr, r1, fp, lr
 8020dea:	f890 b000 	ldrb.w	fp, [r0]
 8020dee:	fb09 ee0b 	mla	lr, r9, fp, lr
 8020df2:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8020df6:	f808 ec06 	strb.w	lr, [r8, #-6]
 8020dfa:	f896 e001 	ldrb.w	lr, [r6, #1]
 8020dfe:	f897 b001 	ldrb.w	fp, [r7, #1]
 8020e02:	fb03 fe0e 	mul.w	lr, r3, lr
 8020e06:	fb0c ee0b 	mla	lr, ip, fp, lr
 8020e0a:	f892 b001 	ldrb.w	fp, [r2, #1]
 8020e0e:	fb01 ee0b 	mla	lr, r1, fp, lr
 8020e12:	f890 b001 	ldrb.w	fp, [r0, #1]
 8020e16:	fb09 ee0b 	mla	lr, r9, fp, lr
 8020e1a:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8020e1e:	f808 ec05 	strb.w	lr, [r8, #-5]
 8020e22:	78b6      	ldrb	r6, [r6, #2]
 8020e24:	78bf      	ldrb	r7, [r7, #2]
 8020e26:	4373      	muls	r3, r6
 8020e28:	7896      	ldrb	r6, [r2, #2]
 8020e2a:	7882      	ldrb	r2, [r0, #2]
 8020e2c:	fb0c 3307 	mla	r3, ip, r7, r3
 8020e30:	fb01 3306 	mla	r3, r1, r6, r3
 8020e34:	fb09 3902 	mla	r9, r9, r2, r3
 8020e38:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8020e3a:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8020e3c:	441c      	add	r4, r3
 8020e3e:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8020e40:	ea4f 2929 	mov.w	r9, r9, asr #8
 8020e44:	4413      	add	r3, r2
 8020e46:	f808 9c04 	strb.w	r9, [r8, #-4]
 8020e4a:	9318      	str	r3, [sp, #96]	@ 0x60
 8020e4c:	e70d      	b.n	8020c6a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20e>
 8020e4e:	b151      	cbz	r1, 8020e66 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40a>
 8020e50:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8020e54:	4638      	mov	r0, r7
 8020e56:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8020e5a:	442a      	add	r2, r5
 8020e5c:	463e      	mov	r6, r7
 8020e5e:	e7a3      	b.n	8020da8 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34c>
 8020e60:	4638      	mov	r0, r7
 8020e62:	463a      	mov	r2, r7
 8020e64:	e7a0      	b.n	8020da8 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34c>
 8020e66:	4638      	mov	r0, r7
 8020e68:	463a      	mov	r2, r7
 8020e6a:	e7f7      	b.n	8020e5c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x400>
 8020e6c:	b00d      	add	sp, #52	@ 0x34
 8020e6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08020e72 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh>:
 8020e72:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020e76:	e9dd 750e 	ldrd	r7, r5, [sp, #56]	@ 0x38
 8020e7a:	f9bd c030 	ldrsh.w	ip, [sp, #48]	@ 0x30
 8020e7e:	2d00      	cmp	r5, #0
 8020e80:	f9bd 9034 	ldrsh.w	r9, [sp, #52]	@ 0x34
 8020e84:	fb05 700c 	mla	r0, r5, ip, r7
 8020e88:	f89d 4040 	ldrb.w	r4, [sp, #64]	@ 0x40
 8020e8c:	f89d e044 	ldrb.w	lr, [sp, #68]	@ 0x44
 8020e90:	eb02 0800 	add.w	r8, r2, r0
 8020e94:	f2c0 8118 	blt.w	80210c8 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x256>
 8020e98:	45a9      	cmp	r9, r5
 8020e9a:	f340 8115 	ble.w	80210c8 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x256>
 8020e9e:	2f00      	cmp	r7, #0
 8020ea0:	f2c0 8110 	blt.w	80210c4 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x252>
 8020ea4:	45bc      	cmp	ip, r7
 8020ea6:	f340 810d 	ble.w	80210c4 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x252>
 8020eaa:	5c12      	ldrb	r2, [r2, r0]
 8020eac:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 8020eb0:	1c7a      	adds	r2, r7, #1
 8020eb2:	f100 810c 	bmi.w	80210ce <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x25c>
 8020eb6:	4594      	cmp	ip, r2
 8020eb8:	f340 8109 	ble.w	80210ce <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x25c>
 8020ebc:	2c00      	cmp	r4, #0
 8020ebe:	f000 8108 	beq.w	80210d2 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x260>
 8020ec2:	f898 2001 	ldrb.w	r2, [r8, #1]
 8020ec6:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8020eca:	3501      	adds	r5, #1
 8020ecc:	f100 8105 	bmi.w	80210da <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x268>
 8020ed0:	45a9      	cmp	r9, r5
 8020ed2:	f340 8102 	ble.w	80210da <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x268>
 8020ed6:	f1be 0f00 	cmp.w	lr, #0
 8020eda:	f000 8101 	beq.w	80210e0 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x26e>
 8020ede:	2f00      	cmp	r7, #0
 8020ee0:	f2c0 80f9 	blt.w	80210d6 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x264>
 8020ee4:	45bc      	cmp	ip, r7
 8020ee6:	f340 80f6 	ble.w	80210d6 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x264>
 8020eea:	f818 200c 	ldrb.w	r2, [r8, ip]
 8020eee:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 8020ef2:	3701      	adds	r7, #1
 8020ef4:	f100 80f7 	bmi.w	80210e6 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x274>
 8020ef8:	45bc      	cmp	ip, r7
 8020efa:	f340 80f4 	ble.w	80210e6 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x274>
 8020efe:	2c00      	cmp	r4, #0
 8020f00:	f000 80f3 	beq.w	80210ea <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x278>
 8020f04:	44c4      	add	ip, r8
 8020f06:	f89c 2001 	ldrb.w	r2, [ip, #1]
 8020f0a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8020f0e:	fa1f fc84 	uxth.w	ip, r4
 8020f12:	fa1f f48e 	uxth.w	r4, lr
 8020f16:	ea4f 6a10 	mov.w	sl, r0, lsr #24
 8020f1a:	fb04 fe0c 	mul.w	lr, r4, ip
 8020f1e:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 8020f22:	ea4f 6b16 	mov.w	fp, r6, lsr #24
 8020f26:	ebce 1404 	rsb	r4, lr, r4, lsl #4
 8020f2a:	ebac 070e 	sub.w	r7, ip, lr
 8020f2e:	f5cc 7380 	rsb	r3, ip, #256	@ 0x100
 8020f32:	ea4f 6915 	mov.w	r9, r5, lsr #24
 8020f36:	b2a4      	uxth	r4, r4
 8020f38:	b2bf      	uxth	r7, r7
 8020f3a:	1b1b      	subs	r3, r3, r4
 8020f3c:	ea4f 6812 	mov.w	r8, r2, lsr #24
 8020f40:	fb07 fc0a 	mul.w	ip, r7, sl
 8020f44:	b29b      	uxth	r3, r3
 8020f46:	fb03 cc0b 	mla	ip, r3, fp, ip
 8020f4a:	9300      	str	r3, [sp, #0]
 8020f4c:	fb04 cc09 	mla	ip, r4, r9, ip
 8020f50:	fb0e cc08 	mla	ip, lr, r8, ip
 8020f54:	f3cc 2307 	ubfx	r3, ip, #8, #8
 8020f58:	9301      	str	r3, [sp, #4]
 8020f5a:	2b00      	cmp	r3, #0
 8020f5c:	f000 80af 	beq.w	80210be <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x24c>
 8020f60:	f006 1cff 	and.w	ip, r6, #16711935	@ 0xff00ff
 8020f64:	f406 467f 	and.w	r6, r6, #65280	@ 0xff00
 8020f68:	fb0b fc0c 	mul.w	ip, fp, ip
 8020f6c:	fb0b f606 	mul.w	r6, fp, r6
 8020f70:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 8020f74:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 8020f78:	f00b 1bff 	and.w	fp, fp, #16711935	@ 0xff00ff
 8020f7c:	44dc      	add	ip, fp
 8020f7e:	f000 1bff 	and.w	fp, r0, #16711935	@ 0xff00ff
 8020f82:	f400 407f 	and.w	r0, r0, #65280	@ 0xff00
 8020f86:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8020f8a:	fb0a fb0b 	mul.w	fp, sl, fp
 8020f8e:	fb0a fa00 	mul.w	sl, sl, r0
 8020f92:	f00c 13ff 	and.w	r3, ip, #16711935	@ 0xff00ff
 8020f96:	f506 7c80 	add.w	ip, r6, #256	@ 0x100
 8020f9a:	f50a 7080 	add.w	r0, sl, #256	@ 0x100
 8020f9e:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 8020fa2:	ea4f 2c1b 	mov.w	ip, fp, lsr #8
 8020fa6:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 8020faa:	eb00 2a1a 	add.w	sl, r0, sl, lsr #8
 8020fae:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8020fb2:	0a36      	lsrs	r6, r6, #8
 8020fb4:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8020fb8:	44dc      	add	ip, fp
 8020fba:	f005 1bff 	and.w	fp, r5, #16711935	@ 0xff00ff
 8020fbe:	f405 457f 	and.w	r5, r5, #65280	@ 0xff00
 8020fc2:	f406 467f 	and.w	r6, r6, #65280	@ 0xff00
 8020fc6:	fb09 fb0b 	mul.w	fp, r9, fp
 8020fca:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8020fce:	fb09 f905 	mul.w	r9, r9, r5
 8020fd2:	ea4f 201b 	mov.w	r0, fp, lsr #8
 8020fd6:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8020fda:	f509 7580 	add.w	r5, r9, #256	@ 0x100
 8020fde:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 8020fe2:	f000 10ff 	and.w	r0, r0, #16711935	@ 0xff00ff
 8020fe6:	fb0c fc07 	mul.w	ip, ip, r7
 8020fea:	eb05 2919 	add.w	r9, r5, r9, lsr #8
 8020fee:	f002 15ff 	and.w	r5, r2, #16711935	@ 0xff00ff
 8020ff2:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 8020ff6:	4458      	add	r0, fp
 8020ff8:	fb08 f505 	mul.w	r5, r8, r5
 8020ffc:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8021000:	fb08 f802 	mul.w	r8, r8, r2
 8021004:	0a00      	lsrs	r0, r0, #8
 8021006:	0a2a      	lsrs	r2, r5, #8
 8021008:	f105 1501 	add.w	r5, r5, #65537	@ 0x10001
 802100c:	f000 10ff 	and.w	r0, r0, #16711935	@ 0xff00ff
 8021010:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
 8021014:	4415      	add	r5, r2
 8021016:	f508 7280 	add.w	r2, r8, #256	@ 0x100
 802101a:	0a2d      	lsrs	r5, r5, #8
 802101c:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 8021020:	9a00      	ldr	r2, [sp, #0]
 8021022:	f005 15ff 	and.w	r5, r5, #16711935	@ 0xff00ff
 8021026:	fb03 cc02 	mla	ip, r3, r2, ip
 802102a:	ea4f 2818 	mov.w	r8, r8, lsr #8
 802102e:	9b01      	ldr	r3, [sp, #4]
 8021030:	fb05 c50e 	mla	r5, r5, lr, ip
 8021034:	f408 487f 	and.w	r8, r8, #65280	@ 0xff00
 8021038:	fb00 5004 	mla	r0, r0, r4, r5
 802103c:	0a00      	lsrs	r0, r0, #8
 802103e:	f000 15ff 	and.w	r5, r0, #16711935	@ 0xff00ff
 8021042:	f40a 407f 	and.w	r0, sl, #65280	@ 0xff00
 8021046:	4378      	muls	r0, r7
 8021048:	fb02 0006 	mla	r0, r2, r6, r0
 802104c:	fb0e 0e08 	mla	lr, lr, r8, r0
 8021050:	f409 407f 	and.w	r0, r9, #65280	@ 0xff00
 8021054:	fb04 e000 	mla	r0, r4, r0, lr
 8021058:	0a00      	lsrs	r0, r0, #8
 802105a:	f400 407f 	and.w	r0, r0, #65280	@ 0xff00
 802105e:	4328      	orrs	r0, r5
 8021060:	f89d 5048 	ldrb.w	r5, [sp, #72]	@ 0x48
 8021064:	b2ad      	uxth	r5, r5
 8021066:	b2c4      	uxtb	r4, r0
 8021068:	436b      	muls	r3, r5
 802106a:	fb14 f405 	smulbb	r4, r4, r5
 802106e:	1c5a      	adds	r2, r3, #1
 8021070:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8021074:	780b      	ldrb	r3, [r1, #0]
 8021076:	ea6f 2212 	mvn.w	r2, r2, lsr #8
 802107a:	b2d2      	uxtb	r2, r2
 802107c:	fb03 4302 	mla	r3, r3, r2, r4
 8021080:	b29b      	uxth	r3, r3
 8021082:	1c5c      	adds	r4, r3, #1
 8021084:	eb04 2313 	add.w	r3, r4, r3, lsr #8
 8021088:	784c      	ldrb	r4, [r1, #1]
 802108a:	fb14 f402 	smulbb	r4, r4, r2
 802108e:	121b      	asrs	r3, r3, #8
 8021090:	700b      	strb	r3, [r1, #0]
 8021092:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8021096:	fb03 4305 	mla	r3, r3, r5, r4
 802109a:	b29b      	uxth	r3, r3
 802109c:	1c5c      	adds	r4, r3, #1
 802109e:	eb04 2313 	add.w	r3, r4, r3, lsr #8
 80210a2:	0c04      	lsrs	r4, r0, #16
 80210a4:	7888      	ldrb	r0, [r1, #2]
 80210a6:	121b      	asrs	r3, r3, #8
 80210a8:	fb10 f002 	smulbb	r0, r0, r2
 80210ac:	704b      	strb	r3, [r1, #1]
 80210ae:	fb04 0005 	mla	r0, r4, r5, r0
 80210b2:	b280      	uxth	r0, r0
 80210b4:	1c43      	adds	r3, r0, #1
 80210b6:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 80210ba:	1200      	asrs	r0, r0, #8
 80210bc:	7088      	strb	r0, [r1, #2]
 80210be:	b003      	add	sp, #12
 80210c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80210c4:	2600      	movs	r6, #0
 80210c6:	e6f3      	b.n	8020eb0 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x3e>
 80210c8:	2000      	movs	r0, #0
 80210ca:	4606      	mov	r6, r0
 80210cc:	e6fd      	b.n	8020eca <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x58>
 80210ce:	2000      	movs	r0, #0
 80210d0:	e6fb      	b.n	8020eca <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x58>
 80210d2:	4620      	mov	r0, r4
 80210d4:	e6f9      	b.n	8020eca <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x58>
 80210d6:	2500      	movs	r5, #0
 80210d8:	e70b      	b.n	8020ef2 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x80>
 80210da:	2200      	movs	r2, #0
 80210dc:	4615      	mov	r5, r2
 80210de:	e716      	b.n	8020f0e <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x9c>
 80210e0:	4672      	mov	r2, lr
 80210e2:	4675      	mov	r5, lr
 80210e4:	e713      	b.n	8020f0e <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x9c>
 80210e6:	2200      	movs	r2, #0
 80210e8:	e711      	b.n	8020f0e <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x9c>
 80210ea:	4622      	mov	r2, r4
 80210ec:	e70f      	b.n	8020f0e <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x9c>

080210ee <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80210ee:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80210f2:	b09f      	sub	sp, #124	@ 0x7c
 80210f4:	921b      	str	r2, [sp, #108]	@ 0x6c
 80210f6:	9309      	str	r3, [sp, #36]	@ 0x24
 80210f8:	9a2d      	ldr	r2, [sp, #180]	@ 0xb4
 80210fa:	f89d 30c4 	ldrb.w	r3, [sp, #196]	@ 0xc4
 80210fe:	901d      	str	r0, [sp, #116]	@ 0x74
 8021100:	931c      	str	r3, [sp, #112]	@ 0x70
 8021102:	6850      	ldr	r0, [r2, #4]
 8021104:	9119      	str	r1, [sp, #100]	@ 0x64
 8021106:	6812      	ldr	r2, [r2, #0]
 8021108:	9d2a      	ldr	r5, [sp, #168]	@ 0xa8
 802110a:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	@ 0xb8
 802110e:	fb00 1303 	mla	r3, r0, r3, r1
 8021112:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8021116:	18d3      	adds	r3, r2, r3
 8021118:	930c      	str	r3, [sp, #48]	@ 0x30
 802111a:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 802111c:	681b      	ldr	r3, [r3, #0]
 802111e:	9312      	str	r3, [sp, #72]	@ 0x48
 8021120:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 8021122:	685e      	ldr	r6, [r3, #4]
 8021124:	f8bd 3070 	ldrh.w	r3, [sp, #112]	@ 0x70
 8021128:	3604      	adds	r6, #4
 802112a:	930d      	str	r3, [sp, #52]	@ 0x34
 802112c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 802112e:	2b00      	cmp	r3, #0
 8021130:	dc03      	bgt.n	802113a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 8021132:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8021134:	2b00      	cmp	r3, #0
 8021136:	f340 8378 	ble.w	802182a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x73c>
 802113a:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 802113c:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8021140:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8021144:	1e48      	subs	r0, r1, #1
 8021146:	1e57      	subs	r7, r2, #1
 8021148:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802114a:	2b00      	cmp	r3, #0
 802114c:	f340 818c 	ble.w	8021468 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37a>
 8021150:	9c29      	ldr	r4, [sp, #164]	@ 0xa4
 8021152:	142b      	asrs	r3, r5, #16
 8021154:	ea5f 4c24 	movs.w	ip, r4, asr #16
 8021158:	d406      	bmi.n	8021168 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 802115a:	4584      	cmp	ip, r0
 802115c:	da04      	bge.n	8021168 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 802115e:	2b00      	cmp	r3, #0
 8021160:	db02      	blt.n	8021168 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 8021162:	42bb      	cmp	r3, r7
 8021164:	f2c0 8181 	blt.w	802146a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37c>
 8021168:	f11c 0c01 	adds.w	ip, ip, #1
 802116c:	f100 816f 	bmi.w	802144e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x360>
 8021170:	4561      	cmp	r1, ip
 8021172:	f2c0 816c 	blt.w	802144e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x360>
 8021176:	3301      	adds	r3, #1
 8021178:	f100 8169 	bmi.w	802144e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x360>
 802117c:	429a      	cmp	r2, r3
 802117e:	f2c0 8166 	blt.w	802144e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x360>
 8021182:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8021184:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
 8021186:	931a      	str	r3, [sp, #104]	@ 0x68
 8021188:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 802118a:	2b00      	cmp	r3, #0
 802118c:	f340 818c 	ble.w	80214a8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ba>
 8021190:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 8021192:	ea4f 4c25 	mov.w	ip, r5, asr #16
 8021196:	f3c5 3103 	ubfx	r1, r5, #12, #4
 802119a:	f3c3 3203 	ubfx	r2, r3, #12, #4
 802119e:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 80211a0:	e9d3 0e02 	ldrd	r0, lr, [r3, #8]
 80211a4:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 80211a6:	141b      	asrs	r3, r3, #16
 80211a8:	f100 81d0 	bmi.w	802154c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 80211ac:	f100 38ff 	add.w	r8, r0, #4294967295
 80211b0:	4543      	cmp	r3, r8
 80211b2:	f280 81cb 	bge.w	802154c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 80211b6:	f1bc 0f00 	cmp.w	ip, #0
 80211ba:	f2c0 81c7 	blt.w	802154c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 80211be:	f10e 38ff 	add.w	r8, lr, #4294967295
 80211c2:	45c4      	cmp	ip, r8
 80211c4:	f280 81c2 	bge.w	802154c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 80211c8:	b200      	sxth	r0, r0
 80211ca:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 80211cc:	fb0c 3300 	mla	r3, ip, r0, r3
 80211d0:	eb04 0803 	add.w	r8, r4, r3
 80211d4:	5ce3      	ldrb	r3, [r4, r3]
 80211d6:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 80211da:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 80211de:	2a00      	cmp	r2, #0
 80211e0:	f000 81a9 	beq.w	8021536 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x448>
 80211e4:	f898 c001 	ldrb.w	ip, [r8, #1]
 80211e8:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
 80211ec:	940e      	str	r4, [sp, #56]	@ 0x38
 80211ee:	0e24      	lsrs	r4, r4, #24
 80211f0:	9415      	str	r4, [sp, #84]	@ 0x54
 80211f2:	b179      	cbz	r1, 8021214 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 80211f4:	eb08 0c00 	add.w	ip, r8, r0
 80211f8:	f818 0000 	ldrb.w	r0, [r8, r0]
 80211fc:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 8021200:	900a      	str	r0, [sp, #40]	@ 0x28
 8021202:	0e00      	lsrs	r0, r0, #24
 8021204:	9013      	str	r0, [sp, #76]	@ 0x4c
 8021206:	f89c 0001 	ldrb.w	r0, [ip, #1]
 802120a:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 802120e:	900f      	str	r0, [sp, #60]	@ 0x3c
 8021210:	0e00      	lsrs	r0, r0, #24
 8021212:	9016      	str	r0, [sp, #88]	@ 0x58
 8021214:	b292      	uxth	r2, r2
 8021216:	9815      	ldr	r0, [sp, #84]	@ 0x54
 8021218:	b289      	uxth	r1, r1
 802121a:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 802121c:	fb02 f901 	mul.w	r9, r2, r1
 8021220:	0112      	lsls	r2, r2, #4
 8021222:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 8021226:	eba2 0809 	sub.w	r8, r2, r9
 802122a:	f5c2 7280 	rsb	r2, r2, #256	@ 0x100
 802122e:	b289      	uxth	r1, r1
 8021230:	fa1f f888 	uxth.w	r8, r8
 8021234:	1a52      	subs	r2, r2, r1
 8021236:	fb08 f000 	mul.w	r0, r8, r0
 802123a:	b292      	uxth	r2, r2
 802123c:	fb02 000e 	mla	r0, r2, lr, r0
 8021240:	fb01 0004 	mla	r0, r1, r4, r0
 8021244:	9c16      	ldr	r4, [sp, #88]	@ 0x58
 8021246:	fb09 0004 	mla	r0, r9, r4, r0
 802124a:	f3c0 2007 	ubfx	r0, r0, #8, #8
 802124e:	2800      	cmp	r0, #0
 8021250:	f000 80f2 	beq.w	8021438 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 8021254:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 8021258:	d01b      	beq.n	8021292 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a4>
 802125a:	f003 1aff 	and.w	sl, r3, #16711935	@ 0xff00ff
 802125e:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8021262:	fb0e fa0a 	mul.w	sl, lr, sl
 8021266:	fb0e fe03 	mul.w	lr, lr, r3
 802126a:	ea4f 231a 	mov.w	r3, sl, lsr #8
 802126e:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 8021272:	f50e 7c80 	add.w	ip, lr, #256	@ 0x100
 8021276:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 802127a:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 802127e:	4453      	add	r3, sl
 8021280:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8021284:	0a1b      	lsrs	r3, r3, #8
 8021286:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 802128a:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 802128e:	ea43 030c 	orr.w	r3, r3, ip
 8021292:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 8021294:	2cff      	cmp	r4, #255	@ 0xff
 8021296:	d021      	beq.n	80212dc <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
 8021298:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 802129a:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 802129e:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 80212a0:	fb04 fb0b 	mul.w	fp, r4, fp
 80212a4:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 80212a6:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 80212aa:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 80212ac:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 80212b0:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 80212b4:	fb04 fa0a 	mul.w	sl, r4, sl
 80212b8:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 80212bc:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 80212c0:	44de      	add	lr, fp
 80212c2:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80212c6:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80212ca:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80212ce:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 80212d2:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 80212d6:	ea4e 040a 	orr.w	r4, lr, sl
 80212da:	940e      	str	r4, [sp, #56]	@ 0x38
 80212dc:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 80212de:	2cff      	cmp	r4, #255	@ 0xff
 80212e0:	d021      	beq.n	8021326 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x238>
 80212e2:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80212e4:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 80212e8:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 80212ea:	fb04 fb0b 	mul.w	fp, r4, fp
 80212ee:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80212f0:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 80212f4:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 80212f6:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 80212fa:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 80212fe:	fb04 fa0a 	mul.w	sl, r4, sl
 8021302:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8021306:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 802130a:	44de      	add	lr, fp
 802130c:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8021310:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8021314:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8021318:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 802131c:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8021320:	ea4e 040a 	orr.w	r4, lr, sl
 8021324:	940a      	str	r4, [sp, #40]	@ 0x28
 8021326:	9c16      	ldr	r4, [sp, #88]	@ 0x58
 8021328:	2cff      	cmp	r4, #255	@ 0xff
 802132a:	d021      	beq.n	8021370 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x282>
 802132c:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 802132e:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 8021332:	9c16      	ldr	r4, [sp, #88]	@ 0x58
 8021334:	fb04 fb0b 	mul.w	fp, r4, fp
 8021338:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 802133a:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 802133e:	9c16      	ldr	r4, [sp, #88]	@ 0x58
 8021340:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8021344:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 8021348:	fb04 fa0a 	mul.w	sl, r4, sl
 802134c:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8021350:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 8021354:	44de      	add	lr, fp
 8021356:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 802135a:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802135e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8021362:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8021366:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 802136a:	ea4e 040a 	orr.w	r4, lr, sl
 802136e:	940f      	str	r4, [sp, #60]	@ 0x3c
 8021370:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 8021372:	f003 1eff 	and.w	lr, r3, #16711935	@ 0xff00ff
 8021376:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 802137a:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 802137e:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8021380:	fb08 fc0c 	mul.w	ip, r8, ip
 8021384:	fb02 cc0e 	mla	ip, r2, lr, ip
 8021388:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 802138c:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 802138e:	fb01 cc0e 	mla	ip, r1, lr, ip
 8021392:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 8021396:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 8021398:	fb09 cc0e 	mla	ip, r9, lr, ip
 802139c:	f404 4e7f 	and.w	lr, r4, #65280	@ 0xff00
 80213a0:	fb08 f80e 	mul.w	r8, r8, lr
 80213a4:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80213a8:	fb02 8303 	mla	r3, r2, r3, r8
 80213ac:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80213ae:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 80213b2:	f402 4a7f 	and.w	sl, r2, #65280	@ 0xff00
 80213b6:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80213b8:	fb01 330a 	mla	r3, r1, sl, r3
 80213bc:	f402 417f 	and.w	r1, r2, #65280	@ 0xff00
 80213c0:	fb09 3901 	mla	r9, r9, r1, r3
 80213c4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80213c6:	990d      	ldr	r1, [sp, #52]	@ 0x34
 80213c8:	4343      	muls	r3, r0
 80213ca:	ea4f 2919 	mov.w	r9, r9, lsr #8
 80213ce:	1c58      	adds	r0, r3, #1
 80213d0:	f409 497f 	and.w	r9, r9, #65280	@ 0xff00
 80213d4:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 80213d8:	ea4c 0c09 	orr.w	ip, ip, r9
 80213dc:	783b      	ldrb	r3, [r7, #0]
 80213de:	fa5f f28c 	uxtb.w	r2, ip
 80213e2:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 80213e6:	fb12 f201 	smulbb	r2, r2, r1
 80213ea:	b2c0      	uxtb	r0, r0
 80213ec:	fb03 2300 	mla	r3, r3, r0, r2
 80213f0:	b29b      	uxth	r3, r3
 80213f2:	1c5a      	adds	r2, r3, #1
 80213f4:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 80213f8:	787a      	ldrb	r2, [r7, #1]
 80213fa:	fb12 f200 	smulbb	r2, r2, r0
 80213fe:	121b      	asrs	r3, r3, #8
 8021400:	703b      	strb	r3, [r7, #0]
 8021402:	f3cc 2307 	ubfx	r3, ip, #8, #8
 8021406:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 802140a:	fb03 2301 	mla	r3, r3, r1, r2
 802140e:	b29b      	uxth	r3, r3
 8021410:	1c5a      	adds	r2, r3, #1
 8021412:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8021416:	121b      	asrs	r3, r3, #8
 8021418:	707b      	strb	r3, [r7, #1]
 802141a:	78bb      	ldrb	r3, [r7, #2]
 802141c:	fb13 f000 	smulbb	r0, r3, r0
 8021420:	fb0c 0c01 	mla	ip, ip, r1, r0
 8021424:	fa1f fc8c 	uxth.w	ip, ip
 8021428:	f10c 0301 	add.w	r3, ip, #1
 802142c:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 8021430:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 8021434:	f887 c002 	strb.w	ip, [r7, #2]
 8021438:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 802143a:	3703      	adds	r7, #3
 802143c:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 802143e:	441a      	add	r2, r3
 8021440:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 8021442:	441d      	add	r5, r3
 8021444:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 8021446:	9229      	str	r2, [sp, #164]	@ 0xa4
 8021448:	3b01      	subs	r3, #1
 802144a:	931a      	str	r3, [sp, #104]	@ 0x68
 802144c:	e69c      	b.n	8021188 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 802144e:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 8021450:	9c29      	ldr	r4, [sp, #164]	@ 0xa4
 8021452:	441c      	add	r4, r3
 8021454:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 8021456:	441d      	add	r5, r3
 8021458:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802145a:	9429      	str	r4, [sp, #164]	@ 0xa4
 802145c:	3b01      	subs	r3, #1
 802145e:	9309      	str	r3, [sp, #36]	@ 0x24
 8021460:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8021462:	3303      	adds	r3, #3
 8021464:	930c      	str	r3, [sp, #48]	@ 0x30
 8021466:	e66f      	b.n	8021148 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 8021468:	d026      	beq.n	80214b8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ca>
 802146a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802146c:	982b      	ldr	r0, [sp, #172]	@ 0xac
 802146e:	3b01      	subs	r3, #1
 8021470:	9c29      	ldr	r4, [sp, #164]	@ 0xa4
 8021472:	fb00 4003 	mla	r0, r0, r3, r4
 8021476:	1400      	asrs	r0, r0, #16
 8021478:	f53f ae83 	bmi.w	8021182 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 802147c:	3901      	subs	r1, #1
 802147e:	4288      	cmp	r0, r1
 8021480:	f6bf ae7f 	bge.w	8021182 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8021484:	992c      	ldr	r1, [sp, #176]	@ 0xb0
 8021486:	fb01 5303 	mla	r3, r1, r3, r5
 802148a:	141b      	asrs	r3, r3, #16
 802148c:	f53f ae79 	bmi.w	8021182 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8021490:	3a01      	subs	r2, #1
 8021492:	4293      	cmp	r3, r2
 8021494:	f6bf ae75 	bge.w	8021182 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8021498:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 802149a:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
 802149e:	f103 0e03 	add.w	lr, r3, #3
 80214a2:	f1bb 0f00 	cmp.w	fp, #0
 80214a6:	dc71      	bgt.n	802158c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49e>
 80214a8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80214aa:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 80214ae:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80214b0:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80214b4:	4423      	add	r3, r4
 80214b6:	930c      	str	r3, [sp, #48]	@ 0x30
 80214b8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80214ba:	2b00      	cmp	r3, #0
 80214bc:	f340 81b5 	ble.w	802182a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x73c>
 80214c0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80214c4:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 80214c6:	ee30 0a04 	vadd.f32	s0, s0, s8
 80214ca:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80214ce:	eef0 6a62 	vmov.f32	s13, s5
 80214d2:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80214d6:	ee31 1a05 	vadd.f32	s2, s2, s10
 80214da:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80214de:	edcd 6a29 	vstr	s13, [sp, #164]	@ 0xa4
 80214e2:	eef0 6a43 	vmov.f32	s13, s6
 80214e6:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80214ea:	ee16 5a90 	vmov	r5, s13
 80214ee:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80214f2:	ee61 7a27 	vmul.f32	s15, s2, s15
 80214f6:	ee77 2a62 	vsub.f32	s5, s14, s5
 80214fa:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80214fe:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8021502:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8021506:	ee12 2a90 	vmov	r2, s5
 802150a:	eef0 2a47 	vmov.f32	s5, s14
 802150e:	fb92 f3f3 	sdiv	r3, r2, r3
 8021512:	ee13 2a10 	vmov	r2, s6
 8021516:	932b      	str	r3, [sp, #172]	@ 0xac
 8021518:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 802151a:	eeb0 3a67 	vmov.f32	s6, s15
 802151e:	fb92 f3f3 	sdiv	r3, r2, r3
 8021522:	932c      	str	r3, [sp, #176]	@ 0xb0
 8021524:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8021526:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8021528:	3b01      	subs	r3, #1
 802152a:	9319      	str	r3, [sp, #100]	@ 0x64
 802152c:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 802152e:	bf08      	it	eq
 8021530:	4613      	moveq	r3, r2
 8021532:	9309      	str	r3, [sp, #36]	@ 0x24
 8021534:	e5fa      	b.n	802112c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 8021536:	2900      	cmp	r1, #0
 8021538:	f43f ae6c 	beq.w	8021214 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 802153c:	f818 0000 	ldrb.w	r0, [r8, r0]
 8021540:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 8021544:	900a      	str	r0, [sp, #40]	@ 0x28
 8021546:	0e00      	lsrs	r0, r0, #24
 8021548:	9013      	str	r0, [sp, #76]	@ 0x4c
 802154a:	e663      	b.n	8021214 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 802154c:	f113 0801 	adds.w	r8, r3, #1
 8021550:	f53f af72 	bmi.w	8021438 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 8021554:	4540      	cmp	r0, r8
 8021556:	f6ff af6f 	blt.w	8021438 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 802155a:	f11c 0801 	adds.w	r8, ip, #1
 802155e:	f53f af6b 	bmi.w	8021438 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 8021562:	45c6      	cmp	lr, r8
 8021564:	f6ff af68 	blt.w	8021438 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 8021568:	9c1c      	ldr	r4, [sp, #112]	@ 0x70
 802156a:	b200      	sxth	r0, r0
 802156c:	9302      	str	r3, [sp, #8]
 802156e:	fa0f f38e 	sxth.w	r3, lr
 8021572:	9000      	str	r0, [sp, #0]
 8021574:	9301      	str	r3, [sp, #4]
 8021576:	4633      	mov	r3, r6
 8021578:	981d      	ldr	r0, [sp, #116]	@ 0x74
 802157a:	e9cd 1405 	strd	r1, r4, [sp, #20]
 802157e:	e9cd c203 	strd	ip, r2, [sp, #12]
 8021582:	4639      	mov	r1, r7
 8021584:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8021586:	f7ff fc74 	bl	8020e72 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh>
 802158a:	e755      	b.n	8021438 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 802158c:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 802158e:	f3c5 3003 	ubfx	r0, r5, #12, #4
 8021592:	9c29      	ldr	r4, [sp, #164]	@ 0xa4
 8021594:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8021598:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 802159a:	1427      	asrs	r7, r4, #16
 802159c:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 802159e:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80215a2:	142b      	asrs	r3, r5, #16
 80215a4:	fb01 7303 	mla	r3, r1, r3, r7
 80215a8:	18e7      	adds	r7, r4, r3
 80215aa:	5ce3      	ldrb	r3, [r4, r3]
 80215ac:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 80215b0:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 80215b4:	2a00      	cmp	r2, #0
 80215b6:	f000 812e 	beq.w	8021816 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x728>
 80215ba:	f897 8001 	ldrb.w	r8, [r7, #1]
 80215be:	f856 4028 	ldr.w	r4, [r6, r8, lsl #2]
 80215c2:	9410      	str	r4, [sp, #64]	@ 0x40
 80215c4:	0e24      	lsrs	r4, r4, #24
 80215c6:	9417      	str	r4, [sp, #92]	@ 0x5c
 80215c8:	b170      	cbz	r0, 80215e8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4fa>
 80215ca:	eb07 0801 	add.w	r8, r7, r1
 80215ce:	5c79      	ldrb	r1, [r7, r1]
 80215d0:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 80215d4:	910b      	str	r1, [sp, #44]	@ 0x2c
 80215d6:	0e09      	lsrs	r1, r1, #24
 80215d8:	9114      	str	r1, [sp, #80]	@ 0x50
 80215da:	f898 1001 	ldrb.w	r1, [r8, #1]
 80215de:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 80215e2:	9111      	str	r1, [sp, #68]	@ 0x44
 80215e4:	0e09      	lsrs	r1, r1, #24
 80215e6:	9118      	str	r1, [sp, #96]	@ 0x60
 80215e8:	b292      	uxth	r2, r2
 80215ea:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 80215ec:	b280      	uxth	r0, r0
 80215ee:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 80215f0:	fb02 f900 	mul.w	r9, r2, r0
 80215f4:	0112      	lsls	r2, r2, #4
 80215f6:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 80215fa:	eba2 0809 	sub.w	r8, r2, r9
 80215fe:	f5c2 7280 	rsb	r2, r2, #256	@ 0x100
 8021602:	b280      	uxth	r0, r0
 8021604:	fa1f f888 	uxth.w	r8, r8
 8021608:	1a12      	subs	r2, r2, r0
 802160a:	fb08 f101 	mul.w	r1, r8, r1
 802160e:	b292      	uxth	r2, r2
 8021610:	fb02 110c 	mla	r1, r2, ip, r1
 8021614:	fb00 1104 	mla	r1, r0, r4, r1
 8021618:	9c18      	ldr	r4, [sp, #96]	@ 0x60
 802161a:	fb09 1104 	mla	r1, r9, r4, r1
 802161e:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8021622:	2900      	cmp	r1, #0
 8021624:	f000 80ec 	beq.w	8021800 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x712>
 8021628:	f1bc 0fff 	cmp.w	ip, #255	@ 0xff
 802162c:	d019      	beq.n	8021662 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x574>
 802162e:	f003 1aff 	and.w	sl, r3, #16711935	@ 0xff00ff
 8021632:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8021636:	fb0c fa0a 	mul.w	sl, ip, sl
 802163a:	fb0c fc03 	mul.w	ip, ip, r3
 802163e:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8021642:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 8021646:	f50c 7780 	add.w	r7, ip, #256	@ 0x100
 802164a:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 802164e:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 8021652:	4453      	add	r3, sl
 8021654:	0a3f      	lsrs	r7, r7, #8
 8021656:	0a1b      	lsrs	r3, r3, #8
 8021658:	f407 477f 	and.w	r7, r7, #65280	@ 0xff00
 802165c:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 8021660:	433b      	orrs	r3, r7
 8021662:	9c17      	ldr	r4, [sp, #92]	@ 0x5c
 8021664:	2cff      	cmp	r4, #255	@ 0xff
 8021666:	d020      	beq.n	80216aa <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5bc>
 8021668:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 802166a:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 802166e:	9c17      	ldr	r4, [sp, #92]	@ 0x5c
 8021670:	4367      	muls	r7, r4
 8021672:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 8021674:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8021678:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 802167c:	9c17      	ldr	r4, [sp, #92]	@ 0x5c
 802167e:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 8021682:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8021686:	fb04 fa0a 	mul.w	sl, r4, sl
 802168a:	44bc      	add	ip, r7
 802168c:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 8021690:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8021694:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8021698:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 802169c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80216a0:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 80216a4:	ea4c 040a 	orr.w	r4, ip, sl
 80216a8:	9410      	str	r4, [sp, #64]	@ 0x40
 80216aa:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 80216ac:	2cff      	cmp	r4, #255	@ 0xff
 80216ae:	d020      	beq.n	80216f2 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x604>
 80216b0:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 80216b2:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 80216b6:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 80216b8:	4367      	muls	r7, r4
 80216ba:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 80216bc:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 80216c0:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 80216c4:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 80216c6:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 80216ca:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 80216ce:	fb04 fa0a 	mul.w	sl, r4, sl
 80216d2:	44bc      	add	ip, r7
 80216d4:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 80216d8:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80216dc:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80216e0:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 80216e4:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80216e8:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 80216ec:	ea4c 040a 	orr.w	r4, ip, sl
 80216f0:	940b      	str	r4, [sp, #44]	@ 0x2c
 80216f2:	9c18      	ldr	r4, [sp, #96]	@ 0x60
 80216f4:	2cff      	cmp	r4, #255	@ 0xff
 80216f6:	d020      	beq.n	802173a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64c>
 80216f8:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 80216fa:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 80216fe:	9c18      	ldr	r4, [sp, #96]	@ 0x60
 8021700:	4367      	muls	r7, r4
 8021702:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 8021704:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8021708:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 802170c:	9c18      	ldr	r4, [sp, #96]	@ 0x60
 802170e:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 8021712:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8021716:	fb04 fa0a 	mul.w	sl, r4, sl
 802171a:	44bc      	add	ip, r7
 802171c:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 8021720:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8021724:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8021728:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 802172c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8021730:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8021734:	ea4c 040a 	orr.w	r4, ip, sl
 8021738:	9411      	str	r4, [sp, #68]	@ 0x44
 802173a:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 802173c:	f003 1cff 	and.w	ip, r3, #16711935	@ 0xff00ff
 8021740:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8021744:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 8021748:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 802174a:	fb08 f707 	mul.w	r7, r8, r7
 802174e:	fb02 770c 	mla	r7, r2, ip, r7
 8021752:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 8021756:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 8021758:	fb00 770c 	mla	r7, r0, ip, r7
 802175c:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 8021760:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 8021762:	fb09 770c 	mla	r7, r9, ip, r7
 8021766:	f404 4c7f 	and.w	ip, r4, #65280	@ 0xff00
 802176a:	fb08 f80c 	mul.w	r8, r8, ip
 802176e:	0a3f      	lsrs	r7, r7, #8
 8021770:	fb02 8303 	mla	r3, r2, r3, r8
 8021774:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8021776:	f007 17ff 	and.w	r7, r7, #16711935	@ 0xff00ff
 802177a:	f402 4a7f 	and.w	sl, r2, #65280	@ 0xff00
 802177e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8021780:	fb00 330a 	mla	r3, r0, sl, r3
 8021784:	f402 4c7f 	and.w	ip, r2, #65280	@ 0xff00
 8021788:	980d      	ldr	r0, [sp, #52]	@ 0x34
 802178a:	fb09 3c0c 	mla	ip, r9, ip, r3
 802178e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8021790:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8021794:	434b      	muls	r3, r1
 8021796:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 802179a:	1c59      	adds	r1, r3, #1
 802179c:	ea47 070c 	orr.w	r7, r7, ip
 80217a0:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 80217a4:	f81e 3c03 	ldrb.w	r3, [lr, #-3]
 80217a8:	b2fa      	uxtb	r2, r7
 80217aa:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 80217ae:	fb12 f200 	smulbb	r2, r2, r0
 80217b2:	b2c9      	uxtb	r1, r1
 80217b4:	fb03 2301 	mla	r3, r3, r1, r2
 80217b8:	b29b      	uxth	r3, r3
 80217ba:	1c5a      	adds	r2, r3, #1
 80217bc:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 80217c0:	f81e 2c02 	ldrb.w	r2, [lr, #-2]
 80217c4:	fb12 f201 	smulbb	r2, r2, r1
 80217c8:	121b      	asrs	r3, r3, #8
 80217ca:	f80e 3c03 	strb.w	r3, [lr, #-3]
 80217ce:	f3c7 2307 	ubfx	r3, r7, #8, #8
 80217d2:	0c3f      	lsrs	r7, r7, #16
 80217d4:	fb03 2300 	mla	r3, r3, r0, r2
 80217d8:	b29b      	uxth	r3, r3
 80217da:	1c5a      	adds	r2, r3, #1
 80217dc:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 80217e0:	121b      	asrs	r3, r3, #8
 80217e2:	f80e 3c02 	strb.w	r3, [lr, #-2]
 80217e6:	f81e 3c01 	ldrb.w	r3, [lr, #-1]
 80217ea:	fb13 f101 	smulbb	r1, r3, r1
 80217ee:	fb07 1700 	mla	r7, r7, r0, r1
 80217f2:	b2bf      	uxth	r7, r7
 80217f4:	1c7b      	adds	r3, r7, #1
 80217f6:	eb03 2717 	add.w	r7, r3, r7, lsr #8
 80217fa:	123f      	asrs	r7, r7, #8
 80217fc:	f80e 7c01 	strb.w	r7, [lr, #-1]
 8021800:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 8021802:	f10e 0e03 	add.w	lr, lr, #3
 8021806:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 8021808:	f10b 3bff 	add.w	fp, fp, #4294967295
 802180c:	441a      	add	r2, r3
 802180e:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 8021810:	9229      	str	r2, [sp, #164]	@ 0xa4
 8021812:	441d      	add	r5, r3
 8021814:	e645      	b.n	80214a2 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3b4>
 8021816:	2800      	cmp	r0, #0
 8021818:	f43f aee6 	beq.w	80215e8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4fa>
 802181c:	5c79      	ldrb	r1, [r7, r1]
 802181e:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8021822:	910b      	str	r1, [sp, #44]	@ 0x2c
 8021824:	0e09      	lsrs	r1, r1, #24
 8021826:	9114      	str	r1, [sp, #80]	@ 0x50
 8021828:	e6de      	b.n	80215e8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4fa>
 802182a:	b01f      	add	sp, #124	@ 0x7c
 802182c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08021830 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh>:
 8021830:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021834:	e9dd 750e 	ldrd	r7, r5, [sp, #56]	@ 0x38
 8021838:	f9bd e030 	ldrsh.w	lr, [sp, #48]	@ 0x30
 802183c:	2d00      	cmp	r5, #0
 802183e:	f9bd 9034 	ldrsh.w	r9, [sp, #52]	@ 0x34
 8021842:	fb05 700e 	mla	r0, r5, lr, r7
 8021846:	f89d 4040 	ldrb.w	r4, [sp, #64]	@ 0x40
 802184a:	f89d c044 	ldrb.w	ip, [sp, #68]	@ 0x44
 802184e:	eb02 0800 	add.w	r8, r2, r0
 8021852:	f2c0 8105 	blt.w	8021a60 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x230>
 8021856:	45a9      	cmp	r9, r5
 8021858:	f340 8102 	ble.w	8021a60 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x230>
 802185c:	2f00      	cmp	r7, #0
 802185e:	f2c0 80fd 	blt.w	8021a5c <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x22c>
 8021862:	45be      	cmp	lr, r7
 8021864:	f340 80fa 	ble.w	8021a5c <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x22c>
 8021868:	5c12      	ldrb	r2, [r2, r0]
 802186a:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 802186e:	1c7a      	adds	r2, r7, #1
 8021870:	f100 80f9 	bmi.w	8021a66 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x236>
 8021874:	4596      	cmp	lr, r2
 8021876:	f340 80f6 	ble.w	8021a66 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x236>
 802187a:	2c00      	cmp	r4, #0
 802187c:	f000 80f5 	beq.w	8021a6a <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x23a>
 8021880:	f898 2001 	ldrb.w	r2, [r8, #1]
 8021884:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8021888:	3501      	adds	r5, #1
 802188a:	f100 80f2 	bmi.w	8021a72 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x242>
 802188e:	45a9      	cmp	r9, r5
 8021890:	f340 80ef 	ble.w	8021a72 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x242>
 8021894:	f1bc 0f00 	cmp.w	ip, #0
 8021898:	f000 80ee 	beq.w	8021a78 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x248>
 802189c:	2f00      	cmp	r7, #0
 802189e:	f2c0 80e6 	blt.w	8021a6e <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x23e>
 80218a2:	45be      	cmp	lr, r7
 80218a4:	f340 80e3 	ble.w	8021a6e <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x23e>
 80218a8:	f818 200e 	ldrb.w	r2, [r8, lr]
 80218ac:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 80218b0:	3701      	adds	r7, #1
 80218b2:	f100 80e4 	bmi.w	8021a7e <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x24e>
 80218b6:	45be      	cmp	lr, r7
 80218b8:	f340 80e1 	ble.w	8021a7e <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x24e>
 80218bc:	2c00      	cmp	r4, #0
 80218be:	f000 80e0 	beq.w	8021a82 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x252>
 80218c2:	44c6      	add	lr, r8
 80218c4:	f89e 2001 	ldrb.w	r2, [lr, #1]
 80218c8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80218cc:	b2a3      	uxth	r3, r4
 80218ce:	fa1f fc8c 	uxth.w	ip, ip
 80218d2:	ea4f 6a10 	mov.w	sl, r0, lsr #24
 80218d6:	fb0c fe03 	mul.w	lr, ip, r3
 80218da:	011b      	lsls	r3, r3, #4
 80218dc:	ea4f 6b16 	mov.w	fp, r6, lsr #24
 80218e0:	ebce 1c0c 	rsb	ip, lr, ip, lsl #4
 80218e4:	eba3 070e 	sub.w	r7, r3, lr
 80218e8:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 80218ec:	ea4f 6915 	mov.w	r9, r5, lsr #24
 80218f0:	fa1f f48c 	uxth.w	r4, ip
 80218f4:	b2bf      	uxth	r7, r7
 80218f6:	1b1b      	subs	r3, r3, r4
 80218f8:	ea4f 6812 	mov.w	r8, r2, lsr #24
 80218fc:	fb07 fc0a 	mul.w	ip, r7, sl
 8021900:	b29b      	uxth	r3, r3
 8021902:	fb03 cc0b 	mla	ip, r3, fp, ip
 8021906:	9300      	str	r3, [sp, #0]
 8021908:	fb04 cc09 	mla	ip, r4, r9, ip
 802190c:	fb0e cc08 	mla	ip, lr, r8, ip
 8021910:	f3cc 2307 	ubfx	r3, ip, #8, #8
 8021914:	9301      	str	r3, [sp, #4]
 8021916:	2b00      	cmp	r3, #0
 8021918:	f000 809d 	beq.w	8021a56 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x226>
 802191c:	f006 1cff 	and.w	ip, r6, #16711935	@ 0xff00ff
 8021920:	f406 467f 	and.w	r6, r6, #65280	@ 0xff00
 8021924:	fb0b fc0c 	mul.w	ip, fp, ip
 8021928:	fb0b f606 	mul.w	r6, fp, r6
 802192c:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 8021930:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 8021934:	f00b 1bff 	and.w	fp, fp, #16711935	@ 0xff00ff
 8021938:	44dc      	add	ip, fp
 802193a:	f000 1bff 	and.w	fp, r0, #16711935	@ 0xff00ff
 802193e:	f400 407f 	and.w	r0, r0, #65280	@ 0xff00
 8021942:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8021946:	fb0a fb0b 	mul.w	fp, sl, fp
 802194a:	fb0a fa00 	mul.w	sl, sl, r0
 802194e:	f00c 13ff 	and.w	r3, ip, #16711935	@ 0xff00ff
 8021952:	f506 7c80 	add.w	ip, r6, #256	@ 0x100
 8021956:	f50a 7080 	add.w	r0, sl, #256	@ 0x100
 802195a:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 802195e:	ea4f 2c1b 	mov.w	ip, fp, lsr #8
 8021962:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 8021966:	eb00 2a1a 	add.w	sl, r0, sl, lsr #8
 802196a:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 802196e:	0a36      	lsrs	r6, r6, #8
 8021970:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8021974:	44dc      	add	ip, fp
 8021976:	f005 1bff 	and.w	fp, r5, #16711935	@ 0xff00ff
 802197a:	f405 457f 	and.w	r5, r5, #65280	@ 0xff00
 802197e:	f406 467f 	and.w	r6, r6, #65280	@ 0xff00
 8021982:	fb09 fb0b 	mul.w	fp, r9, fp
 8021986:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802198a:	fb09 f905 	mul.w	r9, r9, r5
 802198e:	ea4f 201b 	mov.w	r0, fp, lsr #8
 8021992:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8021996:	f509 7580 	add.w	r5, r9, #256	@ 0x100
 802199a:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 802199e:	f000 10ff 	and.w	r0, r0, #16711935	@ 0xff00ff
 80219a2:	fb0c fc07 	mul.w	ip, ip, r7
 80219a6:	eb05 2919 	add.w	r9, r5, r9, lsr #8
 80219aa:	f002 15ff 	and.w	r5, r2, #16711935	@ 0xff00ff
 80219ae:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 80219b2:	4458      	add	r0, fp
 80219b4:	fb08 f505 	mul.w	r5, r8, r5
 80219b8:	ea4f 2919 	mov.w	r9, r9, lsr #8
 80219bc:	fb08 f802 	mul.w	r8, r8, r2
 80219c0:	0a00      	lsrs	r0, r0, #8
 80219c2:	0a2a      	lsrs	r2, r5, #8
 80219c4:	f105 1501 	add.w	r5, r5, #65537	@ 0x10001
 80219c8:	f000 10ff 	and.w	r0, r0, #16711935	@ 0xff00ff
 80219cc:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
 80219d0:	4415      	add	r5, r2
 80219d2:	f508 7280 	add.w	r2, r8, #256	@ 0x100
 80219d6:	0a2d      	lsrs	r5, r5, #8
 80219d8:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 80219dc:	9a00      	ldr	r2, [sp, #0]
 80219de:	f005 15ff 	and.w	r5, r5, #16711935	@ 0xff00ff
 80219e2:	fb03 cc02 	mla	ip, r3, r2, ip
 80219e6:	ea4f 2818 	mov.w	r8, r8, lsr #8
 80219ea:	9b01      	ldr	r3, [sp, #4]
 80219ec:	fb05 c50e 	mla	r5, r5, lr, ip
 80219f0:	f408 487f 	and.w	r8, r8, #65280	@ 0xff00
 80219f4:	43db      	mvns	r3, r3
 80219f6:	fb00 5004 	mla	r0, r0, r4, r5
 80219fa:	b2db      	uxtb	r3, r3
 80219fc:	0a00      	lsrs	r0, r0, #8
 80219fe:	f000 15ff 	and.w	r5, r0, #16711935	@ 0xff00ff
 8021a02:	f40a 407f 	and.w	r0, sl, #65280	@ 0xff00
 8021a06:	4378      	muls	r0, r7
 8021a08:	fb02 0006 	mla	r0, r2, r6, r0
 8021a0c:	780a      	ldrb	r2, [r1, #0]
 8021a0e:	fb0e 0e08 	mla	lr, lr, r8, r0
 8021a12:	f409 407f 	and.w	r0, r9, #65280	@ 0xff00
 8021a16:	fb04 e000 	mla	r0, r4, r0, lr
 8021a1a:	fb02 f403 	mul.w	r4, r2, r3
 8021a1e:	0a00      	lsrs	r0, r0, #8
 8021a20:	1c62      	adds	r2, r4, #1
 8021a22:	f400 407f 	and.w	r0, r0, #65280	@ 0xff00
 8021a26:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 8021a2a:	4328      	orrs	r0, r5
 8021a2c:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 8021a30:	700a      	strb	r2, [r1, #0]
 8021a32:	784a      	ldrb	r2, [r1, #1]
 8021a34:	435a      	muls	r2, r3
 8021a36:	1c54      	adds	r4, r2, #1
 8021a38:	eb04 2412 	add.w	r4, r4, r2, lsr #8
 8021a3c:	0a02      	lsrs	r2, r0, #8
 8021a3e:	0c00      	lsrs	r0, r0, #16
 8021a40:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 8021a44:	704a      	strb	r2, [r1, #1]
 8021a46:	788a      	ldrb	r2, [r1, #2]
 8021a48:	4353      	muls	r3, r2
 8021a4a:	1c5a      	adds	r2, r3, #1
 8021a4c:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8021a50:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 8021a54:	7088      	strb	r0, [r1, #2]
 8021a56:	b003      	add	sp, #12
 8021a58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021a5c:	2600      	movs	r6, #0
 8021a5e:	e706      	b.n	802186e <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x3e>
 8021a60:	2000      	movs	r0, #0
 8021a62:	4606      	mov	r6, r0
 8021a64:	e710      	b.n	8021888 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x58>
 8021a66:	2000      	movs	r0, #0
 8021a68:	e70e      	b.n	8021888 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x58>
 8021a6a:	4620      	mov	r0, r4
 8021a6c:	e70c      	b.n	8021888 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x58>
 8021a6e:	2500      	movs	r5, #0
 8021a70:	e71e      	b.n	80218b0 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x80>
 8021a72:	2200      	movs	r2, #0
 8021a74:	4615      	mov	r5, r2
 8021a76:	e729      	b.n	80218cc <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9c>
 8021a78:	4662      	mov	r2, ip
 8021a7a:	4665      	mov	r5, ip
 8021a7c:	e726      	b.n	80218cc <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9c>
 8021a7e:	2200      	movs	r2, #0
 8021a80:	e724      	b.n	80218cc <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9c>
 8021a82:	4622      	mov	r2, r4
 8021a84:	e722      	b.n	80218cc <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9c>

08021a86 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8021a86:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021a8a:	b09b      	sub	sp, #108	@ 0x6c
 8021a8c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8021a90:	9218      	str	r2, [sp, #96]	@ 0x60
 8021a92:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 8021a94:	9019      	str	r0, [sp, #100]	@ 0x64
 8021a96:	9116      	str	r1, [sp, #88]	@ 0x58
 8021a98:	6850      	ldr	r0, [r2, #4]
 8021a9a:	9307      	str	r3, [sp, #28]
 8021a9c:	6812      	ldr	r2, [r2, #0]
 8021a9e:	9d26      	ldr	r5, [sp, #152]	@ 0x98
 8021aa0:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	@ 0xa8
 8021aa4:	fb00 1303 	mla	r3, r0, r3, r1
 8021aa8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8021aac:	18d3      	adds	r3, r2, r3
 8021aae:	930a      	str	r3, [sp, #40]	@ 0x28
 8021ab0:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 8021ab2:	681b      	ldr	r3, [r3, #0]
 8021ab4:	930f      	str	r3, [sp, #60]	@ 0x3c
 8021ab6:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 8021ab8:	685e      	ldr	r6, [r3, #4]
 8021aba:	3604      	adds	r6, #4
 8021abc:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8021abe:	2b00      	cmp	r3, #0
 8021ac0:	dc03      	bgt.n	8021aca <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44>
 8021ac2:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8021ac4:	2b00      	cmp	r3, #0
 8021ac6:	f340 834f 	ble.w	8022168 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e2>
 8021aca:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 8021acc:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8021ad0:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8021ad4:	1e48      	subs	r0, r1, #1
 8021ad6:	1e57      	subs	r7, r2, #1
 8021ad8:	9b07      	ldr	r3, [sp, #28]
 8021ada:	2b00      	cmp	r3, #0
 8021adc:	f340 8178 	ble.w	8021dd0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 8021ae0:	9c25      	ldr	r4, [sp, #148]	@ 0x94
 8021ae2:	142b      	asrs	r3, r5, #16
 8021ae4:	ea5f 4c24 	movs.w	ip, r4, asr #16
 8021ae8:	d406      	bmi.n	8021af8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8021aea:	4584      	cmp	ip, r0
 8021aec:	da04      	bge.n	8021af8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8021aee:	2b00      	cmp	r3, #0
 8021af0:	db02      	blt.n	8021af8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8021af2:	42bb      	cmp	r3, r7
 8021af4:	f2c0 816d 	blt.w	8021dd2 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34c>
 8021af8:	f11c 0c01 	adds.w	ip, ip, #1
 8021afc:	f100 815b 	bmi.w	8021db6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 8021b00:	4561      	cmp	r1, ip
 8021b02:	f2c0 8158 	blt.w	8021db6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 8021b06:	3301      	adds	r3, #1
 8021b08:	f100 8155 	bmi.w	8021db6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 8021b0c:	429a      	cmp	r2, r3
 8021b0e:	f2c0 8152 	blt.w	8021db6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 8021b12:	9b07      	ldr	r3, [sp, #28]
 8021b14:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
 8021b16:	9317      	str	r3, [sp, #92]	@ 0x5c
 8021b18:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8021b1a:	2b00      	cmp	r3, #0
 8021b1c:	f340 8178 	ble.w	8021e10 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 8021b20:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 8021b22:	ea4f 4c25 	mov.w	ip, r5, asr #16
 8021b26:	f3c5 3003 	ubfx	r0, r5, #12, #4
 8021b2a:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8021b2e:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 8021b30:	e9d3 1e02 	ldrd	r1, lr, [r3, #8]
 8021b34:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 8021b36:	141b      	asrs	r3, r3, #16
 8021b38:	f100 81ba 	bmi.w	8021eb0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 8021b3c:	f101 38ff 	add.w	r8, r1, #4294967295
 8021b40:	4543      	cmp	r3, r8
 8021b42:	f280 81b5 	bge.w	8021eb0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 8021b46:	f1bc 0f00 	cmp.w	ip, #0
 8021b4a:	f2c0 81b1 	blt.w	8021eb0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 8021b4e:	f10e 38ff 	add.w	r8, lr, #4294967295
 8021b52:	45c4      	cmp	ip, r8
 8021b54:	f280 81ac 	bge.w	8021eb0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 8021b58:	b209      	sxth	r1, r1
 8021b5a:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 8021b5c:	fb0c 3301 	mla	r3, ip, r1, r3
 8021b60:	eb04 0803 	add.w	r8, r4, r3
 8021b64:	5ce3      	ldrb	r3, [r4, r3]
 8021b66:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8021b6a:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 8021b6e:	2a00      	cmp	r2, #0
 8021b70:	f000 8193 	beq.w	8021e9a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x414>
 8021b74:	f898 c001 	ldrb.w	ip, [r8, #1]
 8021b78:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
 8021b7c:	940b      	str	r4, [sp, #44]	@ 0x2c
 8021b7e:	0e24      	lsrs	r4, r4, #24
 8021b80:	9412      	str	r4, [sp, #72]	@ 0x48
 8021b82:	b178      	cbz	r0, 8021ba4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11e>
 8021b84:	eb08 0c01 	add.w	ip, r8, r1
 8021b88:	f818 1001 	ldrb.w	r1, [r8, r1]
 8021b8c:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8021b90:	9108      	str	r1, [sp, #32]
 8021b92:	0e09      	lsrs	r1, r1, #24
 8021b94:	9110      	str	r1, [sp, #64]	@ 0x40
 8021b96:	f89c 1001 	ldrb.w	r1, [ip, #1]
 8021b9a:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8021b9e:	910c      	str	r1, [sp, #48]	@ 0x30
 8021ba0:	0e09      	lsrs	r1, r1, #24
 8021ba2:	9113      	str	r1, [sp, #76]	@ 0x4c
 8021ba4:	b292      	uxth	r2, r2
 8021ba6:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8021ba8:	b280      	uxth	r0, r0
 8021baa:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 8021bac:	fb02 f900 	mul.w	r9, r2, r0
 8021bb0:	0112      	lsls	r2, r2, #4
 8021bb2:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 8021bb6:	eba2 0809 	sub.w	r8, r2, r9
 8021bba:	f5c2 7280 	rsb	r2, r2, #256	@ 0x100
 8021bbe:	b280      	uxth	r0, r0
 8021bc0:	fa1f f888 	uxth.w	r8, r8
 8021bc4:	1a12      	subs	r2, r2, r0
 8021bc6:	fb08 f101 	mul.w	r1, r8, r1
 8021bca:	b292      	uxth	r2, r2
 8021bcc:	fb02 110e 	mla	r1, r2, lr, r1
 8021bd0:	fb00 1104 	mla	r1, r0, r4, r1
 8021bd4:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8021bd6:	fb09 1104 	mla	r1, r9, r4, r1
 8021bda:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8021bde:	2900      	cmp	r1, #0
 8021be0:	f000 80de 	beq.w	8021da0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 8021be4:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 8021be8:	d01b      	beq.n	8021c22 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19c>
 8021bea:	f003 1aff 	and.w	sl, r3, #16711935	@ 0xff00ff
 8021bee:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8021bf2:	fb0e fa0a 	mul.w	sl, lr, sl
 8021bf6:	fb0e fe03 	mul.w	lr, lr, r3
 8021bfa:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8021bfe:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 8021c02:	f50e 7c80 	add.w	ip, lr, #256	@ 0x100
 8021c06:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 8021c0a:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 8021c0e:	4453      	add	r3, sl
 8021c10:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8021c14:	0a1b      	lsrs	r3, r3, #8
 8021c16:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 8021c1a:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 8021c1e:	ea43 030c 	orr.w	r3, r3, ip
 8021c22:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 8021c24:	2cff      	cmp	r4, #255	@ 0xff
 8021c26:	d021      	beq.n	8021c6c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 8021c28:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8021c2a:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 8021c2e:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 8021c30:	fb04 fb0b 	mul.w	fp, r4, fp
 8021c34:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8021c36:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 8021c3a:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 8021c3c:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8021c40:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 8021c44:	fb04 fa0a 	mul.w	sl, r4, sl
 8021c48:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8021c4c:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 8021c50:	44de      	add	lr, fp
 8021c52:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8021c56:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8021c5a:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8021c5e:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8021c62:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8021c66:	ea4e 040a 	orr.w	r4, lr, sl
 8021c6a:	940b      	str	r4, [sp, #44]	@ 0x2c
 8021c6c:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 8021c6e:	2cff      	cmp	r4, #255	@ 0xff
 8021c70:	d021      	beq.n	8021cb6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x230>
 8021c72:	9c08      	ldr	r4, [sp, #32]
 8021c74:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 8021c78:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 8021c7a:	fb04 fb0b 	mul.w	fp, r4, fp
 8021c7e:	9c08      	ldr	r4, [sp, #32]
 8021c80:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 8021c84:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 8021c86:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8021c8a:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 8021c8e:	fb04 fa0a 	mul.w	sl, r4, sl
 8021c92:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8021c96:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 8021c9a:	44de      	add	lr, fp
 8021c9c:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8021ca0:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8021ca4:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8021ca8:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8021cac:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8021cb0:	ea4e 040a 	orr.w	r4, lr, sl
 8021cb4:	9408      	str	r4, [sp, #32]
 8021cb6:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8021cb8:	2cff      	cmp	r4, #255	@ 0xff
 8021cba:	d021      	beq.n	8021d00 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 8021cbc:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8021cbe:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 8021cc2:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8021cc4:	fb04 fb0b 	mul.w	fp, r4, fp
 8021cc8:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8021cca:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 8021cce:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8021cd0:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8021cd4:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 8021cd8:	fb04 fa0a 	mul.w	sl, r4, sl
 8021cdc:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8021ce0:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 8021ce4:	44de      	add	lr, fp
 8021ce6:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8021cea:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8021cee:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8021cf2:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8021cf6:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8021cfa:	ea4e 040a 	orr.w	r4, lr, sl
 8021cfe:	940c      	str	r4, [sp, #48]	@ 0x30
 8021d00:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8021d02:	f003 1eff 	and.w	lr, r3, #16711935	@ 0xff00ff
 8021d06:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8021d0a:	43c9      	mvns	r1, r1
 8021d0c:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 8021d10:	9c08      	ldr	r4, [sp, #32]
 8021d12:	b2c9      	uxtb	r1, r1
 8021d14:	fb08 fc0c 	mul.w	ip, r8, ip
 8021d18:	fb02 cc0e 	mla	ip, r2, lr, ip
 8021d1c:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 8021d20:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8021d22:	fb00 cc0e 	mla	ip, r0, lr, ip
 8021d26:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 8021d2a:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8021d2c:	fb09 cc0e 	mla	ip, r9, lr, ip
 8021d30:	f404 4e7f 	and.w	lr, r4, #65280	@ 0xff00
 8021d34:	fb08 f80e 	mul.w	r8, r8, lr
 8021d38:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8021d3c:	fb02 8303 	mla	r3, r2, r3, r8
 8021d40:	9a08      	ldr	r2, [sp, #32]
 8021d42:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8021d46:	f402 4a7f 	and.w	sl, r2, #65280	@ 0xff00
 8021d4a:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8021d4c:	fb00 330a 	mla	r3, r0, sl, r3
 8021d50:	f402 407f 	and.w	r0, r2, #65280	@ 0xff00
 8021d54:	fb09 3900 	mla	r9, r9, r0, r3
 8021d58:	783b      	ldrb	r3, [r7, #0]
 8021d5a:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8021d5e:	fb03 f201 	mul.w	r2, r3, r1
 8021d62:	f409 497f 	and.w	r9, r9, #65280	@ 0xff00
 8021d66:	1c53      	adds	r3, r2, #1
 8021d68:	ea4c 0c09 	orr.w	ip, ip, r9
 8021d6c:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8021d70:	eb0c 2313 	add.w	r3, ip, r3, lsr #8
 8021d74:	703b      	strb	r3, [r7, #0]
 8021d76:	787b      	ldrb	r3, [r7, #1]
 8021d78:	434b      	muls	r3, r1
 8021d7a:	1c5a      	adds	r2, r3, #1
 8021d7c:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8021d80:	ea4f 231c 	mov.w	r3, ip, lsr #8
 8021d84:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8021d88:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8021d8c:	707b      	strb	r3, [r7, #1]
 8021d8e:	78bb      	ldrb	r3, [r7, #2]
 8021d90:	4359      	muls	r1, r3
 8021d92:	1c4b      	adds	r3, r1, #1
 8021d94:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 8021d98:	eb0c 2c11 	add.w	ip, ip, r1, lsr #8
 8021d9c:	f887 c002 	strb.w	ip, [r7, #2]
 8021da0:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8021da2:	3703      	adds	r7, #3
 8021da4:	9a25      	ldr	r2, [sp, #148]	@ 0x94
 8021da6:	441a      	add	r2, r3
 8021da8:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8021daa:	441d      	add	r5, r3
 8021dac:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8021dae:	9225      	str	r2, [sp, #148]	@ 0x94
 8021db0:	3b01      	subs	r3, #1
 8021db2:	9317      	str	r3, [sp, #92]	@ 0x5c
 8021db4:	e6b0      	b.n	8021b18 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8021db6:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8021db8:	9c25      	ldr	r4, [sp, #148]	@ 0x94
 8021dba:	441c      	add	r4, r3
 8021dbc:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8021dbe:	441d      	add	r5, r3
 8021dc0:	9b07      	ldr	r3, [sp, #28]
 8021dc2:	9425      	str	r4, [sp, #148]	@ 0x94
 8021dc4:	3b01      	subs	r3, #1
 8021dc6:	9307      	str	r3, [sp, #28]
 8021dc8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8021dca:	3303      	adds	r3, #3
 8021dcc:	930a      	str	r3, [sp, #40]	@ 0x28
 8021dce:	e683      	b.n	8021ad8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 8021dd0:	d026      	beq.n	8021e20 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x39a>
 8021dd2:	9b07      	ldr	r3, [sp, #28]
 8021dd4:	9827      	ldr	r0, [sp, #156]	@ 0x9c
 8021dd6:	3b01      	subs	r3, #1
 8021dd8:	9c25      	ldr	r4, [sp, #148]	@ 0x94
 8021dda:	fb00 4003 	mla	r0, r0, r3, r4
 8021dde:	1400      	asrs	r0, r0, #16
 8021de0:	f53f ae97 	bmi.w	8021b12 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 8021de4:	3901      	subs	r1, #1
 8021de6:	4288      	cmp	r0, r1
 8021de8:	f6bf ae93 	bge.w	8021b12 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 8021dec:	9928      	ldr	r1, [sp, #160]	@ 0xa0
 8021dee:	fb01 5303 	mla	r3, r1, r3, r5
 8021df2:	141b      	asrs	r3, r3, #16
 8021df4:	f53f ae8d 	bmi.w	8021b12 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 8021df8:	3a01      	subs	r2, #1
 8021dfa:	4293      	cmp	r3, r2
 8021dfc:	f6bf ae89 	bge.w	8021b12 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 8021e00:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8021e02:	f8dd b01c 	ldr.w	fp, [sp, #28]
 8021e06:	f103 0e03 	add.w	lr, r3, #3
 8021e0a:	f1bb 0f00 	cmp.w	fp, #0
 8021e0e:	dc6d      	bgt.n	8021eec <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x466>
 8021e10:	9b07      	ldr	r3, [sp, #28]
 8021e12:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8021e16:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8021e18:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8021e1c:	4423      	add	r3, r4
 8021e1e:	930a      	str	r3, [sp, #40]	@ 0x28
 8021e20:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8021e22:	2b00      	cmp	r3, #0
 8021e24:	f340 81a0 	ble.w	8022168 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e2>
 8021e28:	ee30 0a04 	vadd.f32	s0, s0, s8
 8021e2c:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8021e2e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8021e32:	eeb0 6a62 	vmov.f32	s12, s5
 8021e36:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8021e3a:	ee31 1a05 	vadd.f32	s2, s2, s10
 8021e3e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8021e42:	ed8d 6a25 	vstr	s12, [sp, #148]	@ 0x94
 8021e46:	eeb0 6a43 	vmov.f32	s12, s6
 8021e4a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8021e4e:	ee16 5a10 	vmov	r5, s12
 8021e52:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8021e56:	ee61 7a27 	vmul.f32	s15, s2, s15
 8021e5a:	ee77 2a62 	vsub.f32	s5, s14, s5
 8021e5e:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8021e62:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8021e66:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8021e6a:	ee12 2a90 	vmov	r2, s5
 8021e6e:	eef0 2a47 	vmov.f32	s5, s14
 8021e72:	fb92 f3f3 	sdiv	r3, r2, r3
 8021e76:	ee13 2a10 	vmov	r2, s6
 8021e7a:	9327      	str	r3, [sp, #156]	@ 0x9c
 8021e7c:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8021e7e:	eeb0 3a67 	vmov.f32	s6, s15
 8021e82:	fb92 f3f3 	sdiv	r3, r2, r3
 8021e86:	9328      	str	r3, [sp, #160]	@ 0xa0
 8021e88:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8021e8a:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8021e8c:	3b01      	subs	r3, #1
 8021e8e:	9316      	str	r3, [sp, #88]	@ 0x58
 8021e90:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8021e92:	bf08      	it	eq
 8021e94:	4613      	moveq	r3, r2
 8021e96:	9307      	str	r3, [sp, #28]
 8021e98:	e610      	b.n	8021abc <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36>
 8021e9a:	2800      	cmp	r0, #0
 8021e9c:	f43f ae82 	beq.w	8021ba4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11e>
 8021ea0:	f818 1001 	ldrb.w	r1, [r8, r1]
 8021ea4:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8021ea8:	9108      	str	r1, [sp, #32]
 8021eaa:	0e09      	lsrs	r1, r1, #24
 8021eac:	9110      	str	r1, [sp, #64]	@ 0x40
 8021eae:	e679      	b.n	8021ba4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11e>
 8021eb0:	f113 0801 	adds.w	r8, r3, #1
 8021eb4:	f53f af74 	bmi.w	8021da0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 8021eb8:	4541      	cmp	r1, r8
 8021eba:	f6ff af71 	blt.w	8021da0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 8021ebe:	f11c 0801 	adds.w	r8, ip, #1
 8021ec2:	f53f af6d 	bmi.w	8021da0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 8021ec6:	45c6      	cmp	lr, r8
 8021ec8:	f6ff af6a 	blt.w	8021da0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 8021ecc:	b209      	sxth	r1, r1
 8021ece:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 8021ed2:	fa0f f38e 	sxth.w	r3, lr
 8021ed6:	9100      	str	r1, [sp, #0]
 8021ed8:	4639      	mov	r1, r7
 8021eda:	9301      	str	r3, [sp, #4]
 8021edc:	4633      	mov	r3, r6
 8021ede:	e9cd 2004 	strd	r2, r0, [sp, #16]
 8021ee2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8021ee4:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8021ee6:	f7ff fca3 	bl	8021830 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh>
 8021eea:	e759      	b.n	8021da0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 8021eec:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 8021eee:	f3c5 3003 	ubfx	r0, r5, #12, #4
 8021ef2:	9c25      	ldr	r4, [sp, #148]	@ 0x94
 8021ef4:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8021ef8:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 8021efa:	1427      	asrs	r7, r4, #16
 8021efc:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 8021efe:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8021f02:	142b      	asrs	r3, r5, #16
 8021f04:	fb01 7303 	mla	r3, r1, r3, r7
 8021f08:	18e7      	adds	r7, r4, r3
 8021f0a:	5ce3      	ldrb	r3, [r4, r3]
 8021f0c:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8021f10:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 8021f14:	2a00      	cmp	r2, #0
 8021f16:	f000 811d 	beq.w	8022154 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6ce>
 8021f1a:	f897 8001 	ldrb.w	r8, [r7, #1]
 8021f1e:	f856 4028 	ldr.w	r4, [r6, r8, lsl #2]
 8021f22:	940d      	str	r4, [sp, #52]	@ 0x34
 8021f24:	0e24      	lsrs	r4, r4, #24
 8021f26:	9414      	str	r4, [sp, #80]	@ 0x50
 8021f28:	b170      	cbz	r0, 8021f48 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c2>
 8021f2a:	eb07 0801 	add.w	r8, r7, r1
 8021f2e:	5c79      	ldrb	r1, [r7, r1]
 8021f30:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8021f34:	9109      	str	r1, [sp, #36]	@ 0x24
 8021f36:	0e09      	lsrs	r1, r1, #24
 8021f38:	9111      	str	r1, [sp, #68]	@ 0x44
 8021f3a:	f898 1001 	ldrb.w	r1, [r8, #1]
 8021f3e:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8021f42:	910e      	str	r1, [sp, #56]	@ 0x38
 8021f44:	0e09      	lsrs	r1, r1, #24
 8021f46:	9115      	str	r1, [sp, #84]	@ 0x54
 8021f48:	b292      	uxth	r2, r2
 8021f4a:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 8021f4c:	b280      	uxth	r0, r0
 8021f4e:	fb02 f900 	mul.w	r9, r2, r0
 8021f52:	0112      	lsls	r2, r2, #4
 8021f54:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 8021f58:	eba2 0809 	sub.w	r8, r2, r9
 8021f5c:	f5c2 7180 	rsb	r1, r2, #256	@ 0x100
 8021f60:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8021f62:	b280      	uxth	r0, r0
 8021f64:	fa1f f888 	uxth.w	r8, r8
 8021f68:	1a09      	subs	r1, r1, r0
 8021f6a:	fb08 f202 	mul.w	r2, r8, r2
 8021f6e:	b289      	uxth	r1, r1
 8021f70:	fb01 220c 	mla	r2, r1, ip, r2
 8021f74:	fb00 2204 	mla	r2, r0, r4, r2
 8021f78:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 8021f7a:	fb09 2204 	mla	r2, r9, r4, r2
 8021f7e:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8021f82:	2a00      	cmp	r2, #0
 8021f84:	f000 80db 	beq.w	802213e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6b8>
 8021f88:	f1bc 0fff 	cmp.w	ip, #255	@ 0xff
 8021f8c:	d019      	beq.n	8021fc2 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x53c>
 8021f8e:	f003 1aff 	and.w	sl, r3, #16711935	@ 0xff00ff
 8021f92:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8021f96:	fb0c fa0a 	mul.w	sl, ip, sl
 8021f9a:	fb0c fc03 	mul.w	ip, ip, r3
 8021f9e:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8021fa2:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 8021fa6:	f50c 7780 	add.w	r7, ip, #256	@ 0x100
 8021faa:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 8021fae:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 8021fb2:	4453      	add	r3, sl
 8021fb4:	0a3f      	lsrs	r7, r7, #8
 8021fb6:	0a1b      	lsrs	r3, r3, #8
 8021fb8:	f407 477f 	and.w	r7, r7, #65280	@ 0xff00
 8021fbc:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 8021fc0:	433b      	orrs	r3, r7
 8021fc2:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 8021fc4:	2cff      	cmp	r4, #255	@ 0xff
 8021fc6:	d020      	beq.n	802200a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x584>
 8021fc8:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 8021fca:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 8021fce:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 8021fd0:	4367      	muls	r7, r4
 8021fd2:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 8021fd4:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8021fd8:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 8021fdc:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 8021fde:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 8021fe2:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8021fe6:	fb04 fa0a 	mul.w	sl, r4, sl
 8021fea:	44bc      	add	ip, r7
 8021fec:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 8021ff0:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8021ff4:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8021ff8:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8021ffc:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8022000:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8022004:	ea4c 040a 	orr.w	r4, ip, sl
 8022008:	940d      	str	r4, [sp, #52]	@ 0x34
 802200a:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 802200c:	2cff      	cmp	r4, #255	@ 0xff
 802200e:	d020      	beq.n	8022052 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5cc>
 8022010:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 8022012:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 8022016:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 8022018:	4367      	muls	r7, r4
 802201a:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 802201c:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8022020:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 8022024:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 8022026:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 802202a:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 802202e:	fb04 fa0a 	mul.w	sl, r4, sl
 8022032:	44bc      	add	ip, r7
 8022034:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 8022038:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802203c:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8022040:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8022044:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8022048:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 802204c:	ea4c 040a 	orr.w	r4, ip, sl
 8022050:	9409      	str	r4, [sp, #36]	@ 0x24
 8022052:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 8022054:	2cff      	cmp	r4, #255	@ 0xff
 8022056:	d020      	beq.n	802209a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x614>
 8022058:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 802205a:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 802205e:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 8022060:	4367      	muls	r7, r4
 8022062:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 8022064:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8022068:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 802206c:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 802206e:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 8022072:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8022076:	fb04 fa0a 	mul.w	sl, r4, sl
 802207a:	44bc      	add	ip, r7
 802207c:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 8022080:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8022084:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8022088:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 802208c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8022090:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8022094:	ea4c 040a 	orr.w	r4, ip, sl
 8022098:	940e      	str	r4, [sp, #56]	@ 0x38
 802209a:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 802209c:	f003 1cff 	and.w	ip, r3, #16711935	@ 0xff00ff
 80220a0:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80220a4:	43d2      	mvns	r2, r2
 80220a6:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 80220aa:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 80220ac:	b2d2      	uxtb	r2, r2
 80220ae:	fb08 f707 	mul.w	r7, r8, r7
 80220b2:	fb01 770c 	mla	r7, r1, ip, r7
 80220b6:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 80220ba:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 80220bc:	fb00 770c 	mla	r7, r0, ip, r7
 80220c0:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 80220c4:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 80220c6:	fb09 770c 	mla	r7, r9, ip, r7
 80220ca:	f404 4c7f 	and.w	ip, r4, #65280	@ 0xff00
 80220ce:	fb08 f80c 	mul.w	r8, r8, ip
 80220d2:	0a3f      	lsrs	r7, r7, #8
 80220d4:	fb01 8303 	mla	r3, r1, r3, r8
 80220d8:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80220da:	f007 17ff 	and.w	r7, r7, #16711935	@ 0xff00ff
 80220de:	f401 4a7f 	and.w	sl, r1, #65280	@ 0xff00
 80220e2:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80220e4:	fb00 330a 	mla	r3, r0, sl, r3
 80220e8:	f401 4c7f 	and.w	ip, r1, #65280	@ 0xff00
 80220ec:	fb09 3c0c 	mla	ip, r9, ip, r3
 80220f0:	f81e 3c03 	ldrb.w	r3, [lr, #-3]
 80220f4:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80220f8:	fb03 f102 	mul.w	r1, r3, r2
 80220fc:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 8022100:	1c4b      	adds	r3, r1, #1
 8022102:	ea47 070c 	orr.w	r7, r7, ip
 8022106:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 802210a:	eb07 2313 	add.w	r3, r7, r3, lsr #8
 802210e:	f80e 3c03 	strb.w	r3, [lr, #-3]
 8022112:	f81e 3c02 	ldrb.w	r3, [lr, #-2]
 8022116:	4353      	muls	r3, r2
 8022118:	1c59      	adds	r1, r3, #1
 802211a:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 802211e:	0a3b      	lsrs	r3, r7, #8
 8022120:	0c3f      	lsrs	r7, r7, #16
 8022122:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 8022126:	f80e 3c02 	strb.w	r3, [lr, #-2]
 802212a:	f81e 3c01 	ldrb.w	r3, [lr, #-1]
 802212e:	435a      	muls	r2, r3
 8022130:	1c53      	adds	r3, r2, #1
 8022132:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 8022136:	eb07 2712 	add.w	r7, r7, r2, lsr #8
 802213a:	f80e 7c01 	strb.w	r7, [lr, #-1]
 802213e:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8022140:	f10e 0e03 	add.w	lr, lr, #3
 8022144:	9a25      	ldr	r2, [sp, #148]	@ 0x94
 8022146:	f10b 3bff 	add.w	fp, fp, #4294967295
 802214a:	441a      	add	r2, r3
 802214c:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 802214e:	9225      	str	r2, [sp, #148]	@ 0x94
 8022150:	441d      	add	r5, r3
 8022152:	e65a      	b.n	8021e0a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x384>
 8022154:	2800      	cmp	r0, #0
 8022156:	f43f aef7 	beq.w	8021f48 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c2>
 802215a:	5c79      	ldrb	r1, [r7, r1]
 802215c:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8022160:	9109      	str	r1, [sp, #36]	@ 0x24
 8022162:	0e09      	lsrs	r1, r1, #24
 8022164:	9111      	str	r1, [sp, #68]	@ 0x44
 8022166:	e6ef      	b.n	8021f48 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c2>
 8022168:	b01b      	add	sp, #108	@ 0x6c
 802216a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0802216e <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh>:
 802216e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022172:	b08d      	sub	sp, #52	@ 0x34
 8022174:	468b      	mov	fp, r1
 8022176:	e9dd 5c17 	ldrd	r5, ip, [sp, #92]	@ 0x5c
 802217a:	f89d 106c 	ldrb.w	r1, [sp, #108]	@ 0x6c
 802217e:	fb0c 5703 	mla	r7, ip, r3, r5
 8022182:	f1bc 0f00 	cmp.w	ip, #0
 8022186:	910b      	str	r1, [sp, #44]	@ 0x2c
 8022188:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 802218c:	f9bd e058 	ldrsh.w	lr, [sp, #88]	@ 0x58
 8022190:	f89d 8064 	ldrb.w	r8, [sp, #100]	@ 0x64
 8022194:	f89d a068 	ldrb.w	sl, [sp, #104]	@ 0x68
 8022198:	eb02 0607 	add.w	r6, r2, r7
 802219c:	f89b 4000 	ldrb.w	r4, [fp]
 80221a0:	f89b 0001 	ldrb.w	r0, [fp, #1]
 80221a4:	f89b 1002 	ldrb.w	r1, [fp, #2]
 80221a8:	f2c0 80c1 	blt.w	802232e <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1c0>
 80221ac:	45e6      	cmp	lr, ip
 80221ae:	f340 80be 	ble.w	802232e <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1c0>
 80221b2:	2d00      	cmp	r5, #0
 80221b4:	f2c0 80b7 	blt.w	8022326 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1b8>
 80221b8:	42ab      	cmp	r3, r5
 80221ba:	f340 80b4 	ble.w	8022326 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1b8>
 80221be:	5dd2      	ldrb	r2, [r2, r7]
 80221c0:	9205      	str	r2, [sp, #20]
 80221c2:	7872      	ldrb	r2, [r6, #1]
 80221c4:	9206      	str	r2, [sp, #24]
 80221c6:	78b2      	ldrb	r2, [r6, #2]
 80221c8:	9207      	str	r2, [sp, #28]
 80221ca:	1c6a      	adds	r2, r5, #1
 80221cc:	f100 80b6 	bmi.w	802233c <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ce>
 80221d0:	4293      	cmp	r3, r2
 80221d2:	f340 80b3 	ble.w	802233c <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ce>
 80221d6:	f1b8 0f00 	cmp.w	r8, #0
 80221da:	f000 80af 	beq.w	802233c <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ce>
 80221de:	78f2      	ldrb	r2, [r6, #3]
 80221e0:	9201      	str	r2, [sp, #4]
 80221e2:	7932      	ldrb	r2, [r6, #4]
 80221e4:	9202      	str	r2, [sp, #8]
 80221e6:	7972      	ldrb	r2, [r6, #5]
 80221e8:	9203      	str	r2, [sp, #12]
 80221ea:	f11c 0c01 	adds.w	ip, ip, #1
 80221ee:	f100 80ad 	bmi.w	802234c <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1de>
 80221f2:	45e6      	cmp	lr, ip
 80221f4:	f340 80aa 	ble.w	802234c <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1de>
 80221f8:	f1ba 0f00 	cmp.w	sl, #0
 80221fc:	f000 80a6 	beq.w	802234c <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1de>
 8022200:	2d00      	cmp	r5, #0
 8022202:	f2c0 809f 	blt.w	8022344 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1d6>
 8022206:	42ab      	cmp	r3, r5
 8022208:	f340 809c 	ble.w	8022344 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1d6>
 802220c:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8022210:	f816 9002 	ldrb.w	r9, [r6, r2]
 8022214:	2203      	movs	r2, #3
 8022216:	fb03 6c02 	mla	ip, r3, r2, r6
 802221a:	f89c 7001 	ldrb.w	r7, [ip, #1]
 802221e:	f89c e002 	ldrb.w	lr, [ip, #2]
 8022222:	9704      	str	r7, [sp, #16]
 8022224:	3501      	adds	r5, #1
 8022226:	f100 8098 	bmi.w	802235a <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ec>
 802222a:	42ab      	cmp	r3, r5
 802222c:	f340 8095 	ble.w	802235a <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ec>
 8022230:	f1b8 0f00 	cmp.w	r8, #0
 8022234:	f000 8091 	beq.w	802235a <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ec>
 8022238:	f04f 0c03 	mov.w	ip, #3
 802223c:	fb13 c20c 	smlabb	r2, r3, ip, ip
 8022240:	5cb5      	ldrb	r5, [r6, r2]
 8022242:	fb03 620c 	mla	r2, r3, ip, r6
 8022246:	fb03 630c 	mla	r3, r3, ip, r6
 802224a:	7912      	ldrb	r2, [r2, #4]
 802224c:	795e      	ldrb	r6, [r3, #5]
 802224e:	fa1f f388 	uxth.w	r3, r8
 8022252:	fa1f fc8a 	uxth.w	ip, sl
 8022256:	fb03 f70c 	mul.w	r7, r3, ip
 802225a:	011b      	lsls	r3, r3, #4
 802225c:	9708      	str	r7, [sp, #32]
 802225e:	ebc7 1c0c 	rsb	ip, r7, ip, lsl #4
 8022262:	f5c3 7a80 	rsb	sl, r3, #256	@ 0x100
 8022266:	1bdb      	subs	r3, r3, r7
 8022268:	f8bd 702c 	ldrh.w	r7, [sp, #44]	@ 0x2c
 802226c:	fa1f fc8c 	uxth.w	ip, ip
 8022270:	b29b      	uxth	r3, r3
 8022272:	9709      	str	r7, [sp, #36]	@ 0x24
 8022274:	ebaa 0a0c 	sub.w	sl, sl, ip
 8022278:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 802227a:	930a      	str	r3, [sp, #40]	@ 0x28
 802227c:	fa1f fa8a 	uxth.w	sl, sl
 8022280:	ea6f 0807 	mvn.w	r8, r7
 8022284:	9f01      	ldr	r7, [sp, #4]
 8022286:	435f      	muls	r7, r3
 8022288:	9b05      	ldr	r3, [sp, #20]
 802228a:	fa5f f888 	uxtb.w	r8, r8
 802228e:	fb0a 7703 	mla	r7, sl, r3, r7
 8022292:	9b08      	ldr	r3, [sp, #32]
 8022294:	fb14 f408 	smulbb	r4, r4, r8
 8022298:	fb0c 7709 	mla	r7, ip, r9, r7
 802229c:	fb10 f008 	smulbb	r0, r0, r8
 80222a0:	fb11 f108 	smulbb	r1, r1, r8
 80222a4:	fb03 7705 	mla	r7, r3, r5, r7
 80222a8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80222aa:	f3c7 2707 	ubfx	r7, r7, #8, #8
 80222ae:	fb07 4703 	mla	r7, r7, r3, r4
 80222b2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80222b4:	b2bf      	uxth	r7, r7
 80222b6:	1c7c      	adds	r4, r7, #1
 80222b8:	eb04 2417 	add.w	r4, r4, r7, lsr #8
 80222bc:	1224      	asrs	r4, r4, #8
 80222be:	f88b 4000 	strb.w	r4, [fp]
 80222c2:	9c02      	ldr	r4, [sp, #8]
 80222c4:	435c      	muls	r4, r3
 80222c6:	9b06      	ldr	r3, [sp, #24]
 80222c8:	fb0a 4403 	mla	r4, sl, r3, r4
 80222cc:	9b04      	ldr	r3, [sp, #16]
 80222ce:	fb0c 4403 	mla	r4, ip, r3, r4
 80222d2:	9b08      	ldr	r3, [sp, #32]
 80222d4:	fb03 4402 	mla	r4, r3, r2, r4
 80222d8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80222da:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80222dc:	f3c4 2407 	ubfx	r4, r4, #8, #8
 80222e0:	fb04 0403 	mla	r4, r4, r3, r0
 80222e4:	9b03      	ldr	r3, [sp, #12]
 80222e6:	435a      	muls	r2, r3
 80222e8:	b2a4      	uxth	r4, r4
 80222ea:	4613      	mov	r3, r2
 80222ec:	9a07      	ldr	r2, [sp, #28]
 80222ee:	1c60      	adds	r0, r4, #1
 80222f0:	fb0a 3a02 	mla	sl, sl, r2, r3
 80222f4:	9b08      	ldr	r3, [sp, #32]
 80222f6:	eb00 2414 	add.w	r4, r0, r4, lsr #8
 80222fa:	fb0c ac0e 	mla	ip, ip, lr, sl
 80222fe:	1224      	asrs	r4, r4, #8
 8022300:	fb03 c606 	mla	r6, r3, r6, ip
 8022304:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8022306:	f88b 4001 	strb.w	r4, [fp, #1]
 802230a:	f3c6 2607 	ubfx	r6, r6, #8, #8
 802230e:	fb06 1103 	mla	r1, r6, r3, r1
 8022312:	b289      	uxth	r1, r1
 8022314:	1c4e      	adds	r6, r1, #1
 8022316:	eb06 2111 	add.w	r1, r6, r1, lsr #8
 802231a:	1209      	asrs	r1, r1, #8
 802231c:	f88b 1002 	strb.w	r1, [fp, #2]
 8022320:	b00d      	add	sp, #52	@ 0x34
 8022322:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022326:	e9cd 0106 	strd	r0, r1, [sp, #24]
 802232a:	9405      	str	r4, [sp, #20]
 802232c:	e74d      	b.n	80221ca <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x5c>
 802232e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8022332:	9401      	str	r4, [sp, #4]
 8022334:	9405      	str	r4, [sp, #20]
 8022336:	e9cd 0106 	strd	r0, r1, [sp, #24]
 802233a:	e756      	b.n	80221ea <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x7c>
 802233c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8022340:	9401      	str	r4, [sp, #4]
 8022342:	e752      	b.n	80221ea <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x7c>
 8022344:	468e      	mov	lr, r1
 8022346:	9004      	str	r0, [sp, #16]
 8022348:	46a1      	mov	r9, r4
 802234a:	e76b      	b.n	8022224 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xb6>
 802234c:	460e      	mov	r6, r1
 802234e:	4602      	mov	r2, r0
 8022350:	4625      	mov	r5, r4
 8022352:	468e      	mov	lr, r1
 8022354:	9004      	str	r0, [sp, #16]
 8022356:	46a1      	mov	r9, r4
 8022358:	e779      	b.n	802224e <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xe0>
 802235a:	460e      	mov	r6, r1
 802235c:	4602      	mov	r2, r0
 802235e:	4625      	mov	r5, r4
 8022360:	e775      	b.n	802224e <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xe0>

08022362 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8022362:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022366:	b09f      	sub	sp, #124	@ 0x7c
 8022368:	920e      	str	r2, [sp, #56]	@ 0x38
 802236a:	9307      	str	r3, [sp, #28]
 802236c:	9a2d      	ldr	r2, [sp, #180]	@ 0xb4
 802236e:	f89d 30c4 	ldrb.w	r3, [sp, #196]	@ 0xc4
 8022372:	901d      	str	r0, [sp, #116]	@ 0x74
 8022374:	930c      	str	r3, [sp, #48]	@ 0x30
 8022376:	6850      	ldr	r0, [r2, #4]
 8022378:	910b      	str	r1, [sp, #44]	@ 0x2c
 802237a:	6812      	ldr	r2, [r2, #0]
 802237c:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	@ 0xb8
 8022380:	e9dd a829 	ldrd	sl, r8, [sp, #164]	@ 0xa4
 8022384:	fb00 1303 	mla	r3, r0, r3, r1
 8022388:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 802238c:	18d3      	adds	r3, r2, r3
 802238e:	9308      	str	r3, [sp, #32]
 8022390:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 8022392:	681b      	ldr	r3, [r3, #0]
 8022394:	930a      	str	r3, [sp, #40]	@ 0x28
 8022396:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8022398:	43db      	mvns	r3, r3
 802239a:	b2db      	uxtb	r3, r3
 802239c:	9309      	str	r3, [sp, #36]	@ 0x24
 802239e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80223a0:	2b00      	cmp	r3, #0
 80223a2:	dc03      	bgt.n	80223ac <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 80223a4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80223a6:	2b00      	cmp	r3, #0
 80223a8:	f340 81f5 	ble.w	8022796 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x434>
 80223ac:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 80223ae:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80223b2:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80223b6:	1e48      	subs	r0, r1, #1
 80223b8:	1e54      	subs	r4, r2, #1
 80223ba:	9b07      	ldr	r3, [sp, #28]
 80223bc:	2b00      	cmp	r3, #0
 80223be:	f340 80d5 	ble.w	802256c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20a>
 80223c2:	ea5f 452a 	movs.w	r5, sl, asr #16
 80223c6:	ea4f 4328 	mov.w	r3, r8, asr #16
 80223ca:	d406      	bmi.n	80223da <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 80223cc:	4285      	cmp	r5, r0
 80223ce:	da04      	bge.n	80223da <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 80223d0:	2b00      	cmp	r3, #0
 80223d2:	db02      	blt.n	80223da <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 80223d4:	42a3      	cmp	r3, r4
 80223d6:	f2c0 80ca 	blt.w	802256e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20c>
 80223da:	3501      	adds	r5, #1
 80223dc:	f100 80bb 	bmi.w	8022556 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f4>
 80223e0:	42a9      	cmp	r1, r5
 80223e2:	f2c0 80b8 	blt.w	8022556 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f4>
 80223e6:	3301      	adds	r3, #1
 80223e8:	f100 80b5 	bmi.w	8022556 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f4>
 80223ec:	429a      	cmp	r2, r3
 80223ee:	f2c0 80b2 	blt.w	8022556 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f4>
 80223f2:	9b07      	ldr	r3, [sp, #28]
 80223f4:	9d08      	ldr	r5, [sp, #32]
 80223f6:	930d      	str	r3, [sp, #52]	@ 0x34
 80223f8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80223fa:	2b00      	cmp	r3, #0
 80223fc:	f340 80d6 	ble.w	80225ac <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x24a>
 8022400:	9830      	ldr	r0, [sp, #192]	@ 0xc0
 8022402:	ea4f 4428 	mov.w	r4, r8, asr #16
 8022406:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 8022408:	f3ca 3203 	ubfx	r2, sl, #12, #4
 802240c:	68c6      	ldr	r6, [r0, #12]
 802240e:	ea5f 402a 	movs.w	r0, sl, asr #16
 8022412:	f3c8 3103 	ubfx	r1, r8, #12, #4
 8022416:	689b      	ldr	r3, [r3, #8]
 8022418:	f100 810f 	bmi.w	802263a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 802241c:	1e5f      	subs	r7, r3, #1
 802241e:	42b8      	cmp	r0, r7
 8022420:	f280 810b 	bge.w	802263a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 8022424:	2c00      	cmp	r4, #0
 8022426:	f2c0 8108 	blt.w	802263a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 802242a:	1e77      	subs	r7, r6, #1
 802242c:	42bc      	cmp	r4, r7
 802242e:	f280 8104 	bge.w	802263a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 8022432:	b21b      	sxth	r3, r3
 8022434:	fb04 0003 	mla	r0, r4, r3, r0
 8022438:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 802243a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 802243e:	1826      	adds	r6, r4, r0
 8022440:	5c24      	ldrb	r4, [r4, r0]
 8022442:	78b7      	ldrb	r7, [r6, #2]
 8022444:	7870      	ldrb	r0, [r6, #1]
 8022446:	970f      	str	r7, [sp, #60]	@ 0x3c
 8022448:	7977      	ldrb	r7, [r6, #5]
 802244a:	f896 e003 	ldrb.w	lr, [r6, #3]
 802244e:	f896 c004 	ldrb.w	ip, [r6, #4]
 8022452:	9710      	str	r7, [sp, #64]	@ 0x40
 8022454:	b1c9      	cbz	r1, 802248a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
 8022456:	f04f 0b03 	mov.w	fp, #3
 802245a:	f06f 0904 	mvn.w	r9, #4
 802245e:	3605      	adds	r6, #5
 8022460:	fb13 930b 	smlabb	r3, r3, fp, r9
 8022464:	eb06 0b03 	add.w	fp, r6, r3
 8022468:	5cf3      	ldrb	r3, [r6, r3]
 802246a:	9311      	str	r3, [sp, #68]	@ 0x44
 802246c:	f89b 3001 	ldrb.w	r3, [fp, #1]
 8022470:	9313      	str	r3, [sp, #76]	@ 0x4c
 8022472:	f89b 3002 	ldrb.w	r3, [fp, #2]
 8022476:	9315      	str	r3, [sp, #84]	@ 0x54
 8022478:	f89b 3003 	ldrb.w	r3, [fp, #3]
 802247c:	9312      	str	r3, [sp, #72]	@ 0x48
 802247e:	f89b 3004 	ldrb.w	r3, [fp, #4]
 8022482:	9314      	str	r3, [sp, #80]	@ 0x50
 8022484:	f89b 3005 	ldrb.w	r3, [fp, #5]
 8022488:	9316      	str	r3, [sp, #88]	@ 0x58
 802248a:	b292      	uxth	r2, r2
 802248c:	9f11      	ldr	r7, [sp, #68]	@ 0x44
 802248e:	b289      	uxth	r1, r1
 8022490:	f8bd 3030 	ldrh.w	r3, [sp, #48]	@ 0x30
 8022494:	fb02 f601 	mul.w	r6, r2, r1
 8022498:	0112      	lsls	r2, r2, #4
 802249a:	ebc6 1101 	rsb	r1, r6, r1, lsl #4
 802249e:	f5c2 7980 	rsb	r9, r2, #256	@ 0x100
 80224a2:	1b92      	subs	r2, r2, r6
 80224a4:	b289      	uxth	r1, r1
 80224a6:	b292      	uxth	r2, r2
 80224a8:	eba9 0901 	sub.w	r9, r9, r1
 80224ac:	fb02 fe0e 	mul.w	lr, r2, lr
 80224b0:	fa1f f989 	uxth.w	r9, r9
 80224b4:	fb02 fc0c 	mul.w	ip, r2, ip
 80224b8:	fb09 e404 	mla	r4, r9, r4, lr
 80224bc:	f895 e000 	ldrb.w	lr, [r5]
 80224c0:	fb09 c000 	mla	r0, r9, r0, ip
 80224c4:	fb01 4407 	mla	r4, r1, r7, r4
 80224c8:	9f12      	ldr	r7, [sp, #72]	@ 0x48
 80224ca:	fb06 4407 	mla	r4, r6, r7, r4
 80224ce:	9f09      	ldr	r7, [sp, #36]	@ 0x24
 80224d0:	fb1e fe07 	smulbb	lr, lr, r7
 80224d4:	f3c4 2407 	ubfx	r4, r4, #8, #8
 80224d8:	fb04 e403 	mla	r4, r4, r3, lr
 80224dc:	b2a4      	uxth	r4, r4
 80224de:	f104 0e01 	add.w	lr, r4, #1
 80224e2:	eb0e 2e14 	add.w	lr, lr, r4, lsr #8
 80224e6:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 80224e8:	fb01 0004 	mla	r0, r1, r4, r0
 80224ec:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 80224ee:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 80224f2:	fb06 0004 	mla	r0, r6, r4, r0
 80224f6:	786c      	ldrb	r4, [r5, #1]
 80224f8:	f885 e000 	strb.w	lr, [r5]
 80224fc:	fb14 f407 	smulbb	r4, r4, r7
 8022500:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8022504:	fb00 4003 	mla	r0, r0, r3, r4
 8022508:	b280      	uxth	r0, r0
 802250a:	1c44      	adds	r4, r0, #1
 802250c:	eb04 2010 	add.w	r0, r4, r0, lsr #8
 8022510:	1200      	asrs	r0, r0, #8
 8022512:	7068      	strb	r0, [r5, #1]
 8022514:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8022516:	4342      	muls	r2, r0
 8022518:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 802251a:	fb09 2200 	mla	r2, r9, r0, r2
 802251e:	9815      	ldr	r0, [sp, #84]	@ 0x54
 8022520:	fb01 2100 	mla	r1, r1, r0, r2
 8022524:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8022526:	fb06 1602 	mla	r6, r6, r2, r1
 802252a:	78a9      	ldrb	r1, [r5, #2]
 802252c:	fb11 f107 	smulbb	r1, r1, r7
 8022530:	f3c6 2607 	ubfx	r6, r6, #8, #8
 8022534:	fb06 1303 	mla	r3, r6, r3, r1
 8022538:	b29b      	uxth	r3, r3
 802253a:	1c5e      	adds	r6, r3, #1
 802253c:	eb06 2313 	add.w	r3, r6, r3, lsr #8
 8022540:	121b      	asrs	r3, r3, #8
 8022542:	70ab      	strb	r3, [r5, #2]
 8022544:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 8022546:	3503      	adds	r5, #3
 8022548:	449a      	add	sl, r3
 802254a:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 802254c:	4498      	add	r8, r3
 802254e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8022550:	3b01      	subs	r3, #1
 8022552:	930d      	str	r3, [sp, #52]	@ 0x34
 8022554:	e750      	b.n	80223f8 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8022556:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 8022558:	449a      	add	sl, r3
 802255a:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 802255c:	4498      	add	r8, r3
 802255e:	9b07      	ldr	r3, [sp, #28]
 8022560:	3b01      	subs	r3, #1
 8022562:	9307      	str	r3, [sp, #28]
 8022564:	9b08      	ldr	r3, [sp, #32]
 8022566:	3303      	adds	r3, #3
 8022568:	9308      	str	r3, [sp, #32]
 802256a:	e726      	b.n	80223ba <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 802256c:	d026      	beq.n	80225bc <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25a>
 802256e:	9b07      	ldr	r3, [sp, #28]
 8022570:	982b      	ldr	r0, [sp, #172]	@ 0xac
 8022572:	3b01      	subs	r3, #1
 8022574:	fb00 a003 	mla	r0, r0, r3, sl
 8022578:	1400      	asrs	r0, r0, #16
 802257a:	f53f af3a 	bmi.w	80223f2 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 802257e:	3901      	subs	r1, #1
 8022580:	4288      	cmp	r0, r1
 8022582:	f6bf af36 	bge.w	80223f2 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8022586:	992c      	ldr	r1, [sp, #176]	@ 0xb0
 8022588:	fb01 8303 	mla	r3, r1, r3, r8
 802258c:	141b      	asrs	r3, r3, #16
 802258e:	f53f af30 	bmi.w	80223f2 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8022592:	3a01      	subs	r2, #1
 8022594:	4293      	cmp	r3, r2
 8022596:	f6bf af2c 	bge.w	80223f2 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 802259a:	9b08      	ldr	r3, [sp, #32]
 802259c:	f8dd c01c 	ldr.w	ip, [sp, #28]
 80225a0:	1cdd      	adds	r5, r3, #3
 80225a2:	f8bd e030 	ldrh.w	lr, [sp, #48]	@ 0x30
 80225a6:	f1bc 0f00 	cmp.w	ip, #0
 80225aa:	dc5f      	bgt.n	802266c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30a>
 80225ac:	9b07      	ldr	r3, [sp, #28]
 80225ae:	9a08      	ldr	r2, [sp, #32]
 80225b0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80225b4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80225b8:	441a      	add	r2, r3
 80225ba:	9208      	str	r2, [sp, #32]
 80225bc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80225be:	2b00      	cmp	r3, #0
 80225c0:	f340 80e9 	ble.w	8022796 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x434>
 80225c4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80225c8:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 80225ca:	ee30 0a04 	vadd.f32	s0, s0, s8
 80225ce:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80225d2:	eef0 6a62 	vmov.f32	s13, s5
 80225d6:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80225da:	ee31 1a05 	vadd.f32	s2, s2, s10
 80225de:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80225e2:	ee16 aa90 	vmov	sl, s13
 80225e6:	eef0 6a43 	vmov.f32	s13, s6
 80225ea:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80225ee:	ee16 8a90 	vmov	r8, s13
 80225f2:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80225f6:	ee61 7a27 	vmul.f32	s15, s2, s15
 80225fa:	ee77 2a62 	vsub.f32	s5, s14, s5
 80225fe:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8022602:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8022606:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 802260a:	ee12 2a90 	vmov	r2, s5
 802260e:	eef0 2a47 	vmov.f32	s5, s14
 8022612:	fb92 f3f3 	sdiv	r3, r2, r3
 8022616:	ee13 2a10 	vmov	r2, s6
 802261a:	932b      	str	r3, [sp, #172]	@ 0xac
 802261c:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 802261e:	eeb0 3a67 	vmov.f32	s6, s15
 8022622:	fb92 f3f3 	sdiv	r3, r2, r3
 8022626:	932c      	str	r3, [sp, #176]	@ 0xb0
 8022628:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 802262a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 802262c:	3b01      	subs	r3, #1
 802262e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8022630:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8022632:	bf08      	it	eq
 8022634:	4613      	moveq	r3, r2
 8022636:	9307      	str	r3, [sp, #28]
 8022638:	e6b1      	b.n	802239e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 802263a:	1c47      	adds	r7, r0, #1
 802263c:	d482      	bmi.n	8022544 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 802263e:	42bb      	cmp	r3, r7
 8022640:	db80      	blt.n	8022544 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 8022642:	1c67      	adds	r7, r4, #1
 8022644:	f53f af7e 	bmi.w	8022544 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 8022648:	42be      	cmp	r6, r7
 802264a:	f6ff af7b 	blt.w	8022544 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 802264e:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
 8022650:	b236      	sxth	r6, r6
 8022652:	9001      	str	r0, [sp, #4]
 8022654:	b21b      	sxth	r3, r3
 8022656:	9600      	str	r6, [sp, #0]
 8022658:	981d      	ldr	r0, [sp, #116]	@ 0x74
 802265a:	e9cd 1704 	strd	r1, r7, [sp, #16]
 802265e:	e9cd 4202 	strd	r4, r2, [sp, #8]
 8022662:	4629      	mov	r1, r5
 8022664:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8022666:	f7ff fd82 	bl	802216e <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh>
 802266a:	e76b      	b.n	8022544 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 802266c:	9930      	ldr	r1, [sp, #192]	@ 0xc0
 802266e:	ea4f 402a 	mov.w	r0, sl, asr #16
 8022672:	f3c8 3203 	ubfx	r2, r8, #12, #4
 8022676:	f3ca 3303 	ubfx	r3, sl, #12, #4
 802267a:	f9b1 7008 	ldrsh.w	r7, [r1, #8]
 802267e:	ea4f 4128 	mov.w	r1, r8, asr #16
 8022682:	fb07 0101 	mla	r1, r7, r1, r0
 8022686:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8022688:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 802268c:	1844      	adds	r4, r0, r1
 802268e:	5c40      	ldrb	r0, [r0, r1]
 8022690:	78a6      	ldrb	r6, [r4, #2]
 8022692:	7861      	ldrb	r1, [r4, #1]
 8022694:	960f      	str	r6, [sp, #60]	@ 0x3c
 8022696:	78e6      	ldrb	r6, [r4, #3]
 8022698:	910d      	str	r1, [sp, #52]	@ 0x34
 802269a:	9610      	str	r6, [sp, #64]	@ 0x40
 802269c:	f894 9004 	ldrb.w	r9, [r4, #4]
 80226a0:	f894 b005 	ldrb.w	fp, [r4, #5]
 80226a4:	b192      	cbz	r2, 80226cc <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36a>
 80226a6:	f06f 0604 	mvn.w	r6, #4
 80226aa:	2103      	movs	r1, #3
 80226ac:	3405      	adds	r4, #5
 80226ae:	fb17 6701 	smlabb	r7, r7, r1, r6
 80226b2:	19e6      	adds	r6, r4, r7
 80226b4:	5de4      	ldrb	r4, [r4, r7]
 80226b6:	9417      	str	r4, [sp, #92]	@ 0x5c
 80226b8:	7874      	ldrb	r4, [r6, #1]
 80226ba:	9419      	str	r4, [sp, #100]	@ 0x64
 80226bc:	78b4      	ldrb	r4, [r6, #2]
 80226be:	941b      	str	r4, [sp, #108]	@ 0x6c
 80226c0:	78f4      	ldrb	r4, [r6, #3]
 80226c2:	9418      	str	r4, [sp, #96]	@ 0x60
 80226c4:	7934      	ldrb	r4, [r6, #4]
 80226c6:	941a      	str	r4, [sp, #104]	@ 0x68
 80226c8:	7974      	ldrb	r4, [r6, #5]
 80226ca:	941c      	str	r4, [sp, #112]	@ 0x70
 80226cc:	b29b      	uxth	r3, r3
 80226ce:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 80226d0:	b292      	uxth	r2, r2
 80226d2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80226d4:	3503      	adds	r5, #3
 80226d6:	f10c 3cff 	add.w	ip, ip, #4294967295
 80226da:	fb03 f402 	mul.w	r4, r3, r2
 80226de:	011b      	lsls	r3, r3, #4
 80226e0:	ebc4 1202 	rsb	r2, r4, r2, lsl #4
 80226e4:	f5c3 7680 	rsb	r6, r3, #256	@ 0x100
 80226e8:	1b1b      	subs	r3, r3, r4
 80226ea:	b292      	uxth	r2, r2
 80226ec:	b29b      	uxth	r3, r3
 80226ee:	1ab6      	subs	r6, r6, r2
 80226f0:	435f      	muls	r7, r3
 80226f2:	b2b6      	uxth	r6, r6
 80226f4:	fb03 f909 	mul.w	r9, r3, r9
 80226f8:	fb03 fb0b 	mul.w	fp, r3, fp
 80226fc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80226fe:	fb06 7000 	mla	r0, r6, r0, r7
 8022702:	9f17      	ldr	r7, [sp, #92]	@ 0x5c
 8022704:	fb06 bb03 	mla	fp, r6, r3, fp
 8022708:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 802270a:	fb02 0007 	mla	r0, r2, r7, r0
 802270e:	9f18      	ldr	r7, [sp, #96]	@ 0x60
 8022710:	fb02 bb03 	mla	fp, r2, r3, fp
 8022714:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8022716:	fb04 0007 	mla	r0, r4, r7, r0
 802271a:	f815 7c06 	ldrb.w	r7, [r5, #-6]
 802271e:	fb17 f701 	smulbb	r7, r7, r1
 8022722:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8022726:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8022728:	fb00 700e 	mla	r0, r0, lr, r7
 802272c:	fb06 9101 	mla	r1, r6, r1, r9
 8022730:	b280      	uxth	r0, r0
 8022732:	1c47      	adds	r7, r0, #1
 8022734:	eb07 2010 	add.w	r0, r7, r0, lsr #8
 8022738:	9f09      	ldr	r7, [sp, #36]	@ 0x24
 802273a:	1200      	asrs	r0, r0, #8
 802273c:	f805 0c06 	strb.w	r0, [r5, #-6]
 8022740:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8022742:	fb02 1100 	mla	r1, r2, r0, r1
 8022746:	981a      	ldr	r0, [sp, #104]	@ 0x68
 8022748:	fb04 1100 	mla	r1, r4, r0, r1
 802274c:	f815 0c05 	ldrb.w	r0, [r5, #-5]
 8022750:	fb04 b403 	mla	r4, r4, r3, fp
 8022754:	f815 3c04 	ldrb.w	r3, [r5, #-4]
 8022758:	fb10 f007 	smulbb	r0, r0, r7
 802275c:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8022760:	fb13 f307 	smulbb	r3, r3, r7
 8022764:	f3c4 2407 	ubfx	r4, r4, #8, #8
 8022768:	fb01 010e 	mla	r1, r1, lr, r0
 802276c:	fb04 340e 	mla	r4, r4, lr, r3
 8022770:	b289      	uxth	r1, r1
 8022772:	b2a4      	uxth	r4, r4
 8022774:	1c48      	adds	r0, r1, #1
 8022776:	1c63      	adds	r3, r4, #1
 8022778:	eb00 2111 	add.w	r1, r0, r1, lsr #8
 802277c:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 8022780:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 8022782:	1209      	asrs	r1, r1, #8
 8022784:	1224      	asrs	r4, r4, #8
 8022786:	449a      	add	sl, r3
 8022788:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 802278a:	f805 1c05 	strb.w	r1, [r5, #-5]
 802278e:	f805 4c04 	strb.w	r4, [r5, #-4]
 8022792:	4498      	add	r8, r3
 8022794:	e707      	b.n	80225a6 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x244>
 8022796:	b01f      	add	sp, #124	@ 0x7c
 8022798:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0802279c <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh>:
 802279c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80227a0:	b087      	sub	sp, #28
 80227a2:	780d      	ldrb	r5, [r1, #0]
 80227a4:	784c      	ldrb	r4, [r1, #1]
 80227a6:	f89d 004c 	ldrb.w	r0, [sp, #76]	@ 0x4c
 80227aa:	f9bd 7040 	ldrsh.w	r7, [sp, #64]	@ 0x40
 80227ae:	9004      	str	r0, [sp, #16]
 80227b0:	f89d 0050 	ldrb.w	r0, [sp, #80]	@ 0x50
 80227b4:	e9dd b611 	ldrd	fp, r6, [sp, #68]	@ 0x44
 80227b8:	9005      	str	r0, [sp, #20]
 80227ba:	fb06 bc03 	mla	ip, r6, r3, fp
 80227be:	2e00      	cmp	r6, #0
 80227c0:	7888      	ldrb	r0, [r1, #2]
 80227c2:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 80227c6:	eb02 090c 	add.w	r9, r2, ip
 80227ca:	f2c0 8084 	blt.w	80228d6 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x13a>
 80227ce:	42b7      	cmp	r7, r6
 80227d0:	f340 8081 	ble.w	80228d6 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x13a>
 80227d4:	f1bb 0f00 	cmp.w	fp, #0
 80227d8:	db79      	blt.n	80228ce <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x132>
 80227da:	455b      	cmp	r3, fp
 80227dc:	dd77      	ble.n	80228ce <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x132>
 80227de:	f812 200c 	ldrb.w	r2, [r2, ip]
 80227e2:	9201      	str	r2, [sp, #4]
 80227e4:	f899 2001 	ldrb.w	r2, [r9, #1]
 80227e8:	9202      	str	r2, [sp, #8]
 80227ea:	f899 2002 	ldrb.w	r2, [r9, #2]
 80227ee:	9203      	str	r2, [sp, #12]
 80227f0:	f11b 0201 	adds.w	r2, fp, #1
 80227f4:	d476      	bmi.n	80228e4 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x148>
 80227f6:	4293      	cmp	r3, r2
 80227f8:	dd74      	ble.n	80228e4 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x148>
 80227fa:	9a04      	ldr	r2, [sp, #16]
 80227fc:	2a00      	cmp	r2, #0
 80227fe:	d071      	beq.n	80228e4 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x148>
 8022800:	f899 8003 	ldrb.w	r8, [r9, #3]
 8022804:	f899 c004 	ldrb.w	ip, [r9, #4]
 8022808:	f899 a005 	ldrb.w	sl, [r9, #5]
 802280c:	3601      	adds	r6, #1
 802280e:	d471      	bmi.n	80228f4 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x158>
 8022810:	42b7      	cmp	r7, r6
 8022812:	dd6f      	ble.n	80228f4 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x158>
 8022814:	9a05      	ldr	r2, [sp, #20]
 8022816:	2a00      	cmp	r2, #0
 8022818:	d06c      	beq.n	80228f4 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x158>
 802281a:	f1bb 0f00 	cmp.w	fp, #0
 802281e:	db65      	blt.n	80228ec <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x150>
 8022820:	455b      	cmp	r3, fp
 8022822:	dd63      	ble.n	80228ec <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x150>
 8022824:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8022828:	f819 e002 	ldrb.w	lr, [r9, r2]
 802282c:	2203      	movs	r2, #3
 802282e:	fb03 9602 	mla	r6, r3, r2, r9
 8022832:	7877      	ldrb	r7, [r6, #1]
 8022834:	78b6      	ldrb	r6, [r6, #2]
 8022836:	f11b 0b01 	adds.w	fp, fp, #1
 802283a:	d40c      	bmi.n	8022856 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xba>
 802283c:	455b      	cmp	r3, fp
 802283e:	dd0a      	ble.n	8022856 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xba>
 8022840:	9a04      	ldr	r2, [sp, #16]
 8022842:	b142      	cbz	r2, 8022856 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xba>
 8022844:	2203      	movs	r2, #3
 8022846:	fb13 2002 	smlabb	r0, r3, r2, r2
 802284a:	f819 5000 	ldrb.w	r5, [r9, r0]
 802284e:	fb03 9002 	mla	r0, r3, r2, r9
 8022852:	7904      	ldrb	r4, [r0, #4]
 8022854:	7940      	ldrb	r0, [r0, #5]
 8022856:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 802285a:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 802285e:	fb03 fb02 	mul.w	fp, r3, r2
 8022862:	011b      	lsls	r3, r3, #4
 8022864:	ebcb 1202 	rsb	r2, fp, r2, lsl #4
 8022868:	f5c3 7980 	rsb	r9, r3, #256	@ 0x100
 802286c:	eba3 030b 	sub.w	r3, r3, fp
 8022870:	b292      	uxth	r2, r2
 8022872:	b29b      	uxth	r3, r3
 8022874:	eba9 0902 	sub.w	r9, r9, r2
 8022878:	9304      	str	r3, [sp, #16]
 802287a:	fa1f f989 	uxth.w	r9, r9
 802287e:	fb03 f808 	mul.w	r8, r3, r8
 8022882:	9b01      	ldr	r3, [sp, #4]
 8022884:	fb09 8803 	mla	r8, r9, r3, r8
 8022888:	9b04      	ldr	r3, [sp, #16]
 802288a:	fb03 fc0c 	mul.w	ip, r3, ip
 802288e:	9b02      	ldr	r3, [sp, #8]
 8022890:	fb02 880e 	mla	r8, r2, lr, r8
 8022894:	fb09 cc03 	mla	ip, r9, r3, ip
 8022898:	9b04      	ldr	r3, [sp, #16]
 802289a:	fb0b 8805 	mla	r8, fp, r5, r8
 802289e:	fb02 c707 	mla	r7, r2, r7, ip
 80228a2:	fb03 f30a 	mul.w	r3, r3, sl
 80228a6:	ea4f 2828 	mov.w	r8, r8, asr #8
 80228aa:	fb0b 7404 	mla	r4, fp, r4, r7
 80228ae:	f881 8000 	strb.w	r8, [r1]
 80228b2:	1224      	asrs	r4, r4, #8
 80228b4:	704c      	strb	r4, [r1, #1]
 80228b6:	9c03      	ldr	r4, [sp, #12]
 80228b8:	fb09 3904 	mla	r9, r9, r4, r3
 80228bc:	fb02 9206 	mla	r2, r2, r6, r9
 80228c0:	fb0b 2000 	mla	r0, fp, r0, r2
 80228c4:	1200      	asrs	r0, r0, #8
 80228c6:	7088      	strb	r0, [r1, #2]
 80228c8:	b007      	add	sp, #28
 80228ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80228ce:	e9cd 4002 	strd	r4, r0, [sp, #8]
 80228d2:	9501      	str	r5, [sp, #4]
 80228d4:	e78c      	b.n	80227f0 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x54>
 80228d6:	4682      	mov	sl, r0
 80228d8:	46a4      	mov	ip, r4
 80228da:	46a8      	mov	r8, r5
 80228dc:	9501      	str	r5, [sp, #4]
 80228de:	e9cd 4002 	strd	r4, r0, [sp, #8]
 80228e2:	e793      	b.n	802280c <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x70>
 80228e4:	4682      	mov	sl, r0
 80228e6:	46a4      	mov	ip, r4
 80228e8:	46a8      	mov	r8, r5
 80228ea:	e78f      	b.n	802280c <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x70>
 80228ec:	4606      	mov	r6, r0
 80228ee:	4627      	mov	r7, r4
 80228f0:	46ae      	mov	lr, r5
 80228f2:	e7a0      	b.n	8022836 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x9a>
 80228f4:	4606      	mov	r6, r0
 80228f6:	4627      	mov	r7, r4
 80228f8:	46ae      	mov	lr, r5
 80228fa:	e7ac      	b.n	8022856 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xba>

080228fc <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80228fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022900:	b09b      	sub	sp, #108	@ 0x6c
 8022902:	920b      	str	r2, [sp, #44]	@ 0x2c
 8022904:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 8022906:	9019      	str	r0, [sp, #100]	@ 0x64
 8022908:	9109      	str	r1, [sp, #36]	@ 0x24
 802290a:	6850      	ldr	r0, [r2, #4]
 802290c:	9306      	str	r3, [sp, #24]
 802290e:	6812      	ldr	r2, [r2, #0]
 8022910:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	@ 0xa8
 8022914:	e9dd b425 	ldrd	fp, r4, [sp, #148]	@ 0x94
 8022918:	fb00 1303 	mla	r3, r0, r3, r1
 802291c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8022920:	18d3      	adds	r3, r2, r3
 8022922:	9307      	str	r3, [sp, #28]
 8022924:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 8022926:	681b      	ldr	r3, [r3, #0]
 8022928:	9308      	str	r3, [sp, #32]
 802292a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802292c:	2b00      	cmp	r3, #0
 802292e:	dc03      	bgt.n	8022938 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 8022930:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8022932:	2b00      	cmp	r3, #0
 8022934:	f340 81ab 	ble.w	8022c8e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x392>
 8022938:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 802293a:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 802293e:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8022942:	1e48      	subs	r0, r1, #1
 8022944:	1e55      	subs	r5, r2, #1
 8022946:	9b06      	ldr	r3, [sp, #24]
 8022948:	2b00      	cmp	r3, #0
 802294a:	f340 80b1 	ble.w	8022ab0 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 802294e:	ea5f 462b 	movs.w	r6, fp, asr #16
 8022952:	ea4f 4324 	mov.w	r3, r4, asr #16
 8022956:	d406      	bmi.n	8022966 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 8022958:	4286      	cmp	r6, r0
 802295a:	da04      	bge.n	8022966 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 802295c:	2b00      	cmp	r3, #0
 802295e:	db02      	blt.n	8022966 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 8022960:	42ab      	cmp	r3, r5
 8022962:	f2c0 80a6 	blt.w	8022ab2 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b6>
 8022966:	3601      	adds	r6, #1
 8022968:	f100 8097 	bmi.w	8022a9a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19e>
 802296c:	42b1      	cmp	r1, r6
 802296e:	f2c0 8094 	blt.w	8022a9a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19e>
 8022972:	3301      	adds	r3, #1
 8022974:	f100 8091 	bmi.w	8022a9a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19e>
 8022978:	429a      	cmp	r2, r3
 802297a:	f2c0 808e 	blt.w	8022a9a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19e>
 802297e:	9b06      	ldr	r3, [sp, #24]
 8022980:	9e07      	ldr	r6, [sp, #28]
 8022982:	930a      	str	r3, [sp, #40]	@ 0x28
 8022984:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8022986:	2b00      	cmp	r3, #0
 8022988:	f340 80b0 	ble.w	8022aec <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 802298c:	982c      	ldr	r0, [sp, #176]	@ 0xb0
 802298e:	1425      	asrs	r5, r4, #16
 8022990:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 8022992:	f3cb 3203 	ubfx	r2, fp, #12, #4
 8022996:	68c7      	ldr	r7, [r0, #12]
 8022998:	ea5f 402b 	movs.w	r0, fp, asr #16
 802299c:	f3c4 3103 	ubfx	r1, r4, #12, #4
 80229a0:	689b      	ldr	r3, [r3, #8]
 80229a2:	f100 80ea 	bmi.w	8022b7a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 80229a6:	f103 3cff 	add.w	ip, r3, #4294967295
 80229aa:	4560      	cmp	r0, ip
 80229ac:	f280 80e5 	bge.w	8022b7a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 80229b0:	2d00      	cmp	r5, #0
 80229b2:	f2c0 80e2 	blt.w	8022b7a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 80229b6:	f107 3cff 	add.w	ip, r7, #4294967295
 80229ba:	4565      	cmp	r5, ip
 80229bc:	f280 80dd 	bge.w	8022b7a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 80229c0:	b21b      	sxth	r3, r3
 80229c2:	fb05 0003 	mla	r0, r5, r3, r0
 80229c6:	9d08      	ldr	r5, [sp, #32]
 80229c8:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80229cc:	182f      	adds	r7, r5, r0
 80229ce:	5c2d      	ldrb	r5, [r5, r0]
 80229d0:	7878      	ldrb	r0, [r7, #1]
 80229d2:	f897 e002 	ldrb.w	lr, [r7, #2]
 80229d6:	900c      	str	r0, [sp, #48]	@ 0x30
 80229d8:	f897 9003 	ldrb.w	r9, [r7, #3]
 80229dc:	f897 8004 	ldrb.w	r8, [r7, #4]
 80229e0:	f897 a005 	ldrb.w	sl, [r7, #5]
 80229e4:	b1c9      	cbz	r1, 8022a1a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11e>
 80229e6:	f04f 0c03 	mov.w	ip, #3
 80229ea:	f06f 0004 	mvn.w	r0, #4
 80229ee:	3705      	adds	r7, #5
 80229f0:	fb13 030c 	smlabb	r3, r3, ip, r0
 80229f4:	eb07 0c03 	add.w	ip, r7, r3
 80229f8:	5cfb      	ldrb	r3, [r7, r3]
 80229fa:	930d      	str	r3, [sp, #52]	@ 0x34
 80229fc:	f89c 3001 	ldrb.w	r3, [ip, #1]
 8022a00:	930f      	str	r3, [sp, #60]	@ 0x3c
 8022a02:	f89c 3002 	ldrb.w	r3, [ip, #2]
 8022a06:	9311      	str	r3, [sp, #68]	@ 0x44
 8022a08:	f89c 3003 	ldrb.w	r3, [ip, #3]
 8022a0c:	930e      	str	r3, [sp, #56]	@ 0x38
 8022a0e:	f89c 3004 	ldrb.w	r3, [ip, #4]
 8022a12:	9310      	str	r3, [sp, #64]	@ 0x40
 8022a14:	f89c 3005 	ldrb.w	r3, [ip, #5]
 8022a18:	9312      	str	r3, [sp, #72]	@ 0x48
 8022a1a:	b292      	uxth	r2, r2
 8022a1c:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8022a1e:	b289      	uxth	r1, r1
 8022a20:	fb02 f301 	mul.w	r3, r2, r1
 8022a24:	0112      	lsls	r2, r2, #4
 8022a26:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 8022a2a:	f5c2 7780 	rsb	r7, r2, #256	@ 0x100
 8022a2e:	1ad2      	subs	r2, r2, r3
 8022a30:	b289      	uxth	r1, r1
 8022a32:	b292      	uxth	r2, r2
 8022a34:	1a7f      	subs	r7, r7, r1
 8022a36:	fb02 f909 	mul.w	r9, r2, r9
 8022a3a:	b2bf      	uxth	r7, r7
 8022a3c:	fb02 f808 	mul.w	r8, r2, r8
 8022a40:	fb02 fa0a 	mul.w	sl, r2, sl
 8022a44:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8022a46:	fb07 9905 	mla	r9, r7, r5, r9
 8022a4a:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 8022a4c:	fb07 8800 	mla	r8, r7, r0, r8
 8022a50:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 8022a52:	fb07 aa0e 	mla	sl, r7, lr, sl
 8022a56:	fb01 9905 	mla	r9, r1, r5, r9
 8022a5a:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
 8022a5c:	fb01 8800 	mla	r8, r1, r0, r8
 8022a60:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8022a62:	fb01 a102 	mla	r1, r1, r2, sl
 8022a66:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8022a68:	fb03 9905 	mla	r9, r3, r5, r9
 8022a6c:	fb03 8800 	mla	r8, r3, r0, r8
 8022a70:	fb03 1302 	mla	r3, r3, r2, r1
 8022a74:	ea4f 2929 	mov.w	r9, r9, asr #8
 8022a78:	ea4f 2828 	mov.w	r8, r8, asr #8
 8022a7c:	121b      	asrs	r3, r3, #8
 8022a7e:	f886 9000 	strb.w	r9, [r6]
 8022a82:	f886 8001 	strb.w	r8, [r6, #1]
 8022a86:	70b3      	strb	r3, [r6, #2]
 8022a88:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8022a8a:	3603      	adds	r6, #3
 8022a8c:	449b      	add	fp, r3
 8022a8e:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8022a90:	441c      	add	r4, r3
 8022a92:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8022a94:	3b01      	subs	r3, #1
 8022a96:	930a      	str	r3, [sp, #40]	@ 0x28
 8022a98:	e774      	b.n	8022984 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x88>
 8022a9a:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8022a9c:	449b      	add	fp, r3
 8022a9e:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8022aa0:	441c      	add	r4, r3
 8022aa2:	9b06      	ldr	r3, [sp, #24]
 8022aa4:	3b01      	subs	r3, #1
 8022aa6:	9306      	str	r3, [sp, #24]
 8022aa8:	9b07      	ldr	r3, [sp, #28]
 8022aaa:	3303      	adds	r3, #3
 8022aac:	9307      	str	r3, [sp, #28]
 8022aae:	e74a      	b.n	8022946 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 8022ab0:	d024      	beq.n	8022afc <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 8022ab2:	9b06      	ldr	r3, [sp, #24]
 8022ab4:	9827      	ldr	r0, [sp, #156]	@ 0x9c
 8022ab6:	3b01      	subs	r3, #1
 8022ab8:	fb00 b003 	mla	r0, r0, r3, fp
 8022abc:	1400      	asrs	r0, r0, #16
 8022abe:	f53f af5e 	bmi.w	802297e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 8022ac2:	3901      	subs	r1, #1
 8022ac4:	4288      	cmp	r0, r1
 8022ac6:	f6bf af5a 	bge.w	802297e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 8022aca:	9928      	ldr	r1, [sp, #160]	@ 0xa0
 8022acc:	fb01 4303 	mla	r3, r1, r3, r4
 8022ad0:	141b      	asrs	r3, r3, #16
 8022ad2:	f53f af54 	bmi.w	802297e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 8022ad6:	3a01      	subs	r2, #1
 8022ad8:	4293      	cmp	r3, r2
 8022ada:	f6bf af50 	bge.w	802297e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 8022ade:	9b07      	ldr	r3, [sp, #28]
 8022ae0:	f8dd e018 	ldr.w	lr, [sp, #24]
 8022ae4:	1cde      	adds	r6, r3, #3
 8022ae6:	f1be 0f00 	cmp.w	lr, #0
 8022aea:	dc5f      	bgt.n	8022bac <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 8022aec:	9b06      	ldr	r3, [sp, #24]
 8022aee:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8022af2:	9b07      	ldr	r3, [sp, #28]
 8022af4:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8022af8:	4423      	add	r3, r4
 8022afa:	9307      	str	r3, [sp, #28]
 8022afc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8022afe:	2b00      	cmp	r3, #0
 8022b00:	f340 80c5 	ble.w	8022c8e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x392>
 8022b04:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8022b08:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8022b0a:	ee30 0a04 	vadd.f32	s0, s0, s8
 8022b0e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8022b12:	eef0 6a62 	vmov.f32	s13, s5
 8022b16:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8022b1a:	ee31 1a05 	vadd.f32	s2, s2, s10
 8022b1e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8022b22:	ee16 ba90 	vmov	fp, s13
 8022b26:	eef0 6a43 	vmov.f32	s13, s6
 8022b2a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8022b2e:	ee16 4a90 	vmov	r4, s13
 8022b32:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8022b36:	ee61 7a27 	vmul.f32	s15, s2, s15
 8022b3a:	ee77 2a62 	vsub.f32	s5, s14, s5
 8022b3e:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8022b42:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8022b46:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8022b4a:	ee12 2a90 	vmov	r2, s5
 8022b4e:	eef0 2a47 	vmov.f32	s5, s14
 8022b52:	fb92 f3f3 	sdiv	r3, r2, r3
 8022b56:	ee13 2a10 	vmov	r2, s6
 8022b5a:	9327      	str	r3, [sp, #156]	@ 0x9c
 8022b5c:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8022b5e:	eeb0 3a67 	vmov.f32	s6, s15
 8022b62:	fb92 f3f3 	sdiv	r3, r2, r3
 8022b66:	9328      	str	r3, [sp, #160]	@ 0xa0
 8022b68:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8022b6a:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8022b6c:	3b01      	subs	r3, #1
 8022b6e:	9309      	str	r3, [sp, #36]	@ 0x24
 8022b70:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8022b72:	bf08      	it	eq
 8022b74:	4613      	moveq	r3, r2
 8022b76:	9306      	str	r3, [sp, #24]
 8022b78:	e6d7      	b.n	802292a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 8022b7a:	f110 0c01 	adds.w	ip, r0, #1
 8022b7e:	d483      	bmi.n	8022a88 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18c>
 8022b80:	4563      	cmp	r3, ip
 8022b82:	db81      	blt.n	8022a88 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18c>
 8022b84:	f115 0c01 	adds.w	ip, r5, #1
 8022b88:	f53f af7e 	bmi.w	8022a88 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18c>
 8022b8c:	4567      	cmp	r7, ip
 8022b8e:	f6ff af7b 	blt.w	8022a88 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18c>
 8022b92:	b23f      	sxth	r7, r7
 8022b94:	b21b      	sxth	r3, r3
 8022b96:	9700      	str	r7, [sp, #0]
 8022b98:	e9cd 2103 	strd	r2, r1, [sp, #12]
 8022b9c:	e9cd 0501 	strd	r0, r5, [sp, #4]
 8022ba0:	9a08      	ldr	r2, [sp, #32]
 8022ba2:	4631      	mov	r1, r6
 8022ba4:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8022ba6:	f7ff fdf9 	bl	802279c <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh>
 8022baa:	e76d      	b.n	8022a88 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18c>
 8022bac:	992c      	ldr	r1, [sp, #176]	@ 0xb0
 8022bae:	ea4f 402b 	mov.w	r0, fp, asr #16
 8022bb2:	f3cb 3303 	ubfx	r3, fp, #12, #4
 8022bb6:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8022bba:	f9b1 c008 	ldrsh.w	ip, [r1, #8]
 8022bbe:	1421      	asrs	r1, r4, #16
 8022bc0:	930a      	str	r3, [sp, #40]	@ 0x28
 8022bc2:	fb0c 0101 	mla	r1, ip, r1, r0
 8022bc6:	9808      	ldr	r0, [sp, #32]
 8022bc8:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8022bcc:	1845      	adds	r5, r0, r1
 8022bce:	5c40      	ldrb	r0, [r0, r1]
 8022bd0:	796f      	ldrb	r7, [r5, #5]
 8022bd2:	7869      	ldrb	r1, [r5, #1]
 8022bd4:	f895 8002 	ldrb.w	r8, [r5, #2]
 8022bd8:	f895 a003 	ldrb.w	sl, [r5, #3]
 8022bdc:	f895 9004 	ldrb.w	r9, [r5, #4]
 8022be0:	970c      	str	r7, [sp, #48]	@ 0x30
 8022be2:	b1a2      	cbz	r2, 8022c0e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x312>
 8022be4:	2703      	movs	r7, #3
 8022be6:	f06f 0304 	mvn.w	r3, #4
 8022bea:	3505      	adds	r5, #5
 8022bec:	fb1c 3c07 	smlabb	ip, ip, r7, r3
 8022bf0:	eb05 070c 	add.w	r7, r5, ip
 8022bf4:	f815 500c 	ldrb.w	r5, [r5, ip]
 8022bf8:	9513      	str	r5, [sp, #76]	@ 0x4c
 8022bfa:	787d      	ldrb	r5, [r7, #1]
 8022bfc:	9515      	str	r5, [sp, #84]	@ 0x54
 8022bfe:	78bd      	ldrb	r5, [r7, #2]
 8022c00:	9517      	str	r5, [sp, #92]	@ 0x5c
 8022c02:	78fd      	ldrb	r5, [r7, #3]
 8022c04:	9514      	str	r5, [sp, #80]	@ 0x50
 8022c06:	793d      	ldrb	r5, [r7, #4]
 8022c08:	9516      	str	r5, [sp, #88]	@ 0x58
 8022c0a:	797d      	ldrb	r5, [r7, #5]
 8022c0c:	9518      	str	r5, [sp, #96]	@ 0x60
 8022c0e:	f8bd 3028 	ldrh.w	r3, [sp, #40]	@ 0x28
 8022c12:	b292      	uxth	r2, r2
 8022c14:	3603      	adds	r6, #3
 8022c16:	f10e 3eff 	add.w	lr, lr, #4294967295
 8022c1a:	fb03 f502 	mul.w	r5, r3, r2
 8022c1e:	011b      	lsls	r3, r3, #4
 8022c20:	ebc5 1202 	rsb	r2, r5, r2, lsl #4
 8022c24:	f5c3 7780 	rsb	r7, r3, #256	@ 0x100
 8022c28:	1b5b      	subs	r3, r3, r5
 8022c2a:	b292      	uxth	r2, r2
 8022c2c:	b29b      	uxth	r3, r3
 8022c2e:	1abf      	subs	r7, r7, r2
 8022c30:	fb03 f909 	mul.w	r9, r3, r9
 8022c34:	b2bf      	uxth	r7, r7
 8022c36:	fb03 fa0a 	mul.w	sl, r3, sl
 8022c3a:	fb07 9901 	mla	r9, r7, r1, r9
 8022c3e:	9915      	ldr	r1, [sp, #84]	@ 0x54
 8022c40:	fb07 aa00 	mla	sl, r7, r0, sl
 8022c44:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 8022c46:	fb02 9901 	mla	r9, r2, r1, r9
 8022c4a:	9916      	ldr	r1, [sp, #88]	@ 0x58
 8022c4c:	fb02 aa00 	mla	sl, r2, r0, sl
 8022c50:	9814      	ldr	r0, [sp, #80]	@ 0x50
 8022c52:	fb05 9901 	mla	r9, r5, r1, r9
 8022c56:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8022c58:	fb05 aa00 	mla	sl, r5, r0, sl
 8022c5c:	434b      	muls	r3, r1
 8022c5e:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 8022c60:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8022c64:	fb07 3308 	mla	r3, r7, r8, r3
 8022c68:	ea4f 2929 	mov.w	r9, r9, asr #8
 8022c6c:	f806 ac06 	strb.w	sl, [r6, #-6]
 8022c70:	fb02 3201 	mla	r2, r2, r1, r3
 8022c74:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8022c76:	f806 9c05 	strb.w	r9, [r6, #-5]
 8022c7a:	fb05 2503 	mla	r5, r5, r3, r2
 8022c7e:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8022c80:	122d      	asrs	r5, r5, #8
 8022c82:	449b      	add	fp, r3
 8022c84:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8022c86:	f806 5c04 	strb.w	r5, [r6, #-4]
 8022c8a:	441c      	add	r4, r3
 8022c8c:	e72b      	b.n	8022ae6 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 8022c8e:	b01b      	add	sp, #108	@ 0x6c
 8022c90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08022c94 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh>:
 8022c94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022c98:	b087      	sub	sp, #28
 8022c9a:	e9dd 7511 	ldrd	r7, r5, [sp, #68]	@ 0x44
 8022c9e:	f9bd 8040 	ldrsh.w	r8, [sp, #64]	@ 0x40
 8022ca2:	fb05 7003 	mla	r0, r5, r3, r7
 8022ca6:	2d00      	cmp	r5, #0
 8022ca8:	f89d 404c 	ldrb.w	r4, [sp, #76]	@ 0x4c
 8022cac:	f89d e050 	ldrb.w	lr, [sp, #80]	@ 0x50
 8022cb0:	eb02 0c80 	add.w	ip, r2, r0, lsl #2
 8022cb4:	f2c0 811f 	blt.w	8022ef6 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x262>
 8022cb8:	45a8      	cmp	r8, r5
 8022cba:	f340 811c 	ble.w	8022ef6 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x262>
 8022cbe:	2f00      	cmp	r7, #0
 8022cc0:	f2c0 8117 	blt.w	8022ef2 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x25e>
 8022cc4:	42bb      	cmp	r3, r7
 8022cc6:	f340 8114 	ble.w	8022ef2 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x25e>
 8022cca:	f852 6020 	ldr.w	r6, [r2, r0, lsl #2]
 8022cce:	1c7a      	adds	r2, r7, #1
 8022cd0:	f100 8114 	bmi.w	8022efc <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x268>
 8022cd4:	4293      	cmp	r3, r2
 8022cd6:	f340 8111 	ble.w	8022efc <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x268>
 8022cda:	2c00      	cmp	r4, #0
 8022cdc:	f000 8110 	beq.w	8022f00 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x26c>
 8022ce0:	f8dc 0004 	ldr.w	r0, [ip, #4]
 8022ce4:	3501      	adds	r5, #1
 8022ce6:	f100 810f 	bmi.w	8022f08 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x274>
 8022cea:	45a8      	cmp	r8, r5
 8022cec:	f340 810c 	ble.w	8022f08 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x274>
 8022cf0:	f1be 0f00 	cmp.w	lr, #0
 8022cf4:	f000 810b 	beq.w	8022f0e <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x27a>
 8022cf8:	2f00      	cmp	r7, #0
 8022cfa:	f2c0 8103 	blt.w	8022f04 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x270>
 8022cfe:	42bb      	cmp	r3, r7
 8022d00:	f340 8100 	ble.w	8022f04 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x270>
 8022d04:	f85c 5023 	ldr.w	r5, [ip, r3, lsl #2]
 8022d08:	3701      	adds	r7, #1
 8022d0a:	f100 8103 	bmi.w	8022f14 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x280>
 8022d0e:	42bb      	cmp	r3, r7
 8022d10:	f340 8100 	ble.w	8022f14 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x280>
 8022d14:	2c00      	cmp	r4, #0
 8022d16:	f000 80ff 	beq.w	8022f18 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x284>
 8022d1a:	3301      	adds	r3, #1
 8022d1c:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 8022d20:	fa1f fc84 	uxth.w	ip, r4
 8022d24:	fa1f fe8e 	uxth.w	lr, lr
 8022d28:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 8022d2c:	fb0c f90e 	mul.w	r9, ip, lr
 8022d30:	0e13      	lsrs	r3, r2, #24
 8022d32:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 8022d36:	ebc9 1e0e 	rsb	lr, r9, lr, lsl #4
 8022d3a:	9302      	str	r3, [sp, #8]
 8022d3c:	ebac 0709 	sub.w	r7, ip, r9
 8022d40:	f5cc 7380 	rsb	r3, ip, #256	@ 0x100
 8022d44:	fa1f f48e 	uxth.w	r4, lr
 8022d48:	f006 1eff 	and.w	lr, r6, #16711935	@ 0xff00ff
 8022d4c:	f406 467f 	and.w	r6, r6, #65280	@ 0xff00
 8022d50:	ea4f 6b10 	mov.w	fp, r0, lsr #24
 8022d54:	fb0a fe0e 	mul.w	lr, sl, lr
 8022d58:	1b1b      	subs	r3, r3, r4
 8022d5a:	fb0a f606 	mul.w	r6, sl, r6
 8022d5e:	ea4f 6815 	mov.w	r8, r5, lsr #24
 8022d62:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 8022d66:	f10e 1e01 	add.w	lr, lr, #65537	@ 0x10001
 8022d6a:	b29b      	uxth	r3, r3
 8022d6c:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8022d70:	b2bf      	uxth	r7, r7
 8022d72:	9301      	str	r3, [sp, #4]
 8022d74:	44e6      	add	lr, ip
 8022d76:	f506 7c80 	add.w	ip, r6, #256	@ 0x100
 8022d7a:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8022d7e:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 8022d82:	f00e 13ff 	and.w	r3, lr, #16711935	@ 0xff00ff
 8022d86:	9303      	str	r3, [sp, #12]
 8022d88:	0a33      	lsrs	r3, r6, #8
 8022d8a:	f000 16ff 	and.w	r6, r0, #16711935	@ 0xff00ff
 8022d8e:	f400 407f 	and.w	r0, r0, #65280	@ 0xff00
 8022d92:	9304      	str	r3, [sp, #16]
 8022d94:	fb0b f606 	mul.w	r6, fp, r6
 8022d98:	fb0b f000 	mul.w	r0, fp, r0
 8022d9c:	ea4f 2e16 	mov.w	lr, r6, lsr #8
 8022da0:	f106 1601 	add.w	r6, r6, #65537	@ 0x10001
 8022da4:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8022da8:	44b6      	add	lr, r6
 8022daa:	f500 7680 	add.w	r6, r0, #256	@ 0x100
 8022dae:	eb06 2010 	add.w	r0, r6, r0, lsr #8
 8022db2:	f005 16ff 	and.w	r6, r5, #16711935	@ 0xff00ff
 8022db6:	f405 457f 	and.w	r5, r5, #65280	@ 0xff00
 8022dba:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8022dbe:	fb08 f606 	mul.w	r6, r8, r6
 8022dc2:	0a03      	lsrs	r3, r0, #8
 8022dc4:	fb08 f505 	mul.w	r5, r8, r5
 8022dc8:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8022dcc:	0a30      	lsrs	r0, r6, #8
 8022dce:	f106 1601 	add.w	r6, r6, #65537	@ 0x10001
 8022dd2:	9305      	str	r3, [sp, #20]
 8022dd4:	0e13      	lsrs	r3, r2, #24
 8022dd6:	f000 10ff 	and.w	r0, r0, #16711935	@ 0xff00ff
 8022dda:	fb0e fe07 	mul.w	lr, lr, r7
 8022dde:	4430      	add	r0, r6
 8022de0:	f505 7680 	add.w	r6, r5, #256	@ 0x100
 8022de4:	eb06 2515 	add.w	r5, r6, r5, lsr #8
 8022de8:	f002 16ff 	and.w	r6, r2, #16711935	@ 0xff00ff
 8022dec:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 8022df0:	0a00      	lsrs	r0, r0, #8
 8022df2:	435e      	muls	r6, r3
 8022df4:	0a2d      	lsrs	r5, r5, #8
 8022df6:	435a      	muls	r2, r3
 8022df8:	9b03      	ldr	r3, [sp, #12]
 8022dfa:	ea4f 2c16 	mov.w	ip, r6, lsr #8
 8022dfe:	f106 1601 	add.w	r6, r6, #65537	@ 0x10001
 8022e02:	f000 10ff 	and.w	r0, r0, #16711935	@ 0xff00ff
 8022e06:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8022e0a:	44b4      	add	ip, r6
 8022e0c:	f502 7680 	add.w	r6, r2, #256	@ 0x100
 8022e10:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8022e14:	eb06 2212 	add.w	r2, r6, r2, lsr #8
 8022e18:	9e01      	ldr	r6, [sp, #4]
 8022e1a:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8022e1e:	fb03 ee06 	mla	lr, r3, r6, lr
 8022e22:	9b04      	ldr	r3, [sp, #16]
 8022e24:	0a12      	lsrs	r2, r2, #8
 8022e26:	fb0c ee09 	mla	lr, ip, r9, lr
 8022e2a:	f403 467f 	and.w	r6, r3, #65280	@ 0xff00
 8022e2e:	9b05      	ldr	r3, [sp, #20]
 8022e30:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 8022e34:	fb00 ee04 	mla	lr, r0, r4, lr
 8022e38:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8022e3c:	f00e 10ff 	and.w	r0, lr, #16711935	@ 0xff00ff
 8022e40:	f403 4e7f 	and.w	lr, r3, #65280	@ 0xff00
 8022e44:	9b01      	ldr	r3, [sp, #4]
 8022e46:	fb07 fe0e 	mul.w	lr, r7, lr
 8022e4a:	fb07 f70b 	mul.w	r7, r7, fp
 8022e4e:	fb03 ee06 	mla	lr, r3, r6, lr
 8022e52:	fb03 730a 	mla	r3, r3, sl, r7
 8022e56:	fb09 e202 	mla	r2, r9, r2, lr
 8022e5a:	f405 4e7f 	and.w	lr, r5, #65280	@ 0xff00
 8022e5e:	fb04 2e0e 	mla	lr, r4, lr, r2
 8022e62:	f89d 2054 	ldrb.w	r2, [sp, #84]	@ 0x54
 8022e66:	fb04 3408 	mla	r4, r4, r8, r3
 8022e6a:	9b02      	ldr	r3, [sp, #8]
 8022e6c:	b292      	uxth	r2, r2
 8022e6e:	fb09 4903 	mla	r9, r9, r3, r4
 8022e72:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8022e76:	f3c9 2907 	ubfx	r9, r9, #8, #8
 8022e7a:	f40e 4e7f 	and.w	lr, lr, #65280	@ 0xff00
 8022e7e:	fb09 f902 	mul.w	r9, r9, r2
 8022e82:	ea40 0e0e 	orr.w	lr, r0, lr
 8022e86:	f109 0301 	add.w	r3, r9, #1
 8022e8a:	fa5f f08e 	uxtb.w	r0, lr
 8022e8e:	fb10 f002 	smulbb	r0, r0, r2
 8022e92:	eb03 2919 	add.w	r9, r3, r9, lsr #8
 8022e96:	780b      	ldrb	r3, [r1, #0]
 8022e98:	ea6f 2919 	mvn.w	r9, r9, lsr #8
 8022e9c:	fa5f f989 	uxtb.w	r9, r9
 8022ea0:	fb03 0309 	mla	r3, r3, r9, r0
 8022ea4:	b29b      	uxth	r3, r3
 8022ea6:	1c58      	adds	r0, r3, #1
 8022ea8:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 8022eac:	7848      	ldrb	r0, [r1, #1]
 8022eae:	fb10 f009 	smulbb	r0, r0, r9
 8022eb2:	121b      	asrs	r3, r3, #8
 8022eb4:	700b      	strb	r3, [r1, #0]
 8022eb6:	f3ce 2307 	ubfx	r3, lr, #8, #8
 8022eba:	ea4f 4e1e 	mov.w	lr, lr, lsr #16
 8022ebe:	fb03 0302 	mla	r3, r3, r2, r0
 8022ec2:	b29b      	uxth	r3, r3
 8022ec4:	1c58      	adds	r0, r3, #1
 8022ec6:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 8022eca:	121b      	asrs	r3, r3, #8
 8022ecc:	704b      	strb	r3, [r1, #1]
 8022ece:	788b      	ldrb	r3, [r1, #2]
 8022ed0:	fb13 f909 	smulbb	r9, r3, r9
 8022ed4:	fb0e 9e02 	mla	lr, lr, r2, r9
 8022ed8:	fa1f fe8e 	uxth.w	lr, lr
 8022edc:	f10e 0301 	add.w	r3, lr, #1
 8022ee0:	eb03 2e1e 	add.w	lr, r3, lr, lsr #8
 8022ee4:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8022ee8:	f881 e002 	strb.w	lr, [r1, #2]
 8022eec:	b007      	add	sp, #28
 8022eee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022ef2:	2600      	movs	r6, #0
 8022ef4:	e6eb      	b.n	8022cce <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x3a>
 8022ef6:	2000      	movs	r0, #0
 8022ef8:	4606      	mov	r6, r0
 8022efa:	e6f3      	b.n	8022ce4 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x50>
 8022efc:	2000      	movs	r0, #0
 8022efe:	e6f1      	b.n	8022ce4 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x50>
 8022f00:	4620      	mov	r0, r4
 8022f02:	e6ef      	b.n	8022ce4 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x50>
 8022f04:	2500      	movs	r5, #0
 8022f06:	e6ff      	b.n	8022d08 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x74>
 8022f08:	2200      	movs	r2, #0
 8022f0a:	4615      	mov	r5, r2
 8022f0c:	e708      	b.n	8022d20 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>
 8022f0e:	4672      	mov	r2, lr
 8022f10:	4675      	mov	r5, lr
 8022f12:	e705      	b.n	8022d20 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>
 8022f14:	2200      	movs	r2, #0
 8022f16:	e703      	b.n	8022d20 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>
 8022f18:	4622      	mov	r2, r4
 8022f1a:	e701      	b.n	8022d20 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>

08022f1c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8022f1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022f20:	b09d      	sub	sp, #116	@ 0x74
 8022f22:	9219      	str	r2, [sp, #100]	@ 0x64
 8022f24:	9307      	str	r3, [sp, #28]
 8022f26:	9a2b      	ldr	r2, [sp, #172]	@ 0xac
 8022f28:	f89d 30bc 	ldrb.w	r3, [sp, #188]	@ 0xbc
 8022f2c:	901b      	str	r0, [sp, #108]	@ 0x6c
 8022f2e:	931a      	str	r3, [sp, #104]	@ 0x68
 8022f30:	6850      	ldr	r0, [r2, #4]
 8022f32:	9117      	str	r1, [sp, #92]	@ 0x5c
 8022f34:	6812      	ldr	r2, [r2, #0]
 8022f36:	e9dd 132c 	ldrd	r1, r3, [sp, #176]	@ 0xb0
 8022f3a:	e9dd 5627 	ldrd	r5, r6, [sp, #156]	@ 0x9c
 8022f3e:	fb00 1303 	mla	r3, r0, r3, r1
 8022f42:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8022f46:	18d3      	adds	r3, r2, r3
 8022f48:	930a      	str	r3, [sp, #40]	@ 0x28
 8022f4a:	9b2e      	ldr	r3, [sp, #184]	@ 0xb8
 8022f4c:	681b      	ldr	r3, [r3, #0]
 8022f4e:	9310      	str	r3, [sp, #64]	@ 0x40
 8022f50:	f8bd 3068 	ldrh.w	r3, [sp, #104]	@ 0x68
 8022f54:	930b      	str	r3, [sp, #44]	@ 0x2c
 8022f56:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8022f58:	2b00      	cmp	r3, #0
 8022f5a:	dc03      	bgt.n	8022f64 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 8022f5c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8022f5e:	2b00      	cmp	r3, #0
 8022f60:	f340 8368 	ble.w	8023634 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x718>
 8022f64:	9b2e      	ldr	r3, [sp, #184]	@ 0xb8
 8022f66:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8022f6a:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8022f6e:	1e48      	subs	r0, r1, #1
 8022f70:	1e57      	subs	r7, r2, #1
 8022f72:	9b07      	ldr	r3, [sp, #28]
 8022f74:	2b00      	cmp	r3, #0
 8022f76:	f340 8187 	ble.w	8023288 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36c>
 8022f7a:	ea5f 4c25 	movs.w	ip, r5, asr #16
 8022f7e:	ea4f 4326 	mov.w	r3, r6, asr #16
 8022f82:	d406      	bmi.n	8022f92 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8022f84:	4584      	cmp	ip, r0
 8022f86:	da04      	bge.n	8022f92 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8022f88:	2b00      	cmp	r3, #0
 8022f8a:	db02      	blt.n	8022f92 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8022f8c:	42bb      	cmp	r3, r7
 8022f8e:	f2c0 817c 	blt.w	802328a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 8022f92:	f11c 0c01 	adds.w	ip, ip, #1
 8022f96:	f100 816c 	bmi.w	8023272 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 8022f9a:	4561      	cmp	r1, ip
 8022f9c:	f2c0 8169 	blt.w	8023272 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 8022fa0:	3301      	adds	r3, #1
 8022fa2:	f100 8166 	bmi.w	8023272 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 8022fa6:	429a      	cmp	r2, r3
 8022fa8:	f2c0 8163 	blt.w	8023272 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 8022fac:	9b07      	ldr	r3, [sp, #28]
 8022fae:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
 8022fb0:	9318      	str	r3, [sp, #96]	@ 0x60
 8022fb2:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8022fb4:	2b00      	cmp	r3, #0
 8022fb6:	f340 8186 	ble.w	80232c6 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3aa>
 8022fba:	9b2e      	ldr	r3, [sp, #184]	@ 0xb8
 8022fbc:	142a      	asrs	r2, r5, #16
 8022fbe:	ea4f 4026 	mov.w	r0, r6, asr #16
 8022fc2:	f3c5 3103 	ubfx	r1, r5, #12, #4
 8022fc6:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 8022fca:	e9d3 e302 	ldrd	lr, r3, [r3, #8]
 8022fce:	f100 81cb 	bmi.w	8023368 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44c>
 8022fd2:	f10e 38ff 	add.w	r8, lr, #4294967295
 8022fd6:	4542      	cmp	r2, r8
 8022fd8:	f280 81c6 	bge.w	8023368 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44c>
 8022fdc:	2800      	cmp	r0, #0
 8022fde:	f2c0 81c3 	blt.w	8023368 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44c>
 8022fe2:	f103 38ff 	add.w	r8, r3, #4294967295
 8022fe6:	4540      	cmp	r0, r8
 8022fe8:	f280 81be 	bge.w	8023368 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44c>
 8022fec:	fa0f f38e 	sxth.w	r3, lr
 8022ff0:	fb00 2203 	mla	r2, r0, r3, r2
 8022ff4:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8022ff6:	eb00 0882 	add.w	r8, r0, r2, lsl #2
 8022ffa:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
 8022ffe:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 8023002:	2900      	cmp	r1, #0
 8023004:	f000 81a6 	beq.w	8023354 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x438>
 8023008:	f8d8 0004 	ldr.w	r0, [r8, #4]
 802300c:	900c      	str	r0, [sp, #48]	@ 0x30
 802300e:	0e00      	lsrs	r0, r0, #24
 8023010:	9013      	str	r0, [sp, #76]	@ 0x4c
 8023012:	f1bc 0f00 	cmp.w	ip, #0
 8023016:	d00f      	beq.n	8023038 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 8023018:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 802301c:	3b01      	subs	r3, #1
 802301e:	009b      	lsls	r3, r3, #2
 8023020:	3304      	adds	r3, #4
 8023022:	eb08 0003 	add.w	r0, r8, r3
 8023026:	f858 3003 	ldr.w	r3, [r8, r3]
 802302a:	9308      	str	r3, [sp, #32]
 802302c:	0e1b      	lsrs	r3, r3, #24
 802302e:	9311      	str	r3, [sp, #68]	@ 0x44
 8023030:	6843      	ldr	r3, [r0, #4]
 8023032:	930d      	str	r3, [sp, #52]	@ 0x34
 8023034:	0e1b      	lsrs	r3, r3, #24
 8023036:	9314      	str	r3, [sp, #80]	@ 0x50
 8023038:	b289      	uxth	r1, r1
 802303a:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 802303c:	fa1f fc8c 	uxth.w	ip, ip
 8023040:	0108      	lsls	r0, r1, #4
 8023042:	fb01 f90c 	mul.w	r9, r1, ip
 8023046:	f5c0 7380 	rsb	r3, r0, #256	@ 0x100
 802304a:	ebc9 1c0c 	rsb	ip, r9, ip, lsl #4
 802304e:	eba0 0809 	sub.w	r8, r0, r9
 8023052:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 8023054:	fa1f f18c 	uxth.w	r1, ip
 8023058:	fa1f f888 	uxth.w	r8, r8
 802305c:	1a5b      	subs	r3, r3, r1
 802305e:	fb08 f000 	mul.w	r0, r8, r0
 8023062:	b29b      	uxth	r3, r3
 8023064:	fb03 000e 	mla	r0, r3, lr, r0
 8023068:	fb01 0004 	mla	r0, r1, r4, r0
 802306c:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 802306e:	fb09 0004 	mla	r0, r9, r4, r0
 8023072:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8023076:	2800      	cmp	r0, #0
 8023078:	f000 80f2 	beq.w	8023260 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 802307c:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 8023080:	d01b      	beq.n	80230ba <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19e>
 8023082:	f002 1aff 	and.w	sl, r2, #16711935	@ 0xff00ff
 8023086:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 802308a:	fb0e fa0a 	mul.w	sl, lr, sl
 802308e:	fb0e fe02 	mul.w	lr, lr, r2
 8023092:	ea4f 221a 	mov.w	r2, sl, lsr #8
 8023096:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 802309a:	f50e 7c80 	add.w	ip, lr, #256	@ 0x100
 802309e:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
 80230a2:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 80230a6:	4452      	add	r2, sl
 80230a8:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80230ac:	0a12      	lsrs	r2, r2, #8
 80230ae:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 80230b2:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
 80230b6:	ea42 020c 	orr.w	r2, r2, ip
 80230ba:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 80230bc:	2cff      	cmp	r4, #255	@ 0xff
 80230be:	d021      	beq.n	8023104 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 80230c0:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 80230c2:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 80230c6:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 80230c8:	fb04 fb0b 	mul.w	fp, r4, fp
 80230cc:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 80230ce:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 80230d2:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 80230d4:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 80230d8:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 80230dc:	fb04 fa0a 	mul.w	sl, r4, sl
 80230e0:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 80230e4:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 80230e8:	44de      	add	lr, fp
 80230ea:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80230ee:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80230f2:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80230f6:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 80230fa:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 80230fe:	ea4e 040a 	orr.w	r4, lr, sl
 8023102:	940c      	str	r4, [sp, #48]	@ 0x30
 8023104:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 8023106:	2cff      	cmp	r4, #255	@ 0xff
 8023108:	d021      	beq.n	802314e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x232>
 802310a:	9c08      	ldr	r4, [sp, #32]
 802310c:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 8023110:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 8023112:	fb04 fb0b 	mul.w	fp, r4, fp
 8023116:	9c08      	ldr	r4, [sp, #32]
 8023118:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 802311c:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 802311e:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8023122:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 8023126:	fb04 fa0a 	mul.w	sl, r4, sl
 802312a:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 802312e:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 8023132:	44de      	add	lr, fp
 8023134:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8023138:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802313c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8023140:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8023144:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8023148:	ea4e 040a 	orr.w	r4, lr, sl
 802314c:	9408      	str	r4, [sp, #32]
 802314e:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 8023150:	2cff      	cmp	r4, #255	@ 0xff
 8023152:	d021      	beq.n	8023198 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 8023154:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 8023156:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 802315a:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 802315c:	fb04 fb0b 	mul.w	fp, r4, fp
 8023160:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 8023162:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 8023166:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 8023168:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 802316c:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 8023170:	fb04 fa0a 	mul.w	sl, r4, sl
 8023174:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8023178:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 802317c:	44de      	add	lr, fp
 802317e:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8023182:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8023186:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802318a:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 802318e:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8023192:	ea4e 040a 	orr.w	r4, lr, sl
 8023196:	940d      	str	r4, [sp, #52]	@ 0x34
 8023198:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 802319a:	f002 1eff 	and.w	lr, r2, #16711935	@ 0xff00ff
 802319e:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 80231a2:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 80231a6:	9c08      	ldr	r4, [sp, #32]
 80231a8:	fb08 fc0c 	mul.w	ip, r8, ip
 80231ac:	fb03 cc0e 	mla	ip, r3, lr, ip
 80231b0:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 80231b4:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 80231b6:	fb01 cc0e 	mla	ip, r1, lr, ip
 80231ba:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 80231be:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 80231c0:	fb09 cc0e 	mla	ip, r9, lr, ip
 80231c4:	f404 4e7f 	and.w	lr, r4, #65280	@ 0xff00
 80231c8:	fb08 f80e 	mul.w	r8, r8, lr
 80231cc:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80231d0:	fb03 8202 	mla	r2, r3, r2, r8
 80231d4:	9b08      	ldr	r3, [sp, #32]
 80231d6:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 80231da:	f403 4a7f 	and.w	sl, r3, #65280	@ 0xff00
 80231de:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80231e0:	fb01 220a 	mla	r2, r1, sl, r2
 80231e4:	f403 417f 	and.w	r1, r3, #65280	@ 0xff00
 80231e8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80231ea:	fb09 2901 	mla	r9, r9, r1, r2
 80231ee:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80231f0:	4343      	muls	r3, r0
 80231f2:	ea4f 2919 	mov.w	r9, r9, lsr #8
 80231f6:	1c58      	adds	r0, r3, #1
 80231f8:	f409 497f 	and.w	r9, r9, #65280	@ 0xff00
 80231fc:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 8023200:	783b      	ldrb	r3, [r7, #0]
 8023202:	ea4c 0c09 	orr.w	ip, ip, r9
 8023206:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 802320a:	fa5f f28c 	uxtb.w	r2, ip
 802320e:	b2c0      	uxtb	r0, r0
 8023210:	fb12 f201 	smulbb	r2, r2, r1
 8023214:	fb03 2300 	mla	r3, r3, r0, r2
 8023218:	b29b      	uxth	r3, r3
 802321a:	1c5a      	adds	r2, r3, #1
 802321c:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8023220:	787a      	ldrb	r2, [r7, #1]
 8023222:	fb12 f200 	smulbb	r2, r2, r0
 8023226:	121b      	asrs	r3, r3, #8
 8023228:	703b      	strb	r3, [r7, #0]
 802322a:	f3cc 2307 	ubfx	r3, ip, #8, #8
 802322e:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8023232:	fb03 2301 	mla	r3, r3, r1, r2
 8023236:	b29b      	uxth	r3, r3
 8023238:	1c5a      	adds	r2, r3, #1
 802323a:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 802323e:	121b      	asrs	r3, r3, #8
 8023240:	707b      	strb	r3, [r7, #1]
 8023242:	78bb      	ldrb	r3, [r7, #2]
 8023244:	fb13 f000 	smulbb	r0, r3, r0
 8023248:	fb0c 0c01 	mla	ip, ip, r1, r0
 802324c:	fa1f fc8c 	uxth.w	ip, ip
 8023250:	f10c 0301 	add.w	r3, ip, #1
 8023254:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 8023258:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 802325c:	f887 c002 	strb.w	ip, [r7, #2]
 8023260:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 8023262:	3703      	adds	r7, #3
 8023264:	441d      	add	r5, r3
 8023266:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 8023268:	441e      	add	r6, r3
 802326a:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 802326c:	3b01      	subs	r3, #1
 802326e:	9318      	str	r3, [sp, #96]	@ 0x60
 8023270:	e69f      	b.n	8022fb2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8023272:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 8023274:	441d      	add	r5, r3
 8023276:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 8023278:	441e      	add	r6, r3
 802327a:	9b07      	ldr	r3, [sp, #28]
 802327c:	3b01      	subs	r3, #1
 802327e:	9307      	str	r3, [sp, #28]
 8023280:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8023282:	3303      	adds	r3, #3
 8023284:	930a      	str	r3, [sp, #40]	@ 0x28
 8023286:	e674      	b.n	8022f72 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56>
 8023288:	d025      	beq.n	80232d6 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ba>
 802328a:	9b07      	ldr	r3, [sp, #28]
 802328c:	9829      	ldr	r0, [sp, #164]	@ 0xa4
 802328e:	3b01      	subs	r3, #1
 8023290:	fb00 5003 	mla	r0, r0, r3, r5
 8023294:	1400      	asrs	r0, r0, #16
 8023296:	f53f ae89 	bmi.w	8022fac <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 802329a:	3901      	subs	r1, #1
 802329c:	4288      	cmp	r0, r1
 802329e:	f6bf ae85 	bge.w	8022fac <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 80232a2:	992a      	ldr	r1, [sp, #168]	@ 0xa8
 80232a4:	fb01 6303 	mla	r3, r1, r3, r6
 80232a8:	141b      	asrs	r3, r3, #16
 80232aa:	f53f ae7f 	bmi.w	8022fac <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 80232ae:	3a01      	subs	r2, #1
 80232b0:	4293      	cmp	r3, r2
 80232b2:	f6bf ae7b 	bge.w	8022fac <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 80232b6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80232b8:	f8dd b01c 	ldr.w	fp, [sp, #28]
 80232bc:	f103 0e03 	add.w	lr, r3, #3
 80232c0:	f1bb 0f00 	cmp.w	fp, #0
 80232c4:	dc6e      	bgt.n	80233a4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x488>
 80232c6:	9b07      	ldr	r3, [sp, #28]
 80232c8:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 80232cc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80232ce:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80232d2:	4423      	add	r3, r4
 80232d4:	930a      	str	r3, [sp, #40]	@ 0x28
 80232d6:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80232d8:	2b00      	cmp	r3, #0
 80232da:	f340 81ab 	ble.w	8023634 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x718>
 80232de:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80232e2:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 80232e4:	ee30 0a04 	vadd.f32	s0, s0, s8
 80232e8:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80232ec:	eef0 6a62 	vmov.f32	s13, s5
 80232f0:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80232f4:	ee31 1a05 	vadd.f32	s2, s2, s10
 80232f8:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80232fc:	ee16 5a90 	vmov	r5, s13
 8023300:	eef0 6a43 	vmov.f32	s13, s6
 8023304:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8023308:	ee16 6a90 	vmov	r6, s13
 802330c:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8023310:	ee61 7a27 	vmul.f32	s15, s2, s15
 8023314:	ee77 2a62 	vsub.f32	s5, s14, s5
 8023318:	ee37 3ac3 	vsub.f32	s6, s15, s6
 802331c:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8023320:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8023324:	ee12 2a90 	vmov	r2, s5
 8023328:	eef0 2a47 	vmov.f32	s5, s14
 802332c:	fb92 f3f3 	sdiv	r3, r2, r3
 8023330:	ee13 2a10 	vmov	r2, s6
 8023334:	9329      	str	r3, [sp, #164]	@ 0xa4
 8023336:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8023338:	eeb0 3a67 	vmov.f32	s6, s15
 802333c:	fb92 f3f3 	sdiv	r3, r2, r3
 8023340:	932a      	str	r3, [sp, #168]	@ 0xa8
 8023342:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8023344:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8023346:	3b01      	subs	r3, #1
 8023348:	9317      	str	r3, [sp, #92]	@ 0x5c
 802334a:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 802334c:	bf08      	it	eq
 802334e:	4613      	moveq	r3, r2
 8023350:	9307      	str	r3, [sp, #28]
 8023352:	e600      	b.n	8022f56 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 8023354:	f1bc 0f00 	cmp.w	ip, #0
 8023358:	f43f ae6e 	beq.w	8023038 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 802335c:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 8023360:	9308      	str	r3, [sp, #32]
 8023362:	0e1b      	lsrs	r3, r3, #24
 8023364:	9311      	str	r3, [sp, #68]	@ 0x44
 8023366:	e667      	b.n	8023038 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 8023368:	f112 0801 	adds.w	r8, r2, #1
 802336c:	f53f af78 	bmi.w	8023260 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 8023370:	45c6      	cmp	lr, r8
 8023372:	f6ff af75 	blt.w	8023260 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 8023376:	f110 0801 	adds.w	r8, r0, #1
 802337a:	f53f af71 	bmi.w	8023260 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 802337e:	4543      	cmp	r3, r8
 8023380:	f6ff af6e 	blt.w	8023260 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 8023384:	9c1a      	ldr	r4, [sp, #104]	@ 0x68
 8023386:	b21b      	sxth	r3, r3
 8023388:	9201      	str	r2, [sp, #4]
 802338a:	9300      	str	r3, [sp, #0]
 802338c:	fa0f f38e 	sxth.w	r3, lr
 8023390:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8023392:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8023396:	e9cd c404 	strd	ip, r4, [sp, #16]
 802339a:	4639      	mov	r1, r7
 802339c:	981b      	ldr	r0, [sp, #108]	@ 0x6c
 802339e:	f7ff fc79 	bl	8022c94 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh>
 80233a2:	e75d      	b.n	8023260 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 80233a4:	9b2e      	ldr	r3, [sp, #184]	@ 0xb8
 80233a6:	142f      	asrs	r7, r5, #16
 80233a8:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 80233aa:	f3c5 3103 	ubfx	r1, r5, #12, #4
 80233ae:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 80233b2:	1433      	asrs	r3, r6, #16
 80233b4:	f3c6 3003 	ubfx	r0, r6, #12, #4
 80233b8:	fb02 7303 	mla	r3, r2, r3, r7
 80233bc:	eb04 0783 	add.w	r7, r4, r3, lsl #2
 80233c0:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 80233c4:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 80233c8:	2900      	cmp	r1, #0
 80233ca:	f000 812a 	beq.w	8023622 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x706>
 80233ce:	687c      	ldr	r4, [r7, #4]
 80233d0:	940e      	str	r4, [sp, #56]	@ 0x38
 80233d2:	0e24      	lsrs	r4, r4, #24
 80233d4:	9415      	str	r4, [sp, #84]	@ 0x54
 80233d6:	b178      	cbz	r0, 80233f8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4dc>
 80233d8:	f102 4280 	add.w	r2, r2, #1073741824	@ 0x40000000
 80233dc:	3a01      	subs	r2, #1
 80233de:	0092      	lsls	r2, r2, #2
 80233e0:	3204      	adds	r2, #4
 80233e2:	eb07 0802 	add.w	r8, r7, r2
 80233e6:	58ba      	ldr	r2, [r7, r2]
 80233e8:	9209      	str	r2, [sp, #36]	@ 0x24
 80233ea:	0e12      	lsrs	r2, r2, #24
 80233ec:	9212      	str	r2, [sp, #72]	@ 0x48
 80233ee:	f8d8 2004 	ldr.w	r2, [r8, #4]
 80233f2:	920f      	str	r2, [sp, #60]	@ 0x3c
 80233f4:	0e12      	lsrs	r2, r2, #24
 80233f6:	9216      	str	r2, [sp, #88]	@ 0x58
 80233f8:	b289      	uxth	r1, r1
 80233fa:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 80233fc:	b280      	uxth	r0, r0
 80233fe:	fb01 f900 	mul.w	r9, r1, r0
 8023402:	0109      	lsls	r1, r1, #4
 8023404:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 8023408:	eba1 0809 	sub.w	r8, r1, r9
 802340c:	f5c1 7280 	rsb	r2, r1, #256	@ 0x100
 8023410:	9915      	ldr	r1, [sp, #84]	@ 0x54
 8023412:	b280      	uxth	r0, r0
 8023414:	fa1f f888 	uxth.w	r8, r8
 8023418:	1a12      	subs	r2, r2, r0
 802341a:	fb08 f101 	mul.w	r1, r8, r1
 802341e:	b292      	uxth	r2, r2
 8023420:	fb02 110c 	mla	r1, r2, ip, r1
 8023424:	fb00 1104 	mla	r1, r0, r4, r1
 8023428:	9c16      	ldr	r4, [sp, #88]	@ 0x58
 802342a:	fb09 1104 	mla	r1, r9, r4, r1
 802342e:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8023432:	2900      	cmp	r1, #0
 8023434:	f000 80ec 	beq.w	8023610 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6f4>
 8023438:	f1bc 0fff 	cmp.w	ip, #255	@ 0xff
 802343c:	d019      	beq.n	8023472 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x556>
 802343e:	f003 1aff 	and.w	sl, r3, #16711935	@ 0xff00ff
 8023442:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8023446:	fb0c fa0a 	mul.w	sl, ip, sl
 802344a:	fb0c fc03 	mul.w	ip, ip, r3
 802344e:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8023452:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 8023456:	f50c 7780 	add.w	r7, ip, #256	@ 0x100
 802345a:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 802345e:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 8023462:	4453      	add	r3, sl
 8023464:	0a3f      	lsrs	r7, r7, #8
 8023466:	0a1b      	lsrs	r3, r3, #8
 8023468:	f407 477f 	and.w	r7, r7, #65280	@ 0xff00
 802346c:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 8023470:	433b      	orrs	r3, r7
 8023472:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 8023474:	2cff      	cmp	r4, #255	@ 0xff
 8023476:	d020      	beq.n	80234ba <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x59e>
 8023478:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 802347a:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 802347e:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 8023480:	4367      	muls	r7, r4
 8023482:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 8023484:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8023488:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 802348c:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 802348e:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 8023492:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8023496:	fb04 fa0a 	mul.w	sl, r4, sl
 802349a:	44bc      	add	ip, r7
 802349c:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 80234a0:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80234a4:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80234a8:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 80234ac:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80234b0:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 80234b4:	ea4c 040a 	orr.w	r4, ip, sl
 80234b8:	940e      	str	r4, [sp, #56]	@ 0x38
 80234ba:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 80234bc:	2cff      	cmp	r4, #255	@ 0xff
 80234be:	d020      	beq.n	8023502 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e6>
 80234c0:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 80234c2:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 80234c6:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 80234c8:	4367      	muls	r7, r4
 80234ca:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 80234cc:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 80234d0:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 80234d4:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 80234d6:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 80234da:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 80234de:	fb04 fa0a 	mul.w	sl, r4, sl
 80234e2:	44bc      	add	ip, r7
 80234e4:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 80234e8:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80234ec:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80234f0:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 80234f4:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80234f8:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 80234fc:	ea4c 040a 	orr.w	r4, ip, sl
 8023500:	9409      	str	r4, [sp, #36]	@ 0x24
 8023502:	9c16      	ldr	r4, [sp, #88]	@ 0x58
 8023504:	2cff      	cmp	r4, #255	@ 0xff
 8023506:	d020      	beq.n	802354a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62e>
 8023508:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 802350a:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 802350e:	9c16      	ldr	r4, [sp, #88]	@ 0x58
 8023510:	4367      	muls	r7, r4
 8023512:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 8023514:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8023518:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 802351c:	9c16      	ldr	r4, [sp, #88]	@ 0x58
 802351e:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 8023522:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8023526:	fb04 fa0a 	mul.w	sl, r4, sl
 802352a:	44bc      	add	ip, r7
 802352c:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 8023530:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8023534:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8023538:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 802353c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8023540:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8023544:	ea4c 040a 	orr.w	r4, ip, sl
 8023548:	940f      	str	r4, [sp, #60]	@ 0x3c
 802354a:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 802354c:	f003 1cff 	and.w	ip, r3, #16711935	@ 0xff00ff
 8023550:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8023554:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 8023558:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 802355a:	fb08 f707 	mul.w	r7, r8, r7
 802355e:	fb02 770c 	mla	r7, r2, ip, r7
 8023562:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 8023566:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 8023568:	fb00 770c 	mla	r7, r0, ip, r7
 802356c:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 8023570:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 8023572:	fb09 770c 	mla	r7, r9, ip, r7
 8023576:	f404 4c7f 	and.w	ip, r4, #65280	@ 0xff00
 802357a:	fb08 f80c 	mul.w	r8, r8, ip
 802357e:	0a3f      	lsrs	r7, r7, #8
 8023580:	fb02 8303 	mla	r3, r2, r3, r8
 8023584:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8023586:	f007 17ff 	and.w	r7, r7, #16711935	@ 0xff00ff
 802358a:	f402 4a7f 	and.w	sl, r2, #65280	@ 0xff00
 802358e:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8023590:	fb00 330a 	mla	r3, r0, sl, r3
 8023594:	f402 4c7f 	and.w	ip, r2, #65280	@ 0xff00
 8023598:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 802359a:	fb09 3c0c 	mla	ip, r9, ip, r3
 802359e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80235a0:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80235a4:	434b      	muls	r3, r1
 80235a6:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 80235aa:	1c59      	adds	r1, r3, #1
 80235ac:	ea47 070c 	orr.w	r7, r7, ip
 80235b0:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 80235b4:	f81e 3c03 	ldrb.w	r3, [lr, #-3]
 80235b8:	b2fa      	uxtb	r2, r7
 80235ba:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 80235be:	fb12 f200 	smulbb	r2, r2, r0
 80235c2:	b2c9      	uxtb	r1, r1
 80235c4:	fb03 2301 	mla	r3, r3, r1, r2
 80235c8:	b29b      	uxth	r3, r3
 80235ca:	1c5a      	adds	r2, r3, #1
 80235cc:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 80235d0:	f81e 2c02 	ldrb.w	r2, [lr, #-2]
 80235d4:	fb12 f201 	smulbb	r2, r2, r1
 80235d8:	121b      	asrs	r3, r3, #8
 80235da:	f80e 3c03 	strb.w	r3, [lr, #-3]
 80235de:	f3c7 2307 	ubfx	r3, r7, #8, #8
 80235e2:	0c3f      	lsrs	r7, r7, #16
 80235e4:	fb03 2300 	mla	r3, r3, r0, r2
 80235e8:	b29b      	uxth	r3, r3
 80235ea:	1c5a      	adds	r2, r3, #1
 80235ec:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 80235f0:	121b      	asrs	r3, r3, #8
 80235f2:	f80e 3c02 	strb.w	r3, [lr, #-2]
 80235f6:	f81e 3c01 	ldrb.w	r3, [lr, #-1]
 80235fa:	fb13 f101 	smulbb	r1, r3, r1
 80235fe:	fb07 1700 	mla	r7, r7, r0, r1
 8023602:	b2bf      	uxth	r7, r7
 8023604:	1c79      	adds	r1, r7, #1
 8023606:	eb01 2717 	add.w	r7, r1, r7, lsr #8
 802360a:	123f      	asrs	r7, r7, #8
 802360c:	f80e 7c01 	strb.w	r7, [lr, #-1]
 8023610:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 8023612:	f10e 0e03 	add.w	lr, lr, #3
 8023616:	f10b 3bff 	add.w	fp, fp, #4294967295
 802361a:	441d      	add	r5, r3
 802361c:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 802361e:	441e      	add	r6, r3
 8023620:	e64e      	b.n	80232c0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a4>
 8023622:	2800      	cmp	r0, #0
 8023624:	f43f aee8 	beq.w	80233f8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4dc>
 8023628:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 802362c:	9209      	str	r2, [sp, #36]	@ 0x24
 802362e:	0e12      	lsrs	r2, r2, #24
 8023630:	9212      	str	r2, [sp, #72]	@ 0x48
 8023632:	e6e1      	b.n	80233f8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4dc>
 8023634:	b01d      	add	sp, #116	@ 0x74
 8023636:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0802363a <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh>:
 802363a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802363e:	b087      	sub	sp, #28
 8023640:	e9dd 7511 	ldrd	r7, r5, [sp, #68]	@ 0x44
 8023644:	f9bd 8040 	ldrsh.w	r8, [sp, #64]	@ 0x40
 8023648:	fb05 7003 	mla	r0, r5, r3, r7
 802364c:	2d00      	cmp	r5, #0
 802364e:	f89d 404c 	ldrb.w	r4, [sp, #76]	@ 0x4c
 8023652:	f89d e050 	ldrb.w	lr, [sp, #80]	@ 0x50
 8023656:	eb02 0c80 	add.w	ip, r2, r0, lsl #2
 802365a:	f2c0 810a 	blt.w	8023872 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x238>
 802365e:	45a8      	cmp	r8, r5
 8023660:	f340 8107 	ble.w	8023872 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x238>
 8023664:	2f00      	cmp	r7, #0
 8023666:	f2c0 8102 	blt.w	802386e <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x234>
 802366a:	42bb      	cmp	r3, r7
 802366c:	f340 80ff 	ble.w	802386e <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x234>
 8023670:	f852 6020 	ldr.w	r6, [r2, r0, lsl #2]
 8023674:	1c7a      	adds	r2, r7, #1
 8023676:	f100 80ff 	bmi.w	8023878 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x23e>
 802367a:	4293      	cmp	r3, r2
 802367c:	f340 80fc 	ble.w	8023878 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x23e>
 8023680:	2c00      	cmp	r4, #0
 8023682:	f000 80fb 	beq.w	802387c <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x242>
 8023686:	f8dc 0004 	ldr.w	r0, [ip, #4]
 802368a:	3501      	adds	r5, #1
 802368c:	f100 80fa 	bmi.w	8023884 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x24a>
 8023690:	45a8      	cmp	r8, r5
 8023692:	f340 80f7 	ble.w	8023884 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x24a>
 8023696:	f1be 0f00 	cmp.w	lr, #0
 802369a:	f000 80f6 	beq.w	802388a <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x250>
 802369e:	2f00      	cmp	r7, #0
 80236a0:	f2c0 80ee 	blt.w	8023880 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x246>
 80236a4:	42bb      	cmp	r3, r7
 80236a6:	f340 80eb 	ble.w	8023880 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x246>
 80236aa:	f85c 5023 	ldr.w	r5, [ip, r3, lsl #2]
 80236ae:	3701      	adds	r7, #1
 80236b0:	f100 80ee 	bmi.w	8023890 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x256>
 80236b4:	42bb      	cmp	r3, r7
 80236b6:	f340 80eb 	ble.w	8023890 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x256>
 80236ba:	2c00      	cmp	r4, #0
 80236bc:	f000 80ea 	beq.w	8023894 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x25a>
 80236c0:	3301      	adds	r3, #1
 80236c2:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 80236c6:	fa1f fc84 	uxth.w	ip, r4
 80236ca:	fa1f fe8e 	uxth.w	lr, lr
 80236ce:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 80236d2:	fb0c f90e 	mul.w	r9, ip, lr
 80236d6:	0e13      	lsrs	r3, r2, #24
 80236d8:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 80236dc:	ebc9 1e0e 	rsb	lr, r9, lr, lsl #4
 80236e0:	9302      	str	r3, [sp, #8]
 80236e2:	ebac 0709 	sub.w	r7, ip, r9
 80236e6:	f5cc 7380 	rsb	r3, ip, #256	@ 0x100
 80236ea:	fa1f f48e 	uxth.w	r4, lr
 80236ee:	f006 1eff 	and.w	lr, r6, #16711935	@ 0xff00ff
 80236f2:	f406 467f 	and.w	r6, r6, #65280	@ 0xff00
 80236f6:	ea4f 6b10 	mov.w	fp, r0, lsr #24
 80236fa:	fb0a fe0e 	mul.w	lr, sl, lr
 80236fe:	1b1b      	subs	r3, r3, r4
 8023700:	fb0a f606 	mul.w	r6, sl, r6
 8023704:	ea4f 6815 	mov.w	r8, r5, lsr #24
 8023708:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 802370c:	f10e 1e01 	add.w	lr, lr, #65537	@ 0x10001
 8023710:	b29b      	uxth	r3, r3
 8023712:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8023716:	b2bf      	uxth	r7, r7
 8023718:	9301      	str	r3, [sp, #4]
 802371a:	44e6      	add	lr, ip
 802371c:	f506 7c80 	add.w	ip, r6, #256	@ 0x100
 8023720:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8023724:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 8023728:	f00e 13ff 	and.w	r3, lr, #16711935	@ 0xff00ff
 802372c:	9303      	str	r3, [sp, #12]
 802372e:	0a33      	lsrs	r3, r6, #8
 8023730:	f000 16ff 	and.w	r6, r0, #16711935	@ 0xff00ff
 8023734:	f400 407f 	and.w	r0, r0, #65280	@ 0xff00
 8023738:	9304      	str	r3, [sp, #16]
 802373a:	fb0b f606 	mul.w	r6, fp, r6
 802373e:	fb0b f000 	mul.w	r0, fp, r0
 8023742:	ea4f 2e16 	mov.w	lr, r6, lsr #8
 8023746:	f106 1601 	add.w	r6, r6, #65537	@ 0x10001
 802374a:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 802374e:	44b6      	add	lr, r6
 8023750:	f500 7680 	add.w	r6, r0, #256	@ 0x100
 8023754:	eb06 2010 	add.w	r0, r6, r0, lsr #8
 8023758:	f005 16ff 	and.w	r6, r5, #16711935	@ 0xff00ff
 802375c:	f405 457f 	and.w	r5, r5, #65280	@ 0xff00
 8023760:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8023764:	fb08 f606 	mul.w	r6, r8, r6
 8023768:	0a03      	lsrs	r3, r0, #8
 802376a:	fb08 f505 	mul.w	r5, r8, r5
 802376e:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8023772:	0a30      	lsrs	r0, r6, #8
 8023774:	f106 1601 	add.w	r6, r6, #65537	@ 0x10001
 8023778:	9305      	str	r3, [sp, #20]
 802377a:	0e13      	lsrs	r3, r2, #24
 802377c:	f000 10ff 	and.w	r0, r0, #16711935	@ 0xff00ff
 8023780:	fb0e fe07 	mul.w	lr, lr, r7
 8023784:	4430      	add	r0, r6
 8023786:	f505 7680 	add.w	r6, r5, #256	@ 0x100
 802378a:	eb06 2515 	add.w	r5, r6, r5, lsr #8
 802378e:	f002 16ff 	and.w	r6, r2, #16711935	@ 0xff00ff
 8023792:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 8023796:	0a00      	lsrs	r0, r0, #8
 8023798:	435e      	muls	r6, r3
 802379a:	0a2d      	lsrs	r5, r5, #8
 802379c:	435a      	muls	r2, r3
 802379e:	9b03      	ldr	r3, [sp, #12]
 80237a0:	ea4f 2c16 	mov.w	ip, r6, lsr #8
 80237a4:	f106 1601 	add.w	r6, r6, #65537	@ 0x10001
 80237a8:	f000 10ff 	and.w	r0, r0, #16711935	@ 0xff00ff
 80237ac:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 80237b0:	44b4      	add	ip, r6
 80237b2:	f502 7680 	add.w	r6, r2, #256	@ 0x100
 80237b6:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80237ba:	eb06 2212 	add.w	r2, r6, r2, lsr #8
 80237be:	9e01      	ldr	r6, [sp, #4]
 80237c0:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 80237c4:	fb03 ee06 	mla	lr, r3, r6, lr
 80237c8:	9b04      	ldr	r3, [sp, #16]
 80237ca:	0a12      	lsrs	r2, r2, #8
 80237cc:	fb0c ee09 	mla	lr, ip, r9, lr
 80237d0:	f403 467f 	and.w	r6, r3, #65280	@ 0xff00
 80237d4:	9b05      	ldr	r3, [sp, #20]
 80237d6:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 80237da:	fb00 ee04 	mla	lr, r0, r4, lr
 80237de:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80237e2:	f00e 10ff 	and.w	r0, lr, #16711935	@ 0xff00ff
 80237e6:	f403 4e7f 	and.w	lr, r3, #65280	@ 0xff00
 80237ea:	9b01      	ldr	r3, [sp, #4]
 80237ec:	fb07 fe0e 	mul.w	lr, r7, lr
 80237f0:	fb07 f70b 	mul.w	r7, r7, fp
 80237f4:	fb03 ee06 	mla	lr, r3, r6, lr
 80237f8:	fb03 730a 	mla	r3, r3, sl, r7
 80237fc:	fb09 e202 	mla	r2, r9, r2, lr
 8023800:	f405 4e7f 	and.w	lr, r5, #65280	@ 0xff00
 8023804:	fb04 2e0e 	mla	lr, r4, lr, r2
 8023808:	fb04 3408 	mla	r4, r4, r8, r3
 802380c:	9b02      	ldr	r3, [sp, #8]
 802380e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8023812:	fb09 4903 	mla	r9, r9, r3, r4
 8023816:	780b      	ldrb	r3, [r1, #0]
 8023818:	f40e 4e7f 	and.w	lr, lr, #65280	@ 0xff00
 802381c:	ea6f 2929 	mvn.w	r9, r9, asr #8
 8023820:	ea40 0e0e 	orr.w	lr, r0, lr
 8023824:	fa5f f989 	uxtb.w	r9, r9
 8023828:	fb03 f209 	mul.w	r2, r3, r9
 802382c:	1c53      	adds	r3, r2, #1
 802382e:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8023832:	eb0e 2313 	add.w	r3, lr, r3, lsr #8
 8023836:	700b      	strb	r3, [r1, #0]
 8023838:	784b      	ldrb	r3, [r1, #1]
 802383a:	fb03 f309 	mul.w	r3, r3, r9
 802383e:	1c5a      	adds	r2, r3, #1
 8023840:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8023844:	ea4f 231e 	mov.w	r3, lr, lsr #8
 8023848:	ea4f 4e1e 	mov.w	lr, lr, lsr #16
 802384c:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8023850:	704b      	strb	r3, [r1, #1]
 8023852:	788b      	ldrb	r3, [r1, #2]
 8023854:	fb03 f909 	mul.w	r9, r3, r9
 8023858:	f109 0301 	add.w	r3, r9, #1
 802385c:	eb03 2919 	add.w	r9, r3, r9, lsr #8
 8023860:	eb0e 2e19 	add.w	lr, lr, r9, lsr #8
 8023864:	f881 e002 	strb.w	lr, [r1, #2]
 8023868:	b007      	add	sp, #28
 802386a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802386e:	2600      	movs	r6, #0
 8023870:	e700      	b.n	8023674 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x3a>
 8023872:	2000      	movs	r0, #0
 8023874:	4606      	mov	r6, r0
 8023876:	e708      	b.n	802368a <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x50>
 8023878:	2000      	movs	r0, #0
 802387a:	e706      	b.n	802368a <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x50>
 802387c:	4620      	mov	r0, r4
 802387e:	e704      	b.n	802368a <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x50>
 8023880:	2500      	movs	r5, #0
 8023882:	e714      	b.n	80236ae <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x74>
 8023884:	2200      	movs	r2, #0
 8023886:	4615      	mov	r5, r2
 8023888:	e71d      	b.n	80236c6 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>
 802388a:	4672      	mov	r2, lr
 802388c:	4675      	mov	r5, lr
 802388e:	e71a      	b.n	80236c6 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>
 8023890:	2200      	movs	r2, #0
 8023892:	e718      	b.n	80236c6 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>
 8023894:	4622      	mov	r2, r4
 8023896:	e716      	b.n	80236c6 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>

08023898 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8023898:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802389c:	b099      	sub	sp, #100	@ 0x64
 802389e:	e9cd 1215 	strd	r1, r2, [sp, #84]	@ 0x54
 80238a2:	9a27      	ldr	r2, [sp, #156]	@ 0x9c
 80238a4:	9017      	str	r0, [sp, #92]	@ 0x5c
 80238a6:	9306      	str	r3, [sp, #24]
 80238a8:	6850      	ldr	r0, [r2, #4]
 80238aa:	6812      	ldr	r2, [r2, #0]
 80238ac:	e9dd 1328 	ldrd	r1, r3, [sp, #160]	@ 0xa0
 80238b0:	e9dd 5623 	ldrd	r5, r6, [sp, #140]	@ 0x8c
 80238b4:	fb00 1303 	mla	r3, r0, r3, r1
 80238b8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80238bc:	18d3      	adds	r3, r2, r3
 80238be:	9309      	str	r3, [sp, #36]	@ 0x24
 80238c0:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 80238c2:	681b      	ldr	r3, [r3, #0]
 80238c4:	930e      	str	r3, [sp, #56]	@ 0x38
 80238c6:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80238c8:	2b00      	cmp	r3, #0
 80238ca:	dc03      	bgt.n	80238d4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 80238cc:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80238ce:	2b00      	cmp	r3, #0
 80238d0:	f340 8360 	ble.w	8023f94 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6fc>
 80238d4:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 80238d6:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80238da:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80238de:	1e48      	subs	r0, r1, #1
 80238e0:	1e57      	subs	r7, r2, #1
 80238e2:	9b06      	ldr	r3, [sp, #24]
 80238e4:	2b00      	cmp	r3, #0
 80238e6:	f340 817b 	ble.w	8023be0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x348>
 80238ea:	ea5f 4c25 	movs.w	ip, r5, asr #16
 80238ee:	ea4f 4326 	mov.w	r3, r6, asr #16
 80238f2:	d406      	bmi.n	8023902 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 80238f4:	4584      	cmp	ip, r0
 80238f6:	da04      	bge.n	8023902 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 80238f8:	2b00      	cmp	r3, #0
 80238fa:	db02      	blt.n	8023902 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 80238fc:	42bb      	cmp	r3, r7
 80238fe:	f2c0 8170 	blt.w	8023be2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 8023902:	f11c 0c01 	adds.w	ip, ip, #1
 8023906:	f100 8160 	bmi.w	8023bca <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x332>
 802390a:	4561      	cmp	r1, ip
 802390c:	f2c0 815d 	blt.w	8023bca <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x332>
 8023910:	3301      	adds	r3, #1
 8023912:	f100 815a 	bmi.w	8023bca <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x332>
 8023916:	429a      	cmp	r2, r3
 8023918:	f2c0 8157 	blt.w	8023bca <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x332>
 802391c:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8023920:	9f09      	ldr	r7, [sp, #36]	@ 0x24
 8023922:	f1b8 0f00 	cmp.w	r8, #0
 8023926:	f340 8179 	ble.w	8023c1c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x384>
 802392a:	9a2a      	ldr	r2, [sp, #168]	@ 0xa8
 802392c:	ea4f 4c26 	mov.w	ip, r6, asr #16
 8023930:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 8023932:	f3c5 3103 	ubfx	r1, r5, #12, #4
 8023936:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 802393a:	142a      	asrs	r2, r5, #16
 802393c:	f3c6 3003 	ubfx	r0, r6, #12, #4
 8023940:	689b      	ldr	r3, [r3, #8]
 8023942:	f100 81be 	bmi.w	8023cc2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 8023946:	f103 39ff 	add.w	r9, r3, #4294967295
 802394a:	454a      	cmp	r2, r9
 802394c:	f280 81b9 	bge.w	8023cc2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 8023950:	f1bc 0f00 	cmp.w	ip, #0
 8023954:	f2c0 81b5 	blt.w	8023cc2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 8023958:	f10e 39ff 	add.w	r9, lr, #4294967295
 802395c:	45cc      	cmp	ip, r9
 802395e:	f280 81b0 	bge.w	8023cc2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 8023962:	b21b      	sxth	r3, r3
 8023964:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 8023966:	fb0c 2203 	mla	r2, ip, r3, r2
 802396a:	eb04 0982 	add.w	r9, r4, r2, lsl #2
 802396e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8023972:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 8023976:	2900      	cmp	r1, #0
 8023978:	f000 8197 	beq.w	8023caa <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x412>
 802397c:	f8d9 4004 	ldr.w	r4, [r9, #4]
 8023980:	940a      	str	r4, [sp, #40]	@ 0x28
 8023982:	0e24      	lsrs	r4, r4, #24
 8023984:	9411      	str	r4, [sp, #68]	@ 0x44
 8023986:	b180      	cbz	r0, 80239aa <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x112>
 8023988:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 802398c:	3b01      	subs	r3, #1
 802398e:	009b      	lsls	r3, r3, #2
 8023990:	3304      	adds	r3, #4
 8023992:	eb09 0c03 	add.w	ip, r9, r3
 8023996:	f859 3003 	ldr.w	r3, [r9, r3]
 802399a:	9307      	str	r3, [sp, #28]
 802399c:	0e1b      	lsrs	r3, r3, #24
 802399e:	930f      	str	r3, [sp, #60]	@ 0x3c
 80239a0:	f8dc 3004 	ldr.w	r3, [ip, #4]
 80239a4:	930b      	str	r3, [sp, #44]	@ 0x2c
 80239a6:	0e1b      	lsrs	r3, r3, #24
 80239a8:	9312      	str	r3, [sp, #72]	@ 0x48
 80239aa:	b289      	uxth	r1, r1
 80239ac:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80239ae:	b280      	uxth	r0, r0
 80239b0:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 80239b2:	fb01 fa00 	mul.w	sl, r1, r0
 80239b6:	0109      	lsls	r1, r1, #4
 80239b8:	ebca 1000 	rsb	r0, sl, r0, lsl #4
 80239bc:	eba1 090a 	sub.w	r9, r1, sl
 80239c0:	f5c1 7180 	rsb	r1, r1, #256	@ 0x100
 80239c4:	b280      	uxth	r0, r0
 80239c6:	fa1f f989 	uxth.w	r9, r9
 80239ca:	1a09      	subs	r1, r1, r0
 80239cc:	fb09 f303 	mul.w	r3, r9, r3
 80239d0:	b289      	uxth	r1, r1
 80239d2:	fb01 330e 	mla	r3, r1, lr, r3
 80239d6:	fb00 3304 	mla	r3, r0, r4, r3
 80239da:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 80239dc:	fb0a 3304 	mla	r3, sl, r4, r3
 80239e0:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80239e4:	2b00      	cmp	r3, #0
 80239e6:	f000 80e8 	beq.w	8023bba <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 80239ea:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 80239ee:	d01b      	beq.n	8023a28 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x190>
 80239f0:	f002 1bff 	and.w	fp, r2, #16711935	@ 0xff00ff
 80239f4:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 80239f8:	fb0e fb0b 	mul.w	fp, lr, fp
 80239fc:	fb0e fe02 	mul.w	lr, lr, r2
 8023a00:	ea4f 221b 	mov.w	r2, fp, lsr #8
 8023a04:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 8023a08:	f50e 7c80 	add.w	ip, lr, #256	@ 0x100
 8023a0c:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
 8023a10:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 8023a14:	445a      	add	r2, fp
 8023a16:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8023a1a:	0a12      	lsrs	r2, r2, #8
 8023a1c:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 8023a20:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
 8023a24:	ea42 020c 	orr.w	r2, r2, ip
 8023a28:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 8023a2a:	2cff      	cmp	r4, #255	@ 0xff
 8023a2c:	d021      	beq.n	8023a72 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1da>
 8023a2e:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8023a30:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 8023a34:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 8023a36:	fb04 fc0c 	mul.w	ip, r4, ip
 8023a3a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8023a3c:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 8023a40:	f404 4b7f 	and.w	fp, r4, #65280	@ 0xff00
 8023a44:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 8023a46:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 8023a4a:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8023a4e:	fb04 fb0b 	mul.w	fp, r4, fp
 8023a52:	44e6      	add	lr, ip
 8023a54:	f50b 7c80 	add.w	ip, fp, #256	@ 0x100
 8023a58:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8023a5c:	eb0c 2b1b 	add.w	fp, ip, fp, lsr #8
 8023a60:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8023a64:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 8023a68:	f40b 4b7f 	and.w	fp, fp, #65280	@ 0xff00
 8023a6c:	ea4e 040b 	orr.w	r4, lr, fp
 8023a70:	940a      	str	r4, [sp, #40]	@ 0x28
 8023a72:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 8023a74:	2cff      	cmp	r4, #255	@ 0xff
 8023a76:	d021      	beq.n	8023abc <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x224>
 8023a78:	9c07      	ldr	r4, [sp, #28]
 8023a7a:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 8023a7e:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 8023a80:	fb04 fc0c 	mul.w	ip, r4, ip
 8023a84:	9c07      	ldr	r4, [sp, #28]
 8023a86:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 8023a8a:	f404 4b7f 	and.w	fp, r4, #65280	@ 0xff00
 8023a8e:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 8023a90:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 8023a94:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8023a98:	fb04 fb0b 	mul.w	fp, r4, fp
 8023a9c:	44e6      	add	lr, ip
 8023a9e:	f50b 7c80 	add.w	ip, fp, #256	@ 0x100
 8023aa2:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8023aa6:	eb0c 2b1b 	add.w	fp, ip, fp, lsr #8
 8023aaa:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8023aae:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 8023ab2:	f40b 4b7f 	and.w	fp, fp, #65280	@ 0xff00
 8023ab6:	ea4e 040b 	orr.w	r4, lr, fp
 8023aba:	9407      	str	r4, [sp, #28]
 8023abc:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 8023abe:	2cff      	cmp	r4, #255	@ 0xff
 8023ac0:	d021      	beq.n	8023b06 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26e>
 8023ac2:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8023ac4:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 8023ac8:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 8023aca:	fb04 fc0c 	mul.w	ip, r4, ip
 8023ace:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8023ad0:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 8023ad4:	f404 4b7f 	and.w	fp, r4, #65280	@ 0xff00
 8023ad8:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 8023ada:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 8023ade:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8023ae2:	fb04 fb0b 	mul.w	fp, r4, fp
 8023ae6:	44e6      	add	lr, ip
 8023ae8:	f50b 7c80 	add.w	ip, fp, #256	@ 0x100
 8023aec:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8023af0:	eb0c 2b1b 	add.w	fp, ip, fp, lsr #8
 8023af4:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8023af8:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 8023afc:	f40b 4b7f 	and.w	fp, fp, #65280	@ 0xff00
 8023b00:	ea4e 040b 	orr.w	r4, lr, fp
 8023b04:	940b      	str	r4, [sp, #44]	@ 0x2c
 8023b06:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8023b08:	f002 1eff 	and.w	lr, r2, #16711935	@ 0xff00ff
 8023b0c:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 8023b10:	2bff      	cmp	r3, #255	@ 0xff
 8023b12:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 8023b16:	9c07      	ldr	r4, [sp, #28]
 8023b18:	fb09 fc0c 	mul.w	ip, r9, ip
 8023b1c:	fb01 cc0e 	mla	ip, r1, lr, ip
 8023b20:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 8023b24:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8023b26:	fb00 cc0e 	mla	ip, r0, lr, ip
 8023b2a:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 8023b2e:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8023b30:	fb0a cc0e 	mla	ip, sl, lr, ip
 8023b34:	f404 4e7f 	and.w	lr, r4, #65280	@ 0xff00
 8023b38:	fb09 f90e 	mul.w	r9, r9, lr
 8023b3c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8023b40:	fb01 9202 	mla	r2, r1, r2, r9
 8023b44:	9907      	ldr	r1, [sp, #28]
 8023b46:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8023b4a:	f401 4b7f 	and.w	fp, r1, #65280	@ 0xff00
 8023b4e:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8023b50:	fb00 220b 	mla	r2, r0, fp, r2
 8023b54:	f401 407f 	and.w	r0, r1, #65280	@ 0xff00
 8023b58:	fb0a 2a00 	mla	sl, sl, r0, r2
 8023b5c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8023b60:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8023b64:	ea4c 0c0a 	orr.w	ip, ip, sl
 8023b68:	fa5f f08c 	uxtb.w	r0, ip
 8023b6c:	f3cc 2107 	ubfx	r1, ip, #8, #8
 8023b70:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8023b74:	f000 80a2 	beq.w	8023cbc <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x424>
 8023b78:	43db      	mvns	r3, r3
 8023b7a:	783a      	ldrb	r2, [r7, #0]
 8023b7c:	f897 a002 	ldrb.w	sl, [r7, #2]
 8023b80:	b2db      	uxtb	r3, r3
 8023b82:	fb02 fe03 	mul.w	lr, r2, r3
 8023b86:	fb0a fa03 	mul.w	sl, sl, r3
 8023b8a:	f10e 0201 	add.w	r2, lr, #1
 8023b8e:	eb02 221e 	add.w	r2, r2, lr, lsr #8
 8023b92:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 8023b96:	703a      	strb	r2, [r7, #0]
 8023b98:	787a      	ldrb	r2, [r7, #1]
 8023b9a:	fb02 f003 	mul.w	r0, r2, r3
 8023b9e:	f10a 0301 	add.w	r3, sl, #1
 8023ba2:	1c42      	adds	r2, r0, #1
 8023ba4:	eb03 231a 	add.w	r3, r3, sl, lsr #8
 8023ba8:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 8023bac:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 8023bb0:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8023bb4:	707a      	strb	r2, [r7, #1]
 8023bb6:	f887 c002 	strb.w	ip, [r7, #2]
 8023bba:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 8023bbc:	3703      	adds	r7, #3
 8023bbe:	f108 38ff 	add.w	r8, r8, #4294967295
 8023bc2:	441d      	add	r5, r3
 8023bc4:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8023bc6:	441e      	add	r6, r3
 8023bc8:	e6ab      	b.n	8023922 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 8023bca:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 8023bcc:	441d      	add	r5, r3
 8023bce:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8023bd0:	441e      	add	r6, r3
 8023bd2:	9b06      	ldr	r3, [sp, #24]
 8023bd4:	3b01      	subs	r3, #1
 8023bd6:	9306      	str	r3, [sp, #24]
 8023bd8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8023bda:	3303      	adds	r3, #3
 8023bdc:	9309      	str	r3, [sp, #36]	@ 0x24
 8023bde:	e680      	b.n	80238e2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 8023be0:	d024      	beq.n	8023c2c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x394>
 8023be2:	9b06      	ldr	r3, [sp, #24]
 8023be4:	9825      	ldr	r0, [sp, #148]	@ 0x94
 8023be6:	3b01      	subs	r3, #1
 8023be8:	fb00 5003 	mla	r0, r0, r3, r5
 8023bec:	1400      	asrs	r0, r0, #16
 8023bee:	f53f ae95 	bmi.w	802391c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 8023bf2:	3901      	subs	r1, #1
 8023bf4:	4288      	cmp	r0, r1
 8023bf6:	f6bf ae91 	bge.w	802391c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 8023bfa:	9926      	ldr	r1, [sp, #152]	@ 0x98
 8023bfc:	fb01 6303 	mla	r3, r1, r3, r6
 8023c00:	141b      	asrs	r3, r3, #16
 8023c02:	f53f ae8b 	bmi.w	802391c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 8023c06:	3a01      	subs	r2, #1
 8023c08:	4293      	cmp	r3, r2
 8023c0a:	f6bf ae87 	bge.w	802391c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 8023c0e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8023c10:	f8dd b018 	ldr.w	fp, [sp, #24]
 8023c14:	1cdf      	adds	r7, r3, #3
 8023c16:	f1bb 0f00 	cmp.w	fp, #0
 8023c1a:	dc6e      	bgt.n	8023cfa <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x462>
 8023c1c:	9b06      	ldr	r3, [sp, #24]
 8023c1e:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8023c22:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8023c24:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8023c28:	4423      	add	r3, r4
 8023c2a:	9309      	str	r3, [sp, #36]	@ 0x24
 8023c2c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8023c2e:	2b00      	cmp	r3, #0
 8023c30:	f340 81b0 	ble.w	8023f94 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6fc>
 8023c34:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8023c38:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8023c3a:	ee30 0a04 	vadd.f32	s0, s0, s8
 8023c3e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8023c42:	eef0 6a62 	vmov.f32	s13, s5
 8023c46:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8023c4a:	ee31 1a05 	vadd.f32	s2, s2, s10
 8023c4e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8023c52:	ee16 5a90 	vmov	r5, s13
 8023c56:	eef0 6a43 	vmov.f32	s13, s6
 8023c5a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8023c5e:	ee16 6a90 	vmov	r6, s13
 8023c62:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8023c66:	ee61 7a27 	vmul.f32	s15, s2, s15
 8023c6a:	ee77 2a62 	vsub.f32	s5, s14, s5
 8023c6e:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8023c72:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8023c76:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8023c7a:	ee12 2a90 	vmov	r2, s5
 8023c7e:	eef0 2a47 	vmov.f32	s5, s14
 8023c82:	fb92 f3f3 	sdiv	r3, r2, r3
 8023c86:	ee13 2a10 	vmov	r2, s6
 8023c8a:	9325      	str	r3, [sp, #148]	@ 0x94
 8023c8c:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8023c8e:	eeb0 3a67 	vmov.f32	s6, s15
 8023c92:	fb92 f3f3 	sdiv	r3, r2, r3
 8023c96:	9326      	str	r3, [sp, #152]	@ 0x98
 8023c98:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8023c9a:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8023c9c:	3b01      	subs	r3, #1
 8023c9e:	9315      	str	r3, [sp, #84]	@ 0x54
 8023ca0:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8023ca2:	bf08      	it	eq
 8023ca4:	4613      	moveq	r3, r2
 8023ca6:	9306      	str	r3, [sp, #24]
 8023ca8:	e60d      	b.n	80238c6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 8023caa:	2800      	cmp	r0, #0
 8023cac:	f43f ae7d 	beq.w	80239aa <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x112>
 8023cb0:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8023cb4:	9307      	str	r3, [sp, #28]
 8023cb6:	0e1b      	lsrs	r3, r3, #24
 8023cb8:	930f      	str	r3, [sp, #60]	@ 0x3c
 8023cba:	e676      	b.n	80239aa <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x112>
 8023cbc:	7038      	strb	r0, [r7, #0]
 8023cbe:	7079      	strb	r1, [r7, #1]
 8023cc0:	e779      	b.n	8023bb6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31e>
 8023cc2:	f112 0901 	adds.w	r9, r2, #1
 8023cc6:	f53f af78 	bmi.w	8023bba <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 8023cca:	454b      	cmp	r3, r9
 8023ccc:	f6ff af75 	blt.w	8023bba <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 8023cd0:	f11c 0901 	adds.w	r9, ip, #1
 8023cd4:	f53f af71 	bmi.w	8023bba <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 8023cd8:	45ce      	cmp	lr, r9
 8023cda:	f6ff af6e 	blt.w	8023bba <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 8023cde:	b21b      	sxth	r3, r3
 8023ce0:	e9cd 2c01 	strd	r2, ip, [sp, #4]
 8023ce4:	fa0f f28e 	sxth.w	r2, lr
 8023ce8:	e9cd 1003 	strd	r1, r0, [sp, #12]
 8023cec:	9200      	str	r2, [sp, #0]
 8023cee:	4639      	mov	r1, r7
 8023cf0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8023cf2:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 8023cf4:	f7ff fca1 	bl	802363a <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh>
 8023cf8:	e75f      	b.n	8023bba <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 8023cfa:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 8023cfc:	1429      	asrs	r1, r5, #16
 8023cfe:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 8023d00:	f3c5 3203 	ubfx	r2, r5, #12, #4
 8023d04:	f9b3 c008 	ldrsh.w	ip, [r3, #8]
 8023d08:	1433      	asrs	r3, r6, #16
 8023d0a:	f3c6 3003 	ubfx	r0, r6, #12, #4
 8023d0e:	fb0c 1303 	mla	r3, ip, r3, r1
 8023d12:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8023d14:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8023d18:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8023d1c:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 8023d20:	2a00      	cmp	r2, #0
 8023d22:	f000 8129 	beq.w	8023f78 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e0>
 8023d26:	684c      	ldr	r4, [r1, #4]
 8023d28:	940c      	str	r4, [sp, #48]	@ 0x30
 8023d2a:	0e24      	lsrs	r4, r4, #24
 8023d2c:	9413      	str	r4, [sp, #76]	@ 0x4c
 8023d2e:	b198      	cbz	r0, 8023d58 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c0>
 8023d30:	f10c 4c80 	add.w	ip, ip, #1073741824	@ 0x40000000
 8023d34:	f10c 3cff 	add.w	ip, ip, #4294967295
 8023d38:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8023d3c:	f10c 0c04 	add.w	ip, ip, #4
 8023d40:	eb01 080c 	add.w	r8, r1, ip
 8023d44:	f851 100c 	ldr.w	r1, [r1, ip]
 8023d48:	9108      	str	r1, [sp, #32]
 8023d4a:	0e09      	lsrs	r1, r1, #24
 8023d4c:	9110      	str	r1, [sp, #64]	@ 0x40
 8023d4e:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8023d52:	910d      	str	r1, [sp, #52]	@ 0x34
 8023d54:	0e09      	lsrs	r1, r1, #24
 8023d56:	9114      	str	r1, [sp, #80]	@ 0x50
 8023d58:	b292      	uxth	r2, r2
 8023d5a:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 8023d5c:	b280      	uxth	r0, r0
 8023d5e:	fb02 f900 	mul.w	r9, r2, r0
 8023d62:	0112      	lsls	r2, r2, #4
 8023d64:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 8023d68:	eba2 0809 	sub.w	r8, r2, r9
 8023d6c:	f5c2 7180 	rsb	r1, r2, #256	@ 0x100
 8023d70:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8023d72:	b280      	uxth	r0, r0
 8023d74:	fa1f f888 	uxth.w	r8, r8
 8023d78:	1a09      	subs	r1, r1, r0
 8023d7a:	fb08 f202 	mul.w	r2, r8, r2
 8023d7e:	b289      	uxth	r1, r1
 8023d80:	fb01 220e 	mla	r2, r1, lr, r2
 8023d84:	fb00 2204 	mla	r2, r0, r4, r2
 8023d88:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 8023d8a:	fb09 2204 	mla	r2, r9, r4, r2
 8023d8e:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8023d92:	2a00      	cmp	r2, #0
 8023d94:	f000 80e8 	beq.w	8023f68 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6d0>
 8023d98:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 8023d9c:	d01b      	beq.n	8023dd6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x53e>
 8023d9e:	f003 1aff 	and.w	sl, r3, #16711935	@ 0xff00ff
 8023da2:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8023da6:	fb0e fa0a 	mul.w	sl, lr, sl
 8023daa:	fb0e fe03 	mul.w	lr, lr, r3
 8023dae:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8023db2:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 8023db6:	f50e 7c80 	add.w	ip, lr, #256	@ 0x100
 8023dba:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 8023dbe:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 8023dc2:	4453      	add	r3, sl
 8023dc4:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8023dc8:	0a1b      	lsrs	r3, r3, #8
 8023dca:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 8023dce:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 8023dd2:	ea43 030c 	orr.w	r3, r3, ip
 8023dd6:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8023dd8:	2cff      	cmp	r4, #255	@ 0xff
 8023dda:	d021      	beq.n	8023e20 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x588>
 8023ddc:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8023dde:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 8023de2:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8023de4:	fb04 fc0c 	mul.w	ip, r4, ip
 8023de8:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8023dea:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 8023dee:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 8023df2:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8023df4:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 8023df8:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8023dfc:	fb04 fa0a 	mul.w	sl, r4, sl
 8023e00:	44e6      	add	lr, ip
 8023e02:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 8023e06:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8023e0a:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8023e0e:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8023e12:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8023e16:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8023e1a:	ea4e 040a 	orr.w	r4, lr, sl
 8023e1e:	940c      	str	r4, [sp, #48]	@ 0x30
 8023e20:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 8023e22:	2cff      	cmp	r4, #255	@ 0xff
 8023e24:	d021      	beq.n	8023e6a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5d2>
 8023e26:	9c08      	ldr	r4, [sp, #32]
 8023e28:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 8023e2c:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 8023e2e:	fb04 fc0c 	mul.w	ip, r4, ip
 8023e32:	9c08      	ldr	r4, [sp, #32]
 8023e34:	f404 4e7f 	and.w	lr, r4, #65280	@ 0xff00
 8023e38:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 8023e3a:	fb04 fa0e 	mul.w	sl, r4, lr
 8023e3e:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 8023e42:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 8023e46:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8023e4a:	44e6      	add	lr, ip
 8023e4c:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 8023e50:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8023e54:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8023e58:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8023e5c:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8023e60:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8023e64:	ea4e 040a 	orr.w	r4, lr, sl
 8023e68:	9408      	str	r4, [sp, #32]
 8023e6a:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 8023e6c:	2cff      	cmp	r4, #255	@ 0xff
 8023e6e:	d021      	beq.n	8023eb4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x61c>
 8023e70:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 8023e72:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 8023e76:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 8023e78:	fb04 fc0c 	mul.w	ip, r4, ip
 8023e7c:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 8023e7e:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 8023e82:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 8023e86:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 8023e88:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 8023e8c:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8023e90:	fb04 fa0a 	mul.w	sl, r4, sl
 8023e94:	44e6      	add	lr, ip
 8023e96:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 8023e9a:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8023e9e:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8023ea2:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8023ea6:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8023eaa:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8023eae:	ea4e 040a 	orr.w	r4, lr, sl
 8023eb2:	940d      	str	r4, [sp, #52]	@ 0x34
 8023eb4:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8023eb6:	f003 1eff 	and.w	lr, r3, #16711935	@ 0xff00ff
 8023eba:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8023ebe:	2aff      	cmp	r2, #255	@ 0xff
 8023ec0:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 8023ec4:	9c08      	ldr	r4, [sp, #32]
 8023ec6:	fb08 fc0c 	mul.w	ip, r8, ip
 8023eca:	fb01 cc0e 	mla	ip, r1, lr, ip
 8023ece:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 8023ed2:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 8023ed4:	fb00 cc0e 	mla	ip, r0, lr, ip
 8023ed8:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 8023edc:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8023ede:	fb09 cc0e 	mla	ip, r9, lr, ip
 8023ee2:	f404 4e7f 	and.w	lr, r4, #65280	@ 0xff00
 8023ee6:	fb08 f80e 	mul.w	r8, r8, lr
 8023eea:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8023eee:	fb01 8303 	mla	r3, r1, r3, r8
 8023ef2:	9908      	ldr	r1, [sp, #32]
 8023ef4:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8023ef8:	f401 4a7f 	and.w	sl, r1, #65280	@ 0xff00
 8023efc:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8023efe:	fb00 330a 	mla	r3, r0, sl, r3
 8023f02:	f401 4e7f 	and.w	lr, r1, #65280	@ 0xff00
 8023f06:	fb09 3e0e 	mla	lr, r9, lr, r3
 8023f0a:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8023f0e:	f40e 4e7f 	and.w	lr, lr, #65280	@ 0xff00
 8023f12:	ea4c 0c0e 	orr.w	ip, ip, lr
 8023f16:	fa5f f08c 	uxtb.w	r0, ip
 8023f1a:	f3cc 2107 	ubfx	r1, ip, #8, #8
 8023f1e:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8023f22:	d032      	beq.n	8023f8a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6f2>
 8023f24:	43d2      	mvns	r2, r2
 8023f26:	f817 ec03 	ldrb.w	lr, [r7, #-3]
 8023f2a:	b2d2      	uxtb	r2, r2
 8023f2c:	fb0e fe02 	mul.w	lr, lr, r2
 8023f30:	f10e 0301 	add.w	r3, lr, #1
 8023f34:	eb03 231e 	add.w	r3, r3, lr, lsr #8
 8023f38:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 8023f3c:	f817 0c02 	ldrb.w	r0, [r7, #-2]
 8023f40:	4350      	muls	r0, r2
 8023f42:	f807 3c03 	strb.w	r3, [r7, #-3]
 8023f46:	1c43      	adds	r3, r0, #1
 8023f48:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 8023f4c:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 8023f50:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8023f54:	4353      	muls	r3, r2
 8023f56:	f807 1c02 	strb.w	r1, [r7, #-2]
 8023f5a:	1c5a      	adds	r2, r3, #1
 8023f5c:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8023f60:	eb0c 2c12 	add.w	ip, ip, r2, lsr #8
 8023f64:	f807 cc01 	strb.w	ip, [r7, #-1]
 8023f68:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 8023f6a:	3703      	adds	r7, #3
 8023f6c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8023f70:	441d      	add	r5, r3
 8023f72:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8023f74:	441e      	add	r6, r3
 8023f76:	e64e      	b.n	8023c16 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37e>
 8023f78:	2800      	cmp	r0, #0
 8023f7a:	f43f aeed 	beq.w	8023d58 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c0>
 8023f7e:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 8023f82:	9108      	str	r1, [sp, #32]
 8023f84:	0e09      	lsrs	r1, r1, #24
 8023f86:	9110      	str	r1, [sp, #64]	@ 0x40
 8023f88:	e6e6      	b.n	8023d58 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c0>
 8023f8a:	f807 0c03 	strb.w	r0, [r7, #-3]
 8023f8e:	f807 1c02 	strb.w	r1, [r7, #-2]
 8023f92:	e7e7      	b.n	8023f64 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6cc>
 8023f94:	b019      	add	sp, #100	@ 0x64
 8023f96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08023f9c <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh>:
 8023f9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023fa0:	e9dd 400b 	ldrd	r4, r0, [sp, #44]	@ 0x2c
 8023fa4:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	@ 0x24
 8023fa8:	2c00      	cmp	r4, #0
 8023faa:	f9bd 8028 	ldrsh.w	r8, [sp, #40]	@ 0x28
 8023fae:	f89d 7034 	ldrb.w	r7, [sp, #52]	@ 0x34
 8023fb2:	fb00 4e03 	mla	lr, r0, r3, r4
 8023fb6:	f89d c038 	ldrb.w	ip, [sp, #56]	@ 0x38
 8023fba:	f2c0 80b8 	blt.w	802412e <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x192>
 8023fbe:	45a1      	cmp	r9, r4
 8023fc0:	f340 80b5 	ble.w	802412e <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x192>
 8023fc4:	2800      	cmp	r0, #0
 8023fc6:	f2c0 80b2 	blt.w	802412e <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x192>
 8023fca:	4580      	cmp	r8, r0
 8023fcc:	f340 80af 	ble.w	802412e <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x192>
 8023fd0:	ea4f 055e 	mov.w	r5, lr, lsr #1
 8023fd4:	f01e 0f01 	tst.w	lr, #1
 8023fd8:	5d56      	ldrb	r6, [r2, r5]
 8023fda:	bf0c      	ite	eq
 8023fdc:	f006 060f 	andeq.w	r6, r6, #15
 8023fe0:	1136      	asrne	r6, r6, #4
 8023fe2:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 8023fe6:	b2f6      	uxtb	r6, r6
 8023fe8:	f114 0a01 	adds.w	sl, r4, #1
 8023fec:	f100 80a1 	bmi.w	8024132 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x196>
 8023ff0:	45d1      	cmp	r9, sl
 8023ff2:	f340 809e 	ble.w	8024132 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x196>
 8023ff6:	2800      	cmp	r0, #0
 8023ff8:	f2c0 809b 	blt.w	8024132 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x196>
 8023ffc:	4580      	cmp	r8, r0
 8023ffe:	f340 8098 	ble.w	8024132 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x196>
 8024002:	2f00      	cmp	r7, #0
 8024004:	f000 8097 	beq.w	8024136 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x19a>
 8024008:	f10e 0b01 	add.w	fp, lr, #1
 802400c:	ea4f 055b 	mov.w	r5, fp, lsr #1
 8024010:	f01b 0f01 	tst.w	fp, #1
 8024014:	5d55      	ldrb	r5, [r2, r5]
 8024016:	bf0c      	ite	eq
 8024018:	f005 050f 	andeq.w	r5, r5, #15
 802401c:	112d      	asrne	r5, r5, #4
 802401e:	eb05 1505 	add.w	r5, r5, r5, lsl #4
 8024022:	b2ed      	uxtb	r5, r5
 8024024:	f1bc 0f00 	cmp.w	ip, #0
 8024028:	f000 8089 	beq.w	802413e <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1a2>
 802402c:	2c00      	cmp	r4, #0
 802402e:	f100 0001 	add.w	r0, r0, #1
 8024032:	f2c0 8082 	blt.w	802413a <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x19e>
 8024036:	45a1      	cmp	r9, r4
 8024038:	dd7f      	ble.n	802413a <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x19e>
 802403a:	2800      	cmp	r0, #0
 802403c:	db7d      	blt.n	802413a <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x19e>
 802403e:	4580      	cmp	r8, r0
 8024040:	dd7b      	ble.n	802413a <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x19e>
 8024042:	eb03 0b0e 	add.w	fp, r3, lr
 8024046:	ea4f 045b 	mov.w	r4, fp, lsr #1
 802404a:	f01b 0f01 	tst.w	fp, #1
 802404e:	5d14      	ldrb	r4, [r2, r4]
 8024050:	bf0c      	ite	eq
 8024052:	f004 040f 	andeq.w	r4, r4, #15
 8024056:	1124      	asrne	r4, r4, #4
 8024058:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 802405c:	b2e4      	uxtb	r4, r4
 802405e:	f1ba 0f00 	cmp.w	sl, #0
 8024062:	db6f      	blt.n	8024144 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1a8>
 8024064:	45d1      	cmp	r9, sl
 8024066:	dd6d      	ble.n	8024144 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1a8>
 8024068:	2800      	cmp	r0, #0
 802406a:	db6b      	blt.n	8024144 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1a8>
 802406c:	4580      	cmp	r8, r0
 802406e:	dd69      	ble.n	8024144 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1a8>
 8024070:	2f00      	cmp	r7, #0
 8024072:	d069      	beq.n	8024148 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1ac>
 8024074:	3301      	adds	r3, #1
 8024076:	449e      	add	lr, r3
 8024078:	ea4f 035e 	mov.w	r3, lr, lsr #1
 802407c:	f01e 0f01 	tst.w	lr, #1
 8024080:	5cd0      	ldrb	r0, [r2, r3]
 8024082:	bf0c      	ite	eq
 8024084:	f000 000f 	andeq.w	r0, r0, #15
 8024088:	1100      	asrne	r0, r0, #4
 802408a:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 802408e:	b2c3      	uxtb	r3, r0
 8024090:	b2ba      	uxth	r2, r7
 8024092:	fa1f fc8c 	uxth.w	ip, ip
 8024096:	fb02 f00c 	mul.w	r0, r2, ip
 802409a:	0112      	lsls	r2, r2, #4
 802409c:	ebc0 1c0c 	rsb	ip, r0, ip, lsl #4
 80240a0:	f5c2 7780 	rsb	r7, r2, #256	@ 0x100
 80240a4:	1a12      	subs	r2, r2, r0
 80240a6:	fa1f fc8c 	uxth.w	ip, ip
 80240aa:	b292      	uxth	r2, r2
 80240ac:	eba7 070c 	sub.w	r7, r7, ip
 80240b0:	436a      	muls	r2, r5
 80240b2:	b2bf      	uxth	r7, r7
 80240b4:	fb06 2207 	mla	r2, r6, r7, r2
 80240b8:	fb0c 2404 	mla	r4, ip, r4, r2
 80240bc:	fb00 4303 	mla	r3, r0, r3, r4
 80240c0:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80240c4:	b38b      	cbz	r3, 802412a <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x18e>
 80240c6:	4a21      	ldr	r2, [pc, #132]	@ (802414c <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1b0>)
 80240c8:	6814      	ldr	r4, [r2, #0]
 80240ca:	f89d 203c 	ldrb.w	r2, [sp, #60]	@ 0x3c
 80240ce:	b2e5      	uxtb	r5, r4
 80240d0:	4353      	muls	r3, r2
 80240d2:	1c5a      	adds	r2, r3, #1
 80240d4:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 80240d8:	1212      	asrs	r2, r2, #8
 80240da:	b290      	uxth	r0, r2
 80240dc:	43d2      	mvns	r2, r2
 80240de:	fb15 f500 	smulbb	r5, r5, r0
 80240e2:	b2d3      	uxtb	r3, r2
 80240e4:	780a      	ldrb	r2, [r1, #0]
 80240e6:	fb02 5203 	mla	r2, r2, r3, r5
 80240ea:	b292      	uxth	r2, r2
 80240ec:	1c55      	adds	r5, r2, #1
 80240ee:	eb05 2212 	add.w	r2, r5, r2, lsr #8
 80240f2:	784d      	ldrb	r5, [r1, #1]
 80240f4:	fb15 f503 	smulbb	r5, r5, r3
 80240f8:	1212      	asrs	r2, r2, #8
 80240fa:	700a      	strb	r2, [r1, #0]
 80240fc:	f3c4 2207 	ubfx	r2, r4, #8, #8
 8024100:	f3c4 4407 	ubfx	r4, r4, #16, #8
 8024104:	fb02 5200 	mla	r2, r2, r0, r5
 8024108:	b292      	uxth	r2, r2
 802410a:	1c55      	adds	r5, r2, #1
 802410c:	eb05 2212 	add.w	r2, r5, r2, lsr #8
 8024110:	1212      	asrs	r2, r2, #8
 8024112:	704a      	strb	r2, [r1, #1]
 8024114:	788a      	ldrb	r2, [r1, #2]
 8024116:	fb12 f303 	smulbb	r3, r2, r3
 802411a:	fb04 3300 	mla	r3, r4, r0, r3
 802411e:	b29b      	uxth	r3, r3
 8024120:	1c5a      	adds	r2, r3, #1
 8024122:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8024126:	121b      	asrs	r3, r3, #8
 8024128:	708b      	strb	r3, [r1, #2]
 802412a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802412e:	2600      	movs	r6, #0
 8024130:	e75a      	b.n	8023fe8 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x4c>
 8024132:	2500      	movs	r5, #0
 8024134:	e776      	b.n	8024024 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x88>
 8024136:	463d      	mov	r5, r7
 8024138:	e774      	b.n	8024024 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x88>
 802413a:	2400      	movs	r4, #0
 802413c:	e78f      	b.n	802405e <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xc2>
 802413e:	4663      	mov	r3, ip
 8024140:	4664      	mov	r4, ip
 8024142:	e7a5      	b.n	8024090 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf4>
 8024144:	2300      	movs	r3, #0
 8024146:	e7a3      	b.n	8024090 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf4>
 8024148:	463b      	mov	r3, r7
 802414a:	e7a1      	b.n	8024090 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf4>
 802414c:	24028e30 	.word	0x24028e30

08024150 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8024150:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024154:	b097      	sub	sp, #92	@ 0x5c
 8024156:	9214      	str	r2, [sp, #80]	@ 0x50
 8024158:	9309      	str	r3, [sp, #36]	@ 0x24
 802415a:	9a25      	ldr	r2, [sp, #148]	@ 0x94
 802415c:	f89d 30a4 	ldrb.w	r3, [sp, #164]	@ 0xa4
 8024160:	9015      	str	r0, [sp, #84]	@ 0x54
 8024162:	910c      	str	r1, [sp, #48]	@ 0x30
 8024164:	6850      	ldr	r0, [r2, #4]
 8024166:	930e      	str	r3, [sp, #56]	@ 0x38
 8024168:	6812      	ldr	r2, [r2, #0]
 802416a:	e9dd 1326 	ldrd	r1, r3, [sp, #152]	@ 0x98
 802416e:	e9dd 5621 	ldrd	r5, r6, [sp, #132]	@ 0x84
 8024172:	fb00 1303 	mla	r3, r0, r3, r1
 8024176:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 802417a:	eb02 0a03 	add.w	sl, r2, r3
 802417e:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8024180:	689b      	ldr	r3, [r3, #8]
 8024182:	3301      	adds	r3, #1
 8024184:	f023 0301 	bic.w	r3, r3, #1
 8024188:	930f      	str	r3, [sp, #60]	@ 0x3c
 802418a:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 802418c:	681f      	ldr	r7, [r3, #0]
 802418e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8024190:	2b00      	cmp	r3, #0
 8024192:	dc03      	bgt.n	802419c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 8024194:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8024196:	2b00      	cmp	r3, #0
 8024198:	f340 8247 	ble.w	802462a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4da>
 802419c:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 802419e:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80241a2:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80241a6:	1e48      	subs	r0, r1, #1
 80241a8:	f102 3cff 	add.w	ip, r2, #4294967295
 80241ac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80241ae:	2b00      	cmp	r3, #0
 80241b0:	f340 80e5 	ble.w	802437e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22e>
 80241b4:	ea5f 4e25 	movs.w	lr, r5, asr #16
 80241b8:	ea4f 4326 	mov.w	r3, r6, asr #16
 80241bc:	d406      	bmi.n	80241cc <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 80241be:	4586      	cmp	lr, r0
 80241c0:	da04      	bge.n	80241cc <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 80241c2:	2b00      	cmp	r3, #0
 80241c4:	db02      	blt.n	80241cc <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 80241c6:	4563      	cmp	r3, ip
 80241c8:	f2c0 80da 	blt.w	8024380 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x230>
 80241cc:	f11e 0e01 	adds.w	lr, lr, #1
 80241d0:	f100 80cb 	bmi.w	802436a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21a>
 80241d4:	4571      	cmp	r1, lr
 80241d6:	f2c0 80c8 	blt.w	802436a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21a>
 80241da:	3301      	adds	r3, #1
 80241dc:	f100 80c5 	bmi.w	802436a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21a>
 80241e0:	429a      	cmp	r2, r3
 80241e2:	f2c0 80c2 	blt.w	802436a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21a>
 80241e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80241e8:	46d0      	mov	r8, sl
 80241ea:	f9bd 903c 	ldrsh.w	r9, [sp, #60]	@ 0x3c
 80241ee:	930d      	str	r3, [sp, #52]	@ 0x34
 80241f0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80241f2:	2b00      	cmp	r3, #0
 80241f4:	f340 80e3 	ble.w	80243be <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26e>
 80241f8:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 80241fa:	1430      	asrs	r0, r6, #16
 80241fc:	f3c5 3203 	ubfx	r2, r5, #12, #4
 8024200:	f3c6 3103 	ubfx	r1, r6, #12, #4
 8024204:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
 8024208:	142b      	asrs	r3, r5, #16
 802420a:	f100 812e 	bmi.w	802446a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 802420e:	f10c 3bff 	add.w	fp, ip, #4294967295
 8024212:	455b      	cmp	r3, fp
 8024214:	f280 8129 	bge.w	802446a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 8024218:	2800      	cmp	r0, #0
 802421a:	f2c0 8126 	blt.w	802446a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 802421e:	f10e 3bff 	add.w	fp, lr, #4294967295
 8024222:	4558      	cmp	r0, fp
 8024224:	f280 8121 	bge.w	802446a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 8024228:	fb00 3309 	mla	r3, r0, r9, r3
 802422c:	0858      	lsrs	r0, r3, #1
 802422e:	07dc      	lsls	r4, r3, #31
 8024230:	f817 c000 	ldrb.w	ip, [r7, r0]
 8024234:	bf54      	ite	pl
 8024236:	f00c 0c0f 	andpl.w	ip, ip, #15
 802423a:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 802423e:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8024242:	fa5f fc8c 	uxtb.w	ip, ip
 8024246:	2a00      	cmp	r2, #0
 8024248:	f000 80fe 	beq.w	8024448 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f8>
 802424c:	1c58      	adds	r0, r3, #1
 802424e:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 8024252:	07c0      	lsls	r0, r0, #31
 8024254:	f817 e00e 	ldrb.w	lr, [r7, lr]
 8024258:	bf54      	ite	pl
 802425a:	f00e 0e0f 	andpl.w	lr, lr, #15
 802425e:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
 8024262:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
 8024266:	fa5f f08e 	uxtb.w	r0, lr
 802426a:	9010      	str	r0, [sp, #64]	@ 0x40
 802426c:	b1d9      	cbz	r1, 80242a6 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 802426e:	444b      	add	r3, r9
 8024270:	0858      	lsrs	r0, r3, #1
 8024272:	07dc      	lsls	r4, r3, #31
 8024274:	f103 0301 	add.w	r3, r3, #1
 8024278:	5c38      	ldrb	r0, [r7, r0]
 802427a:	bf54      	ite	pl
 802427c:	f000 000f 	andpl.w	r0, r0, #15
 8024280:	1100      	asrmi	r0, r0, #4
 8024282:	07dc      	lsls	r4, r3, #31
 8024284:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8024288:	b2c0      	uxtb	r0, r0
 802428a:	900a      	str	r0, [sp, #40]	@ 0x28
 802428c:	ea4f 0053 	mov.w	r0, r3, lsr #1
 8024290:	f817 e000 	ldrb.w	lr, [r7, r0]
 8024294:	bf54      	ite	pl
 8024296:	f00e 030f 	andpl.w	r3, lr, #15
 802429a:	ea4f 132e 	movmi.w	r3, lr, asr #4
 802429e:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 80242a2:	b2db      	uxtb	r3, r3
 80242a4:	9311      	str	r3, [sp, #68]	@ 0x44
 80242a6:	b292      	uxth	r2, r2
 80242a8:	b289      	uxth	r1, r1
 80242aa:	0113      	lsls	r3, r2, #4
 80242ac:	fb02 f001 	mul.w	r0, r2, r1
 80242b0:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 80242b2:	f5c3 7e80 	rsb	lr, r3, #256	@ 0x100
 80242b6:	ebc0 1101 	rsb	r1, r0, r1, lsl #4
 80242ba:	1a1b      	subs	r3, r3, r0
 80242bc:	b289      	uxth	r1, r1
 80242be:	b29b      	uxth	r3, r3
 80242c0:	ebae 0e01 	sub.w	lr, lr, r1
 80242c4:	4353      	muls	r3, r2
 80242c6:	fa1f fe8e 	uxth.w	lr, lr
 80242ca:	fb0c 320e 	mla	r2, ip, lr, r3
 80242ce:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80242d0:	fb01 2203 	mla	r2, r1, r3, r2
 80242d4:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80242d6:	fb00 2203 	mla	r2, r0, r3, r2
 80242da:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80242de:	2a00      	cmp	r2, #0
 80242e0:	d039      	beq.n	8024356 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 80242e2:	4bc7      	ldr	r3, [pc, #796]	@ (8024600 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>)
 80242e4:	6819      	ldr	r1, [r3, #0]
 80242e6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80242e8:	fa5f fc81 	uxtb.w	ip, r1
 80242ec:	435a      	muls	r2, r3
 80242ee:	1c53      	adds	r3, r2, #1
 80242f0:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 80242f4:	1212      	asrs	r2, r2, #8
 80242f6:	b290      	uxth	r0, r2
 80242f8:	43d2      	mvns	r2, r2
 80242fa:	fb1c fc00 	smulbb	ip, ip, r0
 80242fe:	b2d3      	uxtb	r3, r2
 8024300:	f898 2000 	ldrb.w	r2, [r8]
 8024304:	fb02 c203 	mla	r2, r2, r3, ip
 8024308:	b292      	uxth	r2, r2
 802430a:	f102 0c01 	add.w	ip, r2, #1
 802430e:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 8024312:	f898 c001 	ldrb.w	ip, [r8, #1]
 8024316:	fb1c fc03 	smulbb	ip, ip, r3
 802431a:	1212      	asrs	r2, r2, #8
 802431c:	f888 2000 	strb.w	r2, [r8]
 8024320:	f3c1 2207 	ubfx	r2, r1, #8, #8
 8024324:	f3c1 4107 	ubfx	r1, r1, #16, #8
 8024328:	fb02 c200 	mla	r2, r2, r0, ip
 802432c:	b292      	uxth	r2, r2
 802432e:	f102 0c01 	add.w	ip, r2, #1
 8024332:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 8024336:	1212      	asrs	r2, r2, #8
 8024338:	f888 2001 	strb.w	r2, [r8, #1]
 802433c:	f898 2002 	ldrb.w	r2, [r8, #2]
 8024340:	fb12 f303 	smulbb	r3, r2, r3
 8024344:	fb01 3300 	mla	r3, r1, r0, r3
 8024348:	b29b      	uxth	r3, r3
 802434a:	1c5a      	adds	r2, r3, #1
 802434c:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8024350:	121b      	asrs	r3, r3, #8
 8024352:	f888 3002 	strb.w	r3, [r8, #2]
 8024356:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8024358:	f108 0803 	add.w	r8, r8, #3
 802435c:	441d      	add	r5, r3
 802435e:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8024360:	441e      	add	r6, r3
 8024362:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8024364:	3b01      	subs	r3, #1
 8024366:	930d      	str	r3, [sp, #52]	@ 0x34
 8024368:	e742      	b.n	80241f0 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 802436a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 802436c:	f10a 0a03 	add.w	sl, sl, #3
 8024370:	441d      	add	r5, r3
 8024372:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8024374:	441e      	add	r6, r3
 8024376:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8024378:	3b01      	subs	r3, #1
 802437a:	9309      	str	r3, [sp, #36]	@ 0x24
 802437c:	e716      	b.n	80241ac <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 802437e:	d024      	beq.n	80243ca <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 8024380:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8024382:	9823      	ldr	r0, [sp, #140]	@ 0x8c
 8024384:	3b01      	subs	r3, #1
 8024386:	fb00 5003 	mla	r0, r0, r3, r5
 802438a:	1400      	asrs	r0, r0, #16
 802438c:	f53f af2b 	bmi.w	80241e6 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8024390:	3901      	subs	r1, #1
 8024392:	4288      	cmp	r0, r1
 8024394:	f6bf af27 	bge.w	80241e6 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8024398:	9924      	ldr	r1, [sp, #144]	@ 0x90
 802439a:	fb01 6303 	mla	r3, r1, r3, r6
 802439e:	141b      	asrs	r3, r3, #16
 80243a0:	f53f af21 	bmi.w	80241e6 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 80243a4:	3a01      	subs	r2, #1
 80243a6:	4293      	cmp	r3, r2
 80243a8:	f6bf af1d 	bge.w	80241e6 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 80243ac:	f10a 0e03 	add.w	lr, sl, #3
 80243b0:	f8dd 8024 	ldr.w	r8, [sp, #36]	@ 0x24
 80243b4:	f9bd 903c 	ldrsh.w	r9, [sp, #60]	@ 0x3c
 80243b8:	f1b8 0f00 	cmp.w	r8, #0
 80243bc:	dc76      	bgt.n	80244ac <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35c>
 80243be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80243c0:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 80243c4:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80243c8:	44a2      	add	sl, r4
 80243ca:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80243cc:	2b00      	cmp	r3, #0
 80243ce:	f340 812c 	ble.w	802462a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4da>
 80243d2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80243d6:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80243d8:	ee30 0a04 	vadd.f32	s0, s0, s8
 80243dc:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80243e0:	eef0 6a62 	vmov.f32	s13, s5
 80243e4:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80243e8:	ee31 1a05 	vadd.f32	s2, s2, s10
 80243ec:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80243f0:	ee16 5a90 	vmov	r5, s13
 80243f4:	eef0 6a43 	vmov.f32	s13, s6
 80243f8:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80243fc:	ee16 6a90 	vmov	r6, s13
 8024400:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8024404:	ee61 7a27 	vmul.f32	s15, s2, s15
 8024408:	ee77 2a62 	vsub.f32	s5, s14, s5
 802440c:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8024410:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8024414:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8024418:	ee12 2a90 	vmov	r2, s5
 802441c:	eef0 2a47 	vmov.f32	s5, s14
 8024420:	fb92 f3f3 	sdiv	r3, r2, r3
 8024424:	ee13 2a10 	vmov	r2, s6
 8024428:	9323      	str	r3, [sp, #140]	@ 0x8c
 802442a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 802442c:	eeb0 3a67 	vmov.f32	s6, s15
 8024430:	fb92 f3f3 	sdiv	r3, r2, r3
 8024434:	9324      	str	r3, [sp, #144]	@ 0x90
 8024436:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8024438:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 802443a:	3b01      	subs	r3, #1
 802443c:	930c      	str	r3, [sp, #48]	@ 0x30
 802443e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8024440:	bf08      	it	eq
 8024442:	4613      	moveq	r3, r2
 8024444:	9309      	str	r3, [sp, #36]	@ 0x24
 8024446:	e6a2      	b.n	802418e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 8024448:	2900      	cmp	r1, #0
 802444a:	f43f af2c 	beq.w	80242a6 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 802444e:	eb09 0003 	add.w	r0, r9, r3
 8024452:	0843      	lsrs	r3, r0, #1
 8024454:	07c0      	lsls	r0, r0, #31
 8024456:	5cfb      	ldrb	r3, [r7, r3]
 8024458:	bf54      	ite	pl
 802445a:	f003 030f 	andpl.w	r3, r3, #15
 802445e:	111b      	asrmi	r3, r3, #4
 8024460:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8024464:	b2db      	uxtb	r3, r3
 8024466:	930a      	str	r3, [sp, #40]	@ 0x28
 8024468:	e71d      	b.n	80242a6 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 802446a:	f113 0b01 	adds.w	fp, r3, #1
 802446e:	f53f af72 	bmi.w	8024356 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 8024472:	45dc      	cmp	ip, fp
 8024474:	f6ff af6f 	blt.w	8024356 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 8024478:	f110 0b01 	adds.w	fp, r0, #1
 802447c:	f53f af6b 	bmi.w	8024356 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 8024480:	45de      	cmp	lr, fp
 8024482:	f6ff af68 	blt.w	8024356 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 8024486:	9302      	str	r3, [sp, #8]
 8024488:	fa0f f38e 	sxth.w	r3, lr
 802448c:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 802448e:	9301      	str	r3, [sp, #4]
 8024490:	fa0f f38c 	sxth.w	r3, ip
 8024494:	e9cd 0203 	strd	r0, r2, [sp, #12]
 8024498:	e9cd 1405 	strd	r1, r4, [sp, #20]
 802449c:	9300      	str	r3, [sp, #0]
 802449e:	463a      	mov	r2, r7
 80244a0:	464b      	mov	r3, r9
 80244a2:	4641      	mov	r1, r8
 80244a4:	9815      	ldr	r0, [sp, #84]	@ 0x54
 80244a6:	f7ff fd79 	bl	8023f9c <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh>
 80244aa:	e754      	b.n	8024356 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 80244ac:	142a      	asrs	r2, r5, #16
 80244ae:	f3c5 3103 	ubfx	r1, r5, #12, #4
 80244b2:	1433      	asrs	r3, r6, #16
 80244b4:	f3c6 3003 	ubfx	r0, r6, #12, #4
 80244b8:	fb09 2303 	mla	r3, r9, r3, r2
 80244bc:	085a      	lsrs	r2, r3, #1
 80244be:	07dc      	lsls	r4, r3, #31
 80244c0:	5cba      	ldrb	r2, [r7, r2]
 80244c2:	bf54      	ite	pl
 80244c4:	f002 020f 	andpl.w	r2, r2, #15
 80244c8:	1112      	asrmi	r2, r2, #4
 80244ca:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 80244ce:	b2d2      	uxtb	r2, r2
 80244d0:	2900      	cmp	r1, #0
 80244d2:	f000 8097 	beq.w	8024604 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b4>
 80244d6:	f103 0b01 	add.w	fp, r3, #1
 80244da:	ea4f 0c5b 	mov.w	ip, fp, lsr #1
 80244de:	f01b 0f01 	tst.w	fp, #1
 80244e2:	f817 c00c 	ldrb.w	ip, [r7, ip]
 80244e6:	bf0c      	ite	eq
 80244e8:	f00c 0c0f 	andeq.w	ip, ip, #15
 80244ec:	ea4f 1c2c 	movne.w	ip, ip, asr #4
 80244f0:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 80244f4:	fa5f f48c 	uxtb.w	r4, ip
 80244f8:	9412      	str	r4, [sp, #72]	@ 0x48
 80244fa:	b300      	cbz	r0, 802453e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ee>
 80244fc:	444b      	add	r3, r9
 80244fe:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8024502:	07dc      	lsls	r4, r3, #31
 8024504:	f103 0301 	add.w	r3, r3, #1
 8024508:	f817 c00c 	ldrb.w	ip, [r7, ip]
 802450c:	bf54      	ite	pl
 802450e:	f00c 0c0f 	andpl.w	ip, ip, #15
 8024512:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8024516:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 802451a:	fa5f f48c 	uxtb.w	r4, ip
 802451e:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8024522:	940b      	str	r4, [sp, #44]	@ 0x2c
 8024524:	07dc      	lsls	r4, r3, #31
 8024526:	f817 c00c 	ldrb.w	ip, [r7, ip]
 802452a:	bf54      	ite	pl
 802452c:	f00c 0c0f 	andpl.w	ip, ip, #15
 8024530:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8024534:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8024538:	fa5f f38c 	uxtb.w	r3, ip
 802453c:	9313      	str	r3, [sp, #76]	@ 0x4c
 802453e:	b289      	uxth	r1, r1
 8024540:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 8024542:	b280      	uxth	r0, r0
 8024544:	fb01 f300 	mul.w	r3, r1, r0
 8024548:	0109      	lsls	r1, r1, #4
 802454a:	ebc3 1000 	rsb	r0, r3, r0, lsl #4
 802454e:	f5c1 7c80 	rsb	ip, r1, #256	@ 0x100
 8024552:	1ac9      	subs	r1, r1, r3
 8024554:	b280      	uxth	r0, r0
 8024556:	b289      	uxth	r1, r1
 8024558:	ebac 0c00 	sub.w	ip, ip, r0
 802455c:	4361      	muls	r1, r4
 802455e:	fa1f fc8c 	uxth.w	ip, ip
 8024562:	fb02 120c 	mla	r2, r2, ip, r1
 8024566:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8024568:	fb00 2001 	mla	r0, r0, r1, r2
 802456c:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 802456e:	fb03 0302 	mla	r3, r3, r2, r0
 8024572:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8024576:	2b00      	cmp	r3, #0
 8024578:	d039      	beq.n	80245ee <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49e>
 802457a:	4a21      	ldr	r2, [pc, #132]	@ (8024600 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>)
 802457c:	f81e 1c03 	ldrb.w	r1, [lr, #-3]
 8024580:	6810      	ldr	r0, [r2, #0]
 8024582:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8024584:	fa5f fc80 	uxtb.w	ip, r0
 8024588:	4353      	muls	r3, r2
 802458a:	1c5a      	adds	r2, r3, #1
 802458c:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8024590:	121b      	asrs	r3, r3, #8
 8024592:	b29a      	uxth	r2, r3
 8024594:	43db      	mvns	r3, r3
 8024596:	fb1c fc02 	smulbb	ip, ip, r2
 802459a:	b2db      	uxtb	r3, r3
 802459c:	fb01 c103 	mla	r1, r1, r3, ip
 80245a0:	b289      	uxth	r1, r1
 80245a2:	f101 0c01 	add.w	ip, r1, #1
 80245a6:	eb0c 2111 	add.w	r1, ip, r1, lsr #8
 80245aa:	f81e cc02 	ldrb.w	ip, [lr, #-2]
 80245ae:	fb1c fc03 	smulbb	ip, ip, r3
 80245b2:	1209      	asrs	r1, r1, #8
 80245b4:	f80e 1c03 	strb.w	r1, [lr, #-3]
 80245b8:	f3c0 2107 	ubfx	r1, r0, #8, #8
 80245bc:	f3c0 4007 	ubfx	r0, r0, #16, #8
 80245c0:	fb01 c102 	mla	r1, r1, r2, ip
 80245c4:	b289      	uxth	r1, r1
 80245c6:	f101 0c01 	add.w	ip, r1, #1
 80245ca:	eb0c 2111 	add.w	r1, ip, r1, lsr #8
 80245ce:	1209      	asrs	r1, r1, #8
 80245d0:	f80e 1c02 	strb.w	r1, [lr, #-2]
 80245d4:	f81e 1c01 	ldrb.w	r1, [lr, #-1]
 80245d8:	fb11 f303 	smulbb	r3, r1, r3
 80245dc:	fb00 3002 	mla	r0, r0, r2, r3
 80245e0:	b280      	uxth	r0, r0
 80245e2:	1c42      	adds	r2, r0, #1
 80245e4:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 80245e8:	1200      	asrs	r0, r0, #8
 80245ea:	f80e 0c01 	strb.w	r0, [lr, #-1]
 80245ee:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80245f0:	f10e 0e03 	add.w	lr, lr, #3
 80245f4:	f108 38ff 	add.w	r8, r8, #4294967295
 80245f8:	441d      	add	r5, r3
 80245fa:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80245fc:	441e      	add	r6, r3
 80245fe:	e6db      	b.n	80243b8 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x268>
 8024600:	24028e30 	.word	0x24028e30
 8024604:	2800      	cmp	r0, #0
 8024606:	d09a      	beq.n	802453e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ee>
 8024608:	444b      	add	r3, r9
 802460a:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 802460e:	07db      	lsls	r3, r3, #31
 8024610:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8024614:	bf54      	ite	pl
 8024616:	f00c 0c0f 	andpl.w	ip, ip, #15
 802461a:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 802461e:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8024622:	fa5f f38c 	uxtb.w	r3, ip
 8024626:	930b      	str	r3, [sp, #44]	@ 0x2c
 8024628:	e789      	b.n	802453e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ee>
 802462a:	b017      	add	sp, #92	@ 0x5c
 802462c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08024630 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh>:
 8024630:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024634:	e9dd 540b 	ldrd	r5, r4, [sp, #44]	@ 0x2c
 8024638:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	@ 0x24
 802463c:	2d00      	cmp	r5, #0
 802463e:	f9bd 8028 	ldrsh.w	r8, [sp, #40]	@ 0x28
 8024642:	f89d 0034 	ldrb.w	r0, [sp, #52]	@ 0x34
 8024646:	fb04 5e03 	mla	lr, r4, r3, r5
 802464a:	f89d c038 	ldrb.w	ip, [sp, #56]	@ 0x38
 802464e:	f2c0 80b1 	blt.w	80247b4 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x184>
 8024652:	45a9      	cmp	r9, r5
 8024654:	f340 80ae 	ble.w	80247b4 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x184>
 8024658:	2c00      	cmp	r4, #0
 802465a:	f2c0 80ab 	blt.w	80247b4 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x184>
 802465e:	45a0      	cmp	r8, r4
 8024660:	f340 80a8 	ble.w	80247b4 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x184>
 8024664:	ea4f 065e 	mov.w	r6, lr, lsr #1
 8024668:	f01e 0f01 	tst.w	lr, #1
 802466c:	5d97      	ldrb	r7, [r2, r6]
 802466e:	bf0c      	ite	eq
 8024670:	f007 070f 	andeq.w	r7, r7, #15
 8024674:	113f      	asrne	r7, r7, #4
 8024676:	eb07 1707 	add.w	r7, r7, r7, lsl #4
 802467a:	b2ff      	uxtb	r7, r7
 802467c:	f115 0a01 	adds.w	sl, r5, #1
 8024680:	f100 809a 	bmi.w	80247b8 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x188>
 8024684:	45d1      	cmp	r9, sl
 8024686:	f340 8097 	ble.w	80247b8 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x188>
 802468a:	2c00      	cmp	r4, #0
 802468c:	f2c0 8094 	blt.w	80247b8 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x188>
 8024690:	45a0      	cmp	r8, r4
 8024692:	f340 8091 	ble.w	80247b8 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x188>
 8024696:	2800      	cmp	r0, #0
 8024698:	f000 8090 	beq.w	80247bc <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x18c>
 802469c:	f10e 0b01 	add.w	fp, lr, #1
 80246a0:	ea4f 065b 	mov.w	r6, fp, lsr #1
 80246a4:	f01b 0f01 	tst.w	fp, #1
 80246a8:	5d96      	ldrb	r6, [r2, r6]
 80246aa:	bf0c      	ite	eq
 80246ac:	f006 060f 	andeq.w	r6, r6, #15
 80246b0:	1136      	asrne	r6, r6, #4
 80246b2:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 80246b6:	b2f6      	uxtb	r6, r6
 80246b8:	f1bc 0f00 	cmp.w	ip, #0
 80246bc:	f000 8082 	beq.w	80247c4 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x194>
 80246c0:	2d00      	cmp	r5, #0
 80246c2:	f104 0401 	add.w	r4, r4, #1
 80246c6:	db7b      	blt.n	80247c0 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x190>
 80246c8:	45a9      	cmp	r9, r5
 80246ca:	dd79      	ble.n	80247c0 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x190>
 80246cc:	2c00      	cmp	r4, #0
 80246ce:	db77      	blt.n	80247c0 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x190>
 80246d0:	45a0      	cmp	r8, r4
 80246d2:	dd75      	ble.n	80247c0 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x190>
 80246d4:	eb03 0b0e 	add.w	fp, r3, lr
 80246d8:	ea4f 055b 	mov.w	r5, fp, lsr #1
 80246dc:	f01b 0f01 	tst.w	fp, #1
 80246e0:	5d55      	ldrb	r5, [r2, r5]
 80246e2:	bf0c      	ite	eq
 80246e4:	f005 050f 	andeq.w	r5, r5, #15
 80246e8:	112d      	asrne	r5, r5, #4
 80246ea:	eb05 1505 	add.w	r5, r5, r5, lsl #4
 80246ee:	b2ed      	uxtb	r5, r5
 80246f0:	f1ba 0f00 	cmp.w	sl, #0
 80246f4:	db69      	blt.n	80247ca <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x19a>
 80246f6:	45d1      	cmp	r9, sl
 80246f8:	dd67      	ble.n	80247ca <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x19a>
 80246fa:	2c00      	cmp	r4, #0
 80246fc:	db65      	blt.n	80247ca <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x19a>
 80246fe:	45a0      	cmp	r8, r4
 8024700:	dd63      	ble.n	80247ca <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x19a>
 8024702:	2800      	cmp	r0, #0
 8024704:	d063      	beq.n	80247ce <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x19e>
 8024706:	3301      	adds	r3, #1
 8024708:	449e      	add	lr, r3
 802470a:	ea4f 035e 	mov.w	r3, lr, lsr #1
 802470e:	f01e 0f01 	tst.w	lr, #1
 8024712:	5cd4      	ldrb	r4, [r2, r3]
 8024714:	bf0c      	ite	eq
 8024716:	f004 040f 	andeq.w	r4, r4, #15
 802471a:	1124      	asrne	r4, r4, #4
 802471c:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 8024720:	b2e3      	uxtb	r3, r4
 8024722:	b282      	uxth	r2, r0
 8024724:	fa1f fc8c 	uxth.w	ip, ip
 8024728:	fb02 f40c 	mul.w	r4, r2, ip
 802472c:	0112      	lsls	r2, r2, #4
 802472e:	ebc4 1c0c 	rsb	ip, r4, ip, lsl #4
 8024732:	fa1f f08c 	uxth.w	r0, ip
 8024736:	f5c2 7c80 	rsb	ip, r2, #256	@ 0x100
 802473a:	1b12      	subs	r2, r2, r4
 802473c:	ebac 0c00 	sub.w	ip, ip, r0
 8024740:	b292      	uxth	r2, r2
 8024742:	fa1f fc8c 	uxth.w	ip, ip
 8024746:	4372      	muls	r2, r6
 8024748:	fb07 220c 	mla	r2, r7, ip, r2
 802474c:	fb00 2005 	mla	r0, r0, r5, r2
 8024750:	fb04 0303 	mla	r3, r4, r3, r0
 8024754:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8024758:	b353      	cbz	r3, 80247b0 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x180>
 802475a:	4a1e      	ldr	r2, [pc, #120]	@ (80247d4 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1a4>)
 802475c:	7808      	ldrb	r0, [r1, #0]
 802475e:	6814      	ldr	r4, [r2, #0]
 8024760:	b29a      	uxth	r2, r3
 8024762:	43db      	mvns	r3, r3
 8024764:	b2e5      	uxtb	r5, r4
 8024766:	b2db      	uxtb	r3, r3
 8024768:	fb15 f502 	smulbb	r5, r5, r2
 802476c:	fb00 5003 	mla	r0, r0, r3, r5
 8024770:	b280      	uxth	r0, r0
 8024772:	1c45      	adds	r5, r0, #1
 8024774:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 8024778:	784d      	ldrb	r5, [r1, #1]
 802477a:	fb15 f503 	smulbb	r5, r5, r3
 802477e:	1200      	asrs	r0, r0, #8
 8024780:	7008      	strb	r0, [r1, #0]
 8024782:	f3c4 2007 	ubfx	r0, r4, #8, #8
 8024786:	f3c4 4407 	ubfx	r4, r4, #16, #8
 802478a:	fb00 5002 	mla	r0, r0, r2, r5
 802478e:	b280      	uxth	r0, r0
 8024790:	1c45      	adds	r5, r0, #1
 8024792:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 8024796:	1200      	asrs	r0, r0, #8
 8024798:	7048      	strb	r0, [r1, #1]
 802479a:	7888      	ldrb	r0, [r1, #2]
 802479c:	fb10 f303 	smulbb	r3, r0, r3
 80247a0:	fb04 3202 	mla	r2, r4, r2, r3
 80247a4:	b292      	uxth	r2, r2
 80247a6:	1c53      	adds	r3, r2, #1
 80247a8:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 80247ac:	1212      	asrs	r2, r2, #8
 80247ae:	708a      	strb	r2, [r1, #2]
 80247b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80247b4:	2700      	movs	r7, #0
 80247b6:	e761      	b.n	802467c <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x4c>
 80247b8:	2600      	movs	r6, #0
 80247ba:	e77d      	b.n	80246b8 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x88>
 80247bc:	4606      	mov	r6, r0
 80247be:	e77b      	b.n	80246b8 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x88>
 80247c0:	2500      	movs	r5, #0
 80247c2:	e795      	b.n	80246f0 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xc0>
 80247c4:	4663      	mov	r3, ip
 80247c6:	4665      	mov	r5, ip
 80247c8:	e7ab      	b.n	8024722 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf2>
 80247ca:	2300      	movs	r3, #0
 80247cc:	e7a9      	b.n	8024722 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf2>
 80247ce:	4603      	mov	r3, r0
 80247d0:	e7a7      	b.n	8024722 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf2>
 80247d2:	bf00      	nop
 80247d4:	24028e30 	.word	0x24028e30

080247d8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80247d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80247dc:	b093      	sub	sp, #76	@ 0x4c
 80247de:	461c      	mov	r4, r3
 80247e0:	920c      	str	r2, [sp, #48]	@ 0x30
 80247e2:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 80247e4:	9011      	str	r0, [sp, #68]	@ 0x44
 80247e6:	9107      	str	r1, [sp, #28]
 80247e8:	6850      	ldr	r0, [r2, #4]
 80247ea:	6812      	ldr	r2, [r2, #0]
 80247ec:	e9dd 1322 	ldrd	r1, r3, [sp, #136]	@ 0x88
 80247f0:	e9dd 561d 	ldrd	r5, r6, [sp, #116]	@ 0x74
 80247f4:	fb00 1303 	mla	r3, r0, r3, r1
 80247f8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80247fc:	eb02 0b03 	add.w	fp, r2, r3
 8024800:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8024802:	689b      	ldr	r3, [r3, #8]
 8024804:	3301      	adds	r3, #1
 8024806:	f023 0301 	bic.w	r3, r3, #1
 802480a:	9309      	str	r3, [sp, #36]	@ 0x24
 802480c:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 802480e:	f8d3 8000 	ldr.w	r8, [r3]
 8024812:	9b07      	ldr	r3, [sp, #28]
 8024814:	2b00      	cmp	r3, #0
 8024816:	dc03      	bgt.n	8024820 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 8024818:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 802481a:	2b00      	cmp	r3, #0
 802481c:	f340 822b 	ble.w	8024c76 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49e>
 8024820:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8024822:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8024826:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 802482a:	1e48      	subs	r0, r1, #1
 802482c:	1e57      	subs	r7, r2, #1
 802482e:	2c00      	cmp	r4, #0
 8024830:	f340 80d7 	ble.w	80249e2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20a>
 8024834:	ea5f 4c25 	movs.w	ip, r5, asr #16
 8024838:	ea4f 4326 	mov.w	r3, r6, asr #16
 802483c:	d406      	bmi.n	802484c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 802483e:	4584      	cmp	ip, r0
 8024840:	da04      	bge.n	802484c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 8024842:	2b00      	cmp	r3, #0
 8024844:	db02      	blt.n	802484c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 8024846:	42bb      	cmp	r3, r7
 8024848:	f2c0 80cc 	blt.w	80249e4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20c>
 802484c:	f11c 0c01 	adds.w	ip, ip, #1
 8024850:	f100 80bf 	bmi.w	80249d2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 8024854:	4561      	cmp	r1, ip
 8024856:	f2c0 80bc 	blt.w	80249d2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 802485a:	3301      	adds	r3, #1
 802485c:	f100 80b9 	bmi.w	80249d2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 8024860:	429a      	cmp	r2, r3
 8024862:	f2c0 80b6 	blt.w	80249d2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 8024866:	46a2      	mov	sl, r4
 8024868:	465f      	mov	r7, fp
 802486a:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	@ 0x24
 802486e:	f1ba 0f00 	cmp.w	sl, #0
 8024872:	f340 80d4 	ble.w	8024a1e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x246>
 8024876:	f3c5 3303 	ubfx	r3, r5, #12, #4
 802487a:	1430      	asrs	r0, r6, #16
 802487c:	f3c6 3103 	ubfx	r1, r6, #12, #4
 8024880:	9308      	str	r3, [sp, #32]
 8024882:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8024884:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
 8024888:	142b      	asrs	r3, r5, #16
 802488a:	f100 8124 	bmi.w	8024ad6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 802488e:	f10c 32ff 	add.w	r2, ip, #4294967295
 8024892:	4293      	cmp	r3, r2
 8024894:	f280 811f 	bge.w	8024ad6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 8024898:	2800      	cmp	r0, #0
 802489a:	f2c0 811c 	blt.w	8024ad6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 802489e:	f10e 32ff 	add.w	r2, lr, #4294967295
 80248a2:	4290      	cmp	r0, r2
 80248a4:	f280 8117 	bge.w	8024ad6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 80248a8:	fb00 3309 	mla	r3, r0, r9, r3
 80248ac:	0858      	lsrs	r0, r3, #1
 80248ae:	07da      	lsls	r2, r3, #31
 80248b0:	9a08      	ldr	r2, [sp, #32]
 80248b2:	f818 c000 	ldrb.w	ip, [r8, r0]
 80248b6:	bf54      	ite	pl
 80248b8:	f00c 0c0f 	andpl.w	ip, ip, #15
 80248bc:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 80248c0:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 80248c4:	fa5f fc8c 	uxtb.w	ip, ip
 80248c8:	2a00      	cmp	r2, #0
 80248ca:	f000 80ed 	beq.w	8024aa8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d0>
 80248ce:	1c58      	adds	r0, r3, #1
 80248d0:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 80248d4:	07c0      	lsls	r0, r0, #31
 80248d6:	f818 e00e 	ldrb.w	lr, [r8, lr]
 80248da:	bf54      	ite	pl
 80248dc:	f00e 0e0f 	andpl.w	lr, lr, #15
 80248e0:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
 80248e4:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
 80248e8:	fa5f fe8e 	uxtb.w	lr, lr
 80248ec:	f8cd e034 	str.w	lr, [sp, #52]	@ 0x34
 80248f0:	b1c9      	cbz	r1, 8024926 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 80248f2:	444b      	add	r3, r9
 80248f4:	0858      	lsrs	r0, r3, #1
 80248f6:	07da      	lsls	r2, r3, #31
 80248f8:	f818 0000 	ldrb.w	r0, [r8, r0]
 80248fc:	bf54      	ite	pl
 80248fe:	f000 000f 	andpl.w	r0, r0, #15
 8024902:	1100      	asrmi	r0, r0, #4
 8024904:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8024908:	b2c0      	uxtb	r0, r0
 802490a:	900a      	str	r0, [sp, #40]	@ 0x28
 802490c:	1c58      	adds	r0, r3, #1
 802490e:	0843      	lsrs	r3, r0, #1
 8024910:	07c2      	lsls	r2, r0, #31
 8024912:	f818 3003 	ldrb.w	r3, [r8, r3]
 8024916:	bf54      	ite	pl
 8024918:	f003 030f 	andpl.w	r3, r3, #15
 802491c:	111b      	asrmi	r3, r3, #4
 802491e:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8024922:	b2db      	uxtb	r3, r3
 8024924:	930e      	str	r3, [sp, #56]	@ 0x38
 8024926:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 802492a:	b289      	uxth	r1, r1
 802492c:	fb02 f301 	mul.w	r3, r2, r1
 8024930:	0112      	lsls	r2, r2, #4
 8024932:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 8024936:	f5c2 7080 	rsb	r0, r2, #256	@ 0x100
 802493a:	1ad2      	subs	r2, r2, r3
 802493c:	b289      	uxth	r1, r1
 802493e:	b292      	uxth	r2, r2
 8024940:	1a40      	subs	r0, r0, r1
 8024942:	fa1f fe80 	uxth.w	lr, r0
 8024946:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8024948:	4342      	muls	r2, r0
 802494a:	fb0c 2c0e 	mla	ip, ip, lr, r2
 802494e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8024950:	fb01 c102 	mla	r1, r1, r2, ip
 8024954:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8024956:	fb03 1302 	mla	r3, r3, r2, r1
 802495a:	f3c3 2307 	ubfx	r3, r3, #8, #8
 802495e:	b383      	cbz	r3, 80249c2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 8024960:	4ac6      	ldr	r2, [pc, #792]	@ (8024c7c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a4>)
 8024962:	2bff      	cmp	r3, #255	@ 0xff
 8024964:	6812      	ldr	r2, [r2, #0]
 8024966:	f3c2 4e07 	ubfx	lr, r2, #16, #8
 802496a:	f3c2 2007 	ubfx	r0, r2, #8, #8
 802496e:	b2d2      	uxtb	r2, r2
 8024970:	f000 80ac 	beq.w	8024acc <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 8024974:	b299      	uxth	r1, r3
 8024976:	43db      	mvns	r3, r3
 8024978:	f897 c000 	ldrb.w	ip, [r7]
 802497c:	fb12 f201 	smulbb	r2, r2, r1
 8024980:	b2db      	uxtb	r3, r3
 8024982:	fb10 f001 	smulbb	r0, r0, r1
 8024986:	fb0c 2203 	mla	r2, ip, r3, r2
 802498a:	fb1e f101 	smulbb	r1, lr, r1
 802498e:	b292      	uxth	r2, r2
 8024990:	f102 0c01 	add.w	ip, r2, #1
 8024994:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 8024998:	1212      	asrs	r2, r2, #8
 802499a:	703a      	strb	r2, [r7, #0]
 802499c:	787a      	ldrb	r2, [r7, #1]
 802499e:	fb02 0003 	mla	r0, r2, r3, r0
 80249a2:	b280      	uxth	r0, r0
 80249a4:	1c42      	adds	r2, r0, #1
 80249a6:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 80249aa:	78ba      	ldrb	r2, [r7, #2]
 80249ac:	fb02 1303 	mla	r3, r2, r3, r1
 80249b0:	1200      	asrs	r0, r0, #8
 80249b2:	b29b      	uxth	r3, r3
 80249b4:	7078      	strb	r0, [r7, #1]
 80249b6:	f103 0e01 	add.w	lr, r3, #1
 80249ba:	eb0e 2313 	add.w	r3, lr, r3, lsr #8
 80249be:	121b      	asrs	r3, r3, #8
 80249c0:	70bb      	strb	r3, [r7, #2]
 80249c2:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 80249c4:	3703      	adds	r7, #3
 80249c6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80249ca:	441d      	add	r5, r3
 80249cc:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80249ce:	441e      	add	r6, r3
 80249d0:	e74d      	b.n	802486e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 80249d2:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 80249d4:	3c01      	subs	r4, #1
 80249d6:	f10b 0b03 	add.w	fp, fp, #3
 80249da:	441d      	add	r5, r3
 80249dc:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80249de:	441e      	add	r6, r3
 80249e0:	e725      	b.n	802482e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56>
 80249e2:	d021      	beq.n	8024a28 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x250>
 80249e4:	1e63      	subs	r3, r4, #1
 80249e6:	981f      	ldr	r0, [sp, #124]	@ 0x7c
 80249e8:	fb00 5003 	mla	r0, r0, r3, r5
 80249ec:	1400      	asrs	r0, r0, #16
 80249ee:	f53f af3a 	bmi.w	8024866 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 80249f2:	3901      	subs	r1, #1
 80249f4:	4288      	cmp	r0, r1
 80249f6:	f6bf af36 	bge.w	8024866 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 80249fa:	9920      	ldr	r1, [sp, #128]	@ 0x80
 80249fc:	fb01 6303 	mla	r3, r1, r3, r6
 8024a00:	141b      	asrs	r3, r3, #16
 8024a02:	f53f af30 	bmi.w	8024866 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8024a06:	3a01      	subs	r2, #1
 8024a08:	4293      	cmp	r3, r2
 8024a0a:	f6bf af2c 	bge.w	8024866 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8024a0e:	f10b 0c03 	add.w	ip, fp, #3
 8024a12:	46a6      	mov	lr, r4
 8024a14:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	@ 0x24
 8024a18:	f1be 0f00 	cmp.w	lr, #0
 8024a1c:	dc79      	bgt.n	8024b12 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33a>
 8024a1e:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 8024a22:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8024a26:	44a3      	add	fp, r4
 8024a28:	9b07      	ldr	r3, [sp, #28]
 8024a2a:	2b00      	cmp	r3, #0
 8024a2c:	f340 8123 	ble.w	8024c76 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49e>
 8024a30:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8024a34:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8024a36:	ee30 0a04 	vadd.f32	s0, s0, s8
 8024a3a:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8024a3e:	eef0 6a62 	vmov.f32	s13, s5
 8024a42:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8024a46:	ee31 1a05 	vadd.f32	s2, s2, s10
 8024a4a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8024a4e:	ee16 5a90 	vmov	r5, s13
 8024a52:	eef0 6a43 	vmov.f32	s13, s6
 8024a56:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8024a5a:	ee16 6a90 	vmov	r6, s13
 8024a5e:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8024a62:	ee61 7a27 	vmul.f32	s15, s2, s15
 8024a66:	ee77 2a62 	vsub.f32	s5, s14, s5
 8024a6a:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8024a6e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8024a72:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8024a76:	ee12 2a90 	vmov	r2, s5
 8024a7a:	eef0 2a47 	vmov.f32	s5, s14
 8024a7e:	fb92 f3f3 	sdiv	r3, r2, r3
 8024a82:	ee13 2a10 	vmov	r2, s6
 8024a86:	931f      	str	r3, [sp, #124]	@ 0x7c
 8024a88:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8024a8a:	eeb0 3a67 	vmov.f32	s6, s15
 8024a8e:	fb92 f3f3 	sdiv	r3, r2, r3
 8024a92:	9320      	str	r3, [sp, #128]	@ 0x80
 8024a94:	9b07      	ldr	r3, [sp, #28]
 8024a96:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8024a98:	3b01      	subs	r3, #1
 8024a9a:	9307      	str	r3, [sp, #28]
 8024a9c:	bf08      	it	eq
 8024a9e:	4614      	moveq	r4, r2
 8024aa0:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8024aa2:	bf18      	it	ne
 8024aa4:	461c      	movne	r4, r3
 8024aa6:	e6b4      	b.n	8024812 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 8024aa8:	2900      	cmp	r1, #0
 8024aaa:	f43f af3c 	beq.w	8024926 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 8024aae:	eb09 0003 	add.w	r0, r9, r3
 8024ab2:	0843      	lsrs	r3, r0, #1
 8024ab4:	07c0      	lsls	r0, r0, #31
 8024ab6:	f818 3003 	ldrb.w	r3, [r8, r3]
 8024aba:	bf54      	ite	pl
 8024abc:	f003 030f 	andpl.w	r3, r3, #15
 8024ac0:	111b      	asrmi	r3, r3, #4
 8024ac2:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8024ac6:	b2db      	uxtb	r3, r3
 8024ac8:	930a      	str	r3, [sp, #40]	@ 0x28
 8024aca:	e72c      	b.n	8024926 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 8024acc:	703a      	strb	r2, [r7, #0]
 8024ace:	7078      	strb	r0, [r7, #1]
 8024ad0:	f887 e002 	strb.w	lr, [r7, #2]
 8024ad4:	e775      	b.n	80249c2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 8024ad6:	1c5a      	adds	r2, r3, #1
 8024ad8:	f53f af73 	bmi.w	80249c2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 8024adc:	4594      	cmp	ip, r2
 8024ade:	f6ff af70 	blt.w	80249c2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 8024ae2:	1c42      	adds	r2, r0, #1
 8024ae4:	f53f af6d 	bmi.w	80249c2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 8024ae8:	4596      	cmp	lr, r2
 8024aea:	f6ff af6a 	blt.w	80249c2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 8024aee:	9302      	str	r3, [sp, #8]
 8024af0:	fa0f f38e 	sxth.w	r3, lr
 8024af4:	9a08      	ldr	r2, [sp, #32]
 8024af6:	9301      	str	r3, [sp, #4]
 8024af8:	fa0f f38c 	sxth.w	r3, ip
 8024afc:	9105      	str	r1, [sp, #20]
 8024afe:	4639      	mov	r1, r7
 8024b00:	9300      	str	r3, [sp, #0]
 8024b02:	464b      	mov	r3, r9
 8024b04:	e9cd 0203 	strd	r0, r2, [sp, #12]
 8024b08:	4642      	mov	r2, r8
 8024b0a:	9811      	ldr	r0, [sp, #68]	@ 0x44
 8024b0c:	f7ff fd90 	bl	8024630 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh>
 8024b10:	e757      	b.n	80249c2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 8024b12:	142a      	asrs	r2, r5, #16
 8024b14:	f3c5 3003 	ubfx	r0, r5, #12, #4
 8024b18:	1433      	asrs	r3, r6, #16
 8024b1a:	f3c6 3703 	ubfx	r7, r6, #12, #4
 8024b1e:	fb09 2303 	mla	r3, r9, r3, r2
 8024b22:	085a      	lsrs	r2, r3, #1
 8024b24:	07d9      	lsls	r1, r3, #31
 8024b26:	f818 2002 	ldrb.w	r2, [r8, r2]
 8024b2a:	bf54      	ite	pl
 8024b2c:	f002 020f 	andpl.w	r2, r2, #15
 8024b30:	1112      	asrmi	r2, r2, #4
 8024b32:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8024b36:	b2d2      	uxtb	r2, r2
 8024b38:	2800      	cmp	r0, #0
 8024b3a:	f000 8085 	beq.w	8024c48 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x470>
 8024b3e:	f103 0a01 	add.w	sl, r3, #1
 8024b42:	ea4f 015a 	mov.w	r1, sl, lsr #1
 8024b46:	f01a 0f01 	tst.w	sl, #1
 8024b4a:	f818 1001 	ldrb.w	r1, [r8, r1]
 8024b4e:	bf0c      	ite	eq
 8024b50:	f001 010f 	andeq.w	r1, r1, #15
 8024b54:	1109      	asrne	r1, r1, #4
 8024b56:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8024b5a:	b2c9      	uxtb	r1, r1
 8024b5c:	910f      	str	r1, [sp, #60]	@ 0x3c
 8024b5e:	b1df      	cbz	r7, 8024b98 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c0>
 8024b60:	444b      	add	r3, r9
 8024b62:	0859      	lsrs	r1, r3, #1
 8024b64:	f013 0f01 	tst.w	r3, #1
 8024b68:	f103 0301 	add.w	r3, r3, #1
 8024b6c:	f818 1001 	ldrb.w	r1, [r8, r1]
 8024b70:	bf0c      	ite	eq
 8024b72:	f001 010f 	andeq.w	r1, r1, #15
 8024b76:	1109      	asrne	r1, r1, #4
 8024b78:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8024b7c:	b2c9      	uxtb	r1, r1
 8024b7e:	910b      	str	r1, [sp, #44]	@ 0x2c
 8024b80:	0859      	lsrs	r1, r3, #1
 8024b82:	07db      	lsls	r3, r3, #31
 8024b84:	f818 1001 	ldrb.w	r1, [r8, r1]
 8024b88:	bf54      	ite	pl
 8024b8a:	f001 010f 	andpl.w	r1, r1, #15
 8024b8e:	1109      	asrmi	r1, r1, #4
 8024b90:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8024b94:	b2c9      	uxtb	r1, r1
 8024b96:	9110      	str	r1, [sp, #64]	@ 0x40
 8024b98:	b280      	uxth	r0, r0
 8024b9a:	b2bf      	uxth	r7, r7
 8024b9c:	fb00 f307 	mul.w	r3, r0, r7
 8024ba0:	0100      	lsls	r0, r0, #4
 8024ba2:	ebc3 1707 	rsb	r7, r3, r7, lsl #4
 8024ba6:	f5c0 7180 	rsb	r1, r0, #256	@ 0x100
 8024baa:	1ac0      	subs	r0, r0, r3
 8024bac:	b2bf      	uxth	r7, r7
 8024bae:	b280      	uxth	r0, r0
 8024bb0:	1bc9      	subs	r1, r1, r7
 8024bb2:	fa1f fa81 	uxth.w	sl, r1
 8024bb6:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8024bb8:	4348      	muls	r0, r1
 8024bba:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8024bbc:	fb02 020a 	mla	r2, r2, sl, r0
 8024bc0:	fb07 2701 	mla	r7, r7, r1, r2
 8024bc4:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8024bc6:	fb03 7302 	mla	r3, r3, r2, r7
 8024bca:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8024bce:	b393      	cbz	r3, 8024c36 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 8024bd0:	4a2a      	ldr	r2, [pc, #168]	@ (8024c7c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a4>)
 8024bd2:	2bff      	cmp	r3, #255	@ 0xff
 8024bd4:	6811      	ldr	r1, [r2, #0]
 8024bd6:	f3c1 4a07 	ubfx	sl, r1, #16, #8
 8024bda:	f3c1 2707 	ubfx	r7, r1, #8, #8
 8024bde:	b2c9      	uxtb	r1, r1
 8024be0:	d042      	beq.n	8024c68 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x490>
 8024be2:	b298      	uxth	r0, r3
 8024be4:	43db      	mvns	r3, r3
 8024be6:	f81c 2c03 	ldrb.w	r2, [ip, #-3]
 8024bea:	fb11 f100 	smulbb	r1, r1, r0
 8024bee:	b2db      	uxtb	r3, r3
 8024bf0:	fb17 f700 	smulbb	r7, r7, r0
 8024bf4:	fb02 1103 	mla	r1, r2, r3, r1
 8024bf8:	fb1a f000 	smulbb	r0, sl, r0
 8024bfc:	b289      	uxth	r1, r1
 8024bfe:	1c4a      	adds	r2, r1, #1
 8024c00:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 8024c04:	f81c 2c02 	ldrb.w	r2, [ip, #-2]
 8024c08:	fb02 7703 	mla	r7, r2, r3, r7
 8024c0c:	1209      	asrs	r1, r1, #8
 8024c0e:	b2bf      	uxth	r7, r7
 8024c10:	f80c 1c03 	strb.w	r1, [ip, #-3]
 8024c14:	1c7a      	adds	r2, r7, #1
 8024c16:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 8024c1a:	f81c 2c01 	ldrb.w	r2, [ip, #-1]
 8024c1e:	fb02 0303 	mla	r3, r2, r3, r0
 8024c22:	123f      	asrs	r7, r7, #8
 8024c24:	b29b      	uxth	r3, r3
 8024c26:	f80c 7c02 	strb.w	r7, [ip, #-2]
 8024c2a:	1c5a      	adds	r2, r3, #1
 8024c2c:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8024c30:	121b      	asrs	r3, r3, #8
 8024c32:	f80c 3c01 	strb.w	r3, [ip, #-1]
 8024c36:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8024c38:	f10c 0c03 	add.w	ip, ip, #3
 8024c3c:	f10e 3eff 	add.w	lr, lr, #4294967295
 8024c40:	441d      	add	r5, r3
 8024c42:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8024c44:	441e      	add	r6, r3
 8024c46:	e6e7      	b.n	8024a18 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x240>
 8024c48:	2f00      	cmp	r7, #0
 8024c4a:	d0a5      	beq.n	8024b98 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c0>
 8024c4c:	444b      	add	r3, r9
 8024c4e:	0859      	lsrs	r1, r3, #1
 8024c50:	07db      	lsls	r3, r3, #31
 8024c52:	f818 1001 	ldrb.w	r1, [r8, r1]
 8024c56:	bf54      	ite	pl
 8024c58:	f001 010f 	andpl.w	r1, r1, #15
 8024c5c:	1109      	asrmi	r1, r1, #4
 8024c5e:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8024c62:	b2c9      	uxtb	r1, r1
 8024c64:	910b      	str	r1, [sp, #44]	@ 0x2c
 8024c66:	e797      	b.n	8024b98 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c0>
 8024c68:	f80c 1c03 	strb.w	r1, [ip, #-3]
 8024c6c:	f80c 7c02 	strb.w	r7, [ip, #-2]
 8024c70:	f80c ac01 	strb.w	sl, [ip, #-1]
 8024c74:	e7df      	b.n	8024c36 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 8024c76:	b013      	add	sp, #76	@ 0x4c
 8024c78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024c7c:	24028e30 	.word	0x24028e30

08024c80 <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L416blendPixelRGB888EPKhPhi>:
 8024c80:	b530      	push	{r4, r5, lr}
 8024c82:	b29d      	uxth	r5, r3
 8024c84:	f1c3 03ff 	rsb	r3, r3, #255	@ 0xff
 8024c88:	780c      	ldrb	r4, [r1, #0]
 8024c8a:	b298      	uxth	r0, r3
 8024c8c:	7813      	ldrb	r3, [r2, #0]
 8024c8e:	fb14 f405 	smulbb	r4, r4, r5
 8024c92:	fb13 f300 	smulbb	r3, r3, r0
 8024c96:	441c      	add	r4, r3
 8024c98:	b2a4      	uxth	r4, r4
 8024c9a:	1c63      	adds	r3, r4, #1
 8024c9c:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 8024ca0:	7853      	ldrb	r3, [r2, #1]
 8024ca2:	fb13 f300 	smulbb	r3, r3, r0
 8024ca6:	1224      	asrs	r4, r4, #8
 8024ca8:	7014      	strb	r4, [r2, #0]
 8024caa:	784c      	ldrb	r4, [r1, #1]
 8024cac:	fb14 f405 	smulbb	r4, r4, r5
 8024cb0:	441c      	add	r4, r3
 8024cb2:	b2a4      	uxth	r4, r4
 8024cb4:	1c63      	adds	r3, r4, #1
 8024cb6:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 8024cba:	1224      	asrs	r4, r4, #8
 8024cbc:	7054      	strb	r4, [r2, #1]
 8024cbe:	788b      	ldrb	r3, [r1, #2]
 8024cc0:	7891      	ldrb	r1, [r2, #2]
 8024cc2:	fb13 f305 	smulbb	r3, r3, r5
 8024cc6:	fb11 f000 	smulbb	r0, r1, r0
 8024cca:	4403      	add	r3, r0
 8024ccc:	b29b      	uxth	r3, r3
 8024cce:	1c59      	adds	r1, r3, #1
 8024cd0:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 8024cd4:	121b      	asrs	r3, r3, #8
 8024cd6:	7093      	strb	r3, [r2, #2]
 8024cd8:	bd30      	pop	{r4, r5, pc}
	...

08024cdc <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h>:
 8024cdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024ce0:	461c      	mov	r4, r3
 8024ce2:	b08b      	sub	sp, #44	@ 0x2c
 8024ce4:	460e      	mov	r6, r1
 8024ce6:	4615      	mov	r5, r2
 8024ce8:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8024cea:	4682      	mov	sl, r0
 8024cec:	6861      	ldr	r1, [r4, #4]
 8024cee:	aa06      	add	r2, sp, #24
 8024cf0:	6820      	ldr	r0, [r4, #0]
 8024cf2:	2702      	movs	r7, #2
 8024cf4:	f89d 9054 	ldrb.w	r9, [sp, #84]	@ 0x54
 8024cf8:	3504      	adds	r5, #4
 8024cfa:	c203      	stmia	r2!, {r0, r1}
 8024cfc:	6818      	ldr	r0, [r3, #0]
 8024cfe:	aa08      	add	r2, sp, #32
 8024d00:	6859      	ldr	r1, [r3, #4]
 8024d02:	c203      	stmia	r2!, {r0, r1}
 8024d04:	a806      	add	r0, sp, #24
 8024d06:	f7f2 faaf 	bl	8017268 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8024d0a:	4621      	mov	r1, r4
 8024d0c:	a808      	add	r0, sp, #32
 8024d0e:	f7f2 faef 	bl	80172f0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8024d12:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 8024d16:	f9bd b026 	ldrsh.w	fp, [sp, #38]	@ 0x26
 8024d1a:	f002 0301 	and.w	r3, r2, #1
 8024d1e:	f9bd 8024 	ldrsh.w	r8, [sp, #36]	@ 0x24
 8024d22:	9302      	str	r3, [sp, #8]
 8024d24:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 8024d28:	f003 0101 	and.w	r1, r3, #1
 8024d2c:	9101      	str	r1, [sp, #4]
 8024d2e:	9801      	ldr	r0, [sp, #4]
 8024d30:	f9bd 1022 	ldrsh.w	r1, [sp, #34]	@ 0x22
 8024d34:	4403      	add	r3, r0
 8024d36:	fb01 2303 	mla	r3, r1, r3, r2
 8024d3a:	fb93 f3f7 	sdiv	r3, r3, r7
 8024d3e:	441e      	add	r6, r3
 8024d40:	f8bd 3018 	ldrh.w	r3, [sp, #24]
 8024d44:	441a      	add	r2, r3
 8024d46:	f8bd 301a 	ldrh.w	r3, [sp, #26]
 8024d4a:	4419      	add	r1, r3
 8024d4c:	4b70      	ldr	r3, [pc, #448]	@ (8024f10 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x234>)
 8024d4e:	f8ad 2020 	strh.w	r2, [sp, #32]
 8024d52:	6818      	ldr	r0, [r3, #0]
 8024d54:	f8ad 1022 	strh.w	r1, [sp, #34]	@ 0x22
 8024d58:	6803      	ldr	r3, [r0, #0]
 8024d5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8024d5c:	4798      	blx	r3
 8024d5e:	4a6d      	ldr	r2, [pc, #436]	@ (8024f14 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x238>)
 8024d60:	f9bd 1020 	ldrsh.w	r1, [sp, #32]
 8024d64:	f1b9 0fff 	cmp.w	r9, #255	@ 0xff
 8024d68:	8813      	ldrh	r3, [r2, #0]
 8024d6a:	f9bd 4022 	ldrsh.w	r4, [sp, #34]	@ 0x22
 8024d6e:	fb03 1404 	mla	r4, r3, r4, r1
 8024d72:	4611      	mov	r1, r2
 8024d74:	fb0b f303 	mul.w	r3, fp, r3
 8024d78:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8024d7c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8024d80:	4404      	add	r4, r0
 8024d82:	4423      	add	r3, r4
 8024d84:	d073      	beq.n	8024e6e <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x192>
 8024d86:	9705      	str	r7, [sp, #20]
 8024d88:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8024d8c:	9b03      	ldr	r3, [sp, #12]
 8024d8e:	429c      	cmp	r4, r3
 8024d90:	f080 80b5 	bcs.w	8024efe <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x222>
 8024d94:	9b02      	ldr	r3, [sp, #8]
 8024d96:	b35b      	cbz	r3, 8024df0 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x114>
 8024d98:	7831      	ldrb	r1, [r6, #0]
 8024d9a:	4622      	mov	r2, r4
 8024d9c:	1c77      	adds	r7, r6, #1
 8024d9e:	3403      	adds	r4, #3
 8024da0:	f001 010f 	and.w	r1, r1, #15
 8024da4:	f108 3bff 	add.w	fp, r8, #4294967295
 8024da8:	464b      	mov	r3, r9
 8024daa:	4650      	mov	r0, sl
 8024dac:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8024db0:	4429      	add	r1, r5
 8024db2:	f7ff ff65 	bl	8024c80 <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L416blendPixelRGB888EPKhPhi>
 8024db6:	f1bb 0f01 	cmp.w	fp, #1
 8024dba:	dd1c      	ble.n	8024df6 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x11a>
 8024dbc:	7839      	ldrb	r1, [r7, #0]
 8024dbe:	4622      	mov	r2, r4
 8024dc0:	464b      	mov	r3, r9
 8024dc2:	4650      	mov	r0, sl
 8024dc4:	0909      	lsrs	r1, r1, #4
 8024dc6:	f1ab 0b02 	sub.w	fp, fp, #2
 8024dca:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8024dce:	4429      	add	r1, r5
 8024dd0:	f7ff ff56 	bl	8024c80 <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L416blendPixelRGB888EPKhPhi>
 8024dd4:	f817 1b01 	ldrb.w	r1, [r7], #1
 8024dd8:	1ce2      	adds	r2, r4, #3
 8024dda:	464b      	mov	r3, r9
 8024ddc:	f001 010f 	and.w	r1, r1, #15
 8024de0:	4650      	mov	r0, sl
 8024de2:	3406      	adds	r4, #6
 8024de4:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8024de8:	4429      	add	r1, r5
 8024dea:	f7ff ff49 	bl	8024c80 <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L416blendPixelRGB888EPKhPhi>
 8024dee:	e7e2      	b.n	8024db6 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0xda>
 8024df0:	4637      	mov	r7, r6
 8024df2:	46c3      	mov	fp, r8
 8024df4:	e7df      	b.n	8024db6 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0xda>
 8024df6:	d10a      	bne.n	8024e0e <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x132>
 8024df8:	7839      	ldrb	r1, [r7, #0]
 8024dfa:	4622      	mov	r2, r4
 8024dfc:	3403      	adds	r4, #3
 8024dfe:	464b      	mov	r3, r9
 8024e00:	0909      	lsrs	r1, r1, #4
 8024e02:	4650      	mov	r0, sl
 8024e04:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8024e08:	4429      	add	r1, r5
 8024e0a:	f7ff ff39 	bl	8024c80 <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L416blendPixelRGB888EPKhPhi>
 8024e0e:	9b04      	ldr	r3, [sp, #16]
 8024e10:	9a01      	ldr	r2, [sp, #4]
 8024e12:	881b      	ldrh	r3, [r3, #0]
 8024e14:	eba3 0308 	sub.w	r3, r3, r8
 8024e18:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8024e1c:	441c      	add	r4, r3
 8024e1e:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 8024e22:	4413      	add	r3, r2
 8024e24:	9a05      	ldr	r2, [sp, #20]
 8024e26:	fb93 f3f2 	sdiv	r3, r3, r2
 8024e2a:	441e      	add	r6, r3
 8024e2c:	e7ae      	b.n	8024d8c <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0xb0>
 8024e2e:	4632      	mov	r2, r6
 8024e30:	46c4      	mov	ip, r8
 8024e32:	e037      	b.n	8024ea4 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1c8>
 8024e34:	d10e      	bne.n	8024e54 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x178>
 8024e36:	7812      	ldrb	r2, [r2, #0]
 8024e38:	3003      	adds	r0, #3
 8024e3a:	0912      	lsrs	r2, r2, #4
 8024e3c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8024e40:	18ac      	adds	r4, r5, r2
 8024e42:	5caa      	ldrb	r2, [r5, r2]
 8024e44:	f800 2c03 	strb.w	r2, [r0, #-3]
 8024e48:	7862      	ldrb	r2, [r4, #1]
 8024e4a:	f800 2c02 	strb.w	r2, [r0, #-2]
 8024e4e:	78a2      	ldrb	r2, [r4, #2]
 8024e50:	f800 2c01 	strb.w	r2, [r0, #-1]
 8024e54:	880c      	ldrh	r4, [r1, #0]
 8024e56:	f9bd 201c 	ldrsh.w	r2, [sp, #28]
 8024e5a:	eba4 0408 	sub.w	r4, r4, r8
 8024e5e:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8024e62:	4404      	add	r4, r0
 8024e64:	9801      	ldr	r0, [sp, #4]
 8024e66:	4402      	add	r2, r0
 8024e68:	fb92 f2f7 	sdiv	r2, r2, r7
 8024e6c:	4416      	add	r6, r2
 8024e6e:	429c      	cmp	r4, r3
 8024e70:	d245      	bcs.n	8024efe <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x222>
 8024e72:	9a02      	ldr	r2, [sp, #8]
 8024e74:	2a00      	cmp	r2, #0
 8024e76:	d0da      	beq.n	8024e2e <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x152>
 8024e78:	7830      	ldrb	r0, [r6, #0]
 8024e7a:	1c72      	adds	r2, r6, #1
 8024e7c:	3403      	adds	r4, #3
 8024e7e:	f000 000f 	and.w	r0, r0, #15
 8024e82:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8024e86:	eb05 0c00 	add.w	ip, r5, r0
 8024e8a:	5c28      	ldrb	r0, [r5, r0]
 8024e8c:	f804 0c03 	strb.w	r0, [r4, #-3]
 8024e90:	f89c 0001 	ldrb.w	r0, [ip, #1]
 8024e94:	f804 0c02 	strb.w	r0, [r4, #-2]
 8024e98:	f89c 0002 	ldrb.w	r0, [ip, #2]
 8024e9c:	f108 3cff 	add.w	ip, r8, #4294967295
 8024ea0:	f804 0c01 	strb.w	r0, [r4, #-1]
 8024ea4:	f1bc 0f01 	cmp.w	ip, #1
 8024ea8:	4620      	mov	r0, r4
 8024eaa:	f104 0406 	add.w	r4, r4, #6
 8024eae:	ddc1      	ble.n	8024e34 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x158>
 8024eb0:	7810      	ldrb	r0, [r2, #0]
 8024eb2:	f1ac 0c02 	sub.w	ip, ip, #2
 8024eb6:	0900      	lsrs	r0, r0, #4
 8024eb8:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8024ebc:	eb05 0e00 	add.w	lr, r5, r0
 8024ec0:	5c28      	ldrb	r0, [r5, r0]
 8024ec2:	f804 0c06 	strb.w	r0, [r4, #-6]
 8024ec6:	f89e 0001 	ldrb.w	r0, [lr, #1]
 8024eca:	f804 0c05 	strb.w	r0, [r4, #-5]
 8024ece:	f89e 0002 	ldrb.w	r0, [lr, #2]
 8024ed2:	f804 0c04 	strb.w	r0, [r4, #-4]
 8024ed6:	f812 0b01 	ldrb.w	r0, [r2], #1
 8024eda:	f000 000f 	and.w	r0, r0, #15
 8024ede:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8024ee2:	eb05 0e00 	add.w	lr, r5, r0
 8024ee6:	5c28      	ldrb	r0, [r5, r0]
 8024ee8:	f804 0c03 	strb.w	r0, [r4, #-3]
 8024eec:	f89e 0001 	ldrb.w	r0, [lr, #1]
 8024ef0:	f804 0c02 	strb.w	r0, [r4, #-2]
 8024ef4:	f89e 0002 	ldrb.w	r0, [lr, #2]
 8024ef8:	f804 0c01 	strb.w	r0, [r4, #-1]
 8024efc:	e7d2      	b.n	8024ea4 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1c8>
 8024efe:	4b04      	ldr	r3, [pc, #16]	@ (8024f10 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x234>)
 8024f00:	6818      	ldr	r0, [r3, #0]
 8024f02:	6803      	ldr	r3, [r0, #0]
 8024f04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8024f06:	4798      	blx	r3
 8024f08:	b00b      	add	sp, #44	@ 0x2c
 8024f0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024f0e:	bf00      	nop
 8024f10:	24028e20 	.word	0x24028e20
 8024f14:	24028e1a 	.word	0x24028e1a

08024f18 <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L418blendPixelARGB8888EPKhPhih>:
 8024f18:	b530      	push	{r4, r5, lr}
 8024f1a:	f89d 000c 	ldrb.w	r0, [sp, #12]
 8024f1e:	780d      	ldrb	r5, [r1, #0]
 8024f20:	28ff      	cmp	r0, #255	@ 0xff
 8024f22:	d107      	bne.n	8024f34 <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L418blendPixelARGB8888EPKhPhih+0x1c>
 8024f24:	2bff      	cmp	r3, #255	@ 0xff
 8024f26:	d105      	bne.n	8024f34 <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L418blendPixelARGB8888EPKhPhih+0x1c>
 8024f28:	7015      	strb	r5, [r2, #0]
 8024f2a:	784b      	ldrb	r3, [r1, #1]
 8024f2c:	7053      	strb	r3, [r2, #1]
 8024f2e:	788b      	ldrb	r3, [r1, #2]
 8024f30:	7093      	strb	r3, [r2, #2]
 8024f32:	bd30      	pop	{r4, r5, pc}
 8024f34:	fb10 f003 	smulbb	r0, r0, r3
 8024f38:	b283      	uxth	r3, r0
 8024f3a:	1c58      	adds	r0, r3, #1
 8024f3c:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 8024f40:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8024f44:	b284      	uxth	r4, r0
 8024f46:	43c0      	mvns	r0, r0
 8024f48:	fb15 f504 	smulbb	r5, r5, r4
 8024f4c:	b2c3      	uxtb	r3, r0
 8024f4e:	7810      	ldrb	r0, [r2, #0]
 8024f50:	fb00 5003 	mla	r0, r0, r3, r5
 8024f54:	b280      	uxth	r0, r0
 8024f56:	1c45      	adds	r5, r0, #1
 8024f58:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 8024f5c:	7855      	ldrb	r5, [r2, #1]
 8024f5e:	fb15 f503 	smulbb	r5, r5, r3
 8024f62:	1200      	asrs	r0, r0, #8
 8024f64:	7010      	strb	r0, [r2, #0]
 8024f66:	7848      	ldrb	r0, [r1, #1]
 8024f68:	fb00 5004 	mla	r0, r0, r4, r5
 8024f6c:	b280      	uxth	r0, r0
 8024f6e:	1c45      	adds	r5, r0, #1
 8024f70:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 8024f74:	1200      	asrs	r0, r0, #8
 8024f76:	7050      	strb	r0, [r2, #1]
 8024f78:	7888      	ldrb	r0, [r1, #2]
 8024f7a:	7891      	ldrb	r1, [r2, #2]
 8024f7c:	fb11 f303 	smulbb	r3, r1, r3
 8024f80:	fb00 3304 	mla	r3, r0, r4, r3
 8024f84:	b29b      	uxth	r3, r3
 8024f86:	1c59      	adds	r1, r3, #1
 8024f88:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 8024f8c:	121b      	asrs	r3, r3, #8
 8024f8e:	e7cf      	b.n	8024f30 <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L418blendPixelARGB8888EPKhPhih+0x18>

08024f90 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h>:
 8024f90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024f94:	461d      	mov	r5, r3
 8024f96:	b08f      	sub	sp, #60	@ 0x3c
 8024f98:	460c      	mov	r4, r1
 8024f9a:	4616      	mov	r6, r2
 8024f9c:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8024f9e:	4680      	mov	r8, r0
 8024fa0:	6869      	ldr	r1, [r5, #4]
 8024fa2:	aa0a      	add	r2, sp, #40	@ 0x28
 8024fa4:	6828      	ldr	r0, [r5, #0]
 8024fa6:	3604      	adds	r6, #4
 8024fa8:	f89d 9064 	ldrb.w	r9, [sp, #100]	@ 0x64
 8024fac:	4f57      	ldr	r7, [pc, #348]	@ (802510c <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x17c>)
 8024fae:	c203      	stmia	r2!, {r0, r1}
 8024fb0:	6818      	ldr	r0, [r3, #0]
 8024fb2:	aa0c      	add	r2, sp, #48	@ 0x30
 8024fb4:	6859      	ldr	r1, [r3, #4]
 8024fb6:	c203      	stmia	r2!, {r0, r1}
 8024fb8:	a80a      	add	r0, sp, #40	@ 0x28
 8024fba:	f7f2 f955 	bl	8017268 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8024fbe:	4629      	mov	r1, r5
 8024fc0:	a80c      	add	r0, sp, #48	@ 0x30
 8024fc2:	2502      	movs	r5, #2
 8024fc4:	f7f2 f994 	bl	80172f0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8024fc8:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	@ 0x30
 8024fcc:	f9bd a036 	ldrsh.w	sl, [sp, #54]	@ 0x36
 8024fd0:	f002 0301 	and.w	r3, r2, #1
 8024fd4:	f9bd b034 	ldrsh.w	fp, [sp, #52]	@ 0x34
 8024fd8:	9304      	str	r3, [sp, #16]
 8024fda:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	@ 0x2c
 8024fde:	f003 0101 	and.w	r1, r3, #1
 8024fe2:	9103      	str	r1, [sp, #12]
 8024fe4:	9803      	ldr	r0, [sp, #12]
 8024fe6:	f9bd 1032 	ldrsh.w	r1, [sp, #50]	@ 0x32
 8024fea:	4403      	add	r3, r0
 8024fec:	6838      	ldr	r0, [r7, #0]
 8024fee:	fb01 2303 	mla	r3, r1, r3, r2
 8024ff2:	fb93 f3f5 	sdiv	r3, r3, r5
 8024ff6:	18e5      	adds	r5, r4, r3
 8024ff8:	f8bd 3028 	ldrh.w	r3, [sp, #40]	@ 0x28
 8024ffc:	441a      	add	r2, r3
 8024ffe:	f8bd 302a 	ldrh.w	r3, [sp, #42]	@ 0x2a
 8025002:	4419      	add	r1, r3
 8025004:	f8ad 2030 	strh.w	r2, [sp, #48]	@ 0x30
 8025008:	f8ad 1032 	strh.w	r1, [sp, #50]	@ 0x32
 802500c:	6803      	ldr	r3, [r0, #0]
 802500e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8025010:	4798      	blx	r3
 8025012:	4a3f      	ldr	r2, [pc, #252]	@ (8025110 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x180>)
 8025014:	f9bd 4032 	ldrsh.w	r4, [sp, #50]	@ 0x32
 8025018:	8813      	ldrh	r3, [r2, #0]
 802501a:	f9bd 1030 	ldrsh.w	r1, [sp, #48]	@ 0x30
 802501e:	9207      	str	r2, [sp, #28]
 8025020:	fb03 1404 	mla	r4, r3, r4, r1
 8025024:	fb0a f303 	mul.w	r3, sl, r3
 8025028:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 802502c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8025030:	4404      	add	r4, r0
 8025032:	18e3      	adds	r3, r4, r3
 8025034:	e9cd 3705 	strd	r3, r7, [sp, #20]
 8025038:	9b05      	ldr	r3, [sp, #20]
 802503a:	429c      	cmp	r4, r3
 802503c:	d25d      	bcs.n	80250fa <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x16a>
 802503e:	9b04      	ldr	r3, [sp, #16]
 8025040:	2b00      	cmp	r3, #0
 8025042:	d037      	beq.n	80250b4 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x124>
 8025044:	782b      	ldrb	r3, [r5, #0]
 8025046:	1c6f      	adds	r7, r5, #1
 8025048:	f003 030f 	and.w	r3, r3, #15
 802504c:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8025050:	9309      	str	r3, [sp, #36]	@ 0x24
 8025052:	0e1b      	lsrs	r3, r3, #24
 8025054:	d006      	beq.n	8025064 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xd4>
 8025056:	9300      	str	r3, [sp, #0]
 8025058:	4622      	mov	r2, r4
 802505a:	464b      	mov	r3, r9
 802505c:	a909      	add	r1, sp, #36	@ 0x24
 802505e:	4640      	mov	r0, r8
 8025060:	f7ff ff5a 	bl	8024f18 <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L418blendPixelARGB8888EPKhPhih>
 8025064:	3403      	adds	r4, #3
 8025066:	f10b 3aff 	add.w	sl, fp, #4294967295
 802506a:	f1ba 0f01 	cmp.w	sl, #1
 802506e:	dd24      	ble.n	80250ba <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x12a>
 8025070:	783b      	ldrb	r3, [r7, #0]
 8025072:	091b      	lsrs	r3, r3, #4
 8025074:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8025078:	9308      	str	r3, [sp, #32]
 802507a:	0e1b      	lsrs	r3, r3, #24
 802507c:	d006      	beq.n	802508c <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xfc>
 802507e:	9300      	str	r3, [sp, #0]
 8025080:	4622      	mov	r2, r4
 8025082:	464b      	mov	r3, r9
 8025084:	a908      	add	r1, sp, #32
 8025086:	4640      	mov	r0, r8
 8025088:	f7ff ff46 	bl	8024f18 <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L418blendPixelARGB8888EPKhPhih>
 802508c:	f817 3b01 	ldrb.w	r3, [r7], #1
 8025090:	f003 030f 	and.w	r3, r3, #15
 8025094:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8025098:	9309      	str	r3, [sp, #36]	@ 0x24
 802509a:	0e1b      	lsrs	r3, r3, #24
 802509c:	d006      	beq.n	80250ac <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x11c>
 802509e:	9300      	str	r3, [sp, #0]
 80250a0:	1ce2      	adds	r2, r4, #3
 80250a2:	464b      	mov	r3, r9
 80250a4:	a909      	add	r1, sp, #36	@ 0x24
 80250a6:	4640      	mov	r0, r8
 80250a8:	f7ff ff36 	bl	8024f18 <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L418blendPixelARGB8888EPKhPhih>
 80250ac:	3406      	adds	r4, #6
 80250ae:	f1aa 0a02 	sub.w	sl, sl, #2
 80250b2:	e7da      	b.n	802506a <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xda>
 80250b4:	462f      	mov	r7, r5
 80250b6:	46da      	mov	sl, fp
 80250b8:	e7d7      	b.n	802506a <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xda>
 80250ba:	d10e      	bne.n	80250da <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x14a>
 80250bc:	783b      	ldrb	r3, [r7, #0]
 80250be:	091b      	lsrs	r3, r3, #4
 80250c0:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 80250c4:	9309      	str	r3, [sp, #36]	@ 0x24
 80250c6:	0e1b      	lsrs	r3, r3, #24
 80250c8:	d006      	beq.n	80250d8 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x148>
 80250ca:	9300      	str	r3, [sp, #0]
 80250cc:	4622      	mov	r2, r4
 80250ce:	464b      	mov	r3, r9
 80250d0:	a909      	add	r1, sp, #36	@ 0x24
 80250d2:	4640      	mov	r0, r8
 80250d4:	f7ff ff20 	bl	8024f18 <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L418blendPixelARGB8888EPKhPhih>
 80250d8:	3403      	adds	r4, #3
 80250da:	9b07      	ldr	r3, [sp, #28]
 80250dc:	9a03      	ldr	r2, [sp, #12]
 80250de:	881b      	ldrh	r3, [r3, #0]
 80250e0:	eba3 030b 	sub.w	r3, r3, fp
 80250e4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80250e8:	441c      	add	r4, r3
 80250ea:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	@ 0x2c
 80250ee:	4413      	add	r3, r2
 80250f0:	2202      	movs	r2, #2
 80250f2:	fb93 f3f2 	sdiv	r3, r3, r2
 80250f6:	441d      	add	r5, r3
 80250f8:	e79e      	b.n	8025038 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xa8>
 80250fa:	9b06      	ldr	r3, [sp, #24]
 80250fc:	6818      	ldr	r0, [r3, #0]
 80250fe:	6803      	ldr	r3, [r0, #0]
 8025100:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8025102:	4798      	blx	r3
 8025104:	b00f      	add	sp, #60	@ 0x3c
 8025106:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802510a:	bf00      	nop
 802510c:	24028e20 	.word	0x24028e20
 8025110:	24028e1a 	.word	0x24028e1a

08025114 <CRC_Lock>:
 8025114:	4a2d      	ldr	r2, [pc, #180]	@ (80251cc <CRC_Lock+0xb8>)
 8025116:	b530      	push	{r4, r5, lr}
 8025118:	6813      	ldr	r3, [r2, #0]
 802511a:	f24c 2540 	movw	r5, #49728	@ 0xc240
 802511e:	f023 0301 	bic.w	r3, r3, #1
 8025122:	6013      	str	r3, [r2, #0]
 8025124:	f64f 72f0 	movw	r2, #65520	@ 0xfff0
 8025128:	4b29      	ldr	r3, [pc, #164]	@ (80251d0 <CRC_Lock+0xbc>)
 802512a:	681c      	ldr	r4, [r3, #0]
 802512c:	4014      	ands	r4, r2
 802512e:	42ac      	cmp	r4, r5
 8025130:	d005      	beq.n	802513e <CRC_Lock+0x2a>
 8025132:	681c      	ldr	r4, [r3, #0]
 8025134:	f24c 2570 	movw	r5, #49776	@ 0xc270
 8025138:	4014      	ands	r4, r2
 802513a:	42ac      	cmp	r4, r5
 802513c:	d125      	bne.n	802518a <CRC_Lock+0x76>
 802513e:	4b25      	ldr	r3, [pc, #148]	@ (80251d4 <CRC_Lock+0xc0>)
 8025140:	681b      	ldr	r3, [r3, #0]
 8025142:	2b00      	cmp	r3, #0
 8025144:	d139      	bne.n	80251ba <CRC_Lock+0xa6>
 8025146:	4b24      	ldr	r3, [pc, #144]	@ (80251d8 <CRC_Lock+0xc4>)
 8025148:	681a      	ldr	r2, [r3, #0]
 802514a:	f3c2 020b 	ubfx	r2, r2, #0, #12
 802514e:	f5b2 6f8a 	cmp.w	r2, #1104	@ 0x450
 8025152:	d00d      	beq.n	8025170 <CRC_Lock+0x5c>
 8025154:	681a      	ldr	r2, [r3, #0]
 8025156:	f240 4483 	movw	r4, #1155	@ 0x483
 802515a:	f3c2 020b 	ubfx	r2, r2, #0, #12
 802515e:	42a2      	cmp	r2, r4
 8025160:	d006      	beq.n	8025170 <CRC_Lock+0x5c>
 8025162:	681b      	ldr	r3, [r3, #0]
 8025164:	f240 4285 	movw	r2, #1157	@ 0x485
 8025168:	f3c3 030b 	ubfx	r3, r3, #0, #12
 802516c:	4293      	cmp	r3, r2
 802516e:	d124      	bne.n	80251ba <CRC_Lock+0xa6>
 8025170:	4b1a      	ldr	r3, [pc, #104]	@ (80251dc <CRC_Lock+0xc8>)
 8025172:	2201      	movs	r2, #1
 8025174:	601a      	str	r2, [r3, #0]
 8025176:	681a      	ldr	r2, [r3, #0]
 8025178:	2a00      	cmp	r2, #0
 802517a:	d1fc      	bne.n	8025176 <CRC_Lock+0x62>
 802517c:	4b18      	ldr	r3, [pc, #96]	@ (80251e0 <CRC_Lock+0xcc>)
 802517e:	6018      	str	r0, [r3, #0]
 8025180:	6818      	ldr	r0, [r3, #0]
 8025182:	1a43      	subs	r3, r0, r1
 8025184:	4258      	negs	r0, r3
 8025186:	4158      	adcs	r0, r3
 8025188:	e00e      	b.n	80251a8 <CRC_Lock+0x94>
 802518a:	681b      	ldr	r3, [r3, #0]
 802518c:	4013      	ands	r3, r2
 802518e:	f24d 2220 	movw	r2, #53792	@ 0xd220
 8025192:	4293      	cmp	r3, r2
 8025194:	d111      	bne.n	80251ba <CRC_Lock+0xa6>
 8025196:	4b13      	ldr	r3, [pc, #76]	@ (80251e4 <CRC_Lock+0xd0>)
 8025198:	f240 4286 	movw	r2, #1158	@ 0x486
 802519c:	681b      	ldr	r3, [r3, #0]
 802519e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80251a2:	4293      	cmp	r3, r2
 80251a4:	d001      	beq.n	80251aa <CRC_Lock+0x96>
 80251a6:	2000      	movs	r0, #0
 80251a8:	bd30      	pop	{r4, r5, pc}
 80251aa:	4b0f      	ldr	r3, [pc, #60]	@ (80251e8 <CRC_Lock+0xd4>)
 80251ac:	2201      	movs	r2, #1
 80251ae:	601a      	str	r2, [r3, #0]
 80251b0:	681a      	ldr	r2, [r3, #0]
 80251b2:	2a00      	cmp	r2, #0
 80251b4:	d1fc      	bne.n	80251b0 <CRC_Lock+0x9c>
 80251b6:	4b0d      	ldr	r3, [pc, #52]	@ (80251ec <CRC_Lock+0xd8>)
 80251b8:	e7e1      	b.n	802517e <CRC_Lock+0x6a>
 80251ba:	4b0d      	ldr	r3, [pc, #52]	@ (80251f0 <CRC_Lock+0xdc>)
 80251bc:	2201      	movs	r2, #1
 80251be:	601a      	str	r2, [r3, #0]
 80251c0:	681a      	ldr	r2, [r3, #0]
 80251c2:	2a00      	cmp	r2, #0
 80251c4:	d1fc      	bne.n	80251c0 <CRC_Lock+0xac>
 80251c6:	4b0b      	ldr	r3, [pc, #44]	@ (80251f4 <CRC_Lock+0xe0>)
 80251c8:	e7d9      	b.n	802517e <CRC_Lock+0x6a>
 80251ca:	bf00      	nop
 80251cc:	e0002000 	.word	0xe0002000
 80251d0:	e000ed00 	.word	0xe000ed00
 80251d4:	e0042000 	.word	0xe0042000
 80251d8:	5c001000 	.word	0x5c001000
 80251dc:	58024c08 	.word	0x58024c08
 80251e0:	58024c00 	.word	0x58024c00
 80251e4:	46008ff0 	.word	0x46008ff0
 80251e8:	46024c08 	.word	0x46024c08
 80251ec:	46024c00 	.word	0x46024c00
 80251f0:	40023008 	.word	0x40023008
 80251f4:	40023000 	.word	0x40023000

080251f8 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>:
 80251f8:	6101      	str	r1, [r0, #16]
 80251fa:	4770      	bx	lr

080251fc <_ZN8touchgfx8Gestures4tickEv>:
 80251fc:	7b83      	ldrb	r3, [r0, #14]
 80251fe:	b14b      	cbz	r3, 8025214 <_ZN8touchgfx8Gestures4tickEv+0x18>
 8025200:	8903      	ldrh	r3, [r0, #8]
 8025202:	3301      	adds	r3, #1
 8025204:	b29b      	uxth	r3, r3
 8025206:	2b07      	cmp	r3, #7
 8025208:	8103      	strh	r3, [r0, #8]
 802520a:	bf81      	itttt	hi
 802520c:	2300      	movhi	r3, #0
 802520e:	8143      	strhhi	r3, [r0, #10]
 8025210:	8183      	strhhi	r3, [r0, #12]
 8025212:	7383      	strbhi	r3, [r0, #14]
 8025214:	4770      	bx	lr
	...

08025218 <_ZN8touchgfx8Gestures17registerDragEventEtttt>:
 8025218:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 802521c:	4698      	mov	r8, r3
 802521e:	8883      	ldrh	r3, [r0, #4]
 8025220:	4604      	mov	r4, r0
 8025222:	4617      	mov	r7, r2
 8025224:	f8ad 3006 	strh.w	r3, [sp, #6]
 8025228:	eba8 0303 	sub.w	r3, r8, r3
 802522c:	4a19      	ldr	r2, [pc, #100]	@ (8025294 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x7c>)
 802522e:	460e      	mov	r6, r1
 8025230:	b21b      	sxth	r3, r3
 8025232:	88c1      	ldrh	r1, [r0, #6]
 8025234:	9200      	str	r2, [sp, #0]
 8025236:	2000      	movs	r0, #0
 8025238:	2b00      	cmp	r3, #0
 802523a:	8aa2      	ldrh	r2, [r4, #20]
 802523c:	f8bd 5028 	ldrh.w	r5, [sp, #40]	@ 0x28
 8025240:	bfb8      	it	lt
 8025242:	425b      	neglt	r3, r3
 8025244:	f88d 0004 	strb.w	r0, [sp, #4]
 8025248:	f8ad 1008 	strh.w	r1, [sp, #8]
 802524c:	b21b      	sxth	r3, r3
 802524e:	f8ad 800a 	strh.w	r8, [sp, #10]
 8025252:	f8ad 500c 	strh.w	r5, [sp, #12]
 8025256:	4293      	cmp	r3, r2
 8025258:	dc07      	bgt.n	802526a <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x52>
 802525a:	1a69      	subs	r1, r5, r1
 802525c:	b209      	sxth	r1, r1
 802525e:	2900      	cmp	r1, #0
 8025260:	bfb8      	it	lt
 8025262:	4249      	neglt	r1, r1
 8025264:	b209      	sxth	r1, r1
 8025266:	428a      	cmp	r2, r1
 8025268:	da10      	bge.n	802528c <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x74>
 802526a:	6920      	ldr	r0, [r4, #16]
 802526c:	4669      	mov	r1, sp
 802526e:	eba8 0606 	sub.w	r6, r8, r6
 8025272:	1bef      	subs	r7, r5, r7
 8025274:	6803      	ldr	r3, [r0, #0]
 8025276:	685b      	ldr	r3, [r3, #4]
 8025278:	4798      	blx	r3
 802527a:	2300      	movs	r3, #0
 802527c:	2001      	movs	r0, #1
 802527e:	8166      	strh	r6, [r4, #10]
 8025280:	8123      	strh	r3, [r4, #8]
 8025282:	81a7      	strh	r7, [r4, #12]
 8025284:	f8a4 8004 	strh.w	r8, [r4, #4]
 8025288:	80e5      	strh	r5, [r4, #6]
 802528a:	73a0      	strb	r0, [r4, #14]
 802528c:	b004      	add	sp, #16
 802528e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8025292:	bf00      	nop
 8025294:	0802c7a8 	.word	0x0802c7a8

08025298 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>:
 8025298:	b5f0      	push	{r4, r5, r6, r7, lr}
 802529a:	461e      	mov	r6, r3
 802529c:	1e4b      	subs	r3, r1, #1
 802529e:	b085      	sub	sp, #20
 80252a0:	4604      	mov	r4, r0
 80252a2:	2b01      	cmp	r3, #1
 80252a4:	460d      	mov	r5, r1
 80252a6:	4617      	mov	r7, r2
 80252a8:	d84b      	bhi.n	8025342 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xaa>
 80252aa:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 80252ae:	1cd3      	adds	r3, r2, #3
 80252b0:	b29b      	uxth	r3, r3
 80252b2:	2b06      	cmp	r3, #6
 80252b4:	d916      	bls.n	80252e4 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x4c>
 80252b6:	f8df c0a0 	ldr.w	ip, [pc, #160]	@ 8025358 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 80252ba:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 80252be:	f8cd c004 	str.w	ip, [sp, #4]
 80252c2:	f04f 0c00 	mov.w	ip, #0
 80252c6:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 80252ca:	6900      	ldr	r0, [r0, #16]
 80252cc:	f8ad 100c 	strh.w	r1, [sp, #12]
 80252d0:	a901      	add	r1, sp, #4
 80252d2:	f88d c008 	strb.w	ip, [sp, #8]
 80252d6:	f8ad 200a 	strh.w	r2, [sp, #10]
 80252da:	f8ad 300e 	strh.w	r3, [sp, #14]
 80252de:	6803      	ldr	r3, [r0, #0]
 80252e0:	689b      	ldr	r3, [r3, #8]
 80252e2:	4798      	blx	r3
 80252e4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80252e8:	1cd3      	adds	r3, r2, #3
 80252ea:	b29b      	uxth	r3, r3
 80252ec:	2b06      	cmp	r3, #6
 80252ee:	d916      	bls.n	802531e <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 80252f0:	f8df c064 	ldr.w	ip, [pc, #100]	@ 8025358 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 80252f4:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 80252f8:	f8cd c004 	str.w	ip, [sp, #4]
 80252fc:	f04f 0c01 	mov.w	ip, #1
 8025300:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8025304:	6920      	ldr	r0, [r4, #16]
 8025306:	f8ad 100c 	strh.w	r1, [sp, #12]
 802530a:	a901      	add	r1, sp, #4
 802530c:	f88d c008 	strb.w	ip, [sp, #8]
 8025310:	f8ad 200a 	strh.w	r2, [sp, #10]
 8025314:	f8ad 300e 	strh.w	r3, [sp, #14]
 8025318:	6803      	ldr	r3, [r0, #0]
 802531a:	689b      	ldr	r3, [r3, #8]
 802531c:	4798      	blx	r3
 802531e:	4b0d      	ldr	r3, [pc, #52]	@ (8025354 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xbc>)
 8025320:	a901      	add	r1, sp, #4
 8025322:	6920      	ldr	r0, [r4, #16]
 8025324:	9301      	str	r3, [sp, #4]
 8025326:	2300      	movs	r3, #0
 8025328:	f88d 5008 	strb.w	r5, [sp, #8]
 802532c:	f8ad 700a 	strh.w	r7, [sp, #10]
 8025330:	f8ad 600c 	strh.w	r6, [sp, #12]
 8025334:	f8ad 300e 	strh.w	r3, [sp, #14]
 8025338:	6803      	ldr	r3, [r0, #0]
 802533a:	681b      	ldr	r3, [r3, #0]
 802533c:	4798      	blx	r3
 802533e:	b005      	add	sp, #20
 8025340:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8025342:	2900      	cmp	r1, #0
 8025344:	d1eb      	bne.n	802531e <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 8025346:	80a2      	strh	r2, [r4, #4]
 8025348:	80c6      	strh	r6, [r0, #6]
 802534a:	60a1      	str	r1, [r4, #8]
 802534c:	81a1      	strh	r1, [r4, #12]
 802534e:	73a1      	strb	r1, [r4, #14]
 8025350:	e7e5      	b.n	802531e <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 8025352:	bf00      	nop
 8025354:	0802c794 	.word	0x0802c794
 8025358:	0802c7bc 	.word	0x0802c7bc

0802535c <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.1>:
 802535c:	10c9      	asrs	r1, r1, #3
 802535e:	2900      	cmp	r1, #0
 8025360:	bfb8      	it	lt
 8025362:	4249      	neglt	r1, r1
 8025364:	2801      	cmp	r0, #1
 8025366:	d108      	bne.n	802537a <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.1+0x1e>
 8025368:	f3c1 0008 	ubfx	r0, r1, #0, #9
 802536c:	f5b0 7f80 	cmp.w	r0, #256	@ 0x100
 8025370:	4601      	mov	r1, r0
 8025372:	dd02      	ble.n	802537a <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.1+0x1e>
 8025374:	f5c0 7000 	rsb	r0, r0, #512	@ 0x200
 8025378:	4770      	bx	lr
 802537a:	29ff      	cmp	r1, #255	@ 0xff
 802537c:	bfa8      	it	ge
 802537e:	21ff      	movge	r1, #255	@ 0xff
 8025380:	4608      	mov	r0, r1
 8025382:	4770      	bx	lr

08025384 <_ZN8touchgfx10Rasterizer6lineToEii>:
 8025384:	b410      	push	{r4}
 8025386:	e9d0 3401 	ldrd	r3, r4, [r0, #4]
 802538a:	429c      	cmp	r4, r3
 802538c:	d803      	bhi.n	8025396 <_ZN8touchgfx10Rasterizer6lineToEii+0x12>
 802538e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8025392:	f7f0 ba5f 	b.w	8015854 <_ZN8touchgfx7Outline6lineToEii>
 8025396:	f85d 4b04 	ldr.w	r4, [sp], #4
 802539a:	4770      	bx	lr

0802539c <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh>:
 802539c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80253a0:	b08b      	sub	sp, #44	@ 0x2c
 80253a2:	4606      	mov	r6, r0
 80253a4:	468a      	mov	sl, r1
 80253a6:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80253aa:	f89d 3050 	ldrb.w	r3, [sp, #80]	@ 0x50
 80253ae:	9308      	str	r3, [sp, #32]
 80253b0:	f89d 3054 	ldrb.w	r3, [sp, #84]	@ 0x54
 80253b4:	9309      	str	r3, [sp, #36]	@ 0x24
 80253b6:	f7f0 fbb8 	bl	8015b2a <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv>
 80253ba:	68b5      	ldr	r5, [r6, #8]
 80253bc:	4604      	mov	r4, r0
 80253be:	2d00      	cmp	r5, #0
 80253c0:	d044      	beq.n	802544c <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xb0>
 80253c2:	6873      	ldr	r3, [r6, #4]
 80253c4:	42ab      	cmp	r3, r5
 80253c6:	d33d      	bcc.n	8025444 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xa8>
 80253c8:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 80253cc:	f04f 0800 	mov.w	r8, #0
 80253d0:	f9b6 2034 	ldrsh.w	r2, [r6, #52]	@ 0x34
 80253d4:	eb02 0b03 	add.w	fp, r2, r3
 80253d8:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 80253dc:	fb02 1203 	mla	r2, r2, r3, r1
 80253e0:	9205      	str	r2, [sp, #20]
 80253e2:	1e6a      	subs	r2, r5, #1
 80253e4:	9204      	str	r2, [sp, #16]
 80253e6:	f9b4 9002 	ldrsh.w	r9, [r4, #2]
 80253ea:	f9b4 7000 	ldrsh.w	r7, [r4]
 80253ee:	454b      	cmp	r3, r9
 80253f0:	463a      	mov	r2, r7
 80253f2:	d008      	beq.n	8025406 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x6a>
 80253f4:	f9b6 3034 	ldrsh.w	r3, [r6, #52]	@ 0x34
 80253f8:	eb03 0b09 	add.w	fp, r3, r9
 80253fc:	e9dd 1306 	ldrd	r1, r3, [sp, #24]
 8025400:	fb03 1309 	mla	r3, r3, r9, r1
 8025404:	9305      	str	r3, [sp, #20]
 8025406:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 802540a:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 802540e:	4498      	add	r8, r3
 8025410:	9b04      	ldr	r3, [sp, #16]
 8025412:	3b01      	subs	r3, #1
 8025414:	9304      	str	r3, [sp, #16]
 8025416:	9b04      	ldr	r3, [sp, #16]
 8025418:	3301      	adds	r3, #1
 802541a:	d015      	beq.n	8025448 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xac>
 802541c:	f934 3f08 	ldrsh.w	r3, [r4, #8]!
 8025420:	42bb      	cmp	r3, r7
 8025422:	d117      	bne.n	8025454 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xb8>
 8025424:	f9b4 0002 	ldrsh.w	r0, [r4, #2]
 8025428:	9b04      	ldr	r3, [sp, #16]
 802542a:	4548      	cmp	r0, r9
 802542c:	f103 33ff 	add.w	r3, r3, #4294967295
 8025430:	d17d      	bne.n	802552e <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x192>
 8025432:	f9b4 0006 	ldrsh.w	r0, [r4, #6]
 8025436:	4401      	add	r1, r0
 8025438:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 802543c:	4480      	add	r8, r0
 802543e:	e7e9      	b.n	8025414 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x78>
 8025440:	461f      	mov	r7, r3
 8025442:	e042      	b.n	80254ca <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x12e>
 8025444:	2000      	movs	r0, #0
 8025446:	e002      	b.n	802544e <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xb2>
 8025448:	2900      	cmp	r1, #0
 802544a:	d16d      	bne.n	8025528 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x18c>
 802544c:	2001      	movs	r0, #1
 802544e:	b00b      	add	sp, #44	@ 0x2c
 8025450:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8025454:	b379      	cbz	r1, 80254b6 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x11a>
 8025456:	2f00      	cmp	r7, #0
 8025458:	db29      	blt.n	80254ae <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x112>
 802545a:	f9b6 3036 	ldrsh.w	r3, [r6, #54]	@ 0x36
 802545e:	42bb      	cmp	r3, r7
 8025460:	dd25      	ble.n	80254ae <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x112>
 8025462:	ebc1 1188 	rsb	r1, r1, r8, lsl #6
 8025466:	f896 0030 	ldrb.w	r0, [r6, #48]	@ 0x30
 802546a:	f7ff ff77 	bl	802535c <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.1>
 802546e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8025470:	fb10 f003 	smulbb	r0, r0, r3
 8025474:	b280      	uxth	r0, r0
 8025476:	1c41      	adds	r1, r0, #1
 8025478:	eb01 2110 	add.w	r1, r1, r0, lsr #8
 802547c:	1209      	asrs	r1, r1, #8
 802547e:	f011 0fff 	tst.w	r1, #255	@ 0xff
 8025482:	d014      	beq.n	80254ae <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x112>
 8025484:	b2c9      	uxtb	r1, r1
 8025486:	9808      	ldr	r0, [sp, #32]
 8025488:	b2ba      	uxth	r2, r7
 802548a:	8e73      	ldrh	r3, [r6, #50]	@ 0x32
 802548c:	9102      	str	r1, [sp, #8]
 802548e:	2101      	movs	r1, #1
 8025490:	4413      	add	r3, r2
 8025492:	4402      	add	r2, r0
 8025494:	9101      	str	r1, [sp, #4]
 8025496:	fa0f f18b 	sxth.w	r1, fp
 802549a:	f8da 0000 	ldr.w	r0, [sl]
 802549e:	b21b      	sxth	r3, r3
 80254a0:	9100      	str	r1, [sp, #0]
 80254a2:	b212      	sxth	r2, r2
 80254a4:	6941      	ldr	r1, [r0, #20]
 80254a6:	4650      	mov	r0, sl
 80254a8:	460d      	mov	r5, r1
 80254aa:	9905      	ldr	r1, [sp, #20]
 80254ac:	47a8      	blx	r5
 80254ae:	9b04      	ldr	r3, [sp, #16]
 80254b0:	1c7a      	adds	r2, r7, #1
 80254b2:	3301      	adds	r3, #1
 80254b4:	d0ca      	beq.n	802544c <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xb0>
 80254b6:	f9b4 7000 	ldrsh.w	r7, [r4]
 80254ba:	1abb      	subs	r3, r7, r2
 80254bc:	2b00      	cmp	r3, #0
 80254be:	dd31      	ble.n	8025524 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x188>
 80254c0:	2a00      	cmp	r2, #0
 80254c2:	dabd      	bge.n	8025440 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xa4>
 80254c4:	2f00      	cmp	r7, #0
 80254c6:	dd2d      	ble.n	8025524 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x188>
 80254c8:	2200      	movs	r2, #0
 80254ca:	f9b6 3036 	ldrsh.w	r3, [r6, #54]	@ 0x36
 80254ce:	19d1      	adds	r1, r2, r7
 80254d0:	4299      	cmp	r1, r3
 80254d2:	db02      	blt.n	80254da <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x13e>
 80254d4:	1a9f      	subs	r7, r3, r2
 80254d6:	2f00      	cmp	r7, #0
 80254d8:	dd24      	ble.n	8025524 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x188>
 80254da:	ea4f 1188 	mov.w	r1, r8, lsl #6
 80254de:	f896 0030 	ldrb.w	r0, [r6, #48]	@ 0x30
 80254e2:	f7ff ff3b 	bl	802535c <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.1>
 80254e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80254e8:	fb10 f003 	smulbb	r0, r0, r3
 80254ec:	b280      	uxth	r0, r0
 80254ee:	1c41      	adds	r1, r0, #1
 80254f0:	eb01 2110 	add.w	r1, r1, r0, lsr #8
 80254f4:	1209      	asrs	r1, r1, #8
 80254f6:	f011 0fff 	tst.w	r1, #255	@ 0xff
 80254fa:	d013      	beq.n	8025524 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x188>
 80254fc:	b292      	uxth	r2, r2
 80254fe:	9808      	ldr	r0, [sp, #32]
 8025500:	b2c9      	uxtb	r1, r1
 8025502:	8e73      	ldrh	r3, [r6, #50]	@ 0x32
 8025504:	b23f      	sxth	r7, r7
 8025506:	4413      	add	r3, r2
 8025508:	9102      	str	r1, [sp, #8]
 802550a:	4402      	add	r2, r0
 802550c:	fa0f f18b 	sxth.w	r1, fp
 8025510:	f8da 0000 	ldr.w	r0, [sl]
 8025514:	b21b      	sxth	r3, r3
 8025516:	9100      	str	r1, [sp, #0]
 8025518:	b212      	sxth	r2, r2
 802551a:	9701      	str	r7, [sp, #4]
 802551c:	9905      	ldr	r1, [sp, #20]
 802551e:	6947      	ldr	r7, [r0, #20]
 8025520:	4650      	mov	r0, sl
 8025522:	47b8      	blx	r7
 8025524:	464b      	mov	r3, r9
 8025526:	e75e      	b.n	80253e6 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x4a>
 8025528:	2f00      	cmp	r7, #0
 802552a:	da96      	bge.n	802545a <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xbe>
 802552c:	e78e      	b.n	802544c <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xb0>
 802552e:	2900      	cmp	r1, #0
 8025530:	d0f8      	beq.n	8025524 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x188>
 8025532:	e790      	b.n	8025456 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xba>

08025534 <_ZN8touchgfx6CanvasC1EPKNS_15AbstractPainterERKNS_4RectES6_h>:
 8025534:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8025538:	461e      	mov	r6, r3
 802553a:	4b36      	ldr	r3, [pc, #216]	@ (8025614 <_ZN8touchgfx6CanvasC1EPKNS_15AbstractPainterERKNS_4RectES6_h+0xe0>)
 802553c:	2500      	movs	r5, #0
 802553e:	f100 0814 	add.w	r8, r0, #20
 8025542:	4604      	mov	r4, r0
 8025544:	4617      	mov	r7, r2
 8025546:	e9c0 3100 	strd	r3, r1, [r0]
 802554a:	f9b2 3004 	ldrsh.w	r3, [r2, #4]
 802554e:	8185      	strh	r5, [r0, #12]
 8025550:	8103      	strh	r3, [r0, #8]
 8025552:	f89d 3020 	ldrb.w	r3, [sp, #32]
 8025556:	81c5      	strh	r5, [r0, #14]
 8025558:	7283      	strb	r3, [r0, #10]
 802555a:	8205      	strh	r5, [r0, #16]
 802555c:	8245      	strh	r5, [r0, #18]
 802555e:	4640      	mov	r0, r8
 8025560:	f7ef fcbe 	bl	8014ee0 <_ZN8touchgfx7OutlineC1Ev>
 8025564:	f884 5044 	strb.w	r5, [r4, #68]	@ 0x44
 8025568:	f8a4 5046 	strh.w	r5, [r4, #70]	@ 0x46
 802556c:	466b      	mov	r3, sp
 802556e:	f8a4 5048 	strh.w	r5, [r4, #72]	@ 0x48
 8025572:	f8a4 504a 	strh.w	r5, [r4, #74]	@ 0x4a
 8025576:	f884 505c 	strb.w	r5, [r4, #92]	@ 0x5c
 802557a:	f884 505d 	strb.w	r5, [r4, #93]	@ 0x5d
 802557e:	f8a4 5068 	strh.w	r5, [r4, #104]	@ 0x68
 8025582:	e9c4 5513 	strd	r5, r5, [r4, #76]	@ 0x4c
 8025586:	e9c4 5515 	strd	r5, r5, [r4, #84]	@ 0x54
 802558a:	e9c4 5518 	strd	r5, r5, [r4, #96]	@ 0x60
 802558e:	e9c4 551b 	strd	r5, r5, [r4, #108]	@ 0x6c
 8025592:	6830      	ldr	r0, [r6, #0]
 8025594:	6871      	ldr	r1, [r6, #4]
 8025596:	8872      	ldrh	r2, [r6, #2]
 8025598:	8835      	ldrh	r5, [r6, #0]
 802559a:	c303      	stmia	r3!, {r0, r1}
 802559c:	887b      	ldrh	r3, [r7, #2]
 802559e:	f9b6 0004 	ldrsh.w	r0, [r6, #4]
 80255a2:	4413      	add	r3, r2
 80255a4:	883a      	ldrh	r2, [r7, #0]
 80255a6:	f9b6 1006 	ldrsh.w	r1, [r6, #6]
 80255aa:	442a      	add	r2, r5
 80255ac:	81e3      	strh	r3, [r4, #14]
 80255ae:	8220      	strh	r0, [r4, #16]
 80255b0:	4668      	mov	r0, sp
 80255b2:	81a2      	strh	r2, [r4, #12]
 80255b4:	8261      	strh	r1, [r4, #18]
 80255b6:	4639      	mov	r1, r7
 80255b8:	f7f1 fe9a 	bl	80172f0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80255bc:	f104 000c 	add.w	r0, r4, #12
 80255c0:	f7f1 fe52 	bl	8017268 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80255c4:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
 80255c8:	f8bd 2000 	ldrh.w	r2, [sp]
 80255cc:	4640      	mov	r0, r8
 80255ce:	f8a4 3048 	strh.w	r3, [r4, #72]	@ 0x48
 80255d2:	f8a4 2046 	strh.w	r2, [r4, #70]	@ 0x46
 80255d6:	f7ef fc67 	bl	8014ea8 <_ZN8touchgfx7Outline5resetEv>
 80255da:	f9bd 3000 	ldrsh.w	r3, [sp]
 80255de:	f9b4 2012 	ldrsh.w	r2, [r4, #18]
 80255e2:	4620      	mov	r0, r4
 80255e4:	015b      	lsls	r3, r3, #5
 80255e6:	64e3      	str	r3, [r4, #76]	@ 0x4c
 80255e8:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
 80255ec:	015b      	lsls	r3, r3, #5
 80255ee:	6523      	str	r3, [r4, #80]	@ 0x50
 80255f0:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 80255f4:	015b      	lsls	r3, r3, #5
 80255f6:	6563      	str	r3, [r4, #84]	@ 0x54
 80255f8:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
 80255fc:	015b      	lsls	r3, r3, #5
 80255fe:	65a3      	str	r3, [r4, #88]	@ 0x58
 8025600:	f9b4 3010 	ldrsh.w	r3, [r4, #16]
 8025604:	f8a4 304a 	strh.w	r3, [r4, #74]	@ 0x4a
 8025608:	e9c4 320f 	strd	r3, r2, [r4, #60]	@ 0x3c
 802560c:	b002      	add	sp, #8
 802560e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8025612:	bf00      	nop
 8025614:	0802ca4c 	.word	0x0802ca4c

08025618 <_ZN8touchgfx6Canvas5closeEv>:
 8025618:	b538      	push	{r3, r4, r5, lr}
 802561a:	f890 305c 	ldrb.w	r3, [r0, #92]	@ 0x5c
 802561e:	4604      	mov	r4, r0
 8025620:	b193      	cbz	r3, 8025648 <_ZN8touchgfx6Canvas5closeEv+0x30>
 8025622:	f890 3068 	ldrb.w	r3, [r0, #104]	@ 0x68
 8025626:	f890 2069 	ldrb.w	r2, [r0, #105]	@ 0x69
 802562a:	4213      	tst	r3, r2
 802562c:	d10c      	bne.n	8025648 <_ZN8touchgfx6Canvas5closeEv+0x30>
 802562e:	f100 0514 	add.w	r5, r0, #20
 8025632:	b123      	cbz	r3, 802563e <_ZN8touchgfx6Canvas5closeEv+0x26>
 8025634:	e9d0 1218 	ldrd	r1, r2, [r0, #96]	@ 0x60
 8025638:	4628      	mov	r0, r5
 802563a:	f7ff fea3 	bl	8025384 <_ZN8touchgfx10Rasterizer6lineToEii>
 802563e:	4628      	mov	r0, r5
 8025640:	e9d4 121b 	ldrd	r1, r2, [r4, #108]	@ 0x6c
 8025644:	f7ff fe9e 	bl	8025384 <_ZN8touchgfx10Rasterizer6lineToEii>
 8025648:	2300      	movs	r3, #0
 802564a:	f884 305c 	strb.w	r3, [r4, #92]	@ 0x5c
 802564e:	e9d4 0306 	ldrd	r0, r3, [r4, #24]
 8025652:	4298      	cmp	r0, r3
 8025654:	bf34      	ite	cc
 8025656:	2000      	movcc	r0, #0
 8025658:	2001      	movcs	r0, #1
 802565a:	bd38      	pop	{r3, r4, r5, pc}

0802565c <_ZN8touchgfx6Canvas6renderEh>:
 802565c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8025660:	7a85      	ldrb	r5, [r0, #10]
 8025662:	4604      	mov	r4, r0
 8025664:	4369      	muls	r1, r5
 8025666:	1c4d      	adds	r5, r1, #1
 8025668:	eb05 2511 	add.w	r5, r5, r1, lsr #8
 802566c:	122d      	asrs	r5, r5, #8
 802566e:	f000 8098 	beq.w	80257a2 <_ZN8touchgfx6Canvas6renderEh+0x146>
 8025672:	f890 305d 	ldrb.w	r3, [r0, #93]	@ 0x5d
 8025676:	2b00      	cmp	r3, #0
 8025678:	f000 8093 	beq.w	80257a2 <_ZN8touchgfx6Canvas6renderEh+0x146>
 802567c:	f7ff ffcc 	bl	8025618 <_ZN8touchgfx6Canvas5closeEv>
 8025680:	4607      	mov	r7, r0
 8025682:	2800      	cmp	r0, #0
 8025684:	d045      	beq.n	8025712 <_ZN8touchgfx6Canvas6renderEh+0xb6>
 8025686:	6860      	ldr	r0, [r4, #4]
 8025688:	4e47      	ldr	r6, [pc, #284]	@ (80257a8 <_ZN8touchgfx6Canvas6renderEh+0x14c>)
 802568a:	6803      	ldr	r3, [r0, #0]
 802568c:	6837      	ldr	r7, [r6, #0]
 802568e:	689b      	ldr	r3, [r3, #8]
 8025690:	4798      	blx	r3
 8025692:	4601      	mov	r1, r0
 8025694:	4638      	mov	r0, r7
 8025696:	f7ec f841 	bl	801171c <_ZN8touchgfx3HAL33lockFrameBufferForRenderingMethodENS0_15RenderingMethodE>
 802569a:	4607      	mov	r7, r0
 802569c:	f7de faac 	bl	8003bf8 <_ZN8touchgfx3HAL3lcdEv>
 80256a0:	6803      	ldr	r3, [r0, #0]
 80256a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80256a4:	4798      	blx	r3
 80256a6:	4680      	mov	r8, r0
 80256a8:	f7de faa6 	bl	8003bf8 <_ZN8touchgfx3HAL3lcdEv>
 80256ac:	6803      	ldr	r3, [r0, #0]
 80256ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80256b0:	4798      	blx	r3
 80256b2:	280b      	cmp	r0, #11
 80256b4:	d85a      	bhi.n	802576c <_ZN8touchgfx6Canvas6renderEh+0x110>
 80256b6:	e8df f000 	tbb	[pc, r0]
 80256ba:	5b50      	.short	0x5b50
 80256bc:	3059066b 	.word	0x3059066b
 80256c0:	64646440 	.word	0x64646440
 80256c4:	6464      	.short	0x6464
 80256c6:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
 80256ca:	2208      	movs	r2, #8
 80256cc:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 80256d0:	fb91 f2f2 	sdiv	r2, r1, r2
 80256d4:	fb08 2303 	mla	r3, r8, r3, r2
 80256d8:	441f      	add	r7, r3
 80256da:	424b      	negs	r3, r1
 80256dc:	f001 0107 	and.w	r1, r1, #7
 80256e0:	f003 0307 	and.w	r3, r3, #7
 80256e4:	bf58      	it	pl
 80256e6:	4259      	negpl	r1, r3
 80256e8:	b2c9      	uxtb	r1, r1
 80256ea:	b2ed      	uxtb	r5, r5
 80256ec:	463a      	mov	r2, r7
 80256ee:	fa0f f388 	sxth.w	r3, r8
 80256f2:	f104 0014 	add.w	r0, r4, #20
 80256f6:	e9cd 1500 	strd	r1, r5, [sp]
 80256fa:	6861      	ldr	r1, [r4, #4]
 80256fc:	f7ff fe4e 	bl	802539c <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh>
 8025700:	4607      	mov	r7, r0
 8025702:	6860      	ldr	r0, [r4, #4]
 8025704:	6803      	ldr	r3, [r0, #0]
 8025706:	691b      	ldr	r3, [r3, #16]
 8025708:	4798      	blx	r3
 802570a:	6830      	ldr	r0, [r6, #0]
 802570c:	6803      	ldr	r3, [r0, #0]
 802570e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8025710:	4798      	blx	r3
 8025712:	4638      	mov	r0, r7
 8025714:	b002      	add	sp, #8
 8025716:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802571a:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
 802571e:	2204      	movs	r2, #4
 8025720:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 8025724:	fb91 f2f2 	sdiv	r2, r1, r2
 8025728:	fb08 2303 	mla	r3, r8, r3, r2
 802572c:	441f      	add	r7, r3
 802572e:	424b      	negs	r3, r1
 8025730:	f001 0103 	and.w	r1, r1, #3
 8025734:	f003 0303 	and.w	r3, r3, #3
 8025738:	e7d4      	b.n	80256e4 <_ZN8touchgfx6Canvas6renderEh+0x88>
 802573a:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
 802573e:	2202      	movs	r2, #2
 8025740:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 8025744:	2900      	cmp	r1, #0
 8025746:	fb91 f2f2 	sdiv	r2, r1, r2
 802574a:	f001 0101 	and.w	r1, r1, #1
 802574e:	fb08 2303 	mla	r3, r8, r3, r2
 8025752:	bfb8      	it	lt
 8025754:	4249      	neglt	r1, r1
 8025756:	441f      	add	r7, r3
 8025758:	e7c6      	b.n	80256e8 <_ZN8touchgfx6Canvas6renderEh+0x8c>
 802575a:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 802575e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8025762:	fb08 f303 	mul.w	r3, r8, r3
 8025766:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 802576a:	441f      	add	r7, r3
 802576c:	2100      	movs	r1, #0
 802576e:	e7bc      	b.n	80256ea <_ZN8touchgfx6Canvas6renderEh+0x8e>
 8025770:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 8025774:	2103      	movs	r1, #3
 8025776:	fb08 f203 	mul.w	r2, r8, r3
 802577a:	89a3      	ldrh	r3, [r4, #12]
 802577c:	fb13 2301 	smlabb	r3, r3, r1, r2
 8025780:	e7f3      	b.n	802576a <_ZN8touchgfx6Canvas6renderEh+0x10e>
 8025782:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 8025786:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 802578a:	fb08 2303 	mla	r3, r8, r3, r2
 802578e:	e7ec      	b.n	802576a <_ZN8touchgfx6Canvas6renderEh+0x10e>
 8025790:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 8025794:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8025798:	fb08 f303 	mul.w	r3, r8, r3
 802579c:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 80257a0:	e7e3      	b.n	802576a <_ZN8touchgfx6Canvas6renderEh+0x10e>
 80257a2:	2701      	movs	r7, #1
 80257a4:	e7b5      	b.n	8025712 <_ZN8touchgfx6Canvas6renderEh+0xb6>
 80257a6:	bf00      	nop
 80257a8:	24028e20 	.word	0x24028e20

080257ac <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>:
 80257ac:	4b06      	ldr	r3, [pc, #24]	@ (80257c8 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_+0x1c>)
 80257ae:	b510      	push	{r4, lr}
 80257b0:	781b      	ldrb	r3, [r3, #0]
 80257b2:	2b01      	cmp	r3, #1
 80257b4:	d107      	bne.n	80257c6 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_+0x1a>
 80257b6:	f9b0 0008 	ldrsh.w	r0, [r0, #8]
 80257ba:	680b      	ldr	r3, [r1, #0]
 80257bc:	6814      	ldr	r4, [r2, #0]
 80257be:	ebc3 1340 	rsb	r3, r3, r0, lsl #5
 80257c2:	6013      	str	r3, [r2, #0]
 80257c4:	600c      	str	r4, [r1, #0]
 80257c6:	bd10      	pop	{r4, pc}
 80257c8:	24028e18 	.word	0x24028e18

080257cc <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_>:
 80257cc:	b513      	push	{r0, r1, r4, lr}
 80257ce:	f890 305c 	ldrb.w	r3, [r0, #92]	@ 0x5c
 80257d2:	4604      	mov	r4, r0
 80257d4:	e9cd 2100 	strd	r2, r1, [sp]
 80257d8:	b9a3      	cbnz	r3, 8025804 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x38>
 80257da:	466a      	mov	r2, sp
 80257dc:	a901      	add	r1, sp, #4
 80257de:	4620      	mov	r0, r4
 80257e0:	f7ff ffe4 	bl	80257ac <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>
 80257e4:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 80257e6:	9901      	ldr	r1, [sp, #4]
 80257e8:	9a00      	ldr	r2, [sp, #0]
 80257ea:	1ac9      	subs	r1, r1, r3
 80257ec:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 80257ee:	1ad2      	subs	r2, r2, r3
 80257f0:	9101      	str	r1, [sp, #4]
 80257f2:	2a00      	cmp	r2, #0
 80257f4:	9200      	str	r2, [sp, #0]
 80257f6:	da0b      	bge.n	8025810 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x44>
 80257f8:	2301      	movs	r3, #1
 80257fa:	2900      	cmp	r1, #0
 80257fc:	da0e      	bge.n	802581c <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x50>
 80257fe:	f043 0304 	orr.w	r3, r3, #4
 8025802:	e013      	b.n	802582c <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x60>
 8025804:	f7ff ff08 	bl	8025618 <_ZN8touchgfx6Canvas5closeEv>
 8025808:	2800      	cmp	r0, #0
 802580a:	d1e6      	bne.n	80257da <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0xe>
 802580c:	b002      	add	sp, #8
 802580e:	bd10      	pop	{r4, pc}
 8025810:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8025812:	429a      	cmp	r2, r3
 8025814:	bfac      	ite	ge
 8025816:	2302      	movge	r3, #2
 8025818:	2300      	movlt	r3, #0
 802581a:	e7ee      	b.n	80257fa <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x2e>
 802581c:	6d60      	ldr	r0, [r4, #84]	@ 0x54
 802581e:	4281      	cmp	r1, r0
 8025820:	bfac      	ite	ge
 8025822:	2008      	movge	r0, #8
 8025824:	2000      	movlt	r0, #0
 8025826:	4318      	orrs	r0, r3
 8025828:	b2c3      	uxtb	r3, r0
 802582a:	b158      	cbz	r0, 8025844 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x78>
 802582c:	2200      	movs	r2, #0
 802582e:	f884 205c 	strb.w	r2, [r4, #92]	@ 0x5c
 8025832:	9901      	ldr	r1, [sp, #4]
 8025834:	9a00      	ldr	r2, [sp, #0]
 8025836:	66e1      	str	r1, [r4, #108]	@ 0x6c
 8025838:	6722      	str	r2, [r4, #112]	@ 0x70
 802583a:	f884 3068 	strb.w	r3, [r4, #104]	@ 0x68
 802583e:	e9c4 1218 	strd	r1, r2, [r4, #96]	@ 0x60
 8025842:	e7e3      	b.n	802580c <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x40>
 8025844:	f884 0069 	strb.w	r0, [r4, #105]	@ 0x69
 8025848:	e9d4 3006 	ldrd	r3, r0, [r4, #24]
 802584c:	4298      	cmp	r0, r3
 802584e:	d803      	bhi.n	8025858 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x8c>
 8025850:	f104 0014 	add.w	r0, r4, #20
 8025854:	f7f0 f818 	bl	8015888 <_ZN8touchgfx7Outline6moveToEii>
 8025858:	2301      	movs	r3, #1
 802585a:	f884 305c 	strb.w	r3, [r4, #92]	@ 0x5c
 802585e:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
 8025862:	2300      	movs	r3, #0
 8025864:	e7e5      	b.n	8025832 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x66>

08025866 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>:
 8025866:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8025868:	ab02      	add	r3, sp, #8
 802586a:	4604      	mov	r4, r0
 802586c:	9101      	str	r1, [sp, #4]
 802586e:	a901      	add	r1, sp, #4
 8025870:	f843 2d08 	str.w	r2, [r3, #-8]!
 8025874:	461a      	mov	r2, r3
 8025876:	f7ff ff99 	bl	80257ac <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>
 802587a:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 802587c:	9901      	ldr	r1, [sp, #4]
 802587e:	9a00      	ldr	r2, [sp, #0]
 8025880:	1ac9      	subs	r1, r1, r3
 8025882:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8025884:	1ad2      	subs	r2, r2, r3
 8025886:	9101      	str	r1, [sp, #4]
 8025888:	2a00      	cmp	r2, #0
 802588a:	9200      	str	r2, [sp, #0]
 802588c:	db1c      	blt.n	80258c8 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x62>
 802588e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8025890:	429a      	cmp	r2, r3
 8025892:	bfac      	ite	ge
 8025894:	2002      	movge	r0, #2
 8025896:	2000      	movlt	r0, #0
 8025898:	2900      	cmp	r1, #0
 802589a:	db17      	blt.n	80258cc <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x66>
 802589c:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 802589e:	4299      	cmp	r1, r3
 80258a0:	bfac      	ite	ge
 80258a2:	2308      	movge	r3, #8
 80258a4:	2300      	movlt	r3, #0
 80258a6:	4303      	orrs	r3, r0
 80258a8:	f894 0068 	ldrb.w	r0, [r4, #104]	@ 0x68
 80258ac:	b2dd      	uxtb	r5, r3
 80258ae:	b978      	cbnz	r0, 80258d0 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x6a>
 80258b0:	f104 0014 	add.w	r0, r4, #20
 80258b4:	f7ff fd66 	bl	8025384 <_ZN8touchgfx10Rasterizer6lineToEii>
 80258b8:	9b01      	ldr	r3, [sp, #4]
 80258ba:	f884 5068 	strb.w	r5, [r4, #104]	@ 0x68
 80258be:	6623      	str	r3, [r4, #96]	@ 0x60
 80258c0:	9b00      	ldr	r3, [sp, #0]
 80258c2:	6663      	str	r3, [r4, #100]	@ 0x64
 80258c4:	b002      	add	sp, #8
 80258c6:	bd70      	pop	{r4, r5, r6, pc}
 80258c8:	2001      	movs	r0, #1
 80258ca:	e7e5      	b.n	8025898 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x32>
 80258cc:	2304      	movs	r3, #4
 80258ce:	e7ea      	b.n	80258a6 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x40>
 80258d0:	b113      	cbz	r3, 80258d8 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x72>
 80258d2:	ea10 0305 	ands.w	r3, r0, r5
 80258d6:	d11c      	bne.n	8025912 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0xac>
 80258d8:	f894 305c 	ldrb.w	r3, [r4, #92]	@ 0x5c
 80258dc:	f104 0614 	add.w	r6, r4, #20
 80258e0:	e9d4 1218 	ldrd	r1, r2, [r4, #96]	@ 0x60
 80258e4:	b98b      	cbnz	r3, 802590a <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0xa4>
 80258e6:	f884 0069 	strb.w	r0, [r4, #105]	@ 0x69
 80258ea:	e9d4 3006 	ldrd	r3, r0, [r4, #24]
 80258ee:	4298      	cmp	r0, r3
 80258f0:	d802      	bhi.n	80258f8 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x92>
 80258f2:	4630      	mov	r0, r6
 80258f4:	f7ef ffc8 	bl	8015888 <_ZN8touchgfx7Outline6moveToEii>
 80258f8:	2301      	movs	r3, #1
 80258fa:	f884 305c 	strb.w	r3, [r4, #92]	@ 0x5c
 80258fe:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
 8025902:	4630      	mov	r0, r6
 8025904:	e9dd 2100 	ldrd	r2, r1, [sp]
 8025908:	e7d4      	b.n	80258b4 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x4e>
 802590a:	4630      	mov	r0, r6
 802590c:	f7ff fd3a 	bl	8025384 <_ZN8touchgfx10Rasterizer6lineToEii>
 8025910:	e7f7      	b.n	8025902 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x9c>
 8025912:	461d      	mov	r5, r3
 8025914:	e7d0      	b.n	80258b8 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x52>
	...

08025918 <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj>:
 8025918:	b538      	push	{r3, r4, r5, lr}
 802591a:	ed2d 8b10 	vpush	{d8-d15}
 802591e:	eef6 ba00 	vmov.f32	s23, #96	@ 0x3f000000  0.5
 8025922:	4605      	mov	r5, r0
 8025924:	eeb0 ca40 	vmov.f32	s24, s0
 8025928:	460c      	mov	r4, r1
 802592a:	eef0 ca60 	vmov.f32	s25, s1
 802592e:	ed9f ba57 	vldr	s22, [pc, #348]	@ 8025a8c <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj+0x174>
 8025932:	eeb0 da41 	vmov.f32	s26, s2
 8025936:	eef0 da61 	vmov.f32	s27, s3
 802593a:	eeb0 ea42 	vmov.f32	s28, s4
 802593e:	eef0 ea62 	vmov.f32	s29, s5
 8025942:	eef0 aa6b 	vmov.f32	s21, s23
 8025946:	2c08      	cmp	r4, #8
 8025948:	d86e      	bhi.n	8025a28 <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj+0x110>
 802594a:	ee7e 6a4c 	vsub.f32	s13, s28, s24
 802594e:	ee7d 7aee 	vsub.f32	s15, s27, s29
 8025952:	ee3d 6a4e 	vsub.f32	s12, s26, s28
 8025956:	ee3e 7aec 	vsub.f32	s14, s29, s25
 802595a:	ee66 7ae7 	vnmul.f32	s15, s13, s15
 802595e:	ee3c fa0d 	vadd.f32	s30, s24, s26
 8025962:	ee7c faad 	vadd.f32	s31, s25, s27
 8025966:	eee6 7a07 	vfma.f32	s15, s12, s14
 802596a:	ee7d 9a0e 	vadd.f32	s19, s26, s28
 802596e:	ee3d aaae 	vadd.f32	s20, s27, s29
 8025972:	ee2f fa2b 	vmul.f32	s30, s30, s23
 8025976:	ee6f faab 	vmul.f32	s31, s31, s23
 802597a:	ee69 9aab 	vmul.f32	s19, s19, s23
 802597e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8025982:	ee2a aa2b 	vmul.f32	s20, s20, s23
 8025986:	ee7f 8a29 	vadd.f32	s17, s30, s19
 802598a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802598e:	ee3f 9a8a 	vadd.f32	s18, s31, s20
 8025992:	ee68 8aab 	vmul.f32	s17, s17, s23
 8025996:	bf48      	it	mi
 8025998:	eef1 7a67 	vnegmi.f32	s15, s15
 802599c:	ee29 9a2b 	vmul.f32	s18, s18, s23
 80259a0:	eeb5 6a00 	vmov.f32	s12, #80	@ 0x3e800000  0.250
 80259a4:	eef4 7acb 	vcmpe.f32	s15, s22
 80259a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80259ac:	dd3f      	ble.n	8025a2e <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj+0x116>
 80259ae:	ee27 7a07 	vmul.f32	s14, s14, s14
 80259b2:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80259b6:	eea6 7aa6 	vfma.f32	s14, s13, s13
 80259ba:	ee27 7a06 	vmul.f32	s14, s14, s12
 80259be:	eef4 7ac7 	vcmpe.f32	s15, s14
 80259c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80259c6:	d847      	bhi.n	8025a58 <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj+0x140>
 80259c8:	ee7e 0a4d 	vsub.f32	s1, s28, s26
 80259cc:	ee3e 0aed 	vsub.f32	s0, s29, s27
 80259d0:	f001 f905 	bl	8026bde <atan2f>
 80259d4:	eeb0 8a40 	vmov.f32	s16, s0
 80259d8:	ee7d 0a4c 	vsub.f32	s1, s26, s24
 80259dc:	ee3d 0aec 	vsub.f32	s0, s27, s25
 80259e0:	f001 f8fd 	bl	8026bde <atan2f>
 80259e4:	ee38 0a40 	vsub.f32	s0, s16, s0
 80259e8:	eddf 7a29 	vldr	s15, [pc, #164]	@ 8025a90 <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj+0x178>
 80259ec:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80259f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80259f4:	bf48      	it	mi
 80259f6:	eeb1 0a40 	vnegmi.f32	s0, s0
 80259fa:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80259fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8025a02:	bfa4      	itt	ge
 8025a04:	eddf 7a23 	vldrge	s15, [pc, #140]	@ 8025a94 <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj+0x17c>
 8025a08:	ee37 0ac0 	vsubge.f32	s0, s15, s0
 8025a0c:	eddf 7a22 	vldr	s15, [pc, #136]	@ 8025a98 <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj+0x180>
 8025a10:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8025a14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8025a18:	d51e      	bpl.n	8025a58 <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj+0x140>
 8025a1a:	eef0 0a49 	vmov.f32	s1, s18
 8025a1e:	4628      	mov	r0, r5
 8025a20:	eeb0 0a68 	vmov.f32	s0, s17
 8025a24:	f7ec fcfa 	bl	801241c <_ZN8touchgfx6Canvas6lineToIfEEvT_S2_>
 8025a28:	ecbd 8b10 	vpop	{d8-d15}
 8025a2c:	bd38      	pop	{r3, r4, r5, pc}
 8025a2e:	ee7c 7a0e 	vadd.f32	s15, s24, s28
 8025a32:	eeb0 7a68 	vmov.f32	s14, s17
 8025a36:	eef0 6a49 	vmov.f32	s13, s18
 8025a3a:	eea7 7aea 	vfms.f32	s14, s15, s21
 8025a3e:	ee7c 7aae 	vadd.f32	s15, s25, s29
 8025a42:	eee7 6aea 	vfms.f32	s13, s15, s21
 8025a46:	ee66 7aa6 	vmul.f32	s15, s13, s13
 8025a4a:	eee7 7a07 	vfma.f32	s15, s14, s14
 8025a4e:	eef4 7ac6 	vcmpe.f32	s15, s12
 8025a52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8025a56:	d9e0      	bls.n	8025a1a <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj+0x102>
 8025a58:	3401      	adds	r4, #1
 8025a5a:	eef0 0a6c 	vmov.f32	s1, s25
 8025a5e:	eeb0 0a4c 	vmov.f32	s0, s24
 8025a62:	4628      	mov	r0, r5
 8025a64:	4621      	mov	r1, r4
 8025a66:	eef0 2a49 	vmov.f32	s5, s18
 8025a6a:	eeb0 2a68 	vmov.f32	s4, s17
 8025a6e:	eef0 1a6f 	vmov.f32	s3, s31
 8025a72:	eeb0 1a4f 	vmov.f32	s2, s30
 8025a76:	f7ff ff4f 	bl	8025918 <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj>
 8025a7a:	eef0 da4a 	vmov.f32	s27, s20
 8025a7e:	eeb0 da69 	vmov.f32	s26, s19
 8025a82:	eef0 ca49 	vmov.f32	s25, s18
 8025a86:	eeb0 ca68 	vmov.f32	s24, s17
 8025a8a:	e75c      	b.n	8025946 <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj+0x2e>
 8025a8c:	2edbe6ff 	.word	0x2edbe6ff
 8025a90:	40490fdb 	.word	0x40490fdb
 8025a94:	40c90fdb 	.word	0x40c90fdb
 8025a98:	3dcccccd 	.word	0x3dcccccd

08025a9c <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj>:
 8025a9c:	b530      	push	{r4, r5, lr}
 8025a9e:	ed2d 8b10 	vpush	{d8-d15}
 8025aa2:	eef0 8a40 	vmov.f32	s17, s0
 8025aa6:	b085      	sub	sp, #20
 8025aa8:	eef0 9a60 	vmov.f32	s19, s1
 8025aac:	4604      	mov	r4, r0
 8025aae:	eef0 fa41 	vmov.f32	s31, s2
 8025ab2:	460d      	mov	r5, r1
 8025ab4:	eeb0 fa61 	vmov.f32	s30, s3
 8025ab8:	eef0 ba42 	vmov.f32	s23, s4
 8025abc:	eeb0 ca62 	vmov.f32	s24, s5
 8025ac0:	eef0 aa43 	vmov.f32	s21, s6
 8025ac4:	eeb0 ba63 	vmov.f32	s22, s7
 8025ac8:	2d08      	cmp	r5, #8
 8025aca:	f200 8113 	bhi.w	8025cf4 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x258>
 8025ace:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8025ad2:	ee3b 6aaa 	vadd.f32	s12, s23, s21
 8025ad6:	ee7f 6aab 	vadd.f32	s13, s31, s23
 8025ada:	ee38 daaf 	vadd.f32	s26, s17, s31
 8025ade:	ee26 6a27 	vmul.f32	s12, s12, s15
 8025ae2:	ee7c ca0b 	vadd.f32	s25, s24, s22
 8025ae6:	ee2d da27 	vmul.f32	s26, s26, s15
 8025aea:	ed8d 6a01 	vstr	s12, [sp, #4]
 8025aee:	eea6 6aa7 	vfma.f32	s12, s13, s15
 8025af2:	ee6c caa7 	vmul.f32	s25, s25, s15
 8025af6:	eeb0 ea4d 	vmov.f32	s28, s26
 8025afa:	ee79 da8f 	vadd.f32	s27, s19, s30
 8025afe:	ee3f 7a0c 	vadd.f32	s14, s30, s24
 8025b02:	eea6 eaa7 	vfma.f32	s28, s13, s15
 8025b06:	ee66 6a27 	vmul.f32	s13, s12, s15
 8025b0a:	ee6d daa7 	vmul.f32	s27, s27, s15
 8025b0e:	edcd 6a03 	vstr	s13, [sp, #12]
 8025b12:	eef0 6a6c 	vmov.f32	s13, s25
 8025b16:	eef0 ea6d 	vmov.f32	s29, s27
 8025b1a:	ee2e ea27 	vmul.f32	s28, s28, s15
 8025b1e:	eee7 6a27 	vfma.f32	s13, s14, s15
 8025b22:	eee7 ea27 	vfma.f32	s29, s14, s15
 8025b26:	ee26 7aa7 	vmul.f32	s14, s13, s15
 8025b2a:	ee6e eaa7 	vmul.f32	s29, s29, s15
 8025b2e:	eef0 6a67 	vmov.f32	s13, s15
 8025b32:	ed8d 7a02 	vstr	s14, [sp, #8]
 8025b36:	ed9d 7a03 	vldr	s14, [sp, #12]
 8025b3a:	ee3e 9a07 	vadd.f32	s18, s28, s14
 8025b3e:	ed9d 7a02 	vldr	s14, [sp, #8]
 8025b42:	ee3e aa87 	vadd.f32	s20, s29, s14
 8025b46:	ee29 9a27 	vmul.f32	s18, s18, s15
 8025b4a:	ee2a aa27 	vmul.f32	s20, s20, s15
 8025b4e:	2d00      	cmp	r5, #0
 8025b50:	f000 810b 	beq.w	8025d6a <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x2ce>
 8025b54:	ee7a 5ae8 	vsub.f32	s11, s21, s17
 8025b58:	eddf 4a95 	vldr	s9, [pc, #596]	@ 8025db0 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x314>
 8025b5c:	ee3f 7a4b 	vsub.f32	s14, s30, s22
 8025b60:	ee7b 7a69 	vsub.f32	s15, s22, s19
 8025b64:	ee3f 6aea 	vsub.f32	s12, s31, s21
 8025b68:	ee25 7ac7 	vnmul.f32	s14, s11, s14
 8025b6c:	ee3b 5aea 	vsub.f32	s10, s23, s21
 8025b70:	eea6 7a27 	vfma.f32	s14, s12, s15
 8025b74:	ee3c 6a4b 	vsub.f32	s12, s24, s22
 8025b78:	ee25 6ac6 	vnmul.f32	s12, s11, s12
 8025b7c:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8025b80:	eea5 6a27 	vfma.f32	s12, s10, s15
 8025b84:	eeb5 5a00 	vmov.f32	s10, #80	@ 0x3e800000  0.250
 8025b88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8025b8c:	bf48      	it	mi
 8025b8e:	eeb1 7a47 	vnegmi.f32	s14, s14
 8025b92:	eeb5 6ac0 	vcmpe.f32	s12, #0.0
 8025b96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8025b9a:	eeb4 7ae4 	vcmpe.f32	s14, s9
 8025b9e:	bf48      	it	mi
 8025ba0:	eeb1 6a46 	vnegmi.f32	s12, s12
 8025ba4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8025ba8:	f340 80a8 	ble.w	8025cfc <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x260>
 8025bac:	eeb4 6ae4 	vcmpe.f32	s12, s9
 8025bb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8025bb4:	dd5a      	ble.n	8025c6c <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x1d0>
 8025bb6:	ee65 5aa5 	vmul.f32	s11, s11, s11
 8025bba:	ee37 7a06 	vadd.f32	s14, s14, s12
 8025bbe:	eee7 5aa7 	vfma.f32	s11, s15, s15
 8025bc2:	ee27 7a07 	vmul.f32	s14, s14, s14
 8025bc6:	ee65 7a85 	vmul.f32	s15, s11, s10
 8025bca:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8025bce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8025bd2:	f200 80ca 	bhi.w	8025d6a <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x2ce>
 8025bd6:	ee7b 0aef 	vsub.f32	s1, s23, s31
 8025bda:	ee3c 0a4f 	vsub.f32	s0, s24, s30
 8025bde:	f000 fffe 	bl	8026bde <atan2f>
 8025be2:	eeb0 8a40 	vmov.f32	s16, s0
 8025be6:	ee7f 0ae8 	vsub.f32	s1, s31, s17
 8025bea:	ee3f 0a69 	vsub.f32	s0, s30, s19
 8025bee:	f000 fff6 	bl	8026bde <atan2f>
 8025bf2:	ee38 fa40 	vsub.f32	s30, s16, s0
 8025bf6:	ee7a 0aeb 	vsub.f32	s1, s21, s23
 8025bfa:	ee3b 0a4c 	vsub.f32	s0, s22, s24
 8025bfe:	eeb5 fac0 	vcmpe.f32	s30, #0.0
 8025c02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8025c06:	bf48      	it	mi
 8025c08:	eeb1 fa4f 	vnegmi.f32	s30, s30
 8025c0c:	f000 ffe7 	bl	8026bde <atan2f>
 8025c10:	ee30 0a48 	vsub.f32	s0, s0, s16
 8025c14:	eddf 7a67 	vldr	s15, [pc, #412]	@ 8025db4 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x318>
 8025c18:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8025c1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8025c20:	eeb4 fae7 	vcmpe.f32	s30, s15
 8025c24:	eddf 7a63 	vldr	s15, [pc, #396]	@ 8025db4 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x318>
 8025c28:	bf48      	it	mi
 8025c2a:	eeb1 0a40 	vnegmi.f32	s0, s0
 8025c2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8025c32:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8025c36:	eddf 7a60 	vldr	s15, [pc, #384]	@ 8025db8 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x31c>
 8025c3a:	bfa4      	itt	ge
 8025c3c:	ed9f 7a5f 	vldrge	s14, [pc, #380]	@ 8025dbc <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x320>
 8025c40:	ee37 fa4f 	vsubge.f32	s30, s14, s30
 8025c44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8025c48:	bfa4      	itt	ge
 8025c4a:	ed9f 7a5c 	vldrge	s14, [pc, #368]	@ 8025dbc <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x320>
 8025c4e:	ee37 0a40 	vsubge.f32	s0, s14, s0
 8025c52:	ee3f 0a00 	vadd.f32	s0, s30, s0
 8025c56:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8025c5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8025c5e:	f140 8084 	bpl.w	8025d6a <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x2ce>
 8025c62:	eef0 0a4a 	vmov.f32	s1, s20
 8025c66:	eeb0 0a49 	vmov.f32	s0, s18
 8025c6a:	e040      	b.n	8025cee <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x252>
 8025c6c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8025c70:	ee27 7a07 	vmul.f32	s14, s14, s14
 8025c74:	eee5 7aa5 	vfma.f32	s15, s11, s11
 8025c78:	ee67 7a85 	vmul.f32	s15, s15, s10
 8025c7c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8025c80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8025c84:	d871      	bhi.n	8025d6a <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x2ce>
 8025c86:	ee7b 0aef 	vsub.f32	s1, s23, s31
 8025c8a:	ee3c 0a4f 	vsub.f32	s0, s24, s30
 8025c8e:	f000 ffa6 	bl	8026bde <atan2f>
 8025c92:	ee7f 0ae8 	vsub.f32	s1, s31, s17
 8025c96:	eeb0 8a40 	vmov.f32	s16, s0
 8025c9a:	ee3f 0a69 	vsub.f32	s0, s30, s19
 8025c9e:	f000 ff9e 	bl	8026bde <atan2f>
 8025ca2:	ee38 0a40 	vsub.f32	s0, s16, s0
 8025ca6:	eddf 7a43 	vldr	s15, [pc, #268]	@ 8025db4 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x318>
 8025caa:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8025cae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8025cb2:	bf48      	it	mi
 8025cb4:	eeb1 0a40 	vnegmi.f32	s0, s0
 8025cb8:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8025cbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8025cc0:	bfa4      	itt	ge
 8025cc2:	eddf 7a3e 	vldrge	s15, [pc, #248]	@ 8025dbc <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x320>
 8025cc6:	ee37 0ac0 	vsubge.f32	s0, s15, s0
 8025cca:	eddf 7a3b 	vldr	s15, [pc, #236]	@ 8025db8 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x31c>
 8025cce:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8025cd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8025cd6:	d548      	bpl.n	8025d6a <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x2ce>
 8025cd8:	eef0 0a4f 	vmov.f32	s1, s30
 8025cdc:	4620      	mov	r0, r4
 8025cde:	eeb0 0a6f 	vmov.f32	s0, s31
 8025ce2:	f7ec fb9b 	bl	801241c <_ZN8touchgfx6Canvas6lineToIfEEvT_S2_>
 8025ce6:	eef0 0a4c 	vmov.f32	s1, s24
 8025cea:	eeb0 0a6b 	vmov.f32	s0, s23
 8025cee:	4620      	mov	r0, r4
 8025cf0:	f7ec fb94 	bl	801241c <_ZN8touchgfx6Canvas6lineToIfEEvT_S2_>
 8025cf4:	b005      	add	sp, #20
 8025cf6:	ecbd 8b10 	vpop	{d8-d15}
 8025cfa:	bd30      	pop	{r4, r5, pc}
 8025cfc:	ed9f 7a2c 	vldr	s14, [pc, #176]	@ 8025db0 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x314>
 8025d00:	eeb4 6ac7 	vcmpe.f32	s12, s14
 8025d04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8025d08:	dd19      	ble.n	8025d3e <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x2a2>
 8025d0a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8025d0e:	ee26 7a06 	vmul.f32	s14, s12, s12
 8025d12:	eee5 7aa5 	vfma.f32	s15, s11, s11
 8025d16:	ee67 7a85 	vmul.f32	s15, s15, s10
 8025d1a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8025d1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8025d22:	d822      	bhi.n	8025d6a <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x2ce>
 8025d24:	ee7a 0aeb 	vsub.f32	s1, s21, s23
 8025d28:	ee3b 0a4c 	vsub.f32	s0, s22, s24
 8025d2c:	f000 ff57 	bl	8026bde <atan2f>
 8025d30:	ee7b 0aef 	vsub.f32	s1, s23, s31
 8025d34:	eeb0 8a40 	vmov.f32	s16, s0
 8025d38:	ee3c 0a4f 	vsub.f32	s0, s24, s30
 8025d3c:	e7af      	b.n	8025c9e <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x202>
 8025d3e:	ee78 7aaa 	vadd.f32	s15, s17, s21
 8025d42:	eeb0 7a49 	vmov.f32	s14, s18
 8025d46:	eeb0 6a4a 	vmov.f32	s12, s20
 8025d4a:	eea7 7ae6 	vfms.f32	s14, s15, s13
 8025d4e:	ee79 7a8b 	vadd.f32	s15, s19, s22
 8025d52:	eea7 6ae6 	vfms.f32	s12, s15, s13
 8025d56:	ee66 7a06 	vmul.f32	s15, s12, s12
 8025d5a:	eee7 7a07 	vfma.f32	s15, s14, s14
 8025d5e:	eef4 7ac5 	vcmpe.f32	s15, s10
 8025d62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8025d66:	f67f af7c 	bls.w	8025c62 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x1c6>
 8025d6a:	3501      	adds	r5, #1
 8025d6c:	eef0 0a69 	vmov.f32	s1, s19
 8025d70:	eeb0 0a68 	vmov.f32	s0, s17
 8025d74:	4620      	mov	r0, r4
 8025d76:	4629      	mov	r1, r5
 8025d78:	eef0 3a4a 	vmov.f32	s7, s20
 8025d7c:	eeb0 3a49 	vmov.f32	s6, s18
 8025d80:	eef0 2a6e 	vmov.f32	s5, s29
 8025d84:	eeb0 2a4e 	vmov.f32	s4, s28
 8025d88:	eef0 1a6d 	vmov.f32	s3, s27
 8025d8c:	eeb0 1a4d 	vmov.f32	s2, s26
 8025d90:	f7ff fe84 	bl	8025a9c <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj>
 8025d94:	eeb0 ca6c 	vmov.f32	s24, s25
 8025d98:	eddd ba01 	vldr	s23, [sp, #4]
 8025d9c:	eef0 9a4a 	vmov.f32	s19, s20
 8025da0:	ed9d fa02 	vldr	s30, [sp, #8]
 8025da4:	eef0 8a49 	vmov.f32	s17, s18
 8025da8:	eddd fa03 	vldr	s31, [sp, #12]
 8025dac:	e68c      	b.n	8025ac8 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x2c>
 8025dae:	bf00      	nop
 8025db0:	2edbe6ff 	.word	0x2edbe6ff
 8025db4:	40490fdb 	.word	0x40490fdb
 8025db8:	3dcccccd 	.word	0x3dcccccd
 8025dbc:	40c90fdb 	.word	0x40c90fdb

08025dc0 <_ZN8touchgfx6CanvasD1Ev>:
 8025dc0:	4b04      	ldr	r3, [pc, #16]	@ (8025dd4 <_ZN8touchgfx6CanvasD1Ev+0x14>)
 8025dc2:	b510      	push	{r4, lr}
 8025dc4:	4604      	mov	r4, r0
 8025dc6:	f840 3b14 	str.w	r3, [r0], #20
 8025dca:	f7ef f865 	bl	8014e98 <_ZN8touchgfx7OutlineD1Ev>
 8025dce:	4620      	mov	r0, r4
 8025dd0:	bd10      	pop	{r4, pc}
 8025dd2:	bf00      	nop
 8025dd4:	0802ca4c 	.word	0x0802ca4c

08025dd8 <_ZN8touchgfx6CanvasD0Ev>:
 8025dd8:	b510      	push	{r4, lr}
 8025dda:	4604      	mov	r4, r0
 8025ddc:	f7ff fff0 	bl	8025dc0 <_ZN8touchgfx6CanvasD1Ev>
 8025de0:	2174      	movs	r1, #116	@ 0x74
 8025de2:	4620      	mov	r0, r4
 8025de4:	f000 fed3 	bl	8026b8e <_ZdlPvj>
 8025de8:	4620      	mov	r0, r4
 8025dea:	bd10      	pop	{r4, pc}

08025dec <_ZN8touchgfx13TextureMapper21setRenderingAlgorithmENS0_18RenderingAlgorithmE>:
 8025dec:	f880 1029 	strb.w	r1, [r0, #41]	@ 0x29
 8025df0:	4770      	bx	lr

08025df2 <_ZNK8touchgfx13TextureMapper21getRenderingAlgorithmEv>:
 8025df2:	f890 0029 	ldrb.w	r0, [r0, #41]	@ 0x29
 8025df6:	4770      	bx	lr

08025df8 <_ZN8touchgfx13TextureMapper9setXAngleEf>:
 8025df8:	6802      	ldr	r2, [r0, #0]
 8025dfa:	ed90 1a0f 	vldr	s2, [r0, #60]	@ 0x3c
 8025dfe:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
 8025e00:	edd0 0a0e 	vldr	s1, [r0, #56]	@ 0x38
 8025e04:	4710      	bx	r2

08025e06 <_ZN8touchgfx13TextureMapper9setYAngleEf>:
 8025e06:	6802      	ldr	r2, [r0, #0]
 8025e08:	eef0 0a40 	vmov.f32	s1, s0
 8025e0c:	ed90 1a0f 	vldr	s2, [r0, #60]	@ 0x3c
 8025e10:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
 8025e12:	ed90 0a0d 	vldr	s0, [r0, #52]	@ 0x34
 8025e16:	4710      	bx	r2

08025e18 <_ZN8touchgfx13TextureMapper9setZAngleEf>:
 8025e18:	6802      	ldr	r2, [r0, #0]
 8025e1a:	eeb0 1a40 	vmov.f32	s2, s0
 8025e1e:	edd0 0a0e 	vldr	s1, [r0, #56]	@ 0x38
 8025e22:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
 8025e24:	ed90 0a0d 	vldr	s0, [r0, #52]	@ 0x34
 8025e28:	4710      	bx	r2

08025e2a <_ZN8touchgfx13TextureMapper12updateXAngleEf>:
 8025e2a:	6802      	ldr	r2, [r0, #0]
 8025e2c:	ed90 1a0f 	vldr	s2, [r0, #60]	@ 0x3c
 8025e30:	6fd2      	ldr	r2, [r2, #124]	@ 0x7c
 8025e32:	edd0 0a0e 	vldr	s1, [r0, #56]	@ 0x38
 8025e36:	4710      	bx	r2

08025e38 <_ZN8touchgfx13TextureMapper12updateYAngleEf>:
 8025e38:	6802      	ldr	r2, [r0, #0]
 8025e3a:	eef0 0a40 	vmov.f32	s1, s0
 8025e3e:	ed90 1a0f 	vldr	s2, [r0, #60]	@ 0x3c
 8025e42:	6fd2      	ldr	r2, [r2, #124]	@ 0x7c
 8025e44:	ed90 0a0d 	vldr	s0, [r0, #52]	@ 0x34
 8025e48:	4710      	bx	r2

08025e4a <_ZN8touchgfx13TextureMapper12updateZAngleEf>:
 8025e4a:	6802      	ldr	r2, [r0, #0]
 8025e4c:	eeb0 1a40 	vmov.f32	s2, s0
 8025e50:	edd0 0a0e 	vldr	s1, [r0, #56]	@ 0x38
 8025e54:	6fd2      	ldr	r2, [r2, #124]	@ 0x7c
 8025e56:	ed90 0a0d 	vldr	s0, [r0, #52]	@ 0x34
 8025e5a:	4710      	bx	r2

08025e5c <_ZNK8touchgfx13TextureMapper9getXAngleEv>:
 8025e5c:	ed90 0a0d 	vldr	s0, [r0, #52]	@ 0x34
 8025e60:	4770      	bx	lr

08025e62 <_ZNK8touchgfx13TextureMapper9getYAngleEv>:
 8025e62:	ed90 0a0e 	vldr	s0, [r0, #56]	@ 0x38
 8025e66:	4770      	bx	lr

08025e68 <_ZNK8touchgfx13TextureMapper9getZAngleEv>:
 8025e68:	ed90 0a0f 	vldr	s0, [r0, #60]	@ 0x3c
 8025e6c:	4770      	bx	lr

08025e6e <_ZNK8touchgfx13TextureMapper8getScaleEv>:
 8025e6e:	ed90 0a10 	vldr	s0, [r0, #64]	@ 0x40
 8025e72:	4770      	bx	lr

08025e74 <_ZNK8touchgfx13TextureMapper9getOrigoXEv>:
 8025e74:	ed90 0a11 	vldr	s0, [r0, #68]	@ 0x44
 8025e78:	4770      	bx	lr

08025e7a <_ZNK8touchgfx13TextureMapper9getOrigoYEv>:
 8025e7a:	ed90 0a12 	vldr	s0, [r0, #72]	@ 0x48
 8025e7e:	4770      	bx	lr

08025e80 <_ZNK8touchgfx13TextureMapper9getOrigoZEv>:
 8025e80:	ed90 0a13 	vldr	s0, [r0, #76]	@ 0x4c
 8025e84:	4770      	bx	lr

08025e86 <_ZNK8touchgfx13TextureMapper10getCameraXEv>:
 8025e86:	ed90 0a14 	vldr	s0, [r0, #80]	@ 0x50
 8025e8a:	4770      	bx	lr

08025e8c <_ZNK8touchgfx13TextureMapper10getCameraYEv>:
 8025e8c:	ed90 0a15 	vldr	s0, [r0, #84]	@ 0x54
 8025e90:	4770      	bx	lr

08025e92 <_ZNK8touchgfx13TextureMapper17getCameraDistanceEv>:
 8025e92:	ed90 0a16 	vldr	s0, [r0, #88]	@ 0x58
 8025e96:	4770      	bx	lr

08025e98 <_ZN8touchgfx13TextureMapper17setBitmapPositionEii>:
 8025e98:	ee07 2a90 	vmov	s15, r2
 8025e9c:	6803      	ldr	r3, [r0, #0]
 8025e9e:	eef8 0ae7 	vcvt.f32.s32	s1, s15
 8025ea2:	ee07 1a90 	vmov	s15, r1
 8025ea6:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 8025eaa:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 8025eae:	4718      	bx	r3

08025eb0 <_ZNK8touchgfx13TextureMapper18getBitmapPositionXEv>:
 8025eb0:	ed90 0a0b 	vldr	s0, [r0, #44]	@ 0x2c
 8025eb4:	4770      	bx	lr

08025eb6 <_ZNK8touchgfx13TextureMapper18getBitmapPositionYEv>:
 8025eb6:	ed90 0a0c 	vldr	s0, [r0, #48]	@ 0x30
 8025eba:	4770      	bx	lr

08025ebc <_ZNK8touchgfx13TextureMapper5getX0Ev>:
 8025ebc:	ed90 0a17 	vldr	s0, [r0, #92]	@ 0x5c
 8025ec0:	4770      	bx	lr

08025ec2 <_ZNK8touchgfx13TextureMapper5getX1Ev>:
 8025ec2:	ed90 0a1a 	vldr	s0, [r0, #104]	@ 0x68
 8025ec6:	4770      	bx	lr

08025ec8 <_ZNK8touchgfx13TextureMapper5getX2Ev>:
 8025ec8:	ed90 0a1d 	vldr	s0, [r0, #116]	@ 0x74
 8025ecc:	4770      	bx	lr

08025ece <_ZNK8touchgfx13TextureMapper5getX3Ev>:
 8025ece:	ed90 0a20 	vldr	s0, [r0, #128]	@ 0x80
 8025ed2:	4770      	bx	lr

08025ed4 <_ZNK8touchgfx13TextureMapper5getY0Ev>:
 8025ed4:	ed90 0a18 	vldr	s0, [r0, #96]	@ 0x60
 8025ed8:	4770      	bx	lr

08025eda <_ZNK8touchgfx13TextureMapper5getY1Ev>:
 8025eda:	ed90 0a1b 	vldr	s0, [r0, #108]	@ 0x6c
 8025ede:	4770      	bx	lr

08025ee0 <_ZNK8touchgfx13TextureMapper5getY2Ev>:
 8025ee0:	ed90 0a1e 	vldr	s0, [r0, #120]	@ 0x78
 8025ee4:	4770      	bx	lr

08025ee6 <_ZNK8touchgfx13TextureMapper5getY3Ev>:
 8025ee6:	ed90 0a21 	vldr	s0, [r0, #132]	@ 0x84
 8025eea:	4770      	bx	lr

08025eec <_ZNK8touchgfx13TextureMapper5getZ0Ev>:
 8025eec:	ed90 0a19 	vldr	s0, [r0, #100]	@ 0x64
 8025ef0:	4770      	bx	lr

08025ef2 <_ZNK8touchgfx13TextureMapper5getZ1Ev>:
 8025ef2:	ed90 0a1c 	vldr	s0, [r0, #112]	@ 0x70
 8025ef6:	4770      	bx	lr

08025ef8 <_ZNK8touchgfx13TextureMapper5getZ2Ev>:
 8025ef8:	ed90 0a1f 	vldr	s0, [r0, #124]	@ 0x7c
 8025efc:	4770      	bx	lr

08025efe <_ZNK8touchgfx13TextureMapper5getZ3Ev>:
 8025efe:	ed90 0a22 	vldr	s0, [r0, #136]	@ 0x88
 8025f02:	4770      	bx	lr

08025f04 <_ZN8touchgfx13TextureMapper12updateAnglesEfff>:
 8025f04:	b510      	push	{r4, lr}
 8025f06:	ed2d 8b04 	vpush	{d8-d9}
 8025f0a:	6803      	ldr	r3, [r0, #0]
 8025f0c:	4604      	mov	r4, r0
 8025f0e:	eeb0 8a40 	vmov.f32	s16, s0
 8025f12:	eef0 8a60 	vmov.f32	s17, s1
 8025f16:	699b      	ldr	r3, [r3, #24]
 8025f18:	eeb0 9a41 	vmov.f32	s18, s2
 8025f1c:	4798      	blx	r3
 8025f1e:	6823      	ldr	r3, [r4, #0]
 8025f20:	4620      	mov	r0, r4
 8025f22:	eef0 0a68 	vmov.f32	s1, s17
 8025f26:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8025f28:	eeb0 1a49 	vmov.f32	s2, s18
 8025f2c:	eeb0 0a48 	vmov.f32	s0, s16
 8025f30:	4798      	blx	r3
 8025f32:	6823      	ldr	r3, [r4, #0]
 8025f34:	4620      	mov	r0, r4
 8025f36:	699b      	ldr	r3, [r3, #24]
 8025f38:	ecbd 8b04 	vpop	{d8-d9}
 8025f3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8025f40:	4718      	bx	r3

08025f42 <_ZN8touchgfx13TextureMapper11updateScaleEf>:
 8025f42:	b510      	push	{r4, lr}
 8025f44:	ed2d 8b02 	vpush	{d8}
 8025f48:	6803      	ldr	r3, [r0, #0]
 8025f4a:	4604      	mov	r4, r0
 8025f4c:	eeb0 8a40 	vmov.f32	s16, s0
 8025f50:	699b      	ldr	r3, [r3, #24]
 8025f52:	4798      	blx	r3
 8025f54:	6823      	ldr	r3, [r4, #0]
 8025f56:	4620      	mov	r0, r4
 8025f58:	eeb0 0a48 	vmov.f32	s0, s16
 8025f5c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8025f60:	4798      	blx	r3
 8025f62:	6823      	ldr	r3, [r4, #0]
 8025f64:	4620      	mov	r0, r4
 8025f66:	699b      	ldr	r3, [r3, #24]
 8025f68:	ecbd 8b02 	vpop	{d8}
 8025f6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8025f70:	4718      	bx	r3

08025f72 <_ZNK8touchgfx13TextureMapper12getSolidRectEv>:
 8025f72:	2200      	movs	r2, #0
 8025f74:	8002      	strh	r2, [r0, #0]
 8025f76:	8042      	strh	r2, [r0, #2]
 8025f78:	8082      	strh	r2, [r0, #4]
 8025f7a:	80c2      	strh	r2, [r0, #6]
 8025f7c:	4770      	bx	lr

08025f7e <_ZN8touchgfx13TextureMapperD1Ev>:
 8025f7e:	4770      	bx	lr

08025f80 <_ZN8touchgfx13TextureMapperD0Ev>:
 8025f80:	b510      	push	{r4, lr}
 8025f82:	4604      	mov	r4, r0
 8025f84:	2190      	movs	r1, #144	@ 0x90
 8025f86:	f000 fe02 	bl	8026b8e <_ZdlPvj>
 8025f8a:	4620      	mov	r0, r4
 8025f8c:	bd10      	pop	{r4, pc}
	...

08025f90 <_ZN8touchgfx13TextureMapperC1ERKNS_6BitmapE>:
 8025f90:	b538      	push	{r3, r4, r5, lr}
 8025f92:	2301      	movs	r3, #1
 8025f94:	2500      	movs	r5, #0
 8025f96:	4604      	mov	r4, r0
 8025f98:	f880 3025 	strb.w	r3, [r0, #37]	@ 0x25
 8025f9c:	4b1f      	ldr	r3, [pc, #124]	@ (802601c <_ZN8touchgfx13TextureMapperC1ERKNS_6BitmapE+0x8c>)
 8025f9e:	8085      	strh	r5, [r0, #4]
 8025fa0:	80c5      	strh	r5, [r0, #6]
 8025fa2:	8105      	strh	r5, [r0, #8]
 8025fa4:	8145      	strh	r5, [r0, #10]
 8025fa6:	8185      	strh	r5, [r0, #12]
 8025fa8:	81c5      	strh	r5, [r0, #14]
 8025faa:	8205      	strh	r5, [r0, #16]
 8025fac:	8245      	strh	r5, [r0, #18]
 8025fae:	61c5      	str	r5, [r0, #28]
 8025fb0:	8405      	strh	r5, [r0, #32]
 8025fb2:	8445      	strh	r5, [r0, #34]	@ 0x22
 8025fb4:	f880 5024 	strb.w	r5, [r0, #36]	@ 0x24
 8025fb8:	6003      	str	r3, [r0, #0]
 8025fba:	e9c0 5505 	strd	r5, r5, [r0, #20]
 8025fbe:	880b      	ldrh	r3, [r1, #0]
 8025fc0:	84c3      	strh	r3, [r0, #38]	@ 0x26
 8025fc2:	23ff      	movs	r3, #255	@ 0xff
 8025fc4:	f880 3028 	strb.w	r3, [r0, #40]	@ 0x28
 8025fc8:	f7ee fef3 	bl	8014db2 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 8025fcc:	4b14      	ldr	r3, [pc, #80]	@ (8026020 <_ZN8touchgfx13TextureMapperC1ERKNS_6BitmapE+0x90>)
 8025fce:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8025fd2:	4914      	ldr	r1, [pc, #80]	@ (8026024 <_ZN8touchgfx13TextureMapperC1ERKNS_6BitmapE+0x94>)
 8025fd4:	6023      	str	r3, [r4, #0]
 8025fd6:	2300      	movs	r3, #0
 8025fd8:	f884 5029 	strb.w	r5, [r4, #41]	@ 0x29
 8025fdc:	4620      	mov	r0, r4
 8025fde:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8025fe0:	6323      	str	r3, [r4, #48]	@ 0x30
 8025fe2:	6363      	str	r3, [r4, #52]	@ 0x34
 8025fe4:	63a3      	str	r3, [r4, #56]	@ 0x38
 8025fe6:	63e3      	str	r3, [r4, #60]	@ 0x3c
 8025fe8:	6463      	str	r3, [r4, #68]	@ 0x44
 8025fea:	64a3      	str	r3, [r4, #72]	@ 0x48
 8025fec:	6523      	str	r3, [r4, #80]	@ 0x50
 8025fee:	6563      	str	r3, [r4, #84]	@ 0x54
 8025ff0:	65e3      	str	r3, [r4, #92]	@ 0x5c
 8025ff2:	6623      	str	r3, [r4, #96]	@ 0x60
 8025ff4:	66a3      	str	r3, [r4, #104]	@ 0x68
 8025ff6:	66e3      	str	r3, [r4, #108]	@ 0x6c
 8025ff8:	6763      	str	r3, [r4, #116]	@ 0x74
 8025ffa:	67a3      	str	r3, [r4, #120]	@ 0x78
 8025ffc:	f8c4 3080 	str.w	r3, [r4, #128]	@ 0x80
 8026000:	f8c4 3084 	str.w	r3, [r4, #132]	@ 0x84
 8026004:	230c      	movs	r3, #12
 8026006:	6422      	str	r2, [r4, #64]	@ 0x40
 8026008:	64e1      	str	r1, [r4, #76]	@ 0x4c
 802600a:	65a1      	str	r1, [r4, #88]	@ 0x58
 802600c:	6662      	str	r2, [r4, #100]	@ 0x64
 802600e:	6722      	str	r2, [r4, #112]	@ 0x70
 8026010:	67e2      	str	r2, [r4, #124]	@ 0x7c
 8026012:	f8c4 2088 	str.w	r2, [r4, #136]	@ 0x88
 8026016:	f8a4 308c 	strh.w	r3, [r4, #140]	@ 0x8c
 802601a:	bd38      	pop	{r3, r4, r5, pc}
 802601c:	0802c5e0 	.word	0x0802c5e0
 8026020:	0802ca60 	.word	0x0802ca60
 8026024:	447a0000 	.word	0x447a0000

08026028 <_ZN8touchgfx13TextureMapper19applyTransformationEv>:
 8026028:	b570      	push	{r4, r5, r6, lr}
 802602a:	ed2d 8b04 	vpush	{d8-d9}
 802602e:	f5ad 7d50 	sub.w	sp, sp, #832	@ 0x340
 8026032:	8cc3      	ldrh	r3, [r0, #38]	@ 0x26
 8026034:	4604      	mov	r4, r0
 8026036:	add0      	add	r5, sp, #832	@ 0x340
 8026038:	f825 3d40 	strh.w	r3, [r5, #-64]!
 802603c:	4628      	mov	r0, r5
 802603e:	f7f5 f8df 	bl	801b200 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8026042:	8ce3      	ldrh	r3, [r4, #38]	@ 0x26
 8026044:	4606      	mov	r6, r0
 8026046:	4628      	mov	r0, r5
 8026048:	f8ad 3300 	strh.w	r3, [sp, #768]	@ 0x300
 802604c:	f7f5 f90c 	bl	801b268 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8026050:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8026054:	1c72      	adds	r2, r6, #1
 8026056:	edd4 6a0c 	vldr	s13, [r4, #48]	@ 0x30
 802605a:	3001      	adds	r0, #1
 802605c:	ee07 2a90 	vmov	s15, r2
 8026060:	ed94 6a0b 	vldr	s12, [r4, #44]	@ 0x2c
 8026064:	ee76 5ac7 	vsub.f32	s11, s13, s14
 8026068:	ee06 0a90 	vmov	s13, r0
 802606c:	ee36 6a47 	vsub.f32	s12, s12, s14
 8026070:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8026072:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8026076:	ed94 9a11 	vldr	s18, [r4, #68]	@ 0x44
 802607a:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 802607e:	9312      	str	r3, [sp, #72]	@ 0x48
 8026080:	9316      	str	r3, [sp, #88]	@ 0x58
 8026082:	a830      	add	r0, sp, #192	@ 0xc0
 8026084:	ee77 7a86 	vadd.f32	s15, s15, s12
 8026088:	931a      	str	r3, [sp, #104]	@ 0x68
 802608a:	ee76 6aa5 	vadd.f32	s13, s13, s11
 802608e:	931e      	str	r3, [sp, #120]	@ 0x78
 8026090:	2300      	movs	r3, #0
 8026092:	ed8d 6a10 	vstr	s12, [sp, #64]	@ 0x40
 8026096:	edcd 5a11 	vstr	s11, [sp, #68]	@ 0x44
 802609a:	ae70      	add	r6, sp, #448	@ 0x1c0
 802609c:	9320      	str	r3, [sp, #128]	@ 0x80
 802609e:	9321      	str	r3, [sp, #132]	@ 0x84
 80260a0:	9322      	str	r3, [sp, #136]	@ 0x88
 80260a2:	9324      	str	r3, [sp, #144]	@ 0x90
 80260a4:	9325      	str	r3, [sp, #148]	@ 0x94
 80260a6:	9326      	str	r3, [sp, #152]	@ 0x98
 80260a8:	9328      	str	r3, [sp, #160]	@ 0xa0
 80260aa:	9329      	str	r3, [sp, #164]	@ 0xa4
 80260ac:	932a      	str	r3, [sp, #168]	@ 0xa8
 80260ae:	932c      	str	r3, [sp, #176]	@ 0xb0
 80260b0:	932d      	str	r3, [sp, #180]	@ 0xb4
 80260b2:	932e      	str	r3, [sp, #184]	@ 0xb8
 80260b4:	ed8d 7a13 	vstr	s14, [sp, #76]	@ 0x4c
 80260b8:	edcd 7a14 	vstr	s15, [sp, #80]	@ 0x50
 80260bc:	edcd 5a15 	vstr	s11, [sp, #84]	@ 0x54
 80260c0:	ed8d 7a17 	vstr	s14, [sp, #92]	@ 0x5c
 80260c4:	edcd 7a18 	vstr	s15, [sp, #96]	@ 0x60
 80260c8:	edcd 6a19 	vstr	s13, [sp, #100]	@ 0x64
 80260cc:	ed8d 7a1b 	vstr	s14, [sp, #108]	@ 0x6c
 80260d0:	ed8d 6a1c 	vstr	s12, [sp, #112]	@ 0x70
 80260d4:	edcd 6a1d 	vstr	s13, [sp, #116]	@ 0x74
 80260d8:	ed8d 7a1f 	vstr	s14, [sp, #124]	@ 0x7c
 80260dc:	edd4 8a12 	vldr	s17, [r4, #72]	@ 0x48
 80260e0:	ed94 8a13 	vldr	s16, [r4, #76]	@ 0x4c
 80260e4:	f000 fc2c 	bl	8026940 <_ZN8touchgfx9Matrix4x4C1Ev>
 80260e8:	eeb1 0a49 	vneg.f32	s0, s18
 80260ec:	a830      	add	r0, sp, #192	@ 0xc0
 80260ee:	f000 fcf7 	bl	8026ae0 <_ZN8touchgfx9Matrix4x423concatenateXTranslationEf>
 80260f2:	eeb1 0a68 	vneg.f32	s0, s17
 80260f6:	f000 fd01 	bl	8026afc <_ZN8touchgfx9Matrix4x423concatenateYTranslationEf>
 80260fa:	eeb1 0a48 	vneg.f32	s0, s16
 80260fe:	f000 fd0c 	bl	8026b1a <_ZN8touchgfx9Matrix4x423concatenateZTranslationEf>
 8026102:	a840      	add	r0, sp, #256	@ 0x100
 8026104:	f000 fc1c 	bl	8026940 <_ZN8touchgfx9Matrix4x4C1Ev>
 8026108:	ed94 0a0d 	vldr	s0, [r4, #52]	@ 0x34
 802610c:	a840      	add	r0, sp, #256	@ 0x100
 802610e:	f000 fc6b 	bl	80269e8 <_ZN8touchgfx9Matrix4x420concatenateXRotationEf>
 8026112:	ed94 0a0e 	vldr	s0, [r4, #56]	@ 0x38
 8026116:	f000 fc91 	bl	8026a3c <_ZN8touchgfx9Matrix4x420concatenateYRotationEf>
 802611a:	ed94 0a0f 	vldr	s0, [r4, #60]	@ 0x3c
 802611e:	f000 fcb6 	bl	8026a8e <_ZN8touchgfx9Matrix4x420concatenateZRotationEf>
 8026122:	a850      	add	r0, sp, #320	@ 0x140
 8026124:	f000 fc0c 	bl	8026940 <_ZN8touchgfx9Matrix4x4C1Ev>
 8026128:	ed94 0a10 	vldr	s0, [r4, #64]	@ 0x40
 802612c:	a850      	add	r0, sp, #320	@ 0x140
 802612e:	f000 fd03 	bl	8026b38 <_ZN8touchgfx9Matrix4x417concatenateXScaleEf>
 8026132:	ed94 0a10 	vldr	s0, [r4, #64]	@ 0x40
 8026136:	f000 fd0b 	bl	8026b50 <_ZN8touchgfx9Matrix4x417concatenateYScaleEf>
 802613a:	ed94 0a10 	vldr	s0, [r4, #64]	@ 0x40
 802613e:	f000 fd14 	bl	8026b6a <_ZN8touchgfx9Matrix4x417concatenateZScaleEf>
 8026142:	a860      	add	r0, sp, #384	@ 0x180
 8026144:	f000 fbfc 	bl	8026940 <_ZN8touchgfx9Matrix4x4C1Ev>
 8026148:	eeb0 0a49 	vmov.f32	s0, s18
 802614c:	a860      	add	r0, sp, #384	@ 0x180
 802614e:	f000 fcc7 	bl	8026ae0 <_ZN8touchgfx9Matrix4x423concatenateXTranslationEf>
 8026152:	eeb0 0a68 	vmov.f32	s0, s17
 8026156:	f000 fcd1 	bl	8026afc <_ZN8touchgfx9Matrix4x423concatenateYTranslationEf>
 802615a:	eeb0 0a48 	vmov.f32	s0, s16
 802615e:	f000 fcdc 	bl	8026b1a <_ZN8touchgfx9Matrix4x423concatenateZTranslationEf>
 8026162:	aa50      	add	r2, sp, #320	@ 0x140
 8026164:	a960      	add	r1, sp, #384	@ 0x180
 8026166:	a8b0      	add	r0, sp, #704	@ 0x2c0
 8026168:	f000 fc02 	bl	8026970 <_ZN8touchgfxmlERKNS_9Matrix4x4ES2_>
 802616c:	4628      	mov	r0, r5
 802616e:	aa40      	add	r2, sp, #256	@ 0x100
 8026170:	a9b0      	add	r1, sp, #704	@ 0x2c0
 8026172:	f000 fbfd 	bl	8026970 <_ZN8touchgfxmlERKNS_9Matrix4x4ES2_>
 8026176:	4629      	mov	r1, r5
 8026178:	aa30      	add	r2, sp, #192	@ 0xc0
 802617a:	a870      	add	r0, sp, #448	@ 0x1c0
 802617c:	f000 fbf8 	bl	8026970 <_ZN8touchgfxmlERKNS_9Matrix4x4ES2_>
 8026180:	a880      	add	r0, sp, #512	@ 0x200
 8026182:	f000 fbdd 	bl	8026940 <_ZN8touchgfx9Matrix4x4C1Ev>
 8026186:	ed94 0a14 	vldr	s0, [r4, #80]	@ 0x50
 802618a:	a880      	add	r0, sp, #512	@ 0x200
 802618c:	eeb1 0a40 	vneg.f32	s0, s0
 8026190:	f000 fca6 	bl	8026ae0 <_ZN8touchgfx9Matrix4x423concatenateXTranslationEf>
 8026194:	ed94 0a15 	vldr	s0, [r4, #84]	@ 0x54
 8026198:	a880      	add	r0, sp, #512	@ 0x200
 802619a:	eeb1 0a40 	vneg.f32	s0, s0
 802619e:	f000 fcad 	bl	8026afc <_ZN8touchgfx9Matrix4x423concatenateYTranslationEf>
 80261a2:	a890      	add	r0, sp, #576	@ 0x240
 80261a4:	f000 fbcc 	bl	8026940 <_ZN8touchgfx9Matrix4x4C1Ev>
 80261a8:	ed94 0a16 	vldr	s0, [r4, #88]	@ 0x58
 80261ac:	a890      	add	r0, sp, #576	@ 0x240
 80261ae:	f000 fc0b 	bl	80269c8 <_ZN8touchgfx9Matrix4x415setViewDistanceEf>
 80261b2:	a8a0      	add	r0, sp, #640	@ 0x280
 80261b4:	f000 fbc4 	bl	8026940 <_ZN8touchgfx9Matrix4x4C1Ev>
 80261b8:	ed94 0a14 	vldr	s0, [r4, #80]	@ 0x50
 80261bc:	a8a0      	add	r0, sp, #640	@ 0x280
 80261be:	f000 fc8f 	bl	8026ae0 <_ZN8touchgfx9Matrix4x423concatenateXTranslationEf>
 80261c2:	ed94 0a15 	vldr	s0, [r4, #84]	@ 0x54
 80261c6:	f000 fc99 	bl	8026afc <_ZN8touchgfx9Matrix4x423concatenateYTranslationEf>
 80261ca:	aa90      	add	r2, sp, #576	@ 0x240
 80261cc:	a9a0      	add	r1, sp, #640	@ 0x280
 80261ce:	a8b0      	add	r0, sp, #704	@ 0x2c0
 80261d0:	f000 fbce 	bl	8026970 <_ZN8touchgfxmlERKNS_9Matrix4x4ES2_>
 80261d4:	4628      	mov	r0, r5
 80261d6:	aa80      	add	r2, sp, #512	@ 0x200
 80261d8:	a9b0      	add	r1, sp, #704	@ 0x2c0
 80261da:	f000 fbc9 	bl	8026970 <_ZN8touchgfxmlERKNS_9Matrix4x4ES2_>
 80261de:	4629      	mov	r1, r5
 80261e0:	466d      	mov	r5, sp
 80261e2:	aa70      	add	r2, sp, #448	@ 0x1c0
 80261e4:	4668      	mov	r0, sp
 80261e6:	f000 fbc3 	bl	8026970 <_ZN8touchgfxmlERKNS_9Matrix4x4ES2_>
 80261ea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80261ec:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80261ee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80261f0:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80261f2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80261f4:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80261f6:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80261fa:	2500      	movs	r5, #0
 80261fc:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
 8026200:	0129      	lsls	r1, r5, #4
 8026202:	ab20      	add	r3, sp, #128	@ 0x80
 8026204:	3501      	adds	r5, #1
 8026206:	a870      	add	r0, sp, #448	@ 0x1c0
 8026208:	185e      	adds	r6, r3, r1
 802620a:	ab10      	add	r3, sp, #64	@ 0x40
 802620c:	4419      	add	r1, r3
 802620e:	f000 fb67 	bl	80268e0 <_ZN8touchgfxmlERKNS_9Matrix4x4ERKNS_6Point4E>
 8026212:	2d04      	cmp	r5, #4
 8026214:	ed86 0a00 	vstr	s0, [r6]
 8026218:	edc6 0a01 	vstr	s1, [r6, #4]
 802621c:	ed86 1a02 	vstr	s2, [r6, #8]
 8026220:	edc6 1a03 	vstr	s3, [r6, #12]
 8026224:	d1ec      	bne.n	8026200 <_ZN8touchgfx13TextureMapper19applyTransformationEv+0x1d8>
 8026226:	edd4 7a16 	vldr	s15, [r4, #88]	@ 0x58
 802622a:	eddd 6a20 	vldr	s13, [sp, #128]	@ 0x80
 802622e:	ed9d 7a22 	vldr	s14, [sp, #136]	@ 0x88
 8026232:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8026236:	ed84 7a19 	vstr	s14, [r4, #100]	@ 0x64
 802623a:	ee86 6a87 	vdiv.f32	s12, s13, s14
 802623e:	eddd 6a21 	vldr	s13, [sp, #132]	@ 0x84
 8026242:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8026246:	ed84 6a17 	vstr	s12, [r4, #92]	@ 0x5c
 802624a:	ee86 6a87 	vdiv.f32	s12, s13, s14
 802624e:	eddd 6a24 	vldr	s13, [sp, #144]	@ 0x90
 8026252:	ed9d 7a26 	vldr	s14, [sp, #152]	@ 0x98
 8026256:	ed84 7a1c 	vstr	s14, [r4, #112]	@ 0x70
 802625a:	ee67 6aa6 	vmul.f32	s13, s15, s13
 802625e:	ed84 6a18 	vstr	s12, [r4, #96]	@ 0x60
 8026262:	ee86 6a87 	vdiv.f32	s12, s13, s14
 8026266:	eddd 6a25 	vldr	s13, [sp, #148]	@ 0x94
 802626a:	ee67 6aa6 	vmul.f32	s13, s15, s13
 802626e:	ed84 6a1a 	vstr	s12, [r4, #104]	@ 0x68
 8026272:	ee86 6a87 	vdiv.f32	s12, s13, s14
 8026276:	eddd 6a28 	vldr	s13, [sp, #160]	@ 0xa0
 802627a:	ed9d 7a2a 	vldr	s14, [sp, #168]	@ 0xa8
 802627e:	ed84 7a1f 	vstr	s14, [r4, #124]	@ 0x7c
 8026282:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8026286:	ed84 6a1b 	vstr	s12, [r4, #108]	@ 0x6c
 802628a:	ee86 6a87 	vdiv.f32	s12, s13, s14
 802628e:	eddd 6a29 	vldr	s13, [sp, #164]	@ 0xa4
 8026292:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8026296:	ed84 6a1d 	vstr	s12, [r4, #116]	@ 0x74
 802629a:	ee86 6a87 	vdiv.f32	s12, s13, s14
 802629e:	eddd 6a2c 	vldr	s13, [sp, #176]	@ 0xb0
 80262a2:	ed9d 7a2e 	vldr	s14, [sp, #184]	@ 0xb8
 80262a6:	ed84 7a22 	vstr	s14, [r4, #136]	@ 0x88
 80262aa:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80262ae:	ed84 6a1e 	vstr	s12, [r4, #120]	@ 0x78
 80262b2:	ee86 6a87 	vdiv.f32	s12, s13, s14
 80262b6:	eddd 6a2d 	vldr	s13, [sp, #180]	@ 0xb4
 80262ba:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80262be:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80262c2:	ed84 6a20 	vstr	s12, [r4, #128]	@ 0x80
 80262c6:	edc4 6a21 	vstr	s13, [r4, #132]	@ 0x84
 80262ca:	f50d 7d50 	add.w	sp, sp, #832	@ 0x340
 80262ce:	ecbd 8b04 	vpop	{d8-d9}
 80262d2:	bd70      	pop	{r4, r5, r6, pc}

080262d4 <_ZN8touchgfx13TextureMapper9setBitmapERKNS_6BitmapE>:
 80262d4:	b510      	push	{r4, lr}
 80262d6:	4604      	mov	r4, r0
 80262d8:	f7ee fd6b 	bl	8014db2 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 80262dc:	4620      	mov	r0, r4
 80262de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80262e2:	f7ff bea1 	b.w	8026028 <_ZN8touchgfx13TextureMapper19applyTransformationEv>

080262e6 <_ZN8touchgfx13TextureMapper9setAnglesEfff>:
 80262e6:	ed80 0a0d 	vstr	s0, [r0, #52]	@ 0x34
 80262ea:	edc0 0a0e 	vstr	s1, [r0, #56]	@ 0x38
 80262ee:	ed80 1a0f 	vstr	s2, [r0, #60]	@ 0x3c
 80262f2:	f7ff be99 	b.w	8026028 <_ZN8touchgfx13TextureMapper19applyTransformationEv>

080262f6 <_ZN8touchgfx13TextureMapper8setScaleEf>:
 80262f6:	ed80 0a10 	vstr	s0, [r0, #64]	@ 0x40
 80262fa:	f7ff be95 	b.w	8026028 <_ZN8touchgfx13TextureMapper19applyTransformationEv>

080262fe <_ZN8touchgfx13TextureMapper17setBitmapPositionEff>:
 80262fe:	ed80 0a0b 	vstr	s0, [r0, #44]	@ 0x2c
 8026302:	edc0 0a0c 	vstr	s1, [r0, #48]	@ 0x30
 8026306:	f7ff be8f 	b.w	8026028 <_ZN8touchgfx13TextureMapper19applyTransformationEv>

0802630a <_ZN8touchgfx13TextureMapper17setCameraDistanceEf>:
 802630a:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 802630e:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8026312:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8026316:	fe30 0a27 	vselgt.f32	s0, s0, s15
 802631a:	ed80 0a16 	vstr	s0, [r0, #88]	@ 0x58
 802631e:	f7ff be83 	b.w	8026028 <_ZN8touchgfx13TextureMapper19applyTransformationEv>

08026322 <_ZN8touchgfx13TextureMapper9setCameraEff>:
 8026322:	ed80 0a14 	vstr	s0, [r0, #80]	@ 0x50
 8026326:	edc0 0a15 	vstr	s1, [r0, #84]	@ 0x54
 802632a:	f7ff be7d 	b.w	8026028 <_ZN8touchgfx13TextureMapper19applyTransformationEv>

0802632e <_ZN8touchgfx13TextureMapper8setOrigoEff>:
 802632e:	ed80 0a11 	vstr	s0, [r0, #68]	@ 0x44
 8026332:	edc0 0a12 	vstr	s1, [r0, #72]	@ 0x48
 8026336:	f7ff be77 	b.w	8026028 <_ZN8touchgfx13TextureMapper19applyTransformationEv>

0802633a <_ZN8touchgfx13TextureMapper8setOrigoEfff>:
 802633a:	ed80 0a11 	vstr	s0, [r0, #68]	@ 0x44
 802633e:	edc0 0a12 	vstr	s1, [r0, #72]	@ 0x48
 8026342:	ed80 1a13 	vstr	s2, [r0, #76]	@ 0x4c
 8026346:	f7ff be6f 	b.w	8026028 <_ZN8touchgfx13TextureMapper19applyTransformationEv>

0802634a <_ZNK8touchgfx13TextureMapper15getBoundingRectEv>:
 802634a:	b510      	push	{r4, lr}
 802634c:	edd1 5a1a 	vldr	s11, [r1, #104]	@ 0x68
 8026350:	edd1 7a17 	vldr	s15, [r1, #92]	@ 0x5c
 8026354:	ed91 6a1d 	vldr	s12, [r1, #116]	@ 0x74
 8026358:	eef4 7ae5 	vcmpe.f32	s15, s11
 802635c:	edd1 6a20 	vldr	s13, [r1, #128]	@ 0x80
 8026360:	f9b1 4008 	ldrsh.w	r4, [r1, #8]
 8026364:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8026368:	bf54      	ite	pl
 802636a:	eeb0 7a65 	vmovpl.f32	s14, s11
 802636e:	eeb0 7a67 	vmovmi.f32	s14, s15
 8026372:	eeb4 6ac7 	vcmpe.f32	s12, s14
 8026376:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802637a:	fe37 7a06 	vselgt.f32	s14, s14, s12
 802637e:	eef4 6ac7 	vcmpe.f32	s13, s14
 8026382:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8026386:	fe37 7a26 	vselgt.f32	s14, s14, s13
 802638a:	febb 7a47 	vrintm.f32	s14, s14
 802638e:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8026392:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8026396:	eef4 7ae5 	vcmpe.f32	s15, s11
 802639a:	bf56      	itet	pl
 802639c:	eebd 7ac7 	vcvtpl.s32.f32	s14, s14
 80263a0:	2200      	movmi	r2, #0
 80263a2:	ee17 3a10 	vmovpl	r3, s14
 80263a6:	ee07 4a10 	vmov	s14, r4
 80263aa:	bf58      	it	pl
 80263ac:	b21a      	sxthpl	r2, r3
 80263ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80263b2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80263b6:	8002      	strh	r2, [r0, #0]
 80263b8:	fe77 7aa5 	vselgt.f32	s15, s15, s11
 80263bc:	eeb4 6ae7 	vcmpe.f32	s12, s15
 80263c0:	edd1 5a1b 	vldr	s11, [r1, #108]	@ 0x6c
 80263c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80263c8:	bf58      	it	pl
 80263ca:	eef0 7a46 	vmovpl.f32	s15, s12
 80263ce:	ed91 6a1e 	vldr	s12, [r1, #120]	@ 0x78
 80263d2:	eef4 6ae7 	vcmpe.f32	s13, s15
 80263d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80263da:	bf58      	it	pl
 80263dc:	eef0 7a66 	vmovpl.f32	s15, s13
 80263e0:	edd1 6a21 	vldr	s13, [r1, #132]	@ 0x84
 80263e4:	fefa 7a67 	vrintp.f32	s15, s15
 80263e8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80263ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80263f0:	bfdc      	itt	le
 80263f2:	eefd 7ae7 	vcvtle.s32.f32	s15, s15
 80263f6:	ee17 3a90 	vmovle	r3, s15
 80263fa:	edd1 7a18 	vldr	s15, [r1, #96]	@ 0x60
 80263fe:	f9b1 100a 	ldrsh.w	r1, [r1, #10]
 8026402:	eef4 7ae5 	vcmpe.f32	s15, s11
 8026406:	bfd8      	it	le
 8026408:	b21c      	sxthle	r4, r3
 802640a:	1aa2      	subs	r2, r4, r2
 802640c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8026410:	8082      	strh	r2, [r0, #4]
 8026412:	bf54      	ite	pl
 8026414:	eeb0 7a65 	vmovpl.f32	s14, s11
 8026418:	eeb0 7a67 	vmovmi.f32	s14, s15
 802641c:	eeb4 6ac7 	vcmpe.f32	s12, s14
 8026420:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8026424:	fe37 7a06 	vselgt.f32	s14, s14, s12
 8026428:	eef4 6ac7 	vcmpe.f32	s13, s14
 802642c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8026430:	fe37 7a26 	vselgt.f32	s14, s14, s13
 8026434:	febb 7a47 	vrintm.f32	s14, s14
 8026438:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 802643c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8026440:	eef4 7ae5 	vcmpe.f32	s15, s11
 8026444:	bf56      	itet	pl
 8026446:	eebd 7ac7 	vcvtpl.s32.f32	s14, s14
 802644a:	2300      	movmi	r3, #0
 802644c:	ee17 3a10 	vmovpl	r3, s14
 8026450:	ee07 1a10 	vmov	s14, r1
 8026454:	bf58      	it	pl
 8026456:	b21b      	sxthpl	r3, r3
 8026458:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802645c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8026460:	8043      	strh	r3, [r0, #2]
 8026462:	fe77 7aa5 	vselgt.f32	s15, s15, s11
 8026466:	eeb4 6ae7 	vcmpe.f32	s12, s15
 802646a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802646e:	bf58      	it	pl
 8026470:	eef0 7a46 	vmovpl.f32	s15, s12
 8026474:	eef4 6ae7 	vcmpe.f32	s13, s15
 8026478:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802647c:	bf58      	it	pl
 802647e:	eef0 7a66 	vmovpl.f32	s15, s13
 8026482:	fefa 7a67 	vrintp.f32	s15, s15
 8026486:	eef4 7ac7 	vcmpe.f32	s15, s14
 802648a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802648e:	bfde      	ittt	le
 8026490:	eefd 7ae7 	vcvtle.s32.f32	s15, s15
 8026494:	ee17 1a90 	vmovle	r1, s15
 8026498:	b209      	sxthle	r1, r1
 802649a:	1acb      	subs	r3, r1, r3
 802649c:	80c3      	strh	r3, [r0, #6]
 802649e:	bd10      	pop	{r4, pc}

080264a0 <_ZNK8touchgfx13TextureMapper17invalidateContentEv>:
 80264a0:	b513      	push	{r0, r1, r4, lr}
 80264a2:	f890 3028 	ldrb.w	r3, [r0, #40]	@ 0x28
 80264a6:	4604      	mov	r4, r0
 80264a8:	b143      	cbz	r3, 80264bc <_ZNK8touchgfx13TextureMapper17invalidateContentEv+0x1c>
 80264aa:	4601      	mov	r1, r0
 80264ac:	4668      	mov	r0, sp
 80264ae:	f7ff ff4c 	bl	802634a <_ZNK8touchgfx13TextureMapper15getBoundingRectEv>
 80264b2:	6823      	ldr	r3, [r4, #0]
 80264b4:	4669      	mov	r1, sp
 80264b6:	4620      	mov	r0, r4
 80264b8:	691b      	ldr	r3, [r3, #16]
 80264ba:	4798      	blx	r3
 80264bc:	b002      	add	sp, #8
 80264be:	bd10      	pop	{r4, pc}

080264c0 <_ZNK8touchgfx13TextureMapper19lookupRenderVariantEv>:
 80264c0:	4603      	mov	r3, r0
 80264c2:	3026      	adds	r0, #38	@ 0x26
 80264c4:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 80264c8:	b90b      	cbnz	r3, 80264ce <_ZNK8touchgfx13TextureMapper19lookupRenderVariantEv+0xe>
 80264ca:	f7f2 bda7 	b.w	801901c <_ZN8touchgfx34lookupNearestNeighborRenderVariantERKNS_6BitmapE>
 80264ce:	f7f2 bdb5 	b.w	801903c <_ZN8touchgfx27lookupBilinearRenderVariantERKNS_6BitmapE>
	...

080264d4 <_ZNK8touchgfx13TextureMapper8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_>:
 80264d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80264d8:	4604      	mov	r4, r0
 80264da:	469b      	mov	fp, r3
 80264dc:	ed2d 8b04 	vpush	{d8-d9}
 80264e0:	f9b0 c008 	ldrsh.w	ip, [r0, #8]
 80264e4:	b0b3      	sub	sp, #204	@ 0xcc
 80264e6:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 80264ea:	f9b1 6000 	ldrsh.w	r6, [r1]
 80264ee:	8888      	ldrh	r0, [r1, #4]
 80264f0:	9206      	str	r2, [sp, #24]
 80264f2:	2200      	movs	r2, #0
 80264f4:	4430      	add	r0, r6
 80264f6:	f8dd a100 	ldr.w	sl, [sp, #256]	@ 0x100
 80264fa:	f8dd 9104 	ldr.w	r9, [sp, #260]	@ 0x104
 80264fe:	b280      	uxth	r0, r0
 8026500:	f8dd 8108 	ldr.w	r8, [sp, #264]	@ 0x108
 8026504:	9f43      	ldr	r7, [sp, #268]	@ 0x10c
 8026506:	fa0f fe80 	sxth.w	lr, r0
 802650a:	9211      	str	r2, [sp, #68]	@ 0x44
 802650c:	4596      	cmp	lr, r2
 802650e:	f340 8129 	ble.w	8026764 <_ZNK8touchgfx13TextureMapper8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x290>
 8026512:	45b4      	cmp	ip, r6
 8026514:	f340 8126 	ble.w	8026764 <_ZNK8touchgfx13TextureMapper8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x290>
 8026518:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 802651c:	88ca      	ldrh	r2, [r1, #6]
 802651e:	442a      	add	r2, r5
 8026520:	b292      	uxth	r2, r2
 8026522:	b211      	sxth	r1, r2
 8026524:	2900      	cmp	r1, #0
 8026526:	f340 811d 	ble.w	8026764 <_ZNK8touchgfx13TextureMapper8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x290>
 802652a:	42ab      	cmp	r3, r5
 802652c:	f340 811a 	ble.w	8026764 <_ZNK8touchgfx13TextureMapper8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x290>
 8026530:	45f4      	cmp	ip, lr
 8026532:	ea26 76e6 	bic.w	r6, r6, r6, asr #31
 8026536:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 802653a:	bfb8      	it	lt
 802653c:	fa1f f08c 	uxthlt.w	r0, ip
 8026540:	428b      	cmp	r3, r1
 8026542:	f8ad 6044 	strh.w	r6, [sp, #68]	@ 0x44
 8026546:	bfb8      	it	lt
 8026548:	b29a      	uxthlt	r2, r3
 802654a:	1b80      	subs	r0, r0, r6
 802654c:	f8ad 5046 	strh.w	r5, [sp, #70]	@ 0x46
 8026550:	1b52      	subs	r2, r2, r5
 8026552:	f8ad 0048 	strh.w	r0, [sp, #72]	@ 0x48
 8026556:	f8ad 204a 	strh.w	r2, [sp, #74]	@ 0x4a
 802655a:	ab11      	add	r3, sp, #68	@ 0x44
 802655c:	ad13      	add	r5, sp, #76	@ 0x4c
 802655e:	6822      	ldr	r2, [r4, #0]
 8026560:	1d26      	adds	r6, r4, #4
 8026562:	9307      	str	r3, [sp, #28]
 8026564:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8026566:	e893 0003 	ldmia.w	r3, {r0, r1}
 802656a:	e885 0003 	stmia.w	r5, {r0, r1}
 802656e:	4629      	mov	r1, r5
 8026570:	4620      	mov	r0, r4
 8026572:	4790      	blx	r2
 8026574:	4621      	mov	r1, r4
 8026576:	a815      	add	r0, sp, #84	@ 0x54
 8026578:	f7f2 f988 	bl	801888c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 802657c:	a815      	add	r0, sp, #84	@ 0x54
 802657e:	f7f0 fe73 	bl	8017268 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8026582:	9b07      	ldr	r3, [sp, #28]
 8026584:	4631      	mov	r1, r6
 8026586:	4618      	mov	r0, r3
 8026588:	f7f0 feb2 	bl	80172f0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 802658c:	4628      	mov	r0, r5
 802658e:	f104 0526 	add.w	r5, r4, #38	@ 0x26
 8026592:	f7f0 fe69 	bl	8017268 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8026596:	4628      	mov	r0, r5
 8026598:	f7f4 ff24 	bl	801b3e4 <_ZNK8touchgfx6Bitmap7getDataEv>
 802659c:	9007      	str	r0, [sp, #28]
 802659e:	2800      	cmp	r0, #0
 80265a0:	f000 80db 	beq.w	802675a <_ZNK8touchgfx13TextureMapper8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x286>
 80265a4:	f8db 2000 	ldr.w	r2, [fp]
 80265a8:	a90d      	add	r1, sp, #52	@ 0x34
 80265aa:	a809      	add	r0, sp, #36	@ 0x24
 80265ac:	9209      	str	r2, [sp, #36]	@ 0x24
 80265ae:	f8db 2004 	ldr.w	r2, [fp, #4]
 80265b2:	920a      	str	r2, [sp, #40]	@ 0x28
 80265b4:	f8db 2008 	ldr.w	r2, [fp, #8]
 80265b8:	920b      	str	r2, [sp, #44]	@ 0x2c
 80265ba:	f8db 200c 	ldr.w	r2, [fp, #12]
 80265be:	920c      	str	r2, [sp, #48]	@ 0x30
 80265c0:	f8da 2000 	ldr.w	r2, [sl]
 80265c4:	920d      	str	r2, [sp, #52]	@ 0x34
 80265c6:	f8da 2004 	ldr.w	r2, [sl, #4]
 80265ca:	920e      	str	r2, [sp, #56]	@ 0x38
 80265cc:	f8da 2008 	ldr.w	r2, [sl, #8]
 80265d0:	920f      	str	r2, [sp, #60]	@ 0x3c
 80265d2:	f8da 200c 	ldr.w	r2, [sl, #12]
 80265d6:	9210      	str	r2, [sp, #64]	@ 0x40
 80265d8:	4632      	mov	r2, r6
 80265da:	f7f0 fe6d 	bl	80172b8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE>
 80265de:	4632      	mov	r2, r6
 80265e0:	a90e      	add	r1, sp, #56	@ 0x38
 80265e2:	a80a      	add	r0, sp, #40	@ 0x28
 80265e4:	f7f0 fe68 	bl	80172b8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE>
 80265e8:	4632      	mov	r2, r6
 80265ea:	a90f      	add	r1, sp, #60	@ 0x3c
 80265ec:	a80b      	add	r0, sp, #44	@ 0x2c
 80265ee:	f7f0 fe63 	bl	80172b8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE>
 80265f2:	4632      	mov	r2, r6
 80265f4:	a910      	add	r1, sp, #64	@ 0x40
 80265f6:	a80c      	add	r0, sp, #48	@ 0x30
 80265f8:	f7f0 fe5e 	bl	80172b8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE>
 80265fc:	eddd 7a0d 	vldr	s15, [sp, #52]	@ 0x34
 8026600:	edd7 4a00 	vldr	s9, [r7]
 8026604:	eef0 6a67 	vmov.f32	s13, s15
 8026608:	eddd 7a0a 	vldr	s15, [sp, #40]	@ 0x28
 802660c:	edd7 5a01 	vldr	s11, [r7, #4]
 8026610:	eeb0 7a67 	vmov.f32	s14, s15
 8026614:	eddd 7a0e 	vldr	s15, [sp, #56]	@ 0x38
 8026618:	eefe 6ace 	vcvt.s32.f32	s13, s13, #4
 802661c:	ed98 4a00 	vldr	s8, [r8]
 8026620:	eeb0 6a67 	vmov.f32	s12, s15
 8026624:	eddd 7a0b 	vldr	s15, [sp, #44]	@ 0x2c
 8026628:	eebe 7ace 	vcvt.s32.f32	s14, s14, #4
 802662c:	ed98 5a01 	vldr	s10, [r8, #4]
 8026630:	ed99 9a00 	vldr	s18, [r9]
 8026634:	eebe 6ace 	vcvt.s32.f32	s12, s12, #4
 8026638:	ed99 8a01 	vldr	s16, [r9, #4]
 802663c:	edd9 8a02 	vldr	s17, [r9, #8]
 8026640:	f8d9 e00c 	ldr.w	lr, [r9, #12]
 8026644:	ee16 6a10 	vmov	r6, s12
 8026648:	eeb0 6a67 	vmov.f32	s12, s15
 802664c:	eddd 7a0f 	vldr	s15, [sp, #60]	@ 0x3c
 8026650:	f8d8 c00c 	ldr.w	ip, [r8, #12]
 8026654:	eebe 6ace 	vcvt.s32.f32	s12, s12, #4
 8026658:	edcd 6a1f 	vstr	s13, [sp, #124]	@ 0x7c
 802665c:	ed8d 4a21 	vstr	s8, [sp, #132]	@ 0x84
 8026660:	edcd 4a22 	vstr	s9, [sp, #136]	@ 0x88
 8026664:	ee16 0a10 	vmov	r0, s12
 8026668:	eeb0 6a67 	vmov.f32	s12, s15
 802666c:	eddd 7a0c 	vldr	s15, [sp, #48]	@ 0x30
 8026670:	ed8d 7a23 	vstr	s14, [sp, #140]	@ 0x8c
 8026674:	eebe 6ace 	vcvt.s32.f32	s12, s12, #4
 8026678:	ed8d 5a26 	vstr	s10, [sp, #152]	@ 0x98
 802667c:	edcd 5a27 	vstr	s11, [sp, #156]	@ 0x9c
 8026680:	f8d7 a008 	ldr.w	sl, [r7, #8]
 8026684:	ee16 1a10 	vmov	r1, s12
 8026688:	eeb0 6a67 	vmov.f32	s12, s15
 802668c:	eddd 7a10 	vldr	s15, [sp, #64]	@ 0x40
 8026690:	f8d8 b008 	ldr.w	fp, [r8, #8]
 8026694:	eebe 6ace 	vcvt.s32.f32	s12, s12, #4
 8026698:	68ff      	ldr	r7, [r7, #12]
 802669a:	9624      	str	r6, [sp, #144]	@ 0x90
 802669c:	eefe 7ace 	vcvt.s32.f32	s15, s15, #4
 80266a0:	ed8d 9a20 	vstr	s18, [sp, #128]	@ 0x80
 80266a4:	ee16 2a10 	vmov	r2, s12
 80266a8:	ed9d 6a09 	vldr	s12, [sp, #36]	@ 0x24
 80266ac:	ed8d 8a25 	vstr	s16, [sp, #148]	@ 0x94
 80266b0:	eebe 6ace 	vcvt.s32.f32	s12, s12, #4
 80266b4:	e9cd 0128 	strd	r0, r1, [sp, #160]	@ 0xa0
 80266b8:	ed8d 6a1e 	vstr	s12, [sp, #120]	@ 0x78
 80266bc:	4628      	mov	r0, r5
 80266be:	edcd 8a2a 	vstr	s17, [sp, #168]	@ 0xa8
 80266c2:	9b06      	ldr	r3, [sp, #24]
 80266c4:	922d      	str	r2, [sp, #180]	@ 0xb4
 80266c6:	4a29      	ldr	r2, [pc, #164]	@ (802676c <_ZNK8touchgfx13TextureMapper8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x298>)
 80266c8:	9317      	str	r3, [sp, #92]	@ 0x5c
 80266ca:	8812      	ldrh	r2, [r2, #0]
 80266cc:	9b07      	ldr	r3, [sp, #28]
 80266ce:	edcd 7a2e 	vstr	s15, [sp, #184]	@ 0xb8
 80266d2:	f8cd e0bc 	str.w	lr, [sp, #188]	@ 0xbc
 80266d6:	f8cd c0c0 	str.w	ip, [sp, #192]	@ 0xc0
 80266da:	9218      	str	r2, [sp, #96]	@ 0x60
 80266dc:	9319      	str	r3, [sp, #100]	@ 0x64
 80266de:	f8cd b0ac 	str.w	fp, [sp, #172]	@ 0xac
 80266e2:	f8cd a0b0 	str.w	sl, [sp, #176]	@ 0xb0
 80266e6:	9731      	str	r7, [sp, #196]	@ 0xc4
 80266e8:	f7f4 feac 	bl	801b444 <_ZNK8touchgfx6Bitmap12getExtraDataEv>
 80266ec:	901a      	str	r0, [sp, #104]	@ 0x68
 80266ee:	4628      	mov	r0, r5
 80266f0:	f7f4 fd86 	bl	801b200 <_ZNK8touchgfx6Bitmap8getWidthEv>
 80266f4:	901b      	str	r0, [sp, #108]	@ 0x6c
 80266f6:	4628      	mov	r0, r5
 80266f8:	f7f4 fdb6 	bl	801b268 <_ZNK8touchgfx6Bitmap9getHeightEv>
 80266fc:	901c      	str	r0, [sp, #112]	@ 0x70
 80266fe:	4628      	mov	r0, r5
 8026700:	f7f4 fd7e 	bl	801b200 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8026704:	eeb4 9a48 	vcmp.f32	s18, s16
 8026708:	901d      	str	r0, [sp, #116]	@ 0x74
 802670a:	f8b4 608c 	ldrh.w	r6, [r4, #140]	@ 0x8c
 802670e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8026712:	d107      	bne.n	8026724 <_ZNK8touchgfx13TextureMapper8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x250>
 8026714:	eeb4 8a68 	vcmp.f32	s16, s17
 8026718:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 802671c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8026720:	bf08      	it	eq
 8026722:	461e      	moveq	r6, r3
 8026724:	4b12      	ldr	r3, [pc, #72]	@ (8026770 <_ZNK8touchgfx13TextureMapper8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x29c>)
 8026726:	681b      	ldr	r3, [r3, #0]
 8026728:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 802672c:	b10a      	cbz	r2, 8026732 <_ZNK8touchgfx13TextureMapper8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x25e>
 802672e:	6cdd      	ldr	r5, [r3, #76]	@ 0x4c
 8026730:	b905      	cbnz	r5, 8026734 <_ZNK8touchgfx13TextureMapper8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x260>
 8026732:	689d      	ldr	r5, [r3, #8]
 8026734:	682b      	ldr	r3, [r5, #0]
 8026736:	4620      	mov	r0, r4
 8026738:	6c1f      	ldr	r7, [r3, #64]	@ 0x40
 802673a:	f7ff fec1 	bl	80264c0 <_ZNK8touchgfx13TextureMapper19lookupRenderVariantEv>
 802673e:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 8026742:	aa1e      	add	r2, sp, #120	@ 0x78
 8026744:	9604      	str	r6, [sp, #16]
 8026746:	a917      	add	r1, sp, #92	@ 0x5c
 8026748:	e9cd 0302 	strd	r0, r3, [sp, #8]
 802674c:	ab13      	add	r3, sp, #76	@ 0x4c
 802674e:	4628      	mov	r0, r5
 8026750:	9301      	str	r3, [sp, #4]
 8026752:	ab15      	add	r3, sp, #84	@ 0x54
 8026754:	9300      	str	r3, [sp, #0]
 8026756:	ab19      	add	r3, sp, #100	@ 0x64
 8026758:	47b8      	blx	r7
 802675a:	b033      	add	sp, #204	@ 0xcc
 802675c:	ecbd 8b04 	vpop	{d8-d9}
 8026760:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8026764:	2300      	movs	r3, #0
 8026766:	9312      	str	r3, [sp, #72]	@ 0x48
 8026768:	e6f7      	b.n	802655a <_ZNK8touchgfx13TextureMapper8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x86>
 802676a:	bf00      	nop
 802676c:	24028e1a 	.word	0x24028e1a
 8026770:	24028e20 	.word	0x24028e20

08026774 <_ZNK8touchgfx13TextureMapper4drawERKNS_4RectE>:
 8026774:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8026778:	ed2d 8b02 	vpush	{d8}
 802677c:	f890 3028 	ldrb.w	r3, [r0, #40]	@ 0x28
 8026780:	b098      	sub	sp, #96	@ 0x60
 8026782:	4604      	mov	r4, r0
 8026784:	4688      	mov	r8, r1
 8026786:	2b00      	cmp	r3, #0
 8026788:	d077      	beq.n	802687a <_ZNK8touchgfx13TextureMapper4drawERKNS_4RectE+0x106>
 802678a:	f100 0526 	add.w	r5, r0, #38	@ 0x26
 802678e:	4628      	mov	r0, r5
 8026790:	f7f4 fd36 	bl	801b200 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8026794:	ee07 0a90 	vmov	s15, r0
 8026798:	4628      	mov	r0, r5
 802679a:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 802679e:	f7f4 fd63 	bl	801b268 <_ZNK8touchgfx6Bitmap9getHeightEv>
 80267a2:	4b4e      	ldr	r3, [pc, #312]	@ (80268dc <_ZNK8touchgfx13TextureMapper4drawERKNS_4RectE+0x168>)
 80267a4:	ee07 0a90 	vmov	s15, r0
 80267a8:	781b      	ldrb	r3, [r3, #0]
 80267aa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80267ae:	eeff 7a00 	vmov.f32	s15, #240	@ 0xbf800000 -1.0
 80267b2:	2b01      	cmp	r3, #1
 80267b4:	d066      	beq.n	8026884 <_ZNK8touchgfx13TextureMapper4drawERKNS_4RectE+0x110>
 80267b6:	eeb0 6a47 	vmov.f32	s12, s14
 80267ba:	ee17 3a10 	vmov	r3, s14
 80267be:	eeb0 4a48 	vmov.f32	s8, s16
 80267c2:	eeb0 7a48 	vmov.f32	s14, s16
 80267c6:	eef0 4a67 	vmov.f32	s9, s15
 80267ca:	eeb0 8a67 	vmov.f32	s16, s15
 80267ce:	ed94 5a17 	vldr	s10, [r4, #92]	@ 0x5c
 80267d2:	edd4 5a18 	vldr	s11, [r4, #96]	@ 0x60
 80267d6:	ed94 3a1b 	vldr	s6, [r4, #108]	@ 0x6c
 80267da:	edd4 2a1d 	vldr	s5, [r4, #116]	@ 0x74
 80267de:	ee73 1a65 	vsub.f32	s3, s6, s11
 80267e2:	ed94 2a1a 	vldr	s4, [r4, #104]	@ 0x68
 80267e6:	ee72 6ac5 	vsub.f32	s13, s5, s10
 80267ea:	edd4 3a1e 	vldr	s7, [r4, #120]	@ 0x78
 80267ee:	ee32 1a45 	vsub.f32	s2, s4, s10
 80267f2:	6f25      	ldr	r5, [r4, #112]	@ 0x70
 80267f4:	6e66      	ldr	r6, [r4, #100]	@ 0x64
 80267f6:	ee66 6ae1 	vnmul.f32	s13, s13, s3
 80267fa:	6fe2      	ldr	r2, [r4, #124]	@ 0x7c
 80267fc:	ee73 1ae5 	vsub.f32	s3, s7, s11
 8026800:	f8d4 c080 	ldr.w	ip, [r4, #128]	@ 0x80
 8026804:	f8d4 7084 	ldr.w	r7, [r4, #132]	@ 0x84
 8026808:	f8d4 0088 	ldr.w	r0, [r4, #136]	@ 0x88
 802680c:	eee1 6a21 	vfma.f32	s13, s2, s3
 8026810:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 8026814:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8026818:	dd3d      	ble.n	8026896 <_ZNK8touchgfx13TextureMapper4drawERKNS_4RectE+0x122>
 802681a:	ed8d 5a04 	vstr	s10, [sp, #16]
 802681e:	ed8d 2a05 	vstr	s4, [sp, #20]
 8026822:	edcd 2a06 	vstr	s5, [sp, #24]
 8026826:	f8cd c01c 	str.w	ip, [sp, #28]
 802682a:	edcd 5a08 	vstr	s11, [sp, #32]
 802682e:	ed8d 3a09 	vstr	s6, [sp, #36]	@ 0x24
 8026832:	edcd 3a0a 	vstr	s7, [sp, #40]	@ 0x28
 8026836:	970b      	str	r7, [sp, #44]	@ 0x2c
 8026838:	960c      	str	r6, [sp, #48]	@ 0x30
 802683a:	950d      	str	r5, [sp, #52]	@ 0x34
 802683c:	920e      	str	r2, [sp, #56]	@ 0x38
 802683e:	900f      	str	r0, [sp, #60]	@ 0x3c
 8026840:	edcd 7a10 	vstr	s15, [sp, #64]	@ 0x40
 8026844:	ed8d 4a11 	vstr	s8, [sp, #68]	@ 0x44
 8026848:	ed8d 7a12 	vstr	s14, [sp, #72]	@ 0x48
 802684c:	edcd 4a13 	vstr	s9, [sp, #76]	@ 0x4c
 8026850:	ed8d 8a14 	vstr	s16, [sp, #80]	@ 0x50
 8026854:	edcd 7a15 	vstr	s15, [sp, #84]	@ 0x54
 8026858:	9316      	str	r3, [sp, #88]	@ 0x58
 802685a:	ed8d 6a17 	vstr	s12, [sp, #92]	@ 0x5c
 802685e:	ab14      	add	r3, sp, #80	@ 0x50
 8026860:	2200      	movs	r2, #0
 8026862:	4641      	mov	r1, r8
 8026864:	4620      	mov	r0, r4
 8026866:	9303      	str	r3, [sp, #12]
 8026868:	ab10      	add	r3, sp, #64	@ 0x40
 802686a:	9302      	str	r3, [sp, #8]
 802686c:	ab0c      	add	r3, sp, #48	@ 0x30
 802686e:	9301      	str	r3, [sp, #4]
 8026870:	ab08      	add	r3, sp, #32
 8026872:	9300      	str	r3, [sp, #0]
 8026874:	ab04      	add	r3, sp, #16
 8026876:	f7ff fe2d 	bl	80264d4 <_ZNK8touchgfx13TextureMapper8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_>
 802687a:	b018      	add	sp, #96	@ 0x60
 802687c:	ecbd 8b02 	vpop	{d8}
 8026880:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8026884:	eeb0 6a48 	vmov.f32	s12, s16
 8026888:	ee17 3a90 	vmov	r3, s15
 802688c:	eef0 4a47 	vmov.f32	s9, s14
 8026890:	eeb0 4a67 	vmov.f32	s8, s15
 8026894:	e79b      	b.n	80267ce <_ZNK8touchgfx13TextureMapper4drawERKNS_4RectE+0x5a>
 8026896:	ed8d 5a05 	vstr	s10, [sp, #20]
 802689a:	ed8d 2a04 	vstr	s4, [sp, #16]
 802689e:	f8cd c018 	str.w	ip, [sp, #24]
 80268a2:	edcd 2a07 	vstr	s5, [sp, #28]
 80268a6:	edcd 5a09 	vstr	s11, [sp, #36]	@ 0x24
 80268aa:	ed8d 3a08 	vstr	s6, [sp, #32]
 80268ae:	970a      	str	r7, [sp, #40]	@ 0x28
 80268b0:	edcd 3a0b 	vstr	s7, [sp, #44]	@ 0x2c
 80268b4:	960d      	str	r6, [sp, #52]	@ 0x34
 80268b6:	950c      	str	r5, [sp, #48]	@ 0x30
 80268b8:	900e      	str	r0, [sp, #56]	@ 0x38
 80268ba:	920f      	str	r2, [sp, #60]	@ 0x3c
 80268bc:	edcd 7a11 	vstr	s15, [sp, #68]	@ 0x44
 80268c0:	ed8d 4a10 	vstr	s8, [sp, #64]	@ 0x40
 80268c4:	edcd 4a12 	vstr	s9, [sp, #72]	@ 0x48
 80268c8:	ed8d 7a13 	vstr	s14, [sp, #76]	@ 0x4c
 80268cc:	ed8d 8a15 	vstr	s16, [sp, #84]	@ 0x54
 80268d0:	edcd 7a14 	vstr	s15, [sp, #80]	@ 0x50
 80268d4:	ed8d 6a16 	vstr	s12, [sp, #88]	@ 0x58
 80268d8:	9317      	str	r3, [sp, #92]	@ 0x5c
 80268da:	e7c0      	b.n	802685e <_ZNK8touchgfx13TextureMapper4drawERKNS_4RectE+0xea>
 80268dc:	24028e18 	.word	0x24028e18

080268e0 <_ZN8touchgfxmlERKNS_9Matrix4x4ERKNS_6Point4E>:
 80268e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80268e2:	2300      	movs	r3, #0
 80268e4:	b08d      	sub	sp, #52	@ 0x34
 80268e6:	f100 0640 	add.w	r6, r0, #64	@ 0x40
 80268ea:	f101 0710 	add.w	r7, r1, #16
 80268ee:	9304      	str	r3, [sp, #16]
 80268f0:	aa04      	add	r2, sp, #16
 80268f2:	9305      	str	r3, [sp, #20]
 80268f4:	9306      	str	r3, [sp, #24]
 80268f6:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 80268fa:	9307      	str	r3, [sp, #28]
 80268fc:	4613      	mov	r3, r2
 80268fe:	460c      	mov	r4, r1
 8026900:	4605      	mov	r5, r0
 8026902:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 802693c <_ZN8touchgfxmlERKNS_9Matrix4x4ERKNS_6Point4E+0x5c>
 8026906:	ecb4 7a01 	vldmia	r4!, {s14}
 802690a:	ecf5 6a01 	vldmia	r5!, {s13}
 802690e:	42bc      	cmp	r4, r7
 8026910:	eee6 7a87 	vfma.f32	s15, s13, s14
 8026914:	d1f7      	bne.n	8026906 <_ZN8touchgfxmlERKNS_9Matrix4x4ERKNS_6Point4E+0x26>
 8026916:	3010      	adds	r0, #16
 8026918:	ece2 7a01 	vstmia	r2!, {s15}
 802691c:	42b0      	cmp	r0, r6
 802691e:	d1ee      	bne.n	80268fe <_ZN8touchgfxmlERKNS_9Matrix4x4ERKNS_6Point4E+0x1e>
 8026920:	ac0c      	add	r4, sp, #48	@ 0x30
 8026922:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8026924:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
 8026928:	ed9d 0a08 	vldr	s0, [sp, #32]
 802692c:	eddd 0a09 	vldr	s1, [sp, #36]	@ 0x24
 8026930:	ed9d 1a0a 	vldr	s2, [sp, #40]	@ 0x28
 8026934:	eddd 1a0b 	vldr	s3, [sp, #44]	@ 0x2c
 8026938:	b00d      	add	sp, #52	@ 0x34
 802693a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802693c:	00000000 	.word	0x00000000

08026940 <_ZN8touchgfx9Matrix4x4C1Ev>:
 8026940:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8026944:	2300      	movs	r3, #0
 8026946:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 802696c <_ZN8touchgfx9Matrix4x4C1Ev+0x2c>
 802694a:	eb00 1103 	add.w	r1, r0, r3, lsl #4
 802694e:	2200      	movs	r2, #0
 8026950:	4293      	cmp	r3, r2
 8026952:	f102 0201 	add.w	r2, r2, #1
 8026956:	fe47 6a87 	vseleq.f32	s13, s15, s14
 802695a:	2a04      	cmp	r2, #4
 802695c:	ece1 6a01 	vstmia	r1!, {s13}
 8026960:	d1f6      	bne.n	8026950 <_ZN8touchgfx9Matrix4x4C1Ev+0x10>
 8026962:	3301      	adds	r3, #1
 8026964:	2b04      	cmp	r3, #4
 8026966:	d1f0      	bne.n	802694a <_ZN8touchgfx9Matrix4x4C1Ev+0xa>
 8026968:	4770      	bx	lr
 802696a:	bf00      	nop
 802696c:	00000000 	.word	0x00000000

08026970 <_ZN8touchgfxmlERKNS_9Matrix4x4ES2_>:
 8026970:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8026974:	460c      	mov	r4, r1
 8026976:	4605      	mov	r5, r0
 8026978:	4690      	mov	r8, r2
 802697a:	f7ff ffe1 	bl	8026940 <_ZN8touchgfx9Matrix4x4C1Ev>
 802697e:	4628      	mov	r0, r5
 8026980:	4621      	mov	r1, r4
 8026982:	f104 0c40 	add.w	ip, r4, #64	@ 0x40
 8026986:	2300      	movs	r3, #0
 8026988:	eb08 0603 	add.w	r6, r8, r3
 802698c:	460f      	mov	r7, r1
 802698e:	2400      	movs	r4, #0
 8026990:	eddf 7a0c 	vldr	s15, [pc, #48]	@ 80269c4 <_ZN8touchgfxmlERKNS_9Matrix4x4ES2_+0x54>
 8026994:	4632      	mov	r2, r6
 8026996:	3401      	adds	r4, #1
 8026998:	ecf7 6a01 	vldmia	r7!, {s13}
 802699c:	3610      	adds	r6, #16
 802699e:	ed92 7a00 	vldr	s14, [r2]
 80269a2:	2c04      	cmp	r4, #4
 80269a4:	eee6 7a87 	vfma.f32	s15, s13, s14
 80269a8:	d1f4      	bne.n	8026994 <_ZN8touchgfxmlERKNS_9Matrix4x4ES2_+0x24>
 80269aa:	18c2      	adds	r2, r0, r3
 80269ac:	3304      	adds	r3, #4
 80269ae:	2b10      	cmp	r3, #16
 80269b0:	edc2 7a00 	vstr	s15, [r2]
 80269b4:	d1e8      	bne.n	8026988 <_ZN8touchgfxmlERKNS_9Matrix4x4ES2_+0x18>
 80269b6:	3110      	adds	r1, #16
 80269b8:	3010      	adds	r0, #16
 80269ba:	4561      	cmp	r1, ip
 80269bc:	d1e3      	bne.n	8026986 <_ZN8touchgfxmlERKNS_9Matrix4x4ES2_+0x16>
 80269be:	4628      	mov	r0, r5
 80269c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80269c4:	00000000 	.word	0x00000000

080269c8 <_ZN8touchgfx9Matrix4x415setViewDistanceEf>:
 80269c8:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 80269cc:	f100 0320 	add.w	r3, r0, #32
 80269d0:	3030      	adds	r0, #48	@ 0x30
 80269d2:	ee87 0a80 	vdiv.f32	s0, s15, s0
 80269d6:	ecf3 7a01 	vldmia	r3!, {s15}
 80269da:	4283      	cmp	r3, r0
 80269dc:	ee60 7a27 	vmul.f32	s15, s0, s15
 80269e0:	edc3 7a03 	vstr	s15, [r3, #12]
 80269e4:	d1f7      	bne.n	80269d6 <_ZN8touchgfx9Matrix4x415setViewDistanceEf+0xe>
 80269e6:	4770      	bx	lr

080269e8 <_ZN8touchgfx9Matrix4x420concatenateXRotationEf>:
 80269e8:	b510      	push	{r4, lr}
 80269ea:	ed2d 8b02 	vpush	{d8}
 80269ee:	eef0 8a40 	vmov.f32	s17, s0
 80269f2:	4604      	mov	r4, r0
 80269f4:	f000 f940 	bl	8026c78 <sinf>
 80269f8:	eeb0 8a40 	vmov.f32	s16, s0
 80269fc:	eeb0 0a68 	vmov.f32	s0, s17
 8026a00:	f000 f9fe 	bl	8026e00 <cosf>
 8026a04:	eeb1 6a48 	vneg.f32	s12, s16
 8026a08:	f104 0310 	add.w	r3, r4, #16
 8026a0c:	f104 0220 	add.w	r2, r4, #32
 8026a10:	edd3 7a04 	vldr	s15, [r3, #16]
 8026a14:	edd3 6a00 	vldr	s13, [r3]
 8026a18:	ee26 7a27 	vmul.f32	s14, s12, s15
 8026a1c:	ee67 7a80 	vmul.f32	s15, s15, s0
 8026a20:	eea6 7a80 	vfma.f32	s14, s13, s0
 8026a24:	eee6 7a88 	vfma.f32	s15, s13, s16
 8026a28:	eca3 7a01 	vstmia	r3!, {s14}
 8026a2c:	429a      	cmp	r2, r3
 8026a2e:	edc3 7a03 	vstr	s15, [r3, #12]
 8026a32:	d1ed      	bne.n	8026a10 <_ZN8touchgfx9Matrix4x420concatenateXRotationEf+0x28>
 8026a34:	4620      	mov	r0, r4
 8026a36:	ecbd 8b02 	vpop	{d8}
 8026a3a:	bd10      	pop	{r4, pc}

08026a3c <_ZN8touchgfx9Matrix4x420concatenateYRotationEf>:
 8026a3c:	b510      	push	{r4, lr}
 8026a3e:	ed2d 8b02 	vpush	{d8}
 8026a42:	eef0 8a40 	vmov.f32	s17, s0
 8026a46:	4604      	mov	r4, r0
 8026a48:	f000 f916 	bl	8026c78 <sinf>
 8026a4c:	eeb0 8a40 	vmov.f32	s16, s0
 8026a50:	eeb0 0a68 	vmov.f32	s0, s17
 8026a54:	f000 f9d4 	bl	8026e00 <cosf>
 8026a58:	eeb1 6a48 	vneg.f32	s12, s16
 8026a5c:	4623      	mov	r3, r4
 8026a5e:	f104 0210 	add.w	r2, r4, #16
 8026a62:	edd3 7a08 	vldr	s15, [r3, #32]
 8026a66:	edd3 6a00 	vldr	s13, [r3]
 8026a6a:	ee27 7a88 	vmul.f32	s14, s15, s16
 8026a6e:	ee67 7a80 	vmul.f32	s15, s15, s0
 8026a72:	eea6 7a80 	vfma.f32	s14, s13, s0
 8026a76:	eee6 7a26 	vfma.f32	s15, s12, s13
 8026a7a:	eca3 7a01 	vstmia	r3!, {s14}
 8026a7e:	429a      	cmp	r2, r3
 8026a80:	edc3 7a07 	vstr	s15, [r3, #28]
 8026a84:	d1ed      	bne.n	8026a62 <_ZN8touchgfx9Matrix4x420concatenateYRotationEf+0x26>
 8026a86:	4620      	mov	r0, r4
 8026a88:	ecbd 8b02 	vpop	{d8}
 8026a8c:	bd10      	pop	{r4, pc}

08026a8e <_ZN8touchgfx9Matrix4x420concatenateZRotationEf>:
 8026a8e:	b510      	push	{r4, lr}
 8026a90:	ed2d 8b02 	vpush	{d8}
 8026a94:	eef0 8a40 	vmov.f32	s17, s0
 8026a98:	4604      	mov	r4, r0
 8026a9a:	f000 f8ed 	bl	8026c78 <sinf>
 8026a9e:	eeb0 8a40 	vmov.f32	s16, s0
 8026aa2:	eeb0 0a68 	vmov.f32	s0, s17
 8026aa6:	f000 f9ab 	bl	8026e00 <cosf>
 8026aaa:	eeb1 6a48 	vneg.f32	s12, s16
 8026aae:	4623      	mov	r3, r4
 8026ab0:	f104 0210 	add.w	r2, r4, #16
 8026ab4:	edd3 7a04 	vldr	s15, [r3, #16]
 8026ab8:	edd3 6a00 	vldr	s13, [r3]
 8026abc:	ee26 7a27 	vmul.f32	s14, s12, s15
 8026ac0:	ee67 7a80 	vmul.f32	s15, s15, s0
 8026ac4:	eea6 7a80 	vfma.f32	s14, s13, s0
 8026ac8:	eee6 7a88 	vfma.f32	s15, s13, s16
 8026acc:	eca3 7a01 	vstmia	r3!, {s14}
 8026ad0:	429a      	cmp	r2, r3
 8026ad2:	edc3 7a03 	vstr	s15, [r3, #12]
 8026ad6:	d1ed      	bne.n	8026ab4 <_ZN8touchgfx9Matrix4x420concatenateZRotationEf+0x26>
 8026ad8:	4620      	mov	r0, r4
 8026ada:	ecbd 8b02 	vpop	{d8}
 8026ade:	bd10      	pop	{r4, pc}

08026ae0 <_ZN8touchgfx9Matrix4x423concatenateXTranslationEf>:
 8026ae0:	4603      	mov	r3, r0
 8026ae2:	f100 0210 	add.w	r2, r0, #16
 8026ae6:	ed93 7a0c 	vldr	s14, [r3, #48]	@ 0x30
 8026aea:	edd3 7a00 	vldr	s15, [r3]
 8026aee:	eee7 7a00 	vfma.f32	s15, s14, s0
 8026af2:	ece3 7a01 	vstmia	r3!, {s15}
 8026af6:	4293      	cmp	r3, r2
 8026af8:	d1f5      	bne.n	8026ae6 <_ZN8touchgfx9Matrix4x423concatenateXTranslationEf+0x6>
 8026afa:	4770      	bx	lr

08026afc <_ZN8touchgfx9Matrix4x423concatenateYTranslationEf>:
 8026afc:	f100 0310 	add.w	r3, r0, #16
 8026b00:	f100 0220 	add.w	r2, r0, #32
 8026b04:	ed93 7a08 	vldr	s14, [r3, #32]
 8026b08:	edd3 7a00 	vldr	s15, [r3]
 8026b0c:	eee7 7a00 	vfma.f32	s15, s14, s0
 8026b10:	ece3 7a01 	vstmia	r3!, {s15}
 8026b14:	4293      	cmp	r3, r2
 8026b16:	d1f5      	bne.n	8026b04 <_ZN8touchgfx9Matrix4x423concatenateYTranslationEf+0x8>
 8026b18:	4770      	bx	lr

08026b1a <_ZN8touchgfx9Matrix4x423concatenateZTranslationEf>:
 8026b1a:	f100 0320 	add.w	r3, r0, #32
 8026b1e:	f100 0230 	add.w	r2, r0, #48	@ 0x30
 8026b22:	ed93 7a04 	vldr	s14, [r3, #16]
 8026b26:	edd3 7a00 	vldr	s15, [r3]
 8026b2a:	eee7 7a00 	vfma.f32	s15, s14, s0
 8026b2e:	ece3 7a01 	vstmia	r3!, {s15}
 8026b32:	4293      	cmp	r3, r2
 8026b34:	d1f5      	bne.n	8026b22 <_ZN8touchgfx9Matrix4x423concatenateZTranslationEf+0x8>
 8026b36:	4770      	bx	lr

08026b38 <_ZN8touchgfx9Matrix4x417concatenateXScaleEf>:
 8026b38:	4603      	mov	r3, r0
 8026b3a:	f100 0210 	add.w	r2, r0, #16
 8026b3e:	edd3 7a00 	vldr	s15, [r3]
 8026b42:	ee67 7a80 	vmul.f32	s15, s15, s0
 8026b46:	ece3 7a01 	vstmia	r3!, {s15}
 8026b4a:	4293      	cmp	r3, r2
 8026b4c:	d1f7      	bne.n	8026b3e <_ZN8touchgfx9Matrix4x417concatenateXScaleEf+0x6>
 8026b4e:	4770      	bx	lr

08026b50 <_ZN8touchgfx9Matrix4x417concatenateYScaleEf>:
 8026b50:	f100 0310 	add.w	r3, r0, #16
 8026b54:	f100 0220 	add.w	r2, r0, #32
 8026b58:	edd3 7a00 	vldr	s15, [r3]
 8026b5c:	ee67 7a80 	vmul.f32	s15, s15, s0
 8026b60:	ece3 7a01 	vstmia	r3!, {s15}
 8026b64:	4293      	cmp	r3, r2
 8026b66:	d1f7      	bne.n	8026b58 <_ZN8touchgfx9Matrix4x417concatenateYScaleEf+0x8>
 8026b68:	4770      	bx	lr

08026b6a <_ZN8touchgfx9Matrix4x417concatenateZScaleEf>:
 8026b6a:	f100 0320 	add.w	r3, r0, #32
 8026b6e:	f100 0230 	add.w	r2, r0, #48	@ 0x30
 8026b72:	edd3 7a00 	vldr	s15, [r3]
 8026b76:	ee67 7a80 	vmul.f32	s15, s15, s0
 8026b7a:	ece3 7a01 	vstmia	r3!, {s15}
 8026b7e:	4293      	cmp	r3, r2
 8026b80:	d1f7      	bne.n	8026b72 <_ZN8touchgfx9Matrix4x417concatenateZScaleEf+0x8>
 8026b82:	4770      	bx	lr

08026b84 <__aeabi_atexit>:
 8026b84:	460b      	mov	r3, r1
 8026b86:	4601      	mov	r1, r0
 8026b88:	4618      	mov	r0, r3
 8026b8a:	f000 bc5b 	b.w	8027444 <__cxa_atexit>

08026b8e <_ZdlPvj>:
 8026b8e:	f000 b812 	b.w	8026bb6 <_ZdlPv>

08026b92 <__cxa_guard_acquire>:
 8026b92:	6802      	ldr	r2, [r0, #0]
 8026b94:	07d2      	lsls	r2, r2, #31
 8026b96:	4603      	mov	r3, r0
 8026b98:	d405      	bmi.n	8026ba6 <__cxa_guard_acquire+0x14>
 8026b9a:	7842      	ldrb	r2, [r0, #1]
 8026b9c:	b102      	cbz	r2, 8026ba0 <__cxa_guard_acquire+0xe>
 8026b9e:	deff      	udf	#255	@ 0xff
 8026ba0:	2001      	movs	r0, #1
 8026ba2:	7058      	strb	r0, [r3, #1]
 8026ba4:	4770      	bx	lr
 8026ba6:	2000      	movs	r0, #0
 8026ba8:	4770      	bx	lr

08026baa <__cxa_guard_release>:
 8026baa:	2301      	movs	r3, #1
 8026bac:	6003      	str	r3, [r0, #0]
 8026bae:	4770      	bx	lr

08026bb0 <__cxa_pure_virtual>:
 8026bb0:	b508      	push	{r3, lr}
 8026bb2:	f000 f80f 	bl	8026bd4 <_ZSt9terminatev>

08026bb6 <_ZdlPv>:
 8026bb6:	f000 bb8f 	b.w	80272d8 <free>

08026bba <_ZN10__cxxabiv111__terminateEPFvvE>:
 8026bba:	b508      	push	{r3, lr}
 8026bbc:	4780      	blx	r0
 8026bbe:	f000 fb58 	bl	8027272 <abort>
	...

08026bc4 <_ZSt13get_terminatev>:
 8026bc4:	4b02      	ldr	r3, [pc, #8]	@ (8026bd0 <_ZSt13get_terminatev+0xc>)
 8026bc6:	6818      	ldr	r0, [r3, #0]
 8026bc8:	f3bf 8f5b 	dmb	ish
 8026bcc:	4770      	bx	lr
 8026bce:	bf00      	nop
 8026bd0:	240000d8 	.word	0x240000d8

08026bd4 <_ZSt9terminatev>:
 8026bd4:	b508      	push	{r3, lr}
 8026bd6:	f7ff fff5 	bl	8026bc4 <_ZSt13get_terminatev>
 8026bda:	f7ff ffee 	bl	8026bba <_ZN10__cxxabiv111__terminateEPFvvE>

08026bde <atan2f>:
 8026bde:	f000 b9cf 	b.w	8026f80 <__ieee754_atan2f>
	...

08026be4 <sqrtf>:
 8026be4:	b508      	push	{r3, lr}
 8026be6:	ed2d 8b02 	vpush	{d8}
 8026bea:	eeb0 8a40 	vmov.f32	s16, s0
 8026bee:	f000 f9c4 	bl	8026f7a <__ieee754_sqrtf>
 8026bf2:	eeb4 8a48 	vcmp.f32	s16, s16
 8026bf6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8026bfa:	d60c      	bvs.n	8026c16 <sqrtf+0x32>
 8026bfc:	eddf 8a07 	vldr	s17, [pc, #28]	@ 8026c1c <sqrtf+0x38>
 8026c00:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8026c04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8026c08:	d505      	bpl.n	8026c16 <sqrtf+0x32>
 8026c0a:	f000 fe89 	bl	8027920 <__errno>
 8026c0e:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8026c12:	2321      	movs	r3, #33	@ 0x21
 8026c14:	6003      	str	r3, [r0, #0]
 8026c16:	ecbd 8b02 	vpop	{d8}
 8026c1a:	bd08      	pop	{r3, pc}
 8026c1c:	00000000 	.word	0x00000000

08026c20 <sinf_poly>:
 8026c20:	07cb      	lsls	r3, r1, #31
 8026c22:	d412      	bmi.n	8026c4a <sinf_poly+0x2a>
 8026c24:	ee21 5b00 	vmul.f64	d5, d1, d0
 8026c28:	ed90 6b1a 	vldr	d6, [r0, #104]	@ 0x68
 8026c2c:	ed90 7b18 	vldr	d7, [r0, #96]	@ 0x60
 8026c30:	eea6 7b01 	vfma.f64	d7, d6, d1
 8026c34:	ed90 6b16 	vldr	d6, [r0, #88]	@ 0x58
 8026c38:	ee21 1b05 	vmul.f64	d1, d1, d5
 8026c3c:	eea6 0b05 	vfma.f64	d0, d6, d5
 8026c40:	eea7 0b01 	vfma.f64	d0, d7, d1
 8026c44:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8026c48:	4770      	bx	lr
 8026c4a:	ed90 6b14 	vldr	d6, [r0, #80]	@ 0x50
 8026c4e:	ee21 5b01 	vmul.f64	d5, d1, d1
 8026c52:	ed90 7b12 	vldr	d7, [r0, #72]	@ 0x48
 8026c56:	ed90 0b0c 	vldr	d0, [r0, #48]	@ 0x30
 8026c5a:	eea1 7b06 	vfma.f64	d7, d1, d6
 8026c5e:	ed90 6b0e 	vldr	d6, [r0, #56]	@ 0x38
 8026c62:	eea1 0b06 	vfma.f64	d0, d1, d6
 8026c66:	ed90 6b10 	vldr	d6, [r0, #64]	@ 0x40
 8026c6a:	ee21 1b05 	vmul.f64	d1, d1, d5
 8026c6e:	eea5 0b06 	vfma.f64	d0, d5, d6
 8026c72:	e7e5      	b.n	8026c40 <sinf_poly+0x20>
 8026c74:	0000      	movs	r0, r0
	...

08026c78 <sinf>:
 8026c78:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8026c7a:	ee10 4a10 	vmov	r4, s0
 8026c7e:	f3c4 530a 	ubfx	r3, r4, #20, #11
 8026c82:	f5b3 7f7d 	cmp.w	r3, #1012	@ 0x3f4
 8026c86:	eeb7 6ac0 	vcvt.f64.f32	d6, s0
 8026c8a:	eef0 7a40 	vmov.f32	s15, s0
 8026c8e:	ea4f 5214 	mov.w	r2, r4, lsr #20
 8026c92:	d218      	bcs.n	8026cc6 <sinf+0x4e>
 8026c94:	ee26 1b06 	vmul.f64	d1, d6, d6
 8026c98:	f5b3 7f66 	cmp.w	r3, #920	@ 0x398
 8026c9c:	d20a      	bcs.n	8026cb4 <sinf+0x3c>
 8026c9e:	f412 6fff 	tst.w	r2, #2040	@ 0x7f8
 8026ca2:	d103      	bne.n	8026cac <sinf+0x34>
 8026ca4:	eeb7 1bc1 	vcvt.f32.f64	s2, d1
 8026ca8:	ed8d 1a01 	vstr	s2, [sp, #4]
 8026cac:	eeb0 0a67 	vmov.f32	s0, s15
 8026cb0:	b003      	add	sp, #12
 8026cb2:	bd30      	pop	{r4, r5, pc}
 8026cb4:	483a      	ldr	r0, [pc, #232]	@ (8026da0 <sinf+0x128>)
 8026cb6:	eeb0 0b46 	vmov.f64	d0, d6
 8026cba:	2100      	movs	r1, #0
 8026cbc:	b003      	add	sp, #12
 8026cbe:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8026cc2:	f7ff bfad 	b.w	8026c20 <sinf_poly>
 8026cc6:	f240 422e 	movw	r2, #1070	@ 0x42e
 8026cca:	4293      	cmp	r3, r2
 8026ccc:	d824      	bhi.n	8026d18 <sinf+0xa0>
 8026cce:	4b34      	ldr	r3, [pc, #208]	@ (8026da0 <sinf+0x128>)
 8026cd0:	ed93 7b08 	vldr	d7, [r3, #32]
 8026cd4:	ee26 7b07 	vmul.f64	d7, d6, d7
 8026cd8:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8026cdc:	f103 0070 	add.w	r0, r3, #112	@ 0x70
 8026ce0:	ee17 1a90 	vmov	r1, s15
 8026ce4:	f501 0100 	add.w	r1, r1, #8388608	@ 0x800000
 8026ce8:	1609      	asrs	r1, r1, #24
 8026cea:	ee07 1a90 	vmov	s15, r1
 8026cee:	f001 0203 	and.w	r2, r1, #3
 8026cf2:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 8026cf6:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 8026cfa:	ed92 0b00 	vldr	d0, [r2]
 8026cfe:	ed93 7b0a 	vldr	d7, [r3, #40]	@ 0x28
 8026d02:	f011 0f02 	tst.w	r1, #2
 8026d06:	eea5 6b47 	vfms.f64	d6, d5, d7
 8026d0a:	bf08      	it	eq
 8026d0c:	4618      	moveq	r0, r3
 8026d0e:	ee26 1b06 	vmul.f64	d1, d6, d6
 8026d12:	ee20 0b06 	vmul.f64	d0, d0, d6
 8026d16:	e7d1      	b.n	8026cbc <sinf+0x44>
 8026d18:	f5b3 6fff 	cmp.w	r3, #2040	@ 0x7f8
 8026d1c:	d237      	bcs.n	8026d8e <sinf+0x116>
 8026d1e:	4921      	ldr	r1, [pc, #132]	@ (8026da4 <sinf+0x12c>)
 8026d20:	f3c4 6083 	ubfx	r0, r4, #26, #4
 8026d24:	eb01 0280 	add.w	r2, r1, r0, lsl #2
 8026d28:	f3c4 0316 	ubfx	r3, r4, #0, #23
 8026d2c:	f3c4 55c2 	ubfx	r5, r4, #23, #3
 8026d30:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 8026d34:	6a10      	ldr	r0, [r2, #32]
 8026d36:	6912      	ldr	r2, [r2, #16]
 8026d38:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8026d3c:	40ab      	lsls	r3, r5
 8026d3e:	fba0 5003 	umull	r5, r0, r0, r3
 8026d42:	4359      	muls	r1, r3
 8026d44:	fbe3 0102 	umlal	r0, r1, r3, r2
 8026d48:	f101 5300 	add.w	r3, r1, #536870912	@ 0x20000000
 8026d4c:	0f9d      	lsrs	r5, r3, #30
 8026d4e:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8026d52:	1ac9      	subs	r1, r1, r3
 8026d54:	f7d9 fca2 	bl	800069c <__aeabi_l2d>
 8026d58:	eb05 74d4 	add.w	r4, r5, r4, lsr #31
 8026d5c:	4b10      	ldr	r3, [pc, #64]	@ (8026da0 <sinf+0x128>)
 8026d5e:	f004 0203 	and.w	r2, r4, #3
 8026d62:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 8026d66:	ed9f 6b0c 	vldr	d6, [pc, #48]	@ 8026d98 <sinf+0x120>
 8026d6a:	ed92 0b00 	vldr	d0, [r2]
 8026d6e:	ec41 0b17 	vmov	d7, r0, r1
 8026d72:	f014 0f02 	tst.w	r4, #2
 8026d76:	ee27 7b06 	vmul.f64	d7, d7, d6
 8026d7a:	f103 0070 	add.w	r0, r3, #112	@ 0x70
 8026d7e:	4629      	mov	r1, r5
 8026d80:	bf08      	it	eq
 8026d82:	4618      	moveq	r0, r3
 8026d84:	ee27 1b07 	vmul.f64	d1, d7, d7
 8026d88:	ee20 0b07 	vmul.f64	d0, d0, d7
 8026d8c:	e796      	b.n	8026cbc <sinf+0x44>
 8026d8e:	b003      	add	sp, #12
 8026d90:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8026d94:	f000 b8e2 	b.w	8026f5c <__math_invalidf>
 8026d98:	54442d18 	.word	0x54442d18
 8026d9c:	3c1921fb 	.word	0x3c1921fb
 8026da0:	0802cbd0 	.word	0x0802cbd0
 8026da4:	0802cb6c 	.word	0x0802cb6c

08026da8 <sinf_poly>:
 8026da8:	07cb      	lsls	r3, r1, #31
 8026daa:	d412      	bmi.n	8026dd2 <sinf_poly+0x2a>
 8026dac:	ee21 5b00 	vmul.f64	d5, d1, d0
 8026db0:	ed90 6b1a 	vldr	d6, [r0, #104]	@ 0x68
 8026db4:	ed90 7b18 	vldr	d7, [r0, #96]	@ 0x60
 8026db8:	eea6 7b01 	vfma.f64	d7, d6, d1
 8026dbc:	ed90 6b16 	vldr	d6, [r0, #88]	@ 0x58
 8026dc0:	ee21 1b05 	vmul.f64	d1, d1, d5
 8026dc4:	eea6 0b05 	vfma.f64	d0, d6, d5
 8026dc8:	eea7 0b01 	vfma.f64	d0, d7, d1
 8026dcc:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8026dd0:	4770      	bx	lr
 8026dd2:	ed90 6b14 	vldr	d6, [r0, #80]	@ 0x50
 8026dd6:	ee21 5b01 	vmul.f64	d5, d1, d1
 8026dda:	ed90 7b12 	vldr	d7, [r0, #72]	@ 0x48
 8026dde:	ed90 0b0c 	vldr	d0, [r0, #48]	@ 0x30
 8026de2:	eea1 7b06 	vfma.f64	d7, d1, d6
 8026de6:	ed90 6b0e 	vldr	d6, [r0, #56]	@ 0x38
 8026dea:	eea1 0b06 	vfma.f64	d0, d1, d6
 8026dee:	ed90 6b10 	vldr	d6, [r0, #64]	@ 0x40
 8026df2:	ee21 1b05 	vmul.f64	d1, d1, d5
 8026df6:	eea5 0b06 	vfma.f64	d0, d5, d6
 8026dfa:	e7e5      	b.n	8026dc8 <sinf_poly+0x20>
 8026dfc:	0000      	movs	r0, r0
	...

08026e00 <cosf>:
 8026e00:	b538      	push	{r3, r4, r5, lr}
 8026e02:	ee10 4a10 	vmov	r4, s0
 8026e06:	f3c4 530a 	ubfx	r3, r4, #20, #11
 8026e0a:	f5b3 7f7d 	cmp.w	r3, #1012	@ 0x3f4
 8026e0e:	eeb7 7ac0 	vcvt.f64.f32	d7, s0
 8026e12:	d21f      	bcs.n	8026e54 <cosf+0x54>
 8026e14:	ee27 7b07 	vmul.f64	d7, d7, d7
 8026e18:	f5b3 7f66 	cmp.w	r3, #920	@ 0x398
 8026e1c:	f0c0 8082 	bcc.w	8026f24 <cosf+0x124>
 8026e20:	ee27 4b07 	vmul.f64	d4, d7, d7
 8026e24:	4b44      	ldr	r3, [pc, #272]	@ (8026f38 <cosf+0x138>)
 8026e26:	ed93 5b14 	vldr	d5, [r3, #80]	@ 0x50
 8026e2a:	ed93 6b12 	vldr	d6, [r3, #72]	@ 0x48
 8026e2e:	ed93 0b0c 	vldr	d0, [r3, #48]	@ 0x30
 8026e32:	eea7 6b05 	vfma.f64	d6, d7, d5
 8026e36:	ed93 5b0e 	vldr	d5, [r3, #56]	@ 0x38
 8026e3a:	eea7 0b05 	vfma.f64	d0, d7, d5
 8026e3e:	ed93 5b10 	vldr	d5, [r3, #64]	@ 0x40
 8026e42:	ee27 7b04 	vmul.f64	d7, d7, d4
 8026e46:	eea4 0b05 	vfma.f64	d0, d4, d5
 8026e4a:	eea6 0b07 	vfma.f64	d0, d6, d7
 8026e4e:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8026e52:	bd38      	pop	{r3, r4, r5, pc}
 8026e54:	f240 422e 	movw	r2, #1070	@ 0x42e
 8026e58:	4293      	cmp	r3, r2
 8026e5a:	d829      	bhi.n	8026eb0 <cosf+0xb0>
 8026e5c:	4b36      	ldr	r3, [pc, #216]	@ (8026f38 <cosf+0x138>)
 8026e5e:	ed93 6b08 	vldr	d6, [r3, #32]
 8026e62:	ee27 6b06 	vmul.f64	d6, d7, d6
 8026e66:	eefd 6bc6 	vcvt.s32.f64	s13, d6
 8026e6a:	f103 0070 	add.w	r0, r3, #112	@ 0x70
 8026e6e:	ee16 1a90 	vmov	r1, s13
 8026e72:	f501 0100 	add.w	r1, r1, #8388608	@ 0x800000
 8026e76:	1609      	asrs	r1, r1, #24
 8026e78:	ee06 1a90 	vmov	s13, r1
 8026e7c:	f001 0203 	and.w	r2, r1, #3
 8026e80:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 8026e84:	eeb8 5be6 	vcvt.f64.s32	d5, s13
 8026e88:	ed92 0b00 	vldr	d0, [r2]
 8026e8c:	ed93 6b0a 	vldr	d6, [r3, #40]	@ 0x28
 8026e90:	f011 0f02 	tst.w	r1, #2
 8026e94:	f081 0101 	eor.w	r1, r1, #1
 8026e98:	eea5 7b46 	vfms.f64	d7, d5, d6
 8026e9c:	bf08      	it	eq
 8026e9e:	4618      	moveq	r0, r3
 8026ea0:	ee27 1b07 	vmul.f64	d1, d7, d7
 8026ea4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8026ea8:	ee20 0b07 	vmul.f64	d0, d0, d7
 8026eac:	f7ff bf7c 	b.w	8026da8 <sinf_poly>
 8026eb0:	f5b3 6fff 	cmp.w	r3, #2040	@ 0x7f8
 8026eb4:	d232      	bcs.n	8026f1c <cosf+0x11c>
 8026eb6:	4921      	ldr	r1, [pc, #132]	@ (8026f3c <cosf+0x13c>)
 8026eb8:	f3c4 6083 	ubfx	r0, r4, #26, #4
 8026ebc:	eb01 0280 	add.w	r2, r1, r0, lsl #2
 8026ec0:	f3c4 0316 	ubfx	r3, r4, #0, #23
 8026ec4:	f3c4 55c2 	ubfx	r5, r4, #23, #3
 8026ec8:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 8026ecc:	6a10      	ldr	r0, [r2, #32]
 8026ece:	6912      	ldr	r2, [r2, #16]
 8026ed0:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8026ed4:	40ab      	lsls	r3, r5
 8026ed6:	fba0 5003 	umull	r5, r0, r0, r3
 8026eda:	4359      	muls	r1, r3
 8026edc:	fbe3 0102 	umlal	r0, r1, r3, r2
 8026ee0:	f101 5300 	add.w	r3, r1, #536870912	@ 0x20000000
 8026ee4:	0f9d      	lsrs	r5, r3, #30
 8026ee6:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8026eea:	1ac9      	subs	r1, r1, r3
 8026eec:	f7d9 fbd6 	bl	800069c <__aeabi_l2d>
 8026ef0:	eb05 74d4 	add.w	r4, r5, r4, lsr #31
 8026ef4:	4b10      	ldr	r3, [pc, #64]	@ (8026f38 <cosf+0x138>)
 8026ef6:	ed9f 6b0e 	vldr	d6, [pc, #56]	@ 8026f30 <cosf+0x130>
 8026efa:	ec41 0b17 	vmov	d7, r0, r1
 8026efe:	f004 0203 	and.w	r2, r4, #3
 8026f02:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 8026f06:	ed92 0b00 	vldr	d0, [r2]
 8026f0a:	ee27 7b06 	vmul.f64	d7, d7, d6
 8026f0e:	f103 0070 	add.w	r0, r3, #112	@ 0x70
 8026f12:	f014 0f02 	tst.w	r4, #2
 8026f16:	f085 0101 	eor.w	r1, r5, #1
 8026f1a:	e7bf      	b.n	8026e9c <cosf+0x9c>
 8026f1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8026f20:	f000 b81c 	b.w	8026f5c <__math_invalidf>
 8026f24:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8026f28:	e793      	b.n	8026e52 <cosf+0x52>
 8026f2a:	bf00      	nop
 8026f2c:	f3af 8000 	nop.w
 8026f30:	54442d18 	.word	0x54442d18
 8026f34:	3c1921fb 	.word	0x3c1921fb
 8026f38:	0802cbd0 	.word	0x0802cbd0
 8026f3c:	0802cb6c 	.word	0x0802cb6c

08026f40 <with_errnof>:
 8026f40:	b510      	push	{r4, lr}
 8026f42:	ed2d 8b02 	vpush	{d8}
 8026f46:	eeb0 8a40 	vmov.f32	s16, s0
 8026f4a:	4604      	mov	r4, r0
 8026f4c:	f000 fce8 	bl	8027920 <__errno>
 8026f50:	eeb0 0a48 	vmov.f32	s0, s16
 8026f54:	ecbd 8b02 	vpop	{d8}
 8026f58:	6004      	str	r4, [r0, #0]
 8026f5a:	bd10      	pop	{r4, pc}

08026f5c <__math_invalidf>:
 8026f5c:	eef0 7a40 	vmov.f32	s15, s0
 8026f60:	ee30 7a40 	vsub.f32	s14, s0, s0
 8026f64:	eef4 7a67 	vcmp.f32	s15, s15
 8026f68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8026f6c:	ee87 0a07 	vdiv.f32	s0, s14, s14
 8026f70:	d602      	bvs.n	8026f78 <__math_invalidf+0x1c>
 8026f72:	2021      	movs	r0, #33	@ 0x21
 8026f74:	f7ff bfe4 	b.w	8026f40 <with_errnof>
 8026f78:	4770      	bx	lr

08026f7a <__ieee754_sqrtf>:
 8026f7a:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8026f7e:	4770      	bx	lr

08026f80 <__ieee754_atan2f>:
 8026f80:	ee10 2a90 	vmov	r2, s1
 8026f84:	f022 4100 	bic.w	r1, r2, #2147483648	@ 0x80000000
 8026f88:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 8026f8c:	b510      	push	{r4, lr}
 8026f8e:	eef0 7a40 	vmov.f32	s15, s0
 8026f92:	d806      	bhi.n	8026fa2 <__ieee754_atan2f+0x22>
 8026f94:	ee10 0a10 	vmov	r0, s0
 8026f98:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 8026f9c:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8026fa0:	d904      	bls.n	8026fac <__ieee754_atan2f+0x2c>
 8026fa2:	ee77 7aa0 	vadd.f32	s15, s15, s1
 8026fa6:	eeb0 0a67 	vmov.f32	s0, s15
 8026faa:	bd10      	pop	{r4, pc}
 8026fac:	f1b2 5f7e 	cmp.w	r2, #1065353216	@ 0x3f800000
 8026fb0:	d103      	bne.n	8026fba <__ieee754_atan2f+0x3a>
 8026fb2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8026fb6:	f000 b881 	b.w	80270bc <atanf>
 8026fba:	1794      	asrs	r4, r2, #30
 8026fbc:	f004 0402 	and.w	r4, r4, #2
 8026fc0:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 8026fc4:	b93b      	cbnz	r3, 8026fd6 <__ieee754_atan2f+0x56>
 8026fc6:	2c02      	cmp	r4, #2
 8026fc8:	d05c      	beq.n	8027084 <__ieee754_atan2f+0x104>
 8026fca:	ed9f 7a33 	vldr	s14, [pc, #204]	@ 8027098 <__ieee754_atan2f+0x118>
 8026fce:	2c03      	cmp	r4, #3
 8026fd0:	fe47 7a00 	vseleq.f32	s15, s14, s0
 8026fd4:	e7e7      	b.n	8026fa6 <__ieee754_atan2f+0x26>
 8026fd6:	b939      	cbnz	r1, 8026fe8 <__ieee754_atan2f+0x68>
 8026fd8:	eddf 7a30 	vldr	s15, [pc, #192]	@ 802709c <__ieee754_atan2f+0x11c>
 8026fdc:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 80270a0 <__ieee754_atan2f+0x120>
 8026fe0:	2800      	cmp	r0, #0
 8026fe2:	fe67 7a87 	vselge.f32	s15, s15, s14
 8026fe6:	e7de      	b.n	8026fa6 <__ieee754_atan2f+0x26>
 8026fe8:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 8026fec:	d110      	bne.n	8027010 <__ieee754_atan2f+0x90>
 8026fee:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8026ff2:	f104 34ff 	add.w	r4, r4, #4294967295
 8026ff6:	d107      	bne.n	8027008 <__ieee754_atan2f+0x88>
 8026ff8:	2c02      	cmp	r4, #2
 8026ffa:	d846      	bhi.n	802708a <__ieee754_atan2f+0x10a>
 8026ffc:	4b29      	ldr	r3, [pc, #164]	@ (80270a4 <__ieee754_atan2f+0x124>)
 8026ffe:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8027002:	edd3 7a00 	vldr	s15, [r3]
 8027006:	e7ce      	b.n	8026fa6 <__ieee754_atan2f+0x26>
 8027008:	2c02      	cmp	r4, #2
 802700a:	d841      	bhi.n	8027090 <__ieee754_atan2f+0x110>
 802700c:	4b26      	ldr	r3, [pc, #152]	@ (80270a8 <__ieee754_atan2f+0x128>)
 802700e:	e7f6      	b.n	8026ffe <__ieee754_atan2f+0x7e>
 8027010:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8027014:	d0e0      	beq.n	8026fd8 <__ieee754_atan2f+0x58>
 8027016:	1a5b      	subs	r3, r3, r1
 8027018:	f1b3 5ff4 	cmp.w	r3, #511705088	@ 0x1e800000
 802701c:	ea4f 51e3 	mov.w	r1, r3, asr #23
 8027020:	da1a      	bge.n	8027058 <__ieee754_atan2f+0xd8>
 8027022:	2a00      	cmp	r2, #0
 8027024:	da01      	bge.n	802702a <__ieee754_atan2f+0xaa>
 8027026:	313c      	adds	r1, #60	@ 0x3c
 8027028:	db19      	blt.n	802705e <__ieee754_atan2f+0xde>
 802702a:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 802702e:	f000 f919 	bl	8027264 <fabsf>
 8027032:	f000 f843 	bl	80270bc <atanf>
 8027036:	eef0 7a40 	vmov.f32	s15, s0
 802703a:	2c01      	cmp	r4, #1
 802703c:	d012      	beq.n	8027064 <__ieee754_atan2f+0xe4>
 802703e:	2c02      	cmp	r4, #2
 8027040:	d017      	beq.n	8027072 <__ieee754_atan2f+0xf2>
 8027042:	2c00      	cmp	r4, #0
 8027044:	d0af      	beq.n	8026fa6 <__ieee754_atan2f+0x26>
 8027046:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 80270ac <__ieee754_atan2f+0x12c>
 802704a:	ee77 7a87 	vadd.f32	s15, s15, s14
 802704e:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 80270b0 <__ieee754_atan2f+0x130>
 8027052:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8027056:	e7a6      	b.n	8026fa6 <__ieee754_atan2f+0x26>
 8027058:	eddf 7a10 	vldr	s15, [pc, #64]	@ 802709c <__ieee754_atan2f+0x11c>
 802705c:	e7ed      	b.n	802703a <__ieee754_atan2f+0xba>
 802705e:	eddf 7a15 	vldr	s15, [pc, #84]	@ 80270b4 <__ieee754_atan2f+0x134>
 8027062:	e7ea      	b.n	802703a <__ieee754_atan2f+0xba>
 8027064:	ee17 3a90 	vmov	r3, s15
 8027068:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 802706c:	ee07 3a90 	vmov	s15, r3
 8027070:	e799      	b.n	8026fa6 <__ieee754_atan2f+0x26>
 8027072:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 80270ac <__ieee754_atan2f+0x12c>
 8027076:	ee77 7a87 	vadd.f32	s15, s15, s14
 802707a:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 80270b0 <__ieee754_atan2f+0x130>
 802707e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8027082:	e790      	b.n	8026fa6 <__ieee754_atan2f+0x26>
 8027084:	eddf 7a0a 	vldr	s15, [pc, #40]	@ 80270b0 <__ieee754_atan2f+0x130>
 8027088:	e78d      	b.n	8026fa6 <__ieee754_atan2f+0x26>
 802708a:	eddf 7a0b 	vldr	s15, [pc, #44]	@ 80270b8 <__ieee754_atan2f+0x138>
 802708e:	e78a      	b.n	8026fa6 <__ieee754_atan2f+0x26>
 8027090:	eddf 7a08 	vldr	s15, [pc, #32]	@ 80270b4 <__ieee754_atan2f+0x134>
 8027094:	e787      	b.n	8026fa6 <__ieee754_atan2f+0x26>
 8027096:	bf00      	nop
 8027098:	c0490fdb 	.word	0xc0490fdb
 802709c:	3fc90fdb 	.word	0x3fc90fdb
 80270a0:	bfc90fdb 	.word	0xbfc90fdb
 80270a4:	0802ccbc 	.word	0x0802ccbc
 80270a8:	0802ccb0 	.word	0x0802ccb0
 80270ac:	33bbbd2e 	.word	0x33bbbd2e
 80270b0:	40490fdb 	.word	0x40490fdb
 80270b4:	00000000 	.word	0x00000000
 80270b8:	3f490fdb 	.word	0x3f490fdb

080270bc <atanf>:
 80270bc:	b538      	push	{r3, r4, r5, lr}
 80270be:	ee10 5a10 	vmov	r5, s0
 80270c2:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 80270c6:	f1b4 4fa1 	cmp.w	r4, #1350565888	@ 0x50800000
 80270ca:	eef0 7a40 	vmov.f32	s15, s0
 80270ce:	d30f      	bcc.n	80270f0 <atanf+0x34>
 80270d0:	f1b4 4fff 	cmp.w	r4, #2139095040	@ 0x7f800000
 80270d4:	d904      	bls.n	80270e0 <atanf+0x24>
 80270d6:	ee70 7a00 	vadd.f32	s15, s0, s0
 80270da:	eeb0 0a67 	vmov.f32	s0, s15
 80270de:	bd38      	pop	{r3, r4, r5, pc}
 80270e0:	eddf 7a4d 	vldr	s15, [pc, #308]	@ 8027218 <atanf+0x15c>
 80270e4:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 802721c <atanf+0x160>
 80270e8:	2d00      	cmp	r5, #0
 80270ea:	fe77 7a27 	vselgt.f32	s15, s14, s15
 80270ee:	e7f4      	b.n	80270da <atanf+0x1e>
 80270f0:	4b4b      	ldr	r3, [pc, #300]	@ (8027220 <atanf+0x164>)
 80270f2:	429c      	cmp	r4, r3
 80270f4:	d810      	bhi.n	8027118 <atanf+0x5c>
 80270f6:	f1b4 5f44 	cmp.w	r4, #822083584	@ 0x31000000
 80270fa:	d20a      	bcs.n	8027112 <atanf+0x56>
 80270fc:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 8027224 <atanf+0x168>
 8027100:	ee30 7a07 	vadd.f32	s14, s0, s14
 8027104:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8027108:	eeb4 7ae6 	vcmpe.f32	s14, s13
 802710c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8027110:	dce3      	bgt.n	80270da <atanf+0x1e>
 8027112:	f04f 33ff 	mov.w	r3, #4294967295
 8027116:	e013      	b.n	8027140 <atanf+0x84>
 8027118:	f000 f8a4 	bl	8027264 <fabsf>
 802711c:	4b42      	ldr	r3, [pc, #264]	@ (8027228 <atanf+0x16c>)
 802711e:	429c      	cmp	r4, r3
 8027120:	d84f      	bhi.n	80271c2 <atanf+0x106>
 8027122:	f5a3 03d0 	sub.w	r3, r3, #6815744	@ 0x680000
 8027126:	429c      	cmp	r4, r3
 8027128:	d841      	bhi.n	80271ae <atanf+0xf2>
 802712a:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
 802712e:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8027132:	eea0 7a27 	vfma.f32	s14, s0, s15
 8027136:	2300      	movs	r3, #0
 8027138:	ee30 0a27 	vadd.f32	s0, s0, s15
 802713c:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8027140:	1c5a      	adds	r2, r3, #1
 8027142:	ee27 6aa7 	vmul.f32	s12, s15, s15
 8027146:	ed9f 7a39 	vldr	s14, [pc, #228]	@ 802722c <atanf+0x170>
 802714a:	eddf 5a39 	vldr	s11, [pc, #228]	@ 8027230 <atanf+0x174>
 802714e:	ed9f 5a39 	vldr	s10, [pc, #228]	@ 8027234 <atanf+0x178>
 8027152:	ee66 6a06 	vmul.f32	s13, s12, s12
 8027156:	eee6 5a87 	vfma.f32	s11, s13, s14
 802715a:	ed9f 7a37 	vldr	s14, [pc, #220]	@ 8027238 <atanf+0x17c>
 802715e:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8027162:	eddf 5a36 	vldr	s11, [pc, #216]	@ 802723c <atanf+0x180>
 8027166:	eee7 5a26 	vfma.f32	s11, s14, s13
 802716a:	ed9f 7a35 	vldr	s14, [pc, #212]	@ 8027240 <atanf+0x184>
 802716e:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8027172:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8027244 <atanf+0x188>
 8027176:	eee7 5a26 	vfma.f32	s11, s14, s13
 802717a:	ed9f 7a33 	vldr	s14, [pc, #204]	@ 8027248 <atanf+0x18c>
 802717e:	eea6 5a87 	vfma.f32	s10, s13, s14
 8027182:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 802724c <atanf+0x190>
 8027186:	eea5 7a26 	vfma.f32	s14, s10, s13
 802718a:	ed9f 5a31 	vldr	s10, [pc, #196]	@ 8027250 <atanf+0x194>
 802718e:	eea7 5a26 	vfma.f32	s10, s14, s13
 8027192:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 8027254 <atanf+0x198>
 8027196:	eea5 7a26 	vfma.f32	s14, s10, s13
 802719a:	ee27 7a26 	vmul.f32	s14, s14, s13
 802719e:	eea5 7a86 	vfma.f32	s14, s11, s12
 80271a2:	ee27 7a87 	vmul.f32	s14, s15, s14
 80271a6:	d121      	bne.n	80271ec <atanf+0x130>
 80271a8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80271ac:	e795      	b.n	80270da <atanf+0x1e>
 80271ae:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 80271b2:	ee30 7a67 	vsub.f32	s14, s0, s15
 80271b6:	ee30 0a27 	vadd.f32	s0, s0, s15
 80271ba:	2301      	movs	r3, #1
 80271bc:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80271c0:	e7be      	b.n	8027140 <atanf+0x84>
 80271c2:	4b25      	ldr	r3, [pc, #148]	@ (8027258 <atanf+0x19c>)
 80271c4:	429c      	cmp	r4, r3
 80271c6:	d80b      	bhi.n	80271e0 <atanf+0x124>
 80271c8:	eef7 7a08 	vmov.f32	s15, #120	@ 0x3fc00000  1.5
 80271cc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80271d0:	eea0 7a27 	vfma.f32	s14, s0, s15
 80271d4:	2302      	movs	r3, #2
 80271d6:	ee70 6a67 	vsub.f32	s13, s0, s15
 80271da:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80271de:	e7af      	b.n	8027140 <atanf+0x84>
 80271e0:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 80271e4:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80271e8:	2303      	movs	r3, #3
 80271ea:	e7a9      	b.n	8027140 <atanf+0x84>
 80271ec:	4a1b      	ldr	r2, [pc, #108]	@ (802725c <atanf+0x1a0>)
 80271ee:	491c      	ldr	r1, [pc, #112]	@ (8027260 <atanf+0x1a4>)
 80271f0:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 80271f4:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 80271f8:	edd3 6a00 	vldr	s13, [r3]
 80271fc:	ee37 7a66 	vsub.f32	s14, s14, s13
 8027200:	2d00      	cmp	r5, #0
 8027202:	ee37 7a67 	vsub.f32	s14, s14, s15
 8027206:	edd2 7a00 	vldr	s15, [r2]
 802720a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 802720e:	bfb8      	it	lt
 8027210:	eef1 7a67 	vneglt.f32	s15, s15
 8027214:	e761      	b.n	80270da <atanf+0x1e>
 8027216:	bf00      	nop
 8027218:	bfc90fdb 	.word	0xbfc90fdb
 802721c:	3fc90fdb 	.word	0x3fc90fdb
 8027220:	3edfffff 	.word	0x3edfffff
 8027224:	7149f2ca 	.word	0x7149f2ca
 8027228:	3f97ffff 	.word	0x3f97ffff
 802722c:	3c8569d7 	.word	0x3c8569d7
 8027230:	3d4bda59 	.word	0x3d4bda59
 8027234:	bd6ef16b 	.word	0xbd6ef16b
 8027238:	3d886b35 	.word	0x3d886b35
 802723c:	3dba2e6e 	.word	0x3dba2e6e
 8027240:	3e124925 	.word	0x3e124925
 8027244:	3eaaaaab 	.word	0x3eaaaaab
 8027248:	bd15a221 	.word	0xbd15a221
 802724c:	bd9d8795 	.word	0xbd9d8795
 8027250:	bde38e38 	.word	0xbde38e38
 8027254:	be4ccccd 	.word	0xbe4ccccd
 8027258:	401bffff 	.word	0x401bffff
 802725c:	0802ccd8 	.word	0x0802ccd8
 8027260:	0802ccc8 	.word	0x0802ccc8

08027264 <fabsf>:
 8027264:	ee10 3a10 	vmov	r3, s0
 8027268:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 802726c:	ee00 3a10 	vmov	s0, r3
 8027270:	4770      	bx	lr

08027272 <abort>:
 8027272:	b508      	push	{r3, lr}
 8027274:	2006      	movs	r0, #6
 8027276:	f000 fae1 	bl	802783c <raise>
 802727a:	2001      	movs	r0, #1
 802727c:	f7da f9fc 	bl	8001678 <_exit>

08027280 <__assert_func>:
 8027280:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8027282:	4614      	mov	r4, r2
 8027284:	461a      	mov	r2, r3
 8027286:	4b09      	ldr	r3, [pc, #36]	@ (80272ac <__assert_func+0x2c>)
 8027288:	681b      	ldr	r3, [r3, #0]
 802728a:	4605      	mov	r5, r0
 802728c:	68d8      	ldr	r0, [r3, #12]
 802728e:	b954      	cbnz	r4, 80272a6 <__assert_func+0x26>
 8027290:	4b07      	ldr	r3, [pc, #28]	@ (80272b0 <__assert_func+0x30>)
 8027292:	461c      	mov	r4, r3
 8027294:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8027298:	9100      	str	r1, [sp, #0]
 802729a:	462b      	mov	r3, r5
 802729c:	4905      	ldr	r1, [pc, #20]	@ (80272b4 <__assert_func+0x34>)
 802729e:	f000 f983 	bl	80275a8 <fiprintf>
 80272a2:	f7ff ffe6 	bl	8027272 <abort>
 80272a6:	4b04      	ldr	r3, [pc, #16]	@ (80272b8 <__assert_func+0x38>)
 80272a8:	e7f4      	b.n	8027294 <__assert_func+0x14>
 80272aa:	bf00      	nop
 80272ac:	240000e8 	.word	0x240000e8
 80272b0:	0802cd23 	.word	0x0802cd23
 80272b4:	0802ccf5 	.word	0x0802ccf5
 80272b8:	0802cce8 	.word	0x0802cce8

080272bc <atexit>:
 80272bc:	2300      	movs	r3, #0
 80272be:	4601      	mov	r1, r0
 80272c0:	461a      	mov	r2, r3
 80272c2:	4618      	mov	r0, r3
 80272c4:	f000 bb68 	b.w	8027998 <__register_exitproc>

080272c8 <malloc>:
 80272c8:	4b02      	ldr	r3, [pc, #8]	@ (80272d4 <malloc+0xc>)
 80272ca:	4601      	mov	r1, r0
 80272cc:	6818      	ldr	r0, [r3, #0]
 80272ce:	f000 b82d 	b.w	802732c <_malloc_r>
 80272d2:	bf00      	nop
 80272d4:	240000e8 	.word	0x240000e8

080272d8 <free>:
 80272d8:	4b02      	ldr	r3, [pc, #8]	@ (80272e4 <free+0xc>)
 80272da:	4601      	mov	r1, r0
 80272dc:	6818      	ldr	r0, [r3, #0]
 80272de:	f000 bbb7 	b.w	8027a50 <_free_r>
 80272e2:	bf00      	nop
 80272e4:	240000e8 	.word	0x240000e8

080272e8 <sbrk_aligned>:
 80272e8:	b570      	push	{r4, r5, r6, lr}
 80272ea:	4e0f      	ldr	r6, [pc, #60]	@ (8027328 <sbrk_aligned+0x40>)
 80272ec:	460c      	mov	r4, r1
 80272ee:	6831      	ldr	r1, [r6, #0]
 80272f0:	4605      	mov	r5, r0
 80272f2:	b911      	cbnz	r1, 80272fa <sbrk_aligned+0x12>
 80272f4:	f000 faf2 	bl	80278dc <_sbrk_r>
 80272f8:	6030      	str	r0, [r6, #0]
 80272fa:	4621      	mov	r1, r4
 80272fc:	4628      	mov	r0, r5
 80272fe:	f000 faed 	bl	80278dc <_sbrk_r>
 8027302:	1c43      	adds	r3, r0, #1
 8027304:	d103      	bne.n	802730e <sbrk_aligned+0x26>
 8027306:	f04f 34ff 	mov.w	r4, #4294967295
 802730a:	4620      	mov	r0, r4
 802730c:	bd70      	pop	{r4, r5, r6, pc}
 802730e:	1cc4      	adds	r4, r0, #3
 8027310:	f024 0403 	bic.w	r4, r4, #3
 8027314:	42a0      	cmp	r0, r4
 8027316:	d0f8      	beq.n	802730a <sbrk_aligned+0x22>
 8027318:	1a21      	subs	r1, r4, r0
 802731a:	4628      	mov	r0, r5
 802731c:	f000 fade 	bl	80278dc <_sbrk_r>
 8027320:	3001      	adds	r0, #1
 8027322:	d1f2      	bne.n	802730a <sbrk_aligned+0x22>
 8027324:	e7ef      	b.n	8027306 <sbrk_aligned+0x1e>
 8027326:	bf00      	nop
 8027328:	2402985c 	.word	0x2402985c

0802732c <_malloc_r>:
 802732c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8027330:	1ccd      	adds	r5, r1, #3
 8027332:	f025 0503 	bic.w	r5, r5, #3
 8027336:	3508      	adds	r5, #8
 8027338:	2d0c      	cmp	r5, #12
 802733a:	bf38      	it	cc
 802733c:	250c      	movcc	r5, #12
 802733e:	2d00      	cmp	r5, #0
 8027340:	4606      	mov	r6, r0
 8027342:	db01      	blt.n	8027348 <_malloc_r+0x1c>
 8027344:	42a9      	cmp	r1, r5
 8027346:	d904      	bls.n	8027352 <_malloc_r+0x26>
 8027348:	230c      	movs	r3, #12
 802734a:	6033      	str	r3, [r6, #0]
 802734c:	2000      	movs	r0, #0
 802734e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8027352:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8027428 <_malloc_r+0xfc>
 8027356:	f000 f869 	bl	802742c <__malloc_lock>
 802735a:	f8d8 3000 	ldr.w	r3, [r8]
 802735e:	461c      	mov	r4, r3
 8027360:	bb44      	cbnz	r4, 80273b4 <_malloc_r+0x88>
 8027362:	4629      	mov	r1, r5
 8027364:	4630      	mov	r0, r6
 8027366:	f7ff ffbf 	bl	80272e8 <sbrk_aligned>
 802736a:	1c43      	adds	r3, r0, #1
 802736c:	4604      	mov	r4, r0
 802736e:	d158      	bne.n	8027422 <_malloc_r+0xf6>
 8027370:	f8d8 4000 	ldr.w	r4, [r8]
 8027374:	4627      	mov	r7, r4
 8027376:	2f00      	cmp	r7, #0
 8027378:	d143      	bne.n	8027402 <_malloc_r+0xd6>
 802737a:	2c00      	cmp	r4, #0
 802737c:	d04b      	beq.n	8027416 <_malloc_r+0xea>
 802737e:	6823      	ldr	r3, [r4, #0]
 8027380:	4639      	mov	r1, r7
 8027382:	4630      	mov	r0, r6
 8027384:	eb04 0903 	add.w	r9, r4, r3
 8027388:	f000 faa8 	bl	80278dc <_sbrk_r>
 802738c:	4581      	cmp	r9, r0
 802738e:	d142      	bne.n	8027416 <_malloc_r+0xea>
 8027390:	6821      	ldr	r1, [r4, #0]
 8027392:	1a6d      	subs	r5, r5, r1
 8027394:	4629      	mov	r1, r5
 8027396:	4630      	mov	r0, r6
 8027398:	f7ff ffa6 	bl	80272e8 <sbrk_aligned>
 802739c:	3001      	adds	r0, #1
 802739e:	d03a      	beq.n	8027416 <_malloc_r+0xea>
 80273a0:	6823      	ldr	r3, [r4, #0]
 80273a2:	442b      	add	r3, r5
 80273a4:	6023      	str	r3, [r4, #0]
 80273a6:	f8d8 3000 	ldr.w	r3, [r8]
 80273aa:	685a      	ldr	r2, [r3, #4]
 80273ac:	bb62      	cbnz	r2, 8027408 <_malloc_r+0xdc>
 80273ae:	f8c8 7000 	str.w	r7, [r8]
 80273b2:	e00f      	b.n	80273d4 <_malloc_r+0xa8>
 80273b4:	6822      	ldr	r2, [r4, #0]
 80273b6:	1b52      	subs	r2, r2, r5
 80273b8:	d420      	bmi.n	80273fc <_malloc_r+0xd0>
 80273ba:	2a0b      	cmp	r2, #11
 80273bc:	d917      	bls.n	80273ee <_malloc_r+0xc2>
 80273be:	1961      	adds	r1, r4, r5
 80273c0:	42a3      	cmp	r3, r4
 80273c2:	6025      	str	r5, [r4, #0]
 80273c4:	bf18      	it	ne
 80273c6:	6059      	strne	r1, [r3, #4]
 80273c8:	6863      	ldr	r3, [r4, #4]
 80273ca:	bf08      	it	eq
 80273cc:	f8c8 1000 	streq.w	r1, [r8]
 80273d0:	5162      	str	r2, [r4, r5]
 80273d2:	604b      	str	r3, [r1, #4]
 80273d4:	4630      	mov	r0, r6
 80273d6:	f000 f82f 	bl	8027438 <__malloc_unlock>
 80273da:	f104 000b 	add.w	r0, r4, #11
 80273de:	1d23      	adds	r3, r4, #4
 80273e0:	f020 0007 	bic.w	r0, r0, #7
 80273e4:	1ac2      	subs	r2, r0, r3
 80273e6:	bf1c      	itt	ne
 80273e8:	1a1b      	subne	r3, r3, r0
 80273ea:	50a3      	strne	r3, [r4, r2]
 80273ec:	e7af      	b.n	802734e <_malloc_r+0x22>
 80273ee:	6862      	ldr	r2, [r4, #4]
 80273f0:	42a3      	cmp	r3, r4
 80273f2:	bf0c      	ite	eq
 80273f4:	f8c8 2000 	streq.w	r2, [r8]
 80273f8:	605a      	strne	r2, [r3, #4]
 80273fa:	e7eb      	b.n	80273d4 <_malloc_r+0xa8>
 80273fc:	4623      	mov	r3, r4
 80273fe:	6864      	ldr	r4, [r4, #4]
 8027400:	e7ae      	b.n	8027360 <_malloc_r+0x34>
 8027402:	463c      	mov	r4, r7
 8027404:	687f      	ldr	r7, [r7, #4]
 8027406:	e7b6      	b.n	8027376 <_malloc_r+0x4a>
 8027408:	461a      	mov	r2, r3
 802740a:	685b      	ldr	r3, [r3, #4]
 802740c:	42a3      	cmp	r3, r4
 802740e:	d1fb      	bne.n	8027408 <_malloc_r+0xdc>
 8027410:	2300      	movs	r3, #0
 8027412:	6053      	str	r3, [r2, #4]
 8027414:	e7de      	b.n	80273d4 <_malloc_r+0xa8>
 8027416:	230c      	movs	r3, #12
 8027418:	6033      	str	r3, [r6, #0]
 802741a:	4630      	mov	r0, r6
 802741c:	f000 f80c 	bl	8027438 <__malloc_unlock>
 8027420:	e794      	b.n	802734c <_malloc_r+0x20>
 8027422:	6005      	str	r5, [r0, #0]
 8027424:	e7d6      	b.n	80273d4 <_malloc_r+0xa8>
 8027426:	bf00      	nop
 8027428:	24029860 	.word	0x24029860

0802742c <__malloc_lock>:
 802742c:	4801      	ldr	r0, [pc, #4]	@ (8027434 <__malloc_lock+0x8>)
 802742e:	f000 baa2 	b.w	8027976 <__retarget_lock_acquire_recursive>
 8027432:	bf00      	nop
 8027434:	240299a4 	.word	0x240299a4

08027438 <__malloc_unlock>:
 8027438:	4801      	ldr	r0, [pc, #4]	@ (8027440 <__malloc_unlock+0x8>)
 802743a:	f000 ba9d 	b.w	8027978 <__retarget_lock_release_recursive>
 802743e:	bf00      	nop
 8027440:	240299a4 	.word	0x240299a4

08027444 <__cxa_atexit>:
 8027444:	b510      	push	{r4, lr}
 8027446:	4604      	mov	r4, r0
 8027448:	4804      	ldr	r0, [pc, #16]	@ (802745c <__cxa_atexit+0x18>)
 802744a:	4613      	mov	r3, r2
 802744c:	b120      	cbz	r0, 8027458 <__cxa_atexit+0x14>
 802744e:	460a      	mov	r2, r1
 8027450:	2002      	movs	r0, #2
 8027452:	4621      	mov	r1, r4
 8027454:	f000 faa0 	bl	8027998 <__register_exitproc>
 8027458:	bd10      	pop	{r4, pc}
 802745a:	bf00      	nop
 802745c:	08027999 	.word	0x08027999

08027460 <std>:
 8027460:	2300      	movs	r3, #0
 8027462:	b510      	push	{r4, lr}
 8027464:	4604      	mov	r4, r0
 8027466:	e9c0 3300 	strd	r3, r3, [r0]
 802746a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 802746e:	6083      	str	r3, [r0, #8]
 8027470:	8181      	strh	r1, [r0, #12]
 8027472:	6643      	str	r3, [r0, #100]	@ 0x64
 8027474:	81c2      	strh	r2, [r0, #14]
 8027476:	6183      	str	r3, [r0, #24]
 8027478:	4619      	mov	r1, r3
 802747a:	2208      	movs	r2, #8
 802747c:	305c      	adds	r0, #92	@ 0x5c
 802747e:	f000 f99b 	bl	80277b8 <memset>
 8027482:	4b0d      	ldr	r3, [pc, #52]	@ (80274b8 <std+0x58>)
 8027484:	6263      	str	r3, [r4, #36]	@ 0x24
 8027486:	4b0d      	ldr	r3, [pc, #52]	@ (80274bc <std+0x5c>)
 8027488:	62a3      	str	r3, [r4, #40]	@ 0x28
 802748a:	4b0d      	ldr	r3, [pc, #52]	@ (80274c0 <std+0x60>)
 802748c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 802748e:	4b0d      	ldr	r3, [pc, #52]	@ (80274c4 <std+0x64>)
 8027490:	6323      	str	r3, [r4, #48]	@ 0x30
 8027492:	4b0d      	ldr	r3, [pc, #52]	@ (80274c8 <std+0x68>)
 8027494:	6224      	str	r4, [r4, #32]
 8027496:	429c      	cmp	r4, r3
 8027498:	d006      	beq.n	80274a8 <std+0x48>
 802749a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 802749e:	4294      	cmp	r4, r2
 80274a0:	d002      	beq.n	80274a8 <std+0x48>
 80274a2:	33d0      	adds	r3, #208	@ 0xd0
 80274a4:	429c      	cmp	r4, r3
 80274a6:	d105      	bne.n	80274b4 <std+0x54>
 80274a8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80274ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80274b0:	f000 ba60 	b.w	8027974 <__retarget_lock_init_recursive>
 80274b4:	bd10      	pop	{r4, pc}
 80274b6:	bf00      	nop
 80274b8:	08027609 	.word	0x08027609
 80274bc:	0802762b 	.word	0x0802762b
 80274c0:	08027663 	.word	0x08027663
 80274c4:	08027687 	.word	0x08027687
 80274c8:	24029864 	.word	0x24029864

080274cc <stdio_exit_handler>:
 80274cc:	4a02      	ldr	r2, [pc, #8]	@ (80274d8 <stdio_exit_handler+0xc>)
 80274ce:	4903      	ldr	r1, [pc, #12]	@ (80274dc <stdio_exit_handler+0x10>)
 80274d0:	4803      	ldr	r0, [pc, #12]	@ (80274e0 <stdio_exit_handler+0x14>)
 80274d2:	f000 b87b 	b.w	80275cc <_fwalk_sglue>
 80274d6:	bf00      	nop
 80274d8:	240000dc 	.word	0x240000dc
 80274dc:	0802818d 	.word	0x0802818d
 80274e0:	240000ec 	.word	0x240000ec

080274e4 <cleanup_stdio>:
 80274e4:	6841      	ldr	r1, [r0, #4]
 80274e6:	4b0c      	ldr	r3, [pc, #48]	@ (8027518 <cleanup_stdio+0x34>)
 80274e8:	4299      	cmp	r1, r3
 80274ea:	b510      	push	{r4, lr}
 80274ec:	4604      	mov	r4, r0
 80274ee:	d001      	beq.n	80274f4 <cleanup_stdio+0x10>
 80274f0:	f000 fe4c 	bl	802818c <_fflush_r>
 80274f4:	68a1      	ldr	r1, [r4, #8]
 80274f6:	4b09      	ldr	r3, [pc, #36]	@ (802751c <cleanup_stdio+0x38>)
 80274f8:	4299      	cmp	r1, r3
 80274fa:	d002      	beq.n	8027502 <cleanup_stdio+0x1e>
 80274fc:	4620      	mov	r0, r4
 80274fe:	f000 fe45 	bl	802818c <_fflush_r>
 8027502:	68e1      	ldr	r1, [r4, #12]
 8027504:	4b06      	ldr	r3, [pc, #24]	@ (8027520 <cleanup_stdio+0x3c>)
 8027506:	4299      	cmp	r1, r3
 8027508:	d004      	beq.n	8027514 <cleanup_stdio+0x30>
 802750a:	4620      	mov	r0, r4
 802750c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8027510:	f000 be3c 	b.w	802818c <_fflush_r>
 8027514:	bd10      	pop	{r4, pc}
 8027516:	bf00      	nop
 8027518:	24029864 	.word	0x24029864
 802751c:	240298cc 	.word	0x240298cc
 8027520:	24029934 	.word	0x24029934

08027524 <global_stdio_init.part.0>:
 8027524:	b510      	push	{r4, lr}
 8027526:	4b0b      	ldr	r3, [pc, #44]	@ (8027554 <global_stdio_init.part.0+0x30>)
 8027528:	4c0b      	ldr	r4, [pc, #44]	@ (8027558 <global_stdio_init.part.0+0x34>)
 802752a:	4a0c      	ldr	r2, [pc, #48]	@ (802755c <global_stdio_init.part.0+0x38>)
 802752c:	601a      	str	r2, [r3, #0]
 802752e:	4620      	mov	r0, r4
 8027530:	2200      	movs	r2, #0
 8027532:	2104      	movs	r1, #4
 8027534:	f7ff ff94 	bl	8027460 <std>
 8027538:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 802753c:	2201      	movs	r2, #1
 802753e:	2109      	movs	r1, #9
 8027540:	f7ff ff8e 	bl	8027460 <std>
 8027544:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8027548:	2202      	movs	r2, #2
 802754a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802754e:	2112      	movs	r1, #18
 8027550:	f7ff bf86 	b.w	8027460 <std>
 8027554:	2402999c 	.word	0x2402999c
 8027558:	24029864 	.word	0x24029864
 802755c:	080274cd 	.word	0x080274cd

08027560 <__sfp_lock_acquire>:
 8027560:	4801      	ldr	r0, [pc, #4]	@ (8027568 <__sfp_lock_acquire+0x8>)
 8027562:	f000 ba08 	b.w	8027976 <__retarget_lock_acquire_recursive>
 8027566:	bf00      	nop
 8027568:	240299a6 	.word	0x240299a6

0802756c <__sfp_lock_release>:
 802756c:	4801      	ldr	r0, [pc, #4]	@ (8027574 <__sfp_lock_release+0x8>)
 802756e:	f000 ba03 	b.w	8027978 <__retarget_lock_release_recursive>
 8027572:	bf00      	nop
 8027574:	240299a6 	.word	0x240299a6

08027578 <__sinit>:
 8027578:	b510      	push	{r4, lr}
 802757a:	4604      	mov	r4, r0
 802757c:	f7ff fff0 	bl	8027560 <__sfp_lock_acquire>
 8027580:	6a23      	ldr	r3, [r4, #32]
 8027582:	b11b      	cbz	r3, 802758c <__sinit+0x14>
 8027584:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8027588:	f7ff bff0 	b.w	802756c <__sfp_lock_release>
 802758c:	4b04      	ldr	r3, [pc, #16]	@ (80275a0 <__sinit+0x28>)
 802758e:	6223      	str	r3, [r4, #32]
 8027590:	4b04      	ldr	r3, [pc, #16]	@ (80275a4 <__sinit+0x2c>)
 8027592:	681b      	ldr	r3, [r3, #0]
 8027594:	2b00      	cmp	r3, #0
 8027596:	d1f5      	bne.n	8027584 <__sinit+0xc>
 8027598:	f7ff ffc4 	bl	8027524 <global_stdio_init.part.0>
 802759c:	e7f2      	b.n	8027584 <__sinit+0xc>
 802759e:	bf00      	nop
 80275a0:	080274e5 	.word	0x080274e5
 80275a4:	2402999c 	.word	0x2402999c

080275a8 <fiprintf>:
 80275a8:	b40e      	push	{r1, r2, r3}
 80275aa:	b503      	push	{r0, r1, lr}
 80275ac:	4601      	mov	r1, r0
 80275ae:	ab03      	add	r3, sp, #12
 80275b0:	4805      	ldr	r0, [pc, #20]	@ (80275c8 <fiprintf+0x20>)
 80275b2:	f853 2b04 	ldr.w	r2, [r3], #4
 80275b6:	6800      	ldr	r0, [r0, #0]
 80275b8:	9301      	str	r3, [sp, #4]
 80275ba:	f000 fabd 	bl	8027b38 <_vfiprintf_r>
 80275be:	b002      	add	sp, #8
 80275c0:	f85d eb04 	ldr.w	lr, [sp], #4
 80275c4:	b003      	add	sp, #12
 80275c6:	4770      	bx	lr
 80275c8:	240000e8 	.word	0x240000e8

080275cc <_fwalk_sglue>:
 80275cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80275d0:	4607      	mov	r7, r0
 80275d2:	4688      	mov	r8, r1
 80275d4:	4614      	mov	r4, r2
 80275d6:	2600      	movs	r6, #0
 80275d8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80275dc:	f1b9 0901 	subs.w	r9, r9, #1
 80275e0:	d505      	bpl.n	80275ee <_fwalk_sglue+0x22>
 80275e2:	6824      	ldr	r4, [r4, #0]
 80275e4:	2c00      	cmp	r4, #0
 80275e6:	d1f7      	bne.n	80275d8 <_fwalk_sglue+0xc>
 80275e8:	4630      	mov	r0, r6
 80275ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80275ee:	89ab      	ldrh	r3, [r5, #12]
 80275f0:	2b01      	cmp	r3, #1
 80275f2:	d907      	bls.n	8027604 <_fwalk_sglue+0x38>
 80275f4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80275f8:	3301      	adds	r3, #1
 80275fa:	d003      	beq.n	8027604 <_fwalk_sglue+0x38>
 80275fc:	4629      	mov	r1, r5
 80275fe:	4638      	mov	r0, r7
 8027600:	47c0      	blx	r8
 8027602:	4306      	orrs	r6, r0
 8027604:	3568      	adds	r5, #104	@ 0x68
 8027606:	e7e9      	b.n	80275dc <_fwalk_sglue+0x10>

08027608 <__sread>:
 8027608:	b510      	push	{r4, lr}
 802760a:	460c      	mov	r4, r1
 802760c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8027610:	f000 f93e 	bl	8027890 <_read_r>
 8027614:	2800      	cmp	r0, #0
 8027616:	bfab      	itete	ge
 8027618:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 802761a:	89a3      	ldrhlt	r3, [r4, #12]
 802761c:	181b      	addge	r3, r3, r0
 802761e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8027622:	bfac      	ite	ge
 8027624:	6563      	strge	r3, [r4, #84]	@ 0x54
 8027626:	81a3      	strhlt	r3, [r4, #12]
 8027628:	bd10      	pop	{r4, pc}

0802762a <__swrite>:
 802762a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802762e:	461f      	mov	r7, r3
 8027630:	898b      	ldrh	r3, [r1, #12]
 8027632:	05db      	lsls	r3, r3, #23
 8027634:	4605      	mov	r5, r0
 8027636:	460c      	mov	r4, r1
 8027638:	4616      	mov	r6, r2
 802763a:	d505      	bpl.n	8027648 <__swrite+0x1e>
 802763c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8027640:	2302      	movs	r3, #2
 8027642:	2200      	movs	r2, #0
 8027644:	f000 f912 	bl	802786c <_lseek_r>
 8027648:	89a3      	ldrh	r3, [r4, #12]
 802764a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 802764e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8027652:	81a3      	strh	r3, [r4, #12]
 8027654:	4632      	mov	r2, r6
 8027656:	463b      	mov	r3, r7
 8027658:	4628      	mov	r0, r5
 802765a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 802765e:	f000 b94d 	b.w	80278fc <_write_r>

08027662 <__sseek>:
 8027662:	b510      	push	{r4, lr}
 8027664:	460c      	mov	r4, r1
 8027666:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802766a:	f000 f8ff 	bl	802786c <_lseek_r>
 802766e:	1c43      	adds	r3, r0, #1
 8027670:	89a3      	ldrh	r3, [r4, #12]
 8027672:	bf15      	itete	ne
 8027674:	6560      	strne	r0, [r4, #84]	@ 0x54
 8027676:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 802767a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 802767e:	81a3      	strheq	r3, [r4, #12]
 8027680:	bf18      	it	ne
 8027682:	81a3      	strhne	r3, [r4, #12]
 8027684:	bd10      	pop	{r4, pc}

08027686 <__sclose>:
 8027686:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802768a:	f000 b8df 	b.w	802784c <_close_r>

0802768e <__swbuf_r>:
 802768e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8027690:	460e      	mov	r6, r1
 8027692:	4614      	mov	r4, r2
 8027694:	4605      	mov	r5, r0
 8027696:	b118      	cbz	r0, 80276a0 <__swbuf_r+0x12>
 8027698:	6a03      	ldr	r3, [r0, #32]
 802769a:	b90b      	cbnz	r3, 80276a0 <__swbuf_r+0x12>
 802769c:	f7ff ff6c 	bl	8027578 <__sinit>
 80276a0:	69a3      	ldr	r3, [r4, #24]
 80276a2:	60a3      	str	r3, [r4, #8]
 80276a4:	89a3      	ldrh	r3, [r4, #12]
 80276a6:	071a      	lsls	r2, r3, #28
 80276a8:	d501      	bpl.n	80276ae <__swbuf_r+0x20>
 80276aa:	6923      	ldr	r3, [r4, #16]
 80276ac:	b943      	cbnz	r3, 80276c0 <__swbuf_r+0x32>
 80276ae:	4621      	mov	r1, r4
 80276b0:	4628      	mov	r0, r5
 80276b2:	f000 f82b 	bl	802770c <__swsetup_r>
 80276b6:	b118      	cbz	r0, 80276c0 <__swbuf_r+0x32>
 80276b8:	f04f 37ff 	mov.w	r7, #4294967295
 80276bc:	4638      	mov	r0, r7
 80276be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80276c0:	6823      	ldr	r3, [r4, #0]
 80276c2:	6922      	ldr	r2, [r4, #16]
 80276c4:	1a98      	subs	r0, r3, r2
 80276c6:	6963      	ldr	r3, [r4, #20]
 80276c8:	b2f6      	uxtb	r6, r6
 80276ca:	4283      	cmp	r3, r0
 80276cc:	4637      	mov	r7, r6
 80276ce:	dc05      	bgt.n	80276dc <__swbuf_r+0x4e>
 80276d0:	4621      	mov	r1, r4
 80276d2:	4628      	mov	r0, r5
 80276d4:	f000 fd5a 	bl	802818c <_fflush_r>
 80276d8:	2800      	cmp	r0, #0
 80276da:	d1ed      	bne.n	80276b8 <__swbuf_r+0x2a>
 80276dc:	68a3      	ldr	r3, [r4, #8]
 80276de:	3b01      	subs	r3, #1
 80276e0:	60a3      	str	r3, [r4, #8]
 80276e2:	6823      	ldr	r3, [r4, #0]
 80276e4:	1c5a      	adds	r2, r3, #1
 80276e6:	6022      	str	r2, [r4, #0]
 80276e8:	701e      	strb	r6, [r3, #0]
 80276ea:	6962      	ldr	r2, [r4, #20]
 80276ec:	1c43      	adds	r3, r0, #1
 80276ee:	429a      	cmp	r2, r3
 80276f0:	d004      	beq.n	80276fc <__swbuf_r+0x6e>
 80276f2:	89a3      	ldrh	r3, [r4, #12]
 80276f4:	07db      	lsls	r3, r3, #31
 80276f6:	d5e1      	bpl.n	80276bc <__swbuf_r+0x2e>
 80276f8:	2e0a      	cmp	r6, #10
 80276fa:	d1df      	bne.n	80276bc <__swbuf_r+0x2e>
 80276fc:	4621      	mov	r1, r4
 80276fe:	4628      	mov	r0, r5
 8027700:	f000 fd44 	bl	802818c <_fflush_r>
 8027704:	2800      	cmp	r0, #0
 8027706:	d0d9      	beq.n	80276bc <__swbuf_r+0x2e>
 8027708:	e7d6      	b.n	80276b8 <__swbuf_r+0x2a>
	...

0802770c <__swsetup_r>:
 802770c:	b538      	push	{r3, r4, r5, lr}
 802770e:	4b29      	ldr	r3, [pc, #164]	@ (80277b4 <__swsetup_r+0xa8>)
 8027710:	4605      	mov	r5, r0
 8027712:	6818      	ldr	r0, [r3, #0]
 8027714:	460c      	mov	r4, r1
 8027716:	b118      	cbz	r0, 8027720 <__swsetup_r+0x14>
 8027718:	6a03      	ldr	r3, [r0, #32]
 802771a:	b90b      	cbnz	r3, 8027720 <__swsetup_r+0x14>
 802771c:	f7ff ff2c 	bl	8027578 <__sinit>
 8027720:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8027724:	0719      	lsls	r1, r3, #28
 8027726:	d422      	bmi.n	802776e <__swsetup_r+0x62>
 8027728:	06da      	lsls	r2, r3, #27
 802772a:	d407      	bmi.n	802773c <__swsetup_r+0x30>
 802772c:	2209      	movs	r2, #9
 802772e:	602a      	str	r2, [r5, #0]
 8027730:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8027734:	81a3      	strh	r3, [r4, #12]
 8027736:	f04f 30ff 	mov.w	r0, #4294967295
 802773a:	e033      	b.n	80277a4 <__swsetup_r+0x98>
 802773c:	0758      	lsls	r0, r3, #29
 802773e:	d512      	bpl.n	8027766 <__swsetup_r+0x5a>
 8027740:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8027742:	b141      	cbz	r1, 8027756 <__swsetup_r+0x4a>
 8027744:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8027748:	4299      	cmp	r1, r3
 802774a:	d002      	beq.n	8027752 <__swsetup_r+0x46>
 802774c:	4628      	mov	r0, r5
 802774e:	f000 f97f 	bl	8027a50 <_free_r>
 8027752:	2300      	movs	r3, #0
 8027754:	6363      	str	r3, [r4, #52]	@ 0x34
 8027756:	89a3      	ldrh	r3, [r4, #12]
 8027758:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 802775c:	81a3      	strh	r3, [r4, #12]
 802775e:	2300      	movs	r3, #0
 8027760:	6063      	str	r3, [r4, #4]
 8027762:	6923      	ldr	r3, [r4, #16]
 8027764:	6023      	str	r3, [r4, #0]
 8027766:	89a3      	ldrh	r3, [r4, #12]
 8027768:	f043 0308 	orr.w	r3, r3, #8
 802776c:	81a3      	strh	r3, [r4, #12]
 802776e:	6923      	ldr	r3, [r4, #16]
 8027770:	b94b      	cbnz	r3, 8027786 <__swsetup_r+0x7a>
 8027772:	89a3      	ldrh	r3, [r4, #12]
 8027774:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8027778:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 802777c:	d003      	beq.n	8027786 <__swsetup_r+0x7a>
 802777e:	4621      	mov	r1, r4
 8027780:	4628      	mov	r0, r5
 8027782:	f000 fd51 	bl	8028228 <__smakebuf_r>
 8027786:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802778a:	f013 0201 	ands.w	r2, r3, #1
 802778e:	d00a      	beq.n	80277a6 <__swsetup_r+0x9a>
 8027790:	2200      	movs	r2, #0
 8027792:	60a2      	str	r2, [r4, #8]
 8027794:	6962      	ldr	r2, [r4, #20]
 8027796:	4252      	negs	r2, r2
 8027798:	61a2      	str	r2, [r4, #24]
 802779a:	6922      	ldr	r2, [r4, #16]
 802779c:	b942      	cbnz	r2, 80277b0 <__swsetup_r+0xa4>
 802779e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80277a2:	d1c5      	bne.n	8027730 <__swsetup_r+0x24>
 80277a4:	bd38      	pop	{r3, r4, r5, pc}
 80277a6:	0799      	lsls	r1, r3, #30
 80277a8:	bf58      	it	pl
 80277aa:	6962      	ldrpl	r2, [r4, #20]
 80277ac:	60a2      	str	r2, [r4, #8]
 80277ae:	e7f4      	b.n	802779a <__swsetup_r+0x8e>
 80277b0:	2000      	movs	r0, #0
 80277b2:	e7f7      	b.n	80277a4 <__swsetup_r+0x98>
 80277b4:	240000e8 	.word	0x240000e8

080277b8 <memset>:
 80277b8:	4402      	add	r2, r0
 80277ba:	4603      	mov	r3, r0
 80277bc:	4293      	cmp	r3, r2
 80277be:	d100      	bne.n	80277c2 <memset+0xa>
 80277c0:	4770      	bx	lr
 80277c2:	f803 1b01 	strb.w	r1, [r3], #1
 80277c6:	e7f9      	b.n	80277bc <memset+0x4>

080277c8 <strncmp>:
 80277c8:	b510      	push	{r4, lr}
 80277ca:	b16a      	cbz	r2, 80277e8 <strncmp+0x20>
 80277cc:	3901      	subs	r1, #1
 80277ce:	1884      	adds	r4, r0, r2
 80277d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80277d4:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80277d8:	429a      	cmp	r2, r3
 80277da:	d103      	bne.n	80277e4 <strncmp+0x1c>
 80277dc:	42a0      	cmp	r0, r4
 80277de:	d001      	beq.n	80277e4 <strncmp+0x1c>
 80277e0:	2a00      	cmp	r2, #0
 80277e2:	d1f5      	bne.n	80277d0 <strncmp+0x8>
 80277e4:	1ad0      	subs	r0, r2, r3
 80277e6:	bd10      	pop	{r4, pc}
 80277e8:	4610      	mov	r0, r2
 80277ea:	e7fc      	b.n	80277e6 <strncmp+0x1e>

080277ec <_raise_r>:
 80277ec:	291f      	cmp	r1, #31
 80277ee:	b538      	push	{r3, r4, r5, lr}
 80277f0:	4605      	mov	r5, r0
 80277f2:	460c      	mov	r4, r1
 80277f4:	d904      	bls.n	8027800 <_raise_r+0x14>
 80277f6:	2316      	movs	r3, #22
 80277f8:	6003      	str	r3, [r0, #0]
 80277fa:	f04f 30ff 	mov.w	r0, #4294967295
 80277fe:	bd38      	pop	{r3, r4, r5, pc}
 8027800:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8027802:	b112      	cbz	r2, 802780a <_raise_r+0x1e>
 8027804:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8027808:	b94b      	cbnz	r3, 802781e <_raise_r+0x32>
 802780a:	4628      	mov	r0, r5
 802780c:	f000 f864 	bl	80278d8 <_getpid_r>
 8027810:	4622      	mov	r2, r4
 8027812:	4601      	mov	r1, r0
 8027814:	4628      	mov	r0, r5
 8027816:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 802781a:	f000 b84b 	b.w	80278b4 <_kill_r>
 802781e:	2b01      	cmp	r3, #1
 8027820:	d00a      	beq.n	8027838 <_raise_r+0x4c>
 8027822:	1c59      	adds	r1, r3, #1
 8027824:	d103      	bne.n	802782e <_raise_r+0x42>
 8027826:	2316      	movs	r3, #22
 8027828:	6003      	str	r3, [r0, #0]
 802782a:	2001      	movs	r0, #1
 802782c:	e7e7      	b.n	80277fe <_raise_r+0x12>
 802782e:	2100      	movs	r1, #0
 8027830:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8027834:	4620      	mov	r0, r4
 8027836:	4798      	blx	r3
 8027838:	2000      	movs	r0, #0
 802783a:	e7e0      	b.n	80277fe <_raise_r+0x12>

0802783c <raise>:
 802783c:	4b02      	ldr	r3, [pc, #8]	@ (8027848 <raise+0xc>)
 802783e:	4601      	mov	r1, r0
 8027840:	6818      	ldr	r0, [r3, #0]
 8027842:	f7ff bfd3 	b.w	80277ec <_raise_r>
 8027846:	bf00      	nop
 8027848:	240000e8 	.word	0x240000e8

0802784c <_close_r>:
 802784c:	b538      	push	{r3, r4, r5, lr}
 802784e:	4d06      	ldr	r5, [pc, #24]	@ (8027868 <_close_r+0x1c>)
 8027850:	2300      	movs	r3, #0
 8027852:	4604      	mov	r4, r0
 8027854:	4608      	mov	r0, r1
 8027856:	602b      	str	r3, [r5, #0]
 8027858:	f7d9 ff30 	bl	80016bc <_close>
 802785c:	1c43      	adds	r3, r0, #1
 802785e:	d102      	bne.n	8027866 <_close_r+0x1a>
 8027860:	682b      	ldr	r3, [r5, #0]
 8027862:	b103      	cbz	r3, 8027866 <_close_r+0x1a>
 8027864:	6023      	str	r3, [r4, #0]
 8027866:	bd38      	pop	{r3, r4, r5, pc}
 8027868:	240299a0 	.word	0x240299a0

0802786c <_lseek_r>:
 802786c:	b538      	push	{r3, r4, r5, lr}
 802786e:	4d07      	ldr	r5, [pc, #28]	@ (802788c <_lseek_r+0x20>)
 8027870:	4604      	mov	r4, r0
 8027872:	4608      	mov	r0, r1
 8027874:	4611      	mov	r1, r2
 8027876:	2200      	movs	r2, #0
 8027878:	602a      	str	r2, [r5, #0]
 802787a:	461a      	mov	r2, r3
 802787c:	f7d9 ff28 	bl	80016d0 <_lseek>
 8027880:	1c43      	adds	r3, r0, #1
 8027882:	d102      	bne.n	802788a <_lseek_r+0x1e>
 8027884:	682b      	ldr	r3, [r5, #0]
 8027886:	b103      	cbz	r3, 802788a <_lseek_r+0x1e>
 8027888:	6023      	str	r3, [r4, #0]
 802788a:	bd38      	pop	{r3, r4, r5, pc}
 802788c:	240299a0 	.word	0x240299a0

08027890 <_read_r>:
 8027890:	b538      	push	{r3, r4, r5, lr}
 8027892:	4d07      	ldr	r5, [pc, #28]	@ (80278b0 <_read_r+0x20>)
 8027894:	4604      	mov	r4, r0
 8027896:	4608      	mov	r0, r1
 8027898:	4611      	mov	r1, r2
 802789a:	2200      	movs	r2, #0
 802789c:	602a      	str	r2, [r5, #0]
 802789e:	461a      	mov	r2, r3
 80278a0:	f7d9 fef0 	bl	8001684 <_read>
 80278a4:	1c43      	adds	r3, r0, #1
 80278a6:	d102      	bne.n	80278ae <_read_r+0x1e>
 80278a8:	682b      	ldr	r3, [r5, #0]
 80278aa:	b103      	cbz	r3, 80278ae <_read_r+0x1e>
 80278ac:	6023      	str	r3, [r4, #0]
 80278ae:	bd38      	pop	{r3, r4, r5, pc}
 80278b0:	240299a0 	.word	0x240299a0

080278b4 <_kill_r>:
 80278b4:	b538      	push	{r3, r4, r5, lr}
 80278b6:	4d07      	ldr	r5, [pc, #28]	@ (80278d4 <_kill_r+0x20>)
 80278b8:	2300      	movs	r3, #0
 80278ba:	4604      	mov	r4, r0
 80278bc:	4608      	mov	r0, r1
 80278be:	4611      	mov	r1, r2
 80278c0:	602b      	str	r3, [r5, #0]
 80278c2:	f7d9 fed1 	bl	8001668 <_kill>
 80278c6:	1c43      	adds	r3, r0, #1
 80278c8:	d102      	bne.n	80278d0 <_kill_r+0x1c>
 80278ca:	682b      	ldr	r3, [r5, #0]
 80278cc:	b103      	cbz	r3, 80278d0 <_kill_r+0x1c>
 80278ce:	6023      	str	r3, [r4, #0]
 80278d0:	bd38      	pop	{r3, r4, r5, pc}
 80278d2:	bf00      	nop
 80278d4:	240299a0 	.word	0x240299a0

080278d8 <_getpid_r>:
 80278d8:	f7d9 bec4 	b.w	8001664 <_getpid>

080278dc <_sbrk_r>:
 80278dc:	b538      	push	{r3, r4, r5, lr}
 80278de:	4d06      	ldr	r5, [pc, #24]	@ (80278f8 <_sbrk_r+0x1c>)
 80278e0:	2300      	movs	r3, #0
 80278e2:	4604      	mov	r4, r0
 80278e4:	4608      	mov	r0, r1
 80278e6:	602b      	str	r3, [r5, #0]
 80278e8:	f7d9 fef4 	bl	80016d4 <_sbrk>
 80278ec:	1c43      	adds	r3, r0, #1
 80278ee:	d102      	bne.n	80278f6 <_sbrk_r+0x1a>
 80278f0:	682b      	ldr	r3, [r5, #0]
 80278f2:	b103      	cbz	r3, 80278f6 <_sbrk_r+0x1a>
 80278f4:	6023      	str	r3, [r4, #0]
 80278f6:	bd38      	pop	{r3, r4, r5, pc}
 80278f8:	240299a0 	.word	0x240299a0

080278fc <_write_r>:
 80278fc:	b538      	push	{r3, r4, r5, lr}
 80278fe:	4d07      	ldr	r5, [pc, #28]	@ (802791c <_write_r+0x20>)
 8027900:	4604      	mov	r4, r0
 8027902:	4608      	mov	r0, r1
 8027904:	4611      	mov	r1, r2
 8027906:	2200      	movs	r2, #0
 8027908:	602a      	str	r2, [r5, #0]
 802790a:	461a      	mov	r2, r3
 802790c:	f7d9 fec8 	bl	80016a0 <_write>
 8027910:	1c43      	adds	r3, r0, #1
 8027912:	d102      	bne.n	802791a <_write_r+0x1e>
 8027914:	682b      	ldr	r3, [r5, #0]
 8027916:	b103      	cbz	r3, 802791a <_write_r+0x1e>
 8027918:	6023      	str	r3, [r4, #0]
 802791a:	bd38      	pop	{r3, r4, r5, pc}
 802791c:	240299a0 	.word	0x240299a0

08027920 <__errno>:
 8027920:	4b01      	ldr	r3, [pc, #4]	@ (8027928 <__errno+0x8>)
 8027922:	6818      	ldr	r0, [r3, #0]
 8027924:	4770      	bx	lr
 8027926:	bf00      	nop
 8027928:	240000e8 	.word	0x240000e8

0802792c <__libc_init_array>:
 802792c:	b570      	push	{r4, r5, r6, lr}
 802792e:	4d0d      	ldr	r5, [pc, #52]	@ (8027964 <__libc_init_array+0x38>)
 8027930:	4c0d      	ldr	r4, [pc, #52]	@ (8027968 <__libc_init_array+0x3c>)
 8027932:	1b64      	subs	r4, r4, r5
 8027934:	10a4      	asrs	r4, r4, #2
 8027936:	2600      	movs	r6, #0
 8027938:	42a6      	cmp	r6, r4
 802793a:	d109      	bne.n	8027950 <__libc_init_array+0x24>
 802793c:	4d0b      	ldr	r5, [pc, #44]	@ (802796c <__libc_init_array+0x40>)
 802793e:	4c0c      	ldr	r4, [pc, #48]	@ (8027970 <__libc_init_array+0x44>)
 8027940:	f000 fcd0 	bl	80282e4 <_init>
 8027944:	1b64      	subs	r4, r4, r5
 8027946:	10a4      	asrs	r4, r4, #2
 8027948:	2600      	movs	r6, #0
 802794a:	42a6      	cmp	r6, r4
 802794c:	d105      	bne.n	802795a <__libc_init_array+0x2e>
 802794e:	bd70      	pop	{r4, r5, r6, pc}
 8027950:	f855 3b04 	ldr.w	r3, [r5], #4
 8027954:	4798      	blx	r3
 8027956:	3601      	adds	r6, #1
 8027958:	e7ee      	b.n	8027938 <__libc_init_array+0xc>
 802795a:	f855 3b04 	ldr.w	r3, [r5], #4
 802795e:	4798      	blx	r3
 8027960:	3601      	adds	r6, #1
 8027962:	e7f2      	b.n	802794a <__libc_init_array+0x1e>
 8027964:	0803161c 	.word	0x0803161c
 8027968:	0803161c 	.word	0x0803161c
 802796c:	0803161c 	.word	0x0803161c
 8027970:	08031638 	.word	0x08031638

08027974 <__retarget_lock_init_recursive>:
 8027974:	4770      	bx	lr

08027976 <__retarget_lock_acquire_recursive>:
 8027976:	4770      	bx	lr

08027978 <__retarget_lock_release_recursive>:
 8027978:	4770      	bx	lr

0802797a <memcpy>:
 802797a:	440a      	add	r2, r1
 802797c:	4291      	cmp	r1, r2
 802797e:	f100 33ff 	add.w	r3, r0, #4294967295
 8027982:	d100      	bne.n	8027986 <memcpy+0xc>
 8027984:	4770      	bx	lr
 8027986:	b510      	push	{r4, lr}
 8027988:	f811 4b01 	ldrb.w	r4, [r1], #1
 802798c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8027990:	4291      	cmp	r1, r2
 8027992:	d1f9      	bne.n	8027988 <memcpy+0xe>
 8027994:	bd10      	pop	{r4, pc}
	...

08027998 <__register_exitproc>:
 8027998:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802799c:	4d27      	ldr	r5, [pc, #156]	@ (8027a3c <__register_exitproc+0xa4>)
 802799e:	4607      	mov	r7, r0
 80279a0:	6828      	ldr	r0, [r5, #0]
 80279a2:	4691      	mov	r9, r2
 80279a4:	460e      	mov	r6, r1
 80279a6:	4698      	mov	r8, r3
 80279a8:	f7ff ffe5 	bl	8027976 <__retarget_lock_acquire_recursive>
 80279ac:	4a24      	ldr	r2, [pc, #144]	@ (8027a40 <__register_exitproc+0xa8>)
 80279ae:	6814      	ldr	r4, [r2, #0]
 80279b0:	b93c      	cbnz	r4, 80279c2 <__register_exitproc+0x2a>
 80279b2:	4b24      	ldr	r3, [pc, #144]	@ (8027a44 <__register_exitproc+0xac>)
 80279b4:	6013      	str	r3, [r2, #0]
 80279b6:	4a24      	ldr	r2, [pc, #144]	@ (8027a48 <__register_exitproc+0xb0>)
 80279b8:	b112      	cbz	r2, 80279c0 <__register_exitproc+0x28>
 80279ba:	6812      	ldr	r2, [r2, #0]
 80279bc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
 80279c0:	4c20      	ldr	r4, [pc, #128]	@ (8027a44 <__register_exitproc+0xac>)
 80279c2:	6863      	ldr	r3, [r4, #4]
 80279c4:	2b1f      	cmp	r3, #31
 80279c6:	dd06      	ble.n	80279d6 <__register_exitproc+0x3e>
 80279c8:	6828      	ldr	r0, [r5, #0]
 80279ca:	f7ff ffd5 	bl	8027978 <__retarget_lock_release_recursive>
 80279ce:	f04f 30ff 	mov.w	r0, #4294967295
 80279d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80279d6:	b32f      	cbz	r7, 8027a24 <__register_exitproc+0x8c>
 80279d8:	f8d4 0088 	ldr.w	r0, [r4, #136]	@ 0x88
 80279dc:	b968      	cbnz	r0, 80279fa <__register_exitproc+0x62>
 80279de:	4b1b      	ldr	r3, [pc, #108]	@ (8027a4c <__register_exitproc+0xb4>)
 80279e0:	2b00      	cmp	r3, #0
 80279e2:	d0f1      	beq.n	80279c8 <__register_exitproc+0x30>
 80279e4:	f44f 7084 	mov.w	r0, #264	@ 0x108
 80279e8:	f7ff fc6e 	bl	80272c8 <malloc>
 80279ec:	2800      	cmp	r0, #0
 80279ee:	d0eb      	beq.n	80279c8 <__register_exitproc+0x30>
 80279f0:	2300      	movs	r3, #0
 80279f2:	e9c0 3340 	strd	r3, r3, [r0, #256]	@ 0x100
 80279f6:	f8c4 0088 	str.w	r0, [r4, #136]	@ 0x88
 80279fa:	6863      	ldr	r3, [r4, #4]
 80279fc:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 8027a00:	2201      	movs	r2, #1
 8027a02:	409a      	lsls	r2, r3
 8027a04:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 8027a08:	f8d0 3100 	ldr.w	r3, [r0, #256]	@ 0x100
 8027a0c:	4313      	orrs	r3, r2
 8027a0e:	f8c0 3100 	str.w	r3, [r0, #256]	@ 0x100
 8027a12:	2f02      	cmp	r7, #2
 8027a14:	f8c1 8080 	str.w	r8, [r1, #128]	@ 0x80
 8027a18:	bf02      	ittt	eq
 8027a1a:	f8d0 3104 	ldreq.w	r3, [r0, #260]	@ 0x104
 8027a1e:	4313      	orreq	r3, r2
 8027a20:	f8c0 3104 	streq.w	r3, [r0, #260]	@ 0x104
 8027a24:	6863      	ldr	r3, [r4, #4]
 8027a26:	6828      	ldr	r0, [r5, #0]
 8027a28:	1c5a      	adds	r2, r3, #1
 8027a2a:	3302      	adds	r3, #2
 8027a2c:	6062      	str	r2, [r4, #4]
 8027a2e:	f844 6023 	str.w	r6, [r4, r3, lsl #2]
 8027a32:	f7ff ffa1 	bl	8027978 <__retarget_lock_release_recursive>
 8027a36:	2000      	movs	r0, #0
 8027a38:	e7cb      	b.n	80279d2 <__register_exitproc+0x3a>
 8027a3a:	bf00      	nop
 8027a3c:	24000138 	.word	0x24000138
 8027a40:	24029a34 	.word	0x24029a34
 8027a44:	240299a8 	.word	0x240299a8
 8027a48:	0802cd24 	.word	0x0802cd24
 8027a4c:	080272c9 	.word	0x080272c9

08027a50 <_free_r>:
 8027a50:	b538      	push	{r3, r4, r5, lr}
 8027a52:	4605      	mov	r5, r0
 8027a54:	2900      	cmp	r1, #0
 8027a56:	d041      	beq.n	8027adc <_free_r+0x8c>
 8027a58:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8027a5c:	1f0c      	subs	r4, r1, #4
 8027a5e:	2b00      	cmp	r3, #0
 8027a60:	bfb8      	it	lt
 8027a62:	18e4      	addlt	r4, r4, r3
 8027a64:	f7ff fce2 	bl	802742c <__malloc_lock>
 8027a68:	4a1d      	ldr	r2, [pc, #116]	@ (8027ae0 <_free_r+0x90>)
 8027a6a:	6813      	ldr	r3, [r2, #0]
 8027a6c:	b933      	cbnz	r3, 8027a7c <_free_r+0x2c>
 8027a6e:	6063      	str	r3, [r4, #4]
 8027a70:	6014      	str	r4, [r2, #0]
 8027a72:	4628      	mov	r0, r5
 8027a74:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8027a78:	f7ff bcde 	b.w	8027438 <__malloc_unlock>
 8027a7c:	42a3      	cmp	r3, r4
 8027a7e:	d908      	bls.n	8027a92 <_free_r+0x42>
 8027a80:	6820      	ldr	r0, [r4, #0]
 8027a82:	1821      	adds	r1, r4, r0
 8027a84:	428b      	cmp	r3, r1
 8027a86:	bf01      	itttt	eq
 8027a88:	6819      	ldreq	r1, [r3, #0]
 8027a8a:	685b      	ldreq	r3, [r3, #4]
 8027a8c:	1809      	addeq	r1, r1, r0
 8027a8e:	6021      	streq	r1, [r4, #0]
 8027a90:	e7ed      	b.n	8027a6e <_free_r+0x1e>
 8027a92:	461a      	mov	r2, r3
 8027a94:	685b      	ldr	r3, [r3, #4]
 8027a96:	b10b      	cbz	r3, 8027a9c <_free_r+0x4c>
 8027a98:	42a3      	cmp	r3, r4
 8027a9a:	d9fa      	bls.n	8027a92 <_free_r+0x42>
 8027a9c:	6811      	ldr	r1, [r2, #0]
 8027a9e:	1850      	adds	r0, r2, r1
 8027aa0:	42a0      	cmp	r0, r4
 8027aa2:	d10b      	bne.n	8027abc <_free_r+0x6c>
 8027aa4:	6820      	ldr	r0, [r4, #0]
 8027aa6:	4401      	add	r1, r0
 8027aa8:	1850      	adds	r0, r2, r1
 8027aaa:	4283      	cmp	r3, r0
 8027aac:	6011      	str	r1, [r2, #0]
 8027aae:	d1e0      	bne.n	8027a72 <_free_r+0x22>
 8027ab0:	6818      	ldr	r0, [r3, #0]
 8027ab2:	685b      	ldr	r3, [r3, #4]
 8027ab4:	6053      	str	r3, [r2, #4]
 8027ab6:	4408      	add	r0, r1
 8027ab8:	6010      	str	r0, [r2, #0]
 8027aba:	e7da      	b.n	8027a72 <_free_r+0x22>
 8027abc:	d902      	bls.n	8027ac4 <_free_r+0x74>
 8027abe:	230c      	movs	r3, #12
 8027ac0:	602b      	str	r3, [r5, #0]
 8027ac2:	e7d6      	b.n	8027a72 <_free_r+0x22>
 8027ac4:	6820      	ldr	r0, [r4, #0]
 8027ac6:	1821      	adds	r1, r4, r0
 8027ac8:	428b      	cmp	r3, r1
 8027aca:	bf04      	itt	eq
 8027acc:	6819      	ldreq	r1, [r3, #0]
 8027ace:	685b      	ldreq	r3, [r3, #4]
 8027ad0:	6063      	str	r3, [r4, #4]
 8027ad2:	bf04      	itt	eq
 8027ad4:	1809      	addeq	r1, r1, r0
 8027ad6:	6021      	streq	r1, [r4, #0]
 8027ad8:	6054      	str	r4, [r2, #4]
 8027ada:	e7ca      	b.n	8027a72 <_free_r+0x22>
 8027adc:	bd38      	pop	{r3, r4, r5, pc}
 8027ade:	bf00      	nop
 8027ae0:	24029860 	.word	0x24029860

08027ae4 <__sfputc_r>:
 8027ae4:	6893      	ldr	r3, [r2, #8]
 8027ae6:	3b01      	subs	r3, #1
 8027ae8:	2b00      	cmp	r3, #0
 8027aea:	b410      	push	{r4}
 8027aec:	6093      	str	r3, [r2, #8]
 8027aee:	da08      	bge.n	8027b02 <__sfputc_r+0x1e>
 8027af0:	6994      	ldr	r4, [r2, #24]
 8027af2:	42a3      	cmp	r3, r4
 8027af4:	db01      	blt.n	8027afa <__sfputc_r+0x16>
 8027af6:	290a      	cmp	r1, #10
 8027af8:	d103      	bne.n	8027b02 <__sfputc_r+0x1e>
 8027afa:	f85d 4b04 	ldr.w	r4, [sp], #4
 8027afe:	f7ff bdc6 	b.w	802768e <__swbuf_r>
 8027b02:	6813      	ldr	r3, [r2, #0]
 8027b04:	1c58      	adds	r0, r3, #1
 8027b06:	6010      	str	r0, [r2, #0]
 8027b08:	7019      	strb	r1, [r3, #0]
 8027b0a:	4608      	mov	r0, r1
 8027b0c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8027b10:	4770      	bx	lr

08027b12 <__sfputs_r>:
 8027b12:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8027b14:	4606      	mov	r6, r0
 8027b16:	460f      	mov	r7, r1
 8027b18:	4614      	mov	r4, r2
 8027b1a:	18d5      	adds	r5, r2, r3
 8027b1c:	42ac      	cmp	r4, r5
 8027b1e:	d101      	bne.n	8027b24 <__sfputs_r+0x12>
 8027b20:	2000      	movs	r0, #0
 8027b22:	e007      	b.n	8027b34 <__sfputs_r+0x22>
 8027b24:	f814 1b01 	ldrb.w	r1, [r4], #1
 8027b28:	463a      	mov	r2, r7
 8027b2a:	4630      	mov	r0, r6
 8027b2c:	f7ff ffda 	bl	8027ae4 <__sfputc_r>
 8027b30:	1c43      	adds	r3, r0, #1
 8027b32:	d1f3      	bne.n	8027b1c <__sfputs_r+0xa>
 8027b34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08027b38 <_vfiprintf_r>:
 8027b38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8027b3c:	460d      	mov	r5, r1
 8027b3e:	b09d      	sub	sp, #116	@ 0x74
 8027b40:	4614      	mov	r4, r2
 8027b42:	4698      	mov	r8, r3
 8027b44:	4606      	mov	r6, r0
 8027b46:	b118      	cbz	r0, 8027b50 <_vfiprintf_r+0x18>
 8027b48:	6a03      	ldr	r3, [r0, #32]
 8027b4a:	b90b      	cbnz	r3, 8027b50 <_vfiprintf_r+0x18>
 8027b4c:	f7ff fd14 	bl	8027578 <__sinit>
 8027b50:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8027b52:	07d9      	lsls	r1, r3, #31
 8027b54:	d405      	bmi.n	8027b62 <_vfiprintf_r+0x2a>
 8027b56:	89ab      	ldrh	r3, [r5, #12]
 8027b58:	059a      	lsls	r2, r3, #22
 8027b5a:	d402      	bmi.n	8027b62 <_vfiprintf_r+0x2a>
 8027b5c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8027b5e:	f7ff ff0a 	bl	8027976 <__retarget_lock_acquire_recursive>
 8027b62:	89ab      	ldrh	r3, [r5, #12]
 8027b64:	071b      	lsls	r3, r3, #28
 8027b66:	d501      	bpl.n	8027b6c <_vfiprintf_r+0x34>
 8027b68:	692b      	ldr	r3, [r5, #16]
 8027b6a:	b99b      	cbnz	r3, 8027b94 <_vfiprintf_r+0x5c>
 8027b6c:	4629      	mov	r1, r5
 8027b6e:	4630      	mov	r0, r6
 8027b70:	f7ff fdcc 	bl	802770c <__swsetup_r>
 8027b74:	b170      	cbz	r0, 8027b94 <_vfiprintf_r+0x5c>
 8027b76:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8027b78:	07dc      	lsls	r4, r3, #31
 8027b7a:	d504      	bpl.n	8027b86 <_vfiprintf_r+0x4e>
 8027b7c:	f04f 30ff 	mov.w	r0, #4294967295
 8027b80:	b01d      	add	sp, #116	@ 0x74
 8027b82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8027b86:	89ab      	ldrh	r3, [r5, #12]
 8027b88:	0598      	lsls	r0, r3, #22
 8027b8a:	d4f7      	bmi.n	8027b7c <_vfiprintf_r+0x44>
 8027b8c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8027b8e:	f7ff fef3 	bl	8027978 <__retarget_lock_release_recursive>
 8027b92:	e7f3      	b.n	8027b7c <_vfiprintf_r+0x44>
 8027b94:	2300      	movs	r3, #0
 8027b96:	9309      	str	r3, [sp, #36]	@ 0x24
 8027b98:	2320      	movs	r3, #32
 8027b9a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8027b9e:	f8cd 800c 	str.w	r8, [sp, #12]
 8027ba2:	2330      	movs	r3, #48	@ 0x30
 8027ba4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8027d54 <_vfiprintf_r+0x21c>
 8027ba8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8027bac:	f04f 0901 	mov.w	r9, #1
 8027bb0:	4623      	mov	r3, r4
 8027bb2:	469a      	mov	sl, r3
 8027bb4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8027bb8:	b10a      	cbz	r2, 8027bbe <_vfiprintf_r+0x86>
 8027bba:	2a25      	cmp	r2, #37	@ 0x25
 8027bbc:	d1f9      	bne.n	8027bb2 <_vfiprintf_r+0x7a>
 8027bbe:	ebba 0b04 	subs.w	fp, sl, r4
 8027bc2:	d00b      	beq.n	8027bdc <_vfiprintf_r+0xa4>
 8027bc4:	465b      	mov	r3, fp
 8027bc6:	4622      	mov	r2, r4
 8027bc8:	4629      	mov	r1, r5
 8027bca:	4630      	mov	r0, r6
 8027bcc:	f7ff ffa1 	bl	8027b12 <__sfputs_r>
 8027bd0:	3001      	adds	r0, #1
 8027bd2:	f000 80a7 	beq.w	8027d24 <_vfiprintf_r+0x1ec>
 8027bd6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8027bd8:	445a      	add	r2, fp
 8027bda:	9209      	str	r2, [sp, #36]	@ 0x24
 8027bdc:	f89a 3000 	ldrb.w	r3, [sl]
 8027be0:	2b00      	cmp	r3, #0
 8027be2:	f000 809f 	beq.w	8027d24 <_vfiprintf_r+0x1ec>
 8027be6:	2300      	movs	r3, #0
 8027be8:	f04f 32ff 	mov.w	r2, #4294967295
 8027bec:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8027bf0:	f10a 0a01 	add.w	sl, sl, #1
 8027bf4:	9304      	str	r3, [sp, #16]
 8027bf6:	9307      	str	r3, [sp, #28]
 8027bf8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8027bfc:	931a      	str	r3, [sp, #104]	@ 0x68
 8027bfe:	4654      	mov	r4, sl
 8027c00:	2205      	movs	r2, #5
 8027c02:	f814 1b01 	ldrb.w	r1, [r4], #1
 8027c06:	4853      	ldr	r0, [pc, #332]	@ (8027d54 <_vfiprintf_r+0x21c>)
 8027c08:	f7d8 fb6a 	bl	80002e0 <memchr>
 8027c0c:	9a04      	ldr	r2, [sp, #16]
 8027c0e:	b9d8      	cbnz	r0, 8027c48 <_vfiprintf_r+0x110>
 8027c10:	06d1      	lsls	r1, r2, #27
 8027c12:	bf44      	itt	mi
 8027c14:	2320      	movmi	r3, #32
 8027c16:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8027c1a:	0713      	lsls	r3, r2, #28
 8027c1c:	bf44      	itt	mi
 8027c1e:	232b      	movmi	r3, #43	@ 0x2b
 8027c20:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8027c24:	f89a 3000 	ldrb.w	r3, [sl]
 8027c28:	2b2a      	cmp	r3, #42	@ 0x2a
 8027c2a:	d015      	beq.n	8027c58 <_vfiprintf_r+0x120>
 8027c2c:	9a07      	ldr	r2, [sp, #28]
 8027c2e:	4654      	mov	r4, sl
 8027c30:	2000      	movs	r0, #0
 8027c32:	f04f 0c0a 	mov.w	ip, #10
 8027c36:	4621      	mov	r1, r4
 8027c38:	f811 3b01 	ldrb.w	r3, [r1], #1
 8027c3c:	3b30      	subs	r3, #48	@ 0x30
 8027c3e:	2b09      	cmp	r3, #9
 8027c40:	d94b      	bls.n	8027cda <_vfiprintf_r+0x1a2>
 8027c42:	b1b0      	cbz	r0, 8027c72 <_vfiprintf_r+0x13a>
 8027c44:	9207      	str	r2, [sp, #28]
 8027c46:	e014      	b.n	8027c72 <_vfiprintf_r+0x13a>
 8027c48:	eba0 0308 	sub.w	r3, r0, r8
 8027c4c:	fa09 f303 	lsl.w	r3, r9, r3
 8027c50:	4313      	orrs	r3, r2
 8027c52:	9304      	str	r3, [sp, #16]
 8027c54:	46a2      	mov	sl, r4
 8027c56:	e7d2      	b.n	8027bfe <_vfiprintf_r+0xc6>
 8027c58:	9b03      	ldr	r3, [sp, #12]
 8027c5a:	1d19      	adds	r1, r3, #4
 8027c5c:	681b      	ldr	r3, [r3, #0]
 8027c5e:	9103      	str	r1, [sp, #12]
 8027c60:	2b00      	cmp	r3, #0
 8027c62:	bfbb      	ittet	lt
 8027c64:	425b      	neglt	r3, r3
 8027c66:	f042 0202 	orrlt.w	r2, r2, #2
 8027c6a:	9307      	strge	r3, [sp, #28]
 8027c6c:	9307      	strlt	r3, [sp, #28]
 8027c6e:	bfb8      	it	lt
 8027c70:	9204      	strlt	r2, [sp, #16]
 8027c72:	7823      	ldrb	r3, [r4, #0]
 8027c74:	2b2e      	cmp	r3, #46	@ 0x2e
 8027c76:	d10a      	bne.n	8027c8e <_vfiprintf_r+0x156>
 8027c78:	7863      	ldrb	r3, [r4, #1]
 8027c7a:	2b2a      	cmp	r3, #42	@ 0x2a
 8027c7c:	d132      	bne.n	8027ce4 <_vfiprintf_r+0x1ac>
 8027c7e:	9b03      	ldr	r3, [sp, #12]
 8027c80:	1d1a      	adds	r2, r3, #4
 8027c82:	681b      	ldr	r3, [r3, #0]
 8027c84:	9203      	str	r2, [sp, #12]
 8027c86:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8027c8a:	3402      	adds	r4, #2
 8027c8c:	9305      	str	r3, [sp, #20]
 8027c8e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8027d64 <_vfiprintf_r+0x22c>
 8027c92:	7821      	ldrb	r1, [r4, #0]
 8027c94:	2203      	movs	r2, #3
 8027c96:	4650      	mov	r0, sl
 8027c98:	f7d8 fb22 	bl	80002e0 <memchr>
 8027c9c:	b138      	cbz	r0, 8027cae <_vfiprintf_r+0x176>
 8027c9e:	9b04      	ldr	r3, [sp, #16]
 8027ca0:	eba0 000a 	sub.w	r0, r0, sl
 8027ca4:	2240      	movs	r2, #64	@ 0x40
 8027ca6:	4082      	lsls	r2, r0
 8027ca8:	4313      	orrs	r3, r2
 8027caa:	3401      	adds	r4, #1
 8027cac:	9304      	str	r3, [sp, #16]
 8027cae:	f814 1b01 	ldrb.w	r1, [r4], #1
 8027cb2:	4829      	ldr	r0, [pc, #164]	@ (8027d58 <_vfiprintf_r+0x220>)
 8027cb4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8027cb8:	2206      	movs	r2, #6
 8027cba:	f7d8 fb11 	bl	80002e0 <memchr>
 8027cbe:	2800      	cmp	r0, #0
 8027cc0:	d03f      	beq.n	8027d42 <_vfiprintf_r+0x20a>
 8027cc2:	4b26      	ldr	r3, [pc, #152]	@ (8027d5c <_vfiprintf_r+0x224>)
 8027cc4:	bb1b      	cbnz	r3, 8027d0e <_vfiprintf_r+0x1d6>
 8027cc6:	9b03      	ldr	r3, [sp, #12]
 8027cc8:	3307      	adds	r3, #7
 8027cca:	f023 0307 	bic.w	r3, r3, #7
 8027cce:	3308      	adds	r3, #8
 8027cd0:	9303      	str	r3, [sp, #12]
 8027cd2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8027cd4:	443b      	add	r3, r7
 8027cd6:	9309      	str	r3, [sp, #36]	@ 0x24
 8027cd8:	e76a      	b.n	8027bb0 <_vfiprintf_r+0x78>
 8027cda:	fb0c 3202 	mla	r2, ip, r2, r3
 8027cde:	460c      	mov	r4, r1
 8027ce0:	2001      	movs	r0, #1
 8027ce2:	e7a8      	b.n	8027c36 <_vfiprintf_r+0xfe>
 8027ce4:	2300      	movs	r3, #0
 8027ce6:	3401      	adds	r4, #1
 8027ce8:	9305      	str	r3, [sp, #20]
 8027cea:	4619      	mov	r1, r3
 8027cec:	f04f 0c0a 	mov.w	ip, #10
 8027cf0:	4620      	mov	r0, r4
 8027cf2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8027cf6:	3a30      	subs	r2, #48	@ 0x30
 8027cf8:	2a09      	cmp	r2, #9
 8027cfa:	d903      	bls.n	8027d04 <_vfiprintf_r+0x1cc>
 8027cfc:	2b00      	cmp	r3, #0
 8027cfe:	d0c6      	beq.n	8027c8e <_vfiprintf_r+0x156>
 8027d00:	9105      	str	r1, [sp, #20]
 8027d02:	e7c4      	b.n	8027c8e <_vfiprintf_r+0x156>
 8027d04:	fb0c 2101 	mla	r1, ip, r1, r2
 8027d08:	4604      	mov	r4, r0
 8027d0a:	2301      	movs	r3, #1
 8027d0c:	e7f0      	b.n	8027cf0 <_vfiprintf_r+0x1b8>
 8027d0e:	ab03      	add	r3, sp, #12
 8027d10:	9300      	str	r3, [sp, #0]
 8027d12:	462a      	mov	r2, r5
 8027d14:	4b12      	ldr	r3, [pc, #72]	@ (8027d60 <_vfiprintf_r+0x228>)
 8027d16:	a904      	add	r1, sp, #16
 8027d18:	4630      	mov	r0, r6
 8027d1a:	f3af 8000 	nop.w
 8027d1e:	4607      	mov	r7, r0
 8027d20:	1c78      	adds	r0, r7, #1
 8027d22:	d1d6      	bne.n	8027cd2 <_vfiprintf_r+0x19a>
 8027d24:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8027d26:	07d9      	lsls	r1, r3, #31
 8027d28:	d405      	bmi.n	8027d36 <_vfiprintf_r+0x1fe>
 8027d2a:	89ab      	ldrh	r3, [r5, #12]
 8027d2c:	059a      	lsls	r2, r3, #22
 8027d2e:	d402      	bmi.n	8027d36 <_vfiprintf_r+0x1fe>
 8027d30:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8027d32:	f7ff fe21 	bl	8027978 <__retarget_lock_release_recursive>
 8027d36:	89ab      	ldrh	r3, [r5, #12]
 8027d38:	065b      	lsls	r3, r3, #25
 8027d3a:	f53f af1f 	bmi.w	8027b7c <_vfiprintf_r+0x44>
 8027d3e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8027d40:	e71e      	b.n	8027b80 <_vfiprintf_r+0x48>
 8027d42:	ab03      	add	r3, sp, #12
 8027d44:	9300      	str	r3, [sp, #0]
 8027d46:	462a      	mov	r2, r5
 8027d48:	4b05      	ldr	r3, [pc, #20]	@ (8027d60 <_vfiprintf_r+0x228>)
 8027d4a:	a904      	add	r1, sp, #16
 8027d4c:	4630      	mov	r0, r6
 8027d4e:	f000 f879 	bl	8027e44 <_printf_i>
 8027d52:	e7e4      	b.n	8027d1e <_vfiprintf_r+0x1e6>
 8027d54:	0802cd28 	.word	0x0802cd28
 8027d58:	0802cd32 	.word	0x0802cd32
 8027d5c:	00000000 	.word	0x00000000
 8027d60:	08027b13 	.word	0x08027b13
 8027d64:	0802cd2e 	.word	0x0802cd2e

08027d68 <_printf_common>:
 8027d68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8027d6c:	4616      	mov	r6, r2
 8027d6e:	4698      	mov	r8, r3
 8027d70:	688a      	ldr	r2, [r1, #8]
 8027d72:	690b      	ldr	r3, [r1, #16]
 8027d74:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8027d78:	4293      	cmp	r3, r2
 8027d7a:	bfb8      	it	lt
 8027d7c:	4613      	movlt	r3, r2
 8027d7e:	6033      	str	r3, [r6, #0]
 8027d80:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8027d84:	4607      	mov	r7, r0
 8027d86:	460c      	mov	r4, r1
 8027d88:	b10a      	cbz	r2, 8027d8e <_printf_common+0x26>
 8027d8a:	3301      	adds	r3, #1
 8027d8c:	6033      	str	r3, [r6, #0]
 8027d8e:	6823      	ldr	r3, [r4, #0]
 8027d90:	0699      	lsls	r1, r3, #26
 8027d92:	bf42      	ittt	mi
 8027d94:	6833      	ldrmi	r3, [r6, #0]
 8027d96:	3302      	addmi	r3, #2
 8027d98:	6033      	strmi	r3, [r6, #0]
 8027d9a:	6825      	ldr	r5, [r4, #0]
 8027d9c:	f015 0506 	ands.w	r5, r5, #6
 8027da0:	d106      	bne.n	8027db0 <_printf_common+0x48>
 8027da2:	f104 0a19 	add.w	sl, r4, #25
 8027da6:	68e3      	ldr	r3, [r4, #12]
 8027da8:	6832      	ldr	r2, [r6, #0]
 8027daa:	1a9b      	subs	r3, r3, r2
 8027dac:	42ab      	cmp	r3, r5
 8027dae:	dc26      	bgt.n	8027dfe <_printf_common+0x96>
 8027db0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8027db4:	6822      	ldr	r2, [r4, #0]
 8027db6:	3b00      	subs	r3, #0
 8027db8:	bf18      	it	ne
 8027dba:	2301      	movne	r3, #1
 8027dbc:	0692      	lsls	r2, r2, #26
 8027dbe:	d42b      	bmi.n	8027e18 <_printf_common+0xb0>
 8027dc0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8027dc4:	4641      	mov	r1, r8
 8027dc6:	4638      	mov	r0, r7
 8027dc8:	47c8      	blx	r9
 8027dca:	3001      	adds	r0, #1
 8027dcc:	d01e      	beq.n	8027e0c <_printf_common+0xa4>
 8027dce:	6823      	ldr	r3, [r4, #0]
 8027dd0:	6922      	ldr	r2, [r4, #16]
 8027dd2:	f003 0306 	and.w	r3, r3, #6
 8027dd6:	2b04      	cmp	r3, #4
 8027dd8:	bf02      	ittt	eq
 8027dda:	68e5      	ldreq	r5, [r4, #12]
 8027ddc:	6833      	ldreq	r3, [r6, #0]
 8027dde:	1aed      	subeq	r5, r5, r3
 8027de0:	68a3      	ldr	r3, [r4, #8]
 8027de2:	bf0c      	ite	eq
 8027de4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8027de8:	2500      	movne	r5, #0
 8027dea:	4293      	cmp	r3, r2
 8027dec:	bfc4      	itt	gt
 8027dee:	1a9b      	subgt	r3, r3, r2
 8027df0:	18ed      	addgt	r5, r5, r3
 8027df2:	2600      	movs	r6, #0
 8027df4:	341a      	adds	r4, #26
 8027df6:	42b5      	cmp	r5, r6
 8027df8:	d11a      	bne.n	8027e30 <_printf_common+0xc8>
 8027dfa:	2000      	movs	r0, #0
 8027dfc:	e008      	b.n	8027e10 <_printf_common+0xa8>
 8027dfe:	2301      	movs	r3, #1
 8027e00:	4652      	mov	r2, sl
 8027e02:	4641      	mov	r1, r8
 8027e04:	4638      	mov	r0, r7
 8027e06:	47c8      	blx	r9
 8027e08:	3001      	adds	r0, #1
 8027e0a:	d103      	bne.n	8027e14 <_printf_common+0xac>
 8027e0c:	f04f 30ff 	mov.w	r0, #4294967295
 8027e10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8027e14:	3501      	adds	r5, #1
 8027e16:	e7c6      	b.n	8027da6 <_printf_common+0x3e>
 8027e18:	18e1      	adds	r1, r4, r3
 8027e1a:	1c5a      	adds	r2, r3, #1
 8027e1c:	2030      	movs	r0, #48	@ 0x30
 8027e1e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8027e22:	4422      	add	r2, r4
 8027e24:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8027e28:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8027e2c:	3302      	adds	r3, #2
 8027e2e:	e7c7      	b.n	8027dc0 <_printf_common+0x58>
 8027e30:	2301      	movs	r3, #1
 8027e32:	4622      	mov	r2, r4
 8027e34:	4641      	mov	r1, r8
 8027e36:	4638      	mov	r0, r7
 8027e38:	47c8      	blx	r9
 8027e3a:	3001      	adds	r0, #1
 8027e3c:	d0e6      	beq.n	8027e0c <_printf_common+0xa4>
 8027e3e:	3601      	adds	r6, #1
 8027e40:	e7d9      	b.n	8027df6 <_printf_common+0x8e>
	...

08027e44 <_printf_i>:
 8027e44:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8027e48:	7e0f      	ldrb	r7, [r1, #24]
 8027e4a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8027e4c:	2f78      	cmp	r7, #120	@ 0x78
 8027e4e:	4691      	mov	r9, r2
 8027e50:	4680      	mov	r8, r0
 8027e52:	460c      	mov	r4, r1
 8027e54:	469a      	mov	sl, r3
 8027e56:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8027e5a:	d807      	bhi.n	8027e6c <_printf_i+0x28>
 8027e5c:	2f62      	cmp	r7, #98	@ 0x62
 8027e5e:	d80a      	bhi.n	8027e76 <_printf_i+0x32>
 8027e60:	2f00      	cmp	r7, #0
 8027e62:	f000 80d2 	beq.w	802800a <_printf_i+0x1c6>
 8027e66:	2f58      	cmp	r7, #88	@ 0x58
 8027e68:	f000 80b9 	beq.w	8027fde <_printf_i+0x19a>
 8027e6c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8027e70:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8027e74:	e03a      	b.n	8027eec <_printf_i+0xa8>
 8027e76:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8027e7a:	2b15      	cmp	r3, #21
 8027e7c:	d8f6      	bhi.n	8027e6c <_printf_i+0x28>
 8027e7e:	a101      	add	r1, pc, #4	@ (adr r1, 8027e84 <_printf_i+0x40>)
 8027e80:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8027e84:	08027edd 	.word	0x08027edd
 8027e88:	08027ef1 	.word	0x08027ef1
 8027e8c:	08027e6d 	.word	0x08027e6d
 8027e90:	08027e6d 	.word	0x08027e6d
 8027e94:	08027e6d 	.word	0x08027e6d
 8027e98:	08027e6d 	.word	0x08027e6d
 8027e9c:	08027ef1 	.word	0x08027ef1
 8027ea0:	08027e6d 	.word	0x08027e6d
 8027ea4:	08027e6d 	.word	0x08027e6d
 8027ea8:	08027e6d 	.word	0x08027e6d
 8027eac:	08027e6d 	.word	0x08027e6d
 8027eb0:	08027ff1 	.word	0x08027ff1
 8027eb4:	08027f1b 	.word	0x08027f1b
 8027eb8:	08027fab 	.word	0x08027fab
 8027ebc:	08027e6d 	.word	0x08027e6d
 8027ec0:	08027e6d 	.word	0x08027e6d
 8027ec4:	08028013 	.word	0x08028013
 8027ec8:	08027e6d 	.word	0x08027e6d
 8027ecc:	08027f1b 	.word	0x08027f1b
 8027ed0:	08027e6d 	.word	0x08027e6d
 8027ed4:	08027e6d 	.word	0x08027e6d
 8027ed8:	08027fb3 	.word	0x08027fb3
 8027edc:	6833      	ldr	r3, [r6, #0]
 8027ede:	1d1a      	adds	r2, r3, #4
 8027ee0:	681b      	ldr	r3, [r3, #0]
 8027ee2:	6032      	str	r2, [r6, #0]
 8027ee4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8027ee8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8027eec:	2301      	movs	r3, #1
 8027eee:	e09d      	b.n	802802c <_printf_i+0x1e8>
 8027ef0:	6833      	ldr	r3, [r6, #0]
 8027ef2:	6820      	ldr	r0, [r4, #0]
 8027ef4:	1d19      	adds	r1, r3, #4
 8027ef6:	6031      	str	r1, [r6, #0]
 8027ef8:	0606      	lsls	r6, r0, #24
 8027efa:	d501      	bpl.n	8027f00 <_printf_i+0xbc>
 8027efc:	681d      	ldr	r5, [r3, #0]
 8027efe:	e003      	b.n	8027f08 <_printf_i+0xc4>
 8027f00:	0645      	lsls	r5, r0, #25
 8027f02:	d5fb      	bpl.n	8027efc <_printf_i+0xb8>
 8027f04:	f9b3 5000 	ldrsh.w	r5, [r3]
 8027f08:	2d00      	cmp	r5, #0
 8027f0a:	da03      	bge.n	8027f14 <_printf_i+0xd0>
 8027f0c:	232d      	movs	r3, #45	@ 0x2d
 8027f0e:	426d      	negs	r5, r5
 8027f10:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8027f14:	4859      	ldr	r0, [pc, #356]	@ (802807c <_printf_i+0x238>)
 8027f16:	230a      	movs	r3, #10
 8027f18:	e011      	b.n	8027f3e <_printf_i+0xfa>
 8027f1a:	6821      	ldr	r1, [r4, #0]
 8027f1c:	6833      	ldr	r3, [r6, #0]
 8027f1e:	0608      	lsls	r0, r1, #24
 8027f20:	f853 5b04 	ldr.w	r5, [r3], #4
 8027f24:	d402      	bmi.n	8027f2c <_printf_i+0xe8>
 8027f26:	0649      	lsls	r1, r1, #25
 8027f28:	bf48      	it	mi
 8027f2a:	b2ad      	uxthmi	r5, r5
 8027f2c:	2f6f      	cmp	r7, #111	@ 0x6f
 8027f2e:	4853      	ldr	r0, [pc, #332]	@ (802807c <_printf_i+0x238>)
 8027f30:	6033      	str	r3, [r6, #0]
 8027f32:	bf14      	ite	ne
 8027f34:	230a      	movne	r3, #10
 8027f36:	2308      	moveq	r3, #8
 8027f38:	2100      	movs	r1, #0
 8027f3a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8027f3e:	6866      	ldr	r6, [r4, #4]
 8027f40:	60a6      	str	r6, [r4, #8]
 8027f42:	2e00      	cmp	r6, #0
 8027f44:	bfa2      	ittt	ge
 8027f46:	6821      	ldrge	r1, [r4, #0]
 8027f48:	f021 0104 	bicge.w	r1, r1, #4
 8027f4c:	6021      	strge	r1, [r4, #0]
 8027f4e:	b90d      	cbnz	r5, 8027f54 <_printf_i+0x110>
 8027f50:	2e00      	cmp	r6, #0
 8027f52:	d04b      	beq.n	8027fec <_printf_i+0x1a8>
 8027f54:	4616      	mov	r6, r2
 8027f56:	fbb5 f1f3 	udiv	r1, r5, r3
 8027f5a:	fb03 5711 	mls	r7, r3, r1, r5
 8027f5e:	5dc7      	ldrb	r7, [r0, r7]
 8027f60:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8027f64:	462f      	mov	r7, r5
 8027f66:	42bb      	cmp	r3, r7
 8027f68:	460d      	mov	r5, r1
 8027f6a:	d9f4      	bls.n	8027f56 <_printf_i+0x112>
 8027f6c:	2b08      	cmp	r3, #8
 8027f6e:	d10b      	bne.n	8027f88 <_printf_i+0x144>
 8027f70:	6823      	ldr	r3, [r4, #0]
 8027f72:	07df      	lsls	r7, r3, #31
 8027f74:	d508      	bpl.n	8027f88 <_printf_i+0x144>
 8027f76:	6923      	ldr	r3, [r4, #16]
 8027f78:	6861      	ldr	r1, [r4, #4]
 8027f7a:	4299      	cmp	r1, r3
 8027f7c:	bfde      	ittt	le
 8027f7e:	2330      	movle	r3, #48	@ 0x30
 8027f80:	f806 3c01 	strble.w	r3, [r6, #-1]
 8027f84:	f106 36ff 	addle.w	r6, r6, #4294967295
 8027f88:	1b92      	subs	r2, r2, r6
 8027f8a:	6122      	str	r2, [r4, #16]
 8027f8c:	f8cd a000 	str.w	sl, [sp]
 8027f90:	464b      	mov	r3, r9
 8027f92:	aa03      	add	r2, sp, #12
 8027f94:	4621      	mov	r1, r4
 8027f96:	4640      	mov	r0, r8
 8027f98:	f7ff fee6 	bl	8027d68 <_printf_common>
 8027f9c:	3001      	adds	r0, #1
 8027f9e:	d14a      	bne.n	8028036 <_printf_i+0x1f2>
 8027fa0:	f04f 30ff 	mov.w	r0, #4294967295
 8027fa4:	b004      	add	sp, #16
 8027fa6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8027faa:	6823      	ldr	r3, [r4, #0]
 8027fac:	f043 0320 	orr.w	r3, r3, #32
 8027fb0:	6023      	str	r3, [r4, #0]
 8027fb2:	4833      	ldr	r0, [pc, #204]	@ (8028080 <_printf_i+0x23c>)
 8027fb4:	2778      	movs	r7, #120	@ 0x78
 8027fb6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8027fba:	6823      	ldr	r3, [r4, #0]
 8027fbc:	6831      	ldr	r1, [r6, #0]
 8027fbe:	061f      	lsls	r7, r3, #24
 8027fc0:	f851 5b04 	ldr.w	r5, [r1], #4
 8027fc4:	d402      	bmi.n	8027fcc <_printf_i+0x188>
 8027fc6:	065f      	lsls	r7, r3, #25
 8027fc8:	bf48      	it	mi
 8027fca:	b2ad      	uxthmi	r5, r5
 8027fcc:	6031      	str	r1, [r6, #0]
 8027fce:	07d9      	lsls	r1, r3, #31
 8027fd0:	bf44      	itt	mi
 8027fd2:	f043 0320 	orrmi.w	r3, r3, #32
 8027fd6:	6023      	strmi	r3, [r4, #0]
 8027fd8:	b11d      	cbz	r5, 8027fe2 <_printf_i+0x19e>
 8027fda:	2310      	movs	r3, #16
 8027fdc:	e7ac      	b.n	8027f38 <_printf_i+0xf4>
 8027fde:	4827      	ldr	r0, [pc, #156]	@ (802807c <_printf_i+0x238>)
 8027fe0:	e7e9      	b.n	8027fb6 <_printf_i+0x172>
 8027fe2:	6823      	ldr	r3, [r4, #0]
 8027fe4:	f023 0320 	bic.w	r3, r3, #32
 8027fe8:	6023      	str	r3, [r4, #0]
 8027fea:	e7f6      	b.n	8027fda <_printf_i+0x196>
 8027fec:	4616      	mov	r6, r2
 8027fee:	e7bd      	b.n	8027f6c <_printf_i+0x128>
 8027ff0:	6833      	ldr	r3, [r6, #0]
 8027ff2:	6825      	ldr	r5, [r4, #0]
 8027ff4:	6961      	ldr	r1, [r4, #20]
 8027ff6:	1d18      	adds	r0, r3, #4
 8027ff8:	6030      	str	r0, [r6, #0]
 8027ffa:	062e      	lsls	r6, r5, #24
 8027ffc:	681b      	ldr	r3, [r3, #0]
 8027ffe:	d501      	bpl.n	8028004 <_printf_i+0x1c0>
 8028000:	6019      	str	r1, [r3, #0]
 8028002:	e002      	b.n	802800a <_printf_i+0x1c6>
 8028004:	0668      	lsls	r0, r5, #25
 8028006:	d5fb      	bpl.n	8028000 <_printf_i+0x1bc>
 8028008:	8019      	strh	r1, [r3, #0]
 802800a:	2300      	movs	r3, #0
 802800c:	6123      	str	r3, [r4, #16]
 802800e:	4616      	mov	r6, r2
 8028010:	e7bc      	b.n	8027f8c <_printf_i+0x148>
 8028012:	6833      	ldr	r3, [r6, #0]
 8028014:	1d1a      	adds	r2, r3, #4
 8028016:	6032      	str	r2, [r6, #0]
 8028018:	681e      	ldr	r6, [r3, #0]
 802801a:	6862      	ldr	r2, [r4, #4]
 802801c:	2100      	movs	r1, #0
 802801e:	4630      	mov	r0, r6
 8028020:	f7d8 f95e 	bl	80002e0 <memchr>
 8028024:	b108      	cbz	r0, 802802a <_printf_i+0x1e6>
 8028026:	1b80      	subs	r0, r0, r6
 8028028:	6060      	str	r0, [r4, #4]
 802802a:	6863      	ldr	r3, [r4, #4]
 802802c:	6123      	str	r3, [r4, #16]
 802802e:	2300      	movs	r3, #0
 8028030:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8028034:	e7aa      	b.n	8027f8c <_printf_i+0x148>
 8028036:	6923      	ldr	r3, [r4, #16]
 8028038:	4632      	mov	r2, r6
 802803a:	4649      	mov	r1, r9
 802803c:	4640      	mov	r0, r8
 802803e:	47d0      	blx	sl
 8028040:	3001      	adds	r0, #1
 8028042:	d0ad      	beq.n	8027fa0 <_printf_i+0x15c>
 8028044:	6823      	ldr	r3, [r4, #0]
 8028046:	079b      	lsls	r3, r3, #30
 8028048:	d413      	bmi.n	8028072 <_printf_i+0x22e>
 802804a:	68e0      	ldr	r0, [r4, #12]
 802804c:	9b03      	ldr	r3, [sp, #12]
 802804e:	4298      	cmp	r0, r3
 8028050:	bfb8      	it	lt
 8028052:	4618      	movlt	r0, r3
 8028054:	e7a6      	b.n	8027fa4 <_printf_i+0x160>
 8028056:	2301      	movs	r3, #1
 8028058:	4632      	mov	r2, r6
 802805a:	4649      	mov	r1, r9
 802805c:	4640      	mov	r0, r8
 802805e:	47d0      	blx	sl
 8028060:	3001      	adds	r0, #1
 8028062:	d09d      	beq.n	8027fa0 <_printf_i+0x15c>
 8028064:	3501      	adds	r5, #1
 8028066:	68e3      	ldr	r3, [r4, #12]
 8028068:	9903      	ldr	r1, [sp, #12]
 802806a:	1a5b      	subs	r3, r3, r1
 802806c:	42ab      	cmp	r3, r5
 802806e:	dcf2      	bgt.n	8028056 <_printf_i+0x212>
 8028070:	e7eb      	b.n	802804a <_printf_i+0x206>
 8028072:	2500      	movs	r5, #0
 8028074:	f104 0619 	add.w	r6, r4, #25
 8028078:	e7f5      	b.n	8028066 <_printf_i+0x222>
 802807a:	bf00      	nop
 802807c:	0802cd39 	.word	0x0802cd39
 8028080:	0802cd4a 	.word	0x0802cd4a

08028084 <__sflush_r>:
 8028084:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8028088:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802808c:	0716      	lsls	r6, r2, #28
 802808e:	4605      	mov	r5, r0
 8028090:	460c      	mov	r4, r1
 8028092:	d454      	bmi.n	802813e <__sflush_r+0xba>
 8028094:	684b      	ldr	r3, [r1, #4]
 8028096:	2b00      	cmp	r3, #0
 8028098:	dc02      	bgt.n	80280a0 <__sflush_r+0x1c>
 802809a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 802809c:	2b00      	cmp	r3, #0
 802809e:	dd48      	ble.n	8028132 <__sflush_r+0xae>
 80280a0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80280a2:	2e00      	cmp	r6, #0
 80280a4:	d045      	beq.n	8028132 <__sflush_r+0xae>
 80280a6:	2300      	movs	r3, #0
 80280a8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80280ac:	682f      	ldr	r7, [r5, #0]
 80280ae:	6a21      	ldr	r1, [r4, #32]
 80280b0:	602b      	str	r3, [r5, #0]
 80280b2:	d030      	beq.n	8028116 <__sflush_r+0x92>
 80280b4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80280b6:	89a3      	ldrh	r3, [r4, #12]
 80280b8:	0759      	lsls	r1, r3, #29
 80280ba:	d505      	bpl.n	80280c8 <__sflush_r+0x44>
 80280bc:	6863      	ldr	r3, [r4, #4]
 80280be:	1ad2      	subs	r2, r2, r3
 80280c0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80280c2:	b10b      	cbz	r3, 80280c8 <__sflush_r+0x44>
 80280c4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80280c6:	1ad2      	subs	r2, r2, r3
 80280c8:	2300      	movs	r3, #0
 80280ca:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80280cc:	6a21      	ldr	r1, [r4, #32]
 80280ce:	4628      	mov	r0, r5
 80280d0:	47b0      	blx	r6
 80280d2:	1c43      	adds	r3, r0, #1
 80280d4:	89a3      	ldrh	r3, [r4, #12]
 80280d6:	d106      	bne.n	80280e6 <__sflush_r+0x62>
 80280d8:	6829      	ldr	r1, [r5, #0]
 80280da:	291d      	cmp	r1, #29
 80280dc:	d82b      	bhi.n	8028136 <__sflush_r+0xb2>
 80280de:	4a2a      	ldr	r2, [pc, #168]	@ (8028188 <__sflush_r+0x104>)
 80280e0:	410a      	asrs	r2, r1
 80280e2:	07d6      	lsls	r6, r2, #31
 80280e4:	d427      	bmi.n	8028136 <__sflush_r+0xb2>
 80280e6:	2200      	movs	r2, #0
 80280e8:	6062      	str	r2, [r4, #4]
 80280ea:	04d9      	lsls	r1, r3, #19
 80280ec:	6922      	ldr	r2, [r4, #16]
 80280ee:	6022      	str	r2, [r4, #0]
 80280f0:	d504      	bpl.n	80280fc <__sflush_r+0x78>
 80280f2:	1c42      	adds	r2, r0, #1
 80280f4:	d101      	bne.n	80280fa <__sflush_r+0x76>
 80280f6:	682b      	ldr	r3, [r5, #0]
 80280f8:	b903      	cbnz	r3, 80280fc <__sflush_r+0x78>
 80280fa:	6560      	str	r0, [r4, #84]	@ 0x54
 80280fc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80280fe:	602f      	str	r7, [r5, #0]
 8028100:	b1b9      	cbz	r1, 8028132 <__sflush_r+0xae>
 8028102:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8028106:	4299      	cmp	r1, r3
 8028108:	d002      	beq.n	8028110 <__sflush_r+0x8c>
 802810a:	4628      	mov	r0, r5
 802810c:	f7ff fca0 	bl	8027a50 <_free_r>
 8028110:	2300      	movs	r3, #0
 8028112:	6363      	str	r3, [r4, #52]	@ 0x34
 8028114:	e00d      	b.n	8028132 <__sflush_r+0xae>
 8028116:	2301      	movs	r3, #1
 8028118:	4628      	mov	r0, r5
 802811a:	47b0      	blx	r6
 802811c:	4602      	mov	r2, r0
 802811e:	1c50      	adds	r0, r2, #1
 8028120:	d1c9      	bne.n	80280b6 <__sflush_r+0x32>
 8028122:	682b      	ldr	r3, [r5, #0]
 8028124:	2b00      	cmp	r3, #0
 8028126:	d0c6      	beq.n	80280b6 <__sflush_r+0x32>
 8028128:	2b1d      	cmp	r3, #29
 802812a:	d001      	beq.n	8028130 <__sflush_r+0xac>
 802812c:	2b16      	cmp	r3, #22
 802812e:	d11e      	bne.n	802816e <__sflush_r+0xea>
 8028130:	602f      	str	r7, [r5, #0]
 8028132:	2000      	movs	r0, #0
 8028134:	e022      	b.n	802817c <__sflush_r+0xf8>
 8028136:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 802813a:	b21b      	sxth	r3, r3
 802813c:	e01b      	b.n	8028176 <__sflush_r+0xf2>
 802813e:	690f      	ldr	r7, [r1, #16]
 8028140:	2f00      	cmp	r7, #0
 8028142:	d0f6      	beq.n	8028132 <__sflush_r+0xae>
 8028144:	0793      	lsls	r3, r2, #30
 8028146:	680e      	ldr	r6, [r1, #0]
 8028148:	bf08      	it	eq
 802814a:	694b      	ldreq	r3, [r1, #20]
 802814c:	600f      	str	r7, [r1, #0]
 802814e:	bf18      	it	ne
 8028150:	2300      	movne	r3, #0
 8028152:	eba6 0807 	sub.w	r8, r6, r7
 8028156:	608b      	str	r3, [r1, #8]
 8028158:	f1b8 0f00 	cmp.w	r8, #0
 802815c:	dde9      	ble.n	8028132 <__sflush_r+0xae>
 802815e:	6a21      	ldr	r1, [r4, #32]
 8028160:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8028162:	4643      	mov	r3, r8
 8028164:	463a      	mov	r2, r7
 8028166:	4628      	mov	r0, r5
 8028168:	47b0      	blx	r6
 802816a:	2800      	cmp	r0, #0
 802816c:	dc08      	bgt.n	8028180 <__sflush_r+0xfc>
 802816e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8028172:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8028176:	81a3      	strh	r3, [r4, #12]
 8028178:	f04f 30ff 	mov.w	r0, #4294967295
 802817c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8028180:	4407      	add	r7, r0
 8028182:	eba8 0800 	sub.w	r8, r8, r0
 8028186:	e7e7      	b.n	8028158 <__sflush_r+0xd4>
 8028188:	dfbffffe 	.word	0xdfbffffe

0802818c <_fflush_r>:
 802818c:	b538      	push	{r3, r4, r5, lr}
 802818e:	690b      	ldr	r3, [r1, #16]
 8028190:	4605      	mov	r5, r0
 8028192:	460c      	mov	r4, r1
 8028194:	b913      	cbnz	r3, 802819c <_fflush_r+0x10>
 8028196:	2500      	movs	r5, #0
 8028198:	4628      	mov	r0, r5
 802819a:	bd38      	pop	{r3, r4, r5, pc}
 802819c:	b118      	cbz	r0, 80281a6 <_fflush_r+0x1a>
 802819e:	6a03      	ldr	r3, [r0, #32]
 80281a0:	b90b      	cbnz	r3, 80281a6 <_fflush_r+0x1a>
 80281a2:	f7ff f9e9 	bl	8027578 <__sinit>
 80281a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80281aa:	2b00      	cmp	r3, #0
 80281ac:	d0f3      	beq.n	8028196 <_fflush_r+0xa>
 80281ae:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80281b0:	07d0      	lsls	r0, r2, #31
 80281b2:	d404      	bmi.n	80281be <_fflush_r+0x32>
 80281b4:	0599      	lsls	r1, r3, #22
 80281b6:	d402      	bmi.n	80281be <_fflush_r+0x32>
 80281b8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80281ba:	f7ff fbdc 	bl	8027976 <__retarget_lock_acquire_recursive>
 80281be:	4628      	mov	r0, r5
 80281c0:	4621      	mov	r1, r4
 80281c2:	f7ff ff5f 	bl	8028084 <__sflush_r>
 80281c6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80281c8:	07da      	lsls	r2, r3, #31
 80281ca:	4605      	mov	r5, r0
 80281cc:	d4e4      	bmi.n	8028198 <_fflush_r+0xc>
 80281ce:	89a3      	ldrh	r3, [r4, #12]
 80281d0:	059b      	lsls	r3, r3, #22
 80281d2:	d4e1      	bmi.n	8028198 <_fflush_r+0xc>
 80281d4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80281d6:	f7ff fbcf 	bl	8027978 <__retarget_lock_release_recursive>
 80281da:	e7dd      	b.n	8028198 <_fflush_r+0xc>

080281dc <__swhatbuf_r>:
 80281dc:	b570      	push	{r4, r5, r6, lr}
 80281de:	460c      	mov	r4, r1
 80281e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80281e4:	2900      	cmp	r1, #0
 80281e6:	b096      	sub	sp, #88	@ 0x58
 80281e8:	4615      	mov	r5, r2
 80281ea:	461e      	mov	r6, r3
 80281ec:	da0d      	bge.n	802820a <__swhatbuf_r+0x2e>
 80281ee:	89a3      	ldrh	r3, [r4, #12]
 80281f0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80281f4:	f04f 0100 	mov.w	r1, #0
 80281f8:	bf14      	ite	ne
 80281fa:	2340      	movne	r3, #64	@ 0x40
 80281fc:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8028200:	2000      	movs	r0, #0
 8028202:	6031      	str	r1, [r6, #0]
 8028204:	602b      	str	r3, [r5, #0]
 8028206:	b016      	add	sp, #88	@ 0x58
 8028208:	bd70      	pop	{r4, r5, r6, pc}
 802820a:	466a      	mov	r2, sp
 802820c:	f000 f848 	bl	80282a0 <_fstat_r>
 8028210:	2800      	cmp	r0, #0
 8028212:	dbec      	blt.n	80281ee <__swhatbuf_r+0x12>
 8028214:	9901      	ldr	r1, [sp, #4]
 8028216:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 802821a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 802821e:	4259      	negs	r1, r3
 8028220:	4159      	adcs	r1, r3
 8028222:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8028226:	e7eb      	b.n	8028200 <__swhatbuf_r+0x24>

08028228 <__smakebuf_r>:
 8028228:	898b      	ldrh	r3, [r1, #12]
 802822a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 802822c:	079d      	lsls	r5, r3, #30
 802822e:	4606      	mov	r6, r0
 8028230:	460c      	mov	r4, r1
 8028232:	d507      	bpl.n	8028244 <__smakebuf_r+0x1c>
 8028234:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8028238:	6023      	str	r3, [r4, #0]
 802823a:	6123      	str	r3, [r4, #16]
 802823c:	2301      	movs	r3, #1
 802823e:	6163      	str	r3, [r4, #20]
 8028240:	b003      	add	sp, #12
 8028242:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8028244:	ab01      	add	r3, sp, #4
 8028246:	466a      	mov	r2, sp
 8028248:	f7ff ffc8 	bl	80281dc <__swhatbuf_r>
 802824c:	9f00      	ldr	r7, [sp, #0]
 802824e:	4605      	mov	r5, r0
 8028250:	4639      	mov	r1, r7
 8028252:	4630      	mov	r0, r6
 8028254:	f7ff f86a 	bl	802732c <_malloc_r>
 8028258:	b948      	cbnz	r0, 802826e <__smakebuf_r+0x46>
 802825a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802825e:	059a      	lsls	r2, r3, #22
 8028260:	d4ee      	bmi.n	8028240 <__smakebuf_r+0x18>
 8028262:	f023 0303 	bic.w	r3, r3, #3
 8028266:	f043 0302 	orr.w	r3, r3, #2
 802826a:	81a3      	strh	r3, [r4, #12]
 802826c:	e7e2      	b.n	8028234 <__smakebuf_r+0xc>
 802826e:	89a3      	ldrh	r3, [r4, #12]
 8028270:	6020      	str	r0, [r4, #0]
 8028272:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8028276:	81a3      	strh	r3, [r4, #12]
 8028278:	9b01      	ldr	r3, [sp, #4]
 802827a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 802827e:	b15b      	cbz	r3, 8028298 <__smakebuf_r+0x70>
 8028280:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8028284:	4630      	mov	r0, r6
 8028286:	f000 f81d 	bl	80282c4 <_isatty_r>
 802828a:	b128      	cbz	r0, 8028298 <__smakebuf_r+0x70>
 802828c:	89a3      	ldrh	r3, [r4, #12]
 802828e:	f023 0303 	bic.w	r3, r3, #3
 8028292:	f043 0301 	orr.w	r3, r3, #1
 8028296:	81a3      	strh	r3, [r4, #12]
 8028298:	89a3      	ldrh	r3, [r4, #12]
 802829a:	431d      	orrs	r5, r3
 802829c:	81a5      	strh	r5, [r4, #12]
 802829e:	e7cf      	b.n	8028240 <__smakebuf_r+0x18>

080282a0 <_fstat_r>:
 80282a0:	b538      	push	{r3, r4, r5, lr}
 80282a2:	4d07      	ldr	r5, [pc, #28]	@ (80282c0 <_fstat_r+0x20>)
 80282a4:	2300      	movs	r3, #0
 80282a6:	4604      	mov	r4, r0
 80282a8:	4608      	mov	r0, r1
 80282aa:	4611      	mov	r1, r2
 80282ac:	602b      	str	r3, [r5, #0]
 80282ae:	f7d9 fa08 	bl	80016c2 <_fstat>
 80282b2:	1c43      	adds	r3, r0, #1
 80282b4:	d102      	bne.n	80282bc <_fstat_r+0x1c>
 80282b6:	682b      	ldr	r3, [r5, #0]
 80282b8:	b103      	cbz	r3, 80282bc <_fstat_r+0x1c>
 80282ba:	6023      	str	r3, [r4, #0]
 80282bc:	bd38      	pop	{r3, r4, r5, pc}
 80282be:	bf00      	nop
 80282c0:	240299a0 	.word	0x240299a0

080282c4 <_isatty_r>:
 80282c4:	b538      	push	{r3, r4, r5, lr}
 80282c6:	4d06      	ldr	r5, [pc, #24]	@ (80282e0 <_isatty_r+0x1c>)
 80282c8:	2300      	movs	r3, #0
 80282ca:	4604      	mov	r4, r0
 80282cc:	4608      	mov	r0, r1
 80282ce:	602b      	str	r3, [r5, #0]
 80282d0:	f7d9 f9fc 	bl	80016cc <_isatty>
 80282d4:	1c43      	adds	r3, r0, #1
 80282d6:	d102      	bne.n	80282de <_isatty_r+0x1a>
 80282d8:	682b      	ldr	r3, [r5, #0]
 80282da:	b103      	cbz	r3, 80282de <_isatty_r+0x1a>
 80282dc:	6023      	str	r3, [r4, #0]
 80282de:	bd38      	pop	{r3, r4, r5, pc}
 80282e0:	240299a0 	.word	0x240299a0

080282e4 <_init>:
 80282e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80282e6:	bf00      	nop
 80282e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80282ea:	bc08      	pop	{r3}
 80282ec:	469e      	mov	lr, r3
 80282ee:	4770      	bx	lr

080282f0 <_fini>:
 80282f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80282f2:	bf00      	nop
 80282f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80282f6:	bc08      	pop	{r3}
 80282f8:	469e      	mov	lr, r3
 80282fa:	4770      	bx	lr
