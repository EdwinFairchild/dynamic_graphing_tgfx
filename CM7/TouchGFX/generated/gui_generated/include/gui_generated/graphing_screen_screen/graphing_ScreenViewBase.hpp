/*********************************************************************************/
/********** THIS FILE IS GENERATED BY TOUCHGFX DESIGNER, DO NOT MODIFY ***********/
/*********************************************************************************/
#ifndef GRAPHING_SCREENVIEWBASE_HPP
#define GRAPHING_SCREENVIEWBASE_HPP

#include <gui/common/FrontendApplication.hpp>
#include <mvp/View.hpp>
#include <gui/graphing_screen_screen/graphing_ScreenPresenter.hpp>
#include <touchgfx/widgets/Box.hpp>
#include <touchgfx/containers/Container.hpp>
#include <touchgfx/widgets/Image.hpp>
#include <touchgfx/widgets/Gauge.hpp>
#include <touchgfx/widgets/canvas/PainterRGB888Bitmap.hpp>
#include <touchgfx/containers/SwipeContainer.hpp>
#include <touchgfx/widgets/AnimatedImage.hpp>
#include <touchgfx/widgets/TextArea.hpp>
#include <touchgfx/widgets/TextAreaWithWildcard.hpp>
#include <touchgfx/containers/Slider.hpp>
#include <touchgfx/containers/clock/DigitalClock.hpp>
#include <touchgfx/containers/progress_indicators/ImageProgress.hpp>
#include <touchgfx/EasingEquations.hpp>
#include <touchgfx/mixins/FadeAnimator.hpp>

class graphing_ScreenViewBase : public touchgfx::View<graphing_ScreenPresenter>
{
public:
    graphing_ScreenViewBase();
    virtual ~graphing_ScreenViewBase();
    virtual void setupScreen();
    virtual void transitionBegins();

    /*
     * Virtual Action Handlers
     */
    virtual void allVisibleDone()
    {
        // Override and implement this function in graphing_Screen
    }
    virtual void sliderValueChanged(int value)
    {
        // Override and implement this function in graphing_Screen
    }

protected:
    FrontendApplication& application() {
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
    }

    /*
     * Member Declarations
     */
    touchgfx::Box __background;
    touchgfx::Container container1;
    touchgfx::Box box1;
    touchgfx::Box box2;
    touchgfx::FadeAnimator< touchgfx::Image > background;
    touchgfx::FadeAnimator< touchgfx::Gauge > gauge1;
    touchgfx::PainterRGB888Bitmap gauge1Painter;
    touchgfx::SwipeContainer swipeContainer1;
    touchgfx::Container car_container;
    touchgfx::AnimatedImage car;
    touchgfx::Image Image3;
    touchgfx::Image Image4;
    touchgfx::FadeAnimator< touchgfx::Image > circle;
    touchgfx::TextArea mph_lable;
    touchgfx::TextAreaWithOneWildcard mph;
    touchgfx::Container tire_pres_pg;
    touchgfx::Image tire_pre;
    touchgfx::TextAreaWithOneWildcard pres_fl;
    touchgfx::TextAreaWithOneWildcard pres_fr;
    touchgfx::TextAreaWithOneWildcard pres_rr;
    touchgfx::TextAreaWithOneWildcard pres_rl;
    touchgfx::Slider slider1;
    touchgfx::DigitalClock digitalClock1;
    touchgfx::ImageProgress battery_level;

    /*
     * Wildcard Buffers
     */
    static const uint16_t MPH_SIZE = 10;
    touchgfx::Unicode::UnicodeChar mphBuffer[MPH_SIZE];
    static const uint16_t PRES_FL_SIZE = 3;
    touchgfx::Unicode::UnicodeChar pres_flBuffer[PRES_FL_SIZE];
    static const uint16_t PRES_FR_SIZE = 3;
    touchgfx::Unicode::UnicodeChar pres_frBuffer[PRES_FR_SIZE];
    static const uint16_t PRES_RR_SIZE = 3;
    touchgfx::Unicode::UnicodeChar pres_rrBuffer[PRES_RR_SIZE];
    static const uint16_t PRES_RL_SIZE = 3;
    touchgfx::Unicode::UnicodeChar pres_rlBuffer[PRES_RL_SIZE];

private:

    /*
     * Canvas Buffer Size
     */
    static const uint32_t CANVAS_BUFFER_SIZE = 12000;
    uint8_t canvasBuffer[CANVAS_BUFFER_SIZE];

    /*
     * Callback Declarations
     */
    touchgfx::Callback<graphing_ScreenViewBase, const touchgfx::AnimatedImage&> animationEndedCallback;
    touchgfx::Callback < graphing_ScreenViewBase, const touchgfx::FadeAnimator<touchgfx::Gauge>& > interaction2EndedCallback;
    touchgfx::Callback < graphing_ScreenViewBase, const touchgfx::FadeAnimator<touchgfx::Image>& > interaction3EndedCallback;
    touchgfx::Callback<graphing_ScreenViewBase, const touchgfx::Slider&, int> sliderValueChangedCallback;

    /*
     * Callback Handler Declarations
     */
    void animationEndedCallbackHandler(const touchgfx::AnimatedImage& src);
    void interaction2EndedCallbackHandler(const touchgfx::FadeAnimator<touchgfx::Gauge>& comp);
    void interaction3EndedCallbackHandler(const touchgfx::FadeAnimator<touchgfx::Image>& comp);
    void sliderValueChangedCallbackHandler(const touchgfx::Slider& src, int value);

};

#endif // GRAPHING_SCREENVIEWBASE_HPP
