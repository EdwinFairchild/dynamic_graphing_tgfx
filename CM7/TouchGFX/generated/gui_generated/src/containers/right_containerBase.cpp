/*********************************************************************************/
/********** THIS FILE IS GENERATED BY TOUCHGFX DESIGNER, DO NOT MODIFY ***********/
/*********************************************************************************/
#include <gui_generated/containers/right_containerBase.hpp>
#include <images/BitmapDatabase.hpp>
#include <texts/TextKeysAndLanguages.hpp>
#include <touchgfx/Color.hpp>

right_containerBase::right_containerBase()
{
    setWidth(256);
    setHeight(396);
    page1.setXY(0, 0);
    page1.setPageIndicatorBitmaps(touchgfx::Bitmap(BITMAP_SWIPE_CONTAINER_PAGER_ID), touchgfx::Bitmap(BITMAP_SWIPE_CONTAINER_PAGER_ID));
    page1.setPageIndicatorXY(0, 0);
    page1.setSwipeCutoff(50);
    page1.setEndSwipeElasticWidth(50);

    right_temp_page.setWidth(256);
    right_temp_page.setHeight(396);
    temp_progress.setXY(4, -20);
    temp_progress.setProgressIndicatorPosition(0, 0, 163, 388);
    temp_progress.setRange(0, 100);
    temp_progress.setDirection(touchgfx::AbstractDirectionProgress::UP);
    temp_progress.setBackground(touchgfx::Bitmap(BITMAP_TEMP_BG_ID));
    temp_progress.setBitmap(BITMAP_TEMP_COLOR_ID);
    temp_progress.setValue(63);
    temp_progress.setAnchorAtZero(true);
    right_temp_page.add(temp_progress);

    temp_text_area.setXY(-84, 0);
    temp_text_area.setColor(touchgfx::Color::getColorFromRGB(107, 107, 107));
    temp_text_area.setLinespacing(0);
    Unicode::snprintf(temp_text_areaBuffer, TEMP_TEXT_AREA_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_QW5T).getText());
    temp_text_area.setWildcard(temp_text_areaBuffer);
    temp_text_area.resizeToCurrentText();
    temp_text_area.setTypedText(touchgfx::TypedText(T___SINGLEUSE_3MX6));
    right_temp_page.add(temp_text_area);

    gauge_left_progress.setXY(73, 49);
    gauge_left_progress.setProgressIndicatorPosition(0, 0, 200, 280);
    gauge_left_progress.setRange(0, 200);
    gauge_left_progress.setDirection(touchgfx::AbstractDirectionProgress::UP);
    gauge_left_progress.setBackground(touchgfx::Bitmap(BITMAP_LEFT_GAUGE_BG_ID));
    gauge_left_progress.setBitmap(BITMAP_LEFT_GAUGE_FILL_ID);
    gauge_left_progress.setValue(100);
    gauge_left_progress.setAnchorAtZero(true);
    right_temp_page.add(gauge_left_progress);

    page1.add(right_temp_page);

    left_gauge_page.setWidth(256);
    left_gauge_page.setHeight(396);
    page1.add(left_gauge_page);

    page1.setSelectedPage(0);
    add(page1);

    gauge_left.setPosition(0, 0, 256, 396);
    add(gauge_left);
}

right_containerBase::~right_containerBase()
{

}

void right_containerBase::initialize()
{

}
