/*********************************************************************************/
/********** THIS FILE IS GENERATED BY TOUCHGFX DESIGNER, DO NOT MODIFY ***********/
/*********************************************************************************/
#include <gui_generated/graphing_screen_screen/graphing_ScreenViewBase.hpp>
#include <touchgfx/canvas_widget_renderer/CanvasWidgetRenderer.hpp>
#include <touchgfx/Color.hpp>
#include <images/BitmapDatabase.hpp>

graphing_ScreenViewBase::graphing_ScreenViewBase() :
    flexButtonCallback(this, &graphing_ScreenViewBase::flexButtonCallbackHandler)
{
    touchgfx::CanvasWidgetRenderer::setupBuffer(canvasBuffer, CANVAS_BUFFER_SIZE);
    
    __background.setPosition(0, 0, 800, 480);
    __background.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
    add(__background);

    container1.setPosition(0, 0, 800, 480);
    add(container1);

    box1.setPosition(0, 0, 800, 480);
    box1.setColor(touchgfx::Color::getColorFromRGB(54, 53, 59));
    add(box1);

    box2.setPosition(0, 0, 800, 480);
    box2.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
    add(box2);

    flexButton1.setBoxWithBorderPosition(0, 0, 0, 208);
    flexButton1.setBorderSize(5);
    flexButton1.setBoxWithBorderColors(touchgfx::Color::getColorFromRGB(0, 102, 153), touchgfx::Color::getColorFromRGB(0, 153, 204), touchgfx::Color::getColorFromRGB(0, 51, 102), touchgfx::Color::getColorFromRGB(51, 102, 153));
    flexButton1.setAction(flexButtonCallback);
    flexButton1.setPosition(27, 105, 191, 208);
    add(flexButton1);

    background.setXY(0, 0);
    background.setBitmap(touchgfx::Bitmap(BITMAP_BACKGROUND_ID));
    add(background);

    gauge1.setBackground(touchgfx::Bitmap(BITMAP_GAUGE_ID));
    gauge1.setBackgroundOffset(0, -45);
    gauge1.setPosition(232, -40, 336, 336);
    gauge1.setCenter(168, 168);
    gauge1.setStartEndAngle(-117, 121);
    gauge1.setRange(10, 100);
    gauge1.setValue(50);
    gauge1.setNeedle(BITMAP_NEEDLE_ID, 10, 96);
    gauge1.setMovingNeedleRenderingAlgorithm(touchgfx::TextureMapper::BILINEAR_INTERPOLATION);
    gauge1.setSteadyNeedleRenderingAlgorithm(touchgfx::TextureMapper::BILINEAR_INTERPOLATION);
    gauge1.setArcVisible();
    gauge1Painter.setBitmap(touchgfx::Bitmap(BITMAP_SWOOP_ID));
    gauge1.getArc().setPainter(gauge1Painter);
    gauge1.getArc().setRadius(137);
    gauge1.getArc().setLineWidth(136);
    gauge1.getArc().setCapPrecision(180);
    gauge1.setArcPosition(33, 33, 270, 198);
    add(gauge1);

    car.setXY(272, 275);
    car.setBitmaps(BITMAP_CAR_00_ID, BITMAP_CAR_55_ID);
    car.setUpdateTicksInterval(3);
    car.startAnimation(false, true, false);
    add(car);

    middle.setPosition(206, 199, 371, 281);
    Image3.setXY(12, -111);
    Image3.setBitmap(touchgfx::Bitmap(BITMAP_VECTOR_20_ID));
    middle.add(Image3);

    Image4.setXY(222, -108);
    Image4.setBitmap(touchgfx::Bitmap(BITMAP_VECTOR_19_ID));
    middle.add(Image4);

    add(middle);

    Image5.setXY(257, 326);
    Image5.setBitmap(touchgfx::Bitmap(BITMAP_VECTOR_ID));
    add(Image5);
}

graphing_ScreenViewBase::~graphing_ScreenViewBase()
{
    touchgfx::CanvasWidgetRenderer::resetBuffer();
}

void graphing_ScreenViewBase::setupScreen()
{

}

void graphing_ScreenViewBase::flexButtonCallbackHandler(const touchgfx::AbstractButtonContainer& src)
{
    if (&src == &flexButton1)
    {
        //Interaction1
        //When flexButton1 clicked call virtual function
        //Call buttonSpeed
        buttonSpeed();
    }
}
